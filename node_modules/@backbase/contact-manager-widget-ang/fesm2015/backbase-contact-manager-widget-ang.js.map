{"version":3,"file":"backbase-contact-manager-widget-ang.js","sources":["../../../../libs/contact-manager-widget-ang/src/lib/models/types.ts","../../../../libs/contact-manager-widget-ang/src/lib/services/contacts-navigation.service.ts","../../../../libs/contact-manager-widget-ang/src/lib/services/contacts.service.ts","../../../../libs/contact-manager-widget-ang/src/lib/services/contacts-preferences.service.ts","../../../../libs/contact-manager-widget-ang/src/lib/directives/contacts-delete-confirmation-customizable.directive.ts","../../../../libs/contact-manager-widget-ang/src/lib/components/contacts-detail/contacts-detail.component.ts","../../../../libs/contact-manager-widget-ang/src/lib/components/contacts-detail/contacts-detail.component.html","../../../../libs/contact-manager-widget-ang/src/lib/directives/contacts-delete-success-notification-customizable.directive.ts","../../../../libs/contact-manager-widget-ang/src/lib/directives/contacts-delete-error-notification-customizable.directive.ts","../../../../libs/contact-manager-widget-ang/src/lib/containers/contacts-detail-container/contacts-detail-container.component.ts","../../../../libs/contact-manager-widget-ang/src/lib/containers/contacts-detail-container/contacts-detail-container.html","../../../../libs/contact-manager-widget-ang/src/lib/config.providers.ts","../../../../libs/contact-manager-widget-ang/src/lib/components/contacts-form/contacts-form.component.ts","../../../../libs/contact-manager-widget-ang/src/lib/components/contacts-form/contacts-form.component.html","../../../../libs/contact-manager-widget-ang/src/lib/directives/contacts-create-success-notification-customizable.directive.ts","../../../../libs/contact-manager-widget-ang/src/lib/directives/contacts-create-error-notification-customizable.directive.ts","../../../../libs/contact-manager-widget-ang/src/lib/directives/contacts-edit-success-notification-customizable.directive.ts","../../../../libs/contact-manager-widget-ang/src/lib/directives/contacts-edit-error-notification-customizable.directive.ts","../../../../libs/contact-manager-widget-ang/src/lib/directives/contacts-edit-discard-confirmation-customizable.directive.ts","../../../../libs/contact-manager-widget-ang/src/lib/containers/contacts-form-container/contacts-form-container.component.ts","../../../../libs/contact-manager-widget-ang/src/lib/containers/contacts-form-container/contacts-form-container.component.html","../../../../libs/contact-manager-widget-ang/src/lib/services/can-deactivate-guard.service.ts","../../../../libs/contact-manager-widget-ang/src/lib/components/contact-select-account-type/contact-select-account-type.component.ts","../../../../libs/contact-manager-widget-ang/src/lib/components/contact-select-account-type/contact-select-account-type.component.html","../../../../libs/contact-manager-widget-ang/src/lib/containers/contacts-type-list-container/contacts-type-list-container.component.ts","../../../../libs/contact-manager-widget-ang/src/lib/containers/contacts-type-list-container/contacts-type-list-container.component.html","../../../../libs/contact-manager-widget-ang/src/lib/components/contacts-list/list-item/contact-list-item.component.ts","../../../../libs/contact-manager-widget-ang/src/lib/components/contacts-list/list-item/contact-list-item.component.html","../../../../libs/contact-manager-widget-ang/src/lib/components/contacts-list/contact-list.component.ts","../../../../libs/contact-manager-widget-ang/src/lib/components/contacts-list/contact-list.component.html","../../../../libs/contact-manager-widget-ang/src/lib/containers/contacts-list-container/contacts-list-container.directive.ts","../../../../libs/contact-manager-widget-ang/src/lib/containers/contacts-list-container/contacts-list-container.component.ts","../../../../libs/contact-manager-widget-ang/src/lib/containers/contacts-list-container/contacts-list-container.component.html","../../../../libs/contact-manager-widget-ang/src/lib/contact-manager.component.ts","../../../../libs/contact-manager-widget-ang/src/lib/contact-manager.module.ts","../../../../libs/contact-manager-widget-ang/src/backbase-contact-manager-widget-ang.ts"],"sourcesContent":["import { Customizable, AccountInformation } from '@backbase/contact-common-ang';\nimport { ContactPutRequestBody as Contacts } from '@backbase/data-ang/contact-manager';\n\nexport interface ContactsFormItem extends Customizable {\n  /**\n   * contact ID\n   */\n  id: string;\n  /**\n   * Contact's first name\n   */\n  name: string;\n  /**\n   * Contacts lastname\n   */\n  surname?: string;\n  /**\n   * IBAN\n   */\n  IBAN?: string;\n  /**\n   * Contact's account Number.\n   */\n  accountNumber?: string;\n  /**\n   * contacts initials\n   */\n  initials?: string;\n  /**\n   * account Details.\n   */\n  accounts?: AccountInformation[];\n  /**\n   * contacts PhoneNumber.\n   */\n  phoneNumber?: string;\n  /**\n   * Contacts email ID.\n   */\n  email?: string;\n}\n\nexport interface SearchBoxSelectedEvent {\n  item: Contacts;\n  preventDefault: any;\n}\n\nexport interface SelectContactEvent {\n  /**\n   * Contacts ID\n   */\n  id: string;\n  /**\n   * Contacts type.\n   */\n  type: string;\n}\n\nexport enum AccountCreateType {\n  IBAN = 'IBAN',\n  EMAIL = 'email',\n  PHONE = 'phoneNumber',\n  ACCOUNT = 'accountNumber',\n}\n\nexport enum AccountTypeModelKey {\n  IBAN = 'IBAN',\n  BBAN = 'accountNumber',\n}\n\nexport interface CreateListType {\n  /**\n   * List of type of Contacts to create from\n   */\n  listItem: AccountCreateType;\n  /**\n   * To check if its enabled.\n   */\n  enableItem: boolean | undefined;\n}\n","import { Injectable } from '@angular/core';\nimport { RouterService } from '@backbase/foundation-ang/core';\nimport { AccountCreateType } from '../models/types';\n\nexport interface NavigationParams {\n  /**\n   * page number for fetching the contact\n   */\n  page?: number;\n  /**\n   * query text added while searching.\n   */\n  query?: string;\n}\n\nexport enum View {\n  List = 'LIST',\n  Detail = 'DETAIL',\n  Edit = 'EDIT',\n  Select = 'SELECT',\n}\n/**\n *\n * This service manages the routes of the widget.\n *\n * @see ContactManagerWidgetModule\n * @usageNotes\n *\n * ### Ensure the ContactManagerWidgetModule is imported to your component module\n *\n * ```ts\n * @NgModule({\n *   ...\n *   imports: [\n *     ...\n *     ContactManagerWidgetModule,\n *   ],\n * })\n * export class ContactManagerWidgetModule {}\n * ```\n *\n * ### Inject this service into your provider\n *\n * ```ts\n * @Component({\n *   ...\n *   providers: [ContactsNavigationService]\n * })\n *  export class ContactManagerWidgetModule {\n * ```\n */\n@Injectable()\nexport class ContactsNavigationService {\n  private _currentView = View.List;\n\n  get currentView(): View {\n    return this._currentView;\n  }\n\n  set currentView(view: View) {\n    this._currentView = view;\n  }\n  /**\n   * @param {RouterService} routerService router service\n   */\n  constructor(private readonly routerService: RouterService) {}\n  /**\n   * Routes to list view\n   *\n   * @param {?number} page current Page number.\n   * @param {?string} query Searched query text\n   * @param {'merge' | 'preserve' | ''} queryParamsHandling query hash handling. default value is merge\n   * @returns {Promise<boolean>} returns a observable of boolean.\n   */\n  list(page?: number, query?: string, queryParamsHandling: 'merge' | 'preserve' | '' = 'merge'): Promise<boolean> {\n    const queryParam: NavigationParams = {\n      page: page !== undefined && page > -1 ? page : undefined,\n    };\n    if (query || query === '') queryParam.query = query;\n\n    return this.routerService.navigate(['./'], {\n      queryParams: { ...queryParam },\n      queryParamsHandling: queryParamsHandling,\n    });\n  }\n  /**\n   * Routes to select view for contact types.\n   *\n   * @param {string} id - contact ID\n   * @returns {Promise<boolean>} Boolean promise.\n   */\n  select(id: string): Promise<boolean> {\n    this.currentView = View.Detail;\n\n    return this.routerService.navigate([id], { queryParamsHandling: 'merge' });\n  }\n  /**\n   * Routes to edit screen of selected contact.\n   *\n   * @param {string} id - Contact ID, for selected conatct for edit.\n   * @param {string} type - selected type of the contact\n   * @returns {Promise<boolean>} Boolean promise.\n   */\n  edit(id: string, type: string = AccountCreateType.IBAN): Promise<boolean> {\n    this.currentView = View.Edit;\n\n    return this.routerService.navigate(['edit', id, type], { queryParamsHandling: 'merge' });\n  }\n  /**\n   * Routes to new contact view.\n   *\n   * @returns {Promise<boolean>} Boolean promise.\n   */\n  newContact(): Promise<boolean> {\n    this.currentView = View.Select;\n\n    return this.routerService.navigate(['select'], { queryParamsHandling: 'merge' });\n  }\n  /**\n   * Route to new contact edit form when new contact is selected.\n   *\n   * @param {AccountCreateType} type whether the new contact is of IBAN/Phone/Email/Account type\n   * @returns {Promise<boolean>} resolves to true when form is ready\n   */\n  newContactForm(type: AccountCreateType): Promise<boolean> {\n    this.currentView = View.Edit;\n\n    return this.routerService.navigate(['edit', 0, type], { queryParamsHandling: 'merge' });\n  }\n}\n","import { HttpErrorResponse, HttpResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport { ContactsHttpService } from '@backbase/data-ang/contact-manager';\n\nimport { BehaviorSubject, combineLatest, merge, Observable, of, ReplaySubject, Subject, Subscription } from 'rxjs';\nimport { catchError, distinctUntilChanged, map, mapTo, scan, shareReplay, switchMap } from 'rxjs/operators';\nimport {\n  ContactActions,\n  ContactItem,\n  Contacts,\n  ContactUpdateDeleteResponse,\n  Id,\n  LoadMoreMethod,\n} from '@backbase/contact-common-ang';\nimport { AccountCreateType } from '../models/types';\n\nexport interface PageParams {\n  from: number;\n  size: number;\n  query: string;\n}\n\nexport interface ListParams {\n  pagination: PageParams;\n  paginationType?: string;\n  method?: string;\n}\n\nexport interface ContactList {\n  count: number | null;\n  contacts: Contacts;\n}\n\nexport interface GetContactsParams {\n  saId?: string;\n  leId?: string;\n  cursor?: string;\n  from?: number;\n  size?: number;\n  query?: string;\n}\n\nexport enum ModalOptions {\n  Cancel = 0,\n  Success = 1,\n}\n\nexport type ItemId = string;\n\nconst defaultListParams: ListParams = {\n  pagination: {\n    from: 0,\n    size: 4,\n    query: '',\n  },\n  paginationType: LoadMoreMethod.PAGINATION,\n};\n\n/**\n *\n * This service calls the api calls from data-ang\n *\n * @see ContactManagerWidgetModule\n * @usageNotes\n *\n * ### Ensure the ContactManagerWidgetModule is imported to your component module\n *\n * ```ts\n * @NgModule({\n *   ...\n *   imports: [\n *     ...\n *     ContactManagerWidgetModule,\n *   ],\n * })\n * export class ContactManagerWidgetModule {}\n * ```\n *\n * ### Inject this service into your provider\n *\n * ```ts\n * @Component({\n *   ...\n *   providers: [ContactsService]\n * })\n *  export class ContactManagerWidgetModule {\n * ```\n */\n@Injectable()\nexport class ContactsService {\n  constructor(public dataService: ContactsHttpService) {}\n\n  // \"Events\" - Subjects that are used to trigger actions\n  private readonly saveComplete = new Subject<LoadMoreMethod>();\n\n  private readonly listParams = new BehaviorSubject(defaultListParams);\n  readonly selectedItemId = new ReplaySubject<ItemId | null>(1);\n  private lastSelectedItemId = new BehaviorSubject<ItemId | undefined>(undefined);\n\n  private readonly actions$ = merge(\n    this.listParams.pipe(\n      map(({ pagination, paginationType, method }) => ({\n        action: ContactActions.Load,\n        params: pagination,\n        paginationType,\n        method: method,\n      })),\n    ),\n    this.saveComplete.pipe(mapTo({ action: ContactActions.Refresh })),\n  );\n\n  // The params to use for a list request\n  readonly items: Observable<ContactList> = this.actions$.pipe(\n    scan((state, action) => ({ ...state, ...action })),\n    map(({ action, params, paginationType, method }: any) => {\n      const isLoadMoreRefresh = action === ContactActions.Refresh && paginationType === LoadMoreMethod.LOAD_MORE;\n\n      return {\n        action,\n        paginationType,\n        params: {\n          ...params,\n          ...(isLoadMoreRefresh ? { from: 0, size: (params.from + 1) * params.size } : {}),\n        },\n        method,\n      };\n    }),\n    switchMap(({ params, method, ...state }) =>\n      this.dataService.getContacts(this.toHttpParams(params), 'response').pipe(\n        map(listFromData),\n        map((response) => ({ ...response, params, ...state, method })),\n      ),\n    ),\n    scan((acc: any, curr: any) => {\n      const { count, action, paginationType, method } = curr;\n      let contacts;\n      if (\n        curr.params.from > 0 &&\n        acc.params.query === curr.params.query &&\n        action !== ContactActions.Refresh &&\n        paginationType === LoadMoreMethod.LOAD_MORE &&\n        method !== 'search'\n      ) {\n        contacts = [...acc.contacts, ...curr.contacts];\n      } else {\n        contacts = [...curr.contacts];\n      }\n\n      return {\n        count,\n        contacts,\n        params: curr.params,\n      };\n    }),\n    shareReplay(),\n  );\n\n  readonly currentlySelectedItemId: Observable<ItemId | null> = combineLatest([\n    this.selectedItemId,\n    this.lastSelectedItemId,\n    this.items,\n  ]).pipe(\n    map(([id, lastItemId, items]) => {\n      return id ?? lastItemId ?? items.contacts[0]?.id ?? null;\n    }),\n  );\n\n  readonly item: Observable<ContactItem | undefined> = combineLatest([\n    this.currentlySelectedItemId.pipe(distinctUntilChanged()),\n    this.items,\n  ]).pipe(\n    switchMap(([id, items]) => {\n      if (id === '0') {\n        return of(undefined);\n      }\n\n      let contact: ContactItem | undefined = this.getContactsItem(\n        id ?? this.lastSelectedItemId.value ?? undefined,\n        items,\n      );\n\n      const firstContact = this.getContactsItem(this.firstContact(items.contacts), items);\n\n      if (!contact && this.lastSelectedItemId.value) {\n        const contactId = this.lastSelectedItemId.value;\n\n        return this.dataService.getContact({ contactId }).pipe(catchError(() => of(firstContact)));\n      }\n\n      if (contact) {\n        this.lastSelectedItemId.next(contact.id);\n      }\n\n      return of(contact || firstContact);\n    }),\n    shareReplay(),\n  );\n\n  readonly deleteSuccess = new Subject();\n\n  readonly deleteError = new Subject<HttpErrorResponse>();\n\n  /**\n   * Updates the selected contact.\n   *\n   * @param {Observable<ItemId | null>} ids contact Id\n   */\n  getItemFrom(ids: Observable<ItemId | null>): void {\n    ids.subscribe((id) => this.selectedItemId.next(id));\n  }\n\n  private firstContact(contacts: Array<ContactItem> | null): string | undefined {\n    return contacts && contacts.length > 0 ? contacts[0].id : undefined;\n  }\n\n  /**\n   * Gets the contact in the given list by id.\n   *\n   * @param {string | undefined} id contact ID\n   * @param {ContactList} items all contacts in an array form.\n   * @returns {ContactItem | undefined} contact item from list or undefined\n   */\n  getContactsItem(id: string | undefined, items: ContactList): ContactItem | undefined {\n    if (!(items && items.contacts && items.contacts.length)) return;\n\n    let item: ContactItem | undefined;\n    if (id === '0') {\n      return undefined;\n    } else {\n      item = items.contacts.find((v: ContactItem) => v.id === id);\n    }\n\n    return item;\n  }\n\n  private toHttpParams(params: any): PageParams {\n    return {\n      from: Math.floor(params.from),\n      size: Math.floor(params.size),\n      query: params.query || undefined,\n    };\n  }\n\n  /**\n   * Update the list of Parameters when changed.\n   *\n   * @param {?string} query search query\n   * @param {?number} page current Page of contact lists\n   * @param {?number} size no of records to be shown on one page\n   * @param {?string} paginationType type of pagination `load-more` or `pagination`\n   * @param {?string} method enumerated value\n   */\n  updateItemList(query?: string, page?: number, size?: number, paginationType?: string, method?: string) {\n    this.listParams.next({\n      pagination: {\n        query: query || '',\n        from: page || 0,\n        size: size || 5,\n      },\n      paginationType: paginationType || LoadMoreMethod.PAGINATION,\n      method,\n    });\n  }\n\n  /**\n   * Gets the account Type for the contacts.\n   *\n   * @returns {Observable<string>} Observable of a string with accountType\n   */\n  getAccountType(): Observable<string> {\n    return this.item.pipe(\n      map((contactItem) => (contactItem ? this.checkaccountType(contactItem) : AccountCreateType.IBAN)),\n    );\n  }\n\n  /**\n   * Calls the update API for contacts when updated.\n   *\n   * @param {ContactItem} item - Updated contact.\n   * @returns {Observable<string | undefined>} the observable of updated ID of contact.\n   */\n  save(item: ContactItem): Observable<string | undefined> {\n    if (isNew(item)) {\n      const postItem: any = item;\n\n      return this.dataService\n        .postContacts({ contactsPostRequestBody: postItem }, 'response')\n        .pipe(map((res: HttpResponse<Id>) => this.saveSuccess(res)));\n    } else {\n      return this.dataService\n        .putContact({ contactId: item.id, contactPutRequestBody: item }, 'response')\n        .pipe(map((res: HttpResponse<ContactUpdateDeleteResponse>) => this.editSuccess(res, item.id)));\n    }\n  }\n\n  /**\n   * Returns the contact Id when updated.\n   *\n   * @param {HttpResponse<Id>} res save response\n   * @returns {string | undefined} contact ID.\n   */\n  saveSuccess(res: HttpResponse<Id>): string | undefined {\n    if (res.body && res.body.id) {\n      this.saveComplete.next();\n\n      return res.body.id;\n    } else {\n      // error state\n      return undefined;\n    }\n  }\n\n  /**\n   * Returns the ID of the contact when edit is successful\n   *\n   * @param {HttpResponse<ContactUpdateDeleteResponse>} res response of editing a contact.\n   * @param {string} id Contact ID.\n   * @returns {string | undefined} the ID of contact when edit is successful.\n   */\n  editSuccess(res: HttpResponse<ContactUpdateDeleteResponse>, id: string): string | undefined {\n    if (res.body) {\n      this.saveComplete.next();\n\n      return id;\n    } else {\n      // error state\n      return undefined;\n    }\n  }\n\n  /**\n   * Calls the deletion API.\n   *\n   * @param {string} contactId - Contact ID for selected contact.\n   * @returns {Subscription} Subscription of deletion api.\n   */\n  delete(contactId: string): Subscription {\n    return this.dataService.deleteContact({ contactId }).subscribe(\n      () => {\n        this.deleteSuccess.next();\n        this.saveComplete.next();\n      },\n      (error) => this.deleteError.next(error),\n    );\n  }\n\n  /**\n   * Returns the account Type for the given contact\n   *\n   * @param {ContactItem} item contact object.\n   * @returns {string} type of account for one contact.\n   */\n  checkaccountType(item: ContactItem): string {\n    if (item) {\n      return (\n        (Object.entries(item?.accounts[0]).find(\n          ([key, value]) => Object.values(AccountCreateType).includes(<AccountCreateType>key) && value,\n        ) || [])[0] || AccountCreateType.IBAN\n      );\n    }\n\n    return AccountCreateType.IBAN;\n  }\n}\n\n/**\n * Returns if the contact is new or is being edited.\n *\n * @param {ContactItem} item contact object\n * @returns {boolean} whether the item is new or existing\n */\nfunction isNew(item: ContactItem): boolean {\n  return item.id === undefined || item.id === '';\n}\n\n/**\n * Returns the contact list in a format.\n *\n * @param {HttpResponse<Contacts>} response http response with data\n * @returns {ContactList} contacts list with total count.\n */\nfunction listFromData(response: HttpResponse<Contacts>): ContactList {\n  if (response.body === null) {\n    throw new Error('Response body not set');\n  }\n\n  const headers = response.headers;\n  const totalCount = headers.get('X-Total-Count');\n\n  return {\n    count: totalCount ? +totalCount : null,\n    contacts: response.body,\n  };\n}\n","import { Injectable, Optional } from '@angular/core';\nimport { toBoolean, toInteger } from '@backbase/contact-common-ang';\nimport { ItemModel } from '@backbase/foundation-ang/core';\n\nimport { BehaviorSubject, combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n/**\n *\n * This service manages the widget properties.\n *\n * @see ContactManagerWidgetModule\n * @usageNotes\n *\n * ### Ensure the ContactManagerWidgetModule is imported to your component module\n *\n * ```ts\n * @NgModule({\n *   ...\n *   imports: [\n *     ...\n *     ContactManagerWidgetModule,\n *   ],\n * })\n * export class ContactManagerWidgetModule {}\n * ```\n *\n * ### Inject this service to the providers.\n *\n * ```ts\n * @Component({\n *   ...\n *  providers: [\n * {\n *   provide: ContactManagerPreferencesService,\n *   useClass: ContactManagerJourneyPreferencesService,\n * },\n * })\n *  export class ContactManagerWidgetModule {\n * ```\n */\n@Injectable()\nexport class ContactManagerPreferencesService {\n  private readonly newContactSubject$ = new BehaviorSubject<boolean | undefined>(undefined);\n  private readonly pageSizeSubject$ = new BehaviorSubject<number | undefined>(undefined);\n  private readonly maxNavPagesSubject$ = new BehaviorSubject<number | undefined>(undefined);\n  private readonly paginationTypeSubject$ = new BehaviorSubject<string | undefined>(undefined);\n  private readonly createContactEmailSubject$ = new BehaviorSubject<boolean | undefined>(undefined);\n  private readonly createContactIBANSubject$ = new BehaviorSubject<boolean | undefined>(undefined);\n  private readonly createContactAccountSubject$ = new BehaviorSubject<boolean | undefined>(undefined);\n  private readonly createContactPhoneSubject$ = new BehaviorSubject<boolean | undefined>(undefined);\n  private readonly notificationDismissTimeSubject$ = new BehaviorSubject<number | undefined>(undefined);\n\n  private readonly newContactItemModel = this.itemModel?.property<boolean>('newContact').pipe(map(toBoolean));\n\n  private readonly pageSizeItemModel = this.itemModel?.property<number>('pageSize').pipe(map(toInteger));\n\n  private readonly maxNavPagesItemModel = this.itemModel?.property<number>('maxNavPages').pipe(map(toInteger));\n\n  private readonly paginationTypeItemModel = this.itemModel?.property<string>('paginationType');\n\n  private readonly createContactEmailItemModel = this.itemModel\n    ?.property<boolean>('createContactEmail')\n    .pipe(map(toBoolean));\n\n  private readonly createContactIBANItemModel = this.itemModel\n    ?.property<boolean>('createContactIBAN')\n    .pipe(map(toBoolean));\n\n  private readonly createContactAccountItemModel = this.itemModel\n    ?.property<boolean>('createContactAccount')\n    .pipe(map(toBoolean));\n\n  private readonly createContactPhoneItemModel = this.itemModel\n    ?.property<boolean>('createContactPhone')\n    .pipe(map(toBoolean));\n\n  private readonly notificationDismissTimeItemModel = this.itemModel\n    ?.property<number>('notificationDismissTime')\n    .pipe(map(toInteger));\n\n  readonly newContact$ = this.getProperty<boolean>(this.newContactSubject$, this.newContactItemModel);\n\n  readonly pageSize$ = this.getProperty<number>(this.pageSizeSubject$, this.pageSizeItemModel);\n\n  readonly maxNavPages$ = this.getProperty<number>(this.maxNavPagesSubject$, this.maxNavPagesItemModel);\n\n  readonly paginationType$ = this.getProperty<string>(this.paginationTypeSubject$, this.paginationTypeItemModel);\n\n  readonly createContactEmail$ = this.getProperty<boolean>(\n    this.createContactEmailSubject$,\n    this.createContactEmailItemModel,\n  );\n\n  readonly createContactIBAN$ = this.getProperty<boolean>(\n    this.createContactIBANSubject$,\n    this.createContactIBANItemModel,\n  );\n\n  readonly createContactAccount$ = this.getProperty<boolean>(\n    this.createContactAccountSubject$,\n    this.createContactAccountItemModel,\n  );\n\n  readonly createContactPhone$ = this.getProperty<boolean>(\n    this.createContactPhoneSubject$,\n    this.createContactPhoneItemModel,\n  );\n\n  readonly notificationDismissTime$ = this.getProperty<number>(\n    this.notificationDismissTimeSubject$,\n    this.notificationDismissTimeItemModel,\n  );\n\n  private getProperty<T>(input$: Observable<T | undefined>, itemModel: Observable<unknown>): Observable<T> {\n    return combineLatest([input$, itemModel]).pipe(\n      map(([value, valueIM]) => (value === undefined ? valueIM : value) as T),\n    );\n  }\n  /**\n   *  Update the new Contact value\n   *\n   * @param {boolean} value selected value\n   */\n  setNewContact(value: boolean) {\n    this.newContactSubject$.next(value);\n  }\n  /**\n   *  Update the pageSize value\n   *\n   * @param {number} value selected value\n   */\n  setPageSize(value: number) {\n    this.pageSizeSubject$.next(value);\n  }\n  /**\n   *  Update the maxNavPages value\n   *\n   * @param {number} value selected value\n   */\n  setMaxNavPages(value: number) {\n    this.maxNavPagesSubject$.next(value);\n  }\n  /**\n   *  Update the paginationType value\n   *\n   * @param {string} value selected value\n   */\n  setPaginationType(value: string) {\n    this.paginationTypeSubject$.next(value);\n  }\n  /**\n   *  Update the notificationDissmissTime value\n   *\n   * @param {number} value selected value\n   */\n  setNotificationDismissTime(value: number) {\n    this.notificationDismissTimeSubject$.next(value);\n  }\n  /**\n   *  Update the createContactEmail value\n   *\n   * @param {boolean} value selected value\n   */\n  setCreateContactEmail(value: boolean) {\n    this.createContactEmailSubject$.next(value);\n  }\n  /**\n   *  Update the createContactIBAN value\n   *\n   * @param {boolean} value selected value\n   */\n  setCreateContactIBAN(value: boolean) {\n    this.createContactIBANSubject$.next(value);\n  }\n  /**\n   *  Update the createContactAccount value\n   *\n   * @param {boolean} value selected value\n   */\n  setCreateContactAccount(value: boolean) {\n    this.createContactAccountSubject$.next(value);\n  }\n  /**\n   *  Update the createContactPhone value\n   *\n   * @param {boolean} value selected value\n   */\n  setCreateContactPhone(value: boolean) {\n    this.createContactPhoneSubject$.next(value);\n  }\n\n  constructor(@Optional() private readonly itemModel: ItemModel) {}\n}\n","import { BbTemplate } from '@backbase/foundation-ang/core';\nimport { Directive } from '@angular/core';\nimport type { ContactsDetailComponent } from '../components/contacts-detail/contacts-detail.component';\n\n/**\n * This is an extension slot to be used for customizing delete confirmation dialog\n *\n * @example\n *\n * ```html\n * <ng-template bbContactsDeleteConfirmationCustomizable let-hostRef let-context=\"context\">\n *   <div class=\"modal-header\">\n *     <h4 i18n=\"@@contact-manager-detail.header.delete.contact\" class=\"modal-title\" data-role=\"delete-contact-label\">\n *       Delete Contact\n *     </h4>\n *   </div>\n *   <div i18n=\"@@contact-manager-detail.delete.confirmation\" class=\"modal-body\" role=\"alert\">\n *     <p class=\"break-word\">\n *       Are you sure you want to delete {{ hostRef.item.name }} from your contacts? This action cannot be undone.\n *     </p>\n *   </div>\n *   <div class=\"bb-button-bar bb-button-bar--reverse modal-footer\">\n *     <button\n *       i18n=\"@@contact-manager-detail.button.cancel\"\n *       type=\"button\"\n *       class=\"bb-button-bar__button\"\n *       bbButton\n *       color=\"secondary\"\n *       (click)=\"context.dismiss()\"\n *     >\n *       Not now\n *     </button>\n *     <button\n *       i18n=\"@@contact-manager-detail.button.delete\"\n *       type=\"button\"\n *       class=\"bb-button-bar__button\"\n *       bbButton\n *       color=\"danger\"\n *       data-role=\"confirm-delete-button\"\n *       (click)=\"hostRef.deleteContact()\"\n *     >\n *       Delete\n *     </button>\n *   </div>\n * </ng-template>\n * ```\n * @ngModule ContactManagerWidgetModule\n */\n@Directive({\n  selector: '[bbContactsDeleteConfirmationCustomizable]',\n})\nexport class ContactsDeleteConfirmationCustomizableDirective extends BbTemplate<\n  ContactsDetailComponent,\n  { close: (result: any) => void; dismiss: (reason: any) => void }\n> {}\n","import { ChangeDetectionStrategy, Component, Directive, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { BbTemplate } from '@backbase/foundation-ang/core';\nimport { ContactsService } from '../../services/contacts.service';\nimport { AccountCreateType, SelectContactEvent } from '../../models/types';\n\n/**\n * An object representing ContactDetails.\n */\nexport interface ContactsDetailItem {\n  /*\n   * The unique id of the contact\n   */\n  id: string;\n  /*\n   * The name of the contact\n   */\n  name: string;\n  /*\n   * The surname of the contact\n   */\n  surname: string;\n  /*\n   * The iban of the contact\n   */\n  iban: string;\n  /*\n   * The initials of the contact\n   */\n  initials: string;\n}\n/**\n * Displays a detail of contact selected.\n *\n * The following extension slots are available in this component:\n *  - `ContactsDetailCustomizableDirective`\n *\n * @see ContactsDetailCustomizableDirective\n * @usageNotes\n *\n * ### Display a details of contacts\n *\n * ```html\n * <bb-contacts-detail\n *    [showDetail]=\"false\"\n *    [item]=\"hostRef.item\"\n *    [type]=\"hostRef.type\"\n *    (deleteContactsItem)=\"hostRef.deleteItemEmit()\"\n *    (editContactsItem)=\"hostRef.editContactsItem()\"\n * ></bb-contacts-detail>\n * ```\n * @ngModule ContactManagerWidgetModule\n */\n@Component({\n  selector: 'bb-contacts-detail',\n  templateUrl: './contacts-detail.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ContactsDetailComponent implements OnInit {\n  readonly hostRef: ContactsDetailComponent = this;\n  /**\n   * Account type selected from screen\n   */\n  @Input() type!: AccountCreateType;\n  /**\n   * Wether to show user details or not\n   */\n  @Input() showDetail = true;\n  /**\n   * The detail of the selected contact\n   */\n  @Input()\n  item!: ContactsDetailItem;\n  /**\n   * Event emitted when contact is edited\n   */\n  @Output() editContactsItem = new EventEmitter<SelectContactEvent>();\n  /**\n   * Event emitted when contact is deleted\n   */\n  @Output() deleteContactsItem = new EventEmitter<string>();\n\n  isDeleteConfirmOpened = false;\n\n  constructor(public service: ContactsService) {}\n\n  /**\n   * OnInit - lifecycle hook.\n   */\n  ngOnInit() {\n    if (this.item === undefined) {\n      throw new Error('`item` input is required in `bb-contacts-detail` component');\n    }\n  }\n\n  /**\n   *  Will emit the event when contact is edited.\n   *\n   * @param {string} id the contact id that has to be edited.\n   */\n  edit(id: string) {\n    this.editContactsItem.emit({ id: id, type: this.type });\n  }\n\n  /**\n   * opens modal for delete confirmation\n   */\n  openDeleteModal() {\n    this.isDeleteConfirmOpened = true;\n  }\n\n  /**\n   * event handler for confirming delete\n   */\n  onConfirmDelete() {\n    this.deleteContactsItem.emit(this.item.id);\n    this.isDeleteConfirmOpened = false;\n  }\n\n  /**\n   * event handler for rejecting delete\n   */\n  onCancelDelete() {\n    this.isDeleteConfirmOpened = false;\n  }\n}\n\n/**\n * This is an extension slot to be used for customizing an item of the contact details.\n *\n * @usageNotes\n *\n * ### Display a contact details\n *\n * ```html\n * <ng-template bbContactsDetailCustomizable let-hostRef let-item=\"item\">\n * <div class=\"bb-block bb-block--xl\">\n *   <div class=\"bb-stack bb-stack--align-bottom\">\n *     <div class=\"bb-stack__item bb-stack__item--fill\">\n *       <div\n *         class=\"bb-block\"\n *         data-role=\"contact-details-info-name\"\n *       >\n *         <span\n *           class=\"d-none\"\n *           data-role=\"create-contact-label\"\n *           aria-hidden=\"true\"\n *           i18n-heading=\"Create contact heading | Title shown when user is in\n *                        create contact@@contact-manager-detail.create.heading\"\n *          #heading\n *         >\n *           Create contact\n *         </span>\n *         <bb-header-ui\n *           data-role=\"create-new-contact-label\"\n *           headingType=\"h3\"\n *           [heading]=\"hostRef.item.name || heading.textContent\"\n *         >\n *         </bb-header-ui>\n *       </div>\n *     </div>\n *     <div\n *      *ngIf=\"hostRef.item.name\"\n *       class=\"bb-stack__item bb-stack__item--push-right\"\n *     >\n *       <span\n *         bbTooltip=\"Edit\"\n *         triggers=\"hover focus\"\n *       >\n *         <button\n *           data-role=\"contact-edit-button\"\n *           bbButton\n *           circle=\"true\"\n *           color=\"link\"\n *           (click)=\"hostRef.edit(hostRef.item.id)\"\n *           i18n=\"Edit Contact Button | Button for editing an existing contact@@contact-manager-detail.button.edit\"\n *           aria-label=\"Edit Contact\"\n *           i18n-aria-label=\"Edit Contact | Aria label edit contact menu@@contact-manager-detail.label.actions.edit\"\n *         >\n *           <bb-icon-ui\n *             name=\"edit\"\n *             color=\"dark\"\n *           ></bb-icon-ui>\n *         </button>\n *       </span>\n *       <span\n *         bbTooltip=\"Delete\"\n *         triggers=\"hover focus\"\n *       >\n *         <button data-role=\"contact-delete-button\"\n *           bbButton\n *           circle=\"true\"\n *           color=\"link\"\n *           (click)=\"hostRef.openDeleteModal(hostRef.modalContent)\"\n *           i18n=\"Delete Contact Button | Button for deleting an existing contact@@contact-manager-detail.detail.button.delete\"\n *           data-role=\"delete-button\"\n *           aria-label=\"Delete Contact\"\n *           i18n-aria-label=\"Delete Contact | Aria label delete contact menu@@contact-manager-detail.label.actions.delete\"\n *         >\n *           <bb-icon-ui name=\"delete\" color=\"dark\"></bb-icon-ui>\n *         </button>\n *       </span>\n *     </div>\n *   </div>\n *   <hr/>\n * </div>\n * <div\n *   class=\"bb-lock bb-lock bb-block--lg\"\n *  *ngIf=\"hostRef.showDetail\"\n * >\n *   <span\n *     class=\"d-none\"\n *     aria-hidden=\"true\"\n *     i18n=\"Account number | Heading for account number or\n *      IBAN or Email or Phone@@contact-manager-detail.label.account.type.heading\"\n *     #heading\n *   >\n *    {hostRef.type, select, IBAN {IBAN}  accountNumber {Account number} email { Email} phoneNumber { Phone number} other {IBAN} }\n *   </span>\n *   <bb-header-ui\n *     headingType=\"h5\"\n *     [heading]=\"heading.textContent\"\n *     class=\"bb-block bb-block-md\"\n *   >\n *   </bb-header-ui>\n *   <div\n *     class=\"bb-bock bb-block-md\"\n *     data-role=\"contact-details-info-alias\"\n *   >\n *   <span *ngIf=\"hostRef.item?.accounts[0] as account\">\n *     {{ account[hostRef.type] }}\n *   </span>\n *   </div>\n * </div>\n *</ng-template>\n * ```\n * @ngModule ContactManagerWidgetModule\n */\n@Directive({\n  selector: '[bbContactsDetailCustomizable]',\n})\nexport class ContactsDetailCustomizableDirective extends BbTemplate<ContactsDetailComponent, ContactsDetailItem> {}\n","<ng-container bbContactsDetailCustomizable [bbHostRef]=\"hostRef\" [bbTemplateContext]=\"item\"></ng-container>\n<ng-template bbContactsDetailCustomizable let-hostRef let-item=\"item\">\n  <div class=\"bb-block bb-block--xl\">\n    <div class=\"bb-stack bb-stack--align-bottom\">\n      <div class=\"bb-stack__item bb-stack__item--fill\">\n        <div class=\"bb-block\" data-role=\"contact-details-info-name\">\n          <span\n            class=\"d-none\"\n            data-role=\"create-contact-label\"\n            aria-hidden=\"true\"\n            i18n=\"Create contact heading | Title shown when user is in create contact@@contact-manager-detail.create.heading\"\n            #heading\n          >\n            Create contact\n          </span>\n          <bb-header-ui\n            data-role=\"create-new-contact-label\"\n            headingType=\"h3\"\n            headingClasses=\"break-word\"\n            [heading]=\"hostRef.item.name || heading.textContent\"\n          >\n          </bb-header-ui>\n        </div>\n      </div>\n      <div *ngIf=\"hostRef.item.name\" class=\"bb-stack__item bb-stack__item--push-right\">\n        <span bbTooltip=\"Edit\" triggers=\"hover focus\" i18n-bbTooltip=\"@@contact-manager-detail.button.edit.tooltip\">\n          <button\n            data-role=\"contact-edit-button\"\n            bbButton\n            circle=\"true\"\n            color=\"link\"\n            (click)=\"hostRef.edit(hostRef.item.id)\"\n            i18n=\"Edit Contact Button | Button for editing an existing contact@@contact-manager-detail.button.edit\"\n            aria-label=\"Edit Contact\"\n            i18n-aria-label=\"Edit Contact | Aria label edit contact menu@@contact-manager-detail.label.actions.edit\"\n          >\n            <bb-icon-ui name=\"edit\" color=\"dark\"></bb-icon-ui>\n          </button>\n        </span>\n        <span bbTooltip=\"Delete\" triggers=\"hover focus\" i18n-bbTooltip=\"@@contact-manager-detail.button.delete.tooltip\">\n          <button\n            bbButton\n            circle=\"true\"\n            color=\"link\"\n            (click)=\"hostRef.openDeleteModal()\"\n            i18n=\"Delete Contact Button | Button for deleting an existing contact@@contact-manager-detail.detail.button.delete\"\n            data-role=\"delete-button\"\n            aria-label=\"Delete Contact\"\n            i18n-aria-label=\"Delete Contact | Aria label delete contact menu@@contact-manager-detail.label.actions.delete\"\n          >\n            <bb-icon-ui name=\"delete\" color=\"dark\"></bb-icon-ui>\n          </button>\n        </span>\n      </div>\n    </div>\n    <hr />\n  </div>\n  <div class=\"bb-lock bb-lock bb-block--lg\" *ngIf=\"hostRef.showDetail\">\n    <span\n      class=\"d-none\"\n      aria-hidden=\"true\"\n      i18n=\"Account number | Heading for account number or IBAN or Email or Phone@@contact-manager-detail.label.account.type.heading\"\n      #heading\n    >\n      {hostRef.type, select, IBAN {IBAN} accountNumber {Account number} email { Email} phoneNumber { Phone number} other\n      {IBAN} }\n    </span>\n    <bb-header-ui headingType=\"h5\" [heading]=\"heading.textContent\" class=\"bb-block bb-block-md\"></bb-header-ui>\n    <div class=\"bb-bock bb-block-md\" data-role=\"contact-details-info\">\n      <ng-container *ngIf=\"hostRef.item?.accounts[0] as account\">\n        <ng-container *ngIf=\"hostRef.type === 'IBAN'; else notIban\">\n          {{ account[hostRef.type] | bbIban }}\n        </ng-container>\n        <ng-template #notIban>{{ account[hostRef.type] }} </ng-template>\n      </ng-container>\n    </div>\n  </div>\n</ng-template>\n\n<ng-container bbContactsDeleteConfirmationCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n<ng-template bbContactsDeleteConfirmationCustomizable let-hostRef>\n  <bb-confirm-action-dialog\n    [isOpen]=\"hostRef.isDeleteConfirmOpened\"\n    [confirmButtonColor]=\"'danger'\"\n    (confirm)=\"hostRef.onConfirmDelete()\"\n    (cancel)=\"hostRef.onCancelDelete()\"\n  >\n    <span title i18n=\"@@contact-manager-detail.header.delete.contact\" data-role=\"delete-contact-label\"\n      >Delete Contact</span\n    >\n    <span body i18n=\"@@contact-manager-detail.delete.confirmation\">\n      Are you sure you want to delete {{ hostRef.item.name }} from your contacts? This action cannot be undone.\n    </span>\n    <span cancelButtonLabel i18n=\"@@contact-manager-detail.button.cancel\">Not now</span>\n    <span confirmButtonLabel i18n=\"@@contact-manager-detail.button.delete\" data-role=\"confirm-delete-button\"\n      >Delete</span\n    >\n  </bb-confirm-action-dialog>\n</ng-template>\n","import { BbTemplate } from '@backbase/foundation-ang/core';\nimport { Directive } from '@angular/core';\nimport type { ContactsDetailContainerComponent } from '../containers/contacts-detail-container/contacts-detail-container.component';\n\n/**\n * This is an extension slot to be used for customizing success notification after deleting a contact\n *\n * @example\n *\n * ```html\n * <ng-template bbContactsDeleteSuccessNotificationCustomizable>\n *   <span\n *     i18n=\"Notification delete success message@@contact-manager-detail-container.notification.delete.success\"\n *     role=\"alert\"\n *     aria-atomic=\"true\"\n *   >\n *     Contact was deleted succesfully\n *   </span>\n * </ng-template>\n * ```\n * @ngModule ContactManagerWidgetModule\n */\n@Directive({\n  selector: '[bbContactsDeleteSuccessNotificationCustomizable]',\n})\nexport class ContactsDeleteSuccessNotificationCustomizableDirective extends BbTemplate<\n  ContactsDetailContainerComponent,\n  undefined\n> {}\n","import { BbTemplate } from '@backbase/foundation-ang/core';\nimport { Directive } from '@angular/core';\nimport type { ContactsDetailContainerComponent } from '../containers/contacts-detail-container/contacts-detail-container.component';\n\n/**\n * This is an extension slot to be used for customizing error notification after deleting a contact\n *\n * @example\n *\n * ```html\n * <ng-template bbContactsDeleteErrorNotificationCustomizable>\n *   <span\n *     i18n=\"Notification delete failed error message@@contact-manager-detail-container.notification.delete.error\"\n *     role=\"alert\"\n *     aria-atomic=\"true\"\n *   >\n *     Error deleting contact\n *   </span>\n * </ng-template>\n * ```\n * @ngModule ContactManagerWidgetModule\n */\n@Directive({\n  selector: '[bbContactsDeleteErrorNotificationCustomizable]',\n})\nexport class ContactsDeleteErrorNotificationCustomizableDirective extends BbTemplate<\n  ContactsDetailContainerComponent,\n  undefined\n> {}\n","import { ChangeDetectionStrategy, Component, OnDestroy, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { ActivatedRoute, ParamMap } from '@angular/router';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, withLatestFrom } from 'rxjs/operators';\nimport { ContactsService } from '../../services/contacts.service';\nimport { ContactItem } from '@backbase/contact-common-ang';\nimport { ContactsNavigationService, View } from '../../services/contacts-navigation.service';\nimport { SelectContactEvent } from '../../models/types';\nimport { ContactManagerPreferencesService } from '../../services/contacts-preferences.service';\nimport { NotificationService } from '@backbase/ui-ang/notification';\n\n/**\n * Container component for showing contact details.\n *\n * @usageNotes\n *\n * ### Display details of the contact.\n *\n * ```html\n * <bb-contacts-detail-container></bb-contacts-detail-container>\n * ```\n *\n * ### Additionally use the container component in routing.\n *\n * ```typescript\n * const routes: [\n * {\n *  path: '',\n *  component: ContactsDetailContainerComponent\n * }]\n *\n * ```\n * @ngModule ContactManagerWidgetModule\n */\n\n@Component({\n  selector: 'bb-contacts-detail-container',\n  templateUrl: './contacts-detail-container.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ContactsDetailContainerComponent implements OnInit, OnDestroy {\n  readonly hostRef = this;\n  readonly itemId: Observable<string | null> = this.route.paramMap.pipe(map((params: ParamMap) => params.get('id')));\n\n  readonly item: Observable<ContactItem | undefined> = this.service.item; //.pipe(map(item => this.fromService(item)));\n  readonly notificationTimeout$: Observable<number> = this.propertiesService.notificationDismissTime$;\n  readonly contactTypeId$: Observable<string> = this.service.getAccountType();\n\n  @ViewChild('deleteSuccessNotificationTemplate')\n  deleteSuccessNotificationTemplate: TemplateRef<any> | undefined;\n  @ViewChild('deleteErrorNotificationTemplate')\n  deleteErrorNotificationTemplate: TemplateRef<any> | undefined;\n\n  constructor(\n    private readonly service: ContactsService,\n    private readonly route: ActivatedRoute,\n    private readonly navigation: ContactsNavigationService,\n    private readonly notificationService: NotificationService,\n    private readonly propertiesService: ContactManagerPreferencesService,\n  ) {\n    service.getItemFrom(this.itemId);\n  }\n\n  private readonly subscriptions = new Subscription();\n  /**\n   * onInit - lifecycle hook\n   */\n  ngOnInit(): void {\n    this.subscriptions.add(\n      this.itemId.subscribe((itemId) => {\n        if (!itemId) {\n          this.navigation.currentView = View.List;\n        } else {\n          this.navigation.currentView = View.Detail;\n        }\n      }),\n    );\n\n    this.subscriptions.add(\n      this.service.deleteSuccess\n        .pipe(\n          withLatestFrom(this.notificationTimeout$),\n          map(([response, timeout]) => ({ timeout })),\n        )\n        .subscribe(({ timeout }) =>\n          this.notificationService.showNotification({\n            header: this.deleteSuccessNotificationTemplate as TemplateRef<any>,\n            message: '',\n            modifier: 'success',\n            ttl: timeout,\n          }),\n        ),\n    );\n\n    this.subscriptions.add(\n      this.service.deleteError\n        .pipe(\n          withLatestFrom(this.notificationTimeout$),\n          map(([error, timeout]) => ({ error, timeout })),\n        )\n        .subscribe(({ error, timeout }) =>\n          this.notificationService.showNotification({\n            header: this.deleteErrorNotificationTemplate as TemplateRef<any>,\n            message: '',\n            modifier: 'error',\n            ttl: timeout,\n          }),\n        ),\n    );\n  }\n  /**\n   * OnDestroy- lifecycle hook Unsubscribing the subscription.\n   */\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n  /**\n   *  Emits the output when edit is clicked.\n   *\n   * @param {SelectContactEvent} accountData - An object which contains id and type of contact to be edited.\n   */\n  edit(accountData: SelectContactEvent) {\n    this.navigation.edit(accountData.id, accountData.type);\n  }\n  /**\n   * Method that calls the delete service and returns to list view.\n   *\n   * @param {string} id - contact ID which has to be deleted.\n   */\n  deleteContactsItem(id: string) {\n    this.service.delete(id);\n    this.navigation.list();\n    this.navigation.currentView = View.List;\n  }\n}\n","<ng-container *ngIf=\"item | async as item; else loadingTemplate\">\n  <bb-contacts-detail\n    [item]=\"item\"\n    [type]=\"contactTypeId$ | async\"\n    (editContactsItem)=\"edit($event)\"\n    (deleteContactsItem)=\"deleteContactsItem($event)\"\n  >\n  </bb-contacts-detail>\n</ng-container>\n\n<ng-template #loadingTemplate>\n  <div class=\"bb-state-container\">\n    <bb-loading-indicator-ui\n      i18n-text=\"@@contact-manager-detail-container.loading.label\"\n      text=\"Loading...\"\n    ></bb-loading-indicator-ui>\n  </div>\n</ng-template>\n\n<ng-template #deleteSuccessNotificationTemplate>\n  <ng-container bbContactsDeleteSuccessNotificationCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n  <ng-template bbContactsDeleteSuccessNotificationCustomizable>\n    <span\n      i18n=\"Notification delete success message@@contact-manager-detail-container.notification.delete.success\"\n      role=\"alert\"\n      aria-atomic=\"true\"\n    >\n      Contact was deleted succesfully\n    </span>\n  </ng-template>\n</ng-template>\n\n<ng-template #deleteErrorNotificationTemplate>\n  <ng-container bbContactsDeleteErrorNotificationCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n  <ng-template bbContactsDeleteErrorNotificationCustomizable>\n    <span\n      i18n=\"Notification delete failed error message@@contact-manager-detail-container.notification.delete.error\"\n      role=\"alert\"\n      aria-atomic=\"true\"\n    >\n      Error deleting contact\n    </span>\n  </ng-template>\n</ng-template>\n","import { InjectionToken, Provider } from '@angular/core';\nimport { Additions, BB_CONTACT_IBAN_COUNTRIES_LIST, IBANCountryList } from '@backbase/contact-common-ang';\n\nconst emptyIbanCountriesList: IBANCountryList = {};\n\nexport const BB_CONTACT_FORM_ADDITIONS_TOKEN: InjectionToken<ContactFormAdditions> = new InjectionToken(\n  'BB_CONTACT_FORM_ADDITIONS_TOKEN',\n);\n\nexport interface ContactFormAdditions {\n  additions: Additions;\n}\n\nexport const ContactConfigProviders: Array<Provider> = [\n  {\n    provide: BB_CONTACT_FORM_ADDITIONS_TOKEN,\n    useValue: { additions: undefined },\n  },\n  {\n    provide: BB_CONTACT_IBAN_COUNTRIES_LIST,\n    useValue: emptyIbanCountriesList,\n  },\n];\n","import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  EventEmitter,\n  Inject,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  Output,\n  PLATFORM_ID,\n  SimpleChanges,\n  ViewContainerRef,\n} from '@angular/core';\nimport { AbstractControl, FormBuilder, FormGroup } from '@angular/forms';\nimport { BbTemplate } from '@backbase/foundation-ang/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { BB_CONTACT_FORM_ADDITIONS_TOKEN, ContactFormAdditions } from '../../config.providers';\nimport { AccountCreateType, ContactsFormItem } from '../../models/types';\nimport { IbanMask } from '@backbase/contact-common-ang';\n\n/**\n * Displays a contact form.\n *\n * The following extension slots are available in this component:\n *  - `ContactsFormCustomizableDirective`\n *\n * @see ContactsFormCustomizableDirective\n * @usageNotes\n *\n * ### Display a form for adding / editing the contact form.\n *\n * ```html\n *  <bb-contacts-form\n *   [item]=\"item\"\n *   [type]=\"itemType$ | async\"\n *   (save)=\"save($event)\"\n *   (cancelEdit)=\"cancelEdit($event)\"\n *   (backEvent)=\"back($event)\"\n *   (deleteContactsItem)=\"deleteContactsItem($event)\"\n * ></bb-contacts-form>\n * ```\n * @ngModule ContactManagerWidgetModule\n */\n@Component({\n  selector: 'bb-contacts-form',\n  templateUrl: './contacts-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ContactsFormComponent implements OnInit, OnChanges, AfterViewInit {\n  readonly hostRef: ContactsFormComponent = this;\n  submitted = false;\n  ibanMask = IbanMask;\n\n  /**\n   * The contact item that is editted\n   */\n  @Input()\n  item!: ContactsFormItem;\n  /**\n   * The contact item type\n   */\n  @Input()\n  type!: AccountCreateType;\n  /**\n   * Controls whether form can be submitted\n   */\n  @Input() disabledSubmit = false;\n  /**\n   * Event emitted when contact edit is saved\n   */\n  @Output() save = new EventEmitter<ContactsFormItem>();\n  /**\n   * Event emitted when contact edit is cancelled\n   */\n  @Output() cancelEdit = new EventEmitter<string>();\n  /**\n   * Event emitted when user clicks back\n   */\n  @Output() backEvent = new EventEmitter<string>();\n  /**\n   * Event emitted when contact is deleted\n   */\n  @Output() deleteContactsItem = new EventEmitter<string>();\n  /**\n   * contactForm group.\n   */\n  contactsForm!: FormGroup;\n  /**\n   * Contact account Type reference.\n   */\n  readonly createAccountTypeRef = AccountCreateType;\n\n  constructor(\n    private readonly fb: FormBuilder,\n    private readonly vcRef: ViewContainerRef,\n    @Inject(PLATFORM_ID) private readonly platformId: Object,\n    @Optional()\n    @Inject(BB_CONTACT_FORM_ADDITIONS_TOKEN)\n    private readonly formAdditionsConfig: ContactFormAdditions,\n  ) {}\n\n  /**\n   * OnInit - lifecycle hook.\n   */\n  ngOnInit() {\n    if (this.item === undefined) {\n      throw new Error('`item` input is required in `bb-contact-form` component');\n    }\n  }\n\n  /**\n   * AfterViewInt- lifecycle hook.\n   */\n  ngAfterViewInit(): void {\n    if (isPlatformBrowser(this.platformId)) {\n      this.vcRef.element.nativeElement.querySelector('input')?.focus();\n    }\n  }\n\n  /**\n   * OnChanges - lifecycle hook.\n   *\n   * @param {SimpleChanges} changes angular SimpleChanges object\n   */\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.type) {\n      this.submitted = false;\n      this.contactsForm = this.createFormGroupInstance();\n    }\n  }\n\n  private createFormGroupInstance(): FormGroup {\n    const { additions } = { ...this.formAdditionsConfig };\n\n    return this.fb.group({\n      name: [this.item.name],\n      IBAN: [this.item.IBAN],\n      accountNumber: [this.item.accountNumber],\n      email: [this.item.email],\n      phoneNumber: [this.item.phoneNumber],\n      ...(additions ? { additions: this.fb.group(additions) } : {}),\n    });\n  }\n\n  /**\n   * saveItem - method that emits the data when saved.\n   */\n  saveItem() {\n    this.submitted = true;\n    if (this.contactsForm.valid) {\n      this.save.emit({ ...this.item, ...(this.contactsForm ? this.contactsForm.value : {}) });\n    } else {\n      this.contactsForm.markAllAsTouched();\n    }\n  }\n\n  /**\n   * emits the id of the contact that has cancelled.\n   */\n  cancel() {\n    this.cancelEdit.emit(this.item.id);\n  }\n\n  /**\n   * emits the id, when back is clicked.\n   */\n  back() {\n    this.backEvent.emit(this.item.id);\n  }\n\n  get name(): AbstractControl | null {\n    return this.contactsForm.get('name');\n  }\n\n  get iban(): AbstractControl | null {\n    return this.contactsForm.get('IBAN');\n  }\n\n  get accountNumber(): AbstractControl | null {\n    return this.contactsForm.get('accountNumber');\n  }\n\n  /**\n   *  the id of the contact is emitted when deleted.\n   */\n  deleteItemEmit() {\n    this.deleteContactsItem.emit(this.item.id);\n  }\n}\n\n/**\n * This is an extension slot to be used for customizing an form of contacts editing.\n *\n * @usageNotes\n *\n * ### Display a contact form.\n *\n * ```html\n *  <bb-contacts-detail\n *   [showDetail]=\"false\"\n *   [item]=\"hostRef.item\"\n *   [type]=\"hostRef.type\"\n *   (deleteContactsItem)=\"hostRef.deleteItemEmit()\"\n * ></bb-contacts-detail>\n * <form\n *  *ngIf=\"hostRef.contactsForm\"\n *   (submit)=\"hostRef.saveItem()\"\n *   [formGroup]=\"hostRef.contactsForm\"\n *   class=\"bb-block bb-block--xl\"\n * >\n *   <fieldSet>\n *     <div class=\"row\">\n *       <div\n *         class=\"bb-block bb-block--lg col-12\"\n *         data-role=\"contact-account-info-account-name1\"\n *       >\n *         <label\n *           [for]=\"contactsName.id\"\n *           data-role=\"edit-contact-label\"\n *           i18n=\"Contacts name label | Label for contacts detail component name@@contact-manager-form.label.name\"\n *         >\n *           Name\n *         </label>\n *         <bb-input-text-ui\n *           data-role=\"new-contact-name\"\n *           [formControl]=\"hostRef.contactsForm.controls.name\"\n *           name=\"contactsName\"\n *           #contactsName\n *           [maxLength]=\"140\"\n *           [required]=\"hostRef.submitted\"\n *         >\n *         </bb-input-text-ui>\n *\n *         <bb-input-validation-message-ui\n *           role=\"alert\"\n *           [showErrors]=\"\n *             hostRef.contactsForm.controls.name.invalid &&\n *             (hostRef.contactsForm.controls.name.dirty || hostRef.contactsForm.controls.name.touched)\n *           \">\n *           <ng-container\n *           *ngIf=\"hostRef.contactsForm.controls.name.errors?.required || hostRef.contactsForm.controls.name.errors?.minlength\">\n *             <span\n *               i18n=\"\n *                 Contacts name required error text | Text for contacts detail component name required\n *                 error@@contact-manager-form.label.nameRequired\n *               \"\n *               data-role=\"missing-account-name\">\n *               Name is required\n *             </span>\n *           </ng-container>\n *         </bb-input-validation-message-ui>\n *       </div>\n *       <div class=\"bb-block bb-block--lg col-12\">\n *         <ng-container [ngSwitch]=\"hostRef.type\">\n *           <ng-container *ngSwitchCase=\"hostRef.createAccountTypeRef.IBAN\">\n *             <ng-container *ngTemplateOutlet=\"iban\"></ng-container>\n *           </ng-container>\n *           <ng-container *ngSwitchCase=\"hostRef.createAccountTypeRef.EMAIL\">\n *             <ng-container *ngTemplateOutlet=\"email\"></ng-container>\n *           </ng-container>\n *           <ng-container *ngSwitchCase=\"hostRef.createAccountTypeRef.PHONE\">\n *             <ng-container *ngTemplateOutlet=\"phone\"></ng-container>\n *           </ng-container>\n *           <ng-container *ngSwitchCase=\"hostRef.createAccountTypeRef.ACCOUNT\">\n *             <ng-container *ngTemplateOutlet=\"bban\"></ng-container>\n *           </ng-container>\n *           <ng-container *ngSwitchDefault>\n *             <ng-container *ngTemplateOutlet=\"iban\"></ng-container>\n *           </ng-container>\n *         </ng-container>\n *\n *       </div>\n *     </div>\n *   </fieldSet>\n *   <div class=\"bb-button-bar\">\n *     <button\n *       bbButton\n *       type=\"submit\"\n *       color=\"primary\"\n *       type=\"submit\"\n *       [disabled]=\"hostRef.contactsForm.invalid || !hostRef.contactsForm?.controls?.name?.value.trim()\"\n *       class=\"bb-button-bar__button\"\n *       name=\"save\"\n *       data-role=\"save-button\"\n *       i18n=\"Save current form | Save button text for saving a contact item@@contact-manager-form.button.save\"\n *     >\n *       Save\n *     </button>\n *     <button\n *     bbButton\n *     color=\"secondary\"\n *     (click)=\"hostRef.back()\"\n *     type=\"button\"\n *     class=\"bb-button-bar__button\"\n *     name=\"back\"\n *     data-role=\"contacts-form-back-button\"\n *     i18n=\"\n *       Back action in current form | Back button text for going back to selection@@contact-manager-form.button.back\n *     \"\n *   >\n *     Back\n *   </button>\n *     <button\n *       bbButton\n *       color=\"link-text\"\n *       (click)=\"hostRef.cancel()\"\n *       type=\"button\"\n *       class=\"bb-button-bar__button bb-button-bar__button--across\"\n *       name=\"cancel\"\n *       data-role=\"contacts-form-cancel-button\"\n *       i18n=\"\n *         Cancel action in current form | Cancel button text for cancelling a creation of a new\n *         contact@@contact-manager-form.button.cancel\n *       \"\n *     >\n *       Cancel\n *     </button>\n *   </div>\n * </form>\n * </ng-template>\n * ```\n * @ngModule ContactManagerWidgetModule\n */\n@Directive({\n  selector: '[bbContactsFormCustomizable]',\n})\nexport class ContactsFormCustomizableDirective extends BbTemplate<ContactsFormComponent, ContactsFormItem> {}\n","<ng-container bbContactsFormCustomizable [bbHostRef]=\"hostRef\" [bbTemplateContext]=\"item\"></ng-container>\n<ng-template bbContactsFormCustomizable let-hostRef>\n  <bb-contacts-detail\n    [showDetail]=\"false\"\n    [item]=\"hostRef.item\"\n    [type]=\"hostRef.type\"\n    (deleteContactsItem)=\"hostRef.deleteItemEmit()\"\n  ></bb-contacts-detail>\n  <bb-loading-indicator-ui *ngIf=\"hostRef.disabledSubmit\"></bb-loading-indicator-ui>\n  <form\n    *ngIf=\"hostRef.contactsForm\"\n    [hidden]=\"hostRef.disabledSubmit\"\n    (submit)=\"hostRef.saveItem()\"\n    [formGroup]=\"hostRef.contactsForm\"\n    class=\"bb-block bb-block--xl\"\n  >\n    <div class=\"row\">\n      <div class=\"bb-block bb-block--xl col-12\" data-role=\"contact-account-info-account-name1\">\n        <bb-input-text-ui\n          id=\"bb-create-contact-name\"\n          data-role=\"new-contact-name\"\n          label=\"Name\"\n          i18n-label=\"Contacts name label | Label for contacts detail component name@@contact-manager-form.label.name\"\n          [formControl]=\"hostRef.contactsForm.controls.name\"\n          [maxLength]=\"140\"\n          [required]=\"true\"\n          bbNoWhiteSpace\n        >\n        </bb-input-text-ui>\n        <bb-input-validation-message-ui\n          class=\"position-absolute\"\n          role=\"alert\"\n          [showErrors]=\"hostRef.contactsForm.controls.name.errors?.required && hostRef.contactsForm.controls.name.touched\"\n        >\n          <span\n            i18n=\"\n                Contacts name required error text | Text for contacts detail component name required\n                error@@contact-manager-form.label.nameRequired\n              \"\n            data-role=\"missing-account-name\"\n          >\n            Name is required\n          </span>\n        </bb-input-validation-message-ui>\n      </div>\n      <div class=\"bb-block bb-block--xl col-12\">\n        <ng-container [ngSwitch]=\"hostRef.type\">\n          <ng-container *ngSwitchCase=\"hostRef.createAccountTypeRef.IBAN\">\n            <ng-container *ngTemplateOutlet=\"iban\"></ng-container>\n          </ng-container>\n          <ng-container *ngSwitchCase=\"hostRef.createAccountTypeRef.EMAIL\">\n            <ng-container *ngTemplateOutlet=\"email\"></ng-container>\n          </ng-container>\n          <ng-container *ngSwitchCase=\"hostRef.createAccountTypeRef.PHONE\">\n            <ng-container *ngTemplateOutlet=\"phone\"></ng-container>\n          </ng-container>\n          <ng-container *ngSwitchCase=\"hostRef.createAccountTypeRef.ACCOUNT\">\n            <ng-container *ngTemplateOutlet=\"bban\"></ng-container>\n          </ng-container>\n          <ng-container *ngSwitchDefault>\n            <ng-container *ngTemplateOutlet=\"iban\"></ng-container>\n          </ng-container>\n        </ng-container>\n      </div>\n    </div>\n    <div class=\"bb-button-bar bb-button-bar--spacing-sm\">\n      <button\n        bbButton\n        class=\"bb-button-bar__button\"\n        type=\"submit\"\n        color=\"primary\"\n        name=\"save\"\n        data-role=\"save-button\"\n        i18n=\"Save current form | Save button text for saving a contact item@@contact-manager-form.button.save\"\n        [disabled]=\"hostRef.submitted && hostRef.contactsForm.invalid || hostRef.disabledSubmit\"\n      >\n        Save\n      </button>\n      <button\n        bbButton\n        color=\"secondary\"\n        type=\"button\"\n        class=\"bb-button-bar__button\"\n        name=\"back\"\n        data-role=\"contacts-form-back-button\"\n        i18n=\"\n        Back action in current form | Back button text for going back to selection@@contact-manager-form.button.back\n      \"\n        (click)=\"hostRef.back()\"\n      >\n        Back\n      </button>\n      <button\n        bbButton\n        color=\"link-text\"\n        type=\"button\"\n        class=\"bb-button-bar__button bb-button-bar__button--across\"\n        name=\"cancel\"\n        data-role=\"contacts-form-cancel-button\"\n        i18n=\"\n          Cancel action in current form | Cancel button text for cancelling a creation of a new\n          contact@@contact-manager-form.button.cancel\n        \"\n        (click)=\"hostRef.cancel()\"\n      >\n        Cancel\n      </button>\n    </div>\n  </form>\n\n  <ng-template #iban>\n    <bb-input-text-ui\n      id=\"bb-create-contact-iban\"\n      label=\"IBAN\"\n      i18n-label=\"@@contact-manager-form.label.bban\"\n      data-role=\"new-contact-iban\"\n      [formControl]=\"hostRef.contactsForm.controls.IBAN\"\n      [maxLength]=\"hostRef.ibanMask.length\"\n      [required]=\"true\"\n      [mask]=\"hostRef.ibanMask\"\n      [maskValidator]=\"false\"\n      bbIbanValidator\n    >\n    </bb-input-text-ui>\n\n    <ng-container\n      *ngTemplateOutlet=\"err; context:{ control: hostRef.contactsForm.controls.IBAN, errorMessageAcctType: hostRef.type }\"\n    >\n    </ng-container>\n\n    <bb-input-validation-message-ui\n      class=\"position-absolute\"\n      role=\"alert\"\n      [showErrors]=\"hostRef.contactsForm.controls.IBAN.touched\n      && hostRef.contactsForm.controls.IBAN.errors?.invalidIban\"\n    >\n      <ng-container>\n        <span\n          i18n=\"\n            Contacts account number invalid error text | Text for contacts detail component iban invalid\n            error@@contact-manager-form.label.ibanInvalid\n          \"\n          data-role=\"invalid-account-number-error-label\"\n        >\n          Invalid IBAN\n        </span>\n      </ng-container>\n    </bb-input-validation-message-ui>\n  </ng-template>\n\n  <ng-template #bban>\n    <bb-input-text-ui\n      id=\"bb-create-contact-bban\"\n      label=\"Account number\"\n      i18n-label=\"@@contact-manager-form.label.account.number\"\n      data-role=\"new-contact-bban\"\n      [formControl]=\"hostRef.contactsForm.controls.accountNumber\"\n      [maxLength]=\"34\"\n      [required]=\"true\"\n    >\n    </bb-input-text-ui>\n\n    <ng-container\n      *ngTemplateOutlet=\"err; context:{ control: hostRef.contactsForm.controls.accountNumber, errorMessageAcctType: hostRef.type }\"\n    >\n    </ng-container>\n  </ng-template>\n\n  <ng-template #email>\n    <label\n      #contactsEmailLabel\n      id=\"bb-create-contact-email-label\"\n      data-role=\"contact-account-create-email-label\"\n      i18n=\"@@contact-personal-data.contactEmail.label\"\n      class=\"mb-2\"\n    >\n      Email\n      <small class=\"d-block bb-text-support bb-text-default\">E.g. sarawilliams@backbase.com</small>\n    </label>\n    <bb-input-email-ui\n      [aria-labelledby]=\"contactsEmailLabel.id\"\n      [formControl]=\"hostRef.contactsForm.controls.email\"\n      [maxLength]=\"255\"\n      [required]=\"true\"\n      data-role=\"new-contact-email\"\n      bbEmailDomainValidator\n    >\n    </bb-input-email-ui>\n\n    <ng-container\n      *ngTemplateOutlet=\"err; context:{ control: hostRef.contactsForm.controls.email, errorMessageAcctType: hostRef.type }\"\n    >\n    </ng-container>\n    <bb-input-validation-message-ui\n      class=\"position-absolute\"\n      role=\"alert\"\n      [showErrors]=\"hostRef.contactsForm.controls.email.touched\n      && hostRef.contactsForm.controls.email.errors?.email\"\n    >\n      <ng-container>\n        <span\n          i18n=\"\n          Contacts email id invalid error text | Text for contacts detail component email invalid\n          error@@contact-manager-form.label.email.invalid\n        \"\n          data-role=\"invalid-email-error-label\"\n        >\n          Invalid email\n        </span>\n      </ng-container>\n    </bb-input-validation-message-ui>\n  </ng-template>\n\n  <ng-template #phone>\n    <label\n      #contactsPhoneLabel\n      id=\"bb-create-contact-phone-label\"\n      data-role=\"contact-account-create-phone\"\n      i18n=\"@@contact-manager-form.label.phoneNumber\"\n      class=\"mb-2\"\n    >\n      Phone number\n      <small id=\"example-number\" class=\"d-block bb-text-support bb-text-default\">E.g. +12027953213</small>\n    </label>\n    <bb-input-text-ui\n      [formControl]=\"hostRef.contactsForm.controls.phoneNumber\"\n      [maxLength]=\"30\"\n      [required]=\"true\"\n      [aria-labelledby]=\"contactsPhoneLabel.id\"\n      aria-describedby=\"example-number\"\n      data-role=\"new-contact-phone\"\n    >\n    </bb-input-text-ui>\n    <ng-container\n      *ngTemplateOutlet=\"err; context:{ control: hostRef.contactsForm.controls.phoneNumber && hostRef.contactsForm.controls.phoneNumber, errorMessageAcctType: hostRef.type }\"\n    >\n    </ng-container>\n  </ng-template>\n\n  <ng-template #err let-control=\"control\" let-errorMessageAcctType=\"errorMessageAcctType\">\n    <bb-input-validation-message-ui\n      class=\"position-absolute\"\n      role=\"alert\"\n      [showErrors]=\"control.errors?.required\n    && control.touched\n\"\n    >\n      <ng-container [ngSwitch]=\"errorMessageAcctType\">\n        <span\n          *ngSwitchCase=\"hostRef.createAccountTypeRef.ACCOUNT\"\n          i18n=\"\n            Contacts account number required error text | Text for contacts detail component account number required\n            error@@contact-manager-form.label.account.required\n          \"\n          data-role=\"missing-account-number-error-label\"\n        >\n          Account number is required\n        </span>\n        <span\n          *ngSwitchCase=\"hostRef.createAccountTypeRef.IBAN\"\n          i18n=\"\n            Contacts IBAN required error text | Text for contacts detail component IBAN required\n            error@@contact-manager-form.label.iban.required\n          \"\n          data-role=\"missing-account-number-error-label\"\n        >\n          IBAN is required\n        </span>\n        <span\n          *ngSwitchCase=\"hostRef.createAccountTypeRef.PHONE\"\n          i18n=\"\n            Contacts Phone number required error text | Text for contacts detail component Phone required\n            error@@contact-manager-form.label.phone.number.required\n          \"\n          data-role=\"missing-phone-number-error-label\"\n        >\n          Phone number is required\n        </span>\n        <span\n          *ngSwitchCase=\"hostRef.createAccountTypeRef.EMAIL\"\n          i18n=\"\n            Contacts EMAIL required error text | Text for contacts detail component Email required\n            error@@contact-manager-form.label.email.required\n          \"\n          data-role=\"missing-email-error-label\"\n        >\n          Email is required\n        </span>\n      </ng-container>\n    </bb-input-validation-message-ui>\n  </ng-template>\n</ng-template>\n","import { BbTemplate } from '@backbase/foundation-ang/core';\nimport { Directive } from '@angular/core';\nimport type { ContactsFormContainerComponent } from '../containers/contacts-form-container/contacts-form-container.component';\n\n/**\n * This is an extension slot to be used for customizing success notification after creating a contact\n *\n * @example\n *\n * ```html\n * <ng-template bbContactsCreateSuccessNotificationCustomizable>\n *   <span\n *     i18n=\"@@contact-manager-form-container.notification-create.success\"\n *     data-role=\"successfully-saved-contact\"\n *     role=\"alert\"\n *     aria-atomic=\"true\"\n *   >\n *     Successfully saved Contact\n *   </span>\n * </ng-template>\n * ```\n * @ngModule ContactManagerWidgetModule\n */\n@Directive({\n  selector: '[bbContactsCreateSuccessNotificationCustomizable]',\n})\nexport class ContactsCreateSuccessNotificationCustomizableDirective extends BbTemplate<\n  ContactsFormContainerComponent,\n  undefined\n> {}\n","import { BbTemplate } from '@backbase/foundation-ang/core';\nimport { Directive } from '@angular/core';\nimport type { ContactsFormContainerComponent } from '../containers/contacts-form-container/contacts-form-container.component';\n\n/**\n * This is an extension slot to be used for customizing error notification after creating a contact\n *\n * @example\n *\n * ```html\n * <ng-template bbContactsCreateErrorNotificationCustomizable>\n *   <span\n *     i18n=\"@@contact-manager-form-container.notification-create.error\"\n *     data-role=\"failed-to-save-contact\"\n *     role=\"alert\"\n *     aria-atomic=\"true\"\n *   >\n *     Error saving Contact\n *   </span>\n * </ng-template>\n * ```\n * @ngModule ContactManagerWidgetModule\n */\n@Directive({\n  selector: '[bbContactsCreateErrorNotificationCustomizable]',\n})\nexport class ContactsCreateErrorNotificationCustomizableDirective extends BbTemplate<\n  ContactsFormContainerComponent,\n  undefined\n> {}\n","import { BbTemplate } from '@backbase/foundation-ang/core';\nimport { Directive } from '@angular/core';\nimport type { ContactsFormContainerComponent } from '../containers/contacts-form-container/contacts-form-container.component';\n\n/**\n * This is an extension slot to be used for customizing success notification after editing a contact\n *\n * @example\n *\n * ```html\n * <ng-template bbContactsEditSuccessNotificationCustomizable>\n *   <span\n *     i18n=\"@@contact-manager-form-container.notification-edit.success\"\n *     data-role=\"successfully-saved-contact\"\n *     role=\"alert\"\n *     aria-atomic=\"true\"\n *   >\n *     Successfully saved Contact\n *   </span>\n * </ng-template>\n * ```\n * @ngModule ContactManagerWidgetModule\n */\n@Directive({\n  selector: '[bbContactsEditSuccessNotificationCustomizable]',\n})\nexport class ContactsEditSuccessNotificationCustomizableDirective extends BbTemplate<\n  ContactsFormContainerComponent,\n  undefined\n> {}\n","import { BbTemplate } from '@backbase/foundation-ang/core';\nimport { Directive } from '@angular/core';\nimport type { ContactsFormContainerComponent } from '../containers/contacts-form-container/contacts-form-container.component';\n\n/**\n * This is an extension slot to be used for customizing error notification after editing a contact\n *\n * @example\n *\n * ```html\n * <ng-template bbContactsEditErrorNotificationCustomizable>\n *   <span\n *     i18n=\"@@contact-manager-form-container.notification-edit.error\"\n *     data-role=\"failed-to-save-contact\"\n *     role=\"alert\"\n *     aria-atomic=\"true\"\n *   >\n *     Error saving Contact\n *   </span>\n * </ng-template>\n * ```\n * @ngModule ContactManagerWidgetModule\n */\n@Directive({\n  selector: '[bbContactsEditErrorNotificationCustomizable]',\n})\nexport class ContactsEditErrorNotificationCustomizableDirective extends BbTemplate<\n  ContactsFormContainerComponent,\n  undefined\n> {}\n","import { BbTemplate } from '@backbase/foundation-ang/core';\nimport { Directive } from '@angular/core';\nimport type { ContactsFormContainerComponent } from '../containers/contacts-form-container/contacts-form-container.component';\n\n/**\n * This is an extension slot to be used for customizing confirmation dialog of discarding changes\n *\n * @example\n *\n * ```html\n * <ng-template bbContactsEditDiscardConfirmationCustomizable let-hostRef let-context=\"context\">\n *   <div class=\"modal-header\">\n *     <h4 i18n=\"@contact-manager-form-container.header.discardChanges\" class=\"modal-title\">Discard Changes</h4>\n *   </div>\n *   <div class=\"modal-body\" role=\"alert\">\n *     <p i18n=\"@@contact-manager-form-container.discardChangesConfirmation\">\n *       Are you sure you want to discard your changes? This action cannot be undone.\n *     </p>\n *   </div>\n *   <div class=\"modal-footer\">\n *     <div class=\"d-flex flex-row-reverse\">\n *       <button\n *         class=\"ml-3\"\n *         bbButton\n *         color=\"danger\"\n *         i18n=\"@@contact-manager-form-container.button.discard\"\n *         type=\"button\"\n *         (click)=\"hostRef.discardChanges()\"\n *       >\n *         Discard\n *       </button>\n *       <button\n *         i18n=\"@@contact-manager-form-container.button.cancel\"\n *         type=\"button\"\n *         bbButton\n *         color=\"secondary\"\n *         (click)=\"context.dismiss()\"\n *       >\n *         Not now\n *       </button>\n *     </div>\n *   </div>\n * </ng-template>\n * ```\n * @ngModule ContactManagerWidgetModule\n */\n@Directive({\n  selector: '[bbContactsEditDiscardConfirmationCustomizable]',\n})\nexport class ContactsEditDiscardConfirmationCustomizableDirective extends BbTemplate<\n  ContactsFormContainerComponent,\n  { close: (result: any) => void; dismiss: (reason: any) => void }\n> {}\n","import {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  OnInit,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n} from '@angular/core';\nimport { ActivatedRoute, ParamMap } from '@angular/router';\nimport { Observable, of, Subject } from 'rxjs';\nimport { catchError, map, mergeMap, take, withLatestFrom } from 'rxjs/operators';\n\nimport { ContactsService } from '../../services/contacts.service';\nimport { ContactItem } from '@backbase/contact-common-ang';\nimport { ContactsFormComponent } from '../../components/contacts-form/contacts-form.component';\nimport { ContactsNavigationService, View } from '../../services/contacts-navigation.service';\nimport { ContactsFormItem } from '../../models/types';\nimport { ContactManagerPreferencesService } from '../../services/contacts-preferences.service';\nimport { NotificationService } from '@backbase/ui-ang/notification';\n\n/**\n * Container component for showing contact details.\n *\n * @usageNotes\n *\n * ### Display create/ edit form for contacts\n *\n * ```html\n * <bb-contacts-form-container></bb-contacts-form-container>\n * ```\n *\n * ### Additionally use the container component in routing.\n *\n * ```typescript\n * const routes: [\n *   {\n *   path: 'edit/:id/:type',\n *   canDeactivate: [CanDeactivateGuard],\n *   component: ContactsFormContainerComponent,\n * }]\n *\n * ```\n * @ngModule ContactManagerWidgetModule\n */\n@Component({\n  selector: 'bb-contacts-form-container',\n  templateUrl: './contacts-form-container.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ContactsFormContainerComponent implements OnInit {\n  readonly hostRef = this;\n  readonly itemId = this.route.paramMap.pipe(map((params: ParamMap) => params.get('id')));\n\n  readonly itemType$ = this.route.paramMap.pipe(map((params: ParamMap) => params.get('type')));\n\n  readonly item: Observable<ContactsFormItem | undefined> = this.service.item.pipe(\n    map((item: ContactItem | undefined): ContactsFormItem => this.fromService(item)),\n  );\n\n  readonly notificationTimeout$: Observable<number> = this.propertiesService.notificationDismissTime$;\n\n  @ViewChild(ContactsFormComponent)\n  formComponent!: ContactsFormComponent;\n\n  @ViewChild('notificationCreateSuccess')\n  notificationCreateSuccessTemplate?: TemplateRef<any>;\n\n  @ViewChild('notificationCreateError')\n  notificationCreateErrorTemplate?: TemplateRef<any>;\n\n  @ViewChild('notificationEditSuccess')\n  notificationEditSuccessTemplate?: TemplateRef<any>;\n\n  @ViewChild('notificationEditError')\n  notificationEditErrorTemplate?: TemplateRef<any>;\n\n  @ViewChild('discardChangesModalContent')\n  discardChangesModalContent!: ViewContainerRef;\n\n  isDiscardConfirmOpened = false;\n  discard$ = new Subject<boolean>();\n  isPendingRequest = false;\n\n  constructor(\n    private readonly service: ContactsService,\n    private readonly route: ActivatedRoute,\n    private readonly navigation: ContactsNavigationService,\n    private readonly notificationService: NotificationService,\n    private readonly propertiesService: ContactManagerPreferencesService,\n    private readonly cdr: ChangeDetectorRef,\n  ) {\n    service.getItemFrom(this.itemId);\n  }\n\n  /**\n   * onInit - lifecycle hook for setting current view.\n   */\n  ngOnInit(): void {\n    this.navigation.currentView = View.Edit;\n    this.isPendingRequest = false;\n  }\n\n  /**\n   * Calling the save api and showing the notification.\n   *\n   * @param {ContactsFormItem} item - Contact Object while save\n   */\n  save(item: ContactsFormItem): void {\n    this.isPendingRequest = true;\n    this.itemId\n      .pipe(\n        mergeMap(() => this.service.save(this.toService(item))),\n        catchError(() => of(undefined)),\n        withLatestFrom(this.notificationTimeout$),\n        map(([id, timeout]): { id: string | undefined; timeout: number } => ({ id, timeout })),\n        take(1),\n      )\n      .subscribe(({ id, timeout }) => {\n        this.isPendingRequest = false;\n        this.formComponent.contactsForm.markAsPristine();\n        if (id) {\n          this.navigation.select(id);\n          this.notificationService.showNotification({\n            header: (item.id\n              ? this.notificationEditSuccessTemplate\n              : this.notificationCreateSuccessTemplate) as TemplateRef<any>,\n            message: '',\n            modifier: 'success',\n            ttl: timeout,\n          });\n        } else {\n          this.notificationService.showNotification({\n            header: (item.id\n              ? this.notificationEditErrorTemplate\n              : this.notificationCreateErrorTemplate) as TemplateRef<any>,\n            message: '',\n            modifier: 'error',\n            ttl: timeout,\n          });\n        }\n        this.navigation.currentView = View.List;\n        this.navigation.list();\n      });\n  }\n\n  /**\n   * showing the confirmation modal, when moving away from route.\n   *\n   * @returns {Promise<boolean> | boolean} whether route can be deactivated\n   */\n  canDeactivate(): Observable<boolean> | boolean {\n    if (this.formComponent?.contactsForm?.dirty) {\n      this.isDiscardConfirmOpened = true;\n      this.discard$.complete();\n      this.discard$ = new Subject();\n      this.cdr.markForCheck();\n\n      return this.discard$;\n    }\n\n    return true;\n  }\n\n  /**\n   *  When the Edit is cancelled. It determines if it should show the selected contact or list\n   *\n   * @param {string} id - Contact Id.\n   */\n  cancelEdit(id: string): void {\n    if (id) {\n      this.navigation.select(id);\n      this.navigation.currentView = View.Detail;\n    } else {\n      this.navigation.list();\n      this.navigation.currentView = View.List;\n    }\n  }\n\n  /**\n   * Method to go to previous screen based on id\n   *\n   * @param {string | undefined} id - Contact Id\n   */\n  back(id: string | undefined): void {\n    if (id) {\n      this.navigation.list();\n      this.navigation.currentView = View.List;\n    } else {\n      this.navigation.newContact();\n      this.navigation.currentView = View.Select;\n    }\n  }\n\n  /**\n   *\n   * @param {ContactItem | undefined} item Contact object.\n   * @returns {ContactsFormItem} The transformed contact Object when returned from API.\n   */\n  // eslint-disable-next-line complexity\n  fromService(item: ContactItem | undefined): ContactsFormItem {\n    if (item) {\n      return {\n        id: item.id,\n        name: item.name,\n        IBAN: item.accounts && item.accounts[0] && item.accounts[0].IBAN ? item.accounts[0].IBAN : undefined,\n        accountNumber:\n          item.accounts && item.accounts[0] && item.accounts[0].accountNumber\n            ? item.accounts[0].accountNumber\n            : undefined,\n        email: item.accounts && item.accounts[0] && item.accounts[0].email ? item.accounts[0].email : undefined,\n        phoneNumber:\n          item.accounts && item.accounts[0] && item.accounts[0].phoneNumber ? item.accounts[0].phoneNumber : undefined,\n        accounts: item.accounts || [],\n        additions: item.additions || {},\n      };\n    } else {\n      return { id: '', name: '', surname: '', initials: '', accounts: [], additions: {} };\n    }\n  }\n\n  /**\n   *\n   * @param {ContactsFormItem} item Contact Object\n   * @returns {ContactItem} The trandformed contact object when submitting to API.\n   */\n  toService(item: ContactsFormItem): ContactItem {\n    return {\n      id: item.id,\n      name: item.name,\n      accounts: [\n        {\n          ...(item.accounts && item.accounts[0] ? item.accounts[0] : {}),\n          ...(item.IBAN ? { IBAN: item.IBAN } : {}),\n          ...(item.accountNumber ? { accountNumber: item.accountNumber } : {}),\n          ...(item.phoneNumber ? { phoneNumber: item.phoneNumber } : {}),\n          ...(item.email ? { email: item.email } : {}),\n        },\n      ],\n      ...(item.additions ? { additions: item.additions } : {}),\n    };\n  }\n\n  /**\n   * Method that calls the delete api and returns to the list.\n   *\n   * @param {string} id Contact Id to be deleted\n   */\n  deleteContactsItem(id: string) {\n    this.service.delete(id);\n    this.navigation.list();\n    this.navigation.currentView = View.List;\n  }\n\n  /**\n   * event handler for confirming discard\n   */\n  onConfirmDiscard() {\n    this.discard$.next(true);\n    this.discard$.complete();\n    this.isDiscardConfirmOpened = false;\n  }\n\n  /**\n   * event handler for canceling discard\n   */\n  onCancelDiscard() {\n    this.discard$.next(false);\n    this.discard$.complete();\n    this.isDiscardConfirmOpened = false;\n  }\n}\n","<ng-container *ngIf=\"item | async as item; else loadingTemplate\">\n  <bb-contacts-form\n    [item]=\"item\"\n    [type]=\"itemType$ | async\"\n    [disabledSubmit]=\"isPendingRequest\"\n    (save)=\"save($event)\"\n    (cancelEdit)=\"cancelEdit($event)\"\n    (backEvent)=\"back($event)\"\n    (deleteContactsItem)=\"deleteContactsItem($event)\"\n  ></bb-contacts-form>\n</ng-container>\n\n<ng-template #notificationCreateSuccess>\n  <ng-container bbContactsCreateSuccessNotificationCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n  <ng-template bbContactsCreateSuccessNotificationCustomizable>\n    <span\n      i18n=\"@@contact-manager-form-container.notification-create.success\"\n      data-role=\"successfully-saved-contact\"\n      role=\"alert\"\n      aria-atomic=\"true\"\n    >\n      Successfully saved Contact\n    </span>\n  </ng-template>\n</ng-template>\n\n<ng-template #notificationCreateError>\n  <ng-container bbContactsCreateErrorNotificationCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n  <ng-template bbContactsCreateErrorNotificationCustomizable>\n    <span\n      i18n=\"@@contact-manager-form-container.notification-create.error\"\n      data-role=\"failed-to-save-contact\"\n      role=\"alert\"\n      aria-atomic=\"true\"\n    >\n      Error saving Contact\n    </span>\n  </ng-template>\n</ng-template>\n\n<ng-template #notificationEditSuccess>\n  <ng-container bbContactsEditSuccessNotificationCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n  <ng-template bbContactsEditSuccessNotificationCustomizable>\n    <span\n      i18n=\"@@contact-manager-form-container.notification-edit.success\"\n      data-role=\"successfully-saved-contact\"\n      role=\"alert\"\n      aria-atomic=\"true\"\n    >\n      Successfully saved Contact\n    </span>\n  </ng-template>\n</ng-template>\n\n<ng-template #notificationEditError>\n  <ng-container bbContactsEditErrorNotificationCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n  <ng-template bbContactsEditErrorNotificationCustomizable>\n    <span\n      i18n=\"@@contact-manager-form-container.notification-edit.error\"\n      data-role=\"failed-to-save-contact\"\n      role=\"alert\"\n      aria-atomic=\"true\"\n    >\n      Error saving Contact\n    </span>\n  </ng-template>\n</ng-template>\n\n<ng-template #loadingTemplate>\n  <div class=\"bb-state-container\">\n    <bb-loading-indicator-ui\n      i18n-text=\"@@contact-manager-form-container.loading.label\"\n      text=\"Loading...\"\n    ></bb-loading-indicator-ui>\n  </div>\n</ng-template>\n\n<ng-container bbContactsEditDiscardConfirmationCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n<ng-template bbContactsEditDiscardConfirmationCustomizable let-hostRef>\n  <bb-confirm-action-dialog\n    [isOpen]=\"hostRef.isDiscardConfirmOpened\"\n    [confirmButtonColor]=\"'danger'\"\n    (confirm)=\"hostRef.onConfirmDiscard()\"\n    (cancel)=\"hostRef.onCancelDiscard()\"\n  >\n    <span title i18n=\"@contact-manager-form-container.header.discardChanges\">Discard Changes</span>\n    <span body i18n=\"@@contact-manager-form-container.discardChangesConfirmation\">\n      Are you sure you want to discard your changes? This action cannot be undone.\n    </span>\n    <span cancelButtonLabel i18n=\"@@contact-manager-form-container.button.cancel\">Not now</span>\n    <span confirmButtonLabel i18n=\"@@contact-manager-form-container.button.discard\">Discard</span>\n  </bb-confirm-action-dialog>\n</ng-template>\n","import { Injectable } from '@angular/core';\nimport { CanDeactivate } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nexport interface CanComponentDeactivate {\n  canDeactivate: () => Observable<boolean> | Promise<boolean> | boolean;\n}\n/**\n *\n * This guard is called while deactivating the route to check if the form is dirty.\n *\n * @see ContactManagerWidgetModule\n * @usageNotes\n *\n * ### Ensure the ContactManagerWidgetModule is imported to your component module\n *\n * ```ts\n * @NgModule({\n *   ...\n *   imports: [\n *     ...\n *     ContactManagerWidgetModule,\n *   ],\n * })\n * export class ContactManagerWidgetModule {}\n * ```\n *\n * ### Inject this guard into your route\n *\n * ```ts\n * @Component({\n *   ...\n *   providers: [{\n *   path: 'edit/:id/:type',\n *   canDeactivate: [CanDeactivateGuard],\n *   component: ContactsFormContainerComponent,\n * },]\n * })\n *  export class ContactManagerWidgetModule {\n * ```\n */\n@Injectable()\nexport class CanDeactivateGuard implements CanDeactivate<CanComponentDeactivate> {\n  canDeactivate(component: CanComponentDeactivate) {\n    return component.canDeactivate ? component.canDeactivate() : true;\n  }\n}\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { AccountCreateType, CreateListType } from '../../models/types';\nimport { ContactsNavigationService, View } from '../../services/contacts-navigation.service';\n\n/**\n * Displays a list of all contact types, allowing one to be selected.\n *\n * @usageNotes\n *\n * ### Display a list of types of contact that can be created\n *\n * ```html\n * <bb-contact-account-select-type\n *   [listOfAccountTypes]=\"createContactList$ | async\"\n *   [noOfItemsinList]=\"noOfItemsinList\n * ></bb-contact-account-select-type>\n * ```\n *\n * ### Additionally set the selected contact type\n *\n * ```html\n * <bb-contact-account-select-type\n *   [listOfAccountTypes]=\"createContactList$ | async\"\n *   [noOfItemsinList]=\"noOfItemsinList\n *   (selectedAccountType)=\"selectedAccountType()\"\n * ></bb-contact-account-select-type>\n * ```\n * @ngModule ContactManagerWidgetModule\n */\n\n@Component({\n  selector: 'bb-contact-account-select-type',\n  templateUrl: './contact-select-account-type.component.html',\n})\nexport class ContactSelectAccountTypeComponent implements OnInit {\n  /**\n   * All the account Type in an array.\n   */\n  @Input()\n  listOfAccountTypes!: CreateListType[];\n  /**\n   * Number of properties which are enabled.\n   */\n  @Input()\n  noOfItemsinList!: number;\n  /**\n   * event when account is selected.\n   */\n  @Output()\n  selectedAccountType: EventEmitter<string> = new EventEmitter<string>();\n\n  public readonly createAccountTypeRef = AccountCreateType;\n\n  constructor(private navigation: ContactsNavigationService) {}\n  /**\n   * OnInit lifecycle hook.\n   */\n  ngOnInit(): void {\n    this.navigation.currentView = View.Edit;\n    if (this.noOfItemsinList === 0 || this.noOfItemsinList === 1) {\n      this.navigation.newContactForm(\n        this.listOfAccountTypes.find((list) => list.enableItem)?.listItem || this.createAccountTypeRef.IBAN,\n      );\n    }\n  }\n  /**\n   * Update the selected account type for contact creation.\n   *\n   * @param {CreateListType} $event -The selected contact Type details.\n   */\n  updateCreateContactType($event: CreateListType) {\n    this.navigation.currentView = View.Edit;\n    this.navigation.newContactForm($event.listItem);\n  }\n}\n","<div class=\"bb-block bb-block--xl\">\n  <div class=\"bb-stack bb-stack--align-bottom\">\n    <div class=\"bb-stack__item bb-stack__item--fill\">\n      <div class=\"bb-block\" data-role=\"contact-details-info-name\">\n        <span\n          class=\"d-none\"\n          data-role=\"create-contact-label\"\n          aria-hidden=\"true\"\n          i18n=\"Create new contact heading | Title shown when user is in select contact type@@contact-manager-detail.create.select.heading\"\n          #heading\n        >\n          Create new contact\n        </span>\n        <bb-header-ui data-role=\"create-new-contact-label\" headingType=\"h3\" [heading]=\"heading.textContent\">\n        </bb-header-ui>\n      </div>\n    </div>\n  </div>\n</div>\n<hr />\n<div class=\"bb-lock bb-text-support\">\n  <div\n    class=\"bb-bock\"\n    data-role=\"create-contact-select-new-account-info\"\n    i18n=\"@@create-contact-type-list.select.info.text\"\n  >\n    Select which information you want to use to create a contact. You can move money with an account number, a phone\n    number or an email\n  </div>\n</div>\n<div class=\"bb-select-payment-option\">\n  <div *ngFor=\"let listItem of listOfAccountTypes\">\n    <div *ngIf=\"listItem.enableItem\">\n      <ng-container *ngTemplateOutlet=\"listButton; context: { listItem: listItem}\"></ng-container>\n    </div>\n  </div>\n</div>\n\n<ng-template #listButton let-listItem=\"listItem\">\n  <div class=\"bb-button-bar m-3\">\n    <button\n      class=\"bb-button-bar__button bb-button-bar__button--across bb-inline-stack col-12 bb-select-payment-option__label\"\n      bbButton\n      color=\"unstyled\"\n      (click)=\"updateCreateContactType(listItem)\"\n    >\n      <ng-container [ngSwitch]=\"listItem.listItem\">\n        <ng-container *ngSwitchCase=\"createAccountTypeRef.IBAN\">\n          <bb-icon-ui class=\"bb-inline-stack__item col bb-text-support\" name=\"person-outline\"></bb-icon-ui>\n          <div data-role=\"iban-item\" class=\"col-10 text-left\">\n            <ng-container i18n=\"@@create-contact-type-list.select.button.text.iban\">With an IBAN </ng-container>\n          </div>\n\n          <div class=\"col\">\n            <bb-icon-ui class=\"bb-inline-stack__item col-1 bb-text-support\" name=\"angle-right\"></bb-icon-ui>\n          </div>\n        </ng-container>\n        <ng-container *ngSwitchCase=\"createAccountTypeRef.ACCOUNT\">\n          <bb-icon-ui class=\"bb-inline-stack__item col bb-text-support\" name=\"person-outline\"></bb-icon-ui>\n          <div data-role=\"account-number-item\" class=\"col-10 text-left\">\n            <ng-container i18n=\"@@create-contact-type-list.select.button.text.account\"\n              >With an account number\n            </ng-container>\n          </div>\n\n          <div class=\"col\">\n            <bb-icon-ui class=\"bb-inline-stack__item col-1 bb-text-support\" name=\"angle-right\"></bb-icon-ui>\n          </div>\n        </ng-container>\n        <ng-container *ngSwitchCase=\"createAccountTypeRef.EMAIL\">\n          <bb-icon-ui class=\"bb-inline-stack__item col bb-text-support\" name=\"inbox\"></bb-icon-ui>\n          <div data-role=\"email-item\" class=\"col-10 text-left\">\n            <ng-container i18n=\"@@create-contact-type-list.select.button.text.email\">With an email </ng-container>\n          </div>\n\n          <div class=\"col\">\n            <bb-icon-ui class=\"bb-inline-stack__item col-1 bb-text-support\" name=\"angle-right\"></bb-icon-ui>\n          </div>\n        </ng-container>\n        <ng-container *ngSwitchCase=\"createAccountTypeRef.PHONE\">\n          <bb-icon-ui class=\"bb-inline-stack__item col bb-text-support\" name=\"phone\"></bb-icon-ui>\n          <div data-role=\"phone-number-item\" class=\"col-10 text-left\">\n            <ng-container i18n=\"@@create-contact-type-list.select.button.text.phone\">With a phone number </ng-container>\n          </div>\n\n          <div class=\"col\">\n            <bb-icon-ui class=\"bb-inline-stack__item col-1 bb-text-support\" name=\"angle-right\"></bb-icon-ui>\n          </div>\n        </ng-container>\n      </ng-container>\n    </button>\n  </div>\n</ng-template>\n","import { Component } from '@angular/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\nimport { AccountCreateType, CreateListType } from '../../models/types';\nimport { ContactsService } from '../../services/contacts.service';\nimport { ContactManagerPreferencesService } from '../../services/contacts-preferences.service';\n/**\n *\n * Container component for showing contact list.\n *\n * @usageNotes\n *\n * ### Display list of all the types of contacts to select before creation.\n *\n * ```html\n * <bb-contacts-type-list-container></bb-contacts-type-list-container>\n * ```\n * ### Additionally use the container component in routing.\n *\n * ```typescript\n * const routes: [\n * {\n *  path: 'select',\n *  component: ContactsTypeListContainerComponent\n * }]\n *\n *\n * @ngModule ContactManagerWidgetModule\n */\n@Component({\n  selector: 'bb-contacts-type-list-container',\n  templateUrl: './contacts-type-list-container.component.html',\n})\nexport class ContactsTypeListContainerComponent {\n  /**\n   * property from user if the contact creation through email is allowed\n   */\n  readonly allowEmail$: Observable<boolean> = this.propertiesService.createContactEmail$;\n  /**\n   * property from user if the contact creation through IBAN is allowed\n   */\n  readonly allowIBAN$: Observable<boolean> = this.propertiesService.createContactIBAN$;\n  /**\n   * property from user if the contact creation through Account Number is allowed\n   */\n  readonly allowAccount$: Observable<boolean> = this.propertiesService.createContactAccount$;\n  /**\n   * property from user if the contact creation through Phone Number is allowed\n   */\n  readonly allowPhone$: Observable<boolean> = this.propertiesService.createContactPhone$;\n\n  /**\n   * check which properties are allowed and showing them on screen.\n   */\n  createContactList$: Observable<CreateListType[]> = combineLatest([\n    this.allowAccount$,\n    this.allowIBAN$,\n    this.allowPhone$,\n    this.allowEmail$,\n  ]).pipe(\n    tap(\n      (contactListItem) =>\n        (this.noOfItemsinList = contactListItem.filter((listItem) => listItem && typeof listItem === 'boolean').length),\n    ),\n    map(([Account, IBAN, Phone, Email]) => [\n      {\n        listItem: AccountCreateType.ACCOUNT,\n        enableItem: Account?.valueOf(),\n      },\n      {\n        listItem: AccountCreateType.IBAN,\n        enableItem: IBAN?.valueOf(),\n      },\n      { listItem: AccountCreateType.PHONE, enableItem: Phone?.valueOf() },\n      { listItem: AccountCreateType.EMAIL, enableItem: Email?.valueOf() },\n    ]),\n  );\n\n  noOfItemsinList!: number;\n\n  constructor(\n    private readonly contactService: ContactsService,\n    private readonly propertiesService: ContactManagerPreferencesService,\n  ) {}\n}\n","<bb-contact-account-select-type [listOfAccountTypes]=\"createContactList$ | async\" [noOfItemsinList]=\"noOfItemsinList\">\n</bb-contact-account-select-type>\n","import { ChangeDetectionStrategy, Component, Input, OnInit } from '@angular/core';\nimport { ContactsService } from '../../../services/contacts.service';\nimport { ContactItem } from '@backbase/contact-common-ang';\nimport { AccountCreateType, AccountTypeModelKey } from '../../../models/types';\n\n/**\n * Displays an item in the  list of all contacts\n *\n * @usageNotes\n *\n * ### Display a single item in the list of types of contact.\n *\n * ```html\n * <bb-contact-list-item\n *     [contactItem]=\"item\"\n *     [showAccountNumber]=\"true\"\n *     [showAlias]=\"showAlias\"\n *  ></bb-contact-list-item>\n * ```\n * @ngModule ContactManagerWidgetModule\n */\n@Component({\n  selector: 'bb-contact-list-item',\n  templateUrl: './contact-list-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ContactsListItemComponent implements OnInit {\n  /**\n   * Contact item that contains the account information of the contact\n   */\n  @Input() contactItem!: ContactItem;\n\n  /**\n   * Wether to show contact account number.\n   * Default is false.\n   */\n  @Input() showAccountNumber = false;\n\n  /**\n   * Wether to show contact alias.\n   * Default is false.\n   */\n  @Input() showAlias = false;\n\n  public readonly accountTypeKeyRef = AccountTypeModelKey;\n  public readonly createAccountType = AccountCreateType;\n  public selectedAccountType!: string;\n\n  constructor(public service: ContactsService) {}\n  /**\n   * OnInit - lifecycle hook.\n   */\n  ngOnInit() {\n    if (this.contactItem === undefined) {\n      throw new Error('`item` input is required in `bb-todo-list-item` component');\n    } else {\n      this.selectedAccountType = this.service.checkaccountType(this.contactItem);\n    }\n  }\n}\n","<div class=\"bb-block bb-block--sm\">\n  <div class=\"bb-block bb-block--xs break-word\">\n    <span class=\"sr-only\">\n      <span i18n=\"name@@bb-contact-list-item.label.name\" data-role=\"name-header\"> Name </span>\n      :&nbsp;\n    </span>\n    <span class=\"bb-text-bold break-word\" data-role=\"list-name\"> {{ contactItem.name }} </span>\n  </div>\n  <div *ngIf=\"showAccountNumber\" class=\"bb-block bb-block--xs break-word\">\n    <ng-container [ngSwitch]=\"selectedAccountType\">\n      <ng-container *ngSwitchCase=\"createAccountType.IBAN\">\n        <span class=\"sr-only\">\n          <span i18n=\"account number@@bb-contact-list-item.label.iban\" data-role=\"account-header\"> IBAN </span>\n          :&nbsp;\n        </span>\n        <ng-container *ngTemplateOutlet=\"accountdetails\"></ng-container>\n      </ng-container>\n      <ng-container *ngSwitchCase=\"createAccountType.EMAIL\">\n        <span class=\"sr-only\">\n          <span i18n=\"account number@@bb-contact-list-item.label.email\" data-role=\"email-header\"> Email </span>\n          :&nbsp;\n        </span>\n        <ng-container *ngTemplateOutlet=\"details\"></ng-container>\n      </ng-container>\n      <ng-container *ngSwitchCase=\"createAccountType.PHONE\">\n        <span class=\"sr-only\">\n          <span i18n=\"account number@@bb-contact-list-item.label.phone.number\" data-role=\"phone-header\">\n            Phone number\n          </span>\n          :&nbsp;\n        </span>\n        <ng-container *ngTemplateOutlet=\"details\"></ng-container>\n      </ng-container>\n      <ng-container *ngSwitchCase=\"createAccountType.ACCOUNT\">\n        <span class=\"sr-only\">\n          <span i18n=\"account number@@bb-contact-list-item.label.account.number\" data-role=\"account-header\">\n            Account number\n          </span>\n          :&nbsp;\n        </span>\n        <ng-container *ngTemplateOutlet=\"accountdetails\"></ng-container>\n      </ng-container>\n    </ng-container>\n  </div>\n  <div *ngIf=\"showAlias && contactItem.alias\" class=\"bb-block bb-block--xs break-word\">\n    <span class=\"sr-only\" data-role=\"alias-header\" i18n=\"name@@bb-contact-list-item.label.alias\">Alias</span>\n    <span class=\"sr-only\">:&nbsp;</span>\n    <span class=\"bb-text-support break-word\" data-role=\"list-alias\"> {{ contactItem.alias }} </span>\n  </div>\n\n  <ng-template #accountdetails>\n    <span class=\"bb-text-support\" data-role=\"list-account-number\" *ngIf=\"contactItem?.accounts[0] as account\">\n      {{ account[selectedAccountType] | bbIban}}\n    </span>\n  </ng-template>\n  <ng-template #details>\n    <span class=\"bb-text-support\" data-role=\"list-account-number\" *ngIf=\"contactItem?.accounts[0] as account\">\n      {{ account[selectedAccountType]}}\n    </span>\n  </ng-template>\n</div>\n","import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChildren,\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { ContactItem } from '@backbase/contact-common-ang';\nimport { startWith, takeUntil } from 'rxjs/operators';\nimport { AccountCreateType } from '../../models/types';\n\n/**\n * Displays a list of all contacts\n *\n * @usageNotes\n *\n * ### Display a list of types of contact that can be created\n *\n * ```html\n * <bb-contacts-list-widget\n *       [items]=\"items.contacts\"\n *       [showAlias]=\"false\"\n *     >\n *  </bb-contacts-list-widget>\n * ```\n *\n * ### Additionally update the list\n *\n * ```html\n *  <bb-contacts-list-widget\n *       [items]=\"items.contacts\"\n *       (selectedChange)=\"hostRef.select($event)\"\n *       (formItemChange)=\"hostRef.edit($event)\"\n *       [showAlias]=\"false\"\n *     >\n *   </bb-contacts-list-widget>\n * ```\n * @ngModule ContactManagerWidgetModule\n */\n@Component({\n  selector: 'bb-contacts-list-widget',\n  templateUrl: './contact-list.component.html',\n})\nexport class ContactsListWidgetComponent implements AfterViewInit, OnDestroy {\n  /**\n   * Array of contacts\n   */\n  @Input()\n  items!: Array<ContactItem>;\n  /**\n   * Event that is emitted when selected item changes\n   */\n  @Output() selectedChange = new EventEmitter<string>();\n  /**\n   * The id of current selected contact item\n   */\n  @Input()\n  selectedItemId!: string;\n\n  @ViewChildren('contactItem')\n  contactItem!: QueryList<ElementRef<HTMLLIElement>>;\n  /**\n   * to show Alias in the contact list. default is false\n   */\n  @Input()\n  showAlias!: boolean;\n\n  private focused = 0;\n  contactItemArray: ElementRef[] = [];\n  accountTypeSelected: string = AccountCreateType.IBAN;\n  gc$ = new Subject();\n  public latestSeparator!: string;\n\n  public readonly createAccountTypeRef = AccountCreateType;\n\n  /**\n   * AfterViewInit- lifecycle hook.\n   */\n  ngAfterViewInit(): void {\n    this.contactItem.changes\n      .pipe(startWith(this.contactItem))\n      .pipe(takeUntil(this.gc$))\n      .subscribe((data: QueryList<ElementRef>) => {\n        this.contactItemArray = data.toArray();\n      });\n  }\n\n  /**\n   * onDestroy - lifecycle hook.\n   */\n  ngOnDestroy(): void {\n    this.gc$.next();\n    this.gc$.complete();\n  }\n\n  /**\n   * getTabIndex defines if item can be reached by Tab,\n   * which only the focused item can\n   *\n   * @param {number} i index of an element\n   * @returns {number} [tabindex] parameter value\n   */\n  public getTabIndex(i: number): '0' | '-1' {\n    return i === this.focused ? '0' : '-1';\n  }\n\n  /**\n   * Prevents focus from going beyond the limits of the list\n   *\n   * @param {number} desiredFocus index of an element\n   * @returns {number} index of an element within bounds\n   */\n  private clampDesiredFocus(desiredFocus: number): number {\n    return Math.max(0, Math.min(desiredFocus, this.items.length - 1));\n  }\n\n  /**\n   * Implements keyboard controls for the contact list.\n   * Call on key down events to move the focus to the appropriate element.\n   *\n   * @param {Event} event HTMLEvent object\n   * @param {number} desiredFocus index of an element\n   */\n  onChangeFocusItemTo(event: Event, desiredFocus: number): void {\n    event.preventDefault();\n\n    const realisticFocus = this.clampDesiredFocus(desiredFocus);\n    if (this.focused === realisticFocus) return;\n\n    this.focused = realisticFocus;\n    this.contactItem.find((_, i) => i === this.focused)?.nativeElement?.focus();\n  }\n\n  /**\n   *\n   * @param {string} id - Id of the selcted contact\n   * @param {number} index - index of the selected contact\n   */\n  onContactSelect(id: string, index: number) {\n    this.focused = index;\n    this.accountTypeSelected = '';\n    this.selectedChange.emit(id);\n  }\n\n  /**\n   * isListHeading defines if grouping heading\n   * should be added before list item\n   *\n   * @param {ContactItem} item ContactItem object\n   * @param {number} index index of an element\n   * @returns {boolean} whether item a list heading\n   */\n  public isListHeading(item: ContactItem, index: number): boolean {\n    const char = this.getGroupHeadingChar(item.name.trim());\n    if (this.latestSeparator !== char || !index) {\n      this.latestSeparator = char;\n\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * hasNoSeparatorClass tells if the list item\n   * should have bb-grouped-list__item--no-separator class.\n   *\n   * @param {number} index index of an element\n   * @returns {boolean} whether element should have separator class\n   */\n  public hasNoSeparatorClass(index: number): boolean {\n    const nextItem = this.items[index + 1];\n    if (!nextItem) {\n      return false;\n    } else {\n      const nextChar = this.getGroupHeadingChar(nextItem.name.trim());\n      if (this.latestSeparator !== nextChar) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private getGroupHeadingChar(name: string): string {\n    return String.fromCodePoint(name.codePointAt(0)).toUpperCase();\n  }\n}\n","<div *ngIf=\"items && items.length\">\n  <ul class=\"bb-grouped-list\" data-role=\"existing-contact\" role=\"list\">\n    <ng-container *ngFor=\"let item of items; let i = index\">\n      <li\n        *ngIf=\"isListHeading(item, i)\"\n        class=\"bb-grouped-list__group bb-text-support bb-text-bold\"\n        data-role=\"header-row\"\n      >\n        {{ latestSeparator }}\n      </li>\n      <li\n        class=\"bb-grouped-list__item\"\n        role=\"button\"\n        data-role=\"contact-manager-list-item\"\n        [tabindex]=\"getTabIndex(i)\"\n        [attr.aria-pressed]=\"selectedItemId === item.id\"\n        [ngClass]=\"{\n          'bb-grouped-list__item--is-active': selectedItemId === item.id,\n          'bb-grouped-list__item--no-separator': hasNoSeparatorClass(i)\n        }\"\n        (keydown.Home)=\"onChangeFocusItemTo($event, 0)\"\n        (keydown.ArrowUp)=\"onChangeFocusItemTo($event, i-1)\"\n        (keydown.ArrowDown)=\"onChangeFocusItemTo($event, i+1)\"\n        (keydown.End)=\"onChangeFocusItemTo($event, items.length)\"\n        (click)=\"onContactSelect(item.id, i)\"\n        (keyup.Space)=\"onContactSelect(item.id, i)\"\n        (keyup.Enter)=\"onContactSelect(item.id, i)\"\n        #contactItem\n      >\n        <bb-contact-list-item\n          [contactItem]=\"item\"\n          [showAccountNumber]=\"true\"\n          [showAlias]=\"showAlias\"\n        ></bb-contact-list-item>\n      </li>\n    </ng-container>\n  </ul>\n</div>\n","import { HttpErrorResponse } from '@angular/common/http';\nimport { Directive } from '@angular/core';\nimport { ContactItem } from '@backbase/contact-common-ang';\nimport { BbTemplate } from '@backbase/foundation-ang/core';\nimport type { ContactsListContainerComponent } from './contacts-list-container.component';\n\n/**\n * This is an extension slot to be used for customizing contact manager widget..\n *\n * @usageNotes\n *\n * ### Display a single contact detail\n *\n * ```html\n *  <ng-template bbContactsListContainerCustomizable let-hostRef let-items=\"context\">\n *   <div\n *     class=\"col\"\n *     [ngClass]=\"{\n *       'd-block': hostRef.isListView | async,\n *       'd-lg-block d-none': !(hostRef.isListView | async)\n *     }\"\n *   >\n *     <bb-contacts-list-widget\n *       [items]=\"items.contacts\"\n *       (selectedChange)=\"hostRef.select($event)\"\n *       (formItemChange)=\"hostRef.edit($event)\"\n *       [showAlias]=\"false\"\n *     >\n *     </bb-contacts-list-widget>\n *   </div>\n * </ng-template>\n * ```\n * @ngModule ContactManagerWidgetModule\n */\n@Directive({\n  selector: '[bbContactsListContainerCustomizable]',\n})\nexport class ContactsListContainerCustomizableDirective extends BbTemplate<\n  ContactsListContainerComponent,\n  Array<ContactItem>\n> {}\n/**\n * This is an extension slot to be used for customizing contact manager header section\n *\n * @usageNotes\n *\n * ### Display a header section with search box\n *\n * ```html\n *  <ng-template bbContactsTopSectionCustomizable let-hostRef let-item=\"context\">\n *   <div class=\"col bb-stack\">\n *     <div class=\"bb-stack__item bb-stack__item--fill\">\n *       <bb-search-box-ui\n *         class=\"bb-toolbar__item\"\n *         data-role=\"search-contact-textbox\"\n *         placeholder=\"Search\"\n *         i18n-placeholder=\"Search box placeholder | Placeholder for search box@@contact-manager.placeholder.search\"\n *         [showSearch]=\"true\"\n *         [showClear]=\"true\"\n *         (submit)=\"hostRef.searchBoxItemSelected()\"\n *         (clear)=\"hostRef.searchBoxItemSelected(true)\"\n *         [formControl]=\"hostRef.searchTerm\"\n *         (keyUp.enter)=\"hostRef.searchBoxItemSelected()\"\n *       ></bb-search-box-ui>\n *     </div>\n *     <div class=\"bb-stack__item\">\n *       <button\n *         bbButton\n *         i18n=\"New Contact Button | Button for creating a new contact@@contact-manager.button.newContact\"\n *         data-role=\"new-contact-button\"\n *         class=\"d-none d-lg-block bb-button-bar__button\"\n *         [disabled]=\"!(hostRef.newContactAllowed | async)\"\n *         (click)=\"hostRef.newContact(item.contacts.length)\"\n *         type=\"button\"\n *       >\n *         New Contact\n *       </button>\n *       <button\n *         bbButton\n *         i18n=\"New Contact Button | Button for creating a new contact@@contact-manager.button.newContact\"\n *         data-role=\"new-contact-button\"\n *         class=\"d-block d-lg-none bb-button-bar__button\"\n *         [disabled]=\"!hostRef.newContactAllowed\"\n *         (click)=\"hostRef.newContact(item.contacts.length)\"\n *         type=\"button\"\n *       >\n *         New Contact\n *       </button>\n *     </div>\n *   </div>\n *   <ng-template #rt let-result=\"result\" let-term=\"term\">\n *     <div class=\"text-truncate\" [title]=\"result\">\n *       <ngb-highlight [result]=\"result\" [term]=\"term\"></ngb-highlight>\n *     </div>\n *   </ng-template>\n * </ng-template>\n * ```\n * @ngModule ContactManagerWidgetModule\n */\n@Directive({\n  selector: '[bbContactsTopSectionCustomizable]',\n})\nexport class ContactsTopSectionCustomizableDirective extends BbTemplate<\n  ContactsListContainerComponent,\n  Array<ContactItem>\n> {}\n/**\n * This is an extension slot to be used for customizing contact manager pagination\n *\n * @usageNotes\n *\n * ### Display the pagination\n *\n * ```html\n *   <ng-template bbContactsLoadMoreCustomizable let-hostRef let-items=\"context\">\n *   <bb-pagination-ui\n *     *ngIf=\"(hostRef.paginationType | async) !== 'load-more'\"\n *     class=\"bb-pagination\"\n *     [page]=\"(hostRef.pagination | async)?.from\"\n *     [boundaryLinks]=\"false\"\n *     [directionLinks]=\"true\"\n *     [totalItems]=\"items?.count\"\n *     [itemsPerPage]=\"hostRef.pageSize | async\"\n *     [maxNavPages]=\"hostRef.maxNavPages | async\"\n *     (pageChange)=\"hostRef.onPageChange($event)\"\n *   ></bb-pagination-ui>\n *   <div class=\"p-5 text-center\" *ngIf=\"(hostRef.paginationType | async) === 'load-more'\">\n *     <button\n *       class=\"border text-dark btn btn-secondary\"\n *       (click)=\"hostRef.loadMore()\"\n *       [disabled]=\"items.count && items.count <= items.contacts.length\"\n *     >\n *       <ng-container\n *          i18n=\"Load more button label | Load more button shown down bellow contact list@@contact-manager.load-more.label\">\n *         Load more\n *       </ng-container>\n *     </button>\n *   </div>\n * </ng-template>\n * ```\n * @ngModule ContactManagerWidgetModule\n */\n@Directive({\n  selector: '[bbContactsLoadMoreCustomizable]',\n})\nexport class ContactsLoadMoreCustomizableDirective extends BbTemplate<\n  ContactsListContainerComponent,\n  Array<ContactItem>\n> {}\n/**\n * This is an extension slot to be used for customizing contact manager widget loading view\n *\n * @usageNotes\n *\n * ### Display loading icon\n *\n * ```html\n *    <ng-template bbContactsLoadingCustomizable let-hostRef>\n *   <div class=\"bb-state-container\">\n *     <bb-loading-indicator-ui\n *       i18n-text=\"@@contact-manager.loading.label\"\n *       text=\"Loading contacts...\"\n *     ></bb-loading-indicator-ui>\n *   </div>\n * </ng-template>\n * ```\n * @ngModule ContactManagerWidgetModule\n */\n@Directive({\n  selector: '[bbContactsLoadingCustomizable]',\n})\nexport class ContactsLoadingCustomizableDirective extends BbTemplate<ContactsListContainerComponent, undefined> {}\n/**\n * This is an extension slot to be used for customizing contact manager widget empty view\n *\n * @usageNotes\n *\n * ### Display empty message\n *\n * ```html\n *  <ng-template bbContactsEmptyStateCustomizable let-hostRef>\n *   <div class=\"bb-state-container\">\n *     <bb-empty-state-ui\n *       i18n-title=\"@@contact-manager.state.noContactsLoaded.title\"\n *       title=\"No contacts\"\n *       i18n-subtitle=\"@@contact-manager.state.noContactsLoaded.subtitle\"\n *       subtitle=\"You don't have any contacts to display yet.<br>Try adding a new contact using the 'New Contact' button\"\n *       iconClasses=\"d-flex justify-content-center mb-3\"\n *       iconModifier=\"contacts\"\n *       iconColor=\"primary\"\n *       iconSize=\"xxl\"\n *     ></bb-empty-state-ui>\n *   </div>\n * </ng-template>\n * ```\n * @ngModule ContactManagerWidgetModule\n */\n@Directive({\n  selector: '[bbContactsEmptyStateCustomizable]',\n})\nexport class ContactsEmptyStateCustomizableDirective extends BbTemplate<ContactsListContainerComponent, undefined> {}\n/**\n * This is an extension slot to be used for customizing contact manager Empty view on search\n *\n * @usageNotes\n *\n * ### Display no search result found message.\n *\n * ```html\n *  <ng-template bbContactsEmptySearchStateCustomizable let-hostRef let-term=\"context\">\n *   <div class=\"bb-state-container\">\n *     <bb-empty-state-ui\n *       i18n-title=\"@@contact-manager.state.empty-search.title\"\n *       title=\"No results found\"\n *       i18n-subtitle=\"@@contact-manager.state.empty-search.subtitle\"\n *       subtitle=\"We can't find what you're looking for. Please try a different criteria.\"\n *       iconClasses=\"d-flex justify-content-center mb-3\"\n *       iconModifier=\"search\"\n *       iconColor=\"primary\"\n *       iconSize=\"xxl\"\n *     ></bb-empty-state-ui>\n *   </div>\n * </ng-template>\n * ```\n * @ngModule ContactManagerWidgetModule\n */\n@Directive({\n  selector: '[bbContactsEmptySearchStateCustomizable]',\n})\nexport class ContactsEmptySearchStateCustomizableDirective extends BbTemplate<ContactsListContainerComponent, string> {}\n/**\n * This is an extension slot to be used for customizing contact Error state\n *\n * @usageNotes\n *\n * ### Display error view\n *\n * ```html\n *  <ng-template bbContactsErrorStateCustomizable let-hostRef let-error=\"context\">\n *   <div class=\"bb-state-container\">\n *     <bb-common-error-state-ui [error]=\"error\"></bb-common-error-state-ui>\n *   </div>\n * </ng-template>\n * ```\n * @ngModule ContactManagerWidgetModule\n */\n@Directive({\n  selector: '[bbContactsErrorStateCustomizable]',\n})\nexport class ContactsErrorStateCustomizableDirective extends BbTemplate<\n  ContactsListContainerComponent,\n  HttpErrorResponse\n> {}\n","import { ChangeDetectionStrategy, Component, OnDestroy, OnInit } from '@angular/core';\nimport { BehaviorSubject, combineLatest, Observable, of, Subject, Subscription } from 'rxjs';\nimport {\n  catchError,\n  debounceTime,\n  distinctUntilChanged,\n  filter,\n  map,\n  shareReplay,\n  startWith,\n  tap,\n} from 'rxjs/operators';\n\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { ContactList, ContactsService, ItemId, ListParams, PageParams } from '../../services/contacts.service';\nimport { ContactItem, LoadMoreMethod } from '@backbase/contact-common-ang';\nimport { ContactsNavigationService, View } from '../../services/contacts-navigation.service';\nimport { ActivatedRoute, Event, NavigationEnd, ParamMap, Router } from '@angular/router';\nimport { FormControl } from '@angular/forms';\nimport { Property } from '@backbase/foundation-ang/web-sdk';\nimport { ContactManagerPreferencesService } from '../../services/contacts-preferences.service';\n\n/**\n * The following extension slots are available in this component:\n *  - `ContactsListContainerCustomizableDirective`\n *  - `ContactsTopSectionCustomizableDirective`\n *  - `ContactsLoadMoreCustomizableDirective`\n *  - `ContactsLoadingCustomizableDirective`\n *  - `ContactsEmptyStateCustomizableDirective`\n *  - `ContactsEmptySearchStateCustomizableDirective`\n *  - `ContactsErrorStateCustomizableDirective`\n *\n * @see ContactsListContainerCustomizableDirective\n * @see ContactsTopSectionCustomizableDirective\n * @see ContactsLoadMoreCustomizableDirective\n * @see ContactsLoadingCustomizableDirective\n * @see ContactsEmptyStateCustomizableDirective\n * @see ContactsEmptySearchStateCustomizableDirective\n * @see ContactsErrorStateCustomizableDirective\n * Container component for showing contact list.\n * @usageNotes\n *\n * ### Display list of all the contacts with details / edit form.\n *\n * ```html\n * <bb-contacts-list-container>\n *  <router-outlet></router-outlet>\n * </bb-contacts-list-container>\n * ```\n * @ngModule ContactManagerWidgetModule\n */\n@Component({\n  selector: 'bb-contacts-list-container',\n  templateUrl: 'contacts-list-container.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ContactsListContainerComponent implements OnInit, OnDestroy {\n  firstContactEdit = false;\n  error?: HttpErrorResponse;\n  subscription!: Subscription;\n  isSearchBoxVisible = true;\n  readonly searchTerm = new FormControl();\n  readonly containerlistParams = new BehaviorSubject<string>('');\n  readonly debounceSearch$ = new Subject<string>();\n\n  readonly hostRef: ContactsListContainerComponent = this;\n  readonly newContactAllowed: Observable<boolean> = this.propertiesService.newContact$;\n  readonly pageSize: Observable<number> = this.propertiesService.pageSize$;\n  readonly maxNavPages: Observable<number> = this.propertiesService.maxNavPages$;\n  readonly paginationType: Observable<string> = this.propertiesService.paginationType$;\n\n  readonly isListView: Observable<boolean> = this.router.events.pipe(\n    filter<Event, NavigationEnd>((e: Event): e is NavigationEnd => e instanceof NavigationEnd),\n    map((e: NavigationEnd): string => e.url),\n    startWith(this.router.url),\n    map(() => {\n      const isList = this.navigation.currentView === View.List;\n      if (isList) {\n        this.firstContactEdit = false;\n      }\n\n      return isList;\n    }),\n    shareReplay(),\n  );\n\n  readonly pagination: Observable<PageParams> = combineLatest([this.route.queryParamMap, this.pageSize]).pipe(\n    map(([params, pageSize]) => this.pageParamsFromRoute(params, pageSize)),\n  );\n\n  readonly items: Observable<ContactList | undefined> = this.service.items.pipe(\n    tap((results) => {\n      this.isSearchBoxVisible = !!this.searchTerm.value ? true : results.contacts.length > 0;\n      results.contacts.sort((a: ContactItem, b: ContactItem) =>\n        a.name.toLocaleUpperCase().trim() > b.name.toLocaleUpperCase().trim() ? 1 : -1,\n      );\n    }),\n    catchError((error) => {\n      this.error = error;\n\n      return of(undefined);\n    }),\n  );\n  /**\n   * Observable of currently selected item id\n   */\n  readonly selectedItemId: Observable<ItemId | null> = this.service.currentlySelectedItemId;\n  private readonly listParams: Observable<ListParams> = combineLatest([\n    this.containerlistParams,\n    this.pagination,\n    this.pageSize,\n    this.paginationType,\n  ]).pipe(\n    map(([method, paginationParams, pageSize, paginationType]) => {\n      if (method === LoadMoreMethod.LOAD_MORE && paginationType === LoadMoreMethod.LOAD_MORE) {\n        paginationParams.from++;\n        paginationParams.size = pageSize;\n      }\n\n      return {\n        paginationParams,\n        paginationType,\n        method,\n      };\n    }),\n    map(\n      ({ paginationParams, paginationType, method }): ListParams => ({\n        pagination: {\n          from: paginationParams.from,\n          size: paginationParams.size,\n          query: paginationParams.query,\n        },\n        paginationType,\n        method,\n      }),\n    ),\n  );\n\n  constructor(\n    private readonly service: ContactsService,\n    private readonly navigation: ContactsNavigationService,\n    private readonly router: Router,\n    private readonly route: ActivatedRoute,\n    private readonly propertiesService: ContactManagerPreferencesService,\n  ) {}\n\n  ngOnInit() {\n    this.subscription = this.listParams.subscribe((params) => {\n      return this.service.updateItemList(\n        params.pagination.query,\n        params.pagination.from,\n        params.pagination.size,\n        params.paginationType,\n        params.method,\n      );\n    });\n    this.subscription.add(\n      this.debounceSearch$\n        .pipe(debounceTime(300), distinctUntilChanged())\n        .subscribe((term: string) => this.searchContacts(term)),\n    );\n  }\n\n  /**\n   * Event handler for search box value change\n   *\n   * @param {string} phrase text to search for\n   */\n  onSearchTermChange(phrase: string) {\n    this.debounceSearch$.next(phrase);\n  }\n\n  /**\n   * Event handler for search box clear\n   */\n  clearSearch() {\n    this.debounceSearch$.next('');\n  }\n\n  /**\n   * Queries contacts with given phrase\n   *\n   * @param {string} phrase text to search for\n   */\n  searchContacts(phrase: string) {\n    this.containerlistParams.next('search');\n    this.navigation.list(0, phrase); // TODO: Remove query params when migrating widget\n  }\n\n  /**\n   * Navigates to list page.\n   *\n   * @param {number} page Current page number.\n   */\n  onPageChange(page: number) {\n    this.navigation.list(page);\n  }\n\n  /**\n   * Updat the list parameter as load more.\n   */\n  loadMore() {\n    this.containerlistParams.next('load-more');\n  }\n\n  /**\n   * Routes to selected contact details.\n   *\n   * @param {string} id  Contact ID\n   */\n  select(id: string) {\n    this.navigation.select(id);\n  }\n\n  /**\n   * Routes to new contact.\n   *\n   * @param {number} totalContacts - total number of contacts.\n   */\n  newContact(totalContacts: number) {\n    this.firstContactEdit = !totalContacts;\n    this.navigation.newContact();\n    this.navigation.currentView = View.Select;\n  }\n\n  /**\n   * method to return back to list view.\n   */\n  backToList() {\n    this.navigation.currentView = View.List;\n    this.navigation.list();\n  }\n\n  private pageParamsFromRoute(query: ParamMap, pageSize?: Property): PageParams {\n    const from = query.get('page');\n    this.searchTerm.setValue(query.get('query') || '');\n\n    return {\n      from: (from && Number.parseInt(from, 10)) || 0,\n      size: pageSize ? Number(pageSize) : 5,\n      query: this.searchTerm.value || '',\n    };\n  }\n\n  ngOnDestroy() {\n    this.subscription?.unsubscribe();\n  }\n}\n","<div class=\"card card-body\" data-role=\"loading-label\">\n  <ng-container *ngIf=\"items | async as items; else loadingTemplate\">\n    <div\n      class=\"bb-block bb-block--md\"\n      [ngClass]=\"{\n        'd-none d-lg-block': !(isListView | async)\n      }\"\n    >\n      <div class=\"row\">\n        <ng-container bbContactsTopSectionCustomizable [bbHostRef]=\"hostRef\" [bbTemplateContext]=\"items\"></ng-container>\n      </div>\n    </div>\n    <div *ngIf=\"!(isListView | async)\" class=\"row d-block d-lg-none\">\n      <button bbButton color=\"unstyled\" (click)=\"backToList()\" class=\"bb-text-bold text-primary\">\n        <bb-icon-ui name=\"angle-left\"></bb-icon-ui>\n        <span i18n=\"Back to list view|Span for going back to list view@@contact-manager.span.backToList\">\n          Back to list\n        </span>\n      </button>\n    </div>\n    <div\n      class=\"row bb-block bb-block--md\"\n      *ngIf=\"(items && items.contacts.length > 0) || hostRef.firstContactEdit; else emptyTemplate\"\n    >\n      <ng-container\n        bbContactsListContainerCustomizable\n        [bbHostRef]=\"hostRef\"\n        [bbTemplateContext]=\"items\"\n      ></ng-container>\n      <div\n        class=\"col col-lg-6\"\n        [ngClass]=\"{\n          'd-none d-lg-block': isListView | async\n        }\"\n      >\n        <ng-content></ng-content>\n      </div>\n    </div>\n    <div\n      class=\"row\"\n      [ngClass]=\"{\n        'd-none d-lg-block': !(isListView | async)\n      }\"\n    >\n      <div class=\"col-lg-6\">\n        <ng-container bbContactsLoadMoreCustomizable [bbHostRef]=\"hostRef\" [bbTemplateContext]=\"items\"></ng-container>\n        <ng-template bbContactsLoadMoreCustomizable let-hostRef let-items=\"context\">\n          <bb-pagination-ui\n            *ngIf=\"(hostRef.paginationType | async) !== 'load-more'\"\n            class=\"bb-pagination\"\n            [page]=\"(hostRef.pagination | async)?.from\"\n            [boundaryLinks]=\"false\"\n            [directionLinks]=\"true\"\n            [totalItems]=\"items?.count\"\n            [itemsPerPage]=\"hostRef.pageSize | async\"\n            [maxNavPages]=\"hostRef.maxNavPages | async\"\n            (pageChange)=\"hostRef.onPageChange($event)\"\n          ></bb-pagination-ui>\n          <div\n            class=\"p-5 text-center\"\n            *ngIf=\"(hostRef.paginationType | async) === 'load-more' && items.contacts.length > 0\"\n          >\n            <bb-load-button-ui\n              class=\"bb-block bb-block--md\"\n              color=\"secondary\"\n              data-role=\"contact-load-more\"\n              *ngIf=\"items.count && items.count > items.contacts.length\"\n              (click)=\"hostRef.loadMore()\"\n            >\n              <ng-container\n                i18n=\"Load more button label | Load more button shown down bellow contact list@@contact-manager.load-more.label\"\n              >\n                Load more\n              </ng-container>\n            </bb-load-button-ui>\n          </div>\n        </ng-template>\n      </div>\n    </div>\n  </ng-container>\n\n  <ng-template bbContactsListContainerCustomizable let-hostRef let-items=\"context\">\n    <div\n      class=\"col\"\n      [ngClass]=\"{\n        'd-block': hostRef.isListView | async,\n        'd-lg-block d-none': !(hostRef.isListView | async)\n      }\"\n    >\n      <bb-contacts-list-widget\n        [items]=\"items.contacts\"\n        [selectedItemId]=\"hostRef.selectedItemId | async\"\n        [showAlias]=\"false\"\n        (selectedChange)=\"hostRef.select($event)\"\n      >\n      </bb-contacts-list-widget>\n    </div>\n  </ng-template>\n\n  <ng-template bbContactsTopSectionCustomizable let-hostRef let-items=\"context\">\n    <div class=\"col bb-stack\">\n      <div class=\"bb-stack__item bb-stack__item--fill\">\n        <bb-search-box-ui\n          *ngIf=\"hostRef.isSearchBoxVisible\"\n          class=\"bb-toolbar__item\"\n          data-role=\"contact-manager-search\"\n          placeholder=\"Search\"\n          i18n-placeholder=\"Search box placeholder | Placeholder for search box@@contact-manager.placeholder.search\"\n          aria-label=\"Search\"\n          i18n-aria-label=\"@@contact-manager.placeholder.search\"\n          [showSearch]=\"true\"\n          [showClear]=\"true\"\n          [formControl]=\"hostRef.searchTerm\"\n          (valueChange)=\"hostRef.onSearchTermChange($event)\"\n          (submit)=\"hostRef.searchContacts(hostRef.searchTerm.value)\"\n          (keyup.enter)=\"hostRef.searchContacts(hostRef.searchTerm.value)\"\n          (clear)=\"hostRef.clearSearch()\"\n        ></bb-search-box-ui>\n        <div class=\"sr-only\" aria-live=\"assertive\">\n          <p i18n=\"@@contact-manager.list.results-found\">\n            {items.count || 0, plural, =1 {1 result found} other {{{items.count}} results found}}\n          </p>\n        </div>\n      </div>\n      <div class=\"bb-stack__item align-self-start\">\n        <button\n          bbButton\n          i18n=\"New Contact Button | Button for creating a new contact@@contact-manager.button.newContact\"\n          data-role=\"new-contact-button\"\n          class=\"d-block bb-button-bar__button\"\n          [disabled]=\"!(hostRef.newContactAllowed | async)\"\n          (click)=\"hostRef.newContact(items.contacts.length)\"\n          type=\"button\"\n        >\n          New Contact\n        </button>\n      </div>\n    </div>\n    <ng-template #rt let-result=\"result\" let-term=\"term\">\n      <div class=\"text-truncate\" [title]=\"result\">\n        <ngb-highlight [result]=\"result\" [term]=\"term\"></ngb-highlight>\n      </div>\n    </ng-template>\n  </ng-template>\n\n  <ng-template bbContactsLoadingCustomizable let-hostRef>\n    <div class=\"bb-state-container\">\n      <bb-loading-indicator-ui\n        i18n-text=\"@@contact-manager.loading.label\"\n        text=\"Loading contacts...\"\n        data-role=\"contact-manager-loading\"\n      ></bb-loading-indicator-ui>\n    </div>\n  </ng-template>\n\n  <ng-template #loadingTemplate>\n    <ng-container *ngIf=\"!error; else errorTemplate\" bbContactsLoadingCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n  </ng-template>\n\n  <ng-template bbContactsEmptyStateCustomizable let-hostRef>\n    <div class=\"bb-state-container\">\n      <bb-empty-state-ui\n        i18n-title=\"@@contact-manager.state.noContactsLoaded.title\"\n        title=\"No contacts\"\n        i18n-subtitle=\"@@contact-manager.state.noContactsLoaded.subtitle\"\n        subtitle=\"You don't have any contacts to display yet.<br>Try adding a new contact using the 'New Contact' button\"\n        iconClasses=\"d-flex justify-content-center mb-3\"\n        iconModifier=\"contacts\"\n        iconSize=\"xxl\"\n        data-role=\"contact-manager-empty\"\n      ></bb-empty-state-ui>\n    </div>\n  </ng-template>\n\n  <ng-template #emptyTemplate>\n    <ng-container\n      *ngIf=\"!hostRef.searchTerm.value; else emptySearchTemplate\"\n      bbContactsEmptyStateCustomizable\n      [bbHostRef]=\"hostRef\"\n    ></ng-container>\n  </ng-template>\n\n  <ng-template bbContactsEmptySearchStateCustomizable let-hostRef let-term=\"context\">\n    <div class=\"bb-state-container\">\n      <bb-empty-state-ui\n        i18n-title=\"@@contact-manager.state.empty-search.title\"\n        title=\"No results found\"\n        i18n-subtitle=\"@@contact-manager.state.empty-search.subtitle\"\n        subtitle=\"We can't find what you're looking for. Please try a different criteria.\"\n        iconClasses=\"d-flex justify-content-center mb-3\"\n        iconModifier=\"search\"\n        iconColor=\"primary\"\n        iconSize=\"xxl\"\n        data-role=\"contact-manager-list-search-empty\"\n      ></bb-empty-state-ui>\n    </div>\n  </ng-template>\n\n  <ng-template #emptySearchTemplate>\n    <ng-container\n      bbContactsEmptySearchStateCustomizable\n      [bbHostRef]=\"hostRef\"\n      [bbTemplateContext]=\"searchTerm\"\n    ></ng-container>\n  </ng-template>\n\n  <ng-template bbContactsErrorStateCustomizable let-hostRef let-error=\"context\">\n    <div class=\"bb-state-container\">\n      <bb-common-error-state-ui [attr.data-role]=\"'contact-manager-error'\" [error]=\"error\"></bb-common-error-state-ui>\n    </div>\n  </ng-template>\n\n  <ng-template #errorTemplate>\n    <ng-container bbContactsErrorStateCustomizable [bbHostRef]=\"hostRef\" [bbTemplateContext]=\"error\"></ng-container>\n  </ng-template>\n</div>\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { RoutableWidget, RouterService } from '@backbase/foundation-ang/core';\nimport { Routes } from '@angular/router';\nimport { ContactsNavigationService } from './services/contacts-navigation.service';\n\nimport { ContactsDetailContainerComponent } from './containers/contacts-detail-container/contacts-detail-container.component';\nimport { ContactsFormContainerComponent } from './containers/contacts-form-container/contacts-form-container.component';\n\nimport { CanDeactivateGuard } from './services/can-deactivate-guard.service';\nimport { ContactsService } from './services/contacts.service';\nimport { ContactsTypeListContainerComponent } from './containers/contacts-type-list-container/contacts-type-list-container.component';\nimport { ContactManagerPreferencesService } from './services/contacts-preferences.service';\n\n/**\n * Returns the new instance of contactnavigationservice.\n *\n * @param {RouterService} service router service\n * @returns {ContactsNavigationService} new service instance\n */\nexport function makeNavigationService(service: RouterService) {\n  return new ContactsNavigationService(service);\n}\n\nexport const contactsRoutes: Routes = [\n  {\n    path: '',\n    component: ContactsDetailContainerComponent,\n  },\n  {\n    path: 'select',\n    component: ContactsTypeListContainerComponent,\n  },\n  {\n    path: ':id',\n    component: ContactsDetailContainerComponent,\n  },\n\n  {\n    path: 'edit/:id/:type',\n    canDeactivate: [CanDeactivateGuard],\n    component: ContactsFormContainerComponent,\n  },\n];\n\n@RoutableWidget({\n  routes: contactsRoutes,\n})\n/**\n * A widget for managing contacts.\n *\n * @usageNotes\n *\n * ### Include this widget in your `AppModule`:\n *\n * ```typescript\n * @NgModule({\n *   imports: [\n *     ContactManagerWidgetModule,\n *   ],\n *  providers:[{\n *     provide: ContactsNavigationService,\n *     useFactory: makeNavigationService,\n *     deps: [RouterService],\n *   }],\n *   ...\n * })\n * export class AppModule {}\n * ```\n *\n * ### Include this widget (standalone model)\n *\n * ```typescript\n * export const environment: Environment = {\n *   ...\n *   bootstrap: {\n *     pageModel: {\n *       name: 'root',\n *       properties: {},\n *       children: [\n *         {\n *           name: 'bb-contact-manager-ang',\n *           properties: {\n *             classId: 'ContactManagerWidgetModule',\n *             \"notificationDismissTime\": 0,\n *             \"createContactIBAN\": true,\n *             \"createContactPhone\": true,\n *             \"createContactAccount\": true,\n *             \"createContactEmail\": true\n *           },\n *         },\n *       ],\n *     },\n *   },\n * };\n * ```\n *\n * ### Routable Widget\n *\n * Using the `@CopyRoutes` for component\n *\n * ```typescript\n * @CopyRoutes(ContactManagerWidgetComponent)\n * export class ExtendedContactManagerWidgetComponent\n * ```\n * @ngModule ContactManagerWidgetModule\n */\n@Component({\n  selector: 'bb-contacts, bb-contact-manager-widget',\n  template: `\n    <bb-contacts-list-container>\n      <bb-router-outlet></bb-router-outlet>\n    </bb-contacts-list-container>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [\n    RouterService,\n    {\n      provide: ContactsNavigationService,\n      useFactory: makeNavigationService,\n      deps: [RouterService],\n    },\n    ContactsService,\n    ContactManagerPreferencesService,\n  ],\n})\nexport class ContactManagerWidgetComponent {\n  /**\n   * property to enable the creation of new contacts\n   */\n  @Input('newContact') set newContact(value: boolean) {\n    this.preferencesService.setNewContact(value);\n  }\n  /**\n   * Number of contacts per page\n   */\n  @Input('pageSize') set pageSize(value: number) {\n    this.preferencesService.setPageSize(value);\n  }\n  /**\n   * Max. number of navigation pages\n   */\n  @Input('maxNavPages') set maxNavPages(value: number) {\n    this.preferencesService.setMaxNavPages(value);\n  }\n  /**\n   * Pagination type (pagination, load-more)\n   */\n  @Input('paginationType') set paginationType(value: string) {\n    this.preferencesService.setPaginationType(value);\n  }\n  /**\n   * Milliseconds to dismiss any notification message\n   */\n  @Input('notificationDismissTime') set notificationDismissTime(value: number) {\n    this.preferencesService.setNotificationDismissTime(value);\n  }\n  /**\n   * property from user if the contact creation through email is allowed\n   */\n  @Input('createContactEmail') set createContactEmail(value: boolean) {\n    this.preferencesService.setCreateContactEmail(value);\n  }\n  /**\n   * property from user if the contact creation through IBAN is allowed\n   */\n  @Input('createContactIBAN') set createContactIBAN(value: boolean) {\n    this.preferencesService.setCreateContactIBAN(value);\n  }\n  /**\n   * property from user if the contact creation through Account Number is allowed\n   */\n  @Input('createContactAccount') set createContactAccount(value: boolean) {\n    this.preferencesService.setCreateContactAccount(value);\n  }\n  /**\n   * property from user if the contact creation through Phone Number is allowed\n   */\n  @Input('createContactPhone') set createContactPhone(value: boolean) {\n    this.preferencesService.setCreateContactPhone(value);\n  }\n\n  constructor(private readonly preferencesService: ContactManagerPreferencesService) {}\n}\n","import { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\nimport { ContactManagerWidgetComponent } from './contact-manager.component';\n\nimport { ContactsListContainerComponent } from './containers/contacts-list-container/contacts-list-container.component';\nimport {\n  ContactsEmptySearchStateCustomizableDirective,\n  ContactsEmptyStateCustomizableDirective,\n  ContactsErrorStateCustomizableDirective,\n  ContactsListContainerCustomizableDirective,\n  ContactsLoadingCustomizableDirective,\n  ContactsLoadMoreCustomizableDirective,\n  ContactsTopSectionCustomizableDirective,\n} from './containers/contacts-list-container/contacts-list-container.directive';\nimport { ContactsListWidgetComponent } from './components/contacts-list/contact-list.component';\nimport { ContactsListItemComponent } from './components/contacts-list/list-item/contact-list-item.component';\n\nimport {\n  ContactsFormComponent,\n  ContactsFormCustomizableDirective,\n} from './components/contacts-form/contacts-form.component';\nimport { ContactsFormContainerComponent } from './containers/contacts-form-container/contacts-form-container.component';\n\nimport {\n  ContactsDetailComponent,\n  ContactsDetailCustomizableDirective,\n} from './components/contacts-detail/contacts-detail.component';\nimport { ContactsDetailContainerComponent } from './containers/contacts-detail-container/contacts-detail-container.component';\nimport { CanDeactivateGuard } from './services/can-deactivate-guard.service';\nimport { ContactsService } from './services/contacts.service';\n\nimport { BackbaseCoreModule } from '@backbase/foundation-ang/core';\nimport { RouterModule } from '@angular/router';\n\nimport {\n  ConfirmActionDialogModule,\n  IbanValidatorModule,\n  NoWhiteSpaceModule,\n  EmailDomainModule,\n} from '@backbase/contact-common-ang';\n\nimport { NgbDropdownModule, NgbTypeaheadModule } from '@ng-bootstrap/ng-bootstrap';\n\nimport { ContactConfigProviders } from './config.providers';\nimport { ContactSelectAccountTypeComponent } from './components/contact-select-account-type/contact-select-account-type.component';\nimport { ContactsTypeListContainerComponent } from './containers/contacts-type-list-container/contacts-type-list-container.component';\nimport { ContactsCreateSuccessNotificationCustomizableDirective } from './directives/contacts-create-success-notification-customizable.directive';\nimport { ContactsCreateErrorNotificationCustomizableDirective } from './directives/contacts-create-error-notification-customizable.directive';\nimport { ContactsDeleteConfirmationCustomizableDirective } from './directives/contacts-delete-confirmation-customizable.directive';\nimport { ContactsDeleteErrorNotificationCustomizableDirective } from './directives/contacts-delete-error-notification-customizable.directive';\nimport { ContactsDeleteSuccessNotificationCustomizableDirective } from './directives/contacts-delete-success-notification-customizable.directive';\nimport { ContactsEditDiscardConfirmationCustomizableDirective } from './directives/contacts-edit-discard-confirmation-customizable.directive';\nimport { ContactsEditErrorNotificationCustomizableDirective } from './directives/contacts-edit-error-notification-customizable.directive';\nimport { ContactsEditSuccessNotificationCustomizableDirective } from './directives/contacts-edit-success-notification-customizable.directive';\nimport { AvatarModule } from '@backbase/ui-ang/avatar';\nimport { BbIbanPipeModule } from '@backbase/ui-ang/iban-pipe';\nimport { ButtonModule } from '@backbase/ui-ang/button';\nimport { DropdownMenuModule } from '@backbase/ui-ang/dropdown-menu';\nimport { EllipsisModule } from '@backbase/ui-ang/ellipsis';\nimport { EmptyStateModule } from '@backbase/ui-ang/empty-state';\nimport { ErrorCommonStateModule } from '@backbase/ui-ang/common-error-state';\nimport { HeaderModule } from '@backbase/ui-ang/header';\nimport { IconModule } from '@backbase/ui-ang/icon';\nimport { InputTextModule } from '@backbase/ui-ang/input-text';\nimport { InputValidationMessageModule } from '@backbase/ui-ang/input-validation-message';\nimport { LoadingIndicatorModule } from '@backbase/ui-ang/loading-indicator';\nimport { NotificationModule } from '@backbase/ui-ang/notification';\nimport { PaginatorModule } from '@backbase/ui-ang/pagination';\nimport { SearchBoxModule } from '@backbase/ui-ang/search-box';\nimport { InputEmailModule } from '@backbase/ui-ang/input-email';\nimport { LoadButtonModule } from '@backbase/ui-ang/load-button';\n\nconst uiModules = [\n  ButtonModule,\n  IconModule,\n  NotificationModule,\n  FormsModule,\n  InputTextModule,\n  InputValidationMessageModule,\n  HeaderModule,\n  EmptyStateModule,\n  AvatarModule,\n  PaginatorModule,\n  DropdownMenuModule,\n  EllipsisModule,\n  LoadingIndicatorModule,\n  ErrorCommonStateModule,\n  NgbDropdownModule,\n  NgbTypeaheadModule,\n  ReactiveFormsModule,\n  BbIbanPipeModule,\n  SearchBoxModule,\n  InputEmailModule,\n  LoadButtonModule,\n];\n\nconst dependentModules = [IbanValidatorModule, NoWhiteSpaceModule, ConfirmActionDialogModule, EmailDomainModule];\n\nconst components = [\n  ContactManagerWidgetComponent,\n  ContactsListWidgetComponent,\n  ContactsListItemComponent,\n  ContactsListContainerComponent,\n  ContactsDetailComponent,\n  ContactsDetailContainerComponent,\n  ContactsFormComponent,\n  ContactsFormContainerComponent,\n  ContactSelectAccountTypeComponent,\n  ContactsTypeListContainerComponent,\n];\n\nconst customizationDirectives = [\n  ContactsListContainerCustomizableDirective,\n  ContactsTopSectionCustomizableDirective,\n  ContactsDetailCustomizableDirective,\n  ContactsFormCustomizableDirective,\n  ContactsLoadMoreCustomizableDirective,\n  ContactsLoadingCustomizableDirective,\n  ContactsEmptyStateCustomizableDirective,\n  ContactsEmptySearchStateCustomizableDirective,\n  ContactsErrorStateCustomizableDirective,\n\n  ContactsCreateErrorNotificationCustomizableDirective,\n  ContactsCreateSuccessNotificationCustomizableDirective,\n  ContactsDeleteConfirmationCustomizableDirective,\n  ContactsDeleteErrorNotificationCustomizableDirective,\n  ContactsDeleteSuccessNotificationCustomizableDirective,\n  ContactsEditDiscardConfirmationCustomizableDirective,\n  ContactsEditErrorNotificationCustomizableDirective,\n  ContactsEditSuccessNotificationCustomizableDirective,\n];\n/**\n * Exports the Widgets and UI components for managing contacts.\n *\n * The following widgets are included in this module:\n *  - `ContactManagerWidgetComponent`\n *\n * @see ContactManagerWidgetComponent\n * @usageNotes\n *\n * ### Include the exported widgets in your `AppModule`:\n *\n * ```typescript\n * @NgModule({\n *   imports: [\n *     ContactManagerWidgetModule,\n *   ],\n *  providers:[{\n *   provide: CONTACT_MANAGER_BASE_PATH,\n *   useFactory: getBasePath('contact-manager'),\n *   deps: [PAGE_CONFIG], },\n * {\n *   provide: ACCESS_CONTROL_BASE_PATH,\n *   useFactory: getBasePath('access-control'),\n *   deps: [PAGE_CONFIG], }]\n *   ...\n * })\n * export class AppModule {}\n * ```\n */\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ...dependentModules,\n    ...uiModules,\n    BackbaseCoreModule.withConfig({\n      classMap: { ContactManagerWidgetComponent },\n    }),\n  ],\n  declarations: [...components, ...customizationDirectives],\n  providers: [CanDeactivateGuard, ContactsService, ...ContactConfigProviders],\n  exports: [...components, ...customizationDirectives, ...dependentModules],\n  entryComponents: [\n    ContactsDetailContainerComponent,\n    ContactsListContainerComponent,\n    ContactsFormContainerComponent,\n    ContactsTypeListContainerComponent,\n  ],\n})\nexport class ContactManagerWidgetModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA0DY;AAAZ,WAAY,iBAAiB;IAC3B,kCAAa,CAAA;IACb,oCAAe,CAAA;IACf,0CAAqB,CAAA;IACrB,8CAAyB,CAAA;AAC3B,CAAC,EALW,iBAAiB,KAAjB,iBAAiB,QAK5B;AAED,IAAY,mBAGX;AAHD,WAAY,mBAAmB;IAC7B,oCAAa,CAAA;IACb,6CAAsB,CAAA;AACxB,CAAC,EAHW,mBAAmB,KAAnB,mBAAmB;;AClD/B,IAAY,IAKX;AALD,WAAY,IAAI;IACd,qBAAa,CAAA;IACb,yBAAiB,CAAA;IACjB,qBAAa,CAAA;IACb,yBAAiB,CAAA;AACnB,CAAC,EALW,IAAI,KAAJ,IAAI,QAKf;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA+Ba,yBAAyB;;;;IAapC,YAA6B,aAA4B;QAA5B,kBAAa,GAAb,aAAa,CAAe;QAZjD,iBAAY,GAAG,IAAI,CAAC,IAAI,CAAC;KAY4B;IAV7D,IAAI,WAAW;QACb,OAAO,IAAI,CAAC,YAAY,CAAC;KAC1B;IAED,IAAI,WAAW,CAAC,IAAU;QACxB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;KAC1B;;;;;;;;;IAaD,IAAI,CAAC,IAAa,EAAE,KAAc,EAAE,sBAAiD,OAAO;QAC1F,MAAM,UAAU,GAAqB;YACnC,IAAI,EAAE,IAAI,KAAK,SAAS,IAAI,IAAI,GAAG,CAAC,CAAC,GAAG,IAAI,GAAG,SAAS;SACzD,CAAC;QACF,IAAI,KAAK,IAAI,KAAK,KAAK,EAAE;YAAE,UAAU,CAAC,KAAK,GAAG,KAAK,CAAC;QAEpD,OAAO,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,EAAE;YACzC,WAAW,oBAAO,UAAU,CAAE;YAC9B,mBAAmB,EAAE,mBAAmB;SACzC,CAAC,CAAC;KACJ;;;;;;;IAOD,MAAM,CAAC,EAAU;QACf,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC;QAE/B,OAAO,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,mBAAmB,EAAE,OAAO,EAAE,CAAC,CAAC;KAC5E;;;;;;;;IAQD,IAAI,CAAC,EAAU,EAAE,OAAe,iBAAiB,CAAC,IAAI;QACpD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC;QAE7B,OAAO,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,MAAM,EAAE,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,mBAAmB,EAAE,OAAO,EAAE,CAAC,CAAC;KAC1F;;;;;;IAMD,UAAU;QACR,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC;QAE/B,OAAO,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,EAAE,EAAE,mBAAmB,EAAE,OAAO,EAAE,CAAC,CAAC;KAClF;;;;;;;IAOD,cAAc,CAAC,IAAuB;QACpC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC;QAE7B,OAAO,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,IAAI,CAAC,EAAE,EAAE,mBAAmB,EAAE,OAAO,EAAE,CAAC,CAAC;KACzF;;0IA5EU,yBAAyB;8IAAzB,yBAAyB;4FAAzB,yBAAyB;kBADrC,UAAU;;;ACRX,IAAY,YAGX;AAHD,WAAY,YAAY;IACtB,mDAAU,CAAA;IACV,qDAAW,CAAA;AACb,CAAC,EAHW,YAAY,KAAZ,YAAY,QAGvB;AAID,MAAM,iBAAiB,GAAe;IACpC,UAAU,EAAE;QACV,IAAI,EAAE,CAAC;QACP,IAAI,EAAE,CAAC;QACP,KAAK,EAAE,EAAE;KACV;IACD,cAAc,EAAE,cAAc,CAAC,UAAU;CAC1C,CAAC;AAEF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA+Ba,eAAe;IAC1B,YAAmB,WAAgC;QAAhC,gBAAW,GAAX,WAAW,CAAqB;;QAGlC,iBAAY,GAAG,IAAI,OAAO,EAAkB,CAAC;QAE7C,eAAU,GAAG,IAAI,eAAe,CAAC,iBAAiB,CAAC,CAAC;QAC5D,mBAAc,GAAG,IAAI,aAAa,CAAgB,CAAC,CAAC,CAAC;QACtD,uBAAkB,GAAG,IAAI,eAAe,CAAqB,SAAS,CAAC,CAAC;QAE/D,aAAQ,GAAG,KAAK,CAC/B,IAAI,CAAC,UAAU,CAAC,IAAI,CAClB,GAAG,CAAC,CAAC,EAAE,UAAU,EAAE,cAAc,EAAE,MAAM,EAAE,MAAM;YAC/C,MAAM,EAAE,cAAc,CAAC,IAAI;YAC3B,MAAM,EAAE,UAAU;YAClB,cAAc;YACd,MAAM,EAAE,MAAM;SACf,CAAC,CAAC,CACJ,EACD,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,MAAM,EAAE,cAAc,CAAC,OAAO,EAAE,CAAC,CAAC,CAClE,CAAC;;QAGO,UAAK,GAA4B,IAAI,CAAC,QAAQ,CAAC,IAAI,CAC1D,IAAI,CAAC,CAAC,KAAK,EAAE,MAAM,sCAAW,KAAK,GAAK,MAAM,EAAG,CAAC,EAClD,GAAG,CAAC,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,cAAc,EAAE,MAAM,EAAO;YAClD,MAAM,iBAAiB,GAAG,MAAM,KAAK,cAAc,CAAC,OAAO,IAAI,cAAc,KAAK,cAAc,CAAC,SAAS,CAAC;YAE3G,OAAO;gBACL,MAAM;gBACN,cAAc;gBACd,MAAM,kCACD,MAAM,IACL,iBAAiB,GAAG,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,MAAM,CAAC,IAAI,GAAG,CAAC,IAAI,MAAM,CAAC,IAAI,EAAE,GAAG,EAAE,EAChF;gBACD,MAAM;aACP,CAAC;SACH,CAAC,EACF,SAAS,CAAC,CAAC,EAA4B;gBAA5B,EAAE,MAAM,EAAE,MAAM,OAAY,EAAP,KAAK,cAA1B,oBAA4B,CAAF;YACnC,OAAA,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE,UAAU,CAAC,CAAC,IAAI,CACtE,GAAG,CAAC,YAAY,CAAC,EACjB,GAAG,CAAC,CAAC,QAAQ,kEAAW,QAAQ,KAAE,MAAM,KAAK,KAAK,KAAE,MAAM,IAAG,CAAC,CAC/D,CAAA;SAAA,CACF,EACD,IAAI,CAAC,CAAC,GAAQ,EAAE,IAAS;YACvB,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,cAAc,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC;YACvD,IAAI,QAAQ,CAAC;YACb,IACE,IAAI,CAAC,MAAM,CAAC,IAAI,GAAG,CAAC;gBACpB,GAAG,CAAC,MAAM,CAAC,KAAK,KAAK,IAAI,CAAC,MAAM,CAAC,KAAK;gBACtC,MAAM,KAAK,cAAc,CAAC,OAAO;gBACjC,cAAc,KAAK,cAAc,CAAC,SAAS;gBAC3C,MAAM,KAAK,QAAQ,EACnB;gBACA,QAAQ,GAAG,CAAC,GAAG,GAAG,CAAC,QAAQ,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC;aAChD;iBAAM;gBACL,QAAQ,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC;aAC/B;YAED,OAAO;gBACL,KAAK;gBACL,QAAQ;gBACR,MAAM,EAAE,IAAI,CAAC,MAAM;aACpB,CAAC;SACH,CAAC,EACF,WAAW,EAAE,CACd,CAAC;QAEO,4BAAuB,GAA8B,aAAa,CAAC;YAC1E,IAAI,CAAC,cAAc;YACnB,IAAI,CAAC,kBAAkB;YACvB,IAAI,CAAC,KAAK;SACX,CAAC,CAAC,IAAI,CACL,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,UAAU,EAAE,KAAK,CAAC;;YAC1B,OAAO,MAAA,MAAA,EAAE,aAAF,EAAE,cAAF,EAAE,GAAI,UAAU,mCAAI,MAAA,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,0CAAE,EAAE,mCAAI,IAAI,CAAC;SAC1D,CAAC,CACH,CAAC;QAEO,SAAI,GAAwC,aAAa,CAAC;YACjE,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,oBAAoB,EAAE,CAAC;YACzD,IAAI,CAAC,KAAK;SACX,CAAC,CAAC,IAAI,CACL,SAAS,CAAC,CAAC,CAAC,EAAE,EAAE,KAAK,CAAC;;YACpB,IAAI,EAAE,KAAK,GAAG,EAAE;gBACd,OAAO,EAAE,CAAC,SAAS,CAAC,CAAC;aACtB;YAED,IAAI,OAAO,GAA4B,IAAI,CAAC,eAAe,CACzD,MAAA,EAAE,aAAF,EAAE,cAAF,EAAE,GAAI,IAAI,CAAC,kBAAkB,CAAC,KAAK,mCAAI,SAAS,EAChD,KAAK,CACN,CAAC;YAEF,MAAM,YAAY,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE,KAAK,CAAC,CAAC;YAEpF,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE;gBAC7C,MAAM,SAAS,GAAG,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC;gBAEhD,OAAO,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,EAAE,SAAS,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;aAC5F;YAED,IAAI,OAAO,EAAE;gBACX,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;aAC1C;YAED,OAAO,EAAE,CAAC,OAAO,IAAI,YAAY,CAAC,CAAC;SACpC,CAAC,EACF,WAAW,EAAE,CACd,CAAC;QAEO,kBAAa,GAAG,IAAI,OAAO,EAAE,CAAC;QAE9B,gBAAW,GAAG,IAAI,OAAO,EAAqB,CAAC;KA9GD;;;;;;IAqHvD,WAAW,CAAC,GAA8B;QACxC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,KAAK,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;KACrD;IAEO,YAAY,CAAC,QAAmC;QACtD,OAAO,QAAQ,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,SAAS,CAAC;KACrE;;;;;;;;IASD,eAAe,CAAC,EAAsB,EAAE,KAAkB;QACxD,IAAI,EAAE,KAAK,IAAI,KAAK,CAAC,QAAQ,IAAI,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC;YAAE,OAAO;QAEhE,IAAI,IAA6B,CAAC;QAClC,IAAI,EAAE,KAAK,GAAG,EAAE;YACd,OAAO,SAAS,CAAC;SAClB;aAAM;YACL,IAAI,GAAG,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAc,KAAK,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;SAC7D;QAED,OAAO,IAAI,CAAC;KACb;IAEO,YAAY,CAAC,MAAW;QAC9B,OAAO;YACL,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC;YAC7B,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC;YAC7B,KAAK,EAAE,MAAM,CAAC,KAAK,IAAI,SAAS;SACjC,CAAC;KACH;;;;;;;;;;IAWD,cAAc,CAAC,KAAc,EAAE,IAAa,EAAE,IAAa,EAAE,cAAuB,EAAE,MAAe;QACnG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;YACnB,UAAU,EAAE;gBACV,KAAK,EAAE,KAAK,IAAI,EAAE;gBAClB,IAAI,EAAE,IAAI,IAAI,CAAC;gBACf,IAAI,EAAE,IAAI,IAAI,CAAC;aAChB;YACD,cAAc,EAAE,cAAc,IAAI,cAAc,CAAC,UAAU;YAC3D,MAAM;SACP,CAAC,CAAC;KACJ;;;;;;IAOD,cAAc;QACZ,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CACnB,GAAG,CAAC,CAAC,WAAW,MAAM,WAAW,GAAG,IAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC,GAAG,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAClG,CAAC;KACH;;;;;;;IAQD,IAAI,CAAC,IAAiB;QACpB,IAAI,KAAK,CAAC,IAAI,CAAC,EAAE;YACf,MAAM,QAAQ,GAAQ,IAAI,CAAC;YAE3B,OAAO,IAAI,CAAC,WAAW;iBACpB,YAAY,CAAC,EAAE,uBAAuB,EAAE,QAAQ,EAAE,EAAE,UAAU,CAAC;iBAC/D,IAAI,CAAC,GAAG,CAAC,CAAC,GAAqB,KAAK,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;SAChE;aAAM;YACL,OAAO,IAAI,CAAC,WAAW;iBACpB,UAAU,CAAC,EAAE,SAAS,EAAE,IAAI,CAAC,EAAE,EAAE,qBAAqB,EAAE,IAAI,EAAE,EAAE,UAAU,CAAC;iBAC3E,IAAI,CAAC,GAAG,CAAC,CAAC,GAA8C,KAAK,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;SAClG;KACF;;;;;;;IAQD,WAAW,CAAC,GAAqB;QAC/B,IAAI,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,IAAI,CAAC,EAAE,EAAE;YAC3B,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;YAEzB,OAAO,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;SACpB;aAAM;;YAEL,OAAO,SAAS,CAAC;SAClB;KACF;;;;;;;;IASD,WAAW,CAAC,GAA8C,EAAE,EAAU;QACpE,IAAI,GAAG,CAAC,IAAI,EAAE;YACZ,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;YAEzB,OAAO,EAAE,CAAC;SACX;aAAM;;YAEL,OAAO,SAAS,CAAC;SAClB;KACF;;;;;;;IAQD,MAAM,CAAC,SAAiB;QACtB,OAAO,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,EAAE,SAAS,EAAE,CAAC,CAAC,SAAS,CAC5D;YACE,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC;YAC1B,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;SAC1B,EACD,CAAC,KAAK,KAAK,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CACxC,CAAC;KACH;;;;;;;IAQD,gBAAgB,CAAC,IAAiB;QAChC,IAAI,IAAI,EAAE;YACR,QACE,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CACrC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,KAAK,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC,QAAQ,CAAoB,GAAG,CAAC,IAAI,KAAK,CAC7F,IAAI,EAAE,EAAE,CAAC,CAAC,IAAI,iBAAiB,CAAC,IAAI,EACrC;SACH;QAED,OAAO,iBAAiB,CAAC,IAAI,CAAC;KAC/B;;gIAjRU,eAAe;oIAAf,eAAe;4FAAf,eAAe;kBAD3B,UAAU;;AAqRX;;;;;;AAMA,SAAS,KAAK,CAAC,IAAiB;IAC9B,OAAO,IAAI,CAAC,EAAE,KAAK,SAAS,IAAI,IAAI,CAAC,EAAE,KAAK,EAAE,CAAC;AACjD,CAAC;AAED;;;;;;AAMA,SAAS,YAAY,CAAC,QAAgC;IACpD,IAAI,QAAQ,CAAC,IAAI,KAAK,IAAI,EAAE;QAC1B,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;KAC1C;IAED,MAAM,OAAO,GAAG,QAAQ,CAAC,OAAO,CAAC;IACjC,MAAM,UAAU,GAAG,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;IAEhD,OAAO;QACL,KAAK,EAAE,UAAU,GAAG,CAAC,UAAU,GAAG,IAAI;QACtC,QAAQ,EAAE,QAAQ,CAAC,IAAI;KACxB,CAAC;AACJ;;ACnYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAmCa,gCAAgC;IAsJ3C,YAAyC,SAAoB;;QAApB,cAAS,GAAT,SAAS,CAAW;QArJ5C,uBAAkB,GAAG,IAAI,eAAe,CAAsB,SAAS,CAAC,CAAC;QACzE,qBAAgB,GAAG,IAAI,eAAe,CAAqB,SAAS,CAAC,CAAC;QACtE,wBAAmB,GAAG,IAAI,eAAe,CAAqB,SAAS,CAAC,CAAC;QACzE,2BAAsB,GAAG,IAAI,eAAe,CAAqB,SAAS,CAAC,CAAC;QAC5E,+BAA0B,GAAG,IAAI,eAAe,CAAsB,SAAS,CAAC,CAAC;QACjF,8BAAyB,GAAG,IAAI,eAAe,CAAsB,SAAS,CAAC,CAAC;QAChF,iCAA4B,GAAG,IAAI,eAAe,CAAsB,SAAS,CAAC,CAAC;QACnF,+BAA0B,GAAG,IAAI,eAAe,CAAsB,SAAS,CAAC,CAAC;QACjF,oCAA+B,GAAG,IAAI,eAAe,CAAqB,SAAS,CAAC,CAAC;QAErF,wBAAmB,GAAG,MAAA,IAAI,CAAC,SAAS,0CAAE,QAAQ,CAAU,YAAY,EAAE,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC;QAE3F,sBAAiB,GAAG,MAAA,IAAI,CAAC,SAAS,0CAAE,QAAQ,CAAS,UAAU,EAAE,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC;QAEtF,yBAAoB,GAAG,MAAA,IAAI,CAAC,SAAS,0CAAE,QAAQ,CAAS,aAAa,EAAE,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC;QAE5F,4BAAuB,GAAG,MAAA,IAAI,CAAC,SAAS,0CAAE,QAAQ,CAAS,gBAAgB,CAAC,CAAC;QAE7E,gCAA2B,GAAG,MAAA,IAAI,CAAC,SAAS,0CACzD,QAAQ,CAAU,oBAAoB,EACvC,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC;QAEP,+BAA0B,GAAG,MAAA,IAAI,CAAC,SAAS,0CACxD,QAAQ,CAAU,mBAAmB,EACtC,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC;QAEP,kCAA6B,GAAG,MAAA,IAAI,CAAC,SAAS,0CAC3D,QAAQ,CAAU,sBAAsB,EACzC,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC;QAEP,gCAA2B,GAAG,MAAA,IAAI,CAAC,SAAS,0CACzD,QAAQ,CAAU,oBAAoB,EACvC,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC;QAEP,qCAAgC,GAAG,MAAA,IAAI,CAAC,SAAS,0CAC9D,QAAQ,CAAS,yBAAyB,EAC3C,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC;QAEf,gBAAW,GAAG,IAAI,CAAC,WAAW,CAAU,IAAI,CAAC,kBAAkB,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAC;QAE3F,cAAS,GAAG,IAAI,CAAC,WAAW,CAAS,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAEpF,iBAAY,GAAG,IAAI,CAAC,WAAW,CAAS,IAAI,CAAC,mBAAmB,EAAE,IAAI,CAAC,oBAAoB,CAAC,CAAC;QAE7F,oBAAe,GAAG,IAAI,CAAC,WAAW,CAAS,IAAI,CAAC,sBAAsB,EAAE,IAAI,CAAC,uBAAuB,CAAC,CAAC;QAEtG,wBAAmB,GAAG,IAAI,CAAC,WAAW,CAC7C,IAAI,CAAC,0BAA0B,EAC/B,IAAI,CAAC,2BAA2B,CACjC,CAAC;QAEO,uBAAkB,GAAG,IAAI,CAAC,WAAW,CAC5C,IAAI,CAAC,yBAAyB,EAC9B,IAAI,CAAC,0BAA0B,CAChC,CAAC;QAEO,0BAAqB,GAAG,IAAI,CAAC,WAAW,CAC/C,IAAI,CAAC,4BAA4B,EACjC,IAAI,CAAC,6BAA6B,CACnC,CAAC;QAEO,wBAAmB,GAAG,IAAI,CAAC,WAAW,CAC7C,IAAI,CAAC,0BAA0B,EAC/B,IAAI,CAAC,2BAA2B,CACjC,CAAC;QAEO,6BAAwB,GAAG,IAAI,CAAC,WAAW,CAClD,IAAI,CAAC,+BAA+B,EACpC,IAAI,CAAC,gCAAgC,CACtC,CAAC;KAgF+D;IA9EzD,WAAW,CAAI,MAAiC,EAAE,SAA8B;QACtF,OAAO,aAAa,CAAC,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC,CAAC,IAAI,CAC5C,GAAG,CAAC,CAAC,CAAC,KAAK,EAAE,OAAO,CAAC,MAAM,KAAK,KAAK,SAAS,GAAG,OAAO,GAAG,KAAK,CAAM,CAAC,CACxE,CAAC;KACH;;;;;;IAMD,aAAa,CAAC,KAAc;QAC1B,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KACrC;;;;;;IAMD,WAAW,CAAC,KAAa;QACvB,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KACnC;;;;;;IAMD,cAAc,CAAC,KAAa;QAC1B,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KACtC;;;;;;IAMD,iBAAiB,CAAC,KAAa;QAC7B,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KACzC;;;;;;IAMD,0BAA0B,CAAC,KAAa;QACtC,IAAI,CAAC,+BAA+B,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KAClD;;;;;;IAMD,qBAAqB,CAAC,KAAc;QAClC,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KAC7C;;;;;;IAMD,oBAAoB,CAAC,KAAc;QACjC,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KAC5C;;;;;;IAMD,uBAAuB,CAAC,KAAc;QACpC,IAAI,CAAC,4BAA4B,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KAC/C;;;;;;IAMD,qBAAqB,CAAC,KAAc;QAClC,IAAI,CAAC,0BAA0B,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KAC7C;;iJApJU,gCAAgC;qJAAhC,gCAAgC;4FAAhC,gCAAgC;kBAD5C,UAAU;;0BAuJI,QAAQ;;;AC5LvB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA+Ca,+CAAgD,SAAQ,UAGpE;;gKAHY,+CAA+C;oJAA/C,+CAA+C;4FAA/C,+CAA+C;kBAH3D,SAAS;mBAAC;oBACT,QAAQ,EAAE,4CAA4C;iBACvD;;;ACpBD;;;;;;;;;;;;;;;;;;;;;;MA2Ba,uBAAuB;IA0BlC,YAAmB,OAAwB;QAAxB,YAAO,GAAP,OAAO,CAAiB;QAzBlC,YAAO,GAA4B,IAAI,CAAC;;;;QAQxC,eAAU,GAAG,IAAI,CAAC;;;;QASjB,qBAAgB,GAAG,IAAI,YAAY,EAAsB,CAAC;;;;QAI1D,uBAAkB,GAAG,IAAI,YAAY,EAAU,CAAC;QAE1D,0BAAqB,GAAG,KAAK,CAAC;KAEiB;;;;IAK/C,QAAQ;QACN,IAAI,IAAI,CAAC,IAAI,KAAK,SAAS,EAAE;YAC3B,MAAM,IAAI,KAAK,CAAC,4DAA4D,CAAC,CAAC;SAC/E;KACF;;;;;;IAOD,IAAI,CAAC,EAAU;QACb,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;KACzD;;;;IAKD,eAAe;QACb,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC;KACnC;;;;IAKD,eAAe;QACb,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAC3C,IAAI,CAAC,qBAAqB,GAAG,KAAK,CAAC;KACpC;;;;IAKD,cAAc;QACZ,IAAI,CAAC,qBAAqB,GAAG,KAAK,CAAC;KACpC;;wIAlEU,uBAAuB;4HAAvB,uBAAuB,yNCzDpC,iiJAmGA,ypBD6Ia,mCAAmC;4FAvLnC,uBAAuB;kBALnC,SAAS;mBAAC;oBACT,QAAQ,EAAE,oBAAoB;oBAC9B,WAAW,EAAE,kCAAkC;oBAC/C,eAAe,EAAE,uBAAuB,CAAC,MAAM;iBAChD;mGAMU,IAAI;sBAAZ,KAAK;gBAIG,UAAU;sBAAlB,KAAK;gBAKN,IAAI;sBADH,KAAK;gBAKI,gBAAgB;sBAAzB,MAAM;gBAIG,kBAAkB;sBAA3B,MAAM;;AA+CT;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAkHa,mCAAoC,SAAQ,UAAuD;;oJAAnG,mCAAmC;wIAAnC,mCAAmC;4FAAnC,mCAAmC;kBAH/C,SAAS;mBAAC;oBACT,QAAQ,EAAE,gCAAgC;iBAC3C;;;AE3OD;;;;;;;;;;;;;;;;;;MAqBa,sDAAuD,SAAQ,UAG3E;;uKAHY,sDAAsD;2JAAtD,sDAAsD;4FAAtD,sDAAsD;kBAHlE,SAAS;mBAAC;oBACT,QAAQ,EAAE,mDAAmD;iBAC9D;;;ACpBD;;;;;;;;;;;;;;;;;;MAqBa,oDAAqD,SAAQ,UAGzE;;qKAHY,oDAAoD;yJAApD,oDAAoD;4FAApD,oDAAoD;kBAHhE,SAAS;mBAAC;oBACT,QAAQ,EAAE,iDAAiD;iBAC5D;;;ACbD;;;;;;;;;;;;;;;;;;;;;;;MA6Ba,gCAAgC;IAa3C,YACmB,OAAwB,EACxB,KAAqB,EACrB,UAAqC,EACrC,mBAAwC,EACxC,iBAAmD;QAJnD,YAAO,GAAP,OAAO,CAAiB;QACxB,UAAK,GAAL,KAAK,CAAgB;QACrB,eAAU,GAAV,UAAU,CAA2B;QACrC,wBAAmB,GAAnB,mBAAmB,CAAqB;QACxC,sBAAiB,GAAjB,iBAAiB,CAAkC;QAjB7D,YAAO,GAAG,IAAI,CAAC;QACf,WAAM,GAA8B,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,MAAgB,KAAK,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAE1G,SAAI,GAAwC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;QAC9D,yBAAoB,GAAuB,IAAI,CAAC,iBAAiB,CAAC,wBAAwB,CAAC;QAC3F,mBAAc,GAAuB,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,CAAC;QAiB3D,kBAAa,GAAG,IAAI,YAAY,EAAE,CAAC;QAHlD,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KAClC;;;;IAMD,QAAQ;QACN,IAAI,CAAC,aAAa,CAAC,GAAG,CACpB,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,MAAM;YAC3B,IAAI,CAAC,MAAM,EAAE;gBACX,IAAI,CAAC,UAAU,CAAC,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC;aACzC;iBAAM;gBACL,IAAI,CAAC,UAAU,CAAC,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC;aAC3C;SACF,CAAC,CACH,CAAC;QAEF,IAAI,CAAC,aAAa,CAAC,GAAG,CACpB,IAAI,CAAC,OAAO,CAAC,aAAa;aACvB,IAAI,CACH,cAAc,CAAC,IAAI,CAAC,oBAAoB,CAAC,EACzC,GAAG,CAAC,CAAC,CAAC,QAAQ,EAAE,OAAO,CAAC,MAAM,EAAE,OAAO,EAAE,CAAC,CAAC,CAC5C;aACA,SAAS,CAAC,CAAC,EAAE,OAAO,EAAE,KACrB,IAAI,CAAC,mBAAmB,CAAC,gBAAgB,CAAC;YACxC,MAAM,EAAE,IAAI,CAAC,iCAAqD;YAClE,OAAO,EAAE,EAAE;YACX,QAAQ,EAAE,SAAS;YACnB,GAAG,EAAE,OAAO;SACb,CAAC,CACH,CACJ,CAAC;QAEF,IAAI,CAAC,aAAa,CAAC,GAAG,CACpB,IAAI,CAAC,OAAO,CAAC,WAAW;aACrB,IAAI,CACH,cAAc,CAAC,IAAI,CAAC,oBAAoB,CAAC,EACzC,GAAG,CAAC,CAAC,CAAC,KAAK,EAAE,OAAO,CAAC,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC,CAChD;aACA,SAAS,CAAC,CAAC,EAAE,KAAK,EAAE,OAAO,EAAE,KAC5B,IAAI,CAAC,mBAAmB,CAAC,gBAAgB,CAAC;YACxC,MAAM,EAAE,IAAI,CAAC,+BAAmD;YAChE,OAAO,EAAE,EAAE;YACX,QAAQ,EAAE,OAAO;YACjB,GAAG,EAAE,OAAO;SACb,CAAC,CACH,CACJ,CAAC;KACH;;;;IAID,WAAW;QACT,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,CAAC;KAClC;;;;;;IAMD,IAAI,CAAC,WAA+B;QAClC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,EAAE,WAAW,CAAC,IAAI,CAAC,CAAC;KACxD;;;;;;IAMD,kBAAkB,CAAC,EAAU;QAC3B,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QACxB,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;QACvB,IAAI,CAAC,UAAU,CAAC,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC;KACzC;;iJA7FU,gCAAgC;qIAAhC,gCAAgC,iWCxC7C,q/CA4CA;4FDJa,gCAAgC;kBAL5C,SAAS;mBAAC;oBACT,QAAQ,EAAE,8BAA8B;oBACxC,WAAW,EAAE,kCAAkC;oBAC/C,eAAe,EAAE,uBAAuB,CAAC,MAAM;iBAChD;qPAUC,iCAAiC;sBADhC,SAAS;uBAAC,mCAAmC;gBAG9C,+BAA+B;sBAD9B,SAAS;uBAAC,iCAAiC;;;AE/C9C,MAAM,sBAAsB,GAAoB,EAAE,CAAC;MAEtC,+BAA+B,GAAyC,IAAI,cAAc,CACrG,iCAAiC,EACjC;AAMK,MAAM,sBAAsB,GAAoB;IACrD;QACE,OAAO,EAAE,+BAA+B;QACxC,QAAQ,EAAE,EAAE,SAAS,EAAE,SAAS,EAAE;KACnC;IACD;QACE,OAAO,EAAE,8BAA8B;QACvC,QAAQ,EAAE,sBAAsB;KACjC;CACF;;ACCD;;;;;;;;;;;;;;;;;;;;;;;MA4Ba,qBAAqB;IA4ChC,YACmB,EAAe,EACf,KAAuB,EACF,UAAkB,EAGvC,mBAAyC;QALzC,OAAE,GAAF,EAAE,CAAa;QACf,UAAK,GAAL,KAAK,CAAkB;QACF,eAAU,GAAV,UAAU,CAAQ;QAGvC,wBAAmB,GAAnB,mBAAmB,CAAsB;QAjDnD,YAAO,GAA0B,IAAI,CAAC;QAC/C,cAAS,GAAG,KAAK,CAAC;QAClB,aAAQ,GAAG,QAAQ,CAAC;;;;QAeX,mBAAc,GAAG,KAAK,CAAC;;;;QAItB,SAAI,GAAG,IAAI,YAAY,EAAoB,CAAC;;;;QAI5C,eAAU,GAAG,IAAI,YAAY,EAAU,CAAC;;;;QAIxC,cAAS,GAAG,IAAI,YAAY,EAAU,CAAC;;;;QAIvC,uBAAkB,GAAG,IAAI,YAAY,EAAU,CAAC;;;;QAQjD,yBAAoB,GAAG,iBAAiB,CAAC;KAS9C;;;;IAKJ,QAAQ;QACN,IAAI,IAAI,CAAC,IAAI,KAAK,SAAS,EAAE;YAC3B,MAAM,IAAI,KAAK,CAAC,yDAAyD,CAAC,CAAC;SAC5E;KACF;;;;IAKD,eAAe;;QACb,IAAI,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;YACtC,MAAA,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,aAAa,CAAC,aAAa,CAAC,OAAO,CAAC,0CAAE,KAAK,EAAE,CAAC;SAClE;KACF;;;;;;IAOD,WAAW,CAAC,OAAsB;QAChC,IAAI,OAAO,CAAC,IAAI,EAAE;YAChB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;YACvB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,uBAAuB,EAAE,CAAC;SACpD;KACF;IAEO,uBAAuB;QAC7B,MAAM,EAAE,SAAS,EAAE,qBAAQ,IAAI,CAAC,mBAAmB,CAAE,CAAC;QAEtD,OAAO,IAAI,CAAC,EAAE,CAAC,KAAK,iBAClB,IAAI,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EACtB,IAAI,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EACtB,aAAa,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,EACxC,KAAK,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,EACxB,WAAW,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,KAChC,SAAS,GAAG,EAAE,SAAS,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,SAAS,CAAC,EAAE,GAAG,EAAE,GAC5D,CAAC;KACJ;;;;IAKD,QAAQ;QACN,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,IAAI,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE;YAC3B,IAAI,CAAC,IAAI,CAAC,IAAI,iCAAM,IAAI,CAAC,IAAI,IAAM,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,GAAG,EAAE,GAAI,CAAC;SACzF;aAAM;YACL,IAAI,CAAC,YAAY,CAAC,gBAAgB,EAAE,CAAC;SACtC;KACF;;;;IAKD,MAAM;QACJ,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;KACpC;;;;IAKD,IAAI;QACF,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;KACnC;IAED,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;KACtC;IAED,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;KACtC;IAED,IAAI,aAAa;QACf,OAAO,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;KAC/C;;;;IAKD,cAAc;QACZ,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;KAC5C;;sIA3IU,qBAAqB,+EA+CtB,WAAW,aAEX,+BAA+B;0HAjD9B,qBAAqB,8QCnDlC,y4UAoSA,uiCDqCa,iCAAiC;4FAtRjC,qBAAqB;kBALjC,SAAS;mBAAC;oBACT,QAAQ,EAAE,kBAAkB;oBAC5B,WAAW,EAAE,gCAAgC;oBAC7C,eAAe,EAAE,uBAAuB,CAAC,MAAM;iBAChD;qHAgDqD,MAAM;0BAAvD,MAAM;2BAAC,WAAW;;0BAClB,QAAQ;;0BACR,MAAM;2BAAC,+BAA+B;4CAxCzC,IAAI;sBADH,KAAK;gBAMN,IAAI;sBADH,KAAK;gBAKG,cAAc;sBAAtB,KAAK;gBAII,IAAI;sBAAb,MAAM;gBAIG,UAAU;sBAAnB,MAAM;gBAIG,SAAS;sBAAlB,MAAM;gBAIG,kBAAkB;sBAA3B,MAAM;;AA4GT;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAwIa,iCAAkC,SAAQ,UAAmD;;kJAA7F,iCAAiC;sIAAjC,iCAAiC;4FAAjC,iCAAiC;kBAH7C,SAAS;mBAAC;oBACT,QAAQ,EAAE,8BAA8B;iBACzC;;;AEpUD;;;;;;;;;;;;;;;;;;;MAsBa,sDAAuD,SAAQ,UAG3E;;uKAHY,sDAAsD;2JAAtD,sDAAsD;4FAAtD,sDAAsD;kBAHlE,SAAS;mBAAC;oBACT,QAAQ,EAAE,mDAAmD;iBAC9D;;;ACrBD;;;;;;;;;;;;;;;;;;;MAsBa,oDAAqD,SAAQ,UAGzE;;qKAHY,oDAAoD;yJAApD,oDAAoD;4FAApD,oDAAoD;kBAHhE,SAAS;mBAAC;oBACT,QAAQ,EAAE,iDAAiD;iBAC5D;;;ACrBD;;;;;;;;;;;;;;;;;;;MAsBa,oDAAqD,SAAQ,UAGzE;;qKAHY,oDAAoD;yJAApD,oDAAoD;4FAApD,oDAAoD;kBAHhE,SAAS;mBAAC;oBACT,QAAQ,EAAE,iDAAiD;iBAC5D;;;ACrBD;;;;;;;;;;;;;;;;;;;MAsBa,kDAAmD,SAAQ,UAGvE;;mKAHY,kDAAkD;uJAAlD,kDAAkD;4FAAlD,kDAAkD;kBAH9D,SAAS;mBAAC;oBACT,QAAQ,EAAE,+CAA+C;iBAC1D;;;ACrBD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA6Ca,oDAAqD,SAAQ,UAGzE;;qKAHY,oDAAoD;yJAApD,oDAAoD;4FAApD,oDAAoD;kBAHhE,SAAS;mBAAC;oBACT,QAAQ,EAAE,iDAAiD;iBAC5D;;;AC3BD;;;;;;;;;;;;;;;;;;;;;;;;MA6Ba,8BAA8B;IAkCzC,YACmB,OAAwB,EACxB,KAAqB,EACrB,UAAqC,EACrC,mBAAwC,EACxC,iBAAmD,EACnD,GAAsB;QALtB,YAAO,GAAP,OAAO,CAAiB;QACxB,UAAK,GAAL,KAAK,CAAgB;QACrB,eAAU,GAAV,UAAU,CAA2B;QACrC,wBAAmB,GAAnB,mBAAmB,CAAqB;QACxC,sBAAiB,GAAjB,iBAAiB,CAAkC;QACnD,QAAG,GAAH,GAAG,CAAmB;QAvChC,YAAO,GAAG,IAAI,CAAC;QACf,WAAM,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,MAAgB,KAAK,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAE/E,cAAS,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,MAAgB,KAAK,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QAEpF,SAAI,GAA6C,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAC9E,GAAG,CAAC,CAAC,IAA6B,KAAuB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CACjF,CAAC;QAEO,yBAAoB,GAAuB,IAAI,CAAC,iBAAiB,CAAC,wBAAwB,CAAC;QAoBpG,2BAAsB,GAAG,KAAK,CAAC;QAC/B,aAAQ,GAAG,IAAI,OAAO,EAAW,CAAC;QAClC,qBAAgB,GAAG,KAAK,CAAC;QAUvB,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KAClC;;;;IAKD,QAAQ;QACN,IAAI,CAAC,UAAU,CAAC,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC;QACxC,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;KAC/B;;;;;;IAOD,IAAI,CAAC,IAAsB;QACzB,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;QAC7B,IAAI,CAAC,MAAM;aACR,IAAI,CACH,QAAQ,CAAC,MAAM,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,EACvD,UAAU,CAAC,MAAM,EAAE,CAAC,SAAS,CAAC,CAAC,EAC/B,cAAc,CAAC,IAAI,CAAC,oBAAoB,CAAC,EACzC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,OAAO,CAAC,MAAmD,EAAE,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC,EACtF,IAAI,CAAC,CAAC,CAAC,CACR;aACA,SAAS,CAAC,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE;YACzB,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;YAC9B,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,cAAc,EAAE,CAAC;YACjD,IAAI,EAAE,EAAE;gBACN,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;gBAC3B,IAAI,CAAC,mBAAmB,CAAC,gBAAgB,CAAC;oBACxC,MAAM,GAAG,IAAI,CAAC,EAAE;0BACZ,IAAI,CAAC,+BAA+B;0BACpC,IAAI,CAAC,iCAAiC,CAAqB;oBAC/D,OAAO,EAAE,EAAE;oBACX,QAAQ,EAAE,SAAS;oBACnB,GAAG,EAAE,OAAO;iBACb,CAAC,CAAC;aACJ;iBAAM;gBACL,IAAI,CAAC,mBAAmB,CAAC,gBAAgB,CAAC;oBACxC,MAAM,GAAG,IAAI,CAAC,EAAE;0BACZ,IAAI,CAAC,6BAA6B;0BAClC,IAAI,CAAC,+BAA+B,CAAqB;oBAC7D,OAAO,EAAE,EAAE;oBACX,QAAQ,EAAE,OAAO;oBACjB,GAAG,EAAE,OAAO;iBACb,CAAC,CAAC;aACJ;YACD,IAAI,CAAC,UAAU,CAAC,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC;YACxC,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;SACxB,CAAC,CAAC;KACN;;;;;;IAOD,aAAa;;QACX,IAAI,MAAA,MAAA,IAAI,CAAC,aAAa,0CAAE,YAAY,0CAAE,KAAK,EAAE;YAC3C,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC;YACnC,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;YACzB,IAAI,CAAC,QAAQ,GAAG,IAAI,OAAO,EAAE,CAAC;YAC9B,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC;YAExB,OAAO,IAAI,CAAC,QAAQ,CAAC;SACtB;QAED,OAAO,IAAI,CAAC;KACb;;;;;;IAOD,UAAU,CAAC,EAAU;QACnB,IAAI,EAAE,EAAE;YACN,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;YAC3B,IAAI,CAAC,UAAU,CAAC,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC;SAC3C;aAAM;YACL,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;YACvB,IAAI,CAAC,UAAU,CAAC,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC;SACzC;KACF;;;;;;IAOD,IAAI,CAAC,EAAsB;QACzB,IAAI,EAAE,EAAE;YACN,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;YACvB,IAAI,CAAC,UAAU,CAAC,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC;SACzC;aAAM;YACL,IAAI,CAAC,UAAU,CAAC,UAAU,EAAE,CAAC;YAC7B,IAAI,CAAC,UAAU,CAAC,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC;SAC3C;KACF;;;;;;;IAQD,WAAW,CAAC,IAA6B;QACvC,IAAI,IAAI,EAAE;YACR,OAAO;gBACL,EAAE,EAAE,IAAI,CAAC,EAAE;gBACX,IAAI,EAAE,IAAI,CAAC,IAAI;gBACf,IAAI,EAAE,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,SAAS;gBACpG,aAAa,EACX,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,aAAa;sBAC/D,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,aAAa;sBAC9B,SAAS;gBACf,KAAK,EAAE,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,SAAS;gBACvG,WAAW,EACT,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,WAAW,GAAG,SAAS;gBAC9G,QAAQ,EAAE,IAAI,CAAC,QAAQ,IAAI,EAAE;gBAC7B,SAAS,EAAE,IAAI,CAAC,SAAS,IAAI,EAAE;aAChC,CAAC;SACH;aAAM;YACL,OAAO,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE,QAAQ,EAAE,EAAE,EAAE,QAAQ,EAAE,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE,CAAC;SACrF;KACF;;;;;;IAOD,SAAS,CAAC,IAAsB;QAC9B,uBACE,EAAE,EAAE,IAAI,CAAC,EAAE,EACX,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,QAAQ,EAAE;2FAEF,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,EAAE,KACzD,IAAI,CAAC,IAAI,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,GAAG,EAAE,KACpC,IAAI,CAAC,aAAa,GAAG,EAAE,aAAa,EAAE,IAAI,CAAC,aAAa,EAAE,GAAG,EAAE,KAC/D,IAAI,CAAC,WAAW,GAAG,EAAE,WAAW,EAAE,IAAI,CAAC,WAAW,EAAE,GAAG,EAAE,KACzD,IAAI,CAAC,KAAK,GAAG,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,GAAG,EAAE;aAE9C,KACG,IAAI,CAAC,SAAS,GAAG,EAAE,SAAS,EAAE,IAAI,CAAC,SAAS,EAAE,GAAG,EAAE,GACvD;KACH;;;;;;IAOD,kBAAkB,CAAC,EAAU;QAC3B,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QACxB,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;QACvB,IAAI,CAAC,UAAU,CAAC,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC;KACzC;;;;IAKD,gBAAgB;QACd,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACzB,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACzB,IAAI,CAAC,sBAAsB,GAAG,KAAK,CAAC;KACrC;;;;IAKD,eAAe;QACb,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC1B,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACzB,IAAI,CAAC,sBAAsB,GAAG,KAAK,CAAC;KACrC;;+IA5NU,8BAA8B;mIAA9B,8BAA8B,iHAY9B,qBAAqB,+pBC9DlC,+4GA6FA;4FD3Ca,8BAA8B;kBAL1C,SAAS;mBAAC;oBACT,QAAQ,EAAE,4BAA4B;oBACtC,WAAW,EAAE,0CAA0C;oBACvD,eAAe,EAAE,uBAAuB,CAAC,MAAM;iBAChD;qRAcC,aAAa;sBADZ,SAAS;uBAAC,qBAAqB;gBAIhC,iCAAiC;sBADhC,SAAS;uBAAC,2BAA2B;gBAItC,+BAA+B;sBAD9B,SAAS;uBAAC,yBAAyB;gBAIpC,+BAA+B;sBAD9B,SAAS;uBAAC,yBAAyB;gBAIpC,6BAA6B;sBAD5B,SAAS;uBAAC,uBAAuB;gBAIlC,0BAA0B;sBADzB,SAAS;uBAAC,4BAA4B;;;AEtEzC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAmCa,kBAAkB;IAC7B,aAAa,CAAC,SAAiC;QAC7C,OAAO,SAAS,CAAC,aAAa,GAAG,SAAS,CAAC,aAAa,EAAE,GAAG,IAAI,CAAC;KACnE;;mIAHU,kBAAkB;uIAAlB,kBAAkB;4FAAlB,kBAAkB;kBAD9B,UAAU;;;ACrCX;;;;;;;;;;;;;;;;;;;;;;;;;MA8Ba,iCAAiC;IAmB5C,YAAoB,UAAqC;QAArC,eAAU,GAAV,UAAU,CAA2B;;;;QAJzD,wBAAmB,GAAyB,IAAI,YAAY,EAAU,CAAC;QAEvD,yBAAoB,GAAG,iBAAiB,CAAC;KAEI;;;;IAI7D,QAAQ;;QACN,IAAI,CAAC,UAAU,CAAC,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC;QACxC,IAAI,IAAI,CAAC,eAAe,KAAK,CAAC,IAAI,IAAI,CAAC,eAAe,KAAK,CAAC,EAAE;YAC5D,IAAI,CAAC,UAAU,CAAC,cAAc,CAC5B,CAAA,MAAA,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,UAAU,CAAC,0CAAE,QAAQ,KAAI,IAAI,CAAC,oBAAoB,CAAC,IAAI,CACpG,CAAC;SACH;KACF;;;;;;IAMD,uBAAuB,CAAC,MAAsB;QAC5C,IAAI,CAAC,UAAU,CAAC,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC;QACxC,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;KACjD;;kJAvCU,iCAAiC;sIAAjC,iCAAiC,yNClC9C,mlIA6FA;4FD3Da,iCAAiC;kBAJ7C,SAAS;mBAAC;oBACT,QAAQ,EAAE,gCAAgC;oBAC1C,WAAW,EAAE,8CAA8C;iBAC5D;6GAMC,kBAAkB;sBADjB,KAAK;gBAMN,eAAe;sBADd,KAAK;gBAMN,mBAAmB;sBADlB,MAAM;;;AEzCT;;;;;;;;;;;;;;;;;;;;;;;MA2Ba,kCAAkC;IA+C7C,YACmB,cAA+B,EAC/B,iBAAmD;QADnD,mBAAc,GAAd,cAAc,CAAiB;QAC/B,sBAAiB,GAAjB,iBAAiB,CAAkC;;;;QA7C7D,gBAAW,GAAwB,IAAI,CAAC,iBAAiB,CAAC,mBAAmB,CAAC;;;;QAI9E,eAAU,GAAwB,IAAI,CAAC,iBAAiB,CAAC,kBAAkB,CAAC;;;;QAI5E,kBAAa,GAAwB,IAAI,CAAC,iBAAiB,CAAC,qBAAqB,CAAC;;;;QAIlF,gBAAW,GAAwB,IAAI,CAAC,iBAAiB,CAAC,mBAAmB,CAAC;;;;QAKvF,uBAAkB,GAAiC,aAAa,CAAC;YAC/D,IAAI,CAAC,aAAa;YAClB,IAAI,CAAC,UAAU;YACf,IAAI,CAAC,WAAW;YAChB,IAAI,CAAC,WAAW;SACjB,CAAC,CAAC,IAAI,CACL,GAAG,CACD,CAAC,eAAe,MACb,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC,MAAM,CAAC,CAAC,QAAQ,KAAK,QAAQ,IAAI,OAAO,QAAQ,KAAK,SAAS,CAAC,CAAC,MAAM,CAAC,CAClH,EACD,GAAG,CAAC,CAAC,CAAC,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC,KAAK;YACrC;gBACE,QAAQ,EAAE,iBAAiB,CAAC,OAAO;gBACnC,UAAU,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,OAAO,EAAE;aAC/B;YACD;gBACE,QAAQ,EAAE,iBAAiB,CAAC,IAAI;gBAChC,UAAU,EAAE,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,OAAO,EAAE;aAC5B;YACD,EAAE,QAAQ,EAAE,iBAAiB,CAAC,KAAK,EAAE,UAAU,EAAE,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,OAAO,EAAE,EAAE;YACnE,EAAE,QAAQ,EAAE,iBAAiB,CAAC,KAAK,EAAE,UAAU,EAAE,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,OAAO,EAAE,EAAE;SACpE,CAAC,CACH,CAAC;KAOE;;mJAlDO,kCAAkC;uIAAlC,kCAAkC,uEClC/C,iKAEA;4FDgCa,kCAAkC;kBAJ9C,SAAS;mBAAC;oBACT,QAAQ,EAAE,iCAAiC;oBAC3C,WAAW,EAAE,+CAA+C;iBAC7D;;;AE5BD;;;;;;;;;;;;;;;;MAqBa,yBAAyB;IAsBpC,YAAmB,OAAwB;QAAxB,YAAO,GAAP,OAAO,CAAiB;;;;;QAZlC,sBAAiB,GAAG,KAAK,CAAC;;;;;QAM1B,cAAS,GAAG,KAAK,CAAC;QAEX,sBAAiB,GAAG,mBAAmB,CAAC;QACxC,sBAAiB,GAAG,iBAAiB,CAAC;KAGP;;;;IAI/C,QAAQ;QACN,IAAI,IAAI,CAAC,WAAW,KAAK,SAAS,EAAE;YAClC,MAAM,IAAI,KAAK,CAAC,2DAA2D,CAAC,CAAC;SAC9E;aAAM;YACL,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;SAC5E;KACF;;0IAhCU,yBAAyB;8HAAzB,yBAAyB,oKC1BtC,ywFA6DA;4FDnCa,yBAAyB;kBALrC,SAAS;mBAAC;oBACT,QAAQ,EAAE,sBAAsB;oBAChC,WAAW,EAAE,oCAAoC;oBACjD,eAAe,EAAE,uBAAuB,CAAC,MAAM;iBAChD;mGAKU,WAAW;sBAAnB,KAAK;gBAMG,iBAAiB;sBAAzB,KAAK;gBAMG,SAAS;sBAAjB,KAAK;;;AE1BR;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAgCa,2BAA2B;IAJxC;;;;QAaY,mBAAc,GAAG,IAAI,YAAY,EAAU,CAAC;QAe9C,YAAO,GAAG,CAAC,CAAC;QACpB,qBAAgB,GAAiB,EAAE,CAAC;QACpC,wBAAmB,GAAW,iBAAiB,CAAC,IAAI,CAAC;QACrD,QAAG,GAAG,IAAI,OAAO,EAAE,CAAC;QAGJ,yBAAoB,GAAG,iBAAiB,CAAC;KAkH1D;;;;IA7GC,eAAe;QACb,IAAI,CAAC,WAAW,CAAC,OAAO;aACrB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;aACjC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aACzB,SAAS,CAAC,CAAC,IAA2B;YACrC,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;SACxC,CAAC,CAAC;KACN;;;;IAKD,WAAW;QACT,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;QAChB,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;KACrB;;;;;;;;IASM,WAAW,CAAC,CAAS;QAC1B,OAAO,CAAC,KAAK,IAAI,CAAC,OAAO,GAAG,GAAG,GAAG,IAAI,CAAC;KACxC;;;;;;;IAQO,iBAAiB,CAAC,YAAoB;QAC5C,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;KACnE;;;;;;;;IASD,mBAAmB,CAAC,KAAY,EAAE,YAAoB;;QACpD,KAAK,CAAC,cAAc,EAAE,CAAC;QAEvB,MAAM,cAAc,GAAG,IAAI,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC;QAC5D,IAAI,IAAI,CAAC,OAAO,KAAK,cAAc;YAAE,OAAO;QAE5C,IAAI,CAAC,OAAO,GAAG,cAAc,CAAC;QAC9B,MAAA,MAAA,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,IAAI,CAAC,OAAO,CAAC,0CAAE,aAAa,0CAAE,KAAK,EAAE,CAAC;KAC7E;;;;;;IAOD,eAAe,CAAC,EAAU,EAAE,KAAa;QACvC,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QACrB,IAAI,CAAC,mBAAmB,GAAG,EAAE,CAAC;QAC9B,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;KAC9B;;;;;;;;;IAUM,aAAa,CAAC,IAAiB,EAAE,KAAa;QACnD,MAAM,IAAI,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;QACxD,IAAI,IAAI,CAAC,eAAe,KAAK,IAAI,IAAI,CAAC,KAAK,EAAE;YAC3C,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;YAE5B,OAAO,IAAI,CAAC;SACb;QAED,OAAO,KAAK,CAAC;KACd;;;;;;;;IASM,mBAAmB,CAAC,KAAa;QACtC,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;QACvC,IAAI,CAAC,QAAQ,EAAE;YACb,OAAO,KAAK,CAAC;SACd;aAAM;YACL,MAAM,QAAQ,GAAG,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;YAChE,IAAI,IAAI,CAAC,eAAe,KAAK,QAAQ,EAAE;gBACrC,OAAO,IAAI,CAAC;aACb;SACF;QAED,OAAO,KAAK,CAAC;KACd;IAEO,mBAAmB,CAAC,IAAY;QACtC,OAAO,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;KAChE;;4IA/IU,2BAA2B;gIAA3B,2BAA2B,mSChDxC,u8CAsCA;4FDUa,2BAA2B;kBAJvC,SAAS;mBAAC;oBACT,QAAQ,EAAE,yBAAyB;oBACnC,WAAW,EAAE,+BAA+B;iBAC7C;8BAMC,KAAK;sBADJ,KAAK;gBAKI,cAAc;sBAAvB,MAAM;gBAKP,cAAc;sBADb,KAAK;gBAIN,WAAW;sBADV,YAAY;uBAAC,aAAa;gBAM3B,SAAS;sBADR,KAAK;;;AE/DR;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA+Ba,0CAA2C,SAAQ,UAG/D;;2JAHY,0CAA0C;+IAA1C,0CAA0C;4FAA1C,0CAA0C;kBAHtD,SAAS;mBAAC;oBACT,QAAQ,EAAE,uCAAuC;iBAClD;;AAKD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA6Da,uCAAwC,SAAQ,UAG5D;;wJAHY,uCAAuC;4IAAvC,uCAAuC;4FAAvC,uCAAuC;kBAHnD,SAAS;mBAAC;oBACT,QAAQ,EAAE,oCAAoC;iBAC/C;;AAKD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAuCa,qCAAsC,SAAQ,UAG1D;;sJAHY,qCAAqC;0IAArC,qCAAqC;4FAArC,qCAAqC;kBAHjD,SAAS;mBAAC;oBACT,QAAQ,EAAE,kCAAkC;iBAC7C;;AAKD;;;;;;;;;;;;;;;;;;;MAsBa,oCAAqC,SAAQ,UAAqD;;qJAAlG,oCAAoC;yIAApC,oCAAoC;4FAApC,oCAAoC;kBAHhD,SAAS;mBAAC;oBACT,QAAQ,EAAE,iCAAiC;iBAC5C;;AAED;;;;;;;;;;;;;;;;;;;;;;;;;MA4Ba,uCAAwC,SAAQ,UAAqD;;wJAArG,uCAAuC;4IAAvC,uCAAuC;4FAAvC,uCAAuC;kBAHnD,SAAS;mBAAC;oBACT,QAAQ,EAAE,oCAAoC;iBAC/C;;AAED;;;;;;;;;;;;;;;;;;;;;;;;;MA4Ba,6CAA8C,SAAQ,UAAkD;;8JAAxG,6CAA6C;kJAA7C,6CAA6C;4FAA7C,6CAA6C;kBAHzD,SAAS;mBAAC;oBACT,QAAQ,EAAE,0CAA0C;iBACrD;;AAED;;;;;;;;;;;;;;;;MAmBa,uCAAwC,SAAQ,UAG5D;;wJAHY,uCAAuC;4IAAvC,uCAAuC;4FAAvC,uCAAuC;kBAHnD,SAAS;mBAAC;oBACT,QAAQ,EAAE,oCAAoC;iBAC/C;;;ACjOD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAkCa,8BAA8B;IAkFzC,YACmB,OAAwB,EACxB,UAAqC,EACrC,MAAc,EACd,KAAqB,EACrB,iBAAmD;QAJnD,YAAO,GAAP,OAAO,CAAiB;QACxB,eAAU,GAAV,UAAU,CAA2B;QACrC,WAAM,GAAN,MAAM,CAAQ;QACd,UAAK,GAAL,KAAK,CAAgB;QACrB,sBAAiB,GAAjB,iBAAiB,CAAkC;QAtFtE,qBAAgB,GAAG,KAAK,CAAC;QAGzB,uBAAkB,GAAG,IAAI,CAAC;QACjB,eAAU,GAAG,IAAI,WAAW,EAAE,CAAC;QAC/B,wBAAmB,GAAG,IAAI,eAAe,CAAS,EAAE,CAAC,CAAC;QACtD,oBAAe,GAAG,IAAI,OAAO,EAAU,CAAC;QAExC,YAAO,GAAmC,IAAI,CAAC;QAC/C,sBAAiB,GAAwB,IAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC;QAC5E,aAAQ,GAAuB,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC;QAChE,gBAAW,GAAuB,IAAI,CAAC,iBAAiB,CAAC,YAAY,CAAC;QACtE,mBAAc,GAAuB,IAAI,CAAC,iBAAiB,CAAC,eAAe,CAAC;QAE5E,eAAU,GAAwB,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAChE,MAAM,CAAuB,CAAC,CAAQ,KAAyB,CAAC,YAAY,aAAa,CAAC,EAC1F,GAAG,CAAC,CAAC,CAAgB,KAAa,CAAC,CAAC,GAAG,CAAC,EACxC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,EAC1B,GAAG,CAAC;YACF,MAAM,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,KAAK,IAAI,CAAC,IAAI,CAAC;YACzD,IAAI,MAAM,EAAE;gBACV,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;aAC/B;YAED,OAAO,MAAM,CAAC;SACf,CAAC,EACF,WAAW,EAAE,CACd,CAAC;QAEO,eAAU,GAA2B,aAAa,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CACzG,GAAG,CAAC,CAAC,CAAC,MAAM,EAAE,QAAQ,CAAC,KAAK,IAAI,CAAC,mBAAmB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CACxE,CAAC;QAEO,UAAK,GAAwC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAC3E,GAAG,CAAC,CAAC,OAAO;YACV,IAAI,CAAC,kBAAkB,GAAG,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,GAAG,IAAI,GAAG,OAAO,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC;YACvF,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAc,EAAE,CAAc,KACnD,CAAC,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,IAAI,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAC/E,CAAC;SACH,CAAC,EACF,UAAU,CAAC,CAAC,KAAK;YACf,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;YAEnB,OAAO,EAAE,CAAC,SAAS,CAAC,CAAC;SACtB,CAAC,CACH,CAAC;;;;QAIO,mBAAc,GAA8B,IAAI,CAAC,OAAO,CAAC,uBAAuB,CAAC;QACzE,eAAU,GAA2B,aAAa,CAAC;YAClE,IAAI,CAAC,mBAAmB;YACxB,IAAI,CAAC,UAAU;YACf,IAAI,CAAC,QAAQ;YACb,IAAI,CAAC,cAAc;SACpB,CAAC,CAAC,IAAI,CACL,GAAG,CAAC,CAAC,CAAC,MAAM,EAAE,gBAAgB,EAAE,QAAQ,EAAE,cAAc,CAAC;YACvD,IAAI,MAAM,KAAK,cAAc,CAAC,SAAS,IAAI,cAAc,KAAK,cAAc,CAAC,SAAS,EAAE;gBACtF,gBAAgB,CAAC,IAAI,EAAE,CAAC;gBACxB,gBAAgB,CAAC,IAAI,GAAG,QAAQ,CAAC;aAClC;YAED,OAAO;gBACL,gBAAgB;gBAChB,cAAc;gBACd,MAAM;aACP,CAAC;SACH,CAAC,EACF,GAAG,CACD,CAAC,EAAE,gBAAgB,EAAE,cAAc,EAAE,MAAM,EAAE,MAAkB;YAC7D,UAAU,EAAE;gBACV,IAAI,EAAE,gBAAgB,CAAC,IAAI;gBAC3B,IAAI,EAAE,gBAAgB,CAAC,IAAI;gBAC3B,KAAK,EAAE,gBAAgB,CAAC,KAAK;aAC9B;YACD,cAAc;YACd,MAAM;SACP,CAAC,CACH,CACF,CAAC;KAQE;IAEJ,QAAQ;QACN,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,MAAM;YACnD,OAAO,IAAI,CAAC,OAAO,CAAC,cAAc,CAChC,MAAM,CAAC,UAAU,CAAC,KAAK,EACvB,MAAM,CAAC,UAAU,CAAC,IAAI,EACtB,MAAM,CAAC,UAAU,CAAC,IAAI,EACtB,MAAM,CAAC,cAAc,EACrB,MAAM,CAAC,MAAM,CACd,CAAC;SACH,CAAC,CAAC;QACH,IAAI,CAAC,YAAY,CAAC,GAAG,CACnB,IAAI,CAAC,eAAe;aACjB,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,EAAE,oBAAoB,EAAE,CAAC;aAC/C,SAAS,CAAC,CAAC,IAAY,KAAK,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAC1D,CAAC;KACH;;;;;;IAOD,kBAAkB,CAAC,MAAc;QAC/B,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KACnC;;;;IAKD,WAAW;QACT,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;KAC/B;;;;;;IAOD,cAAc,CAAC,MAAc;QAC3B,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACxC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;KACjC;;;;;;IAOD,YAAY,CAAC,IAAY;QACvB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;KAC5B;;;;IAKD,QAAQ;QACN,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;KAC5C;;;;;;IAOD,MAAM,CAAC,EAAU;QACf,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;KAC5B;;;;;;IAOD,UAAU,CAAC,aAAqB;QAC9B,IAAI,CAAC,gBAAgB,GAAG,CAAC,aAAa,CAAC;QACvC,IAAI,CAAC,UAAU,CAAC,UAAU,EAAE,CAAC;QAC7B,IAAI,CAAC,UAAU,CAAC,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC;KAC3C;;;;IAKD,UAAU;QACR,IAAI,CAAC,UAAU,CAAC,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC;QACxC,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;KACxB;IAEO,mBAAmB,CAAC,KAAe,EAAE,QAAmB;QAC9D,MAAM,IAAI,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QAC/B,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC;QAEnD,OAAO;YACL,IAAI,EAAE,CAAC,IAAI,IAAI,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,KAAK,CAAC;YAC9C,IAAI,EAAE,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC;YACrC,KAAK,EAAE,IAAI,CAAC,UAAU,CAAC,KAAK,IAAI,EAAE;SACnC,CAAC;KACH;IAED,WAAW;;QACT,MAAA,IAAI,CAAC,YAAY,0CAAE,WAAW,EAAE,CAAC;KAClC;;+IA9LU,8BAA8B;mIAA9B,8BAA8B,kECzD3C,oyQAwNA;4FD/Ja,8BAA8B;kBAL1C,SAAS;mBAAC;oBACT,QAAQ,EAAE,4BAA4B;oBACtC,WAAW,EAAE,wCAAwC;oBACrD,eAAe,EAAE,uBAAuB,CAAC,MAAM;iBAChD;;;AE3CD;;;;;;SAMgB,qBAAqB,CAAC,OAAsB;IAC1D,OAAO,IAAI,yBAAyB,CAAC,OAAO,CAAC,CAAC;AAChD,CAAC;AAEM,MAAM,cAAc,GAAW;IACpC;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,gCAAgC;KAC5C;IACD;QACE,IAAI,EAAE,QAAQ;QACd,SAAS,EAAE,kCAAkC;KAC9C;IACD;QACE,IAAI,EAAE,KAAK;QACX,SAAS,EAAE,gCAAgC;KAC5C;IAED;QACE,IAAI,EAAE,gBAAgB;QACtB,aAAa,EAAE,CAAC,kBAAkB,CAAC;QACnC,SAAS,EAAE,8BAA8B;KAC1C;CACF,CAAC;IAmFW,6BAA6B,SAA7B,6BAA6B;IAwDxC,YAA6B,kBAAoD;QAApD,uBAAkB,GAAlB,kBAAkB,CAAkC;KAAI;;;;IApDrF,IAAyB,UAAU,CAAC,KAAc;QAChD,IAAI,CAAC,kBAAkB,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;KAC9C;;;;IAID,IAAuB,QAAQ,CAAC,KAAa;QAC3C,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;KAC5C;;;;IAID,IAA0B,WAAW,CAAC,KAAa;QACjD,IAAI,CAAC,kBAAkB,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;KAC/C;;;;IAID,IAA6B,cAAc,CAAC,KAAa;QACvD,IAAI,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;KAClD;;;;IAID,IAAsC,uBAAuB,CAAC,KAAa;QACzE,IAAI,CAAC,kBAAkB,CAAC,0BAA0B,CAAC,KAAK,CAAC,CAAC;KAC3D;;;;IAID,IAAiC,kBAAkB,CAAC,KAAc;QAChE,IAAI,CAAC,kBAAkB,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC;KACtD;;;;IAID,IAAgC,iBAAiB,CAAC,KAAc;QAC9D,IAAI,CAAC,kBAAkB,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC;KACrD;;;;IAID,IAAmC,oBAAoB,CAAC,KAAc;QACpE,IAAI,CAAC,kBAAkB,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC;KACxD;;;;IAID,IAAiC,kBAAkB,CAAC,KAAc;QAChE,IAAI,CAAC,kBAAkB,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC;KACtD;EAGF;8IAzDY,6BAA6B;kIAA7B,6BAA6B,yZAX7B;QACT,aAAa;QACb;YACE,OAAO,EAAE,yBAAyB;YAClC,UAAU,EAAE,qBAAqB;YACjC,IAAI,EAAE,CAAC,aAAa,CAAC;SACtB;QACD,eAAe;QACf,gCAAgC;KACjC,0BAfS;;;;GAIT;AAaU,6BAA6B;IAjFzC,cAAc,CAAC;QACd,MAAM,EAAE,cAAc;KACvB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qCAuIiD,gCAAgC;GAxDtE,6BAA6B,CAyDzC;4FAzDY,6BAA6B;kBAnBzC,SAAS;mBAAC;oBACT,QAAQ,EAAE,wCAAwC;oBAClD,QAAQ,EAAE;;;;GAIT;oBACD,eAAe,EAAE,uBAAuB,CAAC,MAAM;oBAC/C,SAAS,EAAE;wBACT,aAAa;wBACb;4BACE,OAAO,EAAE,yBAAyB;4BAClC,UAAU,EAAE,qBAAqB;4BACjC,IAAI,EAAE,CAAC,aAAa,CAAC;yBACtB;wBACD,eAAe;wBACf,gCAAgC;qBACjC;iBACF;oHAK0B,UAAU;sBAAlC,KAAK;uBAAC,YAAY;gBAMI,QAAQ;sBAA9B,KAAK;uBAAC,UAAU;gBAMS,WAAW;sBAApC,KAAK;uBAAC,aAAa;gBAMS,cAAc;sBAA1C,KAAK;uBAAC,gBAAgB;gBAMe,uBAAuB;sBAA5D,KAAK;uBAAC,yBAAyB;gBAMC,kBAAkB;sBAAlD,KAAK;uBAAC,oBAAoB;gBAMK,iBAAiB;sBAAhD,KAAK;uBAAC,mBAAmB;gBAMS,oBAAoB;sBAAtD,KAAK;uBAAC,sBAAsB;gBAMI,kBAAkB;sBAAlD,KAAK;uBAAC,oBAAoB;;;ACvG7B,MAAM,SAAS,GAAG;IAChB,YAAY;IACZ,UAAU;IACV,kBAAkB;IAClB,WAAW;IACX,eAAe;IACf,4BAA4B;IAC5B,YAAY;IACZ,gBAAgB;IAChB,YAAY;IACZ,eAAe;IACf,kBAAkB;IAClB,cAAc;IACd,sBAAsB;IACtB,sBAAsB;IACtB,iBAAiB;IACjB,kBAAkB;IAClB,mBAAmB;IACnB,gBAAgB;IAChB,eAAe;IACf,gBAAgB;IAChB,gBAAgB;CACjB,CAAC;AAEF,MAAM,gBAAgB,GAAG,CAAC,mBAAmB,EAAE,kBAAkB,EAAE,yBAAyB,EAAE,iBAAiB,CAAC,CAAC;AAEjH,MAAM,UAAU,GAAG;IACjB,6BAA6B;IAC7B,2BAA2B;IAC3B,yBAAyB;IACzB,8BAA8B;IAC9B,uBAAuB;IACvB,gCAAgC;IAChC,qBAAqB;IACrB,8BAA8B;IAC9B,iCAAiC;IACjC,kCAAkC;CACnC,CAAC;AAEF,MAAM,uBAAuB,GAAG;IAC9B,0CAA0C;IAC1C,uCAAuC;IACvC,mCAAmC;IACnC,iCAAiC;IACjC,qCAAqC;IACrC,oCAAoC;IACpC,uCAAuC;IACvC,6CAA6C;IAC7C,uCAAuC;IAEvC,oDAAoD;IACpD,sDAAsD;IACtD,+CAA+C;IAC/C,oDAAoD;IACpD,sDAAsD;IACtD,oDAAoD;IACpD,kDAAkD;IAClD,oDAAoD;CACrD,CAAC;AACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAiDa,0BAA0B;;2IAA1B,0BAA0B;4IAA1B,0BAA0B,iBAjFrC,6BAA6B;QAC7B,2BAA2B;QAC3B,yBAAyB;QACzB,8BAA8B;QAC9B,uBAAuB;QACvB,gCAAgC;QAChC,qBAAqB;QACrB,8BAA8B;QAC9B,iCAAiC;QACjC,kCAAkC,EAIlC,0CAA0C;QAC1C,uCAAuC;QACvC,mCAAmC;QACnC,iCAAiC;QACjC,qCAAqC;QACrC,oCAAoC;QACpC,uCAAuC;QACvC,6CAA6C;QAC7C,uCAAuC;QAEvC,oDAAoD;QACpD,sDAAsD;QACtD,+CAA+C;QAC/C,oDAAoD;QACpD,sDAAsD;QACtD,oDAAoD;QACpD,kDAAkD;QAClD,oDAAoD,aAiClD,YAAY;QACZ,YAAY,EAnEU,mBAAmB,EAAE,kBAAkB,EAAE,yBAAyB,EAAE,iBAAiB,EAvB7G,YAAY;QACZ,UAAU;QACV,kBAAkB;QAClB,WAAW;QACX,eAAe;QACf,4BAA4B;QAC5B,YAAY;QACZ,gBAAgB;QAChB,YAAY;QACZ,eAAe;QACf,kBAAkB;QAClB,cAAc;QACd,sBAAsB;QACtB,sBAAsB;QACtB,iBAAiB;QACjB,kBAAkB;QAClB,mBAAmB;QACnB,gBAAgB;QAChB,eAAe;QACf,gBAAgB;QAChB,gBAAgB,oCAMhB,6BAA6B;QAC7B,2BAA2B;QAC3B,yBAAyB;QACzB,8BAA8B;QAC9B,uBAAuB;QACvB,gCAAgC;QAChC,qBAAqB;QACrB,8BAA8B;QAC9B,iCAAiC;QACjC,kCAAkC,EAIlC,0CAA0C;QAC1C,uCAAuC;QACvC,mCAAmC;QACnC,iCAAiC;QACjC,qCAAqC;QACrC,oCAAoC;QACpC,uCAAuC;QACvC,6CAA6C;QAC7C,uCAAuC;QAEvC,oDAAoD;QACpD,sDAAsD;QACtD,+CAA+C;QAC/C,oDAAoD;QACpD,sDAAsD;QACtD,oDAAoD;QACpD,kDAAkD;QAClD,oDAAoD,EAjC5B,mBAAmB,EAAE,kBAAkB,EAAE,yBAAyB,EAAE,iBAAiB;4IAoFlG,0BAA0B,aAT1B,CAAC,kBAAkB,EAAE,eAAe,EAAE,GAAG,sBAAsB,CAAC,YAVlE;YACP,YAAY;YACZ,YAAY;YACZ,GAAG,gBAAgB;YACnB,GAAG,SAAS;YACZ,kBAAkB,CAAC,UAAU,CAAC;gBAC5B,QAAQ,EAAE,EAAE,6BAA6B,EAAE;aAC5C,CAAC;SACH,EAzEuB,mBAAmB,EAAE,kBAAkB,EAAE,yBAAyB,EAAE,iBAAiB;4FAoFlG,0BAA0B;kBApBtC,QAAQ;mBAAC;oBACR,OAAO,EAAE;wBACP,YAAY;wBACZ,YAAY;wBACZ,GAAG,gBAAgB;wBACnB,GAAG,SAAS;wBACZ,kBAAkB,CAAC,UAAU,CAAC;4BAC5B,QAAQ,EAAE,EAAE,6BAA6B,EAAE;yBAC5C,CAAC;qBACH;oBACD,YAAY,EAAE,CAAC,GAAG,UAAU,EAAE,GAAG,uBAAuB,CAAC;oBACzD,SAAS,EAAE,CAAC,kBAAkB,EAAE,eAAe,EAAE,GAAG,sBAAsB,CAAC;oBAC3E,OAAO,EAAE,CAAC,GAAG,UAAU,EAAE,GAAG,uBAAuB,EAAE,GAAG,gBAAgB,CAAC;oBACzE,eAAe,EAAE;wBACf,gCAAgC;wBAChC,8BAA8B;wBAC9B,8BAA8B;wBAC9B,kCAAkC;qBACnC;iBACF;;;ACrLD;;;;;;"}