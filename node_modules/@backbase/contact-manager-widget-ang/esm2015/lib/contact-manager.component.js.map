{"version":3,"file":"contact-manager.component.js","sourceRoot":"","sources":["../../../../../libs/contact-manager-widget-ang/src/lib/contact-manager.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { RoutableWidget, RouterService } from '@backbase/foundation-ang/core';\nimport { Routes } from '@angular/router';\nimport { ContactsNavigationService } from './services/contacts-navigation.service';\n\nimport { ContactsDetailContainerComponent } from './containers/contacts-detail-container/contacts-detail-container.component';\nimport { ContactsFormContainerComponent } from './containers/contacts-form-container/contacts-form-container.component';\n\nimport { CanDeactivateGuard } from './services/can-deactivate-guard.service';\nimport { ContactsService } from './services/contacts.service';\nimport { ContactsTypeListContainerComponent } from './containers/contacts-type-list-container/contacts-type-list-container.component';\nimport { ContactManagerPreferencesService } from './services/contacts-preferences.service';\n\n/**\n * Returns the new instance of contactnavigationservice.\n *\n * @param {RouterService} service router service\n * @returns {ContactsNavigationService} new service instance\n */\nexport function makeNavigationService(service: RouterService) {\n  return new ContactsNavigationService(service);\n}\n\nexport const contactsRoutes: Routes = [\n  {\n    path: '',\n    component: ContactsDetailContainerComponent,\n  },\n  {\n    path: 'select',\n    component: ContactsTypeListContainerComponent,\n  },\n  {\n    path: ':id',\n    component: ContactsDetailContainerComponent,\n  },\n\n  {\n    path: 'edit/:id/:type',\n    canDeactivate: [CanDeactivateGuard],\n    component: ContactsFormContainerComponent,\n  },\n];\n\n@RoutableWidget({\n  routes: contactsRoutes,\n})\n/**\n * A widget for managing contacts.\n *\n * @usageNotes\n *\n * ### Include this widget in your `AppModule`:\n *\n * ```typescript\n * @NgModule({\n *   imports: [\n *     ContactManagerWidgetModule,\n *   ],\n *  providers:[{\n *     provide: ContactsNavigationService,\n *     useFactory: makeNavigationService,\n *     deps: [RouterService],\n *   }],\n *   ...\n * })\n * export class AppModule {}\n * ```\n *\n * ### Include this widget (standalone model)\n *\n * ```typescript\n * export const environment: Environment = {\n *   ...\n *   bootstrap: {\n *     pageModel: {\n *       name: 'root',\n *       properties: {},\n *       children: [\n *         {\n *           name: 'bb-contact-manager-ang',\n *           properties: {\n *             classId: 'ContactManagerWidgetModule',\n *             \"notificationDismissTime\": 0,\n *             \"createContactIBAN\": true,\n *             \"createContactPhone\": true,\n *             \"createContactAccount\": true,\n *             \"createContactEmail\": true\n *           },\n *         },\n *       ],\n *     },\n *   },\n * };\n * ```\n *\n * ### Routable Widget\n *\n * Using the `@CopyRoutes` for component\n *\n * ```typescript\n * @CopyRoutes(ContactManagerWidgetComponent)\n * export class ExtendedContactManagerWidgetComponent\n * ```\n * @ngModule ContactManagerWidgetModule\n */\n@Component({\n  selector: 'bb-contacts, bb-contact-manager-widget',\n  template: `\n    <bb-contacts-list-container>\n      <bb-router-outlet></bb-router-outlet>\n    </bb-contacts-list-container>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [\n    RouterService,\n    {\n      provide: ContactsNavigationService,\n      useFactory: makeNavigationService,\n      deps: [RouterService],\n    },\n    ContactsService,\n    ContactManagerPreferencesService,\n  ],\n})\nexport class ContactManagerWidgetComponent {\n  /**\n   * property to enable the creation of new contacts\n   */\n  @Input('newContact') set newContact(value: boolean) {\n    this.preferencesService.setNewContact(value);\n  }\n  /**\n   * Number of contacts per page\n   */\n  @Input('pageSize') set pageSize(value: number) {\n    this.preferencesService.setPageSize(value);\n  }\n  /**\n   * Max. number of navigation pages\n   */\n  @Input('maxNavPages') set maxNavPages(value: number) {\n    this.preferencesService.setMaxNavPages(value);\n  }\n  /**\n   * Pagination type (pagination, load-more)\n   */\n  @Input('paginationType') set paginationType(value: string) {\n    this.preferencesService.setPaginationType(value);\n  }\n  /**\n   * Milliseconds to dismiss any notification message\n   */\n  @Input('notificationDismissTime') set notificationDismissTime(value: number) {\n    this.preferencesService.setNotificationDismissTime(value);\n  }\n  /**\n   * property from user if the contact creation through email is allowed\n   */\n  @Input('createContactEmail') set createContactEmail(value: boolean) {\n    this.preferencesService.setCreateContactEmail(value);\n  }\n  /**\n   * property from user if the contact creation through IBAN is allowed\n   */\n  @Input('createContactIBAN') set createContactIBAN(value: boolean) {\n    this.preferencesService.setCreateContactIBAN(value);\n  }\n  /**\n   * property from user if the contact creation through Account Number is allowed\n   */\n  @Input('createContactAccount') set createContactAccount(value: boolean) {\n    this.preferencesService.setCreateContactAccount(value);\n  }\n  /**\n   * property from user if the contact creation through Phone Number is allowed\n   */\n  @Input('createContactPhone') set createContactPhone(value: boolean) {\n    this.preferencesService.setCreateContactPhone(value);\n  }\n\n  constructor(private readonly preferencesService: ContactManagerPreferencesService) {}\n}\n"]}