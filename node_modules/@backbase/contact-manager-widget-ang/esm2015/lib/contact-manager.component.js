import { __decorate, __metadata } from "tslib";
import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import { RoutableWidget, RouterService } from '@backbase/foundation-ang/core';
import { ContactsNavigationService } from './services/contacts-navigation.service';
import { ContactsDetailContainerComponent } from './containers/contacts-detail-container/contacts-detail-container.component';
import { ContactsFormContainerComponent } from './containers/contacts-form-container/contacts-form-container.component';
import { CanDeactivateGuard } from './services/can-deactivate-guard.service';
import { ContactsService } from './services/contacts.service';
import { ContactsTypeListContainerComponent } from './containers/contacts-type-list-container/contacts-type-list-container.component';
import { ContactManagerPreferencesService } from './services/contacts-preferences.service';
import * as i0 from "@angular/core";
import * as i1 from "./services/contacts-preferences.service";
import * as i2 from "./containers/contacts-list-container/contacts-list-container.component";
import * as i3 from "@backbase/foundation-ang/core";
/**
 * Returns the new instance of contactnavigationservice.
 *
 * @param {RouterService} service router service
 * @returns {ContactsNavigationService} new service instance
 */
export function makeNavigationService(service) {
    return new ContactsNavigationService(service);
}
export const contactsRoutes = [
    {
        path: '',
        component: ContactsDetailContainerComponent,
    },
    {
        path: 'select',
        component: ContactsTypeListContainerComponent,
    },
    {
        path: ':id',
        component: ContactsDetailContainerComponent,
    },
    {
        path: 'edit/:id/:type',
        canDeactivate: [CanDeactivateGuard],
        component: ContactsFormContainerComponent,
    },
];
let ContactManagerWidgetComponent = class ContactManagerWidgetComponent {
    constructor(preferencesService) {
        this.preferencesService = preferencesService;
    }
    /**
     * property to enable the creation of new contacts
     */
    set newContact(value) {
        this.preferencesService.setNewContact(value);
    }
    /**
     * Number of contacts per page
     */
    set pageSize(value) {
        this.preferencesService.setPageSize(value);
    }
    /**
     * Max. number of navigation pages
     */
    set maxNavPages(value) {
        this.preferencesService.setMaxNavPages(value);
    }
    /**
     * Pagination type (pagination, load-more)
     */
    set paginationType(value) {
        this.preferencesService.setPaginationType(value);
    }
    /**
     * Milliseconds to dismiss any notification message
     */
    set notificationDismissTime(value) {
        this.preferencesService.setNotificationDismissTime(value);
    }
    /**
     * property from user if the contact creation through email is allowed
     */
    set createContactEmail(value) {
        this.preferencesService.setCreateContactEmail(value);
    }
    /**
     * property from user if the contact creation through IBAN is allowed
     */
    set createContactIBAN(value) {
        this.preferencesService.setCreateContactIBAN(value);
    }
    /**
     * property from user if the contact creation through Account Number is allowed
     */
    set createContactAccount(value) {
        this.preferencesService.setCreateContactAccount(value);
    }
    /**
     * property from user if the contact creation through Phone Number is allowed
     */
    set createContactPhone(value) {
        this.preferencesService.setCreateContactPhone(value);
    }
};
/** @nocollapse */ ContactManagerWidgetComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactManagerWidgetComponent, deps: [{ token: i1.ContactManagerPreferencesService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ ContactManagerWidgetComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ContactManagerWidgetComponent, selector: "bb-contacts, bb-contact-manager-widget", inputs: { newContact: "newContact", pageSize: "pageSize", maxNavPages: "maxNavPages", paginationType: "paginationType", notificationDismissTime: "notificationDismissTime", createContactEmail: "createContactEmail", createContactIBAN: "createContactIBAN", createContactAccount: "createContactAccount", createContactPhone: "createContactPhone" }, providers: [
        RouterService,
        {
            provide: ContactsNavigationService,
            useFactory: makeNavigationService,
            deps: [RouterService],
        },
        ContactsService,
        ContactManagerPreferencesService,
    ], ngImport: i0, template: `
    <bb-contacts-list-container>
      <bb-router-outlet></bb-router-outlet>
    </bb-contacts-list-container>
  `, isInline: true, components: [{ type: i2.ContactsListContainerComponent, selector: "bb-contacts-list-container" }], directives: [{ type: i3.RouterOutletDirective, selector: "bb-router-outlet", outputs: ["activate", "deactivate"], exportAs: ["bbOutlet"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
ContactManagerWidgetComponent = __decorate([
    RoutableWidget({
        routes: contactsRoutes,
    })
    /**
     * A widget for managing contacts.
     *
     * @usageNotes
     *
     * ### Include this widget in your `AppModule`:
     *
     * ```typescript
     * @NgModule({
     *   imports: [
     *     ContactManagerWidgetModule,
     *   ],
     *  providers:[{
     *     provide: ContactsNavigationService,
     *     useFactory: makeNavigationService,
     *     deps: [RouterService],
     *   }],
     *   ...
     * })
     * export class AppModule {}
     * ```
     *
     * ### Include this widget (standalone model)
     *
     * ```typescript
     * export const environment: Environment = {
     *   ...
     *   bootstrap: {
     *     pageModel: {
     *       name: 'root',
     *       properties: {},
     *       children: [
     *         {
     *           name: 'bb-contact-manager-ang',
     *           properties: {
     *             classId: 'ContactManagerWidgetModule',
     *             "notificationDismissTime": 0,
     *             "createContactIBAN": true,
     *             "createContactPhone": true,
     *             "createContactAccount": true,
     *             "createContactEmail": true
     *           },
     *         },
     *       ],
     *     },
     *   },
     * };
     * ```
     *
     * ### Routable Widget
     *
     * Using the `@CopyRoutes` for component
     *
     * ```typescript
     * @CopyRoutes(ContactManagerWidgetComponent)
     * export class ExtendedContactManagerWidgetComponent
     * ```
     * @ngModule ContactManagerWidgetModule
     */
    ,
    __metadata("design:paramtypes", [ContactManagerPreferencesService])
], ContactManagerWidgetComponent);
export { ContactManagerWidgetComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactManagerWidgetComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-contacts, bb-contact-manager-widget',
                    template: `
    <bb-contacts-list-container>
      <bb-router-outlet></bb-router-outlet>
    </bb-contacts-list-container>
  `,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        RouterService,
                        {
                            provide: ContactsNavigationService,
                            useFactory: makeNavigationService,
                            deps: [RouterService],
                        },
                        ContactsService,
                        ContactManagerPreferencesService,
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i1.ContactManagerPreferencesService }]; }, propDecorators: { newContact: [{
                type: Input,
                args: ['newContact']
            }], pageSize: [{
                type: Input,
                args: ['pageSize']
            }], maxNavPages: [{
                type: Input,
                args: ['maxNavPages']
            }], paginationType: [{
                type: Input,
                args: ['paginationType']
            }], notificationDismissTime: [{
                type: Input,
                args: ['notificationDismissTime']
            }], createContactEmail: [{
                type: Input,
                args: ['createContactEmail']
            }], createContactIBAN: [{
                type: Input,
                args: ['createContactIBAN']
            }], createContactAccount: [{
                type: Input,
                args: ['createContactAccount']
            }], createContactPhone: [{
                type: Input,
                args: ['createContactPhone']
            }] } });
//# sourceMappingURL=contact-manager.component.js.map