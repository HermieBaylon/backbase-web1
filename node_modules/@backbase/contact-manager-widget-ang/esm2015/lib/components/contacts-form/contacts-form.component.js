import { ChangeDetectionStrategy, Component, Directive, EventEmitter, Inject, Input, Optional, Output, PLATFORM_ID, ViewContainerRef, } from '@angular/core';
import { FormBuilder } from '@angular/forms';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { isPlatformBrowser } from '@angular/common';
import { BB_CONTACT_FORM_ADDITIONS_TOKEN } from '../../config.providers';
import { AccountCreateType } from '../../models/types';
import { IbanMask } from '@backbase/contact-common-ang';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "../contacts-detail/contacts-detail.component";
import * as i3 from "@backbase/ui-ang/loading-indicator";
import * as i4 from "@backbase/ui-ang/input-text";
import * as i5 from "@backbase/ui-ang/input-validation-message";
import * as i6 from "@backbase/ui-ang/input-email";
import * as i7 from "@angular/common";
import * as i8 from "@backbase/contact-common-ang";
import * as i9 from "@backbase/ui-ang/button";
/**
 * Displays a contact form.
 *
 * The following extension slots are available in this component:
 *  - `ContactsFormCustomizableDirective`
 *
 * @see ContactsFormCustomizableDirective
 * @usageNotes
 *
 * ### Display a form for adding / editing the contact form.
 *
 * ```html
 *  <bb-contacts-form
 *   [item]="item"
 *   [type]="itemType$ | async"
 *   (save)="save($event)"
 *   (cancelEdit)="cancelEdit($event)"
 *   (backEvent)="back($event)"
 *   (deleteContactsItem)="deleteContactsItem($event)"
 * ></bb-contacts-form>
 * ```
 * @ngModule ContactManagerWidgetModule
 */
export class ContactsFormComponent {
    constructor(fb, vcRef, platformId, formAdditionsConfig) {
        this.fb = fb;
        this.vcRef = vcRef;
        this.platformId = platformId;
        this.formAdditionsConfig = formAdditionsConfig;
        this.hostRef = this;
        this.submitted = false;
        this.ibanMask = IbanMask;
        /**
         * Controls whether form can be submitted
         */
        this.disabledSubmit = false;
        /**
         * Event emitted when contact edit is saved
         */
        this.save = new EventEmitter();
        /**
         * Event emitted when contact edit is cancelled
         */
        this.cancelEdit = new EventEmitter();
        /**
         * Event emitted when user clicks back
         */
        this.backEvent = new EventEmitter();
        /**
         * Event emitted when contact is deleted
         */
        this.deleteContactsItem = new EventEmitter();
        /**
         * Contact account Type reference.
         */
        this.createAccountTypeRef = AccountCreateType;
    }
    /**
     * OnInit - lifecycle hook.
     */
    ngOnInit() {
        if (this.item === undefined) {
            throw new Error('`item` input is required in `bb-contact-form` component');
        }
    }
    /**
     * AfterViewInt- lifecycle hook.
     */
    ngAfterViewInit() {
        var _a;
        if (isPlatformBrowser(this.platformId)) {
            (_a = this.vcRef.element.nativeElement.querySelector('input')) === null || _a === void 0 ? void 0 : _a.focus();
        }
    }
    /**
     * OnChanges - lifecycle hook.
     *
     * @param {SimpleChanges} changes angular SimpleChanges object
     */
    ngOnChanges(changes) {
        if (changes.type) {
            this.submitted = false;
            this.contactsForm = this.createFormGroupInstance();
        }
    }
    createFormGroupInstance() {
        const { additions } = Object.assign({}, this.formAdditionsConfig);
        return this.fb.group(Object.assign({ name: [this.item.name], IBAN: [this.item.IBAN], accountNumber: [this.item.accountNumber], email: [this.item.email], phoneNumber: [this.item.phoneNumber] }, (additions ? { additions: this.fb.group(additions) } : {})));
    }
    /**
     * saveItem - method that emits the data when saved.
     */
    saveItem() {
        this.submitted = true;
        if (this.contactsForm.valid) {
            this.save.emit(Object.assign(Object.assign({}, this.item), (this.contactsForm ? this.contactsForm.value : {})));
        }
        else {
            this.contactsForm.markAllAsTouched();
        }
    }
    /**
     * emits the id of the contact that has cancelled.
     */
    cancel() {
        this.cancelEdit.emit(this.item.id);
    }
    /**
     * emits the id, when back is clicked.
     */
    back() {
        this.backEvent.emit(this.item.id);
    }
    get name() {
        return this.contactsForm.get('name');
    }
    get iban() {
        return this.contactsForm.get('IBAN');
    }
    get accountNumber() {
        return this.contactsForm.get('accountNumber');
    }
    /**
     *  the id of the contact is emitted when deleted.
     */
    deleteItemEmit() {
        this.deleteContactsItem.emit(this.item.id);
    }
}
/** @nocollapse */ ContactsFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsFormComponent, deps: [{ token: i1.FormBuilder }, { token: i0.ViewContainerRef }, { token: PLATFORM_ID }, { token: BB_CONTACT_FORM_ADDITIONS_TOKEN, optional: true }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ ContactsFormComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ContactsFormComponent, selector: "bb-contacts-form", inputs: { item: "item", type: "type", disabledSubmit: "disabledSubmit" }, outputs: { save: "save", cancelEdit: "cancelEdit", backEvent: "backEvent", deleteContactsItem: "deleteContactsItem" }, usesOnChanges: true, ngImport: i0, template: "<ng-container bbContactsFormCustomizable [bbHostRef]=\"hostRef\" [bbTemplateContext]=\"item\"></ng-container>\n<ng-template bbContactsFormCustomizable let-hostRef>\n  <bb-contacts-detail\n    [showDetail]=\"false\"\n    [item]=\"hostRef.item\"\n    [type]=\"hostRef.type\"\n    (deleteContactsItem)=\"hostRef.deleteItemEmit()\"\n  ></bb-contacts-detail>\n  <bb-loading-indicator-ui *ngIf=\"hostRef.disabledSubmit\"></bb-loading-indicator-ui>\n  <form\n    *ngIf=\"hostRef.contactsForm\"\n    [hidden]=\"hostRef.disabledSubmit\"\n    (submit)=\"hostRef.saveItem()\"\n    [formGroup]=\"hostRef.contactsForm\"\n    class=\"bb-block bb-block--xl\"\n  >\n    <div class=\"row\">\n      <div class=\"bb-block bb-block--xl col-12\" data-role=\"contact-account-info-account-name1\">\n        <bb-input-text-ui\n          id=\"bb-create-contact-name\"\n          data-role=\"new-contact-name\"\n          label=\"Name\"\n          i18n-label=\"Contacts name label | Label for contacts detail component name@@contact-manager-form.label.name\"\n          [formControl]=\"hostRef.contactsForm.controls.name\"\n          [maxLength]=\"140\"\n          [required]=\"true\"\n          bbNoWhiteSpace\n        >\n        </bb-input-text-ui>\n        <bb-input-validation-message-ui\n          class=\"position-absolute\"\n          role=\"alert\"\n          [showErrors]=\"hostRef.contactsForm.controls.name.errors?.required && hostRef.contactsForm.controls.name.touched\"\n        >\n          <span\n            i18n=\"\n                Contacts name required error text | Text for contacts detail component name required\n                error@@contact-manager-form.label.nameRequired\n              \"\n            data-role=\"missing-account-name\"\n          >\n            Name is required\n          </span>\n        </bb-input-validation-message-ui>\n      </div>\n      <div class=\"bb-block bb-block--xl col-12\">\n        <ng-container [ngSwitch]=\"hostRef.type\">\n          <ng-container *ngSwitchCase=\"hostRef.createAccountTypeRef.IBAN\">\n            <ng-container *ngTemplateOutlet=\"iban\"></ng-container>\n          </ng-container>\n          <ng-container *ngSwitchCase=\"hostRef.createAccountTypeRef.EMAIL\">\n            <ng-container *ngTemplateOutlet=\"email\"></ng-container>\n          </ng-container>\n          <ng-container *ngSwitchCase=\"hostRef.createAccountTypeRef.PHONE\">\n            <ng-container *ngTemplateOutlet=\"phone\"></ng-container>\n          </ng-container>\n          <ng-container *ngSwitchCase=\"hostRef.createAccountTypeRef.ACCOUNT\">\n            <ng-container *ngTemplateOutlet=\"bban\"></ng-container>\n          </ng-container>\n          <ng-container *ngSwitchDefault>\n            <ng-container *ngTemplateOutlet=\"iban\"></ng-container>\n          </ng-container>\n        </ng-container>\n      </div>\n    </div>\n    <div class=\"bb-button-bar bb-button-bar--spacing-sm\">\n      <button\n        bbButton\n        class=\"bb-button-bar__button\"\n        type=\"submit\"\n        color=\"primary\"\n        name=\"save\"\n        data-role=\"save-button\"\n        i18n=\"Save current form | Save button text for saving a contact item@@contact-manager-form.button.save\"\n        [disabled]=\"hostRef.submitted && hostRef.contactsForm.invalid || hostRef.disabledSubmit\"\n      >\n        Save\n      </button>\n      <button\n        bbButton\n        color=\"secondary\"\n        type=\"button\"\n        class=\"bb-button-bar__button\"\n        name=\"back\"\n        data-role=\"contacts-form-back-button\"\n        i18n=\"\n        Back action in current form | Back button text for going back to selection@@contact-manager-form.button.back\n      \"\n        (click)=\"hostRef.back()\"\n      >\n        Back\n      </button>\n      <button\n        bbButton\n        color=\"link-text\"\n        type=\"button\"\n        class=\"bb-button-bar__button bb-button-bar__button--across\"\n        name=\"cancel\"\n        data-role=\"contacts-form-cancel-button\"\n        i18n=\"\n          Cancel action in current form | Cancel button text for cancelling a creation of a new\n          contact@@contact-manager-form.button.cancel\n        \"\n        (click)=\"hostRef.cancel()\"\n      >\n        Cancel\n      </button>\n    </div>\n  </form>\n\n  <ng-template #iban>\n    <bb-input-text-ui\n      id=\"bb-create-contact-iban\"\n      label=\"IBAN\"\n      i18n-label=\"@@contact-manager-form.label.bban\"\n      data-role=\"new-contact-iban\"\n      [formControl]=\"hostRef.contactsForm.controls.IBAN\"\n      [maxLength]=\"hostRef.ibanMask.length\"\n      [required]=\"true\"\n      [mask]=\"hostRef.ibanMask\"\n      [maskValidator]=\"false\"\n      bbIbanValidator\n    >\n    </bb-input-text-ui>\n\n    <ng-container\n      *ngTemplateOutlet=\"err; context:{ control: hostRef.contactsForm.controls.IBAN, errorMessageAcctType: hostRef.type }\"\n    >\n    </ng-container>\n\n    <bb-input-validation-message-ui\n      class=\"position-absolute\"\n      role=\"alert\"\n      [showErrors]=\"hostRef.contactsForm.controls.IBAN.touched\n      && hostRef.contactsForm.controls.IBAN.errors?.invalidIban\"\n    >\n      <ng-container>\n        <span\n          i18n=\"\n            Contacts account number invalid error text | Text for contacts detail component iban invalid\n            error@@contact-manager-form.label.ibanInvalid\n          \"\n          data-role=\"invalid-account-number-error-label\"\n        >\n          Invalid IBAN\n        </span>\n      </ng-container>\n    </bb-input-validation-message-ui>\n  </ng-template>\n\n  <ng-template #bban>\n    <bb-input-text-ui\n      id=\"bb-create-contact-bban\"\n      label=\"Account number\"\n      i18n-label=\"@@contact-manager-form.label.account.number\"\n      data-role=\"new-contact-bban\"\n      [formControl]=\"hostRef.contactsForm.controls.accountNumber\"\n      [maxLength]=\"34\"\n      [required]=\"true\"\n    >\n    </bb-input-text-ui>\n\n    <ng-container\n      *ngTemplateOutlet=\"err; context:{ control: hostRef.contactsForm.controls.accountNumber, errorMessageAcctType: hostRef.type }\"\n    >\n    </ng-container>\n  </ng-template>\n\n  <ng-template #email>\n    <label\n      #contactsEmailLabel\n      id=\"bb-create-contact-email-label\"\n      data-role=\"contact-account-create-email-label\"\n      i18n=\"@@contact-personal-data.contactEmail.label\"\n      class=\"mb-2\"\n    >\n      Email\n      <small class=\"d-block bb-text-support bb-text-default\">E.g. sarawilliams@backbase.com</small>\n    </label>\n    <bb-input-email-ui\n      [aria-labelledby]=\"contactsEmailLabel.id\"\n      [formControl]=\"hostRef.contactsForm.controls.email\"\n      [maxLength]=\"255\"\n      [required]=\"true\"\n      data-role=\"new-contact-email\"\n      bbEmailDomainValidator\n    >\n    </bb-input-email-ui>\n\n    <ng-container\n      *ngTemplateOutlet=\"err; context:{ control: hostRef.contactsForm.controls.email, errorMessageAcctType: hostRef.type }\"\n    >\n    </ng-container>\n    <bb-input-validation-message-ui\n      class=\"position-absolute\"\n      role=\"alert\"\n      [showErrors]=\"hostRef.contactsForm.controls.email.touched\n      && hostRef.contactsForm.controls.email.errors?.email\"\n    >\n      <ng-container>\n        <span\n          i18n=\"\n          Contacts email id invalid error text | Text for contacts detail component email invalid\n          error@@contact-manager-form.label.email.invalid\n        \"\n          data-role=\"invalid-email-error-label\"\n        >\n          Invalid email\n        </span>\n      </ng-container>\n    </bb-input-validation-message-ui>\n  </ng-template>\n\n  <ng-template #phone>\n    <label\n      #contactsPhoneLabel\n      id=\"bb-create-contact-phone-label\"\n      data-role=\"contact-account-create-phone\"\n      i18n=\"@@contact-manager-form.label.phoneNumber\"\n      class=\"mb-2\"\n    >\n      Phone number\n      <small id=\"example-number\" class=\"d-block bb-text-support bb-text-default\">E.g. +12027953213</small>\n    </label>\n    <bb-input-text-ui\n      [formControl]=\"hostRef.contactsForm.controls.phoneNumber\"\n      [maxLength]=\"30\"\n      [required]=\"true\"\n      [aria-labelledby]=\"contactsPhoneLabel.id\"\n      aria-describedby=\"example-number\"\n      data-role=\"new-contact-phone\"\n    >\n    </bb-input-text-ui>\n    <ng-container\n      *ngTemplateOutlet=\"err; context:{ control: hostRef.contactsForm.controls.phoneNumber && hostRef.contactsForm.controls.phoneNumber, errorMessageAcctType: hostRef.type }\"\n    >\n    </ng-container>\n  </ng-template>\n\n  <ng-template #err let-control=\"control\" let-errorMessageAcctType=\"errorMessageAcctType\">\n    <bb-input-validation-message-ui\n      class=\"position-absolute\"\n      role=\"alert\"\n      [showErrors]=\"control.errors?.required\n    && control.touched\n\"\n    >\n      <ng-container [ngSwitch]=\"errorMessageAcctType\">\n        <span\n          *ngSwitchCase=\"hostRef.createAccountTypeRef.ACCOUNT\"\n          i18n=\"\n            Contacts account number required error text | Text for contacts detail component account number required\n            error@@contact-manager-form.label.account.required\n          \"\n          data-role=\"missing-account-number-error-label\"\n        >\n          Account number is required\n        </span>\n        <span\n          *ngSwitchCase=\"hostRef.createAccountTypeRef.IBAN\"\n          i18n=\"\n            Contacts IBAN required error text | Text for contacts detail component IBAN required\n            error@@contact-manager-form.label.iban.required\n          \"\n          data-role=\"missing-account-number-error-label\"\n        >\n          IBAN is required\n        </span>\n        <span\n          *ngSwitchCase=\"hostRef.createAccountTypeRef.PHONE\"\n          i18n=\"\n            Contacts Phone number required error text | Text for contacts detail component Phone required\n            error@@contact-manager-form.label.phone.number.required\n          \"\n          data-role=\"missing-phone-number-error-label\"\n        >\n          Phone number is required\n        </span>\n        <span\n          *ngSwitchCase=\"hostRef.createAccountTypeRef.EMAIL\"\n          i18n=\"\n            Contacts EMAIL required error text | Text for contacts detail component Email required\n            error@@contact-manager-form.label.email.required\n          \"\n          data-role=\"missing-email-error-label\"\n        >\n          Email is required\n        </span>\n      </ng-container>\n    </bb-input-validation-message-ui>\n  </ng-template>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i2.ContactsDetailComponent; }), selector: "bb-contacts-detail", inputs: ["type", "showDetail", "item"], outputs: ["editContactsItem", "deleteContactsItem"] }, { type: i0.forwardRef(function () { return i3.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i0.forwardRef(function () { return i4.InputTextComponent; }), selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i0.forwardRef(function () { return i5.InputValidationMessageComponent; }), selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i0.forwardRef(function () { return i6.InputEmailComponent; }), selector: "bb-input-email-ui", inputs: ["placeholder", "maxLength", "minLength", "readonly", "autocomplete"] }], directives: [{ type: i0.forwardRef(function () { return ContactsFormCustomizableDirective; }), selector: "[bbContactsFormCustomizable]" }, { type: i0.forwardRef(function () { return i7.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i1.ɵNgNoValidate; }), selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i0.forwardRef(function () { return i1.NgControlStatusGroup; }), selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i0.forwardRef(function () { return i1.FormGroupDirective; }), selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i0.forwardRef(function () { return i8.NoWhiteSpaceValidatorDirective; }), selector: "[bbNoWhiteSpace]" }, { type: i0.forwardRef(function () { return i1.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0.forwardRef(function () { return i1.FormControlDirective; }), selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i0.forwardRef(function () { return i1.RequiredValidator; }), selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i0.forwardRef(function () { return i7.NgSwitch; }), selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i0.forwardRef(function () { return i7.NgSwitchCase; }), selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i0.forwardRef(function () { return i7.NgTemplateOutlet; }), selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i0.forwardRef(function () { return i7.NgSwitchDefault; }), selector: "[ngSwitchDefault]" }, { type: i0.forwardRef(function () { return i9.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0.forwardRef(function () { return i8.IbanValidatorDirective; }), selector: "[bbIbanValidator]" }, { type: i0.forwardRef(function () { return i8.EmailDomainValidatorDirective; }), selector: "[bbEmailDomainValidator]" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsFormComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-contacts-form',
                    templateUrl: './contacts-form.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.FormBuilder }, { type: i0.ViewContainerRef }, { type: Object, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [BB_CONTACT_FORM_ADDITIONS_TOKEN]
                }] }]; }, propDecorators: { item: [{
                type: Input
            }], type: [{
                type: Input
            }], disabledSubmit: [{
                type: Input
            }], save: [{
                type: Output
            }], cancelEdit: [{
                type: Output
            }], backEvent: [{
                type: Output
            }], deleteContactsItem: [{
                type: Output
            }] } });
/**
 * This is an extension slot to be used for customizing an form of contacts editing.
 *
 * @usageNotes
 *
 * ### Display a contact form.
 *
 * ```html
 *  <bb-contacts-detail
 *   [showDetail]="false"
 *   [item]="hostRef.item"
 *   [type]="hostRef.type"
 *   (deleteContactsItem)="hostRef.deleteItemEmit()"
 * ></bb-contacts-detail>
 * <form
 *  *ngIf="hostRef.contactsForm"
 *   (submit)="hostRef.saveItem()"
 *   [formGroup]="hostRef.contactsForm"
 *   class="bb-block bb-block--xl"
 * >
 *   <fieldSet>
 *     <div class="row">
 *       <div
 *         class="bb-block bb-block--lg col-12"
 *         data-role="contact-account-info-account-name1"
 *       >
 *         <label
 *           [for]="contactsName.id"
 *           data-role="edit-contact-label"
 *           i18n="Contacts name label | Label for contacts detail component name@@contact-manager-form.label.name"
 *         >
 *           Name
 *         </label>
 *         <bb-input-text-ui
 *           data-role="new-contact-name"
 *           [formControl]="hostRef.contactsForm.controls.name"
 *           name="contactsName"
 *           #contactsName
 *           [maxLength]="140"
 *           [required]="hostRef.submitted"
 *         >
 *         </bb-input-text-ui>
 *
 *         <bb-input-validation-message-ui
 *           role="alert"
 *           [showErrors]="
 *             hostRef.contactsForm.controls.name.invalid &&
 *             (hostRef.contactsForm.controls.name.dirty || hostRef.contactsForm.controls.name.touched)
 *           ">
 *           <ng-container
 *           *ngIf="hostRef.contactsForm.controls.name.errors?.required || hostRef.contactsForm.controls.name.errors?.minlength">
 *             <span
 *               i18n="
 *                 Contacts name required error text | Text for contacts detail component name required
 *                 error@@contact-manager-form.label.nameRequired
 *               "
 *               data-role="missing-account-name">
 *               Name is required
 *             </span>
 *           </ng-container>
 *         </bb-input-validation-message-ui>
 *       </div>
 *       <div class="bb-block bb-block--lg col-12">
 *         <ng-container [ngSwitch]="hostRef.type">
 *           <ng-container *ngSwitchCase="hostRef.createAccountTypeRef.IBAN">
 *             <ng-container *ngTemplateOutlet="iban"></ng-container>
 *           </ng-container>
 *           <ng-container *ngSwitchCase="hostRef.createAccountTypeRef.EMAIL">
 *             <ng-container *ngTemplateOutlet="email"></ng-container>
 *           </ng-container>
 *           <ng-container *ngSwitchCase="hostRef.createAccountTypeRef.PHONE">
 *             <ng-container *ngTemplateOutlet="phone"></ng-container>
 *           </ng-container>
 *           <ng-container *ngSwitchCase="hostRef.createAccountTypeRef.ACCOUNT">
 *             <ng-container *ngTemplateOutlet="bban"></ng-container>
 *           </ng-container>
 *           <ng-container *ngSwitchDefault>
 *             <ng-container *ngTemplateOutlet="iban"></ng-container>
 *           </ng-container>
 *         </ng-container>
 *
 *       </div>
 *     </div>
 *   </fieldSet>
 *   <div class="bb-button-bar">
 *     <button
 *       bbButton
 *       type="submit"
 *       color="primary"
 *       type="submit"
 *       [disabled]="hostRef.contactsForm.invalid || !hostRef.contactsForm?.controls?.name?.value.trim()"
 *       class="bb-button-bar__button"
 *       name="save"
 *       data-role="save-button"
 *       i18n="Save current form | Save button text for saving a contact item@@contact-manager-form.button.save"
 *     >
 *       Save
 *     </button>
 *     <button
 *     bbButton
 *     color="secondary"
 *     (click)="hostRef.back()"
 *     type="button"
 *     class="bb-button-bar__button"
 *     name="back"
 *     data-role="contacts-form-back-button"
 *     i18n="
 *       Back action in current form | Back button text for going back to selection@@contact-manager-form.button.back
 *     "
 *   >
 *     Back
 *   </button>
 *     <button
 *       bbButton
 *       color="link-text"
 *       (click)="hostRef.cancel()"
 *       type="button"
 *       class="bb-button-bar__button bb-button-bar__button--across"
 *       name="cancel"
 *       data-role="contacts-form-cancel-button"
 *       i18n="
 *         Cancel action in current form | Cancel button text for cancelling a creation of a new
 *         contact@@contact-manager-form.button.cancel
 *       "
 *     >
 *       Cancel
 *     </button>
 *   </div>
 * </form>
 * </ng-template>
 * ```
 * @ngModule ContactManagerWidgetModule
 */
export class ContactsFormCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ ContactsFormCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsFormCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ ContactsFormCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ContactsFormCustomizableDirective, selector: "[bbContactsFormCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsFormCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbContactsFormCustomizable]',
                }]
        }] });
//# sourceMappingURL=contacts-form.component.js.map