import { Component, EventEmitter, Input, Output, QueryList, ViewChildren, } from '@angular/core';
import { Subject } from 'rxjs';
import { startWith, takeUntil } from 'rxjs/operators';
import { AccountCreateType } from '../../models/types';
import * as i0 from "@angular/core";
import * as i1 from "./list-item/contact-list-item.component";
import * as i2 from "@angular/common";
/**
 * Displays a list of all contacts
 *
 * @usageNotes
 *
 * ### Display a list of types of contact that can be created
 *
 * ```html
 * <bb-contacts-list-widget
 *       [items]="items.contacts"
 *       [showAlias]="false"
 *     >
 *  </bb-contacts-list-widget>
 * ```
 *
 * ### Additionally update the list
 *
 * ```html
 *  <bb-contacts-list-widget
 *       [items]="items.contacts"
 *       (selectedChange)="hostRef.select($event)"
 *       (formItemChange)="hostRef.edit($event)"
 *       [showAlias]="false"
 *     >
 *   </bb-contacts-list-widget>
 * ```
 * @ngModule ContactManagerWidgetModule
 */
export class ContactsListWidgetComponent {
    constructor() {
        /**
         * Event that is emitted when selected item changes
         */
        this.selectedChange = new EventEmitter();
        this.focused = 0;
        this.contactItemArray = [];
        this.accountTypeSelected = AccountCreateType.IBAN;
        this.gc$ = new Subject();
        this.createAccountTypeRef = AccountCreateType;
    }
    /**
     * AfterViewInit- lifecycle hook.
     */
    ngAfterViewInit() {
        this.contactItem.changes
            .pipe(startWith(this.contactItem))
            .pipe(takeUntil(this.gc$))
            .subscribe((data) => {
            this.contactItemArray = data.toArray();
        });
    }
    /**
     * onDestroy - lifecycle hook.
     */
    ngOnDestroy() {
        this.gc$.next();
        this.gc$.complete();
    }
    /**
     * getTabIndex defines if item can be reached by Tab,
     * which only the focused item can
     *
     * @param {number} i index of an element
     * @returns {number} [tabindex] parameter value
     */
    getTabIndex(i) {
        return i === this.focused ? '0' : '-1';
    }
    /**
     * Prevents focus from going beyond the limits of the list
     *
     * @param {number} desiredFocus index of an element
     * @returns {number} index of an element within bounds
     */
    clampDesiredFocus(desiredFocus) {
        return Math.max(0, Math.min(desiredFocus, this.items.length - 1));
    }
    /**
     * Implements keyboard controls for the contact list.
     * Call on key down events to move the focus to the appropriate element.
     *
     * @param {Event} event HTMLEvent object
     * @param {number} desiredFocus index of an element
     */
    onChangeFocusItemTo(event, desiredFocus) {
        var _a, _b;
        event.preventDefault();
        const realisticFocus = this.clampDesiredFocus(desiredFocus);
        if (this.focused === realisticFocus)
            return;
        this.focused = realisticFocus;
        (_b = (_a = this.contactItem.find((_, i) => i === this.focused)) === null || _a === void 0 ? void 0 : _a.nativeElement) === null || _b === void 0 ? void 0 : _b.focus();
    }
    /**
     *
     * @param {string} id - Id of the selcted contact
     * @param {number} index - index of the selected contact
     */
    onContactSelect(id, index) {
        this.focused = index;
        this.accountTypeSelected = '';
        this.selectedChange.emit(id);
    }
    /**
     * isListHeading defines if grouping heading
     * should be added before list item
     *
     * @param {ContactItem} item ContactItem object
     * @param {number} index index of an element
     * @returns {boolean} whether item a list heading
     */
    isListHeading(item, index) {
        const char = this.getGroupHeadingChar(item.name.trim());
        if (this.latestSeparator !== char || !index) {
            this.latestSeparator = char;
            return true;
        }
        return false;
    }
    /**
     * hasNoSeparatorClass tells if the list item
     * should have bb-grouped-list__item--no-separator class.
     *
     * @param {number} index index of an element
     * @returns {boolean} whether element should have separator class
     */
    hasNoSeparatorClass(index) {
        const nextItem = this.items[index + 1];
        if (!nextItem) {
            return false;
        }
        else {
            const nextChar = this.getGroupHeadingChar(nextItem.name.trim());
            if (this.latestSeparator !== nextChar) {
                return true;
            }
        }
        return false;
    }
    getGroupHeadingChar(name) {
        return String.fromCodePoint(name.codePointAt(0)).toUpperCase();
    }
}
/** @nocollapse */ ContactsListWidgetComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsListWidgetComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ ContactsListWidgetComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ContactsListWidgetComponent, selector: "bb-contacts-list-widget", inputs: { items: "items", selectedItemId: "selectedItemId", showAlias: "showAlias" }, outputs: { selectedChange: "selectedChange" }, viewQueries: [{ propertyName: "contactItem", predicate: ["contactItem"], descendants: true }], ngImport: i0, template: "<div *ngIf=\"items && items.length\">\n  <ul class=\"bb-grouped-list\" data-role=\"existing-contact\" role=\"list\">\n    <ng-container *ngFor=\"let item of items; let i = index\">\n      <li\n        *ngIf=\"isListHeading(item, i)\"\n        class=\"bb-grouped-list__group bb-text-support bb-text-bold\"\n        data-role=\"header-row\"\n      >\n        {{ latestSeparator }}\n      </li>\n      <li\n        class=\"bb-grouped-list__item\"\n        role=\"button\"\n        data-role=\"contact-manager-list-item\"\n        [tabindex]=\"getTabIndex(i)\"\n        [attr.aria-pressed]=\"selectedItemId === item.id\"\n        [ngClass]=\"{\n          'bb-grouped-list__item--is-active': selectedItemId === item.id,\n          'bb-grouped-list__item--no-separator': hasNoSeparatorClass(i)\n        }\"\n        (keydown.Home)=\"onChangeFocusItemTo($event, 0)\"\n        (keydown.ArrowUp)=\"onChangeFocusItemTo($event, i-1)\"\n        (keydown.ArrowDown)=\"onChangeFocusItemTo($event, i+1)\"\n        (keydown.End)=\"onChangeFocusItemTo($event, items.length)\"\n        (click)=\"onContactSelect(item.id, i)\"\n        (keyup.Space)=\"onContactSelect(item.id, i)\"\n        (keyup.Enter)=\"onContactSelect(item.id, i)\"\n        #contactItem\n      >\n        <bb-contact-list-item\n          [contactItem]=\"item\"\n          [showAccountNumber]=\"true\"\n          [showAlias]=\"showAlias\"\n        ></bb-contact-list-item>\n      </li>\n    </ng-container>\n  </ul>\n</div>\n", components: [{ type: i1.ContactsListItemComponent, selector: "bb-contact-list-item", inputs: ["contactItem", "showAccountNumber", "showAlias"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsListWidgetComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-contacts-list-widget',
                    templateUrl: './contact-list.component.html',
                }]
        }], propDecorators: { items: [{
                type: Input
            }], selectedChange: [{
                type: Output
            }], selectedItemId: [{
                type: Input
            }], contactItem: [{
                type: ViewChildren,
                args: ['contactItem']
            }], showAlias: [{
                type: Input
            }] } });
//# sourceMappingURL=contact-list.component.js.map