{"version":3,"file":"contact-list.component.js","sourceRoot":"","sources":["../../../../../../../libs/contact-manager-widget-ang/src/lib/components/contacts-list/contact-list.component.ts","../../../../../../../libs/contact-manager-widget-ang/src/lib/components/contacts-list/contact-list.component.html"],"names":[],"mappings":"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","sourcesContent":["import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChildren,\n} from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { ContactItem } from '@backbase/contact-common-ang';\nimport { startWith, takeUntil } from 'rxjs/operators';\nimport { AccountCreateType } from '../../models/types';\n\n/**\n * Displays a list of all contacts\n *\n * @usageNotes\n *\n * ### Display a list of types of contact that can be created\n *\n * ```html\n * <bb-contacts-list-widget\n *       [items]=\"items.contacts\"\n *       [showAlias]=\"false\"\n *     >\n *  </bb-contacts-list-widget>\n * ```\n *\n * ### Additionally update the list\n *\n * ```html\n *  <bb-contacts-list-widget\n *       [items]=\"items.contacts\"\n *       (selectedChange)=\"hostRef.select($event)\"\n *       (formItemChange)=\"hostRef.edit($event)\"\n *       [showAlias]=\"false\"\n *     >\n *   </bb-contacts-list-widget>\n * ```\n * @ngModule ContactManagerWidgetModule\n */\n@Component({\n  selector: 'bb-contacts-list-widget',\n  templateUrl: './contact-list.component.html',\n})\nexport class ContactsListWidgetComponent implements AfterViewInit, OnDestroy {\n  /**\n   * Array of contacts\n   */\n  @Input()\n  items!: Array<ContactItem>;\n  /**\n   * Event that is emitted when selected item changes\n   */\n  @Output() selectedChange = new EventEmitter<string>();\n  /**\n   * The id of current selected contact item\n   */\n  @Input()\n  selectedItemId!: string;\n\n  @ViewChildren('contactItem')\n  contactItem!: QueryList<ElementRef<HTMLLIElement>>;\n  /**\n   * to show Alias in the contact list. default is false\n   */\n  @Input()\n  showAlias!: boolean;\n\n  private focused = 0;\n  contactItemArray: ElementRef[] = [];\n  accountTypeSelected: string = AccountCreateType.IBAN;\n  gc$ = new Subject();\n  public latestSeparator!: string;\n\n  public readonly createAccountTypeRef = AccountCreateType;\n\n  /**\n   * AfterViewInit- lifecycle hook.\n   */\n  ngAfterViewInit(): void {\n    this.contactItem.changes\n      .pipe(startWith(this.contactItem))\n      .pipe(takeUntil(this.gc$))\n      .subscribe((data: QueryList<ElementRef>) => {\n        this.contactItemArray = data.toArray();\n      });\n  }\n\n  /**\n   * onDestroy - lifecycle hook.\n   */\n  ngOnDestroy(): void {\n    this.gc$.next();\n    this.gc$.complete();\n  }\n\n  /**\n   * getTabIndex defines if item can be reached by Tab,\n   * which only the focused item can\n   *\n   * @param {number} i index of an element\n   * @returns {number} [tabindex] parameter value\n   */\n  public getTabIndex(i: number): '0' | '-1' {\n    return i === this.focused ? '0' : '-1';\n  }\n\n  /**\n   * Prevents focus from going beyond the limits of the list\n   *\n   * @param {number} desiredFocus index of an element\n   * @returns {number} index of an element within bounds\n   */\n  private clampDesiredFocus(desiredFocus: number): number {\n    return Math.max(0, Math.min(desiredFocus, this.items.length - 1));\n  }\n\n  /**\n   * Implements keyboard controls for the contact list.\n   * Call on key down events to move the focus to the appropriate element.\n   *\n   * @param {Event} event HTMLEvent object\n   * @param {number} desiredFocus index of an element\n   */\n  onChangeFocusItemTo(event: Event, desiredFocus: number): void {\n    event.preventDefault();\n\n    const realisticFocus = this.clampDesiredFocus(desiredFocus);\n    if (this.focused === realisticFocus) return;\n\n    this.focused = realisticFocus;\n    this.contactItem.find((_, i) => i === this.focused)?.nativeElement?.focus();\n  }\n\n  /**\n   *\n   * @param {string} id - Id of the selcted contact\n   * @param {number} index - index of the selected contact\n   */\n  onContactSelect(id: string, index: number) {\n    this.focused = index;\n    this.accountTypeSelected = '';\n    this.selectedChange.emit(id);\n  }\n\n  /**\n   * isListHeading defines if grouping heading\n   * should be added before list item\n   *\n   * @param {ContactItem} item ContactItem object\n   * @param {number} index index of an element\n   * @returns {boolean} whether item a list heading\n   */\n  public isListHeading(item: ContactItem, index: number): boolean {\n    const char = this.getGroupHeadingChar(item.name.trim());\n    if (this.latestSeparator !== char || !index) {\n      this.latestSeparator = char;\n\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * hasNoSeparatorClass tells if the list item\n   * should have bb-grouped-list__item--no-separator class.\n   *\n   * @param {number} index index of an element\n   * @returns {boolean} whether element should have separator class\n   */\n  public hasNoSeparatorClass(index: number): boolean {\n    const nextItem = this.items[index + 1];\n    if (!nextItem) {\n      return false;\n    } else {\n      const nextChar = this.getGroupHeadingChar(nextItem.name.trim());\n      if (this.latestSeparator !== nextChar) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private getGroupHeadingChar(name: string): string {\n    return String.fromCodePoint(name.codePointAt(0)).toUpperCase();\n  }\n}\n","<div *ngIf=\"items && items.length\">\n  <ul class=\"bb-grouped-list\" data-role=\"existing-contact\" role=\"list\">\n    <ng-container *ngFor=\"let item of items; let i = index\">\n      <li\n        *ngIf=\"isListHeading(item, i)\"\n        class=\"bb-grouped-list__group bb-text-support bb-text-bold\"\n        data-role=\"header-row\"\n      >\n        {{ latestSeparator }}\n      </li>\n      <li\n        class=\"bb-grouped-list__item\"\n        role=\"button\"\n        data-role=\"contact-manager-list-item\"\n        [tabindex]=\"getTabIndex(i)\"\n        [attr.aria-pressed]=\"selectedItemId === item.id\"\n        [ngClass]=\"{\n          'bb-grouped-list__item--is-active': selectedItemId === item.id,\n          'bb-grouped-list__item--no-separator': hasNoSeparatorClass(i)\n        }\"\n        (keydown.Home)=\"onChangeFocusItemTo($event, 0)\"\n        (keydown.ArrowUp)=\"onChangeFocusItemTo($event, i-1)\"\n        (keydown.ArrowDown)=\"onChangeFocusItemTo($event, i+1)\"\n        (keydown.End)=\"onChangeFocusItemTo($event, items.length)\"\n        (click)=\"onContactSelect(item.id, i)\"\n        (keyup.Space)=\"onContactSelect(item.id, i)\"\n        (keyup.Enter)=\"onContactSelect(item.id, i)\"\n        #contactItem\n      >\n        <bb-contact-list-item\n          [contactItem]=\"item\"\n          [showAccountNumber]=\"true\"\n          [showAlias]=\"showAlias\"\n        ></bb-contact-list-item>\n      </li>\n    </ng-container>\n  </ul>\n</div>\n"]}