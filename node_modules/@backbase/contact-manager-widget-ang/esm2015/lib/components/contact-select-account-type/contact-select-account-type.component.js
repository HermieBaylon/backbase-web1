import { Component, EventEmitter, Input, Output } from '@angular/core';
import { AccountCreateType } from '../../models/types';
import { ContactsNavigationService, View } from '../../services/contacts-navigation.service';
import * as i0 from "@angular/core";
import * as i1 from "../../services/contacts-navigation.service";
import * as i2 from "@backbase/ui-ang/header";
import * as i3 from "@backbase/ui-ang/icon";
import * as i4 from "@angular/common";
import * as i5 from "@backbase/ui-ang/button";
/**
 * Displays a list of all contact types, allowing one to be selected.
 *
 * @usageNotes
 *
 * ### Display a list of types of contact that can be created
 *
 * ```html
 * <bb-contact-account-select-type
 *   [listOfAccountTypes]="createContactList$ | async"
 *   [noOfItemsinList]="noOfItemsinList
 * ></bb-contact-account-select-type>
 * ```
 *
 * ### Additionally set the selected contact type
 *
 * ```html
 * <bb-contact-account-select-type
 *   [listOfAccountTypes]="createContactList$ | async"
 *   [noOfItemsinList]="noOfItemsinList
 *   (selectedAccountType)="selectedAccountType()"
 * ></bb-contact-account-select-type>
 * ```
 * @ngModule ContactManagerWidgetModule
 */
export class ContactSelectAccountTypeComponent {
    constructor(navigation) {
        this.navigation = navigation;
        /**
         * event when account is selected.
         */
        this.selectedAccountType = new EventEmitter();
        this.createAccountTypeRef = AccountCreateType;
    }
    /**
     * OnInit lifecycle hook.
     */
    ngOnInit() {
        var _a;
        this.navigation.currentView = View.Edit;
        if (this.noOfItemsinList === 0 || this.noOfItemsinList === 1) {
            this.navigation.newContactForm(((_a = this.listOfAccountTypes.find((list) => list.enableItem)) === null || _a === void 0 ? void 0 : _a.listItem) || this.createAccountTypeRef.IBAN);
        }
    }
    /**
     * Update the selected account type for contact creation.
     *
     * @param {CreateListType} $event -The selected contact Type details.
     */
    updateCreateContactType($event) {
        this.navigation.currentView = View.Edit;
        this.navigation.newContactForm($event.listItem);
    }
}
/** @nocollapse */ ContactSelectAccountTypeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactSelectAccountTypeComponent, deps: [{ token: i1.ContactsNavigationService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ ContactSelectAccountTypeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ContactSelectAccountTypeComponent, selector: "bb-contact-account-select-type", inputs: { listOfAccountTypes: "listOfAccountTypes", noOfItemsinList: "noOfItemsinList" }, outputs: { selectedAccountType: "selectedAccountType" }, ngImport: i0, template: "<div class=\"bb-block bb-block--xl\">\n  <div class=\"bb-stack bb-stack--align-bottom\">\n    <div class=\"bb-stack__item bb-stack__item--fill\">\n      <div class=\"bb-block\" data-role=\"contact-details-info-name\">\n        <span\n          class=\"d-none\"\n          data-role=\"create-contact-label\"\n          aria-hidden=\"true\"\n          i18n=\"Create new contact heading | Title shown when user is in select contact type@@contact-manager-detail.create.select.heading\"\n          #heading\n        >\n          Create new contact\n        </span>\n        <bb-header-ui data-role=\"create-new-contact-label\" headingType=\"h3\" [heading]=\"heading.textContent\">\n        </bb-header-ui>\n      </div>\n    </div>\n  </div>\n</div>\n<hr />\n<div class=\"bb-lock bb-text-support\">\n  <div\n    class=\"bb-bock\"\n    data-role=\"create-contact-select-new-account-info\"\n    i18n=\"@@create-contact-type-list.select.info.text\"\n  >\n    Select which information you want to use to create a contact. You can move money with an account number, a phone\n    number or an email\n  </div>\n</div>\n<div class=\"bb-select-payment-option\">\n  <div *ngFor=\"let listItem of listOfAccountTypes\">\n    <div *ngIf=\"listItem.enableItem\">\n      <ng-container *ngTemplateOutlet=\"listButton; context: { listItem: listItem}\"></ng-container>\n    </div>\n  </div>\n</div>\n\n<ng-template #listButton let-listItem=\"listItem\">\n  <div class=\"bb-button-bar m-3\">\n    <button\n      class=\"bb-button-bar__button bb-button-bar__button--across bb-inline-stack col-12 bb-select-payment-option__label\"\n      bbButton\n      color=\"unstyled\"\n      (click)=\"updateCreateContactType(listItem)\"\n    >\n      <ng-container [ngSwitch]=\"listItem.listItem\">\n        <ng-container *ngSwitchCase=\"createAccountTypeRef.IBAN\">\n          <bb-icon-ui class=\"bb-inline-stack__item col bb-text-support\" name=\"person-outline\"></bb-icon-ui>\n          <div data-role=\"iban-item\" class=\"col-10 text-left\">\n            <ng-container i18n=\"@@create-contact-type-list.select.button.text.iban\">With an IBAN </ng-container>\n          </div>\n\n          <div class=\"col\">\n            <bb-icon-ui class=\"bb-inline-stack__item col-1 bb-text-support\" name=\"angle-right\"></bb-icon-ui>\n          </div>\n        </ng-container>\n        <ng-container *ngSwitchCase=\"createAccountTypeRef.ACCOUNT\">\n          <bb-icon-ui class=\"bb-inline-stack__item col bb-text-support\" name=\"person-outline\"></bb-icon-ui>\n          <div data-role=\"account-number-item\" class=\"col-10 text-left\">\n            <ng-container i18n=\"@@create-contact-type-list.select.button.text.account\"\n              >With an account number\n            </ng-container>\n          </div>\n\n          <div class=\"col\">\n            <bb-icon-ui class=\"bb-inline-stack__item col-1 bb-text-support\" name=\"angle-right\"></bb-icon-ui>\n          </div>\n        </ng-container>\n        <ng-container *ngSwitchCase=\"createAccountTypeRef.EMAIL\">\n          <bb-icon-ui class=\"bb-inline-stack__item col bb-text-support\" name=\"inbox\"></bb-icon-ui>\n          <div data-role=\"email-item\" class=\"col-10 text-left\">\n            <ng-container i18n=\"@@create-contact-type-list.select.button.text.email\">With an email </ng-container>\n          </div>\n\n          <div class=\"col\">\n            <bb-icon-ui class=\"bb-inline-stack__item col-1 bb-text-support\" name=\"angle-right\"></bb-icon-ui>\n          </div>\n        </ng-container>\n        <ng-container *ngSwitchCase=\"createAccountTypeRef.PHONE\">\n          <bb-icon-ui class=\"bb-inline-stack__item col bb-text-support\" name=\"phone\"></bb-icon-ui>\n          <div data-role=\"phone-number-item\" class=\"col-10 text-left\">\n            <ng-container i18n=\"@@create-contact-type-list.select.button.text.phone\">With a phone number </ng-container>\n          </div>\n\n          <div class=\"col\">\n            <bb-icon-ui class=\"bb-inline-stack__item col-1 bb-text-support\" name=\"angle-right\"></bb-icon-ui>\n          </div>\n        </ng-container>\n      </ng-container>\n    </button>\n  </div>\n</ng-template>\n", components: [{ type: i2.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i3.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i5.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i4.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i4.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactSelectAccountTypeComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-contact-account-select-type',
                    templateUrl: './contact-select-account-type.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.ContactsNavigationService }]; }, propDecorators: { listOfAccountTypes: [{
                type: Input
            }], noOfItemsinList: [{
                type: Input
            }], selectedAccountType: [{
                type: Output
            }] } });
//# sourceMappingURL=contact-select-account-type.component.js.map