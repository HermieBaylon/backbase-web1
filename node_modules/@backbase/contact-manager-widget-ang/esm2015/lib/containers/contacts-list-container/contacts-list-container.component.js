import { ChangeDetectionStrategy, Component } from '@angular/core';
import { BehaviorSubject, combineLatest, of, Subject } from 'rxjs';
import { catchError, debounceTime, distinctUntilChanged, filter, map, shareReplay, startWith, tap, } from 'rxjs/operators';
import { ContactsService } from '../../services/contacts.service';
import { LoadMoreMethod } from '@backbase/contact-common-ang';
import { ContactsNavigationService, View } from '../../services/contacts-navigation.service';
import { ActivatedRoute, NavigationEnd, Router } from '@angular/router';
import { FormControl } from '@angular/forms';
import { ContactManagerPreferencesService } from '../../services/contacts-preferences.service';
import * as i0 from "@angular/core";
import * as i1 from "../../services/contacts.service";
import * as i2 from "../../services/contacts-navigation.service";
import * as i3 from "@angular/router";
import * as i4 from "../../services/contacts-preferences.service";
import * as i5 from "@backbase/ui-ang/icon";
import * as i6 from "@backbase/ui-ang/pagination";
import * as i7 from "@backbase/ui-ang/load-button";
import * as i8 from "../../components/contacts-list/contact-list.component";
import * as i9 from "@backbase/ui-ang/search-box";
import * as i10 from "@ng-bootstrap/ng-bootstrap";
import * as i11 from "@backbase/ui-ang/loading-indicator";
import * as i12 from "@backbase/ui-ang/empty-state";
import * as i13 from "@backbase/ui-ang/common-error-state";
import * as i14 from "@angular/common";
import * as i15 from "./contacts-list-container.directive";
import * as i16 from "@backbase/ui-ang/button";
import * as i17 from "@angular/forms";
/**
 * The following extension slots are available in this component:
 *  - `ContactsListContainerCustomizableDirective`
 *  - `ContactsTopSectionCustomizableDirective`
 *  - `ContactsLoadMoreCustomizableDirective`
 *  - `ContactsLoadingCustomizableDirective`
 *  - `ContactsEmptyStateCustomizableDirective`
 *  - `ContactsEmptySearchStateCustomizableDirective`
 *  - `ContactsErrorStateCustomizableDirective`
 *
 * @see ContactsListContainerCustomizableDirective
 * @see ContactsTopSectionCustomizableDirective
 * @see ContactsLoadMoreCustomizableDirective
 * @see ContactsLoadingCustomizableDirective
 * @see ContactsEmptyStateCustomizableDirective
 * @see ContactsEmptySearchStateCustomizableDirective
 * @see ContactsErrorStateCustomizableDirective
 * Container component for showing contact list.
 * @usageNotes
 *
 * ### Display list of all the contacts with details / edit form.
 *
 * ```html
 * <bb-contacts-list-container>
 *  <router-outlet></router-outlet>
 * </bb-contacts-list-container>
 * ```
 * @ngModule ContactManagerWidgetModule
 */
export class ContactsListContainerComponent {
    constructor(service, navigation, router, route, propertiesService) {
        this.service = service;
        this.navigation = navigation;
        this.router = router;
        this.route = route;
        this.propertiesService = propertiesService;
        this.firstContactEdit = false;
        this.isSearchBoxVisible = true;
        this.searchTerm = new FormControl();
        this.containerlistParams = new BehaviorSubject('');
        this.debounceSearch$ = new Subject();
        this.hostRef = this;
        this.newContactAllowed = this.propertiesService.newContact$;
        this.pageSize = this.propertiesService.pageSize$;
        this.maxNavPages = this.propertiesService.maxNavPages$;
        this.paginationType = this.propertiesService.paginationType$;
        this.isListView = this.router.events.pipe(filter((e) => e instanceof NavigationEnd), map((e) => e.url), startWith(this.router.url), map(() => {
            const isList = this.navigation.currentView === View.List;
            if (isList) {
                this.firstContactEdit = false;
            }
            return isList;
        }), shareReplay());
        this.pagination = combineLatest([this.route.queryParamMap, this.pageSize]).pipe(map(([params, pageSize]) => this.pageParamsFromRoute(params, pageSize)));
        this.items = this.service.items.pipe(tap((results) => {
            this.isSearchBoxVisible = !!this.searchTerm.value ? true : results.contacts.length > 0;
            results.contacts.sort((a, b) => a.name.toLocaleUpperCase().trim() > b.name.toLocaleUpperCase().trim() ? 1 : -1);
        }), catchError((error) => {
            this.error = error;
            return of(undefined);
        }));
        /**
         * Observable of currently selected item id
         */
        this.selectedItemId = this.service.currentlySelectedItemId;
        this.listParams = combineLatest([
            this.containerlistParams,
            this.pagination,
            this.pageSize,
            this.paginationType,
        ]).pipe(map(([method, paginationParams, pageSize, paginationType]) => {
            if (method === LoadMoreMethod.LOAD_MORE && paginationType === LoadMoreMethod.LOAD_MORE) {
                paginationParams.from++;
                paginationParams.size = pageSize;
            }
            return {
                paginationParams,
                paginationType,
                method,
            };
        }), map(({ paginationParams, paginationType, method }) => ({
            pagination: {
                from: paginationParams.from,
                size: paginationParams.size,
                query: paginationParams.query,
            },
            paginationType,
            method,
        })));
    }
    ngOnInit() {
        this.subscription = this.listParams.subscribe((params) => {
            return this.service.updateItemList(params.pagination.query, params.pagination.from, params.pagination.size, params.paginationType, params.method);
        });
        this.subscription.add(this.debounceSearch$
            .pipe(debounceTime(300), distinctUntilChanged())
            .subscribe((term) => this.searchContacts(term)));
    }
    /**
     * Event handler for search box value change
     *
     * @param {string} phrase text to search for
     */
    onSearchTermChange(phrase) {
        this.debounceSearch$.next(phrase);
    }
    /**
     * Event handler for search box clear
     */
    clearSearch() {
        this.debounceSearch$.next('');
    }
    /**
     * Queries contacts with given phrase
     *
     * @param {string} phrase text to search for
     */
    searchContacts(phrase) {
        this.containerlistParams.next('search');
        this.navigation.list(0, phrase); // TODO: Remove query params when migrating widget
    }
    /**
     * Navigates to list page.
     *
     * @param {number} page Current page number.
     */
    onPageChange(page) {
        this.navigation.list(page);
    }
    /**
     * Updat the list parameter as load more.
     */
    loadMore() {
        this.containerlistParams.next('load-more');
    }
    /**
     * Routes to selected contact details.
     *
     * @param {string} id  Contact ID
     */
    select(id) {
        this.navigation.select(id);
    }
    /**
     * Routes to new contact.
     *
     * @param {number} totalContacts - total number of contacts.
     */
    newContact(totalContacts) {
        this.firstContactEdit = !totalContacts;
        this.navigation.newContact();
        this.navigation.currentView = View.Select;
    }
    /**
     * method to return back to list view.
     */
    backToList() {
        this.navigation.currentView = View.List;
        this.navigation.list();
    }
    pageParamsFromRoute(query, pageSize) {
        const from = query.get('page');
        this.searchTerm.setValue(query.get('query') || '');
        return {
            from: (from && Number.parseInt(from, 10)) || 0,
            size: pageSize ? Number(pageSize) : 5,
            query: this.searchTerm.value || '',
        };
    }
    ngOnDestroy() {
        var _a;
        (_a = this.subscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
    }
}
/** @nocollapse */ ContactsListContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsListContainerComponent, deps: [{ token: i1.ContactsService }, { token: i2.ContactsNavigationService }, { token: i3.Router }, { token: i3.ActivatedRoute }, { token: i4.ContactManagerPreferencesService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ ContactsListContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ContactsListContainerComponent, selector: "bb-contacts-list-container", ngImport: i0, template: "<div class=\"card card-body\" data-role=\"loading-label\">\n  <ng-container *ngIf=\"items | async as items; else loadingTemplate\">\n    <div\n      class=\"bb-block bb-block--md\"\n      [ngClass]=\"{\n        'd-none d-lg-block': !(isListView | async)\n      }\"\n    >\n      <div class=\"row\">\n        <ng-container bbContactsTopSectionCustomizable [bbHostRef]=\"hostRef\" [bbTemplateContext]=\"items\"></ng-container>\n      </div>\n    </div>\n    <div *ngIf=\"!(isListView | async)\" class=\"row d-block d-lg-none\">\n      <button bbButton color=\"unstyled\" (click)=\"backToList()\" class=\"bb-text-bold text-primary\">\n        <bb-icon-ui name=\"angle-left\"></bb-icon-ui>\n        <span i18n=\"Back to list view|Span for going back to list view@@contact-manager.span.backToList\">\n          Back to list\n        </span>\n      </button>\n    </div>\n    <div\n      class=\"row bb-block bb-block--md\"\n      *ngIf=\"(items && items.contacts.length > 0) || hostRef.firstContactEdit; else emptyTemplate\"\n    >\n      <ng-container\n        bbContactsListContainerCustomizable\n        [bbHostRef]=\"hostRef\"\n        [bbTemplateContext]=\"items\"\n      ></ng-container>\n      <div\n        class=\"col col-lg-6\"\n        [ngClass]=\"{\n          'd-none d-lg-block': isListView | async\n        }\"\n      >\n        <ng-content></ng-content>\n      </div>\n    </div>\n    <div\n      class=\"row\"\n      [ngClass]=\"{\n        'd-none d-lg-block': !(isListView | async)\n      }\"\n    >\n      <div class=\"col-lg-6\">\n        <ng-container bbContactsLoadMoreCustomizable [bbHostRef]=\"hostRef\" [bbTemplateContext]=\"items\"></ng-container>\n        <ng-template bbContactsLoadMoreCustomizable let-hostRef let-items=\"context\">\n          <bb-pagination-ui\n            *ngIf=\"(hostRef.paginationType | async) !== 'load-more'\"\n            class=\"bb-pagination\"\n            [page]=\"(hostRef.pagination | async)?.from\"\n            [boundaryLinks]=\"false\"\n            [directionLinks]=\"true\"\n            [totalItems]=\"items?.count\"\n            [itemsPerPage]=\"hostRef.pageSize | async\"\n            [maxNavPages]=\"hostRef.maxNavPages | async\"\n            (pageChange)=\"hostRef.onPageChange($event)\"\n          ></bb-pagination-ui>\n          <div\n            class=\"p-5 text-center\"\n            *ngIf=\"(hostRef.paginationType | async) === 'load-more' && items.contacts.length > 0\"\n          >\n            <bb-load-button-ui\n              class=\"bb-block bb-block--md\"\n              color=\"secondary\"\n              data-role=\"contact-load-more\"\n              *ngIf=\"items.count && items.count > items.contacts.length\"\n              (click)=\"hostRef.loadMore()\"\n            >\n              <ng-container\n                i18n=\"Load more button label | Load more button shown down bellow contact list@@contact-manager.load-more.label\"\n              >\n                Load more\n              </ng-container>\n            </bb-load-button-ui>\n          </div>\n        </ng-template>\n      </div>\n    </div>\n  </ng-container>\n\n  <ng-template bbContactsListContainerCustomizable let-hostRef let-items=\"context\">\n    <div\n      class=\"col\"\n      [ngClass]=\"{\n        'd-block': hostRef.isListView | async,\n        'd-lg-block d-none': !(hostRef.isListView | async)\n      }\"\n    >\n      <bb-contacts-list-widget\n        [items]=\"items.contacts\"\n        [selectedItemId]=\"hostRef.selectedItemId | async\"\n        [showAlias]=\"false\"\n        (selectedChange)=\"hostRef.select($event)\"\n      >\n      </bb-contacts-list-widget>\n    </div>\n  </ng-template>\n\n  <ng-template bbContactsTopSectionCustomizable let-hostRef let-items=\"context\">\n    <div class=\"col bb-stack\">\n      <div class=\"bb-stack__item bb-stack__item--fill\">\n        <bb-search-box-ui\n          *ngIf=\"hostRef.isSearchBoxVisible\"\n          class=\"bb-toolbar__item\"\n          data-role=\"contact-manager-search\"\n          placeholder=\"Search\"\n          i18n-placeholder=\"Search box placeholder | Placeholder for search box@@contact-manager.placeholder.search\"\n          aria-label=\"Search\"\n          i18n-aria-label=\"@@contact-manager.placeholder.search\"\n          [showSearch]=\"true\"\n          [showClear]=\"true\"\n          [formControl]=\"hostRef.searchTerm\"\n          (valueChange)=\"hostRef.onSearchTermChange($event)\"\n          (submit)=\"hostRef.searchContacts(hostRef.searchTerm.value)\"\n          (keyup.enter)=\"hostRef.searchContacts(hostRef.searchTerm.value)\"\n          (clear)=\"hostRef.clearSearch()\"\n        ></bb-search-box-ui>\n        <div class=\"sr-only\" aria-live=\"assertive\">\n          <p i18n=\"@@contact-manager.list.results-found\">\n            {items.count || 0, plural, =1 {1 result found} other {{{items.count}} results found}}\n          </p>\n        </div>\n      </div>\n      <div class=\"bb-stack__item align-self-start\">\n        <button\n          bbButton\n          i18n=\"New Contact Button | Button for creating a new contact@@contact-manager.button.newContact\"\n          data-role=\"new-contact-button\"\n          class=\"d-block bb-button-bar__button\"\n          [disabled]=\"!(hostRef.newContactAllowed | async)\"\n          (click)=\"hostRef.newContact(items.contacts.length)\"\n          type=\"button\"\n        >\n          New Contact\n        </button>\n      </div>\n    </div>\n    <ng-template #rt let-result=\"result\" let-term=\"term\">\n      <div class=\"text-truncate\" [title]=\"result\">\n        <ngb-highlight [result]=\"result\" [term]=\"term\"></ngb-highlight>\n      </div>\n    </ng-template>\n  </ng-template>\n\n  <ng-template bbContactsLoadingCustomizable let-hostRef>\n    <div class=\"bb-state-container\">\n      <bb-loading-indicator-ui\n        i18n-text=\"@@contact-manager.loading.label\"\n        text=\"Loading contacts...\"\n        data-role=\"contact-manager-loading\"\n      ></bb-loading-indicator-ui>\n    </div>\n  </ng-template>\n\n  <ng-template #loadingTemplate>\n    <ng-container *ngIf=\"!error; else errorTemplate\" bbContactsLoadingCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n  </ng-template>\n\n  <ng-template bbContactsEmptyStateCustomizable let-hostRef>\n    <div class=\"bb-state-container\">\n      <bb-empty-state-ui\n        i18n-title=\"@@contact-manager.state.noContactsLoaded.title\"\n        title=\"No contacts\"\n        i18n-subtitle=\"@@contact-manager.state.noContactsLoaded.subtitle\"\n        subtitle=\"You don't have any contacts to display yet.<br>Try adding a new contact using the 'New Contact' button\"\n        iconClasses=\"d-flex justify-content-center mb-3\"\n        iconModifier=\"contacts\"\n        iconSize=\"xxl\"\n        data-role=\"contact-manager-empty\"\n      ></bb-empty-state-ui>\n    </div>\n  </ng-template>\n\n  <ng-template #emptyTemplate>\n    <ng-container\n      *ngIf=\"!hostRef.searchTerm.value; else emptySearchTemplate\"\n      bbContactsEmptyStateCustomizable\n      [bbHostRef]=\"hostRef\"\n    ></ng-container>\n  </ng-template>\n\n  <ng-template bbContactsEmptySearchStateCustomizable let-hostRef let-term=\"context\">\n    <div class=\"bb-state-container\">\n      <bb-empty-state-ui\n        i18n-title=\"@@contact-manager.state.empty-search.title\"\n        title=\"No results found\"\n        i18n-subtitle=\"@@contact-manager.state.empty-search.subtitle\"\n        subtitle=\"We can't find what you're looking for. Please try a different criteria.\"\n        iconClasses=\"d-flex justify-content-center mb-3\"\n        iconModifier=\"search\"\n        iconColor=\"primary\"\n        iconSize=\"xxl\"\n        data-role=\"contact-manager-list-search-empty\"\n      ></bb-empty-state-ui>\n    </div>\n  </ng-template>\n\n  <ng-template #emptySearchTemplate>\n    <ng-container\n      bbContactsEmptySearchStateCustomizable\n      [bbHostRef]=\"hostRef\"\n      [bbTemplateContext]=\"searchTerm\"\n    ></ng-container>\n  </ng-template>\n\n  <ng-template bbContactsErrorStateCustomizable let-hostRef let-error=\"context\">\n    <div class=\"bb-state-container\">\n      <bb-common-error-state-ui [attr.data-role]=\"'contact-manager-error'\" [error]=\"error\"></bb-common-error-state-ui>\n    </div>\n  </ng-template>\n\n  <ng-template #errorTemplate>\n    <ng-container bbContactsErrorStateCustomizable [bbHostRef]=\"hostRef\" [bbTemplateContext]=\"error\"></ng-container>\n  </ng-template>\n</div>\n", components: [{ type: i5.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i6.PaginatorComponent, selector: "bb-pagination-ui", inputs: ["page", "boundaryLinks", "directionLinks", "totalItems", "itemsPerPage", "maxNavPages"], outputs: ["pageChange"] }, { type: i7.LoadButtonComponent, selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }, { type: i8.ContactsListWidgetComponent, selector: "bb-contacts-list-widget", inputs: ["items", "selectedItemId", "showAlias"], outputs: ["selectedChange"] }, { type: i9.SearchBoxComponent, selector: "bb-search-box-ui", inputs: ["placeholder", "maxLength", "squareBorder", "typeaheadOptions", "showSearch", "showClear", "searchLabel", "clearLabel", "autocomplete"], outputs: ["submit", "clear", "valueChange"] }, { type: i10.NgbHighlight, selector: "ngb-highlight", inputs: ["highlightClass", "accentSensitive", "result", "term"] }, { type: i11.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i12.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }, { type: i13.ErrorCommonStateComponent, selector: "bb-common-error-state-ui", inputs: ["error"] }], directives: [{ type: i14.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i14.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i15.ContactsTopSectionCustomizableDirective, selector: "[bbContactsTopSectionCustomizable]" }, { type: i16.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i15.ContactsListContainerCustomizableDirective, selector: "[bbContactsListContainerCustomizable]" }, { type: i15.ContactsLoadMoreCustomizableDirective, selector: "[bbContactsLoadMoreCustomizable]" }, { type: i17.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i17.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i15.ContactsLoadingCustomizableDirective, selector: "[bbContactsLoadingCustomizable]" }, { type: i15.ContactsEmptyStateCustomizableDirective, selector: "[bbContactsEmptyStateCustomizable]" }, { type: i15.ContactsEmptySearchStateCustomizableDirective, selector: "[bbContactsEmptySearchStateCustomizable]" }, { type: i15.ContactsErrorStateCustomizableDirective, selector: "[bbContactsErrorStateCustomizable]" }], pipes: { "async": i14.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsListContainerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-contacts-list-container',
                    templateUrl: 'contacts-list-container.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.ContactsService }, { type: i2.ContactsNavigationService }, { type: i3.Router }, { type: i3.ActivatedRoute }, { type: i4.ContactManagerPreferencesService }]; } });
//# sourceMappingURL=contacts-list-container.component.js.map