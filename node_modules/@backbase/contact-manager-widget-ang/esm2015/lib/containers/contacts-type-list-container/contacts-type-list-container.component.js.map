{"version":3,"file":"contacts-type-list-container.component.js","sourceRoot":"","sources":["../../../../../../../libs/contact-manager-widget-ang/src/lib/containers/contacts-type-list-container/contacts-type-list-container.component.ts","../../../../../../../libs/contact-manager-widget-ang/src/lib/containers/contacts-type-list-container/contacts-type-list-container.component.html"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,eAAe,CAAC;AAC1C,OAAO,EAAc,aAAa,EAAE,MAAM,MAAM,CAAC;AACjD,OAAO,EAAE,GAAG,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AAE1C,OAAO,EAAE,iBAAiB,EAAkB,MAAM,oBAAoB,CAAC;AACvE,OAAO,EAAE,eAAe,EAAE,MAAM,iCAAiC,CAAC;AAClE,OAAO,EAAE,gCAAgC,EAAE,MAAM,6CAA6C,CAAC;;;;;;AAC/F;;;;;;;;;;;;;;;;;;;;;;GAsBG;AAKH,MAAM,OAAO,kCAAkC;IA+C7C,YACmB,cAA+B,EAC/B,iBAAmD;QADnD,mBAAc,GAAd,cAAc,CAAiB;QAC/B,sBAAiB,GAAjB,iBAAiB,CAAkC;QAhDtE;;WAEG;QACM,gBAAW,GAAwB,IAAI,CAAC,iBAAiB,CAAC,mBAAmB,CAAC;QACvF;;WAEG;QACM,eAAU,GAAwB,IAAI,CAAC,iBAAiB,CAAC,kBAAkB,CAAC;QACrF;;WAEG;QACM,kBAAa,GAAwB,IAAI,CAAC,iBAAiB,CAAC,qBAAqB,CAAC;QAC3F;;WAEG;QACM,gBAAW,GAAwB,IAAI,CAAC,iBAAiB,CAAC,mBAAmB,CAAC;QAEvF;;WAEG;QACH,uBAAkB,GAAiC,aAAa,CAAC;YAC/D,IAAI,CAAC,aAAa;YAClB,IAAI,CAAC,UAAU;YACf,IAAI,CAAC,WAAW;YAChB,IAAI,CAAC,WAAW;SACjB,CAAC,CAAC,IAAI,CACL,GAAG,CACD,CAAC,eAAe,EAAE,EAAE,CAClB,CAAC,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,IAAI,OAAO,QAAQ,KAAK,SAAS,CAAC,CAAC,MAAM,CAAC,CAClH,EACD,GAAG,CAAC,CAAC,CAAC,OAAO,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,CAAC,EAAE,EAAE,CAAC;YACrC;gBACE,QAAQ,EAAE,iBAAiB,CAAC,OAAO;gBACnC,UAAU,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,OAAO,EAAE;aAC/B;YACD;gBACE,QAAQ,EAAE,iBAAiB,CAAC,IAAI;gBAChC,UAAU,EAAE,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,OAAO,EAAE;aAC5B;YACD,EAAE,QAAQ,EAAE,iBAAiB,CAAC,KAAK,EAAE,UAAU,EAAE,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,OAAO,EAAE,EAAE;YACnE,EAAE,QAAQ,EAAE,iBAAiB,CAAC,KAAK,EAAE,UAAU,EAAE,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,OAAO,EAAE,EAAE;SACpE,CAAC,CACH,CAAC;IAOC,CAAC;;mJAlDO,kCAAkC;uIAAlC,kCAAkC,uEClC/C,iKAEA;4FDgCa,kCAAkC;kBAJ9C,SAAS;mBAAC;oBACT,QAAQ,EAAE,iCAAiC;oBAC3C,WAAW,EAAE,+CAA+C;iBAC7D","sourcesContent":["import { Component } from '@angular/core';\nimport { Observable, combineLatest } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\nimport { AccountCreateType, CreateListType } from '../../models/types';\nimport { ContactsService } from '../../services/contacts.service';\nimport { ContactManagerPreferencesService } from '../../services/contacts-preferences.service';\n/**\n *\n * Container component for showing contact list.\n *\n * @usageNotes\n *\n * ### Display list of all the types of contacts to select before creation.\n *\n * ```html\n * <bb-contacts-type-list-container></bb-contacts-type-list-container>\n * ```\n * ### Additionally use the container component in routing.\n *\n * ```typescript\n * const routes: [\n * {\n *  path: 'select',\n *  component: ContactsTypeListContainerComponent\n * }]\n *\n *\n * @ngModule ContactManagerWidgetModule\n */\n@Component({\n  selector: 'bb-contacts-type-list-container',\n  templateUrl: './contacts-type-list-container.component.html',\n})\nexport class ContactsTypeListContainerComponent {\n  /**\n   * property from user if the contact creation through email is allowed\n   */\n  readonly allowEmail$: Observable<boolean> = this.propertiesService.createContactEmail$;\n  /**\n   * property from user if the contact creation through IBAN is allowed\n   */\n  readonly allowIBAN$: Observable<boolean> = this.propertiesService.createContactIBAN$;\n  /**\n   * property from user if the contact creation through Account Number is allowed\n   */\n  readonly allowAccount$: Observable<boolean> = this.propertiesService.createContactAccount$;\n  /**\n   * property from user if the contact creation through Phone Number is allowed\n   */\n  readonly allowPhone$: Observable<boolean> = this.propertiesService.createContactPhone$;\n\n  /**\n   * check which properties are allowed and showing them on screen.\n   */\n  createContactList$: Observable<CreateListType[]> = combineLatest([\n    this.allowAccount$,\n    this.allowIBAN$,\n    this.allowPhone$,\n    this.allowEmail$,\n  ]).pipe(\n    tap(\n      (contactListItem) =>\n        (this.noOfItemsinList = contactListItem.filter((listItem) => listItem && typeof listItem === 'boolean').length),\n    ),\n    map(([Account, IBAN, Phone, Email]) => [\n      {\n        listItem: AccountCreateType.ACCOUNT,\n        enableItem: Account?.valueOf(),\n      },\n      {\n        listItem: AccountCreateType.IBAN,\n        enableItem: IBAN?.valueOf(),\n      },\n      { listItem: AccountCreateType.PHONE, enableItem: Phone?.valueOf() },\n      { listItem: AccountCreateType.EMAIL, enableItem: Email?.valueOf() },\n    ]),\n  );\n\n  noOfItemsinList!: number;\n\n  constructor(\n    private readonly contactService: ContactsService,\n    private readonly propertiesService: ContactManagerPreferencesService,\n  ) {}\n}\n","<bb-contact-account-select-type [listOfAccountTypes]=\"createContactList$ | async\" [noOfItemsinList]=\"noOfItemsinList\">\n</bb-contact-account-select-type>\n"]}