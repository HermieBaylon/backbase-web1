import { ChangeDetectionStrategy, Component, TemplateRef, ViewChild } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { Subscription } from 'rxjs';
import { map, withLatestFrom } from 'rxjs/operators';
import { ContactsService } from '../../services/contacts.service';
import { ContactsNavigationService, View } from '../../services/contacts-navigation.service';
import { ContactManagerPreferencesService } from '../../services/contacts-preferences.service';
import { NotificationService } from '@backbase/ui-ang/notification';
import * as i0 from "@angular/core";
import * as i1 from "../../services/contacts.service";
import * as i2 from "@angular/router";
import * as i3 from "../../services/contacts-navigation.service";
import * as i4 from "@backbase/ui-ang/notification";
import * as i5 from "../../services/contacts-preferences.service";
import * as i6 from "../../components/contacts-detail/contacts-detail.component";
import * as i7 from "@backbase/ui-ang/loading-indicator";
import * as i8 from "@angular/common";
import * as i9 from "../../directives/contacts-delete-success-notification-customizable.directive";
import * as i10 from "../../directives/contacts-delete-error-notification-customizable.directive";
/**
 * Container component for showing contact details.
 *
 * @usageNotes
 *
 * ### Display details of the contact.
 *
 * ```html
 * <bb-contacts-detail-container></bb-contacts-detail-container>
 * ```
 *
 * ### Additionally use the container component in routing.
 *
 * ```typescript
 * const routes: [
 * {
 *  path: '',
 *  component: ContactsDetailContainerComponent
 * }]
 *
 * ```
 * @ngModule ContactManagerWidgetModule
 */
export class ContactsDetailContainerComponent {
    constructor(service, route, navigation, notificationService, propertiesService) {
        this.service = service;
        this.route = route;
        this.navigation = navigation;
        this.notificationService = notificationService;
        this.propertiesService = propertiesService;
        this.hostRef = this;
        this.itemId = this.route.paramMap.pipe(map((params) => params.get('id')));
        this.item = this.service.item; //.pipe(map(item => this.fromService(item)));
        this.notificationTimeout$ = this.propertiesService.notificationDismissTime$;
        this.contactTypeId$ = this.service.getAccountType();
        this.subscriptions = new Subscription();
        service.getItemFrom(this.itemId);
    }
    /**
     * onInit - lifecycle hook
     */
    ngOnInit() {
        this.subscriptions.add(this.itemId.subscribe((itemId) => {
            if (!itemId) {
                this.navigation.currentView = View.List;
            }
            else {
                this.navigation.currentView = View.Detail;
            }
        }));
        this.subscriptions.add(this.service.deleteSuccess
            .pipe(withLatestFrom(this.notificationTimeout$), map(([response, timeout]) => ({ timeout })))
            .subscribe(({ timeout }) => this.notificationService.showNotification({
            header: this.deleteSuccessNotificationTemplate,
            message: '',
            modifier: 'success',
            ttl: timeout,
        })));
        this.subscriptions.add(this.service.deleteError
            .pipe(withLatestFrom(this.notificationTimeout$), map(([error, timeout]) => ({ error, timeout })))
            .subscribe(({ error, timeout }) => this.notificationService.showNotification({
            header: this.deleteErrorNotificationTemplate,
            message: '',
            modifier: 'error',
            ttl: timeout,
        })));
    }
    /**
     * OnDestroy- lifecycle hook Unsubscribing the subscription.
     */
    ngOnDestroy() {
        this.subscriptions.unsubscribe();
    }
    /**
     *  Emits the output when edit is clicked.
     *
     * @param {SelectContactEvent} accountData - An object which contains id and type of contact to be edited.
     */
    edit(accountData) {
        this.navigation.edit(accountData.id, accountData.type);
    }
    /**
     * Method that calls the delete service and returns to list view.
     *
     * @param {string} id - contact ID which has to be deleted.
     */
    deleteContactsItem(id) {
        this.service.delete(id);
        this.navigation.list();
        this.navigation.currentView = View.List;
    }
}
/** @nocollapse */ ContactsDetailContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsDetailContainerComponent, deps: [{ token: i1.ContactsService }, { token: i2.ActivatedRoute }, { token: i3.ContactsNavigationService }, { token: i4.NotificationService }, { token: i5.ContactManagerPreferencesService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ ContactsDetailContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ContactsDetailContainerComponent, selector: "bb-contacts-detail-container", viewQueries: [{ propertyName: "deleteSuccessNotificationTemplate", first: true, predicate: ["deleteSuccessNotificationTemplate"], descendants: true }, { propertyName: "deleteErrorNotificationTemplate", first: true, predicate: ["deleteErrorNotificationTemplate"], descendants: true }], ngImport: i0, template: "<ng-container *ngIf=\"item | async as item; else loadingTemplate\">\n  <bb-contacts-detail\n    [item]=\"item\"\n    [type]=\"contactTypeId$ | async\"\n    (editContactsItem)=\"edit($event)\"\n    (deleteContactsItem)=\"deleteContactsItem($event)\"\n  >\n  </bb-contacts-detail>\n</ng-container>\n\n<ng-template #loadingTemplate>\n  <div class=\"bb-state-container\">\n    <bb-loading-indicator-ui\n      i18n-text=\"@@contact-manager-detail-container.loading.label\"\n      text=\"Loading...\"\n    ></bb-loading-indicator-ui>\n  </div>\n</ng-template>\n\n<ng-template #deleteSuccessNotificationTemplate>\n  <ng-container bbContactsDeleteSuccessNotificationCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n  <ng-template bbContactsDeleteSuccessNotificationCustomizable>\n    <span\n      i18n=\"Notification delete success message@@contact-manager-detail-container.notification.delete.success\"\n      role=\"alert\"\n      aria-atomic=\"true\"\n    >\n      Contact was deleted succesfully\n    </span>\n  </ng-template>\n</ng-template>\n\n<ng-template #deleteErrorNotificationTemplate>\n  <ng-container bbContactsDeleteErrorNotificationCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n  <ng-template bbContactsDeleteErrorNotificationCustomizable>\n    <span\n      i18n=\"Notification delete failed error message@@contact-manager-detail-container.notification.delete.error\"\n      role=\"alert\"\n      aria-atomic=\"true\"\n    >\n      Error deleting contact\n    </span>\n  </ng-template>\n</ng-template>\n", components: [{ type: i6.ContactsDetailComponent, selector: "bb-contacts-detail", inputs: ["type", "showDetail", "item"], outputs: ["editContactsItem", "deleteContactsItem"] }, { type: i7.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }], directives: [{ type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i9.ContactsDeleteSuccessNotificationCustomizableDirective, selector: "[bbContactsDeleteSuccessNotificationCustomizable]" }, { type: i10.ContactsDeleteErrorNotificationCustomizableDirective, selector: "[bbContactsDeleteErrorNotificationCustomizable]" }], pipes: { "async": i8.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsDetailContainerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-contacts-detail-container',
                    templateUrl: './contacts-detail-container.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.ContactsService }, { type: i2.ActivatedRoute }, { type: i3.ContactsNavigationService }, { type: i4.NotificationService }, { type: i5.ContactManagerPreferencesService }]; }, propDecorators: { deleteSuccessNotificationTemplate: [{
                type: ViewChild,
                args: ['deleteSuccessNotificationTemplate']
            }], deleteErrorNotificationTemplate: [{
                type: ViewChild,
                args: ['deleteErrorNotificationTemplate']
            }] } });
//# sourceMappingURL=contacts-detail-container.component.js.map