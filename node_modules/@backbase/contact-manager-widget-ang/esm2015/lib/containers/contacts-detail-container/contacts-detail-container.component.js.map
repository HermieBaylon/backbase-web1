{"version":3,"file":"contacts-detail-container.component.js","sourceRoot":"","sources":["../../../../../../../libs/contact-manager-widget-ang/src/lib/containers/contacts-detail-container/contacts-detail-container.component.ts","../../../../../../../libs/contact-manager-widget-ang/src/lib/containers/contacts-detail-container/contacts-detail-container.html"],"names":[],"mappings":"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","sourcesContent":["import { ChangeDetectionStrategy, Component, OnDestroy, OnInit, TemplateRef, ViewChild } from '@angular/core';\nimport { ActivatedRoute, ParamMap } from '@angular/router';\nimport { Observable, Subscription } from 'rxjs';\nimport { map, withLatestFrom } from 'rxjs/operators';\nimport { ContactsService } from '../../services/contacts.service';\nimport { ContactItem } from '@backbase/contact-common-ang';\nimport { ContactsNavigationService, View } from '../../services/contacts-navigation.service';\nimport { SelectContactEvent } from '../../models/types';\nimport { ContactManagerPreferencesService } from '../../services/contacts-preferences.service';\nimport { NotificationService } from '@backbase/ui-ang/notification';\n\n/**\n * Container component for showing contact details.\n *\n * @usageNotes\n *\n * ### Display details of the contact.\n *\n * ```html\n * <bb-contacts-detail-container></bb-contacts-detail-container>\n * ```\n *\n * ### Additionally use the container component in routing.\n *\n * ```typescript\n * const routes: [\n * {\n *  path: '',\n *  component: ContactsDetailContainerComponent\n * }]\n *\n * ```\n * @ngModule ContactManagerWidgetModule\n */\n\n@Component({\n  selector: 'bb-contacts-detail-container',\n  templateUrl: './contacts-detail-container.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ContactsDetailContainerComponent implements OnInit, OnDestroy {\n  readonly hostRef = this;\n  readonly itemId: Observable<string | null> = this.route.paramMap.pipe(map((params: ParamMap) => params.get('id')));\n\n  readonly item: Observable<ContactItem | undefined> = this.service.item; //.pipe(map(item => this.fromService(item)));\n  readonly notificationTimeout$: Observable<number> = this.propertiesService.notificationDismissTime$;\n  readonly contactTypeId$: Observable<string> = this.service.getAccountType();\n\n  @ViewChild('deleteSuccessNotificationTemplate')\n  deleteSuccessNotificationTemplate: TemplateRef<any> | undefined;\n  @ViewChild('deleteErrorNotificationTemplate')\n  deleteErrorNotificationTemplate: TemplateRef<any> | undefined;\n\n  constructor(\n    private readonly service: ContactsService,\n    private readonly route: ActivatedRoute,\n    private readonly navigation: ContactsNavigationService,\n    private readonly notificationService: NotificationService,\n    private readonly propertiesService: ContactManagerPreferencesService,\n  ) {\n    service.getItemFrom(this.itemId);\n  }\n\n  private readonly subscriptions = new Subscription();\n  /**\n   * onInit - lifecycle hook\n   */\n  ngOnInit(): void {\n    this.subscriptions.add(\n      this.itemId.subscribe((itemId) => {\n        if (!itemId) {\n          this.navigation.currentView = View.List;\n        } else {\n          this.navigation.currentView = View.Detail;\n        }\n      }),\n    );\n\n    this.subscriptions.add(\n      this.service.deleteSuccess\n        .pipe(\n          withLatestFrom(this.notificationTimeout$),\n          map(([response, timeout]) => ({ timeout })),\n        )\n        .subscribe(({ timeout }) =>\n          this.notificationService.showNotification({\n            header: this.deleteSuccessNotificationTemplate as TemplateRef<any>,\n            message: '',\n            modifier: 'success',\n            ttl: timeout,\n          }),\n        ),\n    );\n\n    this.subscriptions.add(\n      this.service.deleteError\n        .pipe(\n          withLatestFrom(this.notificationTimeout$),\n          map(([error, timeout]) => ({ error, timeout })),\n        )\n        .subscribe(({ error, timeout }) =>\n          this.notificationService.showNotification({\n            header: this.deleteErrorNotificationTemplate as TemplateRef<any>,\n            message: '',\n            modifier: 'error',\n            ttl: timeout,\n          }),\n        ),\n    );\n  }\n  /**\n   * OnDestroy- lifecycle hook Unsubscribing the subscription.\n   */\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n  /**\n   *  Emits the output when edit is clicked.\n   *\n   * @param {SelectContactEvent} accountData - An object which contains id and type of contact to be edited.\n   */\n  edit(accountData: SelectContactEvent) {\n    this.navigation.edit(accountData.id, accountData.type);\n  }\n  /**\n   * Method that calls the delete service and returns to list view.\n   *\n   * @param {string} id - contact ID which has to be deleted.\n   */\n  deleteContactsItem(id: string) {\n    this.service.delete(id);\n    this.navigation.list();\n    this.navigation.currentView = View.List;\n  }\n}\n","<ng-container *ngIf=\"item | async as item; else loadingTemplate\">\n  <bb-contacts-detail\n    [item]=\"item\"\n    [type]=\"contactTypeId$ | async\"\n    (editContactsItem)=\"edit($event)\"\n    (deleteContactsItem)=\"deleteContactsItem($event)\"\n  >\n  </bb-contacts-detail>\n</ng-container>\n\n<ng-template #loadingTemplate>\n  <div class=\"bb-state-container\">\n    <bb-loading-indicator-ui\n      i18n-text=\"@@contact-manager-detail-container.loading.label\"\n      text=\"Loading...\"\n    ></bb-loading-indicator-ui>\n  </div>\n</ng-template>\n\n<ng-template #deleteSuccessNotificationTemplate>\n  <ng-container bbContactsDeleteSuccessNotificationCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n  <ng-template bbContactsDeleteSuccessNotificationCustomizable>\n    <span\n      i18n=\"Notification delete success message@@contact-manager-detail-container.notification.delete.success\"\n      role=\"alert\"\n      aria-atomic=\"true\"\n    >\n      Contact was deleted succesfully\n    </span>\n  </ng-template>\n</ng-template>\n\n<ng-template #deleteErrorNotificationTemplate>\n  <ng-container bbContactsDeleteErrorNotificationCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n  <ng-template bbContactsDeleteErrorNotificationCustomizable>\n    <span\n      i18n=\"Notification delete failed error message@@contact-manager-detail-container.notification.delete.error\"\n      role=\"alert\"\n      aria-atomic=\"true\"\n    >\n      Error deleting contact\n    </span>\n  </ng-template>\n</ng-template>\n"]}