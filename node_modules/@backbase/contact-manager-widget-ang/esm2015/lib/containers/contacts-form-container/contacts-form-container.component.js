import { ChangeDetectionStrategy, ChangeDetectorRef, Component, TemplateRef, ViewChild, ViewContainerRef, } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { of, Subject } from 'rxjs';
import { catchError, map, mergeMap, take, withLatestFrom } from 'rxjs/operators';
import { ContactsService } from '../../services/contacts.service';
import { ContactsFormComponent } from '../../components/contacts-form/contacts-form.component';
import { ContactsNavigationService, View } from '../../services/contacts-navigation.service';
import { ContactManagerPreferencesService } from '../../services/contacts-preferences.service';
import { NotificationService } from '@backbase/ui-ang/notification';
import * as i0 from "@angular/core";
import * as i1 from "../../services/contacts.service";
import * as i2 from "@angular/router";
import * as i3 from "../../services/contacts-navigation.service";
import * as i4 from "@backbase/ui-ang/notification";
import * as i5 from "../../services/contacts-preferences.service";
import * as i6 from "../../components/contacts-form/contacts-form.component";
import * as i7 from "@backbase/ui-ang/loading-indicator";
import * as i8 from "@backbase/contact-common-ang";
import * as i9 from "@angular/common";
import * as i10 from "../../directives/contacts-create-success-notification-customizable.directive";
import * as i11 from "../../directives/contacts-create-error-notification-customizable.directive";
import * as i12 from "../../directives/contacts-edit-success-notification-customizable.directive";
import * as i13 from "../../directives/contacts-edit-error-notification-customizable.directive";
import * as i14 from "../../directives/contacts-edit-discard-confirmation-customizable.directive";
/**
 * Container component for showing contact details.
 *
 * @usageNotes
 *
 * ### Display create/ edit form for contacts
 *
 * ```html
 * <bb-contacts-form-container></bb-contacts-form-container>
 * ```
 *
 * ### Additionally use the container component in routing.
 *
 * ```typescript
 * const routes: [
 *   {
 *   path: 'edit/:id/:type',
 *   canDeactivate: [CanDeactivateGuard],
 *   component: ContactsFormContainerComponent,
 * }]
 *
 * ```
 * @ngModule ContactManagerWidgetModule
 */
export class ContactsFormContainerComponent {
    constructor(service, route, navigation, notificationService, propertiesService, cdr) {
        this.service = service;
        this.route = route;
        this.navigation = navigation;
        this.notificationService = notificationService;
        this.propertiesService = propertiesService;
        this.cdr = cdr;
        this.hostRef = this;
        this.itemId = this.route.paramMap.pipe(map((params) => params.get('id')));
        this.itemType$ = this.route.paramMap.pipe(map((params) => params.get('type')));
        this.item = this.service.item.pipe(map((item) => this.fromService(item)));
        this.notificationTimeout$ = this.propertiesService.notificationDismissTime$;
        this.isDiscardConfirmOpened = false;
        this.discard$ = new Subject();
        this.isPendingRequest = false;
        service.getItemFrom(this.itemId);
    }
    /**
     * onInit - lifecycle hook for setting current view.
     */
    ngOnInit() {
        this.navigation.currentView = View.Edit;
        this.isPendingRequest = false;
    }
    /**
     * Calling the save api and showing the notification.
     *
     * @param {ContactsFormItem} item - Contact Object while save
     */
    save(item) {
        this.isPendingRequest = true;
        this.itemId
            .pipe(mergeMap(() => this.service.save(this.toService(item))), catchError(() => of(undefined)), withLatestFrom(this.notificationTimeout$), map(([id, timeout]) => ({ id, timeout })), take(1))
            .subscribe(({ id, timeout }) => {
            this.isPendingRequest = false;
            this.formComponent.contactsForm.markAsPristine();
            if (id) {
                this.navigation.select(id);
                this.notificationService.showNotification({
                    header: (item.id
                        ? this.notificationEditSuccessTemplate
                        : this.notificationCreateSuccessTemplate),
                    message: '',
                    modifier: 'success',
                    ttl: timeout,
                });
            }
            else {
                this.notificationService.showNotification({
                    header: (item.id
                        ? this.notificationEditErrorTemplate
                        : this.notificationCreateErrorTemplate),
                    message: '',
                    modifier: 'error',
                    ttl: timeout,
                });
            }
            this.navigation.currentView = View.List;
            this.navigation.list();
        });
    }
    /**
     * showing the confirmation modal, when moving away from route.
     *
     * @returns {Promise<boolean> | boolean} whether route can be deactivated
     */
    canDeactivate() {
        var _a, _b;
        if ((_b = (_a = this.formComponent) === null || _a === void 0 ? void 0 : _a.contactsForm) === null || _b === void 0 ? void 0 : _b.dirty) {
            this.isDiscardConfirmOpened = true;
            this.discard$.complete();
            this.discard$ = new Subject();
            this.cdr.markForCheck();
            return this.discard$;
        }
        return true;
    }
    /**
     *  When the Edit is cancelled. It determines if it should show the selected contact or list
     *
     * @param {string} id - Contact Id.
     */
    cancelEdit(id) {
        if (id) {
            this.navigation.select(id);
            this.navigation.currentView = View.Detail;
        }
        else {
            this.navigation.list();
            this.navigation.currentView = View.List;
        }
    }
    /**
     * Method to go to previous screen based on id
     *
     * @param {string | undefined} id - Contact Id
     */
    back(id) {
        if (id) {
            this.navigation.list();
            this.navigation.currentView = View.List;
        }
        else {
            this.navigation.newContact();
            this.navigation.currentView = View.Select;
        }
    }
    /**
     *
     * @param {ContactItem | undefined} item Contact object.
     * @returns {ContactsFormItem} The transformed contact Object when returned from API.
     */
    // eslint-disable-next-line complexity
    fromService(item) {
        if (item) {
            return {
                id: item.id,
                name: item.name,
                IBAN: item.accounts && item.accounts[0] && item.accounts[0].IBAN ? item.accounts[0].IBAN : undefined,
                accountNumber: item.accounts && item.accounts[0] && item.accounts[0].accountNumber
                    ? item.accounts[0].accountNumber
                    : undefined,
                email: item.accounts && item.accounts[0] && item.accounts[0].email ? item.accounts[0].email : undefined,
                phoneNumber: item.accounts && item.accounts[0] && item.accounts[0].phoneNumber ? item.accounts[0].phoneNumber : undefined,
                accounts: item.accounts || [],
                additions: item.additions || {},
            };
        }
        else {
            return { id: '', name: '', surname: '', initials: '', accounts: [], additions: {} };
        }
    }
    /**
     *
     * @param {ContactsFormItem} item Contact Object
     * @returns {ContactItem} The trandformed contact object when submitting to API.
     */
    toService(item) {
        return Object.assign({ id: item.id, name: item.name, accounts: [
                Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, (item.accounts && item.accounts[0] ? item.accounts[0] : {})), (item.IBAN ? { IBAN: item.IBAN } : {})), (item.accountNumber ? { accountNumber: item.accountNumber } : {})), (item.phoneNumber ? { phoneNumber: item.phoneNumber } : {})), (item.email ? { email: item.email } : {})),
            ] }, (item.additions ? { additions: item.additions } : {}));
    }
    /**
     * Method that calls the delete api and returns to the list.
     *
     * @param {string} id Contact Id to be deleted
     */
    deleteContactsItem(id) {
        this.service.delete(id);
        this.navigation.list();
        this.navigation.currentView = View.List;
    }
    /**
     * event handler for confirming discard
     */
    onConfirmDiscard() {
        this.discard$.next(true);
        this.discard$.complete();
        this.isDiscardConfirmOpened = false;
    }
    /**
     * event handler for canceling discard
     */
    onCancelDiscard() {
        this.discard$.next(false);
        this.discard$.complete();
        this.isDiscardConfirmOpened = false;
    }
}
/** @nocollapse */ ContactsFormContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsFormContainerComponent, deps: [{ token: i1.ContactsService }, { token: i2.ActivatedRoute }, { token: i3.ContactsNavigationService }, { token: i4.NotificationService }, { token: i5.ContactManagerPreferencesService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ ContactsFormContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ContactsFormContainerComponent, selector: "bb-contacts-form-container", viewQueries: [{ propertyName: "formComponent", first: true, predicate: ContactsFormComponent, descendants: true }, { propertyName: "notificationCreateSuccessTemplate", first: true, predicate: ["notificationCreateSuccess"], descendants: true }, { propertyName: "notificationCreateErrorTemplate", first: true, predicate: ["notificationCreateError"], descendants: true }, { propertyName: "notificationEditSuccessTemplate", first: true, predicate: ["notificationEditSuccess"], descendants: true }, { propertyName: "notificationEditErrorTemplate", first: true, predicate: ["notificationEditError"], descendants: true }, { propertyName: "discardChangesModalContent", first: true, predicate: ["discardChangesModalContent"], descendants: true }], ngImport: i0, template: "<ng-container *ngIf=\"item | async as item; else loadingTemplate\">\n  <bb-contacts-form\n    [item]=\"item\"\n    [type]=\"itemType$ | async\"\n    [disabledSubmit]=\"isPendingRequest\"\n    (save)=\"save($event)\"\n    (cancelEdit)=\"cancelEdit($event)\"\n    (backEvent)=\"back($event)\"\n    (deleteContactsItem)=\"deleteContactsItem($event)\"\n  ></bb-contacts-form>\n</ng-container>\n\n<ng-template #notificationCreateSuccess>\n  <ng-container bbContactsCreateSuccessNotificationCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n  <ng-template bbContactsCreateSuccessNotificationCustomizable>\n    <span\n      i18n=\"@@contact-manager-form-container.notification-create.success\"\n      data-role=\"successfully-saved-contact\"\n      role=\"alert\"\n      aria-atomic=\"true\"\n    >\n      Successfully saved Contact\n    </span>\n  </ng-template>\n</ng-template>\n\n<ng-template #notificationCreateError>\n  <ng-container bbContactsCreateErrorNotificationCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n  <ng-template bbContactsCreateErrorNotificationCustomizable>\n    <span\n      i18n=\"@@contact-manager-form-container.notification-create.error\"\n      data-role=\"failed-to-save-contact\"\n      role=\"alert\"\n      aria-atomic=\"true\"\n    >\n      Error saving Contact\n    </span>\n  </ng-template>\n</ng-template>\n\n<ng-template #notificationEditSuccess>\n  <ng-container bbContactsEditSuccessNotificationCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n  <ng-template bbContactsEditSuccessNotificationCustomizable>\n    <span\n      i18n=\"@@contact-manager-form-container.notification-edit.success\"\n      data-role=\"successfully-saved-contact\"\n      role=\"alert\"\n      aria-atomic=\"true\"\n    >\n      Successfully saved Contact\n    </span>\n  </ng-template>\n</ng-template>\n\n<ng-template #notificationEditError>\n  <ng-container bbContactsEditErrorNotificationCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n  <ng-template bbContactsEditErrorNotificationCustomizable>\n    <span\n      i18n=\"@@contact-manager-form-container.notification-edit.error\"\n      data-role=\"failed-to-save-contact\"\n      role=\"alert\"\n      aria-atomic=\"true\"\n    >\n      Error saving Contact\n    </span>\n  </ng-template>\n</ng-template>\n\n<ng-template #loadingTemplate>\n  <div class=\"bb-state-container\">\n    <bb-loading-indicator-ui\n      i18n-text=\"@@contact-manager-form-container.loading.label\"\n      text=\"Loading...\"\n    ></bb-loading-indicator-ui>\n  </div>\n</ng-template>\n\n<ng-container bbContactsEditDiscardConfirmationCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n<ng-template bbContactsEditDiscardConfirmationCustomizable let-hostRef>\n  <bb-confirm-action-dialog\n    [isOpen]=\"hostRef.isDiscardConfirmOpened\"\n    [confirmButtonColor]=\"'danger'\"\n    (confirm)=\"hostRef.onConfirmDiscard()\"\n    (cancel)=\"hostRef.onCancelDiscard()\"\n  >\n    <span title i18n=\"@contact-manager-form-container.header.discardChanges\">Discard Changes</span>\n    <span body i18n=\"@@contact-manager-form-container.discardChangesConfirmation\">\n      Are you sure you want to discard your changes? This action cannot be undone.\n    </span>\n    <span cancelButtonLabel i18n=\"@@contact-manager-form-container.button.cancel\">Not now</span>\n    <span confirmButtonLabel i18n=\"@@contact-manager-form-container.button.discard\">Discard</span>\n  </bb-confirm-action-dialog>\n</ng-template>\n", components: [{ type: i6.ContactsFormComponent, selector: "bb-contacts-form", inputs: ["item", "type", "disabledSubmit"], outputs: ["save", "cancelEdit", "backEvent", "deleteContactsItem"] }, { type: i7.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i8.ConfirmActionDialogComponent, selector: "bb-confirm-action-dialog", inputs: ["confirmButtonColor", "cancelButtonColor", "isOpen", "attachComment", "commentFieldLabel"], outputs: ["confirm", "cancel"] }], directives: [{ type: i9.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i10.ContactsCreateSuccessNotificationCustomizableDirective, selector: "[bbContactsCreateSuccessNotificationCustomizable]" }, { type: i11.ContactsCreateErrorNotificationCustomizableDirective, selector: "[bbContactsCreateErrorNotificationCustomizable]" }, { type: i12.ContactsEditSuccessNotificationCustomizableDirective, selector: "[bbContactsEditSuccessNotificationCustomizable]" }, { type: i13.ContactsEditErrorNotificationCustomizableDirective, selector: "[bbContactsEditErrorNotificationCustomizable]" }, { type: i14.ContactsEditDiscardConfirmationCustomizableDirective, selector: "[bbContactsEditDiscardConfirmationCustomizable]" }], pipes: { "async": i9.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsFormContainerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-contacts-form-container',
                    templateUrl: './contacts-form-container.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.ContactsService }, { type: i2.ActivatedRoute }, { type: i3.ContactsNavigationService }, { type: i4.NotificationService }, { type: i5.ContactManagerPreferencesService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { formComponent: [{
                type: ViewChild,
                args: [ContactsFormComponent]
            }], notificationCreateSuccessTemplate: [{
                type: ViewChild,
                args: ['notificationCreateSuccess']
            }], notificationCreateErrorTemplate: [{
                type: ViewChild,
                args: ['notificationCreateError']
            }], notificationEditSuccessTemplate: [{
                type: ViewChild,
                args: ['notificationEditSuccess']
            }], notificationEditErrorTemplate: [{
                type: ViewChild,
                args: ['notificationEditError']
            }], discardChangesModalContent: [{
                type: ViewChild,
                args: ['discardChangesModalContent']
            }] } });
//# sourceMappingURL=contacts-form-container.component.js.map