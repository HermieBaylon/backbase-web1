import { Injectable } from '@angular/core';
import { RouterService } from '@backbase/foundation-ang/core';
import { AccountCreateType } from '../models/types';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/foundation-ang/core";
export var View;
(function (View) {
    View["List"] = "LIST";
    View["Detail"] = "DETAIL";
    View["Edit"] = "EDIT";
    View["Select"] = "SELECT";
})(View || (View = {}));
/**
 *
 * This service manages the routes of the widget.
 *
 * @see ContactManagerWidgetModule
 * @usageNotes
 *
 * ### Ensure the ContactManagerWidgetModule is imported to your component module
 *
 * ```ts
 * @NgModule({
 *   ...
 *   imports: [
 *     ...
 *     ContactManagerWidgetModule,
 *   ],
 * })
 * export class ContactManagerWidgetModule {}
 * ```
 *
 * ### Inject this service into your provider
 *
 * ```ts
 * @Component({
 *   ...
 *   providers: [ContactsNavigationService]
 * })
 *  export class ContactManagerWidgetModule {
 * ```
 */
export class ContactsNavigationService {
    /**
     * @param {RouterService} routerService router service
     */
    constructor(routerService) {
        this.routerService = routerService;
        this._currentView = View.List;
    }
    get currentView() {
        return this._currentView;
    }
    set currentView(view) {
        this._currentView = view;
    }
    /**
     * Routes to list view
     *
     * @param {?number} page current Page number.
     * @param {?string} query Searched query text
     * @param {'merge' | 'preserve' | ''} queryParamsHandling query hash handling. default value is merge
     * @returns {Promise<boolean>} returns a observable of boolean.
     */
    list(page, query, queryParamsHandling = 'merge') {
        const queryParam = {
            page: page !== undefined && page > -1 ? page : undefined,
        };
        if (query || query === '')
            queryParam.query = query;
        return this.routerService.navigate(['./'], {
            queryParams: Object.assign({}, queryParam),
            queryParamsHandling: queryParamsHandling,
        });
    }
    /**
     * Routes to select view for contact types.
     *
     * @param {string} id - contact ID
     * @returns {Promise<boolean>} Boolean promise.
     */
    select(id) {
        this.currentView = View.Detail;
        return this.routerService.navigate([id], { queryParamsHandling: 'merge' });
    }
    /**
     * Routes to edit screen of selected contact.
     *
     * @param {string} id - Contact ID, for selected conatct for edit.
     * @param {string} type - selected type of the contact
     * @returns {Promise<boolean>} Boolean promise.
     */
    edit(id, type = AccountCreateType.IBAN) {
        this.currentView = View.Edit;
        return this.routerService.navigate(['edit', id, type], { queryParamsHandling: 'merge' });
    }
    /**
     * Routes to new contact view.
     *
     * @returns {Promise<boolean>} Boolean promise.
     */
    newContact() {
        this.currentView = View.Select;
        return this.routerService.navigate(['select'], { queryParamsHandling: 'merge' });
    }
    /**
     * Route to new contact edit form when new contact is selected.
     *
     * @param {AccountCreateType} type whether the new contact is of IBAN/Phone/Email/Account type
     * @returns {Promise<boolean>} resolves to true when form is ready
     */
    newContactForm(type) {
        this.currentView = View.Edit;
        return this.routerService.navigate(['edit', 0, type], { queryParamsHandling: 'merge' });
    }
}
/** @nocollapse */ ContactsNavigationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsNavigationService, deps: [{ token: i1.RouterService }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ ContactsNavigationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsNavigationService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactsNavigationService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.RouterService }]; } });
//# sourceMappingURL=contacts-navigation.service.js.map