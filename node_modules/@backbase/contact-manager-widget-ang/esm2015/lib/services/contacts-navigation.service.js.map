{"version":3,"file":"contacts-navigation.service.js","sourceRoot":"","sources":["../../../../../../libs/contact-manager-widget-ang/src/lib/services/contacts-navigation.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,aAAa,EAAE,MAAM,+BAA+B,CAAC;AAC9D,OAAO,EAAE,iBAAiB,EAAE,MAAM,iBAAiB,CAAC;;;AAapD,MAAM,CAAN,IAAY,IAKX;AALD,WAAY,IAAI;IACd,qBAAa,CAAA;IACb,yBAAiB,CAAA;IACjB,qBAAa,CAAA;IACb,yBAAiB,CAAA;AACnB,CAAC,EALW,IAAI,KAAJ,IAAI,QAKf;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6BG;AAEH,MAAM,OAAO,yBAAyB;IAUpC;;OAEG;IACH,YAA6B,aAA4B;QAA5B,kBAAa,GAAb,aAAa,CAAe;QAZjD,iBAAY,GAAG,IAAI,CAAC,IAAI,CAAC;IAY2B,CAAC;IAV7D,IAAI,WAAW;QACb,OAAO,IAAI,CAAC,YAAY,CAAC;IAC3B,CAAC;IAED,IAAI,WAAW,CAAC,IAAU;QACxB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;IAC3B,CAAC;IAKD;;;;;;;OAOG;IACH,IAAI,CAAC,IAAa,EAAE,KAAc,EAAE,sBAAiD,OAAO;QAC1F,MAAM,UAAU,GAAqB;YACnC,IAAI,EAAE,IAAI,KAAK,SAAS,IAAI,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS;SACzD,CAAC;QACF,IAAI,KAAK,IAAI,KAAK,KAAK,EAAE;YAAE,UAAU,CAAC,KAAK,GAAG,KAAK,CAAC;QAEpD,OAAO,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,EAAE;YACzC,WAAW,oBAAO,UAAU,CAAE;YAC9B,mBAAmB,EAAE,mBAAmB;SACzC,CAAC,CAAC;IACL,CAAC;IACD;;;;;OAKG;IACH,MAAM,CAAC,EAAU;QACf,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC;QAE/B,OAAO,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,mBAAmB,EAAE,OAAO,EAAE,CAAC,CAAC;IAC7E,CAAC;IACD;;;;;;OAMG;IACH,IAAI,CAAC,EAAU,EAAE,OAAe,iBAAiB,CAAC,IAAI;QACpD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC;QAE7B,OAAO,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,MAAM,EAAE,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,mBAAmB,EAAE,OAAO,EAAE,CAAC,CAAC;IAC3F,CAAC;IACD;;;;OAIG;IACH,UAAU;QACR,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC;QAE/B,OAAO,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,EAAE,EAAE,mBAAmB,EAAE,OAAO,EAAE,CAAC,CAAC;IACnF,CAAC;IACD;;;;;OAKG;IACH,cAAc,CAAC,IAAuB;QACpC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC;QAE7B,OAAO,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,IAAI,CAAC,EAAE,EAAE,mBAAmB,EAAE,OAAO,EAAE,CAAC,CAAC;IAC1F,CAAC;;0IA5EU,yBAAyB;8IAAzB,yBAAyB;4FAAzB,yBAAyB;kBADrC,UAAU","sourcesContent":["import { Injectable } from '@angular/core';\nimport { RouterService } from '@backbase/foundation-ang/core';\nimport { AccountCreateType } from '../models/types';\n\nexport interface NavigationParams {\n  /**\n   * page number for fetching the contact\n   */\n  page?: number;\n  /**\n   * query text added while searching.\n   */\n  query?: string;\n}\n\nexport enum View {\n  List = 'LIST',\n  Detail = 'DETAIL',\n  Edit = 'EDIT',\n  Select = 'SELECT',\n}\n/**\n *\n * This service manages the routes of the widget.\n *\n * @see ContactManagerWidgetModule\n * @usageNotes\n *\n * ### Ensure the ContactManagerWidgetModule is imported to your component module\n *\n * ```ts\n * @NgModule({\n *   ...\n *   imports: [\n *     ...\n *     ContactManagerWidgetModule,\n *   ],\n * })\n * export class ContactManagerWidgetModule {}\n * ```\n *\n * ### Inject this service into your provider\n *\n * ```ts\n * @Component({\n *   ...\n *   providers: [ContactsNavigationService]\n * })\n *  export class ContactManagerWidgetModule {\n * ```\n */\n@Injectable()\nexport class ContactsNavigationService {\n  private _currentView = View.List;\n\n  get currentView(): View {\n    return this._currentView;\n  }\n\n  set currentView(view: View) {\n    this._currentView = view;\n  }\n  /**\n   * @param {RouterService} routerService router service\n   */\n  constructor(private readonly routerService: RouterService) {}\n  /**\n   * Routes to list view\n   *\n   * @param {?number} page current Page number.\n   * @param {?string} query Searched query text\n   * @param {'merge' | 'preserve' | ''} queryParamsHandling query hash handling. default value is merge\n   * @returns {Promise<boolean>} returns a observable of boolean.\n   */\n  list(page?: number, query?: string, queryParamsHandling: 'merge' | 'preserve' | '' = 'merge'): Promise<boolean> {\n    const queryParam: NavigationParams = {\n      page: page !== undefined && page > -1 ? page : undefined,\n    };\n    if (query || query === '') queryParam.query = query;\n\n    return this.routerService.navigate(['./'], {\n      queryParams: { ...queryParam },\n      queryParamsHandling: queryParamsHandling,\n    });\n  }\n  /**\n   * Routes to select view for contact types.\n   *\n   * @param {string} id - contact ID\n   * @returns {Promise<boolean>} Boolean promise.\n   */\n  select(id: string): Promise<boolean> {\n    this.currentView = View.Detail;\n\n    return this.routerService.navigate([id], { queryParamsHandling: 'merge' });\n  }\n  /**\n   * Routes to edit screen of selected contact.\n   *\n   * @param {string} id - Contact ID, for selected conatct for edit.\n   * @param {string} type - selected type of the contact\n   * @returns {Promise<boolean>} Boolean promise.\n   */\n  edit(id: string, type: string = AccountCreateType.IBAN): Promise<boolean> {\n    this.currentView = View.Edit;\n\n    return this.routerService.navigate(['edit', id, type], { queryParamsHandling: 'merge' });\n  }\n  /**\n   * Routes to new contact view.\n   *\n   * @returns {Promise<boolean>} Boolean promise.\n   */\n  newContact(): Promise<boolean> {\n    this.currentView = View.Select;\n\n    return this.routerService.navigate(['select'], { queryParamsHandling: 'merge' });\n  }\n  /**\n   * Route to new contact edit form when new contact is selected.\n   *\n   * @param {AccountCreateType} type whether the new contact is of IBAN/Phone/Email/Account type\n   * @returns {Promise<boolean>} resolves to true when form is ready\n   */\n  newContactForm(type: AccountCreateType): Promise<boolean> {\n    this.currentView = View.Edit;\n\n    return this.routerService.navigate(['edit', 0, type], { queryParamsHandling: 'merge' });\n  }\n}\n"]}