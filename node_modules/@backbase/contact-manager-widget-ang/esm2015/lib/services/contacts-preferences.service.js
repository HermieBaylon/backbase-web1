import { Injectable, Optional } from '@angular/core';
import { toBoolean, toInteger } from '@backbase/contact-common-ang';
import { ItemModel } from '@backbase/foundation-ang/core';
import { BehaviorSubject, combineLatest } from 'rxjs';
import { map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/foundation-ang/core";
/**
 *
 * This service manages the widget properties.
 *
 * @see ContactManagerWidgetModule
 * @usageNotes
 *
 * ### Ensure the ContactManagerWidgetModule is imported to your component module
 *
 * ```ts
 * @NgModule({
 *   ...
 *   imports: [
 *     ...
 *     ContactManagerWidgetModule,
 *   ],
 * })
 * export class ContactManagerWidgetModule {}
 * ```
 *
 * ### Inject this service to the providers.
 *
 * ```ts
 * @Component({
 *   ...
 *  providers: [
 * {
 *   provide: ContactManagerPreferencesService,
 *   useClass: ContactManagerJourneyPreferencesService,
 * },
 * })
 *  export class ContactManagerWidgetModule {
 * ```
 */
export class ContactManagerPreferencesService {
    constructor(itemModel) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        this.itemModel = itemModel;
        this.newContactSubject$ = new BehaviorSubject(undefined);
        this.pageSizeSubject$ = new BehaviorSubject(undefined);
        this.maxNavPagesSubject$ = new BehaviorSubject(undefined);
        this.paginationTypeSubject$ = new BehaviorSubject(undefined);
        this.createContactEmailSubject$ = new BehaviorSubject(undefined);
        this.createContactIBANSubject$ = new BehaviorSubject(undefined);
        this.createContactAccountSubject$ = new BehaviorSubject(undefined);
        this.createContactPhoneSubject$ = new BehaviorSubject(undefined);
        this.notificationDismissTimeSubject$ = new BehaviorSubject(undefined);
        this.newContactItemModel = (_a = this.itemModel) === null || _a === void 0 ? void 0 : _a.property('newContact').pipe(map(toBoolean));
        this.pageSizeItemModel = (_b = this.itemModel) === null || _b === void 0 ? void 0 : _b.property('pageSize').pipe(map(toInteger));
        this.maxNavPagesItemModel = (_c = this.itemModel) === null || _c === void 0 ? void 0 : _c.property('maxNavPages').pipe(map(toInteger));
        this.paginationTypeItemModel = (_d = this.itemModel) === null || _d === void 0 ? void 0 : _d.property('paginationType');
        this.createContactEmailItemModel = (_e = this.itemModel) === null || _e === void 0 ? void 0 : _e.property('createContactEmail').pipe(map(toBoolean));
        this.createContactIBANItemModel = (_f = this.itemModel) === null || _f === void 0 ? void 0 : _f.property('createContactIBAN').pipe(map(toBoolean));
        this.createContactAccountItemModel = (_g = this.itemModel) === null || _g === void 0 ? void 0 : _g.property('createContactAccount').pipe(map(toBoolean));
        this.createContactPhoneItemModel = (_h = this.itemModel) === null || _h === void 0 ? void 0 : _h.property('createContactPhone').pipe(map(toBoolean));
        this.notificationDismissTimeItemModel = (_j = this.itemModel) === null || _j === void 0 ? void 0 : _j.property('notificationDismissTime').pipe(map(toInteger));
        this.newContact$ = this.getProperty(this.newContactSubject$, this.newContactItemModel);
        this.pageSize$ = this.getProperty(this.pageSizeSubject$, this.pageSizeItemModel);
        this.maxNavPages$ = this.getProperty(this.maxNavPagesSubject$, this.maxNavPagesItemModel);
        this.paginationType$ = this.getProperty(this.paginationTypeSubject$, this.paginationTypeItemModel);
        this.createContactEmail$ = this.getProperty(this.createContactEmailSubject$, this.createContactEmailItemModel);
        this.createContactIBAN$ = this.getProperty(this.createContactIBANSubject$, this.createContactIBANItemModel);
        this.createContactAccount$ = this.getProperty(this.createContactAccountSubject$, this.createContactAccountItemModel);
        this.createContactPhone$ = this.getProperty(this.createContactPhoneSubject$, this.createContactPhoneItemModel);
        this.notificationDismissTime$ = this.getProperty(this.notificationDismissTimeSubject$, this.notificationDismissTimeItemModel);
    }
    getProperty(input$, itemModel) {
        return combineLatest([input$, itemModel]).pipe(map(([value, valueIM]) => (value === undefined ? valueIM : value)));
    }
    /**
     *  Update the new Contact value
     *
     * @param {boolean} value selected value
     */
    setNewContact(value) {
        this.newContactSubject$.next(value);
    }
    /**
     *  Update the pageSize value
     *
     * @param {number} value selected value
     */
    setPageSize(value) {
        this.pageSizeSubject$.next(value);
    }
    /**
     *  Update the maxNavPages value
     *
     * @param {number} value selected value
     */
    setMaxNavPages(value) {
        this.maxNavPagesSubject$.next(value);
    }
    /**
     *  Update the paginationType value
     *
     * @param {string} value selected value
     */
    setPaginationType(value) {
        this.paginationTypeSubject$.next(value);
    }
    /**
     *  Update the notificationDissmissTime value
     *
     * @param {number} value selected value
     */
    setNotificationDismissTime(value) {
        this.notificationDismissTimeSubject$.next(value);
    }
    /**
     *  Update the createContactEmail value
     *
     * @param {boolean} value selected value
     */
    setCreateContactEmail(value) {
        this.createContactEmailSubject$.next(value);
    }
    /**
     *  Update the createContactIBAN value
     *
     * @param {boolean} value selected value
     */
    setCreateContactIBAN(value) {
        this.createContactIBANSubject$.next(value);
    }
    /**
     *  Update the createContactAccount value
     *
     * @param {boolean} value selected value
     */
    setCreateContactAccount(value) {
        this.createContactAccountSubject$.next(value);
    }
    /**
     *  Update the createContactPhone value
     *
     * @param {boolean} value selected value
     */
    setCreateContactPhone(value) {
        this.createContactPhoneSubject$.next(value);
    }
}
/** @nocollapse */ ContactManagerPreferencesService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactManagerPreferencesService, deps: [{ token: i1.ItemModel, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ ContactManagerPreferencesService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactManagerPreferencesService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactManagerPreferencesService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.ItemModel, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=contacts-preferences.service.js.map