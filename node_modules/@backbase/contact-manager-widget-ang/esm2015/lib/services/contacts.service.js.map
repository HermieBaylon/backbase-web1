{"version":3,"file":"contacts.service.js","sourceRoot":"","sources":["../../../../../../libs/contact-manager-widget-ang/src/lib/services/contacts.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { HttpErrorResponse, HttpResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport { ContactsHttpService } from '@backbase/data-ang/contact-manager';\n\nimport { BehaviorSubject, combineLatest, merge, Observable, of, ReplaySubject, Subject, Subscription } from 'rxjs';\nimport { catchError, distinctUntilChanged, map, mapTo, scan, shareReplay, switchMap } from 'rxjs/operators';\nimport {\n  ContactActions,\n  ContactItem,\n  Contacts,\n  ContactUpdateDeleteResponse,\n  Id,\n  LoadMoreMethod,\n} from '@backbase/contact-common-ang';\nimport { AccountCreateType } from '../models/types';\n\nexport interface PageParams {\n  from: number;\n  size: number;\n  query: string;\n}\n\nexport interface ListParams {\n  pagination: PageParams;\n  paginationType?: string;\n  method?: string;\n}\n\nexport interface ContactList {\n  count: number | null;\n  contacts: Contacts;\n}\n\nexport interface GetContactsParams {\n  saId?: string;\n  leId?: string;\n  cursor?: string;\n  from?: number;\n  size?: number;\n  query?: string;\n}\n\nexport enum ModalOptions {\n  Cancel = 0,\n  Success = 1,\n}\n\nexport type ItemId = string;\n\nconst defaultListParams: ListParams = {\n  pagination: {\n    from: 0,\n    size: 4,\n    query: '',\n  },\n  paginationType: LoadMoreMethod.PAGINATION,\n};\n\n/**\n *\n * This service calls the api calls from data-ang\n *\n * @see ContactManagerWidgetModule\n * @usageNotes\n *\n * ### Ensure the ContactManagerWidgetModule is imported to your component module\n *\n * ```ts\n * @NgModule({\n *   ...\n *   imports: [\n *     ...\n *     ContactManagerWidgetModule,\n *   ],\n * })\n * export class ContactManagerWidgetModule {}\n * ```\n *\n * ### Inject this service into your provider\n *\n * ```ts\n * @Component({\n *   ...\n *   providers: [ContactsService]\n * })\n *  export class ContactManagerWidgetModule {\n * ```\n */\n@Injectable()\nexport class ContactsService {\n  constructor(public dataService: ContactsHttpService) {}\n\n  // \"Events\" - Subjects that are used to trigger actions\n  private readonly saveComplete = new Subject<LoadMoreMethod>();\n\n  private readonly listParams = new BehaviorSubject(defaultListParams);\n  readonly selectedItemId = new ReplaySubject<ItemId | null>(1);\n  private lastSelectedItemId = new BehaviorSubject<ItemId | undefined>(undefined);\n\n  private readonly actions$ = merge(\n    this.listParams.pipe(\n      map(({ pagination, paginationType, method }) => ({\n        action: ContactActions.Load,\n        params: pagination,\n        paginationType,\n        method: method,\n      })),\n    ),\n    this.saveComplete.pipe(mapTo({ action: ContactActions.Refresh })),\n  );\n\n  // The params to use for a list request\n  readonly items: Observable<ContactList> = this.actions$.pipe(\n    scan((state, action) => ({ ...state, ...action })),\n    map(({ action, params, paginationType, method }: any) => {\n      const isLoadMoreRefresh = action === ContactActions.Refresh && paginationType === LoadMoreMethod.LOAD_MORE;\n\n      return {\n        action,\n        paginationType,\n        params: {\n          ...params,\n          ...(isLoadMoreRefresh ? { from: 0, size: (params.from + 1) * params.size } : {}),\n        },\n        method,\n      };\n    }),\n    switchMap(({ params, method, ...state }) =>\n      this.dataService.getContacts(this.toHttpParams(params), 'response').pipe(\n        map(listFromData),\n        map((response) => ({ ...response, params, ...state, method })),\n      ),\n    ),\n    scan((acc: any, curr: any) => {\n      const { count, action, paginationType, method } = curr;\n      let contacts;\n      if (\n        curr.params.from > 0 &&\n        acc.params.query === curr.params.query &&\n        action !== ContactActions.Refresh &&\n        paginationType === LoadMoreMethod.LOAD_MORE &&\n        method !== 'search'\n      ) {\n        contacts = [...acc.contacts, ...curr.contacts];\n      } else {\n        contacts = [...curr.contacts];\n      }\n\n      return {\n        count,\n        contacts,\n        params: curr.params,\n      };\n    }),\n    shareReplay(),\n  );\n\n  readonly currentlySelectedItemId: Observable<ItemId | null> = combineLatest([\n    this.selectedItemId,\n    this.lastSelectedItemId,\n    this.items,\n  ]).pipe(\n    map(([id, lastItemId, items]) => {\n      return id ?? lastItemId ?? items.contacts[0]?.id ?? null;\n    }),\n  );\n\n  readonly item: Observable<ContactItem | undefined> = combineLatest([\n    this.currentlySelectedItemId.pipe(distinctUntilChanged()),\n    this.items,\n  ]).pipe(\n    switchMap(([id, items]) => {\n      if (id === '0') {\n        return of(undefined);\n      }\n\n      let contact: ContactItem | undefined = this.getContactsItem(\n        id ?? this.lastSelectedItemId.value ?? undefined,\n        items,\n      );\n\n      const firstContact = this.getContactsItem(this.firstContact(items.contacts), items);\n\n      if (!contact && this.lastSelectedItemId.value) {\n        const contactId = this.lastSelectedItemId.value;\n\n        return this.dataService.getContact({ contactId }).pipe(catchError(() => of(firstContact)));\n      }\n\n      if (contact) {\n        this.lastSelectedItemId.next(contact.id);\n      }\n\n      return of(contact || firstContact);\n    }),\n    shareReplay(),\n  );\n\n  readonly deleteSuccess = new Subject();\n\n  readonly deleteError = new Subject<HttpErrorResponse>();\n\n  /**\n   * Updates the selected contact.\n   *\n   * @param {Observable<ItemId | null>} ids contact Id\n   */\n  getItemFrom(ids: Observable<ItemId | null>): void {\n    ids.subscribe((id) => this.selectedItemId.next(id));\n  }\n\n  private firstContact(contacts: Array<ContactItem> | null): string | undefined {\n    return contacts && contacts.length > 0 ? contacts[0].id : undefined;\n  }\n\n  /**\n   * Gets the contact in the given list by id.\n   *\n   * @param {string | undefined} id contact ID\n   * @param {ContactList} items all contacts in an array form.\n   * @returns {ContactItem | undefined} contact item from list or undefined\n   */\n  getContactsItem(id: string | undefined, items: ContactList): ContactItem | undefined {\n    if (!(items && items.contacts && items.contacts.length)) return;\n\n    let item: ContactItem | undefined;\n    if (id === '0') {\n      return undefined;\n    } else {\n      item = items.contacts.find((v: ContactItem) => v.id === id);\n    }\n\n    return item;\n  }\n\n  private toHttpParams(params: any): PageParams {\n    return {\n      from: Math.floor(params.from),\n      size: Math.floor(params.size),\n      query: params.query || undefined,\n    };\n  }\n\n  /**\n   * Update the list of Parameters when changed.\n   *\n   * @param {?string} query search query\n   * @param {?number} page current Page of contact lists\n   * @param {?number} size no of records to be shown on one page\n   * @param {?string} paginationType type of pagination `load-more` or `pagination`\n   * @param {?string} method enumerated value\n   */\n  updateItemList(query?: string, page?: number, size?: number, paginationType?: string, method?: string) {\n    this.listParams.next({\n      pagination: {\n        query: query || '',\n        from: page || 0,\n        size: size || 5,\n      },\n      paginationType: paginationType || LoadMoreMethod.PAGINATION,\n      method,\n    });\n  }\n\n  /**\n   * Gets the account Type for the contacts.\n   *\n   * @returns {Observable<string>} Observable of a string with accountType\n   */\n  getAccountType(): Observable<string> {\n    return this.item.pipe(\n      map((contactItem) => (contactItem ? this.checkaccountType(contactItem) : AccountCreateType.IBAN)),\n    );\n  }\n\n  /**\n   * Calls the update API for contacts when updated.\n   *\n   * @param {ContactItem} item - Updated contact.\n   * @returns {Observable<string | undefined>} the observable of updated ID of contact.\n   */\n  save(item: ContactItem): Observable<string | undefined> {\n    if (isNew(item)) {\n      const postItem: any = item;\n\n      return this.dataService\n        .postContacts({ contactsPostRequestBody: postItem }, 'response')\n        .pipe(map((res: HttpResponse<Id>) => this.saveSuccess(res)));\n    } else {\n      return this.dataService\n        .putContact({ contactId: item.id, contactPutRequestBody: item }, 'response')\n        .pipe(map((res: HttpResponse<ContactUpdateDeleteResponse>) => this.editSuccess(res, item.id)));\n    }\n  }\n\n  /**\n   * Returns the contact Id when updated.\n   *\n   * @param {HttpResponse<Id>} res save response\n   * @returns {string | undefined} contact ID.\n   */\n  saveSuccess(res: HttpResponse<Id>): string | undefined {\n    if (res.body && res.body.id) {\n      this.saveComplete.next();\n\n      return res.body.id;\n    } else {\n      // error state\n      return undefined;\n    }\n  }\n\n  /**\n   * Returns the ID of the contact when edit is successful\n   *\n   * @param {HttpResponse<ContactUpdateDeleteResponse>} res response of editing a contact.\n   * @param {string} id Contact ID.\n   * @returns {string | undefined} the ID of contact when edit is successful.\n   */\n  editSuccess(res: HttpResponse<ContactUpdateDeleteResponse>, id: string): string | undefined {\n    if (res.body) {\n      this.saveComplete.next();\n\n      return id;\n    } else {\n      // error state\n      return undefined;\n    }\n  }\n\n  /**\n   * Calls the deletion API.\n   *\n   * @param {string} contactId - Contact ID for selected contact.\n   * @returns {Subscription} Subscription of deletion api.\n   */\n  delete(contactId: string): Subscription {\n    return this.dataService.deleteContact({ contactId }).subscribe(\n      () => {\n        this.deleteSuccess.next();\n        this.saveComplete.next();\n      },\n      (error) => this.deleteError.next(error),\n    );\n  }\n\n  /**\n   * Returns the account Type for the given contact\n   *\n   * @param {ContactItem} item contact object.\n   * @returns {string} type of account for one contact.\n   */\n  checkaccountType(item: ContactItem): string {\n    if (item) {\n      return (\n        (Object.entries(item?.accounts[0]).find(\n          ([key, value]) => Object.values(AccountCreateType).includes(<AccountCreateType>key) && value,\n        ) || [])[0] || AccountCreateType.IBAN\n      );\n    }\n\n    return AccountCreateType.IBAN;\n  }\n}\n\n/**\n * Returns if the contact is new or is being edited.\n *\n * @param {ContactItem} item contact object\n * @returns {boolean} whether the item is new or existing\n */\nfunction isNew(item: ContactItem): boolean {\n  return item.id === undefined || item.id === '';\n}\n\n/**\n * Returns the contact list in a format.\n *\n * @param {HttpResponse<Contacts>} response http response with data\n * @returns {ContactList} contacts list with total count.\n */\nfunction listFromData(response: HttpResponse<Contacts>): ContactList {\n  if (response.body === null) {\n    throw new Error('Response body not set');\n  }\n\n  const headers = response.headers;\n  const totalCount = headers.get('X-Total-Count');\n\n  return {\n    count: totalCount ? +totalCount : null,\n    contacts: response.body,\n  };\n}\n"]}