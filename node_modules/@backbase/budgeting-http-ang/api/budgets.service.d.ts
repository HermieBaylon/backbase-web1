import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { BudgetsGetResponseBody } from '../model/models';
import { BudgetsPostRequestBody } from '../model/models';
import { BudgetsPostResponseBody } from '../model/models';
import { IdPutRequestBody } from '../model/models';
import { BudgetingConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface DeleteIdRequestParams {
    ["id"]: string;
}
export interface PostBudgetsRequestParams {
    ["budgetsPostRequestBody"]: BudgetsPostRequestBody;
}
export interface PutIdRequestParams {
    ["id"]: string;
    ["idPutRequestBody"]: IdPutRequestBody;
}
export declare class BudgetsHttpService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: BudgetingConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: BudgetingConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    deleteId(requestParameters: DeleteIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    deleteId(requestParameters: DeleteIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    deleteId(requestParameters: DeleteIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    deleteIdUrl(requestParameters: DeleteIdRequestParams): string;
    getBudgets(observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<BudgetsGetResponseBody>>;
    getBudgets(observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<BudgetsGetResponseBody>>>;
    getBudgets(observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<BudgetsGetResponseBody>>>;
    getBudgetsUrl(): string;
    postBudgets(requestParameters: PostBudgetsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<BudgetsPostResponseBody>;
    postBudgets(requestParameters: PostBudgetsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<BudgetsPostResponseBody>>;
    postBudgets(requestParameters: PostBudgetsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<BudgetsPostResponseBody>>;
    postBudgetsUrl(requestParameters: PostBudgetsRequestParams): string;
    putId(requestParameters: PutIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    putId(requestParameters: PutIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    putId(requestParameters: PutIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    putIdUrl(requestParameters: PutIdRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<BudgetsHttpService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<BudgetsHttpService>;
}
