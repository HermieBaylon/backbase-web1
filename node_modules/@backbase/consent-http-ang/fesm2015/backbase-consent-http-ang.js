import * as i0 from '@angular/core';
import { InjectionToken, NgModule, Optional, SkipSelf, Injectable, Inject } from '@angular/core';
import * as i1 from '@angular/common/http';
import { HttpHeaders } from '@angular/common/http';
import * as i2 from '@backbase/foundation-ang/data-http';
import { createMocks } from '@backbase/foundation-ang/data-http';

const ConsentStatus = {
    ACTIVE: 'ACTIVE',
    REVOKED: 'REVOKED',
    EXPIRED: 'EXPIRED'
};

const Permission = {
    ReadAccountsDetail: 'ReadAccountsDetail',
    ReadBalances: 'ReadBalances',
    ReadTransactionsDetail: 'ReadTransactionsDetail',
    ReadBeneficiariesDetail: 'ReadBeneficiariesDetail',
    ReadDirectDebits: 'ReadDirectDebits',
    ReadProducts: 'ReadProducts',
    ReadStandingOrdersDetail: 'ReadStandingOrdersDetail',
    ReadTransactionsCredits: 'ReadTransactionsCredits',
    ReadTransactionsDebits: 'ReadTransactionsDebits'
};

const CONSENT_BASE_PATH = new InjectionToken('CONSENT_BASE_PATH');
const COLLECTION_FORMATS = {
    'csv': ',',
    'tsv': '   ',
    'ssv': ' ',
    'pipes': '|'
};

class ConsentConfiguration {
    constructor(configurationParameters = {}) {
        this.apiKeys = configurationParameters.apiKeys;
        this.username = configurationParameters.username;
        this.password = configurationParameters.password;
        this.accessToken = configurationParameters.accessToken;
        this.basePath = configurationParameters.basePath;
        this.withCredentials = configurationParameters.withCredentials;
        this.encoder = configurationParameters.encoder;
        if (configurationParameters.credentials) {
            this.credentials = configurationParameters.credentials;
        }
        else {
            this.credentials = {};
        }
    }
    selectHeaderContentType(contentTypes) {
        if (contentTypes.length === 0) {
            return undefined;
        }
        const type = contentTypes.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return contentTypes[0];
        }
        return type;
    }
    selectHeaderAccept(accepts) {
        if (accepts.length === 0) {
            return undefined;
        }
        const type = accepts.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return accepts[0];
        }
        return type;
    }
    isJsonMime(mime) {
        const jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
    lookupCredential(key) {
        const value = this.credentials[key];
        return typeof value === 'function'
            ? value()
            : value;
    }
}
const CONFIG_TOKEN = new InjectionToken('api-data-module ConsentConfiguration');

class ConsentApiModule {
    constructor(parentModule, http, dataModulesManager, config) {
        if (parentModule) {
            throw new Error('ConsentApiModule is already loaded. Import in your base AppModule only.');
        }
        if (!http) {
            throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                'See also https://github.com/angular/angular/issues/20575');
        }
        if (dataModulesManager) {
            dataModulesManager.setModuleConfig(CONFIG_TOKEN, {
                apiRoot: '',
                servicePath: config.basePath || '',
                headers: {},
            });
        }
    }
    static forRoot(configurationFactory) {
        return {
            ngModule: ConsentApiModule,
            providers: [{ provide: ConsentConfiguration, useFactory: configurationFactory }]
        };
    }
}
ConsentApiModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentApiModule, deps: [{ token: ConsentApiModule, optional: true, skipSelf: true }, { token: i1.HttpClient, optional: true }, { token: i2.DataModulesManager, optional: true }, { token: ConsentConfiguration }], target: i0.ɵɵFactoryTarget.NgModule });
ConsentApiModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentApiModule });
ConsentApiModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentApiModule, providers: [], imports: [[]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentApiModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [],
                    declarations: [],
                    exports: [],
                    providers: []
                }]
        }], ctorParameters: function () { return [{ type: ConsentApiModule, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: i1.HttpClient, decorators: [{
                    type: Optional
                }] }, { type: i2.DataModulesManager, decorators: [{
                    type: Optional
                }] }, { type: ConsentConfiguration }]; } });

class CustomHttpParameterCodec {
    encodeKey(k) {
        return encodeURIComponent(k);
    }
    encodeValue(v) {
        return encodeURIComponent(v);
    }
    decodeKey(k) {
        return decodeURIComponent(k);
    }
    decodeValue(v) {
        return decodeURIComponent(v);
    }
}

class ConsentRequestsHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '/consent';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new ConsentConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    getIdById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getIdById.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/consent-requests/${encodeURIComponent(String(_id))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getIdByIdUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getIdById.');
        }
        return `${this.configuration.basePath}/client-api/v2/consent-requests/${encodeURIComponent(String(_id))}`;
    }
    postRejectById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling postRejectById.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/consent-requests/${encodeURIComponent(String(_id))}/reject`, null, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postRejectByIdUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling postRejectById.');
        }
        return `${this.configuration.basePath}/client-api/v2/consent-requests/${encodeURIComponent(String(_id))}/reject`;
    }
}
ConsentRequestsHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentRequestsHttpService, deps: [{ token: i1.HttpClient }, { token: CONSENT_BASE_PATH, optional: true }, { token: ConsentConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
ConsentRequestsHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentRequestsHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentRequestsHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [CONSENT_BASE_PATH]
                }] }, { type: ConsentConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const ConsentRequestsHttpServiceGetIdByIdMocksProvider = createMocks([{
        urlPattern: "/consent/client-api/v2/consent-requests/{id}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "id": "34bf3478-4187-46b1-aab1-20577c5d339c",
                    "tpp": {
                        "id": "0dbbf48e-53dc-4968-8167-6337718f9781",
                        "externalId": "amazon",
                        "name": "Amazon",
                        "website": "https://amazon.com",
                        "imageUrl": "https://cdn0.iconfinder.com/data/icons/most-usable-logos/120/Amazon-48.png",
                        "isTrusted": true,
                        "mail": "primary@amazon.com",
                        "phonenumber": "8882803321",
                        "address": "Amazon.com, Inc. Customer Service PO Box 81226 Seattle, WA 98108-1226",
                        "country": "US"
                    },
                    "expiryDate": "2019-03-28T16:41:41.090Z",
                    "permissions": ["ReadAccountsDetail", "ReadBalances", "ReadTransactionsDetail"],
                    "allowConsentRedirectUrl": "https://amazon.com",
                    "rejectConsentRedirectUrl": "https://google.com",
                    "accounts": [{
                            "id": "9bf23657-511a-4022-a474-c3617cf1589e",
                            "number": "LV20GOWNKDCDIA03FAQD5",
                            "name": "Ricardo Norton's Current Account",
                            "type": "currentAccount",
                            "currency": "USD",
                            "balance": "9763.34"
                        }, {
                            "id": "dd98797a-a464-4702-ae2f-2214c81a8e69",
                            "number": "AD6548375906DIXVOJTD558B",
                            "name": "Ricardo Norton's Savings Account",
                            "type": "savingsAccount",
                            "currency": "USD",
                            "balance": "3788.61"
                        }, {
                            "id": "c5566c1b-2ebe-45b5-a32e-cf83c3669bbd",
                            "number": "EE511790690392885115",
                            "name": "Ricardo Norton's Credit Card",
                            "type": "creditCard",
                            "currency": "USD",
                            "balance": "2876.76"
                        }, {
                            "id": "cf916772-3676-43a8-89c0-86bd545f84dd",
                            "number": "HR1964204918384144019",
                            "name": "Ricardo Norton's Investment Account",
                            "type": "investmentAccount",
                            "currency": "USD",
                            "balance": "2676.23"
                        }, {
                            "id": "7eaee238-d5a9-40d3-80b9-75a29fea908b",
                            "number": "IE37QNJQ34395947171968",
                            "name": "Ricardo Norton's Mortgage Loan",
                            "type": "mortgage",
                            "currency": "USD",
                            "balance": -150000.0
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "value": {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                }
            },
            {
                status: 403,
                body: {
                    "value": {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                }
            },
            {
                status: 404,
                body: {
                    "value": {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                }
            },
        ]
    }]);
const ConsentRequestsHttpServicePostRejectByIdMocksProvider = createMocks([{
        urlPattern: "/consent/client-api/v2/consent-requests/{id}/reject",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {}
            },
            {
                status: 400,
                body: {
                    "value": {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                }
            },
            {
                status: 403,
                body: {
                    "value": {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                }
            },
            {
                status: 404,
                body: {
                    "value": {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                }
            },
        ]
    }]);
const ConsentRequestsHttpServiceMocksProvider = createMocks([
    {
        urlPattern: "/consent/client-api/v2/consent-requests/{id}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "id": "34bf3478-4187-46b1-aab1-20577c5d339c",
                    "tpp": {
                        "id": "0dbbf48e-53dc-4968-8167-6337718f9781",
                        "externalId": "amazon",
                        "name": "Amazon",
                        "website": "https://amazon.com",
                        "imageUrl": "https://cdn0.iconfinder.com/data/icons/most-usable-logos/120/Amazon-48.png",
                        "isTrusted": true,
                        "mail": "primary@amazon.com",
                        "phonenumber": "8882803321",
                        "address": "Amazon.com, Inc. Customer Service PO Box 81226 Seattle, WA 98108-1226",
                        "country": "US"
                    },
                    "expiryDate": "2019-03-28T16:41:41.090Z",
                    "permissions": ["ReadAccountsDetail", "ReadBalances", "ReadTransactionsDetail"],
                    "allowConsentRedirectUrl": "https://amazon.com",
                    "rejectConsentRedirectUrl": "https://google.com",
                    "accounts": [{
                            "id": "9bf23657-511a-4022-a474-c3617cf1589e",
                            "number": "LV20GOWNKDCDIA03FAQD5",
                            "name": "Ricardo Norton's Current Account",
                            "type": "currentAccount",
                            "currency": "USD",
                            "balance": "9763.34"
                        }, {
                            "id": "dd98797a-a464-4702-ae2f-2214c81a8e69",
                            "number": "AD6548375906DIXVOJTD558B",
                            "name": "Ricardo Norton's Savings Account",
                            "type": "savingsAccount",
                            "currency": "USD",
                            "balance": "3788.61"
                        }, {
                            "id": "c5566c1b-2ebe-45b5-a32e-cf83c3669bbd",
                            "number": "EE511790690392885115",
                            "name": "Ricardo Norton's Credit Card",
                            "type": "creditCard",
                            "currency": "USD",
                            "balance": "2876.76"
                        }, {
                            "id": "cf916772-3676-43a8-89c0-86bd545f84dd",
                            "number": "HR1964204918384144019",
                            "name": "Ricardo Norton's Investment Account",
                            "type": "investmentAccount",
                            "currency": "USD",
                            "balance": "2676.23"
                        }, {
                            "id": "7eaee238-d5a9-40d3-80b9-75a29fea908b",
                            "number": "IE37QNJQ34395947171968",
                            "name": "Ricardo Norton's Mortgage Loan",
                            "type": "mortgage",
                            "currency": "USD",
                            "balance": -150000.0
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "value": {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                }
            },
            {
                status: 403,
                body: {
                    "value": {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                }
            },
            {
                status: 404,
                body: {
                    "value": {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                }
            },
        ]
    },
    {
        urlPattern: "/consent/client-api/v2/consent-requests/{id}/reject",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {}
            },
            {
                status: 400,
                body: {
                    "value": {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                }
            },
            {
                status: 403,
                body: {
                    "value": {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                }
            },
            {
                status: 404,
                body: {
                    "value": {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                }
            },
        ]
    },
]);

class ConsentsHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '/consent';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new ConsentConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    getConsents(observe = 'body', reportProgress = false, options) {
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/consents`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getConsentsUrl() {
        return `${this.configuration.basePath}/client-api/v2/consents`;
    }
    getIdByIdgetId(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getIdByIdgetId.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/consents/${encodeURIComponent(String(_id))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getIdByIdgetIdUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getIdByIdgetId.');
        }
        return `${this.configuration.basePath}/client-api/v2/consents/${encodeURIComponent(String(_id))}`;
    }
    postConsents(requestParameters, observe = 'body', reportProgress = false, options) {
        const _consentPost = requestParameters["consentPost"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/consents`, _consentPost, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postConsentsUrl(requestParameters) {
        const _consentPost = requestParameters["consentPost"];
        return `${this.configuration.basePath}/client-api/v2/consents`;
    }
    postRevokeById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling postRevokeById.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/consents/${encodeURIComponent(String(_id))}/revoke`, null, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postRevokeByIdUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling postRevokeById.');
        }
        return `${this.configuration.basePath}/client-api/v2/consents/${encodeURIComponent(String(_id))}/revoke`;
    }
}
ConsentsHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentsHttpService, deps: [{ token: i1.HttpClient }, { token: CONSENT_BASE_PATH, optional: true }, { token: ConsentConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
ConsentsHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentsHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentsHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [CONSENT_BASE_PATH]
                }] }, { type: ConsentConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const ConsentsHttpServiceGetConsentsMocksProvider = createMocks([{
        urlPattern: "/consent/client-api/v2/consents",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "id": "34bf3478-4187-46b1-aab1-20577c5d339c",
                        "tpp": {
                            "id": "0dbbf48e-53dc-4968-8167-6337718f9781",
                            "externalId": "amazon",
                            "name": "Amazon",
                            "website": "https://amazon.com",
                            "imageUrl": "https://cdn0.iconfinder.com/data/icons/most-usable-logos/120/Amazon-48.png",
                            "isTrusted": true,
                            "mail": "primary@amazon.com",
                            "phonenumber": "8882803321",
                            "address": "Amazon.com, Inc. Customer Service PO Box 81226 Seattle, WA 98108-1226",
                            "country": "US"
                        },
                        "status": "ACTIVE",
                        "expiryDate": "2019-03-28T16:41:41.090Z",
                        "numberOfAccounts": 3
                    }, {
                        "id": "ffe7b310-63ff-4c3a-be75-ec5f19da7e9e",
                        "tpp": {
                            "id": "b1e5bca6-2185-42a0-8701-08f4c3497485",
                            "externalId": "netflix",
                            "name": "Netflix",
                            "website": "https://netflix.com",
                            "imageUrl": "https://cdn2.iconfinder.com/data/icons/metro-uinvert-dock/256/Netflix.png",
                            "isTrusted": true,
                            "mail": "support@netflix.com",
                            "phonenumber": "8882803321",
                            "address": "Bowery street 103, 1290 LL, New York, New York, USA",
                            "country": "US"
                        },
                        "status": "REVOKED",
                        "expiryDate": "2019-05-28T16:41:41.090Z",
                        "numberOfAccounts": 1
                    }, {
                        "id": "18dd7b1c-dabf-49bb-b9e3-5f586efd19d3",
                        "tpp": {
                            "id": "b62943b9-811b-446d-ac68-0a38de63d792",
                            "externalId": "some-third-party",
                            "name": "Some third party",
                            "website": "https://some-third-party.com",
                            "isTrusted": false,
                            "mail": "contact@some-third-party.com",
                            "phonenumber": "8882803321",
                            "address": "2967 West Side Avenue, 07649, Angwil, River Edge, New Jersey, USA",
                            "country": "US"
                        },
                        "status": "EXPIRED",
                        "expiryDate": "2018-09-28T16:41:41.090Z",
                        "numberOfAccounts": 2
                    }]
            },
            {
                status: 400,
                body: {
                    "value": {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                }
            },
            {
                status: 403,
                body: {
                    "value": {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                }
            },
        ]
    }]);
const ConsentsHttpServiceGetIdByIdgetIdMocksProvider = createMocks([{
        urlPattern: "/consent/client-api/v2/consents/{id}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "id": "34bf3478-4187-46b1-aab1-20577c5d339c",
                    "tpp": {
                        "id": "0dbbf48e-53dc-4968-8167-6337718f9781",
                        "externalId": "amazon",
                        "name": "Amazon",
                        "website": "https://amazon.com",
                        "imageUrl": "https://cdn0.iconfinder.com/data/icons/most-usable-logos/120/Amazon-48.png",
                        "isTrusted": true,
                        "mail": "primary@amazon.com",
                        "phonenumber": "8882803321",
                        "address": "Amazon.com, Inc. Customer Service PO Box 81226 Seattle, WA 98108-1226",
                        "country": "US"
                    },
                    "status": "ACTIVE",
                    "expiryDate": "2019-03-28T16:41:41.090Z",
                    "permissions": ["ReadAccountsDetail", "ReadBalances", "ReadTransactionsDetail"],
                    "accounts": [{
                            "id": "9bf23657-511a-4022-a474-c3617cf1589e",
                            "number": "LV20GOWNKDCDIA03FAQD5",
                            "name": "Ricardo Norton's Current Account",
                            "type": "currentAccount",
                            "currency": "USD",
                            "balance": "9763.34"
                        }, {
                            "id": "dd98797a-a464-4702-ae2f-2214c81a8e69",
                            "number": "AD6548375906DIXVOJTD558B",
                            "name": "Ricardo Norton's Savings Account",
                            "type": "savingsAccount",
                            "currency": "USD",
                            "balance": "3788.61"
                        }, {
                            "id": "c5566c1b-2ebe-45b5-a32e-cf83c3669bbd",
                            "number": "EE511790690392885115",
                            "name": "Ricardo Norton's Credit Card",
                            "type": "creditCard",
                            "currency": "USD",
                            "balance": "2876.76"
                        }, {
                            "id": "cf916772-3676-43a8-89c0-86bd545f84dd",
                            "number": "HR1964204918384144019",
                            "name": "Ricardo Norton's Investment Account",
                            "type": "investmentAccount",
                            "currency": "USD",
                            "balance": "2676.23"
                        }, {
                            "id": "7eaee238-d5a9-40d3-80b9-75a29fea908b",
                            "number": "IE37QNJQ34395947171968",
                            "name": "Ricardo Norton's Mortgage Loan",
                            "type": "mortgage",
                            "currency": "USD",
                            "balance": -150000.0
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "value": {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                }
            },
            {
                status: 403,
                body: {
                    "value": {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                }
            },
            {
                status: 404,
                body: {
                    "value": {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                }
            },
        ]
    }]);
const ConsentsHttpServicePostConsentsMocksProvider = createMocks([{
        urlPattern: "/consent/client-api/v2/consents",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "id": "8b3e32ae-88c1-4548-a429-f5834f5aca97"
                }
            },
            {
                status: 400,
                body: {
                    "value": {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                }
            },
            {
                status: 403,
                body: {
                    "value": {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                }
            },
        ]
    }]);
const ConsentsHttpServicePostRevokeByIdMocksProvider = createMocks([{
        urlPattern: "/consent/client-api/v2/consents/{id}/revoke",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {}
            },
            {
                status: 400,
                body: {
                    "value": {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                }
            },
            {
                status: 403,
                body: {
                    "value": {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                }
            },
            {
                status: 404,
                body: {
                    "value": {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                }
            },
        ]
    }]);
const ConsentsHttpServiceMocksProvider = createMocks([
    {
        urlPattern: "/consent/client-api/v2/consents",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "id": "34bf3478-4187-46b1-aab1-20577c5d339c",
                        "tpp": {
                            "id": "0dbbf48e-53dc-4968-8167-6337718f9781",
                            "externalId": "amazon",
                            "name": "Amazon",
                            "website": "https://amazon.com",
                            "imageUrl": "https://cdn0.iconfinder.com/data/icons/most-usable-logos/120/Amazon-48.png",
                            "isTrusted": true,
                            "mail": "primary@amazon.com",
                            "phonenumber": "8882803321",
                            "address": "Amazon.com, Inc. Customer Service PO Box 81226 Seattle, WA 98108-1226",
                            "country": "US"
                        },
                        "status": "ACTIVE",
                        "expiryDate": "2019-03-28T16:41:41.090Z",
                        "numberOfAccounts": 3
                    }, {
                        "id": "ffe7b310-63ff-4c3a-be75-ec5f19da7e9e",
                        "tpp": {
                            "id": "b1e5bca6-2185-42a0-8701-08f4c3497485",
                            "externalId": "netflix",
                            "name": "Netflix",
                            "website": "https://netflix.com",
                            "imageUrl": "https://cdn2.iconfinder.com/data/icons/metro-uinvert-dock/256/Netflix.png",
                            "isTrusted": true,
                            "mail": "support@netflix.com",
                            "phonenumber": "8882803321",
                            "address": "Bowery street 103, 1290 LL, New York, New York, USA",
                            "country": "US"
                        },
                        "status": "REVOKED",
                        "expiryDate": "2019-05-28T16:41:41.090Z",
                        "numberOfAccounts": 1
                    }, {
                        "id": "18dd7b1c-dabf-49bb-b9e3-5f586efd19d3",
                        "tpp": {
                            "id": "b62943b9-811b-446d-ac68-0a38de63d792",
                            "externalId": "some-third-party",
                            "name": "Some third party",
                            "website": "https://some-third-party.com",
                            "isTrusted": false,
                            "mail": "contact@some-third-party.com",
                            "phonenumber": "8882803321",
                            "address": "2967 West Side Avenue, 07649, Angwil, River Edge, New Jersey, USA",
                            "country": "US"
                        },
                        "status": "EXPIRED",
                        "expiryDate": "2018-09-28T16:41:41.090Z",
                        "numberOfAccounts": 2
                    }]
            },
            {
                status: 400,
                body: {
                    "value": {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                }
            },
            {
                status: 403,
                body: {
                    "value": {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                }
            },
        ]
    },
    {
        urlPattern: "/consent/client-api/v2/consents/{id}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "id": "34bf3478-4187-46b1-aab1-20577c5d339c",
                    "tpp": {
                        "id": "0dbbf48e-53dc-4968-8167-6337718f9781",
                        "externalId": "amazon",
                        "name": "Amazon",
                        "website": "https://amazon.com",
                        "imageUrl": "https://cdn0.iconfinder.com/data/icons/most-usable-logos/120/Amazon-48.png",
                        "isTrusted": true,
                        "mail": "primary@amazon.com",
                        "phonenumber": "8882803321",
                        "address": "Amazon.com, Inc. Customer Service PO Box 81226 Seattle, WA 98108-1226",
                        "country": "US"
                    },
                    "status": "ACTIVE",
                    "expiryDate": "2019-03-28T16:41:41.090Z",
                    "permissions": ["ReadAccountsDetail", "ReadBalances", "ReadTransactionsDetail"],
                    "accounts": [{
                            "id": "9bf23657-511a-4022-a474-c3617cf1589e",
                            "number": "LV20GOWNKDCDIA03FAQD5",
                            "name": "Ricardo Norton's Current Account",
                            "type": "currentAccount",
                            "currency": "USD",
                            "balance": "9763.34"
                        }, {
                            "id": "dd98797a-a464-4702-ae2f-2214c81a8e69",
                            "number": "AD6548375906DIXVOJTD558B",
                            "name": "Ricardo Norton's Savings Account",
                            "type": "savingsAccount",
                            "currency": "USD",
                            "balance": "3788.61"
                        }, {
                            "id": "c5566c1b-2ebe-45b5-a32e-cf83c3669bbd",
                            "number": "EE511790690392885115",
                            "name": "Ricardo Norton's Credit Card",
                            "type": "creditCard",
                            "currency": "USD",
                            "balance": "2876.76"
                        }, {
                            "id": "cf916772-3676-43a8-89c0-86bd545f84dd",
                            "number": "HR1964204918384144019",
                            "name": "Ricardo Norton's Investment Account",
                            "type": "investmentAccount",
                            "currency": "USD",
                            "balance": "2676.23"
                        }, {
                            "id": "7eaee238-d5a9-40d3-80b9-75a29fea908b",
                            "number": "IE37QNJQ34395947171968",
                            "name": "Ricardo Norton's Mortgage Loan",
                            "type": "mortgage",
                            "currency": "USD",
                            "balance": -150000.0
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "value": {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                }
            },
            {
                status: 403,
                body: {
                    "value": {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                }
            },
            {
                status: 404,
                body: {
                    "value": {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                }
            },
        ]
    },
    {
        urlPattern: "/consent/client-api/v2/consents",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "id": "8b3e32ae-88c1-4548-a429-f5834f5aca97"
                }
            },
            {
                status: 400,
                body: {
                    "value": {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                }
            },
            {
                status: 403,
                body: {
                    "value": {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                }
            },
        ]
    },
    {
        urlPattern: "/consent/client-api/v2/consents/{id}/revoke",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {}
            },
            {
                status: 400,
                body: {
                    "value": {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                }
            },
            {
                status: 403,
                body: {
                    "value": {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                }
            },
            {
                status: 404,
                body: {
                    "value": {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                }
            },
        ]
    },
]);

class PaymentRequestsHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '/consent';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new ConsentConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    getIdByIdgetPaymentRequestById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getIdByIdgetPaymentRequestById.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/payment-requests/${encodeURIComponent(String(_id))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getIdByIdgetPaymentRequestByIdUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getIdByIdgetPaymentRequestById.');
        }
        return `${this.configuration.basePath}/client-api/v2/payment-requests/${encodeURIComponent(String(_id))}`;
    }
    postConfirmById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling postConfirmById.');
        }
        const _paymentPost = requestParameters["paymentPost"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/payment-requests/${encodeURIComponent(String(_id))}/confirm`, _paymentPost, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postConfirmByIdUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling postConfirmById.');
        }
        const _paymentPost = requestParameters["paymentPost"];
        return `${this.configuration.basePath}/client-api/v2/payment-requests/${encodeURIComponent(String(_id))}/confirm`;
    }
    postRejectByIdpostReject(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling postRejectByIdpostReject.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/payment-requests/${encodeURIComponent(String(_id))}/reject`, null, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postRejectByIdpostRejectUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling postRejectByIdpostReject.');
        }
        return `${this.configuration.basePath}/client-api/v2/payment-requests/${encodeURIComponent(String(_id))}/reject`;
    }
}
PaymentRequestsHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentRequestsHttpService, deps: [{ token: i1.HttpClient }, { token: CONSENT_BASE_PATH, optional: true }, { token: ConsentConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
PaymentRequestsHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentRequestsHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentRequestsHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [CONSENT_BASE_PATH]
                }] }, { type: ConsentConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const PaymentRequestsHttpServiceGetIdByIdgetPaymentRequestByIdMocksProvider = createMocks([{
        urlPattern: "/consent/client-api/v2/payment-requests/{id}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "id": "34bf3478-4187-46b1-aab1-20577c5d339c",
                    "tpp": {
                        "id": "0dbbf48e-53dc-4968-8167-6337718f9781",
                        "externalId": "amazon",
                        "name": "Amazon",
                        "website": "https://amazon.com",
                        "imageUrl": "https://cdn0.iconfinder.com/data/icons/most-usable-logos/120/Amazon-48.png",
                        "isTrusted": true,
                        "mail": "primary@amazon.com",
                        "phonenumber": "8882803321",
                        "address": "Amazon.com, Inc. Customer Service PO Box 81226 Seattle, WA 98108-1226",
                        "country": "US"
                    },
                    "amount": "100.00",
                    "currency": "USD",
                    "allowPaymentRedirectUrl": "https://amazon.com",
                    "rejectPaymentRedirectUrl": "https://google.com",
                    "details": "Purchase of 1 year subscription for Amazon AWS for Backbase R&D B.V.",
                    "selectedAccount": {
                        "id": "c5566c1b-2ebe-45b5-a32e-cf83c3669bbd",
                        "number": "EE511790690392885115",
                        "name": "Ricardo Norton's Credit Card",
                        "type": "creditCard",
                        "currency": "USD",
                        "balance": "2876.76"
                    },
                    "accounts": [{
                            "id": "9bf23657-511a-4022-a474-c3617cf1589e",
                            "number": "LV20GOWNKDCDIA03FAQD5",
                            "name": "Ricardo Norton's Current Account",
                            "type": "currentAccount",
                            "currency": "USD",
                            "balance": "9763.34"
                        }, {
                            "id": "dd98797a-a464-4702-ae2f-2214c81a8e69",
                            "number": "AD6548375906DIXVOJTD558B",
                            "name": "Ricardo Norton's Savings Account",
                            "type": "savingsAccount",
                            "currency": "USD",
                            "balance": "3788.61"
                        }, {
                            "id": "c5566c1b-2ebe-45b5-a32e-cf83c3669bbd",
                            "number": "EE511790690392885115",
                            "name": "Ricardo Norton's Credit Card",
                            "type": "creditCard",
                            "currency": "USD",
                            "balance": "2876.76"
                        }, {
                            "id": "cf916772-3676-43a8-89c0-86bd545f84dd",
                            "number": "HR1964204918384144019",
                            "name": "Ricardo Norton's Investment Account",
                            "type": "investmentAccount",
                            "currency": "USD",
                            "balance": "2676.23"
                        }, {
                            "id": "7eaee238-d5a9-40d3-80b9-75a29fea908b",
                            "number": "IE37QNJQ34395947171968",
                            "name": "Ricardo Norton's Mortgage Loan",
                            "type": "mortgage",
                            "currency": "USD",
                            "balance": -150000.0
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "value": {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                }
            },
            {
                status: 403,
                body: {
                    "value": {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                }
            },
            {
                status: 404,
                body: {
                    "value": {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                }
            },
        ]
    }]);
const PaymentRequestsHttpServicePostConfirmByIdMocksProvider = createMocks([{
        urlPattern: "/consent/client-api/v2/payment-requests/{id}/confirm",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {}
            },
            {
                status: 400,
                body: {
                    "value": {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                }
            },
            {
                status: 403,
                body: {
                    "value": {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                }
            },
            {
                status: 404,
                body: {
                    "value": {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                }
            },
        ]
    }]);
const PaymentRequestsHttpServicePostRejectByIdpostRejectMocksProvider = createMocks([{
        urlPattern: "/consent/client-api/v2/payment-requests/{id}/reject",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {}
            },
            {
                status: 400,
                body: {
                    "value": {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                }
            },
            {
                status: 403,
                body: {
                    "value": {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                }
            },
            {
                status: 404,
                body: {
                    "value": {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                }
            },
        ]
    }]);
const PaymentRequestsHttpServiceMocksProvider = createMocks([
    {
        urlPattern: "/consent/client-api/v2/payment-requests/{id}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "id": "34bf3478-4187-46b1-aab1-20577c5d339c",
                    "tpp": {
                        "id": "0dbbf48e-53dc-4968-8167-6337718f9781",
                        "externalId": "amazon",
                        "name": "Amazon",
                        "website": "https://amazon.com",
                        "imageUrl": "https://cdn0.iconfinder.com/data/icons/most-usable-logos/120/Amazon-48.png",
                        "isTrusted": true,
                        "mail": "primary@amazon.com",
                        "phonenumber": "8882803321",
                        "address": "Amazon.com, Inc. Customer Service PO Box 81226 Seattle, WA 98108-1226",
                        "country": "US"
                    },
                    "amount": "100.00",
                    "currency": "USD",
                    "allowPaymentRedirectUrl": "https://amazon.com",
                    "rejectPaymentRedirectUrl": "https://google.com",
                    "details": "Purchase of 1 year subscription for Amazon AWS for Backbase R&D B.V.",
                    "selectedAccount": {
                        "id": "c5566c1b-2ebe-45b5-a32e-cf83c3669bbd",
                        "number": "EE511790690392885115",
                        "name": "Ricardo Norton's Credit Card",
                        "type": "creditCard",
                        "currency": "USD",
                        "balance": "2876.76"
                    },
                    "accounts": [{
                            "id": "9bf23657-511a-4022-a474-c3617cf1589e",
                            "number": "LV20GOWNKDCDIA03FAQD5",
                            "name": "Ricardo Norton's Current Account",
                            "type": "currentAccount",
                            "currency": "USD",
                            "balance": "9763.34"
                        }, {
                            "id": "dd98797a-a464-4702-ae2f-2214c81a8e69",
                            "number": "AD6548375906DIXVOJTD558B",
                            "name": "Ricardo Norton's Savings Account",
                            "type": "savingsAccount",
                            "currency": "USD",
                            "balance": "3788.61"
                        }, {
                            "id": "c5566c1b-2ebe-45b5-a32e-cf83c3669bbd",
                            "number": "EE511790690392885115",
                            "name": "Ricardo Norton's Credit Card",
                            "type": "creditCard",
                            "currency": "USD",
                            "balance": "2876.76"
                        }, {
                            "id": "cf916772-3676-43a8-89c0-86bd545f84dd",
                            "number": "HR1964204918384144019",
                            "name": "Ricardo Norton's Investment Account",
                            "type": "investmentAccount",
                            "currency": "USD",
                            "balance": "2676.23"
                        }, {
                            "id": "7eaee238-d5a9-40d3-80b9-75a29fea908b",
                            "number": "IE37QNJQ34395947171968",
                            "name": "Ricardo Norton's Mortgage Loan",
                            "type": "mortgage",
                            "currency": "USD",
                            "balance": -150000.0
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "value": {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                }
            },
            {
                status: 403,
                body: {
                    "value": {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                }
            },
            {
                status: 404,
                body: {
                    "value": {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                }
            },
        ]
    },
    {
        urlPattern: "/consent/client-api/v2/payment-requests/{id}/confirm",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {}
            },
            {
                status: 400,
                body: {
                    "value": {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                }
            },
            {
                status: 403,
                body: {
                    "value": {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                }
            },
            {
                status: 404,
                body: {
                    "value": {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                }
            },
        ]
    },
    {
        urlPattern: "/consent/client-api/v2/payment-requests/{id}/reject",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {}
            },
            {
                status: 400,
                body: {
                    "value": {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                }
            },
            {
                status: 403,
                body: {
                    "value": {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                }
            },
            {
                status: 404,
                body: {
                    "value": {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                }
            },
        ]
    },
]);

export { COLLECTION_FORMATS, CONFIG_TOKEN, CONSENT_BASE_PATH, ConsentApiModule, ConsentConfiguration, ConsentRequestsHttpService, ConsentRequestsHttpServiceGetIdByIdMocksProvider, ConsentRequestsHttpServiceMocksProvider, ConsentRequestsHttpServicePostRejectByIdMocksProvider, ConsentStatus, ConsentsHttpService, ConsentsHttpServiceGetConsentsMocksProvider, ConsentsHttpServiceGetIdByIdgetIdMocksProvider, ConsentsHttpServiceMocksProvider, ConsentsHttpServicePostConsentsMocksProvider, ConsentsHttpServicePostRevokeByIdMocksProvider, PaymentRequestsHttpService, PaymentRequestsHttpServiceGetIdByIdgetPaymentRequestByIdMocksProvider, PaymentRequestsHttpServiceMocksProvider, PaymentRequestsHttpServicePostConfirmByIdMocksProvider, PaymentRequestsHttpServicePostRejectByIdpostRejectMocksProvider, Permission };
//# sourceMappingURL=backbase-consent-http-ang.js.map
