(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common/http'), require('@backbase/foundation-ang/data-http')) :
    typeof define === 'function' && define.amd ? define('@backbase/consent-http-ang', ['exports', '@angular/core', '@angular/common/http', '@backbase/foundation-ang/data-http'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["consent-http-ang"] = {}), global.ng.core, global.ng.common.http, global.i2));
})(this, (function (exports, i0, i1, i2) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);

    var ConsentStatus = {
        ACTIVE: 'ACTIVE',
        REVOKED: 'REVOKED',
        EXPIRED: 'EXPIRED'
    };

    var Permission = {
        ReadAccountsDetail: 'ReadAccountsDetail',
        ReadBalances: 'ReadBalances',
        ReadTransactionsDetail: 'ReadTransactionsDetail',
        ReadBeneficiariesDetail: 'ReadBeneficiariesDetail',
        ReadDirectDebits: 'ReadDirectDebits',
        ReadProducts: 'ReadProducts',
        ReadStandingOrdersDetail: 'ReadStandingOrdersDetail',
        ReadTransactionsCredits: 'ReadTransactionsCredits',
        ReadTransactionsDebits: 'ReadTransactionsDebits'
    };

    var CONSENT_BASE_PATH = new i0.InjectionToken('CONSENT_BASE_PATH');
    var COLLECTION_FORMATS = {
        'csv': ',',
        'tsv': '   ',
        'ssv': ' ',
        'pipes': '|'
    };

    var ConsentConfiguration = /** @class */ (function () {
        function ConsentConfiguration(configurationParameters) {
            if (configurationParameters === void 0) { configurationParameters = {}; }
            this.apiKeys = configurationParameters.apiKeys;
            this.username = configurationParameters.username;
            this.password = configurationParameters.password;
            this.accessToken = configurationParameters.accessToken;
            this.basePath = configurationParameters.basePath;
            this.withCredentials = configurationParameters.withCredentials;
            this.encoder = configurationParameters.encoder;
            if (configurationParameters.credentials) {
                this.credentials = configurationParameters.credentials;
            }
            else {
                this.credentials = {};
            }
        }
        ConsentConfiguration.prototype.selectHeaderContentType = function (contentTypes) {
            var _this = this;
            if (contentTypes.length === 0) {
                return undefined;
            }
            var type = contentTypes.find(function (x) { return _this.isJsonMime(x); });
            if (type === undefined) {
                return contentTypes[0];
            }
            return type;
        };
        ConsentConfiguration.prototype.selectHeaderAccept = function (accepts) {
            var _this = this;
            if (accepts.length === 0) {
                return undefined;
            }
            var type = accepts.find(function (x) { return _this.isJsonMime(x); });
            if (type === undefined) {
                return accepts[0];
            }
            return type;
        };
        ConsentConfiguration.prototype.isJsonMime = function (mime) {
            var jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
            return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
        };
        ConsentConfiguration.prototype.lookupCredential = function (key) {
            var value = this.credentials[key];
            return typeof value === 'function'
                ? value()
                : value;
        };
        return ConsentConfiguration;
    }());
    var CONFIG_TOKEN = new i0.InjectionToken('api-data-module ConsentConfiguration');

    var ConsentApiModule = /** @class */ (function () {
        function ConsentApiModule(parentModule, http, dataModulesManager, config) {
            if (parentModule) {
                throw new Error('ConsentApiModule is already loaded. Import in your base AppModule only.');
            }
            if (!http) {
                throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                    'See also https://github.com/angular/angular/issues/20575');
            }
            if (dataModulesManager) {
                dataModulesManager.setModuleConfig(CONFIG_TOKEN, {
                    apiRoot: '',
                    servicePath: config.basePath || '',
                    headers: {},
                });
            }
        }
        ConsentApiModule.forRoot = function (configurationFactory) {
            return {
                ngModule: ConsentApiModule,
                providers: [{ provide: ConsentConfiguration, useFactory: configurationFactory }]
            };
        };
        return ConsentApiModule;
    }());
    ConsentApiModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentApiModule, deps: [{ token: ConsentApiModule, optional: true, skipSelf: true }, { token: i1__namespace.HttpClient, optional: true }, { token: i2__namespace.DataModulesManager, optional: true }, { token: ConsentConfiguration }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ConsentApiModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentApiModule });
    ConsentApiModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentApiModule, providers: [], imports: [[]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentApiModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [],
                        declarations: [],
                        exports: [],
                        providers: []
                    }]
            }], ctorParameters: function () {
            return [{ type: ConsentApiModule, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.SkipSelf
                        }] }, { type: i1__namespace.HttpClient, decorators: [{
                            type: i0.Optional
                        }] }, { type: i2__namespace.DataModulesManager, decorators: [{
                            type: i0.Optional
                        }] }, { type: ConsentConfiguration }];
        } });

    var CustomHttpParameterCodec = /** @class */ (function () {
        function CustomHttpParameterCodec() {
        }
        CustomHttpParameterCodec.prototype.encodeKey = function (k) {
            return encodeURIComponent(k);
        };
        CustomHttpParameterCodec.prototype.encodeValue = function (v) {
            return encodeURIComponent(v);
        };
        CustomHttpParameterCodec.prototype.decodeKey = function (k) {
            return decodeURIComponent(k);
        };
        CustomHttpParameterCodec.prototype.decodeValue = function (v) {
            return decodeURIComponent(v);
        };
        return CustomHttpParameterCodec;
    }());

    var ConsentRequestsHttpService = /** @class */ (function () {
        function ConsentRequestsHttpService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '/consent';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new ConsentConfiguration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        ConsentRequestsHttpService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        ConsentRequestsHttpService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        ConsentRequestsHttpService.prototype.getIdById = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getIdById.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/consent-requests/" + encodeURIComponent(String(_id)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ConsentRequestsHttpService.prototype.getIdByIdUrl = function (requestParameters) {
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getIdById.');
            }
            return this.configuration.basePath + "/client-api/v2/consent-requests/" + encodeURIComponent(String(_id));
        };
        ConsentRequestsHttpService.prototype.postRejectById = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling postRejectById.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v2/consent-requests/" + encodeURIComponent(String(_id)) + "/reject", null, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ConsentRequestsHttpService.prototype.postRejectByIdUrl = function (requestParameters) {
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling postRejectById.');
            }
            return this.configuration.basePath + "/client-api/v2/consent-requests/" + encodeURIComponent(String(_id)) + "/reject";
        };
        return ConsentRequestsHttpService;
    }());
    ConsentRequestsHttpService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentRequestsHttpService, deps: [{ token: i1__namespace.HttpClient }, { token: CONSENT_BASE_PATH, optional: true }, { token: ConsentConfiguration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    ConsentRequestsHttpService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentRequestsHttpService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentRequestsHttpService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [CONSENT_BASE_PATH]
                        }] }, { type: ConsentConfiguration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var ConsentRequestsHttpServiceGetIdByIdMocksProvider = i2.createMocks([{
            urlPattern: "/consent/client-api/v2/consent-requests/{id}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "34bf3478-4187-46b1-aab1-20577c5d339c",
                        "tpp": {
                            "id": "0dbbf48e-53dc-4968-8167-6337718f9781",
                            "externalId": "amazon",
                            "name": "Amazon",
                            "website": "https://amazon.com",
                            "imageUrl": "https://cdn0.iconfinder.com/data/icons/most-usable-logos/120/Amazon-48.png",
                            "isTrusted": true,
                            "mail": "primary@amazon.com",
                            "phonenumber": "8882803321",
                            "address": "Amazon.com, Inc. Customer Service PO Box 81226 Seattle, WA 98108-1226",
                            "country": "US"
                        },
                        "expiryDate": "2019-03-28T16:41:41.090Z",
                        "permissions": ["ReadAccountsDetail", "ReadBalances", "ReadTransactionsDetail"],
                        "allowConsentRedirectUrl": "https://amazon.com",
                        "rejectConsentRedirectUrl": "https://google.com",
                        "accounts": [{
                                "id": "9bf23657-511a-4022-a474-c3617cf1589e",
                                "number": "LV20GOWNKDCDIA03FAQD5",
                                "name": "Ricardo Norton's Current Account",
                                "type": "currentAccount",
                                "currency": "USD",
                                "balance": "9763.34"
                            }, {
                                "id": "dd98797a-a464-4702-ae2f-2214c81a8e69",
                                "number": "AD6548375906DIXVOJTD558B",
                                "name": "Ricardo Norton's Savings Account",
                                "type": "savingsAccount",
                                "currency": "USD",
                                "balance": "3788.61"
                            }, {
                                "id": "c5566c1b-2ebe-45b5-a32e-cf83c3669bbd",
                                "number": "EE511790690392885115",
                                "name": "Ricardo Norton's Credit Card",
                                "type": "creditCard",
                                "currency": "USD",
                                "balance": "2876.76"
                            }, {
                                "id": "cf916772-3676-43a8-89c0-86bd545f84dd",
                                "number": "HR1964204918384144019",
                                "name": "Ricardo Norton's Investment Account",
                                "type": "investmentAccount",
                                "currency": "USD",
                                "balance": "2676.23"
                            }, {
                                "id": "7eaee238-d5a9-40d3-80b9-75a29fea908b",
                                "number": "IE37QNJQ34395947171968",
                                "name": "Ricardo Norton's Mortgage Loan",
                                "type": "mortgage",
                                "currency": "USD",
                                "balance": -150000.0
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "value": {
                            "message": "Bad Request",
                            "errors": [{
                                    "message": "Value Exceeded. Must be between {min} and {max}.",
                                    "key": "common.api.shoesize",
                                    "context": {
                                        "max": "50",
                                        "min": "1"
                                    }
                                }]
                        }
                    }
                },
                {
                    status: 403,
                    body: {
                        "value": {
                            "message": "Access to requested resource denied.",
                            "errors": [{
                                    "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                    "key": "common.api.quota",
                                    "context": {
                                        "quota": "someQuota"
                                    }
                                }]
                        }
                    }
                },
                {
                    status: 404,
                    body: {
                        "value": {
                            "message": "Resource not found.",
                            "errors": [{
                                    "message": "Unable to find the resource requested resource: {resource}.",
                                    "key": "common.api.resource",
                                    "context": {
                                        "resource": "aResource"
                                    }
                                }]
                        }
                    }
                },
            ]
        }]);
    var ConsentRequestsHttpServicePostRejectByIdMocksProvider = i2.createMocks([{
            urlPattern: "/consent/client-api/v2/consent-requests/{id}/reject",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {}
                },
                {
                    status: 400,
                    body: {
                        "value": {
                            "message": "Bad Request",
                            "errors": [{
                                    "message": "Value Exceeded. Must be between {min} and {max}.",
                                    "key": "common.api.shoesize",
                                    "context": {
                                        "max": "50",
                                        "min": "1"
                                    }
                                }]
                        }
                    }
                },
                {
                    status: 403,
                    body: {
                        "value": {
                            "message": "Access to requested resource denied.",
                            "errors": [{
                                    "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                    "key": "common.api.quota",
                                    "context": {
                                        "quota": "someQuota"
                                    }
                                }]
                        }
                    }
                },
                {
                    status: 404,
                    body: {
                        "value": {
                            "message": "Resource not found.",
                            "errors": [{
                                    "message": "Unable to find the resource requested resource: {resource}.",
                                    "key": "common.api.resource",
                                    "context": {
                                        "resource": "aResource"
                                    }
                                }]
                        }
                    }
                },
            ]
        }]);
    var ConsentRequestsHttpServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/consent/client-api/v2/consent-requests/{id}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "34bf3478-4187-46b1-aab1-20577c5d339c",
                        "tpp": {
                            "id": "0dbbf48e-53dc-4968-8167-6337718f9781",
                            "externalId": "amazon",
                            "name": "Amazon",
                            "website": "https://amazon.com",
                            "imageUrl": "https://cdn0.iconfinder.com/data/icons/most-usable-logos/120/Amazon-48.png",
                            "isTrusted": true,
                            "mail": "primary@amazon.com",
                            "phonenumber": "8882803321",
                            "address": "Amazon.com, Inc. Customer Service PO Box 81226 Seattle, WA 98108-1226",
                            "country": "US"
                        },
                        "expiryDate": "2019-03-28T16:41:41.090Z",
                        "permissions": ["ReadAccountsDetail", "ReadBalances", "ReadTransactionsDetail"],
                        "allowConsentRedirectUrl": "https://amazon.com",
                        "rejectConsentRedirectUrl": "https://google.com",
                        "accounts": [{
                                "id": "9bf23657-511a-4022-a474-c3617cf1589e",
                                "number": "LV20GOWNKDCDIA03FAQD5",
                                "name": "Ricardo Norton's Current Account",
                                "type": "currentAccount",
                                "currency": "USD",
                                "balance": "9763.34"
                            }, {
                                "id": "dd98797a-a464-4702-ae2f-2214c81a8e69",
                                "number": "AD6548375906DIXVOJTD558B",
                                "name": "Ricardo Norton's Savings Account",
                                "type": "savingsAccount",
                                "currency": "USD",
                                "balance": "3788.61"
                            }, {
                                "id": "c5566c1b-2ebe-45b5-a32e-cf83c3669bbd",
                                "number": "EE511790690392885115",
                                "name": "Ricardo Norton's Credit Card",
                                "type": "creditCard",
                                "currency": "USD",
                                "balance": "2876.76"
                            }, {
                                "id": "cf916772-3676-43a8-89c0-86bd545f84dd",
                                "number": "HR1964204918384144019",
                                "name": "Ricardo Norton's Investment Account",
                                "type": "investmentAccount",
                                "currency": "USD",
                                "balance": "2676.23"
                            }, {
                                "id": "7eaee238-d5a9-40d3-80b9-75a29fea908b",
                                "number": "IE37QNJQ34395947171968",
                                "name": "Ricardo Norton's Mortgage Loan",
                                "type": "mortgage",
                                "currency": "USD",
                                "balance": -150000.0
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "value": {
                            "message": "Bad Request",
                            "errors": [{
                                    "message": "Value Exceeded. Must be between {min} and {max}.",
                                    "key": "common.api.shoesize",
                                    "context": {
                                        "max": "50",
                                        "min": "1"
                                    }
                                }]
                        }
                    }
                },
                {
                    status: 403,
                    body: {
                        "value": {
                            "message": "Access to requested resource denied.",
                            "errors": [{
                                    "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                    "key": "common.api.quota",
                                    "context": {
                                        "quota": "someQuota"
                                    }
                                }]
                        }
                    }
                },
                {
                    status: 404,
                    body: {
                        "value": {
                            "message": "Resource not found.",
                            "errors": [{
                                    "message": "Unable to find the resource requested resource: {resource}.",
                                    "key": "common.api.resource",
                                    "context": {
                                        "resource": "aResource"
                                    }
                                }]
                        }
                    }
                },
            ]
        },
        {
            urlPattern: "/consent/client-api/v2/consent-requests/{id}/reject",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {}
                },
                {
                    status: 400,
                    body: {
                        "value": {
                            "message": "Bad Request",
                            "errors": [{
                                    "message": "Value Exceeded. Must be between {min} and {max}.",
                                    "key": "common.api.shoesize",
                                    "context": {
                                        "max": "50",
                                        "min": "1"
                                    }
                                }]
                        }
                    }
                },
                {
                    status: 403,
                    body: {
                        "value": {
                            "message": "Access to requested resource denied.",
                            "errors": [{
                                    "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                    "key": "common.api.quota",
                                    "context": {
                                        "quota": "someQuota"
                                    }
                                }]
                        }
                    }
                },
                {
                    status: 404,
                    body: {
                        "value": {
                            "message": "Resource not found.",
                            "errors": [{
                                    "message": "Unable to find the resource requested resource: {resource}.",
                                    "key": "common.api.resource",
                                    "context": {
                                        "resource": "aResource"
                                    }
                                }]
                        }
                    }
                },
            ]
        },
    ]);

    var ConsentsHttpService = /** @class */ (function () {
        function ConsentsHttpService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '/consent';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new ConsentConfiguration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        ConsentsHttpService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        ConsentsHttpService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        ConsentsHttpService.prototype.getConsents = function (observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/consents", {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ConsentsHttpService.prototype.getConsentsUrl = function () {
            return this.configuration.basePath + "/client-api/v2/consents";
        };
        ConsentsHttpService.prototype.getIdByIdgetId = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getIdByIdgetId.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/consents/" + encodeURIComponent(String(_id)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ConsentsHttpService.prototype.getIdByIdgetIdUrl = function (requestParameters) {
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getIdByIdgetId.');
            }
            return this.configuration.basePath + "/client-api/v2/consents/" + encodeURIComponent(String(_id));
        };
        ConsentsHttpService.prototype.postConsents = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _consentPost = requestParameters["consentPost"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v2/consents", _consentPost, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ConsentsHttpService.prototype.postConsentsUrl = function (requestParameters) {
            var _consentPost = requestParameters["consentPost"];
            return this.configuration.basePath + "/client-api/v2/consents";
        };
        ConsentsHttpService.prototype.postRevokeById = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling postRevokeById.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v2/consents/" + encodeURIComponent(String(_id)) + "/revoke", null, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ConsentsHttpService.prototype.postRevokeByIdUrl = function (requestParameters) {
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling postRevokeById.');
            }
            return this.configuration.basePath + "/client-api/v2/consents/" + encodeURIComponent(String(_id)) + "/revoke";
        };
        return ConsentsHttpService;
    }());
    ConsentsHttpService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentsHttpService, deps: [{ token: i1__namespace.HttpClient }, { token: CONSENT_BASE_PATH, optional: true }, { token: ConsentConfiguration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    ConsentsHttpService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentsHttpService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentsHttpService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [CONSENT_BASE_PATH]
                        }] }, { type: ConsentConfiguration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var ConsentsHttpServiceGetConsentsMocksProvider = i2.createMocks([{
            urlPattern: "/consent/client-api/v2/consents",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "id": "34bf3478-4187-46b1-aab1-20577c5d339c",
                            "tpp": {
                                "id": "0dbbf48e-53dc-4968-8167-6337718f9781",
                                "externalId": "amazon",
                                "name": "Amazon",
                                "website": "https://amazon.com",
                                "imageUrl": "https://cdn0.iconfinder.com/data/icons/most-usable-logos/120/Amazon-48.png",
                                "isTrusted": true,
                                "mail": "primary@amazon.com",
                                "phonenumber": "8882803321",
                                "address": "Amazon.com, Inc. Customer Service PO Box 81226 Seattle, WA 98108-1226",
                                "country": "US"
                            },
                            "status": "ACTIVE",
                            "expiryDate": "2019-03-28T16:41:41.090Z",
                            "numberOfAccounts": 3
                        }, {
                            "id": "ffe7b310-63ff-4c3a-be75-ec5f19da7e9e",
                            "tpp": {
                                "id": "b1e5bca6-2185-42a0-8701-08f4c3497485",
                                "externalId": "netflix",
                                "name": "Netflix",
                                "website": "https://netflix.com",
                                "imageUrl": "https://cdn2.iconfinder.com/data/icons/metro-uinvert-dock/256/Netflix.png",
                                "isTrusted": true,
                                "mail": "support@netflix.com",
                                "phonenumber": "8882803321",
                                "address": "Bowery street 103, 1290 LL, New York, New York, USA",
                                "country": "US"
                            },
                            "status": "REVOKED",
                            "expiryDate": "2019-05-28T16:41:41.090Z",
                            "numberOfAccounts": 1
                        }, {
                            "id": "18dd7b1c-dabf-49bb-b9e3-5f586efd19d3",
                            "tpp": {
                                "id": "b62943b9-811b-446d-ac68-0a38de63d792",
                                "externalId": "some-third-party",
                                "name": "Some third party",
                                "website": "https://some-third-party.com",
                                "isTrusted": false,
                                "mail": "contact@some-third-party.com",
                                "phonenumber": "8882803321",
                                "address": "2967 West Side Avenue, 07649, Angwil, River Edge, New Jersey, USA",
                                "country": "US"
                            },
                            "status": "EXPIRED",
                            "expiryDate": "2018-09-28T16:41:41.090Z",
                            "numberOfAccounts": 2
                        }]
                },
                {
                    status: 400,
                    body: {
                        "value": {
                            "message": "Bad Request",
                            "errors": [{
                                    "message": "Value Exceeded. Must be between {min} and {max}.",
                                    "key": "common.api.shoesize",
                                    "context": {
                                        "max": "50",
                                        "min": "1"
                                    }
                                }]
                        }
                    }
                },
                {
                    status: 403,
                    body: {
                        "value": {
                            "message": "Access to requested resource denied.",
                            "errors": [{
                                    "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                    "key": "common.api.quota",
                                    "context": {
                                        "quota": "someQuota"
                                    }
                                }]
                        }
                    }
                },
            ]
        }]);
    var ConsentsHttpServiceGetIdByIdgetIdMocksProvider = i2.createMocks([{
            urlPattern: "/consent/client-api/v2/consents/{id}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "34bf3478-4187-46b1-aab1-20577c5d339c",
                        "tpp": {
                            "id": "0dbbf48e-53dc-4968-8167-6337718f9781",
                            "externalId": "amazon",
                            "name": "Amazon",
                            "website": "https://amazon.com",
                            "imageUrl": "https://cdn0.iconfinder.com/data/icons/most-usable-logos/120/Amazon-48.png",
                            "isTrusted": true,
                            "mail": "primary@amazon.com",
                            "phonenumber": "8882803321",
                            "address": "Amazon.com, Inc. Customer Service PO Box 81226 Seattle, WA 98108-1226",
                            "country": "US"
                        },
                        "status": "ACTIVE",
                        "expiryDate": "2019-03-28T16:41:41.090Z",
                        "permissions": ["ReadAccountsDetail", "ReadBalances", "ReadTransactionsDetail"],
                        "accounts": [{
                                "id": "9bf23657-511a-4022-a474-c3617cf1589e",
                                "number": "LV20GOWNKDCDIA03FAQD5",
                                "name": "Ricardo Norton's Current Account",
                                "type": "currentAccount",
                                "currency": "USD",
                                "balance": "9763.34"
                            }, {
                                "id": "dd98797a-a464-4702-ae2f-2214c81a8e69",
                                "number": "AD6548375906DIXVOJTD558B",
                                "name": "Ricardo Norton's Savings Account",
                                "type": "savingsAccount",
                                "currency": "USD",
                                "balance": "3788.61"
                            }, {
                                "id": "c5566c1b-2ebe-45b5-a32e-cf83c3669bbd",
                                "number": "EE511790690392885115",
                                "name": "Ricardo Norton's Credit Card",
                                "type": "creditCard",
                                "currency": "USD",
                                "balance": "2876.76"
                            }, {
                                "id": "cf916772-3676-43a8-89c0-86bd545f84dd",
                                "number": "HR1964204918384144019",
                                "name": "Ricardo Norton's Investment Account",
                                "type": "investmentAccount",
                                "currency": "USD",
                                "balance": "2676.23"
                            }, {
                                "id": "7eaee238-d5a9-40d3-80b9-75a29fea908b",
                                "number": "IE37QNJQ34395947171968",
                                "name": "Ricardo Norton's Mortgage Loan",
                                "type": "mortgage",
                                "currency": "USD",
                                "balance": -150000.0
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "value": {
                            "message": "Bad Request",
                            "errors": [{
                                    "message": "Value Exceeded. Must be between {min} and {max}.",
                                    "key": "common.api.shoesize",
                                    "context": {
                                        "max": "50",
                                        "min": "1"
                                    }
                                }]
                        }
                    }
                },
                {
                    status: 403,
                    body: {
                        "value": {
                            "message": "Access to requested resource denied.",
                            "errors": [{
                                    "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                    "key": "common.api.quota",
                                    "context": {
                                        "quota": "someQuota"
                                    }
                                }]
                        }
                    }
                },
                {
                    status: 404,
                    body: {
                        "value": {
                            "message": "Resource not found.",
                            "errors": [{
                                    "message": "Unable to find the resource requested resource: {resource}.",
                                    "key": "common.api.resource",
                                    "context": {
                                        "resource": "aResource"
                                    }
                                }]
                        }
                    }
                },
            ]
        }]);
    var ConsentsHttpServicePostConsentsMocksProvider = i2.createMocks([{
            urlPattern: "/consent/client-api/v2/consents",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: {
                        "id": "8b3e32ae-88c1-4548-a429-f5834f5aca97"
                    }
                },
                {
                    status: 400,
                    body: {
                        "value": {
                            "message": "Bad Request",
                            "errors": [{
                                    "message": "Value Exceeded. Must be between {min} and {max}.",
                                    "key": "common.api.shoesize",
                                    "context": {
                                        "max": "50",
                                        "min": "1"
                                    }
                                }]
                        }
                    }
                },
                {
                    status: 403,
                    body: {
                        "value": {
                            "message": "Access to requested resource denied.",
                            "errors": [{
                                    "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                    "key": "common.api.quota",
                                    "context": {
                                        "quota": "someQuota"
                                    }
                                }]
                        }
                    }
                },
            ]
        }]);
    var ConsentsHttpServicePostRevokeByIdMocksProvider = i2.createMocks([{
            urlPattern: "/consent/client-api/v2/consents/{id}/revoke",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {}
                },
                {
                    status: 400,
                    body: {
                        "value": {
                            "message": "Bad Request",
                            "errors": [{
                                    "message": "Value Exceeded. Must be between {min} and {max}.",
                                    "key": "common.api.shoesize",
                                    "context": {
                                        "max": "50",
                                        "min": "1"
                                    }
                                }]
                        }
                    }
                },
                {
                    status: 403,
                    body: {
                        "value": {
                            "message": "Access to requested resource denied.",
                            "errors": [{
                                    "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                    "key": "common.api.quota",
                                    "context": {
                                        "quota": "someQuota"
                                    }
                                }]
                        }
                    }
                },
                {
                    status: 404,
                    body: {
                        "value": {
                            "message": "Resource not found.",
                            "errors": [{
                                    "message": "Unable to find the resource requested resource: {resource}.",
                                    "key": "common.api.resource",
                                    "context": {
                                        "resource": "aResource"
                                    }
                                }]
                        }
                    }
                },
            ]
        }]);
    var ConsentsHttpServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/consent/client-api/v2/consents",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "id": "34bf3478-4187-46b1-aab1-20577c5d339c",
                            "tpp": {
                                "id": "0dbbf48e-53dc-4968-8167-6337718f9781",
                                "externalId": "amazon",
                                "name": "Amazon",
                                "website": "https://amazon.com",
                                "imageUrl": "https://cdn0.iconfinder.com/data/icons/most-usable-logos/120/Amazon-48.png",
                                "isTrusted": true,
                                "mail": "primary@amazon.com",
                                "phonenumber": "8882803321",
                                "address": "Amazon.com, Inc. Customer Service PO Box 81226 Seattle, WA 98108-1226",
                                "country": "US"
                            },
                            "status": "ACTIVE",
                            "expiryDate": "2019-03-28T16:41:41.090Z",
                            "numberOfAccounts": 3
                        }, {
                            "id": "ffe7b310-63ff-4c3a-be75-ec5f19da7e9e",
                            "tpp": {
                                "id": "b1e5bca6-2185-42a0-8701-08f4c3497485",
                                "externalId": "netflix",
                                "name": "Netflix",
                                "website": "https://netflix.com",
                                "imageUrl": "https://cdn2.iconfinder.com/data/icons/metro-uinvert-dock/256/Netflix.png",
                                "isTrusted": true,
                                "mail": "support@netflix.com",
                                "phonenumber": "8882803321",
                                "address": "Bowery street 103, 1290 LL, New York, New York, USA",
                                "country": "US"
                            },
                            "status": "REVOKED",
                            "expiryDate": "2019-05-28T16:41:41.090Z",
                            "numberOfAccounts": 1
                        }, {
                            "id": "18dd7b1c-dabf-49bb-b9e3-5f586efd19d3",
                            "tpp": {
                                "id": "b62943b9-811b-446d-ac68-0a38de63d792",
                                "externalId": "some-third-party",
                                "name": "Some third party",
                                "website": "https://some-third-party.com",
                                "isTrusted": false,
                                "mail": "contact@some-third-party.com",
                                "phonenumber": "8882803321",
                                "address": "2967 West Side Avenue, 07649, Angwil, River Edge, New Jersey, USA",
                                "country": "US"
                            },
                            "status": "EXPIRED",
                            "expiryDate": "2018-09-28T16:41:41.090Z",
                            "numberOfAccounts": 2
                        }]
                },
                {
                    status: 400,
                    body: {
                        "value": {
                            "message": "Bad Request",
                            "errors": [{
                                    "message": "Value Exceeded. Must be between {min} and {max}.",
                                    "key": "common.api.shoesize",
                                    "context": {
                                        "max": "50",
                                        "min": "1"
                                    }
                                }]
                        }
                    }
                },
                {
                    status: 403,
                    body: {
                        "value": {
                            "message": "Access to requested resource denied.",
                            "errors": [{
                                    "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                    "key": "common.api.quota",
                                    "context": {
                                        "quota": "someQuota"
                                    }
                                }]
                        }
                    }
                },
            ]
        },
        {
            urlPattern: "/consent/client-api/v2/consents/{id}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "34bf3478-4187-46b1-aab1-20577c5d339c",
                        "tpp": {
                            "id": "0dbbf48e-53dc-4968-8167-6337718f9781",
                            "externalId": "amazon",
                            "name": "Amazon",
                            "website": "https://amazon.com",
                            "imageUrl": "https://cdn0.iconfinder.com/data/icons/most-usable-logos/120/Amazon-48.png",
                            "isTrusted": true,
                            "mail": "primary@amazon.com",
                            "phonenumber": "8882803321",
                            "address": "Amazon.com, Inc. Customer Service PO Box 81226 Seattle, WA 98108-1226",
                            "country": "US"
                        },
                        "status": "ACTIVE",
                        "expiryDate": "2019-03-28T16:41:41.090Z",
                        "permissions": ["ReadAccountsDetail", "ReadBalances", "ReadTransactionsDetail"],
                        "accounts": [{
                                "id": "9bf23657-511a-4022-a474-c3617cf1589e",
                                "number": "LV20GOWNKDCDIA03FAQD5",
                                "name": "Ricardo Norton's Current Account",
                                "type": "currentAccount",
                                "currency": "USD",
                                "balance": "9763.34"
                            }, {
                                "id": "dd98797a-a464-4702-ae2f-2214c81a8e69",
                                "number": "AD6548375906DIXVOJTD558B",
                                "name": "Ricardo Norton's Savings Account",
                                "type": "savingsAccount",
                                "currency": "USD",
                                "balance": "3788.61"
                            }, {
                                "id": "c5566c1b-2ebe-45b5-a32e-cf83c3669bbd",
                                "number": "EE511790690392885115",
                                "name": "Ricardo Norton's Credit Card",
                                "type": "creditCard",
                                "currency": "USD",
                                "balance": "2876.76"
                            }, {
                                "id": "cf916772-3676-43a8-89c0-86bd545f84dd",
                                "number": "HR1964204918384144019",
                                "name": "Ricardo Norton's Investment Account",
                                "type": "investmentAccount",
                                "currency": "USD",
                                "balance": "2676.23"
                            }, {
                                "id": "7eaee238-d5a9-40d3-80b9-75a29fea908b",
                                "number": "IE37QNJQ34395947171968",
                                "name": "Ricardo Norton's Mortgage Loan",
                                "type": "mortgage",
                                "currency": "USD",
                                "balance": -150000.0
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "value": {
                            "message": "Bad Request",
                            "errors": [{
                                    "message": "Value Exceeded. Must be between {min} and {max}.",
                                    "key": "common.api.shoesize",
                                    "context": {
                                        "max": "50",
                                        "min": "1"
                                    }
                                }]
                        }
                    }
                },
                {
                    status: 403,
                    body: {
                        "value": {
                            "message": "Access to requested resource denied.",
                            "errors": [{
                                    "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                    "key": "common.api.quota",
                                    "context": {
                                        "quota": "someQuota"
                                    }
                                }]
                        }
                    }
                },
                {
                    status: 404,
                    body: {
                        "value": {
                            "message": "Resource not found.",
                            "errors": [{
                                    "message": "Unable to find the resource requested resource: {resource}.",
                                    "key": "common.api.resource",
                                    "context": {
                                        "resource": "aResource"
                                    }
                                }]
                        }
                    }
                },
            ]
        },
        {
            urlPattern: "/consent/client-api/v2/consents",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: {
                        "id": "8b3e32ae-88c1-4548-a429-f5834f5aca97"
                    }
                },
                {
                    status: 400,
                    body: {
                        "value": {
                            "message": "Bad Request",
                            "errors": [{
                                    "message": "Value Exceeded. Must be between {min} and {max}.",
                                    "key": "common.api.shoesize",
                                    "context": {
                                        "max": "50",
                                        "min": "1"
                                    }
                                }]
                        }
                    }
                },
                {
                    status: 403,
                    body: {
                        "value": {
                            "message": "Access to requested resource denied.",
                            "errors": [{
                                    "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                    "key": "common.api.quota",
                                    "context": {
                                        "quota": "someQuota"
                                    }
                                }]
                        }
                    }
                },
            ]
        },
        {
            urlPattern: "/consent/client-api/v2/consents/{id}/revoke",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {}
                },
                {
                    status: 400,
                    body: {
                        "value": {
                            "message": "Bad Request",
                            "errors": [{
                                    "message": "Value Exceeded. Must be between {min} and {max}.",
                                    "key": "common.api.shoesize",
                                    "context": {
                                        "max": "50",
                                        "min": "1"
                                    }
                                }]
                        }
                    }
                },
                {
                    status: 403,
                    body: {
                        "value": {
                            "message": "Access to requested resource denied.",
                            "errors": [{
                                    "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                    "key": "common.api.quota",
                                    "context": {
                                        "quota": "someQuota"
                                    }
                                }]
                        }
                    }
                },
                {
                    status: 404,
                    body: {
                        "value": {
                            "message": "Resource not found.",
                            "errors": [{
                                    "message": "Unable to find the resource requested resource: {resource}.",
                                    "key": "common.api.resource",
                                    "context": {
                                        "resource": "aResource"
                                    }
                                }]
                        }
                    }
                },
            ]
        },
    ]);

    var PaymentRequestsHttpService = /** @class */ (function () {
        function PaymentRequestsHttpService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '/consent';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new ConsentConfiguration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        PaymentRequestsHttpService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        PaymentRequestsHttpService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        PaymentRequestsHttpService.prototype.getIdByIdgetPaymentRequestById = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getIdByIdgetPaymentRequestById.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/payment-requests/" + encodeURIComponent(String(_id)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        PaymentRequestsHttpService.prototype.getIdByIdgetPaymentRequestByIdUrl = function (requestParameters) {
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getIdByIdgetPaymentRequestById.');
            }
            return this.configuration.basePath + "/client-api/v2/payment-requests/" + encodeURIComponent(String(_id));
        };
        PaymentRequestsHttpService.prototype.postConfirmById = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling postConfirmById.');
            }
            var _paymentPost = requestParameters["paymentPost"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v2/payment-requests/" + encodeURIComponent(String(_id)) + "/confirm", _paymentPost, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        PaymentRequestsHttpService.prototype.postConfirmByIdUrl = function (requestParameters) {
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling postConfirmById.');
            }
            var _paymentPost = requestParameters["paymentPost"];
            return this.configuration.basePath + "/client-api/v2/payment-requests/" + encodeURIComponent(String(_id)) + "/confirm";
        };
        PaymentRequestsHttpService.prototype.postRejectByIdpostReject = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling postRejectByIdpostReject.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v2/payment-requests/" + encodeURIComponent(String(_id)) + "/reject", null, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        PaymentRequestsHttpService.prototype.postRejectByIdpostRejectUrl = function (requestParameters) {
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling postRejectByIdpostReject.');
            }
            return this.configuration.basePath + "/client-api/v2/payment-requests/" + encodeURIComponent(String(_id)) + "/reject";
        };
        return PaymentRequestsHttpService;
    }());
    PaymentRequestsHttpService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PaymentRequestsHttpService, deps: [{ token: i1__namespace.HttpClient }, { token: CONSENT_BASE_PATH, optional: true }, { token: ConsentConfiguration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    PaymentRequestsHttpService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PaymentRequestsHttpService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PaymentRequestsHttpService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [CONSENT_BASE_PATH]
                        }] }, { type: ConsentConfiguration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var PaymentRequestsHttpServiceGetIdByIdgetPaymentRequestByIdMocksProvider = i2.createMocks([{
            urlPattern: "/consent/client-api/v2/payment-requests/{id}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "34bf3478-4187-46b1-aab1-20577c5d339c",
                        "tpp": {
                            "id": "0dbbf48e-53dc-4968-8167-6337718f9781",
                            "externalId": "amazon",
                            "name": "Amazon",
                            "website": "https://amazon.com",
                            "imageUrl": "https://cdn0.iconfinder.com/data/icons/most-usable-logos/120/Amazon-48.png",
                            "isTrusted": true,
                            "mail": "primary@amazon.com",
                            "phonenumber": "8882803321",
                            "address": "Amazon.com, Inc. Customer Service PO Box 81226 Seattle, WA 98108-1226",
                            "country": "US"
                        },
                        "amount": "100.00",
                        "currency": "USD",
                        "allowPaymentRedirectUrl": "https://amazon.com",
                        "rejectPaymentRedirectUrl": "https://google.com",
                        "details": "Purchase of 1 year subscription for Amazon AWS for Backbase R&D B.V.",
                        "selectedAccount": {
                            "id": "c5566c1b-2ebe-45b5-a32e-cf83c3669bbd",
                            "number": "EE511790690392885115",
                            "name": "Ricardo Norton's Credit Card",
                            "type": "creditCard",
                            "currency": "USD",
                            "balance": "2876.76"
                        },
                        "accounts": [{
                                "id": "9bf23657-511a-4022-a474-c3617cf1589e",
                                "number": "LV20GOWNKDCDIA03FAQD5",
                                "name": "Ricardo Norton's Current Account",
                                "type": "currentAccount",
                                "currency": "USD",
                                "balance": "9763.34"
                            }, {
                                "id": "dd98797a-a464-4702-ae2f-2214c81a8e69",
                                "number": "AD6548375906DIXVOJTD558B",
                                "name": "Ricardo Norton's Savings Account",
                                "type": "savingsAccount",
                                "currency": "USD",
                                "balance": "3788.61"
                            }, {
                                "id": "c5566c1b-2ebe-45b5-a32e-cf83c3669bbd",
                                "number": "EE511790690392885115",
                                "name": "Ricardo Norton's Credit Card",
                                "type": "creditCard",
                                "currency": "USD",
                                "balance": "2876.76"
                            }, {
                                "id": "cf916772-3676-43a8-89c0-86bd545f84dd",
                                "number": "HR1964204918384144019",
                                "name": "Ricardo Norton's Investment Account",
                                "type": "investmentAccount",
                                "currency": "USD",
                                "balance": "2676.23"
                            }, {
                                "id": "7eaee238-d5a9-40d3-80b9-75a29fea908b",
                                "number": "IE37QNJQ34395947171968",
                                "name": "Ricardo Norton's Mortgage Loan",
                                "type": "mortgage",
                                "currency": "USD",
                                "balance": -150000.0
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "value": {
                            "message": "Bad Request",
                            "errors": [{
                                    "message": "Value Exceeded. Must be between {min} and {max}.",
                                    "key": "common.api.shoesize",
                                    "context": {
                                        "max": "50",
                                        "min": "1"
                                    }
                                }]
                        }
                    }
                },
                {
                    status: 403,
                    body: {
                        "value": {
                            "message": "Access to requested resource denied.",
                            "errors": [{
                                    "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                    "key": "common.api.quota",
                                    "context": {
                                        "quota": "someQuota"
                                    }
                                }]
                        }
                    }
                },
                {
                    status: 404,
                    body: {
                        "value": {
                            "message": "Resource not found.",
                            "errors": [{
                                    "message": "Unable to find the resource requested resource: {resource}.",
                                    "key": "common.api.resource",
                                    "context": {
                                        "resource": "aResource"
                                    }
                                }]
                        }
                    }
                },
            ]
        }]);
    var PaymentRequestsHttpServicePostConfirmByIdMocksProvider = i2.createMocks([{
            urlPattern: "/consent/client-api/v2/payment-requests/{id}/confirm",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {}
                },
                {
                    status: 400,
                    body: {
                        "value": {
                            "message": "Bad Request",
                            "errors": [{
                                    "message": "Value Exceeded. Must be between {min} and {max}.",
                                    "key": "common.api.shoesize",
                                    "context": {
                                        "max": "50",
                                        "min": "1"
                                    }
                                }]
                        }
                    }
                },
                {
                    status: 403,
                    body: {
                        "value": {
                            "message": "Access to requested resource denied.",
                            "errors": [{
                                    "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                    "key": "common.api.quota",
                                    "context": {
                                        "quota": "someQuota"
                                    }
                                }]
                        }
                    }
                },
                {
                    status: 404,
                    body: {
                        "value": {
                            "message": "Resource not found.",
                            "errors": [{
                                    "message": "Unable to find the resource requested resource: {resource}.",
                                    "key": "common.api.resource",
                                    "context": {
                                        "resource": "aResource"
                                    }
                                }]
                        }
                    }
                },
            ]
        }]);
    var PaymentRequestsHttpServicePostRejectByIdpostRejectMocksProvider = i2.createMocks([{
            urlPattern: "/consent/client-api/v2/payment-requests/{id}/reject",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {}
                },
                {
                    status: 400,
                    body: {
                        "value": {
                            "message": "Bad Request",
                            "errors": [{
                                    "message": "Value Exceeded. Must be between {min} and {max}.",
                                    "key": "common.api.shoesize",
                                    "context": {
                                        "max": "50",
                                        "min": "1"
                                    }
                                }]
                        }
                    }
                },
                {
                    status: 403,
                    body: {
                        "value": {
                            "message": "Access to requested resource denied.",
                            "errors": [{
                                    "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                    "key": "common.api.quota",
                                    "context": {
                                        "quota": "someQuota"
                                    }
                                }]
                        }
                    }
                },
                {
                    status: 404,
                    body: {
                        "value": {
                            "message": "Resource not found.",
                            "errors": [{
                                    "message": "Unable to find the resource requested resource: {resource}.",
                                    "key": "common.api.resource",
                                    "context": {
                                        "resource": "aResource"
                                    }
                                }]
                        }
                    }
                },
            ]
        }]);
    var PaymentRequestsHttpServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/consent/client-api/v2/payment-requests/{id}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "id": "34bf3478-4187-46b1-aab1-20577c5d339c",
                        "tpp": {
                            "id": "0dbbf48e-53dc-4968-8167-6337718f9781",
                            "externalId": "amazon",
                            "name": "Amazon",
                            "website": "https://amazon.com",
                            "imageUrl": "https://cdn0.iconfinder.com/data/icons/most-usable-logos/120/Amazon-48.png",
                            "isTrusted": true,
                            "mail": "primary@amazon.com",
                            "phonenumber": "8882803321",
                            "address": "Amazon.com, Inc. Customer Service PO Box 81226 Seattle, WA 98108-1226",
                            "country": "US"
                        },
                        "amount": "100.00",
                        "currency": "USD",
                        "allowPaymentRedirectUrl": "https://amazon.com",
                        "rejectPaymentRedirectUrl": "https://google.com",
                        "details": "Purchase of 1 year subscription for Amazon AWS for Backbase R&D B.V.",
                        "selectedAccount": {
                            "id": "c5566c1b-2ebe-45b5-a32e-cf83c3669bbd",
                            "number": "EE511790690392885115",
                            "name": "Ricardo Norton's Credit Card",
                            "type": "creditCard",
                            "currency": "USD",
                            "balance": "2876.76"
                        },
                        "accounts": [{
                                "id": "9bf23657-511a-4022-a474-c3617cf1589e",
                                "number": "LV20GOWNKDCDIA03FAQD5",
                                "name": "Ricardo Norton's Current Account",
                                "type": "currentAccount",
                                "currency": "USD",
                                "balance": "9763.34"
                            }, {
                                "id": "dd98797a-a464-4702-ae2f-2214c81a8e69",
                                "number": "AD6548375906DIXVOJTD558B",
                                "name": "Ricardo Norton's Savings Account",
                                "type": "savingsAccount",
                                "currency": "USD",
                                "balance": "3788.61"
                            }, {
                                "id": "c5566c1b-2ebe-45b5-a32e-cf83c3669bbd",
                                "number": "EE511790690392885115",
                                "name": "Ricardo Norton's Credit Card",
                                "type": "creditCard",
                                "currency": "USD",
                                "balance": "2876.76"
                            }, {
                                "id": "cf916772-3676-43a8-89c0-86bd545f84dd",
                                "number": "HR1964204918384144019",
                                "name": "Ricardo Norton's Investment Account",
                                "type": "investmentAccount",
                                "currency": "USD",
                                "balance": "2676.23"
                            }, {
                                "id": "7eaee238-d5a9-40d3-80b9-75a29fea908b",
                                "number": "IE37QNJQ34395947171968",
                                "name": "Ricardo Norton's Mortgage Loan",
                                "type": "mortgage",
                                "currency": "USD",
                                "balance": -150000.0
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "value": {
                            "message": "Bad Request",
                            "errors": [{
                                    "message": "Value Exceeded. Must be between {min} and {max}.",
                                    "key": "common.api.shoesize",
                                    "context": {
                                        "max": "50",
                                        "min": "1"
                                    }
                                }]
                        }
                    }
                },
                {
                    status: 403,
                    body: {
                        "value": {
                            "message": "Access to requested resource denied.",
                            "errors": [{
                                    "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                    "key": "common.api.quota",
                                    "context": {
                                        "quota": "someQuota"
                                    }
                                }]
                        }
                    }
                },
                {
                    status: 404,
                    body: {
                        "value": {
                            "message": "Resource not found.",
                            "errors": [{
                                    "message": "Unable to find the resource requested resource: {resource}.",
                                    "key": "common.api.resource",
                                    "context": {
                                        "resource": "aResource"
                                    }
                                }]
                        }
                    }
                },
            ]
        },
        {
            urlPattern: "/consent/client-api/v2/payment-requests/{id}/confirm",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {}
                },
                {
                    status: 400,
                    body: {
                        "value": {
                            "message": "Bad Request",
                            "errors": [{
                                    "message": "Value Exceeded. Must be between {min} and {max}.",
                                    "key": "common.api.shoesize",
                                    "context": {
                                        "max": "50",
                                        "min": "1"
                                    }
                                }]
                        }
                    }
                },
                {
                    status: 403,
                    body: {
                        "value": {
                            "message": "Access to requested resource denied.",
                            "errors": [{
                                    "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                    "key": "common.api.quota",
                                    "context": {
                                        "quota": "someQuota"
                                    }
                                }]
                        }
                    }
                },
                {
                    status: 404,
                    body: {
                        "value": {
                            "message": "Resource not found.",
                            "errors": [{
                                    "message": "Unable to find the resource requested resource: {resource}.",
                                    "key": "common.api.resource",
                                    "context": {
                                        "resource": "aResource"
                                    }
                                }]
                        }
                    }
                },
            ]
        },
        {
            urlPattern: "/consent/client-api/v2/payment-requests/{id}/reject",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {}
                },
                {
                    status: 400,
                    body: {
                        "value": {
                            "message": "Bad Request",
                            "errors": [{
                                    "message": "Value Exceeded. Must be between {min} and {max}.",
                                    "key": "common.api.shoesize",
                                    "context": {
                                        "max": "50",
                                        "min": "1"
                                    }
                                }]
                        }
                    }
                },
                {
                    status: 403,
                    body: {
                        "value": {
                            "message": "Access to requested resource denied.",
                            "errors": [{
                                    "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                    "key": "common.api.quota",
                                    "context": {
                                        "quota": "someQuota"
                                    }
                                }]
                        }
                    }
                },
                {
                    status: 404,
                    body: {
                        "value": {
                            "message": "Resource not found.",
                            "errors": [{
                                    "message": "Unable to find the resource requested resource: {resource}.",
                                    "key": "common.api.resource",
                                    "context": {
                                        "resource": "aResource"
                                    }
                                }]
                        }
                    }
                },
            ]
        },
    ]);

    exports.COLLECTION_FORMATS = COLLECTION_FORMATS;
    exports.CONFIG_TOKEN = CONFIG_TOKEN;
    exports.CONSENT_BASE_PATH = CONSENT_BASE_PATH;
    exports.ConsentApiModule = ConsentApiModule;
    exports.ConsentConfiguration = ConsentConfiguration;
    exports.ConsentRequestsHttpService = ConsentRequestsHttpService;
    exports.ConsentRequestsHttpServiceGetIdByIdMocksProvider = ConsentRequestsHttpServiceGetIdByIdMocksProvider;
    exports.ConsentRequestsHttpServiceMocksProvider = ConsentRequestsHttpServiceMocksProvider;
    exports.ConsentRequestsHttpServicePostRejectByIdMocksProvider = ConsentRequestsHttpServicePostRejectByIdMocksProvider;
    exports.ConsentStatus = ConsentStatus;
    exports.ConsentsHttpService = ConsentsHttpService;
    exports.ConsentsHttpServiceGetConsentsMocksProvider = ConsentsHttpServiceGetConsentsMocksProvider;
    exports.ConsentsHttpServiceGetIdByIdgetIdMocksProvider = ConsentsHttpServiceGetIdByIdgetIdMocksProvider;
    exports.ConsentsHttpServiceMocksProvider = ConsentsHttpServiceMocksProvider;
    exports.ConsentsHttpServicePostConsentsMocksProvider = ConsentsHttpServicePostConsentsMocksProvider;
    exports.ConsentsHttpServicePostRevokeByIdMocksProvider = ConsentsHttpServicePostRevokeByIdMocksProvider;
    exports.PaymentRequestsHttpService = PaymentRequestsHttpService;
    exports.PaymentRequestsHttpServiceGetIdByIdgetPaymentRequestByIdMocksProvider = PaymentRequestsHttpServiceGetIdByIdgetPaymentRequestByIdMocksProvider;
    exports.PaymentRequestsHttpServiceMocksProvider = PaymentRequestsHttpServiceMocksProvider;
    exports.PaymentRequestsHttpServicePostConfirmByIdMocksProvider = PaymentRequestsHttpServicePostConfirmByIdMocksProvider;
    exports.PaymentRequestsHttpServicePostRejectByIdpostRejectMocksProvider = PaymentRequestsHttpServicePostRejectByIdpostRejectMocksProvider;
    exports.Permission = Permission;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-consent-http-ang.umd.js.map
