import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Consent } from '../model/models';
import { ConsentListItem } from '../model/models';
import { ConsentPost } from '../model/models';
import { Identifier } from '../model/models';
import { ConsentConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface GetIdByIdgetIdRequestParams {
    ["id"]: string;
}
export interface PostConsentsRequestParams {
    ["consentPost"]?: ConsentPost;
}
export interface PostRevokeByIdRequestParams {
    ["id"]: string;
}
export declare class ConsentsHttpService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: ConsentConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: ConsentConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    getConsents(observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<ConsentListItem>>;
    getConsents(observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<ConsentListItem>>>;
    getConsents(observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<ConsentListItem>>>;
    getConsentsUrl(): string;
    getIdByIdgetId(requestParameters: GetIdByIdgetIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Consent>;
    getIdByIdgetId(requestParameters: GetIdByIdgetIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Consent>>;
    getIdByIdgetId(requestParameters: GetIdByIdgetIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Consent>>;
    getIdByIdgetIdUrl(requestParameters: GetIdByIdgetIdRequestParams): string;
    postConsents(requestParameters: PostConsentsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Identifier>;
    postConsents(requestParameters: PostConsentsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Identifier>>;
    postConsents(requestParameters: PostConsentsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Identifier>>;
    postConsentsUrl(requestParameters: PostConsentsRequestParams): string;
    postRevokeById(requestParameters: PostRevokeByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<string>;
    postRevokeById(requestParameters: PostRevokeByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<string>>;
    postRevokeById(requestParameters: PostRevokeByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<string>>;
    postRevokeByIdUrl(requestParameters: PostRevokeByIdRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<ConsentsHttpService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<ConsentsHttpService>;
}
