import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { ConsentRequest } from '../model/models';
import { ConsentConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface GetIdByIdRequestParams {
    ["id"]: string;
}
export interface PostRejectByIdRequestParams {
    ["id"]: string;
}
export declare class ConsentRequestsHttpService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: ConsentConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: ConsentConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    getIdById(requestParameters: GetIdByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<ConsentRequest>;
    getIdById(requestParameters: GetIdByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<ConsentRequest>>;
    getIdById(requestParameters: GetIdByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<ConsentRequest>>;
    getIdByIdUrl(requestParameters: GetIdByIdRequestParams): string;
    postRejectById(requestParameters: PostRejectByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<string>;
    postRejectById(requestParameters: PostRejectByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<string>>;
    postRejectById(requestParameters: PostRejectByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<string>>;
    postRejectByIdUrl(requestParameters: PostRejectByIdRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<ConsentRequestsHttpService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<ConsentRequestsHttpService>;
}
