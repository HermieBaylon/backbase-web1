import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { PaymentPost } from '../model/models';
import { PaymentRequest } from '../model/models';
import { ConsentConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface GetIdByIdgetPaymentRequestByIdRequestParams {
    ["id"]: string;
}
export interface PostConfirmByIdRequestParams {
    ["id"]: string;
    ["paymentPost"]?: PaymentPost;
}
export interface PostRejectByIdpostRejectRequestParams {
    ["id"]: string;
}
export declare class PaymentRequestsHttpService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: ConsentConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: ConsentConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    getIdByIdgetPaymentRequestById(requestParameters: GetIdByIdgetPaymentRequestByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<PaymentRequest>;
    getIdByIdgetPaymentRequestById(requestParameters: GetIdByIdgetPaymentRequestByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<PaymentRequest>>;
    getIdByIdgetPaymentRequestById(requestParameters: GetIdByIdgetPaymentRequestByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<PaymentRequest>>;
    getIdByIdgetPaymentRequestByIdUrl(requestParameters: GetIdByIdgetPaymentRequestByIdRequestParams): string;
    postConfirmById(requestParameters: PostConfirmByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<string>;
    postConfirmById(requestParameters: PostConfirmByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<string>>;
    postConfirmById(requestParameters: PostConfirmByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<string>>;
    postConfirmByIdUrl(requestParameters: PostConfirmByIdRequestParams): string;
    postRejectByIdpostReject(requestParameters: PostRejectByIdpostRejectRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<string>;
    postRejectByIdpostReject(requestParameters: PostRejectByIdpostRejectRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<string>>;
    postRejectByIdpostReject(requestParameters: PostRejectByIdpostRejectRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<string>>;
    postRejectByIdpostRejectUrl(requestParameters: PostRejectByIdpostRejectRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<PaymentRequestsHttpService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<PaymentRequestsHttpService>;
}
