{"version":3,"file":"backbase-notifications-mocks-provider-ang.js","sources":["../../../../libs/notifications-mocks-provider-ang/src/notification-mock.ts","../../../../libs/notifications-mocks-provider-ang/src/notifications-interceptor.ts","../../../../libs/notifications-mocks-provider-ang/src/notifications-mocks-provider.ts","../../../../libs/notifications-mocks-provider-ang/backbase-notifications-mocks-provider-ang.ts"],"sourcesContent":["import { NotificationItem } from '@backbase/notifications-common-ang';\n\nexport const notification: Readonly<NotificationItem> = {\n  createdOn: '2017-08-06T14:01:36Z',\n  id: '1234-5678-9022',\n  level: 'ALERT',\n  message: 'Your payment to A. Smith was rejected due to insufficient funds on your current account.',\n  origin: 'Transaction',\n  read: false,\n  title: 'Payment rejected',\n};\n","import { Injectable, NgZone } from '@angular/core';\nimport {\n  HttpErrorResponse,\n  HttpEvent,\n  HttpHandler,\n  HttpHeaders,\n  HttpInterceptor,\n  HttpRequest,\n  HttpResponse,\n} from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { NotificationStreamItem, NotificationItem, toISOExtendedFormat } from '@backbase/notifications-common-ang';\n\nimport { notification } from './notification-mock';\n\nconst DEFAULT_FREQUENCY = 20000;\n\nconst notificationReadRegexp = /\\/notifications\\/(.*)\\/read\\/?$/;\n\nfunction getGenerationFrequency(frequency: string | null): number {\n  const freq = frequency && parseInt(frequency, 10);\n\n  return freq || DEFAULT_FREQUENCY;\n}\n\nfunction createNotificationsPage(notifications: NotificationItem[], options: { from: number; size: number }) {\n  const { from, size } = options;\n  const start = from * size;\n  const end = start + size;\n\n  return notifications.slice(start, end);\n}\n\nconst quietNotificationsStrategy = {\n  STICKY_LIMIT: 1,\n  POPUPS_LIMIT: 1,\n};\n\nconst noLimitsNotificationsStrategy = {\n  STICKY_LIMIT: Infinity,\n  POPUPS_LIMIT: Infinity,\n};\n\nconst noNotificationsStrategy = {\n  STICKY_LIMIT: 0,\n  POPUPS_LIMIT: 0,\n};\n\n@Injectable()\nexport class NotificationsInterceptor implements HttpInterceptor {\n  private readonly areMocksEnabled = localStorage.getItem('enableMocks') === 'true';\n  private readonly isEmptyNotificationsEnabled = localStorage.getItem('noNotifications') === 'true';\n  private readonly isNoLimitsNotificationsEnabled = localStorage.getItem('noLimitsNotifications') === 'true';\n  private readonly liveNotificationFreq = localStorage.getItem('liveNotificationFreq');\n  private readonly mockStrategy = this.getMockStrategy();\n\n  private readonly readNotifications: any = {};\n  private readonly newNotifications: NotificationItem[] = [];\n  private popupsCount = 0;\n  private notificationsStreamHandled = false;\n  private readonly notificationRequestUnreadIds = []; // from spec examples\n\n  constructor(private readonly ngZone: NgZone) {\n    if (this.mockStrategy && this.liveNotificationFreq) {\n      this.ngZone.runOutsideAngular(() => {\n        setInterval(() => {\n          this.newNotifications.unshift({\n            ...notification,\n            id: (345679 + this.newNotifications.length).toString(),\n            title: `New Notification ${this.newNotifications.length + 1}`,\n            createdOn: new Date().toISOString(),\n          });\n        }, getGenerationFrequency(this.liveNotificationFreq));\n      });\n    }\n  }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    if (!this.mockStrategy) {\n      return next.handle(req);\n    }\n\n    if (req.url.endsWith('notifications/unread-count')) {\n      return this.handleUnreadCountRequest(req, next);\n    }\n\n    if (req.url.endsWith('notifications/read')) {\n      return this.handleReadAllNotificationRequest(req, next);\n    }\n\n    if (req.url.endsWith('read') && req.method === 'PUT') {\n      return this.handleReadNotificationRequest(req, next);\n    }\n\n    if (req.url.endsWith('notifications')) {\n      return this.handleNotificationsRequest(req, next);\n    }\n\n    if (req.url.endsWith('notifications/stream')) {\n      return this.handleNotificationsStreamRequest(req, next);\n    }\n\n    return next.handle(req);\n  }\n\n  private handleUnreadCountRequest(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    if (this.mockStrategy === noNotificationsStrategy) {\n      return next.handle(req).pipe(\n        map((event: HttpEvent<any>) => {\n          if (event instanceof HttpResponse) {\n            return event.clone({\n              body: {\n                unread: 0,\n              },\n            });\n          }\n\n          return event;\n        }),\n      );\n    }\n\n    return next.handle(req).pipe(\n      map((event: HttpEvent<any>) => {\n        if (event instanceof HttpResponse) {\n          return event.clone({\n            body: {\n              unread:\n                this.newNotifications.length +\n                event.body.unread +\n                this.popupsCount -\n                Object.keys(this.readNotifications).length,\n            },\n          });\n        }\n\n        return event;\n      }),\n    );\n  }\n\n  private handleNotificationsRequest(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    if (this.mockStrategy === noNotificationsStrategy) {\n      return next.handle(req).pipe(\n        map((event: HttpEvent<any>) => {\n          if (event instanceof HttpResponse) {\n            return event.clone({\n              body: [],\n            });\n          }\n\n          return event;\n        }),\n      );\n    }\n\n    return next.handle(req).pipe(\n      map((event: HttpEvent<any>) => {\n        if (event instanceof HttpResponse) {\n          const from = Number(req.params.get('from'));\n          const size = Number(req.params.get('size'));\n          const toDate = req.params.get('toDate');\n\n          if (!this.notificationRequestUnreadIds.length) {\n            this.notificationRequestUnreadIds.push(\n              //@ts-ignore\n              ...event.body.filter((item: NotificationItem) => !item.read).map((item: NotificationItem) => item.id),\n            );\n          }\n\n          let notifications = [...this.newNotifications, ...event.body];\n\n          if (toDate) {\n            notifications = notifications.filter(\n              ({ createdOn }) => new Date(toISOExtendedFormat(createdOn)).getTime() <= new Date(toDate).getTime(),\n            );\n          }\n\n          const notificationsPage = createNotificationsPage(notifications, { from, size });\n\n          return event.clone({\n            body: notificationsPage.map((n: { id: string; read: boolean }) => ({\n              ...n,\n              read: this.readNotifications[n.id] || n.read,\n            })),\n            headers: new HttpHeaders({\n              'x-total-count': String(notifications.length),\n              'x-cursor': notificationsPage[notificationsPage.length - 1].id,\n            }),\n          });\n        }\n\n        return event;\n      }),\n    );\n  }\n\n  private handleReadAllNotificationRequest(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    this.newNotifications.forEach(item => (this.readNotifications[item.id] = true));\n    this.notificationRequestUnreadIds.forEach(id => (this.readNotifications[id] = true));\n\n    return next.handle(req);\n  }\n\n  private handleReadNotificationRequest(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    const [, notificationId] = notificationReadRegexp.exec(req.url) as string[];\n\n    if (notificationId === '1234-5678-9022') {\n      return throwError(\n        new HttpErrorResponse({\n          status: 500,\n          statusText: '',\n        }),\n      );\n    }\n\n    this.readNotifications[notificationId] = true;\n\n    return next.handle(req);\n  }\n\n  private handleNotificationsStreamRequest(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return next.handle(req).pipe(\n      map((event: HttpEvent<any>) => {\n        if (event instanceof HttpResponse) {\n          const popupsLimit =\n            this.mockStrategy === quietNotificationsStrategy && !this.notificationsStreamHandled\n              ? 0\n              : // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                this.mockStrategy!.POPUPS_LIMIT;\n\n          const popups = event.body\n            .filter((item: NotificationStreamItem) => !item.expiresOn && !this.readNotifications[item.id])\n            .slice(0, popupsLimit)\n            .map((item: NotificationStreamItem) => ({ ...item }));\n\n          const sticky = event.body\n            .filter((item: NotificationStreamItem) => !!item.expiresOn)\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            .slice(0, this.mockStrategy!.STICKY_LIMIT)\n            .filter((item: NotificationStreamItem) => !this.readNotifications[item.id]);\n\n          const randomPopups = popups.slice(0, Math.ceil(Math.random() * popups.length));\n\n          this.popupsCount = event.body.length;\n          this.notificationsStreamHandled = true;\n\n          return event.clone({\n            body: [...sticky, ...randomPopups],\n          });\n        }\n\n        return event;\n      }),\n    );\n  }\n\n  private getMockStrategy() {\n    if (!this.areMocksEnabled) return undefined;\n\n    if (this.isEmptyNotificationsEnabled) return noNotificationsStrategy;\n    if (this.isNoLimitsNotificationsEnabled) return noLimitsNotificationsStrategy;\n\n    return quietNotificationsStrategy;\n  }\n}\n","import { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { Provider } from '@angular/core';\nimport { NotificationsInterceptor } from './notifications-interceptor';\n\nexport const NotificationsMocksProvider: Provider = {\n  provide: HTTP_INTERCEPTORS,\n  useClass: NotificationsInterceptor,\n  multi: true,\n};\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":"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"}