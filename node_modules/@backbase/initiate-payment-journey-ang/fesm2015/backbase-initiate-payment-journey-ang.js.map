{"version":3,"file":"backbase-initiate-payment-journey-ang.js","sources":["../../../../libs/initiate-payment-journey-ang/src/lib/services/initiate-payment-navigation.service.ts","../../../../libs/initiate-payment-journey-ang/src/lib/services/communication.service.ts","../../../../libs/initiate-payment-journey-ang/src/lib/services/initiate-payment-routable-modal.service.ts","../../../../libs/initiate-payment-journey-ang/src/lib/helpers/helpers.ts","../../../../libs/initiate-payment-journey-ang/src/lib/initiate-payment-journey.config.ts","../../../../libs/initiate-payment-journey-ang/src/lib/services/initiate-payment-config.service.ts","../../../../libs/initiate-payment-journey-ang/src/lib/initiate-payment-journey.component.ts","../../../../libs/initiate-payment-journey-ang/src/lib/initiate-payment-journey.module.ts","../../../../libs/initiate-payment-journey-ang/src/backbase-initiate-payment-journey-ang.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ActivatedRoute, NavigationExtras, Router } from '@angular/router';\nimport { Routes } from '@backbase/payment-orders-ang';\nimport { Subject } from 'rxjs';\n\n/** @internal */\n@Injectable()\nexport class InitiatePaymentNavigationService {\n  private readonly emitAfterSuccess = new Subject<void>();\n\n  private readonly routingExtras: NavigationExtras = {\n    queryParamsHandling: 'merge',\n    relativeTo: this.route,\n    skipLocationChange: true,\n  };\n\n  constructor(\n    private readonly router: Router,\n    private readonly route: ActivatedRoute\n  ) {}\n\n  /**\n   * Navigate to the initiate payment form\n   */\n  form(): Promise<boolean> {\n    return this.router.navigate([Routes.FORM], this.routingExtras);\n  }\n\n  /**\n   * Navigate to the initiate payment review screen.\n   */\n  review(): Promise<boolean> {\n    return this.router.navigate([Routes.REVIEW], this.routingExtras);\n  }\n\n  /**\n   * Method to emit success event after form is submitted\n   */\n  afterSuccess() {\n    this.emitAfterSuccess.next();\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { TriggerInitiatePaymentPayload } from '@backbase/payment-orders-ang';\n\nexport interface InitiatePaymentJourneyComponentApi {\n  /**\n   * @param {TriggerInitiatePaymentPayload} [data] - Initiate payment payload\n   */\n  setupData(data?: TriggerInitiatePaymentPayload): void;\n}\n\nexport interface Communicator<API> {\n  /**\n   * Called upon initializing the journey. Use this method to open the form with a specific wizard flow.\n   */\n  init(api: API): void;\n  /**\n   * Called when the user clicks the Done or Close button.\n   */\n  closeEvent(): void;\n  /**\n   * Called on the onDestroy hook of the InitiatePaymentJourneyComponent.\n   */\n  reset(): void;\n  headerNavigationAction(_: any): void;\n}\n\nexport type InitiatePaymentJourneyCommunicationService =\n  Communicator<InitiatePaymentJourneyComponentApi>;\n\nexport const INITIATE_PAYMENT_JOURNEY_COMMUNICATOR =\n  new InjectionToken<InitiatePaymentJourneyCommunicationService>(\n    'bb-initiate-payment-journey-communicator'\n  );\n","import { Inject, Injectable, Optional } from '@angular/core';\n\nimport {\n  INITIATE_PAYMENT_JOURNEY_COMMUNICATOR,\n  InitiatePaymentJourneyCommunicationService,\n} from './communication.service';\n\n/** @internal */\n@Injectable()\nexport class InitiatePaymentRoutableModalService {\n  constructor(\n    @Optional()\n    @Inject(INITIATE_PAYMENT_JOURNEY_COMMUNICATOR)\n    private readonly communicator: InitiatePaymentJourneyCommunicationService\n  ) {}\n\n  closeModal(): void {\n    this.communicator?.closeEvent();\n  }\n\n  openModal(): void {\n    this.communicator?.headerNavigationAction('new-debit-ach');\n  }\n}\n","import {\n  ACH_DEBIT,\n  CHAPS,\n  InitiatePaymentHeaderData,\n  InitiatePaymentHeaderStates,\n  INTERNAL_TRANSFER,\n  INTERNAL_TRANSFER_BUSINESS,\n  INTERNATIONAL_TRANSFER,\n  INTRABANK_TRANSFER,\n  normalizePaymentType,\n  P2P_TRANSFER,\n  PaymentTypeConfig,\n  SEPA,\n  UK_FASTER_PAYMENT,\n  US_ACH_CREDIT,\n  US_DOMESTIC_WIRE,\n} from '@backbase/payment-orders-ang';\n\nexport function getPaymentConfig(paymentType: string): PaymentTypeConfig {\n  switch (normalizePaymentType(paymentType)) {\n    case 'SEPA_CREDIT_TRANSFER':\n    case 'SEPA_CT':\n    case 'SEPA':\n      return SEPA;\n    case 'ACH_CREDIT':\n    case 'US_ACH_CREDIT':\n      return US_ACH_CREDIT;\n    case 'US_ACH_DEBIT':\n    case 'ACH_DEBIT':\n      return ACH_DEBIT;\n    case 'FASTER_PAYMENT':\n      return UK_FASTER_PAYMENT;\n    case 'CHAPS':\n      return CHAPS;\n    case 'US_DOMESTIC_WIRE':\n      return US_DOMESTIC_WIRE;\n    case 'INTERNAL_TRANSFER':\n      return INTERNAL_TRANSFER;\n    case 'INTRABANK_TRANSFER':\n      return INTRABANK_TRANSFER;\n    case 'INTERNAL_TRANSFER_BUSINESS':\n      return INTERNAL_TRANSFER_BUSINESS;\n    case 'P2P_TRANSFER':\n      return P2P_TRANSFER;\n    case 'INTERNATIONAL_TRANSFER':\n      return INTERNATIONAL_TRANSFER;\n  }\n  return US_DOMESTIC_WIRE;\n}\n\nexport function getBusinessFunction(paymentType: string): string {\n  switch (normalizePaymentType(paymentType)) {\n    case 'SEPA_CREDIT_TRANSFER':\n    case 'SEPA_CT':\n    case 'SEPA':\n      return 'SEPA CT';\n    case 'ACH_DEBIT':\n      return 'ACH Debit';\n    case 'ACH_CREDIT':\n    case 'US_ACH_CREDIT':\n    case 'CUSTOM_ACH_CREDIT':\n      return 'ACH Credit Transfer';\n    case 'CHAPS':\n      return 'UK CHAPS';\n    case 'FASTER_PAYMENT':\n      return 'UK Faster Payments';\n    case 'US_DOMESTIC_WIRE':\n      return 'US Domestic Wire';\n    case 'INTERNAL_TRANSFER':\n    case 'INTERNAL_TRANSFER_BUSINESS':\n    case 'INTRABANK_TRANSFER':\n      return 'A2A Transfer';\n    case 'INTERNATIONAL_TRANSFER':\n      return 'US Foreign Wire';\n    case 'P2P_TRANSFER':\n      return 'P2P Transfer';\n  }\n  return 'US Domestic Wire';\n}\n\nexport function getPaymentTypeTitle(paymentType: string): string {\n  switch (normalizePaymentType(paymentType)) {\n    case 'SEPA_CREDIT_TRANSFER':\n    case 'SEPA_CT':\n    case 'SEPA':\n      return $localize`:@@initiate-payment.payment-title.payment-type-sepa:SEPA`;\n    case 'ACH_DEBIT':\n    case 'ACH_CREDIT':\n    case 'US_ACH_CREDIT':\n    case 'CUSTOM_ACH_CREDIT':\n      return $localize`:@@initiate-payment.payment-title.payment-type-ach:ACH`;\n    case 'US_DOMESTIC_WIRE':\n      return $localize`:@@initiate-payment.payment-title.payment-type-wire:Wire`;\n    case 'INTERNAL_TRANSFER':\n    case 'INTERNAL_TRANSFER_BUSINESS':\n    case 'INTRABANK_TRANSFER':\n      return $localize`:@@initiate-payment.payment-title.payment-type-internal:Internal`;\n    case 'INTERNATIONAL_TRANSFER':\n      return $localize`:@@initiate-payment.payment-title.payment-type-international-wire:International Wire`;\n    case 'P2P_TRANSFER':\n      return $localize`:@@initiate-payment.payment-title.payment-type-p2p:P2P`;\n  }\n  return $localize`:@@initiate-payment.payment-title.payment-type-default:`;\n}\n\nexport function defaultHeaderSetup({\n  paymentType,\n  paymentMode,\n  state,\n  isDebit,\n}: InitiatePaymentHeaderData) {\n  const payment = isDebit\n    ? $localize`:@@initiate-payment.payment-title.debit: Debit`\n    : '';\n\n  let title = `${getPaymentTypeTitle(paymentType)}${payment}`;\n\n  if (paymentMode?.includes('EDIT')) {\n    title = $localize`:@@initiate-payment.payment-title.edit-mode:Edit ${title}`;\n  } else {\n    title = $localize`:@@initiate-payment.payment-title.new-mode:New ${title}`;\n  }\n\n  if (paymentMode?.includes('TEMPLATE')) {\n    title = $localize`:@@initiate-payment.payment-title.template:${title} Template`;\n  } else if (!isDebit) {\n    title = $localize`:@@initiate-payment.payment-title.payment:${title} Payment`;\n  }\n\n  if (state === InitiatePaymentHeaderStates.REVIEW) {\n    title = $localize`:@@initiate-payment.payment-title.review-state:${title} - Review`;\n  } else if (state === InitiatePaymentHeaderStates.SUBMITTED) {\n    title = $localize`:@@initiate-payment.payment-title.submitted-state:${title} - Submitted`;\n  }\n\n  return title;\n}\n","import { InjectionToken } from '@angular/core';\nimport {\n  AccessContextScope,\n  FetchPaymentOptionsListenerFn,\n  InitiatePaymentOptions,\n  PaymentComponentsMap,\n  PaymentFormItem,\n  PaymentHooksOptions,\n  PaymentTypeConfig,\n} from '@backbase/payment-orders-ang';\nimport { defaultHeaderSetup } from './helpers/helpers';\n\nexport interface InitiatePaymentConfig {\n  paymentTypes: Omit<\n    PaymentTypeConfig,\n    'hooks' | 'customFields' | 'businessFunction'\n  >[];\n  businessFunctions: string[];\n  options?: InitiatePaymentOptions;\n  customFields?: PaymentComponentsMap;\n  fetchPaymentOptionsListener?: FetchPaymentOptionsListenerFn;\n  baseFields?: Array<PaymentFormItem>;\n  hooks?: PaymentHooksOptions;\n}\n\nexport const InitiatePaymentDefaultOptions: InitiatePaymentOptions = {\n  pageSize: 50,\n  isModalView: true,\n  pollInterval: 1000,\n  defaultCountry: 'US',\n  enableApprovals: true,\n  defaultScheme: 'BBAN',\n  isTemplateMode: false,\n  isDebitPayment: false,\n  isErrorTitleDisplayed: true,\n  enableNewPaymentButton: false,\n  checkClosedPaymentsAccess: false,\n  enableSavePaymentAsTemplate: true,\n  isOneOffToRecurrentAllowed: false,\n  isRecurrentToOneOffAllowed: false,\n  enablePaymentTemplateSelector: true,\n  accessContextScope: AccessContextScope.SA,\n  successEventName: 'bb.success.create.payment',\n  header: defaultHeaderSetup,\n};\n\nexport const INITIATE_PAYMENT_CONFIG =\n  new InjectionToken<InitiatePaymentConfig>('INITIATE_PAYMENT_CONFIG');\n","import { Inject, Injectable } from '@angular/core';\nimport {\n  TriggerInitiatePaymentPayload,\n  PaymentOrderHttpService,\n  StateService,\n  PaymentMode,\n} from '@backbase/payment-orders-ang';\nimport { ComponentsFactoryService } from '@backbase/payord-form-builder-ang';\nimport { CreatePaymentConfigSetupService } from '@backbase/payments-collection-ui-ang';\n\nimport {\n  INITIATE_PAYMENT_CONFIG,\n  InitiatePaymentConfig,\n  InitiatePaymentDefaultOptions,\n} from '../initiate-payment-journey.config';\nimport { getBusinessFunction, getPaymentConfig } from '../helpers/helpers';\n\n@Injectable()\nexport class InitiatePaymentConfigService {\n  constructor(\n    private readonly stateService: StateService,\n    private readonly componentsFactory: ComponentsFactoryService,\n    private readonly paymentOrderHttpService: PaymentOrderHttpService,\n    private readonly createPaymentSetup: CreatePaymentConfigSetupService,\n    @Inject(INITIATE_PAYMENT_CONFIG)\n    private readonly initiatePaymentConfig: InitiatePaymentConfig\n  ) {}\n\n  /**\n   * @param {TriggerInitiatePaymentPayload} [data] - Initiate payment payload\n   */\n  setup(data?: TriggerInitiatePaymentPayload) {\n    if (data) {\n      data.options?.paymentMode !== PaymentMode.CREATE_PAYMENT\n        ? this.applyData(data)\n        : this.applyConfigWithData(data);\n    } else {\n      this.applyConfig();\n    }\n  }\n\n  private applyConfig(): void {\n    const {\n      paymentTypes,\n      hooks,\n      options,\n      businessFunctions,\n      baseFields,\n      fetchPaymentOptionsListener,\n      customFields,\n    } = this.initiatePaymentConfig;\n\n    this.createPaymentSetup.setHooks(hooks);\n    this.createPaymentSetup.setConfigs(paymentTypes);\n    this.createPaymentSetup.setOptions({\n      ...InitiatePaymentDefaultOptions,\n      ...(options || {}),\n    });\n    this.createPaymentSetup.setBaseFields(baseFields);\n    this.createPaymentSetup.setFetchPaymentOptionsListener(\n      fetchPaymentOptionsListener\n    );\n\n    this.paymentOrderHttpService.businessFunction = businessFunctions.join(',');\n\n    this.componentsFactory.registerCustomFields(customFields);\n    this.componentsFactory.registerCustomFieldsForPaymentConfigs(paymentTypes);\n  }\n\n  private applyData(data: TriggerInitiatePaymentPayload): void {\n    const template = data.template;\n    const paymentType = template\n      ? template.details.paymentType\n      : data.payment?.paymentType;\n    this.paymentOrderHttpService.businessFunction = getBusinessFunction(\n      paymentType as string\n    );\n\n    if (template) {\n      this.stateService.setPaymentTemplate(data.template);\n    } else {\n      this.stateService.setEditPayment(data.payment);\n    }\n\n    this.createPaymentSetup.setConfigs([\n      { ...getPaymentConfig(paymentType as string) },\n    ]);\n    this.createPaymentSetup.setOptions({\n      ...InitiatePaymentDefaultOptions,\n      ...(data.options || {}),\n    });\n  }\n\n  private applyConfigWithData(data: TriggerInitiatePaymentPayload): void {\n    const template = data.template;\n    if (template) {\n      this.stateService.setPaymentTemplate(data.template);\n    } else {\n      this.stateService.setEditPayment(data.payment);\n    }\n    this.applyConfig();\n  }\n}\n","import { Component, Inject, OnDestroy, Optional } from '@angular/core';\nimport {\n  NavigationService,\n  RoutableModalService,\n  StateService,\n  TriggerInitiatePaymentPayload,\n} from '@backbase/payment-orders-ang';\nimport { InitiatePaymentNavigationService } from './services/initiate-payment-navigation.service';\nimport { InitiatePaymentRoutableModalService } from './services/initiate-payment-routable-modal.service';\nimport {\n  INITIATE_PAYMENT_JOURNEY_COMMUNICATOR,\n  InitiatePaymentJourneyCommunicationService,\n} from './services/communication.service';\nimport { InitiatePaymentConfigService } from './services/initiate-payment-config.service';\nimport { CreatePaymentConfigSetupService } from '@backbase/payments-collection-ui-ang';\n\n@Component({\n  selector: 'bb-initiate-payment-journey',\n  template: ` <router-outlet></router-outlet>`,\n  providers: [\n    StateService,\n    InitiatePaymentConfigService,\n    CreatePaymentConfigSetupService,\n    { provide: NavigationService, useClass: InitiatePaymentNavigationService },\n    {\n      provide: RoutableModalService,\n      useClass: InitiatePaymentRoutableModalService,\n    },\n  ],\n})\nexport class InitiatePaymentJourneyComponent implements OnDestroy {\n  constructor(\n    private readonly configService: InitiatePaymentConfigService,\n    @Optional()\n    @Inject(INITIATE_PAYMENT_JOURNEY_COMMUNICATOR)\n    private readonly communicator: InitiatePaymentJourneyCommunicationService\n  ) {\n    if (communicator) {\n      communicator.init({\n        setupData(data?: TriggerInitiatePaymentPayload) {\n          configService.setup(data);\n        },\n      });\n    } else {\n      configService.setup();\n    }\n  }\n\n  ngOnDestroy() {\n    this.communicator.reset();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideRoutes, Route, RouterModule } from '@angular/router';\nimport { BackbaseCoreModule } from '@backbase/foundation-ang/core';\nimport {\n  PaymentOptionsService,\n  PaymentOrderHttpService,\n  PayordPaymentErrorsConfigProvider,\n  Routes,\n} from '@backbase/payment-orders-ang';\nimport {\n  CreatePaymentFormComponent,\n  CreatePaymentFormModule,\n  CreatePaymentService,\n  ReviewPaymentContainerComponent,\n  ReviewPaymentModule,\n} from '@backbase/payments-collection-ui-ang';\nimport { PayordFormBuilderAngModule } from '@backbase/payord-form-builder-ang';\n\nimport { InitiatePaymentJourneyComponent } from './initiate-payment-journey.component';\n\nexport const InitiatePaymentDefaultRoute: Route = {\n  path: '',\n  component: InitiatePaymentJourneyComponent,\n  children: [\n    { path: '', redirectTo: Routes.FORM, pathMatch: 'full' },\n    { path: Routes.FORM, component: CreatePaymentFormComponent },\n    { path: Routes.REVIEW, component: ReviewPaymentContainerComponent },\n  ],\n};\n\n@NgModule({\n  declarations: [InitiatePaymentJourneyComponent],\n  imports: [\n    CommonModule,\n    RouterModule,\n    ReviewPaymentModule,\n    CreatePaymentFormModule,\n    PayordFormBuilderAngModule,\n    BackbaseCoreModule.withConfig({\n      classMap: {\n        InitiatePaymentJourneyComponent,\n      },\n    }),\n  ],\n  providers: [\n    CreatePaymentService,\n    PaymentOptionsService,\n    PaymentOrderHttpService,\n    PayordPaymentErrorsConfigProvider,\n  ],\n})\nexport class InitiatePaymentJourneyModule {\n  static forRoot(\n    data: { route: Route; [key: string]: any } = {\n      route: InitiatePaymentDefaultRoute,\n    }\n  ): ModuleWithProviders<InitiatePaymentJourneyModule> {\n    return {\n      ngModule: InitiatePaymentJourneyModule,\n      providers: [provideRoutes([data.route])],\n    };\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["i2","i1"],"mappings":"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"}