import { CommonModule } from '@angular/common';
import * as i0 from '@angular/core';
import { Injectable, InjectionToken, Optional, Inject, Component, NgModule } from '@angular/core';
import * as i1 from '@angular/router';
import { provideRoutes, RouterModule } from '@angular/router';
import * as i1$2 from '@backbase/foundation-ang/core';
import { BackbaseCoreModule } from '@backbase/foundation-ang/core';
import * as i1$1 from '@backbase/payment-orders-ang';
import { Routes, normalizePaymentType, INTERNATIONAL_TRANSFER, P2P_TRANSFER, INTERNAL_TRANSFER_BUSINESS, INTRABANK_TRANSFER, INTERNAL_TRANSFER, US_DOMESTIC_WIRE, CHAPS, UK_FASTER_PAYMENT, ACH_DEBIT, US_ACH_CREDIT, SEPA, InitiatePaymentHeaderStates, AccessContextScope, PaymentMode, StateService, NavigationService, RoutableModalService, PaymentOptionsService, PaymentOrderHttpService, PayordPaymentErrorsConfigProvider } from '@backbase/payment-orders-ang';
export { AccessContextScope, CounterPartyFields, Frequencies, INTERNAL_TRANSFER, INTERNAL_TRANSFER_BUSINESS, INTERNATIONAL_TRANSFER, INTRABANK_TRANSFER, InitiatorFields, P2P_TRANSFER, PaymentBaseFields, PaymentComponents, PaymentFormFieldHooks, PaymentHooks, PaymentMode, PayordOmniPaymentConfigProvider, RemittanceInfoFields, ReviewScreens, SEPA, ScheduleEndType, ScheduleFields, US_ACH_CREDIT, US_DOMESTIC_WIRE } from '@backbase/payment-orders-ang';
import * as i3 from '@backbase/payments-collection-ui-ang';
import { CreatePaymentConfigSetupService, CreatePaymentFormComponent, ReviewPaymentContainerComponent, ReviewPaymentModule, CreatePaymentFormModule, CreatePaymentService } from '@backbase/payments-collection-ui-ang';
import * as i2 from '@backbase/payord-form-builder-ang';
import { PayordFormBuilderAngModule } from '@backbase/payord-form-builder-ang';
import { Subject } from 'rxjs';

/** @internal */
class InitiatePaymentNavigationService {
    constructor(router, route) {
        this.router = router;
        this.route = route;
        this.emitAfterSuccess = new Subject();
        this.routingExtras = {
            queryParamsHandling: 'merge',
            relativeTo: this.route,
            skipLocationChange: true,
        };
    }
    /**
     * Navigate to the initiate payment form
     */
    form() {
        return this.router.navigate([Routes.FORM], this.routingExtras);
    }
    /**
     * Navigate to the initiate payment review screen.
     */
    review() {
        return this.router.navigate([Routes.REVIEW], this.routingExtras);
    }
    /**
     * Method to emit success event after form is submitted
     */
    afterSuccess() {
        this.emitAfterSuccess.next();
    }
}
/** @nocollapse */ InitiatePaymentNavigationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InitiatePaymentNavigationService, deps: [{ token: i1.Router }, { token: i1.ActivatedRoute }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ InitiatePaymentNavigationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InitiatePaymentNavigationService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InitiatePaymentNavigationService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Router }, { type: i1.ActivatedRoute }]; } });

const INITIATE_PAYMENT_JOURNEY_COMMUNICATOR = new InjectionToken('bb-initiate-payment-journey-communicator');

/** @internal */
class InitiatePaymentRoutableModalService {
    constructor(communicator) {
        this.communicator = communicator;
    }
    closeModal() {
        var _a;
        (_a = this.communicator) === null || _a === void 0 ? void 0 : _a.closeEvent();
    }
    openModal() {
        var _a;
        (_a = this.communicator) === null || _a === void 0 ? void 0 : _a.headerNavigationAction('new-debit-ach');
    }
}
/** @nocollapse */ InitiatePaymentRoutableModalService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InitiatePaymentRoutableModalService, deps: [{ token: INITIATE_PAYMENT_JOURNEY_COMMUNICATOR, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ InitiatePaymentRoutableModalService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InitiatePaymentRoutableModalService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InitiatePaymentRoutableModalService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [INITIATE_PAYMENT_JOURNEY_COMMUNICATOR]
                }] }]; } });

function getPaymentConfig(paymentType) {
    switch (normalizePaymentType(paymentType)) {
        case 'SEPA_CREDIT_TRANSFER':
        case 'SEPA_CT':
        case 'SEPA':
            return SEPA;
        case 'ACH_CREDIT':
        case 'US_ACH_CREDIT':
            return US_ACH_CREDIT;
        case 'US_ACH_DEBIT':
        case 'ACH_DEBIT':
            return ACH_DEBIT;
        case 'FASTER_PAYMENT':
            return UK_FASTER_PAYMENT;
        case 'CHAPS':
            return CHAPS;
        case 'US_DOMESTIC_WIRE':
            return US_DOMESTIC_WIRE;
        case 'INTERNAL_TRANSFER':
            return INTERNAL_TRANSFER;
        case 'INTRABANK_TRANSFER':
            return INTRABANK_TRANSFER;
        case 'INTERNAL_TRANSFER_BUSINESS':
            return INTERNAL_TRANSFER_BUSINESS;
        case 'P2P_TRANSFER':
            return P2P_TRANSFER;
        case 'INTERNATIONAL_TRANSFER':
            return INTERNATIONAL_TRANSFER;
    }
    return US_DOMESTIC_WIRE;
}
function getBusinessFunction(paymentType) {
    switch (normalizePaymentType(paymentType)) {
        case 'SEPA_CREDIT_TRANSFER':
        case 'SEPA_CT':
        case 'SEPA':
            return 'SEPA CT';
        case 'ACH_DEBIT':
            return 'ACH Debit';
        case 'ACH_CREDIT':
        case 'US_ACH_CREDIT':
        case 'CUSTOM_ACH_CREDIT':
            return 'ACH Credit Transfer';
        case 'CHAPS':
            return 'UK CHAPS';
        case 'FASTER_PAYMENT':
            return 'UK Faster Payments';
        case 'US_DOMESTIC_WIRE':
            return 'US Domestic Wire';
        case 'INTERNAL_TRANSFER':
        case 'INTERNAL_TRANSFER_BUSINESS':
        case 'INTRABANK_TRANSFER':
            return 'A2A Transfer';
        case 'INTERNATIONAL_TRANSFER':
            return 'US Foreign Wire';
        case 'P2P_TRANSFER':
            return 'P2P Transfer';
    }
    return 'US Domestic Wire';
}
function getPaymentTypeTitle(paymentType) {
    switch (normalizePaymentType(paymentType)) {
        case 'SEPA_CREDIT_TRANSFER':
        case 'SEPA_CT':
        case 'SEPA':
            return $localize `:@@initiate-payment.payment-title.payment-type-sepa:SEPA`;
        case 'ACH_DEBIT':
        case 'ACH_CREDIT':
        case 'US_ACH_CREDIT':
        case 'CUSTOM_ACH_CREDIT':
            return $localize `:@@initiate-payment.payment-title.payment-type-ach:ACH`;
        case 'US_DOMESTIC_WIRE':
            return $localize `:@@initiate-payment.payment-title.payment-type-wire:Wire`;
        case 'INTERNAL_TRANSFER':
        case 'INTERNAL_TRANSFER_BUSINESS':
        case 'INTRABANK_TRANSFER':
            return $localize `:@@initiate-payment.payment-title.payment-type-internal:Internal`;
        case 'INTERNATIONAL_TRANSFER':
            return $localize `:@@initiate-payment.payment-title.payment-type-international-wire:International Wire`;
        case 'P2P_TRANSFER':
            return $localize `:@@initiate-payment.payment-title.payment-type-p2p:P2P`;
    }
    return $localize `:@@initiate-payment.payment-title.payment-type-default:`;
}
function defaultHeaderSetup({ paymentType, paymentMode, state, isDebit, }) {
    const payment = isDebit
        ? $localize `:@@initiate-payment.payment-title.debit: Debit`
        : '';
    let title = `${getPaymentTypeTitle(paymentType)}${payment}`;
    if (paymentMode === null || paymentMode === void 0 ? void 0 : paymentMode.includes('EDIT')) {
        title = $localize `:@@initiate-payment.payment-title.edit-mode:Edit ${title}`;
    }
    else {
        title = $localize `:@@initiate-payment.payment-title.new-mode:New ${title}`;
    }
    if (paymentMode === null || paymentMode === void 0 ? void 0 : paymentMode.includes('TEMPLATE')) {
        title = $localize `:@@initiate-payment.payment-title.template:${title} Template`;
    }
    else if (!isDebit) {
        title = $localize `:@@initiate-payment.payment-title.payment:${title} Payment`;
    }
    if (state === InitiatePaymentHeaderStates.REVIEW) {
        title = $localize `:@@initiate-payment.payment-title.review-state:${title} - Review`;
    }
    else if (state === InitiatePaymentHeaderStates.SUBMITTED) {
        title = $localize `:@@initiate-payment.payment-title.submitted-state:${title} - Submitted`;
    }
    return title;
}

const InitiatePaymentDefaultOptions = {
    pageSize: 50,
    isModalView: true,
    pollInterval: 1000,
    defaultCountry: 'US',
    enableApprovals: true,
    defaultScheme: 'BBAN',
    isTemplateMode: false,
    isDebitPayment: false,
    isErrorTitleDisplayed: true,
    enableNewPaymentButton: false,
    checkClosedPaymentsAccess: false,
    enableSavePaymentAsTemplate: true,
    isOneOffToRecurrentAllowed: false,
    isRecurrentToOneOffAllowed: false,
    enablePaymentTemplateSelector: true,
    accessContextScope: AccessContextScope.SA,
    successEventName: 'bb.success.create.payment',
    header: defaultHeaderSetup,
};
const INITIATE_PAYMENT_CONFIG = new InjectionToken('INITIATE_PAYMENT_CONFIG');

class InitiatePaymentConfigService {
    constructor(stateService, componentsFactory, paymentOrderHttpService, createPaymentSetup, initiatePaymentConfig) {
        this.stateService = stateService;
        this.componentsFactory = componentsFactory;
        this.paymentOrderHttpService = paymentOrderHttpService;
        this.createPaymentSetup = createPaymentSetup;
        this.initiatePaymentConfig = initiatePaymentConfig;
    }
    /**
     * @param {TriggerInitiatePaymentPayload} [data] - Initiate payment payload
     */
    setup(data) {
        var _a;
        if (data) {
            ((_a = data.options) === null || _a === void 0 ? void 0 : _a.paymentMode) !== PaymentMode.CREATE_PAYMENT
                ? this.applyData(data)
                : this.applyConfigWithData(data);
        }
        else {
            this.applyConfig();
        }
    }
    applyConfig() {
        const { paymentTypes, hooks, options, businessFunctions, baseFields, fetchPaymentOptionsListener, customFields, } = this.initiatePaymentConfig;
        this.createPaymentSetup.setHooks(hooks);
        this.createPaymentSetup.setConfigs(paymentTypes);
        this.createPaymentSetup.setOptions(Object.assign(Object.assign({}, InitiatePaymentDefaultOptions), (options || {})));
        this.createPaymentSetup.setBaseFields(baseFields);
        this.createPaymentSetup.setFetchPaymentOptionsListener(fetchPaymentOptionsListener);
        this.paymentOrderHttpService.businessFunction = businessFunctions.join(',');
        this.componentsFactory.registerCustomFields(customFields);
        this.componentsFactory.registerCustomFieldsForPaymentConfigs(paymentTypes);
    }
    applyData(data) {
        var _a;
        const template = data.template;
        const paymentType = template
            ? template.details.paymentType
            : (_a = data.payment) === null || _a === void 0 ? void 0 : _a.paymentType;
        this.paymentOrderHttpService.businessFunction = getBusinessFunction(paymentType);
        if (template) {
            this.stateService.setPaymentTemplate(data.template);
        }
        else {
            this.stateService.setEditPayment(data.payment);
        }
        this.createPaymentSetup.setConfigs([
            Object.assign({}, getPaymentConfig(paymentType)),
        ]);
        this.createPaymentSetup.setOptions(Object.assign(Object.assign({}, InitiatePaymentDefaultOptions), (data.options || {})));
    }
    applyConfigWithData(data) {
        const template = data.template;
        if (template) {
            this.stateService.setPaymentTemplate(data.template);
        }
        else {
            this.stateService.setEditPayment(data.payment);
        }
        this.applyConfig();
    }
}
/** @nocollapse */ InitiatePaymentConfigService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InitiatePaymentConfigService, deps: [{ token: i1$1.StateService }, { token: i2.ComponentsFactoryService }, { token: i1$1.PaymentOrderHttpService }, { token: i3.CreatePaymentConfigSetupService }, { token: INITIATE_PAYMENT_CONFIG }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ InitiatePaymentConfigService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InitiatePaymentConfigService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InitiatePaymentConfigService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1$1.StateService }, { type: i2.ComponentsFactoryService }, { type: i1$1.PaymentOrderHttpService }, { type: i3.CreatePaymentConfigSetupService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [INITIATE_PAYMENT_CONFIG]
                }] }]; } });

class InitiatePaymentJourneyComponent {
    constructor(configService, communicator) {
        this.configService = configService;
        this.communicator = communicator;
        if (communicator) {
            communicator.init({
                setupData(data) {
                    configService.setup(data);
                },
            });
        }
        else {
            configService.setup();
        }
    }
    ngOnDestroy() {
        this.communicator.reset();
    }
}
/** @nocollapse */ InitiatePaymentJourneyComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InitiatePaymentJourneyComponent, deps: [{ token: InitiatePaymentConfigService }, { token: INITIATE_PAYMENT_JOURNEY_COMMUNICATOR, optional: true }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ InitiatePaymentJourneyComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: InitiatePaymentJourneyComponent, selector: "bb-initiate-payment-journey", providers: [
        StateService,
        InitiatePaymentConfigService,
        CreatePaymentConfigSetupService,
        { provide: NavigationService, useClass: InitiatePaymentNavigationService },
        {
            provide: RoutableModalService,
            useClass: InitiatePaymentRoutableModalService,
        },
    ], ngImport: i0, template: ` <router-outlet></router-outlet>`, isInline: true, directives: [{ type: i1.RouterOutlet, selector: "router-outlet", outputs: ["activate", "deactivate"], exportAs: ["outlet"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InitiatePaymentJourneyComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-initiate-payment-journey',
                    template: ` <router-outlet></router-outlet>`,
                    providers: [
                        StateService,
                        InitiatePaymentConfigService,
                        CreatePaymentConfigSetupService,
                        { provide: NavigationService, useClass: InitiatePaymentNavigationService },
                        {
                            provide: RoutableModalService,
                            useClass: InitiatePaymentRoutableModalService,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: InitiatePaymentConfigService }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [INITIATE_PAYMENT_JOURNEY_COMMUNICATOR]
                }] }]; } });

const InitiatePaymentDefaultRoute = {
    path: '',
    component: InitiatePaymentJourneyComponent,
    children: [
        { path: '', redirectTo: Routes.FORM, pathMatch: 'full' },
        { path: Routes.FORM, component: CreatePaymentFormComponent },
        { path: Routes.REVIEW, component: ReviewPaymentContainerComponent },
    ],
};
class InitiatePaymentJourneyModule {
    static forRoot(data = {
        route: InitiatePaymentDefaultRoute,
    }) {
        return {
            ngModule: InitiatePaymentJourneyModule,
            providers: [provideRoutes([data.route])],
        };
    }
}
/** @nocollapse */ InitiatePaymentJourneyModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InitiatePaymentJourneyModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ InitiatePaymentJourneyModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InitiatePaymentJourneyModule, declarations: [InitiatePaymentJourneyComponent], imports: [CommonModule,
        RouterModule,
        ReviewPaymentModule,
        CreatePaymentFormModule,
        PayordFormBuilderAngModule, i1$2.BackbaseCoreModule] });
/** @nocollapse */ InitiatePaymentJourneyModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InitiatePaymentJourneyModule, providers: [
        CreatePaymentService,
        PaymentOptionsService,
        PaymentOrderHttpService,
        PayordPaymentErrorsConfigProvider,
    ], imports: [[
            CommonModule,
            RouterModule,
            ReviewPaymentModule,
            CreatePaymentFormModule,
            PayordFormBuilderAngModule,
            BackbaseCoreModule.withConfig({
                classMap: {
                    InitiatePaymentJourneyComponent,
                },
            }),
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InitiatePaymentJourneyModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [InitiatePaymentJourneyComponent],
                    imports: [
                        CommonModule,
                        RouterModule,
                        ReviewPaymentModule,
                        CreatePaymentFormModule,
                        PayordFormBuilderAngModule,
                        BackbaseCoreModule.withConfig({
                            classMap: {
                                InitiatePaymentJourneyComponent,
                            },
                        }),
                    ],
                    providers: [
                        CreatePaymentService,
                        PaymentOptionsService,
                        PaymentOrderHttpService,
                        PayordPaymentErrorsConfigProvider,
                    ],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { INITIATE_PAYMENT_CONFIG, INITIATE_PAYMENT_JOURNEY_COMMUNICATOR, InitiatePaymentConfigService, InitiatePaymentDefaultOptions, InitiatePaymentDefaultRoute, InitiatePaymentJourneyComponent, InitiatePaymentJourneyModule, InitiatePaymentNavigationService };
//# sourceMappingURL=backbase-initiate-payment-journey-ang.js.map
