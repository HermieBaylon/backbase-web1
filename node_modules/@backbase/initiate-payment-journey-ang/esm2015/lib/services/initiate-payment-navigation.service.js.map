{"version":3,"file":"initiate-payment-navigation.service.js","sourceRoot":"","sources":["../../../../../../libs/initiate-payment-journey-ang/src/lib/services/initiate-payment-navigation.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,cAAc,EAAoB,MAAM,EAAE,MAAM,iBAAiB,CAAC;AAC3E,OAAO,EAAE,MAAM,EAAE,MAAM,8BAA8B,CAAC;AACtD,OAAO,EAAE,OAAO,EAAE,MAAM,MAAM,CAAC;;;AAE/B,gBAAgB;AAEhB,MAAM,OAAO,gCAAgC;IAS3C,YACmB,MAAc,EACd,KAAqB;QADrB,WAAM,GAAN,MAAM,CAAQ;QACd,UAAK,GAAL,KAAK,CAAgB;QAVvB,qBAAgB,GAAG,IAAI,OAAO,EAAQ,CAAC;QAEvC,kBAAa,GAAqB;YACjD,mBAAmB,EAAE,OAAO;YAC5B,UAAU,EAAE,IAAI,CAAC,KAAK;YACtB,kBAAkB,EAAE,IAAI;SACzB,CAAC;IAKC,CAAC;IAEJ;;OAEG;IACH,IAAI;QACF,OAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;IACjE,CAAC;IAED;;OAEG;IACH,MAAM;QACJ,OAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;IACnE,CAAC;IAED;;OAEG;IACH,YAAY;QACV,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,CAAC;IAC/B,CAAC;;iJAjCU,gCAAgC;qJAAhC,gCAAgC;4FAAhC,gCAAgC;kBAD5C,UAAU","sourcesContent":["import { Injectable } from '@angular/core';\nimport { ActivatedRoute, NavigationExtras, Router } from '@angular/router';\nimport { Routes } from '@backbase/payment-orders-ang';\nimport { Subject } from 'rxjs';\n\n/** @internal */\n@Injectable()\nexport class InitiatePaymentNavigationService {\n  private readonly emitAfterSuccess = new Subject<void>();\n\n  private readonly routingExtras: NavigationExtras = {\n    queryParamsHandling: 'merge',\n    relativeTo: this.route,\n    skipLocationChange: true,\n  };\n\n  constructor(\n    private readonly router: Router,\n    private readonly route: ActivatedRoute\n  ) {}\n\n  /**\n   * Navigate to the initiate payment form\n   */\n  form(): Promise<boolean> {\n    return this.router.navigate([Routes.FORM], this.routingExtras);\n  }\n\n  /**\n   * Navigate to the initiate payment review screen.\n   */\n  review(): Promise<boolean> {\n    return this.router.navigate([Routes.REVIEW], this.routingExtras);\n  }\n\n  /**\n   * Method to emit success event after form is submitted\n   */\n  afterSuccess() {\n    this.emitAfterSuccess.next();\n  }\n}\n"]}