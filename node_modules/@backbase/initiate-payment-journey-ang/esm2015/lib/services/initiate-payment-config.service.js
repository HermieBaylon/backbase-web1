import { Inject, Injectable } from '@angular/core';
import { PaymentOrderHttpService, StateService, PaymentMode, } from '@backbase/payment-orders-ang';
import { ComponentsFactoryService } from '@backbase/payord-form-builder-ang';
import { CreatePaymentConfigSetupService } from '@backbase/payments-collection-ui-ang';
import { INITIATE_PAYMENT_CONFIG, InitiatePaymentDefaultOptions, } from '../initiate-payment-journey.config';
import { getBusinessFunction, getPaymentConfig } from '../helpers/helpers';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/payment-orders-ang";
import * as i2 from "@backbase/payord-form-builder-ang";
import * as i3 from "@backbase/payments-collection-ui-ang";
export class InitiatePaymentConfigService {
    constructor(stateService, componentsFactory, paymentOrderHttpService, createPaymentSetup, initiatePaymentConfig) {
        this.stateService = stateService;
        this.componentsFactory = componentsFactory;
        this.paymentOrderHttpService = paymentOrderHttpService;
        this.createPaymentSetup = createPaymentSetup;
        this.initiatePaymentConfig = initiatePaymentConfig;
    }
    /**
     * @param {TriggerInitiatePaymentPayload} [data] - Initiate payment payload
     */
    setup(data) {
        var _a;
        if (data) {
            ((_a = data.options) === null || _a === void 0 ? void 0 : _a.paymentMode) !== PaymentMode.CREATE_PAYMENT
                ? this.applyData(data)
                : this.applyConfigWithData(data);
        }
        else {
            this.applyConfig();
        }
    }
    applyConfig() {
        const { paymentTypes, hooks, options, businessFunctions, baseFields, fetchPaymentOptionsListener, customFields, } = this.initiatePaymentConfig;
        this.createPaymentSetup.setHooks(hooks);
        this.createPaymentSetup.setConfigs(paymentTypes);
        this.createPaymentSetup.setOptions(Object.assign(Object.assign({}, InitiatePaymentDefaultOptions), (options || {})));
        this.createPaymentSetup.setBaseFields(baseFields);
        this.createPaymentSetup.setFetchPaymentOptionsListener(fetchPaymentOptionsListener);
        this.paymentOrderHttpService.businessFunction = businessFunctions.join(',');
        this.componentsFactory.registerCustomFields(customFields);
        this.componentsFactory.registerCustomFieldsForPaymentConfigs(paymentTypes);
    }
    applyData(data) {
        var _a;
        const template = data.template;
        const paymentType = template
            ? template.details.paymentType
            : (_a = data.payment) === null || _a === void 0 ? void 0 : _a.paymentType;
        this.paymentOrderHttpService.businessFunction = getBusinessFunction(paymentType);
        if (template) {
            this.stateService.setPaymentTemplate(data.template);
        }
        else {
            this.stateService.setEditPayment(data.payment);
        }
        this.createPaymentSetup.setConfigs([
            Object.assign({}, getPaymentConfig(paymentType)),
        ]);
        this.createPaymentSetup.setOptions(Object.assign(Object.assign({}, InitiatePaymentDefaultOptions), (data.options || {})));
    }
    applyConfigWithData(data) {
        const template = data.template;
        if (template) {
            this.stateService.setPaymentTemplate(data.template);
        }
        else {
            this.stateService.setEditPayment(data.payment);
        }
        this.applyConfig();
    }
}
/** @nocollapse */ InitiatePaymentConfigService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InitiatePaymentConfigService, deps: [{ token: i1.StateService }, { token: i2.ComponentsFactoryService }, { token: i1.PaymentOrderHttpService }, { token: i3.CreatePaymentConfigSetupService }, { token: INITIATE_PAYMENT_CONFIG }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ InitiatePaymentConfigService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InitiatePaymentConfigService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: InitiatePaymentConfigService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.StateService }, { type: i2.ComponentsFactoryService }, { type: i1.PaymentOrderHttpService }, { type: i3.CreatePaymentConfigSetupService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [INITIATE_PAYMENT_CONFIG]
                }] }]; } });
//# sourceMappingURL=initiate-payment-config.service.js.map