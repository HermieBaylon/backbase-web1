import { Component, Directive, Optional } from '@angular/core';
import { BbTemplate, ItemModel } from '@backbase/foundation-ang/core';
import { LoadMoreMethod } from '@backbase/payment-orders-ang';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { StopChecksListService } from '../services/stop-checks-list.service';
import { StopChecksListCommunicationService } from '../services/stop-checks-list-communication.service';
import * as i0 from "@angular/core";
import * as i1 from "../services/stop-checks-list-communication.service";
import * as i2 from "@backbase/foundation-ang/core";
import * as i3 from "../services/stop-checks-list.service";
import * as i4 from "../components/list/stop-checks-list.component";
import * as i5 from "@backbase/ui-ang/pagination";
import * as i6 from "@backbase/ui-ang/load-button";
import * as i7 from "@backbase/ui-ang/loading-indicator";
import * as i8 from "../components/empty-list/empty-list.component";
import * as i9 from "@backbase/ui-ang/empty-state";
import * as i10 from "../components/details-modal/stop-checks-details.component";
import * as i11 from "@angular/common";
export class StopChecksListContainerComponent {
    constructor(communicationService, model, checkService) {
        var _a;
        this.communicationService = communicationService;
        this.model = model;
        this.checkService = checkService;
        this.destroyed$ = new Subject();
        /**
         * Reference to instance of customizable component.
         */
        this.hostRef = this;
        this.loading$ = this.checkService.loading$;
        this.paginationConfig$ = this.checkService.paginationConfig$;
        this.checksList$ = this.checkService.getData$;
        this.openDetails = false;
        (_a = this.communicationService) === null || _a === void 0 ? void 0 : _a.refreshList$.subscribe(() => this.checkService.loadMore(0));
        this.checkService.error$
            .pipe(takeUntil(this.destroyed$))
            .subscribe((val) => {
            this.error = val;
        });
        this.checksList$.pipe(takeUntil(this.destroyed$)).subscribe((res) => {
            this.checksList = res;
        });
    }
    ngOnDestroy() {
        this.destroyed$.next();
    }
    onCheckItemClick(selectedCheckItem) {
        this.openDetails = true;
        this.selectedCheck = selectedCheckItem;
    }
    onCloseDetails() {
        this.openDetails = false;
    }
    onPageChange(page) {
        this.checkService.loadMore(page++);
    }
    onLoadMore(params) {
        this.checkService.loadMore(params.from);
    }
    isPagination(paginationType) {
        return paginationType === LoadMoreMethod.PAGINATION;
    }
    showListLoading(isLoading, { paginationType, currentPage }) {
        const isFirstPage = currentPage === 0;
        return isLoading && (this.isPagination(paginationType) || isFirstPage);
    }
}
/** @nocollapse */ StopChecksListContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StopChecksListContainerComponent, deps: [{ token: i1.StopChecksListCommunicationService, optional: true }, { token: i2.ItemModel, optional: true }, { token: i3.StopChecksListService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ StopChecksListContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: StopChecksListContainerComponent, selector: "bb-stop-checks-list-container", ngImport: i0, template: "<ng-container\n  bbStopChecksListContainerCustomizableDirective\n  [bbTemplateContext]=\"{\n    isLoading: loading$ | async,\n    paginationConfig: paginationConfig$ | async\n  }\"\n  [bbHostRef]=\"hostRef\"\n></ng-container>\n\n<ng-template\n  bbStopChecksListContainerCustomizableDirective\n  let-hostRef\n  let-isLoading=\"context.isLoading\"\n  let-paginationConfig=\"context.paginationConfig\"\n>\n  <ng-container\n    *ngIf=\"hostRef.showListLoading(isLoading, paginationConfig); else list\"\n  >\n    <ng-container *ngTemplateOutlet=\"loading\"></ng-container>\n  </ng-container>\n\n  <ng-template #list>\n    <ng-container *ngIf=\"!hostRef.error; else errorState\">\n      <ng-container *ngIf=\"hostRef.checksList?.length; else emptyState\">\n        <div class=\"bb-block bb-block--md\">\n          <bb-stop-checks-list\n            [checks]=\"hostRef.checksList\"\n            (checkItemClick)=\"hostRef.onCheckItemClick($event)\"\n          ></bb-stop-checks-list>\n        </div>\n\n        <div data-role=\"paging-method-wrapper\">\n          <ng-container\n            *ngIf=\"\n              hostRef.isPagination(paginationConfig.paginationType);\n              else loadMore\n            \"\n          >\n            <bb-pagination-ui\n              *ngIf=\"!isLoading\"\n              [page]=\"paginationConfig.currentPage\"\n              [maxNavPages]=\"paginationConfig.maxNavPages\"\n              [totalItems]=\"paginationConfig.totalItems\"\n              [itemsPerPage]=\"paginationConfig.size\"\n              (pageChange)=\"hostRef.onPageChange($event)\"\n            ></bb-pagination-ui>\n          </ng-container>\n\n          <ng-template #loadMore>\n            <bb-load-button-ui\n              class=\"bb-pagination\"\n              color=\"secondary\"\n              i18n=\"\n                Load more payment orders|Load more button for loading more\n                payment orders@@manage-payments-list.load.more\"\n              [isLoading]=\"isLoading\"\n              [size]=\"paginationConfig.size\"\n              [from]=\"paginationConfig.currentPage\"\n              [totalCount]=\"paginationConfig.totalItems\"\n              (paramChange)=\"hostRef.onLoadMore($event)\"\n            >\n              Load more\n            </bb-load-button-ui>\n          </ng-template>\n        </div>\n      </ng-container>\n    </ng-container>\n  </ng-template>\n\n  <ng-template #loading>\n    <bb-loading-indicator-ui\n      i18n-text=\"@@manage-stop-checks.loading.text\"\n      text=\"Loading data...\"\n    >\n    </bb-loading-indicator-ui>\n  </ng-template>\n\n  <ng-template #emptyState>\n    <bb-empty-stop-checks-list></bb-empty-stop-checks-list>\n  </ng-template>\n\n  <ng-template #errorState>\n    <div class=\"bb-stop-checks-error__container\">\n      <bb-empty-state-ui\n        data-role=\"stop-checks-list-error-state\"\n        i18n-title=\"@@manage-stop-checks.error.generic.title\"\n        title=\"Page couldn't be load!\"\n        i18n-subtitle=\"@@manage-stop-checks.error.generic.subtitle\"\n        subtitle=\"Try to reload the page or contact the system administrator.\"\n        iconSize=\"xxl\"\n        iconModifier=\"error\"\n      ></bb-empty-state-ui>\n    </div>\n  </ng-template>\n\n  <bb-stop-checks-details\n    [isOpen]=\"hostRef.openDetails\"\n    (close)=\"hostRef.onCloseDetails()\"\n    [check]=\"hostRef.selectedCheck\"\n  ></bb-stop-checks-details>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i4.StopChecksListComponent; }), selector: "bb-stop-checks-list", inputs: ["checks"], outputs: ["checkItemClick"] }, { type: i0.forwardRef(function () { return i5.PaginatorComponent; }), selector: "bb-pagination-ui", inputs: ["page", "boundaryLinks", "directionLinks", "totalItems", "itemsPerPage", "maxNavPages"], outputs: ["pageChange"] }, { type: i0.forwardRef(function () { return i6.LoadButtonComponent; }), selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }, { type: i0.forwardRef(function () { return i7.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i0.forwardRef(function () { return i8.StopChecksEmptyListComponent; }), selector: "bb-empty-stop-checks-list", inputs: ["isSearch"] }, { type: i0.forwardRef(function () { return i9.EmptyStateComponent; }), selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }, { type: i0.forwardRef(function () { return i10.StopChecksDetailsComponent; }), selector: "bb-stop-checks-details", inputs: ["isOpen", "check"], outputs: ["close"] }], directives: [{ type: i0.forwardRef(function () { return StopChecksListContainerCustomizableDirective; }), selector: "[bbStopChecksListContainerCustomizableDirective]" }, { type: i0.forwardRef(function () { return i11.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i11.NgTemplateOutlet; }), selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], pipes: { "async": i0.forwardRef(function () { return i11.AsyncPipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StopChecksListContainerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-stop-checks-list-container',
                    templateUrl: 'stop-checks-list-container.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.StopChecksListCommunicationService, decorators: [{
                    type: Optional
                }] }, { type: i2.ItemModel, decorators: [{
                    type: Optional
                }] }, { type: i3.StopChecksListService }]; } });
export class StopChecksListContainerCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ StopChecksListContainerCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StopChecksListContainerCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ StopChecksListContainerCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: StopChecksListContainerCustomizableDirective, selector: "[bbStopChecksListContainerCustomizableDirective]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StopChecksListContainerCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbStopChecksListContainerCustomizableDirective]',
                }]
        }] });
//# sourceMappingURL=stop-checks-list-container.component.js.map