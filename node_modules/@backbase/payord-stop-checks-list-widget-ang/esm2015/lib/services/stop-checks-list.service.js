import { Injectable } from '@angular/core';
import { BehaviorSubject, combineLatest, EMPTY, Subject, } from 'rxjs';
import { catchError, map, scan, shareReplay, startWith, switchMap, tap, withLatestFrom, } from 'rxjs/operators';
import { StopChecksListPropertiesService } from './stop-checks-list-properties.service';
import { StopChecksHttpService, } from '@backbase/data-ang/stop-checks';
import { fromResponse, LoadMoreMethod, } from '@backbase/payment-orders-ang';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/data-ang/stop-checks";
import * as i2 from "./stop-checks-list-properties.service";
export class StopChecksListService {
    constructor(stopChecksDataHttpService, preferences) {
        this.stopChecksDataHttpService = stopChecksDataHttpService;
        this.preferences = preferences;
        this.currentPage$ = new BehaviorSubject(0);
        this.params$ = combineLatest([
            this.currentPage$,
            this.preferences.pageSize$,
        ]).pipe(map(([currentPage, size]) => {
            const from = currentPage * size;
            return { from, size };
        }));
        this.stopChecksData$ = this.params$.pipe(tap(() => this.loading$.next(true)), switchMap((config) => this.getStopChecks(config).pipe(catchError((error) => {
            this.error$.next(error);
            this.loading$.next(false);
            return EMPTY;
        }), tap(() => {
            this.loading$.next(false);
        }))), shareReplay({ bufferSize: 1, refCount: true }));
        this.totalItems$ = this.stopChecksData$.pipe(map((res) => res.totalStopChecks));
        this.error$ = new Subject();
        this.loading$ = new BehaviorSubject(true);
        this.getData$ = this.stopChecksData$.pipe(map((res) => res.stopChecks), withLatestFrom(this.preferences.paginationType$), scan((acc, [data, paginationType]) => {
            if (paginationType !== LoadMoreMethod.PAGINATION) {
                return acc.concat(data);
            }
            return data;
        }, []));
        this.paginationConfig$ = combineLatest([
            this.currentPage$,
            this.totalItems$.pipe(startWith(undefined)),
            this.preferences.maxNavPages$,
            this.preferences.pageSize$,
            this.preferences.paginationType$,
        ]).pipe(map(([currentPage, totalItems, maxNavPages, size, paginationType]) => ({
            currentPage,
            totalItems,
            maxNavPages,
            size,
            paginationType,
        })));
    }
    getStopChecks(params) {
        return this.stopChecksDataHttpService
            .getStopChecks(params, 'response')
            .pipe(map(fromResponse));
    }
    loadMore(page) {
        this.currentPage$.next(page);
    }
}
/** @nocollapse */ StopChecksListService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StopChecksListService, deps: [{ token: i1.StopChecksHttpService }, { token: i2.StopChecksListPropertiesService }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ StopChecksListService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StopChecksListService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StopChecksListService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.StopChecksHttpService }, { type: i2.StopChecksListPropertiesService }]; } });
//# sourceMappingURL=stop-checks-list.service.js.map