import { Injectable, Optional } from '@angular/core';
import { BehaviorSubject, combineLatest, of } from 'rxjs';
import { ItemModel } from '@backbase/foundation-ang/core';
import { map } from 'rxjs/operators';
import { defaultChecksParams } from '../helpers/constants';
import { toInteger } from '@backbase/payment-orders-ang';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/foundation-ang/core";
export class StopChecksListPropertiesService {
    constructor(itemModel) {
        this.itemModel = itemModel;
        this.pageSizeSubject$ = new BehaviorSubject(undefined);
        this.maxNavPagesSubject$ = new BehaviorSubject(undefined);
        this.paginationTypeSubject$ = new BehaviorSubject(undefined);
        this.pageSize$ = combineLatest([
            this.pageSizeSubject$,
            this.pageSizeIM,
        ]).pipe(map(([value, valueIM]) => value !== null && value !== void 0 ? value : valueIM));
        this.maxNavPages$ = combineLatest([
            this.maxNavPagesSubject$,
            this.maxNavPagesIM,
        ]).pipe(map(([value, valueIM]) => value !== null && value !== void 0 ? value : valueIM));
        this.paginationType$ = combineLatest([
            this.paginationTypeSubject$,
            this.paginationTypeIM,
        ]).pipe(map(([value, valueIM]) => value !== null && value !== void 0 ? value : valueIM));
    }
    get pageSizeIM() {
        var _a;
        return (((_a = this.itemModel) === null || _a === void 0 ? void 0 : _a.property('pageSize', defaultChecksParams.size).pipe(map(toInteger))) || of(defaultChecksParams.size));
    }
    get maxNavPagesIM() {
        var _a;
        return (((_a = this.itemModel) === null || _a === void 0 ? void 0 : _a.property('maxNavPages', defaultChecksParams.maxNavPages).pipe(map(toInteger))) || of(defaultChecksParams.maxNavPages));
    }
    get paginationTypeIM() {
        var _a;
        return (((_a = this.itemModel) === null || _a === void 0 ? void 0 : _a.property('paginationType', defaultChecksParams.paginationType)) || of(defaultChecksParams.paginationType));
    }
    setPageSize(value) {
        this.pageSizeSubject$.next(value);
    }
    setMaxNavPages(value) {
        this.maxNavPagesSubject$.next(value);
    }
    setPaginationType(value) {
        this.paginationTypeSubject$.next(value);
    }
}
/** @nocollapse */ StopChecksListPropertiesService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StopChecksListPropertiesService, deps: [{ token: i1.ItemModel, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ StopChecksListPropertiesService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StopChecksListPropertiesService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StopChecksListPropertiesService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.ItemModel, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=stop-checks-list-properties.service.js.map