import * as i0 from '@angular/core';
import { Injectable, Optional, EventEmitter, Component, ChangeDetectionStrategy, Input, Output, Directive, NgModule } from '@angular/core';
import * as i3 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i1 from '@backbase/foundation-ang/core';
import { BbTemplate, BackbaseCoreModule } from '@backbase/foundation-ang/core';
import * as i1$2 from '@backbase/payment-orders-ang';
import { LoadMoreMethod, toInteger, fromResponse, PaymentOrdersUiModule } from '@backbase/payment-orders-ang';
import { BehaviorSubject, combineLatest, of, EMPTY, Subject } from 'rxjs';
import { map, tap, switchMap, catchError, shareReplay, withLatestFrom, scan, startWith, takeUntil } from 'rxjs/operators';
import * as i1$1 from '@backbase/data-ang/stop-checks';
import * as i2 from '@backbase/ui-ang/table';
import { TableModule } from '@backbase/ui-ang/table';
import * as i5$1 from '@backbase/ui-ang/pagination';
import { PaginationModule } from '@backbase/ui-ang/pagination';
import * as i6$1 from '@backbase/ui-ang/load-button';
import { LoadButtonModule } from '@backbase/ui-ang/load-button';
import * as i6 from '@backbase/ui-ang/loading-indicator';
import { LoadingIndicatorModule } from '@backbase/ui-ang/loading-indicator';
import * as i1$3 from '@backbase/ui-ang/empty-state';
import { EmptyStateModule } from '@backbase/ui-ang/empty-state';
import * as i1$4 from '@backbase/ui-ang/modal';
import { ModalModule } from '@backbase/ui-ang/modal';
import * as i2$1 from '@backbase/ui-ang/header';
import { HeaderModule } from '@backbase/ui-ang/header';
import * as i4 from '@backbase/ui-ang/icon';
import { IconModule } from '@backbase/ui-ang/icon';
import * as i5 from '@backbase/ui-ang/amount';
import { AmountModule } from '@backbase/ui-ang/amount';
import * as i8 from '@backbase/ui-ang/button';
import { ButtonModule } from '@backbase/ui-ang/button';
import { BadgeModule } from '@backbase/ui-ang/badge';
import { ErrorCommonStateModule } from '@backbase/ui-ang/common-error-state';
import { TooltipModule } from '@backbase/ui-ang/tooltip-directive';

const defaultChecksParams = {
    size: 50,
    paginationType: LoadMoreMethod.PAGINATION,
    maxNavPages: 3,
    currentPage: 0,
};

class StopChecksListPropertiesService {
    constructor(itemModel) {
        this.itemModel = itemModel;
        this.pageSizeSubject$ = new BehaviorSubject(undefined);
        this.maxNavPagesSubject$ = new BehaviorSubject(undefined);
        this.paginationTypeSubject$ = new BehaviorSubject(undefined);
        this.pageSize$ = combineLatest([
            this.pageSizeSubject$,
            this.pageSizeIM,
        ]).pipe(map(([value, valueIM]) => value !== null && value !== void 0 ? value : valueIM));
        this.maxNavPages$ = combineLatest([
            this.maxNavPagesSubject$,
            this.maxNavPagesIM,
        ]).pipe(map(([value, valueIM]) => value !== null && value !== void 0 ? value : valueIM));
        this.paginationType$ = combineLatest([
            this.paginationTypeSubject$,
            this.paginationTypeIM,
        ]).pipe(map(([value, valueIM]) => value !== null && value !== void 0 ? value : valueIM));
    }
    get pageSizeIM() {
        var _a;
        return (((_a = this.itemModel) === null || _a === void 0 ? void 0 : _a.property('pageSize', defaultChecksParams.size).pipe(map(toInteger))) || of(defaultChecksParams.size));
    }
    get maxNavPagesIM() {
        var _a;
        return (((_a = this.itemModel) === null || _a === void 0 ? void 0 : _a.property('maxNavPages', defaultChecksParams.maxNavPages).pipe(map(toInteger))) || of(defaultChecksParams.maxNavPages));
    }
    get paginationTypeIM() {
        var _a;
        return (((_a = this.itemModel) === null || _a === void 0 ? void 0 : _a.property('paginationType', defaultChecksParams.paginationType)) || of(defaultChecksParams.paginationType));
    }
    setPageSize(value) {
        this.pageSizeSubject$.next(value);
    }
    setMaxNavPages(value) {
        this.maxNavPagesSubject$.next(value);
    }
    setPaginationType(value) {
        this.paginationTypeSubject$.next(value);
    }
}
/** @nocollapse */ StopChecksListPropertiesService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StopChecksListPropertiesService, deps: [{ token: i1.ItemModel, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ StopChecksListPropertiesService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StopChecksListPropertiesService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StopChecksListPropertiesService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.ItemModel, decorators: [{
                    type: Optional
                }] }]; } });

class StopChecksListService {
    constructor(stopChecksDataHttpService, preferences) {
        this.stopChecksDataHttpService = stopChecksDataHttpService;
        this.preferences = preferences;
        this.currentPage$ = new BehaviorSubject(0);
        this.params$ = combineLatest([
            this.currentPage$,
            this.preferences.pageSize$,
        ]).pipe(map(([currentPage, size]) => {
            const from = currentPage * size;
            return { from, size };
        }));
        this.stopChecksData$ = this.params$.pipe(tap(() => this.loading$.next(true)), switchMap((config) => this.getStopChecks(config).pipe(catchError((error) => {
            this.error$.next(error);
            this.loading$.next(false);
            return EMPTY;
        }), tap(() => {
            this.loading$.next(false);
        }))), shareReplay({ bufferSize: 1, refCount: true }));
        this.totalItems$ = this.stopChecksData$.pipe(map((res) => res.totalStopChecks));
        this.error$ = new Subject();
        this.loading$ = new BehaviorSubject(true);
        this.getData$ = this.stopChecksData$.pipe(map((res) => res.stopChecks), withLatestFrom(this.preferences.paginationType$), scan((acc, [data, paginationType]) => {
            if (paginationType !== LoadMoreMethod.PAGINATION) {
                return acc.concat(data);
            }
            return data;
        }, []));
        this.paginationConfig$ = combineLatest([
            this.currentPage$,
            this.totalItems$.pipe(startWith(undefined)),
            this.preferences.maxNavPages$,
            this.preferences.pageSize$,
            this.preferences.paginationType$,
        ]).pipe(map(([currentPage, totalItems, maxNavPages, size, paginationType]) => ({
            currentPage,
            totalItems,
            maxNavPages,
            size,
            paginationType,
        })));
    }
    getStopChecks(params) {
        return this.stopChecksDataHttpService
            .getStopChecks(params, 'response')
            .pipe(map(fromResponse));
    }
    loadMore(page) {
        this.currentPage$.next(page);
    }
}
/** @nocollapse */ StopChecksListService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StopChecksListService, deps: [{ token: i1$1.StopChecksHttpService }, { token: StopChecksListPropertiesService }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ StopChecksListService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StopChecksListService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StopChecksListService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1$1.StopChecksHttpService }, { type: StopChecksListPropertiesService }]; } });

class StopChecksListCommunicationService {
    constructor() {
        this.refreshListSub = new Subject();
        this.refreshList$ = this.refreshListSub.asObservable();
    }
}

class StopChecksListComponent {
    constructor() {
        /**
         * Reference to instance of customizable component.
         */
        this.hostRef = this;
        /**
         * Changes will be triggered on paymentItemClick event emit.
         */
        this.checkItemClick = new EventEmitter();
    }
    onPaymentItemClick(checkItem) {
        if (checkItem) {
            this.checkItemClick.emit(checkItem);
        }
    }
}
/** @nocollapse */ StopChecksListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StopChecksListComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ StopChecksListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: StopChecksListComponent, selector: "bb-stop-checks-list", inputs: { checks: "checks" }, outputs: { checkItemClick: "checkItemClick" }, ngImport: i0, template: "<ng-container\n  bbStopChecksListCustomizableDirective\n  [bbHostRef]=\"hostRef\"\n></ng-container>\n<ng-template bbStopChecksListCustomizableDirective let-hostRef>\n  <div class=\"table-responsive\">\n    <table\n      class=\"table table-hover bb-table bb-block--no-margin\"\n      [bbTable]=\"hostRef.checks\"\n      bbTableFocus\n    >\n      <thead>\n        <tr>\n          <th data-role=\"stop-checks-header-account\" scope=\"col\">\n            <span i18n=\"@@stop-checks.header.account\"> Check account </span>\n          </th>\n          <th data-role=\"stop-checks-header-check-numbers\" scope=\"col\">\n            <span i18n=\"@@stop-checks.header.numbers\"> Check number(s) </span>\n          </th>\n          <th data-role=\"stop-checks-header-check-submitted-date\" scope=\"col\">\n            <span i18n=\"@@stop-checks.header.date.submitted\">\n              Date submitted\n            </span>\n          </th>\n          <th\n            scope=\"col\"\n            data-role=\"stop-checks-header-check-expiry-date\"\n            i18n=\"@@stop-checks.header.expiry.date\"\n          >\n            <span>Expiry date</span>\n          </th>\n          <th\n            scope=\"col\"\n            data-role=\"stop-checks-header-status\"\n            i18n=\"@@stop-checks.header.status\"\n          >\n            <span>Status</span>\n          </th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr\n          *ngFor=\"let check of hostRef.checks\"\n          data-role=\"stop-checks-row\"\n          [ngClass]=\"{ 'text-muted': check.status.toUpperCase() === 'EXPIRED' }\"\n          (keydown.enter)=\"hostRef.onPaymentItemClick(check)\"\n          (keydown.space)=\"hostRef.onPaymentItemClick(check)\"\n          (click)=\"hostRef.onPaymentItemClick(check)\"\n          tabindex=\"0\"\n        >\n          <td class=\"d-none d-md-table-cell\">\n            <div data-role=\"stop-check-originator-account-name\">\n              {{ check.originatorAccount.name }}\n            </div>\n            <div\n              class=\"bb-text-support\"\n              data-role=\"stop-check-originator-account-number\"\n            >\n              {{ check.originatorAccount.identification }}\n            </div>\n          </td>\n          <td>\n            <div class=\"d-block d-md-none bb-block--sm\"></div>\n            <div class=\"d-block d-md-none bb-block--sm\">\n              <bb-payord-status-badge\n                [status]=\"check.status\"\n              ></bb-payord-status-badge>\n            </div>\n\n            <div class=\"d-block d-md-none\">\n              <div class=\"bb-block--sm\">\n                <div\n                  class=\"bb-text-bold\"\n                  i18n=\"@@stop-checks.header.small.account\"\n                >\n                  Check account\n                </div>\n                <div data-role=\"stop-check-originator-account-name\">\n                  {{ check.originatorAccount.name }}\n                </div>\n                <div\n                  class=\"bb-text-support\"\n                  data-role=\"stop-check-originator-account-number\"\n                >\n                  {{ check.originatorAccount.identification }}\n                </div>\n              </div>\n\n              <div class=\"bb-block--sm\">\n                <div\n                  class=\"bb-text-bold\"\n                  i18n=\"@@stop-checks.header.small.numbers\"\n                >\n                  Check number\n                </div>\n                <ng-container *ngIf=\"check.check\">{{\n                  check.check.number\n                }}</ng-container>\n                <ng-container *ngIf=\"check.checkNumberRange\">\n                  {{ check.checkNumberRange.firstNumber }}\n                  <span i18n=\"@@stop-checks.table.label.to\">to</span>\n                  {{ check.checkNumberRange.lastNumber }}\n                </ng-container>\n              </div>\n\n              <div class=\"row\">\n                <div class=\"col-6\">\n                  <div\n                    class=\"bb-text-bold\"\n                    i18n=\"@@stop-checks.header.small.date.submitted\"\n                  >\n                    Date submitted\n                  </div>\n                  <div>{{ check.dateOfRequest | date: 'MM/dd/y' }}</div>\n                </div>\n                <div class=\"col-6\">\n                  <div\n                    class=\"bb-text-bold\"\n                    i18n=\"@@stop-checks.header.small.date.expired\"\n                  >\n                    Date expired\n                  </div>\n                  <div *ngIf=\"check.expirationDate; else noValue\">\n                    {{ check.expirationDate | date: 'MM/dd/y' }}\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div class=\"d-none d-md-block\">\n              <ng-container *ngIf=\"check.check\">{{\n                check.check.number\n              }}</ng-container>\n              <ng-container *ngIf=\"check.checkNumberRange\">\n                {{ check.checkNumberRange.firstNumber }}\n                <span i18n=\"@@stop-checks.table.label.to\">to</span>\n                {{ check.checkNumberRange.lastNumber }}\n              </ng-container>\n            </div>\n          </td>\n          <td class=\"d-none d-md-table-cell\" data-role=\"stop-check-col-date\">\n            {{ check.dateOfRequest | date: 'MM/dd/y' }}\n          </td>\n          <td class=\"d-none d-md-table-cell\" data-role=\"stop-check-col-date\">\n            <span *ngIf=\"check.expirationDate; else noValue\">{{\n              check.expirationDate | date: 'MM/dd/y'\n            }}</span>\n          </td>\n          <td class=\"d-none d-md-table-cell\" data-role=\"stop-check-col-status\">\n            <bb-payord-status-badge\n              [status]=\"check.status\"\n            ></bb-payord-status-badge>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n</ng-template>\n\n<ng-template #noValue>-</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i1$2.PayordStatusBadgeComponent; }), selector: "bb-payord-status-badge", inputs: ["status", "statusColorMap", "statusColorDefault", "showAbbreviated"] }], directives: [{ type: i0.forwardRef(function () { return StopChecksListCustomizableDirective; }), selector: "[bbStopChecksListCustomizableDirective]" }, { type: i0.forwardRef(function () { return i2.TableDirective; }), selector: "table[bbTable]", inputs: ["bbTable"], outputs: ["selectRow", "rowClick", "sort"] }, { type: i0.forwardRef(function () { return i2.TableFocusDirective; }), selector: "[bbTableFocus]", inputs: ["focusFirstRowOnChanges"] }, { type: i0.forwardRef(function () { return i3.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i0.forwardRef(function () { return i3.NgClass; }), selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i0.forwardRef(function () { return i3.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "date": i0.forwardRef(function () { return i3.DatePipe; }) }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StopChecksListComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-stop-checks-list',
                    templateUrl: './stop-checks-list.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { checks: [{
                type: Input
            }], checkItemClick: [{
                type: Output
            }] } });
class StopChecksListCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ StopChecksListCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StopChecksListCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ StopChecksListCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: StopChecksListCustomizableDirective, selector: "[bbStopChecksListCustomizableDirective]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StopChecksListCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbStopChecksListCustomizableDirective]',
                }]
        }] });

class StopChecksEmptyListComponent {
    constructor() {
        /**
         * Reference to instance of customizable component.
         */
        this.hostRef = this;
        /**
         * Indicates if empty result caused by user search
         * Default value is false
         */
        this.isSearch = false;
    }
}
/** @nocollapse */ StopChecksEmptyListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StopChecksEmptyListComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ StopChecksEmptyListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: StopChecksEmptyListComponent, selector: "bb-empty-stop-checks-list", inputs: { isSearch: "isSearch" }, ngImport: i0, template: `
    <ng-container
      bbStopChecksEmptyListCustomizableDirective
      [bbHostRef]="hostRef"
    >
    </ng-container>
    <ng-template bbStopChecksEmptyListCustomizableDirective let-hostRef>
      <div class="bb-state-container">
        <bb-empty-state-ui
          *ngIf="!hostRef.isSearch"
          title="No stop check requests"
          i18n-title="@@stop-checks.no.stop.checks.title"
          subtitle="A stop check payment alerts us that you want to prevent a check you have written from being cashed."
          i18n-subtitle="@@stop-checks.no.stop.checks.subTitle"
          iconSize="xl"
          iconModifier="payments"
        ></bb-empty-state-ui>
      </div>
    </ng-template>
  `, isInline: true, components: [{ type: i0.forwardRef(function () { return i1$3.EmptyStateComponent; }), selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i0.forwardRef(function () { return StopChecksEmptyListCustomizableDirective; }), selector: "[bbStopChecksEmptyListCustomizableDirective]" }, { type: i0.forwardRef(function () { return i3.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StopChecksEmptyListComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-empty-stop-checks-list',
                    template: `
    <ng-container
      bbStopChecksEmptyListCustomizableDirective
      [bbHostRef]="hostRef"
    >
    </ng-container>
    <ng-template bbStopChecksEmptyListCustomizableDirective let-hostRef>
      <div class="bb-state-container">
        <bb-empty-state-ui
          *ngIf="!hostRef.isSearch"
          title="No stop check requests"
          i18n-title="@@stop-checks.no.stop.checks.title"
          subtitle="A stop check payment alerts us that you want to prevent a check you have written from being cashed."
          i18n-subtitle="@@stop-checks.no.stop.checks.subTitle"
          iconSize="xl"
          iconModifier="payments"
        ></bb-empty-state-ui>
      </div>
    </ng-template>
  `,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { isSearch: [{
                type: Input
            }] } });
class StopChecksEmptyListCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ StopChecksEmptyListCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StopChecksEmptyListCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ StopChecksEmptyListCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: StopChecksEmptyListCustomizableDirective, selector: "[bbStopChecksEmptyListCustomizableDirective]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StopChecksEmptyListCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbStopChecksEmptyListCustomizableDirective]',
                }]
        }] });

class StopChecksDetailsComponent {
    constructor() {
        /**
         * Reference to instance of customizable component.
         */
        this.hostRef = this;
        /**
         * Indicator for details dialog open state.
         * Default value is `false`.
         */
        this.isOpen = false;
        /**
         * Changes will be trigged on close event emit.
         */
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.close = new EventEmitter();
    }
    onClose() {
        this.isOpen = false;
        this.close.emit();
    }
    onPrint() {
        window.print();
    }
}
/** @nocollapse */ StopChecksDetailsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StopChecksDetailsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ StopChecksDetailsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: StopChecksDetailsComponent, selector: "bb-stop-checks-details", inputs: { isOpen: "isOpen", check: "check" }, outputs: { close: "close" }, ngImport: i0, template: "<ng-container\n  bbStopChecksDetailsCustomizableDirective\n  [bbHostRef]=\"hostRef\"\n></ng-container>\n<ng-template bbStopChecksDetailsCustomizableDirective let-hostRef>\n  <bb-modal-ui\n    [isOpen]=\"hostRef.isOpen\"\n    (cancel)=\"hostRef.onClose()\"\n    (confirm)=\"hostRef.onClose()\"\n  >\n    <ng-container *ngIf=\"hostRef.check; else loading\">\n      <bb-modal-header-ui>\n        <ng-template bbCustomModalHeader>\n          <div class=\"bb-stack\" data-role=\"stop-checks-details-header\">\n            <div class=\"bb-stack__item\">\n              <bb-header-ui\n                headingType=\"h2\"\n                heading=\"Stop check request\"\n                i18n-heading=\"@@stop-checks.details.header.title\"\n              ></bb-header-ui>\n              <bb-payord-status-badge\n                [status]=\"hostRef.check.status\"\n              ></bb-payord-status-badge>\n              <span class=\"text-small bb-text-support\">\n                <span i18n=\"@@stop-checks.details.submitted.on\">\n                  Submitted on\n                </span>\n                <span>{{ hostRef.check.dateOfRequest | date: 'MM/dd/y' }}</span>\n              </span>\n            </div>\n\n            <div\n              class=\"bb-stack__item bb-stack__item--push-right bb-stack__item--align-top d-print-none\"\n            >\n              <div class=\"bb-stack\">\n                <div class=\"bb-stack__item\">\n                  <button\n                    bbButton\n                    [circle]=\"true\"\n                    buttonSize=\"sm\"\n                    color=\"link-dark\"\n                    (click)=\"hostRef.onPrint()\"\n                    (keydown.enter)=\"hostRef.onPrint()\"\n                    type=\"button\"\n                    aria-label=\"Print stop check detail dialog\"\n                    data-role=\"print-stop-checks-details-modal\"\n                    i18n-aria-label=\"@@stop-checks.check.header.print\"\n                  >\n                    <bb-icon-ui color=\"muted\" name=\"print\"></bb-icon-ui>\n                  </button>\n                </div>\n                <div class=\"bb-stack__item\">\n                  <button\n                    bbButton\n                    [circle]=\"true\"\n                    buttonSize=\"sm\"\n                    color=\"unstyled\"\n                    (click)=\"hostRef.onClose()\"\n                    (keydown.enter)=\"hostRef.onClose()\"\n                    aria-label=\"Close stop check detail dialog\"\n                    data-role=\"close-stop-checks-details-modal\"\n                    i18n-aria-label=\"@@stop-checks.stop-checks.header.close\"\n                  >\n                    <bb-icon-ui color=\"muted\" name=\"clear\"></bb-icon-ui>\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </ng-template>\n      </bb-modal-header-ui>\n\n      <bb-modal-body-ui>\n        <ng-template bbCustomModalBody>\n          <div class=\"bb-block--md\">\n            <bb-header-ui\n              headingType=\"h4\"\n              heading=\"Check details\"\n              i18n-heading=\"@@stop-checks.details.body.title\"\n            ></bb-header-ui>\n          </div>\n\n          <div class=\"bb-block--md\">\n            <div\n              class=\"bb-label bb-block--xs\"\n              i18n=\"@@stop-checks.details.body.account.label\"\n            >\n              Check Account\n            </div>\n            <div>{{ hostRef.check.originatorAccount.name }}</div>\n            <div class=\"bb-text-support\">\n              {{ hostRef.check.originatorAccount.identification }}\n            </div>\n          </div>\n\n          <ng-container *ngIf=\"hostRef.check.check; else numbersRange\">\n            <div class=\"bb-stack row break-word\">\n              <div\n                class=\"bb-stack__item col-12 bb-block--md\"\n                [ngClass]=\"{ 'col-md-6': hostRef.check.check.amount }\"\n              >\n                <div\n                  class=\"bb-label bb-block--xs\"\n                  i18n=\"@@stop-checks.details.body.check.number\"\n                >\n                  Check number\n                </div>\n                <div>{{ hostRef.check.check.number }}</div>\n              </div>\n              <div\n                *ngIf=\"hostRef.check.check.amount\"\n                class=\"bb-stack__item col-12 col-md-6 bb-block--md\"\n              >\n                <div\n                  class=\"bb-label bb-block--xs\"\n                  i18n=\"@@stop-checks.details.body.check.amount\"\n                >\n                  Check amount\n                </div>\n                <bb-amount-ui\n                  [amount]=\"hostRef.check.check.amount?.amount\"\n                  [currency]=\"hostRef.check.check.amount?.currencyCode\"\n                ></bb-amount-ui>\n              </div>\n            </div>\n\n            <div class=\"bb-stack row break-word\">\n              <div\n                *ngIf=\"hostRef.check.check.dateIssued\"\n                class=\"bb-stack__item col-12 bb-block--md\"\n                [ngClass]=\"{ 'col-md-6': hostRef.check.check.payeeName }\"\n              >\n                <div\n                  class=\"bb-label bb-block--xs\"\n                  i18n=\"@@stop-checks.details.body.check.date\"\n                >\n                  Check date\n                </div>\n                <div>\n                  {{ hostRef.check.check.dateIssued | date: 'MM/dd/y' }}\n                </div>\n              </div>\n              <div\n                *ngIf=\"hostRef.check.check.payeeName\"\n                class=\"bb-stack__item col-12 col-md-6 bb-block--md\"\n              >\n                <div\n                  class=\"bb-label bb-block--xs\"\n                  i18n=\"@@stop-checks.details.body.check.payee.name\"\n                >\n                  Payee name\n                </div>\n                <div>{{ hostRef.check.check.payeeName }}</div>\n              </div>\n            </div>\n          </ng-container>\n\n          <div class=\"bb-stack row break-word\">\n            <div\n              *ngIf=\"hostRef.check.reason\"\n              class=\"bb-stack__item\"\n              [ngClass]=\"{ 'col-md-6': hostRef.check.expirationDate }\"\n            >\n              <div\n                class=\"bb-label bb-block--xs\"\n                i18n=\"@@stop-checks.details.body.stop.reason\"\n              >\n                Stop reason\n              </div>\n              <div>{{ hostRef.check.reason }}</div>\n            </div>\n            <div class=\"d-md-none\">&nbsp;</div>\n            <div\n              *ngIf=\"hostRef.check.expirationDate\"\n              class=\"bb-stack__item col-md-6\"\n            >\n              <div\n                class=\"bb-label bb-block--xs\"\n                i18n=\"@@stop-checks.details.body.expiration.date\"\n              >\n                Stop expiration date\n              </div>\n              <div>{{ hostRef.check.expirationDate | date: 'MM/dd/y' }}</div>\n            </div>\n          </div>\n        </ng-template>\n      </bb-modal-body-ui>\n    </ng-container>\n\n    <ng-template #numbersRange>\n      <div class=\"bb-stack row break-word\">\n        <div class=\"bb-stack__item col-12 col-md-6 bb-block--md\">\n          <div\n            class=\"bb-label bb-block--xs\"\n            i18n=\"@@stop-checks.details.body.range.first.label\"\n          >\n            First check number\n          </div>\n          <div>{{ hostRef.check.checkNumberRange.firstNumber }}</div>\n        </div>\n        <div class=\"bb-stack__item col-12 col-md-6 bb-block--md\">\n          <div\n            class=\"bb-label bb-block--xs\"\n            i18n=\"@@stop-checks.details.body.range.last.label\"\n          >\n            Last check number\n          </div>\n          <div>{{ hostRef.check.checkNumberRange.lastNumber }}</div>\n        </div>\n      </div>\n    </ng-template>\n\n    <ng-template #loading>\n      <bb-loading-indicator-ui></bb-loading-indicator-ui>\n    </ng-template>\n  </bb-modal-ui>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i1$4.ModalComponent; }), selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i0.forwardRef(function () { return i1$4.ModalHeaderComponent; }), selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i0.forwardRef(function () { return i2$1.HeaderComponent; }), selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i0.forwardRef(function () { return i1$2.PayordStatusBadgeComponent; }), selector: "bb-payord-status-badge", inputs: ["status", "statusColorMap", "statusColorDefault", "showAbbreviated"] }, { type: i0.forwardRef(function () { return i4.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0.forwardRef(function () { return i1$4.ModalBodyComponent; }), selector: "bb-modal-body-ui" }, { type: i0.forwardRef(function () { return i5.AmountComponent; }), selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: i0.forwardRef(function () { return i6.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }], directives: [{ type: i0.forwardRef(function () { return StopChecksDetailsCustomizableDirective; }), selector: "[bbStopChecksDetailsCustomizableDirective]" }, { type: i0.forwardRef(function () { return i3.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i1$4.CustomModalHeaderDirective; }), selector: "ng-template[bbCustomModalHeader]" }, { type: i0.forwardRef(function () { return i8.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0.forwardRef(function () { return i1$4.CustomModalBodyDirective; }), selector: "ng-template[bbCustomModalBody]" }, { type: i0.forwardRef(function () { return i3.NgClass; }), selector: "[ngClass]", inputs: ["class", "ngClass"] }], pipes: { "date": i0.forwardRef(function () { return i3.DatePipe; }) }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StopChecksDetailsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-stop-checks-details',
                    templateUrl: './stop-checks-details.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { isOpen: [{
                type: Input
            }], check: [{
                type: Input
            }], close: [{
                type: Output
            }] } });
class StopChecksDetailsCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ StopChecksDetailsCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StopChecksDetailsCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ StopChecksDetailsCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: StopChecksDetailsCustomizableDirective, selector: "[bbStopChecksDetailsCustomizableDirective]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StopChecksDetailsCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbStopChecksDetailsCustomizableDirective]',
                }]
        }] });

class StopChecksListContainerComponent {
    constructor(communicationService, model, checkService) {
        var _a;
        this.communicationService = communicationService;
        this.model = model;
        this.checkService = checkService;
        this.destroyed$ = new Subject();
        /**
         * Reference to instance of customizable component.
         */
        this.hostRef = this;
        this.loading$ = this.checkService.loading$;
        this.paginationConfig$ = this.checkService.paginationConfig$;
        this.checksList$ = this.checkService.getData$;
        this.openDetails = false;
        (_a = this.communicationService) === null || _a === void 0 ? void 0 : _a.refreshList$.subscribe(() => this.checkService.loadMore(0));
        this.checkService.error$
            .pipe(takeUntil(this.destroyed$))
            .subscribe((val) => {
            this.error = val;
        });
        this.checksList$.pipe(takeUntil(this.destroyed$)).subscribe((res) => {
            this.checksList = res;
        });
    }
    ngOnDestroy() {
        this.destroyed$.next();
    }
    onCheckItemClick(selectedCheckItem) {
        this.openDetails = true;
        this.selectedCheck = selectedCheckItem;
    }
    onCloseDetails() {
        this.openDetails = false;
    }
    onPageChange(page) {
        this.checkService.loadMore(page++);
    }
    onLoadMore(params) {
        this.checkService.loadMore(params.from);
    }
    isPagination(paginationType) {
        return paginationType === LoadMoreMethod.PAGINATION;
    }
    showListLoading(isLoading, { paginationType, currentPage }) {
        const isFirstPage = currentPage === 0;
        return isLoading && (this.isPagination(paginationType) || isFirstPage);
    }
}
/** @nocollapse */ StopChecksListContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StopChecksListContainerComponent, deps: [{ token: StopChecksListCommunicationService, optional: true }, { token: i1.ItemModel, optional: true }, { token: StopChecksListService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ StopChecksListContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: StopChecksListContainerComponent, selector: "bb-stop-checks-list-container", ngImport: i0, template: "<ng-container\n  bbStopChecksListContainerCustomizableDirective\n  [bbTemplateContext]=\"{\n    isLoading: loading$ | async,\n    paginationConfig: paginationConfig$ | async\n  }\"\n  [bbHostRef]=\"hostRef\"\n></ng-container>\n\n<ng-template\n  bbStopChecksListContainerCustomizableDirective\n  let-hostRef\n  let-isLoading=\"context.isLoading\"\n  let-paginationConfig=\"context.paginationConfig\"\n>\n  <ng-container\n    *ngIf=\"hostRef.showListLoading(isLoading, paginationConfig); else list\"\n  >\n    <ng-container *ngTemplateOutlet=\"loading\"></ng-container>\n  </ng-container>\n\n  <ng-template #list>\n    <ng-container *ngIf=\"!hostRef.error; else errorState\">\n      <ng-container *ngIf=\"hostRef.checksList?.length; else emptyState\">\n        <div class=\"bb-block bb-block--md\">\n          <bb-stop-checks-list\n            [checks]=\"hostRef.checksList\"\n            (checkItemClick)=\"hostRef.onCheckItemClick($event)\"\n          ></bb-stop-checks-list>\n        </div>\n\n        <div data-role=\"paging-method-wrapper\">\n          <ng-container\n            *ngIf=\"\n              hostRef.isPagination(paginationConfig.paginationType);\n              else loadMore\n            \"\n          >\n            <bb-pagination-ui\n              *ngIf=\"!isLoading\"\n              [page]=\"paginationConfig.currentPage\"\n              [maxNavPages]=\"paginationConfig.maxNavPages\"\n              [totalItems]=\"paginationConfig.totalItems\"\n              [itemsPerPage]=\"paginationConfig.size\"\n              (pageChange)=\"hostRef.onPageChange($event)\"\n            ></bb-pagination-ui>\n          </ng-container>\n\n          <ng-template #loadMore>\n            <bb-load-button-ui\n              class=\"bb-pagination\"\n              color=\"secondary\"\n              i18n=\"\n                Load more payment orders|Load more button for loading more\n                payment orders@@manage-payments-list.load.more\"\n              [isLoading]=\"isLoading\"\n              [size]=\"paginationConfig.size\"\n              [from]=\"paginationConfig.currentPage\"\n              [totalCount]=\"paginationConfig.totalItems\"\n              (paramChange)=\"hostRef.onLoadMore($event)\"\n            >\n              Load more\n            </bb-load-button-ui>\n          </ng-template>\n        </div>\n      </ng-container>\n    </ng-container>\n  </ng-template>\n\n  <ng-template #loading>\n    <bb-loading-indicator-ui\n      i18n-text=\"@@manage-stop-checks.loading.text\"\n      text=\"Loading data...\"\n    >\n    </bb-loading-indicator-ui>\n  </ng-template>\n\n  <ng-template #emptyState>\n    <bb-empty-stop-checks-list></bb-empty-stop-checks-list>\n  </ng-template>\n\n  <ng-template #errorState>\n    <div class=\"bb-stop-checks-error__container\">\n      <bb-empty-state-ui\n        data-role=\"stop-checks-list-error-state\"\n        i18n-title=\"@@manage-stop-checks.error.generic.title\"\n        title=\"Page couldn't be load!\"\n        i18n-subtitle=\"@@manage-stop-checks.error.generic.subtitle\"\n        subtitle=\"Try to reload the page or contact the system administrator.\"\n        iconSize=\"xxl\"\n        iconModifier=\"error\"\n      ></bb-empty-state-ui>\n    </div>\n  </ng-template>\n\n  <bb-stop-checks-details\n    [isOpen]=\"hostRef.openDetails\"\n    (close)=\"hostRef.onCloseDetails()\"\n    [check]=\"hostRef.selectedCheck\"\n  ></bb-stop-checks-details>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return StopChecksListComponent; }), selector: "bb-stop-checks-list", inputs: ["checks"], outputs: ["checkItemClick"] }, { type: i0.forwardRef(function () { return i5$1.PaginatorComponent; }), selector: "bb-pagination-ui", inputs: ["page", "boundaryLinks", "directionLinks", "totalItems", "itemsPerPage", "maxNavPages"], outputs: ["pageChange"] }, { type: i0.forwardRef(function () { return i6$1.LoadButtonComponent; }), selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }, { type: i0.forwardRef(function () { return i6.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i0.forwardRef(function () { return StopChecksEmptyListComponent; }), selector: "bb-empty-stop-checks-list", inputs: ["isSearch"] }, { type: i0.forwardRef(function () { return i1$3.EmptyStateComponent; }), selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }, { type: i0.forwardRef(function () { return StopChecksDetailsComponent; }), selector: "bb-stop-checks-details", inputs: ["isOpen", "check"], outputs: ["close"] }], directives: [{ type: i0.forwardRef(function () { return StopChecksListContainerCustomizableDirective; }), selector: "[bbStopChecksListContainerCustomizableDirective]" }, { type: i0.forwardRef(function () { return i3.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i3.NgTemplateOutlet; }), selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], pipes: { "async": i0.forwardRef(function () { return i3.AsyncPipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StopChecksListContainerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-stop-checks-list-container',
                    templateUrl: 'stop-checks-list-container.component.html',
                }]
        }], ctorParameters: function () { return [{ type: StopChecksListCommunicationService, decorators: [{
                    type: Optional
                }] }, { type: i1.ItemModel, decorators: [{
                    type: Optional
                }] }, { type: StopChecksListService }]; } });
class StopChecksListContainerCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ StopChecksListContainerCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StopChecksListContainerCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ StopChecksListContainerCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: StopChecksListContainerCustomizableDirective, selector: "[bbStopChecksListContainerCustomizableDirective]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StopChecksListContainerCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbStopChecksListContainerCustomizableDirective]',
                }]
        }] });

class PayordStopChecksListWidgetAngComponent {
    constructor(preferences) {
        this.preferences = preferences;
    }
    /**
     * Number of payments per page
     */
    set pageSize(value) {
        this.preferences.setPageSize(value);
    }
    /**
     * Max. number of navigation pages
     */
    set maxNavPages(value) {
        this.preferences.setMaxNavPages(value);
    }
    /**
     * Number of payments per page
     */
    set paginationType(value) {
        this.preferences.setPaginationType(value);
    }
}
/** @nocollapse */ PayordStopChecksListWidgetAngComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordStopChecksListWidgetAngComponent, deps: [{ token: StopChecksListPropertiesService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PayordStopChecksListWidgetAngComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordStopChecksListWidgetAngComponent, selector: "bb-payord-stop-checks-list-widget-ang", inputs: { pageSize: "pageSize", maxNavPages: "maxNavPages", paginationType: "paginationType" }, providers: [StopChecksListService, StopChecksListPropertiesService], ngImport: i0, template: ` <bb-stop-checks-list-container></bb-stop-checks-list-container> `, isInline: true, components: [{ type: StopChecksListContainerComponent, selector: "bb-stop-checks-list-container" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordStopChecksListWidgetAngComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payord-stop-checks-list-widget-ang',
                    template: ` <bb-stop-checks-list-container></bb-stop-checks-list-container> `,
                    providers: [StopChecksListService, StopChecksListPropertiesService],
                }]
        }], ctorParameters: function () { return [{ type: StopChecksListPropertiesService }]; }, propDecorators: { pageSize: [{
                type: Input
            }], maxNavPages: [{
                type: Input
            }], paginationType: [{
                type: Input
            }] } });

const components = [
    PayordStopChecksListWidgetAngComponent,
    StopChecksListContainerComponent,
    StopChecksEmptyListComponent,
    StopChecksListComponent,
    StopChecksDetailsComponent,
];
const directives = [
    StopChecksListContainerCustomizableDirective,
    StopChecksEmptyListCustomizableDirective,
    StopChecksListCustomizableDirective,
    StopChecksDetailsCustomizableDirective,
];
const uiModules = [
    EmptyStateModule,
    ButtonModule,
    LoadingIndicatorModule,
    TableModule,
    BadgeModule,
    IconModule,
    ErrorCommonStateModule,
    AmountModule,
    TooltipModule,
    ModalModule,
    HeaderModule,
    PaginationModule,
    LoadButtonModule,
];
/**
 * Exports the UI components, directives and modules for the stop checks list widget
 */
class PayordStopChecksListWidgetAngModule {
}
/** @nocollapse */ PayordStopChecksListWidgetAngModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordStopChecksListWidgetAngModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ PayordStopChecksListWidgetAngModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordStopChecksListWidgetAngModule, declarations: [PayordStopChecksListWidgetAngComponent,
        StopChecksListContainerComponent,
        StopChecksEmptyListComponent,
        StopChecksListComponent,
        StopChecksDetailsComponent, StopChecksListContainerCustomizableDirective,
        StopChecksEmptyListCustomizableDirective,
        StopChecksListCustomizableDirective,
        StopChecksDetailsCustomizableDirective], imports: [CommonModule, i1.BackbaseCoreModule, PaymentOrdersUiModule, EmptyStateModule,
        ButtonModule,
        LoadingIndicatorModule,
        TableModule,
        BadgeModule,
        IconModule,
        ErrorCommonStateModule,
        AmountModule,
        TooltipModule,
        ModalModule,
        HeaderModule,
        PaginationModule,
        LoadButtonModule], exports: [PayordStopChecksListWidgetAngComponent,
        StopChecksListContainerComponent,
        StopChecksEmptyListComponent,
        StopChecksListComponent,
        StopChecksDetailsComponent, StopChecksListContainerCustomizableDirective,
        StopChecksEmptyListCustomizableDirective,
        StopChecksListCustomizableDirective,
        StopChecksDetailsCustomizableDirective, PaymentOrdersUiModule, EmptyStateModule,
        ButtonModule,
        LoadingIndicatorModule,
        TableModule,
        BadgeModule,
        IconModule,
        ErrorCommonStateModule,
        AmountModule,
        TooltipModule,
        ModalModule,
        HeaderModule,
        PaginationModule,
        LoadButtonModule] });
/** @nocollapse */ PayordStopChecksListWidgetAngModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordStopChecksListWidgetAngModule, imports: [[
            CommonModule,
            BackbaseCoreModule.withConfig({
                classMap: { PayordStopChecksListWidgetAngComponent },
            }),
            PaymentOrdersUiModule,
            ...uiModules,
        ], PaymentOrdersUiModule, EmptyStateModule,
        ButtonModule,
        LoadingIndicatorModule,
        TableModule,
        BadgeModule,
        IconModule,
        ErrorCommonStateModule,
        AmountModule,
        TooltipModule,
        ModalModule,
        HeaderModule,
        PaginationModule,
        LoadButtonModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordStopChecksListWidgetAngModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        BackbaseCoreModule.withConfig({
                            classMap: { PayordStopChecksListWidgetAngComponent },
                        }),
                        PaymentOrdersUiModule,
                        ...uiModules,
                    ],
                    declarations: [...components, ...directives],
                    exports: [...components, ...directives, PaymentOrdersUiModule, ...uiModules],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { PayordStopChecksListWidgetAngComponent, PayordStopChecksListWidgetAngModule, StopChecksListCommunicationService, StopChecksDetailsComponent as ӨStopChecksDetailsComponent, StopChecksDetailsCustomizableDirective as ӨStopChecksDetailsCustomizableDirective, StopChecksEmptyListComponent as ӨStopChecksEmptyListComponent, StopChecksEmptyListCustomizableDirective as ӨStopChecksEmptyListCustomizableDirective, StopChecksListComponent as ӨStopChecksListComponent, StopChecksListContainerComponent as ӨStopChecksListContainerComponent, StopChecksListContainerCustomizableDirective as ӨStopChecksListContainerCustomizableDirective, StopChecksListCustomizableDirective as ӨStopChecksListCustomizableDirective };
//# sourceMappingURL=backbase-payord-stop-checks-list-widget-ang.js.map
