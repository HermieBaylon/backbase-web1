(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common/http'), require('@backbase/foundation-ang/data-http')) :
    typeof define === 'function' && define.amd ? define('@backbase/payment-order-options-http-ang', ['exports', '@angular/core', '@angular/common/http', '@backbase/foundation-ang/data-http'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["payment-order-options-http-ang"] = {}), global.ng.core, global.ng.common.http, global.i2));
})(this, (function (exports, i0, i1, i2) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);

    var ChargeBearer = {
        OUR: 'OUR',
        BEN: 'BEN',
        SHA: 'SHA'
    };

    var InstructionPriority = {
        NORM: 'NORM',
        HIGH: 'HIGH'
    };

    var SchemeName = {
        IBAN: 'IBAN',
        BBAN: 'BBAN',
        ID: 'ID',
        EXTERNALID: 'EXTERNAL_ID'
    };

    var TimeFrameUnit = {
        HOUR: 'HOUR',
        CALENDARDAY: 'CALENDAR_DAY',
        BUSINESSDAY: 'BUSINESS_DAY'
    };

    var PAYMENT_ORDER_OPTIONS_BASE_PATH = new i0.InjectionToken('PAYMENT_ORDER_OPTIONS_BASE_PATH');
    var COLLECTION_FORMATS = {
        'csv': ',',
        'tsv': '   ',
        'ssv': ' ',
        'pipes': '|'
    };

    var PaymentOrderOptionsConfiguration = /** @class */ (function () {
        function PaymentOrderOptionsConfiguration(configurationParameters) {
            if (configurationParameters === void 0) { configurationParameters = {}; }
            this.apiKeys = configurationParameters.apiKeys;
            this.username = configurationParameters.username;
            this.password = configurationParameters.password;
            this.accessToken = configurationParameters.accessToken;
            this.basePath = configurationParameters.basePath;
            this.withCredentials = configurationParameters.withCredentials;
            this.encoder = configurationParameters.encoder;
            if (configurationParameters.credentials) {
                this.credentials = configurationParameters.credentials;
            }
            else {
                this.credentials = {};
            }
        }
        PaymentOrderOptionsConfiguration.prototype.selectHeaderContentType = function (contentTypes) {
            var _this = this;
            if (contentTypes.length === 0) {
                return undefined;
            }
            var type = contentTypes.find(function (x) { return _this.isJsonMime(x); });
            if (type === undefined) {
                return contentTypes[0];
            }
            return type;
        };
        PaymentOrderOptionsConfiguration.prototype.selectHeaderAccept = function (accepts) {
            var _this = this;
            if (accepts.length === 0) {
                return undefined;
            }
            var type = accepts.find(function (x) { return _this.isJsonMime(x); });
            if (type === undefined) {
                return accepts[0];
            }
            return type;
        };
        PaymentOrderOptionsConfiguration.prototype.isJsonMime = function (mime) {
            var jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
            return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
        };
        PaymentOrderOptionsConfiguration.prototype.lookupCredential = function (key) {
            var value = this.credentials[key];
            return typeof value === 'function'
                ? value()
                : value;
        };
        return PaymentOrderOptionsConfiguration;
    }());
    var CONFIG_TOKEN = new i0.InjectionToken('api-data-module PaymentOrderOptionsConfiguration');

    var PaymentOrderOptionsApiModule = /** @class */ (function () {
        function PaymentOrderOptionsApiModule(parentModule, http, dataModulesManager, config) {
            if (parentModule) {
                throw new Error('PaymentOrderOptionsApiModule is already loaded. Import in your base AppModule only.');
            }
            if (!http) {
                throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                    'See also https://github.com/angular/angular/issues/20575');
            }
            if (dataModulesManager) {
                dataModulesManager.setModuleConfig(CONFIG_TOKEN, {
                    apiRoot: '',
                    servicePath: config.basePath || '',
                    headers: {},
                });
            }
        }
        PaymentOrderOptionsApiModule.forRoot = function (configurationFactory) {
            return {
                ngModule: PaymentOrderOptionsApiModule,
                providers: [{ provide: PaymentOrderOptionsConfiguration, useFactory: configurationFactory }]
            };
        };
        return PaymentOrderOptionsApiModule;
    }());
    PaymentOrderOptionsApiModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PaymentOrderOptionsApiModule, deps: [{ token: PaymentOrderOptionsApiModule, optional: true, skipSelf: true }, { token: i1__namespace.HttpClient, optional: true }, { token: i2__namespace.DataModulesManager, optional: true }, { token: PaymentOrderOptionsConfiguration }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    PaymentOrderOptionsApiModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PaymentOrderOptionsApiModule });
    PaymentOrderOptionsApiModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PaymentOrderOptionsApiModule, providers: [], imports: [[]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PaymentOrderOptionsApiModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [],
                        declarations: [],
                        exports: [],
                        providers: []
                    }]
            }], ctorParameters: function () {
            return [{ type: PaymentOrderOptionsApiModule, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.SkipSelf
                        }] }, { type: i1__namespace.HttpClient, decorators: [{
                            type: i0.Optional
                        }] }, { type: i2__namespace.DataModulesManager, decorators: [{
                            type: i0.Optional
                        }] }, { type: PaymentOrderOptionsConfiguration }];
        } });

    var CustomHttpParameterCodec = /** @class */ (function () {
        function CustomHttpParameterCodec() {
        }
        CustomHttpParameterCodec.prototype.encodeKey = function (k) {
            return encodeURIComponent(k);
        };
        CustomHttpParameterCodec.prototype.encodeValue = function (v) {
            return encodeURIComponent(v);
        };
        CustomHttpParameterCodec.prototype.decodeKey = function (k) {
            return decodeURIComponent(k);
        };
        CustomHttpParameterCodec.prototype.decodeValue = function (v) {
            return decodeURIComponent(v);
        };
        return CustomHttpParameterCodec;
    }());

    var PaymentOptionsHttpService = /** @class */ (function () {
        function PaymentOptionsHttpService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new PaymentOrderOptionsConfiguration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        PaymentOptionsHttpService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        PaymentOptionsHttpService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        PaymentOptionsHttpService.prototype.getPaymentOptionsByPaymentType = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _paymentType = requestParameters["paymentType"];
            if (_paymentType === null || _paymentType === undefined) {
                throw new Error('Required parameter paymentType was null or undefined when calling getPaymentOptionsByPaymentType.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v1/payment-options/" + encodeURIComponent(String(_paymentType)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        PaymentOptionsHttpService.prototype.getPaymentOptionsByPaymentTypeUrl = function (requestParameters) {
            var _paymentType = requestParameters["paymentType"];
            if (_paymentType === null || _paymentType === undefined) {
                throw new Error('Required parameter paymentType was null or undefined when calling getPaymentOptionsByPaymentType.');
            }
            return this.configuration.basePath + "/client-api/v1/payment-options/" + encodeURIComponent(String(_paymentType));
        };
        PaymentOptionsHttpService.prototype.postPaymentOptions = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _paymentOptionsRequest = requestParameters["paymentOptionsRequest"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v1/payment-options", _paymentOptionsRequest, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        PaymentOptionsHttpService.prototype.postPaymentOptionsUrl = function (requestParameters) {
            var _paymentOptionsRequest = requestParameters["paymentOptionsRequest"];
            return this.configuration.basePath + "/client-api/v1/payment-options";
        };
        return PaymentOptionsHttpService;
    }());
    PaymentOptionsHttpService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PaymentOptionsHttpService, deps: [{ token: i1__namespace.HttpClient }, { token: PAYMENT_ORDER_OPTIONS_BASE_PATH, optional: true }, { token: PaymentOrderOptionsConfiguration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    PaymentOptionsHttpService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PaymentOptionsHttpService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PaymentOptionsHttpService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [PAYMENT_ORDER_OPTIONS_BASE_PATH]
                        }] }, { type: PaymentOrderOptionsConfiguration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var PaymentOptionsHttpServiceGetPaymentOptionsByPaymentTypeMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v1/payment-options/{paymentType}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "paymentType": "US_FOREIGN_WIRE",
                        "canEditCounterparty": true,
                        "paymentOptions": [{
                                "instructionPriority": "NORM",
                                "transferFee": {
                                    "amount": "15.29",
                                    "currencyCode": "USD"
                                },
                                "chargeBearer": ["OUR", "SHA"],
                                "executionTimeFrame": {
                                    "unit": "BUSINESS_DAY",
                                    "max": 1
                                },
                                "cutOffTime": "16:00"
                            }, {
                                "instructionPriority": "HIGH",
                                "transferFee": {
                                    "amount": "20.00",
                                    "currencyCode": "USD"
                                },
                                "chargeBearer": ["OUR", "SHA"],
                                "executionTimeFrame": {
                                    "unit": "HOUR",
                                    "min": 1,
                                    "max": 2
                                },
                                "cutOffTime": "16:00"
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var PaymentOptionsHttpServicePostPaymentOptionsMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v1/payment-options",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {
                        "options": [{
                                "paymentType": "US_FOREIGN_WIRE",
                                "paymentOptions": [{
                                        "instructionPriority": "NORM",
                                        "transferFee": {
                                            "amount": "15.29",
                                            "currencyCode": "USD"
                                        },
                                        "chargeBearer": ["OUR", "SHA"],
                                        "executionTimeFrame": {
                                            "unit": "BUSINESS_DAY",
                                            "max": 1
                                        },
                                        "cutOffTime": "16:00"
                                    }, {
                                        "instructionPriority": "HIGH",
                                        "transferFee": {
                                            "amount": "20.00",
                                            "currencyCode": "USD"
                                        },
                                        "chargeBearer": ["OUR", "SHA"],
                                        "executionTimeFrame": {
                                            "unit": "HOUR",
                                            "min": 1,
                                            "max": 2
                                        },
                                        "cutOffTime": "16:00"
                                    }]
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
            ]
        }]);
    var PaymentOptionsHttpServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/client-api/v1/payment-options/{paymentType}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "paymentType": "US_FOREIGN_WIRE",
                        "canEditCounterparty": true,
                        "paymentOptions": [{
                                "instructionPriority": "NORM",
                                "transferFee": {
                                    "amount": "15.29",
                                    "currencyCode": "USD"
                                },
                                "chargeBearer": ["OUR", "SHA"],
                                "executionTimeFrame": {
                                    "unit": "BUSINESS_DAY",
                                    "max": 1
                                },
                                "cutOffTime": "16:00"
                            }, {
                                "instructionPriority": "HIGH",
                                "transferFee": {
                                    "amount": "20.00",
                                    "currencyCode": "USD"
                                },
                                "chargeBearer": ["OUR", "SHA"],
                                "executionTimeFrame": {
                                    "unit": "HOUR",
                                    "min": 1,
                                    "max": 2
                                },
                                "cutOffTime": "16:00"
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v1/payment-options",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {
                        "options": [{
                                "paymentType": "US_FOREIGN_WIRE",
                                "paymentOptions": [{
                                        "instructionPriority": "NORM",
                                        "transferFee": {
                                            "amount": "15.29",
                                            "currencyCode": "USD"
                                        },
                                        "chargeBearer": ["OUR", "SHA"],
                                        "executionTimeFrame": {
                                            "unit": "BUSINESS_DAY",
                                            "max": 1
                                        },
                                        "cutOffTime": "16:00"
                                    }, {
                                        "instructionPriority": "HIGH",
                                        "transferFee": {
                                            "amount": "20.00",
                                            "currencyCode": "USD"
                                        },
                                        "chargeBearer": ["OUR", "SHA"],
                                        "executionTimeFrame": {
                                            "unit": "HOUR",
                                            "min": 1,
                                            "max": 2
                                        },
                                        "cutOffTime": "16:00"
                                    }]
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
            ]
        },
    ]);

    var SanctionedCountriesHttpService = /** @class */ (function () {
        function SanctionedCountriesHttpService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new PaymentOrderOptionsConfiguration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        SanctionedCountriesHttpService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        SanctionedCountriesHttpService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        SanctionedCountriesHttpService.prototype.getSanctionedCountries = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _countryIso = requestParameters["countryIso"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_countryIso !== undefined && _countryIso !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _countryIso, 'countryIso');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v1/sanctioned-countries", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        SanctionedCountriesHttpService.prototype.getSanctionedCountriesUrl = function (requestParameters) {
            var _countryIso = requestParameters["countryIso"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_countryIso !== undefined && _countryIso !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _countryIso, 'countryIso');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v1/sanctioned-countries" + (queryString ? "?" + queryString : '');
        };
        return SanctionedCountriesHttpService;
    }());
    SanctionedCountriesHttpService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: SanctionedCountriesHttpService, deps: [{ token: i1__namespace.HttpClient }, { token: PAYMENT_ORDER_OPTIONS_BASE_PATH, optional: true }, { token: PaymentOrderOptionsConfiguration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    SanctionedCountriesHttpService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: SanctionedCountriesHttpService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: SanctionedCountriesHttpService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [PAYMENT_ORDER_OPTIONS_BASE_PATH]
                        }] }, { type: PaymentOrderOptionsConfiguration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var SanctionedCountriesHttpServiceGetSanctionedCountriesMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v1/sanctioned-countries",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "countries": [{
                                "country": "AE",
                                "inputFormSettings": [{
                                        "key": "account-number",
                                        "format": "IBAN",
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.counterpartyAccount.identification.identification",
                                        "regex": "/^[a-zA-Z0-9]{23}$/"
                                    }, {
                                        "key": "bank-code",
                                        "notApplicable": true,
                                        "apiField": "transferTransactionInformation.counterpartyBank.bankBranchCode"
                                    }, {
                                        "key": "currency",
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.instructedAmount.currencyCode",
                                        "values": ["AED", "EUR", "GBP", "USD"]
                                    }]
                            }, {
                                "country": "AU",
                                "inputFormSettings": [{
                                        "key": "account-number",
                                        "format": "BBAN",
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.counterpartyAccount.identification.identification"
                                    }, {
                                        "key": "bank-code",
                                        "label": {
                                            "bsb": "BSB code"
                                        },
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.counterpartyBank.bankBranchCode",
                                        "regex": "/^[0-9]{6}$/"
                                    }, {
                                        "key": "currency",
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.instructedAmount.currencyCode",
                                        "values": ["AUD", "EUR", "GBP", "USD"]
                                    }]
                            }, {
                                "country": "BR",
                                "inputFormSettings": [{
                                        "key": "account-number",
                                        "format": "IBAN",
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.counterpartyAccount.identification.identification",
                                        "regex": "/^[a-zA-Z0-9]{29}$/"
                                    }, {
                                        "key": "bank-code",
                                        "notApplicable": true,
                                        "apiField": "transferTransactionInformation.counterpartyBank.bankBranchCode"
                                    }, {
                                        "key": "currency",
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.instructedAmount.currencyCode",
                                        "values": ["BRL", "EUR", "GBP", "USD"]
                                    }, {
                                        "key": "purpose-of-payment",
                                        "mandatory": true
                                    }]
                            }, {
                                "country": "CA",
                                "inputFormSettings": [{
                                        "key": "account-number",
                                        "format": "BBAN",
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.counterpartyAccount.identification.identification"
                                    }, {
                                        "key": "bank-code",
                                        "label": {
                                            "routing-number": "Routing number"
                                        },
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.counterpartyBank.bankBranchCode",
                                        "regex": "/^[0-9]{9}$/"
                                    }, {
                                        "key": "currency",
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.instructedAmount.currencyCode",
                                        "values": ["CAD", "EUR", "GBP", "USD"]
                                    }]
                            }, {
                                "country": "CN",
                                "inputFormSettings": [{
                                        "key": "account-number",
                                        "format": "BBAN",
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.counterpartyAccount.identification.identification"
                                    }, {
                                        "key": "currency",
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.instructedAmount.currencyCode",
                                        "values": ["EUR", "GBP", "USD"]
                                    }, {
                                        "key": "purpose-of-payment",
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "predefinedValues": true
                                    }],
                                "purposesOfPayment": [{
                                        "code": "PAYT/02123",
                                        "description": "Individual Payment"
                                    }, {
                                        "code": "PAYT/02112",
                                        "description": "Trade related Payment"
                                    }, {
                                        "code": "PAYT/02114",
                                        "description": "Service related Payment"
                                    }]
                            }, {
                                "country": "GB",
                                "isDefault": true,
                                "inputFormSettings": [{
                                        "key": "account-number",
                                        "format": "BBAN",
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.counterpartyAccount.identification.identification"
                                    }, {
                                        "key": "bank-code",
                                        "label": {
                                            "sort-code": "Sort code"
                                        },
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.counterpartyBank.bankBranchCode",
                                        "regex": "/^[0-9]{6}$/"
                                    }, {
                                        "key": "currency",
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.instructedAmount.currencyCode",
                                        "values": ["EUR", "GBP", "USD"]
                                    }]
                            }, {
                                "country": "HK",
                                "inputFormSettings": [{
                                        "key": "account-number",
                                        "format": "BBAN",
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.counterpartyAccount.identification.identification"
                                    }, {
                                        "key": "bank-code",
                                        "label": {
                                            "clearing": "Clearing code"
                                        },
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.counterpartyBank.bankBranchCode",
                                        "regex": "/^[0-9]{3}$/"
                                    }, {
                                        "key": "currency",
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.instructedAmount.currencyCode",
                                        "values": ["HKD", "EUR", "GBP", "USD"]
                                    }]
                            }, {
                                "country": "IN",
                                "inputFormSettings": [{
                                        "key": "account-number",
                                        "format": "BBAN",
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.counterpartyAccount.identification.identification"
                                    }, {
                                        "key": "bank-code",
                                        "label": {
                                            "ifsc": "IFSC"
                                        },
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.counterpartyBank.bankBranchCode",
                                        "regex": "/^[a-zA-Z0-9]{3}$/"
                                    }, {
                                        "key": "currency",
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.instructedAmount.currencyCode",
                                        "values": ["INR", "EUR", "GBP", "USD"]
                                    }, {
                                        "key": "purpose-of-payment",
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "predefinedValues": true
                                    }],
                                "purposesOfPayment": [{
                                        "code": "P1004",
                                        "description": "Legal services"
                                    }, {
                                        "code": "P0401",
                                        "description": "Postal services"
                                    }, {
                                        "code": "P0402",
                                        "description": "Courier services"
                                    }]
                            }, {
                                "country": "JO",
                                "inputFormSettings": [{
                                        "key": "account-number",
                                        "format": "IBAN",
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.counterpartyAccount.identification.identification",
                                        "regex": "/^[a-zA-Z0-9]{30}$/"
                                    }, {
                                        "key": "bank-code",
                                        "notApplicable": true,
                                        "apiField": "transferTransactionInformation.counterpartyBank.bankBranchCode"
                                    }, {
                                        "key": "currency",
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.instructedAmount.currencyCode",
                                        "values": ["JOD", "EUR", "GBP", "USD"]
                                    }]
                            }, {
                                "country": "JP",
                                "inputFormSettings": [{
                                        "key": "account-number",
                                        "format": "BBAN",
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.counterpartyAccount.identification.identification"
                                    }, {
                                        "key": "bank-code",
                                        "notApplicable": true,
                                        "apiField": "transferTransactionInformation.counterpartyBank.bankBranchCode"
                                    }, {
                                        "key": "currency",
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.instructedAmount.currencyCode",
                                        "values": ["JPY", "EUR", "GBP", "USD"]
                                    }]
                            }, {
                                "country": "NL",
                                "inputFormSettings": [{
                                        "key": "account-number",
                                        "format": "IBAN",
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.counterpartyAccount.identification.identification",
                                        "regex": "/^[a-zA-Z0-9]{18}$/"
                                    }, {
                                        "key": "bank-code",
                                        "notApplicable": true,
                                        "apiField": "transferTransactionInformation.counterpartyBank.bankBranchCode"
                                    }, {
                                        "key": "currency",
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.instructedAmount.currencyCode",
                                        "values": ["EUR", "GBP", "USD"]
                                    }]
                            }, {
                                "country": "RU",
                                "inputFormSettings": [{
                                        "key": "account-number",
                                        "format": "BBAN",
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.counterpartyAccount.identification.identification"
                                    }, {
                                        "key": "bank-code",
                                        "label": {
                                            "bik": "BIK"
                                        },
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.counterpartyBank.bankBranchCode",
                                        "regex": "/^[0-9]{9}$/"
                                    }, {
                                        "key": "currency",
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.instructedAmount.currencyCode",
                                        "values": ["RUB", "EUR", "GBP", "USD"]
                                    }, {
                                        "key": "purpose-of-payment",
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "predefinedValues": true
                                    }],
                                "purposesOfPayment": [{
                                        "code": "01010",
                                        "description": "Selling by Residents of foreign currencies for Russian Roubles"
                                    }, {
                                        "code": "99010",
                                        "description": "The return to Residents, of erroneously debited (credited) funds"
                                    }, {
                                        "code": "01030",
                                        "description": "Purchases by Residents of foreign currencies for Russian Roubles"
                                    }]
                            }, {
                                "country": "SA",
                                "inputFormSettings": [{
                                        "key": "account-number",
                                        "format": "BBAN",
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.counterpartyAccount.identification.identification"
                                    }, {
                                        "key": "bank-code",
                                        "label": {
                                            "za-code": "ZA code"
                                        },
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.counterpartyBank.bankBranchCode",
                                        "regex": "/^[0-9]{6}$/"
                                    }, {
                                        "key": "currency",
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.instructedAmount.currencyCode",
                                        "values": ["ZAR", "EUR", "GBP", "USD"]
                                    }]
                            }, {
                                "country": "SG",
                                "inputFormSettings": [{
                                        "key": "account-number",
                                        "format": "BBAN",
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.counterpartyAccount.identification.identification"
                                    }, {
                                        "key": "bank-code",
                                        "notApplicable": true,
                                        "apiField": "transferTransactionInformation.counterpartyBank.bankBranchCode"
                                    }, {
                                        "key": "currency",
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.instructedAmount.currencyCode",
                                        "values": ["SGD", "EUR", "GBP", "USD"]
                                    }]
                            }, {
                                "country": "US",
                                "inputFormSettings": [{
                                        "key": "account-number",
                                        "format": "BBAN",
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.counterpartyAccount.identification.identification"
                                    }, {
                                        "key": "bank-code",
                                        "label": {
                                            "routing-number": "Routing transit number (ABA)"
                                        },
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.counterpartyBank.bankBranchCode",
                                        "regex": "/^[0-9]{9}$/"
                                    }, {
                                        "key": "currency",
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.instructedAmount.currencyCode",
                                        "values": ["EUR", "GBP", "USD"]
                                    }]
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var SanctionedCountriesHttpServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/client-api/v1/sanctioned-countries",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "countries": [{
                                "country": "AE",
                                "inputFormSettings": [{
                                        "key": "account-number",
                                        "format": "IBAN",
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.counterpartyAccount.identification.identification",
                                        "regex": "/^[a-zA-Z0-9]{23}$/"
                                    }, {
                                        "key": "bank-code",
                                        "notApplicable": true,
                                        "apiField": "transferTransactionInformation.counterpartyBank.bankBranchCode"
                                    }, {
                                        "key": "currency",
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.instructedAmount.currencyCode",
                                        "values": ["AED", "EUR", "GBP", "USD"]
                                    }]
                            }, {
                                "country": "AU",
                                "inputFormSettings": [{
                                        "key": "account-number",
                                        "format": "BBAN",
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.counterpartyAccount.identification.identification"
                                    }, {
                                        "key": "bank-code",
                                        "label": {
                                            "bsb": "BSB code"
                                        },
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.counterpartyBank.bankBranchCode",
                                        "regex": "/^[0-9]{6}$/"
                                    }, {
                                        "key": "currency",
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.instructedAmount.currencyCode",
                                        "values": ["AUD", "EUR", "GBP", "USD"]
                                    }]
                            }, {
                                "country": "BR",
                                "inputFormSettings": [{
                                        "key": "account-number",
                                        "format": "IBAN",
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.counterpartyAccount.identification.identification",
                                        "regex": "/^[a-zA-Z0-9]{29}$/"
                                    }, {
                                        "key": "bank-code",
                                        "notApplicable": true,
                                        "apiField": "transferTransactionInformation.counterpartyBank.bankBranchCode"
                                    }, {
                                        "key": "currency",
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.instructedAmount.currencyCode",
                                        "values": ["BRL", "EUR", "GBP", "USD"]
                                    }, {
                                        "key": "purpose-of-payment",
                                        "mandatory": true
                                    }]
                            }, {
                                "country": "CA",
                                "inputFormSettings": [{
                                        "key": "account-number",
                                        "format": "BBAN",
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.counterpartyAccount.identification.identification"
                                    }, {
                                        "key": "bank-code",
                                        "label": {
                                            "routing-number": "Routing number"
                                        },
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.counterpartyBank.bankBranchCode",
                                        "regex": "/^[0-9]{9}$/"
                                    }, {
                                        "key": "currency",
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.instructedAmount.currencyCode",
                                        "values": ["CAD", "EUR", "GBP", "USD"]
                                    }]
                            }, {
                                "country": "CN",
                                "inputFormSettings": [{
                                        "key": "account-number",
                                        "format": "BBAN",
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.counterpartyAccount.identification.identification"
                                    }, {
                                        "key": "currency",
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.instructedAmount.currencyCode",
                                        "values": ["EUR", "GBP", "USD"]
                                    }, {
                                        "key": "purpose-of-payment",
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "predefinedValues": true
                                    }],
                                "purposesOfPayment": [{
                                        "code": "PAYT/02123",
                                        "description": "Individual Payment"
                                    }, {
                                        "code": "PAYT/02112",
                                        "description": "Trade related Payment"
                                    }, {
                                        "code": "PAYT/02114",
                                        "description": "Service related Payment"
                                    }]
                            }, {
                                "country": "GB",
                                "isDefault": true,
                                "inputFormSettings": [{
                                        "key": "account-number",
                                        "format": "BBAN",
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.counterpartyAccount.identification.identification"
                                    }, {
                                        "key": "bank-code",
                                        "label": {
                                            "sort-code": "Sort code"
                                        },
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.counterpartyBank.bankBranchCode",
                                        "regex": "/^[0-9]{6}$/"
                                    }, {
                                        "key": "currency",
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.instructedAmount.currencyCode",
                                        "values": ["EUR", "GBP", "USD"]
                                    }]
                            }, {
                                "country": "HK",
                                "inputFormSettings": [{
                                        "key": "account-number",
                                        "format": "BBAN",
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.counterpartyAccount.identification.identification"
                                    }, {
                                        "key": "bank-code",
                                        "label": {
                                            "clearing": "Clearing code"
                                        },
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.counterpartyBank.bankBranchCode",
                                        "regex": "/^[0-9]{3}$/"
                                    }, {
                                        "key": "currency",
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.instructedAmount.currencyCode",
                                        "values": ["HKD", "EUR", "GBP", "USD"]
                                    }]
                            }, {
                                "country": "IN",
                                "inputFormSettings": [{
                                        "key": "account-number",
                                        "format": "BBAN",
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.counterpartyAccount.identification.identification"
                                    }, {
                                        "key": "bank-code",
                                        "label": {
                                            "ifsc": "IFSC"
                                        },
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.counterpartyBank.bankBranchCode",
                                        "regex": "/^[a-zA-Z0-9]{3}$/"
                                    }, {
                                        "key": "currency",
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.instructedAmount.currencyCode",
                                        "values": ["INR", "EUR", "GBP", "USD"]
                                    }, {
                                        "key": "purpose-of-payment",
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "predefinedValues": true
                                    }],
                                "purposesOfPayment": [{
                                        "code": "P1004",
                                        "description": "Legal services"
                                    }, {
                                        "code": "P0401",
                                        "description": "Postal services"
                                    }, {
                                        "code": "P0402",
                                        "description": "Courier services"
                                    }]
                            }, {
                                "country": "JO",
                                "inputFormSettings": [{
                                        "key": "account-number",
                                        "format": "IBAN",
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.counterpartyAccount.identification.identification",
                                        "regex": "/^[a-zA-Z0-9]{30}$/"
                                    }, {
                                        "key": "bank-code",
                                        "notApplicable": true,
                                        "apiField": "transferTransactionInformation.counterpartyBank.bankBranchCode"
                                    }, {
                                        "key": "currency",
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.instructedAmount.currencyCode",
                                        "values": ["JOD", "EUR", "GBP", "USD"]
                                    }]
                            }, {
                                "country": "JP",
                                "inputFormSettings": [{
                                        "key": "account-number",
                                        "format": "BBAN",
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.counterpartyAccount.identification.identification"
                                    }, {
                                        "key": "bank-code",
                                        "notApplicable": true,
                                        "apiField": "transferTransactionInformation.counterpartyBank.bankBranchCode"
                                    }, {
                                        "key": "currency",
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.instructedAmount.currencyCode",
                                        "values": ["JPY", "EUR", "GBP", "USD"]
                                    }]
                            }, {
                                "country": "NL",
                                "inputFormSettings": [{
                                        "key": "account-number",
                                        "format": "IBAN",
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.counterpartyAccount.identification.identification",
                                        "regex": "/^[a-zA-Z0-9]{18}$/"
                                    }, {
                                        "key": "bank-code",
                                        "notApplicable": true,
                                        "apiField": "transferTransactionInformation.counterpartyBank.bankBranchCode"
                                    }, {
                                        "key": "currency",
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.instructedAmount.currencyCode",
                                        "values": ["EUR", "GBP", "USD"]
                                    }]
                            }, {
                                "country": "RU",
                                "inputFormSettings": [{
                                        "key": "account-number",
                                        "format": "BBAN",
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.counterpartyAccount.identification.identification"
                                    }, {
                                        "key": "bank-code",
                                        "label": {
                                            "bik": "BIK"
                                        },
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.counterpartyBank.bankBranchCode",
                                        "regex": "/^[0-9]{9}$/"
                                    }, {
                                        "key": "currency",
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.instructedAmount.currencyCode",
                                        "values": ["RUB", "EUR", "GBP", "USD"]
                                    }, {
                                        "key": "purpose-of-payment",
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "predefinedValues": true
                                    }],
                                "purposesOfPayment": [{
                                        "code": "01010",
                                        "description": "Selling by Residents of foreign currencies for Russian Roubles"
                                    }, {
                                        "code": "99010",
                                        "description": "The return to Residents, of erroneously debited (credited) funds"
                                    }, {
                                        "code": "01030",
                                        "description": "Purchases by Residents of foreign currencies for Russian Roubles"
                                    }]
                            }, {
                                "country": "SA",
                                "inputFormSettings": [{
                                        "key": "account-number",
                                        "format": "BBAN",
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.counterpartyAccount.identification.identification"
                                    }, {
                                        "key": "bank-code",
                                        "label": {
                                            "za-code": "ZA code"
                                        },
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.counterpartyBank.bankBranchCode",
                                        "regex": "/^[0-9]{6}$/"
                                    }, {
                                        "key": "currency",
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.instructedAmount.currencyCode",
                                        "values": ["ZAR", "EUR", "GBP", "USD"]
                                    }]
                            }, {
                                "country": "SG",
                                "inputFormSettings": [{
                                        "key": "account-number",
                                        "format": "BBAN",
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.counterpartyAccount.identification.identification"
                                    }, {
                                        "key": "bank-code",
                                        "notApplicable": true,
                                        "apiField": "transferTransactionInformation.counterpartyBank.bankBranchCode"
                                    }, {
                                        "key": "currency",
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.instructedAmount.currencyCode",
                                        "values": ["SGD", "EUR", "GBP", "USD"]
                                    }]
                            }, {
                                "country": "US",
                                "inputFormSettings": [{
                                        "key": "account-number",
                                        "format": "BBAN",
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.counterpartyAccount.identification.identification"
                                    }, {
                                        "key": "bank-code",
                                        "label": {
                                            "routing-number": "Routing transit number (ABA)"
                                        },
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.counterpartyBank.bankBranchCode",
                                        "regex": "/^[0-9]{9}$/"
                                    }, {
                                        "key": "currency",
                                        "mandatory": true,
                                        "notApplicable": false,
                                        "apiField": "transferTransactionInformation.instructedAmount.currencyCode",
                                        "values": ["EUR", "GBP", "USD"]
                                    }]
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
    ]);

    var SanctionedCurrenciesHttpService = /** @class */ (function () {
        function SanctionedCurrenciesHttpService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new PaymentOrderOptionsConfiguration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        SanctionedCurrenciesHttpService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        SanctionedCurrenciesHttpService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        SanctionedCurrenciesHttpService.prototype.getSanctionedCurrencies = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _countryIso = requestParameters["countryIso"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_countryIso !== undefined && _countryIso !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _countryIso, 'countryIso');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v1/sanctioned-currencies", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        SanctionedCurrenciesHttpService.prototype.getSanctionedCurrenciesUrl = function (requestParameters) {
            var _countryIso = requestParameters["countryIso"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_countryIso !== undefined && _countryIso !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _countryIso, 'countryIso');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v1/sanctioned-currencies" + (queryString ? "?" + queryString : '');
        };
        return SanctionedCurrenciesHttpService;
    }());
    SanctionedCurrenciesHttpService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: SanctionedCurrenciesHttpService, deps: [{ token: i1__namespace.HttpClient }, { token: PAYMENT_ORDER_OPTIONS_BASE_PATH, optional: true }, { token: PaymentOrderOptionsConfiguration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    SanctionedCurrenciesHttpService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: SanctionedCurrenciesHttpService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: SanctionedCurrenciesHttpService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [PAYMENT_ORDER_OPTIONS_BASE_PATH]
                        }] }, { type: PaymentOrderOptionsConfiguration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var SanctionedCurrenciesHttpServiceGetSanctionedCurrenciesMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v1/sanctioned-currencies",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "default": {
                            "code": "GBP",
                            "decimals": 2
                        },
                        "labeled": {
                            "normal": [{
                                    "code": "AED",
                                    "decimals": 2
                                }, {
                                    "code": "AUD",
                                    "decimals": 2
                                }, {
                                    "code": "BRL",
                                    "decimals": 2
                                }, {
                                    "code": "CAD",
                                    "decimals": 2
                                }, {
                                    "code": "CNY",
                                    "decimals": 2
                                }, {
                                    "code": "HKD",
                                    "decimals": 2
                                }, {
                                    "code": "INR",
                                    "decimals": 2
                                }, {
                                    "code": "JPY",
                                    "decimals": 0
                                }, {
                                    "code": "JOD",
                                    "decimals": 3
                                }, {
                                    "code": "RUB",
                                    "decimals": 2
                                }, {
                                    "code": "SGD",
                                    "decimals": 2
                                }, {
                                    "code": "ZAR",
                                    "decimals": 2
                                }],
                            "popular": [{
                                    "code": "EUR",
                                    "decimals": 2
                                }, {
                                    "code": "GBP",
                                    "decimals": 2
                                }, {
                                    "code": "USD",
                                    "decimals": 2
                                }]
                        }
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var SanctionedCurrenciesHttpServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/client-api/v1/sanctioned-currencies",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "default": {
                            "code": "GBP",
                            "decimals": 2
                        },
                        "labeled": {
                            "normal": [{
                                    "code": "AED",
                                    "decimals": 2
                                }, {
                                    "code": "AUD",
                                    "decimals": 2
                                }, {
                                    "code": "BRL",
                                    "decimals": 2
                                }, {
                                    "code": "CAD",
                                    "decimals": 2
                                }, {
                                    "code": "CNY",
                                    "decimals": 2
                                }, {
                                    "code": "HKD",
                                    "decimals": 2
                                }, {
                                    "code": "INR",
                                    "decimals": 2
                                }, {
                                    "code": "JPY",
                                    "decimals": 0
                                }, {
                                    "code": "JOD",
                                    "decimals": 3
                                }, {
                                    "code": "RUB",
                                    "decimals": 2
                                }, {
                                    "code": "SGD",
                                    "decimals": 2
                                }, {
                                    "code": "ZAR",
                                    "decimals": 2
                                }],
                            "popular": [{
                                    "code": "EUR",
                                    "decimals": 2
                                }, {
                                    "code": "GBP",
                                    "decimals": 2
                                }, {
                                    "code": "USD",
                                    "decimals": 2
                                }]
                        }
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
    ]);

    exports.COLLECTION_FORMATS = COLLECTION_FORMATS;
    exports.CONFIG_TOKEN = CONFIG_TOKEN;
    exports.ChargeBearer = ChargeBearer;
    exports.InstructionPriority = InstructionPriority;
    exports.PAYMENT_ORDER_OPTIONS_BASE_PATH = PAYMENT_ORDER_OPTIONS_BASE_PATH;
    exports.PaymentOptionsHttpService = PaymentOptionsHttpService;
    exports.PaymentOptionsHttpServiceGetPaymentOptionsByPaymentTypeMocksProvider = PaymentOptionsHttpServiceGetPaymentOptionsByPaymentTypeMocksProvider;
    exports.PaymentOptionsHttpServiceMocksProvider = PaymentOptionsHttpServiceMocksProvider;
    exports.PaymentOptionsHttpServicePostPaymentOptionsMocksProvider = PaymentOptionsHttpServicePostPaymentOptionsMocksProvider;
    exports.PaymentOrderOptionsApiModule = PaymentOrderOptionsApiModule;
    exports.PaymentOrderOptionsConfiguration = PaymentOrderOptionsConfiguration;
    exports.SanctionedCountriesHttpService = SanctionedCountriesHttpService;
    exports.SanctionedCountriesHttpServiceGetSanctionedCountriesMocksProvider = SanctionedCountriesHttpServiceGetSanctionedCountriesMocksProvider;
    exports.SanctionedCountriesHttpServiceMocksProvider = SanctionedCountriesHttpServiceMocksProvider;
    exports.SanctionedCurrenciesHttpService = SanctionedCurrenciesHttpService;
    exports.SanctionedCurrenciesHttpServiceGetSanctionedCurrenciesMocksProvider = SanctionedCurrenciesHttpServiceGetSanctionedCurrenciesMocksProvider;
    exports.SanctionedCurrenciesHttpServiceMocksProvider = SanctionedCurrenciesHttpServiceMocksProvider;
    exports.SchemeName = SchemeName;
    exports.TimeFrameUnit = TimeFrameUnit;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-payment-order-options-http-ang.umd.js.map
