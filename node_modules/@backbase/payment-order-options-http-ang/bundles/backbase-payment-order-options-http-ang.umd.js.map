{"version":3,"file":"backbase-payment-order-options-http-ang.umd.js","sources":["../../model/chargeBearer.ts","../../model/instructionPriority.ts","../../model/schemeName.ts","../../model/timeFrameUnit.ts","../../variables.ts","../../configuration.ts","../../api.module.ts","../../encoder.ts","../../api/paymentOptions.service.ts","../../api/paymentOptions.service.mocks.ts","../../api/sanctionedCountries.service.ts","../../api/sanctionedCountries.service.mocks.ts","../../api/sanctionedCurrencies.service.ts","../../api/sanctionedCurrencies.service.mocks.ts"],"sourcesContent":["/**\n * Payment options client\n * Retrieve valid payment options based on the entered payment details. Retrieve valid countries and currencies for international payments.\n *\n * The version of the OpenAPI document: 1.2.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n\n\n/**\n * Indicated who pays the fees for an international transfer. Possible values: OUR(originator), BEN(beneficiary or SHA(shared).\n */\nexport type ChargeBearer = 'OUR' | 'BEN' | 'SHA';\n\nexport const ChargeBearer = {\n    OUR: 'OUR' as ChargeBearer,\n    BEN: 'BEN' as ChargeBearer,\n    SHA: 'SHA' as ChargeBearer\n};\n\n","/**\n * Payment options client\n * Retrieve valid payment options based on the entered payment details. Retrieve valid countries and currencies for international payments.\n *\n * The version of the OpenAPI document: 1.2.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n\n\n/**\n * Specify the priority of execution of the payment order.\n */\nexport type InstructionPriority = 'NORM' | 'HIGH';\n\nexport const InstructionPriority = {\n    NORM: 'NORM' as InstructionPriority,\n    HIGH: 'HIGH' as InstructionPriority\n};\n\n","/**\n * Payment options client\n * Retrieve valid payment options based on the entered payment details. Retrieve valid countries and currencies for international payments.\n *\n * The version of the OpenAPI document: 1.2.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n\n\n/**\n * This describes the type of the account identifier. ID will mean it refers to an account known within DBS.\n */\nexport type SchemeName = 'IBAN' | 'BBAN' | 'ID' | 'EXTERNAL_ID';\n\nexport const SchemeName = {\n    IBAN: 'IBAN' as SchemeName,\n    BBAN: 'BBAN' as SchemeName,\n    ID: 'ID' as SchemeName,\n    EXTERNALID: 'EXTERNAL_ID' as SchemeName\n};\n\n","/**\n * Payment options client\n * Retrieve valid payment options based on the entered payment details. Retrieve valid countries and currencies for international payments.\n *\n * The version of the OpenAPI document: 1.2.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n\n\nexport type TimeFrameUnit = 'HOUR' | 'CALENDAR_DAY' | 'BUSINESS_DAY';\n\nexport const TimeFrameUnit = {\n    HOUR: 'HOUR' as TimeFrameUnit,\n    CALENDARDAY: 'CALENDAR_DAY' as TimeFrameUnit,\n    BUSINESSDAY: 'BUSINESS_DAY' as TimeFrameUnit\n};\n\n","import { InjectionToken } from '@angular/core';\n\nexport const PAYMENT_ORDER_OPTIONS_BASE_PATH = new InjectionToken<string>('PAYMENT_ORDER_OPTIONS_BASE_PATH');\nexport const COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n}\n","import { HttpParameterCodec } from '@angular/common/http';\n\nimport { InjectionToken } from '@angular/core';\n\nexport interface PaymentOrderOptionsConfigurationParameters {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n    /**\n     * The keys are the names in the securitySchemes section of the OpenAPI\n     * document. They should map to the value used for authentication\n     * minus any standard prefixes such as 'Basic' or 'Bearer'.\n     */\n    credentials?: {[ key: string ]: string | (() => string | undefined)};\n}\n\nexport class PaymentOrderOptionsConfiguration {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n    /**\n     * The keys are the names in the securitySchemes section of the OpenAPI\n     * document. They should map to the value used for authentication\n     * minus any standard prefixes such as 'Basic' or 'Bearer'.\n     */\n    credentials: {[ key: string ]: string | (() => string | undefined)};\n\n    constructor(configurationParameters: PaymentOrderOptionsConfigurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n        this.encoder = configurationParameters.encoder;\n        if (configurationParameters.credentials) {\n            this.credentials = configurationParameters.credentials;\n        }\n        else {\n            this.credentials = {};\n        }\n    }\n\n    /**\n     * Select the correct content-type to use for a request.\n     * Uses {@link PaymentOrderOptionsConfiguration#isJsonMime} to determine the correct content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param contentTypes - the array of content types that are available for selection\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\n        if (contentTypes.length === 0) {\n            return undefined;\n        }\n\n        const type = contentTypes.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n\n    /**\n     * Select the correct accept content-type to use for a request.\n     * Uses {@link PaymentOrderOptionsConfiguration#isJsonMime} to determine the correct accept content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param accepts - the array of content types that are available for selection.\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderAccept(accepts: string[]): string | undefined {\n        if (accepts.length === 0) {\n            return undefined;\n        }\n\n        const type = accepts.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n\n    public lookupCredential(key: string): string | undefined {\n        const value = this.credentials[key];\n        return typeof value === 'function'\n            ? value()\n            : value;\n    }\n}\n\nexport const CONFIG_TOKEN = new InjectionToken('api-data-module PaymentOrderOptionsConfiguration');\n\n","import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { PaymentOrderOptionsConfiguration, CONFIG_TOKEN } from './configuration';\nimport { HttpClient } from '@angular/common/http';\n\nimport { DataModulesManager } from \"@backbase/foundation-ang/data-http\";\n\n@NgModule({\n  imports:      [],\n  declarations: [],\n  exports:      [],\n  providers:    []\n})\nexport class PaymentOrderOptionsApiModule {\n    public static forRoot(configurationFactory: () => PaymentOrderOptionsConfiguration): ModuleWithProviders<PaymentOrderOptionsApiModule> {\n        return {\n            ngModule: PaymentOrderOptionsApiModule,\n            providers: [ { provide: PaymentOrderOptionsConfiguration, useFactory: configurationFactory } ]\n        };\n    }\n\n    constructor( @Optional() @SkipSelf() parentModule: PaymentOrderOptionsApiModule,\n                 @Optional() http: HttpClient,\n                 @Optional() dataModulesManager: DataModulesManager | null,\n                 config: PaymentOrderOptionsConfiguration,\n\n        ) {\n        if (parentModule) {\n            throw new Error('PaymentOrderOptionsApiModule is already loaded. Import in your base AppModule only.');\n        }\n        if (!http) {\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n            'See also https://github.com/angular/angular/issues/20575');\n        }\n\n        if (dataModulesManager) {\n            dataModulesManager.setModuleConfig(CONFIG_TOKEN, {\n                apiRoot: '',\n                servicePath: config.basePath || '',\n                headers: {},\n            });\n        }\n    }\n}\n","import { HttpParameterCodec } from '@angular/common/http';\n\n/**\n * Custom HttpParameterCodec\n * Workaround for https://github.com/angular/angular/issues/18261\n */\nexport class CustomHttpParameterCodec implements HttpParameterCodec {\n    encodeKey(k: string): string {\n        return encodeURIComponent(k);\n    }\n    encodeValue(v: string): string {\n        return encodeURIComponent(v);\n    }\n    decodeKey(k: string): string {\n        return decodeURIComponent(k);\n    }\n    decodeValue(v: string): string {\n        return decodeURIComponent(v);\n    }\n}\n","/**\n * Payment options client\n * Retrieve valid payment options based on the entered payment details. Retrieve valid countries and currencies for international payments.\n *\n * The version of the OpenAPI document: 1.2.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { BadRequestError } from '../model/models';\nimport { InternalServerError } from '../model/models';\nimport { NotFoundError } from '../model/models';\nimport { PaymentOption } from '../model/models';\nimport { PaymentOptionsRequest } from '../model/models';\nimport { PaymentOptionsResponse } from '../model/models';\n\nimport { PAYMENT_ORDER_OPTIONS_BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { PaymentOrderOptionsConfiguration }                                     from '../configuration';\n\n\nexport interface GetPaymentOptionsByPaymentTypeRequestParams {\n    /** No description available */\n    [\"paymentType\"]: string;\n}\n\nexport interface PostPaymentOptionsRequestParams {\n    /** This endpoint returns different payment options that are available for moving the money based on certain inputs like originating account and/or amount. The payment options returned can be the payment scheme(s) possible, applicable fee, cutoff times etc. */\n    [\"paymentOptionsRequest\"]?: PaymentOptionsRequest;\n}\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PaymentOptionsHttpService {\n\n    protected basePath = '';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new PaymentOrderOptionsConfiguration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional() @Inject(PAYMENT_ORDER_OPTIONS_BASE_PATH) basePath: string, @Optional() configuration: PaymentOrderOptionsConfiguration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * This endpoint returns options for a specific payment type.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPaymentOptionsByPaymentType(requestParameters: GetPaymentOptionsByPaymentTypeRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<PaymentOption>;\n    /**\n     * This endpoint returns options for a specific payment type.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPaymentOptionsByPaymentType(requestParameters: GetPaymentOptionsByPaymentTypeRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<PaymentOption>>;\n    /**\n     * This endpoint returns options for a specific payment type.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPaymentOptionsByPaymentType(requestParameters: GetPaymentOptionsByPaymentTypeRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<PaymentOption>>;\n    /**\n     * This endpoint returns options for a specific payment type.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getPaymentOptionsByPaymentType(requestParameters: GetPaymentOptionsByPaymentTypeRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _paymentType = requestParameters[\"paymentType\"];\n        if (_paymentType === null || _paymentType === undefined) {\n            throw new Error('Required parameter paymentType was null or undefined when calling getPaymentOptionsByPaymentType.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<PaymentOption>(`${this.configuration.basePath}/client-api/v1/payment-options/${encodeURIComponent(String(_paymentType))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public getPaymentOptionsByPaymentTypeUrl(requestParameters: GetPaymentOptionsByPaymentTypeRequestParams): string {\n        const _paymentType = requestParameters[\"paymentType\"];\n        if (_paymentType === null || _paymentType === undefined) {\n            throw new Error('Required parameter paymentType was null or undefined when calling getPaymentOptionsByPaymentType.');\n        }\n        return `${this.configuration.basePath}/client-api/v1/payment-options/${encodeURIComponent(String(_paymentType))}`;\n    }\n\n    /**\n     * This endpoint returns different payment options that are available for moving the money based on certain inputs like originating account and/or amount. The payment options returned can be the payment scheme(s) possible, applicable fee, cutoff times etc.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postPaymentOptions(requestParameters: PostPaymentOptionsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<PaymentOptionsResponse>;\n    /**\n     * This endpoint returns different payment options that are available for moving the money based on certain inputs like originating account and/or amount. The payment options returned can be the payment scheme(s) possible, applicable fee, cutoff times etc.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postPaymentOptions(requestParameters: PostPaymentOptionsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<PaymentOptionsResponse>>;\n    /**\n     * This endpoint returns different payment options that are available for moving the money based on certain inputs like originating account and/or amount. The payment options returned can be the payment scheme(s) possible, applicable fee, cutoff times etc.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postPaymentOptions(requestParameters: PostPaymentOptionsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<PaymentOptionsResponse>>;\n    /**\n     * This endpoint returns different payment options that are available for moving the money based on certain inputs like originating account and/or amount. The payment options returned can be the payment scheme(s) possible, applicable fee, cutoff times etc.\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postPaymentOptions(requestParameters: PostPaymentOptionsRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _paymentOptionsRequest = requestParameters[\"paymentOptionsRequest\"];\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<PaymentOptionsResponse>(`${this.configuration.basePath}/client-api/v1/payment-options`,\n            _paymentOptionsRequest,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public postPaymentOptionsUrl(requestParameters: PostPaymentOptionsRequestParams): string {\n        const _paymentOptionsRequest = requestParameters[\"paymentOptionsRequest\"];\n        return `${this.configuration.basePath}/client-api/v1/payment-options`;\n    }\n\n}\n","import { createMocks } from '@backbase/foundation-ang/data-http';\nimport { Provider } from '@angular/core';\n\n/**\n* Mocks provider for /client-api/v1/payment-options/{paymentType} URL pattern\n*/\nexport const PaymentOptionsHttpServiceGetPaymentOptionsByPaymentTypeMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/v1/payment-options/{paymentType}\",\n        method: \"GET\",\n        responses: [\n                {\n                    status: 200,\n                    body: {\n  \"paymentType\" : \"US_FOREIGN_WIRE\",\n  \"canEditCounterparty\" : true,\n  \"paymentOptions\" : [ {\n    \"instructionPriority\" : \"NORM\",\n    \"transferFee\" : {\n      \"amount\" : \"15.29\",\n      \"currencyCode\" : \"USD\"\n    },\n    \"chargeBearer\" : [ \"OUR\", \"SHA\" ],\n    \"executionTimeFrame\" : {\n      \"unit\" : \"BUSINESS_DAY\",\n      \"max\" : 1\n    },\n    \"cutOffTime\" : \"16:00\"\n  }, {\n    \"instructionPriority\" : \"HIGH\",\n    \"transferFee\" : {\n      \"amount\" : \"20.00\",\n      \"currencyCode\" : \"USD\"\n    },\n    \"chargeBearer\" : [ \"OUR\", \"SHA\" ],\n    \"executionTimeFrame\" : {\n      \"unit\" : \"HOUR\",\n      \"min\" : 1,\n      \"max\" : 2\n    },\n    \"cutOffTime\" : \"16:00\"\n  } ]\n}\n                },\n                {\n                    status: 500,\n                    body: {\n  \"message\" : \"Description of error\"\n}\n                },\n                {\n                    status: 404,\n                    body: {\n  \"message\" : \"Resource not found.\",\n  \"errors\" : [ {\n    \"message\" : \"Unable to find the resource requested resource: {resource}.\",\n    \"key\" : \"common.api.resource\",\n    \"context\" : {\n      \"resource\" : \"aResource\"\n    }\n  } ]\n}\n                },\n    ]\n}]);\n/**\n* Mocks provider for /client-api/v1/payment-options URL pattern\n*/\nexport const PaymentOptionsHttpServicePostPaymentOptionsMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/v1/payment-options\",\n        method: \"POST\",\n        responses: [\n                {\n                    status: 200,\n                    body: {\n  \"options\" : [ {\n    \"paymentType\" : \"US_FOREIGN_WIRE\",\n    \"paymentOptions\" : [ {\n      \"instructionPriority\" : \"NORM\",\n      \"transferFee\" : {\n        \"amount\" : \"15.29\",\n        \"currencyCode\" : \"USD\"\n      },\n      \"chargeBearer\" : [ \"OUR\", \"SHA\" ],\n      \"executionTimeFrame\" : {\n        \"unit\" : \"BUSINESS_DAY\",\n        \"max\" : 1\n      },\n      \"cutOffTime\" : \"16:00\"\n    }, {\n      \"instructionPriority\" : \"HIGH\",\n      \"transferFee\" : {\n        \"amount\" : \"20.00\",\n        \"currencyCode\" : \"USD\"\n      },\n      \"chargeBearer\" : [ \"OUR\", \"SHA\" ],\n      \"executionTimeFrame\" : {\n        \"unit\" : \"HOUR\",\n        \"min\" : 1,\n        \"max\" : 2\n      },\n      \"cutOffTime\" : \"16:00\"\n    } ]\n  } ]\n}\n                },\n                {\n                    status: 500,\n                    body: {\n  \"message\" : \"Description of error\"\n}\n                },\n                {\n                    status: 400,\n                    body: {\n  \"message\" : \"Bad Request\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n                },\n    ]\n}]);\n\nexport const PaymentOptionsHttpServiceMocksProvider: Provider = createMocks(\n    [\n    {\n        urlPattern: \"/client-api/v1/payment-options/{paymentType}\",\n        method: \"GET\",\n        responses: [\n\n            {\n                status: 200,\n                body: {\n  \"paymentType\" : \"US_FOREIGN_WIRE\",\n  \"canEditCounterparty\" : true,\n  \"paymentOptions\" : [ {\n    \"instructionPriority\" : \"NORM\",\n    \"transferFee\" : {\n      \"amount\" : \"15.29\",\n      \"currencyCode\" : \"USD\"\n    },\n    \"chargeBearer\" : [ \"OUR\", \"SHA\" ],\n    \"executionTimeFrame\" : {\n      \"unit\" : \"BUSINESS_DAY\",\n      \"max\" : 1\n    },\n    \"cutOffTime\" : \"16:00\"\n  }, {\n    \"instructionPriority\" : \"HIGH\",\n    \"transferFee\" : {\n      \"amount\" : \"20.00\",\n      \"currencyCode\" : \"USD\"\n    },\n    \"chargeBearer\" : [ \"OUR\", \"SHA\" ],\n    \"executionTimeFrame\" : {\n      \"unit\" : \"HOUR\",\n      \"min\" : 1,\n      \"max\" : 2\n    },\n    \"cutOffTime\" : \"16:00\"\n  } ]\n}\n            },\n\n            {\n                status: 500,\n                body: {\n  \"message\" : \"Description of error\"\n}\n            },\n\n            {\n                status: 404,\n                body: {\n  \"message\" : \"Resource not found.\",\n  \"errors\" : [ {\n    \"message\" : \"Unable to find the resource requested resource: {resource}.\",\n    \"key\" : \"common.api.resource\",\n    \"context\" : {\n      \"resource\" : \"aResource\"\n    }\n  } ]\n}\n            },\n    ]\n},\n    {\n        urlPattern: \"/client-api/v1/payment-options\",\n        method: \"POST\",\n        responses: [\n\n            {\n                status: 200,\n                body: {\n  \"options\" : [ {\n    \"paymentType\" : \"US_FOREIGN_WIRE\",\n    \"paymentOptions\" : [ {\n      \"instructionPriority\" : \"NORM\",\n      \"transferFee\" : {\n        \"amount\" : \"15.29\",\n        \"currencyCode\" : \"USD\"\n      },\n      \"chargeBearer\" : [ \"OUR\", \"SHA\" ],\n      \"executionTimeFrame\" : {\n        \"unit\" : \"BUSINESS_DAY\",\n        \"max\" : 1\n      },\n      \"cutOffTime\" : \"16:00\"\n    }, {\n      \"instructionPriority\" : \"HIGH\",\n      \"transferFee\" : {\n        \"amount\" : \"20.00\",\n        \"currencyCode\" : \"USD\"\n      },\n      \"chargeBearer\" : [ \"OUR\", \"SHA\" ],\n      \"executionTimeFrame\" : {\n        \"unit\" : \"HOUR\",\n        \"min\" : 1,\n        \"max\" : 2\n      },\n      \"cutOffTime\" : \"16:00\"\n    } ]\n  } ]\n}\n            },\n\n            {\n                status: 500,\n                body: {\n  \"message\" : \"Description of error\"\n}\n            },\n\n            {\n                status: 400,\n                body: {\n  \"message\" : \"Bad Request\",\n  \"errors\" : [ {\n    \"message\" : \"Value Exceeded. Must be between {min} and {max}.\",\n    \"key\" : \"common.api.shoesize\",\n    \"context\" : {\n      \"max\" : \"50\",\n      \"min\" : \"1\"\n    }\n  } ]\n}\n            },\n    ]\n},\n]\n);\n\n\n","/**\n * Payment options client\n * Retrieve valid payment options based on the entered payment details. Retrieve valid countries and currencies for international payments.\n *\n * The version of the OpenAPI document: 1.2.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { InternalServerError } from '../model/models';\nimport { SanctionedCountriesResponse } from '../model/models';\n\nimport { PAYMENT_ORDER_OPTIONS_BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { PaymentOrderOptionsConfiguration }                                     from '../configuration';\n\n\nexport interface GetSanctionedCountriesRequestParams {\n    /** No description available */\n    [\"countryIso\"]?: string;\n}\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SanctionedCountriesHttpService {\n\n    protected basePath = '';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new PaymentOrderOptionsConfiguration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional() @Inject(PAYMENT_ORDER_OPTIONS_BASE_PATH) basePath: string, @Optional() configuration: PaymentOrderOptionsConfiguration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * This endpoint returns the configured allowed countries for the given country code. If country code parameter is not present the settings for the country marked as default (if any) will be returned\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getSanctionedCountries(requestParameters: GetSanctionedCountriesRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<SanctionedCountriesResponse>;\n    /**\n     * This endpoint returns the configured allowed countries for the given country code. If country code parameter is not present the settings for the country marked as default (if any) will be returned\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getSanctionedCountries(requestParameters: GetSanctionedCountriesRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<SanctionedCountriesResponse>>;\n    /**\n     * This endpoint returns the configured allowed countries for the given country code. If country code parameter is not present the settings for the country marked as default (if any) will be returned\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getSanctionedCountries(requestParameters: GetSanctionedCountriesRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<SanctionedCountriesResponse>>;\n    /**\n     * This endpoint returns the configured allowed countries for the given country code. If country code parameter is not present the settings for the country marked as default (if any) will be returned\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getSanctionedCountries(requestParameters: GetSanctionedCountriesRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _countryIso = requestParameters[\"countryIso\"];\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (_countryIso !== undefined && _countryIso !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_countryIso, 'countryIso');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<SanctionedCountriesResponse>(`${this.configuration.basePath}/client-api/v1/sanctioned-countries`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public getSanctionedCountriesUrl(requestParameters: GetSanctionedCountriesRequestParams): string {\n        const _countryIso = requestParameters[\"countryIso\"];\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (_countryIso !== undefined && _countryIso !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_countryIso, 'countryIso');\n        }\n        const queryString = queryParameters.toString();\n        return `${this.configuration.basePath}/client-api/v1/sanctioned-countries${queryString ? `?${queryString}` : ''}`;\n    }\n\n}\n","import { createMocks } from '@backbase/foundation-ang/data-http';\nimport { Provider } from '@angular/core';\n\n/**\n* Mocks provider for /client-api/v1/sanctioned-countries URL pattern\n*/\nexport const SanctionedCountriesHttpServiceGetSanctionedCountriesMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/v1/sanctioned-countries\",\n        method: \"GET\",\n        responses: [\n                {\n                    status: 200,\n                    body: {\n  \"countries\" : [ {\n    \"country\" : \"AE\",\n    \"inputFormSettings\" : [ {\n      \"key\" : \"account-number\",\n      \"format\" : \"IBAN\",\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.counterpartyAccount.identification.identification\",\n      \"regex\" : \"/^[a-zA-Z0-9]{23}$/\"\n    }, {\n      \"key\" : \"bank-code\",\n      \"notApplicable\" : true,\n      \"apiField\" : \"transferTransactionInformation.counterpartyBank.bankBranchCode\"\n    }, {\n      \"key\" : \"currency\",\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.instructedAmount.currencyCode\",\n      \"values\" : [ \"AED\", \"EUR\", \"GBP\", \"USD\" ]\n    } ]\n  }, {\n    \"country\" : \"AU\",\n    \"inputFormSettings\" : [ {\n      \"key\" : \"account-number\",\n      \"format\" : \"BBAN\",\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.counterpartyAccount.identification.identification\"\n    }, {\n      \"key\" : \"bank-code\",\n      \"label\" : {\n        \"bsb\" : \"BSB code\"\n      },\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.counterpartyBank.bankBranchCode\",\n      \"regex\" : \"/^[0-9]{6}$/\"\n    }, {\n      \"key\" : \"currency\",\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.instructedAmount.currencyCode\",\n      \"values\" : [ \"AUD\", \"EUR\", \"GBP\", \"USD\" ]\n    } ]\n  }, {\n    \"country\" : \"BR\",\n    \"inputFormSettings\" : [ {\n      \"key\" : \"account-number\",\n      \"format\" : \"IBAN\",\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.counterpartyAccount.identification.identification\",\n      \"regex\" : \"/^[a-zA-Z0-9]{29}$/\"\n    }, {\n      \"key\" : \"bank-code\",\n      \"notApplicable\" : true,\n      \"apiField\" : \"transferTransactionInformation.counterpartyBank.bankBranchCode\"\n    }, {\n      \"key\" : \"currency\",\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.instructedAmount.currencyCode\",\n      \"values\" : [ \"BRL\", \"EUR\", \"GBP\", \"USD\" ]\n    }, {\n      \"key\" : \"purpose-of-payment\",\n      \"mandatory\" : true\n    } ]\n  }, {\n    \"country\" : \"CA\",\n    \"inputFormSettings\" : [ {\n      \"key\" : \"account-number\",\n      \"format\" : \"BBAN\",\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.counterpartyAccount.identification.identification\"\n    }, {\n      \"key\" : \"bank-code\",\n      \"label\" : {\n        \"routing-number\" : \"Routing number\"\n      },\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.counterpartyBank.bankBranchCode\",\n      \"regex\" : \"/^[0-9]{9}$/\"\n    }, {\n      \"key\" : \"currency\",\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.instructedAmount.currencyCode\",\n      \"values\" : [ \"CAD\", \"EUR\", \"GBP\", \"USD\" ]\n    } ]\n  }, {\n    \"country\" : \"CN\",\n    \"inputFormSettings\" : [ {\n      \"key\" : \"account-number\",\n      \"format\" : \"BBAN\",\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.counterpartyAccount.identification.identification\"\n    }, {\n      \"key\" : \"currency\",\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.instructedAmount.currencyCode\",\n      \"values\" : [ \"EUR\", \"GBP\", \"USD\" ]\n    }, {\n      \"key\" : \"purpose-of-payment\",\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"predefinedValues\" : true\n    } ],\n    \"purposesOfPayment\" : [ {\n      \"code\" : \"PAYT/02123\",\n      \"description\" : \"Individual Payment\"\n    }, {\n      \"code\" : \"PAYT/02112\",\n      \"description\" : \"Trade related Payment\"\n    }, {\n      \"code\" : \"PAYT/02114\",\n      \"description\" : \"Service related Payment\"\n    } ]\n  }, {\n    \"country\" : \"GB\",\n    \"isDefault\" : true,\n    \"inputFormSettings\" : [ {\n      \"key\" : \"account-number\",\n      \"format\" : \"BBAN\",\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.counterpartyAccount.identification.identification\"\n    }, {\n      \"key\" : \"bank-code\",\n      \"label\" : {\n        \"sort-code\" : \"Sort code\"\n      },\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.counterpartyBank.bankBranchCode\",\n      \"regex\" : \"/^[0-9]{6}$/\"\n    }, {\n      \"key\" : \"currency\",\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.instructedAmount.currencyCode\",\n      \"values\" : [ \"EUR\", \"GBP\", \"USD\" ]\n    } ]\n  }, {\n    \"country\" : \"HK\",\n    \"inputFormSettings\" : [ {\n      \"key\" : \"account-number\",\n      \"format\" : \"BBAN\",\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.counterpartyAccount.identification.identification\"\n    }, {\n      \"key\" : \"bank-code\",\n      \"label\" : {\n        \"clearing\" : \"Clearing code\"\n      },\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.counterpartyBank.bankBranchCode\",\n      \"regex\" : \"/^[0-9]{3}$/\"\n    }, {\n      \"key\" : \"currency\",\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.instructedAmount.currencyCode\",\n      \"values\" : [ \"HKD\", \"EUR\", \"GBP\", \"USD\" ]\n    } ]\n  }, {\n    \"country\" : \"IN\",\n    \"inputFormSettings\" : [ {\n      \"key\" : \"account-number\",\n      \"format\" : \"BBAN\",\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.counterpartyAccount.identification.identification\"\n    }, {\n      \"key\" : \"bank-code\",\n      \"label\" : {\n        \"ifsc\" : \"IFSC\"\n      },\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.counterpartyBank.bankBranchCode\",\n      \"regex\" : \"/^[a-zA-Z0-9]{3}$/\"\n    }, {\n      \"key\" : \"currency\",\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.instructedAmount.currencyCode\",\n      \"values\" : [ \"INR\", \"EUR\", \"GBP\", \"USD\" ]\n    }, {\n      \"key\" : \"purpose-of-payment\",\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"predefinedValues\" : true\n    } ],\n    \"purposesOfPayment\" : [ {\n      \"code\" : \"P1004\",\n      \"description\" : \"Legal services\"\n    }, {\n      \"code\" : \"P0401\",\n      \"description\" : \"Postal services\"\n    }, {\n      \"code\" : \"P0402\",\n      \"description\" : \"Courier services\"\n    } ]\n  }, {\n    \"country\" : \"JO\",\n    \"inputFormSettings\" : [ {\n      \"key\" : \"account-number\",\n      \"format\" : \"IBAN\",\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.counterpartyAccount.identification.identification\",\n      \"regex\" : \"/^[a-zA-Z0-9]{30}$/\"\n    }, {\n      \"key\" : \"bank-code\",\n      \"notApplicable\" : true,\n      \"apiField\" : \"transferTransactionInformation.counterpartyBank.bankBranchCode\"\n    }, {\n      \"key\" : \"currency\",\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.instructedAmount.currencyCode\",\n      \"values\" : [ \"JOD\", \"EUR\", \"GBP\", \"USD\" ]\n    } ]\n  }, {\n    \"country\" : \"JP\",\n    \"inputFormSettings\" : [ {\n      \"key\" : \"account-number\",\n      \"format\" : \"BBAN\",\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.counterpartyAccount.identification.identification\"\n    }, {\n      \"key\" : \"bank-code\",\n      \"notApplicable\" : true,\n      \"apiField\" : \"transferTransactionInformation.counterpartyBank.bankBranchCode\"\n    }, {\n      \"key\" : \"currency\",\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.instructedAmount.currencyCode\",\n      \"values\" : [ \"JPY\", \"EUR\", \"GBP\", \"USD\" ]\n    } ]\n  }, {\n    \"country\" : \"NL\",\n    \"inputFormSettings\" : [ {\n      \"key\" : \"account-number\",\n      \"format\" : \"IBAN\",\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.counterpartyAccount.identification.identification\",\n      \"regex\" : \"/^[a-zA-Z0-9]{18}$/\"\n    }, {\n      \"key\" : \"bank-code\",\n      \"notApplicable\" : true,\n      \"apiField\" : \"transferTransactionInformation.counterpartyBank.bankBranchCode\"\n    }, {\n      \"key\" : \"currency\",\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.instructedAmount.currencyCode\",\n      \"values\" : [ \"EUR\", \"GBP\", \"USD\" ]\n    } ]\n  }, {\n    \"country\" : \"RU\",\n    \"inputFormSettings\" : [ {\n      \"key\" : \"account-number\",\n      \"format\" : \"BBAN\",\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.counterpartyAccount.identification.identification\"\n    }, {\n      \"key\" : \"bank-code\",\n      \"label\" : {\n        \"bik\" : \"BIK\"\n      },\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.counterpartyBank.bankBranchCode\",\n      \"regex\" : \"/^[0-9]{9}$/\"\n    }, {\n      \"key\" : \"currency\",\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.instructedAmount.currencyCode\",\n      \"values\" : [ \"RUB\", \"EUR\", \"GBP\", \"USD\" ]\n    }, {\n      \"key\" : \"purpose-of-payment\",\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"predefinedValues\" : true\n    } ],\n    \"purposesOfPayment\" : [ {\n      \"code\" : \"01010\",\n      \"description\" : \"Selling by Residents of foreign currencies for Russian Roubles\"\n    }, {\n      \"code\" : \"99010\",\n      \"description\" : \"The return to Residents, of erroneously debited (credited) funds\"\n    }, {\n      \"code\" : \"01030\",\n      \"description\" : \"Purchases by Residents of foreign currencies for Russian Roubles\"\n    } ]\n  }, {\n    \"country\" : \"SA\",\n    \"inputFormSettings\" : [ {\n      \"key\" : \"account-number\",\n      \"format\" : \"BBAN\",\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.counterpartyAccount.identification.identification\"\n    }, {\n      \"key\" : \"bank-code\",\n      \"label\" : {\n        \"za-code\" : \"ZA code\"\n      },\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.counterpartyBank.bankBranchCode\",\n      \"regex\" : \"/^[0-9]{6}$/\"\n    }, {\n      \"key\" : \"currency\",\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.instructedAmount.currencyCode\",\n      \"values\" : [ \"ZAR\", \"EUR\", \"GBP\", \"USD\" ]\n    } ]\n  }, {\n    \"country\" : \"SG\",\n    \"inputFormSettings\" : [ {\n      \"key\" : \"account-number\",\n      \"format\" : \"BBAN\",\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.counterpartyAccount.identification.identification\"\n    }, {\n      \"key\" : \"bank-code\",\n      \"notApplicable\" : true,\n      \"apiField\" : \"transferTransactionInformation.counterpartyBank.bankBranchCode\"\n    }, {\n      \"key\" : \"currency\",\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.instructedAmount.currencyCode\",\n      \"values\" : [ \"SGD\", \"EUR\", \"GBP\", \"USD\" ]\n    } ]\n  }, {\n    \"country\" : \"US\",\n    \"inputFormSettings\" : [ {\n      \"key\" : \"account-number\",\n      \"format\" : \"BBAN\",\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.counterpartyAccount.identification.identification\"\n    }, {\n      \"key\" : \"bank-code\",\n      \"label\" : {\n        \"routing-number\" : \"Routing transit number (ABA)\"\n      },\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.counterpartyBank.bankBranchCode\",\n      \"regex\" : \"/^[0-9]{9}$/\"\n    }, {\n      \"key\" : \"currency\",\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.instructedAmount.currencyCode\",\n      \"values\" : [ \"EUR\", \"GBP\", \"USD\" ]\n    } ]\n  } ]\n}\n                },\n                {\n                    status: 500,\n                    body: {\n  \"message\" : \"Description of error\"\n}\n                },\n    ]\n}]);\n\nexport const SanctionedCountriesHttpServiceMocksProvider: Provider = createMocks(\n    [\n    {\n        urlPattern: \"/client-api/v1/sanctioned-countries\",\n        method: \"GET\",\n        responses: [\n\n            {\n                status: 200,\n                body: {\n  \"countries\" : [ {\n    \"country\" : \"AE\",\n    \"inputFormSettings\" : [ {\n      \"key\" : \"account-number\",\n      \"format\" : \"IBAN\",\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.counterpartyAccount.identification.identification\",\n      \"regex\" : \"/^[a-zA-Z0-9]{23}$/\"\n    }, {\n      \"key\" : \"bank-code\",\n      \"notApplicable\" : true,\n      \"apiField\" : \"transferTransactionInformation.counterpartyBank.bankBranchCode\"\n    }, {\n      \"key\" : \"currency\",\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.instructedAmount.currencyCode\",\n      \"values\" : [ \"AED\", \"EUR\", \"GBP\", \"USD\" ]\n    } ]\n  }, {\n    \"country\" : \"AU\",\n    \"inputFormSettings\" : [ {\n      \"key\" : \"account-number\",\n      \"format\" : \"BBAN\",\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.counterpartyAccount.identification.identification\"\n    }, {\n      \"key\" : \"bank-code\",\n      \"label\" : {\n        \"bsb\" : \"BSB code\"\n      },\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.counterpartyBank.bankBranchCode\",\n      \"regex\" : \"/^[0-9]{6}$/\"\n    }, {\n      \"key\" : \"currency\",\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.instructedAmount.currencyCode\",\n      \"values\" : [ \"AUD\", \"EUR\", \"GBP\", \"USD\" ]\n    } ]\n  }, {\n    \"country\" : \"BR\",\n    \"inputFormSettings\" : [ {\n      \"key\" : \"account-number\",\n      \"format\" : \"IBAN\",\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.counterpartyAccount.identification.identification\",\n      \"regex\" : \"/^[a-zA-Z0-9]{29}$/\"\n    }, {\n      \"key\" : \"bank-code\",\n      \"notApplicable\" : true,\n      \"apiField\" : \"transferTransactionInformation.counterpartyBank.bankBranchCode\"\n    }, {\n      \"key\" : \"currency\",\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.instructedAmount.currencyCode\",\n      \"values\" : [ \"BRL\", \"EUR\", \"GBP\", \"USD\" ]\n    }, {\n      \"key\" : \"purpose-of-payment\",\n      \"mandatory\" : true\n    } ]\n  }, {\n    \"country\" : \"CA\",\n    \"inputFormSettings\" : [ {\n      \"key\" : \"account-number\",\n      \"format\" : \"BBAN\",\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.counterpartyAccount.identification.identification\"\n    }, {\n      \"key\" : \"bank-code\",\n      \"label\" : {\n        \"routing-number\" : \"Routing number\"\n      },\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.counterpartyBank.bankBranchCode\",\n      \"regex\" : \"/^[0-9]{9}$/\"\n    }, {\n      \"key\" : \"currency\",\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.instructedAmount.currencyCode\",\n      \"values\" : [ \"CAD\", \"EUR\", \"GBP\", \"USD\" ]\n    } ]\n  }, {\n    \"country\" : \"CN\",\n    \"inputFormSettings\" : [ {\n      \"key\" : \"account-number\",\n      \"format\" : \"BBAN\",\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.counterpartyAccount.identification.identification\"\n    }, {\n      \"key\" : \"currency\",\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.instructedAmount.currencyCode\",\n      \"values\" : [ \"EUR\", \"GBP\", \"USD\" ]\n    }, {\n      \"key\" : \"purpose-of-payment\",\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"predefinedValues\" : true\n    } ],\n    \"purposesOfPayment\" : [ {\n      \"code\" : \"PAYT/02123\",\n      \"description\" : \"Individual Payment\"\n    }, {\n      \"code\" : \"PAYT/02112\",\n      \"description\" : \"Trade related Payment\"\n    }, {\n      \"code\" : \"PAYT/02114\",\n      \"description\" : \"Service related Payment\"\n    } ]\n  }, {\n    \"country\" : \"GB\",\n    \"isDefault\" : true,\n    \"inputFormSettings\" : [ {\n      \"key\" : \"account-number\",\n      \"format\" : \"BBAN\",\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.counterpartyAccount.identification.identification\"\n    }, {\n      \"key\" : \"bank-code\",\n      \"label\" : {\n        \"sort-code\" : \"Sort code\"\n      },\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.counterpartyBank.bankBranchCode\",\n      \"regex\" : \"/^[0-9]{6}$/\"\n    }, {\n      \"key\" : \"currency\",\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.instructedAmount.currencyCode\",\n      \"values\" : [ \"EUR\", \"GBP\", \"USD\" ]\n    } ]\n  }, {\n    \"country\" : \"HK\",\n    \"inputFormSettings\" : [ {\n      \"key\" : \"account-number\",\n      \"format\" : \"BBAN\",\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.counterpartyAccount.identification.identification\"\n    }, {\n      \"key\" : \"bank-code\",\n      \"label\" : {\n        \"clearing\" : \"Clearing code\"\n      },\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.counterpartyBank.bankBranchCode\",\n      \"regex\" : \"/^[0-9]{3}$/\"\n    }, {\n      \"key\" : \"currency\",\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.instructedAmount.currencyCode\",\n      \"values\" : [ \"HKD\", \"EUR\", \"GBP\", \"USD\" ]\n    } ]\n  }, {\n    \"country\" : \"IN\",\n    \"inputFormSettings\" : [ {\n      \"key\" : \"account-number\",\n      \"format\" : \"BBAN\",\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.counterpartyAccount.identification.identification\"\n    }, {\n      \"key\" : \"bank-code\",\n      \"label\" : {\n        \"ifsc\" : \"IFSC\"\n      },\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.counterpartyBank.bankBranchCode\",\n      \"regex\" : \"/^[a-zA-Z0-9]{3}$/\"\n    }, {\n      \"key\" : \"currency\",\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.instructedAmount.currencyCode\",\n      \"values\" : [ \"INR\", \"EUR\", \"GBP\", \"USD\" ]\n    }, {\n      \"key\" : \"purpose-of-payment\",\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"predefinedValues\" : true\n    } ],\n    \"purposesOfPayment\" : [ {\n      \"code\" : \"P1004\",\n      \"description\" : \"Legal services\"\n    }, {\n      \"code\" : \"P0401\",\n      \"description\" : \"Postal services\"\n    }, {\n      \"code\" : \"P0402\",\n      \"description\" : \"Courier services\"\n    } ]\n  }, {\n    \"country\" : \"JO\",\n    \"inputFormSettings\" : [ {\n      \"key\" : \"account-number\",\n      \"format\" : \"IBAN\",\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.counterpartyAccount.identification.identification\",\n      \"regex\" : \"/^[a-zA-Z0-9]{30}$/\"\n    }, {\n      \"key\" : \"bank-code\",\n      \"notApplicable\" : true,\n      \"apiField\" : \"transferTransactionInformation.counterpartyBank.bankBranchCode\"\n    }, {\n      \"key\" : \"currency\",\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.instructedAmount.currencyCode\",\n      \"values\" : [ \"JOD\", \"EUR\", \"GBP\", \"USD\" ]\n    } ]\n  }, {\n    \"country\" : \"JP\",\n    \"inputFormSettings\" : [ {\n      \"key\" : \"account-number\",\n      \"format\" : \"BBAN\",\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.counterpartyAccount.identification.identification\"\n    }, {\n      \"key\" : \"bank-code\",\n      \"notApplicable\" : true,\n      \"apiField\" : \"transferTransactionInformation.counterpartyBank.bankBranchCode\"\n    }, {\n      \"key\" : \"currency\",\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.instructedAmount.currencyCode\",\n      \"values\" : [ \"JPY\", \"EUR\", \"GBP\", \"USD\" ]\n    } ]\n  }, {\n    \"country\" : \"NL\",\n    \"inputFormSettings\" : [ {\n      \"key\" : \"account-number\",\n      \"format\" : \"IBAN\",\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.counterpartyAccount.identification.identification\",\n      \"regex\" : \"/^[a-zA-Z0-9]{18}$/\"\n    }, {\n      \"key\" : \"bank-code\",\n      \"notApplicable\" : true,\n      \"apiField\" : \"transferTransactionInformation.counterpartyBank.bankBranchCode\"\n    }, {\n      \"key\" : \"currency\",\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.instructedAmount.currencyCode\",\n      \"values\" : [ \"EUR\", \"GBP\", \"USD\" ]\n    } ]\n  }, {\n    \"country\" : \"RU\",\n    \"inputFormSettings\" : [ {\n      \"key\" : \"account-number\",\n      \"format\" : \"BBAN\",\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.counterpartyAccount.identification.identification\"\n    }, {\n      \"key\" : \"bank-code\",\n      \"label\" : {\n        \"bik\" : \"BIK\"\n      },\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.counterpartyBank.bankBranchCode\",\n      \"regex\" : \"/^[0-9]{9}$/\"\n    }, {\n      \"key\" : \"currency\",\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.instructedAmount.currencyCode\",\n      \"values\" : [ \"RUB\", \"EUR\", \"GBP\", \"USD\" ]\n    }, {\n      \"key\" : \"purpose-of-payment\",\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"predefinedValues\" : true\n    } ],\n    \"purposesOfPayment\" : [ {\n      \"code\" : \"01010\",\n      \"description\" : \"Selling by Residents of foreign currencies for Russian Roubles\"\n    }, {\n      \"code\" : \"99010\",\n      \"description\" : \"The return to Residents, of erroneously debited (credited) funds\"\n    }, {\n      \"code\" : \"01030\",\n      \"description\" : \"Purchases by Residents of foreign currencies for Russian Roubles\"\n    } ]\n  }, {\n    \"country\" : \"SA\",\n    \"inputFormSettings\" : [ {\n      \"key\" : \"account-number\",\n      \"format\" : \"BBAN\",\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.counterpartyAccount.identification.identification\"\n    }, {\n      \"key\" : \"bank-code\",\n      \"label\" : {\n        \"za-code\" : \"ZA code\"\n      },\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.counterpartyBank.bankBranchCode\",\n      \"regex\" : \"/^[0-9]{6}$/\"\n    }, {\n      \"key\" : \"currency\",\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.instructedAmount.currencyCode\",\n      \"values\" : [ \"ZAR\", \"EUR\", \"GBP\", \"USD\" ]\n    } ]\n  }, {\n    \"country\" : \"SG\",\n    \"inputFormSettings\" : [ {\n      \"key\" : \"account-number\",\n      \"format\" : \"BBAN\",\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.counterpartyAccount.identification.identification\"\n    }, {\n      \"key\" : \"bank-code\",\n      \"notApplicable\" : true,\n      \"apiField\" : \"transferTransactionInformation.counterpartyBank.bankBranchCode\"\n    }, {\n      \"key\" : \"currency\",\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.instructedAmount.currencyCode\",\n      \"values\" : [ \"SGD\", \"EUR\", \"GBP\", \"USD\" ]\n    } ]\n  }, {\n    \"country\" : \"US\",\n    \"inputFormSettings\" : [ {\n      \"key\" : \"account-number\",\n      \"format\" : \"BBAN\",\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.counterpartyAccount.identification.identification\"\n    }, {\n      \"key\" : \"bank-code\",\n      \"label\" : {\n        \"routing-number\" : \"Routing transit number (ABA)\"\n      },\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.counterpartyBank.bankBranchCode\",\n      \"regex\" : \"/^[0-9]{9}$/\"\n    }, {\n      \"key\" : \"currency\",\n      \"mandatory\" : true,\n      \"notApplicable\" : false,\n      \"apiField\" : \"transferTransactionInformation.instructedAmount.currencyCode\",\n      \"values\" : [ \"EUR\", \"GBP\", \"USD\" ]\n    } ]\n  } ]\n}\n            },\n\n            {\n                status: 500,\n                body: {\n  \"message\" : \"Description of error\"\n}\n            },\n    ]\n},\n]\n);\n\n\n","/**\n * Payment options client\n * Retrieve valid payment options based on the entered payment details. Retrieve valid countries and currencies for international payments.\n *\n * The version of the OpenAPI document: 1.2.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { InternalServerError } from '../model/models';\nimport { SanctionedCurrenciesResponse } from '../model/models';\n\nimport { PAYMENT_ORDER_OPTIONS_BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { PaymentOrderOptionsConfiguration }                                     from '../configuration';\n\n\nexport interface GetSanctionedCurrenciesRequestParams {\n    /** No description available */\n    [\"countryIso\"]?: string;\n}\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SanctionedCurrenciesHttpService {\n\n    protected basePath = '';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new PaymentOrderOptionsConfiguration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional() @Inject(PAYMENT_ORDER_OPTIONS_BASE_PATH) basePath: string, @Optional() configuration: PaymentOrderOptionsConfiguration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * This endpoint returns the configured allowed currencies for the given country code. If country code parameter is not present the settings for the country marked as default (if any) will be returned\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getSanctionedCurrencies(requestParameters: GetSanctionedCurrenciesRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<SanctionedCurrenciesResponse>;\n    /**\n     * This endpoint returns the configured allowed currencies for the given country code. If country code parameter is not present the settings for the country marked as default (if any) will be returned\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getSanctionedCurrencies(requestParameters: GetSanctionedCurrenciesRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<SanctionedCurrenciesResponse>>;\n    /**\n     * This endpoint returns the configured allowed currencies for the given country code. If country code parameter is not present the settings for the country marked as default (if any) will be returned\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getSanctionedCurrencies(requestParameters: GetSanctionedCurrenciesRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<SanctionedCurrenciesResponse>>;\n    /**\n     * This endpoint returns the configured allowed currencies for the given country code. If country code parameter is not present the settings for the country marked as default (if any) will be returned\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getSanctionedCurrencies(requestParameters: GetSanctionedCurrenciesRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _countryIso = requestParameters[\"countryIso\"];\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (_countryIso !== undefined && _countryIso !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_countryIso, 'countryIso');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<SanctionedCurrenciesResponse>(`${this.configuration.basePath}/client-api/v1/sanctioned-currencies`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public getSanctionedCurrenciesUrl(requestParameters: GetSanctionedCurrenciesRequestParams): string {\n        const _countryIso = requestParameters[\"countryIso\"];\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (_countryIso !== undefined && _countryIso !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_countryIso, 'countryIso');\n        }\n        const queryString = queryParameters.toString();\n        return `${this.configuration.basePath}/client-api/v1/sanctioned-currencies${queryString ? `?${queryString}` : ''}`;\n    }\n\n}\n","import { createMocks } from '@backbase/foundation-ang/data-http';\nimport { Provider } from '@angular/core';\n\n/**\n* Mocks provider for /client-api/v1/sanctioned-currencies URL pattern\n*/\nexport const SanctionedCurrenciesHttpServiceGetSanctionedCurrenciesMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/v1/sanctioned-currencies\",\n        method: \"GET\",\n        responses: [\n                {\n                    status: 200,\n                    body: {\n  \"default\" : {\n    \"code\" : \"GBP\",\n    \"decimals\" : 2\n  },\n  \"labeled\" : {\n    \"normal\" : [ {\n      \"code\" : \"AED\",\n      \"decimals\" : 2\n    }, {\n      \"code\" : \"AUD\",\n      \"decimals\" : 2\n    }, {\n      \"code\" : \"BRL\",\n      \"decimals\" : 2\n    }, {\n      \"code\" : \"CAD\",\n      \"decimals\" : 2\n    }, {\n      \"code\" : \"CNY\",\n      \"decimals\" : 2\n    }, {\n      \"code\" : \"HKD\",\n      \"decimals\" : 2\n    }, {\n      \"code\" : \"INR\",\n      \"decimals\" : 2\n    }, {\n      \"code\" : \"JPY\",\n      \"decimals\" : 0\n    }, {\n      \"code\" : \"JOD\",\n      \"decimals\" : 3\n    }, {\n      \"code\" : \"RUB\",\n      \"decimals\" : 2\n    }, {\n      \"code\" : \"SGD\",\n      \"decimals\" : 2\n    }, {\n      \"code\" : \"ZAR\",\n      \"decimals\" : 2\n    } ],\n    \"popular\" : [ {\n      \"code\" : \"EUR\",\n      \"decimals\" : 2\n    }, {\n      \"code\" : \"GBP\",\n      \"decimals\" : 2\n    }, {\n      \"code\" : \"USD\",\n      \"decimals\" : 2\n    } ]\n  }\n}\n                },\n                {\n                    status: 500,\n                    body: {\n  \"message\" : \"Description of error\"\n}\n                },\n    ]\n}]);\n\nexport const SanctionedCurrenciesHttpServiceMocksProvider: Provider = createMocks(\n    [\n    {\n        urlPattern: \"/client-api/v1/sanctioned-currencies\",\n        method: \"GET\",\n        responses: [\n\n            {\n                status: 200,\n                body: {\n  \"default\" : {\n    \"code\" : \"GBP\",\n    \"decimals\" : 2\n  },\n  \"labeled\" : {\n    \"normal\" : [ {\n      \"code\" : \"AED\",\n      \"decimals\" : 2\n    }, {\n      \"code\" : \"AUD\",\n      \"decimals\" : 2\n    }, {\n      \"code\" : \"BRL\",\n      \"decimals\" : 2\n    }, {\n      \"code\" : \"CAD\",\n      \"decimals\" : 2\n    }, {\n      \"code\" : \"CNY\",\n      \"decimals\" : 2\n    }, {\n      \"code\" : \"HKD\",\n      \"decimals\" : 2\n    }, {\n      \"code\" : \"INR\",\n      \"decimals\" : 2\n    }, {\n      \"code\" : \"JPY\",\n      \"decimals\" : 0\n    }, {\n      \"code\" : \"JOD\",\n      \"decimals\" : 3\n    }, {\n      \"code\" : \"RUB\",\n      \"decimals\" : 2\n    }, {\n      \"code\" : \"SGD\",\n      \"decimals\" : 2\n    }, {\n      \"code\" : \"ZAR\",\n      \"decimals\" : 2\n    } ],\n    \"popular\" : [ {\n      \"code\" : \"EUR\",\n      \"decimals\" : 2\n    }, {\n      \"code\" : \"GBP\",\n      \"decimals\" : 2\n    }, {\n      \"code\" : \"USD\",\n      \"decimals\" : 2\n    } ]\n  }\n}\n            },\n\n            {\n                status: 500,\n                body: {\n  \"message\" : \"Description of error\"\n}\n            },\n    ]\n},\n]\n);\n\n\n"],"names":["InjectionToken","NgModule","Optional","SkipSelf","HttpHeaders","Injectable","Inject","createMocks","HttpParams"],"mappings":"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"}