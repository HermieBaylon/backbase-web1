import * as i0 from '@angular/core';
import { InjectionToken, NgModule, Optional, SkipSelf, Injectable, Inject } from '@angular/core';
import * as i1 from '@angular/common/http';
import { HttpHeaders, HttpParams } from '@angular/common/http';
import * as i2 from '@backbase/foundation-ang/data-http';
import { createMocks } from '@backbase/foundation-ang/data-http';

const ChargeBearer = {
    OUR: 'OUR',
    BEN: 'BEN',
    SHA: 'SHA'
};

const InstructionPriority = {
    NORM: 'NORM',
    HIGH: 'HIGH'
};

const SchemeName = {
    IBAN: 'IBAN',
    BBAN: 'BBAN',
    ID: 'ID',
    EXTERNALID: 'EXTERNAL_ID'
};

const TimeFrameUnit = {
    HOUR: 'HOUR',
    CALENDARDAY: 'CALENDAR_DAY',
    BUSINESSDAY: 'BUSINESS_DAY'
};

const PAYMENT_ORDER_OPTIONS_BASE_PATH = new InjectionToken('PAYMENT_ORDER_OPTIONS_BASE_PATH');
const COLLECTION_FORMATS = {
    'csv': ',',
    'tsv': '   ',
    'ssv': ' ',
    'pipes': '|'
};

class PaymentOrderOptionsConfiguration {
    constructor(configurationParameters = {}) {
        this.apiKeys = configurationParameters.apiKeys;
        this.username = configurationParameters.username;
        this.password = configurationParameters.password;
        this.accessToken = configurationParameters.accessToken;
        this.basePath = configurationParameters.basePath;
        this.withCredentials = configurationParameters.withCredentials;
        this.encoder = configurationParameters.encoder;
        if (configurationParameters.credentials) {
            this.credentials = configurationParameters.credentials;
        }
        else {
            this.credentials = {};
        }
    }
    selectHeaderContentType(contentTypes) {
        if (contentTypes.length === 0) {
            return undefined;
        }
        const type = contentTypes.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return contentTypes[0];
        }
        return type;
    }
    selectHeaderAccept(accepts) {
        if (accepts.length === 0) {
            return undefined;
        }
        const type = accepts.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return accepts[0];
        }
        return type;
    }
    isJsonMime(mime) {
        const jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
    lookupCredential(key) {
        const value = this.credentials[key];
        return typeof value === 'function'
            ? value()
            : value;
    }
}
const CONFIG_TOKEN = new InjectionToken('api-data-module PaymentOrderOptionsConfiguration');

class PaymentOrderOptionsApiModule {
    constructor(parentModule, http, dataModulesManager, config) {
        if (parentModule) {
            throw new Error('PaymentOrderOptionsApiModule is already loaded. Import in your base AppModule only.');
        }
        if (!http) {
            throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                'See also https://github.com/angular/angular/issues/20575');
        }
        if (dataModulesManager) {
            dataModulesManager.setModuleConfig(CONFIG_TOKEN, {
                apiRoot: '',
                servicePath: config.basePath || '',
                headers: {},
            });
        }
    }
    static forRoot(configurationFactory) {
        return {
            ngModule: PaymentOrderOptionsApiModule,
            providers: [{ provide: PaymentOrderOptionsConfiguration, useFactory: configurationFactory }]
        };
    }
}
PaymentOrderOptionsApiModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentOrderOptionsApiModule, deps: [{ token: PaymentOrderOptionsApiModule, optional: true, skipSelf: true }, { token: i1.HttpClient, optional: true }, { token: i2.DataModulesManager, optional: true }, { token: PaymentOrderOptionsConfiguration }], target: i0.ɵɵFactoryTarget.NgModule });
PaymentOrderOptionsApiModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentOrderOptionsApiModule });
PaymentOrderOptionsApiModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentOrderOptionsApiModule, providers: [], imports: [[]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentOrderOptionsApiModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [],
                    declarations: [],
                    exports: [],
                    providers: []
                }]
        }], ctorParameters: function () { return [{ type: PaymentOrderOptionsApiModule, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: i1.HttpClient, decorators: [{
                    type: Optional
                }] }, { type: i2.DataModulesManager, decorators: [{
                    type: Optional
                }] }, { type: PaymentOrderOptionsConfiguration }]; } });

class CustomHttpParameterCodec {
    encodeKey(k) {
        return encodeURIComponent(k);
    }
    encodeValue(v) {
        return encodeURIComponent(v);
    }
    decodeKey(k) {
        return decodeURIComponent(k);
    }
    decodeValue(v) {
        return decodeURIComponent(v);
    }
}

class PaymentOptionsHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new PaymentOrderOptionsConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    getPaymentOptionsByPaymentType(requestParameters, observe = 'body', reportProgress = false, options) {
        const _paymentType = requestParameters["paymentType"];
        if (_paymentType === null || _paymentType === undefined) {
            throw new Error('Required parameter paymentType was null or undefined when calling getPaymentOptionsByPaymentType.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/payment-options/${encodeURIComponent(String(_paymentType))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getPaymentOptionsByPaymentTypeUrl(requestParameters) {
        const _paymentType = requestParameters["paymentType"];
        if (_paymentType === null || _paymentType === undefined) {
            throw new Error('Required parameter paymentType was null or undefined when calling getPaymentOptionsByPaymentType.');
        }
        return `${this.configuration.basePath}/client-api/v1/payment-options/${encodeURIComponent(String(_paymentType))}`;
    }
    postPaymentOptions(requestParameters, observe = 'body', reportProgress = false, options) {
        const _paymentOptionsRequest = requestParameters["paymentOptionsRequest"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v1/payment-options`, _paymentOptionsRequest, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postPaymentOptionsUrl(requestParameters) {
        const _paymentOptionsRequest = requestParameters["paymentOptionsRequest"];
        return `${this.configuration.basePath}/client-api/v1/payment-options`;
    }
}
PaymentOptionsHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentOptionsHttpService, deps: [{ token: i1.HttpClient }, { token: PAYMENT_ORDER_OPTIONS_BASE_PATH, optional: true }, { token: PaymentOrderOptionsConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
PaymentOptionsHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentOptionsHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentOptionsHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [PAYMENT_ORDER_OPTIONS_BASE_PATH]
                }] }, { type: PaymentOrderOptionsConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const PaymentOptionsHttpServiceGetPaymentOptionsByPaymentTypeMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/payment-options/{paymentType}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "paymentType": "US_FOREIGN_WIRE",
                    "canEditCounterparty": true,
                    "paymentOptions": [{
                            "instructionPriority": "NORM",
                            "transferFee": {
                                "amount": "15.29",
                                "currencyCode": "USD"
                            },
                            "chargeBearer": ["OUR", "SHA"],
                            "executionTimeFrame": {
                                "unit": "BUSINESS_DAY",
                                "max": 1
                            },
                            "cutOffTime": "16:00"
                        }, {
                            "instructionPriority": "HIGH",
                            "transferFee": {
                                "amount": "20.00",
                                "currencyCode": "USD"
                            },
                            "chargeBearer": ["OUR", "SHA"],
                            "executionTimeFrame": {
                                "unit": "HOUR",
                                "min": 1,
                                "max": 2
                            },
                            "cutOffTime": "16:00"
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const PaymentOptionsHttpServicePostPaymentOptionsMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/payment-options",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {
                    "options": [{
                            "paymentType": "US_FOREIGN_WIRE",
                            "paymentOptions": [{
                                    "instructionPriority": "NORM",
                                    "transferFee": {
                                        "amount": "15.29",
                                        "currencyCode": "USD"
                                    },
                                    "chargeBearer": ["OUR", "SHA"],
                                    "executionTimeFrame": {
                                        "unit": "BUSINESS_DAY",
                                        "max": 1
                                    },
                                    "cutOffTime": "16:00"
                                }, {
                                    "instructionPriority": "HIGH",
                                    "transferFee": {
                                        "amount": "20.00",
                                        "currencyCode": "USD"
                                    },
                                    "chargeBearer": ["OUR", "SHA"],
                                    "executionTimeFrame": {
                                        "unit": "HOUR",
                                        "min": 1,
                                        "max": 2
                                    },
                                    "cutOffTime": "16:00"
                                }]
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
        ]
    }]);
const PaymentOptionsHttpServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v1/payment-options/{paymentType}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "paymentType": "US_FOREIGN_WIRE",
                    "canEditCounterparty": true,
                    "paymentOptions": [{
                            "instructionPriority": "NORM",
                            "transferFee": {
                                "amount": "15.29",
                                "currencyCode": "USD"
                            },
                            "chargeBearer": ["OUR", "SHA"],
                            "executionTimeFrame": {
                                "unit": "BUSINESS_DAY",
                                "max": 1
                            },
                            "cutOffTime": "16:00"
                        }, {
                            "instructionPriority": "HIGH",
                            "transferFee": {
                                "amount": "20.00",
                                "currencyCode": "USD"
                            },
                            "chargeBearer": ["OUR", "SHA"],
                            "executionTimeFrame": {
                                "unit": "HOUR",
                                "min": 1,
                                "max": 2
                            },
                            "cutOffTime": "16:00"
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/payment-options",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {
                    "options": [{
                            "paymentType": "US_FOREIGN_WIRE",
                            "paymentOptions": [{
                                    "instructionPriority": "NORM",
                                    "transferFee": {
                                        "amount": "15.29",
                                        "currencyCode": "USD"
                                    },
                                    "chargeBearer": ["OUR", "SHA"],
                                    "executionTimeFrame": {
                                        "unit": "BUSINESS_DAY",
                                        "max": 1
                                    },
                                    "cutOffTime": "16:00"
                                }, {
                                    "instructionPriority": "HIGH",
                                    "transferFee": {
                                        "amount": "20.00",
                                        "currencyCode": "USD"
                                    },
                                    "chargeBearer": ["OUR", "SHA"],
                                    "executionTimeFrame": {
                                        "unit": "HOUR",
                                        "min": 1,
                                        "max": 2
                                    },
                                    "cutOffTime": "16:00"
                                }]
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
        ]
    },
]);

class SanctionedCountriesHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new PaymentOrderOptionsConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    getSanctionedCountries(requestParameters, observe = 'body', reportProgress = false, options) {
        const _countryIso = requestParameters["countryIso"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_countryIso !== undefined && _countryIso !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _countryIso, 'countryIso');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/sanctioned-countries`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getSanctionedCountriesUrl(requestParameters) {
        const _countryIso = requestParameters["countryIso"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_countryIso !== undefined && _countryIso !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _countryIso, 'countryIso');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v1/sanctioned-countries${queryString ? `?${queryString}` : ''}`;
    }
}
SanctionedCountriesHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: SanctionedCountriesHttpService, deps: [{ token: i1.HttpClient }, { token: PAYMENT_ORDER_OPTIONS_BASE_PATH, optional: true }, { token: PaymentOrderOptionsConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
SanctionedCountriesHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: SanctionedCountriesHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: SanctionedCountriesHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [PAYMENT_ORDER_OPTIONS_BASE_PATH]
                }] }, { type: PaymentOrderOptionsConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const SanctionedCountriesHttpServiceGetSanctionedCountriesMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/sanctioned-countries",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "countries": [{
                            "country": "AE",
                            "inputFormSettings": [{
                                    "key": "account-number",
                                    "format": "IBAN",
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.counterpartyAccount.identification.identification",
                                    "regex": "/^[a-zA-Z0-9]{23}$/"
                                }, {
                                    "key": "bank-code",
                                    "notApplicable": true,
                                    "apiField": "transferTransactionInformation.counterpartyBank.bankBranchCode"
                                }, {
                                    "key": "currency",
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.instructedAmount.currencyCode",
                                    "values": ["AED", "EUR", "GBP", "USD"]
                                }]
                        }, {
                            "country": "AU",
                            "inputFormSettings": [{
                                    "key": "account-number",
                                    "format": "BBAN",
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.counterpartyAccount.identification.identification"
                                }, {
                                    "key": "bank-code",
                                    "label": {
                                        "bsb": "BSB code"
                                    },
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.counterpartyBank.bankBranchCode",
                                    "regex": "/^[0-9]{6}$/"
                                }, {
                                    "key": "currency",
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.instructedAmount.currencyCode",
                                    "values": ["AUD", "EUR", "GBP", "USD"]
                                }]
                        }, {
                            "country": "BR",
                            "inputFormSettings": [{
                                    "key": "account-number",
                                    "format": "IBAN",
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.counterpartyAccount.identification.identification",
                                    "regex": "/^[a-zA-Z0-9]{29}$/"
                                }, {
                                    "key": "bank-code",
                                    "notApplicable": true,
                                    "apiField": "transferTransactionInformation.counterpartyBank.bankBranchCode"
                                }, {
                                    "key": "currency",
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.instructedAmount.currencyCode",
                                    "values": ["BRL", "EUR", "GBP", "USD"]
                                }, {
                                    "key": "purpose-of-payment",
                                    "mandatory": true
                                }]
                        }, {
                            "country": "CA",
                            "inputFormSettings": [{
                                    "key": "account-number",
                                    "format": "BBAN",
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.counterpartyAccount.identification.identification"
                                }, {
                                    "key": "bank-code",
                                    "label": {
                                        "routing-number": "Routing number"
                                    },
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.counterpartyBank.bankBranchCode",
                                    "regex": "/^[0-9]{9}$/"
                                }, {
                                    "key": "currency",
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.instructedAmount.currencyCode",
                                    "values": ["CAD", "EUR", "GBP", "USD"]
                                }]
                        }, {
                            "country": "CN",
                            "inputFormSettings": [{
                                    "key": "account-number",
                                    "format": "BBAN",
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.counterpartyAccount.identification.identification"
                                }, {
                                    "key": "currency",
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.instructedAmount.currencyCode",
                                    "values": ["EUR", "GBP", "USD"]
                                }, {
                                    "key": "purpose-of-payment",
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "predefinedValues": true
                                }],
                            "purposesOfPayment": [{
                                    "code": "PAYT/02123",
                                    "description": "Individual Payment"
                                }, {
                                    "code": "PAYT/02112",
                                    "description": "Trade related Payment"
                                }, {
                                    "code": "PAYT/02114",
                                    "description": "Service related Payment"
                                }]
                        }, {
                            "country": "GB",
                            "isDefault": true,
                            "inputFormSettings": [{
                                    "key": "account-number",
                                    "format": "BBAN",
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.counterpartyAccount.identification.identification"
                                }, {
                                    "key": "bank-code",
                                    "label": {
                                        "sort-code": "Sort code"
                                    },
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.counterpartyBank.bankBranchCode",
                                    "regex": "/^[0-9]{6}$/"
                                }, {
                                    "key": "currency",
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.instructedAmount.currencyCode",
                                    "values": ["EUR", "GBP", "USD"]
                                }]
                        }, {
                            "country": "HK",
                            "inputFormSettings": [{
                                    "key": "account-number",
                                    "format": "BBAN",
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.counterpartyAccount.identification.identification"
                                }, {
                                    "key": "bank-code",
                                    "label": {
                                        "clearing": "Clearing code"
                                    },
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.counterpartyBank.bankBranchCode",
                                    "regex": "/^[0-9]{3}$/"
                                }, {
                                    "key": "currency",
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.instructedAmount.currencyCode",
                                    "values": ["HKD", "EUR", "GBP", "USD"]
                                }]
                        }, {
                            "country": "IN",
                            "inputFormSettings": [{
                                    "key": "account-number",
                                    "format": "BBAN",
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.counterpartyAccount.identification.identification"
                                }, {
                                    "key": "bank-code",
                                    "label": {
                                        "ifsc": "IFSC"
                                    },
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.counterpartyBank.bankBranchCode",
                                    "regex": "/^[a-zA-Z0-9]{3}$/"
                                }, {
                                    "key": "currency",
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.instructedAmount.currencyCode",
                                    "values": ["INR", "EUR", "GBP", "USD"]
                                }, {
                                    "key": "purpose-of-payment",
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "predefinedValues": true
                                }],
                            "purposesOfPayment": [{
                                    "code": "P1004",
                                    "description": "Legal services"
                                }, {
                                    "code": "P0401",
                                    "description": "Postal services"
                                }, {
                                    "code": "P0402",
                                    "description": "Courier services"
                                }]
                        }, {
                            "country": "JO",
                            "inputFormSettings": [{
                                    "key": "account-number",
                                    "format": "IBAN",
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.counterpartyAccount.identification.identification",
                                    "regex": "/^[a-zA-Z0-9]{30}$/"
                                }, {
                                    "key": "bank-code",
                                    "notApplicable": true,
                                    "apiField": "transferTransactionInformation.counterpartyBank.bankBranchCode"
                                }, {
                                    "key": "currency",
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.instructedAmount.currencyCode",
                                    "values": ["JOD", "EUR", "GBP", "USD"]
                                }]
                        }, {
                            "country": "JP",
                            "inputFormSettings": [{
                                    "key": "account-number",
                                    "format": "BBAN",
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.counterpartyAccount.identification.identification"
                                }, {
                                    "key": "bank-code",
                                    "notApplicable": true,
                                    "apiField": "transferTransactionInformation.counterpartyBank.bankBranchCode"
                                }, {
                                    "key": "currency",
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.instructedAmount.currencyCode",
                                    "values": ["JPY", "EUR", "GBP", "USD"]
                                }]
                        }, {
                            "country": "NL",
                            "inputFormSettings": [{
                                    "key": "account-number",
                                    "format": "IBAN",
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.counterpartyAccount.identification.identification",
                                    "regex": "/^[a-zA-Z0-9]{18}$/"
                                }, {
                                    "key": "bank-code",
                                    "notApplicable": true,
                                    "apiField": "transferTransactionInformation.counterpartyBank.bankBranchCode"
                                }, {
                                    "key": "currency",
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.instructedAmount.currencyCode",
                                    "values": ["EUR", "GBP", "USD"]
                                }]
                        }, {
                            "country": "RU",
                            "inputFormSettings": [{
                                    "key": "account-number",
                                    "format": "BBAN",
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.counterpartyAccount.identification.identification"
                                }, {
                                    "key": "bank-code",
                                    "label": {
                                        "bik": "BIK"
                                    },
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.counterpartyBank.bankBranchCode",
                                    "regex": "/^[0-9]{9}$/"
                                }, {
                                    "key": "currency",
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.instructedAmount.currencyCode",
                                    "values": ["RUB", "EUR", "GBP", "USD"]
                                }, {
                                    "key": "purpose-of-payment",
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "predefinedValues": true
                                }],
                            "purposesOfPayment": [{
                                    "code": "01010",
                                    "description": "Selling by Residents of foreign currencies for Russian Roubles"
                                }, {
                                    "code": "99010",
                                    "description": "The return to Residents, of erroneously debited (credited) funds"
                                }, {
                                    "code": "01030",
                                    "description": "Purchases by Residents of foreign currencies for Russian Roubles"
                                }]
                        }, {
                            "country": "SA",
                            "inputFormSettings": [{
                                    "key": "account-number",
                                    "format": "BBAN",
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.counterpartyAccount.identification.identification"
                                }, {
                                    "key": "bank-code",
                                    "label": {
                                        "za-code": "ZA code"
                                    },
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.counterpartyBank.bankBranchCode",
                                    "regex": "/^[0-9]{6}$/"
                                }, {
                                    "key": "currency",
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.instructedAmount.currencyCode",
                                    "values": ["ZAR", "EUR", "GBP", "USD"]
                                }]
                        }, {
                            "country": "SG",
                            "inputFormSettings": [{
                                    "key": "account-number",
                                    "format": "BBAN",
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.counterpartyAccount.identification.identification"
                                }, {
                                    "key": "bank-code",
                                    "notApplicable": true,
                                    "apiField": "transferTransactionInformation.counterpartyBank.bankBranchCode"
                                }, {
                                    "key": "currency",
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.instructedAmount.currencyCode",
                                    "values": ["SGD", "EUR", "GBP", "USD"]
                                }]
                        }, {
                            "country": "US",
                            "inputFormSettings": [{
                                    "key": "account-number",
                                    "format": "BBAN",
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.counterpartyAccount.identification.identification"
                                }, {
                                    "key": "bank-code",
                                    "label": {
                                        "routing-number": "Routing transit number (ABA)"
                                    },
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.counterpartyBank.bankBranchCode",
                                    "regex": "/^[0-9]{9}$/"
                                }, {
                                    "key": "currency",
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.instructedAmount.currencyCode",
                                    "values": ["EUR", "GBP", "USD"]
                                }]
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const SanctionedCountriesHttpServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v1/sanctioned-countries",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "countries": [{
                            "country": "AE",
                            "inputFormSettings": [{
                                    "key": "account-number",
                                    "format": "IBAN",
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.counterpartyAccount.identification.identification",
                                    "regex": "/^[a-zA-Z0-9]{23}$/"
                                }, {
                                    "key": "bank-code",
                                    "notApplicable": true,
                                    "apiField": "transferTransactionInformation.counterpartyBank.bankBranchCode"
                                }, {
                                    "key": "currency",
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.instructedAmount.currencyCode",
                                    "values": ["AED", "EUR", "GBP", "USD"]
                                }]
                        }, {
                            "country": "AU",
                            "inputFormSettings": [{
                                    "key": "account-number",
                                    "format": "BBAN",
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.counterpartyAccount.identification.identification"
                                }, {
                                    "key": "bank-code",
                                    "label": {
                                        "bsb": "BSB code"
                                    },
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.counterpartyBank.bankBranchCode",
                                    "regex": "/^[0-9]{6}$/"
                                }, {
                                    "key": "currency",
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.instructedAmount.currencyCode",
                                    "values": ["AUD", "EUR", "GBP", "USD"]
                                }]
                        }, {
                            "country": "BR",
                            "inputFormSettings": [{
                                    "key": "account-number",
                                    "format": "IBAN",
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.counterpartyAccount.identification.identification",
                                    "regex": "/^[a-zA-Z0-9]{29}$/"
                                }, {
                                    "key": "bank-code",
                                    "notApplicable": true,
                                    "apiField": "transferTransactionInformation.counterpartyBank.bankBranchCode"
                                }, {
                                    "key": "currency",
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.instructedAmount.currencyCode",
                                    "values": ["BRL", "EUR", "GBP", "USD"]
                                }, {
                                    "key": "purpose-of-payment",
                                    "mandatory": true
                                }]
                        }, {
                            "country": "CA",
                            "inputFormSettings": [{
                                    "key": "account-number",
                                    "format": "BBAN",
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.counterpartyAccount.identification.identification"
                                }, {
                                    "key": "bank-code",
                                    "label": {
                                        "routing-number": "Routing number"
                                    },
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.counterpartyBank.bankBranchCode",
                                    "regex": "/^[0-9]{9}$/"
                                }, {
                                    "key": "currency",
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.instructedAmount.currencyCode",
                                    "values": ["CAD", "EUR", "GBP", "USD"]
                                }]
                        }, {
                            "country": "CN",
                            "inputFormSettings": [{
                                    "key": "account-number",
                                    "format": "BBAN",
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.counterpartyAccount.identification.identification"
                                }, {
                                    "key": "currency",
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.instructedAmount.currencyCode",
                                    "values": ["EUR", "GBP", "USD"]
                                }, {
                                    "key": "purpose-of-payment",
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "predefinedValues": true
                                }],
                            "purposesOfPayment": [{
                                    "code": "PAYT/02123",
                                    "description": "Individual Payment"
                                }, {
                                    "code": "PAYT/02112",
                                    "description": "Trade related Payment"
                                }, {
                                    "code": "PAYT/02114",
                                    "description": "Service related Payment"
                                }]
                        }, {
                            "country": "GB",
                            "isDefault": true,
                            "inputFormSettings": [{
                                    "key": "account-number",
                                    "format": "BBAN",
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.counterpartyAccount.identification.identification"
                                }, {
                                    "key": "bank-code",
                                    "label": {
                                        "sort-code": "Sort code"
                                    },
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.counterpartyBank.bankBranchCode",
                                    "regex": "/^[0-9]{6}$/"
                                }, {
                                    "key": "currency",
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.instructedAmount.currencyCode",
                                    "values": ["EUR", "GBP", "USD"]
                                }]
                        }, {
                            "country": "HK",
                            "inputFormSettings": [{
                                    "key": "account-number",
                                    "format": "BBAN",
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.counterpartyAccount.identification.identification"
                                }, {
                                    "key": "bank-code",
                                    "label": {
                                        "clearing": "Clearing code"
                                    },
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.counterpartyBank.bankBranchCode",
                                    "regex": "/^[0-9]{3}$/"
                                }, {
                                    "key": "currency",
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.instructedAmount.currencyCode",
                                    "values": ["HKD", "EUR", "GBP", "USD"]
                                }]
                        }, {
                            "country": "IN",
                            "inputFormSettings": [{
                                    "key": "account-number",
                                    "format": "BBAN",
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.counterpartyAccount.identification.identification"
                                }, {
                                    "key": "bank-code",
                                    "label": {
                                        "ifsc": "IFSC"
                                    },
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.counterpartyBank.bankBranchCode",
                                    "regex": "/^[a-zA-Z0-9]{3}$/"
                                }, {
                                    "key": "currency",
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.instructedAmount.currencyCode",
                                    "values": ["INR", "EUR", "GBP", "USD"]
                                }, {
                                    "key": "purpose-of-payment",
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "predefinedValues": true
                                }],
                            "purposesOfPayment": [{
                                    "code": "P1004",
                                    "description": "Legal services"
                                }, {
                                    "code": "P0401",
                                    "description": "Postal services"
                                }, {
                                    "code": "P0402",
                                    "description": "Courier services"
                                }]
                        }, {
                            "country": "JO",
                            "inputFormSettings": [{
                                    "key": "account-number",
                                    "format": "IBAN",
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.counterpartyAccount.identification.identification",
                                    "regex": "/^[a-zA-Z0-9]{30}$/"
                                }, {
                                    "key": "bank-code",
                                    "notApplicable": true,
                                    "apiField": "transferTransactionInformation.counterpartyBank.bankBranchCode"
                                }, {
                                    "key": "currency",
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.instructedAmount.currencyCode",
                                    "values": ["JOD", "EUR", "GBP", "USD"]
                                }]
                        }, {
                            "country": "JP",
                            "inputFormSettings": [{
                                    "key": "account-number",
                                    "format": "BBAN",
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.counterpartyAccount.identification.identification"
                                }, {
                                    "key": "bank-code",
                                    "notApplicable": true,
                                    "apiField": "transferTransactionInformation.counterpartyBank.bankBranchCode"
                                }, {
                                    "key": "currency",
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.instructedAmount.currencyCode",
                                    "values": ["JPY", "EUR", "GBP", "USD"]
                                }]
                        }, {
                            "country": "NL",
                            "inputFormSettings": [{
                                    "key": "account-number",
                                    "format": "IBAN",
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.counterpartyAccount.identification.identification",
                                    "regex": "/^[a-zA-Z0-9]{18}$/"
                                }, {
                                    "key": "bank-code",
                                    "notApplicable": true,
                                    "apiField": "transferTransactionInformation.counterpartyBank.bankBranchCode"
                                }, {
                                    "key": "currency",
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.instructedAmount.currencyCode",
                                    "values": ["EUR", "GBP", "USD"]
                                }]
                        }, {
                            "country": "RU",
                            "inputFormSettings": [{
                                    "key": "account-number",
                                    "format": "BBAN",
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.counterpartyAccount.identification.identification"
                                }, {
                                    "key": "bank-code",
                                    "label": {
                                        "bik": "BIK"
                                    },
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.counterpartyBank.bankBranchCode",
                                    "regex": "/^[0-9]{9}$/"
                                }, {
                                    "key": "currency",
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.instructedAmount.currencyCode",
                                    "values": ["RUB", "EUR", "GBP", "USD"]
                                }, {
                                    "key": "purpose-of-payment",
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "predefinedValues": true
                                }],
                            "purposesOfPayment": [{
                                    "code": "01010",
                                    "description": "Selling by Residents of foreign currencies for Russian Roubles"
                                }, {
                                    "code": "99010",
                                    "description": "The return to Residents, of erroneously debited (credited) funds"
                                }, {
                                    "code": "01030",
                                    "description": "Purchases by Residents of foreign currencies for Russian Roubles"
                                }]
                        }, {
                            "country": "SA",
                            "inputFormSettings": [{
                                    "key": "account-number",
                                    "format": "BBAN",
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.counterpartyAccount.identification.identification"
                                }, {
                                    "key": "bank-code",
                                    "label": {
                                        "za-code": "ZA code"
                                    },
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.counterpartyBank.bankBranchCode",
                                    "regex": "/^[0-9]{6}$/"
                                }, {
                                    "key": "currency",
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.instructedAmount.currencyCode",
                                    "values": ["ZAR", "EUR", "GBP", "USD"]
                                }]
                        }, {
                            "country": "SG",
                            "inputFormSettings": [{
                                    "key": "account-number",
                                    "format": "BBAN",
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.counterpartyAccount.identification.identification"
                                }, {
                                    "key": "bank-code",
                                    "notApplicable": true,
                                    "apiField": "transferTransactionInformation.counterpartyBank.bankBranchCode"
                                }, {
                                    "key": "currency",
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.instructedAmount.currencyCode",
                                    "values": ["SGD", "EUR", "GBP", "USD"]
                                }]
                        }, {
                            "country": "US",
                            "inputFormSettings": [{
                                    "key": "account-number",
                                    "format": "BBAN",
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.counterpartyAccount.identification.identification"
                                }, {
                                    "key": "bank-code",
                                    "label": {
                                        "routing-number": "Routing transit number (ABA)"
                                    },
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.counterpartyBank.bankBranchCode",
                                    "regex": "/^[0-9]{9}$/"
                                }, {
                                    "key": "currency",
                                    "mandatory": true,
                                    "notApplicable": false,
                                    "apiField": "transferTransactionInformation.instructedAmount.currencyCode",
                                    "values": ["EUR", "GBP", "USD"]
                                }]
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
]);

class SanctionedCurrenciesHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new PaymentOrderOptionsConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    getSanctionedCurrencies(requestParameters, observe = 'body', reportProgress = false, options) {
        const _countryIso = requestParameters["countryIso"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_countryIso !== undefined && _countryIso !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _countryIso, 'countryIso');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/sanctioned-currencies`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getSanctionedCurrenciesUrl(requestParameters) {
        const _countryIso = requestParameters["countryIso"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_countryIso !== undefined && _countryIso !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _countryIso, 'countryIso');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v1/sanctioned-currencies${queryString ? `?${queryString}` : ''}`;
    }
}
SanctionedCurrenciesHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: SanctionedCurrenciesHttpService, deps: [{ token: i1.HttpClient }, { token: PAYMENT_ORDER_OPTIONS_BASE_PATH, optional: true }, { token: PaymentOrderOptionsConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
SanctionedCurrenciesHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: SanctionedCurrenciesHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: SanctionedCurrenciesHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [PAYMENT_ORDER_OPTIONS_BASE_PATH]
                }] }, { type: PaymentOrderOptionsConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const SanctionedCurrenciesHttpServiceGetSanctionedCurrenciesMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/sanctioned-currencies",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "default": {
                        "code": "GBP",
                        "decimals": 2
                    },
                    "labeled": {
                        "normal": [{
                                "code": "AED",
                                "decimals": 2
                            }, {
                                "code": "AUD",
                                "decimals": 2
                            }, {
                                "code": "BRL",
                                "decimals": 2
                            }, {
                                "code": "CAD",
                                "decimals": 2
                            }, {
                                "code": "CNY",
                                "decimals": 2
                            }, {
                                "code": "HKD",
                                "decimals": 2
                            }, {
                                "code": "INR",
                                "decimals": 2
                            }, {
                                "code": "JPY",
                                "decimals": 0
                            }, {
                                "code": "JOD",
                                "decimals": 3
                            }, {
                                "code": "RUB",
                                "decimals": 2
                            }, {
                                "code": "SGD",
                                "decimals": 2
                            }, {
                                "code": "ZAR",
                                "decimals": 2
                            }],
                        "popular": [{
                                "code": "EUR",
                                "decimals": 2
                            }, {
                                "code": "GBP",
                                "decimals": 2
                            }, {
                                "code": "USD",
                                "decimals": 2
                            }]
                    }
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const SanctionedCurrenciesHttpServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v1/sanctioned-currencies",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "default": {
                        "code": "GBP",
                        "decimals": 2
                    },
                    "labeled": {
                        "normal": [{
                                "code": "AED",
                                "decimals": 2
                            }, {
                                "code": "AUD",
                                "decimals": 2
                            }, {
                                "code": "BRL",
                                "decimals": 2
                            }, {
                                "code": "CAD",
                                "decimals": 2
                            }, {
                                "code": "CNY",
                                "decimals": 2
                            }, {
                                "code": "HKD",
                                "decimals": 2
                            }, {
                                "code": "INR",
                                "decimals": 2
                            }, {
                                "code": "JPY",
                                "decimals": 0
                            }, {
                                "code": "JOD",
                                "decimals": 3
                            }, {
                                "code": "RUB",
                                "decimals": 2
                            }, {
                                "code": "SGD",
                                "decimals": 2
                            }, {
                                "code": "ZAR",
                                "decimals": 2
                            }],
                        "popular": [{
                                "code": "EUR",
                                "decimals": 2
                            }, {
                                "code": "GBP",
                                "decimals": 2
                            }, {
                                "code": "USD",
                                "decimals": 2
                            }]
                    }
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
]);

export { COLLECTION_FORMATS, CONFIG_TOKEN, ChargeBearer, InstructionPriority, PAYMENT_ORDER_OPTIONS_BASE_PATH, PaymentOptionsHttpService, PaymentOptionsHttpServiceGetPaymentOptionsByPaymentTypeMocksProvider, PaymentOptionsHttpServiceMocksProvider, PaymentOptionsHttpServicePostPaymentOptionsMocksProvider, PaymentOrderOptionsApiModule, PaymentOrderOptionsConfiguration, SanctionedCountriesHttpService, SanctionedCountriesHttpServiceGetSanctionedCountriesMocksProvider, SanctionedCountriesHttpServiceMocksProvider, SanctionedCurrenciesHttpService, SanctionedCurrenciesHttpServiceGetSanctionedCurrenciesMocksProvider, SanctionedCurrenciesHttpServiceMocksProvider, SchemeName, TimeFrameUnit };
//# sourceMappingURL=backbase-payment-order-options-http-ang.js.map
