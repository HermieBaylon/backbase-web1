import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { PaymentOption } from '../model/models';
import { PaymentOptionsRequest } from '../model/models';
import { PaymentOptionsResponse } from '../model/models';
import { PaymentOrderOptionsConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface GetPaymentOptionsByPaymentTypeRequestParams {
    ["paymentType"]: string;
}
export interface PostPaymentOptionsRequestParams {
    ["paymentOptionsRequest"]?: PaymentOptionsRequest;
}
export declare class PaymentOptionsHttpService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: PaymentOrderOptionsConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: PaymentOrderOptionsConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    getPaymentOptionsByPaymentType(requestParameters: GetPaymentOptionsByPaymentTypeRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<PaymentOption>;
    getPaymentOptionsByPaymentType(requestParameters: GetPaymentOptionsByPaymentTypeRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<PaymentOption>>;
    getPaymentOptionsByPaymentType(requestParameters: GetPaymentOptionsByPaymentTypeRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<PaymentOption>>;
    getPaymentOptionsByPaymentTypeUrl(requestParameters: GetPaymentOptionsByPaymentTypeRequestParams): string;
    postPaymentOptions(requestParameters: PostPaymentOptionsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<PaymentOptionsResponse>;
    postPaymentOptions(requestParameters: PostPaymentOptionsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<PaymentOptionsResponse>>;
    postPaymentOptions(requestParameters: PostPaymentOptionsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<PaymentOptionsResponse>>;
    postPaymentOptionsUrl(requestParameters: PostPaymentOptionsRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<PaymentOptionsHttpService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<PaymentOptionsHttpService>;
}
