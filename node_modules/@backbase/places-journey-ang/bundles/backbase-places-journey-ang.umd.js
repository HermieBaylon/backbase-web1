(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/router'), require('@backbase/foundation-ang/core'), require('rxjs'), require('rxjs/operators'), require('@backbase/data-ang/places'), require('@backbase/ui-ang/header'), require('@backbase/ui-ang/search-box'), require('@backbase/ui-ang/icon'), require('@backbase/ui-ang/input-checkbox'), require('@backbase/ui-ang/collapsible-accordion'), require('@backbase/ui-ang/collapsible'), require('@backbase/ui-ang/empty-state'), require('@backbase/ui-ang/loading-indicator'), require('@backbase/ui-ang/common-error-state'), require('@angular/forms'), require('@backbase/ui-ang/button')) :
    typeof define === 'function' && define.amd ? define('@backbase/places-journey-ang', ['exports', '@angular/core', '@angular/common', '@angular/router', '@backbase/foundation-ang/core', 'rxjs', 'rxjs/operators', '@backbase/data-ang/places', '@backbase/ui-ang/header', '@backbase/ui-ang/search-box', '@backbase/ui-ang/icon', '@backbase/ui-ang/input-checkbox', '@backbase/ui-ang/collapsible-accordion', '@backbase/ui-ang/collapsible', '@backbase/ui-ang/empty-state', '@backbase/ui-ang/loading-indicator', '@backbase/ui-ang/common-error-state', '@angular/forms', '@backbase/ui-ang/button'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["places-journey-ang"] = {}), global.ng.core, global.ng.common, global.ng.router, global.i1, global.rxjs, global.rxjs.operators, global.i1$2, global.i5, global.i2, global.i1$4, global.i8, global.i2$1, global.i3, global.i11, global.i12, global.i13, global.ng.forms, global.button));
})(this, (function (exports, i0, i1$3, i1$1, i1, rxjs, operators, i1$2, i5, i2, i1$4, i8, i2$1, i3, i11, i12, i13, i15, button) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace$3 = /*#__PURE__*/_interopNamespace(i1$3);
    var i1__namespace$1 = /*#__PURE__*/_interopNamespace(i1$1);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i1__namespace$2 = /*#__PURE__*/_interopNamespace(i1$2);
    var i5__namespace = /*#__PURE__*/_interopNamespace(i5);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i1__namespace$4 = /*#__PURE__*/_interopNamespace(i1$4);
    var i8__namespace = /*#__PURE__*/_interopNamespace(i8);
    var i2__namespace$1 = /*#__PURE__*/_interopNamespace(i2$1);
    var i3__namespace = /*#__PURE__*/_interopNamespace(i3);
    var i11__namespace = /*#__PURE__*/_interopNamespace(i11);
    var i12__namespace = /*#__PURE__*/_interopNamespace(i12);
    var i13__namespace = /*#__PURE__*/_interopNamespace(i13);
    var i15__namespace = /*#__PURE__*/_interopNamespace(i15);

    /******************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
            desc = { enumerable: true, get: function () { return m[k]; } };
        }
        Object.defineProperty(o, k2, desc);
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }
    function __classPrivateFieldIn(state, receiver) {
        if (receiver === null || (typeof receiver !== "object" && typeof receiver !== "function"))
            throw new TypeError("Cannot use 'in' operator on non-object");
        return typeof state === "function" ? receiver === state : state.has(receiver);
    }

    var PlacesJourneyConfigurationToken = new i0.InjectionToken('PlacesJourneyConfiguration injection token');
    exports.PlacesMeasurementSystem = void 0;
    (function (PlacesMeasurementSystem) {
        PlacesMeasurementSystem["METRIC"] = "metric";
        PlacesMeasurementSystem["US_IMPERIAL"] = "imperial";
    })(exports.PlacesMeasurementSystem || (exports.PlacesMeasurementSystem = {}));
    var configDefaults = {
        apiKey: '',
        placeTypes: {},
        mapZoom: 15,
        latitude: 52.3760992,
        longitude: 4.900779,
        radius: 2,
        limitList: 100,
        measurementSystem: exports.PlacesMeasurementSystem.METRIC,
        deElevatedHeader: false,
    };
    var PlacesJourneyConfigService = /** @class */ (function () {
        function PlacesJourneyConfigService(config, itemModel) {
            var _this = this;
            this.itemModel = itemModel;
            config = config || {};
            this._config = Object.assign(Object.assign({}, configDefaults), config);
            // update the API key from ItemModel if it was not provided from a static config
            if (this.itemModel && config.apiKey === undefined) {
                this.itemModel
                    .property('apiKey', this._config.apiKey)
                    .subscribe({
                    next: function (key) {
                        _this._config.apiKey = key;
                    },
                })
                    .unsubscribe();
            }
        }
        Object.defineProperty(PlacesJourneyConfigService.prototype, "defaults", {
            get: function () {
                return configDefaults;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlacesJourneyConfigService.prototype, "apiKey", {
            /**
             * API key for Google Maps
             */
            get: function () {
                return this._config.apiKey;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlacesJourneyConfigService.prototype, "placeTypes", {
            /**
             * Place types configuration. Used to set up marker image and the filter label for any place type available in the service
             */
            get: function () {
                return this._config.placeTypes;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlacesJourneyConfigService.prototype, "mapZoom", {
            /**
             * Default zoom value for a map
             */
            get: function () {
                return this._config.mapZoom;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlacesJourneyConfigService.prototype, "latitude", {
            /**
             * Default map latitude
             */
            get: function () {
                return this._config.latitude;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlacesJourneyConfigService.prototype, "longitude", {
            /**
             * Default map longitude
             */
            get: function () {
                return this._config.longitude;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlacesJourneyConfigService.prototype, "radius", {
            /**
             * Default radius in which the locations are being searched while map is not loaded
             */
            get: function () {
                return this._config.radius;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlacesJourneyConfigService.prototype, "limitList", {
            /**
             * Maximum amount of locations to display
             */
            get: function () {
                return this._config.limitList;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlacesJourneyConfigService.prototype, "measurementSystem", {
            /**
             * Measurement system
             */
            get: function () {
                return this._config.measurementSystem;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlacesJourneyConfigService.prototype, "deElevatedHeader", {
            /**
             * Dev config to enable de-elevated header
             */
            get: function () {
                return this._config.deElevatedHeader;
            },
            enumerable: false,
            configurable: true
        });
        return PlacesJourneyConfigService;
    }());
    PlacesJourneyConfigService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PlacesJourneyConfigService, deps: [{ token: PlacesJourneyConfigurationToken, optional: true }, { token: i1__namespace.ItemModel, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    PlacesJourneyConfigService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PlacesJourneyConfigService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PlacesJourneyConfigService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () {
            return [{ type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [PlacesJourneyConfigurationToken]
                        }] }, { type: i1__namespace.ItemModel, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var PlacesJourneyComponent = /** @class */ (function () {
        function PlacesJourneyComponent() {
        }
        return PlacesJourneyComponent;
    }());
    PlacesJourneyComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PlacesJourneyComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    PlacesJourneyComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PlacesJourneyComponent, selector: "bb-places-journey", providers: [PlacesJourneyConfigService], ngImport: i0__namespace, template: '<router-outlet></router-outlet>', isInline: true, directives: [{ type: i1__namespace$1.RouterOutlet, selector: "router-outlet", outputs: ["activate", "deactivate"], exportAs: ["outlet"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PlacesJourneyComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-places-journey',
                        template: '<router-outlet></router-outlet>',
                        providers: [PlacesJourneyConfigService],
                    }]
            }] });

    /**
     * Default place type that will be used as fallback in case types are not configured in the app
     */
    var defaultPlaceType = 'bbDefaultPlaceType';
    /**
     * Marker icon for default place type
     */
    var defaultPlaceTypeMarkerURI = 'bb-default-marker.svg';
    /**
     * List icon name for default place type
     */
    var defaultPlaceTypeIcon = 'map';
    /**
     * Ratio between foot and meter
     */
    var footInMeter = 3.28084;
    /**
     * Ratio between meter and kilometer
     */
    var meterInKM = 1000;
    /**
     * Ratio between foot and mile
     */
    var footInMile = 5280;

    var getMessageFromResponse = function (error) {
        var responseBody = error.error;
        if (responseBody &&
            responseBody.errors &&
            responseBody.errors[0] &&
            responseBody.errors[0].message) {
            return responseBody.errors[0].message;
        }
        else {
            return undefined;
        }
    };
    var parseError = function (error) {
        // TODO: should have more user-friendly messages
        if (error.error instanceof ErrorEvent) {
            // Client-side or network error.
            return {
                message: 'An unexpected error occurred',
            };
        }
        else if (error.status && ("" + error.status).startsWith('4')) {
            // Backend returns unsuccessful response code.  In case of 400, try to get a message from the
            // response.
            return {
                message: getMessageFromResponse(error) || "Error " + error.status,
            };
        }
        else {
            // Backend returns 5xx
            return {
                message: 'An unexpected server error occurred',
            };
        }
    };

    var GoogleMapsScriptProtocol;
    (function (GoogleMapsScriptProtocol) {
        GoogleMapsScriptProtocol[GoogleMapsScriptProtocol["HTTP"] = 1] = "HTTP";
        GoogleMapsScriptProtocol[GoogleMapsScriptProtocol["HTTPS"] = 2] = "HTTPS";
        GoogleMapsScriptProtocol[GoogleMapsScriptProtocol["AUTO"] = 3] = "AUTO";
    })(GoogleMapsScriptProtocol || (GoogleMapsScriptProtocol = {}));
    var MapAPILoaderService = /** @class */ (function () {
        function MapAPILoaderService() {
            this.scriptID = 'bbGoogleMapsApiScript';
            this.callbackName = 'bbMapsAPILoader';
            this.apiLoadPromiseName = 'bbMapsAPILoaderPromise';
            this.windowRef = window;
            this.documentRef = document;
            this.configValue = {};
        }
        Object.defineProperty(MapAPILoaderService.prototype, "config", {
            get: function () {
                return this.configValue;
            },
            set: function (config) {
                this.configValue = config;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MapAPILoaderService.prototype, "loadAPIPromise", {
            get: function () {
                return this.windowRef[this.apiLoadPromiseName];
            },
            enumerable: false,
            configurable: true
        });
        MapAPILoaderService.prototype.assignScriptLoadingPromise = function (scriptElem) {
            var _this = this;
            this.windowRef[this.apiLoadPromiseName] = new Promise(function (resolve, reject) {
                _this.windowRef[_this.callbackName] = function () {
                    resolve();
                };
                scriptElem.onerror = function (error) {
                    reject(error);
                };
            });
        };
        MapAPILoaderService.prototype.getScriptSrc = function (callbackName) {
            var protocolType = (this.configValue && this.configValue.protocol) ||
                GoogleMapsScriptProtocol.HTTPS;
            var protocol = '';
            switch (protocolType) {
                case GoogleMapsScriptProtocol.HTTP:
                    protocol = 'http:';
                    break;
                case GoogleMapsScriptProtocol.HTTPS:
                    protocol = 'https:';
                    break;
            }
            var hostAndPath = this.configValue.hostAndPath || 'maps.googleapis.com/maps/api/js';
            // make sure we have places library for search component
            var libraries = this.configValue.libraries || [];
            if (libraries.indexOf('places') === -1) {
                this.configValue.libraries = __spreadArray(__spreadArray([], __read(libraries)), ['places']);
            }
            var queryParams = {
                v: this.configValue.apiVersion || 'quarterly',
                callback: callbackName,
                key: this.configValue.apiKey,
                client: this.configValue.clientId,
                channel: this.configValue.channel,
                libraries: this.configValue.libraries,
                region: this.configValue.region,
                language: this.configValue.language,
            };
            var params = Object.keys(queryParams)
                .filter(function (key) { return queryParams[key] !== undefined; })
                .filter(function (key) {
                // remove empty arrays
                return (!Array.isArray(queryParams[key]) ||
                    (Array.isArray(queryParams[key]) &&
                        queryParams[key].length > 0));
            })
                .map(function (key) {
                var value = queryParams[key];
                if (Array.isArray(value)) {
                    // join arrays as comma seperated strings
                    value = value.join(',');
                }
                return key + "=" + value;
            })
                .join('&');
            return protocol + "//" + hostAndPath + "?" + params;
        };
        MapAPILoaderService.prototype.load = function () {
            var window = this.windowRef;
            if (window.google && window.google.maps) {
                // Google maps already loaded on the page.
                return Promise.resolve();
            }
            if (this.loadAPIPromise) {
                return this.loadAPIPromise;
            }
            var script = this.documentRef.createElement('script');
            script.type = 'text/javascript';
            script.async = true;
            script.defer = true;
            script.id = this.scriptID;
            script.src = this.getScriptSrc(this.callbackName);
            this.assignScriptLoadingPromise(script);
            this.documentRef.body.appendChild(script);
            return this.loadAPIPromise;
        };
        return MapAPILoaderService;
    }());
    MapAPILoaderService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: MapAPILoaderService, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    MapAPILoaderService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: MapAPILoaderService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: MapAPILoaderService, decorators: [{
                type: i0.Injectable
            }] });

    var PlacesService = /** @class */ (function () {
        function PlacesService(placesDataHttpService) {
            this.placesDataHttpService = placesDataHttpService;
        }
        PlacesService.prototype.getPlaces = function (params) {
            return this.placesDataHttpService
                .getPlaces(params)
                .pipe(operators.map(function (data) { return data || []; }));
        };
        return PlacesService;
    }());
    PlacesService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PlacesService, deps: [{ token: i1__namespace$2.PlacesHttpService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    PlacesService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PlacesService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PlacesService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace$2.PlacesHttpService }]; } });

    var MapSearchComponent = /** @class */ (function () {
        function MapSearchComponent(loader) {
            this.loader = loader;
            /**
             * Map autocomplete options object.
             */
            this.options = {};
            /**
             * Map API configuration.
             */
            this.config = {};
            /**
             * EventEmitter for triggering a mapSearch event.
             */
            this.mapSearch = new i0.EventEmitter();
        }
        MapSearchComponent.prototype.onSearchButtonClick = function () {
            var input = this.searchBox.inputField;
            if (!input) {
                return;
            }
            // select first result and do the search
            google.maps.event.trigger(input.nativeElement, 'focus', {});
            google.maps.event.trigger(input.nativeElement, 'keydown', {
                keyCode: 40,
                stopPropagation: function () { return undefined; },
                preventDefault: function () { return undefined; },
            });
            google.maps.event.trigger(input.nativeElement, 'keydown', { keyCode: 13 }); // enter
        };
        MapSearchComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.loader.config = this.config;
            this.loader.load().then(function () {
                var input = _this.searchBox.inputField;
                if (!input) {
                    return;
                }
                var autocomplete = new google.maps.places.Autocomplete(input.nativeElement, _this.options);
                autocomplete.addListener('place_changed', function () {
                    var place = autocomplete.getPlace();
                    if (place.geometry) {
                        _this.mapSearch.emit(place);
                    }
                });
            });
        };
        return MapSearchComponent;
    }());
    MapSearchComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: MapSearchComponent, deps: [{ token: MapAPILoaderService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    MapSearchComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: MapSearchComponent, selector: "bb-map-search-ui", inputs: { options: "options", config: "config" }, outputs: { mapSearch: "mapSearch" }, viewQueries: [{ propertyName: "searchBox", first: true, predicate: ["bbMapsearch"], descendants: true, static: true }], ngImport: i0__namespace, template: "<div class=\"bb-block bb-block--md\">\n  <bb-search-box-ui\n    placeholder=\"Search Branch and Street Names\"\n    i18n-placeholder=\"Search for Location@@map-ui.search.placeholder\"\n    aria-label=\"Search Branch and Street Name\"\n    i18n-aria-label=\"\n      Search Branch and Street Name aria-label@@map.search.ui.aria-label\"\n    [showSearch]=\"true\"\n    (submit)=\"onSearchButtonClick()\"\n    #bbMapsearch\n  >\n  </bb-search-box-ui>\n</div>\n", components: [{ type: i2__namespace.SearchBoxComponent, selector: "bb-search-box-ui", inputs: ["placeholder", "maxLength", "squareBorder", "typeaheadOptions", "showSearch", "showClear", "searchLabel", "clearLabel", "autocomplete"], outputs: ["submit", "clear", "valueChange"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: MapSearchComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-map-search-ui',
                        templateUrl: './map-search.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: MapAPILoaderService }]; }, propDecorators: { options: [{
                    type: i0.Input
                }], config: [{
                    type: i0.Input
                }], mapSearch: [{
                    type: i0.Output
                }], searchBox: [{
                    type: i0.ViewChild,
                    args: ['bbMapsearch', { static: true }]
                }] } });

    var WeekDay;
    (function (WeekDay) {
        WeekDay[WeekDay["Monday"] = 1] = "Monday";
        WeekDay[WeekDay["Tuesday"] = 2] = "Tuesday";
        WeekDay[WeekDay["Wednesday"] = 3] = "Wednesday";
        WeekDay[WeekDay["Thursday"] = 4] = "Thursday";
        WeekDay[WeekDay["Friday"] = 5] = "Friday";
        WeekDay[WeekDay["Saturday"] = 6] = "Saturday";
        WeekDay[WeekDay["Sunday"] = 7] = "Sunday";
    })(WeekDay || (WeekDay = {}));

    var WorkTimesComponent = /** @class */ (function () {
        function WorkTimesComponent(datePipe) {
            this.datePipe = datePipe;
            /**
             * The day number based on WeekDay enum
             */
            this.day = 0;
            /**
             * Hours related to this day
             */
            this.hours = [];
        }
        WorkTimesComponent.prototype.toLocaleTime = function (hour) {
            return (this.datePipe.transform(new Date('2000-01-01T' + hour), 'shortTime') ||
                hour);
        };
        WorkTimesComponent.prototype.isToday = function (day, today) {
            if (today === void 0) { today = new Date().getDay(); }
            today = today || 7;
            return day === today;
        };
        return WorkTimesComponent;
    }());
    WorkTimesComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: WorkTimesComponent, deps: [{ token: i1__namespace$3.DatePipe }], target: i0__namespace.ɵɵFactoryTarget.Component });
    WorkTimesComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: WorkTimesComponent, selector: "bb-work-times", inputs: { day: "day", hours: "hours" }, providers: [i1$3.DatePipe], ngImport: i0__namespace, template: "<div\n  class=\"row bb-place-timetable\"\n  [ngClass]=\"{\n    'bb-text-semi-bold': this.isToday(day),\n    'bb-text-support': !this.isToday(day)\n  }\"\n>\n  <span\n    class=\"col-md-5\"\n    i18n=\"\n      Week day name|label for week day name based on work\n      times@@places.workTimes.dayName\"\n  >\n    { day, select, 1 {Monday} 2 {Tuesday} 3 {Wednesday} 4 {Thursday} 5 {Friday}\n    6 {Saturday} 7 {Sunday} }\n  </span>\n  <span class=\"col-md-7\">\n    <ng-container *ngIf=\"this.hours.length; else closed\">\n      <ng-container *ngFor=\"let workHour of this.hours; let i = index\"\n        >{{ this.toLocaleTime(workHour.open) }} -\n        {{ this.toLocaleTime(workHour.close) }}<br\n      /></ng-container>\n    </ng-container>\n  </span>\n</div>\n\n<ng-template #closed>\n  <span i18n=\"Closed|label for closed day@@places.workTimes.closed\"\n    >Closed</span\n  >\n</ng-template>\n", directives: [{ type: i1__namespace$3.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i1__namespace$3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace$3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: WorkTimesComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-work-times',
                        templateUrl: './work-times.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        providers: [i1$3.DatePipe],
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$3.DatePipe }]; }, propDecorators: { day: [{
                    type: i0.Input
                }], hours: [{
                    type: i0.Input
                }] } });

    var PlaceDetailsComponent = /** @class */ (function () {
        function PlaceDetailsComponent() {
        }
        Object.defineProperty(PlaceDetailsComponent.prototype, "weekDay", {
            // This returns array of weekDay numbers based on the WeekDay enum
            get: function () {
                var days = Object.keys(WeekDay);
                return days.slice(0, days.length / 2).map(function (day) { return +day; });
            },
            enumerable: false,
            configurable: true
        });
        PlaceDetailsComponent.prototype.getWorkTimes = function (day, hours) {
            return hours.filter(function (time) { return time.day === day; });
        };
        PlaceDetailsComponent.prototype.getFullAddress = function (address) {
            return address
                ? encodeURI(address.postalCode + " " + address.addressLine1)
                : '';
        };
        return PlaceDetailsComponent;
    }());
    PlaceDetailsComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PlaceDetailsComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    PlaceDetailsComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PlaceDetailsComponent, selector: "bb-place-details", inputs: { place: "place" }, providers: [i1$3.DatePipe], ngImport: i0__namespace, template: "<div class=\"bb-place-details\">\n  <div\n    class=\"bb-block bb-block--md\"\n    aria-label=\"Get Directions on google maps\"\n    i18n-aria-label=\"\n      Get Directions button\n      aria-label@@place.details.get.direction.button.aria-label\"\n  >\n    <a\n      class=\"btn btn-sm btn-outline-primary\"\n      [href]=\"\n        'https://www.google.com/maps/dir//' +\n        this.getFullAddress(place && place.address)\n      \"\n      target=\"_blank\"\n      i18n=\"Get Directions|Get Directions redirect link@@places.directions.get\"\n      rel=\"noopener\"\n    >\n      <bb-icon-ui name=\"navigation\" size=\"md\"></bb-icon-ui>\n      Get Directions\n    </a>\n  </div>\n\n  <div class=\"bb-block bb-block--md\" *ngIf=\"place?.hours\">\n    <div class=\"bb-stack bb-stack--density-sm\">\n      <bb-icon-ui name=\"access-time\" class=\"bb-stack__item\"></bb-icon-ui>\n      <span\n        class=\"bb-stack__item bb-text-semi-bold\"\n        i18n=\"Opening Hours|label for Opening Hours@@places.label.openingHours\"\n      >\n        Opening Hours\n      </span>\n    </div>\n    <ul\n      class=\"bb-list bb-list--density-none\"\n      aria-label=\"Opening Hours\"\n      i18n-aria-label=\"\n        Opening Hours list\n        aria-label@@place.details.opening.hours.list.aria-label\"\n      tabindex=\"0\"\n    >\n      <li *ngFor=\"let day of weekDay\">\n        <bb-work-times\n          [day]=\"day\"\n          [hours]=\"this.getWorkTimes(day, place?.hours || [])\"\n        ></bb-work-times>\n      </li>\n    </ul>\n  </div>\n  <div *ngIf=\"place?.services?.length\">\n    <div class=\"bb-stack bb-stack--density-sm\">\n      <bb-icon-ui name=\"supervisor-account\" class=\"bb-stack__item\"></bb-icon-ui>\n      <span\n        class=\"bb-stack__item bb-text-semi-bold\"\n        i18n=\"\n          Available Services|label for Available\n          Services@@places.label.availableServices\"\n      >\n        Available Services\n      </span>\n    </div>\n    <div\n      aria-label=\"Available Services\"\n      i18n-aria-label=\"\n        Available Services list\n        aria-label@@place.details.available.services.list.aria-label\"\n      tabindex=\"0\"\n    >\n      <div\n        class=\"bb-place-services bb-text-support\"\n        *ngFor=\"let service of place?.services\"\n      >\n        {{ service | titlecase }}\n      </div>\n    </div>\n  </div>\n</div>\n", components: [{ type: i1__namespace$4.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: WorkTimesComponent, selector: "bb-work-times", inputs: ["day", "hours"] }], directives: [{ type: i1__namespace$3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace$3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "titlecase": i1__namespace$3.TitleCasePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PlaceDetailsComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-place-details',
                        templateUrl: './place-details.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        providers: [i1$3.DatePipe],
                    }]
            }], propDecorators: { place: [{
                    type: i0.Input
                }] } });

    var KeyboardAccessibilityDirective = /** @class */ (function () {
        function KeyboardAccessibilityDirective(element) {
            this.element = element;
            element.nativeElement.tabIndex = 0;
        }
        // eslint-disable-next-line
        KeyboardAccessibilityDirective.prototype.eventListener = function (event) {
            this.element.nativeElement.click(event);
        };
        return KeyboardAccessibilityDirective;
    }());
    KeyboardAccessibilityDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: KeyboardAccessibilityDirective, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    KeyboardAccessibilityDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: KeyboardAccessibilityDirective, selector: "[bbKeyboardAccessibility]", host: { listeners: { "keydown.enter": "eventListener($event)", "keydown.space": "eventListener($event)" } }, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: KeyboardAccessibilityDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbKeyboardAccessibility]',
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; }, propDecorators: { eventListener: [{
                    type: i0.HostListener,
                    args: ['keydown.enter', ['$event']]
                }, {
                    type: i0.HostListener,
                    args: ['keydown.space', ['$event']]
                }] } });

    var PlacesListComponent = /** @class */ (function () {
        function PlacesListComponent(datePipe) {
            this.datePipe = datePipe;
            /**
             * Map radius.
             */
            this.radius = 1;
            /**
             * Use metric system for displaying distances.
             */
            this.isMetric = true;
            /**
             * Provide Place Types
             */
            this.placeTypes = {};
            /**
             * EventEmitter for triggering a place selection update event.
             */
            this.selected = new i0.EventEmitter();
            this.places = [];
        }
        Object.defineProperty(PlacesListComponent.prototype, "locations", {
            /**
             * List of locations to be rendered.
             */
            set: function (locations) {
                var _this = this;
                this.places = locations
                    .map(function (place) { return (Object.assign(Object.assign({}, place), { distance: _this.calculateDistance(place) })); })
                    .sort(function (a, b) { return (a.distance || 0) - (b.distance || 0); });
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Uses Google geometry library to calculate distance between two points
         * Returns undefined if google library or current position is undefined
         * Returns distance in meters or feet, depending on measurment system property in the widget
         */
        PlacesListComponent.prototype.calculateDistance = function (place) {
            if (typeof google === 'undefined' || this.currentPosition === undefined) {
                return undefined;
            }
            var centerCoords = new google.maps.LatLng(this.currentPosition.lat, this.currentPosition.lng);
            var itemCoords = new google.maps.LatLng(place.latitude, place.longitude);
            var distance = google.maps.geometry.spherical.computeDistanceBetween(centerCoords, itemCoords);
            return this.isMetric ? distance : distance * footInMeter;
        };
        PlacesListComponent.prototype.isStillOpen = function (hour, currentDate) {
            if (currentDate === void 0) { currentDate = new Date(); }
            var _a = __read(hour
                .split(':')
                .map(function (timePart) { return +timePart; }), 2), closeHour = _a[0], closeMinute = _a[1];
            var currentHour = currentDate.getHours();
            var currentMinute = currentDate.getMinutes();
            return (currentHour < closeHour ||
                (currentHour === closeHour && currentMinute < closeMinute));
        };
        PlacesListComponent.prototype.getDistanceUnits = function () {
            if (this.isMetric) {
                return [
                    this.transM.nativeElement.textContent,
                    this.transKm.nativeElement.textContent,
                ];
            }
            return [
                this.transFt.nativeElement.textContent,
                this.transMi.nativeElement.textContent,
            ];
        };
        PlacesListComponent.prototype.onListItemClick = function (isOpen, place) {
            this.selected.emit(!isOpen
                ? place
                : {
                    id: '',
                    latitude: 0,
                    longitude: 0,
                });
            return;
        };
        PlacesListComponent.prototype.getClosingHour = function (hours, currentDate) {
            if (currentDate === void 0) { currentDate = new Date(); }
            if (!hours) {
                return;
            }
            // in specs, Sunday is 7 and in JS it is 0, rest of the days match
            var currentDay = currentDate.getDay() || 7;
            var todayHours = hours.find(function (time) { return time.day === currentDay; });
            if (!todayHours) {
                return;
            }
            return ((this.isStillOpen(todayHours.close, currentDate) &&
                this.datePipe.transform(new Date('2000-01-01T' + todayHours.close), 'shortTime')) ||
                undefined);
        };
        PlacesListComponent.prototype.getPlaceTypeIcon = function (type) {
            return type && this.placeTypes[type] && this.placeTypes[type].iconName
                ? this.placeTypes[type].iconName
                : defaultPlaceTypeIcon;
        };
        PlacesListComponent.prototype.formatDistance = function (distance) {
            var distanceUnit = this.getDistanceUnits();
            var distanceUnitRatio = this.isMetric ? meterInKM : footInMile;
            var convertedDistance = Math.round(distance);
            var unit = distanceUnit[0];
            if (distance >= distanceUnitRatio) {
                unit = distanceUnit[1];
                convertedDistance /= distanceUnitRatio;
                if (convertedDistance >= 10) {
                    // for distance over 10 km/mi show only integers
                    convertedDistance = Math.round(convertedDistance);
                }
                else {
                    // for distance more than 1 km/mi but smaller than 10 km/mi use one decimal point
                    convertedDistance = Math.round(convertedDistance * 10) / 10;
                }
            }
            return convertedDistance + " " + unit;
        };
        return PlacesListComponent;
    }());
    PlacesListComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PlacesListComponent, deps: [{ token: i1__namespace$3.DatePipe }], target: i0__namespace.ɵɵFactoryTarget.Component });
    PlacesListComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PlacesListComponent, selector: "bb-places-list", inputs: { radius: "radius", locations: "locations", selectedPlaceId: "selectedPlaceId", currentPosition: "currentPosition", isMetric: "isMetric", placeTypes: "placeTypes" }, outputs: { selected: "selected" }, providers: [i1$3.DatePipe], viewQueries: [{ propertyName: "transM", first: true, predicate: ["transM"], descendants: true, static: true }, { propertyName: "transKm", first: true, predicate: ["transKm"], descendants: true, static: true }, { propertyName: "transFt", first: true, predicate: ["transFt"], descendants: true, static: true }, { propertyName: "transMi", first: true, predicate: ["transMi"], descendants: true, static: true }], ngImport: i0__namespace, template: "<!-- Places List -->\n<bb-collapsible-accordion-ui\n  [closeOthers]=\"true\"\n  class=\"bb-list bb-list--density-md\"\n>\n  <bb-collapsible-ui\n    [isOpen]=\"place.id === selectedPlaceId\"\n    class=\"bb-list__item d-block\"\n    role=\"tree\"\n    *ngFor=\"let place of places; let i = index\"\n  >\n    <ng-template bbCollapsibleHeader let-isOpen=\"isOpen\">\n      <div\n        role=\"treeitem\"\n        bbKeyboardAccessibility\n        [attr.aria-expanded]=\"isOpen\"\n        (click)=\"this.onListItemClick(isOpen, place)\"\n        class=\"bb-block\"\n        [class.bb-block--md]=\"isOpen\"\n      >\n        <div class=\"bb-stack bb-place-info\">\n          <div class=\"bb-inline-stack bb-inline-stack--density-sm\">\n            <bb-icon-ui\n              [name]=\"this.getPlaceTypeIcon(place.placeType)\"\n              size=\"md\"\n              class=\"bb-inline-stack__item\"\n            ></bb-icon-ui>\n            <span class=\"bb-text-semi-bold\">{{ place.name }}</span>\n          </div>\n          <bb-icon-ui\n            class=\"bb-stack__item bb-stack__item--push-right\"\n            [name]=\"isOpen ? 'toggle-up' : 'toggle-down'\"\n            size=\"md\"\n          >\n          </bb-icon-ui>\n        </div>\n        <div class=\"bb-place-info__subtitle bb-subtitle\">\n          <div *ngIf=\"place.address\">\n            <span>{{ place.address.addressLine1 }}</span>\n            <span *ngIf=\"place.address.addressLine2\"\n              >,\n              <span>{{ place.address.addressLine2 }}</span>\n            </span>\n            <div *ngIf=\"place.address.postalCode\">\n              {{ place.address.postalCode }}\n            </div>\n          </div>\n          <div\n            class=\"bb-text-support bb-inline-stack\"\n            *ngIf=\"place.distance !== undefined\"\n          >\n            <bb-icon-ui\n              name=\"near-me\"\n              size=\"sm\"\n              class=\"bb-inline-stack__item\"\n            ></bb-icon-ui>\n            <span>{{ this.formatDistance(place.distance) }}</span>\n          </div>\n          <div\n            class=\"bb-text-support\"\n            *ngIf=\"this.getClosingHour(place.hours) as hour\"\n          >\n            <span\n              i18n=\"\n                Open Today until|label for open today\n                until@@places.openToday.until\"\n              >Open Today until\n            </span>\n            <span>{{ hour }}</span>\n          </div>\n        </div>\n      </div>\n    </ng-template>\n\n    <ng-template bbCollapsibleBody>\n      <bb-place-details [place]=\"place\"></bb-place-details>\n    </ng-template>\n  </bb-collapsible-ui>\n</bb-collapsible-accordion-ui>\n\n<span #transM class=\"ng-cloak\" i18n=\"m|Label for meters@@places.distance.meter\"\n  >m</span\n>\n<span\n  #transKm\n  class=\"ng-cloak\"\n  i18n=\"km|Label for kilometers@@places.distance.kilometer\"\n  >km</span\n>\n<span #transFt class=\"ng-cloak\" i18n=\"ft|Label for feet@@places.distance.foot\"\n  >ft</span\n>\n<span #transMi class=\"ng-cloak\" i18n=\"mi|Label for miles@@places.distance.mile\"\n  >mi</span\n>\n", components: [{ type: i2__namespace$1.CollapsibleAccordionComponent, selector: "bb-collapsible-accordion-ui", inputs: ["closeOthers", "openFirst", "obeyParentAccordion"] }, { type: i3__namespace.CollapsibleComponent, selector: "bb-collapsible-ui", inputs: ["recreateBodyContent", "hasChevron", "isOpen"], outputs: ["isOpenChange"] }, { type: i1__namespace$4.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: PlaceDetailsComponent, selector: "bb-place-details", inputs: ["place"] }], directives: [{ type: i1__namespace$3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3__namespace.CollapsibleHeaderDirective, selector: "ng-template[bbCollapsibleHeader]" }, { type: KeyboardAccessibilityDirective, selector: "[bbKeyboardAccessibility]" }, { type: i1__namespace$3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3__namespace.CollapsibleBodyDirective, selector: "ng-template[bbCollapsibleBody]" }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PlacesListComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-places-list',
                        templateUrl: './places-list.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        providers: [i1$3.DatePipe],
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$3.DatePipe }]; }, propDecorators: { radius: [{
                    type: i0.Input
                }], locations: [{
                    type: i0.Input
                }], selectedPlaceId: [{
                    type: i0.Input
                }], currentPosition: [{
                    type: i0.Input
                }], isMetric: [{
                    type: i0.Input
                }], placeTypes: [{
                    type: i0.Input
                }], selected: [{
                    type: i0.Output
                }], transM: [{
                    type: i0.ViewChild,
                    args: ['transM', { static: true }]
                }], transKm: [{
                    type: i0.ViewChild,
                    args: ['transKm', { static: true }]
                }], transFt: [{
                    type: i0.ViewChild,
                    args: ['transFt', { static: true }]
                }], transMi: [{
                    type: i0.ViewChild,
                    args: ['transMi', { static: true }]
                }] } });

    /**
     * Handles the communication with the Google Maps Javascript
     * API v3
     */
    var MapHelpersService = /** @class */ (function () {
        function MapHelpersService(loader) {
            this.loader = loader;
        }
        MapHelpersService.prototype.createMap = function (el, mapOptions, mapConfig) {
            var _this = this;
            if (mapConfig === void 0) { mapConfig = {}; }
            this.loader.config = mapConfig;
            return this.loader.load().then(function () {
                _this.map = new google.maps.Map(el, mapOptions);
            });
        };
        MapHelpersService.prototype.setMapOptions = function (options) {
            this.map.setOptions(options);
        };
        /**
         * Creates a google map marker with the map context
         */
        MapHelpersService.prototype.createMarker = function (options, addToMap) {
            if (options === void 0) { options = {}; }
            if (addToMap === void 0) { addToMap = true; }
            if (addToMap) {
                options.map = this.map;
            }
            return new google.maps.Marker(options);
        };
        MapHelpersService.prototype.createInfoWindow = function (options) {
            return new google.maps.InfoWindow(options);
        };
        MapHelpersService.prototype.openInfoWindow = function (infoWindow, marker) {
            return infoWindow.open(this.map, marker);
        };
        MapHelpersService.prototype.onMapEvent = function (eventName, callback) {
            this.map.addListener(eventName, function (arg) { return callback(arg); });
        };
        MapHelpersService.prototype.setCenter = function (latLng) {
            return this.map.setCenter(latLng);
        };
        MapHelpersService.prototype.getZoom = function () {
            return this.map.getZoom();
        };
        MapHelpersService.prototype.getBounds = function () {
            return this.map.getBounds();
        };
        MapHelpersService.prototype.getMapTypeId = function () {
            return this.map.getMapTypeId();
        };
        MapHelpersService.prototype.setZoom = function (zoom) {
            return this.map.setZoom(zoom);
        };
        MapHelpersService.prototype.getCenter = function () {
            return this.map.getCenter();
        };
        MapHelpersService.prototype.panTo = function (latLng) {
            return this.map.panTo(latLng);
        };
        MapHelpersService.prototype.panBy = function (x, y) {
            return this.map.panBy(x, y);
        };
        MapHelpersService.prototype.fitBounds = function (latLng) {
            return this.map.fitBounds(latLng);
        };
        MapHelpersService.prototype.panToBounds = function (latLng) {
            return this.map.panToBounds(latLng);
        };
        /**
         * Triggers the given event name on the map instance.
         */
        MapHelpersService.prototype.triggerMapEvent = function (eventName) {
            return google.maps.event.trigger(this.map, eventName);
        };
        return MapHelpersService;
    }());
    MapHelpersService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: MapHelpersService, deps: [{ token: MapAPILoaderService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    MapHelpersService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: MapHelpersService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: MapHelpersService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: MapAPILoaderService }]; } });

    var MapComponent = /** @class */ (function () {
        function MapComponent(helpers) {
            this.helpers = helpers;
            /**
             * Map options object.
             */
            this.options = {};
            /**
             * Map API configuration.
             */
            this.config = {};
            /**
             * EventEmitter for triggering a mapReady event.
             */
            this.mapReady = new i0.EventEmitter();
        }
        Object.defineProperty(MapComponent.prototype, "mapHelpers", {
            get: function () {
                return this.helpers;
            },
            enumerable: false,
            configurable: true
        });
        MapComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.helpers
                .createMap(this.mapContainer.nativeElement, this.options, this.config)
                .then(function () { return _this.mapReady.emit(_this); });
        };
        return MapComponent;
    }());
    MapComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: MapComponent, deps: [{ token: MapHelpersService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    MapComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: MapComponent, selector: "bb-map-ui", inputs: { options: "options", config: "config" }, outputs: { mapReady: "mapReady" }, viewQueries: [{ propertyName: "mapContainer", first: true, predicate: ["bbMapContainer"], descendants: true, static: true }], ngImport: i0__namespace, template: "<ng-content select=\"[bbMapHeader]\"></ng-content>\n<div #bbMapContainer class=\"bb-map\"></div>\n<ng-content select=\"[bbMapFooter]\"></ng-content>\n", changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: MapComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-map-ui',
                        templateUrl: './map.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: MapHelpersService }]; }, propDecorators: { options: [{
                    type: i0.Input
                }], config: [{
                    type: i0.Input
                }], mapReady: [{
                    type: i0.Output
                }], mapContainer: [{
                    type: i0.ViewChild,
                    args: ['bbMapContainer', { static: true }]
                }] } });

    var MapWrapperComponent = /** @class */ (function () {
        function MapWrapperComponent() {
            /**
             * API key need for the google maps to work.
             */
            this.apiKey = '';
            /**
             * Map config.
             */
            this.config = {};
            /**
             * Map zoom.
             */
            this.mapZoom = 0;
            /**
             * Latitude for the coordinates.
             */
            this.latitude = 0;
            /**
             * Longitude for the coordinates.
             */
            this.longitude = 0;
            /**
             * Info window should be displayed after clicking on marker.
             */
            this.enableInfoWindow = false;
            /**
             * Object to describe the map marker icon.
             */
            this.icons = {};
            /**
             * EventEmitter for triggering a update event.
             */
            this.update = new i0.EventEmitter();
            /**
             * EventEmitter for place selection update event.
             */
            this.selected = new i0.EventEmitter();
            /**
             * EventEmitter for triggering a locate event.
             */
            this.locate = new i0.EventEmitter();
            /**
             * EventEmitter for triggering a mapReady event.
             */
            this.mapReady = new i0.EventEmitter();
            this.markers = [];
        }
        Object.defineProperty(MapWrapperComponent.prototype, "locations", {
            /**
             * List of locations to be rendered.
             */
            get: function () {
                return this.places || [];
            },
            set: function (locations) {
                this.places = locations;
                if (this.mapHelpers) {
                    this.drawMarkers();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MapWrapperComponent.prototype, "selectedPlaceId", {
            /**
             * Selected place id.
             */
            get: function () {
                return this.selectedId;
            },
            set: function (id) {
                this.selectedId = id;
                if (this.mapHelpers) {
                    this.drawMarkers();
                }
            },
            enumerable: false,
            configurable: true
        });
        MapWrapperComponent.prototype.getInfoWindowContent = function (placeId) {
            var wrapperElement = this.template
                .nativeElement;
            var template = wrapperElement.querySelector("div[data-place-id='" + placeId + "']");
            return template ? template.innerHTML : '';
        };
        MapWrapperComponent.prototype.getDistance = function (bounds) {
            if (!bounds) {
                return 0;
            }
            return (google.maps.geometry.spherical.computeDistanceBetween(bounds.getNorthEast(), bounds.getSouthWest()) / 1000);
        };
        MapWrapperComponent.prototype.emitMapUpdate = function () {
            if (!this.mapHelpers) {
                return;
            }
            var center = this.mapHelpers.getCenter();
            this.update.emit({
                latitude: center.lat(),
                longitude: center.lng(),
                radius: Math.ceil(this.getDistance(this.mapHelpers.getBounds()) / 2),
            });
        };
        MapWrapperComponent.prototype.setCurrentLocationMarker = function (location) {
            if (!this.mapHelpers) {
                return;
            }
            this.mapHelpers.createMarker({
                position: location,
                clickable: false,
                icon: this.currentLocationIconOptions,
                locationId: '',
            });
        };
        MapWrapperComponent.prototype.markerClicklistener = function (marker, place) {
            var helpers = this.mapHelpers;
            if (this.enableInfoWindow) {
                if (this.infoWindow) {
                    this.infoWindow.close();
                }
                var content = this.getInfoWindowContent(place.id);
                this.infoWindow = helpers.createInfoWindow({ content: content });
                helpers.openInfoWindow(this.infoWindow, marker);
            }
            if (this.mapHelpers) {
                if (marker.locationId === this.selectedId) {
                    this.selected.emit({
                        id: '',
                        latitude: 0,
                        longitude: 0,
                    });
                }
                else {
                    this.selected.emit(this.places.find(function (location) { return location.id === marker.locationId; }));
                }
            }
        };
        MapWrapperComponent.prototype.drawMarkers = function () {
            var _this = this;
            if (!Array.isArray(this.places)) {
                return;
            }
            // markers that are not needed anymore, should be cleared
            var placeIds = this.places.map(function (place) { return place.id; });
            var newMarkerList = [];
            this.markers.forEach(function (marker) {
                if (placeIds.includes(marker.locationId)) {
                    newMarkerList.push(marker);
                }
                else {
                    // eslint-disable-next-line
                    marker.setMap(null);
                }
            });
            this.markers = newMarkerList;
            // places markers on map
            this.places.forEach(function (place) {
                var marker = _this.markers.find(function (item) { return item.locationId === place.id; });
                if (marker === undefined) {
                    marker = _this.createMarker(place);
                    _this.markers.push(marker);
                    marker.addListener('click', function () { return _this.markerClicklistener(marker, place); });
                }
                if (_this.selectedId && placeIds.includes(_this.selectedId)) {
                    if (place.id === _this.selectedId) {
                        marker.setOpacity(1);
                        marker.setIcon({
                            url: marker.getIcon().url,
                            scaledSize: new google.maps.Size(60, 60),
                        });
                    }
                    else {
                        marker.setOpacity(0.5);
                        marker.setIcon({
                            url: marker.getIcon().url,
                        });
                    }
                }
                else {
                    marker.setOpacity(1);
                    marker.setIcon({
                        url: marker.getIcon().url,
                    });
                }
            });
        };
        MapWrapperComponent.prototype.createMarker = function (place) {
            var helpers = this.mapHelpers;
            var position = {
                lat: place.latitude,
                lng: place.longitude,
            };
            // try to find place type icon or try to use fallback icon
            var defaultIcon = this.icons && Object.keys(this.icons).length
                ? this.icons[Object.keys(this.icons)[0]]
                : undefined;
            var iconUrl = place.placeType && this.icons && this.icons[place.placeType]
                ? this.icons[place.placeType]
                : defaultIcon;
            var marker = {
                position: position,
                locationId: place.id,
                title: $localize(templateObject_1 || (templateObject_1 = __makeTemplateObject([":@@places.map.marker.title:map marker"], [":@@places.map.marker.title:map marker"]))),
            };
            // if there is no icon at all, use maps default pin
            if (iconUrl) {
                marker = Object.assign(Object.assign({}, marker), {
                    icon: {
                        url: iconUrl,
                    },
                });
            }
            return helpers.createMarker(marker);
        };
        Object.defineProperty(MapWrapperComponent.prototype, "options", {
            get: function () {
                return {
                    center: {
                        lat: this.latitude,
                        lng: this.longitude,
                    },
                    zoom: this.mapZoom,
                    disableDefaultUI: true,
                    zoomControl: true,
                    styles: [
                        {
                            featureType: 'poi',
                            stylers: [{ visibility: 'off' }],
                        },
                    ],
                };
            },
            enumerable: false,
            configurable: true
        });
        MapWrapperComponent.prototype.setMapOptions = function (component) {
            var _this = this;
            this.mapHelpers = component.mapHelpers;
            this.mapHelpers.setMapOptions({
                mapTypeControlOptions: {
                    mapTypeIds: [google.maps.MapTypeId.ROADMAP],
                },
            });
            this.mapHelpers.onMapEvent('idle', function () { return _this.emitMapUpdate(); });
            this.currentLocationIconOptions = {
                path: google.maps.SymbolPath.CIRCLE,
                fillColor: '#4285F4',
                fillOpacity: 1,
                scale: 6,
                strokeColor: 'white',
                strokeWeight: 2,
            };
            if ('geolocation' in navigator) {
                var helpers_1 = this.mapHelpers;
                navigator.geolocation.getCurrentPosition(function (location) {
                    var position = {
                        lat: location.coords.latitude,
                        lng: location.coords.longitude,
                    };
                    helpers_1.setCenter(position);
                    _this.setCurrentLocationMarker(position);
                    _this.locate.emit(position);
                });
            }
            // Everything set, emit that map is ready
            this.mapReady.emit();
        };
        MapWrapperComponent.prototype.ngOnChanges = function (changes) {
            if (!this.mapHelpers) {
                return;
            }
            if (changes.latitude || changes.longitude) {
                this.mapHelpers.setCenter({
                    lat: changes.latitude ? changes.latitude.currentValue : this.latitude,
                    lng: changes.longitude
                        ? changes.longitude.currentValue
                        : this.longitude,
                });
            }
        };
        return MapWrapperComponent;
    }());
    MapWrapperComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: MapWrapperComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    MapWrapperComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: MapWrapperComponent, selector: "bb-map-wrapper", inputs: { apiKey: "apiKey", config: "config", mapZoom: "mapZoom", latitude: "latitude", longitude: "longitude", enableInfoWindow: "enableInfoWindow", icons: "icons", locations: "locations", selectedPlaceId: "selectedPlaceId" }, outputs: { update: "update", selected: "selected", locate: "locate", mapReady: "mapReady" }, viewQueries: [{ propertyName: "template", first: true, predicate: ["bbMapInfoWindowContent"], descendants: true }], usesOnChanges: true, ngImport: i0__namespace, template: "<bb-map-ui\n  [options]=\"this.options\"\n  [config]=\"this.config\"\n  (mapReady)=\"this.setMapOptions($event)\"\n></bb-map-ui>\n\n<div hidden #bbMapInfoWindowContent>\n  <div [attr.data-place-id]=\"place.id\" *ngFor=\"let place of this.places\">\n    <p class=\"bb-text-semi-bold\">{{ place.name }}</p>\n    <div>\n      {{ place.address?.addressLine1 }}, {{ place.address?.postalCode }}\n      {{ place.address?.addressLine2 }}\n    </div>\n  </div>\n</div>\n", components: [{ type: MapComponent, selector: "bb-map-ui", inputs: ["options", "config"], outputs: ["mapReady"] }], directives: [{ type: i1__namespace$3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: MapWrapperComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-map-wrapper',
                        templateUrl: './map-wrapper.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], propDecorators: { apiKey: [{
                    type: i0.Input
                }], config: [{
                    type: i0.Input
                }], mapZoom: [{
                    type: i0.Input
                }], latitude: [{
                    type: i0.Input
                }], longitude: [{
                    type: i0.Input
                }], enableInfoWindow: [{
                    type: i0.Input
                }], icons: [{
                    type: i0.Input
                }], locations: [{
                    type: i0.Input
                }], selectedPlaceId: [{
                    type: i0.Input
                }], update: [{
                    type: i0.Output
                }], selected: [{
                    type: i0.Output
                }], locate: [{
                    type: i0.Output
                }], mapReady: [{
                    type: i0.Output
                }], template: [{
                    type: i0.ViewChild,
                    args: ['bbMapInfoWindowContent']
                }] } });
    var templateObject_1;

    var PlacesViewComponent = /** @class */ (function () {
        function PlacesViewComponent(config, service, assetsService, cd, loader) {
            var _this = this;
            this.config = config;
            this.service = service;
            this.assetsService = assetsService;
            this.cd = cd;
            this.loader = loader;
            this.mapParamsSubject = new rxjs.Subject();
            this.mapParams = this.mapParamsSubject.asObservable();
            this.selectedPlaceId = new rxjs.Subject();
            this.resolveAsset = this.assetsService.createAssetsResolver({
                widgetName: 'bb-places-journey-ang',
                getURIFromAssetID: function (placeType) {
                    var found = _this.placeTypes.find(function (type) { return type === placeType; });
                    return found
                        ? _this.config.placeTypes[found].markerUrl || defaultPlaceTypeMarkerURI
                        : defaultPlaceTypeMarkerURI;
                },
            });
            this.mapConfigObject = {};
            this.locations = this.mapParams.pipe(operators.filter(function (params) { return params !== undefined; }), operators.switchMap(function (params) { return _this.service.getPlaces(params); }), operators.map(function (data) { return _this.config.limitList ? data.slice(0, _this.config.limitList) : data; }), operators.catchError(function (error) {
                _this.handleError(error);
                return rxjs.of([]);
            }));
            this.selectedView = 'list';
            this.latitude = 0;
            this.longitude = 0;
            this.radius = 1;
            this.types = [];
            this.latitude = this.config.latitude;
            this.longitude = this.config.longitude;
            this.radius = this.config.radius;
            this.limitList = this.config.limitList;
        }
        Object.defineProperty(PlacesViewComponent.prototype, "groupBtns", {
            get: function () {
                return this.groupBtnRef;
            },
            // This is required to show info window only on mobile screen
            set: function (elRef) {
                var _this = this;
                this.groupBtnRef = elRef;
                setTimeout(function () {
                    if (!_this.groupBtnRef) {
                        return;
                    }
                    _this.smallScreen =
                        window.getComputedStyle(_this.groupBtnRef.nativeElement).display !==
                            'none';
                }, 0);
            },
            enumerable: false,
            configurable: true
        });
        PlacesViewComponent.prototype.loadApi = function (mapConfig) {
            var _this = this;
            if (mapConfig === void 0) { mapConfig = {}; }
            this.loader.config = mapConfig;
            return this.loader.load().then(function () {
                _this.geocoder = new google.maps.Geocoder();
                return;
            });
        };
        PlacesViewComponent.prototype.getCurrentLocation = function () {
            var _this = this;
            if ('geolocation' in navigator) {
                navigator.geolocation.getCurrentPosition(function (location) {
                    _this.currentPosition = {
                        lat: location.coords.latitude,
                        lng: location.coords.longitude,
                    };
                    if (!_this.geocoder) {
                        return;
                    }
                    _this.geocoder.geocode({ location: _this.currentPosition }, function (results, status) {
                        if (status === google.maps.GeocoderStatus.OK && results[0]) {
                            var route = results[0].address_components.filter(function (item) { return item.types.find(function (type) { return type === 'route'; }); });
                            _this.currentLocation =
                                route[0].long_name || results[0].formatted_address;
                        }
                    });
                });
            }
        };
        PlacesViewComponent.prototype.handleError = function (error) {
            this.error = parseError(error);
        };
        Object.defineProperty(PlacesViewComponent.prototype, "mapConfig", {
            get: function () {
                return this.mapConfigObject;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlacesViewComponent.prototype, "placeTypes", {
            get: function () {
                return Object.keys(this.config.placeTypes);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlacesViewComponent.prototype, "icons", {
            get: function () {
                var _this = this;
                var types = [defaultPlaceType].concat(this.placeTypes);
                return rxjs.combineLatest(types.map(function (type) { return _this.resolveAsset(type); })).pipe(operators.map(function (assets) {
                    var icons = {};
                    for (var i = 0; i < assets.length; i++) {
                        icons[types[i]] = assets[i];
                    }
                    return icons;
                }));
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PlacesViewComponent.prototype, "isMetric", {
            get: function () {
                return this.config.measurementSystem !== exports.PlacesMeasurementSystem.METRIC;
            },
            enumerable: false,
            configurable: true
        });
        PlacesViewComponent.prototype.filterTypes = function (values) {
            var types = [];
            Object.keys(values).forEach(function (key) {
                if (values[key]) {
                    types.push(key);
                }
            });
            return types;
        };
        PlacesViewComponent.prototype.locationUpdate = function (params) {
            this.latitude = params.latitude;
            this.longitude = params.longitude;
            this.radius = params.radius || this.config.radius;
            this.types = params.types || this.types;
            this.cd.detectChanges();
            this.mapParamsSubject.next(Object.assign(Object.assign({}, params), { radius: this.config.radius, types: this.types }));
        };
        PlacesViewComponent.prototype.handleTypeSearch = function (types) {
            this.locationUpdate({
                latitude: this.latitude,
                longitude: this.longitude,
                radius: this.radius,
                types: types,
            });
        };
        PlacesViewComponent.prototype.handleMapSearch = function (place) {
            if (!place.geometry) {
                return;
            }
            this.locationUpdate({
                latitude: place.geometry.location.lat(),
                longitude: place.geometry.location.lng(),
                radius: this.config.radius,
                types: this.types,
            });
        };
        PlacesViewComponent.prototype.updatePlaceSelection = function (place) {
            this.selectedPlaceId.next(place.id);
        };
        PlacesViewComponent.prototype.onMapReady = function () {
            // Map is there, so we don't use list limit property to determine list size. Map's zoom and radius parameter are driving it from now on
            this.limitList = undefined;
            this.locationUpdate({
                latitude: this.latitude,
                longitude: this.longitude,
                radius: this.radius,
                types: this.types,
            });
        };
        PlacesViewComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.mapConfigObject = {
                apiKey: this.config.apiKey,
                libraries: ['geometry'],
            };
            this.loadApi(this.mapConfigObject).then(function () {
                _this.getCurrentLocation();
            });
            this.locationUpdate({
                latitude: this.config.latitude,
                longitude: this.config.longitude,
                radius: this.config.radius,
            });
        };
        return PlacesViewComponent;
    }());
    PlacesViewComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PlacesViewComponent, deps: [{ token: PlacesJourneyConfigService }, { token: PlacesService }, { token: i1__namespace.AssetsService }, { token: i0__namespace.ChangeDetectorRef }, { token: MapAPILoaderService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    PlacesViewComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PlacesViewComponent, selector: "bb-places-view", providers: [MapAPILoaderService], viewQueries: [{ propertyName: "groupBtns", first: true, predicate: ["groupBtns"], descendants: true }], ngImport: i0__namespace, template: "<div\n  [ngClass]=\"{\n    'bb-heading-widget bb-heading-widget--de-elevated': config.deElevatedHeader\n  }\"\n>\n  <bb-header-ui\n    headingType=\"h1\"\n    [headingClasses]=\"\n      config.deElevatedHeader\n        ? 'bb-heading-widget__heading'\n        : 'bb-heading-widget__heading px-0 pb-5'\n    \"\n    heading=\"Find Branches and ATMs\"\n    i18n-heading=\"\n      Find Branches and ATMs|Heading for the Places\n      journey@@places.journey.heading.text\"\n  ></bb-header-ui>\n  <ng-content></ng-content>\n</div>\n\n<div\n  [ngClass]=\"{ 'container--drag-up container-fluid': config.deElevatedHeader }\"\n>\n  <ng-container\n    *ngTemplateOutlet=\"placesContainer; context: { places: locations | async }\"\n  ></ng-container>\n</div>\n\n<ng-template #placesContainer let-places=\"places\">\n  <div class=\"card\">\n    <div class=\"card-body\">\n      <div class=\"row\" [class.bb-stack--center]=\"this.error\">\n        <ng-container *ngIf=\"!this.error; else errorState\">\n          <div class=\"col-md-6\">\n            <bb-map-search-ui\n              [config]=\"this.mapConfig\"\n              (mapSearch)=\"this.handleMapSearch($event)\"\n            ></bb-map-search-ui>\n\n            <div\n              class=\"bb-inline-stack bb-text-support bb-block bb-block--md\"\n              *ngIf=\"this.currentLocation\"\n            >\n              <bb-icon-ui\n                name=\"my-location\"\n                class=\"bb-inline-stack__item\"\n              ></bb-icon-ui>\n              <span\n                class=\"bb-inline-stack__item\"\n                i18n=\"\n                  Current Location|current location message for\n                  places@@places.state.currentLocation\"\n                >Current Location - {{ this.currentLocation }}</span\n              >\n            </div>\n\n            <form\n              #placeTypeFilterForm=\"ngForm\"\n              class=\"bb-block bb-block--md bb-stack bb-stack--density-xl\"\n              *ngIf=\"places && places.length\"\n            >\n              <bb-input-checkbox-ui\n                *ngFor=\"let type of this.placeTypes; let i = index\"\n                ngModel\n                [name]=\"type\"\n                class=\"bb-stack__item\"\n                (change)=\"\n                  this.handleTypeSearch(\n                    this.filterTypes(placeTypeFilterForm.value)\n                  )\n                \"\n              >\n                <span i18n=\"filters|filters for types@@places.filter.types\"\n                  >{type, select, atm {ATM's} branch {Branches}}</span\n                >\n              </bb-input-checkbox-ui>\n            </form>\n\n            <div\n              class=\"bb-text-align-center bb-block bb-block--md d-md-none\"\n              #groupBtns\n            >\n              <div\n                class=\"btn-group btn-group-toggle bb-block bb-block--full-width\"\n              >\n                <button\n                  class=\"btn btn-secondary\"\n                  [ngClass]=\"{ active: this.selectedView === 'list' }\"\n                  name=\"list\"\n                  (click)=\"this.selectedView = 'list'\"\n                  i18n=\"List view button|List view @@places.toggle.view.list\"\n                >\n                  List\n                </button>\n                <button\n                  class=\"btn btn-secondary\"\n                  [ngClass]=\"{ active: this.selectedView === 'map' }\"\n                  (click)=\"this.selectedView = 'map'\"\n                  i18n=\"Map view Button|Map view @@places.toggle.view.map\"\n                >\n                  Map\n                </button>\n              </div>\n            </div>\n\n            <div [hidden]=\"this.selectedView === 'map'\" class=\"d-md-block\">\n              <div\n                class=\"bb-places-list\"\n                [ngClass]=\"\n                  places && places.length ? '' : 'bb-places-list--empty'\n                \"\n              >\n                <ng-container *ngIf=\"places; else loadingState\">\n                  <ng-container *ngIf=\"places.length; else emptyState\">\n                    <bb-places-list\n                      [radius]=\"this.config.radius\"\n                      [locations]=\"places\"\n                      [selectedPlaceId]=\"\n                        (this.selectedPlaceId | async) || undefined\n                      \"\n                      [currentPosition]=\"this.currentPosition\"\n                      [isMetric]=\"this.isMetric\"\n                      [placeTypes]=\"this.config.placeTypes\"\n                      (selected)=\"this.updatePlaceSelection($event)\"\n                    ></bb-places-list>\n                  </ng-container>\n                </ng-container>\n              </div>\n            </div>\n          </div>\n          <div\n            class=\"col-md-6 d-md-block\"\n            [hidden]=\"this.selectedView === 'list'\"\n          >\n            <bb-map-wrapper\n              [apiKey]=\"this.config.apiKey\"\n              [config]=\"this.mapConfig\"\n              [mapZoom]=\"this.config.mapZoom\"\n              [latitude]=\"this.latitude\"\n              [longitude]=\"this.longitude\"\n              [icons]=\"this.icons | async\"\n              [locations]=\"places\"\n              [enableInfoWindow]=\"!!this.smallScreen\"\n              [selectedPlaceId]=\"(this.selectedPlaceId | async) || undefined\"\n              (update)=\"this.locationUpdate($event)\"\n              (selected)=\"this.updatePlaceSelection($event)\"\n              (mapReady)=\"this.onMapReady()\"\n            ></bb-map-wrapper>\n          </div>\n        </ng-container>\n      </div>\n    </div>\n  </div>\n</ng-template>\n\n<!-- Empty List -->\n<ng-template #emptyState>\n  <bb-empty-state-ui\n    class=\"bb-text-align-center\"\n    i18n-title=\"\n      No locations found|Title of a message that is shown when there are no\n      places@@places.state.noResultsFound.title\"\n    i18n-subtitle=\"\n      We could not find any items in this area. Try moving the map or searching\n      for a city or branch|Subtitle of a message that is shown when there are no\n      places@@places.state.noResultsFound.subtitle\"\n    title=\"No Locations Found\"\n    subtitle=\"We couldn\u2019t find any branches or ATMs in this region. Try moving the map or searching for a city or branch.\"\n    iconSize=\"xxl\"\n    iconModifier=\"place\"\n  ></bb-empty-state-ui>\n</ng-template>\n\n<!-- Loading State -->\n<ng-template #loadingState>\n  <bb-loading-indicator-ui\n    i18n-text=\"\n      Loading places data|Text to display while loading\n      places@@places.state.loadingPlaces\"\n  ></bb-loading-indicator-ui>\n</ng-template>\n\n<!-- Error State -->\n<ng-template #errorState>\n  <bb-common-error-state-ui [error]=\"errorCustomTemplate\">\n    <ng-template #errorCustomTemplate>\n      <bb-empty-state-ui\n        class=\"bb-text-align-center\"\n        i18n-title=\"\n          Page couldn\u2019t load|Title of a message that is shown when page couldn't\n          load@@places.state.pageCouldnotLoad.title\"\n        i18n-subtitle=\"\n          Try to reload the page or contact the system administrator.|Subtitle\n          of a message that is shown when page could not\n          load@@places.state.pageCouldnotLoad.subtitle\"\n        title=\"Page couldn\u2019t load\"\n        subtitle=\"Try to reload the page or contact the system administrator.\"\n        iconSize=\"xxl\"\n        iconModifier=\"error\"\n      ></bb-empty-state-ui>\n    </ng-template>\n  </bb-common-error-state-ui>\n</ng-template>\n", components: [{ type: i5__namespace.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: MapSearchComponent, selector: "bb-map-search-ui", inputs: ["options", "config"], outputs: ["mapSearch"] }, { type: i1__namespace$4.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i8__namespace.InputCheckboxComponent, selector: "bb-input-checkbox-ui", inputs: ["indeterminate"], outputs: ["indeterminateChange"] }, { type: PlacesListComponent, selector: "bb-places-list", inputs: ["radius", "locations", "selectedPlaceId", "currentPosition", "isMetric", "placeTypes"], outputs: ["selected"] }, { type: MapWrapperComponent, selector: "bb-map-wrapper", inputs: ["apiKey", "config", "mapZoom", "latitude", "longitude", "enableInfoWindow", "icons", "locations", "selectedPlaceId"], outputs: ["update", "selected", "locate", "mapReady"] }, { type: i11__namespace.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }, { type: i12__namespace.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i13__namespace.ErrorCommonStateComponent, selector: "bb-common-error-state-ui", inputs: ["error"] }], directives: [{ type: i1__namespace$3.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i1__namespace$3.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i1__namespace$3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i15__namespace.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i15__namespace.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i15__namespace.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1__namespace$3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i15__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i15__namespace.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }], pipes: { "async": i1__namespace$3.AsyncPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PlacesViewComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-places-view',
                        templateUrl: './places-view.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        providers: [MapAPILoaderService],
                    }]
            }], ctorParameters: function () { return [{ type: PlacesJourneyConfigService }, { type: PlacesService }, { type: i1__namespace.AssetsService }, { type: i0__namespace.ChangeDetectorRef }, { type: MapAPILoaderService }]; }, propDecorators: { groupBtns: [{
                    type: i0.ViewChild,
                    args: ['groupBtns']
                }] } });

    var MapModule = /** @class */ (function () {
        function MapModule() {
        }
        return MapModule;
    }());
    MapModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: MapModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    MapModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: MapModule, declarations: [MapComponent, MapSearchComponent], imports: [i1$3.CommonModule, i2.SearchBoxModule, button.ButtonModule, i1$4.IconModule], exports: [MapComponent, MapSearchComponent] });
    MapModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: MapModule, providers: [MapAPILoaderService, MapHelpersService], imports: [[i1$3.CommonModule, i2.SearchBoxModule, button.ButtonModule, i1$4.IconModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: MapModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i1$3.CommonModule, i2.SearchBoxModule, button.ButtonModule, i1$4.IconModule],
                        declarations: [MapComponent, MapSearchComponent],
                        exports: [MapComponent, MapSearchComponent],
                        providers: [MapAPILoaderService, MapHelpersService],
                    }]
            }] });

    var defaultRoute = {
        path: '',
        component: PlacesJourneyComponent,
        children: [
            {
                path: '',
                component: PlacesViewComponent,
                data: { title: 'Places' },
            },
        ],
    };
    var components = [
        PlacesListComponent,
        MapWrapperComponent,
        PlaceDetailsComponent,
        WorkTimesComponent,
        KeyboardAccessibilityDirective,
    ];
    var modules = [
        i5.HeaderModule,
        i11.EmptyStateModule,
        i13.ErrorCommonStateModule,
        i12.LoadingIndicatorModule,
        i1$4.IconModule,
        button.ButtonModule,
        MapModule,
        i3.CollapsibleModule,
        i2$1.CollapsibleAccordionModule,
        i8.InputCheckboxModule,
    ];
    var PlacesJourneyModule = /** @class */ (function () {
        function PlacesJourneyModule() {
        }
        PlacesJourneyModule.forRoot = function (data) {
            if (data === void 0) { data = { route: defaultRoute }; }
            return {
                ngModule: PlacesJourneyModule,
                providers: [i1$1.provideRoutes([data.route])],
            };
        };
        return PlacesJourneyModule;
    }());
    PlacesJourneyModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PlacesJourneyModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    PlacesJourneyModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PlacesJourneyModule, declarations: [PlacesJourneyComponent, PlacesViewComponent, PlacesListComponent,
            MapWrapperComponent,
            PlaceDetailsComponent,
            WorkTimesComponent,
            KeyboardAccessibilityDirective], imports: [i1$3.CommonModule,
            i15.FormsModule, i1__namespace.BackbaseCoreModule, i1$1.RouterModule, i5.HeaderModule,
            i11.EmptyStateModule,
            i13.ErrorCommonStateModule,
            i12.LoadingIndicatorModule,
            i1$4.IconModule,
            button.ButtonModule,
            MapModule,
            i3.CollapsibleModule,
            i2$1.CollapsibleAccordionModule,
            i8.InputCheckboxModule] });
    PlacesJourneyModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PlacesJourneyModule, providers: [PlacesService], imports: [__spreadArray([
                i1$3.CommonModule,
                i15.FormsModule,
                i1.BackbaseCoreModule.withConfig({
                    classMap: { PlacesJourneyComponent: PlacesJourneyComponent },
                }),
                i1$1.RouterModule
            ], __read(modules))] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PlacesJourneyModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: __spreadArray([PlacesJourneyComponent, PlacesViewComponent], __read(components)),
                        imports: __spreadArray([
                            i1$3.CommonModule,
                            i15.FormsModule,
                            i1.BackbaseCoreModule.withConfig({
                                classMap: { PlacesJourneyComponent: PlacesJourneyComponent },
                            }),
                            i1$1.RouterModule
                        ], __read(modules)),
                        providers: [PlacesService],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.PlacesJourneyComponent = PlacesJourneyComponent;
    exports.PlacesJourneyConfigService = PlacesJourneyConfigService;
    exports.PlacesJourneyConfigurationToken = PlacesJourneyConfigurationToken;
    exports.PlacesJourneyModule = PlacesJourneyModule;
    exports.PlacesService = PlacesService;
    exports.PlacesViewComponent = PlacesViewComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-places-journey-ang.umd.js.map
