/// <reference types="googlemaps" />
import { OnInit, ChangeDetectorRef, ElementRef } from '@angular/core';
import { Observable, Subject } from 'rxjs';
import { AssetsService } from '@backbase/foundation-ang/core';
import { Place, MarkerIcons, PlaceItem } from '../model/place-model';
import { PlacesGetParams } from '../model/place-param-model';
import { PlacesError } from '../model/place-error-model';
import { PlacesService } from '../services/places.service';
import { MapsAPIConfig, MapAPILoaderService } from '../components/bb-map-ui/map-api-loader.service';
import { PlacesJourneyConfigService } from '../services/places-journey-config.service';
import * as i0 from "@angular/core";
export declare class PlacesViewComponent implements OnInit {
    readonly config: PlacesJourneyConfigService;
    private readonly service;
    private readonly assetsService;
    private readonly cd;
    private readonly loader;
    set groupBtns(elRef: ElementRef | undefined);
    private groupBtnRef;
    private readonly mapParamsSubject;
    private readonly mapParams;
    readonly selectedPlaceId: Subject<string>;
    private readonly resolveAsset;
    private mapConfigObject;
    private geocoder;
    readonly locations: Observable<Place[]>;
    error: PlacesError | undefined;
    selectedView: 'list' | 'map';
    smallScreen: boolean | undefined;
    currentLocation: string | undefined;
    currentPosition: google.maps.LatLngLiteral | undefined;
    latitude: number;
    longitude: number;
    radius: number;
    limitList: number | undefined;
    types: string[];
    constructor(config: PlacesJourneyConfigService, service: PlacesService, assetsService: AssetsService, cd: ChangeDetectorRef, loader: MapAPILoaderService);
    private loadApi;
    private getCurrentLocation;
    private handleError;
    get groupBtns(): ElementRef<any> | undefined;
    get mapConfig(): MapsAPIConfig;
    get placeTypes(): string[];
    get icons(): Observable<MarkerIcons>;
    get isMetric(): boolean;
    filterTypes(values: {
        [type: string]: boolean;
    }): string[];
    locationUpdate(params: PlacesGetParams): void;
    handleTypeSearch(types: string[]): void;
    handleMapSearch(place: google.maps.places.PlaceResult): void;
    updatePlaceSelection(place: PlaceItem): void;
    onMapReady(): void;
    ngOnInit(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<PlacesViewComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<PlacesViewComponent, "bb-places-view", never, {}, {}, never, ["*"]>;
}
