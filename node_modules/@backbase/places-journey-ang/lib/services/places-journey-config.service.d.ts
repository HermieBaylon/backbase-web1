import { InjectionToken } from '@angular/core';
import { ItemModel } from '@backbase/foundation-ang/core';
import * as i0 from "@angular/core";
export declare const PlacesJourneyConfigurationToken: InjectionToken<PlacesJourneyConfiguration>;
export declare enum PlacesMeasurementSystem {
    METRIC = "metric",
    US_IMPERIAL = "imperial"
}
export interface PlaceTypes {
    [placeType: string]: {
        iconName?: string;
        markerUrl?: string;
    };
}
export interface PlacesJourneyConfiguration {
    apiKey: string;
    placeTypes: PlaceTypes;
    mapZoom: number;
    latitude: number;
    longitude: number;
    radius: number;
    limitList: number;
    measurementSystem: PlacesMeasurementSystem;
    deElevatedHeader: boolean;
}
export declare class PlacesJourneyConfigService {
    private readonly itemModel;
    private _config;
    constructor(config: PlacesJourneyConfiguration, itemModel: ItemModel);
    get defaults(): PlacesJourneyConfiguration;
    /**
     * API key for Google Maps
     */
    get apiKey(): string;
    /**
     * Place types configuration. Used to set up marker image and the filter label for any place type available in the service
     */
    get placeTypes(): PlaceTypes;
    /**
     * Default zoom value for a map
     */
    get mapZoom(): number;
    /**
     * Default map latitude
     */
    get latitude(): number;
    /**
     * Default map longitude
     */
    get longitude(): number;
    /**
     * Default radius in which the locations are being searched while map is not loaded
     */
    get radius(): number;
    /**
     * Maximum amount of locations to display
     */
    get limitList(): number;
    /**
     * Measurement system
     */
    get measurementSystem(): PlacesMeasurementSystem;
    /**
     * Dev config to enable de-elevated header
     */
    get deElevatedHeader(): boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<PlacesJourneyConfigService, [{ optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<PlacesJourneyConfigService>;
}
