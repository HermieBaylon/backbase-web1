/// <reference types="googlemaps" />
import { ElementRef, EventEmitter, OnChanges, SimpleChanges } from '@angular/core';
import { MapComponent, Marker } from '../../components/bb-map-ui/map.component';
import { MarkerIcons, Place, PlaceItem } from '../../model/place-model';
import { PlacesGetParams } from '../../model/place-param-model';
import * as i0 from "@angular/core";
export declare class MapWrapperComponent implements OnChanges {
    /**
     * API key need for the google maps to work.
     */
    apiKey: string;
    /**
     * Map config.
     */
    config: {};
    /**
     * Map zoom.
     */
    mapZoom: number;
    /**
     * Latitude for the coordinates.
     */
    latitude: number;
    /**
     * Longitude for the coordinates.
     */
    longitude: number;
    /**
     * Info window should be displayed after clicking on marker.
     */
    enableInfoWindow: boolean;
    /**
     * Object to describe the map marker icon.
     */
    icons: MarkerIcons | null;
    set locations(locations: Place[]);
    set selectedPlaceId(id: string | undefined);
    /**
     * EventEmitter for triggering a update event.
     */
    readonly update: EventEmitter<PlacesGetParams>;
    /**
     * EventEmitter for place selection update event.
     */
    readonly selected: EventEmitter<PlaceItem>;
    /**
     * EventEmitter for triggering a locate event.
     */
    readonly locate: EventEmitter<google.maps.LatLngLiteral>;
    /**
     * EventEmitter for triggering a mapReady event.
     */
    readonly mapReady: EventEmitter<undefined>;
    template: ElementRef<HTMLElement> | undefined;
    private currentLocationIconOptions;
    private mapHelpers;
    selectedId: string | undefined;
    places: Place[] | undefined;
    markers: Marker[];
    infoWindow: google.maps.InfoWindow | undefined;
    private getInfoWindowContent;
    private getDistance;
    private emitMapUpdate;
    private setCurrentLocationMarker;
    private markerClicklistener;
    private drawMarkers;
    private createMarker;
    /**
     * List of locations to be rendered.
     */
    get locations(): Place[];
    /**
     * Selected place id.
     */
    get selectedPlaceId(): string | undefined;
    get options(): google.maps.MapOptions;
    setMapOptions(component: MapComponent): void;
    ngOnChanges(changes: SimpleChanges): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<MapWrapperComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<MapWrapperComponent, "bb-map-wrapper", never, { "apiKey": "apiKey"; "config": "config"; "mapZoom": "mapZoom"; "latitude": "latitude"; "longitude": "longitude"; "enableInfoWindow": "enableInfoWindow"; "icons": "icons"; "locations": "locations"; "selectedPlaceId": "selectedPlaceId"; }, { "update": "update"; "selected": "selected"; "locate": "locate"; "mapReady": "mapReady"; }, never, never>;
}
