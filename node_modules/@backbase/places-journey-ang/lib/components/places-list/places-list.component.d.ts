/// <reference types="googlemaps" />
import { EventEmitter, ElementRef } from '@angular/core';
import { DatePipe } from '@angular/common';
import { Hour } from '@backbase/data-ang/places';
import { Place, PlaceItem } from '../../model/place-model';
import { PlaceTypes } from '../../services/places-journey-config.service';
import * as i0 from "@angular/core";
export declare class PlacesListComponent {
    private readonly datePipe;
    /**
     * Map radius.
     */
    radius: number;
    /**
     * List of locations to be rendered.
     */
    set locations(locations: Place[]);
    /**
     * The Place selected by user
     */
    selectedPlaceId: string | undefined;
    /**
     * The current position retrieved by geolocation html5 api
     */
    currentPosition: google.maps.LatLngLiteral | undefined;
    /**
     * Use metric system for displaying distances.
     */
    isMetric: boolean;
    /**
     * Provide Place Types
     */
    placeTypes: PlaceTypes;
    /**
     * EventEmitter for triggering a place selection update event.
     */
    readonly selected: EventEmitter<PlaceItem>;
    transM: ElementRef | undefined;
    transKm: ElementRef | undefined;
    transFt: ElementRef | undefined;
    transMi: ElementRef | undefined;
    places: PlaceItem[];
    constructor(datePipe: DatePipe);
    /**
     * Uses Google geometry library to calculate distance between two points
     * Returns undefined if google library or current position is undefined
     * Returns distance in meters or feet, depending on measurment system property in the widget
     */
    private calculateDistance;
    private isStillOpen;
    private getDistanceUnits;
    onListItemClick(isOpen: boolean, place: PlaceItem): void;
    getClosingHour(hours: Hour[] | undefined, currentDate?: Date): string | undefined;
    getPlaceTypeIcon(type: string | undefined): string;
    formatDistance(distance: number): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<PlacesListComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<PlacesListComponent, "bb-places-list", never, { "radius": "radius"; "locations": "locations"; "selectedPlaceId": "selectedPlaceId"; "currentPosition": "currentPosition"; "isMetric": "isMetric"; "placeTypes": "placeTypes"; }, { "selected": "selected"; }, never, never>;
}
