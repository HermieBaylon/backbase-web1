/// <reference types="googlemaps" />
import { MapAPILoaderService, MapsAPIConfig } from './map-api-loader.service';
import { MarkerOptions, Marker } from './map.component';
import * as i0 from "@angular/core";
/**
 * Handles the communication with the Google Maps Javascript
 * API v3
 */
export declare class MapHelpersService {
    private readonly loader;
    private map;
    constructor(loader: MapAPILoaderService);
    createMap(el: HTMLElement, mapOptions: google.maps.MapOptions, mapConfig?: MapsAPIConfig): Promise<void>;
    setMapOptions(options: google.maps.MapOptions): void;
    /**
     * Creates a google map marker with the map context
     */
    createMarker(options?: MarkerOptions, addToMap?: boolean): Marker;
    createInfoWindow(options?: google.maps.InfoWindowOptions): google.maps.InfoWindow;
    openInfoWindow(infoWindow: google.maps.InfoWindow, marker: google.maps.Marker): void;
    onMapEvent(eventName: string, callback: Function): void;
    setCenter(latLng: google.maps.LatLngLiteral): void;
    getZoom(): number;
    getBounds(): google.maps.LatLngBounds | null | undefined;
    getMapTypeId(): google.maps.MapTypeId | string;
    setZoom(zoom: number): void;
    getCenter(): google.maps.LatLng;
    panTo(latLng: google.maps.LatLng | google.maps.LatLngLiteral): void;
    panBy(x: number, y: number): void;
    fitBounds(latLng: google.maps.LatLngBounds | google.maps.LatLngBoundsLiteral): void;
    panToBounds(latLng: google.maps.LatLngBounds | google.maps.LatLngBoundsLiteral): void;
    /**
     * Triggers the given event name on the map instance.
     */
    triggerMapEvent(eventName: string): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<MapHelpersService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<MapHelpersService>;
}
