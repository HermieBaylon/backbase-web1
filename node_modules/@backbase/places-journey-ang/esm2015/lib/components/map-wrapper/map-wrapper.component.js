import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewChild, } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "../bb-map-ui/map.component";
import * as i2 from "@angular/common";
export class MapWrapperComponent {
    constructor() {
        /**
         * API key need for the google maps to work.
         */
        this.apiKey = '';
        /**
         * Map config.
         */
        this.config = {};
        /**
         * Map zoom.
         */
        this.mapZoom = 0;
        /**
         * Latitude for the coordinates.
         */
        this.latitude = 0;
        /**
         * Longitude for the coordinates.
         */
        this.longitude = 0;
        /**
         * Info window should be displayed after clicking on marker.
         */
        this.enableInfoWindow = false;
        /**
         * Object to describe the map marker icon.
         */
        this.icons = {};
        /**
         * EventEmitter for triggering a update event.
         */
        this.update = new EventEmitter();
        /**
         * EventEmitter for place selection update event.
         */
        this.selected = new EventEmitter();
        /**
         * EventEmitter for triggering a locate event.
         */
        this.locate = new EventEmitter();
        /**
         * EventEmitter for triggering a mapReady event.
         */
        this.mapReady = new EventEmitter();
        this.markers = [];
    }
    set locations(locations) {
        this.places = locations;
        if (this.mapHelpers) {
            this.drawMarkers();
        }
    }
    set selectedPlaceId(id) {
        this.selectedId = id;
        if (this.mapHelpers) {
            this.drawMarkers();
        }
    }
    getInfoWindowContent(placeId) {
        const wrapperElement = this.template
            .nativeElement;
        const template = wrapperElement.querySelector(`div[data-place-id='${placeId}']`);
        return template ? template.innerHTML : '';
    }
    getDistance(bounds) {
        if (!bounds) {
            return 0;
        }
        return (google.maps.geometry.spherical.computeDistanceBetween(bounds.getNorthEast(), bounds.getSouthWest()) / 1000);
    }
    emitMapUpdate() {
        if (!this.mapHelpers) {
            return;
        }
        const center = this.mapHelpers.getCenter();
        this.update.emit({
            latitude: center.lat(),
            longitude: center.lng(),
            radius: Math.ceil(this.getDistance(this.mapHelpers.getBounds()) / 2),
        });
    }
    setCurrentLocationMarker(location) {
        if (!this.mapHelpers) {
            return;
        }
        this.mapHelpers.createMarker({
            position: location,
            clickable: false,
            icon: this.currentLocationIconOptions,
            locationId: '',
        });
    }
    markerClicklistener(marker, place) {
        const helpers = this.mapHelpers;
        if (this.enableInfoWindow) {
            if (this.infoWindow) {
                this.infoWindow.close();
            }
            const content = this.getInfoWindowContent(place.id);
            this.infoWindow = helpers.createInfoWindow({ content });
            helpers.openInfoWindow(this.infoWindow, marker);
        }
        if (this.mapHelpers) {
            if (marker.locationId === this.selectedId) {
                this.selected.emit({
                    id: '',
                    latitude: 0,
                    longitude: 0,
                });
            }
            else {
                this.selected.emit(this.places.find((location) => location.id === marker.locationId));
            }
        }
    }
    drawMarkers() {
        if (!Array.isArray(this.places)) {
            return;
        }
        // markers that are not needed anymore, should be cleared
        const placeIds = this.places.map((place) => place.id);
        const newMarkerList = [];
        this.markers.forEach((marker) => {
            if (placeIds.includes(marker.locationId)) {
                newMarkerList.push(marker);
            }
            else {
                // eslint-disable-next-line
                marker.setMap(null);
            }
        });
        this.markers = newMarkerList;
        // places markers on map
        this.places.forEach((place) => {
            let marker = this.markers.find((item) => item.locationId === place.id);
            if (marker === undefined) {
                marker = this.createMarker(place);
                this.markers.push(marker);
                marker.addListener('click', () => this.markerClicklistener(marker, place));
            }
            if (this.selectedId && placeIds.includes(this.selectedId)) {
                if (place.id === this.selectedId) {
                    marker.setOpacity(1);
                    marker.setIcon({
                        url: marker.getIcon().url,
                        scaledSize: new google.maps.Size(60, 60),
                    });
                }
                else {
                    marker.setOpacity(0.5);
                    marker.setIcon({
                        url: marker.getIcon().url,
                    });
                }
            }
            else {
                marker.setOpacity(1);
                marker.setIcon({
                    url: marker.getIcon().url,
                });
            }
        });
    }
    createMarker(place) {
        const helpers = this.mapHelpers;
        const position = {
            lat: place.latitude,
            lng: place.longitude,
        };
        // try to find place type icon or try to use fallback icon
        const defaultIcon = this.icons && Object.keys(this.icons).length
            ? this.icons[Object.keys(this.icons)[0]]
            : undefined;
        const iconUrl = place.placeType && this.icons && this.icons[place.placeType]
            ? this.icons[place.placeType]
            : defaultIcon;
        let marker = {
            position,
            locationId: place.id,
            title: $localize `:@@places.map.marker.title:map marker`,
        };
        // if there is no icon at all, use maps default pin
        if (iconUrl) {
            marker = Object.assign(Object.assign({}, marker), {
                icon: {
                    url: iconUrl,
                },
            });
        }
        return helpers.createMarker(marker);
    }
    /**
     * List of locations to be rendered.
     */
    get locations() {
        return this.places || [];
    }
    /**
     * Selected place id.
     */
    get selectedPlaceId() {
        return this.selectedId;
    }
    get options() {
        return {
            center: {
                lat: this.latitude,
                lng: this.longitude,
            },
            zoom: this.mapZoom,
            disableDefaultUI: true,
            zoomControl: true,
            styles: [
                {
                    featureType: 'poi',
                    stylers: [{ visibility: 'off' }],
                },
            ],
        };
    }
    setMapOptions(component) {
        this.mapHelpers = component.mapHelpers;
        this.mapHelpers.setMapOptions({
            mapTypeControlOptions: {
                mapTypeIds: [google.maps.MapTypeId.ROADMAP],
            },
        });
        this.mapHelpers.onMapEvent('idle', () => this.emitMapUpdate());
        this.currentLocationIconOptions = {
            path: google.maps.SymbolPath.CIRCLE,
            fillColor: '#4285F4',
            fillOpacity: 1,
            scale: 6,
            strokeColor: 'white',
            strokeWeight: 2,
        };
        if ('geolocation' in navigator) {
            const helpers = this.mapHelpers;
            navigator.geolocation.getCurrentPosition((location) => {
                const position = {
                    lat: location.coords.latitude,
                    lng: location.coords.longitude,
                };
                helpers.setCenter(position);
                this.setCurrentLocationMarker(position);
                this.locate.emit(position);
            });
        }
        // Everything set, emit that map is ready
        this.mapReady.emit();
    }
    ngOnChanges(changes) {
        if (!this.mapHelpers) {
            return;
        }
        if (changes.latitude || changes.longitude) {
            this.mapHelpers.setCenter({
                lat: changes.latitude ? changes.latitude.currentValue : this.latitude,
                lng: changes.longitude
                    ? changes.longitude.currentValue
                    : this.longitude,
            });
        }
    }
}
MapWrapperComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: MapWrapperComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
MapWrapperComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: MapWrapperComponent, selector: "bb-map-wrapper", inputs: { apiKey: "apiKey", config: "config", mapZoom: "mapZoom", latitude: "latitude", longitude: "longitude", enableInfoWindow: "enableInfoWindow", icons: "icons", locations: "locations", selectedPlaceId: "selectedPlaceId" }, outputs: { update: "update", selected: "selected", locate: "locate", mapReady: "mapReady" }, viewQueries: [{ propertyName: "template", first: true, predicate: ["bbMapInfoWindowContent"], descendants: true }], usesOnChanges: true, ngImport: i0, template: "<bb-map-ui\n  [options]=\"this.options\"\n  [config]=\"this.config\"\n  (mapReady)=\"this.setMapOptions($event)\"\n></bb-map-ui>\n\n<div hidden #bbMapInfoWindowContent>\n  <div [attr.data-place-id]=\"place.id\" *ngFor=\"let place of this.places\">\n    <p class=\"bb-text-semi-bold\">{{ place.name }}</p>\n    <div>\n      {{ place.address?.addressLine1 }}, {{ place.address?.postalCode }}\n      {{ place.address?.addressLine2 }}\n    </div>\n  </div>\n</div>\n", components: [{ type: i1.MapComponent, selector: "bb-map-ui", inputs: ["options", "config"], outputs: ["mapReady"] }], directives: [{ type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: MapWrapperComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-map-wrapper',
                    templateUrl: './map-wrapper.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { apiKey: [{
                type: Input
            }], config: [{
                type: Input
            }], mapZoom: [{
                type: Input
            }], latitude: [{
                type: Input
            }], longitude: [{
                type: Input
            }], enableInfoWindow: [{
                type: Input
            }], icons: [{
                type: Input
            }], locations: [{
                type: Input
            }], selectedPlaceId: [{
                type: Input
            }], update: [{
                type: Output
            }], selected: [{
                type: Output
            }], locate: [{
                type: Output
            }], mapReady: [{
                type: Output
            }], template: [{
                type: ViewChild,
                args: ['bbMapInfoWindowContent']
            }] } });
//# sourceMappingURL=data:application/json;base64,