import { Component, ChangeDetectionStrategy, Input, Output, EventEmitter, ViewChild, } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "./map-api-loader.service";
import * as i2 from "@backbase/ui-ang/search-box";
export class MapSearchComponent {
    constructor(loader) {
        this.loader = loader;
        /**
         * Map autocomplete options object.
         */
        this.options = {};
        /**
         * Map API configuration.
         */
        this.config = {};
        /**
         * EventEmitter for triggering a mapSearch event.
         */
        this.mapSearch = new EventEmitter();
    }
    onSearchButtonClick() {
        const input = this.searchBox.inputField;
        if (!input) {
            return;
        }
        // select first result and do the search
        google.maps.event.trigger(input.nativeElement, 'focus', {});
        google.maps.event.trigger(input.nativeElement, 'keydown', {
            keyCode: 40,
            stopPropagation: () => undefined,
            preventDefault: () => undefined,
        });
        google.maps.event.trigger(input.nativeElement, 'keydown', { keyCode: 13 }); // enter
    }
    ngOnInit() {
        this.loader.config = this.config;
        this.loader.load().then(() => {
            const input = this.searchBox.inputField;
            if (!input) {
                return;
            }
            const autocomplete = new google.maps.places.Autocomplete(input.nativeElement, this.options);
            autocomplete.addListener('place_changed', () => {
                const place = autocomplete.getPlace();
                if (place.geometry) {
                    this.mapSearch.emit(place);
                }
            });
        });
    }
}
MapSearchComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: MapSearchComponent, deps: [{ token: i1.MapAPILoaderService }], target: i0.ɵɵFactoryTarget.Component });
MapSearchComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: MapSearchComponent, selector: "bb-map-search-ui", inputs: { options: "options", config: "config" }, outputs: { mapSearch: "mapSearch" }, viewQueries: [{ propertyName: "searchBox", first: true, predicate: ["bbMapsearch"], descendants: true, static: true }], ngImport: i0, template: "<div class=\"bb-block bb-block--md\">\n  <bb-search-box-ui\n    placeholder=\"Search Branch and Street Names\"\n    i18n-placeholder=\"Search for Location@@map-ui.search.placeholder\"\n    aria-label=\"Search Branch and Street Name\"\n    i18n-aria-label=\"\n      Search Branch and Street Name aria-label@@map.search.ui.aria-label\"\n    [showSearch]=\"true\"\n    (submit)=\"onSearchButtonClick()\"\n    #bbMapsearch\n  >\n  </bb-search-box-ui>\n</div>\n", components: [{ type: i2.SearchBoxComponent, selector: "bb-search-box-ui", inputs: ["placeholder", "maxLength", "squareBorder", "typeaheadOptions", "showSearch", "showClear", "searchLabel", "clearLabel", "autocomplete"], outputs: ["submit", "clear", "valueChange"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: MapSearchComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-map-search-ui',
                    templateUrl: './map-search.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.MapAPILoaderService }]; }, propDecorators: { options: [{
                type: Input
            }], config: [{
                type: Input
            }], mapSearch: [{
                type: Output
            }], searchBox: [{
                type: ViewChild,
                args: ['bbMapsearch', { static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFwLXNlYXJjaC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL3BsYWNlcy1qb3VybmV5L3NyYy9saWIvY29tcG9uZW50cy9iYi1tYXAtdWkvbWFwLXNlYXJjaC5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL3BsYWNlcy1qb3VybmV5L3NyYy9saWIvY29tcG9uZW50cy9iYi1tYXAtdWkvbWFwLXNlYXJjaC5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULHVCQUF1QixFQUN2QixLQUFLLEVBQ0wsTUFBTSxFQUNOLFlBQVksRUFDWixTQUFTLEdBRVYsTUFBTSxlQUFlLENBQUM7Ozs7QUFTdkIsTUFBTSxPQUFPLGtCQUFrQjtJQW9CN0IsWUFBNkIsTUFBMkI7UUFBM0IsV0FBTSxHQUFOLE1BQU0sQ0FBcUI7UUFuQnhEOztXQUVHO1FBQ00sWUFBTyxHQUEyQyxFQUFFLENBQUM7UUFDOUQ7O1dBRUc7UUFDTSxXQUFNLEdBQWtCLEVBQUUsQ0FBQztRQUVwQzs7V0FFRztRQUVNLGNBQVMsR0FBaUQsSUFBSSxZQUFZLEVBQWtDLENBQUM7SUFNM0QsQ0FBQztJQUU1RCxtQkFBbUI7UUFDakIsTUFBTSxLQUFLLEdBQWdDLElBQUksQ0FBQyxTQUFVLENBQUMsVUFBVSxDQUFDO1FBQ3RFLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDVixPQUFPO1NBQ1I7UUFFRCx3Q0FBd0M7UUFDeEMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxhQUFhLEVBQUUsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQzVELE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFFLFNBQVMsRUFBRTtZQUN4RCxPQUFPLEVBQUUsRUFBRTtZQUNYLGVBQWUsRUFBRSxHQUFHLEVBQUUsQ0FBQyxTQUFTO1lBQ2hDLGNBQWMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxTQUFTO1NBQ2hDLENBQUMsQ0FBQztRQUNILE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFFLFNBQVMsRUFBRSxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUTtJQUN0RixDQUFDO0lBRUQsUUFBUTtRQUNOLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDakMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFO1lBQzNCLE1BQU0sS0FBSyxHQUFnQyxJQUFJLENBQUMsU0FBVSxDQUFDLFVBQVUsQ0FBQztZQUN0RSxJQUFJLENBQUMsS0FBSyxFQUFFO2dCQUNWLE9BQU87YUFDUjtZQUVELE1BQU0sWUFBWSxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUN0RCxLQUFLLENBQUMsYUFBYSxFQUNuQixJQUFJLENBQUMsT0FBTyxDQUNiLENBQUM7WUFDRixZQUFZLENBQUMsV0FBVyxDQUFDLGVBQWUsRUFBRSxHQUFHLEVBQUU7Z0JBQzdDLE1BQU0sS0FBSyxHQUFHLFlBQVksQ0FBQyxRQUFRLEVBQUUsQ0FBQztnQkFFdEMsSUFBSSxLQUFLLENBQUMsUUFBUSxFQUFFO29CQUNsQixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztpQkFDNUI7WUFDSCxDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7Z0hBMURVLGtCQUFrQjtvR0FBbEIsa0JBQWtCLHVRQ2pCL0IsMGNBYUE7NEZESWEsa0JBQWtCO2tCQUw5QixTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxrQkFBa0I7b0JBQzVCLFdBQVcsRUFBRSw2QkFBNkI7b0JBQzFDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2lCQUNoRDswR0FLVSxPQUFPO3NCQUFmLEtBQUs7Z0JBSUcsTUFBTTtzQkFBZCxLQUFLO2dCQU1HLFNBQVM7c0JBRGpCLE1BQU07Z0JBR3FDLFNBQVM7c0JBQXBELFNBQVM7dUJBQUMsYUFBYSxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIElucHV0LFxuICBPdXRwdXQsXG4gIEV2ZW50RW1pdHRlcixcbiAgVmlld0NoaWxkLFxuICBPbkluaXQsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTWFwQVBJTG9hZGVyU2VydmljZSwgTWFwc0FQSUNvbmZpZyB9IGZyb20gJy4vbWFwLWFwaS1sb2FkZXIuc2VydmljZSc7XG5pbXBvcnQgeyBTZWFyY2hCb3hDb21wb25lbnQgfSBmcm9tICdAYmFja2Jhc2UvdWktYW5nL3NlYXJjaC1ib3gnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdiYi1tYXAtc2VhcmNoLXVpJyxcbiAgdGVtcGxhdGVVcmw6ICcuL21hcC1zZWFyY2guY29tcG9uZW50Lmh0bWwnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbn0pXG5leHBvcnQgY2xhc3MgTWFwU2VhcmNoQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgLyoqXG4gICAqIE1hcCBhdXRvY29tcGxldGUgb3B0aW9ucyBvYmplY3QuXG4gICAqL1xuICBASW5wdXQoKSBvcHRpb25zOiBnb29nbGUubWFwcy5wbGFjZXMuQXV0b2NvbXBsZXRlT3B0aW9ucyA9IHt9O1xuICAvKipcbiAgICogTWFwIEFQSSBjb25maWd1cmF0aW9uLlxuICAgKi9cbiAgQElucHV0KCkgY29uZmlnOiBNYXBzQVBJQ29uZmlnID0ge307XG5cbiAgLyoqXG4gICAqIEV2ZW50RW1pdHRlciBmb3IgdHJpZ2dlcmluZyBhIG1hcFNlYXJjaCBldmVudC5cbiAgICovXG4gIEBPdXRwdXQoKVxuICByZWFkb25seSBtYXBTZWFyY2g6IEV2ZW50RW1pdHRlcjxnb29nbGUubWFwcy5wbGFjZXMuUGxhY2VSZXN1bHQ+ID0gbmV3IEV2ZW50RW1pdHRlcjxnb29nbGUubWFwcy5wbGFjZXMuUGxhY2VSZXN1bHQ+KCk7XG5cbiAgQFZpZXdDaGlsZCgnYmJNYXBzZWFyY2gnLCB7IHN0YXRpYzogdHJ1ZSB9KSBzZWFyY2hCb3g6XG4gICAgfCBTZWFyY2hCb3hDb21wb25lbnQ8c3RyaW5nPlxuICAgIHwgdW5kZWZpbmVkO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgbG9hZGVyOiBNYXBBUElMb2FkZXJTZXJ2aWNlKSB7fVxuXG4gIG9uU2VhcmNoQnV0dG9uQ2xpY2soKSB7XG4gICAgY29uc3QgaW5wdXQgPSAoPFNlYXJjaEJveENvbXBvbmVudDxzdHJpbmc+PnRoaXMuc2VhcmNoQm94KS5pbnB1dEZpZWxkO1xuICAgIGlmICghaW5wdXQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBzZWxlY3QgZmlyc3QgcmVzdWx0IGFuZCBkbyB0aGUgc2VhcmNoXG4gICAgZ29vZ2xlLm1hcHMuZXZlbnQudHJpZ2dlcihpbnB1dC5uYXRpdmVFbGVtZW50LCAnZm9jdXMnLCB7fSk7XG4gICAgZ29vZ2xlLm1hcHMuZXZlbnQudHJpZ2dlcihpbnB1dC5uYXRpdmVFbGVtZW50LCAna2V5ZG93bicsIHtcbiAgICAgIGtleUNvZGU6IDQwLCAvLyBhcnJvdyBkb3duXG4gICAgICBzdG9wUHJvcGFnYXRpb246ICgpID0+IHVuZGVmaW5lZCwgLy8gYmVjYXVzZSB0aGVzZSBnZXQgY2FsbGVkXG4gICAgICBwcmV2ZW50RGVmYXVsdDogKCkgPT4gdW5kZWZpbmVkLFxuICAgIH0pO1xuICAgIGdvb2dsZS5tYXBzLmV2ZW50LnRyaWdnZXIoaW5wdXQubmF0aXZlRWxlbWVudCwgJ2tleWRvd24nLCB7IGtleUNvZGU6IDEzIH0pOyAvLyBlbnRlclxuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5sb2FkZXIuY29uZmlnID0gdGhpcy5jb25maWc7XG4gICAgdGhpcy5sb2FkZXIubG9hZCgpLnRoZW4oKCkgPT4ge1xuICAgICAgY29uc3QgaW5wdXQgPSAoPFNlYXJjaEJveENvbXBvbmVudDxzdHJpbmc+PnRoaXMuc2VhcmNoQm94KS5pbnB1dEZpZWxkO1xuICAgICAgaWYgKCFpbnB1dCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGF1dG9jb21wbGV0ZSA9IG5ldyBnb29nbGUubWFwcy5wbGFjZXMuQXV0b2NvbXBsZXRlKFxuICAgICAgICBpbnB1dC5uYXRpdmVFbGVtZW50LFxuICAgICAgICB0aGlzLm9wdGlvbnNcbiAgICAgICk7XG4gICAgICBhdXRvY29tcGxldGUuYWRkTGlzdGVuZXIoJ3BsYWNlX2NoYW5nZWQnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHBsYWNlID0gYXV0b2NvbXBsZXRlLmdldFBsYWNlKCk7XG5cbiAgICAgICAgaWYgKHBsYWNlLmdlb21ldHJ5KSB7XG4gICAgICAgICAgdGhpcy5tYXBTZWFyY2guZW1pdChwbGFjZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG59XG4iLCI8ZGl2IGNsYXNzPVwiYmItYmxvY2sgYmItYmxvY2stLW1kXCI+XG4gIDxiYi1zZWFyY2gtYm94LXVpXG4gICAgcGxhY2Vob2xkZXI9XCJTZWFyY2ggQnJhbmNoIGFuZCBTdHJlZXQgTmFtZXNcIlxuICAgIGkxOG4tcGxhY2Vob2xkZXI9XCJTZWFyY2ggZm9yIExvY2F0aW9uQEBtYXAtdWkuc2VhcmNoLnBsYWNlaG9sZGVyXCJcbiAgICBhcmlhLWxhYmVsPVwiU2VhcmNoIEJyYW5jaCBhbmQgU3RyZWV0IE5hbWVcIlxuICAgIGkxOG4tYXJpYS1sYWJlbD1cIlxuICAgICAgU2VhcmNoIEJyYW5jaCBhbmQgU3RyZWV0IE5hbWUgYXJpYS1sYWJlbEBAbWFwLnNlYXJjaC51aS5hcmlhLWxhYmVsXCJcbiAgICBbc2hvd1NlYXJjaF09XCJ0cnVlXCJcbiAgICAoc3VibWl0KT1cIm9uU2VhcmNoQnV0dG9uQ2xpY2soKVwiXG4gICAgI2JiTWFwc2VhcmNoXG4gID5cbiAgPC9iYi1zZWFyY2gtYm94LXVpPlxuPC9kaXY+XG4iXX0=