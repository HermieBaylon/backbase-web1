import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "./map-api-loader.service";
/**
 * Handles the communication with the Google Maps Javascript
 * API v3
 */
export class MapHelpersService {
    constructor(loader) {
        this.loader = loader;
    }
    createMap(el, mapOptions, mapConfig = {}) {
        this.loader.config = mapConfig;
        return this.loader.load().then(() => {
            this.map = new google.maps.Map(el, mapOptions);
        });
    }
    setMapOptions(options) {
        this.map.setOptions(options);
    }
    /**
     * Creates a google map marker with the map context
     */
    createMarker(options = {}, addToMap = true) {
        if (addToMap) {
            options.map = this.map;
        }
        return new google.maps.Marker(options);
    }
    createInfoWindow(options) {
        return new google.maps.InfoWindow(options);
    }
    openInfoWindow(infoWindow, marker) {
        return infoWindow.open(this.map, marker);
    }
    onMapEvent(eventName, callback) {
        this.map.addListener(eventName, (arg) => callback(arg));
    }
    setCenter(latLng) {
        return this.map.setCenter(latLng);
    }
    getZoom() {
        return this.map.getZoom();
    }
    getBounds() {
        return this.map.getBounds();
    }
    getMapTypeId() {
        return this.map.getMapTypeId();
    }
    setZoom(zoom) {
        return this.map.setZoom(zoom);
    }
    getCenter() {
        return this.map.getCenter();
    }
    panTo(latLng) {
        return this.map.panTo(latLng);
    }
    panBy(x, y) {
        return this.map.panBy(x, y);
    }
    fitBounds(latLng) {
        return this.map.fitBounds(latLng);
    }
    panToBounds(latLng) {
        return this.map.panToBounds(latLng);
    }
    /**
     * Triggers the given event name on the map instance.
     */
    triggerMapEvent(eventName) {
        return google.maps.event.trigger(this.map, eventName);
    }
}
MapHelpersService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: MapHelpersService, deps: [{ token: i1.MapAPILoaderService }], target: i0.ɵɵFactoryTarget.Injectable });
MapHelpersService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: MapHelpersService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: MapHelpersService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.MapAPILoaderService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFwLWhlbHBlcnMuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvcGxhY2VzLWpvdXJuZXkvc3JjL2xpYi9jb21wb25lbnRzL2JiLW1hcC11aS9tYXAtaGVscGVycy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7OztBQUkzQzs7O0dBR0c7QUFFSCxNQUFNLE9BQU8saUJBQWlCO0lBRzVCLFlBQTZCLE1BQTJCO1FBQTNCLFdBQU0sR0FBTixNQUFNLENBQXFCO0lBQUcsQ0FBQztJQUU1RCxTQUFTLENBQ1AsRUFBZSxFQUNmLFVBQWtDLEVBQ2xDLFlBQTJCLEVBQUU7UUFFN0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDO1FBQy9CLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFO1lBQ2xDLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFDakQsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsYUFBYSxDQUFDLE9BQStCO1FBQ3pCLElBQUksQ0FBQyxHQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2xELENBQUM7SUFFRDs7T0FFRztJQUNILFlBQVksQ0FDVixVQUF3QyxFQUFFLEVBQzFDLFdBQW9CLElBQUk7UUFFeEIsSUFBSSxRQUFRLEVBQUU7WUFDWixPQUFPLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUM7U0FDeEI7UUFDRCxPQUFPLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFXLENBQUM7SUFDbkQsQ0FBQztJQUVELGdCQUFnQixDQUNkLE9BQXVDO1FBRXZDLE9BQU8sSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUM3QyxDQUFDO0lBRUQsY0FBYyxDQUNaLFVBQWtDLEVBQ2xDLE1BQTBCO1FBRTFCLE9BQU8sVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFFRCxVQUFVLENBQUMsU0FBaUIsRUFBRSxRQUFrQjtRQUM1QixJQUFJLENBQUMsR0FBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQzdFLENBQUM7SUFFRCxTQUFTLENBQUMsTUFBaUM7UUFDekMsT0FBeUIsSUFBSSxDQUFDLEdBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDdkQsQ0FBQztJQUVELE9BQU87UUFDTCxPQUF5QixJQUFJLENBQUMsR0FBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQy9DLENBQUM7SUFFRCxTQUFTO1FBQ1AsT0FBeUIsSUFBSSxDQUFDLEdBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUNqRCxDQUFDO0lBRUQsWUFBWTtRQUNWLE9BQXlCLElBQUksQ0FBQyxHQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDcEQsQ0FBQztJQUVELE9BQU8sQ0FBQyxJQUFZO1FBQ2xCLE9BQXlCLElBQUksQ0FBQyxHQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFRCxTQUFTO1FBQ1AsT0FBeUIsSUFBSSxDQUFDLEdBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUNqRCxDQUFDO0lBRUQsS0FBSyxDQUFDLE1BQXNEO1FBQzFELE9BQXlCLElBQUksQ0FBQyxHQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFRCxLQUFLLENBQUMsQ0FBUyxFQUFFLENBQVM7UUFDeEIsT0FBeUIsSUFBSSxDQUFDLEdBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFFRCxTQUFTLENBQ1AsTUFBa0U7UUFFbEUsT0FBeUIsSUFBSSxDQUFDLEdBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDdkQsQ0FBQztJQUVELFdBQVcsQ0FDVCxNQUFrRTtRQUVsRSxPQUF5QixJQUFJLENBQUMsR0FBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUN6RCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxlQUFlLENBQUMsU0FBaUI7UUFDL0IsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUN4RCxDQUFDOzsrR0FuR1UsaUJBQWlCO21IQUFqQixpQkFBaUI7NEZBQWpCLGlCQUFpQjtrQkFEN0IsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1hcEFQSUxvYWRlclNlcnZpY2UsIE1hcHNBUElDb25maWcgfSBmcm9tICcuL21hcC1hcGktbG9hZGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgTWFya2VyT3B0aW9ucywgTWFya2VyIH0gZnJvbSAnLi9tYXAuY29tcG9uZW50JztcblxuLyoqXG4gKiBIYW5kbGVzIHRoZSBjb21tdW5pY2F0aW9uIHdpdGggdGhlIEdvb2dsZSBNYXBzIEphdmFzY3JpcHRcbiAqIEFQSSB2M1xuICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTWFwSGVscGVyc1NlcnZpY2Uge1xuICBwcml2YXRlIG1hcDogZ29vZ2xlLm1hcHMuTWFwIHwgdW5kZWZpbmVkO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgbG9hZGVyOiBNYXBBUElMb2FkZXJTZXJ2aWNlKSB7fVxuXG4gIGNyZWF0ZU1hcChcbiAgICBlbDogSFRNTEVsZW1lbnQsXG4gICAgbWFwT3B0aW9uczogZ29vZ2xlLm1hcHMuTWFwT3B0aW9ucyxcbiAgICBtYXBDb25maWc6IE1hcHNBUElDb25maWcgPSB7fVxuICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICB0aGlzLmxvYWRlci5jb25maWcgPSBtYXBDb25maWc7XG4gICAgcmV0dXJuIHRoaXMubG9hZGVyLmxvYWQoKS50aGVuKCgpID0+IHtcbiAgICAgIHRoaXMubWFwID0gbmV3IGdvb2dsZS5tYXBzLk1hcChlbCwgbWFwT3B0aW9ucyk7XG4gICAgfSk7XG4gIH1cblxuICBzZXRNYXBPcHRpb25zKG9wdGlvbnM6IGdvb2dsZS5tYXBzLk1hcE9wdGlvbnMpIHtcbiAgICAoPGdvb2dsZS5tYXBzLk1hcD50aGlzLm1hcCkuc2V0T3B0aW9ucyhvcHRpb25zKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgZ29vZ2xlIG1hcCBtYXJrZXIgd2l0aCB0aGUgbWFwIGNvbnRleHRcbiAgICovXG4gIGNyZWF0ZU1hcmtlcihcbiAgICBvcHRpb25zOiBNYXJrZXJPcHRpb25zID0gPE1hcmtlck9wdGlvbnM+e30sXG4gICAgYWRkVG9NYXA6IGJvb2xlYW4gPSB0cnVlXG4gICk6IE1hcmtlciB7XG4gICAgaWYgKGFkZFRvTWFwKSB7XG4gICAgICBvcHRpb25zLm1hcCA9IHRoaXMubWFwO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IGdvb2dsZS5tYXBzLk1hcmtlcihvcHRpb25zKSBhcyBNYXJrZXI7XG4gIH1cblxuICBjcmVhdGVJbmZvV2luZG93KFxuICAgIG9wdGlvbnM/OiBnb29nbGUubWFwcy5JbmZvV2luZG93T3B0aW9uc1xuICApOiBnb29nbGUubWFwcy5JbmZvV2luZG93IHtcbiAgICByZXR1cm4gbmV3IGdvb2dsZS5tYXBzLkluZm9XaW5kb3cob3B0aW9ucyk7XG4gIH1cblxuICBvcGVuSW5mb1dpbmRvdyhcbiAgICBpbmZvV2luZG93OiBnb29nbGUubWFwcy5JbmZvV2luZG93LFxuICAgIG1hcmtlcjogZ29vZ2xlLm1hcHMuTWFya2VyXG4gICkge1xuICAgIHJldHVybiBpbmZvV2luZG93Lm9wZW4odGhpcy5tYXAsIG1hcmtlcik7XG4gIH1cblxuICBvbk1hcEV2ZW50KGV2ZW50TmFtZTogc3RyaW5nLCBjYWxsYmFjazogRnVuY3Rpb24pIHtcbiAgICAoPGdvb2dsZS5tYXBzLk1hcD50aGlzLm1hcCkuYWRkTGlzdGVuZXIoZXZlbnROYW1lLCAoYXJnKSA9PiBjYWxsYmFjayhhcmcpKTtcbiAgfVxuXG4gIHNldENlbnRlcihsYXRMbmc6IGdvb2dsZS5tYXBzLkxhdExuZ0xpdGVyYWwpIHtcbiAgICByZXR1cm4gKDxnb29nbGUubWFwcy5NYXA+dGhpcy5tYXApLnNldENlbnRlcihsYXRMbmcpO1xuICB9XG5cbiAgZ2V0Wm9vbSgpOiBudW1iZXIge1xuICAgIHJldHVybiAoPGdvb2dsZS5tYXBzLk1hcD50aGlzLm1hcCkuZ2V0Wm9vbSgpO1xuICB9XG5cbiAgZ2V0Qm91bmRzKCk6IGdvb2dsZS5tYXBzLkxhdExuZ0JvdW5kcyB8IG51bGwgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiAoPGdvb2dsZS5tYXBzLk1hcD50aGlzLm1hcCkuZ2V0Qm91bmRzKCk7XG4gIH1cblxuICBnZXRNYXBUeXBlSWQoKTogZ29vZ2xlLm1hcHMuTWFwVHlwZUlkIHwgc3RyaW5nIHtcbiAgICByZXR1cm4gKDxnb29nbGUubWFwcy5NYXA+dGhpcy5tYXApLmdldE1hcFR5cGVJZCgpO1xuICB9XG5cbiAgc2V0Wm9vbSh6b29tOiBudW1iZXIpIHtcbiAgICByZXR1cm4gKDxnb29nbGUubWFwcy5NYXA+dGhpcy5tYXApLnNldFpvb20oem9vbSk7XG4gIH1cblxuICBnZXRDZW50ZXIoKTogZ29vZ2xlLm1hcHMuTGF0TG5nIHtcbiAgICByZXR1cm4gKDxnb29nbGUubWFwcy5NYXA+dGhpcy5tYXApLmdldENlbnRlcigpO1xuICB9XG5cbiAgcGFuVG8obGF0TG5nOiBnb29nbGUubWFwcy5MYXRMbmcgfCBnb29nbGUubWFwcy5MYXRMbmdMaXRlcmFsKSB7XG4gICAgcmV0dXJuICg8Z29vZ2xlLm1hcHMuTWFwPnRoaXMubWFwKS5wYW5UbyhsYXRMbmcpO1xuICB9XG5cbiAgcGFuQnkoeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcbiAgICByZXR1cm4gKDxnb29nbGUubWFwcy5NYXA+dGhpcy5tYXApLnBhbkJ5KHgsIHkpO1xuICB9XG5cbiAgZml0Qm91bmRzKFxuICAgIGxhdExuZzogZ29vZ2xlLm1hcHMuTGF0TG5nQm91bmRzIHwgZ29vZ2xlLm1hcHMuTGF0TG5nQm91bmRzTGl0ZXJhbFxuICApIHtcbiAgICByZXR1cm4gKDxnb29nbGUubWFwcy5NYXA+dGhpcy5tYXApLmZpdEJvdW5kcyhsYXRMbmcpO1xuICB9XG5cbiAgcGFuVG9Cb3VuZHMoXG4gICAgbGF0TG5nOiBnb29nbGUubWFwcy5MYXRMbmdCb3VuZHMgfCBnb29nbGUubWFwcy5MYXRMbmdCb3VuZHNMaXRlcmFsXG4gICkge1xuICAgIHJldHVybiAoPGdvb2dsZS5tYXBzLk1hcD50aGlzLm1hcCkucGFuVG9Cb3VuZHMobGF0TG5nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUcmlnZ2VycyB0aGUgZ2l2ZW4gZXZlbnQgbmFtZSBvbiB0aGUgbWFwIGluc3RhbmNlLlxuICAgKi9cbiAgdHJpZ2dlck1hcEV2ZW50KGV2ZW50TmFtZTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIGdvb2dsZS5tYXBzLmV2ZW50LnRyaWdnZXIodGhpcy5tYXAsIGV2ZW50TmFtZSk7XG4gIH1cbn1cbiJdfQ==