import { Component, Input, Output, EventEmitter, ViewChild, ChangeDetectionStrategy, } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "./map-helpers.service";
export class MapComponent {
    constructor(helpers) {
        this.helpers = helpers;
        /**
         * Map options object.
         */
        this.options = {};
        /**
         * Map API configuration.
         */
        this.config = {};
        /**
         * EventEmitter for triggering a mapReady event.
         */
        this.mapReady = new EventEmitter();
    }
    get mapHelpers() {
        return this.helpers;
    }
    ngOnInit() {
        this.helpers
            .createMap(this.mapContainer.nativeElement, this.options, this.config)
            .then(() => this.mapReady.emit(this));
    }
}
MapComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: MapComponent, deps: [{ token: i1.MapHelpersService }], target: i0.ɵɵFactoryTarget.Component });
MapComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: MapComponent, selector: "bb-map-ui", inputs: { options: "options", config: "config" }, outputs: { mapReady: "mapReady" }, viewQueries: [{ propertyName: "mapContainer", first: true, predicate: ["bbMapContainer"], descendants: true, static: true }], ngImport: i0, template: "<ng-content select=\"[bbMapHeader]\"></ng-content>\n<div #bbMapContainer class=\"bb-map\"></div>\n<ng-content select=\"[bbMapFooter]\"></ng-content>\n", changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: MapComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-map-ui',
                    templateUrl: './map.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.MapHelpersService }]; }, propDecorators: { options: [{
                type: Input
            }], config: [{
                type: Input
            }], mapReady: [{
                type: Output
            }], mapContainer: [{
                type: ViewChild,
                args: ['bbMapContainer', { static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFwLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvcGxhY2VzLWpvdXJuZXkvc3JjL2xpYi9jb21wb25lbnRzL2JiLW1hcC11aS9tYXAuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9wbGFjZXMtam91cm5leS9zcmMvbGliL2NvbXBvbmVudHMvYmItbWFwLXVpL21hcC5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUNULEtBQUssRUFDTCxNQUFNLEVBQ04sWUFBWSxFQUNaLFNBQVMsRUFHVCx1QkFBdUIsR0FDeEIsTUFBTSxlQUFlLENBQUM7OztBQXdCdkIsTUFBTSxPQUFPLFlBQVk7SUFtQnZCLFlBQTZCLE9BQTBCO1FBQTFCLFlBQU8sR0FBUCxPQUFPLENBQW1CO1FBbEJ2RDs7V0FFRztRQUNNLFlBQU8sR0FBMkIsRUFBRSxDQUFDO1FBQzlDOztXQUVHO1FBQ00sV0FBTSxHQUFrQixFQUFFLENBQUM7UUFDcEM7O1dBRUc7UUFDZ0IsYUFBUSxHQUN6QixJQUFJLFlBQVksRUFBZ0IsQ0FBQztJQU11QixDQUFDO0lBRTNELElBQUksVUFBVTtRQUNaLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN0QixDQUFDO0lBRUQsUUFBUTtRQUNOLElBQUksQ0FBQyxPQUFPO2FBQ1QsU0FBUyxDQUNrQixJQUFJLENBQUMsWUFBYSxDQUFDLGFBQWEsRUFDMUQsSUFBSSxDQUFDLE9BQU8sRUFDWixJQUFJLENBQUMsTUFBTSxDQUNaO2FBQ0EsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDMUMsQ0FBQzs7MEdBakNVLFlBQVk7OEZBQVosWUFBWSxvUUNqQ3pCLHdKQUdBOzRGRDhCYSxZQUFZO2tCQUx4QixTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxXQUFXO29CQUNyQixXQUFXLEVBQUUsc0JBQXNCO29CQUNuQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtpQkFDaEQ7d0dBS1UsT0FBTztzQkFBZixLQUFLO2dCQUlHLE1BQU07c0JBQWQsS0FBSztnQkFJYSxRQUFRO3NCQUExQixNQUFNO2dCQUd3QyxZQUFZO3NCQUExRCxTQUFTO3VCQUFDLGdCQUFnQixFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbXBvbmVudCxcbiAgSW5wdXQsXG4gIE91dHB1dCxcbiAgRXZlbnRFbWl0dGVyLFxuICBWaWV3Q2hpbGQsXG4gIEVsZW1lbnRSZWYsXG4gIE9uSW5pdCxcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBNYXBIZWxwZXJzU2VydmljZSB9IGZyb20gJy4vbWFwLWhlbHBlcnMuc2VydmljZSc7XG5pbXBvcnQgeyBNYXBzQVBJQ29uZmlnIH0gZnJvbSAnLi9tYXAtYXBpLWxvYWRlci5zZXJ2aWNlJztcblxuZXhwb3J0IGludGVyZmFjZSBNYXBEZXRhaWxzIHtcbiAgY2VudGVyOiBnb29nbGUubWFwcy5MYXRMbmc7XG4gIGJvdW5kczogZ29vZ2xlLm1hcHMuTGF0TG5nQm91bmRzIHwgbnVsbCB8IHVuZGVmaW5lZDtcbiAgem9vbTogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE1hcmtlck9wdGlvbnMgZXh0ZW5kcyBnb29nbGUubWFwcy5NYXJrZXJPcHRpb25zIHtcbiAgbG9jYXRpb25JZDogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE1hcmtlciBleHRlbmRzIGdvb2dsZS5tYXBzLk1hcmtlciB7XG4gIGxvY2F0aW9uSWQ6IHN0cmluZztcbn1cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYmItbWFwLXVpJyxcbiAgdGVtcGxhdGVVcmw6ICcuL21hcC5jb21wb25lbnQuaHRtbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxufSlcbmV4cG9ydCBjbGFzcyBNYXBDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICAvKipcbiAgICogTWFwIG9wdGlvbnMgb2JqZWN0LlxuICAgKi9cbiAgQElucHV0KCkgb3B0aW9uczogZ29vZ2xlLm1hcHMuTWFwT3B0aW9ucyA9IHt9O1xuICAvKipcbiAgICogTWFwIEFQSSBjb25maWd1cmF0aW9uLlxuICAgKi9cbiAgQElucHV0KCkgY29uZmlnOiBNYXBzQVBJQ29uZmlnID0ge307XG4gIC8qKlxuICAgKiBFdmVudEVtaXR0ZXIgZm9yIHRyaWdnZXJpbmcgYSBtYXBSZWFkeSBldmVudC5cbiAgICovXG4gIEBPdXRwdXQoKSByZWFkb25seSBtYXBSZWFkeTogRXZlbnRFbWl0dGVyPE1hcENvbXBvbmVudD4gPVxuICAgIG5ldyBFdmVudEVtaXR0ZXI8TWFwQ29tcG9uZW50PigpO1xuXG4gIEBWaWV3Q2hpbGQoJ2JiTWFwQ29udGFpbmVyJywgeyBzdGF0aWM6IHRydWUgfSkgbWFwQ29udGFpbmVyOlxuICAgIHwgRWxlbWVudFJlZjxIVE1MRWxlbWVudD5cbiAgICB8IHVuZGVmaW5lZDtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGhlbHBlcnM6IE1hcEhlbHBlcnNTZXJ2aWNlKSB7fVxuXG4gIGdldCBtYXBIZWxwZXJzKCk6IE1hcEhlbHBlcnNTZXJ2aWNlIHtcbiAgICByZXR1cm4gdGhpcy5oZWxwZXJzO1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5oZWxwZXJzXG4gICAgICAuY3JlYXRlTWFwKFxuICAgICAgICAoPEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+PnRoaXMubWFwQ29udGFpbmVyKS5uYXRpdmVFbGVtZW50LFxuICAgICAgICB0aGlzLm9wdGlvbnMsXG4gICAgICAgIHRoaXMuY29uZmlnXG4gICAgICApXG4gICAgICAudGhlbigoKSA9PiB0aGlzLm1hcFJlYWR5LmVtaXQodGhpcykpO1xuICB9XG59XG4iLCI8bmctY29udGVudCBzZWxlY3Q9XCJbYmJNYXBIZWFkZXJdXCI+PC9uZy1jb250ZW50PlxuPGRpdiAjYmJNYXBDb250YWluZXIgY2xhc3M9XCJiYi1tYXBcIj48L2Rpdj5cbjxuZy1jb250ZW50IHNlbGVjdD1cIltiYk1hcEZvb3Rlcl1cIj48L25nLWNvbnRlbnQ+XG4iXX0=