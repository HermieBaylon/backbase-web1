import { Component, Input, ChangeDetectionStrategy } from '@angular/core';
import { DatePipe } from '@angular/common';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export class WorkTimesComponent {
    constructor(datePipe) {
        this.datePipe = datePipe;
        /**
         * The day number based on WeekDay enum
         */
        this.day = 0;
        /**
         * Hours related to this day
         */
        this.hours = [];
    }
    toLocaleTime(hour) {
        return (this.datePipe.transform(new Date('2000-01-01T' + hour), 'shortTime') ||
            hour);
    }
    isToday(day, today = new Date().getDay()) {
        today = today || 7;
        return day === today;
    }
}
WorkTimesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: WorkTimesComponent, deps: [{ token: i1.DatePipe }], target: i0.ɵɵFactoryTarget.Component });
WorkTimesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: WorkTimesComponent, selector: "bb-work-times", inputs: { day: "day", hours: "hours" }, providers: [DatePipe], ngImport: i0, template: "<div\n  class=\"row bb-place-timetable\"\n  [ngClass]=\"{\n    'bb-text-semi-bold': this.isToday(day),\n    'bb-text-support': !this.isToday(day)\n  }\"\n>\n  <span\n    class=\"col-md-5\"\n    i18n=\"\n      Week day name|label for week day name based on work\n      times@@places.workTimes.dayName\"\n  >\n    { day, select, 1 {Monday} 2 {Tuesday} 3 {Wednesday} 4 {Thursday} 5 {Friday}\n    6 {Saturday} 7 {Sunday} }\n  </span>\n  <span class=\"col-md-7\">\n    <ng-container *ngIf=\"this.hours.length; else closed\">\n      <ng-container *ngFor=\"let workHour of this.hours; let i = index\"\n        >{{ this.toLocaleTime(workHour.open) }} -\n        {{ this.toLocaleTime(workHour.close) }}<br\n      /></ng-container>\n    </ng-container>\n  </span>\n</div>\n\n<ng-template #closed>\n  <span i18n=\"Closed|label for closed day@@places.workTimes.closed\"\n    >Closed</span\n  >\n</ng-template>\n", directives: [{ type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: WorkTimesComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-work-times',
                    templateUrl: './work-times.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [DatePipe],
                }]
        }], ctorParameters: function () { return [{ type: i1.DatePipe }]; }, propDecorators: { day: [{
                type: Input
            }], hours: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid29yay10aW1lcy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL3BsYWNlcy1qb3VybmV5L3NyYy9saWIvY29tcG9uZW50cy93b3JrLXRpbWVzL3dvcmstdGltZXMuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9wbGFjZXMtam91cm5leS9zcmMvbGliL2NvbXBvbmVudHMvd29yay10aW1lcy93b3JrLXRpbWVzLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQzs7O0FBUzNDLE1BQU0sT0FBTyxrQkFBa0I7SUFVN0IsWUFBNkIsUUFBa0I7UUFBbEIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQVQvQzs7V0FFRztRQUNNLFFBQUcsR0FBRyxDQUFDLENBQUM7UUFDakI7O1dBRUc7UUFDTSxVQUFLLEdBQVcsRUFBRSxDQUFDO0lBRXNCLENBQUM7SUFFbkQsWUFBWSxDQUFDLElBQVk7UUFDdkIsT0FBTyxDQUNMLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLElBQUksSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsRUFBRSxXQUFXLENBQUM7WUFDcEUsSUFBSSxDQUNMLENBQUM7SUFDSixDQUFDO0lBRUQsT0FBTyxDQUFDLEdBQVcsRUFBRSxRQUFnQixJQUFJLElBQUksRUFBRSxDQUFDLE1BQU0sRUFBRTtRQUN0RCxLQUFLLEdBQUcsS0FBSyxJQUFJLENBQUMsQ0FBQztRQUNuQixPQUFPLEdBQUcsS0FBSyxLQUFLLENBQUM7SUFDdkIsQ0FBQzs7Z0hBdEJVLGtCQUFrQjtvR0FBbEIsa0JBQWtCLGdGQUZsQixDQUFDLFFBQVEsQ0FBQywwQkNSdkIscTRCQStCQTs0RkRyQmEsa0JBQWtCO2tCQU45QixTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxlQUFlO29CQUN6QixXQUFXLEVBQUUsNkJBQTZCO29CQUMxQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtvQkFDL0MsU0FBUyxFQUFFLENBQUMsUUFBUSxDQUFDO2lCQUN0QjsrRkFLVSxHQUFHO3NCQUFYLEtBQUs7Z0JBSUcsS0FBSztzQkFBYixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERhdGVQaXBlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IEhvdXIgfSBmcm9tICdAYmFja2Jhc2UvZGF0YS1hbmcvcGxhY2VzJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYmItd29yay10aW1lcycsXG4gIHRlbXBsYXRlVXJsOiAnLi93b3JrLXRpbWVzLmNvbXBvbmVudC5odG1sJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gIHByb3ZpZGVyczogW0RhdGVQaXBlXSxcbn0pXG5leHBvcnQgY2xhc3MgV29ya1RpbWVzQ29tcG9uZW50IHtcbiAgLyoqXG4gICAqIFRoZSBkYXkgbnVtYmVyIGJhc2VkIG9uIFdlZWtEYXkgZW51bVxuICAgKi9cbiAgQElucHV0KCkgZGF5ID0gMDtcbiAgLyoqXG4gICAqIEhvdXJzIHJlbGF0ZWQgdG8gdGhpcyBkYXlcbiAgICovXG4gIEBJbnB1dCgpIGhvdXJzOiBIb3VyW10gPSBbXTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGRhdGVQaXBlOiBEYXRlUGlwZSkge31cblxuICB0b0xvY2FsZVRpbWUoaG91cjogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gKFxuICAgICAgdGhpcy5kYXRlUGlwZS50cmFuc2Zvcm0obmV3IERhdGUoJzIwMDAtMDEtMDFUJyArIGhvdXIpLCAnc2hvcnRUaW1lJykgfHxcbiAgICAgIGhvdXJcbiAgICApO1xuICB9XG5cbiAgaXNUb2RheShkYXk6IG51bWJlciwgdG9kYXk6IG51bWJlciA9IG5ldyBEYXRlKCkuZ2V0RGF5KCkpIHtcbiAgICB0b2RheSA9IHRvZGF5IHx8IDc7XG4gICAgcmV0dXJuIGRheSA9PT0gdG9kYXk7XG4gIH1cbn1cbiIsIjxkaXZcbiAgY2xhc3M9XCJyb3cgYmItcGxhY2UtdGltZXRhYmxlXCJcbiAgW25nQ2xhc3NdPVwie1xuICAgICdiYi10ZXh0LXNlbWktYm9sZCc6IHRoaXMuaXNUb2RheShkYXkpLFxuICAgICdiYi10ZXh0LXN1cHBvcnQnOiAhdGhpcy5pc1RvZGF5KGRheSlcbiAgfVwiXG4+XG4gIDxzcGFuXG4gICAgY2xhc3M9XCJjb2wtbWQtNVwiXG4gICAgaTE4bj1cIlxuICAgICAgV2VlayBkYXkgbmFtZXxsYWJlbCBmb3Igd2VlayBkYXkgbmFtZSBiYXNlZCBvbiB3b3JrXG4gICAgICB0aW1lc0BAcGxhY2VzLndvcmtUaW1lcy5kYXlOYW1lXCJcbiAgPlxuICAgIHsgZGF5LCBzZWxlY3QsIDEge01vbmRheX0gMiB7VHVlc2RheX0gMyB7V2VkbmVzZGF5fSA0IHtUaHVyc2RheX0gNSB7RnJpZGF5fVxuICAgIDYge1NhdHVyZGF5fSA3IHtTdW5kYXl9IH1cbiAgPC9zcGFuPlxuICA8c3BhbiBjbGFzcz1cImNvbC1tZC03XCI+XG4gICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cInRoaXMuaG91cnMubGVuZ3RoOyBlbHNlIGNsb3NlZFwiPlxuICAgICAgPG5nLWNvbnRhaW5lciAqbmdGb3I9XCJsZXQgd29ya0hvdXIgb2YgdGhpcy5ob3VyczsgbGV0IGkgPSBpbmRleFwiXG4gICAgICAgID57eyB0aGlzLnRvTG9jYWxlVGltZSh3b3JrSG91ci5vcGVuKSB9fSAtXG4gICAgICAgIHt7IHRoaXMudG9Mb2NhbGVUaW1lKHdvcmtIb3VyLmNsb3NlKSB9fTxiclxuICAgICAgLz48L25nLWNvbnRhaW5lcj5cbiAgICA8L25nLWNvbnRhaW5lcj5cbiAgPC9zcGFuPlxuPC9kaXY+XG5cbjxuZy10ZW1wbGF0ZSAjY2xvc2VkPlxuICA8c3BhbiBpMThuPVwiQ2xvc2VkfGxhYmVsIGZvciBjbG9zZWQgZGF5QEBwbGFjZXMud29ya1RpbWVzLmNsb3NlZFwiXG4gICAgPkNsb3NlZDwvc3BhblxuICA+XG48L25nLXRlbXBsYXRlPlxuIl19