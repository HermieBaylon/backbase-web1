import { Component, Input, ChangeDetectionStrategy, Output, EventEmitter, ViewChild, } from '@angular/core';
import { DatePipe } from '@angular/common';
import { defaultPlaceTypeIcon, footInMeter, meterInKM, footInMile, } from '../../model/constants';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@backbase/ui-ang/collapsible-accordion";
import * as i3 from "@backbase/ui-ang/collapsible";
import * as i4 from "@backbase/ui-ang/icon";
import * as i5 from "../place-details/place-details.component";
import * as i6 from "../../directives/keyboard-accessibility.directive";
export class PlacesListComponent {
    constructor(datePipe) {
        this.datePipe = datePipe;
        /**
         * Map radius.
         */
        this.radius = 1;
        /**
         * Use metric system for displaying distances.
         */
        this.isMetric = true;
        /**
         * Provide Place Types
         */
        this.placeTypes = {};
        /**
         * EventEmitter for triggering a place selection update event.
         */
        this.selected = new EventEmitter();
        this.places = [];
    }
    /**
     * List of locations to be rendered.
     */
    set locations(locations) {
        this.places = locations
            .map((place) => (Object.assign(Object.assign({}, place), { distance: this.calculateDistance(place) })))
            .sort((a, b) => (a.distance || 0) - (b.distance || 0));
    }
    /**
     * Uses Google geometry library to calculate distance between two points
     * Returns undefined if google library or current position is undefined
     * Returns distance in meters or feet, depending on measurment system property in the widget
     */
    calculateDistance(place) {
        if (typeof google === 'undefined' || this.currentPosition === undefined) {
            return undefined;
        }
        const centerCoords = new google.maps.LatLng(this.currentPosition.lat, this.currentPosition.lng);
        const itemCoords = new google.maps.LatLng(place.latitude, place.longitude);
        const distance = google.maps.geometry.spherical.computeDistanceBetween(centerCoords, itemCoords);
        return this.isMetric ? distance : distance * footInMeter;
    }
    isStillOpen(hour, currentDate = new Date()) {
        const [closeHour, closeMinute] = hour
            .split(':')
            .map((timePart) => +timePart);
        const currentHour = currentDate.getHours();
        const currentMinute = currentDate.getMinutes();
        return (currentHour < closeHour ||
            (currentHour === closeHour && currentMinute < closeMinute));
    }
    getDistanceUnits() {
        if (this.isMetric) {
            return [
                this.transM.nativeElement.textContent,
                this.transKm.nativeElement.textContent,
            ];
        }
        return [
            this.transFt.nativeElement.textContent,
            this.transMi.nativeElement.textContent,
        ];
    }
    onListItemClick(isOpen, place) {
        this.selected.emit(!isOpen
            ? place
            : {
                id: '',
                latitude: 0,
                longitude: 0,
            });
        return;
    }
    getClosingHour(hours, currentDate = new Date()) {
        if (!hours) {
            return;
        }
        // in specs, Sunday is 7 and in JS it is 0, rest of the days match
        const currentDay = currentDate.getDay() || 7;
        const todayHours = hours.find((time) => time.day === currentDay);
        if (!todayHours) {
            return;
        }
        return ((this.isStillOpen(todayHours.close, currentDate) &&
            this.datePipe.transform(new Date('2000-01-01T' + todayHours.close), 'shortTime')) ||
            undefined);
    }
    getPlaceTypeIcon(type) {
        return type && this.placeTypes[type] && this.placeTypes[type].iconName
            ? this.placeTypes[type].iconName
            : defaultPlaceTypeIcon;
    }
    formatDistance(distance) {
        const distanceUnit = this.getDistanceUnits();
        const distanceUnitRatio = this.isMetric ? meterInKM : footInMile;
        let convertedDistance = Math.round(distance);
        let unit = distanceUnit[0];
        if (distance >= distanceUnitRatio) {
            unit = distanceUnit[1];
            convertedDistance /= distanceUnitRatio;
            if (convertedDistance >= 10) {
                // for distance over 10 km/mi show only integers
                convertedDistance = Math.round(convertedDistance);
            }
            else {
                // for distance more than 1 km/mi but smaller than 10 km/mi use one decimal point
                convertedDistance = Math.round(convertedDistance * 10) / 10;
            }
        }
        return `${convertedDistance} ${unit}`;
    }
}
PlacesListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PlacesListComponent, deps: [{ token: i1.DatePipe }], target: i0.ɵɵFactoryTarget.Component });
PlacesListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PlacesListComponent, selector: "bb-places-list", inputs: { radius: "radius", locations: "locations", selectedPlaceId: "selectedPlaceId", currentPosition: "currentPosition", isMetric: "isMetric", placeTypes: "placeTypes" }, outputs: { selected: "selected" }, providers: [DatePipe], viewQueries: [{ propertyName: "transM", first: true, predicate: ["transM"], descendants: true, static: true }, { propertyName: "transKm", first: true, predicate: ["transKm"], descendants: true, static: true }, { propertyName: "transFt", first: true, predicate: ["transFt"], descendants: true, static: true }, { propertyName: "transMi", first: true, predicate: ["transMi"], descendants: true, static: true }], ngImport: i0, template: "<!-- Places List -->\n<bb-collapsible-accordion-ui\n  [closeOthers]=\"true\"\n  class=\"bb-list bb-list--density-md\"\n>\n  <bb-collapsible-ui\n    [isOpen]=\"place.id === selectedPlaceId\"\n    class=\"bb-list__item d-block\"\n    role=\"tree\"\n    *ngFor=\"let place of places; let i = index\"\n  >\n    <ng-template bbCollapsibleHeader let-isOpen=\"isOpen\">\n      <div\n        role=\"treeitem\"\n        bbKeyboardAccessibility\n        [attr.aria-expanded]=\"isOpen\"\n        (click)=\"this.onListItemClick(isOpen, place)\"\n        class=\"bb-block\"\n        [class.bb-block--md]=\"isOpen\"\n      >\n        <div class=\"bb-stack bb-place-info\">\n          <div class=\"bb-inline-stack bb-inline-stack--density-sm\">\n            <bb-icon-ui\n              [name]=\"this.getPlaceTypeIcon(place.placeType)\"\n              size=\"md\"\n              class=\"bb-inline-stack__item\"\n            ></bb-icon-ui>\n            <span class=\"bb-text-semi-bold\">{{ place.name }}</span>\n          </div>\n          <bb-icon-ui\n            class=\"bb-stack__item bb-stack__item--push-right\"\n            [name]=\"isOpen ? 'toggle-up' : 'toggle-down'\"\n            size=\"md\"\n          >\n          </bb-icon-ui>\n        </div>\n        <div class=\"bb-place-info__subtitle bb-subtitle\">\n          <div *ngIf=\"place.address\">\n            <span>{{ place.address.addressLine1 }}</span>\n            <span *ngIf=\"place.address.addressLine2\"\n              >,\n              <span>{{ place.address.addressLine2 }}</span>\n            </span>\n            <div *ngIf=\"place.address.postalCode\">\n              {{ place.address.postalCode }}\n            </div>\n          </div>\n          <div\n            class=\"bb-text-support bb-inline-stack\"\n            *ngIf=\"place.distance !== undefined\"\n          >\n            <bb-icon-ui\n              name=\"near-me\"\n              size=\"sm\"\n              class=\"bb-inline-stack__item\"\n            ></bb-icon-ui>\n            <span>{{ this.formatDistance(place.distance) }}</span>\n          </div>\n          <div\n            class=\"bb-text-support\"\n            *ngIf=\"this.getClosingHour(place.hours) as hour\"\n          >\n            <span\n              i18n=\"\n                Open Today until|label for open today\n                until@@places.openToday.until\"\n              >Open Today until\n            </span>\n            <span>{{ hour }}</span>\n          </div>\n        </div>\n      </div>\n    </ng-template>\n\n    <ng-template bbCollapsibleBody>\n      <bb-place-details [place]=\"place\"></bb-place-details>\n    </ng-template>\n  </bb-collapsible-ui>\n</bb-collapsible-accordion-ui>\n\n<span #transM class=\"ng-cloak\" i18n=\"m|Label for meters@@places.distance.meter\"\n  >m</span\n>\n<span\n  #transKm\n  class=\"ng-cloak\"\n  i18n=\"km|Label for kilometers@@places.distance.kilometer\"\n  >km</span\n>\n<span #transFt class=\"ng-cloak\" i18n=\"ft|Label for feet@@places.distance.foot\"\n  >ft</span\n>\n<span #transMi class=\"ng-cloak\" i18n=\"mi|Label for miles@@places.distance.mile\"\n  >mi</span\n>\n", components: [{ type: i2.CollapsibleAccordionComponent, selector: "bb-collapsible-accordion-ui", inputs: ["closeOthers", "openFirst", "obeyParentAccordion"] }, { type: i3.CollapsibleComponent, selector: "bb-collapsible-ui", inputs: ["recreateBodyContent", "hasChevron", "isOpen"], outputs: ["isOpenChange"] }, { type: i4.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i5.PlaceDetailsComponent, selector: "bb-place-details", inputs: ["place"] }], directives: [{ type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3.CollapsibleHeaderDirective, selector: "ng-template[bbCollapsibleHeader]" }, { type: i6.KeyboardAccessibilityDirective, selector: "[bbKeyboardAccessibility]" }, { type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.CollapsibleBodyDirective, selector: "ng-template[bbCollapsibleBody]" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PlacesListComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-places-list',
                    templateUrl: './places-list.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [DatePipe],
                }]
        }], ctorParameters: function () { return [{ type: i1.DatePipe }]; }, propDecorators: { radius: [{
                type: Input
            }], locations: [{
                type: Input
            }], selectedPlaceId: [{
                type: Input
            }], currentPosition: [{
                type: Input
            }], isMetric: [{
                type: Input
            }], placeTypes: [{
                type: Input
            }], selected: [{
                type: Output
            }], transM: [{
                type: ViewChild,
                args: ['transM', { static: true }]
            }], transKm: [{
                type: ViewChild,
                args: ['transKm', { static: true }]
            }], transFt: [{
                type: ViewChild,
                args: ['transFt', { static: true }]
            }], transMi: [{
                type: ViewChild,
                args: ['transMi', { static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,