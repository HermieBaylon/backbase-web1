import { Component, ChangeDetectionStrategy, ViewChild, } from '@angular/core';
import { combineLatest, of, Subject } from 'rxjs';
import { filter, map, switchMap, catchError } from 'rxjs/operators';
import { defaultPlaceTypeMarkerURI, defaultPlaceType, } from '../model/constants';
import { parseError } from '../model/place-error-model';
import { MapAPILoaderService, } from '../components/bb-map-ui/map-api-loader.service';
import { PlacesMeasurementSystem, } from '../services/places-journey-config.service';
import * as i0 from "@angular/core";
import * as i1 from "../services/places-journey-config.service";
import * as i2 from "../services/places.service";
import * as i3 from "@backbase/foundation-ang/core";
import * as i4 from "../components/bb-map-ui/map-api-loader.service";
import * as i5 from "@backbase/ui-ang/header";
import * as i6 from "../components/bb-map-ui/map-search.component";
import * as i7 from "@backbase/ui-ang/icon";
import * as i8 from "@backbase/ui-ang/input-checkbox";
import * as i9 from "../components/places-list/places-list.component";
import * as i10 from "../components/map-wrapper/map-wrapper.component";
import * as i11 from "@backbase/ui-ang/empty-state";
import * as i12 from "@backbase/ui-ang/loading-indicator";
import * as i13 from "@backbase/ui-ang/common-error-state";
import * as i14 from "@angular/common";
import * as i15 from "@angular/forms";
export class PlacesViewComponent {
    constructor(config, service, assetsService, cd, loader) {
        this.config = config;
        this.service = service;
        this.assetsService = assetsService;
        this.cd = cd;
        this.loader = loader;
        this.mapParamsSubject = new Subject();
        this.mapParams = this.mapParamsSubject.asObservable();
        this.selectedPlaceId = new Subject();
        this.resolveAsset = this.assetsService.createAssetsResolver({
            widgetName: 'bb-places-journey-ang',
            getURIFromAssetID: (placeType) => {
                const found = this.placeTypes.find((type) => type === placeType);
                return found
                    ? this.config.placeTypes[found].markerUrl || defaultPlaceTypeMarkerURI
                    : defaultPlaceTypeMarkerURI;
            },
        });
        this.mapConfigObject = {};
        this.locations = this.mapParams.pipe(filter((params) => params !== undefined), switchMap((params) => this.service.getPlaces(params)), map((data) => this.config.limitList ? data.slice(0, this.config.limitList) : data), catchError((error) => {
            this.handleError(error);
            return of([]);
        }));
        this.selectedView = 'list';
        this.latitude = 0;
        this.longitude = 0;
        this.radius = 1;
        this.types = [];
        this.latitude = this.config.latitude;
        this.longitude = this.config.longitude;
        this.radius = this.config.radius;
        this.limitList = this.config.limitList;
    }
    // This is required to show info window only on mobile screen
    set groupBtns(elRef) {
        this.groupBtnRef = elRef;
        setTimeout(() => {
            if (!this.groupBtnRef) {
                return;
            }
            this.smallScreen =
                window.getComputedStyle(this.groupBtnRef.nativeElement).display !==
                    'none';
        }, 0);
    }
    loadApi(mapConfig = {}) {
        this.loader.config = mapConfig;
        return this.loader.load().then(() => {
            this.geocoder = new google.maps.Geocoder();
            return;
        });
    }
    getCurrentLocation() {
        if ('geolocation' in navigator) {
            navigator.geolocation.getCurrentPosition((location) => {
                this.currentPosition = {
                    lat: location.coords.latitude,
                    lng: location.coords.longitude,
                };
                if (!this.geocoder) {
                    return;
                }
                this.geocoder.geocode({ location: this.currentPosition }, (results, status) => {
                    if (status === google.maps.GeocoderStatus.OK && results[0]) {
                        const route = results[0].address_components.filter((item) => item.types.find((type) => type === 'route'));
                        this.currentLocation =
                            route[0].long_name || results[0].formatted_address;
                    }
                });
            });
        }
    }
    handleError(error) {
        this.error = parseError(error);
    }
    get groupBtns() {
        return this.groupBtnRef;
    }
    get mapConfig() {
        return this.mapConfigObject;
    }
    get placeTypes() {
        return Object.keys(this.config.placeTypes);
    }
    get icons() {
        const types = [defaultPlaceType].concat(this.placeTypes);
        return combineLatest(types.map((type) => this.resolveAsset(type))).pipe(map((assets) => {
            const icons = {};
            for (let i = 0; i < assets.length; i++) {
                icons[types[i]] = assets[i];
            }
            return icons;
        }));
    }
    get isMetric() {
        return this.config.measurementSystem !== PlacesMeasurementSystem.METRIC;
    }
    filterTypes(values) {
        const types = [];
        Object.keys(values).forEach((key) => {
            if (values[key]) {
                types.push(key);
            }
        });
        return types;
    }
    locationUpdate(params) {
        this.latitude = params.latitude;
        this.longitude = params.longitude;
        this.radius = params.radius || this.config.radius;
        this.types = params.types || this.types;
        this.cd.detectChanges();
        this.mapParamsSubject.next(Object.assign(Object.assign({}, params), { radius: this.config.radius, types: this.types }));
    }
    handleTypeSearch(types) {
        this.locationUpdate({
            latitude: this.latitude,
            longitude: this.longitude,
            radius: this.radius,
            types,
        });
    }
    handleMapSearch(place) {
        if (!place.geometry) {
            return;
        }
        this.locationUpdate({
            latitude: place.geometry.location.lat(),
            longitude: place.geometry.location.lng(),
            radius: this.config.radius,
            types: this.types,
        });
    }
    updatePlaceSelection(place) {
        this.selectedPlaceId.next(place.id);
    }
    onMapReady() {
        // Map is there, so we don't use list limit property to determine list size. Map's zoom and radius parameter are driving it from now on
        this.limitList = undefined;
        this.locationUpdate({
            latitude: this.latitude,
            longitude: this.longitude,
            radius: this.radius,
            types: this.types,
        });
    }
    ngOnInit() {
        this.mapConfigObject = {
            apiKey: this.config.apiKey,
            libraries: ['geometry'],
        };
        this.loadApi(this.mapConfigObject).then(() => {
            this.getCurrentLocation();
        });
        this.locationUpdate({
            latitude: this.config.latitude,
            longitude: this.config.longitude,
            radius: this.config.radius,
        });
    }
}
PlacesViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PlacesViewComponent, deps: [{ token: i1.PlacesJourneyConfigService }, { token: i2.PlacesService }, { token: i3.AssetsService }, { token: i0.ChangeDetectorRef }, { token: i4.MapAPILoaderService }], target: i0.ɵɵFactoryTarget.Component });
PlacesViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PlacesViewComponent, selector: "bb-places-view", providers: [MapAPILoaderService], viewQueries: [{ propertyName: "groupBtns", first: true, predicate: ["groupBtns"], descendants: true }], ngImport: i0, template: "<div\n  [ngClass]=\"{\n    'bb-heading-widget bb-heading-widget--de-elevated': config.deElevatedHeader\n  }\"\n>\n  <bb-header-ui\n    headingType=\"h1\"\n    [headingClasses]=\"\n      config.deElevatedHeader\n        ? 'bb-heading-widget__heading'\n        : 'bb-heading-widget__heading px-0 pb-5'\n    \"\n    heading=\"Find Branches and ATMs\"\n    i18n-heading=\"\n      Find Branches and ATMs|Heading for the Places\n      journey@@places.journey.heading.text\"\n  ></bb-header-ui>\n  <ng-content></ng-content>\n</div>\n\n<div\n  [ngClass]=\"{ 'container--drag-up container-fluid': config.deElevatedHeader }\"\n>\n  <ng-container\n    *ngTemplateOutlet=\"placesContainer; context: { places: locations | async }\"\n  ></ng-container>\n</div>\n\n<ng-template #placesContainer let-places=\"places\">\n  <div class=\"card\">\n    <div class=\"card-body\">\n      <div class=\"row\" [class.bb-stack--center]=\"this.error\">\n        <ng-container *ngIf=\"!this.error; else errorState\">\n          <div class=\"col-md-6\">\n            <bb-map-search-ui\n              [config]=\"this.mapConfig\"\n              (mapSearch)=\"this.handleMapSearch($event)\"\n            ></bb-map-search-ui>\n\n            <div\n              class=\"bb-inline-stack bb-text-support bb-block bb-block--md\"\n              *ngIf=\"this.currentLocation\"\n            >\n              <bb-icon-ui\n                name=\"my-location\"\n                class=\"bb-inline-stack__item\"\n              ></bb-icon-ui>\n              <span\n                class=\"bb-inline-stack__item\"\n                i18n=\"\n                  Current Location|current location message for\n                  places@@places.state.currentLocation\"\n                >Current Location - {{ this.currentLocation }}</span\n              >\n            </div>\n\n            <form\n              #placeTypeFilterForm=\"ngForm\"\n              class=\"bb-block bb-block--md bb-stack bb-stack--density-xl\"\n              *ngIf=\"places && places.length\"\n            >\n              <bb-input-checkbox-ui\n                *ngFor=\"let type of this.placeTypes; let i = index\"\n                ngModel\n                [name]=\"type\"\n                class=\"bb-stack__item\"\n                (change)=\"\n                  this.handleTypeSearch(\n                    this.filterTypes(placeTypeFilterForm.value)\n                  )\n                \"\n              >\n                <span i18n=\"filters|filters for types@@places.filter.types\"\n                  >{type, select, atm {ATM's} branch {Branches}}</span\n                >\n              </bb-input-checkbox-ui>\n            </form>\n\n            <div\n              class=\"bb-text-align-center bb-block bb-block--md d-md-none\"\n              #groupBtns\n            >\n              <div\n                class=\"btn-group btn-group-toggle bb-block bb-block--full-width\"\n              >\n                <button\n                  class=\"btn btn-secondary\"\n                  [ngClass]=\"{ active: this.selectedView === 'list' }\"\n                  name=\"list\"\n                  (click)=\"this.selectedView = 'list'\"\n                  i18n=\"List view button|List view @@places.toggle.view.list\"\n                >\n                  List\n                </button>\n                <button\n                  class=\"btn btn-secondary\"\n                  [ngClass]=\"{ active: this.selectedView === 'map' }\"\n                  (click)=\"this.selectedView = 'map'\"\n                  i18n=\"Map view Button|Map view @@places.toggle.view.map\"\n                >\n                  Map\n                </button>\n              </div>\n            </div>\n\n            <div [hidden]=\"this.selectedView === 'map'\" class=\"d-md-block\">\n              <div\n                class=\"bb-places-list\"\n                [ngClass]=\"\n                  places && places.length ? '' : 'bb-places-list--empty'\n                \"\n              >\n                <ng-container *ngIf=\"places; else loadingState\">\n                  <ng-container *ngIf=\"places.length; else emptyState\">\n                    <bb-places-list\n                      [radius]=\"this.config.radius\"\n                      [locations]=\"places\"\n                      [selectedPlaceId]=\"\n                        (this.selectedPlaceId | async) || undefined\n                      \"\n                      [currentPosition]=\"this.currentPosition\"\n                      [isMetric]=\"this.isMetric\"\n                      [placeTypes]=\"this.config.placeTypes\"\n                      (selected)=\"this.updatePlaceSelection($event)\"\n                    ></bb-places-list>\n                  </ng-container>\n                </ng-container>\n              </div>\n            </div>\n          </div>\n          <div\n            class=\"col-md-6 d-md-block\"\n            [hidden]=\"this.selectedView === 'list'\"\n          >\n            <bb-map-wrapper\n              [apiKey]=\"this.config.apiKey\"\n              [config]=\"this.mapConfig\"\n              [mapZoom]=\"this.config.mapZoom\"\n              [latitude]=\"this.latitude\"\n              [longitude]=\"this.longitude\"\n              [icons]=\"this.icons | async\"\n              [locations]=\"places\"\n              [enableInfoWindow]=\"!!this.smallScreen\"\n              [selectedPlaceId]=\"(this.selectedPlaceId | async) || undefined\"\n              (update)=\"this.locationUpdate($event)\"\n              (selected)=\"this.updatePlaceSelection($event)\"\n              (mapReady)=\"this.onMapReady()\"\n            ></bb-map-wrapper>\n          </div>\n        </ng-container>\n      </div>\n    </div>\n  </div>\n</ng-template>\n\n<!-- Empty List -->\n<ng-template #emptyState>\n  <bb-empty-state-ui\n    class=\"bb-text-align-center\"\n    i18n-title=\"\n      No locations found|Title of a message that is shown when there are no\n      places@@places.state.noResultsFound.title\"\n    i18n-subtitle=\"\n      We could not find any items in this area. Try moving the map or searching\n      for a city or branch|Subtitle of a message that is shown when there are no\n      places@@places.state.noResultsFound.subtitle\"\n    title=\"No Locations Found\"\n    subtitle=\"We couldn\u2019t find any branches or ATMs in this region. Try moving the map or searching for a city or branch.\"\n    iconSize=\"xxl\"\n    iconModifier=\"place\"\n  ></bb-empty-state-ui>\n</ng-template>\n\n<!-- Loading State -->\n<ng-template #loadingState>\n  <bb-loading-indicator-ui\n    i18n-text=\"\n      Loading places data|Text to display while loading\n      places@@places.state.loadingPlaces\"\n  ></bb-loading-indicator-ui>\n</ng-template>\n\n<!-- Error State -->\n<ng-template #errorState>\n  <bb-common-error-state-ui [error]=\"errorCustomTemplate\">\n    <ng-template #errorCustomTemplate>\n      <bb-empty-state-ui\n        class=\"bb-text-align-center\"\n        i18n-title=\"\n          Page couldn\u2019t load|Title of a message that is shown when page couldn't\n          load@@places.state.pageCouldnotLoad.title\"\n        i18n-subtitle=\"\n          Try to reload the page or contact the system administrator.|Subtitle\n          of a message that is shown when page could not\n          load@@places.state.pageCouldnotLoad.subtitle\"\n        title=\"Page couldn\u2019t load\"\n        subtitle=\"Try to reload the page or contact the system administrator.\"\n        iconSize=\"xxl\"\n        iconModifier=\"error\"\n      ></bb-empty-state-ui>\n    </ng-template>\n  </bb-common-error-state-ui>\n</ng-template>\n", components: [{ type: i5.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i6.MapSearchComponent, selector: "bb-map-search-ui", inputs: ["options", "config"], outputs: ["mapSearch"] }, { type: i7.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i8.InputCheckboxComponent, selector: "bb-input-checkbox-ui", inputs: ["indeterminate"], outputs: ["indeterminateChange"] }, { type: i9.PlacesListComponent, selector: "bb-places-list", inputs: ["radius", "locations", "selectedPlaceId", "currentPosition", "isMetric", "placeTypes"], outputs: ["selected"] }, { type: i10.MapWrapperComponent, selector: "bb-map-wrapper", inputs: ["apiKey", "config", "mapZoom", "latitude", "longitude", "enableInfoWindow", "icons", "locations", "selectedPlaceId"], outputs: ["update", "selected", "locate", "mapReady"] }, { type: i11.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }, { type: i12.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i13.ErrorCommonStateComponent, selector: "bb-common-error-state-ui", inputs: ["error"] }], directives: [{ type: i14.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i14.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i14.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i15.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i15.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i15.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i14.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i15.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i15.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }], pipes: { "async": i14.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PlacesViewComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-places-view',
                    templateUrl: './places-view.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [MapAPILoaderService],
                }]
        }], ctorParameters: function () { return [{ type: i1.PlacesJourneyConfigService }, { type: i2.PlacesService }, { type: i3.AssetsService }, { type: i0.ChangeDetectorRef }, { type: i4.MapAPILoaderService }]; }, propDecorators: { groupBtns: [{
                type: ViewChild,
                args: ['groupBtns']
            }] } });
//# sourceMappingURL=data:application/json;base64,