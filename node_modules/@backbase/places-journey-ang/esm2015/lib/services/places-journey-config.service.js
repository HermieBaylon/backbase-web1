import { Injectable, Optional, Inject, InjectionToken } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/foundation-ang/core";
export const PlacesJourneyConfigurationToken = new InjectionToken('PlacesJourneyConfiguration injection token');
export var PlacesMeasurementSystem;
(function (PlacesMeasurementSystem) {
    PlacesMeasurementSystem["METRIC"] = "metric";
    PlacesMeasurementSystem["US_IMPERIAL"] = "imperial";
})(PlacesMeasurementSystem || (PlacesMeasurementSystem = {}));
const configDefaults = {
    apiKey: '',
    placeTypes: {},
    mapZoom: 15,
    latitude: 52.3760992,
    longitude: 4.900779,
    radius: 2,
    limitList: 100,
    measurementSystem: PlacesMeasurementSystem.METRIC,
    deElevatedHeader: false,
};
export class PlacesJourneyConfigService {
    constructor(config, itemModel) {
        this.itemModel = itemModel;
        config = config || {};
        this._config = Object.assign(Object.assign({}, configDefaults), config);
        // update the API key from ItemModel if it was not provided from a static config
        if (this.itemModel && config.apiKey === undefined) {
            this.itemModel
                .property('apiKey', this._config.apiKey)
                .subscribe({
                next: (key) => {
                    this._config.apiKey = key;
                },
            })
                .unsubscribe();
        }
    }
    get defaults() {
        return configDefaults;
    }
    /**
     * API key for Google Maps
     */
    get apiKey() {
        return this._config.apiKey;
    }
    /**
     * Place types configuration. Used to set up marker image and the filter label for any place type available in the service
     */
    get placeTypes() {
        return this._config.placeTypes;
    }
    /**
     * Default zoom value for a map
     */
    get mapZoom() {
        return this._config.mapZoom;
    }
    /**
     * Default map latitude
     */
    get latitude() {
        return this._config.latitude;
    }
    /**
     * Default map longitude
     */
    get longitude() {
        return this._config.longitude;
    }
    /**
     * Default radius in which the locations are being searched while map is not loaded
     */
    get radius() {
        return this._config.radius;
    }
    /**
     * Maximum amount of locations to display
     */
    get limitList() {
        return this._config.limitList;
    }
    /**
     * Measurement system
     */
    get measurementSystem() {
        return this._config.measurementSystem;
    }
    /**
     * Dev config to enable de-elevated header
     */
    get deElevatedHeader() {
        return this._config.deElevatedHeader;
    }
}
PlacesJourneyConfigService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PlacesJourneyConfigService, deps: [{ token: PlacesJourneyConfigurationToken, optional: true }, { token: i1.ItemModel, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
PlacesJourneyConfigService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PlacesJourneyConfigService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PlacesJourneyConfigService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [PlacesJourneyConfigurationToken]
                }] }, { type: i1.ItemModel, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxhY2VzLWpvdXJuZXktY29uZmlnLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL3BsYWNlcy1qb3VybmV5L3NyYy9saWIvc2VydmljZXMvcGxhY2VzLWpvdXJuZXktY29uZmlnLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7O0FBSTdFLE1BQU0sQ0FBQyxNQUFNLCtCQUErQixHQUMxQyxJQUFJLGNBQWMsQ0FDaEIsNENBQTRDLENBQzdDLENBQUM7QUFFSixNQUFNLENBQU4sSUFBWSx1QkFHWDtBQUhELFdBQVksdUJBQXVCO0lBQ2pDLDRDQUFpQixDQUFBO0lBQ2pCLG1EQUF3QixDQUFBO0FBQzFCLENBQUMsRUFIVyx1QkFBdUIsS0FBdkIsdUJBQXVCLFFBR2xDO0FBcUJELE1BQU0sY0FBYyxHQUErQjtJQUNqRCxNQUFNLEVBQUUsRUFBRTtJQUNWLFVBQVUsRUFBRSxFQUFFO0lBQ2QsT0FBTyxFQUFFLEVBQUU7SUFDWCxRQUFRLEVBQUUsVUFBVTtJQUNwQixTQUFTLEVBQUUsUUFBUTtJQUNuQixNQUFNLEVBQUUsQ0FBQztJQUNULFNBQVMsRUFBRSxHQUFHO0lBQ2QsaUJBQWlCLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtJQUNqRCxnQkFBZ0IsRUFBRSxLQUFLO0NBQ3hCLENBQUM7QUFHRixNQUFNLE9BQU8sMEJBQTBCO0lBR3JDLFlBR0UsTUFBa0MsRUFDTCxTQUFvQjtRQUFwQixjQUFTLEdBQVQsU0FBUyxDQUFXO1FBRWpELE1BQU0sR0FBRyxNQUFNLElBQUksRUFBRSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxPQUFPLG1DQUFRLGNBQWMsR0FBSyxNQUFNLENBQUUsQ0FBQztRQUNoRCxnRkFBZ0Y7UUFDaEYsSUFBSSxJQUFJLENBQUMsU0FBUyxJQUFJLE1BQU0sQ0FBQyxNQUFNLEtBQUssU0FBUyxFQUFFO1lBQ2pELElBQUksQ0FBQyxTQUFTO2lCQUNYLFFBQVEsQ0FBUyxRQUFRLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUM7aUJBQy9DLFNBQVMsQ0FBMEI7Z0JBQ2xDLElBQUksRUFBRSxDQUFDLEdBQVcsRUFBRSxFQUFFO29CQUNwQixJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUM7Z0JBQzVCLENBQUM7YUFDRixDQUFDO2lCQUNELFdBQVcsRUFBRSxDQUFDO1NBQ2xCO0lBQ0gsQ0FBQztJQUVELElBQUksUUFBUTtRQUNWLE9BQU8sY0FBYyxDQUFDO0lBQ3hCLENBQUM7SUFFRDs7T0FFRztJQUNILElBQUksTUFBTTtRQUNSLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUM7SUFDN0IsQ0FBQztJQUVEOztPQUVHO0lBQ0gsSUFBSSxVQUFVO1FBQ1osT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQztJQUNqQyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxJQUFJLE9BQU87UUFDVCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDO0lBQzlCLENBQUM7SUFFRDs7T0FFRztJQUNILElBQUksUUFBUTtRQUNWLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUM7SUFDL0IsQ0FBQztJQUVEOztPQUVHO0lBQ0gsSUFBSSxTQUFTO1FBQ1gsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQztJQUNoQyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxJQUFJLE1BQU07UUFDUixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDO0lBQzdCLENBQUM7SUFFRDs7T0FFRztJQUNILElBQUksU0FBUztRQUNYLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUM7SUFDaEMsQ0FBQztJQUVEOztPQUVHO0lBQ0gsSUFBSSxpQkFBaUI7UUFDbkIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDO0lBQ3hDLENBQUM7SUFFRDs7T0FFRztJQUNILElBQUksZ0JBQWdCO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQztJQUN2QyxDQUFDOzt3SEF6RlUsMEJBQTBCLGtCQUszQiwrQkFBK0I7NEhBTDlCLDBCQUEwQjs0RkFBMUIsMEJBQTBCO2tCQUR0QyxVQUFVOzswQkFLTixRQUFROzswQkFDUixNQUFNOzJCQUFDLCtCQUErQjs7MEJBRXRDLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBPcHRpb25hbCwgSW5qZWN0LCBJbmplY3Rpb25Ub2tlbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSXRlbU1vZGVsIH0gZnJvbSAnQGJhY2tiYXNlL2ZvdW5kYXRpb24tYW5nL2NvcmUnO1xuaW1wb3J0IHsgUGFydGlhbE9ic2VydmVyIH0gZnJvbSAncnhqcyc7XG5cbmV4cG9ydCBjb25zdCBQbGFjZXNKb3VybmV5Q29uZmlndXJhdGlvblRva2VuID1cbiAgbmV3IEluamVjdGlvblRva2VuPFBsYWNlc0pvdXJuZXlDb25maWd1cmF0aW9uPihcbiAgICAnUGxhY2VzSm91cm5leUNvbmZpZ3VyYXRpb24gaW5qZWN0aW9uIHRva2VuJ1xuICApO1xuXG5leHBvcnQgZW51bSBQbGFjZXNNZWFzdXJlbWVudFN5c3RlbSB7XG4gIE1FVFJJQyA9ICdtZXRyaWMnLFxuICBVU19JTVBFUklBTCA9ICdpbXBlcmlhbCcsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGxhY2VUeXBlcyB7XG4gIFtwbGFjZVR5cGU6IHN0cmluZ106IHtcbiAgICBpY29uTmFtZT86IHN0cmluZztcbiAgICBtYXJrZXJVcmw/OiBzdHJpbmc7XG4gIH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGxhY2VzSm91cm5leUNvbmZpZ3VyYXRpb24ge1xuICBhcGlLZXk6IHN0cmluZztcbiAgcGxhY2VUeXBlczogUGxhY2VUeXBlcztcbiAgbWFwWm9vbTogbnVtYmVyO1xuICBsYXRpdHVkZTogbnVtYmVyO1xuICBsb25naXR1ZGU6IG51bWJlcjtcbiAgcmFkaXVzOiBudW1iZXI7XG4gIGxpbWl0TGlzdDogbnVtYmVyO1xuICBtZWFzdXJlbWVudFN5c3RlbTogUGxhY2VzTWVhc3VyZW1lbnRTeXN0ZW07XG4gIGRlRWxldmF0ZWRIZWFkZXI6IGJvb2xlYW47XG59XG5cbmNvbnN0IGNvbmZpZ0RlZmF1bHRzOiBQbGFjZXNKb3VybmV5Q29uZmlndXJhdGlvbiA9IHtcbiAgYXBpS2V5OiAnJyxcbiAgcGxhY2VUeXBlczoge30sXG4gIG1hcFpvb206IDE1LFxuICBsYXRpdHVkZTogNTIuMzc2MDk5MixcbiAgbG9uZ2l0dWRlOiA0LjkwMDc3OSxcbiAgcmFkaXVzOiAyLFxuICBsaW1pdExpc3Q6IDEwMCxcbiAgbWVhc3VyZW1lbnRTeXN0ZW06IFBsYWNlc01lYXN1cmVtZW50U3lzdGVtLk1FVFJJQyxcbiAgZGVFbGV2YXRlZEhlYWRlcjogZmFsc2UsXG59O1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUGxhY2VzSm91cm5leUNvbmZpZ1NlcnZpY2Uge1xuICBwcml2YXRlIF9jb25maWc6IFBsYWNlc0pvdXJuZXlDb25maWd1cmF0aW9uO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIEBPcHRpb25hbCgpXG4gICAgQEluamVjdChQbGFjZXNKb3VybmV5Q29uZmlndXJhdGlvblRva2VuKVxuICAgIGNvbmZpZzogUGxhY2VzSm91cm5leUNvbmZpZ3VyYXRpb24sXG4gICAgQE9wdGlvbmFsKCkgcHJpdmF0ZSByZWFkb25seSBpdGVtTW9kZWw6IEl0ZW1Nb2RlbFxuICApIHtcbiAgICBjb25maWcgPSBjb25maWcgfHwge307XG4gICAgdGhpcy5fY29uZmlnID0geyAuLi5jb25maWdEZWZhdWx0cywgLi4uY29uZmlnIH07XG4gICAgLy8gdXBkYXRlIHRoZSBBUEkga2V5IGZyb20gSXRlbU1vZGVsIGlmIGl0IHdhcyBub3QgcHJvdmlkZWQgZnJvbSBhIHN0YXRpYyBjb25maWdcbiAgICBpZiAodGhpcy5pdGVtTW9kZWwgJiYgY29uZmlnLmFwaUtleSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLml0ZW1Nb2RlbFxuICAgICAgICAucHJvcGVydHk8c3RyaW5nPignYXBpS2V5JywgdGhpcy5fY29uZmlnLmFwaUtleSlcbiAgICAgICAgLnN1YnNjcmliZSg8UGFydGlhbE9ic2VydmVyPHN0cmluZz4+e1xuICAgICAgICAgIG5leHQ6IChrZXk6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgdGhpcy5fY29uZmlnLmFwaUtleSA9IGtleTtcbiAgICAgICAgICB9LFxuICAgICAgICB9KVxuICAgICAgICAudW5zdWJzY3JpYmUoKTtcbiAgICB9XG4gIH1cblxuICBnZXQgZGVmYXVsdHMoKTogUGxhY2VzSm91cm5leUNvbmZpZ3VyYXRpb24ge1xuICAgIHJldHVybiBjb25maWdEZWZhdWx0cztcbiAgfVxuXG4gIC8qKlxuICAgKiBBUEkga2V5IGZvciBHb29nbGUgTWFwc1xuICAgKi9cbiAgZ2V0IGFwaUtleSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9jb25maWcuYXBpS2V5O1xuICB9XG5cbiAgLyoqXG4gICAqIFBsYWNlIHR5cGVzIGNvbmZpZ3VyYXRpb24uIFVzZWQgdG8gc2V0IHVwIG1hcmtlciBpbWFnZSBhbmQgdGhlIGZpbHRlciBsYWJlbCBmb3IgYW55IHBsYWNlIHR5cGUgYXZhaWxhYmxlIGluIHRoZSBzZXJ2aWNlXG4gICAqL1xuICBnZXQgcGxhY2VUeXBlcygpOiBQbGFjZVR5cGVzIHtcbiAgICByZXR1cm4gdGhpcy5fY29uZmlnLnBsYWNlVHlwZXM7XG4gIH1cblxuICAvKipcbiAgICogRGVmYXVsdCB6b29tIHZhbHVlIGZvciBhIG1hcFxuICAgKi9cbiAgZ2V0IG1hcFpvb20oKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fY29uZmlnLm1hcFpvb207XG4gIH1cblxuICAvKipcbiAgICogRGVmYXVsdCBtYXAgbGF0aXR1ZGVcbiAgICovXG4gIGdldCBsYXRpdHVkZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9jb25maWcubGF0aXR1ZGU7XG4gIH1cblxuICAvKipcbiAgICogRGVmYXVsdCBtYXAgbG9uZ2l0dWRlXG4gICAqL1xuICBnZXQgbG9uZ2l0dWRlKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbmZpZy5sb25naXR1ZGU7XG4gIH1cblxuICAvKipcbiAgICogRGVmYXVsdCByYWRpdXMgaW4gd2hpY2ggdGhlIGxvY2F0aW9ucyBhcmUgYmVpbmcgc2VhcmNoZWQgd2hpbGUgbWFwIGlzIG5vdCBsb2FkZWRcbiAgICovXG4gIGdldCByYWRpdXMoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fY29uZmlnLnJhZGl1cztcbiAgfVxuXG4gIC8qKlxuICAgKiBNYXhpbXVtIGFtb3VudCBvZiBsb2NhdGlvbnMgdG8gZGlzcGxheVxuICAgKi9cbiAgZ2V0IGxpbWl0TGlzdCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9jb25maWcubGltaXRMaXN0O1xuICB9XG5cbiAgLyoqXG4gICAqIE1lYXN1cmVtZW50IHN5c3RlbVxuICAgKi9cbiAgZ2V0IG1lYXN1cmVtZW50U3lzdGVtKCk6IFBsYWNlc01lYXN1cmVtZW50U3lzdGVtIHtcbiAgICByZXR1cm4gdGhpcy5fY29uZmlnLm1lYXN1cmVtZW50U3lzdGVtO1xuICB9XG5cbiAgLyoqXG4gICAqIERldiBjb25maWcgdG8gZW5hYmxlIGRlLWVsZXZhdGVkIGhlYWRlclxuICAgKi9cbiAgZ2V0IGRlRWxldmF0ZWRIZWFkZXIoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbmZpZy5kZUVsZXZhdGVkSGVhZGVyO1xuICB9XG59XG4iXX0=