(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@backbase/ui-ang/modal'), require('@backbase/ui-ang/button'), require('@angular/common'), require('@backbase/ui-ang/payment-card-number-pipe'), require('@backbase/data-ang/payment-order'), require('@backbase/ui-ang/icon'), require('@backbase/ui-ang/amount'), require('@backbase/ui-ang/badge'), require('@backbase/ui-ang/tooltip-directive'), require('@backbase/ui-ang/ellipsis'), require('@backbase/ui-ang/load-button'), require('@backbase/ui-ang/empty-state'), require('rxjs'), require('rxjs/operators'), require('@backbase/ui-ang/notification'), require('@backbase/ui-ang/loading-indicator'), require('@angular/localize/init'), require('@backbase/ui-ang/header'), require('@angular/router'), require('@backbase/foundation-ang/core'), require('@backbase/ui-ang/tab')) :
    typeof define === 'function' && define.amd ? define('@backbase/manage-upcoming-and-historical-payments-journey-ang', ['exports', '@angular/core', '@backbase/ui-ang/modal', '@backbase/ui-ang/button', '@angular/common', '@backbase/ui-ang/payment-card-number-pipe', '@backbase/data-ang/payment-order', '@backbase/ui-ang/icon', '@backbase/ui-ang/amount', '@backbase/ui-ang/badge', '@backbase/ui-ang/tooltip-directive', '@backbase/ui-ang/ellipsis', '@backbase/ui-ang/load-button', '@backbase/ui-ang/empty-state', 'rxjs', 'rxjs/operators', '@backbase/ui-ang/notification', '@backbase/ui-ang/loading-indicator', '@angular/localize/init', '@backbase/ui-ang/header', '@angular/router', '@backbase/foundation-ang/core', '@backbase/ui-ang/tab'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["manage-upcoming-and-historical-payments-journey-ang"] = {}), global.ng.core, global.i1, global.i8, global.ng.common, global.i2, global.i1$2, global.i2$1, global.i3, global.i4, global.i7, global.i5, global.i2$2, global.i3$1, global.rxjs, global.rxjs.operators, global.i3$2, global.i6, global.ng.localize.init, global.i2$3, global.ng.router, global.i1$4, global.i3$3));
})(this, (function (exports, i0, i1, i8, i1$1, i2, i1$2, i2$1, i3, i4, i7, i5, i2$2, i3$1, rxjs, operators, i3$2, i6, init, i2$3, i1$3, i1$4, i3$3) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i8__namespace = /*#__PURE__*/_interopNamespace(i8);
    var i1__namespace$1 = /*#__PURE__*/_interopNamespace(i1$1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i1__namespace$2 = /*#__PURE__*/_interopNamespace(i1$2);
    var i2__namespace$1 = /*#__PURE__*/_interopNamespace(i2$1);
    var i3__namespace = /*#__PURE__*/_interopNamespace(i3);
    var i4__namespace = /*#__PURE__*/_interopNamespace(i4);
    var i7__namespace = /*#__PURE__*/_interopNamespace(i7);
    var i5__namespace = /*#__PURE__*/_interopNamespace(i5);
    var i2__namespace$2 = /*#__PURE__*/_interopNamespace(i2$2);
    var i3__namespace$1 = /*#__PURE__*/_interopNamespace(i3$1);
    var i3__namespace$2 = /*#__PURE__*/_interopNamespace(i3$2);
    var i6__namespace = /*#__PURE__*/_interopNamespace(i6);
    var i2__namespace$3 = /*#__PURE__*/_interopNamespace(i2$3);
    var i1__namespace$3 = /*#__PURE__*/_interopNamespace(i1$3);
    var i1__namespace$4 = /*#__PURE__*/_interopNamespace(i1$4);
    var i3__namespace$3 = /*#__PURE__*/_interopNamespace(i3$3);

    var CommunicationService = /** @class */ (function () {
        function CommunicationService() {
        }
        return CommunicationService;
    }());

    var UpcomingPaymentsCancelPaymentConfirmationComponent = /** @class */ (function () {
        function UpcomingPaymentsCancelPaymentConfirmationComponent() {
            this.modelOptions = {
                backdrop: 'static',
                keyboard: false,
            };
            /**
             * Indicator for confirmation dialog open state.
             * Default value is `false`.
             */
            this.isOpen = false;
            /**
             * Indicator for recurring payment state.
             * Default value is `false`.
             */
            this.isRecurring = false;
            /**
             * Changes will be triggered on keepPayment event emit.
             */
            this.keepPayment = new i0.EventEmitter();
            /**
             * Changes will be triggered on cancelPayment event emit.
             */
            this.cancelPayment = new i0.EventEmitter();
        }
        UpcomingPaymentsCancelPaymentConfirmationComponent.prototype.onKeepPaymentClick = function () {
            this.keepPayment.emit();
        };
        UpcomingPaymentsCancelPaymentConfirmationComponent.prototype.onCancelPaymentClick = function () {
            this.cancelPayment.emit();
        };
        return UpcomingPaymentsCancelPaymentConfirmationComponent;
    }());
    /** @nocollapse */ UpcomingPaymentsCancelPaymentConfirmationComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: UpcomingPaymentsCancelPaymentConfirmationComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ UpcomingPaymentsCancelPaymentConfirmationComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: UpcomingPaymentsCancelPaymentConfirmationComponent, selector: "bb-upcoming-payments-cancel-payment-confirmation", inputs: { isOpen: "isOpen", isRecurring: "isRecurring" }, outputs: { keepPayment: "keepPayment", cancelPayment: "cancelPayment" }, ngImport: i0__namespace, template: "<bb-modal-ui [isOpen]=\"isOpen\" [modalOptions]=\"modelOptions\">\n  <bb-modal-header-ui data-role=\"cancel-payment-confirmation-header\">\n    <ng-template bbCustomModalHeader>\n      <h2 i18n=\"Cancel payment|Dialog header@@upcoming-payments.recurring.confirm.dialog.header\">\n        {isRecurring, select, true {Cancel Recurring Payment?} other {Cancel Upcoming Payment?}}\n      </h2>\n    </ng-template>\n  </bb-modal-header-ui>\n\n  <bb-modal-body-ui data-role=\"cancel-payment-confirmation-body\">\n    <ng-template bbCustomModalBody>\n      <ng-container\n        i18n=\"\n          Confirmation message body|confirmation message for cancel payment\n          dialog@@upcoming-payments.confirm.dialog.body.message\"\n      >\n        {isRecurring, select, true {This recurring payment will be permanently cancelled.} other {This upcoming payment\n        will be permanently cancelled.}}\n      </ng-container>\n    </ng-template>\n  </bb-modal-body-ui>\n\n  <bb-modal-footer-ui #footerRef data-role=\"cancel-payment-confirmation-footer\">\n    <ng-template bbCustomModalFooter>\n      <div class=\"bb-button-bar\">\n        <button\n          bbButton\n          class=\"bb-button-bar__button\"\n          (click)=\"onCancelPaymentClick()\"\n          color=\"danger\"\n          data-role=\"cancel-payment-confirm-btn\"\n          i18n=\"Cancel payment|Request payment cancellation@@upcoming-payments.confirm.dialog.action.cancelPayment\"\n        >\n          Cancel payment\n        </button>\n\n        <button\n          bbButton\n          class=\"bb-button-bar__button\"\n          (click)=\"onKeepPaymentClick()\"\n          color=\"link\"\n          data-role=\"keep-payment-btn\"\n          i18n=\"\n            Keep payment|keep payment and close confirmation dialog@@upcoming-payments.confirm.dialog.action.keepPayment\"\n        >\n          Not now\n        </button>\n      </div>\n    </ng-template>\n  </bb-modal-footer-ui>\n</bb-modal-ui>\n", components: [{ type: i1__namespace.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i1__namespace.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i1__namespace.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: i1__namespace.ModalFooterComponent, selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }], directives: [{ type: i1__namespace.CustomModalHeaderDirective, selector: "ng-template[bbCustomModalHeader]" }, { type: i1__namespace.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i1__namespace.CustomModalFooterDirective, selector: "ng-template[bbCustomModalFooter]" }, { type: i8__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: UpcomingPaymentsCancelPaymentConfirmationComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-upcoming-payments-cancel-payment-confirmation',
                        templateUrl: 'cancel-payment-confirmation.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], propDecorators: { isOpen: [{
                    type: i0.Input
                }], isRecurring: [{
                    type: i0.Input
                }], keepPayment: [{
                    type: i0.Output
                }], cancelPayment: [{
                    type: i0.Output
                }] } });

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var P2P_PAYMENT_TYPE = 'P2P_TRANSFER';
    var P2P_REASON_CODES = {
        pending: 'PP01',
        inProcess: 'PP02',
    };

    var UpcomingPaymentsDetailsListComponent = /** @class */ (function () {
        function UpcomingPaymentsDetailsListComponent() {
            this.accountNumberFormat = {
                length: 36,
                maskRange: [0, -4],
                segments: 4,
            };
        }
        Object.defineProperty(UpcomingPaymentsDetailsListComponent.prototype, "transactionInformation", {
            get: function () {
                var _a;
                return (_a = this.payment) === null || _a === void 0 ? void 0 : _a.transferTransactionInformation;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(UpcomingPaymentsDetailsListComponent.prototype, "originatorAccount", {
            get: function () {
                var _a, _b, _c, _d, _e;
                return ((_b = (_a = this.transactionInformation) === null || _a === void 0 ? void 0 : _a.counterparty) === null || _b === void 0 ? void 0 : _b.role) === 'DEBTOR'
                    ? (_d = (_c = this.payment) === null || _c === void 0 ? void 0 : _c.transferTransactionInformation) === null || _d === void 0 ? void 0 : _d.counterpartyAccount
                    : (_e = this.payment) === null || _e === void 0 ? void 0 : _e.originatorAccount;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(UpcomingPaymentsDetailsListComponent.prototype, "counterPartyAccount", {
            get: function () {
                var _a, _b, _c, _d, _e;
                return ((_b = (_a = this.transactionInformation) === null || _a === void 0 ? void 0 : _a.counterparty) === null || _b === void 0 ? void 0 : _b.role) === 'DEBTOR'
                    ? (_c = this.payment) === null || _c === void 0 ? void 0 : _c.originatorAccount
                    : (_e = (_d = this.payment) === null || _d === void 0 ? void 0 : _d.transferTransactionInformation) === null || _e === void 0 ? void 0 : _e.counterpartyAccount;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(UpcomingPaymentsDetailsListComponent.prototype, "paymentTypeInfo", {
            get: function () {
                var _a, _b;
                var text = (_a = this.config) === null || _a === void 0 ? void 0 : _a.paymentTypeInfoTexts[((_b = this.payment) === null || _b === void 0 ? void 0 : _b.paymentType) || ''];
                return $localize(templateObject_1$4 || (templateObject_1$4 = __makeTemplateObject([":@@upcoming-and-history-payments-details.payment-type-info:", ""], [":@@upcoming-and-history-payments-details.payment-type-info:", ""])), text || '');
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(UpcomingPaymentsDetailsListComponent.prototype, "isAccountNumber", {
            get: function () {
                var _a, _b, _c, _d;
                var scheme = (_d = (_c = (_b = (_a = this.payment) === null || _a === void 0 ? void 0 : _a.transferTransactionInformation) === null || _b === void 0 ? void 0 : _b.counterpartyAccount) === null || _c === void 0 ? void 0 : _c.identification) === null || _d === void 0 ? void 0 : _d.schemeName;
                return ['IBAN', 'BBAN'].includes(scheme || '');
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(UpcomingPaymentsDetailsListComponent.prototype, "isP2PTransfer", {
            get: function () {
                var _a;
                return ((_a = this.payment) === null || _a === void 0 ? void 0 : _a.paymentType) === P2P_PAYMENT_TYPE;
            },
            enumerable: false,
            configurable: true
        });
        return UpcomingPaymentsDetailsListComponent;
    }());
    /** @nocollapse */ UpcomingPaymentsDetailsListComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: UpcomingPaymentsDetailsListComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ UpcomingPaymentsDetailsListComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: UpcomingPaymentsDetailsListComponent, selector: "bb-upcoming-payments-details-list", inputs: { payment: "payment", config: "config" }, ngImport: i0__namespace, template: "<div class=\"break-word bb-block bb-block--lg\">\n  <div class=\"bb-text-bold\" i18n=\"Paying From Account@@upcoming-payments.payment.details.fromAccount.name\">\n    From account\n  </div>\n  <div>\n    {{\n      transactionInformation?.counterparty?.role === 'DEBTOR'\n        ? transactionInformation?.counterparty?.name\n        : payment?.originator?.name\n    }}\n  </div>\n  <div class=\"bb-block bb-block--md\" data-role=\"paying-from-account\">\n    <div class=\"contextual-alternates-off\" *ngIf=\"config?.maskAccounts; else unmaskedAccount\">\n      {{ originatorAccount?.identification?.identification | paymentCardNumber: accountNumberFormat | slice: -14 }}\n    </div>\n    <ng-template #unmaskedAccount>\n      {{ originatorAccount?.identification?.identification }}\n    </ng-template>\n  </div>\n\n  <div class=\"bb-text-bold\" i18n=\"Counter Party Name@@upcoming-payments.payment.details.toAccount.details\">\n    To recipient\n  </div>\n  <div data-role=\"counter-party-name\">\n    {{\n      transactionInformation?.counterparty?.role === 'DEBTOR'\n        ? payment?.originator?.name\n        : transactionInformation?.counterparty?.name\n    }}\n  </div>\n  <div class=\"bb-block bb-block--md\" data-role=\"counter-party-account\">\n    <div\n      class=\"contextual-alternates-off\"\n      *ngIf=\"config?.maskAccounts && isAccountNumber; else unmaskedCounterpartyTemp\"\n    >\n      {{ counterPartyAccount?.identification?.identification | paymentCardNumber: accountNumberFormat | slice: -14 }}\n    </div>\n    <ng-template #unmaskedCounterpartyTemp>\n      {{ counterPartyAccount?.identification?.identification }}\n    </ng-template>\n  </div>\n  <ng-container *ngIf=\"payment?.paymentSetupId && isP2PTransfer\">\n    <div\n      class=\"bb-text-bold\"\n      i18n=\"@@upcoming-payments.payment.details.toAccount.confirmation-number\"\n      data-role=\"payment-details-confirmation-number-title\"\n    >\n      Confirmation number\n    </div>\n    <div data-role=\"payment-details-confirmation-number\">\n      {{ payment?.paymentSetupId }}\n    </div>\n  </ng-container>\n</div>\n\n<hr class=\"bb-block bb-block--lg\" />\n\n<ng-container *ngIf=\"payment?.paymentMode !== 'RECURRING'; else recurringTemp\">\n  <div class=\"bb-text-bold\" i18n=\"Execution Date@@upcoming-payments.payment.details.executionDate\">Send date</div>\n  <div class=\"bb-block bb-block--md\" data-role=\"execution-date\">\n    {{ payment?.schedule?.nextExecutionDate || payment?.requestedExecutionDate | date: 'longDate' }}\n  </div>\n</ng-container>\n\n<ng-template #recurringTemp>\n  <div class=\"bb-text-bold\" i18n=\"Start Date@@upcoming-payments.payment.details.schedule.startDate\">Start date</div>\n  <div class=\"bb-block bb-block--md\" data-role=\"start-date\">\n    {{ payment?.schedule?.startDate | date: 'longDate' }}\n  </div>\n\n  <ng-container *ngIf=\"payment?.schedule?.endDate\">\n    <div class=\"bb-text-bold\" i18n=\"End Date@@upcoming-payments.payment.details.schedule.endDate\">End date</div>\n    <div class=\"bb-block bb-block--md\" data-role=\"end-date\">\n      {{ payment?.schedule?.endDate | date: 'longDate' }}\n    </div>\n  </ng-container>\n\n  <ng-container *ngIf=\"payment?.schedule?.transferFrequency\">\n    <div class=\"bb-text-bold\" i18n=\"Recurring Frequency@@upcoming-payments.payment.details.schedule.transferFrequency\">\n      Frequency\n    </div>\n    <div class=\"bb-block bb-block--md\" data-role=\"recurring-frequency\">\n      {{ payment?.schedule?.transferFrequency | titlecase }}\n    </div>\n  </ng-container>\n\n  <ng-container *ngIf=\"payment?.schedule?.repeat\">\n    <div class=\"bb-text-bold\" i18n=\"Number of Occurrences@@upcoming-payments.payment.details.schedule.repeat\">\n      Number of occurrences\n    </div>\n    <div class=\"bb-block bb-block--md\">\n      {{ payment?.schedule?.repeat }}\n    </div>\n  </ng-container>\n</ng-template>\n\n<ng-container *ngIf=\"transactionInformation?.remittanceInformation\">\n  <div class=\"bb-text-bold\" i18n=\"Description@@upcoming-payments.payment.details.remittanceInformation.content\">\n    Description\n  </div>\n  <div class=\"bb-block bb-block--md break-word\" data-role=\"description\">\n    {{ transactionInformation?.remittanceInformation?.content }}\n  </div>\n</ng-container>\n\n<ng-container *ngIf=\"paymentTypeInfo\">\n  <hr class=\"bb-block bb-block--lg\" />\n  <div class=\"bb-text-bold\" i18n=\"@@upcoming-payments.payment.details.payment-type\">Payment Type</div>\n  <div class=\"bb-block bb-block--md break-word\">\n    {{ paymentTypeInfo }}\n  </div>\n</ng-container>\n", directives: [{ type: i1__namespace$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "slice": i1__namespace$1.SlicePipe, "paymentCardNumber": i2__namespace.PaymentCardNumberPipe, "date": i1__namespace$1.DatePipe, "titlecase": i1__namespace$1.TitleCasePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: UpcomingPaymentsDetailsListComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-upcoming-payments-details-list',
                        templateUrl: 'upcoming-payments-details-list.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], propDecorators: { payment: [{
                    type: i0.Input
                }], config: [{
                    type: i0.Input
                }] } });
    var templateObject_1$4;

    var mapPaymentOrdersToUpcomingPayments = function (payments) {
        return payments.reduce(function (acc, item) {
            var _a;
            var executionDate = ((_a = item.schedule) === null || _a === void 0 ? void 0 : _a.nextExecutionDate) || item.requestedExecutionDate || '';
            var index = acc.findIndex(function (upcomingPayment) { return upcomingPayment.executionDate === executionDate; });
            if (index <= -1) {
                acc.push({ executionDate: executionDate, items: [item] });
            }
            else {
                acc[index].items.push(item);
            }
            return acc;
        }, []);
    };
    var mapStatusText = function (payment) {
        var _b;
        var reasonCodeMap = (_b = {},
            _b[P2P_REASON_CODES.pending] = { text: 'Pending', color: 'warning' },
            _b[P2P_REASON_CODES.inProcess] = {
                text: 'Accepted by recipient',
                color: '',
            },
            _b);
        switch (payment === null || payment === void 0 ? void 0 : payment.status) {
            case i1$2.Status.ACCEPTED:
                return (payment === null || payment === void 0 ? void 0 : payment.paymentType) === P2P_PAYMENT_TYPE ? reasonCodeMap[(payment === null || payment === void 0 ? void 0 : payment.reasonCode) || ''] : undefined;
            case i1$2.Status.REJECTED:
                return { text: 'Rejected', color: 'danger' };
            case i1$2.Status.CANCELLED:
                return { text: 'Cancelled', color: 'info' };
            case i1$2.Status.PROCESSED:
                return { text: 'Sent to recipient', color: '' };
            default:
                return undefined;
        }
    };

    var UpcomingPaymentsDetailsComponent = /** @class */ (function () {
        function UpcomingPaymentsDetailsComponent() {
            this.p2pReasonCodes = P2P_REASON_CODES;
            this.p2pPaymentType = P2P_PAYMENT_TYPE;
            /**
             * Indicator for details dialog open state.
             * Default value is `false`.
             */
            this.isOpen = false;
            /**
             * Changes will be triggered on cancelPayment event emit.
             */
            this.cancelPayment = new i0.EventEmitter();
            /**
             * Changes will be triggered on close event emit.
             */
            this.close = new i0.EventEmitter();
            /**
             * Changes will be triggered on editPayment event emit.
             */
            this.editPayment = new i0.EventEmitter();
        }
        Object.defineProperty(UpcomingPaymentsDetailsComponent.prototype, "statusText", {
            /**
             * Maps the status texts
             */
            get: function () {
                var statusText = mapStatusText(this.payment);
                return (statusText && {
                    text: $localize(templateObject_1$3 || (templateObject_1$3 = __makeTemplateObject([":@@upcoming-payments-list-item-badge:", ""], [":@@upcoming-payments-list-item-badge:", ""])), statusText.text),
                    color: statusText.color,
                });
            },
            enumerable: false,
            configurable: true
        });
        UpcomingPaymentsDetailsComponent.prototype.onCancelPayment = function () {
            this.cancelPayment.emit();
        };
        UpcomingPaymentsDetailsComponent.prototype.onClose = function () {
            this.isOpen = false;
            this.close.emit();
        };
        UpcomingPaymentsDetailsComponent.prototype.onEditPayment = function () {
            this.editPayment.emit(this.payment);
        };
        return UpcomingPaymentsDetailsComponent;
    }());
    /** @nocollapse */ UpcomingPaymentsDetailsComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: UpcomingPaymentsDetailsComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ UpcomingPaymentsDetailsComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: UpcomingPaymentsDetailsComponent, selector: "bb-upcoming-payments-details", inputs: { isOpen: "isOpen", payment: "payment", config: "config" }, outputs: { cancelPayment: "cancelPayment", close: "close", editPayment: "editPayment" }, ngImport: i0__namespace, template: "<bb-modal-ui [isOpen]=\"isOpen\" (cancel)=\"onClose()\" (confirm)=\"onClose()\">\n  <bb-modal-header-ui>\n    <ng-template bbCustomModalHeader>\n      <div class=\"bb-upcoming-payments-details-header__wrapper bb-block--lg\">\n        <div class=\"bb-block--sm\">\n          <bb-icon-ui\n            [name]=\"payment?.paymentMode === 'RECURRING' ? 'repeat' : 'call-made'\"\n            [size]=\"'xl'\"\n            backgroundType=\"square\"\n            color=\"{{ payment?.paymentMode === 'RECURRING' ? 'secondary' : 'inactive' }}\"\n          ></bb-icon-ui>\n        </div>\n\n        <div\n          class=\"bb-text-bold bb-block--sm\"\n          *ngIf=\"payment?.transferTransactionInformation?.counterparty as counterparty\"\n        >\n          {{ counterparty?.role === 'DEBTOR' ? payment?.originator?.name : counterparty?.name }}\n        </div>\n\n        <div class=\"bb-heading-3 bb-block--sm\">\n          <bb-amount-ui\n            [currency]=\"payment?.transferTransactionInformation?.instructedAmount?.currencyCode\"\n            [amount]=\"payment?.transferTransactionInformation?.instructedAmount?.amount\"\n            [mapCurrency]=\"config?.uiComponentProps?.mapCurrency\"\n          ></bb-amount-ui>\n        </div>\n        <bb-badge-ui\n          *ngIf=\"statusText?.text && statusText?.color\"\n          color=\"{{ statusText?.color }}\"\n          text=\"{{ statusText?.text }}\"\n        ></bb-badge-ui>\n        <ng-container *ngIf=\"statusText?.text && !statusText?.color\">\n          <div class=\"bb-inline-stack\">\n            <span class=\"text-muted bb-stack__item bb-stack__item--spacing-sm\">{{ statusText?.text }}</span>\n            <span\n              bbTooltip=\"This payment can\u2019t be cancelled because it has already been accepted by the recipient.\"\n              i18n-bbTooltip=\"@@upcoming-payments-journey.payment-item.details-modal.tooltip\"\n              placement=\"bottom\"\n              triggers=\"hover\"\n            >\n              <bb-icon-ui name=\"info\" class=\"text-muted bb-stack\" size=\"sm\"></bb-icon-ui>\n            </span>\n          </div>\n        </ng-container>\n      </div>\n\n      <button\n        (click)=\"onClose()\"\n        type=\"button\"\n        class=\"bb-upcoming-payments-details__modal-header-button-close\"\n        aria-label=\"Close payment detail dialog\"\n        data-role=\"close-popup-btn\"\n        i18n-aria-label=\"Close payment detail dialog@@upcoming-payemnts.payment.details.header.close\"\n      >\n        <bb-icon-ui name=\"clear\" class=\"bb-stack\"></bb-icon-ui>\n      </button>\n    </ng-template>\n  </bb-modal-header-ui>\n\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody>\n      <bb-upcoming-payments-details-list [payment]=\"payment\" [config]=\"config\"></bb-upcoming-payments-details-list>\n    </ng-template>\n  </bb-modal-body-ui>\n\n  <bb-modal-footer-ui #footerRef>\n    <ng-template bbCustomModalFooter>\n      <div class=\"bb-button-bar\" *ngIf=\"payment?.status === 'ACCEPTED'\">\n        <button\n          bbButton\n          *ngIf=\"!(payment?.reasonCode === p2pReasonCodes.inProcess)\"\n          class=\"bb-button-bar__button\"\n          (click)=\"onCancelPayment()\"\n          color=\"danger\"\n          data-role=\"cancel-payment-btn\"\n          i18n=\"Cancel payment|Cancel selected payment@@upcoming-payments.payment.details.action.cancel\"\n        >\n          Cancel payment\n        </button>\n\n        <button\n          bbButton\n          *ngIf=\"!(payment?.paymentType === p2pPaymentType)\"\n          (click)=\"onEditPayment()\"\n          class=\"bb-button-bar__button\"\n          i18n=\"Edit payment|Edit selected payment@@upcoming-payments.payment.details.action.edit\"\n          type=\"button\"\n        >\n          Edit\n        </button>\n      </div>\n    </ng-template>\n  </bb-modal-footer-ui>\n</bb-modal-ui>\n", components: [{ type: i1__namespace.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i1__namespace.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i2__namespace$1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i3__namespace.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: i4__namespace.BadgeComponent, selector: "bb-badge-ui", inputs: ["color", "text", "abbr", "circle", "wrap", "ariaLabel"] }, { type: i1__namespace.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: UpcomingPaymentsDetailsListComponent, selector: "bb-upcoming-payments-details-list", inputs: ["payment", "config"] }, { type: i1__namespace.ModalFooterComponent, selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }], directives: [{ type: i1__namespace.CustomModalHeaderDirective, selector: "ng-template[bbCustomModalHeader]" }, { type: i1__namespace$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i7__namespace.TooltipDirective, selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i1__namespace.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i1__namespace.CustomModalFooterDirective, selector: "ng-template[bbCustomModalFooter]" }, { type: i8__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: UpcomingPaymentsDetailsComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-upcoming-payments-details',
                        templateUrl: 'upcoming-payments-details.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], propDecorators: { isOpen: [{
                    type: i0.Input
                }], payment: [{
                    type: i0.Input
                }], config: [{
                    type: i0.Input
                }], cancelPayment: [{
                    type: i0.Output
                }], close: [{
                    type: i0.Output
                }], editPayment: [{
                    type: i0.Output
                }] } });
    var templateObject_1$3;

    var getDateOnly = function (dateArg) {
        if (dateArg === void 0) { dateArg = new Date(); }
        var date = new Date(dateArg);
        var month = String(date.getMonth() + 1);
        var day = String(date.getDate());
        var year = String(date.getFullYear());
        return year + "-" + month.padStart(2, '0') + "-" + day.padStart(2, '0');
    };
    var getRelativeDate = function (next, ISOStringFormat) {
        var date = new Date();
        if (next) {
            date.setDate(date.getDate() + next);
        }
        return ISOStringFormat ? date.toISOString() : getDateOnly(date);
    };
    var sortItems = function (payments, sortDirection) {
        return payments.sort(function (item1, item2) {
            var _a, _b;
            var item1Date = ((_a = item1.schedule) === null || _a === void 0 ? void 0 : _a.nextExecutionDate) || item1.requestedExecutionDate;
            var item2Date = ((_b = item2.schedule) === null || _b === void 0 ? void 0 : _b.nextExecutionDate) || item2.requestedExecutionDate;
            var sortValue = new Date(item1Date || '').getTime() - new Date(item2Date || '').getTime();
            return sortDirection === 'ASC' ? sortValue : -sortValue;
        });
    };
    var unifyItems = function (payments) {
        return payments.reduce(function (result, item) {
            var hasPeer = result.some(function (i) { return i.id === item.id; });
            return hasPeer ? result : result.concat(item);
        }, []);
    };

    var ManageUpcomingAndHistoricalPaymentsJourneyConfigurationToken = new i0.InjectionToken('ManageUpcomingAndHistoricalPaymentsJourneyConfigurationToken injection token');

    var configDefaults = {
        notificationDismissTime: 3000,
        maskAccounts: false,
        upcomingPaymentParams: {
            orderBy: 'requestedExecutionDate',
            direction: 'ASC',
            status: ['ACCEPTED'],
            executionDateFrom: getDateOnly(),
            nextExecutionDateFrom: getDateOnly(),
            from: 0,
            size: 50,
        },
        historyPaymentParams: {
            orderBy: 'requestedExecutionDate',
            direction: 'DESC',
            status: ['CANCELLED', 'REJECTED', 'PROCESSED'],
            from: 0,
            size: 50,
        },
        paymentTypeInfoTexts: {
            INTERNAL_TRANSFER: 'Internal account transfer',
            INTRABANK_TRANSFER: 'Pay someone using account number',
            P2P_TRANSFER: 'Pay someone using mobile number or email address',
        },
        journeyTitle: 'Scheduled Transfers',
        uiComponentProps: {
            mapCurrency: true,
        },
    };
    var ManageUpcomingAndHistoricalPaymentsJourneyConfigService = /** @class */ (function () {
        function ManageUpcomingAndHistoricalPaymentsJourneyConfigService(config) {
            this.config = config;
            this._config = Object.assign(Object.assign({}, configDefaults), (this.config || {}));
        }
        Object.defineProperty(ManageUpcomingAndHistoricalPaymentsJourneyConfigService.prototype, "defaults", {
            get: function () {
                return configDefaults;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ManageUpcomingAndHistoricalPaymentsJourneyConfigService.prototype, "notificationDismissTime", {
            get: function () {
                return this._config.notificationDismissTime;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ManageUpcomingAndHistoricalPaymentsJourneyConfigService.prototype, "maskAccounts", {
            get: function () {
                return this._config.maskAccounts;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ManageUpcomingAndHistoricalPaymentsJourneyConfigService.prototype, "historyPaymentParams", {
            get: function () {
                return this._config.historyPaymentParams;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ManageUpcomingAndHistoricalPaymentsJourneyConfigService.prototype, "upcomingPaymentParams", {
            get: function () {
                return this._config.upcomingPaymentParams;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ManageUpcomingAndHistoricalPaymentsJourneyConfigService.prototype, "paymentTypeInfoTexts", {
            get: function () {
                return this._config.paymentTypeInfoTexts;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ManageUpcomingAndHistoricalPaymentsJourneyConfigService.prototype, "journeyTitle", {
            get: function () {
                return this._config.journeyTitle;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ManageUpcomingAndHistoricalPaymentsJourneyConfigService.prototype, "uiComponentProps", {
            get: function () {
                return this._config.uiComponentProps;
            },
            enumerable: false,
            configurable: true
        });
        return ManageUpcomingAndHistoricalPaymentsJourneyConfigService;
    }());
    /** @nocollapse */ ManageUpcomingAndHistoricalPaymentsJourneyConfigService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManageUpcomingAndHistoricalPaymentsJourneyConfigService, deps: [{ token: ManageUpcomingAndHistoricalPaymentsJourneyConfigurationToken, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ ManageUpcomingAndHistoricalPaymentsJourneyConfigService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManageUpcomingAndHistoricalPaymentsJourneyConfigService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManageUpcomingAndHistoricalPaymentsJourneyConfigService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () {
            return [{ type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [ManageUpcomingAndHistoricalPaymentsJourneyConfigurationToken]
                        }] }];
        } });

    var UpcomingPaymentsItemComponent = /** @class */ (function () {
        function UpcomingPaymentsItemComponent(communicatonService, config) {
            this.communicatonService = communicatonService;
            this.config = config;
            this.p2pReasonCodes = P2P_REASON_CODES;
            this.p2pPaymentType = P2P_PAYMENT_TYPE;
            /**
             * Changes will be triggered on cancelPayment event emit.
             */
            this.cancelPayment = new i0.EventEmitter();
        }
        Object.defineProperty(UpcomingPaymentsItemComponent.prototype, "transactionInformation", {
            get: function () {
                var _a;
                return (_a = this.payment) === null || _a === void 0 ? void 0 : _a.transferTransactionInformation;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(UpcomingPaymentsItemComponent.prototype, "schedule", {
            get: function () {
                var _a, _b;
                return (_b = (_a = this.payment) === null || _a === void 0 ? void 0 : _a.schedule) === null || _b === void 0 ? void 0 : _b.transferFrequency;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(UpcomingPaymentsItemComponent.prototype, "isRecurring", {
            get: function () {
                var _a;
                return ((_a = this.payment) === null || _a === void 0 ? void 0 : _a.paymentMode) === 'RECURRING';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(UpcomingPaymentsItemComponent.prototype, "statusText", {
            get: function () {
                var statusText = mapStatusText(this.payment);
                return (statusText && {
                    text: $localize(templateObject_1$2 || (templateObject_1$2 = __makeTemplateObject([":@@upcoming-payments-list-item-badge:", ""], [":@@upcoming-payments-list-item-badge:", ""])), statusText.text),
                    color: statusText.color,
                });
            },
            enumerable: false,
            configurable: true
        });
        UpcomingPaymentsItemComponent.prototype.onCancelClick = function (event) {
            event.stopPropagation();
            this.cancelPayment.emit();
        };
        UpcomingPaymentsItemComponent.prototype.onEditClick = function (event) {
            var _a;
            if (this.payment) {
                event.stopPropagation();
                (_a = this.communicatonService) === null || _a === void 0 ? void 0 : _a.navigateToEditPayment(this.payment);
            }
        };
        return UpcomingPaymentsItemComponent;
    }());
    /** @nocollapse */ UpcomingPaymentsItemComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: UpcomingPaymentsItemComponent, deps: [{ token: CommunicationService, optional: true }, { token: ManageUpcomingAndHistoricalPaymentsJourneyConfigService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ UpcomingPaymentsItemComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: UpcomingPaymentsItemComponent, selector: "bb-upcoming-payments-item", inputs: { payment: "payment" }, outputs: { cancelPayment: "cancelPayment" }, ngImport: i0__namespace, template: "<div class=\"bb-stack\" data-role=\"upcoming-payment-item\">\n  <bb-icon-ui\n    name=\"{{ isRecurring ? 'repeat' : 'call-made' }}\"\n    class=\"bb-stack__item bb-stack__item--spacing-md\"\n    backgroundType=\"square\"\n    size=\"lg\"\n    color=\"{{ isRecurring ? 'secondary' : 'inactive' }}\"\n  ></bb-icon-ui>\n  <ng-container *ngIf=\"transactionInformation\">\n    <div class=\"bb-stack__item bb-stack__item--fill bb-ellipsis bb-ellipsis--single-line\">\n      <div class=\"bb-stack bb-block bb-block--xs\">\n        <span class=\"sr-only\" i18n=\"screenReader@@upcoming-payments.group.item.counterparty\">\n          Counter party name:\n        </span>\n        <div\n          class=\"bb-text-bold bb-stack__item bb-stack__item--spacing-md bb-ellipsis bb-ellipsis--single-line\"\n          data-role=\"upcoming-payment-item-counterparty-name\"\n        >\n          {{\n            transactionInformation?.counterparty?.role === 'DEBTOR'\n              ? payment?.originator?.name\n              : transactionInformation?.counterparty?.name\n          }}\n        </div>\n        <bb-badge-ui\n          *ngIf=\"statusText?.text && statusText?.color\"\n          class=\"bb-stack__item\"\n          color=\"{{ statusText?.color }}\"\n          text=\"{{ statusText?.text }}\"\n        ></bb-badge-ui>\n      </div>\n      <div class=\"bb-inline-stack text-muted bb-subtitle\">\n        <span i18n=\"@@upcoming-payments.group.item.from-label\">From&nbsp;</span>\n        <div class=\"bb-inline-stack__item bb-inline-stack__item--spacing-none bb-block bb-block--full-width\">\n          <bb-ellipsis-ui\n            [text]=\"\n              transactionInformation?.counterparty?.role === 'DEBTOR'\n                ? transactionInformation?.counterparty?.name\n                : payment?.originator?.name\n            \"\n          ></bb-ellipsis-ui>\n        </div>\n        <div *ngIf=\"payment?.paymentMode === 'RECURRING'\" class=\"bb-inline-stack__item\">\n          <span class=\"sr-only\" i18n=\"screenReader@@upcoming-payments.group.item.paymentMode\"> Payment Mode: </span>\n          <span> - {{ schedule | titlecase }} </span>\n        </div>\n      </div>\n    </div>\n    <div class=\"bb-stack__item bb-text-align-right\">\n      <div class=\"bb-block bb-block--xs bb-text-align-right bb-text-bold\">\n        <span class=\"sr-only\" i18n=\"screenReader@@upcoming-payments.group.item.amount\"> Amount: </span>\n        <bb-amount-ui\n          data-role=\"upcoming-payment-item-amount\"\n          [currency]=\"transactionInformation?.instructedAmount?.currencyCode\"\n          [amount]=\"transactionInformation?.instructedAmount?.amount\"\n          [mapCurrency]=\"config.uiComponentProps?.mapCurrency\"\n        ></bb-amount-ui>\n      </div>\n\n      <ng-container *ngIf=\"this.payment?.status === 'ACCEPTED'\">\n        <button\n          bbButton\n          *ngIf=\"!(payment?.paymentType === p2pPaymentType)\"\n          color=\"link-text\"\n          buttonSize=\"sm\"\n          class=\"bb-stack__item bb-stack__item--spacing-lg\"\n          (click)=\"onEditClick($event)\"\n          (keydown.enter)=\"onEditClick($event)\"\n          (keydown.space)=\"onEditClick($event)\"\n          i18n=\"@@upcoming-payments.group.item.button.edit\"\n        >\n          Edit\n        </button>\n        <button\n          bbButton\n          *ngIf=\"!(payment?.reasonCode === p2pReasonCodes.inProcess)\"\n          color=\"link-text\"\n          buttonSize=\"sm\"\n          class=\"bb-stack__item bb-text-warning bb-text-danger\"\n          (click)=\"onCancelClick($event)\"\n          (keydown.enter)=\"onCancelClick($event)\"\n          (keydown.space)=\"onCancelClick($event)\"\n          i18n=\"@@upcoming-payments.group.item.button.cancel\"\n          data-role=\"upcoming-payment-item-cancel-button\"\n        >\n          Cancel\n        </button>\n      </ng-container>\n      <ng-container *ngIf=\"payment?.reasonCode === p2pReasonCodes.inProcess && payment?.status === 'ACCEPTED'\">\n        <div class=\"bb-inline-stack\">\n          <span\n            class=\"text-muted bb-subtitle bb-stack__item bb-stack__item--spacing-xs\"\n            i18n=\"@@upcoming-payments-journey.payment-item.ready-status.text\"\n            >Accepted</span\n          >\n          <span\n            bbTooltip=\"This payment can\u2019t be cancelled or edited because it has already been accepted by the recipient.\"\n            i18n-bbTooltip=\"@@upcoming-payments-journey.payment-item.ready-status.tooltip\"\n            placement=\"bottom\"\n            triggers=\"hover\"\n          >\n            <bb-icon-ui name=\"info\" class=\"text-muted bb-stack\" size=\"sm\"></bb-icon-ui>\n          </span>\n        </div>\n      </ng-container>\n    </div>\n  </ng-container>\n</div>\n", components: [{ type: i2__namespace$1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i4__namespace.BadgeComponent, selector: "bb-badge-ui", inputs: ["color", "text", "abbr", "circle", "wrap", "ariaLabel"] }, { type: i5__namespace.EllipsisComponent, selector: "bb-ellipsis-ui", inputs: ["text", "tooltipTriggers", "lineClamp"] }, { type: i3__namespace.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }], directives: [{ type: i1__namespace$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i8__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i7__namespace.TooltipDirective, selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }], pipes: { "titlecase": i1__namespace$1.TitleCasePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: UpcomingPaymentsItemComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-upcoming-payments-item',
                        templateUrl: 'upcoming-payments-item.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () {
            return [{ type: CommunicationService, decorators: [{
                            type: i0.Optional
                        }] }, { type: ManageUpcomingAndHistoricalPaymentsJourneyConfigService }];
        }, propDecorators: { payment: [{
                    type: i0.Input
                }], cancelPayment: [{
                    type: i0.Output
                }] } });
    var templateObject_1$2;

    var UpcomingPaymentsItemGroupComponent = /** @class */ (function () {
        function UpcomingPaymentsItemGroupComponent() {
            /**
             * Changes will be triggered on paymentItemClick event emit.
             */
            this.paymentItemClick = new i0.EventEmitter();
            /**
             *On cancel event emit.
             */
            this.cancelPayment = new i0.EventEmitter();
        }
        UpcomingPaymentsItemGroupComponent.prototype.onPaymentItemClick = function (paymentItem) {
            this.paymentItemClick.emit(paymentItem);
        };
        UpcomingPaymentsItemGroupComponent.prototype.trackPaymentItem = function (_, payment) {
            return payment ? payment.requestedExecutionDate : undefined;
        };
        UpcomingPaymentsItemGroupComponent.prototype.formatExecutionDate = function () {
            var _a;
            var result = (_a = this.paymentsGroup) === null || _a === void 0 ? void 0 : _a.executionDate;
            if (result === getRelativeDate()) {
                result = 'today';
            }
            else if (result === getRelativeDate(1)) {
                result = 'tomorrow';
            }
            return result;
        };
        UpcomingPaymentsItemGroupComponent.prototype.onCancelPayment = function (payment) {
            this.cancelPayment.emit(payment);
        };
        return UpcomingPaymentsItemGroupComponent;
    }());
    /** @nocollapse */ UpcomingPaymentsItemGroupComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: UpcomingPaymentsItemGroupComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ UpcomingPaymentsItemGroupComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: UpcomingPaymentsItemGroupComponent, selector: "bb-upcoming-payments-item-group", inputs: { paymentsGroup: "paymentsGroup" }, outputs: { paymentItemClick: "paymentItemClick", cancelPayment: "cancelPayment" }, ngImport: i0__namespace, template: "<!-- Execution date -->\n<div\n  class=\"bb-stack bb-subheader bb-text-support bb-block bb-block--xl\"\n  i18n=\"@@upcoming-payments.group.header\"\n  data-role=\"group-item-label\"\n>\n  {formatExecutionDate(), select, today {Today} tomorrow {Tomorrow} other\n  {{{ paymentsGroup?.executionDate | date:'longDate'}}} }\n</div>\n<!-- group of payments -->\n<ng-container *ngIf=\"paymentsGroup?.items?.length > 0\">\n  <div class=\"bb-block bb-block--sm\">\n    <ul class=\"bb-list\">\n      <li\n        *ngFor=\"let payment of paymentsGroup?.items; trackBy: trackPaymentItem\"\n        class=\"bb-list__item bb-list__item--no-separator\"\n      >\n        <div\n          data-role=\"group-item-row\"\n          role=\"button\"\n          tabindex=\"0\"\n          (keydown.enter)=\"onPaymentItemClick(payment)\"\n          (click)=\"onPaymentItemClick(payment)\"\n        >\n          <bb-upcoming-payments-item\n            [payment]=\"payment\"\n            (cancelPayment)=\"onCancelPayment(payment)\"\n          ></bb-upcoming-payments-item>\n        </div>\n      </li>\n    </ul>\n  </div>\n</ng-container>\n", components: [{ type: UpcomingPaymentsItemComponent, selector: "bb-upcoming-payments-item", inputs: ["payment"], outputs: ["cancelPayment"] }], directives: [{ type: i1__namespace$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "date": i1__namespace$1.DatePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: UpcomingPaymentsItemGroupComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-upcoming-payments-item-group',
                        templateUrl: './upcoming-payments-item-group.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], propDecorators: { paymentsGroup: [{
                    type: i0.Input
                }], paymentItemClick: [{
                    type: i0.Output
                }], cancelPayment: [{
                    type: i0.Output
                }] } });

    var UpcomingPaymentsListComponent = /** @class */ (function () {
        function UpcomingPaymentsListComponent() {
            /**
             * The upcoming payment list.
             */
            this.upcomingPayments = [];
            /**
             * Total count for payment.
             * Default value is `0`.
             */
            this.totalCount = 0;
            /**
             * Indicator for load more loading state.
             * Default value is `false`.
             */
            this.loading = false;
            /**
             * From parameter for load more payments request.
             * Default value is `0`.
             */
            this.loadMoreFrom = 0;
            /**
             * Size parameter for load more payments request.
             * Default value is `0`.
             */
            this.loadMoreSize = 0;
            /**
             * changes will be triggered on paymentItemClick event emit.
             */
            this.paymentItemClick = new i0.EventEmitter();
            /**
             * changes will be triggered on loadMoreParam event emit.
             */
            this.loadMoreParam = new i0.EventEmitter();
            /**
             *On cancel event emit.
             */
            this.cancelPayment = new i0.EventEmitter();
        }
        UpcomingPaymentsListComponent.prototype.loadMoreParamChange = function (event) {
            this.loadMoreFrom = event.from;
            this.loadMoreParam.emit(event);
        };
        UpcomingPaymentsListComponent.prototype.onPaymentItemClick = function (paymentItem) {
            this.paymentItemClick.emit(paymentItem);
        };
        UpcomingPaymentsListComponent.prototype.trackPaymentsGroup = function (_, paymentsGroup) {
            return paymentsGroup ? paymentsGroup.executionDate : undefined;
        };
        UpcomingPaymentsListComponent.prototype.onCancelPayment = function (payment) {
            this.cancelPayment.emit(payment);
        };
        Object.defineProperty(UpcomingPaymentsListComponent.prototype, "hasMore", {
            get: function () {
                var currentCount = this.loadMoreFrom * this.loadMoreSize + this.loadMoreSize;
                return currentCount < this.totalCount;
            },
            enumerable: false,
            configurable: true
        });
        return UpcomingPaymentsListComponent;
    }());
    /** @nocollapse */ UpcomingPaymentsListComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: UpcomingPaymentsListComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ UpcomingPaymentsListComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: UpcomingPaymentsListComponent, selector: "bb-upcoming-payments-list", inputs: { upcomingPayments: "upcomingPayments", totalCount: "totalCount", loading: "loading", loadMoreFrom: "loadMoreFrom", loadMoreSize: "loadMoreSize" }, outputs: { paymentItemClick: "paymentItemClick", loadMoreParam: "loadMoreParam", cancelPayment: "cancelPayment" }, ngImport: i0__namespace, template: "<ng-container *ngIf=\"upcomingPayments && upcomingPayments?.length > 0; else emptyState\">\n  <div class=\"bb-list bb-block bb-block--xl\">\n    <div class=\"bb-list__item\" *ngFor=\"let paymentsGroup of upcomingPayments; trackBy: trackPaymentsGroup\">\n      <bb-upcoming-payments-item-group\n        (paymentItemClick)=\"onPaymentItemClick($event)\"\n        [paymentsGroup]=\"paymentsGroup\"\n        (cancelPayment)=\"onCancelPayment($event)\"\n        data-role=\"upcoming-payment-group-item\"\n      ></bb-upcoming-payments-item-group>\n    </div>\n  </div>\n  <div class=\"bb-text-align-center\" *ngIf=\"hasMore || loading\">\n    <bb-load-button-ui\n      color=\"link\"\n      i18n=\"Load more payment|Load more button for loading more payments@@upcoming-payments.load.more\"\n      data-role=\"load-more-btn\"\n      [isLoading]=\"loading\"\n      [size]=\"loadMoreSize\"\n      [from]=\"loadMoreFrom\"\n      [totalCount]=\"totalCount\"\n      (paramChange)=\"loadMoreParamChange($event)\"\n    >\n      Load more\n    </bb-load-button-ui>\n  </div>\n</ng-container>\n<ng-template #emptyState>\n  <div class=\"bb-state-container\">\n    <bb-empty-state-ui\n      title=\"No Payments\"\n      i18n-title=\"@@upcoming-payments.no.payments.title\"\n      subtitle=\"You do not have any payments to be displayed.\"\n      i18n-subtitle=\"@@upcoming-payments.no.payments.subTitle\"\n      iconSize=\"xl\"\n      iconModifier=\"loans\"\n    ></bb-empty-state-ui>\n  </div>\n</ng-template>\n", components: [{ type: UpcomingPaymentsItemGroupComponent, selector: "bb-upcoming-payments-item-group", inputs: ["paymentsGroup"], outputs: ["paymentItemClick", "cancelPayment"] }, { type: i2__namespace$2.LoadButtonComponent, selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }, { type: i3__namespace$1.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i1__namespace$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: UpcomingPaymentsListComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-upcoming-payments-list',
                        templateUrl: 'upcoming-payments-list.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], propDecorators: { upcomingPayments: [{
                    type: i0.Input
                }], totalCount: [{
                    type: i0.Input
                }], loading: [{
                    type: i0.Input
                }], loadMoreFrom: [{
                    type: i0.Input
                }], loadMoreSize: [{
                    type: i0.Input
                }], paymentItemClick: [{
                    type: i0.Output
                }], loadMoreParam: [{
                    type: i0.Output
                }], cancelPayment: [{
                    type: i0.Output
                }] } });

    var PaymentActionsTypes;
    (function (PaymentActionsTypes) {
        PaymentActionsTypes["LoadPayments"] = "LoadPayments";
        PaymentActionsTypes["LoadMore"] = "LoadMore";
        PaymentActionsTypes["ReturnCachedData"] = "ReturnCachedPayments";
    })(PaymentActionsTypes || (PaymentActionsTypes = {}));

    var PaymentService = /** @class */ (function () {
        function PaymentService(paymentOrdersService) {
            var _this = this;
            this.paymentOrdersService = paymentOrdersService;
            this.loadMore$ = new rxjs.BehaviorSubject(undefined);
            this.loadPayments$ = new rxjs.ReplaySubject(1);
            this.returnCachedData$ = new rxjs.Subject();
            this.loadingSub$ = new rxjs.ReplaySubject(1);
            this.actingSub$ = new rxjs.ReplaySubject(1);
            this.totalCounts = { withExecutionDate: 0, withNextExecutionDate: 0 };
            /**
             * Observable flag that checks whether a payment is loading
             */
            this.loading$ = this.loadingSub$.pipe(operators.distinctUntilChanged());
            /**
             * Observable to check the payment type
             */
            this.acting$ = this.actingSub$.pipe(operators.distinctUntilChanged());
            this.paymentActions$ = rxjs.combineLatest([
                this.loadPayments$.pipe(operators.map(function (params) { return (Object.assign({ type: PaymentActionsTypes.LoadPayments }, params)); })),
                this.loadMore$.pipe(operators.map(function (from) { return ({ type: PaymentActionsTypes.LoadMore, from: from }); })),
            ]).pipe(operators.map(function (_b) {
                var _c = __read(_b, 2), state = _c[0], loadMore = _c[1];
                return (Object.assign(Object.assign({}, state), (loadMore.from ? loadMore : null)));
            }), operators.filter(function (action) { return action.type !== undefined; }));
            this.paymentState$ = rxjs.merge(this.paymentActions$, this.returnCachedData$.pipe(operators.map(function () { return ({ type: PaymentActionsTypes.ReturnCachedData }); }))).pipe(operators.switchMap(function (_a) {
                var type = _a.type, params = __rest(_a, ["type"]);
                if (type === PaymentActionsTypes.ReturnCachedData) {
                    return rxjs.of(_this.payments);
                }
                var isLoadMore = type === PaymentActionsTypes.LoadMore;
                _this.loadingSub$.next(true);
                return _this.combinePaymentCalls(params).pipe(operators.map(function (response) { return _this.handlePaymentSuccess(Object.assign(Object.assign({}, response), { isLoadMore: isLoadMore })); }), operators.finalize(function () { return _this.loadingSub$.next(false); }));
            }), operators.shareReplay());
        }
        Object.defineProperty(PaymentService.prototype, "payments$", {
            /**
             * Getter for the payments
             */
            get: function () {
                return this.paymentState$;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Loads the upcoming payments
         *
         * @returns
         */
        PaymentService.prototype.loadPayments = function (params) {
            this.loadPayments$.next(params);
        };
        /**
         * Loads more payments
         *
         * @param from Loads from value
         * @returns
         */
        PaymentService.prototype.loadMore = function (from) {
            this.loadMore$.next(from);
        };
        /**
         * Cancels a payment order
         *
         * @param paymentOrderId Payment order id
         * @param version Payment version
         */
        PaymentService.prototype.cancelPayment = function (paymentOrderId, version) {
            var _this = this;
            this.actingSub$.next(true);
            return this.paymentOrdersService
                .postCancelByPaymentOrderId({
                paymentOrderId: paymentOrderId,
                paymentOrderCancelPostRequest: { version: version },
            }, 'response')
                .pipe(operators.finalize(function () { return _this.actingSub$.next(false); }), operators.tap(function () {
                _this.handleCancelPaymentSuccess(paymentOrderId);
            }));
        };
        PaymentService.prototype.handleCancelPaymentSuccess = function (paymentOrderId) {
            if (this.payments) {
                var newItems = this.payments.items.filter(function (item) { return item.id !== paymentOrderId; });
                this.payments = {
                    items: newItems,
                    totalCount: this.payments.totalCount,
                };
                this.returnCachedData$.next();
            }
        };
        PaymentService.prototype.handlePaymentSuccess = function (payload) {
            var _a;
            var orders = [];
            if (payload.isLoadMore) {
                var existingPayments = ((_a = this.payments) === null || _a === void 0 ? void 0 : _a.items) || [];
                orders.push.apply(orders, __spreadArray([], __read(existingPayments)));
            }
            this.payments = {
                items: __spreadArray(__spreadArray([], __read(orders)), __read(payload.items)),
                totalCount: payload.totalCount || payload.items.length,
            };
            return this.payments;
        };
        PaymentService.prototype.fetchPayments = function (params) {
            return this.paymentOrdersService.getPaymentOrders(params, 'response').pipe(operators.map(function (response) {
                var totalCount = response.headers.get('x-total-count');
                return {
                    totalCount: Number(totalCount),
                    items: response.body || [],
                };
            }));
        };
        PaymentService.prototype.combinePaymentCalls = function (params) {
            /* Payment-order endpoint doesn't allow to make a call with both nextExecutionDateFrom and executionDateFrom parameters.
             * nextExecutionDateFrom is needed for recurring payments, executionDateFrom is needed for both recurring and one-off payments
             */
            if (params.nextExecutionDateFrom && params.executionDateFrom) {
                return this.handleMultipleCalls(params);
            }
            else {
                return this.fetchPayments(params);
            }
        };
        PaymentService.prototype.handleMultipleCalls = function (params) {
            var _this = this;
            var nextExecutionDateFrom = params.nextExecutionDateFrom, executionDateFrom = params.executionDateFrom, size = params.size, others = __rest(params, ["nextExecutionDateFrom", "executionDateFrom", "size"]);
            var sizePerCall = (size || 0) / 2; // Divide pageSize with 2 because there will be two calls
            var callWithNextExecution = this.fetchPayments(Object.assign(Object.assign({}, others), { nextExecutionDateFrom: nextExecutionDateFrom, size: sizePerCall }));
            var callWithExecution = this.fetchPayments(Object.assign(Object.assign({}, others), { executionDateFrom: executionDateFrom, size: sizePerCall }));
            var hasMore = function (totalCount) { return ((params === null || params === void 0 ? void 0 : params.from) || 0) * sizePerCall < totalCount; };
            var mapPaymentCalls = function (call, totalCount) {
                return hasMore(totalCount) ? call : rxjs.of({ items: [], totalCount: totalCount });
            };
            if (params.from && params.from > 0) {
                callWithNextExecution = mapPaymentCalls(callWithNextExecution, this.totalCounts.withNextExecutionDate);
                callWithExecution = mapPaymentCalls(callWithExecution, this.totalCounts.withExecutionDate);
            }
            return rxjs.combineLatest([callWithExecution, callWithNextExecution]).pipe(operators.map(function (_b) {
                var _c = __read(_b, 2), firstCall = _c[0], secondCall = _c[1];
                var items = __spreadArray(__spreadArray([], __read(firstCall.items)), __read(secondCall.items));
                _this.totalCounts = {
                    withExecutionDate: firstCall.totalCount,
                    withNextExecutionDate: secondCall.totalCount,
                };
                return {
                    // Take highest value by multiplying it in order to produce load-more button logic correctly
                    totalCount: Math.max(firstCall.totalCount, secondCall.totalCount) * 2,
                    items: unifyItems(sortItems(items, params.direction || 'DESC')),
                };
            }));
        };
        return PaymentService;
    }());
    /** @nocollapse */ PaymentService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentService, deps: [{ token: i1__namespace$2.PaymentOrdersHttpService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ PaymentService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace$2.PaymentOrdersHttpService }]; } });

    var PaymentsListContainerComponent = /** @class */ (function () {
        function PaymentsListContainerComponent(journeyDataService, configService, notificationService, communicatonService) {
            this.journeyDataService = journeyDataService;
            this.configService = configService;
            this.notificationService = notificationService;
            this.communicatonService = communicatonService;
            this.openConfirmation = false;
            this.loadMoreFrom = 0;
            this.acting$ = this.journeyDataService.acting$;
            this.loading$ = this.journeyDataService.loading$;
            this.destroy$ = new rxjs.Subject();
            /**
             * Flag if component is rendering history payments
             */
            this.isHistoryPayments = false;
        }
        Object.defineProperty(PaymentsListContainerComponent.prototype, "pageSize", {
            get: function () {
                return this.isHistoryPayments
                    ? this.configService.historyPaymentParams.size
                    : this.configService.upcomingPaymentParams.size;
            },
            enumerable: false,
            configurable: true
        });
        PaymentsListContainerComponent.prototype.ngOnInit = function () {
            var _this = this;
            var _a;
            this.payments$ = (_a = this.payments$) === null || _a === void 0 ? void 0 : _a.pipe(operators.catchError(function (error) {
                _this.error = error;
                return rxjs.of(undefined);
            }));
        };
        PaymentsListContainerComponent.prototype.ngOnDestroy = function () {
            this.destroy$.next();
            this.destroy$.complete();
        };
        PaymentsListContainerComponent.prototype.onPaymentItemClick = function (selectedPaymentItem) {
            this.selectedPaymentItem = selectedPaymentItem;
        };
        PaymentsListContainerComponent.prototype.onLoadMoreParam = function (params) {
            this.journeyDataService.loadMore(params.from);
            this.loadMoreFrom = this.loadMoreFrom + 1;
        };
        PaymentsListContainerComponent.prototype.onConfirmCancelPayment = function (confirmed) {
            var _this = this;
            var _a, _b;
            this.openConfirmation = false;
            var paymentItem = this.paymentItemToCancel;
            this.paymentItemToCancel = undefined;
            if (!confirmed) {
                return;
            }
            this.selectedPaymentItem = undefined;
            if (paymentItem) {
                var creditorName_1 = (_b = (_a = paymentItem.transferTransactionInformation) === null || _a === void 0 ? void 0 : _a.counterparty) === null || _b === void 0 ? void 0 : _b.name;
                var isRecurring_1 = this.isRecurringPayment(paymentItem);
                this.journeyDataService
                    .cancelPayment(paymentItem.id, paymentItem.version)
                    .pipe(operators.takeUntil(this.destroy$))
                    .subscribe(function () {
                    _this.showNotification(true, {
                        header: $localize(templateObject_1$1 || (templateObject_1$1 = __makeTemplateObject([":@@upcoming-payments-cancel-success-header:Payment cancelled"], [":@@upcoming-payments-cancel-success-header:Payment cancelled"]))),
                        message: isRecurring_1
                            ? $localize(templateObject_2 || (templateObject_2 = __makeTemplateObject([":@@upcoming-payments-cancel-success-msg-recurring:Recurring payment to \"", "\" has been cancelled successfully."], [":@@upcoming-payments-cancel-success-msg-recurring:Recurring payment to \"", "\" has been cancelled successfully."])), creditorName_1) : $localize(templateObject_3 || (templateObject_3 = __makeTemplateObject([":@@upcoming-payments-cancel-success-msg:Upcoming payment to \"", "\" has been cancelled successfully."], [":@@upcoming-payments-cancel-success-msg:Upcoming payment to \"", "\" has been cancelled successfully."])), creditorName_1),
                    });
                }, function () {
                    _this.showNotification(false, {
                        header: $localize(templateObject_4 || (templateObject_4 = __makeTemplateObject([":@@upcoming-payments-cancel-fail-header:Failed to Cancel Payment!"], [":@@upcoming-payments-cancel-fail-header:Failed to Cancel Payment!"]))),
                        message: $localize(templateObject_5 || (templateObject_5 = __makeTemplateObject([":@@upcoming-payments-cancel-fail-msg:Failed to cancel The payment to \"", "\"."], [":@@upcoming-payments-cancel-fail-msg:Failed to cancel The payment to \"", "\"."])), creditorName_1),
                    });
                });
            }
        };
        PaymentsListContainerComponent.prototype.showNotification = function (success, notification) {
            this.notificationService.showNotification(Object.assign({ dismissible: true, ttl: this.configService.notificationDismissTime, modifier: success ? 'success' : 'error' }, notification));
        };
        PaymentsListContainerComponent.prototype.isRecurringPayment = function (payment) {
            return (payment === null || payment === void 0 ? void 0 : payment.paymentMode) === 'RECURRING';
        };
        PaymentsListContainerComponent.prototype.onCloseDetails = function () {
            this.selectedPaymentItem = undefined;
        };
        PaymentsListContainerComponent.prototype.onCancelPayment = function (paymentItem) {
            this.paymentItemToCancel = paymentItem;
            this.openConfirmation = true;
        };
        PaymentsListContainerComponent.prototype.onEditPayment = function (payment) {
            var _a;
            (_a = this.communicatonService) === null || _a === void 0 ? void 0 : _a.navigateToEditPayment(payment);
        };
        return PaymentsListContainerComponent;
    }());
    /** @nocollapse */ PaymentsListContainerComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentsListContainerComponent, deps: [{ token: PaymentService }, { token: ManageUpcomingAndHistoricalPaymentsJourneyConfigService }, { token: i3__namespace$2.NotificationService }, { token: CommunicationService, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ PaymentsListContainerComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PaymentsListContainerComponent, selector: "bb-payments-list-container", inputs: { payments$: "payments$", isHistoryPayments: "isHistoryPayments" }, ngImport: i0__namespace, template: "<ng-container *ngIf=\"!error; else errorState\">\n  <ng-container *ngIf=\"payments$ | async as payments; else loadingPayments\">\n    <bb-upcoming-payments-list\n      *ngIf=\"!(acting$ | async); else acting\"\n      [upcomingPayments]=\"payments?.items\"\n      [totalCount]=\"payments?.totalCount\"\n      [loadMoreSize]=\"pageSize\"\n      [loadMoreFrom]=\"loadMoreFrom\"\n      [loading]=\"loading$ | async\"\n      (paymentItemClick)=\"onPaymentItemClick($event)\"\n      (loadMoreParam)=\"onLoadMoreParam($event)\"\n      (cancelPayment)=\"onCancelPayment($event)\"\n    ></bb-upcoming-payments-list>\n\n    <ng-template #acting>\n      <bb-loading-indicator-ui\n        text=\"updating data...\"\n        i18n-text=\"@@bb-upcoming-and-history-payments-journey.payment-list-container.acting-placeholder\"\n      ></bb-loading-indicator-ui>\n    </ng-template>\n\n    <bb-upcoming-payments-cancel-payment-confirmation\n      *ngIf=\"openConfirmation\"\n      [isOpen]=\"openConfirmation\"\n      [isRecurring]=\"isRecurringPayment(paymentItemToCancel)\"\n      (cancelPayment)=\"onConfirmCancelPayment(true)\"\n      (keepPayment)=\"onConfirmCancelPayment(false)\"\n    ></bb-upcoming-payments-cancel-payment-confirmation>\n\n    <bb-upcoming-payments-details\n      *ngIf=\"selectedPaymentItem\"\n      [isOpen]=\"!!selectedPaymentItem\"\n      (close)=\"onCloseDetails()\"\n      [payment]=\"selectedPaymentItem\"\n      [config]=\"configService\"\n      (cancelPayment)=\"onCancelPayment(selectedPaymentItem)\"\n      (editPayment)=\"onEditPayment(selectedPaymentItem)\"\n    ></bb-upcoming-payments-details>\n  </ng-container>\n</ng-container>\n\n<ng-template #loadingPayments>\n  <bb-loading-indicator-ui\n    text=\"Loading data...\"\n    text-i18n=\"@@bb-upcoming-and-history-payments-journey.payment-list-container.loading-placeholder\"\n  ></bb-loading-indicator-ui>\n</ng-template>\n\n<ng-template #errorState>\n  <div class=\"bb-state-container\">\n    <bb-empty-state-ui\n      i18n-title=\"@@upcoming-payments.history.error.generic.title\"\n      title=\"Page couldn't load\"\n      i18n-subtitle=\"@@upcoming-payments.history.error.generic.subtitle\"\n      subtitle=\"Try to reload the page or contact the system administrator.\"\n      iconSize=\"xxl\"\n      iconModifier=\"error\"\n    ></bb-empty-state-ui>\n  </div>\n</ng-template>\n", components: [{ type: UpcomingPaymentsListComponent, selector: "bb-upcoming-payments-list", inputs: ["upcomingPayments", "totalCount", "loading", "loadMoreFrom", "loadMoreSize"], outputs: ["paymentItemClick", "loadMoreParam", "cancelPayment"] }, { type: i6__namespace.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: UpcomingPaymentsCancelPaymentConfirmationComponent, selector: "bb-upcoming-payments-cancel-payment-confirmation", inputs: ["isOpen", "isRecurring"], outputs: ["keepPayment", "cancelPayment"] }, { type: UpcomingPaymentsDetailsComponent, selector: "bb-upcoming-payments-details", inputs: ["isOpen", "payment", "config"], outputs: ["cancelPayment", "close", "editPayment"] }, { type: i3__namespace$1.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i1__namespace$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i1__namespace$1.AsyncPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentsListContainerComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-payments-list-container',
                        templateUrl: 'payments-list-container.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () {
            return [{ type: PaymentService }, { type: ManageUpcomingAndHistoricalPaymentsJourneyConfigService }, { type: i3__namespace$2.NotificationService }, { type: CommunicationService, decorators: [{
                            type: i0.Optional
                        }] }];
        }, propDecorators: { payments$: [{
                    type: i0.Input
                }], isHistoryPayments: [{
                    type: i0.Input
                }] } });
    var templateObject_1$1, templateObject_2, templateObject_3, templateObject_4, templateObject_5;

    var ManageUpcomingAndHistoricalPaymentsJourneyComponent = /** @class */ (function () {
        function ManageUpcomingAndHistoricalPaymentsJourneyComponent(configService) {
            this.configService = configService;
        }
        Object.defineProperty(ManageUpcomingAndHistoricalPaymentsJourneyComponent.prototype, "title", {
            get: function () {
                return $localize(templateObject_1 || (templateObject_1 = __makeTemplateObject([":@@upcoming-history-payments-journey-title:", ""], [":@@upcoming-history-payments-journey-title:", ""])), this.configService.journeyTitle);
            },
            enumerable: false,
            configurable: true
        });
        return ManageUpcomingAndHistoricalPaymentsJourneyComponent;
    }());
    /** @nocollapse */ ManageUpcomingAndHistoricalPaymentsJourneyComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManageUpcomingAndHistoricalPaymentsJourneyComponent, deps: [{ token: ManageUpcomingAndHistoricalPaymentsJourneyConfigService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ ManageUpcomingAndHistoricalPaymentsJourneyComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ManageUpcomingAndHistoricalPaymentsJourneyComponent, selector: "bb-manage-upcoming-and-historical-payments-journey", ngImport: i0__namespace, template: "\n    <ng-container>\n      <bb-header-ui\n        headingType=\"h2\"\n        headingClasses=\"bb-heading-1 bb-block bb-block--xl\"\n        [heading]=\"title\"\n        i18n-heading=\"@@upcoming-and-history-payments-journey.header\"\n      ></bb-header-ui>\n      <router-outlet></router-outlet>\n    </ng-container>\n  ", isInline: true, components: [{ type: i2__namespace$3.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }], directives: [{ type: i1__namespace$3.RouterOutlet, selector: "router-outlet", outputs: ["activate", "deactivate"], exportAs: ["outlet"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManageUpcomingAndHistoricalPaymentsJourneyComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-manage-upcoming-and-historical-payments-journey',
                        template: "\n    <ng-container>\n      <bb-header-ui\n        headingType=\"h2\"\n        headingClasses=\"bb-heading-1 bb-block bb-block--xl\"\n        [heading]=\"title\"\n        i18n-heading=\"@@upcoming-and-history-payments-journey.header\"\n      ></bb-header-ui>\n      <router-outlet></router-outlet>\n    </ng-container>\n  ",
                    }]
            }], ctorParameters: function () { return [{ type: ManageUpcomingAndHistoricalPaymentsJourneyConfigService }]; } });
    var templateObject_1;

    var ManageUpcomingAndHistoricalPaymentsNavigationService = /** @class */ (function () {
        function ManageUpcomingAndHistoricalPaymentsNavigationService(router, route) {
            this.router = router;
            this.route = route;
        }
        /**
         * Navigation to history payments view tab
         */
        ManageUpcomingAndHistoricalPaymentsNavigationService.prototype.navigateToHistory = function (extras) {
            this.router.navigate(['history'], Object.assign({ relativeTo: this.route }, (extras || {})));
        };
        /**
         * Navigation to upcoming payments view tab
         */
        ManageUpcomingAndHistoricalPaymentsNavigationService.prototype.navigateToUpcoming = function (extras) {
            this.router.navigate(['upcoming'], Object.assign({ relativeTo: this.route }, (extras || {})));
        };
        /**
         * Method to return correct tab index in order to activate it
         */
        ManageUpcomingAndHistoricalPaymentsNavigationService.prototype.mapRouteToTabIndex = function () {
            var routeSections = this.router.url.split('/');
            return routeSections[routeSections.length - 1] === 'history' ? 1 : 0;
        };
        return ManageUpcomingAndHistoricalPaymentsNavigationService;
    }());
    /** @nocollapse */ ManageUpcomingAndHistoricalPaymentsNavigationService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManageUpcomingAndHistoricalPaymentsNavigationService, deps: [{ token: i1__namespace$3.Router }, { token: i1__namespace$3.ActivatedRoute }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ ManageUpcomingAndHistoricalPaymentsNavigationService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManageUpcomingAndHistoricalPaymentsNavigationService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManageUpcomingAndHistoricalPaymentsNavigationService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace$3.Router }, { type: i1__namespace$3.ActivatedRoute }]; } });

    var HistoryPaymentsViewComponent = /** @class */ (function () {
        function HistoryPaymentsViewComponent(dataService, config) {
            this.dataService = dataService;
            this.config = config;
            this.payments$ = this.dataService.payments$.pipe(operators.map(function (payload) { return payload && {
                items: mapPaymentOrdersToUpcomingPayments(payload.items),
                totalCount: payload.totalCount,
            }; }));
        }
        HistoryPaymentsViewComponent.prototype.ngOnInit = function () {
            this.dataService.loadPayments(this.config.historyPaymentParams);
        };
        return HistoryPaymentsViewComponent;
    }());
    /** @nocollapse */ HistoryPaymentsViewComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: HistoryPaymentsViewComponent, deps: [{ token: PaymentService }, { token: ManageUpcomingAndHistoricalPaymentsJourneyConfigService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ HistoryPaymentsViewComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: HistoryPaymentsViewComponent, selector: "bb-history-payments-view", providers: [PaymentService], ngImport: i0__namespace, template: "\n    <div class=\"card card-body\">\n      <bb-payments-list-container [payments$]=\"payments$\" [isHistoryPayments]=\"true\"> </bb-payments-list-container>\n    </div>\n  ", isInline: true, components: [{ type: PaymentsListContainerComponent, selector: "bb-payments-list-container", inputs: ["payments$", "isHistoryPayments"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: HistoryPaymentsViewComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-history-payments-view',
                        template: "\n    <div class=\"card card-body\">\n      <bb-payments-list-container [payments$]=\"payments$\" [isHistoryPayments]=\"true\"> </bb-payments-list-container>\n    </div>\n  ",
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        providers: [PaymentService],
                    }]
            }], ctorParameters: function () { return [{ type: PaymentService }, { type: ManageUpcomingAndHistoricalPaymentsJourneyConfigService }]; } });

    var UpcomingAndHistoryPaymentsTabContainerViewComponent = /** @class */ (function () {
        function UpcomingAndHistoryPaymentsTabContainerViewComponent(navigationService, route) {
            this.navigationService = navigationService;
            this.route = route;
            this.initialTabSelection = 0;
        }
        UpcomingAndHistoryPaymentsTabContainerViewComponent.prototype.ngOnInit = function () {
            this.initialTabSelection = this.navigationService.mapRouteToTabIndex();
        };
        UpcomingAndHistoryPaymentsTabContainerViewComponent.prototype.onTabSelect = function (tabIndex) {
            if (tabIndex === 0) {
                this.navigationService.navigateToUpcoming({ relativeTo: this.route });
            }
            else {
                this.navigationService.navigateToHistory({ relativeTo: this.route });
            }
        };
        return UpcomingAndHistoryPaymentsTabContainerViewComponent;
    }());
    /** @nocollapse */ UpcomingAndHistoryPaymentsTabContainerViewComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: UpcomingAndHistoryPaymentsTabContainerViewComponent, deps: [{ token: ManageUpcomingAndHistoricalPaymentsNavigationService }, { token: i1__namespace$3.ActivatedRoute }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ UpcomingAndHistoryPaymentsTabContainerViewComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: UpcomingAndHistoryPaymentsTabContainerViewComponent, selector: "bb-upcoming-and-history-payments-tab-container-view", ngImport: i0__namespace, template: "<bb-tab-group-ui\n  [initialSelection]=\"initialTabSelection\"\n  (select)=\"onTabSelect($event)\"\n  class=\"bb-upcoming-payments-tab-container\"\n>\n  <bb-tab-ui i18n=\"@@bb-upcoming-and-history-payments-journey.upcoming-tab\">Schedule</bb-tab-ui>\n  <bb-tab-ui i18n=\"@@bb-upcoming-and-history-payments-journey.history-tab\">History</bb-tab-ui>\n</bb-tab-group-ui>\n\n<router-outlet></router-outlet>\n", components: [{ type: i3__namespace$3.TabGroupComponent, selector: "bb-tab-group-ui", inputs: ["initialSelection"], outputs: ["select"] }, { type: i3__namespace$3.TabComponent, selector: "bb-tab-ui" }], directives: [{ type: i1__namespace$3.RouterOutlet, selector: "router-outlet", outputs: ["activate", "deactivate"], exportAs: ["outlet"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: UpcomingAndHistoryPaymentsTabContainerViewComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-upcoming-and-history-payments-tab-container-view',
                        templateUrl: 'upcoming-and-history-payments-tab-container-view.component.html',
                    }]
            }], ctorParameters: function () { return [{ type: ManageUpcomingAndHistoricalPaymentsNavigationService }, { type: i1__namespace$3.ActivatedRoute }]; } });

    var UpcomingPaymentsViewComponent = /** @class */ (function () {
        function UpcomingPaymentsViewComponent(dataService, config) {
            this.dataService = dataService;
            this.config = config;
            this.payments$ = this.dataService.payments$.pipe(operators.map(function (payload) { return payload && {
                items: mapPaymentOrdersToUpcomingPayments(payload.items),
                totalCount: payload.totalCount,
            }; }));
        }
        UpcomingPaymentsViewComponent.prototype.ngOnInit = function () {
            this.dataService.loadPayments(this.config.upcomingPaymentParams);
        };
        return UpcomingPaymentsViewComponent;
    }());
    /** @nocollapse */ UpcomingPaymentsViewComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: UpcomingPaymentsViewComponent, deps: [{ token: PaymentService }, { token: ManageUpcomingAndHistoricalPaymentsJourneyConfigService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ UpcomingPaymentsViewComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: UpcomingPaymentsViewComponent, selector: "bb-upcoming-payments-view", providers: [PaymentService], ngImport: i0__namespace, template: "\n    <div class=\"card card-body\">\n      <bb-payments-list-container [payments$]=\"payments$\"></bb-payments-list-container>\n    </div>\n  ", isInline: true, components: [{ type: PaymentsListContainerComponent, selector: "bb-payments-list-container", inputs: ["payments$", "isHistoryPayments"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: UpcomingPaymentsViewComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-upcoming-payments-view',
                        template: "\n    <div class=\"card card-body\">\n      <bb-payments-list-container [payments$]=\"payments$\"></bb-payments-list-container>\n    </div>\n  ",
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        providers: [PaymentService],
                    }]
            }], ctorParameters: function () { return [{ type: PaymentService }, { type: ManageUpcomingAndHistoricalPaymentsJourneyConfigService }]; } });

    var defaultRoute = {
        path: '',
        component: ManageUpcomingAndHistoricalPaymentsJourneyComponent,
        children: [
            {
                path: '',
                component: UpcomingPaymentsViewComponent,
            },
        ],
    };
    var components = [
        ManageUpcomingAndHistoricalPaymentsJourneyComponent,
        UpcomingPaymentsViewComponent,
        HistoryPaymentsViewComponent,
        UpcomingAndHistoryPaymentsTabContainerViewComponent,
        PaymentsListContainerComponent,
        UpcomingPaymentsListComponent,
        UpcomingPaymentsItemGroupComponent,
        UpcomingPaymentsItemComponent,
        UpcomingPaymentsDetailsComponent,
        UpcomingPaymentsDetailsListComponent,
        UpcomingPaymentsCancelPaymentConfirmationComponent,
    ];
    var uiModules = [
        i3$3.TabModule,
        i2$1.IconModule,
        i3.AmountModule,
        i2$2.LoadButtonModule,
        i3$1.EmptyStateModule,
        i6.LoadingIndicatorModule,
        i1.ModalModule,
        i8.ButtonModule,
        i2$3.HeaderModule,
        i2.PaymentCardNumberModule,
        i7.TooltipModule,
        i5.EllipsisModule,
        i4.BadgeModule,
    ];
    var ManageUpcomingAndHistoricalPaymentsJourneyModule = /** @class */ (function () {
        function ManageUpcomingAndHistoricalPaymentsJourneyModule() {
        }
        ManageUpcomingAndHistoricalPaymentsJourneyModule.forRoot = function (data) {
            if (data === void 0) { data = { route: defaultRoute }; }
            return {
                ngModule: ManageUpcomingAndHistoricalPaymentsJourneyModule,
                providers: [i1$3.provideRoutes([data.route])],
            };
        };
        return ManageUpcomingAndHistoricalPaymentsJourneyModule;
    }());
    /** @nocollapse */ ManageUpcomingAndHistoricalPaymentsJourneyModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManageUpcomingAndHistoricalPaymentsJourneyModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ ManageUpcomingAndHistoricalPaymentsJourneyModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManageUpcomingAndHistoricalPaymentsJourneyModule, declarations: [ManageUpcomingAndHistoricalPaymentsJourneyComponent,
            UpcomingPaymentsViewComponent,
            HistoryPaymentsViewComponent,
            UpcomingAndHistoryPaymentsTabContainerViewComponent,
            PaymentsListContainerComponent,
            UpcomingPaymentsListComponent,
            UpcomingPaymentsItemGroupComponent,
            UpcomingPaymentsItemComponent,
            UpcomingPaymentsDetailsComponent,
            UpcomingPaymentsDetailsListComponent,
            UpcomingPaymentsCancelPaymentConfirmationComponent], imports: [i1$1.CommonModule,
            i1$3.RouterModule, i1__namespace$4.BackbaseCoreModule, i3$3.TabModule,
            i2$1.IconModule,
            i3.AmountModule,
            i2$2.LoadButtonModule,
            i3$1.EmptyStateModule,
            i6.LoadingIndicatorModule,
            i1.ModalModule,
            i8.ButtonModule,
            i2$3.HeaderModule,
            i2.PaymentCardNumberModule,
            i7.TooltipModule,
            i5.EllipsisModule,
            i4.BadgeModule], exports: [i3$3.TabModule,
            i2$1.IconModule,
            i3.AmountModule,
            i2$2.LoadButtonModule,
            i3$1.EmptyStateModule,
            i6.LoadingIndicatorModule,
            i1.ModalModule,
            i8.ButtonModule,
            i2$3.HeaderModule,
            i2.PaymentCardNumberModule,
            i7.TooltipModule,
            i5.EllipsisModule,
            i4.BadgeModule, ManageUpcomingAndHistoricalPaymentsJourneyComponent,
            UpcomingPaymentsViewComponent,
            HistoryPaymentsViewComponent,
            UpcomingAndHistoryPaymentsTabContainerViewComponent,
            PaymentsListContainerComponent,
            UpcomingPaymentsListComponent,
            UpcomingPaymentsItemGroupComponent,
            UpcomingPaymentsItemComponent,
            UpcomingPaymentsDetailsComponent,
            UpcomingPaymentsDetailsListComponent,
            UpcomingPaymentsCancelPaymentConfirmationComponent] });
    /** @nocollapse */ ManageUpcomingAndHistoricalPaymentsJourneyModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManageUpcomingAndHistoricalPaymentsJourneyModule, providers: [
            ManageUpcomingAndHistoricalPaymentsJourneyConfigService,
            ManageUpcomingAndHistoricalPaymentsNavigationService,
        ], imports: [__spreadArray([
                i1$1.CommonModule,
                i1$3.RouterModule,
                i1$4.BackbaseCoreModule.withConfig({
                    classMap: {
                        ManageUpcomingAndHistoricalPaymentsJourneyComponent: ManageUpcomingAndHistoricalPaymentsJourneyComponent,
                    },
                })
            ], __read(uiModules)), i3$3.TabModule,
            i2$1.IconModule,
            i3.AmountModule,
            i2$2.LoadButtonModule,
            i3$1.EmptyStateModule,
            i6.LoadingIndicatorModule,
            i1.ModalModule,
            i8.ButtonModule,
            i2$3.HeaderModule,
            i2.PaymentCardNumberModule,
            i7.TooltipModule,
            i5.EllipsisModule,
            i4.BadgeModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManageUpcomingAndHistoricalPaymentsJourneyModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: __spreadArray([], __read(components)),
                        imports: __spreadArray([
                            i1$1.CommonModule,
                            i1$3.RouterModule,
                            i1$4.BackbaseCoreModule.withConfig({
                                classMap: {
                                    ManageUpcomingAndHistoricalPaymentsJourneyComponent: ManageUpcomingAndHistoricalPaymentsJourneyComponent,
                                },
                            })
                        ], __read(uiModules)),
                        providers: [
                            ManageUpcomingAndHistoricalPaymentsJourneyConfigService,
                            ManageUpcomingAndHistoricalPaymentsNavigationService,
                        ],
                        exports: __spreadArray(__spreadArray([], __read(uiModules)), __read(components)),
                    }]
            }] });

    // Services

    /**
     * Generated bundle index. Do not edit.
     */

    exports.HistoryPaymentsViewComponent = HistoryPaymentsViewComponent;
    exports.ManageUpcomingAndHistoricalPaymentsCommunicationService = CommunicationService;
    exports.ManageUpcomingAndHistoricalPaymentsJourneyComponent = ManageUpcomingAndHistoricalPaymentsJourneyComponent;
    exports.ManageUpcomingAndHistoricalPaymentsJourneyConfigService = ManageUpcomingAndHistoricalPaymentsJourneyConfigService;
    exports.ManageUpcomingAndHistoricalPaymentsJourneyConfigurationToken = ManageUpcomingAndHistoricalPaymentsJourneyConfigurationToken;
    exports.ManageUpcomingAndHistoricalPaymentsJourneyModule = ManageUpcomingAndHistoricalPaymentsJourneyModule;
    exports.ManageUpcomingAndHistoricalPaymentsNavigationService = ManageUpcomingAndHistoricalPaymentsNavigationService;
    exports.PaymentService = PaymentService;
    exports.UpcomingAndHistoryPaymentsTabContainerViewComponent = UpcomingAndHistoryPaymentsTabContainerViewComponent;
    exports.UpcomingPaymentsViewComponent = UpcomingPaymentsViewComponent;
    exports["ӨPaymentsListContainerComponent"] = PaymentsListContainerComponent;
    exports["ӨUpcomingPaymentsCancelPaymentConfirmationComponent"] = UpcomingPaymentsCancelPaymentConfirmationComponent;
    exports["ӨUpcomingPaymentsDetailsComponent"] = UpcomingPaymentsDetailsComponent;
    exports["ӨUpcomingPaymentsDetailsListComponent"] = UpcomingPaymentsDetailsListComponent;
    exports["ӨUpcomingPaymentsItemComponent"] = UpcomingPaymentsItemComponent;
    exports["ӨUpcomingPaymentsItemGroupComponent"] = UpcomingPaymentsItemGroupComponent;
    exports["ӨUpcomingPaymentsListComponent"] = UpcomingPaymentsListComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-manage-upcoming-and-historical-payments-journey-ang.umd.js.map
