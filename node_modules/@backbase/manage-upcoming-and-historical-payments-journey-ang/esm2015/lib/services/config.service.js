import { Inject, Injectable, Optional } from '@angular/core';
import { getDateOnly } from '../helpers/utils';
import { ManageUpcomingAndHistoricalPaymentsJourneyConfigurationToken, } from '../models/config.model';
import * as i0 from "@angular/core";
const configDefaults = {
    notificationDismissTime: 3000,
    maskAccounts: false,
    upcomingPaymentParams: {
        orderBy: 'requestedExecutionDate',
        direction: 'ASC',
        status: ['ACCEPTED'],
        executionDateFrom: getDateOnly(),
        nextExecutionDateFrom: getDateOnly(),
        from: 0,
        size: 50,
    },
    historyPaymentParams: {
        orderBy: 'requestedExecutionDate',
        direction: 'DESC',
        status: ['CANCELLED', 'REJECTED', 'PROCESSED'],
        from: 0,
        size: 50,
    },
    paymentTypeInfoTexts: {
        INTERNAL_TRANSFER: 'Internal account transfer',
        INTRABANK_TRANSFER: 'Pay someone using account number',
        P2P_TRANSFER: 'Pay someone using mobile number or email address',
    },
    journeyTitle: 'Scheduled Transfers',
    uiComponentProps: {
        mapCurrency: true,
    },
};
export class ManageUpcomingAndHistoricalPaymentsJourneyConfigService {
    constructor(config) {
        this.config = config;
        this._config = Object.assign(Object.assign({}, configDefaults), (this.config || {}));
    }
    get defaults() {
        return configDefaults;
    }
    get notificationDismissTime() {
        return this._config.notificationDismissTime;
    }
    get maskAccounts() {
        return this._config.maskAccounts;
    }
    get historyPaymentParams() {
        return this._config.historyPaymentParams;
    }
    get upcomingPaymentParams() {
        return this._config.upcomingPaymentParams;
    }
    get paymentTypeInfoTexts() {
        return this._config.paymentTypeInfoTexts;
    }
    get journeyTitle() {
        return this._config.journeyTitle;
    }
    get uiComponentProps() {
        return this._config.uiComponentProps;
    }
}
/** @nocollapse */ ManageUpcomingAndHistoricalPaymentsJourneyConfigService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManageUpcomingAndHistoricalPaymentsJourneyConfigService, deps: [{ token: ManageUpcomingAndHistoricalPaymentsJourneyConfigurationToken, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ ManageUpcomingAndHistoricalPaymentsJourneyConfigService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManageUpcomingAndHistoricalPaymentsJourneyConfigService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManageUpcomingAndHistoricalPaymentsJourneyConfigService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [ManageUpcomingAndHistoricalPaymentsJourneyConfigurationToken]
                }] }]; } });
//# sourceMappingURL=config.service.js.map