{"version":3,"file":"upcoming-payments-view.component.js","sourceRoot":"","sources":["../../../../../../../libs/manage-upcoming-and-historical-payments-journey/src/lib/views/upcoming-payments-view/upcoming-payments-view.component.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,uBAAuB,EAAE,SAAS,EAAU,MAAM,eAAe,CAAC;AAE3E,OAAO,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AACrC,OAAO,EAAE,kCAAkC,EAAE,MAAM,uBAAuB,CAAC;AAE3E,OAAO,EAAE,uDAAuD,IAAI,aAAa,EAAE,MAAM,+BAA+B,CAAC;AACzH,OAAO,EAAE,cAAc,EAAE,MAAM,iCAAiC,CAAC;;;;;AAYjE,MAAM,OAAO,6BAA6B;IAWxC,YAA6B,WAA2B,EAAmB,MAAqB;QAAnE,gBAAW,GAAX,WAAW,CAAgB;QAAmB,WAAM,GAAN,MAAM,CAAe;QAVvF,cAAS,GAAG,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,CAClD,GAAG,CACD,OAAO,CAAC,EAAE,CACR,OAAO,IAAI;YACT,KAAK,EAAE,kCAAkC,CAAC,OAAO,CAAC,KAAK,CAAC;YACxD,UAAU,EAAE,OAAO,CAAC,UAAU;SAC/B,CACJ,CACiD,CAAC;IAE8C,CAAC;IAEpG,QAAQ;QACN,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,qBAAqB,CAAC,CAAC;IACnE,CAAC;;8IAfU,6BAA6B;kIAA7B,6BAA6B,oDAF7B,CAAC,cAAc,CAAC,0BANjB;;;;GAIT;4FAIU,6BAA6B;kBAVzC,SAAS;mBAAC;oBACT,QAAQ,EAAE,2BAA2B;oBACrC,QAAQ,EAAE;;;;GAIT;oBACD,eAAe,EAAE,uBAAuB,CAAC,MAAM;oBAC/C,SAAS,EAAE,CAAC,cAAc,CAAC;iBAC5B","sourcesContent":["import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { mapPaymentOrdersToUpcomingPayments } from '../../helpers/mappers';\nimport { UpcomingPaymentResponse } from '../../models/payments.model';\nimport { ManageUpcomingAndHistoricalPaymentsJourneyConfigService as ConfigService } from '../../services/config.service';\nimport { PaymentService } from '../../services/payments.service';\n\n@Component({\n  selector: 'bb-upcoming-payments-view',\n  template: `\n    <div class=\"card card-body\">\n      <bb-payments-list-container [payments$]=\"payments$\"></bb-payments-list-container>\n    </div>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [PaymentService],\n})\nexport class UpcomingPaymentsViewComponent implements OnInit {\n  readonly payments$ = this.dataService.payments$.pipe(\n    map(\n      payload =>\n        payload && {\n          items: mapPaymentOrdersToUpcomingPayments(payload.items),\n          totalCount: payload.totalCount,\n        },\n    ),\n  ) as Observable<UpcomingPaymentResponse | undefined>;\n\n  constructor(private readonly dataService: PaymentService, private readonly config: ConfigService) {}\n\n  ngOnInit() {\n    this.dataService.loadPayments(this.config.upcomingPaymentParams);\n  }\n}\n"]}