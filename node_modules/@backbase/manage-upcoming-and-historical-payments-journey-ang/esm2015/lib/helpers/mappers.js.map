{"version":3,"file":"mappers.js","sourceRoot":"","sources":["../../../../../../libs/manage-upcoming-and-historical-payments-journey/src/lib/helpers/mappers.ts"],"names":[],"mappings":"AAAA,OAAO,EAA0B,MAAM,EAAE,MAAM,kCAAkC,CAAC;AAElF,OAAO,EAAE,gBAAgB,EAAE,gBAAgB,EAAE,MAAM,aAAa,CAAC;AAEjE,MAAM,CAAC,MAAM,kCAAkC,GAAG,CAAC,QAAkC,EAA2B,EAAE;IAChH,OAAO,QAAQ,CAAC,MAAM,CAA0B,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE;;QAC5D,MAAM,aAAa,GAAG,CAAA,MAAA,IAAI,CAAC,QAAQ,0CAAE,iBAAiB,KAAI,IAAI,CAAC,sBAAsB,IAAI,EAAE,CAAC;QAC5F,MAAM,KAAK,GAAG,GAAG,CAAC,SAAS,CAAC,eAAe,CAAC,EAAE,CAAC,eAAe,CAAC,aAAa,KAAK,aAAa,CAAC,CAAC;QAChG,IAAI,KAAK,IAAI,CAAC,CAAC,EAAE;YACf,GAAG,CAAC,IAAI,CAAC,EAAE,aAAa,EAAE,KAAK,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;SAC5C;aAAM;YACL,GAAG,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAC7B;QACD,OAAO,GAAG,CAAC;IACb,CAAC,EAAE,EAAE,CAAC,CAAC;AACT,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,aAAa,GAAG,CAAC,OAAgC,EAA+C,EAAE;IAC7G,MAAM,aAAa,GAAG;QACpB,CAAC,gBAAgB,CAAC,OAAO,CAAC,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,EAAE;QACjE,CAAC,gBAAgB,CAAC,SAAS,CAAC,EAAE;YAC5B,IAAI,EAAE,uBAAuB;YAC7B,KAAK,EAAE,EAAE;SACV;KACF,CAAC;IAEF,QAAQ,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,MAAM,EAAE;QACvB,KAAK,MAAM,CAAC,QAAQ;YAClB,OAAO,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,WAAW,MAAK,gBAAgB,CAAC,CAAC,CAAC,aAAa,CAAC,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,UAAU,KAAI,EAAE,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;QAC1G,KAAK,MAAM,CAAC,QAAQ;YAClB,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC;QAC/C,KAAK,MAAM,CAAC,SAAS;YACnB,OAAO,EAAE,IAAI,EAAE,WAAW,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC;QAC9C,KAAK,MAAM,CAAC,SAAS;YACnB,OAAO,EAAE,IAAI,EAAE,mBAAmB,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC;QAClD;YACE,OAAO,SAAS,CAAC;KACpB;AACH,CAAC,CAAC","sourcesContent":["import { IdentifiedPaymentOrder, Status } from '@backbase/data-ang/payment-order';\nimport { UpcomingPaymentsGroup } from '../models/payments.model';\nimport { P2P_PAYMENT_TYPE, P2P_REASON_CODES } from './constants';\n\nexport const mapPaymentOrdersToUpcomingPayments = (payments: IdentifiedPaymentOrder[]): UpcomingPaymentsGroup[] => {\n  return payments.reduce<UpcomingPaymentsGroup[]>((acc, item) => {\n    const executionDate = item.schedule?.nextExecutionDate || item.requestedExecutionDate || '';\n    const index = acc.findIndex(upcomingPayment => upcomingPayment.executionDate === executionDate);\n    if (index <= -1) {\n      acc.push({ executionDate, items: [item] });\n    } else {\n      acc[index].items.push(item);\n    }\n    return acc;\n  }, []);\n};\n\nexport const mapStatusText = (payment?: IdentifiedPaymentOrder): { text: string; color: string } | undefined => {\n  const reasonCodeMap = {\n    [P2P_REASON_CODES.pending]: { text: 'Pending', color: 'warning' },\n    [P2P_REASON_CODES.inProcess]: {\n      text: 'Accepted by recipient',\n      color: '',\n    },\n  };\n\n  switch (payment?.status) {\n    case Status.ACCEPTED:\n      return payment?.paymentType === P2P_PAYMENT_TYPE ? reasonCodeMap[payment?.reasonCode || ''] : undefined;\n    case Status.REJECTED:\n      return { text: 'Rejected', color: 'danger' };\n    case Status.CANCELLED:\n      return { text: 'Cancelled', color: 'info' };\n    case Status.PROCESSED:\n      return { text: 'Sent to recipient', color: '' };\n    default:\n      return undefined;\n  }\n};\n"]}