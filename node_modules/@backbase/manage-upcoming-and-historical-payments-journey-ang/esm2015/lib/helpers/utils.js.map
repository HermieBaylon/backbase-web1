{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../../../../../libs/manage-upcoming-and-historical-payments-journey/src/lib/helpers/utils.ts"],"names":[],"mappings":"AAEA,MAAM,CAAC,MAAM,WAAW,GAAG,CAAC,OAAO,GAAG,IAAI,IAAI,EAAE,EAAU,EAAE;IAC1D,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC;IAC/B,MAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC;IAC1C,MAAM,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;IACnC,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;IAExC,OAAO,GAAG,IAAI,IAAI,KAAK,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,IAAI,GAAG,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC;AACrE,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,eAAe,GAAG,CAAC,IAAa,EAAE,eAAyB,EAAU,EAAE;IAClF,MAAM,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;IAExB,IAAI,IAAI,EAAE;QACR,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC;KACrC;IAED,OAAO,eAAe,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;AAClE,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,SAAS,GAAG,CACvB,QAAkC,EAClC,aAAyD,EAC/B,EAAE;IAC5B,OAAO,QAAQ,CAAC,IAAI,CAAC,CAAC,KAA6B,EAAE,KAA6B,EAAE,EAAE;;QACpF,MAAM,SAAS,GAAG,CAAA,MAAA,KAAK,CAAC,QAAQ,0CAAE,iBAAiB,KAAI,KAAK,CAAC,sBAAsB,CAAC;QACpF,MAAM,SAAS,GAAG,CAAA,MAAA,KAAK,CAAC,QAAQ,0CAAE,iBAAiB,KAAI,KAAK,CAAC,sBAAsB,CAAC;QACpF,MAAM,SAAS,GAAG,IAAI,IAAI,CAAC,SAAS,IAAI,EAAE,CAAC,CAAC,OAAO,EAAE,GAAG,IAAI,IAAI,CAAC,SAAS,IAAI,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC;QAC5F,OAAO,aAAa,KAAK,KAAK,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;IAC1D,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,UAAU,GAAG,CAAC,QAAkC,EAA4B,EAAE;IACzF,OAAO,QAAQ,CAAC,MAAM,CAAC,CAAC,MAAgC,EAAE,IAA4B,EAAE,EAAE;QACxF,MAAM,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,IAAI,CAAC,EAAE,CAAC,CAAC;QACnD,OAAO,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAChD,CAAC,EAAE,EAAE,CAAC,CAAC;AACT,CAAC,CAAC","sourcesContent":["import { GetPaymentOrdersRequestParams, IdentifiedPaymentOrder } from '@backbase/data-ang/payment-order';\n\nexport const getDateOnly = (dateArg = new Date()): string => {\n  const date = new Date(dateArg);\n  const month = String(date.getMonth() + 1);\n  const day = String(date.getDate());\n  const year = String(date.getFullYear());\n\n  return `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;\n};\n\nexport const getRelativeDate = (next?: number, ISOStringFormat?: boolean): string => {\n  const date = new Date();\n\n  if (next) {\n    date.setDate(date.getDate() + next);\n  }\n\n  return ISOStringFormat ? date.toISOString() : getDateOnly(date);\n};\n\nexport const sortItems = (\n  payments: IdentifiedPaymentOrder[],\n  sortDirection: GetPaymentOrdersRequestParams['direction'],\n): IdentifiedPaymentOrder[] => {\n  return payments.sort((item1: IdentifiedPaymentOrder, item2: IdentifiedPaymentOrder) => {\n    const item1Date = item1.schedule?.nextExecutionDate || item1.requestedExecutionDate;\n    const item2Date = item2.schedule?.nextExecutionDate || item2.requestedExecutionDate;\n    const sortValue = new Date(item1Date || '').getTime() - new Date(item2Date || '').getTime();\n    return sortDirection === 'ASC' ? sortValue : -sortValue;\n  });\n};\n\nexport const unifyItems = (payments: IdentifiedPaymentOrder[]): IdentifiedPaymentOrder[] => {\n  return payments.reduce((result: IdentifiedPaymentOrder[], item: IdentifiedPaymentOrder) => {\n    const hasPeer = result.some(i => i.id === item.id);\n    return hasPeer ? result : result.concat(item);\n  }, []);\n};\n"]}