export const getDateOnly = (dateArg = new Date()) => {
    const date = new Date(dateArg);
    const month = String(date.getMonth() + 1);
    const day = String(date.getDate());
    const year = String(date.getFullYear());
    return `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;
};
export const getRelativeDate = (next, ISOStringFormat) => {
    const date = new Date();
    if (next) {
        date.setDate(date.getDate() + next);
    }
    return ISOStringFormat ? date.toISOString() : getDateOnly(date);
};
export const sortItems = (payments, sortDirection) => {
    return payments.sort((item1, item2) => {
        var _a, _b;
        const item1Date = ((_a = item1.schedule) === null || _a === void 0 ? void 0 : _a.nextExecutionDate) || item1.requestedExecutionDate;
        const item2Date = ((_b = item2.schedule) === null || _b === void 0 ? void 0 : _b.nextExecutionDate) || item2.requestedExecutionDate;
        const sortValue = new Date(item1Date || '').getTime() - new Date(item2Date || '').getTime();
        return sortDirection === 'ASC' ? sortValue : -sortValue;
    });
};
export const unifyItems = (payments) => {
    return payments.reduce((result, item) => {
        const hasPeer = result.some(i => i.id === item.id);
        return hasPeer ? result : result.concat(item);
    }, []);
};
//# sourceMappingURL=utils.js.map