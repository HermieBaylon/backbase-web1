import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';
import { getRelativeDate } from '../../helpers/utils';
import * as i0 from "@angular/core";
import * as i1 from "../item/upcoming-payments-item.component";
import * as i2 from "@angular/common";
export class UpcomingPaymentsItemGroupComponent {
    constructor() {
        /**
         * Changes will be triggered on paymentItemClick event emit.
         */
        this.paymentItemClick = new EventEmitter();
        /**
         *On cancel event emit.
         */
        this.cancelPayment = new EventEmitter();
    }
    onPaymentItemClick(paymentItem) {
        this.paymentItemClick.emit(paymentItem);
    }
    trackPaymentItem(_, payment) {
        return payment ? payment.requestedExecutionDate : undefined;
    }
    formatExecutionDate() {
        var _a;
        let result = (_a = this.paymentsGroup) === null || _a === void 0 ? void 0 : _a.executionDate;
        if (result === getRelativeDate()) {
            result = 'today';
        }
        else if (result === getRelativeDate(1)) {
            result = 'tomorrow';
        }
        return result;
    }
    onCancelPayment(payment) {
        this.cancelPayment.emit(payment);
    }
}
/** @nocollapse */ UpcomingPaymentsItemGroupComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UpcomingPaymentsItemGroupComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ UpcomingPaymentsItemGroupComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: UpcomingPaymentsItemGroupComponent, selector: "bb-upcoming-payments-item-group", inputs: { paymentsGroup: "paymentsGroup" }, outputs: { paymentItemClick: "paymentItemClick", cancelPayment: "cancelPayment" }, ngImport: i0, template: "<!-- Execution date -->\n<div\n  class=\"bb-stack bb-subheader bb-text-support bb-block bb-block--xl\"\n  i18n=\"@@upcoming-payments.group.header\"\n  data-role=\"group-item-label\"\n>\n  {formatExecutionDate(), select, today {Today} tomorrow {Tomorrow} other\n  {{{ paymentsGroup?.executionDate | date:'longDate'}}} }\n</div>\n<!-- group of payments -->\n<ng-container *ngIf=\"paymentsGroup?.items?.length > 0\">\n  <div class=\"bb-block bb-block--sm\">\n    <ul class=\"bb-list\">\n      <li\n        *ngFor=\"let payment of paymentsGroup?.items; trackBy: trackPaymentItem\"\n        class=\"bb-list__item bb-list__item--no-separator\"\n      >\n        <div\n          data-role=\"group-item-row\"\n          role=\"button\"\n          tabindex=\"0\"\n          (keydown.enter)=\"onPaymentItemClick(payment)\"\n          (click)=\"onPaymentItemClick(payment)\"\n        >\n          <bb-upcoming-payments-item\n            [payment]=\"payment\"\n            (cancelPayment)=\"onCancelPayment(payment)\"\n          ></bb-upcoming-payments-item>\n        </div>\n      </li>\n    </ul>\n  </div>\n</ng-container>\n", components: [{ type: i1.UpcomingPaymentsItemComponent, selector: "bb-upcoming-payments-item", inputs: ["payment"], outputs: ["cancelPayment"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "date": i2.DatePipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UpcomingPaymentsItemGroupComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-upcoming-payments-item-group',
                    templateUrl: './upcoming-payments-item-group.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { paymentsGroup: [{
                type: Input
            }], paymentItemClick: [{
                type: Output
            }], cancelPayment: [{
                type: Output
            }] } });
//# sourceMappingURL=upcoming-payments-item-group.component.js.map