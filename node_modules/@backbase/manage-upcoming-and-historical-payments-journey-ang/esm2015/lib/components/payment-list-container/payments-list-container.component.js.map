{"version":3,"file":"payments-list-container.component.js","sourceRoot":"","sources":["../../../../../../../libs/manage-upcoming-and-historical-payments-journey/src/lib/components/payment-list-container/payments-list-container.component.ts","../../../../../../../libs/manage-upcoming-and-historical-payments-journey/src/lib/components/payment-list-container/payments-list-container.component.html"],"names":[],"mappings":"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","sourcesContent":["import { HttpErrorResponse } from '@angular/common/http';\nimport { ChangeDetectionStrategy, Component, Input, OnDestroy, OnInit, Optional } from '@angular/core';\nimport { IdentifiedPaymentOrder } from '@backbase/data-ang/payment-order';\nimport { LoadMoreParams } from '@backbase/ui-ang/load-button';\nimport { NotificationService } from '@backbase/ui-ang/notification';\nimport { Observable, of, Subject } from 'rxjs';\nimport { catchError, takeUntil } from 'rxjs/operators';\nimport { CommunicationService } from '../../communication.service';\nimport { UpcomingPaymentResponse } from '../../models/payments.model';\nimport { ManageUpcomingAndHistoricalPaymentsJourneyConfigService as ConfigService } from '../../services/config.service';\nimport { PaymentService } from '../../services/payments.service';\n\n@Component({\n  selector: 'bb-payments-list-container',\n  templateUrl: 'payments-list-container.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentsListContainerComponent implements OnInit, OnDestroy {\n  openConfirmation = false;\n  error?: HttpErrorResponse;\n  loadMoreFrom = 0;\n  readonly acting$ = this.journeyDataService.acting$;\n  readonly loading$ = this.journeyDataService.loading$;\n  selectedPaymentItem?: IdentifiedPaymentOrder;\n  paymentItemToCancel?: IdentifiedPaymentOrder;\n\n  private readonly destroy$ = new Subject();\n\n  /**\n   * Payments stream\n   */\n  @Input() payments$?: Observable<UpcomingPaymentResponse | undefined>;\n  /**\n   * Flag if component is rendering history payments\n   */\n  @Input() isHistoryPayments = false;\n\n  get pageSize(): number | undefined {\n    return this.isHistoryPayments\n      ? this.configService.historyPaymentParams.size\n      : this.configService.upcomingPaymentParams.size;\n  }\n\n  constructor(\n    private readonly journeyDataService: PaymentService,\n    readonly configService: ConfigService,\n    private readonly notificationService: NotificationService,\n    @Optional() private readonly communicatonService: CommunicationService,\n  ) {}\n\n  ngOnInit() {\n    this.payments$ = this.payments$?.pipe(\n      catchError(error => {\n        this.error = error;\n        return of(undefined);\n      }),\n    );\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  onPaymentItemClick(selectedPaymentItem: IdentifiedPaymentOrder): void {\n    this.selectedPaymentItem = selectedPaymentItem;\n  }\n\n  onLoadMoreParam(params: LoadMoreParams): void {\n    this.journeyDataService.loadMore(params.from);\n    this.loadMoreFrom = this.loadMoreFrom + 1;\n  }\n\n  onConfirmCancelPayment(confirmed: boolean) {\n    this.openConfirmation = false;\n    const paymentItem = this.paymentItemToCancel;\n    this.paymentItemToCancel = undefined;\n    if (!confirmed) {\n      return;\n    }\n    this.selectedPaymentItem = undefined;\n    if (paymentItem) {\n      const creditorName = paymentItem.transferTransactionInformation?.counterparty?.name;\n      const isRecurring = this.isRecurringPayment(paymentItem);\n\n      this.journeyDataService\n        .cancelPayment(paymentItem.id, paymentItem.version)\n        .pipe(takeUntil(this.destroy$))\n        .subscribe(\n          () => {\n            this.showNotification(true, {\n              header: $localize`:@@upcoming-payments-cancel-success-header:Payment cancelled`,\n              message: isRecurring\n                ? $localize`:@@upcoming-payments-cancel-success-msg-recurring:Recurring payment to \"${creditorName}\" has been cancelled successfully.`\n                : $localize`:@@upcoming-payments-cancel-success-msg:Upcoming payment to \"${creditorName}\" has been cancelled successfully.`,\n            });\n          },\n          () => {\n            this.showNotification(false, {\n              header: $localize`:@@upcoming-payments-cancel-fail-header:Failed to Cancel Payment!`,\n              message: $localize`:@@upcoming-payments-cancel-fail-msg:Failed to cancel The payment to \"${creditorName}\".`,\n            });\n          },\n        );\n    }\n  }\n\n  private showNotification(success: boolean, notification: { header: string; message: string }) {\n    this.notificationService.showNotification({\n      dismissible: true,\n      ttl: this.configService.notificationDismissTime,\n      modifier: success ? 'success' : 'error',\n      ...notification,\n    });\n  }\n\n  isRecurringPayment(payment: IdentifiedPaymentOrder | undefined): boolean {\n    return payment?.paymentMode === 'RECURRING';\n  }\n\n  onCloseDetails(): void {\n    this.selectedPaymentItem = undefined;\n  }\n\n  onCancelPayment(paymentItem: IdentifiedPaymentOrder): void {\n    this.paymentItemToCancel = paymentItem;\n    this.openConfirmation = true;\n  }\n\n  onEditPayment(payment: IdentifiedPaymentOrder): void {\n    this.communicatonService?.navigateToEditPayment(payment);\n  }\n}\n","<ng-container *ngIf=\"!error; else errorState\">\n  <ng-container *ngIf=\"payments$ | async as payments; else loadingPayments\">\n    <bb-upcoming-payments-list\n      *ngIf=\"!(acting$ | async); else acting\"\n      [upcomingPayments]=\"payments?.items\"\n      [totalCount]=\"payments?.totalCount\"\n      [loadMoreSize]=\"pageSize\"\n      [loadMoreFrom]=\"loadMoreFrom\"\n      [loading]=\"loading$ | async\"\n      (paymentItemClick)=\"onPaymentItemClick($event)\"\n      (loadMoreParam)=\"onLoadMoreParam($event)\"\n      (cancelPayment)=\"onCancelPayment($event)\"\n    ></bb-upcoming-payments-list>\n\n    <ng-template #acting>\n      <bb-loading-indicator-ui\n        text=\"updating data...\"\n        i18n-text=\"@@bb-upcoming-and-history-payments-journey.payment-list-container.acting-placeholder\"\n      ></bb-loading-indicator-ui>\n    </ng-template>\n\n    <bb-upcoming-payments-cancel-payment-confirmation\n      *ngIf=\"openConfirmation\"\n      [isOpen]=\"openConfirmation\"\n      [isRecurring]=\"isRecurringPayment(paymentItemToCancel)\"\n      (cancelPayment)=\"onConfirmCancelPayment(true)\"\n      (keepPayment)=\"onConfirmCancelPayment(false)\"\n    ></bb-upcoming-payments-cancel-payment-confirmation>\n\n    <bb-upcoming-payments-details\n      *ngIf=\"selectedPaymentItem\"\n      [isOpen]=\"!!selectedPaymentItem\"\n      (close)=\"onCloseDetails()\"\n      [payment]=\"selectedPaymentItem\"\n      [config]=\"configService\"\n      (cancelPayment)=\"onCancelPayment(selectedPaymentItem)\"\n      (editPayment)=\"onEditPayment(selectedPaymentItem)\"\n    ></bb-upcoming-payments-details>\n  </ng-container>\n</ng-container>\n\n<ng-template #loadingPayments>\n  <bb-loading-indicator-ui\n    text=\"Loading data...\"\n    text-i18n=\"@@bb-upcoming-and-history-payments-journey.payment-list-container.loading-placeholder\"\n  ></bb-loading-indicator-ui>\n</ng-template>\n\n<ng-template #errorState>\n  <div class=\"bb-state-container\">\n    <bb-empty-state-ui\n      i18n-title=\"@@upcoming-payments.history.error.generic.title\"\n      title=\"Page couldn't load\"\n      i18n-subtitle=\"@@upcoming-payments.history.error.generic.subtitle\"\n      subtitle=\"Try to reload the page or contact the system administrator.\"\n      iconSize=\"xxl\"\n      iconModifier=\"error\"\n    ></bb-empty-state-ui>\n  </div>\n</ng-template>\n"]}