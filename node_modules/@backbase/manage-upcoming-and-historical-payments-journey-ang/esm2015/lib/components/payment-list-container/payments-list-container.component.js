import { ChangeDetectionStrategy, Component, Input, Optional } from '@angular/core';
import { NotificationService } from '@backbase/ui-ang/notification';
import { Observable, of, Subject } from 'rxjs';
import { catchError, takeUntil } from 'rxjs/operators';
import { CommunicationService } from '../../communication.service';
import { ManageUpcomingAndHistoricalPaymentsJourneyConfigService as ConfigService } from '../../services/config.service';
import { PaymentService } from '../../services/payments.service';
import * as i0 from "@angular/core";
import * as i1 from "../../services/payments.service";
import * as i2 from "../../services/config.service";
import * as i3 from "@backbase/ui-ang/notification";
import * as i4 from "../../communication.service";
import * as i5 from "../list/upcoming-payments-list.component";
import * as i6 from "@backbase/ui-ang/loading-indicator";
import * as i7 from "../cancel-payment-confirmation/cancel-payment-confirmation.component";
import * as i8 from "../details-modal/upcoming-payments-details.component";
import * as i9 from "@backbase/ui-ang/empty-state";
import * as i10 from "@angular/common";
export class PaymentsListContainerComponent {
    constructor(journeyDataService, configService, notificationService, communicatonService) {
        this.journeyDataService = journeyDataService;
        this.configService = configService;
        this.notificationService = notificationService;
        this.communicatonService = communicatonService;
        this.openConfirmation = false;
        this.loadMoreFrom = 0;
        this.acting$ = this.journeyDataService.acting$;
        this.loading$ = this.journeyDataService.loading$;
        this.destroy$ = new Subject();
        /**
         * Flag if component is rendering history payments
         */
        this.isHistoryPayments = false;
    }
    get pageSize() {
        return this.isHistoryPayments
            ? this.configService.historyPaymentParams.size
            : this.configService.upcomingPaymentParams.size;
    }
    ngOnInit() {
        var _a;
        this.payments$ = (_a = this.payments$) === null || _a === void 0 ? void 0 : _a.pipe(catchError(error => {
            this.error = error;
            return of(undefined);
        }));
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    onPaymentItemClick(selectedPaymentItem) {
        this.selectedPaymentItem = selectedPaymentItem;
    }
    onLoadMoreParam(params) {
        this.journeyDataService.loadMore(params.from);
        this.loadMoreFrom = this.loadMoreFrom + 1;
    }
    onConfirmCancelPayment(confirmed) {
        var _a, _b;
        this.openConfirmation = false;
        const paymentItem = this.paymentItemToCancel;
        this.paymentItemToCancel = undefined;
        if (!confirmed) {
            return;
        }
        this.selectedPaymentItem = undefined;
        if (paymentItem) {
            const creditorName = (_b = (_a = paymentItem.transferTransactionInformation) === null || _a === void 0 ? void 0 : _a.counterparty) === null || _b === void 0 ? void 0 : _b.name;
            const isRecurring = this.isRecurringPayment(paymentItem);
            this.journeyDataService
                .cancelPayment(paymentItem.id, paymentItem.version)
                .pipe(takeUntil(this.destroy$))
                .subscribe(() => {
                this.showNotification(true, {
                    header: $localize `:@@upcoming-payments-cancel-success-header:Payment cancelled`,
                    message: isRecurring
                        ? $localize `:@@upcoming-payments-cancel-success-msg-recurring:Recurring payment to "${creditorName}" has been cancelled successfully.`
                        : $localize `:@@upcoming-payments-cancel-success-msg:Upcoming payment to "${creditorName}" has been cancelled successfully.`,
                });
            }, () => {
                this.showNotification(false, {
                    header: $localize `:@@upcoming-payments-cancel-fail-header:Failed to Cancel Payment!`,
                    message: $localize `:@@upcoming-payments-cancel-fail-msg:Failed to cancel The payment to "${creditorName}".`,
                });
            });
        }
    }
    showNotification(success, notification) {
        this.notificationService.showNotification(Object.assign({ dismissible: true, ttl: this.configService.notificationDismissTime, modifier: success ? 'success' : 'error' }, notification));
    }
    isRecurringPayment(payment) {
        return (payment === null || payment === void 0 ? void 0 : payment.paymentMode) === 'RECURRING';
    }
    onCloseDetails() {
        this.selectedPaymentItem = undefined;
    }
    onCancelPayment(paymentItem) {
        this.paymentItemToCancel = paymentItem;
        this.openConfirmation = true;
    }
    onEditPayment(payment) {
        var _a;
        (_a = this.communicatonService) === null || _a === void 0 ? void 0 : _a.navigateToEditPayment(payment);
    }
}
/** @nocollapse */ PaymentsListContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentsListContainerComponent, deps: [{ token: i1.PaymentService }, { token: i2.ManageUpcomingAndHistoricalPaymentsJourneyConfigService }, { token: i3.NotificationService }, { token: i4.CommunicationService, optional: true }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PaymentsListContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PaymentsListContainerComponent, selector: "bb-payments-list-container", inputs: { payments$: "payments$", isHistoryPayments: "isHistoryPayments" }, ngImport: i0, template: "<ng-container *ngIf=\"!error; else errorState\">\n  <ng-container *ngIf=\"payments$ | async as payments; else loadingPayments\">\n    <bb-upcoming-payments-list\n      *ngIf=\"!(acting$ | async); else acting\"\n      [upcomingPayments]=\"payments?.items\"\n      [totalCount]=\"payments?.totalCount\"\n      [loadMoreSize]=\"pageSize\"\n      [loadMoreFrom]=\"loadMoreFrom\"\n      [loading]=\"loading$ | async\"\n      (paymentItemClick)=\"onPaymentItemClick($event)\"\n      (loadMoreParam)=\"onLoadMoreParam($event)\"\n      (cancelPayment)=\"onCancelPayment($event)\"\n    ></bb-upcoming-payments-list>\n\n    <ng-template #acting>\n      <bb-loading-indicator-ui\n        text=\"updating data...\"\n        i18n-text=\"@@bb-upcoming-and-history-payments-journey.payment-list-container.acting-placeholder\"\n      ></bb-loading-indicator-ui>\n    </ng-template>\n\n    <bb-upcoming-payments-cancel-payment-confirmation\n      *ngIf=\"openConfirmation\"\n      [isOpen]=\"openConfirmation\"\n      [isRecurring]=\"isRecurringPayment(paymentItemToCancel)\"\n      (cancelPayment)=\"onConfirmCancelPayment(true)\"\n      (keepPayment)=\"onConfirmCancelPayment(false)\"\n    ></bb-upcoming-payments-cancel-payment-confirmation>\n\n    <bb-upcoming-payments-details\n      *ngIf=\"selectedPaymentItem\"\n      [isOpen]=\"!!selectedPaymentItem\"\n      (close)=\"onCloseDetails()\"\n      [payment]=\"selectedPaymentItem\"\n      [config]=\"configService\"\n      (cancelPayment)=\"onCancelPayment(selectedPaymentItem)\"\n      (editPayment)=\"onEditPayment(selectedPaymentItem)\"\n    ></bb-upcoming-payments-details>\n  </ng-container>\n</ng-container>\n\n<ng-template #loadingPayments>\n  <bb-loading-indicator-ui\n    text=\"Loading data...\"\n    text-i18n=\"@@bb-upcoming-and-history-payments-journey.payment-list-container.loading-placeholder\"\n  ></bb-loading-indicator-ui>\n</ng-template>\n\n<ng-template #errorState>\n  <div class=\"bb-state-container\">\n    <bb-empty-state-ui\n      i18n-title=\"@@upcoming-payments.history.error.generic.title\"\n      title=\"Page couldn't load\"\n      i18n-subtitle=\"@@upcoming-payments.history.error.generic.subtitle\"\n      subtitle=\"Try to reload the page or contact the system administrator.\"\n      iconSize=\"xxl\"\n      iconModifier=\"error\"\n    ></bb-empty-state-ui>\n  </div>\n</ng-template>\n", components: [{ type: i5.UpcomingPaymentsListComponent, selector: "bb-upcoming-payments-list", inputs: ["upcomingPayments", "totalCount", "loading", "loadMoreFrom", "loadMoreSize"], outputs: ["paymentItemClick", "loadMoreParam", "cancelPayment"] }, { type: i6.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i7.UpcomingPaymentsCancelPaymentConfirmationComponent, selector: "bb-upcoming-payments-cancel-payment-confirmation", inputs: ["isOpen", "isRecurring"], outputs: ["keepPayment", "cancelPayment"] }, { type: i8.UpcomingPaymentsDetailsComponent, selector: "bb-upcoming-payments-details", inputs: ["isOpen", "payment", "config"], outputs: ["cancelPayment", "close", "editPayment"] }, { type: i9.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i10.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i10.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentsListContainerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payments-list-container',
                    templateUrl: 'payments-list-container.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.PaymentService }, { type: i2.ManageUpcomingAndHistoricalPaymentsJourneyConfigService }, { type: i3.NotificationService }, { type: i4.CommunicationService, decorators: [{
                    type: Optional
                }] }]; }, propDecorators: { payments$: [{
                type: Input
            }], isHistoryPayments: [{
                type: Input
            }] } });
//# sourceMappingURL=payments-list-container.component.js.map