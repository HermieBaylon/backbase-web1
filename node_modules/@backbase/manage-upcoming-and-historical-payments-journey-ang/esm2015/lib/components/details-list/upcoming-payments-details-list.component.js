import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import { P2P_PAYMENT_TYPE } from '../../helpers/constants';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@backbase/ui-ang/payment-card-number-pipe";
export class UpcomingPaymentsDetailsListComponent {
    constructor() {
        this.accountNumberFormat = {
            length: 36,
            maskRange: [0, -4],
            segments: 4,
        };
    }
    get transactionInformation() {
        var _a;
        return (_a = this.payment) === null || _a === void 0 ? void 0 : _a.transferTransactionInformation;
    }
    get originatorAccount() {
        var _a, _b, _c, _d, _e;
        return ((_b = (_a = this.transactionInformation) === null || _a === void 0 ? void 0 : _a.counterparty) === null || _b === void 0 ? void 0 : _b.role) === 'DEBTOR'
            ? (_d = (_c = this.payment) === null || _c === void 0 ? void 0 : _c.transferTransactionInformation) === null || _d === void 0 ? void 0 : _d.counterpartyAccount
            : (_e = this.payment) === null || _e === void 0 ? void 0 : _e.originatorAccount;
    }
    get counterPartyAccount() {
        var _a, _b, _c, _d, _e;
        return ((_b = (_a = this.transactionInformation) === null || _a === void 0 ? void 0 : _a.counterparty) === null || _b === void 0 ? void 0 : _b.role) === 'DEBTOR'
            ? (_c = this.payment) === null || _c === void 0 ? void 0 : _c.originatorAccount
            : (_e = (_d = this.payment) === null || _d === void 0 ? void 0 : _d.transferTransactionInformation) === null || _e === void 0 ? void 0 : _e.counterpartyAccount;
    }
    get paymentTypeInfo() {
        var _a, _b;
        const text = (_a = this.config) === null || _a === void 0 ? void 0 : _a.paymentTypeInfoTexts[((_b = this.payment) === null || _b === void 0 ? void 0 : _b.paymentType) || ''];
        return $localize `:@@upcoming-and-history-payments-details.payment-type-info:${text || ''}`;
    }
    get isAccountNumber() {
        var _a, _b, _c, _d;
        const scheme = (_d = (_c = (_b = (_a = this.payment) === null || _a === void 0 ? void 0 : _a.transferTransactionInformation) === null || _b === void 0 ? void 0 : _b.counterpartyAccount) === null || _c === void 0 ? void 0 : _c.identification) === null || _d === void 0 ? void 0 : _d.schemeName;
        return ['IBAN', 'BBAN'].includes(scheme || '');
    }
    get isP2PTransfer() {
        var _a;
        return ((_a = this.payment) === null || _a === void 0 ? void 0 : _a.paymentType) === P2P_PAYMENT_TYPE;
    }
}
/** @nocollapse */ UpcomingPaymentsDetailsListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UpcomingPaymentsDetailsListComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ UpcomingPaymentsDetailsListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: UpcomingPaymentsDetailsListComponent, selector: "bb-upcoming-payments-details-list", inputs: { payment: "payment", config: "config" }, ngImport: i0, template: "<div class=\"break-word bb-block bb-block--lg\">\n  <div class=\"bb-text-bold\" i18n=\"Paying From Account@@upcoming-payments.payment.details.fromAccount.name\">\n    From account\n  </div>\n  <div>\n    {{\n      transactionInformation?.counterparty?.role === 'DEBTOR'\n        ? transactionInformation?.counterparty?.name\n        : payment?.originator?.name\n    }}\n  </div>\n  <div class=\"bb-block bb-block--md\" data-role=\"paying-from-account\">\n    <div class=\"contextual-alternates-off\" *ngIf=\"config?.maskAccounts; else unmaskedAccount\">\n      {{ originatorAccount?.identification?.identification | paymentCardNumber: accountNumberFormat | slice: -14 }}\n    </div>\n    <ng-template #unmaskedAccount>\n      {{ originatorAccount?.identification?.identification }}\n    </ng-template>\n  </div>\n\n  <div class=\"bb-text-bold\" i18n=\"Counter Party Name@@upcoming-payments.payment.details.toAccount.details\">\n    To recipient\n  </div>\n  <div data-role=\"counter-party-name\">\n    {{\n      transactionInformation?.counterparty?.role === 'DEBTOR'\n        ? payment?.originator?.name\n        : transactionInformation?.counterparty?.name\n    }}\n  </div>\n  <div class=\"bb-block bb-block--md\" data-role=\"counter-party-account\">\n    <div\n      class=\"contextual-alternates-off\"\n      *ngIf=\"config?.maskAccounts && isAccountNumber; else unmaskedCounterpartyTemp\"\n    >\n      {{ counterPartyAccount?.identification?.identification | paymentCardNumber: accountNumberFormat | slice: -14 }}\n    </div>\n    <ng-template #unmaskedCounterpartyTemp>\n      {{ counterPartyAccount?.identification?.identification }}\n    </ng-template>\n  </div>\n  <ng-container *ngIf=\"payment?.paymentSetupId && isP2PTransfer\">\n    <div\n      class=\"bb-text-bold\"\n      i18n=\"@@upcoming-payments.payment.details.toAccount.confirmation-number\"\n      data-role=\"payment-details-confirmation-number-title\"\n    >\n      Confirmation number\n    </div>\n    <div data-role=\"payment-details-confirmation-number\">\n      {{ payment?.paymentSetupId }}\n    </div>\n  </ng-container>\n</div>\n\n<hr class=\"bb-block bb-block--lg\" />\n\n<ng-container *ngIf=\"payment?.paymentMode !== 'RECURRING'; else recurringTemp\">\n  <div class=\"bb-text-bold\" i18n=\"Execution Date@@upcoming-payments.payment.details.executionDate\">Send date</div>\n  <div class=\"bb-block bb-block--md\" data-role=\"execution-date\">\n    {{ payment?.schedule?.nextExecutionDate || payment?.requestedExecutionDate | date: 'longDate' }}\n  </div>\n</ng-container>\n\n<ng-template #recurringTemp>\n  <div class=\"bb-text-bold\" i18n=\"Start Date@@upcoming-payments.payment.details.schedule.startDate\">Start date</div>\n  <div class=\"bb-block bb-block--md\" data-role=\"start-date\">\n    {{ payment?.schedule?.startDate | date: 'longDate' }}\n  </div>\n\n  <ng-container *ngIf=\"payment?.schedule?.endDate\">\n    <div class=\"bb-text-bold\" i18n=\"End Date@@upcoming-payments.payment.details.schedule.endDate\">End date</div>\n    <div class=\"bb-block bb-block--md\" data-role=\"end-date\">\n      {{ payment?.schedule?.endDate | date: 'longDate' }}\n    </div>\n  </ng-container>\n\n  <ng-container *ngIf=\"payment?.schedule?.transferFrequency\">\n    <div class=\"bb-text-bold\" i18n=\"Recurring Frequency@@upcoming-payments.payment.details.schedule.transferFrequency\">\n      Frequency\n    </div>\n    <div class=\"bb-block bb-block--md\" data-role=\"recurring-frequency\">\n      {{ payment?.schedule?.transferFrequency | titlecase }}\n    </div>\n  </ng-container>\n\n  <ng-container *ngIf=\"payment?.schedule?.repeat\">\n    <div class=\"bb-text-bold\" i18n=\"Number of Occurrences@@upcoming-payments.payment.details.schedule.repeat\">\n      Number of occurrences\n    </div>\n    <div class=\"bb-block bb-block--md\">\n      {{ payment?.schedule?.repeat }}\n    </div>\n  </ng-container>\n</ng-template>\n\n<ng-container *ngIf=\"transactionInformation?.remittanceInformation\">\n  <div class=\"bb-text-bold\" i18n=\"Description@@upcoming-payments.payment.details.remittanceInformation.content\">\n    Description\n  </div>\n  <div class=\"bb-block bb-block--md break-word\" data-role=\"description\">\n    {{ transactionInformation?.remittanceInformation?.content }}\n  </div>\n</ng-container>\n\n<ng-container *ngIf=\"paymentTypeInfo\">\n  <hr class=\"bb-block bb-block--lg\" />\n  <div class=\"bb-text-bold\" i18n=\"@@upcoming-payments.payment.details.payment-type\">Payment Type</div>\n  <div class=\"bb-block bb-block--md break-word\">\n    {{ paymentTypeInfo }}\n  </div>\n</ng-container>\n", directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "slice": i1.SlicePipe, "paymentCardNumber": i2.PaymentCardNumberPipe, "date": i1.DatePipe, "titlecase": i1.TitleCasePipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UpcomingPaymentsDetailsListComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-upcoming-payments-details-list',
                    templateUrl: 'upcoming-payments-details-list.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { payment: [{
                type: Input
            }], config: [{
                type: Input
            }] } });
//# sourceMappingURL=upcoming-payments-details-list.component.js.map