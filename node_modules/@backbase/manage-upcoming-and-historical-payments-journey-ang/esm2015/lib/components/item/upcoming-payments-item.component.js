import { ChangeDetectionStrategy, Component, EventEmitter, Input, Optional, Output } from '@angular/core';
import { CommunicationService } from '../../communication.service';
import { P2P_PAYMENT_TYPE, P2P_REASON_CODES } from '../../helpers/constants';
import { mapStatusText } from '../../helpers/mappers';
import { ManageUpcomingAndHistoricalPaymentsJourneyConfigService as ConfigService } from '../../services/config.service';
import * as i0 from "@angular/core";
import * as i1 from "../../communication.service";
import * as i2 from "../../services/config.service";
import * as i3 from "@backbase/ui-ang/icon";
import * as i4 from "@backbase/ui-ang/badge";
import * as i5 from "@backbase/ui-ang/ellipsis";
import * as i6 from "@backbase/ui-ang/amount";
import * as i7 from "@angular/common";
import * as i8 from "@backbase/ui-ang/button";
import * as i9 from "@backbase/ui-ang/tooltip-directive";
export class UpcomingPaymentsItemComponent {
    constructor(communicatonService, config) {
        this.communicatonService = communicatonService;
        this.config = config;
        this.p2pReasonCodes = P2P_REASON_CODES;
        this.p2pPaymentType = P2P_PAYMENT_TYPE;
        /**
         * Changes will be triggered on cancelPayment event emit.
         */
        this.cancelPayment = new EventEmitter();
    }
    get transactionInformation() {
        var _a;
        return (_a = this.payment) === null || _a === void 0 ? void 0 : _a.transferTransactionInformation;
    }
    get schedule() {
        var _a, _b;
        return (_b = (_a = this.payment) === null || _a === void 0 ? void 0 : _a.schedule) === null || _b === void 0 ? void 0 : _b.transferFrequency;
    }
    get isRecurring() {
        var _a;
        return ((_a = this.payment) === null || _a === void 0 ? void 0 : _a.paymentMode) === 'RECURRING';
    }
    get statusText() {
        const statusText = mapStatusText(this.payment);
        return (statusText && {
            text: $localize `:@@upcoming-payments-list-item-badge:${statusText.text}`,
            color: statusText.color,
        });
    }
    onCancelClick(event) {
        event.stopPropagation();
        this.cancelPayment.emit();
    }
    onEditClick(event) {
        var _a;
        if (this.payment) {
            event.stopPropagation();
            (_a = this.communicatonService) === null || _a === void 0 ? void 0 : _a.navigateToEditPayment(this.payment);
        }
    }
}
/** @nocollapse */ UpcomingPaymentsItemComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UpcomingPaymentsItemComponent, deps: [{ token: i1.CommunicationService, optional: true }, { token: i2.ManageUpcomingAndHistoricalPaymentsJourneyConfigService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ UpcomingPaymentsItemComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: UpcomingPaymentsItemComponent, selector: "bb-upcoming-payments-item", inputs: { payment: "payment" }, outputs: { cancelPayment: "cancelPayment" }, ngImport: i0, template: "<div class=\"bb-stack\" data-role=\"upcoming-payment-item\">\n  <bb-icon-ui\n    name=\"{{ isRecurring ? 'repeat' : 'call-made' }}\"\n    class=\"bb-stack__item bb-stack__item--spacing-md\"\n    backgroundType=\"square\"\n    size=\"lg\"\n    color=\"{{ isRecurring ? 'secondary' : 'inactive' }}\"\n  ></bb-icon-ui>\n  <ng-container *ngIf=\"transactionInformation\">\n    <div class=\"bb-stack__item bb-stack__item--fill bb-ellipsis bb-ellipsis--single-line\">\n      <div class=\"bb-stack bb-block bb-block--xs\">\n        <span class=\"sr-only\" i18n=\"screenReader@@upcoming-payments.group.item.counterparty\">\n          Counter party name:\n        </span>\n        <div\n          class=\"bb-text-bold bb-stack__item bb-stack__item--spacing-md bb-ellipsis bb-ellipsis--single-line\"\n          data-role=\"upcoming-payment-item-counterparty-name\"\n        >\n          {{\n            transactionInformation?.counterparty?.role === 'DEBTOR'\n              ? payment?.originator?.name\n              : transactionInformation?.counterparty?.name\n          }}\n        </div>\n        <bb-badge-ui\n          *ngIf=\"statusText?.text && statusText?.color\"\n          class=\"bb-stack__item\"\n          color=\"{{ statusText?.color }}\"\n          text=\"{{ statusText?.text }}\"\n        ></bb-badge-ui>\n      </div>\n      <div class=\"bb-inline-stack text-muted bb-subtitle\">\n        <span i18n=\"@@upcoming-payments.group.item.from-label\">From&nbsp;</span>\n        <div class=\"bb-inline-stack__item bb-inline-stack__item--spacing-none bb-block bb-block--full-width\">\n          <bb-ellipsis-ui\n            [text]=\"\n              transactionInformation?.counterparty?.role === 'DEBTOR'\n                ? transactionInformation?.counterparty?.name\n                : payment?.originator?.name\n            \"\n          ></bb-ellipsis-ui>\n        </div>\n        <div *ngIf=\"payment?.paymentMode === 'RECURRING'\" class=\"bb-inline-stack__item\">\n          <span class=\"sr-only\" i18n=\"screenReader@@upcoming-payments.group.item.paymentMode\"> Payment Mode: </span>\n          <span> - {{ schedule | titlecase }} </span>\n        </div>\n      </div>\n    </div>\n    <div class=\"bb-stack__item bb-text-align-right\">\n      <div class=\"bb-block bb-block--xs bb-text-align-right bb-text-bold\">\n        <span class=\"sr-only\" i18n=\"screenReader@@upcoming-payments.group.item.amount\"> Amount: </span>\n        <bb-amount-ui\n          data-role=\"upcoming-payment-item-amount\"\n          [currency]=\"transactionInformation?.instructedAmount?.currencyCode\"\n          [amount]=\"transactionInformation?.instructedAmount?.amount\"\n          [mapCurrency]=\"config.uiComponentProps?.mapCurrency\"\n        ></bb-amount-ui>\n      </div>\n\n      <ng-container *ngIf=\"this.payment?.status === 'ACCEPTED'\">\n        <button\n          bbButton\n          *ngIf=\"!(payment?.paymentType === p2pPaymentType)\"\n          color=\"link-text\"\n          buttonSize=\"sm\"\n          class=\"bb-stack__item bb-stack__item--spacing-lg\"\n          (click)=\"onEditClick($event)\"\n          (keydown.enter)=\"onEditClick($event)\"\n          (keydown.space)=\"onEditClick($event)\"\n          i18n=\"@@upcoming-payments.group.item.button.edit\"\n        >\n          Edit\n        </button>\n        <button\n          bbButton\n          *ngIf=\"!(payment?.reasonCode === p2pReasonCodes.inProcess)\"\n          color=\"link-text\"\n          buttonSize=\"sm\"\n          class=\"bb-stack__item bb-text-warning bb-text-danger\"\n          (click)=\"onCancelClick($event)\"\n          (keydown.enter)=\"onCancelClick($event)\"\n          (keydown.space)=\"onCancelClick($event)\"\n          i18n=\"@@upcoming-payments.group.item.button.cancel\"\n          data-role=\"upcoming-payment-item-cancel-button\"\n        >\n          Cancel\n        </button>\n      </ng-container>\n      <ng-container *ngIf=\"payment?.reasonCode === p2pReasonCodes.inProcess && payment?.status === 'ACCEPTED'\">\n        <div class=\"bb-inline-stack\">\n          <span\n            class=\"text-muted bb-subtitle bb-stack__item bb-stack__item--spacing-xs\"\n            i18n=\"@@upcoming-payments-journey.payment-item.ready-status.text\"\n            >Accepted</span\n          >\n          <span\n            bbTooltip=\"This payment can\u2019t be cancelled or edited because it has already been accepted by the recipient.\"\n            i18n-bbTooltip=\"@@upcoming-payments-journey.payment-item.ready-status.tooltip\"\n            placement=\"bottom\"\n            triggers=\"hover\"\n          >\n            <bb-icon-ui name=\"info\" class=\"text-muted bb-stack\" size=\"sm\"></bb-icon-ui>\n          </span>\n        </div>\n      </ng-container>\n    </div>\n  </ng-container>\n</div>\n", components: [{ type: i3.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i4.BadgeComponent, selector: "bb-badge-ui", inputs: ["color", "text", "abbr", "circle", "wrap", "ariaLabel"] }, { type: i5.EllipsisComponent, selector: "bb-ellipsis-ui", inputs: ["text", "tooltipTriggers", "lineClamp"] }, { type: i6.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }], directives: [{ type: i7.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i8.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i9.TooltipDirective, selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }], pipes: { "titlecase": i7.TitleCasePipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UpcomingPaymentsItemComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-upcoming-payments-item',
                    templateUrl: 'upcoming-payments-item.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.CommunicationService, decorators: [{
                    type: Optional
                }] }, { type: i2.ManageUpcomingAndHistoricalPaymentsJourneyConfigService }]; }, propDecorators: { payment: [{
                type: Input
            }], cancelPayment: [{
                type: Output
            }] } });
//# sourceMappingURL=upcoming-payments-item.component.js.map