{"version":3,"file":"backbase-manage-upcoming-and-historical-payments-journey-ang.js","sources":["../../../../libs/manage-upcoming-and-historical-payments-journey/src/lib/communication.service.ts","../../../../libs/manage-upcoming-and-historical-payments-journey/src/lib/components/cancel-payment-confirmation/cancel-payment-confirmation.component.ts","../../../../libs/manage-upcoming-and-historical-payments-journey/src/lib/components/cancel-payment-confirmation/cancel-payment-confirmation.component.html","../../../../libs/manage-upcoming-and-historical-payments-journey/src/lib/helpers/constants.ts","../../../../libs/manage-upcoming-and-historical-payments-journey/src/lib/components/details-list/upcoming-payments-details-list.component.ts","../../../../libs/manage-upcoming-and-historical-payments-journey/src/lib/components/details-list/upcoming-payments-details-list.component.html","../../../../libs/manage-upcoming-and-historical-payments-journey/src/lib/helpers/mappers.ts","../../../../libs/manage-upcoming-and-historical-payments-journey/src/lib/components/details-modal/upcoming-payments-details.component.ts","../../../../libs/manage-upcoming-and-historical-payments-journey/src/lib/components/details-modal/upcoming-payments-details.component.html","../../../../libs/manage-upcoming-and-historical-payments-journey/src/lib/helpers/utils.ts","../../../../libs/manage-upcoming-and-historical-payments-journey/src/lib/models/config.model.ts","../../../../libs/manage-upcoming-and-historical-payments-journey/src/lib/services/config.service.ts","../../../../libs/manage-upcoming-and-historical-payments-journey/src/lib/components/item/upcoming-payments-item.component.ts","../../../../libs/manage-upcoming-and-historical-payments-journey/src/lib/components/item/upcoming-payments-item.component.html","../../../../libs/manage-upcoming-and-historical-payments-journey/src/lib/components/item-group/upcoming-payments-item-group.component.ts","../../../../libs/manage-upcoming-and-historical-payments-journey/src/lib/components/item-group/upcoming-payments-item-group.component.html","../../../../libs/manage-upcoming-and-historical-payments-journey/src/lib/components/list/upcoming-payments-list.component.ts","../../../../libs/manage-upcoming-and-historical-payments-journey/src/lib/components/list/upcoming-payments-list.component.html","../../../../libs/manage-upcoming-and-historical-payments-journey/src/lib/models/payments.model.ts","../../../../libs/manage-upcoming-and-historical-payments-journey/src/lib/services/payments.service.ts","../../../../libs/manage-upcoming-and-historical-payments-journey/src/lib/components/payment-list-container/payments-list-container.component.ts","../../../../libs/manage-upcoming-and-historical-payments-journey/src/lib/components/payment-list-container/payments-list-container.component.html","../../../../libs/manage-upcoming-and-historical-payments-journey/src/lib/manage-upcoming-and-historical-payments-journey.component.ts","../../../../libs/manage-upcoming-and-historical-payments-journey/src/lib/services/navigation.service.ts","../../../../libs/manage-upcoming-and-historical-payments-journey/src/lib/views/history-payments-view/history-payments-view.component.ts","../../../../libs/manage-upcoming-and-historical-payments-journey/src/lib/views/payments-container-view/upcoming-and-history-payments-tab-container-view.component.ts","../../../../libs/manage-upcoming-and-historical-payments-journey/src/lib/views/payments-container-view/upcoming-and-history-payments-tab-container-view.component.html","../../../../libs/manage-upcoming-and-historical-payments-journey/src/lib/views/upcoming-payments-view/upcoming-payments-view.component.ts","../../../../libs/manage-upcoming-and-historical-payments-journey/src/lib/manage-upcoming-and-historical-payments-journey.module.ts","../../../../libs/manage-upcoming-and-historical-payments-journey/src/index.ts","../../../../libs/manage-upcoming-and-historical-payments-journey/src/backbase-manage-upcoming-and-historical-payments-journey-ang.ts"],"sourcesContent":["import { IdentifiedPaymentOrder } from '@backbase/data-ang/payment-order';\n\nexport abstract class CommunicationService {\n  abstract navigateToEditPayment(_: IdentifiedPaymentOrder): void;\n}\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\n\n@Component({\n  selector: 'bb-upcoming-payments-cancel-payment-confirmation',\n  templateUrl: 'cancel-payment-confirmation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class UpcomingPaymentsCancelPaymentConfirmationComponent {\n  readonly modelOptions = {\n    backdrop: 'static',\n    keyboard: false,\n  };\n\n  /**\n   * Indicator for confirmation dialog open state.\n   * Default value is `false`.\n   */\n  @Input() isOpen = false;\n  /**\n   * Indicator for recurring payment state.\n   * Default value is `false`.\n   */\n  @Input() isRecurring = false;\n  /**\n   * Changes will be triggered on keepPayment event emit.\n   */\n  @Output() keepPayment = new EventEmitter();\n  /**\n   * Changes will be triggered on cancelPayment event emit.\n   */\n  @Output() cancelPayment = new EventEmitter();\n\n  onKeepPaymentClick() {\n    this.keepPayment.emit();\n  }\n  onCancelPaymentClick() {\n    this.cancelPayment.emit();\n  }\n}\n","<bb-modal-ui [isOpen]=\"isOpen\" [modalOptions]=\"modelOptions\">\n  <bb-modal-header-ui data-role=\"cancel-payment-confirmation-header\">\n    <ng-template bbCustomModalHeader>\n      <h2 i18n=\"Cancel payment|Dialog header@@upcoming-payments.recurring.confirm.dialog.header\">\n        {isRecurring, select, true {Cancel Recurring Payment?} other {Cancel Upcoming Payment?}}\n      </h2>\n    </ng-template>\n  </bb-modal-header-ui>\n\n  <bb-modal-body-ui data-role=\"cancel-payment-confirmation-body\">\n    <ng-template bbCustomModalBody>\n      <ng-container\n        i18n=\"\n          Confirmation message body|confirmation message for cancel payment\n          dialog@@upcoming-payments.confirm.dialog.body.message\"\n      >\n        {isRecurring, select, true {This recurring payment will be permanently cancelled.} other {This upcoming payment\n        will be permanently cancelled.}}\n      </ng-container>\n    </ng-template>\n  </bb-modal-body-ui>\n\n  <bb-modal-footer-ui #footerRef data-role=\"cancel-payment-confirmation-footer\">\n    <ng-template bbCustomModalFooter>\n      <div class=\"bb-button-bar\">\n        <button\n          bbButton\n          class=\"bb-button-bar__button\"\n          (click)=\"onCancelPaymentClick()\"\n          color=\"danger\"\n          data-role=\"cancel-payment-confirm-btn\"\n          i18n=\"Cancel payment|Request payment cancellation@@upcoming-payments.confirm.dialog.action.cancelPayment\"\n        >\n          Cancel payment\n        </button>\n\n        <button\n          bbButton\n          class=\"bb-button-bar__button\"\n          (click)=\"onKeepPaymentClick()\"\n          color=\"link\"\n          data-role=\"keep-payment-btn\"\n          i18n=\"\n            Keep payment|keep payment and close confirmation dialog@@upcoming-payments.confirm.dialog.action.keepPayment\"\n        >\n          Not now\n        </button>\n      </div>\n    </ng-template>\n  </bb-modal-footer-ui>\n</bb-modal-ui>\n","export const P2P_PAYMENT_TYPE = 'P2P_TRANSFER';\nexport const P2P_REASON_CODES = {\n  pending: 'PP01',\n  inProcess: 'PP02',\n};\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport {\n  CounterpartyAccount,\n  IdentifiedPaymentOrder,\n  IdentifiedTransaction as IdentifiedCreditTransaction,\n  OriginatorAccount,\n} from '@backbase/data-ang/payment-order';\nimport { PaymentCardNumberFormat } from '@backbase/ui-ang/payment-card-number-pipe';\nimport { P2P_PAYMENT_TYPE } from '../../helpers/constants';\nimport { ManageUpcomingAndHistoricalPaymentsJourneyConfiguration } from '../../models/config.model';\n\n@Component({\n  selector: 'bb-upcoming-payments-details-list',\n  templateUrl: 'upcoming-payments-details-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class UpcomingPaymentsDetailsListComponent {\n  readonly accountNumberFormat: PaymentCardNumberFormat = {\n    length: 36,\n    maskRange: [0, -4],\n    segments: 4,\n  };\n  /**\n   * Payment order details\n   */\n  @Input() payment?: IdentifiedPaymentOrder;\n  /**\n   * Journey configs\n   */\n  @Input() config?: ManageUpcomingAndHistoricalPaymentsJourneyConfiguration;\n\n  public get transactionInformation(): IdentifiedCreditTransaction | undefined {\n    return this.payment?.transferTransactionInformation;\n  }\n  get originatorAccount(): CounterpartyAccount | OriginatorAccount | undefined {\n    return this.transactionInformation?.counterparty?.role === 'DEBTOR'\n      ? this.payment?.transferTransactionInformation?.counterpartyAccount\n      : this.payment?.originatorAccount;\n  }\n  get counterPartyAccount() {\n    return this.transactionInformation?.counterparty?.role === 'DEBTOR'\n      ? this.payment?.originatorAccount\n      : this.payment?.transferTransactionInformation?.counterpartyAccount;\n  }\n  get paymentTypeInfo(): string {\n    const text = this.config?.paymentTypeInfoTexts[this.payment?.paymentType || ''];\n    return $localize`:@@upcoming-and-history-payments-details.payment-type-info:${text || ''}`;\n  }\n\n  get isAccountNumber() {\n    const scheme = this.payment?.transferTransactionInformation?.counterpartyAccount?.identification?.schemeName;\n    return ['IBAN', 'BBAN'].includes(scheme || '');\n  }\n\n  get isP2PTransfer() {\n    return this.payment?.paymentType === P2P_PAYMENT_TYPE;\n  }\n}\n","<div class=\"break-word bb-block bb-block--lg\">\n  <div class=\"bb-text-bold\" i18n=\"Paying From Account@@upcoming-payments.payment.details.fromAccount.name\">\n    From account\n  </div>\n  <div>\n    {{\n      transactionInformation?.counterparty?.role === 'DEBTOR'\n        ? transactionInformation?.counterparty?.name\n        : payment?.originator?.name\n    }}\n  </div>\n  <div class=\"bb-block bb-block--md\" data-role=\"paying-from-account\">\n    <div class=\"contextual-alternates-off\" *ngIf=\"config?.maskAccounts; else unmaskedAccount\">\n      {{ originatorAccount?.identification?.identification | paymentCardNumber: accountNumberFormat | slice: -14 }}\n    </div>\n    <ng-template #unmaskedAccount>\n      {{ originatorAccount?.identification?.identification }}\n    </ng-template>\n  </div>\n\n  <div class=\"bb-text-bold\" i18n=\"Counter Party Name@@upcoming-payments.payment.details.toAccount.details\">\n    To recipient\n  </div>\n  <div data-role=\"counter-party-name\">\n    {{\n      transactionInformation?.counterparty?.role === 'DEBTOR'\n        ? payment?.originator?.name\n        : transactionInformation?.counterparty?.name\n    }}\n  </div>\n  <div class=\"bb-block bb-block--md\" data-role=\"counter-party-account\">\n    <div\n      class=\"contextual-alternates-off\"\n      *ngIf=\"config?.maskAccounts && isAccountNumber; else unmaskedCounterpartyTemp\"\n    >\n      {{ counterPartyAccount?.identification?.identification | paymentCardNumber: accountNumberFormat | slice: -14 }}\n    </div>\n    <ng-template #unmaskedCounterpartyTemp>\n      {{ counterPartyAccount?.identification?.identification }}\n    </ng-template>\n  </div>\n  <ng-container *ngIf=\"payment?.paymentSetupId && isP2PTransfer\">\n    <div\n      class=\"bb-text-bold\"\n      i18n=\"@@upcoming-payments.payment.details.toAccount.confirmation-number\"\n      data-role=\"payment-details-confirmation-number-title\"\n    >\n      Confirmation number\n    </div>\n    <div data-role=\"payment-details-confirmation-number\">\n      {{ payment?.paymentSetupId }}\n    </div>\n  </ng-container>\n</div>\n\n<hr class=\"bb-block bb-block--lg\" />\n\n<ng-container *ngIf=\"payment?.paymentMode !== 'RECURRING'; else recurringTemp\">\n  <div class=\"bb-text-bold\" i18n=\"Execution Date@@upcoming-payments.payment.details.executionDate\">Send date</div>\n  <div class=\"bb-block bb-block--md\" data-role=\"execution-date\">\n    {{ payment?.schedule?.nextExecutionDate || payment?.requestedExecutionDate | date: 'longDate' }}\n  </div>\n</ng-container>\n\n<ng-template #recurringTemp>\n  <div class=\"bb-text-bold\" i18n=\"Start Date@@upcoming-payments.payment.details.schedule.startDate\">Start date</div>\n  <div class=\"bb-block bb-block--md\" data-role=\"start-date\">\n    {{ payment?.schedule?.startDate | date: 'longDate' }}\n  </div>\n\n  <ng-container *ngIf=\"payment?.schedule?.endDate\">\n    <div class=\"bb-text-bold\" i18n=\"End Date@@upcoming-payments.payment.details.schedule.endDate\">End date</div>\n    <div class=\"bb-block bb-block--md\" data-role=\"end-date\">\n      {{ payment?.schedule?.endDate | date: 'longDate' }}\n    </div>\n  </ng-container>\n\n  <ng-container *ngIf=\"payment?.schedule?.transferFrequency\">\n    <div class=\"bb-text-bold\" i18n=\"Recurring Frequency@@upcoming-payments.payment.details.schedule.transferFrequency\">\n      Frequency\n    </div>\n    <div class=\"bb-block bb-block--md\" data-role=\"recurring-frequency\">\n      {{ payment?.schedule?.transferFrequency | titlecase }}\n    </div>\n  </ng-container>\n\n  <ng-container *ngIf=\"payment?.schedule?.repeat\">\n    <div class=\"bb-text-bold\" i18n=\"Number of Occurrences@@upcoming-payments.payment.details.schedule.repeat\">\n      Number of occurrences\n    </div>\n    <div class=\"bb-block bb-block--md\">\n      {{ payment?.schedule?.repeat }}\n    </div>\n  </ng-container>\n</ng-template>\n\n<ng-container *ngIf=\"transactionInformation?.remittanceInformation\">\n  <div class=\"bb-text-bold\" i18n=\"Description@@upcoming-payments.payment.details.remittanceInformation.content\">\n    Description\n  </div>\n  <div class=\"bb-block bb-block--md break-word\" data-role=\"description\">\n    {{ transactionInformation?.remittanceInformation?.content }}\n  </div>\n</ng-container>\n\n<ng-container *ngIf=\"paymentTypeInfo\">\n  <hr class=\"bb-block bb-block--lg\" />\n  <div class=\"bb-text-bold\" i18n=\"@@upcoming-payments.payment.details.payment-type\">Payment Type</div>\n  <div class=\"bb-block bb-block--md break-word\">\n    {{ paymentTypeInfo }}\n  </div>\n</ng-container>\n","import { IdentifiedPaymentOrder, Status } from '@backbase/data-ang/payment-order';\nimport { UpcomingPaymentsGroup } from '../models/payments.model';\nimport { P2P_PAYMENT_TYPE, P2P_REASON_CODES } from './constants';\n\nexport const mapPaymentOrdersToUpcomingPayments = (payments: IdentifiedPaymentOrder[]): UpcomingPaymentsGroup[] => {\n  return payments.reduce<UpcomingPaymentsGroup[]>((acc, item) => {\n    const executionDate = item.schedule?.nextExecutionDate || item.requestedExecutionDate || '';\n    const index = acc.findIndex(upcomingPayment => upcomingPayment.executionDate === executionDate);\n    if (index <= -1) {\n      acc.push({ executionDate, items: [item] });\n    } else {\n      acc[index].items.push(item);\n    }\n    return acc;\n  }, []);\n};\n\nexport const mapStatusText = (payment?: IdentifiedPaymentOrder): { text: string; color: string } | undefined => {\n  const reasonCodeMap = {\n    [P2P_REASON_CODES.pending]: { text: 'Pending', color: 'warning' },\n    [P2P_REASON_CODES.inProcess]: {\n      text: 'Accepted by recipient',\n      color: '',\n    },\n  };\n\n  switch (payment?.status) {\n    case Status.ACCEPTED:\n      return payment?.paymentType === P2P_PAYMENT_TYPE ? reasonCodeMap[payment?.reasonCode || ''] : undefined;\n    case Status.REJECTED:\n      return { text: 'Rejected', color: 'danger' };\n    case Status.CANCELLED:\n      return { text: 'Cancelled', color: 'info' };\n    case Status.PROCESSED:\n      return { text: 'Sent to recipient', color: '' };\n    default:\n      return undefined;\n  }\n};\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\nimport { IdentifiedPaymentOrder } from '@backbase/data-ang/payment-order';\nimport { P2P_PAYMENT_TYPE, P2P_REASON_CODES } from '../../helpers/constants';\nimport { mapStatusText } from '../../helpers/mappers';\nimport { ManageUpcomingAndHistoricalPaymentsJourneyConfiguration } from '../../models/config.model';\n\n@Component({\n  selector: 'bb-upcoming-payments-details',\n  templateUrl: 'upcoming-payments-details.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class UpcomingPaymentsDetailsComponent {\n  readonly p2pReasonCodes = P2P_REASON_CODES;\n  readonly p2pPaymentType = P2P_PAYMENT_TYPE;\n  /**\n   * Indicator for details dialog open state.\n   * Default value is `false`.\n   */\n  @Input() isOpen = false;\n  /**\n   * Selected payment data.\n   */\n  @Input() payment?: IdentifiedPaymentOrder;\n  /**\n   * Journey configs\n   */\n  @Input() config?: ManageUpcomingAndHistoricalPaymentsJourneyConfiguration;\n  /**\n   * Changes will be triggered on cancelPayment event emit.\n   */\n  @Output() cancelPayment = new EventEmitter();\n  /**\n   * Changes will be triggered on close event emit.\n   */\n  @Output() close = new EventEmitter();\n  /**\n   * Changes will be triggered on editPayment event emit.\n   */\n  @Output() editPayment = new EventEmitter<IdentifiedPaymentOrder>();\n  /**\n   * Maps the status texts\n   */\n  get statusText(): { text: string; color: string } | undefined {\n    const statusText = mapStatusText(this.payment);\n    return (\n      statusText && {\n        text: $localize`:@@upcoming-payments-list-item-badge:${statusText.text}`,\n        color: statusText.color,\n      }\n    );\n  }\n\n  onCancelPayment() {\n    this.cancelPayment.emit();\n  }\n\n  onClose() {\n    this.isOpen = false;\n    this.close.emit();\n  }\n\n  onEditPayment() {\n    this.editPayment.emit(this.payment);\n  }\n}\n","<bb-modal-ui [isOpen]=\"isOpen\" (cancel)=\"onClose()\" (confirm)=\"onClose()\">\n  <bb-modal-header-ui>\n    <ng-template bbCustomModalHeader>\n      <div class=\"bb-upcoming-payments-details-header__wrapper bb-block--lg\">\n        <div class=\"bb-block--sm\">\n          <bb-icon-ui\n            [name]=\"payment?.paymentMode === 'RECURRING' ? 'repeat' : 'call-made'\"\n            [size]=\"'xl'\"\n            backgroundType=\"square\"\n            color=\"{{ payment?.paymentMode === 'RECURRING' ? 'secondary' : 'inactive' }}\"\n          ></bb-icon-ui>\n        </div>\n\n        <div\n          class=\"bb-text-bold bb-block--sm\"\n          *ngIf=\"payment?.transferTransactionInformation?.counterparty as counterparty\"\n        >\n          {{ counterparty?.role === 'DEBTOR' ? payment?.originator?.name : counterparty?.name }}\n        </div>\n\n        <div class=\"bb-heading-3 bb-block--sm\">\n          <bb-amount-ui\n            [currency]=\"payment?.transferTransactionInformation?.instructedAmount?.currencyCode\"\n            [amount]=\"payment?.transferTransactionInformation?.instructedAmount?.amount\"\n            [mapCurrency]=\"config?.uiComponentProps?.mapCurrency\"\n          ></bb-amount-ui>\n        </div>\n        <bb-badge-ui\n          *ngIf=\"statusText?.text && statusText?.color\"\n          color=\"{{ statusText?.color }}\"\n          text=\"{{ statusText?.text }}\"\n        ></bb-badge-ui>\n        <ng-container *ngIf=\"statusText?.text && !statusText?.color\">\n          <div class=\"bb-inline-stack\">\n            <span class=\"text-muted bb-stack__item bb-stack__item--spacing-sm\">{{ statusText?.text }}</span>\n            <span\n              bbTooltip=\"This payment can’t be cancelled because it has already been accepted by the recipient.\"\n              i18n-bbTooltip=\"@@upcoming-payments-journey.payment-item.details-modal.tooltip\"\n              placement=\"bottom\"\n              triggers=\"hover\"\n            >\n              <bb-icon-ui name=\"info\" class=\"text-muted bb-stack\" size=\"sm\"></bb-icon-ui>\n            </span>\n          </div>\n        </ng-container>\n      </div>\n\n      <button\n        (click)=\"onClose()\"\n        type=\"button\"\n        class=\"bb-upcoming-payments-details__modal-header-button-close\"\n        aria-label=\"Close payment detail dialog\"\n        data-role=\"close-popup-btn\"\n        i18n-aria-label=\"Close payment detail dialog@@upcoming-payemnts.payment.details.header.close\"\n      >\n        <bb-icon-ui name=\"clear\" class=\"bb-stack\"></bb-icon-ui>\n      </button>\n    </ng-template>\n  </bb-modal-header-ui>\n\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody>\n      <bb-upcoming-payments-details-list [payment]=\"payment\" [config]=\"config\"></bb-upcoming-payments-details-list>\n    </ng-template>\n  </bb-modal-body-ui>\n\n  <bb-modal-footer-ui #footerRef>\n    <ng-template bbCustomModalFooter>\n      <div class=\"bb-button-bar\" *ngIf=\"payment?.status === 'ACCEPTED'\">\n        <button\n          bbButton\n          *ngIf=\"!(payment?.reasonCode === p2pReasonCodes.inProcess)\"\n          class=\"bb-button-bar__button\"\n          (click)=\"onCancelPayment()\"\n          color=\"danger\"\n          data-role=\"cancel-payment-btn\"\n          i18n=\"Cancel payment|Cancel selected payment@@upcoming-payments.payment.details.action.cancel\"\n        >\n          Cancel payment\n        </button>\n\n        <button\n          bbButton\n          *ngIf=\"!(payment?.paymentType === p2pPaymentType)\"\n          (click)=\"onEditPayment()\"\n          class=\"bb-button-bar__button\"\n          i18n=\"Edit payment|Edit selected payment@@upcoming-payments.payment.details.action.edit\"\n          type=\"button\"\n        >\n          Edit\n        </button>\n      </div>\n    </ng-template>\n  </bb-modal-footer-ui>\n</bb-modal-ui>\n","import { GetPaymentOrdersRequestParams, IdentifiedPaymentOrder } from '@backbase/data-ang/payment-order';\n\nexport const getDateOnly = (dateArg = new Date()): string => {\n  const date = new Date(dateArg);\n  const month = String(date.getMonth() + 1);\n  const day = String(date.getDate());\n  const year = String(date.getFullYear());\n\n  return `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;\n};\n\nexport const getRelativeDate = (next?: number, ISOStringFormat?: boolean): string => {\n  const date = new Date();\n\n  if (next) {\n    date.setDate(date.getDate() + next);\n  }\n\n  return ISOStringFormat ? date.toISOString() : getDateOnly(date);\n};\n\nexport const sortItems = (\n  payments: IdentifiedPaymentOrder[],\n  sortDirection: GetPaymentOrdersRequestParams['direction'],\n): IdentifiedPaymentOrder[] => {\n  return payments.sort((item1: IdentifiedPaymentOrder, item2: IdentifiedPaymentOrder) => {\n    const item1Date = item1.schedule?.nextExecutionDate || item1.requestedExecutionDate;\n    const item2Date = item2.schedule?.nextExecutionDate || item2.requestedExecutionDate;\n    const sortValue = new Date(item1Date || '').getTime() - new Date(item2Date || '').getTime();\n    return sortDirection === 'ASC' ? sortValue : -sortValue;\n  });\n};\n\nexport const unifyItems = (payments: IdentifiedPaymentOrder[]): IdentifiedPaymentOrder[] => {\n  return payments.reduce((result: IdentifiedPaymentOrder[], item: IdentifiedPaymentOrder) => {\n    const hasPeer = result.some(i => i.id === item.id);\n    return hasPeer ? result : result.concat(item);\n  }, []);\n};\n","import { InjectionToken } from '@angular/core';\nimport { GetPaymentOrdersRequestParams } from '@backbase/data-ang/payment-order';\n\nexport const ManageUpcomingAndHistoricalPaymentsJourneyConfigurationToken =\n  new InjectionToken<ManageUpcomingAndHistoricalPaymentsJourneyConfiguration>(\n    'ManageUpcomingAndHistoricalPaymentsJourneyConfigurationToken injection token',\n  );\n\nexport interface ManageUpcomingAndHistoricalPaymentsJourneyConfiguration {\n  notificationDismissTime: number;\n  maskAccounts: boolean;\n  upcomingPaymentParams: GetPaymentOrdersRequestParams;\n  historyPaymentParams: GetPaymentOrdersRequestParams;\n  paymentTypeInfoTexts: BaseObject<string>;\n  journeyTitle: string;\n  uiComponentProps?: UiComponentProps;\n}\n\nexport interface UiComponentProps {\n  mapCurrency: boolean;\n}\n\nexport interface BaseObject<T> {\n  [key: string]: T;\n}\n","import { Inject, Injectable, Optional } from '@angular/core';\nimport { GetPaymentOrdersRequestParams } from '@backbase/data-ang/payment-order';\nimport { getDateOnly } from '../helpers/utils';\nimport {\n  BaseObject,\n  ManageUpcomingAndHistoricalPaymentsJourneyConfiguration,\n  ManageUpcomingAndHistoricalPaymentsJourneyConfigurationToken,\n  UiComponentProps,\n} from '../models/config.model';\n\nconst configDefaults: ManageUpcomingAndHistoricalPaymentsJourneyConfiguration = {\n  notificationDismissTime: 3000,\n  maskAccounts: false,\n  upcomingPaymentParams: {\n    orderBy: 'requestedExecutionDate',\n    direction: 'ASC',\n    status: ['ACCEPTED'],\n    executionDateFrom: getDateOnly(),\n    nextExecutionDateFrom: getDateOnly(),\n    from: 0,\n    size: 50,\n  },\n  historyPaymentParams: {\n    orderBy: 'requestedExecutionDate',\n    direction: 'DESC',\n    status: ['CANCELLED', 'REJECTED', 'PROCESSED'],\n    from: 0,\n    size: 50,\n  },\n  paymentTypeInfoTexts: {\n    INTERNAL_TRANSFER: 'Internal account transfer',\n    INTRABANK_TRANSFER: 'Pay someone using account number',\n    P2P_TRANSFER: 'Pay someone using mobile number or email address',\n  },\n  journeyTitle: 'Scheduled Transfers',\n  uiComponentProps: {\n    mapCurrency: true,\n  },\n};\n\n@Injectable()\nexport class ManageUpcomingAndHistoricalPaymentsJourneyConfigService {\n  private _config: ManageUpcomingAndHistoricalPaymentsJourneyConfiguration;\n\n  constructor(\n    @Optional()\n    @Inject(ManageUpcomingAndHistoricalPaymentsJourneyConfigurationToken)\n    private readonly config: ManageUpcomingAndHistoricalPaymentsJourneyConfiguration,\n  ) {\n    this._config = { ...configDefaults, ...(this.config || {}) };\n  }\n\n  get defaults(): ManageUpcomingAndHistoricalPaymentsJourneyConfiguration {\n    return configDefaults;\n  }\n\n  get notificationDismissTime(): number {\n    return this._config.notificationDismissTime;\n  }\n  get maskAccounts(): boolean {\n    return this._config.maskAccounts;\n  }\n  get historyPaymentParams(): GetPaymentOrdersRequestParams {\n    return this._config.historyPaymentParams;\n  }\n  get upcomingPaymentParams(): GetPaymentOrdersRequestParams {\n    return this._config.upcomingPaymentParams;\n  }\n  get paymentTypeInfoTexts(): BaseObject<string> {\n    return this._config.paymentTypeInfoTexts;\n  }\n  get journeyTitle(): string {\n    return this._config.journeyTitle;\n  }\n  get uiComponentProps(): UiComponentProps | undefined {\n    return this._config.uiComponentProps;\n  }\n}\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Optional, Output } from '@angular/core';\nimport {\n  IdentifiedPaymentOrder,\n  IdentifiedTransaction as IdentifiedCreditTransaction,\n} from '@backbase/data-ang/payment-order';\nimport { CommunicationService } from '../../communication.service';\nimport { P2P_PAYMENT_TYPE, P2P_REASON_CODES } from '../../helpers/constants';\nimport { mapStatusText } from '../../helpers/mappers';\nimport { ManageUpcomingAndHistoricalPaymentsJourneyConfigService as ConfigService } from '../../services/config.service';\n\n@Component({\n  selector: 'bb-upcoming-payments-item',\n  templateUrl: 'upcoming-payments-item.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class UpcomingPaymentsItemComponent {\n  readonly p2pReasonCodes = P2P_REASON_CODES;\n  readonly p2pPaymentType = P2P_PAYMENT_TYPE;\n  /**\n   * the upcoming payment Item.\n   */\n  @Input() payment?: IdentifiedPaymentOrder;\n  /**\n   * Changes will be triggered on cancelPayment event emit.\n   */\n  @Output() cancelPayment = new EventEmitter();\n\n  constructor(@Optional() private readonly communicatonService: CommunicationService, readonly config: ConfigService) {}\n\n  public get transactionInformation(): IdentifiedCreditTransaction | undefined {\n    return this.payment?.transferTransactionInformation;\n  }\n\n  public get schedule() {\n    return this.payment?.schedule?.transferFrequency;\n  }\n  public get isRecurring() {\n    return this.payment?.paymentMode === 'RECURRING';\n  }\n\n  public get statusText(): { text: string; color: string } | undefined {\n    const statusText = mapStatusText(this.payment);\n    return (\n      statusText && {\n        text: $localize`:@@upcoming-payments-list-item-badge:${statusText.text}`,\n        color: statusText.color,\n      }\n    );\n  }\n\n  onCancelClick(event: Event) {\n    event.stopPropagation();\n    this.cancelPayment.emit();\n  }\n\n  onEditClick(event: Event) {\n    if (this.payment) {\n      event.stopPropagation();\n      this.communicatonService?.navigateToEditPayment(this.payment);\n    }\n  }\n}\n","<div class=\"bb-stack\" data-role=\"upcoming-payment-item\">\n  <bb-icon-ui\n    name=\"{{ isRecurring ? 'repeat' : 'call-made' }}\"\n    class=\"bb-stack__item bb-stack__item--spacing-md\"\n    backgroundType=\"square\"\n    size=\"lg\"\n    color=\"{{ isRecurring ? 'secondary' : 'inactive' }}\"\n  ></bb-icon-ui>\n  <ng-container *ngIf=\"transactionInformation\">\n    <div class=\"bb-stack__item bb-stack__item--fill bb-ellipsis bb-ellipsis--single-line\">\n      <div class=\"bb-stack bb-block bb-block--xs\">\n        <span class=\"sr-only\" i18n=\"screenReader@@upcoming-payments.group.item.counterparty\">\n          Counter party name:\n        </span>\n        <div\n          class=\"bb-text-bold bb-stack__item bb-stack__item--spacing-md bb-ellipsis bb-ellipsis--single-line\"\n          data-role=\"upcoming-payment-item-counterparty-name\"\n        >\n          {{\n            transactionInformation?.counterparty?.role === 'DEBTOR'\n              ? payment?.originator?.name\n              : transactionInformation?.counterparty?.name\n          }}\n        </div>\n        <bb-badge-ui\n          *ngIf=\"statusText?.text && statusText?.color\"\n          class=\"bb-stack__item\"\n          color=\"{{ statusText?.color }}\"\n          text=\"{{ statusText?.text }}\"\n        ></bb-badge-ui>\n      </div>\n      <div class=\"bb-inline-stack text-muted bb-subtitle\">\n        <span i18n=\"@@upcoming-payments.group.item.from-label\">From&nbsp;</span>\n        <div class=\"bb-inline-stack__item bb-inline-stack__item--spacing-none bb-block bb-block--full-width\">\n          <bb-ellipsis-ui\n            [text]=\"\n              transactionInformation?.counterparty?.role === 'DEBTOR'\n                ? transactionInformation?.counterparty?.name\n                : payment?.originator?.name\n            \"\n          ></bb-ellipsis-ui>\n        </div>\n        <div *ngIf=\"payment?.paymentMode === 'RECURRING'\" class=\"bb-inline-stack__item\">\n          <span class=\"sr-only\" i18n=\"screenReader@@upcoming-payments.group.item.paymentMode\"> Payment Mode: </span>\n          <span> - {{ schedule | titlecase }} </span>\n        </div>\n      </div>\n    </div>\n    <div class=\"bb-stack__item bb-text-align-right\">\n      <div class=\"bb-block bb-block--xs bb-text-align-right bb-text-bold\">\n        <span class=\"sr-only\" i18n=\"screenReader@@upcoming-payments.group.item.amount\"> Amount: </span>\n        <bb-amount-ui\n          data-role=\"upcoming-payment-item-amount\"\n          [currency]=\"transactionInformation?.instructedAmount?.currencyCode\"\n          [amount]=\"transactionInformation?.instructedAmount?.amount\"\n          [mapCurrency]=\"config.uiComponentProps?.mapCurrency\"\n        ></bb-amount-ui>\n      </div>\n\n      <ng-container *ngIf=\"this.payment?.status === 'ACCEPTED'\">\n        <button\n          bbButton\n          *ngIf=\"!(payment?.paymentType === p2pPaymentType)\"\n          color=\"link-text\"\n          buttonSize=\"sm\"\n          class=\"bb-stack__item bb-stack__item--spacing-lg\"\n          (click)=\"onEditClick($event)\"\n          (keydown.enter)=\"onEditClick($event)\"\n          (keydown.space)=\"onEditClick($event)\"\n          i18n=\"@@upcoming-payments.group.item.button.edit\"\n        >\n          Edit\n        </button>\n        <button\n          bbButton\n          *ngIf=\"!(payment?.reasonCode === p2pReasonCodes.inProcess)\"\n          color=\"link-text\"\n          buttonSize=\"sm\"\n          class=\"bb-stack__item bb-text-warning bb-text-danger\"\n          (click)=\"onCancelClick($event)\"\n          (keydown.enter)=\"onCancelClick($event)\"\n          (keydown.space)=\"onCancelClick($event)\"\n          i18n=\"@@upcoming-payments.group.item.button.cancel\"\n          data-role=\"upcoming-payment-item-cancel-button\"\n        >\n          Cancel\n        </button>\n      </ng-container>\n      <ng-container *ngIf=\"payment?.reasonCode === p2pReasonCodes.inProcess && payment?.status === 'ACCEPTED'\">\n        <div class=\"bb-inline-stack\">\n          <span\n            class=\"text-muted bb-subtitle bb-stack__item bb-stack__item--spacing-xs\"\n            i18n=\"@@upcoming-payments-journey.payment-item.ready-status.text\"\n            >Accepted</span\n          >\n          <span\n            bbTooltip=\"This payment can’t be cancelled or edited because it has already been accepted by the recipient.\"\n            i18n-bbTooltip=\"@@upcoming-payments-journey.payment-item.ready-status.tooltip\"\n            placement=\"bottom\"\n            triggers=\"hover\"\n          >\n            <bb-icon-ui name=\"info\" class=\"text-muted bb-stack\" size=\"sm\"></bb-icon-ui>\n          </span>\n        </div>\n      </ng-container>\n    </div>\n  </ng-container>\n</div>\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\nimport { IdentifiedPaymentOrder } from '@backbase/data-ang/payment-order';\nimport { getRelativeDate } from '../../helpers/utils';\nimport { UpcomingPaymentsGroup } from '../../models/payments.model';\n\n@Component({\n  selector: 'bb-upcoming-payments-item-group',\n  templateUrl: './upcoming-payments-item-group.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class UpcomingPaymentsItemGroupComponent {\n  /**\n   * The upcoming payment.\n   */\n  @Input() paymentsGroup?: UpcomingPaymentsGroup;\n  /**\n   * Changes will be triggered on paymentItemClick event emit.\n   */\n  @Output() paymentItemClick = new EventEmitter<IdentifiedPaymentOrder>();\n  /**\n   *On cancel event emit.\n   */\n  @Output() cancelPayment = new EventEmitter<IdentifiedPaymentOrder>();\n\n  onPaymentItemClick(paymentItem?: IdentifiedPaymentOrder) {\n    this.paymentItemClick.emit(paymentItem);\n  }\n\n  trackPaymentItem(_: number, payment?: { requestedExecutionDate: string }) {\n    return payment ? payment.requestedExecutionDate : undefined;\n  }\n\n  formatExecutionDate(): string | undefined {\n    let result = this.paymentsGroup?.executionDate;\n\n    if (result === getRelativeDate()) {\n      result = 'today';\n    } else if (result === getRelativeDate(1)) {\n      result = 'tomorrow';\n    }\n\n    return result;\n  }\n\n  onCancelPayment(payment: IdentifiedPaymentOrder): void {\n    this.cancelPayment.emit(payment);\n  }\n}\n","<!-- Execution date -->\n<div\n  class=\"bb-stack bb-subheader bb-text-support bb-block bb-block--xl\"\n  i18n=\"@@upcoming-payments.group.header\"\n  data-role=\"group-item-label\"\n>\n  {formatExecutionDate(), select, today {Today} tomorrow {Tomorrow} other\n  {{{ paymentsGroup?.executionDate | date:'longDate'}}} }\n</div>\n<!-- group of payments -->\n<ng-container *ngIf=\"paymentsGroup?.items?.length > 0\">\n  <div class=\"bb-block bb-block--sm\">\n    <ul class=\"bb-list\">\n      <li\n        *ngFor=\"let payment of paymentsGroup?.items; trackBy: trackPaymentItem\"\n        class=\"bb-list__item bb-list__item--no-separator\"\n      >\n        <div\n          data-role=\"group-item-row\"\n          role=\"button\"\n          tabindex=\"0\"\n          (keydown.enter)=\"onPaymentItemClick(payment)\"\n          (click)=\"onPaymentItemClick(payment)\"\n        >\n          <bb-upcoming-payments-item\n            [payment]=\"payment\"\n            (cancelPayment)=\"onCancelPayment(payment)\"\n          ></bb-upcoming-payments-item>\n        </div>\n      </li>\n    </ul>\n  </div>\n</ng-container>\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\nimport { IdentifiedPaymentOrder } from '@backbase/data-ang/payment-order';\nimport { LoadMoreParams } from '@backbase/ui-ang/load-button';\nimport { UpcomingPaymentsGroup } from '../../models/payments.model';\n\n@Component({\n  selector: 'bb-upcoming-payments-list',\n  templateUrl: 'upcoming-payments-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class UpcomingPaymentsListComponent {\n  /**\n   * The upcoming payment list.\n   */\n  @Input() upcomingPayments?: UpcomingPaymentsGroup[] = [];\n  /**\n   * Total count for payment.\n   * Default value is `0`.\n   */\n  @Input() totalCount = 0;\n  /**\n   * Indicator for load more loading state.\n   * Default value is `false`.\n   */\n  @Input() loading = false;\n  /**\n   * From parameter for load more payments request.\n   * Default value is `0`.\n   */\n  @Input() loadMoreFrom = 0;\n  /**\n   * Size parameter for load more payments request.\n   * Default value is `0`.\n   */\n  @Input() loadMoreSize = 0;\n  /**\n   * changes will be triggered on paymentItemClick event emit.\n   */\n  @Output() paymentItemClick = new EventEmitter<IdentifiedPaymentOrder>();\n  /**\n   * changes will be triggered on loadMoreParam event emit.\n   */\n  @Output() loadMoreParam = new EventEmitter<LoadMoreParams>();\n  /**\n   *On cancel event emit.\n   */\n  @Output() cancelPayment = new EventEmitter<IdentifiedPaymentOrder>();\n\n  loadMoreParamChange(event: LoadMoreParams) {\n    this.loadMoreFrom = event.from;\n    this.loadMoreParam.emit(event);\n  }\n\n  onPaymentItemClick(paymentItem: IdentifiedPaymentOrder) {\n    this.paymentItemClick.emit(paymentItem);\n  }\n\n  trackPaymentsGroup(_: number, paymentsGroup?: UpcomingPaymentsGroup): string | undefined {\n    return paymentsGroup ? paymentsGroup.executionDate : undefined;\n  }\n\n  onCancelPayment(payment: IdentifiedPaymentOrder) {\n    this.cancelPayment.emit(payment);\n  }\n\n  get hasMore(): boolean {\n    const currentCount = this.loadMoreFrom * this.loadMoreSize + this.loadMoreSize;\n    return currentCount < this.totalCount;\n  }\n}\n","<ng-container *ngIf=\"upcomingPayments && upcomingPayments?.length > 0; else emptyState\">\n  <div class=\"bb-list bb-block bb-block--xl\">\n    <div class=\"bb-list__item\" *ngFor=\"let paymentsGroup of upcomingPayments; trackBy: trackPaymentsGroup\">\n      <bb-upcoming-payments-item-group\n        (paymentItemClick)=\"onPaymentItemClick($event)\"\n        [paymentsGroup]=\"paymentsGroup\"\n        (cancelPayment)=\"onCancelPayment($event)\"\n        data-role=\"upcoming-payment-group-item\"\n      ></bb-upcoming-payments-item-group>\n    </div>\n  </div>\n  <div class=\"bb-text-align-center\" *ngIf=\"hasMore || loading\">\n    <bb-load-button-ui\n      color=\"link\"\n      i18n=\"Load more payment|Load more button for loading more payments@@upcoming-payments.load.more\"\n      data-role=\"load-more-btn\"\n      [isLoading]=\"loading\"\n      [size]=\"loadMoreSize\"\n      [from]=\"loadMoreFrom\"\n      [totalCount]=\"totalCount\"\n      (paramChange)=\"loadMoreParamChange($event)\"\n    >\n      Load more\n    </bb-load-button-ui>\n  </div>\n</ng-container>\n<ng-template #emptyState>\n  <div class=\"bb-state-container\">\n    <bb-empty-state-ui\n      title=\"No Payments\"\n      i18n-title=\"@@upcoming-payments.no.payments.title\"\n      subtitle=\"You do not have any payments to be displayed.\"\n      i18n-subtitle=\"@@upcoming-payments.no.payments.subTitle\"\n      iconSize=\"xl\"\n      iconModifier=\"loans\"\n    ></bb-empty-state-ui>\n  </div>\n</ng-template>\n","import { GetPaymentOrdersRequestParams, IdentifiedPaymentOrder } from '@backbase/data-ang/payment-order';\n\nexport interface PaymentsResponse {\n  items: IdentifiedPaymentOrder[];\n  totalCount: number;\n}\nexport interface UpcomingPaymentResponse {\n  items: UpcomingPaymentsGroup[];\n  totalCount: number;\n}\n\nexport interface UpcomingPaymentsGroup {\n  items: IdentifiedPaymentOrder[];\n  executionDate?: string;\n}\n\nexport enum PaymentActionsTypes {\n  LoadPayments = 'LoadPayments',\n  LoadMore = 'LoadMore',\n  ReturnCachedData = 'ReturnCachedPayments',\n}\n\nexport interface PaymentState extends GetPaymentOrdersRequestParams {\n  type?: PaymentActionsTypes;\n}\n","import { HttpResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport {\n  GetPaymentOrdersRequestParams,\n  IdentifiedPaymentOrder,\n  PaymentOrderCancelPostResponse,\n  PaymentOrdersHttpService,\n} from '@backbase/data-ang/payment-order';\nimport { BehaviorSubject, combineLatest, merge, Observable, of, ReplaySubject, Subject } from 'rxjs';\nimport { distinctUntilChanged, filter, finalize, map, shareReplay, switchMap, tap } from 'rxjs/operators';\nimport { sortItems, unifyItems } from '../helpers/utils';\nimport { PaymentActionsTypes, PaymentsResponse, PaymentState } from '../models/payments.model';\n\n@Injectable()\nexport class PaymentService {\n  private readonly loadMore$ = new BehaviorSubject<GetPaymentOrdersRequestParams['from']>(undefined);\n  private readonly loadPayments$ = new ReplaySubject<GetPaymentOrdersRequestParams>(1);\n  private readonly returnCachedData$ = new Subject<void>();\n  private readonly loadingSub$ = new ReplaySubject<boolean>(1);\n  private readonly actingSub$ = new ReplaySubject<boolean>(1);\n  private payments?: PaymentsResponse;\n  private totalCounts = { withExecutionDate: 0, withNextExecutionDate: 0 };\n  /**\n   * Observable flag that checks whether a payment is loading\n   */\n  readonly loading$ = this.loadingSub$.pipe(distinctUntilChanged());\n  /**\n   * Observable to check the payment type\n   */\n  readonly acting$ = this.actingSub$.pipe(distinctUntilChanged());\n\n  private readonly paymentActions$ = combineLatest([\n    this.loadPayments$.pipe(map(params => ({ type: PaymentActionsTypes.LoadPayments, ...params }))),\n    this.loadMore$.pipe(map(from => ({ type: PaymentActionsTypes.LoadMore, from }))),\n  ]).pipe(\n    map(([state, loadMore]) => ({ ...state, ...(loadMore.from ? loadMore : null) })),\n    filter((action: PaymentState) => action.type !== undefined),\n  );\n\n  private readonly paymentState$ = merge(\n    this.paymentActions$,\n    this.returnCachedData$.pipe(map(() => ({ type: PaymentActionsTypes.ReturnCachedData }))),\n  ).pipe(\n    switchMap(({ type, ...params }) => {\n      if (type === PaymentActionsTypes.ReturnCachedData) {\n        return of(this.payments);\n      }\n\n      const isLoadMore = type === PaymentActionsTypes.LoadMore;\n      this.loadingSub$.next(true);\n      return this.combinePaymentCalls(params).pipe(\n        map(response => this.handlePaymentSuccess({ ...response, isLoadMore })),\n        finalize(() => this.loadingSub$.next(false)),\n      );\n    }),\n    shareReplay(),\n  );\n\n  /**\n   * Getter for the payments\n   */\n  public get payments$() {\n    return this.paymentState$;\n  }\n\n  constructor(private readonly paymentOrdersService: PaymentOrdersHttpService) {}\n\n  /**\n   * Loads the upcoming payments\n   *\n   * @returns\n   */\n  loadPayments(params?: GetPaymentOrdersRequestParams) {\n    this.loadPayments$.next(params);\n  }\n\n  /**\n   * Loads more payments\n   *\n   * @param from Loads from value\n   * @returns\n   */\n  loadMore(from: number) {\n    this.loadMore$.next(from);\n  }\n\n  /**\n   * Cancels a payment order\n   *\n   * @param paymentOrderId Payment order id\n   * @param version Payment version\n   */\n  cancelPayment(paymentOrderId: string, version: number): Observable<HttpResponse<PaymentOrderCancelPostResponse>> {\n    this.actingSub$.next(true);\n    return this.paymentOrdersService\n      .postCancelByPaymentOrderId(\n        {\n          paymentOrderId,\n          paymentOrderCancelPostRequest: { version },\n        },\n        'response',\n      )\n      .pipe(\n        finalize(() => this.actingSub$.next(false)),\n        tap(() => {\n          this.handleCancelPaymentSuccess(paymentOrderId);\n        }),\n      );\n  }\n\n  private handleCancelPaymentSuccess(paymentOrderId: string) {\n    if (this.payments) {\n      const newItems = this.payments.items.filter(item => item.id !== paymentOrderId);\n      this.payments = {\n        items: newItems,\n        totalCount: this.payments.totalCount,\n      };\n      this.returnCachedData$.next();\n    }\n  }\n\n  private handlePaymentSuccess(payload: PaymentsResponse & { isLoadMore: boolean }) {\n    const orders: IdentifiedPaymentOrder[] = [];\n    if (payload.isLoadMore) {\n      const existingPayments = this.payments?.items || [];\n      orders.push(...existingPayments);\n    }\n\n    this.payments = {\n      items: [...orders, ...payload.items],\n      totalCount: payload.totalCount || payload.items.length,\n    };\n\n    return this.payments;\n  }\n\n  private fetchPayments(params: GetPaymentOrdersRequestParams): Observable<PaymentsResponse> {\n    return this.paymentOrdersService.getPaymentOrders(params, 'response').pipe(\n      map(response => {\n        const totalCount = response.headers.get('x-total-count');\n        return {\n          totalCount: Number(totalCount),\n          items: response.body || [],\n        };\n      }),\n    );\n  }\n\n  private combinePaymentCalls(params: GetPaymentOrdersRequestParams): Observable<PaymentsResponse> {\n    /* Payment-order endpoint doesn't allow to make a call with both nextExecutionDateFrom and executionDateFrom parameters.\n     * nextExecutionDateFrom is needed for recurring payments, executionDateFrom is needed for both recurring and one-off payments\n     */\n    if (params.nextExecutionDateFrom && params.executionDateFrom) {\n      return this.handleMultipleCalls(params);\n    } else {\n      return this.fetchPayments(params);\n    }\n  }\n\n  private handleMultipleCalls(params: GetPaymentOrdersRequestParams) {\n    const { nextExecutionDateFrom, executionDateFrom, size, ...others } = params;\n    const sizePerCall = (size || 0) / 2; // Divide pageSize with 2 because there will be two calls\n    let callWithNextExecution = this.fetchPayments({ ...others, nextExecutionDateFrom, size: sizePerCall });\n    let callWithExecution = this.fetchPayments({ ...others, executionDateFrom, size: sizePerCall });\n\n    const hasMore = (totalCount: number) => (params?.from || 0) * sizePerCall < totalCount;\n    const mapPaymentCalls = (call: Observable<PaymentsResponse>, totalCount: number) => {\n      return hasMore(totalCount) ? call : of({ items: [], totalCount });\n    };\n\n    if (params.from && params.from > 0) {\n      callWithNextExecution = mapPaymentCalls(callWithNextExecution, this.totalCounts.withNextExecutionDate);\n      callWithExecution = mapPaymentCalls(callWithExecution, this.totalCounts.withExecutionDate);\n    }\n\n    return combineLatest([callWithExecution, callWithNextExecution]).pipe(\n      map(([firstCall, secondCall]) => {\n        const items = [...firstCall.items, ...secondCall.items];\n        this.totalCounts = {\n          withExecutionDate: firstCall.totalCount,\n          withNextExecutionDate: secondCall.totalCount,\n        };\n\n        return {\n          // Take highest value by multiplying it in order to produce load-more button logic correctly\n          totalCount: Math.max(firstCall.totalCount, secondCall.totalCount) * 2,\n          items: unifyItems(sortItems(items, params.direction || 'DESC')),\n        };\n      }),\n    );\n  }\n}\n","import { HttpErrorResponse } from '@angular/common/http';\nimport { ChangeDetectionStrategy, Component, Input, OnDestroy, OnInit, Optional } from '@angular/core';\nimport { IdentifiedPaymentOrder } from '@backbase/data-ang/payment-order';\nimport { LoadMoreParams } from '@backbase/ui-ang/load-button';\nimport { NotificationService } from '@backbase/ui-ang/notification';\nimport { Observable, of, Subject } from 'rxjs';\nimport { catchError, takeUntil } from 'rxjs/operators';\nimport { CommunicationService } from '../../communication.service';\nimport { UpcomingPaymentResponse } from '../../models/payments.model';\nimport { ManageUpcomingAndHistoricalPaymentsJourneyConfigService as ConfigService } from '../../services/config.service';\nimport { PaymentService } from '../../services/payments.service';\n\n@Component({\n  selector: 'bb-payments-list-container',\n  templateUrl: 'payments-list-container.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentsListContainerComponent implements OnInit, OnDestroy {\n  openConfirmation = false;\n  error?: HttpErrorResponse;\n  loadMoreFrom = 0;\n  readonly acting$ = this.journeyDataService.acting$;\n  readonly loading$ = this.journeyDataService.loading$;\n  selectedPaymentItem?: IdentifiedPaymentOrder;\n  paymentItemToCancel?: IdentifiedPaymentOrder;\n\n  private readonly destroy$ = new Subject();\n\n  /**\n   * Payments stream\n   */\n  @Input() payments$?: Observable<UpcomingPaymentResponse | undefined>;\n  /**\n   * Flag if component is rendering history payments\n   */\n  @Input() isHistoryPayments = false;\n\n  get pageSize(): number | undefined {\n    return this.isHistoryPayments\n      ? this.configService.historyPaymentParams.size\n      : this.configService.upcomingPaymentParams.size;\n  }\n\n  constructor(\n    private readonly journeyDataService: PaymentService,\n    readonly configService: ConfigService,\n    private readonly notificationService: NotificationService,\n    @Optional() private readonly communicatonService: CommunicationService,\n  ) {}\n\n  ngOnInit() {\n    this.payments$ = this.payments$?.pipe(\n      catchError(error => {\n        this.error = error;\n        return of(undefined);\n      }),\n    );\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  onPaymentItemClick(selectedPaymentItem: IdentifiedPaymentOrder): void {\n    this.selectedPaymentItem = selectedPaymentItem;\n  }\n\n  onLoadMoreParam(params: LoadMoreParams): void {\n    this.journeyDataService.loadMore(params.from);\n    this.loadMoreFrom = this.loadMoreFrom + 1;\n  }\n\n  onConfirmCancelPayment(confirmed: boolean) {\n    this.openConfirmation = false;\n    const paymentItem = this.paymentItemToCancel;\n    this.paymentItemToCancel = undefined;\n    if (!confirmed) {\n      return;\n    }\n    this.selectedPaymentItem = undefined;\n    if (paymentItem) {\n      const creditorName = paymentItem.transferTransactionInformation?.counterparty?.name;\n      const isRecurring = this.isRecurringPayment(paymentItem);\n\n      this.journeyDataService\n        .cancelPayment(paymentItem.id, paymentItem.version)\n        .pipe(takeUntil(this.destroy$))\n        .subscribe(\n          () => {\n            this.showNotification(true, {\n              header: $localize`:@@upcoming-payments-cancel-success-header:Payment cancelled`,\n              message: isRecurring\n                ? $localize`:@@upcoming-payments-cancel-success-msg-recurring:Recurring payment to \"${creditorName}\" has been cancelled successfully.`\n                : $localize`:@@upcoming-payments-cancel-success-msg:Upcoming payment to \"${creditorName}\" has been cancelled successfully.`,\n            });\n          },\n          () => {\n            this.showNotification(false, {\n              header: $localize`:@@upcoming-payments-cancel-fail-header:Failed to Cancel Payment!`,\n              message: $localize`:@@upcoming-payments-cancel-fail-msg:Failed to cancel The payment to \"${creditorName}\".`,\n            });\n          },\n        );\n    }\n  }\n\n  private showNotification(success: boolean, notification: { header: string; message: string }) {\n    this.notificationService.showNotification({\n      dismissible: true,\n      ttl: this.configService.notificationDismissTime,\n      modifier: success ? 'success' : 'error',\n      ...notification,\n    });\n  }\n\n  isRecurringPayment(payment: IdentifiedPaymentOrder | undefined): boolean {\n    return payment?.paymentMode === 'RECURRING';\n  }\n\n  onCloseDetails(): void {\n    this.selectedPaymentItem = undefined;\n  }\n\n  onCancelPayment(paymentItem: IdentifiedPaymentOrder): void {\n    this.paymentItemToCancel = paymentItem;\n    this.openConfirmation = true;\n  }\n\n  onEditPayment(payment: IdentifiedPaymentOrder): void {\n    this.communicatonService?.navigateToEditPayment(payment);\n  }\n}\n","<ng-container *ngIf=\"!error; else errorState\">\n  <ng-container *ngIf=\"payments$ | async as payments; else loadingPayments\">\n    <bb-upcoming-payments-list\n      *ngIf=\"!(acting$ | async); else acting\"\n      [upcomingPayments]=\"payments?.items\"\n      [totalCount]=\"payments?.totalCount\"\n      [loadMoreSize]=\"pageSize\"\n      [loadMoreFrom]=\"loadMoreFrom\"\n      [loading]=\"loading$ | async\"\n      (paymentItemClick)=\"onPaymentItemClick($event)\"\n      (loadMoreParam)=\"onLoadMoreParam($event)\"\n      (cancelPayment)=\"onCancelPayment($event)\"\n    ></bb-upcoming-payments-list>\n\n    <ng-template #acting>\n      <bb-loading-indicator-ui\n        text=\"updating data...\"\n        i18n-text=\"@@bb-upcoming-and-history-payments-journey.payment-list-container.acting-placeholder\"\n      ></bb-loading-indicator-ui>\n    </ng-template>\n\n    <bb-upcoming-payments-cancel-payment-confirmation\n      *ngIf=\"openConfirmation\"\n      [isOpen]=\"openConfirmation\"\n      [isRecurring]=\"isRecurringPayment(paymentItemToCancel)\"\n      (cancelPayment)=\"onConfirmCancelPayment(true)\"\n      (keepPayment)=\"onConfirmCancelPayment(false)\"\n    ></bb-upcoming-payments-cancel-payment-confirmation>\n\n    <bb-upcoming-payments-details\n      *ngIf=\"selectedPaymentItem\"\n      [isOpen]=\"!!selectedPaymentItem\"\n      (close)=\"onCloseDetails()\"\n      [payment]=\"selectedPaymentItem\"\n      [config]=\"configService\"\n      (cancelPayment)=\"onCancelPayment(selectedPaymentItem)\"\n      (editPayment)=\"onEditPayment(selectedPaymentItem)\"\n    ></bb-upcoming-payments-details>\n  </ng-container>\n</ng-container>\n\n<ng-template #loadingPayments>\n  <bb-loading-indicator-ui\n    text=\"Loading data...\"\n    text-i18n=\"@@bb-upcoming-and-history-payments-journey.payment-list-container.loading-placeholder\"\n  ></bb-loading-indicator-ui>\n</ng-template>\n\n<ng-template #errorState>\n  <div class=\"bb-state-container\">\n    <bb-empty-state-ui\n      i18n-title=\"@@upcoming-payments.history.error.generic.title\"\n      title=\"Page couldn't load\"\n      i18n-subtitle=\"@@upcoming-payments.history.error.generic.subtitle\"\n      subtitle=\"Try to reload the page or contact the system administrator.\"\n      iconSize=\"xxl\"\n      iconModifier=\"error\"\n    ></bb-empty-state-ui>\n  </div>\n</ng-template>\n","import { Component } from '@angular/core';\nimport '@angular/localize/init';\nimport { ManageUpcomingAndHistoricalPaymentsJourneyConfigService } from './services/config.service';\n\n@Component({\n  selector: 'bb-manage-upcoming-and-historical-payments-journey',\n  template: `\n    <ng-container>\n      <bb-header-ui\n        headingType=\"h2\"\n        headingClasses=\"bb-heading-1 bb-block bb-block--xl\"\n        [heading]=\"title\"\n        i18n-heading=\"@@upcoming-and-history-payments-journey.header\"\n      ></bb-header-ui>\n      <router-outlet></router-outlet>\n    </ng-container>\n  `,\n})\nexport class ManageUpcomingAndHistoricalPaymentsJourneyComponent {\n  get title() {\n    return $localize`:@@upcoming-history-payments-journey-title:${this.configService.journeyTitle}`;\n  }\n  constructor(private readonly configService: ManageUpcomingAndHistoricalPaymentsJourneyConfigService) {}\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute, NavigationExtras, Router } from '@angular/router';\n\n@Injectable()\nexport class ManageUpcomingAndHistoricalPaymentsNavigationService {\n  constructor(private readonly router: Router, private readonly route: ActivatedRoute) {}\n  /**\n   * Navigation to history payments view tab\n   */\n  navigateToHistory(extras?: NavigationExtras): void {\n    this.router.navigate(['history'], { relativeTo: this.route, ...(extras || {}) });\n  }\n  /**\n   * Navigation to upcoming payments view tab\n   */\n  navigateToUpcoming(extras?: NavigationExtras): void {\n    this.router.navigate(['upcoming'], { relativeTo: this.route, ...(extras || {}) });\n  }\n  /**\n   * Method to return correct tab index in order to activate it\n   */\n  mapRouteToTabIndex(): 1 | 0 {\n    const routeSections = this.router.url.split('/');\n    return routeSections[routeSections.length - 1] === 'history' ? 1 : 0;\n  }\n}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { mapPaymentOrdersToUpcomingPayments } from '../../helpers/mappers';\nimport { UpcomingPaymentResponse } from '../../models/payments.model';\nimport { ManageUpcomingAndHistoricalPaymentsJourneyConfigService as ConfigService } from '../../services/config.service';\nimport { PaymentService } from '../../services/payments.service';\n\n@Component({\n  selector: 'bb-history-payments-view',\n  template: `\n    <div class=\"card card-body\">\n      <bb-payments-list-container [payments$]=\"payments$\" [isHistoryPayments]=\"true\"> </bb-payments-list-container>\n    </div>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [PaymentService],\n})\nexport class HistoryPaymentsViewComponent implements OnInit {\n  readonly payments$ = this.dataService.payments$.pipe(\n    map(\n      payload =>\n        payload && {\n          items: mapPaymentOrdersToUpcomingPayments(payload.items),\n          totalCount: payload.totalCount,\n        },\n    ),\n  ) as Observable<UpcomingPaymentResponse | undefined>;\n\n  constructor(private readonly dataService: PaymentService, private readonly config: ConfigService) {}\n\n  ngOnInit() {\n    this.dataService.loadPayments(this.config.historyPaymentParams);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { ManageUpcomingAndHistoricalPaymentsNavigationService } from '../../services/navigation.service';\n\n@Component({\n  selector: 'bb-upcoming-and-history-payments-tab-container-view',\n  templateUrl: 'upcoming-and-history-payments-tab-container-view.component.html',\n})\nexport class UpcomingAndHistoryPaymentsTabContainerViewComponent implements OnInit {\n  initialTabSelection = 0;\n\n  constructor(\n    private readonly navigationService: ManageUpcomingAndHistoricalPaymentsNavigationService,\n    private readonly route: ActivatedRoute,\n  ) {}\n\n  ngOnInit() {\n    this.initialTabSelection = this.navigationService.mapRouteToTabIndex();\n  }\n\n  onTabSelect(tabIndex: 0 | 1): void {\n    if (tabIndex === 0) {\n      this.navigationService.navigateToUpcoming({ relativeTo: this.route });\n    } else {\n      this.navigationService.navigateToHistory({ relativeTo: this.route });\n    }\n  }\n}\n","<bb-tab-group-ui\n  [initialSelection]=\"initialTabSelection\"\n  (select)=\"onTabSelect($event)\"\n  class=\"bb-upcoming-payments-tab-container\"\n>\n  <bb-tab-ui i18n=\"@@bb-upcoming-and-history-payments-journey.upcoming-tab\">Schedule</bb-tab-ui>\n  <bb-tab-ui i18n=\"@@bb-upcoming-and-history-payments-journey.history-tab\">History</bb-tab-ui>\n</bb-tab-group-ui>\n\n<router-outlet></router-outlet>\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { mapPaymentOrdersToUpcomingPayments } from '../../helpers/mappers';\nimport { UpcomingPaymentResponse } from '../../models/payments.model';\nimport { ManageUpcomingAndHistoricalPaymentsJourneyConfigService as ConfigService } from '../../services/config.service';\nimport { PaymentService } from '../../services/payments.service';\n\n@Component({\n  selector: 'bb-upcoming-payments-view',\n  template: `\n    <div class=\"card card-body\">\n      <bb-payments-list-container [payments$]=\"payments$\"></bb-payments-list-container>\n    </div>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [PaymentService],\n})\nexport class UpcomingPaymentsViewComponent implements OnInit {\n  readonly payments$ = this.dataService.payments$.pipe(\n    map(\n      payload =>\n        payload && {\n          items: mapPaymentOrdersToUpcomingPayments(payload.items),\n          totalCount: payload.totalCount,\n        },\n    ),\n  ) as Observable<UpcomingPaymentResponse | undefined>;\n\n  constructor(private readonly dataService: PaymentService, private readonly config: ConfigService) {}\n\n  ngOnInit() {\n    this.dataService.loadPayments(this.config.upcomingPaymentParams);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { provideRoutes, Route, RouterModule } from '@angular/router';\nimport { BackbaseCoreModule } from '@backbase/foundation-ang/core';\nimport { AmountModule } from '@backbase/ui-ang/amount';\nimport { BadgeModule } from '@backbase/ui-ang/badge';\nimport { ButtonModule } from '@backbase/ui-ang/button';\nimport { EllipsisModule } from '@backbase/ui-ang/ellipsis';\nimport { EmptyStateModule } from '@backbase/ui-ang/empty-state';\nimport { HeaderModule } from '@backbase/ui-ang/header';\nimport { IconModule } from '@backbase/ui-ang/icon';\nimport { LoadButtonModule } from '@backbase/ui-ang/load-button';\nimport { LoadingIndicatorModule } from '@backbase/ui-ang/loading-indicator';\nimport { ModalModule } from '@backbase/ui-ang/modal';\nimport { PaymentCardNumberModule } from '@backbase/ui-ang/payment-card-number-pipe';\nimport { TabModule } from '@backbase/ui-ang/tab';\nimport { TooltipModule } from '@backbase/ui-ang/tooltip-directive';\nimport { UpcomingPaymentsCancelPaymentConfirmationComponent } from './components/cancel-payment-confirmation/cancel-payment-confirmation.component';\nimport { UpcomingPaymentsDetailsListComponent } from './components/details-list/upcoming-payments-details-list.component';\nimport { UpcomingPaymentsDetailsComponent } from './components/details-modal/upcoming-payments-details.component';\nimport { UpcomingPaymentsItemGroupComponent } from './components/item-group/upcoming-payments-item-group.component';\nimport { UpcomingPaymentsItemComponent } from './components/item/upcoming-payments-item.component';\nimport { UpcomingPaymentsListComponent } from './components/list/upcoming-payments-list.component';\nimport { PaymentsListContainerComponent } from './components/payment-list-container/payments-list-container.component';\nimport { ManageUpcomingAndHistoricalPaymentsJourneyComponent } from './manage-upcoming-and-historical-payments-journey.component';\nimport { ManageUpcomingAndHistoricalPaymentsJourneyConfigService } from './services/config.service';\nimport { ManageUpcomingAndHistoricalPaymentsNavigationService } from './services/navigation.service';\nimport { HistoryPaymentsViewComponent } from './views/history-payments-view/history-payments-view.component';\nimport { UpcomingAndHistoryPaymentsTabContainerViewComponent } from './views/payments-container-view/upcoming-and-history-payments-tab-container-view.component';\nimport { UpcomingPaymentsViewComponent } from './views/upcoming-payments-view/upcoming-payments-view.component';\n\nconst defaultRoute: Route = {\n  path: '',\n  component: ManageUpcomingAndHistoricalPaymentsJourneyComponent,\n  children: [\n    {\n      path: '',\n      component: UpcomingPaymentsViewComponent,\n    },\n  ],\n};\n\nconst components = [\n  ManageUpcomingAndHistoricalPaymentsJourneyComponent,\n  UpcomingPaymentsViewComponent,\n  HistoryPaymentsViewComponent,\n  UpcomingAndHistoryPaymentsTabContainerViewComponent,\n  PaymentsListContainerComponent,\n  UpcomingPaymentsListComponent,\n  UpcomingPaymentsItemGroupComponent,\n  UpcomingPaymentsItemComponent,\n  UpcomingPaymentsDetailsComponent,\n  UpcomingPaymentsDetailsListComponent,\n  UpcomingPaymentsCancelPaymentConfirmationComponent,\n];\n\nconst uiModules = [\n  TabModule,\n  IconModule,\n  AmountModule,\n  LoadButtonModule,\n  EmptyStateModule,\n  LoadingIndicatorModule,\n  ModalModule,\n  ButtonModule,\n  HeaderModule,\n  PaymentCardNumberModule,\n  TooltipModule,\n  EllipsisModule,\n  BadgeModule,\n];\n\n@NgModule({\n  declarations: [...components],\n  imports: [\n    CommonModule,\n    RouterModule,\n    BackbaseCoreModule.withConfig({\n      classMap: {\n        ManageUpcomingAndHistoricalPaymentsJourneyComponent,\n      },\n    }),\n    ...uiModules,\n  ],\n  providers: [\n    ManageUpcomingAndHistoricalPaymentsJourneyConfigService,\n    ManageUpcomingAndHistoricalPaymentsNavigationService,\n  ],\n  exports: [...uiModules, ...components],\n})\nexport class ManageUpcomingAndHistoricalPaymentsJourneyModule {\n  static forRoot(\n    data: { route: Route; [key: string]: any } = { route: defaultRoute },\n  ): ModuleWithProviders<ManageUpcomingAndHistoricalPaymentsJourneyModule> {\n    return {\n      ngModule: ManageUpcomingAndHistoricalPaymentsJourneyModule,\n      providers: [provideRoutes([data.route])],\n    };\n  }\n}\n","// Services\nexport { CommunicationService as ManageUpcomingAndHistoricalPaymentsCommunicationService } from './lib/communication.service';\nexport { UpcomingPaymentsCancelPaymentConfirmationComponent as ӨUpcomingPaymentsCancelPaymentConfirmationComponent } from './lib/components/cancel-payment-confirmation/cancel-payment-confirmation.component';\nexport { UpcomingPaymentsDetailsListComponent as ӨUpcomingPaymentsDetailsListComponent } from './lib/components/details-list/upcoming-payments-details-list.component';\nexport { UpcomingPaymentsDetailsComponent as ӨUpcomingPaymentsDetailsComponent } from './lib/components/details-modal/upcoming-payments-details.component';\nexport { UpcomingPaymentsItemGroupComponent as ӨUpcomingPaymentsItemGroupComponent } from './lib/components/item-group/upcoming-payments-item-group.component';\nexport { UpcomingPaymentsItemComponent as ӨUpcomingPaymentsItemComponent } from './lib/components/item/upcoming-payments-item.component';\n// Ui-components\nexport { UpcomingPaymentsListComponent as ӨUpcomingPaymentsListComponent } from './lib/components/list/upcoming-payments-list.component';\nexport { PaymentsListContainerComponent as ӨPaymentsListContainerComponent } from './lib/components/payment-list-container/payments-list-container.component';\nexport { ManageUpcomingAndHistoricalPaymentsJourneyComponent } from './lib/manage-upcoming-and-historical-payments-journey.component';\nexport { ManageUpcomingAndHistoricalPaymentsJourneyModule } from './lib/manage-upcoming-and-historical-payments-journey.module';\nexport * from './lib/models/config.model';\nexport { ManageUpcomingAndHistoricalPaymentsJourneyConfigService } from './lib/services/config.service';\nexport { ManageUpcomingAndHistoricalPaymentsNavigationService } from './lib/services/navigation.service';\nexport { PaymentService } from './lib/services/payments.service';\nexport { HistoryPaymentsViewComponent } from './lib/views/history-payments-view/history-payments-view.component';\nexport { UpcomingAndHistoryPaymentsTabContainerViewComponent } from './lib/views/payments-container-view/upcoming-and-history-payments-tab-container-view.component';\nexport { UpcomingPaymentsViewComponent } from './lib/views/upcoming-payments-view/upcoming-payments-view.component';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["i2","i1","i5.UpcomingPaymentsDetailsListComponent","i6","i1.CommunicationService","i2.ManageUpcomingAndHistoricalPaymentsJourneyConfigService","i3","i7","i9","i1.UpcomingPaymentsItemComponent","i1.UpcomingPaymentsItemGroupComponent","i4","i1.PaymentService","i4.CommunicationService","i5.UpcomingPaymentsListComponent","i7.UpcomingPaymentsCancelPaymentConfirmationComponent","i8.UpcomingPaymentsDetailsComponent","i10","i1.ManageUpcomingAndHistoricalPaymentsJourneyConfigService","i3.PaymentsListContainerComponent","i1.ManageUpcomingAndHistoricalPaymentsNavigationService"],"mappings":"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"}