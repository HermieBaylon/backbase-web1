import { HttpResponse } from '@angular/common/http';
import { GetPaymentOrdersRequestParams, PaymentOrderCancelPostResponse, PaymentOrdersHttpService } from '@backbase/data-ang/payment-order';
import { Observable } from 'rxjs';
import { PaymentsResponse } from '../models/payments.model';
import * as i0 from "@angular/core";
export declare class PaymentService {
    private readonly paymentOrdersService;
    private readonly loadMore$;
    private readonly loadPayments$;
    private readonly returnCachedData$;
    private readonly loadingSub$;
    private readonly actingSub$;
    private payments?;
    private totalCounts;
    /**
     * Observable flag that checks whether a payment is loading
     */
    readonly loading$: Observable<boolean>;
    /**
     * Observable to check the payment type
     */
    readonly acting$: Observable<boolean>;
    private readonly paymentActions$;
    private readonly paymentState$;
    /**
     * Getter for the payments
     */
    get payments$(): Observable<PaymentsResponse | undefined>;
    constructor(paymentOrdersService: PaymentOrdersHttpService);
    /**
     * Loads the upcoming payments
     *
     * @returns
     */
    loadPayments(params?: GetPaymentOrdersRequestParams): void;
    /**
     * Loads more payments
     *
     * @param from Loads from value
     * @returns
     */
    loadMore(from: number): void;
    /**
     * Cancels a payment order
     *
     * @param paymentOrderId Payment order id
     * @param version Payment version
     */
    cancelPayment(paymentOrderId: string, version: number): Observable<HttpResponse<PaymentOrderCancelPostResponse>>;
    private handleCancelPaymentSuccess;
    private handlePaymentSuccess;
    private fetchPayments;
    private combinePaymentCalls;
    private handleMultipleCalls;
    static ɵfac: i0.ɵɵFactoryDeclaration<PaymentService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<PaymentService>;
}
