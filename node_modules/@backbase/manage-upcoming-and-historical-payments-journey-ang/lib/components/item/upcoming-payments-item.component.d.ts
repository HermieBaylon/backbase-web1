import { EventEmitter } from '@angular/core';
import { IdentifiedPaymentOrder, IdentifiedTransaction as IdentifiedCreditTransaction } from '@backbase/data-ang/payment-order';
import { CommunicationService } from '../../communication.service';
import { ManageUpcomingAndHistoricalPaymentsJourneyConfigService as ConfigService } from '../../services/config.service';
import * as i0 from "@angular/core";
export declare class UpcomingPaymentsItemComponent {
    private readonly communicatonService;
    readonly config: ConfigService;
    readonly p2pReasonCodes: {
        pending: string;
        inProcess: string;
    };
    readonly p2pPaymentType = "P2P_TRANSFER";
    /**
     * the upcoming payment Item.
     */
    payment?: IdentifiedPaymentOrder;
    /**
     * Changes will be triggered on cancelPayment event emit.
     */
    cancelPayment: EventEmitter<any>;
    constructor(communicatonService: CommunicationService, config: ConfigService);
    get transactionInformation(): IdentifiedCreditTransaction | undefined;
    get schedule(): import("@backbase/data-ang/payment-order").Schedule.TransferFrequencyEnum | undefined;
    get isRecurring(): boolean;
    get statusText(): {
        text: string;
        color: string;
    } | undefined;
    onCancelClick(event: Event): void;
    onEditClick(event: Event): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<UpcomingPaymentsItemComponent, [{ optional: true; }, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<UpcomingPaymentsItemComponent, "bb-upcoming-payments-item", never, { "payment": "payment"; }, { "cancelPayment": "cancelPayment"; }, never, never>;
}
