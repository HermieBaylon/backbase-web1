import { EventEmitter } from '@angular/core';
import { IdentifiedPaymentOrder } from '@backbase/data-ang/payment-order';
import { LoadMoreParams } from '@backbase/ui-ang/load-button';
import { UpcomingPaymentsGroup } from '../../models/payments.model';
import * as i0 from "@angular/core";
export declare class UpcomingPaymentsListComponent {
    /**
     * The upcoming payment list.
     */
    upcomingPayments?: UpcomingPaymentsGroup[];
    /**
     * Total count for payment.
     * Default value is `0`.
     */
    totalCount: number;
    /**
     * Indicator for load more loading state.
     * Default value is `false`.
     */
    loading: boolean;
    /**
     * From parameter for load more payments request.
     * Default value is `0`.
     */
    loadMoreFrom: number;
    /**
     * Size parameter for load more payments request.
     * Default value is `0`.
     */
    loadMoreSize: number;
    /**
     * changes will be triggered on paymentItemClick event emit.
     */
    paymentItemClick: EventEmitter<IdentifiedPaymentOrder>;
    /**
     * changes will be triggered on loadMoreParam event emit.
     */
    loadMoreParam: EventEmitter<LoadMoreParams>;
    /**
     *On cancel event emit.
     */
    cancelPayment: EventEmitter<IdentifiedPaymentOrder>;
    loadMoreParamChange(event: LoadMoreParams): void;
    onPaymentItemClick(paymentItem: IdentifiedPaymentOrder): void;
    trackPaymentsGroup(_: number, paymentsGroup?: UpcomingPaymentsGroup): string | undefined;
    onCancelPayment(payment: IdentifiedPaymentOrder): void;
    get hasMore(): boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<UpcomingPaymentsListComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<UpcomingPaymentsListComponent, "bb-upcoming-payments-list", never, { "upcomingPayments": "upcomingPayments"; "totalCount": "totalCount"; "loading": "loading"; "loadMoreFrom": "loadMoreFrom"; "loadMoreSize": "loadMoreSize"; }, { "paymentItemClick": "paymentItemClick"; "loadMoreParam": "loadMoreParam"; "cancelPayment": "cancelPayment"; }, never, never>;
}
