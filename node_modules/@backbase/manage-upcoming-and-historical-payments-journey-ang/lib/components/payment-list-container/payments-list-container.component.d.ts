import { HttpErrorResponse } from '@angular/common/http';
import { OnDestroy, OnInit } from '@angular/core';
import { IdentifiedPaymentOrder } from '@backbase/data-ang/payment-order';
import { LoadMoreParams } from '@backbase/ui-ang/load-button';
import { NotificationService } from '@backbase/ui-ang/notification';
import { Observable } from 'rxjs';
import { CommunicationService } from '../../communication.service';
import { UpcomingPaymentResponse } from '../../models/payments.model';
import { ManageUpcomingAndHistoricalPaymentsJourneyConfigService as ConfigService } from '../../services/config.service';
import { PaymentService } from '../../services/payments.service';
import * as i0 from "@angular/core";
export declare class PaymentsListContainerComponent implements OnInit, OnDestroy {
    private readonly journeyDataService;
    readonly configService: ConfigService;
    private readonly notificationService;
    private readonly communicatonService;
    openConfirmation: boolean;
    error?: HttpErrorResponse;
    loadMoreFrom: number;
    readonly acting$: Observable<boolean>;
    readonly loading$: Observable<boolean>;
    selectedPaymentItem?: IdentifiedPaymentOrder;
    paymentItemToCancel?: IdentifiedPaymentOrder;
    private readonly destroy$;
    /**
     * Payments stream
     */
    payments$?: Observable<UpcomingPaymentResponse | undefined>;
    /**
     * Flag if component is rendering history payments
     */
    isHistoryPayments: boolean;
    get pageSize(): number | undefined;
    constructor(journeyDataService: PaymentService, configService: ConfigService, notificationService: NotificationService, communicatonService: CommunicationService);
    ngOnInit(): void;
    ngOnDestroy(): void;
    onPaymentItemClick(selectedPaymentItem: IdentifiedPaymentOrder): void;
    onLoadMoreParam(params: LoadMoreParams): void;
    onConfirmCancelPayment(confirmed: boolean): void;
    private showNotification;
    isRecurringPayment(payment: IdentifiedPaymentOrder | undefined): boolean;
    onCloseDetails(): void;
    onCancelPayment(paymentItem: IdentifiedPaymentOrder): void;
    onEditPayment(payment: IdentifiedPaymentOrder): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<PaymentsListContainerComponent, [null, null, null, { optional: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<PaymentsListContainerComponent, "bb-payments-list-container", never, { "payments$": "payments$"; "isHistoryPayments": "isHistoryPayments"; }, {}, never, never>;
}
