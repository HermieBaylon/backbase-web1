import { EventEmitter } from '@angular/core';
import { IdentifiedPaymentOrder } from '@backbase/data-ang/payment-order';
import { ManageUpcomingAndHistoricalPaymentsJourneyConfiguration } from '../../models/config.model';
import * as i0 from "@angular/core";
export declare class UpcomingPaymentsDetailsComponent {
    readonly p2pReasonCodes: {
        pending: string;
        inProcess: string;
    };
    readonly p2pPaymentType = "P2P_TRANSFER";
    /**
     * Indicator for details dialog open state.
     * Default value is `false`.
     */
    isOpen: boolean;
    /**
     * Selected payment data.
     */
    payment?: IdentifiedPaymentOrder;
    /**
     * Journey configs
     */
    config?: ManageUpcomingAndHistoricalPaymentsJourneyConfiguration;
    /**
     * Changes will be triggered on cancelPayment event emit.
     */
    cancelPayment: EventEmitter<any>;
    /**
     * Changes will be triggered on close event emit.
     */
    close: EventEmitter<any>;
    /**
     * Changes will be triggered on editPayment event emit.
     */
    editPayment: EventEmitter<IdentifiedPaymentOrder>;
    /**
     * Maps the status texts
     */
    get statusText(): {
        text: string;
        color: string;
    } | undefined;
    onCancelPayment(): void;
    onClose(): void;
    onEditPayment(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<UpcomingPaymentsDetailsComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<UpcomingPaymentsDetailsComponent, "bb-upcoming-payments-details", never, { "isOpen": "isOpen"; "payment": "payment"; "config": "config"; }, { "cancelPayment": "cancelPayment"; "close": "close"; "editPayment": "editPayment"; }, never, never>;
}
