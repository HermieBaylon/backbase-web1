import { DatePeriods, LoadingState, today, unixZeroDay } from '@backbase/account-statement-common-ang';
import { createReducer, on } from '@ngrx/store';
import { loadAccountStatementsBusiness, loadAccountStatementsBusinessSuccess, loadAccountStatementsFailure, updateWidgetPreferences, } from './actions';
export const accountStatementsInitialState = {
    data: [],
    totalCount: 0,
    loading: LoadingState.IDLE,
    error: undefined,
    accountIds: [],
    filterParams: {
        datePeriod: DatePeriods.AllTime,
    },
    widgetPreferences: {
        minimalDate: unixZeroDay(),
        maximumDate: today(),
    },
};
const smartLoadingState = (state, action) => {
    if (action.accountIds && action.accountIds !== state.accountIds)
        return LoadingState.LOADING;
    if (action.filterParams && action.filterParams !== state.filterParams)
        return LoadingState.LOADING_FILTERED;
    if (action.append)
        return LoadingState.LOADING_MORE;
    if ((action.sortingParams && action.sortingParams !== state.sortingParams) ||
        (action.paginationParams && action.paginationParams !== state.paginationParams)) {
        return LoadingState.LOADING_TABLE;
    }
    return LoadingState.LOADING;
};
const reducer = createReducer(accountStatementsInitialState, on(loadAccountStatementsBusiness, (state, action) => (Object.assign(Object.assign({}, state), { loading: smartLoadingState(state, action), error: undefined }))), on(loadAccountStatementsBusinessSuccess, (state, action) => {
    const { accountStatements, accountIds, filterParams, paginationParams, sortingParams, totalCount, append } = action;
    const dataAppendTo = append ? state.data : [];
    return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, state), { loading: LoadingState.IDLE, data: [...dataAppendTo, ...accountStatements], totalCount }), (accountIds && { accountIds })), (filterParams && { filterParams })), (sortingParams && { sortingParams })), (paginationParams && { paginationParams }));
}), on(loadAccountStatementsFailure, (state, action) => (Object.assign(Object.assign({}, state), { error: action.error, loading: LoadingState.IDLE }))), on(updateWidgetPreferences, (state, action) => (Object.assign(Object.assign({}, state), { widgetPreferences: Object.assign(Object.assign({}, state.widgetPreferences), action.widgetPreferences) }))));
// eslint-disable-next-line prefer-arrow/prefer-arrow-functions
export function accountStatementsReducer(state, action) {
    return reducer(state, action);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVkdWNlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL2FjY291bnQtc3RhdGVtZW50LXN0b3JlLWFuZy9zcmMvYWNjb3VudC1zdGF0ZW1lbnRzL3JlZHVjZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBYyxXQUFXLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUNuSCxPQUFPLEVBQVUsYUFBYSxFQUFFLEVBQUUsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUV4RCxPQUFPLEVBQ0wsNkJBQTZCLEVBQzdCLG9DQUFvQyxFQUNwQyw0QkFBNEIsRUFDNUIsdUJBQXVCLEdBQ3hCLE1BQU0sV0FBVyxDQUFDO0FBa0ZuQixNQUFNLENBQUMsTUFBTSw2QkFBNkIsR0FBMkI7SUFDbkUsSUFBSSxFQUFFLEVBQUU7SUFDUixVQUFVLEVBQUUsQ0FBQztJQUNiLE9BQU8sRUFBRSxZQUFZLENBQUMsSUFBSTtJQUMxQixLQUFLLEVBQUUsU0FBUztJQUNoQixVQUFVLEVBQUUsRUFBRTtJQUNkLFlBQVksRUFBRTtRQUNaLFVBQVUsRUFBRSxXQUFXLENBQUMsT0FBTztLQUNoQztJQUNELGlCQUFpQixFQUFFO1FBQ2pCLFdBQVcsRUFBRSxXQUFXLEVBQUU7UUFDMUIsV0FBVyxFQUFFLEtBQUssRUFBRTtLQUNyQjtDQUNGLENBQUM7QUFFRixNQUFNLGlCQUFpQixHQUFHLENBQ3hCLEtBQTZCLEVBQzdCLE1BQTRDLEVBQzlCLEVBQUU7SUFDaEIsSUFBSSxNQUFNLENBQUMsVUFBVSxJQUFJLE1BQU0sQ0FBQyxVQUFVLEtBQUssS0FBSyxDQUFDLFVBQVU7UUFBRSxPQUFPLFlBQVksQ0FBQyxPQUFPLENBQUM7SUFDN0YsSUFBSSxNQUFNLENBQUMsWUFBWSxJQUFJLE1BQU0sQ0FBQyxZQUFZLEtBQUssS0FBSyxDQUFDLFlBQVk7UUFBRSxPQUFPLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQztJQUM1RyxJQUFJLE1BQU0sQ0FBQyxNQUFNO1FBQUUsT0FBTyxZQUFZLENBQUMsWUFBWSxDQUFDO0lBQ3BELElBQ0UsQ0FBQyxNQUFNLENBQUMsYUFBYSxJQUFJLE1BQU0sQ0FBQyxhQUFhLEtBQUssS0FBSyxDQUFDLGFBQWEsQ0FBQztRQUN0RSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsSUFBSSxNQUFNLENBQUMsZ0JBQWdCLEtBQUssS0FBSyxDQUFDLGdCQUFnQixDQUFDLEVBQy9FO1FBQ0EsT0FBTyxZQUFZLENBQUMsYUFBYSxDQUFDO0tBQ25DO0lBQ0QsT0FBTyxZQUFZLENBQUMsT0FBTyxDQUFDO0FBQzlCLENBQUMsQ0FBQztBQUVGLE1BQU0sT0FBTyxHQUFHLGFBQWEsQ0FDM0IsNkJBQTZCLEVBQzdCLEVBQUUsQ0FBQyw2QkFBNkIsRUFBRSxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsRUFBRSxDQUFDLGlDQUNoRCxLQUFLLEtBQ1IsT0FBTyxFQUFFLGlCQUFpQixDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsRUFDekMsS0FBSyxFQUFFLFNBQVMsSUFDaEIsQ0FBQyxFQUNILEVBQUUsQ0FBQyxvQ0FBb0MsRUFBRSxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsRUFBRTtJQUN6RCxNQUFNLEVBQUUsaUJBQWlCLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxnQkFBZ0IsRUFBRSxhQUFhLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxHQUFHLE1BQU0sQ0FBQztJQUNwSCxNQUFNLFlBQVksR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUU5QywrRkFDSyxLQUFLLEtBQ1IsT0FBTyxFQUFFLFlBQVksQ0FBQyxJQUFJLEVBQzFCLElBQUksRUFBRSxDQUFDLEdBQUcsWUFBWSxFQUFFLEdBQUcsaUJBQWlCLENBQUMsRUFDN0MsVUFBVSxLQUNQLENBQUMsVUFBVSxJQUFJLEVBQUUsVUFBVSxFQUFFLENBQUMsR0FDOUIsQ0FBQyxZQUFZLElBQUksRUFBRSxZQUFZLEVBQUUsQ0FBQyxHQUNsQyxDQUFDLGFBQWEsSUFBSSxFQUFFLGFBQWEsRUFBRSxDQUFDLEdBQ3BDLENBQUMsZ0JBQWdCLElBQUksRUFBRSxnQkFBZ0IsRUFBRSxDQUFDLEVBQzdDO0FBQ0osQ0FBQyxDQUFDLEVBQ0YsRUFBRSxDQUFDLDRCQUE0QixFQUFFLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxFQUFFLENBQUMsaUNBQy9DLEtBQUssS0FDUixLQUFLLEVBQUUsTUFBTSxDQUFDLEtBQUssRUFDbkIsT0FBTyxFQUFFLFlBQVksQ0FBQyxJQUFJLElBQzFCLENBQUMsRUFDSCxFQUFFLENBQUMsdUJBQXVCLEVBQUUsQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLEVBQUUsQ0FBQyxpQ0FDMUMsS0FBSyxLQUNSLGlCQUFpQixrQ0FBTyxLQUFLLENBQUMsaUJBQWlCLEdBQUssTUFBTSxDQUFDLGlCQUFpQixLQUM1RSxDQUFDLENBQ0osQ0FBQztBQUVGLCtEQUErRDtBQUMvRCxNQUFNLFVBQVUsd0JBQXdCLENBQUMsS0FBeUMsRUFBRSxNQUFjO0lBQ2hHLE9BQU8sT0FBTyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztBQUNoQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2F0ZWdvcmllcywgRGF0ZVBlcmlvZHMsIExvYWRpbmdTdGF0ZSwgdG9kYXksIHVuaXhaZXJvRGF5IH0gZnJvbSAnQGJhY2tiYXNlL2FjY291bnQtc3RhdGVtZW50LWNvbW1vbi1hbmcnO1xuaW1wb3J0IHsgQWN0aW9uLCBjcmVhdGVSZWR1Y2VyLCBvbiB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcbmltcG9ydCB7IExvYWRBY2NvdW50U3RhdGVtZW50c0J1c2luZXNzUGF5bG9hZCB9IGZyb20gJy4uL21vZGVscy9hY2NvdW50LXN0YXRlbWVudHMtYWN0aW9ucy5tb2RlbCc7XG5pbXBvcnQge1xuICBsb2FkQWNjb3VudFN0YXRlbWVudHNCdXNpbmVzcyxcbiAgbG9hZEFjY291bnRTdGF0ZW1lbnRzQnVzaW5lc3NTdWNjZXNzLFxuICBsb2FkQWNjb3VudFN0YXRlbWVudHNGYWlsdXJlLFxuICB1cGRhdGVXaWRnZXRQcmVmZXJlbmNlcyxcbn0gZnJvbSAnLi9hY3Rpb25zJztcbmltcG9ydCB7IFNvcnRFdmVudCB9IGZyb20gJ0BiYWNrYmFzZS91aS1hbmcvdGFibGUnO1xuaW1wb3J0IHsgQWNjb3VudFN0YXRlbWVudCB9IGZyb20gJ0BiYWNrYmFzZS9kYXRhLWFuZy9hY2NvdW50LXN0YXRlbWVudHMnO1xuaW1wb3J0IHsgUGFnaW5hdGlvblBhcmFtcyB9IGZyb20gJy4uL21vZGVscy9wYWdpbmF0aW9uLXBhcmFtcy5tb2RlbCc7XG5cbi8qKlxuICogU3RhdGUgbW9kZWwgZm9yIHNvcnRpbmcgcGFyYW1ldGVycztcbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCB0eXBlIFNvcnRpbmdQYXJhbXMgPSBTb3J0RXZlbnQ7XG5cbi8qKlxuICogU3RhdGUgbW9kZWwgZm9yIHBhcmFtZXRlcnMgdXNlZCBmb3IgZmlsdGVyaW5nIGFjY291bnQgc3RhdGVtZW50cy5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQWNjb3VudFN0YXRlbWVudHNGaWx0ZXJQYXJhbXMge1xuICAvKipcbiAgICogU3RhcnQgcG9zaXRpb24gb2YgdGhlIGRhdGUgZmlsdGVyLlxuICAgKi9cbiAgZGF0ZUZyb20/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBFbmQgcG9zaXRpb24gb2YgdGhlIGRhdGUgZmlsdGVyLlxuICAgKi9cbiAgZGF0ZVRvPzogc3RyaW5nO1xuICAvKipcbiAgICogUHJlZGVmaW5lZCBkYXRlIHJhbmdlLlxuICAgKi9cbiAgZGF0ZVBlcmlvZD86IERhdGVQZXJpb2RzO1xuICAvKipcbiAgICogU2VsZWN0ZWQgY2F0ZWdvcmllcyBpbiB0aGUgZmlsdGVyLlxuICAgKi9cbiAgY2F0ZWdvcnk/OiBDYXRlZ29yaWVzO1xufVxuXG4vKipcbiAqIFN0YXRlIG1vZGVsIGZvciBwcmVmZXJlbmNlcyBvZiBhIHdpZGdldCwgbWluaW11bSBhbmQgbWF4aW11bSBkYXRlIHRvIGJlIHNldCBpbiBmaWx0ZXIuXG4gKlxuICogQHB1YmxpY1xuICovXG5leHBvcnQgaW50ZXJmYWNlIFdpZGdldFByZWZlcmVuY2VzIHtcbiAgLyoqXG4gICAqIE1pbmltYWwgZGF0ZSB0aGF0IGNhbiBiZSBzZWxlY3RlZCBpbiBkYXRlIGZpbHRlci5cbiAgICovXG4gIG1pbmltYWxEYXRlOiBEYXRlO1xuICAvKipcbiAgICogTWF4aW11bSBkYXRlIHRoYXQgY2FuIGJlIHNlbGVjdGVkIGluIGRhdGUgZmlsdGVyLlxuICAgKi9cbiAgbWF4aW11bURhdGU6IERhdGU7XG59XG5cbi8qKlxuICogU3RhdGUgbW9kZWwgZm9yIGFjY291bnQgc3RhdGVtZW50cy5cbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQWNjb3VudFN0YXRlbWVudHNTdGF0ZSB7XG4gIC8qKiB7QGluaGVyaXREb2MgQWNjb3VudFN0YXRlbWVudH0gKi9cbiAgZGF0YTogQWNjb3VudFN0YXRlbWVudFtdO1xuICAvKioge0Bpbmhlcml0RG9jIExvYWRpbmdTdGF0ZX0gKi9cbiAgbG9hZGluZzogTG9hZGluZ1N0YXRlO1xuICAvKioge0Bpbmhlcml0RG9jIEVycm9yfSAqL1xuICBlcnJvcj86IEVycm9yO1xuICAvKipcbiAgICogUGFyYW1ldGVyIHRoYXQgY29udGFpbnMgdG90YWwgY291bnQgb2Ygc3RhdGVtZW50cyBpbiB0aGUgY3VycmVudCBzZWFyY2guXG4gICAqL1xuICB0b3RhbENvdW50OiBudW1iZXI7XG4gIC8qKlxuICAgKiBQYXJhbWV0ZXIgdGhhdCBrZWVwcyBsaXN0IG9mIHNlbGVjdGVkIGFjY291bnQgSURzLlxuICAgKi9cbiAgYWNjb3VudElkczogc3RyaW5nW107XG4gIC8qKiB7QGluaGVyaXREb2MgQWNjb3VudFN0YXRlbWVudHNGaWx0ZXJQYXJhbXN9ICovXG4gIGZpbHRlclBhcmFtczogQWNjb3VudFN0YXRlbWVudHNGaWx0ZXJQYXJhbXM7XG4gIC8qKiB7QGluaGVyaXREb2MgU29ydGluZ1BhcmFtc30gKi9cbiAgc29ydGluZ1BhcmFtcz86IFNvcnRpbmdQYXJhbXM7XG4gIC8qKiB7QGluaGVyaXREb2MgUGFnaW5hdGlvblBhcmFtc30gKi9cbiAgcGFnaW5hdGlvblBhcmFtcz86IFBhZ2luYXRpb25QYXJhbXM7XG4gIC8qKiB7QGluaGVyaXREb2MgV2lkZ2V0UHJlZmVyZW5jZXN9ICovXG4gIHdpZGdldFByZWZlcmVuY2VzOiBXaWRnZXRQcmVmZXJlbmNlcztcbn1cblxuZXhwb3J0IGNvbnN0IGFjY291bnRTdGF0ZW1lbnRzSW5pdGlhbFN0YXRlOiBBY2NvdW50U3RhdGVtZW50c1N0YXRlID0ge1xuICBkYXRhOiBbXSxcbiAgdG90YWxDb3VudDogMCxcbiAgbG9hZGluZzogTG9hZGluZ1N0YXRlLklETEUsXG4gIGVycm9yOiB1bmRlZmluZWQsXG4gIGFjY291bnRJZHM6IFtdLFxuICBmaWx0ZXJQYXJhbXM6IHtcbiAgICBkYXRlUGVyaW9kOiBEYXRlUGVyaW9kcy5BbGxUaW1lLFxuICB9LFxuICB3aWRnZXRQcmVmZXJlbmNlczoge1xuICAgIG1pbmltYWxEYXRlOiB1bml4WmVyb0RheSgpLFxuICAgIG1heGltdW1EYXRlOiB0b2RheSgpLFxuICB9LFxufTtcblxuY29uc3Qgc21hcnRMb2FkaW5nU3RhdGUgPSAoXG4gIHN0YXRlOiBBY2NvdW50U3RhdGVtZW50c1N0YXRlLFxuICBhY3Rpb246IExvYWRBY2NvdW50U3RhdGVtZW50c0J1c2luZXNzUGF5bG9hZCxcbik6IExvYWRpbmdTdGF0ZSA9PiB7XG4gIGlmIChhY3Rpb24uYWNjb3VudElkcyAmJiBhY3Rpb24uYWNjb3VudElkcyAhPT0gc3RhdGUuYWNjb3VudElkcykgcmV0dXJuIExvYWRpbmdTdGF0ZS5MT0FESU5HO1xuICBpZiAoYWN0aW9uLmZpbHRlclBhcmFtcyAmJiBhY3Rpb24uZmlsdGVyUGFyYW1zICE9PSBzdGF0ZS5maWx0ZXJQYXJhbXMpIHJldHVybiBMb2FkaW5nU3RhdGUuTE9BRElOR19GSUxURVJFRDtcbiAgaWYgKGFjdGlvbi5hcHBlbmQpIHJldHVybiBMb2FkaW5nU3RhdGUuTE9BRElOR19NT1JFO1xuICBpZiAoXG4gICAgKGFjdGlvbi5zb3J0aW5nUGFyYW1zICYmIGFjdGlvbi5zb3J0aW5nUGFyYW1zICE9PSBzdGF0ZS5zb3J0aW5nUGFyYW1zKSB8fFxuICAgIChhY3Rpb24ucGFnaW5hdGlvblBhcmFtcyAmJiBhY3Rpb24ucGFnaW5hdGlvblBhcmFtcyAhPT0gc3RhdGUucGFnaW5hdGlvblBhcmFtcylcbiAgKSB7XG4gICAgcmV0dXJuIExvYWRpbmdTdGF0ZS5MT0FESU5HX1RBQkxFO1xuICB9XG4gIHJldHVybiBMb2FkaW5nU3RhdGUuTE9BRElORztcbn07XG5cbmNvbnN0IHJlZHVjZXIgPSBjcmVhdGVSZWR1Y2VyKFxuICBhY2NvdW50U3RhdGVtZW50c0luaXRpYWxTdGF0ZSxcbiAgb24obG9hZEFjY291bnRTdGF0ZW1lbnRzQnVzaW5lc3MsIChzdGF0ZSwgYWN0aW9uKSA9PiAoe1xuICAgIC4uLnN0YXRlLFxuICAgIGxvYWRpbmc6IHNtYXJ0TG9hZGluZ1N0YXRlKHN0YXRlLCBhY3Rpb24pLFxuICAgIGVycm9yOiB1bmRlZmluZWQsXG4gIH0pKSxcbiAgb24obG9hZEFjY291bnRTdGF0ZW1lbnRzQnVzaW5lc3NTdWNjZXNzLCAoc3RhdGUsIGFjdGlvbikgPT4ge1xuICAgIGNvbnN0IHsgYWNjb3VudFN0YXRlbWVudHMsIGFjY291bnRJZHMsIGZpbHRlclBhcmFtcywgcGFnaW5hdGlvblBhcmFtcywgc29ydGluZ1BhcmFtcywgdG90YWxDb3VudCwgYXBwZW5kIH0gPSBhY3Rpb247XG4gICAgY29uc3QgZGF0YUFwcGVuZFRvID0gYXBwZW5kID8gc3RhdGUuZGF0YSA6IFtdO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLnN0YXRlLFxuICAgICAgbG9hZGluZzogTG9hZGluZ1N0YXRlLklETEUsXG4gICAgICBkYXRhOiBbLi4uZGF0YUFwcGVuZFRvLCAuLi5hY2NvdW50U3RhdGVtZW50c10sXG4gICAgICB0b3RhbENvdW50LFxuICAgICAgLi4uKGFjY291bnRJZHMgJiYgeyBhY2NvdW50SWRzIH0pLFxuICAgICAgLi4uKGZpbHRlclBhcmFtcyAmJiB7IGZpbHRlclBhcmFtcyB9KSxcbiAgICAgIC4uLihzb3J0aW5nUGFyYW1zICYmIHsgc29ydGluZ1BhcmFtcyB9KSxcbiAgICAgIC4uLihwYWdpbmF0aW9uUGFyYW1zICYmIHsgcGFnaW5hdGlvblBhcmFtcyB9KSxcbiAgICB9O1xuICB9KSxcbiAgb24obG9hZEFjY291bnRTdGF0ZW1lbnRzRmFpbHVyZSwgKHN0YXRlLCBhY3Rpb24pID0+ICh7XG4gICAgLi4uc3RhdGUsXG4gICAgZXJyb3I6IGFjdGlvbi5lcnJvcixcbiAgICBsb2FkaW5nOiBMb2FkaW5nU3RhdGUuSURMRSxcbiAgfSkpLFxuICBvbih1cGRhdGVXaWRnZXRQcmVmZXJlbmNlcywgKHN0YXRlLCBhY3Rpb24pID0+ICh7XG4gICAgLi4uc3RhdGUsXG4gICAgd2lkZ2V0UHJlZmVyZW5jZXM6IHsgLi4uc3RhdGUud2lkZ2V0UHJlZmVyZW5jZXMsIC4uLmFjdGlvbi53aWRnZXRQcmVmZXJlbmNlcyB9LFxuICB9KSksXG4pO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWFycm93L3ByZWZlci1hcnJvdy1mdW5jdGlvbnNcbmV4cG9ydCBmdW5jdGlvbiBhY2NvdW50U3RhdGVtZW50c1JlZHVjZXIoc3RhdGU6IEFjY291bnRTdGF0ZW1lbnRzU3RhdGUgfCB1bmRlZmluZWQsIGFjdGlvbjogQWN0aW9uKSB7XG4gIHJldHVybiByZWR1Y2VyKHN0YXRlLCBhY3Rpb24pO1xufVxuIl19