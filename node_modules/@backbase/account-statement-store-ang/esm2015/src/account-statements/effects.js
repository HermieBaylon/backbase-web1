import { __rest } from "tslib";
import { Injectable } from '@angular/core';
import { getTotalCountFromHeaders } from '@backbase/account-statement-common-ang';
import { of } from 'rxjs';
import { catchError, map, switchMap, withLatestFrom } from 'rxjs/operators';
import { loadAccountStatementsBusinessToRequest } from '../helpers/mappers';
import { loadAccountStatementsBusiness, loadAccountStatementsBusinessSuccess, loadAccountStatementsFailure, } from './actions';
import { accountStatementsAccountIds, accountStatementsFilterParams, accountStatementsPaginationParams, accountStatementsSortingParams, accountStatementsWidgetPreferences, } from './selectors';
import { createEffect, ofType } from '@ngrx/effects';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/effects";
import * as i2 from "@backbase/account-statement-common-ang";
import * as i3 from "@ngrx/store";
export class AccountStatementEffects {
    constructor(actions$, dataService, store) {
        this.actions$ = actions$;
        this.dataService = dataService;
        this.store = store;
        this.accountStatementsBusiness$ = createEffect(() => this.actions$.pipe(ofType(loadAccountStatementsBusiness), withLatestFrom(this.store.select(accountStatementsAccountIds), this.store.select(accountStatementsFilterParams), this.store.select(accountStatementsSortingParams), this.store.select(accountStatementsPaginationParams), this.store.select(accountStatementsWidgetPreferences)), switchMap(([action, accountIds, filterParams, sortingParams, paginationParams, widgetPreferences]) => {
            const { append } = action, actionRequestParams = __rest(action, ["append"]);
            return this.dataService
                .getAccountStatementsBusiness(loadAccountStatementsBusinessToRequest(Object.assign({ accountIds,
                filterParams,
                sortingParams,
                paginationParams }, actionRequestParams), widgetPreferences))
                .pipe(map(response => loadAccountStatementsBusinessSuccess(Object.assign({ accountStatements: response.body, totalCount: getTotalCountFromHeaders(response.headers) }, action))), catchError(error => of(loadAccountStatementsFailure({ error }))));
        })));
    }
}
AccountStatementEffects.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementEffects, deps: [{ token: i1.Actions }, { token: i2.AccountStatementDataService }, { token: i3.Store }], target: i0.ɵɵFactoryTarget.Injectable });
AccountStatementEffects.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementEffects });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementEffects, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Actions }, { type: i2.AccountStatementDataService }, { type: i3.Store }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWZmZWN0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvYWNjb3VudC1zdGF0ZW1lbnQtc3RvcmUtYW5nL3NyYy9hY2NvdW50LXN0YXRlbWVudHMvZWZmZWN0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQStCLHdCQUF3QixFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFFL0csT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMxQixPQUFPLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsY0FBYyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDNUUsT0FBTyxFQUFFLHNDQUFzQyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDNUUsT0FBTyxFQUNMLDZCQUE2QixFQUM3QixvQ0FBb0MsRUFDcEMsNEJBQTRCLEdBQzdCLE1BQU0sV0FBVyxDQUFDO0FBQ25CLE9BQU8sRUFDTCwyQkFBMkIsRUFDM0IsNkJBQTZCLEVBQzdCLGlDQUFpQyxFQUNqQyw4QkFBOEIsRUFDOUIsa0NBQWtDLEdBQ25DLE1BQU0sYUFBYSxDQUFDO0FBQ3JCLE9BQU8sRUFBVyxZQUFZLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7OztBQUs5RCxNQUFNLE9BQU8sdUJBQXVCO0lBd0NsQyxZQUNtQixRQUFpQixFQUNqQixXQUF3QyxFQUN4QyxLQUF3QztRQUZ4QyxhQUFRLEdBQVIsUUFBUSxDQUFTO1FBQ2pCLGdCQUFXLEdBQVgsV0FBVyxDQUE2QjtRQUN4QyxVQUFLLEdBQUwsS0FBSyxDQUFtQztRQTFDM0QsK0JBQTBCLEdBQUcsWUFBWSxDQUFDLEdBQUcsRUFBRSxDQUM3QyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FDaEIsTUFBTSxDQUFDLDZCQUE2QixDQUFDLEVBQ3JDLGNBQWMsQ0FDWixJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQywyQkFBMkIsQ0FBQyxFQUM5QyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyw2QkFBNkIsQ0FBQyxFQUNoRCxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyw4QkFBOEIsQ0FBQyxFQUNqRCxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxpQ0FBaUMsQ0FBQyxFQUNwRCxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxrQ0FBa0MsQ0FBQyxDQUN0RCxFQUNELFNBQVMsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsYUFBYSxFQUFFLGdCQUFnQixFQUFFLGlCQUFpQixDQUFDLEVBQUUsRUFBRTtZQUNuRyxNQUFNLEVBQUUsTUFBTSxLQUE2QixNQUFNLEVBQTlCLG1CQUFtQixVQUFLLE1BQU0sRUFBM0MsVUFBa0MsQ0FBUyxDQUFDO1lBQ2xELE9BQU8sSUFBSSxDQUFDLFdBQVc7aUJBQ3BCLDRCQUE0QixDQUMzQixzQ0FBc0MsaUJBRWxDLFVBQVU7Z0JBQ1YsWUFBWTtnQkFDWixhQUFhO2dCQUNiLGdCQUFnQixJQUNiLG1CQUFtQixHQUV4QixpQkFBaUIsQ0FDbEIsQ0FDRjtpQkFDQSxJQUFJLENBQ0gsR0FBRyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQ2Isb0NBQW9DLGlCQUNsQyxpQkFBaUIsRUFBRSxRQUFRLENBQUMsSUFBSSxFQUNoQyxVQUFVLEVBQUUsd0JBQXdCLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxJQUNuRCxNQUFNLEVBQ1QsQ0FDSCxFQUNELFVBQVUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyw0QkFBNEIsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUNqRSxDQUFDO1FBQ04sQ0FBQyxDQUFDLENBQ0gsQ0FDRixDQUFDO0lBTUMsQ0FBQzs7cUhBNUNPLHVCQUF1Qjt5SEFBdkIsdUJBQXVCOzRGQUF2Qix1QkFBdUI7a0JBRG5DLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBY2NvdW50U3RhdGVtZW50RGF0YVNlcnZpY2UsIGdldFRvdGFsQ291bnRGcm9tSGVhZGVycyB9IGZyb20gJ0BiYWNrYmFzZS9hY2NvdW50LXN0YXRlbWVudC1jb21tb24tYW5nJztcblxuaW1wb3J0IHsgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGNhdGNoRXJyb3IsIG1hcCwgc3dpdGNoTWFwLCB3aXRoTGF0ZXN0RnJvbSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IGxvYWRBY2NvdW50U3RhdGVtZW50c0J1c2luZXNzVG9SZXF1ZXN0IH0gZnJvbSAnLi4vaGVscGVycy9tYXBwZXJzJztcbmltcG9ydCB7XG4gIGxvYWRBY2NvdW50U3RhdGVtZW50c0J1c2luZXNzLFxuICBsb2FkQWNjb3VudFN0YXRlbWVudHNCdXNpbmVzc1N1Y2Nlc3MsXG4gIGxvYWRBY2NvdW50U3RhdGVtZW50c0ZhaWx1cmUsXG59IGZyb20gJy4vYWN0aW9ucyc7XG5pbXBvcnQge1xuICBhY2NvdW50U3RhdGVtZW50c0FjY291bnRJZHMsXG4gIGFjY291bnRTdGF0ZW1lbnRzRmlsdGVyUGFyYW1zLFxuICBhY2NvdW50U3RhdGVtZW50c1BhZ2luYXRpb25QYXJhbXMsXG4gIGFjY291bnRTdGF0ZW1lbnRzU29ydGluZ1BhcmFtcyxcbiAgYWNjb3VudFN0YXRlbWVudHNXaWRnZXRQcmVmZXJlbmNlcyxcbn0gZnJvbSAnLi9zZWxlY3RvcnMnO1xuaW1wb3J0IHsgQWN0aW9ucywgY3JlYXRlRWZmZWN0LCBvZlR5cGUgfSBmcm9tICdAbmdyeC9lZmZlY3RzJztcbmltcG9ydCB7IFN0b3JlIH0gZnJvbSAnQG5ncngvc3RvcmUnO1xuaW1wb3J0IHsgQWNjb3VudFN0YXRlbWVudFN0b3JlU3RhdGUgfSBmcm9tICcuLi9hY2NvdW50LXN0YXRlbWVudC5yZWR1Y2VyJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEFjY291bnRTdGF0ZW1lbnRFZmZlY3RzIHtcbiAgYWNjb3VudFN0YXRlbWVudHNCdXNpbmVzcyQgPSBjcmVhdGVFZmZlY3QoKCkgPT5cbiAgICB0aGlzLmFjdGlvbnMkLnBpcGUoXG4gICAgICBvZlR5cGUobG9hZEFjY291bnRTdGF0ZW1lbnRzQnVzaW5lc3MpLFxuICAgICAgd2l0aExhdGVzdEZyb20oXG4gICAgICAgIHRoaXMuc3RvcmUuc2VsZWN0KGFjY291bnRTdGF0ZW1lbnRzQWNjb3VudElkcyksXG4gICAgICAgIHRoaXMuc3RvcmUuc2VsZWN0KGFjY291bnRTdGF0ZW1lbnRzRmlsdGVyUGFyYW1zKSxcbiAgICAgICAgdGhpcy5zdG9yZS5zZWxlY3QoYWNjb3VudFN0YXRlbWVudHNTb3J0aW5nUGFyYW1zKSxcbiAgICAgICAgdGhpcy5zdG9yZS5zZWxlY3QoYWNjb3VudFN0YXRlbWVudHNQYWdpbmF0aW9uUGFyYW1zKSxcbiAgICAgICAgdGhpcy5zdG9yZS5zZWxlY3QoYWNjb3VudFN0YXRlbWVudHNXaWRnZXRQcmVmZXJlbmNlcyksXG4gICAgICApLFxuICAgICAgc3dpdGNoTWFwKChbYWN0aW9uLCBhY2NvdW50SWRzLCBmaWx0ZXJQYXJhbXMsIHNvcnRpbmdQYXJhbXMsIHBhZ2luYXRpb25QYXJhbXMsIHdpZGdldFByZWZlcmVuY2VzXSkgPT4ge1xuICAgICAgICBjb25zdCB7IGFwcGVuZCwgLi4uYWN0aW9uUmVxdWVzdFBhcmFtcyB9ID0gYWN0aW9uO1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhU2VydmljZVxuICAgICAgICAgIC5nZXRBY2NvdW50U3RhdGVtZW50c0J1c2luZXNzKFxuICAgICAgICAgICAgbG9hZEFjY291bnRTdGF0ZW1lbnRzQnVzaW5lc3NUb1JlcXVlc3QoXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBhY2NvdW50SWRzLFxuICAgICAgICAgICAgICAgIGZpbHRlclBhcmFtcyxcbiAgICAgICAgICAgICAgICBzb3J0aW5nUGFyYW1zLFxuICAgICAgICAgICAgICAgIHBhZ2luYXRpb25QYXJhbXMsXG4gICAgICAgICAgICAgICAgLi4uYWN0aW9uUmVxdWVzdFBhcmFtcyxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgd2lkZ2V0UHJlZmVyZW5jZXMsXG4gICAgICAgICAgICApLFxuICAgICAgICAgIClcbiAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgIG1hcChyZXNwb25zZSA9PlxuICAgICAgICAgICAgICBsb2FkQWNjb3VudFN0YXRlbWVudHNCdXNpbmVzc1N1Y2Nlc3Moe1xuICAgICAgICAgICAgICAgIGFjY291bnRTdGF0ZW1lbnRzOiByZXNwb25zZS5ib2R5LFxuICAgICAgICAgICAgICAgIHRvdGFsQ291bnQ6IGdldFRvdGFsQ291bnRGcm9tSGVhZGVycyhyZXNwb25zZS5oZWFkZXJzKSxcbiAgICAgICAgICAgICAgICAuLi5hY3Rpb24sXG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIGNhdGNoRXJyb3IoZXJyb3IgPT4gb2YobG9hZEFjY291bnRTdGF0ZW1lbnRzRmFpbHVyZSh7IGVycm9yIH0pKSksXG4gICAgICAgICAgKTtcbiAgICAgIH0pLFxuICAgICksXG4gICk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBhY3Rpb25zJDogQWN0aW9ucyxcbiAgICBwcml2YXRlIHJlYWRvbmx5IGRhdGFTZXJ2aWNlOiBBY2NvdW50U3RhdGVtZW50RGF0YVNlcnZpY2UsXG4gICAgcHJpdmF0ZSByZWFkb25seSBzdG9yZTogU3RvcmU8QWNjb3VudFN0YXRlbWVudFN0b3JlU3RhdGU+LFxuICApIHt9XG59XG4iXX0=