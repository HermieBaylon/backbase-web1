import { Injectable } from '@angular/core';
import { of } from 'rxjs';
import { catchError, map, switchMap } from 'rxjs/operators';
import { loadCategories, loadCategoriesFailure, loadCategoriesSuccess } from './actions';
import { createEffect, ofType } from '@ngrx/effects';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/effects";
import * as i2 from "@backbase/account-statement-common-ang";
export class CategoriesEffects {
    constructor(actions$, dataService) {
        this.actions$ = actions$;
        this.dataService = dataService;
        this.loadCategories$ = createEffect(() => this.actions$.pipe(ofType(loadCategories), switchMap(() => this.dataService.loadCategories().pipe(map(response => loadCategoriesSuccess({ categories: response })), catchError(error => of(loadCategoriesFailure({ error })))))));
    }
}
CategoriesEffects.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CategoriesEffects, deps: [{ token: i1.Actions }, { token: i2.AccountStatementDataService }], target: i0.ɵɵFactoryTarget.Injectable });
CategoriesEffects.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CategoriesEffects });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CategoriesEffects, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Actions }, { type: i2.AccountStatementDataService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWZmZWN0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvYWNjb3VudC1zdGF0ZW1lbnQtc3RvcmUtYW5nL3NyYy9jYXRlZ29yaWVzL2VmZmVjdHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUczQyxPQUFPLEVBQUUsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzFCLE9BQU8sRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzVELE9BQU8sRUFBRSxjQUFjLEVBQUUscUJBQXFCLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDekYsT0FBTyxFQUFXLFlBQVksRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7QUFHOUQsTUFBTSxPQUFPLGlCQUFpQjtJQWE1QixZQUE2QixRQUFpQixFQUFtQixXQUF3QztRQUE1RSxhQUFRLEdBQVIsUUFBUSxDQUFTO1FBQW1CLGdCQUFXLEdBQVgsV0FBVyxDQUE2QjtRQVp6RyxvQkFBZSxHQUFHLFlBQVksQ0FBQyxHQUFHLEVBQUUsQ0FDbEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQ2hCLE1BQU0sQ0FBQyxjQUFjLENBQUMsRUFDdEIsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUNiLElBQUksQ0FBQyxXQUFXLENBQUMsY0FBYyxFQUFFLENBQUMsSUFBSSxDQUNwQyxHQUFHLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDLEVBQ2hFLFVBQVUsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUMxRCxDQUNGLENBQ0YsQ0FDRixDQUFDO0lBRTBHLENBQUM7OytHQWJsRyxpQkFBaUI7bUhBQWpCLGlCQUFpQjs0RkFBakIsaUJBQWlCO2tCQUQ3QixVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWNjb3VudFN0YXRlbWVudERhdGFTZXJ2aWNlIH0gZnJvbSAnQGJhY2tiYXNlL2FjY291bnQtc3RhdGVtZW50LWNvbW1vbi1hbmcnO1xuXG5pbXBvcnQgeyBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgY2F0Y2hFcnJvciwgbWFwLCBzd2l0Y2hNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBsb2FkQ2F0ZWdvcmllcywgbG9hZENhdGVnb3JpZXNGYWlsdXJlLCBsb2FkQ2F0ZWdvcmllc1N1Y2Nlc3MgfSBmcm9tICcuL2FjdGlvbnMnO1xuaW1wb3J0IHsgQWN0aW9ucywgY3JlYXRlRWZmZWN0LCBvZlR5cGUgfSBmcm9tICdAbmdyeC9lZmZlY3RzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIENhdGVnb3JpZXNFZmZlY3RzIHtcbiAgbG9hZENhdGVnb3JpZXMkID0gY3JlYXRlRWZmZWN0KCgpID0+XG4gICAgdGhpcy5hY3Rpb25zJC5waXBlKFxuICAgICAgb2ZUeXBlKGxvYWRDYXRlZ29yaWVzKSxcbiAgICAgIHN3aXRjaE1hcCgoKSA9PlxuICAgICAgICB0aGlzLmRhdGFTZXJ2aWNlLmxvYWRDYXRlZ29yaWVzKCkucGlwZShcbiAgICAgICAgICBtYXAocmVzcG9uc2UgPT4gbG9hZENhdGVnb3JpZXNTdWNjZXNzKHsgY2F0ZWdvcmllczogcmVzcG9uc2UgfSkpLFxuICAgICAgICAgIGNhdGNoRXJyb3IoZXJyb3IgPT4gb2YobG9hZENhdGVnb3JpZXNGYWlsdXJlKHsgZXJyb3IgfSkpKSxcbiAgICAgICAgKSxcbiAgICAgICksXG4gICAgKSxcbiAgKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGFjdGlvbnMkOiBBY3Rpb25zLCBwcml2YXRlIHJlYWRvbmx5IGRhdGFTZXJ2aWNlOiBBY2NvdW50U3RhdGVtZW50RGF0YVNlcnZpY2UpIHt9XG59XG4iXX0=