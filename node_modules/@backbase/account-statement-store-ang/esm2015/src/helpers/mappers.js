import { __rest } from "tslib";
import { formatDate } from '@angular/common';
import { AccountStatementsPostRequest, } from '@backbase/data-ang/account-statements';
export const loadAccountStatementsBusinessToRequest = (_a, widgetPreferences) => {
    var { accountIds, filterParams, paginationParams, sortingParams } = _a, actionRequestParams = __rest(_a, ["accountIds", "filterParams", "paginationParams", "sortingParams"]);
    const { dateFrom, dateTo, category } = filterParams || {};
    const { minimalDate, maximumDate } = widgetPreferences || {};
    const params = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, (accountIds && { accountIds })), (_hasDate(dateFrom, minimalDate) && {
        dateFrom: _getFormattedDate(dateFrom, minimalDate),
    })), (_hasDate(dateTo, maximumDate) && {
        dateTo: _getFormattedDate(dateTo, maximumDate),
    })), (category && { category })), (paginationParams && Object.assign({}, paginationParams))), (sortingParams &&
        sortingParams.direction && {
        direction: _mapSortingDirection(sortingParams.direction),
        orderBy: sortingParams.column,
    }));
    return { accountStatementsPostRequest: params };
};
/**
 * Check if date or default date exist
 *
 * @param date Optional date string
 * @param defaultDate Default date object if date is not present
 * @returns boolean
 */
const _hasDate = (date, defaultDate) => !!(date || defaultDate);
/**
 * Convert date into yyyy-MM-dd format
 *
 * @param date Optional date string
 * @param defaultDate Default date object if date is not present
 * @returns Date in format of yyyy-MM-dd
 */
const _getFormattedDate = (value, defaultDate) => {
    const date = value || defaultDate;
    return date && formatDate(new Date(date), 'yyyy-MM-dd', 'en-US');
};
/**
 * Convert direction of type 'asc' or 'desc' to 'ASC' or 'DESC'
 *
 * @param direction of type string
 * @returns sortingDirection of type AccountStatementsPostRequest.DirectionEnum
 */
const _mapSortingDirection = (direction) => direction === 'asc'
    ? AccountStatementsPostRequest.DirectionEnum.ASC
    : AccountStatementsPostRequest.DirectionEnum.DESC;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFwcGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvYWNjb3VudC1zdGF0ZW1lbnQtc3RvcmUtYW5nL3NyYy9oZWxwZXJzL21hcHBlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUM3QyxPQUFPLEVBRUwsNEJBQTRCLEdBQzdCLE1BQU0sdUNBQXVDLENBQUM7QUFJL0MsTUFBTSxDQUFDLE1BQU0sc0NBQXNDLEdBQUcsQ0FDcEQsRUFNdUMsRUFDdkMsaUJBQXFDLEVBQ0QsRUFBRTtRQVJ0QyxFQUNFLFVBQVUsRUFDVixZQUFZLEVBQ1osZ0JBQWdCLEVBQ2hCLGFBQWEsT0FFd0IsRUFEbEMsbUJBQW1CLGNBTHhCLG1FQU1DLENBRHVCO0lBSXhCLE1BQU0sRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxHQUFHLFlBQVksSUFBSSxFQUFFLENBQUM7SUFDMUQsTUFBTSxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsR0FBRyxpQkFBaUIsSUFBSSxFQUFFLENBQUM7SUFFN0QsTUFBTSxNQUFNLDJGQUNQLENBQUMsVUFBVSxJQUFJLEVBQUUsVUFBVSxFQUFFLENBQUMsR0FDOUIsQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLFdBQVcsQ0FBQyxJQUFJO1FBQ3JDLFFBQVEsRUFBRSxpQkFBaUIsQ0FBQyxRQUFRLEVBQUUsV0FBVyxDQUFDO0tBQ25ELENBQUMsR0FDQyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsV0FBVyxDQUFDLElBQUk7UUFDbkMsTUFBTSxFQUFFLGlCQUFpQixDQUFDLE1BQU0sRUFBRSxXQUFXLENBQUM7S0FDL0MsQ0FBQyxHQUNDLENBQUMsUUFBUSxJQUFJLEVBQUUsUUFBUSxFQUFFLENBQUMsR0FDMUIsQ0FBQyxnQkFBZ0Isc0JBQVMsZ0JBQWdCLENBQUUsQ0FBQyxHQUM3QyxDQUFDLGFBQWE7UUFDZixhQUFhLENBQUMsU0FBUyxJQUFJO1FBQ3pCLFNBQVMsRUFBRSxvQkFBb0IsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDO1FBQ3hELE9BQU8sRUFBRSxhQUFhLENBQUMsTUFBTTtLQUM5QixDQUFDLENBQ0wsQ0FBQztJQUVGLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLEVBQUUsQ0FBQztBQUNsRCxDQUFDLENBQUM7QUFFRjs7Ozs7O0dBTUc7QUFDSCxNQUFNLFFBQVEsR0FBRyxDQUFDLElBQWEsRUFBRSxXQUFrQixFQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksV0FBVyxDQUFDLENBQUM7QUFFekY7Ozs7OztHQU1HO0FBQ0gsTUFBTSxpQkFBaUIsR0FBRyxDQUFDLEtBQWMsRUFBRSxXQUFrQixFQUFzQixFQUFFO0lBQ25GLE1BQU0sSUFBSSxHQUFHLEtBQUssSUFBSSxXQUFXLENBQUM7SUFDbEMsT0FBTyxJQUFJLElBQUksVUFBVSxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLFlBQVksRUFBRSxPQUFPLENBQUMsQ0FBQztBQUNuRSxDQUFDLENBQUM7QUFFRjs7Ozs7R0FLRztBQUNILE1BQU0sb0JBQW9CLEdBQUcsQ0FBQyxTQUFpQixFQUE4QyxFQUFFLENBQzdGLFNBQVMsS0FBSyxLQUFLO0lBQ2pCLENBQUMsQ0FBQyw0QkFBNEIsQ0FBQyxhQUFhLENBQUMsR0FBRztJQUNoRCxDQUFDLENBQUMsNEJBQTRCLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZvcm1hdERhdGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHtcbiAgUG9zdEFjY291bnRTdGF0ZW1lbnRzUmVxdWVzdFBhcmFtcyxcbiAgQWNjb3VudFN0YXRlbWVudHNQb3N0UmVxdWVzdCxcbn0gZnJvbSAnQGJhY2tiYXNlL2RhdGEtYW5nL2FjY291bnQtc3RhdGVtZW50cyc7XG5pbXBvcnQgeyBMb2FkQWNjb3VudFN0YXRlbWVudHNCdXNpbmVzc1BheWxvYWQgfSBmcm9tICcuLi9tb2RlbHMvYWNjb3VudC1zdGF0ZW1lbnRzLWFjdGlvbnMubW9kZWwnO1xuaW1wb3J0IHsgV2lkZ2V0UHJlZmVyZW5jZXMgfSBmcm9tICcuLi9hY2NvdW50LXN0YXRlbWVudHMvcmVkdWNlcnMnO1xuXG5leHBvcnQgY29uc3QgbG9hZEFjY291bnRTdGF0ZW1lbnRzQnVzaW5lc3NUb1JlcXVlc3QgPSAoXG4gIHtcbiAgICBhY2NvdW50SWRzLFxuICAgIGZpbHRlclBhcmFtcyxcbiAgICBwYWdpbmF0aW9uUGFyYW1zLFxuICAgIHNvcnRpbmdQYXJhbXMsXG4gICAgLi4uYWN0aW9uUmVxdWVzdFBhcmFtc1xuICB9OiBMb2FkQWNjb3VudFN0YXRlbWVudHNCdXNpbmVzc1BheWxvYWQsXG4gIHdpZGdldFByZWZlcmVuY2VzPzogV2lkZ2V0UHJlZmVyZW5jZXMsXG4pOiBQb3N0QWNjb3VudFN0YXRlbWVudHNSZXF1ZXN0UGFyYW1zID0+IHtcbiAgY29uc3QgeyBkYXRlRnJvbSwgZGF0ZVRvLCBjYXRlZ29yeSB9ID0gZmlsdGVyUGFyYW1zIHx8IHt9O1xuICBjb25zdCB7IG1pbmltYWxEYXRlLCBtYXhpbXVtRGF0ZSB9ID0gd2lkZ2V0UHJlZmVyZW5jZXMgfHwge307XG5cbiAgY29uc3QgcGFyYW1zID0ge1xuICAgIC4uLihhY2NvdW50SWRzICYmIHsgYWNjb3VudElkcyB9KSxcbiAgICAuLi4oX2hhc0RhdGUoZGF0ZUZyb20sIG1pbmltYWxEYXRlKSAmJiB7XG4gICAgICBkYXRlRnJvbTogX2dldEZvcm1hdHRlZERhdGUoZGF0ZUZyb20sIG1pbmltYWxEYXRlKSxcbiAgICB9KSxcbiAgICAuLi4oX2hhc0RhdGUoZGF0ZVRvLCBtYXhpbXVtRGF0ZSkgJiYge1xuICAgICAgZGF0ZVRvOiBfZ2V0Rm9ybWF0dGVkRGF0ZShkYXRlVG8sIG1heGltdW1EYXRlKSxcbiAgICB9KSxcbiAgICAuLi4oY2F0ZWdvcnkgJiYgeyBjYXRlZ29yeSB9KSxcbiAgICAuLi4ocGFnaW5hdGlvblBhcmFtcyAmJiB7IC4uLnBhZ2luYXRpb25QYXJhbXMgfSksXG4gICAgLi4uKHNvcnRpbmdQYXJhbXMgJiZcbiAgICAgIHNvcnRpbmdQYXJhbXMuZGlyZWN0aW9uICYmIHtcbiAgICAgICAgZGlyZWN0aW9uOiBfbWFwU29ydGluZ0RpcmVjdGlvbihzb3J0aW5nUGFyYW1zLmRpcmVjdGlvbiksXG4gICAgICAgIG9yZGVyQnk6IHNvcnRpbmdQYXJhbXMuY29sdW1uLFxuICAgICAgfSksXG4gIH07XG5cbiAgcmV0dXJuIHsgYWNjb3VudFN0YXRlbWVudHNQb3N0UmVxdWVzdDogcGFyYW1zIH07XG59O1xuXG4vKipcbiAqIENoZWNrIGlmIGRhdGUgb3IgZGVmYXVsdCBkYXRlIGV4aXN0XG4gKlxuICogQHBhcmFtIGRhdGUgT3B0aW9uYWwgZGF0ZSBzdHJpbmdcbiAqIEBwYXJhbSBkZWZhdWx0RGF0ZSBEZWZhdWx0IGRhdGUgb2JqZWN0IGlmIGRhdGUgaXMgbm90IHByZXNlbnRcbiAqIEByZXR1cm5zIGJvb2xlYW5cbiAqL1xuY29uc3QgX2hhc0RhdGUgPSAoZGF0ZT86IHN0cmluZywgZGVmYXVsdERhdGU/OiBEYXRlKTogYm9vbGVhbiA9PiAhIShkYXRlIHx8IGRlZmF1bHREYXRlKTtcblxuLyoqXG4gKiBDb252ZXJ0IGRhdGUgaW50byB5eXl5LU1NLWRkIGZvcm1hdFxuICpcbiAqIEBwYXJhbSBkYXRlIE9wdGlvbmFsIGRhdGUgc3RyaW5nXG4gKiBAcGFyYW0gZGVmYXVsdERhdGUgRGVmYXVsdCBkYXRlIG9iamVjdCBpZiBkYXRlIGlzIG5vdCBwcmVzZW50XG4gKiBAcmV0dXJucyBEYXRlIGluIGZvcm1hdCBvZiB5eXl5LU1NLWRkXG4gKi9cbmNvbnN0IF9nZXRGb3JtYXR0ZWREYXRlID0gKHZhbHVlPzogc3RyaW5nLCBkZWZhdWx0RGF0ZT86IERhdGUpOiBzdHJpbmcgfCB1bmRlZmluZWQgPT4ge1xuICBjb25zdCBkYXRlID0gdmFsdWUgfHwgZGVmYXVsdERhdGU7XG4gIHJldHVybiBkYXRlICYmIGZvcm1hdERhdGUobmV3IERhdGUoZGF0ZSksICd5eXl5LU1NLWRkJywgJ2VuLVVTJyk7XG59O1xuXG4vKipcbiAqIENvbnZlcnQgZGlyZWN0aW9uIG9mIHR5cGUgJ2FzYycgb3IgJ2Rlc2MnIHRvICdBU0MnIG9yICdERVNDJ1xuICpcbiAqIEBwYXJhbSBkaXJlY3Rpb24gb2YgdHlwZSBzdHJpbmdcbiAqIEByZXR1cm5zIHNvcnRpbmdEaXJlY3Rpb24gb2YgdHlwZSBBY2NvdW50U3RhdGVtZW50c1Bvc3RSZXF1ZXN0LkRpcmVjdGlvbkVudW1cbiAqL1xuY29uc3QgX21hcFNvcnRpbmdEaXJlY3Rpb24gPSAoZGlyZWN0aW9uOiBzdHJpbmcpOiBBY2NvdW50U3RhdGVtZW50c1Bvc3RSZXF1ZXN0LkRpcmVjdGlvbkVudW0gPT5cbiAgZGlyZWN0aW9uID09PSAnYXNjJ1xuICAgID8gQWNjb3VudFN0YXRlbWVudHNQb3N0UmVxdWVzdC5EaXJlY3Rpb25FbnVtLkFTQ1xuICAgIDogQWNjb3VudFN0YXRlbWVudHNQb3N0UmVxdWVzdC5EaXJlY3Rpb25FbnVtLkRFU0M7XG4iXX0=