{"version":3,"file":"backbase-account-statement-store-ang.js","sources":["../../../../libs/account-statement-store-ang/src/helpers/mappers.ts","../../../../libs/account-statement-store-ang/src/account-statements/actions.ts","../../../../libs/account-statement-store-ang/src/account-statements/reducers.ts","../../../../libs/account-statement-store-ang/src/categories/actions.ts","../../../../libs/account-statement-store-ang/src/categories/reducers.ts","../../../../libs/account-statement-store-ang/src/account-statement.reducer.ts","../../../../libs/account-statement-store-ang/src/account-statement.selector.ts","../../../../libs/account-statement-store-ang/src/account-statements/selectors.ts","../../../../libs/account-statement-store-ang/src/account-statements/effects.ts","../../../../libs/account-statement-store-ang/src/categories/effects.ts","../../../../libs/account-statement-store-ang/src/account-statement-store.module.ts","../../../../libs/account-statement-store-ang/src/categories/selectors.ts","../../../../libs/account-statement-store-ang/src/account-statement-store-model.service.ts","../../../../libs/account-statement-store-ang/backbase-account-statement-store-ang.ts"],"sourcesContent":["import { formatDate } from '@angular/common';\nimport {\n  PostAccountStatementsRequestParams,\n  AccountStatementsPostRequest,\n} from '@backbase/data-ang/account-statements';\nimport { LoadAccountStatementsBusinessPayload } from '../models/account-statements-actions.model';\nimport { WidgetPreferences } from '../account-statements/reducers';\n\nexport const loadAccountStatementsBusinessToRequest = (\n  {\n    accountIds,\n    filterParams,\n    paginationParams,\n    sortingParams,\n    ...actionRequestParams\n  }: LoadAccountStatementsBusinessPayload,\n  widgetPreferences?: WidgetPreferences,\n): PostAccountStatementsRequestParams => {\n  const { dateFrom, dateTo, category } = filterParams || {};\n  const { minimalDate, maximumDate } = widgetPreferences || {};\n\n  const params = {\n    ...(accountIds && { accountIds }),\n    ...(_hasDate(dateFrom, minimalDate) && {\n      dateFrom: _getFormattedDate(dateFrom, minimalDate),\n    }),\n    ...(_hasDate(dateTo, maximumDate) && {\n      dateTo: _getFormattedDate(dateTo, maximumDate),\n    }),\n    ...(category && { category }),\n    ...(paginationParams && { ...paginationParams }),\n    ...(sortingParams &&\n      sortingParams.direction && {\n        direction: _mapSortingDirection(sortingParams.direction),\n        orderBy: sortingParams.column,\n      }),\n  };\n\n  return { accountStatementsPostRequest: params };\n};\n\n/**\n * Check if date or default date exist\n *\n * @param date Optional date string\n * @param defaultDate Default date object if date is not present\n * @returns boolean\n */\nconst _hasDate = (date?: string, defaultDate?: Date): boolean => !!(date || defaultDate);\n\n/**\n * Convert date into yyyy-MM-dd format\n *\n * @param date Optional date string\n * @param defaultDate Default date object if date is not present\n * @returns Date in format of yyyy-MM-dd\n */\nconst _getFormattedDate = (value?: string, defaultDate?: Date): string | undefined => {\n  const date = value || defaultDate;\n  return date && formatDate(new Date(date), 'yyyy-MM-dd', 'en-US');\n};\n\n/**\n * Convert direction of type 'asc' or 'desc' to 'ASC' or 'DESC'\n *\n * @param direction of type string\n * @returns sortingDirection of type AccountStatementsPostRequest.DirectionEnum\n */\nconst _mapSortingDirection = (direction: string): AccountStatementsPostRequest.DirectionEnum =>\n  direction === 'asc'\n    ? AccountStatementsPostRequest.DirectionEnum.ASC\n    : AccountStatementsPostRequest.DirectionEnum.DESC;\n","import { createAction, props } from '@ngrx/store';\nimport {\n  LoadAccountStatementsBusinessPayload,\n  LoadAccountStatementsBusinessSuccessPayload,\n  UpdateWidgetPreferencesPayload,\n} from '../models/account-statements-actions.model';\n\nexport const loadAccountStatementsBusiness = createAction(\n  '[AS Account Statements] Load Account Statements for Business',\n  props<LoadAccountStatementsBusinessPayload>(),\n);\n\nexport const loadAccountStatementsBusinessSuccess = createAction(\n  '[AS Account Statements] Load Account Statements for Business Success',\n  props<LoadAccountStatementsBusinessSuccessPayload>(),\n);\n\nexport const loadAccountStatementsFailure = createAction(\n  '[AS Account Statements] Load Account Statements Failure',\n  props<{ error: Error }>(),\n);\nexport const updateWidgetPreferences = createAction(\n  '[AS Accounts] Update Widget Preferences',\n  props<UpdateWidgetPreferencesPayload>(),\n);\n","import { Categories, DatePeriods, LoadingState, today, unixZeroDay } from '@backbase/account-statement-common-ang';\nimport { Action, createReducer, on } from '@ngrx/store';\nimport { LoadAccountStatementsBusinessPayload } from '../models/account-statements-actions.model';\nimport {\n  loadAccountStatementsBusiness,\n  loadAccountStatementsBusinessSuccess,\n  loadAccountStatementsFailure,\n  updateWidgetPreferences,\n} from './actions';\nimport { SortEvent } from '@backbase/ui-ang/table';\nimport { AccountStatement } from '@backbase/data-ang/account-statements';\nimport { PaginationParams } from '../models/pagination-params.model';\n\n/**\n * State model for sorting parameters;\n *\n * @public\n */\nexport type SortingParams = SortEvent;\n\n/**\n * State model for parameters used for filtering account statements.\n *\n * @public\n */\nexport interface AccountStatementsFilterParams {\n  /**\n   * Start position of the date filter.\n   */\n  dateFrom?: string;\n  /**\n   * End position of the date filter.\n   */\n  dateTo?: string;\n  /**\n   * Predefined date range.\n   */\n  datePeriod?: DatePeriods;\n  /**\n   * Selected categories in the filter.\n   */\n  category?: Categories;\n}\n\n/**\n * State model for preferences of a widget, minimum and maximum date to be set in filter.\n *\n * @public\n */\nexport interface WidgetPreferences {\n  /**\n   * Minimal date that can be selected in date filter.\n   */\n  minimalDate: Date;\n  /**\n   * Maximum date that can be selected in date filter.\n   */\n  maximumDate: Date;\n}\n\n/**\n * State model for account statements.\n *\n * @public\n */\nexport interface AccountStatementsState {\n  /** {@inheritDoc AccountStatement} */\n  data: AccountStatement[];\n  /** {@inheritDoc LoadingState} */\n  loading: LoadingState;\n  /** {@inheritDoc Error} */\n  error?: Error;\n  /**\n   * Parameter that contains total count of statements in the current search.\n   */\n  totalCount: number;\n  /**\n   * Parameter that keeps list of selected account IDs.\n   */\n  accountIds: string[];\n  /** {@inheritDoc AccountStatementsFilterParams} */\n  filterParams: AccountStatementsFilterParams;\n  /** {@inheritDoc SortingParams} */\n  sortingParams?: SortingParams;\n  /** {@inheritDoc PaginationParams} */\n  paginationParams?: PaginationParams;\n  /** {@inheritDoc WidgetPreferences} */\n  widgetPreferences: WidgetPreferences;\n}\n\nexport const accountStatementsInitialState: AccountStatementsState = {\n  data: [],\n  totalCount: 0,\n  loading: LoadingState.IDLE,\n  error: undefined,\n  accountIds: [],\n  filterParams: {\n    datePeriod: DatePeriods.AllTime,\n  },\n  widgetPreferences: {\n    minimalDate: unixZeroDay(),\n    maximumDate: today(),\n  },\n};\n\nconst smartLoadingState = (\n  state: AccountStatementsState,\n  action: LoadAccountStatementsBusinessPayload,\n): LoadingState => {\n  if (action.accountIds && action.accountIds !== state.accountIds) return LoadingState.LOADING;\n  if (action.filterParams && action.filterParams !== state.filterParams) return LoadingState.LOADING_FILTERED;\n  if (action.append) return LoadingState.LOADING_MORE;\n  if (\n    (action.sortingParams && action.sortingParams !== state.sortingParams) ||\n    (action.paginationParams && action.paginationParams !== state.paginationParams)\n  ) {\n    return LoadingState.LOADING_TABLE;\n  }\n  return LoadingState.LOADING;\n};\n\nconst reducer = createReducer(\n  accountStatementsInitialState,\n  on(loadAccountStatementsBusiness, (state, action) => ({\n    ...state,\n    loading: smartLoadingState(state, action),\n    error: undefined,\n  })),\n  on(loadAccountStatementsBusinessSuccess, (state, action) => {\n    const { accountStatements, accountIds, filterParams, paginationParams, sortingParams, totalCount, append } = action;\n    const dataAppendTo = append ? state.data : [];\n\n    return {\n      ...state,\n      loading: LoadingState.IDLE,\n      data: [...dataAppendTo, ...accountStatements],\n      totalCount,\n      ...(accountIds && { accountIds }),\n      ...(filterParams && { filterParams }),\n      ...(sortingParams && { sortingParams }),\n      ...(paginationParams && { paginationParams }),\n    };\n  }),\n  on(loadAccountStatementsFailure, (state, action) => ({\n    ...state,\n    error: action.error,\n    loading: LoadingState.IDLE,\n  })),\n  on(updateWidgetPreferences, (state, action) => ({\n    ...state,\n    widgetPreferences: { ...state.widgetPreferences, ...action.widgetPreferences },\n  })),\n);\n\n// eslint-disable-next-line prefer-arrow/prefer-arrow-functions\nexport function accountStatementsReducer(state: AccountStatementsState | undefined, action: Action) {\n  return reducer(state, action);\n}\n","import { createAction, props } from '@ngrx/store';\nimport { Categories } from '@backbase/account-statement-common-ang';\n\nexport const loadCategories = createAction('[AS Account Statements] Load Categories for Business');\nexport const loadCategoriesSuccess = createAction(\n  '[AS Account Statements] Load Categories for Business Success',\n  props<{ categories: Categories }>(),\n);\nexport const loadCategoriesFailure = createAction(\n  '[AS Account Statements] Load Categories for Business Failure',\n  props<{ error: Error }>(),\n);\n","import { Action, createReducer, on } from '@ngrx/store';\nimport { loadCategoriesFailure, loadCategoriesSuccess } from './actions';\nimport { Categories } from '@backbase/account-statement-common-ang';\n\n/**\n * State model for categories of account statements.\n */\nexport interface CategoriesState {\n  /**\n   * List of available categories for statements.\n   */\n  data: Categories;\n  /**\n   * Error that might occur during loading of the categories.\n   */\n  error?: Error;\n}\n\nexport const categoriesInitialState: CategoriesState = {\n  data: [],\n  error: undefined,\n};\n\nconst reducer = createReducer(\n  categoriesInitialState,\n  on(loadCategoriesSuccess, (state, { categories }) => ({\n    ...state,\n    data: categories,\n  })),\n  on(loadCategoriesFailure, (state, { error }) => ({\n    ...state,\n    data: [],\n    error,\n  })),\n);\n\n// eslint-disable-next-line prefer-arrow/prefer-arrow-functions\nexport function categoriesReducer(state: CategoriesState | undefined, action: Action) {\n  return reducer(state, action);\n}\n","import {\n  accountStatementsInitialState,\n  accountStatementsReducer,\n  AccountStatementsState,\n} from './account-statements/reducers';\nimport { categoriesInitialState, categoriesReducer, CategoriesState } from './categories/reducers';\n\n/**\n * Global state for the Account Statements business journey.\n *\n * @public\n */\nexport interface AccountStatementStoreState {\n  /** {@inheritDoc AccountStatementsState} */\n  accountStatements: AccountStatementsState;\n\n  /** {@inheritDoc CategoriesState} */\n  categories: CategoriesState;\n}\n\nexport const initialState: AccountStatementStoreState = {\n  accountStatements: accountStatementsInitialState,\n  categories: categoriesInitialState,\n};\n\n/** Key for feature state used in NgRx StoreModule. */\nexport const ACCOUNT_STATEMENTS_FEATURE_KEY = 'accountStatements';\n\nexport const accountStatementsReducers = {\n  accountStatements: accountStatementsReducer,\n  categories: categoriesReducer,\n};\n","import { createFeatureSelector } from '@ngrx/store';\nimport { ACCOUNT_STATEMENTS_FEATURE_KEY, AccountStatementStoreState } from './account-statement.reducer';\n\nexport const selectAccountStatements =\n  createFeatureSelector<AccountStatementStoreState>(ACCOUNT_STATEMENTS_FEATURE_KEY);\n","import { LoadingState } from '@backbase/account-statement-common-ang';\nimport { AccountStatement } from '@backbase/data-ang/account-statements';\nimport { createSelector } from '@ngrx/store';\nimport { AccountStatementsState } from './reducers';\nimport { selectAccountStatements } from '../account-statement.selector';\n\nexport const selectAccountStatementsState = createSelector(\n  selectAccountStatements,\n  accountStatementsState => accountStatementsState.accountStatements,\n);\n\nexport const accountStatements = createSelector(\n  selectAccountStatementsState,\n  (state): AccountStatement[] => state.data,\n);\n\nexport const accountStatementsLoading = createSelector(\n  selectAccountStatementsState,\n  (state: AccountStatementsState): LoadingState => state.loading,\n);\n\nexport const accountStatementsError = createSelector(selectAccountStatementsState, state => state.error);\n\nexport const accountStatementsTotalCount = createSelector(selectAccountStatementsState, state => state.totalCount);\n\nexport const accountStatementsAccountIds = createSelector(selectAccountStatementsState, state => state.accountIds);\n\nexport const accountStatementsPaginationParams = createSelector(\n  selectAccountStatementsState,\n  state => state.paginationParams,\n);\n\nexport const accountStatementsSortingParams = createSelector(\n  selectAccountStatementsState,\n  state => state.sortingParams,\n);\n\nexport const accountStatementsFilterParams = createSelector(selectAccountStatementsState, state => state.filterParams);\nexport const accountStatementsWidgetPreferences = createSelector(\n  selectAccountStatementsState,\n  state => state.widgetPreferences,\n);\n","import { Injectable } from '@angular/core';\nimport { AccountStatementDataService, getTotalCountFromHeaders } from '@backbase/account-statement-common-ang';\n\nimport { of } from 'rxjs';\nimport { catchError, map, switchMap, withLatestFrom } from 'rxjs/operators';\nimport { loadAccountStatementsBusinessToRequest } from '../helpers/mappers';\nimport {\n  loadAccountStatementsBusiness,\n  loadAccountStatementsBusinessSuccess,\n  loadAccountStatementsFailure,\n} from './actions';\nimport {\n  accountStatementsAccountIds,\n  accountStatementsFilterParams,\n  accountStatementsPaginationParams,\n  accountStatementsSortingParams,\n  accountStatementsWidgetPreferences,\n} from './selectors';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { Store } from '@ngrx/store';\nimport { AccountStatementStoreState } from '../account-statement.reducer';\n\n@Injectable()\nexport class AccountStatementEffects {\n  accountStatementsBusiness$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(loadAccountStatementsBusiness),\n      withLatestFrom(\n        this.store.select(accountStatementsAccountIds),\n        this.store.select(accountStatementsFilterParams),\n        this.store.select(accountStatementsSortingParams),\n        this.store.select(accountStatementsPaginationParams),\n        this.store.select(accountStatementsWidgetPreferences),\n      ),\n      switchMap(([action, accountIds, filterParams, sortingParams, paginationParams, widgetPreferences]) => {\n        const { append, ...actionRequestParams } = action;\n        return this.dataService\n          .getAccountStatementsBusiness(\n            loadAccountStatementsBusinessToRequest(\n              {\n                accountIds,\n                filterParams,\n                sortingParams,\n                paginationParams,\n                ...actionRequestParams,\n              },\n              widgetPreferences,\n            ),\n          )\n          .pipe(\n            map(response =>\n              loadAccountStatementsBusinessSuccess({\n                accountStatements: response.body,\n                totalCount: getTotalCountFromHeaders(response.headers),\n                ...action,\n              }),\n            ),\n            catchError(error => of(loadAccountStatementsFailure({ error }))),\n          );\n      }),\n    ),\n  );\n\n  constructor(\n    private readonly actions$: Actions,\n    private readonly dataService: AccountStatementDataService,\n    private readonly store: Store<AccountStatementStoreState>,\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { AccountStatementDataService } from '@backbase/account-statement-common-ang';\n\nimport { of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { loadCategories, loadCategoriesFailure, loadCategoriesSuccess } from './actions';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\n\n@Injectable()\nexport class CategoriesEffects {\n  loadCategories$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(loadCategories),\n      switchMap(() =>\n        this.dataService.loadCategories().pipe(\n          map(response => loadCategoriesSuccess({ categories: response })),\n          catchError(error => of(loadCategoriesFailure({ error }))),\n        ),\n      ),\n    ),\n  );\n\n  constructor(private readonly actions$: Actions, private readonly dataService: AccountStatementDataService) {}\n}\n","import { NgModule } from '@angular/core';\nimport { AccountStatementCommonModule } from '@backbase/account-statement-common-ang';\nimport { StoreModule } from '@ngrx/store';\n\nimport { AccountStatementEffects } from './account-statements/effects';\nimport { CategoriesEffects } from './categories/effects';\nimport { ACCOUNT_STATEMENTS_FEATURE_KEY, accountStatementsReducers } from './account-statement.reducer';\nimport { EffectsModule } from '@ngrx/effects';\n\n@NgModule({\n  imports: [\n    StoreModule.forFeature(ACCOUNT_STATEMENTS_FEATURE_KEY, accountStatementsReducers),\n    EffectsModule.forFeature([AccountStatementEffects, CategoriesEffects]),\n    AccountStatementCommonModule,\n  ],\n})\nexport class AccountStatementStoreModule {}\n","import { Categories } from '@backbase/account-statement-common-ang';\nimport { createSelector } from '@ngrx/store';\nimport { selectAccountStatements } from '../account-statement.selector';\n\nexport const selectCategoriesState = createSelector(\n  selectAccountStatements,\n  accountStatementsState => accountStatementsState.categories,\n);\n\nexport const selectCategories = createSelector(selectCategoriesState, (state): Categories => state.data);\n\nexport const selectCategoriesError = createSelector(selectCategoriesState, state => state.error);\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AccountStatement } from '@backbase/data-ang/account-statements';\nimport {\n  accountStatements,\n  accountStatementsError,\n  accountStatementsFilterParams,\n  accountStatementsLoading,\n  accountStatementsPaginationParams,\n  accountStatementsSortingParams,\n  accountStatementsTotalCount,\n  accountStatementsWidgetPreferences,\n} from './account-statements/selectors';\nimport { Categories, LoadingState } from '@backbase/account-statement-common-ang';\nimport { PaginationParams } from './models/pagination-params.model';\nimport { AccountStatementsFilterParams, SortingParams, WidgetPreferences } from './account-statements/reducers';\nimport { AccountStatementStoreState } from './account-statement.reducer';\nimport { selectCategories } from './categories/selectors';\nimport { loadAccountStatementsBusiness, updateWidgetPreferences } from './account-statements/actions';\nimport {\n  LoadAccountStatementsBusinessPayload,\n  UpdateWidgetPreferencesPayload,\n} from './models/account-statements-actions.model';\nimport { loadCategories } from './categories/actions';\nimport { Store } from '@ngrx/store';\n\n@Injectable()\nexport class AccountStatementStoreModel {\n  readonly accountStatements$: Observable<AccountStatement[]> = this.store.select(accountStatements);\n  readonly accountStatementsLoading$: Observable<LoadingState> = this.store.select(accountStatementsLoading);\n  readonly accountStatementsError$ = this.store.select(accountStatementsError);\n  readonly accountStatementsTotalCount$ = this.store.select(accountStatementsTotalCount);\n  readonly accountStatementsPaginationParams$: Observable<PaginationParams | undefined> = this.store.select(\n    accountStatementsPaginationParams,\n  );\n  readonly accountStatementsSortingParams$: Observable<SortingParams | undefined> =\n    this.store.select(accountStatementsSortingParams);\n  readonly accountStatementsFilterParams$: Observable<AccountStatementsFilterParams> =\n    this.store.select(accountStatementsFilterParams);\n  readonly accountStatementsWidgetPreferences$: Observable<WidgetPreferences> = this.store.select(\n    accountStatementsWidgetPreferences,\n  );\n  readonly categories$: Observable<Categories> = this.store.select(selectCategories);\n\n  constructor(private readonly store: Store<AccountStatementStoreState>) {}\n\n  dispatchLoadAccountStatementsBusiness(payload: LoadAccountStatementsBusinessPayload = {}) {\n    this.store.dispatch(loadAccountStatementsBusiness(payload));\n  }\n\n  dispatchUpdateWidgetPreferences(payload: UpdateWidgetPreferencesPayload) {\n    this.store.dispatch(updateWidgetPreferences(payload));\n  }\n  dispatchLoadCategories() {\n    this.store.dispatch(loadCategories());\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["reducer"],"mappings":"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"}