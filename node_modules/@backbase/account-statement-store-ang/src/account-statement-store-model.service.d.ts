import { Observable } from 'rxjs';
import { AccountStatement } from '@backbase/data-ang/account-statements';
import { Categories, LoadingState } from '@backbase/account-statement-common-ang';
import { PaginationParams } from './models/pagination-params.model';
import { AccountStatementsFilterParams, SortingParams, WidgetPreferences } from './account-statements/reducers';
import { AccountStatementStoreState } from './account-statement.reducer';
import { LoadAccountStatementsBusinessPayload, UpdateWidgetPreferencesPayload } from './models/account-statements-actions.model';
import { Store } from '@ngrx/store';
import * as i0 from "@angular/core";
export declare class AccountStatementStoreModel {
    private readonly store;
    readonly accountStatements$: Observable<AccountStatement[]>;
    readonly accountStatementsLoading$: Observable<LoadingState>;
    readonly accountStatementsError$: Observable<Error | undefined>;
    readonly accountStatementsTotalCount$: Observable<number>;
    readonly accountStatementsPaginationParams$: Observable<PaginationParams | undefined>;
    readonly accountStatementsSortingParams$: Observable<SortingParams | undefined>;
    readonly accountStatementsFilterParams$: Observable<AccountStatementsFilterParams>;
    readonly accountStatementsWidgetPreferences$: Observable<WidgetPreferences>;
    readonly categories$: Observable<Categories>;
    constructor(store: Store<AccountStatementStoreState>);
    dispatchLoadAccountStatementsBusiness(payload?: LoadAccountStatementsBusinessPayload): void;
    dispatchUpdateWidgetPreferences(payload: UpdateWidgetPreferencesPayload): void;
    dispatchLoadCategories(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<AccountStatementStoreModel, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<AccountStatementStoreModel>;
}
