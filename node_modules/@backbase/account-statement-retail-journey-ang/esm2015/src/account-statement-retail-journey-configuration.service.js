import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';
import '@angular/localize/init';
import { JourneyConfigurationService } from '@backbase/account-statement-common-ang';
import { of } from 'rxjs';
import { RETAIL_JOURNEY_DEFAULT_CONFIGURATION } from './constants/retail-journey-default-configuration';
import * as i0 from "@angular/core";
/**
 * Injection token to override the journey configurations.
 * Application developer can override the journey configuration by providing their value for this token.
 *
 * @public
 *
 * @usageNotes
 *
 * ### Usage
 *
 * ```typescript
 * import { ACCOUNT_STATEMENT_RETAIL_JOURNEY_CONFIGURATION_TOKEN } from '@backbase/account-statement-retail-journey-ang';
 *
 * @NgModule({
 *  providers: [{ provide: ACCOUNT_STATEMENT_RETAIL_JOURNEY_CONFIGURATION_TOKEN, useValue: { headingType: 'h2'} }]
 * })
 * export class AppModule {}
 *
 * ```
 */
export const ACCOUNT_STATEMENT_RETAIL_JOURNEY_CONFIGURATION_TOKEN = new InjectionToken('AccountStatementRetailJourneyConfiguration injection token');
/**
 * Configuration service for the Account Statement Retail Journey Configuration Service.
 *
 * @public
 *
 * @remarks
 * This will allow the application developer to override the configurations specific to this journey via injection token @see {@link @backbase/account-statement-retail-journey-ang#ACCOUNT_STATEMENT_RETAIL_JOURNEY_CONFIGURATION_TOKEN}
 */
export class AccountStatementRetailJourneyConfigurationService extends JourneyConfigurationService {
    constructor(staticConfigOverrides) {
        super(Object.assign(Object.assign({}, RETAIL_JOURNEY_DEFAULT_CONFIGURATION), staticConfigOverrides));
    }
    /**
     * Show description
     *
     * @defaultValue true
     * @returns An observable of boolean
     */
    get showDescription() {
        return of(this.staticConfig.showDescription);
    }
    /** Combined observable with journey config properties */
    get allConfig() {
        return of(Object.assign({}, this.staticConfig));
    }
}
AccountStatementRetailJourneyConfigurationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementRetailJourneyConfigurationService, deps: [{ token: ACCOUNT_STATEMENT_RETAIL_JOURNEY_CONFIGURATION_TOKEN, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
AccountStatementRetailJourneyConfigurationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementRetailJourneyConfigurationService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccountStatementRetailJourneyConfigurationService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [ACCOUNT_STATEMENT_RETAIL_JOURNEY_CONFIGURATION_TOKEN]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3VudC1zdGF0ZW1lbnQtcmV0YWlsLWpvdXJuZXktY29uZmlndXJhdGlvbi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vbGlicy9hY2NvdW50LXN0YXRlbWVudC1yZXRhaWwtam91cm5leS1hbmcvc3JjL2FjY291bnQtc3RhdGVtZW50LXJldGFpbC1qb3VybmV5LWNvbmZpZ3VyYXRpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdFLE9BQU8sd0JBQXdCLENBQUM7QUFDaEMsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDckYsT0FBTyxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUV0QyxPQUFPLEVBQUUsb0NBQW9DLEVBQUUsTUFBTSxrREFBa0QsQ0FBQzs7QUFFeEc7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7R0FtQkc7QUFDSCxNQUFNLENBQUMsTUFBTSxvREFBb0QsR0FBRyxJQUFJLGNBQWMsQ0FFcEYsNERBQTRELENBQUMsQ0FBQztBQUVoRTs7Ozs7OztHQU9HO0FBRUgsTUFBTSxPQUFPLGlEQUFrRCxTQUFRLDJCQUF1RTtJQUM1SSxZQUdFLHFCQUFpRTtRQUVqRSxLQUFLLGlDQUFNLG9DQUFvQyxHQUFLLHFCQUFxQixFQUFHLENBQUM7SUFDL0UsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsSUFBSSxlQUFlO1FBQ2pCLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDL0MsQ0FBQztJQUVELHlEQUF5RDtJQUN6RCxJQUFJLFNBQVM7UUFDWCxPQUFPLEVBQUUsbUJBQU0sSUFBSSxDQUFDLFlBQVksRUFBRyxDQUFDO0lBQ3RDLENBQUM7OytJQXRCVSxpREFBaUQsa0JBR2xELG9EQUFvRDttSkFIbkQsaURBQWlEOzRGQUFqRCxpREFBaUQ7a0JBRDdELFVBQVU7OzBCQUdOLFFBQVE7OzBCQUNSLE1BQU07MkJBQUMsb0RBQW9EIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlLCBJbmplY3Rpb25Ub2tlbiwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCAnQGFuZ3VsYXIvbG9jYWxpemUvaW5pdCc7XG5pbXBvcnQgeyBKb3VybmV5Q29uZmlndXJhdGlvblNlcnZpY2UgfSBmcm9tICdAYmFja2Jhc2UvYWNjb3VudC1zdGF0ZW1lbnQtY29tbW9uLWFuZyc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQWNjb3VudFN0YXRlbWVudFJldGFpbEpvdXJuZXlDb25maWd1cmF0aW9uIH0gZnJvbSAnLi9tb2RlbHMvYWNjb3VudC1zdGF0ZW1lbnQtcmV0YWlsLWpvdXJuZXktY29uZmlndXJhdGlvbi5tb2RlbCc7XG5pbXBvcnQgeyBSRVRBSUxfSk9VUk5FWV9ERUZBVUxUX0NPTkZJR1VSQVRJT04gfSBmcm9tICcuL2NvbnN0YW50cy9yZXRhaWwtam91cm5leS1kZWZhdWx0LWNvbmZpZ3VyYXRpb24nO1xuXG4vKipcbiAqIEluamVjdGlvbiB0b2tlbiB0byBvdmVycmlkZSB0aGUgam91cm5leSBjb25maWd1cmF0aW9ucy5cbiAqIEFwcGxpY2F0aW9uIGRldmVsb3BlciBjYW4gb3ZlcnJpZGUgdGhlIGpvdXJuZXkgY29uZmlndXJhdGlvbiBieSBwcm92aWRpbmcgdGhlaXIgdmFsdWUgZm9yIHRoaXMgdG9rZW4uXG4gKlxuICogQHB1YmxpY1xuICpcbiAqIEB1c2FnZU5vdGVzXG4gKlxuICogIyMjIFVzYWdlXG4gKlxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgQUNDT1VOVF9TVEFURU1FTlRfUkVUQUlMX0pPVVJORVlfQ09ORklHVVJBVElPTl9UT0tFTiB9IGZyb20gJ0BiYWNrYmFzZS9hY2NvdW50LXN0YXRlbWVudC1yZXRhaWwtam91cm5leS1hbmcnO1xuICpcbiAqIEBOZ01vZHVsZSh7XG4gKiAgcHJvdmlkZXJzOiBbeyBwcm92aWRlOiBBQ0NPVU5UX1NUQVRFTUVOVF9SRVRBSUxfSk9VUk5FWV9DT05GSUdVUkFUSU9OX1RPS0VOLCB1c2VWYWx1ZTogeyBoZWFkaW5nVHlwZTogJ2gyJ30gfV1cbiAqIH0pXG4gKiBleHBvcnQgY2xhc3MgQXBwTW9kdWxlIHt9XG4gKlxuICogYGBgXG4gKi9cbmV4cG9ydCBjb25zdCBBQ0NPVU5UX1NUQVRFTUVOVF9SRVRBSUxfSk9VUk5FWV9DT05GSUdVUkFUSU9OX1RPS0VOID0gbmV3IEluamVjdGlvblRva2VuPFxuICBQYXJ0aWFsPEFjY291bnRTdGF0ZW1lbnRSZXRhaWxKb3VybmV5Q29uZmlndXJhdGlvbj5cbj4oJ0FjY291bnRTdGF0ZW1lbnRSZXRhaWxKb3VybmV5Q29uZmlndXJhdGlvbiBpbmplY3Rpb24gdG9rZW4nKTtcblxuLyoqXG4gKiBDb25maWd1cmF0aW9uIHNlcnZpY2UgZm9yIHRoZSBBY2NvdW50IFN0YXRlbWVudCBSZXRhaWwgSm91cm5leSBDb25maWd1cmF0aW9uIFNlcnZpY2UuXG4gKlxuICogQHB1YmxpY1xuICpcbiAqIEByZW1hcmtzXG4gKiBUaGlzIHdpbGwgYWxsb3cgdGhlIGFwcGxpY2F0aW9uIGRldmVsb3BlciB0byBvdmVycmlkZSB0aGUgY29uZmlndXJhdGlvbnMgc3BlY2lmaWMgdG8gdGhpcyBqb3VybmV5IHZpYSBpbmplY3Rpb24gdG9rZW4gQHNlZSB7QGxpbmsgQGJhY2tiYXNlL2FjY291bnQtc3RhdGVtZW50LXJldGFpbC1qb3VybmV5LWFuZyNBQ0NPVU5UX1NUQVRFTUVOVF9SRVRBSUxfSk9VUk5FWV9DT05GSUdVUkFUSU9OX1RPS0VOfVxuICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQWNjb3VudFN0YXRlbWVudFJldGFpbEpvdXJuZXlDb25maWd1cmF0aW9uU2VydmljZSBleHRlbmRzIEpvdXJuZXlDb25maWd1cmF0aW9uU2VydmljZTxBY2NvdW50U3RhdGVtZW50UmV0YWlsSm91cm5leUNvbmZpZ3VyYXRpb24+IHtcbiAgY29uc3RydWN0b3IoXG4gICAgQE9wdGlvbmFsKClcbiAgICBASW5qZWN0KEFDQ09VTlRfU1RBVEVNRU5UX1JFVEFJTF9KT1VSTkVZX0NPTkZJR1VSQVRJT05fVE9LRU4pXG4gICAgc3RhdGljQ29uZmlnT3ZlcnJpZGVzOiBBY2NvdW50U3RhdGVtZW50UmV0YWlsSm91cm5leUNvbmZpZ3VyYXRpb24sXG4gICkge1xuICAgIHN1cGVyKHsgLi4uUkVUQUlMX0pPVVJORVlfREVGQVVMVF9DT05GSUdVUkFUSU9OLCAuLi5zdGF0aWNDb25maWdPdmVycmlkZXMgfSk7XG4gIH1cblxuICAvKipcbiAgICogU2hvdyBkZXNjcmlwdGlvblxuICAgKlxuICAgKiBAZGVmYXVsdFZhbHVlIHRydWVcbiAgICogQHJldHVybnMgQW4gb2JzZXJ2YWJsZSBvZiBib29sZWFuXG4gICAqL1xuICBnZXQgc2hvd0Rlc2NyaXB0aW9uKCk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuICAgIHJldHVybiBvZih0aGlzLnN0YXRpY0NvbmZpZy5zaG93RGVzY3JpcHRpb24pO1xuICB9XG5cbiAgLyoqIENvbWJpbmVkIG9ic2VydmFibGUgd2l0aCBqb3VybmV5IGNvbmZpZyBwcm9wZXJ0aWVzICovXG4gIGdldCBhbGxDb25maWcoKTogT2JzZXJ2YWJsZTxBY2NvdW50U3RhdGVtZW50UmV0YWlsSm91cm5leUNvbmZpZ3VyYXRpb24+IHtcbiAgICByZXR1cm4gb2YoeyAuLi50aGlzLnN0YXRpY0NvbmZpZyB9KTtcbiAgfVxufVxuIl19