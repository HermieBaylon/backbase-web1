import { createMocks } from '@backbase/foundation-ang/data-http';
export const ManageMyDevicesServiceDeleteMyDeviceByDeviceIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/users/me/devices/{deviceId}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
export const ManageMyDevicesServiceGetMyDevicesMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/users/me/devices",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "devices": [{
                            "deviceId": "3aea3f5c-776a-4547-ae9d-4099d0af7d3b",
                            "idpUserId": "acd18bff-f34a-4329-9e74-de4df3a86c9a",
                            "externalUserId": "acd18bff-f34a-4329-9e74-de4df3a86c9a",
                            "dbsUserId": "8a48e1f56e880779016e8809ab970000",
                            "username": "Bob_Jones",
                            "friendlyName": "Bob's Galaxy S7",
                            "status": "ENABLED",
                            "vendor": "Samsung",
                            "model": "Galaxy S7",
                            "created": "2019-09-03T07:44:57Z",
                            "updated": "2019-10-13T15:30:22Z"
                        }, {
                            "deviceId": "5148b0f1-099f-4ef8-b34e-804013011dcf",
                            "idpUserId": "acd18bff-f34a-4329-9e74-de4df3a86c9a",
                            "externalUserId": "acd18bff-f34a-4329-9e74-de4df3a86c9a",
                            "dbsUserId": "8a48e1f56e880779016e8809ab970000",
                            "username": "Bob_Jones",
                            "friendlyName": "Bob's iPhone",
                            "status": "DISABLED",
                            "vendor": "Apple",
                            "model": "iPhone 10",
                            "created": "2019-09-03T08:34:11Z",
                            "updated": "2019-10-13T15:32:58Z"
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
        ]
    }]);
export const ManageMyDevicesServicePatchMyDeviceByDeviceIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/users/me/devices/{deviceId}",
        method: "PATCH",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
export const ManageMyDevicesServicePutPushTokenMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/users/me/devices/{deviceId}/push-tokens",
        method: "PUT",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
export const ManageMyDevicesServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v1/users/me/devices/{deviceId}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/users/me/devices",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "devices": [{
                            "deviceId": "3aea3f5c-776a-4547-ae9d-4099d0af7d3b",
                            "idpUserId": "acd18bff-f34a-4329-9e74-de4df3a86c9a",
                            "externalUserId": "acd18bff-f34a-4329-9e74-de4df3a86c9a",
                            "dbsUserId": "8a48e1f56e880779016e8809ab970000",
                            "username": "Bob_Jones",
                            "friendlyName": "Bob's Galaxy S7",
                            "status": "ENABLED",
                            "vendor": "Samsung",
                            "model": "Galaxy S7",
                            "created": "2019-09-03T07:44:57Z",
                            "updated": "2019-10-13T15:30:22Z"
                        }, {
                            "deviceId": "5148b0f1-099f-4ef8-b34e-804013011dcf",
                            "idpUserId": "acd18bff-f34a-4329-9e74-de4df3a86c9a",
                            "externalUserId": "acd18bff-f34a-4329-9e74-de4df3a86c9a",
                            "dbsUserId": "8a48e1f56e880779016e8809ab970000",
                            "username": "Bob_Jones",
                            "friendlyName": "Bob's iPhone",
                            "status": "DISABLED",
                            "vendor": "Apple",
                            "model": "iPhone 10",
                            "created": "2019-09-03T08:34:11Z",
                            "updated": "2019-10-13T15:32:58Z"
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/users/me/devices/{deviceId}",
        method: "PATCH",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/users/me/devices/{deviceId}/push-tokens",
        method: "PUT",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
]);
//# sourceMappingURL=data:application/json;base64,