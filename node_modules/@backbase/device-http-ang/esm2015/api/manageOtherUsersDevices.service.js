import { Inject, Injectable, Optional } from '@angular/core';
import { HttpHeaders } from '@angular/common/http';
import { CustomHttpParameterCodec } from '../encoder';
import { DEVICE_BASE_PATH } from '../variables';
import { DeviceConfiguration } from '../configuration';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../configuration";
export class ManageOtherUsersDevicesService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new DeviceConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    deleteUserDeviceByDeviceId(requestParameters, observe = 'body', reportProgress = false, options) {
        const _deviceId = requestParameters["deviceId"];
        if (_deviceId === null || _deviceId === undefined) {
            throw new Error('Required parameter deviceId was null or undefined when calling deleteUserDeviceByDeviceId.');
        }
        const _dbsUserId = requestParameters["dbsUserId"];
        if (_dbsUserId === null || _dbsUserId === undefined) {
            throw new Error('Required parameter dbsUserId was null or undefined when calling deleteUserDeviceByDeviceId.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v1/users/${encodeURIComponent(String(_dbsUserId))}/devices/${encodeURIComponent(String(_deviceId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteUserDeviceByDeviceIdUrl(requestParameters) {
        const _deviceId = requestParameters["deviceId"];
        if (_deviceId === null || _deviceId === undefined) {
            throw new Error('Required parameter deviceId was null or undefined when calling deleteUserDeviceByDeviceId.');
        }
        const _dbsUserId = requestParameters["dbsUserId"];
        if (_dbsUserId === null || _dbsUserId === undefined) {
            throw new Error('Required parameter dbsUserId was null or undefined when calling deleteUserDeviceByDeviceId.');
        }
        return `${this.configuration.basePath}/client-api/v1/users/${encodeURIComponent(String(_dbsUserId))}/devices/${encodeURIComponent(String(_deviceId))}`;
    }
    getDevicesByDbsUserId(requestParameters, observe = 'body', reportProgress = false, options) {
        const _dbsUserId = requestParameters["dbsUserId"];
        if (_dbsUserId === null || _dbsUserId === undefined) {
            throw new Error('Required parameter dbsUserId was null or undefined when calling getDevicesByDbsUserId.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/users/${encodeURIComponent(String(_dbsUserId))}/devices`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getDevicesByDbsUserIdUrl(requestParameters) {
        const _dbsUserId = requestParameters["dbsUserId"];
        if (_dbsUserId === null || _dbsUserId === undefined) {
            throw new Error('Required parameter dbsUserId was null or undefined when calling getDevicesByDbsUserId.');
        }
        return `${this.configuration.basePath}/client-api/v1/users/${encodeURIComponent(String(_dbsUserId))}/devices`;
    }
    patchUserDeviceByDbsUserIdAndDeviceId(requestParameters, observe = 'body', reportProgress = false, options) {
        const _deviceId = requestParameters["deviceId"];
        if (_deviceId === null || _deviceId === undefined) {
            throw new Error('Required parameter deviceId was null or undefined when calling patchUserDeviceByDbsUserIdAndDeviceId.');
        }
        const _dbsUserId = requestParameters["dbsUserId"];
        if (_dbsUserId === null || _dbsUserId === undefined) {
            throw new Error('Required parameter dbsUserId was null or undefined when calling patchUserDeviceByDbsUserIdAndDeviceId.');
        }
        const _patchDeviceRequest = requestParameters["patchDeviceRequest"];
        if (_patchDeviceRequest === null || _patchDeviceRequest === undefined) {
            throw new Error('Required parameter patchDeviceRequest was null or undefined when calling patchUserDeviceByDbsUserIdAndDeviceId.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.patch(`${this.configuration.basePath}/client-api/v1/users/${encodeURIComponent(String(_dbsUserId))}/devices/${encodeURIComponent(String(_deviceId))}`, _patchDeviceRequest, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    patchUserDeviceByDbsUserIdAndDeviceIdUrl(requestParameters) {
        const _deviceId = requestParameters["deviceId"];
        if (_deviceId === null || _deviceId === undefined) {
            throw new Error('Required parameter deviceId was null or undefined when calling patchUserDeviceByDbsUserIdAndDeviceId.');
        }
        const _dbsUserId = requestParameters["dbsUserId"];
        if (_dbsUserId === null || _dbsUserId === undefined) {
            throw new Error('Required parameter dbsUserId was null or undefined when calling patchUserDeviceByDbsUserIdAndDeviceId.');
        }
        const _patchDeviceRequest = requestParameters["patchDeviceRequest"];
        if (_patchDeviceRequest === null || _patchDeviceRequest === undefined) {
            throw new Error('Required parameter patchDeviceRequest was null or undefined when calling patchUserDeviceByDbsUserIdAndDeviceId.');
        }
        return `${this.configuration.basePath}/client-api/v1/users/${encodeURIComponent(String(_dbsUserId))}/devices/${encodeURIComponent(String(_deviceId))}`;
    }
}
ManageOtherUsersDevicesService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManageOtherUsersDevicesService, deps: [{ token: i1.HttpClient }, { token: DEVICE_BASE_PATH, optional: true }, { token: i2.DeviceConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
ManageOtherUsersDevicesService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManageOtherUsersDevicesService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManageOtherUsersDevicesService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [DEVICE_BASE_PATH]
                }] }, { type: i2.DeviceConfiguration, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,