import * as i0 from '@angular/core';
import { InjectionToken, NgModule, Optional, SkipSelf, Injectable, Inject } from '@angular/core';
import * as i1 from '@angular/common/http';
import { HttpHeaders } from '@angular/common/http';
import * as i2 from '@backbase/foundation-ang/data-http';
import { createMocks } from '@backbase/foundation-ang/data-http';

const DeviceStatus = {
    ENABLED: 'ENABLED',
    DISABLED: 'DISABLED',
    REMOVED: 'REMOVED'
};

const Platform = {
    Ios: 'ios',
    Android: 'android',
    Huawei: 'huawei'
};

const DEVICE_BASE_PATH = new InjectionToken('DEVICE_BASE_PATH');
const COLLECTION_FORMATS = {
    'csv': ',',
    'tsv': '   ',
    'ssv': ' ',
    'pipes': '|'
};

class DeviceConfiguration {
    constructor(configurationParameters = {}) {
        this.apiKeys = configurationParameters.apiKeys;
        this.username = configurationParameters.username;
        this.password = configurationParameters.password;
        this.accessToken = configurationParameters.accessToken;
        this.basePath = configurationParameters.basePath;
        this.withCredentials = configurationParameters.withCredentials;
        this.encoder = configurationParameters.encoder;
        if (configurationParameters.credentials) {
            this.credentials = configurationParameters.credentials;
        }
        else {
            this.credentials = {};
        }
    }
    selectHeaderContentType(contentTypes) {
        if (contentTypes.length === 0) {
            return undefined;
        }
        const type = contentTypes.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return contentTypes[0];
        }
        return type;
    }
    selectHeaderAccept(accepts) {
        if (accepts.length === 0) {
            return undefined;
        }
        const type = accepts.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return accepts[0];
        }
        return type;
    }
    isJsonMime(mime) {
        const jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
    lookupCredential(key) {
        const value = this.credentials[key];
        return typeof value === 'function'
            ? value()
            : value;
    }
}
const CONFIG_TOKEN = new InjectionToken('api-data-module DeviceConfiguration');

class DeviceApiModule {
    constructor(parentModule, http, dataModulesManager, config) {
        if (parentModule) {
            throw new Error('DeviceApiModule is already loaded. Import in your base AppModule only.');
        }
        if (!http) {
            throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                'See also https://github.com/angular/angular/issues/20575');
        }
        if (dataModulesManager) {
            dataModulesManager.setModuleConfig(CONFIG_TOKEN, {
                apiRoot: '',
                servicePath: config.basePath || '',
                headers: {},
            });
        }
    }
    static forRoot(configurationFactory) {
        return {
            ngModule: DeviceApiModule,
            providers: [{ provide: DeviceConfiguration, useFactory: configurationFactory }]
        };
    }
}
DeviceApiModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: DeviceApiModule, deps: [{ token: DeviceApiModule, optional: true, skipSelf: true }, { token: i1.HttpClient, optional: true }, { token: i2.DataModulesManager, optional: true }, { token: DeviceConfiguration }], target: i0.ɵɵFactoryTarget.NgModule });
DeviceApiModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: DeviceApiModule });
DeviceApiModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: DeviceApiModule, providers: [], imports: [[]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: DeviceApiModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [],
                    declarations: [],
                    exports: [],
                    providers: []
                }]
        }], ctorParameters: function () { return [{ type: DeviceApiModule, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: i1.HttpClient, decorators: [{
                    type: Optional
                }] }, { type: i2.DataModulesManager, decorators: [{
                    type: Optional
                }] }, { type: DeviceConfiguration }]; } });

class CustomHttpParameterCodec {
    encodeKey(k) {
        return encodeURIComponent(k);
    }
    encodeValue(v) {
        return encodeURIComponent(v);
    }
    decodeKey(k) {
        return decodeURIComponent(k);
    }
    decodeValue(v) {
        return decodeURIComponent(v);
    }
}

class AndroidDeviceVerificationServiceService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new DeviceConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    challenge(requestParameters, observe = 'body', reportProgress = false, options) {
        const _challengeNonceRequest = requestParameters["challengeNonceRequest"];
        if (_challengeNonceRequest === null || _challengeNonceRequest === undefined) {
            throw new Error('Required parameter challengeNonceRequest was null or undefined when calling challenge.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/verification/v1/android/challenges`, _challengeNonceRequest, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    challengeUrl(requestParameters) {
        const _challengeNonceRequest = requestParameters["challengeNonceRequest"];
        if (_challengeNonceRequest === null || _challengeNonceRequest === undefined) {
            throw new Error('Required parameter challengeNonceRequest was null or undefined when calling challenge.');
        }
        return `${this.configuration.basePath}/client-api/verification/v1/android/challenges`;
    }
    verify(requestParameters, observe = 'body', reportProgress = false, options) {
        const _deviceAttestationRequest = requestParameters["deviceAttestationRequest"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/verification/v1/android/attestations`, _deviceAttestationRequest, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    verifyUrl(requestParameters) {
        const _deviceAttestationRequest = requestParameters["deviceAttestationRequest"];
        return `${this.configuration.basePath}/client-api/verification/v1/android/attestations`;
    }
}
AndroidDeviceVerificationServiceService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AndroidDeviceVerificationServiceService, deps: [{ token: i1.HttpClient }, { token: DEVICE_BASE_PATH, optional: true }, { token: DeviceConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
AndroidDeviceVerificationServiceService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AndroidDeviceVerificationServiceService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AndroidDeviceVerificationServiceService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [DEVICE_BASE_PATH]
                }] }, { type: DeviceConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const AndroidDeviceVerificationServiceServiceChallengeMocksProvider = createMocks([{
        urlPattern: "/client-api/verification/v1/android/challenges",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "nonce": "base64 encoded long string"
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const AndroidDeviceVerificationServiceServiceVerifyMocksProvider = createMocks([{
        urlPattern: "/client-api/verification/v1/android/attestations",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {
                    "success": true,
                    "attestation": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsIng1YyI6WyJNSUlENGpDQ0FzcWdBd0lCQWdJSUNxcGkwV2JVWHh3d0RRWUpLb1pJaHZjTkFRRUxCUUF3Z1lBeEN6QUpCZ05WQkFZVEFsVlRNUk13RVFZRFZRUUlFd3BEWVd4cFptOXlibWxoTVJZd0ZBWURWUVFIRXcxVFlXNGdSbkpoYm1OcGMyTnZNUmd3RmdZRFZRUUtFdzlGZUdGdGNHeGxJRU52YlhCaGJua3hGREFTQmdOVkJBc1RDMFY0WVcxd2JHVWdUM0puTVJRd0VnWURWUVFERXd0bGVHRnRjR3hsTG1OdmJUQWVGdzB5TVRBNU1qRXhOVFUwTURWYUZ3MHlNVEV5TWpBeE5UVTBNRFZhTUlHQU1Rc3dDUVlEVlFRR0V3SlZVekVUTUJFR0ExVUVDQk1LUTJGc2FXWnZjbTVwWVRFV01CUUdBMVVFQnhNTlUyRnVJRVp5WVc1amFYTmpiekVZTUJZR0ExVUVDaE1QUlhoaGJYQnNaU0JEYjIxd1lXNTVNUlF3RWdZRFZRUUxFd3RGZUdGdGNHeGxJRTl5WnpFVU1CSUdBMVVFQXhNTFpYaGhiWEJzWlM1amIyMHdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDZU41ZTZpV1Z5WGNuVTdrT2c0YXJrME5WczdOVG84R3RoY1NUNW4rRmVGcnNFakw2V213eTIreTFZa3pNRmErUVdwdENWeGZZVXVTSUpCNXhiMHZaUTdEOVFGTTB2OTU0NVE2aGRPTm9sbWZ2MVczd0k2UTBjN25QNXMvbXBFcm1nRTI3bmRITzNXUHFDT3NnczRsVytnWEhjZzJPeGNwYm9KZHJuVnAzWjdmMFhjMWtPUkNFcVI2RDRlb1JUSjF0VkpSMzNpZytGWnF0UVJIbkp0VEptQS84YXZwSXhXM2hkb0dkaVo1KzhLWlk4blRKTnR3elIySUxITGpiQ0RyTkl4YWVZdUlyVWp5cm81Z0M0VjhDbEpkMU0wdEtlc2NrUStRbll2NVptZDE2TWEvL29vRFhnOGVseHZ4SFY3QnJ5dmRzK2FBbS9MZXRaZFNqeitrRzFBZ01CQUFHalhqQmNNQjBHQTFVZERnUVdCQlFhdFM4b2lWYjVUaHd5VmthWjUrOEJvei9XbmpBT0JnTlZIUThCQWY4RUJBTUNCYUF3RmdZRFZSMFJCQTh3RFlJTFptOXZMbUpoY2k1amIyMHdFd1lEVlIwbEJBd3dDZ1lJS3dZQkJRVUhBd0V3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUJKeElhc3RkaDFROThmNXAxNVA5bUlKeWZFc2kvMUpab3FXZjAzVko2ZjZpcVMza3d1MkFJWHM5c0JGMWpZdWZic014VWNhQnRPQnpua1NYY0dUaGlFUCtZRGowOTN3bzlhdG9NbFBOZG1NNCtmMWNIa1JmR0habkVyWTBoNSt3Sy9iNXhhSnlmbjZxQnZKR21mc1BMUG9MV09UNkpTdk1aWGs5Nk1OcmV5R010SWNPUXlvQVluRXJ0Q1cvTWhwN2trNkdZQ3pkK3cwQnAwTEFuQlhUQU00enE3NU02eWw5R0VjanRPWjVYWC9uQ1VIMVp0NmFKdzU0OVp6S2NDY3lySVV0bTBZdXZsdUJVakE2dFVFU0c5ZTlzKy8wRWduRlBtOUR5N21MSE1lSmNKSWFvNVY3QW1rUDZ3TGNhZWliUEViNU43N0ZTaTVoZ0FDVzJBc0VHdz0iXX0.eyJhcGtDZXJ0aWZpY2F0ZURpZ2VzdFNoYTI1NiI6WyLvv73vv71C77-977-9XHUwMDFDXHUwMDE077-977-977-9yJlv77-9JCfvv71B77-9ZO-_ve-_vUzvv73vv73vv71cdTAwMUJ4Uu-_vVUiXSwiYXBrUGFja2FnZU5hbWUiOiJjb20ucGFja2FnZS5uYW1lLm9mLnJlcXVlc3RpbmcuYXBwIiwiYmFzaWNJbnRlZ3JpdHkiOnRydWUsImN0c1Byb2ZpbGVNYXRjaCI6dHJ1ZSwiZXZhbHVhdGlvblR5cGUiOiJCQVNJQyIsImlhdCI6MTYzMjQ5NjAyNDYxMCwibm9uY2UiOiIyZjY4ZmJmYS0xNzUwLTQ1MDMtOGJmNS03OTU3NTc2ZDVkMzEiLCJ0aW1lc3RhbXBNcyI6MTYzMjQ5NjAyNDYxMH0.mV5kqvnRNcxeqH5XrzdNwSgcz8XJwdPxOv_VKoAHQjEwKv3kKftOH87cGoQij0q2Xgln0ohHsc8lSYGUqiYg1he3UJGRi0-CIXds121eXMFWPUzzTy-Bl4csxjOE_n2O7DORprKmPaVhT-anTNnbynFnMDMVA21UUIYnGryzBvDV8Xj2Mb-mv1K7xcoEpKqH3uzpKuTAOuIQctBADvIl80BkIf_JjHKC7gTIRbn-BF84RMaF29g1qBvhjPgCn5MLgyO-yMg8w3aAlJqPqZQftXNqYD4Uo9zhzjwuS_HGWJkmcJbERmzu7aRGJcS7zvai5pKDsBorxQnFugEe2A8u1w"
                }
            },
            {
                status: 403,
                body: {
                    "success": false,
                    "attestation": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsIng1YyI6WyJNSUlENGpDQ0FzcWdBd0lCQWdJSUNxcGkwV2JVWHh3d0RRWUpLb1pJaHZjTkFRRUxCUUF3Z1lBeEN6QUpCZ05WQkFZVEFsVlRNUk13RVFZRFZRUUlFd3BEWVd4cFptOXlibWxoTVJZd0ZBWURWUVFIRXcxVFlXNGdSbkpoYm1OcGMyTnZNUmd3RmdZRFZRUUtFdzlGZUdGdGNHeGxJRU52YlhCaGJua3hGREFTQmdOVkJBc1RDMFY0WVcxd2JHVWdUM0puTVJRd0VnWURWUVFERXd0bGVHRnRjR3hsTG1OdmJUQWVGdzB5TVRBNU1qRXhOVFUwTURWYUZ3MHlNVEV5TWpBeE5UVTBNRFZhTUlHQU1Rc3dDUVlEVlFRR0V3SlZVekVUTUJFR0ExVUVDQk1LUTJGc2FXWnZjbTVwWVRFV01CUUdBMVVFQnhNTlUyRnVJRVp5WVc1amFYTmpiekVZTUJZR0ExVUVDaE1QUlhoaGJYQnNaU0JEYjIxd1lXNTVNUlF3RWdZRFZRUUxFd3RGZUdGdGNHeGxJRTl5WnpFVU1CSUdBMVVFQXhNTFpYaGhiWEJzWlM1amIyMHdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDZU41ZTZpV1Z5WGNuVTdrT2c0YXJrME5WczdOVG84R3RoY1NUNW4rRmVGcnNFakw2V213eTIreTFZa3pNRmErUVdwdENWeGZZVXVTSUpCNXhiMHZaUTdEOVFGTTB2OTU0NVE2aGRPTm9sbWZ2MVczd0k2UTBjN25QNXMvbXBFcm1nRTI3bmRITzNXUHFDT3NnczRsVytnWEhjZzJPeGNwYm9KZHJuVnAzWjdmMFhjMWtPUkNFcVI2RDRlb1JUSjF0VkpSMzNpZytGWnF0UVJIbkp0VEptQS84YXZwSXhXM2hkb0dkaVo1KzhLWlk4blRKTnR3elIySUxITGpiQ0RyTkl4YWVZdUlyVWp5cm81Z0M0VjhDbEpkMU0wdEtlc2NrUStRbll2NVptZDE2TWEvL29vRFhnOGVseHZ4SFY3QnJ5dmRzK2FBbS9MZXRaZFNqeitrRzFBZ01CQUFHalhqQmNNQjBHQTFVZERnUVdCQlFhdFM4b2lWYjVUaHd5VmthWjUrOEJvei9XbmpBT0JnTlZIUThCQWY4RUJBTUNCYUF3RmdZRFZSMFJCQTh3RFlJTFptOXZMbUpoY2k1amIyMHdFd1lEVlIwbEJBd3dDZ1lJS3dZQkJRVUhBd0V3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUJKeElhc3RkaDFROThmNXAxNVA5bUlKeWZFc2kvMUpab3FXZjAzVko2ZjZpcVMza3d1MkFJWHM5c0JGMWpZdWZic014VWNhQnRPQnpua1NYY0dUaGlFUCtZRGowOTN3bzlhdG9NbFBOZG1NNCtmMWNIa1JmR0habkVyWTBoNSt3Sy9iNXhhSnlmbjZxQnZKR21mc1BMUG9MV09UNkpTdk1aWGs5Nk1OcmV5R010SWNPUXlvQVluRXJ0Q1cvTWhwN2trNkdZQ3pkK3cwQnAwTEFuQlhUQU00enE3NU02eWw5R0VjanRPWjVYWC9uQ1VIMVp0NmFKdzU0OVp6S2NDY3lySVV0bTBZdXZsdUJVakE2dFVFU0c5ZTlzKy8wRWduRlBtOUR5N21MSE1lSmNKSWFvNVY3QW1rUDZ3TGNhZWliUEViNU43N0ZTaTVoZ0FDVzJBc0VHdz0iXX0.eyJhcGtDZXJ0aWZpY2F0ZURpZ2VzdFNoYTI1NiI6WyLvv73vv71C77-977-9XHUwMDFDXHUwMDE077-977-977-9yJlv77-9JCfvv71B77-9ZO-_ve-_vUzvv73vv73vv71cdTAwMUJ4Uu-_vVUiXSwiYXBrUGFja2FnZU5hbWUiOiJjb20ucGFja2FnZS5uYW1lLm9mLnJlcXVlc3RpbmcuYXBwIiwiYmFzaWNJbnRlZ3JpdHkiOnRydWUsImN0c1Byb2ZpbGVNYXRjaCI6dHJ1ZSwiZXZhbHVhdGlvblR5cGUiOiJCQVNJQyIsImlhdCI6MTYzMjQ5NjAyNDYxMCwibm9uY2UiOiIyZjY4ZmJmYS0xNzUwLTQ1MDMtOGJmNS03OTU3NTc2ZDVkMzEiLCJ0aW1lc3RhbXBNcyI6MTYzMjQ5NjAyNDYxMH0.mV5kqvnRNcxeqH5XrzdNwSgcz8XJwdPxOv_VKoAHQjEwKv3kKftOH87cGoQij0q2Xgln0ohHsc8lSYGUqiYg1he3UJGRi0-CIXds121eXMFWPUzzTy-Bl4csxjOE_n2O7DORprKmPaVhT-anTNnbynFnMDMVA21UUIYnGryzBvDV8Xj2Mb-mv1K7xcoEpKqH3uzpKuTAOuIQctBADvIl80BkIf_JjHKC7gTIRbn-BF84RMaF29g1qBvhjPgCn5MLgyO-yMg8w3aAlJqPqZQftXNqYD4Uo9zhzjwuS_HGWJkmcJbERmzu7aRGJcS7zvai5pKDsBorxQnFugEe2A8u1w"
                }
            },
        ]
    }]);
const AndroidDeviceVerificationServiceServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/verification/v1/android/challenges",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "nonce": "base64 encoded long string"
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/verification/v1/android/attestations",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {
                    "success": true,
                    "attestation": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsIng1YyI6WyJNSUlENGpDQ0FzcWdBd0lCQWdJSUNxcGkwV2JVWHh3d0RRWUpLb1pJaHZjTkFRRUxCUUF3Z1lBeEN6QUpCZ05WQkFZVEFsVlRNUk13RVFZRFZRUUlFd3BEWVd4cFptOXlibWxoTVJZd0ZBWURWUVFIRXcxVFlXNGdSbkpoYm1OcGMyTnZNUmd3RmdZRFZRUUtFdzlGZUdGdGNHeGxJRU52YlhCaGJua3hGREFTQmdOVkJBc1RDMFY0WVcxd2JHVWdUM0puTVJRd0VnWURWUVFERXd0bGVHRnRjR3hsTG1OdmJUQWVGdzB5TVRBNU1qRXhOVFUwTURWYUZ3MHlNVEV5TWpBeE5UVTBNRFZhTUlHQU1Rc3dDUVlEVlFRR0V3SlZVekVUTUJFR0ExVUVDQk1LUTJGc2FXWnZjbTVwWVRFV01CUUdBMVVFQnhNTlUyRnVJRVp5WVc1amFYTmpiekVZTUJZR0ExVUVDaE1QUlhoaGJYQnNaU0JEYjIxd1lXNTVNUlF3RWdZRFZRUUxFd3RGZUdGdGNHeGxJRTl5WnpFVU1CSUdBMVVFQXhNTFpYaGhiWEJzWlM1amIyMHdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDZU41ZTZpV1Z5WGNuVTdrT2c0YXJrME5WczdOVG84R3RoY1NUNW4rRmVGcnNFakw2V213eTIreTFZa3pNRmErUVdwdENWeGZZVXVTSUpCNXhiMHZaUTdEOVFGTTB2OTU0NVE2aGRPTm9sbWZ2MVczd0k2UTBjN25QNXMvbXBFcm1nRTI3bmRITzNXUHFDT3NnczRsVytnWEhjZzJPeGNwYm9KZHJuVnAzWjdmMFhjMWtPUkNFcVI2RDRlb1JUSjF0VkpSMzNpZytGWnF0UVJIbkp0VEptQS84YXZwSXhXM2hkb0dkaVo1KzhLWlk4blRKTnR3elIySUxITGpiQ0RyTkl4YWVZdUlyVWp5cm81Z0M0VjhDbEpkMU0wdEtlc2NrUStRbll2NVptZDE2TWEvL29vRFhnOGVseHZ4SFY3QnJ5dmRzK2FBbS9MZXRaZFNqeitrRzFBZ01CQUFHalhqQmNNQjBHQTFVZERnUVdCQlFhdFM4b2lWYjVUaHd5VmthWjUrOEJvei9XbmpBT0JnTlZIUThCQWY4RUJBTUNCYUF3RmdZRFZSMFJCQTh3RFlJTFptOXZMbUpoY2k1amIyMHdFd1lEVlIwbEJBd3dDZ1lJS3dZQkJRVUhBd0V3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUJKeElhc3RkaDFROThmNXAxNVA5bUlKeWZFc2kvMUpab3FXZjAzVko2ZjZpcVMza3d1MkFJWHM5c0JGMWpZdWZic014VWNhQnRPQnpua1NYY0dUaGlFUCtZRGowOTN3bzlhdG9NbFBOZG1NNCtmMWNIa1JmR0habkVyWTBoNSt3Sy9iNXhhSnlmbjZxQnZKR21mc1BMUG9MV09UNkpTdk1aWGs5Nk1OcmV5R010SWNPUXlvQVluRXJ0Q1cvTWhwN2trNkdZQ3pkK3cwQnAwTEFuQlhUQU00enE3NU02eWw5R0VjanRPWjVYWC9uQ1VIMVp0NmFKdzU0OVp6S2NDY3lySVV0bTBZdXZsdUJVakE2dFVFU0c5ZTlzKy8wRWduRlBtOUR5N21MSE1lSmNKSWFvNVY3QW1rUDZ3TGNhZWliUEViNU43N0ZTaTVoZ0FDVzJBc0VHdz0iXX0.eyJhcGtDZXJ0aWZpY2F0ZURpZ2VzdFNoYTI1NiI6WyLvv73vv71C77-977-9XHUwMDFDXHUwMDE077-977-977-9yJlv77-9JCfvv71B77-9ZO-_ve-_vUzvv73vv73vv71cdTAwMUJ4Uu-_vVUiXSwiYXBrUGFja2FnZU5hbWUiOiJjb20ucGFja2FnZS5uYW1lLm9mLnJlcXVlc3RpbmcuYXBwIiwiYmFzaWNJbnRlZ3JpdHkiOnRydWUsImN0c1Byb2ZpbGVNYXRjaCI6dHJ1ZSwiZXZhbHVhdGlvblR5cGUiOiJCQVNJQyIsImlhdCI6MTYzMjQ5NjAyNDYxMCwibm9uY2UiOiIyZjY4ZmJmYS0xNzUwLTQ1MDMtOGJmNS03OTU3NTc2ZDVkMzEiLCJ0aW1lc3RhbXBNcyI6MTYzMjQ5NjAyNDYxMH0.mV5kqvnRNcxeqH5XrzdNwSgcz8XJwdPxOv_VKoAHQjEwKv3kKftOH87cGoQij0q2Xgln0ohHsc8lSYGUqiYg1he3UJGRi0-CIXds121eXMFWPUzzTy-Bl4csxjOE_n2O7DORprKmPaVhT-anTNnbynFnMDMVA21UUIYnGryzBvDV8Xj2Mb-mv1K7xcoEpKqH3uzpKuTAOuIQctBADvIl80BkIf_JjHKC7gTIRbn-BF84RMaF29g1qBvhjPgCn5MLgyO-yMg8w3aAlJqPqZQftXNqYD4Uo9zhzjwuS_HGWJkmcJbERmzu7aRGJcS7zvai5pKDsBorxQnFugEe2A8u1w"
                }
            },
            {
                status: 403,
                body: {
                    "success": false,
                    "attestation": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsIng1YyI6WyJNSUlENGpDQ0FzcWdBd0lCQWdJSUNxcGkwV2JVWHh3d0RRWUpLb1pJaHZjTkFRRUxCUUF3Z1lBeEN6QUpCZ05WQkFZVEFsVlRNUk13RVFZRFZRUUlFd3BEWVd4cFptOXlibWxoTVJZd0ZBWURWUVFIRXcxVFlXNGdSbkpoYm1OcGMyTnZNUmd3RmdZRFZRUUtFdzlGZUdGdGNHeGxJRU52YlhCaGJua3hGREFTQmdOVkJBc1RDMFY0WVcxd2JHVWdUM0puTVJRd0VnWURWUVFERXd0bGVHRnRjR3hsTG1OdmJUQWVGdzB5TVRBNU1qRXhOVFUwTURWYUZ3MHlNVEV5TWpBeE5UVTBNRFZhTUlHQU1Rc3dDUVlEVlFRR0V3SlZVekVUTUJFR0ExVUVDQk1LUTJGc2FXWnZjbTVwWVRFV01CUUdBMVVFQnhNTlUyRnVJRVp5WVc1amFYTmpiekVZTUJZR0ExVUVDaE1QUlhoaGJYQnNaU0JEYjIxd1lXNTVNUlF3RWdZRFZRUUxFd3RGZUdGdGNHeGxJRTl5WnpFVU1CSUdBMVVFQXhNTFpYaGhiWEJzWlM1amIyMHdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDZU41ZTZpV1Z5WGNuVTdrT2c0YXJrME5WczdOVG84R3RoY1NUNW4rRmVGcnNFakw2V213eTIreTFZa3pNRmErUVdwdENWeGZZVXVTSUpCNXhiMHZaUTdEOVFGTTB2OTU0NVE2aGRPTm9sbWZ2MVczd0k2UTBjN25QNXMvbXBFcm1nRTI3bmRITzNXUHFDT3NnczRsVytnWEhjZzJPeGNwYm9KZHJuVnAzWjdmMFhjMWtPUkNFcVI2RDRlb1JUSjF0VkpSMzNpZytGWnF0UVJIbkp0VEptQS84YXZwSXhXM2hkb0dkaVo1KzhLWlk4blRKTnR3elIySUxITGpiQ0RyTkl4YWVZdUlyVWp5cm81Z0M0VjhDbEpkMU0wdEtlc2NrUStRbll2NVptZDE2TWEvL29vRFhnOGVseHZ4SFY3QnJ5dmRzK2FBbS9MZXRaZFNqeitrRzFBZ01CQUFHalhqQmNNQjBHQTFVZERnUVdCQlFhdFM4b2lWYjVUaHd5VmthWjUrOEJvei9XbmpBT0JnTlZIUThCQWY4RUJBTUNCYUF3RmdZRFZSMFJCQTh3RFlJTFptOXZMbUpoY2k1amIyMHdFd1lEVlIwbEJBd3dDZ1lJS3dZQkJRVUhBd0V3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUJKeElhc3RkaDFROThmNXAxNVA5bUlKeWZFc2kvMUpab3FXZjAzVko2ZjZpcVMza3d1MkFJWHM5c0JGMWpZdWZic014VWNhQnRPQnpua1NYY0dUaGlFUCtZRGowOTN3bzlhdG9NbFBOZG1NNCtmMWNIa1JmR0habkVyWTBoNSt3Sy9iNXhhSnlmbjZxQnZKR21mc1BMUG9MV09UNkpTdk1aWGs5Nk1OcmV5R010SWNPUXlvQVluRXJ0Q1cvTWhwN2trNkdZQ3pkK3cwQnAwTEFuQlhUQU00enE3NU02eWw5R0VjanRPWjVYWC9uQ1VIMVp0NmFKdzU0OVp6S2NDY3lySVV0bTBZdXZsdUJVakE2dFVFU0c5ZTlzKy8wRWduRlBtOUR5N21MSE1lSmNKSWFvNVY3QW1rUDZ3TGNhZWliUEViNU43N0ZTaTVoZ0FDVzJBc0VHdz0iXX0.eyJhcGtDZXJ0aWZpY2F0ZURpZ2VzdFNoYTI1NiI6WyLvv73vv71C77-977-9XHUwMDFDXHUwMDE077-977-977-9yJlv77-9JCfvv71B77-9ZO-_ve-_vUzvv73vv73vv71cdTAwMUJ4Uu-_vVUiXSwiYXBrUGFja2FnZU5hbWUiOiJjb20ucGFja2FnZS5uYW1lLm9mLnJlcXVlc3RpbmcuYXBwIiwiYmFzaWNJbnRlZ3JpdHkiOnRydWUsImN0c1Byb2ZpbGVNYXRjaCI6dHJ1ZSwiZXZhbHVhdGlvblR5cGUiOiJCQVNJQyIsImlhdCI6MTYzMjQ5NjAyNDYxMCwibm9uY2UiOiIyZjY4ZmJmYS0xNzUwLTQ1MDMtOGJmNS03OTU3NTc2ZDVkMzEiLCJ0aW1lc3RhbXBNcyI6MTYzMjQ5NjAyNDYxMH0.mV5kqvnRNcxeqH5XrzdNwSgcz8XJwdPxOv_VKoAHQjEwKv3kKftOH87cGoQij0q2Xgln0ohHsc8lSYGUqiYg1he3UJGRi0-CIXds121eXMFWPUzzTy-Bl4csxjOE_n2O7DORprKmPaVhT-anTNnbynFnMDMVA21UUIYnGryzBvDV8Xj2Mb-mv1K7xcoEpKqH3uzpKuTAOuIQctBADvIl80BkIf_JjHKC7gTIRbn-BF84RMaF29g1qBvhjPgCn5MLgyO-yMg8w3aAlJqPqZQftXNqYD4Uo9zhzjwuS_HGWJkmcJbERmzu7aRGJcS7zvai5pKDsBorxQnFugEe2A8u1w"
                }
            },
        ]
    },
]);

class ManageMyDevicesService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new DeviceConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    deleteMyDeviceByDeviceId(requestParameters, observe = 'body', reportProgress = false, options) {
        const _deviceId = requestParameters["deviceId"];
        if (_deviceId === null || _deviceId === undefined) {
            throw new Error('Required parameter deviceId was null or undefined when calling deleteMyDeviceByDeviceId.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v1/users/me/devices/${encodeURIComponent(String(_deviceId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteMyDeviceByDeviceIdUrl(requestParameters) {
        const _deviceId = requestParameters["deviceId"];
        if (_deviceId === null || _deviceId === undefined) {
            throw new Error('Required parameter deviceId was null or undefined when calling deleteMyDeviceByDeviceId.');
        }
        return `${this.configuration.basePath}/client-api/v1/users/me/devices/${encodeURIComponent(String(_deviceId))}`;
    }
    getMyDevices(observe = 'body', reportProgress = false, options) {
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/users/me/devices`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getMyDevicesUrl() {
        return `${this.configuration.basePath}/client-api/v1/users/me/devices`;
    }
    patchMyDeviceByDeviceId(requestParameters, observe = 'body', reportProgress = false, options) {
        const _deviceId = requestParameters["deviceId"];
        if (_deviceId === null || _deviceId === undefined) {
            throw new Error('Required parameter deviceId was null or undefined when calling patchMyDeviceByDeviceId.');
        }
        const _patchDeviceRequest = requestParameters["patchDeviceRequest"];
        if (_patchDeviceRequest === null || _patchDeviceRequest === undefined) {
            throw new Error('Required parameter patchDeviceRequest was null or undefined when calling patchMyDeviceByDeviceId.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.patch(`${this.configuration.basePath}/client-api/v1/users/me/devices/${encodeURIComponent(String(_deviceId))}`, _patchDeviceRequest, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    patchMyDeviceByDeviceIdUrl(requestParameters) {
        const _deviceId = requestParameters["deviceId"];
        if (_deviceId === null || _deviceId === undefined) {
            throw new Error('Required parameter deviceId was null or undefined when calling patchMyDeviceByDeviceId.');
        }
        const _patchDeviceRequest = requestParameters["patchDeviceRequest"];
        if (_patchDeviceRequest === null || _patchDeviceRequest === undefined) {
            throw new Error('Required parameter patchDeviceRequest was null or undefined when calling patchMyDeviceByDeviceId.');
        }
        return `${this.configuration.basePath}/client-api/v1/users/me/devices/${encodeURIComponent(String(_deviceId))}`;
    }
    putPushToken(requestParameters, observe = 'body', reportProgress = false, options) {
        const _deviceId = requestParameters["deviceId"];
        if (_deviceId === null || _deviceId === undefined) {
            throw new Error('Required parameter deviceId was null or undefined when calling putPushToken.');
        }
        const _putPushTokenRequest = requestParameters["putPushTokenRequest"];
        if (_putPushTokenRequest === null || _putPushTokenRequest === undefined) {
            throw new Error('Required parameter putPushTokenRequest was null or undefined when calling putPushToken.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v1/users/me/devices/${encodeURIComponent(String(_deviceId))}/push-tokens`, _putPushTokenRequest, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    putPushTokenUrl(requestParameters) {
        const _deviceId = requestParameters["deviceId"];
        if (_deviceId === null || _deviceId === undefined) {
            throw new Error('Required parameter deviceId was null or undefined when calling putPushToken.');
        }
        const _putPushTokenRequest = requestParameters["putPushTokenRequest"];
        if (_putPushTokenRequest === null || _putPushTokenRequest === undefined) {
            throw new Error('Required parameter putPushTokenRequest was null or undefined when calling putPushToken.');
        }
        return `${this.configuration.basePath}/client-api/v1/users/me/devices/${encodeURIComponent(String(_deviceId))}/push-tokens`;
    }
}
ManageMyDevicesService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManageMyDevicesService, deps: [{ token: i1.HttpClient }, { token: DEVICE_BASE_PATH, optional: true }, { token: DeviceConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
ManageMyDevicesService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManageMyDevicesService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManageMyDevicesService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [DEVICE_BASE_PATH]
                }] }, { type: DeviceConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const ManageMyDevicesServiceDeleteMyDeviceByDeviceIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/users/me/devices/{deviceId}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const ManageMyDevicesServiceGetMyDevicesMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/users/me/devices",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "devices": [{
                            "deviceId": "3aea3f5c-776a-4547-ae9d-4099d0af7d3b",
                            "idpUserId": "acd18bff-f34a-4329-9e74-de4df3a86c9a",
                            "externalUserId": "acd18bff-f34a-4329-9e74-de4df3a86c9a",
                            "dbsUserId": "8a48e1f56e880779016e8809ab970000",
                            "username": "Bob_Jones",
                            "friendlyName": "Bob's Galaxy S7",
                            "status": "ENABLED",
                            "vendor": "Samsung",
                            "model": "Galaxy S7",
                            "created": "2019-09-03T07:44:57Z",
                            "updated": "2019-10-13T15:30:22Z"
                        }, {
                            "deviceId": "5148b0f1-099f-4ef8-b34e-804013011dcf",
                            "idpUserId": "acd18bff-f34a-4329-9e74-de4df3a86c9a",
                            "externalUserId": "acd18bff-f34a-4329-9e74-de4df3a86c9a",
                            "dbsUserId": "8a48e1f56e880779016e8809ab970000",
                            "username": "Bob_Jones",
                            "friendlyName": "Bob's iPhone",
                            "status": "DISABLED",
                            "vendor": "Apple",
                            "model": "iPhone 10",
                            "created": "2019-09-03T08:34:11Z",
                            "updated": "2019-10-13T15:32:58Z"
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
        ]
    }]);
const ManageMyDevicesServicePatchMyDeviceByDeviceIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/users/me/devices/{deviceId}",
        method: "PATCH",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const ManageMyDevicesServicePutPushTokenMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/users/me/devices/{deviceId}/push-tokens",
        method: "PUT",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const ManageMyDevicesServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v1/users/me/devices/{deviceId}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/users/me/devices",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "devices": [{
                            "deviceId": "3aea3f5c-776a-4547-ae9d-4099d0af7d3b",
                            "idpUserId": "acd18bff-f34a-4329-9e74-de4df3a86c9a",
                            "externalUserId": "acd18bff-f34a-4329-9e74-de4df3a86c9a",
                            "dbsUserId": "8a48e1f56e880779016e8809ab970000",
                            "username": "Bob_Jones",
                            "friendlyName": "Bob's Galaxy S7",
                            "status": "ENABLED",
                            "vendor": "Samsung",
                            "model": "Galaxy S7",
                            "created": "2019-09-03T07:44:57Z",
                            "updated": "2019-10-13T15:30:22Z"
                        }, {
                            "deviceId": "5148b0f1-099f-4ef8-b34e-804013011dcf",
                            "idpUserId": "acd18bff-f34a-4329-9e74-de4df3a86c9a",
                            "externalUserId": "acd18bff-f34a-4329-9e74-de4df3a86c9a",
                            "dbsUserId": "8a48e1f56e880779016e8809ab970000",
                            "username": "Bob_Jones",
                            "friendlyName": "Bob's iPhone",
                            "status": "DISABLED",
                            "vendor": "Apple",
                            "model": "iPhone 10",
                            "created": "2019-09-03T08:34:11Z",
                            "updated": "2019-10-13T15:32:58Z"
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/users/me/devices/{deviceId}",
        method: "PATCH",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/users/me/devices/{deviceId}/push-tokens",
        method: "PUT",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
]);

class ManageOtherUsersDevicesService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new DeviceConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    deleteUserDeviceByDeviceId(requestParameters, observe = 'body', reportProgress = false, options) {
        const _deviceId = requestParameters["deviceId"];
        if (_deviceId === null || _deviceId === undefined) {
            throw new Error('Required parameter deviceId was null or undefined when calling deleteUserDeviceByDeviceId.');
        }
        const _dbsUserId = requestParameters["dbsUserId"];
        if (_dbsUserId === null || _dbsUserId === undefined) {
            throw new Error('Required parameter dbsUserId was null or undefined when calling deleteUserDeviceByDeviceId.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v1/users/${encodeURIComponent(String(_dbsUserId))}/devices/${encodeURIComponent(String(_deviceId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteUserDeviceByDeviceIdUrl(requestParameters) {
        const _deviceId = requestParameters["deviceId"];
        if (_deviceId === null || _deviceId === undefined) {
            throw new Error('Required parameter deviceId was null or undefined when calling deleteUserDeviceByDeviceId.');
        }
        const _dbsUserId = requestParameters["dbsUserId"];
        if (_dbsUserId === null || _dbsUserId === undefined) {
            throw new Error('Required parameter dbsUserId was null or undefined when calling deleteUserDeviceByDeviceId.');
        }
        return `${this.configuration.basePath}/client-api/v1/users/${encodeURIComponent(String(_dbsUserId))}/devices/${encodeURIComponent(String(_deviceId))}`;
    }
    getDevicesByDbsUserId(requestParameters, observe = 'body', reportProgress = false, options) {
        const _dbsUserId = requestParameters["dbsUserId"];
        if (_dbsUserId === null || _dbsUserId === undefined) {
            throw new Error('Required parameter dbsUserId was null or undefined when calling getDevicesByDbsUserId.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/users/${encodeURIComponent(String(_dbsUserId))}/devices`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getDevicesByDbsUserIdUrl(requestParameters) {
        const _dbsUserId = requestParameters["dbsUserId"];
        if (_dbsUserId === null || _dbsUserId === undefined) {
            throw new Error('Required parameter dbsUserId was null or undefined when calling getDevicesByDbsUserId.');
        }
        return `${this.configuration.basePath}/client-api/v1/users/${encodeURIComponent(String(_dbsUserId))}/devices`;
    }
    patchUserDeviceByDbsUserIdAndDeviceId(requestParameters, observe = 'body', reportProgress = false, options) {
        const _deviceId = requestParameters["deviceId"];
        if (_deviceId === null || _deviceId === undefined) {
            throw new Error('Required parameter deviceId was null or undefined when calling patchUserDeviceByDbsUserIdAndDeviceId.');
        }
        const _dbsUserId = requestParameters["dbsUserId"];
        if (_dbsUserId === null || _dbsUserId === undefined) {
            throw new Error('Required parameter dbsUserId was null or undefined when calling patchUserDeviceByDbsUserIdAndDeviceId.');
        }
        const _patchDeviceRequest = requestParameters["patchDeviceRequest"];
        if (_patchDeviceRequest === null || _patchDeviceRequest === undefined) {
            throw new Error('Required parameter patchDeviceRequest was null or undefined when calling patchUserDeviceByDbsUserIdAndDeviceId.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.patch(`${this.configuration.basePath}/client-api/v1/users/${encodeURIComponent(String(_dbsUserId))}/devices/${encodeURIComponent(String(_deviceId))}`, _patchDeviceRequest, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    patchUserDeviceByDbsUserIdAndDeviceIdUrl(requestParameters) {
        const _deviceId = requestParameters["deviceId"];
        if (_deviceId === null || _deviceId === undefined) {
            throw new Error('Required parameter deviceId was null or undefined when calling patchUserDeviceByDbsUserIdAndDeviceId.');
        }
        const _dbsUserId = requestParameters["dbsUserId"];
        if (_dbsUserId === null || _dbsUserId === undefined) {
            throw new Error('Required parameter dbsUserId was null or undefined when calling patchUserDeviceByDbsUserIdAndDeviceId.');
        }
        const _patchDeviceRequest = requestParameters["patchDeviceRequest"];
        if (_patchDeviceRequest === null || _patchDeviceRequest === undefined) {
            throw new Error('Required parameter patchDeviceRequest was null or undefined when calling patchUserDeviceByDbsUserIdAndDeviceId.');
        }
        return `${this.configuration.basePath}/client-api/v1/users/${encodeURIComponent(String(_dbsUserId))}/devices/${encodeURIComponent(String(_deviceId))}`;
    }
}
ManageOtherUsersDevicesService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManageOtherUsersDevicesService, deps: [{ token: i1.HttpClient }, { token: DEVICE_BASE_PATH, optional: true }, { token: DeviceConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
ManageOtherUsersDevicesService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManageOtherUsersDevicesService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ManageOtherUsersDevicesService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [DEVICE_BASE_PATH]
                }] }, { type: DeviceConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const ManageOtherUsersDevicesServiceDeleteUserDeviceByDeviceIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/users/{dbsUserId}/devices/{deviceId}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const ManageOtherUsersDevicesServiceGetDevicesByDbsUserIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/users/{dbsUserId}/devices",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "devices": [{
                            "deviceId": "3aea3f5c-776a-4547-ae9d-4099d0af7d3b",
                            "idpUserId": "acd18bff-f34a-4329-9e74-de4df3a86c9a",
                            "externalUserId": "acd18bff-f34a-4329-9e74-de4df3a86c9a",
                            "dbsUserId": "8a48e1f56e880779016e8809ab970000",
                            "username": "Bob_Jones",
                            "friendlyName": "Bob's Galaxy S7",
                            "status": "ENABLED",
                            "vendor": "Samsung",
                            "model": "Galaxy S7",
                            "created": "2019-09-03T07:44:57Z",
                            "updated": "2019-10-13T15:30:22Z"
                        }, {
                            "deviceId": "5148b0f1-099f-4ef8-b34e-804013011dcf",
                            "idpUserId": "acd18bff-f34a-4329-9e74-de4df3a86c9a",
                            "externalUserId": "acd18bff-f34a-4329-9e74-de4df3a86c9a",
                            "dbsUserId": "8a48e1f56e880779016e8809ab970000",
                            "username": "Bob_Jones",
                            "friendlyName": "Bob's iPhone",
                            "status": "DISABLED",
                            "vendor": "Apple",
                            "model": "iPhone 10",
                            "created": "2019-09-03T08:34:11Z",
                            "updated": "2019-10-13T15:32:58Z"
                        }]
                }
            },
            {
                status: 200,
                body: {
                    "devices": [{
                            "created": "2000-01-23T04:56:07.000+00:00",
                            "idpUserId": "idpUserId",
                            "deviceId": "deviceId",
                            "pushToken": "pushToken",
                            "platform": "platform",
                            "dbsUserId": "dbsUserId",
                            "externalUserId": "externalUserId",
                            "vendor": "vendor",
                            "model": "model",
                            "updated": "2000-01-23T04:56:07.000+00:00",
                            "friendlyName": "friendlyName",
                            "username": "username"
                        }, {
                            "created": "2000-01-23T04:56:07.000+00:00",
                            "idpUserId": "idpUserId",
                            "deviceId": "deviceId",
                            "pushToken": "pushToken",
                            "platform": "platform",
                            "dbsUserId": "dbsUserId",
                            "externalUserId": "externalUserId",
                            "vendor": "vendor",
                            "model": "model",
                            "updated": "2000-01-23T04:56:07.000+00:00",
                            "friendlyName": "friendlyName",
                            "username": "username"
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
        ]
    }]);
const ManageOtherUsersDevicesServicePatchUserDeviceByDbsUserIdAndDeviceIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/users/{dbsUserId}/devices/{deviceId}",
        method: "PATCH",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const ManageOtherUsersDevicesServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v1/users/{dbsUserId}/devices/{deviceId}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/users/{dbsUserId}/devices",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "devices": [{
                            "deviceId": "3aea3f5c-776a-4547-ae9d-4099d0af7d3b",
                            "idpUserId": "acd18bff-f34a-4329-9e74-de4df3a86c9a",
                            "externalUserId": "acd18bff-f34a-4329-9e74-de4df3a86c9a",
                            "dbsUserId": "8a48e1f56e880779016e8809ab970000",
                            "username": "Bob_Jones",
                            "friendlyName": "Bob's Galaxy S7",
                            "status": "ENABLED",
                            "vendor": "Samsung",
                            "model": "Galaxy S7",
                            "created": "2019-09-03T07:44:57Z",
                            "updated": "2019-10-13T15:30:22Z"
                        }, {
                            "deviceId": "5148b0f1-099f-4ef8-b34e-804013011dcf",
                            "idpUserId": "acd18bff-f34a-4329-9e74-de4df3a86c9a",
                            "externalUserId": "acd18bff-f34a-4329-9e74-de4df3a86c9a",
                            "dbsUserId": "8a48e1f56e880779016e8809ab970000",
                            "username": "Bob_Jones",
                            "friendlyName": "Bob's iPhone",
                            "status": "DISABLED",
                            "vendor": "Apple",
                            "model": "iPhone 10",
                            "created": "2019-09-03T08:34:11Z",
                            "updated": "2019-10-13T15:32:58Z"
                        }]
                }
            },
            {
                status: 200,
                body: {
                    "devices": [{
                            "created": "2000-01-23T04:56:07.000+00:00",
                            "idpUserId": "idpUserId",
                            "deviceId": "deviceId",
                            "pushToken": "pushToken",
                            "platform": "platform",
                            "dbsUserId": "dbsUserId",
                            "externalUserId": "externalUserId",
                            "vendor": "vendor",
                            "model": "model",
                            "updated": "2000-01-23T04:56:07.000+00:00",
                            "friendlyName": "friendlyName",
                            "username": "username"
                        }, {
                            "created": "2000-01-23T04:56:07.000+00:00",
                            "idpUserId": "idpUserId",
                            "deviceId": "deviceId",
                            "pushToken": "pushToken",
                            "platform": "platform",
                            "dbsUserId": "dbsUserId",
                            "externalUserId": "externalUserId",
                            "vendor": "vendor",
                            "model": "model",
                            "updated": "2000-01-23T04:56:07.000+00:00",
                            "friendlyName": "friendlyName",
                            "username": "username"
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/users/{dbsUserId}/devices/{deviceId}",
        method: "PATCH",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
]);

export { AndroidDeviceVerificationServiceService, AndroidDeviceVerificationServiceServiceChallengeMocksProvider, AndroidDeviceVerificationServiceServiceMocksProvider, AndroidDeviceVerificationServiceServiceVerifyMocksProvider, COLLECTION_FORMATS, CONFIG_TOKEN, DEVICE_BASE_PATH, DeviceApiModule, DeviceConfiguration, DeviceStatus, ManageMyDevicesService, ManageMyDevicesServiceDeleteMyDeviceByDeviceIdMocksProvider, ManageMyDevicesServiceGetMyDevicesMocksProvider, ManageMyDevicesServiceMocksProvider, ManageMyDevicesServicePatchMyDeviceByDeviceIdMocksProvider, ManageMyDevicesServicePutPushTokenMocksProvider, ManageOtherUsersDevicesService, ManageOtherUsersDevicesServiceDeleteUserDeviceByDeviceIdMocksProvider, ManageOtherUsersDevicesServiceGetDevicesByDbsUserIdMocksProvider, ManageOtherUsersDevicesServiceMocksProvider, ManageOtherUsersDevicesServicePatchUserDeviceByDbsUserIdAndDeviceIdMocksProvider, Platform };
//# sourceMappingURL=backbase-device-http-ang.js.map
