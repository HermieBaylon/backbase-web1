import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { GetDevicesResponse } from '../model/models';
import { PatchDeviceRequest } from '../model/models';
import { DeviceConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface DeleteUserDeviceByDeviceIdRequestParams {
    ["deviceId"]: string;
    ["dbsUserId"]: string;
}
export interface GetDevicesByDbsUserIdRequestParams {
    ["dbsUserId"]: string;
}
export interface PatchUserDeviceByDbsUserIdAndDeviceIdRequestParams {
    ["deviceId"]: string;
    ["dbsUserId"]: string;
    ["patchDeviceRequest"]: PatchDeviceRequest;
}
export declare class ManageOtherUsersDevicesService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: DeviceConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: DeviceConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    deleteUserDeviceByDeviceId(requestParameters: DeleteUserDeviceByDeviceIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    deleteUserDeviceByDeviceId(requestParameters: DeleteUserDeviceByDeviceIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    deleteUserDeviceByDeviceId(requestParameters: DeleteUserDeviceByDeviceIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    deleteUserDeviceByDeviceIdUrl(requestParameters: DeleteUserDeviceByDeviceIdRequestParams): string;
    getDevicesByDbsUserId(requestParameters: GetDevicesByDbsUserIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<GetDevicesResponse>;
    getDevicesByDbsUserId(requestParameters: GetDevicesByDbsUserIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<GetDevicesResponse>>;
    getDevicesByDbsUserId(requestParameters: GetDevicesByDbsUserIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<GetDevicesResponse>>;
    getDevicesByDbsUserIdUrl(requestParameters: GetDevicesByDbsUserIdRequestParams): string;
    patchUserDeviceByDbsUserIdAndDeviceId(requestParameters: PatchUserDeviceByDbsUserIdAndDeviceIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    patchUserDeviceByDbsUserIdAndDeviceId(requestParameters: PatchUserDeviceByDbsUserIdAndDeviceIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    patchUserDeviceByDbsUserIdAndDeviceId(requestParameters: PatchUserDeviceByDbsUserIdAndDeviceIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    patchUserDeviceByDbsUserIdAndDeviceIdUrl(requestParameters: PatchUserDeviceByDbsUserIdAndDeviceIdRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<ManageOtherUsersDevicesService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<ManageOtherUsersDevicesService>;
}
