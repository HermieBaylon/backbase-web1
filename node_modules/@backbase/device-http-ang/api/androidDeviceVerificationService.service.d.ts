import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { ChallengeNonceRequest } from '../model/models';
import { ChallengeNonceResponse } from '../model/models';
import { DeviceAttestationRequest } from '../model/models';
import { DeviceAttestationResponse } from '../model/models';
import { DeviceConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface ChallengeRequestParams {
    ["challengeNonceRequest"]: ChallengeNonceRequest;
}
export interface VerifyRequestParams {
    ["deviceAttestationRequest"]?: DeviceAttestationRequest;
}
export declare class AndroidDeviceVerificationServiceService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: DeviceConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: DeviceConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    challenge(requestParameters: ChallengeRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<ChallengeNonceResponse>;
    challenge(requestParameters: ChallengeRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<ChallengeNonceResponse>>;
    challenge(requestParameters: ChallengeRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<ChallengeNonceResponse>>;
    challengeUrl(requestParameters: ChallengeRequestParams): string;
    verify(requestParameters: VerifyRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<DeviceAttestationResponse>;
    verify(requestParameters: VerifyRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<DeviceAttestationResponse>>;
    verify(requestParameters: VerifyRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<DeviceAttestationResponse>>;
    verifyUrl(requestParameters: VerifyRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<AndroidDeviceVerificationServiceService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<AndroidDeviceVerificationServiceService>;
}
