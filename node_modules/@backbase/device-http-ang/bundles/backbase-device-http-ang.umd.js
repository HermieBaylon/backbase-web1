(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common/http'), require('@backbase/foundation-ang/data-http')) :
    typeof define === 'function' && define.amd ? define('@backbase/device-http-ang', ['exports', '@angular/core', '@angular/common/http', '@backbase/foundation-ang/data-http'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["device-http-ang"] = {}), global.ng.core, global.ng.common.http, global.i2));
})(this, (function (exports, i0, i1, i2) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);

    var DeviceStatus = {
        ENABLED: 'ENABLED',
        DISABLED: 'DISABLED',
        REMOVED: 'REMOVED'
    };

    var Platform = {
        Ios: 'ios',
        Android: 'android',
        Huawei: 'huawei'
    };

    var DEVICE_BASE_PATH = new i0.InjectionToken('DEVICE_BASE_PATH');
    var COLLECTION_FORMATS = {
        'csv': ',',
        'tsv': '   ',
        'ssv': ' ',
        'pipes': '|'
    };

    var DeviceConfiguration = /** @class */ (function () {
        function DeviceConfiguration(configurationParameters) {
            if (configurationParameters === void 0) { configurationParameters = {}; }
            this.apiKeys = configurationParameters.apiKeys;
            this.username = configurationParameters.username;
            this.password = configurationParameters.password;
            this.accessToken = configurationParameters.accessToken;
            this.basePath = configurationParameters.basePath;
            this.withCredentials = configurationParameters.withCredentials;
            this.encoder = configurationParameters.encoder;
            if (configurationParameters.credentials) {
                this.credentials = configurationParameters.credentials;
            }
            else {
                this.credentials = {};
            }
        }
        DeviceConfiguration.prototype.selectHeaderContentType = function (contentTypes) {
            var _this = this;
            if (contentTypes.length === 0) {
                return undefined;
            }
            var type = contentTypes.find(function (x) { return _this.isJsonMime(x); });
            if (type === undefined) {
                return contentTypes[0];
            }
            return type;
        };
        DeviceConfiguration.prototype.selectHeaderAccept = function (accepts) {
            var _this = this;
            if (accepts.length === 0) {
                return undefined;
            }
            var type = accepts.find(function (x) { return _this.isJsonMime(x); });
            if (type === undefined) {
                return accepts[0];
            }
            return type;
        };
        DeviceConfiguration.prototype.isJsonMime = function (mime) {
            var jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
            return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
        };
        DeviceConfiguration.prototype.lookupCredential = function (key) {
            var value = this.credentials[key];
            return typeof value === 'function'
                ? value()
                : value;
        };
        return DeviceConfiguration;
    }());
    var CONFIG_TOKEN = new i0.InjectionToken('api-data-module DeviceConfiguration');

    var DeviceApiModule = /** @class */ (function () {
        function DeviceApiModule(parentModule, http, dataModulesManager, config) {
            if (parentModule) {
                throw new Error('DeviceApiModule is already loaded. Import in your base AppModule only.');
            }
            if (!http) {
                throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                    'See also https://github.com/angular/angular/issues/20575');
            }
            if (dataModulesManager) {
                dataModulesManager.setModuleConfig(CONFIG_TOKEN, {
                    apiRoot: '',
                    servicePath: config.basePath || '',
                    headers: {},
                });
            }
        }
        DeviceApiModule.forRoot = function (configurationFactory) {
            return {
                ngModule: DeviceApiModule,
                providers: [{ provide: DeviceConfiguration, useFactory: configurationFactory }]
            };
        };
        return DeviceApiModule;
    }());
    DeviceApiModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: DeviceApiModule, deps: [{ token: DeviceApiModule, optional: true, skipSelf: true }, { token: i1__namespace.HttpClient, optional: true }, { token: i2__namespace.DataModulesManager, optional: true }, { token: DeviceConfiguration }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    DeviceApiModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: DeviceApiModule });
    DeviceApiModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: DeviceApiModule, providers: [], imports: [[]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: DeviceApiModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [],
                        declarations: [],
                        exports: [],
                        providers: []
                    }]
            }], ctorParameters: function () {
            return [{ type: DeviceApiModule, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.SkipSelf
                        }] }, { type: i1__namespace.HttpClient, decorators: [{
                            type: i0.Optional
                        }] }, { type: i2__namespace.DataModulesManager, decorators: [{
                            type: i0.Optional
                        }] }, { type: DeviceConfiguration }];
        } });

    var CustomHttpParameterCodec = /** @class */ (function () {
        function CustomHttpParameterCodec() {
        }
        CustomHttpParameterCodec.prototype.encodeKey = function (k) {
            return encodeURIComponent(k);
        };
        CustomHttpParameterCodec.prototype.encodeValue = function (v) {
            return encodeURIComponent(v);
        };
        CustomHttpParameterCodec.prototype.decodeKey = function (k) {
            return decodeURIComponent(k);
        };
        CustomHttpParameterCodec.prototype.decodeValue = function (v) {
            return decodeURIComponent(v);
        };
        return CustomHttpParameterCodec;
    }());

    var AndroidDeviceVerificationServiceService = /** @class */ (function () {
        function AndroidDeviceVerificationServiceService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new DeviceConfiguration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        AndroidDeviceVerificationServiceService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        AndroidDeviceVerificationServiceService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        AndroidDeviceVerificationServiceService.prototype.challenge = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _challengeNonceRequest = requestParameters["challengeNonceRequest"];
            if (_challengeNonceRequest === null || _challengeNonceRequest === undefined) {
                throw new Error('Required parameter challengeNonceRequest was null or undefined when calling challenge.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/verification/v1/android/challenges", _challengeNonceRequest, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        AndroidDeviceVerificationServiceService.prototype.challengeUrl = function (requestParameters) {
            var _challengeNonceRequest = requestParameters["challengeNonceRequest"];
            if (_challengeNonceRequest === null || _challengeNonceRequest === undefined) {
                throw new Error('Required parameter challengeNonceRequest was null or undefined when calling challenge.');
            }
            return this.configuration.basePath + "/client-api/verification/v1/android/challenges";
        };
        AndroidDeviceVerificationServiceService.prototype.verify = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _deviceAttestationRequest = requestParameters["deviceAttestationRequest"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/verification/v1/android/attestations", _deviceAttestationRequest, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        AndroidDeviceVerificationServiceService.prototype.verifyUrl = function (requestParameters) {
            var _deviceAttestationRequest = requestParameters["deviceAttestationRequest"];
            return this.configuration.basePath + "/client-api/verification/v1/android/attestations";
        };
        return AndroidDeviceVerificationServiceService;
    }());
    AndroidDeviceVerificationServiceService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AndroidDeviceVerificationServiceService, deps: [{ token: i1__namespace.HttpClient }, { token: DEVICE_BASE_PATH, optional: true }, { token: DeviceConfiguration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    AndroidDeviceVerificationServiceService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AndroidDeviceVerificationServiceService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AndroidDeviceVerificationServiceService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [DEVICE_BASE_PATH]
                        }] }, { type: DeviceConfiguration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var AndroidDeviceVerificationServiceServiceChallengeMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/verification/v1/android/challenges",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: {
                        "nonce": "base64 encoded long string"
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var AndroidDeviceVerificationServiceServiceVerifyMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/verification/v1/android/attestations",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {
                        "success": true,
                        "attestation": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsIng1YyI6WyJNSUlENGpDQ0FzcWdBd0lCQWdJSUNxcGkwV2JVWHh3d0RRWUpLb1pJaHZjTkFRRUxCUUF3Z1lBeEN6QUpCZ05WQkFZVEFsVlRNUk13RVFZRFZRUUlFd3BEWVd4cFptOXlibWxoTVJZd0ZBWURWUVFIRXcxVFlXNGdSbkpoYm1OcGMyTnZNUmd3RmdZRFZRUUtFdzlGZUdGdGNHeGxJRU52YlhCaGJua3hGREFTQmdOVkJBc1RDMFY0WVcxd2JHVWdUM0puTVJRd0VnWURWUVFERXd0bGVHRnRjR3hsTG1OdmJUQWVGdzB5TVRBNU1qRXhOVFUwTURWYUZ3MHlNVEV5TWpBeE5UVTBNRFZhTUlHQU1Rc3dDUVlEVlFRR0V3SlZVekVUTUJFR0ExVUVDQk1LUTJGc2FXWnZjbTVwWVRFV01CUUdBMVVFQnhNTlUyRnVJRVp5WVc1amFYTmpiekVZTUJZR0ExVUVDaE1QUlhoaGJYQnNaU0JEYjIxd1lXNTVNUlF3RWdZRFZRUUxFd3RGZUdGdGNHeGxJRTl5WnpFVU1CSUdBMVVFQXhNTFpYaGhiWEJzWlM1amIyMHdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDZU41ZTZpV1Z5WGNuVTdrT2c0YXJrME5WczdOVG84R3RoY1NUNW4rRmVGcnNFakw2V213eTIreTFZa3pNRmErUVdwdENWeGZZVXVTSUpCNXhiMHZaUTdEOVFGTTB2OTU0NVE2aGRPTm9sbWZ2MVczd0k2UTBjN25QNXMvbXBFcm1nRTI3bmRITzNXUHFDT3NnczRsVytnWEhjZzJPeGNwYm9KZHJuVnAzWjdmMFhjMWtPUkNFcVI2RDRlb1JUSjF0VkpSMzNpZytGWnF0UVJIbkp0VEptQS84YXZwSXhXM2hkb0dkaVo1KzhLWlk4blRKTnR3elIySUxITGpiQ0RyTkl4YWVZdUlyVWp5cm81Z0M0VjhDbEpkMU0wdEtlc2NrUStRbll2NVptZDE2TWEvL29vRFhnOGVseHZ4SFY3QnJ5dmRzK2FBbS9MZXRaZFNqeitrRzFBZ01CQUFHalhqQmNNQjBHQTFVZERnUVdCQlFhdFM4b2lWYjVUaHd5VmthWjUrOEJvei9XbmpBT0JnTlZIUThCQWY4RUJBTUNCYUF3RmdZRFZSMFJCQTh3RFlJTFptOXZMbUpoY2k1amIyMHdFd1lEVlIwbEJBd3dDZ1lJS3dZQkJRVUhBd0V3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUJKeElhc3RkaDFROThmNXAxNVA5bUlKeWZFc2kvMUpab3FXZjAzVko2ZjZpcVMza3d1MkFJWHM5c0JGMWpZdWZic014VWNhQnRPQnpua1NYY0dUaGlFUCtZRGowOTN3bzlhdG9NbFBOZG1NNCtmMWNIa1JmR0habkVyWTBoNSt3Sy9iNXhhSnlmbjZxQnZKR21mc1BMUG9MV09UNkpTdk1aWGs5Nk1OcmV5R010SWNPUXlvQVluRXJ0Q1cvTWhwN2trNkdZQ3pkK3cwQnAwTEFuQlhUQU00enE3NU02eWw5R0VjanRPWjVYWC9uQ1VIMVp0NmFKdzU0OVp6S2NDY3lySVV0bTBZdXZsdUJVakE2dFVFU0c5ZTlzKy8wRWduRlBtOUR5N21MSE1lSmNKSWFvNVY3QW1rUDZ3TGNhZWliUEViNU43N0ZTaTVoZ0FDVzJBc0VHdz0iXX0.eyJhcGtDZXJ0aWZpY2F0ZURpZ2VzdFNoYTI1NiI6WyLvv73vv71C77-977-9XHUwMDFDXHUwMDE077-977-977-9yJlv77-9JCfvv71B77-9ZO-_ve-_vUzvv73vv73vv71cdTAwMUJ4Uu-_vVUiXSwiYXBrUGFja2FnZU5hbWUiOiJjb20ucGFja2FnZS5uYW1lLm9mLnJlcXVlc3RpbmcuYXBwIiwiYmFzaWNJbnRlZ3JpdHkiOnRydWUsImN0c1Byb2ZpbGVNYXRjaCI6dHJ1ZSwiZXZhbHVhdGlvblR5cGUiOiJCQVNJQyIsImlhdCI6MTYzMjQ5NjAyNDYxMCwibm9uY2UiOiIyZjY4ZmJmYS0xNzUwLTQ1MDMtOGJmNS03OTU3NTc2ZDVkMzEiLCJ0aW1lc3RhbXBNcyI6MTYzMjQ5NjAyNDYxMH0.mV5kqvnRNcxeqH5XrzdNwSgcz8XJwdPxOv_VKoAHQjEwKv3kKftOH87cGoQij0q2Xgln0ohHsc8lSYGUqiYg1he3UJGRi0-CIXds121eXMFWPUzzTy-Bl4csxjOE_n2O7DORprKmPaVhT-anTNnbynFnMDMVA21UUIYnGryzBvDV8Xj2Mb-mv1K7xcoEpKqH3uzpKuTAOuIQctBADvIl80BkIf_JjHKC7gTIRbn-BF84RMaF29g1qBvhjPgCn5MLgyO-yMg8w3aAlJqPqZQftXNqYD4Uo9zhzjwuS_HGWJkmcJbERmzu7aRGJcS7zvai5pKDsBorxQnFugEe2A8u1w"
                    }
                },
                {
                    status: 403,
                    body: {
                        "success": false,
                        "attestation": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsIng1YyI6WyJNSUlENGpDQ0FzcWdBd0lCQWdJSUNxcGkwV2JVWHh3d0RRWUpLb1pJaHZjTkFRRUxCUUF3Z1lBeEN6QUpCZ05WQkFZVEFsVlRNUk13RVFZRFZRUUlFd3BEWVd4cFptOXlibWxoTVJZd0ZBWURWUVFIRXcxVFlXNGdSbkpoYm1OcGMyTnZNUmd3RmdZRFZRUUtFdzlGZUdGdGNHeGxJRU52YlhCaGJua3hGREFTQmdOVkJBc1RDMFY0WVcxd2JHVWdUM0puTVJRd0VnWURWUVFERXd0bGVHRnRjR3hsTG1OdmJUQWVGdzB5TVRBNU1qRXhOVFUwTURWYUZ3MHlNVEV5TWpBeE5UVTBNRFZhTUlHQU1Rc3dDUVlEVlFRR0V3SlZVekVUTUJFR0ExVUVDQk1LUTJGc2FXWnZjbTVwWVRFV01CUUdBMVVFQnhNTlUyRnVJRVp5WVc1amFYTmpiekVZTUJZR0ExVUVDaE1QUlhoaGJYQnNaU0JEYjIxd1lXNTVNUlF3RWdZRFZRUUxFd3RGZUdGdGNHeGxJRTl5WnpFVU1CSUdBMVVFQXhNTFpYaGhiWEJzWlM1amIyMHdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDZU41ZTZpV1Z5WGNuVTdrT2c0YXJrME5WczdOVG84R3RoY1NUNW4rRmVGcnNFakw2V213eTIreTFZa3pNRmErUVdwdENWeGZZVXVTSUpCNXhiMHZaUTdEOVFGTTB2OTU0NVE2aGRPTm9sbWZ2MVczd0k2UTBjN25QNXMvbXBFcm1nRTI3bmRITzNXUHFDT3NnczRsVytnWEhjZzJPeGNwYm9KZHJuVnAzWjdmMFhjMWtPUkNFcVI2RDRlb1JUSjF0VkpSMzNpZytGWnF0UVJIbkp0VEptQS84YXZwSXhXM2hkb0dkaVo1KzhLWlk4blRKTnR3elIySUxITGpiQ0RyTkl4YWVZdUlyVWp5cm81Z0M0VjhDbEpkMU0wdEtlc2NrUStRbll2NVptZDE2TWEvL29vRFhnOGVseHZ4SFY3QnJ5dmRzK2FBbS9MZXRaZFNqeitrRzFBZ01CQUFHalhqQmNNQjBHQTFVZERnUVdCQlFhdFM4b2lWYjVUaHd5VmthWjUrOEJvei9XbmpBT0JnTlZIUThCQWY4RUJBTUNCYUF3RmdZRFZSMFJCQTh3RFlJTFptOXZMbUpoY2k1amIyMHdFd1lEVlIwbEJBd3dDZ1lJS3dZQkJRVUhBd0V3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUJKeElhc3RkaDFROThmNXAxNVA5bUlKeWZFc2kvMUpab3FXZjAzVko2ZjZpcVMza3d1MkFJWHM5c0JGMWpZdWZic014VWNhQnRPQnpua1NYY0dUaGlFUCtZRGowOTN3bzlhdG9NbFBOZG1NNCtmMWNIa1JmR0habkVyWTBoNSt3Sy9iNXhhSnlmbjZxQnZKR21mc1BMUG9MV09UNkpTdk1aWGs5Nk1OcmV5R010SWNPUXlvQVluRXJ0Q1cvTWhwN2trNkdZQ3pkK3cwQnAwTEFuQlhUQU00enE3NU02eWw5R0VjanRPWjVYWC9uQ1VIMVp0NmFKdzU0OVp6S2NDY3lySVV0bTBZdXZsdUJVakE2dFVFU0c5ZTlzKy8wRWduRlBtOUR5N21MSE1lSmNKSWFvNVY3QW1rUDZ3TGNhZWliUEViNU43N0ZTaTVoZ0FDVzJBc0VHdz0iXX0.eyJhcGtDZXJ0aWZpY2F0ZURpZ2VzdFNoYTI1NiI6WyLvv73vv71C77-977-9XHUwMDFDXHUwMDE077-977-977-9yJlv77-9JCfvv71B77-9ZO-_ve-_vUzvv73vv73vv71cdTAwMUJ4Uu-_vVUiXSwiYXBrUGFja2FnZU5hbWUiOiJjb20ucGFja2FnZS5uYW1lLm9mLnJlcXVlc3RpbmcuYXBwIiwiYmFzaWNJbnRlZ3JpdHkiOnRydWUsImN0c1Byb2ZpbGVNYXRjaCI6dHJ1ZSwiZXZhbHVhdGlvblR5cGUiOiJCQVNJQyIsImlhdCI6MTYzMjQ5NjAyNDYxMCwibm9uY2UiOiIyZjY4ZmJmYS0xNzUwLTQ1MDMtOGJmNS03OTU3NTc2ZDVkMzEiLCJ0aW1lc3RhbXBNcyI6MTYzMjQ5NjAyNDYxMH0.mV5kqvnRNcxeqH5XrzdNwSgcz8XJwdPxOv_VKoAHQjEwKv3kKftOH87cGoQij0q2Xgln0ohHsc8lSYGUqiYg1he3UJGRi0-CIXds121eXMFWPUzzTy-Bl4csxjOE_n2O7DORprKmPaVhT-anTNnbynFnMDMVA21UUIYnGryzBvDV8Xj2Mb-mv1K7xcoEpKqH3uzpKuTAOuIQctBADvIl80BkIf_JjHKC7gTIRbn-BF84RMaF29g1qBvhjPgCn5MLgyO-yMg8w3aAlJqPqZQftXNqYD4Uo9zhzjwuS_HGWJkmcJbERmzu7aRGJcS7zvai5pKDsBorxQnFugEe2A8u1w"
                    }
                },
            ]
        }]);
    var AndroidDeviceVerificationServiceServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/client-api/verification/v1/android/challenges",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: {
                        "nonce": "base64 encoded long string"
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/verification/v1/android/attestations",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {
                        "success": true,
                        "attestation": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsIng1YyI6WyJNSUlENGpDQ0FzcWdBd0lCQWdJSUNxcGkwV2JVWHh3d0RRWUpLb1pJaHZjTkFRRUxCUUF3Z1lBeEN6QUpCZ05WQkFZVEFsVlRNUk13RVFZRFZRUUlFd3BEWVd4cFptOXlibWxoTVJZd0ZBWURWUVFIRXcxVFlXNGdSbkpoYm1OcGMyTnZNUmd3RmdZRFZRUUtFdzlGZUdGdGNHeGxJRU52YlhCaGJua3hGREFTQmdOVkJBc1RDMFY0WVcxd2JHVWdUM0puTVJRd0VnWURWUVFERXd0bGVHRnRjR3hsTG1OdmJUQWVGdzB5TVRBNU1qRXhOVFUwTURWYUZ3MHlNVEV5TWpBeE5UVTBNRFZhTUlHQU1Rc3dDUVlEVlFRR0V3SlZVekVUTUJFR0ExVUVDQk1LUTJGc2FXWnZjbTVwWVRFV01CUUdBMVVFQnhNTlUyRnVJRVp5WVc1amFYTmpiekVZTUJZR0ExVUVDaE1QUlhoaGJYQnNaU0JEYjIxd1lXNTVNUlF3RWdZRFZRUUxFd3RGZUdGdGNHeGxJRTl5WnpFVU1CSUdBMVVFQXhNTFpYaGhiWEJzWlM1amIyMHdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDZU41ZTZpV1Z5WGNuVTdrT2c0YXJrME5WczdOVG84R3RoY1NUNW4rRmVGcnNFakw2V213eTIreTFZa3pNRmErUVdwdENWeGZZVXVTSUpCNXhiMHZaUTdEOVFGTTB2OTU0NVE2aGRPTm9sbWZ2MVczd0k2UTBjN25QNXMvbXBFcm1nRTI3bmRITzNXUHFDT3NnczRsVytnWEhjZzJPeGNwYm9KZHJuVnAzWjdmMFhjMWtPUkNFcVI2RDRlb1JUSjF0VkpSMzNpZytGWnF0UVJIbkp0VEptQS84YXZwSXhXM2hkb0dkaVo1KzhLWlk4blRKTnR3elIySUxITGpiQ0RyTkl4YWVZdUlyVWp5cm81Z0M0VjhDbEpkMU0wdEtlc2NrUStRbll2NVptZDE2TWEvL29vRFhnOGVseHZ4SFY3QnJ5dmRzK2FBbS9MZXRaZFNqeitrRzFBZ01CQUFHalhqQmNNQjBHQTFVZERnUVdCQlFhdFM4b2lWYjVUaHd5VmthWjUrOEJvei9XbmpBT0JnTlZIUThCQWY4RUJBTUNCYUF3RmdZRFZSMFJCQTh3RFlJTFptOXZMbUpoY2k1amIyMHdFd1lEVlIwbEJBd3dDZ1lJS3dZQkJRVUhBd0V3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUJKeElhc3RkaDFROThmNXAxNVA5bUlKeWZFc2kvMUpab3FXZjAzVko2ZjZpcVMza3d1MkFJWHM5c0JGMWpZdWZic014VWNhQnRPQnpua1NYY0dUaGlFUCtZRGowOTN3bzlhdG9NbFBOZG1NNCtmMWNIa1JmR0habkVyWTBoNSt3Sy9iNXhhSnlmbjZxQnZKR21mc1BMUG9MV09UNkpTdk1aWGs5Nk1OcmV5R010SWNPUXlvQVluRXJ0Q1cvTWhwN2trNkdZQ3pkK3cwQnAwTEFuQlhUQU00enE3NU02eWw5R0VjanRPWjVYWC9uQ1VIMVp0NmFKdzU0OVp6S2NDY3lySVV0bTBZdXZsdUJVakE2dFVFU0c5ZTlzKy8wRWduRlBtOUR5N21MSE1lSmNKSWFvNVY3QW1rUDZ3TGNhZWliUEViNU43N0ZTaTVoZ0FDVzJBc0VHdz0iXX0.eyJhcGtDZXJ0aWZpY2F0ZURpZ2VzdFNoYTI1NiI6WyLvv73vv71C77-977-9XHUwMDFDXHUwMDE077-977-977-9yJlv77-9JCfvv71B77-9ZO-_ve-_vUzvv73vv73vv71cdTAwMUJ4Uu-_vVUiXSwiYXBrUGFja2FnZU5hbWUiOiJjb20ucGFja2FnZS5uYW1lLm9mLnJlcXVlc3RpbmcuYXBwIiwiYmFzaWNJbnRlZ3JpdHkiOnRydWUsImN0c1Byb2ZpbGVNYXRjaCI6dHJ1ZSwiZXZhbHVhdGlvblR5cGUiOiJCQVNJQyIsImlhdCI6MTYzMjQ5NjAyNDYxMCwibm9uY2UiOiIyZjY4ZmJmYS0xNzUwLTQ1MDMtOGJmNS03OTU3NTc2ZDVkMzEiLCJ0aW1lc3RhbXBNcyI6MTYzMjQ5NjAyNDYxMH0.mV5kqvnRNcxeqH5XrzdNwSgcz8XJwdPxOv_VKoAHQjEwKv3kKftOH87cGoQij0q2Xgln0ohHsc8lSYGUqiYg1he3UJGRi0-CIXds121eXMFWPUzzTy-Bl4csxjOE_n2O7DORprKmPaVhT-anTNnbynFnMDMVA21UUIYnGryzBvDV8Xj2Mb-mv1K7xcoEpKqH3uzpKuTAOuIQctBADvIl80BkIf_JjHKC7gTIRbn-BF84RMaF29g1qBvhjPgCn5MLgyO-yMg8w3aAlJqPqZQftXNqYD4Uo9zhzjwuS_HGWJkmcJbERmzu7aRGJcS7zvai5pKDsBorxQnFugEe2A8u1w"
                    }
                },
                {
                    status: 403,
                    body: {
                        "success": false,
                        "attestation": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsIng1YyI6WyJNSUlENGpDQ0FzcWdBd0lCQWdJSUNxcGkwV2JVWHh3d0RRWUpLb1pJaHZjTkFRRUxCUUF3Z1lBeEN6QUpCZ05WQkFZVEFsVlRNUk13RVFZRFZRUUlFd3BEWVd4cFptOXlibWxoTVJZd0ZBWURWUVFIRXcxVFlXNGdSbkpoYm1OcGMyTnZNUmd3RmdZRFZRUUtFdzlGZUdGdGNHeGxJRU52YlhCaGJua3hGREFTQmdOVkJBc1RDMFY0WVcxd2JHVWdUM0puTVJRd0VnWURWUVFERXd0bGVHRnRjR3hsTG1OdmJUQWVGdzB5TVRBNU1qRXhOVFUwTURWYUZ3MHlNVEV5TWpBeE5UVTBNRFZhTUlHQU1Rc3dDUVlEVlFRR0V3SlZVekVUTUJFR0ExVUVDQk1LUTJGc2FXWnZjbTVwWVRFV01CUUdBMVVFQnhNTlUyRnVJRVp5WVc1amFYTmpiekVZTUJZR0ExVUVDaE1QUlhoaGJYQnNaU0JEYjIxd1lXNTVNUlF3RWdZRFZRUUxFd3RGZUdGdGNHeGxJRTl5WnpFVU1CSUdBMVVFQXhNTFpYaGhiWEJzWlM1amIyMHdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDZU41ZTZpV1Z5WGNuVTdrT2c0YXJrME5WczdOVG84R3RoY1NUNW4rRmVGcnNFakw2V213eTIreTFZa3pNRmErUVdwdENWeGZZVXVTSUpCNXhiMHZaUTdEOVFGTTB2OTU0NVE2aGRPTm9sbWZ2MVczd0k2UTBjN25QNXMvbXBFcm1nRTI3bmRITzNXUHFDT3NnczRsVytnWEhjZzJPeGNwYm9KZHJuVnAzWjdmMFhjMWtPUkNFcVI2RDRlb1JUSjF0VkpSMzNpZytGWnF0UVJIbkp0VEptQS84YXZwSXhXM2hkb0dkaVo1KzhLWlk4blRKTnR3elIySUxITGpiQ0RyTkl4YWVZdUlyVWp5cm81Z0M0VjhDbEpkMU0wdEtlc2NrUStRbll2NVptZDE2TWEvL29vRFhnOGVseHZ4SFY3QnJ5dmRzK2FBbS9MZXRaZFNqeitrRzFBZ01CQUFHalhqQmNNQjBHQTFVZERnUVdCQlFhdFM4b2lWYjVUaHd5VmthWjUrOEJvei9XbmpBT0JnTlZIUThCQWY4RUJBTUNCYUF3RmdZRFZSMFJCQTh3RFlJTFptOXZMbUpoY2k1amIyMHdFd1lEVlIwbEJBd3dDZ1lJS3dZQkJRVUhBd0V3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUJKeElhc3RkaDFROThmNXAxNVA5bUlKeWZFc2kvMUpab3FXZjAzVko2ZjZpcVMza3d1MkFJWHM5c0JGMWpZdWZic014VWNhQnRPQnpua1NYY0dUaGlFUCtZRGowOTN3bzlhdG9NbFBOZG1NNCtmMWNIa1JmR0habkVyWTBoNSt3Sy9iNXhhSnlmbjZxQnZKR21mc1BMUG9MV09UNkpTdk1aWGs5Nk1OcmV5R010SWNPUXlvQVluRXJ0Q1cvTWhwN2trNkdZQ3pkK3cwQnAwTEFuQlhUQU00enE3NU02eWw5R0VjanRPWjVYWC9uQ1VIMVp0NmFKdzU0OVp6S2NDY3lySVV0bTBZdXZsdUJVakE2dFVFU0c5ZTlzKy8wRWduRlBtOUR5N21MSE1lSmNKSWFvNVY3QW1rUDZ3TGNhZWliUEViNU43N0ZTaTVoZ0FDVzJBc0VHdz0iXX0.eyJhcGtDZXJ0aWZpY2F0ZURpZ2VzdFNoYTI1NiI6WyLvv73vv71C77-977-9XHUwMDFDXHUwMDE077-977-977-9yJlv77-9JCfvv71B77-9ZO-_ve-_vUzvv73vv73vv71cdTAwMUJ4Uu-_vVUiXSwiYXBrUGFja2FnZU5hbWUiOiJjb20ucGFja2FnZS5uYW1lLm9mLnJlcXVlc3RpbmcuYXBwIiwiYmFzaWNJbnRlZ3JpdHkiOnRydWUsImN0c1Byb2ZpbGVNYXRjaCI6dHJ1ZSwiZXZhbHVhdGlvblR5cGUiOiJCQVNJQyIsImlhdCI6MTYzMjQ5NjAyNDYxMCwibm9uY2UiOiIyZjY4ZmJmYS0xNzUwLTQ1MDMtOGJmNS03OTU3NTc2ZDVkMzEiLCJ0aW1lc3RhbXBNcyI6MTYzMjQ5NjAyNDYxMH0.mV5kqvnRNcxeqH5XrzdNwSgcz8XJwdPxOv_VKoAHQjEwKv3kKftOH87cGoQij0q2Xgln0ohHsc8lSYGUqiYg1he3UJGRi0-CIXds121eXMFWPUzzTy-Bl4csxjOE_n2O7DORprKmPaVhT-anTNnbynFnMDMVA21UUIYnGryzBvDV8Xj2Mb-mv1K7xcoEpKqH3uzpKuTAOuIQctBADvIl80BkIf_JjHKC7gTIRbn-BF84RMaF29g1qBvhjPgCn5MLgyO-yMg8w3aAlJqPqZQftXNqYD4Uo9zhzjwuS_HGWJkmcJbERmzu7aRGJcS7zvai5pKDsBorxQnFugEe2A8u1w"
                    }
                },
            ]
        },
    ]);

    var ManageMyDevicesService = /** @class */ (function () {
        function ManageMyDevicesService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new DeviceConfiguration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        ManageMyDevicesService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        ManageMyDevicesService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        ManageMyDevicesService.prototype.deleteMyDeviceByDeviceId = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _deviceId = requestParameters["deviceId"];
            if (_deviceId === null || _deviceId === undefined) {
                throw new Error('Required parameter deviceId was null or undefined when calling deleteMyDeviceByDeviceId.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.delete(this.configuration.basePath + "/client-api/v1/users/me/devices/" + encodeURIComponent(String(_deviceId)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ManageMyDevicesService.prototype.deleteMyDeviceByDeviceIdUrl = function (requestParameters) {
            var _deviceId = requestParameters["deviceId"];
            if (_deviceId === null || _deviceId === undefined) {
                throw new Error('Required parameter deviceId was null or undefined when calling deleteMyDeviceByDeviceId.');
            }
            return this.configuration.basePath + "/client-api/v1/users/me/devices/" + encodeURIComponent(String(_deviceId));
        };
        ManageMyDevicesService.prototype.getMyDevices = function (observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v1/users/me/devices", {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ManageMyDevicesService.prototype.getMyDevicesUrl = function () {
            return this.configuration.basePath + "/client-api/v1/users/me/devices";
        };
        ManageMyDevicesService.prototype.patchMyDeviceByDeviceId = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _deviceId = requestParameters["deviceId"];
            if (_deviceId === null || _deviceId === undefined) {
                throw new Error('Required parameter deviceId was null or undefined when calling patchMyDeviceByDeviceId.');
            }
            var _patchDeviceRequest = requestParameters["patchDeviceRequest"];
            if (_patchDeviceRequest === null || _patchDeviceRequest === undefined) {
                throw new Error('Required parameter patchDeviceRequest was null or undefined when calling patchMyDeviceByDeviceId.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.patch(this.configuration.basePath + "/client-api/v1/users/me/devices/" + encodeURIComponent(String(_deviceId)), _patchDeviceRequest, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ManageMyDevicesService.prototype.patchMyDeviceByDeviceIdUrl = function (requestParameters) {
            var _deviceId = requestParameters["deviceId"];
            if (_deviceId === null || _deviceId === undefined) {
                throw new Error('Required parameter deviceId was null or undefined when calling patchMyDeviceByDeviceId.');
            }
            var _patchDeviceRequest = requestParameters["patchDeviceRequest"];
            if (_patchDeviceRequest === null || _patchDeviceRequest === undefined) {
                throw new Error('Required parameter patchDeviceRequest was null or undefined when calling patchMyDeviceByDeviceId.');
            }
            return this.configuration.basePath + "/client-api/v1/users/me/devices/" + encodeURIComponent(String(_deviceId));
        };
        ManageMyDevicesService.prototype.putPushToken = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _deviceId = requestParameters["deviceId"];
            if (_deviceId === null || _deviceId === undefined) {
                throw new Error('Required parameter deviceId was null or undefined when calling putPushToken.');
            }
            var _putPushTokenRequest = requestParameters["putPushTokenRequest"];
            if (_putPushTokenRequest === null || _putPushTokenRequest === undefined) {
                throw new Error('Required parameter putPushTokenRequest was null or undefined when calling putPushToken.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.put(this.configuration.basePath + "/client-api/v1/users/me/devices/" + encodeURIComponent(String(_deviceId)) + "/push-tokens", _putPushTokenRequest, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ManageMyDevicesService.prototype.putPushTokenUrl = function (requestParameters) {
            var _deviceId = requestParameters["deviceId"];
            if (_deviceId === null || _deviceId === undefined) {
                throw new Error('Required parameter deviceId was null or undefined when calling putPushToken.');
            }
            var _putPushTokenRequest = requestParameters["putPushTokenRequest"];
            if (_putPushTokenRequest === null || _putPushTokenRequest === undefined) {
                throw new Error('Required parameter putPushTokenRequest was null or undefined when calling putPushToken.');
            }
            return this.configuration.basePath + "/client-api/v1/users/me/devices/" + encodeURIComponent(String(_deviceId)) + "/push-tokens";
        };
        return ManageMyDevicesService;
    }());
    ManageMyDevicesService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ManageMyDevicesService, deps: [{ token: i1__namespace.HttpClient }, { token: DEVICE_BASE_PATH, optional: true }, { token: DeviceConfiguration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    ManageMyDevicesService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ManageMyDevicesService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ManageMyDevicesService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [DEVICE_BASE_PATH]
                        }] }, { type: DeviceConfiguration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var ManageMyDevicesServiceDeleteMyDeviceByDeviceIdMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v1/users/me/devices/{deviceId}",
            method: "DELETE",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var ManageMyDevicesServiceGetMyDevicesMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v1/users/me/devices",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "devices": [{
                                "deviceId": "3aea3f5c-776a-4547-ae9d-4099d0af7d3b",
                                "idpUserId": "acd18bff-f34a-4329-9e74-de4df3a86c9a",
                                "externalUserId": "acd18bff-f34a-4329-9e74-de4df3a86c9a",
                                "dbsUserId": "8a48e1f56e880779016e8809ab970000",
                                "username": "Bob_Jones",
                                "friendlyName": "Bob's Galaxy S7",
                                "status": "ENABLED",
                                "vendor": "Samsung",
                                "model": "Galaxy S7",
                                "created": "2019-09-03T07:44:57Z",
                                "updated": "2019-10-13T15:30:22Z"
                            }, {
                                "deviceId": "5148b0f1-099f-4ef8-b34e-804013011dcf",
                                "idpUserId": "acd18bff-f34a-4329-9e74-de4df3a86c9a",
                                "externalUserId": "acd18bff-f34a-4329-9e74-de4df3a86c9a",
                                "dbsUserId": "8a48e1f56e880779016e8809ab970000",
                                "username": "Bob_Jones",
                                "friendlyName": "Bob's iPhone",
                                "status": "DISABLED",
                                "vendor": "Apple",
                                "model": "iPhone 10",
                                "created": "2019-09-03T08:34:11Z",
                                "updated": "2019-10-13T15:32:58Z"
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
            ]
        }]);
    var ManageMyDevicesServicePatchMyDeviceByDeviceIdMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v1/users/me/devices/{deviceId}",
            method: "PATCH",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var ManageMyDevicesServicePutPushTokenMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v1/users/me/devices/{deviceId}/push-tokens",
            method: "PUT",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var ManageMyDevicesServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/client-api/v1/users/me/devices/{deviceId}",
            method: "DELETE",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v1/users/me/devices",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "devices": [{
                                "deviceId": "3aea3f5c-776a-4547-ae9d-4099d0af7d3b",
                                "idpUserId": "acd18bff-f34a-4329-9e74-de4df3a86c9a",
                                "externalUserId": "acd18bff-f34a-4329-9e74-de4df3a86c9a",
                                "dbsUserId": "8a48e1f56e880779016e8809ab970000",
                                "username": "Bob_Jones",
                                "friendlyName": "Bob's Galaxy S7",
                                "status": "ENABLED",
                                "vendor": "Samsung",
                                "model": "Galaxy S7",
                                "created": "2019-09-03T07:44:57Z",
                                "updated": "2019-10-13T15:30:22Z"
                            }, {
                                "deviceId": "5148b0f1-099f-4ef8-b34e-804013011dcf",
                                "idpUserId": "acd18bff-f34a-4329-9e74-de4df3a86c9a",
                                "externalUserId": "acd18bff-f34a-4329-9e74-de4df3a86c9a",
                                "dbsUserId": "8a48e1f56e880779016e8809ab970000",
                                "username": "Bob_Jones",
                                "friendlyName": "Bob's iPhone",
                                "status": "DISABLED",
                                "vendor": "Apple",
                                "model": "iPhone 10",
                                "created": "2019-09-03T08:34:11Z",
                                "updated": "2019-10-13T15:32:58Z"
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v1/users/me/devices/{deviceId}",
            method: "PATCH",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v1/users/me/devices/{deviceId}/push-tokens",
            method: "PUT",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
    ]);

    var ManageOtherUsersDevicesService = /** @class */ (function () {
        function ManageOtherUsersDevicesService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new DeviceConfiguration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        ManageOtherUsersDevicesService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        ManageOtherUsersDevicesService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        ManageOtherUsersDevicesService.prototype.deleteUserDeviceByDeviceId = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _deviceId = requestParameters["deviceId"];
            if (_deviceId === null || _deviceId === undefined) {
                throw new Error('Required parameter deviceId was null or undefined when calling deleteUserDeviceByDeviceId.');
            }
            var _dbsUserId = requestParameters["dbsUserId"];
            if (_dbsUserId === null || _dbsUserId === undefined) {
                throw new Error('Required parameter dbsUserId was null or undefined when calling deleteUserDeviceByDeviceId.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.delete(this.configuration.basePath + "/client-api/v1/users/" + encodeURIComponent(String(_dbsUserId)) + "/devices/" + encodeURIComponent(String(_deviceId)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ManageOtherUsersDevicesService.prototype.deleteUserDeviceByDeviceIdUrl = function (requestParameters) {
            var _deviceId = requestParameters["deviceId"];
            if (_deviceId === null || _deviceId === undefined) {
                throw new Error('Required parameter deviceId was null or undefined when calling deleteUserDeviceByDeviceId.');
            }
            var _dbsUserId = requestParameters["dbsUserId"];
            if (_dbsUserId === null || _dbsUserId === undefined) {
                throw new Error('Required parameter dbsUserId was null or undefined when calling deleteUserDeviceByDeviceId.');
            }
            return this.configuration.basePath + "/client-api/v1/users/" + encodeURIComponent(String(_dbsUserId)) + "/devices/" + encodeURIComponent(String(_deviceId));
        };
        ManageOtherUsersDevicesService.prototype.getDevicesByDbsUserId = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _dbsUserId = requestParameters["dbsUserId"];
            if (_dbsUserId === null || _dbsUserId === undefined) {
                throw new Error('Required parameter dbsUserId was null or undefined when calling getDevicesByDbsUserId.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v1/users/" + encodeURIComponent(String(_dbsUserId)) + "/devices", {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ManageOtherUsersDevicesService.prototype.getDevicesByDbsUserIdUrl = function (requestParameters) {
            var _dbsUserId = requestParameters["dbsUserId"];
            if (_dbsUserId === null || _dbsUserId === undefined) {
                throw new Error('Required parameter dbsUserId was null or undefined when calling getDevicesByDbsUserId.');
            }
            return this.configuration.basePath + "/client-api/v1/users/" + encodeURIComponent(String(_dbsUserId)) + "/devices";
        };
        ManageOtherUsersDevicesService.prototype.patchUserDeviceByDbsUserIdAndDeviceId = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _deviceId = requestParameters["deviceId"];
            if (_deviceId === null || _deviceId === undefined) {
                throw new Error('Required parameter deviceId was null or undefined when calling patchUserDeviceByDbsUserIdAndDeviceId.');
            }
            var _dbsUserId = requestParameters["dbsUserId"];
            if (_dbsUserId === null || _dbsUserId === undefined) {
                throw new Error('Required parameter dbsUserId was null or undefined when calling patchUserDeviceByDbsUserIdAndDeviceId.');
            }
            var _patchDeviceRequest = requestParameters["patchDeviceRequest"];
            if (_patchDeviceRequest === null || _patchDeviceRequest === undefined) {
                throw new Error('Required parameter patchDeviceRequest was null or undefined when calling patchUserDeviceByDbsUserIdAndDeviceId.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.patch(this.configuration.basePath + "/client-api/v1/users/" + encodeURIComponent(String(_dbsUserId)) + "/devices/" + encodeURIComponent(String(_deviceId)), _patchDeviceRequest, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ManageOtherUsersDevicesService.prototype.patchUserDeviceByDbsUserIdAndDeviceIdUrl = function (requestParameters) {
            var _deviceId = requestParameters["deviceId"];
            if (_deviceId === null || _deviceId === undefined) {
                throw new Error('Required parameter deviceId was null or undefined when calling patchUserDeviceByDbsUserIdAndDeviceId.');
            }
            var _dbsUserId = requestParameters["dbsUserId"];
            if (_dbsUserId === null || _dbsUserId === undefined) {
                throw new Error('Required parameter dbsUserId was null or undefined when calling patchUserDeviceByDbsUserIdAndDeviceId.');
            }
            var _patchDeviceRequest = requestParameters["patchDeviceRequest"];
            if (_patchDeviceRequest === null || _patchDeviceRequest === undefined) {
                throw new Error('Required parameter patchDeviceRequest was null or undefined when calling patchUserDeviceByDbsUserIdAndDeviceId.');
            }
            return this.configuration.basePath + "/client-api/v1/users/" + encodeURIComponent(String(_dbsUserId)) + "/devices/" + encodeURIComponent(String(_deviceId));
        };
        return ManageOtherUsersDevicesService;
    }());
    ManageOtherUsersDevicesService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ManageOtherUsersDevicesService, deps: [{ token: i1__namespace.HttpClient }, { token: DEVICE_BASE_PATH, optional: true }, { token: DeviceConfiguration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    ManageOtherUsersDevicesService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ManageOtherUsersDevicesService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ManageOtherUsersDevicesService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [DEVICE_BASE_PATH]
                        }] }, { type: DeviceConfiguration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var ManageOtherUsersDevicesServiceDeleteUserDeviceByDeviceIdMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v1/users/{dbsUserId}/devices/{deviceId}",
            method: "DELETE",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var ManageOtherUsersDevicesServiceGetDevicesByDbsUserIdMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v1/users/{dbsUserId}/devices",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "devices": [{
                                "deviceId": "3aea3f5c-776a-4547-ae9d-4099d0af7d3b",
                                "idpUserId": "acd18bff-f34a-4329-9e74-de4df3a86c9a",
                                "externalUserId": "acd18bff-f34a-4329-9e74-de4df3a86c9a",
                                "dbsUserId": "8a48e1f56e880779016e8809ab970000",
                                "username": "Bob_Jones",
                                "friendlyName": "Bob's Galaxy S7",
                                "status": "ENABLED",
                                "vendor": "Samsung",
                                "model": "Galaxy S7",
                                "created": "2019-09-03T07:44:57Z",
                                "updated": "2019-10-13T15:30:22Z"
                            }, {
                                "deviceId": "5148b0f1-099f-4ef8-b34e-804013011dcf",
                                "idpUserId": "acd18bff-f34a-4329-9e74-de4df3a86c9a",
                                "externalUserId": "acd18bff-f34a-4329-9e74-de4df3a86c9a",
                                "dbsUserId": "8a48e1f56e880779016e8809ab970000",
                                "username": "Bob_Jones",
                                "friendlyName": "Bob's iPhone",
                                "status": "DISABLED",
                                "vendor": "Apple",
                                "model": "iPhone 10",
                                "created": "2019-09-03T08:34:11Z",
                                "updated": "2019-10-13T15:32:58Z"
                            }]
                    }
                },
                {
                    status: 200,
                    body: {
                        "devices": [{
                                "created": "2000-01-23T04:56:07.000+00:00",
                                "idpUserId": "idpUserId",
                                "deviceId": "deviceId",
                                "pushToken": "pushToken",
                                "platform": "platform",
                                "dbsUserId": "dbsUserId",
                                "externalUserId": "externalUserId",
                                "vendor": "vendor",
                                "model": "model",
                                "updated": "2000-01-23T04:56:07.000+00:00",
                                "friendlyName": "friendlyName",
                                "username": "username"
                            }, {
                                "created": "2000-01-23T04:56:07.000+00:00",
                                "idpUserId": "idpUserId",
                                "deviceId": "deviceId",
                                "pushToken": "pushToken",
                                "platform": "platform",
                                "dbsUserId": "dbsUserId",
                                "externalUserId": "externalUserId",
                                "vendor": "vendor",
                                "model": "model",
                                "updated": "2000-01-23T04:56:07.000+00:00",
                                "friendlyName": "friendlyName",
                                "username": "username"
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
            ]
        }]);
    var ManageOtherUsersDevicesServicePatchUserDeviceByDbsUserIdAndDeviceIdMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v1/users/{dbsUserId}/devices/{deviceId}",
            method: "PATCH",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        }]);
    var ManageOtherUsersDevicesServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/client-api/v1/users/{dbsUserId}/devices/{deviceId}",
            method: "DELETE",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v1/users/{dbsUserId}/devices",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "devices": [{
                                "deviceId": "3aea3f5c-776a-4547-ae9d-4099d0af7d3b",
                                "idpUserId": "acd18bff-f34a-4329-9e74-de4df3a86c9a",
                                "externalUserId": "acd18bff-f34a-4329-9e74-de4df3a86c9a",
                                "dbsUserId": "8a48e1f56e880779016e8809ab970000",
                                "username": "Bob_Jones",
                                "friendlyName": "Bob's Galaxy S7",
                                "status": "ENABLED",
                                "vendor": "Samsung",
                                "model": "Galaxy S7",
                                "created": "2019-09-03T07:44:57Z",
                                "updated": "2019-10-13T15:30:22Z"
                            }, {
                                "deviceId": "5148b0f1-099f-4ef8-b34e-804013011dcf",
                                "idpUserId": "acd18bff-f34a-4329-9e74-de4df3a86c9a",
                                "externalUserId": "acd18bff-f34a-4329-9e74-de4df3a86c9a",
                                "dbsUserId": "8a48e1f56e880779016e8809ab970000",
                                "username": "Bob_Jones",
                                "friendlyName": "Bob's iPhone",
                                "status": "DISABLED",
                                "vendor": "Apple",
                                "model": "iPhone 10",
                                "created": "2019-09-03T08:34:11Z",
                                "updated": "2019-10-13T15:32:58Z"
                            }]
                    }
                },
                {
                    status: 200,
                    body: {
                        "devices": [{
                                "created": "2000-01-23T04:56:07.000+00:00",
                                "idpUserId": "idpUserId",
                                "deviceId": "deviceId",
                                "pushToken": "pushToken",
                                "platform": "platform",
                                "dbsUserId": "dbsUserId",
                                "externalUserId": "externalUserId",
                                "vendor": "vendor",
                                "model": "model",
                                "updated": "2000-01-23T04:56:07.000+00:00",
                                "friendlyName": "friendlyName",
                                "username": "username"
                            }, {
                                "created": "2000-01-23T04:56:07.000+00:00",
                                "idpUserId": "idpUserId",
                                "deviceId": "deviceId",
                                "pushToken": "pushToken",
                                "platform": "platform",
                                "dbsUserId": "dbsUserId",
                                "externalUserId": "externalUserId",
                                "vendor": "vendor",
                                "model": "model",
                                "updated": "2000-01-23T04:56:07.000+00:00",
                                "friendlyName": "friendlyName",
                                "username": "username"
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v1/users/{dbsUserId}/devices/{deviceId}",
            method: "PATCH",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
            ]
        },
    ]);

    exports.AndroidDeviceVerificationServiceService = AndroidDeviceVerificationServiceService;
    exports.AndroidDeviceVerificationServiceServiceChallengeMocksProvider = AndroidDeviceVerificationServiceServiceChallengeMocksProvider;
    exports.AndroidDeviceVerificationServiceServiceMocksProvider = AndroidDeviceVerificationServiceServiceMocksProvider;
    exports.AndroidDeviceVerificationServiceServiceVerifyMocksProvider = AndroidDeviceVerificationServiceServiceVerifyMocksProvider;
    exports.COLLECTION_FORMATS = COLLECTION_FORMATS;
    exports.CONFIG_TOKEN = CONFIG_TOKEN;
    exports.DEVICE_BASE_PATH = DEVICE_BASE_PATH;
    exports.DeviceApiModule = DeviceApiModule;
    exports.DeviceConfiguration = DeviceConfiguration;
    exports.DeviceStatus = DeviceStatus;
    exports.ManageMyDevicesService = ManageMyDevicesService;
    exports.ManageMyDevicesServiceDeleteMyDeviceByDeviceIdMocksProvider = ManageMyDevicesServiceDeleteMyDeviceByDeviceIdMocksProvider;
    exports.ManageMyDevicesServiceGetMyDevicesMocksProvider = ManageMyDevicesServiceGetMyDevicesMocksProvider;
    exports.ManageMyDevicesServiceMocksProvider = ManageMyDevicesServiceMocksProvider;
    exports.ManageMyDevicesServicePatchMyDeviceByDeviceIdMocksProvider = ManageMyDevicesServicePatchMyDeviceByDeviceIdMocksProvider;
    exports.ManageMyDevicesServicePutPushTokenMocksProvider = ManageMyDevicesServicePutPushTokenMocksProvider;
    exports.ManageOtherUsersDevicesService = ManageOtherUsersDevicesService;
    exports.ManageOtherUsersDevicesServiceDeleteUserDeviceByDeviceIdMocksProvider = ManageOtherUsersDevicesServiceDeleteUserDeviceByDeviceIdMocksProvider;
    exports.ManageOtherUsersDevicesServiceGetDevicesByDbsUserIdMocksProvider = ManageOtherUsersDevicesServiceGetDevicesByDbsUserIdMocksProvider;
    exports.ManageOtherUsersDevicesServiceMocksProvider = ManageOtherUsersDevicesServiceMocksProvider;
    exports.ManageOtherUsersDevicesServicePatchUserDeviceByDbsUserIdAndDeviceIdMocksProvider = ManageOtherUsersDevicesServicePatchUserDeviceByDbsUserIdAndDeviceIdMocksProvider;
    exports.Platform = Platform;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-device-http-ang.umd.js.map
