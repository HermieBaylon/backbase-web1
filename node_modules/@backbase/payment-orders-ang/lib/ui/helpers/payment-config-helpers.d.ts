import { CounterPartyDetails, Options, PaymentDetails, PaymentFormFieldConfig, PaymentFormGroup, PaymentTypeConfig } from '../../configs/models/form-items.model';
import { Action, PaymentTemplate } from '@backbase/data-ang/payment-template';
import { IdentifiedPaymentOrder, PaymentAction, SchemeNames } from '@backbase/data-ang/payment-order';
import { ArrangementItem, ContactItem } from '../models/types';
export declare const getConfig: (configName: string, parent?: PaymentFormGroup | (PaymentFormGroup | PaymentFormFieldConfig)[] | PaymentTypeConfig | undefined) => PaymentFormGroup | PaymentFormFieldConfig | undefined;
export declare const isFormGroupConfig: (config: PaymentFormGroup | PaymentFormFieldConfig) => boolean;
export declare const isAdditionsGroup: (group: PaymentFormGroup) => boolean;
export declare function getLabelFromPaymentConfig(name: string, paymentConfig: PaymentTypeConfig, parentName?: string): string;
export declare const cloneFormFieldOptions: (options?: {
    [key: string]: any;
}) => {
    [x: string]: any;
};
export declare const clonePaymentFormItem: (formItemConfig: PaymentFormGroup | PaymentFormFieldConfig) => PaymentFormGroup | PaymentFormFieldConfig;
export declare const clonePaymentConfig: (config: PaymentTypeConfig) => PaymentTypeConfig;
export declare function setFrequencyOptionsPerConfig(config: PaymentTypeConfig, isRecurring: boolean | undefined, scheduleConfigOptions: {
    isOneOffToRecurrentAllowed?: boolean;
    isRecurrentToOneOffAllowed?: boolean;
}): PaymentTypeConfig;
export declare function removeScheduleFromConfig(config: PaymentTypeConfig): PaymentTypeConfig;
export declare const shouldLoadTabContent: (tab: string, options: Options) => boolean;
export declare function getIconByPaymnentType(paymentType: string): string;
export declare function normalizePaymentType(paymentType: string | undefined): string | undefined;
export declare function hasCreatePermission(item: PaymentTemplate | Array<Action | PaymentAction> | undefined): boolean;
export declare function canCopyPayment(item: IdentifiedPaymentOrder | undefined): boolean;
export declare function isSelectedBeneficiaryModified(counterparty?: CounterPartyDetails, selectedBeneficiary?: Partial<ContactItem | ArrangementItem>): boolean;
export declare const getCounterpartySchemeName: (paymentItem: PaymentDetails) => SchemeNames;
