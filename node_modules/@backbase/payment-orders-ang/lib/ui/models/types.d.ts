import { BulkPaymentOrdersApprovalPutResponse, ErrorItem, BulkPaymentOrdersApprovalPutResponsePaymentOrders, PaymentOrderCancelPostResponse, PaymentOrderGetResponse, AccountIdentification, Bank, PaymentOrdersHttpService, IdentifiedPaymentOrder, InvolvedParty, Schedule, CounterpartyAccount, OriginatorAccount, PaymentForbiddenError } from '@backbase/data-ang/payment-order';
import { GetPaymentTemplatesRequestParams, PaymentTemplate } from '@backbase/data-ang/payment-template';
import { AdditionalProperties, ProductSummaryItem } from '@backbase/data-ang/arrangements';
import { PaymentActionsTypes } from './payment-actions-types';
import { LoadMoreMethod, BatchOrderError } from '../constants/constants';
export { ContactsGetResponseBodyItem as ContactBase } from '@backbase/data-ang/contact-manager';
import { ContactGetResponseBody, ContactsGetResponseBodyItem } from '@backbase/data-ang/contact-manager';
import { CreditDebitMixedIndicator as CreditDebitMixedIndicatorData } from '@backbase/data-ang/payment-batch';
import { BaseObject } from '../../configs/models/form-items.model';
import { SchemeName } from '@backbase/data-ang/stop-checks';
export { BulkPaymentOrdersApprovalPutResponse, IdentifiedPaymentOrder, PaymentOrderGetResponse as PaymentOrderGET, PaymentOrdersHttpService as PaymentOrdersService, BulkPaymentOrdersApprovalPutResponsePaymentOrders, PaymentOrderCancelPostResponse, ErrorItem, PaymentForbiddenError as BatchPaymentForbiddenError, };
export declare type ContactItem = ContactsGetResponseBodyItem;
export declare type PaymentModeType = 'SINGLE' | 'RECURRING' | 'ALL';
export interface BeneficiaryContactItem extends ContactItem {
    accountName: string;
}
export interface PaymentsResponse {
    items: IdentifiedPaymentOrder[];
    totalCount: number;
}
export interface PaymentOrder extends IdentifiedPaymentOrder {
    isPaymentCopy?: boolean;
}
export interface LoadPaymentsParams {
    status?: Array<'ENTERED' | 'READY' | 'ACCEPTED' | 'PROCESSED' | 'REJECTED' | 'CANCELLED' | 'CANCELLATION_PENDING'>;
    query?: string;
    amountFrom?: number;
    amountTo?: number;
    executionDate?: string;
    executionDateFrom?: string;
    executionDateTo?: string;
    nextExecutionDate?: string;
    nextExecutionDateFrom?: string;
    nextExecutionDateTo?: string;
    paymentMode?: PaymentModeType;
    paymentSetupId?: string;
    transferFrequency?: 'ONCE' | 'DAILY' | 'WEEKLY' | 'BIWEEKLY' | 'MONTHLY' | 'QUARTERLY' | 'YEARLY';
    from?: number;
    cursor?: string;
    size?: number;
    orderBy?: string;
    direction?: 'ASC' | 'DESC';
}
export interface PaymentActionsState {
    type?: PaymentActionsTypes;
    orderBy?: LoadPaymentsParams['orderBy'];
    direction?: LoadPaymentsParams['direction'];
    from?: number;
    query?: string;
    pageSize?: number;
    paymentMode?: PaymentModeType;
    isDebitMode?: boolean;
}
export interface BatchState {
    type?: string;
    from?: number;
    query?: string;
    size?: number;
    loadMoreMethod?: LoadMoreMethod;
    id?: string;
    mergeItems?: boolean;
}
export interface BatchOrder {
    id: string;
    status: string;
    name?: string;
    type: string;
    creditDebitMixedIndicator: CreditDebitMixedIndicatorData;
    totalTransactionsCount?: number;
    totalInstructedAmount?: Currency;
    totalCreditTransactionsCount?: number;
    totalCreditInstructedAmount?: Currency;
    totalDebitTransactionsCount?: number;
    totalDebitInstructedAmount?: Currency;
    canDelete?: boolean;
    canCancel?: boolean;
    confidentialType?: string;
    account?: {
        name?: string;
        identification?: {
            identification: string;
            schemeName: string;
        };
    };
    requestedExecutionDate?: string;
    fileName?: string;
    userFullName?: string;
    uploadCompletedAt?: string;
    approval?: {
        id: string;
        userId: string;
        userFullName?: string;
        serviceAgreementId: string;
        itemId: string;
        dataAccessItemId?: string;
        resource: string;
        function: string;
        status: any;
        records?: Array<{
            id: string;
            userId: string;
            userFullName?: string;
            approvalTypeId: string;
            status: any;
            createdAt: string;
        }>;
        canApprove?: boolean;
        canReject?: boolean;
        finalApprover?: boolean;
        action?: string;
        createdAt: string;
    };
    companyId?: number | string;
    companyName?: string;
    bankBranchCode?: number | string;
    entryClass?: string;
    createdBy?: string;
    createdAt?: string;
}
export interface BatchResponse {
    totalCount: number;
    items: Array<any>;
    batchOrder?: BatchOrder;
}
export interface BatchActions {
    id?: string;
    transformResponse: any;
    from: number;
    size: number;
}
export interface PaymentFormAdditions {
    creditAccount?: any;
    debitAccount?: any;
    additions?: any;
}
export interface Id {
    id: string;
}
export interface AccountInformation extends AdditionalProperties {
    name?: string;
    alias?: string;
    accountNumber?: string;
    IBAN?: string;
    BBAN?: string;
    BIC?: string;
    bankCode?: string;
    bankName?: string;
    bankAddressLine1?: string;
    bankAddressLine2?: string;
    bankStreetName?: string;
    bankTown?: string;
    bankPostCode?: string;
    bankCountrySubDivision?: string;
    bankCountry?: string;
    accountHolderAddressLine1?: string;
    accountHolderAddressLine2?: string;
    accountHolderStreetName?: string;
    accountHolderTown?: string;
    accountHolderPostCode?: string;
    accountHolderCountrySubDivision?: string;
    accountHolderCountry?: string;
}
export interface PaymentOrdersInitiateTransaction {
    counterparty?: InvolvedParty;
    counterpartyAccount?: CounterpartyAccount;
    counterpartyBank?: Bank;
    correspondentBank?: Bank;
    intermediaryBank?: Bank;
    instructedAmount: Currency;
    messageToBank?: string;
    targetCurrency?: string;
    remittanceInformation?: any;
    endToEndIdentification?: string;
    mandateIdentifier?: string;
}
export interface PaymentOrdersPOST {
    originatorAccount?: AccountIdentification;
    batchBooking?: boolean;
    instructionPriority?: string;
    requestedExecutionDate: string;
    paymentMode?: string;
    paymentType?: string;
    entryClass?: string;
    schedule?: Schedule;
    transferTransactionInformation?: PaymentOrdersInitiateTransaction;
    approved?: boolean;
}
export interface OutputItem {
    id: string;
    name: string;
    displayName?: string;
    alias?: string;
    balance?: number;
    bankBranchCode?: string;
    currency?: string;
    accountNumber: string;
    accountType: string;
    externalTransferAllowed?: boolean;
    urgentTransferAllowed?: boolean;
    productKindName?: string;
    defaultRecord?: ProductSummaryItem;
}
export interface PaymentOrderResponseItem {
    id: string;
    status: string;
    account: string;
    approvalStatus?: string;
    exportAllowed: boolean;
}
export interface ArrangementItem extends AdditionalProperties {
    id: string;
    name: string;
    displayName?: string;
    alias?: string;
    bookedBalance?: number;
    balance?: number;
    availableBalance?: number;
    creditLimit?: number;
    currency: string;
    IBAN?: string;
    BBAN?: string;
    accountNumber?: string;
    bankBranchCode?: string;
    BIC?: string;
    externalTransferAllowed?: boolean;
    urgentTransferAllowed?: boolean;
    productKindName?: string;
    isArrangement?: boolean;
    defaultRecord?: ProductSummaryItem;
}
export interface ArrangementList {
    count: number;
    items: Array<ArrangementItem>;
    isLoadMore?: boolean;
    params?: ContactsAndArrangementsGetParams;
}
export interface ContactList {
    count: number;
    items: Array<ContactGetResponseBody>;
    itemsCount?: number;
    isLoadMore?: boolean;
}
export interface InternalAccountFormItem extends BaseObject<any> {
    id: string;
    name: string;
    alias?: string;
    balance?: number;
    currency?: string;
    accountNumber?: string;
    accountType?: string;
    externalTransferAllowed?: boolean;
    urgentTransferAllowed?: boolean;
    productKindName?: string;
    availableBalance?: number;
    bookedBalance?: number;
    creditLimit?: number;
    defaultRecord?: ProductSummaryItem;
}
export interface MultiPaymentAccountFormItem {
    id: string;
    name: string;
    balance?: number;
    currency?: string;
    accountNumber?: string;
    bankBranchCode?: string;
}
export interface ExternalAccountAccount {
    accountNumber?: string;
}
export interface ExternalAccountFormItem {
    name: string;
    accounts: Array<ExternalAccountAccount>;
}
export interface ArrangementsContextParameters {
    resourceName: string;
    businessFunction: string;
    privilege: string;
}
export interface ContactsAndArrangementsGetParams {
    from?: number;
    creditAccount?: boolean;
    debitAccount?: boolean;
    size?: number;
    query?: string;
    searchTerm?: string;
    isLoadMore?: boolean;
    merge?: boolean;
}
export interface AccessControlConfigProvider {
    currencies: string[];
    notificationDismissTime: number;
    checksRangeNumber: number;
    resourceName: string;
    businessFunction: string;
    privilege: string;
    schemeName: SchemeName;
}
export interface Currency {
    amount: string;
    currencyCode: string;
}
export interface StopCheck {
    id?: string;
    originatorAccount: {
        name?: string;
        identification: string;
        schemeName: string;
    };
    status: string;
    reason?: string;
    checkNumberRange?: {
        firstNumber: string;
        lastNumber: string;
    };
    check?: {
        number?: string;
        amount?: Currency;
        payeeName?: string;
        dateIssued?: string;
    };
    dateOfRequest: string;
    expirationDate?: string;
}
export interface Address {
    addressLine1?: string;
    addressLine2?: string;
    streetName?: string;
    town?: string;
    postCode?: string;
    countrySubDivision?: string;
    country?: string;
}
export declare enum ViewType {
    CARD = "CARD",
    FORM = "FORM",
    BUTTON = "BUTTON"
}
export declare class BreachLimitError {
    readonly reportError: BreachReportError;
    kind: BatchOrderError.BREACH_LIMIT;
    constructor(reportError: BreachReportError);
}
export interface BreachReportInfo {
    breachType: string;
    breachedLimitType?: string;
    timeframe: {
        period: string;
        startTime: string;
        endTime: string;
    };
    currentConsumption: string;
    currentThreshold: string;
}
export declare type BreachReportError = Partial<PaymentForbiddenError>;
export interface BreachReportItem {
    limitedEntity?: Array<{
        ref: string;
        type: string;
        description: string;
    }>;
    shadow?: boolean;
    currency?: string;
    'user-BBID'?: string;
    breachInfo: Array<BreachReportInfo>;
}
export interface PaymentTemplatesGetParams extends GetPaymentTemplatesRequestParams {
    cursor?: string;
}
export declare enum PaymentTemplateAction {
    CREATE = "CREATE",
    VIEW = "VIEW"
}
export interface PaymentTemplatesData {
    items: PaymentTemplate[];
    totalCount: number;
    params: PaymentTemplatesGetParams;
}
export interface PaymentTemplatesDetails {
    paymentType?: string;
    originatorAccount?: OriginatorAccount;
    instructionPriority?: string;
    entryClass?: string;
    transferTransactionInformation?: PaymentOrdersInitiateTransaction;
}
export interface Additions {
    [key: string]: string;
}
/** @deprecated Use `CreditDebitMixedIndicator` from `@backbase/data-ang/payment-batch` instead */
export declare enum CreditDebitMixedIndicator {
    CREDIT = "CREDIT",
    DEBIT = "DEBIT",
    MIXED = "MIXED"
}
export interface FormSeparatorConfig {
    cssClasses?: Array<string>;
    icon?: {
        name: string;
        color?: string;
    };
}
export declare type AccountSelectorSize = 'sm' | 'md';
export declare const RoutableModalParamName = "modalOpened";
