import { TemplateRef } from '@angular/core';
import { PaymentOrdersPost as PaymentOrdersPOST, OriginatorAccount as PaymentOrdersOriginatorAccount, PaymentMode, IdentifiedPaymentOrder } from '@backbase/data-ang/payment-order';
import { PaymentTemplate, InstructionPriority, TransferTransactionInformation } from '@backbase/data-ang/payment-template';
import { ErrorItem } from '@backbase/data-ang/payment-batch';
import { PaymentDetails, PayordPaymentError } from '../../configs/models/form-items.model';
import { Route } from '@angular/router';
import { Currency, ExternalAccountFormItem, InternalAccountFormItem } from './types';
export declare class PaymentOrdersBadRequest {
    readonly payment: PaymentOrdersPOST;
    kind: 'PaymentOrdersBadRequest';
    constructor(payment: PaymentOrdersPOST);
}
export declare class UnknownError {
    readonly origin: any;
    kind: 'UnknownError';
    constructor(origin: any);
}
export declare type PaymentOrdersError = PaymentOrdersBadRequest | UnknownError;
export declare enum Routes {
    FORM = "form",
    REVIEW = "review"
}
export declare enum PaymentState {
    INITIAL = "INITIAL",
    REVIEW = "REVIEW",
    EDIT = "EDIT"
}
export interface ReviewTemplateContext {
    $implicit: PaymentDetails;
    status?: 'SUCCESS' | 'FAIL';
}
export interface BeneficiaryDetails {
    accounts?: Array<InternalAccountFormItem> | null;
    contacts?: Array<ExternalAccountFormItem> | null;
}
export declare enum ExecutionTimeFrame {
    'HOUR' = "HOUR",
    'CALENDAR_DAY' = "CALENDAR_DAY",
    'BUSINESS_DAY' = "BUSINESS_DAY"
}
export declare enum ChargeBearer {
    'OUR' = "OUR",
    'BEN' = "BEN",
    'SHA' = "SHA"
}
export declare enum ModalState {
    Preview = 0,
    Hidden = 1
}
export interface PaymentTemplateResponse extends PaymentTemplate {
    id: string;
    name?: string;
    createdAt: string;
    serviceAgreementId: string;
    details: {
        paymentType?: string;
        originator?: {
            name: string;
            postalAddress: {
                addressLine1: string;
            };
        };
        originatorAccount?: PaymentOrdersOriginatorAccount;
        instructionPriority?: InstructionPriority;
        entryClass?: string;
        transferTransactionInformation?: TransferTransactionInformation;
    };
}
export interface PaymentOption {
    name?: string;
    paymentType?: string;
    showHelperText?: boolean;
    instructionPriority?: string;
    transferFee?: Currency;
    chargeBearer?: Array<string>;
    executionTimeFrame?: {
        min?: number;
        max: number;
        unit: string;
    };
    cutOffTime?: string;
    canEditCounterparty?: boolean;
}
export interface CurrencyObj {
    code: string;
    decimals: number;
}
export interface LabeledCurrencies {
    popular?: Array<CurrencyObj>;
    normal?: Array<CurrencyObj>;
}
export interface DecimalsSet {
    [key: string]: number;
}
export interface CurrencySet {
    currencies: Array<string>;
    decimals: DecimalsSet;
    dividerIndex?: number;
}
export interface ForexDetails {
    fromCurrency: string;
    toCurrency: string;
    rate: number;
    calculatedAmount: number | string;
}
export interface PaymentCostInfo extends ForexDetails {
    transferFee: Currency;
    hasForexInfo: boolean;
}
export interface CurrencySelectorConfig {
    showFlags?: boolean;
    showName?: boolean;
    isSearchable?: boolean;
    dividerIndex?: number;
    searchPlaceholder?: string;
    dropdownIcon?: string;
}
export interface TransactionSigningResponse {
    amount: string;
    currency: string;
    'counter-party-account': string;
    'counter-party-name': string;
    'confirmation-type': string;
    'payment-order-id': string;
}
export declare enum ProgressStatus {
    CONFIRMATION_PENDING = "CONFIRMATION_PENDING",
    USER_DECLINED = "USER_DECLINED",
    SYSTEM_DECLINED = "SYSTEM_DECLINED",
    PENDING_APPROVAL = "PENDING_APPROVAL",
    SENDING = "SENDING",
    ACCEPTED = "ACCEPTED",
    REJECTED = "REJECTED",
    PROCESSED = "PROCESSED",
    NO_PROGRESS = "NO_PROGRESS"
}
export interface PaymentProgressStatusResponse {
    progressStatus: ProgressStatus;
}
export interface PaymentErrors {
    errorResponse: any;
    genericMessage?: string;
    errors: Array<{
        key: string;
        message: string;
    }>;
    paymentErrors: PayordPaymentError;
    notificationHeader: TemplateRef<any> | string;
}
export interface PaymentError {
    statusText: string;
    error: {
        message: string;
        errors: Array<{
            key: string;
            message: string;
        }>;
    };
    reasonCode?: string;
    reasonText?: string;
}
export declare enum ManualBatchState {
    CLOSED = "CLOSED",
    INITIAL = "INITIAL",
    DRAFT = "DRAFT",
    REVIEW = "REVIEW",
    VALID = "VALID"
}
export declare enum PaymentSubmitStatuses {
    SUCCESS = "success",
    ERROR = "error",
    PENDING = "pending",
    PENDING_EDITED = "pending_edited"
}
export interface StepErrors {
    [stepName: string]: ErrorItem[];
}
export interface TemplateParams {
    name: string;
    id: string;
}
export interface Template extends PaymentTemplate {
    query?: string;
}
export declare enum ScrollToElementBehavior {
    AUTO = "auto",
    SMOOTH = "smooth"
}
export declare enum ScrollToElementBlock {
    START = "start",
    CENTER = "center",
    END = "end",
    NEAREST = "nearest"
}
export declare enum ScrollToElementInline {
    START = "start",
    CENTER = "center",
    END = "end",
    NEAREST = "nearest"
}
export interface ScrollToElementConfigOptions {
    behavior?: ScrollToElementBehavior;
    block?: ScrollToElementBlock;
    inline?: ScrollToElementInline;
}
export interface PaymentOrdersData {
    items: IdentifiedPaymentOrder[];
    totalCount: number;
}
export interface DataTypedRoute<T = PaymentsRouteData> extends Route {
    data: T;
    path: string;
}
export interface PaymentsRouteData {
    /**
     * Title for the route tab
     */
    title: string;
    /**
     * Type of payment orders to load
     */
    paymentMode?: PaymentMode;
}
export interface PaymentsTab {
    title: string;
    route: string;
}
