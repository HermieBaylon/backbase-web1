import { FormGroup } from '@angular/forms';
import { ErrorItem, IdentifiedBatchPayment } from '@backbase/data-ang/payment-batch';
import { StepperConfig } from '../../configs/models/form-items.model';
import { Observable } from 'rxjs';
import { ManualBatchState, StepErrors } from '../models';
import { BatchOrderFromTemplatePostResponse, BatchTemplate } from '@backbase/data-ang/payment-batch-template';
import * as i0 from "@angular/core";
export declare class BatchOrderStateService {
    private readonly batchOrderIdSubject;
    private readonly formSubject;
    private readonly stateSubject;
    private readonly stepSubject;
    private readonly errorsSubject;
    private readonly selectedBatchTemplateSubject;
    private readonly bacthOrderFromTemplateSubject;
    private readonly bacthPaymentsFromTemplateSubject;
    get batchOrderId$(): Observable<string>;
    get batchOrderId(): string;
    set batchOrderId(id: string);
    get form$(): Observable<FormGroup>;
    get formInstance(): FormGroup;
    get state$(): Observable<ManualBatchState>;
    get step$(): Observable<StepperConfig | undefined>;
    get currentState(): ManualBatchState;
    get currentStep(): StepperConfig | undefined;
    get errors$(): Observable<StepErrors>;
    get selectedBatchTemplate$(): Observable<BatchTemplate | undefined>;
    get selectedBatchTemplate(): BatchTemplate | undefined;
    get batchOrderFromTemplate$(): Observable<BatchOrderFromTemplatePostResponse | undefined>;
    get batchPaymentsFromTemplate$(): Observable<Array<IdentifiedBatchPayment> | undefined>;
    saveForm(form: FormGroup): void;
    resetForm(): void;
    setState(paymentState: ManualBatchState): void;
    setStep(step: StepperConfig): void;
    resetErrors(): void;
    addError(stepName: string, error: ErrorItem): void;
    removeErrorAt(stepName: string, index: number): void;
    selectBatchTemplate(batchTemplate: BatchTemplate): void;
    unselectBatchTemplate(): void;
    loadBatchOrderFromTemplate(batchOrder: BatchOrderFromTemplatePostResponse): void;
    loadBatchPaymentsFromTemplate(batchPayments: Array<IdentifiedBatchPayment>): void;
    removeBatchOrderFromTemplate(): void;
    removeBatchPaymentsFromTemplate(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<BatchOrderStateService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<BatchOrderStateService>;
}
