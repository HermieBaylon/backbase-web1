import { BatchOrderPutRequest, BatchOrderPutResponse, BatchOrdersHttpService, BatchOrdersPostRequest, BatchOrdersPostResponse, BatchPaymentsGetResponse, BatchPaymentsPostRequest, BatchPaymentsPostResponse, BatchPaymentsPutRequest, BatchPaymentsPutResponse } from '@backbase/data-ang/payment-batch';
import { BatchTemplatesHttpService, BatchTemplatesPostResponse } from '@backbase/data-ang/payment-batch-template';
import { BehaviorSubject, Observable } from 'rxjs';
import { GetArrangementsByBusinessFunctionRequestParams, ProductSummaryHttpService } from '@backbase/data-ang/arrangements';
import { InternalAccountFormItem } from '../models/types';
import * as i0 from "@angular/core";
interface ObservableArrangements {
    search$: BehaviorSubject<string>;
    items$: Observable<InternalAccountFormItem[]>;
}
interface AccountsFactoryConfig extends GetArrangementsByBusinessFunctionRequestParams {
    debounceTime?: number;
}
export declare class MultiplePaymentService {
    private batchOrderService;
    private batchTemplateService;
    private productSummaryService;
    constructor(batchOrderService: BatchOrdersHttpService, batchTemplateService: BatchTemplatesHttpService, productSummaryService: ProductSummaryHttpService);
    submitting: boolean;
    createFetchAccountsFactory(config: AccountsFactoryConfig): () => ObservableArrangements;
    saveBatchOrder(data: BatchOrdersPostRequest, batchOrderID: string, dryRun?: boolean): Observable<BatchOrdersPostResponse | BatchOrderPutResponse>;
    updateBatchOrder(event: BatchOrderPutRequest, batchOrderID: string, dryRun?: boolean, intendedCreditTransactionsCount?: number, intendedCreditAmount?: number): Observable<BatchOrderPutResponse>;
    cancelDraftOrder(batchOrderId: string): void;
    saveDraftPayment(data: BatchPaymentsPostRequest, batchOrderID: string): Observable<BatchPaymentsPostResponse | null>;
    updatePayment(batchOrderID: string, paymentID: string, data: BatchPaymentsPutRequest): Observable<BatchPaymentsPutResponse | null>;
    deletePayment(batchOrderId: string, batchPaymentId: string): Observable<any>;
    saveAsTemplate(batchOrderId: string, name: string): Promise<BatchTemplatesPostResponse>;
    getPayments(batchOrderId: string, options?: {
        from: number;
        size: number;
    }): Promise<BatchPaymentsGetResponse>;
    private catchResponseError;
    private _fetchAccountsFactory;
    static ɵfac: i0.ɵɵFactoryDeclaration<MultiplePaymentService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<MultiplePaymentService>;
}
export {};
