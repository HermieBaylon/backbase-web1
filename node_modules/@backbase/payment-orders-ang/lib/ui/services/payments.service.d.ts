import { HttpResponse } from '@angular/common/http';
import { OnDestroy, Provider } from '@angular/core';
import { BulkPaymentOrdersApprovalPutResponse, IdentifiedPaymentOrder, PaymentMode, PaymentOrderCancelPostResponse, PaymentOrderGetResponse, PaymentOrdersPostResponse, PaymentOrdersValidatePost, PaymentOrdersValidatePostResponse, RateGet } from '@backbase/data-ang/payment-order';
import { ItemModel } from '@backbase/foundation-ang/core';
import { Observable } from 'rxjs';
import { PaymentActionsTypes } from '../models/payment-actions-types';
import { PaymentsControlsModel } from '../models/payments-controls.model';
import { LoadPaymentsParams } from '../models/types';
import { PaymentOrdersHttpService } from './payment-orders-http.service';
import * as i0 from "@angular/core";
export declare class PaymentService implements OnDestroy {
    private readonly paymentOrdersService;
    private readonly model;
    private readonly defaultPaymentsParams;
    private readonly destroy$;
    private readonly selectedAccount$;
    private readonly search$;
    private readonly changePage$;
    private readonly loadMore$;
    private readonly loadPayments$;
    private readonly refreshPayments$;
    private readonly sortPayments$;
    private readonly loadingSub$;
    private readonly actingSub$;
    private readonly pageSizeIM$;
    readonly loading$: Observable<boolean>;
    readonly acting$: Observable<boolean>;
    private pageSizeSub$;
    private debitMode$;
    private pageSize$;
    private loadingCalls;
    private actingCalls;
    private set loading(value);
    private set acting(value);
    private readonly paymentsActions$;
    paymentState$: Observable<{
        paymentTypeGroup?: string | undefined;
        size: number;
        from: number;
        type?: PaymentActionsTypes | undefined;
        orderBy?: string | undefined;
        direction?: "ASC" | "DESC" | undefined;
        query?: string | undefined;
        paymentMode?: import("../models/types").PaymentModeType | undefined;
    }>;
    private readonly paymentsEffect$;
    private readonly paymentsStateSource$;
    get payments$(): Observable<{
        totalCount: number;
        items: IdentifiedPaymentOrder[];
    } | undefined>;
    constructor(paymentOrdersService: PaymentOrdersHttpService, model: ItemModel, defaultPaymentsParams: LoadPaymentsParams);
    private handlePaymentSuccess;
    private handleLoadMore;
    loadPayments(paymentMode?: PaymentMode): void;
    refreshPayments(): void;
    loadMore(from: number): void;
    changePage(from: number): void;
    sortPayments(orderBy: LoadPaymentsParams['orderBy'], direction: LoadPaymentsParams['direction']): void;
    setPageSize(value: number): void;
    setDebitMode(value: boolean): void;
    cancelPayment(paymentOrderId: string, version: number): Observable<HttpResponse<PaymentOrderCancelPostResponse>>;
    private handleCancelPaymentSuccess;
    getCurrencyExchangeRate(currencyFrom?: string, currencyTo?: string): Observable<HttpResponse<RateGet>>;
    getPaymentOrders(params: object): Observable<HttpResponse<IdentifiedPaymentOrder[]>>;
    getPaymentDetails(paymentId: string, params: object): Observable<PaymentOrderGetResponse>;
    approvePayment(paymentId: string, comment?: string): Observable<PaymentOrdersPostResponse>;
    bulkApprovePayments(paymentIds: Array<string>, comment?: string): Observable<BulkPaymentOrdersApprovalPutResponse | undefined>;
    rejectPayment(paymentId: string, comment?: string): Observable<PaymentOrdersPostResponse>;
    bulkRejectPayments(paymentIds: Array<string>, comment?: string): Observable<BulkPaymentOrdersApprovalPutResponse | undefined>;
    searchPayments(query: string): void;
    applyFilter({ amount, executionDate, ...rest }: PaymentsControlsModel): void;
    postCancelPayment(paymentOrderId: string, version: number): Observable<HttpResponse<PaymentOrderCancelPostResponse>>;
    validatePayment(payment: PaymentOrdersValidatePost): Observable<PaymentOrdersValidatePostResponse>;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<PaymentService, [null, { optional: true; }, null]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<PaymentService>;
}
export declare const providePaymentServices: Provider[];
