import { HttpResponse } from '@angular/common/http';
import { PaymentOrderCancelPostResponse, PaymentOrdersHttpService as PaymentOrdersService, IdentifiedPaymentOrder, RateGet, PaymentOrdersValidatePost, BulkPaymentOrdersApprovalPutResponse, PaymentOrdersPostResponse, PaymentOrdersValidatePostResponse, GetPaymentOrdersRequestParams, PaymentOrderGetResponse } from '@backbase/data-ang/payment-order';
import { Observable } from 'rxjs';
import { LoadPaymentsParams } from '../models/types';
import * as i0 from "@angular/core";
export declare class PaymentOrdersHttpService {
    private readonly paymentsDataHttpService;
    constructor(paymentsDataHttpService: PaymentOrdersService);
    private approvalsServiceCall;
    private bulkApprovalsServiceCall;
    loadPayments(params: LoadPaymentsParams): Observable<{
        totalCount: number;
        items: IdentifiedPaymentOrder[];
    }>;
    getPaymentOrders(params: GetPaymentOrdersRequestParams): Observable<HttpResponse<IdentifiedPaymentOrder[]>>;
    getPayment(id: string, params: object): Observable<PaymentOrderGetResponse>;
    cancelPayment(paymentOrderId: string, version: number): Observable<HttpResponse<PaymentOrderCancelPostResponse>>;
    postPaymentCancel(paymentOrderId: string, version: number): Observable<HttpResponse<PaymentOrderCancelPostResponse>>;
    getCurrencyExchangeRate(currencyFrom: string, currencyTo: string): Observable<HttpResponse<RateGet>>;
    approvePayment(paymentId: string, comment?: string): Observable<PaymentOrdersPostResponse>;
    bulkApprovePayments(paymentIds: Array<string>, comment?: string): Observable<BulkPaymentOrdersApprovalPutResponse | undefined>;
    rejectPayment(paymentId: string, comment?: string): Observable<PaymentOrdersPostResponse>;
    bulkRejectPayments(paymentIds: Array<string>, comment?: string): Observable<BulkPaymentOrdersApprovalPutResponse | undefined>;
    validatePayment(payment: PaymentOrdersValidatePost): Observable<PaymentOrdersValidatePostResponse>;
    static ɵfac: i0.ɵɵFactoryDeclaration<PaymentOrdersHttpService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<PaymentOrdersHttpService>;
}
