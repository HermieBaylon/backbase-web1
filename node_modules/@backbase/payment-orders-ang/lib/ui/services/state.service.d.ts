import { FormGroup } from '@angular/forms';
import { PaymentTemplate } from '@backbase/data-ang/payment-template';
import { Observable } from 'rxjs';
import { PaymentState } from '../models';
import { IdentifiedPaymentOrder } from '@backbase/data-ang/payment-order';
import { PaymentDetails } from '../../configs/models/form-items.model';
import * as i0 from "@angular/core";
export declare class StateService {
    private readonly formSubject;
    private readonly paymentStateSubject;
    private canApprovePayment;
    private readonly paymentTemplateSubject;
    private readonly paymentEditSubject;
    private initialEditFormValueItem?;
    get form$(): Observable<FormGroup>;
    get formInstance(): FormGroup;
    get paymentState$(): Observable<PaymentState>;
    get currentState(): PaymentState;
    get canApprove(): boolean;
    set canApprove(canApprovePayment: boolean);
    get paymentTemplateState$(): Observable<PaymentTemplate | undefined>;
    get paymentEditState$(): Observable<IdentifiedPaymentOrder | undefined>;
    get initialEditFormValue(): PaymentDetails | undefined;
    set initialEditFormValue(formValue: PaymentDetails | undefined);
    saveForm(form: FormGroup): void;
    resetForm(): void;
    setPaymentState(paymentState: PaymentState): void;
    setPaymentTemplate(template: PaymentTemplate | undefined): void;
    setEditPayment(payment: IdentifiedPaymentOrder | undefined): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<StateService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<StateService>;
}
