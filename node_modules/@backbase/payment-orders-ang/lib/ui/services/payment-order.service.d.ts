import { HttpErrorResponse, HttpResponse } from '@angular/common/http';
import { OnDestroy } from '@angular/core';
import { ContactsHttpService as ContactsService, ContactsPostRequestBody, ContactsPostResponseBody } from '@backbase/data-ang/contact-manager';
import { PaymentOrderGetResponse, PaymentOrderProgressStatusGet, PaymentOrderPut, PaymentOrdersHttpService as PaymentOrdersService, PaymentOrdersPost, PaymentOrdersPostResponse, PaymentOrdersValidatePost, PaymentOrdersValidatePostResponse, RateGet } from '@backbase/data-ang/payment-order';
import { PaymentTemplate, PaymentTemplatesHttpService as PaymentTemplatesService, PaymentTemplatesPostRequest, PaymentTemplatesPostResponse } from '@backbase/data-ang/payment-template';
import { A2aClientHttpService as A2aClientService, DetailedExternalAccount } from '@backbase/data-ang/payment-order-a2a';
import { ProductSummaryHttpService } from '@backbase/data-ang/arrangements';
import { BehaviorSubject, Observable } from 'rxjs';
import { BeneficiaryList } from '../constants';
import { UsersHttpService } from '@backbase/data-ang/accesscontrol';
import { PaymentErrors } from '../models';
import { PayordOmniPaymentConfig } from '../../configs/models/form-items.model';
import { DeprecationsService } from '@backbase/foundation-ang/core';
import { Notification, NotificationService } from '@backbase/ui-ang/notification';
import { ArrangementItem, ArrangementList, ContactList, ContactsAndArrangementsGetParams, PaymentOrderResponseItem, PaymentTemplatesData } from '../models/types';
import * as i0 from "@angular/core";
export declare class PaymentOrderHttpService implements OnDestroy {
    private readonly paymentOrderData;
    private readonly paymentTemplateData;
    private readonly contactsData;
    private readonly productSummaryData;
    private readonly accessgroupData;
    private readonly notificationService;
    readonly settings: PayordOmniPaymentConfig;
    readonly paymentOrdersA2ADataHttpService: A2aClientService;
    private readonly deprecationService;
    private readonly paymentResponseSubject;
    private readonly contactsGetParams;
    private readonly creditAccountsParams;
    private readonly debitAccountsParams$;
    private readonly paymentTemplateParams;
    private readonly creditAccountsParameters$;
    private readonly dataItemParams$;
    resourceName: string | undefined;
    businessFunction: string;
    arrangementBusFunctions: string;
    privilege: string | undefined;
    paymentType: string | undefined;
    loading$: BehaviorSubject<boolean>;
    readonly dataItemPermissions$: Observable<(string | undefined)[] | undefined>;
    readonly arrangementUserPermissions$: Observable<any>;
    readonly createPermission$: Observable<HttpResponse<any>>;
    paymentResponse: Observable<PaymentOrderResponseItem | HttpErrorResponse>;
    debitAccounts: Observable<ArrangementList>;
    contacts: Observable<ContactList | HttpErrorResponse>;
    creditAccounts: Observable<ArrangementList | HttpErrorResponse>;
    connectedAccounts$: Observable<DetailedExternalAccount[] | undefined>;
    readonly paymentTemplates$: Observable<PaymentTemplatesData>;
    readonly templatesList$: (paymentType: string) => Observable<PaymentTemplate[] | null>;
    private buildArrangementsContextParameters;
    private fetchArrangementList;
    constructor(paymentOrderData: PaymentOrdersService, paymentTemplateData: PaymentTemplatesService, contactsData: ContactsService, productSummaryData: ProductSummaryHttpService, accessgroupData: UsersHttpService, notificationService: NotificationService, settings: PayordOmniPaymentConfig, paymentOrdersA2ADataHttpService: A2aClientService, deprecationService: DeprecationsService);
    private getUserPermission;
    postPaymentOrder(paymentOrder: PaymentOrdersPost): Observable<PaymentOrdersPostResponse>;
    putPaymentOrder(paymentOrder: PaymentOrderPut, paymentOrderId: string): Observable<PaymentOrdersPostResponse>;
    getPayment(id: string): Observable<PaymentOrderGetResponse>;
    getPaymentProgressStatus(paymentOrderId: string): Observable<PaymentOrderProgressStatusGet | null>;
    handleDataItemPermissions(dataItemId: string): Observable<(string | undefined)[] | undefined>;
    getArrangementUserPermission(id: string): Observable<any>;
    loadDataItemPermissions(id: string): void;
    ngOnDestroy(): void;
    loadMoreContacts(page?: number, params?: ContactsAndArrangementsGetParams): void;
    loadMoreCreditAccounts(page?: number, params?: ContactsAndArrangementsGetParams): void;
    fetchCreditAccounts(query?: string, params?: ContactsAndArrangementsGetParams): void;
    loadMoreDebitAccounts(params: ContactsAndArrangementsGetParams): void;
    validatePayment(payment: PaymentOrdersValidatePost): Observable<PaymentOrdersValidatePostResponse>;
    saveNewContact(contact: ContactsPostRequestBody): Observable<ContactsPostResponseBody | null>;
    postPaymentTemplate(requestObject: PaymentTemplatesPostRequest): Observable<PaymentTemplatesPostResponse | null>;
    editPaymentTemplate(paymentTemplateId: string, paymentTemplatesPutRequest: PaymentTemplatesPostRequest): Observable<PaymentTemplatesPostResponse | null>;
    getCurrencyExchangeRate(currencyFrom: string, currencyTo: string): Observable<RateGet | null>;
    getAccountByAccountId(id: string, accountNumber: string): Observable<ArrangementItem>;
    private loadPaymentTemplates;
    private mergeResults;
    private mergeArrangementList;
    loadMore(page: number): void;
    search(query: string): void;
    manageErrorResponse(response: PaymentErrors): void;
    showNotification(success: boolean, notification: Partial<Notification>): void;
    getContacts(params?: ContactsAndArrangementsGetParams): Observable<ContactList | HttpErrorResponse>;
    getCreditAccounts(params?: ContactsAndArrangementsGetParams): Observable<ArrangementList | HttpErrorResponse>;
    getDebitAccounts(params?: ContactsAndArrangementsGetParams): Observable<ArrangementList>;
    fetchBeneficiaries(params: ContactsAndArrangementsGetParams, type?: BeneficiaryList): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<PaymentOrderHttpService, [null, null, null, null, null, null, { optional: true; }, null, null]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<PaymentOrderHttpService>;
}
