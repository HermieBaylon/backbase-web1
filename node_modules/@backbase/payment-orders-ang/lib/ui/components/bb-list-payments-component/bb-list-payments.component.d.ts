import { EventEmitter } from '@angular/core';
import { PaymentTemplate } from '@backbase/data-ang/payment-template';
import { BehaviorSubject } from 'rxjs';
import { Template } from '../../models';
import { IdentifiedPaymentOrder, IdentifiedTransaction } from '@backbase/data-ang/payment-order';
import { PaymentConfigService } from '../../../configs/services/payment-config.service';
import { PaymentModeType, PaymentOrder } from '../../models/types';
import * as i0 from "@angular/core";
export declare class PaymentsListComponent {
    private readonly paymentConfigService;
    readonly hostRef: this;
    constructor(paymentConfigService: PaymentConfigService);
    /**
     * Items to be displayed
     */
    items: PaymentTemplate[] | IdentifiedPaymentOrder[];
    /**
     * Search term value.
     */
    searchTerm?: string;
    /**
     * Response error on payment templates list.
     */
    responseError?: BehaviorSubject<any>;
    /**
     * Flag indicates if the user has delete permission.
     * Default value is `false`.
     */
    canDelete: boolean;
    /**
     * Flag indicates if the user has edit permission.
     * Default value is `false`.
     */
    canEdit: boolean;
    /**
     * Flag indicates whether called from Manage transfers
     */
    isManageTransfersMode: boolean;
    /**
     * Number of payment items shown per page.
     */
    size: number;
    /**
     * Payment mode
     * Default is `SINGLE`.
     */
    paymentMode: PaymentModeType;
    /**
     * The flag to denote if it is a debit payment.
     */
    isDebitMode: boolean;
    /**
     * Click delete event emitter.
     */
    triggerDeleteTemplate: EventEmitter<Template>;
    /**
     * Click template event emitter.
     */
    templateItemClick: EventEmitter<PaymentTemplate>;
    /**
     * Select template event emitter
     */
    selectTemplate: EventEmitter<PaymentTemplate>;
    /**
     * Edit template event emitter.
     */
    editTemplate: EventEmitter<Template>;
    /**
     * Changes will be triggered on paymentItemClick event emit.
     */
    paymentItemClick: EventEmitter<IdentifiedPaymentOrder>;
    /**
     * Approval event emitter
     */
    approvePayment: EventEmitter<IdentifiedPaymentOrder>;
    /**
     * Rejection event emitter
     */
    rejectPayment: EventEmitter<IdentifiedPaymentOrder>;
    /**
     * Cancel event emitter
     */
    cancelPayment: EventEmitter<IdentifiedPaymentOrder>;
    /**
     * Edit event emitter
     */
    editPayment: EventEmitter<IdentifiedPaymentOrder>;
    /**
     * Copy payment event emitter
     */
    copyPayment: EventEmitter<PaymentOrder>;
    /**
     * Selection set
     */
    selectionSet: EventEmitter<Set<string>>;
    mapPaymentType(item: PaymentTemplate): string | undefined;
    onSelectItem(item: PaymentTemplate): void;
    onEditTemplate(template: PaymentTemplate): void;
    openDeleteTemplateModal(item: PaymentTemplate): void;
    onTemplateClick(template: PaymentTemplate): void;
    onPaymentItemClick(paymentItem?: IdentifiedPaymentOrder): void;
    isApprovalProhibited(paymentItem?: IdentifiedPaymentOrder): boolean;
    onApprovePayment(payment: IdentifiedPaymentOrder, event?: Event): void;
    isRejectionProhibited(paymentItem?: IdentifiedPaymentOrder): boolean;
    onRejectPayment(payment: IdentifiedPaymentOrder, event?: Event): void;
    onCancelPayment(payment: IdentifiedPaymentOrder): void;
    onEditPayment(payment: IdentifiedPaymentOrder): void;
    onCopyPayment(payment: IdentifiedPaymentOrder): void;
    canCopyPayment(payment: IdentifiedPaymentOrder): boolean;
    isEditProhibited(paymentItem?: IdentifiedPaymentOrder): boolean;
    isCancelProhibited(paymentItem?: IdentifiedPaymentOrder): boolean;
    hasCreatePermission(item: PaymentTemplate | IdentifiedPaymentOrder): boolean;
    formatExecutionDate(date: string): string;
    stopPropagation(event: Event): void;
    transactionInformation(payment: IdentifiedPaymentOrder | undefined): IdentifiedTransaction | undefined;
    private isActionDisabled;
    static ɵfac: i0.ɵɵFactoryDeclaration<PaymentsListComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<PaymentsListComponent, "bb-list-payments-component", never, { "items": "items"; "searchTerm": "searchTerm"; "responseError": "responseError"; "canDelete": "canDelete"; "canEdit": "canEdit"; "isManageTransfersMode": "isManageTransfersMode"; "size": "size"; "paymentMode": "paymentMode"; "isDebitMode": "isDebitMode"; }, { "triggerDeleteTemplate": "triggerDeleteTemplate"; "templateItemClick": "templateItemClick"; "selectTemplate": "selectTemplate"; "editTemplate": "editTemplate"; "paymentItemClick": "paymentItemClick"; "approvePayment": "approvePayment"; "rejectPayment": "rejectPayment"; "cancelPayment": "cancelPayment"; "editPayment": "editPayment"; "copyPayment": "copyPayment"; "selectionSet": "selectionSet"; }, never, never>;
}
