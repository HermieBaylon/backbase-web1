import { EventEmitter } from '@angular/core';
import { BreachInfo } from '@backbase/data-ang/payment-order';
import { PaymentBaseFields } from '../../../configs/models/form-item-names.model';
import { CounterPartyDetails, InitiatorDetails, PaymentDetails } from '../../../configs/models/form-items.model';
import { BreachReportError } from '../../models/types';
import * as i0 from "@angular/core";
interface PaymentDetailsExtend extends PaymentDetails {
    [PaymentBaseFields.initiator]: InitiatorDetails & {
        IBAN: string;
    };
    [PaymentBaseFields.counterparty]: CounterPartyDetails & {
        IBAN: string;
    };
}
export declare class BreachLimitDetailsModalComponent {
    /**
     * Payment details
     */
    paymentDetails: PaymentDetailsExtend;
    /**
     * The breach limit report from the payment order that originated it.
     */
    error?: BreachReportError;
    /**
     * The flag that controls visibility of the breach limit report.
     * By default is `false`.
     */
    isOpen: boolean;
    /**
     * Event emitted when user clicks on close icon.
     */
    close: EventEmitter<any>;
    get breachReportCurrency(): string | undefined;
    private normalizeBreachReportPeriod;
    private flattenBreachReports;
    private compareByPeriod;
    get sortedBreaches(): Array<BreachInfo>;
    onClose(): void;
    print(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<BreachLimitDetailsModalComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<BreachLimitDetailsModalComponent, "bb-breach-limit-details", never, { "paymentDetails": "paymentDetails"; "error": "error"; "isOpen": "isOpen"; }, { "close": "close"; }, never, never>;
}
export {};
