import { EventEmitter, OnDestroy, OnInit } from '@angular/core';
import { AbstractControl, FormBuilder, FormGroup } from '@angular/forms';
import { PaymentsControlsModel } from '../../models/payments-controls.model';
import { Status } from '../../constants';
import { BbTemplate } from '@backbase/foundation-ang/core';
import * as i0 from "@angular/core";
export declare class PaymentsFilterComponent implements OnInit, OnDestroy {
    private readonly fb;
    /**
     * Reference to instance of customizable component.
     */
    readonly hostRef: this;
    /**
     * Reference to Status enum
     */
    readonly statusesMap: typeof Status;
    paymentsFilterForm: FormGroup;
    private readonly gc$;
    private readonly filterValueChanges;
    alreadyApplied: boolean;
    /**
     * EventEmitter for triggering a filter action.
     */
    readonly filter: EventEmitter<PaymentsControlsModel>;
    /**
     * EventEmitter for closing filter form
     */
    readonly closeFilter: EventEmitter<any>;
    /**
     * EventEmitter for displaying wether filter was applied or not
     */
    readonly isFilterApplied: EventEmitter<boolean>;
    /**
     * EventEmitter for when form is reset. Search should be executed
     */
    readonly reset: EventEmitter<any>;
    /**
     * String array with statuses that should not be available in current instance
     */
    statusBlackList: never[];
    constructor(fb: FormBuilder);
    ngOnInit(): void;
    /**
     * Emit event to apply filter.
     *
     * @param filterParams - Options to filter transactions list with.
     */
    onFilter(filterParams: PaymentsControlsModel): void;
    /**
     * Clear filter form, reset values to default and emit event to apply filter.
     */
    onClearFilter(): void;
    /**
     * Emit event to close this filter form.
     */
    onCloseFilter(): void;
    isApplyButtonDisabled(): boolean;
    private amountValidator;
    private resetAmountError;
    get amountToControl(): AbstractControl | null | undefined;
    /**
     * filterStatusMap Converts `PROCESSING`status in the array,
     * to `READY`, `ACKNOWLEDGED`, and `DOWNLOADING` since the server
     * uses the statuses, but the user should only see them as
     * `PROCESSING`
     */
    private filterStatusMap;
    private normalizeFilterValues;
    /**
     * onFilterChanges generates the subscription that will
     * mark the form as pristine if no filter inputs have values
     */
    private onFilterChanges;
    ngOnDestroy(): void;
    getExecutionDateErrorId(executionDateId: string): string;
    getExecutionDateDescribedBy(executionDateId: string): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<PaymentsFilterComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<PaymentsFilterComponent, "bb-payments-filter", never, { "statusBlackList": "statusBlackList"; }, { "filter": "filter"; "closeFilter": "closeFilter"; "isFilterApplied": "isFilterApplied"; "reset": "reset"; }, never, never>;
}
export declare class PaymentsFilterCustomizableDirective extends BbTemplate<PaymentsFilterComponent, undefined> {
    static ɵfac: i0.ɵɵFactoryDeclaration<PaymentsFilterCustomizableDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<PaymentsFilterCustomizableDirective, "[bbPaymentsFilterCustomizable]", never, {}, {}, never>;
}
