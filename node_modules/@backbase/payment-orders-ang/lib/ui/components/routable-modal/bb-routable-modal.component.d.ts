import { EventEmitter, OnDestroy, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { Pubsub, Unsubscribe } from '@backbase/foundation-ang/web-sdk';
import { NgbModalOptions } from '@ng-bootstrap/ng-bootstrap';
import { BehaviorSubject } from 'rxjs';
import { RoutableModalService } from './bb-routable-modal-service';
import * as i0 from "@angular/core";
export declare class RoutableModalComponent implements OnDestroy, OnInit {
    private route;
    private readonly modalService;
    private readonly eventBus;
    /**
     * Modal Options
     */
    modalOptions?: NgbModalOptions;
    /**
     * Flag to show close button
     */
    closeButton: boolean;
    /**
     * Modal window name (url friendly, without spaces)
     */
    modalWindowName: string;
    /**
     * Flag to show modal header
     */
    showHeader: boolean;
    /**
     * Modal Title
     */
    modalTitle: string;
    /**
     * Modal Title Icon
     */
    modalTitleIcon: string;
    /**
     * Modal heading type (h1-h6)
     */
    modalHeadingType: string;
    /**
     * Event emitted when the modal visibility has changed
     */
    visibilityChange: EventEmitter<any>;
    isModalOpen$: BehaviorSubject<boolean>;
    readonly defaultModalOptions: {
        backdrop: string;
        keyboard: boolean;
        size: string;
        animation: boolean;
        scrollable: boolean;
        windowClass: string;
    };
    private subscription;
    unsubscribeEvent: Unsubscribe;
    constructor(route: ActivatedRoute, modalService: RoutableModalService, eventBus: Pubsub);
    ngOnInit(): void;
    ngOnDestroy(): void;
    openModal(): void;
    closeModal(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<RoutableModalComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<RoutableModalComponent, "bb-routable-modal", never, { "modalOptions": "modalOptions"; "closeButton": "closeButton"; "modalWindowName": "modalWindowName"; "showHeader": "showHeader"; "modalTitle": "modalTitle"; "modalTitleIcon": "modalTitleIcon"; "modalHeadingType": "modalHeadingType"; }, { "visibilityChange": "visibilityChange"; }, never, ["*"]>;
}
