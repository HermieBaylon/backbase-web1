import { EventEmitter, OnDestroy, OnInit } from '@angular/core';
import { FormControl } from '@angular/forms';
import { ProductSummaryItem } from '@backbase/data-ang/arrangements';
import { NgbDropdown } from '@ng-bootstrap/ng-bootstrap';
import { Subject } from 'rxjs';
import { BeneficiaryList, BeneficiaryListState } from '../../constants';
import { ContactItem } from '../../models/types';
import * as i0 from "@angular/core";
export declare class BeneficiarySelectorUiComponent implements OnDestroy, OnInit {
    private _accounts;
    private _contacts;
    state: BeneficiaryListState;
    /**
     * Total count of accounts
     */
    totalAccounts: number;
    /**
     * Total count of contacts
     */
    totalContacts: number;
    /**
     * Total count of contacts items before sub-accounts extract
     */
    totalContactsItemsCount: number;
    /**
     * List of contacts
     */
    set contacts(value: ContactItem[]);
    get contacts(): ContactItem[];
    /**
     * List of own accounts
     */
    set accounts(value: ProductSummaryItem[]);
    get accounts(): ProductSummaryItem[];
    /**
     * Tabs configuration
     */
    tabs: Array<BeneficiaryList>;
    /**
     * Pipe to initiate dropdown closure from outside
     */
    closeDropdownRequest$: Subject<boolean>;
    /**
     * Placeholder for the search box
     */
    placeholder: string;
    /**
     * Title for the beneficiary selector
     */
    title: string;
    /**
     * Helper text for the beneficiary selector. Appears inline next to the label.
     */
    helperText: string;
    /**
     * Flag to denote if the beneficiary selector has errors.
     */
    set hasError(error: boolean);
    /**
     * aria-label for the search box arrow icon
     */
    ariaLabel: string;
    /**
     * Dropdown icon that would be shown alongside with textbox
     */
    dropdownIcon: string;
    /**
     * Selected account event emitter
     */
    selectedAccount: EventEmitter<any>;
    /**
     * Selected contact event emitter
     */
    selectedContact: EventEmitter<any>;
    /**
     * Search string
     */
    searchValue: EventEmitter<string>;
    /**
     * Fetch more items event handler
     */
    fetchMoreItems: EventEmitter<{
        page: number;
        type: BeneficiaryList;
    }>;
    /**
     * Enter account detail event
     */
    manualEdit: EventEmitter<string>;
    /**
     * Event emitted search is blurred
     */
    searchBlur: EventEmitter<string>;
    /**
     * Clear search value
     */
    clear: EventEmitter<string>;
    /**
     * Time delay between each search requests in milliseconds. Defaults to 300
     */
    debounceTime: number;
    /**
     * Selected item, contact or account
     */
    set selectedItem(selectedItem: ContactItem | ProductSummaryItem | undefined);
    get selectedItem(): ContactItem | ProductSummaryItem | undefined;
    /**
     * Form control for search value.
     */
    search: FormControl;
    /**
     * Flag to denote if the account has only closed payment permission.
     * Default value is `false`
     */
    isClosedPayment: boolean;
    /**
     * Flag to denote if the beneficiary field is disabled.
     * Default value is `false`
     */
    isBeneficiaryDisabled: boolean;
    /**
     * Flag to denote if the manual edit feature is disabled.
     * Default value is `false`
     */
    isManualEditDisabled: boolean;
    searchIsFocused: boolean;
    private _selectedItem?;
    readonly debounceSearch$: Subject<string>;
    readonly gc$: Subject<unknown>;
    private pageState;
    dropdownItem?: NgbDropdown;
    constructor();
    ngOnInit(): void;
    ngOnDestroy(): void;
    private listStateReducer;
    selectAccount(account: ProductSummaryItem): void;
    selectContact(contact: ContactItem): void;
    handleSearch(searchString?: string): void;
    onBlur(): void;
    focusHandler(): void;
    onClear(): void;
    handleDropdownClose(opened: boolean, dropdown: NgbDropdown): void;
    onManualEdit(): void;
    fetchMoreItemsAction(listType: BeneficiaryList): void;
    private updateListStateOnDataChange;
    static ɵfac: i0.ɵɵFactoryDeclaration<BeneficiarySelectorUiComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<BeneficiarySelectorUiComponent, "bb-beneficiary-selector-ui", never, { "totalAccounts": "totalAccounts"; "totalContacts": "totalContacts"; "totalContactsItemsCount": "totalContactsItemsCount"; "contacts": "contacts"; "accounts": "accounts"; "tabs": "tabs"; "closeDropdownRequest$": "closeDropdownRequest$"; "placeholder": "placeholder"; "title": "title"; "helperText": "helperText"; "hasError": "hasError"; "ariaLabel": "aria-label"; "dropdownIcon": "dropdownIcon"; "debounceTime": "debounceTime"; "selectedItem": "selectedItem"; "search": "search"; "isClosedPayment": "isClosedPayment"; "isBeneficiaryDisabled": "isBeneficiaryDisabled"; "isManualEditDisabled": "isManualEditDisabled"; }, { "selectedAccount": "selectedAccount"; "selectedContact": "selectedContact"; "searchValue": "searchValue"; "fetchMoreItems": "fetchMoreItems"; "manualEdit": "manualEdit"; "searchBlur": "searchBlur"; "clear": "clear"; }, never, never>;
}
