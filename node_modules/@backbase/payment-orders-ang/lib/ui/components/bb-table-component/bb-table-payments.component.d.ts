import { EventEmitter } from '@angular/core';
import { PaymentTemplate } from '@backbase/data-ang/payment-template';
import { BehaviorSubject, Subject } from 'rxjs';
import { PaymentOrdersData, Template } from '../../models';
import { PaymentConfigService } from '../../../configs/services/payment-config.service';
import { IdentifiedPaymentOrder, IdentifiedTransaction } from '@backbase/data-ang/payment-order';
import { SortEvent } from '@backbase/ui-ang/table';
import { PaymentModeType, PaymentOrder, PaymentTemplatesData } from '../../models/types';
import { Preferences } from '../../constants';
import * as i0 from "@angular/core";
export declare class PaymentsTableComponent {
    private readonly paymentConfigService;
    readonly hostRef: this;
    constructor(paymentConfigService: PaymentConfigService);
    /**
     * Items to be displayed
     */
    items: PaymentTemplatesData | PaymentOrdersData;
    /**
     * Search term value.
     */
    searchTerm?: string;
    /**
     * Search query string (if any)
     */
    clearSelection: Subject<Set<string>>;
    /**
     * Response error on payment templates list.
     */
    responseError?: BehaviorSubject<any>;
    /**
     * Flag indicates if the user has delete permission.
     * Default value is `false`.
     */
    canDelete: boolean;
    /**
     * Flag indicates if the user has edit permission.
     * Default value is `false`.
     */
    canEdit: boolean;
    /**
     * Flag indicates whether called from Manage transfers
     */
    isManageTransfersMode: boolean;
    /**
     * The flag to denote if it is a debit mode
     */
    isDebitMode: boolean;
    /**
     * Payment mode
     * Default is `SINGLE`.
     */
    paymentMode: PaymentModeType;
    /**
     * Total count of payment orders.
     */
    totalCount?: number;
    /**
     * Number of payment orders shown per page.
     */
    pageSize?: number;
    /**
     * Select template event emitter
     */
    selectTemplate: EventEmitter<PaymentTemplate>;
    /**
     * Click template event emitter.
     */
    templateItemClick: EventEmitter<PaymentTemplate>;
    /**
     * Changes will be triggered on paymentItemClick event emit.
     */
    paymentItemClick: EventEmitter<IdentifiedPaymentOrder>;
    /**
     * Click delete event emitter.
     */
    triggerDeleteTemplate: EventEmitter<Template>;
    /**
     * Changes will be triggered on column sorting.
     */
    sort: EventEmitter<SortEvent>;
    /**
     * Selection set
     */
    selectionSet: EventEmitter<Set<string>>;
    /**
     * Edit template event emitter.
     */
    editTemplate: EventEmitter<Template>;
    /**
     * Approval event emitter
     */
    approvePayment: EventEmitter<IdentifiedPaymentOrder>;
    /**
     * Rejection event emitter
     */
    rejectPayment: EventEmitter<IdentifiedPaymentOrder>;
    /**
     * Cancel event emitter
     */
    cancelPayment: EventEmitter<IdentifiedPaymentOrder>;
    /**
     * Edit event emitter
     */
    editPayment: EventEmitter<IdentifiedPaymentOrder>;
    /**
     * Copy payment event emitter
     */
    copyPayment: EventEmitter<PaymentOrder>;
    private selection;
    preferences: typeof Preferences;
    mapPaymentType: (item: PaymentTemplate) => string | undefined;
    onSelectTemplate(item: PaymentTemplate): void;
    onTemplateClick(template: PaymentTemplate): void;
    onPaymentItemClick(paymentItem?: IdentifiedPaymentOrder): void;
    onEditTemplate(template: PaymentTemplate): void;
    trackById(_index: number, item: PaymentTemplate): string;
    onSort(event: SortEvent): void;
    setSelection(selection: Set<string>): void;
    getIds(items?: Array<IdentifiedPaymentOrder | PaymentTemplate>): Array<string> | undefined;
    openDeleteTemplateModal(item: PaymentTemplate): void;
    formatExecutionDate(date: string): string;
    stopPropagation(event: Event): void;
    isApprovalProhibited(paymentItem?: IdentifiedPaymentOrder): boolean;
    onApprovePayment(payment: IdentifiedPaymentOrder, event: Event): void;
    isRejectionProhibited(paymentItem?: IdentifiedPaymentOrder): boolean;
    onRejectPayment(payment: IdentifiedPaymentOrder, event: Event): void;
    onCancelPayment(payment: IdentifiedPaymentOrder): void;
    onEditPayment(payment: IdentifiedPaymentOrder): void;
    onCopyPayment(payment: IdentifiedPaymentOrder): void;
    canCopyPayment(payment: IdentifiedPaymentOrder): boolean;
    isEditProhibited(paymentItem?: IdentifiedPaymentOrder): boolean;
    isCancelProhibited(paymentItem?: IdentifiedPaymentOrder): boolean;
    transactionInformation(payment: IdentifiedPaymentOrder | undefined): IdentifiedTransaction | undefined;
    hasCreatePermission(template: PaymentTemplate | IdentifiedPaymentOrder): boolean;
    private isActionDisabled;
    static ɵfac: i0.ɵɵFactoryDeclaration<PaymentsTableComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<PaymentsTableComponent, "bb-table-payments-component", never, { "items": "items"; "searchTerm": "searchTerm"; "clearSelection": "clearSelection"; "responseError": "responseError"; "canDelete": "canDelete"; "canEdit": "canEdit"; "isManageTransfersMode": "isManageTransfersMode"; "isDebitMode": "isDebitMode"; "paymentMode": "paymentMode"; "totalCount": "totalCount"; "pageSize": "pageSize"; }, { "selectTemplate": "selectTemplate"; "templateItemClick": "templateItemClick"; "paymentItemClick": "paymentItemClick"; "triggerDeleteTemplate": "triggerDeleteTemplate"; "sort": "sort"; "selectionSet": "selectionSet"; "editTemplate": "editTemplate"; "approvePayment": "approvePayment"; "rejectPayment": "rejectPayment"; "cancelPayment": "cancelPayment"; "editPayment": "editPayment"; "copyPayment": "copyPayment"; }, never, never>;
}
