import { EventEmitter } from '@angular/core';
import { FormControl, ControlValueAccessor } from '@angular/forms';
import * as i0 from "@angular/core";
export declare class SelectCountryDropdownComponent implements ControlValueAccessor {
    _countries: Array<string>;
    _selectedCountry: string;
    search: FormControl;
    countryEntries: Array<[string, string]>;
    filteredCountries: Array<string>;
    /**
     * Array of country iso codes
     */
    set countries(countries: Array<string>);
    /**
     * Selected country iso code
     */
    selectedCountry: string;
    /**
     * Helper text for the component. Defaults to empty string.
     */
    helperText: string;
    /**
     * Placeholder text. Defaults to empty string.
     */
    placeholder: string;
    /**
     * Label of the component. Defaults to empty string.
     */
    label: string;
    /**
     * Placeholder fot search. Defaults to empty string.
     */
    searchPlaceholder: string;
    /**
     * Icon for the dropdown. Defaults to `toggle-down`
     */
    dropdownIcon: string;
    /**
     * Flag which indicates permission to create closed payment
     * Default value is `false`
     */
    isClosedPayment: boolean;
    /**
     * Emits value when a country is selected
     */
    selectCountry: EventEmitter<string>;
    setupCountries(): void;
    selectItem(country: string): void;
    handleSearch(query?: string): void;
    onChange(): void;
    onTouched(): void;
    writeValue(): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<SelectCountryDropdownComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SelectCountryDropdownComponent, "bb-select-country-dropdown", never, { "countries": "countries"; "selectedCountry": "selectedCountry"; "helperText": "helperText"; "placeholder": "placeholder"; "label": "label"; "searchPlaceholder": "searchPlaceholder"; "dropdownIcon": "dropdownIcon"; "isClosedPayment": "isClosedPayment"; }, { "selectCountry": "selectCountry"; }, never, never>;
}
