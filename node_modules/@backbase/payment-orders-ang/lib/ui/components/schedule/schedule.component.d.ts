import { ChangeDetectorRef, DoCheck, OnDestroy, OnInit } from '@angular/core';
import { FormControl, FormGroup } from '@angular/forms';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { NgbDateStruct } from '@ng-bootstrap/ng-bootstrap';
import * as i0 from "@angular/core";
export interface ScheduleFrequency {
    value: string;
    every: string;
}
export interface ScheduleItem {
    frequency: ScheduleFrequency;
    startDate: string;
    endDate?: string;
    repeat?: number;
    every?: string;
    endType?: string;
    scheduleInfo?: string;
}
export declare const endTypes: {
    never: string;
    on: string;
    after: string;
};
export declare class ScheduleComponent implements OnInit, DoCheck, OnDestroy {
    private readonly changeDetectorRef;
    readonly hostRef: ScheduleComponent;
    /**
     * List of available frequencies
     */
    frequencies: Array<ScheduleFrequency> | undefined;
    /**
     * Minimum repeat allowed
     */
    minOccurs: number | undefined;
    /**
     * Maximum repeat allowed
     */
    maxOccurs: number | undefined;
    /**
     * Form with schedule fields
     */
    scheduleForm: FormGroup | undefined;
    /**
     * Whether the submit button is pressed
     */
    formSubmitted: boolean | undefined;
    get endTypes(): {
        never: string;
        on: string;
        after: string;
    };
    get item(): ScheduleItem | undefined;
    get isSingleTransfer(): boolean | undefined;
    get today(): NgbDateStruct;
    private readonly gc$;
    private rawItem;
    constructor(changeDetectorRef: ChangeDetectorRef);
    ngDoCheck(): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    private onEndTypeChange;
    private setControlsState;
    private onStartDateChange;
    private onFrequencyChange;
    private setEndDate;
    isInvalidControl(control: FormControl): boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<ScheduleComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ScheduleComponent, "bb-schedule-ui", never, { "frequencies": "frequencies"; "minOccurs": "minOccurs"; "maxOccurs": "maxOccurs"; "scheduleForm": "scheduleForm"; "formSubmitted": "formSubmitted"; }, {}, never, never>;
}
export declare class ScheduleCustomizableDirective extends BbTemplate<ScheduleComponent, undefined> {
    static ɵfac: i0.ɵɵFactoryDeclaration<ScheduleCustomizableDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<ScheduleCustomizableDirective, "[bbScheduleCustomizable], [bbPayordInitiatePaymentScheduleCustomizable]", never, {}, {}, never>;
}
