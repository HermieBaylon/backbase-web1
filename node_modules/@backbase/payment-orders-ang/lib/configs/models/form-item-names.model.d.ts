export declare enum PaymentBaseFields {
    initiator = "initiator",
    counterparty = "counterparty",
    remittanceInfo = "remittanceInfo",
    schedule = "schedule",
    additions = "additions"
}
export declare enum PaymentOptionFields {
    selectPaymentOption = "selectPaymentOption",
    paymentCost = "paymentCost",
    chargeBearer = "chargeBearer",
    chargeBearerOptions = "chargeBearerOptions",
    transferFee = "transferFee",
    exchangeRate = "exchangeRate",
    inputFormFromSettings = "inputFormFromSettings",
    paymentTypeName = "paymentTypeName"
}
export declare enum InitiatorFields {
    initiatorAccountGroup = "debitorAccount",
    id = "id",
    name = "name",
    alias = "alias",
    accountNumber = "accountNumber",
    accountType = "accountType",
    currency = "currency"
}
export declare enum AccountField {
    id = "id",
    name = "name",
    accountNumber = "accountNumber",
    accountType = "accountType",
    currency = "currency",
    bankBranchCode = "bankBranchCode",
    balance = "balance",
    number = "number"
}
export declare enum CounterPartyFields {
    counterPartyAccountGroup = "creditorAccount",
    standardEntryClass = "entryClass",
    creditor = "creditor",
    creditorBank = "creditorBank",
    bankName = "bankName",
    bic = "bic",
    bankBranchCode = "bankBranchCode",
    correspondentBank = "correspondentBank",
    intermediaryBank = "intermediaryBank",
    schemeName = "schemeName",
    recipientId = "recipientId",
    accountType = "accountType",
    accountNumber = "accountNumber",
    name = "name",
    alias = "alias",
    id = "id",
    postalAddress = "postalAddress",
    messageToBank = "messageToBank",
    remittanceInformation = "remittanceInformation",
    targetCurrency = "targetCurrency",
    endToEndIdentification = "endToEndIdentification",
    mandateIdentifier = "mandateIdentifier",
    role = "role",
    selectedContact = "selectedContact",
    counterpartyAccountAdditions = "counterpartyAccountAdditions",
    additions = "additions",
    country = "country",
    saveNewContact = "saveNewContact",
    enableAdditionalBankDetails = "enableAdditionalBankDetails"
}
export declare enum PaymentTemplateFields {
    templateName = "templateName",
    paymentTemplateId = "paymentTemplateId"
}
export declare enum RemittanceInfoFields {
    amountCurrencyGroup = "amountGroup",
    amount = "amount",
    currency = "currency",
    urgent = "urgent",
    paymentReference = "paymentReference",
    description = "description",
    amountOptions = "amountOptions",
    amountOptionLabel = "amountOptionLabel",
    purposeOfPayment = "purposeOfPayment"
}
export declare enum ScheduleFields {
    scheduleGroup = "scheduleGroup",
    frequency = "frequency",
    endType = "endType",
    every = "every",
    on = "on",
    startDate = "startDate",
    endDate = "endDate",
    repeat = "repeat",
    frequencySwitch = "frequencySwitch",
    scheduleInfo = "scheduleInfo"
}
export declare enum HiddenFields {
    isManualEdit = "isManualEdit",
    isClosedPayment = "isClosedPayment",
    enableBeneficiary = "enableBeneficiary",
    beneficiaryAccountName = "beneficiaryAccountName",
    showSaveNewContact = "showSaveNewContact",
    selectedBeneficiary = "selectedBeneficiary",
    hideBeneficiaryFields = "hideBeneficiaryFields",
    defaultCountry = "defaultCountry",
    isPaymentCopy = "isPaymentCopy",
    isDebitPayment = "isDebitPayment",
    defaultBankCodeSetting = "defaultBankCodeSetting",
    sanctionedCountries = "sanctionedCountries"
}
export declare enum PaymentFormFieldHooks {
    onInit = "onInit",
    onDestroy = "onDestroy"
}
export declare enum PaymentHooks {
    onInit = "onInit",
    onDestroy = "onDestroy",
    onSave = "onSave",
    onSubmit = "onSubmit"
}
/**
 * @deprecated Will be removed in widget collection v3.11.0
 */
export declare enum MultiPaymentHooks {
    onClick = "onClick",
    onBlur = "onBlur"
}
/**
 * @deprecated Will be removed in widget collection v3.11.0
 */
export declare enum StepperAction {
    NEXT = "next",
    BACK = "back",
    SUBMIT = "submit"
}
/**
 * @deprecated Will be removed in widget collection v3.11.0
 */
export declare enum MultiPaymentFormCardFields {
    counterpartyName = "counterpartyName",
    amount = "amount",
    description = "description"
}
/**
 * @deprecated Will be removed in widget collection v3.11.0
 */
export declare enum MultiPaymentEvents {
    paymentBlur = "payment-blur",
    deletePayment = "delete-payment"
}
/**
 * @deprecated Will be removed in widget collection v3.11.0
 */
export declare enum multiPaymnetValidationRules {
    batchNameIsMandatory = "batchInfo.name",
    requestedExecutionDateIsMandatory = "batchInfo.requestedExecutionDate",
    requestedExecutionDateIsValid = "batchInfo.requestedExecutionDate",
    batchhasatleastonecredittransaction = "counterparty.debitorAccount",
    totalcredittransactionscountisequaltointendedtransactionscount = "counterparty.debitorAccount",
    totalcreditamountisequaltototalintendedcreditamount = "counterparty.debitorAccount",
    originatoraccountnumberismandatory = "initiator",
    userhasaccesstooriginatoraccount = "initiator",
    originatoraccountisallowedtodebit = "initiator",
    counterpartyaccountnumberismandatory = "counterpartyAccountNumber",
    userhasaccesstocounterpartyaccount = "counterpartyAccountNumber",
    counterpartyaccountnumberisnotsameasoriginatoraccount = "counterpartyAccountNumber",
    counterpartyaccountisallowedtocredit = "counterpartyAccountNumber",
    batchpaymentiscredit = "counterpartyAccountNumber",
    batchpaymentamountisgreaterthanzero = "amount",
    batchpaymentcurrencyisvalid = "amount.currency"
}
