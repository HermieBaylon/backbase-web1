import { AbstractControl, AsyncValidatorFn, FormControl, FormGroup, ValidatorFn } from '@angular/forms';
import { CounterPartyFields, InitiatorFields, MultiPaymentFormCardFields, MultiPaymentHooks, PaymentBaseFields, PaymentFormFieldHooks, PaymentHooks, RemittanceInfoFields, StepperAction } from './form-item-names.model';
import { Subject } from 'rxjs';
import { PurposeOfPayment } from '@backbase/data-ang/payment-order-options';
import { IdentifiedPaymentOrder } from '@backbase/data-ang/payment-order';
import { PaymentTemplate } from '@backbase/data-ang/payment-template';
import { ScheduleItem } from '../../ui/components/schedule/schedule.component';
import { Address, ContactItem, FormSeparatorConfig, InternalAccountFormItem } from '../../ui/models/types';
export declare enum AccessContextScope {
    USER = "USER",
    SA = "SA",
    LE = "LE"
}
export declare enum PaymentComponents {
    text = "text",
    date = "date",
    phone = "phone",
    number = "number",
    textarea = "textarea",
    address = "address",
    select = "select",
    radio = "radio",
    checkbox = "checkbox",
    debitAccountSelector = "debitAccountSelector",
    countrySelector = "countrySelector",
    sanctionedCountrySelector = "sanctionedCountrySelector",
    beneficiarySelector = "beneficiarySelector",
    selectPaymentOption = "selectPaymentOption",
    paymentCost = "paymentCost",
    chargeBearer = "chargeBearer",
    schedule = "schedule",
    amount = "amount",
    sanctionedCurrencyAmount = "sanctionedCurrencyAmount",
    switch = "switch",
    internalAccountSelector = "internalAccountSelector",
    compactAmount = "compactAmount",
    scheduleHeader = "scheduleHeader",
    buttonGroup = "buttonGroup",
    multiPaymentCard = "multiPaymentCard",
    creditDebitSelector = "creditDebitSelector",
    internalAmountOptions = "internalAmountOptions",
    header = "header",
    purposeOfPayment = "purposeOfPayment",
    alert = "alert",
    scheduleSwitch = "scheduleSwitch",
    beneficiaryGroupHeader = "beneficiaryGroupHeader",
    multiPaymentAccountSelector = "multiPaymentAccountSelector",
    contactSelector = "contactSelector",
    accountSelector = "accountSelector"
}
export interface BaseObject<T> {
    [key: string]: T;
}
export interface Hideable {
    hidden?: boolean;
}
export interface Extendable {
    parent?: string;
}
export declare enum AddressType {
    'beneficiary' = "beneficiary",
    'beneficiary bank' = "beneficiary bank",
    'correspondent bank' = "correspondent bank",
    'intermediary bank' = "intermediary bank"
}
export declare type AddressTypeValue = keyof typeof AddressType;
export interface PaymentFormGroup extends Hideable, Extendable {
    fields: Array<PaymentFormFieldConfig | PaymentFormGroup>;
    name: string;
    title?: string;
    subTitle?: string;
    collapsible?: boolean;
    cssClasses?: Array<string>;
    options?: PaymentFormFieldOptions;
    separator?: FormSeparatorConfig;
    hasDynamicTitle?: boolean;
    clearOptions?: ClearOptions;
}
/**
 * @deprecated Will be removed in widget collection v3.11.0
 */
export interface MultipleFormGroup extends PaymentFormGroup {
    stepName?: string;
}
export interface OmniPaymentConfigItem {
    paymentType: PaymentTypeConfig;
    businessFunction: string;
    classId?: string;
    options?: OmniPaymentWidgetOptions;
}
export declare enum TemplateModeType {
    CREATE = "CREATE",
    EDIT = "EDIT"
}
export declare enum EditModeTypes {
    EDIT_TEMPLATE = "EDIT_TEMPLATE",
    EDIT_PAYMENT = "EDIT_PAYMENT"
}
export declare enum PaymentMode {
    EDIT_PAYMENT = "EDIT_PAYMENT",
    CREATE_PAYMENT = "CREATE_PAYMENT",
    COPY_PAYMENT = "COPY_PAYMENT",
    EDIT_TEMPLATE = "EDIT_TEMPLATE",
    CREATE_TEMPLATE = "CREATE_TEMPLATE"
}
export interface InitiatePaymentOptions {
    enableApprovals?: boolean;
    defaultScheme?: 'BBAN' | 'IBAN';
    templateModeType?: TemplateModeType;
    successEventName?: string;
    checkClosedPaymentsAccess?: boolean;
    isDebitPayment?: boolean;
    reviewScreenType?: ReviewScreens;
    isModalView?: boolean;
    isTemplateMode?: boolean;
    isEditPaymentModal?: boolean;
    paymentMode?: PaymentMode;
    isOneOffToRecurrentAllowed?: boolean;
    isRecurrentToOneOffAllowed?: boolean;
    defaultCountry?: string;
    pollInterval?: number;
    accessContextScope?: AccessContextScope;
    enablePaymentTemplateSelector?: boolean;
    enableSavePaymentAsTemplate?: boolean;
    /**
     * Hides new payment button if "false", displays button otherwise
     */
    enableNewPaymentButton?: boolean;
    isErrorTitleDisplayed?: boolean;
    pageSize?: number;
    header?(data: InitiatePaymentHeaderData): string;
}
/**
 * @deprecated Type has been renamed into `PaymentConfigOptions`
 */
export interface OmniPaymentWidgetOptions extends InitiatePaymentOptions {
}
/**
 * @deprecated Type has been moved to `@backbase/batch-common-ang` and renamed to `ManualBatchOptions`
 * Will be removed in widget collection v3.11.0
 */
export interface MultiPaymentWidgetOptions {
    debounceTime?: number;
    createTemplates?: boolean;
    viewTemplates?: boolean;
    successEventName?: string;
}
/**
 * @deprecated Will be removed in widget collection v3.11.0
 */
export interface InternalTransferPaymentTypes extends BaseObject<string | undefined> {
    currentToSaving?: string;
    savingToCurrent?: string;
    currentToCurrent?: string;
    savingToSaving?: string;
    cashAdvanceToCurrent?: string;
    cashAdvanceToSaving?: string;
    loanAdvanceToCurrent?: string;
    loanAdvanceToSaving?: string;
    connectedToOther?: string;
}
export interface PaymentTypeConfig {
    fields: Array<PaymentFormFieldConfig | PaymentFormGroup>;
    name: string;
    paymentType: string;
    description?: string;
    businessFunction?: string;
    relatedPaymentTypes?: Array<string>;
    customFields?: PaymentComponentsMap;
    options?: PaymentTypeOptions;
    hooks?: PaymentHooksOptions;
}
/**
 * @deprecated Will be removed in widget collection v3.11.0
 */
export interface ManualBatchTypeConfig extends PaymentTypeConfig {
    resourceName?: string;
}
export interface PaymentTypeOptions extends Options {
    paymentTypes?: InternalTransferCustomPaymentTypes;
    disabledCombinations?: Array<DisabledCombination>;
    closedPaymentBusFns?: Array<string>;
}
export interface PaymentFormFieldConfig extends Hideable, Extendable {
    name: string;
    type: PaymentComponents | string;
    options: PaymentFormFieldOptions;
    hooks?: PaymentFormFieldHooksOptions;
}
export declare type PaymentHooksCallbackFn = (params?: PaymentHooksParams) => void;
export declare type FetchPaymentOptionsListenerFn = (form: FormGroup, fetchOptions: Subject<FormGroup>) => void;
export declare type PaymentClearGroupCallbackFn = (params?: PaymentClearFormGroupParams) => void;
export declare type FormFieldHooksCallbackFn = (params: FormFieldHooksParams) => void;
export interface PaymentClearFormGroupParams {
    formGroup?: FormGroup;
    config?: PaymentFormGroup;
}
export interface ClearOptions {
    label?: string;
    icon?: string;
    onClear: PaymentClearGroupCallbackFn;
}
export interface PaymentHooksParams {
    doneFn: (success?: boolean) => void;
    form: FormGroup;
}
export interface FormFieldHooksParams {
    component: any;
    control: FormControl;
    group: FormGroup;
}
export declare type PaymentFormFieldHooksOptions = {
    [key in PaymentFormFieldHooks]?: FormFieldHooksCallbackFn;
};
export declare type PaymentHooksOptions = {
    [key in PaymentHooks]?: PaymentHooksCallbackFn;
};
export interface PaymentFormField {
    config: PaymentFormFieldConfig;
    group: FormGroup;
    options: PaymentFormFieldOptions;
}
export interface Options {
    [key: string]: any;
}
export interface HorizontalListItem {
    value: string;
    label: string;
    description?: string;
}
export declare type ActivateFn = (value: any, control?: AbstractControl) => Array<string | DependantItem> | undefined;
export interface ErrorMessage {
    name: string;
    message: string;
}
export interface CollapseOptions {
    btnColor?: string;
    btnSize?: string;
    hideIcon?: boolean;
    icon?: string;
    iconSize?: string;
    label?: string;
}
export interface PaymentFormFieldOptions extends Options {
    label?: string;
    placeholder?: string;
    cssClasses?: Array<string>;
    validators?: Array<ValidatorFn>;
    asyncValidators?: Array<AsyncValidatorFn>;
    validationMessages?: Array<ErrorMessage>;
    collapseOptions?: CollapseOptions;
    defaultValue?: any;
    dependants?: Array<string | DependantItem>;
    activateDependantsOn?: boolean | string | ActivateFn;
    mapToField?: PaymentBaseFields | string;
    isIban?: boolean;
    isConditionalMandatory?: boolean;
    helperText?: string;
    description?: string;
    productKinds?: Array<ProductKindItem>;
    fieldsConfig?: MultiPaymentCard;
    amountOptions?: AmountOptions;
    connectedAccounts?: boolean;
    preselect?: boolean;
    header?: string;
    maximumNumberOfPayments?: number;
    validationMessageLabel?: string;
    contactSchemes?: Array<{
        name: ContactScheme;
        regex?: RegExp;
    }>;
    mapItems?: (contacts: Array<ContactItem | InternalAccountFormItem>) => Array<InternalAccountFormItem | ContactItem>;
    /** @deprecated Will be removed in widget collection v3.11.0, use `contactSchemes` instead*/
    contactScheme?: ContactScheme[];
    /** @deprecated Will be removed in widget collection v3.11.0, use `mapItems` instead*/
    otherFilters?: Array<FilterState>;
    /** @deprecated Will be removed in widget collection v3.11.0 */
    choices?: CreditDebitSelector[];
}
export declare enum ContactScheme {
    accountNumber = "accountNumber",
    phoneNumber = "phoneNumber",
    email = "email"
}
/** @deprecated Will be removed in widget collection v3.11.0 */
export interface CreditDebitSelector {
    type: 'CREDIT' | 'DEBIT';
    name: string;
    description: string;
    addressType?: AddressTypeValue;
    keepValueOnHidden?: boolean;
    maxLength?: number;
}
export interface AmountOption extends BaseObject<any> {
    label: string;
    description?: string;
    amountApiField?: string;
    hasCustomAmountInput?: boolean;
    scheduleFrequency?: Array<Options>;
    showFrequencySwitch?: boolean;
}
export interface AmountOptions {
    creditCard?: Array<AmountOption>;
    loan?: Array<AmountOption>;
    IRA?: Array<AmountOption>;
    cssClasses?: Array<string>;
}
export declare type MultiPaymentCard = {
    [key in MultiPaymentFormCardFields]: PaymentFormFieldOptions;
};
export interface ProductKindItem {
    productKind: ProductKinds | string;
    balance?: {
        apiField?: AccountBalances | string;
        label?: string;
    };
}
export interface FilterState extends BaseObject<Array<string | number | boolean> | string> {
    key: string;
    value: Array<string | number | boolean>;
}
export interface DisabledCombination {
    from: ProductKinds;
    to: ProductKinds;
}
export interface InternalTransferCustomPaymentTypes {
    internal?: string;
    external?: string;
}
export interface PaymentComponentsMap {
    [key: string]: any;
}
export interface AmountData extends PaymentFormFieldOptions {
    currencies: Array<string>;
}
export declare type PaymentFormItem = (PaymentFormFieldConfig | PaymentFormGroup) & {
    parent?: string;
};
export interface PaymentDetails extends Options {
    [PaymentBaseFields.initiator]: InitiatorDetails;
    [PaymentBaseFields.counterparty]: CounterPartyDetails;
    [PaymentBaseFields.schedule]: ScheduleItem;
    [PaymentBaseFields.remittanceInfo]: RemittanceDetails;
    [PaymentBaseFields.additions]?: any;
    paymentOption?: string;
    paymentType?: string;
    messageToBank?: string;
    isIntraLegalEntity?: boolean;
    approved?: boolean;
    paymentCost?: string;
    chargeBearer?: string;
    paymentOrderId?: string;
}
export interface InitiatorDetails {
    [InitiatorFields.id]: string;
    [InitiatorFields.name]: string;
    [InitiatorFields.accountNumber]: string;
    [InitiatorFields.currency]: string;
    [InitiatorFields.alias]?: string;
    [InitiatorFields.accountType]?: string;
    [InitiatorFields.initiatorAccountGroup]?: InitiatorDetails;
    [PaymentBaseFields.additions]?: any;
}
export interface RemittanceDetails {
    [RemittanceInfoFields.amountCurrencyGroup]: AmountGroup;
    [RemittanceInfoFields.urgent]?: boolean;
    [RemittanceInfoFields.paymentReference]?: string;
    [RemittanceInfoFields.description]?: string;
    [RemittanceInfoFields.amountOptionLabel]?: string;
    [RemittanceInfoFields.purposeOfPayment]?: string;
}
export interface AmountGroup {
    [RemittanceInfoFields.currency]: string;
    [RemittanceInfoFields.amount]: string;
}
export interface CounterPartyDetails {
    [CounterPartyFields.standardEntryClass]?: string;
    [CounterPartyFields.creditorBank]?: BankDetails;
    [CounterPartyFields.bankName]?: string;
    [CounterPartyFields.correspondentBank]?: BankDetails;
    [CounterPartyFields.intermediaryBank]?: BankDetails;
    [CounterPartyFields.schemeName]?: 'IBAN' | 'BBAN' | 'ID' | 'EXTERNAL_ID' | 'EMAIL' | 'MOBILE';
    [CounterPartyFields.recipientId]?: string;
    [CounterPartyFields.accountType]?: string;
    [CounterPartyFields.accountNumber]: string;
    [CounterPartyFields.name]: string;
    [CounterPartyFields.alias]?: string;
    [CounterPartyFields.id]: string;
    [CounterPartyFields.postalAddress]?: Address;
    [CounterPartyFields.messageToBank]?: string;
    [CounterPartyFields.targetCurrency]?: string;
    [CounterPartyFields.remittanceInformation]?: string;
    [CounterPartyFields.endToEndIdentification]?: string;
    [CounterPartyFields.mandateIdentifier]?: string;
    [CounterPartyFields.saveNewContact]?: boolean;
    [CounterPartyFields.role]?: string;
    [CounterPartyFields.selectedContact]?: {
        contactId?: string;
        accountId?: string;
    };
    [CounterPartyFields.additions]?: any;
    [CounterPartyFields.counterpartyAccountAdditions]?: any;
}
export interface BankDetails {
    [CounterPartyFields.bankBranchCode]?: string;
    [CounterPartyFields.bic]?: string;
    [CounterPartyFields.postalAddress]?: Address;
    [CounterPartyFields.bankName]?: string;
    [CounterPartyFields.additions]?: any;
}
export interface PayordOmniPaymentConfig {
    businessConfig: {
        functionName: string;
        resourceName: string;
    };
}
export interface PayordPaymentError {
    errorData: [
        {
            key: string;
            message: string;
        }
    ];
}
export declare enum ReviewScreens {
    ADAPTED = 0,
    DEFAULT = 1
}
export declare enum Scheme {
    IBAN = "IBAN",
    BBAN = "BBAN",
    ID = "ID"
}
export declare enum ProductKinds {
    currentAccount = "Current Account",
    savingsAccount = "Savings Account",
    creditCard = "Credit Card",
    debitCard = "Debit Card",
    loanAccount = "Loan",
    connectedAccounts = "Connected Account",
    investmentAccount = "Investment Account"
}
export declare enum AccountBalances {
    available = "availableBalance",
    current = "bookedBalance",
    creditLimit = "creditLimit",
    outstandingPrincipalAmount = "outstandingPrincipalAmount"
}
/**
 * @deprecated
 * Will be removed in widget collection v3.11.0
 */
export declare type StepName = string;
/**
 * @deprecated
 * Will be removed in widget collection v3.11.0
 */
export interface StepperConfig {
    stepName: StepName;
    stepDisplayValue: string;
    isActive: boolean;
    isChecked: boolean;
    buttonClass: string[];
    buttonConfig: StepperButtonConfig[];
    title?: string;
    subtitle?: string;
    cssClasses?: Array<string>;
    footerDetail?: MultiPaymentFooterOptions;
}
/**
 * @deprecated
 * Will be removed in widget collection v3.11.0
 */
export interface MultiPaymentFooterOptions {
    totalCount: boolean;
    totalAmount: boolean;
}
/**
 * @deprecated
 * Will be removed in widget collection v3.11.0
 */
export interface StepDetails {
    currentStep?: StepperConfig;
    previousStep?: StepperConfig;
    nextStep?: StepperConfig;
}
/**
 * @deprecated
 * Will be removed in widget collection v3.11.0
 */
export interface StepperButtonConfig {
    type: string;
    text: string;
    action: StepperAction;
    hooks?: MultiPaymentHooksConfig;
}
/**
 * @deprecated Will be removed in widget collection v3.11.0
 */
export declare type MultiPaymentHooksConfig = {
    [key in MultiPaymentHooks]?: MultipaymentHooksCallbackFn;
};
/**
 * @deprecated Will be removed in widget collection v3.11.0
 */
export declare type MultipaymentHooksCallbackFn = (params: MultipaymentHooksParams) => void;
/**
 * @deprecated Will be removed in widget collection v3.11.0
 */
export interface MultipaymentHooksParams {
    doneFn?: (stepperConfig?: StepperConfig, action?: StepperAction) => void;
    stepperConfig?: StepperConfig;
    action?: StepperAction;
}
/**
 * @deprecated
 * Will be removed in widget collection v3.11.0
 */
export interface ManualBatchesConfig {
    availableTypes: Array<ManualBatchTypeConfig>;
    enableTypeSelection: boolean | Array<StepName>;
    steps?: StepperConfig[];
    options?: MultiPaymentWidgetOptions;
}
export interface DependantItem {
    parent: string;
    items: string[];
}
export interface PurposeInfo {
    isOptional: boolean;
    purposes?: Array<PurposeOfPayment>;
}
export interface WizardPaymentOptions {
    customFields?: PaymentComponentsMap;
    fetchPaymentOptionsListener?: FetchPaymentOptionsListenerFn;
}
export interface TriggerInitiatePaymentPayload {
    payment?: IdentifiedPaymentOrder;
    template?: PaymentTemplate;
    options?: InitiatePaymentOptions;
}
export declare enum InitiatePaymentHeaderStates {
    FORM = "FORM",
    REVIEW = "REVIEW",
    SUBMITTED = "SUBMITTED"
}
export interface InitiatePaymentHeaderData {
    paymentType: string;
    state: InitiatePaymentHeaderStates;
    paymentMode?: PaymentMode;
    isDebit?: boolean;
}
export declare type InitiatePaymentHeader = (data: InitiatePaymentHeaderData) => string;
