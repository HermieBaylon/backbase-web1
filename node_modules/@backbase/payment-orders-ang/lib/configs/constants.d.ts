import { InjectionToken, Provider } from '@angular/core';
import { OmniPaymentConfigItem, PaymentTypeConfig, PayordOmniPaymentConfig, PayordPaymentError, ManualBatchesConfig } from './models/form-items.model';
export declare const SepaCountries: string[];
export declare const BB_PAYMENT_CONFIG: InjectionToken<OmniPaymentConfigItem>;
/**
 * @deprecated Will be removed in widget collection v3.11.0
 */
export declare const BB_MULTI_PAYMENT_CONFIG: InjectionToken<ManualBatchesConfig>;
export declare const US_States: {
    label: string;
    value: string;
}[];
export declare const BB_REGISTERED_PAYMENT_CONFIGS: InjectionToken<PaymentTypeConfig[]>;
export declare const BB_PAYORD_OMNI_PAYMENT_CONFIG_TOKEN: InjectionToken<PayordOmniPaymentConfig>;
export declare const payordOmniPaymentDefaults: PayordOmniPaymentConfig;
export declare const PayordOmniPaymentConfigProvider: Provider[];
export declare const DefaultClosedPaymentBusFnSuffix = " - closed";
export declare const DefaultIntraCompanyPaymentBusFnSuffix = " - Intracompany";
export declare const BB_CLOSED_PAYMENT_BUS_FN_SUFFIX: InjectionToken<string>;
export declare const BB_INTRACOMPANY_PAYMENT_BUS_FN_SUFFIX: InjectionToken<string>;
export declare const BB_PAYORD_PAYMENT_ERROR_MESSAGES_TOKEN: InjectionToken<PayordPaymentError>;
export declare enum P2PLimitErrorKeys {
    minLimit = "p2p.payveris.limit_violation.min_payment_amount",
    maxLimit = "p2p.payveris.limit_violation.max_payment_amount"
}
export declare const payordMessagesDefaults: PayordPaymentError;
export declare const PayordPaymentErrorsConfigProvider: Provider[];
export declare const bicCodeValidationPattern = "^[A-Z]{6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3})?$";
export declare const defaultPaymentSuccessEventName = "bb.payment.success.event";
export declare const forbiddenStatus = 403;
