import '@angular/localize/init';
import { PaymentTypeConfig, PaymentComponents } from '../models/form-items.model';
import { PaymentBaseFields, ScheduleFields } from '../models/form-item-names.model';
import { ValidatorFn, Validators } from '@angular/forms';
import { Frequencies, ScheduleEndType } from '../../ui/constants/constants';
import { scheduleEndDateOnInitHook, scheduleEndTypeToggleDependants, scheduleFrequencyToggleDependants, scheduleStartDateOnDestroyHook, scheduleStartDateOnInitHook } from '../helpers/schedule-config-helpers';
import { maxValueTwoHundredValidator, minValueTwoValidator } from '../../ui/helpers/form-validation';
export declare const schedule: {
    name: PaymentBaseFields;
    fields: ({
        type: PaymentComponents;
        name: ScheduleFields;
        options: {
            label: string;
            cssClasses: string[];
            validators: (typeof Validators.required)[];
            defaultValue: string;
            validationMessages: {
                name: string;
                message: string;
            }[];
            options?: undefined;
            dependants?: undefined;
            activateDependantsOn?: undefined;
            preselect?: undefined;
            isConditionalMandatory?: undefined;
            description?: undefined;
            min?: undefined;
            max?: undefined;
        };
        hooks: {
            onInit: typeof scheduleStartDateOnInitHook;
            onDestroy: typeof scheduleStartDateOnDestroyHook;
        };
    } | {
        name: ScheduleFields;
        type: PaymentComponents;
        options: {
            label: string;
            validators: (typeof Validators.required)[];
            options: {
                label: string;
                value: Frequencies;
            }[];
            defaultValue: Frequencies;
            cssClasses: string[];
            dependants: ScheduleFields[];
            activateDependantsOn: typeof scheduleFrequencyToggleDependants;
            validationMessages?: undefined;
            preselect?: undefined;
            isConditionalMandatory?: undefined;
            description?: undefined;
            min?: undefined;
            max?: undefined;
        };
        hooks?: undefined;
    } | {
        name: ScheduleFields;
        type: PaymentComponents;
        options: {
            label: string;
            preselect: boolean;
            isConditionalMandatory: boolean;
            cssClasses: string[];
            defaultValue: ScheduleEndType;
            options: {
                label: string;
                value: ScheduleEndType;
            }[];
            dependants: ScheduleFields[];
            activateDependantsOn: typeof scheduleEndTypeToggleDependants;
            validators?: undefined;
            validationMessages?: undefined;
            description?: undefined;
            min?: undefined;
            max?: undefined;
        };
        hooks?: undefined;
    } | {
        type: PaymentComponents;
        name: ScheduleFields;
        options: {
            cssClasses: string[];
            validators: ValidatorFn[];
            validationMessages: {
                name: string;
                message: string;
            }[];
            isConditionalMandatory: boolean;
            label?: undefined;
            defaultValue?: undefined;
            options?: undefined;
            dependants?: undefined;
            activateDependantsOn?: undefined;
            preselect?: undefined;
            description?: undefined;
            min?: undefined;
            max?: undefined;
        };
        hooks: {
            onInit: typeof scheduleEndDateOnInitHook;
            onDestroy?: undefined;
        };
    } | {
        name: ScheduleFields;
        type: PaymentComponents;
        options: {
            isConditionalMandatory: boolean;
            description: string;
            min: number;
            max: number;
            defaultValue: number;
            validators: (typeof minValueTwoValidator | typeof maxValueTwoHundredValidator)[];
            validationMessages: {
                name: string;
                message: string;
            }[];
            cssClasses: string[];
            label?: undefined;
            options?: undefined;
            dependants?: undefined;
            activateDependantsOn?: undefined;
            preselect?: undefined;
        };
        hooks?: undefined;
    })[];
};
export declare const INTERNAL_TRANSFER_BUSINESS: PaymentTypeConfig;
