{"version":3,"file":"payment-config.service.js","sourceRoot":"","sources":["../../../../../../../libs/payment-orders-ang/src/lib/configs/services/payment-config.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Inject, Injectable, Optional } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { BB_PAYMENT_CONFIG, BB_REGISTERED_PAYMENT_CONFIGS } from '../constants';\nimport {\n  OmniPaymentConfigItem,\n  PaymentTypeConfig,\n} from '../models/form-items.model';\nimport { PaymentTemplate } from '@backbase/data-ang/payment-template';\nimport { normalizePaymentType } from '../../ui/helpers/payment-config-helpers';\n\nconst DEFAULT_KEY = 'DEFAULT';\n\n@Injectable()\nexport class PaymentConfigService {\n  private readonly paymentConfigRegistry: BehaviorSubject<\n    Map<string, PaymentTypeConfig>\n  >;\n  private readonly configRegistry: BehaviorSubject<\n    Map<string, OmniPaymentConfigItem>\n  >;\n  private readonly classIdRegistry: BehaviorSubject<Map<string, string>>;\n\n  constructor(\n    @Inject(BB_PAYMENT_CONFIG)\n    @Optional()\n    configs: Array<OmniPaymentConfigItem>,\n    @Inject(BB_REGISTERED_PAYMENT_CONFIGS)\n    @Optional()\n    registeredPaymentConfigs: Array<PaymentTypeConfig[]>\n  ) {\n    this.paymentConfigRegistry = new BehaviorSubject(\n      new Map<string, PaymentTypeConfig>(\n        configs\n          ? configs.reduce(\n              (\n                acc: any[],\n                { paymentType, businessFunction }: OmniPaymentConfigItem\n              ) => {\n                const paymentConfig = Object.assign(paymentType, {\n                  businessFunction,\n                });\n                return [...acc, [paymentConfig.paymentType, paymentConfig]];\n              },\n              []\n            )\n          : undefined\n      )\n    );\n\n    this.classIdRegistry = new BehaviorSubject(\n      new Map<string, string>(\n        configs\n          ? configs.reduce(\n              (acc: any[], { classId, paymentType }) => [\n                ...acc,\n                [classId || DEFAULT_KEY, paymentType.paymentType],\n              ],\n              []\n            )\n          : undefined\n      )\n    );\n\n    this.configRegistry = new BehaviorSubject(\n      new Map<string, OmniPaymentConfigItem>(\n        configs\n          ? configs.reduce(\n              (acc: any[], config: OmniPaymentConfigItem) => [\n                ...acc,\n                [config.classId || DEFAULT_KEY, config],\n              ],\n              []\n            )\n          : undefined\n      )\n    );\n\n    if (registeredPaymentConfigs && registeredPaymentConfigs.length) {\n      registeredPaymentConfigs\n        .reduce((acc, val) => acc.concat(val), [])\n        .forEach((config: PaymentTypeConfig) =>\n          this.setPaymentConfigByType(config)\n        );\n    }\n  }\n\n  has(paymentType: string): boolean {\n    return this.paymentConfigRegistry.value.has(paymentType);\n  }\n\n  hasClassId(classId: string): boolean {\n    return this.classIdRegistry.value.has(classId);\n  }\n\n  getPaymentConfigByClassId(classId: string): PaymentTypeConfig | undefined {\n    const paymentConfigType = this.getBaseConfigByClassId(classId);\n    return paymentConfigType && paymentConfigType.paymentType;\n  }\n\n  getPaymentConfigByType(paymentType: string): PaymentTypeConfig | undefined {\n    return this.paymentConfigRegistry.value.get(paymentType);\n  }\n\n  mapPaymentType(item: PaymentTemplate | string): string | undefined {\n    const paymentType =\n      typeof item === 'string'\n        ? item\n        : (item as PaymentTemplate).details.paymentType;\n    const _paymentType = normalizePaymentType(paymentType);\n\n    return _paymentType\n      ? this.getPaymentConfigByType(_paymentType)?.name\n      : undefined;\n  }\n\n  getBaseConfigByClassId(classId: string): OmniPaymentConfigItem | undefined {\n    return (\n      this.configRegistry.value.get(classId) ||\n      this.configRegistry.value.get(DEFAULT_KEY)\n    );\n  }\n\n  setPaymentConfigByType(config: PaymentTypeConfig) {\n    const _value = this.paymentConfigRegistry.value;\n    _value.set(config.paymentType, config);\n    this.paymentConfigRegistry.next(_value);\n  }\n}\n"]}