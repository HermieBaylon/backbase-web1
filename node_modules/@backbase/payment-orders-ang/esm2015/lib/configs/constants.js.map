{"version":3,"file":"constants.js","sourceRoot":"","sources":["../../../../../../libs/payment-orders-ang/src/lib/configs/constants.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAY,MAAM,eAAe,CAAC;AACzD,OAAO,EAAE,QAAQ,EAAE,MAAM,2BAA2B,CAAC;AASrD,MAAM,CAAC,MAAM,aAAa,GAAG;IAC3B,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI;CACL,CAAC;AAEF,MAAM,CAAC,MAAM,iBAAiB,GAC5B,IAAI,cAAc,CAAC,mBAAmB,CAAC,CAAC;AAE1C;;GAEG;AACH,MAAM,CAAC,MAAM,uBAAuB,GAClC,IAAI,cAAc,CAAC,yBAAyB,CAAC,CAAC;AAEhD,gEAAgE;AAChE,MAAM,CAAC,MAAM,SAAS,GAAG,QAAQ,CAAC,GAAG,CACnC,CAAC,EAAE,IAAI,EAAE,EAAE,EAAgC,EAAE,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,CAC7E,CAAC;AAEF,MAAM,CAAC,MAAM,6BAA6B,GAAG,IAAI,cAAc,CAE7D,+BAA+B,CAAC,CAAC;AAEnC,MAAM,CAAC,MAAM,mCAAmC,GAC9C,IAAI,cAAc,CAAC,qCAAqC,CAAC,CAAC;AAE5D,MAAM,CAAC,MAAM,yBAAyB,GAA4B;IAChE,cAAc,EAAE;QACd,YAAY,EAAE,mBAAmB;QACjC,YAAY,EAAE,UAAU;KACzB;CACF,CAAC;AAEF,MAAM,CAAC,MAAM,+BAA+B,GAAe;IACzD;QACE,OAAO,EAAE,mCAAmC;QAC5C,QAAQ,EAAE,yBAAyB;KACpC;CACF,CAAC;AAEF,MAAM,CAAC,MAAM,+BAA+B,GAAG,WAAW,CAAC;AAC3D,MAAM,CAAC,MAAM,qCAAqC,GAAG,iBAAiB,CAAC;AAEvE,MAAM,CAAC,MAAM,+BAA+B,GAC1C,IAAI,cAAc,CAAC,8CAA8C,CAAC,CAAC;AACrE,MAAM,CAAC,MAAM,qCAAqC,GAChD,IAAI,cAAc,CAAC,oDAAoD,CAAC,CAAC;AAE3E,MAAM,CAAC,MAAM,sCAAsC,GACjD,IAAI,cAAc,CAAC,wCAAwC,CAAC,CAAC;AAE/D,MAAM,CAAN,IAAY,iBAGX;AAHD,WAAY,iBAAiB;IAC3B,iFAA4D,CAAA;IAC5D,iFAA4D,CAAA;AAC9D,CAAC,EAHW,iBAAiB,KAAjB,iBAAiB,QAG5B;AAED,MAAM,CAAC,MAAM,sBAAsB,GAAuB;IACxD,SAAS,EAAE;QACT;YACE,GAAG,EAAE,+BAA+B;YACpC,OAAO,EAAE,yBAAyB;SACnC;KACF;CACF,CAAC;AAEF,MAAM,CAAC,MAAM,iCAAiC,GAAe;IAC3D;QACE,OAAO,EAAE,sCAAsC;QAC/C,QAAQ,EAAE,sBAAsB;KACjC;CACF,CAAC;AAEF,MAAM,CAAC,MAAM,wBAAwB,GACnC,6CAA6C,CAAC;AAChD,MAAM,CAAC,MAAM,8BAA8B,GAAG,0BAA0B,CAAC;AACzE,MAAM,CAAC,MAAM,eAAe,GAAG,GAAG,CAAC","sourcesContent":["import { InjectionToken, Provider } from '@angular/core';\nimport { USStates } from '../ui/constants/constants';\nimport {\n  OmniPaymentConfigItem,\n  PaymentTypeConfig,\n  PayordOmniPaymentConfig,\n  PayordPaymentError,\n  ManualBatchesConfig,\n} from './models/form-items.model';\n\nexport const SepaCountries = [\n  'AD',\n  'AT',\n  'BE',\n  'BG',\n  'CH',\n  'CY',\n  'CZ',\n  'DE',\n  'DK',\n  'EE',\n  'ES',\n  'FI',\n  'FR',\n  'GB',\n  'GI',\n  'GR',\n  'HR',\n  'HU',\n  'IE',\n  'IS',\n  'IT',\n  'LI',\n  'LT',\n  'LU',\n  'LV',\n  'MC',\n  'MT',\n  'NL',\n  'NO',\n  'PL',\n  'PT',\n  'RO',\n  'SE',\n  'SI',\n  'SK',\n  'SM',\n  'VA',\n];\n\nexport const BB_PAYMENT_CONFIG: InjectionToken<OmniPaymentConfigItem> =\n  new InjectionToken('BB_PAYMENT_CONFIG');\n\n/**\n * @deprecated Will be removed in widget collection v3.11.0\n */\nexport const BB_MULTI_PAYMENT_CONFIG: InjectionToken<ManualBatchesConfig> =\n  new InjectionToken('BB_MULTI_PAYMENT_CONFIG');\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const US_States = USStates.map(\n  ({ name, id }: { name: string; id: string }) => ({ label: name, value: id })\n);\n\nexport const BB_REGISTERED_PAYMENT_CONFIGS = new InjectionToken<\n  PaymentTypeConfig[]\n>('BB_PAYMENT_REGISTERED_CONFIGS');\n\nexport const BB_PAYORD_OMNI_PAYMENT_CONFIG_TOKEN: InjectionToken<PayordOmniPaymentConfig> =\n  new InjectionToken('BB_PAYORD_OMNI_PAYMENT_CONFIG_TOKEN');\n\nexport const payordOmniPaymentDefaults: PayordOmniPaymentConfig = {\n  businessConfig: {\n    functionName: 'Payment Templates',\n    resourceName: 'Payments',\n  },\n};\n\nexport const PayordOmniPaymentConfigProvider: Provider[] = [\n  {\n    provide: BB_PAYORD_OMNI_PAYMENT_CONFIG_TOKEN,\n    useValue: payordOmniPaymentDefaults,\n  },\n];\n\nexport const DefaultClosedPaymentBusFnSuffix = ' - closed';\nexport const DefaultIntraCompanyPaymentBusFnSuffix = ' - Intracompany';\n\nexport const BB_CLOSED_PAYMENT_BUS_FN_SUFFIX: InjectionToken<string> =\n  new InjectionToken('Suffix for closed payment business functions');\nexport const BB_INTRACOMPANY_PAYMENT_BUS_FN_SUFFIX: InjectionToken<string> =\n  new InjectionToken('Suffix for intracompany payment business functions');\n\nexport const BB_PAYORD_PAYMENT_ERROR_MESSAGES_TOKEN: InjectionToken<PayordPaymentError> =\n  new InjectionToken('BB_PAYORD_PAYMENT_ERROR_MESSAGES_TOKEN');\n\nexport enum P2PLimitErrorKeys {\n  minLimit = 'p2p.payveris.limit_violation.min_payment_amount',\n  maxLimit = 'p2p.payveris.limit_violation.max_payment_amount',\n}\n\nexport const payordMessagesDefaults: PayordPaymentError = {\n  errorData: [\n    {\n      key: 'arrangements.api.invalid.iban',\n      message: 'Entered IBAN is invalid',\n    },\n  ],\n};\n\nexport const PayordPaymentErrorsConfigProvider: Provider[] = [\n  {\n    provide: BB_PAYORD_PAYMENT_ERROR_MESSAGES_TOKEN,\n    useValue: payordMessagesDefaults,\n  },\n];\n\nexport const bicCodeValidationPattern =\n  '^[A-Z]{6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3})?$';\nexport const defaultPaymentSuccessEventName = 'bb.payment.success.event';\nexport const forbiddenStatus = 403;\n"]}