import { InjectionToken } from '@angular/core';
import { USStates } from '../ui/constants/constants';
export const SepaCountries = [
    'AD',
    'AT',
    'BE',
    'BG',
    'CH',
    'CY',
    'CZ',
    'DE',
    'DK',
    'EE',
    'ES',
    'FI',
    'FR',
    'GB',
    'GI',
    'GR',
    'HR',
    'HU',
    'IE',
    'IS',
    'IT',
    'LI',
    'LT',
    'LU',
    'LV',
    'MC',
    'MT',
    'NL',
    'NO',
    'PL',
    'PT',
    'RO',
    'SE',
    'SI',
    'SK',
    'SM',
    'VA',
];
export const BB_PAYMENT_CONFIG = new InjectionToken('BB_PAYMENT_CONFIG');
/**
 * @deprecated Will be removed in widget collection v3.11.0
 */
export const BB_MULTI_PAYMENT_CONFIG = new InjectionToken('BB_MULTI_PAYMENT_CONFIG');
// eslint-disable-next-line @typescript-eslint/naming-convention
export const US_States = USStates.map(({ name, id }) => ({ label: name, value: id }));
export const BB_REGISTERED_PAYMENT_CONFIGS = new InjectionToken('BB_PAYMENT_REGISTERED_CONFIGS');
export const BB_PAYORD_OMNI_PAYMENT_CONFIG_TOKEN = new InjectionToken('BB_PAYORD_OMNI_PAYMENT_CONFIG_TOKEN');
export const payordOmniPaymentDefaults = {
    businessConfig: {
        functionName: 'Payment Templates',
        resourceName: 'Payments',
    },
};
export const PayordOmniPaymentConfigProvider = [
    {
        provide: BB_PAYORD_OMNI_PAYMENT_CONFIG_TOKEN,
        useValue: payordOmniPaymentDefaults,
    },
];
export const DefaultClosedPaymentBusFnSuffix = ' - closed';
export const DefaultIntraCompanyPaymentBusFnSuffix = ' - Intracompany';
export const BB_CLOSED_PAYMENT_BUS_FN_SUFFIX = new InjectionToken('Suffix for closed payment business functions');
export const BB_INTRACOMPANY_PAYMENT_BUS_FN_SUFFIX = new InjectionToken('Suffix for intracompany payment business functions');
export const BB_PAYORD_PAYMENT_ERROR_MESSAGES_TOKEN = new InjectionToken('BB_PAYORD_PAYMENT_ERROR_MESSAGES_TOKEN');
export var P2PLimitErrorKeys;
(function (P2PLimitErrorKeys) {
    P2PLimitErrorKeys["minLimit"] = "p2p.payveris.limit_violation.min_payment_amount";
    P2PLimitErrorKeys["maxLimit"] = "p2p.payveris.limit_violation.max_payment_amount";
})(P2PLimitErrorKeys || (P2PLimitErrorKeys = {}));
export const payordMessagesDefaults = {
    errorData: [
        {
            key: 'arrangements.api.invalid.iban',
            message: 'Entered IBAN is invalid',
        },
    ],
};
export const PayordPaymentErrorsConfigProvider = [
    {
        provide: BB_PAYORD_PAYMENT_ERROR_MESSAGES_TOKEN,
        useValue: payordMessagesDefaults,
    },
];
export const bicCodeValidationPattern = '^[A-Z]{6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3})?$';
export const defaultPaymentSuccessEventName = 'bb.payment.success.event';
export const forbiddenStatus = 403;
//# sourceMappingURL=constants.js.map