import { isValidIBANFormControl } from '@backbase/ui-ang/iban-lib';
import { CounterPartyFields, HiddenFields, PaymentBaseFields, } from '../models/form-item-names.model';
import { stripSpaces } from '../../ui/helpers/type-helpers';
export function ibanCountryValidator(countries = []) {
    return (control) => {
        var _a, _b;
        const parentForm = (_a = control.parent) === null || _a === void 0 ? void 0 : _a.parent;
        const sanctionedCountries = countries.length
            ? countries
            : (_b = parentForm === null || parentForm === void 0 ? void 0 : parentForm.get(HiddenFields.sanctionedCountries)) === null || _b === void 0 ? void 0 : _b.value;
        const countryControl = parentForm === null || parentForm === void 0 ? void 0 : parentForm.get([
            PaymentBaseFields.counterparty,
            CounterPartyFields.creditorBank,
            CounterPartyFields.postalAddress,
            CounterPartyFields.country,
        ]);
        if (!(sanctionedCountries === null || sanctionedCountries === void 0 ? void 0 : sanctionedCountries.length))
            return isValidIBANFormControl;
        const isInvalidIban = isValidIBANFormControl(control);
        if (isInvalidIban) {
            return { invalidIban: { value: control.value } };
        }
        else {
            const regexStr = (countryControl === null || countryControl === void 0 ? void 0 : countryControl.value) || sanctionedCountries.join('|');
            const regex = new RegExp(`^(${regexStr})\\w+`, 'i');
            return regex.test(stripSpaces(control.value))
                ? null
                : { invalidIbanCountry: { value: control.value } };
        }
    };
}
//# sourceMappingURL=form-validation.js.map