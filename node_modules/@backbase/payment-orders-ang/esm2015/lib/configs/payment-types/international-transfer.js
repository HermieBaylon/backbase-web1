import '@angular/localize/init';
import { Validators } from '@angular/forms';
import { PaymentComponents, } from '../models/form-items.model';
import { CounterPartyFields, InitiatorFields, PaymentBaseFields, RemittanceInfoFields, PaymentOptionFields, } from '../models/form-item-names.model';
import { defaultScheduleConfig as schedule } from './default-config';
import { BeneficiaryList } from '../../ui/constants';
import { bicCodeValidationPattern } from '../constants';
const countriesList = [
    {
        label: $localize `:@@international-config.us-country-label:United States`,
        value: 'US',
    },
    {
        label: $localize `:@@international-config.au-country-label:Australia`,
        value: 'AU',
    },
    {
        label: $localize `:@@international-config.ca-country-label:Canada`,
        value: 'CA',
    },
    {
        label: $localize `:@@international-config.ie-country-label:Ireland`,
        value: 'IE',
    },
    {
        label: $localize `:@@international-config.nl-country-label:Netherlands`,
        value: 'NL',
    },
    {
        label: $localize `:@@international-config.nz-country-label:New Zealand`,
        value: 'NZ',
    },
    {
        label: $localize `:@@international-config.gb-country-label:United Kingdom`,
        value: 'GB',
    },
];
const initiator = {
    name: PaymentBaseFields.initiator,
    title: $localize `:@@international-config.initiator-label:From account`,
    fields: [
        {
            type: PaymentComponents.debitAccountSelector,
            name: InitiatorFields.initiatorAccountGroup,
            options: {
                placeholder: 'Select an account',
                cssClasses: ['col-12', 'mb-0'],
                validationMessages: [
                    {
                        message: $localize `:@@international-config.account-missing-error-message:Debit account is invalid`,
                        name: 'missingInList',
                    },
                    {
                        message: $localize `:@@international-config.closed-permission-error-message:You can not do payments to new beneficiary from this account.`,
                        name: 'hasOnlyClosedPaymentPermission',
                    },
                ],
            },
        },
    ],
};
const toggleBankID = (value, control) => {
    const parentGroup = control && control.parent ? control.parent : null;
    const enableAdditionalBankDetails = parentGroup && parentGroup.get('enableAdditionalBankDetails');
    switch (value) {
        case 'BIC':
            return enableAdditionalBankDetails && enableAdditionalBankDetails.value
                ? [CounterPartyFields.bic]
                : [];
        case 'BRANCH_CODE':
            return [CounterPartyFields.bankBranchCode];
    }
    return [];
};
const counterParty = {
    name: PaymentBaseFields.counterparty,
    fields: [
        {
            name: PaymentComponents.beneficiaryGroupHeader,
            type: PaymentComponents.beneficiaryGroupHeader,
            options: {
                label: $localize `:@@international-config.beneficiary.header-label:Transfer to`,
                hasDynamicTitle: true,
            },
        },
        {
            name: CounterPartyFields.name,
            type: PaymentComponents.beneficiarySelector,
            options: {
                label: $localize `:@@international-config.beneficiary-selector-label:Beneficiary name`,
                placeholder: $localize `:@@international-config.beneficiary-selector-placeholder:Select a beneficiary`,
                cssClasses: ['col-12', 'mb-0'],
                saveNewContactLabel: 'Save as a new contact',
                validationMessages: [
                    {
                        message: $localize `:@@international-config.new-contact-label:Beneficiary is same as selected Debit account`,
                        name: 'sameDebitCreditAccountsSelected',
                    },
                ],
                dependants: [
                    CounterPartyFields.bic,
                    CounterPartyFields.country,
                    CounterPartyFields.creditorBank,
                    CounterPartyFields.accountNumber,
                    CounterPartyFields.postalAddress,
                    CounterPartyFields.bankBranchCode,
                    CounterPartyFields.intermediaryBank,
                    CounterPartyFields.correspondentBank,
                ],
                tabs: [BeneficiaryList.CONTACTS],
            },
        },
        {
            name: CounterPartyFields.creditorBank,
            fields: [
                {
                    name: CounterPartyFields.postalAddress,
                    fields: [
                        {
                            name: CounterPartyFields.country,
                            type: PaymentComponents.sanctionedCountrySelector,
                            options: {
                                label: $localize `:@@international-config.sanctioned-country-label:Country`,
                                placeholder: '- select country -',
                                cssClasses: [
                                    'd-inline-block',
                                    'col-md-6',
                                    'align-top',
                                    'pr-md-3',
                                ],
                                validators: [Validators.required],
                            },
                        },
                    ],
                },
            ],
        },
        {
            name: CounterPartyFields.accountNumber,
            type: PaymentComponents.text,
            options: {
                validators: [Validators.required],
                label: $localize `:@@international-config.beneficiary.account-number-label:Account number or IBAN`,
                maxLength: 36,
                cssClasses: ['d-inline-block', 'col-md-6', 'align-top', 'pr-md-3'],
                validationMessages: [
                    {
                        message: $localize `:@@international-config.iban-country-error-message:Invalid IBAN`,
                        name: 'invalidIbanCountry',
                    },
                ],
            },
        },
        {
            name: CounterPartyFields.creditorBank,
            fields: [
                {
                    name: CounterPartyFields.bankBranchCode,
                    type: PaymentComponents.text,
                    options: {
                        validators: [Validators.required],
                        label: $localize `:@@international-config.bank-code-label:Bank code`,
                        maxLength: 20,
                        mapToField: `${PaymentBaseFields.counterparty}.${CounterPartyFields.creditorBank}`,
                        cssClasses: ['d-inline-block', 'col-md-6', 'align-top', 'pr-md-3'],
                    },
                },
            ],
        },
        {
            name: CounterPartyFields.postalAddress,
            type: PaymentComponents.address,
            options: {
                addressType: 'beneficiary',
                countries: countriesList,
                useSanctionedCountries: true,
                cssClasses: ['col-12'],
            },
        },
        {
            name: CounterPartyFields.creditorBank,
            fields: [
                {
                    name: CounterPartyFields.bic,
                    type: PaymentComponents.text,
                    options: {
                        validators: [
                            Validators.required,
                            Validators.pattern(bicCodeValidationPattern),
                        ],
                        label: $localize `:@@international-config.creditor-bank-bic-label:SWIFT/BIC`,
                        cssClasses: ['d-inline-block', 'col-md-6', 'align-top', 'pr-md-3'],
                    },
                },
                {
                    name: CounterPartyFields.bankName,
                    type: PaymentComponents.text,
                    options: {
                        label: $localize `:@@international-config.creditor-bank-name-label:Bank name`,
                        helperText: $localize `:@@international-config.bank-name-helper-text: (optional)`,
                        maxLength: 140,
                        cssClasses: ['d-inline-block', 'col-md-6', 'align-top', 'pr-md-3'],
                    },
                },
                {
                    name: CounterPartyFields.postalAddress,
                    type: PaymentComponents.address,
                    options: {
                        addressType: 'beneficiary bank',
                        countries: countriesList,
                        cssClasses: ['col-12'],
                        hideCountry: true,
                    },
                },
            ],
        },
        {
            name: CounterPartyFields.correspondentBank,
            cssClasses: ['card--highlight', 'p-3', 'm-3', 'rounded'],
            fields: [
                {
                    name: CounterPartyFields.enableAdditionalBankDetails,
                    type: PaymentComponents.switch,
                    options: {
                        label: $localize `:@@international-config.correspondent-bank-label:Transfer through correspondent bank`,
                        cssClasses: ['col-12', 'mb-0'],
                        labelPosition: 'right',
                        dependants: [
                            'selectAdditionalBankCodeType',
                            CounterPartyFields.bic,
                            CounterPartyFields.bankName,
                            CounterPartyFields.postalAddress,
                        ],
                        activateDependantsOn: true,
                    },
                },
                {
                    name: 'selectAdditionalBankCodeType',
                    type: PaymentComponents.radio,
                    options: {
                        label: $localize `:@@international-config.additional-correspondent-bank-code-label:Bank ID type`,
                        isConditionalMandatory: true,
                        cssClasses: ['col-12', 'mb-0', 'mt-3'],
                        horizontal: true,
                        options: [
                            {
                                label: $localize `:@@international-config.additional-correspondent-bank-swift-label:SWIFT/BIC`,
                                value: 'BIC',
                            },
                            {
                                label: $localize `:@@international-config.additional-correspondent-bank-sort-code-label:Sort code`,
                                value: 'BRANCH_CODE',
                            },
                        ],
                        defaultValue: 'BIC',
                        dependants: [
                            CounterPartyFields.bic,
                            CounterPartyFields.bankBranchCode,
                        ],
                        activateDependantsOn: toggleBankID,
                    },
                },
                {
                    name: CounterPartyFields.bic,
                    type: PaymentComponents.text,
                    options: {
                        isConditionalMandatory: true,
                        validators: [Validators.pattern(bicCodeValidationPattern)],
                        label: $localize `:@@international-config.correspondent-bank-bic-label:SWIFT/BIC`,
                        cssClasses: ['d-inline-block', 'col-md-6', 'align-top'],
                    },
                },
                {
                    name: CounterPartyFields.bankBranchCode,
                    type: PaymentComponents.text,
                    options: {
                        isConditionalMandatory: true,
                        label: $localize `:@@international-config.correspondent-bank-sort-code-label:Sort code`,
                        maxLength: 20,
                        cssClasses: ['d-inline-block', 'col-md-6', 'align-top'],
                    },
                },
                {
                    name: CounterPartyFields.bankName,
                    type: PaymentComponents.text,
                    options: {
                        label: $localize `:@@international-config.correspondent-bank-name:Bank name`,
                        maxLength: 140,
                        helperText: $localize `:@@international-config.correspondent-bank-name-helper-text: (optional)`,
                        cssClasses: ['d-inline-block', 'col-md-6', 'align-top'],
                    },
                },
                {
                    name: CounterPartyFields.postalAddress,
                    type: PaymentComponents.address,
                    options: {
                        addressType: 'correspondent bank',
                        useSanctionedCountries: true,
                        countries: countriesList,
                        cssClasses: ['mb-0'],
                    },
                },
            ],
        },
        {
            name: CounterPartyFields.intermediaryBank,
            cssClasses: ['card--highlight', 'p-3', 'm-3', 'rounded'],
            fields: [
                {
                    name: CounterPartyFields.enableAdditionalBankDetails,
                    type: PaymentComponents.switch,
                    options: {
                        label: $localize `:@@international-config.intermediary-bank-label:Transfer through intermediary bank`,
                        cssClasses: ['col-12', 'mb-0'],
                        labelPosition: 'right',
                        dependants: [
                            'selectAdditionalBankCodeType',
                            CounterPartyFields.bic,
                            CounterPartyFields.bankName,
                            CounterPartyFields.postalAddress,
                        ],
                        activateDependantsOn: true,
                    },
                },
                {
                    name: 'selectAdditionalBankCodeType',
                    type: PaymentComponents.radio,
                    options: {
                        label: $localize `:@@international-config.additional-intermediary-bank-code-label:Bank ID type`,
                        isConditionalMandatory: true,
                        cssClasses: ['col-12', 'mb-0', 'mt-3'],
                        horizontal: true,
                        options: [
                            {
                                label: $localize `:@@international-config.additional-intermediary-bank-swift-label:SWIFT/BIC`,
                                value: 'BIC',
                            },
                            {
                                label: $localize `:@@international-config.additional-intermediary-bank-sort-code-label:Sort code`,
                                value: 'BRANCH_CODE',
                            },
                        ],
                        defaultValue: 'BIC',
                        dependants: [
                            CounterPartyFields.bic,
                            CounterPartyFields.bankBranchCode,
                        ],
                        activateDependantsOn: toggleBankID,
                    },
                },
                {
                    name: CounterPartyFields.bic,
                    type: PaymentComponents.text,
                    options: {
                        isConditionalMandatory: true,
                        validators: [Validators.pattern(bicCodeValidationPattern)],
                        label: $localize `:@@international-config.intermediary-bank-bic-label:SWIFT/BIC`,
                        cssClasses: ['d-inline-block', 'col-md-6', 'align-top'],
                    },
                },
                {
                    name: CounterPartyFields.bankBranchCode,
                    type: PaymentComponents.text,
                    options: {
                        isConditionalMandatory: true,
                        label: $localize `:@@international-config.intermediary-bank-sort-code-label:Sort code`,
                        maxLength: 20,
                        cssClasses: ['d-inline-block', 'col-md-6', 'align-top'],
                    },
                },
                {
                    name: CounterPartyFields.bankName,
                    type: PaymentComponents.text,
                    options: {
                        label: $localize `:@@international-config.intermediary-bank-name:Bank name`,
                        maxLength: 140,
                        helperText: $localize `:@@international-config.intermediary-bank-name-helper-text: (optional)`,
                        cssClasses: ['d-inline-block', 'col-md-6', 'align-top'],
                    },
                },
                {
                    name: CounterPartyFields.postalAddress,
                    type: PaymentComponents.address,
                    options: {
                        addressType: 'intermediary bank',
                        useSanctionedCountries: true,
                        countries: countriesList,
                        cssClasses: ['mb-0'],
                    },
                },
            ],
        },
    ],
};
const remittanceInfo = {
    name: PaymentBaseFields.remittanceInfo,
    title: $localize `:@@international-config.remittance-info-title:Payment details`,
    fields: [
        {
            type: PaymentComponents.sanctionedCurrencyAmount,
            name: RemittanceInfoFields.amountCurrencyGroup,
            options: {
                label: $localize `:@@international-config.amount-label:Amount`,
                cssClasses: ['col-12'],
                validationMessages: [
                    {
                        message: $localize `:@@international-config.invalid-amount-message:Enter amount`,
                        name: 'invalidAmount',
                    },
                    {
                        message: $localize `:@@international-config.invalid-currency-message:Selected country does not allow payments in this currency`,
                        name: 'invalidCurrency',
                    },
                ],
            },
        },
    ],
};
const additionalMessage = {
    name: 'additionalMessage',
    title: $localize `:@@international-config.information-title:Payment information`,
    fields: [
        {
            name: CounterPartyFields.remittanceInformation,
            type: PaymentComponents.textarea,
            options: {
                label: $localize `:@@international-config.remittance-info-label:Message to beneficiary`,
                placeholder: $localize `:@@international-config.remittance-info-placeholder:Type your message here`,
                showCharCounter: true,
                collapseOptions: {
                    label: $localize `:@@international-config.collapsed.remittance-info-label:Add message to beneficiary`,
                },
                minLength: 0,
                rows: 3,
                maxLength: 140,
                cols: 50,
                cssClasses: ['d-block', 'col-md-8'],
                mapToField: PaymentBaseFields.counterparty,
            },
        },
        {
            name: RemittanceInfoFields.purposeOfPayment,
            type: PaymentComponents.purposeOfPayment,
            options: {
                label: $localize `:@@international-config.purpose-payment-label:Purpose of payment`,
                helperText: $localize `:@@international-config.purpose-payment-helper-text: (optional)`,
                showCharCounter: true,
                collapseOptions: {
                    label: $localize `:@@international-config.purpose-collapsed-label:Add purpose of payment`,
                },
                maxLength: 35,
                cssClasses: ['d-block', 'col-md-8'],
                mapToField: PaymentBaseFields.remittanceInfo,
            },
        },
    ],
};
const paymentOptions = [
    {
        name: PaymentOptionFields.selectPaymentOption,
        type: PaymentComponents.selectPaymentOption,
        options: {
            skipDefaultValue: true,
        },
    },
    {
        name: PaymentOptionFields.chargeBearer,
        type: PaymentComponents.chargeBearer,
        options: {
            label: $localize `:@@international-config.charge-bearer-label:How fees are paid`,
        },
    },
    {
        name: PaymentOptionFields.paymentCost,
        type: PaymentComponents.paymentCost,
        options: {},
    },
];
export const INTERNATIONAL_TRANSFER = {
    fields: [
        initiator,
        remittanceInfo,
        counterParty,
        additionalMessage,
        schedule,
        ...paymentOptions,
    ],
    name: $localize `:@@international-config.name:International Transfer`,
    businessFunction: 'US Foreign Wire',
    paymentType: 'INTERNATIONAL_TRANSFER',
};
//# sourceMappingURL=international-transfer.js.map