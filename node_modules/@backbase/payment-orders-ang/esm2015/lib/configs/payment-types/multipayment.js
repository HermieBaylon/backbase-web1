import { PaymentComponents, ProductKinds, } from '../models/form-items.model';
import { PaymentBaseFields, InitiatorFields, StepperAction, } from '../models/form-item-names.model';
import { Validators } from '@angular/forms';
import { accountsValidation, amountGreaterThanZero, minimumOneAccount, noWhitespaceValidator, pastDateValidator, } from '../../ui/helpers/form-validation';
const batchInfo = {
    name: 'batchInfo',
    title: 'Internal transfers',
    subTitle: 'Add the main batch information',
    fields: [
        {
            type: PaymentComponents.text,
            name: 'name',
            options: {
                validators: [Validators.required, noWhitespaceValidator],
                validationMessages: [
                    { message: 'Batch name is required', name: 'required' },
                ],
                label: 'Batch name',
                showCharCounter: true,
                maxLength: 25,
                cssClasses: ['w-50'],
            },
        },
        {
            type: PaymentComponents.date,
            name: 'requestedExecutionDate',
            options: {
                validators: [pastDateValidator, Validators.required],
                validationMessages: [
                    { message: 'Execution date cannot be in past', name: 'pastDate' },
                ],
                label: 'Execution date',
                cssClasses: ['w-50'],
            },
        },
    ],
    stepName: 'batchInfo',
};
const creditDebitSelection = {
    name: 'creditDebitSelection',
    fields: [
        {
            type: PaymentComponents.creditDebitSelector,
            name: 'creditDebitIndicator',
            options: {
                label: 'Internal transfers',
                choices: [
                    {
                        type: 'CREDIT',
                        name: 'Send',
                        description: 'Send funds to multiple own accounts',
                    },
                    // { type: 'DEBIT', name: 'Receive', description: 'Receive funds from multiple own accounts' },
                ],
            },
        },
    ],
    stepName: 'transferDetails',
};
const initiator = {
    name: PaymentBaseFields.initiator,
    cssClasses: ['bb-block', 'bb-block--xl'],
    fields: [
        {
            type: PaymentComponents.multiPaymentAccountSelector,
            name: InitiatorFields.initiatorAccountGroup,
            options: {
                label: 'From',
                placeholder: 'Select an account',
                validators: [Validators.required],
                validationMessages: [
                    { message: 'Account is required', name: 'required' },
                ],
                arrangements: {
                    privilege: 'create',
                    ignoredProductKindNames: [
                        ProductKinds.creditCard,
                        ProductKinds.debitCard,
                    ],
                },
                cssClasses: ['w-75'],
                filterItems: false,
                required: true,
                showBankBranchCode: true,
            },
        },
    ],
    stepName: 'transferDetails',
    separator: {
        icon: { name: 'arrow-downward', color: 'dark' },
    },
};
const verifyOnBlur = (form) => { };
const payments = {
    name: PaymentBaseFields.counterparty,
    cssClasses: ['bb-block', 'bb-block--xl'],
    fields: [
        {
            type: PaymentComponents.multiPaymentCard,
            name: InitiatorFields.initiatorAccountGroup,
            options: {
                label: 'To',
                helperText: 'You can add up to %s transfers',
                validators: [minimumOneAccount],
                maximumNumberOfPayments: 100,
                validationMessages: [
                    { message: 'Minimum one transfer is required', name: 'empty' },
                ],
                arrangements: {
                    privilege: 'view',
                    ignoredProductKindNames: [
                        ProductKinds.creditCard,
                        ProductKinds.debitCard,
                        ProductKinds.loanAccount,
                    ],
                },
                fieldsConfig: {
                    counterpartyName: {
                        header: 'Own account',
                        validators: [
                            Validators.required,
                            accountsValidation(PaymentBaseFields.initiator),
                        ],
                        placeholder: 'Enter or select account',
                        dropdownIcon: '',
                        ariaLabel: '',
                        validationMessages: [
                            { message: 'Account is required', name: 'required' },
                            { message: 'Account is same as from', name: 'sameAccount' },
                        ],
                    },
                    amount: {
                        validators: [
                            Validators.required,
                            amountGreaterThanZero,
                        ],
                        placeholder: '0.00',
                        ariaLabel: '',
                        currency: 'USD',
                        maxLength: 10,
                        validationMessages: [
                            { message: 'Amount is required', name: 'required' },
                            { message: 'Amount is required', name: 'invalidAmount' },
                        ],
                    },
                    description: {
                        validators: [],
                        placeholder: 'Enter Description',
                        label: 'Add Description',
                        helperText: 'Optional',
                        title: 'Description',
                    },
                },
                hooks: {
                    onBlur: verifyOnBlur,
                },
            },
        },
    ],
    stepName: 'transferDetails',
};
/**
 * @deprecated Use `INTRACOMPANY_PAYMENT_CREDIT_USA` from `@backbase/batch-common-ang`.
 * Will be removed in widget collection v.3.11.0
 */
export const BATCH_INTERNAL_TRANSFERS = {
    fields: [batchInfo, creditDebitSelection, initiator, payments],
    name: 'Internal transfers',
    description: 'Send funds to multiple own accounts',
    paymentType: 'INTRACOMPANY_PAYMENT_CREDIT_USA',
    resourceName: 'Batch',
    businessFunction: 'Batch - Intracompany Payments',
    customFields: {},
    options: {},
};
export const STEPPER_CONFIG = [
    {
        stepName: 'batchInfo',
        stepDisplayValue: 'Batch info',
        cssClasses: ['card', 'card-body'],
        isActive: true,
        isChecked: false,
        buttonClass: [],
        buttonConfig: [
            {
                type: 'primary',
                text: 'Next: Transfer details',
                action: StepperAction.NEXT,
                hooks: {
                    onClick: onClickEvent,
                },
            },
        ],
    },
    {
        stepName: 'transferDetails',
        stepDisplayValue: 'Transfer details',
        isActive: false,
        isChecked: false,
        cssClasses: ['pb-5', 'mb-5'],
        buttonClass: ['py-4', 'fixed-bottom', 'bb-button-bar--sticky', 'px-sm-3'],
        footerDetail: { totalAmount: true, totalCount: true },
        buttonConfig: [
            {
                type: 'secondary',
                text: 'Back',
                action: StepperAction.BACK,
            },
            {
                type: 'primary',
                text: 'Next: Review',
                action: StepperAction.NEXT,
            },
        ],
    },
    {
        stepName: 'review',
        stepDisplayValue: 'Review',
        cssClasses: ['card', 'card-body', 'bb-block', 'bb-block--lg'],
        isActive: false,
        isChecked: false,
        buttonClass: [],
        buttonConfig: [
            {
                type: 'secondary',
                text: 'Edit',
                action: StepperAction.BACK,
            },
            {
                type: 'primary',
                text: 'Submit',
                action: StepperAction.SUBMIT,
            },
        ],
    },
];
export function onClickEvent({ doneFn, stepperConfig, action, }) {
    if (doneFn) {
        doneFn(stepperConfig, action);
    }
}
/**
 * @deprecated Use `MANUAL_BATCH` from `@backbase/batch-common-ang`.
 * Will be removed in widget collection v.3.11.0
 */
export const MULTIPLE_PAYMENT = {
    availableTypes: [BATCH_INTERNAL_TRANSFERS],
    enableTypeSelection: ['batchInfo'],
    steps: STEPPER_CONFIG,
    options: {
        successEventName: 'bb.event.batch.create.success',
        createTemplates: true,
    },
};
//# sourceMappingURL=multipayment.js.map