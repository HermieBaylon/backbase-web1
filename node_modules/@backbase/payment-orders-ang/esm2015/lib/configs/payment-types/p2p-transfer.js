import '@angular/localize/init';
import { PaymentComponents, ContactScheme, } from '../models/form-items.model';
import { PaymentBaseFields, InitiatorFields, RemittanceInfoFields, ScheduleFields, CounterPartyFields, } from '../models/form-item-names.model';
import { Frequencies, ScheduleEndType } from '../../ui/constants/constants';
import { scheduleFrequencyToggleDependants, scheduleStartDateOnDestroyHook, scheduleEndTypeToggleDependants, scheduleEndDateOnInitHook, internalTransferOnDestroyHook, internalTransferScheduleAlertOnInitHook, internalTransScheduleStartDateOnInitHook, intrabankCheckboxOnInitHook, } from '../helpers/schedule-config-helpers';
import { endDateAfterStartDateValidator, minValueTwoValidator, maxValueTwoHundredValidator, pastDateValidator, } from '../../ui/helpers/form-validation';
import { Validators } from '@angular/forms';
import { P2PLimitErrorKeys } from '../constants';
const emailRegex = /(^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$)$/;
const phoneNumberRegex = /(^(?:\+?1[-. ]?)?\(?([0-9]{3})\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$)$/;
const initiator = {
    name: PaymentBaseFields.initiator,
    fields: [
        {
            type: PaymentComponents.header,
            name: PaymentComponents.header,
            options: {
                cssClasses: ['px-3', 'mb-3'],
                heading: $localize `:@@p2p-config.initiator-label:From`,
                headingType: 'h3',
            },
        },
        {
            type: PaymentComponents.internalAccountSelector,
            name: InitiatorFields.initiatorAccountGroup,
            options: {
                placeholder: $localize `:@@p2p-config.initiator-placeholder:Select an account`,
                cssClasses: ['col-12', 'bb-block', 'bb-block--xl'],
                preselect: true,
            },
        },
    ],
};
const counterParty = {
    name: PaymentBaseFields.counterparty,
    fields: [
        {
            type: PaymentComponents.header,
            name: PaymentComponents.header,
            options: {
                cssClasses: ['px-3', 'mb-3'],
                heading: $localize `:@@p2p-config.beneficiary-label:To`,
                headingType: 'h3',
            },
        },
        {
            name: CounterPartyFields.name,
            type: PaymentComponents.contactSelector,
            options: {
                label: $localize `:@@p2p-config.beneficiary-contact-label:Name`,
                placeholder: $localize `:@@p2p-config.beneficiary-contact-description:Select contact or enter new`,
                cssClasses: ['col-md-6'],
                validators: [Validators.required],
                mapItems: (contacts) => contacts.filter(({ accounts }) => { var _a, _b; return ((_a = accounts[0]) === null || _a === void 0 ? void 0 : _a.email) || ((_b = accounts[0]) === null || _b === void 0 ? void 0 : _b.phoneNumber); }),
                contactSchemes: [
                    { name: ContactScheme.email, regex: emailRegex },
                    { name: ContactScheme.phoneNumber, regex: phoneNumberRegex },
                ],
                validationMessages: [
                    {
                        message: $localize `:@@p2p-config.beneficiary-invalid-name-message:Enter a valid name`,
                        name: 'pattern',
                    },
                    {
                        name: 'required',
                        message: $localize `:@@p2p-config.beneficiary-required-name-message:Please select a contact or enter a new one manually`,
                    },
                ],
            },
        },
        {
            name: CounterPartyFields.accountNumber,
            type: PaymentComponents.text,
            options: {
                validators: [
                    Validators.required,
                    Validators.pattern(new RegExp(phoneNumberRegex.source + '|' + emailRegex.source)),
                ],
                label: $localize `:@@p2p-config.beneficiary-account-number-label:Mobile Number or Email Address`,
                cssClasses: ['col-md-6', 'bb-block', 'bb-block--md'],
                validationMessages: [
                    {
                        name: 'required',
                        message: $localize `:@@p2p-config.beneficiary-account-number-required-message:Please enter a valid mobile number or email address`,
                    },
                ],
            },
        },
        {
            name: CounterPartyFields.saveNewContact,
            type: PaymentComponents.checkbox,
            options: {
                cssClasses: ['col-md-6', 'bb-block', 'bb-block--lg'],
                label: $localize `:@@p2p-config.new-contact-label:Save to contacts`,
            },
            hooks: {
                onInit: intrabankCheckboxOnInitHook,
            },
        },
    ],
};
const remittanceInfo = {
    name: PaymentBaseFields.remittanceInfo,
    fields: [
        {
            type: PaymentComponents.header,
            name: PaymentComponents.header,
            options: {
                cssClasses: ['col-12', 'pb-0', 'pt-2', 'bb-fieldset__heading'],
                heading: $localize `:@@p2p-config.remittance-info-heading:Payment details`,
                headingType: 'h2',
                headingClasses: ['mb-0'],
                separatorLine: true,
            },
        },
        {
            type: PaymentComponents.compactAmount,
            name: RemittanceInfoFields.amountCurrencyGroup,
            options: {
                label: $localize `:@@p2p-config.amount-label:Amount`,
                cssClasses: [
                    'bb-amount-input__field--large',
                    'bb-block',
                    'bb-block--lg',
                    'col-md-6',
                ],
                currency: 'USD',
                autoDecimal: true,
                keepValueOnHidden: true,
                validationMessages: [
                    {
                        name: 'invalidAmount',
                        message: $localize `:@@p2p-config.invalid-amount-message:Please add amount of this transfer`,
                    },
                    {
                        name: P2PLimitErrorKeys.minLimit,
                        message: $localize `:@@p2p-config.amount-limit-min:The amount can't be lower than #amount#. Please enter a higher amount.`,
                    },
                    {
                        name: P2PLimitErrorKeys.maxLimit,
                        message: $localize `:@@p2p-config.amount-limit-max:The amount can't exceed #amount#. Please enter a lower amount.`,
                    },
                ],
            },
        },
        {
            type: PaymentComponents.textarea,
            name: RemittanceInfoFields.description,
            options: {
                label: $localize `:@@p2p-config.add-memo-label:Add memo`,
                placeholder: $localize `:@@p2p-config.add-memo-placeholder:Enter memo`,
                showCharCounter: true,
                minLength: 0,
                rows: 2,
                maxLength: 140,
                helperText: $localize `:@@p2p-config.add-memo-helper-text: (Optional)`,
                cssClasses: ['col-md-6', 'bb-block', 'bb-block--lg'],
            },
        },
    ],
};
const schedule = {
    name: PaymentBaseFields.schedule,
    fields: [
        {
            type: PaymentComponents.scheduleHeader,
            name: PaymentComponents.scheduleHeader,
            options: {
                cssClasses: ['pb-0', 'bb-schedule-header__relative-text'],
                label: $localize `:@@p2p-config.schedule-label:Schedule`,
            },
        },
        {
            type: PaymentComponents.alert,
            name: PaymentComponents.alert,
            hidden: true,
            options: {
                cssClasses: ['col-md-12'],
                alerts: {
                    undue: {
                        title: $localize `:@@p2p-config.undue-alert-label:A payment executed after the due date will incur a  late fee.`,
                        description: $localize `:@@p2p-config.undue-alert-description:The due date is @@date. A payment made before may improve your credit score.`,
                        modifier: 'info',
                    },
                    overdue: {
                        title: $localize `:@@p2p-config.overdue-alert-label:The due date has passed. This payment will incur a late fee.`,
                        description: $localize `:@@p2p-config.overdue-alert-description:The due date was @@date. Late payments will decrease your credit score.`,
                        modifier: 'warning',
                    },
                },
            },
            hooks: {
                onInit: internalTransferScheduleAlertOnInitHook,
            },
        },
        {
            type: PaymentComponents.date,
            name: ScheduleFields.startDate,
            options: {
                label: $localize `:@@p2p-config.transfer-date-label:Transfer date`,
                cssClasses: ['d-block', 'col-md-6', 'align-top'],
                validators: [Validators.required, pastDateValidator],
                defaultValue: new Date().toISOString(),
                validationMessages: [
                    {
                        name: 'pastDate',
                        message: $localize `:@@p2p-config.past-date-error-message:Start date cannot be in the past`,
                    },
                ],
                description: $localize `:@@p2p-config.transfer-date-description:You selected a date after the due date, this transfer will incur a late fee`,
            },
            hooks: {
                onInit: internalTransScheduleStartDateOnInitHook,
                onDestroy: scheduleStartDateOnDestroyHook,
            },
        },
        {
            type: PaymentComponents.select,
            name: ScheduleFields.frequency,
            options: {
                label: $localize `:@@p2p-config.frequency-label:Frequency`,
                validators: [Validators.required],
                options: [
                    {
                        label: $localize `:@@p2p-config.once-frequency-label:Once`,
                        value: Frequencies.ONCE,
                    },
                    {
                        label: $localize `:@@p2p-config.weekly-frequency-label:Weekly`,
                        value: Frequencies.WEEKLY,
                    },
                    {
                        label: $localize `:@@p2p-config.biweekly-frequency-label:Biweekly`,
                        value: Frequencies.BIWEEKLY,
                    },
                    {
                        label: $localize `:@@p2p-config.monthly-frequency-label:Monthly`,
                        value: Frequencies.MONTHLY,
                    },
                    {
                        label: $localize `:@@p2p-config.quarterly-frequency-label:Quarterly`,
                        value: Frequencies.QUARTERLY,
                    },
                    {
                        label: $localize `:@@p2p-config.annually-frequency-label:Annually`,
                        value: Frequencies.YEARLY,
                    },
                ],
                defaultValue: Frequencies.ONCE,
                cssClasses: ['d-block', 'col-md-6', 'align-top'],
                dependants: [ScheduleFields.endType],
                activateDependantsOn: scheduleFrequencyToggleDependants,
            },
        },
        {
            type: PaymentComponents.radio,
            name: ScheduleFields.endType,
            options: {
                label: $localize `:@@p2p-config.end-type-label:End`,
                preselect: true,
                isConditionalMandatory: true,
                cssClasses: ['d-inline-block', 'col-md-2', 'align-top'],
                defaultValue: ScheduleEndType.NEVER,
                options: [
                    {
                        label: $localize `:@@p2p-config.never-end-type-label:Never`,
                        value: ScheduleEndType.NEVER,
                    },
                    {
                        label: $localize `:@@p2p-config.after-end-type-label:After`,
                        value: ScheduleEndType.AFTER,
                    },
                ],
                dependants: [ScheduleFields.endDate, ScheduleFields.repeat],
                activateDependantsOn: scheduleEndTypeToggleDependants,
            },
        },
        {
            type: PaymentComponents.date,
            name: ScheduleFields.endDate,
            options: {
                cssClasses: [
                    'd-inline-block',
                    'col-md-10',
                    'align-top',
                    'bb-schedule__end-date',
                ],
                validators: [endDateAfterStartDateValidator],
                validationMessages: [
                    {
                        name: 'required',
                        message: $localize `:@@p2p-config.end-date-required-message:End date is required`,
                    },
                    {
                        name: 'lessThanStartDate',
                        message: $localize `:@@p2p-config.end-date-less-start-date-message:End date cannot be before start date`,
                    },
                ],
                isConditionalMandatory: true,
            },
            hooks: {
                onInit: scheduleEndDateOnInitHook,
            },
        },
        {
            type: PaymentComponents.number,
            name: ScheduleFields.repeat,
            options: {
                isConditionalMandatory: true,
                description: $localize `:@@p2p-config.ocurrences-description:occurrences`,
                min: 2,
                max: 200,
                defaultValue: 2,
                validators: [minValueTwoValidator, maxValueTwoHundredValidator],
                validationMessages: [
                    {
                        name: 'required',
                        message: $localize `:@@p2p-config.ocurrences-required-message:Value is required`,
                    },
                    {
                        name: 'min',
                        message: $localize `:@@p2p-config.min-ocurrences-message:Value is below the minimum allowed occurrences (2)`,
                    },
                    {
                        name: 'max',
                        message: $localize `:@@p2p-config.max-ocurrences-message:Value exceeds maximum allowed occurances (200)`,
                    },
                ],
                cssClasses: [
                    'd-inline-block',
                    'col-md-9',
                    'align-top',
                    'px-0',
                    'bb-schedule__repeat',
                    'bb-schedule__repeat--two-option',
                ],
            },
        },
    ],
};
export const P2P_TRANSFER = {
    fields: [initiator, counterParty, remittanceInfo, schedule],
    name: $localize `:@@p2p-config.name:P2P Transfer`,
    paymentType: 'P2P_TRANSFER',
    businessFunction: 'P2P Transfer',
    hooks: {
        onDestroy: internalTransferOnDestroyHook,
    },
};
//# sourceMappingURL=p2p-transfer.js.map