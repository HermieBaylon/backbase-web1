import '@angular/localize/init';
import { Validators } from '@angular/forms';
import { routingTransitNumberValidator } from '../../ui/helpers/form-validation';
import { US_States } from '../constants';
import { CounterPartyFields, InitiatorFields, RemittanceInfoFields, PaymentBaseFields, } from '../models/form-item-names.model';
import { PaymentComponents, } from '../models/form-items.model';
import { defaultScheduleConfig as schedule } from './default-config';
const countriesList = [
    {
        label: 'United States',
        value: 'US',
    },
];
const initiator = {
    name: PaymentBaseFields.initiator,
    title: $localize `:@@wire-config.initiator-title:From account`,
    fields: [
        {
            type: PaymentComponents.debitAccountSelector,
            name: InitiatorFields.initiatorAccountGroup,
            options: {
                placeholder: $localize `:@@wire-config.initiator-placeholder:Select an account`,
                cssClasses: ['col-12', 'mb-0'],
                validationMessages: [
                    {
                        message: $localize `:@@wire-config.invalid-account-message:Debit account is invalid`,
                        name: 'missingInList',
                    },
                    {
                        message: $localize `:@@wire-config.closed-permission-error-message:You can not do payments to new beneficiary from this account.`,
                        name: 'hasOnlyClosedPaymentPermission',
                    },
                ],
            },
        },
    ],
};
const counterParty = {
    name: PaymentBaseFields.counterparty,
    fields: [
        {
            name: PaymentComponents.beneficiaryGroupHeader,
            type: PaymentComponents.beneficiaryGroupHeader,
            options: {
                label: $localize `:@@wire-config.beneficiary.header-label:Transfer to`,
                hasDynamicTitle: true,
                clearOptions: {
                    onClear: () => {
                        console.log('clear');
                    },
                },
            },
        },
        {
            name: CounterPartyFields.name,
            type: PaymentComponents.beneficiarySelector,
            options: {
                label: $localize `:@@wire-config.beneficiary-selector-label:Beneficiary name`,
                placeholder: $localize `:@@wire-config.beneficiary-selector-placeholder:Select a beneficiary`,
                cssClasses: ['col-12'],
                saveNewContactLabel: $localize `:@@wire-config.new-contact-label:Save as a new contact`,
                isManualEditDisabled: true,
                dependants: [
                    CounterPartyFields.accountNumber,
                    CounterPartyFields.bankBranchCode,
                    CounterPartyFields.postalAddress,
                    CounterPartyFields.creditorBank,
                    CounterPartyFields.correspondentBank,
                ],
                validationMessages: [
                    {
                        message: $localize `:@@wire-config.same-accounts-selected-error-message:Beneficiary is same as selected Debit account`,
                        name: 'sameDebitCreditAccountsSelected',
                    },
                ],
            },
        },
        {
            name: CounterPartyFields.accountNumber,
            type: PaymentComponents.text,
            options: {
                validators: [Validators.required],
                label: $localize `:@@wire-config.beneficiary.account-number-label:Account number`,
                maxLength: 34,
                cssClasses: ['d-inline-block', 'col-md-6', 'align-top'],
            },
        },
        {
            name: CounterPartyFields.bankBranchCode,
            type: PaymentComponents.text,
            options: {
                label: $localize `:@@wire-config.branch-code-label:Routing transit number (ABA)`,
                maxLength: 9,
                cssClasses: ['d-inline-block', 'col-md-6', 'align-top'],
                validators: [Validators.required, routingTransitNumberValidator],
                mapToField: `${PaymentBaseFields.counterparty}.${CounterPartyFields.creditorBank}`,
            },
        },
        {
            name: CounterPartyFields.postalAddress,
            type: PaymentComponents.address,
            options: {
                addressType: 'beneficiary',
                countries: countriesList,
                states: US_States,
                cssClasses: ['col-12'],
            },
        },
        {
            name: CounterPartyFields.creditorBank,
            fields: [
                {
                    name: CounterPartyFields.bankName,
                    type: PaymentComponents.text,
                    options: {
                        label: $localize `:@@wire-config.creditor-bank-name-label:Bank name`,
                        helperText: $localize `:@@wire-config.creditor-bank-name-placeholder: (optional)`,
                        maxLength: 140,
                        cssClasses: ['d-block', 'align-top', 'col-md-8'],
                    },
                },
                {
                    name: CounterPartyFields.postalAddress,
                    type: PaymentComponents.address,
                    options: {
                        addressType: 'beneficiary bank',
                        countries: countriesList,
                        states: US_States,
                        cssClasses: ['col-12'],
                    },
                },
            ],
        },
        {
            name: CounterPartyFields.correspondentBank,
            fields: [
                {
                    name: CounterPartyFields.enableAdditionalBankDetails,
                    type: PaymentComponents.switch,
                    options: {
                        label: $localize `:@@wire-config.correspondent-bank-label:Transfer through correspondent bank`,
                        cssClasses: ['col-12', 'align-top'],
                        labelPosition: 'right',
                        dependants: [
                            CounterPartyFields.bankName,
                            CounterPartyFields.bankBranchCode,
                            CounterPartyFields.postalAddress,
                        ],
                        activateDependantsOn: true,
                    },
                },
                {
                    name: CounterPartyFields.bankBranchCode,
                    type: PaymentComponents.text,
                    options: {
                        label: $localize `:@@wire-config.correspondent-bank-branch-code-label:Routing Transit Number (ABA)`,
                        maxLength: 9,
                        cssClasses: ['d-inline-block', 'col-md-6', 'align-top'],
                        validators: [routingTransitNumberValidator],
                        isConditionalMandatory: true,
                    },
                },
                {
                    name: CounterPartyFields.bankName,
                    type: PaymentComponents.text,
                    options: {
                        label: $localize `:@@wire-config.correspondent-bank-name-label:Bank name`,
                        maxLength: 140,
                        helperText: $localize `:@@wire-config.correspondent-bank-name-placeholder: (optional)`,
                        cssClasses: ['d-inline-block', 'col-md-6', 'align-top'],
                    },
                },
                {
                    name: CounterPartyFields.postalAddress,
                    type: PaymentComponents.address,
                    options: {
                        addressType: 'correspondent bank',
                        countries: countriesList,
                        states: US_States,
                        cssClasses: ['mb-0', 'col-12'],
                    },
                },
            ],
        },
    ],
};
const remittanceInfo = {
    name: PaymentBaseFields.remittanceInfo,
    title: $localize `:@@wire-config.remittance-info-title:Payment details`,
    fields: [
        {
            type: PaymentComponents.amount,
            name: RemittanceInfoFields.amountCurrencyGroup,
            options: {
                label: $localize `:@@wire-config.amount-label:Amount`,
                cssClasses: ['col-md-8', 'large-label'],
                currencies: ['USD'],
                validationMessages: [
                    {
                        name: 'invalidAmount',
                        message: $localize `:@@wire-config.invalid-amount-message:Amount is required`,
                    },
                ],
            },
        },
    ],
};
const additionalMessage = {
    name: 'additionalMessage',
    title: $localize `:@@wire-config.additional-message-title:Add message`,
    collapsible: true,
    fields: [
        {
            name: CounterPartyFields.remittanceInformation,
            type: PaymentComponents.textarea,
            options: {
                label: $localize `:@@wire-config.additional-message-label:Message to beneficiary`,
                helperText: $localize `:@@wire-config.additional-message-helper-text: (optional)`,
                placeholder: $localize `:@@wire-config.additional-message-placeholder:Type your message here`,
                showCharCounter: true,
                minLength: 0,
                maxLength: 140,
                rows: 3,
                cols: 50,
                cssClasses: ['col-12'],
                mapToField: PaymentBaseFields.counterparty,
            },
        },
        {
            name: CounterPartyFields.messageToBank,
            type: PaymentComponents.textarea,
            options: {
                label: $localize `:@@wire-config.message-to-bank-label:Message to beneficiary bank`,
                helperText: $localize `:@@wire-config.message-to-bank-helper-text: (optional)`,
                placeholder: $localize `:@@wire-config.message-to-bank-placeholder:Type your message here`,
                showCharCounter: true,
                minLength: 0,
                rows: 3,
                maxLength: 140,
                cols: 50,
                cssClasses: ['col-12'],
                mapToField: `${PaymentBaseFields.counterparty}`,
            },
        },
    ],
};
export const US_DOMESTIC_WIRE = {
    fields: [
        initiator,
        remittanceInfo,
        counterParty,
        schedule,
        additionalMessage,
    ],
    name: $localize `:@@wire-config.name:Wire Transfer`,
    paymentType: 'US_DOMESTIC_WIRE',
    businessFunction: 'US Domestic Wire',
    options: {
        closedPaymentBusFns: ['US Domestic Wire - Intracompany'],
    },
};
//# sourceMappingURL=us-domestic-wire.js.map