import '@angular/localize/init';
import { PaymentComponents, } from '../models/form-items.model';
import { PaymentBaseFields, CounterPartyFields, RemittanceInfoFields, InitiatorFields, ScheduleFields, } from '../models/form-item-names.model';
import { Validators } from '@angular/forms';
import { Frequencies, ScheduleEndType } from '../../ui/constants/constants';
import { scheduleEndDateOnInitHook, scheduleEndTypeToggleDependants, scheduleFrequencyToggleDependants, scheduleStartDateOnDestroyHook, scheduleStartDateOnInitHook, } from '../helpers/schedule-config-helpers';
import { endDateAfterStartDateValidator, maxValueTwoHundredValidator, minValueTwoValidator, pastDateValidator, } from '../../ui/helpers/form-validation';
const initiator = {
    name: PaymentBaseFields.initiator,
    fields: [
        {
            type: PaymentComponents.accountSelector,
            name: InitiatorFields.initiatorAccountGroup,
            options: {
                label: $localize `:@@internal-bus-config.initiator-label:From`,
                placeholder: $localize `:@@internal-bus-config.initiator-placeholder:Select an account`,
                cssClasses: ['col-12', 'bb-block', 'bb-block--lg'],
                validationMessages: [
                    {
                        name: 'required',
                        message: $localize `:@@internal-bus-config.initiator-required-error:Please select an account from the list to transfer from`,
                    },
                ],
            },
        },
    ],
};
const counterparty = {
    name: PaymentBaseFields.counterparty,
    fields: [
        {
            type: PaymentComponents.accountSelector,
            name: CounterPartyFields.counterPartyAccountGroup,
            options: {
                label: $localize `:@@internal-bus-config.counterparty-label:To`,
                placeholder: $localize `:@@internal-bus-config.counterparty-placeholder:Select an account`,
                cssClasses: ['col-12', 'bb-block', 'bb-block--lg'],
                validationMessages: [
                    {
                        name: 'required',
                        message: $localize `:@@internal-bus-config.counterparty-required-err:Please select an account from the list to transfer to`,
                    },
                    {
                        message: $localize `:@@internal-bus-config.counterparty-same-acc-err:Beneficiary is same as selected Debit account`,
                        name: 'sameDebitCreditAccountsSelected',
                    },
                ],
            },
        },
    ],
};
const remittanceInfo = {
    name: PaymentBaseFields.remittanceInfo,
    fields: [
        {
            type: PaymentComponents.amount,
            name: RemittanceInfoFields.amountCurrencyGroup,
            options: {
                label: $localize `:@@internal-bus-config.amount-label:Amount`,
                currencies: ['USD'],
                cssClasses: ['col-md-8', 'large-label'],
            },
        },
        {
            name: CounterPartyFields.remittanceInformation,
            type: PaymentComponents.textarea,
            options: {
                label: $localize `:@@internal-bus-config.remittance-Info-label:Description`,
                showCharCounter: true,
                minLength: 0,
                rows: 3,
                maxLength: 140,
                cols: 50,
                cssClasses: ['col-md-8'],
                mapToField: PaymentBaseFields.counterparty,
            },
        },
    ],
};
export const schedule = {
    name: PaymentBaseFields.schedule,
    fields: [
        {
            type: PaymentComponents.date,
            name: ScheduleFields.startDate,
            options: {
                label: $localize `:@@internal-bus-config.start-date-label:Start on`,
                cssClasses: ['d-inline-block', 'col-md-6', 'align-top'],
                validators: [Validators.required, pastDateValidator],
                defaultValue: new Date().toISOString(),
                validationMessages: [
                    {
                        name: 'pastDate',
                        message: $localize `:@@internal-bus-config.start-date-past-err:Start date cannot be in the past`,
                    },
                ],
            },
            hooks: {
                onInit: scheduleStartDateOnInitHook,
                onDestroy: scheduleStartDateOnDestroyHook,
            },
        },
        {
            name: ScheduleFields.frequency,
            type: PaymentComponents.select,
            options: {
                label: 'Frequency',
                validators: [Validators.required],
                options: [
                    {
                        label: $localize `:@@internal-bus-config.freq-once-label:Once`,
                        value: Frequencies.ONCE,
                    },
                    {
                        label: $localize `:@@internal-bus-config.freq-daily-label:Daily`,
                        value: Frequencies.DAILY,
                    },
                    {
                        label: $localize `:@@internal-bus-config.freq-weekly-label:Weekly`,
                        value: Frequencies.WEEKLY,
                    },
                    {
                        label: $localize `:@@internal-bus-config.freq-biweekly-label:Biweekly`,
                        value: Frequencies.BIWEEKLY,
                    },
                    {
                        label: $localize `:@@internal-bus-config.freq-monthly-label:Monthly`,
                        value: Frequencies.MONTHLY,
                    },
                    {
                        label: $localize `:@@internal-bus-config.freq-quarterly-label:Quarterly`,
                        value: Frequencies.QUARTERLY,
                    },
                    {
                        label: $localize `:@@internal-bus-config.freq-annually-label:Annually`,
                        value: Frequencies.YEARLY,
                    },
                ],
                defaultValue: Frequencies.ONCE,
                cssClasses: ['d-inline-block', 'col-md-6', 'align-top'],
                dependants: [ScheduleFields.endType],
                activateDependantsOn: scheduleFrequencyToggleDependants,
            },
        },
        {
            name: ScheduleFields.endType,
            type: PaymentComponents.radio,
            options: {
                label: 'End',
                preselect: true,
                isConditionalMandatory: true,
                cssClasses: [
                    'd-inline-block',
                    'col-md-2',
                    'align-top',
                    'bb-schedule__end-type',
                ],
                defaultValue: ScheduleEndType.NEVER,
                options: [
                    {
                        label: $localize `:@@internal-bus-config.end-date-type-never-label:Never`,
                        value: ScheduleEndType.NEVER,
                    },
                    {
                        label: $localize `:@@internal-bus-config.end-date-type-on-label:On date`,
                        value: ScheduleEndType.ON,
                    },
                    {
                        label: $localize `:@@internal-bus-config.end-date-type-after-label:After`,
                        value: ScheduleEndType.AFTER,
                    },
                ],
                dependants: [ScheduleFields.endDate, ScheduleFields.repeat],
                activateDependantsOn: scheduleEndTypeToggleDependants,
            },
        },
        {
            type: PaymentComponents.date,
            name: ScheduleFields.endDate,
            options: {
                cssClasses: [
                    'd-inline-block',
                    'col-md-10',
                    'align-top',
                    'bb-schedule__end-date',
                ],
                validators: [endDateAfterStartDateValidator],
                validationMessages: [
                    {
                        name: 'required',
                        message: $localize `:@@internal-bus-config.end-date-past-err:End date is required`,
                    },
                    {
                        name: 'lessThanStartDate',
                        message: $localize `:@@internal-bus-config.end-date--before-start-err:End date cannot be before start date`,
                    },
                ],
                isConditionalMandatory: true,
            },
            hooks: {
                onInit: scheduleEndDateOnInitHook,
            },
        },
        {
            name: ScheduleFields.repeat,
            type: PaymentComponents.number,
            options: {
                isConditionalMandatory: true,
                description: $localize `:@@internal-bus-config.repeat-desc:times`,
                min: 2,
                max: 200,
                defaultValue: 2,
                validators: [minValueTwoValidator, maxValueTwoHundredValidator],
                validationMessages: [
                    {
                        name: 'required',
                        message: $localize `:@@internal-bus-config.repeat-required-err:Value is required`,
                    },
                    {
                        name: 'min',
                        message: $localize `:@@internal-bus-config.repeat-min-val-err:Value is below the minimum allowed occurrences (2)`,
                    },
                    {
                        name: 'max',
                        message: $localize `:@@internal-bus-config.repeat-max-val-err:Value exceeds maximum allowed occurances (200)`,
                    },
                ],
                cssClasses: [
                    'd-inline-block',
                    'col-md-9',
                    'align-top',
                    'px-0',
                    'bb-schedule__repeat',
                ],
            },
        },
    ],
};
export const INTERNAL_TRANSFER_BUSINESS = {
    fields: [initiator, counterparty, remittanceInfo, schedule],
    name: $localize `:@@internal-bus-config.name:Internal Transfer`,
    businessFunction: 'A2A Transfer',
    paymentType: 'INTERNAL_TRANSFER',
};
//# sourceMappingURL=internal-transfer-business.js.map