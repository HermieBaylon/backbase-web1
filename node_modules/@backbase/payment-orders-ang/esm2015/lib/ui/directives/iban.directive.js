import { ChangeDetectorRef, Directive, Input, ElementRef, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { Subject } from 'rxjs';
import { distinctUntilChanged, filter, takeUntil, delay } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
export class IbanDirective {
    constructor(el, ngControl, changeDetectorRef) {
        this.el = el;
        this.ngControl = ngControl;
        this.changeDetectorRef = changeDetectorRef;
        /**
         * The max length for the IBAN number, mostly 34
         */
        this.maxLen = 34;
        this.value = '';
        this.editPositionRestorer$ = new Subject();
        this.garbageCollector$ = new Subject();
        this.transformValue = (value, max) => {
            if (!value) {
                return value;
            }
            const format = (v) => v.replace(/(.{4})/g, '$1 ').trim();
            const rawResult = value.toUpperCase().replace(/[^a-z0-9]/gi, '');
            return rawResult.length > max
                ? format(rawResult.slice(0, max))
                : format(rawResult);
        };
    }
    ngOnInit() {
        if (!this.ngControl || !this.ngControl.control) {
            return;
        }
        const control = this.ngControl.control;
        const ibanInputEl = this.el.nativeElement.querySelector('input');
        control.valueChanges
            .pipe(distinctUntilChanged(), filter((value) => {
            const alphaNumericRegex = /^[a-zA-Z0-9 ]{5,}$/; //Only format string with valid iban chars
            return value !== this.value && alphaNumericRegex.test(value);
        }), takeUntil(this.garbageCollector$))
            .subscribe((value) => {
            let pos = ibanInputEl.selectionStart;
            const transformedValue = this.transformValue(value, this.maxLen);
            if (value &&
                value.substring(0, pos) !== transformedValue.substring(0, pos)) {
                pos++;
            }
            this.changeDetectorRef.detectChanges();
            control.setValue(transformedValue);
            control.updateValueAndValidity();
            this.value = transformedValue;
            this.changeDetectorRef.detectChanges();
            this.editPositionRestorer$.next(pos);
        });
        this.editPositionRestorer$.pipe(delay(1)).subscribe((position) => {
            ibanInputEl.setSelectionRange(position, position);
        });
    }
    ngOnDestroy() {
        this.editPositionRestorer$.unsubscribe();
        if (this.garbageCollector$) {
            this.garbageCollector$.next();
            this.garbageCollector$.complete();
        }
    }
}
/** @nocollapse */ IbanDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: IbanDirective, deps: [{ token: i0.ElementRef }, { token: i1.NgControl }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ IbanDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: IbanDirective, selector: "[bbIban]", inputs: { maxLen: "maxLen" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: IbanDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbIban]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.NgControl }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { maxLen: [{
                type: Input
            }] } });
//# sourceMappingURL=iban.directive.js.map