import { Directive, HostListener, Input, } from '@angular/core';
import { PaymentOrdersHttpService } from '@backbase/data-ang/payment-order';
import { of, Subject } from 'rxjs';
import { catchError, switchMap, tap } from 'rxjs/operators';
import { NotificationService } from '@backbase/ui-ang/notification';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/notification";
import * as i2 from "@backbase/data-ang/payment-order";
export class ExportPdfDirective {
    constructor(notificationService, paymentOrderService) {
        this.notificationService = notificationService;
        this.paymentOrderService = paymentOrderService;
        this.downloadSub = new Subject();
    }
    static convertByteToBlob(data) {
        const blob = new Blob([data], { type: 'application/pdf' });
        const link = document.createElement('a');
        const fileName = $localize `:@@export-pdf.pdf-file.name:payment_confirmation`;
        link.href = window.URL.createObjectURL(blob);
        link.download = fileName;
        link.click();
    }
    onClick() {
        this.downloadSub.next(this.paymentOrderId);
    }
    ngOnInit() {
        this.downloadSub.pipe(switchMap(this.getPdf.bind(this))).subscribe();
    }
    ngOnDestroy() {
        this.downloadSub.unsubscribe();
    }
    getPdf(paymentOrderId) {
        return this.paymentOrderService
            .getPaymentOrderExport({ paymentOrderId })
            .pipe(tap(ExportPdfDirective.convertByteToBlob), catchError((err) => {
            let header = $localize `:@@export-pdf.pdf-file.server-error-header:Server error`;
            let message = $localize `:@@export-pdf.pdf-file.server-error-message:Unknown error occurred.`;
            if (err.status === 409) {
                header = $localize `:@@export-pdf.pdf-file.409-error-header:The payment status does not allow this action. Please verify if the payment is still valid`;
                message = '';
            }
            this.notificationService.showNotification({
                modifier: 'error',
                header,
                message,
            });
            return of(err);
        }));
    }
}
/** @nocollapse */ ExportPdfDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ExportPdfDirective, deps: [{ token: i1.NotificationService }, { token: i2.PaymentOrdersHttpService }], target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ ExportPdfDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ExportPdfDirective, selector: "[bbExportPdf]", inputs: { paymentOrderId: ["bbExportPdf", "paymentOrderId"] }, host: { listeners: { "click": "onClick()" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ExportPdfDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbExportPdf]',
                }]
        }], ctorParameters: function () { return [{ type: i1.NotificationService }, { type: i2.PaymentOrdersHttpService }]; }, propDecorators: { paymentOrderId: [{
                type: Input,
                args: ['bbExportPdf']
            }], onClick: [{
                type: HostListener,
                args: ['click']
            }] } });
//# sourceMappingURL=export-pdf.directive.js.map