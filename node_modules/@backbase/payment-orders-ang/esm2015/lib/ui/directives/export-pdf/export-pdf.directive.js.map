{"version":3,"file":"export-pdf.directive.js","sourceRoot":"","sources":["../../../../../../../../libs/payment-orders-ang/src/lib/ui/directives/export-pdf/export-pdf.directive.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,SAAS,EACT,YAAY,EACZ,KAAK,GAGN,MAAM,eAAe,CAAC;AACvB,OAAO,EAAE,wBAAwB,EAAE,MAAM,kCAAkC,CAAC;AAC5E,OAAO,EAAc,EAAE,EAAE,OAAO,EAAE,MAAM,MAAM,CAAC;AAC/C,OAAO,EAAE,UAAU,EAAE,SAAS,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AAC5D,OAAO,EAAE,mBAAmB,EAAE,MAAM,+BAA+B,CAAC;;;;AAKpE,MAAM,OAAO,kBAAkB;IAmB7B,YACmB,mBAAwC,EACxC,mBAA6C;QAD7C,wBAAmB,GAAnB,mBAAmB,CAAqB;QACxC,wBAAmB,GAAnB,mBAAmB,CAA0B;QAlB/C,gBAAW,GAAG,IAAI,OAAO,EAAU,CAAC;IAmBlD,CAAC;IAjBI,MAAM,CAAC,iBAAiB,CAAC,IAAU;QACzC,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,EAAE,iBAAiB,EAAE,CAAC,CAAC;QAC3D,MAAM,IAAI,GAAG,QAAQ,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;QACzC,MAAM,QAAQ,GAAG,SAAS,CAAA,kDAAkD,CAAC;QAE7E,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,GAAG,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;QAC7C,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,KAAK,EAAE,CAAC;IACf,CAAC;IAEsB,OAAO;QAC5B,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IAC7C,CAAC;IAOD,QAAQ;QACN,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;IACvE,CAAC;IAED,WAAW;QACT,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC;IACjC,CAAC;IAEO,MAAM,CAAC,cAAsB;QACnC,OAAO,IAAI,CAAC,mBAAmB;aAC5B,qBAAqB,CAAC,EAAE,cAAc,EAAE,CAAC;aACzC,IAAI,CACH,GAAG,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,EACzC,UAAU,CAAC,CAAC,GAAG,EAAE,EAAE;YACjB,IAAI,MAAM,GAAG,SAAS,CAAA,yDAAyD,CAAC;YAChF,IAAI,OAAO,GAAG,SAAS,CAAA,qEAAqE,CAAC;YAE7F,IAAI,GAAG,CAAC,MAAM,KAAK,GAAG,EAAE;gBACtB,MAAM,GAAG,SAAS,CAAA,oIAAoI,CAAC;gBACvJ,OAAO,GAAG,EAAE,CAAC;aACd;YAED,IAAI,CAAC,mBAAmB,CAAC,gBAAgB,CAAC;gBACxC,QAAQ,EAAE,OAAO;gBACjB,MAAM;gBACN,OAAO;aACR,CAAC,CAAC;YAEH,OAAO,EAAE,CAAC,GAAG,CAAC,CAAC;QACjB,CAAC,CAAC,CACH,CAAC;IACN,CAAC;;mIAvDU,kBAAkB;uHAAlB,kBAAkB;4FAAlB,kBAAkB;kBAH9B,SAAS;mBAAC;oBACT,QAAQ,EAAE,eAAe;iBAC1B;iJAEuB,cAAc;sBAAnC,KAAK;uBAAC,aAAa;gBAcG,OAAO;sBAA7B,YAAY;uBAAC,OAAO","sourcesContent":["import {\n  Directive,\n  HostListener,\n  Input,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { PaymentOrdersHttpService } from '@backbase/data-ang/payment-order';\nimport { Observable, of, Subject } from 'rxjs';\nimport { catchError, switchMap, tap } from 'rxjs/operators';\nimport { NotificationService } from '@backbase/ui-ang/notification';\n\n@Directive({\n  selector: '[bbExportPdf]',\n})\nexport class ExportPdfDirective implements OnInit, OnDestroy {\n  @Input('bbExportPdf') paymentOrderId!: string;\n\n  private readonly downloadSub = new Subject<string>();\n\n  private static convertByteToBlob(data: Blob) {\n    const blob = new Blob([data], { type: 'application/pdf' });\n    const link = document.createElement('a');\n    const fileName = $localize`:@@export-pdf.pdf-file.name:payment_confirmation`;\n\n    link.href = window.URL.createObjectURL(blob);\n    link.download = fileName;\n    link.click();\n  }\n\n  @HostListener('click') onClick() {\n    this.downloadSub.next(this.paymentOrderId);\n  }\n\n  constructor(\n    private readonly notificationService: NotificationService,\n    private readonly paymentOrderService: PaymentOrdersHttpService\n  ) {}\n\n  ngOnInit() {\n    this.downloadSub.pipe(switchMap(this.getPdf.bind(this))).subscribe();\n  }\n\n  ngOnDestroy() {\n    this.downloadSub.unsubscribe();\n  }\n\n  private getPdf(paymentOrderId: string): Observable<Blob> {\n    return this.paymentOrderService\n      .getPaymentOrderExport({ paymentOrderId })\n      .pipe(\n        tap(ExportPdfDirective.convertByteToBlob),\n        catchError((err) => {\n          let header = $localize`:@@export-pdf.pdf-file.server-error-header:Server error`;\n          let message = $localize`:@@export-pdf.pdf-file.server-error-message:Unknown error occurred.`;\n\n          if (err.status === 409) {\n            header = $localize`:@@export-pdf.pdf-file.409-error-header:The payment status does not allow this action. Please verify if the payment is still valid`;\n            message = '';\n          }\n\n          this.notificationService.showNotification({\n            modifier: 'error',\n            header,\n            message,\n          });\n\n          return of(err);\n        })\n      );\n  }\n}\n"]}