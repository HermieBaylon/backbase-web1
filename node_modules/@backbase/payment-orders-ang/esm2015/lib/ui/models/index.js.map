{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../../../libs/payment-orders-ang/src/lib/ui/models/index.ts"],"names":[],"mappings":"AAwBA,MAAM,OAAO,uBAAuB;IAGlC,YAAqB,OAA0B;QAA1B,YAAO,GAAP,OAAO,CAAmB;QAF/C,SAAI,GAA8B,yBAAyB,CAAC;IAEV,CAAC;CACpD;AAED,MAAM,OAAO,YAAY;IAGvB,YAAqB,MAAW;QAAX,WAAM,GAAN,MAAM,CAAK;QAFhC,SAAI,GAAmB,cAAc,CAAC;IAEH,CAAC;CACrC;AAID,MAAM,CAAN,IAAY,MAGX;AAHD,WAAY,MAAM;IAChB,uBAAa,CAAA;IACb,2BAAiB,CAAA;AACnB,CAAC,EAHW,MAAM,KAAN,MAAM,QAGjB;AAED,MAAM,CAAN,IAAY,YAIX;AAJD,WAAY,YAAY;IACtB,mCAAmB,CAAA;IACnB,iCAAiB,CAAA;IACjB,6BAAa,CAAA;AACf,CAAC,EAJW,YAAY,KAAZ,YAAY,QAIvB;AAYD,MAAM,CAAN,IAAY,kBAIX;AAJD,WAAY,kBAAkB;IAC5B,mCAAe,CAAA;IACf,mDAA+B,CAAA;IAC/B,mDAA+B,CAAA;AACjC,CAAC,EAJW,kBAAkB,KAAlB,kBAAkB,QAI7B;AAED,MAAM,CAAN,IAAY,YAIX;AAJD,WAAY,YAAY;IACtB,2BAAa,CAAA;IACb,2BAAa,CAAA;IACb,2BAAa,CAAA;AACf,CAAC,EAJW,YAAY,KAAZ,YAAY,QAIvB;AAED,MAAM,CAAN,IAAY,UAGX;AAHD,WAAY,UAAU;IACpB,iDAAO,CAAA;IACP,+CAAM,CAAA;AACR,CAAC,EAHW,UAAU,KAAV,UAAU,QAGrB;AAwFD,MAAM,CAAN,IAAY,cAUX;AAVD,WAAY,cAAc;IACxB,+DAA6C,CAAA;IAC7C,iDAA+B,CAAA;IAC/B,qDAAmC,CAAA;IACnC,uDAAqC,CAAA;IACrC,qCAAmB,CAAA;IACnB,uCAAqB,CAAA;IACrB,uCAAqB,CAAA;IACrB,yCAAuB,CAAA;IACvB,6CAA2B,CAAA;AAC7B,CAAC,EAVW,cAAc,KAAd,cAAc,QAUzB;AA8BD,MAAM,CAAN,IAAY,gBAMX;AAND,WAAY,gBAAgB;IAC1B,qCAAiB,CAAA;IACjB,uCAAmB,CAAA;IACnB,mCAAe,CAAA;IACf,qCAAiB,CAAA;IACjB,mCAAe,CAAA;AACjB,CAAC,EANW,gBAAgB,KAAhB,gBAAgB,QAM3B;AAED,MAAM,CAAN,IAAY,qBAKX;AALD,WAAY,qBAAqB;IAC/B,4CAAmB,CAAA;IACnB,wCAAe,CAAA;IACf,4CAAmB,CAAA;IACnB,0DAAiC,CAAA;AACnC,CAAC,EALW,qBAAqB,KAArB,qBAAqB,QAKhC;AAeD,MAAM,CAAN,IAAY,uBAGX;AAHD,WAAY,uBAAuB;IACjC,wCAAa,CAAA;IACb,4CAAiB,CAAA;AACnB,CAAC,EAHW,uBAAuB,KAAvB,uBAAuB,QAGlC;AAED,MAAM,CAAN,IAAY,oBAKX;AALD,WAAY,oBAAoB;IAC9B,uCAAe,CAAA;IACf,yCAAiB,CAAA;IACjB,mCAAW,CAAA;IACX,2CAAmB,CAAA;AACrB,CAAC,EALW,oBAAoB,KAApB,oBAAoB,QAK/B;AAED,MAAM,CAAN,IAAY,qBAKX;AALD,WAAY,qBAAqB;IAC/B,wCAAe,CAAA;IACf,0CAAiB,CAAA;IACjB,oCAAW,CAAA;IACX,4CAAmB,CAAA;AACrB,CAAC,EALW,qBAAqB,KAArB,qBAAqB,QAKhC","sourcesContent":["import { TemplateRef } from '@angular/core';\nimport {\n  PaymentOrdersPost as PaymentOrdersPOST,\n  OriginatorAccount as PaymentOrdersOriginatorAccount,\n  PaymentMode,\n  IdentifiedPaymentOrder,\n} from '@backbase/data-ang/payment-order';\nimport {\n  PaymentTemplate,\n  InstructionPriority,\n  TransferTransactionInformation,\n} from '@backbase/data-ang/payment-template';\nimport { ErrorItem } from '@backbase/data-ang/payment-batch';\nimport {\n  PaymentDetails,\n  PayordPaymentError,\n} from '../../configs/models/form-items.model';\nimport { Route } from '@angular/router';\nimport {\n  Currency,\n  ExternalAccountFormItem,\n  InternalAccountFormItem,\n} from './types';\n\nexport class PaymentOrdersBadRequest {\n  kind: 'PaymentOrdersBadRequest' = 'PaymentOrdersBadRequest';\n\n  constructor(readonly payment: PaymentOrdersPOST) {}\n}\n\nexport class UnknownError {\n  kind: 'UnknownError' = 'UnknownError';\n\n  constructor(readonly origin: any) {}\n}\n\nexport type PaymentOrdersError = PaymentOrdersBadRequest | UnknownError;\n\nexport enum Routes {\n  FORM = 'form',\n  REVIEW = 'review',\n}\n\nexport enum PaymentState {\n  INITIAL = 'INITIAL',\n  REVIEW = 'REVIEW',\n  EDIT = 'EDIT',\n}\n\nexport interface ReviewTemplateContext {\n  $implicit: PaymentDetails;\n  status?: 'SUCCESS' | 'FAIL';\n}\n\nexport interface BeneficiaryDetails {\n  accounts?: Array<InternalAccountFormItem> | null;\n  contacts?: Array<ExternalAccountFormItem> | null;\n}\n\nexport enum ExecutionTimeFrame {\n  'HOUR' = 'HOUR',\n  'CALENDAR_DAY' = 'CALENDAR_DAY',\n  'BUSINESS_DAY' = 'BUSINESS_DAY',\n}\n\nexport enum ChargeBearer {\n  'OUR' = 'OUR',\n  'BEN' = 'BEN',\n  'SHA' = 'SHA',\n}\n\nexport enum ModalState {\n  Preview,\n  Hidden,\n}\n\nexport interface PaymentTemplateResponse extends PaymentTemplate {\n  id: string;\n  name?: string;\n  createdAt: string;\n  serviceAgreementId: string;\n  details: {\n    paymentType?: string;\n    originator?: {\n      name: string;\n      postalAddress: {\n        addressLine1: string;\n      };\n    };\n    originatorAccount?: PaymentOrdersOriginatorAccount;\n    instructionPriority?: InstructionPriority;\n    entryClass?: string;\n    transferTransactionInformation?: TransferTransactionInformation;\n  };\n}\n\nexport interface PaymentOption {\n  name?: string;\n  paymentType?: string;\n  showHelperText?: boolean;\n  instructionPriority?: string;\n  transferFee?: Currency;\n  chargeBearer?: Array<string>;\n  executionTimeFrame?: {\n    min?: number;\n    max: number;\n    unit: string;\n  };\n  cutOffTime?: string;\n  canEditCounterparty?: boolean;\n}\n\nexport interface CurrencyObj {\n  code: string;\n  decimals: number;\n}\n\nexport interface LabeledCurrencies {\n  popular?: Array<CurrencyObj>;\n  normal?: Array<CurrencyObj>;\n}\n\nexport interface DecimalsSet {\n  [key: string]: number;\n}\n\nexport interface CurrencySet {\n  currencies: Array<string>;\n  decimals: DecimalsSet;\n  dividerIndex?: number;\n}\n\nexport interface ForexDetails {\n  fromCurrency: string;\n  toCurrency: string;\n  rate: number;\n  calculatedAmount: number | string;\n}\n\nexport interface PaymentCostInfo extends ForexDetails {\n  transferFee: Currency;\n  hasForexInfo: boolean;\n}\n\nexport interface CurrencySelectorConfig {\n  showFlags?: boolean;\n  showName?: boolean;\n  isSearchable?: boolean;\n  dividerIndex?: number;\n  searchPlaceholder?: string;\n  dropdownIcon?: string;\n}\n\nexport interface TransactionSigningResponse {\n  amount: string;\n  currency: string;\n  'counter-party-account': string;\n  'counter-party-name': string;\n  'confirmation-type': string;\n  'payment-order-id': string;\n}\n\nexport enum ProgressStatus {\n  CONFIRMATION_PENDING = 'CONFIRMATION_PENDING',\n  USER_DECLINED = 'USER_DECLINED',\n  SYSTEM_DECLINED = 'SYSTEM_DECLINED',\n  PENDING_APPROVAL = 'PENDING_APPROVAL',\n  SENDING = 'SENDING',\n  ACCEPTED = 'ACCEPTED',\n  REJECTED = 'REJECTED',\n  PROCESSED = 'PROCESSED',\n  NO_PROGRESS = 'NO_PROGRESS',\n}\n\nexport interface PaymentProgressStatusResponse {\n  progressStatus: ProgressStatus;\n}\n\nexport interface PaymentErrors {\n  errorResponse: any;\n  genericMessage?: string;\n  errors: Array<{\n    key: string;\n    message: string;\n  }>;\n  paymentErrors: PayordPaymentError;\n  notificationHeader: TemplateRef<any> | string;\n}\n\nexport interface PaymentError {\n  statusText: string;\n  error: {\n    message: string;\n    errors: Array<{\n      key: string;\n      message: string;\n    }>;\n  };\n  reasonCode?: string;\n  reasonText?: string;\n}\n\nexport enum ManualBatchState {\n  CLOSED = 'CLOSED',\n  INITIAL = 'INITIAL',\n  DRAFT = 'DRAFT',\n  REVIEW = 'REVIEW',\n  VALID = 'VALID',\n}\n\nexport enum PaymentSubmitStatuses {\n  SUCCESS = 'success',\n  ERROR = 'error',\n  PENDING = 'pending',\n  PENDING_EDITED = 'pending_edited',\n}\n\nexport interface StepErrors {\n  [stepName: string]: ErrorItem[];\n}\n\nexport interface TemplateParams {\n  name: string;\n  id: string;\n}\n\nexport interface Template extends PaymentTemplate {\n  query?: string;\n}\n\nexport enum ScrollToElementBehavior {\n  AUTO = 'auto',\n  SMOOTH = 'smooth',\n}\n\nexport enum ScrollToElementBlock {\n  START = 'start',\n  CENTER = 'center',\n  END = 'end',\n  NEAREST = 'nearest',\n}\n\nexport enum ScrollToElementInline {\n  START = 'start',\n  CENTER = 'center',\n  END = 'end',\n  NEAREST = 'nearest',\n}\n\nexport interface ScrollToElementConfigOptions {\n  behavior?: ScrollToElementBehavior;\n  block?: ScrollToElementBlock;\n  inline?: ScrollToElementInline;\n}\n\nexport interface PaymentOrdersData {\n  items: IdentifiedPaymentOrder[];\n  totalCount: number;\n}\n\nexport interface DataTypedRoute<T = PaymentsRouteData> extends Route {\n  data: T;\n  path: string;\n}\n\nexport interface PaymentsRouteData {\n  /**\n   * Title for the route tab\n   */\n  title: string;\n  /**\n   * Type of payment orders to load\n   */\n  paymentMode?: PaymentMode;\n}\n\nexport interface PaymentsTab {\n  title: string;\n  route: string;\n}\n"]}