import { Frequencies } from '../constants';
export const getDateOnly = (dateArg = new Date()) => {
    const date = new Date(dateArg);
    const month = String(date.getMonth() + 1);
    const day = String(date.getDate());
    const year = String(date.getFullYear());
    return `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;
};
export const getRelativeDate = (next, ISOStringFormat) => {
    const date = new Date();
    if (next) {
        date.setDate(date.getDate() + next);
    }
    return ISOStringFormat ? date.toISOString() : getDateOnly(date);
};
export const datePart = (date) => {
    let normalisedDate = new Date();
    if (date) {
        if (typeof date === 'string') {
            normalisedDate = new Date(date);
        }
        else if (date instanceof Date) {
            normalisedDate = date;
        }
    }
    return getDateOnly(normalisedDate);
};
export const scheduleOn = (frequency, date) => {
    switch (frequency) {
        case 'YEARLY':
            return date.getMonth() + 1;
        case 'MONTHLY':
            return date.getDate();
        default:
            return date.getDay() + 1;
    }
};
export const getEndDate = (frequency, startDate) => {
    const freq = (frequency && frequency.value) || frequency;
    const today = startDate ? new Date(startDate) : new Date();
    switch (freq) {
        case Frequencies.ONCE:
            return undefined;
        case Frequencies.WEEKLY: {
            return new Date(today.getFullYear(), today.getMonth(), today.getDate() + 7).toISOString();
        }
        case Frequencies.BIWEEKLY: {
            return new Date(today.getFullYear(), today.getMonth(), today.getDate() + 14).toISOString();
        }
        case Frequencies.MONTHLY: {
            return new Date(today.getFullYear(), today.getMonth() + 1, today.getDate()).toISOString();
        }
        case Frequencies.QUARTERLY: {
            return new Date(today.getFullYear(), today.getMonth() + 3, today.getDate()).toISOString();
        }
        case Frequencies.YEARLY: {
            return new Date(today.getFullYear() + 1, today.getMonth(), today.getDate()).toISOString();
        }
        case Frequencies.DAILY:
        default: {
            return new Date(today.getFullYear(), today.getMonth(), today.getDate() + 1).toISOString();
        }
    }
};
//# sourceMappingURL=date-helpers.js.map