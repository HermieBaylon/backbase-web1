import { today } from './../constants';
export function amountValidator(control) {
    return control.value &&
        control.value.amount > 0 &&
        control.value.currency.length > 0
        ? undefined
        : { invalidAmount: { value: control.value } };
}
export function missingInListValidator(getIdsFn) {
    return function (control) {
        return getIdsFn().includes(control.value) || !control.value
            ? null
            : { missingInList: { value: control.value } };
    };
}
export function pastDateValidator(control) {
    const selectedDate = new Date(control.value);
    return control.value &&
        today > selectedDate &&
        today.toDateString() !== selectedDate.toDateString()
        ? { pastDate: { value: control.value } }
        : null;
}
export function maxValueTwoHundredValidator(control) {
    const value = parseFloat(control.value);
    return !isNaN(value) && value > 200
        ? { max: { max: 200, actual: control.value } }
        : null;
}
export function minValueTwoValidator(control) {
    const value = parseFloat(control.value);
    return !isNaN(value) && value < 2
        ? { min: { min: 2, actual: control.value } }
        : null;
}
export function endDateAfterStartDateValidator(control) {
    if (control.parent) {
        const parentControl = control.parent;
        const startDateControl = parentControl.get('startDate');
        const startDate = new Date(startDateControl.value);
        const endDate = new Date(control.value);
        return control.value &&
            startDate > endDate &&
            startDate.toDateString() !== endDate.toDateString()
            ? { lessThanStartDate: true }
            : undefined;
    }
    return;
}
export function sameAccountsValidator(config) {
    return (control) => {
        var _a, _b, _c;
        const parentForm = (_a = control === null || control === void 0 ? void 0 : control.parent) === null || _a === void 0 ? void 0 : _a.parent;
        const debitAccountId = (_b = parentForm === null || parentForm === void 0 ? void 0 : parentForm.get(['initiator', 'id'])) === null || _b === void 0 ? void 0 : _b.value;
        const creditAccountId = (_c = parentForm === null || parentForm === void 0 ? void 0 : parentForm.get(['counterparty', 'id'])) === null || _c === void 0 ? void 0 : _c.value;
        if (control.value && debitAccountId && debitAccountId === creditAccountId) {
            return { sameDebitCreditAccountsSelected: true };
        }
        return null;
    };
}
export function scheduledPaymentValidationMethod(control, _endType) {
    if (control.parent) {
        const parentControl = control.parent;
        const { endType, frequency } = parentControl && parentControl.value;
        return frequency.value !== 'ONCE' &&
            endType &&
            !control.value &&
            endType === _endType
            ? { required: true }
            : undefined;
    }
    return;
}
export function requiredEndDateValidator(control) {
    return scheduledPaymentValidationMethod(control, 'on');
}
export function requiredAfterValidator(control) {
    return scheduledPaymentValidationMethod(control, 'after');
}
export function requiredEndTypeValidator(control) {
    if (control.parent) {
        const parentControl = control.parent;
        const { frequency: { value: _value }, } = parentControl && parentControl.value;
        return !control.value && _value && _value !== 'ONCE'
            ? { required: true }
            : undefined;
    }
    return;
}
export function routingTransitNumberValidator(control) {
    let { value } = control;
    const errors = {
        pattern: false,
        size: false,
    };
    if (value) {
        value = value.toString(10);
        const p = (str) => parseInt(str, 10);
        if (value.length !== 9) {
            errors.size = true;
        }
        const left = 3 * (p(value[0]) + p(value[3]) + p(value[6]));
        const mid = 7 * (p(value[1]) + p(value[4]) + p(value[7]));
        const right = p(value[2]) + p(value[5]) + p(value[8]);
        if ((left + mid + right) % 10 !== 0 && value.length >= 9) {
            errors.pattern = true;
        }
    }
    return errors.size || errors.pattern ? errors : null;
}
export function noWhitespaceValidator(control) {
    const isWhitespace = (control.value || '').trim().length === 0;
    const isValid = !isWhitespace;
    return isValid ? null : { required: true };
}
function getSanctionedCurrencies(control) {
    var _a, _b, _c, _d;
    const { inputFormSettings } = ((_c = (_b = (_a = control === null || control === void 0 ? void 0 : control.parent) === null || _a === void 0 ? void 0 : _a.parent) === null || _b === void 0 ? void 0 : _b.get('inputFormFromSettings')) === null || _c === void 0 ? void 0 : _c.value) || {};
    return (((_d = inputFormSettings === null || inputFormSettings === void 0 ? void 0 : inputFormSettings.find((setting) => setting.key === 'currency')) === null || _d === void 0 ? void 0 : _d.values) || []);
}
export function currencyValidatorFactory(currencies = []) {
    return (control) => {
        const sanctionedCurrencies = currencies.length
            ? currencies
            : getSanctionedCurrencies(control);
        if (!sanctionedCurrencies.length) {
            return null;
        }
        const pattern = `(${sanctionedCurrencies.join('|')})`;
        const regex = new RegExp(pattern);
        const isValid = regex.test(control.value && control.value.currency);
        return isValid ? null : { invalidCurrency: true };
    };
}
export function accountsValidation(rootControlName) {
    return (control) => {
        var _a, _b;
        if (control.root && control.parent) {
            const rootControl = control.root;
            const fromControl = rootControl.get(rootControlName);
            const fromAccount = (_a = fromControl === null || fromControl === void 0 ? void 0 : fromControl.get('id')) === null || _a === void 0 ? void 0 : _a.value;
            const selectedAccount = (_b = control.parent.get('id')) === null || _b === void 0 ? void 0 : _b.value;
            return control.parent.value && fromAccount === selectedAccount
                ? { sameAccount: true }
                : null;
        }
        return null;
    };
}
export function minimumOneAccount(control) {
    return control.controls.length > 0 ? null : { empty: true };
}
export function amountGreaterThanZero(control) {
    return control.value > 0
        ? undefined
        : { invalidAmount: { value: control.value } };
}
//# sourceMappingURL=form-validation.js.map