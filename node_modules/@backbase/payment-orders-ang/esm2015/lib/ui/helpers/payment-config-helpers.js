import { INTERNAL_TRANSFER } from '../../configs/payment-types/internal-transfer';
import { CHAPS } from '../../configs/payment-types/chaps';
import { INTERNATIONAL_TRANSFER } from '../../configs/payment-types/international-transfer';
import { INTRABANK_TRANSFER } from '../../configs/payment-types/intrabank-transfer';
import { SEPA } from '../../configs/payment-types/sepa';
import { UK_FASTER_PAYMENT } from '../../configs/payment-types/uk-faster-payment';
import { US_ACH_CREDIT } from '../../configs/payment-types/us-ach-credit';
import { US_DOMESTIC_WIRE } from '../../configs/payment-types/us-domestic-wire';
import { CounterPartyFields, PaymentBaseFields, ScheduleFields, } from '../../configs/models/form-item-names.model';
import { PaymentTypeIcon } from '../constants';
import { SchemeNames, } from '@backbase/data-ang/payment-order';
import { isObjectTruthy, stripSpaces } from './type-helpers';
import { PaymentTemplateAction, } from '../models/types';
export const getConfig = (configName, parent) => {
    let fields = [];
    if (!configName) {
        return;
    }
    if (Array.isArray(parent)) {
        fields = [...parent];
    }
    else if ((parent === null || parent === void 0 ? void 0 : parent.name) === configName) {
        return parent;
    }
    else {
        fields = parent ? [...parent.fields] : [];
    }
    let config;
    while (fields.length) {
        config = fields.shift();
        if (config) {
            if (config.name === configName) {
                return config;
            }
            else if (config.fields) {
                fields.push(...config.fields);
            }
        }
    }
    return;
};
export const isFormGroupConfig = (config) => Array.isArray(config.fields);
export const isAdditionsGroup = (group) => group.name === PaymentBaseFields.additions ||
    group.name === CounterPartyFields.counterpartyAccountAdditions;
export function getLabelFromPaymentConfig(name, paymentConfig, parentName = '') {
    const parentConfig = parentName
        ? getConfig(parentName, paymentConfig)
        : paymentConfig;
    const config = getConfig(name, parentConfig);
    let label = '';
    if (config) {
        if (isFormGroupConfig(config)) {
            label = config.title || '';
        }
        else if (config.options) {
            label = config.options.label || '';
        }
    }
    return label;
}
export const cloneFormFieldOptions = (options = {}) => {
    const newOptions = Object.assign({}, options);
    for (const key in newOptions) {
        if (Array.isArray(newOptions[key])) {
            newOptions[key] = [...newOptions[key]];
        }
        else if (typeof newOptions[key] === 'object') {
            newOptions[key] = Object.assign({}, newOptions[key]);
        }
    }
    return newOptions;
};
export const clonePaymentFormItem = (formItemConfig) => {
    var _a, _b;
    const configItem = Object.assign({}, formItemConfig);
    if ((_b = (_a = formItemConfig) === null || _a === void 0 ? void 0 : _a.fields) === null || _b === void 0 ? void 0 : _b.length) {
        configItem.fields = formItemConfig.fields.map(clonePaymentFormItem);
    }
    else {
        configItem.options = cloneFormFieldOptions(formItemConfig.options);
    }
    return configItem;
};
export const clonePaymentConfig = (config) => (Object.assign(Object.assign({}, config), { fields: config.fields.map(clonePaymentFormItem) }));
export function setFrequencyOptionsPerConfig(config, isRecurring = false, scheduleConfigOptions) {
    var _a;
    const clonedConfig = clonePaymentConfig(config);
    const schedule = getConfig(PaymentBaseFields.schedule, clonedConfig);
    const frequencyFieldOptions = (_a = getConfig(ScheduleFields.frequency, schedule)) === null || _a === void 0 ? void 0 : _a.options;
    if (isRecurring && !scheduleConfigOptions.isRecurrentToOneOffAllowed) {
        frequencyFieldOptions === null || frequencyFieldOptions === void 0 ? void 0 : frequencyFieldOptions.options.shift();
    }
    else if (!isRecurring &&
        !scheduleConfigOptions.isOneOffToRecurrentAllowed) {
        frequencyFieldOptions.options = [frequencyFieldOptions === null || frequencyFieldOptions === void 0 ? void 0 : frequencyFieldOptions.options[0]];
    }
    return Object.assign({}, clonedConfig);
}
export function removeScheduleFromConfig(config) {
    const clonedConfig = clonePaymentConfig(config);
    return Object.assign(Object.assign({}, clonedConfig), { 
        // Schedule is on the top level so we can skip deep nested checks.
        fields: clonedConfig.fields.filter((field) => field.name !== PaymentBaseFields.schedule) });
}
export const shouldLoadTabContent = (tab, options) => !options.tabs || (Array.isArray(options.tabs) && options.tabs.includes(tab));
export function getIconByPaymnentType(paymentType) {
    const type = normalizePaymentType(paymentType);
    switch (type) {
        case INTERNAL_TRANSFER.paymentType:
        case INTRABANK_TRANSFER.paymentType:
            return PaymentTypeIcon.INTERNAL;
        case INTERNATIONAL_TRANSFER.paymentType:
        case 'US_FOREIGN_WIRE':
            return PaymentTypeIcon.INTERNATIONAL;
        case SEPA.paymentType:
        case 'SEPA_CT':
        case US_DOMESTIC_WIRE.paymentType:
        case US_ACH_CREDIT.paymentType:
        case CHAPS.paymentType:
        case UK_FASTER_PAYMENT.paymentType:
            return PaymentTypeIcon.DOMESTIC;
    }
    return '';
}
export function normalizePaymentType(paymentType) {
    const paymentTypeSuffixes = ['_ILE', '_CLOSED'];
    if (paymentType) {
        let normalisedPaymentType = paymentType;
        paymentTypeSuffixes.forEach((suffix) => {
            if (paymentType.endsWith(suffix)) {
                normalisedPaymentType = paymentType.replace(suffix, '');
            }
        });
        return normalisedPaymentType;
    }
    return;
}
export function hasCreatePermission(item) {
    var _a;
    const actions = ((_a = item) === null || _a === void 0 ? void 0 : _a.actions) || item;
    return !!(actions === null || actions === void 0 ? void 0 : actions.find((action) => action === PaymentTemplateAction.CREATE));
}
export function canCopyPayment(item) {
    var _a;
    return !!((_a = item === null || item === void 0 ? void 0 : item.permissibleActions) === null || _a === void 0 ? void 0 : _a.create);
}
function isModified(currentValue = '', expectedValue = '') {
    if (!currentValue) {
        return false;
    }
    return currentValue !== expectedValue;
}
function getBeneficairyDetails(beneficiary) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
    return {
        bankBranchCode: ((_c = (_b = (_a = beneficiary) === null || _a === void 0 ? void 0 : _a.accounts) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.bankCode) ||
            ((_d = beneficiary) === null || _d === void 0 ? void 0 : _d.bankBranchCode),
        accountNumber: ((_g = (_f = (_e = beneficiary) === null || _e === void 0 ? void 0 : _e.accounts) === null || _f === void 0 ? void 0 : _f[0]) === null || _g === void 0 ? void 0 : _g.accountNumber) ||
            ((_h = beneficiary) === null || _h === void 0 ? void 0 : _h.accountNumber),
        name: beneficiary === null || beneficiary === void 0 ? void 0 : beneficiary.name,
        BIC: ((_l = (_k = (_j = beneficiary) === null || _j === void 0 ? void 0 : _j.accounts) === null || _k === void 0 ? void 0 : _k[0]) === null || _l === void 0 ? void 0 : _l.BIC) ||
            ((_m = beneficiary) === null || _m === void 0 ? void 0 : _m.BIC),
    };
}
export function isSelectedBeneficiaryModified(counterparty, selectedBeneficiary) {
    var _a, _b;
    const beneficiaryDetails = getBeneficairyDetails(selectedBeneficiary);
    return ((isObjectTruthy(beneficiaryDetails) &&
        isModified(counterparty === null || counterparty === void 0 ? void 0 : counterparty.name, beneficiaryDetails.name)) ||
        isModified(stripSpaces(counterparty === null || counterparty === void 0 ? void 0 : counterparty.accountNumber), stripSpaces(beneficiaryDetails.accountNumber)) ||
        isModified((_a = counterparty === null || counterparty === void 0 ? void 0 : counterparty.creditorBank) === null || _a === void 0 ? void 0 : _a.bankBranchCode, beneficiaryDetails.bankBranchCode) ||
        isModified((_b = counterparty === null || counterparty === void 0 ? void 0 : counterparty.creditorBank) === null || _b === void 0 ? void 0 : _b.bic, beneficiaryDetails.BIC));
}
export const getCounterpartySchemeName = (paymentItem) => {
    const { counterparty, selectedBeneficiary } = paymentItem;
    const isBeneficiaryModified = isSelectedBeneficiaryModified(counterparty, selectedBeneficiary);
    let creditorScheme = counterparty.schemeName || SchemeNames.BBAN;
    const beneficiarySchemes = [SchemeNames.BBAN, SchemeNames.IBAN];
    const isOwnAccountTransfer = (selectedBeneficiary === null || selectedBeneficiary === void 0 ? void 0 : selectedBeneficiary.isArrangement) &&
        beneficiarySchemes.includes(creditorScheme);
    // Set scheme to ID when payment template has counterparty id
    if (!selectedBeneficiary &&
        counterparty.id &&
        creditorScheme !== SchemeNames.EXTERNALID) {
        creditorScheme = SchemeNames.ID;
    }
    return isOwnAccountTransfer && !isBeneficiaryModified
        ? SchemeNames.ID
        : creditorScheme;
};
//# sourceMappingURL=payment-config-helpers.js.map