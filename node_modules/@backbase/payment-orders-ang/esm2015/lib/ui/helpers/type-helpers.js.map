{"version":3,"file":"type-helpers.js","sourceRoot":"","sources":["../../../../../../../libs/payment-orders-ang/src/lib/ui/helpers/type-helpers.ts"],"names":[],"mappings":"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","sourcesContent":["import { Address } from '../models/types';\nimport { Bank } from '@backbase/data-ang/payment-order';\n\nexport const toInteger = (value: any): number => parseInt(value, 10) || 0;\n\nexport const modelItemToBoolean = (value: string | boolean): boolean => {\n  if (typeof value === 'boolean') {\n    return value;\n  }\n  return value === 'true';\n};\n\nexport const isObjectTruthy = <T, K extends keyof T>(obj: T): boolean =>\n  obj && Object.keys(obj).some((key) => !!obj[key as K]);\n\nfunction getKeysWithValue(obj: { [key: string]: any }): string[] {\n  return Object.entries(obj).reduce(\n    (acc: Array<string>, [addrKey, addrValue]) => {\n      if (addrValue) {\n        acc.push(addrKey);\n      }\n      return acc;\n    },\n    []\n  );\n}\n\nfunction shouldRemoveCountryFromBeneficiaryBankAddress(\n  address: Bank['postalAddress'] | undefined\n): boolean {\n  let shouldRemoveCountry = false;\n  if (address) {\n    const keysWithValue = getKeysWithValue(address);\n    shouldRemoveCountry =\n      keysWithValue.length === 1 && keysWithValue.indexOf('country') !== -1;\n  }\n  return shouldRemoveCountry;\n}\n\nexport function isCounterpartyObjectEquals(o1: any, o2: any): boolean {\n  const branchCode1 = o1?.creditorBank?.bankBranchCode;\n  const branchCode2 = o2?.creditorBank?.bankBranchCode;\n\n  if (branchCode1 === undefined || branchCode2 === undefined) {\n    delete o1?.creditorBank?.bankBranchCode;\n    delete o2?.creditorBank?.bankBranchCode;\n  }\n\n  // Remove `selectedContact` from comparison (edited payment doesn't have beneficiary's account id)\n  const { selectedContact: toExclude1, ...rest1 } = o1;\n  const { selectedContact: toExclude2, ...rest2 } = o2;\n\n  o1 = rest1;\n  o2 = rest2;\n\n  if (!o1.hideBeneficiaryFields || !o2.hideBeneficiaryFields) {\n    const { hideBeneficiaryFields: toExclude3, ...rest3 } = o1;\n    const { hideBeneficiaryFields: toExclude4, ...rest4 } = o2;\n\n    o1 = rest3;\n    o2 = rest4;\n  }\n\n  if (\n    shouldRemoveCountryFromBeneficiaryBankAddress(\n      o1.creditorBank?.postalAddress\n    ) ||\n    shouldRemoveCountryFromBeneficiaryBankAddress(\n      o2.creditorBank?.postalAddress\n    )\n  ) {\n    const { country: toExclude5, ...rest5 } = o1.creditorBank.postalAddress;\n    const { country: toExclude6, ...rest6 } = o2.creditorBank.postalAddress;\n\n    o1.creditorBank.postalAddress = rest5;\n    o2.creditorBank.postalAddress = rest6;\n  }\n\n  return (o1.id && o1.id === o2.id) || objectEquals(o1, o2);\n}\n\nexport function objectEquals(o1: object, o2: object) {\n  return (\n    JSON.stringify(o1, falsyValueReplacer) ===\n    JSON.stringify(o2, falsyValueReplacer)\n  );\n}\n\nfunction falsyValueReplacer<T>(_: string, val: T): T | '' {\n  return val || '';\n}\n\nexport const isAddressTruthy = (address?: Address) => {\n  const {\n    addressLine1 = '',\n    addressLine2 = '',\n    postCode = '',\n    town = '',\n  } = address || {};\n  return isObjectTruthy({ addressLine1, addressLine2, postCode, town });\n};\n\nexport const filterObjectValues = <T, K extends keyof T>(obj: T) => {\n  for (const key in obj) {\n    if (!obj[key] || !isObjectTruthy(obj[key])) {\n      delete obj[key];\n    }\n  }\n  return obj;\n};\n\nexport const addressToString = (address: Address) =>\n  [\n    address[`addressLine1`],\n    address[`addressLine2`],\n    address[`streetName`],\n    address[`postCode`],\n    address[`town`],\n    address[`countrySubDivision`],\n  ]\n    .filter(Boolean)\n    .join(', ');\n\nexport function stripSpaces(str = '') {\n  return str?.replace(/\\s/g, '');\n}\n\nexport function toNumber(item: string) {\n  return parseFloat(item) || 0;\n}\n\nexport function parseString(str: string, ...args: any): string {\n  let i = 0;\n  return str.replace(/%s/g, () => args[i++]);\n}\n"]}