import { __rest } from "tslib";
export const toInteger = (value) => parseInt(value, 10) || 0;
export const modelItemToBoolean = (value) => {
    if (typeof value === 'boolean') {
        return value;
    }
    return value === 'true';
};
export const isObjectTruthy = (obj) => obj && Object.keys(obj).some((key) => !!obj[key]);
function getKeysWithValue(obj) {
    return Object.entries(obj).reduce((acc, [addrKey, addrValue]) => {
        if (addrValue) {
            acc.push(addrKey);
        }
        return acc;
    }, []);
}
function shouldRemoveCountryFromBeneficiaryBankAddress(address) {
    let shouldRemoveCountry = false;
    if (address) {
        const keysWithValue = getKeysWithValue(address);
        shouldRemoveCountry =
            keysWithValue.length === 1 && keysWithValue.indexOf('country') !== -1;
    }
    return shouldRemoveCountry;
}
export function isCounterpartyObjectEquals(o1, o2) {
    var _a, _b, _c, _d, _e, _f;
    const branchCode1 = (_a = o1 === null || o1 === void 0 ? void 0 : o1.creditorBank) === null || _a === void 0 ? void 0 : _a.bankBranchCode;
    const branchCode2 = (_b = o2 === null || o2 === void 0 ? void 0 : o2.creditorBank) === null || _b === void 0 ? void 0 : _b.bankBranchCode;
    if (branchCode1 === undefined || branchCode2 === undefined) {
        (_c = o1 === null || o1 === void 0 ? void 0 : o1.creditorBank) === null || _c === void 0 ? true : delete _c.bankBranchCode;
        (_d = o2 === null || o2 === void 0 ? void 0 : o2.creditorBank) === null || _d === void 0 ? true : delete _d.bankBranchCode;
    }
    // Remove `selectedContact` from comparison (edited payment doesn't have beneficiary's account id)
    const { selectedContact: toExclude1 } = o1, rest1 = __rest(o1, ["selectedContact"]);
    const { selectedContact: toExclude2 } = o2, rest2 = __rest(o2, ["selectedContact"]);
    o1 = rest1;
    o2 = rest2;
    if (!o1.hideBeneficiaryFields || !o2.hideBeneficiaryFields) {
        const { hideBeneficiaryFields: toExclude3 } = o1, rest3 = __rest(o1, ["hideBeneficiaryFields"]);
        const { hideBeneficiaryFields: toExclude4 } = o2, rest4 = __rest(o2, ["hideBeneficiaryFields"]);
        o1 = rest3;
        o2 = rest4;
    }
    if (shouldRemoveCountryFromBeneficiaryBankAddress((_e = o1.creditorBank) === null || _e === void 0 ? void 0 : _e.postalAddress) ||
        shouldRemoveCountryFromBeneficiaryBankAddress((_f = o2.creditorBank) === null || _f === void 0 ? void 0 : _f.postalAddress)) {
        const _g = o1.creditorBank.postalAddress, { country: toExclude5 } = _g, rest5 = __rest(_g, ["country"]);
        const _h = o2.creditorBank.postalAddress, { country: toExclude6 } = _h, rest6 = __rest(_h, ["country"]);
        o1.creditorBank.postalAddress = rest5;
        o2.creditorBank.postalAddress = rest6;
    }
    return (o1.id && o1.id === o2.id) || objectEquals(o1, o2);
}
export function objectEquals(o1, o2) {
    return (JSON.stringify(o1, falsyValueReplacer) ===
        JSON.stringify(o2, falsyValueReplacer));
}
function falsyValueReplacer(_, val) {
    return val || '';
}
export const isAddressTruthy = (address) => {
    const { addressLine1 = '', addressLine2 = '', postCode = '', town = '', } = address || {};
    return isObjectTruthy({ addressLine1, addressLine2, postCode, town });
};
export const filterObjectValues = (obj) => {
    for (const key in obj) {
        if (!obj[key] || !isObjectTruthy(obj[key])) {
            delete obj[key];
        }
    }
    return obj;
};
export const addressToString = (address) => [
    address[`addressLine1`],
    address[`addressLine2`],
    address[`streetName`],
    address[`postCode`],
    address[`town`],
    address[`countrySubDivision`],
]
    .filter(Boolean)
    .join(', ');
export function stripSpaces(str = '') {
    return str === null || str === void 0 ? void 0 : str.replace(/\s/g, '');
}
export function toNumber(item) {
    return parseFloat(item) || 0;
}
export function parseString(str, ...args) {
    let i = 0;
    return str.replace(/%s/g, () => args[i++]);
}
//# sourceMappingURL=type-helpers.js.map