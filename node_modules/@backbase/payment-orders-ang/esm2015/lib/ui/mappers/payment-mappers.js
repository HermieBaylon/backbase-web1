import { SchemeNames, } from '@backbase/data-ang/payment-order';
import { CounterPartyFields, HiddenFields, InitiatorFields, PaymentBaseFields, PaymentOptionFields, PaymentTemplateFields, RemittanceInfoFields, ScheduleFields, } from '../../configs/models/form-item-names.model';
import { getCounterpartySchemeName } from '../helpers/payment-config-helpers';
import { endTypes, } from '../components/schedule/schedule.component';
import { datePart, scheduleOn } from '../helpers/date-helpers';
import { isObjectTruthy, stripSpaces } from '../helpers/type-helpers';
const normalizePaymentSchedule = (scheduleItem) => {
    const { frequency, endDate, startDate = '', repeat, endType, every, } = scheduleItem || {};
    const freq = (frequency === null || frequency === void 0 ? void 0 : frequency.value) || frequency;
    return Object.assign(Object.assign({ transferFrequency: freq, every: (every || '1'), on: scheduleOn(freq, new Date(startDate)), startDate: datePart(startDate) }, (endType === 'on' && endDate && { endDate: datePart(endDate) })), (endType === 'after' && repeat && { repeat }));
};
//nosonar
export const toPostRequest = (paymentItem) => {
    var _a, _b;
    if (paymentItem[PaymentBaseFields.counterparty][CounterPartyFields.role] ===
        'DEBTOR') {
        paymentItem = switchPaymentParties(paymentItem);
    }
    const { [PaymentBaseFields.counterparty]: { [CounterPartyFields.standardEntryClass]: entryClass, [CounterPartyFields.creditorBank]: creditorBankDetails, [CounterPartyFields.bankName]: bankNameValue, [CounterPartyFields.correspondentBank]: correspondentBankDetails, [CounterPartyFields.intermediaryBank]: intermediaryBankDetails, [CounterPartyFields.recipientId]: recipientId, [CounterPartyFields.accountType]: accountType, [CounterPartyFields.accountNumber]: accountNumber, [CounterPartyFields.name]: counterpartyNameValue, [CounterPartyFields.id]: counterpartyId, [CounterPartyFields.postalAddress]: postalAddress, [CounterPartyFields.messageToBank]: messageToBank, [CounterPartyFields.targetCurrency]: targetCurrency, [CounterPartyFields.remittanceInformation]: remittanceInfo, [CounterPartyFields.endToEndIdentification]: endToEndIdentification, [CounterPartyFields.mandateIdentifier]: mandateIdentifier, [CounterPartyFields.role]: role, [CounterPartyFields.selectedContact]: selectedContact, [CounterPartyFields.additions]: creditorAdditions, [CounterPartyFields.counterpartyAccountAdditions]: counterpartyAccountAdditions, }, [PaymentBaseFields.initiator]: debitorAccount, [PaymentBaseFields.remittanceInfo]: { [RemittanceInfoFields.urgent]: urgent, [RemittanceInfoFields.amountCurrencyGroup]: { amount: amountValue, currency, }, [RemittanceInfoFields.paymentReference]: paymentReference, [RemittanceInfoFields.purposeOfPayment]: purposeOfPayment, [RemittanceInfoFields.description]: description, }, [PaymentBaseFields.schedule]: paymentSchedule, paymentType, approved, chargeBearer, transferFee, [PaymentBaseFields.additions]: additions, } = paymentItem;
    const scheduleItem = normalizePaymentSchedule(paymentSchedule);
    const { [CounterPartyFields.bankBranchCode]: bankBranchCode, [CounterPartyFields.bic]: bankBic, [CounterPartyFields.postalAddress]: bankAddress, [CounterPartyFields.bankName]: creditorBankName, [CounterPartyFields.additions]: creditorBankAdditions, } = creditorBankDetails || {};
    const bankName = bankNameValue || creditorBankName;
    const transferFeeValue = transferFee || {};
    const { [CounterPartyFields.bankBranchCode]: correspondentBankBranchCode, [CounterPartyFields.bic]: correspondentBankBic, [CounterPartyFields.postalAddress]: correspondentBankAddress, [CounterPartyFields.bankName]: correspondentBankName, [CounterPartyFields.additions]: correspondentBankAdditions, } = correspondentBankDetails || {};
    const counterpartyBank = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, (bankBranchCode ? { bankBranchCode } : null)), (bankBic ? { bic: bankBic } : null)), (isObjectTruthy(bankAddress) ? { postalAddress: bankAddress } : null)), (bankName ? { name: bankName } : null)), (isObjectTruthy(creditorBankAdditions)
        ? { additions: creditorBankAdditions }
        : null));
    const { [CounterPartyFields.bankBranchCode]: intermediaryBankBranchCode, [CounterPartyFields.bic]: intermediaryBankBic, [CounterPartyFields.postalAddress]: intermediaryBankAddress, [CounterPartyFields.bankName]: intermediaryBankName, [CounterPartyFields.additions]: intermediaryBankAdditions, } = intermediaryBankDetails || {};
    const correspondentBank = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, (correspondentBankBranchCode
        ? { bankBranchCode: correspondentBankBranchCode }
        : null)), (correspondentBankBic ? { bic: correspondentBankBic } : null)), (isObjectTruthy(correspondentBankAddress)
        ? { postalAddress: correspondentBankAddress }
        : null)), (correspondentBankName ? { name: correspondentBankName } : null)), (isObjectTruthy(correspondentBankAdditions)
        ? { additions: correspondentBankAdditions }
        : null));
    const intermediaryBank = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, (intermediaryBankBranchCode
        ? { bankBranchCode: intermediaryBankBranchCode }
        : null)), (intermediaryBankBic ? { bic: intermediaryBankBic } : null)), (isObjectTruthy(intermediaryBankAddress)
        ? { postalAddress: intermediaryBankAddress }
        : null)), (intermediaryBankName ? { name: intermediaryBankName } : null)), (isObjectTruthy(intermediaryBankAdditions)
        ? { additions: intermediaryBankAdditions }
        : null));
    const remittanceInformation = remittanceInfo || description;
    const scheduledPayment = scheduleItem && scheduleItem.transferFrequency !== 'ONCE'
        ? { paymentMode: 'RECURRING', schedule: { schedule: scheduleItem } }
        : { paymentMode: 'SINGLE', schedule: {} };
    const purposeType = ((_b = (_a = paymentItem.inputFormFromSettings) === null || _a === void 0 ? void 0 : _a.purposesOfPayment) === null || _b === void 0 ? void 0 : _b.length)
        ? 'code'
        : 'freeText';
    const creditorScheme = getCounterpartySchemeName(paymentItem);
    return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ paymentType }, (approved ? { approved } : {})), { originatorAccount: Object.assign({ identification: {
                identification: debitorAccount.id,
                schemeName: 'ID',
            }, name: debitorAccount.name }, (debitorAccount.additions
            ? { additions: debitorAccount.additions }
            : {})), requestedExecutionDate: datePart(paymentSchedule === null || paymentSchedule === void 0 ? void 0 : paymentSchedule.startDate), paymentMode: scheduledPayment.paymentMode }), (entryClass ? { entryClass } : {})), { instructionPriority: urgent ? 'HIGH' : 'NORM' }), scheduledPayment.schedule), { transferTransactionInformation: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ instructedAmount: {
                amount: amountValue,
                currencyCode: currency,
            }, counterparty: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ name: counterpartyNameValue }, (recipientId ? { recipientId } : {})), (isObjectTruthy(postalAddress) ? { postalAddress } : {})), (role ? { role } : {})), (isObjectTruthy(creditorAdditions)
                ? { additions: creditorAdditions }
                : {})), (paymentItem.isDebitPayment ? { role: 'DEBTOR' } : {})), counterpartyAccount: Object.assign(Object.assign(Object.assign({ identification: {
                    identification: creditorScheme === 'ID' || creditorScheme === 'EXTERNAL_ID'
                        ? stripSpaces(counterpartyId)
                        : stripSpaces(accountNumber),
                    schemeName: creditorScheme || 'BBAN',
                } }, (accountType ? { accountType } : {})), (isObjectTruthy(selectedContact) ? { selectedContact } : {})), (isObjectTruthy(counterpartyAccountAdditions)
                ? { additions: counterpartyAccountAdditions }
                : {})) }, (isObjectTruthy(counterpartyBank) ? { counterpartyBank } : {})), (isObjectTruthy(correspondentBank) ? { correspondentBank } : {})), (isObjectTruthy(intermediaryBank) ? { intermediaryBank } : {})), (targetCurrency ? { targetCurrency } : {})), (mandateIdentifier ? { mandateIdentifier } : {})), (endToEndIdentification ? { endToEndIdentification } : {})), (remittanceInformation ? { remittanceInformation } : {})), (messageToBank ? { messageToBank } : {})), (paymentReference ? { messageToBank: paymentReference } : {})), (purposeOfPayment
            ? { purposeOfPayment: { [purposeType]: purposeOfPayment } }
            : {})), (chargeBearer ? { chargeBearer } : {})), (isObjectTruthy(transferFeeValue)
            ? { transferFee: Object.assign({}, transferFeeValue) }
            : {})) }), (isObjectTruthy(additions) ? { additions } : {}));
};
export const toPostPaymentTemplate = (paymentItem) => {
    const name = paymentItem[PaymentTemplateFields.templateName];
    const { paymentType, originatorAccount, instructionPriority, transferTransactionInformation, entryClass, additions, } = toPostRequest(paymentItem);
    return Object.assign(Object.assign(Object.assign({ name,
        paymentType,
        originatorAccount,
        transferTransactionInformation }, (instructionPriority ? { instructionPriority } : {})), (entryClass ? { entryClass } : {})), (isObjectTruthy(additions) ? { additions } : {}));
};
const setMainFormDetails = (form, paymentResponse) => {
    var _a, _b, _c, _d, _e, _f, _g;
    const initiator = form.get(PaymentBaseFields.initiator);
    const counterparty = form.get(PaymentBaseFields.counterparty);
    const remittanceInfo = form.get(PaymentBaseFields.remittanceInfo);
    const additions = form.get(PaymentBaseFields.additions);
    const selectPaymentOption = form.get(PaymentOptionFields.selectPaymentOption);
    const chargeBearer = form.get(PaymentOptionFields.chargeBearer);
    const defaultAddress = {
        addressLine1: '',
        addressLine2: '',
        streetName: '',
        postCode: '',
        town: '',
        countrySubDivision: '',
        country: '',
    };
    const transferTransactionInformation = paymentResponse.transferTransactionInformation || {};
    const counterpartyAccount = transferTransactionInformation.counterpartyAccount || {};
    const counterpartyDetails = transferTransactionInformation.counterparty || {};
    const counterPartyIdentification = counterpartyAccount.identification || {};
    const counterpartyAddress = isObjectTruthy(counterpartyDetails.postalAddress)
        ? counterpartyDetails.postalAddress
        : defaultAddress;
    const originatorAccount = paymentResponse.originatorAccount || {};
    const instructedAmount = transferTransactionInformation.instructedAmount || {};
    const counterpartyBank = transferTransactionInformation.counterpartyBank || {};
    const counterpartyBankDetails = Object.assign(Object.assign(Object.assign({}, counterpartyBank), (counterpartyBank.name ? { bankName: counterpartyBank.name } : null)), {
        postalAddress: isObjectTruthy(counterpartyBank.postalAddress)
            ? counterpartyBank.postalAddress
            : defaultAddress,
    });
    const alphabetRegex = /^[a-zA-Z]*$/;
    const isIbanTransfer = counterPartyIdentification[CounterPartyFields.schemeName] ===
        SchemeNames.IBAN &&
        alphabetRegex.test(counterPartyIdentification.identification.substring(0, 2));
    if (!counterpartyBankDetails.postalAddress.country) {
        counterpartyBankDetails.postalAddress.country = isIbanTransfer
            ? counterPartyIdentification.identification.substring(0, 2)
            : (_a = form.get(HiddenFields.defaultCountry)) === null || _a === void 0 ? void 0 : _a.value;
    }
    const correspondentBank = transferTransactionInformation.correspondentBank || {};
    const correspondentBankDetails = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, correspondentBank), (correspondentBank.name ? { bankName: correspondentBank.name } : null)), { isCorrespondentBankTransfer: isObjectTruthy(correspondentBank) }), (correspondentBank.bankBranchCode
        ? { selectAdditionalBankCodeType: 'BRANCH_CODE' }
        : null)), { [CounterPartyFields.enableAdditionalBankDetails]: isObjectTruthy(correspondentBank) });
    const intermediaryBank = transferTransactionInformation.intermediaryBank || {};
    const intermediaryBankDetails = Object.assign(Object.assign(Object.assign(Object.assign({}, intermediaryBank), (intermediaryBank.name ? { bankName: intermediaryBank.name } : null)), (intermediaryBank.bankBranchCode
        ? { selectAdditionalBankCodeType: 'BRANCH_CODE' }
        : null)), { [CounterPartyFields.enableAdditionalBankDetails]: isObjectTruthy(intermediaryBank) });
    const counterPartyDetails = {
        [CounterPartyFields.standardEntryClass]: paymentResponse.entryClass,
        [CounterPartyFields.creditorBank]: counterpartyBankDetails,
        [CounterPartyFields.correspondentBank]: correspondentBankDetails,
        [CounterPartyFields.intermediaryBank]: intermediaryBankDetails,
        [CounterPartyFields.schemeName]: counterPartyIdentification.schemeName,
        [CounterPartyFields.recipientId]: counterpartyDetails.recipientId,
        [CounterPartyFields.accountType]: counterpartyAccount.accountType,
        [CounterPartyFields.accountNumber]: counterPartyIdentification.identification,
        [CounterPartyFields.name]: counterpartyDetails.name,
        [CounterPartyFields.postalAddress]: counterpartyAddress,
        [CounterPartyFields.messageToBank]: transferTransactionInformation.messageToBank || '',
        [CounterPartyFields.targetCurrency]: transferTransactionInformation.targetCurrency,
        [CounterPartyFields.remittanceInformation]: ((_b = transferTransactionInformation
            .remittanceInformation) === null || _b === void 0 ? void 0 : _b.content)
            ? (_c = transferTransactionInformation.remittanceInformation) === null || _c === void 0 ? void 0 : _c.content
            : transferTransactionInformation.remittanceInformation || '',
        [CounterPartyFields.endToEndIdentification]: transferTransactionInformation.endToEndIdentification,
        [CounterPartyFields.mandateIdentifier]: transferTransactionInformation.mandateIdentifier,
        [CounterPartyFields.role]: counterpartyDetails.role,
        [CounterPartyFields.selectedContact]: counterpartyAccount.selectedContact || {},
        [CounterPartyFields.id]: counterpartyAccount.arrangementId ||
            counterpartyAccount.externalArrangementId,
    };
    const initiatorDetails = {
        [InitiatorFields.id]: originatorAccount.arrangementId,
        [InitiatorFields.name]: originatorAccount.name,
        [InitiatorFields.accountNumber]: originatorAccount.identification &&
            originatorAccount.identification.identification,
        currency: originatorAccount.currency || paymentResponse.originatorAccountCurrency,
        balance: originatorAccount.balance,
    };
    const decimalIndex = (_d = instructedAmount.amount) === null || _d === void 0 ? void 0 : _d.indexOf('.');
    const purposeOfPayment = transferTransactionInformation.purposeOfPayment || {};
    const description = ((_e = transferTransactionInformation.remittanceInformation) === null || _e === void 0 ? void 0 : _e.content)
        ? (_f = transferTransactionInformation.remittanceInformation) === null || _f === void 0 ? void 0 : _f.content
        : transferTransactionInformation.remittanceInformation || '';
    const remittanceInfoDetails = {
        [RemittanceInfoFields.urgent]: paymentResponse.instructionPriority === 'HIGH',
        [RemittanceInfoFields.amountCurrencyGroup]: {
            amount: (_g = instructedAmount.amount) === null || _g === void 0 ? void 0 : _g.slice(0, decimalIndex + 3),
            currency: instructedAmount.currencyCode,
        },
        [RemittanceInfoFields.paymentReference]: transferTransactionInformation.messageToBank || '',
        [RemittanceInfoFields.description]: paymentResponse.paymentReference || description,
        [RemittanceInfoFields.purposeOfPayment]: purposeOfPayment.code || purposeOfPayment.freeText || '',
    };
    const setValues = (control, obj) => {
        if (control) {
            control.patchValue(obj);
        }
    };
    setValues(initiator, initiatorDetails);
    setValues(counterparty, counterPartyDetails);
    setValues(remittanceInfo, remittanceInfoDetails);
    setValues(additions, paymentResponse.additions);
    selectPaymentOption === null || selectPaymentOption === void 0 ? void 0 : selectPaymentOption.patchValue(`${paymentResponse.paymentType}::${paymentResponse.instructionPriority}`);
    chargeBearer === null || chargeBearer === void 0 ? void 0 : chargeBearer.patchValue(transferTransactionInformation.chargeBearer);
    return form;
};
export const setFormDetailsFromService = (form, payment) => {
    const scheduleControl = form.get(PaymentBaseFields.schedule);
    const startDateControl = scheduleControl === null || scheduleControl === void 0 ? void 0 : scheduleControl.get(ScheduleFields.startDate);
    const isPaymentCopyControl = form.get(HiddenFields.isPaymentCopy);
    if (payment.schedule && !(isPaymentCopyControl === null || isPaymentCopyControl === void 0 ? void 0 : isPaymentCopyControl.value)) {
        const schedule = payment.schedule;
        const freqControl = scheduleControl === null || scheduleControl === void 0 ? void 0 : scheduleControl.get(ScheduleFields.frequency);
        const endTypeControl = scheduleControl === null || scheduleControl === void 0 ? void 0 : scheduleControl.get(ScheduleFields.endType);
        const endDateControl = scheduleControl === null || scheduleControl === void 0 ? void 0 : scheduleControl.get(ScheduleFields.endDate);
        const repeatControl = scheduleControl === null || scheduleControl === void 0 ? void 0 : scheduleControl.get(ScheduleFields.repeat);
        startDateControl === null || startDateControl === void 0 ? void 0 : startDateControl.patchValue(new Date(datePart(schedule.startDate)).toISOString());
        freqControl === null || freqControl === void 0 ? void 0 : freqControl.patchValue(schedule.transferFrequency);
        endTypeControl === null || endTypeControl === void 0 ? void 0 : endTypeControl.patchValue(schedule.repeat
            ? endTypes.after
            : schedule.endDate
                ? endTypes.on
                : endTypes.never);
        repeatControl === null || repeatControl === void 0 ? void 0 : repeatControl.patchValue(schedule.repeat || 2);
        if (schedule.endDate) {
            startDateControl === null || startDateControl === void 0 ? void 0 : startDateControl.markAsPristine(); // to prevent overwriting endDate with calculated value
            endDateControl === null || endDateControl === void 0 ? void 0 : endDateControl.patchValue(new Date(schedule.endDate).toISOString());
        }
    }
    else if (!payment.schedule && !(isPaymentCopyControl === null || isPaymentCopyControl === void 0 ? void 0 : isPaymentCopyControl.value)) {
        startDateControl === null || startDateControl === void 0 ? void 0 : startDateControl.patchValue(new Date(payment.requestedExecutionDate || '').toISOString());
    }
    return setMainFormDetails(form, payment);
};
export const setFormDetailsFromResponse = (form, paymentResponse, { id, name } = {}) => {
    const paymentTemplateName = form.get(PaymentTemplateFields.templateName);
    const paymentTemplateId = form.get(PaymentTemplateFields.paymentTemplateId);
    paymentTemplateName === null || paymentTemplateName === void 0 ? void 0 : paymentTemplateName.patchValue(name);
    paymentTemplateId === null || paymentTemplateId === void 0 ? void 0 : paymentTemplateId.patchValue(id);
    return setMainFormDetails(form, paymentResponse);
};
export const switchPaymentParties = (paymentData) => {
    const { role } = CounterPartyFields;
    const { currency } = InitiatorFields;
    const { initiator, counterparty } = PaymentBaseFields;
    const { [currency]: currencyValue } = paymentData[initiator];
    const initiatorValue = Object.assign(Object.assign({}, paymentData[counterparty]), (currencyValue ? { [currency]: currencyValue } : { [currency]: '' }));
    const counterPartyValue = Object.assign(Object.assign({}, paymentData[initiator]), { [role]: paymentData[counterparty][role] });
    return Object.assign(Object.assign({}, paymentData), { [initiator]: initiatorValue, [counterparty]: counterPartyValue });
};
/**
 * @deprecated
 * Will be removed in widget collection v3.11.0
 */
export const updateFreqFieldOptions = (field, isRecurrent, widgetOptions) => {
    const options = [...field.options.options];
    const { isOneOffToRecurrentAllowed, isRecurrentToOneOffAllowed } = widgetOptions;
    if (isRecurrent && !isRecurrentToOneOffAllowed) {
        options.shift();
        field = Object.assign(Object.assign({}, field), { options: Object.assign(Object.assign({}, field.options), { options, defaultValue: options[0].value }) });
    }
    else if (!isRecurrent && !isOneOffToRecurrentAllowed) {
        field = Object.assign(Object.assign({}, field), { options: Object.assign(Object.assign({}, field.options), { options: [options[0]] }) });
    }
    return field;
};
//# sourceMappingURL=payment-mappers.js.map