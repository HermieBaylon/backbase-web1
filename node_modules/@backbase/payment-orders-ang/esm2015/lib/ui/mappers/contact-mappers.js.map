{"version":3,"file":"contact-mappers.js","sourceRoot":"","sources":["../../../../../../../libs/payment-orders-ang/src/lib/ui/mappers/contact-mappers.ts"],"names":[],"mappings":"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","sourcesContent":["import { HttpResponse } from '@angular/common/http';\n\nimport { ContactsPostRequestBody } from '@backbase/data-ang/contact-manager';\nimport {\n  BankDetails,\n  CounterPartyDetails,\n} from '../../configs/models/form-items.model';\nimport { fromResponse } from '../helpers/http-helpers';\nimport { stripSpaces } from '../helpers/type-helpers';\nimport { SchemeNames } from '@backbase/data-ang/payment-order';\nimport { ContactItem, ContactList } from '../models/types';\n\nexport function contactItemFromService(contact: ContactItem) {\n  return {\n    name: contact.name,\n    addressLine1: contact.addressLine1,\n    addressLine2: contact.addressLine2,\n    streetName: contact.streetName,\n    town: contact.town,\n    postCode: contact.postCode,\n    countrySubDivision: contact.countrySubDivision,\n    country: contact.country,\n    accounts: contact.accounts.map((account) => ({\n      ...account,\n      accountNumber: account.accountNumber || account.IBAN || '',\n    })),\n    id: contact.id,\n  };\n}\n\nexport function mapContactAccounts(contact: ContactItem) {\n  return contact.accounts.map((account) => ({\n    name: contact.name,\n    ...(contact.accounts.length > 1 ? { accountName: account.name } : null),\n    addressLine1: contact.addressLine1,\n    addressLine2: contact.addressLine2,\n    streetName: contact.streetName,\n    town: contact.town,\n    postCode: contact.postCode,\n    countrySubDivision: contact.countrySubDivision,\n    country: contact.country,\n    accounts: [\n      {\n        ...account,\n        accountNumber: account.accountNumber || account.IBAN || '',\n        email: account.email || contact.emailId,\n        phoneNumber: account.phoneNumber || contact.phoneNumber,\n      },\n    ],\n    id: contact.id,\n  }));\n}\n\nexport function contactListFromService(\n  response: HttpResponse<ContactItem[]>,\n  isLoadMore = false\n): ContactList {\n  const responseValue = fromResponse(response);\n  const items = responseValue.reduce(\n    (acc: ContactItem[], contact: ContactItem) => {\n      acc.push(...mapContactAccounts(contact));\n      return acc;\n    },\n    []\n  );\n  return {\n    items,\n    itemsCount: responseValue.length,\n    count: parseInt(response.headers.get('x-total-count') as string, 10),\n    isLoadMore,\n  };\n}\n\nexport function contactItemToService(\n  counterparty: CounterPartyDetails\n): ContactsPostRequestBody {\n  const {\n    name,\n    accountNumber,\n    schemeName,\n    creditorBank = {},\n    postalAddress = {},\n  } = counterparty;\n  let schemeValue;\n  switch (schemeName) {\n    case SchemeNames.EMAIL:\n      schemeValue = { email: stripSpaces(accountNumber) };\n      break;\n    case SchemeNames.MOBILE:\n      schemeValue = { phoneNumber: stripSpaces(accountNumber) };\n      break;\n    case SchemeNames.IBAN:\n      schemeValue = { IBAN: stripSpaces(accountNumber) };\n      break;\n    default:\n      schemeValue = { accountNumber: stripSpaces(accountNumber) };\n  }\n\n  return {\n    name,\n    addressLine1: postalAddress.addressLine1,\n    addressLine2: postalAddress.addressLine2,\n    streetName: postalAddress.streetName,\n    town: postalAddress.town,\n    postCode: postalAddress.postCode,\n    countrySubDivision: postalAddress.countrySubDivision,\n    country: postalAddress.country,\n    accounts: [\n      {\n        ...getBankDetails(creditorBank),\n        ...schemeValue,\n      },\n    ],\n  };\n}\n\nexport function getBankDetails({\n  bankBranchCode: bankCode,\n  bic: BIC,\n  bankName,\n  postalAddress = {},\n}: BankDetails) {\n  return {\n    bankCode,\n    BIC,\n    bankName,\n    bankAddressLine1: postalAddress.addressLine1,\n    bankAddressLine2: postalAddress.addressLine2,\n    bankStreetName: postalAddress.streetName,\n    bankPostCode: postalAddress.postCode,\n    bankTown: postalAddress.town,\n    bankCountrySubDivision: postalAddress.countrySubDivision,\n    bankCountry: postalAddress.country,\n  };\n}\n"]}