import { map } from 'rxjs/operators';
import { ProductKinds } from '../../configs/models/form-items.model';
export function arrangementItemFromService(record) {
    return {
        id: record.id,
        name: record.displayName || record.bankAlias || record.name || '',
        alias: (record.userPreferences || {}).alias || record.bankAlias,
        balance: record.bookedBalance || record.availableBalance,
        bookedBalance: record.bookedBalance,
        availableBalance: record.availableBalance,
        creditLimit: record.creditLimit,
        currency: record.currency || '',
        bankBranchCode: record.bankBranchCode || '',
        BIC: record.BIC,
        IBAN: record.IBAN || record.number,
        BBAN: record.BBAN,
        externalTransferAllowed: record.externalTransferAllowed,
        urgentTransferAllowed: record.urgentTransferAllowed,
        additions: record.additions,
        productKindName: record.productKindName,
        isArrangement: true,
        defaultRecord: record,
    };
}
export function arrangementListFromService(response, isLoadMore = false, totalCount) {
    return {
        count: totalCount || response.length,
        items: response.map(arrangementItemFromService),
        isLoadMore,
    };
}
export const accMap = (scheme = 'BBAN') => (source) => source.pipe(map((arrangements) => mapArrangementList(arrangements, scheme)));
export const mapArrangementList = (arrangements, scheme = 'BBAN') => arrangements.items.map((arrangement) => ({
    id: arrangement.id,
    name: arrangement.name,
    displayName: arrangement.displayName,
    alias: arrangement.alias,
    balance: arrangement.bookedBalance,
    bookedBalance: arrangement.bookedBalance,
    availableBalance: arrangement.availableBalance,
    creditLimit: arrangement.creditLimit,
    accountNumber: arrangement[scheme] || arrangement.BBAN || arrangement.IBAN || '',
    number: arrangement[scheme] || arrangement.BBAN || arrangement.IBAN || '',
    bankBranchCode: arrangement.bankBranchCode,
    BIC: arrangement.BIC,
    accountType: scheme,
    currency: arrangement.currency,
    schemeName: arrangement.IBAN ? 'IBAN' : 'BBAN',
    externalTransferAllowed: arrangement.externalTransferAllowed,
    urgentTransferAllowed: arrangement.urgentTransferAllowed,
    additions: arrangement.additions || {},
    productKindName: arrangement.productKindName,
    isArrangement: true,
    defaultRecord: arrangement.defaultRecord,
}));
/**
 * @deprecated
 * This will be removed in the next major version
 * Please use `mapArrangementList` instead
 */
export const mapArrangementToCreditAccount = mapArrangementList;
export const mapConnectedAccounts = (account) => ({
    id: account.externalAccountId,
    name: account.accountNickName || account.bankName,
    accountNumber: account.accountNumber,
    productKindName: ProductKinds.connectedAccounts,
    accountType: account.accountType,
});
//# sourceMappingURL=arrangement-mappers.js.map