import { Injectable } from '@angular/core';
import { PaymentOrdersHttpService as PaymentOrdersService, } from '@backbase/data-ang/payment-order';
import { map } from 'rxjs/operators';
import { Actions } from '../constants/constants';
import { fromResponse } from '../helpers/http-helpers';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/data-ang/payment-order";
export class PaymentOrdersHttpService {
    constructor(paymentsDataHttpService) {
        this.paymentsDataHttpService = paymentsDataHttpService;
    }
    approvalsServiceCall(paymentId, approvalStatus, comment) {
        return this.paymentsDataHttpService
            .putApprovalsByPaymentOrderId({
            paymentOrderId: paymentId,
            paymentOrderApprovalPutRequest: Object.assign({ approvalStatus }, (!!comment && { comment })),
        }, 'response')
            .pipe(map(fromResponse));
    }
    bulkApprovalsServiceCall(paymentOrderIds, approvalStatus, comment) {
        return this.paymentsDataHttpService
            .putBulkApprovals({
            bulkPaymentOrdersApprovalPutRequest: Object.assign({ approvalStatus,
                paymentOrderIds }, (!!comment && { comment })),
        }, 'response')
            .pipe(map(fromResponse));
    }
    loadPayments(params) {
        return this.getPaymentOrders(params).pipe(map((response) => {
            const totalCount = response.headers.get('x-total-count');
            return {
                totalCount: Number(totalCount),
                items: response.body || [],
            };
        }));
    }
    getPaymentOrders(params) {
        return this.paymentsDataHttpService.getPaymentOrders(params, 'response');
    }
    getPayment(id, params) {
        return this.paymentsDataHttpService
            .getPaymentOrderById(Object.assign({ paymentOrderId: id }, params), 'response')
            .pipe(map(fromResponse));
    }
    cancelPayment(paymentOrderId, version) {
        return this.paymentsDataHttpService.deletePaymentOrderById({
            paymentOrderId,
            version,
        });
    }
    postPaymentCancel(paymentOrderId, version) {
        return this.paymentsDataHttpService.postCancelByPaymentOrderId({
            paymentOrderId,
            paymentOrderCancelPostRequest: { version },
        }, 'response');
    }
    getCurrencyExchangeRate(currencyFrom, currencyTo) {
        return this.paymentsDataHttpService.getRate({ currencyFrom, currencyTo }, 'response');
    }
    approvePayment(paymentId, comment) {
        return this.approvalsServiceCall(paymentId, Actions.APPROVE, comment);
    }
    bulkApprovePayments(paymentIds, comment) {
        return this.bulkApprovalsServiceCall(paymentIds, Actions.APPROVE, comment);
    }
    rejectPayment(paymentId, comment) {
        return this.approvalsServiceCall(paymentId, Actions.REJECT, comment);
    }
    bulkRejectPayments(paymentIds, comment) {
        return this.bulkApprovalsServiceCall(paymentIds, Actions.REJECT, comment);
    }
    validatePayment(payment) {
        return this.paymentsDataHttpService
            .postValidate({ paymentOrdersValidatePost: payment }, 'response')
            .pipe(map(fromResponse));
    }
}
/** @nocollapse */ PaymentOrdersHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentOrdersHttpService, deps: [{ token: i1.PaymentOrdersHttpService }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ PaymentOrdersHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentOrdersHttpService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentOrdersHttpService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.PaymentOrdersHttpService }]; } });
//# sourceMappingURL=payment-orders-http.service.js.map