import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { map, shareReplay, tap } from 'rxjs/operators';
import { PaymentOptionsHttpService as PaymentOrderOptionsDataHttpService, SanctionedCountriesHttpService as SanctionedCountriesServiceHttpService, SanctionedCurrenciesHttpService as SanctionedCurrenciesServiceHttpService, } from '@backbase/data-ang/payment-order-options';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/data-ang/payment-order-options";
export class PaymentOptionsService {
    constructor(paymentOptionsData, sanctionedCountriesService, sanctionedCurrenciesService) {
        this.paymentOptionsData = paymentOptionsData;
        this.sanctionedCountriesService = sanctionedCountriesService;
        this.sanctionedCurrenciesService = sanctionedCurrenciesService;
        this.paymentOptionsSubject$ = new BehaviorSubject(undefined);
    }
    get paymentOptions$() {
        return this.paymentOptionsSubject$.asObservable();
    }
    fetchPaymentOptions(payment) {
        return this.paymentOptionsData
            .postPaymentOptions({ paymentOptionsRequest: payment })
            .pipe(tap((response) => {
            this.paymentOptionsSubject$.next(response.options || []);
        }));
    }
    getPaymentOptionsRecordByPaymentType(paymentType) {
        return this.paymentOptionsData
            .getPaymentOptionsByPaymentType({ paymentType })
            .pipe(map((response) => (response && [response]) || []), shareReplay(1));
    }
    getSanctionedCurrencies(countryIso) {
        return this.sanctionedCurrenciesService
            .getSanctionedCurrencies({ countryIso })
            .pipe(map((response) => response || {}));
    }
    getSanctionedCountries(countryIso) {
        return this.sanctionedCountriesService
            .getSanctionedCountries({ countryIso })
            .pipe(map((response) => (response === null || response === void 0 ? void 0 : response.countries) || []));
    }
    resetPaymentOptions() {
        this.paymentOptionsSubject$.next([]);
    }
}
/** @nocollapse */ PaymentOptionsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentOptionsService, deps: [{ token: i1.PaymentOptionsHttpService }, { token: i1.SanctionedCountriesHttpService }, { token: i1.SanctionedCurrenciesHttpService }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ PaymentOptionsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentOptionsService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentOptionsService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.PaymentOptionsHttpService }, { type: i1.SanctionedCountriesHttpService }, { type: i1.SanctionedCurrenciesHttpService }]; } });
//# sourceMappingURL=payment-options.service.js.map