{"version":3,"file":"payments.service.js","sourceRoot":"","sources":["../../../../../../../libs/payment-orders-ang/src/lib/ui/services/payments.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { HttpResponse } from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  OnDestroy,\n  Optional,\n  Provider,\n} from '@angular/core';\nimport {\n  BulkPaymentOrdersApprovalPutResponse,\n  IdentifiedPaymentOrder,\n  PaymentMode,\n  PaymentOrderCancelPostResponse,\n  PaymentOrderGetResponse,\n  PaymentOrdersPostResponse,\n  PaymentOrdersValidatePost,\n  PaymentOrdersValidatePostResponse,\n  RateGet,\n} from '@backbase/data-ang/payment-order';\nimport { ItemModel } from '@backbase/foundation-ang/core';\nimport {\n  BehaviorSubject,\n  merge,\n  Observable,\n  of,\n  ReplaySubject,\n  Subject,\n} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  finalize,\n  map,\n  mapTo,\n  scan,\n  shareReplay,\n  switchMap,\n  takeUntil,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { datePart } from '../helpers/date-helpers';\nimport { PaymentActionsTypes } from '../models/payment-actions-types';\nimport {\n  FlatPaymentsControlsPayloadModel,\n  PaymentsControlsModel,\n} from '../models/payments-controls.model';\nimport {\n  LoadPaymentsParams,\n  PaymentsResponse,\n  PaymentActionsState,\n} from '../models/types';\nimport { PaymentOrdersHttpService } from './payment-orders-http.service';\nimport { DEFAULT_PAYMENT_PARAMS } from './tokens';\n\n@Injectable()\nexport class PaymentService implements OnDestroy {\n  private readonly destroy$ = new Subject();\n  private readonly selectedAccount$ = new Subject<\n    LoadPaymentsParams['query']\n  >();\n  private readonly search$ = new Subject<\n    Partial<FlatPaymentsControlsPayloadModel>\n  >();\n  private readonly changePage$ = new Subject<LoadPaymentsParams['from']>();\n  private readonly loadMore$ = new Subject<LoadPaymentsParams['from']>();\n  private readonly loadPayments$ = new ReplaySubject<\n    LoadPaymentsParams['paymentMode']\n  >(1);\n  private readonly refreshPayments$ = new Subject();\n  private readonly sortPayments$ = new Subject<{\n    orderBy?: LoadPaymentsParams['orderBy'];\n    direction?: LoadPaymentsParams['direction'];\n  }>();\n  private readonly loadingSub$ = new ReplaySubject<boolean>(1);\n  private readonly actingSub$ = new ReplaySubject<boolean>(1);\n  private readonly pageSizeIM$ =\n    this.model?.property<number>('pageSize') || of(null);\n  readonly loading$ = this.loadingSub$.pipe(distinctUntilChanged());\n  readonly acting$ = this.actingSub$.pipe(distinctUntilChanged());\n  private pageSizeSub$ = new BehaviorSubject<number | undefined>(undefined);\n  private debitMode$ = new BehaviorSubject<boolean | undefined>(undefined);\n  private pageSize$ = this.pageSizeSub$.asObservable().pipe(\n    withLatestFrom(this.pageSizeIM$),\n    map(([pageSize, pageSizeIM]) =>\n      //TODO: remove it when migration on journeys for payments will be done\n      pageSize === undefined\n        ? pageSizeIM || this.defaultPaymentsParams.size\n        : pageSize\n    )\n  );\n\n  private loadingCalls = 0;\n  private actingCalls = 0;\n\n  private set loading(val: boolean) {\n    val ? this.loadingCalls++ : this.loadingCalls--;\n    this.loadingSub$.next(this.loadingCalls > 0);\n  }\n\n  private set acting(val: boolean) {\n    val ? this.actingCalls++ : this.actingCalls--;\n    this.actingSub$.next(this.actingCalls > 0);\n  }\n\n  private readonly paymentsActions$ = merge(\n    this.loadPayments$.pipe(\n      map((paymentMode) => ({\n        type: PaymentActionsTypes.LoadPayments,\n        paymentMode,\n      }))\n    ),\n    this.refreshPayments$.pipe(\n      mapTo({ type: PaymentActionsTypes.RefreshPayments })\n    ),\n    this.changePage$.pipe(\n      map((from) => ({ type: PaymentActionsTypes.ChangePage, from }))\n    ),\n    this.loadMore$.pipe(\n      map((from) => ({ type: PaymentActionsTypes.LoadMore, from }))\n    ),\n    this.selectedAccount$.pipe(\n      map((query) => ({ type: PaymentActionsTypes.SelectAccount, query }))\n    ),\n    this.sortPayments$.pipe(\n      map((sortParams) => ({\n        type: PaymentActionsTypes.SelectAccount,\n        ...sortParams,\n      }))\n    ),\n    this.search$.pipe(\n      map((params) => ({ type: PaymentActionsTypes.Search, ...params }))\n    )\n  );\n\n  paymentState$ = this.paymentsActions$.pipe(\n    withLatestFrom(this.pageSize$, this.debitMode$),\n    map(\n      ([state, pageSize, isDebitMode]: [\n        any,\n        number | undefined,\n        boolean | undefined\n      ]) => ({\n        ...state,\n        pageSize,\n        isDebitMode,\n      })\n    ), //TODO: remove it when migration on journeys for payments will be done\n    scan((state: any, action: any) => ({ ...state, ...action })),\n    map((state) => ({ ...this.defaultPaymentsParams, ...(state as object) })),\n    map(({ pageSize, isDebitMode, ...state }: PaymentActionsState) => {\n      const isRefresh = state.type === 'RefreshPayments';\n      const size = pageSize || 50;\n      const from = state.from || 0;\n      return {\n        ...state,\n        size: isRefresh ? size * (from + 1) : size,\n        from: isRefresh ? 0 : from,\n        ...(isDebitMode ? { paymentTypeGroup: 'Debit' } : null),\n      };\n    }),\n    filter((action) => action.type !== undefined),\n    shareReplay(1)\n  );\n\n  private readonly paymentsEffect$ = this.paymentState$.pipe(\n    switchMap(({ type, ...params }) => {\n      const isActing = type === PaymentActionsTypes.SelectAccount;\n      const isLoadMore = type === PaymentActionsTypes.LoadMore;\n\n      isActing ? (this.acting = true) : (this.loading = true);\n\n      return this.paymentOrdersService.loadPayments(params).pipe(\n        map((response) => ({ ...response, isLoadMore })),\n        finalize(() =>\n          isActing ? (this.acting = false) : (this.loading = false)\n        )\n      );\n    }),\n    takeUntil(this.destroy$),\n    shareReplay(1)\n  );\n\n  private readonly paymentsStateSource$ = new BehaviorSubject<\n    { totalCount: number; items: IdentifiedPaymentOrder[] } | undefined\n  >(undefined);\n\n  public get payments$() {\n    return this.paymentsStateSource$.asObservable();\n  }\n\n  constructor(\n    private readonly paymentOrdersService: PaymentOrdersHttpService,\n    @Optional() private readonly model: ItemModel,\n    @Inject(DEFAULT_PAYMENT_PARAMS)\n    private readonly defaultPaymentsParams: LoadPaymentsParams\n  ) {\n    this.paymentsEffect$.subscribe(\n      (payload) => this.handlePaymentSuccess(payload),\n      (error) => this.paymentsStateSource$.error(error)\n    );\n  }\n\n  private handlePaymentSuccess(\n    payload: PaymentsResponse & { isLoadMore: boolean }\n  ) {\n    const orders: IdentifiedPaymentOrder[] = [];\n    if (payload.isLoadMore) {\n      orders.push(...this.handleLoadMore());\n    }\n\n    this.paymentsStateSource$.next({\n      items: [...orders, ...payload.items],\n      totalCount: payload.totalCount || payload.items.length,\n    });\n  }\n\n  private handleLoadMore() {\n    const existingPayments = this.paymentsStateSource$.getValue();\n    return existingPayments ? existingPayments.items : [];\n  }\n\n  loadPayments(paymentMode?: PaymentMode) {\n    this.loadPayments$.next(paymentMode);\n  }\n\n  refreshPayments() {\n    this.refreshPayments$.next();\n  }\n\n  loadMore(from: number) {\n    this.loadMore$.next(from);\n  }\n\n  changePage(from: number) {\n    this.changePage$.next(from);\n  }\n\n  sortPayments(\n    orderBy: LoadPaymentsParams['orderBy'],\n    direction: LoadPaymentsParams['direction']\n  ) {\n    this.sortPayments$.next({ orderBy, direction });\n  }\n\n  setPageSize(value: number) {\n    this.pageSizeSub$.next(value);\n  }\n  setDebitMode(value: boolean) {\n    this.debitMode$.next(value);\n  }\n\n  cancelPayment(\n    paymentOrderId: string,\n    version: number\n  ): Observable<HttpResponse<PaymentOrderCancelPostResponse>> {\n    this.acting = true;\n    return this.paymentOrdersService\n      .cancelPayment(paymentOrderId, version)\n      .pipe(\n        finalize(() => (this.acting = false)),\n        tap(() => {\n          this.handleCancelPaymentSuccess(paymentOrderId);\n        })\n      );\n  }\n\n  private handleCancelPaymentSuccess(paymentOrderId: string) {\n    const payments = this.paymentsStateSource$.getValue();\n    if (payments) {\n      const newItems = payments.items.filter(\n        (item) => item.id !== paymentOrderId\n      );\n      this.paymentsStateSource$.next({\n        items: newItems,\n        totalCount: payments.totalCount,\n      });\n    }\n  }\n\n  getCurrencyExchangeRate(\n    currencyFrom = 'EUR',\n    currencyTo = 'USD'\n  ): Observable<HttpResponse<RateGet>> {\n    return this.paymentOrdersService.getCurrencyExchangeRate(\n      currencyFrom,\n      currencyTo\n    );\n  }\n\n  getPaymentOrders(\n    params: object\n  ): Observable<HttpResponse<IdentifiedPaymentOrder[]>> {\n    return this.paymentOrdersService.getPaymentOrders(params);\n  }\n\n  getPaymentDetails(\n    paymentId: string,\n    params: object\n  ): Observable<PaymentOrderGetResponse> {\n    return this.paymentOrdersService.getPayment(paymentId, params);\n  }\n\n  approvePayment(\n    paymentId: string,\n    comment?: string\n  ): Observable<PaymentOrdersPostResponse> {\n    return this.paymentOrdersService.approvePayment(paymentId, comment);\n  }\n\n  bulkApprovePayments(\n    paymentIds: Array<string>,\n    comment?: string\n  ): Observable<BulkPaymentOrdersApprovalPutResponse | undefined> {\n    return this.paymentOrdersService.bulkApprovePayments(paymentIds, comment);\n  }\n\n  rejectPayment(\n    paymentId: string,\n    comment?: string\n  ): Observable<PaymentOrdersPostResponse> {\n    return this.paymentOrdersService.rejectPayment(paymentId, comment);\n  }\n\n  bulkRejectPayments(\n    paymentIds: Array<string>,\n    comment?: string\n  ): Observable<BulkPaymentOrdersApprovalPutResponse | undefined> {\n    return this.paymentOrdersService.bulkRejectPayments(paymentIds, comment);\n  }\n\n  searchPayments(query: string) {\n    this.search$.next({ query, from: 0 });\n  }\n\n  applyFilter({ amount, executionDate, ...rest }: PaymentsControlsModel): void {\n    const retVal: Partial<FlatPaymentsControlsPayloadModel> = {\n      ...rest,\n      from: 0,\n    };\n\n    if (!retVal.status) {\n      retVal.status = [];\n    }\n\n    retVal.amountFrom = amount.from || '';\n    retVal.amountTo = amount.to || '';\n    retVal.executionDateFrom =\n      executionDate && executionDate.from ? datePart(executionDate.from) : '';\n    retVal.executionDateTo =\n      executionDate && executionDate.to ? datePart(executionDate.to) : '';\n\n    this.search$.next(retVal);\n  }\n\n  postCancelPayment(\n    paymentOrderId: string,\n    version: number\n  ): Observable<HttpResponse<PaymentOrderCancelPostResponse>> {\n    this.acting = true;\n    return this.paymentOrdersService\n      .postPaymentCancel(paymentOrderId, version)\n      .pipe(\n        finalize(() => (this.acting = false)),\n        tap(() => {\n          this.handleCancelPaymentSuccess(paymentOrderId);\n        })\n      );\n  }\n\n  validatePayment(\n    payment: PaymentOrdersValidatePost\n  ): Observable<PaymentOrdersValidatePostResponse> {\n    return this.paymentOrdersService.validatePayment(payment);\n  }\n\n  ngOnDestroy() {\n    // clean up our subjects\n    this.destroy$.complete();\n    this.loadMore$.complete();\n    this.changePage$.complete();\n    this.selectedAccount$.complete();\n    this.search$.complete();\n    this.loadPayments$.complete();\n    this.refreshPayments$.complete();\n  }\n}\n\nexport const providePaymentServices: Provider[] = [\n  { provide: PaymentOrdersHttpService, useClass: PaymentOrdersHttpService },\n  {\n    provide: PaymentService,\n    useClass: PaymentService,\n    deps: [PaymentOrdersHttpService, ItemModel, DEFAULT_PAYMENT_PARAMS],\n  },\n];\n"]}