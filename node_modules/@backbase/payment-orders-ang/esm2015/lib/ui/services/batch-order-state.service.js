import { Injectable } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { BehaviorSubject } from 'rxjs';
import { ManualBatchState } from '../models';
import * as i0 from "@angular/core";
export class BatchOrderStateService {
    constructor() {
        this.batchOrderIdSubject = new BehaviorSubject('');
        this.formSubject = new BehaviorSubject(new FormGroup({}));
        this.stateSubject = new BehaviorSubject(ManualBatchState.INITIAL);
        this.stepSubject = new BehaviorSubject(undefined);
        this.errorsSubject = new BehaviorSubject({});
        this.selectedBatchTemplateSubject = new BehaviorSubject(undefined);
        this.bacthOrderFromTemplateSubject = new BehaviorSubject(undefined);
        this.bacthPaymentsFromTemplateSubject = new BehaviorSubject(undefined);
    }
    get batchOrderId$() {
        return this.batchOrderIdSubject.asObservable();
    }
    get batchOrderId() {
        return this.batchOrderIdSubject.value;
    }
    set batchOrderId(id) {
        this.batchOrderIdSubject.next(id);
    }
    get form$() {
        return this.formSubject.asObservable();
    }
    get formInstance() {
        return this.formSubject.value;
    }
    get state$() {
        return this.stateSubject.asObservable();
    }
    get step$() {
        return this.stepSubject.asObservable();
    }
    get currentState() {
        return this.stateSubject.value;
    }
    get currentStep() {
        return this.stepSubject.value;
    }
    get errors$() {
        return this.errorsSubject.asObservable();
    }
    get selectedBatchTemplate$() {
        return this.selectedBatchTemplateSubject.asObservable();
    }
    get selectedBatchTemplate() {
        return this.selectedBatchTemplateSubject.value;
    }
    get batchOrderFromTemplate$() {
        return this.bacthOrderFromTemplateSubject.asObservable();
    }
    get batchPaymentsFromTemplate$() {
        return this.bacthPaymentsFromTemplateSubject.asObservable();
    }
    saveForm(form) {
        this.formSubject.next(form);
    }
    resetForm() {
        this.formSubject.next(new FormGroup({}));
    }
    setState(paymentState) {
        this.stateSubject.next(paymentState);
    }
    setStep(step) {
        this.stepSubject.next(step);
    }
    resetErrors() {
        this.errorsSubject.next({});
    }
    addError(stepName, error) {
        const errors = this.errorsSubject.value;
        const currentStepErrors = errors[stepName] || [];
        this.errorsSubject.next(Object.assign(Object.assign({}, errors), { [stepName]: [...currentStepErrors, error] }));
    }
    removeErrorAt(stepName, index) {
        const errors = this.errorsSubject.value;
        const currentStepErrors = errors[stepName] || [];
        if (currentStepErrors.length && index < currentStepErrors.length) {
            currentStepErrors.splice(index, 1);
            this.errorsSubject.next(Object.assign(Object.assign({}, errors), { [stepName]: [...currentStepErrors] }));
        }
    }
    selectBatchTemplate(batchTemplate) {
        this.selectedBatchTemplateSubject.next(batchTemplate);
    }
    unselectBatchTemplate() {
        this.selectedBatchTemplateSubject.next(undefined);
    }
    loadBatchOrderFromTemplate(batchOrder) {
        this.bacthOrderFromTemplateSubject.next(batchOrder);
    }
    loadBatchPaymentsFromTemplate(batchPayments) {
        this.bacthPaymentsFromTemplateSubject.next(batchPayments);
    }
    removeBatchOrderFromTemplate() {
        this.bacthOrderFromTemplateSubject.next(undefined);
    }
    removeBatchPaymentsFromTemplate() {
        this.bacthPaymentsFromTemplateSubject.next(undefined);
    }
}
/** @nocollapse */ BatchOrderStateService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BatchOrderStateService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ BatchOrderStateService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BatchOrderStateService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BatchOrderStateService, decorators: [{
            type: Injectable
        }] });
//# sourceMappingURL=batch-order-state.service.js.map