{"version":3,"file":"batch-order-state.service.js","sourceRoot":"","sources":["../../../../../../../libs/payment-orders-ang/src/lib/ui/services/batch-order-state.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport {\n  ErrorItem,\n  IdentifiedBatchPayment,\n} from '@backbase/data-ang/payment-batch';\nimport { StepperConfig } from '../../configs/models/form-items.model';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { ManualBatchState, StepErrors } from '../models';\nimport {\n  BatchOrderFromTemplatePostResponse,\n  BatchTemplate,\n} from '@backbase/data-ang/payment-batch-template';\n\n@Injectable()\nexport class BatchOrderStateService {\n  private readonly batchOrderIdSubject = new BehaviorSubject<string>('');\n  private readonly formSubject = new BehaviorSubject<FormGroup>(\n    new FormGroup({})\n  );\n  private readonly stateSubject = new BehaviorSubject<ManualBatchState>(\n    ManualBatchState.INITIAL\n  );\n  private readonly stepSubject = new BehaviorSubject<StepperConfig | undefined>(\n    undefined\n  );\n  private readonly errorsSubject = new BehaviorSubject<StepErrors>({});\n  private readonly selectedBatchTemplateSubject = new BehaviorSubject<\n    BatchTemplate | undefined\n  >(undefined);\n  private readonly bacthOrderFromTemplateSubject = new BehaviorSubject<\n    BatchOrderFromTemplatePostResponse | undefined\n  >(undefined);\n  private readonly bacthPaymentsFromTemplateSubject = new BehaviorSubject<\n    Array<IdentifiedBatchPayment> | undefined\n  >(undefined);\n\n  public get batchOrderId$(): Observable<string> {\n    return this.batchOrderIdSubject.asObservable();\n  }\n\n  public get batchOrderId(): string {\n    return this.batchOrderIdSubject.value;\n  }\n\n  public set batchOrderId(id: string) {\n    this.batchOrderIdSubject.next(id);\n  }\n\n  public get form$(): Observable<FormGroup> {\n    return this.formSubject.asObservable();\n  }\n\n  public get formInstance() {\n    return this.formSubject.value;\n  }\n\n  public get state$(): Observable<ManualBatchState> {\n    return this.stateSubject.asObservable();\n  }\n\n  public get step$(): Observable<StepperConfig | undefined> {\n    return this.stepSubject.asObservable();\n  }\n\n  public get currentState(): ManualBatchState {\n    return this.stateSubject.value;\n  }\n\n  public get currentStep(): StepperConfig | undefined {\n    return this.stepSubject.value;\n  }\n\n  public get errors$(): Observable<StepErrors> {\n    return this.errorsSubject.asObservable();\n  }\n\n  public get selectedBatchTemplate$(): Observable<BatchTemplate | undefined> {\n    return this.selectedBatchTemplateSubject.asObservable();\n  }\n\n  public get selectedBatchTemplate(): BatchTemplate | undefined {\n    return this.selectedBatchTemplateSubject.value;\n  }\n\n  public get batchOrderFromTemplate$(): Observable<\n    BatchOrderFromTemplatePostResponse | undefined\n  > {\n    return this.bacthOrderFromTemplateSubject.asObservable();\n  }\n\n  public get batchPaymentsFromTemplate$(): Observable<\n    Array<IdentifiedBatchPayment> | undefined\n  > {\n    return this.bacthPaymentsFromTemplateSubject.asObservable();\n  }\n\n  saveForm(form: FormGroup) {\n    this.formSubject.next(form);\n  }\n\n  resetForm() {\n    this.formSubject.next(new FormGroup({}));\n  }\n\n  setState(paymentState: ManualBatchState) {\n    this.stateSubject.next(paymentState);\n  }\n\n  setStep(step: StepperConfig) {\n    this.stepSubject.next(step);\n  }\n\n  resetErrors() {\n    this.errorsSubject.next({});\n  }\n\n  addError(stepName: string, error: ErrorItem) {\n    const errors = this.errorsSubject.value;\n    const currentStepErrors = errors[stepName] || [];\n    this.errorsSubject.next({\n      ...errors,\n      [stepName]: [...currentStepErrors, error],\n    });\n  }\n\n  removeErrorAt(stepName: string, index: number) {\n    const errors = this.errorsSubject.value;\n    const currentStepErrors = errors[stepName] || [];\n    if (currentStepErrors.length && index < currentStepErrors.length) {\n      currentStepErrors.splice(index, 1);\n      this.errorsSubject.next({\n        ...errors,\n        [stepName]: [...currentStepErrors],\n      });\n    }\n  }\n\n  selectBatchTemplate(batchTemplate: BatchTemplate) {\n    this.selectedBatchTemplateSubject.next(batchTemplate);\n  }\n\n  unselectBatchTemplate() {\n    this.selectedBatchTemplateSubject.next(undefined);\n  }\n\n  loadBatchOrderFromTemplate(batchOrder: BatchOrderFromTemplatePostResponse) {\n    this.bacthOrderFromTemplateSubject.next(batchOrder);\n  }\n\n  loadBatchPaymentsFromTemplate(batchPayments: Array<IdentifiedBatchPayment>) {\n    this.bacthPaymentsFromTemplateSubject.next(batchPayments);\n  }\n\n  removeBatchOrderFromTemplate() {\n    this.bacthOrderFromTemplateSubject.next(undefined);\n  }\n\n  removeBatchPaymentsFromTemplate() {\n    this.bacthPaymentsFromTemplateSubject.next(undefined);\n  }\n}\n"]}