{"version":3,"file":"checks.service.js","sourceRoot":"","sources":["../../../../../../../libs/payment-orders-ang/src/lib/ui/services/checks.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,eAAe,CAAC;AACrD,OAAO,EAAE,SAAS,EAAE,MAAM,+BAA+B,CAAC;AAC1D,OAAO,EAAc,aAAa,EAAE,MAAM,MAAM,CAAC;AACjD,OAAO,EACL,qBAAqB,IAAI,iBAAiB,GAI3C,MAAM,gCAAgC,CAAC;AACxC,OAAO,EAAE,oBAAoB,EAAE,QAAQ,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AACrE,OAAO,EAAE,YAAY,EAAE,MAAM,yBAAyB,CAAC;;;;AAGvD,MAAM,OAAO,aAAa;IAQxB,YACiC,KAAgB,EAC9B,yBAA4C;QAD9B,UAAK,GAAL,KAAK,CAAW;QAC9B,8BAAyB,GAAzB,yBAAyB,CAAmB;QAT9C,gBAAW,GAAG,IAAI,aAAa,CAAU,CAAC,CAAC,CAAC;QACpD,aAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,oBAAoB,EAAE,CAAC,CAAC;IAS/D,CAAC;IAPJ,IAAY,OAAO,CAAC,GAAY;QAC9B,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAC7B,CAAC;IAOD,aAAa,CAAC,MAAc;QAC1B,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,OAAO,IAAI,CAAC,yBAAyB;aAClC,aAAa,CAAC,MAAM,EAAE,UAAU,CAAC;aACjC,IAAI,CACH,GAAG,CAAC,YAAY,CAAC,EACjB,QAAQ,CAAC,GAAG,EAAE;YACZ,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QACvB,CAAC,CAAC,CACH,CAAC;IACN,CAAC;IAED,cAAc,CACZ,OAA6B;QAE7B,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,OAAO,IAAI,CAAC,yBAAyB;aAClC,cAAc,CAAC,EAAE,oBAAoB,EAAE,OAAO,EAAE,EAAE,UAAU,CAAC;aAC7D,IAAI,CACH,GAAG,CAAC,YAAY,CAAC,EACjB,QAAQ,CAAC,GAAG,EAAE;YACZ,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QACvB,CAAC,CAAC,CACH,CAAC;IACN,CAAC;;8HArCU,aAAa;kIAAb,aAAa;4FAAb,aAAa;kBADzB,UAAU;;0BAUN,QAAQ","sourcesContent":["import { Injectable, Optional } from '@angular/core';\nimport { ItemModel } from '@backbase/foundation-ang/core';\nimport { Observable, ReplaySubject } from 'rxjs';\nimport {\n  StopChecksHttpService as StopChecksService,\n  StopChecksGetResponse,\n  StopCheckPostResponse,\n  StopCheckPostRequest,\n} from '@backbase/data-ang/stop-checks';\nimport { distinctUntilChanged, finalize, map } from 'rxjs/operators';\nimport { fromResponse } from '../helpers/http-helpers';\n\n@Injectable()\nexport class ChecksService {\n  private readonly loadingSub$ = new ReplaySubject<boolean>(1);\n  readonly loading$ = this.loadingSub$.pipe(distinctUntilChanged());\n\n  private set loading(val: boolean) {\n    this.loadingSub$.next(val);\n  }\n\n  constructor(\n    @Optional() protected readonly model: ItemModel,\n    private readonly stopChecksDataHttpService: StopChecksService\n  ) {}\n\n  getStopChecks(params: object): Observable<StopChecksGetResponse> {\n    this.loading = true;\n    return this.stopChecksDataHttpService\n      .getStopChecks(params, 'response')\n      .pipe(\n        map(fromResponse),\n        finalize(() => {\n          this.loading = false;\n        })\n      );\n  }\n\n  postStopChecks(\n    payload: StopCheckPostRequest\n  ): Observable<StopCheckPostResponse> {\n    this.loading = true;\n    return this.stopChecksDataHttpService\n      .postStopChecks({ stopCheckPostRequest: payload }, 'response')\n      .pipe(\n        map(fromResponse),\n        finalize(() => {\n          this.loading = false;\n        })\n      );\n  }\n}\n"]}