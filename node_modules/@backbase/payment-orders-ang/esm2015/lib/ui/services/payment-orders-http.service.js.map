{"version":3,"file":"payment-orders-http.service.js","sourceRoot":"","sources":["../../../../../../../libs/payment-orders-ang/src/lib/ui/services/payment-orders-http.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { HttpResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport {\n  PaymentOrderCancelPostResponse,\n  PaymentOrdersHttpService as PaymentOrdersService,\n  IdentifiedPaymentOrder,\n  RateGet,\n  PaymentOrdersValidatePost,\n  BulkPaymentOrdersApprovalPutResponse,\n  PaymentOrdersPostResponse,\n  PaymentOrdersValidatePostResponse,\n  RecordStatus,\n  GetPaymentOrdersRequestParams,\n  PaymentOrderGetResponse,\n} from '@backbase/data-ang/payment-order';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { LoadPaymentsParams } from '../models/types';\nimport { Actions } from '../constants/constants';\nimport { fromResponse } from '../helpers/http-helpers';\n\n@Injectable()\nexport class PaymentOrdersHttpService {\n  constructor(private readonly paymentsDataHttpService: PaymentOrdersService) {}\n\n  private approvalsServiceCall(\n    paymentId: string,\n    approvalStatus: RecordStatus,\n    comment?: string\n  ) {\n    return this.paymentsDataHttpService\n      .putApprovalsByPaymentOrderId(\n        {\n          paymentOrderId: paymentId,\n          paymentOrderApprovalPutRequest: {\n            approvalStatus,\n            ...(!!comment && { comment }),\n          },\n        },\n        'response'\n      )\n      .pipe(map(fromResponse));\n  }\n\n  private bulkApprovalsServiceCall(\n    paymentOrderIds: Array<string>,\n    approvalStatus: RecordStatus,\n    comment?: string\n  ) {\n    return this.paymentsDataHttpService\n      .putBulkApprovals(\n        {\n          bulkPaymentOrdersApprovalPutRequest: {\n            approvalStatus,\n            paymentOrderIds,\n            ...(!!comment && { comment }),\n          },\n        },\n        'response'\n      )\n      .pipe(map(fromResponse));\n  }\n\n  loadPayments(params: LoadPaymentsParams): Observable<{\n    totalCount: number;\n    items: IdentifiedPaymentOrder[];\n  }> {\n    return this.getPaymentOrders(params as GetPaymentOrdersRequestParams).pipe(\n      map((response) => {\n        const totalCount = response.headers.get('x-total-count');\n        return {\n          totalCount: Number(totalCount),\n          items: response.body || [],\n        };\n      })\n    );\n  }\n\n  getPaymentOrders(\n    params: GetPaymentOrdersRequestParams\n  ): Observable<HttpResponse<IdentifiedPaymentOrder[]>> {\n    return this.paymentsDataHttpService.getPaymentOrders(params, 'response');\n  }\n\n  getPayment(id: string, params: object): Observable<PaymentOrderGetResponse> {\n    return this.paymentsDataHttpService\n      .getPaymentOrderById(\n        {\n          paymentOrderId: id,\n          ...params,\n        },\n        'response'\n      )\n      .pipe(map(fromResponse));\n  }\n\n  cancelPayment(\n    paymentOrderId: string,\n    version: number\n  ): Observable<HttpResponse<PaymentOrderCancelPostResponse>> {\n    return this.paymentsDataHttpService.deletePaymentOrderById({\n      paymentOrderId,\n      version,\n    });\n  }\n\n  postPaymentCancel(\n    paymentOrderId: string,\n    version: number\n  ): Observable<HttpResponse<PaymentOrderCancelPostResponse>> {\n    return this.paymentsDataHttpService.postCancelByPaymentOrderId(\n      {\n        paymentOrderId,\n        paymentOrderCancelPostRequest: { version },\n      },\n      'response'\n    );\n  }\n\n  getCurrencyExchangeRate(\n    currencyFrom: string,\n    currencyTo: string\n  ): Observable<HttpResponse<RateGet>> {\n    return this.paymentsDataHttpService.getRate(\n      { currencyFrom, currencyTo },\n      'response'\n    );\n  }\n\n  approvePayment(\n    paymentId: string,\n    comment?: string\n  ): Observable<PaymentOrdersPostResponse> {\n    return this.approvalsServiceCall(paymentId, Actions.APPROVE, comment);\n  }\n\n  bulkApprovePayments(\n    paymentIds: Array<string>,\n    comment?: string\n  ): Observable<BulkPaymentOrdersApprovalPutResponse | undefined> {\n    return this.bulkApprovalsServiceCall(paymentIds, Actions.APPROVE, comment);\n  }\n\n  rejectPayment(\n    paymentId: string,\n    comment?: string\n  ): Observable<PaymentOrdersPostResponse> {\n    return this.approvalsServiceCall(paymentId, Actions.REJECT, comment);\n  }\n\n  bulkRejectPayments(\n    paymentIds: Array<string>,\n    comment?: string\n  ): Observable<BulkPaymentOrdersApprovalPutResponse | undefined> {\n    return this.bulkApprovalsServiceCall(paymentIds, Actions.REJECT, comment);\n  }\n\n  validatePayment(\n    payment: PaymentOrdersValidatePost\n  ): Observable<PaymentOrdersValidatePostResponse> {\n    return this.paymentsDataHttpService\n      .postValidate({ paymentOrdersValidatePost: payment }, 'response')\n      .pipe(map(fromResponse));\n  }\n}\n"]}