{"version":3,"file":"multiple-payment.service.js","sourceRoot":"","sources":["../../../../../../../libs/payment-orders-ang/src/lib/ui/services/multiple-payment.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAE3C,OAAO,EACL,UAAU,EACV,GAAG,EACH,SAAS,EACT,IAAI,EACJ,QAAQ,EACR,oBAAoB,GACrB,MAAM,gBAAgB,CAAC;AACxB,OAAO,EAGL,sBAAsB,GASvB,MAAM,kCAAkC,CAAC;AAC1C,OAAO,EACL,yBAAyB,GAG1B,MAAM,2CAA2C,CAAC;AACnD,OAAO,EAAE,eAAe,EAAE,KAAK,EAAc,UAAU,EAAE,KAAK,EAAE,MAAM,MAAM,CAAC;AAC7E,OAAO,EAEL,yBAAyB,GAE1B,MAAM,iCAAiC,CAAC;;;;;AAgBzC,MAAM,OAAO,sBAAsB;IACjC,YACU,iBAAyC,EACzC,oBAA+C,EAC/C,qBAAgD;QAFhD,sBAAiB,GAAjB,iBAAiB,CAAwB;QACzC,yBAAoB,GAApB,oBAAoB,CAA2B;QAC/C,0BAAqB,GAArB,qBAAqB,CAA2B;QAGnD,eAAU,GAAG,KAAK,CAAC;IAFvB,CAAC;IAIJ,0BAA0B,CAAC,MAA6B;QACtD,OAAO,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;IACvD,CAAC;IAED,cAAc,CACZ,IAA4B,EAC5B,YAAoB,EACpB,MAAgB;QAEhB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;QACvB,MAAM,KAAK,GAAiC;YAC1C,sBAAsB,EAAE,IAAI;SAC7B,CAAC;QACF,IAAI,YAAY,KAAK,EAAE,EAAE;YACvB,OAAO,IAAI,CAAC,iBAAiB;iBAC1B,eAAe,CAAC,KAAK,CAAC;iBACtB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC;SAC9C;aAAM;YACL,OAAO,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,YAAY,EAAE,MAAM,CAAC,CAAC;SAC1D;IACH,CAAC;IAED,gBAAgB,CACd,KAA2B,EAC3B,YAAoB,EACpB,MAAgB,EAChB,+BAAwC,EACxC,oBAA6B;QAE7B,OAAO,IAAI,CAAC,iBAAiB;aAC1B,oBAAoB,CAAC;YACpB,YAAY,EAAE,YAAY;YAC1B,MAAM;YACN,oBAAoB,EAAE,KAAK;YAC3B,oBAAoB;YACpB,+BAA+B;SAChC,CAAC;aACD,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC;IAC/C,CAAC;IAED,gBAAgB,CAAC,YAAoB;QACnC,IAAI,CAAC,iBAAiB;aACnB,gCAAgC,CAAC,EAAE,YAAY,EAAE,CAAC;aAClD,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;aACb,SAAS,EAAE,CAAC;IACjB,CAAC;IAED,gBAAgB,CACd,IAA8B,EAC9B,YAAoB;QAEpB,OAAO,IAAI,CAAC,iBAAiB;aAC1B,iBAAiB,CAAC;YACjB,YAAY,EAAE,YAAY;YAC1B,wBAAwB,EAAE,IAAI;SAC/B,CAAC;aACD,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC;IAC/C,CAAC;IAED,aAAa,CACX,YAAoB,EACpB,SAAiB,EACjB,IAA6B;QAE7B,OAAO,IAAI,CAAC,iBAAiB;aAC1B,mBAAmB,CAAC;YACnB,YAAY,EAAE,YAAY;YAC1B,cAAc,EAAE,SAAS;YACzB,uBAAuB,EAAE,IAAI;SAC9B,CAAC;aACD,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC;IAC/C,CAAC;IAED,aAAa,CAAC,YAAoB,EAAE,cAAsB;QACxD,OAAO,IAAI,CAAC,iBAAiB;aAC1B,sBAAsB,CAAC,EAAE,YAAY,EAAE,cAAc,EAAE,CAAC;aACxD,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC;IAC/C,CAAC;IAED,cAAc,CACZ,YAAoB,EACpB,IAAY;QAEZ,MAAM,SAAS,GAAoC;YACjD,yBAAyB,EAAE,EAAE,YAAY,EAAE,IAAI,EAAE;SAClD,CAAC;QACF,OAAO,IAAI,CAAC,oBAAoB;aAC7B,kBAAkB,CAAC,SAAS,CAAC;aAC7B,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;aACzC,SAAS,EAAE,CAAC;IACjB,CAAC;IAED,WAAW,CACT,YAAoB,EACpB,OAAO,GAAG,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE;QAEjC,OAAO,IAAI,CAAC,iBAAiB;aAC1B,oBAAoB,iBAAG,YAAY,IAAK,OAAO,EAAG;aAClD,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;aACzC,SAAS,EAAE,CAAC;IACjB,CAAC;IAEO,kBAAkB,CAAC,QAA2B;QACpD,QAAQ,QAAQ,CAAC,MAAM,EAAE;YACvB,KAAK,GAAG;gBACN,OAAO,UAAU,CACf,QAAQ,CAAC,KAAK,IAAI;oBAChB,OAAO,EAAE,eAAe;oBACxB,MAAM,EAAE,CAAC,EAAE,OAAO,EAAE,eAAe,EAAE,CAAC;iBACvC,CACF,CAAC;YACJ,KAAK,GAAG;gBACN,OAAO,UAAU,CAAC;oBAChB,IAAI,EAAE,SAAS;oBACf,OAAO,EAAE,iBAAiB;oBAC1B,UAAU,EAAE,qBAAqB;iBAClC,CAAC,CAAC;YACL;gBACE,OAAO,UAAU,CAAC;oBAChB,IAAI,EAAE,SAAS;oBACf,OAAO,EAAE,eAAe;oBACxB,UAAU,EAAE,yDAAyD;iBACtE,CAAC,CAAC;SACN;IACH,CAAC;IAEO,qBAAqB,CAC3B,MAA6B;QAE7B,MAAM,OAAO,GAAG,IAAI,eAAe,CAAS,EAAE,CAAC,CAAC;QAEhD,MAAM,MAAM,GAAG,OAAO,CAAC,IAAI,CACzB,oBAAoB,EAAE,EACtB,QAAQ,CAAC,CAAC,UAAkB,EAAE,EAAE,CAC9B,UAAU,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,YAAY,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CACrD,EACD,SAAS,CAAC,CAAC,UAAkB,EAAE,EAAE;YAC/B,MAAM,MAAM,mCAAQ,MAAM,GAAK,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAE,CAAC;YACpE,OAAO,IAAI,CAAC,qBAAqB;iBAC9B,iCAAiC,CAAC,MAAM,CAAC;iBACzC,IAAI,CACH,GAAG,CAAC,CAAC,YAAkC,EAAE,EAAE,CACzC,YAAY,CAAC,GAAG,CAAC,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;gBACjC,EAAE,EAAE,WAAW,CAAC,EAAE;gBAClB,IAAI,EAAE,WAAW,CAAC,IAAI,IAAI,EAAE;gBAC5B,KAAK,EACH,CAAC,WAAW,CAAC,eAAe,IAAI,EAAE,CAAC,CAAC,KAAK;oBACzC,WAAW,CAAC,SAAS;gBACvB,OAAO,EACL,WAAW,CAAC,gBAAgB,IAAI,WAAW,CAAC,aAAa;gBAC3D,aAAa,EAAE,WAAW,CAAC,aAAa;gBACxC,gBAAgB,EAAE,WAAW,CAAC,gBAAgB;gBAC9C,WAAW,EAAE,WAAW,CAAC,WAAW;gBACpC,QAAQ,EAAE,WAAW,CAAC,QAAQ,IAAI,EAAE;gBACpC,IAAI,EAAE,WAAW,CAAC,IAAI,IAAI,WAAW,CAAC,MAAM;gBAC5C,IAAI,EAAE,WAAW,CAAC,IAAI;gBACtB,aAAa,EAAE,WAAW,CAAC,IAAI,IAAI,WAAW,CAAC,IAAI,IAAI,EAAE;gBAEzD,MAAM,EAAE,WAAW,CAAC,IAAI,IAAI,EAAE;gBAC9B,cAAc,EAAE,WAAW,CAAC,cAAc;gBAC1C,uBAAuB,EAAE,WAAW,CAAC,uBAAuB;gBAC5D,qBAAqB,EAAE,WAAW,CAAC,qBAAqB;gBACxD,SAAS,EAAE,WAAW,CAAC,SAAS;gBAChC,eAAe,EAAE,WAAW,CAAC,eAAe;gBAC5C,mBAAmB,EAAE,WAAW;aACjC,CAAC,CAAC,CACJ,CACF,CAAC;QACN,CAAC,CAAC,CACH,CAAC;QAEF,OAAO;YACL,OAAO;YACP,MAAM;SACP,CAAC;IACJ,CAAC;;uIAxLU,sBAAsB;2IAAtB,sBAAsB,cAFrB,MAAM;4FAEP,sBAAsB;kBAHlC,UAAU;mBAAC;oBACV,UAAU,EAAE,MAAM;iBACnB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport {\n  catchError,\n  map,\n  switchMap,\n  take,\n  debounce,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {\n  BatchOrderPutRequest,\n  BatchOrderPutResponse,\n  BatchOrdersHttpService,\n  BatchOrdersPostRequest,\n  BatchOrdersPostResponse,\n  BatchPaymentsGetResponse,\n  BatchPaymentsPostRequest,\n  BatchPaymentsPostResponse,\n  BatchPaymentsPutRequest,\n  BatchPaymentsPutResponse,\n  PostBatchOrdersRequestParams,\n} from '@backbase/data-ang/payment-batch';\nimport {\n  BatchTemplatesHttpService,\n  BatchTemplatesPostResponse,\n  PostBatchTemplatesRequestParams,\n} from '@backbase/data-ang/payment-batch-template';\nimport { BehaviorSubject, EMPTY, Observable, throwError, timer } from 'rxjs';\nimport {\n  GetArrangementsByBusinessFunctionRequestParams,\n  ProductSummaryHttpService,\n  ProductSummaryItem,\n} from '@backbase/data-ang/arrangements';\nimport { InternalAccountFormItem } from '../models/types';\n\ninterface ObservableArrangements {\n  search$: BehaviorSubject<string>;\n  items$: Observable<InternalAccountFormItem[]>;\n}\n\ninterface AccountsFactoryConfig\n  extends GetArrangementsByBusinessFunctionRequestParams {\n  debounceTime?: number;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MultiplePaymentService {\n  constructor(\n    private batchOrderService: BatchOrdersHttpService,\n    private batchTemplateService: BatchTemplatesHttpService,\n    private productSummaryService: ProductSummaryHttpService\n  ) {}\n\n  public submitting = false;\n\n  createFetchAccountsFactory(config: AccountsFactoryConfig) {\n    return this._fetchAccountsFactory.bind(this, config);\n  }\n\n  saveBatchOrder(\n    data: BatchOrdersPostRequest,\n    batchOrderID: string,\n    dryRun?: boolean\n  ): Observable<BatchOrdersPostResponse | BatchOrderPutResponse> {\n    this.submitting = true;\n    const param: PostBatchOrdersRequestParams = {\n      batchOrdersPostRequest: data,\n    };\n    if (batchOrderID === '') {\n      return this.batchOrderService\n        .postBatchOrders(param)\n        .pipe(catchError(this.catchResponseError));\n    } else {\n      return this.updateBatchOrder(data, batchOrderID, dryRun);\n    }\n  }\n\n  updateBatchOrder(\n    event: BatchOrderPutRequest,\n    batchOrderID: string,\n    dryRun?: boolean,\n    intendedCreditTransactionsCount?: number,\n    intendedCreditAmount?: number\n  ): Observable<BatchOrderPutResponse> {\n    return this.batchOrderService\n      .updateBatchOrderById({\n        batchOrderId: batchOrderID,\n        dryRun,\n        batchOrderPutRequest: event,\n        intendedCreditAmount,\n        intendedCreditTransactionsCount,\n      })\n      .pipe(catchError(this.catchResponseError));\n  }\n\n  cancelDraftOrder(batchOrderId: string) {\n    this.batchOrderService\n      .deleteBatchOrderIdByBatchOrderId({ batchOrderId })\n      .pipe(take(1))\n      .subscribe();\n  }\n\n  saveDraftPayment(\n    data: BatchPaymentsPostRequest,\n    batchOrderID: string\n  ): Observable<BatchPaymentsPostResponse | null> {\n    return this.batchOrderService\n      .postBatchPayments({\n        batchOrderId: batchOrderID,\n        batchPaymentsPostRequest: data,\n      })\n      .pipe(catchError(this.catchResponseError));\n  }\n\n  updatePayment(\n    batchOrderID: string,\n    paymentID: string,\n    data: BatchPaymentsPutRequest\n  ): Observable<BatchPaymentsPutResponse | null> {\n    return this.batchOrderService\n      .putBatchPaymentById({\n        batchOrderId: batchOrderID,\n        batchPaymentId: paymentID,\n        batchPaymentsPutRequest: data,\n      })\n      .pipe(catchError(this.catchResponseError));\n  }\n\n  deletePayment(batchOrderId: string, batchPaymentId: string): Observable<any> {\n    return this.batchOrderService\n      .deleteBatchPaymentById({ batchOrderId, batchPaymentId })\n      .pipe(catchError(this.catchResponseError));\n  }\n\n  saveAsTemplate(\n    batchOrderId: string,\n    name: string\n  ): Promise<BatchTemplatesPostResponse> {\n    const parameter: PostBatchTemplatesRequestParams = {\n      batchTemplatesPostRequest: { batchOrderId, name },\n    };\n    return this.batchTemplateService\n      .postBatchTemplates(parameter)\n      .pipe(catchError(this.catchResponseError))\n      .toPromise();\n  }\n\n  getPayments(\n    batchOrderId: string,\n    options = { from: 0, size: 1000 }\n  ): Promise<BatchPaymentsGetResponse> {\n    return this.batchOrderService\n      .getBatchPaymentsById({ batchOrderId, ...options })\n      .pipe(catchError(this.catchResponseError))\n      .toPromise();\n  }\n\n  private catchResponseError(response: HttpErrorResponse) {\n    switch (response.status) {\n      case 400:\n        return throwError(\n          response.error || {\n            message: 'Unknown error',\n            errors: [{ message: 'Unknown error' }],\n          }\n        );\n      case 401:\n        return throwError({\n          type: 'TIMEOUT',\n          message: 'Session Timeout',\n          subMessage: 'Please login again.',\n        });\n      default:\n        return throwError({\n          type: 'GENERIC',\n          message: 'Unknown Error',\n          subMessage: 'Try to reload the page or contact system administrator.',\n        });\n    }\n  }\n\n  private _fetchAccountsFactory(\n    config: AccountsFactoryConfig\n  ): ObservableArrangements {\n    const search$ = new BehaviorSubject<string>('');\n\n    const items$ = search$.pipe(\n      distinctUntilChanged(),\n      debounce((searchTerm: string) =>\n        searchTerm ? timer(config.debounceTime || 0) : EMPTY\n      ),\n      switchMap((searchTerm: string) => {\n        const params = { ...config, ...(searchTerm ? { searchTerm } : {}) };\n        return this.productSummaryService\n          .getArrangementsByBusinessFunction(params)\n          .pipe(\n            map((arrangements: ProductSummaryItem[]) =>\n              arrangements.map((arrangement) => ({\n                id: arrangement.id,\n                name: arrangement.name || '',\n                alias:\n                  (arrangement.userPreferences || {}).alias ||\n                  arrangement.bankAlias,\n                balance:\n                  arrangement.availableBalance || arrangement.bookedBalance,\n                bookedBalance: arrangement.bookedBalance,\n                availableBalance: arrangement.availableBalance,\n                creditLimit: arrangement.creditLimit,\n                currency: arrangement.currency || '',\n                IBAN: arrangement.IBAN || arrangement.number,\n                BBAN: arrangement.BBAN,\n                accountNumber: arrangement.BBAN || arrangement.IBAN || '',\n\n                number: arrangement.BBAN || '',\n                bankBranchCode: arrangement.bankBranchCode,\n                externalTransferAllowed: arrangement.externalTransferAllowed,\n                urgentTransferAllowed: arrangement.urgentTransferAllowed,\n                additions: arrangement.additions,\n                productKindName: arrangement.productKindName,\n                originalArrangement: arrangement,\n              }))\n            )\n          );\n      })\n    );\n\n    return {\n      search$,\n      items$,\n    };\n  }\n}\n"]}