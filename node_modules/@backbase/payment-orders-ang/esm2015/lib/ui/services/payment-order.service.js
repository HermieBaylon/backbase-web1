import { __rest } from "tslib";
import { Inject, Injectable, Optional } from '@angular/core';
import { ContactsHttpService as ContactsService, } from '@backbase/data-ang/contact-manager';
import { PaymentOrdersHttpService as PaymentOrdersService, } from '@backbase/data-ang/payment-order';
import { PaymentTemplatesHttpService as PaymentTemplatesService, } from '@backbase/data-ang/payment-template';
import { A2aClientHttpService as A2aClientService, } from '@backbase/data-ang/payment-order-a2a';
import { ProductSummaryHttpService } from '@backbase/data-ang/arrangements';
import { BehaviorSubject, EMPTY, of, Subject, timer } from 'rxjs';
import { catchError, debounce, exhaustMap, map, pluck, scan, shareReplay, switchMap, tap, } from 'rxjs/operators';
import { arrangementsPageSize, BeneficiaryList, contactsPageSize, dataItemPermissionParams, defaultPrivilege, defaultResourceName, paymentTemplatesPageSize, } from '../constants';
import { arrangementItemFromService, contactListFromService } from '../mappers';
import { UsersHttpService } from '@backbase/data-ang/accesscontrol';
import { BB_PAYORD_OMNI_PAYMENT_CONFIG_TOKEN } from '../../configs/constants';
import { DeprecationsService } from '@backbase/foundation-ang/core';
import { NotificationService } from '@backbase/ui-ang/notification';
import { fromResponse } from '../helpers/http-helpers';
import { PaymentTemplateAction, } from '../models/types';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/data-ang/payment-order";
import * as i2 from "@backbase/data-ang/payment-template";
import * as i3 from "@backbase/data-ang/contact-manager";
import * as i4 from "@backbase/data-ang/arrangements";
import * as i5 from "@backbase/data-ang/accesscontrol";
import * as i6 from "@backbase/ui-ang/notification";
import * as i7 from "@backbase/data-ang/payment-order-a2a";
import * as i8 from "@backbase/foundation-ang/core";
const initialTemplatesParams = {
    from: 0,
    size: paymentTemplatesPageSize,
    intendedAction: PaymentTemplateAction.CREATE,
};
export class PaymentOrderHttpService {
    constructor(paymentOrderData, paymentTemplateData, contactsData, productSummaryData, accessgroupData, notificationService, settings, paymentOrdersA2ADataHttpService, deprecationService) {
        this.paymentOrderData = paymentOrderData;
        this.paymentTemplateData = paymentTemplateData;
        this.contactsData = contactsData;
        this.productSummaryData = productSummaryData;
        this.accessgroupData = accessgroupData;
        this.notificationService = notificationService;
        this.settings = settings;
        this.paymentOrdersA2ADataHttpService = paymentOrdersA2ADataHttpService;
        this.deprecationService = deprecationService;
        this.paymentResponseSubject = new Subject();
        this.contactsGetParams = new BehaviorSubject({
            from: 0,
            size: contactsPageSize,
        });
        this.creditAccountsParams = new BehaviorSubject({
            from: 0,
            creditAccount: true,
            size: arrangementsPageSize,
        });
        this.debitAccountsParams$ = new BehaviorSubject({
            from: 0,
            debitAccount: true,
            size: arrangementsPageSize,
        });
        this.paymentTemplateParams = new BehaviorSubject(initialTemplatesParams);
        this.creditAccountsParameters$ = this.creditAccountsParams.pipe(map(this.buildArrangementsContextParameters.bind(this)));
        this.dataItemParams$ = new Subject();
        this.loading$ = new BehaviorSubject(true);
        this.dataItemPermissions$ = this.dataItemParams$.pipe(switchMap((id) => this.handleDataItemPermissions(id)));
        this.arrangementUserPermissions$ = this.dataItemParams$.pipe(switchMap((id) => this.getArrangementUserPermission(id)));
        this.createPermission$ = this.settings ? this.getUserPermission() : EMPTY;
        this.paymentResponse = this.paymentResponseSubject.asObservable();
        this.debitAccounts = this.debitAccountsParams$.pipe(map(this.buildArrangementsContextParameters.bind(this)), exhaustMap((params) => this.fetchArrangementList(params)), shareReplay(1), scan((acc, curr) => {
            const { merge, from } = this.debitAccountsParams$.value;
            return this.mergeArrangementList(acc, curr, from > 0 && !!merge);
        }));
        this.contacts = this.contactsGetParams.pipe(exhaustMap((_a) => {
            var { isLoadMore } = _a, params = __rest(_a, ["isLoadMore"]);
            return this.contactsData.getContacts(params, 'response').pipe(map((response) => contactListFromService(response, isLoadMore)), catchError((err) => of(err)));
        }), shareReplay(1));
        this.creditAccounts = this.creditAccountsParameters$.pipe(exhaustMap((params) => this.fetchArrangementList(params)), shareReplay(1), scan((acc, curr) => {
            const { merge, from } = this.creditAccountsParams.value;
            return this.mergeArrangementList(acc, curr, from > 0 && !!merge);
        }), catchError((err) => of(err)));
        this.connectedAccounts$ = this.paymentOrdersA2ADataHttpService
            .getAll('response')
            .pipe(map(fromResponse), map((res) => res.accounts && res.accounts.filter((acc) => acc.status === 'Active')), shareReplay(1));
        this.paymentTemplates$ = this.paymentTemplateParams.pipe(tap(() => this.loading$.next(true)), debounce((par) => (par.query ? timer(1000) : EMPTY)), switchMap((params) => this.loadPaymentTemplates(Object.assign(Object.assign({}, params), { paymentType: this.paymentType }))), scan((acc, curr) => this.mergeResults(acc, curr)), tap(() => this.loading$.next(false)));
        this.templatesList$ = (paymentType) => this.paymentTemplateData
            .getPaymentTemplates(Object.assign(Object.assign({}, initialTemplatesParams), { paymentType }), 'response')
            .pipe(map((response) => response.body));
        this.deprecationService.logDeprecatedFeature('"handleDataItemPermissions" method and "dataItemPermissions$" property are deprecated and will be removed in next major release');
    }
    buildArrangementsContextParameters(params) {
        var _a;
        return Object.assign({ resourceName: this.resourceName || defaultResourceName, businessFunction: (_a = this.arrangementBusFunctions) !== null && _a !== void 0 ? _a : this.businessFunction, privilege: this.privilege || defaultPrivilege }, params);
    }
    fetchArrangementList(params) {
        return this.productSummaryData.getArrangementsByBusinessFunction(params, 'response').pipe(map(({ headers, body }) => {
            const totalCount = headers.get('x-total-count') || '0';
            const items = body || [];
            return {
                count: parseInt(totalCount, 10) || items.length,
                items: items.map(arrangementItemFromService),
            };
        }));
    }
    getUserPermission() {
        return this.accessgroupData
            .getCheckUserPermission(Object.assign(Object.assign({}, this.settings.businessConfig), { privileges: 'create' }), 'response')
            .pipe(shareReplay(1));
    }
    postPaymentOrder(paymentOrder) {
        return this.paymentOrderData.postPaymentOrders({ paymentOrdersPost: paymentOrder });
    }
    putPaymentOrder(paymentOrder, paymentOrderId) {
        return this.paymentOrderData.putPaymentOrderById({
            paymentOrderId,
            paymentOrderPut: paymentOrder,
        });
    }
    getPayment(id) {
        return this.paymentOrderData.getPaymentOrderById({ paymentOrderId: id }, 'response').pipe(map(fromResponse));
    }
    getPaymentProgressStatus(paymentOrderId) {
        return this.paymentOrderData
            .getProgressStatusByPaymentOrderId({ paymentOrderId }, 'response')
            .pipe(map((response) => response.body));
    }
    handleDataItemPermissions(dataItemId) {
        return this.accessgroupData
            .getDataItemPermissionsContext({
            resourceName: dataItemPermissionParams.resourceName,
            privilege: dataItemPermissionParams.privilege,
            dataGroupType: dataItemPermissionParams.dataGroupType,
            dataItemId,
        })
            .pipe(pluck(0, 'permissions'), map((permissions) => permissions === null || permissions === void 0 ? void 0 : permissions.map((permission) => permission.businessFunction)));
    }
    getArrangementUserPermission(id) {
        return this.accessgroupData
            .getArrangementUserPermissionCheck({
            id,
            resource: dataItemPermissionParams.resourceName,
            function: this.businessFunction,
            privilege: dataItemPermissionParams.privilege,
        })
            .pipe(catchError((error) => of(error)));
    }
    loadDataItemPermissions(id) {
        this.dataItemParams$.next(id);
    }
    ngOnDestroy() {
        this.paymentResponseSubject.complete();
        this.contactsGetParams.complete();
        this.creditAccountsParams.complete();
    }
    loadMoreContacts(page = 0, params) {
        this.contactsGetParams.next(Object.assign({ from: page, isLoadMore: true, size: contactsPageSize }, params));
    }
    loadMoreCreditAccounts(page = 0, params) {
        this.creditAccountsParams.next(Object.assign(Object.assign(Object.assign({ from: page, creditAccount: true }, ((params === null || params === void 0 ? void 0 : params.query) && { searchTerm: params.query })), { isLoadMore: true, size: arrangementsPageSize }), params));
    }
    fetchCreditAccounts(query = '', params) {
        this.contactsGetParams.next(Object.assign(Object.assign(Object.assign({}, (query && { query })), { from: 0 }), params));
        this.creditAccountsParams.next(Object.assign(Object.assign(Object.assign({}, (query && { searchTerm: query })), { from: 0, creditAccount: true }), params));
    }
    loadMoreDebitAccounts(params) {
        this.debitAccountsParams$.next(Object.assign(Object.assign({}, this.debitAccountsParams$.value), params));
    }
    validatePayment(payment) {
        return this.paymentOrderData
            .postValidate({ paymentOrdersValidatePost: payment }, 'response')
            .pipe(map(fromResponse));
    }
    saveNewContact(contact) {
        return this.contactsData.postContacts({ contactsPostRequestBody: contact }, 'response').pipe(map((res) => res.body), catchError(() => of(null)));
    }
    postPaymentTemplate(requestObject) {
        return this.paymentTemplateData
            .postPaymentTemplates({ paymentTemplatesPostRequest: requestObject })
            .pipe(tap(() => this.loadMore(0)));
    }
    editPaymentTemplate(paymentTemplateId, paymentTemplatesPutRequest) {
        return this.paymentTemplateData.putPaymentTemplateById({
            paymentTemplateId,
            paymentTemplatesPutRequest,
        });
    }
    getCurrencyExchangeRate(currencyFrom, currencyTo) {
        return this.paymentOrderData.getRate({ currencyFrom, currencyTo }, 'response').pipe(map((response) => response && response.body), catchError(() => of(null)));
    }
    getAccountByAccountId(id, accountNumber) {
        return this.productSummaryData
            .getArrangementsByBusinessFunction({
            resourceName: this.resourceName || defaultResourceName,
            businessFunction: this.businessFunction,
            privilege: this.privilege || defaultPrivilege,
            searchTerm: accountNumber,
        }, 'response')
            .pipe(map(fromResponse), map((items) => items.find((item) => item.id === id)), map((item) => {
            if (item) {
                return arrangementItemFromService(item);
            }
            else {
                throw new Error('No account found...');
            }
        }));
    }
    loadPaymentTemplates(params) {
        return this.paymentTemplateData.getPaymentTemplates(params, 'response').pipe(map((response) => {
            const items = response.body || [];
            return {
                items,
                totalCount: parseInt(response.headers.get('x-total-count') || '0', 10) || items.length,
                params,
            };
        }));
    }
    mergeResults(acc, curr) {
        return {
            totalCount: curr.totalCount || curr.items.length,
            items: curr.params.from === 0 ? curr.items : [...acc.items, ...curr.items],
            params: curr.params,
        };
    }
    mergeArrangementList(accumulator, currentValue, merge) {
        return {
            count: currentValue.count || currentValue.items.length,
            items: merge ? [...accumulator.items, ...currentValue.items] : currentValue.items,
        };
    }
    loadMore(page) {
        const currentPage = this.paymentTemplateParams.value.from || 0;
        this.paymentTemplateParams.next(Object.assign(Object.assign({}, this.paymentTemplateParams.value), { from: currentPage + page }));
    }
    search(query) {
        this.paymentTemplateParams.next(Object.assign(Object.assign(Object.assign({}, this.paymentTemplateParams.value), { from: 0 }), { query }));
    }
    manageErrorResponse(response) {
        var _a, _b;
        const notification = {
            header: response.notificationHeader,
            headerContext: response.errorResponse,
            message: '',
        };
        if ((_a = response.errors) === null || _a === void 0 ? void 0 : _a.length) {
            (_b = response.errors) === null || _b === void 0 ? void 0 : _b.forEach((responseError) => {
                var _a;
                (_a = response.paymentErrors) === null || _a === void 0 ? void 0 : _a.errorData.find((err) => {
                    if (responseError.key === err.key) {
                        responseError.message = err.message;
                    }
                });
                if (!responseError.message && response.genericMessage) {
                    responseError.message = response.genericMessage;
                }
                notification.message = responseError.message;
                this.showNotification(false, notification);
            });
        }
        else {
            if (response.genericMessage) {
                notification.message = response.genericMessage;
            }
            this.showNotification(false, notification);
        }
    }
    showNotification(success, notification) {
        this.notificationService.showNotification(Object.assign({ dismissible: true, ttl: 5000, modifier: success ? 'success' : 'error', header: '', message: '' }, notification));
    }
    getContacts(params) {
        this.contactsGetParams.next(Object.assign(Object.assign({}, this.contactsGetParams.value), params));
        return this.contacts;
    }
    getCreditAccounts(params) {
        this.creditAccountsParams.next(Object.assign(Object.assign(Object.assign({}, this.creditAccountsParams.value), ((params === null || params === void 0 ? void 0 : params.query) && { searchTerm: params.query })), params));
        return this.creditAccounts;
    }
    getDebitAccounts(params) {
        this.debitAccountsParams$.next(Object.assign(Object.assign({}, this.debitAccountsParams$.value), params));
        return this.debitAccounts.pipe(shareReplay(1));
    }
    fetchBeneficiaries(params, type) {
        const { from, size, query } = params;
        switch (type) {
            case BeneficiaryList.ACCOUNTS:
                this.loadMoreCreditAccounts(from, { size, query });
                break;
            case BeneficiaryList.CONTACTS:
                this.loadMoreContacts(from, { size, query });
                break;
            default:
                this.fetchCreditAccounts(query, { size });
                break;
        }
    }
}
/** @nocollapse */ PaymentOrderHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentOrderHttpService, deps: [{ token: i1.PaymentOrdersHttpService }, { token: i2.PaymentTemplatesHttpService }, { token: i3.ContactsHttpService }, { token: i4.ProductSummaryHttpService }, { token: i5.UsersHttpService }, { token: i6.NotificationService }, { token: BB_PAYORD_OMNI_PAYMENT_CONFIG_TOKEN, optional: true }, { token: i7.A2aClientHttpService }, { token: i8.DeprecationsService }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ PaymentOrderHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentOrderHttpService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentOrderHttpService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.PaymentOrdersHttpService }, { type: i2.PaymentTemplatesHttpService }, { type: i3.ContactsHttpService }, { type: i4.ProductSummaryHttpService }, { type: i5.UsersHttpService }, { type: i6.NotificationService }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [BB_PAYORD_OMNI_PAYMENT_CONFIG_TOKEN]
                }] }, { type: i7.A2aClientHttpService }, { type: i8.DeprecationsService }]; } });
//# sourceMappingURL=payment-order.service.js.map