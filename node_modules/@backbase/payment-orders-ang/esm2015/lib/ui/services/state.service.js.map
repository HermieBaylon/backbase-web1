{"version":3,"file":"state.service.js","sourceRoot":"","sources":["../../../../../../../libs/payment-orders-ang/src/lib/ui/services/state.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAE3C,OAAO,EAAE,eAAe,EAAc,MAAM,MAAM,CAAC;AACnD,OAAO,EAAE,YAAY,EAAE,MAAM,WAAW,CAAC;;AAKzC,MAAM,OAAO,YAAY;IADzB;QAEmB,gBAAW,GAAG,IAAI,eAAe,CAChD,IAAI,SAAS,CAAC,EAAE,CAAC,CAClB,CAAC;QACe,wBAAmB,GAAG,IAAI,eAAe,CACxD,YAAY,CAAC,OAAO,CACrB,CAAC;QACM,sBAAiB,GAAG,KAAK,CAAC;QACjB,2BAAsB,GAAG,IAAI,eAAe,CAE3D,SAAS,CAAC,CAAC;QACI,uBAAkB,GAAG,IAAI,eAAe,CAEvD,SAAS,CAAC,CAAC;KAgEd;IA7DC,IAAW,KAAK;QACd,OAAO,IAAI,CAAC,WAAW,CAAC,YAAY,EAAE,CAAC;IACzC,CAAC;IAED,IAAW,YAAY;QACrB,OAAO,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;IAChC,CAAC;IAED,IAAW,aAAa;QACtB,OAAO,IAAI,CAAC,mBAAmB,CAAC,YAAY,EAAE,CAAC;IACjD,CAAC;IAED,IAAW,YAAY;QACrB,OAAO,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC;IACxC,CAAC;IAED,IAAW,UAAU;QACnB,OAAO,IAAI,CAAC,iBAAiB,CAAC;IAChC,CAAC;IAED,IAAW,UAAU,CAAC,iBAA0B;QAC9C,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;IAC7C,CAAC;IAED,IAAW,qBAAqB;QAC9B,OAAO,IAAI,CAAC,sBAAsB,CAAC,YAAY,EAAE,CAAC;IACpD,CAAC;IAED,IAAW,iBAAiB;QAG1B,OAAO,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC;IAChD,CAAC;IAED,IAAW,oBAAoB;QAC7B,OAAO,IAAI,CAAC,wBAAwB,CAAC;IACvC,CAAC;IAED,IAAW,oBAAoB,CAAC,SAAqC;QACnE,IAAI,CAAC,wBAAwB,GAAG,SAAS,CAAC;IAC5C,CAAC;IAED,QAAQ,CAAC,IAAe;QACtB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC9B,CAAC;IAED,SAAS;QACP,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;IAC3C,CAAC;IAED,eAAe,CAAC,YAA0B;QACxC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IAC9C,CAAC;IAED,kBAAkB,CAAC,QAAqC;QACtD,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC7C,CAAC;IAED,cAAc,CAAC,OAA2C;QACxD,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACxC,CAAC;;6HA5EU,YAAY;iIAAZ,YAAY;4FAAZ,YAAY;kBADxB,UAAU","sourcesContent":["import { Injectable } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { PaymentTemplate } from '@backbase/data-ang/payment-template';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { PaymentState } from '../models';\nimport { IdentifiedPaymentOrder } from '@backbase/data-ang/payment-order';\nimport { PaymentDetails } from '../../configs/models/form-items.model';\n\n@Injectable()\nexport class StateService {\n  private readonly formSubject = new BehaviorSubject<FormGroup>(\n    new FormGroup({})\n  );\n  private readonly paymentStateSubject = new BehaviorSubject<PaymentState>(\n    PaymentState.INITIAL\n  );\n  private canApprovePayment = false;\n  private readonly paymentTemplateSubject = new BehaviorSubject<\n    PaymentTemplate | undefined\n  >(undefined);\n  private readonly paymentEditSubject = new BehaviorSubject<\n    IdentifiedPaymentOrder | undefined\n  >(undefined);\n  private initialEditFormValueItem?: PaymentDetails;\n\n  public get form$(): Observable<FormGroup> {\n    return this.formSubject.asObservable();\n  }\n\n  public get formInstance() {\n    return this.formSubject.value;\n  }\n\n  public get paymentState$(): Observable<PaymentState> {\n    return this.paymentStateSubject.asObservable();\n  }\n\n  public get currentState(): PaymentState {\n    return this.paymentStateSubject.value;\n  }\n\n  public get canApprove(): boolean {\n    return this.canApprovePayment;\n  }\n\n  public set canApprove(canApprovePayment: boolean) {\n    this.canApprovePayment = canApprovePayment;\n  }\n\n  public get paymentTemplateState$(): Observable<PaymentTemplate | undefined> {\n    return this.paymentTemplateSubject.asObservable();\n  }\n\n  public get paymentEditState$(): Observable<\n    IdentifiedPaymentOrder | undefined\n  > {\n    return this.paymentEditSubject.asObservable();\n  }\n\n  public get initialEditFormValue(): PaymentDetails | undefined {\n    return this.initialEditFormValueItem;\n  }\n\n  public set initialEditFormValue(formValue: PaymentDetails | undefined) {\n    this.initialEditFormValueItem = formValue;\n  }\n\n  saveForm(form: FormGroup) {\n    this.formSubject.next(form);\n  }\n\n  resetForm() {\n    this.formSubject.next(new FormGroup({}));\n  }\n\n  setPaymentState(paymentState: PaymentState) {\n    this.paymentStateSubject.next(paymentState);\n  }\n\n  setPaymentTemplate(template: PaymentTemplate | undefined) {\n    this.paymentTemplateSubject.next(template);\n  }\n\n  setEditPayment(payment: IdentifiedPaymentOrder | undefined) {\n    this.paymentEditSubject.next(payment);\n  }\n}\n"]}