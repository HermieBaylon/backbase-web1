{"version":3,"file":"payment-options.service.js","sourceRoot":"","sources":["../../../../../../../libs/payment-orders-ang/src/lib/ui/services/payment-options.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,eAAe,EAAc,MAAM,MAAM,CAAC;AACnD,OAAO,EAAE,GAAG,EAAE,WAAW,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AACvD,OAAO,EAEL,yBAAyB,IAAI,kCAAkC,EAG/D,8BAA8B,IAAI,qCAAqC,EAGvE,+BAA+B,IAAI,sCAAsC,GAE1E,MAAM,0CAA0C,CAAC;;;AAGlD,MAAM,OAAO,qBAAqB;IAKhC,YACmB,kBAAsD,EACtD,0BAAiE,EACjE,2BAAmE;QAFnE,uBAAkB,GAAlB,kBAAkB,CAAoC;QACtD,+BAA0B,GAA1B,0BAA0B,CAAuC;QACjE,gCAA2B,GAA3B,2BAA2B,CAAwC;QAPtF,2BAAsB,GAAG,IAAI,eAAe,CAE1C,SAAS,CAAC,CAAC;IAMV,CAAC;IAEJ,IAAI,eAAe;QACjB,OAAO,IAAI,CAAC,sBAAsB,CAAC,YAAY,EAAE,CAAC;IACpD,CAAC;IAED,mBAAmB,CACjB,OAA8B;QAE9B,OAAO,IAAI,CAAC,kBAAkB;aAC3B,kBAAkB,CAAC,EAAE,qBAAqB,EAAE,OAAO,EAAE,CAAC;aACtD,IAAI,CACH,GAAG,CAAC,CAAC,QAAgC,EAAE,EAAE;YACvC,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC;QAC3D,CAAC,CAAC,CACH,CAAC;IACN,CAAC;IAED,oCAAoC,CAClC,WAAmB;QAEnB,OAAO,IAAI,CAAC,kBAAkB;aAC3B,8BAA8B,CAAC,EAAE,WAAW,EAAE,CAAC;aAC/C,IAAI,CACH,GAAG,CAAC,CAAC,QAAuB,EAAE,EAAE,CAAC,CAAC,QAAQ,IAAI,CAAC,QAAQ,CAAC,CAAC,IAAI,EAAE,CAAC,EAChE,WAAW,CAAC,CAAC,CAAC,CACf,CAAC;IACN,CAAC;IAED,uBAAuB,CACrB,UAAmB;QAEnB,OAAO,IAAI,CAAC,2BAA2B;aACpC,uBAAuB,CAAC,EAAE,UAAU,EAAE,CAAC;aACvC,IAAI,CAAC,GAAG,CAAC,CAAC,QAAsC,EAAE,EAAE,CAAC,QAAQ,IAAI,EAAE,CAAC,CAAC,CAAC;IAC3E,CAAC;IAED,sBAAsB,CACpB,UAAmB;QAEnB,OAAO,IAAI,CAAC,0BAA0B;aACnC,sBAAsB,CAAC,EAAE,UAAU,EAAE,CAAC;aACtC,IAAI,CACH,GAAG,CACD,CAAC,QAAqC,EAAE,EAAE,CAAC,CAAA,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,SAAS,KAAI,EAAE,CACrE,CACF,CAAC;IACN,CAAC;IAED,mBAAmB;QACjB,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IACvC,CAAC;;sIA5DU,qBAAqB;0IAArB,qBAAqB;4FAArB,qBAAqB;kBADjC,UAAU","sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map, shareReplay, tap } from 'rxjs/operators';\nimport {\n  PaymentOption,\n  PaymentOptionsHttpService as PaymentOrderOptionsDataHttpService,\n  PaymentOptionsRequest,\n  PaymentOptionsResponse,\n  SanctionedCountriesHttpService as SanctionedCountriesServiceHttpService,\n  SanctionedCountriesResponse,\n  SanctionedCountry,\n  SanctionedCurrenciesHttpService as SanctionedCurrenciesServiceHttpService,\n  SanctionedCurrenciesResponse,\n} from '@backbase/data-ang/payment-order-options';\n\n@Injectable()\nexport class PaymentOptionsService {\n  paymentOptionsSubject$ = new BehaviorSubject<\n    Array<PaymentOption> | undefined\n  >(undefined);\n\n  constructor(\n    private readonly paymentOptionsData: PaymentOrderOptionsDataHttpService,\n    private readonly sanctionedCountriesService: SanctionedCountriesServiceHttpService,\n    private readonly sanctionedCurrenciesService: SanctionedCurrenciesServiceHttpService\n  ) {}\n\n  get paymentOptions$() {\n    return this.paymentOptionsSubject$.asObservable();\n  }\n\n  fetchPaymentOptions(\n    payment: PaymentOptionsRequest\n  ): Observable<PaymentOptionsResponse> {\n    return this.paymentOptionsData\n      .postPaymentOptions({ paymentOptionsRequest: payment })\n      .pipe(\n        tap((response: PaymentOptionsResponse) => {\n          this.paymentOptionsSubject$.next(response.options || []);\n        })\n      );\n  }\n\n  getPaymentOptionsRecordByPaymentType(\n    paymentType: string\n  ): Observable<PaymentOption[]> {\n    return this.paymentOptionsData\n      .getPaymentOptionsByPaymentType({ paymentType })\n      .pipe(\n        map((response: PaymentOption) => (response && [response]) || []),\n        shareReplay(1)\n      );\n  }\n\n  getSanctionedCurrencies(\n    countryIso?: string\n  ): Observable<SanctionedCurrenciesResponse> {\n    return this.sanctionedCurrenciesService\n      .getSanctionedCurrencies({ countryIso })\n      .pipe(map((response: SanctionedCurrenciesResponse) => response || {}));\n  }\n\n  getSanctionedCountries(\n    countryIso?: string\n  ): Observable<Array<SanctionedCountry>> {\n    return this.sanctionedCountriesService\n      .getSanctionedCountries({ countryIso })\n      .pipe(\n        map(\n          (response: SanctionedCountriesResponse) => response?.countries || []\n        )\n      );\n  }\n\n  resetPaymentOptions() {\n    this.paymentOptionsSubject$.next([]);\n  }\n}\n"]}