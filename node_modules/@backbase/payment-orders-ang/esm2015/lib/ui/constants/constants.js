export var Preferences;
(function (Preferences) {
    Preferences[Preferences["PAGE_SIZE"] = 50] = "PAGE_SIZE";
    Preferences[Preferences["MAX_NAV_SIZE"] = 3] = "MAX_NAV_SIZE";
    Preferences[Preferences["NOTIFICATION_DISMISS_TIMEOUT"] = 5000] = "NOTIFICATION_DISMISS_TIMEOUT";
    Preferences[Preferences["DEBOUNCE_TIME"] = 300] = "DEBOUNCE_TIME";
    Preferences[Preferences["INFINITE_SCROLL_OFFSET"] = 150] = "INFINITE_SCROLL_OFFSET";
})(Preferences || (Preferences = {}));
export var LoadMoreMethod;
(function (LoadMoreMethod) {
    LoadMoreMethod["PAGINATION"] = "pagination";
    LoadMoreMethod["LOAD_MORE"] = "load-more";
})(LoadMoreMethod || (LoadMoreMethod = {}));
export var StatusBadgeColorMap;
(function (StatusBadgeColorMap) {
    StatusBadgeColorMap["OPEN"] = "success";
    StatusBadgeColorMap["CLOSED"] = "danger";
    StatusBadgeColorMap["INVALID"] = "danger";
    StatusBadgeColorMap["VALID"] = "success";
    StatusBadgeColorMap["ENTERED"] = "primary";
    StatusBadgeColorMap["ACCEPTED"] = "success";
    StatusBadgeColorMap["APPROVED"] = "success";
    StatusBadgeColorMap["REJECTED"] = "danger";
    StatusBadgeColorMap["PROCESSED"] = "success";
    StatusBadgeColorMap["CANCELLED"] = "danger";
    StatusBadgeColorMap["CANCELLATION_PENDING"] = "danger";
    StatusBadgeColorMap["READY"] = "primary";
    StatusBadgeColorMap["ACKNOWLEDGED"] = "warning";
    StatusBadgeColorMap["DOWNLOADING"] = "warning";
    StatusBadgeColorMap["EXPIRED"] = "secondary";
    StatusBadgeColorMap["PENDING"] = "warning";
})(StatusBadgeColorMap || (StatusBadgeColorMap = {}));
export var AvailableActions;
(function (AvailableActions) {
    AvailableActions["APPROVE"] = "APPROVE";
    AvailableActions["REJECT"] = "REJECT";
    AvailableActions["CANCEL"] = "CANCEL";
    AvailableActions["DELETE"] = "DELETE";
    AvailableActions["EDIT"] = "EDIT";
    AvailableActions["CREATE"] = "CREATE";
})(AvailableActions || (AvailableActions = {}));
export var Actions;
(function (Actions) {
    Actions["APPROVE"] = "APPROVED";
    Actions["REJECT"] = "REJECTED";
})(Actions || (Actions = {}));
export var BatchOrderActions;
(function (BatchOrderActions) {
    BatchOrderActions["APPROVE"] = "APPROVED";
    BatchOrderActions["REJECT"] = "REJECTED";
    BatchOrderActions["CANCEL"] = "CANCELLED";
    BatchOrderActions["DELETE"] = "DELETED";
})(BatchOrderActions || (BatchOrderActions = {}));
export var Status;
(function (Status) {
    Status["OPEN"] = "OPEN";
    Status["CLOSED"] = "CLOSED";
    Status["INVALID"] = "INVALID";
    Status["VALID"] = "VALID";
    Status["ENTERED"] = "ENTERED";
    Status["READY"] = "READY";
    Status["ACCEPTED"] = "ACCEPTED";
    Status["APPROVED"] = "APPROVED";
    Status["REJECTED"] = "REJECTED";
    Status["CANCELLED"] = "CANCELLED";
    Status["CANCELLATION_PENDING"] = "CANCELLATION_PENDING";
    Status["PROCESSED"] = "PROCESSED";
    Status["ACKNOWLEDGED"] = "ACKNOWLEDGED";
    Status["DOWNLOADING"] = "DOWNLOADING";
    Status["EXPIRED"] = "EXPIRED";
    Status["PENDING"] = "PENDING";
    /**
     * PROCESSING is Front-end only, convert to `READY`, `ACKNOWLEDGED`,
     * and `DOWNLOADING` before sending to server.
     */
    Status["PROCESSING"] = "PROCESSING";
})(Status || (Status = {}));
export var BatchUploadStatus;
(function (BatchUploadStatus) {
    BatchUploadStatus["OPEN"] = "OPEN";
    BatchUploadStatus["DUPLICATE"] = "DUPLICATE";
    BatchUploadStatus["UPLOADING"] = "UPLOADING";
    BatchUploadStatus["DONE"] = "DONE";
})(BatchUploadStatus || (BatchUploadStatus = {}));
export var ApprovalStatus;
(function (ApprovalStatus) {
    ApprovalStatus["PENDING"] = "PENDING";
    ApprovalStatus["APPROVED"] = "APPROVED";
    ApprovalStatus["REJECTED"] = "REJECTED";
    ApprovalStatus["CANCELLED"] = "CANCELLED";
})(ApprovalStatus || (ApprovalStatus = {}));
export var DuplicateBatchAction;
(function (DuplicateBatchAction) {
    DuplicateBatchAction["SUBMIT"] = "SUBMIT";
    DuplicateBatchAction["DELETE"] = "DELETE";
})(DuplicateBatchAction || (DuplicateBatchAction = {}));
export var ScheduleEndType;
(function (ScheduleEndType) {
    ScheduleEndType["NEVER"] = "never";
    ScheduleEndType["ON"] = "on";
    ScheduleEndType["AFTER"] = "after";
})(ScheduleEndType || (ScheduleEndType = {}));
export var Frequencies;
(function (Frequencies) {
    Frequencies["ONCE"] = "ONCE";
    Frequencies["DAILY"] = "DAILY";
    Frequencies["WEEKLY"] = "WEEKLY";
    Frequencies["BIWEEKLY"] = "BIWEEKLY";
    Frequencies["MONTHLY"] = "MONTHLY";
    Frequencies["QUARTERLY"] = "QUARTERLY";
    Frequencies["YEARLY"] = "YEARLY";
})(Frequencies || (Frequencies = {}));
export var PaymentModes;
(function (PaymentModes) {
    PaymentModes["SINGLE"] = "SINGLE";
    PaymentModes["RECURRING"] = "RECURRING";
    PaymentModes["ALL"] = "ALL";
})(PaymentModes || (PaymentModes = {}));
export const DefaultDebounceTime = 300;
export const SearchMinLength = 3;
export const today = new Date();
/**
 * Label for each value is set using Angular recommended approach
 * https://angular.io/guide/i18n#select-among-alternative-text-messages
 * Template example
 * <span i18n="Schedule frequency list|List of available schedule frequencies@@bb-schedule-ui.frequency.list"
 * >{item.frequency.value, select, other {once} DAILY {daily} WEEKLY {weekly}}</span>
 */
export const frequencies = [
    {
        value: 'ONCE',
        every: '1',
    },
    {
        value: 'DAILY',
        every: '1',
    },
    {
        value: 'WEEKLY',
        every: '1',
    },
    {
        value: 'BIWEEKLY',
        every: '1',
    },
    {
        value: 'MONTHLY',
        every: '1',
    },
    {
        value: 'QUARTERLY',
        every: '1',
    },
    {
        value: 'YEARLY',
        every: '1',
    },
];
export const USStates = [
    { id: 'AL', name: 'Alabama' },
    { id: 'AK', name: 'Alaska' },
    { id: 'AS', name: 'American Samoa' },
    { id: 'AZ', name: 'Arizona' },
    { id: 'AR', name: 'Arkansas' },
    { id: 'CA', name: 'California' },
    { id: 'CO', name: 'Colorado' },
    { id: 'CT', name: 'Connecticut' },
    { id: 'DE', name: 'Delaware' },
    { id: 'DC', name: 'District Of Columbia' },
    { id: 'FM', name: 'Federated States Of Micronesia' },
    { id: 'FL', name: 'Florida' },
    { id: 'GA', name: 'Georgia' },
    { id: 'GU', name: 'Guam' },
    { id: 'HI', name: 'Hawaii' },
    { id: 'ID', name: 'Idaho' },
    { id: 'IL', name: 'Illinois' },
    { id: 'IN', name: 'Indiana' },
    { id: 'IA', name: 'Iowa' },
    { id: 'KS', name: 'Kansas' },
    { id: 'KY', name: 'Kentucky' },
    { id: 'LA', name: 'Louisiana' },
    { id: 'ME', name: 'Maine' },
    { id: 'MH', name: 'Marshall Islands' },
    { id: 'MD', name: 'Maryland' },
    { id: 'MA', name: 'Massachusetts' },
    { id: 'MI', name: 'Michigan' },
    { id: 'MN', name: 'Minnesota' },
    { id: 'MS', name: 'Mississippi' },
    { id: 'MO', name: 'Missouri' },
    { id: 'MT', name: 'Montana' },
    { id: 'NE', name: 'Nebraska' },
    { id: 'NV', name: 'Nevada' },
    { id: 'NH', name: 'New Hampshire' },
    { id: 'NJ', name: 'New Jersey' },
    { id: 'NM', name: 'New Mexico' },
    { id: 'NY', name: 'New York' },
    { id: 'NC', name: 'North Carolina' },
    { id: 'ND', name: 'North Dakota' },
    { id: 'MP', name: 'Northern Mariana Islands' },
    { id: 'OH', name: 'Ohio' },
    { id: 'OK', name: 'Oklahoma' },
    { id: 'OR', name: 'Oregon' },
    { id: 'PW', name: 'Palau' },
    { id: 'PA', name: 'Pennsylvania' },
    { id: 'PR', name: 'Puerto Rico' },
    { id: 'RI', name: 'Rhode Island' },
    { id: 'SC', name: 'South Carolina' },
    { id: 'SD', name: 'South Dakota' },
    { id: 'TN', name: 'Tennessee' },
    { id: 'TX', name: 'Texas' },
    { id: 'UT', name: 'Utah' },
    { id: 'VT', name: 'Vermont' },
    { id: 'VI', name: 'Virgin Islands' },
    { id: 'VA', name: 'Virginia' },
    { id: 'WA', name: 'Washington' },
    { id: 'WV', name: 'West Virginia' },
    { id: 'WI', name: 'Wisconsin' },
    { id: 'WY', name: 'Wyoming' },
];
export var BatchOrderError;
(function (BatchOrderError) {
    BatchOrderError["BREACH_LIMIT"] = "BREACH_LIMIT";
    BatchOrderError["UNKNOWN"] = "UNKNOWN";
})(BatchOrderError || (BatchOrderError = {}));
export var Period;
(function (Period) {
    Period[Period["DAILY"] = 0] = "DAILY";
    Period[Period["WEEKLY"] = 1] = "WEEKLY";
    Period[Period["MONTHLY"] = 2] = "MONTHLY";
    Period[Period["QUARTERLY"] = 3] = "QUARTERLY";
    Period[Period["YEARLY"] = 4] = "YEARLY";
})(Period || (Period = {}));
export var BreachedLimitType;
(function (BreachedLimitType) {
    BreachedLimitType["PERIODIC"] = "PERIODIC";
    BreachedLimitType["TRANSACTIONAL"] = "TRANSACTIONAL";
    BreachedLimitType["GLOBAL_PERIODIC"] = "GLOBAL_PERIODIC";
    BreachedLimitType["GLOBAL_TRANSACTIONAL"] = "GLOBAL_TRANSACTIONAL";
})(BreachedLimitType || (BreachedLimitType = {}));
export var BreachType;
(function (BreachType) {
    BreachType["THRESHOLD"] = "THRESHOLD";
    BreachType["CONSUMPTION"] = "CONSUMPTION";
})(BreachType || (BreachType = {}));
export const THEME_V2 = {
    name: 'THEME_V2',
    description: 'Switch to templates that support theme v2',
};
export const MANUAL_BATCHES = {
    name: 'MANUAL_BATCHES',
    description: 'Features enabled when whole functionality of Manual Batches is implemented',
};
//# sourceMappingURL=constants.js.map