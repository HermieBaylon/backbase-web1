{"version":3,"file":"currency-amount-selector.component.js","sourceRoot":"","sources":["../../../../../../../../libs/payment-orders-ang/src/lib/ui/components/currency-amount-selector/currency-amount-selector.component.ts","../../../../../../../../libs/payment-orders-ang/src/lib/ui/components/currency-amount-selector/currency-amount-selector.component.html"],"names":[],"mappings":"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","sourcesContent":["import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  Inject,\n  Input,\n  LOCALE_ID,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewChild,\n  Self,\n  Optional,\n} from '@angular/core';\nimport {\n  getNumberOfCurrencyDigits,\n  DecimalPipe,\n  getLocaleNumberSymbol,\n  NumberSymbol,\n} from '@angular/common';\nimport { ControlValueAccessor, FormControl, NgControl } from '@angular/forms';\nimport { getInputNextId } from './helpers';\nimport BigNumber from 'bignumber.js';\nimport { DomAttributesService } from './dom-attributes.service';\nimport { idListAttr } from './helpers';\nimport { CurrencySelectorConfig } from '../../models';\n\nexport type ResultType = 'string' | 'number';\nconst defaultIntLength = 13;\nconst defaultDecimalPrecision = 2;\nexport interface CurrencyFieldsState {\n  currency: boolean;\n  integer: boolean;\n  decimal: boolean;\n}\n\n/**\n * @name CurrencyInputComponent\n *\n * @a11y Current component provide option to pass needed accessibility\n * attributes. You need to take care of properties that are required in your case :\n *  - aria-describedby\n *  - aria-invalid\n *  - aria-labelledby\n *  - integerLabelSrOnly\n *  - decimalLabelSrOnly\n * @description\n * Component for displaying and managing currency and it amount\n *\n */\n@Component({\n  selector: 'bb-currency-amount-selector',\n  templateUrl: './currency-amount-selector.component.html',\n  providers: [DecimalPipe],\n})\nexport class CurrencyAmountSelectorComponent\n  implements ControlValueAccessor, OnInit, OnChanges, AfterViewInit\n{\n  private currencyList: Array<string> = [];\n  private currencyDisabledState: CurrencyFieldsState = {\n    currency: false,\n    integer: false,\n    decimal: false,\n  };\n  private currency: string | undefined;\n  private intMaxLen: number | undefined;\n  readonly decimalSeparator: string = getLocaleNumberSymbol(\n    this.locale,\n    NumberSymbol.CurrencyDecimal\n  );\n\n  private _decMaxLen: number | undefined;\n\n  /**\n   * Configure the maximum number of decimals.\n   *\n   * When greater than the default number of decimals for the specified currency, this value will take precedence.\n   * Configuring this value can affect the input placeholder.\n   */\n  @Input()\n  get decMaxLen(): number | undefined {\n    return typeof this._decMaxLen === 'number'\n      ? this._decMaxLen\n      : this.getDecimalDigits(this.currency || '');\n  }\n\n  set decMaxLen(value: number | undefined) {\n    this._decMaxLen = value;\n  }\n\n  /**\n   * Number of minimum currency precision. Defaults to 2.\n   */\n  @Input() decMinLen = defaultDecimalPrecision;\n\n  /**\n   * Non-configurable placeholder for the decimal input.\n   * Displays a zero digit for every digit that is allowed in the decimal field.\n   */\n  get decPlaceholder(): string {\n    return '0'.repeat(this.decMaxLen || 0);\n  }\n\n  readonly currControl = new FormControl();\n  readonly intControl = new FormControl();\n  readonly decControl = new FormControl();\n\n  /**\n   * The placeholder for the input. Defaults to 0.\n   */\n  @Input() placeholder = '0';\n  /**\n   * For set output type string/number, by default 'number', when  need work with long number\n   * ( bigger than MAX_SAFE_INTEGER = 9,007,199,254,740,993 ) need to use 'string'\n   */\n  @Input() resultType: ResultType = 'number';\n  /**\n   * Whether there should be only the integer part.\n   * You have to keep in mind, that if you have decimal part, even \".00\"\n   * you will not be able to remove it\n   */\n  @Input() integer = false;\n\n  /**\n   * Whether the input is required. Defaults to false.\n   */\n  @Input() required = false;\n\n  /**\n   * Whether the input is read only. Defaults to false.\n   */\n  @Input() readonly = false;\n\n  /**\n   * Whether the input is disabled. Defaults to false.\n   */\n  @Input()\n  set disabled(disabled: boolean | CurrencyFieldsState) {\n    if (typeof disabled === 'boolean') {\n      this.currencyDisabledState = {\n        currency: disabled,\n        integer: disabled,\n        decimal: disabled,\n      };\n    } else {\n      this.currencyDisabledState = disabled;\n    }\n  }\n\n  get disabled() {\n    return this.currencyDisabledState;\n  }\n\n  /**\n   * Whether integer label is only visible for screen readers.\n   * By default is visible if it is needed to hide change this property\n   * to \"true\" and it will have class \"sr-only\"\n   */\n  @Input() integerLabelSrOnly = false;\n  /**\n   * By default is visible if it is needed to hide change this property\n   * to \"true\" and it will have class \"sr-only\"\n   * By default is hidden and accessible only for screen reader\n   */\n  @Input() decimalLabelSrOnly = false;\n\n  /**\n   * Currency list to be displayed in the dropdown.\n   *\n   * Note: Non-empty currency list is required for the currency symbol\n   * field to be shown. Otherwise, only the amount fields will be shown.\n   *\n   * Additionally, If only a single currency provided, the dropdown of\n   * the currency selection will be disabled and its value set to that single currency\n   */\n  @Input()\n  set currencies(list: Array<string>) {\n    this.currencyList = list;\n    if (this.currencyList && this.currencyList.length > 1) {\n      this.currControl.enable();\n    } else {\n      this.currControl.disable();\n    }\n    // if currency is not set, use first item from the list\n    if (\n      this.currencyList &&\n      (this.currency === undefined ||\n        this.currencyList.indexOf(this.currency) === -1)\n    ) {\n      // [FIXME] Nothing guarantees that the currencyList isn't empty\n      this.updateCurrency(this.currencyList[0]);\n    }\n  }\n\n  /**\n   * Flag that denotes if the currency selector is extended. Defaults to false.\n   */\n  @Input() currencySelectorExtended = false;\n  /**\n   * The currency selector config map.\n   */\n  @Input() currencySelectorConfig: CurrencySelectorConfig = {};\n\n  /**\n   * Whether decimal text is aligned to the right.\n   * By default is false\n   */\n  @Input() isRightAligned = false;\n\n  private _integerId = getInputNextId();\n  private _decimalId = getInputNextId();\n\n  public readonly currencyInputId: string;\n  public readonly currencyLabelId: string;\n  public readonly decimalInputId: string;\n  public readonly decimalLabelId: string;\n  public readonly integerInputId: string;\n  public readonly integerLabelId: string;\n  public readonly validationMessagesId: string;\n  public readonly idListAttr = idListAttr;\n\n  protected initialized = false;\n\n  /**\n   * The id for the integer input. Defaults to unique string.\n   * Used to map the label to the input.\n   */\n  @Input()\n  set integerId(value: string) {\n    this._integerId = value;\n  }\n\n  get integerId() {\n    return this._integerId;\n  }\n\n  /**\n   * The id for the decimal input. Defaults to unique string.\n   * Used to map the label to the input.\n   */\n  @Input()\n  set decimalId(value: string) {\n    this._decimalId = value;\n  }\n\n  get decimalId() {\n    return this._decimalId;\n  }\n\n  /**\n   * The label for the integer input.\n   */\n  @Input() integerLabel = '';\n  /**\n   * The label for the decimal input.\n   */\n  @Input() decimalLabel = '';\n  /**\n   * The label for the currency input.\n   */\n  @Input() currencyLabel = '';\n  /**\n   * @deprecated since version 2.81.0\n   */\n  @Input() labelClasses: string | undefined;\n  /**\n   * Flag is used to allow input negative value\n   */\n  @Input() allowNegativeValue = false;\n  /**\n   * Aria label for the currency dropdown.\n   */\n  @Input() currencyListAriaLabel = 'Currency List Dropdown';\n  /**\n   * Aria label for the currency list with one item.\n   */\n  @Input() currencyListWithOnItemAriaLabel = 'Currency';\n\n  /** */\n  @Input('aria-describedby') ariaDescribedby: string | undefined;\n\n  /** */\n  @Input('aria-labelledby') ariaLabelledby: string | undefined;\n\n  /** */\n  @Input('aria-invalid') ariaInvalid: string | undefined;\n\n  /** */\n  @ViewChild('integerInput', { static: true }) intEl: ElementRef | undefined;\n  /** */\n  @ViewChild('decimalsInput', { static: true }) decEl: ElementRef | undefined;\n\n  constructor(\n    private readonly el: ElementRef,\n    @Inject(LOCALE_ID) private readonly locale: string,\n    private domAttributeService: DomAttributesService,\n    @Optional() @Self() public parentFormControl: NgControl\n  ) {\n    this.currencyInputId = this.domAttributeService.generateId();\n    this.currencyLabelId = this.domAttributeService.generateId();\n    this.decimalInputId = this.domAttributeService.generateId();\n    this.decimalLabelId = this.domAttributeService.generateId();\n    this.integerInputId = this.domAttributeService.generateId();\n    this.integerLabelId = this.domAttributeService.generateId();\n    this.validationMessagesId = this.domAttributeService.generateId();\n\n    BigNumber.config({\n      FORMAT: {\n        // grouping separator of the integer part\n        groupSeparator: ',',\n        // primary grouping size of the integer part\n        groupSize: 3,\n      },\n    });\n    if (this.parentFormControl != null) {\n      // Setting the value accessor directly (instead of using\n      // the providers) to avoid running into a circular import.\n      this.parentFormControl.valueAccessor = this;\n    }\n  }\n\n  ngOnInit() {\n    this.initialized = true;\n    if (!this.integerLabel || !this.decimalLabel) {\n      console.warn(\n        `Found an input from '${this.constructor.name}' without 'label' or 'aria-label' attribute, please provide one of them`\n      );\n    }\n    this.setDisabled(this.currencyDisabledState);\n\n    this.formatInteger();\n\n    console.warn(\n      `The default value of \"decMinLen\" will be undefined from version 6 of ui-ang. \\\n      If you would like to keep the current functionality (to force a minimum of 2 decimals), \\\n      please set the decMinLen property to 2.`\n    );\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.disabled) {\n      this.setDisabled(this.currencyDisabledState);\n    }\n  }\n\n  get cur() {\n    return this.currency;\n  }\n\n  get curList() {\n    return this.currencyList;\n  }\n\n  ngAfterViewInit(): void {\n    const len = this.el.nativeElement.getAttribute('maxlength');\n    this.intMaxLen = len ? parseInt(len, 10) : defaultIntLength;\n  }\n\n  onChange = (_: any) => {};\n  onTouched = () => {};\n\n  onPress($event: any) {\n    this.focusDecEl($event.key);\n\n    const keyCode = $event.keyCode || $event.which;\n    const key = String.fromCharCode(keyCode);\n\n    // allow to enter 'minus' only at the first position and if correspondent flag is enabled\n    const isLeadingMinusPosition =\n      this.allowNegativeValue &&\n      this.intEl &&\n      this.intEl.nativeElement.selectionStart === 0 &&\n      key === '-';\n\n    // regexp is used here to support both of regular keyboard's numbers and numpad's numbers\n    if (\n      !(isLeadingMinusPosition || /^\\d$/.test(key)) &&\n      $event.keyCode !== 8 &&\n      $event.keyCode !== 9\n    ) {\n      $event.preventDefault();\n    }\n  }\n\n  onInput() {\n    const isFormatted = this.formatInteger();\n    if (isFormatted) {\n      this.triggerChange();\n    }\n  }\n\n  updateCurrency(currency?: string) {\n    this.currency = currency || this.currControl.value;\n    this.triggerChange();\n  }\n\n  checkValues() {\n    if (this.currency === undefined) {\n      return true;\n    }\n    if (!this.decControl.value && !this.intControl.value) {\n      this.onChange({\n        currency: this.currency,\n        amount: '',\n      });\n\n      return true;\n    }\n    return false;\n  }\n\n  formatDecimal(decControl: FormControl) {\n    const { value } = decControl;\n    if (value && this.decMaxLen && value.lenght < this.decMaxLen) {\n      const updatedValue = String(value).padEnd(this.decMaxLen, '0');\n      decControl.patchValue(updatedValue);\n    }\n  }\n\n  triggerChange() {\n    if (this.checkValues()) {\n      return;\n    }\n    const int: string = this.intControl.value || '0';\n    if (this.resultType === 'string') {\n      const whole: string = int.replace(/,/g, '');\n      const dec: string = this.decControl.value || '0';\n      const newAmount = whole + (dec !== '0' ? '.' + dec : '');\n      this.onChange({\n        currency: this.currency,\n        amount: newAmount,\n      });\n    } else {\n      const whole: number = parseInt(int.replace(/[^-\\d]/g, ''), 10);\n      const dec = parseFloat('0.' + this.decControl.value) || 0;\n      const sign = whole < 0 ? -1 : 1;\n      const newAmount = (Math.abs(whole) + dec) * sign;\n      this.onChange({\n        currency: this.currency,\n        amount: newAmount,\n      });\n    }\n  }\n\n  checkNumeric(numeric: any): string {\n    // removed all dashes except the first one\n    if (numeric.length > 0) {\n      numeric = numeric[0] + numeric.slice(1).replace(/-/g, '');\n    }\n\n    numeric = this.sanitizeNumericValue(numeric);\n\n    return numeric === '' ? numeric : new BigNumber(numeric || 0).toFormat();\n  }\n\n  /**\n   * Formats integer to user-friendly format\n   *\n   * @returns Returns true in case of successful formatting, otherwise - false.\n   */\n  formatInteger(): boolean {\n    // The behavior of `formatInteger` is dependent on some component inputs,\n    // so don't format anything until the configuration is available.\n\n    if (!this.initialized || !this.intEl) {\n      return false;\n    }\n    if (!this.intControl.value) {\n      this.intControl.setValue('');\n\n      return true;\n    }\n    const offset =\n      this.intEl.nativeElement.selectionStart - this.intControl.value.length;\n\n    const numeric: string = this.intControl.value.replace(\n      this.allowNegativeValue ? /[^-\\d]/g : /\\D/g,\n      ''\n    );\n    if (numeric === '-') {\n      this.intControl.setValue('-', { emitEvent: false });\n\n      return false;\n    }\n    const newVal = this.checkNumeric(numeric);\n    // extend maxlength (if set) with the amount of special chars\n    if (this.intMaxLen) {\n      const specialCount = newVal.replace(/\\d/g, '').length;\n      this.intEl.nativeElement.setAttribute(\n        'maxlength',\n        '' + (this.intMaxLen + specialCount)\n      );\n    }\n\n    this.intControl.setValue(newVal);\n    const newLen = this.intControl.value.length;\n    const newPos = Math.max(offset + newLen, 0);\n    if (newLen > 0 && document.activeElement === this.intEl.nativeElement) {\n      this.intEl.nativeElement.selectionStart = newPos;\n      this.intEl.nativeElement.selectionEnd = newPos;\n    }\n\n    return true;\n  }\n\n  /**\n   * Event handler for backspace key press, and check if correct number is deleted\n   */\n  onBackspace(el: HTMLInputElement) {\n    if (\n      el.selectionStart &&\n      (el.value[el.selectionStart - 1] === ',' ||\n        el.value[el.selectionStart - 1] === '.')\n    ) {\n      el.setSelectionRange(el.selectionStart - 1, el.selectionStart - 1);\n    }\n  }\n\n  // method is used to correct rendered input's value if user entered '-' and left the field\n  correctInputValue() {\n    this.markAsTouched();\n    const numeric = this.intControl.value;\n    if (numeric !== '-') {\n      return;\n    }\n    this.intControl.setValue('', { emitEvent: false });\n  }\n\n  writeValue(model: any | null): void {\n    if (!model) {\n      return;\n    }\n    // currency cannot be set to nothing\n    if (model.currency) {\n      this.currency = model.currency;\n      this.currControl.setValue(model.currency);\n    }\n\n    if (typeof model.amount === 'string' || typeof model.amount === 'number') {\n      const [whole, decimals] = ('' + model.amount).split('.');\n      this.intControl.setValue(whole);\n      this.decControl.setValue(decimals);\n    } else {\n      this.intControl.setValue('');\n      this.decControl.setValue('');\n    }\n\n    this.formatInteger();\n  }\n\n  registerOnChange(fn: () => void): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  markAsTouched() {\n    this.onTouched();\n  }\n\n  protected setDisabled(disableState: CurrencyFieldsState) {\n    disableState.currency\n      ? this.currControl.disable()\n      : this.currControl.enable();\n    disableState.integer ? this.intControl.disable() : this.intControl.enable();\n    disableState.decimal ? this.decControl.disable() : this.decControl.enable();\n  }\n\n  private focusDecEl(key: string): void {\n    if (this.decEl && ['.', ','].indexOf(key) !== -1) {\n      this.decEl.nativeElement.focus();\n    }\n  }\n\n  /**\n   * Make sure that numeric value doesn't exceed max length (if set)\n   * this might happen in case value is pasted to input that has extended max length\n   *\n   * @param numeric\n   */\n  private sanitizeNumericValue(numeric: string): string {\n    if (this.intMaxLen && numeric) {\n      return numeric.slice(0, this.intMaxLen);\n    }\n\n    return numeric;\n  }\n  /**\n   * If currency doesn't have decimal part, decimal placeholder\n   * will be set to default decMinLen\n   */\n  private getDecimalDigits(currency: string) {\n    return getNumberOfCurrencyDigits(currency) === 0\n      ? this.decMinLen\n      : getNumberOfCurrencyDigits(currency);\n  }\n}\n","<div class=\"bb-currency-input\">\n  <div class=\"bb-stack bb-stack--align-bottom\">\n    <div\n      *ngIf=\"curList && curList.length\"\n      class=\"bb-currency-input__currency-selector selector bb-stack__item\"\n    >\n      <label\n        class=\"sr-only\"\n        *ngIf=\"currencyListAriaLabel || currencyListWithOnItemAriaLabel\"\n        [ngClass]=\"labelClasses\"\n        [for]=\"currencyInputId\"\n        [attr.aria-label]=\"currencyListWithOnItemAriaLabel\"\n        id=\"{{ currencyLabelId }}\"\n        [attr.data-role]=\"'currency-input-label'\"\n      >\n        <ng-container\n          [ngSwitch]=\"\n            !!currencyListAriaLabel || !!currencyListWithOnItemAriaLabel\n          \"\n        >\n          <ng-container *ngSwitchCase=\"true\">\n            {{\n              curList && curList.length > 1\n                ? currencyListAriaLabel\n                : currencyListWithOnItemAriaLabel\n            }}\n          </ng-container>\n          <ng-container\n            *ngSwitchDefault\n            i18n=\"\n              Currency label | Label for currency code dropdown of the Currency\n              Input component\n              @@bb-currency-input-ui-wrapper-wrapper.currency-input-label\"\n            >Currency</ng-container\n          >\n        </ng-container>\n      </label>\n      <ng-container\n        *ngIf=\"!currencySelectorExtended\"\n        [ngSwitch]=\"readonly || (curList && curList.length === 1)\"\n      >\n        <input\n          *ngSwitchCase=\"true\"\n          [id]=\"currencyInputId\"\n          [readonly]=\"true\"\n          [required]=\"required\"\n          [attr.aria-invalid]=\"ariaInvalid\"\n          [attr.aria-labelledby]=\"idListAttr(ariaLabelledby, currencyLabelId)\"\n          class=\"form-control bb-text-align-center\"\n          value=\"{{ cur }}\"\n          [attr.data-role]=\"'currency-input-currency-readonly'\"\n        />\n        <bb-dropdown-single-select-ui\n          *ngSwitchDefault\n          [id]=\"currencyInputId\"\n          class=\"bb-block\"\n          [placeholder]=\"curList[0]\"\n          [options]=\"curList\"\n          [readonly]=\"readonly\"\n          [required]=\"required\"\n          [aria-invalid]=\"ariaInvalid\"\n          [aria-labelledby]=\"idListAttr(ariaLabelledby, currencyLabelId)\"\n          (change)=\"updateCurrency(); markAsTouched()\"\n          [formControl]=\"currControl\"\n          [attr.data-role]=\"'currency-input-currency-selector'\"\n        ></bb-dropdown-single-select-ui>\n      </ng-container>\n      <ng-container *ngIf=\"currencySelectorExtended\">\n        <bb-currency-selector\n          [aria-labelledby]=\"idListAttr(ariaLabelledby, currencyLabelId)\"\n          [formControl]=\"currControl\"\n          [currencies]=\"curList\"\n          [config]=\"currencySelectorConfig\"\n          (selectCurrency)=\"updateCurrency($event)\"\n        ></bb-currency-selector>\n      </ng-container>\n    </div>\n    <!-- htmllint label-req-for=\"false\" -->\n    <div\n      class=\"bb-currency-input__integer bb-stack__item bb-stack__item--spacing-sm\"\n      [class.ng-touched]=\"\n        intControl.touched || decControl.touched || parentFormControl?.touched\n      \"\n      [class.ng-invalid]=\"intControl.invalid || parentFormControl?.invalid\"\n    >\n      <label\n        [class.sr-only]=\"!integerLabel || integerLabelSrOnly\"\n        [ngClass]=\"labelClasses\"\n        for=\"{{ integerInputId }}\"\n        id=\"{{ integerLabelId }}\"\n        [attr.data-role]=\"'currency-input-integer-label'\"\n      >\n        <ng-container [ngSwitch]=\"!!integerLabel\">\n          <ng-container *ngSwitchCase=\"true\">\n            {{ integerLabel }}\n          </ng-container>\n          <ng-container\n            *ngSwitchDefault\n            i18n=\"\n              Integer label | Label for integer part of the monetary amount of\n              the Currency Input component\n              @@bb-currency-input-ui-wrapper-wrapper.integer-input-label\"\n            >Integer</ng-container\n          >\n        </ng-container>\n      </label>\n      <input\n        id=\"{{ integerInputId }}\"\n        [attr.aria-describedby]=\"\n          idListAttr(ariaDescribedby, validationMessagesId)\n        \"\n        [attr.aria-invalid]=\"ariaInvalid\"\n        [attr.aria-labelledby]=\"idListAttr(ariaLabelledby, integerLabelId)\"\n        name=\"integer\"\n        type=\"text\"\n        size=\"5\"\n        role=\"textbox\"\n        [readOnly]=\"readonly\"\n        [required]=\"required\"\n        (keydown.backspace)=\"onBackspace(integerInput)\"\n        (keypress)=\"onPress($event)\"\n        (input)=\"onInput()\"\n        (blur)=\"correctInputValue()\"\n        [formControl]=\"intControl\"\n        class=\"form-control bb-text-align-right\"\n        placeholder=\"{{ placeholder }}\"\n        #integerInput\n        autocomplete=\"off\"\n        autocorrect=\"off\"\n        autocapitalize=\"off\"\n        spellcheck=\"false\"\n        [attr.data-role]=\"'currency-input-integer-input'\"\n      />\n    </div>\n\n    <span\n      *ngIf=\"!integer && decMaxLen\"\n      class=\"bb-stack__item bb-stack__item--spacing-sm\"\n      >{{ decimalSeparator }}</span\n    >\n\n    <div\n      *ngIf=\"!integer && decMaxLen\"\n      class=\"bb-currency-input__decimal\"\n      [class.ng-touched]=\"\n        intControl.touched || decControl.touched || parentFormControl?.touched\n      \"\n      [class.ng-invalid]=\"intControl.invalid || parentFormControl?.invalid\"\n    >\n      <label\n        [class.sr-only]=\"!decimalLabel || decimalLabelSrOnly\"\n        [ngClass]=\"labelClasses\"\n        for=\"{{ decimalInputId }}\"\n        id=\"{{ decimalLabelId }}\"\n        [attr.data-role]=\"'currency-input-decimal-label'\"\n      >\n        <ng-container [ngSwitch]=\"!!decimalLabel\">\n          <ng-container *ngSwitchCase=\"true\">\n            {{ decimalLabel }}\n          </ng-container>\n          <ng-container\n            *ngSwitchDefault\n            i18n=\"\n              Decimal label | Label for decimal part of the monetary amount of\n              the Currency Input component\n              @@bb-currency-input-ui-wrapper-wrapper.decimal-input-label\"\n          >\n            Decimals\n          </ng-container>\n        </ng-container>\n      </label>\n      <input\n        id=\"{{ decimalInputId }}\"\n        [attr.aria-describedby]=\"\n          idListAttr(ariaDescribedby, validationMessagesId)\n        \"\n        [attr.aria-invalid]=\"ariaInvalid\"\n        [attr.aria-labelledby]=\"idListAttr(ariaLabelledby, decimalLabelId)\"\n        name=\"decimals\"\n        type=\"text\"\n        role=\"textbox\"\n        [readOnly]=\"readonly\"\n        [required]=\"required\"\n        (keypress)=\"onPress($event)\"\n        (input)=\"triggerChange()\"\n        (blur)=\"markAsTouched(); formatDecimal(decControl)\"\n        [formControl]=\"decControl\"\n        class=\"form-control\"\n        [ngClass]=\"{ 'bb-text-align-right': isRightAligned }\"\n        maxlength=\"{{ decMaxLen }}\"\n        placeholder=\"{{ decPlaceholder }}\"\n        #decimalsInput\n        autocomplete=\"off\"\n        autocorrect=\"off\"\n        autocapitalize=\"off\"\n        spellcheck=\"false\"\n        [attr.data-role]=\"'input-currency-decimals'\"\n      />\n    </div>\n  </div>\n  <div\n    class=\"bb-input-validation-message\"\n    aria-live=\"assertive\"\n    [id]=\"validationMessagesId\"\n    [attr.data-role]=\"'currency-input-validation-message'\"\n  >\n    <ng-content select=\"[bbValidationMessage]\"></ng-content>\n  </div>\n</div>\n"]}