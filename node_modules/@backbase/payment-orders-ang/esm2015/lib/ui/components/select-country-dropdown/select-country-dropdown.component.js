import { Component, Input, Output, EventEmitter, forwardRef, } from '@angular/core';
import { FormControl, NG_VALUE_ACCESSOR, } from '@angular/forms';
import { CountriesMap } from '../../constants';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/icon";
import * as i2 from "@backbase/ui-ang/search-box";
import * as i3 from "../sr-search-result-info/sr-search-result-info.component";
import * as i4 from "../flag-icon/bb-flag-icon";
import * as i5 from "../country-name/country-name.component";
import * as i6 from "@backbase/ui-ang/empty-state";
import * as i7 from "@ng-bootstrap/ng-bootstrap";
import * as i8 from "@angular/common";
import * as i9 from "@backbase/ui-ang/button";
import * as i10 from "@angular/forms";
import * as i11 from "@backbase/ui-ang/keyboard-click-directive";
export class SelectCountryDropdownComponent {
    constructor() {
        this._selectedCountry = '';
        this.search = new FormControl();
        this.filteredCountries = [];
        /**
         * Selected country iso code
         */
        this.selectedCountry = '';
        /**
         * Helper text for the component. Defaults to empty string.
         */
        this.helperText = '';
        /**
         * Placeholder text. Defaults to empty string.
         */
        this.placeholder = '';
        /**
         * Label of the component. Defaults to empty string.
         */
        this.label = '';
        /**
         * Placeholder fot search. Defaults to empty string.
         */
        this.searchPlaceholder = '';
        /**
         * Icon for the dropdown. Defaults to `toggle-down`
         */
        this.dropdownIcon = 'toggle-down';
        /**
         * Flag which indicates permission to create closed payment
         * Default value is `false`
         */
        this.isClosedPayment = false;
        /**
         * Emits value when a country is selected
         */
        this.selectCountry = new EventEmitter();
    }
    /**
     * Array of country iso codes
     */
    set countries(countries) {
        this._countries = countries || [];
        this.setupCountries();
    }
    setupCountries() {
        this.countryEntries = this._countries.map((country) => [
            country,
            CountriesMap[country],
        ]);
        this.filteredCountries = [...this._countries];
    }
    selectItem(country) {
        this.selectedCountry = country;
        this.selectCountry.emit(country);
        if (this.search.value) {
            this.search.reset();
        }
    }
    handleSearch(query = '') {
        if (query) {
            this.filteredCountries = this.countryEntries.reduce((acc, [key, country]) => {
                if (key.toLocaleLowerCase().indexOf(query.toLocaleLowerCase()) > -1 ||
                    country.toLocaleLowerCase().indexOf(query.toLocaleLowerCase()) > -1) {
                    acc.push(key);
                }
                return acc;
            }, []);
        }
        else {
            this.filteredCountries = this._countries;
        }
    }
    onChange() { }
    onTouched() { }
    writeValue() { }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
}
/** @nocollapse */ SelectCountryDropdownComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectCountryDropdownComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ SelectCountryDropdownComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: SelectCountryDropdownComponent, selector: "bb-select-country-dropdown", inputs: { countries: "countries", selectedCountry: "selectedCountry", helperText: "helperText", placeholder: "placeholder", label: "label", searchPlaceholder: "searchPlaceholder", dropdownIcon: "dropdownIcon", isClosedPayment: "isClosedPayment" }, outputs: { selectCountry: "selectCountry" }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            multi: true,
            useExisting: forwardRef((() => SelectCountryDropdownComponent)),
        },
    ], ngImport: i0, template: "<div\n  class=\"bb-dynamic-input bb-select-country-dropdown\"\n  ngbDropdown\n  placement=\"bottom\"\n  #dropdown=\"ngbDropdown\"\n>\n  <div class=\"d-inline-block bb-label\" (click)=\"btn.focus()\" *ngIf=\"label\">\n    {{ label }}\n  </div>\n  <span\n    class=\"bb-dynamic-input__helper-text bb-text-support\"\n    *ngIf=\"helperText\"\n    [id]=\"searchElem?.id + '__helper-text'\"\n    [textContent]=\"helperText\"\n  >\n  </span>\n  <div>\n    <button\n      bbButton\n      ngbDropdownToggle\n      color=\"unstyled\"\n      (blur)=\"onTouched()\"\n      data-role=\"open-country-dropdown-list-button\"\n      [attr.aria-label]=\"label\"\n      [disabled]=\"isClosedPayment && selectedCountry\"\n      class=\"bb-select-country-dropdown__toggle form-control w-100 pr-5 d-flex justify-content-between bb-text-support\"\n      #btn\n    >\n      <ng-container *ngIf=\"selectedCountry\">\n        <ng-container\n          *ngTemplateOutlet=\"\n            countryTmpl;\n            context: { $implicit: selectedCountry }\n          \"\n        ></ng-container>\n      </ng-container>\n      <div *ngIf=\"!selectedCountry\">\n        <ng-container\n          *ngIf=\"placeholder; else defaultPlaceHolder\"\n        ></ng-container>\n        {{ placeholder }}\n      </div>\n      <bb-icon-ui [name]=\"dropdownIcon || 'toggle-down'\"></bb-icon-ui>\n    </button>\n  </div>\n\n  <div ngbDropdownMenu class=\"dropdown-menu dropdown-menu-right w-100\">\n    <div class=\"bb-block bb-block--md px-3\">\n      <bb-search-box-ui\n        (focus)=\"dropdown.open()\"\n        [formControl]=\"search\"\n        (clear)=\"handleSearch('')\"\n        data-role=\"country-search\"\n        (ngModelChange)=\"handleSearch(search.value)\"\n        [placeholder]=\"searchPlaceholder || 'Search'\"\n        [attr.aria-label]=\"searchPlaceholder || 'Search'\"\n        [showSearch]=\"true\"\n        [showClear]=\"true\"\n        [autocomplete]=\"'off'\"\n        #searchElem\n      >\n      </bb-search-box-ui>\n    </div>\n\n    <bb-payments-sr-search-result-info\n      [totalNumber]=\"filteredCountries?.length || 0\"\n    >\n    </bb-payments-sr-search-result-info>\n\n    <div *ngIf=\"filteredCountries?.length\" class=\"pre-scrollable\">\n      <button\n        *ngFor=\"let country of filteredCountries\"\n        role=\"menuitem\"\n        type=\"button\"\n        class=\"d-sm-flex px-3 py-2 d-flex-row align-items-center btn--unstyled\"\n        (bbKeyboardClick)=\"selectItem(country); dropdown.close()\"\n        ngbDropdownItem\n      >\n        <ng-container\n          *ngTemplateOutlet=\"countryTmpl; context: { $implicit: country }\"\n        ></ng-container>\n      </button>\n    </div>\n    <ng-container *ngIf=\"!filteredCountries?.length && search?.value\">\n      <ng-container *ngTemplateOutlet=\"emptySearch\"></ng-container>\n    </ng-container>\n  </div>\n</div>\n\n<ng-template let-code #countryTmpl>\n  <div class=\"d-flex justify-content-between align-items-center w-100\">\n    <div class=\"bb-stack\">\n      <bb-flag-icon\n        class=\"bb-stack__item\"\n        [countryCode]=\"code\"\n        [flagSize]=\"'md'\"\n      ></bb-flag-icon>\n      <bb-country-name\n        class=\"bb-stack__item bb-ellipsis bb-ellipsis--single-line\"\n        [countryCode]=\"code\"\n      ></bb-country-name>\n      <div class=\"bb-text-support bb-stack__item bb-stack__item--push-right\">\n        {{ code }}\n      </div>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #emptySearch>\n  <div class=\"card-body\">\n    <bb-empty-state-ui\n      data-role=\"no-templates-found\"\n      title=\"No Results Found\"\n      subtitle=\"We can\u2019t find what you\u2019re looking for. Please try a different criteria.\"\n      iconSize=\"xxl\"\n      i18n-subtitle=\"@@bb-select-country-dropdown.empty-state-subtitle\"\n      i18n-title=\"@@bb-select-country-dropdown.empty-state-title\"\n      iconModifier=\"search\"\n      [showIcon]=\"true\"\n    ></bb-empty-state-ui>\n  </div>\n</ng-template>\n\n<ng-template #defaultPlaceHolder>\n  <ng-container i18n=\"@@country-selector-default-placeholder\"\n    >- select a country -</ng-container\n  >\n</ng-template>\n", components: [{ type: i1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i2.SearchBoxComponent, selector: "bb-search-box-ui", inputs: ["placeholder", "maxLength", "squareBorder", "typeaheadOptions", "showSearch", "showClear", "searchLabel", "clearLabel", "autocomplete"], outputs: ["submit", "clear", "valueChange"] }, { type: i3.PaymentsSrSearchResultInfoComponent, selector: "bb-payments-sr-search-result-info", inputs: ["totalNumber"] }, { type: i4.FlagIconComponent, selector: "bb-flag-icon", inputs: ["flagSize", "countryCode"] }, { type: i5.CountryNameComponent, selector: "bb-country-name", inputs: ["countryCode"] }, { type: i6.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i7.NgbDropdown, selector: "[ngbDropdown]", inputs: ["open", "placement", "container", "autoClose", "display", "dropdownClass"], outputs: ["openChange"], exportAs: ["ngbDropdown"] }, { type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i9.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i7.NgbDropdownToggle, selector: "[ngbDropdownToggle]" }, { type: i8.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i7.NgbDropdownMenu, selector: "[ngbDropdownMenu]" }, { type: i10.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i10.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i8.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i7.NgbDropdownItem, selector: "[ngbDropdownItem]", inputs: ["disabled"] }, { type: i11.KeyboardClickDirective, selector: "[bbKeyboardClick]", outputs: ["bbKeyboardClick"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectCountryDropdownComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-select-country-dropdown',
                    templateUrl: './select-country-dropdown.component.html',
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            multi: true,
                            useExisting: forwardRef((() => SelectCountryDropdownComponent)),
                        },
                    ],
                }]
        }], propDecorators: { countries: [{
                type: Input
            }], selectedCountry: [{
                type: Input
            }], helperText: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], label: [{
                type: Input
            }], searchPlaceholder: [{
                type: Input
            }], dropdownIcon: [{
                type: Input
            }], isClosedPayment: [{
                type: Input
            }], selectCountry: [{
                type: Output
            }] } });
//# sourceMappingURL=select-country-dropdown.component.js.map