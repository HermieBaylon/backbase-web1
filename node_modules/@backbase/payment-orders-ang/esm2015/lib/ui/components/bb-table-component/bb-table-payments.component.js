import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, } from '@angular/core';
import { BehaviorSubject, Subject } from 'rxjs';
import { PaymentConfigService } from '../../../configs/services/payment-config.service';
import { canCopyPayment, hasCreatePermission, } from '../../helpers/payment-config-helpers';
import { getRelativeDate } from '../../helpers/date-helpers';
import { AvailableActions, Preferences } from '../../constants';
import * as i0 from "@angular/core";
import * as i1 from "../../../configs/services/payment-config.service";
import * as i2 from "../table-header-checkbox/table-header-checkbox.component";
import * as i3 from "../table-checkbox/table-checkbox.component";
import * as i4 from "@backbase/ui-ang/icon";
import * as i5 from "../status-badge/status-badge.component";
import * as i6 from "@backbase/ui-ang/badge";
import * as i7 from "@backbase/ui-ang/amount";
import * as i8 from "@backbase/ui-ang/dropdown-menu";
import * as i9 from "@angular/common";
import * as i10 from "@backbase/ui-ang/table";
import * as i11 from "@backbase/ui-ang/keyboard-click-directive";
import * as i12 from "@backbase/ui-ang/button";
import * as i13 from "@backbase/ui-ang/tooltip-directive";
import * as i14 from "../../directives/export-pdf/export-pdf.directive";
import * as i15 from "../../pipes/account-formatter/account-formatter.pipe";
export class PaymentsTableComponent {
    constructor(paymentConfigService) {
        this.paymentConfigService = paymentConfigService;
        this.hostRef = this;
        /**
         * Search query string (if any)
         */
        this.clearSelection = new Subject();
        /**
         * Flag indicates if the user has delete permission.
         * Default value is `false`.
         */
        this.canDelete = false;
        /**
         * Flag indicates if the user has edit permission.
         * Default value is `false`.
         */
        this.canEdit = false;
        /**
         * Flag indicates whether called from Manage transfers
         */
        this.isManageTransfersMode = false;
        /**
         * The flag to denote if it is a debit mode
         */
        this.isDebitMode = false;
        /**
         * Payment mode
         * Default is `SINGLE`.
         */
        this.paymentMode = 'ALL';
        /**
         * Select template event emitter
         */
        this.selectTemplate = new EventEmitter();
        /**
         * Click template event emitter.
         */
        this.templateItemClick = new EventEmitter();
        /**
         * Changes will be triggered on paymentItemClick event emit.
         */
        this.paymentItemClick = new EventEmitter();
        /**
         * Click delete event emitter.
         */
        this.triggerDeleteTemplate = new EventEmitter();
        /**
         * Changes will be triggered on column sorting.
         */
        this.sort = new EventEmitter();
        /**
         * Selection set
         */
        this.selectionSet = new EventEmitter();
        /**
         * Edit template event emitter.
         */
        this.editTemplate = new EventEmitter();
        /**
         * Approval event emitter
         */
        this.approvePayment = new EventEmitter();
        /**
         * Rejection event emitter
         */
        this.rejectPayment = new EventEmitter();
        /**
         * Cancel event emitter
         */
        this.cancelPayment = new EventEmitter();
        /**
         * Edit event emitter
         */
        this.editPayment = new EventEmitter();
        /**
         * Copy payment event emitter
         */
        this.copyPayment = new EventEmitter();
        this.selection = new Set();
        this.preferences = Preferences;
        this.mapPaymentType = (item) => this.paymentConfigService.mapPaymentType(item);
    }
    onSelectTemplate(item) {
        this.selectTemplate.emit(item);
    }
    onTemplateClick(template) {
        this.templateItemClick.emit(template);
    }
    onPaymentItemClick(paymentItem) {
        this.paymentItemClick.emit(paymentItem);
    }
    onEditTemplate(template) {
        this.editTemplate.emit(Object.assign(Object.assign({}, template), { query: this.searchTerm }));
    }
    trackById(_index, item) {
        return item.id;
    }
    onSort(event) {
        this.sort.emit(event);
    }
    setSelection(selection) {
        this.selection = selection;
        this.selectionSet.emit(this.selection);
    }
    getIds(items) {
        return items === null || items === void 0 ? void 0 : items.map((payment) => payment.id);
    }
    openDeleteTemplateModal(item) {
        this.triggerDeleteTemplate.emit(Object.assign(Object.assign({}, item), { query: this.searchTerm }));
    }
    formatExecutionDate(date) {
        let result = date;
        if (result === getRelativeDate()) {
            result = 'today';
        }
        else if (result === getRelativeDate(1)) {
            result = 'tomorrow';
        }
        return result;
    }
    stopPropagation(event) {
        event.stopPropagation();
    }
    isApprovalProhibited(paymentItem) {
        return this.isActionDisabled(paymentItem === null || paymentItem === void 0 ? void 0 : paymentItem.actions, AvailableActions.APPROVE);
    }
    onApprovePayment(payment, event) {
        event.stopPropagation();
        if (!this.isApprovalProhibited(payment)) {
            this.approvePayment.emit(payment);
        }
    }
    isRejectionProhibited(paymentItem) {
        return this.isActionDisabled(paymentItem === null || paymentItem === void 0 ? void 0 : paymentItem.actions, AvailableActions.REJECT);
    }
    onRejectPayment(payment, event) {
        event.stopPropagation();
        if (!this.isRejectionProhibited(payment)) {
            this.rejectPayment.emit(payment);
        }
    }
    onCancelPayment(payment) {
        if (!this.isCancelProhibited(payment)) {
            this.cancelPayment.emit(payment);
        }
    }
    onEditPayment(payment) {
        if (!this.isEditProhibited(payment)) {
            this.editPayment.emit(payment);
        }
    }
    onCopyPayment(payment) {
        if (this.canCopyPayment(payment)) {
            this.copyPayment.emit(Object.assign(Object.assign({}, payment), { isPaymentCopy: true }));
        }
    }
    canCopyPayment(payment) {
        return canCopyPayment(payment);
    }
    isEditProhibited(paymentItem) {
        return this.isActionDisabled(paymentItem === null || paymentItem === void 0 ? void 0 : paymentItem.actions, AvailableActions.EDIT);
    }
    isCancelProhibited(paymentItem) {
        return this.isActionDisabled(paymentItem === null || paymentItem === void 0 ? void 0 : paymentItem.actions, AvailableActions.CANCEL);
    }
    transactionInformation(payment) {
        return payment === null || payment === void 0 ? void 0 : payment.transferTransactionInformation;
    }
    hasCreatePermission(template) {
        return hasCreatePermission(template.actions);
    }
    isActionDisabled(actions, actionType) {
        return !actions || actions.indexOf(actionType) === -1;
    }
}
/** @nocollapse */ PaymentsTableComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentsTableComponent, deps: [{ token: i1.PaymentConfigService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PaymentsTableComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PaymentsTableComponent, selector: "bb-table-payments-component", inputs: { items: "items", searchTerm: "searchTerm", clearSelection: "clearSelection", responseError: "responseError", canDelete: "canDelete", canEdit: "canEdit", isManageTransfersMode: "isManageTransfersMode", isDebitMode: "isDebitMode", paymentMode: "paymentMode", totalCount: "totalCount", pageSize: "pageSize" }, outputs: { selectTemplate: "selectTemplate", templateItemClick: "templateItemClick", paymentItemClick: "paymentItemClick", triggerDeleteTemplate: "triggerDeleteTemplate", sort: "sort", selectionSet: "selectionSet", editTemplate: "editTemplate", approvePayment: "approvePayment", rejectPayment: "rejectPayment", cancelPayment: "cancelPayment", editPayment: "editPayment", copyPayment: "copyPayment" }, ngImport: i0, template: "<div *ngIf=\"items?.items.length && !responseError\" class=\"table-responsive\">\n  <div class=\"bb-block bb-block--xl\"></div>\n  <div *ngIf=\"searchTerm\">\n    <div class=\"bb-block bb-block--xs\"></div>\n    <div\n      class=\"bb-block bb-block--xs\"\n      data-role=\"results-found\"\n      i18n=\"@@manage-payment-items.results-found\"\n    >\n      {items.totalCount, plural, =1 {1 result found} other\n      {{{items.totalCount}} results found}}\n    </div>\n  </div>\n\n  <table\n    bbTableFocus\n    [bbTable]=\"getIds(items.items)\"\n    class=\"table table-hover bb-table\"\n    (sort)=\"onSort($event)\"\n    (selectRow)=\"setSelection($event)\"\n  >\n    <thead>\n      <tr data-role=\"item-row\">\n        <td\n          data-role=\"selection-checkbox\"\n          *ngIf=\"isManageTransfersMode || isDebitMode\"\n        >\n          <bb-table-header-checkbox\n            [clearSelection]=\"clearSelection\"\n          ></bb-table-header-checkbox>\n        </td>\n        <td *ngIf=\"!(isManageTransfersMode || isDebitMode)\"></td>\n        <ng-template #itemStatusHeader>\n          <span\n            class=\"th-content\"\n            i18n=\"\n              Manage payments table header label| Manage payments header label\n              for status@@manage-payments.header.status\"\n          >\n            Status\n          </span>\n        </ng-template>\n        <th\n          data-role=\"header-status\"\n          scope=\"col\"\n          bbSortable=\"status\"\n          tabindex=\"0\"\n          *ngIf=\"isManageTransfersMode || isDebitMode\"\n        >\n          <ng-container *ngTemplateOutlet=\"itemStatusHeader\"></ng-container>\n        </th>\n        <ng-template #templateNameHeader>\n          <span\n            class=\"th-content\"\n            i18n=\"\n              Manage payment templates table header label| Manage payment\n              templates header label for\n              status@@manage-payment-templates.header.status\"\n          >\n            Template name\n          </span>\n        </ng-template>\n        <th\n          data-role=\"header-status\"\n          scope=\"col\"\n          *ngIf=\"!(isManageTransfersMode || isDebitMode)\"\n          tabindex=\"0\"\n        >\n          <ng-container *ngTemplateOutlet=\"templateNameHeader\"></ng-container>\n        </th>\n        <th\n          #itemFromHeader\n          data-role=\"header-account-from\"\n          scope=\"col\"\n          bbSortable=\"originatorName\"\n          tabindex=\"0\"\n        >\n          <span\n            class=\"th-content\"\n            i18n=\"\n              Manage payment items table header label| Manage payment items\n              header label for from@@manage-payment-items.header.from\"\n          >\n            From\n          </span>\n        </th>\n        <th\n          #itemToHeader\n          data-role=\"header-account-to\"\n          scope=\"col\"\n          bbSortable=\"counterpartyName\"\n          tabindex=\"0\"\n        >\n          <span\n            class=\"th-content\"\n            i18n=\"\n              Manage payment items table header label| Manage payment items\n              header label for number of\n              payments@@manage-payment-items.header.payments-number\"\n          >\n            To\n          </span>\n        </th>\n        <th\n          #itemCurrencyHeader\n          data-role=\"header-currency\"\n          scope=\"col\"\n          class=\"bb-table--text-end\"\n          bbSortable=\"currency\"\n          tabindex=\"0\"\n        >\n          <span\n            class=\"th-content\"\n            i18n=\"\n              Manage payment items table header label| Manage payment items\n              header label for currency@@manage-payment-items.header.currency\"\n          >\n            Ccy\n          </span>\n        </th>\n        <th\n          #itemAmountHeader\n          scope=\"col\"\n          data-role=\"header-amount\"\n          class=\"bb-table--text-end\"\n          bbSortable=\"amount\"\n          tabindex=\"0\"\n        >\n          <span\n            i18n=\"\n              Manage payment items table header label| Manage payment items\n              header label for amount@@manage-payment-items.header.amount\"\n            class=\"th-content\"\n          >\n            Amount\n          </span>\n        </th>\n\n        <th\n          *ngIf=\"\n            (paymentMode === 'RECURRING' || paymentMode === 'ALL') &&\n            (isManageTransfersMode || isDebitMode)\n          \"\n          scope=\"col\"\n          data-role=\"header-frequency\"\n          tabindex=\"0\"\n        >\n          <span\n            i18n=\"\n              Manage payments table header label| Manage payments header label\n              for frequency@@manage-payments.header.frequency\"\n            class=\"th-content\"\n          >\n            Frequency\n          </span>\n        </th>\n\n        <th\n          *ngIf=\"isManageTransfersMode || isDebitMode\"\n          scope=\"col\"\n          data-role=\"header-exec-date\"\n          bbSortable=\"requestedExecutionDate\"\n          tabindex=\"0\"\n        >\n          <span\n            i18n=\"\n              Manage payments table header label| Manage payments header label\n              for execution date@@manage-payments.header.execution-date\"\n            class=\"th-content\"\n          >\n            Exec. date\n          </span>\n        </th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr\n        *ngFor=\"let item of items?.items; trackBy: trackById\"\n        [bbRow]=\"item\"\n        (bbKeyboardClick)=\"\n          isManageTransfersMode || isDebitMode\n            ? onPaymentItemClick(item)\n            : onTemplateClick(item)\n        \"\n        tabindex=\"0\"\n        data-role=\"payment-row\"\n      >\n        <td\n          data-role=\"payment-col-selection\"\n          *ngIf=\"isManageTransfersMode || isDebitMode\"\n        >\n          <bb-table-checkbox\n            class=\"bb-stack\"\n            [rowId]=\"item.id\"\n          ></bb-table-checkbox>\n        </td>\n        <td\n          data-role=\"payment-col-selection\"\n          *ngIf=\"!(isManageTransfersMode || isDebitMode)\"\n        >\n          <bb-icon-ui\n            class=\"bb-text-disabled bb-stack__item\"\n            name=\"insert-drive-file\"\n          >\n          </bb-icon-ui>\n        </td>\n\n        <td\n          data-role=\"payment-col-status\"\n          *ngIf=\"!(isManageTransfersMode || isDebitMode); else statusData\"\n        >\n          <span class=\"sr-only\">\n            <ng-container *ngTemplateOutlet=\"templateNameHeader\">\n            </ng-container>\n          </span>\n          <div class=\"bb-text-bold\">\n            {{ item.name }}\n          </div>\n\n          <div #paymentTypeHeading class=\"d-none\" aria-hidden=\"true\">\n            <ng-container i18n=\"manage-payment-templates.payment-types\">\n              {item?.details?.paymentType, select, US_FOREIGN_WIRE {US Foreign\n              Wire Payment} US_FOREIGN_WIRE_ILE {US Foreign Wire Payment}\n              SEPA_CT_CLOSED {SEPA CT Transfer} SEPA_CT {SEPA CT Transfer}\n              SEPA_CT_ILE {SEPA CT Transfer}}\n            </ng-container>\n          </div>\n\n          <div\n            class=\"bb-text-support\"\n            data-role=\"payment-type\"\n            *ngIf=\"!(isManageTransfersMode || isDebitMode)\"\n          >\n            {{\n              mapPaymentType(item)\n                ? mapPaymentType(item)\n                : paymentTypeHeading.textContent\n            }}\n          </div>\n        </td>\n\n        <ng-template #statusData>\n          <td data-role=\"payment-col-status\">\n            <span class=\"sr-only\">\n              <ng-container *ngTemplateOutlet=\"itemStatusHeader\">\n              </ng-container>\n            </span>\n            <div class=\"bb-stack\">\n              <div class=\"bb-stack__item\">\n                <bb-payord-status-badge\n                  class=\"d-none d-md-block\"\n                  [status]=\"item.status\"\n                  [showAbbreviated]=\"true\"\n                ></bb-payord-status-badge>\n              </div>\n            </div>\n          </td>\n        </ng-template>\n\n        <td>\n          <bb-badge-ui\n            *ngIf=\"item.edited\"\n            color=\"secondary\"\n            text=\"Edit pending\"\n            data-role=\"edit-pending-label\"\n            i18n-text=\"@@manage-payments.payment.list.editPending.label\"\n          ></bb-badge-ui>\n\n          <span class=\"sr-only\">; {{ itemFromHeader.innerText }}:</span>\n          <div data-role=\"payment-col-debitor-name\">\n            {{\n              isDebitMode ||\n              transactionInformation(item)?.counterparty?.role === 'DEBTOR'\n                ? transactionInformation(item)?.counterparty?.name\n                : isManageTransfersMode\n                ? item.originator?.name\n                : item.details.originatorAccount.name\n            }}\n          </div>\n          <div class=\"bb-text-support\" data-role=\"payment-col-debitor-account\">\n            {{\n              isDebitMode ||\n              transactionInformation(item)?.counterparty?.role === 'DEBTOR'\n                ? (transactionInformation(item)?.counterpartyAccount\n                    ?.identification | accountFormatter)\n                : isManageTransfersMode\n                ? (item.originatorAccount?.identification | accountFormatter)\n                : (item.details.originatorAccount.identification\n                  | accountFormatter)\n            }}\n          </div>\n        </td>\n\n        <td>\n          <span class=\"sr-only\">; {{ itemToHeader.innerText }}:</span>\n          <div data-role=\"payment-col-creditor-name\">\n            {{\n              isDebitMode ||\n              transactionInformation(item)?.counterparty?.role === 'DEBTOR'\n                ? item.originator?.name\n                : isManageTransfersMode\n                ? transactionInformation(item)?.counterparty?.name\n                : item.details.transferTransactionInformation.counterparty.name\n            }}\n          </div>\n          <div class=\"bb-text-support\" data-role=\"payment-col-creditor-account\">\n            {{\n              isDebitMode ||\n              transactionInformation(item)?.counterparty?.role === 'DEBTOR'\n                ? (item.originatorAccount?.identification | accountFormatter)\n                : isManageTransfersMode\n                ? (transactionInformation(item)?.counterpartyAccount\n                    ?.identification | accountFormatter)\n                : (item.details.transferTransactionInformation\n                    .counterpartyAccount.identification | accountFormatter)\n            }}\n          </div>\n        </td>\n\n        <td class=\"bb-table--text-end\">\n          <span class=\"sr-only\">; {{ itemCurrencyHeader.innerText }}</span>\n          <span data-role=\"payment-col-currency\">\n            {{\n              isManageTransfersMode || isDebitMode\n                ? item.transferTransactionInformation?.instructedAmount\n                    .currencyCode\n                : item.details.transferTransactionInformation.instructedAmount\n                    .currencyCode\n            }}\n          </span>\n        </td>\n\n        <td data-role=\"payment-col-amount\" class=\"bb-table--text-end\">\n          <span class=\"sr-only\">; {{ itemAmountHeader.innerText }}:</span>\n          <bb-amount-ui\n            [amount]=\"\n              isManageTransfersMode || isDebitMode\n                ? item.transferTransactionInformation?.instructedAmount.amount\n                : item.details.transferTransactionInformation.instructedAmount\n                    .amount\n            \"\n          ></bb-amount-ui>\n        </td>\n\n        <td\n          *ngIf=\"\n            (paymentMode === 'RECURRING' || paymentMode === 'ALL') &&\n            (isManageTransfersMode || isDebitMode)\n          \"\n          data-role=\"payment-col-frequency\"\n        >\n          <span i18n=\"@@@@manage-payments.payment.list.frequency\">\n            {item.schedule?.transferFrequency, select, DAILY {Daily} WEEKLY\n            {Weekly} MONTHLY {Monthly} QUARTERLY {Quarterly} YEARLY {Yearly}\n            other {{{item.schedule?.transferFrequency | titlecase}}}}\n          </span>\n        </td>\n\n        <td data-role=\"payment-col-date\">\n          <span\n            *ngIf=\"item.schedule?.nextExecutionDate\"\n            i18n=\"@@manage-payments.payment.list.execution-date-value\"\n          >\n            {formatExecutionDate(item.schedule?.nextExecutionDate), select,\n            today {Today} tomorrow {Tomorrow} other\n            {{{ item.schedule?.nextExecutionDate | date:'shortDate'}}} }\n          </span>\n\n          <span *ngIf=\"!item.schedule?.nextExecutionDate\">\n            {{ item.requestedExecutionDate | date: 'shortDate' }}\n          </span>\n        </td>\n\n        <td>\n          <div class=\"bb-stack\">\n            <div\n              class=\"bb-stack__item bb-stack__item--push-right d-none d-md-block\"\n            >\n              <div class=\"bb-stack\">\n                <!-- Large screens (Hidden only on xs and sm) -->\n                <ng-container\n                  *ngIf=\"\n                    item &&\n                    item.status === 'ENTERED' &&\n                    (isManageTransfersMode || isDebitMode)\n                  \"\n                >\n                  <div class=\"bb-stack__item\">\n                    <button\n                      bbButton\n                      buttonSize=\"sm\"\n                      [circle]=\"true\"\n                      color=\"success\"\n                      triggers=\"hover focus\"\n                      aria-label=\"Approve payment\"\n                      data-role=\"approve-payment-order\"\n                      (click)=\"onApprovePayment(item, $event)\"\n                      [ngClass]=\"{\n                        'disabled btn-circle--filled':\n                          isApprovalProhibited(item)\n                      }\"\n                      i18n-aria-label=\"\n                        Approve payment@@manage-payments-list.action.approve\"\n                      [bbTooltip]=\"\n                        isApprovalProhibited(item)\n                          ? actionNotAvailable\n                          : actionApprove\n                      \"\n                    >\n                      <bb-icon-ui name=\"check\"></bb-icon-ui>\n                    </button>\n                  </div>\n\n                  <div class=\"bb-stack__item\">\n                    <button\n                      bbButton\n                      buttonSize=\"sm\"\n                      [circle]=\"true\"\n                      color=\"danger\"\n                      triggers=\"hover focus\"\n                      aria-label=\"Reject payment\"\n                      data-role=\"reject-payment-order\"\n                      (click)=\"onRejectPayment(item, $event)\"\n                      [ngClass]=\"{\n                        'disabled btn-circle--filled':\n                          isRejectionProhibited(item)\n                      }\"\n                      i18n-aria-label=\"\n                        Reject payment@@manage-payments-list.action.reject\"\n                      [bbTooltip]=\"\n                        isRejectionProhibited(item)\n                          ? actionNotAvailable\n                          : actionReject\n                      \"\n                    >\n                      <bb-icon-ui name=\"times\"></bb-icon-ui>\n                    </button>\n                  </div>\n                </ng-container>\n\n                <div\n                  class=\"bb-stack__item\"\n                  *ngIf=\"isManageTransfersMode || isDebitMode\"\n                >\n                  <span\n                    class=\"sr-only\"\n                    i18n=\"@@manage-templates.bb-table-payments.more-actions\"\n                    >More actions</span\n                  >\n                  <bb-dropdown-menu-ui\n                    type=\"button\"\n                    buttonSize=\"sm\"\n                    container=\"body\"\n                    btnCircle=\"true\"\n                    icon=\"ellipsis-h\"\n                    btnColor=\"link-dark\"\n                    triggers=\"hover focus\"\n                    data-role=\"more-options\"\n                    ariaLabel=\"More actions\"\n                    bbTooltip=\"More actions\"\n                    (click)=\"stopPropagation($event)\"\n                    (keydown.enter)=\"stopPropagation($event)\"\n                    i18n-ariaLabel=\"\n                      @@manage-transfers.bb-table-payments.more-actions.label\"\n                    i18n-bbTooltip=\"\n                      @@manage-transfers.bb-table-payments.more-actions.tooltip\"\n                  >\n                    <ng-template bbDropdownMenuItem>\n                      <button\n                        type=\"button\"\n                        role=\"menuitem\"\n                        class=\"dropdown-item\"\n                        *ngIf=\"canCopyPayment(item)\"\n                        (bbKeyboardClick)=\"onCopyPayment(item)\"\n                        data-role=\"transfer-payment-order-dropdown\"\n                        i18n=\"@@manage-payments.payment.list.action.transfer\"\n                      >\n                        Transfer\n                      </button>\n                      <button\n                        type=\"button\"\n                        role=\"menuitem\"\n                        class=\"dropdown-item\"\n                        i18n=\"@@manage-payments.payment.list.action.edit\"\n                        data-role=\"edit-payment-order-dropdown\"\n                        *ngIf=\"!isEditProhibited(item)\"\n                        (bbKeyboardClick)=\"onEditPayment(item)\"\n                      >\n                        Edit\n                      </button>\n\n                      <button\n                        type=\"button\"\n                        role=\"menuitem\"\n                        container=\"body\"\n                        placement=\"left\"\n                        class=\"dropdown-item\"\n                        triggers=\"hover focus\"\n                        data-role=\"cancel-payment-order-dropdown\"\n                        (bbKeyboardClick)=\"onCancelPayment(item)\"\n                        [class.disabled]=\"isCancelProhibited(item)\"\n                        [bbTooltip]=\"\n                          isCancelProhibited(item) && actionNotAvailable\n                        \"\n                      >\n                        Cancel\n                      </button>\n\n                      <button\n                        type=\"button\"\n                        role=\"menuitem\"\n                        class=\"dropdown-item\"\n                        data-role=\"export-payment-order-dropdown\"\n                        i18n=\"@@manage-payments.payment.list.action.export-pdf\"\n                        *ngIf=\"item.permissibleActions?.export\"\n                        [bbExportPdf]=\"item.id\"\n                      >\n                        Export PDF\n                      </button>\n                    </ng-template>\n                  </bb-dropdown-menu-ui>\n                </div>\n              </div>\n            </div>\n          </div>\n        </td>\n\n        <td\n          data-role=\"create-payment-col-selection\"\n          *ngIf=\"!(isManageTransfersMode || isDebitMode)\"\n        >\n          <button\n            *ngIf=\"hasCreatePermission(item)\"\n            bbButton\n            buttonSize=\"md\"\n            color=\"unstyled\"\n            aria-label=\"Create payment from template\"\n            i18n-aria-label=\"\n              Button for create payment from\n              template@@manage-payment-templates.create-payment.button\"\n            data-role=\"create-payment-button\"\n            bbTooltip=\"Create new payment from this template\"\n            triggers=\"hover focus\"\n            i18n-bbTooltip=\"\n              Tooltip for create payment from\n              template@@manage-payment-templates.create-payment.tooltip\"\n            (click)=\"stopPropagation($event); onSelectTemplate(item)\"\n          >\n            <bb-icon-ui name=\"payments\" class=\"bb-stack__item\"> </bb-icon-ui>\n          </button>\n        </td>\n        <td\n          class=\"text-right\"\n          *ngIf=\"\n            (canDelete || canEdit) && !(isManageTransfersMode || isDebitMode)\n          \"\n        >\n          <span\n            class=\"sr-only\"\n            i18n=\"@@manage-templates.bb-table-payments.more-actions\"\n            >More actions</span\n          >\n          <bb-dropdown-menu-ui\n            class=\"bb-button-bar__button\"\n            btnColor=\"unstyled\"\n            btnCircle=\"true\"\n            container=\"body\"\n            data-role=\"more-options\"\n            (bbKeyboardClick)=\"$event.stopPropagation()\"\n          >\n            <ng-template bbDropdownLabel>\n              <bb-icon-ui name=\"ellipsis-h\"></bb-icon-ui>\n            </ng-template>\n            <ng-template bbDropdownMenuItem>\n              <button\n                [attr.aria-label]=\"'Delete ' + item.name\"\n                *ngIf=\"canEdit\"\n                role=\"menuitem\"\n                type=\"button\"\n                class=\"dropdown-item\"\n                (bbKeyboardClick)=\"onEditTemplate(item)\"\n                i18n=\"manage-payment-templates.edit.template\"\n                data-role=\"edit-template-dropdown-item\"\n              >\n                Edit\n              </button>\n              <button\n                *ngIf=\"canDelete\"\n                [attr.aria-label]=\"'Delete ' + item.name\"\n                role=\"menuitem\"\n                type=\"button\"\n                class=\"dropdown-item\"\n                (bbKeyboardClick)=\"openDeleteTemplateModal(item)\"\n                i18n=\"manage-payment-templates.remove.account\"\n                data-role=\"delete-template-dropdown\"\n              >\n                Delete\n              </button>\n            </ng-template>\n          </bb-dropdown-menu-ui>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</div>\n\n<ng-template #actionNotAvailable>\n  <span i18n=\"@@manage-payments.action.not.available\">Not available</span>\n</ng-template>\n\n<ng-template #actionApprove>\n  <span i18n=\"@@manage-payments.action.approve\">Approve</span>\n</ng-template>\n\n<ng-template #actionReject>\n  <span i18n=\"@@manage-payments.action.reject\">Reject</span>\n</ng-template>\n", components: [{ type: i2.TableHeaderCheckboxComponent, selector: "bb-table-header-checkbox", inputs: ["clearSelection"] }, { type: i3.TableCheckboxComponent, selector: "bb-table-checkbox", inputs: ["row", "rowId"] }, { type: i4.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i5.PayordStatusBadgeComponent, selector: "bb-payord-status-badge", inputs: ["status", "statusColorMap", "statusColorDefault", "showAbbreviated"] }, { type: i6.BadgeComponent, selector: "bb-badge-ui", inputs: ["color", "text", "abbr", "circle", "wrap", "ariaLabel"] }, { type: i7.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: i8.DropdownMenuComponent, selector: "bb-dropdown-menu-ui", inputs: ["label", "disabled", "options", "icon", "iconSize", "iconColor", "btnColor", "btnCircle", "optionLabelKey", "fullWidth", "autoClose", "container", "position", "ariaLabel", "dropDownMenuRole", "dropDownMenuId", "buttonSize", "dropDownButtonLabel", "visibleElementDependingOnViewport", "role"], outputs: ["select"] }], directives: [{ type: i9.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i10.TableDirective, selector: "table[bbTable]", inputs: ["bbTable"], outputs: ["selectRow", "rowClick", "sort"] }, { type: i10.TableFocusDirective, selector: "[bbTableFocus]", inputs: ["focusFirstRowOnChanges"] }, { type: i10.TableSortableDirective, selector: "th[bbSortable]", inputs: ["bbSortable", "direction"], outputs: ["sort"] }, { type: i9.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i9.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i10.TableRowDirective, selector: "tr[bbRow]", inputs: ["bbRow"] }, { type: i11.KeyboardClickDirective, selector: "[bbKeyboardClick]", outputs: ["bbKeyboardClick"] }, { type: i12.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i9.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i13.TooltipDirective, selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i8.DropdownMenuItemDirective, selector: "ng-template[bbDropdownMenuItem]" }, { type: i14.ExportPdfDirective, selector: "[bbExportPdf]", inputs: ["bbExportPdf"] }, { type: i8.DropdownLabelDirective, selector: "ng-template[bbDropdownLabel]" }], pipes: { "accountFormatter": i15.AccountFormatterPipe, "titlecase": i9.TitleCasePipe, "date": i9.DatePipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentsTableComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-table-payments-component',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    templateUrl: 'bb-table-payments.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.PaymentConfigService }]; }, propDecorators: { items: [{
                type: Input
            }], searchTerm: [{
                type: Input
            }], clearSelection: [{
                type: Input
            }], responseError: [{
                type: Input
            }], canDelete: [{
                type: Input
            }], canEdit: [{
                type: Input
            }], isManageTransfersMode: [{
                type: Input
            }], isDebitMode: [{
                type: Input
            }], paymentMode: [{
                type: Input
            }], totalCount: [{
                type: Input
            }], pageSize: [{
                type: Input
            }], selectTemplate: [{
                type: Output
            }], templateItemClick: [{
                type: Output
            }], paymentItemClick: [{
                type: Output
            }], triggerDeleteTemplate: [{
                type: Output
            }], sort: [{
                type: Output
            }], selectionSet: [{
                type: Output
            }], editTemplate: [{
                type: Output
            }], approvePayment: [{
                type: Output
            }], rejectPayment: [{
                type: Output
            }], cancelPayment: [{
                type: Output
            }], editPayment: [{
                type: Output
            }], copyPayment: [{
                type: Output
            }] } });
//# sourceMappingURL=bb-table-payments.component.js.map