import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { canCopyPayment, hasCreatePermission, } from '../../helpers/payment-config-helpers';
import { PaymentConfigService } from '../../../configs/services/payment-config.service';
import { getRelativeDate } from '../../helpers/date-helpers';
import { AvailableActions } from '../../constants/constants';
import * as i0 from "@angular/core";
import * as i1 from "../../../configs/services/payment-config.service";
import * as i2 from "@backbase/ui-ang/icon";
import * as i3 from "@backbase/ui-ang/dropdown-menu";
import * as i4 from "../status-badge/status-badge.component";
import * as i5 from "@backbase/ui-ang/amount";
import * as i6 from "@angular/common";
import * as i7 from "@backbase/ui-ang/button";
import * as i8 from "@backbase/ui-ang/tooltip-directive";
import * as i9 from "@backbase/ui-ang/keyboard-click-directive";
import * as i10 from "../../directives/export-pdf/export-pdf.directive";
import * as i11 from "../../pipes/account-formatter/account-formatter.pipe";
export class PaymentsListComponent {
    constructor(paymentConfigService) {
        this.paymentConfigService = paymentConfigService;
        this.hostRef = this;
        /**
         * Flag indicates if the user has delete permission.
         * Default value is `false`.
         */
        this.canDelete = false;
        /**
         * Flag indicates if the user has edit permission.
         * Default value is `false`.
         */
        this.canEdit = false;
        /**
         * Flag indicates whether called from Manage transfers
         */
        this.isManageTransfersMode = false;
        /**
         * Number of payment items shown per page.
         */
        this.size = 0;
        /**
         * Payment mode
         * Default is `SINGLE`.
         */
        this.paymentMode = 'SINGLE';
        /**
         * The flag to denote if it is a debit payment.
         */
        this.isDebitMode = false;
        /**
         * Click delete event emitter.
         */
        this.triggerDeleteTemplate = new EventEmitter();
        /**
         * Click template event emitter.
         */
        this.templateItemClick = new EventEmitter();
        /**
         * Select template event emitter
         */
        this.selectTemplate = new EventEmitter();
        /**
         * Edit template event emitter.
         */
        this.editTemplate = new EventEmitter();
        /**
         * Changes will be triggered on paymentItemClick event emit.
         */
        this.paymentItemClick = new EventEmitter();
        /**
         * Approval event emitter
         */
        this.approvePayment = new EventEmitter();
        /**
         * Rejection event emitter
         */
        this.rejectPayment = new EventEmitter();
        /**
         * Cancel event emitter
         */
        this.cancelPayment = new EventEmitter();
        /**
         * Edit event emitter
         */
        this.editPayment = new EventEmitter();
        /**
         * Copy payment event emitter
         */
        this.copyPayment = new EventEmitter();
        /**
         * Selection set
         */
        this.selectionSet = new EventEmitter();
    }
    mapPaymentType(item) {
        return this.paymentConfigService.mapPaymentType(item);
    }
    onSelectItem(item) {
        this.selectTemplate.emit(item);
    }
    onEditTemplate(template) {
        this.editTemplate.emit(Object.assign(Object.assign({}, template), { query: this.searchTerm }));
    }
    openDeleteTemplateModal(item) {
        this.triggerDeleteTemplate.emit(Object.assign(Object.assign({}, item), { query: this.searchTerm }));
    }
    onTemplateClick(template) {
        this.templateItemClick.emit(template);
    }
    onPaymentItemClick(paymentItem) {
        this.paymentItemClick.emit(paymentItem);
    }
    isApprovalProhibited(paymentItem) {
        return this.isActionDisabled(paymentItem === null || paymentItem === void 0 ? void 0 : paymentItem.actions, AvailableActions.APPROVE);
    }
    onApprovePayment(payment, event) {
        event === null || event === void 0 ? void 0 : event.stopPropagation();
        if (!this.isApprovalProhibited(payment)) {
            this.approvePayment.emit(payment);
        }
    }
    isRejectionProhibited(paymentItem) {
        return this.isActionDisabled(paymentItem === null || paymentItem === void 0 ? void 0 : paymentItem.actions, AvailableActions.REJECT);
    }
    onRejectPayment(payment, event) {
        event === null || event === void 0 ? void 0 : event.stopPropagation();
        if (!this.isRejectionProhibited(payment)) {
            this.rejectPayment.emit(payment);
        }
    }
    onCancelPayment(payment) {
        if (!this.isCancelProhibited(payment)) {
            this.cancelPayment.emit(payment);
        }
    }
    onEditPayment(payment) {
        if (!this.isEditProhibited(payment)) {
            this.editPayment.emit(payment);
        }
    }
    onCopyPayment(payment) {
        if (this.canCopyPayment(payment)) {
            this.copyPayment.emit(Object.assign(Object.assign({}, payment), { isPaymentCopy: true }));
        }
    }
    canCopyPayment(payment) {
        return canCopyPayment(payment);
    }
    isEditProhibited(paymentItem) {
        return this.isActionDisabled(paymentItem === null || paymentItem === void 0 ? void 0 : paymentItem.actions, AvailableActions.EDIT);
    }
    isCancelProhibited(paymentItem) {
        return this.isActionDisabled(paymentItem === null || paymentItem === void 0 ? void 0 : paymentItem.actions, AvailableActions.CANCEL);
    }
    hasCreatePermission(item) {
        return hasCreatePermission(item.actions);
    }
    formatExecutionDate(date) {
        let result = date;
        if (result === getRelativeDate()) {
            result = 'today';
        }
        else if (result === getRelativeDate(1)) {
            result = 'tomorrow';
        }
        return result;
    }
    stopPropagation(event) {
        event.stopPropagation();
    }
    transactionInformation(payment) {
        return payment === null || payment === void 0 ? void 0 : payment.transferTransactionInformation;
    }
    isActionDisabled(actions, actionType) {
        return !actions || actions.indexOf(actionType) === -1;
    }
}
/** @nocollapse */ PaymentsListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentsListComponent, deps: [{ token: i1.PaymentConfigService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PaymentsListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PaymentsListComponent, selector: "bb-list-payments-component", inputs: { items: "items", searchTerm: "searchTerm", responseError: "responseError", canDelete: "canDelete", canEdit: "canEdit", isManageTransfersMode: "isManageTransfersMode", size: "size", paymentMode: "paymentMode", isDebitMode: "isDebitMode" }, outputs: { triggerDeleteTemplate: "triggerDeleteTemplate", templateItemClick: "templateItemClick", selectTemplate: "selectTemplate", editTemplate: "editTemplate", paymentItemClick: "paymentItemClick", approvePayment: "approvePayment", rejectPayment: "rejectPayment", cancelPayment: "cancelPayment", editPayment: "editPayment", copyPayment: "copyPayment", selectionSet: "selectionSet" }, ngImport: i0, template: "<div class=\"bb-block bb-block--xl\"></div>\n<div class=\"col-12 bb-list bb-block bb-block--xl px-3\">\n  <div *ngIf=\"items?.length && !responseError\">\n    <div *ngFor=\"let item of items\" class=\"bb-list__item\" tabindex=\"0\">\n      <div\n        (click)=\"\n          isManageTransfersMode || isDebitMode\n            ? onPaymentItemClick(item)\n            : onTemplateClick(item)\n        \"\n      >\n        <div\n          class=\"bb-stack bb-block bb-block--md\"\n          *ngIf=\"!(isManageTransfersMode || isDebitMode)\"\n        >\n          <ng-container>\n            <bb-icon-ui\n              class=\"bb-text-disabled bb-stack__item bb-stack__item--spacing-xl\"\n              name=\"insert-drive-file\"\n            >\n            </bb-icon-ui>\n            <div class=\"bb-stack__item\">\n              <div class=\"bb-text-bold break-word\">\n                {{ item.name }}\n              </div>\n              <div class=\"bb-text-support\" data-role=\"payment-type\">\n                <div #paymentTypeHeading class=\"d-none\" aria-hidden=\"true\">\n                  <ng-container i18n=\"manage-payment-templates.payment-types\">\n                    {item?.details?.paymentType, select, US_FOREIGN_WIRE {US\n                    Foreign Wire Payment} US_FOREIGN_WIRE_ILE {US Foreign Wire\n                    Payment} SEPA_CT_CLOSED {SEPA CT Transfer} SEPA_CT {SEPA CT\n                    Transfer} SEPA_CT_ILE {SEPA CT Transfer}}\n                  </ng-container>\n                </div>\n                {{\n                  mapPaymentType(item)\n                    ? mapPaymentType(item)\n                    : paymentTypeHeading.textContent\n                }}\n              </div>\n            </div>\n          </ng-container>\n\n          <div\n            class=\"bb-stack__item bb-stack__item--push-right\"\n            *ngIf=\"\n              hasCreatePermission(item) &&\n              !(isManageTransfersMode || isDebitMode)\n            \"\n          >\n            <div class=\"bb-stack\">\n              <button\n                bbButton\n                class=\"bb-stack__item\"\n                buttonSize=\"md\"\n                color=\"unstyled\"\n                aria-label=\"Create payment\"\n                i18n-aria-label=\"\n                  Button for create payment from\n                  template@@manage-payment-templates.create-payment.button\"\n                data-role=\"create-payment-button\"\n                bbTooltip=\"Create new payment from this template\"\n                triggers=\"hover focus\"\n                i18n-bbTooltip=\"\n                  Tooltip for create payment from\n                  template@@manage-payment-templates.create-payment.tooltip\"\n                (click)=\"stopPropagation($event); onSelectItem(item)\"\n              >\n                <bb-icon-ui name=\"payments\" class=\"bb-stack__item\">\n                </bb-icon-ui>\n              </button>\n\n              <ng-container *ngIf=\"!(isManageTransfersMode || isDebitMode)\">\n                <span\n                  class=\"sr-only\"\n                  i18n=\"@@manage-transfers.bb-list-templates.more-actions\"\n                  >More actions</span\n                >\n                <bb-dropdown-menu-ui\n                  class=\"bb-button-bar__button\"\n                  btnColor=\"unstyled\"\n                  btnCircle=\"true\"\n                  container=\"body\"\n                  data-role=\"more-options\"\n                  ariaLabel=\"More actions\"\n                  i18n-ariaLabel=\"\n                    @@manage-templates.bb-list-payments.more-actions.label\"\n                  (bbKeyboardClick)=\"$event.stopPropagation()\"\n                  *ngIf=\"canDelete || canEdit\"\n                >\n                  <ng-template bbDropdownLabel>\n                    <bb-icon-ui name=\"ellipsis-h\"></bb-icon-ui>\n                  </ng-template>\n                  <ng-template bbDropdownMenuItem>\n                    <button\n                      *ngIf=\"canEdit\"\n                      role=\"menuitem\"\n                      type=\"button\"\n                      class=\"dropdown-item\"\n                      (bbKeyboardClick)=\"onEditTemplate(item)\"\n                      i18n=\"manage-payment-templates.edit.template\"\n                      data-role=\"edit-template-dropdown-item\"\n                    >\n                      Edit\n                    </button>\n                    <button\n                      *ngIf=\"canDelete\"\n                      [attr.aria-label]=\"'Delete ' + item.name\"\n                      role=\"menuitem\"\n                      type=\"button\"\n                      class=\"dropdown-item\"\n                      (bbKeyboardClick)=\"openDeleteTemplateModal(item)\"\n                      i18n=\"manage-payment-templates.remove.account\"\n                      data-role=\"delete-template-dropdown\"\n                    >\n                      Delete\n                    </button>\n                  </ng-template>\n                </bb-dropdown-menu-ui>\n              </ng-container>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"bb-stack bb-block bb-block--md\">\n          <div class=\"bb-stack__item bb-stack__item--spacing-md bb-text-bold\">\n            From\n          </div>\n          <div class=\"bb-stack__item\">\n            <div data-role=\"payment-debitor-name\" class=\"break-word\">\n              {{\n                isDebitMode ||\n                transactionInformation(item)?.counterparty?.role === 'DEBTOR'\n                  ? transactionInformation(item)?.counterparty?.name\n                  : isManageTransfersMode\n                  ? item.originator?.name\n                  : item.details.originatorAccount.name\n              }}\n            </div>\n            <div\n              class=\"bb-text-support break-word\"\n              data-role=\"payment-debitor-account\"\n            >\n              {{\n                isDebitMode ||\n                transactionInformation(item)?.counterparty?.role === 'DEBTOR'\n                  ? (transactionInformation(item)?.counterpartyAccount\n                      ?.identification | accountFormatter)\n                  : isManageTransfersMode\n                  ? (item.originatorAccount?.identification | accountFormatter)\n                  : (item.details.originatorAccount.identification\n                    | accountFormatter)\n              }}\n            </div>\n          </div>\n          <ng-container *ngIf=\"isManageTransfersMode || isDebitMode\">\n            <div class=\"bb-stack__item bb-stack__item--push-right\">\n              <div class=\"bb-stack\">\n                <bb-payord-status-badge\n                  class=\"d-md-none\"\n                  [status]=\"item.status\"\n                ></bb-payord-status-badge>\n\n                <span\n                  class=\"sr-only\"\n                  i18n=\"@@manage-transfers.bb-list-payments.more-actions\"\n                  >More actions</span\n                >\n                <bb-dropdown-menu-ui\n                  class=\"bb-button-bar__button\"\n                  btnColor=\"unstyled\"\n                  btnCircle=\"true\"\n                  container=\"body\"\n                  data-role=\"more-options\"\n                  (bbKeyboardClick)=\"$event.stopPropagation()\"\n                  i18n-ariaLabel=\"\n                    @@manage-transfers.bb-list-payments.more-actions.label\"\n                >\n                  <ng-template bbDropdownLabel>\n                    <bb-icon-ui name=\"ellipsis-h\"></bb-icon-ui>\n                  </ng-template>\n                  <ng-template bbDropdownMenuItem>\n                    <button\n                      type=\"button\"\n                      role=\"menuitem\"\n                      class=\"dropdown-item\"\n                      *ngIf=\"!isApprovalProhibited(item)\"\n                      (bbKeyboardClick)=\"onApprovePayment(item, $event)\"\n                      i18n=\"\n                        Approve payment|Approve selected\n                        payment@@manage-payments.payment.list.action.approve\"\n                    >\n                      Approve\n                    </button>\n\n                    <button\n                      type=\"button\"\n                      role=\"menuitem\"\n                      class=\"dropdown-item\"\n                      *ngIf=\"!isRejectionProhibited(item)\"\n                      (bbKeyboardClick)=\"onRejectPayment(item, $event)\"\n                      i18n=\"\n                        Reject payment|Reject selected\n                        payment@@manage-payments.payment.list.action.reject\"\n                    >\n                      Reject\n                    </button>\n\n                    <button\n                      type=\"button\"\n                      role=\"menuitem\"\n                      class=\"dropdown-item\"\n                      *ngIf=\"canCopyPayment(item)\"\n                      (bbKeyboardClick)=\"onCopyPayment(item)\"\n                      i18n=\"\n                        copy payment|transfer selected\n                        payment@@manage-payments.payment.list.action.transfer\"\n                    >\n                      Transfer\n                    </button>\n\n                    <button\n                      type=\"button\"\n                      role=\"menuitem\"\n                      class=\"dropdown-item\"\n                      data-role=\"edit-payment-order-dropdown\"\n                      i18n=\"@@manage-payments.payment.list.action.edit\"\n                      *ngIf=\"!isEditProhibited(item)\"\n                      (bbKeyboardClick)=\"onEditPayment(item)\"\n                    >\n                      Edit\n                    </button>\n\n                    <button\n                      type=\"button\"\n                      role=\"menuitem\"\n                      triggers=\"hover\"\n                      placement=\"left\"\n                      class=\"dropdown-item\"\n                      (bbKeyboardClick)=\"onCancelPayment(item)\"\n                      [class.disabled]=\"isCancelProhibited(item)\"\n                      [bbTooltip]=\"\n                        isCancelProhibited(item) && actionNotAvailable\n                      \"\n                      i18n=\"\n                        cancel payment|cancel selected\n                        payment@@manage-payments.payment.list.action.cancel\"\n                    >\n                      Cancel\n                    </button>\n                    <button\n                      type=\"button\"\n                      role=\"menuitem\"\n                      class=\"dropdown-item\"\n                      data-role=\"export-payment-order-dropdown\"\n                      i18n=\"@@manage-payments.payment.list.action.export-pdf\"\n                      *ngIf=\"item.permissibleActions?.export\"\n                      [bbExportPdf]=\"item.id\"\n                    >\n                      Export PDF\n                    </button>\n                  </ng-template>\n                </bb-dropdown-menu-ui>\n              </div>\n            </div>\n          </ng-container>\n        </div>\n\n        <div class=\"bb-stack bb-block bb-block--md\">\n          <div class=\"bb-stack__item bb-stack__item--spacing-xl bb-text-bold\">\n            To\n          </div>\n          <div class=\"bb-stack__item\">\n            <div data-role=\"payment-creditor-name\" class=\"break-word\">\n              {{\n                isDebitMode ||\n                transactionInformation(item)?.counterparty?.role === 'DEBTOR'\n                  ? item.originator?.name\n                  : isManageTransfersMode\n                  ? transactionInformation(item)?.counterparty?.name\n                  : item.details.transferTransactionInformation.counterparty\n                      .name\n              }}\n            </div>\n            <div\n              class=\"bb-text-support break-word\"\n              data-role=\"payment-creditor-account\"\n            >\n              {{\n                isDebitMode ||\n                transactionInformation(item)?.counterparty?.role === 'DEBTOR'\n                  ? (item.originatorAccount?.identification | accountFormatter)\n                  : isManageTransfersMode\n                  ? (transactionInformation(item)?.counterpartyAccount\n                      ?.identification | accountFormatter)\n                  : (item.details.transferTransactionInformation\n                      .counterpartyAccount.identification | accountFormatter)\n              }}\n            </div>\n          </div>\n          <div\n            class=\"bb-stack__item bb-stack__item--push-right\"\n            *ngIf=\"!(isManageTransfersMode || isDebitMode)\"\n          >\n            <bb-amount-ui\n              [amount]=\"\n                item.details.transferTransactionInformation.instructedAmount\n                  .amount\n              \"\n              [currency]=\"\n                item.details.transferTransactionInformation.instructedAmount\n                  .currencyCode\n              \"\n              [mapCurrency]=\"false\"\n            ></bb-amount-ui>\n          </div>\n        </div>\n\n        <div\n          class=\"bb-stack bb-block bb-block--md\"\n          *ngIf=\"isManageTransfersMode || isDebitMode\"\n        >\n          <div class=\"bb-stack__item bb-stack__item--spacing-xl bb-text-bold\">\n            Exec. date\n          </div>\n          <div class=\"bb-stack__item\">\n            <div\n              data-role=\"payment-exec-date\"\n              *ngIf=\"item.schedule?.nextExecutionDate\"\n              i18n=\"@@manage-payments.payment.list.execution-date-value\"\n            >\n              {formatExecutionDate(item.schedule?.nextExecutionDate), select,\n              today {Today} tomorrow {Tomorrow} other\n              {{{ item.schedule?.nextExecutionDate | date:'shortDate'}}} }\n            </div>\n            <div *ngIf=\"!item.schedule?.nextExecutionDate\">\n              {{ item.requestedExecutionDate | date: 'shortDate' }}\n            </div>\n          </div>\n          <div class=\"bb-stack__item bb-stack__item--push-right\">\n            <bb-amount-ui\n              [amount]=\"\n                item.transferTransactionInformation?.instructedAmount.amount\n              \"\n              [currency]=\"\n                item.transferTransactionInformation?.instructedAmount\n                  .currencyCode\n              \"\n              [mapCurrency]=\"false\"\n            ></bb-amount-ui>\n          </div>\n        </div>\n        <div\n          class=\"bb-stack\"\n          *ngIf=\"\n            (paymentMode === 'RECURRING' || paymentMode === 'ALL') &&\n            (isManageTransfersMode || isDebitMode)\n          \"\n        >\n          <div class=\"bb-stack__item bb-stack__item--spacing-xl bb-text-bold\">\n            Frequency\n          </div>\n          <div class=\"bb-stack__item\">\n            <div\n              data-role=\"payment-frequency\"\n              i18n=\"@@manage-payments.payment.list.frequency-value\"\n            >\n              {item.schedule?.transferFrequency, select, DAILY {Daily} WEEKLY\n              {Weekly} MONTHLY {Monthly} QUARTERLY {Quarterly} YEARLY {Yearly}\n              other {{{item.schedule?.transferFrequency | titlecase}}}}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<ng-template #actionNotAvailable>\n  <span i18n=\"@@manage-payments.action.not.available\">Not available</span>\n</ng-template>\n", components: [{ type: i2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i3.DropdownMenuComponent, selector: "bb-dropdown-menu-ui", inputs: ["label", "disabled", "options", "icon", "iconSize", "iconColor", "btnColor", "btnCircle", "optionLabelKey", "fullWidth", "autoClose", "container", "position", "ariaLabel", "dropDownMenuRole", "dropDownMenuId", "buttonSize", "dropDownButtonLabel", "visibleElementDependingOnViewport", "role"], outputs: ["select"] }, { type: i4.PayordStatusBadgeComponent, selector: "bb-payord-status-badge", inputs: ["status", "statusColorMap", "statusColorDefault", "showAbbreviated"] }, { type: i5.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }], directives: [{ type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i6.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i7.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i8.TooltipDirective, selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i9.KeyboardClickDirective, selector: "[bbKeyboardClick]", outputs: ["bbKeyboardClick"] }, { type: i3.DropdownLabelDirective, selector: "ng-template[bbDropdownLabel]" }, { type: i3.DropdownMenuItemDirective, selector: "ng-template[bbDropdownMenuItem]" }, { type: i10.ExportPdfDirective, selector: "[bbExportPdf]", inputs: ["bbExportPdf"] }], pipes: { "accountFormatter": i11.AccountFormatterPipe, "date": i6.DatePipe, "titlecase": i6.TitleCasePipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentsListComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-list-payments-component',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    templateUrl: 'bb-list-payments.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.PaymentConfigService }]; }, propDecorators: { items: [{
                type: Input
            }], searchTerm: [{
                type: Input
            }], responseError: [{
                type: Input
            }], canDelete: [{
                type: Input
            }], canEdit: [{
                type: Input
            }], isManageTransfersMode: [{
                type: Input
            }], size: [{
                type: Input
            }], paymentMode: [{
                type: Input
            }], isDebitMode: [{
                type: Input
            }], triggerDeleteTemplate: [{
                type: Output
            }], templateItemClick: [{
                type: Output
            }], selectTemplate: [{
                type: Output
            }], editTemplate: [{
                type: Output
            }], paymentItemClick: [{
                type: Output
            }], approvePayment: [{
                type: Output
            }], rejectPayment: [{
                type: Output
            }], cancelPayment: [{
                type: Output
            }], editPayment: [{
                type: Output
            }], copyPayment: [{
                type: Output
            }], selectionSet: [{
                type: Output
            }] } });
//# sourceMappingURL=bb-list-payments.component.js.map