import { Component, ChangeDetectionStrategy, Input, Output, EventEmitter, } from '@angular/core';
import { FormControl } from '@angular/forms';
import { Observable, BehaviorSubject } from 'rxjs';
import { DeprecationsService } from '@backbase/foundation-ang/core';
import { tap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/foundation-ang/core";
import * as i2 from "@backbase/ui-ang/dropdown-menu";
import * as i3 from "@backbase/ui-ang/icon";
import * as i4 from "@backbase/ui-ang/search-box";
import * as i5 from "../sr-search-result-info/sr-search-result-info.component";
import * as i6 from "@backbase/ui-ang/infinite-scroll";
import * as i7 from "@backbase/ui-ang/amount";
import * as i8 from "@backbase/ui-ang/loading-indicator";
import * as i9 from "@backbase/ui-ang/empty-state";
import * as i10 from "@angular/common";
import * as i11 from "@angular/forms";
export class PaymentTemplateSelectorComponent {
    constructor(deprecationsService) {
        this.deprecationsService = deprecationsService;
        /**
         * Flag indicates if the list is loading.
         * Default value is `false`.
         */
        this.loading = false;
        /**
         * Name of the template selector.
         * Default value is ``
         */
        this.templateName = '';
        /**
         * Emits the values for the payment form.
         */
        this.setValues = new EventEmitter();
        /**
         * Event emmiter for loading payment templates.
         */
        this.loadMoreTemplates = new EventEmitter();
        /**
         * Event emmiter for search payment templates.
         */
        this.searchTemplates = new EventEmitter();
        /**
         * Event emmiter for clear the payment form.
         */
        this.clear = new EventEmitter();
        this.searchTerm = new BehaviorSubject('');
    }
    /**
     * Term value on searching a template
     */
    set searchValue(term) {
        this.onSearchPaymentTemplates(term);
        this.searchModel = term;
    }
    loadMore(page) {
        this.loadMoreTemplates.emit(page);
    }
    onSetValues(acc) {
        this.setValues.emit(acc);
    }
    onSearchPaymentTemplates(value) {
        this.searchTemplates.emit(value);
        this.searchTerm.next(value);
    }
    onClearForm(name) {
        this.clear.emit(name);
        this.templateName = name;
    }
    ngOnInit() {
        if (this.templatesList) {
            this.deprecationsService.logDeprecatedFeature(`The templatesList property has been deprecated since 3.9.1 and will be removed in 3.10.0.`);
        }
        this.items = this.items.pipe(tap((templateItems) => {
            var _a;
            return (this.templatesCount =
                (_a = this.templatesCount) !== null && _a !== void 0 ? _a : templateItems.totalCount);
        }));
    }
}
/** @nocollapse */ PaymentTemplateSelectorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentTemplateSelectorComponent, deps: [{ token: i1.DeprecationsService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PaymentTemplateSelectorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PaymentTemplateSelectorComponent, selector: "bb-payment-template-selector", inputs: { items: "items", templatesList: "templatesList", paymentTemplateSearch: "paymentTemplateSearch", loading: "loading", templateName: "templateName", searchValue: "searchValue" }, outputs: { setValues: "setValues", loadMoreTemplates: "loadMoreTemplates", searchTemplates: "searchTemplates", clear: "clear" }, ngImport: i0, template: "<ng-container *ngIf=\"items | async as paymentTemplates\">\n  <div *ngIf=\"templatesCount\" class=\"bb-block bb-block--lg\">\n    <bb-dropdown-menu-ui\n      position=\"bottom-left\"\n      buttonSize=\"sm\"\n      btnColor=\"secondary\"\n      container=\"body\"\n      (click)=\"$event.stopPropagation()\"\n      (keyUp.enter)=\"$event.stopPropagation()\"\n      data-role=\"payment-template-selector-dropdown\"\n      ariaLabel=\"Payment template DropDown button\"\n      i18n-ariaLabel=\"@@omni-payment-template-selector.dropdown\"\n    >\n      <ng-template bbDropdownLabel>\n        <span\n          class=\"bb-payment-template-selector__placeholder bb-ellipsis bb-ellipsis--single-line\"\n        >\n          <ng-container *ngIf=\"templateName\">{{ templateName }}</ng-container>\n          <ng-container\n            *ngIf=\"!templateName\"\n            i18n=\"@@omni-payment-template-selector.label\"\n            >Select a template\n          </ng-container>\n        </span>\n        <bb-icon-ui name=\"caret-down\" size=\"md\"></bb-icon-ui>\n      </ng-template>\n      <ng-template bbDropdownMenuItem>\n        <div class=\"bb-payment-template-selector__list-container\">\n          <div class=\"bb-payment-template-selector__search-box-container\">\n            <div\n              class=\"bb-payment-template-selector__search-box\"\n              [ngClass]=\"{ 'bb-block--sm': (searchTerm | async) }\"\n            >\n              <bb-search-box-ui\n                data-role=\"search-template\"\n                #searchBox\n                aria-label=\"Search template name\"\n                i18n-aria-label=\"@@template-selector-search-template-label\"\n                [showSearch]=\"true\"\n                [showClear]=\"true\"\n                [ngModel]=\"searchModel\"\n                placeholder=\"Search template name\"\n                i18n-placeholder=\"\n                  @@template-selector-search-template-placeholder\"\n                (valueChange)=\"onSearchPaymentTemplates($event)\"\n                (clear)=\"onSearchPaymentTemplates('')\"\n              >\n              </bb-search-box-ui>\n            </div>\n            <ng-container *ngIf=\"(searchTerm | async) && !loading\">\n              <bb-payments-sr-search-result-info\n                [totalNumber]=\"paymentTemplates.totalCount\"\n              >\n              </bb-payments-sr-search-result-info>\n              <div class=\"bb-block bb-block--xs\"></div>\n              <div\n                *ngIf=\"paymentTemplates?.items?.length\"\n                data-role=\"results-found\"\n                i18n=\"@@omni-payment-template-selector.results-found\"\n              >\n                {paymentTemplates?.items?.length, plural, =1 {1 result found}\n                other\n                {{{paymentTemplates?.items?.length}} results found}}\n              </div>\n            </ng-container>\n          </div>\n          <div class=\"bb-infinite-scroll-container\">\n            <bb-infinite-scroll-ui\n              class=\"bb-infinite-scroll\"\n              [disableScrollEnd]=\"\n                loading ||\n                paymentTemplates?.items?.length === paymentTemplates?.totalCount\n              \"\n              [offset]=\"5\"\n              (scrollEnd)=\"loadMore(1)\"\n            >\n              <ng-container\n                *ngIf=\"paymentTemplates?.items?.length; else emptyState\"\n              >\n                <div class=\"bb-list\" *ngIf=\"!loading\">\n                  <div\n                    role=\"menuitem\"\n                    *ngFor=\"let temp of paymentTemplates?.items\"\n                    class=\"dropdown-item btn-link-dark bb-payment-template-selector__item\"\n                    (click)=\"onSetValues(temp)\"\n                    (keydown.enter)=\"onSetValues(temp)\"\n                  >\n                    <div\n                      class=\"bb-ellipsis bb-ellipsis--single-line bb-text-bold\"\n                      data-role=\"template-name\"\n                    >\n                      {{ temp.name }}\n                    </div>\n                    <ng-container\n                      *ngIf=\"\n                        temp.details\n                          .transferTransactionInformation as transactionInfo;\n                        else noBeneficiaryInfo\n                      \"\n                    >\n                      <div\n                        *ngIf=\"\n                          transactionInfo?.counterpartyAccount?.identification\n                            ?.identification ||\n                            transactionInfo?.counterparty?.name;\n                          else noBeneficiaryInfo\n                        \"\n                      >\n                        <div\n                          class=\"bb-subtitle bb-ellipsis bb-ellipsis--single-line\"\n                          data-role=\"template-counterparty-name\"\n                        >\n                          To: {{ transactionInfo.counterparty.name }}\n                        </div>\n                        <div\n                          class=\"bb-subtitle bb-text-support bb-ellipsis bb-ellipsis--single-line\"\n                          data-role=\"template-account\"\n                        >\n                          {{\n                            transactionInfo.counterpartyAccount.identification\n                              .identification\n                          }}\n                        </div>\n                        <div\n                          *ngIf=\"\n                            transactionInfo?.instructedAmount?.amount as amount\n                          \"\n                          class=\"bb-stack bb-subtitle\"\n                        >\n                          <bb-amount-ui\n                            class=\"bb-stack__item bb-stack__item--push-right\"\n                            [currency]=\"\n                              transactionInfo.instructedAmount.currencyCode\n                            \"\n                            [amount]=\"amount\"\n                            [mapCurrency]=\"false\"\n                          ></bb-amount-ui>\n                        </div>\n                      </div>\n                    </ng-container>\n                    <ng-template #noBeneficiaryInfo>\n                      <div\n                        data-role=\"no-beneficiary-info\"\n                        class=\"bb-subtitle bb-text-support\"\n                        i18n=\"\n                          @@omni-payment-template-selector.no-beneficiary-info\"\n                      >\n                        No beneficiary info\n                      </div>\n                    </ng-template>\n                  </div>\n                </div>\n                <p *ngIf=\"loading\">\n                  <bb-loading-indicator-ui></bb-loading-indicator-ui>\n                </p>\n              </ng-container>\n              <ng-template #emptyState>\n                <div class=\"card-body\">\n                  <bb-empty-state-ui\n                    data-role=\"no-templates-found\"\n                    title=\"No Results Found\"\n                    subtitle=\"We can\u2019t find what you\u2019re looking for. Please try a different criteria.\"\n                    iconSize=\"xxl\"\n                    i18n-subtitle=\"\n                      @@omni-payment-template-selector.empty-state-subtitle\"\n                    i18n-title=\"\n                      @@omni-payment-template-selector.empty-state-title\"\n                    iconModifier=\"search\"\n                    [showIcon]=\"true\"\n                  ></bb-empty-state-ui>\n                </div>\n              </ng-template>\n            </bb-infinite-scroll-ui>\n          </div>\n        </div>\n      </ng-template>\n    </bb-dropdown-menu-ui>\n  </div>\n</ng-container>\n", components: [{ type: i2.DropdownMenuComponent, selector: "bb-dropdown-menu-ui", inputs: ["label", "disabled", "options", "icon", "iconSize", "iconColor", "btnColor", "btnCircle", "optionLabelKey", "fullWidth", "autoClose", "container", "position", "ariaLabel", "dropDownMenuRole", "dropDownMenuId", "buttonSize", "dropDownButtonLabel", "visibleElementDependingOnViewport", "role"], outputs: ["select"] }, { type: i3.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i4.SearchBoxComponent, selector: "bb-search-box-ui", inputs: ["placeholder", "maxLength", "squareBorder", "typeaheadOptions", "showSearch", "showClear", "searchLabel", "clearLabel", "autocomplete"], outputs: ["submit", "clear", "valueChange"] }, { type: i5.PaymentsSrSearchResultInfoComponent, selector: "bb-payments-sr-search-result-info", inputs: ["totalNumber"] }, { type: i6.InfiniteScrollComponent, selector: "bb-infinite-scroll-ui", inputs: ["offset", "debounce", "disableScrollEnd"], outputs: ["scrollEnd"] }, { type: i7.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: i8.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i9.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i10.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.DropdownLabelDirective, selector: "ng-template[bbDropdownLabel]" }, { type: i2.DropdownMenuItemDirective, selector: "ng-template[bbDropdownMenuItem]" }, { type: i10.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i11.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i11.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i10.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "async": i10.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentTemplateSelectorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payment-template-selector',
                    templateUrl: 'payment-template-selector.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.DeprecationsService }]; }, propDecorators: { items: [{
                type: Input
            }], templatesList: [{
                type: Input
            }], paymentTemplateSearch: [{
                type: Input
            }], loading: [{
                type: Input
            }], templateName: [{
                type: Input
            }], searchValue: [{
                type: Input
            }], setValues: [{
                type: Output
            }], loadMoreTemplates: [{
                type: Output
            }], searchTemplates: [{
                type: Output
            }], clear: [{
                type: Output
            }] } });
//# sourceMappingURL=payment-template-selector.component.js.map