import { Component, Input } from '@angular/core';
import BigNumber from 'bignumber.js';
import { ChargeBearer } from '../../models';
import * as i0 from "@angular/core";
import * as i1 from "../dynamic-label/dynamic-label.component";
import * as i2 from "@backbase/ui-ang/amount";
import * as i3 from "@angular/common";
export class PayordAmountDetailsComponent {
    constructor() {
        this.hasTransferFee = false;
        this.exchangeRateError = false;
    }
    ngOnInit() {
        var _a, _b, _c;
        const transferFee = this.transferFee || { amount: '0', currencyCode: '' };
        const amount = (_b = (_a = this.details) === null || _a === void 0 ? void 0 : _a.amountGroup) === null || _b === void 0 ? void 0 : _b.amount;
        this.hasTransferFee = !!transferFee.amount;
        const calculatedAmount = new BigNumber(((_c = this.forexDetails) === null || _c === void 0 ? void 0 : _c.calculatedAmount) || amount || '0')
            .plus(transferFee.amount)
            .toString();
        this.exchangeRateError = this.hasForexError();
        this.totalAmount =
            this.hasTransferFee && this.chargeBearer !== 'BEN'
                ? calculatedAmount
                : amount;
    }
    hasForexError() {
        var _a, _b, _c;
        return !!(((_a = this.forexDetails) === null || _a === void 0 ? void 0 : _a.fromCurrency) !== ((_b = this.forexDetails) === null || _b === void 0 ? void 0 : _b.toCurrency) &&
            !((_c = this.forexDetails) === null || _c === void 0 ? void 0 : _c.rate));
    }
}
/** @nocollapse */ PayordAmountDetailsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordAmountDetailsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PayordAmountDetailsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordAmountDetailsComponent, selector: "bb-payord-amount-details", inputs: { config: "config", details: "details", transferFee: "transferFee", chargeBearer: "chargeBearer", forexDetails: "forexDetails" }, ngImport: i0, template: "<div class=\"bb-block bb-block--md\">\n  <div class=\"bb-text-bold\">\n    <bb-payord-dynamic-label\n      name=\"amountGroup\"\n      [config]=\"config\"\n      defaultLabel=\"Amount\"\n      i18n-defaultLabel\n    ></bb-payord-dynamic-label>\n  </div>\n  <div\n    class=\"bb-highlight break-word bb-block bb-block--xs\"\n    data-role=\"transfer-amount\"\n  >\n    <bb-amount-ui\n      [amount]=\"details?.amountGroup?.amount\"\n      [currency]=\"details?.amountGroup?.currency\"\n      [mapCurrency]=\"false\"\n    ></bb-amount-ui>\n  </div>\n  <ng-container *ngIf=\"forexDetails?.calculatedAmount\">\n    <div class=\"bb-block bb-block--xs\">\n      <span i18n=\"amount-details.payment.details.amount-you-pay-label\"\n        >Amount you pay</span\n      >:\n      <span data-role=\"amount-you-pay\">\n        &asymp;\n        <bb-amount-ui\n          [mapCurrency]=\"false\"\n          [amount]=\"forexDetails?.calculatedAmount\"\n          [currency]=\"forexDetails?.fromCurrency\"\n        ></bb-amount-ui>\n      </span>\n    </div>\n    <div class=\"bb-block bb-block--xs\" data-role=\"indicative-rate\">\n      <span i18n=\"amount-details.payment.details.indicative-fee-label\"\n        >Indicative rate</span\n      >: 1 {{ forexDetails?.fromCurrency }} &asymp; {{ forexDetails?.rate }}\n      {{ forexDetails?.toCurrency }}\n    </div>\n  </ng-container>\n\n  <div class=\"bb-block bb-block--md\" *ngIf=\"transferFee\">\n    <div class=\"bb-block bb-block--xs\" data-role=\"transfer-fee\">\n      <span\n        *ngIf=\"config?.name\"\n        i18n=\"@@standard-transfer-fee-label\"\n        data-role=\"transfer-fee-label\"\n        >Transfer fee - {{ config.name }}:\n      </span>\n\n      <bb-amount-ui\n        [amount]=\"transferFee?.amount\"\n        [currency]=\"transferFee?.currencyCode || details?.amountGroup?.currency\"\n        [mapCurrency]=\"false\"\n        data-role=\"transfer-fee\"\n      ></bb-amount-ui>\n    </div>\n\n    <div class=\"bb-block bb-block--xs\" data-role=\"charge-bearer\">\n      <ng-container *ngIf=\"chargeBearer\" [ngSwitch]=\"chargeBearer\">\n        <ng-container i18n=\"@@charge-bearer-value-our\" *ngSwitchCase=\"'OUR'\">\n          I pay all fees (OUR)\n        </ng-container>\n        <ng-container i18n=\"@@charge-bearer-value-ben\" *ngSwitchCase=\"'BEN'\">\n          Beneficiary pays all fees (BEN)\n        </ng-container>\n        <ng-container i18n=\"@@charge-bearer-value-sha\" *ngSwitchCase=\"'SHA'\">\n          Fee is shared between you and beneficiary (SHA)\n        </ng-container>\n      </ng-container>\n    </div>\n\n    <div *ngIf=\"!exchangeRateError\" class=\"bb-text-bold\">\n      <span i18n=\"@@total-label\">Total: </span>\n      <ng-container\n        i18n=\"@@total-approximate-sign\"\n        *ngIf=\"forexDetails?.calculatedAmount\"\n        >&asymp;\n      </ng-container>\n      <bb-amount-ui\n        [amount]=\"totalAmount\"\n        [currency]=\"\n          forexDetails?.fromCurrency || details?.amountGroup?.currency\n        \"\n        [mapCurrency]=\"false\"\n        [attr.data-role]=\"'transfer-total'\"\n      ></bb-amount-ui>\n    </div>\n  </div>\n</div>\n", components: [{ type: i1.PayordDynamicLabelComponent, selector: "bb-payord-dynamic-label", inputs: ["config", "name", "defaultLabel", "parentName"] }, { type: i2.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i3.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordAmountDetailsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payord-amount-details',
                    templateUrl: './amount-details.component.html',
                }]
        }], propDecorators: { config: [{
                type: Input
            }], details: [{
                type: Input
            }], transferFee: [{
                type: Input
            }], chargeBearer: [{
                type: Input
            }], forexDetails: [{
                type: Input
            }] } });
//# sourceMappingURL=amount-details.component.js.map