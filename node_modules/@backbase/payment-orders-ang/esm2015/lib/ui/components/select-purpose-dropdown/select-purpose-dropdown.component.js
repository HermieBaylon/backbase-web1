import { Component, Input, Output, EventEmitter, forwardRef, } from '@angular/core';
import { FormControl, NG_VALUE_ACCESSOR, } from '@angular/forms';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/icon";
import * as i2 from "@backbase/ui-ang/search-box";
import * as i3 from "../sr-search-result-info/sr-search-result-info.component";
import * as i4 from "@backbase/ui-ang/ellipsis";
import * as i5 from "@backbase/ui-ang/empty-state";
import * as i6 from "@ng-bootstrap/ng-bootstrap";
import * as i7 from "@angular/common";
import * as i8 from "@backbase/ui-ang/button";
import * as i9 from "@angular/forms";
import * as i10 from "@backbase/ui-ang/keyboard-click-directive";
import * as i11 from "@backbase/ui-ang/tooltip-directive";
export class SelectPurposeDropdownComponent {
    constructor() {
        this.search = new FormControl();
        this.filteredPurposes = [];
        /**
         * Description length to show tooltip along
         */
        this.longDescription = 150;
        /**
         * Helper text for the component. Defaults to empty string.
         */
        this.helperText = '';
        /**
         * Placeholder text. Defaults to empty string.
         */
        this.placeholder = '';
        /**
         * Label of the component. Defaults to empty string.
         */
        this.label = '';
        /**
         * Placeholder fot search. Defaults to empty string.
         */
        this.searchPlaceholder = '';
        /**
         * Icon for the dropdown. Defaults to `toggle-down`
         */
        this.dropdownIcon = 'toggle-down';
        /**
         * Emits value when a country is selected
         */
        this.selectPurpose = new EventEmitter();
    }
    /**
     * Array of country iso codes
     */
    set purposes(purposes) {
        this._purposes = purposes || [];
        this.setupPurposes();
    }
    getSelectedPurposeFull(purposeCode) {
        return (this._purposes.find((item) => (item === null || item === void 0 ? void 0 : item.code) === purposeCode) || {
            code: purposeCode,
            description: '',
        });
    }
    setupPurposes() {
        this.purposeEntries = this._purposes.map((purpose) => [
            purpose.code,
            purpose.description,
        ]);
        this.filteredPurposes = [...this._purposes];
    }
    selectItem(purpose) {
        this.selectedPurpose = purpose.code;
        this.selectPurpose.emit(purpose.code);
        if (this.search.value) {
            this.search.reset();
        }
    }
    handleSearch(query = '') {
        if (query) {
            this.filteredPurposes = this.purposeEntries.reduce((acc, [code, description]) => {
                if (code.toLocaleLowerCase().indexOf(query.toLocaleLowerCase()) > -1 ||
                    description.toLocaleLowerCase().indexOf(query.toLocaleLowerCase()) >
                        -1) {
                    acc.push({ code, description });
                }
                return acc;
            }, []);
        }
        else {
            this.filteredPurposes = this._purposes;
        }
    }
    onChange() { }
    onTouched() { }
    writeValue() { }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
}
/** @nocollapse */ SelectPurposeDropdownComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectPurposeDropdownComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ SelectPurposeDropdownComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: SelectPurposeDropdownComponent, selector: "bb-select-purpose-dropdown", inputs: { longDescription: "longDescription", purposes: "purposes", isOptional: "isOptional", selectedPurpose: "selectedPurpose", helperText: "helperText", placeholder: "placeholder", label: "label", searchPlaceholder: "searchPlaceholder", dropdownIcon: "dropdownIcon" }, outputs: { selectPurpose: "selectPurpose" }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            multi: true,
            useExisting: forwardRef((() => SelectPurposeDropdownComponent)),
        },
    ], ngImport: i0, template: "<div\n  class=\"bb-dynamic-input bb-select-purpose-dropdown\"\n  ngbDropdown\n  #dropdown=\"ngbDropdown\"\n  display=\"static\"\n>\n  <div class=\"d-inline-block bb-label\" (click)=\"btn.focus()\" *ngIf=\"label\">\n    {{ label }}\n  </div>\n  <span\n    class=\"bb-dynamic-input__helper-text bb-text-support\"\n    *ngIf=\"isOptional && helperText\"\n    [id]=\"searchElem?.id + '__helper-text'\"\n    [textContent]=\"helperText\"\n  >\n  </span>\n  <div>\n    <button\n      #btn\n      bbButton\n      ngbDropdownToggle\n      color=\"unstyled\"\n      (blur)=\"onTouched()\"\n      data-role=\"open-purpose-dropdown-list-button\"\n      [attr.aria-label]=\"label\"\n      class=\"bb-select-purpose-dropdown__toggle form-control w-100 pr-5 d-flex justify-content-between bb-text-support\"\n    >\n      <ng-container *ngIf=\"selectedPurpose\">\n        <ng-container\n          *ngTemplateOutlet=\"\n            selectedPurposeTmpl;\n            context: { $implicit: getSelectedPurposeFull(selectedPurpose) }\n          \"\n        ></ng-container>\n      </ng-container>\n      <ng-container *ngIf=\"!selectedPurpose\">\n        <ng-container\n          *ngIf=\"placeholder; else defaultPlaceHolder\"\n        ></ng-container>\n        {{ placeholder }}\n      </ng-container>\n      <bb-icon-ui [name]=\"dropdownIcon || 'toggle-down'\"></bb-icon-ui>\n    </button>\n  </div>\n\n  <div ngbDropdownMenu class=\"dropdown-menu dropdown-menu-right w-100\">\n    <div class=\"bb-block bb-block--md px-3\">\n      <bb-search-box-ui\n        (focus)=\"dropdown.open()\"\n        [formControl]=\"search\"\n        (clear)=\"handleSearch('')\"\n        data-role=\"purpose-search\"\n        (ngModelChange)=\"handleSearch(search.value)\"\n        [placeholder]=\"searchPlaceholder || 'Search'\"\n        [showSearch]=\"true\"\n        [showClear]=\"true\"\n        [autocomplete]=\"'off'\"\n        #searchElem\n      >\n      </bb-search-box-ui>\n    </div>\n\n    <bb-payments-sr-search-result-info [totalNumber]=\"filteredPurposes?.length\">\n    </bb-payments-sr-search-result-info>\n\n    <div\n      *ngIf=\"filteredPurposes?.length\"\n      class=\"pre-scrollable\"\n      data-role=\"list-pop-values\"\n    >\n      <button\n        *ngFor=\"let purpose of filteredPurposes\"\n        role=\"menuitem\"\n        type=\"button\"\n        class=\"d-sm-flex px-3 py-2 d-flex-row align-items-center btn--unstyled\"\n        (bbKeyboardClick)=\"selectItem(purpose)\"\n        ngbDropdownItem\n      >\n        <ng-container\n          *ngTemplateOutlet=\"\n            purpose?.description?.length < longDescription\n              ? purposeTmpl\n              : purposeTmplLong;\n            context: { $implicit: purpose }\n          \"\n        ></ng-container>\n      </button>\n    </div>\n    <ng-container *ngIf=\"!filteredPurposes?.length && search?.value\">\n      <ng-container *ngTemplateOutlet=\"emptySearch\"></ng-container>\n    </ng-container>\n    <ng-container *ngIf=\"!filteredPurposes?.length && !search?.value\">\n      <ng-container *ngTemplateOutlet=\"empty\"></ng-container>\n    </ng-container>\n  </div>\n</div>\n\n<ng-template let-purpose #purposeTmplLong>\n  <div\n    class=\"d-flex justify-content-between align-items-center w-100\"\n    data-role=\"long-pop-desc\"\n  >\n    <div class=\"bb-stack\">\n      <div class=\"bb-stack__item bb-stack__item--align-top\">\n        {{ purpose.code }}\n      </div>\n      <div\n        class=\"bb-stack__item bb-text-support bb-product-selector__item-content\"\n        [bbTooltip]=\"tipContent\"\n        placement=\"right\"\n        [triggers]=\"'hover'\"\n        [container]=\"'body'\"\n      >\n        <bb-ellipsis-ui [lineClamp]=\"5\">{{\n          purpose.description\n        }}</bb-ellipsis-ui>\n      </div>\n    </div>\n  </div>\n  <ng-template #tipContent\n    ><div class=\"bb-text-align-left\">\n      {{ purpose.description }}\n    </div></ng-template\n  >\n</ng-template>\n\n<ng-template let-purpose #purposeTmpl>\n  <div\n    class=\"d-flex justify-content-between align-items-center w-100\"\n    data-role=\"short-pop-desc\"\n  >\n    <div class=\"bb-stack\">\n      <div class=\"bb-stack__item bb-stack__item--align-top\">\n        {{ purpose.code }}\n      </div>\n      <div\n        class=\"bb-stack__item bb-text-support bb-product-selector__item-content\"\n      >\n        {{ purpose.description }}\n      </div>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template let-purpose #selectedPurposeTmpl>\n  <div class=\"d-flex justify-content-between align-items-center w-100\">\n    <div class=\"bb-stack\">\n      <div class=\"bb-stack__item bb-stack__item--align-top\">\n        {{ purpose.code }}\n      </div>\n      <div\n        class=\"bb-stack__item bb-text-support bb-ellipsis bb-ellipsis--single-line\"\n        [bbTooltip]=\"tipContent\"\n        placement=\"bottom\"\n        [triggers]=\"'hover'\"\n        data-role=\"pop-description\"\n      >\n        {{ purpose.description }}\n      </div>\n    </div>\n  </div>\n  <ng-template #tipContent\n    ><div class=\"bb-text-align-left\">\n      {{ purpose.description }}\n    </div></ng-template\n  >\n</ng-template>\n\n<ng-template #emptySearch>\n  <div class=\"card-body\">\n    <bb-empty-state-ui\n      data-role=\"no-templates-found\"\n      title=\"No search results\"\n      i18n-title=\"@@bb-select-purpose-dropdown.empty-state-title\"\n      [showIcon]=\"false\"\n    ></bb-empty-state-ui>\n  </div>\n</ng-template>\n\n<ng-template #empty>\n  <div class=\"card-body\">\n    <bb-empty-state-ui\n      data-role=\"no-templates-provided\"\n      title=\"No Purposes Provided\"\n      i18n-title=\"@@bb-select-purpose-dropdown.empty-title\"\n    ></bb-empty-state-ui>\n  </div>\n</ng-template>\n\n<ng-template #defaultPlaceHolder>\n  <ng-container i18n=\"@@purpose-selector-default-placeholder\"\n    >- select a purpose -</ng-container\n  >\n</ng-template>\n", components: [{ type: i1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i2.SearchBoxComponent, selector: "bb-search-box-ui", inputs: ["placeholder", "maxLength", "squareBorder", "typeaheadOptions", "showSearch", "showClear", "searchLabel", "clearLabel", "autocomplete"], outputs: ["submit", "clear", "valueChange"] }, { type: i3.PaymentsSrSearchResultInfoComponent, selector: "bb-payments-sr-search-result-info", inputs: ["totalNumber"] }, { type: i4.EllipsisComponent, selector: "bb-ellipsis-ui", inputs: ["text", "tooltipTriggers", "lineClamp"] }, { type: i5.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i6.NgbDropdown, selector: "[ngbDropdown]", inputs: ["open", "placement", "container", "autoClose", "display", "dropdownClass"], outputs: ["openChange"], exportAs: ["ngbDropdown"] }, { type: i7.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i8.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i6.NgbDropdownToggle, selector: "[ngbDropdownToggle]" }, { type: i7.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i6.NgbDropdownMenu, selector: "[ngbDropdownMenu]" }, { type: i9.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i9.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i7.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i6.NgbDropdownItem, selector: "[ngbDropdownItem]", inputs: ["disabled"] }, { type: i10.KeyboardClickDirective, selector: "[bbKeyboardClick]", outputs: ["bbKeyboardClick"] }, { type: i11.TooltipDirective, selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectPurposeDropdownComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-select-purpose-dropdown',
                    templateUrl: './select-purpose-dropdown.component.html',
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            multi: true,
                            useExisting: forwardRef((() => SelectPurposeDropdownComponent)),
                        },
                    ],
                }]
        }], propDecorators: { longDescription: [{
                type: Input
            }], purposes: [{
                type: Input
            }], isOptional: [{
                type: Input
            }], selectedPurpose: [{
                type: Input
            }], helperText: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], label: [{
                type: Input
            }], searchPlaceholder: [{
                type: Input
            }], dropdownIcon: [{
                type: Input
            }], selectPurpose: [{
                type: Output
            }] } });
//# sourceMappingURL=select-purpose-dropdown.component.js.map