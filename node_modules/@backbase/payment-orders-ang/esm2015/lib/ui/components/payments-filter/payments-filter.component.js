import { ChangeDetectionStrategy, Component, Directive, EventEmitter, Input, Output, } from '@angular/core';
import { FormBuilder, FormControl, Validators, } from '@angular/forms';
import { Status } from '../../constants';
import { takeUntil } from 'rxjs/operators';
import { Subject } from 'rxjs';
import { BbTemplate } from '@backbase/foundation-ang/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "@backbase/ui-ang/dropdown-multi-select";
import * as i3 from "@backbase/ui-ang/input-number";
import * as i4 from "@backbase/ui-ang/input-validation-message";
import * as i5 from "@backbase/ui-ang/input-datepicker";
import * as i6 from "@angular/common";
import * as i7 from "@backbase/ui-ang/button";
export class PaymentsFilterComponent {
    constructor(fb) {
        this.fb = fb;
        /**
         * Reference to instance of customizable component.
         */
        this.hostRef = this;
        /**
         * Reference to Status enum
         */
        this.statusesMap = Status;
        this.paymentsFilterForm = this.fb.group({
            status: new FormControl(),
            amount: this.fb.group({
                from: ['', Validators.min(0)],
                to: ['', Validators.min(0)],
            }, { validator: this.amountValidator.bind(this) }),
            executionDate: new FormControl(),
        });
        this.gc$ = new Subject();
        this.filterValueChanges = this.paymentsFilterForm.valueChanges.pipe(takeUntil(this.gc$));
        this.alreadyApplied = false;
        /**
         * EventEmitter for triggering a filter action.
         */
        this.filter = new EventEmitter();
        /**
         * EventEmitter for closing filter form
         */
        this.closeFilter = new EventEmitter();
        /**
         * EventEmitter for displaying wether filter was applied or not
         */
        this.isFilterApplied = new EventEmitter();
        /**
         * EventEmitter for when form is reset. Search should be executed
         */
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.reset = new EventEmitter();
        /**
         * String array with statuses that should not be available in current instance
         */
        this.statusBlackList = [];
    }
    ngOnInit() {
        this.onFilterChanges();
    }
    /**
     * Emit event to apply filter.
     *
     * @param filterParams - Options to filter transactions list with.
     */
    onFilter(filterParams) {
        if (filterParams.status) {
            filterParams.status = this.filterStatusMap(filterParams.status);
        }
        this.filter.emit(this.normalizeFilterValues(filterParams));
        this.alreadyApplied = true;
    }
    /**
     * Clear filter form, reset values to default and emit event to apply filter.
     */
    onClearFilter() {
        this.paymentsFilterForm.reset();
        this.paymentsFilterForm.markAsPristine();
        if (this.alreadyApplied) {
            this.reset.emit(Object.assign({}, this.paymentsFilterForm.value));
        }
        this.isFilterApplied.emit(false);
        this.alreadyApplied = false;
    }
    /**
     * Emit event to close this filter form.
     */
    onCloseFilter() {
        this.closeFilter.emit();
    }
    isApplyButtonDisabled() {
        const amountControl = this.paymentsFilterForm.get('amount');
        const executionDateControl = this.paymentsFilterForm.get('executionDate');
        return !!(this.paymentsFilterForm.pristine ||
            (amountControl === null || amountControl === void 0 ? void 0 : amountControl.invalid) ||
            (executionDateControl === null || executionDateControl === void 0 ? void 0 : executionDateControl.invalid));
    }
    amountValidator(group) {
        const amountControls = group.controls;
        const toControlHasValue = amountControls.to.value || amountControls.to.value === 0;
        this.resetAmountError(amountControls.to);
        this.resetAmountError(amountControls.from);
        if (toControlHasValue &&
            amountControls.from.value > amountControls.to.value) {
            amountControls.to.setErrors(Object.assign({ incorrectAmount: true }, amountControls.to.errors));
            amountControls.from.setErrors(Object.assign({ incorrectAmount: true }, amountControls.from.errors));
        }
    }
    resetAmountError(control) {
        let controlErrors = control.errors;
        controlErrors === null || controlErrors === void 0 ? true : delete controlErrors.incorrectAmount;
        if (!Object.keys(Object.assign({}, controlErrors)).length) {
            controlErrors = null;
        }
        control.setErrors(controlErrors);
    }
    get amountToControl() {
        var _a;
        return (_a = this.paymentsFilterForm.get('amount')) === null || _a === void 0 ? void 0 : _a.get('to');
    }
    /**
     * filterStatusMap Converts `PROCESSING`status in the array,
     * to `READY`, `ACKNOWLEDGED`, and `DOWNLOADING` since the server
     * uses the statuses, but the user should only see them as
     * `PROCESSING`
     */
    filterStatusMap(statuses) {
        const processingStatusMapping = [
            this.statusesMap.READY,
            this.statusesMap.ACKNOWLEDGED,
            this.statusesMap.DOWNLOADING,
        ];
        const retVal = statuses.includes(this.statusesMap.PROCESSING)
            ? [
                ...statuses.filter((status) => status !== this.statusesMap.PROCESSING),
                ...processingStatusMapping,
            ]
            : statuses;
        return retVal;
    }
    normalizeFilterValues(model) {
        if (model.executionDate &&
            model.executionDate.from &&
            !model.executionDate.to) {
            model.executionDate.to = model.executionDate.from;
        }
        return model;
    }
    /**
     * onFilterChanges generates the subscription that will
     * mark the form as pristine if no filter inputs have values
     */
    onFilterChanges() {
        this.filterValueChanges.subscribe((val) => {
            if (val.status ||
                val.amount.from ||
                val.amount.to ||
                (val.executionDate && val.executionDate.from)) {
                return;
            }
            this.paymentsFilterForm.markAsPristine();
            if (this.alreadyApplied) {
                this.reset.emit(Object.assign({}, this.paymentsFilterForm.value));
                this.alreadyApplied = false;
                this.isFilterApplied.emit(false);
            }
        });
    }
    ngOnDestroy() {
        this.gc$.next();
        this.gc$.complete();
    }
    getExecutionDateErrorId(executionDateId) {
        return `${executionDateId}__error`;
    }
    getExecutionDateDescribedBy(executionDateId) {
        return `date-range-header-${executionDateId} ${this.getExecutionDateErrorId(executionDateId)}`;
    }
}
/** @nocollapse */ PaymentsFilterComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentsFilterComponent, deps: [{ token: i1.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PaymentsFilterComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PaymentsFilterComponent, selector: "bb-payments-filter", inputs: { statusBlackList: "statusBlackList" }, outputs: { filter: "filter", closeFilter: "closeFilter", isFilterApplied: "isFilterApplied", reset: "reset" }, ngImport: i0, template: "<ng-container bbPaymentsFilterCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbPaymentsFilterCustomizable let-hostRef>\n  <form class=\"form bg-lighter\" [formGroup]=\"hostRef.paymentsFilterForm\">\n    <div class=\"bb-block bb-block--md\">\n      <div class=\"row\">\n        <!-- Payment Status select -->\n        <div class=\"bb-block bb-block--md col-12 col-md-6 col-xl-4\">\n          <bb-dropdown-multi-select-ui\n            label=\"Status\"\n            i18n-label=\"@@bb-payments-filter.form.label.status\"\n            placeholder=\"All\"\n            i18n-placeholder=\"@@bb-payments-filter.form.label.status.all\"\n            formControlName=\"status\"\n            data-role=\"select-status\"\n          >\n            <bb-dropdown-multi-select-option-ui\n              *ngIf=\"\n                !hostRef.statusBlackList.includes(hostRef.statusesMap.ENTERED)\n              \"\n              label=\"Entered\"\n              [value]=\"hostRef.statusesMap.ENTERED\"\n              i18n-label=\"@@payments.filter.dropdown.option.entered\"\n            >\n            </bb-dropdown-multi-select-option-ui>\n            <bb-dropdown-multi-select-option-ui\n              *ngIf=\"\n                !hostRef.statusBlackList.includes(\n                  hostRef.statusesMap.PROCESSING\n                )\n              \"\n              label=\"Processing\"\n              [value]=\"hostRef.statusesMap.PROCESSING\"\n              i18n-label=\"@@payments.filter.dropdown.option.processing\"\n            >\n            </bb-dropdown-multi-select-option-ui>\n            <bb-dropdown-multi-select-option-ui\n              *ngIf=\"\n                !hostRef.statusBlackList.includes(hostRef.statusesMap.PROCESSED)\n              \"\n              label=\"Processed\"\n              [value]=\"hostRef.statusesMap.PROCESSED\"\n              i18n-label=\"@@payments.filter.dropdown.option.processed\"\n            >\n            </bb-dropdown-multi-select-option-ui>\n            <bb-dropdown-multi-select-option-ui\n              *ngIf=\"\n                !hostRef.statusBlackList.includes(hostRef.statusesMap.ACCEPTED)\n              \"\n              label=\"Accepted\"\n              [value]=\"hostRef.statusesMap.ACCEPTED\"\n              i18n-label=\"@@payments.filter.dropdown.option.accepted\"\n            >\n            </bb-dropdown-multi-select-option-ui>\n            <bb-dropdown-multi-select-option-ui\n              *ngIf=\"\n                !hostRef.statusBlackList.includes(hostRef.statusesMap.REJECTED)\n              \"\n              label=\"Rejected\"\n              [value]=\"hostRef.statusesMap.REJECTED\"\n              i18n-label=\"@@payments.filter.dropdown.option.rejected\"\n            >\n            </bb-dropdown-multi-select-option-ui>\n            <bb-dropdown-multi-select-option-ui\n              *ngIf=\"\n                !hostRef.statusBlackList.includes(\n                  hostRef.statusesMap.CANCELLATION_PENDING\n                )\n              \"\n              label=\"Cancellation pending\"\n              [value]=\"hostRef.statusesMap.CANCELLATION_PENDING\"\n              i18n-label=\"\n                @@payments.filter.dropdown.option.cancellation-pending\"\n            >\n            </bb-dropdown-multi-select-option-ui>\n            <bb-dropdown-multi-select-option-ui\n              *ngIf=\"\n                !hostRef.statusBlackList.includes(hostRef.statusesMap.CANCELLED)\n              \"\n              label=\"Cancelled\"\n              [value]=\"hostRef.statusesMap.CANCELLED\"\n              i18n-label=\"@@payments.filter.dropdown.option.cancelled\"\n            >\n            </bb-dropdown-multi-select-option-ui>\n          </bb-dropdown-multi-select-ui>\n        </div>\n        <!-- Amount range -->\n        <fieldset class=\"bb-block bb-block--md col-12 col-md-6 col-xl-4\">\n          <label\n            i18n=\"amount from@@bb-payments-filter.form.label.amount\"\n            [for]=\"'payment-filter-amount' + min.id + '-' + max.id + '-group'\"\n          >\n            Amount\n          </label>\n          <div\n            class=\"row\"\n            [id]=\"'payment-filter-amount' + min.id + '-' + max.id + '-group'\"\n            formGroupName=\"amount\"\n          >\n            <bb-input-number-ui\n              #min\n              class=\"col-6\"\n              formControlName=\"from\"\n              min=\"0\"\n              aria-label=\"Amount From\"\n              placeholder=\"min\"\n              i18n-aria-label=\"\n                amount from aria@@bb-payments-filter.form.ariaLabel.amountFrom\"\n              i18n-placeholder=\"@@bb-payments-filter.form.placeholder.min\"\n              data-role=\"input-amount-from\"\n            >\n            </bb-input-number-ui>\n            <bb-input-number-ui\n              #max\n              [min]=\"min.value || 0\"\n              class=\"col-6\"\n              formControlName=\"to\"\n              placeholder=\"max\"\n              aria-label=\"Amount To\"\n              i18n-aria-label=\"\n                amount to aria@@bb-payments-filter.form.ariaLabel.amountTo\"\n              i18n-placeholder=\"@@bb-payments-filter.form.placeholder.max\"\n              data-role=\"input-amount-to\"\n            >\n              <!-- Do not remove label, placeholder needed for layout not to break -->\n            </bb-input-number-ui>\n            <bb-input-validation-message-ui\n              class=\"col-12\"\n              id=\"amountError\"\n              [showErrors]=\"\n                hostRef.amountToControl?.touched &&\n                hostRef.amountToControl?.errors?.incorrectAmount\n              \"\n            >\n              <span i18n=\"@@payments.filter.invalid-amount-range-error\"\n                >Maximum amount cannot be smaller than the minimum amount</span\n              >\n            </bb-input-validation-message-ui>\n          </div>\n        </fieldset>\n        <!-- Date range -->\n        <div class=\"bb-block bb-block--md col-12 col-md-6 col-xl-4\">\n          <label\n            [for]=\"executionDate.id\"\n            i18n=\"@@bb-payments-filter.form.label.executionDate\"\n            [id]=\"'date-range-header-' + executionDate.id\"\n          >\n            Execution date\n          </label>\n          <bb-input-datepicker-ui\n            name=\"executionDate\"\n            formControlName=\"executionDate\"\n            data-role=\"input-date\"\n            aria-label=\"Execution date range\"\n            i18n-aria-label=\"\n              amount to aria@@bb-payments-filter.form.ariaLabel.executionDate\"\n            overrideDateFormat=\"MM/dd/y\"\n            [placeholder]=\"'MM/DD/YY - MM/DD/YY'\"\n            [rangeSelection]=\"true\"\n            [attr.aria-describedby]=\"\n              getExecutionDateDescribedBy(executionDate?.id)\n            \"\n            #executionDate\n          >\n          </bb-input-datepicker-ui>\n          <bb-input-validation-message-ui\n            *ngIf=\"\n              paymentsFilterForm.get('executionDate') as executionDateControl\n            \"\n            [attr.id]=\"getExecutionDateErrorId(executionDate?.id)\"\n            [showErrors]=\"\n              executionDateControl?.touched && executionDateControl?.invalid\n            \"\n          >\n            <span i18n=\"@@payments.filter.invalid-date-range-error\"\n              >Please provide a valid date range format.</span\n            >\n          </bb-input-validation-message-ui>\n        </div>\n      </div>\n    </div>\n    <div class=\"bb-button-bar bb-button-bar--reverse\">\n      <!-- Apply -->\n      <button\n        bbButton\n        type=\"submit\"\n        class=\"bb-button-bar__button\"\n        (click)=\"hostRef.onFilter(hostRef.paymentsFilterForm.value)\"\n        color=\"primary\"\n        data-role=\"btn-apply\"\n        [disabled]=\"hostRef.isApplyButtonDisabled()\"\n        i18n=\"@@bb-payments-filter.form.button.apply\"\n      >\n        Apply\n      </button>\n      <!-- Close -->\n      <button\n        bbButton\n        type=\"button\"\n        color=\"secondary\"\n        class=\"bb-button-bar__button\"\n        data-role=\"btn-cancel\"\n        i18n=\"@@bb-payments-filter.form.button.close\"\n        (click)=\"hostRef.onCloseFilter()\"\n      >\n        Close\n      </button>\n      <!-- Clear all -->\n      <button\n        bbButton\n        type=\"reset\"\n        color=\"link\"\n        class=\"bb-button-bar__button\"\n        i18n=\"@@bb-payments-filter.form.button.clearAll\"\n        (click)=\"hostRef.onClearFilter()\"\n        *ngIf=\"hostRef.paymentsFilterForm.dirty\"\n        data-role=\"btn-clear-all\"\n      >\n        Clear All\n      </button>\n    </div>\n  </form>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i2.DropdownMultiSelectComponent; }), selector: "bb-dropdown-multi-select-ui", inputs: ["dropdownHeaderText", "placeholder", "label", "filtering", "readonly"] }, { type: i0.forwardRef(function () { return i2.DropdownMultiSelectOptionComponent; }), selector: "bb-dropdown-multi-select-option-ui", inputs: ["id", "value", "label", "state"] }, { type: i0.forwardRef(function () { return i3.InputNumberComponent; }), selector: "bb-input-number-ui", inputs: ["placeholder", "max", "min", "step", "readonly", "autocomplete", "ariaLabel", "allowNonDigits", "allowNegativeSign"] }, { type: i0.forwardRef(function () { return i4.InputValidationMessageComponent; }), selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i0.forwardRef(function () { return i5.InputDatepickerComponent; }), selector: "bb-input-datepicker-ui", inputs: ["rangeSelection", "rangeSelectionSplit", "clickOpen", "focusOpen", "placement", "datepickerDescribedby", "ariaLabelForButton", "minDate", "maxDate", "markDisabled", "icon", "iconSize", "iconColor", "btnColor", "ariaLabel", "navigation", "autocomplete", "firstDayOfWeek", "displayMonths", "placeholder", "overrideDateFormat"], outputs: ["focusedDate"] }], directives: [{ type: i0.forwardRef(function () { return PaymentsFilterCustomizableDirective; }), selector: "[bbPaymentsFilterCustomizable]" }, { type: i0.forwardRef(function () { return i1.ɵNgNoValidate; }), selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i0.forwardRef(function () { return i1.NgControlStatusGroup; }), selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i0.forwardRef(function () { return i1.FormGroupDirective; }), selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i0.forwardRef(function () { return i1.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0.forwardRef(function () { return i1.FormControlName; }), selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i0.forwardRef(function () { return i6.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i1.FormGroupName; }), selector: "[formGroupName]", inputs: ["formGroupName"] }, { type: i0.forwardRef(function () { return i7.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentsFilterComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payments-filter',
                    templateUrl: 'payments-filter.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.FormBuilder }]; }, propDecorators: { filter: [{
                type: Output
            }], closeFilter: [{
                type: Output
            }], isFilterApplied: [{
                type: Output
            }], reset: [{
                type: Output
            }], statusBlackList: [{
                type: Input
            }] } });
export class PaymentsFilterCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ PaymentsFilterCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentsFilterCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ PaymentsFilterCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: PaymentsFilterCustomizableDirective, selector: "[bbPaymentsFilterCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentsFilterCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbPaymentsFilterCustomizable]',
                }]
        }] });
//# sourceMappingURL=payments-filter.component.js.map