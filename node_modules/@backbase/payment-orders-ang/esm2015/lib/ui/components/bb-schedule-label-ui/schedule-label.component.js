import { Component, Input } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export class ScheduleLabelComponent {
    constructor() {
        // @todo should be configurable and passed from parent
        this.minOccurrences = 2;
    }
    get startDate() {
        return this.item && Date.parse(this.item.startDate)
            ? new Date(this.item.startDate)
            : undefined;
    }
    get isSingleFrequency() {
        return (this.item &&
            this.item.frequency &&
            (this.item.frequency.value
                ? this.item.frequency.value.toLocaleLowerCase() === 'once'
                : false));
    }
    get endDate() {
        return this.item && this.item.endDate && Date.parse(this.item.endDate)
            ? new Date(this.item.endDate)
            : undefined;
    }
    isToday() {
        if (this.item === undefined) {
            throw new Error('`item` input is required in `bb-schedule-label-ui` component');
        }
        const today = new Date().setHours(0, 0, 0, 0);
        const startDate = new Date(this.item.startDate);
        return startDate.setHours(0, 0, 0, 0) === today;
    }
    hasEnd() {
        return (!!this.item &&
            (this.item.endDate !== undefined || this.item.repeat !== undefined));
    }
    hasLimit() {
        return this.hasEnd() && !this.isSingleFrequency;
    }
    hasEnoughOccurences() {
        return (!!this.item &&
            this.item.repeat !== undefined &&
            this.item.repeat >= this.minOccurrences);
    }
}
/** @nocollapse */ ScheduleLabelComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ScheduleLabelComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ ScheduleLabelComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ScheduleLabelComponent, selector: "bb-schedule-label-ui", inputs: { item: "item" }, ngImport: i0, template: `
    <span
      i18n="
        Schedule frequency title list|List of titles for available schedule
        frequencies@@bb-schedule-label-ui.frequency.list"
      >{ item?.frequency?.value, select, other {Once} DAILY {Daily} WEEKLY
      {Weekly} BIWEEKLY {Bi-Weekly} MONTHLY {Monthly} QUARTERLY {Quarterly}
      YEARLY {Annually} }</span
    >
    <span>&nbsp;&minus;</span>
    <ng-container *ngIf="isSingleFrequency">
      <span
        *ngIf="isToday()"
        i18n="
          Today|Capitalized word for
          today@@bb-schedule-label-ui.label.today.title"
      >
        Today</span
      >
      <span
        *ngIf="!isToday()"
        i18n="
          On|Word to be used before a date to indicate that the payment will be
          executed on that date@@bb-schedule-label-ui.label.on"
      >
        on</span
      >
    </ng-container>

    <ng-container *ngIf="!isSingleFrequency">
      <span
        i18n="
          Schedule start|Word to be used before a date to indicate that this
          date is a starting date of the
          schedule@@bb-schedule-label-ui.label.start"
      >
        from</span
      >
      <span *ngIf="isToday()">
        <ng-container
          i18n="
            today|Lowercase name for current
            day@@bb-schedule-label-ui.label.today"
        >
          today</ng-container
        >{{ hasLimit() && hasEnoughOccurences() ? ';' : '' }}</span
      >
    </ng-container>

    <span *ngIf="!isToday()">
      {{ startDate | date: 'mediumDate'
      }}{{ hasLimit() && hasEnoughOccurences() ? ';' : '' }}</span
    >

    <ng-container *ngIf="hasLimit() && item?.endDate">
      <span
        i18n="
          Schedule end|Word to be used before a date to indicate that this date
          is an end date of the schedule@@bb-schedule-label-ui.label.end"
      >
        till</span
      >
      <span> {{ endDate | date: 'mediumDate' }}</span>
    </ng-container>
    <ng-container
      *ngIf="
        hasLimit() &&
        (item?.repeat || 0) >= minOccurrences &&
        item?.endType === 'after'
      "
    >
      <span> {{ item?.repeat }}</span>
      <span
        i18n="
          Number of times|Word to be used after number of
          occurences@@bb-schedule-label-ui.label.repeat"
      >
        times</span
      >
    </ng-container>
  `, isInline: true, directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "date": i1.DatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ScheduleLabelComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-schedule-label-ui',
                    template: `
    <span
      i18n="
        Schedule frequency title list|List of titles for available schedule
        frequencies@@bb-schedule-label-ui.frequency.list"
      >{ item?.frequency?.value, select, other {Once} DAILY {Daily} WEEKLY
      {Weekly} BIWEEKLY {Bi-Weekly} MONTHLY {Monthly} QUARTERLY {Quarterly}
      YEARLY {Annually} }</span
    >
    <span>&nbsp;&minus;</span>
    <ng-container *ngIf="isSingleFrequency">
      <span
        *ngIf="isToday()"
        i18n="
          Today|Capitalized word for
          today@@bb-schedule-label-ui.label.today.title"
      >
        Today</span
      >
      <span
        *ngIf="!isToday()"
        i18n="
          On|Word to be used before a date to indicate that the payment will be
          executed on that date@@bb-schedule-label-ui.label.on"
      >
        on</span
      >
    </ng-container>

    <ng-container *ngIf="!isSingleFrequency">
      <span
        i18n="
          Schedule start|Word to be used before a date to indicate that this
          date is a starting date of the
          schedule@@bb-schedule-label-ui.label.start"
      >
        from</span
      >
      <span *ngIf="isToday()">
        <ng-container
          i18n="
            today|Lowercase name for current
            day@@bb-schedule-label-ui.label.today"
        >
          today</ng-container
        >{{ hasLimit() && hasEnoughOccurences() ? ';' : '' }}</span
      >
    </ng-container>

    <span *ngIf="!isToday()">
      {{ startDate | date: 'mediumDate'
      }}{{ hasLimit() && hasEnoughOccurences() ? ';' : '' }}</span
    >

    <ng-container *ngIf="hasLimit() && item?.endDate">
      <span
        i18n="
          Schedule end|Word to be used before a date to indicate that this date
          is an end date of the schedule@@bb-schedule-label-ui.label.end"
      >
        till</span
      >
      <span> {{ endDate | date: 'mediumDate' }}</span>
    </ng-container>
    <ng-container
      *ngIf="
        hasLimit() &&
        (item?.repeat || 0) >= minOccurrences &&
        item?.endType === 'after'
      "
    >
      <span> {{ item?.repeat }}</span>
      <span
        i18n="
          Number of times|Word to be used after number of
          occurences@@bb-schedule-label-ui.label.repeat"
      >
        times</span
      >
    </ng-container>
  `,
                }]
        }], propDecorators: { item: [{
                type: Input
            }] } });
//# sourceMappingURL=schedule-label.component.js.map