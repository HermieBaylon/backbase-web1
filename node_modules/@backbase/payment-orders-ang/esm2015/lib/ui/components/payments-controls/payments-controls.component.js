import { ChangeDetectionStrategy, Component, Directive, EventEmitter, Input, Output, } from '@angular/core';
import { BehaviorSubject, combineLatest, Subject } from 'rxjs';
import { distinctUntilChanged, takeUntil } from 'rxjs/operators';
import { Status } from '../../constants';
import { BbTemplate } from '@backbase/foundation-ang/core';
import * as i0 from "@angular/core";
import * as i1 from "../payments-search/payments-search.component";
import * as i2 from "@backbase/ui-ang/icon";
import * as i3 from "../payments-filter/payments-filter.component";
import * as i4 from "@angular/common";
import * as i5 from "@backbase/ui-ang/button";
export class PaymentsControlsComponent {
    constructor() {
        /**
         * Reference to instance of customizable component.
         */
        this.hostRef = this;
        /**
         * Reference to Status enum
         */
        this.statusesMap = Status;
        /**
         * EventEmitter for triggering a filter action.
         */
        this.applyFilter = new EventEmitter();
        /**
         * Subject will emit when searchbox from payment-search input changes
         */
        this.search$ = new BehaviorSubject('');
        /**
         * Subject that will emit when filters from payments-filter are modified
         */
        this.filters$ = new BehaviorSubject({
            executionDate: {},
            status: [],
            amount: {},
        });
        /**
         * Whether the filter form is shown.
         */
        this.isFilterOpen = false;
        /**
         * Whether a filter is applied on the transactions.
         */
        this.isFilterApplied = false;
        this.filterParams$ = new Subject();
        /**
         * destroy$ should emit only when component is destroyed to
         * signal subscriptions to unsubscribe.
         */
        this.destroy$ = new Subject();
        /**
         * Subscription will emit for the search to be triggered
         */
        combineLatest([this.search$, this.filters$])
            .pipe(takeUntil(this.destroy$), distinctUntilChanged())
            .subscribe(([query, filterObject]) => {
            const retVal = Object.assign({ query }, filterObject);
            this.applyFilter.emit(retVal);
        });
    }
    /**
     * Search event callback
     */
    onSearch(searchParam) {
        this.search$.next(searchParam);
    }
    /**
     * Filter event callback
     */
    onFilter(filterParams) {
        this.filters$.next(filterParams);
        this.isFilterApplied = true;
    }
    /**
     * Close event callback to hide the filters controls
     */
    onClose() {
        this.isFilterOpen = false;
    }
    /**
     * Toogle method to hide or show the filter form
     */
    toggleFilter() {
        this.isFilterOpen = !this.isFilterOpen;
    }
    /**
     * Handle effects when filter is reset
     */
    onFilterReset(event) {
        this.isFilterApplied = event;
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
        this.filterParams$.complete();
        this.search$.complete();
        this.filters$.complete();
    }
}
/** @nocollapse */ PaymentsControlsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentsControlsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PaymentsControlsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PaymentsControlsComponent, selector: "bb-payments-controls", inputs: { debounceTime: "debounceTime" }, outputs: { applyFilter: "applyFilter" }, ngImport: i0, template: "<ng-container\n  bbPaymentsControlsCustomizable\n  [bbHostRef]=\"hostRef\"\n></ng-container>\n\n<ng-template bbPaymentsControlsCustomizable let-hostRef>\n  <div (keydown)=\"$event?.stopPropagation()\">\n    <div class=\"bb-block\" [ngClass]=\"{ 'bb-block--md': hostRef.isFilterOpen }\">\n      <div class=\"bb-stack\">\n        <!-- Search -->\n        <div class=\"bb-stack__item bb-stack__item--fill--lg-down\">\n          <bb-payments-search\n            [debounceTime]=\"hostRef.debounceTime\"\n            (search)=\"hostRef.onSearch($event)\"\n            data-role=\"searchbox\"\n          >\n          </bb-payments-search>\n        </div>\n        <div class=\"bb-stack__item d-none d-xl-block\">\n          <!-- Filter button -->\n          <button\n            bbButton\n            [color]=\"hostRef.isFilterApplied ? 'primary' : 'secondary'\"\n            aria-label=\"Toggle filter\"\n            [attr.aria-expanded]=\"hostRef.isFilterOpen\"\n            i18n-aria-label=\"\n              Filter payments@@payments.ariaLabel.filter.big.button\"\n            (click)=\"hostRef.toggleFilter()\"\n            [attr.data-role]=\"'btn-filter'\"\n          >\n            <bb-icon-ui name=\"filter\"></bb-icon-ui>\n            <ng-container\n              *ngIf=\"!hostRef.isFilterApplied\"\n              i18n=\"Filter toggle button@@transactions.filter.button\"\n            >\n              Filter\n            </ng-container>\n            <ng-container\n              *ngIf=\"hostRef.isFilterApplied\"\n              i18n=\"Filter toggle button@@transactions.filtersApplied.button\"\n            >\n              Filters applied\n            </ng-container>\n          </button>\n        </div>\n        <div class=\"bb-stack__item bb-stack__item--push-right d-xl-none\">\n          <button\n            bbButton\n            [color]=\"hostRef.isFilterApplied ? 'primary' : 'secondary'\"\n            circle=\"true\"\n            aria-label=\"Toggle filter\"\n            i18n-aria-label=\"\n              Filter payments@@payments.ariaLabel.filter.small.button\"\n            (click)=\"hostRef.toggleFilter()\"\n            [attr.data-role]=\"'btn-filter'\"\n          >\n            <bb-icon-ui name=\"filter\"></bb-icon-ui>\n          </button>\n        </div>\n      </div>\n    </div>\n    <bb-payments-filter\n      [statusBlackList]=\"[hostRef.statusesMap.CANCELLATION_PENDING]\"\n      (filter)=\"hostRef.onFilter($event)\"\n      (isFilterApplied)=\"hostRef.onFilterReset($event)\"\n      (closeFilter)=\"hostRef.onClose()\"\n      (reset)=\"hostRef.onFilter($event)\"\n      [hidden]=\"!hostRef.isFilterOpen\"\n    >\n    </bb-payments-filter>\n  </div>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i1.PaymentsSearchComponent; }), selector: "bb-payments-search", inputs: ["debounceTime", "searchMinLength"], outputs: ["search"] }, { type: i0.forwardRef(function () { return i2.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0.forwardRef(function () { return i3.PaymentsFilterComponent; }), selector: "bb-payments-filter", inputs: ["statusBlackList"], outputs: ["filter", "closeFilter", "isFilterApplied", "reset"] }], directives: [{ type: i0.forwardRef(function () { return PaymentsControlsCustomizableDirective; }), selector: "[bbPaymentsControlsCustomizable]" }, { type: i0.forwardRef(function () { return i4.NgClass; }), selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i0.forwardRef(function () { return i5.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0.forwardRef(function () { return i4.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentsControlsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payments-controls',
                    templateUrl: 'payments-controls.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { debounceTime: [{
                type: Input
            }], applyFilter: [{
                type: Output
            }] } });
export class PaymentsControlsCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ PaymentsControlsCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentsControlsCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ PaymentsControlsCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: PaymentsControlsCustomizableDirective, selector: "[bbPaymentsControlsCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentsControlsCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbPaymentsControlsCustomizable]',
                }]
        }] });
//# sourceMappingURL=payments-controls.component.js.map