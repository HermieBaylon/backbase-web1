import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, } from '@angular/core';
import { BeneficiaryList, defaultBeneficiaryTabsConfig, ListState, } from '../../../../constants';
import * as i0 from "@angular/core";
import * as i1 from "../../../sr-search-result-info/sr-search-result-info.component";
import * as i2 from "@angular/cdk/scrolling";
import * as i3 from "../beneficiary-contact/beneficiary-contact";
import * as i4 from "@backbase/ui-ang/loading-indicator";
import * as i5 from "@backbase/ui-ang/empty-state";
import * as i6 from "../beneficiary-account/beneficiary-account";
import * as i7 from "@backbase/ui-ang/icon";
import * as i8 from "../../../../directives/bb-keyboard-navigation.directive";
import * as i9 from "@angular/common";
import * as i10 from "@backbase/ui-ang/button";
import * as i11 from "@backbase/ui-ang/keyboard-click-directive";
import * as i12 from "../../directives/beneficiary-scroll.directive";
export class BeneficiaryTabsComponent {
    constructor() {
        this.tabsId = `beneficiaryTabs${BeneficiaryTabsComponent._id++}`;
        this.contactsListId = `beneficiaryContactsList${BeneficiaryTabsComponent._id++}`;
        this.accountsListId = `beneficiaryAccountsList${BeneficiaryTabsComponent._id++}`;
        /**
         * Total count of accounts
         */
        this.totalAccounts = 0;
        /**
         * Total count of contacts
         */
        this.totalContacts = 0;
        /**
         * Selected account event emitter
         */
        this.selectedAccount = new EventEmitter();
        /**
         * Selected contact event emitter
         */
        this.selectedContact = new EventEmitter();
        /**
         * Trigger fetching more beneficiary items
         */
        this.fetchMoreItems = new EventEmitter();
        /**
         * Manual edit event emitter
         */
        this.manualEdit = new EventEmitter();
        /**
         * Search state, has truthy value if has search query
         */
        this.searching = new EventEmitter();
        /**
         * Dropdown status
         */
        this.isDropdownOpen = false;
        /** Flag which determines if we can enter data manually
         * Default value is `true`
         */
        this.canEditManually = true;
        this.listingState = ListState;
        this.beneficiaryList = BeneficiaryList;
    }
    onLoadMore() {
        this.fetchMoreItems.emit(this.activeTab);
    }
    ngOnInit() {
        this.tabsConfig = this.tabsConfig || defaultBeneficiaryTabsConfig;
        this.activeTab = this.tabsConfig[0];
    }
    showTabs() {
        return (this.isDropdownOpen &&
            Object.values(this.listState || {}).some((state) => state !== ListState.NO_RESULT) &&
            !this.isNoTabsConfigured());
    }
    isNoTabsConfigured() {
        return this.tabsConfig.length === 0;
    }
    selectAccount(account) {
        this.selectedAccount.emit(account);
    }
    selectContact(contact) {
        this.selectedContact.emit(contact);
    }
    setActiveTab(event, tabName) {
        this.activeTab = tabName;
    }
    emitManualDetails() {
        this.manualEdit.emit(true);
    }
    onRangeChange() {
        if (this.activeTab &&
            this.listState[this.activeTab] === this.listingState.LIST) {
            this.onLoadMore();
        }
    }
    refreshList() {
        this.onLoadMore();
    }
    trackById(_index, item) {
        return item.id;
    }
}
BeneficiaryTabsComponent._id = 0;
/** @nocollapse */ BeneficiaryTabsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BeneficiaryTabsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ BeneficiaryTabsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: BeneficiaryTabsComponent, selector: "bb-beneficiary-tabs", inputs: { accounts: "accounts", contacts: "contacts", totalAccounts: "totalAccounts", totalContacts: "totalContacts", listState: "listState", tabsConfig: "tabsConfig", isDropdownOpen: "isDropdownOpen", canEditManually: "canEditManually" }, outputs: { selectedAccount: "selectedAccount", selectedContact: "selectedContact", fetchMoreItems: "fetchMoreItems", manualEdit: "manualEdit", searching: "searching" }, ngImport: i0, template: "<div bbKeyboardNavigation role=\"tablist\" [id]=\"tabsId\">\n  <div\n    *ngIf=\"showTabs()\"\n    role=\"tablist\"\n    aria-label=\"Beneficiary selector tabs\"\n    class=\"nav nav-tabs\"\n  >\n    <ng-container *ngFor=\"let tab of tabsConfig\">\n      <ng-container *ngIf=\"tab === beneficiaryList.CONTACTS\">\n        <button\n          bbButton\n          color=\"unstyled\"\n          role=\"tab\"\n          class=\"nav-item nav-link\"\n          aria-controls=\"contacts-tab\"\n          data-role=\"contacts-tab-item\"\n          aria-haspopup=\"listbox\"\n          [attr.aria-owns]=\"contactsListId\"\n          [attr.aria-selected]=\"activeTab === beneficiaryList.CONTACTS\"\n          [ngClass]=\"{'active': activeTab === beneficiaryList.CONTACTS}\"\n          (bbKeyboardClick)=\"setActiveTab($event, beneficiaryList.CONTACTS)\"\n          bbKeyboardNavigationAnchor\n        >\n          <ng-container\n            i18n=\"Label|Contacts tab label@@beneficiary.selector.ui.tabs.contacts.label\"\n          >\n            Contacts\n          </ng-container>\n          <span class=\"text-dark\" *ngIf=\"totalContacts\"\n            >({{totalContacts}})</span\n          >\n        </button>\n      </ng-container>\n\n      <ng-container *ngIf=\"tab === beneficiaryList.ACCOUNTS\">\n        <button\n          bbButton\n          tabindex=\"-1\"\n          color=\"unstyled\"\n          role=\"tab\"\n          class=\"nav-item nav-link\"\n          aria-controls=\"accounts-tab\"\n          data-role=\"accounts-tab-item\"\n          [attr.aria-owns]=\"accountsListId\"\n          [attr.aria-selected]=\"activeTab === beneficiaryList.ACCOUNTS\"\n          [ngClass]=\"{'active': activeTab === beneficiaryList.ACCOUNTS}\"\n          (bbKeyboardClick)=\"setActiveTab($event, beneficiaryList.ACCOUNTS)\"\n          bbKeyboardNavigationAnchor\n        >\n          <ng-container\n            i18n=\"Label|Own accounts tab label@@beneficiary.selector.ui.tabs.own-accounts.label\"\n          >\n            Own Accounts\n          </ng-container>\n          <span class=\"text-dark\" *ngIf=\"totalAccounts\">\n            ({{totalAccounts}})</span\n          >\n        </button>\n      </ng-container>\n    </ng-container>\n  </div>\n\n  <ng-container *ngIf=\"isNoTabsConfigured()\">\n    <ng-container\n      *ngTemplateOutlet=\"enterAccountDetailsButton; context:{icon: 'add'}\"\n    ></ng-container>\n  </ng-container>\n\n  <ng-container *ngIf=\"isDropdownOpen\">\n    <ng-container [ngSwitch]=\"activeTab\">\n      <div id=\"contacts-tab\" *ngSwitchCase=\"beneficiaryList.CONTACTS\">\n        <bb-payments-sr-search-result-info [totalNumber]=\"contacts?.length\">\n          <span\n            i18n=\"contacts search result label|label for screen reader@@beneficiary.selector.ui.tabs.contacts.screenReaderResultsLabel\"\n          >\n            Contacts tab:\n          </span>\n        </bb-payments-sr-search-result-info>\n\n        <ng-container [ngSwitch]=\"listState?.contacts\">\n          <ng-container *ngSwitchDefault>\n            <cdk-virtual-scroll-viewport\n              tabindex=\"-1\"\n              role=\"tabpanel\"\n              bbKeyboardNavigationList\n              [id]=\"contactsListId\"\n              (bbBeneficiaryScroll)=\"onRangeChange()\"\n              [bbBeneficiaryScrollTotalCount]=\"totalContacts\"\n              class=\"bb-beneficiary-selector-ui__scroll-container\"\n            >\n              <div\n                bbKeyboardNavigationItem\n                role=\"option\"\n                aria-selected=\"false\"\n                (click)=\"emitManualDetails()\"\n              >\n                <ng-container\n                  *ngTemplateOutlet=\"enterAccountDetailsButton; context:{icon: 'edit'}\"\n                >\n                </ng-container>\n              </div>\n\n              <ng-container\n                *cdkVirtualFor=\"let contact of contacts; trackBy: trackById\"\n              >\n                <bb-beneficiary-contact\n                  bbBeneficiaryScrollItem\n                  bbKeyboardNavigationItem\n                  role=\"option\"\n                  class=\"bb-beneficiary-selector-ui__list-item dropdown-item\"\n                  (click)=\"selectContact(contact)\"\n                  [contact]=\"contact\"\n                ></bb-beneficiary-contact>\n              </ng-container>\n\n              <ng-container\n                *ngIf=\"listState?.contacts === listingState.FULL_LIST\"\n              >\n                <ng-container *ngTemplateOutlet=\"completeList\"></ng-container>\n              </ng-container>\n\n              <ng-container\n                *ngIf=\"listState?.contacts === listingState.FETCHING_FAILURE\"\n              >\n                <ng-container *ngTemplateOutlet=\"failToLoadMore\"></ng-container>\n              </ng-container>\n\n              <ng-container\n                *ngIf=\"listState?.contacts === listingState.FETCHING\"\n              >\n                <bb-loading-indicator-ui\n                  loaderSize=\"sm\"\n                ></bb-loading-indicator-ui>\n              </ng-container>\n            </cdk-virtual-scroll-viewport>\n          </ng-container>\n\n          <ng-container *ngSwitchCase=\"listingState.ERROR\">\n            <bb-empty-state-ui\n              title=\"Contacts unavailable\"\n              i18n-title=\"@@beneficiary.selector.ui.tabs.contacts.error-state.unavailable.title\"\n              class=\"bb-state-container\"\n              subtitle=\"Unable to load list of contacts. Try to reload the page or contact the support.\"\n              i18n-subtitle=\"@@beneficiary.selector.ui.tabs.contacts.error-state.unavailable.message\"\n              iconSize=\"xxl\"\n              iconModifier=\"info\"\n            ></bb-empty-state-ui>\n          </ng-container>\n\n          <ng-container *ngSwitchCase=\"listingState.EMPTY\">\n            <ng-container\n              *ngTemplateOutlet=\"emptyListContactsTemplate\"\n            ></ng-container>\n          </ng-container>\n\n          <ng-container *ngSwitchCase=\"listingState.NO_RESULT\">\n            <ng-container\n              *ngTemplateOutlet=\"emptyMatchingResults\"\n            ></ng-container>\n          </ng-container>\n\n          <ng-container *ngSwitchCase=\"listingState.LOADING\">\n            <ng-container *ngTemplateOutlet=\"loadingTemplate\"></ng-container>\n          </ng-container>\n        </ng-container>\n      </div>\n\n      <div id=\"accounts-tab\" *ngSwitchCase=\"beneficiaryList.ACCOUNTS\">\n        <bb-payments-sr-search-result-info [totalNumber]=\"accounts?.length\">\n          <span\n            i18n=\"accounts search result label|label for screen reader@@beneficiary.selector.ui.tabs.account.screenReaderResultsLabel\"\n            >Accounts tab:</span\n          >\n        </bb-payments-sr-search-result-info>\n\n        <ng-container [ngSwitch]=\"listState?.accounts\">\n          <ng-container *ngSwitchDefault>\n            <cdk-virtual-scroll-viewport\n              bbKeyboardNavigationList\n              tabindex=\"-1\"\n              role=\"tabpanel\"\n              [id]=\"accountsListId\"\n              (bbBeneficiaryScroll)=\"onRangeChange()\"\n              [bbBeneficiaryScrollTotalCount]=\"totalAccounts\"\n              class=\"bb-beneficiary-selector-ui__scroll-container\"\n            >\n              <div\n                bbKeyboardNavigationItem\n                role=\"option\"\n                (click)=\"emitManualDetails()\"\n              >\n                <ng-container\n                  *ngTemplateOutlet=\"enterAccountDetailsButton; context:{icon: 'edit'}\"\n                >\n                </ng-container>\n              </div>\n\n              <ng-container\n                *cdkVirtualFor=\"let account of accounts; trackBy: trackById\"\n              >\n                <bb-beneficiary-account\n                  bbBeneficiaryScrollItem\n                  bbKeyboardNavigationItem\n                  role=\"option\"\n                  class=\"bb-beneficiary-selector-ui__list-item dropdown-item\"\n                  [account]=\"account\"\n                  (click)=\"selectAccount(account)\"\n                ></bb-beneficiary-account>\n              </ng-container>\n\n              <ng-container\n                *ngIf=\"listState?.accounts === listingState.FULL_LIST\"\n              >\n                <ng-container *ngTemplateOutlet=\"completeList\"></ng-container>\n              </ng-container>\n\n              <ng-container\n                *ngIf=\"listState?.accounts === listingState.FETCHING_FAILURE\"\n              >\n                <ng-container *ngTemplateOutlet=\"failToLoadMore\"></ng-container>\n              </ng-container>\n\n              <ng-container\n                *ngIf=\"listState?.accounts === listingState.FETCHING\"\n              >\n                <bb-loading-indicator-ui\n                  loaderSize=\"sm\"\n                ></bb-loading-indicator-ui>\n              </ng-container>\n            </cdk-virtual-scroll-viewport>\n          </ng-container>\n\n          <ng-container *ngSwitchCase=\"listingState.ERROR\">\n            <bb-empty-state-ui\n              title=\"Accounts unavailable\"\n              i18n-title=\"@@beneficiary.selector.ui.tabs.accounts.error-state.unavailable.title\"\n              class=\"bb-state-container\"\n              subtitle=\"Unable to load list of accounts. Try to reload the page or contact the support.\"\n              i18n-subtitle=\"@@beneficiary.selector.ui.tabs.accounts.error-state.unavailable.message\"\n              iconSize=\"xxl\"\n              iconModifier=\"info\"\n            ></bb-empty-state-ui>\n          </ng-container>\n\n          <ng-container *ngSwitchCase=\"listingState.EMPTY\">\n            <ng-container\n              *ngTemplateOutlet=\"emptyListAccountsTemplate\"\n            ></ng-container>\n          </ng-container>\n\n          <ng-container *ngSwitchCase=\"listingState.NO_RESULT\">\n            <ng-container\n              *ngTemplateOutlet=\"emptyMatchingResults\"\n            ></ng-container>\n          </ng-container>\n\n          <ng-container *ngSwitchCase=\"listingState.LOADING\">\n            <ng-container *ngTemplateOutlet=\"loadingTemplate\"></ng-container>\n          </ng-container>\n        </ng-container>\n      </div>\n    </ng-container>\n  </ng-container>\n</div>\n\n<!-- Empty lists -->\n<ng-template #emptyListAccountsTemplate>\n  <bb-empty-state-ui\n    data-role=\"accounts-empty-state\"\n    iconSize=\"xxl\"\n    class=\"bb-state-container\"\n    iconModifier=\"account\"\n    title=\"No accounts\"\n    subtitle=\"There are no accounts to display.\"\n    i18n-title=\"Label|Nothing found in accounts title@@beneficiary.selector.ui.tabs.accounts.nothing-found.label\"\n    i18n-subtitle=\"Label|Nothing found in accounts subtitle@@beneficiary.selector.ui.tabs.accounts.nothing-found.subtitle\"\n  ></bb-empty-state-ui>\n</ng-template>\n\n<ng-template #emptyListContactsTemplate>\n  <bb-empty-state-ui\n    data-role=\"contacts-empty-state\"\n    iconSize=\"xxl\"\n    class=\"bb-state-container\"\n    iconModifier=\"contacts\"\n    title=\"No contacts\"\n    subtitle=\"Go to Contact Manager to create contact that you often transfer money to.\"\n    i18n-title=\"Label|Nothing found in contacts title@@beneficiary.selector.ui.tabs.contacts.nothing-found.label\"\n    i18n-subtitle=\"Label|Nothing found in contacts subtitle@@beneficiary.selector.ui.tabs.contacts.nothing-found.subtitle\"\n  ></bb-empty-state-ui>\n</ng-template>\n\n<ng-template #loadingTemplate>\n  <div class=\"bb-state-container\">\n    <bb-loading-indicator-ui loaderSize=\"md\"></bb-loading-indicator-ui>\n  </div>\n</ng-template>\n\n<ng-template #enterAccountDetailsButton let-icon=\"icon\">\n  <div\n    *ngIf=\"canEditManually\"\n    data-role=\"enter-data-manually\"\n    class=\"bb-beneficiary-selector-ui__enter-details dropdown-item\"\n  >\n    <div class=\"bb-create-beneficiary-account-menuitem\">\n      <div class=\"bb-stack\">\n        <ng-container\n          *ngTemplateOutlet=\"enterAccountDetails; context: {type: icon}\"\n        ></ng-container>\n      </div>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #enterAccountDetails let-type=\"type\">\n  <bb-icon-ui name=\"{{ type }}\" size=\"l\" class=\"bb-stack__item\"></bb-icon-ui>\n  <span\n    class=\"bb-stack__item\"\n    i18n=\"@@beneficiary.selector.ui.list.enter-details-manually.button\"\n  >\n    Enter details manually\n  </span>\n</ng-template>\n\n<ng-template #emptyMatchingResults>\n  <div class=\"bb-state-container\">\n    <bb-empty-state-ui\n      [showIcon]=\"false\"\n      class=\"d-block bb-block bb-block--md\"\n      title=\"No suggestions found\"\n      aria-label=\"No suggestions found\"\n      i18n-aria-label=\"Label|No suggestions found@@beneficiary.selector.ui.list.nothing-found.label\"\n    ></bb-empty-state-ui>\n\n    <div *ngIf=\"canEditManually\" class=\"bb-state-container__footer\">\n      <button\n        bbButton\n        type=\"button\"\n        buttonSize=\"md\"\n        color=\"link-text\"\n        class=\"bb-beneficiary-selector-ui__enter-details\"\n        data-role=\"enter-data-manually\"\n        (bbKeyboardClick)=\"emitManualDetails()\"\n      >\n        <ng-container\n          *ngTemplateOutlet=\"enterAccountDetails; context: {type: 'add'}\"\n        ></ng-container>\n      </button>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #completeList>\n  <div\n    data-role=\"all-items-loaded\"\n    class=\"bb-create-beneficiary-account-menuitem bb-stack bb-stack--center bb-text-support\"\n    i18n=\"@@beneficiary-selector-ui.loaded-all-items\"\n  >\n    All items are loaded.\n  </div>\n</ng-template>\n\n<ng-template #failToLoadMore>\n  <button\n    type=\"button\"\n    role=\"menuitem\"\n    data-role=\"fail-to-load-more-try-again\"\n    (click)=\"refreshList()\"\n    class=\"dropdow-item bb-stack bb-stack--center bb-text-danger dropdown-item\"\n  >\n    <bb-icon-ui\n      color=\"danger\"\n      name=\"error-outline\"\n      class=\"bb-stack__item bb-stack__item--spacing-sm\"\n    ></bb-icon-ui>\n\n    <span class=\"bb-stack__item\" i18n=\"@@beneficiary-selector-ui.fail-to-fetch\">\n      Loading failed. Click here to try again.\n    </span>\n  </button>\n</ng-template>\n", components: [{ type: i1.PaymentsSrSearchResultInfoComponent, selector: "bb-payments-sr-search-result-info", inputs: ["totalNumber"] }, { type: i2.CdkVirtualScrollViewport, selector: "cdk-virtual-scroll-viewport", inputs: ["orientation", "appendOnly"], outputs: ["scrolledIndexChange"] }, { type: i3.BeneficiaryContactComponent, selector: "bb-beneficiary-contact", inputs: ["contact"] }, { type: i4.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i5.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }, { type: i6.BeneficiaryAccountComponent, selector: "bb-beneficiary-account", inputs: ["account"] }, { type: i7.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i8.KeyboardNavigationDirective, selector: "[bbKeyboardNavigation]" }, { type: i9.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i9.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i10.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i8.KeyboardNavigationAnchorDirective, selector: "[bbKeyboardNavigationAnchor]" }, { type: i9.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i11.KeyboardClickDirective, selector: "[bbKeyboardClick]", outputs: ["bbKeyboardClick"] }, { type: i9.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i9.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i9.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i9.NgSwitchDefault, selector: "[ngSwitchDefault]" }, { type: i8.KeyboardNavigationListDirective, selector: "[bbKeyboardNavigationList]" }, { type: i12.BeneficiaryScrollDirective, selector: "[bbBeneficiaryScroll]", inputs: ["bbBeneficiaryScrollTotalCount"], outputs: ["bbBeneficiaryScroll"] }, { type: i8.KeyboardNavigationItemDirective, selector: "[bbKeyboardNavigationItem]" }, { type: i2.CdkVirtualForOf, selector: "[cdkVirtualFor][cdkVirtualForOf]", inputs: ["cdkVirtualForOf", "cdkVirtualForTrackBy", "cdkVirtualForTemplate", "cdkVirtualForTemplateCacheSize"] }, { type: i12.BeneficiaryScrollItemDirective, selector: "[bbBeneficiaryScrollItem]" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BeneficiaryTabsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-beneficiary-tabs',
                    templateUrl: 'beneficiary-tabs.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { accounts: [{
                type: Input
            }], contacts: [{
                type: Input
            }], totalAccounts: [{
                type: Input
            }], totalContacts: [{
                type: Input
            }], selectedAccount: [{
                type: Output
            }], selectedContact: [{
                type: Output
            }], fetchMoreItems: [{
                type: Output
            }], manualEdit: [{
                type: Output
            }], searching: [{
                type: Output
            }], listState: [{
                type: Input
            }], tabsConfig: [{
                type: Input
            }], isDropdownOpen: [{
                type: Input
            }], canEditManually: [{
                type: Input
            }] } });
//# sourceMappingURL=beneficiary-tabs.js.map