import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewChild, } from '@angular/core';
import { FormControl } from '@angular/forms';
import { NgbDropdown } from '@ng-bootstrap/ng-bootstrap';
import { Subject } from 'rxjs';
import { debounceTime, distinctUntilChanged, takeUntil, tap, } from 'rxjs/operators';
import { BeneficiaryList, ListState, } from '../../constants';
import { DefaultDebounceTime } from '../../constants/constants';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/search-box";
import * as i2 from "@backbase/ui-ang/icon";
import * as i3 from "./components/beneficiary-tabs/beneficiary-tabs";
import * as i4 from "@ng-bootstrap/ng-bootstrap";
import * as i5 from "@angular/common";
import * as i6 from "@angular/forms";
import * as i7 from "@backbase/ui-ang/button";
export class BeneficiarySelectorUiComponent {
    constructor() {
        this.state = {
            contacts: ListState.EMPTY,
            accounts: ListState.EMPTY,
        };
        /**
         * Total count of accounts
         */
        this.totalAccounts = 0;
        /**
         * Total count of contacts
         */
        this.totalContacts = 0;
        /**
         * Total count of contacts items before sub-accounts extract
         */
        this.totalContactsItemsCount = 0;
        /**
         * Pipe to initiate dropdown closure from outside
         */
        this.closeDropdownRequest$ = new Subject();
        /**
         * Dropdown icon that would be shown alongside with textbox
         */
        this.dropdownIcon = 'toggle-down';
        /**
         * Selected account event emitter
         */
        this.selectedAccount = new EventEmitter();
        /**
         * Selected contact event emitter
         */
        this.selectedContact = new EventEmitter();
        /**
         * Search string
         */
        this.searchValue = new EventEmitter();
        /**
         * Fetch more items event handler
         */
        this.fetchMoreItems = new EventEmitter();
        /**
         * Enter account detail event
         */
        this.manualEdit = new EventEmitter();
        /**
         * Event emitted search is blurred
         */
        this.searchBlur = new EventEmitter();
        /**
         * Clear search value
         */
        this.clear = new EventEmitter();
        /**
         * Time delay between each search requests in milliseconds. Defaults to 300
         */
        this.debounceTime = DefaultDebounceTime;
        /**
         * Form control for search value.
         */
        this.search = new FormControl();
        /**
         * Flag to denote if the account has only closed payment permission.
         * Default value is `false`
         */
        this.isClosedPayment = false;
        /**
         * Flag to denote if the beneficiary field is disabled.
         * Default value is `false`
         */
        this.isBeneficiaryDisabled = false;
        /**
         * Flag to denote if the manual edit feature is disabled.
         * Default value is `false`
         */
        this.isManualEditDisabled = false;
        this.searchIsFocused = false;
        this.debounceSearch$ = new Subject();
        this.gc$ = new Subject();
        this.pageState = {
            [BeneficiaryList.CONTACTS]: {
                page: 0,
                shouldLoadMore: () => this.totalContacts > this.totalContactsItemsCount,
            },
            [BeneficiaryList.ACCOUNTS]: {
                page: 0,
                shouldLoadMore: () => this.totalAccounts > this._accounts.length,
            },
        };
        this.debounceSearch$
            .pipe(debounceTime(this.debounceTime), distinctUntilChanged(), takeUntil(this.gc$), tap(() => {
            this.listStateReducer({
                [BeneficiaryList.ACCOUNTS]: ListState.LOADING,
                [BeneficiaryList.CONTACTS]: ListState.LOADING,
            });
        }))
            .subscribe((term) => {
            this.searchValue.emit(term);
        });
    }
    /**
     * List of contacts
     */
    set contacts(value) {
        if (this.state.contacts === ListState.FETCHING && value) {
            this._contacts = [...this._contacts, ...value];
        }
        else {
            this._contacts = value;
        }
        this.updateListStateOnDataChange(BeneficiaryList.CONTACTS, this._contacts);
    }
    get contacts() {
        return this._contacts;
    }
    /**
     * List of own accounts
     */
    set accounts(value) {
        if (this.state.accounts === ListState.FETCHING && value) {
            this._accounts = [...this._accounts, ...value];
        }
        else {
            this._accounts = value;
        }
        this.updateListStateOnDataChange(BeneficiaryList.ACCOUNTS, this._accounts);
    }
    get accounts() {
        return this._accounts;
    }
    /**
     * Flag to denote if the beneficiary selector has errors.
     */
    set hasError(error) {
        if (error) {
            if (!this.search.touched) {
                this.search.markAsTouched();
            }
        }
    }
    /**
     * Selected item, contact or account
     */
    set selectedItem(selectedItem) {
        if (selectedItem === null || selectedItem === void 0 ? void 0 : selectedItem.name) {
            this.search.patchValue(selectedItem.name);
            this._selectedItem = selectedItem;
        }
    }
    get selectedItem() {
        return this._selectedItem;
    }
    ngOnInit() {
        this.closeDropdownRequest$
            .pipe(takeUntil(this.gc$))
            .subscribe((closeFlag) => {
            if (closeFlag && this.dropdownItem) {
                this.dropdownItem.close();
            }
        });
    }
    ngOnDestroy() {
        this.gc$.next();
        this.gc$.complete();
    }
    listStateReducer(update) {
        this.state = Object.assign(Object.assign({}, this.state), update);
    }
    selectAccount(account) {
        this.selectedAccount.emit(account);
        this.search.patchValue(account.name);
    }
    selectContact(contact) {
        this.selectedContact.emit(contact);
        this.search.patchValue(contact.name);
    }
    handleSearch(searchString = '') {
        if (this.searchIsFocused) {
            this.debounceSearch$.next(searchString === null || searchString === void 0 ? void 0 : searchString.trim());
            // reset page count in pageState when search is triggered
            this.pageState[BeneficiaryList.ACCOUNTS].page = 0;
            this.pageState[BeneficiaryList.CONTACTS].page = 0;
        }
    }
    onBlur() {
        this.searchIsFocused = false;
        this.searchBlur.emit(this.search.value ? this.search.value.trim() : '');
    }
    focusHandler() {
        this.searchIsFocused = true;
        if (this.dropdownItem) {
            this.dropdownItem.open();
        }
    }
    onClear() {
        this.handleSearch('');
        this.search.reset();
        this.clear.emit('');
    }
    handleDropdownClose(opened, dropdown) {
        if (!opened && this.searchIsFocused) {
            dropdown.open();
        }
    }
    onManualEdit() {
        if (!this.isManualEditDisabled) {
            this.manualEdit.emit(this.search.value ? this.search.value.trim() : '');
        }
    }
    fetchMoreItemsAction(listType) {
        const { shouldLoadMore } = this.pageState[listType];
        let { page: _page } = this.pageState[listType];
        if (shouldLoadMore() && this.state[listType] === ListState.LIST) {
            this.listStateReducer({ [listType]: ListState.FETCHING });
            this.fetchMoreItems.emit({ page: ++_page, type: listType });
            // update page state after being incremented
            this.pageState[listType].page = _page;
        }
    }
    updateListStateOnDataChange(listType, value) {
        let _state = this.state[listType];
        const { FETCHING, FETCHING_FAILURE, ERROR, NO_RESULT, EMPTY, LIST, FULL_LIST, } = ListState;
        if (!value || value.error) {
            _state === FETCHING ? (_state = FETCHING_FAILURE) : (_state = ERROR);
        }
        else if (!(value === null || value === void 0 ? void 0 : value.length)) {
            this.search.value ? (_state = NO_RESULT) : (_state = EMPTY);
        }
        else if (!this.pageState[listType].shouldLoadMore()) {
            _state = FULL_LIST;
        }
        else {
            _state = LIST;
        }
        this.listStateReducer({ [listType]: _state });
    }
}
/** @nocollapse */ BeneficiarySelectorUiComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BeneficiarySelectorUiComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ BeneficiarySelectorUiComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: BeneficiarySelectorUiComponent, selector: "bb-beneficiary-selector-ui", inputs: { totalAccounts: "totalAccounts", totalContacts: "totalContacts", totalContactsItemsCount: "totalContactsItemsCount", contacts: "contacts", accounts: "accounts", tabs: "tabs", closeDropdownRequest$: "closeDropdownRequest$", placeholder: "placeholder", title: "title", helperText: "helperText", hasError: "hasError", ariaLabel: ["aria-label", "ariaLabel"], dropdownIcon: "dropdownIcon", debounceTime: "debounceTime", selectedItem: "selectedItem", search: "search", isClosedPayment: "isClosedPayment", isBeneficiaryDisabled: "isBeneficiaryDisabled", isManualEditDisabled: "isManualEditDisabled" }, outputs: { selectedAccount: "selectedAccount", selectedContact: "selectedContact", searchValue: "searchValue", fetchMoreItems: "fetchMoreItems", manualEdit: "manualEdit", searchBlur: "searchBlur", clear: "clear" }, viewQueries: [{ propertyName: "dropdownItem", first: true, predicate: ["dd"], descendants: true }], ngImport: i0, template: "<div\n  class=\"bb-beneficiary-selector-ui\"\n  ngbDropdown\n  #dd=\"ngbDropdown\"\n  display=\"static\"\n  (openChange)=\"handleDropdownClose($event, dd)\"\n>\n  <label *ngIf=\"title\" [for]=\"searchElem?.id\">{{ title }}</label>\n\n  <span\n    class=\"bb-dynamic-input__helper-text bb-text-support\"\n    *ngIf=\"helperText\"\n    [id]=\"searchElem?.id + '__helper-text'\"\n    [textContent]=\"helperText\"\n  >\n  </span>\n\n  <bb-search-box-ui\n    ngbDropdownAnchor\n    (focus)=\"focusHandler()\"\n    (blur)=\"onBlur()\"\n    [formControl]=\"search\"\n    (clear)=\"onClear()\"\n    data-role=\"beneficiary-account-input\"\n    (ngModelChange)=\"handleSearch(search.value)\"\n    [placeholder]=\"placeholder\"\n    [squareBorder]=\"true\"\n    [showClear]=\"!isBeneficiaryDisabled\"\n    [autocomplete]=\"'off'\"\n    [disabled]=\"isBeneficiaryDisabled\"\n    role=\"combobox\"\n    aria-haspopup=\"true\"\n    [attr.aria-owns]=\"tabsComponent.tabsId\"\n    #searchElem\n  >\n    <button\n      bbButton\n      ngbDropdownToggle\n      color=\"outline-secondary\"\n      [attr.aria-label]=\"ariaLabel\"\n      data-role=\"open-beneficiary-dropdown-list-button\"\n    >\n      <bb-icon-ui [name]=\"dropdownIcon\"></bb-icon-ui>\n    </button>\n  </bb-search-box-ui>\n\n  <div\n    ngbDropdownMenu\n    class=\"dropdown-menu dropdown-menu-right w-100 bb-beneficiary-selector-ui__list\"\n  >\n    <bb-beneficiary-tabs\n      #tabsComponent\n      class=\"bb-beneficiary-selector-ui__tabs\"\n      [accounts]=\"accounts\"\n      [contacts]=\"contacts\"\n      [listState]=\"state\"\n      [tabsConfig]=\"tabs\"\n      [totalAccounts]=\"totalAccounts\"\n      [totalContacts]=\"totalContacts\"\n      [canEditManually]=\"!isClosedPayment && !isManualEditDisabled\"\n      [isDropdownOpen]=\"dd.isOpen()\"\n      (selectedContact)=\"selectContact($event); dd.close()\"\n      (selectedAccount)=\"selectAccount($event); dd.close()\"\n      (fetchMoreItems)=\"fetchMoreItemsAction($event)\"\n      (manualEdit)=\"onManualEdit(); dd.close()\"\n    >\n    </bb-beneficiary-tabs>\n  </div>\n</div>\n", components: [{ type: i1.SearchBoxComponent, selector: "bb-search-box-ui", inputs: ["placeholder", "maxLength", "squareBorder", "typeaheadOptions", "showSearch", "showClear", "searchLabel", "clearLabel", "autocomplete"], outputs: ["submit", "clear", "valueChange"] }, { type: i2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i3.BeneficiaryTabsComponent, selector: "bb-beneficiary-tabs", inputs: ["accounts", "contacts", "totalAccounts", "totalContacts", "listState", "tabsConfig", "isDropdownOpen", "canEditManually"], outputs: ["selectedAccount", "selectedContact", "fetchMoreItems", "manualEdit", "searching"] }], directives: [{ type: i4.NgbDropdown, selector: "[ngbDropdown]", inputs: ["open", "placement", "container", "autoClose", "display", "dropdownClass"], outputs: ["openChange"], exportAs: ["ngbDropdown"] }, { type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgbDropdownAnchor, selector: "[ngbDropdownAnchor]" }, { type: i6.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i6.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i7.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i4.NgbDropdownToggle, selector: "[ngbDropdownToggle]" }, { type: i4.NgbDropdownMenu, selector: "[ngbDropdownMenu]" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BeneficiarySelectorUiComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-beneficiary-selector-ui',
                    templateUrl: './beneficiary-selector-ui.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { totalAccounts: [{
                type: Input
            }], totalContacts: [{
                type: Input
            }], totalContactsItemsCount: [{
                type: Input
            }], contacts: [{
                type: Input
            }], accounts: [{
                type: Input
            }], tabs: [{
                type: Input
            }], closeDropdownRequest$: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], title: [{
                type: Input
            }], helperText: [{
                type: Input
            }], hasError: [{
                type: Input
            }], ariaLabel: [{
                type: Input,
                args: ['aria-label']
            }], dropdownIcon: [{
                type: Input
            }], selectedAccount: [{
                type: Output
            }], selectedContact: [{
                type: Output
            }], searchValue: [{
                type: Output
            }], fetchMoreItems: [{
                type: Output
            }], manualEdit: [{
                type: Output
            }], searchBlur: [{
                type: Output
            }], clear: [{
                type: Output
            }], debounceTime: [{
                type: Input
            }], selectedItem: [{
                type: Input
            }], search: [{
                type: Input
            }], isClosedPayment: [{
                type: Input
            }], isBeneficiaryDisabled: [{
                type: Input
            }], isManualEditDisabled: [{
                type: Input
            }], dropdownItem: [{
                type: ViewChild,
                args: ['dd']
            }] } });
//# sourceMappingURL=beneficiary-selector-ui.component.js.map