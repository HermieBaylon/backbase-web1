import { ContentChildren, Directive, ElementRef, EventEmitter, Inject, Input, NgZone, Output, QueryList, Self, } from '@angular/core';
import { CdkVirtualScrollViewport, VIRTUAL_SCROLL_STRATEGY, } from '@angular/cdk/scrolling';
import { Subject } from 'rxjs';
import { defaultBeneficiaryCdkScrollConfig } from '../constants/beneficiary-scroll-config';
import { BeneficiaryScrollStrategyService } from '../services/beneficiary-scroll-strategy.service';
import { takeUntil } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/scrolling";
import * as i2 from "../services/beneficiary-scroll-strategy.service";
export class BeneficiaryScrollItemDirective {
}
/** @nocollapse */ BeneficiaryScrollItemDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BeneficiaryScrollItemDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ BeneficiaryScrollItemDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: BeneficiaryScrollItemDirective, selector: "[bbBeneficiaryScrollItem]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BeneficiaryScrollItemDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbBeneficiaryScrollItem]',
                }]
        }] });
export function factoryScroll() {
    return new BeneficiaryScrollStrategyService();
}
export class BeneficiaryScrollDirective {
    constructor(viewport, scrollStrategy, ngZone) {
        this.viewport = viewport;
        this.scrollStrategy = scrollStrategy;
        this.ngZone = ngZone;
        this.destroy$ = new Subject();
        /**
         * Trigger fetching more items
         */
        this.loadMore = new EventEmitter();
        this.viewport.scrolledIndexChange
            .pipe(takeUntil(this.destroy$))
            .subscribe(() => {
            const dataLength = this.viewport.getDataLength();
            const { end } = this.viewport.getRenderedRange();
            if (dataLength &&
                end === dataLength &&
                dataLength !== this.bbBeneficiaryScrollTotalCount) {
                // CdkVirtualScrollViewport runs all events outside zone,
                // to detect changes we need to emit load more event inside zone.
                this.ngZone.run(() => Promise.resolve().then(() => {
                    this.loadMore.emit();
                }));
            }
        });
    }
    ngAfterViewInit() {
        var _a, _b, _c;
        const { minBufferPx, maxBufferPx } = defaultBeneficiaryCdkScrollConfig;
        const listItemSize = (_c = (_b = (_a = this.listItems) === null || _a === void 0 ? void 0 : _a.toArray()[0]) === null || _b === void 0 ? void 0 : _b.nativeElement) === null || _c === void 0 ? void 0 : _c.clientHeight;
        if (listItemSize) {
            this.scrollStrategy.updateItemAndBufferSize(listItemSize, minBufferPx, maxBufferPx);
        }
    }
    ngOnDestroy() {
        this.destroy$.next();
    }
}
/** @nocollapse */ BeneficiaryScrollDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BeneficiaryScrollDirective, deps: [{ token: i1.CdkVirtualScrollViewport, self: true }, { token: VIRTUAL_SCROLL_STRATEGY }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ BeneficiaryScrollDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: BeneficiaryScrollDirective, selector: "[bbBeneficiaryScroll]", inputs: { bbBeneficiaryScrollTotalCount: "bbBeneficiaryScrollTotalCount" }, outputs: { loadMore: "bbBeneficiaryScroll" }, providers: [
        {
            provide: VIRTUAL_SCROLL_STRATEGY,
            useFactory: factoryScroll,
        },
    ], queries: [{ propertyName: "listItems", predicate: BeneficiaryScrollItemDirective, descendants: true, read: ElementRef }], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BeneficiaryScrollDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbBeneficiaryScroll]',
                    providers: [
                        {
                            provide: VIRTUAL_SCROLL_STRATEGY,
                            useFactory: factoryScroll,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i1.CdkVirtualScrollViewport, decorators: [{
                    type: Self
                }] }, { type: i2.BeneficiaryScrollStrategyService, decorators: [{
                    type: Inject,
                    args: [VIRTUAL_SCROLL_STRATEGY]
                }] }, { type: i0.NgZone }]; }, propDecorators: { listItems: [{
                type: ContentChildren,
                args: [BeneficiaryScrollItemDirective, {
                        descendants: true,
                        read: ElementRef,
                    }]
            }], bbBeneficiaryScrollTotalCount: [{
                type: Input
            }], loadMore: [{
                type: Output,
                args: ['bbBeneficiaryScroll']
            }] } });
//# sourceMappingURL=beneficiary-scroll.directive.js.map