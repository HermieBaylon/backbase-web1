import { Component, EventEmitter, forwardRef, Input, Output, } from '@angular/core';
import { FormControl, NG_VALUE_ACCESSOR, } from '@angular/forms';
import { CurrenciesMap, CurrencyToCountryMap } from '../../constants';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/icon";
import * as i2 from "@backbase/ui-ang/search-box";
import * as i3 from "../sr-search-result-info/sr-search-result-info.component";
import * as i4 from "../flag-icon/bb-flag-icon";
import * as i5 from "@backbase/ui-ang/empty-state";
import * as i6 from "@ng-bootstrap/ng-bootstrap";
import * as i7 from "@backbase/ui-ang/button";
import * as i8 from "@angular/common";
import * as i9 from "@angular/forms";
import * as i10 from "@backbase/ui-ang/keyboard-click-directive";
export class CurrencySelectorComponent {
    constructor() {
        this.isDisabled = false;
        this.search = new FormControl();
        this.filteredCurrencies = [];
        this.currencyToCountryMap = CurrencyToCountryMap;
        this.currenciesMap = CurrenciesMap;
        this.change = new EventEmitter();
        /**
         * Flag to determine component config
         */
        this.config = {};
        /**
         * Selected currency output
         */
        this.selectCurrency = new EventEmitter();
    }
    /**
     * List of currencies setter
     */
    set currencies(currencies) {
        this._currencies = currencies || [];
        this.setupCurrencies();
    }
    setupCurrencies() {
        this.currencyEntries = this._currencies.map((currency) => [
            currency,
            this.currenciesMap[currency] ? this.currenciesMap[currency].name : '',
        ]);
        this.filteredCurrencies = [...this._currencies];
        this.selectedCurrency = this.selectedCurrency || this._currencies[0];
        if (this._currencies.length < 2) {
            this.isDisabled = true;
        }
    }
    selectItem(currency) {
        this.selectedCurrency = currency;
        this.selectCurrency.emit(currency);
        this.onChange(currency);
        this.value = currency;
    }
    handleSearch(query = '') {
        if (query) {
            this.filteredCurrencies = this.currencyEntries.reduce((acc, [currency, currName]) => {
                if (currency.toLocaleLowerCase().indexOf(query.toLocaleLowerCase()) >
                    -1 ||
                    currName.toLocaleLowerCase().indexOf(query.toLocaleLowerCase()) > -1) {
                    acc.push(currency);
                }
                return acc;
            }, []);
        }
        else {
            this.filteredCurrencies = this._currencies;
        }
    }
    onChange(_value) { }
    onTouched() { }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    writeValue(value) {
        if (value) {
            this.selectedCurrency = value;
        }
        this.value = value;
    }
    ngOnInit() {
        this.showFlags = this.config.showFlags || false;
        this.showName = this.config.showName || false;
        this.isSearchable = this.config.isSearchable || false;
        this.dividerIndex = this.config.dividerIndex;
        this.searchPlaceholder = this.config.searchPlaceholder || '';
        this.dropdownIcon = this.config.dropdownIcon || 'toggle-down';
    }
}
/** @nocollapse */ CurrencySelectorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CurrencySelectorComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ CurrencySelectorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: CurrencySelectorComponent, selector: "bb-currency-selector", inputs: { currencies: "currencies", config: "config", ariaLabelledby: ["aria-labelledby", "ariaLabelledby"] }, outputs: { selectCurrency: "selectCurrency" }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            multi: true,
            useExisting: forwardRef((() => CurrencySelectorComponent)),
        },
    ], ngImport: i0, template: "<div\n  class=\"d-inline-block\"\n  ngbDropdown\n  #dropdown=\"ngbDropdown\"\n  display=\"static\"\n>\n  <div>\n    <button\n      bbButton\n      ngbDropdownToggle\n      color=\"unstyled\"\n      (blur)=\"onTouched()\"\n      [disabled]=\"isDisabled\"\n      [attr.aria-labelledby]=\"ariaLabelledby\"\n      data-role=\"open-currency-dropdown-list-button\"\n      class=\"bb-currency-selector__toggle form-control d-flex justify-content-between bb-text-support\"\n    >\n      <ng-container *ngIf=\"selectedCurrency\">\n        <ng-container\n          *ngTemplateOutlet=\"\n            currencyTmpl;\n            context: { code: selectedCurrency, selected: true }\n          \"\n        ></ng-container>\n      </ng-container>\n      <bb-icon-ui [name]=\"dropdownIcon\"></bb-icon-ui>\n    </button>\n  </div>\n\n  <div\n    ngbDropdownMenu\n    class=\"dropdown-menu\"\n    [ngClass]=\"{ 'bb-currency-selector__dropdown': isSearchable }\"\n  >\n    <div *ngIf=\"isSearchable\" class=\"bb-block bb-block--md px-3\">\n      <bb-search-box-ui\n        (focus)=\"dropdown.open()\"\n        [formControl]=\"search\"\n        (clear)=\"handleSearch('')\"\n        data-role=\"currency-search\"\n        (ngModelChange)=\"handleSearch(search.value)\"\n        [placeholder]=\"searchPlaceholder || 'Search'\"\n        [attr.aria-label]=\"searchPlaceholder || 'Search'\"\n        [showSearch]=\"true\"\n        [showClear]=\"true\"\n        [autocomplete]=\"'off'\"\n      ></bb-search-box-ui>\n    </div>\n\n    <bb-payments-sr-search-result-info\n      [totalNumber]=\"filteredCurrencies?.length || 0\"\n    >\n    </bb-payments-sr-search-result-info>\n\n    <div *ngIf=\"filteredCurrencies?.length\" class=\"pre-scrollable\">\n      <ng-container *ngFor=\"let currency of filteredCurrencies; index as i\">\n        <button\n          role=\"menuitem\"\n          data-role=\"currency-item\"\n          type=\"button\"\n          class=\"d-sm-flex px-3 py-2 d-flex-row align-items-center btn--unstyled\"\n          (bbKeyboardClick)=\"selectItem(currency); dropdown.close()\"\n          ngbDropdownItem\n        >\n          <ng-container\n            *ngTemplateOutlet=\"currencyTmpl; context: { code: currency }\"\n          ></ng-container>\n        </button>\n        <hr *ngIf=\"dividerIndex === i\" />\n      </ng-container>\n    </div>\n    <ng-container *ngIf=\"!filteredCurrencies?.length && search?.value\">\n      <ng-container *ngTemplateOutlet=\"emptySearch\"></ng-container>\n    </ng-container>\n  </div>\n</div>\n\n<ng-template let-code=\"code\" let-selected=\"selected\" #currencyTmpl>\n  <div class=\"d-flex align-items-center\" data-role=\"selected-currency\">\n    <bb-flag-icon\n      *ngIf=\"showFlags\"\n      class=\"mr-2 d-flex\"\n      [countryCode]=\"currencyToCountryMap[code]\"\n      [flagSize]=\"'sm'\"\n      data-role=\"flag-icon\"\n    ></bb-flag-icon>\n    {{ code }}\n    <span\n      *ngIf=\"showName && !selected\"\n      class=\"d-inline-block ml-3 bb-text-support\"\n      >{{ currenciesMap[code] && currenciesMap[code].name }}</span\n    >\n  </div>\n</ng-template>\n\n<ng-template #emptySearch>\n  <div class=\"card-body\">\n    <bb-empty-state-ui\n      data-role=\"no-templates-found\"\n      title=\"No search results\"\n      iconSize=\"xl\"\n      i18n-title=\"@@bb-currency-selector.empty-state-title\"\n      iconModifier=\"search\"\n      [showIcon]=\"false\"\n    ></bb-empty-state-ui>\n  </div>\n</ng-template>\n", components: [{ type: i1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i2.SearchBoxComponent, selector: "bb-search-box-ui", inputs: ["placeholder", "maxLength", "squareBorder", "typeaheadOptions", "showSearch", "showClear", "searchLabel", "clearLabel", "autocomplete"], outputs: ["submit", "clear", "valueChange"] }, { type: i3.PaymentsSrSearchResultInfoComponent, selector: "bb-payments-sr-search-result-info", inputs: ["totalNumber"] }, { type: i4.FlagIconComponent, selector: "bb-flag-icon", inputs: ["flagSize", "countryCode"] }, { type: i5.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i6.NgbDropdown, selector: "[ngbDropdown]", inputs: ["open", "placement", "container", "autoClose", "display", "dropdownClass"], outputs: ["openChange"], exportAs: ["ngbDropdown"] }, { type: i7.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i6.NgbDropdownToggle, selector: "[ngbDropdownToggle]" }, { type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i8.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i6.NgbDropdownMenu, selector: "[ngbDropdownMenu]" }, { type: i8.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i9.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i9.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i8.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i6.NgbDropdownItem, selector: "[ngbDropdownItem]", inputs: ["disabled"] }, { type: i10.KeyboardClickDirective, selector: "[bbKeyboardClick]", outputs: ["bbKeyboardClick"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CurrencySelectorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-currency-selector',
                    templateUrl: './currency-selector.component.html',
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            multi: true,
                            useExisting: forwardRef((() => CurrencySelectorComponent)),
                        },
                    ],
                }]
        }], propDecorators: { currencies: [{
                type: Input
            }], config: [{
                type: Input
            }], ariaLabelledby: [{
                type: Input,
                args: ['aria-labelledby']
            }], selectCurrency: [{
                type: Output
            }] } });
//# sourceMappingURL=currency-selector.component.js.map