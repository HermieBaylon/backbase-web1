import { Component, ElementRef, EventEmitter, Input, Output, } from '@angular/core';
import { FormGroup, Validators } from '@angular/forms';
import { toggleTabIndex } from '../../helpers/dom-helpers';
import { isAddressTruthy } from '../../helpers/type-helpers';
import { ViewType } from '../../models/types';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/icon";
import * as i2 from "../full-address/full-address.component";
import * as i3 from "@backbase/ui-ang/input-text";
import * as i4 from "@backbase/ui-ang/input-validation-message";
import * as i5 from "@backbase/ui-ang/dropdown-single-select";
import * as i6 from "../country-name/country-name.component";
import * as i7 from "@backbase/ui-ang/button";
import * as i8 from "@angular/common";
import * as i9 from "@backbase/ui-ang/tooltip-directive";
import * as i10 from "@angular/forms";
export class AddressDetailsComponent {
    constructor(elRef) {
        this.elRef = elRef;
        this.id = AddressDetailsComponent._id++;
        /**
         * Instance that holds the address details
         */
        this.address = {};
        /**
         * Flag that denoted if contact address is copied
         */
        this.isContactAddressCopied = false;
        /**
         * Flag to hide country input in the address component
         */
        this.hideCountry = false;
        /**
         * Type of address view. Possible values `FORM`| `CARD`. Defaults to `FORM`
         */
        this.viewType = ViewType.BUTTON;
        /**
         * Flag to denote if the debit account has only closed payment permissions
         * Default value is `false`
         */
        this.isClosedPayment = false;
        /**
         * Event emitted when address is submitted
         */
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.submit = new EventEmitter();
        /**
         * Event emitted when address is reset
         */
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.reset = new EventEmitter();
        /**
         * Event emitted when address is discarded
         */
        this.discard = new EventEmitter();
        /**
         * Event emitted when address is deleted
         */
        this.delete = new EventEmitter();
        /**
         * Event emitted when address is editted
         */
        this.edit = new EventEmitter();
        /**
         * Event emitted when add address action is triggered
         */
        this.add = new EventEmitter();
        this.requiredFields = ['addressLine1', 'postCode', 'town'];
    }
    ngOnInit() {
        if (!this.hideCountry) {
            this.requiredFields.push('country');
        }
        this.markFieldsAsPristine();
        if (!this.isAddressTruthy()) {
            this.viewType = ViewType.BUTTON;
            this.reset.emit();
        }
        this.valueChangeSubscription = this.addressForm.valueChanges.subscribe(() => {
            this.address = this.addressForm.value;
            if (this.viewType !== ViewType.FORM) {
                if (this.isAddressTruthy()) {
                    this.submit.emit();
                }
                else if (this.viewType === ViewType.CARD) {
                    this.reset.emit();
                }
            }
        });
    }
    ngOnChanges(changes) {
        var _a, _b, _c;
        const validator = (_b = (_a = this.addressForm) === null || _a === void 0 ? void 0 : _a.controls['addressLine1']) === null || _b === void 0 ? void 0 : _b.validator;
        const currentView = (_c = changes['viewType']) === null || _c === void 0 ? void 0 : _c.currentValue;
        if (changes['viewType']) {
            if (currentView === ViewType.FORM) {
                if (!validator) {
                    this.toggleValidators(true);
                }
            }
            else {
                if (currentView === ViewType.CARD && !this.isAddressTruthy()) {
                    this.reset.emit();
                }
                if (validator) {
                    this.toggleValidators(false);
                }
            }
        }
    }
    markFieldsAsPristine() {
        this.requiredFields.forEach((controlName) => {
            const control = this.addressForm.controls[controlName];
            if (control) {
                control.markAsUntouched();
                control.markAsPristine();
            }
        });
    }
    addAddress() {
        var _a;
        if (((_a = this.countries) === null || _a === void 0 ? void 0 : _a.length) === 1) {
            this.addressForm.patchValue({ country: this.countries[0].value });
        }
        if (this.addressForm.touched) {
            // This prevents address form from showing errors before saving an address
            this.addressForm.markAsUntouched();
        }
        this.add.emit();
    }
    editAddress() {
        this.edit.emit();
    }
    discardAddress() {
        this.discard.emit();
    }
    deleteAddress() {
        this.delete.emit();
    }
    submitAddress() {
        if (this.viewType === ViewType.FORM) {
            this.addressForm.markAsDirty();
            this.addressForm.markAllAsTouched();
        }
        this.submit.emit();
    }
    toggleValidators(addValidators) {
        this.requiredFields.forEach((controlName) => {
            const control = this.addressForm.controls[controlName];
            const validators = addValidators ? [Validators.required] : null;
            if (control) {
                control.setValidators(validators);
                control.updateValueAndValidity();
            }
        });
    }
    selectCountry(country) {
        this.addressForm.patchValue({ country });
    }
    isAddressTruthy() {
        var _a;
        return isAddressTruthy((_a = this.addressForm) === null || _a === void 0 ? void 0 : _a.value);
    }
    onFocusout() {
        toggleTabIndex('.bb-input-validation-message', this.elRef.nativeElement, false);
    }
    ngOnDestroy() {
        if (this.valueChangeSubscription) {
            this.valueChangeSubscription.unsubscribe();
        }
    }
}
AddressDetailsComponent._id = 0;
/** @nocollapse */ AddressDetailsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AddressDetailsComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ AddressDetailsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AddressDetailsComponent, selector: "bb-address-item-details", inputs: { addressForm: "addressForm", addressType: "addressType", address: "address", isContactAddressCopied: "isContactAddressCopied", states: "states", countries: "countries", hideCountry: "hideCountry", viewType: "viewType", isClosedPayment: "isClosedPayment" }, outputs: { submit: "submit", reset: "reset", discard: "discard", delete: "delete", edit: "edit", add: "add" }, usesOnChanges: true, ngImport: i0, template: "<div class=\"address__view-btn\" [hidden]=\"viewType !== 'BUTTON'\">\n  <button\n    bbButton\n    color=\"link\"\n    (click)=\"addAddress()\"\n    class=\"bb-text-wrap\"\n    data-role=\"control-point\"\n    [disabled]=\"isClosedPayment\"\n  >\n    <bb-icon-ui class=\"mr-2\" name=\"control-point\"></bb-icon-ui>\n    <ng-container i18n=\"@@address-data.add.address.label\"\n      >Add {{ addressType | lowercase }} address</ng-container\n    >\n  </button>\n</div>\n\n<div\n  class=\"address__container--collapsed card card-sm card--highlight card--shadowless\"\n  [hidden]=\"viewType !== 'CARD'\"\n>\n  <div class=\"card-body\">\n    <div class=\"address__container-header bb-stack justify-content-between\">\n      <div class=\"address-label bb-highlight bb-block--md\">\n        <ng-container *ngTemplateOutlet=\"addressTitle\"></ng-container>\n      </div>\n      <div *ngIf=\"!isClosedPayment\">\n        <button\n          bbButton\n          data-role=\"control-point\"\n          color=\"link\"\n          circle=\"true\"\n          (click)=\"editAddress()\"\n          class=\"edit-btn\"\n          bbTooltip=\"Edit address\"\n          [attr.aria-labelledby]=\"'addressInfo_' + id\"\n          triggers=\"hover focus\"\n          i18n-bbTooltip=\"@@address-data.contactaddress.card.buttons.edit.label\"\n        >\n          <bb-icon-ui color=\"dark\" name=\"edit\"></bb-icon-ui>\n        </button>\n        <button\n          bbButton\n          color=\"link\"\n          circle=\"true\"\n          (click)=\"deleteAddress()\"\n          class=\"address__delete-btn\"\n          bbTooltip=\"Delete address\"\n          [attr.aria-labelledby]=\"'addressInfo_' + id\"\n          triggers=\"hover focus\"\n          i18n-bbTooltip=\"\n            @@address-data.contactaddress.card.buttons.delete.label\"\n        >\n          <bb-icon-ui color=\"dark\" name=\"delete\"></bb-icon-ui>\n        </button>\n      </div>\n    </div>\n    <div class=\"address__details--collapsed\" id=\"addressInfo_{{ id }}\">\n      <span class=\"sr-only\"\n        ><ng-container *ngTemplateOutlet=\"addressTitle\"></ng-container\n      ></span>\n      <bb-full-address [address]=\"addressForm?.value\"></bb-full-address>\n    </div>\n  </div>\n</div>\n\n<div\n  class=\"address__container card card-sm card--highlight card--shadowless\"\n  *ngIf=\"viewType === 'FORM'\"\n>\n  <div class=\"card-body\">\n    <fieldSet [formGroup]=\"addressForm\">\n      <legend class=\"sr-only\" i18n=\"@@address-data.addressGroup.title\">\n        Address details\n      </legend>\n      <div class=\"form-group\">\n        <div>\n          <div\n            class=\"address-label bb-highlight bb-block--md\"\n            data-role=\"address-label\"\n            i18n=\"@@address-data.contactAddress.label\"\n          >\n            {{ addressType | titlecase }} address\n          </div>\n          <div class=\"form-group\">\n            <bb-input-text-ui\n              label=\"Address line 1\"\n              i18n-label=\"@@address-data.addressLine1.label\"\n              formControlName=\"addressLine1\"\n              data-role=\"addressLine1\"\n              [maxLength]=\"70\"\n              [attr.aria-describedby]=\"addressLine1?.id + '__error'\"\n              #addressLine1\n            >\n            </bb-input-text-ui>\n            <bb-input-validation-message-ui\n              [attr.id]=\"addressLine1?.id + '__error'\"\n              *ngIf=\"addressForm.controls['addressLine1'] as formControl\"\n              [showErrors]=\"formControl?.touched && formControl?.invalid\"\n              (focusout)=\"onFocusout()\"\n            >\n              <ng-container *ngIf=\"formControl?.errors?.required\">\n                <span i18n=\"@@address-data.addressLine1.requiredError\"\n                  >Address is required.</span\n                >\n              </ng-container>\n            </bb-input-validation-message-ui>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <bb-input-text-ui\n            label=\"Address line 2 (Optional)\"\n            i18n-label=\"@@address-data.addressLine2.label\"\n            formControlName=\"addressLine2\"\n            data-role=\"addressLine2\"\n            [maxLength]=\"70\"\n            #addressLine2\n          >\n          </bb-input-text-ui>\n        </div>\n        <div class=\"form-group\">\n          <bb-input-text-ui\n            label=\"Address line 3 (Optional)\"\n            i18n-label=\"@@address-data.addressLine3.label\"\n            formControlName=\"streetName\"\n            data-role=\"streetName\"\n            [maxLength]=\"70\"\n            #addressLine3\n          >\n          </bb-input-text-ui>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-md-4 form-group\">\n          <bb-input-text-ui\n            label=\"Postal code\"\n            i18n-label=\"@@address-data.postCode.label\"\n            formControlName=\"postCode\"\n            data-role=\"postCode\"\n            #postCode\n            [maxLength]=\"16\"\n            [attr.aria-describedby]=\"postCode?.id + '__error'\"\n          >\n          </bb-input-text-ui>\n          <bb-input-validation-message-ui\n            [attr.id]=\"postCode?.id + '__error'\"\n            *ngIf=\"addressForm.controls['postCode'] as formControl\"\n            [showErrors]=\"formControl?.touched && formControl?.invalid\"\n            (focusout)=\"onFocusout()\"\n          >\n            <ng-container *ngIf=\"formControl?.errors?.required\">\n              <span i18n=\"@@address-data.postCode.requiredError\"\n                >Postal code is required.</span\n              >\n            </ng-container>\n          </bb-input-validation-message-ui>\n        </div>\n        <div class=\"col-md-8 form-group\">\n          <bb-input-text-ui\n            #contactCity\n            label=\"City\"\n            formControlName=\"town\"\n            data-role=\"town\"\n            [maxLength]=\"35\"\n            [attr.aria-describedby]=\"contactCity?.id + '__error'\"\n          >\n          </bb-input-text-ui>\n          <bb-input-validation-message-ui\n            [attr.id]=\"contactCity?.id + '__error'\"\n            *ngIf=\"addressForm.controls['town'] as formControl\"\n            [showErrors]=\"formControl?.touched && formControl?.invalid\"\n            (focusout)=\"onFocusout()\"\n          >\n            <ng-container *ngIf=\"formControl?.errors?.required\">\n              <span i18n=\"@@address-data.city.requiredError\"\n                >City is required.</span\n              >\n            </ng-container>\n          </bb-input-validation-message-ui>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-md-6 form-group\">\n          <ng-container *ngIf=\"states?.length > 0; else stateText\">\n            <bb-dropdown-single-select-ui\n              label=\"State or area (Optional)\"\n              i18n-label=\"@@address-data.countrySubDivision.label\"\n              data-role=\"stateOrArea\"\n              formControlName=\"countrySubDivision\"\n              placeholder=\"Select\"\n              i18n-placeholder=\"@@address-data.countrySubDivision.placeholder\"\n            >\n              <bb-dropdown-single-select-option-ui\n                *ngFor=\"let option of states\"\n                [value]=\"option.value\"\n                [label]=\"option.label\"\n              >\n              </bb-dropdown-single-select-option-ui>\n            </bb-dropdown-single-select-ui>\n          </ng-container>\n\n          <ng-template #stateText>\n            <bb-input-text-ui\n              #countrySubDivision\n              label=\"State or area (Optional)\"\n              data-role=\"countrySubDivision\"\n              i18n-label=\"@@address-data.countrySubDivision.label\"\n              formControlName=\"countrySubDivision\"\n              [maxLength]=\"35\"\n            >\n            </bb-input-text-ui>\n          </ng-template>\n        </div>\n        <div\n          class=\"col-md-6 form-group\"\n          data-role=\"country\"\n          *ngIf=\"!hideCountry\"\n        >\n          <ng-container *ngIf=\"countries?.length > 0; else countryText\">\n            <bb-dropdown-single-select-ui\n              label=\"Country\"\n              data-role=\"country\"\n              i18n-label=\"@@address-data.country.label\"\n              formControlName=\"country\"\n              placeholder=\"Select\"\n              i18n-placeholder=\"@@address-data.country.placeholder\"\n              [attr.aria-describedby]=\"countryEl?.id + '__error'\"\n              #countryEl\n            >\n              <bb-dropdown-single-select-option-ui\n                *ngFor=\"let option of countries\"\n                [value]=\"option.value\"\n                [label]=\"option.label\"\n              >\n              </bb-dropdown-single-select-option-ui>\n            </bb-dropdown-single-select-ui>\n            <bb-input-validation-message-ui\n              [attr.id]=\"countryEl?.id + '__error'\"\n              *ngIf=\"addressForm.controls['country'] as formControl\"\n              [showErrors]=\"formControl?.touched && formControl?.invalid\"\n              (focusout)=\"onFocusout()\"\n            >\n              <span i18n=\"@@address-data.country.requiredError\"\n                >Country is required.</span\n              >\n            </bb-input-validation-message-ui>\n          </ng-container>\n          <ng-template #countryText>\n            <bb-input-text-ui\n              label=\"Country\"\n              i18n-label=\"@@address-data.country.label\"\n              formControlName=\"country\"\n              [attr.aria-describedby]=\"countryTextEl?.id + '__error'\"\n              #countryTextEl\n            >\n            </bb-input-text-ui>\n            <bb-input-validation-message-ui\n              [attr.id]=\"countryTextEl?.id + '__error'\"\n              *ngIf=\"addressForm.controls['country'] as formControl\"\n              [showErrors]=\"formControl?.touched && formControl?.invalid\"\n              (focusout)=\"onFocusout()\"\n            >\n              <span i18n=\"@@address-data.country.requiredError\"\n                >Country is required.</span\n              >\n            </bb-input-validation-message-ui>\n          </ng-template>\n        </div>\n        <div class=\"col-md-6 form-group\" *ngIf=\"hideCountry\">\n          <div class=\"bb-label\" i18n=\"@@address-data.country-readonly.label\">\n            Country\n          </div>\n          <div class=\"form-control disabled bg-light\">\n            <bb-country-name\n              *ngIf=\"this.addressForm.get('country')?.value as countryCode\"\n              [countryCode]=\"countryCode\"\n            ></bb-country-name>\n          </div>\n        </div>\n      </div>\n    </fieldSet>\n    <div class=\"address__btn-container bb-button-bar bb-button-bar--reverse\">\n      <button\n        class=\"address__confirm-btn bb-button-bar__button\"\n        bbButton\n        buttonSize=\"sm\"\n        color=\"primary\"\n        data-role=\"confirm-address\"\n        (click)=\"submitAddress()\"\n      >\n        <ng-container i18n=\"@@address-data.submitAddressBtn.label\"\n          >Confirm address</ng-container\n        >\n      </button>\n      <button\n        class=\"address__cancel-btn bb-button-bar__button\"\n        bbButton\n        buttonSize=\"sm\"\n        color=\"link\"\n        (click)=\"discardAddress()\"\n      >\n        <ng-container i18n=\"@@address-data.discardAddressBtn.label\"\n          >Discard</ng-container\n        >\n      </button>\n    </div>\n  </div>\n</div>\n\n<ng-template #addressTitle>\n  <ng-container i18n=\"@@address-data.addressType.label\">\n    { addressType, select, beneficiary {Beneficiary} client {Client} beneficiary\n    bank {Beneficiary Bank} correspondent bank {Correspondent Bank} intermediary\n    bank {Intermediary Bank} client bank {Client Bank} }\n  </ng-container>\n  <ng-container i18n=\"@@address-data.contactaddress.card.label\">\n    address\n  </ng-container>\n</ng-template>\n", components: [{ type: i1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i2.FullAddressComponent, selector: "bb-full-address", inputs: ["address"] }, { type: i3.InputTextComponent, selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i4.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i5.DropdownSingleSelectComponent, selector: "bb-dropdown-single-select-ui", inputs: ["placeholder", "defaultOptionAsPlaceholder", "options", "displayAttributePath", "iconName", "compareWithFn"] }, { type: i5.DropdownSingleSelectOptionComponent, selector: "bb-dropdown-single-select-option-ui", inputs: ["value", "label"] }, { type: i6.CountryNameComponent, selector: "bb-country-name", inputs: ["countryCode"] }], directives: [{ type: i7.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i8.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i9.TooltipDirective, selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i10.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i10.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i10.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i10.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i8.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "lowercase": i8.LowerCasePipe, "titlecase": i8.TitleCasePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AddressDetailsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-address-item-details',
                    templateUrl: './address-details.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { addressForm: [{
                type: Input
            }], addressType: [{
                type: Input
            }], address: [{
                type: Input
            }], isContactAddressCopied: [{
                type: Input
            }], states: [{
                type: Input
            }], countries: [{
                type: Input
            }], hideCountry: [{
                type: Input
            }], viewType: [{
                type: Input
            }], isClosedPayment: [{
                type: Input
            }], submit: [{
                type: Output
            }], reset: [{
                type: Output
            }], discard: [{
                type: Output
            }], delete: [{
                type: Output
            }], edit: [{
                type: Output
            }], add: [{
                type: Output
            }] } });
//# sourceMappingURL=address-details.component.js.map