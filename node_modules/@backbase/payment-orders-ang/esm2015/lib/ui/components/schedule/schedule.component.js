import { ChangeDetectorRef, Component, Directive, Input, } from '@angular/core';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { Subject } from 'rxjs';
import { distinct, takeUntil } from 'rxjs/operators';
import { Frequencies } from '../../constants';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/input-datepicker";
import * as i2 from "@backbase/ui-ang/input-validation-message";
import * as i3 from "@backbase/ui-ang/dropdown-single-select";
import * as i4 from "@backbase/ui-ang/input-radio-group";
import * as i5 from "@backbase/ui-ang/input-number";
import * as i6 from "@angular/forms";
import * as i7 from "@angular/common";
export const endTypes = {
    never: 'never',
    on: 'on',
    after: 'after',
};
const endDate = (frequency, startDate) => {
    const today = startDate ? new Date(startDate) : new Date();
    switch (frequency.value) {
        case Frequencies.ONCE:
            return undefined;
        case Frequencies.WEEKLY: {
            return new Date(today.getFullYear(), today.getMonth(), today.getDate() + 7).toISOString();
        }
        case Frequencies.BIWEEKLY: {
            return new Date(today.getFullYear(), today.getMonth(), today.getDate() + 14).toISOString();
        }
        case Frequencies.MONTHLY: {
            return new Date(today.getFullYear(), today.getMonth() + 1, today.getDate()).toISOString();
        }
        case Frequencies.QUARTERLY: {
            return new Date(today.getFullYear(), today.getMonth() + 3, today.getDate()).toISOString();
        }
        case Frequencies.YEARLY: {
            return new Date(today.getFullYear() + 1, today.getMonth(), today.getDate()).toISOString();
        }
        case Frequencies.DAILY:
        default: {
            return new Date(today.getFullYear(), today.getMonth(), today.getDate() + 1).toISOString();
        }
    }
};
export class ScheduleComponent {
    constructor(changeDetectorRef) {
        this.changeDetectorRef = changeDetectorRef;
        this.hostRef = this;
        this.gc$ = new Subject();
    }
    get endTypes() {
        return endTypes;
    }
    get item() {
        return this.rawItem;
    }
    get isSingleTransfer() {
        return (this.item &&
            this.item.frequency &&
            (this.item.frequency.value
                ? this.item.frequency.value.toLocaleLowerCase() === 'once'
                : false));
    }
    get today() {
        const today = new Date();
        return {
            year: today.getFullYear(),
            month: today.getMonth() + 1,
            day: today.getDate(),
        };
    }
    ngDoCheck() {
        if (this.scheduleForm !== undefined) {
            this.rawItem = this.scheduleForm.getRawValue();
        }
    }
    ngOnInit() {
        if (this.scheduleForm === undefined) {
            throw new Error('`scheduleForm` input is required in `bb-schedule-ui` component');
        }
        if (this.frequencies === undefined) {
            throw new Error('`frequencies` input is required in `bb-schedule-ui` component');
        }
        this.rawItem = this.scheduleForm.getRawValue();
        this.onEndTypeChange();
        this.onFrequencyChange();
        this.onStartDateChange();
    }
    ngOnDestroy() {
        this.gc$.next();
        this.gc$.complete();
    }
    onEndTypeChange() {
        const endTypeControl = this.scheduleForm && this.scheduleForm.get('endType');
        const frequencyControl = this.scheduleForm && this.scheduleForm.get('frequency');
        if (endTypeControl) {
            endTypeControl.valueChanges
                .pipe(takeUntil(this.gc$))
                .subscribe((endTypeValue) => {
                this.setControlsState(endTypeValue);
                if (frequencyControl) {
                    this.setEndDate(frequencyControl.value);
                }
            });
        }
    }
    setControlsState(endTypeValue) {
        if (!this.scheduleForm) {
            return;
        }
        const endDateControl = this.scheduleForm.get('endDate');
        const repeatControl = this.scheduleForm.get('repeat');
        if (endDateControl && repeatControl) {
            if (endDateControl.value) {
                endDateControl.enable();
            }
            else {
                this.setEndDate({ value: Frequencies.DAILY, every: '1' });
                endDateControl.disable();
            }
            if (repeatControl.value) {
                repeatControl.enable();
            }
            else {
                repeatControl.disable();
            }
            switch (endTypeValue) {
                case endTypes.after: {
                    repeatControl.enable();
                    endDateControl.disable();
                    break;
                }
                case endTypes.on: {
                    endDateControl.enable();
                    repeatControl.disable();
                    break;
                }
                case endTypes.never:
                default: {
                    endDateControl.disable();
                    repeatControl.disable();
                    break;
                }
            }
        }
    }
    onStartDateChange() {
        const startDateControl = this.scheduleForm && this.scheduleForm.get('startDate');
        const startDate = startDateControl && startDateControl.value;
        if (startDateControl) {
            startDateControl.valueChanges
                .pipe(takeUntil(this.gc$), distinct())
                .subscribe((value) => {
                const frequency = this.item && this.item.frequency;
                if (frequency && startDate !== value) {
                    this.setEndDate(frequency);
                }
            });
        }
    }
    onFrequencyChange() {
        if (!this.frequencies) {
            return;
        }
        const frequencyControl = this.scheduleForm && this.scheduleForm.get('frequency');
        if (frequencyControl) {
            if (this.isSingleTransfer) {
                frequencyControl.setValue(this.frequencies[0]);
            }
            frequencyControl.valueChanges
                .pipe(takeUntil(this.gc$))
                .subscribe((freq) => {
                this.setEndDate(freq);
            });
        }
    }
    setEndDate(frequency) {
        const endDateControl = this.scheduleForm && this.scheduleForm.get('endDate');
        const startDateControl = this.scheduleForm && this.scheduleForm.get('startDate');
        const startDate = startDateControl && startDateControl.value;
        const endTypeControl = this.scheduleForm && this.scheduleForm.get('endType');
        if (endDateControl &&
            endTypeControl &&
            endTypeControl.value === this.endTypes.on) {
            endDateControl.setValue(endDate(frequency, startDate));
        }
        this.changeDetectorRef.detectChanges();
    }
    isInvalidControl(control) {
        if (!this.scheduleForm) {
            return false;
        }
        if (!this.formSubmitted) {
            control.markAsUntouched();
        }
        return !!this.formSubmitted && control.invalid;
    }
}
/** @nocollapse */ ScheduleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ScheduleComponent, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ ScheduleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ScheduleComponent, selector: "bb-schedule-ui", inputs: { frequencies: "frequencies", minOccurs: "minOccurs", maxOccurs: "maxOccurs", scheduleForm: "scheduleForm", formSubmitted: "formSubmitted" }, ngImport: i0, template: "<ng-template bbScheduleCustomizable let-hostRef>\n  <div [formGroup]=\"hostRef.scheduleForm\">\n    <div class=\"bb-block bb-block--md\"></div>\n    <div class=\"row bb-block bb-block--md\">\n      <div class=\"col-md-7\">\n        <label class=\"bb-text-bold\" [attr.for]=\"startDatePicker.id\">\n          <ng-container\n            i18n=\"\n              Schedule execution label|Label for an execution date in scheduling\n              component@@bb-schedule-ui.label.execution\"\n            >{hostRef.scheduleForm?.get('frequency')?.value?.value.toUpperCase(),\n            select, ONCE {Execute on} other {Start on}}\n          </ng-container>\n        </label>\n\n        <bb-input-datepicker-ui\n          #startDatePicker\n          [minDate]=\"hostRef.today\"\n          formControlName=\"startDate\"\n          data-role=\"execution-date-calendar\"\n        ></bb-input-datepicker-ui>\n\n        <bb-input-validation-message-ui\n          role=\"alert\"\n          [showErrors]=\"\n            hostRef.isInvalidControl(hostRef.scheduleForm.get('startDate'))\n          \"\n        >\n          <span\n            data-role=\"missing-schedule-execution-date\"\n            *ngIf=\"hostRef.scheduleForm.get('startDate').errors?.required\"\n            i18n=\"\n              Execution date required error text|Error required message for\n              Execution date input field@@bb-schedule.error.required.startDate\"\n          >\n            Execution date is required\n          </span>\n\n          <span\n            data-role=\"past-date-schedule-execution-date\"\n            *ngIf=\"hostRef.scheduleForm.get('startDate').errors?.pastDate\"\n            i18n=\"\n              Execution date past date error text |Error past date message for\n              Execution date input field@@bb-schedule.error.pastDate.startDate\"\n          >\n            Execution date cannot be in the past\n          </span>\n\n          <span\n            data-role=\"invalid-date-schedule-execution-date\"\n            *ngIf=\"\n              hostRef.scheduleForm.get('startDate').errors?.invalidDateFormat\n            \"\n            i18n=\"\n              Execution date invalid date error text |Error invalid date format\n              message for Execution date input\n              field@@bb-schedule.error.invalidDateFormat\"\n          >\n            Invalid date format\n          </span>\n        </bb-input-validation-message-ui>\n      </div>\n    </div>\n\n    <div class=\"row bb-block bb-block--md\">\n      <div class=\"col-md-7\">\n        <label\n          class=\"bb-text-bold\"\n          [attr.for]=\"frequencySelector.id\"\n          i18n=\"Frequency|Label for frequency@@bb-schedule-ui.frequency.label\"\n        >\n          Frequency\n        </label>\n\n        <bb-dropdown-single-select-ui\n          #frequencySelector\n          displayAttributePath=\"value\"\n          formControlName=\"frequency\"\n          data-role=\"frequency-selector\"\n        >\n          <bb-dropdown-single-select-option-ui\n            label=\"Once\"\n            data-role=\"frequency\"\n            [value]=\"hostRef.frequencies[0]\"\n            i18n-label=\"\n              Once|Once frequency type Label@@bb-schedule-ui.frequency.Once\"\n          ></bb-dropdown-single-select-option-ui>\n\n          <bb-dropdown-single-select-option-ui\n            label=\"Daily\"\n            data-role=\"frequency\"\n            [value]=\"hostRef.frequencies[1]\"\n            i18n-label=\"\n              Daily|Daily frequency type Label@@bb-schedule-ui.frequency.Daily\"\n          ></bb-dropdown-single-select-option-ui>\n\n          <bb-dropdown-single-select-option-ui\n            label=\"Weekly\"\n            data-role=\"frequency\"\n            [value]=\"hostRef.frequencies[2]\"\n            i18n-label=\"\n              Weekly|Weekly frequency type\n              Label@@bb-schedule-ui.frequency.Weekly\"\n          ></bb-dropdown-single-select-option-ui>\n\n          <bb-dropdown-single-select-option-ui\n            label=\"Biweekly\"\n            data-role=\"frequency\"\n            [value]=\"hostRef.frequencies[3]\"\n            i18n-label=\"\n              Biweekly|Biweekly frequency type\n              Label@@bb-schedule-ui.frequency.Biweekly\"\n          ></bb-dropdown-single-select-option-ui>\n\n          <bb-dropdown-single-select-option-ui\n            label=\"Monthly\"\n            data-role=\"frequency\"\n            [value]=\"hostRef.frequencies[4]\"\n            i18n-label=\"\n              Monthly|Monthly frequency type\n              Label@@bb-schedule-ui.frequency.Monthly\"\n          ></bb-dropdown-single-select-option-ui>\n\n          <bb-dropdown-single-select-option-ui\n            label=\"Quarterly\"\n            data-role=\"frequency\"\n            [value]=\"hostRef.frequencies[5]\"\n            i18n-label=\"\n              Quarterly|Quarterly frequency type\n              Label@@bb-schedule-ui.frequency.Quarterly\"\n          ></bb-dropdown-single-select-option-ui>\n\n          <bb-dropdown-single-select-option-ui\n            label=\"Annually\"\n            data-role=\"frequency\"\n            [value]=\"hostRef.frequencies[6]\"\n            i18n-label=\"\n              Annually|Annually frequency type\n              Label@@bb-schedule-ui.frequency.Annually\"\n          ></bb-dropdown-single-select-option-ui>\n        </bb-dropdown-single-select-ui>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-7\" [hidden]=\"hostRef.isSingleTransfer\">\n        <bb-input-radio-group-ui\n          label=\"End\"\n          data-role=\"radio-group\"\n          formControlName=\"endType\"\n          i18n-label=\"\n            Schedule ending section name|Label for the section containing inputs\n            that determine way of ending of the\n            schedule@@bb-schedule-ui.label.ending\"\n        >\n          <bb-input-radio-ui\n            [value]=\"hostRef.endTypes.never\"\n            [labelTemplate]=\"neverEndingSchedule\"\n          ></bb-input-radio-ui>\n\n          <bb-input-radio-ui\n            [value]=\"hostRef.endTypes.on\"\n            [labelTemplate]=\"onDateSchedule\"\n          ></bb-input-radio-ui>\n\n          <bb-input-radio-ui\n            [value]=\"hostRef.endTypes.after\"\n            [labelTemplate]=\"endingAfterSchedule\"\n          ></bb-input-radio-ui>\n        </bb-input-radio-group-ui>\n\n        <ng-template #neverEndingSchedule>\n          <span\n            class=\"bb-text-default\"\n            data-role=\"ending-never-selector\"\n            i18n=\"\n              Schedule never ends|Label for an option to never end the\n              schedule@@bb-schedule-ui.label.ending.never\"\n          >\n            Never\n          </span>\n        </ng-template>\n\n        <ng-template #onDateSchedule>\n          <div data-role=\"ending-on-selector\">\n            <div class=\"bb-stack\">\n              <div class=\"bb-stack__item\">\n                <span\n                  class=\"bb-text-default\"\n                  i18n=\"\n                    Schedule end date|Label for an option to end the schedule on\n                    a specific date@@bb-schedule-ui.label.ending.on\"\n                >\n                  On date\n                </span>\n              </div>\n\n              <div class=\"bb-stack__item bb-stack__item--fill\">\n                <bb-input-datepicker-ui\n                  [minDate]=\"hostRef.today\"\n                  aria-label=\"End date\"\n                  formControlName=\"endDate\"\n                  data-role=\"ending-end-date\"\n                  i18n-aria-label=\"\n                    Schedule end date date picker label|Aria label for end date\n                    schedule control@@bb-schedule-ui.label.end-date\"\n                  *ngIf=\"\n                    hostRef.scheduleForm.get('endDate').enabled &&\n                    hostRef.scheduleForm.get('endType').value ==\n                      hostRef.endTypes.on\n                  \"\n                ></bb-input-datepicker-ui>\n\n                <bb-input-validation-message-ui\n                  role=\"alert\"\n                  *ngIf=\"hostRef.scheduleForm.get('endDate') as control\"\n                  [showErrors]=\"hostRef.isInvalidControl(control)\"\n                >\n                  <span\n                    *ngIf=\"control.errors?.pastDate\"\n                    i18n=\"\n                      End date past date error text |Error past date message for\n                      End date input field@@bb-schedule.error.pastDate.endDate\"\n                    data-role=\"past-date-ending-end-date\"\n                  >\n                    End date cannot be in the past\n                  </span>\n                  <span\n                    *ngIf=\"control.errors?.required\"\n                    i18n=\"\n                      End date required error text|Error required message for\n                      End date input field@@bb-schedule.error.required.endDate\"\n                    data-role=\"missing-schedule-end-date\"\n                  >\n                    End date is required\n                  </span>\n                  <span\n                    *ngIf=\"control.errors?.invalidDateFormat\"\n                    i18n=\"\n                      End date invalid date error text |Error invalid date\n                      format message for End date input\n                      field@@bb-schedule.invalidDateFormat.endDate\"\n                    data-role=\"invalid-date-schedule-end-date\"\n                  >\n                    Invalid date format\n                  </span>\n                </bb-input-validation-message-ui>\n              </div>\n            </div>\n          </div>\n        </ng-template>\n\n        <ng-template #endingAfterSchedule>\n          <div data-role=\"ending-occurrences-selector\">\n            <div class=\"bb-stack\">\n              <div class=\"bb-stack__item\">\n                <span\n                  class=\"bb-text-default\"\n                  i18n=\"\n                    Schedule number of occurrences|Label for an option to end\n                    the schedule after some number of\n                    occurrences@@bb-schedule-ui.label.ending.after\"\n                >\n                  After\n                </span>\n              </div>\n\n              <div class=\"bb-stack__item bb-stack__item--fill\">\n                <div\n                  class=\"bb-stack\"\n                  *ngIf=\"\n                    hostRef.scheduleForm.get('repeat').enabled &&\n                    hostRef.scheduleForm.get('endType').value ==\n                      hostRef.endTypes.after\n                  \"\n                >\n                  <div class=\"bb-stack__item\">\n                    <bb-input-number-ui\n                      id=\"ending-occurrences\"\n                      formControlName=\"repeat\"\n                      [min]=\"hostRef.minOccurs\"\n                      [max]=\"hostRef.maxOccurs\"\n                      data-role=\"ending-occurrences\"\n                    ></bb-input-number-ui>\n                  </div>\n\n                  <div class=\"bb-stack__item\">\n                    <span\n                      class=\"bb-text-default\"\n                      i18n=\"\n                        Schedule occurrences text|Text to be appended after\n                        schedule end after some number of occurrences\n                        input@@bb-schedule-ui.label.ending.occurrences\"\n                    >\n                      occurrences\n                    </span>\n                  </div>\n                </div>\n\n                <bb-input-validation-message-ui\n                  role=\"alert\"\n                  [showErrors]=\"\n                    hostRef.item.endType === hostRef.endTypes.after &&\n                    hostRef.isInvalidControl(hostRef.scheduleForm.get('repeat'))\n                  \"\n                >\n                  <span\n                    data-role=\"ending-occurrences-too-few\"\n                    *ngIf=\"hostRef.scheduleForm.get('repeat').errors?.min\"\n                    i18n=\"\n                      Repeat less then min error text |Error min message for\n                      repeat input field@@bb-schedule.error.min.repeat\"\n                  >\n                    Value is below the minimum allowed occurrences ({{\n                      hostRef.minOccurs\n                    }})\n                  </span>\n\n                  <span\n                    data-role=\"ending-occurrences-too-many\"\n                    *ngIf=\"hostRef.scheduleForm.get('repeat').errors?.max\"\n                    i18n=\"\n                      Repeat more then max error text |Error max message for\n                      repeat input field@@bb-schedule.error.max.repeat\"\n                  >\n                    Value exceeds the maximum allowed occurrences ({{\n                      hostRef.maxOccurs\n                    }})\n                  </span>\n\n                  <span\n                    data-role=\"missing-ending-occurrences\"\n                    *ngIf=\"hostRef.scheduleForm.get('repeat').errors?.required\"\n                    i18n=\"\n                      Repeat required error text |Error required message for\n                      repeat input field@@bb-schedule.error.required.repeat\"\n                  >\n                    Value is required\n                  </span>\n                </bb-input-validation-message-ui>\n              </div>\n            </div>\n          </div>\n        </ng-template>\n      </div>\n    </div>\n  </div>\n</ng-template>\n\n<ng-container bbScheduleCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n", components: [{ type: i0.forwardRef(function () { return i1.InputDatepickerComponent; }), selector: "bb-input-datepicker-ui", inputs: ["rangeSelection", "rangeSelectionSplit", "clickOpen", "focusOpen", "placement", "datepickerDescribedby", "ariaLabelForButton", "minDate", "maxDate", "markDisabled", "icon", "iconSize", "iconColor", "btnColor", "ariaLabel", "navigation", "autocomplete", "firstDayOfWeek", "displayMonths", "placeholder", "overrideDateFormat"], outputs: ["focusedDate"] }, { type: i0.forwardRef(function () { return i2.InputValidationMessageComponent; }), selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i0.forwardRef(function () { return i3.DropdownSingleSelectComponent; }), selector: "bb-dropdown-single-select-ui", inputs: ["placeholder", "defaultOptionAsPlaceholder", "options", "displayAttributePath", "iconName", "compareWithFn"] }, { type: i0.forwardRef(function () { return i3.DropdownSingleSelectOptionComponent; }), selector: "bb-dropdown-single-select-option-ui", inputs: ["value", "label"] }, { type: i0.forwardRef(function () { return i4.InputRadioGroupComponent; }), selector: "bb-input-radio-group-ui", inputs: ["horizontal", "preselect", "name", "verticalAlign"] }, { type: i0.forwardRef(function () { return i4.InputRadioComponent; }), selector: "bb-input-radio-ui", inputs: ["labelTemplate", "labelTemplateContext", "value", "label", "aria-label", "aria-labelledby", "aria-describedby", "role", "aria-activedescendant", "aria-expanded", "aria-invalid", "aria-owns", "disabled"] }, { type: i0.forwardRef(function () { return i5.InputNumberComponent; }), selector: "bb-input-number-ui", inputs: ["placeholder", "max", "min", "step", "readonly", "autocomplete", "ariaLabel", "allowNonDigits", "allowNegativeSign"] }], directives: [{ type: i0.forwardRef(function () { return ScheduleCustomizableDirective; }), selector: "[bbScheduleCustomizable], [bbPayordInitiatePaymentScheduleCustomizable]" }, { type: i0.forwardRef(function () { return i6.NgControlStatusGroup; }), selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i0.forwardRef(function () { return i6.FormGroupDirective; }), selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i0.forwardRef(function () { return i1.MinDateValidatorDirective; }), selector: "bb-input-datepicker-ui[minDate]", inputs: ["minDate"] }, { type: i0.forwardRef(function () { return i6.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0.forwardRef(function () { return i6.FormControlName; }), selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i0.forwardRef(function () { return i7.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ScheduleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-schedule-ui',
                    templateUrl: './schedule.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }]; }, propDecorators: { frequencies: [{
                type: Input
            }], minOccurs: [{
                type: Input
            }], maxOccurs: [{
                type: Input
            }], scheduleForm: [{
                type: Input
            }], formSubmitted: [{
                type: Input
            }] } });
export class ScheduleCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ ScheduleCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ScheduleCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ ScheduleCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ScheduleCustomizableDirective, selector: "[bbScheduleCustomizable], [bbPayordInitiatePaymentScheduleCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ScheduleCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbScheduleCustomizable], [bbPayordInitiatePaymentScheduleCustomizable]',
                }]
        }] });
//# sourceMappingURL=schedule.component.js.map