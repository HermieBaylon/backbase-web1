import { Component, ChangeDetectionStrategy, Input, Output, EventEmitter, } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { ModalState } from '../../models';
import { BehaviorSubject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/modal";
import * as i2 from "@backbase/ui-ang/icon";
import * as i3 from "@backbase/ui-ang/header";
import * as i4 from "@backbase/ui-ang/input-text";
import * as i5 from "@backbase/ui-ang/input-validation-message";
import * as i6 from "@backbase/ui-ang/load-button";
import * as i7 from "@angular/forms";
import * as i8 from "@angular/common";
import * as i9 from "@backbase/ui-ang/button";
export class PaymentTemplateComponent {
    constructor() {
        this.modalOptions = {
            backdrop: 'static',
            keyboard: false,
        };
        /**
         * Saving template data flag.
         * Default value is false.
         */
        this.isSavingTemplate = false;
        /**
         * Close payment template modal event emitter
         */
        this.closeModal = new EventEmitter();
        /**
         * Open payment template modal event emitter
         */
        this.openModal = new EventEmitter();
        /**
         * Submit form event emitter
         */
        this.submitForm = new EventEmitter();
        this.states = ModalState;
        this.isSubmitted = false;
    }
    onOpen() {
        this.openModal.emit();
    }
    onClose() {
        this.closeModal.emit();
        this.isSubmitted = false;
    }
    onSubmit() {
        this.submitForm.emit();
        this.isSubmitted = true;
    }
}
/** @nocollapse */ PaymentTemplateComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentTemplateComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PaymentTemplateComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PaymentTemplateComponent, selector: "bb-payment-template-form", inputs: { modalState: "modalState", paymentTemplateForm: "paymentTemplateForm", isSavingTemplate: "isSavingTemplate" }, outputs: { closeModal: "closeModal", openModal: "openModal", submitForm: "submitForm" }, ngImport: i0, template: "<bb-modal-ui\n  [isOpen]=\"states.Preview === (modalState | async)\"\n  [modalOptions]=\"modalOptions\"\n>\n  <bb-modal-header-ui>\n    <ng-template bbCustomModalHeader>\n      <div class=\"bb-stack\">\n        <bb-icon-ui\n          class=\"bb-text-disabled bb-stack__item bb-stack__item--spacing-sm bb-text-support d-inline-block\"\n          name=\"insert-drive-file\"\n        >\n        </bb-icon-ui>\n        <bb-header-ui\n          class=\"bb-stack__item\"\n          headingType=\"h2\"\n          heading=\"Save as a template\"\n          i18n-heading=\"@@omni-payment-review-template-modal.title\"\n          [attr.data-role]=\"'payment-template-header'\"\n        ></bb-header-ui>\n      </div>\n    </ng-template>\n  </bb-modal-header-ui>\n\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody>\n      <div\n        class=\"bb-block bb-block--lg\"\n        data-role=\"payment-template-modal-text\"\n        i18n=\"@@omni-payment-review-template-modal.description\"\n      >\n        Type a name to the template in order to re-use it and manage it when\n        needed.\n      </div>\n      <form [formGroup]=\"paymentTemplateForm\" class=\"form-group\">\n        <label [for]=\"TemplateName.id\" class=\"bb-label\">\n          <span\n            id=\"name\"\n            i18n=\"@@omni-payment-review-template-modal.template-name.label\"\n            >Name of the template</span\n          >\n        </label>\n        <span\n          class=\"bb-text-support\"\n          i18n=\"\n            @@omni-payment-review-template-modal.template-name.required.label\"\n        >\n          (required)\n        </span>\n        <div class=\"bb-payment-template__form-container\">\n          <bb-input-text-ui\n            #TemplateName\n            [aria-labelledby]=\"'name'\"\n            formControlName=\"templateName\"\n            [maxLength]=\"50\"\n            [showCharCounter]=\"true\"\n            data-role=\"template-name-field\"\n          ></bb-input-text-ui>\n\n          <bb-input-validation-message-ui\n            data-role=\"initiate-payment-template-name-input-error\"\n            role=\"alert\"\n            [showErrors]=\"paymentTemplateForm?.get('templateName')?.invalid\"\n          >\n            <ng-container\n              *ngIf=\"\n                paymentTemplateForm?.get('templateName') as templateNameControl\n              \"\n            >\n              <span\n                data-role=\"required-template-name-error\"\n                i18n=\"\n                  @@omni-payment-review-template-modal.template-name.validation.required-error\"\n                *ngIf=\"\n                  templateNameControl.errors &&\n                  templateNameControl.errors['required'] &&\n                  isSubmitted\n                \"\n              >\n                Template name is required\n              </span>\n            </ng-container>\n          </bb-input-validation-message-ui>\n        </div>\n      </form>\n    </ng-template>\n  </bb-modal-body-ui>\n\n  <bb-modal-footer-ui>\n    <ng-template bbCustomModalFooter>\n      <div class=\"bb-button-bar\">\n        <bb-load-button-ui\n          [isLoading]=\"isSavingTemplate\"\n          color=\"primary\"\n          class=\"bb-button-bar__button\"\n          data-role=\"save-template-button\"\n          (click)=\"onSubmit()\"\n        >\n          <ng-container\n            i18n=\"@@omni-payment-review-template-modal.save-btn.label\"\n          >\n            Save\n          </ng-container>\n        </bb-load-button-ui>\n        <button\n          bbButton\n          color=\"link\"\n          class=\"bb-button-bar__button\"\n          data-role=\"cancel-template-button\"\n          (click)=\"onClose()\"\n        >\n          <ng-container\n            i18n=\"@@omni-payment-review-template-modal.cancel-btn.label\"\n          >\n            Cancel\n          </ng-container>\n        </button>\n      </div>\n    </ng-template>\n  </bb-modal-footer-ui>\n</bb-modal-ui>\n", components: [{ type: i1.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i1.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i3.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i1.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: i4.InputTextComponent, selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i5.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i1.ModalFooterComponent, selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }, { type: i6.LoadButtonComponent, selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }], directives: [{ type: i1.CustomModalHeaderDirective, selector: "ng-template[bbCustomModalHeader]" }, { type: i1.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i7.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i7.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i7.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i7.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i7.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.CustomModalFooterDirective, selector: "ng-template[bbCustomModalFooter]" }, { type: i9.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "async": i8.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentTemplateComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payment-template-form',
                    templateUrl: './create-payment-template-modal.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { modalState: [{
                type: Input
            }], paymentTemplateForm: [{
                type: Input
            }], isSavingTemplate: [{
                type: Input
            }], closeModal: [{
                type: Output
            }], openModal: [{
                type: Output
            }], submitForm: [{
                type: Output
            }] } });
//# sourceMappingURL=create-template-form-modal.component.js.map