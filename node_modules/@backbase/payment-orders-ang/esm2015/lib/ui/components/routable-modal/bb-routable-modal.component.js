import { Component, EventEmitter, Inject, Input, Output, } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { PUBSUB } from '@backbase/foundation-ang/web-sdk';
import { BehaviorSubject } from 'rxjs';
import { RoutableModalParamName } from '../../models/types';
import { RoutableModalService } from './bb-routable-modal-service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "./bb-routable-modal-service";
import * as i3 from "@backbase/ui-ang/modal";
import * as i4 from "@backbase/ui-ang/icon";
import * as i5 from "@backbase/ui-ang/header";
import * as i6 from "@angular/common";
import * as i7 from "@backbase/ui-ang/button";
export class RoutableModalComponent {
    constructor(route, modalService, eventBus) {
        this.route = route;
        this.modalService = modalService;
        this.eventBus = eventBus;
        /**
         * Flag to show close button
         */
        this.closeButton = false;
        /**
         * Modal window name (url friendly, without spaces)
         */
        this.modalWindowName = '';
        /**
         * Flag to show modal header
         */
        this.showHeader = true;
        /**
         * Modal Title
         */
        this.modalTitle = '';
        /**
         * Modal Title Icon
         */
        this.modalTitleIcon = '';
        /**
         * Modal heading type (h1-h6)
         */
        this.modalHeadingType = 'h2';
        /**
         * Event emitted when the modal visibility has changed
         */
        this.visibilityChange = new EventEmitter();
        this.isModalOpen$ = new BehaviorSubject(false);
        this.defaultModalOptions = {
            backdrop: 'static',
            keyboard: false,
            size: 'lg',
            animation: false,
            scrollable: false,
            windowClass: '',
        };
    }
    ngOnInit() {
        this.unsubscribeEvent = this.eventBus.subscribe(this.modalWindowName, () => {
            this.modalService.openModal(this.modalWindowName);
        });
        this.subscription = this.route.queryParams.subscribe((params) => {
            if (params[RoutableModalParamName] === this.modalWindowName &&
                !this.isModalOpen$.value) {
                this.openModal();
            }
            else if (this.isModalOpen$.value) {
                this.closeModal();
            }
        });
    }
    ngOnDestroy() {
        var _a, _b;
        (_a = this.subscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
        (_b = this.unsubscribeEvent) === null || _b === void 0 ? void 0 : _b.call(this);
    }
    openModal() {
        this.isModalOpen$.next(true);
        this.visibilityChange.emit(true);
    }
    closeModal() {
        this.isModalOpen$.next(false);
        this.visibilityChange.emit(false);
        this.modalService.closeModal();
    }
}
/** @nocollapse */ RoutableModalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RoutableModalComponent, deps: [{ token: i1.ActivatedRoute }, { token: i2.RoutableModalService }, { token: PUBSUB }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ RoutableModalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: RoutableModalComponent, selector: "bb-routable-modal", inputs: { modalOptions: "modalOptions", closeButton: "closeButton", modalWindowName: "modalWindowName", showHeader: "showHeader", modalTitle: "modalTitle", modalTitleIcon: "modalTitleIcon", modalHeadingType: "modalHeadingType" }, outputs: { visibilityChange: "visibilityChange" }, ngImport: i0, template: `
    <bb-modal-ui
      class="bb-modal-container"
      [isOpen]="isModalOpen$ | async"
      [modalOptions]="modalOptions || defaultModalOptions"
      (dismissCallback)="closeModal()"
    >
      <bb-modal-header-ui *ngIf="showHeader">
        <ng-template bbCustomModalHeader>
          <div class="bb-stack bb-stack--density-xs">
            <div class="bb-stack__item" *ngIf="modalTitleIcon">
              <bb-icon-ui
                [name]="modalTitleIcon"
                class="bb-text-disabled bb-modal-container__header-icon"
              >
              </bb-icon-ui>
            </div>

            <div class="bb-stack__item" *ngIf="modalTitle">
              <bb-header-ui
                class="bb-modal-container__header-title"
                [headingType]="modalHeadingType"
                [heading]="modalTitle"
              ></bb-header-ui>
            </div>

            <div
              class="bb-stack__item bb-stack__item--push-right"
              *ngIf="closeButton"
            >
              <button
                bbButton
                class="bb-modal-container__close-btn bb-text-support"
                circle="true"
                buttonSize="sm"
                color="unstyled"
                (click)="closeModal()"
                aria-label="Close modal dialog"
                i18n-aria-label="
                  Close template detail dialog@@modal-container.close-btn"
              >
                <bb-icon-ui color="muted" name="clear"></bb-icon-ui>
              </button>
            </div>
          </div>
        </ng-template>
      </bb-modal-header-ui>
      <bb-modal-body-ui>
        <ng-template bbCustomModalBody>
          <ng-content></ng-content>
        </ng-template>
      </bb-modal-body-ui>
    </bb-modal-ui>
  `, isInline: true, components: [{ type: i3.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i3.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i4.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i5.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i3.ModalBodyComponent, selector: "bb-modal-body-ui" }], directives: [{ type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.CustomModalHeaderDirective, selector: "ng-template[bbCustomModalHeader]" }, { type: i7.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i3.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }], pipes: { "async": i6.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RoutableModalComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-routable-modal',
                    template: `
    <bb-modal-ui
      class="bb-modal-container"
      [isOpen]="isModalOpen$ | async"
      [modalOptions]="modalOptions || defaultModalOptions"
      (dismissCallback)="closeModal()"
    >
      <bb-modal-header-ui *ngIf="showHeader">
        <ng-template bbCustomModalHeader>
          <div class="bb-stack bb-stack--density-xs">
            <div class="bb-stack__item" *ngIf="modalTitleIcon">
              <bb-icon-ui
                [name]="modalTitleIcon"
                class="bb-text-disabled bb-modal-container__header-icon"
              >
              </bb-icon-ui>
            </div>

            <div class="bb-stack__item" *ngIf="modalTitle">
              <bb-header-ui
                class="bb-modal-container__header-title"
                [headingType]="modalHeadingType"
                [heading]="modalTitle"
              ></bb-header-ui>
            </div>

            <div
              class="bb-stack__item bb-stack__item--push-right"
              *ngIf="closeButton"
            >
              <button
                bbButton
                class="bb-modal-container__close-btn bb-text-support"
                circle="true"
                buttonSize="sm"
                color="unstyled"
                (click)="closeModal()"
                aria-label="Close modal dialog"
                i18n-aria-label="
                  Close template detail dialog@@modal-container.close-btn"
              >
                <bb-icon-ui color="muted" name="clear"></bb-icon-ui>
              </button>
            </div>
          </div>
        </ng-template>
      </bb-modal-header-ui>
      <bb-modal-body-ui>
        <ng-template bbCustomModalBody>
          <ng-content></ng-content>
        </ng-template>
      </bb-modal-body-ui>
    </bb-modal-ui>
  `,
                }]
        }], ctorParameters: function () { return [{ type: i1.ActivatedRoute }, { type: i2.RoutableModalService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [PUBSUB]
                }] }]; }, propDecorators: { modalOptions: [{
                type: Input
            }], closeButton: [{
                type: Input
            }], modalWindowName: [{
                type: Input
            }], showHeader: [{
                type: Input
            }], modalTitle: [{
                type: Input
            }], modalTitleIcon: [{
                type: Input
            }], modalHeadingType: [{
                type: Input
            }], visibilityChange: [{
                type: Output
            }] } });
//# sourceMappingURL=bb-routable-modal.component.js.map