import { Component, ChangeDetectionStrategy, Input, Output, EventEmitter, } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/modal";
import * as i2 from "@backbase/ui-ang/header";
import * as i3 from "@backbase/ui-ang/textarea";
import * as i4 from "@angular/common";
import * as i5 from "@angular/forms";
import * as i6 from "@backbase/ui-ang/button";
export class ConfirmationDialogComponent {
    constructor() {
        this.modalOptions = {
            backdrop: 'static',
            keyboard: false,
        };
        this.comment = '';
        /**
         * The button color for confirm button
         * Default value is `primary`.
         */
        this.confirmButtonColor = 'primary';
        /**
         * The button color for cancel button
         * Default value is `link`.
         */
        this.cancelButtonColor = 'link';
        /**
         * Indicator for confirmation dialog open state.
         * Default value is `false`.
         */
        this.isOpen = false;
        /**
         * Changes will be triggered on confirmAction event emit.
         */
        this.confirm = new EventEmitter();
        /**
         * Changes will be triggered on cancel event emit.
         */
        this.cancel = new EventEmitter();
        /**
         * Show the field for the comment
         * Default value is `false`.
         */
        this.attachComment = false;
        /**
         * Text for comment field label,
         * Default value is `Add comment`.
         */
        this.commentFieldLabel = $localize `:@@bb-confirmation-dialog.comment.label:Add comment`;
    }
    resetComment() {
        if (this.attachComment) {
            this.comment = '';
        }
    }
    onCancelAction() {
        this.cancel.emit();
        this.resetComment();
    }
    onConfirmAction() {
        var _a, _b;
        const _comment = this.comment.trim();
        let emitValue = (_a = this.confirmActionPayload) === null || _a === void 0 ? void 0 : _a.payload;
        if (this.attachComment && !!_comment) {
            emitValue = {
                payload: (_b = this.confirmActionPayload) === null || _b === void 0 ? void 0 : _b.payload,
                comment: _comment,
            };
        }
        this.confirm.emit(emitValue);
        this.resetComment();
    }
}
/** @nocollapse */ ConfirmationDialogComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ConfirmationDialogComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ ConfirmationDialogComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ConfirmationDialogComponent, selector: "bb-confirmation-dialog", inputs: { confirmButtonColor: "confirmButtonColor", cancelButtonColor: "cancelButtonColor", isOpen: "isOpen", confirmActionPayload: "confirmActionPayload", attachComment: "attachComment", commentFieldLabel: "commentFieldLabel" }, outputs: { confirm: "confirm", cancel: "cancel" }, ngImport: i0, template: "<bb-modal-ui [isOpen]=\"isOpen\" [modalOptions]=\"modalOptions\">\n  <bb-modal-header-ui>\n    <ng-template bbCustomModalHeader>\n      <span #headerContent class=\"d-none\" aria-hidden=\"true\">\n        <ng-content select=\"[title]\"></ng-content>\n      </span>\n      <bb-header-ui\n        headingType=\"h2\"\n        [heading]=\"headerContent.textContent\"\n        [attr.data-role]=\"'confirmation-header'\"\n      ></bb-header-ui>\n    </ng-template>\n  </bb-modal-header-ui>\n\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody>\n      <div [ngClass]=\"{ 'bb-block bb-block--md': attachComment }\">\n        <ng-content select=\"[body]\"></ng-content>\n      </div>\n\n      <ng-container *ngIf=\"attachComment && isOpen\">\n        <label\n          [for]=\"commentField.id\"\n          i18n=\"@@bb-confirmation-dialog.comment\"\n          >{{ commentFieldLabel }}</label\n        >\n        <span class=\"bb-text-support\">\n          (<ng-container i18n=\"@@bb-confirmation-dialog.comment.optional-label\"\n            >Optional</ng-container\n          >)\n        </span>\n        <bb-textarea-ui\n          #commentField\n          wrap=\"hard\"\n          [rows]=\"3\"\n          [cols]=\"50\"\n          [minLength]=\"3\"\n          [maxLength]=\"140\"\n          [(ngModel)]=\"comment\"\n          showCharCounter=\"true\"\n          data-role=\"confirmation-comment\"\n        ></bb-textarea-ui>\n      </ng-container>\n    </ng-template>\n  </bb-modal-body-ui>\n\n  <bb-modal-footer-ui>\n    <ng-template bbCustomModalFooter>\n      <div class=\"bb-button-bar\">\n        <button\n          bbButton\n          [color]=\"confirmButtonColor\"\n          class=\"bb-button-bar__button\"\n          (click)=\"onConfirmAction()\"\n          [attr.data-role]=\"'confirm-action-btn'\"\n        >\n          <ng-content select=\"[confirmActionName]\"></ng-content>\n        </button>\n\n        <button\n          bbButton\n          (click)=\"onCancelAction()\"\n          [color]=\"cancelButtonColor\"\n          class=\"bb-button-bar__button\"\n          [attr.data-role]=\"'cancel-action-btn'\"\n        >\n          <ng-content select=\"[cancelActionName]\"></ng-content>\n        </button>\n      </div>\n    </ng-template>\n  </bb-modal-footer-ui>\n</bb-modal-ui>\n", components: [{ type: i1.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i1.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i2.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i1.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: i3.TextareaComponent, selector: "bb-textarea-ui", inputs: ["rows", "cols", "placeholder", "maxLength", "minLength", "readonly", "showCharCounter", "wrap"] }, { type: i1.ModalFooterComponent, selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }], directives: [{ type: i1.CustomModalHeaderDirective, selector: "ng-template[bbCustomModalHeader]" }, { type: i1.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i1.CustomModalFooterDirective, selector: "ng-template[bbCustomModalFooter]" }, { type: i6.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ConfirmationDialogComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-confirmation-dialog',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    templateUrl: 'confirmation-dialog.component.html',
                }]
        }], propDecorators: { confirmButtonColor: [{
                type: Input
            }], cancelButtonColor: [{
                type: Input
            }], isOpen: [{
                type: Input
            }], confirmActionPayload: [{
                type: Input
            }], confirm: [{
                type: Output
            }], cancel: [{
                type: Output
            }], attachComment: [{
                type: Input
            }], commentFieldLabel: [{
                type: Input
            }] } });
//# sourceMappingURL=confirmation-dialog.component.js.map