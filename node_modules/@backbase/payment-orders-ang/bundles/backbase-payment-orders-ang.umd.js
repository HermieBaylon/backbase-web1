(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/localize/init'), require('@angular/forms'), require('rxjs'), require('rxjs/operators'), require('@angular/core'), require('@backbase/ui-ang/iban-lib'), require('@backbase/data-ang/payment-order'), require('@angular/common'), require('@backbase/ui-ang/icon'), require('@backbase/ui-ang/input-text'), require('@backbase/ui-ang/input-validation-message'), require('@backbase/ui-ang/dropdown-single-select'), require('@backbase/ui-ang/button'), require('@backbase/ui-ang/tooltip-directive'), require('@backbase/ui-ang/search-box'), require('@backbase/ui-ang/empty-state'), require('@ng-bootstrap/ng-bootstrap'), require('@backbase/ui-ang/keyboard-click-directive'), require('bignumber.js'), require('@backbase/ui-ang/amount'), require('@backbase/ui-ang/avatar'), require('@backbase/ui-ang/modal'), require('@backbase/ui-ang/header'), require('@backbase/ui-ang/load-button'), require('@backbase/ui-ang/ellipsis'), require('@backbase/foundation-ang/web-sdk'), require('@angular/router'), require('@backbase/foundation-ang/core'), require('@backbase/ui-ang/dropdown-menu'), require('@backbase/ui-ang/infinite-scroll'), require('@backbase/ui-ang/loading-indicator'), require('@backbase/ui-ang/highlight'), require('@angular/cdk/scrolling'), require('@backbase/ui-ang/focus'), require('@backbase/ui-ang/table'), require('@backbase/ui-ang/badge'), require('@backbase/ui-ang/notification'), require('@backbase/ui-ang/textarea'), require('@backbase/ui-ang/product-selector'), require('@backbase/ui-ang/pagination'), require('@backbase/ui-ang/dropdown-multi-select'), require('@backbase/ui-ang/input-number'), require('@backbase/ui-ang/input-datepicker'), require('@backbase/ui-ang/input-radio-group'), require('@backbase/data-ang/payment-template'), require('@backbase/data-ang/contact-manager'), require('@backbase/data-ang/arrangements'), require('@backbase/data-ang/accesscontrol'), require('@backbase/data-ang/payment-order-a2a'), require('@angular/common/http'), require('@backbase/data-ang/payment-order-options'), require('@backbase/data-ang/payment-batch'), require('@backbase/data-ang/payment-batch-template'), require('@backbase/data-ang/stop-checks')) :
    typeof define === 'function' && define.amd ? define('@backbase/payment-orders-ang', ['exports', '@angular/localize/init', '@angular/forms', 'rxjs', 'rxjs/operators', '@angular/core', '@backbase/ui-ang/iban-lib', '@backbase/data-ang/payment-order', '@angular/common', '@backbase/ui-ang/icon', '@backbase/ui-ang/input-text', '@backbase/ui-ang/input-validation-message', '@backbase/ui-ang/dropdown-single-select', '@backbase/ui-ang/button', '@backbase/ui-ang/tooltip-directive', '@backbase/ui-ang/search-box', '@backbase/ui-ang/empty-state', '@ng-bootstrap/ng-bootstrap', '@backbase/ui-ang/keyboard-click-directive', 'bignumber.js', '@backbase/ui-ang/amount', '@backbase/ui-ang/avatar', '@backbase/ui-ang/modal', '@backbase/ui-ang/header', '@backbase/ui-ang/load-button', '@backbase/ui-ang/ellipsis', '@backbase/foundation-ang/web-sdk', '@angular/router', '@backbase/foundation-ang/core', '@backbase/ui-ang/dropdown-menu', '@backbase/ui-ang/infinite-scroll', '@backbase/ui-ang/loading-indicator', '@backbase/ui-ang/highlight', '@angular/cdk/scrolling', '@backbase/ui-ang/focus', '@backbase/ui-ang/table', '@backbase/ui-ang/badge', '@backbase/ui-ang/notification', '@backbase/ui-ang/textarea', '@backbase/ui-ang/product-selector', '@backbase/ui-ang/pagination', '@backbase/ui-ang/dropdown-multi-select', '@backbase/ui-ang/input-number', '@backbase/ui-ang/input-datepicker', '@backbase/ui-ang/input-radio-group', '@backbase/data-ang/payment-template', '@backbase/data-ang/contact-manager', '@backbase/data-ang/arrangements', '@backbase/data-ang/accesscontrol', '@backbase/data-ang/payment-order-a2a', '@angular/common/http', '@backbase/data-ang/payment-order-options', '@backbase/data-ang/payment-batch', '@backbase/data-ang/payment-batch-template', '@backbase/data-ang/stop-checks'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["payment-orders-ang"] = {}), global.ng.localize.init, global.ng.forms, global.rxjs, global.rxjs.operators, global.ng.core, global.ibanLib, global.i1, global.ng.common, global.i1$2, global.i3, global.i4, global.i3$1, global.i7, global.i9, global.i2$1, global.i5, global.i6, global.i10, global.BigNumber, global.i2$2, global.i1$3, global.i1$4, global.i3$2, global.i6$1, global.i1$5, global.webSdk, global.ng.router, global.i1$7, global.i2$3, global.i6$2, global.i8, global.i3$3, global.ng.cdk.scrolling, global.focus, global.i1$9, global.i1$a, global.i1$b, global.i3$4, global.productSelector, global.pagination, global.i2$4, global.i3$5, global.i1$c, global.i4$1, global.i2$5, global.i3$6, global.i4$2, global.i5$1, global.i7$1, global.ng.common.http, global.i1$d, global.i1$e, global.i2$6, global.i2$7));
})(this, (function (exports, init, i1$1, rxjs, operators, i0, ibanLib, i1, i2, i1$2, i3, i4, i3$1, i7, i9, i2$1, i5, i6, i10, BigNumber, i2$2, i1$3, i1$4, i3$2, i6$1, i1$5, webSdk, i1$6, i1$7, i2$3, i6$2, i8, i3$3, i1$8, focus, i1$9, i1$a, i1$b, i3$4, productSelector, pagination, i2$4, i3$5, i1$c, i4$1, i2$5, i3$6, i4$2, i5$1, i7$1, http, i1$d, i1$e, i2$6, i2$7) { 'use strict';

    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i1__namespace$1 = /*#__PURE__*/_interopNamespace(i1$1);
    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace$b = /*#__PURE__*/_interopNamespace(i1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1$2);
    var i3__namespace = /*#__PURE__*/_interopNamespace(i3);
    var i4__namespace = /*#__PURE__*/_interopNamespace(i4);
    var i3__namespace$1 = /*#__PURE__*/_interopNamespace(i3$1);
    var i7__namespace = /*#__PURE__*/_interopNamespace(i7);
    var i9__namespace = /*#__PURE__*/_interopNamespace(i9);
    var i2__namespace$1 = /*#__PURE__*/_interopNamespace(i2$1);
    var i5__namespace = /*#__PURE__*/_interopNamespace(i5);
    var i6__namespace = /*#__PURE__*/_interopNamespace(i6);
    var i10__namespace = /*#__PURE__*/_interopNamespace(i10);
    var BigNumber__default = /*#__PURE__*/_interopDefaultLegacy(BigNumber);
    var i2__namespace$2 = /*#__PURE__*/_interopNamespace(i2$2);
    var i1__namespace$2 = /*#__PURE__*/_interopNamespace(i1$3);
    var i1__namespace$3 = /*#__PURE__*/_interopNamespace(i1$4);
    var i3__namespace$2 = /*#__PURE__*/_interopNamespace(i3$2);
    var i6__namespace$1 = /*#__PURE__*/_interopNamespace(i6$1);
    var i1__namespace$4 = /*#__PURE__*/_interopNamespace(i1$5);
    var i1__namespace$5 = /*#__PURE__*/_interopNamespace(i1$6);
    var i1__namespace$6 = /*#__PURE__*/_interopNamespace(i1$7);
    var i2__namespace$3 = /*#__PURE__*/_interopNamespace(i2$3);
    var i6__namespace$2 = /*#__PURE__*/_interopNamespace(i6$2);
    var i8__namespace = /*#__PURE__*/_interopNamespace(i8);
    var i3__namespace$3 = /*#__PURE__*/_interopNamespace(i3$3);
    var i1__namespace$7 = /*#__PURE__*/_interopNamespace(i1$8);
    var i1__namespace$8 = /*#__PURE__*/_interopNamespace(i1$9);
    var i1__namespace$9 = /*#__PURE__*/_interopNamespace(i1$a);
    var i1__namespace$a = /*#__PURE__*/_interopNamespace(i1$b);
    var i3__namespace$4 = /*#__PURE__*/_interopNamespace(i3$4);
    var i2__namespace$4 = /*#__PURE__*/_interopNamespace(i2$4);
    var i3__namespace$5 = /*#__PURE__*/_interopNamespace(i3$5);
    var i1__namespace$c = /*#__PURE__*/_interopNamespace(i1$c);
    var i4__namespace$1 = /*#__PURE__*/_interopNamespace(i4$1);
    var i2__namespace$5 = /*#__PURE__*/_interopNamespace(i2$5);
    var i3__namespace$6 = /*#__PURE__*/_interopNamespace(i3$6);
    var i4__namespace$2 = /*#__PURE__*/_interopNamespace(i4$2);
    var i5__namespace$1 = /*#__PURE__*/_interopNamespace(i5$1);
    var i7__namespace$1 = /*#__PURE__*/_interopNamespace(i7$1);
    var i1__namespace$d = /*#__PURE__*/_interopNamespace(i1$d);
    var i1__namespace$e = /*#__PURE__*/_interopNamespace(i1$e);
    var i2__namespace$6 = /*#__PURE__*/_interopNamespace(i2$6);
    var i2__namespace$7 = /*#__PURE__*/_interopNamespace(i2$7);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    exports.AccessContextScope = void 0;
    (function (AccessContextScope) {
        AccessContextScope["USER"] = "USER";
        AccessContextScope["SA"] = "SA";
        AccessContextScope["LE"] = "LE";
    })(exports.AccessContextScope || (exports.AccessContextScope = {}));
    exports.PaymentComponents = void 0;
    (function (PaymentComponents) {
        PaymentComponents["text"] = "text";
        PaymentComponents["date"] = "date";
        PaymentComponents["phone"] = "phone";
        PaymentComponents["number"] = "number";
        PaymentComponents["textarea"] = "textarea";
        PaymentComponents["address"] = "address";
        PaymentComponents["select"] = "select";
        PaymentComponents["radio"] = "radio";
        PaymentComponents["checkbox"] = "checkbox";
        PaymentComponents["debitAccountSelector"] = "debitAccountSelector";
        PaymentComponents["countrySelector"] = "countrySelector";
        PaymentComponents["sanctionedCountrySelector"] = "sanctionedCountrySelector";
        PaymentComponents["beneficiarySelector"] = "beneficiarySelector";
        PaymentComponents["selectPaymentOption"] = "selectPaymentOption";
        PaymentComponents["paymentCost"] = "paymentCost";
        PaymentComponents["chargeBearer"] = "chargeBearer";
        PaymentComponents["schedule"] = "schedule";
        PaymentComponents["amount"] = "amount";
        PaymentComponents["sanctionedCurrencyAmount"] = "sanctionedCurrencyAmount";
        PaymentComponents["switch"] = "switch";
        PaymentComponents["internalAccountSelector"] = "internalAccountSelector";
        PaymentComponents["compactAmount"] = "compactAmount";
        PaymentComponents["scheduleHeader"] = "scheduleHeader";
        PaymentComponents["buttonGroup"] = "buttonGroup";
        PaymentComponents["multiPaymentCard"] = "multiPaymentCard";
        PaymentComponents["creditDebitSelector"] = "creditDebitSelector";
        PaymentComponents["internalAmountOptions"] = "internalAmountOptions";
        PaymentComponents["header"] = "header";
        PaymentComponents["purposeOfPayment"] = "purposeOfPayment";
        PaymentComponents["alert"] = "alert";
        PaymentComponents["scheduleSwitch"] = "scheduleSwitch";
        PaymentComponents["beneficiaryGroupHeader"] = "beneficiaryGroupHeader";
        PaymentComponents["multiPaymentAccountSelector"] = "multiPaymentAccountSelector";
        PaymentComponents["contactSelector"] = "contactSelector";
        PaymentComponents["accountSelector"] = "accountSelector";
    })(exports.PaymentComponents || (exports.PaymentComponents = {}));
    exports.AddressType = void 0;
    (function (AddressType) {
        AddressType["beneficiary"] = "beneficiary";
        AddressType["beneficiary bank"] = "beneficiary bank";
        AddressType["correspondent bank"] = "correspondent bank";
        AddressType["intermediary bank"] = "intermediary bank";
    })(exports.AddressType || (exports.AddressType = {}));
    exports.TemplateModeType = void 0;
    (function (TemplateModeType) {
        TemplateModeType["CREATE"] = "CREATE";
        TemplateModeType["EDIT"] = "EDIT";
    })(exports.TemplateModeType || (exports.TemplateModeType = {}));
    exports.EditModeTypes = void 0;
    (function (EditModeTypes) {
        EditModeTypes["EDIT_TEMPLATE"] = "EDIT_TEMPLATE";
        EditModeTypes["EDIT_PAYMENT"] = "EDIT_PAYMENT";
    })(exports.EditModeTypes || (exports.EditModeTypes = {}));
    exports.PaymentMode = void 0;
    (function (PaymentMode) {
        PaymentMode["EDIT_PAYMENT"] = "EDIT_PAYMENT";
        PaymentMode["CREATE_PAYMENT"] = "CREATE_PAYMENT";
        PaymentMode["COPY_PAYMENT"] = "COPY_PAYMENT";
        PaymentMode["EDIT_TEMPLATE"] = "EDIT_TEMPLATE";
        PaymentMode["CREATE_TEMPLATE"] = "CREATE_TEMPLATE";
    })(exports.PaymentMode || (exports.PaymentMode = {}));
    exports.ContactScheme = void 0;
    (function (ContactScheme) {
        ContactScheme["accountNumber"] = "accountNumber";
        ContactScheme["phoneNumber"] = "phoneNumber";
        ContactScheme["email"] = "email";
    })(exports.ContactScheme || (exports.ContactScheme = {}));
    exports.ReviewScreens = void 0;
    (function (ReviewScreens) {
        ReviewScreens[ReviewScreens["ADAPTED"] = 0] = "ADAPTED";
        ReviewScreens[ReviewScreens["DEFAULT"] = 1] = "DEFAULT";
    })(exports.ReviewScreens || (exports.ReviewScreens = {}));
    exports.Scheme = void 0;
    (function (Scheme) {
        Scheme["IBAN"] = "IBAN";
        Scheme["BBAN"] = "BBAN";
        Scheme["ID"] = "ID";
    })(exports.Scheme || (exports.Scheme = {}));
    exports.ProductKinds = void 0;
    (function (ProductKinds) {
        ProductKinds["currentAccount"] = "Current Account";
        ProductKinds["savingsAccount"] = "Savings Account";
        ProductKinds["creditCard"] = "Credit Card";
        ProductKinds["debitCard"] = "Debit Card";
        ProductKinds["loanAccount"] = "Loan";
        ProductKinds["connectedAccounts"] = "Connected Account";
        ProductKinds["investmentAccount"] = "Investment Account";
    })(exports.ProductKinds || (exports.ProductKinds = {}));
    exports.AccountBalances = void 0;
    (function (AccountBalances) {
        AccountBalances["available"] = "availableBalance";
        AccountBalances["current"] = "bookedBalance";
        AccountBalances["creditLimit"] = "creditLimit";
        AccountBalances["outstandingPrincipalAmount"] = "outstandingPrincipalAmount";
    })(exports.AccountBalances || (exports.AccountBalances = {}));
    exports.InitiatePaymentHeaderStates = void 0;
    (function (InitiatePaymentHeaderStates) {
        InitiatePaymentHeaderStates["FORM"] = "FORM";
        InitiatePaymentHeaderStates["REVIEW"] = "REVIEW";
        InitiatePaymentHeaderStates["SUBMITTED"] = "SUBMITTED";
    })(exports.InitiatePaymentHeaderStates || (exports.InitiatePaymentHeaderStates = {}));

    exports.PaymentBaseFields = void 0;
    (function (PaymentBaseFields) {
        PaymentBaseFields["initiator"] = "initiator";
        PaymentBaseFields["counterparty"] = "counterparty";
        PaymentBaseFields["remittanceInfo"] = "remittanceInfo";
        PaymentBaseFields["schedule"] = "schedule";
        PaymentBaseFields["additions"] = "additions";
    })(exports.PaymentBaseFields || (exports.PaymentBaseFields = {}));
    exports.PaymentOptionFields = void 0;
    (function (PaymentOptionFields) {
        PaymentOptionFields["selectPaymentOption"] = "selectPaymentOption";
        PaymentOptionFields["paymentCost"] = "paymentCost";
        PaymentOptionFields["chargeBearer"] = "chargeBearer";
        PaymentOptionFields["chargeBearerOptions"] = "chargeBearerOptions";
        PaymentOptionFields["transferFee"] = "transferFee";
        PaymentOptionFields["exchangeRate"] = "exchangeRate";
        PaymentOptionFields["inputFormFromSettings"] = "inputFormFromSettings";
        PaymentOptionFields["paymentTypeName"] = "paymentTypeName";
    })(exports.PaymentOptionFields || (exports.PaymentOptionFields = {}));
    exports.InitiatorFields = void 0;
    (function (InitiatorFields) {
        InitiatorFields["initiatorAccountGroup"] = "debitorAccount";
        InitiatorFields["id"] = "id";
        InitiatorFields["name"] = "name";
        InitiatorFields["alias"] = "alias";
        InitiatorFields["accountNumber"] = "accountNumber";
        InitiatorFields["accountType"] = "accountType";
        InitiatorFields["currency"] = "currency";
    })(exports.InitiatorFields || (exports.InitiatorFields = {}));
    exports.AccountField = void 0;
    (function (AccountField) {
        AccountField["id"] = "id";
        AccountField["name"] = "name";
        AccountField["accountNumber"] = "accountNumber";
        AccountField["accountType"] = "accountType";
        AccountField["currency"] = "currency";
        AccountField["bankBranchCode"] = "bankBranchCode";
        AccountField["balance"] = "balance";
        AccountField["number"] = "number";
    })(exports.AccountField || (exports.AccountField = {}));
    exports.CounterPartyFields = void 0;
    (function (CounterPartyFields) {
        CounterPartyFields["counterPartyAccountGroup"] = "creditorAccount";
        CounterPartyFields["standardEntryClass"] = "entryClass";
        CounterPartyFields["creditor"] = "creditor";
        CounterPartyFields["creditorBank"] = "creditorBank";
        CounterPartyFields["bankName"] = "bankName";
        CounterPartyFields["bic"] = "bic";
        CounterPartyFields["bankBranchCode"] = "bankBranchCode";
        CounterPartyFields["correspondentBank"] = "correspondentBank";
        CounterPartyFields["intermediaryBank"] = "intermediaryBank";
        CounterPartyFields["schemeName"] = "schemeName";
        CounterPartyFields["recipientId"] = "recipientId";
        CounterPartyFields["accountType"] = "accountType";
        CounterPartyFields["accountNumber"] = "accountNumber";
        CounterPartyFields["name"] = "name";
        CounterPartyFields["alias"] = "alias";
        CounterPartyFields["id"] = "id";
        CounterPartyFields["postalAddress"] = "postalAddress";
        CounterPartyFields["messageToBank"] = "messageToBank";
        CounterPartyFields["remittanceInformation"] = "remittanceInformation";
        CounterPartyFields["targetCurrency"] = "targetCurrency";
        CounterPartyFields["endToEndIdentification"] = "endToEndIdentification";
        CounterPartyFields["mandateIdentifier"] = "mandateIdentifier";
        CounterPartyFields["role"] = "role";
        CounterPartyFields["selectedContact"] = "selectedContact";
        CounterPartyFields["counterpartyAccountAdditions"] = "counterpartyAccountAdditions";
        CounterPartyFields["additions"] = "additions";
        CounterPartyFields["country"] = "country";
        CounterPartyFields["saveNewContact"] = "saveNewContact";
        CounterPartyFields["enableAdditionalBankDetails"] = "enableAdditionalBankDetails";
    })(exports.CounterPartyFields || (exports.CounterPartyFields = {}));
    exports.PaymentTemplateFields = void 0;
    (function (PaymentTemplateFields) {
        PaymentTemplateFields["templateName"] = "templateName";
        PaymentTemplateFields["paymentTemplateId"] = "paymentTemplateId";
    })(exports.PaymentTemplateFields || (exports.PaymentTemplateFields = {}));
    exports.RemittanceInfoFields = void 0;
    (function (RemittanceInfoFields) {
        RemittanceInfoFields["amountCurrencyGroup"] = "amountGroup";
        RemittanceInfoFields["amount"] = "amount";
        RemittanceInfoFields["currency"] = "currency";
        RemittanceInfoFields["urgent"] = "urgent";
        RemittanceInfoFields["paymentReference"] = "paymentReference";
        RemittanceInfoFields["description"] = "description";
        RemittanceInfoFields["amountOptions"] = "amountOptions";
        RemittanceInfoFields["amountOptionLabel"] = "amountOptionLabel";
        RemittanceInfoFields["purposeOfPayment"] = "purposeOfPayment";
    })(exports.RemittanceInfoFields || (exports.RemittanceInfoFields = {}));
    exports.ScheduleFields = void 0;
    (function (ScheduleFields) {
        ScheduleFields["scheduleGroup"] = "scheduleGroup";
        ScheduleFields["frequency"] = "frequency";
        ScheduleFields["endType"] = "endType";
        ScheduleFields["every"] = "every";
        ScheduleFields["on"] = "on";
        ScheduleFields["startDate"] = "startDate";
        ScheduleFields["endDate"] = "endDate";
        ScheduleFields["repeat"] = "repeat";
        ScheduleFields["frequencySwitch"] = "frequencySwitch";
        ScheduleFields["scheduleInfo"] = "scheduleInfo";
    })(exports.ScheduleFields || (exports.ScheduleFields = {}));
    exports.HiddenFields = void 0;
    (function (HiddenFields) {
        HiddenFields["isManualEdit"] = "isManualEdit";
        HiddenFields["isClosedPayment"] = "isClosedPayment";
        HiddenFields["enableBeneficiary"] = "enableBeneficiary";
        HiddenFields["beneficiaryAccountName"] = "beneficiaryAccountName";
        HiddenFields["showSaveNewContact"] = "showSaveNewContact";
        HiddenFields["selectedBeneficiary"] = "selectedBeneficiary";
        HiddenFields["hideBeneficiaryFields"] = "hideBeneficiaryFields";
        HiddenFields["defaultCountry"] = "defaultCountry";
        HiddenFields["isPaymentCopy"] = "isPaymentCopy";
        HiddenFields["isDebitPayment"] = "isDebitPayment";
        HiddenFields["defaultBankCodeSetting"] = "defaultBankCodeSetting";
        HiddenFields["sanctionedCountries"] = "sanctionedCountries";
    })(exports.HiddenFields || (exports.HiddenFields = {}));
    exports.PaymentFormFieldHooks = void 0;
    (function (PaymentFormFieldHooks) {
        PaymentFormFieldHooks["onInit"] = "onInit";
        PaymentFormFieldHooks["onDestroy"] = "onDestroy";
    })(exports.PaymentFormFieldHooks || (exports.PaymentFormFieldHooks = {}));
    exports.PaymentHooks = void 0;
    (function (PaymentHooks) {
        PaymentHooks["onInit"] = "onInit";
        PaymentHooks["onDestroy"] = "onDestroy";
        PaymentHooks["onSave"] = "onSave";
        PaymentHooks["onSubmit"] = "onSubmit";
    })(exports.PaymentHooks || (exports.PaymentHooks = {}));
    /**
     * @deprecated Will be removed in widget collection v3.11.0
     */
    exports.MultiPaymentHooks = void 0;
    (function (MultiPaymentHooks) {
        MultiPaymentHooks["onClick"] = "onClick";
        MultiPaymentHooks["onBlur"] = "onBlur";
    })(exports.MultiPaymentHooks || (exports.MultiPaymentHooks = {}));
    /**
     * @deprecated Will be removed in widget collection v3.11.0
     */
    exports.StepperAction = void 0;
    (function (StepperAction) {
        StepperAction["NEXT"] = "next";
        StepperAction["BACK"] = "back";
        StepperAction["SUBMIT"] = "submit";
    })(exports.StepperAction || (exports.StepperAction = {}));
    /**
     * @deprecated Will be removed in widget collection v3.11.0
     */
    exports.MultiPaymentFormCardFields = void 0;
    (function (MultiPaymentFormCardFields) {
        MultiPaymentFormCardFields["counterpartyName"] = "counterpartyName";
        MultiPaymentFormCardFields["amount"] = "amount";
        MultiPaymentFormCardFields["description"] = "description";
    })(exports.MultiPaymentFormCardFields || (exports.MultiPaymentFormCardFields = {}));
    /**
     * @deprecated Will be removed in widget collection v3.11.0
     */
    exports.MultiPaymentEvents = void 0;
    (function (MultiPaymentEvents) {
        MultiPaymentEvents["paymentBlur"] = "payment-blur";
        MultiPaymentEvents["deletePayment"] = "delete-payment";
    })(exports.MultiPaymentEvents || (exports.MultiPaymentEvents = {}));
    /**
     * @deprecated Will be removed in widget collection v3.11.0
     */
    exports.multiPaymnetValidationRules = void 0;
    (function (multiPaymnetValidationRules) {
        multiPaymnetValidationRules["batchNameIsMandatory"] = "batchInfo.name";
        multiPaymnetValidationRules["requestedExecutionDateIsMandatory"] = "batchInfo.requestedExecutionDate";
        multiPaymnetValidationRules["requestedExecutionDateIsValid"] = "batchInfo.requestedExecutionDate";
        multiPaymnetValidationRules["batchhasatleastonecredittransaction"] = "counterparty.debitorAccount";
        multiPaymnetValidationRules["totalcredittransactionscountisequaltointendedtransactionscount"] = "counterparty.debitorAccount";
        multiPaymnetValidationRules["totalcreditamountisequaltototalintendedcreditamount"] = "counterparty.debitorAccount";
        multiPaymnetValidationRules["originatoraccountnumberismandatory"] = "initiator";
        multiPaymnetValidationRules["userhasaccesstooriginatoraccount"] = "initiator";
        multiPaymnetValidationRules["originatoraccountisallowedtodebit"] = "initiator";
        multiPaymnetValidationRules["counterpartyaccountnumberismandatory"] = "counterpartyAccountNumber";
        multiPaymnetValidationRules["userhasaccesstocounterpartyaccount"] = "counterpartyAccountNumber";
        multiPaymnetValidationRules["counterpartyaccountnumberisnotsameasoriginatoraccount"] = "counterpartyAccountNumber";
        multiPaymnetValidationRules["counterpartyaccountisallowedtocredit"] = "counterpartyAccountNumber";
        multiPaymnetValidationRules["batchpaymentiscredit"] = "counterpartyAccountNumber";
        multiPaymnetValidationRules["batchpaymentamountisgreaterthanzero"] = "amount";
        multiPaymnetValidationRules["batchpaymentcurrencyisvalid"] = "amount.currency";
    })(exports.multiPaymnetValidationRules || (exports.multiPaymnetValidationRules = {}));

    var contactsPageSize = 1000;
    var arrangementsPageSize = 100;
    var dataItemPermissionParams = {
        resourceName: 'Payments',
        privilege: 'create',
        dataGroupType: 'ARRANGEMENTS',
    };
    exports.BeneficiaryList = void 0;
    (function (BeneficiaryList) {
        BeneficiaryList["CONTACTS"] = "contacts";
        BeneficiaryList["ACCOUNTS"] = "accounts";
    })(exports.BeneficiaryList || (exports.BeneficiaryList = {}));
    var defaultBeneficiaryTabsConfig = [
        exports.BeneficiaryList.CONTACTS,
        exports.BeneficiaryList.ACCOUNTS,
    ];
    exports.ListState = void 0;
    (function (ListState) {
        ListState["EMPTY"] = "empty";
        ListState["LIST"] = "list";
        ListState["FULL_LIST"] = "full-list";
        ListState["LOADING"] = "loading";
        ListState["FETCHING"] = "fetching";
        ListState["FETCHING_FAILURE"] = "fetching-failure";
        ListState["NO_RESULT"] = "no-result";
        ListState["ERROR"] = "error";
    })(exports.ListState || (exports.ListState = {}));
    exports.PaymentTypeIcon = void 0;
    (function (PaymentTypeIcon) {
        PaymentTypeIcon["INTERNATIONAL"] = "language";
        PaymentTypeIcon["DOMESTIC"] = "accounts";
        PaymentTypeIcon["INTERNAL"] = "domain";
    })(exports.PaymentTypeIcon || (exports.PaymentTypeIcon = {}));

    /* eslint-disable @typescript-eslint/quotes */
    var CurrenciesMap = {
        USD: {
            symbol: '$',
            name: 'United States Dollar',
            symbol_native: '$',
            decimal_digits: 2,
            rounding: 0,
            code: 'USD',
            name_plural: 'US dollars',
        },
        CAD: {
            symbol: 'CA$',
            name: 'Canadian Dollar',
            symbol_native: '$',
            decimal_digits: 2,
            rounding: 0,
            code: 'CAD',
            name_plural: 'Canadian dollars',
        },
        EUR: {
            symbol: '€',
            name: 'Euro',
            symbol_native: '€',
            decimal_digits: 2,
            rounding: 0,
            code: 'EUR',
            name_plural: 'euros',
        },
        AED: {
            symbol: 'AED',
            name: 'United Arab Emirates Dirham',
            symbol_native: 'د.إ.‏',
            decimal_digits: 2,
            rounding: 0,
            code: 'AED',
            name_plural: 'UAE dirhams',
        },
        AFN: {
            symbol: 'Af',
            name: 'Afghan Afghani',
            symbol_native: '؋',
            decimal_digits: 0,
            rounding: 0,
            code: 'AFN',
            name_plural: 'Afghan Afghanis',
        },
        ALL: {
            symbol: 'ALL',
            name: 'Albanian Lek',
            symbol_native: 'Lek',
            decimal_digits: 0,
            rounding: 0,
            code: 'ALL',
            name_plural: 'Albanian lekë',
        },
        AMD: {
            symbol: 'AMD',
            name: 'Armenian Dram',
            symbol_native: 'դր.',
            decimal_digits: 0,
            rounding: 0,
            code: 'AMD',
            name_plural: 'Armenian drams',
        },
        ARS: {
            symbol: 'AR$',
            name: 'Argentine Peso',
            symbol_native: '$',
            decimal_digits: 2,
            rounding: 0,
            code: 'ARS',
            name_plural: 'Argentine pesos',
        },
        AUD: {
            symbol: 'AU$',
            name: 'Australian Dollar',
            symbol_native: '$',
            decimal_digits: 2,
            rounding: 0,
            code: 'AUD',
            name_plural: 'Australian dollars',
        },
        AZN: {
            symbol: 'man.',
            name: 'Azerbaijani Manat',
            symbol_native: 'ман.',
            decimal_digits: 2,
            rounding: 0,
            code: 'AZN',
            name_plural: 'Azerbaijani manats',
        },
        BAM: {
            symbol: 'KM',
            name: 'Bosnia-Herzegovina Convertible Mark',
            symbol_native: 'KM',
            decimal_digits: 2,
            rounding: 0,
            code: 'BAM',
            name_plural: 'Bosnia-Herzegovina convertible marks',
        },
        BDT: {
            symbol: 'Tk',
            name: 'Bangladeshi Taka',
            symbol_native: '৳',
            decimal_digits: 2,
            rounding: 0,
            code: 'BDT',
            name_plural: 'Bangladeshi takas',
        },
        BGN: {
            symbol: 'BGN',
            name: 'Bulgarian Lev',
            symbol_native: 'лв.',
            decimal_digits: 2,
            rounding: 0,
            code: 'BGN',
            name_plural: 'Bulgarian leva',
        },
        BHD: {
            symbol: 'BD',
            name: 'Bahraini Dinar',
            symbol_native: 'د.ب.‏',
            decimal_digits: 3,
            rounding: 0,
            code: 'BHD',
            name_plural: 'Bahraini dinars',
        },
        BIF: {
            symbol: 'FBu',
            name: 'Burundian Franc',
            symbol_native: 'FBu',
            decimal_digits: 0,
            rounding: 0,
            code: 'BIF',
            name_plural: 'Burundian francs',
        },
        BND: {
            symbol: 'BN$',
            name: 'Brunei Dollar',
            symbol_native: '$',
            decimal_digits: 2,
            rounding: 0,
            code: 'BND',
            name_plural: 'Brunei dollars',
        },
        BOB: {
            symbol: 'Bs',
            name: 'Bolivian Boliviano',
            symbol_native: 'Bs',
            decimal_digits: 2,
            rounding: 0,
            code: 'BOB',
            name_plural: 'Bolivian bolivianos',
        },
        BRL: {
            symbol: 'R$',
            name: 'Brazilian Real',
            symbol_native: 'R$',
            decimal_digits: 2,
            rounding: 0,
            code: 'BRL',
            name_plural: 'Brazilian reals',
        },
        BWP: {
            symbol: 'BWP',
            name: 'Botswanan Pula',
            symbol_native: 'P',
            decimal_digits: 2,
            rounding: 0,
            code: 'BWP',
            name_plural: 'Botswanan pulas',
        },
        BYN: {
            symbol: 'Br',
            name: 'Belarusian Ruble',
            symbol_native: 'руб.',
            decimal_digits: 2,
            rounding: 0,
            code: 'BYN',
            name_plural: 'Belarusian rubles',
        },
        BZD: {
            symbol: 'BZ$',
            name: 'Belize Dollar',
            symbol_native: '$',
            decimal_digits: 2,
            rounding: 0,
            code: 'BZD',
            name_plural: 'Belize dollars',
        },
        CDF: {
            symbol: 'CDF',
            name: 'Congolese Franc',
            symbol_native: 'FrCD',
            decimal_digits: 2,
            rounding: 0,
            code: 'CDF',
            name_plural: 'Congolese francs',
        },
        CHF: {
            symbol: 'CHF',
            name: 'Swiss Franc',
            symbol_native: 'CHF',
            decimal_digits: 2,
            rounding: 0.05,
            code: 'CHF',
            name_plural: 'Swiss francs',
        },
        CLP: {
            symbol: 'CL$',
            name: 'Chilean Peso',
            symbol_native: '$',
            decimal_digits: 0,
            rounding: 0,
            code: 'CLP',
            name_plural: 'Chilean pesos',
        },
        CNY: {
            symbol: 'CN¥',
            name: 'Chinese Yuan',
            symbol_native: 'CN¥',
            decimal_digits: 2,
            rounding: 0,
            code: 'CNY',
            name_plural: 'Chinese yuan',
        },
        COP: {
            symbol: 'CO$',
            name: 'Colombian Peso',
            symbol_native: '$',
            decimal_digits: 0,
            rounding: 0,
            code: 'COP',
            name_plural: 'Colombian pesos',
        },
        CRC: {
            symbol: '₡',
            name: 'Costa Rican Colón',
            symbol_native: '₡',
            decimal_digits: 0,
            rounding: 0,
            code: 'CRC',
            name_plural: 'Costa Rican colóns',
        },
        CVE: {
            symbol: 'CV$',
            name: 'Cape Verdean Escudo',
            symbol_native: 'CV$',
            decimal_digits: 2,
            rounding: 0,
            code: 'CVE',
            name_plural: 'Cape Verdean escudos',
        },
        CZK: {
            symbol: 'Kč',
            name: 'Czech Republic Koruna',
            symbol_native: 'Kč',
            decimal_digits: 2,
            rounding: 0,
            code: 'CZK',
            name_plural: 'Czech Republic korunas',
        },
        DJF: {
            symbol: 'Fdj',
            name: 'Djiboutian Franc',
            symbol_native: 'Fdj',
            decimal_digits: 0,
            rounding: 0,
            code: 'DJF',
            name_plural: 'Djiboutian francs',
        },
        DKK: {
            symbol: 'Dkr',
            name: 'Danish Krone',
            symbol_native: 'kr',
            decimal_digits: 2,
            rounding: 0,
            code: 'DKK',
            name_plural: 'Danish kroner',
        },
        DOP: {
            symbol: 'RD$',
            name: 'Dominican Peso',
            symbol_native: 'RD$',
            decimal_digits: 2,
            rounding: 0,
            code: 'DOP',
            name_plural: 'Dominican pesos',
        },
        DZD: {
            symbol: 'DA',
            name: 'Algerian Dinar',
            symbol_native: 'د.ج.‏',
            decimal_digits: 2,
            rounding: 0,
            code: 'DZD',
            name_plural: 'Algerian dinars',
        },
        EEK: {
            symbol: 'Ekr',
            name: 'Estonian Kroon',
            symbol_native: 'kr',
            decimal_digits: 2,
            rounding: 0,
            code: 'EEK',
            name_plural: 'Estonian kroons',
        },
        EGP: {
            symbol: 'EGP',
            name: 'Egyptian Pound',
            symbol_native: 'ج.م.‏',
            decimal_digits: 2,
            rounding: 0,
            code: 'EGP',
            name_plural: 'Egyptian pounds',
        },
        ERN: {
            symbol: 'Nfk',
            name: 'Eritrean Nakfa',
            symbol_native: 'Nfk',
            decimal_digits: 2,
            rounding: 0,
            code: 'ERN',
            name_plural: 'Eritrean nakfas',
        },
        ETB: {
            symbol: 'Br',
            name: 'Ethiopian Birr',
            symbol_native: 'Br',
            decimal_digits: 2,
            rounding: 0,
            code: 'ETB',
            name_plural: 'Ethiopian birrs',
        },
        GBP: {
            symbol: '£',
            name: 'British Pound Sterling',
            symbol_native: '£',
            decimal_digits: 2,
            rounding: 0,
            code: 'GBP',
            name_plural: 'British pounds sterling',
        },
        GEL: {
            symbol: 'GEL',
            name: 'Georgian Lari',
            symbol_native: 'GEL',
            decimal_digits: 2,
            rounding: 0,
            code: 'GEL',
            name_plural: 'Georgian laris',
        },
        GHS: {
            symbol: 'GH₵',
            name: 'Ghanaian Cedi',
            symbol_native: 'GH₵',
            decimal_digits: 2,
            rounding: 0,
            code: 'GHS',
            name_plural: 'Ghanaian cedis',
        },
        GNF: {
            symbol: 'FG',
            name: 'Guinean Franc',
            symbol_native: 'FG',
            decimal_digits: 0,
            rounding: 0,
            code: 'GNF',
            name_plural: 'Guinean francs',
        },
        GTQ: {
            symbol: 'GTQ',
            name: 'Guatemalan Quetzal',
            symbol_native: 'Q',
            decimal_digits: 2,
            rounding: 0,
            code: 'GTQ',
            name_plural: 'Guatemalan quetzals',
        },
        HKD: {
            symbol: 'HK$',
            name: 'Hong Kong Dollar',
            symbol_native: '$',
            decimal_digits: 2,
            rounding: 0,
            code: 'HKD',
            name_plural: 'Hong Kong dollars',
        },
        HNL: {
            symbol: 'HNL',
            name: 'Honduran Lempira',
            symbol_native: 'L',
            decimal_digits: 2,
            rounding: 0,
            code: 'HNL',
            name_plural: 'Honduran lempiras',
        },
        HRK: {
            symbol: 'kn',
            name: 'Croatian Kuna',
            symbol_native: 'kn',
            decimal_digits: 2,
            rounding: 0,
            code: 'HRK',
            name_plural: 'Croatian kunas',
        },
        HUF: {
            symbol: 'Ft',
            name: 'Hungarian Forint',
            symbol_native: 'Ft',
            decimal_digits: 0,
            rounding: 0,
            code: 'HUF',
            name_plural: 'Hungarian forints',
        },
        IDR: {
            symbol: 'Rp',
            name: 'Indonesian Rupiah',
            symbol_native: 'Rp',
            decimal_digits: 0,
            rounding: 0,
            code: 'IDR',
            name_plural: 'Indonesian rupiahs',
        },
        ILS: {
            symbol: '₪',
            name: 'Israeli New Sheqel',
            symbol_native: '₪',
            decimal_digits: 2,
            rounding: 0,
            code: 'ILS',
            name_plural: 'Israeli new sheqels',
        },
        INR: {
            symbol: 'Rs',
            name: 'Indian Rupee',
            symbol_native: 'টকা',
            decimal_digits: 2,
            rounding: 0,
            code: 'INR',
            name_plural: 'Indian rupees',
        },
        IQD: {
            symbol: 'IQD',
            name: 'Iraqi Dinar',
            symbol_native: 'د.ع.‏',
            decimal_digits: 0,
            rounding: 0,
            code: 'IQD',
            name_plural: 'Iraqi dinars',
        },
        IRR: {
            symbol: 'IRR',
            name: 'Iranian Rial',
            symbol_native: '﷼',
            decimal_digits: 0,
            rounding: 0,
            code: 'IRR',
            name_plural: 'Iranian rials',
        },
        ISK: {
            symbol: 'Ikr',
            name: 'Icelandic Króna',
            symbol_native: 'kr',
            decimal_digits: 0,
            rounding: 0,
            code: 'ISK',
            name_plural: 'Icelandic krónur',
        },
        JMD: {
            symbol: 'J$',
            name: 'Jamaican Dollar',
            symbol_native: '$',
            decimal_digits: 2,
            rounding: 0,
            code: 'JMD',
            name_plural: 'Jamaican dollars',
        },
        JOD: {
            symbol: 'JD',
            name: 'Jordanian Dinar',
            symbol_native: 'د.أ.‏',
            decimal_digits: 3,
            rounding: 0,
            code: 'JOD',
            name_plural: 'Jordanian dinars',
        },
        JPY: {
            symbol: '¥',
            name: 'Japanese Yen',
            symbol_native: '￥',
            decimal_digits: 0,
            rounding: 0,
            code: 'JPY',
            name_plural: 'Japanese yen',
        },
        KES: {
            symbol: 'Ksh',
            name: 'Kenyan Shilling',
            symbol_native: 'Ksh',
            decimal_digits: 2,
            rounding: 0,
            code: 'KES',
            name_plural: 'Kenyan shillings',
        },
        KHR: {
            symbol: 'KHR',
            name: 'Cambodian Riel',
            symbol_native: '៛',
            decimal_digits: 2,
            rounding: 0,
            code: 'KHR',
            name_plural: 'Cambodian riels',
        },
        KMF: {
            symbol: 'CF',
            name: 'Comorian Franc',
            symbol_native: 'FC',
            decimal_digits: 0,
            rounding: 0,
            code: 'KMF',
            name_plural: 'Comorian francs',
        },
        KRW: {
            symbol: '₩',
            name: 'South Korean Won',
            symbol_native: '₩',
            decimal_digits: 0,
            rounding: 0,
            code: 'KRW',
            name_plural: 'South Korean won',
        },
        KWD: {
            symbol: 'KD',
            name: 'Kuwaiti Dinar',
            symbol_native: 'د.ك.‏',
            decimal_digits: 3,
            rounding: 0,
            code: 'KWD',
            name_plural: 'Kuwaiti dinars',
        },
        KZT: {
            symbol: 'KZT',
            name: 'Kazakhstani Tenge',
            symbol_native: 'тңг.',
            decimal_digits: 2,
            rounding: 0,
            code: 'KZT',
            name_plural: 'Kazakhstani tenges',
        },
        LBP: {
            symbol: 'LB£',
            name: 'Lebanese Pound',
            symbol_native: 'ل.ل.‏',
            decimal_digits: 0,
            rounding: 0,
            code: 'LBP',
            name_plural: 'Lebanese pounds',
        },
        LKR: {
            symbol: 'SLRs',
            name: 'Sri Lankan Rupee',
            symbol_native: 'SL Re',
            decimal_digits: 2,
            rounding: 0,
            code: 'LKR',
            name_plural: 'Sri Lankan rupees',
        },
        LTL: {
            symbol: 'Lt',
            name: 'Lithuanian Litas',
            symbol_native: 'Lt',
            decimal_digits: 2,
            rounding: 0,
            code: 'LTL',
            name_plural: 'Lithuanian litai',
        },
        LVL: {
            symbol: 'Ls',
            name: 'Latvian Lats',
            symbol_native: 'Ls',
            decimal_digits: 2,
            rounding: 0,
            code: 'LVL',
            name_plural: 'Latvian lati',
        },
        LYD: {
            symbol: 'LD',
            name: 'Libyan Dinar',
            symbol_native: 'د.ل.‏',
            decimal_digits: 3,
            rounding: 0,
            code: 'LYD',
            name_plural: 'Libyan dinars',
        },
        MAD: {
            symbol: 'MAD',
            name: 'Moroccan Dirham',
            symbol_native: 'د.م.‏',
            decimal_digits: 2,
            rounding: 0,
            code: 'MAD',
            name_plural: 'Moroccan dirhams',
        },
        MDL: {
            symbol: 'MDL',
            name: 'Moldovan Leu',
            symbol_native: 'MDL',
            decimal_digits: 2,
            rounding: 0,
            code: 'MDL',
            name_plural: 'Moldovan lei',
        },
        MGA: {
            symbol: 'MGA',
            name: 'Malagasy Ariary',
            symbol_native: 'MGA',
            decimal_digits: 0,
            rounding: 0,
            code: 'MGA',
            name_plural: 'Malagasy Ariaries',
        },
        MKD: {
            symbol: 'MKD',
            name: 'Macedonian Denar',
            symbol_native: 'MKD',
            decimal_digits: 2,
            rounding: 0,
            code: 'MKD',
            name_plural: 'Macedonian denari',
        },
        MMK: {
            symbol: 'MMK',
            name: 'Myanma Kyat',
            symbol_native: 'K',
            decimal_digits: 0,
            rounding: 0,
            code: 'MMK',
            name_plural: 'Myanma kyats',
        },
        MOP: {
            symbol: 'MOP$',
            name: 'Macanese Pataca',
            symbol_native: 'MOP$',
            decimal_digits: 2,
            rounding: 0,
            code: 'MOP',
            name_plural: 'Macanese patacas',
        },
        MUR: {
            symbol: 'MURs',
            name: 'Mauritian Rupee',
            symbol_native: 'MURs',
            decimal_digits: 0,
            rounding: 0,
            code: 'MUR',
            name_plural: 'Mauritian rupees',
        },
        MXN: {
            symbol: 'MX$',
            name: 'Mexican Peso',
            symbol_native: '$',
            decimal_digits: 2,
            rounding: 0,
            code: 'MXN',
            name_plural: 'Mexican pesos',
        },
        MYR: {
            symbol: 'RM',
            name: 'Malaysian Ringgit',
            symbol_native: 'RM',
            decimal_digits: 2,
            rounding: 0,
            code: 'MYR',
            name_plural: 'Malaysian ringgits',
        },
        MZN: {
            symbol: 'MTn',
            name: 'Mozambican Metical',
            symbol_native: 'MTn',
            decimal_digits: 2,
            rounding: 0,
            code: 'MZN',
            name_plural: 'Mozambican meticals',
        },
        NAD: {
            symbol: 'N$',
            name: 'Namibian Dollar',
            symbol_native: 'N$',
            decimal_digits: 2,
            rounding: 0,
            code: 'NAD',
            name_plural: 'Namibian dollars',
        },
        NGN: {
            symbol: '₦',
            name: 'Nigerian Naira',
            symbol_native: '₦',
            decimal_digits: 2,
            rounding: 0,
            code: 'NGN',
            name_plural: 'Nigerian nairas',
        },
        NIO: {
            symbol: 'C$',
            name: 'Nicaraguan Córdoba',
            symbol_native: 'C$',
            decimal_digits: 2,
            rounding: 0,
            code: 'NIO',
            name_plural: 'Nicaraguan córdobas',
        },
        NOK: {
            symbol: 'Nkr',
            name: 'Norwegian Krone',
            symbol_native: 'kr',
            decimal_digits: 2,
            rounding: 0,
            code: 'NOK',
            name_plural: 'Norwegian kroner',
        },
        NPR: {
            symbol: 'NPRs',
            name: 'Nepalese Rupee',
            symbol_native: 'नेरू',
            decimal_digits: 2,
            rounding: 0,
            code: 'NPR',
            name_plural: 'Nepalese rupees',
        },
        NZD: {
            symbol: 'NZ$',
            name: 'New Zealand Dollar',
            symbol_native: '$',
            decimal_digits: 2,
            rounding: 0,
            code: 'NZD',
            name_plural: 'New Zealand dollars',
        },
        OMR: {
            symbol: 'OMR',
            name: 'Omani Rial',
            symbol_native: 'ر.ع.‏',
            decimal_digits: 3,
            rounding: 0,
            code: 'OMR',
            name_plural: 'Omani rials',
        },
        PAB: {
            symbol: 'B/.',
            name: 'Panamanian Balboa',
            symbol_native: 'B/.',
            decimal_digits: 2,
            rounding: 0,
            code: 'PAB',
            name_plural: 'Panamanian balboas',
        },
        PEN: {
            symbol: 'S/.',
            name: 'Peruvian Nuevo Sol',
            symbol_native: 'S/.',
            decimal_digits: 2,
            rounding: 0,
            code: 'PEN',
            name_plural: 'Peruvian nuevos soles',
        },
        PHP: {
            symbol: '₱',
            name: 'Philippine Peso',
            symbol_native: '₱',
            decimal_digits: 2,
            rounding: 0,
            code: 'PHP',
            name_plural: 'Philippine pesos',
        },
        PKR: {
            symbol: 'PKRs',
            name: 'Pakistani Rupee',
            symbol_native: '₨',
            decimal_digits: 0,
            rounding: 0,
            code: 'PKR',
            name_plural: 'Pakistani rupees',
        },
        PLN: {
            symbol: 'zł',
            name: 'Polish Zloty',
            symbol_native: 'zł',
            decimal_digits: 2,
            rounding: 0,
            code: 'PLN',
            name_plural: 'Polish zlotys',
        },
        PYG: {
            symbol: '₲',
            name: 'Paraguayan Guarani',
            symbol_native: '₲',
            decimal_digits: 0,
            rounding: 0,
            code: 'PYG',
            name_plural: 'Paraguayan guaranis',
        },
        QAR: {
            symbol: 'QR',
            name: 'Qatari Rial',
            symbol_native: 'ر.ق.‏',
            decimal_digits: 2,
            rounding: 0,
            code: 'QAR',
            name_plural: 'Qatari rials',
        },
        RON: {
            symbol: 'RON',
            name: 'Romanian Leu',
            symbol_native: 'RON',
            decimal_digits: 2,
            rounding: 0,
            code: 'RON',
            name_plural: 'Romanian lei',
        },
        RSD: {
            symbol: 'din.',
            name: 'Serbian Dinar',
            symbol_native: 'дин.',
            decimal_digits: 0,
            rounding: 0,
            code: 'RSD',
            name_plural: 'Serbian dinars',
        },
        RUB: {
            symbol: 'RUB',
            name: 'Russian Ruble',
            symbol_native: '₽.',
            decimal_digits: 2,
            rounding: 0,
            code: 'RUB',
            name_plural: 'Russian rubles',
        },
        RWF: {
            symbol: 'RWF',
            name: 'Rwandan Franc',
            symbol_native: 'FR',
            decimal_digits: 0,
            rounding: 0,
            code: 'RWF',
            name_plural: 'Rwandan francs',
        },
        SAR: {
            symbol: 'SR',
            name: 'Saudi Riyal',
            symbol_native: 'ر.س.‏',
            decimal_digits: 2,
            rounding: 0,
            code: 'SAR',
            name_plural: 'Saudi riyals',
        },
        SDG: {
            symbol: 'SDG',
            name: 'Sudanese Pound',
            symbol_native: 'SDG',
            decimal_digits: 2,
            rounding: 0,
            code: 'SDG',
            name_plural: 'Sudanese pounds',
        },
        SEK: {
            symbol: 'Skr',
            name: 'Swedish Krona',
            symbol_native: 'kr',
            decimal_digits: 2,
            rounding: 0,
            code: 'SEK',
            name_plural: 'Swedish kronor',
        },
        SGD: {
            symbol: 'S$',
            name: 'Singapore Dollar',
            symbol_native: '$',
            decimal_digits: 2,
            rounding: 0,
            code: 'SGD',
            name_plural: 'Singapore dollars',
        },
        SOS: {
            symbol: 'Ssh',
            name: 'Somali Shilling',
            symbol_native: 'Ssh',
            decimal_digits: 0,
            rounding: 0,
            code: 'SOS',
            name_plural: 'Somali shillings',
        },
        SYP: {
            symbol: 'SY£',
            name: 'Syrian Pound',
            symbol_native: 'ل.س.‏',
            decimal_digits: 0,
            rounding: 0,
            code: 'SYP',
            name_plural: 'Syrian pounds',
        },
        THB: {
            symbol: '฿',
            name: 'Thai Baht',
            symbol_native: '฿',
            decimal_digits: 2,
            rounding: 0,
            code: 'THB',
            name_plural: 'Thai baht',
        },
        TND: {
            symbol: 'DT',
            name: 'Tunisian Dinar',
            symbol_native: 'د.ت.‏',
            decimal_digits: 3,
            rounding: 0,
            code: 'TND',
            name_plural: 'Tunisian dinars',
        },
        TOP: {
            symbol: 'T$',
            name: 'Tongan Paʻanga',
            symbol_native: 'T$',
            decimal_digits: 2,
            rounding: 0,
            code: 'TOP',
            name_plural: 'Tongan paʻanga',
        },
        TRY: {
            symbol: 'TL',
            name: 'Turkish Lira',
            symbol_native: 'TL',
            decimal_digits: 2,
            rounding: 0,
            code: 'TRY',
            name_plural: 'Turkish Lira',
        },
        TTD: {
            symbol: 'TT$',
            name: 'Trinidad and Tobago Dollar',
            symbol_native: '$',
            decimal_digits: 2,
            rounding: 0,
            code: 'TTD',
            name_plural: 'Trinidad and Tobago dollars',
        },
        TWD: {
            symbol: 'NT$',
            name: 'New Taiwan Dollar',
            symbol_native: 'NT$',
            decimal_digits: 2,
            rounding: 0,
            code: 'TWD',
            name_plural: 'New Taiwan dollars',
        },
        TZS: {
            symbol: 'TSh',
            name: 'Tanzanian Shilling',
            symbol_native: 'TSh',
            decimal_digits: 0,
            rounding: 0,
            code: 'TZS',
            name_plural: 'Tanzanian shillings',
        },
        UAH: {
            symbol: '₴',
            name: 'Ukrainian Hryvnia',
            symbol_native: '₴',
            decimal_digits: 2,
            rounding: 0,
            code: 'UAH',
            name_plural: 'Ukrainian hryvnias',
        },
        UGX: {
            symbol: 'USh',
            name: 'Ugandan Shilling',
            symbol_native: 'USh',
            decimal_digits: 0,
            rounding: 0,
            code: 'UGX',
            name_plural: 'Ugandan shillings',
        },
        UYU: {
            symbol: '$U',
            name: 'Uruguayan Peso',
            symbol_native: '$',
            decimal_digits: 2,
            rounding: 0,
            code: 'UYU',
            name_plural: 'Uruguayan pesos',
        },
        UZS: {
            symbol: 'UZS',
            name: 'Uzbekistan Som',
            symbol_native: 'UZS',
            decimal_digits: 0,
            rounding: 0,
            code: 'UZS',
            name_plural: 'Uzbekistan som',
        },
        VEF: {
            symbol: 'Bs.F.',
            name: 'Venezuelan Bolívar',
            symbol_native: 'Bs.F.',
            decimal_digits: 2,
            rounding: 0,
            code: 'VEF',
            name_plural: 'Venezuelan bolívars',
        },
        VND: {
            symbol: '₫',
            name: 'Vietnamese Dong',
            symbol_native: '₫',
            decimal_digits: 0,
            rounding: 0,
            code: 'VND',
            name_plural: 'Vietnamese dong',
        },
        XAF: {
            symbol: 'FCFA',
            name: 'CFA Franc BEAC',
            symbol_native: 'FCFA',
            decimal_digits: 0,
            rounding: 0,
            code: 'XAF',
            name_plural: 'CFA francs BEAC',
        },
        XOF: {
            symbol: 'CFA',
            name: 'CFA Franc BCEAO',
            symbol_native: 'CFA',
            decimal_digits: 0,
            rounding: 0,
            code: 'XOF',
            name_plural: 'CFA francs BCEAO',
        },
        YER: {
            symbol: 'YR',
            name: 'Yemeni Rial',
            symbol_native: 'ر.ي.‏',
            decimal_digits: 0,
            rounding: 0,
            code: 'YER',
            name_plural: 'Yemeni rials',
        },
        ZAR: {
            symbol: 'R',
            name: 'South African Rand',
            symbol_native: 'R',
            decimal_digits: 2,
            rounding: 0,
            code: 'ZAR',
            name_plural: 'South African rand',
        },
        ZMK: {
            symbol: 'ZK',
            name: 'Zambian Kwacha',
            symbol_native: 'ZK',
            decimal_digits: 0,
            rounding: 0,
            code: 'ZMK',
            name_plural: 'Zambian kwachas',
        },
        ZWL: {
            symbol: 'ZWL$',
            name: 'Zimbabwean Dollar',
            symbol_native: 'ZWL$',
            decimal_digits: 0,
            rounding: 0,
            code: 'ZWL',
            name_plural: 'Zimbabwean Dollar',
        },
    };
    var paymentTemplatesPageSize = 20;
    var defaultResourceName = 'Payments';
    var defaultPrivilege = 'create';
    var CountriesMap = {
        AF: 'Afghanistan',
        AX: 'Aland Islands',
        AL: 'Albania',
        DZ: 'Algeria',
        AS: 'American Samoa',
        AD: 'Andorra',
        AO: 'Angola',
        AI: 'Anguilla',
        AQ: 'Antarctica',
        AG: 'Antigua and Barbuda',
        AR: 'Argentina',
        AM: 'Armenia',
        AW: 'Aruba',
        AU: 'Australia',
        AT: 'Austria',
        AZ: 'Azerbaijan',
        BS: 'Bahamas',
        BH: 'Bahrain',
        BD: 'Bangladesh',
        BB: 'Barbados',
        BY: 'Belarus',
        BE: 'Belgium',
        BZ: 'Belize',
        BJ: 'Benin',
        BM: 'Bermuda',
        BT: 'Bhutan',
        BO: 'Bolivia, Plurinational State of',
        BQ: 'Bonaire, Saint Eustatius and Saba',
        BA: 'Bosnia and Herzegovina',
        BW: 'Botswana',
        BV: 'Bouvet Island',
        BR: 'Brazil',
        IO: 'British Indian Ocean Territory',
        BN: 'Brunei Darussalam',
        BG: 'Bulgaria',
        BF: 'Burkina Faso',
        BI: 'Burundi',
        KH: 'Cambodia',
        CM: 'Cameroon',
        CA: 'Canada',
        CV: 'Cape Verde',
        KY: 'Cayman Islands',
        CF: 'Central African Republic',
        TD: 'Chad',
        CL: 'Chile',
        CN: 'China',
        CX: 'Christmas Island',
        CC: 'Cocos (Keeling) Islands',
        CO: 'Colombia',
        KM: 'Comoros',
        CG: 'Congo',
        CD: 'Congo, The Democratic Republic of the',
        CK: 'Cook Islands',
        CR: 'Costa Rica',
        CI: "Cote d'Ivoire",
        HR: 'Croatia',
        CU: 'Cuba',
        CW: 'Curacao',
        CY: 'Cyprus',
        CZ: 'Czech Republic',
        DK: 'Denmark',
        DJ: 'Djibouti',
        DM: 'Dominica',
        DO: 'Dominican Republic',
        EC: 'Ecuador',
        EG: 'Egypt',
        SV: 'El Salvador',
        GQ: 'Equatorial Guinea',
        ER: 'Eritrea',
        EE: 'Estonia',
        ET: 'Ethiopia',
        FK: 'Falkland Islands (Malvinas',
        FO: 'Faroe Islands',
        FJ: 'Fiji',
        FI: 'Finland',
        FR: 'France',
        GF: 'French Guiana',
        PF: 'French Polynesia',
        TF: 'French Southern Territories',
        GA: 'Gabon',
        GM: 'Gambia',
        GE: 'Georgia',
        DE: 'Germany',
        GH: 'Ghana',
        GI: 'Gibraltar',
        GR: 'Greece',
        GL: 'Greenland',
        GD: 'Grenada',
        GP: 'Guadeloupe',
        GU: 'Guam',
        GT: 'Guatemala',
        GG: 'Guernsey',
        GN: 'Guinea',
        GW: 'Guinea-Bissau',
        GY: 'Guyana',
        HT: 'Haiti',
        HM: 'Heard Island and McDonald Islands',
        VA: 'Holy See (Vatican City State',
        HN: 'Honduras',
        HK: 'Hong Kong',
        HU: 'Hungary',
        IS: 'Iceland',
        IN: 'India',
        ID: 'Indonesia',
        IR: 'Iran, Islamic Republic of',
        IQ: 'Iraq',
        IE: 'Ireland',
        IM: 'Isle of Man',
        IL: 'Israel',
        IT: 'Italy',
        JM: 'Jamaica',
        JP: 'Japan',
        JE: 'Jersey',
        JO: 'Jordan',
        KZ: 'Kazakhstan',
        KE: 'Kenya',
        KI: 'Kiribati',
        KP: "Korea, Democratic People's Republic of",
        KR: 'Korea, Republic of',
        KW: 'Kuwait',
        KG: 'Kyrgyzstan',
        LA: "Lao People's Democratic Republic",
        LV: 'Latvia',
        LB: 'Lebanon',
        LS: 'Lesotho',
        LR: 'Liberia',
        LY: 'Libyan Arab Jamahiriya',
        LI: 'Liechtenstein',
        LT: 'Lithuania',
        LU: 'Luxembourg',
        MO: 'Macao',
        MK: 'Macedonia, The Former Yugoslav Republic of',
        MG: 'Madagascar',
        MW: 'Malawi',
        MY: 'Malaysia',
        MV: 'Maldives',
        ML: 'Mali',
        MT: 'Malta',
        MH: 'Marshall Islands',
        MQ: 'Martinique',
        MR: 'Mauritania',
        MU: 'Mauritius',
        YT: 'Mayotte',
        MX: 'Mexico',
        FM: 'Micronesia, Federated States of',
        MD: 'Moldova, Republic of',
        MC: 'Monaco',
        MN: 'Mongolia',
        ME: 'Montenegro',
        MS: 'Montserrat',
        MA: 'Morocco',
        MZ: 'Mozambique',
        MM: 'Myanmar',
        NA: 'Namibia',
        NR: 'Nauru',
        NP: 'Nepal',
        NL: 'Netherlands',
        NC: 'New Caledonia',
        NZ: 'New Zealand',
        NI: 'Nicaragua',
        NE: 'Niger',
        NG: 'Nigeria',
        NU: 'Niue',
        NF: 'Norfolk Island',
        MP: 'Northern Mariana Islands',
        NO: 'Norway',
        PS: 'Occupied Palestinian Territory',
        OM: 'Oman',
        PK: 'Pakistan',
        PW: 'Palau',
        PA: 'Panama',
        PG: 'Papua New Guinea',
        PY: 'Paraguay',
        PE: 'Peru',
        PH: 'Philippines',
        PN: 'Pitcairn',
        PL: 'Poland',
        PT: 'Portugal',
        PR: 'Puerto Rico',
        QA: 'Qatar',
        RE: 'Reunion',
        RO: 'Romania',
        RU: 'Russian Federation',
        RW: 'Rwanda',
        BL: 'Saint Barthelemy',
        SH: 'Saint Helena, Ascension and Tristan da Cunha',
        KN: 'Saint Kitts and Nevis',
        LC: 'Saint Lucia',
        MF: 'Saint Martin (French part',
        PM: 'Saint Pierre and Miquelon',
        VC: 'Saint Vincent and The Grenadines',
        WS: 'Samoa',
        SM: 'San Marino',
        ST: 'Sao Tome and Principe',
        SA: 'Saudi Arabia',
        SN: 'Senegal',
        RS: 'Serbia',
        SC: 'Seychelles',
        SL: 'Sierra Leone',
        SG: 'Singapore',
        SX: 'Sint Maarten (Dutch part',
        SK: 'Slovakia',
        SI: 'Slovenia',
        SB: 'Solomon Islands',
        SO: 'Somalia',
        ZA: 'South Africa',
        GS: 'South Georgia and the South Sandwich Islands',
        ES: 'Spain',
        LK: 'Sri Lanka',
        SD: 'Sudan',
        SR: 'Suriname',
        SJ: 'Svalbard and Jan Mayen',
        SZ: 'Swaziland',
        SE: 'Sweden',
        CH: 'Switzerland',
        SY: 'Syrian Arab Republic',
        TW: 'Taiwan, Province of China',
        TJ: 'Tajikistan',
        TZ: 'Tanzania, United Republic of',
        TH: 'Thailand',
        TL: 'Timor-Leste',
        TG: 'Togo',
        TK: 'Tokelau',
        TO: 'Tonga',
        TT: 'Trinidad and Tobago',
        TN: 'Tunisia',
        TR: 'Turkey',
        TM: 'Turkmenistan',
        TC: 'Turks and Caicos Islands',
        TV: 'Tuvalu',
        UG: 'Uganda',
        UA: 'Ukraine',
        AE: 'United Arab Emirates',
        GB: 'United Kingdom',
        US: 'United States',
        UY: 'Uruguay',
        UZ: 'Uzbekistan',
        VU: 'Vanuatu',
        VE: 'Venezuela, Bolivarian Republic of',
        VN: 'Viet Nam',
        VG: 'Virgin Islands, British',
        VI: 'Virgin Islands, U.S',
        WF: 'Wallis and Futuna',
        EH: 'Western Sahara',
        YE: 'Yemen',
        ZM: 'Zambia',
        ZW: 'Zimbabwe',
    };

    var CurrencyToCountryMap = {
        BDT: 'BD',
        EUR: 'EU',
        XOF: 'TG',
        BGN: 'BG',
        BAM: 'BA',
        BBD: 'BB',
        XPF: 'NC',
        BMD: 'BM',
        BND: 'BN',
        BOB: 'BO',
        BHD: 'BH',
        BIF: 'BI',
        BTN: 'BT',
        JMD: 'JM',
        NOK: 'NO',
        BWP: 'BW',
        WST: 'WS',
        USD: 'US',
        BRL: 'BR',
        BSD: 'BS',
        GBP: 'IM',
        BYR: 'BY',
        BZD: 'BZ',
        RUB: 'RU',
        RWF: 'RW',
        RSD: 'RS',
        TMT: 'TM',
        TJS: 'TJ',
        RON: 'RO',
        NZD: 'CK',
        GTQ: 'GT',
        XAF: 'TD',
        JPY: 'JP',
        GYD: 'GY',
        GEL: 'GE',
        XCD: 'AI',
        GNF: 'GN',
        GMD: 'GM',
        DKK: 'DK',
        GIP: 'GI',
        GHS: 'GH',
        OMR: 'OM',
        TND: 'TN',
        JOD: 'JO',
        HRK: 'HR',
        HTG: 'HT',
        HUF: 'HU',
        HKD: 'HK',
        HNL: 'HN',
        AUD: 'AU',
        VEF: 'VE',
        ILS: 'IL',
        PYG: 'PY',
        IQD: 'IQ',
        PAB: 'PA',
        PGK: 'PG',
        PEN: 'PE',
        PKR: 'PK',
        PHP: 'PH',
        PLN: 'PL',
        ZMK: 'ZM',
        MAD: 'MA',
        EGP: 'EG',
        ZAR: 'ZA',
        VND: 'VN',
        SBD: 'SB',
        ETB: 'ET',
        SOS: 'SO',
        ZWL: 'ZW',
        SAR: 'SA',
        ERN: 'ER',
        MDL: 'MD',
        MGA: 'MG',
        UZS: 'UZ',
        MMK: 'MM',
        MOP: 'MO',
        MNT: 'MN',
        MKD: 'MK',
        MUR: 'MU',
        MWK: 'MW',
        MVR: 'MV',
        MRO: 'MR',
        UGX: 'UG',
        TZS: 'TZ',
        MYR: 'MY',
        MXN: 'MX',
        SHP: 'SH',
        FJD: 'FJ',
        FKP: 'FK',
        NIO: 'NI',
        NAD: 'NA',
        VUV: 'VU',
        NGN: 'NG',
        NPR: 'NP',
        CHF: 'LI',
        COP: 'CO',
        CNY: 'CN',
        CLP: 'CL',
        CAD: 'CA',
        CDF: 'CD',
        CZK: 'CZ',
        CRC: 'CR',
        ANG: 'SX',
        CVE: 'CV',
        CUP: 'CU',
        SZL: 'SZ',
        SYP: 'SY',
        KGS: 'KG',
        KES: 'KE',
        SSP: 'SS',
        SRD: 'SR',
        KHR: 'KH',
        KMF: 'KM',
        STD: 'ST',
        KRW: 'KR',
        KPW: 'KP',
        KWD: 'KW',
        SLL: 'SL',
        SCR: 'SC',
        KZT: 'KZ',
        KYD: 'KY',
        SGD: 'SG',
        SEK: 'SE',
        SDG: 'SD',
        DOP: 'DO',
        DJF: 'DJ',
        YER: 'YE',
        DZD: 'DZ',
        UYU: 'UY',
        LBP: 'LB',
        LAK: 'LA',
        TWD: 'TW',
        TTD: 'TT',
        TRY: 'TR',
        LKR: 'LK',
        TOP: 'TO',
        LTL: 'LT',
        LRD: 'LR',
        LSL: 'LS',
        THB: 'TH',
        LYD: 'LY',
        AED: 'AE',
        AFN: 'AF',
        ISK: 'IS',
        IRR: 'IR',
        AMD: 'AM',
        ALL: 'AL',
        AOA: 'AO',
        ARS: 'AR',
        AWG: 'AW',
        INR: 'IN',
        AZN: 'AZ',
        IDR: 'ID',
        UAH: 'UA',
        QAR: 'QA',
        MZN: 'MZ',
    };

    exports.Preferences = void 0;
    (function (Preferences) {
        Preferences[Preferences["PAGE_SIZE"] = 50] = "PAGE_SIZE";
        Preferences[Preferences["MAX_NAV_SIZE"] = 3] = "MAX_NAV_SIZE";
        Preferences[Preferences["NOTIFICATION_DISMISS_TIMEOUT"] = 5000] = "NOTIFICATION_DISMISS_TIMEOUT";
        Preferences[Preferences["DEBOUNCE_TIME"] = 300] = "DEBOUNCE_TIME";
        Preferences[Preferences["INFINITE_SCROLL_OFFSET"] = 150] = "INFINITE_SCROLL_OFFSET";
    })(exports.Preferences || (exports.Preferences = {}));
    exports.LoadMoreMethod = void 0;
    (function (LoadMoreMethod) {
        LoadMoreMethod["PAGINATION"] = "pagination";
        LoadMoreMethod["LOAD_MORE"] = "load-more";
    })(exports.LoadMoreMethod || (exports.LoadMoreMethod = {}));
    exports.StatusBadgeColorMap = void 0;
    (function (StatusBadgeColorMap) {
        StatusBadgeColorMap["OPEN"] = "success";
        StatusBadgeColorMap["CLOSED"] = "danger";
        StatusBadgeColorMap["INVALID"] = "danger";
        StatusBadgeColorMap["VALID"] = "success";
        StatusBadgeColorMap["ENTERED"] = "primary";
        StatusBadgeColorMap["ACCEPTED"] = "success";
        StatusBadgeColorMap["APPROVED"] = "success";
        StatusBadgeColorMap["REJECTED"] = "danger";
        StatusBadgeColorMap["PROCESSED"] = "success";
        StatusBadgeColorMap["CANCELLED"] = "danger";
        StatusBadgeColorMap["CANCELLATION_PENDING"] = "danger";
        StatusBadgeColorMap["READY"] = "primary";
        StatusBadgeColorMap["ACKNOWLEDGED"] = "warning";
        StatusBadgeColorMap["DOWNLOADING"] = "warning";
        StatusBadgeColorMap["EXPIRED"] = "secondary";
        StatusBadgeColorMap["PENDING"] = "warning";
    })(exports.StatusBadgeColorMap || (exports.StatusBadgeColorMap = {}));
    exports.AvailableActions = void 0;
    (function (AvailableActions) {
        AvailableActions["APPROVE"] = "APPROVE";
        AvailableActions["REJECT"] = "REJECT";
        AvailableActions["CANCEL"] = "CANCEL";
        AvailableActions["DELETE"] = "DELETE";
        AvailableActions["EDIT"] = "EDIT";
        AvailableActions["CREATE"] = "CREATE";
    })(exports.AvailableActions || (exports.AvailableActions = {}));
    exports.Actions = void 0;
    (function (Actions) {
        Actions["APPROVE"] = "APPROVED";
        Actions["REJECT"] = "REJECTED";
    })(exports.Actions || (exports.Actions = {}));
    exports.BatchOrderActions = void 0;
    (function (BatchOrderActions) {
        BatchOrderActions["APPROVE"] = "APPROVED";
        BatchOrderActions["REJECT"] = "REJECTED";
        BatchOrderActions["CANCEL"] = "CANCELLED";
        BatchOrderActions["DELETE"] = "DELETED";
    })(exports.BatchOrderActions || (exports.BatchOrderActions = {}));
    exports.Status = void 0;
    (function (Status) {
        Status["OPEN"] = "OPEN";
        Status["CLOSED"] = "CLOSED";
        Status["INVALID"] = "INVALID";
        Status["VALID"] = "VALID";
        Status["ENTERED"] = "ENTERED";
        Status["READY"] = "READY";
        Status["ACCEPTED"] = "ACCEPTED";
        Status["APPROVED"] = "APPROVED";
        Status["REJECTED"] = "REJECTED";
        Status["CANCELLED"] = "CANCELLED";
        Status["CANCELLATION_PENDING"] = "CANCELLATION_PENDING";
        Status["PROCESSED"] = "PROCESSED";
        Status["ACKNOWLEDGED"] = "ACKNOWLEDGED";
        Status["DOWNLOADING"] = "DOWNLOADING";
        Status["EXPIRED"] = "EXPIRED";
        Status["PENDING"] = "PENDING";
        /**
         * PROCESSING is Front-end only, convert to `READY`, `ACKNOWLEDGED`,
         * and `DOWNLOADING` before sending to server.
         */
        Status["PROCESSING"] = "PROCESSING";
    })(exports.Status || (exports.Status = {}));
    exports.BatchUploadStatus = void 0;
    (function (BatchUploadStatus) {
        BatchUploadStatus["OPEN"] = "OPEN";
        BatchUploadStatus["DUPLICATE"] = "DUPLICATE";
        BatchUploadStatus["UPLOADING"] = "UPLOADING";
        BatchUploadStatus["DONE"] = "DONE";
    })(exports.BatchUploadStatus || (exports.BatchUploadStatus = {}));
    exports.ApprovalStatus = void 0;
    (function (ApprovalStatus) {
        ApprovalStatus["PENDING"] = "PENDING";
        ApprovalStatus["APPROVED"] = "APPROVED";
        ApprovalStatus["REJECTED"] = "REJECTED";
        ApprovalStatus["CANCELLED"] = "CANCELLED";
    })(exports.ApprovalStatus || (exports.ApprovalStatus = {}));
    exports.DuplicateBatchAction = void 0;
    (function (DuplicateBatchAction) {
        DuplicateBatchAction["SUBMIT"] = "SUBMIT";
        DuplicateBatchAction["DELETE"] = "DELETE";
    })(exports.DuplicateBatchAction || (exports.DuplicateBatchAction = {}));
    exports.ScheduleEndType = void 0;
    (function (ScheduleEndType) {
        ScheduleEndType["NEVER"] = "never";
        ScheduleEndType["ON"] = "on";
        ScheduleEndType["AFTER"] = "after";
    })(exports.ScheduleEndType || (exports.ScheduleEndType = {}));
    exports.Frequencies = void 0;
    (function (Frequencies) {
        Frequencies["ONCE"] = "ONCE";
        Frequencies["DAILY"] = "DAILY";
        Frequencies["WEEKLY"] = "WEEKLY";
        Frequencies["BIWEEKLY"] = "BIWEEKLY";
        Frequencies["MONTHLY"] = "MONTHLY";
        Frequencies["QUARTERLY"] = "QUARTERLY";
        Frequencies["YEARLY"] = "YEARLY";
    })(exports.Frequencies || (exports.Frequencies = {}));
    exports.PaymentModes = void 0;
    (function (PaymentModes) {
        PaymentModes["SINGLE"] = "SINGLE";
        PaymentModes["RECURRING"] = "RECURRING";
        PaymentModes["ALL"] = "ALL";
    })(exports.PaymentModes || (exports.PaymentModes = {}));
    var DefaultDebounceTime = 300;
    var SearchMinLength = 3;
    var today = new Date();
    /**
     * Label for each value is set using Angular recommended approach
     * https://angular.io/guide/i18n#select-among-alternative-text-messages
     * Template example
     * <span i18n="Schedule frequency list|List of available schedule frequencies@@bb-schedule-ui.frequency.list"
     * >{item.frequency.value, select, other {once} DAILY {daily} WEEKLY {weekly}}</span>
     */
    var frequencies = [
        {
            value: 'ONCE',
            every: '1',
        },
        {
            value: 'DAILY',
            every: '1',
        },
        {
            value: 'WEEKLY',
            every: '1',
        },
        {
            value: 'BIWEEKLY',
            every: '1',
        },
        {
            value: 'MONTHLY',
            every: '1',
        },
        {
            value: 'QUARTERLY',
            every: '1',
        },
        {
            value: 'YEARLY',
            every: '1',
        },
    ];
    var USStates = [
        { id: 'AL', name: 'Alabama' },
        { id: 'AK', name: 'Alaska' },
        { id: 'AS', name: 'American Samoa' },
        { id: 'AZ', name: 'Arizona' },
        { id: 'AR', name: 'Arkansas' },
        { id: 'CA', name: 'California' },
        { id: 'CO', name: 'Colorado' },
        { id: 'CT', name: 'Connecticut' },
        { id: 'DE', name: 'Delaware' },
        { id: 'DC', name: 'District Of Columbia' },
        { id: 'FM', name: 'Federated States Of Micronesia' },
        { id: 'FL', name: 'Florida' },
        { id: 'GA', name: 'Georgia' },
        { id: 'GU', name: 'Guam' },
        { id: 'HI', name: 'Hawaii' },
        { id: 'ID', name: 'Idaho' },
        { id: 'IL', name: 'Illinois' },
        { id: 'IN', name: 'Indiana' },
        { id: 'IA', name: 'Iowa' },
        { id: 'KS', name: 'Kansas' },
        { id: 'KY', name: 'Kentucky' },
        { id: 'LA', name: 'Louisiana' },
        { id: 'ME', name: 'Maine' },
        { id: 'MH', name: 'Marshall Islands' },
        { id: 'MD', name: 'Maryland' },
        { id: 'MA', name: 'Massachusetts' },
        { id: 'MI', name: 'Michigan' },
        { id: 'MN', name: 'Minnesota' },
        { id: 'MS', name: 'Mississippi' },
        { id: 'MO', name: 'Missouri' },
        { id: 'MT', name: 'Montana' },
        { id: 'NE', name: 'Nebraska' },
        { id: 'NV', name: 'Nevada' },
        { id: 'NH', name: 'New Hampshire' },
        { id: 'NJ', name: 'New Jersey' },
        { id: 'NM', name: 'New Mexico' },
        { id: 'NY', name: 'New York' },
        { id: 'NC', name: 'North Carolina' },
        { id: 'ND', name: 'North Dakota' },
        { id: 'MP', name: 'Northern Mariana Islands' },
        { id: 'OH', name: 'Ohio' },
        { id: 'OK', name: 'Oklahoma' },
        { id: 'OR', name: 'Oregon' },
        { id: 'PW', name: 'Palau' },
        { id: 'PA', name: 'Pennsylvania' },
        { id: 'PR', name: 'Puerto Rico' },
        { id: 'RI', name: 'Rhode Island' },
        { id: 'SC', name: 'South Carolina' },
        { id: 'SD', name: 'South Dakota' },
        { id: 'TN', name: 'Tennessee' },
        { id: 'TX', name: 'Texas' },
        { id: 'UT', name: 'Utah' },
        { id: 'VT', name: 'Vermont' },
        { id: 'VI', name: 'Virgin Islands' },
        { id: 'VA', name: 'Virginia' },
        { id: 'WA', name: 'Washington' },
        { id: 'WV', name: 'West Virginia' },
        { id: 'WI', name: 'Wisconsin' },
        { id: 'WY', name: 'Wyoming' },
    ];
    exports.BatchOrderError = void 0;
    (function (BatchOrderError) {
        BatchOrderError["BREACH_LIMIT"] = "BREACH_LIMIT";
        BatchOrderError["UNKNOWN"] = "UNKNOWN";
    })(exports.BatchOrderError || (exports.BatchOrderError = {}));
    exports.Period = void 0;
    (function (Period) {
        Period[Period["DAILY"] = 0] = "DAILY";
        Period[Period["WEEKLY"] = 1] = "WEEKLY";
        Period[Period["MONTHLY"] = 2] = "MONTHLY";
        Period[Period["QUARTERLY"] = 3] = "QUARTERLY";
        Period[Period["YEARLY"] = 4] = "YEARLY";
    })(exports.Period || (exports.Period = {}));
    exports.BreachedLimitType = void 0;
    (function (BreachedLimitType) {
        BreachedLimitType["PERIODIC"] = "PERIODIC";
        BreachedLimitType["TRANSACTIONAL"] = "TRANSACTIONAL";
        BreachedLimitType["GLOBAL_PERIODIC"] = "GLOBAL_PERIODIC";
        BreachedLimitType["GLOBAL_TRANSACTIONAL"] = "GLOBAL_TRANSACTIONAL";
    })(exports.BreachedLimitType || (exports.BreachedLimitType = {}));
    exports.BreachType = void 0;
    (function (BreachType) {
        BreachType["THRESHOLD"] = "THRESHOLD";
        BreachType["CONSUMPTION"] = "CONSUMPTION";
    })(exports.BreachType || (exports.BreachType = {}));
    var THEME_V2 = {
        name: 'THEME_V2',
        description: 'Switch to templates that support theme v2',
    };
    var MANUAL_BATCHES = {
        name: 'MANUAL_BATCHES',
        description: 'Features enabled when whole functionality of Manual Batches is implemented',
    };

    var getDateOnly = function (dateArg) {
        if (dateArg === void 0) { dateArg = new Date(); }
        var date = new Date(dateArg);
        var month = String(date.getMonth() + 1);
        var day = String(date.getDate());
        var year = String(date.getFullYear());
        return year + "-" + month.padStart(2, '0') + "-" + day.padStart(2, '0');
    };
    var getRelativeDate = function (next, ISOStringFormat) {
        var date = new Date();
        if (next) {
            date.setDate(date.getDate() + next);
        }
        return ISOStringFormat ? date.toISOString() : getDateOnly(date);
    };
    var datePart = function (date) {
        var normalisedDate = new Date();
        if (date) {
            if (typeof date === 'string') {
                normalisedDate = new Date(date);
            }
            else if (date instanceof Date) {
                normalisedDate = date;
            }
        }
        return getDateOnly(normalisedDate);
    };
    var scheduleOn = function (frequency, date) {
        switch (frequency) {
            case 'YEARLY':
                return date.getMonth() + 1;
            case 'MONTHLY':
                return date.getDate();
            default:
                return date.getDay() + 1;
        }
    };
    var getEndDate = function (frequency, startDate) {
        var freq = (frequency && frequency.value) || frequency;
        var today = startDate ? new Date(startDate) : new Date();
        switch (freq) {
            case exports.Frequencies.ONCE:
                return undefined;
            case exports.Frequencies.WEEKLY: {
                return new Date(today.getFullYear(), today.getMonth(), today.getDate() + 7).toISOString();
            }
            case exports.Frequencies.BIWEEKLY: {
                return new Date(today.getFullYear(), today.getMonth(), today.getDate() + 14).toISOString();
            }
            case exports.Frequencies.MONTHLY: {
                return new Date(today.getFullYear(), today.getMonth() + 1, today.getDate()).toISOString();
            }
            case exports.Frequencies.QUARTERLY: {
                return new Date(today.getFullYear(), today.getMonth() + 3, today.getDate()).toISOString();
            }
            case exports.Frequencies.YEARLY: {
                return new Date(today.getFullYear() + 1, today.getMonth(), today.getDate()).toISOString();
            }
            case exports.Frequencies.DAILY:
            default: {
                return new Date(today.getFullYear(), today.getMonth(), today.getDate() + 1).toISOString();
            }
        }
    };

    function scheduleEndTypeToggleDependants(value) {
        switch (value) {
            case exports.ScheduleEndType.ON:
                return [exports.ScheduleFields.endDate];
            case exports.ScheduleEndType.AFTER:
                return [exports.ScheduleFields.repeat];
            default:
                return;
        }
    }
    function scheduleFrequencyToggleDependants(value) {
        return value !== exports.Frequencies.ONCE ? [exports.ScheduleFields.endType] : undefined;
    }
    var onDestroyStartDate$;
    var onDestroyEndDate$;
    var getNgbTime = function (date) { return new Date(date.year, date.month - 1, date.day).getTime(); };
    var oneDay = 24 * 60 * 60 * 1000;
    function scheduleStartDateOnDestroyHook() {
        if (onDestroyStartDate$) {
            onDestroyStartDate$.next();
            onDestroyStartDate$.complete();
        }
        if (onDestroyEndDate$) {
            onDestroyEndDate$.next();
            onDestroyEndDate$.complete();
        }
    }
    function scheduleStartDateOnInitHook(_f) {
        var control = _f.control, group = _f.group, component = _f.component;
        onDestroyStartDate$ = new rxjs.Subject();
        if (group) {
            group.valueChanges
                .pipe(operators.takeUntil(onDestroyStartDate$), operators.pluck(exports.ScheduleFields.frequency), operators.distinctUntilChanged())
                .subscribe(function (value) {
                if (value === exports.Frequencies.ONCE) {
                    component.options.label = 'Execution date';
                }
                else {
                    component.options.label = 'Start on';
                }
                component.options.markDisabled = function (date) { return getNgbTime(date) < new Date().getTime() - oneDay; };
            });
        }
    }
    function scheduleEndDateOnInitHook(_f) {
        var control = _f.control, group = _f.group, component = _f.component;
        onDestroyEndDate$ = new rxjs.Subject();
        var startDate = group && group.get(exports.ScheduleFields.startDate);
        var frequency = group && group.get(exports.ScheduleFields.frequency);
        var endType = group && group.get(exports.ScheduleFields.endType);
        if (startDate && !startDate.pristine && frequency && control.pristine) {
            control.patchValue(getEndDate(frequency.value, startDate.value));
        }
        if (startDate && frequency && endType) {
            rxjs.combineLatest([
                startDate.valueChanges.pipe(operators.startWith(startDate.value), operators.distinctUntilChanged()),
                frequency.valueChanges.pipe(operators.startWith(frequency.value), operators.distinctUntilChanged()),
                endType.valueChanges.pipe(operators.startWith(endType.value), operators.distinctUntilChanged()),
            ])
                .pipe(operators.takeUntil(onDestroyEndDate$), operators.skip(1))
                .subscribe(function () {
                if (control) {
                    var endDate_1 = getEndDate(frequency.value, startDate.value);
                    control.patchValue(endDate_1);
                    component.options.markDisabled = function (date) { return getNgbTime(date) < new Date(endDate_1 || '').getTime(); };
                }
            });
        }
    }
    function toggleForAmountOptions(_, control, amountOptions) {
        var _a, _b, _c, _d;
        var selectedAccKind = control && control.parent ? (_a = control.parent.value) === null || _a === void 0 ? void 0 : _a.productKindName : null;
        var product = control && control.parent
            ? (_c = (_b = control.parent.value) === null || _b === void 0 ? void 0 : _b.accountData) === null || _c === void 0 ? void 0 : _c.defaultRecord
            : null;
        var isAmountOptionsZero = (_d = amountOptions === null || amountOptions === void 0 ? void 0 : amountOptions.creditCard) === null || _d === void 0 ? void 0 : _d.every(function (option) { return (option === null || option === void 0 ? void 0 : option.amountApiField)
            ? Number(product === null || product === void 0 ? void 0 : product[option.amountApiField]) === 0
            : true; });
        if (selectedAccKind === exports.ProductKinds.creditCard ||
            selectedAccKind === exports.ProductKinds.loanAccount) {
            var items = [exports.RemittanceInfoFields.amountOptions];
            if (selectedAccKind === exports.ProductKinds.creditCard && isAmountOptionsZero) {
                items.push(exports.RemittanceInfoFields.amountCurrencyGroup);
            }
            return [
                {
                    parent: exports.PaymentBaseFields.remittanceInfo,
                    items: items,
                },
            ];
        }
        return [
            {
                parent: exports.PaymentBaseFields.remittanceInfo,
                items: [
                    exports.RemittanceInfoFields.description,
                    exports.RemittanceInfoFields.amountCurrencyGroup,
                ],
            },
        ];
    }
    // Internal transfer onInit-onDestroy hooks
    var internalTransferDestroy$;
    function internalTransferScheduleFreqOnInitHook(_f) {
        var control = _f.control, group = _f.group, component = _f.component;
        var _a, _b, _c, _d;
        internalTransferDestroy$ = new rxjs.Subject();
        var initialOptions = component.options.options;
        var frequencyCtrl = (_b = (_a = group.parent) === null || _a === void 0 ? void 0 : _a.get(exports.PaymentBaseFields.remittanceInfo)) === null || _b === void 0 ? void 0 : _b.get('scheduleFrequency');
        var paymentType$ = (_d = (_c = group.parent) === null || _c === void 0 ? void 0 : _c.get('paymentType')) === null || _d === void 0 ? void 0 : _d.valueChanges;
        paymentType$ === null || paymentType$ === void 0 ? void 0 : paymentType$.pipe(operators.takeUntil(internalTransferDestroy$)).subscribe(function (paymentType) {
            if (paymentType === 'EXTERNAL_A2A') {
                var optionsWithoutDaily = initialOptions.filter(function (opt) { return opt.value !== exports.Frequencies.DAILY; });
                component.options.options = optionsWithoutDaily;
            }
            else {
                component.options.options = initialOptions;
            }
            component.toggleDependants();
        });
        frequencyCtrl === null || frequencyCtrl === void 0 ? void 0 : frequencyCtrl.valueChanges.pipe(operators.takeUntil(internalTransferDestroy$), operators.startWith(frequencyCtrl.value)).subscribe(function (scheduleFrequency) {
            var scheduleOptions = scheduleFrequency || initialOptions;
            component.options.options = scheduleOptions;
            var isFreqExistInOptions = scheduleOptions.find(function (_f) {
                var value = _f.value;
                return value === control.value;
            });
            // Check whether previously selected frequency is in options
            if (!isFreqExistInOptions) {
                control.setValue(component.options.defaultValue);
                component.toggleDependants();
            }
        });
    }
    function internalTransferOnDestroyHook() {
        if (internalTransferDestroy$) {
            internalTransferDestroy$.next();
            internalTransferDestroy$.complete();
        }
    }
    function internalTransferScheduleAlertOnInitHook(_f) {
        var group = _f.group, component = _f.component;
        var _a, _b;
        internalTransferDestroy$ = new rxjs.Subject();
        var config = component.config, options = component.options;
        (_b = (_a = group === null || group === void 0 ? void 0 : group.parent) === null || _a === void 0 ? void 0 : _a.get(exports.PaymentBaseFields.counterparty)) === null || _b === void 0 ? void 0 : _b.valueChanges.pipe(operators.filter(function (account) {
            var isCreditCardOrLoan = [
                exports.ProductKinds.creditCard,
                exports.ProductKinds.loanAccount,
            ].includes(account === null || account === void 0 ? void 0 : account.productKindName);
            config.hidden = !isCreditCardOrLoan;
            return isCreditCardOrLoan;
        }), operators.takeUntil(internalTransferDestroy$)).subscribe(function (account) {
            var _a, _b, _c, _d, _e;
            var dueDate = new Date((_b = (_a = account === null || account === void 0 ? void 0 : account.accountData) === null || _a === void 0 ? void 0 : _a.defaultRecord) === null || _b === void 0 ? void 0 : _b.minimumPaymentDueDate);
            if (dueDate) {
                var fullMonth = dueDate.toLocaleDateString('default', {
                    month: 'long',
                });
                var formattedDueDate = fullMonth + " " + dueDate.getDate() + ", " + dueDate.getFullYear();
                var alert = new Date().getTime() >= dueDate.getTime()
                    ? (_c = options.alerts) === null || _c === void 0 ? void 0 : _c.overdue
                    : (_d = options.alerts) === null || _d === void 0 ? void 0 : _d.undue;
                if (alert) {
                    alert.description = (_e = alert.description) === null || _e === void 0 ? void 0 : _e.replace('@@date', formattedDueDate);
                }
                component.options = Object.assign(Object.assign({}, options), (alert ? alert : {}));
            }
        });
    }
    function internalTransAmountOptToggleDependants(_, control) {
        var _a;
        var showFreqSwitch = control && control.parent
            ? (_a = control.parent.get('showFrequencySwitch')) === null || _a === void 0 ? void 0 : _a.value
            : null;
        var items = showFreqSwitch
            ? [exports.ScheduleFields.frequencySwitch]
            : [exports.ScheduleFields.frequency];
        return [
            {
                parent: exports.PaymentBaseFields.schedule,
                items: items,
            },
        ];
    }
    function internalTransScheduleStartDateOnInitHook(_f) {
        var control = _f.control, group = _f.group, component = _f.component;
        var _a, _b, _c;
        scheduleStartDateOnInitHook({ control: control, group: group, component: component });
        internalTransferDestroy$ = new rxjs.Subject();
        var options = component.options;
        var defaultDescription = options.description;
        component.options = Object.assign(Object.assign({}, options), { description: '' }); // No description until an account is selected
        var date$ = control === null || control === void 0 ? void 0 : control.valueChanges.pipe(operators.startWith(control.value));
        var account$ = (_b = (_a = group === null || group === void 0 ? void 0 : group.parent) === null || _a === void 0 ? void 0 : _a.get(exports.PaymentBaseFields.counterparty)) === null || _b === void 0 ? void 0 : _b.valueChanges.pipe(operators.startWith((_c = group.parent.get(exports.PaymentBaseFields.counterparty)) === null || _c === void 0 ? void 0 : _c.value), operators.filter(function (account) { return [exports.ProductKinds.creditCard, exports.ProductKinds.loanAccount].includes(account === null || account === void 0 ? void 0 : account.productKindName); }));
        rxjs.combineLatest([account$, date$])
            .pipe(operators.takeUntil(internalTransferDestroy$))
            .subscribe(function (_f) {
            var _g = __read(_f, 2), account = _g[0], date = _g[1];
            var _a, _b;
            var dueDate = new Date((_b = (_a = account === null || account === void 0 ? void 0 : account.accountData) === null || _a === void 0 ? void 0 : _a.defaultRecord) === null || _b === void 0 ? void 0 : _b.minimumPaymentDueDate).getTime();
            var executeDate = new Date(date).getTime();
            if (dueDate && executeDate) {
                component.options.description =
                    executeDate >= dueDate && dueDate >= new Date().getTime()
                        ? defaultDescription
                        : '';
            }
        });
    }
    function intrabankCheckboxOnInitHook(_f) {
        var control = _f.control, group = _f.group, component = _f.component;
        var _a, _b, _c;
        internalTransferDestroy$ = new rxjs.Subject();
        var contactNameCtrl = (_a = group.parent) === null || _a === void 0 ? void 0 : _a.get(exports.PaymentBaseFields.counterparty + "." + exports.CounterPartyFields.name);
        var contactNumberCtrl = (_b = group.parent) === null || _b === void 0 ? void 0 : _b.get(exports.PaymentBaseFields.counterparty + "." + exports.CounterPartyFields.accountNumber);
        var selectedContact = (_c = group.parent) === null || _c === void 0 ? void 0 : _c.get(exports.PaymentBaseFields.counterparty + "." + exports.HiddenFields.selectedBeneficiary);
        rxjs.combineLatest([
            contactNameCtrl === null || contactNameCtrl === void 0 ? void 0 : contactNameCtrl.valueChanges,
            contactNumberCtrl === null || contactNumberCtrl === void 0 ? void 0 : contactNumberCtrl.valueChanges,
            selectedContact === null || selectedContact === void 0 ? void 0 : selectedContact.valueChanges,
        ])
            .pipe(operators.takeUntil(internalTransferDestroy$))
            .subscribe(function (_f) {
            var _g = __read(_f, 3), typedName = _g[0], typedAccountNumber = _g[1], _h = _g[2], name = _h.name, accounts = _h.accounts;
            var _j = accounts[0], accountNumber = _j.accountNumber, email = _j.email, phoneNumber = _j.phoneNumber;
            var isFormValuesEqualToSavedContact = typedName === name &&
                [accountNumber, email, phoneNumber].includes(typedAccountNumber);
            component.options.disabled = isFormValuesEqualToSavedContact;
            if (isFormValuesEqualToSavedContact) {
                control.reset();
            }
        });
    }
    function internalTransferEndTypeOnInitHook(_f) {
        var group = _f.group, component = _f.component;
        var _a, _b;
        internalTransferDestroy$ = new rxjs.Subject();
        var initialOptions = component.options.options;
        var initialCssClasses = component.options.cssClasses;
        var paymentType$ = (_b = (_a = group.parent) === null || _a === void 0 ? void 0 : _a.get('paymentType')) === null || _b === void 0 ? void 0 : _b.valueChanges;
        paymentType$ === null || paymentType$ === void 0 ? void 0 : paymentType$.pipe(operators.takeUntil(internalTransferDestroy$)).subscribe(function (paymentType) {
            if (paymentType === 'EXTERNAL_A2A') {
                component.options.options = initialOptions.filter(function (opt) { return opt.value !== exports.ScheduleEndType.ON; });
                component.options.cssClasses = initialCssClasses.filter(function (i) { return i !== 'bb-schedule__end-type'; });
            }
            else {
                component.options.options = initialOptions;
                component.options.cssClasses = initialCssClasses;
            }
        });
    }
    function internalTransferRepeatOnInitHook(_f) {
        var group = _f.group, component = _f.component;
        var _a, _b;
        internalTransferDestroy$ = new rxjs.Subject();
        var initialCssClasses = component.options.cssClasses;
        var paymentType$ = (_b = (_a = group.parent) === null || _a === void 0 ? void 0 : _a.get('paymentType')) === null || _b === void 0 ? void 0 : _b.valueChanges;
        paymentType$ === null || paymentType$ === void 0 ? void 0 : paymentType$.pipe(operators.takeUntil(internalTransferDestroy$)).subscribe(function (paymentType) {
            component.options.cssClasses = __spreadArray(__spreadArray([], __read(initialCssClasses)), __read((paymentType === 'EXTERNAL_A2A'
                ? ['bb-schedule__repeat--two-option']
                : [])));
        });
    }

    function amountValidator(control) {
        return control.value &&
            control.value.amount > 0 &&
            control.value.currency.length > 0
            ? undefined
            : { invalidAmount: { value: control.value } };
    }
    function missingInListValidator(getIdsFn) {
        return function (control) {
            return getIdsFn().includes(control.value) || !control.value
                ? null
                : { missingInList: { value: control.value } };
        };
    }
    function pastDateValidator(control) {
        var selectedDate = new Date(control.value);
        return control.value &&
            today > selectedDate &&
            today.toDateString() !== selectedDate.toDateString()
            ? { pastDate: { value: control.value } }
            : null;
    }
    function maxValueTwoHundredValidator(control) {
        var value = parseFloat(control.value);
        return !isNaN(value) && value > 200
            ? { max: { max: 200, actual: control.value } }
            : null;
    }
    function minValueTwoValidator(control) {
        var value = parseFloat(control.value);
        return !isNaN(value) && value < 2
            ? { min: { min: 2, actual: control.value } }
            : null;
    }
    function endDateAfterStartDateValidator(control) {
        if (control.parent) {
            var parentControl = control.parent;
            var startDateControl = parentControl.get('startDate');
            var startDate = new Date(startDateControl.value);
            var endDate = new Date(control.value);
            return control.value &&
                startDate > endDate &&
                startDate.toDateString() !== endDate.toDateString()
                ? { lessThanStartDate: true }
                : undefined;
        }
        return;
    }
    function sameAccountsValidator(config) {
        return function (control) {
            var _a, _b, _c;
            var parentForm = (_a = control === null || control === void 0 ? void 0 : control.parent) === null || _a === void 0 ? void 0 : _a.parent;
            var debitAccountId = (_b = parentForm === null || parentForm === void 0 ? void 0 : parentForm.get(['initiator', 'id'])) === null || _b === void 0 ? void 0 : _b.value;
            var creditAccountId = (_c = parentForm === null || parentForm === void 0 ? void 0 : parentForm.get(['counterparty', 'id'])) === null || _c === void 0 ? void 0 : _c.value;
            if (control.value && debitAccountId && debitAccountId === creditAccountId) {
                return { sameDebitCreditAccountsSelected: true };
            }
            return null;
        };
    }
    function scheduledPaymentValidationMethod(control, _endType) {
        if (control.parent) {
            var parentControl = control.parent;
            var _e = parentControl && parentControl.value, endType = _e.endType, frequency = _e.frequency;
            return frequency.value !== 'ONCE' &&
                endType &&
                !control.value &&
                endType === _endType
                ? { required: true }
                : undefined;
        }
        return;
    }
    function requiredEndDateValidator(control) {
        return scheduledPaymentValidationMethod(control, 'on');
    }
    function requiredAfterValidator(control) {
        return scheduledPaymentValidationMethod(control, 'after');
    }
    function requiredEndTypeValidator(control) {
        if (control.parent) {
            var parentControl = control.parent;
            var _value = (parentControl && parentControl.value).frequency.value;
            return !control.value && _value && _value !== 'ONCE'
                ? { required: true }
                : undefined;
        }
        return;
    }
    function routingTransitNumberValidator(control) {
        var value = control.value;
        var errors = {
            pattern: false,
            size: false,
        };
        if (value) {
            value = value.toString(10);
            var p = function (str) { return parseInt(str, 10); };
            if (value.length !== 9) {
                errors.size = true;
            }
            var left = 3 * (p(value[0]) + p(value[3]) + p(value[6]));
            var mid = 7 * (p(value[1]) + p(value[4]) + p(value[7]));
            var right = p(value[2]) + p(value[5]) + p(value[8]);
            if ((left + mid + right) % 10 !== 0 && value.length >= 9) {
                errors.pattern = true;
            }
        }
        return errors.size || errors.pattern ? errors : null;
    }
    function noWhitespaceValidator(control) {
        var isWhitespace = (control.value || '').trim().length === 0;
        var isValid = !isWhitespace;
        return isValid ? null : { required: true };
    }
    function getSanctionedCurrencies(control) {
        var _a, _b, _c, _d;
        var inputFormSettings = (((_c = (_b = (_a = control === null || control === void 0 ? void 0 : control.parent) === null || _a === void 0 ? void 0 : _a.parent) === null || _b === void 0 ? void 0 : _b.get('inputFormFromSettings')) === null || _c === void 0 ? void 0 : _c.value) || {}).inputFormSettings;
        return (((_d = inputFormSettings === null || inputFormSettings === void 0 ? void 0 : inputFormSettings.find(function (setting) { return setting.key === 'currency'; })) === null || _d === void 0 ? void 0 : _d.values) || []);
    }
    function currencyValidatorFactory(currencies) {
        if (currencies === void 0) { currencies = []; }
        return function (control) {
            var sanctionedCurrencies = currencies.length
                ? currencies
                : getSanctionedCurrencies(control);
            if (!sanctionedCurrencies.length) {
                return null;
            }
            var pattern = "(" + sanctionedCurrencies.join('|') + ")";
            var regex = new RegExp(pattern);
            var isValid = regex.test(control.value && control.value.currency);
            return isValid ? null : { invalidCurrency: true };
        };
    }
    function accountsValidation(rootControlName) {
        return function (control) {
            var _a, _b;
            if (control.root && control.parent) {
                var rootControl = control.root;
                var fromControl = rootControl.get(rootControlName);
                var fromAccount = (_a = fromControl === null || fromControl === void 0 ? void 0 : fromControl.get('id')) === null || _a === void 0 ? void 0 : _a.value;
                var selectedAccount = (_b = control.parent.get('id')) === null || _b === void 0 ? void 0 : _b.value;
                return control.parent.value && fromAccount === selectedAccount
                    ? { sameAccount: true }
                    : null;
            }
            return null;
        };
    }
    function minimumOneAccount(control) {
        return control.controls.length > 0 ? null : { empty: true };
    }
    function amountGreaterThanZero(control) {
        return control.value > 0
            ? undefined
            : { invalidAmount: { value: control.value } };
    }

    var defaultInitiatorConfig = {
        name: exports.PaymentBaseFields.initiator,
        title: $localize(templateObject_1$e || (templateObject_1$e = __makeTemplateObject([":@@default-config.initiator-title:From"], [":@@default-config.initiator-title:From"]))),
        fields: [
            {
                type: exports.PaymentComponents.debitAccountSelector,
                name: exports.InitiatorFields.initiatorAccountGroup,
                options: {
                    placeholder: $localize(templateObject_2$d || (templateObject_2$d = __makeTemplateObject([":@@default-config.initiator-placeholder:Select an account"], [":@@default-config.initiator-placeholder:Select an account"]))),
                    cssClasses: ['col-12'],
                    validationMessages: [
                        {
                            message: $localize(templateObject_3$d || (templateObject_3$d = __makeTemplateObject([":@@default-config.invalid-account-message:Debit account is invalid"], [":@@default-config.invalid-account-message:Debit account is invalid"]))),
                            name: 'missingInList',
                        },
                        {
                            message: $localize(templateObject_4$d || (templateObject_4$d = __makeTemplateObject([":@@default-config.closed-permission-error-message:You can not do payments to new beneficiary from this account."], [":@@default-config.closed-permission-error-message:You can not do payments to new beneficiary from this account."]))),
                            name: 'hasOnlyClosedPaymentPermission',
                        },
                    ],
                },
            },
        ],
    };
    var defaultCounterPartyConfig = {
        name: exports.PaymentBaseFields.counterparty,
        fields: [
            {
                name: exports.CounterPartyFields.name,
                type: exports.PaymentComponents.beneficiarySelector,
                options: {
                    label: $localize(templateObject_5$c || (templateObject_5$c = __makeTemplateObject([":@@default-config.beneficiary-label:To"], [":@@default-config.beneficiary-label:To"]))),
                    placeholder: $localize(templateObject_6$c || (templateObject_6$c = __makeTemplateObject([":@@default-config.beneficiary-placeholder:Select a beneficiary"], [":@@default-config.beneficiary-placeholder:Select a beneficiary"]))),
                    saveNewContactLabel: $localize(templateObject_7$b || (templateObject_7$b = __makeTemplateObject([":@@default-config.new-contact-label:Save as a new contact"], [":@@default-config.new-contact-label:Save as a new contact"]))),
                    cssClasses: ['col-12'],
                    validationMessages: [
                        {
                            message: $localize(templateObject_8$b || (templateObject_8$b = __makeTemplateObject([":@@default-config.same-accounts-selected-error-message:Beneficiary is same as selected Debit account"], [":@@default-config.same-accounts-selected-error-message:Beneficiary is same as selected Debit account"]))),
                            name: 'sameDebitCreditAccountsSelected',
                        },
                    ],
                },
            },
            {
                name: exports.CounterPartyFields.accountNumber,
                type: exports.PaymentComponents.text,
                options: {
                    validators: [i1$1.Validators.required, i1$1.Validators.minLength(6)],
                    label: $localize(templateObject_9$b || (templateObject_9$b = __makeTemplateObject([":@@default-config.account-number-label:Account number"], [":@@default-config.account-number-label:Account number"]))),
                    validationMessages: [
                        {
                            name: 'minlength',
                            message: $localize(templateObject_10$b || (templateObject_10$b = __makeTemplateObject([":@@default-config.account-number-min-length-error-message:Account number should have minimum 6 characters"], [":@@default-config.account-number-min-length-error-message:Account number should have minimum 6 characters"]))),
                        },
                    ],
                    cssClasses: ['col-12'],
                },
            },
        ],
    };
    var defaultRemittanceInfoConfig = {
        name: exports.PaymentBaseFields.remittanceInfo,
        fields: [
            {
                type: exports.PaymentComponents.amount,
                name: exports.RemittanceInfoFields.amountCurrencyGroup,
                options: {
                    label: $localize(templateObject_11$b || (templateObject_11$b = __makeTemplateObject([":@@default-config.currency-label:Amount"], [":@@default-config.currency-label:Amount"]))),
                    currencies: ['GBP', 'EUR', 'USD'],
                    cssClasses: ['col-12'],
                },
            },
        ],
    };
    var defaultScheduleConfig = {
        name: exports.PaymentBaseFields.schedule,
        fields: [
            {
                name: exports.PaymentComponents.scheduleHeader,
                type: exports.PaymentComponents.scheduleHeader,
                options: {
                    label: $localize(templateObject_12$a || (templateObject_12$a = __makeTemplateObject([":@@default-config.schedule-header:Delivery"], [":@@default-config.schedule-header:Delivery"]))),
                },
            },
            {
                name: exports.ScheduleFields.frequency,
                type: exports.PaymentComponents.select,
                options: {
                    label: $localize(templateObject_13$9 || (templateObject_13$9 = __makeTemplateObject([":@@default-config.frequency-label:Frequency"], [":@@default-config.frequency-label:Frequency"]))),
                    validators: [i1$1.Validators.required],
                    options: [
                        {
                            label: $localize(templateObject_14$8 || (templateObject_14$8 = __makeTemplateObject([":@@default-config.once-frequency-label:Once"], [":@@default-config.once-frequency-label:Once"]))),
                            value: exports.Frequencies.ONCE,
                        },
                        {
                            label: $localize(templateObject_15$8 || (templateObject_15$8 = __makeTemplateObject([":@@default-config.daily-frequency-label:Daily"], [":@@default-config.daily-frequency-label:Daily"]))),
                            value: exports.Frequencies.DAILY,
                        },
                        {
                            label: $localize(templateObject_16$8 || (templateObject_16$8 = __makeTemplateObject([":@@default-config.weekly-frequency-label:Weekly"], [":@@default-config.weekly-frequency-label:Weekly"]))),
                            value: exports.Frequencies.WEEKLY,
                        },
                        {
                            label: $localize(templateObject_17$8 || (templateObject_17$8 = __makeTemplateObject([":@@default-config.biweekly-frequency-label:Biweekly"], [":@@default-config.biweekly-frequency-label:Biweekly"]))),
                            value: exports.Frequencies.BIWEEKLY,
                        },
                        {
                            label: $localize(templateObject_18$8 || (templateObject_18$8 = __makeTemplateObject([":@@default-config.monthly-frequency-label:Monthly"], [":@@default-config.monthly-frequency-label:Monthly"]))),
                            value: exports.Frequencies.MONTHLY,
                        },
                        {
                            label: $localize(templateObject_19$8 || (templateObject_19$8 = __makeTemplateObject([":@@default-config.quarterly-frequency-label:Quarterly"], [":@@default-config.quarterly-frequency-label:Quarterly"]))),
                            value: exports.Frequencies.QUARTERLY,
                        },
                        {
                            label: $localize(templateObject_20$8 || (templateObject_20$8 = __makeTemplateObject([":@@default-config.annually-frequency-label:Annually"], [":@@default-config.annually-frequency-label:Annually"]))),
                            value: exports.Frequencies.YEARLY,
                        },
                    ],
                    defaultValue: exports.Frequencies.ONCE,
                    cssClasses: ['d-inline-block', 'col-md-6', 'align-top'],
                    dependants: [exports.ScheduleFields.endType],
                    activateDependantsOn: scheduleFrequencyToggleDependants,
                },
            },
            {
                type: exports.PaymentComponents.date,
                name: exports.ScheduleFields.startDate,
                options: {
                    label: $localize(templateObject_21$8 || (templateObject_21$8 = __makeTemplateObject([":@@default-config.start-date-label:Start on"], [":@@default-config.start-date-label:Start on"]))),
                    cssClasses: ['d-inline-block', 'col-md-6', 'align-top'],
                    validators: [i1$1.Validators.required, pastDateValidator],
                    defaultValue: new Date().toISOString(),
                    validationMessages: [
                        {
                            name: 'pastDate',
                            message: $localize(templateObject_22$8 || (templateObject_22$8 = __makeTemplateObject([":@@default-config.past-date-error-message:Start date cannot be in the past"], [":@@default-config.past-date-error-message:Start date cannot be in the past"]))),
                        },
                    ],
                },
                hooks: {
                    onInit: scheduleStartDateOnInitHook,
                    onDestroy: scheduleStartDateOnDestroyHook,
                },
            },
            {
                name: exports.ScheduleFields.endType,
                type: exports.PaymentComponents.radio,
                options: {
                    label: $localize(templateObject_23$8 || (templateObject_23$8 = __makeTemplateObject([":@@default-config.end-type-label:End"], [":@@default-config.end-type-label:End"]))),
                    preselect: true,
                    isConditionalMandatory: true,
                    cssClasses: [
                        'd-inline-block',
                        'col-md-2',
                        'align-top',
                        'bb-schedule__end-type',
                    ],
                    defaultValue: exports.ScheduleEndType.NEVER,
                    options: [
                        {
                            label: $localize(templateObject_24$7 || (templateObject_24$7 = __makeTemplateObject([":@@default-config.never-end-type-label:Never"], [":@@default-config.never-end-type-label:Never"]))),
                            value: exports.ScheduleEndType.NEVER,
                        },
                        {
                            label: $localize(templateObject_25$7 || (templateObject_25$7 = __makeTemplateObject([":@@default-config.on-date-end-type-label:On date"], [":@@default-config.on-date-end-type-label:On date"]))),
                            value: exports.ScheduleEndType.ON,
                        },
                        {
                            label: $localize(templateObject_26$7 || (templateObject_26$7 = __makeTemplateObject([":@@default-config.after-end-type-label:After"], [":@@default-config.after-end-type-label:After"]))),
                            value: exports.ScheduleEndType.AFTER,
                        },
                    ],
                    dependants: [exports.ScheduleFields.endDate, exports.ScheduleFields.repeat],
                    activateDependantsOn: scheduleEndTypeToggleDependants,
                },
            },
            {
                type: exports.PaymentComponents.date,
                name: exports.ScheduleFields.endDate,
                options: {
                    cssClasses: [
                        'd-inline-block',
                        'col-md-10',
                        'align-top',
                        'bb-schedule__end-date',
                    ],
                    validators: [endDateAfterStartDateValidator],
                    validationMessages: [
                        {
                            name: 'required',
                            message: $localize(templateObject_27$7 || (templateObject_27$7 = __makeTemplateObject([":@@default-config.end-date-required-message:End date is required"], [":@@default-config.end-date-required-message:End date is required"]))),
                        },
                        {
                            name: 'lessThanStartDate',
                            message: $localize(templateObject_28$7 || (templateObject_28$7 = __makeTemplateObject([":@@default-config.end-date-less-start-date-message:End date cannot be before start date"], [":@@default-config.end-date-less-start-date-message:End date cannot be before start date"]))),
                        },
                    ],
                    isConditionalMandatory: true,
                },
                hooks: {
                    onInit: scheduleEndDateOnInitHook,
                },
            },
            {
                name: exports.ScheduleFields.repeat,
                type: exports.PaymentComponents.number,
                options: {
                    isConditionalMandatory: true,
                    description: $localize(templateObject_29$4 || (templateObject_29$4 = __makeTemplateObject([":@@default-config.repeat-schedule-description:times"], [":@@default-config.repeat-schedule-description:times"]))),
                    min: 2,
                    max: 200,
                    defaultValue: 2,
                    validators: [minValueTwoValidator, maxValueTwoHundredValidator],
                    validationMessages: [
                        {
                            name: 'required',
                            message: $localize(templateObject_30$4 || (templateObject_30$4 = __makeTemplateObject([":@@default-config.repeat-schedule-required-message:Value is required"], [":@@default-config.repeat-schedule-required-message:Value is required"]))),
                        },
                        {
                            name: 'min',
                            message: $localize(templateObject_31$4 || (templateObject_31$4 = __makeTemplateObject([":@@default-config.repeat-schedule-min--ocurrences-message:Value is below the minimum allowed occurrences (2)"], [":@@default-config.repeat-schedule-min--ocurrences-message:Value is below the minimum allowed occurrences (2)"]))),
                        },
                        {
                            name: 'max',
                            message: $localize(templateObject_32$4 || (templateObject_32$4 = __makeTemplateObject([":@@default-config.repeat-schedule-max--ocurrences-message:Value exceeds maximum allowed occurances (200)"], [":@@default-config.repeat-schedule-max--ocurrences-message:Value exceeds maximum allowed occurances (200)"]))),
                        },
                    ],
                    cssClasses: [
                        'd-inline-block',
                        'col-md-9',
                        'align-top',
                        'px-0',
                        'bb-schedule__repeat',
                    ],
                },
            },
        ],
    };
    var templateObject_1$e, templateObject_2$d, templateObject_3$d, templateObject_4$d, templateObject_5$c, templateObject_6$c, templateObject_7$b, templateObject_8$b, templateObject_9$b, templateObject_10$b, templateObject_11$b, templateObject_12$a, templateObject_13$9, templateObject_14$8, templateObject_15$8, templateObject_16$8, templateObject_17$8, templateObject_18$8, templateObject_19$8, templateObject_20$8, templateObject_21$8, templateObject_22$8, templateObject_23$8, templateObject_24$7, templateObject_25$7, templateObject_26$7, templateObject_27$7, templateObject_28$7, templateObject_29$4, templateObject_30$4, templateObject_31$4, templateObject_32$4;

    var SepaCountries = [
        'AD',
        'AT',
        'BE',
        'BG',
        'CH',
        'CY',
        'CZ',
        'DE',
        'DK',
        'EE',
        'ES',
        'FI',
        'FR',
        'GB',
        'GI',
        'GR',
        'HR',
        'HU',
        'IE',
        'IS',
        'IT',
        'LI',
        'LT',
        'LU',
        'LV',
        'MC',
        'MT',
        'NL',
        'NO',
        'PL',
        'PT',
        'RO',
        'SE',
        'SI',
        'SK',
        'SM',
        'VA',
    ];
    var BB_PAYMENT_CONFIG = new i0.InjectionToken('BB_PAYMENT_CONFIG');
    /**
     * @deprecated Will be removed in widget collection v3.11.0
     */
    var BB_MULTI_PAYMENT_CONFIG = new i0.InjectionToken('BB_MULTI_PAYMENT_CONFIG');
    // eslint-disable-next-line @typescript-eslint/naming-convention
    var US_States = USStates.map(function (_a) {
        var name = _a.name, id = _a.id;
        return ({ label: name, value: id });
    });
    var BB_REGISTERED_PAYMENT_CONFIGS = new i0.InjectionToken('BB_PAYMENT_REGISTERED_CONFIGS');
    var BB_PAYORD_OMNI_PAYMENT_CONFIG_TOKEN = new i0.InjectionToken('BB_PAYORD_OMNI_PAYMENT_CONFIG_TOKEN');
    var payordOmniPaymentDefaults = {
        businessConfig: {
            functionName: 'Payment Templates',
            resourceName: 'Payments',
        },
    };
    var PayordOmniPaymentConfigProvider = [
        {
            provide: BB_PAYORD_OMNI_PAYMENT_CONFIG_TOKEN,
            useValue: payordOmniPaymentDefaults,
        },
    ];
    var DefaultClosedPaymentBusFnSuffix = ' - closed';
    var DefaultIntraCompanyPaymentBusFnSuffix = ' - Intracompany';
    var BB_CLOSED_PAYMENT_BUS_FN_SUFFIX = new i0.InjectionToken('Suffix for closed payment business functions');
    var BB_INTRACOMPANY_PAYMENT_BUS_FN_SUFFIX = new i0.InjectionToken('Suffix for intracompany payment business functions');
    var BB_PAYORD_PAYMENT_ERROR_MESSAGES_TOKEN = new i0.InjectionToken('BB_PAYORD_PAYMENT_ERROR_MESSAGES_TOKEN');
    exports.P2PLimitErrorKeys = void 0;
    (function (P2PLimitErrorKeys) {
        P2PLimitErrorKeys["minLimit"] = "p2p.payveris.limit_violation.min_payment_amount";
        P2PLimitErrorKeys["maxLimit"] = "p2p.payveris.limit_violation.max_payment_amount";
    })(exports.P2PLimitErrorKeys || (exports.P2PLimitErrorKeys = {}));
    var payordMessagesDefaults = {
        errorData: [
            {
                key: 'arrangements.api.invalid.iban',
                message: 'Entered IBAN is invalid',
            },
        ],
    };
    var PayordPaymentErrorsConfigProvider = [
        {
            provide: BB_PAYORD_PAYMENT_ERROR_MESSAGES_TOKEN,
            useValue: payordMessagesDefaults,
        },
    ];
    var bicCodeValidationPattern = '^[A-Z]{6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3})?$';
    var defaultPaymentSuccessEventName = 'bb.payment.success.event';
    var forbiddenStatus = 403;

    var toInteger = function (value) { return parseInt(value, 10) || 0; };
    var modelItemToBoolean = function (value) {
        if (typeof value === 'boolean') {
            return value;
        }
        return value === 'true';
    };
    var isObjectTruthy = function (obj) { return obj && Object.keys(obj).some(function (key) { return !!obj[key]; }); };
    function getKeysWithValue(obj) {
        return Object.entries(obj).reduce(function (acc, _j) {
            var _k = __read(_j, 2), addrKey = _k[0], addrValue = _k[1];
            if (addrValue) {
                acc.push(addrKey);
            }
            return acc;
        }, []);
    }
    function shouldRemoveCountryFromBeneficiaryBankAddress(address) {
        var shouldRemoveCountry = false;
        if (address) {
            var keysWithValue = getKeysWithValue(address);
            shouldRemoveCountry =
                keysWithValue.length === 1 && keysWithValue.indexOf('country') !== -1;
        }
        return shouldRemoveCountry;
    }
    function isCounterpartyObjectEquals(o1, o2) {
        var _a, _b, _c, _d, _e, _f;
        var branchCode1 = (_a = o1 === null || o1 === void 0 ? void 0 : o1.creditorBank) === null || _a === void 0 ? void 0 : _a.bankBranchCode;
        var branchCode2 = (_b = o2 === null || o2 === void 0 ? void 0 : o2.creditorBank) === null || _b === void 0 ? void 0 : _b.bankBranchCode;
        if (branchCode1 === undefined || branchCode2 === undefined) {
            (_c = o1 === null || o1 === void 0 ? void 0 : o1.creditorBank) === null || _c === void 0 ? true : delete _c.bankBranchCode;
            (_d = o2 === null || o2 === void 0 ? void 0 : o2.creditorBank) === null || _d === void 0 ? true : delete _d.bankBranchCode;
        }
        // Remove `selectedContact` from comparison (edited payment doesn't have beneficiary's account id)
        var toExclude1 = o1.selectedContact, rest1 = __rest(o1, ["selectedContact"]);
        var toExclude2 = o2.selectedContact, rest2 = __rest(o2, ["selectedContact"]);
        o1 = rest1;
        o2 = rest2;
        if (!o1.hideBeneficiaryFields || !o2.hideBeneficiaryFields) {
            var toExclude3 = o1.hideBeneficiaryFields, rest3 = __rest(o1, ["hideBeneficiaryFields"]);
            var toExclude4 = o2.hideBeneficiaryFields, rest4 = __rest(o2, ["hideBeneficiaryFields"]);
            o1 = rest3;
            o2 = rest4;
        }
        if (shouldRemoveCountryFromBeneficiaryBankAddress((_e = o1.creditorBank) === null || _e === void 0 ? void 0 : _e.postalAddress) ||
            shouldRemoveCountryFromBeneficiaryBankAddress((_f = o2.creditorBank) === null || _f === void 0 ? void 0 : _f.postalAddress)) {
            var _g = o1.creditorBank.postalAddress, toExclude5 = _g.country, rest5 = __rest(_g, ["country"]);
            var _h = o2.creditorBank.postalAddress, toExclude6 = _h.country, rest6 = __rest(_h, ["country"]);
            o1.creditorBank.postalAddress = rest5;
            o2.creditorBank.postalAddress = rest6;
        }
        return (o1.id && o1.id === o2.id) || objectEquals(o1, o2);
    }
    function objectEquals(o1, o2) {
        return (JSON.stringify(o1, falsyValueReplacer) ===
            JSON.stringify(o2, falsyValueReplacer));
    }
    function falsyValueReplacer(_, val) {
        return val || '';
    }
    var isAddressTruthy = function (address) {
        var _j = address || {}, _k = _j.addressLine1, addressLine1 = _k === void 0 ? '' : _k, _l = _j.addressLine2, addressLine2 = _l === void 0 ? '' : _l, _m = _j.postCode, postCode = _m === void 0 ? '' : _m, _o = _j.town, town = _o === void 0 ? '' : _o;
        return isObjectTruthy({ addressLine1: addressLine1, addressLine2: addressLine2, postCode: postCode, town: town });
    };
    var filterObjectValues = function (obj) {
        for (var key in obj) {
            if (!obj[key] || !isObjectTruthy(obj[key])) {
                delete obj[key];
            }
        }
        return obj;
    };
    var addressToString = function (address) { return [
        address["addressLine1"],
        address["addressLine2"],
        address["streetName"],
        address["postCode"],
        address["town"],
        address["countrySubDivision"],
    ]
        .filter(Boolean)
        .join(', '); };
    function stripSpaces(str) {
        if (str === void 0) { str = ''; }
        return str === null || str === void 0 ? void 0 : str.replace(/\s/g, '');
    }
    function toNumber(item) {
        return parseFloat(item) || 0;
    }
    function parseString(str) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        var i = 0;
        return str.replace(/%s/g, function () { return args[i++]; });
    }

    function ibanCountryValidator(countries) {
        if (countries === void 0) { countries = []; }
        return function (control) {
            var _a, _b;
            var parentForm = (_a = control.parent) === null || _a === void 0 ? void 0 : _a.parent;
            var sanctionedCountries = countries.length
                ? countries
                : (_b = parentForm === null || parentForm === void 0 ? void 0 : parentForm.get(exports.HiddenFields.sanctionedCountries)) === null || _b === void 0 ? void 0 : _b.value;
            var countryControl = parentForm === null || parentForm === void 0 ? void 0 : parentForm.get([
                exports.PaymentBaseFields.counterparty,
                exports.CounterPartyFields.creditorBank,
                exports.CounterPartyFields.postalAddress,
                exports.CounterPartyFields.country,
            ]);
            if (!(sanctionedCountries === null || sanctionedCountries === void 0 ? void 0 : sanctionedCountries.length))
                return ibanLib.isValidIBANFormControl;
            var isInvalidIban = ibanLib.isValidIBANFormControl(control);
            if (isInvalidIban) {
                return { invalidIban: { value: control.value } };
            }
            else {
                var regexStr = (countryControl === null || countryControl === void 0 ? void 0 : countryControl.value) || sanctionedCountries.join('|');
                var regex = new RegExp("^(" + regexStr + ")\\w+", 'i');
                return regex.test(stripSpaces(control.value))
                    ? null
                    : { invalidIbanCountry: { value: control.value } };
            }
        };
    }

    var counterParty$8 = {
        name: exports.PaymentBaseFields.counterparty,
        fields: [
            {
                name: exports.PaymentComponents.beneficiaryGroupHeader,
                type: exports.PaymentComponents.beneficiaryGroupHeader,
                options: {
                    label: $localize(templateObject_1$d || (templateObject_1$d = __makeTemplateObject([":@@sepa-config.beneficiary.header-label:To"], [":@@sepa-config.beneficiary.header-label:To"]))),
                    hasDynamicTitle: true,
                },
            },
            {
                name: exports.CounterPartyFields.name,
                type: exports.PaymentComponents.beneficiarySelector,
                options: {
                    placeholder: $localize(templateObject_2$c || (templateObject_2$c = __makeTemplateObject([":@@sepa-config.beneficiary-selector-placeholder:Select a beneficiary"], [":@@sepa-config.beneficiary-selector-placeholder:Select a beneficiary"]))),
                    saveNewContactLabel: $localize(templateObject_3$c || (templateObject_3$c = __makeTemplateObject([":@@sepa-config.new-contact-label:Save as a new contact"], [":@@sepa-config.new-contact-label:Save as a new contact"]))),
                    cssClasses: ['col-12'],
                    validationMessages: [
                        {
                            message: $localize(templateObject_4$c || (templateObject_4$c = __makeTemplateObject([":@@sepa-config.same-accounts-selected-error-message:Beneficiary is same as selected Debit account"], [":@@sepa-config.same-accounts-selected-error-message:Beneficiary is same as selected Debit account"]))),
                            name: 'sameDebitCreditAccountsSelected',
                        },
                    ],
                },
            },
            {
                name: exports.CounterPartyFields.accountNumber,
                type: exports.PaymentComponents.text,
                options: {
                    validators: [i1$1.Validators.required, ibanCountryValidator(SepaCountries)],
                    label: $localize(templateObject_5$b || (templateObject_5$b = __makeTemplateObject([":@@sepa-config.beneficiary.iban-label:IBAN"], [":@@sepa-config.beneficiary.iban-label:IBAN"]))),
                    isIban: true,
                    cssClasses: ['d-inline-block', 'col-md-6', 'align-top'],
                    validationMessages: [
                        {
                            message: $localize(templateObject_6$b || (templateObject_6$b = __makeTemplateObject([":@@sepa-config.iban-country-error-message:Invalid IBAN"], [":@@sepa-config.iban-country-error-message:Invalid IBAN"]))),
                            name: 'invalidIbanCountry',
                        },
                    ],
                },
            },
        ],
    };
    var remittanceInfo$a = {
        name: exports.PaymentBaseFields.remittanceInfo,
        title: $localize(templateObject_7$a || (templateObject_7$a = __makeTemplateObject([":@@sepa-config.remittance-info-title:Payment details"], [":@@sepa-config.remittance-info-title:Payment details"]))),
        fields: [
            {
                type: exports.PaymentComponents.amount,
                name: exports.RemittanceInfoFields.amountCurrencyGroup,
                options: {
                    label: $localize(templateObject_8$a || (templateObject_8$a = __makeTemplateObject([":@@sepa-config.amount-label:Amount"], [":@@sepa-config.amount-label:Amount"]))),
                    currencies: ['EUR'],
                    cssClasses: ['col-12'],
                },
            },
        ],
    };
    var paymentInformation$2 = {
        name: 'paymentInformation',
        title: $localize(templateObject_9$a || (templateObject_9$a = __makeTemplateObject([":@@sepa-config.information-title:Payment information"], [":@@sepa-config.information-title:Payment information"]))),
        fields: [
            {
                name: exports.CounterPartyFields.remittanceInformation,
                type: exports.PaymentComponents.textarea,
                options: {
                    label: $localize(templateObject_10$a || (templateObject_10$a = __makeTemplateObject([":@@sepa-config.remittance-info-label:Description"], [":@@sepa-config.remittance-info-label:Description"]))),
                    helperText: $localize(templateObject_11$a || (templateObject_11$a = __makeTemplateObject([":@@sepa-config.remittance-info-helper-text: (optional)"], [":@@sepa-config.remittance-info-helper-text: (optional)"]))),
                    placeholder: $localize(templateObject_12$9 || (templateObject_12$9 = __makeTemplateObject([":@@sepa-config.remittance-info-placeholder:Enter payment description"], [":@@sepa-config.remittance-info-placeholder:Enter payment description"]))),
                    showCharCounter: true,
                    minLength: 0,
                    rows: 3,
                    maxLength: 140,
                    cols: 50,
                    cssClasses: ['d-inline-block', 'col-md-8'],
                    mapToField: exports.PaymentBaseFields.counterparty,
                },
            },
        ],
    };
    var SEPA = {
        fields: [
            defaultInitiatorConfig,
            remittanceInfo$a,
            counterParty$8,
            paymentInformation$2,
            defaultScheduleConfig,
        ],
        name: $localize(templateObject_13$8 || (templateObject_13$8 = __makeTemplateObject([":@@sepa-config.name:SEPA CT Transfer"], [":@@sepa-config.name:SEPA CT Transfer"]))),
        businessFunction: 'SEPA CT',
        paymentType: 'SEPA_CREDIT_TRANSFER',
        options: {
            closedPaymentBusFns: ['SEPA CT - closed,SEPA CT - Intracompany'],
        },
    };
    var templateObject_1$d, templateObject_2$c, templateObject_3$c, templateObject_4$c, templateObject_5$b, templateObject_6$b, templateObject_7$a, templateObject_8$a, templateObject_9$a, templateObject_10$a, templateObject_11$a, templateObject_12$9, templateObject_13$8;

    var initiator$8 = {
        name: exports.PaymentBaseFields.initiator,
        fields: [
            {
                type: exports.PaymentComponents.internalAccountSelector,
                name: exports.InitiatorFields.initiatorAccountGroup,
                options: {
                    label: $localize(templateObject_1$c || (templateObject_1$c = __makeTemplateObject([":@@internal-config.initiator-label:From"], [":@@internal-config.initiator-label:From"]))),
                    placeholder: $localize(templateObject_2$b || (templateObject_2$b = __makeTemplateObject([":@@internal-config.initiator-placeholder:Select an account"], [":@@internal-config.initiator-placeholder:Select an account"]))),
                    cssClasses: ['col-12', 'bb-block', 'bb-block--lg'],
                    productKinds: [
                        {
                            productKind: exports.ProductKinds.savingsAccount,
                            balance: {
                                apiField: exports.AccountBalances.available,
                                label: $localize(templateObject_3$b || (templateObject_3$b = __makeTemplateObject([":@@internal-config.available-balance-label:Available Balance"], [":@@internal-config.available-balance-label:Available Balance"]))),
                            },
                        },
                        {
                            productKind: exports.ProductKinds.currentAccount,
                            balance: {
                                apiField: exports.AccountBalances.current,
                                label: $localize(templateObject_4$b || (templateObject_4$b = __makeTemplateObject([":@@internal-config.current-balance-label:Current Balance"], [":@@internal-config.current-balance-label:Current Balance"]))),
                            },
                        },
                        {
                            productKind: exports.ProductKinds.loanAccount,
                            balance: {
                                label: $localize(templateObject_5$a || (templateObject_5$a = __makeTemplateObject([":@@internal-config.loan-balance-label:Current Balance"], [":@@internal-config.loan-balance-label:Current Balance"]))),
                            },
                        },
                    ],
                    mapItems: function (accounts) { return accounts.filter(function (account) { return ['EUR', 'AED', 'USD'].includes((account === null || account === void 0 ? void 0 : account.currency) || ''); }); },
                    connectedAccounts: true,
                    connectedAccountsSubHeader: $localize(templateObject_6$a || (templateObject_6$a = __makeTemplateObject([":@@internal-config.initiator-subheader:Connected Accounts"], [":@@internal-config.initiator-subheader:Connected Accounts"]))),
                    preselect: true,
                },
            },
        ],
    };
    var counterParty$7 = {
        name: exports.PaymentBaseFields.counterparty,
        fields: [
            {
                type: exports.PaymentComponents.internalAccountSelector,
                name: exports.CounterPartyFields.counterPartyAccountGroup,
                options: {
                    label: $localize(templateObject_7$9 || (templateObject_7$9 = __makeTemplateObject([":@@internal-config.beneficiary-label:To"], [":@@internal-config.beneficiary-label:To"]))),
                    placeholder: $localize(templateObject_8$9 || (templateObject_8$9 = __makeTemplateObject([":@@internal-config.beneficiary-placeholder:Select an account"], [":@@internal-config.beneficiary-placeholder:Select an account"]))),
                    cssClasses: ['col-12', 'bb-block', 'bb-block--lg'],
                    productKinds: [
                        {
                            productKind: exports.ProductKinds.savingsAccount,
                            balance: {
                                apiField: exports.AccountBalances.available,
                                label: $localize(templateObject_9$9 || (templateObject_9$9 = __makeTemplateObject([":@@internal-config.beneficiary.available-balance-label:Available Balance"], [":@@internal-config.beneficiary.available-balance-label:Available Balance"]))),
                            },
                        },
                        {
                            productKind: exports.ProductKinds.currentAccount,
                            balance: {
                                apiField: exports.AccountBalances.current,
                                label: $localize(templateObject_10$9 || (templateObject_10$9 = __makeTemplateObject([":@@internal-config.beneficiary.current-balance-label:Current Balance"], [":@@internal-config.beneficiary.current-balance-label:Current Balance"]))),
                            },
                        },
                        {
                            productKind: exports.ProductKinds.loanAccount,
                            balance: {
                                label: $localize(templateObject_11$9 || (templateObject_11$9 = __makeTemplateObject([":@@internal-config.beneficiary.loan-balance-label:Current Balance"], [":@@internal-config.beneficiary.loan-balance-label:Current Balance"]))),
                            },
                        },
                    ],
                    connectedAccountsSubHeader: $localize(templateObject_12$8 || (templateObject_12$8 = __makeTemplateObject([":@@internal-config.beneficiary-subheader:Connected Accounts"], [":@@internal-config.beneficiary-subheader:Connected Accounts"]))),
                    connectedAccounts: true,
                    dependants: [
                        {
                            parent: exports.PaymentBaseFields.remittanceInfo,
                            items: [
                                exports.RemittanceInfoFields.description,
                                exports.RemittanceInfoFields.amountCurrencyGroup,
                                exports.RemittanceInfoFields.amountOptions,
                            ],
                        },
                    ],
                    activateDependantsOn: function (value, control) {
                        var _a, _b;
                        return toggleForAmountOptions(value, control, (_b = (_a = remittanceInfo$9.fields[1]) === null || _a === void 0 ? void 0 : _a.options) === null || _b === void 0 ? void 0 : _b.amountOptions);
                    },
                    validationMessages: [
                        {
                            name: 'required',
                            message: $localize(templateObject_13$7 || (templateObject_13$7 = __makeTemplateObject([":@@internal-config.beneficiary.account-required-message:Please select an account from the list to transfer to"], [":@@internal-config.beneficiary.account-required-message:Please select an account from the list to transfer to"]))),
                        },
                    ],
                },
            },
        ],
    };
    var scheduleFrequencyForAmountOption = [
        {
            label: $localize(templateObject_14$7 || (templateObject_14$7 = __makeTemplateObject([":@@internal-config.once-frequency-label:Once"], [":@@internal-config.once-frequency-label:Once"]))),
            value: exports.Frequencies.ONCE,
        },
        {
            label: $localize(templateObject_15$7 || (templateObject_15$7 = __makeTemplateObject([":@@internal-config.monthly-frequency-label:Monthly"], [":@@internal-config.monthly-frequency-label:Monthly"]))),
            value: exports.Frequencies.MONTHLY,
        },
    ];
    var remittanceInfo$9 = {
        name: exports.PaymentBaseFields.remittanceInfo,
        fields: [
            {
                type: exports.PaymentComponents.header,
                name: exports.PaymentComponents.header,
                options: {
                    cssClasses: ['col-12', 'pb-0', 'pt-2', 'bb-fieldset__heading'],
                    heading: $localize(templateObject_16$7 || (templateObject_16$7 = __makeTemplateObject([":@@internal-config.remittance-info-heading:Payment details "], [":@@internal-config.remittance-info-heading:Payment details "]))),
                    headingType: 'h2',
                    headingClasses: ['mb-0'],
                    separatorLine: true,
                },
            },
            {
                type: exports.PaymentComponents.internalAmountOptions,
                name: exports.RemittanceInfoFields.amountOptions,
                hidden: true,
                options: {
                    cssClasses: ['col-12', 'pb-0'],
                    isConditionalMandatory: true,
                    noBalanceText: $localize(templateObject_17$7 || (templateObject_17$7 = __makeTemplateObject([":@@internal-config.no-balance-text:You don\u2019t have any amount due on this credit card account."], [":@@internal-config.no-balance-text:You don\u2019t have any amount due on this credit card account."]))),
                    amountInputClassName: 'bb-amount-input__field--large',
                    autoDecimal: true,
                    amountOptions: {
                        cssClasses: ['pl-2'],
                        creditCard: [
                            {
                                label: $localize(templateObject_18$7 || (templateObject_18$7 = __makeTemplateObject([":@@internal-config.remittance-current-balance-label:Current balance"], [":@@internal-config.remittance-current-balance-label:Current balance"]))),
                                description: $localize(templateObject_19$7 || (templateObject_19$7 = __makeTemplateObject([":@@internal-config.remittance-current-balance-description:The balance plus any activity since the latest billing cycle"], [":@@internal-config.remittance-current-balance-description:The balance plus any activity since the latest billing cycle"]))),
                                amountApiField: 'bookedBalance',
                                scheduleFrequency: scheduleFrequencyForAmountOption,
                                showFrequencySwitch: true,
                            },
                            {
                                label: $localize(templateObject_20$7 || (templateObject_20$7 = __makeTemplateObject([":@@internal-config.min-payment-label:Minimum payment due"], [":@@internal-config.min-payment-label:Minimum payment due"]))),
                                description: $localize(templateObject_21$7 || (templateObject_21$7 = __makeTemplateObject([":@@internal-config.min-payment-description:5% of the outstanding balance"], [":@@internal-config.min-payment-description:5% of the outstanding balance"]))),
                                amountApiField: 'minimumPayment',
                                scheduleFrequency: scheduleFrequencyForAmountOption,
                                showFrequencySwitch: true,
                            },
                            {
                                label: $localize(templateObject_22$7 || (templateObject_22$7 = __makeTemplateObject([":@@internal-config.other-amount-label:Other amount"], [":@@internal-config.other-amount-label:Other amount"]))),
                                description: $localize(templateObject_23$7 || (templateObject_23$7 = __makeTemplateObject([":@@internal-config.other-amount-description:Enter amount manually"], [":@@internal-config.other-amount-description:Enter amount manually"]))),
                                hasCustomAmountInput: true,
                                scheduleFrequency: scheduleFrequencyForAmountOption,
                                showFrequencySwitch: true,
                            },
                        ],
                        loan: [
                            {
                                label: $localize(templateObject_24$6 || (templateObject_24$6 = __makeTemplateObject([":@@internal-config.loan.full-amount-label:Full amount"], [":@@internal-config.loan.full-amount-label:Full amount"]))),
                                description: $localize(templateObject_25$6 || (templateObject_25$6 = __makeTemplateObject([":@@internal-config.loan.full-amount-description:The principal plus interests of the loan"], [":@@internal-config.loan.full-amount-description:The principal plus interests of the loan"]))),
                                amountApiField: 'bookedBalance',
                                scheduleFrequency: scheduleFrequencyForAmountOption,
                            },
                            {
                                label: $localize(templateObject_26$6 || (templateObject_26$6 = __makeTemplateObject([":@@internal-config.loan.other-amount-label:Other amount"], [":@@internal-config.loan.other-amount-label:Other amount"]))),
                                description: $localize(templateObject_27$6 || (templateObject_27$6 = __makeTemplateObject([":@@internal-config.loan.other-amount-description:Enter amount manually"], [":@@internal-config.loan.other-amount-description:Enter amount manually"]))),
                                hasCustomAmountInput: true,
                                scheduleFrequency: scheduleFrequencyForAmountOption,
                                showFrequencySwitch: true,
                            },
                        ],
                    },
                    validationMessages: [
                        {
                            name: 'invalidAmount',
                            message: $localize(templateObject_28$6 || (templateObject_28$6 = __makeTemplateObject([":@@internal-config.invalid-amount-message:Please select an amount to transfer"], [":@@internal-config.invalid-amount-message:Please select an amount to transfer"]))),
                        },
                        {
                            name: 'required',
                            message: $localize(templateObject_29$3 || (templateObject_29$3 = __makeTemplateObject([":@@internal-config.required-amount-message:Please add amount of this transfer"], [":@@internal-config.required-amount-message:Please add amount of this transfer"]))),
                        },
                    ],
                    dependants: [
                        {
                            parent: exports.PaymentBaseFields.schedule,
                            items: [exports.ScheduleFields.frequency, exports.ScheduleFields.frequencySwitch],
                        },
                    ],
                    keepDependantsOnHide: true,
                    activateDependantsOn: internalTransAmountOptToggleDependants,
                },
            },
            {
                type: exports.PaymentComponents.compactAmount,
                name: exports.RemittanceInfoFields.amountCurrencyGroup,
                options: {
                    label: 'Amount',
                    cssClasses: [
                        'bb-amount-input__field--large',
                        'bb-block',
                        'bb-block--lg',
                        'col-md-6',
                    ],
                    currency: 'USD',
                    autoDecimal: true,
                    keepValueOnHidden: true,
                    validationMessages: [
                        {
                            name: 'invalidAmount',
                            message: $localize(templateObject_30$3 || (templateObject_30$3 = __makeTemplateObject([":@@internal-config.invalid.compact-amount-message:Please add amount of this transfer"], [":@@internal-config.invalid.compact-amount-message:Please add amount of this transfer"]))),
                        },
                    ],
                },
            },
            {
                type: exports.PaymentComponents.textarea,
                name: exports.RemittanceInfoFields.description,
                options: {
                    label: $localize(templateObject_31$3 || (templateObject_31$3 = __makeTemplateObject([":@@internal-config.add-memo-label:Add memo"], [":@@internal-config.add-memo-label:Add memo"]))),
                    placeholder: $localize(templateObject_32$3 || (templateObject_32$3 = __makeTemplateObject([":@@internal-config.add-memo-placeholder:Enter memo"], [":@@internal-config.add-memo-placeholder:Enter memo"]))),
                    showCharCounter: true,
                    minLength: 0,
                    rows: 2,
                    maxLength: 140,
                    helperText: $localize(templateObject_33$3 || (templateObject_33$3 = __makeTemplateObject([":@@internal-config.add-memo-helper-text: (Optional)"], [":@@internal-config.add-memo-helper-text: (Optional)"]))),
                    cssClasses: ['col-md-6', 'bb-block', 'bb-block--lg'],
                },
            },
        ],
    };
    var schedule$3 = {
        name: exports.PaymentBaseFields.schedule,
        fields: [
            {
                type: exports.PaymentComponents.scheduleHeader,
                name: exports.PaymentComponents.scheduleHeader,
                options: {
                    cssClasses: ['pb-0', 'bb-schedule-header__relative-text'],
                    label: $localize(templateObject_34$3 || (templateObject_34$3 = __makeTemplateObject([":@@internal-config.schedule-label:Schedule"], [":@@internal-config.schedule-label:Schedule"]))),
                },
            },
            {
                type: exports.PaymentComponents.alert,
                name: exports.PaymentComponents.alert,
                hidden: true,
                options: {
                    cssClasses: ['col-md-12'],
                    alerts: {
                        undue: {
                            title: $localize(templateObject_35$3 || (templateObject_35$3 = __makeTemplateObject([":@@internal-config.undue-alert-label:A payment executed after the due date will incur a  late fee."], [":@@internal-config.undue-alert-label:A payment executed after the due date will incur a  late fee."]))),
                            description: $localize(templateObject_36$3 || (templateObject_36$3 = __makeTemplateObject([":@@internal-config.undue-alert-description:The due date is @@date. A payment made before may improve your credit score."], [":@@internal-config.undue-alert-description:The due date is @@date. A payment made before may improve your credit score."]))),
                            modifier: 'info',
                        },
                        overdue: {
                            title: $localize(templateObject_37$3 || (templateObject_37$3 = __makeTemplateObject([":@@internal-config.overdue-alert-label:The due date has passed. This payment will incur a late fee."], [":@@internal-config.overdue-alert-label:The due date has passed. This payment will incur a late fee."]))),
                            description: $localize(templateObject_38$3 || (templateObject_38$3 = __makeTemplateObject([":@@internal-config.overdue-alert-description:The due date was @@date. Late payments will decrease your credit score."], [":@@internal-config.overdue-alert-description:The due date was @@date. Late payments will decrease your credit score."]))),
                            modifier: 'warning',
                        },
                    },
                },
                hooks: {
                    onInit: internalTransferScheduleAlertOnInitHook,
                },
            },
            {
                type: exports.PaymentComponents.date,
                name: exports.ScheduleFields.startDate,
                options: {
                    label: $localize(templateObject_39$3 || (templateObject_39$3 = __makeTemplateObject([":@@internal-config.transfer-date-label:Transfer date"], [":@@internal-config.transfer-date-label:Transfer date"]))),
                    cssClasses: ['d-block', 'col-md-6', 'align-top'],
                    validators: [i1$1.Validators.required, pastDateValidator],
                    defaultValue: new Date().toISOString(),
                    validationMessages: [
                        {
                            name: 'pastDate',
                            message: $localize(templateObject_40$3 || (templateObject_40$3 = __makeTemplateObject([":@@internal-config.past-date-error-message:Start date cannot be in the past"], [":@@internal-config.past-date-error-message:Start date cannot be in the past"]))),
                        },
                    ],
                    description: $localize(templateObject_41$2 || (templateObject_41$2 = __makeTemplateObject([":@@internal-config.transfer-date-description:You selected a date after the due date, this transfer will incur a late fee"], [":@@internal-config.transfer-date-description:You selected a date after the due date, this transfer will incur a late fee"]))),
                },
                hooks: {
                    onInit: internalTransScheduleStartDateOnInitHook,
                    onDestroy: scheduleStartDateOnDestroyHook,
                },
            },
            {
                type: exports.PaymentComponents.select,
                name: exports.ScheduleFields.frequency,
                options: {
                    label: $localize(templateObject_42$2 || (templateObject_42$2 = __makeTemplateObject([":@@internal-config.frequency-label:Frequency"], [":@@internal-config.frequency-label:Frequency"]))),
                    validators: [i1$1.Validators.required],
                    options: [
                        {
                            label: $localize(templateObject_43$2 || (templateObject_43$2 = __makeTemplateObject([":@@internal-config.once-frequency-label:Once"], [":@@internal-config.once-frequency-label:Once"]))),
                            value: exports.Frequencies.ONCE,
                        },
                        {
                            label: $localize(templateObject_44$1 || (templateObject_44$1 = __makeTemplateObject([":@@internal-config.daily-frequency-label:Daily"], [":@@internal-config.daily-frequency-label:Daily"]))),
                            value: exports.Frequencies.DAILY,
                        },
                        {
                            label: $localize(templateObject_45$1 || (templateObject_45$1 = __makeTemplateObject([":@@internal-config.weekly-frequency-label:Weekly"], [":@@internal-config.weekly-frequency-label:Weekly"]))),
                            value: exports.Frequencies.WEEKLY,
                        },
                        {
                            label: $localize(templateObject_46$1 || (templateObject_46$1 = __makeTemplateObject([":@@internal-config.biweekly-frequency-label:Biweekly"], [":@@internal-config.biweekly-frequency-label:Biweekly"]))),
                            value: exports.Frequencies.BIWEEKLY,
                        },
                        {
                            label: $localize(templateObject_47$1 || (templateObject_47$1 = __makeTemplateObject([":@@internal-config.monthly-frequency-label:Monthly"], [":@@internal-config.monthly-frequency-label:Monthly"]))),
                            value: exports.Frequencies.MONTHLY,
                        },
                        {
                            label: $localize(templateObject_48$1 || (templateObject_48$1 = __makeTemplateObject([":@@internal-config.quarterly-frequency-label:Quarterly"], [":@@internal-config.quarterly-frequency-label:Quarterly"]))),
                            value: exports.Frequencies.QUARTERLY,
                        },
                        {
                            label: $localize(templateObject_49$1 || (templateObject_49$1 = __makeTemplateObject([":@@internal-config.annually-frequency-label:Annually"], [":@@internal-config.annually-frequency-label:Annually"]))),
                            value: exports.Frequencies.YEARLY,
                        },
                    ],
                    defaultValue: exports.Frequencies.ONCE,
                    cssClasses: ['d-block', 'col-md-6', 'align-top'],
                    dependants: [exports.ScheduleFields.endType],
                    activateDependantsOn: scheduleFrequencyToggleDependants,
                },
                hooks: {
                    onInit: internalTransferScheduleFreqOnInitHook,
                },
            },
            {
                type: exports.PaymentComponents.radio,
                name: exports.ScheduleFields.endType,
                options: {
                    label: $localize(templateObject_50$1 || (templateObject_50$1 = __makeTemplateObject([":@@internal-config.end-type-label:End"], [":@@internal-config.end-type-label:End"]))),
                    preselect: true,
                    isConditionalMandatory: true,
                    cssClasses: [
                        'd-inline-block',
                        'col-md-2',
                        'align-top',
                        'bb-schedule__end-type',
                    ],
                    defaultValue: exports.ScheduleEndType.NEVER,
                    options: [
                        {
                            label: $localize(templateObject_51 || (templateObject_51 = __makeTemplateObject([":@@internal-config.never-end-type-label:Never"], [":@@internal-config.never-end-type-label:Never"]))),
                            value: exports.ScheduleEndType.NEVER,
                        },
                        {
                            label: $localize(templateObject_52 || (templateObject_52 = __makeTemplateObject([":@@internal-config.on-date-end-type-label:On date"], [":@@internal-config.on-date-end-type-label:On date"]))),
                            value: exports.ScheduleEndType.ON,
                        },
                        {
                            label: $localize(templateObject_53 || (templateObject_53 = __makeTemplateObject([":@@internal-config.after-end-type-label:After"], [":@@internal-config.after-end-type-label:After"]))),
                            value: exports.ScheduleEndType.AFTER,
                        },
                    ],
                    dependants: [exports.ScheduleFields.endDate, exports.ScheduleFields.repeat],
                    activateDependantsOn: scheduleEndTypeToggleDependants,
                },
                hooks: {
                    onInit: internalTransferEndTypeOnInitHook,
                },
            },
            {
                type: exports.PaymentComponents.date,
                name: exports.ScheduleFields.endDate,
                options: {
                    cssClasses: [
                        'd-inline-block',
                        'col-md-10',
                        'align-top',
                        'bb-schedule__end-date',
                    ],
                    validators: [endDateAfterStartDateValidator],
                    validationMessages: [
                        {
                            name: 'required',
                            message: $localize(templateObject_54 || (templateObject_54 = __makeTemplateObject([":@@internal-config.end-date-required-message:End date is required"], [":@@internal-config.end-date-required-message:End date is required"]))),
                        },
                        {
                            name: 'lessThanStartDate',
                            message: $localize(templateObject_55 || (templateObject_55 = __makeTemplateObject([":@@internal-config.end-date-less-start-date-message:End date cannot be before start date"], [":@@internal-config.end-date-less-start-date-message:End date cannot be before start date"]))),
                        },
                    ],
                    isConditionalMandatory: true,
                },
                hooks: {
                    onInit: scheduleEndDateOnInitHook,
                },
            },
            {
                type: exports.PaymentComponents.number,
                name: exports.ScheduleFields.repeat,
                options: {
                    isConditionalMandatory: true,
                    description: $localize(templateObject_56 || (templateObject_56 = __makeTemplateObject([":@@internal-config.ocurrences-description:occurrences"], [":@@internal-config.ocurrences-description:occurrences"]))),
                    min: 2,
                    max: 200,
                    defaultValue: 2,
                    validators: [minValueTwoValidator, maxValueTwoHundredValidator],
                    validationMessages: [
                        {
                            name: 'required',
                            message: $localize(templateObject_57 || (templateObject_57 = __makeTemplateObject([":@@internal-config.ocurrences-required-message:Value is required"], [":@@internal-config.ocurrences-required-message:Value is required"]))),
                        },
                        {
                            name: 'min',
                            message: $localize(templateObject_58 || (templateObject_58 = __makeTemplateObject([":@@internal-config.min-ocurrences-message:Value is below the minimum allowed occurrences (2)"], [":@@internal-config.min-ocurrences-message:Value is below the minimum allowed occurrences (2)"]))),
                        },
                        {
                            name: 'max',
                            message: $localize(templateObject_59 || (templateObject_59 = __makeTemplateObject([":@@internal-config.max-ocurrences-message:Value exceeds maximum allowed occurances (200)"], [":@@internal-config.max-ocurrences-message:Value exceeds maximum allowed occurances (200)"]))),
                        },
                    ],
                    cssClasses: [
                        'd-inline-block',
                        'col-md-9',
                        'align-top',
                        'px-0',
                        'bb-schedule__repeat',
                    ],
                },
                hooks: {
                    onInit: internalTransferRepeatOnInitHook,
                },
            },
            {
                type: exports.PaymentComponents.scheduleSwitch,
                name: exports.ScheduleFields.frequencySwitch,
                hidden: true,
                options: {
                    cssClasses: ['col-12', 'mb-0', 'mt-4'],
                    label: $localize(templateObject_60 || (templateObject_60 = __makeTemplateObject([":@@internal-config.auto-payments-label:Automatic monthly payments"], [":@@internal-config.auto-payments-label:Automatic monthly payments"]))),
                    tooltipMessage: $localize(templateObject_61 || (templateObject_61 = __makeTemplateObject([":@@internal-config.auto-payments-tooltip-message:The amount selected will be automatically paid every month. This amount may change over time."], [":@@internal-config.auto-payments-tooltip-message:The amount selected will be automatically paid every month. This amount may change over time."]))),
                    description: $localize(templateObject_62 || (templateObject_62 = __makeTemplateObject([":@@internal-config.auto-payments-description:If the execution date falls on a weekend or holiday, we\u2019ll make the payment on the previous business day."], [":@@internal-config.auto-payments-description:If the execution date falls on a weekend or holiday, we\u2019ll make the payment on the previous business day."]))),
                    values: {
                        on: exports.Frequencies.MONTHLY,
                        off: exports.Frequencies.ONCE,
                    },
                    defaultValue: false,
                },
            },
        ],
    };
    var INTERNAL_TRANSFER = {
        fields: [initiator$8, counterParty$7, remittanceInfo$9, schedule$3],
        name: $localize(templateObject_63 || (templateObject_63 = __makeTemplateObject([":@@internal-config.name:Internal Transfer"], [":@@internal-config.name:Internal Transfer"]))),
        paymentType: 'INTERNAL_TRANSFER',
        businessFunction: 'A2A Transfer',
        options: {
            paymentTypes: {
                internal: 'INTERNAL_TRANSFER',
                external: 'EXTERNAL_A2A',
            },
            disabledCombinations: [
                { from: exports.ProductKinds.loanAccount, to: exports.ProductKinds.loanAccount },
                { from: exports.ProductKinds.creditCard, to: exports.ProductKinds.creditCard },
            ],
        },
        hooks: {
            onDestroy: internalTransferOnDestroyHook,
        },
    };
    var templateObject_1$c, templateObject_2$b, templateObject_3$b, templateObject_4$b, templateObject_5$a, templateObject_6$a, templateObject_7$9, templateObject_8$9, templateObject_9$9, templateObject_10$9, templateObject_11$9, templateObject_12$8, templateObject_13$7, templateObject_14$7, templateObject_15$7, templateObject_16$7, templateObject_17$7, templateObject_18$7, templateObject_19$7, templateObject_20$7, templateObject_21$7, templateObject_22$7, templateObject_23$7, templateObject_24$6, templateObject_25$6, templateObject_26$6, templateObject_27$6, templateObject_28$6, templateObject_29$3, templateObject_30$3, templateObject_31$3, templateObject_32$3, templateObject_33$3, templateObject_34$3, templateObject_35$3, templateObject_36$3, templateObject_37$3, templateObject_38$3, templateObject_39$3, templateObject_40$3, templateObject_41$2, templateObject_42$2, templateObject_43$2, templateObject_44$1, templateObject_45$1, templateObject_46$1, templateObject_47$1, templateObject_48$1, templateObject_49$1, templateObject_50$1, templateObject_51, templateObject_52, templateObject_53, templateObject_54, templateObject_55, templateObject_56, templateObject_57, templateObject_58, templateObject_59, templateObject_60, templateObject_61, templateObject_62, templateObject_63;

    var initiator$7 = {
        name: exports.PaymentBaseFields.initiator,
        title: $localize(templateObject_1$b || (templateObject_1$b = __makeTemplateObject([":@@ach-config.initiator-title:From account"], [":@@ach-config.initiator-title:From account"]))),
        fields: [
            {
                type: exports.PaymentComponents.debitAccountSelector,
                name: exports.InitiatorFields.initiatorAccountGroup,
                options: {
                    placeholder: $localize(templateObject_2$a || (templateObject_2$a = __makeTemplateObject([":@@ach-config.initiator-placeholder:Select an account"], [":@@ach-config.initiator-placeholder:Select an account"]))),
                    cssClasses: ['col-12'],
                    validationMessages: [
                        {
                            message: $localize(templateObject_3$a || (templateObject_3$a = __makeTemplateObject([":@@ach-config.invalid-account-message:Debit account is invalid"], [":@@ach-config.invalid-account-message:Debit account is invalid"]))),
                            name: 'missingInList',
                        },
                        {
                            message: $localize(templateObject_4$a || (templateObject_4$a = __makeTemplateObject([":@@ach-config.closed-permission-error-message:You can not do payments to new beneficiary from this account."], [":@@ach-config.closed-permission-error-message:You can not do payments to new beneficiary from this account."]))),
                            name: 'hasOnlyClosedPaymentPermission',
                        },
                    ],
                },
            },
        ],
    };
    var counterParty$6 = {
        name: exports.PaymentBaseFields.counterparty,
        fields: [
            {
                name: exports.PaymentComponents.beneficiaryGroupHeader,
                type: exports.PaymentComponents.beneficiaryGroupHeader,
                options: {
                    label: $localize(templateObject_5$9 || (templateObject_5$9 = __makeTemplateObject([":@@ach-config.beneficiary.header-label:Transfer to"], [":@@ach-config.beneficiary.header-label:Transfer to"]))),
                    hasDynamicTitle: true,
                },
            },
            {
                name: exports.CounterPartyFields.name,
                type: exports.PaymentComponents.beneficiarySelector,
                options: {
                    placeholder: $localize(templateObject_6$9 || (templateObject_6$9 = __makeTemplateObject([":@@ach-config.beneficiary-selector-placeholder:Enter beneficiary's name or account"], [":@@ach-config.beneficiary-selector-placeholder:Enter beneficiary's name or account"]))),
                    cssClasses: ['col-12'],
                    saveNewContactLabel: $localize(templateObject_7$8 || (templateObject_7$8 = __makeTemplateObject([":@@ach-config.new-contact-label:Save as a new contact"], [":@@ach-config.new-contact-label:Save as a new contact"]))),
                    label: $localize(templateObject_8$8 || (templateObject_8$8 = __makeTemplateObject([":@@ach-config.beneficiary-selector-label:Beneficiary name"], [":@@ach-config.beneficiary-selector-label:Beneficiary name"]))),
                    dropdownIcon: 'perm-contact-calendar',
                    dependants: [
                        exports.CounterPartyFields.accountNumber,
                        exports.CounterPartyFields.accountType,
                        exports.CounterPartyFields.creditorBank,
                        exports.CounterPartyFields.standardEntryClass,
                        exports.CounterPartyFields.recipientId,
                    ],
                    validationMessages: [
                        {
                            message: $localize(templateObject_9$8 || (templateObject_9$8 = __makeTemplateObject([":@@ach-config.same-accounts-selected-error-message:Beneficiary is same as selected Debit account"], [":@@ach-config.same-accounts-selected-error-message:Beneficiary is same as selected Debit account"]))),
                            name: 'sameDebitCreditAccountsSelected',
                        },
                    ],
                },
            },
            {
                name: exports.CounterPartyFields.accountNumber,
                type: exports.PaymentComponents.text,
                options: {
                    validators: [i1$1.Validators.required],
                    label: $localize(templateObject_10$8 || (templateObject_10$8 = __makeTemplateObject([":@@ach-config.beneficiary.account-number-label:Account number"], [":@@ach-config.beneficiary.account-number-label:Account number"]))),
                    maxLength: 34,
                    cssClasses: ['d-inline-block', 'col-md-6', 'align-top'],
                },
            },
            {
                name: exports.CounterPartyFields.accountType,
                type: exports.PaymentComponents.select,
                options: {
                    label: $localize(templateObject_11$8 || (templateObject_11$8 = __makeTemplateObject([":@@ach-config.beneficiary.account-type-label:Account type"], [":@@ach-config.beneficiary.account-type-label:Account type"]))),
                    validators: [i1$1.Validators.required],
                    options: [
                        {
                            label: $localize(templateObject_12$7 || (templateObject_12$7 = __makeTemplateObject([":@@ach-config.beneficiary.savings-account-label:Savings"], [":@@ach-config.beneficiary.savings-account-label:Savings"]))),
                            value: 'SAVINGS',
                        },
                        {
                            label: $localize(templateObject_13$6 || (templateObject_13$6 = __makeTemplateObject([":@@ach-config.beneficiary.checking-account-label:Checking"], [":@@ach-config.beneficiary.checking-account-label:Checking"]))),
                            value: 'CHECKING',
                        },
                    ],
                    placeholder: $localize(templateObject_14$6 || (templateObject_14$6 = __makeTemplateObject([":@@ach-config.beneficiary-account-type-placeholder:Select an account type"], [":@@ach-config.beneficiary-account-type-placeholder:Select an account type"]))),
                    cssClasses: ['d-inline-block', 'col-md-6', 'align-top'],
                },
            },
            {
                name: exports.CounterPartyFields.creditorBank,
                fields: [
                    {
                        name: exports.CounterPartyFields.bankBranchCode,
                        type: exports.PaymentComponents.text,
                        options: {
                            label: $localize(templateObject_15$6 || (templateObject_15$6 = __makeTemplateObject([":@@ach-config.branch-code-label:Routing transit number (ABA)"], [":@@ach-config.branch-code-label:Routing transit number (ABA)"]))),
                            maxLength: 9,
                            cssClasses: ['d-inline-block', 'col-md-6', 'align-top'],
                            validators: [i1$1.Validators.required, routingTransitNumberValidator],
                        },
                    },
                    {
                        name: exports.CounterPartyFields.standardEntryClass,
                        type: exports.PaymentComponents.select,
                        options: {
                            label: $localize(templateObject_16$6 || (templateObject_16$6 = __makeTemplateObject([":@@ach-config.entry-class-label:Standard entry class (SEC)"], [":@@ach-config.entry-class-label:Standard entry class (SEC)"]))),
                            validators: [i1$1.Validators.required],
                            placeholder: $localize(templateObject_17$6 || (templateObject_17$6 = __makeTemplateObject([":@@ach-config.entry-class-placeholder:Select SEC type"], [":@@ach-config.entry-class-placeholder:Select SEC type"]))),
                            cssClasses: ['d-inline-block', 'col-md-6', 'align-top'],
                            mapToField: exports.PaymentBaseFields.counterparty,
                            options: [
                                {
                                    label: $localize(templateObject_18$6 || (templateObject_18$6 = __makeTemplateObject([":@@ach-config.ppd-class-label:Personal (PPD)"], [":@@ach-config.ppd-class-label:Personal (PPD)"]))),
                                    value: 'PPD',
                                },
                                {
                                    label: $localize(templateObject_19$6 || (templateObject_19$6 = __makeTemplateObject([":@@ach-config.ccd-class-label:Business (CCD)"], [":@@ach-config.ccd-class-label:Business (CCD)"]))),
                                    value: 'CCD',
                                },
                            ],
                        },
                    },
                ],
            },
            {
                name: exports.CounterPartyFields.recipientId,
                type: exports.PaymentComponents.text,
                options: {
                    label: $localize(templateObject_20$6 || (templateObject_20$6 = __makeTemplateObject([":@@ach-config.recipient-id-label:Recipient ID"], [":@@ach-config.recipient-id-label:Recipient ID"]))),
                    helperText: $localize(templateObject_21$6 || (templateObject_21$6 = __makeTemplateObject([":@@ach-config.recipient-id-helper-text: (optional)"], [":@@ach-config.recipient-id-helper-text: (optional)"]))),
                    cssClasses: ['d-inline-block', 'col-md-6', 'align-top'],
                    maxLength: 15,
                    showCharCounter: true,
                },
            },
        ],
    };
    var remittanceInfo$8 = {
        name: exports.PaymentBaseFields.remittanceInfo,
        title: $localize(templateObject_22$6 || (templateObject_22$6 = __makeTemplateObject([":@@ach-config.remittance-info-title:Payment details"], [":@@ach-config.remittance-info-title:Payment details"]))),
        fields: [
            {
                type: exports.PaymentComponents.amount,
                name: exports.RemittanceInfoFields.amountCurrencyGroup,
                options: {
                    label: $localize(templateObject_23$6 || (templateObject_23$6 = __makeTemplateObject([":@@ach-config.amount-label:Amount"], [":@@ach-config.amount-label:Amount"]))),
                    currencies: ['USD'],
                    cssClasses: ['col-md-8'],
                    validationMessages: [
                        {
                            name: 'invalidAmount',
                            message: $localize(templateObject_24$5 || (templateObject_24$5 = __makeTemplateObject([":@@ach-config.invalid-amount-message:Amount is required"], [":@@ach-config.invalid-amount-message:Amount is required"]))),
                        },
                    ],
                },
            },
            {
                type: exports.PaymentComponents.checkbox,
                name: exports.RemittanceInfoFields.urgent,
                options: {
                    label: $localize(templateObject_25$5 || (templateObject_25$5 = __makeTemplateObject([":@@ach-config.urgent-payment-label:This payment is urgent"], [":@@ach-config.urgent-payment-label:This payment is urgent"]))),
                    cssClasses: ['col-md-8'],
                    hideInWizardMode: true,
                },
            },
            {
                name: exports.RemittanceInfoFields.paymentReference,
                type: exports.PaymentComponents.text,
                options: {
                    label: $localize(templateObject_26$5 || (templateObject_26$5 = __makeTemplateObject([":@@ach-config.reference-label:Payment reference"], [":@@ach-config.reference-label:Payment reference"]))),
                    helperText: $localize(templateObject_27$5 || (templateObject_27$5 = __makeTemplateObject([":@@ach-config.reference-placeholder: (optional)"], [":@@ach-config.reference-placeholder: (optional)"]))),
                    showCharCounter: true,
                    maxLength: 35,
                    cssClasses: ['d-inline-block', 'col-md-8'],
                },
            },
        ],
    };
    var US_ACH_CREDIT = {
        fields: [initiator$7, remittanceInfo$8, counterParty$6, defaultScheduleConfig],
        name: $localize(templateObject_28$5 || (templateObject_28$5 = __makeTemplateObject([":@@ach-config.name:ACH Transfer"], [":@@ach-config.name:ACH Transfer"]))),
        businessFunction: 'ACH Credit Transfer',
        paymentType: 'ACH_CREDIT',
    };
    var templateObject_1$b, templateObject_2$a, templateObject_3$a, templateObject_4$a, templateObject_5$9, templateObject_6$9, templateObject_7$8, templateObject_8$8, templateObject_9$8, templateObject_10$8, templateObject_11$8, templateObject_12$7, templateObject_13$6, templateObject_14$6, templateObject_15$6, templateObject_16$6, templateObject_17$6, templateObject_18$6, templateObject_19$6, templateObject_20$6, templateObject_21$6, templateObject_22$6, templateObject_23$6, templateObject_24$5, templateObject_25$5, templateObject_26$5, templateObject_27$5, templateObject_28$5;

    var countriesList$1 = [
        {
            label: 'United States',
            value: 'US',
        },
    ];
    var initiator$6 = {
        name: exports.PaymentBaseFields.initiator,
        title: $localize(templateObject_1$a || (templateObject_1$a = __makeTemplateObject([":@@wire-config.initiator-title:From account"], [":@@wire-config.initiator-title:From account"]))),
        fields: [
            {
                type: exports.PaymentComponents.debitAccountSelector,
                name: exports.InitiatorFields.initiatorAccountGroup,
                options: {
                    placeholder: $localize(templateObject_2$9 || (templateObject_2$9 = __makeTemplateObject([":@@wire-config.initiator-placeholder:Select an account"], [":@@wire-config.initiator-placeholder:Select an account"]))),
                    cssClasses: ['col-12', 'mb-0'],
                    validationMessages: [
                        {
                            message: $localize(templateObject_3$9 || (templateObject_3$9 = __makeTemplateObject([":@@wire-config.invalid-account-message:Debit account is invalid"], [":@@wire-config.invalid-account-message:Debit account is invalid"]))),
                            name: 'missingInList',
                        },
                        {
                            message: $localize(templateObject_4$9 || (templateObject_4$9 = __makeTemplateObject([":@@wire-config.closed-permission-error-message:You can not do payments to new beneficiary from this account."], [":@@wire-config.closed-permission-error-message:You can not do payments to new beneficiary from this account."]))),
                            name: 'hasOnlyClosedPaymentPermission',
                        },
                    ],
                },
            },
        ],
    };
    var counterParty$5 = {
        name: exports.PaymentBaseFields.counterparty,
        fields: [
            {
                name: exports.PaymentComponents.beneficiaryGroupHeader,
                type: exports.PaymentComponents.beneficiaryGroupHeader,
                options: {
                    label: $localize(templateObject_5$8 || (templateObject_5$8 = __makeTemplateObject([":@@wire-config.beneficiary.header-label:Transfer to"], [":@@wire-config.beneficiary.header-label:Transfer to"]))),
                    hasDynamicTitle: true,
                    clearOptions: {
                        onClear: function () {
                            console.log('clear');
                        },
                    },
                },
            },
            {
                name: exports.CounterPartyFields.name,
                type: exports.PaymentComponents.beneficiarySelector,
                options: {
                    label: $localize(templateObject_6$8 || (templateObject_6$8 = __makeTemplateObject([":@@wire-config.beneficiary-selector-label:Beneficiary name"], [":@@wire-config.beneficiary-selector-label:Beneficiary name"]))),
                    placeholder: $localize(templateObject_7$7 || (templateObject_7$7 = __makeTemplateObject([":@@wire-config.beneficiary-selector-placeholder:Select a beneficiary"], [":@@wire-config.beneficiary-selector-placeholder:Select a beneficiary"]))),
                    cssClasses: ['col-12'],
                    saveNewContactLabel: $localize(templateObject_8$7 || (templateObject_8$7 = __makeTemplateObject([":@@wire-config.new-contact-label:Save as a new contact"], [":@@wire-config.new-contact-label:Save as a new contact"]))),
                    isManualEditDisabled: true,
                    dependants: [
                        exports.CounterPartyFields.accountNumber,
                        exports.CounterPartyFields.bankBranchCode,
                        exports.CounterPartyFields.postalAddress,
                        exports.CounterPartyFields.creditorBank,
                        exports.CounterPartyFields.correspondentBank,
                    ],
                    validationMessages: [
                        {
                            message: $localize(templateObject_9$7 || (templateObject_9$7 = __makeTemplateObject([":@@wire-config.same-accounts-selected-error-message:Beneficiary is same as selected Debit account"], [":@@wire-config.same-accounts-selected-error-message:Beneficiary is same as selected Debit account"]))),
                            name: 'sameDebitCreditAccountsSelected',
                        },
                    ],
                },
            },
            {
                name: exports.CounterPartyFields.accountNumber,
                type: exports.PaymentComponents.text,
                options: {
                    validators: [i1$1.Validators.required],
                    label: $localize(templateObject_10$7 || (templateObject_10$7 = __makeTemplateObject([":@@wire-config.beneficiary.account-number-label:Account number"], [":@@wire-config.beneficiary.account-number-label:Account number"]))),
                    maxLength: 34,
                    cssClasses: ['d-inline-block', 'col-md-6', 'align-top'],
                },
            },
            {
                name: exports.CounterPartyFields.bankBranchCode,
                type: exports.PaymentComponents.text,
                options: {
                    label: $localize(templateObject_11$7 || (templateObject_11$7 = __makeTemplateObject([":@@wire-config.branch-code-label:Routing transit number (ABA)"], [":@@wire-config.branch-code-label:Routing transit number (ABA)"]))),
                    maxLength: 9,
                    cssClasses: ['d-inline-block', 'col-md-6', 'align-top'],
                    validators: [i1$1.Validators.required, routingTransitNumberValidator],
                    mapToField: exports.PaymentBaseFields.counterparty + "." + exports.CounterPartyFields.creditorBank,
                },
            },
            {
                name: exports.CounterPartyFields.postalAddress,
                type: exports.PaymentComponents.address,
                options: {
                    addressType: 'beneficiary',
                    countries: countriesList$1,
                    states: US_States,
                    cssClasses: ['col-12'],
                },
            },
            {
                name: exports.CounterPartyFields.creditorBank,
                fields: [
                    {
                        name: exports.CounterPartyFields.bankName,
                        type: exports.PaymentComponents.text,
                        options: {
                            label: $localize(templateObject_12$6 || (templateObject_12$6 = __makeTemplateObject([":@@wire-config.creditor-bank-name-label:Bank name"], [":@@wire-config.creditor-bank-name-label:Bank name"]))),
                            helperText: $localize(templateObject_13$5 || (templateObject_13$5 = __makeTemplateObject([":@@wire-config.creditor-bank-name-placeholder: (optional)"], [":@@wire-config.creditor-bank-name-placeholder: (optional)"]))),
                            maxLength: 140,
                            cssClasses: ['d-block', 'align-top', 'col-md-8'],
                        },
                    },
                    {
                        name: exports.CounterPartyFields.postalAddress,
                        type: exports.PaymentComponents.address,
                        options: {
                            addressType: 'beneficiary bank',
                            countries: countriesList$1,
                            states: US_States,
                            cssClasses: ['col-12'],
                        },
                    },
                ],
            },
            {
                name: exports.CounterPartyFields.correspondentBank,
                fields: [
                    {
                        name: exports.CounterPartyFields.enableAdditionalBankDetails,
                        type: exports.PaymentComponents.switch,
                        options: {
                            label: $localize(templateObject_14$5 || (templateObject_14$5 = __makeTemplateObject([":@@wire-config.correspondent-bank-label:Transfer through correspondent bank"], [":@@wire-config.correspondent-bank-label:Transfer through correspondent bank"]))),
                            cssClasses: ['col-12', 'align-top'],
                            labelPosition: 'right',
                            dependants: [
                                exports.CounterPartyFields.bankName,
                                exports.CounterPartyFields.bankBranchCode,
                                exports.CounterPartyFields.postalAddress,
                            ],
                            activateDependantsOn: true,
                        },
                    },
                    {
                        name: exports.CounterPartyFields.bankBranchCode,
                        type: exports.PaymentComponents.text,
                        options: {
                            label: $localize(templateObject_15$5 || (templateObject_15$5 = __makeTemplateObject([":@@wire-config.correspondent-bank-branch-code-label:Routing Transit Number (ABA)"], [":@@wire-config.correspondent-bank-branch-code-label:Routing Transit Number (ABA)"]))),
                            maxLength: 9,
                            cssClasses: ['d-inline-block', 'col-md-6', 'align-top'],
                            validators: [routingTransitNumberValidator],
                            isConditionalMandatory: true,
                        },
                    },
                    {
                        name: exports.CounterPartyFields.bankName,
                        type: exports.PaymentComponents.text,
                        options: {
                            label: $localize(templateObject_16$5 || (templateObject_16$5 = __makeTemplateObject([":@@wire-config.correspondent-bank-name-label:Bank name"], [":@@wire-config.correspondent-bank-name-label:Bank name"]))),
                            maxLength: 140,
                            helperText: $localize(templateObject_17$5 || (templateObject_17$5 = __makeTemplateObject([":@@wire-config.correspondent-bank-name-placeholder: (optional)"], [":@@wire-config.correspondent-bank-name-placeholder: (optional)"]))),
                            cssClasses: ['d-inline-block', 'col-md-6', 'align-top'],
                        },
                    },
                    {
                        name: exports.CounterPartyFields.postalAddress,
                        type: exports.PaymentComponents.address,
                        options: {
                            addressType: 'correspondent bank',
                            countries: countriesList$1,
                            states: US_States,
                            cssClasses: ['mb-0', 'col-12'],
                        },
                    },
                ],
            },
        ],
    };
    var remittanceInfo$7 = {
        name: exports.PaymentBaseFields.remittanceInfo,
        title: $localize(templateObject_18$5 || (templateObject_18$5 = __makeTemplateObject([":@@wire-config.remittance-info-title:Payment details"], [":@@wire-config.remittance-info-title:Payment details"]))),
        fields: [
            {
                type: exports.PaymentComponents.amount,
                name: exports.RemittanceInfoFields.amountCurrencyGroup,
                options: {
                    label: $localize(templateObject_19$5 || (templateObject_19$5 = __makeTemplateObject([":@@wire-config.amount-label:Amount"], [":@@wire-config.amount-label:Amount"]))),
                    cssClasses: ['col-md-8', 'large-label'],
                    currencies: ['USD'],
                    validationMessages: [
                        {
                            name: 'invalidAmount',
                            message: $localize(templateObject_20$5 || (templateObject_20$5 = __makeTemplateObject([":@@wire-config.invalid-amount-message:Amount is required"], [":@@wire-config.invalid-amount-message:Amount is required"]))),
                        },
                    ],
                },
            },
        ],
    };
    var additionalMessage$2 = {
        name: 'additionalMessage',
        title: $localize(templateObject_21$5 || (templateObject_21$5 = __makeTemplateObject([":@@wire-config.additional-message-title:Add message"], [":@@wire-config.additional-message-title:Add message"]))),
        collapsible: true,
        fields: [
            {
                name: exports.CounterPartyFields.remittanceInformation,
                type: exports.PaymentComponents.textarea,
                options: {
                    label: $localize(templateObject_22$5 || (templateObject_22$5 = __makeTemplateObject([":@@wire-config.additional-message-label:Message to beneficiary"], [":@@wire-config.additional-message-label:Message to beneficiary"]))),
                    helperText: $localize(templateObject_23$5 || (templateObject_23$5 = __makeTemplateObject([":@@wire-config.additional-message-helper-text: (optional)"], [":@@wire-config.additional-message-helper-text: (optional)"]))),
                    placeholder: $localize(templateObject_24$4 || (templateObject_24$4 = __makeTemplateObject([":@@wire-config.additional-message-placeholder:Type your message here"], [":@@wire-config.additional-message-placeholder:Type your message here"]))),
                    showCharCounter: true,
                    minLength: 0,
                    maxLength: 140,
                    rows: 3,
                    cols: 50,
                    cssClasses: ['col-12'],
                    mapToField: exports.PaymentBaseFields.counterparty,
                },
            },
            {
                name: exports.CounterPartyFields.messageToBank,
                type: exports.PaymentComponents.textarea,
                options: {
                    label: $localize(templateObject_25$4 || (templateObject_25$4 = __makeTemplateObject([":@@wire-config.message-to-bank-label:Message to beneficiary bank"], [":@@wire-config.message-to-bank-label:Message to beneficiary bank"]))),
                    helperText: $localize(templateObject_26$4 || (templateObject_26$4 = __makeTemplateObject([":@@wire-config.message-to-bank-helper-text: (optional)"], [":@@wire-config.message-to-bank-helper-text: (optional)"]))),
                    placeholder: $localize(templateObject_27$4 || (templateObject_27$4 = __makeTemplateObject([":@@wire-config.message-to-bank-placeholder:Type your message here"], [":@@wire-config.message-to-bank-placeholder:Type your message here"]))),
                    showCharCounter: true,
                    minLength: 0,
                    rows: 3,
                    maxLength: 140,
                    cols: 50,
                    cssClasses: ['col-12'],
                    mapToField: "" + exports.PaymentBaseFields.counterparty,
                },
            },
        ],
    };
    var US_DOMESTIC_WIRE = {
        fields: [
            initiator$6,
            remittanceInfo$7,
            counterParty$5,
            defaultScheduleConfig,
            additionalMessage$2,
        ],
        name: $localize(templateObject_28$4 || (templateObject_28$4 = __makeTemplateObject([":@@wire-config.name:Wire Transfer"], [":@@wire-config.name:Wire Transfer"]))),
        paymentType: 'US_DOMESTIC_WIRE',
        businessFunction: 'US Domestic Wire',
        options: {
            closedPaymentBusFns: ['US Domestic Wire - Intracompany'],
        },
    };
    var templateObject_1$a, templateObject_2$9, templateObject_3$9, templateObject_4$9, templateObject_5$8, templateObject_6$8, templateObject_7$7, templateObject_8$7, templateObject_9$7, templateObject_10$7, templateObject_11$7, templateObject_12$6, templateObject_13$5, templateObject_14$5, templateObject_15$5, templateObject_16$5, templateObject_17$5, templateObject_18$5, templateObject_19$5, templateObject_20$5, templateObject_21$5, templateObject_22$5, templateObject_23$5, templateObject_24$4, templateObject_25$4, templateObject_26$4, templateObject_27$4, templateObject_28$4;

    var counterParty$4 = {
        name: exports.PaymentBaseFields.counterparty,
        fields: [
            {
                name: exports.PaymentComponents.beneficiaryGroupHeader,
                type: exports.PaymentComponents.beneficiaryGroupHeader,
                options: {
                    label: $localize(templateObject_1$9 || (templateObject_1$9 = __makeTemplateObject([":@@chaps-config.beneficiary.header-label:To"], [":@@chaps-config.beneficiary.header-label:To"]))),
                    hasDynamicTitle: true,
                },
            },
            {
                name: exports.CounterPartyFields.name,
                type: exports.PaymentComponents.beneficiarySelector,
                options: {
                    placeholder: $localize(templateObject_2$8 || (templateObject_2$8 = __makeTemplateObject([":@@chaps-config.beneficiary-selector-placeholder:Select a beneficiary"], [":@@chaps-config.beneficiary-selector-placeholder:Select a beneficiary"]))),
                    saveNewContactLabel: $localize(templateObject_3$8 || (templateObject_3$8 = __makeTemplateObject([":@@chaps-config.new-contact-label:Save as a new contact"], [":@@chaps-config.new-contact-label:Save as a new contact"]))),
                    cssClasses: ['col-12'],
                },
            },
            {
                name: exports.CounterPartyFields.accountNumber,
                type: exports.PaymentComponents.text,
                options: {
                    validators: [i1$1.Validators.required],
                    label: $localize(templateObject_4$8 || (templateObject_4$8 = __makeTemplateObject([":@@chaps-config.beneficiary.account-number-label:Account number"], [":@@chaps-config.beneficiary.account-number-label:Account number"]))),
                    cssClasses: ['d-inline-block', 'col-md-6', 'align-top'],
                },
            },
            {
                name: exports.CounterPartyFields.creditorBank,
                fields: [
                    {
                        name: exports.CounterPartyFields.bankBranchCode,
                        type: exports.PaymentComponents.text,
                        options: {
                            label: $localize(templateObject_5$7 || (templateObject_5$7 = __makeTemplateObject([":@@chaps-config.sort-code-label:Sort code"], [":@@chaps-config.sort-code-label:Sort code"]))),
                            cssClasses: ['d-inline-block', 'col-md-6', 'align-top'],
                            validators: [i1$1.Validators.required],
                        },
                    },
                ],
            },
        ],
    };
    var remittanceInfo$6 = {
        name: exports.PaymentBaseFields.remittanceInfo,
        title: $localize(templateObject_6$7 || (templateObject_6$7 = __makeTemplateObject([":@@chaps-config.remittance-info-title:Payment details"], [":@@chaps-config.remittance-info-title:Payment details"]))),
        fields: [
            {
                type: exports.PaymentComponents.amount,
                name: exports.RemittanceInfoFields.amountCurrencyGroup,
                options: {
                    label: $localize(templateObject_7$6 || (templateObject_7$6 = __makeTemplateObject([":@@chaps-config.amount-label:Amount"], [":@@chaps-config.amount-label:Amount"]))),
                    currencies: ['GBP'],
                    cssClasses: ['col-12'],
                },
            },
        ],
    };
    var paymentInformation$1 = {
        name: 'paymentInformation',
        title: $localize(templateObject_8$6 || (templateObject_8$6 = __makeTemplateObject([":@@chaps-config.information-title:Payment information"], [":@@chaps-config.information-title:Payment information"]))),
        fields: [
            {
                name: exports.CounterPartyFields.remittanceInformation,
                type: exports.PaymentComponents.textarea,
                options: {
                    label: $localize(templateObject_9$6 || (templateObject_9$6 = __makeTemplateObject([":@@chaps-config.remittance-info-label:Description"], [":@@chaps-config.remittance-info-label:Description"]))),
                    placeholder: $localize(templateObject_10$6 || (templateObject_10$6 = __makeTemplateObject([":@@chaps-config.remittance-info-placeholder:Enter payment description"], [":@@chaps-config.remittance-info-placeholder:Enter payment description"]))),
                    showCharCounter: true,
                    minLength: 0,
                    rows: 3,
                    maxLength: 140,
                    cols: 50,
                    cssClasses: ['d-inline-block', 'col-12'],
                    mapToField: exports.PaymentBaseFields.counterparty,
                },
            },
        ],
    };
    var CHAPS = {
        fields: [
            defaultInitiatorConfig,
            remittanceInfo$6,
            counterParty$4,
            paymentInformation$1,
            defaultScheduleConfig,
        ],
        name: $localize(templateObject_11$6 || (templateObject_11$6 = __makeTemplateObject([":@@chaps-config.name:CHAPS Transfer"], [":@@chaps-config.name:CHAPS Transfer"]))),
        paymentType: 'CHAPS',
        businessFunction: 'UK CHAPS',
        relatedPaymentTypes: ['FASTER_PAYMENT'],
    };
    var templateObject_1$9, templateObject_2$8, templateObject_3$8, templateObject_4$8, templateObject_5$7, templateObject_6$7, templateObject_7$6, templateObject_8$6, templateObject_9$6, templateObject_10$6, templateObject_11$6;

    var counterParty$3 = {
        name: exports.PaymentBaseFields.counterparty,
        fields: [
            {
                name: exports.PaymentComponents.beneficiaryGroupHeader,
                type: exports.PaymentComponents.beneficiaryGroupHeader,
                options: {
                    label: $localize(templateObject_1$8 || (templateObject_1$8 = __makeTemplateObject([":@@fps-config.beneficiary.header-label:To"], [":@@fps-config.beneficiary.header-label:To"]))),
                    hasDynamicTitle: true,
                },
            },
            {
                name: exports.CounterPartyFields.name,
                type: exports.PaymentComponents.beneficiarySelector,
                options: {
                    placeholder: $localize(templateObject_2$7 || (templateObject_2$7 = __makeTemplateObject([":@@fps-config.beneficiary-selector-placeholder:Select a beneficiary"], [":@@fps-config.beneficiary-selector-placeholder:Select a beneficiary"]))),
                    saveNewContactLabel: $localize(templateObject_3$7 || (templateObject_3$7 = __makeTemplateObject([":@@fps-config.new-contact-label:Save as a new contact"], [":@@fps-config.new-contact-label:Save as a new contact"]))),
                    cssClasses: ['col-12'],
                    validationMessages: [
                        {
                            message: $localize(templateObject_4$7 || (templateObject_4$7 = __makeTemplateObject([":@@fps-config.same-accounts-selected-error-message:Beneficiary is same as selected Debit account"], [":@@fps-config.same-accounts-selected-error-message:Beneficiary is same as selected Debit account"]))),
                            name: 'sameDebitCreditAccountsSelected',
                        },
                    ],
                },
            },
            {
                name: exports.CounterPartyFields.accountNumber,
                type: exports.PaymentComponents.text,
                options: {
                    validators: [i1$1.Validators.required],
                    label: $localize(templateObject_5$6 || (templateObject_5$6 = __makeTemplateObject([":@@fps-config.beneficiary.account-number-label:Account number"], [":@@fps-config.beneficiary.account-number-label:Account number"]))),
                    cssClasses: ['d-inline-block', 'col-md-6', 'align-top'],
                },
            },
            {
                name: exports.CounterPartyFields.creditorBank,
                fields: [
                    {
                        name: exports.CounterPartyFields.bankBranchCode,
                        type: exports.PaymentComponents.text,
                        options: {
                            label: $localize(templateObject_6$6 || (templateObject_6$6 = __makeTemplateObject([":@@fps-config.sort-code-label:Sort code"], [":@@fps-config.sort-code-label:Sort code"]))),
                            cssClasses: ['d-inline-block', 'col-md-6', 'align-top'],
                            validators: [i1$1.Validators.required],
                        },
                    },
                ],
            },
        ],
    };
    var remittanceInfo$5 = {
        name: exports.PaymentBaseFields.remittanceInfo,
        title: $localize(templateObject_7$5 || (templateObject_7$5 = __makeTemplateObject([":@@fps-config.remittance-info-title:Payment details"], [":@@fps-config.remittance-info-title:Payment details"]))),
        fields: [
            {
                type: exports.PaymentComponents.amount,
                name: exports.RemittanceInfoFields.amountCurrencyGroup,
                options: {
                    label: $localize(templateObject_8$5 || (templateObject_8$5 = __makeTemplateObject([":@@fps-config.amount-label:Amount"], [":@@fps-config.amount-label:Amount"]))),
                    currencies: ['GBP'],
                    cssClasses: ['col-md-8'],
                },
            },
        ],
    };
    var paymentInformation = {
        name: 'paymentInformation',
        title: $localize(templateObject_9$5 || (templateObject_9$5 = __makeTemplateObject([":@@fps-config.information-title:Payment information"], [":@@fps-config.information-title:Payment information"]))),
        fields: [
            {
                name: exports.CounterPartyFields.remittanceInformation,
                type: exports.PaymentComponents.textarea,
                options: {
                    label: $localize(templateObject_10$5 || (templateObject_10$5 = __makeTemplateObject([":@@fps-config.remittance-info-label:Description"], [":@@fps-config.remittance-info-label:Description"]))),
                    placeholder: $localize(templateObject_11$5 || (templateObject_11$5 = __makeTemplateObject([":@@fps-config.remittance-info-placeholder:Enter payment description"], [":@@fps-config.remittance-info-placeholder:Enter payment description"]))),
                    showCharCounter: true,
                    minLength: 0,
                    rows: 3,
                    maxLength: 140,
                    cols: 50,
                    cssClasses: ['d-inline-block', 'col-12'],
                    mapToField: exports.PaymentBaseFields.counterparty,
                },
            },
        ],
    };
    var UK_FASTER_PAYMENT = {
        fields: [
            defaultInitiatorConfig,
            remittanceInfo$5,
            counterParty$3,
            paymentInformation,
            defaultScheduleConfig,
        ],
        name: $localize(templateObject_12$5 || (templateObject_12$5 = __makeTemplateObject([":@@fps-config.name:UK Faster Payment"], [":@@fps-config.name:UK Faster Payment"]))),
        paymentType: 'FASTER_PAYMENT',
        businessFunction: 'UK Faster Payments',
    };
    var templateObject_1$8, templateObject_2$7, templateObject_3$7, templateObject_4$7, templateObject_5$6, templateObject_6$6, templateObject_7$5, templateObject_8$5, templateObject_9$5, templateObject_10$5, templateObject_11$5, templateObject_12$5;

    var countriesList = [
        {
            label: $localize(templateObject_1$7 || (templateObject_1$7 = __makeTemplateObject([":@@international-config.us-country-label:United States"], [":@@international-config.us-country-label:United States"]))),
            value: 'US',
        },
        {
            label: $localize(templateObject_2$6 || (templateObject_2$6 = __makeTemplateObject([":@@international-config.au-country-label:Australia"], [":@@international-config.au-country-label:Australia"]))),
            value: 'AU',
        },
        {
            label: $localize(templateObject_3$6 || (templateObject_3$6 = __makeTemplateObject([":@@international-config.ca-country-label:Canada"], [":@@international-config.ca-country-label:Canada"]))),
            value: 'CA',
        },
        {
            label: $localize(templateObject_4$6 || (templateObject_4$6 = __makeTemplateObject([":@@international-config.ie-country-label:Ireland"], [":@@international-config.ie-country-label:Ireland"]))),
            value: 'IE',
        },
        {
            label: $localize(templateObject_5$5 || (templateObject_5$5 = __makeTemplateObject([":@@international-config.nl-country-label:Netherlands"], [":@@international-config.nl-country-label:Netherlands"]))),
            value: 'NL',
        },
        {
            label: $localize(templateObject_6$5 || (templateObject_6$5 = __makeTemplateObject([":@@international-config.nz-country-label:New Zealand"], [":@@international-config.nz-country-label:New Zealand"]))),
            value: 'NZ',
        },
        {
            label: $localize(templateObject_7$4 || (templateObject_7$4 = __makeTemplateObject([":@@international-config.gb-country-label:United Kingdom"], [":@@international-config.gb-country-label:United Kingdom"]))),
            value: 'GB',
        },
    ];
    var initiator$5 = {
        name: exports.PaymentBaseFields.initiator,
        title: $localize(templateObject_8$4 || (templateObject_8$4 = __makeTemplateObject([":@@international-config.initiator-label:From account"], [":@@international-config.initiator-label:From account"]))),
        fields: [
            {
                type: exports.PaymentComponents.debitAccountSelector,
                name: exports.InitiatorFields.initiatorAccountGroup,
                options: {
                    placeholder: 'Select an account',
                    cssClasses: ['col-12', 'mb-0'],
                    validationMessages: [
                        {
                            message: $localize(templateObject_9$4 || (templateObject_9$4 = __makeTemplateObject([":@@international-config.account-missing-error-message:Debit account is invalid"], [":@@international-config.account-missing-error-message:Debit account is invalid"]))),
                            name: 'missingInList',
                        },
                        {
                            message: $localize(templateObject_10$4 || (templateObject_10$4 = __makeTemplateObject([":@@international-config.closed-permission-error-message:You can not do payments to new beneficiary from this account."], [":@@international-config.closed-permission-error-message:You can not do payments to new beneficiary from this account."]))),
                            name: 'hasOnlyClosedPaymentPermission',
                        },
                    ],
                },
            },
        ],
    };
    var toggleBankID = function (value, control) {
        var parentGroup = control && control.parent ? control.parent : null;
        var enableAdditionalBankDetails = parentGroup && parentGroup.get('enableAdditionalBankDetails');
        switch (value) {
            case 'BIC':
                return enableAdditionalBankDetails && enableAdditionalBankDetails.value
                    ? [exports.CounterPartyFields.bic]
                    : [];
            case 'BRANCH_CODE':
                return [exports.CounterPartyFields.bankBranchCode];
        }
        return [];
    };
    var counterParty$2 = {
        name: exports.PaymentBaseFields.counterparty,
        fields: [
            {
                name: exports.PaymentComponents.beneficiaryGroupHeader,
                type: exports.PaymentComponents.beneficiaryGroupHeader,
                options: {
                    label: $localize(templateObject_11$4 || (templateObject_11$4 = __makeTemplateObject([":@@international-config.beneficiary.header-label:Transfer to"], [":@@international-config.beneficiary.header-label:Transfer to"]))),
                    hasDynamicTitle: true,
                },
            },
            {
                name: exports.CounterPartyFields.name,
                type: exports.PaymentComponents.beneficiarySelector,
                options: {
                    label: $localize(templateObject_12$4 || (templateObject_12$4 = __makeTemplateObject([":@@international-config.beneficiary-selector-label:Beneficiary name"], [":@@international-config.beneficiary-selector-label:Beneficiary name"]))),
                    placeholder: $localize(templateObject_13$4 || (templateObject_13$4 = __makeTemplateObject([":@@international-config.beneficiary-selector-placeholder:Select a beneficiary"], [":@@international-config.beneficiary-selector-placeholder:Select a beneficiary"]))),
                    cssClasses: ['col-12', 'mb-0'],
                    saveNewContactLabel: 'Save as a new contact',
                    validationMessages: [
                        {
                            message: $localize(templateObject_14$4 || (templateObject_14$4 = __makeTemplateObject([":@@international-config.new-contact-label:Beneficiary is same as selected Debit account"], [":@@international-config.new-contact-label:Beneficiary is same as selected Debit account"]))),
                            name: 'sameDebitCreditAccountsSelected',
                        },
                    ],
                    dependants: [
                        exports.CounterPartyFields.bic,
                        exports.CounterPartyFields.country,
                        exports.CounterPartyFields.creditorBank,
                        exports.CounterPartyFields.accountNumber,
                        exports.CounterPartyFields.postalAddress,
                        exports.CounterPartyFields.bankBranchCode,
                        exports.CounterPartyFields.intermediaryBank,
                        exports.CounterPartyFields.correspondentBank,
                    ],
                    tabs: [exports.BeneficiaryList.CONTACTS],
                },
            },
            {
                name: exports.CounterPartyFields.creditorBank,
                fields: [
                    {
                        name: exports.CounterPartyFields.postalAddress,
                        fields: [
                            {
                                name: exports.CounterPartyFields.country,
                                type: exports.PaymentComponents.sanctionedCountrySelector,
                                options: {
                                    label: $localize(templateObject_15$4 || (templateObject_15$4 = __makeTemplateObject([":@@international-config.sanctioned-country-label:Country"], [":@@international-config.sanctioned-country-label:Country"]))),
                                    placeholder: '- select country -',
                                    cssClasses: [
                                        'd-inline-block',
                                        'col-md-6',
                                        'align-top',
                                        'pr-md-3',
                                    ],
                                    validators: [i1$1.Validators.required],
                                },
                            },
                        ],
                    },
                ],
            },
            {
                name: exports.CounterPartyFields.accountNumber,
                type: exports.PaymentComponents.text,
                options: {
                    validators: [i1$1.Validators.required],
                    label: $localize(templateObject_16$4 || (templateObject_16$4 = __makeTemplateObject([":@@international-config.beneficiary.account-number-label:Account number or IBAN"], [":@@international-config.beneficiary.account-number-label:Account number or IBAN"]))),
                    maxLength: 36,
                    cssClasses: ['d-inline-block', 'col-md-6', 'align-top', 'pr-md-3'],
                    validationMessages: [
                        {
                            message: $localize(templateObject_17$4 || (templateObject_17$4 = __makeTemplateObject([":@@international-config.iban-country-error-message:Invalid IBAN"], [":@@international-config.iban-country-error-message:Invalid IBAN"]))),
                            name: 'invalidIbanCountry',
                        },
                    ],
                },
            },
            {
                name: exports.CounterPartyFields.creditorBank,
                fields: [
                    {
                        name: exports.CounterPartyFields.bankBranchCode,
                        type: exports.PaymentComponents.text,
                        options: {
                            validators: [i1$1.Validators.required],
                            label: $localize(templateObject_18$4 || (templateObject_18$4 = __makeTemplateObject([":@@international-config.bank-code-label:Bank code"], [":@@international-config.bank-code-label:Bank code"]))),
                            maxLength: 20,
                            mapToField: exports.PaymentBaseFields.counterparty + "." + exports.CounterPartyFields.creditorBank,
                            cssClasses: ['d-inline-block', 'col-md-6', 'align-top', 'pr-md-3'],
                        },
                    },
                ],
            },
            {
                name: exports.CounterPartyFields.postalAddress,
                type: exports.PaymentComponents.address,
                options: {
                    addressType: 'beneficiary',
                    countries: countriesList,
                    useSanctionedCountries: true,
                    cssClasses: ['col-12'],
                },
            },
            {
                name: exports.CounterPartyFields.creditorBank,
                fields: [
                    {
                        name: exports.CounterPartyFields.bic,
                        type: exports.PaymentComponents.text,
                        options: {
                            validators: [
                                i1$1.Validators.required,
                                i1$1.Validators.pattern(bicCodeValidationPattern),
                            ],
                            label: $localize(templateObject_19$4 || (templateObject_19$4 = __makeTemplateObject([":@@international-config.creditor-bank-bic-label:SWIFT/BIC"], [":@@international-config.creditor-bank-bic-label:SWIFT/BIC"]))),
                            cssClasses: ['d-inline-block', 'col-md-6', 'align-top', 'pr-md-3'],
                        },
                    },
                    {
                        name: exports.CounterPartyFields.bankName,
                        type: exports.PaymentComponents.text,
                        options: {
                            label: $localize(templateObject_20$4 || (templateObject_20$4 = __makeTemplateObject([":@@international-config.creditor-bank-name-label:Bank name"], [":@@international-config.creditor-bank-name-label:Bank name"]))),
                            helperText: $localize(templateObject_21$4 || (templateObject_21$4 = __makeTemplateObject([":@@international-config.bank-name-helper-text: (optional)"], [":@@international-config.bank-name-helper-text: (optional)"]))),
                            maxLength: 140,
                            cssClasses: ['d-inline-block', 'col-md-6', 'align-top', 'pr-md-3'],
                        },
                    },
                    {
                        name: exports.CounterPartyFields.postalAddress,
                        type: exports.PaymentComponents.address,
                        options: {
                            addressType: 'beneficiary bank',
                            countries: countriesList,
                            cssClasses: ['col-12'],
                            hideCountry: true,
                        },
                    },
                ],
            },
            {
                name: exports.CounterPartyFields.correspondentBank,
                cssClasses: ['card--highlight', 'p-3', 'm-3', 'rounded'],
                fields: [
                    {
                        name: exports.CounterPartyFields.enableAdditionalBankDetails,
                        type: exports.PaymentComponents.switch,
                        options: {
                            label: $localize(templateObject_22$4 || (templateObject_22$4 = __makeTemplateObject([":@@international-config.correspondent-bank-label:Transfer through correspondent bank"], [":@@international-config.correspondent-bank-label:Transfer through correspondent bank"]))),
                            cssClasses: ['col-12', 'mb-0'],
                            labelPosition: 'right',
                            dependants: [
                                'selectAdditionalBankCodeType',
                                exports.CounterPartyFields.bic,
                                exports.CounterPartyFields.bankName,
                                exports.CounterPartyFields.postalAddress,
                            ],
                            activateDependantsOn: true,
                        },
                    },
                    {
                        name: 'selectAdditionalBankCodeType',
                        type: exports.PaymentComponents.radio,
                        options: {
                            label: $localize(templateObject_23$4 || (templateObject_23$4 = __makeTemplateObject([":@@international-config.additional-correspondent-bank-code-label:Bank ID type"], [":@@international-config.additional-correspondent-bank-code-label:Bank ID type"]))),
                            isConditionalMandatory: true,
                            cssClasses: ['col-12', 'mb-0', 'mt-3'],
                            horizontal: true,
                            options: [
                                {
                                    label: $localize(templateObject_24$3 || (templateObject_24$3 = __makeTemplateObject([":@@international-config.additional-correspondent-bank-swift-label:SWIFT/BIC"], [":@@international-config.additional-correspondent-bank-swift-label:SWIFT/BIC"]))),
                                    value: 'BIC',
                                },
                                {
                                    label: $localize(templateObject_25$3 || (templateObject_25$3 = __makeTemplateObject([":@@international-config.additional-correspondent-bank-sort-code-label:Sort code"], [":@@international-config.additional-correspondent-bank-sort-code-label:Sort code"]))),
                                    value: 'BRANCH_CODE',
                                },
                            ],
                            defaultValue: 'BIC',
                            dependants: [
                                exports.CounterPartyFields.bic,
                                exports.CounterPartyFields.bankBranchCode,
                            ],
                            activateDependantsOn: toggleBankID,
                        },
                    },
                    {
                        name: exports.CounterPartyFields.bic,
                        type: exports.PaymentComponents.text,
                        options: {
                            isConditionalMandatory: true,
                            validators: [i1$1.Validators.pattern(bicCodeValidationPattern)],
                            label: $localize(templateObject_26$3 || (templateObject_26$3 = __makeTemplateObject([":@@international-config.correspondent-bank-bic-label:SWIFT/BIC"], [":@@international-config.correspondent-bank-bic-label:SWIFT/BIC"]))),
                            cssClasses: ['d-inline-block', 'col-md-6', 'align-top'],
                        },
                    },
                    {
                        name: exports.CounterPartyFields.bankBranchCode,
                        type: exports.PaymentComponents.text,
                        options: {
                            isConditionalMandatory: true,
                            label: $localize(templateObject_27$3 || (templateObject_27$3 = __makeTemplateObject([":@@international-config.correspondent-bank-sort-code-label:Sort code"], [":@@international-config.correspondent-bank-sort-code-label:Sort code"]))),
                            maxLength: 20,
                            cssClasses: ['d-inline-block', 'col-md-6', 'align-top'],
                        },
                    },
                    {
                        name: exports.CounterPartyFields.bankName,
                        type: exports.PaymentComponents.text,
                        options: {
                            label: $localize(templateObject_28$3 || (templateObject_28$3 = __makeTemplateObject([":@@international-config.correspondent-bank-name:Bank name"], [":@@international-config.correspondent-bank-name:Bank name"]))),
                            maxLength: 140,
                            helperText: $localize(templateObject_29$2 || (templateObject_29$2 = __makeTemplateObject([":@@international-config.correspondent-bank-name-helper-text: (optional)"], [":@@international-config.correspondent-bank-name-helper-text: (optional)"]))),
                            cssClasses: ['d-inline-block', 'col-md-6', 'align-top'],
                        },
                    },
                    {
                        name: exports.CounterPartyFields.postalAddress,
                        type: exports.PaymentComponents.address,
                        options: {
                            addressType: 'correspondent bank',
                            useSanctionedCountries: true,
                            countries: countriesList,
                            cssClasses: ['mb-0'],
                        },
                    },
                ],
            },
            {
                name: exports.CounterPartyFields.intermediaryBank,
                cssClasses: ['card--highlight', 'p-3', 'm-3', 'rounded'],
                fields: [
                    {
                        name: exports.CounterPartyFields.enableAdditionalBankDetails,
                        type: exports.PaymentComponents.switch,
                        options: {
                            label: $localize(templateObject_30$2 || (templateObject_30$2 = __makeTemplateObject([":@@international-config.intermediary-bank-label:Transfer through intermediary bank"], [":@@international-config.intermediary-bank-label:Transfer through intermediary bank"]))),
                            cssClasses: ['col-12', 'mb-0'],
                            labelPosition: 'right',
                            dependants: [
                                'selectAdditionalBankCodeType',
                                exports.CounterPartyFields.bic,
                                exports.CounterPartyFields.bankName,
                                exports.CounterPartyFields.postalAddress,
                            ],
                            activateDependantsOn: true,
                        },
                    },
                    {
                        name: 'selectAdditionalBankCodeType',
                        type: exports.PaymentComponents.radio,
                        options: {
                            label: $localize(templateObject_31$2 || (templateObject_31$2 = __makeTemplateObject([":@@international-config.additional-intermediary-bank-code-label:Bank ID type"], [":@@international-config.additional-intermediary-bank-code-label:Bank ID type"]))),
                            isConditionalMandatory: true,
                            cssClasses: ['col-12', 'mb-0', 'mt-3'],
                            horizontal: true,
                            options: [
                                {
                                    label: $localize(templateObject_32$2 || (templateObject_32$2 = __makeTemplateObject([":@@international-config.additional-intermediary-bank-swift-label:SWIFT/BIC"], [":@@international-config.additional-intermediary-bank-swift-label:SWIFT/BIC"]))),
                                    value: 'BIC',
                                },
                                {
                                    label: $localize(templateObject_33$2 || (templateObject_33$2 = __makeTemplateObject([":@@international-config.additional-intermediary-bank-sort-code-label:Sort code"], [":@@international-config.additional-intermediary-bank-sort-code-label:Sort code"]))),
                                    value: 'BRANCH_CODE',
                                },
                            ],
                            defaultValue: 'BIC',
                            dependants: [
                                exports.CounterPartyFields.bic,
                                exports.CounterPartyFields.bankBranchCode,
                            ],
                            activateDependantsOn: toggleBankID,
                        },
                    },
                    {
                        name: exports.CounterPartyFields.bic,
                        type: exports.PaymentComponents.text,
                        options: {
                            isConditionalMandatory: true,
                            validators: [i1$1.Validators.pattern(bicCodeValidationPattern)],
                            label: $localize(templateObject_34$2 || (templateObject_34$2 = __makeTemplateObject([":@@international-config.intermediary-bank-bic-label:SWIFT/BIC"], [":@@international-config.intermediary-bank-bic-label:SWIFT/BIC"]))),
                            cssClasses: ['d-inline-block', 'col-md-6', 'align-top'],
                        },
                    },
                    {
                        name: exports.CounterPartyFields.bankBranchCode,
                        type: exports.PaymentComponents.text,
                        options: {
                            isConditionalMandatory: true,
                            label: $localize(templateObject_35$2 || (templateObject_35$2 = __makeTemplateObject([":@@international-config.intermediary-bank-sort-code-label:Sort code"], [":@@international-config.intermediary-bank-sort-code-label:Sort code"]))),
                            maxLength: 20,
                            cssClasses: ['d-inline-block', 'col-md-6', 'align-top'],
                        },
                    },
                    {
                        name: exports.CounterPartyFields.bankName,
                        type: exports.PaymentComponents.text,
                        options: {
                            label: $localize(templateObject_36$2 || (templateObject_36$2 = __makeTemplateObject([":@@international-config.intermediary-bank-name:Bank name"], [":@@international-config.intermediary-bank-name:Bank name"]))),
                            maxLength: 140,
                            helperText: $localize(templateObject_37$2 || (templateObject_37$2 = __makeTemplateObject([":@@international-config.intermediary-bank-name-helper-text: (optional)"], [":@@international-config.intermediary-bank-name-helper-text: (optional)"]))),
                            cssClasses: ['d-inline-block', 'col-md-6', 'align-top'],
                        },
                    },
                    {
                        name: exports.CounterPartyFields.postalAddress,
                        type: exports.PaymentComponents.address,
                        options: {
                            addressType: 'intermediary bank',
                            useSanctionedCountries: true,
                            countries: countriesList,
                            cssClasses: ['mb-0'],
                        },
                    },
                ],
            },
        ],
    };
    var remittanceInfo$4 = {
        name: exports.PaymentBaseFields.remittanceInfo,
        title: $localize(templateObject_38$2 || (templateObject_38$2 = __makeTemplateObject([":@@international-config.remittance-info-title:Payment details"], [":@@international-config.remittance-info-title:Payment details"]))),
        fields: [
            {
                type: exports.PaymentComponents.sanctionedCurrencyAmount,
                name: exports.RemittanceInfoFields.amountCurrencyGroup,
                options: {
                    label: $localize(templateObject_39$2 || (templateObject_39$2 = __makeTemplateObject([":@@international-config.amount-label:Amount"], [":@@international-config.amount-label:Amount"]))),
                    cssClasses: ['col-12'],
                    validationMessages: [
                        {
                            message: $localize(templateObject_40$2 || (templateObject_40$2 = __makeTemplateObject([":@@international-config.invalid-amount-message:Enter amount"], [":@@international-config.invalid-amount-message:Enter amount"]))),
                            name: 'invalidAmount',
                        },
                        {
                            message: $localize(templateObject_41$1 || (templateObject_41$1 = __makeTemplateObject([":@@international-config.invalid-currency-message:Selected country does not allow payments in this currency"], [":@@international-config.invalid-currency-message:Selected country does not allow payments in this currency"]))),
                            name: 'invalidCurrency',
                        },
                    ],
                },
            },
        ],
    };
    var additionalMessage$1 = {
        name: 'additionalMessage',
        title: $localize(templateObject_42$1 || (templateObject_42$1 = __makeTemplateObject([":@@international-config.information-title:Payment information"], [":@@international-config.information-title:Payment information"]))),
        fields: [
            {
                name: exports.CounterPartyFields.remittanceInformation,
                type: exports.PaymentComponents.textarea,
                options: {
                    label: $localize(templateObject_43$1 || (templateObject_43$1 = __makeTemplateObject([":@@international-config.remittance-info-label:Message to beneficiary"], [":@@international-config.remittance-info-label:Message to beneficiary"]))),
                    placeholder: $localize(templateObject_44 || (templateObject_44 = __makeTemplateObject([":@@international-config.remittance-info-placeholder:Type your message here"], [":@@international-config.remittance-info-placeholder:Type your message here"]))),
                    showCharCounter: true,
                    collapseOptions: {
                        label: $localize(templateObject_45 || (templateObject_45 = __makeTemplateObject([":@@international-config.collapsed.remittance-info-label:Add message to beneficiary"], [":@@international-config.collapsed.remittance-info-label:Add message to beneficiary"]))),
                    },
                    minLength: 0,
                    rows: 3,
                    maxLength: 140,
                    cols: 50,
                    cssClasses: ['d-block', 'col-md-8'],
                    mapToField: exports.PaymentBaseFields.counterparty,
                },
            },
            {
                name: exports.RemittanceInfoFields.purposeOfPayment,
                type: exports.PaymentComponents.purposeOfPayment,
                options: {
                    label: $localize(templateObject_46 || (templateObject_46 = __makeTemplateObject([":@@international-config.purpose-payment-label:Purpose of payment"], [":@@international-config.purpose-payment-label:Purpose of payment"]))),
                    helperText: $localize(templateObject_47 || (templateObject_47 = __makeTemplateObject([":@@international-config.purpose-payment-helper-text: (optional)"], [":@@international-config.purpose-payment-helper-text: (optional)"]))),
                    showCharCounter: true,
                    collapseOptions: {
                        label: $localize(templateObject_48 || (templateObject_48 = __makeTemplateObject([":@@international-config.purpose-collapsed-label:Add purpose of payment"], [":@@international-config.purpose-collapsed-label:Add purpose of payment"]))),
                    },
                    maxLength: 35,
                    cssClasses: ['d-block', 'col-md-8'],
                    mapToField: exports.PaymentBaseFields.remittanceInfo,
                },
            },
        ],
    };
    var paymentOptions = [
        {
            name: exports.PaymentOptionFields.selectPaymentOption,
            type: exports.PaymentComponents.selectPaymentOption,
            options: {
                skipDefaultValue: true,
            },
        },
        {
            name: exports.PaymentOptionFields.chargeBearer,
            type: exports.PaymentComponents.chargeBearer,
            options: {
                label: $localize(templateObject_49 || (templateObject_49 = __makeTemplateObject([":@@international-config.charge-bearer-label:How fees are paid"], [":@@international-config.charge-bearer-label:How fees are paid"]))),
            },
        },
        {
            name: exports.PaymentOptionFields.paymentCost,
            type: exports.PaymentComponents.paymentCost,
            options: {},
        },
    ];
    var INTERNATIONAL_TRANSFER = {
        fields: __spreadArray([
            initiator$5,
            remittanceInfo$4,
            counterParty$2,
            additionalMessage$1,
            defaultScheduleConfig
        ], __read(paymentOptions)),
        name: $localize(templateObject_50 || (templateObject_50 = __makeTemplateObject([":@@international-config.name:International Transfer"], [":@@international-config.name:International Transfer"]))),
        businessFunction: 'US Foreign Wire',
        paymentType: 'INTERNATIONAL_TRANSFER',
    };
    var templateObject_1$7, templateObject_2$6, templateObject_3$6, templateObject_4$6, templateObject_5$5, templateObject_6$5, templateObject_7$4, templateObject_8$4, templateObject_9$4, templateObject_10$4, templateObject_11$4, templateObject_12$4, templateObject_13$4, templateObject_14$4, templateObject_15$4, templateObject_16$4, templateObject_17$4, templateObject_18$4, templateObject_19$4, templateObject_20$4, templateObject_21$4, templateObject_22$4, templateObject_23$4, templateObject_24$3, templateObject_25$3, templateObject_26$3, templateObject_27$3, templateObject_28$3, templateObject_29$2, templateObject_30$2, templateObject_31$2, templateObject_32$2, templateObject_33$2, templateObject_34$2, templateObject_35$2, templateObject_36$2, templateObject_37$2, templateObject_38$2, templateObject_39$2, templateObject_40$2, templateObject_41$1, templateObject_42$1, templateObject_43$1, templateObject_44, templateObject_45, templateObject_46, templateObject_47, templateObject_48, templateObject_49, templateObject_50;

    var initiator$4 = {
        name: exports.PaymentBaseFields.initiator,
        fields: [
            {
                type: exports.PaymentComponents.header,
                name: exports.PaymentComponents.header,
                options: {
                    cssClasses: ['px-3', 'mb-3'],
                    heading: $localize(templateObject_1$6 || (templateObject_1$6 = __makeTemplateObject([":@@intrabank-config.initiator-label:From"], [":@@intrabank-config.initiator-label:From"]))),
                    headingType: 'h3',
                },
            },
            {
                type: exports.PaymentComponents.internalAccountSelector,
                name: exports.InitiatorFields.initiatorAccountGroup,
                options: {
                    placeholder: $localize(templateObject_2$5 || (templateObject_2$5 = __makeTemplateObject([":@@intrabank-config.initiator-placeholder:Select an account"], [":@@intrabank-config.initiator-placeholder:Select an account"]))),
                    cssClasses: ['col-12', 'bb-block', 'bb-block--xl'],
                    preselect: true,
                },
            },
        ],
    };
    var counterParty$1 = {
        name: exports.PaymentBaseFields.counterparty,
        fields: [
            {
                type: exports.PaymentComponents.header,
                name: exports.PaymentComponents.header,
                options: {
                    cssClasses: ['px-3', 'mb-3'],
                    heading: $localize(templateObject_3$5 || (templateObject_3$5 = __makeTemplateObject([":@@intrabank-config.beneficiary-label:To"], [":@@intrabank-config.beneficiary-label:To"]))),
                    headingType: 'h3',
                },
            },
            {
                name: exports.CounterPartyFields.name,
                type: exports.PaymentComponents.contactSelector,
                options: {
                    label: $localize(templateObject_4$5 || (templateObject_4$5 = __makeTemplateObject([":@@intrabank-config.beneficiary-contact-label:Recipient\u2019s name"], [":@@intrabank-config.beneficiary-contact-label:Recipient\u2019s name"]))),
                    placeholder: $localize(templateObject_5$4 || (templateObject_5$4 = __makeTemplateObject([":@@intrabank-config.beneficiary-contact-placeholder:Select contact or enter new"], [":@@intrabank-config.beneficiary-contact-placeholder:Select contact or enter new"]))),
                    cssClasses: ['col-md-6'],
                    validators: [i1$1.Validators.required],
                    mapItems: function (contacts) { return contacts.filter(function (_a) {
                        var accounts = _a.accounts;
                        return !!accounts[0].accountNumber;
                    }); },
                    contactSchemes: [{ name: exports.ContactScheme.accountNumber }],
                    validationMessages: [
                        {
                            message: $localize(templateObject_6$4 || (templateObject_6$4 = __makeTemplateObject([":@@intrabank-config.beneficiary-invalid-name-message:Enter a valid name"], [":@@intrabank-config.beneficiary-invalid-name-message:Enter a valid name"]))),
                            name: 'pattern',
                        },
                        {
                            name: 'required',
                            message: $localize(templateObject_7$3 || (templateObject_7$3 = __makeTemplateObject([":@@intrabank-config.beneficiary-required-name-message:Enter a recipient name"], [":@@intrabank-config.beneficiary-required-name-message:Enter a recipient name"]))),
                        },
                    ],
                },
            },
            {
                name: exports.CounterPartyFields.accountNumber,
                type: exports.PaymentComponents.text,
                options: {
                    validators: [i1$1.Validators.required],
                    label: $localize(templateObject_8$3 || (templateObject_8$3 = __makeTemplateObject([":@@intrabank-config.beneficiary-account-number-label:Recipient\u2019s account number"], [":@@intrabank-config.beneficiary-account-number-label:Recipient\u2019s account number"]))),
                    cssClasses: ['col-md-6', 'bb-block', 'bb-block--md'],
                    validationMessages: [
                        {
                            name: 'required',
                            message: $localize(templateObject_9$3 || (templateObject_9$3 = __makeTemplateObject([":@@intrabank-config.beneficiary-account-number-required-message:Enter an account number"], [":@@intrabank-config.beneficiary-account-number-required-message:Enter an account number"]))),
                        },
                    ],
                },
            },
            {
                name: exports.CounterPartyFields.saveNewContact,
                type: exports.PaymentComponents.checkbox,
                options: {
                    cssClasses: ['col-md-6', 'bb-block', 'bb-block--lg'],
                    label: $localize(templateObject_10$3 || (templateObject_10$3 = __makeTemplateObject([":@@intrabank-config.new-contact-label:Save to contacts"], [":@@intrabank-config.new-contact-label:Save to contacts"]))),
                },
                hooks: {
                    onInit: intrabankCheckboxOnInitHook,
                },
            },
        ],
    };
    var remittanceInfo$3 = {
        name: exports.PaymentBaseFields.remittanceInfo,
        fields: [
            {
                type: exports.PaymentComponents.header,
                name: exports.PaymentComponents.header,
                options: {
                    cssClasses: ['col-12', 'pb-0', 'pt-2', 'bb-fieldset__heading'],
                    heading: 'Payment details',
                    headingType: 'h2',
                    headingClasses: ['mb-0'],
                    separatorLine: true,
                },
            },
            {
                type: exports.PaymentComponents.compactAmount,
                name: exports.RemittanceInfoFields.amountCurrencyGroup,
                options: {
                    label: $localize(templateObject_11$3 || (templateObject_11$3 = __makeTemplateObject([":@@intrabank-config.amount-label:Amount"], [":@@intrabank-config.amount-label:Amount"]))),
                    cssClasses: [
                        'bb-amount-input__field--large',
                        'bb-block',
                        'bb-block--lg',
                        'col-md-6',
                    ],
                    currency: 'USD',
                    autoDecimal: true,
                    keepValueOnHidden: true,
                    validationMessages: [
                        {
                            name: 'invalidAmount',
                            message: $localize(templateObject_12$3 || (templateObject_12$3 = __makeTemplateObject([":@@intrabank-config.invalid-amount-message:Please add amount of this transfer"], [":@@intrabank-config.invalid-amount-message:Please add amount of this transfer"]))),
                        },
                    ],
                },
            },
            {
                type: exports.PaymentComponents.textarea,
                name: exports.RemittanceInfoFields.description,
                options: {
                    label: $localize(templateObject_13$3 || (templateObject_13$3 = __makeTemplateObject([":@@intrabank-config.add-memo-label:Add memo"], [":@@intrabank-config.add-memo-label:Add memo"]))),
                    placeholder: $localize(templateObject_14$3 || (templateObject_14$3 = __makeTemplateObject([":@@intrabank-config.add-memo-placeholder:Enter memo"], [":@@intrabank-config.add-memo-placeholder:Enter memo"]))),
                    showCharCounter: true,
                    minLength: 0,
                    rows: 2,
                    maxLength: 140,
                    helperText: $localize(templateObject_15$3 || (templateObject_15$3 = __makeTemplateObject([":@@intrabank-config.add-memo-helper-text: (Optional)"], [":@@intrabank-config.add-memo-helper-text: (Optional)"]))),
                    cssClasses: ['col-md-6', 'bb-block', 'bb-block--lg'],
                },
            },
        ],
    };
    var schedule$2 = {
        name: exports.PaymentBaseFields.schedule,
        fields: [
            {
                type: exports.PaymentComponents.scheduleHeader,
                name: exports.PaymentComponents.scheduleHeader,
                options: {
                    cssClasses: ['pb-0', 'bb-schedule-header__relative-text'],
                    label: $localize(templateObject_16$3 || (templateObject_16$3 = __makeTemplateObject([":@@intrabank-config.schedule-label:Schedule"], [":@@intrabank-config.schedule-label:Schedule"]))),
                },
            },
            {
                type: exports.PaymentComponents.alert,
                name: exports.PaymentComponents.alert,
                hidden: true,
                options: {
                    cssClasses: ['col-md-12'],
                    alerts: {
                        undue: {
                            title: $localize(templateObject_17$3 || (templateObject_17$3 = __makeTemplateObject([":@@intrabank-config.undue-alert-label:A payment executed after the due date will incur a  late fee."], [":@@intrabank-config.undue-alert-label:A payment executed after the due date will incur a  late fee."]))),
                            description: $localize(templateObject_18$3 || (templateObject_18$3 = __makeTemplateObject([":@@intrabank-config.undue-alert-description:The due date is @@date. A payment made before may improve your credit score."], [":@@intrabank-config.undue-alert-description:The due date is @@date. A payment made before may improve your credit score."]))),
                            modifier: 'info',
                        },
                        overdue: {
                            title: $localize(templateObject_19$3 || (templateObject_19$3 = __makeTemplateObject([":@@intrabank-config.overdue-alert-label:The due date has passed. This payment will incur a late fee."], [":@@intrabank-config.overdue-alert-label:The due date has passed. This payment will incur a late fee."]))),
                            description: $localize(templateObject_20$3 || (templateObject_20$3 = __makeTemplateObject([":@@intrabank-config.overdue-alert-description:The due date was @@date. Late payments will decrease your credit score."], [":@@intrabank-config.overdue-alert-description:The due date was @@date. Late payments will decrease your credit score."]))),
                            modifier: 'warning',
                        },
                    },
                },
                hooks: {
                    onInit: internalTransferScheduleAlertOnInitHook,
                },
            },
            {
                type: exports.PaymentComponents.date,
                name: exports.ScheduleFields.startDate,
                options: {
                    label: $localize(templateObject_21$3 || (templateObject_21$3 = __makeTemplateObject([":@@intrabank-config.transfer-date-label:Transfer date"], [":@@intrabank-config.transfer-date-label:Transfer date"]))),
                    cssClasses: ['d-block', 'col-md-6', 'align-top'],
                    validators: [i1$1.Validators.required, pastDateValidator],
                    defaultValue: new Date().toISOString(),
                    validationMessages: [
                        {
                            name: 'pastDate',
                            message: $localize(templateObject_22$3 || (templateObject_22$3 = __makeTemplateObject([":@@intrabank-config.past-date-error-message:Start date cannot be in the past"], [":@@intrabank-config.past-date-error-message:Start date cannot be in the past"]))),
                        },
                    ],
                    description: $localize(templateObject_23$3 || (templateObject_23$3 = __makeTemplateObject([":@@intrabank-config.transfer-date-description:You selected a date after the due date, this transfer will incur a late fee"], [":@@intrabank-config.transfer-date-description:You selected a date after the due date, this transfer will incur a late fee"]))),
                },
                hooks: {
                    onInit: internalTransScheduleStartDateOnInitHook,
                    onDestroy: scheduleStartDateOnDestroyHook,
                },
            },
            {
                type: exports.PaymentComponents.select,
                name: exports.ScheduleFields.frequency,
                options: {
                    label: $localize(templateObject_24$2 || (templateObject_24$2 = __makeTemplateObject([":@@intrabank-config.frequency-label:Frequency"], [":@@intrabank-config.frequency-label:Frequency"]))),
                    validators: [i1$1.Validators.required],
                    options: [
                        {
                            label: $localize(templateObject_25$2 || (templateObject_25$2 = __makeTemplateObject([":@@intrabank-config.once-frequency-label:Once"], [":@@intrabank-config.once-frequency-label:Once"]))),
                            value: exports.Frequencies.ONCE,
                        },
                        {
                            label: $localize(templateObject_26$2 || (templateObject_26$2 = __makeTemplateObject([":@@intrabank-config.weekly-frequency-label:Weekly"], [":@@intrabank-config.weekly-frequency-label:Weekly"]))),
                            value: exports.Frequencies.WEEKLY,
                        },
                        {
                            label: $localize(templateObject_27$2 || (templateObject_27$2 = __makeTemplateObject([":@@intrabank-config.biweekly-frequency-label:Biweekly"], [":@@intrabank-config.biweekly-frequency-label:Biweekly"]))),
                            value: exports.Frequencies.BIWEEKLY,
                        },
                        {
                            label: $localize(templateObject_28$2 || (templateObject_28$2 = __makeTemplateObject([":@@intrabank-config.monthly-frequency-label:Monthly"], [":@@intrabank-config.monthly-frequency-label:Monthly"]))),
                            value: exports.Frequencies.MONTHLY,
                        },
                        {
                            label: $localize(templateObject_29$1 || (templateObject_29$1 = __makeTemplateObject([":@@intrabank-config.quarterly-frequency-label:Quarterly"], [":@@intrabank-config.quarterly-frequency-label:Quarterly"]))),
                            value: exports.Frequencies.QUARTERLY,
                        },
                        {
                            label: $localize(templateObject_30$1 || (templateObject_30$1 = __makeTemplateObject([":@@intrabank-config.annually-frequency-label:Annually"], [":@@intrabank-config.annually-frequency-label:Annually"]))),
                            value: exports.Frequencies.YEARLY,
                        },
                    ],
                    defaultValue: exports.Frequencies.ONCE,
                    cssClasses: ['d-block', 'col-md-6', 'align-top'],
                    dependants: [exports.ScheduleFields.endType],
                    activateDependantsOn: scheduleFrequencyToggleDependants,
                },
            },
            {
                type: exports.PaymentComponents.radio,
                name: exports.ScheduleFields.endType,
                options: {
                    label: $localize(templateObject_31$1 || (templateObject_31$1 = __makeTemplateObject([":@@intrabank-config.end-type-label:End"], [":@@intrabank-config.end-type-label:End"]))),
                    preselect: true,
                    isConditionalMandatory: true,
                    cssClasses: ['d-inline-block', 'col-md-2', 'align-top'],
                    defaultValue: exports.ScheduleEndType.NEVER,
                    options: [
                        {
                            label: $localize(templateObject_32$1 || (templateObject_32$1 = __makeTemplateObject([":@@intrabank-config.never-end-type-label:Never"], [":@@intrabank-config.never-end-type-label:Never"]))),
                            value: exports.ScheduleEndType.NEVER,
                        },
                        {
                            label: $localize(templateObject_33$1 || (templateObject_33$1 = __makeTemplateObject([":@@intrabank-config.after-end-type-label:After"], [":@@intrabank-config.after-end-type-label:After"]))),
                            value: exports.ScheduleEndType.AFTER,
                        },
                    ],
                    dependants: [exports.ScheduleFields.endDate, exports.ScheduleFields.repeat],
                    activateDependantsOn: scheduleEndTypeToggleDependants,
                },
            },
            {
                type: exports.PaymentComponents.date,
                name: exports.ScheduleFields.endDate,
                options: {
                    cssClasses: [
                        'd-inline-block',
                        'col-md-10',
                        'align-top',
                        'bb-schedule__end-date',
                    ],
                    validators: [endDateAfterStartDateValidator],
                    validationMessages: [
                        {
                            name: 'required',
                            message: $localize(templateObject_34$1 || (templateObject_34$1 = __makeTemplateObject([":@@intrabank-config.end-date-required-message:End date is required"], [":@@intrabank-config.end-date-required-message:End date is required"]))),
                        },
                        {
                            name: 'lessThanStartDate',
                            message: $localize(templateObject_35$1 || (templateObject_35$1 = __makeTemplateObject([":@@intrabank-config.end-date-less-start-date-message:End date cannot be before start date"], [":@@intrabank-config.end-date-less-start-date-message:End date cannot be before start date"]))),
                        },
                    ],
                    isConditionalMandatory: true,
                },
                hooks: {
                    onInit: scheduleEndDateOnInitHook,
                },
            },
            {
                type: exports.PaymentComponents.number,
                name: exports.ScheduleFields.repeat,
                options: {
                    isConditionalMandatory: true,
                    description: $localize(templateObject_36$1 || (templateObject_36$1 = __makeTemplateObject([":@@intrabank-config.ocurrences-description:occurrences"], [":@@intrabank-config.ocurrences-description:occurrences"]))),
                    min: 2,
                    max: 200,
                    defaultValue: 2,
                    validators: [minValueTwoValidator, maxValueTwoHundredValidator],
                    validationMessages: [
                        {
                            name: 'required',
                            message: $localize(templateObject_37$1 || (templateObject_37$1 = __makeTemplateObject([":@@intrabank-config.ocurrences-required-message:Value is required"], [":@@intrabank-config.ocurrences-required-message:Value is required"]))),
                        },
                        {
                            name: 'min',
                            message: $localize(templateObject_38$1 || (templateObject_38$1 = __makeTemplateObject([":@@intrabank-config.min-ocurrences-message:Value is below the minimum allowed occurrences (2)"], [":@@intrabank-config.min-ocurrences-message:Value is below the minimum allowed occurrences (2)"]))),
                        },
                        {
                            name: 'max',
                            message: $localize(templateObject_39$1 || (templateObject_39$1 = __makeTemplateObject([":@@intrabank-config.max-ocurrences-message:Value exceeds maximum allowed occurances (200)"], [":@@intrabank-config.max-ocurrences-message:Value exceeds maximum allowed occurances (200)"]))),
                        },
                    ],
                    cssClasses: [
                        'd-inline-block',
                        'col-md-9',
                        'align-top',
                        'px-0',
                        'bb-schedule__repeat',
                        'bb-schedule__repeat--two-option',
                    ],
                },
            },
        ],
    };
    var INTRABANK_TRANSFER = {
        fields: [initiator$4, counterParty$1, remittanceInfo$3, schedule$2],
        name: $localize(templateObject_40$1 || (templateObject_40$1 = __makeTemplateObject([":@@intrabank-config.name:Intrabank Transfer"], [":@@intrabank-config.name:Intrabank Transfer"]))),
        paymentType: 'INTRABANK_TRANSFER',
        businessFunction: 'A2A Transfer',
        hooks: {
            onDestroy: internalTransferOnDestroyHook,
        },
    };
    var templateObject_1$6, templateObject_2$5, templateObject_3$5, templateObject_4$5, templateObject_5$4, templateObject_6$4, templateObject_7$3, templateObject_8$3, templateObject_9$3, templateObject_10$3, templateObject_11$3, templateObject_12$3, templateObject_13$3, templateObject_14$3, templateObject_15$3, templateObject_16$3, templateObject_17$3, templateObject_18$3, templateObject_19$3, templateObject_20$3, templateObject_21$3, templateObject_22$3, templateObject_23$3, templateObject_24$2, templateObject_25$2, templateObject_26$2, templateObject_27$2, templateObject_28$2, templateObject_29$1, templateObject_30$1, templateObject_31$1, templateObject_32$1, templateObject_33$1, templateObject_34$1, templateObject_35$1, templateObject_36$1, templateObject_37$1, templateObject_38$1, templateObject_39$1, templateObject_40$1;

    var initiator$3 = {
        name: exports.PaymentBaseFields.initiator,
        fields: [
            {
                type: exports.PaymentComponents.accountSelector,
                name: exports.InitiatorFields.initiatorAccountGroup,
                options: {
                    label: $localize(templateObject_1$5 || (templateObject_1$5 = __makeTemplateObject([":@@internal-bus-config.initiator-label:From"], [":@@internal-bus-config.initiator-label:From"]))),
                    placeholder: $localize(templateObject_2$4 || (templateObject_2$4 = __makeTemplateObject([":@@internal-bus-config.initiator-placeholder:Select an account"], [":@@internal-bus-config.initiator-placeholder:Select an account"]))),
                    cssClasses: ['col-12', 'bb-block', 'bb-block--lg'],
                    validationMessages: [
                        {
                            name: 'required',
                            message: $localize(templateObject_3$4 || (templateObject_3$4 = __makeTemplateObject([":@@internal-bus-config.initiator-required-error:Please select an account from the list to transfer from"], [":@@internal-bus-config.initiator-required-error:Please select an account from the list to transfer from"]))),
                        },
                    ],
                },
            },
        ],
    };
    var counterparty$1 = {
        name: exports.PaymentBaseFields.counterparty,
        fields: [
            {
                type: exports.PaymentComponents.accountSelector,
                name: exports.CounterPartyFields.counterPartyAccountGroup,
                options: {
                    label: $localize(templateObject_4$4 || (templateObject_4$4 = __makeTemplateObject([":@@internal-bus-config.counterparty-label:To"], [":@@internal-bus-config.counterparty-label:To"]))),
                    placeholder: $localize(templateObject_5$3 || (templateObject_5$3 = __makeTemplateObject([":@@internal-bus-config.counterparty-placeholder:Select an account"], [":@@internal-bus-config.counterparty-placeholder:Select an account"]))),
                    cssClasses: ['col-12', 'bb-block', 'bb-block--lg'],
                    validationMessages: [
                        {
                            name: 'required',
                            message: $localize(templateObject_6$3 || (templateObject_6$3 = __makeTemplateObject([":@@internal-bus-config.counterparty-required-err:Please select an account from the list to transfer to"], [":@@internal-bus-config.counterparty-required-err:Please select an account from the list to transfer to"]))),
                        },
                        {
                            message: $localize(templateObject_7$2 || (templateObject_7$2 = __makeTemplateObject([":@@internal-bus-config.counterparty-same-acc-err:Beneficiary is same as selected Debit account"], [":@@internal-bus-config.counterparty-same-acc-err:Beneficiary is same as selected Debit account"]))),
                            name: 'sameDebitCreditAccountsSelected',
                        },
                    ],
                },
            },
        ],
    };
    var remittanceInfo$2 = {
        name: exports.PaymentBaseFields.remittanceInfo,
        fields: [
            {
                type: exports.PaymentComponents.amount,
                name: exports.RemittanceInfoFields.amountCurrencyGroup,
                options: {
                    label: $localize(templateObject_8$2 || (templateObject_8$2 = __makeTemplateObject([":@@internal-bus-config.amount-label:Amount"], [":@@internal-bus-config.amount-label:Amount"]))),
                    currencies: ['USD'],
                    cssClasses: ['col-md-8', 'large-label'],
                },
            },
            {
                name: exports.CounterPartyFields.remittanceInformation,
                type: exports.PaymentComponents.textarea,
                options: {
                    label: $localize(templateObject_9$2 || (templateObject_9$2 = __makeTemplateObject([":@@internal-bus-config.remittance-Info-label:Description"], [":@@internal-bus-config.remittance-Info-label:Description"]))),
                    showCharCounter: true,
                    minLength: 0,
                    rows: 3,
                    maxLength: 140,
                    cols: 50,
                    cssClasses: ['col-md-8'],
                    mapToField: exports.PaymentBaseFields.counterparty,
                },
            },
        ],
    };
    var schedule$1 = {
        name: exports.PaymentBaseFields.schedule,
        fields: [
            {
                type: exports.PaymentComponents.date,
                name: exports.ScheduleFields.startDate,
                options: {
                    label: $localize(templateObject_10$2 || (templateObject_10$2 = __makeTemplateObject([":@@internal-bus-config.start-date-label:Start on"], [":@@internal-bus-config.start-date-label:Start on"]))),
                    cssClasses: ['d-inline-block', 'col-md-6', 'align-top'],
                    validators: [i1$1.Validators.required, pastDateValidator],
                    defaultValue: new Date().toISOString(),
                    validationMessages: [
                        {
                            name: 'pastDate',
                            message: $localize(templateObject_11$2 || (templateObject_11$2 = __makeTemplateObject([":@@internal-bus-config.start-date-past-err:Start date cannot be in the past"], [":@@internal-bus-config.start-date-past-err:Start date cannot be in the past"]))),
                        },
                    ],
                },
                hooks: {
                    onInit: scheduleStartDateOnInitHook,
                    onDestroy: scheduleStartDateOnDestroyHook,
                },
            },
            {
                name: exports.ScheduleFields.frequency,
                type: exports.PaymentComponents.select,
                options: {
                    label: 'Frequency',
                    validators: [i1$1.Validators.required],
                    options: [
                        {
                            label: $localize(templateObject_12$2 || (templateObject_12$2 = __makeTemplateObject([":@@internal-bus-config.freq-once-label:Once"], [":@@internal-bus-config.freq-once-label:Once"]))),
                            value: exports.Frequencies.ONCE,
                        },
                        {
                            label: $localize(templateObject_13$2 || (templateObject_13$2 = __makeTemplateObject([":@@internal-bus-config.freq-daily-label:Daily"], [":@@internal-bus-config.freq-daily-label:Daily"]))),
                            value: exports.Frequencies.DAILY,
                        },
                        {
                            label: $localize(templateObject_14$2 || (templateObject_14$2 = __makeTemplateObject([":@@internal-bus-config.freq-weekly-label:Weekly"], [":@@internal-bus-config.freq-weekly-label:Weekly"]))),
                            value: exports.Frequencies.WEEKLY,
                        },
                        {
                            label: $localize(templateObject_15$2 || (templateObject_15$2 = __makeTemplateObject([":@@internal-bus-config.freq-biweekly-label:Biweekly"], [":@@internal-bus-config.freq-biweekly-label:Biweekly"]))),
                            value: exports.Frequencies.BIWEEKLY,
                        },
                        {
                            label: $localize(templateObject_16$2 || (templateObject_16$2 = __makeTemplateObject([":@@internal-bus-config.freq-monthly-label:Monthly"], [":@@internal-bus-config.freq-monthly-label:Monthly"]))),
                            value: exports.Frequencies.MONTHLY,
                        },
                        {
                            label: $localize(templateObject_17$2 || (templateObject_17$2 = __makeTemplateObject([":@@internal-bus-config.freq-quarterly-label:Quarterly"], [":@@internal-bus-config.freq-quarterly-label:Quarterly"]))),
                            value: exports.Frequencies.QUARTERLY,
                        },
                        {
                            label: $localize(templateObject_18$2 || (templateObject_18$2 = __makeTemplateObject([":@@internal-bus-config.freq-annually-label:Annually"], [":@@internal-bus-config.freq-annually-label:Annually"]))),
                            value: exports.Frequencies.YEARLY,
                        },
                    ],
                    defaultValue: exports.Frequencies.ONCE,
                    cssClasses: ['d-inline-block', 'col-md-6', 'align-top'],
                    dependants: [exports.ScheduleFields.endType],
                    activateDependantsOn: scheduleFrequencyToggleDependants,
                },
            },
            {
                name: exports.ScheduleFields.endType,
                type: exports.PaymentComponents.radio,
                options: {
                    label: 'End',
                    preselect: true,
                    isConditionalMandatory: true,
                    cssClasses: [
                        'd-inline-block',
                        'col-md-2',
                        'align-top',
                        'bb-schedule__end-type',
                    ],
                    defaultValue: exports.ScheduleEndType.NEVER,
                    options: [
                        {
                            label: $localize(templateObject_19$2 || (templateObject_19$2 = __makeTemplateObject([":@@internal-bus-config.end-date-type-never-label:Never"], [":@@internal-bus-config.end-date-type-never-label:Never"]))),
                            value: exports.ScheduleEndType.NEVER,
                        },
                        {
                            label: $localize(templateObject_20$2 || (templateObject_20$2 = __makeTemplateObject([":@@internal-bus-config.end-date-type-on-label:On date"], [":@@internal-bus-config.end-date-type-on-label:On date"]))),
                            value: exports.ScheduleEndType.ON,
                        },
                        {
                            label: $localize(templateObject_21$2 || (templateObject_21$2 = __makeTemplateObject([":@@internal-bus-config.end-date-type-after-label:After"], [":@@internal-bus-config.end-date-type-after-label:After"]))),
                            value: exports.ScheduleEndType.AFTER,
                        },
                    ],
                    dependants: [exports.ScheduleFields.endDate, exports.ScheduleFields.repeat],
                    activateDependantsOn: scheduleEndTypeToggleDependants,
                },
            },
            {
                type: exports.PaymentComponents.date,
                name: exports.ScheduleFields.endDate,
                options: {
                    cssClasses: [
                        'd-inline-block',
                        'col-md-10',
                        'align-top',
                        'bb-schedule__end-date',
                    ],
                    validators: [endDateAfterStartDateValidator],
                    validationMessages: [
                        {
                            name: 'required',
                            message: $localize(templateObject_22$2 || (templateObject_22$2 = __makeTemplateObject([":@@internal-bus-config.end-date-past-err:End date is required"], [":@@internal-bus-config.end-date-past-err:End date is required"]))),
                        },
                        {
                            name: 'lessThanStartDate',
                            message: $localize(templateObject_23$2 || (templateObject_23$2 = __makeTemplateObject([":@@internal-bus-config.end-date--before-start-err:End date cannot be before start date"], [":@@internal-bus-config.end-date--before-start-err:End date cannot be before start date"]))),
                        },
                    ],
                    isConditionalMandatory: true,
                },
                hooks: {
                    onInit: scheduleEndDateOnInitHook,
                },
            },
            {
                name: exports.ScheduleFields.repeat,
                type: exports.PaymentComponents.number,
                options: {
                    isConditionalMandatory: true,
                    description: $localize(templateObject_24$1 || (templateObject_24$1 = __makeTemplateObject([":@@internal-bus-config.repeat-desc:times"], [":@@internal-bus-config.repeat-desc:times"]))),
                    min: 2,
                    max: 200,
                    defaultValue: 2,
                    validators: [minValueTwoValidator, maxValueTwoHundredValidator],
                    validationMessages: [
                        {
                            name: 'required',
                            message: $localize(templateObject_25$1 || (templateObject_25$1 = __makeTemplateObject([":@@internal-bus-config.repeat-required-err:Value is required"], [":@@internal-bus-config.repeat-required-err:Value is required"]))),
                        },
                        {
                            name: 'min',
                            message: $localize(templateObject_26$1 || (templateObject_26$1 = __makeTemplateObject([":@@internal-bus-config.repeat-min-val-err:Value is below the minimum allowed occurrences (2)"], [":@@internal-bus-config.repeat-min-val-err:Value is below the minimum allowed occurrences (2)"]))),
                        },
                        {
                            name: 'max',
                            message: $localize(templateObject_27$1 || (templateObject_27$1 = __makeTemplateObject([":@@internal-bus-config.repeat-max-val-err:Value exceeds maximum allowed occurances (200)"], [":@@internal-bus-config.repeat-max-val-err:Value exceeds maximum allowed occurances (200)"]))),
                        },
                    ],
                    cssClasses: [
                        'd-inline-block',
                        'col-md-9',
                        'align-top',
                        'px-0',
                        'bb-schedule__repeat',
                    ],
                },
            },
        ],
    };
    var INTERNAL_TRANSFER_BUSINESS = {
        fields: [initiator$3, counterparty$1, remittanceInfo$2, schedule$1],
        name: $localize(templateObject_28$1 || (templateObject_28$1 = __makeTemplateObject([":@@internal-bus-config.name:Internal Transfer"], [":@@internal-bus-config.name:Internal Transfer"]))),
        businessFunction: 'A2A Transfer',
        paymentType: 'INTERNAL_TRANSFER',
    };
    var templateObject_1$5, templateObject_2$4, templateObject_3$4, templateObject_4$4, templateObject_5$3, templateObject_6$3, templateObject_7$2, templateObject_8$2, templateObject_9$2, templateObject_10$2, templateObject_11$2, templateObject_12$2, templateObject_13$2, templateObject_14$2, templateObject_15$2, templateObject_16$2, templateObject_17$2, templateObject_18$2, templateObject_19$2, templateObject_20$2, templateObject_21$2, templateObject_22$2, templateObject_23$2, templateObject_24$1, templateObject_25$1, templateObject_26$1, templateObject_27$1, templateObject_28$1;

    var emailRegex = /(^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$)$/;
    var phoneNumberRegex = /(^(?:\+?1[-. ]?)?\(?([0-9]{3})\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$)$/;
    var initiator$2 = {
        name: exports.PaymentBaseFields.initiator,
        fields: [
            {
                type: exports.PaymentComponents.header,
                name: exports.PaymentComponents.header,
                options: {
                    cssClasses: ['px-3', 'mb-3'],
                    heading: $localize(templateObject_1$4 || (templateObject_1$4 = __makeTemplateObject([":@@p2p-config.initiator-label:From"], [":@@p2p-config.initiator-label:From"]))),
                    headingType: 'h3',
                },
            },
            {
                type: exports.PaymentComponents.internalAccountSelector,
                name: exports.InitiatorFields.initiatorAccountGroup,
                options: {
                    placeholder: $localize(templateObject_2$3 || (templateObject_2$3 = __makeTemplateObject([":@@p2p-config.initiator-placeholder:Select an account"], [":@@p2p-config.initiator-placeholder:Select an account"]))),
                    cssClasses: ['col-12', 'bb-block', 'bb-block--xl'],
                    preselect: true,
                },
            },
        ],
    };
    var counterParty = {
        name: exports.PaymentBaseFields.counterparty,
        fields: [
            {
                type: exports.PaymentComponents.header,
                name: exports.PaymentComponents.header,
                options: {
                    cssClasses: ['px-3', 'mb-3'],
                    heading: $localize(templateObject_3$3 || (templateObject_3$3 = __makeTemplateObject([":@@p2p-config.beneficiary-label:To"], [":@@p2p-config.beneficiary-label:To"]))),
                    headingType: 'h3',
                },
            },
            {
                name: exports.CounterPartyFields.name,
                type: exports.PaymentComponents.contactSelector,
                options: {
                    label: $localize(templateObject_4$3 || (templateObject_4$3 = __makeTemplateObject([":@@p2p-config.beneficiary-contact-label:Name"], [":@@p2p-config.beneficiary-contact-label:Name"]))),
                    placeholder: $localize(templateObject_5$2 || (templateObject_5$2 = __makeTemplateObject([":@@p2p-config.beneficiary-contact-description:Select contact or enter new"], [":@@p2p-config.beneficiary-contact-description:Select contact or enter new"]))),
                    cssClasses: ['col-md-6'],
                    validators: [i1$1.Validators.required],
                    mapItems: function (contacts) { return contacts.filter(function (_c) {
                        var accounts = _c.accounts;
                        var _a, _b;
                        return ((_a = accounts[0]) === null || _a === void 0 ? void 0 : _a.email) || ((_b = accounts[0]) === null || _b === void 0 ? void 0 : _b.phoneNumber);
                    }); },
                    contactSchemes: [
                        { name: exports.ContactScheme.email, regex: emailRegex },
                        { name: exports.ContactScheme.phoneNumber, regex: phoneNumberRegex },
                    ],
                    validationMessages: [
                        {
                            message: $localize(templateObject_6$2 || (templateObject_6$2 = __makeTemplateObject([":@@p2p-config.beneficiary-invalid-name-message:Enter a valid name"], [":@@p2p-config.beneficiary-invalid-name-message:Enter a valid name"]))),
                            name: 'pattern',
                        },
                        {
                            name: 'required',
                            message: $localize(templateObject_7$1 || (templateObject_7$1 = __makeTemplateObject([":@@p2p-config.beneficiary-required-name-message:Please select a contact or enter a new one manually"], [":@@p2p-config.beneficiary-required-name-message:Please select a contact or enter a new one manually"]))),
                        },
                    ],
                },
            },
            {
                name: exports.CounterPartyFields.accountNumber,
                type: exports.PaymentComponents.text,
                options: {
                    validators: [
                        i1$1.Validators.required,
                        i1$1.Validators.pattern(new RegExp(phoneNumberRegex.source + '|' + emailRegex.source)),
                    ],
                    label: $localize(templateObject_8$1 || (templateObject_8$1 = __makeTemplateObject([":@@p2p-config.beneficiary-account-number-label:Mobile Number or Email Address"], [":@@p2p-config.beneficiary-account-number-label:Mobile Number or Email Address"]))),
                    cssClasses: ['col-md-6', 'bb-block', 'bb-block--md'],
                    validationMessages: [
                        {
                            name: 'required',
                            message: $localize(templateObject_9$1 || (templateObject_9$1 = __makeTemplateObject([":@@p2p-config.beneficiary-account-number-required-message:Please enter a valid mobile number or email address"], [":@@p2p-config.beneficiary-account-number-required-message:Please enter a valid mobile number or email address"]))),
                        },
                    ],
                },
            },
            {
                name: exports.CounterPartyFields.saveNewContact,
                type: exports.PaymentComponents.checkbox,
                options: {
                    cssClasses: ['col-md-6', 'bb-block', 'bb-block--lg'],
                    label: $localize(templateObject_10$1 || (templateObject_10$1 = __makeTemplateObject([":@@p2p-config.new-contact-label:Save to contacts"], [":@@p2p-config.new-contact-label:Save to contacts"]))),
                },
                hooks: {
                    onInit: intrabankCheckboxOnInitHook,
                },
            },
        ],
    };
    var remittanceInfo$1 = {
        name: exports.PaymentBaseFields.remittanceInfo,
        fields: [
            {
                type: exports.PaymentComponents.header,
                name: exports.PaymentComponents.header,
                options: {
                    cssClasses: ['col-12', 'pb-0', 'pt-2', 'bb-fieldset__heading'],
                    heading: $localize(templateObject_11$1 || (templateObject_11$1 = __makeTemplateObject([":@@p2p-config.remittance-info-heading:Payment details"], [":@@p2p-config.remittance-info-heading:Payment details"]))),
                    headingType: 'h2',
                    headingClasses: ['mb-0'],
                    separatorLine: true,
                },
            },
            {
                type: exports.PaymentComponents.compactAmount,
                name: exports.RemittanceInfoFields.amountCurrencyGroup,
                options: {
                    label: $localize(templateObject_12$1 || (templateObject_12$1 = __makeTemplateObject([":@@p2p-config.amount-label:Amount"], [":@@p2p-config.amount-label:Amount"]))),
                    cssClasses: [
                        'bb-amount-input__field--large',
                        'bb-block',
                        'bb-block--lg',
                        'col-md-6',
                    ],
                    currency: 'USD',
                    autoDecimal: true,
                    keepValueOnHidden: true,
                    validationMessages: [
                        {
                            name: 'invalidAmount',
                            message: $localize(templateObject_13$1 || (templateObject_13$1 = __makeTemplateObject([":@@p2p-config.invalid-amount-message:Please add amount of this transfer"], [":@@p2p-config.invalid-amount-message:Please add amount of this transfer"]))),
                        },
                        {
                            name: exports.P2PLimitErrorKeys.minLimit,
                            message: $localize(templateObject_14$1 || (templateObject_14$1 = __makeTemplateObject([":@@p2p-config.amount-limit-min:The amount can't be lower than #amount#. Please enter a higher amount."], [":@@p2p-config.amount-limit-min:The amount can't be lower than #amount#. Please enter a higher amount."]))),
                        },
                        {
                            name: exports.P2PLimitErrorKeys.maxLimit,
                            message: $localize(templateObject_15$1 || (templateObject_15$1 = __makeTemplateObject([":@@p2p-config.amount-limit-max:The amount can't exceed #amount#. Please enter a lower amount."], [":@@p2p-config.amount-limit-max:The amount can't exceed #amount#. Please enter a lower amount."]))),
                        },
                    ],
                },
            },
            {
                type: exports.PaymentComponents.textarea,
                name: exports.RemittanceInfoFields.description,
                options: {
                    label: $localize(templateObject_16$1 || (templateObject_16$1 = __makeTemplateObject([":@@p2p-config.add-memo-label:Add memo"], [":@@p2p-config.add-memo-label:Add memo"]))),
                    placeholder: $localize(templateObject_17$1 || (templateObject_17$1 = __makeTemplateObject([":@@p2p-config.add-memo-placeholder:Enter memo"], [":@@p2p-config.add-memo-placeholder:Enter memo"]))),
                    showCharCounter: true,
                    minLength: 0,
                    rows: 2,
                    maxLength: 140,
                    helperText: $localize(templateObject_18$1 || (templateObject_18$1 = __makeTemplateObject([":@@p2p-config.add-memo-helper-text: (Optional)"], [":@@p2p-config.add-memo-helper-text: (Optional)"]))),
                    cssClasses: ['col-md-6', 'bb-block', 'bb-block--lg'],
                },
            },
        ],
    };
    var schedule = {
        name: exports.PaymentBaseFields.schedule,
        fields: [
            {
                type: exports.PaymentComponents.scheduleHeader,
                name: exports.PaymentComponents.scheduleHeader,
                options: {
                    cssClasses: ['pb-0', 'bb-schedule-header__relative-text'],
                    label: $localize(templateObject_19$1 || (templateObject_19$1 = __makeTemplateObject([":@@p2p-config.schedule-label:Schedule"], [":@@p2p-config.schedule-label:Schedule"]))),
                },
            },
            {
                type: exports.PaymentComponents.alert,
                name: exports.PaymentComponents.alert,
                hidden: true,
                options: {
                    cssClasses: ['col-md-12'],
                    alerts: {
                        undue: {
                            title: $localize(templateObject_20$1 || (templateObject_20$1 = __makeTemplateObject([":@@p2p-config.undue-alert-label:A payment executed after the due date will incur a  late fee."], [":@@p2p-config.undue-alert-label:A payment executed after the due date will incur a  late fee."]))),
                            description: $localize(templateObject_21$1 || (templateObject_21$1 = __makeTemplateObject([":@@p2p-config.undue-alert-description:The due date is @@date. A payment made before may improve your credit score."], [":@@p2p-config.undue-alert-description:The due date is @@date. A payment made before may improve your credit score."]))),
                            modifier: 'info',
                        },
                        overdue: {
                            title: $localize(templateObject_22$1 || (templateObject_22$1 = __makeTemplateObject([":@@p2p-config.overdue-alert-label:The due date has passed. This payment will incur a late fee."], [":@@p2p-config.overdue-alert-label:The due date has passed. This payment will incur a late fee."]))),
                            description: $localize(templateObject_23$1 || (templateObject_23$1 = __makeTemplateObject([":@@p2p-config.overdue-alert-description:The due date was @@date. Late payments will decrease your credit score."], [":@@p2p-config.overdue-alert-description:The due date was @@date. Late payments will decrease your credit score."]))),
                            modifier: 'warning',
                        },
                    },
                },
                hooks: {
                    onInit: internalTransferScheduleAlertOnInitHook,
                },
            },
            {
                type: exports.PaymentComponents.date,
                name: exports.ScheduleFields.startDate,
                options: {
                    label: $localize(templateObject_24 || (templateObject_24 = __makeTemplateObject([":@@p2p-config.transfer-date-label:Transfer date"], [":@@p2p-config.transfer-date-label:Transfer date"]))),
                    cssClasses: ['d-block', 'col-md-6', 'align-top'],
                    validators: [i1$1.Validators.required, pastDateValidator],
                    defaultValue: new Date().toISOString(),
                    validationMessages: [
                        {
                            name: 'pastDate',
                            message: $localize(templateObject_25 || (templateObject_25 = __makeTemplateObject([":@@p2p-config.past-date-error-message:Start date cannot be in the past"], [":@@p2p-config.past-date-error-message:Start date cannot be in the past"]))),
                        },
                    ],
                    description: $localize(templateObject_26 || (templateObject_26 = __makeTemplateObject([":@@p2p-config.transfer-date-description:You selected a date after the due date, this transfer will incur a late fee"], [":@@p2p-config.transfer-date-description:You selected a date after the due date, this transfer will incur a late fee"]))),
                },
                hooks: {
                    onInit: internalTransScheduleStartDateOnInitHook,
                    onDestroy: scheduleStartDateOnDestroyHook,
                },
            },
            {
                type: exports.PaymentComponents.select,
                name: exports.ScheduleFields.frequency,
                options: {
                    label: $localize(templateObject_27 || (templateObject_27 = __makeTemplateObject([":@@p2p-config.frequency-label:Frequency"], [":@@p2p-config.frequency-label:Frequency"]))),
                    validators: [i1$1.Validators.required],
                    options: [
                        {
                            label: $localize(templateObject_28 || (templateObject_28 = __makeTemplateObject([":@@p2p-config.once-frequency-label:Once"], [":@@p2p-config.once-frequency-label:Once"]))),
                            value: exports.Frequencies.ONCE,
                        },
                        {
                            label: $localize(templateObject_29 || (templateObject_29 = __makeTemplateObject([":@@p2p-config.weekly-frequency-label:Weekly"], [":@@p2p-config.weekly-frequency-label:Weekly"]))),
                            value: exports.Frequencies.WEEKLY,
                        },
                        {
                            label: $localize(templateObject_30 || (templateObject_30 = __makeTemplateObject([":@@p2p-config.biweekly-frequency-label:Biweekly"], [":@@p2p-config.biweekly-frequency-label:Biweekly"]))),
                            value: exports.Frequencies.BIWEEKLY,
                        },
                        {
                            label: $localize(templateObject_31 || (templateObject_31 = __makeTemplateObject([":@@p2p-config.monthly-frequency-label:Monthly"], [":@@p2p-config.monthly-frequency-label:Monthly"]))),
                            value: exports.Frequencies.MONTHLY,
                        },
                        {
                            label: $localize(templateObject_32 || (templateObject_32 = __makeTemplateObject([":@@p2p-config.quarterly-frequency-label:Quarterly"], [":@@p2p-config.quarterly-frequency-label:Quarterly"]))),
                            value: exports.Frequencies.QUARTERLY,
                        },
                        {
                            label: $localize(templateObject_33 || (templateObject_33 = __makeTemplateObject([":@@p2p-config.annually-frequency-label:Annually"], [":@@p2p-config.annually-frequency-label:Annually"]))),
                            value: exports.Frequencies.YEARLY,
                        },
                    ],
                    defaultValue: exports.Frequencies.ONCE,
                    cssClasses: ['d-block', 'col-md-6', 'align-top'],
                    dependants: [exports.ScheduleFields.endType],
                    activateDependantsOn: scheduleFrequencyToggleDependants,
                },
            },
            {
                type: exports.PaymentComponents.radio,
                name: exports.ScheduleFields.endType,
                options: {
                    label: $localize(templateObject_34 || (templateObject_34 = __makeTemplateObject([":@@p2p-config.end-type-label:End"], [":@@p2p-config.end-type-label:End"]))),
                    preselect: true,
                    isConditionalMandatory: true,
                    cssClasses: ['d-inline-block', 'col-md-2', 'align-top'],
                    defaultValue: exports.ScheduleEndType.NEVER,
                    options: [
                        {
                            label: $localize(templateObject_35 || (templateObject_35 = __makeTemplateObject([":@@p2p-config.never-end-type-label:Never"], [":@@p2p-config.never-end-type-label:Never"]))),
                            value: exports.ScheduleEndType.NEVER,
                        },
                        {
                            label: $localize(templateObject_36 || (templateObject_36 = __makeTemplateObject([":@@p2p-config.after-end-type-label:After"], [":@@p2p-config.after-end-type-label:After"]))),
                            value: exports.ScheduleEndType.AFTER,
                        },
                    ],
                    dependants: [exports.ScheduleFields.endDate, exports.ScheduleFields.repeat],
                    activateDependantsOn: scheduleEndTypeToggleDependants,
                },
            },
            {
                type: exports.PaymentComponents.date,
                name: exports.ScheduleFields.endDate,
                options: {
                    cssClasses: [
                        'd-inline-block',
                        'col-md-10',
                        'align-top',
                        'bb-schedule__end-date',
                    ],
                    validators: [endDateAfterStartDateValidator],
                    validationMessages: [
                        {
                            name: 'required',
                            message: $localize(templateObject_37 || (templateObject_37 = __makeTemplateObject([":@@p2p-config.end-date-required-message:End date is required"], [":@@p2p-config.end-date-required-message:End date is required"]))),
                        },
                        {
                            name: 'lessThanStartDate',
                            message: $localize(templateObject_38 || (templateObject_38 = __makeTemplateObject([":@@p2p-config.end-date-less-start-date-message:End date cannot be before start date"], [":@@p2p-config.end-date-less-start-date-message:End date cannot be before start date"]))),
                        },
                    ],
                    isConditionalMandatory: true,
                },
                hooks: {
                    onInit: scheduleEndDateOnInitHook,
                },
            },
            {
                type: exports.PaymentComponents.number,
                name: exports.ScheduleFields.repeat,
                options: {
                    isConditionalMandatory: true,
                    description: $localize(templateObject_39 || (templateObject_39 = __makeTemplateObject([":@@p2p-config.ocurrences-description:occurrences"], [":@@p2p-config.ocurrences-description:occurrences"]))),
                    min: 2,
                    max: 200,
                    defaultValue: 2,
                    validators: [minValueTwoValidator, maxValueTwoHundredValidator],
                    validationMessages: [
                        {
                            name: 'required',
                            message: $localize(templateObject_40 || (templateObject_40 = __makeTemplateObject([":@@p2p-config.ocurrences-required-message:Value is required"], [":@@p2p-config.ocurrences-required-message:Value is required"]))),
                        },
                        {
                            name: 'min',
                            message: $localize(templateObject_41 || (templateObject_41 = __makeTemplateObject([":@@p2p-config.min-ocurrences-message:Value is below the minimum allowed occurrences (2)"], [":@@p2p-config.min-ocurrences-message:Value is below the minimum allowed occurrences (2)"]))),
                        },
                        {
                            name: 'max',
                            message: $localize(templateObject_42 || (templateObject_42 = __makeTemplateObject([":@@p2p-config.max-ocurrences-message:Value exceeds maximum allowed occurances (200)"], [":@@p2p-config.max-ocurrences-message:Value exceeds maximum allowed occurances (200)"]))),
                        },
                    ],
                    cssClasses: [
                        'd-inline-block',
                        'col-md-9',
                        'align-top',
                        'px-0',
                        'bb-schedule__repeat',
                        'bb-schedule__repeat--two-option',
                    ],
                },
            },
        ],
    };
    var P2P_TRANSFER = {
        fields: [initiator$2, counterParty, remittanceInfo$1, schedule],
        name: $localize(templateObject_43 || (templateObject_43 = __makeTemplateObject([":@@p2p-config.name:P2P Transfer"], [":@@p2p-config.name:P2P Transfer"]))),
        paymentType: 'P2P_TRANSFER',
        businessFunction: 'P2P Transfer',
        hooks: {
            onDestroy: internalTransferOnDestroyHook,
        },
    };
    var templateObject_1$4, templateObject_2$3, templateObject_3$3, templateObject_4$3, templateObject_5$2, templateObject_6$2, templateObject_7$1, templateObject_8$1, templateObject_9$1, templateObject_10$1, templateObject_11$1, templateObject_12$1, templateObject_13$1, templateObject_14$1, templateObject_15$1, templateObject_16$1, templateObject_17$1, templateObject_18$1, templateObject_19$1, templateObject_20$1, templateObject_21$1, templateObject_22$1, templateObject_23$1, templateObject_24, templateObject_25, templateObject_26, templateObject_27, templateObject_28, templateObject_29, templateObject_30, templateObject_31, templateObject_32, templateObject_33, templateObject_34, templateObject_35, templateObject_36, templateObject_37, templateObject_38, templateObject_39, templateObject_40, templateObject_41, templateObject_42, templateObject_43;

    var initiator$1 = {
        name: exports.PaymentBaseFields.initiator,
        title: $localize(templateObject_1$3 || (templateObject_1$3 = __makeTemplateObject([":@@ach-debit-config.initiator-label:Transfer to"], [":@@ach-debit-config.initiator-label:Transfer to"]))),
        fields: [
            {
                type: exports.PaymentComponents.accountSelector,
                name: exports.InitiatorFields.initiatorAccountGroup,
                options: {
                    placeholder: 'Select an account',
                    cssClasses: ['col-12', 'mb-0'],
                    validationMessages: [
                        {
                            message: $localize(templateObject_2$2 || (templateObject_2$2 = __makeTemplateObject([":@@ach-debit-config.account-missing-error-message:Account is invalid"], [":@@ach-debit-config.account-missing-error-message:Account is invalid"]))),
                            name: 'missingInList',
                        },
                        {
                            message: $localize(templateObject_3$2 || (templateObject_3$2 = __makeTemplateObject([":@@ach-debit-config.required-message:Please select an account"], [":@@ach-debit-config.required-message:Please select an account"]))),
                            name: 'required',
                        },
                        {
                            message: $localize(templateObject_4$2 || (templateObject_4$2 = __makeTemplateObject([":@@ach-debit-config.closed-permission-error-message:You can not do payments to new beneficiary from this account."], [":@@ach-debit-config.closed-permission-error-message:You can not do payments to new beneficiary from this account."]))),
                            name: 'hasOnlyClosedPaymentPermission',
                        },
                    ],
                },
            },
        ],
    };
    var counterparty = {
        name: exports.PaymentBaseFields.counterparty,
        fields: [
            {
                name: exports.PaymentComponents.beneficiaryGroupHeader,
                type: exports.PaymentComponents.beneficiaryGroupHeader,
                options: {
                    label: $localize(templateObject_5$1 || (templateObject_5$1 = __makeTemplateObject([":@@ach-debit-config.beneficiary.header-label:Collect from"], [":@@ach-debit-config.beneficiary.header-label:Collect from"]))),
                    hasDynamicTitle: true,
                },
            },
            {
                name: exports.CounterPartyFields.name,
                type: exports.PaymentComponents.beneficiarySelector,
                options: {
                    placeholder: $localize(templateObject_6$1 || (templateObject_6$1 = __makeTemplateObject([":@@ach-debit-config.beneficiary-selector-placeholder:Select a client"], [":@@ach-debit-config.beneficiary-selector-placeholder:Select a client"]))),
                    cssClasses: ['col-12', 'mb-0'],
                    saveNewContactLabel: 'Save as a new contact',
                    validationMessages: [
                        {
                            message: $localize(templateObject_7 || (templateObject_7 = __makeTemplateObject([":@@ach-debit-config.new-contact-label:Beneficiary is same as selected Debit account"], [":@@ach-debit-config.new-contact-label:Beneficiary is same as selected Debit account"]))),
                            name: 'sameDebitCreditAccountsSelected',
                        },
                    ],
                    dependants: [
                        exports.CounterPartyFields.creditorBank,
                        exports.CounterPartyFields.accountNumber,
                        exports.CounterPartyFields.postalAddress,
                        exports.CounterPartyFields.bankBranchCode,
                    ],
                    tabs: [exports.BeneficiaryList.CONTACTS],
                },
            },
            {
                name: exports.CounterPartyFields.accountNumber,
                type: exports.PaymentComponents.text,
                options: {
                    validators: [i1$1.Validators.required],
                    label: $localize(templateObject_8 || (templateObject_8 = __makeTemplateObject([":@@ach-debit-config.beneficiary.account-number-label:Account number"], [":@@ach-debit-config.beneficiary.account-number-label:Account number"]))),
                    maxLength: 36,
                    cssClasses: ['d-inline-block', 'col-md-6', 'align-top', 'pr-md-3'],
                },
            },
            {
                name: exports.CounterPartyFields.creditorBank,
                fields: [
                    {
                        name: exports.CounterPartyFields.bankBranchCode,
                        type: exports.PaymentComponents.text,
                        options: {
                            validators: [i1$1.Validators.required, routingTransitNumberValidator],
                            label: $localize(templateObject_9 || (templateObject_9 = __makeTemplateObject([":@@ach-debit-config.bank-code-label:Routing transit number (ABA)"], [":@@ach-debit-config.bank-code-label:Routing transit number (ABA)"]))),
                            maxLength: 20,
                            mapToField: exports.PaymentBaseFields.counterparty + "." + exports.CounterPartyFields.creditorBank,
                            cssClasses: ['d-inline-block', 'col-md-6', 'align-top', 'pr-md-3'],
                        },
                    },
                ],
            },
            {
                name: exports.CounterPartyFields.postalAddress,
                type: exports.PaymentComponents.address,
                options: {
                    addressType: 'client',
                    cssClasses: ['col-12'],
                    states: US_States,
                    countries: [
                        {
                            label: 'United States',
                            value: 'US',
                        },
                    ],
                },
            },
            {
                name: exports.CounterPartyFields.creditorBank,
                fields: [
                    {
                        name: exports.CounterPartyFields.bankName,
                        type: exports.PaymentComponents.text,
                        options: {
                            label: $localize(templateObject_10 || (templateObject_10 = __makeTemplateObject([":@@ach-debit-config.creditor-bank-name-label:Bank name"], [":@@ach-debit-config.creditor-bank-name-label:Bank name"]))),
                            helperText: $localize(templateObject_11 || (templateObject_11 = __makeTemplateObject([":@@ach-debit-config.bank-name-helper-text: (optional)"], [":@@ach-debit-config.bank-name-helper-text: (optional)"]))),
                            maxLength: 140,
                            cssClasses: ['d-inline-block', 'col-md-6', 'align-top', 'pr-md-3'],
                        },
                    },
                    {
                        name: exports.CounterPartyFields.postalAddress,
                        type: exports.PaymentComponents.address,
                        options: {
                            addressType: 'client bank',
                            cssClasses: ['col-12'],
                            states: US_States,
                            countries: [
                                {
                                    label: 'United States',
                                    value: 'US',
                                },
                            ],
                        },
                    },
                ],
            },
        ],
    };
    var remittanceInfo = {
        name: exports.PaymentBaseFields.remittanceInfo,
        fields: [
            {
                type: exports.PaymentComponents.amount,
                name: exports.RemittanceInfoFields.amountCurrencyGroup,
                options: {
                    label: $localize(templateObject_12 || (templateObject_12 = __makeTemplateObject([":@@ach-debit-config.amount-label:Amount"], [":@@ach-debit-config.amount-label:Amount"]))),
                    cssClasses: ['col-md-8', 'large-label', 'mt-4'],
                    currencies: ['USD'],
                    validationMessages: [
                        {
                            message: $localize(templateObject_13 || (templateObject_13 = __makeTemplateObject([":@@ach-debit-config.invalid-amount-message:Enter amount"], [":@@ach-debit-config.invalid-amount-message:Enter amount"]))),
                            name: 'invalidAmount',
                        },
                    ],
                },
            },
        ],
    };
    var additionalMessage = {
        name: 'additionalMessage',
        fields: [
            {
                name: exports.CounterPartyFields.mandateIdentifier,
                type: exports.PaymentComponents.text,
                options: {
                    label: $localize(templateObject_14 || (templateObject_14 = __makeTemplateObject([":@@ach-debit-config.mandate-identifier-label:Mandate identifier"], [":@@ach-debit-config.mandate-identifier-label:Mandate identifier"]))),
                    placeholder: $localize(templateObject_15 || (templateObject_15 = __makeTemplateObject([":@@ach-debit-config.mandate-identifier-placeholder:Enter mandate identifier"], [":@@ach-debit-config.mandate-identifier-placeholder:Enter mandate identifier"]))),
                    helperText: $localize(templateObject_16 || (templateObject_16 = __makeTemplateObject([":@@ach-debit-config.mandate-identifier-helper-text: (optional)"], [":@@ach-debit-config.mandate-identifier-helper-text: (optional)"]))),
                    minLength: 0,
                    maxLength: 35,
                    cssClasses: ['d-block', 'col-md-8'],
                    mapToField: exports.PaymentBaseFields.counterparty,
                },
            },
            {
                name: exports.CounterPartyFields.remittanceInformation,
                type: exports.PaymentComponents.textarea,
                options: {
                    label: $localize(templateObject_17 || (templateObject_17 = __makeTemplateObject([":@@ach-debit-config.remittance-info-label:Message to client"], [":@@ach-debit-config.remittance-info-label:Message to client"]))),
                    helperText: $localize(templateObject_18 || (templateObject_18 = __makeTemplateObject([":@@ach-debit-config.remittance-info-helper-text: (optional)"], [":@@ach-debit-config.remittance-info-helper-text: (optional)"]))),
                    showCharCounter: true,
                    collapseOptions: {
                        label: $localize(templateObject_19 || (templateObject_19 = __makeTemplateObject([":@@ach-debit-config.collapsed.remittance-info-label:Add message to client"], [":@@ach-debit-config.collapsed.remittance-info-label:Add message to client"]))),
                    },
                    minLength: 0,
                    rows: 3,
                    maxLength: 140,
                    cols: 50,
                    cssClasses: ['d-block', 'col-md-8'],
                    mapToField: exports.PaymentBaseFields.counterparty,
                },
            },
            {
                name: exports.CounterPartyFields.messageToBank,
                type: exports.PaymentComponents.textarea,
                options: {
                    label: $localize(templateObject_20 || (templateObject_20 = __makeTemplateObject([":@@ach-debit-config.message-to-bank-label:Message to client bank"], [":@@ach-debit-config.message-to-bank-label:Message to client bank"]))),
                    helperText: $localize(templateObject_21 || (templateObject_21 = __makeTemplateObject([":@@ach-debit-config.message-to-bank-helper-text: (optional)"], [":@@ach-debit-config.message-to-bank-helper-text: (optional)"]))),
                    showCharCounter: true,
                    collapseOptions: {
                        label: $localize(templateObject_22 || (templateObject_22 = __makeTemplateObject([":@@ach-debit-config.message-to-bank-collapsed-label:Add message to client bank"], [":@@ach-debit-config.message-to-bank-collapsed-label:Add message to client bank"]))),
                    },
                    maxLength: 140,
                    cssClasses: ['d-block', 'col-md-8'],
                    mapToField: exports.PaymentBaseFields.counterparty,
                },
            },
        ],
    };
    var isDebitPayment = {
        name: exports.HiddenFields.isDebitPayment,
        type: exports.PaymentComponents.checkbox,
        options: {
            cssClasses: ['d-none'],
            defaultValue: true,
        },
    };
    var ACH_DEBIT = {
        fields: [
            initiator$1,
            remittanceInfo,
            counterparty,
            additionalMessage,
            defaultScheduleConfig,
            isDebitPayment,
        ],
        name: $localize(templateObject_23 || (templateObject_23 = __makeTemplateObject([":@@ach-debit-config.name:ACH Debit"], [":@@ach-debit-config.name:ACH Debit"]))),
        businessFunction: 'ACH Debit',
        paymentType: 'ACH_DEBIT',
    };
    var templateObject_1$3, templateObject_2$2, templateObject_3$2, templateObject_4$2, templateObject_5$1, templateObject_6$1, templateObject_7, templateObject_8, templateObject_9, templateObject_10, templateObject_11, templateObject_12, templateObject_13, templateObject_14, templateObject_15, templateObject_16, templateObject_17, templateObject_18, templateObject_19, templateObject_20, templateObject_21, templateObject_22, templateObject_23;

    var batchInfo = {
        name: 'batchInfo',
        title: 'Internal transfers',
        subTitle: 'Add the main batch information',
        fields: [
            {
                type: exports.PaymentComponents.text,
                name: 'name',
                options: {
                    validators: [i1$1.Validators.required, noWhitespaceValidator],
                    validationMessages: [
                        { message: 'Batch name is required', name: 'required' },
                    ],
                    label: 'Batch name',
                    showCharCounter: true,
                    maxLength: 25,
                    cssClasses: ['w-50'],
                },
            },
            {
                type: exports.PaymentComponents.date,
                name: 'requestedExecutionDate',
                options: {
                    validators: [pastDateValidator, i1$1.Validators.required],
                    validationMessages: [
                        { message: 'Execution date cannot be in past', name: 'pastDate' },
                    ],
                    label: 'Execution date',
                    cssClasses: ['w-50'],
                },
            },
        ],
        stepName: 'batchInfo',
    };
    var creditDebitSelection = {
        name: 'creditDebitSelection',
        fields: [
            {
                type: exports.PaymentComponents.creditDebitSelector,
                name: 'creditDebitIndicator',
                options: {
                    label: 'Internal transfers',
                    choices: [
                        {
                            type: 'CREDIT',
                            name: 'Send',
                            description: 'Send funds to multiple own accounts',
                        },
                        // { type: 'DEBIT', name: 'Receive', description: 'Receive funds from multiple own accounts' },
                    ],
                },
            },
        ],
        stepName: 'transferDetails',
    };
    var initiator = {
        name: exports.PaymentBaseFields.initiator,
        cssClasses: ['bb-block', 'bb-block--xl'],
        fields: [
            {
                type: exports.PaymentComponents.multiPaymentAccountSelector,
                name: exports.InitiatorFields.initiatorAccountGroup,
                options: {
                    label: 'From',
                    placeholder: 'Select an account',
                    validators: [i1$1.Validators.required],
                    validationMessages: [
                        { message: 'Account is required', name: 'required' },
                    ],
                    arrangements: {
                        privilege: 'create',
                        ignoredProductKindNames: [
                            exports.ProductKinds.creditCard,
                            exports.ProductKinds.debitCard,
                        ],
                    },
                    cssClasses: ['w-75'],
                    filterItems: false,
                    required: true,
                    showBankBranchCode: true,
                },
            },
        ],
        stepName: 'transferDetails',
        separator: {
            icon: { name: 'arrow-downward', color: 'dark' },
        },
    };
    var verifyOnBlur = function (form) { };
    var payments = {
        name: exports.PaymentBaseFields.counterparty,
        cssClasses: ['bb-block', 'bb-block--xl'],
        fields: [
            {
                type: exports.PaymentComponents.multiPaymentCard,
                name: exports.InitiatorFields.initiatorAccountGroup,
                options: {
                    label: 'To',
                    helperText: 'You can add up to %s transfers',
                    validators: [minimumOneAccount],
                    maximumNumberOfPayments: 100,
                    validationMessages: [
                        { message: 'Minimum one transfer is required', name: 'empty' },
                    ],
                    arrangements: {
                        privilege: 'view',
                        ignoredProductKindNames: [
                            exports.ProductKinds.creditCard,
                            exports.ProductKinds.debitCard,
                            exports.ProductKinds.loanAccount,
                        ],
                    },
                    fieldsConfig: {
                        counterpartyName: {
                            header: 'Own account',
                            validators: [
                                i1$1.Validators.required,
                                accountsValidation(exports.PaymentBaseFields.initiator),
                            ],
                            placeholder: 'Enter or select account',
                            dropdownIcon: '',
                            ariaLabel: '',
                            validationMessages: [
                                { message: 'Account is required', name: 'required' },
                                { message: 'Account is same as from', name: 'sameAccount' },
                            ],
                        },
                        amount: {
                            validators: [
                                i1$1.Validators.required,
                                amountGreaterThanZero,
                            ],
                            placeholder: '0.00',
                            ariaLabel: '',
                            currency: 'USD',
                            maxLength: 10,
                            validationMessages: [
                                { message: 'Amount is required', name: 'required' },
                                { message: 'Amount is required', name: 'invalidAmount' },
                            ],
                        },
                        description: {
                            validators: [],
                            placeholder: 'Enter Description',
                            label: 'Add Description',
                            helperText: 'Optional',
                            title: 'Description',
                        },
                    },
                    hooks: {
                        onBlur: verifyOnBlur,
                    },
                },
            },
        ],
        stepName: 'transferDetails',
    };
    /**
     * @deprecated Use `INTRACOMPANY_PAYMENT_CREDIT_USA` from `@backbase/batch-common-ang`.
     * Will be removed in widget collection v.3.11.0
     */
    var BATCH_INTERNAL_TRANSFERS = {
        fields: [batchInfo, creditDebitSelection, initiator, payments],
        name: 'Internal transfers',
        description: 'Send funds to multiple own accounts',
        paymentType: 'INTRACOMPANY_PAYMENT_CREDIT_USA',
        resourceName: 'Batch',
        businessFunction: 'Batch - Intracompany Payments',
        customFields: {},
        options: {},
    };
    var STEPPER_CONFIG = [
        {
            stepName: 'batchInfo',
            stepDisplayValue: 'Batch info',
            cssClasses: ['card', 'card-body'],
            isActive: true,
            isChecked: false,
            buttonClass: [],
            buttonConfig: [
                {
                    type: 'primary',
                    text: 'Next: Transfer details',
                    action: exports.StepperAction.NEXT,
                    hooks: {
                        onClick: onClickEvent,
                    },
                },
            ],
        },
        {
            stepName: 'transferDetails',
            stepDisplayValue: 'Transfer details',
            isActive: false,
            isChecked: false,
            cssClasses: ['pb-5', 'mb-5'],
            buttonClass: ['py-4', 'fixed-bottom', 'bb-button-bar--sticky', 'px-sm-3'],
            footerDetail: { totalAmount: true, totalCount: true },
            buttonConfig: [
                {
                    type: 'secondary',
                    text: 'Back',
                    action: exports.StepperAction.BACK,
                },
                {
                    type: 'primary',
                    text: 'Next: Review',
                    action: exports.StepperAction.NEXT,
                },
            ],
        },
        {
            stepName: 'review',
            stepDisplayValue: 'Review',
            cssClasses: ['card', 'card-body', 'bb-block', 'bb-block--lg'],
            isActive: false,
            isChecked: false,
            buttonClass: [],
            buttonConfig: [
                {
                    type: 'secondary',
                    text: 'Edit',
                    action: exports.StepperAction.BACK,
                },
                {
                    type: 'primary',
                    text: 'Submit',
                    action: exports.StepperAction.SUBMIT,
                },
            ],
        },
    ];
    function onClickEvent(_a) {
        var doneFn = _a.doneFn, stepperConfig = _a.stepperConfig, action = _a.action;
        if (doneFn) {
            doneFn(stepperConfig, action);
        }
    }
    /**
     * @deprecated Use `MANUAL_BATCH` from `@backbase/batch-common-ang`.
     * Will be removed in widget collection v.3.11.0
     */
    var MULTIPLE_PAYMENT = {
        availableTypes: [BATCH_INTERNAL_TRANSFERS],
        enableTypeSelection: ['batchInfo'],
        steps: STEPPER_CONFIG,
        options: {
            successEventName: 'bb.event.batch.create.success',
            createTemplates: true,
        },
    };

    exports.ViewType = void 0;
    (function (ViewType) {
        ViewType["CARD"] = "CARD";
        ViewType["FORM"] = "FORM";
        ViewType["BUTTON"] = "BUTTON";
    })(exports.ViewType || (exports.ViewType = {}));
    var BreachLimitError = /** @class */ (function () {
        function BreachLimitError(reportError) {
            this.reportError = reportError;
            this.kind = exports.BatchOrderError.BREACH_LIMIT;
        }
        return BreachLimitError;
    }());
    exports.PaymentTemplateAction = void 0;
    (function (PaymentTemplateAction) {
        PaymentTemplateAction["CREATE"] = "CREATE";
        PaymentTemplateAction["VIEW"] = "VIEW";
    })(exports.PaymentTemplateAction || (exports.PaymentTemplateAction = {}));
    /** @deprecated Use `CreditDebitMixedIndicator` from `@backbase/data-ang/payment-batch` instead */
    exports.CreditDebitMixedIndicator = void 0;
    (function (CreditDebitMixedIndicator) {
        CreditDebitMixedIndicator["CREDIT"] = "CREDIT";
        CreditDebitMixedIndicator["DEBIT"] = "DEBIT";
        CreditDebitMixedIndicator["MIXED"] = "MIXED";
    })(exports.CreditDebitMixedIndicator || (exports.CreditDebitMixedIndicator = {}));
    var RoutableModalParamName = 'modalOpened';

    var getConfig = function (configName, parent) {
        var fields = [];
        if (!configName) {
            return;
        }
        if (Array.isArray(parent)) {
            fields = __spreadArray([], __read(parent));
        }
        else if ((parent === null || parent === void 0 ? void 0 : parent.name) === configName) {
            return parent;
        }
        else {
            fields = parent ? __spreadArray([], __read(parent.fields)) : [];
        }
        var config;
        while (fields.length) {
            config = fields.shift();
            if (config) {
                if (config.name === configName) {
                    return config;
                }
                else if (config.fields) {
                    fields.push.apply(fields, __spreadArray([], __read(config.fields)));
                }
            }
        }
        return;
    };
    var isFormGroupConfig = function (config) { return Array.isArray(config.fields); };
    var isAdditionsGroup = function (group) { return group.name === exports.PaymentBaseFields.additions ||
        group.name === exports.CounterPartyFields.counterpartyAccountAdditions; };
    function getLabelFromPaymentConfig(name, paymentConfig, parentName) {
        if (parentName === void 0) { parentName = ''; }
        var parentConfig = parentName
            ? getConfig(parentName, paymentConfig)
            : paymentConfig;
        var config = getConfig(name, parentConfig);
        var label = '';
        if (config) {
            if (isFormGroupConfig(config)) {
                label = config.title || '';
            }
            else if (config.options) {
                label = config.options.label || '';
            }
        }
        return label;
    }
    var cloneFormFieldOptions = function (options) {
        if (options === void 0) { options = {}; }
        var newOptions = Object.assign({}, options);
        for (var key in newOptions) {
            if (Array.isArray(newOptions[key])) {
                newOptions[key] = __spreadArray([], __read(newOptions[key]));
            }
            else if (typeof newOptions[key] === 'object') {
                newOptions[key] = Object.assign({}, newOptions[key]);
            }
        }
        return newOptions;
    };
    var clonePaymentFormItem = function (formItemConfig) {
        var _a, _b;
        var configItem = Object.assign({}, formItemConfig);
        if ((_b = (_a = formItemConfig) === null || _a === void 0 ? void 0 : _a.fields) === null || _b === void 0 ? void 0 : _b.length) {
            configItem.fields = formItemConfig.fields.map(clonePaymentFormItem);
        }
        else {
            configItem.options = cloneFormFieldOptions(formItemConfig.options);
        }
        return configItem;
    };
    var clonePaymentConfig = function (config) { return (Object.assign(Object.assign({}, config), { fields: config.fields.map(clonePaymentFormItem) })); };
    function setFrequencyOptionsPerConfig(config, isRecurring, scheduleConfigOptions) {
        if (isRecurring === void 0) { isRecurring = false; }
        var _a;
        var clonedConfig = clonePaymentConfig(config);
        var schedule = getConfig(exports.PaymentBaseFields.schedule, clonedConfig);
        var frequencyFieldOptions = (_a = getConfig(exports.ScheduleFields.frequency, schedule)) === null || _a === void 0 ? void 0 : _a.options;
        if (isRecurring && !scheduleConfigOptions.isRecurrentToOneOffAllowed) {
            frequencyFieldOptions === null || frequencyFieldOptions === void 0 ? void 0 : frequencyFieldOptions.options.shift();
        }
        else if (!isRecurring &&
            !scheduleConfigOptions.isOneOffToRecurrentAllowed) {
            frequencyFieldOptions.options = [frequencyFieldOptions === null || frequencyFieldOptions === void 0 ? void 0 : frequencyFieldOptions.options[0]];
        }
        return Object.assign({}, clonedConfig);
    }
    function removeScheduleFromConfig(config) {
        var clonedConfig = clonePaymentConfig(config);
        return Object.assign(Object.assign({}, clonedConfig), {
            // Schedule is on the top level so we can skip deep nested checks.
            fields: clonedConfig.fields.filter(function (field) { return field.name !== exports.PaymentBaseFields.schedule; })
        });
    }
    var shouldLoadTabContent = function (tab, options) { return !options.tabs || (Array.isArray(options.tabs) && options.tabs.includes(tab)); };
    function getIconByPaymnentType(paymentType) {
        var type = normalizePaymentType(paymentType);
        switch (type) {
            case INTERNAL_TRANSFER.paymentType:
            case INTRABANK_TRANSFER.paymentType:
                return exports.PaymentTypeIcon.INTERNAL;
            case INTERNATIONAL_TRANSFER.paymentType:
            case 'US_FOREIGN_WIRE':
                return exports.PaymentTypeIcon.INTERNATIONAL;
            case SEPA.paymentType:
            case 'SEPA_CT':
            case US_DOMESTIC_WIRE.paymentType:
            case US_ACH_CREDIT.paymentType:
            case CHAPS.paymentType:
            case UK_FASTER_PAYMENT.paymentType:
                return exports.PaymentTypeIcon.DOMESTIC;
        }
        return '';
    }
    function normalizePaymentType(paymentType) {
        var paymentTypeSuffixes = ['_ILE', '_CLOSED'];
        if (paymentType) {
            var normalisedPaymentType_1 = paymentType;
            paymentTypeSuffixes.forEach(function (suffix) {
                if (paymentType.endsWith(suffix)) {
                    normalisedPaymentType_1 = paymentType.replace(suffix, '');
                }
            });
            return normalisedPaymentType_1;
        }
        return;
    }
    function hasCreatePermission(item) {
        var _a;
        var actions = ((_a = item) === null || _a === void 0 ? void 0 : _a.actions) || item;
        return !!(actions === null || actions === void 0 ? void 0 : actions.find(function (action) { return action === exports.PaymentTemplateAction.CREATE; }));
    }
    function canCopyPayment(item) {
        var _a;
        return !!((_a = item === null || item === void 0 ? void 0 : item.permissibleActions) === null || _a === void 0 ? void 0 : _a.create);
    }
    function isModified(currentValue, expectedValue) {
        if (currentValue === void 0) { currentValue = ''; }
        if (expectedValue === void 0) { expectedValue = ''; }
        if (!currentValue) {
            return false;
        }
        return currentValue !== expectedValue;
    }
    function getBeneficairyDetails(beneficiary) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
        return {
            bankBranchCode: ((_c = (_b = (_a = beneficiary) === null || _a === void 0 ? void 0 : _a.accounts) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.bankCode) ||
                ((_d = beneficiary) === null || _d === void 0 ? void 0 : _d.bankBranchCode),
            accountNumber: ((_g = (_f = (_e = beneficiary) === null || _e === void 0 ? void 0 : _e.accounts) === null || _f === void 0 ? void 0 : _f[0]) === null || _g === void 0 ? void 0 : _g.accountNumber) ||
                ((_h = beneficiary) === null || _h === void 0 ? void 0 : _h.accountNumber),
            name: beneficiary === null || beneficiary === void 0 ? void 0 : beneficiary.name,
            BIC: ((_l = (_k = (_j = beneficiary) === null || _j === void 0 ? void 0 : _j.accounts) === null || _k === void 0 ? void 0 : _k[0]) === null || _l === void 0 ? void 0 : _l.BIC) ||
                ((_m = beneficiary) === null || _m === void 0 ? void 0 : _m.BIC),
        };
    }
    function isSelectedBeneficiaryModified(counterparty, selectedBeneficiary) {
        var _a, _b;
        var beneficiaryDetails = getBeneficairyDetails(selectedBeneficiary);
        return ((isObjectTruthy(beneficiaryDetails) &&
            isModified(counterparty === null || counterparty === void 0 ? void 0 : counterparty.name, beneficiaryDetails.name)) ||
            isModified(stripSpaces(counterparty === null || counterparty === void 0 ? void 0 : counterparty.accountNumber), stripSpaces(beneficiaryDetails.accountNumber)) ||
            isModified((_a = counterparty === null || counterparty === void 0 ? void 0 : counterparty.creditorBank) === null || _a === void 0 ? void 0 : _a.bankBranchCode, beneficiaryDetails.bankBranchCode) ||
            isModified((_b = counterparty === null || counterparty === void 0 ? void 0 : counterparty.creditorBank) === null || _b === void 0 ? void 0 : _b.bic, beneficiaryDetails.BIC));
    }
    var getCounterpartySchemeName = function (paymentItem) {
        var counterparty = paymentItem.counterparty, selectedBeneficiary = paymentItem.selectedBeneficiary;
        var isBeneficiaryModified = isSelectedBeneficiaryModified(counterparty, selectedBeneficiary);
        var creditorScheme = counterparty.schemeName || i1.SchemeNames.BBAN;
        var beneficiarySchemes = [i1.SchemeNames.BBAN, i1.SchemeNames.IBAN];
        var isOwnAccountTransfer = (selectedBeneficiary === null || selectedBeneficiary === void 0 ? void 0 : selectedBeneficiary.isArrangement) &&
            beneficiarySchemes.includes(creditorScheme);
        // Set scheme to ID when payment template has counterparty id
        if (!selectedBeneficiary &&
            counterparty.id &&
            creditorScheme !== i1.SchemeNames.EXTERNALID) {
            creditorScheme = i1.SchemeNames.ID;
        }
        return isOwnAccountTransfer && !isBeneficiaryModified
            ? i1.SchemeNames.ID
            : creditorScheme;
    };

    var DEFAULT_KEY = 'DEFAULT';
    var PaymentConfigService = /** @class */ (function () {
        function PaymentConfigService(configs, registeredPaymentConfigs) {
            var _this = this;
            this.paymentConfigRegistry = new rxjs.BehaviorSubject(new Map(configs
                ? configs.reduce(function (acc, _b) {
                    var paymentType = _b.paymentType, businessFunction = _b.businessFunction;
                    var paymentConfig = Object.assign(paymentType, {
                        businessFunction: businessFunction,
                    });
                    return __spreadArray(__spreadArray([], __read(acc)), [[paymentConfig.paymentType, paymentConfig]]);
                }, [])
                : undefined));
            this.classIdRegistry = new rxjs.BehaviorSubject(new Map(configs
                ? configs.reduce(function (acc, _b) {
                    var classId = _b.classId, paymentType = _b.paymentType;
                    return __spreadArray(__spreadArray([], __read(acc)), [
                        [classId || DEFAULT_KEY, paymentType.paymentType],
                    ]);
                }, [])
                : undefined));
            this.configRegistry = new rxjs.BehaviorSubject(new Map(configs
                ? configs.reduce(function (acc, config) { return __spreadArray(__spreadArray([], __read(acc)), [
                    [config.classId || DEFAULT_KEY, config],
                ]); }, [])
                : undefined));
            if (registeredPaymentConfigs && registeredPaymentConfigs.length) {
                registeredPaymentConfigs
                    .reduce(function (acc, val) { return acc.concat(val); }, [])
                    .forEach(function (config) { return _this.setPaymentConfigByType(config); });
            }
        }
        PaymentConfigService.prototype.has = function (paymentType) {
            return this.paymentConfigRegistry.value.has(paymentType);
        };
        PaymentConfigService.prototype.hasClassId = function (classId) {
            return this.classIdRegistry.value.has(classId);
        };
        PaymentConfigService.prototype.getPaymentConfigByClassId = function (classId) {
            var paymentConfigType = this.getBaseConfigByClassId(classId);
            return paymentConfigType && paymentConfigType.paymentType;
        };
        PaymentConfigService.prototype.getPaymentConfigByType = function (paymentType) {
            return this.paymentConfigRegistry.value.get(paymentType);
        };
        PaymentConfigService.prototype.mapPaymentType = function (item) {
            var _a;
            var paymentType = typeof item === 'string'
                ? item
                : item.details.paymentType;
            var _paymentType = normalizePaymentType(paymentType);
            return _paymentType
                ? (_a = this.getPaymentConfigByType(_paymentType)) === null || _a === void 0 ? void 0 : _a.name
                : undefined;
        };
        PaymentConfigService.prototype.getBaseConfigByClassId = function (classId) {
            return (this.configRegistry.value.get(classId) ||
                this.configRegistry.value.get(DEFAULT_KEY));
        };
        PaymentConfigService.prototype.setPaymentConfigByType = function (config) {
            var _value = this.paymentConfigRegistry.value;
            _value.set(config.paymentType, config);
            this.paymentConfigRegistry.next(_value);
        };
        return PaymentConfigService;
    }());
    /** @nocollapse */ PaymentConfigService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentConfigService, deps: [{ token: BB_PAYMENT_CONFIG, optional: true }, { token: BB_REGISTERED_PAYMENT_CONFIGS, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ PaymentConfigService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentConfigService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentConfigService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () {
            return [{ type: Array, decorators: [{
                            type: i0.Inject,
                            args: [BB_PAYMENT_CONFIG]
                        }, {
                            type: i0.Optional
                        }] }, { type: Array, decorators: [{
                            type: i0.Inject,
                            args: [BB_REGISTERED_PAYMENT_CONFIGS]
                        }, {
                            type: i0.Optional
                        }] }];
        } });

    function resetBeneficiaryDetails(formGroup) {
        var _a, _b;
        var beneficiaryFormControls = [
            exports.CounterPartyFields.accountNumber,
            exports.CounterPartyFields.name,
            exports.CounterPartyFields.id,
            exports.CounterPartyFields.postalAddress,
            exports.CounterPartyFields.creditorBank,
            exports.CounterPartyFields.selectedContact,
            exports.CounterPartyFields.saveNewContact,
            exports.HiddenFields.beneficiaryAccountName,
        ];
        beneficiaryFormControls.forEach(function (control) {
            var _a;
            (_a = formGroup.get(control)) === null || _a === void 0 ? void 0 : _a.reset();
        });
        (_b = (_a = formGroup.parent) === null || _a === void 0 ? void 0 : _a.get(exports.HiddenFields.selectedBeneficiary)) === null || _b === void 0 ? void 0 : _b.reset();
    }

    var OOTB_PAYMENT_CONFIGS = [
        SEPA,
        INTERNAL_TRANSFER,
        US_ACH_CREDIT,
        US_DOMESTIC_WIRE,
        CHAPS,
        UK_FASTER_PAYMENT,
        INTERNATIONAL_TRANSFER,
        INTRABANK_TRANSFER,
        INTERNAL_TRANSFER_BUSINESS,
        P2P_TRANSFER,
        ACH_DEBIT,
    ];
    function OOTBPaymentTypes() {
        return OOTB_PAYMENT_CONFIGS;
    }

    var PaymentsSrSearchResultInfoComponent = /** @class */ (function () {
        function PaymentsSrSearchResultInfoComponent() {
            this.debounceTotal = new rxjs.BehaviorSubject(undefined);
            this.total$ = this.debounceTotal.pipe(operators.debounceTime(1000));
        }
        Object.defineProperty(PaymentsSrSearchResultInfoComponent.prototype, "totalNumber", {
            /**
             * Total count of search result.
             */
            set: function (val) {
                this.debounceTotal.next(val);
            },
            enumerable: false,
            configurable: true
        });
        PaymentsSrSearchResultInfoComponent.prototype.isNumber = function (val) {
            return typeof val === 'number';
        };
        return PaymentsSrSearchResultInfoComponent;
    }());
    /** @nocollapse */ PaymentsSrSearchResultInfoComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentsSrSearchResultInfoComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ PaymentsSrSearchResultInfoComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PaymentsSrSearchResultInfoComponent, selector: "bb-payments-sr-search-result-info", inputs: { totalNumber: "totalNumber" }, ngImport: i0__namespace, template: "<div class=\"sr-only\" aria-live=\"polite\" aria-atomic=\"true\" role=\"status\">\n  <ng-container *ngIf=\"{ total: total$ | async } as data\">\n    <ng-container *ngIf=\"isNumber(data.total)\">\n      <ng-content></ng-content>\n      <span i18n=\"@@sr-search-result-info-label.someValue\">\n        {data.total, plural, =0 {No results found} =1 {1 result found} other\n        {{{data.total}} results found}}\n      </span>\n    </ng-container>\n  </ng-container>\n</div>\n", directives: [{ type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i2__namespace.AsyncPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentsSrSearchResultInfoComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-payments-sr-search-result-info',
                        templateUrl: 'sr-search-result-info.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], propDecorators: { totalNumber: [{
                    type: i0.Input
                }] } });

    /**
     * Exports UI components and modules for payments common
     */
    var PaymentsSrSearchResultInfoModule = /** @class */ (function () {
        function PaymentsSrSearchResultInfoModule() {
        }
        return PaymentsSrSearchResultInfoModule;
    }());
    /** @nocollapse */ PaymentsSrSearchResultInfoModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentsSrSearchResultInfoModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ PaymentsSrSearchResultInfoModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentsSrSearchResultInfoModule, declarations: [PaymentsSrSearchResultInfoComponent], imports: [i2.CommonModule], exports: [PaymentsSrSearchResultInfoComponent] });
    /** @nocollapse */ PaymentsSrSearchResultInfoModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentsSrSearchResultInfoModule, imports: [[i2.CommonModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentsSrSearchResultInfoModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i2.CommonModule],
                        declarations: [PaymentsSrSearchResultInfoComponent],
                        exports: [PaymentsSrSearchResultInfoComponent],
                    }]
            }] });

    var PaymentOrdersBadRequest = /** @class */ (function () {
        function PaymentOrdersBadRequest(payment) {
            this.payment = payment;
            this.kind = 'PaymentOrdersBadRequest';
        }
        return PaymentOrdersBadRequest;
    }());
    var UnknownError = /** @class */ (function () {
        function UnknownError(origin) {
            this.origin = origin;
            this.kind = 'UnknownError';
        }
        return UnknownError;
    }());
    exports.Routes = void 0;
    (function (Routes) {
        Routes["FORM"] = "form";
        Routes["REVIEW"] = "review";
    })(exports.Routes || (exports.Routes = {}));
    exports.PaymentState = void 0;
    (function (PaymentState) {
        PaymentState["INITIAL"] = "INITIAL";
        PaymentState["REVIEW"] = "REVIEW";
        PaymentState["EDIT"] = "EDIT";
    })(exports.PaymentState || (exports.PaymentState = {}));
    exports.ExecutionTimeFrame = void 0;
    (function (ExecutionTimeFrame) {
        ExecutionTimeFrame["HOUR"] = "HOUR";
        ExecutionTimeFrame["CALENDAR_DAY"] = "CALENDAR_DAY";
        ExecutionTimeFrame["BUSINESS_DAY"] = "BUSINESS_DAY";
    })(exports.ExecutionTimeFrame || (exports.ExecutionTimeFrame = {}));
    exports.ChargeBearer = void 0;
    (function (ChargeBearer) {
        ChargeBearer["OUR"] = "OUR";
        ChargeBearer["BEN"] = "BEN";
        ChargeBearer["SHA"] = "SHA";
    })(exports.ChargeBearer || (exports.ChargeBearer = {}));
    exports.ModalState = void 0;
    (function (ModalState) {
        ModalState[ModalState["Preview"] = 0] = "Preview";
        ModalState[ModalState["Hidden"] = 1] = "Hidden";
    })(exports.ModalState || (exports.ModalState = {}));
    exports.ProgressStatus = void 0;
    (function (ProgressStatus) {
        ProgressStatus["CONFIRMATION_PENDING"] = "CONFIRMATION_PENDING";
        ProgressStatus["USER_DECLINED"] = "USER_DECLINED";
        ProgressStatus["SYSTEM_DECLINED"] = "SYSTEM_DECLINED";
        ProgressStatus["PENDING_APPROVAL"] = "PENDING_APPROVAL";
        ProgressStatus["SENDING"] = "SENDING";
        ProgressStatus["ACCEPTED"] = "ACCEPTED";
        ProgressStatus["REJECTED"] = "REJECTED";
        ProgressStatus["PROCESSED"] = "PROCESSED";
        ProgressStatus["NO_PROGRESS"] = "NO_PROGRESS";
    })(exports.ProgressStatus || (exports.ProgressStatus = {}));
    exports.ManualBatchState = void 0;
    (function (ManualBatchState) {
        ManualBatchState["CLOSED"] = "CLOSED";
        ManualBatchState["INITIAL"] = "INITIAL";
        ManualBatchState["DRAFT"] = "DRAFT";
        ManualBatchState["REVIEW"] = "REVIEW";
        ManualBatchState["VALID"] = "VALID";
    })(exports.ManualBatchState || (exports.ManualBatchState = {}));
    exports.PaymentSubmitStatuses = void 0;
    (function (PaymentSubmitStatuses) {
        PaymentSubmitStatuses["SUCCESS"] = "success";
        PaymentSubmitStatuses["ERROR"] = "error";
        PaymentSubmitStatuses["PENDING"] = "pending";
        PaymentSubmitStatuses["PENDING_EDITED"] = "pending_edited";
    })(exports.PaymentSubmitStatuses || (exports.PaymentSubmitStatuses = {}));
    exports.ScrollToElementBehavior = void 0;
    (function (ScrollToElementBehavior) {
        ScrollToElementBehavior["AUTO"] = "auto";
        ScrollToElementBehavior["SMOOTH"] = "smooth";
    })(exports.ScrollToElementBehavior || (exports.ScrollToElementBehavior = {}));
    exports.ScrollToElementBlock = void 0;
    (function (ScrollToElementBlock) {
        ScrollToElementBlock["START"] = "start";
        ScrollToElementBlock["CENTER"] = "center";
        ScrollToElementBlock["END"] = "end";
        ScrollToElementBlock["NEAREST"] = "nearest";
    })(exports.ScrollToElementBlock || (exports.ScrollToElementBlock = {}));
    exports.ScrollToElementInline = void 0;
    (function (ScrollToElementInline) {
        ScrollToElementInline["START"] = "start";
        ScrollToElementInline["CENTER"] = "center";
        ScrollToElementInline["END"] = "end";
        ScrollToElementInline["NEAREST"] = "nearest";
    })(exports.ScrollToElementInline || (exports.ScrollToElementInline = {}));

    function scrollToElement(elem, selector, options) {
        var defaultOptions = {
            behavior: exports.ScrollToElementBehavior.SMOOTH,
            block: exports.ScrollToElementBlock.CENTER,
            inline: exports.ScrollToElementInline.NEAREST,
        };
        setTimeout(function () {
            var errorElems = elem === null || elem === void 0 ? void 0 : elem.querySelectorAll(selector);
            if (errorElems === null || errorElems === void 0 ? void 0 : errorElems.length) {
                errorElems[0].scrollIntoView(Object.assign(defaultOptions, options || {}));
            }
        });
    }
    function focusChildElement(selector, parent) {
        setTimeout(function () {
            var child = parent === null || parent === void 0 ? void 0 : parent.querySelector(selector);
            child === null || child === void 0 ? void 0 : child.focus();
        });
    }
    function focusErrorElement(parent, selector) {
        if (selector === void 0) { selector = 'small.bb-input-validation-message'; }
        toggleTabIndex(selector, parent);
        scrollToElement(parent, selector);
        focusChildElement(selector, parent);
    }
    function toggleTabIndex(selector, parent, focusable) {
        if (focusable === void 0) { focusable = true; }
        var child = parent === null || parent === void 0 ? void 0 : parent.querySelector(selector);
        child === null || child === void 0 ? void 0 : child.setAttribute('tabindex', focusable ? '0' : '-1');
    }

    var CountryNameComponent = /** @class */ (function () {
        function CountryNameComponent() {
        }
        CountryNameComponent.prototype.ngOnInit = function () {
            if (!this.countryCode) {
                console.warn('Please provide a ISO 3166 Alpha-2 country code');
            }
        };
        return CountryNameComponent;
    }());
    /** @nocollapse */ CountryNameComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CountryNameComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ CountryNameComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: CountryNameComponent, selector: "bb-country-name", inputs: { countryCode: "countryCode" }, ngImport: i0__namespace, template: "<ng-container [ngSwitch]=\"countryCode\">\n  <ng-container *ngSwitchCase=\"'AF'\" i18n=\"@@bb-country-name.AF\"\n    >Afghanistan</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'AX'\" i18n=\"@@bb-country-name.AX\"\n    >Aland Islands</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'AL'\" i18n=\"@@bb-country-name.AL\"\n    >Albania</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'DZ'\" i18n=\"@@bb-country-name.DZ\"\n    >Algeria</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'AS'\" i18n=\"@@bb-country-name.AS\"\n    >American Samoa</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'AD'\" i18n=\"@@bb-country-name.AD\"\n    >Andorra</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'AO'\" i18n=\"@@bb-country-name.AO\"\n    >Angola</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'AI'\" i18n=\"@@bb-country-name.AI\"\n    >Anguilla</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'AQ'\" i18n=\"@@bb-country-name.AQ\"\n    >Antarctica</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'AG'\" i18n=\"@@bb-country-name.AG\"\n    >Antigua and Barbuda</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'AR'\" i18n=\"@@bb-country-name.AR\"\n    >Argentina</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'AM'\" i18n=\"@@bb-country-name.AM\"\n    >Armenia</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'AW'\" i18n=\"@@bb-country-name.AW\"\n    >Aruba</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'AU'\" i18n=\"@@bb-country-name.AU\"\n    >Australia</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'AT'\" i18n=\"@@bb-country-name.AT\"\n    >Austria</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'AZ'\" i18n=\"@@bb-country-name.AZ\"\n    >Azerbaijan</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'BS'\" i18n=\"@@bb-country-name.BS\"\n    >Bahamas</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'BH'\" i18n=\"@@bb-country-name.BH\"\n    >Bahrain</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'BD'\" i18n=\"@@bb-country-name.BD\"\n    >Bangladesh</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'BB'\" i18n=\"@@bb-country-name.BB\"\n    >Barbados</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'BY'\" i18n=\"@@bb-country-name.BY\"\n    >Belarus</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'BE'\" i18n=\"@@bb-country-name.BE\"\n    >Belgium</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'BZ'\" i18n=\"@@bb-country-name.BZ\"\n    >Belize</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'BJ'\" i18n=\"@@bb-country-name.BJ\"\n    >Benin</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'BM'\" i18n=\"@@bb-country-name.BM\"\n    >Bermuda</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'BT'\" i18n=\"@@bb-country-name.BT\"\n    >Bhutan</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'BO'\" i18n=\"@@bb-country-name.BO\"\n    >Bolivia, Plurinational State of</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'BQ'\" i18n=\"@@bb-country-name.BQ\"\n    >Bonaire, Saint Eustatius and Saba</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'BA'\" i18n=\"@@bb-country-name.BA\"\n    >Bosnia and Herzegovina</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'BW'\" i18n=\"@@bb-country-name.BW\"\n    >Botswana</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'BV'\" i18n=\"@@bb-country-name.BV\"\n    >Bouvet Island</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'BR'\" i18n=\"@@bb-country-name.BR\"\n    >Brazil</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'IO'\" i18n=\"@@bb-country-name.IO\"\n    >British Indian Ocean Territory</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'BN'\" i18n=\"@@bb-country-name.BN\"\n    >Brunei Darussalam</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'BG'\" i18n=\"@@bb-country-name.BG\"\n    >Bulgaria</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'BF'\" i18n=\"@@bb-country-name.BF\"\n    >Burkina Faso</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'BI'\" i18n=\"@@bb-country-name.BI\"\n    >Burundi</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'KH'\" i18n=\"@@bb-country-name.KH\"\n    >Cambodia</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'CM'\" i18n=\"@@bb-country-name.CM\"\n    >Cameroon</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'CA'\" i18n=\"@@bb-country-name.CA\"\n    >Canada</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'CV'\" i18n=\"@@bb-country-name.CV\"\n    >Cape Verde</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'KY'\" i18n=\"@@bb-country-name.KY\"\n    >Cayman Islands</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'CF'\" i18n=\"@@bb-country-name.CF\"\n    >Central African Republic</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'TD'\" i18n=\"@@bb-country-name.TD\"\n    >Chad</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'CL'\" i18n=\"@@bb-country-name.CL\"\n    >Chile</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'CN'\" i18n=\"@@bb-country-name.CN\"\n    >China</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'CX'\" i18n=\"@@bb-country-name.CX\"\n    >Christmas Island</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'CC'\" i18n=\"@@bb-country-name.CC\"\n    >Cocos (Keeling) Islands</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'CO'\" i18n=\"@@bb-country-name.CO\"\n    >Colombia</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'KM'\" i18n=\"@@bb-country-name.KM\"\n    >Comoros</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'CG'\" i18n=\"@@bb-country-name.CG\"\n    >Congo</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'CD'\" i18n=\"@@bb-country-name.CD\"\n    >Congo, The Democratic Republic of the</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'CK'\" i18n=\"@@bb-country-name.CK\"\n    >Cook Islands</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'CR'\" i18n=\"@@bb-country-name.CR\"\n    >Costa Rica</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'CI'\" i18n=\"@@bb-country-name.CI\"\n    >Cote d'Ivoire</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'HR'\" i18n=\"@@bb-country-name.HR\"\n    >Croatia</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'CU'\" i18n=\"@@bb-country-name.CU\"\n    >Cuba</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'CW'\" i18n=\"@@bb-country-name.CW\"\n    >Curacao</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'CY'\" i18n=\"@@bb-country-name.CY\"\n    >Cyprus</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'CZ'\" i18n=\"@@bb-country-name.CZ\"\n    >Czech Republic</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'DK'\" i18n=\"@@bb-country-name.DK\"\n    >Denmark</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'DJ'\" i18n=\"@@bb-country-name.DJ\"\n    >Djibouti</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'DM'\" i18n=\"@@bb-country-name.DM\"\n    >Dominica</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'DO'\" i18n=\"@@bb-country-name.DO\"\n    >Dominican Republic</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'EC'\" i18n=\"@@bb-country-name.EC\"\n    >Ecuador</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'EG'\" i18n=\"@@bb-country-name.EG\"\n    >Egypt</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'SV'\" i18n=\"@@bb-country-name.SV\"\n    >El Salvador</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'GQ'\" i18n=\"@@bb-country-name.GQ\"\n    >Equatorial Guinea</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'ER'\" i18n=\"@@bb-country-name.ER\"\n    >Eritrea</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'EE'\" i18n=\"@@bb-country-name.EE\"\n    >Estonia</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'ET'\" i18n=\"@@bb-country-name.ET\"\n    >Ethiopia</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'FK'\" i18n=\"@@bb-country-name.FK\"\n    >Falkland Islands (Malvinas)</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'FO'\" i18n=\"@@bb-country-name.FO\"\n    >Faroe Islands</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'FJ'\" i18n=\"@@bb-country-name.FJ\"\n    >Fiji</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'FI'\" i18n=\"@@bb-country-name.FI\"\n    >Finland</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'FR'\" i18n=\"@@bb-country-name.FR\"\n    >France</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'GF'\" i18n=\"@@bb-country-name.GF\"\n    >French Guiana</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'PF'\" i18n=\"@@bb-country-name.PF\"\n    >French Polynesia</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'TF'\" i18n=\"@@bb-country-name.TF\"\n    >French Southern Territories</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'GA'\" i18n=\"@@bb-country-name.GA\"\n    >Gabon</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'GM'\" i18n=\"@@bb-country-name.GM\"\n    >Gambia</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'GE'\" i18n=\"@@bb-country-name.GE\"\n    >Georgia</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'DE'\" i18n=\"@@bb-country-name.DE\"\n    >Germany</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'GH'\" i18n=\"@@bb-country-name.GH\"\n    >Ghana</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'GI'\" i18n=\"@@bb-country-name.GI\"\n    >Gibraltar</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'GR'\" i18n=\"@@bb-country-name.GR\"\n    >Greece</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'GL'\" i18n=\"@@bb-country-name.GL\"\n    >Greenland</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'GD'\" i18n=\"@@bb-country-name.GD\"\n    >Grenada</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'GP'\" i18n=\"@@bb-country-name.GP\"\n    >Guadeloupe</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'GU'\" i18n=\"@@bb-country-name.GU\"\n    >Guam</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'GT'\" i18n=\"@@bb-country-name.GT\"\n    >Guatemala</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'GG'\" i18n=\"@@bb-country-name.GG\"\n    >Guernsey</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'GN'\" i18n=\"@@bb-country-name.GN\"\n    >Guinea</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'GW'\" i18n=\"@@bb-country-name.GW\"\n    >Guinea-Bissau</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'GY'\" i18n=\"@@bb-country-name.GY\"\n    >Guyana</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'HT'\" i18n=\"@@bb-country-name.HT\"\n    >Haiti</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'HM'\" i18n=\"@@bb-country-name.HM\"\n    >Heard Island and McDonald Islands</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'VA'\" i18n=\"@@bb-country-name.VA\"\n    >Holy See (Vatican City State)</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'HN'\" i18n=\"@@bb-country-name.HN\"\n    >Honduras</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'HK'\" i18n=\"@@bb-country-name.HK\"\n    >Hong Kong</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'HU'\" i18n=\"@@bb-country-name.HU\"\n    >Hungary</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'IS'\" i18n=\"@@bb-country-name.IS\"\n    >Iceland</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'IN'\" i18n=\"@@bb-country-name.IN\"\n    >India</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'ID'\" i18n=\"@@bb-country-name.ID\"\n    >Indonesia</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'IR'\" i18n=\"@@bb-country-name.IR\"\n    >Iran, Islamic Republic of</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'IQ'\" i18n=\"@@bb-country-name.IQ\"\n    >Iraq</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'IE'\" i18n=\"@@bb-country-name.IE\"\n    >Ireland</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'IM'\" i18n=\"@@bb-country-name.IM\"\n    >Isle of Man</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'IL'\" i18n=\"@@bb-country-name.IL\"\n    >Israel</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'IT'\" i18n=\"@@bb-country-name.IT\"\n    >Italy</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'JM'\" i18n=\"@@bb-country-name.JM\"\n    >Jamaica</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'JP'\" i18n=\"@@bb-country-name.JP\"\n    >Japan</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'JE'\" i18n=\"@@bb-country-name.JE\"\n    >Jersey</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'JO'\" i18n=\"@@bb-country-name.JO\"\n    >Jordan</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'KZ'\" i18n=\"@@bb-country-name.KZ\"\n    >Kazakhstan</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'KE'\" i18n=\"@@bb-country-name.KE\"\n    >Kenya</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'KI'\" i18n=\"@@bb-country-name.KI\"\n    >Kiribati</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'KP'\" i18n=\"@@bb-country-name.KP\"\n    >Korea, Democratic People's Republic of</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'KR'\" i18n=\"@@bb-country-name.KR\"\n    >Korea, Republic of</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'KW'\" i18n=\"@@bb-country-name.KW\"\n    >Kuwait</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'KG'\" i18n=\"@@bb-country-name.KG\"\n    >Kyrgyzstan</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'LA'\" i18n=\"@@bb-country-name.LA\"\n    >Lao People's Democratic Republic</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'LV'\" i18n=\"@@bb-country-name.LV\"\n    >Latvia</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'LB'\" i18n=\"@@bb-country-name.LB\"\n    >Lebanon</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'LS'\" i18n=\"@@bb-country-name.LS\"\n    >Lesotho</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'LR'\" i18n=\"@@bb-country-name.LR\"\n    >Liberia</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'LY'\" i18n=\"@@bb-country-name.LY\"\n    >Libyan Arab Jamahiriya</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'LI'\" i18n=\"@@bb-country-name.LI\"\n    >Liechtenstein</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'LT'\" i18n=\"@@bb-country-name.LT\"\n    >Lithuania</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'LU'\" i18n=\"@@bb-country-name.LU\"\n    >Luxembourg</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'MO'\" i18n=\"@@bb-country-name.MO\"\n    >Macao</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'MK'\" i18n=\"@@bb-country-name.MK\"\n    >Macedonia, The Former Yugoslav Republic of</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'MG'\" i18n=\"@@bb-country-name.MG\"\n    >Madagascar</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'MW'\" i18n=\"@@bb-country-name.MW\"\n    >Malawi</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'MY'\" i18n=\"@@bb-country-name.MY\"\n    >Malaysia</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'MV'\" i18n=\"@@bb-country-name.MV\"\n    >Maldives</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'ML'\" i18n=\"@@bb-country-name.ML\"\n    >Mali</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'MT'\" i18n=\"@@bb-country-name.MT\"\n    >Malta</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'MH'\" i18n=\"@@bb-country-name.MH\"\n    >Marshall Islands</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'MQ'\" i18n=\"@@bb-country-name.MQ\"\n    >Martinique</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'MR'\" i18n=\"@@bb-country-name.MR\"\n    >Mauritania</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'MU'\" i18n=\"@@bb-country-name.MU\"\n    >Mauritius</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'YT'\" i18n=\"@@bb-country-name.YT\"\n    >Mayotte</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'MX'\" i18n=\"@@bb-country-name.MX\"\n    >Mexico</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'FM'\" i18n=\"@@bb-country-name.FM\"\n    >Micronesia, Federated States of</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'MD'\" i18n=\"@@bb-country-name.MD\"\n    >Moldova, Republic of</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'MC'\" i18n=\"@@bb-country-name.MC\"\n    >Monaco</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'MN'\" i18n=\"@@bb-country-name.MN\"\n    >Mongolia</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'ME'\" i18n=\"@@bb-country-name.ME\"\n    >Montenegro</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'MS'\" i18n=\"@@bb-country-name.MS\"\n    >Montserrat</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'MA'\" i18n=\"@@bb-country-name.MA\"\n    >Morocco</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'MZ'\" i18n=\"@@bb-country-name.MZ\"\n    >Mozambique</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'MM'\" i18n=\"@@bb-country-name.MM\"\n    >Myanmar</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'NA'\" i18n=\"@@bb-country-name.NA\"\n    >Namibia</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'NR'\" i18n=\"@@bb-country-name.NR\"\n    >Nauru</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'NP'\" i18n=\"@@bb-country-name.NP\"\n    >Nepal</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'NL'\" i18n=\"@@bb-country-name.NL\"\n    >Netherlands</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'NC'\" i18n=\"@@bb-country-name.NC\"\n    >New Caledonia</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'NZ'\" i18n=\"@@bb-country-name.NZ\"\n    >New Zealand</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'NI'\" i18n=\"@@bb-country-name.NI\"\n    >Nicaragua</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'NE'\" i18n=\"@@bb-country-name.NE\"\n    >Niger</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'NG'\" i18n=\"@@bb-country-name.NG\"\n    >Nigeria</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'NU'\" i18n=\"@@bb-country-name.NU\"\n    >Niue</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'NF'\" i18n=\"@@bb-country-name.NF\"\n    >Norfolk Island</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'MP'\" i18n=\"@@bb-country-name.MP\"\n    >Northern Mariana Islands</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'NO'\" i18n=\"@@bb-country-name.NO\"\n    >Norway</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'PS'\" i18n=\"@@bb-country-name.PS\"\n    >Occupied Palestinian Territory</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'OM'\" i18n=\"@@bb-country-name.OM\"\n    >Oman</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'PK'\" i18n=\"@@bb-country-name.PK\"\n    >Pakistan</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'PW'\" i18n=\"@@bb-country-name.PW\"\n    >Palau</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'PA'\" i18n=\"@@bb-country-name.PA\"\n    >Panama</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'PG'\" i18n=\"@@bb-country-name.PG\"\n    >Papua New Guinea</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'PY'\" i18n=\"@@bb-country-name.PY\"\n    >Paraguay</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'PE'\" i18n=\"@@bb-country-name.PE\"\n    >Peru</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'PH'\" i18n=\"@@bb-country-name.PH\"\n    >Philippines</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'PN'\" i18n=\"@@bb-country-name.PN\"\n    >Pitcairn</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'PL'\" i18n=\"@@bb-country-name.PL\"\n    >Poland</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'PT'\" i18n=\"@@bb-country-name.PT\"\n    >Portugal</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'PR'\" i18n=\"@@bb-country-name.PR\"\n    >Puerto Rico</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'QA'\" i18n=\"@@bb-country-name.QA\"\n    >Qatar</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'RE'\" i18n=\"@@bb-country-name.RE\"\n    >Reunion</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'RO'\" i18n=\"@@bb-country-name.RO\"\n    >Romania</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'RU'\" i18n=\"@@bb-country-name.RU\"\n    >Russian Federation</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'RW'\" i18n=\"@@bb-country-name.RW\"\n    >Rwanda</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'BL'\" i18n=\"@@bb-country-name.BL\"\n    >Saint Barthelemy</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'SH'\" i18n=\"@@bb-country-name.SH\"\n    >Saint Helena, Ascension and Tristan da Cunha</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'KN'\" i18n=\"@@bb-country-name.KN\"\n    >Saint Kitts and Nevis</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'LC'\" i18n=\"@@bb-country-name.LC\"\n    >Saint Lucia</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'MF'\" i18n=\"@@bb-country-name.MF\"\n    >Saint Martin (French part)</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'PM'\" i18n=\"@@bb-country-name.PM\"\n    >Saint Pierre and Miquelon</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'VC'\" i18n=\"@@bb-country-name.VC\"\n    >Saint Vincent and The Grenadines</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'WS'\" i18n=\"@@bb-country-name.WS\"\n    >Samoa</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'SM'\" i18n=\"@@bb-country-name.SM\"\n    >San Marino</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'ST'\" i18n=\"@@bb-country-name.ST\"\n    >Sao Tome and Principe</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'SA'\" i18n=\"@@bb-country-name.SA\"\n    >Saudi Arabia</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'SN'\" i18n=\"@@bb-country-name.SN\"\n    >Senegal</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'RS'\" i18n=\"@@bb-country-name.RS\"\n    >Serbia</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'SC'\" i18n=\"@@bb-country-name.SC\"\n    >Seychelles</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'SL'\" i18n=\"@@bb-country-name.SL\"\n    >Sierra Leone</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'SG'\" i18n=\"@@bb-country-name.SG\"\n    >Singapore</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'SX'\" i18n=\"@@bb-country-name.SX\"\n    >Sint Maarten (Dutch part)</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'SK'\" i18n=\"@@bb-country-name.SK\"\n    >Slovakia</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'SI'\" i18n=\"@@bb-country-name.SI\"\n    >Slovenia</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'SB'\" i18n=\"@@bb-country-name.SB\"\n    >Solomon Islands</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'SO'\" i18n=\"@@bb-country-name.SO\"\n    >Somalia</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'ZA'\" i18n=\"@@bb-country-name.ZA\"\n    >South Africa</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'GS'\" i18n=\"@@bb-country-name.GS\"\n    >South Georgia and the South Sandwich Islands</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'ES'\" i18n=\"@@bb-country-name.ES\"\n    >Spain</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'LK'\" i18n=\"@@bb-country-name.LK\"\n    >Sri Lanka</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'SD'\" i18n=\"@@bb-country-name.SD\"\n    >Sudan</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'SR'\" i18n=\"@@bb-country-name.SR\"\n    >Suriname</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'SJ'\" i18n=\"@@bb-country-name.SJ\"\n    >Svalbard and Jan Mayen</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'SZ'\" i18n=\"@@bb-country-name.SZ\"\n    >Swaziland</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'SE'\" i18n=\"@@bb-country-name.SE\"\n    >Sweden</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'CH'\" i18n=\"@@bb-country-name.CH\"\n    >Switzerland</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'SY'\" i18n=\"@@bb-country-name.SY\"\n    >Syrian Arab Republic</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'TW'\" i18n=\"@@bb-country-name.TW\"\n    >Taiwan, Province of China</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'TJ'\" i18n=\"@@bb-country-name.TJ\"\n    >Tajikistan</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'TZ'\" i18n=\"@@bb-country-name.TZ\"\n    >Tanzania, United Republic of</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'TH'\" i18n=\"@@bb-country-name.TH\"\n    >Thailand</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'TL'\" i18n=\"@@bb-country-name.TL\"\n    >Timor-Leste</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'TG'\" i18n=\"@@bb-country-name.TG\"\n    >Togo</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'TK'\" i18n=\"@@bb-country-name.TK\"\n    >Tokelau</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'TO'\" i18n=\"@@bb-country-name.TO\"\n    >Tonga</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'TT'\" i18n=\"@@bb-country-name.TT\"\n    >Trinidad and Tobago</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'TN'\" i18n=\"@@bb-country-name.TN\"\n    >Tunisia</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'TR'\" i18n=\"@@bb-country-name.TR\"\n    >Turkey</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'TM'\" i18n=\"@@bb-country-name.TM\"\n    >Turkmenistan</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'TC'\" i18n=\"@@bb-country-name.TC\"\n    >Turks and Caicos Islands</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'TV'\" i18n=\"@@bb-country-name.TV\"\n    >Tuvalu</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'UG'\" i18n=\"@@bb-country-name.UG\"\n    >Uganda</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'UA'\" i18n=\"@@bb-country-name.UA\"\n    >Ukraine</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'AE'\" i18n=\"@@bb-country-name.AE\"\n    >United Arab Emirates</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'GB'\" i18n=\"@@bb-country-name.GB\"\n    >United Kingdom</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'US'\" i18n=\"@@bb-country-name.US\"\n    >United States</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'UY'\" i18n=\"@@bb-country-name.UY\"\n    >Uruguay</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'UZ'\" i18n=\"@@bb-country-name.UZ\"\n    >Uzbekistan</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'VU'\" i18n=\"@@bb-country-name.VU\"\n    >Vanuatu</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'VE'\" i18n=\"@@bb-country-name.VE\"\n    >Venezuela, Bolivarian Republic of</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'VN'\" i18n=\"@@bb-country-name.VN\"\n    >Viet Nam</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'VG'\" i18n=\"@@bb-country-name.VG\"\n    >Virgin Islands, British</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'VI'\" i18n=\"@@bb-country-name.VI\"\n    >Virgin Islands, U.S.</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'WF'\" i18n=\"@@bb-country-name.WF\"\n    >Wallis and Futuna</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'EH'\" i18n=\"@@bb-country-name.EH\"\n    >Western Sahara</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'YE'\" i18n=\"@@bb-country-name.YE\"\n    >Yemen</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'ZM'\" i18n=\"@@bb-country-name.ZM\"\n    >Zambia</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'ZW'\" i18n=\"@@bb-country-name.ZW\"\n    >Zimbabwe</ng-container\n  >\n</ng-container>\n", directives: [{ type: i2__namespace.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i2__namespace.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CountryNameComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-country-name',
                        templateUrl: './country-name.component.html',
                    }]
            }], propDecorators: { countryCode: [{
                    type: i0.Input
                }] } });

    var FullAddressComponent = /** @class */ (function () {
        function FullAddressComponent() {
            this.hostRef = this;
        }
        FullAddressComponent.prototype.ngOnInit = function () {
            if (!this.address) {
                console.warn('Please provide a valid `address` input');
            }
        };
        FullAddressComponent.prototype.format = function () {
            return addressToString(this.address);
        };
        return FullAddressComponent;
    }());
    /** @nocollapse */ FullAddressComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FullAddressComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ FullAddressComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FullAddressComponent, selector: "bb-full-address", inputs: { address: "address" }, ngImport: i0__namespace, template: "\n    <span class=\"break-word\" data-role=\"full-address-details\">\n      {{ hostRef.format() }},\n      <bb-country-name\n        *ngIf=\"address?.country\"\n        [countryCode]=\"address?.country\"\n      ></bb-country-name>\n    </span>\n  ", isInline: true, components: [{ type: CountryNameComponent, selector: "bb-country-name", inputs: ["countryCode"] }], directives: [{ type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FullAddressComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-full-address',
                        template: "\n    <span class=\"break-word\" data-role=\"full-address-details\">\n      {{ hostRef.format() }},\n      <bb-country-name\n        *ngIf=\"address?.country\"\n        [countryCode]=\"address?.country\"\n      ></bb-country-name>\n    </span>\n  ",
                    }]
            }], propDecorators: { address: [{
                    type: i0.Input
                }] } });

    var AddressDetailsComponent = /** @class */ (function () {
        function AddressDetailsComponent(elRef) {
            this.elRef = elRef;
            this.id = AddressDetailsComponent._id++;
            /**
             * Instance that holds the address details
             */
            this.address = {};
            /**
             * Flag that denoted if contact address is copied
             */
            this.isContactAddressCopied = false;
            /**
             * Flag to hide country input in the address component
             */
            this.hideCountry = false;
            /**
             * Type of address view. Possible values `FORM`| `CARD`. Defaults to `FORM`
             */
            this.viewType = exports.ViewType.BUTTON;
            /**
             * Flag to denote if the debit account has only closed payment permissions
             * Default value is `false`
             */
            this.isClosedPayment = false;
            /**
             * Event emitted when address is submitted
             */
            // eslint-disable-next-line @angular-eslint/no-output-native
            this.submit = new i0.EventEmitter();
            /**
             * Event emitted when address is reset
             */
            // eslint-disable-next-line @angular-eslint/no-output-native
            this.reset = new i0.EventEmitter();
            /**
             * Event emitted when address is discarded
             */
            this.discard = new i0.EventEmitter();
            /**
             * Event emitted when address is deleted
             */
            this.delete = new i0.EventEmitter();
            /**
             * Event emitted when address is editted
             */
            this.edit = new i0.EventEmitter();
            /**
             * Event emitted when add address action is triggered
             */
            this.add = new i0.EventEmitter();
            this.requiredFields = ['addressLine1', 'postCode', 'town'];
        }
        AddressDetailsComponent.prototype.ngOnInit = function () {
            var _this = this;
            if (!this.hideCountry) {
                this.requiredFields.push('country');
            }
            this.markFieldsAsPristine();
            if (!this.isAddressTruthy()) {
                this.viewType = exports.ViewType.BUTTON;
                this.reset.emit();
            }
            this.valueChangeSubscription = this.addressForm.valueChanges.subscribe(function () {
                _this.address = _this.addressForm.value;
                if (_this.viewType !== exports.ViewType.FORM) {
                    if (_this.isAddressTruthy()) {
                        _this.submit.emit();
                    }
                    else if (_this.viewType === exports.ViewType.CARD) {
                        _this.reset.emit();
                    }
                }
            });
        };
        AddressDetailsComponent.prototype.ngOnChanges = function (changes) {
            var _a, _b, _c;
            var validator = (_b = (_a = this.addressForm) === null || _a === void 0 ? void 0 : _a.controls['addressLine1']) === null || _b === void 0 ? void 0 : _b.validator;
            var currentView = (_c = changes['viewType']) === null || _c === void 0 ? void 0 : _c.currentValue;
            if (changes['viewType']) {
                if (currentView === exports.ViewType.FORM) {
                    if (!validator) {
                        this.toggleValidators(true);
                    }
                }
                else {
                    if (currentView === exports.ViewType.CARD && !this.isAddressTruthy()) {
                        this.reset.emit();
                    }
                    if (validator) {
                        this.toggleValidators(false);
                    }
                }
            }
        };
        AddressDetailsComponent.prototype.markFieldsAsPristine = function () {
            var _this = this;
            this.requiredFields.forEach(function (controlName) {
                var control = _this.addressForm.controls[controlName];
                if (control) {
                    control.markAsUntouched();
                    control.markAsPristine();
                }
            });
        };
        AddressDetailsComponent.prototype.addAddress = function () {
            var _a;
            if (((_a = this.countries) === null || _a === void 0 ? void 0 : _a.length) === 1) {
                this.addressForm.patchValue({ country: this.countries[0].value });
            }
            if (this.addressForm.touched) {
                // This prevents address form from showing errors before saving an address
                this.addressForm.markAsUntouched();
            }
            this.add.emit();
        };
        AddressDetailsComponent.prototype.editAddress = function () {
            this.edit.emit();
        };
        AddressDetailsComponent.prototype.discardAddress = function () {
            this.discard.emit();
        };
        AddressDetailsComponent.prototype.deleteAddress = function () {
            this.delete.emit();
        };
        AddressDetailsComponent.prototype.submitAddress = function () {
            if (this.viewType === exports.ViewType.FORM) {
                this.addressForm.markAsDirty();
                this.addressForm.markAllAsTouched();
            }
            this.submit.emit();
        };
        AddressDetailsComponent.prototype.toggleValidators = function (addValidators) {
            var _this = this;
            this.requiredFields.forEach(function (controlName) {
                var control = _this.addressForm.controls[controlName];
                var validators = addValidators ? [i1$1.Validators.required] : null;
                if (control) {
                    control.setValidators(validators);
                    control.updateValueAndValidity();
                }
            });
        };
        AddressDetailsComponent.prototype.selectCountry = function (country) {
            this.addressForm.patchValue({ country: country });
        };
        AddressDetailsComponent.prototype.isAddressTruthy = function () {
            var _a;
            return isAddressTruthy((_a = this.addressForm) === null || _a === void 0 ? void 0 : _a.value);
        };
        AddressDetailsComponent.prototype.onFocusout = function () {
            toggleTabIndex('.bb-input-validation-message', this.elRef.nativeElement, false);
        };
        AddressDetailsComponent.prototype.ngOnDestroy = function () {
            if (this.valueChangeSubscription) {
                this.valueChangeSubscription.unsubscribe();
            }
        };
        return AddressDetailsComponent;
    }());
    AddressDetailsComponent._id = 0;
    /** @nocollapse */ AddressDetailsComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AddressDetailsComponent, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ AddressDetailsComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AddressDetailsComponent, selector: "bb-address-item-details", inputs: { addressForm: "addressForm", addressType: "addressType", address: "address", isContactAddressCopied: "isContactAddressCopied", states: "states", countries: "countries", hideCountry: "hideCountry", viewType: "viewType", isClosedPayment: "isClosedPayment" }, outputs: { submit: "submit", reset: "reset", discard: "discard", delete: "delete", edit: "edit", add: "add" }, usesOnChanges: true, ngImport: i0__namespace, template: "<div class=\"address__view-btn\" [hidden]=\"viewType !== 'BUTTON'\">\n  <button\n    bbButton\n    color=\"link\"\n    (click)=\"addAddress()\"\n    class=\"bb-text-wrap\"\n    data-role=\"control-point\"\n    [disabled]=\"isClosedPayment\"\n  >\n    <bb-icon-ui class=\"mr-2\" name=\"control-point\"></bb-icon-ui>\n    <ng-container i18n=\"@@address-data.add.address.label\"\n      >Add {{ addressType | lowercase }} address</ng-container\n    >\n  </button>\n</div>\n\n<div\n  class=\"address__container--collapsed card card-sm card--highlight card--shadowless\"\n  [hidden]=\"viewType !== 'CARD'\"\n>\n  <div class=\"card-body\">\n    <div class=\"address__container-header bb-stack justify-content-between\">\n      <div class=\"address-label bb-highlight bb-block--md\">\n        <ng-container *ngTemplateOutlet=\"addressTitle\"></ng-container>\n      </div>\n      <div *ngIf=\"!isClosedPayment\">\n        <button\n          bbButton\n          data-role=\"control-point\"\n          color=\"link\"\n          circle=\"true\"\n          (click)=\"editAddress()\"\n          class=\"edit-btn\"\n          bbTooltip=\"Edit address\"\n          [attr.aria-labelledby]=\"'addressInfo_' + id\"\n          triggers=\"hover focus\"\n          i18n-bbTooltip=\"@@address-data.contactaddress.card.buttons.edit.label\"\n        >\n          <bb-icon-ui color=\"dark\" name=\"edit\"></bb-icon-ui>\n        </button>\n        <button\n          bbButton\n          color=\"link\"\n          circle=\"true\"\n          (click)=\"deleteAddress()\"\n          class=\"address__delete-btn\"\n          bbTooltip=\"Delete address\"\n          [attr.aria-labelledby]=\"'addressInfo_' + id\"\n          triggers=\"hover focus\"\n          i18n-bbTooltip=\"\n            @@address-data.contactaddress.card.buttons.delete.label\"\n        >\n          <bb-icon-ui color=\"dark\" name=\"delete\"></bb-icon-ui>\n        </button>\n      </div>\n    </div>\n    <div class=\"address__details--collapsed\" id=\"addressInfo_{{ id }}\">\n      <span class=\"sr-only\"\n        ><ng-container *ngTemplateOutlet=\"addressTitle\"></ng-container\n      ></span>\n      <bb-full-address [address]=\"addressForm?.value\"></bb-full-address>\n    </div>\n  </div>\n</div>\n\n<div\n  class=\"address__container card card-sm card--highlight card--shadowless\"\n  *ngIf=\"viewType === 'FORM'\"\n>\n  <div class=\"card-body\">\n    <fieldSet [formGroup]=\"addressForm\">\n      <legend class=\"sr-only\" i18n=\"@@address-data.addressGroup.title\">\n        Address details\n      </legend>\n      <div class=\"form-group\">\n        <div>\n          <div\n            class=\"address-label bb-highlight bb-block--md\"\n            data-role=\"address-label\"\n            i18n=\"@@address-data.contactAddress.label\"\n          >\n            {{ addressType | titlecase }} address\n          </div>\n          <div class=\"form-group\">\n            <bb-input-text-ui\n              label=\"Address line 1\"\n              i18n-label=\"@@address-data.addressLine1.label\"\n              formControlName=\"addressLine1\"\n              data-role=\"addressLine1\"\n              [maxLength]=\"70\"\n              [attr.aria-describedby]=\"addressLine1?.id + '__error'\"\n              #addressLine1\n            >\n            </bb-input-text-ui>\n            <bb-input-validation-message-ui\n              [attr.id]=\"addressLine1?.id + '__error'\"\n              *ngIf=\"addressForm.controls['addressLine1'] as formControl\"\n              [showErrors]=\"formControl?.touched && formControl?.invalid\"\n              (focusout)=\"onFocusout()\"\n            >\n              <ng-container *ngIf=\"formControl?.errors?.required\">\n                <span i18n=\"@@address-data.addressLine1.requiredError\"\n                  >Address is required.</span\n                >\n              </ng-container>\n            </bb-input-validation-message-ui>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <bb-input-text-ui\n            label=\"Address line 2 (Optional)\"\n            i18n-label=\"@@address-data.addressLine2.label\"\n            formControlName=\"addressLine2\"\n            data-role=\"addressLine2\"\n            [maxLength]=\"70\"\n            #addressLine2\n          >\n          </bb-input-text-ui>\n        </div>\n        <div class=\"form-group\">\n          <bb-input-text-ui\n            label=\"Address line 3 (Optional)\"\n            i18n-label=\"@@address-data.addressLine3.label\"\n            formControlName=\"streetName\"\n            data-role=\"streetName\"\n            [maxLength]=\"70\"\n            #addressLine3\n          >\n          </bb-input-text-ui>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-md-4 form-group\">\n          <bb-input-text-ui\n            label=\"Postal code\"\n            i18n-label=\"@@address-data.postCode.label\"\n            formControlName=\"postCode\"\n            data-role=\"postCode\"\n            #postCode\n            [maxLength]=\"16\"\n            [attr.aria-describedby]=\"postCode?.id + '__error'\"\n          >\n          </bb-input-text-ui>\n          <bb-input-validation-message-ui\n            [attr.id]=\"postCode?.id + '__error'\"\n            *ngIf=\"addressForm.controls['postCode'] as formControl\"\n            [showErrors]=\"formControl?.touched && formControl?.invalid\"\n            (focusout)=\"onFocusout()\"\n          >\n            <ng-container *ngIf=\"formControl?.errors?.required\">\n              <span i18n=\"@@address-data.postCode.requiredError\"\n                >Postal code is required.</span\n              >\n            </ng-container>\n          </bb-input-validation-message-ui>\n        </div>\n        <div class=\"col-md-8 form-group\">\n          <bb-input-text-ui\n            #contactCity\n            label=\"City\"\n            formControlName=\"town\"\n            data-role=\"town\"\n            [maxLength]=\"35\"\n            [attr.aria-describedby]=\"contactCity?.id + '__error'\"\n          >\n          </bb-input-text-ui>\n          <bb-input-validation-message-ui\n            [attr.id]=\"contactCity?.id + '__error'\"\n            *ngIf=\"addressForm.controls['town'] as formControl\"\n            [showErrors]=\"formControl?.touched && formControl?.invalid\"\n            (focusout)=\"onFocusout()\"\n          >\n            <ng-container *ngIf=\"formControl?.errors?.required\">\n              <span i18n=\"@@address-data.city.requiredError\"\n                >City is required.</span\n              >\n            </ng-container>\n          </bb-input-validation-message-ui>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-md-6 form-group\">\n          <ng-container *ngIf=\"states?.length > 0; else stateText\">\n            <bb-dropdown-single-select-ui\n              label=\"State or area (Optional)\"\n              i18n-label=\"@@address-data.countrySubDivision.label\"\n              data-role=\"stateOrArea\"\n              formControlName=\"countrySubDivision\"\n              placeholder=\"Select\"\n              i18n-placeholder=\"@@address-data.countrySubDivision.placeholder\"\n            >\n              <bb-dropdown-single-select-option-ui\n                *ngFor=\"let option of states\"\n                [value]=\"option.value\"\n                [label]=\"option.label\"\n              >\n              </bb-dropdown-single-select-option-ui>\n            </bb-dropdown-single-select-ui>\n          </ng-container>\n\n          <ng-template #stateText>\n            <bb-input-text-ui\n              #countrySubDivision\n              label=\"State or area (Optional)\"\n              data-role=\"countrySubDivision\"\n              i18n-label=\"@@address-data.countrySubDivision.label\"\n              formControlName=\"countrySubDivision\"\n              [maxLength]=\"35\"\n            >\n            </bb-input-text-ui>\n          </ng-template>\n        </div>\n        <div\n          class=\"col-md-6 form-group\"\n          data-role=\"country\"\n          *ngIf=\"!hideCountry\"\n        >\n          <ng-container *ngIf=\"countries?.length > 0; else countryText\">\n            <bb-dropdown-single-select-ui\n              label=\"Country\"\n              data-role=\"country\"\n              i18n-label=\"@@address-data.country.label\"\n              formControlName=\"country\"\n              placeholder=\"Select\"\n              i18n-placeholder=\"@@address-data.country.placeholder\"\n              [attr.aria-describedby]=\"countryEl?.id + '__error'\"\n              #countryEl\n            >\n              <bb-dropdown-single-select-option-ui\n                *ngFor=\"let option of countries\"\n                [value]=\"option.value\"\n                [label]=\"option.label\"\n              >\n              </bb-dropdown-single-select-option-ui>\n            </bb-dropdown-single-select-ui>\n            <bb-input-validation-message-ui\n              [attr.id]=\"countryEl?.id + '__error'\"\n              *ngIf=\"addressForm.controls['country'] as formControl\"\n              [showErrors]=\"formControl?.touched && formControl?.invalid\"\n              (focusout)=\"onFocusout()\"\n            >\n              <span i18n=\"@@address-data.country.requiredError\"\n                >Country is required.</span\n              >\n            </bb-input-validation-message-ui>\n          </ng-container>\n          <ng-template #countryText>\n            <bb-input-text-ui\n              label=\"Country\"\n              i18n-label=\"@@address-data.country.label\"\n              formControlName=\"country\"\n              [attr.aria-describedby]=\"countryTextEl?.id + '__error'\"\n              #countryTextEl\n            >\n            </bb-input-text-ui>\n            <bb-input-validation-message-ui\n              [attr.id]=\"countryTextEl?.id + '__error'\"\n              *ngIf=\"addressForm.controls['country'] as formControl\"\n              [showErrors]=\"formControl?.touched && formControl?.invalid\"\n              (focusout)=\"onFocusout()\"\n            >\n              <span i18n=\"@@address-data.country.requiredError\"\n                >Country is required.</span\n              >\n            </bb-input-validation-message-ui>\n          </ng-template>\n        </div>\n        <div class=\"col-md-6 form-group\" *ngIf=\"hideCountry\">\n          <div class=\"bb-label\" i18n=\"@@address-data.country-readonly.label\">\n            Country\n          </div>\n          <div class=\"form-control disabled bg-light\">\n            <bb-country-name\n              *ngIf=\"this.addressForm.get('country')?.value as countryCode\"\n              [countryCode]=\"countryCode\"\n            ></bb-country-name>\n          </div>\n        </div>\n      </div>\n    </fieldSet>\n    <div class=\"address__btn-container bb-button-bar bb-button-bar--reverse\">\n      <button\n        class=\"address__confirm-btn bb-button-bar__button\"\n        bbButton\n        buttonSize=\"sm\"\n        color=\"primary\"\n        data-role=\"confirm-address\"\n        (click)=\"submitAddress()\"\n      >\n        <ng-container i18n=\"@@address-data.submitAddressBtn.label\"\n          >Confirm address</ng-container\n        >\n      </button>\n      <button\n        class=\"address__cancel-btn bb-button-bar__button\"\n        bbButton\n        buttonSize=\"sm\"\n        color=\"link\"\n        (click)=\"discardAddress()\"\n      >\n        <ng-container i18n=\"@@address-data.discardAddressBtn.label\"\n          >Discard</ng-container\n        >\n      </button>\n    </div>\n  </div>\n</div>\n\n<ng-template #addressTitle>\n  <ng-container i18n=\"@@address-data.addressType.label\">\n    { addressType, select, beneficiary {Beneficiary} client {Client} beneficiary\n    bank {Beneficiary Bank} correspondent bank {Correspondent Bank} intermediary\n    bank {Intermediary Bank} client bank {Client Bank} }\n  </ng-container>\n  <ng-container i18n=\"@@address-data.contactaddress.card.label\">\n    address\n  </ng-container>\n</ng-template>\n", components: [{ type: i1__namespace.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: FullAddressComponent, selector: "bb-full-address", inputs: ["address"] }, { type: i3__namespace.InputTextComponent, selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i4__namespace.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i3__namespace$1.DropdownSingleSelectComponent, selector: "bb-dropdown-single-select-ui", inputs: ["placeholder", "defaultOptionAsPlaceholder", "options", "displayAttributePath", "iconName", "compareWithFn"] }, { type: i3__namespace$1.DropdownSingleSelectOptionComponent, selector: "bb-dropdown-single-select-option-ui", inputs: ["value", "label"] }, { type: CountryNameComponent, selector: "bb-country-name", inputs: ["countryCode"] }], directives: [{ type: i7__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i2__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i9__namespace.TooltipDirective, selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i1__namespace$1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1__namespace$1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1__namespace$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$1.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i2__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "lowercase": i2__namespace.LowerCasePipe, "titlecase": i2__namespace.TitleCasePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AddressDetailsComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-address-item-details',
                        templateUrl: './address-details.component.html',
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; }, propDecorators: { addressForm: [{
                    type: i0.Input
                }], addressType: [{
                    type: i0.Input
                }], address: [{
                    type: i0.Input
                }], isContactAddressCopied: [{
                    type: i0.Input
                }], states: [{
                    type: i0.Input
                }], countries: [{
                    type: i0.Input
                }], hideCountry: [{
                    type: i0.Input
                }], viewType: [{
                    type: i0.Input
                }], isClosedPayment: [{
                    type: i0.Input
                }], submit: [{
                    type: i0.Output
                }], reset: [{
                    type: i0.Output
                }], discard: [{
                    type: i0.Output
                }], delete: [{
                    type: i0.Output
                }], edit: [{
                    type: i0.Output
                }], add: [{
                    type: i0.Output
                }] } });

    var FlagIconComponent = /** @class */ (function () {
        function FlagIconComponent() {
            /**
             * Size of flag icon. Possible values sm | md | lg. Defaults to md.
             */
            this.flagSize = 'md';
        }
        Object.defineProperty(FlagIconComponent.prototype, "countryCode", {
            /**
             * Iso code of the country
             */
            set: function (code) {
                this.code = code ? code.toLowerCase() : '';
            },
            enumerable: false,
            configurable: true
        });
        return FlagIconComponent;
    }());
    /** @nocollapse */ FlagIconComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FlagIconComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ FlagIconComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FlagIconComponent, selector: "bb-flag-icon", inputs: { flagSize: "flagSize", countryCode: "countryCode" }, ngImport: i0__namespace, template: "\n    <span\n      *ngIf=\"code\"\n      class=\"flag-icon flag-icon-background flag-icon-{{ code }} flag-icon--{{\n        flagSize\n      }}\"\n    ></span>\n  ", isInline: true, directives: [{ type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FlagIconComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-flag-icon',
                        template: "\n    <span\n      *ngIf=\"code\"\n      class=\"flag-icon flag-icon-background flag-icon-{{ code }} flag-icon--{{\n        flagSize\n      }}\"\n    ></span>\n  ",
                    }]
            }], propDecorators: { flagSize: [{
                    type: i0.Input
                }], countryCode: [{
                    type: i0.Input
                }] } });

    var CurrencySelectorComponent = /** @class */ (function () {
        function CurrencySelectorComponent() {
            this.isDisabled = false;
            this.search = new i1$1.FormControl();
            this.filteredCurrencies = [];
            this.currencyToCountryMap = CurrencyToCountryMap;
            this.currenciesMap = CurrenciesMap;
            this.change = new i0.EventEmitter();
            /**
             * Flag to determine component config
             */
            this.config = {};
            /**
             * Selected currency output
             */
            this.selectCurrency = new i0.EventEmitter();
        }
        Object.defineProperty(CurrencySelectorComponent.prototype, "currencies", {
            /**
             * List of currencies setter
             */
            set: function (currencies) {
                this._currencies = currencies || [];
                this.setupCurrencies();
            },
            enumerable: false,
            configurable: true
        });
        CurrencySelectorComponent.prototype.setupCurrencies = function () {
            var _this = this;
            this.currencyEntries = this._currencies.map(function (currency) { return [
                currency,
                _this.currenciesMap[currency] ? _this.currenciesMap[currency].name : '',
            ]; });
            this.filteredCurrencies = __spreadArray([], __read(this._currencies));
            this.selectedCurrency = this.selectedCurrency || this._currencies[0];
            if (this._currencies.length < 2) {
                this.isDisabled = true;
            }
        };
        CurrencySelectorComponent.prototype.selectItem = function (currency) {
            this.selectedCurrency = currency;
            this.selectCurrency.emit(currency);
            this.onChange(currency);
            this.value = currency;
        };
        CurrencySelectorComponent.prototype.handleSearch = function (query) {
            if (query === void 0) { query = ''; }
            if (query) {
                this.filteredCurrencies = this.currencyEntries.reduce(function (acc, _a) {
                    var _b = __read(_a, 2), currency = _b[0], currName = _b[1];
                    if (currency.toLocaleLowerCase().indexOf(query.toLocaleLowerCase()) >
                        -1 ||
                        currName.toLocaleLowerCase().indexOf(query.toLocaleLowerCase()) > -1) {
                        acc.push(currency);
                    }
                    return acc;
                }, []);
            }
            else {
                this.filteredCurrencies = this._currencies;
            }
        };
        CurrencySelectorComponent.prototype.onChange = function (_value) { };
        CurrencySelectorComponent.prototype.onTouched = function () { };
        CurrencySelectorComponent.prototype.registerOnChange = function (fn) {
            this.onChange = fn;
        };
        CurrencySelectorComponent.prototype.registerOnTouched = function (fn) {
            this.onTouched = fn;
        };
        CurrencySelectorComponent.prototype.writeValue = function (value) {
            if (value) {
                this.selectedCurrency = value;
            }
            this.value = value;
        };
        CurrencySelectorComponent.prototype.ngOnInit = function () {
            this.showFlags = this.config.showFlags || false;
            this.showName = this.config.showName || false;
            this.isSearchable = this.config.isSearchable || false;
            this.dividerIndex = this.config.dividerIndex;
            this.searchPlaceholder = this.config.searchPlaceholder || '';
            this.dropdownIcon = this.config.dropdownIcon || 'toggle-down';
        };
        return CurrencySelectorComponent;
    }());
    /** @nocollapse */ CurrencySelectorComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CurrencySelectorComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ CurrencySelectorComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: CurrencySelectorComponent, selector: "bb-currency-selector", inputs: { currencies: "currencies", config: "config", ariaLabelledby: ["aria-labelledby", "ariaLabelledby"] }, outputs: { selectCurrency: "selectCurrency" }, providers: [
            {
                provide: i1$1.NG_VALUE_ACCESSOR,
                multi: true,
                useExisting: i0.forwardRef((function () { return CurrencySelectorComponent; })),
            },
        ], ngImport: i0__namespace, template: "<div\n  class=\"d-inline-block\"\n  ngbDropdown\n  #dropdown=\"ngbDropdown\"\n  display=\"static\"\n>\n  <div>\n    <button\n      bbButton\n      ngbDropdownToggle\n      color=\"unstyled\"\n      (blur)=\"onTouched()\"\n      [disabled]=\"isDisabled\"\n      [attr.aria-labelledby]=\"ariaLabelledby\"\n      data-role=\"open-currency-dropdown-list-button\"\n      class=\"bb-currency-selector__toggle form-control d-flex justify-content-between bb-text-support\"\n    >\n      <ng-container *ngIf=\"selectedCurrency\">\n        <ng-container\n          *ngTemplateOutlet=\"\n            currencyTmpl;\n            context: { code: selectedCurrency, selected: true }\n          \"\n        ></ng-container>\n      </ng-container>\n      <bb-icon-ui [name]=\"dropdownIcon\"></bb-icon-ui>\n    </button>\n  </div>\n\n  <div\n    ngbDropdownMenu\n    class=\"dropdown-menu\"\n    [ngClass]=\"{ 'bb-currency-selector__dropdown': isSearchable }\"\n  >\n    <div *ngIf=\"isSearchable\" class=\"bb-block bb-block--md px-3\">\n      <bb-search-box-ui\n        (focus)=\"dropdown.open()\"\n        [formControl]=\"search\"\n        (clear)=\"handleSearch('')\"\n        data-role=\"currency-search\"\n        (ngModelChange)=\"handleSearch(search.value)\"\n        [placeholder]=\"searchPlaceholder || 'Search'\"\n        [attr.aria-label]=\"searchPlaceholder || 'Search'\"\n        [showSearch]=\"true\"\n        [showClear]=\"true\"\n        [autocomplete]=\"'off'\"\n      ></bb-search-box-ui>\n    </div>\n\n    <bb-payments-sr-search-result-info\n      [totalNumber]=\"filteredCurrencies?.length || 0\"\n    >\n    </bb-payments-sr-search-result-info>\n\n    <div *ngIf=\"filteredCurrencies?.length\" class=\"pre-scrollable\">\n      <ng-container *ngFor=\"let currency of filteredCurrencies; index as i\">\n        <button\n          role=\"menuitem\"\n          data-role=\"currency-item\"\n          type=\"button\"\n          class=\"d-sm-flex px-3 py-2 d-flex-row align-items-center btn--unstyled\"\n          (bbKeyboardClick)=\"selectItem(currency); dropdown.close()\"\n          ngbDropdownItem\n        >\n          <ng-container\n            *ngTemplateOutlet=\"currencyTmpl; context: { code: currency }\"\n          ></ng-container>\n        </button>\n        <hr *ngIf=\"dividerIndex === i\" />\n      </ng-container>\n    </div>\n    <ng-container *ngIf=\"!filteredCurrencies?.length && search?.value\">\n      <ng-container *ngTemplateOutlet=\"emptySearch\"></ng-container>\n    </ng-container>\n  </div>\n</div>\n\n<ng-template let-code=\"code\" let-selected=\"selected\" #currencyTmpl>\n  <div class=\"d-flex align-items-center\" data-role=\"selected-currency\">\n    <bb-flag-icon\n      *ngIf=\"showFlags\"\n      class=\"mr-2 d-flex\"\n      [countryCode]=\"currencyToCountryMap[code]\"\n      [flagSize]=\"'sm'\"\n      data-role=\"flag-icon\"\n    ></bb-flag-icon>\n    {{ code }}\n    <span\n      *ngIf=\"showName && !selected\"\n      class=\"d-inline-block ml-3 bb-text-support\"\n      >{{ currenciesMap[code] && currenciesMap[code].name }}</span\n    >\n  </div>\n</ng-template>\n\n<ng-template #emptySearch>\n  <div class=\"card-body\">\n    <bb-empty-state-ui\n      data-role=\"no-templates-found\"\n      title=\"No search results\"\n      iconSize=\"xl\"\n      i18n-title=\"@@bb-currency-selector.empty-state-title\"\n      iconModifier=\"search\"\n      [showIcon]=\"false\"\n    ></bb-empty-state-ui>\n  </div>\n</ng-template>\n", components: [{ type: i1__namespace.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i2__namespace$1.SearchBoxComponent, selector: "bb-search-box-ui", inputs: ["placeholder", "maxLength", "squareBorder", "typeaheadOptions", "showSearch", "showClear", "searchLabel", "clearLabel", "autocomplete"], outputs: ["submit", "clear", "valueChange"] }, { type: PaymentsSrSearchResultInfoComponent, selector: "bb-payments-sr-search-result-info", inputs: ["totalNumber"] }, { type: FlagIconComponent, selector: "bb-flag-icon", inputs: ["flagSize", "countryCode"] }, { type: i5__namespace.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i6__namespace.NgbDropdown, selector: "[ngbDropdown]", inputs: ["open", "placement", "container", "autoClose", "display", "dropdownClass"], outputs: ["openChange"], exportAs: ["ngbDropdown"] }, { type: i7__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i6__namespace.NgbDropdownToggle, selector: "[ngbDropdownToggle]" }, { type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i6__namespace.NgbDropdownMenu, selector: "[ngbDropdownMenu]" }, { type: i2__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i1__namespace$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$1.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i2__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i6__namespace.NgbDropdownItem, selector: "[ngbDropdownItem]", inputs: ["disabled"] }, { type: i10__namespace.KeyboardClickDirective, selector: "[bbKeyboardClick]", outputs: ["bbKeyboardClick"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CurrencySelectorComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-currency-selector',
                        templateUrl: './currency-selector.component.html',
                        providers: [
                            {
                                provide: i1$1.NG_VALUE_ACCESSOR,
                                multi: true,
                                useExisting: i0.forwardRef((function () { return CurrencySelectorComponent; })),
                            },
                        ],
                    }]
            }], propDecorators: { currencies: [{
                    type: i0.Input
                }], config: [{
                    type: i0.Input
                }], ariaLabelledby: [{
                    type: i0.Input,
                    args: ['aria-labelledby']
                }], selectCurrency: [{
                    type: i0.Output
                }] } });

    /**
     * Convert a list of ID references for `aria-` attributes to an attribute value
     */
    var idListAttr = function () {
        var tokens = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            tokens[_i] = arguments[_i];
        }
        return tokens.filter(Boolean).join(' ').toString();
    };
    var _nextId = 0;
    function getInputNextId() {
        return "bb_input_" + _nextId++;
    }

    /**
     * Utility service for DOM manipulations
     */
    var DomAttributesService = /** @class */ (function () {
        function DomAttributesService() {
            this.idPrefix = 'bb_element_';
        }
        DomAttributesService.prototype.generateId = function () {
            return "" + this.idPrefix + DomAttributesService.nextId++;
        };
        return DomAttributesService;
    }());
    DomAttributesService.nextId = 0;
    /** @nocollapse */ DomAttributesService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DomAttributesService, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ DomAttributesService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DomAttributesService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DomAttributesService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }] });

    var defaultIntLength = 13;
    var defaultDecimalPrecision = 2;
    /**
     * @name CurrencyInputComponent
     *
     * @a11y Current component provide option to pass needed accessibility
     * attributes. You need to take care of properties that are required in your case :
     *  - aria-describedby
     *  - aria-invalid
     *  - aria-labelledby
     *  - integerLabelSrOnly
     *  - decimalLabelSrOnly
     * @description
     * Component for displaying and managing currency and it amount
     *
     */
    var CurrencyAmountSelectorComponent = /** @class */ (function () {
        function CurrencyAmountSelectorComponent(el, locale, domAttributeService, parentFormControl) {
            this.el = el;
            this.locale = locale;
            this.domAttributeService = domAttributeService;
            this.parentFormControl = parentFormControl;
            this.currencyList = [];
            this.currencyDisabledState = {
                currency: false,
                integer: false,
                decimal: false,
            };
            this.decimalSeparator = i2.getLocaleNumberSymbol(this.locale, i2.NumberSymbol.CurrencyDecimal);
            /**
             * Number of minimum currency precision. Defaults to 2.
             */
            this.decMinLen = defaultDecimalPrecision;
            this.currControl = new i1$1.FormControl();
            this.intControl = new i1$1.FormControl();
            this.decControl = new i1$1.FormControl();
            /**
             * The placeholder for the input. Defaults to 0.
             */
            this.placeholder = '0';
            /**
             * For set output type string/number, by default 'number', when  need work with long number
             * ( bigger than MAX_SAFE_INTEGER = 9,007,199,254,740,993 ) need to use 'string'
             */
            this.resultType = 'number';
            /**
             * Whether there should be only the integer part.
             * You have to keep in mind, that if you have decimal part, even ".00"
             * you will not be able to remove it
             */
            this.integer = false;
            /**
             * Whether the input is required. Defaults to false.
             */
            this.required = false;
            /**
             * Whether the input is read only. Defaults to false.
             */
            this.readonly = false;
            /**
             * Whether integer label is only visible for screen readers.
             * By default is visible if it is needed to hide change this property
             * to "true" and it will have class "sr-only"
             */
            this.integerLabelSrOnly = false;
            /**
             * By default is visible if it is needed to hide change this property
             * to "true" and it will have class "sr-only"
             * By default is hidden and accessible only for screen reader
             */
            this.decimalLabelSrOnly = false;
            /**
             * Flag that denotes if the currency selector is extended. Defaults to false.
             */
            this.currencySelectorExtended = false;
            /**
             * The currency selector config map.
             */
            this.currencySelectorConfig = {};
            /**
             * Whether decimal text is aligned to the right.
             * By default is false
             */
            this.isRightAligned = false;
            this._integerId = getInputNextId();
            this._decimalId = getInputNextId();
            this.idListAttr = idListAttr;
            this.initialized = false;
            /**
             * The label for the integer input.
             */
            this.integerLabel = '';
            /**
             * The label for the decimal input.
             */
            this.decimalLabel = '';
            /**
             * The label for the currency input.
             */
            this.currencyLabel = '';
            /**
             * Flag is used to allow input negative value
             */
            this.allowNegativeValue = false;
            /**
             * Aria label for the currency dropdown.
             */
            this.currencyListAriaLabel = 'Currency List Dropdown';
            /**
             * Aria label for the currency list with one item.
             */
            this.currencyListWithOnItemAriaLabel = 'Currency';
            this.onChange = function (_) { };
            this.onTouched = function () { };
            this.currencyInputId = this.domAttributeService.generateId();
            this.currencyLabelId = this.domAttributeService.generateId();
            this.decimalInputId = this.domAttributeService.generateId();
            this.decimalLabelId = this.domAttributeService.generateId();
            this.integerInputId = this.domAttributeService.generateId();
            this.integerLabelId = this.domAttributeService.generateId();
            this.validationMessagesId = this.domAttributeService.generateId();
            BigNumber__default["default"].config({
                FORMAT: {
                    // grouping separator of the integer part
                    groupSeparator: ',',
                    // primary grouping size of the integer part
                    groupSize: 3,
                },
            });
            if (this.parentFormControl != null) {
                // Setting the value accessor directly (instead of using
                // the providers) to avoid running into a circular import.
                this.parentFormControl.valueAccessor = this;
            }
        }
        Object.defineProperty(CurrencyAmountSelectorComponent.prototype, "decMaxLen", {
            /**
             * Configure the maximum number of decimals.
             *
             * When greater than the default number of decimals for the specified currency, this value will take precedence.
             * Configuring this value can affect the input placeholder.
             */
            get: function () {
                return typeof this._decMaxLen === 'number'
                    ? this._decMaxLen
                    : this.getDecimalDigits(this.currency || '');
            },
            set: function (value) {
                this._decMaxLen = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CurrencyAmountSelectorComponent.prototype, "decPlaceholder", {
            /**
             * Non-configurable placeholder for the decimal input.
             * Displays a zero digit for every digit that is allowed in the decimal field.
             */
            get: function () {
                return '0'.repeat(this.decMaxLen || 0);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CurrencyAmountSelectorComponent.prototype, "disabled", {
            get: function () {
                return this.currencyDisabledState;
            },
            /**
             * Whether the input is disabled. Defaults to false.
             */
            set: function (disabled) {
                if (typeof disabled === 'boolean') {
                    this.currencyDisabledState = {
                        currency: disabled,
                        integer: disabled,
                        decimal: disabled,
                    };
                }
                else {
                    this.currencyDisabledState = disabled;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CurrencyAmountSelectorComponent.prototype, "currencies", {
            /**
             * Currency list to be displayed in the dropdown.
             *
             * Note: Non-empty currency list is required for the currency symbol
             * field to be shown. Otherwise, only the amount fields will be shown.
             *
             * Additionally, If only a single currency provided, the dropdown of
             * the currency selection will be disabled and its value set to that single currency
             */
            set: function (list) {
                this.currencyList = list;
                if (this.currencyList && this.currencyList.length > 1) {
                    this.currControl.enable();
                }
                else {
                    this.currControl.disable();
                }
                // if currency is not set, use first item from the list
                if (this.currencyList &&
                    (this.currency === undefined ||
                        this.currencyList.indexOf(this.currency) === -1)) {
                    // [FIXME] Nothing guarantees that the currencyList isn't empty
                    this.updateCurrency(this.currencyList[0]);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CurrencyAmountSelectorComponent.prototype, "integerId", {
            get: function () {
                return this._integerId;
            },
            /**
             * The id for the integer input. Defaults to unique string.
             * Used to map the label to the input.
             */
            set: function (value) {
                this._integerId = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CurrencyAmountSelectorComponent.prototype, "decimalId", {
            get: function () {
                return this._decimalId;
            },
            /**
             * The id for the decimal input. Defaults to unique string.
             * Used to map the label to the input.
             */
            set: function (value) {
                this._decimalId = value;
            },
            enumerable: false,
            configurable: true
        });
        CurrencyAmountSelectorComponent.prototype.ngOnInit = function () {
            this.initialized = true;
            if (!this.integerLabel || !this.decimalLabel) {
                console.warn("Found an input from '" + this.constructor.name + "' without 'label' or 'aria-label' attribute, please provide one of them");
            }
            this.setDisabled(this.currencyDisabledState);
            this.formatInteger();
            console.warn("The default value of \"decMinLen\" will be undefined from version 6 of ui-ang.       If you would like to keep the current functionality (to force a minimum of 2 decimals),       please set the decMinLen property to 2.");
        };
        CurrencyAmountSelectorComponent.prototype.ngOnChanges = function (changes) {
            if (changes.disabled) {
                this.setDisabled(this.currencyDisabledState);
            }
        };
        Object.defineProperty(CurrencyAmountSelectorComponent.prototype, "cur", {
            get: function () {
                return this.currency;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CurrencyAmountSelectorComponent.prototype, "curList", {
            get: function () {
                return this.currencyList;
            },
            enumerable: false,
            configurable: true
        });
        CurrencyAmountSelectorComponent.prototype.ngAfterViewInit = function () {
            var len = this.el.nativeElement.getAttribute('maxlength');
            this.intMaxLen = len ? parseInt(len, 10) : defaultIntLength;
        };
        CurrencyAmountSelectorComponent.prototype.onPress = function ($event) {
            this.focusDecEl($event.key);
            var keyCode = $event.keyCode || $event.which;
            var key = String.fromCharCode(keyCode);
            // allow to enter 'minus' only at the first position and if correspondent flag is enabled
            var isLeadingMinusPosition = this.allowNegativeValue &&
                this.intEl &&
                this.intEl.nativeElement.selectionStart === 0 &&
                key === '-';
            // regexp is used here to support both of regular keyboard's numbers and numpad's numbers
            if (!(isLeadingMinusPosition || /^\d$/.test(key)) &&
                $event.keyCode !== 8 &&
                $event.keyCode !== 9) {
                $event.preventDefault();
            }
        };
        CurrencyAmountSelectorComponent.prototype.onInput = function () {
            var isFormatted = this.formatInteger();
            if (isFormatted) {
                this.triggerChange();
            }
        };
        CurrencyAmountSelectorComponent.prototype.updateCurrency = function (currency) {
            this.currency = currency || this.currControl.value;
            this.triggerChange();
        };
        CurrencyAmountSelectorComponent.prototype.checkValues = function () {
            if (this.currency === undefined) {
                return true;
            }
            if (!this.decControl.value && !this.intControl.value) {
                this.onChange({
                    currency: this.currency,
                    amount: '',
                });
                return true;
            }
            return false;
        };
        CurrencyAmountSelectorComponent.prototype.formatDecimal = function (decControl) {
            var value = decControl.value;
            if (value && this.decMaxLen && value.lenght < this.decMaxLen) {
                var updatedValue = String(value).padEnd(this.decMaxLen, '0');
                decControl.patchValue(updatedValue);
            }
        };
        CurrencyAmountSelectorComponent.prototype.triggerChange = function () {
            if (this.checkValues()) {
                return;
            }
            var int = this.intControl.value || '0';
            if (this.resultType === 'string') {
                var whole = int.replace(/,/g, '');
                var dec = this.decControl.value || '0';
                var newAmount = whole + (dec !== '0' ? '.' + dec : '');
                this.onChange({
                    currency: this.currency,
                    amount: newAmount,
                });
            }
            else {
                var whole = parseInt(int.replace(/[^-\d]/g, ''), 10);
                var dec = parseFloat('0.' + this.decControl.value) || 0;
                var sign = whole < 0 ? -1 : 1;
                var newAmount = (Math.abs(whole) + dec) * sign;
                this.onChange({
                    currency: this.currency,
                    amount: newAmount,
                });
            }
        };
        CurrencyAmountSelectorComponent.prototype.checkNumeric = function (numeric) {
            // removed all dashes except the first one
            if (numeric.length > 0) {
                numeric = numeric[0] + numeric.slice(1).replace(/-/g, '');
            }
            numeric = this.sanitizeNumericValue(numeric);
            return numeric === '' ? numeric : new BigNumber__default["default"](numeric || 0).toFormat();
        };
        /**
         * Formats integer to user-friendly format
         *
         * @returns Returns true in case of successful formatting, otherwise - false.
         */
        CurrencyAmountSelectorComponent.prototype.formatInteger = function () {
            // The behavior of `formatInteger` is dependent on some component inputs,
            // so don't format anything until the configuration is available.
            if (!this.initialized || !this.intEl) {
                return false;
            }
            if (!this.intControl.value) {
                this.intControl.setValue('');
                return true;
            }
            var offset = this.intEl.nativeElement.selectionStart - this.intControl.value.length;
            var numeric = this.intControl.value.replace(this.allowNegativeValue ? /[^-\d]/g : /\D/g, '');
            if (numeric === '-') {
                this.intControl.setValue('-', { emitEvent: false });
                return false;
            }
            var newVal = this.checkNumeric(numeric);
            // extend maxlength (if set) with the amount of special chars
            if (this.intMaxLen) {
                var specialCount = newVal.replace(/\d/g, '').length;
                this.intEl.nativeElement.setAttribute('maxlength', '' + (this.intMaxLen + specialCount));
            }
            this.intControl.setValue(newVal);
            var newLen = this.intControl.value.length;
            var newPos = Math.max(offset + newLen, 0);
            if (newLen > 0 && document.activeElement === this.intEl.nativeElement) {
                this.intEl.nativeElement.selectionStart = newPos;
                this.intEl.nativeElement.selectionEnd = newPos;
            }
            return true;
        };
        /**
         * Event handler for backspace key press, and check if correct number is deleted
         */
        CurrencyAmountSelectorComponent.prototype.onBackspace = function (el) {
            if (el.selectionStart &&
                (el.value[el.selectionStart - 1] === ',' ||
                    el.value[el.selectionStart - 1] === '.')) {
                el.setSelectionRange(el.selectionStart - 1, el.selectionStart - 1);
            }
        };
        // method is used to correct rendered input's value if user entered '-' and left the field
        CurrencyAmountSelectorComponent.prototype.correctInputValue = function () {
            this.markAsTouched();
            var numeric = this.intControl.value;
            if (numeric !== '-') {
                return;
            }
            this.intControl.setValue('', { emitEvent: false });
        };
        CurrencyAmountSelectorComponent.prototype.writeValue = function (model) {
            if (!model) {
                return;
            }
            // currency cannot be set to nothing
            if (model.currency) {
                this.currency = model.currency;
                this.currControl.setValue(model.currency);
            }
            if (typeof model.amount === 'string' || typeof model.amount === 'number') {
                var _a = __read(('' + model.amount).split('.'), 2), whole = _a[0], decimals = _a[1];
                this.intControl.setValue(whole);
                this.decControl.setValue(decimals);
            }
            else {
                this.intControl.setValue('');
                this.decControl.setValue('');
            }
            this.formatInteger();
        };
        CurrencyAmountSelectorComponent.prototype.registerOnChange = function (fn) {
            this.onChange = fn;
        };
        CurrencyAmountSelectorComponent.prototype.registerOnTouched = function (fn) {
            this.onTouched = fn;
        };
        CurrencyAmountSelectorComponent.prototype.markAsTouched = function () {
            this.onTouched();
        };
        CurrencyAmountSelectorComponent.prototype.setDisabled = function (disableState) {
            disableState.currency
                ? this.currControl.disable()
                : this.currControl.enable();
            disableState.integer ? this.intControl.disable() : this.intControl.enable();
            disableState.decimal ? this.decControl.disable() : this.decControl.enable();
        };
        CurrencyAmountSelectorComponent.prototype.focusDecEl = function (key) {
            if (this.decEl && ['.', ','].indexOf(key) !== -1) {
                this.decEl.nativeElement.focus();
            }
        };
        /**
         * Make sure that numeric value doesn't exceed max length (if set)
         * this might happen in case value is pasted to input that has extended max length
         *
         * @param numeric
         */
        CurrencyAmountSelectorComponent.prototype.sanitizeNumericValue = function (numeric) {
            if (this.intMaxLen && numeric) {
                return numeric.slice(0, this.intMaxLen);
            }
            return numeric;
        };
        /**
         * If currency doesn't have decimal part, decimal placeholder
         * will be set to default decMinLen
         */
        CurrencyAmountSelectorComponent.prototype.getDecimalDigits = function (currency) {
            return i2.getNumberOfCurrencyDigits(currency) === 0
                ? this.decMinLen
                : i2.getNumberOfCurrencyDigits(currency);
        };
        return CurrencyAmountSelectorComponent;
    }());
    /** @nocollapse */ CurrencyAmountSelectorComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CurrencyAmountSelectorComponent, deps: [{ token: i0__namespace.ElementRef }, { token: i0.LOCALE_ID }, { token: DomAttributesService }, { token: i1__namespace$1.NgControl, optional: true, self: true }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ CurrencyAmountSelectorComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: CurrencyAmountSelectorComponent, selector: "bb-currency-amount-selector", inputs: { decMaxLen: "decMaxLen", decMinLen: "decMinLen", placeholder: "placeholder", resultType: "resultType", integer: "integer", required: "required", readonly: "readonly", disabled: "disabled", integerLabelSrOnly: "integerLabelSrOnly", decimalLabelSrOnly: "decimalLabelSrOnly", currencies: "currencies", currencySelectorExtended: "currencySelectorExtended", currencySelectorConfig: "currencySelectorConfig", isRightAligned: "isRightAligned", integerId: "integerId", decimalId: "decimalId", integerLabel: "integerLabel", decimalLabel: "decimalLabel", currencyLabel: "currencyLabel", labelClasses: "labelClasses", allowNegativeValue: "allowNegativeValue", currencyListAriaLabel: "currencyListAriaLabel", currencyListWithOnItemAriaLabel: "currencyListWithOnItemAriaLabel", ariaDescribedby: ["aria-describedby", "ariaDescribedby"], ariaLabelledby: ["aria-labelledby", "ariaLabelledby"], ariaInvalid: ["aria-invalid", "ariaInvalid"] }, providers: [i2.DecimalPipe], viewQueries: [{ propertyName: "intEl", first: true, predicate: ["integerInput"], descendants: true, static: true }, { propertyName: "decEl", first: true, predicate: ["decimalsInput"], descendants: true, static: true }], usesOnChanges: true, ngImport: i0__namespace, template: "<div class=\"bb-currency-input\">\n  <div class=\"bb-stack bb-stack--align-bottom\">\n    <div\n      *ngIf=\"curList && curList.length\"\n      class=\"bb-currency-input__currency-selector selector bb-stack__item\"\n    >\n      <label\n        class=\"sr-only\"\n        *ngIf=\"currencyListAriaLabel || currencyListWithOnItemAriaLabel\"\n        [ngClass]=\"labelClasses\"\n        [for]=\"currencyInputId\"\n        [attr.aria-label]=\"currencyListWithOnItemAriaLabel\"\n        id=\"{{ currencyLabelId }}\"\n        [attr.data-role]=\"'currency-input-label'\"\n      >\n        <ng-container\n          [ngSwitch]=\"\n            !!currencyListAriaLabel || !!currencyListWithOnItemAriaLabel\n          \"\n        >\n          <ng-container *ngSwitchCase=\"true\">\n            {{\n              curList && curList.length > 1\n                ? currencyListAriaLabel\n                : currencyListWithOnItemAriaLabel\n            }}\n          </ng-container>\n          <ng-container\n            *ngSwitchDefault\n            i18n=\"\n              Currency label | Label for currency code dropdown of the Currency\n              Input component\n              @@bb-currency-input-ui-wrapper-wrapper.currency-input-label\"\n            >Currency</ng-container\n          >\n        </ng-container>\n      </label>\n      <ng-container\n        *ngIf=\"!currencySelectorExtended\"\n        [ngSwitch]=\"readonly || (curList && curList.length === 1)\"\n      >\n        <input\n          *ngSwitchCase=\"true\"\n          [id]=\"currencyInputId\"\n          [readonly]=\"true\"\n          [required]=\"required\"\n          [attr.aria-invalid]=\"ariaInvalid\"\n          [attr.aria-labelledby]=\"idListAttr(ariaLabelledby, currencyLabelId)\"\n          class=\"form-control bb-text-align-center\"\n          value=\"{{ cur }}\"\n          [attr.data-role]=\"'currency-input-currency-readonly'\"\n        />\n        <bb-dropdown-single-select-ui\n          *ngSwitchDefault\n          [id]=\"currencyInputId\"\n          class=\"bb-block\"\n          [placeholder]=\"curList[0]\"\n          [options]=\"curList\"\n          [readonly]=\"readonly\"\n          [required]=\"required\"\n          [aria-invalid]=\"ariaInvalid\"\n          [aria-labelledby]=\"idListAttr(ariaLabelledby, currencyLabelId)\"\n          (change)=\"updateCurrency(); markAsTouched()\"\n          [formControl]=\"currControl\"\n          [attr.data-role]=\"'currency-input-currency-selector'\"\n        ></bb-dropdown-single-select-ui>\n      </ng-container>\n      <ng-container *ngIf=\"currencySelectorExtended\">\n        <bb-currency-selector\n          [aria-labelledby]=\"idListAttr(ariaLabelledby, currencyLabelId)\"\n          [formControl]=\"currControl\"\n          [currencies]=\"curList\"\n          [config]=\"currencySelectorConfig\"\n          (selectCurrency)=\"updateCurrency($event)\"\n        ></bb-currency-selector>\n      </ng-container>\n    </div>\n    <!-- htmllint label-req-for=\"false\" -->\n    <div\n      class=\"bb-currency-input__integer bb-stack__item bb-stack__item--spacing-sm\"\n      [class.ng-touched]=\"\n        intControl.touched || decControl.touched || parentFormControl?.touched\n      \"\n      [class.ng-invalid]=\"intControl.invalid || parentFormControl?.invalid\"\n    >\n      <label\n        [class.sr-only]=\"!integerLabel || integerLabelSrOnly\"\n        [ngClass]=\"labelClasses\"\n        for=\"{{ integerInputId }}\"\n        id=\"{{ integerLabelId }}\"\n        [attr.data-role]=\"'currency-input-integer-label'\"\n      >\n        <ng-container [ngSwitch]=\"!!integerLabel\">\n          <ng-container *ngSwitchCase=\"true\">\n            {{ integerLabel }}\n          </ng-container>\n          <ng-container\n            *ngSwitchDefault\n            i18n=\"\n              Integer label | Label for integer part of the monetary amount of\n              the Currency Input component\n              @@bb-currency-input-ui-wrapper-wrapper.integer-input-label\"\n            >Integer</ng-container\n          >\n        </ng-container>\n      </label>\n      <input\n        id=\"{{ integerInputId }}\"\n        [attr.aria-describedby]=\"\n          idListAttr(ariaDescribedby, validationMessagesId)\n        \"\n        [attr.aria-invalid]=\"ariaInvalid\"\n        [attr.aria-labelledby]=\"idListAttr(ariaLabelledby, integerLabelId)\"\n        name=\"integer\"\n        type=\"text\"\n        size=\"5\"\n        role=\"textbox\"\n        [readOnly]=\"readonly\"\n        [required]=\"required\"\n        (keydown.backspace)=\"onBackspace(integerInput)\"\n        (keypress)=\"onPress($event)\"\n        (input)=\"onInput()\"\n        (blur)=\"correctInputValue()\"\n        [formControl]=\"intControl\"\n        class=\"form-control bb-text-align-right\"\n        placeholder=\"{{ placeholder }}\"\n        #integerInput\n        autocomplete=\"off\"\n        autocorrect=\"off\"\n        autocapitalize=\"off\"\n        spellcheck=\"false\"\n        [attr.data-role]=\"'currency-input-integer-input'\"\n      />\n    </div>\n\n    <span\n      *ngIf=\"!integer && decMaxLen\"\n      class=\"bb-stack__item bb-stack__item--spacing-sm\"\n      >{{ decimalSeparator }}</span\n    >\n\n    <div\n      *ngIf=\"!integer && decMaxLen\"\n      class=\"bb-currency-input__decimal\"\n      [class.ng-touched]=\"\n        intControl.touched || decControl.touched || parentFormControl?.touched\n      \"\n      [class.ng-invalid]=\"intControl.invalid || parentFormControl?.invalid\"\n    >\n      <label\n        [class.sr-only]=\"!decimalLabel || decimalLabelSrOnly\"\n        [ngClass]=\"labelClasses\"\n        for=\"{{ decimalInputId }}\"\n        id=\"{{ decimalLabelId }}\"\n        [attr.data-role]=\"'currency-input-decimal-label'\"\n      >\n        <ng-container [ngSwitch]=\"!!decimalLabel\">\n          <ng-container *ngSwitchCase=\"true\">\n            {{ decimalLabel }}\n          </ng-container>\n          <ng-container\n            *ngSwitchDefault\n            i18n=\"\n              Decimal label | Label for decimal part of the monetary amount of\n              the Currency Input component\n              @@bb-currency-input-ui-wrapper-wrapper.decimal-input-label\"\n          >\n            Decimals\n          </ng-container>\n        </ng-container>\n      </label>\n      <input\n        id=\"{{ decimalInputId }}\"\n        [attr.aria-describedby]=\"\n          idListAttr(ariaDescribedby, validationMessagesId)\n        \"\n        [attr.aria-invalid]=\"ariaInvalid\"\n        [attr.aria-labelledby]=\"idListAttr(ariaLabelledby, decimalLabelId)\"\n        name=\"decimals\"\n        type=\"text\"\n        role=\"textbox\"\n        [readOnly]=\"readonly\"\n        [required]=\"required\"\n        (keypress)=\"onPress($event)\"\n        (input)=\"triggerChange()\"\n        (blur)=\"markAsTouched(); formatDecimal(decControl)\"\n        [formControl]=\"decControl\"\n        class=\"form-control\"\n        [ngClass]=\"{ 'bb-text-align-right': isRightAligned }\"\n        maxlength=\"{{ decMaxLen }}\"\n        placeholder=\"{{ decPlaceholder }}\"\n        #decimalsInput\n        autocomplete=\"off\"\n        autocorrect=\"off\"\n        autocapitalize=\"off\"\n        spellcheck=\"false\"\n        [attr.data-role]=\"'input-currency-decimals'\"\n      />\n    </div>\n  </div>\n  <div\n    class=\"bb-input-validation-message\"\n    aria-live=\"assertive\"\n    [id]=\"validationMessagesId\"\n    [attr.data-role]=\"'currency-input-validation-message'\"\n  >\n    <ng-content select=\"[bbValidationMessage]\"></ng-content>\n  </div>\n</div>\n", components: [{ type: i3__namespace$1.DropdownSingleSelectComponent, selector: "bb-dropdown-single-select-ui", inputs: ["placeholder", "defaultOptionAsPlaceholder", "options", "displayAttributePath", "iconName", "compareWithFn"] }, { type: CurrencySelectorComponent, selector: "bb-currency-selector", inputs: ["currencies", "config", "aria-labelledby"], outputs: ["selectCurrency"] }], directives: [{ type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i2__namespace.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i2__namespace.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i2__namespace.NgSwitchDefault, selector: "[ngSwitchDefault]" }, { type: i1__namespace$1.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i1__namespace$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$1.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i1__namespace$1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i1__namespace$1.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CurrencyAmountSelectorComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-currency-amount-selector',
                        templateUrl: './currency-amount-selector.component.html',
                        providers: [i2.DecimalPipe],
                    }]
            }], ctorParameters: function () {
            return [{ type: i0__namespace.ElementRef }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [i0.LOCALE_ID]
                        }] }, { type: DomAttributesService }, { type: i1__namespace$1.NgControl, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Self
                        }] }];
        }, propDecorators: { decMaxLen: [{
                    type: i0.Input
                }], decMinLen: [{
                    type: i0.Input
                }], placeholder: [{
                    type: i0.Input
                }], resultType: [{
                    type: i0.Input
                }], integer: [{
                    type: i0.Input
                }], required: [{
                    type: i0.Input
                }], readonly: [{
                    type: i0.Input
                }], disabled: [{
                    type: i0.Input
                }], integerLabelSrOnly: [{
                    type: i0.Input
                }], decimalLabelSrOnly: [{
                    type: i0.Input
                }], currencies: [{
                    type: i0.Input
                }], currencySelectorExtended: [{
                    type: i0.Input
                }], currencySelectorConfig: [{
                    type: i0.Input
                }], isRightAligned: [{
                    type: i0.Input
                }], integerId: [{
                    type: i0.Input
                }], decimalId: [{
                    type: i0.Input
                }], integerLabel: [{
                    type: i0.Input
                }], decimalLabel: [{
                    type: i0.Input
                }], currencyLabel: [{
                    type: i0.Input
                }], labelClasses: [{
                    type: i0.Input
                }], allowNegativeValue: [{
                    type: i0.Input
                }], currencyListAriaLabel: [{
                    type: i0.Input
                }], currencyListWithOnItemAriaLabel: [{
                    type: i0.Input
                }], ariaDescribedby: [{
                    type: i0.Input,
                    args: ['aria-describedby']
                }], ariaLabelledby: [{
                    type: i0.Input,
                    args: ['aria-labelledby']
                }], ariaInvalid: [{
                    type: i0.Input,
                    args: ['aria-invalid']
                }], intEl: [{
                    type: i0.ViewChild,
                    args: ['integerInput', { static: true }]
                }], decEl: [{
                    type: i0.ViewChild,
                    args: ['decimalsInput', { static: true }]
                }] } });

    var PayordDynamicLabelComponent = /** @class */ (function () {
        function PayordDynamicLabelComponent() {
            /**
             * Fallback label name
             */
            this.defaultLabel = '';
            /**
             * Parent group name of the form field
             */
            this.parentName = '';
            this.label = '';
        }
        PayordDynamicLabelComponent.prototype.ngOnInit = function () {
            this.label = getLabelFromPaymentConfig(this.name, this.config, this.parentName);
        };
        return PayordDynamicLabelComponent;
    }());
    /** @nocollapse */ PayordDynamicLabelComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordDynamicLabelComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ PayordDynamicLabelComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordDynamicLabelComponent, selector: "bb-payord-dynamic-label", inputs: { config: "config", name: "name", defaultLabel: "defaultLabel", parentName: "parentName" }, ngImport: i0__namespace, template: " <ng-container>{{ label || defaultLabel }}</ng-container> ", isInline: true });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordDynamicLabelComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-payord-dynamic-label',
                        template: " <ng-container>{{ label || defaultLabel }}</ng-container> ",
                    }]
            }], propDecorators: { config: [{
                    type: i0.Input
                }], name: [{
                    type: i0.Input
                }], defaultLabel: [{
                    type: i0.Input
                }], parentName: [{
                    type: i0.Input
                }] } });

    var PaymentDebitorDetailsCardComponent = /** @class */ (function () {
        function PaymentDebitorDetailsCardComponent() {
        }
        return PaymentDebitorDetailsCardComponent;
    }());
    /** @nocollapse */ PaymentDebitorDetailsCardComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentDebitorDetailsCardComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ PaymentDebitorDetailsCardComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PaymentDebitorDetailsCardComponent, selector: "bb-debitor-details-card", inputs: { details: "details" }, ngImport: i0__namespace, template: "<div class=\"bb-payment-account-details-card h-100\">\n  <div class=\"bb-payment-account-details-card__header\">\n    <bb-icon-ui\n      backgroundType=\"square\"\n      color=\"secondary\"\n      size=\"sm\"\n      name=\"current-accounts\"\n    ></bb-icon-ui>\n    <div class=\"bb-text-bold break-word\">\n      <bb-amount-ui\n        [mapCurrency]=\"false\"\n        [amount]=\"details?.balance\"\n        [currency]=\"details?.currency\"\n      ></bb-amount-ui>\n    </div>\n  </div>\n  <div class=\"bb-payment-account-details-card__body justify-content-start\">\n    <div class=\"bb-text-bold break-word\" data-role=\"debit-account-name\">\n      {{ details?.alias || details?.name }}\n    </div>\n    <div\n      class=\"bb-text-support bb-subtitle contextual-alternates-off\"\n      data-role=\"debit-account-number\"\n    >\n      {{ details?.accountNumber || details?.IBAN }}\n    </div>\n  </div>\n</div>\n", components: [{ type: i1__namespace.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i2__namespace$2.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentDebitorDetailsCardComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-debitor-details-card',
                        templateUrl: './debitor-details-card.component.html',
                    }]
            }], propDecorators: { details: [{
                    type: i0.Input
                }] } });

    var PaymentCreditorDetailsCardComponent = /** @class */ (function () {
        function PaymentCreditorDetailsCardComponent() {
        }
        return PaymentCreditorDetailsCardComponent;
    }());
    /** @nocollapse */ PaymentCreditorDetailsCardComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentCreditorDetailsCardComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ PaymentCreditorDetailsCardComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PaymentCreditorDetailsCardComponent, selector: "bb-creditor-details-card", inputs: { details: "details" }, ngImport: i0__namespace, template: "<div class=\"bb-payment-account-details-card h-100\">\n  <div class=\"bb-payment-account-details-card__header\" aria-hidden=\"true\">\n    <bb-avatar-ui [name]=\"details?.name\"></bb-avatar-ui>\n    <bb-flag-icon\n      [countryCode]=\"details?.creditorBank?.postalAddress?.country\"\n      flagSize=\"lg\"\n    ></bb-flag-icon>\n  </div>\n  <div class=\"bb-payment-account-details-card__body justify-content-start\">\n    <div class=\"bb-text-bold break-word\" data-role=\"creditor-name\">\n      {{ details?.alias || details?.name }}\n    </div>\n    <div class=\"bb-text-support bb-subtitle\" data-role=\"creditor-number\">\n      <ng-container\n        data-role=\"creditor-account-number-with-branch-code\"\n        *ngIf=\"details?.creditorBank?.bankBranchCode\"\n        >{{ details?.creditorBank?.bankBranchCode }} /\n        {{ details?.accountNumber || details?.IBAN }}</ng-container\n      >\n      <ng-container\n        data-role=\"creditor-account-number\"\n        *ngIf=\"!details?.creditorBank?.bankBranchCode\"\n        >{{ details?.accountNumber || details.IBAN }}</ng-container\n      >\n    </div>\n  </div>\n</div>\n", components: [{ type: i1__namespace$2.AvatarComponent, selector: "bb-avatar-ui", inputs: ["image", "name", "imgAlt", "size"] }, { type: FlagIconComponent, selector: "bb-flag-icon", inputs: ["flagSize", "countryCode"] }], directives: [{ type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentCreditorDetailsCardComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-creditor-details-card',
                        templateUrl: './creditor-details-card.component.html',
                    }]
            }], propDecorators: { details: [{
                    type: i0.Input
                }] } });

    var PayordScheduleDetailsComponent = /** @class */ (function () {
        function PayordScheduleDetailsComponent() {
        }
        PayordScheduleDetailsComponent.prototype.isRelativeDate = function (date) {
            var today = getRelativeDate();
            var tomorrow = getRelativeDate(1);
            var _date = getDateOnly(new Date(date));
            var relativeDate = '';
            if (_date === today) {
                relativeDate = 'today';
            }
            else if (_date === tomorrow) {
                relativeDate = 'tomorrow';
            }
            return relativeDate;
        };
        return PayordScheduleDetailsComponent;
    }());
    /** @nocollapse */ PayordScheduleDetailsComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordScheduleDetailsComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ PayordScheduleDetailsComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordScheduleDetailsComponent, selector: "bb-payord-schedule-details", inputs: { data: "data", paymentConfig: "paymentConfig" }, ngImport: i0__namespace, template: "<div class=\"row\">\n  <ng-container *ngIf=\"data?.frequency?.value || data?.frequency as freq\">\n    <div class=\"col-md-6 bb-block bb-block--md\" *ngIf=\"data?.startDate\">\n      <div class=\"bb-text-bold\">\n        <bb-payord-dynamic-label\n          *ngIf=\"freq === 'ONCE'\"\n          name=\"startDate\"\n          [config]=\"paymentConfig\"\n          parentName=\"schedule\"\n          defaultLabel=\"Execution date\"\n          i18n-defaultLabel=\"@@schedule-details.execute-on.label\"\n        ></bb-payord-dynamic-label>\n        <bb-payord-dynamic-label\n          *ngIf=\"freq !== 'ONCE'\"\n          name=\"startDate\"\n          [config]=\"paymentConfig\"\n          parentName=\"schedule\"\n          defaultLabel=\"Start on\"\n          i18n-defaultLabel=\"@@schedule-details.start-date.label\"\n        ></bb-payord-dynamic-label>\n      </div>\n      <div data-role=\"execution-date\">\n        {{ data?.startDate | date: 'mediumDate' }}\n        <span i18n=\"@@schedule-details.execution-date.relative-date.label\">\n          {isRelativeDate(data?.startDate), select, today {(Today)} tomorrow\n          {(Tomorrow)}}\n        </span>\n      </div>\n    </div>\n\n    <div class=\"col-md-6 bb-block bb-block--md\" *ngIf=\"freq !== 'ONCE'\">\n      <div class=\"bb-text-bold\">\n        <bb-payord-dynamic-label\n          name=\"frequency\"\n          [config]=\"paymentConfig\"\n          parentName=\"schedule\"\n          defaultLabel=\"Frequency\"\n          i18n-defaultLabel=\"@@schedule-details.frequency.label\"\n        ></bb-payord-dynamic-label>\n      </div>\n\n      <div data-role=\"frequency-value\" i18n=\"@@schedule-details.frequency\">\n        {freq, select, DAILY {Daily} WEEKLY {Weekly} BIWEEKLY {Bi-Weekly}\n        MONTHLY {Monthly} QUARTERLY {Quarterly} YEARLY {Annually}}\n      </div>\n    </div>\n  </ng-container>\n\n  <ng-container *ngIf=\"(data?.frequency?.value || data?.frequency) !== 'ONCE'\">\n    <div\n      class=\"col-md-6 bb-block bb-block--md\"\n      *ngIf=\"data?.endType === 'after' && data?.repeat\"\n    >\n      <div class=\"bb-text-bold\" data-role=\"end-after-label\">\n        <bb-payord-dynamic-label\n          name=\"repeat\"\n          [config]=\"paymentConfig\"\n          parentName=\"schedule\"\n          defaultLabel=\"End after\"\n          i18n-defaultLabel=\"@@schedule-details.end-after.label\"\n        ></bb-payord-dynamic-label>\n      </div>\n      <div data-role=\"end-after\">\n        {{ data?.repeat }}\n        <span i18n=\"@@schedule-details.occurrences.label\">occurrences</span>\n      </div>\n    </div>\n    <div\n      class=\"col-md-6 bb-block bb-block--md\"\n      *ngIf=\"data?.endType === 'on' || data?.endType === 'never'\"\n    >\n      <div class=\"bb-text-bold\" data-role=\"end-date-label\">\n        <bb-payord-dynamic-label\n          name=\"endDate\"\n          [config]=\"paymentConfig\"\n          parentName=\"schedule\"\n          defaultLabel=\"End on\"\n          i18n-defaultLabel=\"@@schedule-details.end-date.label\"\n        ></bb-payord-dynamic-label>\n      </div>\n      <div *ngIf=\"data?.endType === 'on'\" data-role=\"end-date\">\n        {{ data?.endDate | date: 'mediumDate' }}\n        <span i18n=\"@@schedule-details-end-date.relative-date.label\">\n          {isRelativeDate(data?.endDate), select, today {(Today)} tomorrow\n          {(Tomorrow)}}\n        </span>\n      </div>\n      <div\n        *ngIf=\"data?.endType === 'never'\"\n        i18n=\"@@manage-payments.payment.details.endDate.never\"\n        data-role=\"payment-recurring-end-date-never-ending\"\n      >\n        Never ending\n      </div>\n    </div>\n  </ng-container>\n</div>\n", components: [{ type: PayordDynamicLabelComponent, selector: "bb-payord-dynamic-label", inputs: ["config", "name", "defaultLabel", "parentName"] }], directives: [{ type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "date": i2__namespace.DatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordScheduleDetailsComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-payord-schedule-details',
                        templateUrl: './schedule-details.component.html',
                    }]
            }], propDecorators: { data: [{
                    type: i0.Input
                }], paymentConfig: [{
                    type: i0.Input
                }] } });

    var counterpartyI18n = {
        beneficiaryTitle: $localize(templateObject_1$2 || (templateObject_1$2 = __makeTemplateObject([":@@counterparty-details.beneficiary-details.title:Beneficiary details"], [":@@counterparty-details.beneficiary-details.title:Beneficiary details"]))),
        beneficiaryDebitTitle: $localize(templateObject_2$1 || (templateObject_2$1 = __makeTemplateObject([":@@counterparty-details.client-details.title:Client details"], [":@@counterparty-details.client-details.title:Client details"]))),
        beneficiaryBankTitle: $localize(templateObject_3$1 || (templateObject_3$1 = __makeTemplateObject([":@@counterparty-details.beneficiary-address.title:Beneficiary bank details"], [":@@counterparty-details.beneficiary-address.title:Beneficiary bank details"]))),
        beneficiaryBankDebitTitle: $localize(templateObject_4$1 || (templateObject_4$1 = __makeTemplateObject([":@@counterparty-details.lient-address.title:Client bank details"], [":@@counterparty-details.lient-address.title:Client bank details"]))),
        beneficiaryAddressTitle: $localize(templateObject_5 || (templateObject_5 = __makeTemplateObject([":@@counterparty-details.bank-details.title:Beneficiary address"], [":@@counterparty-details.bank-details.title:Beneficiary address"]))),
        beneficiaryAddressDebitTitle: $localize(templateObject_6 || (templateObject_6 = __makeTemplateObject([":@@counterparty-details.client-bank-details.title:Client addresss"], [":@@counterparty-details.client-bank-details.title:Client addresss"]))),
    };
    var templateObject_1$2, templateObject_2$1, templateObject_3$1, templateObject_4$1, templateObject_5, templateObject_6;

    var PayordCounterpartyDetailsComponent = /** @class */ (function () {
        function PayordCounterpartyDetailsComponent() {
            /**
             * Flag to denote debit payment
             */
            this.isDebitPayment = false;
        }
        PayordCounterpartyDetailsComponent.prototype.hasPostalAddress = function (address) {
            return isAddressTruthy(address);
        };
        PayordCounterpartyDetailsComponent.prototype.ngOnInit = function () {
            this.beneficiaryDetailsTitles = this.isDebitPayment
                ? {
                    beneficiaryTitle: counterpartyI18n.beneficiaryDebitTitle,
                    bankTitle: counterpartyI18n.beneficiaryBankDebitTitle,
                    addressTitle: counterpartyI18n.beneficiaryAddressDebitTitle,
                }
                : {
                    beneficiaryTitle: counterpartyI18n.beneficiaryTitle,
                    bankTitle: counterpartyI18n.beneficiaryBankTitle,
                    addressTitle: counterpartyI18n.beneficiaryAddressTitle,
                };
        };
        return PayordCounterpartyDetailsComponent;
    }());
    /** @nocollapse */ PayordCounterpartyDetailsComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordCounterpartyDetailsComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ PayordCounterpartyDetailsComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordCounterpartyDetailsComponent, selector: "bb-payord-counterparty-details", inputs: { config: "config", details: "details", isDebitPayment: "isDebitPayment" }, ngImport: i0__namespace, template: "<div\n  class=\"card card-sm card--highlight card--shadowless bb-block bb-block--md\"\n  *ngIf=\"\n    details?.entryClass ||\n    details?.accountType ||\n    details?.recipientId ||\n    hasPostalAddress(details?.postalAddress)\n  \"\n>\n  <div class=\"card-body\">\n    <div class=\"bb-text-bold bb-block bb-block--md\">\n      {{ beneficiaryDetailsTitles?.beneficiaryTitle }}\n    </div>\n    <div\n      class=\"row bb-block bb-block--md\"\n      *ngIf=\"details?.entryClass || details?.accountType\"\n    >\n      <div\n        class=\"col-md-6 bb-block bb-block--md\"\n        *ngIf=\"\n          details?.accountType &&\n          (details?.accountType === 'SAVINGS' ||\n            details?.accountType === 'CHECKING')\n        \"\n      >\n        <div class=\"bb-text-bold\">\n          <bb-payord-dynamic-label\n            name=\"accountType\"\n            [config]=\"config\"\n            parentName=\"counterparty\"\n            defaultLabel=\"Account type\"\n            i18n-defaultLabel=\"\n              @@counterparty-details.account-type-default-label\"\n          ></bb-payord-dynamic-label>\n        </div>\n        <div\n          [ngSwitch]=\"details?.accountType\"\n          data-role=\"beneficiary-account-type\"\n        >\n          <ng-container\n            i18n=\"@@counterparty-details.account-type-savings\"\n            *ngSwitchCase=\"'SAVINGS'\"\n          >\n            Savings\n          </ng-container>\n          <ng-container\n            i18n=\"@@counterparty-details.account-type-checking\"\n            *ngSwitchCase=\"'CHECKING'\"\n          >\n            Checking\n          </ng-container>\n        </div>\n      </div>\n\n      <div class=\"col-md-6 bb-block bb-block--md\" *ngIf=\"details?.entryClass\">\n        <div class=\"bb-text-bold\">\n          <bb-payord-dynamic-label\n            name=\"entryClass\"\n            [config]=\"config\"\n            parentName=\"counterparty\"\n            defaultLabel=\"Standard entry class (SEC Type)\"\n            i18n-defaultLabel=\"@@counterparty-details.entryClass-default-label\"\n          ></bb-payord-dynamic-label>\n        </div>\n        <div\n          [ngSwitch]=\"details?.entryClass\"\n          data-role=\"beneficiary-standard-entry-class\"\n        >\n          <ng-container\n            i18n=\"@@counterparty-details.entryClass-ppd\"\n            *ngSwitchCase=\"'PPD'\"\n          >\n            Personal (PPD)\n          </ng-container>\n          <ng-container\n            i18n=\"@@counterparty-details.entryClass-ccd\"\n            *ngSwitchCase=\"'CCD'\"\n          >\n            Business (CCD)\n          </ng-container>\n        </div>\n      </div>\n    </div>\n\n    <div\n      class=\"row\"\n      *ngIf=\"details?.recipientId\"\n      [ngClass]=\"{\n        'bb-block bb-block--md': hasPostalAddress(details?.postalAddress)\n      }\"\n    >\n      <div class=\"col-md-6 bb-block bb-block--md\">\n        <div\n          class=\"bb-text-bold break-word\"\n          data-role=\"payment-counterparty-recipient-id-label\"\n        >\n          <bb-payord-dynamic-label\n            name=\"recipientId\"\n            [config]=\"config\"\n            parentName=\"counterparty\"\n            defaultLabel=\"Recipient ID\"\n            i18n-defaultLabel=\"@@counterparty-details.recipientId-default-label\"\n          ></bb-payord-dynamic-label>\n        </div>\n        <div data-role=\"payment-counterparty-recipient-id\">\n          {{ details?.recipientId }}\n        </div>\n      </div>\n    </div>\n\n    <div *ngIf=\"hasPostalAddress(details?.postalAddress)\">\n      <div class=\"bb-text-bold\">\n        {{ beneficiaryDetailsTitles?.addressTitle }}\n      </div>\n      <div class=\"break-word\">\n        <bb-full-address [address]=\"details?.postalAddress\"></bb-full-address>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div>\n  <div\n    class=\"card card-sm card--highlight card--shadowless bb-block bb-block--md\"\n    data-role=\"beneficiary-bank-details\"\n    *ngIf=\"\n      details?.creditorBank?.bankName ||\n      details?.creditorBank?.bic ||\n      hasPostalAddress(details?.creditorBank?.postalAddress)\n    \"\n  >\n    <div class=\"card-body\">\n      <div class=\"bb-text-bold bb-block bb-block--md\">\n        {{ beneficiaryDetailsTitles?.bankTitle }}\n      </div>\n\n      <div\n        [ngClass]=\"{\n          'bb-block bb-block--md': hasPostalAddress(\n            details?.creditorBank?.postalAddress\n          )\n        }\"\n        *ngIf=\"details?.creditorBank?.bankName || details?.creditorBank?.bic\"\n      >\n        <div class=\"row\">\n          <div\n            class=\"col-6\"\n            [class.col-12]=\"!details?.creditorBank?.bic\"\n            *ngIf=\"details?.creditorBank?.bankName\"\n          >\n            <div class=\"bb-text-bold\">\n              <bb-payord-dynamic-label\n                name=\"bankName\"\n                [config]=\"config\"\n                parentName=\"creditorBank\"\n                defaultLabel=\"Bank name\"\n                i18n-defaultLabel=\"\n                  @@counterparty-details.creditor-bank-name-default-label\"\n              ></bb-payord-dynamic-label>\n            </div>\n            <div class=\"break-word\" data-role=\"beneficiary-bank-name\">\n              {{ details?.creditorBank?.bankName }}\n            </div>\n          </div>\n\n          <div class=\"col-6\" *ngIf=\"details?.creditorBank?.bic\">\n            <div class=\"bb-text-bold\">\n              <bb-payord-dynamic-label\n                name=\"bic\"\n                [config]=\"config\"\n                defaultLabel=\"SWIFT/BIC code\"\n                i18n-defaultLabel=\"\n                  @@counterparty-details.creditor-bank-bic-default-label\"\n              ></bb-payord-dynamic-label>\n            </div>\n            <div\n              class=\"break-word\"\n              *ngIf=\"details?.creditorBank?.bic\"\n              data-role=\"counterparty-bic-code\"\n            >\n              {{ details?.creditorBank?.bic }}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div *ngIf=\"hasPostalAddress(details?.creditorBank?.postalAddress)\">\n        <div\n          class=\"bb-text-bold\"\n          i18n=\"@@counterparty-details.bank-address.title\"\n        >\n          Bank address\n        </div>\n        <div class=\"break-word\" data-role=\"beneficiary-bank-address\">\n          <bb-full-address\n            [address]=\"details?.creditorBank?.postalAddress\"\n          ></bb-full-address>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div\n    class=\"card card-sm card--highlight card--shadowless bb-block bb-block--md\"\n    data-role=\"correspondant-bank-details\"\n    *ngIf=\"\n      details?.correspondentBank?.bankName ||\n      details?.correspondentBank?.bankBranchCode ||\n      details?.correspondentBank?.bic ||\n      hasPostalAddress(details?.correspondentBank?.postalAddress)\n    \"\n  >\n    <div class=\"card-body\">\n      <div\n        class=\"bb-text-bold bb-block bb-block--md\"\n        i18n=\"@@counterparty-details.correspondant-bank-details.title\"\n      >\n        Correspondent bank details\n      </div>\n\n      <div\n        [ngClass]=\"{\n          'bb-block bb-block--md': hasPostalAddress(\n            details?.correspondentBank?.postalAddress\n          )\n        }\"\n        *ngIf=\"\n          details?.correspondentBank?.bankName ||\n          details?.correspondentBank?.bankBranchCode ||\n          details?.correspondentBank?.bic\n        \"\n      >\n        <div class=\"row\">\n          <div class=\"col-6\" *ngIf=\"details?.correspondentBank?.bankName\">\n            <div class=\"bb-text-bold\">\n              <bb-payord-dynamic-label\n                name=\"bankName\"\n                [config]=\"config\"\n                parentName=\"correspondentBank\"\n                defaultLabel=\"Bank name\"\n                i18n-defaultLabel=\"\n                  @@counterparty-details.correspondent.bank-name-default-label\"\n              ></bb-payord-dynamic-label>\n            </div>\n            <div class=\"break-word\" data-role=\"correspondant-bank-name\">\n              {{ details?.correspondentBank?.bankName }}\n            </div>\n          </div>\n\n          <div class=\"col-6\" *ngIf=\"details?.correspondentBank?.bankBranchCode\">\n            <div class=\"bb-text-bold\">\n              <bb-payord-dynamic-label\n                name=\"bankBranchCode\"\n                [config]=\"config\"\n                parentName=\"correspondentBank\"\n                defaultLabel=\"Routing transit number (ABA)\"\n                i18n-defaultLabel=\"\n                  @@counterparty-details.routing-transit-number-default-label\"\n              ></bb-payord-dynamic-label>\n            </div>\n            <div class=\"bb-text-support\" data-role=\"correspondant-bank-code\">\n              {{ details?.correspondentBank?.bankBranchCode }}\n            </div>\n          </div>\n\n          <div class=\"col-6\" *ngIf=\"details?.correspondentBank?.bic\">\n            <div class=\"bb-text-bold\">\n              <bb-payord-dynamic-label\n                name=\"bic\"\n                [config]=\"config\"\n                parentName=\"correspondentBank\"\n                defaultLabel=\"SWIFT/BIC code\"\n                i18n-defaultLabel=\"\n                  @@counterparty-details.correspondentBank.bic-default-label\"\n              ></bb-payord-dynamic-label>\n            </div>\n            <div\n              class=\"break-word\"\n              *ngIf=\"details?.correspondentBank?.bic\"\n              data-role=\"correspondent-bic-code\"\n            >\n              {{ details?.correspondentBank?.bic }}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div *ngIf=\"hasPostalAddress(details?.correspondentBank?.postalAddress)\">\n        <div\n          class=\"bb-text-bold\"\n          i18n=\"@@counterparty-details.correspondant-bank-address.title\"\n        >\n          Bank address\n        </div>\n        <div class=\"break-word\" data-role=\"correspondant-bank-address\">\n          <bb-full-address\n            [address]=\"details?.correspondentBank?.postalAddress\"\n          ></bb-full-address>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div\n    class=\"card card-sm card--highlight card--shadowless bb-block bb-block--md\"\n    data-role=\"intermediary-bank-details\"\n    *ngIf=\"\n      details?.intermediaryBank?.bankName ||\n      details?.intermediaryBank?.bankBranchCode ||\n      details?.intermediaryBank?.bic ||\n      hasPostalAddress(details?.intermediaryBank?.postalAddress)\n    \"\n  >\n    <div class=\"card-body\">\n      <div\n        class=\"bb-text-bold bb-block bb-block--md\"\n        i18n=\"@@counterparty-details.intermediary-bank-details.title\"\n      >\n        Intermediary bank details\n      </div>\n\n      <div\n        [ngClass]=\"{\n          'bb-block bb-block--md': hasPostalAddress(\n            details?.intermediaryBank?.postalAddress\n          )\n        }\"\n        *ngIf=\"\n          details?.intermediaryBank?.bankName ||\n          details?.intermediaryBank?.bankBranchCode ||\n          details?.intermediaryBank?.bic\n        \"\n      >\n        <div class=\"row\">\n          <div class=\"col-6\" *ngIf=\"details?.intermediaryBank?.bankName\">\n            <div class=\"bb-text-bold\">\n              <bb-payord-dynamic-label\n                name=\"bankName\"\n                [config]=\"config\"\n                parentName=\"intermediaryBank\"\n                defaultLabel=\"Bank name\"\n                i18n-defaultLabel=\"\n                  @@counterparty-details.intermediaryBank-bank-name-default-label\"\n              ></bb-payord-dynamic-label>\n            </div>\n            <div class=\"break-word\" data-role=\"intermediary-bank-name\">\n              {{ details?.intermediaryBank?.bankName }}\n            </div>\n          </div>\n\n          <div class=\"col-6\" *ngIf=\"details?.intermediaryBank?.bankBranchCode\">\n            <div class=\"bb-text-bold\">\n              <bb-payord-dynamic-label\n                name=\"bankBranchCode\"\n                [config]=\"config\"\n                parentName=\"intermediaryBank\"\n                defaultLabel=\"Routing transit number (ABA)\"\n                i18n-defaultLabel=\"\n                  @@counterparty-details.intermediary-routing-transit-number-default-label\"\n              ></bb-payord-dynamic-label>\n            </div>\n            <div class=\"bb-text-support\" data-role=\"intermediary-bank-code\">\n              {{ details?.intermediaryBank?.bankBranchCode }}\n            </div>\n          </div>\n\n          <div class=\"col-6\" *ngIf=\"details?.intermediaryBank?.bic\">\n            <div class=\"bb-text-bold\">\n              <bb-payord-dynamic-label\n                name=\"bic\"\n                [config]=\"config\"\n                parentName=\"intermediaryBank\"\n                defaultLabel=\"SWIFT/BIC code\"\n                i18n-defaultLabel=\"\n                  @@counterparty-details.intermediaryBank-bic-default-label\"\n              ></bb-payord-dynamic-label>\n            </div>\n            <div\n              class=\"break-word\"\n              *ngIf=\"details?.intermediaryBank?.bic\"\n              data-role=\"intermediaryBank-bic-code\"\n            >\n              {{ details?.intermediaryBank?.bic }}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div *ngIf=\"hasPostalAddress(details?.intermediaryBank?.postalAddress)\">\n        <div\n          class=\"bb-text-bold\"\n          i18n=\"@@counterparty-details.intermediary-bank-address.title\"\n        >\n          Bank address\n        </div>\n        <div class=\"break-word\" data-role=\"intermediary-bank-address\">\n          <bb-full-address\n            [address]=\"details?.intermediaryBank?.postalAddress\"\n          ></bb-full-address>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n", components: [{ type: PayordDynamicLabelComponent, selector: "bb-payord-dynamic-label", inputs: ["config", "name", "defaultLabel", "parentName"] }, { type: FullAddressComponent, selector: "bb-full-address", inputs: ["address"] }], directives: [{ type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i2__namespace.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i2__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordCounterpartyDetailsComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-payord-counterparty-details',
                        templateUrl: './counterparty-details.component.html',
                    }]
            }], propDecorators: { config: [{
                    type: i0.Input
                }], details: [{
                    type: i0.Input
                }], isDebitPayment: [{
                    type: i0.Input
                }] } });

    var PayordStatusComponent = /** @class */ (function () {
        function PayordStatusComponent() {
            /**
             * Status of the payment. Defaults to success.
             */
            this.status = exports.PaymentSubmitStatuses.SUCCESS;
            /**
             * Message to be displayed. Defaults to empty string.
             */
            this.message = '';
            /**
             * Flag to denote debit mode.
             */
            this.isDebitPayment = false;
        }
        return PayordStatusComponent;
    }());
    /** @nocollapse */ PayordStatusComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordStatusComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ PayordStatusComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordStatusComponent, selector: "bb-payord-status-card", inputs: { status: "status", message: "message", isDebitPayment: "isDebitPayment" }, ngImport: i0__namespace, template: "<div\n  class=\"bb-payment-status-card\"\n  [ngClass]=\"\n    status === 'error'\n      ? 'bb-payment-status-card--danger'\n      : 'bb-payment-status-card--success'\n  \"\n>\n  <bb-icon-ui\n    class=\"bb-payment-status-card__icon\"\n    size=\"xxl\"\n    [color]=\"status === 'error' ? 'danger' : 'success'\"\n    [name]=\"status === 'error' ? 'error-outline' : 'success'\"\n  ></bb-icon-ui>\n  <div\n    class=\"break-word col-12 bb-text-align-center\"\n    *ngIf=\"message\"\n    data-role=\"payment-status-msg\"\n  >\n    {{ message }}\n  </div>\n  <div\n    class=\"break-word col-12 bb-text-align-center\"\n    *ngIf=\"!message\"\n    data-role=\"payment-status-msg\"\n  >\n    <ng-container\n      *ngIf=\"!isDebitPayment\"\n      i18n=\"@@bb-payment-status-card-payment-status-message\"\n    >\n      { status, select, error {Failed to submit payment. Please try again later}\n      pending {Payment is submitted successfully, and pending further\n      approval(s)} pending_edited {Edited payment submitted successfully} other\n      {Payment submitted successfully} }\n    </ng-container>\n    <ng-container\n      *ngIf=\"isDebitPayment\"\n      i18n=\"@@bb-payment-status-card-debit-status-message\"\n    >\n      { status, select, error {Failed to submit debit request. Please try again\n      later} pending {Debit request is submitted successfully, and pending\n      further approval(s)} pending_edited {Edited debit request submitted\n      successfully} other {Debit request submitted successfully} }\n    </ng-container>\n  </div>\n</div>\n", components: [{ type: i1__namespace.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i2__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordStatusComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-payord-status-card',
                        templateUrl: './status-card.component.html',
                    }]
            }], propDecorators: { status: [{
                    type: i0.Input
                }], message: [{
                    type: i0.Input
                }], isDebitPayment: [{
                    type: i0.Input
                }] } });

    var PayordAmountDetailsComponent = /** @class */ (function () {
        function PayordAmountDetailsComponent() {
            this.hasTransferFee = false;
            this.exchangeRateError = false;
        }
        PayordAmountDetailsComponent.prototype.ngOnInit = function () {
            var _a, _b, _c;
            var transferFee = this.transferFee || { amount: '0', currencyCode: '' };
            var amount = (_b = (_a = this.details) === null || _a === void 0 ? void 0 : _a.amountGroup) === null || _b === void 0 ? void 0 : _b.amount;
            this.hasTransferFee = !!transferFee.amount;
            var calculatedAmount = new BigNumber__default["default"](((_c = this.forexDetails) === null || _c === void 0 ? void 0 : _c.calculatedAmount) || amount || '0')
                .plus(transferFee.amount)
                .toString();
            this.exchangeRateError = this.hasForexError();
            this.totalAmount =
                this.hasTransferFee && this.chargeBearer !== 'BEN'
                    ? calculatedAmount
                    : amount;
        };
        PayordAmountDetailsComponent.prototype.hasForexError = function () {
            var _a, _b, _c;
            return !!(((_a = this.forexDetails) === null || _a === void 0 ? void 0 : _a.fromCurrency) !== ((_b = this.forexDetails) === null || _b === void 0 ? void 0 : _b.toCurrency) &&
                !((_c = this.forexDetails) === null || _c === void 0 ? void 0 : _c.rate));
        };
        return PayordAmountDetailsComponent;
    }());
    /** @nocollapse */ PayordAmountDetailsComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordAmountDetailsComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ PayordAmountDetailsComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordAmountDetailsComponent, selector: "bb-payord-amount-details", inputs: { config: "config", details: "details", transferFee: "transferFee", chargeBearer: "chargeBearer", forexDetails: "forexDetails" }, ngImport: i0__namespace, template: "<div class=\"bb-block bb-block--md\">\n  <div class=\"bb-text-bold\">\n    <bb-payord-dynamic-label\n      name=\"amountGroup\"\n      [config]=\"config\"\n      defaultLabel=\"Amount\"\n      i18n-defaultLabel\n    ></bb-payord-dynamic-label>\n  </div>\n  <div\n    class=\"bb-highlight break-word bb-block bb-block--xs\"\n    data-role=\"transfer-amount\"\n  >\n    <bb-amount-ui\n      [amount]=\"details?.amountGroup?.amount\"\n      [currency]=\"details?.amountGroup?.currency\"\n      [mapCurrency]=\"false\"\n    ></bb-amount-ui>\n  </div>\n  <ng-container *ngIf=\"forexDetails?.calculatedAmount\">\n    <div class=\"bb-block bb-block--xs\">\n      <span i18n=\"amount-details.payment.details.amount-you-pay-label\"\n        >Amount you pay</span\n      >:\n      <span data-role=\"amount-you-pay\">\n        &asymp;\n        <bb-amount-ui\n          [mapCurrency]=\"false\"\n          [amount]=\"forexDetails?.calculatedAmount\"\n          [currency]=\"forexDetails?.fromCurrency\"\n        ></bb-amount-ui>\n      </span>\n    </div>\n    <div class=\"bb-block bb-block--xs\" data-role=\"indicative-rate\">\n      <span i18n=\"amount-details.payment.details.indicative-fee-label\"\n        >Indicative rate</span\n      >: 1 {{ forexDetails?.fromCurrency }} &asymp; {{ forexDetails?.rate }}\n      {{ forexDetails?.toCurrency }}\n    </div>\n  </ng-container>\n\n  <div class=\"bb-block bb-block--md\" *ngIf=\"transferFee\">\n    <div class=\"bb-block bb-block--xs\" data-role=\"transfer-fee\">\n      <span\n        *ngIf=\"config?.name\"\n        i18n=\"@@standard-transfer-fee-label\"\n        data-role=\"transfer-fee-label\"\n        >Transfer fee - {{ config.name }}:\n      </span>\n\n      <bb-amount-ui\n        [amount]=\"transferFee?.amount\"\n        [currency]=\"transferFee?.currencyCode || details?.amountGroup?.currency\"\n        [mapCurrency]=\"false\"\n        data-role=\"transfer-fee\"\n      ></bb-amount-ui>\n    </div>\n\n    <div class=\"bb-block bb-block--xs\" data-role=\"charge-bearer\">\n      <ng-container *ngIf=\"chargeBearer\" [ngSwitch]=\"chargeBearer\">\n        <ng-container i18n=\"@@charge-bearer-value-our\" *ngSwitchCase=\"'OUR'\">\n          I pay all fees (OUR)\n        </ng-container>\n        <ng-container i18n=\"@@charge-bearer-value-ben\" *ngSwitchCase=\"'BEN'\">\n          Beneficiary pays all fees (BEN)\n        </ng-container>\n        <ng-container i18n=\"@@charge-bearer-value-sha\" *ngSwitchCase=\"'SHA'\">\n          Fee is shared between you and beneficiary (SHA)\n        </ng-container>\n      </ng-container>\n    </div>\n\n    <div *ngIf=\"!exchangeRateError\" class=\"bb-text-bold\">\n      <span i18n=\"@@total-label\">Total: </span>\n      <ng-container\n        i18n=\"@@total-approximate-sign\"\n        *ngIf=\"forexDetails?.calculatedAmount\"\n        >&asymp;\n      </ng-container>\n      <bb-amount-ui\n        [amount]=\"totalAmount\"\n        [currency]=\"\n          forexDetails?.fromCurrency || details?.amountGroup?.currency\n        \"\n        [mapCurrency]=\"false\"\n        [attr.data-role]=\"'transfer-total'\"\n      ></bb-amount-ui>\n    </div>\n  </div>\n</div>\n", components: [{ type: PayordDynamicLabelComponent, selector: "bb-payord-dynamic-label", inputs: ["config", "name", "defaultLabel", "parentName"] }, { type: i2__namespace$2.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }], directives: [{ type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i2__namespace.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordAmountDetailsComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-payord-amount-details',
                        templateUrl: './amount-details.component.html',
                    }]
            }], propDecorators: { config: [{
                    type: i0.Input
                }], details: [{
                    type: i0.Input
                }], transferFee: [{
                    type: i0.Input
                }], chargeBearer: [{
                    type: i0.Input
                }], forexDetails: [{
                    type: i0.Input
                }] } });

    var CountrySelectorComponent = /** @class */ (function () {
        function CountrySelectorComponent() {
            this._selectedCountry = '';
            this.search = new i1$1.FormControl();
            this.filteredCountries = [];
            /** */
            this.selectedCountry = '';
            /** */
            this.helperText = '';
            /** */
            this.placeholder = '';
            /** */
            this.label = '';
            /** */
            this.searchPlaceholder = '';
            /** */
            this.dropdownIcon = 'toggle-down';
            /** */
            this.selectCountry = new i0.EventEmitter();
        }
        Object.defineProperty(CountrySelectorComponent.prototype, "countries", {
            /** */
            set: function (countries) {
                this._countries = countries || [];
                this.setupCountries();
            },
            enumerable: false,
            configurable: true
        });
        CountrySelectorComponent.prototype.setupCountries = function () {
            this.countryEntries = this._countries.map(function (country) { return [
                country,
                CountriesMap[country],
            ]; });
            this.filteredCountries = __spreadArray([], __read(this._countries));
        };
        CountrySelectorComponent.prototype.selectItem = function (country) {
            this.selectedCountry = country;
            this.selectCountry.emit(country);
        };
        CountrySelectorComponent.prototype.handleSearch = function (query) {
            if (query === void 0) { query = ''; }
            if (query) {
                this.filteredCountries = this.countryEntries.reduce(function (acc, _a) {
                    var _b = __read(_a, 2), key = _b[0], country = _b[1];
                    if (key.toLocaleLowerCase().indexOf(query.toLocaleLowerCase()) > -1 ||
                        country.toLocaleLowerCase().indexOf(query.toLocaleLowerCase()) > -1) {
                        acc.push(key);
                    }
                    return acc;
                }, []);
            }
            else {
                this.filteredCountries = this._countries;
            }
        };
        CountrySelectorComponent.prototype.onChange = function (_value) { };
        CountrySelectorComponent.prototype.onTouched = function () { };
        CountrySelectorComponent.prototype.writeValue = function (_value) { };
        CountrySelectorComponent.prototype.onBlur = function () { };
        CountrySelectorComponent.prototype.registerOnChange = function (fn) {
            this.onChange = fn;
        };
        CountrySelectorComponent.prototype.registerOnTouched = function (fn) {
            this.onTouched = fn;
        };
        return CountrySelectorComponent;
    }());
    /** @nocollapse */ CountrySelectorComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CountrySelectorComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ CountrySelectorComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: CountrySelectorComponent, selector: "bb-country-selector", inputs: { countries: "countries", selectedCountry: "selectedCountry", helperText: "helperText", placeholder: "placeholder", label: "label", searchPlaceholder: "searchPlaceholder", dropdownIcon: "dropdownIcon" }, outputs: { selectCountry: "selectCountry" }, providers: [
            {
                provide: i1$1.NG_VALUE_ACCESSOR,
                multi: true,
                useExisting: i0.forwardRef((function () { return CountrySelectorComponent; })),
            },
        ], ngImport: i0__namespace, template: "<div\n  class=\"bb-country-selector\"\n  ngbDropdown\n  #dropdown=\"ngbDropdown\"\n  display=\"static\"\n>\n  <div class=\"d-inline-block bb-label\" (click)=\"btn.focus()\" *ngIf=\"label\">\n    {{ label }}\n  </div>\n  <span\n    class=\"bb-dynamic-input__helper-text bb-text-support\"\n    *ngIf=\"helperText\"\n    [id]=\"searchElem?.id + '__helper-text'\"\n    [textContent]=\"helperText\"\n  >\n  </span>\n  <div>\n    <button\n      bbButton\n      ngbDropdownToggle\n      color=\"unstyled\"\n      (blur)=\"onBlur()\"\n      data-role=\"open-country-dropdown-list-button\"\n      [attr.aria-label]=\"label\"\n      class=\"bb-country-selector__toggle form-control w-100 d-flex justify-content-between bb-text-support\"\n      #btn\n    >\n      <ng-container *ngIf=\"selectedCountry\">\n        <ng-container\n          *ngTemplateOutlet=\"\n            countryTmpl;\n            context: { $implicit: selectedCountry }\n          \"\n        ></ng-container>\n      </ng-container>\n      <div *ngIf=\"!selectedCountry\">\n        <ng-container\n          *ngIf=\"placeholder; else defaultPlaceHolder\"\n        ></ng-container>\n        {{ placeholder }}\n      </div>\n      <bb-icon-ui [name]=\"dropdownIcon || 'toggle-down'\"></bb-icon-ui>\n    </button>\n  </div>\n\n  <div ngbDropdownMenu class=\"dropdown-menu dropdown-menu-right w-100\">\n    <div class=\"bb-block bb-block--md px-3\">\n      <bb-search-box-ui\n        (focus)=\"dropdown.open()\"\n        [formControl]=\"search\"\n        (clear)=\"handleSearch('')\"\n        data-role=\"country-search\"\n        role=\"searchbox\"\n        (ngModelChange)=\"handleSearch(search.value)\"\n        [placeholder]=\"searchPlaceholder || 'Search'\"\n        [showSearch]=\"true\"\n        [showClear]=\"true\"\n        [autocomplete]=\"'off'\"\n        #searchElem\n      >\n      </bb-search-box-ui>\n    </div>\n    <div *ngIf=\"filteredCountries?.length\" class=\"pre-scrollable\">\n      <button\n        *ngFor=\"let country of filteredCountries\"\n        role=\"menuitem\"\n        type=\"button\"\n        class=\"d-sm-flex px-3 py-2 d-flex-row align-items-center btn--unstyled\"\n        (bbKeyboardClick)=\"selectItem(country); dropdown.close()\"\n        ngbDropdownItem\n      >\n        <ng-container\n          *ngTemplateOutlet=\"countryTmpl; context: { $implicit: country }\"\n        ></ng-container>\n      </button>\n    </div>\n    <ng-container *ngIf=\"!filteredCountries?.length && search?.value\">\n      <ng-container *ngTemplateOutlet=\"emptySearch\"></ng-container>\n    </ng-container>\n  </div>\n</div>\n\n<ng-template let-code #countryTmpl>\n  <div class=\"d-flex justify-content-between align-items-center w-100\">\n    <div class=\"d-flex align-items-center\">\n      <bb-flag-icon\n        class=\"mr-2 d-flex\"\n        [countryCode]=\"code\"\n        [flagSize]=\"'sm'\"\n      ></bb-flag-icon>\n      <bb-country-name [countryCode]=\"code\"></bb-country-name>\n    </div>\n    <div class=\"bb-text-support\">{{ code }}</div>\n  </div>\n</ng-template>\n\n<ng-template #emptySearch>\n  <div class=\"card-body\">\n    <bb-empty-state-ui\n      data-role=\"no-templates-found\"\n      title=\"No Results Found\"\n      subtitle=\"We can\u2019t find what you\u2019re looking for. Please try a different criteria.\"\n      iconSize=\"xxl\"\n      i18n-subtitle=\"@@bb-country-selector.empty-state-subtitle\"\n      i18n-title=\"@@bb-country-selector.empty-state-title\"\n      iconModifier=\"search\"\n      [showIcon]=\"true\"\n    ></bb-empty-state-ui>\n  </div>\n</ng-template>\n\n<ng-template #defaultPlaceHolder>\n  <ng-container i18n>- select a country -</ng-container>\n</ng-template>\n", components: [{ type: i1__namespace.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i2__namespace$1.SearchBoxComponent, selector: "bb-search-box-ui", inputs: ["placeholder", "maxLength", "squareBorder", "typeaheadOptions", "showSearch", "showClear", "searchLabel", "clearLabel", "autocomplete"], outputs: ["submit", "clear", "valueChange"] }, { type: FlagIconComponent, selector: "bb-flag-icon", inputs: ["flagSize", "countryCode"] }, { type: CountryNameComponent, selector: "bb-country-name", inputs: ["countryCode"] }, { type: i5__namespace.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i6__namespace.NgbDropdown, selector: "[ngbDropdown]", inputs: ["open", "placement", "container", "autoClose", "display", "dropdownClass"], outputs: ["openChange"], exportAs: ["ngbDropdown"] }, { type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i7__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i6__namespace.NgbDropdownToggle, selector: "[ngbDropdownToggle]" }, { type: i2__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i6__namespace.NgbDropdownMenu, selector: "[ngbDropdownMenu]" }, { type: i1__namespace$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$1.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i2__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i6__namespace.NgbDropdownItem, selector: "[ngbDropdownItem]", inputs: ["disabled"] }, { type: i10__namespace.KeyboardClickDirective, selector: "[bbKeyboardClick]", outputs: ["bbKeyboardClick"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CountrySelectorComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-country-selector',
                        templateUrl: './country-selector.component.html',
                        providers: [
                            {
                                provide: i1$1.NG_VALUE_ACCESSOR,
                                multi: true,
                                useExisting: i0.forwardRef((function () { return CountrySelectorComponent; })),
                            },
                        ],
                    }]
            }], propDecorators: { countries: [{
                    type: i0.Input
                }], selectedCountry: [{
                    type: i0.Input
                }], helperText: [{
                    type: i0.Input
                }], placeholder: [{
                    type: i0.Input
                }], label: [{
                    type: i0.Input
                }], searchPlaceholder: [{
                    type: i0.Input
                }], dropdownIcon: [{
                    type: i0.Input
                }], selectCountry: [{
                    type: i0.Output
                }] } });

    var SelectCountryDropdownComponent = /** @class */ (function () {
        function SelectCountryDropdownComponent() {
            this._selectedCountry = '';
            this.search = new i1$1.FormControl();
            this.filteredCountries = [];
            /**
             * Selected country iso code
             */
            this.selectedCountry = '';
            /**
             * Helper text for the component. Defaults to empty string.
             */
            this.helperText = '';
            /**
             * Placeholder text. Defaults to empty string.
             */
            this.placeholder = '';
            /**
             * Label of the component. Defaults to empty string.
             */
            this.label = '';
            /**
             * Placeholder fot search. Defaults to empty string.
             */
            this.searchPlaceholder = '';
            /**
             * Icon for the dropdown. Defaults to `toggle-down`
             */
            this.dropdownIcon = 'toggle-down';
            /**
             * Flag which indicates permission to create closed payment
             * Default value is `false`
             */
            this.isClosedPayment = false;
            /**
             * Emits value when a country is selected
             */
            this.selectCountry = new i0.EventEmitter();
        }
        Object.defineProperty(SelectCountryDropdownComponent.prototype, "countries", {
            /**
             * Array of country iso codes
             */
            set: function (countries) {
                this._countries = countries || [];
                this.setupCountries();
            },
            enumerable: false,
            configurable: true
        });
        SelectCountryDropdownComponent.prototype.setupCountries = function () {
            this.countryEntries = this._countries.map(function (country) { return [
                country,
                CountriesMap[country],
            ]; });
            this.filteredCountries = __spreadArray([], __read(this._countries));
        };
        SelectCountryDropdownComponent.prototype.selectItem = function (country) {
            this.selectedCountry = country;
            this.selectCountry.emit(country);
            if (this.search.value) {
                this.search.reset();
            }
        };
        SelectCountryDropdownComponent.prototype.handleSearch = function (query) {
            if (query === void 0) { query = ''; }
            if (query) {
                this.filteredCountries = this.countryEntries.reduce(function (acc, _a) {
                    var _b = __read(_a, 2), key = _b[0], country = _b[1];
                    if (key.toLocaleLowerCase().indexOf(query.toLocaleLowerCase()) > -1 ||
                        country.toLocaleLowerCase().indexOf(query.toLocaleLowerCase()) > -1) {
                        acc.push(key);
                    }
                    return acc;
                }, []);
            }
            else {
                this.filteredCountries = this._countries;
            }
        };
        SelectCountryDropdownComponent.prototype.onChange = function () { };
        SelectCountryDropdownComponent.prototype.onTouched = function () { };
        SelectCountryDropdownComponent.prototype.writeValue = function () { };
        SelectCountryDropdownComponent.prototype.registerOnChange = function (fn) {
            this.onChange = fn;
        };
        SelectCountryDropdownComponent.prototype.registerOnTouched = function (fn) {
            this.onTouched = fn;
        };
        return SelectCountryDropdownComponent;
    }());
    /** @nocollapse */ SelectCountryDropdownComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: SelectCountryDropdownComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ SelectCountryDropdownComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: SelectCountryDropdownComponent, selector: "bb-select-country-dropdown", inputs: { countries: "countries", selectedCountry: "selectedCountry", helperText: "helperText", placeholder: "placeholder", label: "label", searchPlaceholder: "searchPlaceholder", dropdownIcon: "dropdownIcon", isClosedPayment: "isClosedPayment" }, outputs: { selectCountry: "selectCountry" }, providers: [
            {
                provide: i1$1.NG_VALUE_ACCESSOR,
                multi: true,
                useExisting: i0.forwardRef((function () { return SelectCountryDropdownComponent; })),
            },
        ], ngImport: i0__namespace, template: "<div\n  class=\"bb-dynamic-input bb-select-country-dropdown\"\n  ngbDropdown\n  placement=\"bottom\"\n  #dropdown=\"ngbDropdown\"\n>\n  <div class=\"d-inline-block bb-label\" (click)=\"btn.focus()\" *ngIf=\"label\">\n    {{ label }}\n  </div>\n  <span\n    class=\"bb-dynamic-input__helper-text bb-text-support\"\n    *ngIf=\"helperText\"\n    [id]=\"searchElem?.id + '__helper-text'\"\n    [textContent]=\"helperText\"\n  >\n  </span>\n  <div>\n    <button\n      bbButton\n      ngbDropdownToggle\n      color=\"unstyled\"\n      (blur)=\"onTouched()\"\n      data-role=\"open-country-dropdown-list-button\"\n      [attr.aria-label]=\"label\"\n      [disabled]=\"isClosedPayment && selectedCountry\"\n      class=\"bb-select-country-dropdown__toggle form-control w-100 pr-5 d-flex justify-content-between bb-text-support\"\n      #btn\n    >\n      <ng-container *ngIf=\"selectedCountry\">\n        <ng-container\n          *ngTemplateOutlet=\"\n            countryTmpl;\n            context: { $implicit: selectedCountry }\n          \"\n        ></ng-container>\n      </ng-container>\n      <div *ngIf=\"!selectedCountry\">\n        <ng-container\n          *ngIf=\"placeholder; else defaultPlaceHolder\"\n        ></ng-container>\n        {{ placeholder }}\n      </div>\n      <bb-icon-ui [name]=\"dropdownIcon || 'toggle-down'\"></bb-icon-ui>\n    </button>\n  </div>\n\n  <div ngbDropdownMenu class=\"dropdown-menu dropdown-menu-right w-100\">\n    <div class=\"bb-block bb-block--md px-3\">\n      <bb-search-box-ui\n        (focus)=\"dropdown.open()\"\n        [formControl]=\"search\"\n        (clear)=\"handleSearch('')\"\n        data-role=\"country-search\"\n        (ngModelChange)=\"handleSearch(search.value)\"\n        [placeholder]=\"searchPlaceholder || 'Search'\"\n        [attr.aria-label]=\"searchPlaceholder || 'Search'\"\n        [showSearch]=\"true\"\n        [showClear]=\"true\"\n        [autocomplete]=\"'off'\"\n        #searchElem\n      >\n      </bb-search-box-ui>\n    </div>\n\n    <bb-payments-sr-search-result-info\n      [totalNumber]=\"filteredCountries?.length || 0\"\n    >\n    </bb-payments-sr-search-result-info>\n\n    <div *ngIf=\"filteredCountries?.length\" class=\"pre-scrollable\">\n      <button\n        *ngFor=\"let country of filteredCountries\"\n        role=\"menuitem\"\n        type=\"button\"\n        class=\"d-sm-flex px-3 py-2 d-flex-row align-items-center btn--unstyled\"\n        (bbKeyboardClick)=\"selectItem(country); dropdown.close()\"\n        ngbDropdownItem\n      >\n        <ng-container\n          *ngTemplateOutlet=\"countryTmpl; context: { $implicit: country }\"\n        ></ng-container>\n      </button>\n    </div>\n    <ng-container *ngIf=\"!filteredCountries?.length && search?.value\">\n      <ng-container *ngTemplateOutlet=\"emptySearch\"></ng-container>\n    </ng-container>\n  </div>\n</div>\n\n<ng-template let-code #countryTmpl>\n  <div class=\"d-flex justify-content-between align-items-center w-100\">\n    <div class=\"bb-stack\">\n      <bb-flag-icon\n        class=\"bb-stack__item\"\n        [countryCode]=\"code\"\n        [flagSize]=\"'md'\"\n      ></bb-flag-icon>\n      <bb-country-name\n        class=\"bb-stack__item bb-ellipsis bb-ellipsis--single-line\"\n        [countryCode]=\"code\"\n      ></bb-country-name>\n      <div class=\"bb-text-support bb-stack__item bb-stack__item--push-right\">\n        {{ code }}\n      </div>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #emptySearch>\n  <div class=\"card-body\">\n    <bb-empty-state-ui\n      data-role=\"no-templates-found\"\n      title=\"No Results Found\"\n      subtitle=\"We can\u2019t find what you\u2019re looking for. Please try a different criteria.\"\n      iconSize=\"xxl\"\n      i18n-subtitle=\"@@bb-select-country-dropdown.empty-state-subtitle\"\n      i18n-title=\"@@bb-select-country-dropdown.empty-state-title\"\n      iconModifier=\"search\"\n      [showIcon]=\"true\"\n    ></bb-empty-state-ui>\n  </div>\n</ng-template>\n\n<ng-template #defaultPlaceHolder>\n  <ng-container i18n=\"@@country-selector-default-placeholder\"\n    >- select a country -</ng-container\n  >\n</ng-template>\n", components: [{ type: i1__namespace.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i2__namespace$1.SearchBoxComponent, selector: "bb-search-box-ui", inputs: ["placeholder", "maxLength", "squareBorder", "typeaheadOptions", "showSearch", "showClear", "searchLabel", "clearLabel", "autocomplete"], outputs: ["submit", "clear", "valueChange"] }, { type: PaymentsSrSearchResultInfoComponent, selector: "bb-payments-sr-search-result-info", inputs: ["totalNumber"] }, { type: FlagIconComponent, selector: "bb-flag-icon", inputs: ["flagSize", "countryCode"] }, { type: CountryNameComponent, selector: "bb-country-name", inputs: ["countryCode"] }, { type: i5__namespace.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i6__namespace.NgbDropdown, selector: "[ngbDropdown]", inputs: ["open", "placement", "container", "autoClose", "display", "dropdownClass"], outputs: ["openChange"], exportAs: ["ngbDropdown"] }, { type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i7__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i6__namespace.NgbDropdownToggle, selector: "[ngbDropdownToggle]" }, { type: i2__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i6__namespace.NgbDropdownMenu, selector: "[ngbDropdownMenu]" }, { type: i1__namespace$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$1.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i2__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i6__namespace.NgbDropdownItem, selector: "[ngbDropdownItem]", inputs: ["disabled"] }, { type: i10__namespace.KeyboardClickDirective, selector: "[bbKeyboardClick]", outputs: ["bbKeyboardClick"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: SelectCountryDropdownComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-select-country-dropdown',
                        templateUrl: './select-country-dropdown.component.html',
                        providers: [
                            {
                                provide: i1$1.NG_VALUE_ACCESSOR,
                                multi: true,
                                useExisting: i0.forwardRef((function () { return SelectCountryDropdownComponent; })),
                            },
                        ],
                    }]
            }], propDecorators: { countries: [{
                    type: i0.Input
                }], selectedCountry: [{
                    type: i0.Input
                }], helperText: [{
                    type: i0.Input
                }], placeholder: [{
                    type: i0.Input
                }], label: [{
                    type: i0.Input
                }], searchPlaceholder: [{
                    type: i0.Input
                }], dropdownIcon: [{
                    type: i0.Input
                }], isClosedPayment: [{
                    type: i0.Input
                }], selectCountry: [{
                    type: i0.Output
                }] } });

    var PaymentTemplateComponent = /** @class */ (function () {
        function PaymentTemplateComponent() {
            this.modalOptions = {
                backdrop: 'static',
                keyboard: false,
            };
            /**
             * Saving template data flag.
             * Default value is false.
             */
            this.isSavingTemplate = false;
            /**
             * Close payment template modal event emitter
             */
            this.closeModal = new i0.EventEmitter();
            /**
             * Open payment template modal event emitter
             */
            this.openModal = new i0.EventEmitter();
            /**
             * Submit form event emitter
             */
            this.submitForm = new i0.EventEmitter();
            this.states = exports.ModalState;
            this.isSubmitted = false;
        }
        PaymentTemplateComponent.prototype.onOpen = function () {
            this.openModal.emit();
        };
        PaymentTemplateComponent.prototype.onClose = function () {
            this.closeModal.emit();
            this.isSubmitted = false;
        };
        PaymentTemplateComponent.prototype.onSubmit = function () {
            this.submitForm.emit();
            this.isSubmitted = true;
        };
        return PaymentTemplateComponent;
    }());
    /** @nocollapse */ PaymentTemplateComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentTemplateComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ PaymentTemplateComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PaymentTemplateComponent, selector: "bb-payment-template-form", inputs: { modalState: "modalState", paymentTemplateForm: "paymentTemplateForm", isSavingTemplate: "isSavingTemplate" }, outputs: { closeModal: "closeModal", openModal: "openModal", submitForm: "submitForm" }, ngImport: i0__namespace, template: "<bb-modal-ui\n  [isOpen]=\"states.Preview === (modalState | async)\"\n  [modalOptions]=\"modalOptions\"\n>\n  <bb-modal-header-ui>\n    <ng-template bbCustomModalHeader>\n      <div class=\"bb-stack\">\n        <bb-icon-ui\n          class=\"bb-text-disabled bb-stack__item bb-stack__item--spacing-sm bb-text-support d-inline-block\"\n          name=\"insert-drive-file\"\n        >\n        </bb-icon-ui>\n        <bb-header-ui\n          class=\"bb-stack__item\"\n          headingType=\"h2\"\n          heading=\"Save as a template\"\n          i18n-heading=\"@@omni-payment-review-template-modal.title\"\n          [attr.data-role]=\"'payment-template-header'\"\n        ></bb-header-ui>\n      </div>\n    </ng-template>\n  </bb-modal-header-ui>\n\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody>\n      <div\n        class=\"bb-block bb-block--lg\"\n        data-role=\"payment-template-modal-text\"\n        i18n=\"@@omni-payment-review-template-modal.description\"\n      >\n        Type a name to the template in order to re-use it and manage it when\n        needed.\n      </div>\n      <form [formGroup]=\"paymentTemplateForm\" class=\"form-group\">\n        <label [for]=\"TemplateName.id\" class=\"bb-label\">\n          <span\n            id=\"name\"\n            i18n=\"@@omni-payment-review-template-modal.template-name.label\"\n            >Name of the template</span\n          >\n        </label>\n        <span\n          class=\"bb-text-support\"\n          i18n=\"\n            @@omni-payment-review-template-modal.template-name.required.label\"\n        >\n          (required)\n        </span>\n        <div class=\"bb-payment-template__form-container\">\n          <bb-input-text-ui\n            #TemplateName\n            [aria-labelledby]=\"'name'\"\n            formControlName=\"templateName\"\n            [maxLength]=\"50\"\n            [showCharCounter]=\"true\"\n            data-role=\"template-name-field\"\n          ></bb-input-text-ui>\n\n          <bb-input-validation-message-ui\n            data-role=\"initiate-payment-template-name-input-error\"\n            role=\"alert\"\n            [showErrors]=\"paymentTemplateForm?.get('templateName')?.invalid\"\n          >\n            <ng-container\n              *ngIf=\"\n                paymentTemplateForm?.get('templateName') as templateNameControl\n              \"\n            >\n              <span\n                data-role=\"required-template-name-error\"\n                i18n=\"\n                  @@omni-payment-review-template-modal.template-name.validation.required-error\"\n                *ngIf=\"\n                  templateNameControl.errors &&\n                  templateNameControl.errors['required'] &&\n                  isSubmitted\n                \"\n              >\n                Template name is required\n              </span>\n            </ng-container>\n          </bb-input-validation-message-ui>\n        </div>\n      </form>\n    </ng-template>\n  </bb-modal-body-ui>\n\n  <bb-modal-footer-ui>\n    <ng-template bbCustomModalFooter>\n      <div class=\"bb-button-bar\">\n        <bb-load-button-ui\n          [isLoading]=\"isSavingTemplate\"\n          color=\"primary\"\n          class=\"bb-button-bar__button\"\n          data-role=\"save-template-button\"\n          (click)=\"onSubmit()\"\n        >\n          <ng-container\n            i18n=\"@@omni-payment-review-template-modal.save-btn.label\"\n          >\n            Save\n          </ng-container>\n        </bb-load-button-ui>\n        <button\n          bbButton\n          color=\"link\"\n          class=\"bb-button-bar__button\"\n          data-role=\"cancel-template-button\"\n          (click)=\"onClose()\"\n        >\n          <ng-container\n            i18n=\"@@omni-payment-review-template-modal.cancel-btn.label\"\n          >\n            Cancel\n          </ng-container>\n        </button>\n      </div>\n    </ng-template>\n  </bb-modal-footer-ui>\n</bb-modal-ui>\n", components: [{ type: i1__namespace$3.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i1__namespace$3.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i1__namespace.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i3__namespace$2.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i1__namespace$3.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: i3__namespace.InputTextComponent, selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i4__namespace.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i1__namespace$3.ModalFooterComponent, selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }, { type: i6__namespace$1.LoadButtonComponent, selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }], directives: [{ type: i1__namespace$3.CustomModalHeaderDirective, selector: "ng-template[bbCustomModalHeader]" }, { type: i1__namespace$3.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i1__namespace$1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1__namespace$1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1__namespace$1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1__namespace$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$1.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace$3.CustomModalFooterDirective, selector: "ng-template[bbCustomModalFooter]" }, { type: i7__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "async": i2__namespace.AsyncPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentTemplateComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-payment-template-form',
                        templateUrl: './create-payment-template-modal.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], propDecorators: { modalState: [{
                    type: i0.Input
                }], paymentTemplateForm: [{
                    type: i0.Input
                }], isSavingTemplate: [{
                    type: i0.Input
                }], closeModal: [{
                    type: i0.Output
                }], openModal: [{
                    type: i0.Output
                }], submitForm: [{
                    type: i0.Output
                }] } });

    var BreachLimitDetailsModalComponent = /** @class */ (function () {
        function BreachLimitDetailsModalComponent() {
            /**
             * The flag that controls visibility of the breach limit report.
             * By default is `false`.
             */
            this.isOpen = false;
            /**
             * Event emitted when user clicks on close icon.
             */
            // eslint-disable-next-line @angular-eslint/no-output-native
            this.close = new i0.EventEmitter();
        }
        Object.defineProperty(BreachLimitDetailsModalComponent.prototype, "breachReportCurrency", {
            get: function () {
                var _a, _b, _c;
                return (_c = (_b = (_a = this.error) === null || _a === void 0 ? void 0 : _a.breachReport) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.currency;
            },
            enumerable: false,
            configurable: true
        });
        BreachLimitDetailsModalComponent.prototype.normalizeBreachReportPeriod = function (breachReportInfo) {
            return breachReportInfo.timeframe
                ? Object.assign(Object.assign({}, breachReportInfo), { timeframe: Object.assign(Object.assign({}, breachReportInfo.timeframe), { period: breachReportInfo.timeframe.period.toUpperCase() }) }) : breachReportInfo;
        };
        BreachLimitDetailsModalComponent.prototype.flattenBreachReports = function () {
            var _this = this;
            if (!this.error || !this.error.breachReport) {
                return [];
            }
            return this.error.breachReport
                .map(function (report) { return report.breachInfo; })
                .reduce(function (prev, current) { return prev.concat.apply(prev, __spreadArray([], __read(current.map(_this.normalizeBreachReportPeriod)))); }, []);
        };
        BreachLimitDetailsModalComponent.prototype.compareByPeriod = function (left, right) {
            var _a, _b;
            var leftPeriod = (_a = left.timeframe) === null || _a === void 0 ? void 0 : _a.period;
            var rightPeriod = (_b = right.timeframe) === null || _b === void 0 ? void 0 : _b.period;
            return (exports.Period[leftPeriod] - exports.Period[rightPeriod]);
        };
        Object.defineProperty(BreachLimitDetailsModalComponent.prototype, "sortedBreaches", {
            get: function () {
                var limits = this.flattenBreachReports();
                var transactional = limits.filter(function (limit, index) {
                    var isTransactional = limit.breachedLimitType === exports.BreachedLimitType.TRANSACTIONAL;
                    var hasPeriodicThreshold = limit.breachType === exports.BreachType.THRESHOLD &&
                        limit.breachedLimitType === exports.BreachedLimitType.PERIODIC;
                    if (isTransactional || hasPeriodicThreshold) {
                        limits.splice(index, 1);
                    }
                    return isTransactional;
                });
                return __spreadArray(__spreadArray([], __read(transactional)), __read(limits.sort(this.compareByPeriod)));
            },
            enumerable: false,
            configurable: true
        });
        BreachLimitDetailsModalComponent.prototype.onClose = function () {
            this.close.emit();
        };
        BreachLimitDetailsModalComponent.prototype.print = function () {
            window.print();
        };
        return BreachLimitDetailsModalComponent;
    }());
    /** @nocollapse */ BreachLimitDetailsModalComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: BreachLimitDetailsModalComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ BreachLimitDetailsModalComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: BreachLimitDetailsModalComponent, selector: "bb-breach-limit-details", inputs: { paymentDetails: "paymentDetails", error: "error", isOpen: "isOpen" }, outputs: { close: "close" }, ngImport: i0__namespace, template: "<bb-modal-ui [isOpen]=\"isOpen\" (cancel)=\"onClose()\" (confirm)=\"onClose()\">\n  <bb-modal-header-ui role=\"heading\">\n    <ng-template bbCustomModalHeader>\n      <header\n        class=\"bb-stack bb-stack__item--fill\"\n        aria-labelledby=\"headerTitle\"\n      >\n        <bb-icon-ui\n          color=\"danger\"\n          name=\"error-outline\"\n          class=\"bb-stack__item bb-stack__item--spacing-sm\"\n        ></bb-icon-ui>\n\n        <span\n          id=\"headerTitle\"\n          class=\"bb-stack__item highlight text-large\"\n          data-role=\"limit-breach-modal-title\"\n          aria-label=\"Limits breach\"\n          i18n-aria-label=\"@bb-payord-breach-limit-modal-title\"\n        >\n          Limits breach\n        </span>\n        <div class=\"bb-stack__item bb-stack__item--push-right\">\n          <button\n            (click)=\"print()\"\n            type=\"button\"\n            class=\"bb-stack__item btn border-0 btn-circle\"\n          >\n            <!-- ACCESSIBILITY compliance: The style attributes' content is needed for NVDA to read content on hover -->\n            <span\n              class=\"sr-only\"\n              aria-label=\"Print breach limit report\"\n              i18n-aria-label=\"@bb-payord-breach-limit-print-action-aria-label\"\n              style=\"min-width: 10px; min-height: 10px\"\n            >\n              Print breach limit report\n            </span>\n            <bb-icon-ui name=\"print\"></bb-icon-ui>\n          </button>\n          <button\n            (click)=\"onClose()\"\n            type=\"button\"\n            class=\"bb-stack__item btn border-0 btn-circle\"\n          >\n            <span\n              class=\"sr-only\"\n              aria-label=\"Close breach limit report dialog\"\n              i18n-aria-label=\"@bb-payord-breach-limit-close-action-aria-label\"\n              style=\"min-width: 10px; min-height: 10px\"\n            >\n              Close breach limit report dialog\n            </span>\n            <bb-icon-ui name=\"clear\"></bb-icon-ui>\n          </button>\n        </div>\n      </header>\n    </ng-template>\n  </bb-modal-header-ui>\n  <bb-modal-body-ui role=\"main\">\n    <ng-template bbCustomModalBody>\n      <div\n        class=\"bb-block bb-block--lg\"\n        i18n=\"@bb-payord-breach-limit-details-heading\"\n        data-role=\"limit-breach-modal-message\"\n      >\n        Payment could not be submitted due to a limit breach. See details below:\n      </div>\n\n      <div class=\"table-responsive\">\n        <table class=\"table table-hover\">\n          <thead class=\"bb-table__head--highlight\">\n            <tr>\n              <th scope=\"col\" class=\"bb-table--text-start\"></th>\n              <th\n                scope=\"col\"\n                class=\"bb-table--text-end\"\n                data-role=\"breach-currency\"\n              >\n                <ng-container\n                  i18n=\"\n                    @bb-payord-breach-limit-details-breach-currency-table-heading\n                  \"\n                  >Limit</ng-container\n                >\n                <ng-container *ngIf=\"breachReportCurrency\"\n                  >({{ breachReportCurrency }})</ng-container\n                >\n              </th>\n              <th\n                scope=\"col\"\n                class=\"bb-table--text-end\"\n                i18n=\"@bb-payord-breach-limit-details-consumed-table-heading\"\n              >\n                Consumed\n              </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            <tr\n              *ngFor=\"let breachInfo of sortedBreaches\"\n              data-role=\"limit-breach\"\n            >\n              <td class=\"bb-table--text-start\" data-role=\"limit-type\">\n                <span\n                  class=\"highlight\"\n                  *ngIf=\"breachInfo.breachedLimitType === 'TRANSACTIONAL'\"\n                  i18n=\"@bb-payord-breach-limit-details-per-transaction-label\"\n                >\n                  Per transaction\n                </span>\n                <ng-container\n                  *ngIf=\"breachInfo.breachedLimitType !== 'TRANSACTIONAL'\"\n                >\n                  <span\n                    class=\"highlight\"\n                    i18n=\"@bb-payord-breach-limit-details-time-frame\"\n                  >\n                    {breachInfo.timeframe.period, select, DAILY {Daily} WEEKLY\n                    {Weekly} MONTHLY {Monthly} QUARTERLY {Quarterly} YEARLY\n                    {Yearly} other\n                    {{{breachInfo.timeframe.period | titlecase}}}}\n                  </span>\n                  <ng-container *ngIf=\"breachInfo.timeframe.period !== 'DAILY'\">\n                    <div\n                      [ngSwitch]=\"breachInfo.timeframe.period\"\n                      class=\"text-muted\"\n                      data-role=\"period\"\n                    >\n                      <ng-container\n                        *ngSwitchCase=\"'WEEKLY'\"\n                        i18n=\"@@bb-payord-breach-limit-details-timeframe-weekly\"\n                      >\n                        Till\n                        {{ breachInfo.timeframe.endTime | date: 'mediumDate' }}\n                      </ng-container>\n                      <ng-container\n                        *ngSwitchCase=\"'MONTHLY'\"\n                        i18n=\"\n                          @@bb-payord-breach-limit-details-timeframe-monthly\"\n                      >\n                        Till\n                        {{ breachInfo.timeframe.endTime | date: 'mediumDate' }}\n                      </ng-container>\n                      <ng-container\n                        *ngSwitchCase=\"'QUARTERLY'\"\n                        i18n=\"\n                          @@bb-payord-breach-limit-details-timeframe-quarterly\"\n                      >\n                        {{\n                          breachInfo.timeframe.startTime | date: 'mediumDate'\n                        }}\n                        -\n                        {{ breachInfo.timeframe.endTime | date: 'mediumDate' }}\n                      </ng-container>\n                      <ng-container\n                        *ngSwitchCase=\"'YEARLY'\"\n                        i18n=\"@@bb-payord-breach-limit-details-timeframe-yearly\"\n                      >\n                        {{\n                          breachInfo.timeframe.startTime | date: 'mediumDate'\n                        }}\n                        -\n                        {{ breachInfo.timeframe.endTime | date: 'mediumDate' }}\n                      </ng-container>\n                    </div>\n                  </ng-container>\n                </ng-container>\n              </td>\n\n              <td class=\"bb-table--text-end\" data-role=\"limit-amount\">\n                <span class=\"d-md-none bb-text-bold\">\n                  <ng-container\n                    i18n=\"\n                      @bb-payord-breach-limit-details-breach-currency-table-heading.responsive\n                    \"\n                  >\n                    Limit\n                  </ng-container>\n                  <ng-container *ngIf=\"breachReportCurrency\"\n                    >({{ breachReportCurrency }})</ng-container\n                  >&nbsp;\n                </span>\n                <bb-amount-ui\n                  [amount]=\"breachInfo.currentThreshold\"\n                ></bb-amount-ui>\n              </td>\n\n              <td class=\"bb-table--text-end\" data-role=\"limit-consumed\">\n                <span\n                  class=\"d-md-none bb-text-bold\"\n                  i18n=\"\n                    @bb-payord-breach-limit-details-consumed-table-heading.responsive\n                  \"\n                >\n                  Consumed&nbsp;\n                </span>\n                <ng-container\n                  *ngIf=\"breachInfo.breachedLimitType === 'TRANSACTIONAL'\"\n                >\n                  &mdash;\n                </ng-container>\n                <ng-container\n                  *ngIf=\"breachInfo.breachedLimitType !== 'TRANSACTIONAL'\"\n                >\n                  <bb-amount-ui\n                    [amount]=\"breachInfo.currentConsumption\"\n                  ></bb-amount-ui>\n                </ng-container>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n\n      <div\n        class=\"card card-sm card--highlight card--shadowless\"\n        *ngIf=\"paymentDetails\"\n      >\n        <div class=\"card-body\">\n          <div class=\"row\">\n            <div class=\"col-md-6 bb-block bb-block--md\">\n              <div\n                class=\"bb-text-bold\"\n                i18n=\"@@bb-payord-breach-limit-details-payment-debtor-account\"\n              >\n                From\n              </div>\n              <div>\n                <div class=\"break-word\" data-role=\"debit-account-name\">\n                  {{\n                    paymentDetails.initiator?.alias ||\n                      paymentDetails.initiator?.name\n                  }}\n                </div>\n                <div\n                  class=\"bb-text-support bb-subtitle\"\n                  data-role=\"debit-account-number\"\n                >\n                  {{\n                    paymentDetails.initiator?.accountNumber ||\n                      paymentDetails.initiator?.IBAN\n                  }}\n                </div>\n              </div>\n            </div>\n\n            <div class=\"col-md-6 bb-block bb-block--md\">\n              <div\n                class=\"bb-text-bold\"\n                i18n=\"\n                  @@bb-payord-breach-limit-details-payment-counterparty-account\"\n              >\n                To\n              </div>\n              <div>\n                <div class=\"break-word\" data-role=\"credit-account-name\">\n                  {{\n                    paymentDetails.counterparty?.alias ||\n                      paymentDetails.counterparty?.name\n                  }}\n                </div>\n                <div\n                  class=\"bb-text-support bb-subtitle\"\n                  data-role=\"credit-account-number\"\n                >\n                  {{\n                    paymentDetails.counterparty?.accountNumber ||\n                      paymentDetails.counterparty?.IBAN\n                  }}\n                </div>\n              </div>\n            </div>\n\n            <div class=\"col-md-6 bb-block bb-block--md\">\n              <div\n                class=\"bb-text-bold\"\n                i18n=\"@@bb-payord-breach-limit-details-payment-execution-date\"\n              >\n                Execution date\n              </div>\n              <div>\n                {{ paymentDetails.schedule?.startDate | date: 'mediumDate' }}\n              </div>\n            </div>\n\n            <div class=\"col-md-6\">\n              <div\n                class=\"bb-text-bold\"\n                i18n=\"@@bb-payord-breach-limit-details-payment-amount\"\n              >\n                Amount\n              </div>\n              <div class=\"highlight\">\n                <bb-amount-ui\n                  class=\"bb-amount--currency-space\"\n                  data-role=\"total-amount\"\n                  [amount]=\"paymentDetails.remittanceInfo.amountGroup.amount\"\n                  [currency]=\"\n                    paymentDetails.remittanceInfo.amountGroup.currency\n                  \"\n                  [mapCurrency]=\"false\"\n                ></bb-amount-ui>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </ng-template>\n  </bb-modal-body-ui>\n</bb-modal-ui>\n", components: [{ type: i1__namespace$3.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i1__namespace$3.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i1__namespace.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i1__namespace$3.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: i2__namespace$2.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }], directives: [{ type: i1__namespace$3.CustomModalHeaderDirective, selector: "ng-template[bbCustomModalHeader]" }, { type: i1__namespace$3.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2__namespace.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i2__namespace.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }], pipes: { "titlecase": i2__namespace.TitleCasePipe, "date": i2__namespace.DatePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: BreachLimitDetailsModalComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-breach-limit-details',
                        templateUrl: 'breach-limit-details.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], propDecorators: { paymentDetails: [{
                    type: i0.Input
                }], error: [{
                    type: i0.Input
                }], isOpen: [{
                    type: i0.Input
                }], close: [{
                    type: i0.Output
                }] } });

    var PayordCardMenuComponent = /** @class */ (function () {
        function PayordCardMenuComponent(config) {
            /**
             * List of tab items.
             * Default is empty list.
             */
            this.items = [];
            /**
             * Initial selected tab item.
             * Default is `0`.
             */
            this.initialSelection = 0;
            /**
             * Select event emitted when a new tab item has been selected.
             */
            // eslint-disable-next-line @angular-eslint/no-output-native
            this.select = new i0.EventEmitter();
            this.activeItem = 0;
            config.container = 'body';
        }
        PayordCardMenuComponent.prototype.ngAfterViewInit = function () {
            if (this.items) {
                this.activeItem = this.items[this.initialSelection]
                    ? this.initialSelection
                    : 0;
            }
        };
        PayordCardMenuComponent.prototype.onSelect = function (index) {
            this.activeItem = index;
            this.select.emit(this.items[index]);
        };
        PayordCardMenuComponent.prototype.trackByName = function (index, item) {
            return item.name;
        };
        return PayordCardMenuComponent;
    }());
    /** @nocollapse */ PayordCardMenuComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordCardMenuComponent, deps: [{ token: i6__namespace.NgbTooltipConfig }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ PayordCardMenuComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordCardMenuComponent, selector: "bb-payord-card-menu", inputs: { items: "items", initialSelection: "initialSelection" }, outputs: { select: "select" }, providers: [i6.NgbTooltipConfig], ngImport: i0__namespace, template: "<div class=\"bb-card-menu bb-stack manual-batches-type-select overflow-auto\">\n  <div\n    class=\"bb-card-menu__option bb-stack__item manual-batches-type-select__button\"\n    [class.selected]=\"i === activeItem\"\n    role=\"button\"\n    tabindex=\"0\"\n    (bbKeyboardClick)=\"onSelect(i)\"\n    *ngFor=\"let item of items; trackBy: trackByName; let i = index\"\n  >\n    <bb-ellipsis-ui\n      [text]=\"item.name\"\n      tooltipTriggers=\"hover\"\n      class=\"bb-text-bold\"\n    >\n    </bb-ellipsis-ui>\n    <ng-container *ngIf=\"item.description\">\n      <bb-ellipsis-ui\n        [text]=\"item.description\"\n        tooltipTriggers=\"hover\"\n        [lineClamp]=\"2\"\n        class=\"bb-subheader bb-subheader--regular\"\n      ></bb-ellipsis-ui>\n    </ng-container>\n  </div>\n</div>\n", components: [{ type: i1__namespace$4.EllipsisComponent, selector: "bb-ellipsis-ui", inputs: ["text", "tooltipTriggers", "lineClamp"] }], directives: [{ type: i2__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i10__namespace.KeyboardClickDirective, selector: "[bbKeyboardClick]", outputs: ["bbKeyboardClick"] }, { type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordCardMenuComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-payord-card-menu',
                        templateUrl: 'card-menu.component.html',
                        providers: [i6.NgbTooltipConfig],
                    }]
            }], ctorParameters: function () { return [{ type: i6__namespace.NgbTooltipConfig }]; }, propDecorators: { items: [{
                    type: i0.Input
                }], initialSelection: [{
                    type: i0.Input
                }], select: [{
                    type: i0.Output
                }] } });

    var SelectPurposeDropdownComponent = /** @class */ (function () {
        function SelectPurposeDropdownComponent() {
            this.search = new i1$1.FormControl();
            this.filteredPurposes = [];
            /**
             * Description length to show tooltip along
             */
            this.longDescription = 150;
            /**
             * Helper text for the component. Defaults to empty string.
             */
            this.helperText = '';
            /**
             * Placeholder text. Defaults to empty string.
             */
            this.placeholder = '';
            /**
             * Label of the component. Defaults to empty string.
             */
            this.label = '';
            /**
             * Placeholder fot search. Defaults to empty string.
             */
            this.searchPlaceholder = '';
            /**
             * Icon for the dropdown. Defaults to `toggle-down`
             */
            this.dropdownIcon = 'toggle-down';
            /**
             * Emits value when a country is selected
             */
            this.selectPurpose = new i0.EventEmitter();
        }
        Object.defineProperty(SelectPurposeDropdownComponent.prototype, "purposes", {
            /**
             * Array of country iso codes
             */
            set: function (purposes) {
                this._purposes = purposes || [];
                this.setupPurposes();
            },
            enumerable: false,
            configurable: true
        });
        SelectPurposeDropdownComponent.prototype.getSelectedPurposeFull = function (purposeCode) {
            return (this._purposes.find(function (item) { return (item === null || item === void 0 ? void 0 : item.code) === purposeCode; }) || {
                code: purposeCode,
                description: '',
            });
        };
        SelectPurposeDropdownComponent.prototype.setupPurposes = function () {
            this.purposeEntries = this._purposes.map(function (purpose) { return [
                purpose.code,
                purpose.description,
            ]; });
            this.filteredPurposes = __spreadArray([], __read(this._purposes));
        };
        SelectPurposeDropdownComponent.prototype.selectItem = function (purpose) {
            this.selectedPurpose = purpose.code;
            this.selectPurpose.emit(purpose.code);
            if (this.search.value) {
                this.search.reset();
            }
        };
        SelectPurposeDropdownComponent.prototype.handleSearch = function (query) {
            if (query === void 0) { query = ''; }
            if (query) {
                this.filteredPurposes = this.purposeEntries.reduce(function (acc, _a) {
                    var _b = __read(_a, 2), code = _b[0], description = _b[1];
                    if (code.toLocaleLowerCase().indexOf(query.toLocaleLowerCase()) > -1 ||
                        description.toLocaleLowerCase().indexOf(query.toLocaleLowerCase()) >
                            -1) {
                        acc.push({ code: code, description: description });
                    }
                    return acc;
                }, []);
            }
            else {
                this.filteredPurposes = this._purposes;
            }
        };
        SelectPurposeDropdownComponent.prototype.onChange = function () { };
        SelectPurposeDropdownComponent.prototype.onTouched = function () { };
        SelectPurposeDropdownComponent.prototype.writeValue = function () { };
        SelectPurposeDropdownComponent.prototype.registerOnChange = function (fn) {
            this.onChange = fn;
        };
        SelectPurposeDropdownComponent.prototype.registerOnTouched = function (fn) {
            this.onTouched = fn;
        };
        return SelectPurposeDropdownComponent;
    }());
    /** @nocollapse */ SelectPurposeDropdownComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: SelectPurposeDropdownComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ SelectPurposeDropdownComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: SelectPurposeDropdownComponent, selector: "bb-select-purpose-dropdown", inputs: { longDescription: "longDescription", purposes: "purposes", isOptional: "isOptional", selectedPurpose: "selectedPurpose", helperText: "helperText", placeholder: "placeholder", label: "label", searchPlaceholder: "searchPlaceholder", dropdownIcon: "dropdownIcon" }, outputs: { selectPurpose: "selectPurpose" }, providers: [
            {
                provide: i1$1.NG_VALUE_ACCESSOR,
                multi: true,
                useExisting: i0.forwardRef((function () { return SelectPurposeDropdownComponent; })),
            },
        ], ngImport: i0__namespace, template: "<div\n  class=\"bb-dynamic-input bb-select-purpose-dropdown\"\n  ngbDropdown\n  #dropdown=\"ngbDropdown\"\n  display=\"static\"\n>\n  <div class=\"d-inline-block bb-label\" (click)=\"btn.focus()\" *ngIf=\"label\">\n    {{ label }}\n  </div>\n  <span\n    class=\"bb-dynamic-input__helper-text bb-text-support\"\n    *ngIf=\"isOptional && helperText\"\n    [id]=\"searchElem?.id + '__helper-text'\"\n    [textContent]=\"helperText\"\n  >\n  </span>\n  <div>\n    <button\n      #btn\n      bbButton\n      ngbDropdownToggle\n      color=\"unstyled\"\n      (blur)=\"onTouched()\"\n      data-role=\"open-purpose-dropdown-list-button\"\n      [attr.aria-label]=\"label\"\n      class=\"bb-select-purpose-dropdown__toggle form-control w-100 pr-5 d-flex justify-content-between bb-text-support\"\n    >\n      <ng-container *ngIf=\"selectedPurpose\">\n        <ng-container\n          *ngTemplateOutlet=\"\n            selectedPurposeTmpl;\n            context: { $implicit: getSelectedPurposeFull(selectedPurpose) }\n          \"\n        ></ng-container>\n      </ng-container>\n      <ng-container *ngIf=\"!selectedPurpose\">\n        <ng-container\n          *ngIf=\"placeholder; else defaultPlaceHolder\"\n        ></ng-container>\n        {{ placeholder }}\n      </ng-container>\n      <bb-icon-ui [name]=\"dropdownIcon || 'toggle-down'\"></bb-icon-ui>\n    </button>\n  </div>\n\n  <div ngbDropdownMenu class=\"dropdown-menu dropdown-menu-right w-100\">\n    <div class=\"bb-block bb-block--md px-3\">\n      <bb-search-box-ui\n        (focus)=\"dropdown.open()\"\n        [formControl]=\"search\"\n        (clear)=\"handleSearch('')\"\n        data-role=\"purpose-search\"\n        (ngModelChange)=\"handleSearch(search.value)\"\n        [placeholder]=\"searchPlaceholder || 'Search'\"\n        [showSearch]=\"true\"\n        [showClear]=\"true\"\n        [autocomplete]=\"'off'\"\n        #searchElem\n      >\n      </bb-search-box-ui>\n    </div>\n\n    <bb-payments-sr-search-result-info [totalNumber]=\"filteredPurposes?.length\">\n    </bb-payments-sr-search-result-info>\n\n    <div\n      *ngIf=\"filteredPurposes?.length\"\n      class=\"pre-scrollable\"\n      data-role=\"list-pop-values\"\n    >\n      <button\n        *ngFor=\"let purpose of filteredPurposes\"\n        role=\"menuitem\"\n        type=\"button\"\n        class=\"d-sm-flex px-3 py-2 d-flex-row align-items-center btn--unstyled\"\n        (bbKeyboardClick)=\"selectItem(purpose)\"\n        ngbDropdownItem\n      >\n        <ng-container\n          *ngTemplateOutlet=\"\n            purpose?.description?.length < longDescription\n              ? purposeTmpl\n              : purposeTmplLong;\n            context: { $implicit: purpose }\n          \"\n        ></ng-container>\n      </button>\n    </div>\n    <ng-container *ngIf=\"!filteredPurposes?.length && search?.value\">\n      <ng-container *ngTemplateOutlet=\"emptySearch\"></ng-container>\n    </ng-container>\n    <ng-container *ngIf=\"!filteredPurposes?.length && !search?.value\">\n      <ng-container *ngTemplateOutlet=\"empty\"></ng-container>\n    </ng-container>\n  </div>\n</div>\n\n<ng-template let-purpose #purposeTmplLong>\n  <div\n    class=\"d-flex justify-content-between align-items-center w-100\"\n    data-role=\"long-pop-desc\"\n  >\n    <div class=\"bb-stack\">\n      <div class=\"bb-stack__item bb-stack__item--align-top\">\n        {{ purpose.code }}\n      </div>\n      <div\n        class=\"bb-stack__item bb-text-support bb-product-selector__item-content\"\n        [bbTooltip]=\"tipContent\"\n        placement=\"right\"\n        [triggers]=\"'hover'\"\n        [container]=\"'body'\"\n      >\n        <bb-ellipsis-ui [lineClamp]=\"5\">{{\n          purpose.description\n        }}</bb-ellipsis-ui>\n      </div>\n    </div>\n  </div>\n  <ng-template #tipContent\n    ><div class=\"bb-text-align-left\">\n      {{ purpose.description }}\n    </div></ng-template\n  >\n</ng-template>\n\n<ng-template let-purpose #purposeTmpl>\n  <div\n    class=\"d-flex justify-content-between align-items-center w-100\"\n    data-role=\"short-pop-desc\"\n  >\n    <div class=\"bb-stack\">\n      <div class=\"bb-stack__item bb-stack__item--align-top\">\n        {{ purpose.code }}\n      </div>\n      <div\n        class=\"bb-stack__item bb-text-support bb-product-selector__item-content\"\n      >\n        {{ purpose.description }}\n      </div>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template let-purpose #selectedPurposeTmpl>\n  <div class=\"d-flex justify-content-between align-items-center w-100\">\n    <div class=\"bb-stack\">\n      <div class=\"bb-stack__item bb-stack__item--align-top\">\n        {{ purpose.code }}\n      </div>\n      <div\n        class=\"bb-stack__item bb-text-support bb-ellipsis bb-ellipsis--single-line\"\n        [bbTooltip]=\"tipContent\"\n        placement=\"bottom\"\n        [triggers]=\"'hover'\"\n        data-role=\"pop-description\"\n      >\n        {{ purpose.description }}\n      </div>\n    </div>\n  </div>\n  <ng-template #tipContent\n    ><div class=\"bb-text-align-left\">\n      {{ purpose.description }}\n    </div></ng-template\n  >\n</ng-template>\n\n<ng-template #emptySearch>\n  <div class=\"card-body\">\n    <bb-empty-state-ui\n      data-role=\"no-templates-found\"\n      title=\"No search results\"\n      i18n-title=\"@@bb-select-purpose-dropdown.empty-state-title\"\n      [showIcon]=\"false\"\n    ></bb-empty-state-ui>\n  </div>\n</ng-template>\n\n<ng-template #empty>\n  <div class=\"card-body\">\n    <bb-empty-state-ui\n      data-role=\"no-templates-provided\"\n      title=\"No Purposes Provided\"\n      i18n-title=\"@@bb-select-purpose-dropdown.empty-title\"\n    ></bb-empty-state-ui>\n  </div>\n</ng-template>\n\n<ng-template #defaultPlaceHolder>\n  <ng-container i18n=\"@@purpose-selector-default-placeholder\"\n    >- select a purpose -</ng-container\n  >\n</ng-template>\n", components: [{ type: i1__namespace.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i2__namespace$1.SearchBoxComponent, selector: "bb-search-box-ui", inputs: ["placeholder", "maxLength", "squareBorder", "typeaheadOptions", "showSearch", "showClear", "searchLabel", "clearLabel", "autocomplete"], outputs: ["submit", "clear", "valueChange"] }, { type: PaymentsSrSearchResultInfoComponent, selector: "bb-payments-sr-search-result-info", inputs: ["totalNumber"] }, { type: i1__namespace$4.EllipsisComponent, selector: "bb-ellipsis-ui", inputs: ["text", "tooltipTriggers", "lineClamp"] }, { type: i5__namespace.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i6__namespace.NgbDropdown, selector: "[ngbDropdown]", inputs: ["open", "placement", "container", "autoClose", "display", "dropdownClass"], outputs: ["openChange"], exportAs: ["ngbDropdown"] }, { type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i7__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i6__namespace.NgbDropdownToggle, selector: "[ngbDropdownToggle]" }, { type: i2__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i6__namespace.NgbDropdownMenu, selector: "[ngbDropdownMenu]" }, { type: i1__namespace$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$1.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i2__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i6__namespace.NgbDropdownItem, selector: "[ngbDropdownItem]", inputs: ["disabled"] }, { type: i10__namespace.KeyboardClickDirective, selector: "[bbKeyboardClick]", outputs: ["bbKeyboardClick"] }, { type: i9__namespace.TooltipDirective, selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: SelectPurposeDropdownComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-select-purpose-dropdown',
                        templateUrl: './select-purpose-dropdown.component.html',
                        providers: [
                            {
                                provide: i1$1.NG_VALUE_ACCESSOR,
                                multi: true,
                                useExisting: i0.forwardRef((function () { return SelectPurposeDropdownComponent; })),
                            },
                        ],
                    }]
            }], propDecorators: { longDescription: [{
                    type: i0.Input
                }], purposes: [{
                    type: i0.Input
                }], isOptional: [{
                    type: i0.Input
                }], selectedPurpose: [{
                    type: i0.Input
                }], helperText: [{
                    type: i0.Input
                }], placeholder: [{
                    type: i0.Input
                }], label: [{
                    type: i0.Input
                }], searchPlaceholder: [{
                    type: i0.Input
                }], dropdownIcon: [{
                    type: i0.Input
                }], selectPurpose: [{
                    type: i0.Output
                }] } });

    var RoutableModalService = /** @class */ (function () {
        function RoutableModalService(router) {
            this.router = router;
        }
        RoutableModalService.prototype.openModal = function (modalName) {
            var _a;
            if (modalName) {
                this.router.navigate([], {
                    queryParams: (_a = {}, _a[RoutableModalParamName] = modalName, _a),
                    queryParamsHandling: 'merge',
                });
            }
        };
        RoutableModalService.prototype.closeModal = function () {
            var _a;
            this.router.navigate([], {
                queryParams: (_a = {}, _a[RoutableModalParamName] = null, _a),
                queryParamsHandling: 'merge',
            });
        };
        return RoutableModalService;
    }());
    /** @nocollapse */ RoutableModalService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: RoutableModalService, deps: [{ token: i1__namespace$5.Router }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ RoutableModalService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: RoutableModalService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: RoutableModalService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$5.Router }]; } });

    var RoutableModalComponent = /** @class */ (function () {
        function RoutableModalComponent(route, modalService, eventBus) {
            this.route = route;
            this.modalService = modalService;
            this.eventBus = eventBus;
            /**
             * Flag to show close button
             */
            this.closeButton = false;
            /**
             * Modal window name (url friendly, without spaces)
             */
            this.modalWindowName = '';
            /**
             * Flag to show modal header
             */
            this.showHeader = true;
            /**
             * Modal Title
             */
            this.modalTitle = '';
            /**
             * Modal Title Icon
             */
            this.modalTitleIcon = '';
            /**
             * Modal heading type (h1-h6)
             */
            this.modalHeadingType = 'h2';
            /**
             * Event emitted when the modal visibility has changed
             */
            this.visibilityChange = new i0.EventEmitter();
            this.isModalOpen$ = new rxjs.BehaviorSubject(false);
            this.defaultModalOptions = {
                backdrop: 'static',
                keyboard: false,
                size: 'lg',
                animation: false,
                scrollable: false,
                windowClass: '',
            };
        }
        RoutableModalComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.unsubscribeEvent = this.eventBus.subscribe(this.modalWindowName, function () {
                _this.modalService.openModal(_this.modalWindowName);
            });
            this.subscription = this.route.queryParams.subscribe(function (params) {
                if (params[RoutableModalParamName] === _this.modalWindowName &&
                    !_this.isModalOpen$.value) {
                    _this.openModal();
                }
                else if (_this.isModalOpen$.value) {
                    _this.closeModal();
                }
            });
        };
        RoutableModalComponent.prototype.ngOnDestroy = function () {
            var _a, _b;
            (_a = this.subscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
            (_b = this.unsubscribeEvent) === null || _b === void 0 ? void 0 : _b.call(this);
        };
        RoutableModalComponent.prototype.openModal = function () {
            this.isModalOpen$.next(true);
            this.visibilityChange.emit(true);
        };
        RoutableModalComponent.prototype.closeModal = function () {
            this.isModalOpen$.next(false);
            this.visibilityChange.emit(false);
            this.modalService.closeModal();
        };
        return RoutableModalComponent;
    }());
    /** @nocollapse */ RoutableModalComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: RoutableModalComponent, deps: [{ token: i1__namespace$5.ActivatedRoute }, { token: RoutableModalService }, { token: webSdk.PUBSUB }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ RoutableModalComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: RoutableModalComponent, selector: "bb-routable-modal", inputs: { modalOptions: "modalOptions", closeButton: "closeButton", modalWindowName: "modalWindowName", showHeader: "showHeader", modalTitle: "modalTitle", modalTitleIcon: "modalTitleIcon", modalHeadingType: "modalHeadingType" }, outputs: { visibilityChange: "visibilityChange" }, ngImport: i0__namespace, template: "\n    <bb-modal-ui\n      class=\"bb-modal-container\"\n      [isOpen]=\"isModalOpen$ | async\"\n      [modalOptions]=\"modalOptions || defaultModalOptions\"\n      (dismissCallback)=\"closeModal()\"\n    >\n      <bb-modal-header-ui *ngIf=\"showHeader\">\n        <ng-template bbCustomModalHeader>\n          <div class=\"bb-stack bb-stack--density-xs\">\n            <div class=\"bb-stack__item\" *ngIf=\"modalTitleIcon\">\n              <bb-icon-ui\n                [name]=\"modalTitleIcon\"\n                class=\"bb-text-disabled bb-modal-container__header-icon\"\n              >\n              </bb-icon-ui>\n            </div>\n\n            <div class=\"bb-stack__item\" *ngIf=\"modalTitle\">\n              <bb-header-ui\n                class=\"bb-modal-container__header-title\"\n                [headingType]=\"modalHeadingType\"\n                [heading]=\"modalTitle\"\n              ></bb-header-ui>\n            </div>\n\n            <div\n              class=\"bb-stack__item bb-stack__item--push-right\"\n              *ngIf=\"closeButton\"\n            >\n              <button\n                bbButton\n                class=\"bb-modal-container__close-btn bb-text-support\"\n                circle=\"true\"\n                buttonSize=\"sm\"\n                color=\"unstyled\"\n                (click)=\"closeModal()\"\n                aria-label=\"Close modal dialog\"\n                i18n-aria-label=\"\n                  Close template detail dialog@@modal-container.close-btn\"\n              >\n                <bb-icon-ui color=\"muted\" name=\"clear\"></bb-icon-ui>\n              </button>\n            </div>\n          </div>\n        </ng-template>\n      </bb-modal-header-ui>\n      <bb-modal-body-ui>\n        <ng-template bbCustomModalBody>\n          <ng-content></ng-content>\n        </ng-template>\n      </bb-modal-body-ui>\n    </bb-modal-ui>\n  ", isInline: true, components: [{ type: i1__namespace$3.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i1__namespace$3.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i1__namespace.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i3__namespace$2.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i1__namespace$3.ModalBodyComponent, selector: "bb-modal-body-ui" }], directives: [{ type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace$3.CustomModalHeaderDirective, selector: "ng-template[bbCustomModalHeader]" }, { type: i7__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i1__namespace$3.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }], pipes: { "async": i2__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: RoutableModalComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-routable-modal',
                        template: "\n    <bb-modal-ui\n      class=\"bb-modal-container\"\n      [isOpen]=\"isModalOpen$ | async\"\n      [modalOptions]=\"modalOptions || defaultModalOptions\"\n      (dismissCallback)=\"closeModal()\"\n    >\n      <bb-modal-header-ui *ngIf=\"showHeader\">\n        <ng-template bbCustomModalHeader>\n          <div class=\"bb-stack bb-stack--density-xs\">\n            <div class=\"bb-stack__item\" *ngIf=\"modalTitleIcon\">\n              <bb-icon-ui\n                [name]=\"modalTitleIcon\"\n                class=\"bb-text-disabled bb-modal-container__header-icon\"\n              >\n              </bb-icon-ui>\n            </div>\n\n            <div class=\"bb-stack__item\" *ngIf=\"modalTitle\">\n              <bb-header-ui\n                class=\"bb-modal-container__header-title\"\n                [headingType]=\"modalHeadingType\"\n                [heading]=\"modalTitle\"\n              ></bb-header-ui>\n            </div>\n\n            <div\n              class=\"bb-stack__item bb-stack__item--push-right\"\n              *ngIf=\"closeButton\"\n            >\n              <button\n                bbButton\n                class=\"bb-modal-container__close-btn bb-text-support\"\n                circle=\"true\"\n                buttonSize=\"sm\"\n                color=\"unstyled\"\n                (click)=\"closeModal()\"\n                aria-label=\"Close modal dialog\"\n                i18n-aria-label=\"\n                  Close template detail dialog@@modal-container.close-btn\"\n              >\n                <bb-icon-ui color=\"muted\" name=\"clear\"></bb-icon-ui>\n              </button>\n            </div>\n          </div>\n        </ng-template>\n      </bb-modal-header-ui>\n      <bb-modal-body-ui>\n        <ng-template bbCustomModalBody>\n          <ng-content></ng-content>\n        </ng-template>\n      </bb-modal-body-ui>\n    </bb-modal-ui>\n  ",
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace$5.ActivatedRoute }, { type: RoutableModalService }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [webSdk.PUBSUB]
                        }] }];
        }, propDecorators: { modalOptions: [{
                    type: i0.Input
                }], closeButton: [{
                    type: i0.Input
                }], modalWindowName: [{
                    type: i0.Input
                }], showHeader: [{
                    type: i0.Input
                }], modalTitle: [{
                    type: i0.Input
                }], modalTitleIcon: [{
                    type: i0.Input
                }], modalHeadingType: [{
                    type: i0.Input
                }], visibilityChange: [{
                    type: i0.Output
                }] } });

    var ModalContainerParamName = 'modalOpened';
    var HorizontalListSelectorComponent = /** @class */ (function () {
        function HorizontalListSelectorComponent() {
            /**
             * List items
             */
            this.options = [];
            /**
             * Flag to denote if the list is preselected. Defaults to true.
             */
            this.preselect = true;
            /**
             * Event emitted on select of an item
             */
            // eslint-disable-next-line @angular-eslint/no-output-native
            this.select = new i0.EventEmitter();
        }
        HorizontalListSelectorComponent.prototype.ngOnInit = function () {
            var _a;
            if (this.preselect && !this.activeItem) {
                this.select.emit((_a = this.options[0]) === null || _a === void 0 ? void 0 : _a.value);
            }
        };
        HorizontalListSelectorComponent.prototype.onSelect = function (value) {
            this.select.emit(value);
        };
        return HorizontalListSelectorComponent;
    }());
    /** @nocollapse */ HorizontalListSelectorComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: HorizontalListSelectorComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ HorizontalListSelectorComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: HorizontalListSelectorComponent, selector: "bb-horizontal-list-selector", inputs: { options: "options", activeItem: "activeItem", preselect: "preselect" }, outputs: { select: "select" }, ngImport: i0__namespace, template: "\n    <div class=\"bb-horizontal-list-selector\" role=\"tablist\">\n      <ng-container *ngFor=\"let option of options\">\n        <button\n          class=\"bb-horizontal-list-selector__item\"\n          bbButton\n          color=\"unstyled\"\n          role=\"tab\"\n          [attr.aria-selected]=\"activeItem === option.value\"\n          [attr.aria-controls]=\"option.value\"\n          [ngClass]=\"{\n            'bb-horizontal-list-selector__item--active':\n              activeItem === option.value\n          }\"\n          (bbKeyboardClick)=\"onSelect(option.value)\"\n        >\n          <div #elem>\n            {{ option.label }}\n          </div>\n          <div\n            class=\"bb-subheader bb-subheader--regular text-wrap\"\n            *ngIf=\"option.description\"\n            [style.width.px]=\"elem.offsetWidth\"\n          >\n            <bb-ellipsis-ui\n              [text]=\"option.description\"\n              tooltipTriggers=\"hover\"\n              [lineClamp]=\"2\"\n              class=\"bb-subheader bb-subheader--regular\"\n            ></bb-ellipsis-ui>\n          </div>\n        </button>\n      </ng-container>\n    </div>\n  ", isInline: true, components: [{ type: i1__namespace$4.EllipsisComponent, selector: "bb-ellipsis-ui", inputs: ["text", "tooltipTriggers", "lineClamp"] }], directives: [{ type: i2__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i7__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i2__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i10__namespace.KeyboardClickDirective, selector: "[bbKeyboardClick]", outputs: ["bbKeyboardClick"] }, { type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: HorizontalListSelectorComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-horizontal-list-selector',
                        template: "\n    <div class=\"bb-horizontal-list-selector\" role=\"tablist\">\n      <ng-container *ngFor=\"let option of options\">\n        <button\n          class=\"bb-horizontal-list-selector__item\"\n          bbButton\n          color=\"unstyled\"\n          role=\"tab\"\n          [attr.aria-selected]=\"activeItem === option.value\"\n          [attr.aria-controls]=\"option.value\"\n          [ngClass]=\"{\n            'bb-horizontal-list-selector__item--active':\n              activeItem === option.value\n          }\"\n          (bbKeyboardClick)=\"onSelect(option.value)\"\n        >\n          <div #elem>\n            {{ option.label }}\n          </div>\n          <div\n            class=\"bb-subheader bb-subheader--regular text-wrap\"\n            *ngIf=\"option.description\"\n            [style.width.px]=\"elem.offsetWidth\"\n          >\n            <bb-ellipsis-ui\n              [text]=\"option.description\"\n              tooltipTriggers=\"hover\"\n              [lineClamp]=\"2\"\n              class=\"bb-subheader bb-subheader--regular\"\n            ></bb-ellipsis-ui>\n          </div>\n        </button>\n      </ng-container>\n    </div>\n  ",
                    }]
            }], propDecorators: { options: [{
                    type: i0.Input
                }], activeItem: [{
                    type: i0.Input
                }], preselect: [{
                    type: i0.Input
                }], select: [{
                    type: i0.Output
                }] } });

    var PaymentTemplateSelectorComponent = /** @class */ (function () {
        function PaymentTemplateSelectorComponent(deprecationsService) {
            this.deprecationsService = deprecationsService;
            /**
             * Flag indicates if the list is loading.
             * Default value is `false`.
             */
            this.loading = false;
            /**
             * Name of the template selector.
             * Default value is ``
             */
            this.templateName = '';
            /**
             * Emits the values for the payment form.
             */
            this.setValues = new i0.EventEmitter();
            /**
             * Event emmiter for loading payment templates.
             */
            this.loadMoreTemplates = new i0.EventEmitter();
            /**
             * Event emmiter for search payment templates.
             */
            this.searchTemplates = new i0.EventEmitter();
            /**
             * Event emmiter for clear the payment form.
             */
            this.clear = new i0.EventEmitter();
            this.searchTerm = new rxjs.BehaviorSubject('');
        }
        Object.defineProperty(PaymentTemplateSelectorComponent.prototype, "searchValue", {
            /**
             * Term value on searching a template
             */
            set: function (term) {
                this.onSearchPaymentTemplates(term);
                this.searchModel = term;
            },
            enumerable: false,
            configurable: true
        });
        PaymentTemplateSelectorComponent.prototype.loadMore = function (page) {
            this.loadMoreTemplates.emit(page);
        };
        PaymentTemplateSelectorComponent.prototype.onSetValues = function (acc) {
            this.setValues.emit(acc);
        };
        PaymentTemplateSelectorComponent.prototype.onSearchPaymentTemplates = function (value) {
            this.searchTemplates.emit(value);
            this.searchTerm.next(value);
        };
        PaymentTemplateSelectorComponent.prototype.onClearForm = function (name) {
            this.clear.emit(name);
            this.templateName = name;
        };
        PaymentTemplateSelectorComponent.prototype.ngOnInit = function () {
            var _this = this;
            if (this.templatesList) {
                this.deprecationsService.logDeprecatedFeature("The templatesList property has been deprecated since 3.9.1 and will be removed in 3.10.0.");
            }
            this.items = this.items.pipe(operators.tap(function (templateItems) {
                var _a;
                return (_this.templatesCount =
                    (_a = _this.templatesCount) !== null && _a !== void 0 ? _a : templateItems.totalCount);
            }));
        };
        return PaymentTemplateSelectorComponent;
    }());
    /** @nocollapse */ PaymentTemplateSelectorComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentTemplateSelectorComponent, deps: [{ token: i1__namespace$6.DeprecationsService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ PaymentTemplateSelectorComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PaymentTemplateSelectorComponent, selector: "bb-payment-template-selector", inputs: { items: "items", templatesList: "templatesList", paymentTemplateSearch: "paymentTemplateSearch", loading: "loading", templateName: "templateName", searchValue: "searchValue" }, outputs: { setValues: "setValues", loadMoreTemplates: "loadMoreTemplates", searchTemplates: "searchTemplates", clear: "clear" }, ngImport: i0__namespace, template: "<ng-container *ngIf=\"items | async as paymentTemplates\">\n  <div *ngIf=\"templatesCount\" class=\"bb-block bb-block--lg\">\n    <bb-dropdown-menu-ui\n      position=\"bottom-left\"\n      buttonSize=\"sm\"\n      btnColor=\"secondary\"\n      container=\"body\"\n      (click)=\"$event.stopPropagation()\"\n      (keyUp.enter)=\"$event.stopPropagation()\"\n      data-role=\"payment-template-selector-dropdown\"\n      ariaLabel=\"Payment template DropDown button\"\n      i18n-ariaLabel=\"@@omni-payment-template-selector.dropdown\"\n    >\n      <ng-template bbDropdownLabel>\n        <span\n          class=\"bb-payment-template-selector__placeholder bb-ellipsis bb-ellipsis--single-line\"\n        >\n          <ng-container *ngIf=\"templateName\">{{ templateName }}</ng-container>\n          <ng-container\n            *ngIf=\"!templateName\"\n            i18n=\"@@omni-payment-template-selector.label\"\n            >Select a template\n          </ng-container>\n        </span>\n        <bb-icon-ui name=\"caret-down\" size=\"md\"></bb-icon-ui>\n      </ng-template>\n      <ng-template bbDropdownMenuItem>\n        <div class=\"bb-payment-template-selector__list-container\">\n          <div class=\"bb-payment-template-selector__search-box-container\">\n            <div\n              class=\"bb-payment-template-selector__search-box\"\n              [ngClass]=\"{ 'bb-block--sm': (searchTerm | async) }\"\n            >\n              <bb-search-box-ui\n                data-role=\"search-template\"\n                #searchBox\n                aria-label=\"Search template name\"\n                i18n-aria-label=\"@@template-selector-search-template-label\"\n                [showSearch]=\"true\"\n                [showClear]=\"true\"\n                [ngModel]=\"searchModel\"\n                placeholder=\"Search template name\"\n                i18n-placeholder=\"\n                  @@template-selector-search-template-placeholder\"\n                (valueChange)=\"onSearchPaymentTemplates($event)\"\n                (clear)=\"onSearchPaymentTemplates('')\"\n              >\n              </bb-search-box-ui>\n            </div>\n            <ng-container *ngIf=\"(searchTerm | async) && !loading\">\n              <bb-payments-sr-search-result-info\n                [totalNumber]=\"paymentTemplates.totalCount\"\n              >\n              </bb-payments-sr-search-result-info>\n              <div class=\"bb-block bb-block--xs\"></div>\n              <div\n                *ngIf=\"paymentTemplates?.items?.length\"\n                data-role=\"results-found\"\n                i18n=\"@@omni-payment-template-selector.results-found\"\n              >\n                {paymentTemplates?.items?.length, plural, =1 {1 result found}\n                other\n                {{{paymentTemplates?.items?.length}} results found}}\n              </div>\n            </ng-container>\n          </div>\n          <div class=\"bb-infinite-scroll-container\">\n            <bb-infinite-scroll-ui\n              class=\"bb-infinite-scroll\"\n              [disableScrollEnd]=\"\n                loading ||\n                paymentTemplates?.items?.length === paymentTemplates?.totalCount\n              \"\n              [offset]=\"5\"\n              (scrollEnd)=\"loadMore(1)\"\n            >\n              <ng-container\n                *ngIf=\"paymentTemplates?.items?.length; else emptyState\"\n              >\n                <div class=\"bb-list\" *ngIf=\"!loading\">\n                  <div\n                    role=\"menuitem\"\n                    *ngFor=\"let temp of paymentTemplates?.items\"\n                    class=\"dropdown-item btn-link-dark bb-payment-template-selector__item\"\n                    (click)=\"onSetValues(temp)\"\n                    (keydown.enter)=\"onSetValues(temp)\"\n                  >\n                    <div\n                      class=\"bb-ellipsis bb-ellipsis--single-line bb-text-bold\"\n                      data-role=\"template-name\"\n                    >\n                      {{ temp.name }}\n                    </div>\n                    <ng-container\n                      *ngIf=\"\n                        temp.details\n                          .transferTransactionInformation as transactionInfo;\n                        else noBeneficiaryInfo\n                      \"\n                    >\n                      <div\n                        *ngIf=\"\n                          transactionInfo?.counterpartyAccount?.identification\n                            ?.identification ||\n                            transactionInfo?.counterparty?.name;\n                          else noBeneficiaryInfo\n                        \"\n                      >\n                        <div\n                          class=\"bb-subtitle bb-ellipsis bb-ellipsis--single-line\"\n                          data-role=\"template-counterparty-name\"\n                        >\n                          To: {{ transactionInfo.counterparty.name }}\n                        </div>\n                        <div\n                          class=\"bb-subtitle bb-text-support bb-ellipsis bb-ellipsis--single-line\"\n                          data-role=\"template-account\"\n                        >\n                          {{\n                            transactionInfo.counterpartyAccount.identification\n                              .identification\n                          }}\n                        </div>\n                        <div\n                          *ngIf=\"\n                            transactionInfo?.instructedAmount?.amount as amount\n                          \"\n                          class=\"bb-stack bb-subtitle\"\n                        >\n                          <bb-amount-ui\n                            class=\"bb-stack__item bb-stack__item--push-right\"\n                            [currency]=\"\n                              transactionInfo.instructedAmount.currencyCode\n                            \"\n                            [amount]=\"amount\"\n                            [mapCurrency]=\"false\"\n                          ></bb-amount-ui>\n                        </div>\n                      </div>\n                    </ng-container>\n                    <ng-template #noBeneficiaryInfo>\n                      <div\n                        data-role=\"no-beneficiary-info\"\n                        class=\"bb-subtitle bb-text-support\"\n                        i18n=\"\n                          @@omni-payment-template-selector.no-beneficiary-info\"\n                      >\n                        No beneficiary info\n                      </div>\n                    </ng-template>\n                  </div>\n                </div>\n                <p *ngIf=\"loading\">\n                  <bb-loading-indicator-ui></bb-loading-indicator-ui>\n                </p>\n              </ng-container>\n              <ng-template #emptyState>\n                <div class=\"card-body\">\n                  <bb-empty-state-ui\n                    data-role=\"no-templates-found\"\n                    title=\"No Results Found\"\n                    subtitle=\"We can\u2019t find what you\u2019re looking for. Please try a different criteria.\"\n                    iconSize=\"xxl\"\n                    i18n-subtitle=\"\n                      @@omni-payment-template-selector.empty-state-subtitle\"\n                    i18n-title=\"\n                      @@omni-payment-template-selector.empty-state-title\"\n                    iconModifier=\"search\"\n                    [showIcon]=\"true\"\n                  ></bb-empty-state-ui>\n                </div>\n              </ng-template>\n            </bb-infinite-scroll-ui>\n          </div>\n        </div>\n      </ng-template>\n    </bb-dropdown-menu-ui>\n  </div>\n</ng-container>\n", components: [{ type: i2__namespace$3.DropdownMenuComponent, selector: "bb-dropdown-menu-ui", inputs: ["label", "disabled", "options", "icon", "iconSize", "iconColor", "btnColor", "btnCircle", "optionLabelKey", "fullWidth", "autoClose", "container", "position", "ariaLabel", "dropDownMenuRole", "dropDownMenuId", "buttonSize", "dropDownButtonLabel", "visibleElementDependingOnViewport", "role"], outputs: ["select"] }, { type: i1__namespace.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i2__namespace$1.SearchBoxComponent, selector: "bb-search-box-ui", inputs: ["placeholder", "maxLength", "squareBorder", "typeaheadOptions", "showSearch", "showClear", "searchLabel", "clearLabel", "autocomplete"], outputs: ["submit", "clear", "valueChange"] }, { type: PaymentsSrSearchResultInfoComponent, selector: "bb-payments-sr-search-result-info", inputs: ["totalNumber"] }, { type: i6__namespace$2.InfiniteScrollComponent, selector: "bb-infinite-scroll-ui", inputs: ["offset", "debounce", "disableScrollEnd"], outputs: ["scrollEnd"] }, { type: i2__namespace$2.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: i8__namespace.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i5__namespace.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace$3.DropdownLabelDirective, selector: "ng-template[bbDropdownLabel]" }, { type: i2__namespace$3.DropdownMenuItemDirective, selector: "ng-template[bbDropdownMenuItem]" }, { type: i2__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i1__namespace$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i2__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "async": i2__namespace.AsyncPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentTemplateSelectorComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-payment-template-selector',
                        templateUrl: 'payment-template-selector.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$6.DeprecationsService }]; }, propDecorators: { items: [{
                    type: i0.Input
                }], templatesList: [{
                    type: i0.Input
                }], paymentTemplateSearch: [{
                    type: i0.Input
                }], loading: [{
                    type: i0.Input
                }], templateName: [{
                    type: i0.Input
                }], searchValue: [{
                    type: i0.Input
                }], setValues: [{
                    type: i0.Output
                }], loadMoreTemplates: [{
                    type: i0.Output
                }], searchTemplates: [{
                    type: i0.Output
                }], clear: [{
                    type: i0.Output
                }] } });

    var BeneficiaryAccountComponent = /** @class */ (function () {
        function BeneficiaryAccountComponent() {
        }
        Object.defineProperty(BeneficiaryAccountComponent.prototype, "account", {
            get: function () {
                return this._account;
            },
            /**
             * Own account item
             */
            set: function (item) {
                this._account = item;
                if (item) {
                    this.accountNumber = item.BBAN || item.number || '';
                    this.balance = item.availableBalance || item.bookedBalance || 0;
                }
            },
            enumerable: false,
            configurable: true
        });
        return BeneficiaryAccountComponent;
    }());
    /** @nocollapse */ BeneficiaryAccountComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: BeneficiaryAccountComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ BeneficiaryAccountComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: BeneficiaryAccountComponent, selector: "bb-beneficiary-account", inputs: { account: "account" }, ngImport: i0__namespace, template: "<div class=\"bb-stack\">\n  <div class=\"d-none d-md-block bb-stack__item\">\n    <span\n      class=\"sr-only\"\n      i18n=\"@@beneficiary.selector.ui.group.account.own.account\"\n      >Own Account</span\n    >\n    <bb-icon-ui\n      size=\"xl\"\n      color=\"primary\"\n      class=\"bb-stack\"\n      name=\"current-accounts\"\n    >\n    </bb-icon-ui>\n  </div>\n\n  <div class=\"bb-stack__item\">\n    <span\n      class=\"sr-only\"\n      i18n=\"@@beneficiary.selector.ui.account.name.label\"\n      id=\"account_accountNameLabel\"\n    >\n      Account name:\n    </span>\n    <div class=\"bb-text-bold\" data-role=\"beneficiary-account-name-list-item\">\n      {{ account?.name }}\n    </div>\n\n    <span\n      class=\"sr-only\"\n      i18n=\"@@beneficiary.selector.ui.account.number.label\"\n      id=\"account_accountNumberLabel\"\n    >\n      Account number:\n    </span>\n    <div class=\"text-dark\" data-role=\"beneficiary-account-number-list-item\">\n      {{ accountNumber }}\n    </div>\n  </div>\n\n  <ng-container>\n    <div\n      class=\"bb-stack__item bb-stack__item--push-right bb-stack__break--sm-down\"\n    >\n      <span\n        class=\"sr-only\"\n        i18n=\"@@beneficiary.selector.ui.balance.label\"\n        id=\"account_accountBalanceLabel\"\n      >\n        Account balance:\n      </span>\n\n      <bb-amount-ui\n        class=\"bb-text-bold\"\n        [amount]=\"balance\"\n        [mapCurrency]=\"false\"\n        [currency]=\"account?.currency\"\n        [bbHighlight]=\"false\"\n        [attr.data-role]=\"'beneficiary-account-amount-list-item'\"\n      ></bb-amount-ui>\n    </div>\n  </ng-container>\n</div>\n", components: [{ type: i1__namespace.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i2__namespace$2.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }], directives: [{ type: i3__namespace$3.HighlightDirective, selector: "[bbHighlight]", inputs: ["amount", "bbHighlight", "negativeClass", "positiveClass"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: BeneficiaryAccountComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-beneficiary-account',
                        templateUrl: 'beneficiary-account.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], propDecorators: { account: [{
                    type: i0.Input
                }] } });

    var BeneficiaryContactComponent = /** @class */ (function () {
        function BeneficiaryContactComponent() {
        }
        Object.defineProperty(BeneficiaryContactComponent.prototype, "contact", {
            get: function () {
                return this._contact;
            },
            /**
             * Contact item
             */
            set: function (item) {
                this._contact = item;
                if (item === null || item === void 0 ? void 0 : item.accounts[0]) {
                    this.accountNumber =
                        item.accounts[0].accountNumber || item.accounts[0].IBAN || '';
                }
            },
            enumerable: false,
            configurable: true
        });
        return BeneficiaryContactComponent;
    }());
    /** @nocollapse */ BeneficiaryContactComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: BeneficiaryContactComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ BeneficiaryContactComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: BeneficiaryContactComponent, selector: "bb-beneficiary-contact", inputs: { contact: "contact" }, ngImport: i0__namespace, template: "<div class=\"bb-stack\">\n  <div class=\"d-none d-md-block bb-stack__item\">\n    <span class=\"sr-only\" i18n=\"@@beneficiary.selector.ui.group.contacts\"\n      >Contact</span\n    >\n    <bb-icon-ui size=\"xl\" color=\"primary\" class=\"bb-stack\" name=\"contacts\">\n    </bb-icon-ui>\n  </div>\n\n  <div class=\"text-left\">\n    <span\n      class=\"sr-only\"\n      i18n=\"@@beneficiary.selector.ui.contact.account.name.label\"\n      id=\"contact_accountNameLabel\"\n    >\n      Account name:\n    </span>\n    <div class=\"bb-text-bold\" data-role=\"beneficiary-account-name-list-item\">\n      {{ contact?.name }}\n      <ng-container *ngIf=\"contact?.accountName\">\n        - {{contact?.accountName}}</ng-container\n      >\n    </div>\n\n    <span\n      class=\"sr-only\"\n      i18n=\"@@beneficiary.selector.ui.contact.account.number.label\"\n      id=\"contact_accountNumberLabel\"\n    >\n      ; Account number:\n    </span>\n    <div\n      class=\"text-dark\"\n      *ngIf=\"accountNumber\"\n      data-role=\"beneficiary-account-number-list-item\"\n    >\n      {{ accountNumber }}\n    </div>\n  </div>\n</div>\n", components: [{ type: i1__namespace.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: BeneficiaryContactComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-beneficiary-contact',
                        templateUrl: 'beneficiary-contact.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], propDecorators: { contact: [{
                    type: i0.Input
                }] } });

    var KeyboardNavigationDirectiveBase = /** @class */ (function () {
        function KeyboardNavigationDirectiveBase() {
        }
        return KeyboardNavigationDirectiveBase;
    }());
    var KeyboardNavigationItemDirective = /** @class */ (function () {
        function KeyboardNavigationItemDirective(navigator, elementRef) {
            this.navigator = navigator;
            this.elementRef = elementRef;
        }
        return KeyboardNavigationItemDirective;
    }());
    /** @nocollapse */ KeyboardNavigationItemDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: KeyboardNavigationItemDirective, deps: [{ token: i0.forwardRef(function () { return KeyboardNavigationDirective; }) }, { token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ KeyboardNavigationItemDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: KeyboardNavigationItemDirective, selector: "[bbKeyboardNavigationItem]", ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: KeyboardNavigationItemDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbKeyboardNavigationItem]',
                    }]
            }], ctorParameters: function () {
            return [{ type: KeyboardNavigationDirectiveBase, decorators: [{
                            type: i0.Inject,
                            args: [i0.forwardRef(function () { return KeyboardNavigationDirective; })]
                        }] }, { type: i0__namespace.ElementRef }];
        } });
    var KeyboardNavigationAnchorDirective = /** @class */ (function () {
        function KeyboardNavigationAnchorDirective(navigator, elementRef) {
            this.navigator = navigator;
            this.elementRef = elementRef;
            this.nativeElement = this.elementRef.nativeElement;
        }
        return KeyboardNavigationAnchorDirective;
    }());
    /** @nocollapse */ KeyboardNavigationAnchorDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: KeyboardNavigationAnchorDirective, deps: [{ token: i0.forwardRef(function () { return KeyboardNavigationDirective; }) }, { token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ KeyboardNavigationAnchorDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: KeyboardNavigationAnchorDirective, selector: "[bbKeyboardNavigationAnchor]", host: { listeners: { "keydown.ArrowLeft": "navigator.onKeyDown($event)", "keydown.ArrowRight": "navigator.onKeyDown($event)", "keydown.ArrowDown": "navigator.onKeyDown($event)", "keydown.Tab": "navigator.onKeyDown($event)" } }, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: KeyboardNavigationAnchorDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbKeyboardNavigationAnchor]',
                        // eslint-disable-next-line @angular-eslint/no-host-metadata-property
                        host: {
                            '(keydown.ArrowLeft)': 'navigator.onKeyDown($event)',
                            '(keydown.ArrowRight)': 'navigator.onKeyDown($event)',
                            '(keydown.ArrowDown)': 'navigator.onKeyDown($event)',
                            '(keydown.Tab)': 'navigator.onKeyDown($event)',
                        },
                    }]
            }], ctorParameters: function () {
            return [{ type: KeyboardNavigationDirectiveBase, decorators: [{
                            type: i0.Inject,
                            args: [i0.forwardRef(function () { return KeyboardNavigationDirective; })]
                        }] }, { type: i0__namespace.ElementRef }];
        } });
    var KeyboardNavigationListDirective = /** @class */ (function () {
        function KeyboardNavigationListDirective(navigator, elementRef) {
            this.navigator = navigator;
            this.elementRef = elementRef;
            this.nativeElement = this.elementRef.nativeElement;
        }
        return KeyboardNavigationListDirective;
    }());
    /** @nocollapse */ KeyboardNavigationListDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: KeyboardNavigationListDirective, deps: [{ token: i0.forwardRef(function () { return KeyboardNavigationDirective; }) }, { token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ KeyboardNavigationListDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: KeyboardNavigationListDirective, selector: "[bbKeyboardNavigationList]", host: { listeners: { "keydown.ArrowUp": "navigator.onKeyDown($event)", "keydown.ArrowDown": "navigator.onKeyDown($event)", "keydown.Shift": "navigator.onKeyDown($event)", "keydown.Tab": "navigator.onKeyDown($event)", "keydown.Shift.Tab": "navigator.onKeyDown($event)", "keydown.Space": "navigator.onKeyDown($event)", "keydown.Enter": "navigator.onKeyDown($event)" } }, queries: [{ propertyName: "items", predicate: KeyboardNavigationItemDirective, descendants: true }], ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: KeyboardNavigationListDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbKeyboardNavigationList]',
                        // eslint-disable-next-line @angular-eslint/no-host-metadata-property
                        host: {
                            '(keydown.ArrowUp)': 'navigator.onKeyDown($event)',
                            '(keydown.ArrowDown)': 'navigator.onKeyDown($event)',
                            '(keydown.Shift)': 'navigator.onKeyDown($event)',
                            '(keydown.Tab)': 'navigator.onKeyDown($event)',
                            '(keydown.Shift.Tab)': 'navigator.onKeyDown($event)',
                            '(keydown.Space)': 'navigator.onKeyDown($event)',
                            '(keydown.Enter)': 'navigator.onKeyDown($event)',
                        },
                    }]
            }], ctorParameters: function () {
            return [{ type: KeyboardNavigationDirectiveBase, decorators: [{
                            type: i0.Inject,
                            args: [i0.forwardRef(function () { return KeyboardNavigationDirective; })]
                        }] }, { type: i0__namespace.ElementRef }];
        }, propDecorators: { items: [{
                    type: i0.ContentChildren,
                    args: [KeyboardNavigationItemDirective, { descendants: true }]
                }] } });
    var KeyboardNavigationDirective = /** @class */ (function () {
        function KeyboardNavigationDirective(document) {
            this.document = document;
            this._document = this.document;
        }
        KeyboardNavigationDirective.resetItem = function (position, itemElements) {
            if (position === -1) {
                return;
            }
            itemElements[position].removeAttribute('tabindex');
        };
        KeyboardNavigationDirective.resetTabItem = function (position, itemElements) {
            itemElements[position].setAttribute('tabindex', '-1');
        };
        KeyboardNavigationDirective.setItemActive = function (position, itemElements) {
            itemElements[position].setAttribute('tabindex', '0');
            itemElements[position].focus();
        };
        KeyboardNavigationDirective.setPositionUp = function (position) {
            return Math.max(position - 1, 0);
        };
        KeyboardNavigationDirective.setPositionDown = function (position, itemsLength) {
            return Math.min(position + 1, itemsLength - 1);
        };
        KeyboardNavigationDirective.prototype.isEventFromAnchor = function ($event) {
            var _a;
            return !!((_a = this.anchorList) === null || _a === void 0 ? void 0 : _a.find(function (el) { return el.nativeElement.contains($event.target); }));
        };
        KeyboardNavigationDirective.prototype.getListElements = function () {
            var _a;
            return (_a = this.list) === null || _a === void 0 ? void 0 : _a.items.map(function (item) { return item.elementRef.nativeElement; });
        };
        KeyboardNavigationDirective.prototype.getListAnchor = function () {
            var _a;
            return (_a = this.anchorList) === null || _a === void 0 ? void 0 : _a.map(function (item) { return item.elementRef.nativeElement; });
        };
        KeyboardNavigationDirective.prototype.onKeyDown = function (event) {
            var _this = this;
            var code = event.code;
            var itemElements = this.getListElements();
            var anchorElements = this.getListAnchor();
            var isEventFromAnchor = this.isEventFromAnchor(event);
            var horizontalNav = new Set(['ArrowRight', 'ArrowLeft']);
            var selectedEvents = new Set(['Space', 'Enter']);
            var itemPosition = -1;
            var anchorPosition = 0;
            var itemElement = null;
            if (code === 'ArrowDown' || code === 'Tab') {
                if (isEventFromAnchor && (itemElements === null || itemElements === void 0 ? void 0 : itemElements.length)) {
                    KeyboardNavigationDirective.setItemActive(0, itemElements);
                    event.preventDefault();
                }
                if (code === 'Tab') {
                    return;
                }
            }
            if (!isEventFromAnchor && (itemElements === null || itemElements === void 0 ? void 0 : itemElements.length)) {
                itemElements.forEach(function (item, index) {
                    if (item.contains(event.target)) {
                        itemElement = item;
                    }
                    if (item === _this._document.activeElement) {
                        itemPosition = index;
                    }
                });
            }
            if (selectedEvents.has(code) && !isEventFromAnchor && itemElement) {
                event.preventDefault();
                itemElement.click();
                return;
            }
            if (isEventFromAnchor &&
                anchorElements.length > 1 &&
                horizontalNav.has(code)) {
                anchorElements.forEach(function (item, index) {
                    if (item === _this._document.activeElement) {
                        anchorPosition = index;
                    }
                });
                switch (code) {
                    case 'ArrowRight':
                        KeyboardNavigationDirective.resetTabItem(anchorPosition, anchorElements);
                        anchorPosition = KeyboardNavigationDirective.setPositionDown(anchorPosition, anchorElements.length);
                        break;
                    case 'ArrowLeft':
                        KeyboardNavigationDirective.resetTabItem(anchorPosition, anchorElements);
                        anchorPosition =
                            KeyboardNavigationDirective.setPositionUp(anchorPosition);
                        break;
                }
                KeyboardNavigationDirective.setItemActive(anchorPosition, anchorElements);
                return;
            }
            if (!isEventFromAnchor && itemElement) {
                switch (code) {
                    case 'ArrowDown':
                        KeyboardNavigationDirective.resetItem(itemPosition, itemElements);
                        itemPosition = KeyboardNavigationDirective.setPositionDown(itemPosition, itemElements.length);
                        break;
                    case 'ArrowUp':
                        KeyboardNavigationDirective.resetItem(itemPosition, itemElements);
                        itemPosition =
                            KeyboardNavigationDirective.setPositionUp(itemPosition);
                        break;
                }
                KeyboardNavigationDirective.setItemActive(itemPosition, itemElements);
                event.preventDefault();
            }
        };
        return KeyboardNavigationDirective;
    }());
    /** @nocollapse */ KeyboardNavigationDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: KeyboardNavigationDirective, deps: [{ token: i2.DOCUMENT }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ KeyboardNavigationDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: KeyboardNavigationDirective, selector: "[bbKeyboardNavigation]", queries: [{ propertyName: "list", first: true, predicate: KeyboardNavigationListDirective, descendants: true }, { propertyName: "anchorList", predicate: KeyboardNavigationAnchorDirective, descendants: true }], ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: KeyboardNavigationDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbKeyboardNavigation]',
                    }]
            }], ctorParameters: function () {
            return [{ type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [i2.DOCUMENT]
                        }] }];
        }, propDecorators: { list: [{
                    type: i0.ContentChild,
                    args: [KeyboardNavigationListDirective, { static: false }]
                }], anchorList: [{
                    type: i0.ContentChildren,
                    args: [KeyboardNavigationAnchorDirective, { descendants: true }]
                }] } });

    var defaultBeneficiaryCdkScrollConfig = {
        itemSize: 64,
        minBufferPx: 340,
        maxBufferPx: 400,
    };

    var BeneficiaryScrollStrategyService = /** @class */ (function (_super) {
        __extends(BeneficiaryScrollStrategyService, _super);
        function BeneficiaryScrollStrategyService() {
            var _this = this;
            var itemSize = defaultBeneficiaryCdkScrollConfig.itemSize, minBufferPx = defaultBeneficiaryCdkScrollConfig.minBufferPx, maxBufferPx = defaultBeneficiaryCdkScrollConfig.maxBufferPx;
            _this = _super.call(this, itemSize, minBufferPx, maxBufferPx) || this;
            return _this;
        }
        return BeneficiaryScrollStrategyService;
    }(i1$8.FixedSizeVirtualScrollStrategy));

    var BeneficiaryScrollItemDirective = /** @class */ (function () {
        function BeneficiaryScrollItemDirective() {
        }
        return BeneficiaryScrollItemDirective;
    }());
    /** @nocollapse */ BeneficiaryScrollItemDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: BeneficiaryScrollItemDirective, deps: [], target: i0__namespace.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ BeneficiaryScrollItemDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: BeneficiaryScrollItemDirective, selector: "[bbBeneficiaryScrollItem]", ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: BeneficiaryScrollItemDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbBeneficiaryScrollItem]',
                    }]
            }] });
    function factoryScroll() {
        return new BeneficiaryScrollStrategyService();
    }
    var BeneficiaryScrollDirective = /** @class */ (function () {
        function BeneficiaryScrollDirective(viewport, scrollStrategy, ngZone) {
            var _this = this;
            this.viewport = viewport;
            this.scrollStrategy = scrollStrategy;
            this.ngZone = ngZone;
            this.destroy$ = new rxjs.Subject();
            /**
             * Trigger fetching more items
             */
            this.loadMore = new i0.EventEmitter();
            this.viewport.scrolledIndexChange
                .pipe(operators.takeUntil(this.destroy$))
                .subscribe(function () {
                var dataLength = _this.viewport.getDataLength();
                var end = _this.viewport.getRenderedRange().end;
                if (dataLength &&
                    end === dataLength &&
                    dataLength !== _this.bbBeneficiaryScrollTotalCount) {
                    // CdkVirtualScrollViewport runs all events outside zone,
                    // to detect changes we need to emit load more event inside zone.
                    _this.ngZone.run(function () { return Promise.resolve().then(function () {
                        _this.loadMore.emit();
                    }); });
                }
            });
        }
        BeneficiaryScrollDirective.prototype.ngAfterViewInit = function () {
            var _a, _b, _c;
            var minBufferPx = defaultBeneficiaryCdkScrollConfig.minBufferPx, maxBufferPx = defaultBeneficiaryCdkScrollConfig.maxBufferPx;
            var listItemSize = (_c = (_b = (_a = this.listItems) === null || _a === void 0 ? void 0 : _a.toArray()[0]) === null || _b === void 0 ? void 0 : _b.nativeElement) === null || _c === void 0 ? void 0 : _c.clientHeight;
            if (listItemSize) {
                this.scrollStrategy.updateItemAndBufferSize(listItemSize, minBufferPx, maxBufferPx);
            }
        };
        BeneficiaryScrollDirective.prototype.ngOnDestroy = function () {
            this.destroy$.next();
        };
        return BeneficiaryScrollDirective;
    }());
    /** @nocollapse */ BeneficiaryScrollDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: BeneficiaryScrollDirective, deps: [{ token: i1__namespace$7.CdkVirtualScrollViewport, self: true }, { token: i1$8.VIRTUAL_SCROLL_STRATEGY }, { token: i0__namespace.NgZone }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ BeneficiaryScrollDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: BeneficiaryScrollDirective, selector: "[bbBeneficiaryScroll]", inputs: { bbBeneficiaryScrollTotalCount: "bbBeneficiaryScrollTotalCount" }, outputs: { loadMore: "bbBeneficiaryScroll" }, providers: [
            {
                provide: i1$8.VIRTUAL_SCROLL_STRATEGY,
                useFactory: factoryScroll,
            },
        ], queries: [{ propertyName: "listItems", predicate: BeneficiaryScrollItemDirective, descendants: true, read: i0.ElementRef }], ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: BeneficiaryScrollDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbBeneficiaryScroll]',
                        providers: [
                            {
                                provide: i1$8.VIRTUAL_SCROLL_STRATEGY,
                                useFactory: factoryScroll,
                            },
                        ],
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace$7.CdkVirtualScrollViewport, decorators: [{
                            type: i0.Self
                        }] }, { type: BeneficiaryScrollStrategyService, decorators: [{
                            type: i0.Inject,
                            args: [i1$8.VIRTUAL_SCROLL_STRATEGY]
                        }] }, { type: i0__namespace.NgZone }];
        }, propDecorators: { listItems: [{
                    type: i0.ContentChildren,
                    args: [BeneficiaryScrollItemDirective, {
                            descendants: true,
                            read: i0.ElementRef,
                        }]
                }], bbBeneficiaryScrollTotalCount: [{
                    type: i0.Input
                }], loadMore: [{
                    type: i0.Output,
                    args: ['bbBeneficiaryScroll']
                }] } });

    var BeneficiaryTabsComponent = /** @class */ (function () {
        function BeneficiaryTabsComponent() {
            this.tabsId = "beneficiaryTabs" + BeneficiaryTabsComponent._id++;
            this.contactsListId = "beneficiaryContactsList" + BeneficiaryTabsComponent._id++;
            this.accountsListId = "beneficiaryAccountsList" + BeneficiaryTabsComponent._id++;
            /**
             * Total count of accounts
             */
            this.totalAccounts = 0;
            /**
             * Total count of contacts
             */
            this.totalContacts = 0;
            /**
             * Selected account event emitter
             */
            this.selectedAccount = new i0.EventEmitter();
            /**
             * Selected contact event emitter
             */
            this.selectedContact = new i0.EventEmitter();
            /**
             * Trigger fetching more beneficiary items
             */
            this.fetchMoreItems = new i0.EventEmitter();
            /**
             * Manual edit event emitter
             */
            this.manualEdit = new i0.EventEmitter();
            /**
             * Search state, has truthy value if has search query
             */
            this.searching = new i0.EventEmitter();
            /**
             * Dropdown status
             */
            this.isDropdownOpen = false;
            /** Flag which determines if we can enter data manually
             * Default value is `true`
             */
            this.canEditManually = true;
            this.listingState = exports.ListState;
            this.beneficiaryList = exports.BeneficiaryList;
        }
        BeneficiaryTabsComponent.prototype.onLoadMore = function () {
            this.fetchMoreItems.emit(this.activeTab);
        };
        BeneficiaryTabsComponent.prototype.ngOnInit = function () {
            this.tabsConfig = this.tabsConfig || defaultBeneficiaryTabsConfig;
            this.activeTab = this.tabsConfig[0];
        };
        BeneficiaryTabsComponent.prototype.showTabs = function () {
            return (this.isDropdownOpen &&
                Object.values(this.listState || {}).some(function (state) { return state !== exports.ListState.NO_RESULT; }) &&
                !this.isNoTabsConfigured());
        };
        BeneficiaryTabsComponent.prototype.isNoTabsConfigured = function () {
            return this.tabsConfig.length === 0;
        };
        BeneficiaryTabsComponent.prototype.selectAccount = function (account) {
            this.selectedAccount.emit(account);
        };
        BeneficiaryTabsComponent.prototype.selectContact = function (contact) {
            this.selectedContact.emit(contact);
        };
        BeneficiaryTabsComponent.prototype.setActiveTab = function (event, tabName) {
            this.activeTab = tabName;
        };
        BeneficiaryTabsComponent.prototype.emitManualDetails = function () {
            this.manualEdit.emit(true);
        };
        BeneficiaryTabsComponent.prototype.onRangeChange = function () {
            if (this.activeTab &&
                this.listState[this.activeTab] === this.listingState.LIST) {
                this.onLoadMore();
            }
        };
        BeneficiaryTabsComponent.prototype.refreshList = function () {
            this.onLoadMore();
        };
        BeneficiaryTabsComponent.prototype.trackById = function (_index, item) {
            return item.id;
        };
        return BeneficiaryTabsComponent;
    }());
    BeneficiaryTabsComponent._id = 0;
    /** @nocollapse */ BeneficiaryTabsComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: BeneficiaryTabsComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ BeneficiaryTabsComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: BeneficiaryTabsComponent, selector: "bb-beneficiary-tabs", inputs: { accounts: "accounts", contacts: "contacts", totalAccounts: "totalAccounts", totalContacts: "totalContacts", listState: "listState", tabsConfig: "tabsConfig", isDropdownOpen: "isDropdownOpen", canEditManually: "canEditManually" }, outputs: { selectedAccount: "selectedAccount", selectedContact: "selectedContact", fetchMoreItems: "fetchMoreItems", manualEdit: "manualEdit", searching: "searching" }, ngImport: i0__namespace, template: "<div bbKeyboardNavigation role=\"tablist\" [id]=\"tabsId\">\n  <div\n    *ngIf=\"showTabs()\"\n    role=\"tablist\"\n    aria-label=\"Beneficiary selector tabs\"\n    class=\"nav nav-tabs\"\n  >\n    <ng-container *ngFor=\"let tab of tabsConfig\">\n      <ng-container *ngIf=\"tab === beneficiaryList.CONTACTS\">\n        <button\n          bbButton\n          color=\"unstyled\"\n          role=\"tab\"\n          class=\"nav-item nav-link\"\n          aria-controls=\"contacts-tab\"\n          data-role=\"contacts-tab-item\"\n          aria-haspopup=\"listbox\"\n          [attr.aria-owns]=\"contactsListId\"\n          [attr.aria-selected]=\"activeTab === beneficiaryList.CONTACTS\"\n          [ngClass]=\"{'active': activeTab === beneficiaryList.CONTACTS}\"\n          (bbKeyboardClick)=\"setActiveTab($event, beneficiaryList.CONTACTS)\"\n          bbKeyboardNavigationAnchor\n        >\n          <ng-container\n            i18n=\"Label|Contacts tab label@@beneficiary.selector.ui.tabs.contacts.label\"\n          >\n            Contacts\n          </ng-container>\n          <span class=\"text-dark\" *ngIf=\"totalContacts\"\n            >({{totalContacts}})</span\n          >\n        </button>\n      </ng-container>\n\n      <ng-container *ngIf=\"tab === beneficiaryList.ACCOUNTS\">\n        <button\n          bbButton\n          tabindex=\"-1\"\n          color=\"unstyled\"\n          role=\"tab\"\n          class=\"nav-item nav-link\"\n          aria-controls=\"accounts-tab\"\n          data-role=\"accounts-tab-item\"\n          [attr.aria-owns]=\"accountsListId\"\n          [attr.aria-selected]=\"activeTab === beneficiaryList.ACCOUNTS\"\n          [ngClass]=\"{'active': activeTab === beneficiaryList.ACCOUNTS}\"\n          (bbKeyboardClick)=\"setActiveTab($event, beneficiaryList.ACCOUNTS)\"\n          bbKeyboardNavigationAnchor\n        >\n          <ng-container\n            i18n=\"Label|Own accounts tab label@@beneficiary.selector.ui.tabs.own-accounts.label\"\n          >\n            Own Accounts\n          </ng-container>\n          <span class=\"text-dark\" *ngIf=\"totalAccounts\">\n            ({{totalAccounts}})</span\n          >\n        </button>\n      </ng-container>\n    </ng-container>\n  </div>\n\n  <ng-container *ngIf=\"isNoTabsConfigured()\">\n    <ng-container\n      *ngTemplateOutlet=\"enterAccountDetailsButton; context:{icon: 'add'}\"\n    ></ng-container>\n  </ng-container>\n\n  <ng-container *ngIf=\"isDropdownOpen\">\n    <ng-container [ngSwitch]=\"activeTab\">\n      <div id=\"contacts-tab\" *ngSwitchCase=\"beneficiaryList.CONTACTS\">\n        <bb-payments-sr-search-result-info [totalNumber]=\"contacts?.length\">\n          <span\n            i18n=\"contacts search result label|label for screen reader@@beneficiary.selector.ui.tabs.contacts.screenReaderResultsLabel\"\n          >\n            Contacts tab:\n          </span>\n        </bb-payments-sr-search-result-info>\n\n        <ng-container [ngSwitch]=\"listState?.contacts\">\n          <ng-container *ngSwitchDefault>\n            <cdk-virtual-scroll-viewport\n              tabindex=\"-1\"\n              role=\"tabpanel\"\n              bbKeyboardNavigationList\n              [id]=\"contactsListId\"\n              (bbBeneficiaryScroll)=\"onRangeChange()\"\n              [bbBeneficiaryScrollTotalCount]=\"totalContacts\"\n              class=\"bb-beneficiary-selector-ui__scroll-container\"\n            >\n              <div\n                bbKeyboardNavigationItem\n                role=\"option\"\n                aria-selected=\"false\"\n                (click)=\"emitManualDetails()\"\n              >\n                <ng-container\n                  *ngTemplateOutlet=\"enterAccountDetailsButton; context:{icon: 'edit'}\"\n                >\n                </ng-container>\n              </div>\n\n              <ng-container\n                *cdkVirtualFor=\"let contact of contacts; trackBy: trackById\"\n              >\n                <bb-beneficiary-contact\n                  bbBeneficiaryScrollItem\n                  bbKeyboardNavigationItem\n                  role=\"option\"\n                  class=\"bb-beneficiary-selector-ui__list-item dropdown-item\"\n                  (click)=\"selectContact(contact)\"\n                  [contact]=\"contact\"\n                ></bb-beneficiary-contact>\n              </ng-container>\n\n              <ng-container\n                *ngIf=\"listState?.contacts === listingState.FULL_LIST\"\n              >\n                <ng-container *ngTemplateOutlet=\"completeList\"></ng-container>\n              </ng-container>\n\n              <ng-container\n                *ngIf=\"listState?.contacts === listingState.FETCHING_FAILURE\"\n              >\n                <ng-container *ngTemplateOutlet=\"failToLoadMore\"></ng-container>\n              </ng-container>\n\n              <ng-container\n                *ngIf=\"listState?.contacts === listingState.FETCHING\"\n              >\n                <bb-loading-indicator-ui\n                  loaderSize=\"sm\"\n                ></bb-loading-indicator-ui>\n              </ng-container>\n            </cdk-virtual-scroll-viewport>\n          </ng-container>\n\n          <ng-container *ngSwitchCase=\"listingState.ERROR\">\n            <bb-empty-state-ui\n              title=\"Contacts unavailable\"\n              i18n-title=\"@@beneficiary.selector.ui.tabs.contacts.error-state.unavailable.title\"\n              class=\"bb-state-container\"\n              subtitle=\"Unable to load list of contacts. Try to reload the page or contact the support.\"\n              i18n-subtitle=\"@@beneficiary.selector.ui.tabs.contacts.error-state.unavailable.message\"\n              iconSize=\"xxl\"\n              iconModifier=\"info\"\n            ></bb-empty-state-ui>\n          </ng-container>\n\n          <ng-container *ngSwitchCase=\"listingState.EMPTY\">\n            <ng-container\n              *ngTemplateOutlet=\"emptyListContactsTemplate\"\n            ></ng-container>\n          </ng-container>\n\n          <ng-container *ngSwitchCase=\"listingState.NO_RESULT\">\n            <ng-container\n              *ngTemplateOutlet=\"emptyMatchingResults\"\n            ></ng-container>\n          </ng-container>\n\n          <ng-container *ngSwitchCase=\"listingState.LOADING\">\n            <ng-container *ngTemplateOutlet=\"loadingTemplate\"></ng-container>\n          </ng-container>\n        </ng-container>\n      </div>\n\n      <div id=\"accounts-tab\" *ngSwitchCase=\"beneficiaryList.ACCOUNTS\">\n        <bb-payments-sr-search-result-info [totalNumber]=\"accounts?.length\">\n          <span\n            i18n=\"accounts search result label|label for screen reader@@beneficiary.selector.ui.tabs.account.screenReaderResultsLabel\"\n            >Accounts tab:</span\n          >\n        </bb-payments-sr-search-result-info>\n\n        <ng-container [ngSwitch]=\"listState?.accounts\">\n          <ng-container *ngSwitchDefault>\n            <cdk-virtual-scroll-viewport\n              bbKeyboardNavigationList\n              tabindex=\"-1\"\n              role=\"tabpanel\"\n              [id]=\"accountsListId\"\n              (bbBeneficiaryScroll)=\"onRangeChange()\"\n              [bbBeneficiaryScrollTotalCount]=\"totalAccounts\"\n              class=\"bb-beneficiary-selector-ui__scroll-container\"\n            >\n              <div\n                bbKeyboardNavigationItem\n                role=\"option\"\n                (click)=\"emitManualDetails()\"\n              >\n                <ng-container\n                  *ngTemplateOutlet=\"enterAccountDetailsButton; context:{icon: 'edit'}\"\n                >\n                </ng-container>\n              </div>\n\n              <ng-container\n                *cdkVirtualFor=\"let account of accounts; trackBy: trackById\"\n              >\n                <bb-beneficiary-account\n                  bbBeneficiaryScrollItem\n                  bbKeyboardNavigationItem\n                  role=\"option\"\n                  class=\"bb-beneficiary-selector-ui__list-item dropdown-item\"\n                  [account]=\"account\"\n                  (click)=\"selectAccount(account)\"\n                ></bb-beneficiary-account>\n              </ng-container>\n\n              <ng-container\n                *ngIf=\"listState?.accounts === listingState.FULL_LIST\"\n              >\n                <ng-container *ngTemplateOutlet=\"completeList\"></ng-container>\n              </ng-container>\n\n              <ng-container\n                *ngIf=\"listState?.accounts === listingState.FETCHING_FAILURE\"\n              >\n                <ng-container *ngTemplateOutlet=\"failToLoadMore\"></ng-container>\n              </ng-container>\n\n              <ng-container\n                *ngIf=\"listState?.accounts === listingState.FETCHING\"\n              >\n                <bb-loading-indicator-ui\n                  loaderSize=\"sm\"\n                ></bb-loading-indicator-ui>\n              </ng-container>\n            </cdk-virtual-scroll-viewport>\n          </ng-container>\n\n          <ng-container *ngSwitchCase=\"listingState.ERROR\">\n            <bb-empty-state-ui\n              title=\"Accounts unavailable\"\n              i18n-title=\"@@beneficiary.selector.ui.tabs.accounts.error-state.unavailable.title\"\n              class=\"bb-state-container\"\n              subtitle=\"Unable to load list of accounts. Try to reload the page or contact the support.\"\n              i18n-subtitle=\"@@beneficiary.selector.ui.tabs.accounts.error-state.unavailable.message\"\n              iconSize=\"xxl\"\n              iconModifier=\"info\"\n            ></bb-empty-state-ui>\n          </ng-container>\n\n          <ng-container *ngSwitchCase=\"listingState.EMPTY\">\n            <ng-container\n              *ngTemplateOutlet=\"emptyListAccountsTemplate\"\n            ></ng-container>\n          </ng-container>\n\n          <ng-container *ngSwitchCase=\"listingState.NO_RESULT\">\n            <ng-container\n              *ngTemplateOutlet=\"emptyMatchingResults\"\n            ></ng-container>\n          </ng-container>\n\n          <ng-container *ngSwitchCase=\"listingState.LOADING\">\n            <ng-container *ngTemplateOutlet=\"loadingTemplate\"></ng-container>\n          </ng-container>\n        </ng-container>\n      </div>\n    </ng-container>\n  </ng-container>\n</div>\n\n<!-- Empty lists -->\n<ng-template #emptyListAccountsTemplate>\n  <bb-empty-state-ui\n    data-role=\"accounts-empty-state\"\n    iconSize=\"xxl\"\n    class=\"bb-state-container\"\n    iconModifier=\"account\"\n    title=\"No accounts\"\n    subtitle=\"There are no accounts to display.\"\n    i18n-title=\"Label|Nothing found in accounts title@@beneficiary.selector.ui.tabs.accounts.nothing-found.label\"\n    i18n-subtitle=\"Label|Nothing found in accounts subtitle@@beneficiary.selector.ui.tabs.accounts.nothing-found.subtitle\"\n  ></bb-empty-state-ui>\n</ng-template>\n\n<ng-template #emptyListContactsTemplate>\n  <bb-empty-state-ui\n    data-role=\"contacts-empty-state\"\n    iconSize=\"xxl\"\n    class=\"bb-state-container\"\n    iconModifier=\"contacts\"\n    title=\"No contacts\"\n    subtitle=\"Go to Contact Manager to create contact that you often transfer money to.\"\n    i18n-title=\"Label|Nothing found in contacts title@@beneficiary.selector.ui.tabs.contacts.nothing-found.label\"\n    i18n-subtitle=\"Label|Nothing found in contacts subtitle@@beneficiary.selector.ui.tabs.contacts.nothing-found.subtitle\"\n  ></bb-empty-state-ui>\n</ng-template>\n\n<ng-template #loadingTemplate>\n  <div class=\"bb-state-container\">\n    <bb-loading-indicator-ui loaderSize=\"md\"></bb-loading-indicator-ui>\n  </div>\n</ng-template>\n\n<ng-template #enterAccountDetailsButton let-icon=\"icon\">\n  <div\n    *ngIf=\"canEditManually\"\n    data-role=\"enter-data-manually\"\n    class=\"bb-beneficiary-selector-ui__enter-details dropdown-item\"\n  >\n    <div class=\"bb-create-beneficiary-account-menuitem\">\n      <div class=\"bb-stack\">\n        <ng-container\n          *ngTemplateOutlet=\"enterAccountDetails; context: {type: icon}\"\n        ></ng-container>\n      </div>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #enterAccountDetails let-type=\"type\">\n  <bb-icon-ui name=\"{{ type }}\" size=\"l\" class=\"bb-stack__item\"></bb-icon-ui>\n  <span\n    class=\"bb-stack__item\"\n    i18n=\"@@beneficiary.selector.ui.list.enter-details-manually.button\"\n  >\n    Enter details manually\n  </span>\n</ng-template>\n\n<ng-template #emptyMatchingResults>\n  <div class=\"bb-state-container\">\n    <bb-empty-state-ui\n      [showIcon]=\"false\"\n      class=\"d-block bb-block bb-block--md\"\n      title=\"No suggestions found\"\n      aria-label=\"No suggestions found\"\n      i18n-aria-label=\"Label|No suggestions found@@beneficiary.selector.ui.list.nothing-found.label\"\n    ></bb-empty-state-ui>\n\n    <div *ngIf=\"canEditManually\" class=\"bb-state-container__footer\">\n      <button\n        bbButton\n        type=\"button\"\n        buttonSize=\"md\"\n        color=\"link-text\"\n        class=\"bb-beneficiary-selector-ui__enter-details\"\n        data-role=\"enter-data-manually\"\n        (bbKeyboardClick)=\"emitManualDetails()\"\n      >\n        <ng-container\n          *ngTemplateOutlet=\"enterAccountDetails; context: {type: 'add'}\"\n        ></ng-container>\n      </button>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #completeList>\n  <div\n    data-role=\"all-items-loaded\"\n    class=\"bb-create-beneficiary-account-menuitem bb-stack bb-stack--center bb-text-support\"\n    i18n=\"@@beneficiary-selector-ui.loaded-all-items\"\n  >\n    All items are loaded.\n  </div>\n</ng-template>\n\n<ng-template #failToLoadMore>\n  <button\n    type=\"button\"\n    role=\"menuitem\"\n    data-role=\"fail-to-load-more-try-again\"\n    (click)=\"refreshList()\"\n    class=\"dropdow-item bb-stack bb-stack--center bb-text-danger dropdown-item\"\n  >\n    <bb-icon-ui\n      color=\"danger\"\n      name=\"error-outline\"\n      class=\"bb-stack__item bb-stack__item--spacing-sm\"\n    ></bb-icon-ui>\n\n    <span class=\"bb-stack__item\" i18n=\"@@beneficiary-selector-ui.fail-to-fetch\">\n      Loading failed. Click here to try again.\n    </span>\n  </button>\n</ng-template>\n", components: [{ type: PaymentsSrSearchResultInfoComponent, selector: "bb-payments-sr-search-result-info", inputs: ["totalNumber"] }, { type: i1__namespace$7.CdkVirtualScrollViewport, selector: "cdk-virtual-scroll-viewport", inputs: ["orientation", "appendOnly"], outputs: ["scrolledIndexChange"] }, { type: BeneficiaryContactComponent, selector: "bb-beneficiary-contact", inputs: ["contact"] }, { type: i8__namespace.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i5__namespace.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }, { type: BeneficiaryAccountComponent, selector: "bb-beneficiary-account", inputs: ["account"] }, { type: i1__namespace.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: KeyboardNavigationDirective, selector: "[bbKeyboardNavigation]" }, { type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i7__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: KeyboardNavigationAnchorDirective, selector: "[bbKeyboardNavigationAnchor]" }, { type: i2__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i10__namespace.KeyboardClickDirective, selector: "[bbKeyboardClick]", outputs: ["bbKeyboardClick"] }, { type: i2__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i2__namespace.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i2__namespace.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i2__namespace.NgSwitchDefault, selector: "[ngSwitchDefault]" }, { type: KeyboardNavigationListDirective, selector: "[bbKeyboardNavigationList]" }, { type: BeneficiaryScrollDirective, selector: "[bbBeneficiaryScroll]", inputs: ["bbBeneficiaryScrollTotalCount"], outputs: ["bbBeneficiaryScroll"] }, { type: KeyboardNavigationItemDirective, selector: "[bbKeyboardNavigationItem]" }, { type: i1__namespace$7.CdkVirtualForOf, selector: "[cdkVirtualFor][cdkVirtualForOf]", inputs: ["cdkVirtualForOf", "cdkVirtualForTrackBy", "cdkVirtualForTemplate", "cdkVirtualForTemplateCacheSize"] }, { type: BeneficiaryScrollItemDirective, selector: "[bbBeneficiaryScrollItem]" }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: BeneficiaryTabsComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-beneficiary-tabs',
                        templateUrl: 'beneficiary-tabs.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], propDecorators: { accounts: [{
                    type: i0.Input
                }], contacts: [{
                    type: i0.Input
                }], totalAccounts: [{
                    type: i0.Input
                }], totalContacts: [{
                    type: i0.Input
                }], selectedAccount: [{
                    type: i0.Output
                }], selectedContact: [{
                    type: i0.Output
                }], fetchMoreItems: [{
                    type: i0.Output
                }], manualEdit: [{
                    type: i0.Output
                }], searching: [{
                    type: i0.Output
                }], listState: [{
                    type: i0.Input
                }], tabsConfig: [{
                    type: i0.Input
                }], isDropdownOpen: [{
                    type: i0.Input
                }], canEditManually: [{
                    type: i0.Input
                }] } });

    var BeneficiarySelectorUiComponent = /** @class */ (function () {
        function BeneficiarySelectorUiComponent() {
            var _a;
            var _this = this;
            this.state = {
                contacts: exports.ListState.EMPTY,
                accounts: exports.ListState.EMPTY,
            };
            /**
             * Total count of accounts
             */
            this.totalAccounts = 0;
            /**
             * Total count of contacts
             */
            this.totalContacts = 0;
            /**
             * Total count of contacts items before sub-accounts extract
             */
            this.totalContactsItemsCount = 0;
            /**
             * Pipe to initiate dropdown closure from outside
             */
            this.closeDropdownRequest$ = new rxjs.Subject();
            /**
             * Dropdown icon that would be shown alongside with textbox
             */
            this.dropdownIcon = 'toggle-down';
            /**
             * Selected account event emitter
             */
            this.selectedAccount = new i0.EventEmitter();
            /**
             * Selected contact event emitter
             */
            this.selectedContact = new i0.EventEmitter();
            /**
             * Search string
             */
            this.searchValue = new i0.EventEmitter();
            /**
             * Fetch more items event handler
             */
            this.fetchMoreItems = new i0.EventEmitter();
            /**
             * Enter account detail event
             */
            this.manualEdit = new i0.EventEmitter();
            /**
             * Event emitted search is blurred
             */
            this.searchBlur = new i0.EventEmitter();
            /**
             * Clear search value
             */
            this.clear = new i0.EventEmitter();
            /**
             * Time delay between each search requests in milliseconds. Defaults to 300
             */
            this.debounceTime = DefaultDebounceTime;
            /**
             * Form control for search value.
             */
            this.search = new i1$1.FormControl();
            /**
             * Flag to denote if the account has only closed payment permission.
             * Default value is `false`
             */
            this.isClosedPayment = false;
            /**
             * Flag to denote if the beneficiary field is disabled.
             * Default value is `false`
             */
            this.isBeneficiaryDisabled = false;
            /**
             * Flag to denote if the manual edit feature is disabled.
             * Default value is `false`
             */
            this.isManualEditDisabled = false;
            this.searchIsFocused = false;
            this.debounceSearch$ = new rxjs.Subject();
            this.gc$ = new rxjs.Subject();
            this.pageState = (_a = {},
                _a[exports.BeneficiaryList.CONTACTS] = {
                    page: 0,
                    shouldLoadMore: function () { return _this.totalContacts > _this.totalContactsItemsCount; },
                },
                _a[exports.BeneficiaryList.ACCOUNTS] = {
                    page: 0,
                    shouldLoadMore: function () { return _this.totalAccounts > _this._accounts.length; },
                },
                _a);
            this.debounceSearch$
                .pipe(operators.debounceTime(this.debounceTime), operators.distinctUntilChanged(), operators.takeUntil(this.gc$), operators.tap(function () {
                var _a;
                _this.listStateReducer((_a = {},
                    _a[exports.BeneficiaryList.ACCOUNTS] = exports.ListState.LOADING,
                    _a[exports.BeneficiaryList.CONTACTS] = exports.ListState.LOADING,
                    _a));
            }))
                .subscribe(function (term) {
                _this.searchValue.emit(term);
            });
        }
        Object.defineProperty(BeneficiarySelectorUiComponent.prototype, "contacts", {
            get: function () {
                return this._contacts;
            },
            /**
             * List of contacts
             */
            set: function (value) {
                if (this.state.contacts === exports.ListState.FETCHING && value) {
                    this._contacts = __spreadArray(__spreadArray([], __read(this._contacts)), __read(value));
                }
                else {
                    this._contacts = value;
                }
                this.updateListStateOnDataChange(exports.BeneficiaryList.CONTACTS, this._contacts);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BeneficiarySelectorUiComponent.prototype, "accounts", {
            get: function () {
                return this._accounts;
            },
            /**
             * List of own accounts
             */
            set: function (value) {
                if (this.state.accounts === exports.ListState.FETCHING && value) {
                    this._accounts = __spreadArray(__spreadArray([], __read(this._accounts)), __read(value));
                }
                else {
                    this._accounts = value;
                }
                this.updateListStateOnDataChange(exports.BeneficiaryList.ACCOUNTS, this._accounts);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BeneficiarySelectorUiComponent.prototype, "hasError", {
            /**
             * Flag to denote if the beneficiary selector has errors.
             */
            set: function (error) {
                if (error) {
                    if (!this.search.touched) {
                        this.search.markAsTouched();
                    }
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BeneficiarySelectorUiComponent.prototype, "selectedItem", {
            get: function () {
                return this._selectedItem;
            },
            /**
             * Selected item, contact or account
             */
            set: function (selectedItem) {
                if (selectedItem === null || selectedItem === void 0 ? void 0 : selectedItem.name) {
                    this.search.patchValue(selectedItem.name);
                    this._selectedItem = selectedItem;
                }
            },
            enumerable: false,
            configurable: true
        });
        BeneficiarySelectorUiComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.closeDropdownRequest$
                .pipe(operators.takeUntil(this.gc$))
                .subscribe(function (closeFlag) {
                if (closeFlag && _this.dropdownItem) {
                    _this.dropdownItem.close();
                }
            });
        };
        BeneficiarySelectorUiComponent.prototype.ngOnDestroy = function () {
            this.gc$.next();
            this.gc$.complete();
        };
        BeneficiarySelectorUiComponent.prototype.listStateReducer = function (update) {
            this.state = Object.assign(Object.assign({}, this.state), update);
        };
        BeneficiarySelectorUiComponent.prototype.selectAccount = function (account) {
            this.selectedAccount.emit(account);
            this.search.patchValue(account.name);
        };
        BeneficiarySelectorUiComponent.prototype.selectContact = function (contact) {
            this.selectedContact.emit(contact);
            this.search.patchValue(contact.name);
        };
        BeneficiarySelectorUiComponent.prototype.handleSearch = function (searchString) {
            if (searchString === void 0) { searchString = ''; }
            if (this.searchIsFocused) {
                this.debounceSearch$.next(searchString === null || searchString === void 0 ? void 0 : searchString.trim());
                // reset page count in pageState when search is triggered
                this.pageState[exports.BeneficiaryList.ACCOUNTS].page = 0;
                this.pageState[exports.BeneficiaryList.CONTACTS].page = 0;
            }
        };
        BeneficiarySelectorUiComponent.prototype.onBlur = function () {
            this.searchIsFocused = false;
            this.searchBlur.emit(this.search.value ? this.search.value.trim() : '');
        };
        BeneficiarySelectorUiComponent.prototype.focusHandler = function () {
            this.searchIsFocused = true;
            if (this.dropdownItem) {
                this.dropdownItem.open();
            }
        };
        BeneficiarySelectorUiComponent.prototype.onClear = function () {
            this.handleSearch('');
            this.search.reset();
            this.clear.emit('');
        };
        BeneficiarySelectorUiComponent.prototype.handleDropdownClose = function (opened, dropdown) {
            if (!opened && this.searchIsFocused) {
                dropdown.open();
            }
        };
        BeneficiarySelectorUiComponent.prototype.onManualEdit = function () {
            if (!this.isManualEditDisabled) {
                this.manualEdit.emit(this.search.value ? this.search.value.trim() : '');
            }
        };
        BeneficiarySelectorUiComponent.prototype.fetchMoreItemsAction = function (listType) {
            var _a;
            var shouldLoadMore = this.pageState[listType].shouldLoadMore;
            var _page = this.pageState[listType].page;
            if (shouldLoadMore() && this.state[listType] === exports.ListState.LIST) {
                this.listStateReducer((_a = {}, _a[listType] = exports.ListState.FETCHING, _a));
                this.fetchMoreItems.emit({ page: ++_page, type: listType });
                // update page state after being incremented
                this.pageState[listType].page = _page;
            }
        };
        BeneficiarySelectorUiComponent.prototype.updateListStateOnDataChange = function (listType, value) {
            var _a;
            var _state = this.state[listType];
            var FETCHING = exports.ListState.FETCHING, FETCHING_FAILURE = exports.ListState.FETCHING_FAILURE, ERROR = exports.ListState.ERROR, NO_RESULT = exports.ListState.NO_RESULT, EMPTY = exports.ListState.EMPTY, LIST = exports.ListState.LIST, FULL_LIST = exports.ListState.FULL_LIST;
            if (!value || value.error) {
                _state === FETCHING ? (_state = FETCHING_FAILURE) : (_state = ERROR);
            }
            else if (!(value === null || value === void 0 ? void 0 : value.length)) {
                this.search.value ? (_state = NO_RESULT) : (_state = EMPTY);
            }
            else if (!this.pageState[listType].shouldLoadMore()) {
                _state = FULL_LIST;
            }
            else {
                _state = LIST;
            }
            this.listStateReducer((_a = {}, _a[listType] = _state, _a));
        };
        return BeneficiarySelectorUiComponent;
    }());
    /** @nocollapse */ BeneficiarySelectorUiComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: BeneficiarySelectorUiComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ BeneficiarySelectorUiComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: BeneficiarySelectorUiComponent, selector: "bb-beneficiary-selector-ui", inputs: { totalAccounts: "totalAccounts", totalContacts: "totalContacts", totalContactsItemsCount: "totalContactsItemsCount", contacts: "contacts", accounts: "accounts", tabs: "tabs", closeDropdownRequest$: "closeDropdownRequest$", placeholder: "placeholder", title: "title", helperText: "helperText", hasError: "hasError", ariaLabel: ["aria-label", "ariaLabel"], dropdownIcon: "dropdownIcon", debounceTime: "debounceTime", selectedItem: "selectedItem", search: "search", isClosedPayment: "isClosedPayment", isBeneficiaryDisabled: "isBeneficiaryDisabled", isManualEditDisabled: "isManualEditDisabled" }, outputs: { selectedAccount: "selectedAccount", selectedContact: "selectedContact", searchValue: "searchValue", fetchMoreItems: "fetchMoreItems", manualEdit: "manualEdit", searchBlur: "searchBlur", clear: "clear" }, viewQueries: [{ propertyName: "dropdownItem", first: true, predicate: ["dd"], descendants: true }], ngImport: i0__namespace, template: "<div\n  class=\"bb-beneficiary-selector-ui\"\n  ngbDropdown\n  #dd=\"ngbDropdown\"\n  display=\"static\"\n  (openChange)=\"handleDropdownClose($event, dd)\"\n>\n  <label *ngIf=\"title\" [for]=\"searchElem?.id\">{{ title }}</label>\n\n  <span\n    class=\"bb-dynamic-input__helper-text bb-text-support\"\n    *ngIf=\"helperText\"\n    [id]=\"searchElem?.id + '__helper-text'\"\n    [textContent]=\"helperText\"\n  >\n  </span>\n\n  <bb-search-box-ui\n    ngbDropdownAnchor\n    (focus)=\"focusHandler()\"\n    (blur)=\"onBlur()\"\n    [formControl]=\"search\"\n    (clear)=\"onClear()\"\n    data-role=\"beneficiary-account-input\"\n    (ngModelChange)=\"handleSearch(search.value)\"\n    [placeholder]=\"placeholder\"\n    [squareBorder]=\"true\"\n    [showClear]=\"!isBeneficiaryDisabled\"\n    [autocomplete]=\"'off'\"\n    [disabled]=\"isBeneficiaryDisabled\"\n    role=\"combobox\"\n    aria-haspopup=\"true\"\n    [attr.aria-owns]=\"tabsComponent.tabsId\"\n    #searchElem\n  >\n    <button\n      bbButton\n      ngbDropdownToggle\n      color=\"outline-secondary\"\n      [attr.aria-label]=\"ariaLabel\"\n      data-role=\"open-beneficiary-dropdown-list-button\"\n    >\n      <bb-icon-ui [name]=\"dropdownIcon\"></bb-icon-ui>\n    </button>\n  </bb-search-box-ui>\n\n  <div\n    ngbDropdownMenu\n    class=\"dropdown-menu dropdown-menu-right w-100 bb-beneficiary-selector-ui__list\"\n  >\n    <bb-beneficiary-tabs\n      #tabsComponent\n      class=\"bb-beneficiary-selector-ui__tabs\"\n      [accounts]=\"accounts\"\n      [contacts]=\"contacts\"\n      [listState]=\"state\"\n      [tabsConfig]=\"tabs\"\n      [totalAccounts]=\"totalAccounts\"\n      [totalContacts]=\"totalContacts\"\n      [canEditManually]=\"!isClosedPayment && !isManualEditDisabled\"\n      [isDropdownOpen]=\"dd.isOpen()\"\n      (selectedContact)=\"selectContact($event); dd.close()\"\n      (selectedAccount)=\"selectAccount($event); dd.close()\"\n      (fetchMoreItems)=\"fetchMoreItemsAction($event)\"\n      (manualEdit)=\"onManualEdit(); dd.close()\"\n    >\n    </bb-beneficiary-tabs>\n  </div>\n</div>\n", components: [{ type: i2__namespace$1.SearchBoxComponent, selector: "bb-search-box-ui", inputs: ["placeholder", "maxLength", "squareBorder", "typeaheadOptions", "showSearch", "showClear", "searchLabel", "clearLabel", "autocomplete"], outputs: ["submit", "clear", "valueChange"] }, { type: i1__namespace.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: BeneficiaryTabsComponent, selector: "bb-beneficiary-tabs", inputs: ["accounts", "contacts", "totalAccounts", "totalContacts", "listState", "tabsConfig", "isDropdownOpen", "canEditManually"], outputs: ["selectedAccount", "selectedContact", "fetchMoreItems", "manualEdit", "searching"] }], directives: [{ type: i6__namespace.NgbDropdown, selector: "[ngbDropdown]", inputs: ["open", "placement", "container", "autoClose", "display", "dropdownClass"], outputs: ["openChange"], exportAs: ["ngbDropdown"] }, { type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i6__namespace.NgbDropdownAnchor, selector: "[ngbDropdownAnchor]" }, { type: i1__namespace$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$1.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i7__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i6__namespace.NgbDropdownToggle, selector: "[ngbDropdownToggle]" }, { type: i6__namespace.NgbDropdownMenu, selector: "[ngbDropdownMenu]" }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: BeneficiarySelectorUiComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-beneficiary-selector-ui',
                        templateUrl: './beneficiary-selector-ui.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return []; }, propDecorators: { totalAccounts: [{
                    type: i0.Input
                }], totalContacts: [{
                    type: i0.Input
                }], totalContactsItemsCount: [{
                    type: i0.Input
                }], contacts: [{
                    type: i0.Input
                }], accounts: [{
                    type: i0.Input
                }], tabs: [{
                    type: i0.Input
                }], closeDropdownRequest$: [{
                    type: i0.Input
                }], placeholder: [{
                    type: i0.Input
                }], title: [{
                    type: i0.Input
                }], helperText: [{
                    type: i0.Input
                }], hasError: [{
                    type: i0.Input
                }], ariaLabel: [{
                    type: i0.Input,
                    args: ['aria-label']
                }], dropdownIcon: [{
                    type: i0.Input
                }], selectedAccount: [{
                    type: i0.Output
                }], selectedContact: [{
                    type: i0.Output
                }], searchValue: [{
                    type: i0.Output
                }], fetchMoreItems: [{
                    type: i0.Output
                }], manualEdit: [{
                    type: i0.Output
                }], searchBlur: [{
                    type: i0.Output
                }], clear: [{
                    type: i0.Output
                }], debounceTime: [{
                    type: i0.Input
                }], selectedItem: [{
                    type: i0.Input
                }], search: [{
                    type: i0.Input
                }], isClosedPayment: [{
                    type: i0.Input
                }], isBeneficiaryDisabled: [{
                    type: i0.Input
                }], isManualEditDisabled: [{
                    type: i0.Input
                }], dropdownItem: [{
                    type: i0.ViewChild,
                    args: ['dd']
                }] } });

    var BbKeyboardNavigationModule = /** @class */ (function () {
        function BbKeyboardNavigationModule() {
        }
        return BbKeyboardNavigationModule;
    }());
    /** @nocollapse */ BbKeyboardNavigationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: BbKeyboardNavigationModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ BbKeyboardNavigationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: BbKeyboardNavigationModule, declarations: [KeyboardNavigationItemDirective,
            KeyboardNavigationAnchorDirective,
            KeyboardNavigationListDirective,
            KeyboardNavigationDirective], imports: [i2.CommonModule], exports: [KeyboardNavigationItemDirective,
            KeyboardNavigationAnchorDirective,
            KeyboardNavigationListDirective,
            KeyboardNavigationDirective] });
    /** @nocollapse */ BbKeyboardNavigationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: BbKeyboardNavigationModule, imports: [[i2.CommonModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: BbKeyboardNavigationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i2.CommonModule],
                        declarations: [
                            KeyboardNavigationItemDirective,
                            KeyboardNavigationAnchorDirective,
                            KeyboardNavigationListDirective,
                            KeyboardNavigationDirective,
                        ],
                        exports: [
                            KeyboardNavigationItemDirective,
                            KeyboardNavigationAnchorDirective,
                            KeyboardNavigationListDirective,
                            KeyboardNavigationDirective,
                        ],
                    }]
            }] });

    var modules$1 = [
        i6.NgbDropdownModule,
        i1$2.IconModule,
        i2$1.SearchBoxModule,
        i5.EmptyStateModule,
        i3$3.HighlightModule,
        i2$3.DropdownMenuModule,
        i7.ButtonModule,
        i8.LoadingIndicatorModule,
        i10.KeyboardClickModule,
        i2$2.AmountModule,
        PaymentsSrSearchResultInfoModule,
        i1$8.ScrollingModule,
        BbKeyboardNavigationModule,
    ];
    var components$1 = [
        BeneficiarySelectorUiComponent,
        BeneficiaryTabsComponent,
        BeneficiaryContactComponent,
        BeneficiaryAccountComponent,
        BeneficiaryScrollDirective,
        BeneficiaryScrollItemDirective,
    ];
    var BeneficiarySelectorUIModule = /** @class */ (function () {
        function BeneficiarySelectorUIModule() {
        }
        return BeneficiarySelectorUIModule;
    }());
    /** @nocollapse */ BeneficiarySelectorUIModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: BeneficiarySelectorUIModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ BeneficiarySelectorUIModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: BeneficiarySelectorUIModule, declarations: [BeneficiarySelectorUiComponent,
            BeneficiaryTabsComponent,
            BeneficiaryContactComponent,
            BeneficiaryAccountComponent,
            BeneficiaryScrollDirective,
            BeneficiaryScrollItemDirective], imports: [i2.CommonModule, i1$1.ReactiveFormsModule, i6.NgbDropdownModule,
            i1$2.IconModule,
            i2$1.SearchBoxModule,
            i5.EmptyStateModule,
            i3$3.HighlightModule,
            i2$3.DropdownMenuModule,
            i7.ButtonModule,
            i8.LoadingIndicatorModule,
            i10.KeyboardClickModule,
            i2$2.AmountModule,
            PaymentsSrSearchResultInfoModule,
            i1$8.ScrollingModule,
            BbKeyboardNavigationModule, focus.FocusModule], exports: [BeneficiarySelectorUiComponent, i6.NgbDropdownModule,
            i1$2.IconModule,
            i2$1.SearchBoxModule,
            i5.EmptyStateModule,
            i3$3.HighlightModule,
            i2$3.DropdownMenuModule,
            i7.ButtonModule,
            i8.LoadingIndicatorModule,
            i10.KeyboardClickModule,
            i2$2.AmountModule,
            PaymentsSrSearchResultInfoModule,
            i1$8.ScrollingModule,
            BbKeyboardNavigationModule] });
    /** @nocollapse */ BeneficiarySelectorUIModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: BeneficiarySelectorUIModule, imports: [__spreadArray(__spreadArray([i2.CommonModule, i1$1.ReactiveFormsModule], __read(modules$1)), [focus.FocusModule]), i6.NgbDropdownModule,
            i1$2.IconModule,
            i2$1.SearchBoxModule,
            i5.EmptyStateModule,
            i3$3.HighlightModule,
            i2$3.DropdownMenuModule,
            i7.ButtonModule,
            i8.LoadingIndicatorModule,
            i10.KeyboardClickModule,
            i2$2.AmountModule,
            PaymentsSrSearchResultInfoModule,
            i1$8.ScrollingModule,
            BbKeyboardNavigationModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: BeneficiarySelectorUIModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: __spreadArray([], __read(components$1)),
                        imports: __spreadArray(__spreadArray([i2.CommonModule, i1$1.ReactiveFormsModule], __read(modules$1)), [focus.FocusModule]),
                        exports: __spreadArray([BeneficiarySelectorUiComponent], __read(modules$1)),
                    }]
            }] });

    var PurposeOfPaymentDetailComponent = /** @class */ (function () {
        function PurposeOfPaymentDetailComponent() {
            this.hostRef = this;
            this.isPoPOpen = false;
            this.isPoPMessageTruncated = false;
            /**
             * Label for the pop information.
             */
            this.label = '';
            /**
             * Hide label for the pop information.
             */
            this.hideLabel = false;
            /**
             * The purpose of payment code.
             */
            this.code = '';
            /**
             * The purpose of payment description.
             */
            this.description = '';
        }
        /**
         * Set truncation status of PoP message
         */
        PurposeOfPaymentDetailComponent.prototype.setIsContentTruncated = function (isMessageTruncated) {
            this.isPoPMessageTruncated = isMessageTruncated;
        };
        /**
         * Toggle PoP message
         */
        PurposeOfPaymentDetailComponent.prototype.togglePoP = function () {
            this.isPoPOpen = !this.isPoPOpen;
        };
        return PurposeOfPaymentDetailComponent;
    }());
    /** @nocollapse */ PurposeOfPaymentDetailComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PurposeOfPaymentDetailComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ PurposeOfPaymentDetailComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PurposeOfPaymentDetailComponent, selector: "bb-purpose-of-payment-detail", inputs: { label: "label", hideLabel: "hideLabel", code: "code", description: "description" }, ngImport: i0__namespace, template: "<ng-container *ngIf=\"code || description\">\n  <div\n    class=\"bb-text-bold\"\n    *ngIf=\"label; else defaultPurposeOfPaymentLabelTemplate\"\n  >\n    {{ label }}\n  </div>\n  <ng-template #defaultPurposeOfPaymentLabelTemplate>\n    <div\n      *ngIf=\"!hideLabel\"\n      class=\"bb-text-bold\"\n      i18n=\"@@purpose-of-payment-detail.label\"\n      data-role=\"payment-purpose-of-payment-label\"\n    >\n      Purpose of payment\n    </div>\n  </ng-template>\n\n  <div data-role=\"payment-purpose-of-payment\" *ngIf=\"description\">\n    <bb-ellipsis-ui [lineClamp]=\"isPoPOpen ? description.length : 3\">\n      <div bbIsContentTruncated [hostRef]=\"hostRef\">\n        <ng-container *ngIf=\"code\">{{ code }} - </ng-container>\n\n        {{ description }}\n      </div>\n    </bb-ellipsis-ui>\n\n    <button\n      *ngIf=\"isPoPMessageTruncated\"\n      bbButton\n      color=\"link-text\"\n      (click)=\"togglePoP()\"\n    >\n      <ng-container [ngSwitch]=\"isPoPOpen\">\n        <ng-container\n          *ngSwitchCase=\"true\"\n          i18n=\"@@purpose-of-payment-detail.showLessBtn\"\n        >\n          See less\n        </ng-container>\n        <ng-container\n          *ngSwitchDefault\n          i18n=\"@@purpose-of-payment-detail.showMoreBtn\"\n        >\n          See more\n        </ng-container>\n      </ng-container>\n    </button>\n  </div>\n</ng-container>\n", components: [{ type: i1__namespace$4.EllipsisComponent, selector: "bb-ellipsis-ui", inputs: ["text", "tooltipTriggers", "lineClamp"] }], directives: [{ type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace$4.IsContentTruncatedDirective, selector: "[bbIsContentTruncated]", inputs: ["hostRef"] }, { type: i7__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i2__namespace.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i2__namespace.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i2__namespace.NgSwitchDefault, selector: "[ngSwitchDefault]" }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PurposeOfPaymentDetailComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-purpose-of-payment-detail',
                        templateUrl: './purpose-of-payment-detail.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], propDecorators: { label: [{
                    type: i0.Input
                }], hideLabel: [{
                    type: i0.Input
                }], code: [{
                    type: i0.Input
                }], description: [{
                    type: i0.Input
                }] } });

    var TableHeaderCheckboxComponent = /** @class */ (function () {
        function TableHeaderCheckboxComponent(parentTable) {
            this.parentTable = parentTable;
            /**
             * Input which sends current selection set to be cleared
             */
            this.clearSelection = new rxjs.Subject();
        }
        TableHeaderCheckboxComponent.prototype.getSelectedItemsCount = function (list) {
            var _this = this;
            return list.filter(function (item) { return _this.parentTable.isSelected(item); }).length;
        };
        Object.defineProperty(TableHeaderCheckboxComponent.prototype, "isChecked", {
            get: function () {
                var pageList = this.parentTable.dataSource
                    ? this.parentTable.dataSource
                    : [];
                var selected = this.getSelectedItemsCount(pageList);
                return selected === pageList.length;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TableHeaderCheckboxComponent.prototype, "isIntermediate", {
            get: function () {
                var pageList = this.parentTable.dataSource
                    ? this.parentTable.dataSource
                    : [];
                var selected = this.getSelectedItemsCount(pageList);
                return selected > 0 && selected < pageList.length;
            },
            enumerable: false,
            configurable: true
        });
        TableHeaderCheckboxComponent.prototype.onClick = function (event) {
            var _this = this;
            event.stopPropagation();
            if (this.checkboxInput) {
                var pageList = this.parentTable.dataSource
                    ? this.parentTable.dataSource
                    : [];
                if (this.isIntermediate) {
                    pageList.forEach(function (item) {
                        if (_this.parentTable.isSelected(item)) {
                            _this.parentTable.toggleItem(item, false);
                        }
                    });
                }
                else {
                    pageList.forEach(function (item) {
                        _this.parentTable.toggleItem(item, !_this.parentTable.isSelected(item));
                    });
                }
            }
        };
        TableHeaderCheckboxComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.clearSelection.subscribe(function (items) {
                if (items.size) {
                    items.forEach(function (pid) {
                        _this.parentTable.toggleItem(pid, false);
                    });
                }
            });
        };
        TableHeaderCheckboxComponent.prototype.ngOnDestroy = function () {
            this.clearSelection.unsubscribe();
        };
        return TableHeaderCheckboxComponent;
    }());
    /** @nocollapse */ TableHeaderCheckboxComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TableHeaderCheckboxComponent, deps: [{ token: i1__namespace$8.TableDirective }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ TableHeaderCheckboxComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TableHeaderCheckboxComponent, selector: "bb-table-header-checkbox", inputs: { clearSelection: "clearSelection" }, viewQueries: [{ propertyName: "checkboxInput", first: true, predicate: ["checkbox"], descendants: true, read: i0.ElementRef, static: true }], ngImport: i0__namespace, template: "<div class=\"bb-input-checkbox\" (click)=\"onClick($event)\">\n  <input\n    #checkbox\n    type=\"checkbox\"\n    [checked]=\"isChecked\"\n    aria-label=\"select all items\"\n    [indeterminate]=\"isIntermediate\"\n    class=\"bb-input-checkbox__input\"\n    i18n-aria-label=\"@@bb-table-header-checkbox.aria-label\"\n  />\n  <span class=\"bb-input-checkbox__content bb-block--xs\"></span>\n</div>\n" });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TableHeaderCheckboxComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-table-header-checkbox',
                        templateUrl: './table-header-checkbox.component.html',
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$8.TableDirective }]; }, propDecorators: { checkboxInput: [{
                    type: i0.ViewChild,
                    args: ['checkbox', { read: i0.ElementRef, static: true }]
                }], clearSelection: [{
                    type: i0.Input
                }] } });

    var TableCheckboxComponent = /** @class */ (function () {
        function TableCheckboxComponent(parentTable) {
            this.parentTable = parentTable;
        }
        Object.defineProperty(TableCheckboxComponent.prototype, "rowItem", {
            get: function () {
                return this.row || this.rowId || undefined;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TableCheckboxComponent.prototype, "isChecked", {
            get: function () {
                return this.parentTable.isSelected(this.rowItem);
            },
            enumerable: false,
            configurable: true
        });
        TableCheckboxComponent.prototype.onClick = function (event) {
            event.stopPropagation();
            if (this.checkboxInput) {
                if (event.target !== this.checkboxInput.nativeElement) {
                    this.checkboxInput.nativeElement.checked =
                        !this.checkboxInput.nativeElement.checked;
                }
                this.parentTable.toggleItem(this.rowItem, this.checkboxInput.nativeElement.checked);
            }
        };
        return TableCheckboxComponent;
    }());
    /** @nocollapse */ TableCheckboxComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TableCheckboxComponent, deps: [{ token: i1__namespace$8.TableDirective }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ TableCheckboxComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TableCheckboxComponent, selector: "bb-table-checkbox", inputs: { row: "row", rowId: "rowId" }, viewQueries: [{ propertyName: "checkboxInput", first: true, predicate: ["checkbox"], descendants: true, read: i0.ElementRef, static: true }], ngImport: i0__namespace, template: "<div class=\"bb-input-checkbox bb-stack\" (click)=\"onClick($event)\">\n  <input\n    #checkbox\n    type=\"checkbox\"\n    [checked]=\"isChecked\"\n    aria-label=\"select item\"\n    class=\"bb-input-checkbox__input\"\n    i18n-aria-label=\"@@bb-table-checkbox.aria-label\"\n  />\n  <span class=\"bb-input-checkbox__content\"></span>\n</div>\n" });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TableCheckboxComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-table-checkbox',
                        templateUrl: './table-checkbox.component.html',
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$8.TableDirective }]; }, propDecorators: { row: [{
                    type: i0.Input
                }], rowId: [{
                    type: i0.Input
                }], checkboxInput: [{
                    type: i0.ViewChild,
                    args: ['checkbox', { read: i0.ElementRef, static: true }]
                }] } });

    var PayordStatusBadgeComponent = /** @class */ (function () {
        function PayordStatusBadgeComponent() {
            this.hostRef = this;
            this.statusMap = exports.Status;
            /**
             * Map containing the color to apply to each status
             */
            this.statusColorMap = exports.StatusBadgeColorMap;
            /**
             * Sets the default case badge color if not found in the map
             */
            this.statusColorDefault = 'warning';
            /**
             * Sets when to display abbreviated badge text
             */
            this.showAbbreviated = false;
        }
        PayordStatusBadgeComponent.prototype.isKnownStatus = function () {
            return this.status && this.status in this.statusMap;
        };
        return PayordStatusBadgeComponent;
    }());
    /** @nocollapse */ PayordStatusBadgeComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordStatusBadgeComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ PayordStatusBadgeComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordStatusBadgeComponent, selector: "bb-payord-status-badge", inputs: { status: "status", statusColorMap: "statusColorMap", statusColorDefault: "statusColorDefault", showAbbreviated: "showAbbreviated" }, ngImport: i0__namespace, template: "<ng-container\n  bbPayordStatusBadgeCustomizable\n  [bbHostRef]=\"hostRef\"\n></ng-container>\n\n<ng-template bbPayordStatusBadgeCustomizable let-hostRef>\n  <ng-container *ngIf=\"hostRef.isKnownStatus(); else defaultStatus\">\n    <ng-container\n      *ngIf=\"hostRef.showAbbreviated\"\n      bbPayordStatusBadgeAbbreviationCustomizable\n      [bbHostRef]=\"hostRef\"\n    ></ng-container>\n    <ng-container\n      *ngIf=\"!hostRef.showAbbreviated\"\n      bbPayordStatusBadgeLabelCustomizable\n      [bbHostRef]=\"hostRef\"\n    ></ng-container>\n  </ng-container>\n\n  <ng-template #defaultStatus>\n    <bb-badge-ui\n      *ngIf=\"hostRef.showAbbreviated; else defaultStatusLabel\"\n      [color]=\"hostRef.statusColorDefault\"\n      [abbr]=\"hostRef.status.slice(0, 3)\"\n      [text]=\"hostRef.status | titlecase\"\n    ></bb-badge-ui>\n    <ng-template #defaultStatusLabel>\n      <bb-badge-ui\n        [color]=\"hostRef.statusColorDefault\"\n        [text]=\"hostRef.status | uppercase\"\n      ></bb-badge-ui>\n    </ng-template>\n  </ng-template>\n</ng-template>\n\n<ng-template bbPayordStatusBadgeAbbreviationCustomizable let-hostRef>\n  <span\n    class=\"d-none\"\n    aria-hidden=\"true\"\n    i18n=\"@@payord-status-badge.abbreviation.label\"\n    #abbreviation\n  >\n    {hostRef.status, select, OPEN {Ope} CLOSED {Clo} INVALID {Inv} VALID {Val}\n    ENTERED {Ent} READY {Rea} ACCEPTED {Acc} APPROVED {App} REJECTED {Rej}\n    CANCELLED {Can} CANCELLATION_PENDING {Can} PROCESSED {Pro} ACKNOWLEDGED\n    {Ack} DOWNLOADING {Dow} EXPIRED {Exp} PENDING {Pen} }\n  </span>\n  <span\n    class=\"d-none\"\n    aria-hidden=\"true\"\n    i18n=\"@@payord-status-badge.tooltip.label\"\n    #tooltip\n  >\n    {hostRef.status, select, OPEN {Open} CLOSED {Closed} INVALID {Invalid} VALID\n    {Valid} ENTERED {Entered} READY {Ready} ACCEPTED {Accepted} APPROVED\n    {Approved} REJECTED {Rejected} CANCELLED {Cancelled} CANCELLATION_PENDING\n    {Cancellation pending} PROCESSED {Processed} ACKNOWLEDGED {Acknowledged}\n    DOWNLOADING {Downloading} EXPIRED {Expired} PENDING {Pending} }\n  </span>\n  <bb-badge-ui\n    [color]=\"hostRef.statusColorMap[hostRef.status]\"\n    [abbr]=\"abbreviation.textContent\"\n    [text]=\"tooltip.textContent\"\n  ></bb-badge-ui>\n</ng-template>\n\n<ng-template bbPayordStatusBadgeLabelCustomizable let-hostRef>\n  <span\n    class=\"d-none\"\n    aria-hidden=\"true\"\n    i18n=\"@@payord-status-badge.label\"\n    #label\n  >\n    {hostRef.status, select, OPEN {Open} CLOSED {Closed} INVALID {Invalid} VALID\n    {Valid} ENTERED {Entered} READY {Ready} ACCEPTED {Accepted} APPROVED\n    {Approved} REJECTED {Rejected} CANCELLED {Cancelled} CANCELLATION_PENDING\n    {Cancellation pending} PROCESSED {Processed} ACKNOWLEDGED {Acknowledged}\n    DOWNLOADING {Downloading} EXPIRED {Expired} PENDING {Pending} }\n  </span>\n  <bb-badge-ui\n    [color]=\"hostRef.statusColorMap[hostRef.status]\"\n    [text]=\"label.textContent\"\n  ></bb-badge-ui>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return i1__namespace$9.BadgeComponent; }), selector: "bb-badge-ui", inputs: ["color", "text", "abbr", "circle", "wrap", "ariaLabel"] }], directives: [{ type: i0__namespace.forwardRef(function () { return PayordStatusBadgeCustomizableDirective; }), selector: "[bbPayordStatusBadgeCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i2__namespace.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0__namespace.forwardRef(function () { return PayordStatusBadgeAbbreviationCustomizableDirective; }), selector: "[bbPayordStatusBadgeAbbreviationCustomizable]" }, { type: i0__namespace.forwardRef(function () { return PayordStatusBadgeLabelCustomizableDirective; }), selector: "[bbPayordStatusBadgeLabelCustomizable]" }], pipes: { "titlecase": i0__namespace.forwardRef(function () { return i2__namespace.TitleCasePipe; }), "uppercase": i0__namespace.forwardRef(function () { return i2__namespace.UpperCasePipe; }) } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordStatusBadgeComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-payord-status-badge',
                        templateUrl: './status-badge.component.html',
                    }]
            }], propDecorators: { status: [{
                    type: i0.Input
                }], statusColorMap: [{
                    type: i0.Input
                }], statusColorDefault: [{
                    type: i0.Input
                }], showAbbreviated: [{
                    type: i0.Input
                }] } });
    var PayordStatusBadgeCustomizableDirective = /** @class */ (function (_super) {
        __extends(PayordStatusBadgeCustomizableDirective, _super);
        function PayordStatusBadgeCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return PayordStatusBadgeCustomizableDirective;
    }(i1$7.BbTemplate));
    /** @nocollapse */ PayordStatusBadgeCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordStatusBadgeCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ PayordStatusBadgeCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: PayordStatusBadgeCustomizableDirective, selector: "[bbPayordStatusBadgeCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordStatusBadgeCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbPayordStatusBadgeCustomizable]',
                    }]
            }] });
    var PayordStatusBadgeAbbreviationCustomizableDirective = /** @class */ (function (_super) {
        __extends(PayordStatusBadgeAbbreviationCustomizableDirective, _super);
        function PayordStatusBadgeAbbreviationCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return PayordStatusBadgeAbbreviationCustomizableDirective;
    }(i1$7.BbTemplate));
    /** @nocollapse */ PayordStatusBadgeAbbreviationCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordStatusBadgeAbbreviationCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ PayordStatusBadgeAbbreviationCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: PayordStatusBadgeAbbreviationCustomizableDirective, selector: "[bbPayordStatusBadgeAbbreviationCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordStatusBadgeAbbreviationCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbPayordStatusBadgeAbbreviationCustomizable]',
                    }]
            }] });
    var PayordStatusBadgeLabelCustomizableDirective = /** @class */ (function (_super) {
        __extends(PayordStatusBadgeLabelCustomizableDirective, _super);
        function PayordStatusBadgeLabelCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return PayordStatusBadgeLabelCustomizableDirective;
    }(i1$7.BbTemplate));
    /** @nocollapse */ PayordStatusBadgeLabelCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordStatusBadgeLabelCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ PayordStatusBadgeLabelCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: PayordStatusBadgeLabelCustomizableDirective, selector: "[bbPayordStatusBadgeLabelCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordStatusBadgeLabelCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbPayordStatusBadgeLabelCustomizable]',
                    }]
            }] });

    var ExportPdfDirective = /** @class */ (function () {
        function ExportPdfDirective(notificationService, paymentOrderService) {
            this.notificationService = notificationService;
            this.paymentOrderService = paymentOrderService;
            this.downloadSub = new rxjs.Subject();
        }
        ExportPdfDirective.convertByteToBlob = function (data) {
            var blob = new Blob([data], { type: 'application/pdf' });
            var link = document.createElement('a');
            var fileName = $localize(templateObject_1$1 || (templateObject_1$1 = __makeTemplateObject([":@@export-pdf.pdf-file.name:payment_confirmation"], [":@@export-pdf.pdf-file.name:payment_confirmation"])));
            link.href = window.URL.createObjectURL(blob);
            link.download = fileName;
            link.click();
        };
        ExportPdfDirective.prototype.onClick = function () {
            this.downloadSub.next(this.paymentOrderId);
        };
        ExportPdfDirective.prototype.ngOnInit = function () {
            this.downloadSub.pipe(operators.switchMap(this.getPdf.bind(this))).subscribe();
        };
        ExportPdfDirective.prototype.ngOnDestroy = function () {
            this.downloadSub.unsubscribe();
        };
        ExportPdfDirective.prototype.getPdf = function (paymentOrderId) {
            var _this = this;
            return this.paymentOrderService
                .getPaymentOrderExport({ paymentOrderId: paymentOrderId })
                .pipe(operators.tap(ExportPdfDirective.convertByteToBlob), operators.catchError(function (err) {
                var header = $localize(templateObject_2 || (templateObject_2 = __makeTemplateObject([":@@export-pdf.pdf-file.server-error-header:Server error"], [":@@export-pdf.pdf-file.server-error-header:Server error"])));
                var message = $localize(templateObject_3 || (templateObject_3 = __makeTemplateObject([":@@export-pdf.pdf-file.server-error-message:Unknown error occurred."], [":@@export-pdf.pdf-file.server-error-message:Unknown error occurred."])));
                if (err.status === 409) {
                    header = $localize(templateObject_4 || (templateObject_4 = __makeTemplateObject([":@@export-pdf.pdf-file.409-error-header:The payment status does not allow this action. Please verify if the payment is still valid"], [":@@export-pdf.pdf-file.409-error-header:The payment status does not allow this action. Please verify if the payment is still valid"])));
                    message = '';
                }
                _this.notificationService.showNotification({
                    modifier: 'error',
                    header: header,
                    message: message,
                });
                return rxjs.of(err);
            }));
        };
        return ExportPdfDirective;
    }());
    /** @nocollapse */ ExportPdfDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ExportPdfDirective, deps: [{ token: i1__namespace$a.NotificationService }, { token: i1__namespace$b.PaymentOrdersHttpService }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ ExportPdfDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ExportPdfDirective, selector: "[bbExportPdf]", inputs: { paymentOrderId: ["bbExportPdf", "paymentOrderId"] }, host: { listeners: { "click": "onClick()" } }, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ExportPdfDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbExportPdf]',
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$a.NotificationService }, { type: i1__namespace$b.PaymentOrdersHttpService }]; }, propDecorators: { paymentOrderId: [{
                    type: i0.Input,
                    args: ['bbExportPdf']
                }], onClick: [{
                    type: i0.HostListener,
                    args: ['click']
                }] } });
    var templateObject_1$1, templateObject_2, templateObject_3, templateObject_4;

    var formatIBAN = function (iban) { return iban && iban.replace(/(.{4})/g, '$1 ').trim(); };

    var AccountFormatterPipe = /** @class */ (function () {
        function AccountFormatterPipe() {
        }
        AccountFormatterPipe.prototype.transform = function (identification) {
            if ((identification === null || identification === void 0 ? void 0 : identification.schemeName) === 'IBAN') {
                return formatIBAN(identification.identification);
            }
            return identification === null || identification === void 0 ? void 0 : identification.identification;
        };
        return AccountFormatterPipe;
    }());
    /** @nocollapse */ AccountFormatterPipe.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccountFormatterPipe, deps: [], target: i0__namespace.ɵɵFactoryTarget.Pipe });
    /** @nocollapse */ AccountFormatterPipe.ɵpipe = i0__namespace.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccountFormatterPipe, name: "accountFormatter" });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccountFormatterPipe, decorators: [{
                type: i0.Pipe,
                args: [{ name: 'accountFormatter', pure: true }]
            }] });

    var PaymentsTableComponent = /** @class */ (function () {
        function PaymentsTableComponent(paymentConfigService) {
            var _this = this;
            this.paymentConfigService = paymentConfigService;
            this.hostRef = this;
            /**
             * Search query string (if any)
             */
            this.clearSelection = new rxjs.Subject();
            /**
             * Flag indicates if the user has delete permission.
             * Default value is `false`.
             */
            this.canDelete = false;
            /**
             * Flag indicates if the user has edit permission.
             * Default value is `false`.
             */
            this.canEdit = false;
            /**
             * Flag indicates whether called from Manage transfers
             */
            this.isManageTransfersMode = false;
            /**
             * The flag to denote if it is a debit mode
             */
            this.isDebitMode = false;
            /**
             * Payment mode
             * Default is `SINGLE`.
             */
            this.paymentMode = 'ALL';
            /**
             * Select template event emitter
             */
            this.selectTemplate = new i0.EventEmitter();
            /**
             * Click template event emitter.
             */
            this.templateItemClick = new i0.EventEmitter();
            /**
             * Changes will be triggered on paymentItemClick event emit.
             */
            this.paymentItemClick = new i0.EventEmitter();
            /**
             * Click delete event emitter.
             */
            this.triggerDeleteTemplate = new i0.EventEmitter();
            /**
             * Changes will be triggered on column sorting.
             */
            this.sort = new i0.EventEmitter();
            /**
             * Selection set
             */
            this.selectionSet = new i0.EventEmitter();
            /**
             * Edit template event emitter.
             */
            this.editTemplate = new i0.EventEmitter();
            /**
             * Approval event emitter
             */
            this.approvePayment = new i0.EventEmitter();
            /**
             * Rejection event emitter
             */
            this.rejectPayment = new i0.EventEmitter();
            /**
             * Cancel event emitter
             */
            this.cancelPayment = new i0.EventEmitter();
            /**
             * Edit event emitter
             */
            this.editPayment = new i0.EventEmitter();
            /**
             * Copy payment event emitter
             */
            this.copyPayment = new i0.EventEmitter();
            this.selection = new Set();
            this.preferences = exports.Preferences;
            this.mapPaymentType = function (item) { return _this.paymentConfigService.mapPaymentType(item); };
        }
        PaymentsTableComponent.prototype.onSelectTemplate = function (item) {
            this.selectTemplate.emit(item);
        };
        PaymentsTableComponent.prototype.onTemplateClick = function (template) {
            this.templateItemClick.emit(template);
        };
        PaymentsTableComponent.prototype.onPaymentItemClick = function (paymentItem) {
            this.paymentItemClick.emit(paymentItem);
        };
        PaymentsTableComponent.prototype.onEditTemplate = function (template) {
            this.editTemplate.emit(Object.assign(Object.assign({}, template), { query: this.searchTerm }));
        };
        PaymentsTableComponent.prototype.trackById = function (_index, item) {
            return item.id;
        };
        PaymentsTableComponent.prototype.onSort = function (event) {
            this.sort.emit(event);
        };
        PaymentsTableComponent.prototype.setSelection = function (selection) {
            this.selection = selection;
            this.selectionSet.emit(this.selection);
        };
        PaymentsTableComponent.prototype.getIds = function (items) {
            return items === null || items === void 0 ? void 0 : items.map(function (payment) { return payment.id; });
        };
        PaymentsTableComponent.prototype.openDeleteTemplateModal = function (item) {
            this.triggerDeleteTemplate.emit(Object.assign(Object.assign({}, item), { query: this.searchTerm }));
        };
        PaymentsTableComponent.prototype.formatExecutionDate = function (date) {
            var result = date;
            if (result === getRelativeDate()) {
                result = 'today';
            }
            else if (result === getRelativeDate(1)) {
                result = 'tomorrow';
            }
            return result;
        };
        PaymentsTableComponent.prototype.stopPropagation = function (event) {
            event.stopPropagation();
        };
        PaymentsTableComponent.prototype.isApprovalProhibited = function (paymentItem) {
            return this.isActionDisabled(paymentItem === null || paymentItem === void 0 ? void 0 : paymentItem.actions, exports.AvailableActions.APPROVE);
        };
        PaymentsTableComponent.prototype.onApprovePayment = function (payment, event) {
            event.stopPropagation();
            if (!this.isApprovalProhibited(payment)) {
                this.approvePayment.emit(payment);
            }
        };
        PaymentsTableComponent.prototype.isRejectionProhibited = function (paymentItem) {
            return this.isActionDisabled(paymentItem === null || paymentItem === void 0 ? void 0 : paymentItem.actions, exports.AvailableActions.REJECT);
        };
        PaymentsTableComponent.prototype.onRejectPayment = function (payment, event) {
            event.stopPropagation();
            if (!this.isRejectionProhibited(payment)) {
                this.rejectPayment.emit(payment);
            }
        };
        PaymentsTableComponent.prototype.onCancelPayment = function (payment) {
            if (!this.isCancelProhibited(payment)) {
                this.cancelPayment.emit(payment);
            }
        };
        PaymentsTableComponent.prototype.onEditPayment = function (payment) {
            if (!this.isEditProhibited(payment)) {
                this.editPayment.emit(payment);
            }
        };
        PaymentsTableComponent.prototype.onCopyPayment = function (payment) {
            if (this.canCopyPayment(payment)) {
                this.copyPayment.emit(Object.assign(Object.assign({}, payment), { isPaymentCopy: true }));
            }
        };
        PaymentsTableComponent.prototype.canCopyPayment = function (payment) {
            return canCopyPayment(payment);
        };
        PaymentsTableComponent.prototype.isEditProhibited = function (paymentItem) {
            return this.isActionDisabled(paymentItem === null || paymentItem === void 0 ? void 0 : paymentItem.actions, exports.AvailableActions.EDIT);
        };
        PaymentsTableComponent.prototype.isCancelProhibited = function (paymentItem) {
            return this.isActionDisabled(paymentItem === null || paymentItem === void 0 ? void 0 : paymentItem.actions, exports.AvailableActions.CANCEL);
        };
        PaymentsTableComponent.prototype.transactionInformation = function (payment) {
            return payment === null || payment === void 0 ? void 0 : payment.transferTransactionInformation;
        };
        PaymentsTableComponent.prototype.hasCreatePermission = function (template) {
            return hasCreatePermission(template.actions);
        };
        PaymentsTableComponent.prototype.isActionDisabled = function (actions, actionType) {
            return !actions || actions.indexOf(actionType) === -1;
        };
        return PaymentsTableComponent;
    }());
    /** @nocollapse */ PaymentsTableComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentsTableComponent, deps: [{ token: PaymentConfigService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ PaymentsTableComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PaymentsTableComponent, selector: "bb-table-payments-component", inputs: { items: "items", searchTerm: "searchTerm", clearSelection: "clearSelection", responseError: "responseError", canDelete: "canDelete", canEdit: "canEdit", isManageTransfersMode: "isManageTransfersMode", isDebitMode: "isDebitMode", paymentMode: "paymentMode", totalCount: "totalCount", pageSize: "pageSize" }, outputs: { selectTemplate: "selectTemplate", templateItemClick: "templateItemClick", paymentItemClick: "paymentItemClick", triggerDeleteTemplate: "triggerDeleteTemplate", sort: "sort", selectionSet: "selectionSet", editTemplate: "editTemplate", approvePayment: "approvePayment", rejectPayment: "rejectPayment", cancelPayment: "cancelPayment", editPayment: "editPayment", copyPayment: "copyPayment" }, ngImport: i0__namespace, template: "<div *ngIf=\"items?.items.length && !responseError\" class=\"table-responsive\">\n  <div class=\"bb-block bb-block--xl\"></div>\n  <div *ngIf=\"searchTerm\">\n    <div class=\"bb-block bb-block--xs\"></div>\n    <div\n      class=\"bb-block bb-block--xs\"\n      data-role=\"results-found\"\n      i18n=\"@@manage-payment-items.results-found\"\n    >\n      {items.totalCount, plural, =1 {1 result found} other\n      {{{items.totalCount}} results found}}\n    </div>\n  </div>\n\n  <table\n    bbTableFocus\n    [bbTable]=\"getIds(items.items)\"\n    class=\"table table-hover bb-table\"\n    (sort)=\"onSort($event)\"\n    (selectRow)=\"setSelection($event)\"\n  >\n    <thead>\n      <tr data-role=\"item-row\">\n        <td\n          data-role=\"selection-checkbox\"\n          *ngIf=\"isManageTransfersMode || isDebitMode\"\n        >\n          <bb-table-header-checkbox\n            [clearSelection]=\"clearSelection\"\n          ></bb-table-header-checkbox>\n        </td>\n        <td *ngIf=\"!(isManageTransfersMode || isDebitMode)\"></td>\n        <ng-template #itemStatusHeader>\n          <span\n            class=\"th-content\"\n            i18n=\"\n              Manage payments table header label| Manage payments header label\n              for status@@manage-payments.header.status\"\n          >\n            Status\n          </span>\n        </ng-template>\n        <th\n          data-role=\"header-status\"\n          scope=\"col\"\n          bbSortable=\"status\"\n          tabindex=\"0\"\n          *ngIf=\"isManageTransfersMode || isDebitMode\"\n        >\n          <ng-container *ngTemplateOutlet=\"itemStatusHeader\"></ng-container>\n        </th>\n        <ng-template #templateNameHeader>\n          <span\n            class=\"th-content\"\n            i18n=\"\n              Manage payment templates table header label| Manage payment\n              templates header label for\n              status@@manage-payment-templates.header.status\"\n          >\n            Template name\n          </span>\n        </ng-template>\n        <th\n          data-role=\"header-status\"\n          scope=\"col\"\n          *ngIf=\"!(isManageTransfersMode || isDebitMode)\"\n          tabindex=\"0\"\n        >\n          <ng-container *ngTemplateOutlet=\"templateNameHeader\"></ng-container>\n        </th>\n        <th\n          #itemFromHeader\n          data-role=\"header-account-from\"\n          scope=\"col\"\n          bbSortable=\"originatorName\"\n          tabindex=\"0\"\n        >\n          <span\n            class=\"th-content\"\n            i18n=\"\n              Manage payment items table header label| Manage payment items\n              header label for from@@manage-payment-items.header.from\"\n          >\n            From\n          </span>\n        </th>\n        <th\n          #itemToHeader\n          data-role=\"header-account-to\"\n          scope=\"col\"\n          bbSortable=\"counterpartyName\"\n          tabindex=\"0\"\n        >\n          <span\n            class=\"th-content\"\n            i18n=\"\n              Manage payment items table header label| Manage payment items\n              header label for number of\n              payments@@manage-payment-items.header.payments-number\"\n          >\n            To\n          </span>\n        </th>\n        <th\n          #itemCurrencyHeader\n          data-role=\"header-currency\"\n          scope=\"col\"\n          class=\"bb-table--text-end\"\n          bbSortable=\"currency\"\n          tabindex=\"0\"\n        >\n          <span\n            class=\"th-content\"\n            i18n=\"\n              Manage payment items table header label| Manage payment items\n              header label for currency@@manage-payment-items.header.currency\"\n          >\n            Ccy\n          </span>\n        </th>\n        <th\n          #itemAmountHeader\n          scope=\"col\"\n          data-role=\"header-amount\"\n          class=\"bb-table--text-end\"\n          bbSortable=\"amount\"\n          tabindex=\"0\"\n        >\n          <span\n            i18n=\"\n              Manage payment items table header label| Manage payment items\n              header label for amount@@manage-payment-items.header.amount\"\n            class=\"th-content\"\n          >\n            Amount\n          </span>\n        </th>\n\n        <th\n          *ngIf=\"\n            (paymentMode === 'RECURRING' || paymentMode === 'ALL') &&\n            (isManageTransfersMode || isDebitMode)\n          \"\n          scope=\"col\"\n          data-role=\"header-frequency\"\n          tabindex=\"0\"\n        >\n          <span\n            i18n=\"\n              Manage payments table header label| Manage payments header label\n              for frequency@@manage-payments.header.frequency\"\n            class=\"th-content\"\n          >\n            Frequency\n          </span>\n        </th>\n\n        <th\n          *ngIf=\"isManageTransfersMode || isDebitMode\"\n          scope=\"col\"\n          data-role=\"header-exec-date\"\n          bbSortable=\"requestedExecutionDate\"\n          tabindex=\"0\"\n        >\n          <span\n            i18n=\"\n              Manage payments table header label| Manage payments header label\n              for execution date@@manage-payments.header.execution-date\"\n            class=\"th-content\"\n          >\n            Exec. date\n          </span>\n        </th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr\n        *ngFor=\"let item of items?.items; trackBy: trackById\"\n        [bbRow]=\"item\"\n        (bbKeyboardClick)=\"\n          isManageTransfersMode || isDebitMode\n            ? onPaymentItemClick(item)\n            : onTemplateClick(item)\n        \"\n        tabindex=\"0\"\n        data-role=\"payment-row\"\n      >\n        <td\n          data-role=\"payment-col-selection\"\n          *ngIf=\"isManageTransfersMode || isDebitMode\"\n        >\n          <bb-table-checkbox\n            class=\"bb-stack\"\n            [rowId]=\"item.id\"\n          ></bb-table-checkbox>\n        </td>\n        <td\n          data-role=\"payment-col-selection\"\n          *ngIf=\"!(isManageTransfersMode || isDebitMode)\"\n        >\n          <bb-icon-ui\n            class=\"bb-text-disabled bb-stack__item\"\n            name=\"insert-drive-file\"\n          >\n          </bb-icon-ui>\n        </td>\n\n        <td\n          data-role=\"payment-col-status\"\n          *ngIf=\"!(isManageTransfersMode || isDebitMode); else statusData\"\n        >\n          <span class=\"sr-only\">\n            <ng-container *ngTemplateOutlet=\"templateNameHeader\">\n            </ng-container>\n          </span>\n          <div class=\"bb-text-bold\">\n            {{ item.name }}\n          </div>\n\n          <div #paymentTypeHeading class=\"d-none\" aria-hidden=\"true\">\n            <ng-container i18n=\"manage-payment-templates.payment-types\">\n              {item?.details?.paymentType, select, US_FOREIGN_WIRE {US Foreign\n              Wire Payment} US_FOREIGN_WIRE_ILE {US Foreign Wire Payment}\n              SEPA_CT_CLOSED {SEPA CT Transfer} SEPA_CT {SEPA CT Transfer}\n              SEPA_CT_ILE {SEPA CT Transfer}}\n            </ng-container>\n          </div>\n\n          <div\n            class=\"bb-text-support\"\n            data-role=\"payment-type\"\n            *ngIf=\"!(isManageTransfersMode || isDebitMode)\"\n          >\n            {{\n              mapPaymentType(item)\n                ? mapPaymentType(item)\n                : paymentTypeHeading.textContent\n            }}\n          </div>\n        </td>\n\n        <ng-template #statusData>\n          <td data-role=\"payment-col-status\">\n            <span class=\"sr-only\">\n              <ng-container *ngTemplateOutlet=\"itemStatusHeader\">\n              </ng-container>\n            </span>\n            <div class=\"bb-stack\">\n              <div class=\"bb-stack__item\">\n                <bb-payord-status-badge\n                  class=\"d-none d-md-block\"\n                  [status]=\"item.status\"\n                  [showAbbreviated]=\"true\"\n                ></bb-payord-status-badge>\n              </div>\n            </div>\n          </td>\n        </ng-template>\n\n        <td>\n          <bb-badge-ui\n            *ngIf=\"item.edited\"\n            color=\"secondary\"\n            text=\"Edit pending\"\n            data-role=\"edit-pending-label\"\n            i18n-text=\"@@manage-payments.payment.list.editPending.label\"\n          ></bb-badge-ui>\n\n          <span class=\"sr-only\">; {{ itemFromHeader.innerText }}:</span>\n          <div data-role=\"payment-col-debitor-name\">\n            {{\n              isDebitMode ||\n              transactionInformation(item)?.counterparty?.role === 'DEBTOR'\n                ? transactionInformation(item)?.counterparty?.name\n                : isManageTransfersMode\n                ? item.originator?.name\n                : item.details.originatorAccount.name\n            }}\n          </div>\n          <div class=\"bb-text-support\" data-role=\"payment-col-debitor-account\">\n            {{\n              isDebitMode ||\n              transactionInformation(item)?.counterparty?.role === 'DEBTOR'\n                ? (transactionInformation(item)?.counterpartyAccount\n                    ?.identification | accountFormatter)\n                : isManageTransfersMode\n                ? (item.originatorAccount?.identification | accountFormatter)\n                : (item.details.originatorAccount.identification\n                  | accountFormatter)\n            }}\n          </div>\n        </td>\n\n        <td>\n          <span class=\"sr-only\">; {{ itemToHeader.innerText }}:</span>\n          <div data-role=\"payment-col-creditor-name\">\n            {{\n              isDebitMode ||\n              transactionInformation(item)?.counterparty?.role === 'DEBTOR'\n                ? item.originator?.name\n                : isManageTransfersMode\n                ? transactionInformation(item)?.counterparty?.name\n                : item.details.transferTransactionInformation.counterparty.name\n            }}\n          </div>\n          <div class=\"bb-text-support\" data-role=\"payment-col-creditor-account\">\n            {{\n              isDebitMode ||\n              transactionInformation(item)?.counterparty?.role === 'DEBTOR'\n                ? (item.originatorAccount?.identification | accountFormatter)\n                : isManageTransfersMode\n                ? (transactionInformation(item)?.counterpartyAccount\n                    ?.identification | accountFormatter)\n                : (item.details.transferTransactionInformation\n                    .counterpartyAccount.identification | accountFormatter)\n            }}\n          </div>\n        </td>\n\n        <td class=\"bb-table--text-end\">\n          <span class=\"sr-only\">; {{ itemCurrencyHeader.innerText }}</span>\n          <span data-role=\"payment-col-currency\">\n            {{\n              isManageTransfersMode || isDebitMode\n                ? item.transferTransactionInformation?.instructedAmount\n                    .currencyCode\n                : item.details.transferTransactionInformation.instructedAmount\n                    .currencyCode\n            }}\n          </span>\n        </td>\n\n        <td data-role=\"payment-col-amount\" class=\"bb-table--text-end\">\n          <span class=\"sr-only\">; {{ itemAmountHeader.innerText }}:</span>\n          <bb-amount-ui\n            [amount]=\"\n              isManageTransfersMode || isDebitMode\n                ? item.transferTransactionInformation?.instructedAmount.amount\n                : item.details.transferTransactionInformation.instructedAmount\n                    .amount\n            \"\n          ></bb-amount-ui>\n        </td>\n\n        <td\n          *ngIf=\"\n            (paymentMode === 'RECURRING' || paymentMode === 'ALL') &&\n            (isManageTransfersMode || isDebitMode)\n          \"\n          data-role=\"payment-col-frequency\"\n        >\n          <span i18n=\"@@@@manage-payments.payment.list.frequency\">\n            {item.schedule?.transferFrequency, select, DAILY {Daily} WEEKLY\n            {Weekly} MONTHLY {Monthly} QUARTERLY {Quarterly} YEARLY {Yearly}\n            other {{{item.schedule?.transferFrequency | titlecase}}}}\n          </span>\n        </td>\n\n        <td data-role=\"payment-col-date\">\n          <span\n            *ngIf=\"item.schedule?.nextExecutionDate\"\n            i18n=\"@@manage-payments.payment.list.execution-date-value\"\n          >\n            {formatExecutionDate(item.schedule?.nextExecutionDate), select,\n            today {Today} tomorrow {Tomorrow} other\n            {{{ item.schedule?.nextExecutionDate | date:'shortDate'}}} }\n          </span>\n\n          <span *ngIf=\"!item.schedule?.nextExecutionDate\">\n            {{ item.requestedExecutionDate | date: 'shortDate' }}\n          </span>\n        </td>\n\n        <td>\n          <div class=\"bb-stack\">\n            <div\n              class=\"bb-stack__item bb-stack__item--push-right d-none d-md-block\"\n            >\n              <div class=\"bb-stack\">\n                <!-- Large screens (Hidden only on xs and sm) -->\n                <ng-container\n                  *ngIf=\"\n                    item &&\n                    item.status === 'ENTERED' &&\n                    (isManageTransfersMode || isDebitMode)\n                  \"\n                >\n                  <div class=\"bb-stack__item\">\n                    <button\n                      bbButton\n                      buttonSize=\"sm\"\n                      [circle]=\"true\"\n                      color=\"success\"\n                      triggers=\"hover focus\"\n                      aria-label=\"Approve payment\"\n                      data-role=\"approve-payment-order\"\n                      (click)=\"onApprovePayment(item, $event)\"\n                      [ngClass]=\"{\n                        'disabled btn-circle--filled':\n                          isApprovalProhibited(item)\n                      }\"\n                      i18n-aria-label=\"\n                        Approve payment@@manage-payments-list.action.approve\"\n                      [bbTooltip]=\"\n                        isApprovalProhibited(item)\n                          ? actionNotAvailable\n                          : actionApprove\n                      \"\n                    >\n                      <bb-icon-ui name=\"check\"></bb-icon-ui>\n                    </button>\n                  </div>\n\n                  <div class=\"bb-stack__item\">\n                    <button\n                      bbButton\n                      buttonSize=\"sm\"\n                      [circle]=\"true\"\n                      color=\"danger\"\n                      triggers=\"hover focus\"\n                      aria-label=\"Reject payment\"\n                      data-role=\"reject-payment-order\"\n                      (click)=\"onRejectPayment(item, $event)\"\n                      [ngClass]=\"{\n                        'disabled btn-circle--filled':\n                          isRejectionProhibited(item)\n                      }\"\n                      i18n-aria-label=\"\n                        Reject payment@@manage-payments-list.action.reject\"\n                      [bbTooltip]=\"\n                        isRejectionProhibited(item)\n                          ? actionNotAvailable\n                          : actionReject\n                      \"\n                    >\n                      <bb-icon-ui name=\"times\"></bb-icon-ui>\n                    </button>\n                  </div>\n                </ng-container>\n\n                <div\n                  class=\"bb-stack__item\"\n                  *ngIf=\"isManageTransfersMode || isDebitMode\"\n                >\n                  <span\n                    class=\"sr-only\"\n                    i18n=\"@@manage-templates.bb-table-payments.more-actions\"\n                    >More actions</span\n                  >\n                  <bb-dropdown-menu-ui\n                    type=\"button\"\n                    buttonSize=\"sm\"\n                    container=\"body\"\n                    btnCircle=\"true\"\n                    icon=\"ellipsis-h\"\n                    btnColor=\"link-dark\"\n                    triggers=\"hover focus\"\n                    data-role=\"more-options\"\n                    ariaLabel=\"More actions\"\n                    bbTooltip=\"More actions\"\n                    (click)=\"stopPropagation($event)\"\n                    (keydown.enter)=\"stopPropagation($event)\"\n                    i18n-ariaLabel=\"\n                      @@manage-transfers.bb-table-payments.more-actions.label\"\n                    i18n-bbTooltip=\"\n                      @@manage-transfers.bb-table-payments.more-actions.tooltip\"\n                  >\n                    <ng-template bbDropdownMenuItem>\n                      <button\n                        type=\"button\"\n                        role=\"menuitem\"\n                        class=\"dropdown-item\"\n                        *ngIf=\"canCopyPayment(item)\"\n                        (bbKeyboardClick)=\"onCopyPayment(item)\"\n                        data-role=\"transfer-payment-order-dropdown\"\n                        i18n=\"@@manage-payments.payment.list.action.transfer\"\n                      >\n                        Transfer\n                      </button>\n                      <button\n                        type=\"button\"\n                        role=\"menuitem\"\n                        class=\"dropdown-item\"\n                        i18n=\"@@manage-payments.payment.list.action.edit\"\n                        data-role=\"edit-payment-order-dropdown\"\n                        *ngIf=\"!isEditProhibited(item)\"\n                        (bbKeyboardClick)=\"onEditPayment(item)\"\n                      >\n                        Edit\n                      </button>\n\n                      <button\n                        type=\"button\"\n                        role=\"menuitem\"\n                        container=\"body\"\n                        placement=\"left\"\n                        class=\"dropdown-item\"\n                        triggers=\"hover focus\"\n                        data-role=\"cancel-payment-order-dropdown\"\n                        (bbKeyboardClick)=\"onCancelPayment(item)\"\n                        [class.disabled]=\"isCancelProhibited(item)\"\n                        [bbTooltip]=\"\n                          isCancelProhibited(item) && actionNotAvailable\n                        \"\n                      >\n                        Cancel\n                      </button>\n\n                      <button\n                        type=\"button\"\n                        role=\"menuitem\"\n                        class=\"dropdown-item\"\n                        data-role=\"export-payment-order-dropdown\"\n                        i18n=\"@@manage-payments.payment.list.action.export-pdf\"\n                        *ngIf=\"item.permissibleActions?.export\"\n                        [bbExportPdf]=\"item.id\"\n                      >\n                        Export PDF\n                      </button>\n                    </ng-template>\n                  </bb-dropdown-menu-ui>\n                </div>\n              </div>\n            </div>\n          </div>\n        </td>\n\n        <td\n          data-role=\"create-payment-col-selection\"\n          *ngIf=\"!(isManageTransfersMode || isDebitMode)\"\n        >\n          <button\n            *ngIf=\"hasCreatePermission(item)\"\n            bbButton\n            buttonSize=\"md\"\n            color=\"unstyled\"\n            aria-label=\"Create payment from template\"\n            i18n-aria-label=\"\n              Button for create payment from\n              template@@manage-payment-templates.create-payment.button\"\n            data-role=\"create-payment-button\"\n            bbTooltip=\"Create new payment from this template\"\n            triggers=\"hover focus\"\n            i18n-bbTooltip=\"\n              Tooltip for create payment from\n              template@@manage-payment-templates.create-payment.tooltip\"\n            (click)=\"stopPropagation($event); onSelectTemplate(item)\"\n          >\n            <bb-icon-ui name=\"payments\" class=\"bb-stack__item\"> </bb-icon-ui>\n          </button>\n        </td>\n        <td\n          class=\"text-right\"\n          *ngIf=\"\n            (canDelete || canEdit) && !(isManageTransfersMode || isDebitMode)\n          \"\n        >\n          <span\n            class=\"sr-only\"\n            i18n=\"@@manage-templates.bb-table-payments.more-actions\"\n            >More actions</span\n          >\n          <bb-dropdown-menu-ui\n            class=\"bb-button-bar__button\"\n            btnColor=\"unstyled\"\n            btnCircle=\"true\"\n            container=\"body\"\n            data-role=\"more-options\"\n            (bbKeyboardClick)=\"$event.stopPropagation()\"\n          >\n            <ng-template bbDropdownLabel>\n              <bb-icon-ui name=\"ellipsis-h\"></bb-icon-ui>\n            </ng-template>\n            <ng-template bbDropdownMenuItem>\n              <button\n                [attr.aria-label]=\"'Delete ' + item.name\"\n                *ngIf=\"canEdit\"\n                role=\"menuitem\"\n                type=\"button\"\n                class=\"dropdown-item\"\n                (bbKeyboardClick)=\"onEditTemplate(item)\"\n                i18n=\"manage-payment-templates.edit.template\"\n                data-role=\"edit-template-dropdown-item\"\n              >\n                Edit\n              </button>\n              <button\n                *ngIf=\"canDelete\"\n                [attr.aria-label]=\"'Delete ' + item.name\"\n                role=\"menuitem\"\n                type=\"button\"\n                class=\"dropdown-item\"\n                (bbKeyboardClick)=\"openDeleteTemplateModal(item)\"\n                i18n=\"manage-payment-templates.remove.account\"\n                data-role=\"delete-template-dropdown\"\n              >\n                Delete\n              </button>\n            </ng-template>\n          </bb-dropdown-menu-ui>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</div>\n\n<ng-template #actionNotAvailable>\n  <span i18n=\"@@manage-payments.action.not.available\">Not available</span>\n</ng-template>\n\n<ng-template #actionApprove>\n  <span i18n=\"@@manage-payments.action.approve\">Approve</span>\n</ng-template>\n\n<ng-template #actionReject>\n  <span i18n=\"@@manage-payments.action.reject\">Reject</span>\n</ng-template>\n", components: [{ type: TableHeaderCheckboxComponent, selector: "bb-table-header-checkbox", inputs: ["clearSelection"] }, { type: TableCheckboxComponent, selector: "bb-table-checkbox", inputs: ["row", "rowId"] }, { type: i1__namespace.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: PayordStatusBadgeComponent, selector: "bb-payord-status-badge", inputs: ["status", "statusColorMap", "statusColorDefault", "showAbbreviated"] }, { type: i1__namespace$9.BadgeComponent, selector: "bb-badge-ui", inputs: ["color", "text", "abbr", "circle", "wrap", "ariaLabel"] }, { type: i2__namespace$2.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: i2__namespace$3.DropdownMenuComponent, selector: "bb-dropdown-menu-ui", inputs: ["label", "disabled", "options", "icon", "iconSize", "iconColor", "btnColor", "btnCircle", "optionLabelKey", "fullWidth", "autoClose", "container", "position", "ariaLabel", "dropDownMenuRole", "dropDownMenuId", "buttonSize", "dropDownButtonLabel", "visibleElementDependingOnViewport", "role"], outputs: ["select"] }], directives: [{ type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace$8.TableDirective, selector: "table[bbTable]", inputs: ["bbTable"], outputs: ["selectRow", "rowClick", "sort"] }, { type: i1__namespace$8.TableFocusDirective, selector: "[bbTableFocus]", inputs: ["focusFirstRowOnChanges"] }, { type: i1__namespace$8.TableSortableDirective, selector: "th[bbSortable]", inputs: ["bbSortable", "direction"], outputs: ["sort"] }, { type: i2__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i2__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1__namespace$8.TableRowDirective, selector: "tr[bbRow]", inputs: ["bbRow"] }, { type: i10__namespace.KeyboardClickDirective, selector: "[bbKeyboardClick]", outputs: ["bbKeyboardClick"] }, { type: i7__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i2__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i9__namespace.TooltipDirective, selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i2__namespace$3.DropdownMenuItemDirective, selector: "ng-template[bbDropdownMenuItem]" }, { type: ExportPdfDirective, selector: "[bbExportPdf]", inputs: ["bbExportPdf"] }, { type: i2__namespace$3.DropdownLabelDirective, selector: "ng-template[bbDropdownLabel]" }], pipes: { "accountFormatter": AccountFormatterPipe, "titlecase": i2__namespace.TitleCasePipe, "date": i2__namespace.DatePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentsTableComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-table-payments-component',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        templateUrl: 'bb-table-payments.component.html',
                    }]
            }], ctorParameters: function () { return [{ type: PaymentConfigService }]; }, propDecorators: { items: [{
                    type: i0.Input
                }], searchTerm: [{
                    type: i0.Input
                }], clearSelection: [{
                    type: i0.Input
                }], responseError: [{
                    type: i0.Input
                }], canDelete: [{
                    type: i0.Input
                }], canEdit: [{
                    type: i0.Input
                }], isManageTransfersMode: [{
                    type: i0.Input
                }], isDebitMode: [{
                    type: i0.Input
                }], paymentMode: [{
                    type: i0.Input
                }], totalCount: [{
                    type: i0.Input
                }], pageSize: [{
                    type: i0.Input
                }], selectTemplate: [{
                    type: i0.Output
                }], templateItemClick: [{
                    type: i0.Output
                }], paymentItemClick: [{
                    type: i0.Output
                }], triggerDeleteTemplate: [{
                    type: i0.Output
                }], sort: [{
                    type: i0.Output
                }], selectionSet: [{
                    type: i0.Output
                }], editTemplate: [{
                    type: i0.Output
                }], approvePayment: [{
                    type: i0.Output
                }], rejectPayment: [{
                    type: i0.Output
                }], cancelPayment: [{
                    type: i0.Output
                }], editPayment: [{
                    type: i0.Output
                }], copyPayment: [{
                    type: i0.Output
                }] } });

    var PaymentsListComponent = /** @class */ (function () {
        function PaymentsListComponent(paymentConfigService) {
            this.paymentConfigService = paymentConfigService;
            this.hostRef = this;
            /**
             * Flag indicates if the user has delete permission.
             * Default value is `false`.
             */
            this.canDelete = false;
            /**
             * Flag indicates if the user has edit permission.
             * Default value is `false`.
             */
            this.canEdit = false;
            /**
             * Flag indicates whether called from Manage transfers
             */
            this.isManageTransfersMode = false;
            /**
             * Number of payment items shown per page.
             */
            this.size = 0;
            /**
             * Payment mode
             * Default is `SINGLE`.
             */
            this.paymentMode = 'SINGLE';
            /**
             * The flag to denote if it is a debit payment.
             */
            this.isDebitMode = false;
            /**
             * Click delete event emitter.
             */
            this.triggerDeleteTemplate = new i0.EventEmitter();
            /**
             * Click template event emitter.
             */
            this.templateItemClick = new i0.EventEmitter();
            /**
             * Select template event emitter
             */
            this.selectTemplate = new i0.EventEmitter();
            /**
             * Edit template event emitter.
             */
            this.editTemplate = new i0.EventEmitter();
            /**
             * Changes will be triggered on paymentItemClick event emit.
             */
            this.paymentItemClick = new i0.EventEmitter();
            /**
             * Approval event emitter
             */
            this.approvePayment = new i0.EventEmitter();
            /**
             * Rejection event emitter
             */
            this.rejectPayment = new i0.EventEmitter();
            /**
             * Cancel event emitter
             */
            this.cancelPayment = new i0.EventEmitter();
            /**
             * Edit event emitter
             */
            this.editPayment = new i0.EventEmitter();
            /**
             * Copy payment event emitter
             */
            this.copyPayment = new i0.EventEmitter();
            /**
             * Selection set
             */
            this.selectionSet = new i0.EventEmitter();
        }
        PaymentsListComponent.prototype.mapPaymentType = function (item) {
            return this.paymentConfigService.mapPaymentType(item);
        };
        PaymentsListComponent.prototype.onSelectItem = function (item) {
            this.selectTemplate.emit(item);
        };
        PaymentsListComponent.prototype.onEditTemplate = function (template) {
            this.editTemplate.emit(Object.assign(Object.assign({}, template), { query: this.searchTerm }));
        };
        PaymentsListComponent.prototype.openDeleteTemplateModal = function (item) {
            this.triggerDeleteTemplate.emit(Object.assign(Object.assign({}, item), { query: this.searchTerm }));
        };
        PaymentsListComponent.prototype.onTemplateClick = function (template) {
            this.templateItemClick.emit(template);
        };
        PaymentsListComponent.prototype.onPaymentItemClick = function (paymentItem) {
            this.paymentItemClick.emit(paymentItem);
        };
        PaymentsListComponent.prototype.isApprovalProhibited = function (paymentItem) {
            return this.isActionDisabled(paymentItem === null || paymentItem === void 0 ? void 0 : paymentItem.actions, exports.AvailableActions.APPROVE);
        };
        PaymentsListComponent.prototype.onApprovePayment = function (payment, event) {
            event === null || event === void 0 ? void 0 : event.stopPropagation();
            if (!this.isApprovalProhibited(payment)) {
                this.approvePayment.emit(payment);
            }
        };
        PaymentsListComponent.prototype.isRejectionProhibited = function (paymentItem) {
            return this.isActionDisabled(paymentItem === null || paymentItem === void 0 ? void 0 : paymentItem.actions, exports.AvailableActions.REJECT);
        };
        PaymentsListComponent.prototype.onRejectPayment = function (payment, event) {
            event === null || event === void 0 ? void 0 : event.stopPropagation();
            if (!this.isRejectionProhibited(payment)) {
                this.rejectPayment.emit(payment);
            }
        };
        PaymentsListComponent.prototype.onCancelPayment = function (payment) {
            if (!this.isCancelProhibited(payment)) {
                this.cancelPayment.emit(payment);
            }
        };
        PaymentsListComponent.prototype.onEditPayment = function (payment) {
            if (!this.isEditProhibited(payment)) {
                this.editPayment.emit(payment);
            }
        };
        PaymentsListComponent.prototype.onCopyPayment = function (payment) {
            if (this.canCopyPayment(payment)) {
                this.copyPayment.emit(Object.assign(Object.assign({}, payment), { isPaymentCopy: true }));
            }
        };
        PaymentsListComponent.prototype.canCopyPayment = function (payment) {
            return canCopyPayment(payment);
        };
        PaymentsListComponent.prototype.isEditProhibited = function (paymentItem) {
            return this.isActionDisabled(paymentItem === null || paymentItem === void 0 ? void 0 : paymentItem.actions, exports.AvailableActions.EDIT);
        };
        PaymentsListComponent.prototype.isCancelProhibited = function (paymentItem) {
            return this.isActionDisabled(paymentItem === null || paymentItem === void 0 ? void 0 : paymentItem.actions, exports.AvailableActions.CANCEL);
        };
        PaymentsListComponent.prototype.hasCreatePermission = function (item) {
            return hasCreatePermission(item.actions);
        };
        PaymentsListComponent.prototype.formatExecutionDate = function (date) {
            var result = date;
            if (result === getRelativeDate()) {
                result = 'today';
            }
            else if (result === getRelativeDate(1)) {
                result = 'tomorrow';
            }
            return result;
        };
        PaymentsListComponent.prototype.stopPropagation = function (event) {
            event.stopPropagation();
        };
        PaymentsListComponent.prototype.transactionInformation = function (payment) {
            return payment === null || payment === void 0 ? void 0 : payment.transferTransactionInformation;
        };
        PaymentsListComponent.prototype.isActionDisabled = function (actions, actionType) {
            return !actions || actions.indexOf(actionType) === -1;
        };
        return PaymentsListComponent;
    }());
    /** @nocollapse */ PaymentsListComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentsListComponent, deps: [{ token: PaymentConfigService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ PaymentsListComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PaymentsListComponent, selector: "bb-list-payments-component", inputs: { items: "items", searchTerm: "searchTerm", responseError: "responseError", canDelete: "canDelete", canEdit: "canEdit", isManageTransfersMode: "isManageTransfersMode", size: "size", paymentMode: "paymentMode", isDebitMode: "isDebitMode" }, outputs: { triggerDeleteTemplate: "triggerDeleteTemplate", templateItemClick: "templateItemClick", selectTemplate: "selectTemplate", editTemplate: "editTemplate", paymentItemClick: "paymentItemClick", approvePayment: "approvePayment", rejectPayment: "rejectPayment", cancelPayment: "cancelPayment", editPayment: "editPayment", copyPayment: "copyPayment", selectionSet: "selectionSet" }, ngImport: i0__namespace, template: "<div class=\"bb-block bb-block--xl\"></div>\n<div class=\"col-12 bb-list bb-block bb-block--xl px-3\">\n  <div *ngIf=\"items?.length && !responseError\">\n    <div *ngFor=\"let item of items\" class=\"bb-list__item\" tabindex=\"0\">\n      <div\n        (click)=\"\n          isManageTransfersMode || isDebitMode\n            ? onPaymentItemClick(item)\n            : onTemplateClick(item)\n        \"\n      >\n        <div\n          class=\"bb-stack bb-block bb-block--md\"\n          *ngIf=\"!(isManageTransfersMode || isDebitMode)\"\n        >\n          <ng-container>\n            <bb-icon-ui\n              class=\"bb-text-disabled bb-stack__item bb-stack__item--spacing-xl\"\n              name=\"insert-drive-file\"\n            >\n            </bb-icon-ui>\n            <div class=\"bb-stack__item\">\n              <div class=\"bb-text-bold break-word\">\n                {{ item.name }}\n              </div>\n              <div class=\"bb-text-support\" data-role=\"payment-type\">\n                <div #paymentTypeHeading class=\"d-none\" aria-hidden=\"true\">\n                  <ng-container i18n=\"manage-payment-templates.payment-types\">\n                    {item?.details?.paymentType, select, US_FOREIGN_WIRE {US\n                    Foreign Wire Payment} US_FOREIGN_WIRE_ILE {US Foreign Wire\n                    Payment} SEPA_CT_CLOSED {SEPA CT Transfer} SEPA_CT {SEPA CT\n                    Transfer} SEPA_CT_ILE {SEPA CT Transfer}}\n                  </ng-container>\n                </div>\n                {{\n                  mapPaymentType(item)\n                    ? mapPaymentType(item)\n                    : paymentTypeHeading.textContent\n                }}\n              </div>\n            </div>\n          </ng-container>\n\n          <div\n            class=\"bb-stack__item bb-stack__item--push-right\"\n            *ngIf=\"\n              hasCreatePermission(item) &&\n              !(isManageTransfersMode || isDebitMode)\n            \"\n          >\n            <div class=\"bb-stack\">\n              <button\n                bbButton\n                class=\"bb-stack__item\"\n                buttonSize=\"md\"\n                color=\"unstyled\"\n                aria-label=\"Create payment\"\n                i18n-aria-label=\"\n                  Button for create payment from\n                  template@@manage-payment-templates.create-payment.button\"\n                data-role=\"create-payment-button\"\n                bbTooltip=\"Create new payment from this template\"\n                triggers=\"hover focus\"\n                i18n-bbTooltip=\"\n                  Tooltip for create payment from\n                  template@@manage-payment-templates.create-payment.tooltip\"\n                (click)=\"stopPropagation($event); onSelectItem(item)\"\n              >\n                <bb-icon-ui name=\"payments\" class=\"bb-stack__item\">\n                </bb-icon-ui>\n              </button>\n\n              <ng-container *ngIf=\"!(isManageTransfersMode || isDebitMode)\">\n                <span\n                  class=\"sr-only\"\n                  i18n=\"@@manage-transfers.bb-list-templates.more-actions\"\n                  >More actions</span\n                >\n                <bb-dropdown-menu-ui\n                  class=\"bb-button-bar__button\"\n                  btnColor=\"unstyled\"\n                  btnCircle=\"true\"\n                  container=\"body\"\n                  data-role=\"more-options\"\n                  ariaLabel=\"More actions\"\n                  i18n-ariaLabel=\"\n                    @@manage-templates.bb-list-payments.more-actions.label\"\n                  (bbKeyboardClick)=\"$event.stopPropagation()\"\n                  *ngIf=\"canDelete || canEdit\"\n                >\n                  <ng-template bbDropdownLabel>\n                    <bb-icon-ui name=\"ellipsis-h\"></bb-icon-ui>\n                  </ng-template>\n                  <ng-template bbDropdownMenuItem>\n                    <button\n                      *ngIf=\"canEdit\"\n                      role=\"menuitem\"\n                      type=\"button\"\n                      class=\"dropdown-item\"\n                      (bbKeyboardClick)=\"onEditTemplate(item)\"\n                      i18n=\"manage-payment-templates.edit.template\"\n                      data-role=\"edit-template-dropdown-item\"\n                    >\n                      Edit\n                    </button>\n                    <button\n                      *ngIf=\"canDelete\"\n                      [attr.aria-label]=\"'Delete ' + item.name\"\n                      role=\"menuitem\"\n                      type=\"button\"\n                      class=\"dropdown-item\"\n                      (bbKeyboardClick)=\"openDeleteTemplateModal(item)\"\n                      i18n=\"manage-payment-templates.remove.account\"\n                      data-role=\"delete-template-dropdown\"\n                    >\n                      Delete\n                    </button>\n                  </ng-template>\n                </bb-dropdown-menu-ui>\n              </ng-container>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"bb-stack bb-block bb-block--md\">\n          <div class=\"bb-stack__item bb-stack__item--spacing-md bb-text-bold\">\n            From\n          </div>\n          <div class=\"bb-stack__item\">\n            <div data-role=\"payment-debitor-name\" class=\"break-word\">\n              {{\n                isDebitMode ||\n                transactionInformation(item)?.counterparty?.role === 'DEBTOR'\n                  ? transactionInformation(item)?.counterparty?.name\n                  : isManageTransfersMode\n                  ? item.originator?.name\n                  : item.details.originatorAccount.name\n              }}\n            </div>\n            <div\n              class=\"bb-text-support break-word\"\n              data-role=\"payment-debitor-account\"\n            >\n              {{\n                isDebitMode ||\n                transactionInformation(item)?.counterparty?.role === 'DEBTOR'\n                  ? (transactionInformation(item)?.counterpartyAccount\n                      ?.identification | accountFormatter)\n                  : isManageTransfersMode\n                  ? (item.originatorAccount?.identification | accountFormatter)\n                  : (item.details.originatorAccount.identification\n                    | accountFormatter)\n              }}\n            </div>\n          </div>\n          <ng-container *ngIf=\"isManageTransfersMode || isDebitMode\">\n            <div class=\"bb-stack__item bb-stack__item--push-right\">\n              <div class=\"bb-stack\">\n                <bb-payord-status-badge\n                  class=\"d-md-none\"\n                  [status]=\"item.status\"\n                ></bb-payord-status-badge>\n\n                <span\n                  class=\"sr-only\"\n                  i18n=\"@@manage-transfers.bb-list-payments.more-actions\"\n                  >More actions</span\n                >\n                <bb-dropdown-menu-ui\n                  class=\"bb-button-bar__button\"\n                  btnColor=\"unstyled\"\n                  btnCircle=\"true\"\n                  container=\"body\"\n                  data-role=\"more-options\"\n                  (bbKeyboardClick)=\"$event.stopPropagation()\"\n                  i18n-ariaLabel=\"\n                    @@manage-transfers.bb-list-payments.more-actions.label\"\n                >\n                  <ng-template bbDropdownLabel>\n                    <bb-icon-ui name=\"ellipsis-h\"></bb-icon-ui>\n                  </ng-template>\n                  <ng-template bbDropdownMenuItem>\n                    <button\n                      type=\"button\"\n                      role=\"menuitem\"\n                      class=\"dropdown-item\"\n                      *ngIf=\"!isApprovalProhibited(item)\"\n                      (bbKeyboardClick)=\"onApprovePayment(item, $event)\"\n                      i18n=\"\n                        Approve payment|Approve selected\n                        payment@@manage-payments.payment.list.action.approve\"\n                    >\n                      Approve\n                    </button>\n\n                    <button\n                      type=\"button\"\n                      role=\"menuitem\"\n                      class=\"dropdown-item\"\n                      *ngIf=\"!isRejectionProhibited(item)\"\n                      (bbKeyboardClick)=\"onRejectPayment(item, $event)\"\n                      i18n=\"\n                        Reject payment|Reject selected\n                        payment@@manage-payments.payment.list.action.reject\"\n                    >\n                      Reject\n                    </button>\n\n                    <button\n                      type=\"button\"\n                      role=\"menuitem\"\n                      class=\"dropdown-item\"\n                      *ngIf=\"canCopyPayment(item)\"\n                      (bbKeyboardClick)=\"onCopyPayment(item)\"\n                      i18n=\"\n                        copy payment|transfer selected\n                        payment@@manage-payments.payment.list.action.transfer\"\n                    >\n                      Transfer\n                    </button>\n\n                    <button\n                      type=\"button\"\n                      role=\"menuitem\"\n                      class=\"dropdown-item\"\n                      data-role=\"edit-payment-order-dropdown\"\n                      i18n=\"@@manage-payments.payment.list.action.edit\"\n                      *ngIf=\"!isEditProhibited(item)\"\n                      (bbKeyboardClick)=\"onEditPayment(item)\"\n                    >\n                      Edit\n                    </button>\n\n                    <button\n                      type=\"button\"\n                      role=\"menuitem\"\n                      triggers=\"hover\"\n                      placement=\"left\"\n                      class=\"dropdown-item\"\n                      (bbKeyboardClick)=\"onCancelPayment(item)\"\n                      [class.disabled]=\"isCancelProhibited(item)\"\n                      [bbTooltip]=\"\n                        isCancelProhibited(item) && actionNotAvailable\n                      \"\n                      i18n=\"\n                        cancel payment|cancel selected\n                        payment@@manage-payments.payment.list.action.cancel\"\n                    >\n                      Cancel\n                    </button>\n                    <button\n                      type=\"button\"\n                      role=\"menuitem\"\n                      class=\"dropdown-item\"\n                      data-role=\"export-payment-order-dropdown\"\n                      i18n=\"@@manage-payments.payment.list.action.export-pdf\"\n                      *ngIf=\"item.permissibleActions?.export\"\n                      [bbExportPdf]=\"item.id\"\n                    >\n                      Export PDF\n                    </button>\n                  </ng-template>\n                </bb-dropdown-menu-ui>\n              </div>\n            </div>\n          </ng-container>\n        </div>\n\n        <div class=\"bb-stack bb-block bb-block--md\">\n          <div class=\"bb-stack__item bb-stack__item--spacing-xl bb-text-bold\">\n            To\n          </div>\n          <div class=\"bb-stack__item\">\n            <div data-role=\"payment-creditor-name\" class=\"break-word\">\n              {{\n                isDebitMode ||\n                transactionInformation(item)?.counterparty?.role === 'DEBTOR'\n                  ? item.originator?.name\n                  : isManageTransfersMode\n                  ? transactionInformation(item)?.counterparty?.name\n                  : item.details.transferTransactionInformation.counterparty\n                      .name\n              }}\n            </div>\n            <div\n              class=\"bb-text-support break-word\"\n              data-role=\"payment-creditor-account\"\n            >\n              {{\n                isDebitMode ||\n                transactionInformation(item)?.counterparty?.role === 'DEBTOR'\n                  ? (item.originatorAccount?.identification | accountFormatter)\n                  : isManageTransfersMode\n                  ? (transactionInformation(item)?.counterpartyAccount\n                      ?.identification | accountFormatter)\n                  : (item.details.transferTransactionInformation\n                      .counterpartyAccount.identification | accountFormatter)\n              }}\n            </div>\n          </div>\n          <div\n            class=\"bb-stack__item bb-stack__item--push-right\"\n            *ngIf=\"!(isManageTransfersMode || isDebitMode)\"\n          >\n            <bb-amount-ui\n              [amount]=\"\n                item.details.transferTransactionInformation.instructedAmount\n                  .amount\n              \"\n              [currency]=\"\n                item.details.transferTransactionInformation.instructedAmount\n                  .currencyCode\n              \"\n              [mapCurrency]=\"false\"\n            ></bb-amount-ui>\n          </div>\n        </div>\n\n        <div\n          class=\"bb-stack bb-block bb-block--md\"\n          *ngIf=\"isManageTransfersMode || isDebitMode\"\n        >\n          <div class=\"bb-stack__item bb-stack__item--spacing-xl bb-text-bold\">\n            Exec. date\n          </div>\n          <div class=\"bb-stack__item\">\n            <div\n              data-role=\"payment-exec-date\"\n              *ngIf=\"item.schedule?.nextExecutionDate\"\n              i18n=\"@@manage-payments.payment.list.execution-date-value\"\n            >\n              {formatExecutionDate(item.schedule?.nextExecutionDate), select,\n              today {Today} tomorrow {Tomorrow} other\n              {{{ item.schedule?.nextExecutionDate | date:'shortDate'}}} }\n            </div>\n            <div *ngIf=\"!item.schedule?.nextExecutionDate\">\n              {{ item.requestedExecutionDate | date: 'shortDate' }}\n            </div>\n          </div>\n          <div class=\"bb-stack__item bb-stack__item--push-right\">\n            <bb-amount-ui\n              [amount]=\"\n                item.transferTransactionInformation?.instructedAmount.amount\n              \"\n              [currency]=\"\n                item.transferTransactionInformation?.instructedAmount\n                  .currencyCode\n              \"\n              [mapCurrency]=\"false\"\n            ></bb-amount-ui>\n          </div>\n        </div>\n        <div\n          class=\"bb-stack\"\n          *ngIf=\"\n            (paymentMode === 'RECURRING' || paymentMode === 'ALL') &&\n            (isManageTransfersMode || isDebitMode)\n          \"\n        >\n          <div class=\"bb-stack__item bb-stack__item--spacing-xl bb-text-bold\">\n            Frequency\n          </div>\n          <div class=\"bb-stack__item\">\n            <div\n              data-role=\"payment-frequency\"\n              i18n=\"@@manage-payments.payment.list.frequency-value\"\n            >\n              {item.schedule?.transferFrequency, select, DAILY {Daily} WEEKLY\n              {Weekly} MONTHLY {Monthly} QUARTERLY {Quarterly} YEARLY {Yearly}\n              other {{{item.schedule?.transferFrequency | titlecase}}}}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<ng-template #actionNotAvailable>\n  <span i18n=\"@@manage-payments.action.not.available\">Not available</span>\n</ng-template>\n", components: [{ type: i1__namespace.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i2__namespace$3.DropdownMenuComponent, selector: "bb-dropdown-menu-ui", inputs: ["label", "disabled", "options", "icon", "iconSize", "iconColor", "btnColor", "btnCircle", "optionLabelKey", "fullWidth", "autoClose", "container", "position", "ariaLabel", "dropDownMenuRole", "dropDownMenuId", "buttonSize", "dropDownButtonLabel", "visibleElementDependingOnViewport", "role"], outputs: ["select"] }, { type: PayordStatusBadgeComponent, selector: "bb-payord-status-badge", inputs: ["status", "statusColorMap", "statusColorDefault", "showAbbreviated"] }, { type: i2__namespace$2.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }], directives: [{ type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i7__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i9__namespace.TooltipDirective, selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i10__namespace.KeyboardClickDirective, selector: "[bbKeyboardClick]", outputs: ["bbKeyboardClick"] }, { type: i2__namespace$3.DropdownLabelDirective, selector: "ng-template[bbDropdownLabel]" }, { type: i2__namespace$3.DropdownMenuItemDirective, selector: "ng-template[bbDropdownMenuItem]" }, { type: ExportPdfDirective, selector: "[bbExportPdf]", inputs: ["bbExportPdf"] }], pipes: { "accountFormatter": AccountFormatterPipe, "date": i2__namespace.DatePipe, "titlecase": i2__namespace.TitleCasePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentsListComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-list-payments-component',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        templateUrl: 'bb-list-payments.component.html',
                    }]
            }], ctorParameters: function () { return [{ type: PaymentConfigService }]; }, propDecorators: { items: [{
                    type: i0.Input
                }], searchTerm: [{
                    type: i0.Input
                }], responseError: [{
                    type: i0.Input
                }], canDelete: [{
                    type: i0.Input
                }], canEdit: [{
                    type: i0.Input
                }], isManageTransfersMode: [{
                    type: i0.Input
                }], size: [{
                    type: i0.Input
                }], paymentMode: [{
                    type: i0.Input
                }], isDebitMode: [{
                    type: i0.Input
                }], triggerDeleteTemplate: [{
                    type: i0.Output
                }], templateItemClick: [{
                    type: i0.Output
                }], selectTemplate: [{
                    type: i0.Output
                }], editTemplate: [{
                    type: i0.Output
                }], paymentItemClick: [{
                    type: i0.Output
                }], approvePayment: [{
                    type: i0.Output
                }], rejectPayment: [{
                    type: i0.Output
                }], cancelPayment: [{
                    type: i0.Output
                }], editPayment: [{
                    type: i0.Output
                }], copyPayment: [{
                    type: i0.Output
                }], selectionSet: [{
                    type: i0.Output
                }] } });

    var ScheduleLabelComponent = /** @class */ (function () {
        function ScheduleLabelComponent() {
            // @todo should be configurable and passed from parent
            this.minOccurrences = 2;
        }
        Object.defineProperty(ScheduleLabelComponent.prototype, "startDate", {
            get: function () {
                return this.item && Date.parse(this.item.startDate)
                    ? new Date(this.item.startDate)
                    : undefined;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ScheduleLabelComponent.prototype, "isSingleFrequency", {
            get: function () {
                return (this.item &&
                    this.item.frequency &&
                    (this.item.frequency.value
                        ? this.item.frequency.value.toLocaleLowerCase() === 'once'
                        : false));
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ScheduleLabelComponent.prototype, "endDate", {
            get: function () {
                return this.item && this.item.endDate && Date.parse(this.item.endDate)
                    ? new Date(this.item.endDate)
                    : undefined;
            },
            enumerable: false,
            configurable: true
        });
        ScheduleLabelComponent.prototype.isToday = function () {
            if (this.item === undefined) {
                throw new Error('`item` input is required in `bb-schedule-label-ui` component');
            }
            var today = new Date().setHours(0, 0, 0, 0);
            var startDate = new Date(this.item.startDate);
            return startDate.setHours(0, 0, 0, 0) === today;
        };
        ScheduleLabelComponent.prototype.hasEnd = function () {
            return (!!this.item &&
                (this.item.endDate !== undefined || this.item.repeat !== undefined));
        };
        ScheduleLabelComponent.prototype.hasLimit = function () {
            return this.hasEnd() && !this.isSingleFrequency;
        };
        ScheduleLabelComponent.prototype.hasEnoughOccurences = function () {
            return (!!this.item &&
                this.item.repeat !== undefined &&
                this.item.repeat >= this.minOccurrences);
        };
        return ScheduleLabelComponent;
    }());
    /** @nocollapse */ ScheduleLabelComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ScheduleLabelComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ ScheduleLabelComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ScheduleLabelComponent, selector: "bb-schedule-label-ui", inputs: { item: "item" }, ngImport: i0__namespace, template: "\n    <span\n      i18n=\"\n        Schedule frequency title list|List of titles for available schedule\n        frequencies@@bb-schedule-label-ui.frequency.list\"\n      >{ item?.frequency?.value, select, other {Once} DAILY {Daily} WEEKLY\n      {Weekly} BIWEEKLY {Bi-Weekly} MONTHLY {Monthly} QUARTERLY {Quarterly}\n      YEARLY {Annually} }</span\n    >\n    <span>&nbsp;&minus;</span>\n    <ng-container *ngIf=\"isSingleFrequency\">\n      <span\n        *ngIf=\"isToday()\"\n        i18n=\"\n          Today|Capitalized word for\n          today@@bb-schedule-label-ui.label.today.title\"\n      >\n        Today</span\n      >\n      <span\n        *ngIf=\"!isToday()\"\n        i18n=\"\n          On|Word to be used before a date to indicate that the payment will be\n          executed on that date@@bb-schedule-label-ui.label.on\"\n      >\n        on</span\n      >\n    </ng-container>\n\n    <ng-container *ngIf=\"!isSingleFrequency\">\n      <span\n        i18n=\"\n          Schedule start|Word to be used before a date to indicate that this\n          date is a starting date of the\n          schedule@@bb-schedule-label-ui.label.start\"\n      >\n        from</span\n      >\n      <span *ngIf=\"isToday()\">\n        <ng-container\n          i18n=\"\n            today|Lowercase name for current\n            day@@bb-schedule-label-ui.label.today\"\n        >\n          today</ng-container\n        >{{ hasLimit() && hasEnoughOccurences() ? ';' : '' }}</span\n      >\n    </ng-container>\n\n    <span *ngIf=\"!isToday()\">\n      {{ startDate | date: 'mediumDate'\n      }}{{ hasLimit() && hasEnoughOccurences() ? ';' : '' }}</span\n    >\n\n    <ng-container *ngIf=\"hasLimit() && item?.endDate\">\n      <span\n        i18n=\"\n          Schedule end|Word to be used before a date to indicate that this date\n          is an end date of the schedule@@bb-schedule-label-ui.label.end\"\n      >\n        till</span\n      >\n      <span> {{ endDate | date: 'mediumDate' }}</span>\n    </ng-container>\n    <ng-container\n      *ngIf=\"\n        hasLimit() &&\n        (item?.repeat || 0) >= minOccurrences &&\n        item?.endType === 'after'\n      \"\n    >\n      <span> {{ item?.repeat }}</span>\n      <span\n        i18n=\"\n          Number of times|Word to be used after number of\n          occurences@@bb-schedule-label-ui.label.repeat\"\n      >\n        times</span\n      >\n    </ng-container>\n  ", isInline: true, directives: [{ type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "date": i2__namespace.DatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ScheduleLabelComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-schedule-label-ui',
                        template: "\n    <span\n      i18n=\"\n        Schedule frequency title list|List of titles for available schedule\n        frequencies@@bb-schedule-label-ui.frequency.list\"\n      >{ item?.frequency?.value, select, other {Once} DAILY {Daily} WEEKLY\n      {Weekly} BIWEEKLY {Bi-Weekly} MONTHLY {Monthly} QUARTERLY {Quarterly}\n      YEARLY {Annually} }</span\n    >\n    <span>&nbsp;&minus;</span>\n    <ng-container *ngIf=\"isSingleFrequency\">\n      <span\n        *ngIf=\"isToday()\"\n        i18n=\"\n          Today|Capitalized word for\n          today@@bb-schedule-label-ui.label.today.title\"\n      >\n        Today</span\n      >\n      <span\n        *ngIf=\"!isToday()\"\n        i18n=\"\n          On|Word to be used before a date to indicate that the payment will be\n          executed on that date@@bb-schedule-label-ui.label.on\"\n      >\n        on</span\n      >\n    </ng-container>\n\n    <ng-container *ngIf=\"!isSingleFrequency\">\n      <span\n        i18n=\"\n          Schedule start|Word to be used before a date to indicate that this\n          date is a starting date of the\n          schedule@@bb-schedule-label-ui.label.start\"\n      >\n        from</span\n      >\n      <span *ngIf=\"isToday()\">\n        <ng-container\n          i18n=\"\n            today|Lowercase name for current\n            day@@bb-schedule-label-ui.label.today\"\n        >\n          today</ng-container\n        >{{ hasLimit() && hasEnoughOccurences() ? ';' : '' }}</span\n      >\n    </ng-container>\n\n    <span *ngIf=\"!isToday()\">\n      {{ startDate | date: 'mediumDate'\n      }}{{ hasLimit() && hasEnoughOccurences() ? ';' : '' }}</span\n    >\n\n    <ng-container *ngIf=\"hasLimit() && item?.endDate\">\n      <span\n        i18n=\"\n          Schedule end|Word to be used before a date to indicate that this date\n          is an end date of the schedule@@bb-schedule-label-ui.label.end\"\n      >\n        till</span\n      >\n      <span> {{ endDate | date: 'mediumDate' }}</span>\n    </ng-container>\n    <ng-container\n      *ngIf=\"\n        hasLimit() &&\n        (item?.repeat || 0) >= minOccurrences &&\n        item?.endType === 'after'\n      \"\n    >\n      <span> {{ item?.repeat }}</span>\n      <span\n        i18n=\"\n          Number of times|Word to be used after number of\n          occurences@@bb-schedule-label-ui.label.repeat\"\n      >\n        times</span\n      >\n    </ng-container>\n  ",
                    }]
            }], propDecorators: { item: [{
                    type: i0.Input
                }] } });

    var ScheduleLabelModule = /** @class */ (function () {
        function ScheduleLabelModule() {
        }
        return ScheduleLabelModule;
    }());
    /** @nocollapse */ ScheduleLabelModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ScheduleLabelModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ ScheduleLabelModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ScheduleLabelModule, declarations: [ScheduleLabelComponent], imports: [i2.CommonModule], exports: [ScheduleLabelComponent] });
    /** @nocollapse */ ScheduleLabelModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ScheduleLabelModule, imports: [[i2.CommonModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ScheduleLabelModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [ScheduleLabelComponent],
                        imports: [i2.CommonModule],
                        exports: [ScheduleLabelComponent],
                    }]
            }] });

    var ConfirmationDialogComponent = /** @class */ (function () {
        function ConfirmationDialogComponent() {
            this.modalOptions = {
                backdrop: 'static',
                keyboard: false,
            };
            this.comment = '';
            /**
             * The button color for confirm button
             * Default value is `primary`.
             */
            this.confirmButtonColor = 'primary';
            /**
             * The button color for cancel button
             * Default value is `link`.
             */
            this.cancelButtonColor = 'link';
            /**
             * Indicator for confirmation dialog open state.
             * Default value is `false`.
             */
            this.isOpen = false;
            /**
             * Changes will be triggered on confirmAction event emit.
             */
            this.confirm = new i0.EventEmitter();
            /**
             * Changes will be triggered on cancel event emit.
             */
            this.cancel = new i0.EventEmitter();
            /**
             * Show the field for the comment
             * Default value is `false`.
             */
            this.attachComment = false;
            /**
             * Text for comment field label,
             * Default value is `Add comment`.
             */
            this.commentFieldLabel = $localize(templateObject_1 || (templateObject_1 = __makeTemplateObject([":@@bb-confirmation-dialog.comment.label:Add comment"], [":@@bb-confirmation-dialog.comment.label:Add comment"])));
        }
        ConfirmationDialogComponent.prototype.resetComment = function () {
            if (this.attachComment) {
                this.comment = '';
            }
        };
        ConfirmationDialogComponent.prototype.onCancelAction = function () {
            this.cancel.emit();
            this.resetComment();
        };
        ConfirmationDialogComponent.prototype.onConfirmAction = function () {
            var _a, _b;
            var _comment = this.comment.trim();
            var emitValue = (_a = this.confirmActionPayload) === null || _a === void 0 ? void 0 : _a.payload;
            if (this.attachComment && !!_comment) {
                emitValue = {
                    payload: (_b = this.confirmActionPayload) === null || _b === void 0 ? void 0 : _b.payload,
                    comment: _comment,
                };
            }
            this.confirm.emit(emitValue);
            this.resetComment();
        };
        return ConfirmationDialogComponent;
    }());
    /** @nocollapse */ ConfirmationDialogComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ConfirmationDialogComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ ConfirmationDialogComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ConfirmationDialogComponent, selector: "bb-confirmation-dialog", inputs: { confirmButtonColor: "confirmButtonColor", cancelButtonColor: "cancelButtonColor", isOpen: "isOpen", confirmActionPayload: "confirmActionPayload", attachComment: "attachComment", commentFieldLabel: "commentFieldLabel" }, outputs: { confirm: "confirm", cancel: "cancel" }, ngImport: i0__namespace, template: "<bb-modal-ui [isOpen]=\"isOpen\" [modalOptions]=\"modalOptions\">\n  <bb-modal-header-ui>\n    <ng-template bbCustomModalHeader>\n      <span #headerContent class=\"d-none\" aria-hidden=\"true\">\n        <ng-content select=\"[title]\"></ng-content>\n      </span>\n      <bb-header-ui\n        headingType=\"h2\"\n        [heading]=\"headerContent.textContent\"\n        [attr.data-role]=\"'confirmation-header'\"\n      ></bb-header-ui>\n    </ng-template>\n  </bb-modal-header-ui>\n\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody>\n      <div [ngClass]=\"{ 'bb-block bb-block--md': attachComment }\">\n        <ng-content select=\"[body]\"></ng-content>\n      </div>\n\n      <ng-container *ngIf=\"attachComment && isOpen\">\n        <label\n          [for]=\"commentField.id\"\n          i18n=\"@@bb-confirmation-dialog.comment\"\n          >{{ commentFieldLabel }}</label\n        >\n        <span class=\"bb-text-support\">\n          (<ng-container i18n=\"@@bb-confirmation-dialog.comment.optional-label\"\n            >Optional</ng-container\n          >)\n        </span>\n        <bb-textarea-ui\n          #commentField\n          wrap=\"hard\"\n          [rows]=\"3\"\n          [cols]=\"50\"\n          [minLength]=\"3\"\n          [maxLength]=\"140\"\n          [(ngModel)]=\"comment\"\n          showCharCounter=\"true\"\n          data-role=\"confirmation-comment\"\n        ></bb-textarea-ui>\n      </ng-container>\n    </ng-template>\n  </bb-modal-body-ui>\n\n  <bb-modal-footer-ui>\n    <ng-template bbCustomModalFooter>\n      <div class=\"bb-button-bar\">\n        <button\n          bbButton\n          [color]=\"confirmButtonColor\"\n          class=\"bb-button-bar__button\"\n          (click)=\"onConfirmAction()\"\n          [attr.data-role]=\"'confirm-action-btn'\"\n        >\n          <ng-content select=\"[confirmActionName]\"></ng-content>\n        </button>\n\n        <button\n          bbButton\n          (click)=\"onCancelAction()\"\n          [color]=\"cancelButtonColor\"\n          class=\"bb-button-bar__button\"\n          [attr.data-role]=\"'cancel-action-btn'\"\n        >\n          <ng-content select=\"[cancelActionName]\"></ng-content>\n        </button>\n      </div>\n    </ng-template>\n  </bb-modal-footer-ui>\n</bb-modal-ui>\n", components: [{ type: i1__namespace$3.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i1__namespace$3.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i3__namespace$2.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i1__namespace$3.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: i3__namespace$4.TextareaComponent, selector: "bb-textarea-ui", inputs: ["rows", "cols", "placeholder", "maxLength", "minLength", "readonly", "showCharCounter", "wrap"] }, { type: i1__namespace$3.ModalFooterComponent, selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }], directives: [{ type: i1__namespace$3.CustomModalHeaderDirective, selector: "ng-template[bbCustomModalHeader]" }, { type: i1__namespace$3.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i2__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i1__namespace$3.CustomModalFooterDirective, selector: "ng-template[bbCustomModalFooter]" }, { type: i7__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ConfirmationDialogComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-confirmation-dialog',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        templateUrl: 'confirmation-dialog.component.html',
                    }]
            }], propDecorators: { confirmButtonColor: [{
                    type: i0.Input
                }], cancelButtonColor: [{
                    type: i0.Input
                }], isOpen: [{
                    type: i0.Input
                }], confirmActionPayload: [{
                    type: i0.Input
                }], confirm: [{
                    type: i0.Output
                }], cancel: [{
                    type: i0.Output
                }], attachComment: [{
                    type: i0.Input
                }], commentFieldLabel: [{
                    type: i0.Input
                }] } });
    var templateObject_1;

    var ConfirmationDialogModule = /** @class */ (function () {
        function ConfirmationDialogModule() {
        }
        return ConfirmationDialogModule;
    }());
    /** @nocollapse */ ConfirmationDialogModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ConfirmationDialogModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ ConfirmationDialogModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ConfirmationDialogModule, declarations: [ConfirmationDialogComponent], imports: [i2.CommonModule,
            i3$2.HeaderModule,
            i1$4.ModalModule,
            i3$4.TextareaModule,
            i7.ButtonModule,
            i1$1.FormsModule], exports: [ConfirmationDialogComponent] });
    /** @nocollapse */ ConfirmationDialogModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ConfirmationDialogModule, imports: [[
                i2.CommonModule,
                i3$2.HeaderModule,
                i1$4.ModalModule,
                i3$4.TextareaModule,
                i7.ButtonModule,
                i1$1.FormsModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ConfirmationDialogModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [ConfirmationDialogComponent],
                        imports: [
                            i2.CommonModule,
                            i3$2.HeaderModule,
                            i1$4.ModalModule,
                            i3$4.TextareaModule,
                            i7.ButtonModule,
                            i1$1.FormsModule,
                        ],
                        exports: [ConfirmationDialogComponent],
                    }]
            }] });

    var PaymentsSearchComponent = /** @class */ (function () {
        function PaymentsSearchComponent() {
            /**
             * Reference to instance of customizable component.
             */
            this.hostRef = this;
            this.gc$ = new rxjs.Subject();
            this.debounceSearch$ = new rxjs.Subject();
            this.searchTerm = '';
            /**
             * Time delay between each search requests in milliseconds.
             * Default is 300
             */
            this.debounceTime = DefaultDebounceTime;
            /**
             * Minimum search length
             * Default is 3
             */
            this.searchMinLength = SearchMinLength;
            /**
             * Changes will be triggered on search
             */
            this.search = new i0.EventEmitter();
        }
        PaymentsSearchComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.debounceSearch$
                .pipe(operators.takeUntil(this.gc$), operators.debounceTime(this.debounceTime), operators.distinctUntilChanged())
                .subscribe(function (term) {
                if (!term || term.length >= _this.searchMinLength) {
                    _this.search.emit(term);
                }
            });
        };
        PaymentsSearchComponent.prototype.startSearching = function (query) {
            this.searchTerm = query;
            this.debounceSearch$.next(this.searchTerm);
        };
        PaymentsSearchComponent.prototype.clearSearching = function () {
            this.searchTerm = '';
            this.debounceSearch$.next(this.searchTerm);
        };
        PaymentsSearchComponent.prototype.submitSearch = function () {
            if (this.searchTerm.length >= this.searchMinLength) {
                this.search.emit(this.searchTerm);
            }
        };
        PaymentsSearchComponent.prototype.ngOnDestroy = function () {
            this.gc$.next();
            this.debounceSearch$.complete();
            this.gc$.complete();
        };
        return PaymentsSearchComponent;
    }());
    /** @nocollapse */ PaymentsSearchComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentsSearchComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ PaymentsSearchComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PaymentsSearchComponent, selector: "bb-payments-search", inputs: { debounceTime: "debounceTime", searchMinLength: "searchMinLength" }, outputs: { search: "search" }, ngImport: i0__namespace, template: "<ng-container bbPaymentsSearchCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n<ng-template bbPaymentsSearchCustomizable let-hostRef>\n  <div class=\"payments-search-container\">\n    <bb-search-box-ui\n      placeholder=\"Search\"\n      i18n-placeholder=\"@@payments-list.placeholder.search\"\n      aria-label=\"Search payments\"\n      i18n-aria-label=\"@@payments-list.label.search\"\n      [showSearch]=\"true\"\n      [showClear]=\"true\"\n      (submit)=\"hostRef.submitSearch()\"\n      (clear)=\"hostRef.clearSearching()\"\n      (search)=\"$event.stopPropagation()\"\n      [ngModel]=\"hostRef.searchTerm\"\n      (ngModelChange)=\"hostRef.startSearching($event)\"\n      data-role=\"searchbox\"\n    >\n    </bb-search-box-ui>\n  </div>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return i2__namespace$1.SearchBoxComponent; }), selector: "bb-search-box-ui", inputs: ["placeholder", "maxLength", "squareBorder", "typeaheadOptions", "showSearch", "showClear", "searchLabel", "clearLabel", "autocomplete"], outputs: ["submit", "clear", "valueChange"] }], directives: [{ type: i0__namespace.forwardRef(function () { return PaymentsSearchCustomizableDirective; }), selector: "[bbPaymentsSearchCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i1__namespace$1.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0__namespace.forwardRef(function () { return i1__namespace$1.NgModel; }), selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentsSearchComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-payments-search',
                        templateUrl: 'payments-search.component.html',
                    }]
            }], propDecorators: { debounceTime: [{
                    type: i0.Input
                }], searchMinLength: [{
                    type: i0.Input
                }], search: [{
                    type: i0.Output
                }] } });
    var PaymentsSearchCustomizableDirective = /** @class */ (function (_super) {
        __extends(PaymentsSearchCustomizableDirective, _super);
        function PaymentsSearchCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return PaymentsSearchCustomizableDirective;
    }(i1$7.BbTemplate));
    /** @nocollapse */ PaymentsSearchCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentsSearchCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ PaymentsSearchCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: PaymentsSearchCustomizableDirective, selector: "[bbPaymentsSearchCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentsSearchCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbPaymentsSearchCustomizable]',
                    }]
            }] });

    var PaymentsFilterComponent = /** @class */ (function () {
        function PaymentsFilterComponent(fb) {
            this.fb = fb;
            /**
             * Reference to instance of customizable component.
             */
            this.hostRef = this;
            /**
             * Reference to Status enum
             */
            this.statusesMap = exports.Status;
            this.paymentsFilterForm = this.fb.group({
                status: new i1$1.FormControl(),
                amount: this.fb.group({
                    from: ['', i1$1.Validators.min(0)],
                    to: ['', i1$1.Validators.min(0)],
                }, { validator: this.amountValidator.bind(this) }),
                executionDate: new i1$1.FormControl(),
            });
            this.gc$ = new rxjs.Subject();
            this.filterValueChanges = this.paymentsFilterForm.valueChanges.pipe(operators.takeUntil(this.gc$));
            this.alreadyApplied = false;
            /**
             * EventEmitter for triggering a filter action.
             */
            this.filter = new i0.EventEmitter();
            /**
             * EventEmitter for closing filter form
             */
            this.closeFilter = new i0.EventEmitter();
            /**
             * EventEmitter for displaying wether filter was applied or not
             */
            this.isFilterApplied = new i0.EventEmitter();
            /**
             * EventEmitter for when form is reset. Search should be executed
             */
            // eslint-disable-next-line @angular-eslint/no-output-native
            this.reset = new i0.EventEmitter();
            /**
             * String array with statuses that should not be available in current instance
             */
            this.statusBlackList = [];
        }
        PaymentsFilterComponent.prototype.ngOnInit = function () {
            this.onFilterChanges();
        };
        /**
         * Emit event to apply filter.
         *
         * @param filterParams - Options to filter transactions list with.
         */
        PaymentsFilterComponent.prototype.onFilter = function (filterParams) {
            if (filterParams.status) {
                filterParams.status = this.filterStatusMap(filterParams.status);
            }
            this.filter.emit(this.normalizeFilterValues(filterParams));
            this.alreadyApplied = true;
        };
        /**
         * Clear filter form, reset values to default and emit event to apply filter.
         */
        PaymentsFilterComponent.prototype.onClearFilter = function () {
            this.paymentsFilterForm.reset();
            this.paymentsFilterForm.markAsPristine();
            if (this.alreadyApplied) {
                this.reset.emit(Object.assign({}, this.paymentsFilterForm.value));
            }
            this.isFilterApplied.emit(false);
            this.alreadyApplied = false;
        };
        /**
         * Emit event to close this filter form.
         */
        PaymentsFilterComponent.prototype.onCloseFilter = function () {
            this.closeFilter.emit();
        };
        PaymentsFilterComponent.prototype.isApplyButtonDisabled = function () {
            var amountControl = this.paymentsFilterForm.get('amount');
            var executionDateControl = this.paymentsFilterForm.get('executionDate');
            return !!(this.paymentsFilterForm.pristine ||
                (amountControl === null || amountControl === void 0 ? void 0 : amountControl.invalid) ||
                (executionDateControl === null || executionDateControl === void 0 ? void 0 : executionDateControl.invalid));
        };
        PaymentsFilterComponent.prototype.amountValidator = function (group) {
            var amountControls = group.controls;
            var toControlHasValue = amountControls.to.value || amountControls.to.value === 0;
            this.resetAmountError(amountControls.to);
            this.resetAmountError(amountControls.from);
            if (toControlHasValue &&
                amountControls.from.value > amountControls.to.value) {
                amountControls.to.setErrors(Object.assign({ incorrectAmount: true }, amountControls.to.errors));
                amountControls.from.setErrors(Object.assign({ incorrectAmount: true }, amountControls.from.errors));
            }
        };
        PaymentsFilterComponent.prototype.resetAmountError = function (control) {
            var controlErrors = control.errors;
            controlErrors === null || controlErrors === void 0 ? true : delete controlErrors.incorrectAmount;
            if (!Object.keys(Object.assign({}, controlErrors)).length) {
                controlErrors = null;
            }
            control.setErrors(controlErrors);
        };
        Object.defineProperty(PaymentsFilterComponent.prototype, "amountToControl", {
            get: function () {
                var _a;
                return (_a = this.paymentsFilterForm.get('amount')) === null || _a === void 0 ? void 0 : _a.get('to');
            },
            enumerable: false,
            configurable: true
        });
        /**
         * filterStatusMap Converts `PROCESSING`status in the array,
         * to `READY`, `ACKNOWLEDGED`, and `DOWNLOADING` since the server
         * uses the statuses, but the user should only see them as
         * `PROCESSING`
         */
        PaymentsFilterComponent.prototype.filterStatusMap = function (statuses) {
            var _this = this;
            var processingStatusMapping = [
                this.statusesMap.READY,
                this.statusesMap.ACKNOWLEDGED,
                this.statusesMap.DOWNLOADING,
            ];
            var retVal = statuses.includes(this.statusesMap.PROCESSING)
                ? __spreadArray(__spreadArray([], __read(statuses.filter(function (status) { return status !== _this.statusesMap.PROCESSING; }))), __read(processingStatusMapping)) : statuses;
            return retVal;
        };
        PaymentsFilterComponent.prototype.normalizeFilterValues = function (model) {
            if (model.executionDate &&
                model.executionDate.from &&
                !model.executionDate.to) {
                model.executionDate.to = model.executionDate.from;
            }
            return model;
        };
        /**
         * onFilterChanges generates the subscription that will
         * mark the form as pristine if no filter inputs have values
         */
        PaymentsFilterComponent.prototype.onFilterChanges = function () {
            var _this = this;
            this.filterValueChanges.subscribe(function (val) {
                if (val.status ||
                    val.amount.from ||
                    val.amount.to ||
                    (val.executionDate && val.executionDate.from)) {
                    return;
                }
                _this.paymentsFilterForm.markAsPristine();
                if (_this.alreadyApplied) {
                    _this.reset.emit(Object.assign({}, _this.paymentsFilterForm.value));
                    _this.alreadyApplied = false;
                    _this.isFilterApplied.emit(false);
                }
            });
        };
        PaymentsFilterComponent.prototype.ngOnDestroy = function () {
            this.gc$.next();
            this.gc$.complete();
        };
        PaymentsFilterComponent.prototype.getExecutionDateErrorId = function (executionDateId) {
            return executionDateId + "__error";
        };
        PaymentsFilterComponent.prototype.getExecutionDateDescribedBy = function (executionDateId) {
            return "date-range-header-" + executionDateId + " " + this.getExecutionDateErrorId(executionDateId);
        };
        return PaymentsFilterComponent;
    }());
    /** @nocollapse */ PaymentsFilterComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentsFilterComponent, deps: [{ token: i1__namespace$1.FormBuilder }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ PaymentsFilterComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PaymentsFilterComponent, selector: "bb-payments-filter", inputs: { statusBlackList: "statusBlackList" }, outputs: { filter: "filter", closeFilter: "closeFilter", isFilterApplied: "isFilterApplied", reset: "reset" }, ngImport: i0__namespace, template: "<ng-container bbPaymentsFilterCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbPaymentsFilterCustomizable let-hostRef>\n  <form class=\"form bg-lighter\" [formGroup]=\"hostRef.paymentsFilterForm\">\n    <div class=\"bb-block bb-block--md\">\n      <div class=\"row\">\n        <!-- Payment Status select -->\n        <div class=\"bb-block bb-block--md col-12 col-md-6 col-xl-4\">\n          <bb-dropdown-multi-select-ui\n            label=\"Status\"\n            i18n-label=\"@@bb-payments-filter.form.label.status\"\n            placeholder=\"All\"\n            i18n-placeholder=\"@@bb-payments-filter.form.label.status.all\"\n            formControlName=\"status\"\n            data-role=\"select-status\"\n          >\n            <bb-dropdown-multi-select-option-ui\n              *ngIf=\"\n                !hostRef.statusBlackList.includes(hostRef.statusesMap.ENTERED)\n              \"\n              label=\"Entered\"\n              [value]=\"hostRef.statusesMap.ENTERED\"\n              i18n-label=\"@@payments.filter.dropdown.option.entered\"\n            >\n            </bb-dropdown-multi-select-option-ui>\n            <bb-dropdown-multi-select-option-ui\n              *ngIf=\"\n                !hostRef.statusBlackList.includes(\n                  hostRef.statusesMap.PROCESSING\n                )\n              \"\n              label=\"Processing\"\n              [value]=\"hostRef.statusesMap.PROCESSING\"\n              i18n-label=\"@@payments.filter.dropdown.option.processing\"\n            >\n            </bb-dropdown-multi-select-option-ui>\n            <bb-dropdown-multi-select-option-ui\n              *ngIf=\"\n                !hostRef.statusBlackList.includes(hostRef.statusesMap.PROCESSED)\n              \"\n              label=\"Processed\"\n              [value]=\"hostRef.statusesMap.PROCESSED\"\n              i18n-label=\"@@payments.filter.dropdown.option.processed\"\n            >\n            </bb-dropdown-multi-select-option-ui>\n            <bb-dropdown-multi-select-option-ui\n              *ngIf=\"\n                !hostRef.statusBlackList.includes(hostRef.statusesMap.ACCEPTED)\n              \"\n              label=\"Accepted\"\n              [value]=\"hostRef.statusesMap.ACCEPTED\"\n              i18n-label=\"@@payments.filter.dropdown.option.accepted\"\n            >\n            </bb-dropdown-multi-select-option-ui>\n            <bb-dropdown-multi-select-option-ui\n              *ngIf=\"\n                !hostRef.statusBlackList.includes(hostRef.statusesMap.REJECTED)\n              \"\n              label=\"Rejected\"\n              [value]=\"hostRef.statusesMap.REJECTED\"\n              i18n-label=\"@@payments.filter.dropdown.option.rejected\"\n            >\n            </bb-dropdown-multi-select-option-ui>\n            <bb-dropdown-multi-select-option-ui\n              *ngIf=\"\n                !hostRef.statusBlackList.includes(\n                  hostRef.statusesMap.CANCELLATION_PENDING\n                )\n              \"\n              label=\"Cancellation pending\"\n              [value]=\"hostRef.statusesMap.CANCELLATION_PENDING\"\n              i18n-label=\"\n                @@payments.filter.dropdown.option.cancellation-pending\"\n            >\n            </bb-dropdown-multi-select-option-ui>\n            <bb-dropdown-multi-select-option-ui\n              *ngIf=\"\n                !hostRef.statusBlackList.includes(hostRef.statusesMap.CANCELLED)\n              \"\n              label=\"Cancelled\"\n              [value]=\"hostRef.statusesMap.CANCELLED\"\n              i18n-label=\"@@payments.filter.dropdown.option.cancelled\"\n            >\n            </bb-dropdown-multi-select-option-ui>\n          </bb-dropdown-multi-select-ui>\n        </div>\n        <!-- Amount range -->\n        <fieldset class=\"bb-block bb-block--md col-12 col-md-6 col-xl-4\">\n          <label\n            i18n=\"amount from@@bb-payments-filter.form.label.amount\"\n            [for]=\"'payment-filter-amount' + min.id + '-' + max.id + '-group'\"\n          >\n            Amount\n          </label>\n          <div\n            class=\"row\"\n            [id]=\"'payment-filter-amount' + min.id + '-' + max.id + '-group'\"\n            formGroupName=\"amount\"\n          >\n            <bb-input-number-ui\n              #min\n              class=\"col-6\"\n              formControlName=\"from\"\n              min=\"0\"\n              aria-label=\"Amount From\"\n              placeholder=\"min\"\n              i18n-aria-label=\"\n                amount from aria@@bb-payments-filter.form.ariaLabel.amountFrom\"\n              i18n-placeholder=\"@@bb-payments-filter.form.placeholder.min\"\n              data-role=\"input-amount-from\"\n            >\n            </bb-input-number-ui>\n            <bb-input-number-ui\n              #max\n              [min]=\"min.value || 0\"\n              class=\"col-6\"\n              formControlName=\"to\"\n              placeholder=\"max\"\n              aria-label=\"Amount To\"\n              i18n-aria-label=\"\n                amount to aria@@bb-payments-filter.form.ariaLabel.amountTo\"\n              i18n-placeholder=\"@@bb-payments-filter.form.placeholder.max\"\n              data-role=\"input-amount-to\"\n            >\n              <!-- Do not remove label, placeholder needed for layout not to break -->\n            </bb-input-number-ui>\n            <bb-input-validation-message-ui\n              class=\"col-12\"\n              id=\"amountError\"\n              [showErrors]=\"\n                hostRef.amountToControl?.touched &&\n                hostRef.amountToControl?.errors?.incorrectAmount\n              \"\n            >\n              <span i18n=\"@@payments.filter.invalid-amount-range-error\"\n                >Maximum amount cannot be smaller than the minimum amount</span\n              >\n            </bb-input-validation-message-ui>\n          </div>\n        </fieldset>\n        <!-- Date range -->\n        <div class=\"bb-block bb-block--md col-12 col-md-6 col-xl-4\">\n          <label\n            [for]=\"executionDate.id\"\n            i18n=\"@@bb-payments-filter.form.label.executionDate\"\n            [id]=\"'date-range-header-' + executionDate.id\"\n          >\n            Execution date\n          </label>\n          <bb-input-datepicker-ui\n            name=\"executionDate\"\n            formControlName=\"executionDate\"\n            data-role=\"input-date\"\n            aria-label=\"Execution date range\"\n            i18n-aria-label=\"\n              amount to aria@@bb-payments-filter.form.ariaLabel.executionDate\"\n            overrideDateFormat=\"MM/dd/y\"\n            [placeholder]=\"'MM/DD/YY - MM/DD/YY'\"\n            [rangeSelection]=\"true\"\n            [attr.aria-describedby]=\"\n              getExecutionDateDescribedBy(executionDate?.id)\n            \"\n            #executionDate\n          >\n          </bb-input-datepicker-ui>\n          <bb-input-validation-message-ui\n            *ngIf=\"\n              paymentsFilterForm.get('executionDate') as executionDateControl\n            \"\n            [attr.id]=\"getExecutionDateErrorId(executionDate?.id)\"\n            [showErrors]=\"\n              executionDateControl?.touched && executionDateControl?.invalid\n            \"\n          >\n            <span i18n=\"@@payments.filter.invalid-date-range-error\"\n              >Please provide a valid date range format.</span\n            >\n          </bb-input-validation-message-ui>\n        </div>\n      </div>\n    </div>\n    <div class=\"bb-button-bar bb-button-bar--reverse\">\n      <!-- Apply -->\n      <button\n        bbButton\n        type=\"submit\"\n        class=\"bb-button-bar__button\"\n        (click)=\"hostRef.onFilter(hostRef.paymentsFilterForm.value)\"\n        color=\"primary\"\n        data-role=\"btn-apply\"\n        [disabled]=\"hostRef.isApplyButtonDisabled()\"\n        i18n=\"@@bb-payments-filter.form.button.apply\"\n      >\n        Apply\n      </button>\n      <!-- Close -->\n      <button\n        bbButton\n        type=\"button\"\n        color=\"secondary\"\n        class=\"bb-button-bar__button\"\n        data-role=\"btn-cancel\"\n        i18n=\"@@bb-payments-filter.form.button.close\"\n        (click)=\"hostRef.onCloseFilter()\"\n      >\n        Close\n      </button>\n      <!-- Clear all -->\n      <button\n        bbButton\n        type=\"reset\"\n        color=\"link\"\n        class=\"bb-button-bar__button\"\n        i18n=\"@@bb-payments-filter.form.button.clearAll\"\n        (click)=\"hostRef.onClearFilter()\"\n        *ngIf=\"hostRef.paymentsFilterForm.dirty\"\n        data-role=\"btn-clear-all\"\n      >\n        Clear All\n      </button>\n    </div>\n  </form>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return i2__namespace$4.DropdownMultiSelectComponent; }), selector: "bb-dropdown-multi-select-ui", inputs: ["dropdownHeaderText", "placeholder", "label", "filtering", "readonly"] }, { type: i0__namespace.forwardRef(function () { return i2__namespace$4.DropdownMultiSelectOptionComponent; }), selector: "bb-dropdown-multi-select-option-ui", inputs: ["id", "value", "label", "state"] }, { type: i0__namespace.forwardRef(function () { return i3__namespace$5.InputNumberComponent; }), selector: "bb-input-number-ui", inputs: ["placeholder", "max", "min", "step", "readonly", "autocomplete", "ariaLabel", "allowNonDigits", "allowNegativeSign"] }, { type: i0__namespace.forwardRef(function () { return i4__namespace.InputValidationMessageComponent; }), selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace$c.InputDatepickerComponent; }), selector: "bb-input-datepicker-ui", inputs: ["rangeSelection", "rangeSelectionSplit", "clickOpen", "focusOpen", "placement", "datepickerDescribedby", "ariaLabelForButton", "minDate", "maxDate", "markDisabled", "icon", "iconSize", "iconColor", "btnColor", "ariaLabel", "navigation", "autocomplete", "firstDayOfWeek", "displayMonths", "placeholder", "overrideDateFormat"], outputs: ["focusedDate"] }], directives: [{ type: i0__namespace.forwardRef(function () { return PaymentsFilterCustomizableDirective; }), selector: "[bbPaymentsFilterCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i1__namespace$1.ɵNgNoValidate; }), selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i0__namespace.forwardRef(function () { return i1__namespace$1.NgControlStatusGroup; }), selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i0__namespace.forwardRef(function () { return i1__namespace$1.FormGroupDirective; }), selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace$1.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0__namespace.forwardRef(function () { return i1__namespace$1.FormControlName; }), selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i0__namespace.forwardRef(function () { return i2__namespace.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace$1.FormGroupName; }), selector: "[formGroupName]", inputs: ["formGroupName"] }, { type: i0__namespace.forwardRef(function () { return i7__namespace.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentsFilterComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-payments-filter',
                        templateUrl: 'payments-filter.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.FormBuilder }]; }, propDecorators: { filter: [{
                    type: i0.Output
                }], closeFilter: [{
                    type: i0.Output
                }], isFilterApplied: [{
                    type: i0.Output
                }], reset: [{
                    type: i0.Output
                }], statusBlackList: [{
                    type: i0.Input
                }] } });
    var PaymentsFilterCustomizableDirective = /** @class */ (function (_super) {
        __extends(PaymentsFilterCustomizableDirective, _super);
        function PaymentsFilterCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return PaymentsFilterCustomizableDirective;
    }(i1$7.BbTemplate));
    /** @nocollapse */ PaymentsFilterCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentsFilterCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ PaymentsFilterCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: PaymentsFilterCustomizableDirective, selector: "[bbPaymentsFilterCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentsFilterCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbPaymentsFilterCustomizable]',
                    }]
            }] });

    var PaymentsControlsComponent = /** @class */ (function () {
        function PaymentsControlsComponent() {
            var _this = this;
            /**
             * Reference to instance of customizable component.
             */
            this.hostRef = this;
            /**
             * Reference to Status enum
             */
            this.statusesMap = exports.Status;
            /**
             * EventEmitter for triggering a filter action.
             */
            this.applyFilter = new i0.EventEmitter();
            /**
             * Subject will emit when searchbox from payment-search input changes
             */
            this.search$ = new rxjs.BehaviorSubject('');
            /**
             * Subject that will emit when filters from payments-filter are modified
             */
            this.filters$ = new rxjs.BehaviorSubject({
                executionDate: {},
                status: [],
                amount: {},
            });
            /**
             * Whether the filter form is shown.
             */
            this.isFilterOpen = false;
            /**
             * Whether a filter is applied on the transactions.
             */
            this.isFilterApplied = false;
            this.filterParams$ = new rxjs.Subject();
            /**
             * destroy$ should emit only when component is destroyed to
             * signal subscriptions to unsubscribe.
             */
            this.destroy$ = new rxjs.Subject();
            /**
             * Subscription will emit for the search to be triggered
             */
            rxjs.combineLatest([this.search$, this.filters$])
                .pipe(operators.takeUntil(this.destroy$), operators.distinctUntilChanged())
                .subscribe(function (_a) {
                var _b = __read(_a, 2), query = _b[0], filterObject = _b[1];
                var retVal = Object.assign({ query: query }, filterObject);
                _this.applyFilter.emit(retVal);
            });
        }
        /**
         * Search event callback
         */
        PaymentsControlsComponent.prototype.onSearch = function (searchParam) {
            this.search$.next(searchParam);
        };
        /**
         * Filter event callback
         */
        PaymentsControlsComponent.prototype.onFilter = function (filterParams) {
            this.filters$.next(filterParams);
            this.isFilterApplied = true;
        };
        /**
         * Close event callback to hide the filters controls
         */
        PaymentsControlsComponent.prototype.onClose = function () {
            this.isFilterOpen = false;
        };
        /**
         * Toogle method to hide or show the filter form
         */
        PaymentsControlsComponent.prototype.toggleFilter = function () {
            this.isFilterOpen = !this.isFilterOpen;
        };
        /**
         * Handle effects when filter is reset
         */
        PaymentsControlsComponent.prototype.onFilterReset = function (event) {
            this.isFilterApplied = event;
        };
        PaymentsControlsComponent.prototype.ngOnDestroy = function () {
            this.destroy$.next();
            this.destroy$.complete();
            this.filterParams$.complete();
            this.search$.complete();
            this.filters$.complete();
        };
        return PaymentsControlsComponent;
    }());
    /** @nocollapse */ PaymentsControlsComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentsControlsComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ PaymentsControlsComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PaymentsControlsComponent, selector: "bb-payments-controls", inputs: { debounceTime: "debounceTime" }, outputs: { applyFilter: "applyFilter" }, ngImport: i0__namespace, template: "<ng-container\n  bbPaymentsControlsCustomizable\n  [bbHostRef]=\"hostRef\"\n></ng-container>\n\n<ng-template bbPaymentsControlsCustomizable let-hostRef>\n  <div (keydown)=\"$event?.stopPropagation()\">\n    <div class=\"bb-block\" [ngClass]=\"{ 'bb-block--md': hostRef.isFilterOpen }\">\n      <div class=\"bb-stack\">\n        <!-- Search -->\n        <div class=\"bb-stack__item bb-stack__item--fill--lg-down\">\n          <bb-payments-search\n            [debounceTime]=\"hostRef.debounceTime\"\n            (search)=\"hostRef.onSearch($event)\"\n            data-role=\"searchbox\"\n          >\n          </bb-payments-search>\n        </div>\n        <div class=\"bb-stack__item d-none d-xl-block\">\n          <!-- Filter button -->\n          <button\n            bbButton\n            [color]=\"hostRef.isFilterApplied ? 'primary' : 'secondary'\"\n            aria-label=\"Toggle filter\"\n            [attr.aria-expanded]=\"hostRef.isFilterOpen\"\n            i18n-aria-label=\"\n              Filter payments@@payments.ariaLabel.filter.big.button\"\n            (click)=\"hostRef.toggleFilter()\"\n            [attr.data-role]=\"'btn-filter'\"\n          >\n            <bb-icon-ui name=\"filter\"></bb-icon-ui>\n            <ng-container\n              *ngIf=\"!hostRef.isFilterApplied\"\n              i18n=\"Filter toggle button@@transactions.filter.button\"\n            >\n              Filter\n            </ng-container>\n            <ng-container\n              *ngIf=\"hostRef.isFilterApplied\"\n              i18n=\"Filter toggle button@@transactions.filtersApplied.button\"\n            >\n              Filters applied\n            </ng-container>\n          </button>\n        </div>\n        <div class=\"bb-stack__item bb-stack__item--push-right d-xl-none\">\n          <button\n            bbButton\n            [color]=\"hostRef.isFilterApplied ? 'primary' : 'secondary'\"\n            circle=\"true\"\n            aria-label=\"Toggle filter\"\n            i18n-aria-label=\"\n              Filter payments@@payments.ariaLabel.filter.small.button\"\n            (click)=\"hostRef.toggleFilter()\"\n            [attr.data-role]=\"'btn-filter'\"\n          >\n            <bb-icon-ui name=\"filter\"></bb-icon-ui>\n          </button>\n        </div>\n      </div>\n    </div>\n    <bb-payments-filter\n      [statusBlackList]=\"[hostRef.statusesMap.CANCELLATION_PENDING]\"\n      (filter)=\"hostRef.onFilter($event)\"\n      (isFilterApplied)=\"hostRef.onFilterReset($event)\"\n      (closeFilter)=\"hostRef.onClose()\"\n      (reset)=\"hostRef.onFilter($event)\"\n      [hidden]=\"!hostRef.isFilterOpen\"\n    >\n    </bb-payments-filter>\n  </div>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return PaymentsSearchComponent; }), selector: "bb-payments-search", inputs: ["debounceTime", "searchMinLength"], outputs: ["search"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0__namespace.forwardRef(function () { return PaymentsFilterComponent; }), selector: "bb-payments-filter", inputs: ["statusBlackList"], outputs: ["filter", "closeFilter", "isFilterApplied", "reset"] }], directives: [{ type: i0__namespace.forwardRef(function () { return PaymentsControlsCustomizableDirective; }), selector: "[bbPaymentsControlsCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i2__namespace.NgClass; }), selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i0__namespace.forwardRef(function () { return i7__namespace.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0__namespace.forwardRef(function () { return i2__namespace.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentsControlsComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-payments-controls',
                        templateUrl: 'payments-controls.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return []; }, propDecorators: { debounceTime: [{
                    type: i0.Input
                }], applyFilter: [{
                    type: i0.Output
                }] } });
    var PaymentsControlsCustomizableDirective = /** @class */ (function (_super) {
        __extends(PaymentsControlsCustomizableDirective, _super);
        function PaymentsControlsCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return PaymentsControlsCustomizableDirective;
    }(i1$7.BbTemplate));
    /** @nocollapse */ PaymentsControlsCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentsControlsCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ PaymentsControlsCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: PaymentsControlsCustomizableDirective, selector: "[bbPaymentsControlsCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentsControlsCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbPaymentsControlsCustomizable]',
                    }]
            }] });

    var PaymentsSearchModule = /** @class */ (function () {
        function PaymentsSearchModule() {
        }
        return PaymentsSearchModule;
    }());
    /** @nocollapse */ PaymentsSearchModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentsSearchModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ PaymentsSearchModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentsSearchModule, declarations: [PaymentsSearchComponent, PaymentsSearchCustomizableDirective], imports: [i2.CommonModule, i1$1.FormsModule, i2$1.SearchBoxModule, i1$1.ReactiveFormsModule], exports: [PaymentsSearchComponent, PaymentsSearchCustomizableDirective] });
    /** @nocollapse */ PaymentsSearchModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentsSearchModule, imports: [[i2.CommonModule, i1$1.FormsModule, i2$1.SearchBoxModule, i1$1.ReactiveFormsModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentsSearchModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [PaymentsSearchComponent, PaymentsSearchCustomizableDirective],
                        imports: [i2.CommonModule, i1$1.FormsModule, i2$1.SearchBoxModule, i1$1.ReactiveFormsModule],
                        exports: [PaymentsSearchComponent, PaymentsSearchCustomizableDirective],
                    }]
            }] });

    ('@backbase/payord-form-builder-ang');
    var uiModules$1 = [
        i7.ButtonModule,
        i2$4.DropdownMultiSelectModule,
        i1$c.InputDatepickerModule,
        i4.InputValidationMessageModule,
        i3$5.InputNumberModule,
    ];
    var PaymentsFilterModule = /** @class */ (function () {
        function PaymentsFilterModule() {
        }
        return PaymentsFilterModule;
    }());
    /** @nocollapse */ PaymentsFilterModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentsFilterModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ PaymentsFilterModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentsFilterModule, declarations: [PaymentsFilterComponent, PaymentsFilterCustomizableDirective], imports: [i2.CommonModule, i1$1.ReactiveFormsModule, i7.ButtonModule,
            i2$4.DropdownMultiSelectModule,
            i1$c.InputDatepickerModule,
            i4.InputValidationMessageModule,
            i3$5.InputNumberModule], exports: [PaymentsFilterComponent, PaymentsFilterCustomizableDirective] });
    /** @nocollapse */ PaymentsFilterModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentsFilterModule, providers: [i2.DatePipe], imports: [__spreadArray([i2.CommonModule, i1$1.ReactiveFormsModule], __read(uiModules$1))] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentsFilterModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [PaymentsFilterComponent, PaymentsFilterCustomizableDirective],
                        imports: __spreadArray([i2.CommonModule, i1$1.ReactiveFormsModule], __read(uiModules$1)),
                        exports: [PaymentsFilterComponent, PaymentsFilterCustomizableDirective],
                        providers: [i2.DatePipe],
                    }]
            }] });

    var PaymentsControlsModule = /** @class */ (function () {
        function PaymentsControlsModule() {
        }
        return PaymentsControlsModule;
    }());
    /** @nocollapse */ PaymentsControlsModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentsControlsModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ PaymentsControlsModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentsControlsModule, declarations: [PaymentsControlsComponent,
            PaymentsControlsCustomizableDirective], imports: [i7.ButtonModule,
            i2.CommonModule,
            i1$2.IconModule,
            PaymentsFilterModule,
            PaymentsSearchModule], exports: [PaymentsControlsComponent, PaymentsControlsCustomizableDirective] });
    /** @nocollapse */ PaymentsControlsModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentsControlsModule, imports: [[
                i7.ButtonModule,
                i2.CommonModule,
                i1$2.IconModule,
                PaymentsFilterModule,
                PaymentsSearchModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentsControlsModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [
                            PaymentsControlsComponent,
                            PaymentsControlsCustomizableDirective,
                        ],
                        imports: [
                            i7.ButtonModule,
                            i2.CommonModule,
                            i1$2.IconModule,
                            PaymentsFilterModule,
                            PaymentsSearchModule,
                        ],
                        exports: [PaymentsControlsComponent, PaymentsControlsCustomizableDirective],
                    }]
            }] });

    var endTypes = {
        never: 'never',
        on: 'on',
        after: 'after',
    };
    var endDate = function (frequency, startDate) {
        var today = startDate ? new Date(startDate) : new Date();
        switch (frequency.value) {
            case exports.Frequencies.ONCE:
                return undefined;
            case exports.Frequencies.WEEKLY: {
                return new Date(today.getFullYear(), today.getMonth(), today.getDate() + 7).toISOString();
            }
            case exports.Frequencies.BIWEEKLY: {
                return new Date(today.getFullYear(), today.getMonth(), today.getDate() + 14).toISOString();
            }
            case exports.Frequencies.MONTHLY: {
                return new Date(today.getFullYear(), today.getMonth() + 1, today.getDate()).toISOString();
            }
            case exports.Frequencies.QUARTERLY: {
                return new Date(today.getFullYear(), today.getMonth() + 3, today.getDate()).toISOString();
            }
            case exports.Frequencies.YEARLY: {
                return new Date(today.getFullYear() + 1, today.getMonth(), today.getDate()).toISOString();
            }
            case exports.Frequencies.DAILY:
            default: {
                return new Date(today.getFullYear(), today.getMonth(), today.getDate() + 1).toISOString();
            }
        }
    };
    var ScheduleComponent = /** @class */ (function () {
        function ScheduleComponent(changeDetectorRef) {
            this.changeDetectorRef = changeDetectorRef;
            this.hostRef = this;
            this.gc$ = new rxjs.Subject();
        }
        Object.defineProperty(ScheduleComponent.prototype, "endTypes", {
            get: function () {
                return endTypes;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ScheduleComponent.prototype, "item", {
            get: function () {
                return this.rawItem;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ScheduleComponent.prototype, "isSingleTransfer", {
            get: function () {
                return (this.item &&
                    this.item.frequency &&
                    (this.item.frequency.value
                        ? this.item.frequency.value.toLocaleLowerCase() === 'once'
                        : false));
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ScheduleComponent.prototype, "today", {
            get: function () {
                var today = new Date();
                return {
                    year: today.getFullYear(),
                    month: today.getMonth() + 1,
                    day: today.getDate(),
                };
            },
            enumerable: false,
            configurable: true
        });
        ScheduleComponent.prototype.ngDoCheck = function () {
            if (this.scheduleForm !== undefined) {
                this.rawItem = this.scheduleForm.getRawValue();
            }
        };
        ScheduleComponent.prototype.ngOnInit = function () {
            if (this.scheduleForm === undefined) {
                throw new Error('`scheduleForm` input is required in `bb-schedule-ui` component');
            }
            if (this.frequencies === undefined) {
                throw new Error('`frequencies` input is required in `bb-schedule-ui` component');
            }
            this.rawItem = this.scheduleForm.getRawValue();
            this.onEndTypeChange();
            this.onFrequencyChange();
            this.onStartDateChange();
        };
        ScheduleComponent.prototype.ngOnDestroy = function () {
            this.gc$.next();
            this.gc$.complete();
        };
        ScheduleComponent.prototype.onEndTypeChange = function () {
            var _this = this;
            var endTypeControl = this.scheduleForm && this.scheduleForm.get('endType');
            var frequencyControl = this.scheduleForm && this.scheduleForm.get('frequency');
            if (endTypeControl) {
                endTypeControl.valueChanges
                    .pipe(operators.takeUntil(this.gc$))
                    .subscribe(function (endTypeValue) {
                    _this.setControlsState(endTypeValue);
                    if (frequencyControl) {
                        _this.setEndDate(frequencyControl.value);
                    }
                });
            }
        };
        ScheduleComponent.prototype.setControlsState = function (endTypeValue) {
            if (!this.scheduleForm) {
                return;
            }
            var endDateControl = this.scheduleForm.get('endDate');
            var repeatControl = this.scheduleForm.get('repeat');
            if (endDateControl && repeatControl) {
                if (endDateControl.value) {
                    endDateControl.enable();
                }
                else {
                    this.setEndDate({ value: exports.Frequencies.DAILY, every: '1' });
                    endDateControl.disable();
                }
                if (repeatControl.value) {
                    repeatControl.enable();
                }
                else {
                    repeatControl.disable();
                }
                switch (endTypeValue) {
                    case endTypes.after: {
                        repeatControl.enable();
                        endDateControl.disable();
                        break;
                    }
                    case endTypes.on: {
                        endDateControl.enable();
                        repeatControl.disable();
                        break;
                    }
                    case endTypes.never:
                    default: {
                        endDateControl.disable();
                        repeatControl.disable();
                        break;
                    }
                }
            }
        };
        ScheduleComponent.prototype.onStartDateChange = function () {
            var _this = this;
            var startDateControl = this.scheduleForm && this.scheduleForm.get('startDate');
            var startDate = startDateControl && startDateControl.value;
            if (startDateControl) {
                startDateControl.valueChanges
                    .pipe(operators.takeUntil(this.gc$), operators.distinct())
                    .subscribe(function (value) {
                    var frequency = _this.item && _this.item.frequency;
                    if (frequency && startDate !== value) {
                        _this.setEndDate(frequency);
                    }
                });
            }
        };
        ScheduleComponent.prototype.onFrequencyChange = function () {
            var _this = this;
            if (!this.frequencies) {
                return;
            }
            var frequencyControl = this.scheduleForm && this.scheduleForm.get('frequency');
            if (frequencyControl) {
                if (this.isSingleTransfer) {
                    frequencyControl.setValue(this.frequencies[0]);
                }
                frequencyControl.valueChanges
                    .pipe(operators.takeUntil(this.gc$))
                    .subscribe(function (freq) {
                    _this.setEndDate(freq);
                });
            }
        };
        ScheduleComponent.prototype.setEndDate = function (frequency) {
            var endDateControl = this.scheduleForm && this.scheduleForm.get('endDate');
            var startDateControl = this.scheduleForm && this.scheduleForm.get('startDate');
            var startDate = startDateControl && startDateControl.value;
            var endTypeControl = this.scheduleForm && this.scheduleForm.get('endType');
            if (endDateControl &&
                endTypeControl &&
                endTypeControl.value === this.endTypes.on) {
                endDateControl.setValue(endDate(frequency, startDate));
            }
            this.changeDetectorRef.detectChanges();
        };
        ScheduleComponent.prototype.isInvalidControl = function (control) {
            if (!this.scheduleForm) {
                return false;
            }
            if (!this.formSubmitted) {
                control.markAsUntouched();
            }
            return !!this.formSubmitted && control.invalid;
        };
        return ScheduleComponent;
    }());
    /** @nocollapse */ ScheduleComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ScheduleComponent, deps: [{ token: i0__namespace.ChangeDetectorRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ ScheduleComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ScheduleComponent, selector: "bb-schedule-ui", inputs: { frequencies: "frequencies", minOccurs: "minOccurs", maxOccurs: "maxOccurs", scheduleForm: "scheduleForm", formSubmitted: "formSubmitted" }, ngImport: i0__namespace, template: "<ng-template bbScheduleCustomizable let-hostRef>\n  <div [formGroup]=\"hostRef.scheduleForm\">\n    <div class=\"bb-block bb-block--md\"></div>\n    <div class=\"row bb-block bb-block--md\">\n      <div class=\"col-md-7\">\n        <label class=\"bb-text-bold\" [attr.for]=\"startDatePicker.id\">\n          <ng-container\n            i18n=\"\n              Schedule execution label|Label for an execution date in scheduling\n              component@@bb-schedule-ui.label.execution\"\n            >{hostRef.scheduleForm?.get('frequency')?.value?.value.toUpperCase(),\n            select, ONCE {Execute on} other {Start on}}\n          </ng-container>\n        </label>\n\n        <bb-input-datepicker-ui\n          #startDatePicker\n          [minDate]=\"hostRef.today\"\n          formControlName=\"startDate\"\n          data-role=\"execution-date-calendar\"\n        ></bb-input-datepicker-ui>\n\n        <bb-input-validation-message-ui\n          role=\"alert\"\n          [showErrors]=\"\n            hostRef.isInvalidControl(hostRef.scheduleForm.get('startDate'))\n          \"\n        >\n          <span\n            data-role=\"missing-schedule-execution-date\"\n            *ngIf=\"hostRef.scheduleForm.get('startDate').errors?.required\"\n            i18n=\"\n              Execution date required error text|Error required message for\n              Execution date input field@@bb-schedule.error.required.startDate\"\n          >\n            Execution date is required\n          </span>\n\n          <span\n            data-role=\"past-date-schedule-execution-date\"\n            *ngIf=\"hostRef.scheduleForm.get('startDate').errors?.pastDate\"\n            i18n=\"\n              Execution date past date error text |Error past date message for\n              Execution date input field@@bb-schedule.error.pastDate.startDate\"\n          >\n            Execution date cannot be in the past\n          </span>\n\n          <span\n            data-role=\"invalid-date-schedule-execution-date\"\n            *ngIf=\"\n              hostRef.scheduleForm.get('startDate').errors?.invalidDateFormat\n            \"\n            i18n=\"\n              Execution date invalid date error text |Error invalid date format\n              message for Execution date input\n              field@@bb-schedule.error.invalidDateFormat\"\n          >\n            Invalid date format\n          </span>\n        </bb-input-validation-message-ui>\n      </div>\n    </div>\n\n    <div class=\"row bb-block bb-block--md\">\n      <div class=\"col-md-7\">\n        <label\n          class=\"bb-text-bold\"\n          [attr.for]=\"frequencySelector.id\"\n          i18n=\"Frequency|Label for frequency@@bb-schedule-ui.frequency.label\"\n        >\n          Frequency\n        </label>\n\n        <bb-dropdown-single-select-ui\n          #frequencySelector\n          displayAttributePath=\"value\"\n          formControlName=\"frequency\"\n          data-role=\"frequency-selector\"\n        >\n          <bb-dropdown-single-select-option-ui\n            label=\"Once\"\n            data-role=\"frequency\"\n            [value]=\"hostRef.frequencies[0]\"\n            i18n-label=\"\n              Once|Once frequency type Label@@bb-schedule-ui.frequency.Once\"\n          ></bb-dropdown-single-select-option-ui>\n\n          <bb-dropdown-single-select-option-ui\n            label=\"Daily\"\n            data-role=\"frequency\"\n            [value]=\"hostRef.frequencies[1]\"\n            i18n-label=\"\n              Daily|Daily frequency type Label@@bb-schedule-ui.frequency.Daily\"\n          ></bb-dropdown-single-select-option-ui>\n\n          <bb-dropdown-single-select-option-ui\n            label=\"Weekly\"\n            data-role=\"frequency\"\n            [value]=\"hostRef.frequencies[2]\"\n            i18n-label=\"\n              Weekly|Weekly frequency type\n              Label@@bb-schedule-ui.frequency.Weekly\"\n          ></bb-dropdown-single-select-option-ui>\n\n          <bb-dropdown-single-select-option-ui\n            label=\"Biweekly\"\n            data-role=\"frequency\"\n            [value]=\"hostRef.frequencies[3]\"\n            i18n-label=\"\n              Biweekly|Biweekly frequency type\n              Label@@bb-schedule-ui.frequency.Biweekly\"\n          ></bb-dropdown-single-select-option-ui>\n\n          <bb-dropdown-single-select-option-ui\n            label=\"Monthly\"\n            data-role=\"frequency\"\n            [value]=\"hostRef.frequencies[4]\"\n            i18n-label=\"\n              Monthly|Monthly frequency type\n              Label@@bb-schedule-ui.frequency.Monthly\"\n          ></bb-dropdown-single-select-option-ui>\n\n          <bb-dropdown-single-select-option-ui\n            label=\"Quarterly\"\n            data-role=\"frequency\"\n            [value]=\"hostRef.frequencies[5]\"\n            i18n-label=\"\n              Quarterly|Quarterly frequency type\n              Label@@bb-schedule-ui.frequency.Quarterly\"\n          ></bb-dropdown-single-select-option-ui>\n\n          <bb-dropdown-single-select-option-ui\n            label=\"Annually\"\n            data-role=\"frequency\"\n            [value]=\"hostRef.frequencies[6]\"\n            i18n-label=\"\n              Annually|Annually frequency type\n              Label@@bb-schedule-ui.frequency.Annually\"\n          ></bb-dropdown-single-select-option-ui>\n        </bb-dropdown-single-select-ui>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-7\" [hidden]=\"hostRef.isSingleTransfer\">\n        <bb-input-radio-group-ui\n          label=\"End\"\n          data-role=\"radio-group\"\n          formControlName=\"endType\"\n          i18n-label=\"\n            Schedule ending section name|Label for the section containing inputs\n            that determine way of ending of the\n            schedule@@bb-schedule-ui.label.ending\"\n        >\n          <bb-input-radio-ui\n            [value]=\"hostRef.endTypes.never\"\n            [labelTemplate]=\"neverEndingSchedule\"\n          ></bb-input-radio-ui>\n\n          <bb-input-radio-ui\n            [value]=\"hostRef.endTypes.on\"\n            [labelTemplate]=\"onDateSchedule\"\n          ></bb-input-radio-ui>\n\n          <bb-input-radio-ui\n            [value]=\"hostRef.endTypes.after\"\n            [labelTemplate]=\"endingAfterSchedule\"\n          ></bb-input-radio-ui>\n        </bb-input-radio-group-ui>\n\n        <ng-template #neverEndingSchedule>\n          <span\n            class=\"bb-text-default\"\n            data-role=\"ending-never-selector\"\n            i18n=\"\n              Schedule never ends|Label for an option to never end the\n              schedule@@bb-schedule-ui.label.ending.never\"\n          >\n            Never\n          </span>\n        </ng-template>\n\n        <ng-template #onDateSchedule>\n          <div data-role=\"ending-on-selector\">\n            <div class=\"bb-stack\">\n              <div class=\"bb-stack__item\">\n                <span\n                  class=\"bb-text-default\"\n                  i18n=\"\n                    Schedule end date|Label for an option to end the schedule on\n                    a specific date@@bb-schedule-ui.label.ending.on\"\n                >\n                  On date\n                </span>\n              </div>\n\n              <div class=\"bb-stack__item bb-stack__item--fill\">\n                <bb-input-datepicker-ui\n                  [minDate]=\"hostRef.today\"\n                  aria-label=\"End date\"\n                  formControlName=\"endDate\"\n                  data-role=\"ending-end-date\"\n                  i18n-aria-label=\"\n                    Schedule end date date picker label|Aria label for end date\n                    schedule control@@bb-schedule-ui.label.end-date\"\n                  *ngIf=\"\n                    hostRef.scheduleForm.get('endDate').enabled &&\n                    hostRef.scheduleForm.get('endType').value ==\n                      hostRef.endTypes.on\n                  \"\n                ></bb-input-datepicker-ui>\n\n                <bb-input-validation-message-ui\n                  role=\"alert\"\n                  *ngIf=\"hostRef.scheduleForm.get('endDate') as control\"\n                  [showErrors]=\"hostRef.isInvalidControl(control)\"\n                >\n                  <span\n                    *ngIf=\"control.errors?.pastDate\"\n                    i18n=\"\n                      End date past date error text |Error past date message for\n                      End date input field@@bb-schedule.error.pastDate.endDate\"\n                    data-role=\"past-date-ending-end-date\"\n                  >\n                    End date cannot be in the past\n                  </span>\n                  <span\n                    *ngIf=\"control.errors?.required\"\n                    i18n=\"\n                      End date required error text|Error required message for\n                      End date input field@@bb-schedule.error.required.endDate\"\n                    data-role=\"missing-schedule-end-date\"\n                  >\n                    End date is required\n                  </span>\n                  <span\n                    *ngIf=\"control.errors?.invalidDateFormat\"\n                    i18n=\"\n                      End date invalid date error text |Error invalid date\n                      format message for End date input\n                      field@@bb-schedule.invalidDateFormat.endDate\"\n                    data-role=\"invalid-date-schedule-end-date\"\n                  >\n                    Invalid date format\n                  </span>\n                </bb-input-validation-message-ui>\n              </div>\n            </div>\n          </div>\n        </ng-template>\n\n        <ng-template #endingAfterSchedule>\n          <div data-role=\"ending-occurrences-selector\">\n            <div class=\"bb-stack\">\n              <div class=\"bb-stack__item\">\n                <span\n                  class=\"bb-text-default\"\n                  i18n=\"\n                    Schedule number of occurrences|Label for an option to end\n                    the schedule after some number of\n                    occurrences@@bb-schedule-ui.label.ending.after\"\n                >\n                  After\n                </span>\n              </div>\n\n              <div class=\"bb-stack__item bb-stack__item--fill\">\n                <div\n                  class=\"bb-stack\"\n                  *ngIf=\"\n                    hostRef.scheduleForm.get('repeat').enabled &&\n                    hostRef.scheduleForm.get('endType').value ==\n                      hostRef.endTypes.after\n                  \"\n                >\n                  <div class=\"bb-stack__item\">\n                    <bb-input-number-ui\n                      id=\"ending-occurrences\"\n                      formControlName=\"repeat\"\n                      [min]=\"hostRef.minOccurs\"\n                      [max]=\"hostRef.maxOccurs\"\n                      data-role=\"ending-occurrences\"\n                    ></bb-input-number-ui>\n                  </div>\n\n                  <div class=\"bb-stack__item\">\n                    <span\n                      class=\"bb-text-default\"\n                      i18n=\"\n                        Schedule occurrences text|Text to be appended after\n                        schedule end after some number of occurrences\n                        input@@bb-schedule-ui.label.ending.occurrences\"\n                    >\n                      occurrences\n                    </span>\n                  </div>\n                </div>\n\n                <bb-input-validation-message-ui\n                  role=\"alert\"\n                  [showErrors]=\"\n                    hostRef.item.endType === hostRef.endTypes.after &&\n                    hostRef.isInvalidControl(hostRef.scheduleForm.get('repeat'))\n                  \"\n                >\n                  <span\n                    data-role=\"ending-occurrences-too-few\"\n                    *ngIf=\"hostRef.scheduleForm.get('repeat').errors?.min\"\n                    i18n=\"\n                      Repeat less then min error text |Error min message for\n                      repeat input field@@bb-schedule.error.min.repeat\"\n                  >\n                    Value is below the minimum allowed occurrences ({{\n                      hostRef.minOccurs\n                    }})\n                  </span>\n\n                  <span\n                    data-role=\"ending-occurrences-too-many\"\n                    *ngIf=\"hostRef.scheduleForm.get('repeat').errors?.max\"\n                    i18n=\"\n                      Repeat more then max error text |Error max message for\n                      repeat input field@@bb-schedule.error.max.repeat\"\n                  >\n                    Value exceeds the maximum allowed occurrences ({{\n                      hostRef.maxOccurs\n                    }})\n                  </span>\n\n                  <span\n                    data-role=\"missing-ending-occurrences\"\n                    *ngIf=\"hostRef.scheduleForm.get('repeat').errors?.required\"\n                    i18n=\"\n                      Repeat required error text |Error required message for\n                      repeat input field@@bb-schedule.error.required.repeat\"\n                  >\n                    Value is required\n                  </span>\n                </bb-input-validation-message-ui>\n              </div>\n            </div>\n          </div>\n        </ng-template>\n      </div>\n    </div>\n  </div>\n</ng-template>\n\n<ng-container bbScheduleCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n", components: [{ type: i0__namespace.forwardRef(function () { return i1__namespace$c.InputDatepickerComponent; }), selector: "bb-input-datepicker-ui", inputs: ["rangeSelection", "rangeSelectionSplit", "clickOpen", "focusOpen", "placement", "datepickerDescribedby", "ariaLabelForButton", "minDate", "maxDate", "markDisabled", "icon", "iconSize", "iconColor", "btnColor", "ariaLabel", "navigation", "autocomplete", "firstDayOfWeek", "displayMonths", "placeholder", "overrideDateFormat"], outputs: ["focusedDate"] }, { type: i0__namespace.forwardRef(function () { return i4__namespace.InputValidationMessageComponent; }), selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i0__namespace.forwardRef(function () { return i3__namespace$1.DropdownSingleSelectComponent; }), selector: "bb-dropdown-single-select-ui", inputs: ["placeholder", "defaultOptionAsPlaceholder", "options", "displayAttributePath", "iconName", "compareWithFn"] }, { type: i0__namespace.forwardRef(function () { return i3__namespace$1.DropdownSingleSelectOptionComponent; }), selector: "bb-dropdown-single-select-option-ui", inputs: ["value", "label"] }, { type: i0__namespace.forwardRef(function () { return i4__namespace$1.InputRadioGroupComponent; }), selector: "bb-input-radio-group-ui", inputs: ["horizontal", "preselect", "name", "verticalAlign"] }, { type: i0__namespace.forwardRef(function () { return i4__namespace$1.InputRadioComponent; }), selector: "bb-input-radio-ui", inputs: ["labelTemplate", "labelTemplateContext", "value", "label", "aria-label", "aria-labelledby", "aria-describedby", "role", "aria-activedescendant", "aria-expanded", "aria-invalid", "aria-owns", "disabled"] }, { type: i0__namespace.forwardRef(function () { return i3__namespace$5.InputNumberComponent; }), selector: "bb-input-number-ui", inputs: ["placeholder", "max", "min", "step", "readonly", "autocomplete", "ariaLabel", "allowNonDigits", "allowNegativeSign"] }], directives: [{ type: i0__namespace.forwardRef(function () { return ScheduleCustomizableDirective; }), selector: "[bbScheduleCustomizable], [bbPayordInitiatePaymentScheduleCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i1__namespace$1.NgControlStatusGroup; }), selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i0__namespace.forwardRef(function () { return i1__namespace$1.FormGroupDirective; }), selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace$c.MinDateValidatorDirective; }), selector: "bb-input-datepicker-ui[minDate]", inputs: ["minDate"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace$1.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0__namespace.forwardRef(function () { return i1__namespace$1.FormControlName; }), selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i0__namespace.forwardRef(function () { return i2__namespace.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ScheduleComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-schedule-ui',
                        templateUrl: './schedule.component.html',
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ChangeDetectorRef }]; }, propDecorators: { frequencies: [{
                    type: i0.Input
                }], minOccurs: [{
                    type: i0.Input
                }], maxOccurs: [{
                    type: i0.Input
                }], scheduleForm: [{
                    type: i0.Input
                }], formSubmitted: [{
                    type: i0.Input
                }] } });
    var ScheduleCustomizableDirective = /** @class */ (function (_super) {
        __extends(ScheduleCustomizableDirective, _super);
        function ScheduleCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ScheduleCustomizableDirective;
    }(i1$7.BbTemplate));
    /** @nocollapse */ ScheduleCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ScheduleCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ ScheduleCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ScheduleCustomizableDirective, selector: "[bbScheduleCustomizable], [bbPayordInitiatePaymentScheduleCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ScheduleCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbScheduleCustomizable], [bbPayordInitiatePaymentScheduleCustomizable]',
                    }]
            }] });

    var uiModules = [
        i1$c.InputDatepickerModule,
        i4.InputValidationMessageModule,
        i3$1.DropdownSingleSelectModule,
        i3$5.InputNumberModule,
        i4$1.InputRadioGroupModule,
    ];
    var ScheduleModule = /** @class */ (function () {
        function ScheduleModule() {
        }
        return ScheduleModule;
    }());
    /** @nocollapse */ ScheduleModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ScheduleModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ ScheduleModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ScheduleModule, declarations: [ScheduleComponent, ScheduleCustomizableDirective], imports: [i2.CommonModule, i1$1.ReactiveFormsModule, i1$c.InputDatepickerModule,
            i4.InputValidationMessageModule,
            i3$1.DropdownSingleSelectModule,
            i3$5.InputNumberModule,
            i4$1.InputRadioGroupModule], exports: [ScheduleComponent, ScheduleCustomizableDirective] });
    /** @nocollapse */ ScheduleModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ScheduleModule, imports: [__spreadArray([i2.CommonModule, i1$1.ReactiveFormsModule], __read(uiModules))] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ScheduleModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [ScheduleComponent, ScheduleCustomizableDirective],
                        imports: __spreadArray([i2.CommonModule, i1$1.ReactiveFormsModule], __read(uiModules)),
                        exports: [ScheduleComponent, ScheduleCustomizableDirective],
                    }]
            }] });

    var SeparatorComponent = /** @class */ (function () {
        function SeparatorComponent() {
        }
        return SeparatorComponent;
    }());
    /** @nocollapse */ SeparatorComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: SeparatorComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ SeparatorComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: SeparatorComponent, selector: "bb-separator", inputs: { options: "options" }, ngImport: i0__namespace, template: "<div class=\"bb-separator\" [ngClass]=\"options?.cssClasses\">\n  <hr />\n  <bb-icon-ui\n    *ngIf=\"options?.icon\"\n    [name]=\"options?.icon?.name\"\n    [color]=\"options?.icon?.color || 'dark'\"\n    class=\"bb-separator__icon\"\n  ></bb-icon-ui>\n</div>\n", components: [{ type: i1__namespace.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i2__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: SeparatorComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-separator',
                        templateUrl: './separator.component.html',
                    }]
            }], propDecorators: { options: [{
                    type: i0.Input
                }] } });

    var SeparatorModule = /** @class */ (function () {
        function SeparatorModule() {
        }
        return SeparatorModule;
    }());
    /** @nocollapse */ SeparatorModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: SeparatorModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ SeparatorModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: SeparatorModule, declarations: [SeparatorComponent], imports: [i2.CommonModule, i1$2.IconModule], exports: [SeparatorComponent] });
    /** @nocollapse */ SeparatorModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: SeparatorModule, imports: [[i2.CommonModule, i1$2.IconModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: SeparatorModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [SeparatorComponent],
                        imports: [i2.CommonModule, i1$2.IconModule],
                        exports: [SeparatorComponent],
                    }]
            }] });

    var customizables = [
        PayordStatusBadgeCustomizableDirective,
        PayordStatusBadgeAbbreviationCustomizableDirective,
        PayordStatusBadgeLabelCustomizableDirective,
    ];
    var PayordStatusBadgeModule = /** @class */ (function () {
        function PayordStatusBadgeModule() {
        }
        return PayordStatusBadgeModule;
    }());
    /** @nocollapse */ PayordStatusBadgeModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordStatusBadgeModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ PayordStatusBadgeModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordStatusBadgeModule, declarations: [PayordStatusBadgeComponent, PayordStatusBadgeCustomizableDirective,
            PayordStatusBadgeAbbreviationCustomizableDirective,
            PayordStatusBadgeLabelCustomizableDirective], imports: [i2.CommonModule, i1$a.BadgeModule], exports: [i1$a.BadgeModule, PayordStatusBadgeComponent, PayordStatusBadgeCustomizableDirective,
            PayordStatusBadgeAbbreviationCustomizableDirective,
            PayordStatusBadgeLabelCustomizableDirective] });
    /** @nocollapse */ PayordStatusBadgeModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordStatusBadgeModule, imports: [[i2.CommonModule, i1$a.BadgeModule], i1$a.BadgeModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordStatusBadgeModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i2.CommonModule, i1$a.BadgeModule],
                        declarations: __spreadArray([PayordStatusBadgeComponent], __read(customizables)),
                        exports: __spreadArray([i1$a.BadgeModule, PayordStatusBadgeComponent], __read(customizables)),
                    }]
            }] });

    var TableCheckboxModule = /** @class */ (function () {
        function TableCheckboxModule() {
        }
        return TableCheckboxModule;
    }());
    /** @nocollapse */ TableCheckboxModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TableCheckboxModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ TableCheckboxModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TableCheckboxModule, declarations: [TableCheckboxComponent], imports: [i2.CommonModule], exports: [TableCheckboxComponent] });
    /** @nocollapse */ TableCheckboxModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TableCheckboxModule, imports: [[i2.CommonModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TableCheckboxModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [TableCheckboxComponent],
                        imports: [i2.CommonModule],
                        exports: [TableCheckboxComponent],
                    }]
            }] });

    var TableHeaderCheckboxModule = /** @class */ (function () {
        function TableHeaderCheckboxModule() {
        }
        return TableHeaderCheckboxModule;
    }());
    /** @nocollapse */ TableHeaderCheckboxModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TableHeaderCheckboxModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ TableHeaderCheckboxModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TableHeaderCheckboxModule, declarations: [TableHeaderCheckboxComponent], imports: [i2.CommonModule], exports: [TableHeaderCheckboxComponent] });
    /** @nocollapse */ TableHeaderCheckboxModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TableHeaderCheckboxModule, imports: [[i2.CommonModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TableHeaderCheckboxModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [TableHeaderCheckboxComponent],
                        imports: [i2.CommonModule],
                        exports: [TableHeaderCheckboxComponent],
                    }]
            }] });

    var IbanDirective = /** @class */ (function () {
        function IbanDirective(el, ngControl, changeDetectorRef) {
            this.el = el;
            this.ngControl = ngControl;
            this.changeDetectorRef = changeDetectorRef;
            /**
             * The max length for the IBAN number, mostly 34
             */
            this.maxLen = 34;
            this.value = '';
            this.editPositionRestorer$ = new rxjs.Subject();
            this.garbageCollector$ = new rxjs.Subject();
            this.transformValue = function (value, max) {
                if (!value) {
                    return value;
                }
                var format = function (v) { return v.replace(/(.{4})/g, '$1 ').trim(); };
                var rawResult = value.toUpperCase().replace(/[^a-z0-9]/gi, '');
                return rawResult.length > max
                    ? format(rawResult.slice(0, max))
                    : format(rawResult);
            };
        }
        IbanDirective.prototype.ngOnInit = function () {
            var _this = this;
            if (!this.ngControl || !this.ngControl.control) {
                return;
            }
            var control = this.ngControl.control;
            var ibanInputEl = this.el.nativeElement.querySelector('input');
            control.valueChanges
                .pipe(operators.distinctUntilChanged(), operators.filter(function (value) {
                var alphaNumericRegex = /^[a-zA-Z0-9 ]{5,}$/; //Only format string with valid iban chars
                return value !== _this.value && alphaNumericRegex.test(value);
            }), operators.takeUntil(this.garbageCollector$))
                .subscribe(function (value) {
                var pos = ibanInputEl.selectionStart;
                var transformedValue = _this.transformValue(value, _this.maxLen);
                if (value &&
                    value.substring(0, pos) !== transformedValue.substring(0, pos)) {
                    pos++;
                }
                _this.changeDetectorRef.detectChanges();
                control.setValue(transformedValue);
                control.updateValueAndValidity();
                _this.value = transformedValue;
                _this.changeDetectorRef.detectChanges();
                _this.editPositionRestorer$.next(pos);
            });
            this.editPositionRestorer$.pipe(operators.delay(1)).subscribe(function (position) {
                ibanInputEl.setSelectionRange(position, position);
            });
        };
        IbanDirective.prototype.ngOnDestroy = function () {
            this.editPositionRestorer$.unsubscribe();
            if (this.garbageCollector$) {
                this.garbageCollector$.next();
                this.garbageCollector$.complete();
            }
        };
        return IbanDirective;
    }());
    /** @nocollapse */ IbanDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: IbanDirective, deps: [{ token: i0__namespace.ElementRef }, { token: i1__namespace$1.NgControl }, { token: i0__namespace.ChangeDetectorRef }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ IbanDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: IbanDirective, selector: "[bbIban]", inputs: { maxLen: "maxLen" }, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: IbanDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbIban]',
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }, { type: i1__namespace$1.NgControl }, { type: i0__namespace.ChangeDetectorRef }]; }, propDecorators: { maxLen: [{
                    type: i0.Input
                }] } });

    var IbanModule = /** @class */ (function () {
        function IbanModule() {
        }
        return IbanModule;
    }());
    /** @nocollapse */ IbanModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: IbanModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ IbanModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: IbanModule, declarations: [IbanDirective], imports: [i2.CommonModule], exports: [IbanDirective] });
    /** @nocollapse */ IbanModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: IbanModule, imports: [[i2.CommonModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: IbanModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [IbanDirective],
                        imports: [i2.CommonModule],
                        exports: [IbanDirective],
                    }]
            }] });

    var AccountFormatterModule = /** @class */ (function () {
        function AccountFormatterModule() {
        }
        return AccountFormatterModule;
    }());
    /** @nocollapse */ AccountFormatterModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccountFormatterModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ AccountFormatterModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccountFormatterModule, declarations: [AccountFormatterPipe], imports: [i2.CommonModule], exports: [AccountFormatterPipe] });
    /** @nocollapse */ AccountFormatterModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccountFormatterModule, imports: [[i2.CommonModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccountFormatterModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [AccountFormatterPipe],
                        imports: [i2.CommonModule],
                        exports: [AccountFormatterPipe],
                    }]
            }] });

    var BytesPipe = /** @class */ (function () {
        function BytesPipe() {
            this.units = ['bytes', 'KB', 'MB', 'GB'];
        }
        BytesPipe.prototype.transform = function (bytes, precision) {
            if (bytes === void 0) { bytes = 0; }
            if (precision === void 0) { precision = 2; }
            if (isNaN(parseFloat(String(bytes))) || !isFinite(bytes)) {
                return '?';
            }
            var unit = 0;
            while (bytes >= 1024) {
                bytes /= 1024;
                unit++;
            }
            var transformedBytes = Number.isInteger(bytes)
                ? bytes
                : bytes.toFixed(+precision);
            return transformedBytes + " " + this.units[unit];
        };
        return BytesPipe;
    }());
    /** @nocollapse */ BytesPipe.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: BytesPipe, deps: [], target: i0__namespace.ɵɵFactoryTarget.Pipe });
    /** @nocollapse */ BytesPipe.ɵpipe = i0__namespace.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: BytesPipe, name: "bytes" });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: BytesPipe, decorators: [{
                type: i0.Pipe,
                args: [{ name: 'bytes' }]
            }] });

    var BytesModule = /** @class */ (function () {
        function BytesModule() {
        }
        return BytesModule;
    }());
    /** @nocollapse */ BytesModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: BytesModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ BytesModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: BytesModule, declarations: [BytesPipe], imports: [i2.CommonModule], exports: [BytesPipe] });
    /** @nocollapse */ BytesModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: BytesModule, imports: [[i2.CommonModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: BytesModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [BytesPipe],
                        imports: [i2.CommonModule],
                        exports: [BytesPipe],
                    }]
            }] });

    var BBHighlightPipe = /** @class */ (function () {
        function BBHighlightPipe() {
        }
        BBHighlightPipe.prototype.transform = function (text, search) {
            var pattern = search.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&');
            pattern = pattern
                .split(' ')
                .filter(function (t) { return t.length > 0; })
                .join('|');
            var regex = new RegExp(pattern, 'gi');
            return search
                ? text.replace(regex, function (match) { return "<b class=\"highlight-pipe-content\">" + match + "</b>"; })
                : text;
        };
        return BBHighlightPipe;
    }());
    /** @nocollapse */ BBHighlightPipe.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: BBHighlightPipe, deps: [], target: i0__namespace.ɵɵFactoryTarget.Pipe });
    /** @nocollapse */ BBHighlightPipe.ɵpipe = i0__namespace.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: BBHighlightPipe, name: "highlight" });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: BBHighlightPipe, decorators: [{
                type: i0.Pipe,
                args: [{ name: 'highlight' }]
            }] });

    var BBHighlightModule = /** @class */ (function () {
        function BBHighlightModule() {
        }
        return BBHighlightModule;
    }());
    /** @nocollapse */ BBHighlightModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: BBHighlightModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ BBHighlightModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: BBHighlightModule, declarations: [BBHighlightPipe], imports: [i2.CommonModule], exports: [BBHighlightPipe] });
    /** @nocollapse */ BBHighlightModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: BBHighlightModule, imports: [[i2.CommonModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: BBHighlightModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [BBHighlightPipe],
                        imports: [i2.CommonModule],
                        exports: [BBHighlightPipe],
                    }]
            }] });

    exports.RelativeDate = void 0;
    (function (RelativeDate) {
        RelativeDate["Yesterday"] = "Yesterday";
        RelativeDate["Today"] = "Today";
        RelativeDate["Tomorrow"] = "Tomorrow";
    })(exports.RelativeDate || (exports.RelativeDate = {}));
    var RelativeDatePipe = /** @class */ (function () {
        function RelativeDatePipe(datePipe) {
            this.datePipe = datePipe;
            this.getRelativeDateHelper = getRelativeDate;
        }
        RelativeDatePipe.prototype.transform = function (value, dateFormat) {
            var result;
            var _value = getDateOnly(new Date(value));
            var yesterday = this.getRelativeDateHelper(-1);
            var today = this.getRelativeDateHelper();
            var tomorrow = this.getRelativeDateHelper(1);
            switch (_value) {
                case yesterday:
                    result = exports.RelativeDate.Yesterday;
                    break;
                case today:
                    result = exports.RelativeDate.Today;
                    break;
                case tomorrow:
                    result = exports.RelativeDate.Tomorrow;
                    break;
                default:
                    result = this.datePipe.transform(value, dateFormat);
            }
            return result;
        };
        return RelativeDatePipe;
    }());
    /** @nocollapse */ RelativeDatePipe.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: RelativeDatePipe, deps: [{ token: i2__namespace.DatePipe }], target: i0__namespace.ɵɵFactoryTarget.Pipe });
    /** @nocollapse */ RelativeDatePipe.ɵpipe = i0__namespace.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: RelativeDatePipe, name: "relativeDate" });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: RelativeDatePipe, decorators: [{
                type: i0.Pipe,
                args: [{ name: 'relativeDate' }]
            }], ctorParameters: function () { return [{ type: i2__namespace.DatePipe }]; } });

    var RelativeDateModule = /** @class */ (function () {
        function RelativeDateModule() {
        }
        return RelativeDateModule;
    }());
    /** @nocollapse */ RelativeDateModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: RelativeDateModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ RelativeDateModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: RelativeDateModule, declarations: [RelativeDatePipe], imports: [i2.CommonModule], exports: [RelativeDatePipe] });
    /** @nocollapse */ RelativeDateModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: RelativeDateModule, imports: [[i2.CommonModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: RelativeDateModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [RelativeDatePipe],
                        imports: [i2.CommonModule],
                        exports: [RelativeDatePipe],
                    }]
            }] });

    var ExportPdfModule = /** @class */ (function () {
        function ExportPdfModule() {
        }
        return ExportPdfModule;
    }());
    /** @nocollapse */ ExportPdfModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ExportPdfModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ ExportPdfModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ExportPdfModule, declarations: [ExportPdfDirective], imports: [i2.CommonModule], exports: [ExportPdfDirective] });
    /** @nocollapse */ ExportPdfModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ExportPdfModule, providers: [i1$b.NotificationService], imports: [[i2.CommonModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ExportPdfModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [ExportPdfDirective],
                        imports: [i2.CommonModule],
                        exports: [ExportPdfDirective],
                        providers: [i1$b.NotificationService],
                    }]
            }] });

    var components = [
        AddressDetailsComponent,
        FullAddressComponent,
        PaymentDebitorDetailsCardComponent,
        PaymentCreditorDetailsCardComponent,
        PayordCounterpartyDetailsComponent,
        PayordScheduleDetailsComponent,
        PayordStatusComponent,
        PayordAmountDetailsComponent,
        PayordDynamicLabelComponent,
        FlagIconComponent,
        CountryNameComponent,
        CountrySelectorComponent,
        PayordDynamicLabelComponent,
        FlagIconComponent,
        CountryNameComponent,
        SelectCountryDropdownComponent,
        CurrencySelectorComponent,
        CurrencyAmountSelectorComponent,
        PaymentTemplateComponent,
        BreachLimitDetailsModalComponent,
        PayordCardMenuComponent,
        SelectPurposeDropdownComponent,
        RoutableModalComponent,
        HorizontalListSelectorComponent,
        PaymentTemplateSelectorComponent,
        PurposeOfPaymentDetailComponent,
        PaymentsTableComponent,
        PaymentsListComponent,
    ];
    var modules = [
        i3.InputTextModule,
        i7.ButtonModule,
        i1$2.IconModule,
        i2$3.DropdownMenuModule,
        i3$1.DropdownSingleSelectModule,
        i6$2.InfiniteScrollModule,
        i4.InputValidationMessageModule,
        i5.EmptyStateModule,
        i2$1.SearchBoxModule,
        i6.NgbDropdownModule,
        i1$3.AvatarModule,
        i2$2.AmountModule,
        i2$1.SearchBoxModule,
        productSelector.ProductSelectorModule,
        i10.KeyboardClickModule,
        i5.EmptyStateModule,
        i1$4.ModalModule,
        i3$2.HeaderModule,
        i6$1.LoadButtonModule,
        i8.LoadingIndicatorModule,
        i1$5.EllipsisModule,
        i9.TooltipModule,
        pagination.PaginationModule,
        i1$9.TableModule,
        i3$3.HighlightModule,
        BeneficiarySelectorUIModule,
        PaymentsSrSearchResultInfoModule,
        ScheduleLabelModule,
        ConfirmationDialogModule,
        PaymentsControlsModule,
        PaymentsFilterModule,
        PaymentsSearchModule,
        ScheduleModule,
        SeparatorModule,
        PayordStatusBadgeModule,
        TableHeaderCheckboxModule,
        TableCheckboxModule,
        IbanModule,
        AccountFormatterModule,
        BytesModule,
        BBHighlightModule,
        RelativeDateModule,
        ExportPdfModule,
    ];
    var PaymentOrdersUiModule = /** @class */ (function () {
        function PaymentOrdersUiModule() {
        }
        return PaymentOrdersUiModule;
    }());
    /** @nocollapse */ PaymentOrdersUiModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentOrdersUiModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ PaymentOrdersUiModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentOrdersUiModule, declarations: [AddressDetailsComponent,
            FullAddressComponent,
            PaymentDebitorDetailsCardComponent,
            PaymentCreditorDetailsCardComponent,
            PayordCounterpartyDetailsComponent,
            PayordScheduleDetailsComponent,
            PayordStatusComponent,
            PayordAmountDetailsComponent,
            PayordDynamicLabelComponent,
            FlagIconComponent,
            CountryNameComponent,
            CountrySelectorComponent,
            PayordDynamicLabelComponent,
            FlagIconComponent,
            CountryNameComponent,
            SelectCountryDropdownComponent,
            CurrencySelectorComponent,
            CurrencyAmountSelectorComponent,
            PaymentTemplateComponent,
            BreachLimitDetailsModalComponent,
            PayordCardMenuComponent,
            SelectPurposeDropdownComponent,
            RoutableModalComponent,
            HorizontalListSelectorComponent,
            PaymentTemplateSelectorComponent,
            PurposeOfPaymentDetailComponent,
            PaymentsTableComponent,
            PaymentsListComponent], imports: [i2.CommonModule, i1$1.FormsModule, i1$1.ReactiveFormsModule, i3.InputTextModule,
            i7.ButtonModule,
            i1$2.IconModule,
            i2$3.DropdownMenuModule,
            i3$1.DropdownSingleSelectModule,
            i6$2.InfiniteScrollModule,
            i4.InputValidationMessageModule,
            i5.EmptyStateModule,
            i2$1.SearchBoxModule,
            i6.NgbDropdownModule,
            i1$3.AvatarModule,
            i2$2.AmountModule,
            i2$1.SearchBoxModule,
            productSelector.ProductSelectorModule,
            i10.KeyboardClickModule,
            i5.EmptyStateModule,
            i1$4.ModalModule,
            i3$2.HeaderModule,
            i6$1.LoadButtonModule,
            i8.LoadingIndicatorModule,
            i1$5.EllipsisModule,
            i9.TooltipModule,
            pagination.PaginationModule,
            i1$9.TableModule,
            i3$3.HighlightModule,
            BeneficiarySelectorUIModule,
            PaymentsSrSearchResultInfoModule,
            ScheduleLabelModule,
            ConfirmationDialogModule,
            PaymentsControlsModule,
            PaymentsFilterModule,
            PaymentsSearchModule,
            ScheduleModule,
            SeparatorModule,
            PayordStatusBadgeModule,
            TableHeaderCheckboxModule,
            TableCheckboxModule,
            IbanModule,
            AccountFormatterModule,
            BytesModule,
            BBHighlightModule,
            RelativeDateModule,
            ExportPdfModule], exports: [AddressDetailsComponent,
            FullAddressComponent,
            PaymentDebitorDetailsCardComponent,
            PaymentCreditorDetailsCardComponent,
            PayordCounterpartyDetailsComponent,
            PayordScheduleDetailsComponent,
            PayordStatusComponent,
            PayordAmountDetailsComponent,
            PayordDynamicLabelComponent,
            FlagIconComponent,
            CountryNameComponent,
            CountrySelectorComponent,
            PayordDynamicLabelComponent,
            FlagIconComponent,
            CountryNameComponent,
            SelectCountryDropdownComponent,
            CurrencySelectorComponent,
            CurrencyAmountSelectorComponent,
            PaymentTemplateComponent,
            BreachLimitDetailsModalComponent,
            PayordCardMenuComponent,
            SelectPurposeDropdownComponent,
            RoutableModalComponent,
            HorizontalListSelectorComponent,
            PaymentTemplateSelectorComponent,
            PurposeOfPaymentDetailComponent,
            PaymentsTableComponent,
            PaymentsListComponent, i3.InputTextModule,
            i7.ButtonModule,
            i1$2.IconModule,
            i2$3.DropdownMenuModule,
            i3$1.DropdownSingleSelectModule,
            i6$2.InfiniteScrollModule,
            i4.InputValidationMessageModule,
            i5.EmptyStateModule,
            i2$1.SearchBoxModule,
            i6.NgbDropdownModule,
            i1$3.AvatarModule,
            i2$2.AmountModule,
            i2$1.SearchBoxModule,
            productSelector.ProductSelectorModule,
            i10.KeyboardClickModule,
            i5.EmptyStateModule,
            i1$4.ModalModule,
            i3$2.HeaderModule,
            i6$1.LoadButtonModule,
            i8.LoadingIndicatorModule,
            i1$5.EllipsisModule,
            i9.TooltipModule,
            pagination.PaginationModule,
            i1$9.TableModule,
            i3$3.HighlightModule,
            BeneficiarySelectorUIModule,
            PaymentsSrSearchResultInfoModule,
            ScheduleLabelModule,
            ConfirmationDialogModule,
            PaymentsControlsModule,
            PaymentsFilterModule,
            PaymentsSearchModule,
            ScheduleModule,
            SeparatorModule,
            PayordStatusBadgeModule,
            TableHeaderCheckboxModule,
            TableCheckboxModule,
            IbanModule,
            AccountFormatterModule,
            BytesModule,
            BBHighlightModule,
            RelativeDateModule,
            ExportPdfModule] });
    /** @nocollapse */ PaymentOrdersUiModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentOrdersUiModule, imports: [__spreadArray([i2.CommonModule, i1$1.FormsModule, i1$1.ReactiveFormsModule], __read(modules)), i3.InputTextModule,
            i7.ButtonModule,
            i1$2.IconModule,
            i2$3.DropdownMenuModule,
            i3$1.DropdownSingleSelectModule,
            i6$2.InfiniteScrollModule,
            i4.InputValidationMessageModule,
            i5.EmptyStateModule,
            i2$1.SearchBoxModule,
            i6.NgbDropdownModule,
            i1$3.AvatarModule,
            i2$2.AmountModule,
            i2$1.SearchBoxModule,
            productSelector.ProductSelectorModule,
            i10.KeyboardClickModule,
            i5.EmptyStateModule,
            i1$4.ModalModule,
            i3$2.HeaderModule,
            i6$1.LoadButtonModule,
            i8.LoadingIndicatorModule,
            i1$5.EllipsisModule,
            i9.TooltipModule,
            pagination.PaginationModule,
            i1$9.TableModule,
            i3$3.HighlightModule,
            BeneficiarySelectorUIModule,
            PaymentsSrSearchResultInfoModule,
            ScheduleLabelModule,
            ConfirmationDialogModule,
            PaymentsControlsModule,
            PaymentsFilterModule,
            PaymentsSearchModule,
            ScheduleModule,
            SeparatorModule,
            PayordStatusBadgeModule,
            TableHeaderCheckboxModule,
            TableCheckboxModule,
            IbanModule,
            AccountFormatterModule,
            BytesModule,
            BBHighlightModule,
            RelativeDateModule,
            ExportPdfModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentOrdersUiModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: __spreadArray([i2.CommonModule, i1$1.FormsModule, i1$1.ReactiveFormsModule], __read(modules)),
                        declarations: __spreadArray([], __read(components)),
                        exports: __spreadArray(__spreadArray([], __read(components)), __read(modules)),
                    }]
            }] });

    var StateService = /** @class */ (function () {
        function StateService() {
            this.formSubject = new rxjs.BehaviorSubject(new i1$1.FormGroup({}));
            this.paymentStateSubject = new rxjs.BehaviorSubject(exports.PaymentState.INITIAL);
            this.canApprovePayment = false;
            this.paymentTemplateSubject = new rxjs.BehaviorSubject(undefined);
            this.paymentEditSubject = new rxjs.BehaviorSubject(undefined);
        }
        Object.defineProperty(StateService.prototype, "form$", {
            get: function () {
                return this.formSubject.asObservable();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(StateService.prototype, "formInstance", {
            get: function () {
                return this.formSubject.value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(StateService.prototype, "paymentState$", {
            get: function () {
                return this.paymentStateSubject.asObservable();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(StateService.prototype, "currentState", {
            get: function () {
                return this.paymentStateSubject.value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(StateService.prototype, "canApprove", {
            get: function () {
                return this.canApprovePayment;
            },
            set: function (canApprovePayment) {
                this.canApprovePayment = canApprovePayment;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(StateService.prototype, "paymentTemplateState$", {
            get: function () {
                return this.paymentTemplateSubject.asObservable();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(StateService.prototype, "paymentEditState$", {
            get: function () {
                return this.paymentEditSubject.asObservable();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(StateService.prototype, "initialEditFormValue", {
            get: function () {
                return this.initialEditFormValueItem;
            },
            set: function (formValue) {
                this.initialEditFormValueItem = formValue;
            },
            enumerable: false,
            configurable: true
        });
        StateService.prototype.saveForm = function (form) {
            this.formSubject.next(form);
        };
        StateService.prototype.resetForm = function () {
            this.formSubject.next(new i1$1.FormGroup({}));
        };
        StateService.prototype.setPaymentState = function (paymentState) {
            this.paymentStateSubject.next(paymentState);
        };
        StateService.prototype.setPaymentTemplate = function (template) {
            this.paymentTemplateSubject.next(template);
        };
        StateService.prototype.setEditPayment = function (payment) {
            this.paymentEditSubject.next(payment);
        };
        return StateService;
    }());
    /** @nocollapse */ StateService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: StateService, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ StateService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: StateService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: StateService, decorators: [{
                type: i0.Injectable
            }] });

    var BatchOrderStateService = /** @class */ (function () {
        function BatchOrderStateService() {
            this.batchOrderIdSubject = new rxjs.BehaviorSubject('');
            this.formSubject = new rxjs.BehaviorSubject(new i1$1.FormGroup({}));
            this.stateSubject = new rxjs.BehaviorSubject(exports.ManualBatchState.INITIAL);
            this.stepSubject = new rxjs.BehaviorSubject(undefined);
            this.errorsSubject = new rxjs.BehaviorSubject({});
            this.selectedBatchTemplateSubject = new rxjs.BehaviorSubject(undefined);
            this.bacthOrderFromTemplateSubject = new rxjs.BehaviorSubject(undefined);
            this.bacthPaymentsFromTemplateSubject = new rxjs.BehaviorSubject(undefined);
        }
        Object.defineProperty(BatchOrderStateService.prototype, "batchOrderId$", {
            get: function () {
                return this.batchOrderIdSubject.asObservable();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BatchOrderStateService.prototype, "batchOrderId", {
            get: function () {
                return this.batchOrderIdSubject.value;
            },
            set: function (id) {
                this.batchOrderIdSubject.next(id);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BatchOrderStateService.prototype, "form$", {
            get: function () {
                return this.formSubject.asObservable();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BatchOrderStateService.prototype, "formInstance", {
            get: function () {
                return this.formSubject.value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BatchOrderStateService.prototype, "state$", {
            get: function () {
                return this.stateSubject.asObservable();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BatchOrderStateService.prototype, "step$", {
            get: function () {
                return this.stepSubject.asObservable();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BatchOrderStateService.prototype, "currentState", {
            get: function () {
                return this.stateSubject.value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BatchOrderStateService.prototype, "currentStep", {
            get: function () {
                return this.stepSubject.value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BatchOrderStateService.prototype, "errors$", {
            get: function () {
                return this.errorsSubject.asObservable();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BatchOrderStateService.prototype, "selectedBatchTemplate$", {
            get: function () {
                return this.selectedBatchTemplateSubject.asObservable();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BatchOrderStateService.prototype, "selectedBatchTemplate", {
            get: function () {
                return this.selectedBatchTemplateSubject.value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BatchOrderStateService.prototype, "batchOrderFromTemplate$", {
            get: function () {
                return this.bacthOrderFromTemplateSubject.asObservable();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BatchOrderStateService.prototype, "batchPaymentsFromTemplate$", {
            get: function () {
                return this.bacthPaymentsFromTemplateSubject.asObservable();
            },
            enumerable: false,
            configurable: true
        });
        BatchOrderStateService.prototype.saveForm = function (form) {
            this.formSubject.next(form);
        };
        BatchOrderStateService.prototype.resetForm = function () {
            this.formSubject.next(new i1$1.FormGroup({}));
        };
        BatchOrderStateService.prototype.setState = function (paymentState) {
            this.stateSubject.next(paymentState);
        };
        BatchOrderStateService.prototype.setStep = function (step) {
            this.stepSubject.next(step);
        };
        BatchOrderStateService.prototype.resetErrors = function () {
            this.errorsSubject.next({});
        };
        BatchOrderStateService.prototype.addError = function (stepName, error) {
            var _a;
            var errors = this.errorsSubject.value;
            var currentStepErrors = errors[stepName] || [];
            this.errorsSubject.next(Object.assign(Object.assign({}, errors), (_a = {}, _a[stepName] = __spreadArray(__spreadArray([], __read(currentStepErrors)), [error]), _a)));
        };
        BatchOrderStateService.prototype.removeErrorAt = function (stepName, index) {
            var _a;
            var errors = this.errorsSubject.value;
            var currentStepErrors = errors[stepName] || [];
            if (currentStepErrors.length && index < currentStepErrors.length) {
                currentStepErrors.splice(index, 1);
                this.errorsSubject.next(Object.assign(Object.assign({}, errors), (_a = {}, _a[stepName] = __spreadArray([], __read(currentStepErrors)), _a)));
            }
        };
        BatchOrderStateService.prototype.selectBatchTemplate = function (batchTemplate) {
            this.selectedBatchTemplateSubject.next(batchTemplate);
        };
        BatchOrderStateService.prototype.unselectBatchTemplate = function () {
            this.selectedBatchTemplateSubject.next(undefined);
        };
        BatchOrderStateService.prototype.loadBatchOrderFromTemplate = function (batchOrder) {
            this.bacthOrderFromTemplateSubject.next(batchOrder);
        };
        BatchOrderStateService.prototype.loadBatchPaymentsFromTemplate = function (batchPayments) {
            this.bacthPaymentsFromTemplateSubject.next(batchPayments);
        };
        BatchOrderStateService.prototype.removeBatchOrderFromTemplate = function () {
            this.bacthOrderFromTemplateSubject.next(undefined);
        };
        BatchOrderStateService.prototype.removeBatchPaymentsFromTemplate = function () {
            this.bacthPaymentsFromTemplateSubject.next(undefined);
        };
        return BatchOrderStateService;
    }());
    /** @nocollapse */ BatchOrderStateService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: BatchOrderStateService, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ BatchOrderStateService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: BatchOrderStateService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: BatchOrderStateService, decorators: [{
                type: i0.Injectable
            }] });

    var NavigationService = /** @class */ (function () {
        function NavigationService(routerService) {
            this.routerService = routerService;
            this.emitAfterSuccess = new rxjs.Subject();
            this.afterSuccessEmitted$ = this.emitAfterSuccess.asObservable();
        }
        NavigationService.prototype.form = function () {
            return this.routerService.navigate([exports.Routes.FORM], {
                queryParamsHandling: 'merge',
            });
        };
        NavigationService.prototype.review = function () {
            return this.routerService.navigate([exports.Routes.REVIEW], {
                queryParamsHandling: 'merge',
            });
        };
        NavigationService.prototype.afterSuccess = function () {
            this.emitAfterSuccess.next();
        };
        return NavigationService;
    }());
    /** @nocollapse */ NavigationService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NavigationService, deps: [{ token: i1__namespace$6.RouterService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ NavigationService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NavigationService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NavigationService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace$6.RouterService }]; } });

    function arrangementItemFromService(record) {
        return {
            id: record.id,
            name: record.displayName || record.bankAlias || record.name || '',
            alias: (record.userPreferences || {}).alias || record.bankAlias,
            balance: record.bookedBalance || record.availableBalance,
            bookedBalance: record.bookedBalance,
            availableBalance: record.availableBalance,
            creditLimit: record.creditLimit,
            currency: record.currency || '',
            bankBranchCode: record.bankBranchCode || '',
            BIC: record.BIC,
            IBAN: record.IBAN || record.number,
            BBAN: record.BBAN,
            externalTransferAllowed: record.externalTransferAllowed,
            urgentTransferAllowed: record.urgentTransferAllowed,
            additions: record.additions,
            productKindName: record.productKindName,
            isArrangement: true,
            defaultRecord: record,
        };
    }
    function arrangementListFromService(response, isLoadMore, totalCount) {
        if (isLoadMore === void 0) { isLoadMore = false; }
        return {
            count: totalCount || response.length,
            items: response.map(arrangementItemFromService),
            isLoadMore: isLoadMore,
        };
    }
    var accMap = function (scheme) {
        if (scheme === void 0) { scheme = 'BBAN'; }
        return function (source) { return source.pipe(operators.map(function (arrangements) { return mapArrangementList(arrangements, scheme); })); };
    };
    var mapArrangementList = function (arrangements, scheme) {
        if (scheme === void 0) { scheme = 'BBAN'; }
        return arrangements.items.map(function (arrangement) { return ({
            id: arrangement.id,
            name: arrangement.name,
            displayName: arrangement.displayName,
            alias: arrangement.alias,
            balance: arrangement.bookedBalance,
            bookedBalance: arrangement.bookedBalance,
            availableBalance: arrangement.availableBalance,
            creditLimit: arrangement.creditLimit,
            accountNumber: arrangement[scheme] || arrangement.BBAN || arrangement.IBAN || '',
            number: arrangement[scheme] || arrangement.BBAN || arrangement.IBAN || '',
            bankBranchCode: arrangement.bankBranchCode,
            BIC: arrangement.BIC,
            accountType: scheme,
            currency: arrangement.currency,
            schemeName: arrangement.IBAN ? 'IBAN' : 'BBAN',
            externalTransferAllowed: arrangement.externalTransferAllowed,
            urgentTransferAllowed: arrangement.urgentTransferAllowed,
            additions: arrangement.additions || {},
            productKindName: arrangement.productKindName,
            isArrangement: true,
            defaultRecord: arrangement.defaultRecord,
        }); });
    };
    /**
     * @deprecated
     * This will be removed in the next major version
     * Please use `mapArrangementList` instead
     */
    var mapArrangementToCreditAccount = mapArrangementList;
    var mapConnectedAccounts = function (account) { return ({
        id: account.externalAccountId,
        name: account.accountNickName || account.bankName,
        accountNumber: account.accountNumber,
        productKindName: exports.ProductKinds.connectedAccounts,
        accountType: account.accountType,
    }); };

    var fromResponse = function (response) {
        if (response.body === null) {
            throw new Error('Response body not set');
        }
        if (response.status < 200 || response.status > 299) {
            throw new Error("Server error " + response.status);
        }
        return response.body;
    };

    function contactItemFromService(contact) {
        return {
            name: contact.name,
            addressLine1: contact.addressLine1,
            addressLine2: contact.addressLine2,
            streetName: contact.streetName,
            town: contact.town,
            postCode: contact.postCode,
            countrySubDivision: contact.countrySubDivision,
            country: contact.country,
            accounts: contact.accounts.map(function (account) { return (Object.assign(Object.assign({}, account), { accountNumber: account.accountNumber || account.IBAN || '' })); }),
            id: contact.id,
        };
    }
    function mapContactAccounts(contact) {
        return contact.accounts.map(function (account) { return (Object.assign(Object.assign({ name: contact.name }, (contact.accounts.length > 1 ? { accountName: account.name } : null)), { addressLine1: contact.addressLine1, addressLine2: contact.addressLine2, streetName: contact.streetName, town: contact.town, postCode: contact.postCode, countrySubDivision: contact.countrySubDivision, country: contact.country, accounts: [
                Object.assign(Object.assign({}, account), { accountNumber: account.accountNumber || account.IBAN || '', email: account.email || contact.emailId, phoneNumber: account.phoneNumber || contact.phoneNumber }),
            ], id: contact.id })); });
    }
    function contactListFromService(response, isLoadMore) {
        if (isLoadMore === void 0) { isLoadMore = false; }
        var responseValue = fromResponse(response);
        var items = responseValue.reduce(function (acc, contact) {
            acc.push.apply(acc, __spreadArray([], __read(mapContactAccounts(contact))));
            return acc;
        }, []);
        return {
            items: items,
            itemsCount: responseValue.length,
            count: parseInt(response.headers.get('x-total-count'), 10),
            isLoadMore: isLoadMore,
        };
    }
    function contactItemToService(counterparty) {
        var name = counterparty.name, accountNumber = counterparty.accountNumber, schemeName = counterparty.schemeName, _a = counterparty.creditorBank, creditorBank = _a === void 0 ? {} : _a, _b = counterparty.postalAddress, postalAddress = _b === void 0 ? {} : _b;
        var schemeValue;
        switch (schemeName) {
            case i1.SchemeNames.EMAIL:
                schemeValue = { email: stripSpaces(accountNumber) };
                break;
            case i1.SchemeNames.MOBILE:
                schemeValue = { phoneNumber: stripSpaces(accountNumber) };
                break;
            case i1.SchemeNames.IBAN:
                schemeValue = { IBAN: stripSpaces(accountNumber) };
                break;
            default:
                schemeValue = { accountNumber: stripSpaces(accountNumber) };
        }
        return {
            name: name,
            addressLine1: postalAddress.addressLine1,
            addressLine2: postalAddress.addressLine2,
            streetName: postalAddress.streetName,
            town: postalAddress.town,
            postCode: postalAddress.postCode,
            countrySubDivision: postalAddress.countrySubDivision,
            country: postalAddress.country,
            accounts: [
                Object.assign(Object.assign({}, getBankDetails(creditorBank)), schemeValue),
            ],
        };
    }
    function getBankDetails(_a) {
        var bankCode = _a.bankBranchCode, BIC = _a.bic, bankName = _a.bankName, _b = _a.postalAddress, postalAddress = _b === void 0 ? {} : _b;
        return {
            bankCode: bankCode,
            BIC: BIC,
            bankName: bankName,
            bankAddressLine1: postalAddress.addressLine1,
            bankAddressLine2: postalAddress.addressLine2,
            bankStreetName: postalAddress.streetName,
            bankPostCode: postalAddress.postCode,
            bankTown: postalAddress.town,
            bankCountrySubDivision: postalAddress.countrySubDivision,
            bankCountry: postalAddress.country,
        };
    }

    var normalizePaymentSchedule = function (scheduleItem) {
        var _h = scheduleItem || {}, frequency = _h.frequency, endDate = _h.endDate, _j = _h.startDate, startDate = _j === void 0 ? '' : _j, repeat = _h.repeat, endType = _h.endType, every = _h.every;
        var freq = (frequency === null || frequency === void 0 ? void 0 : frequency.value) || frequency;
        return Object.assign(Object.assign({ transferFrequency: freq, every: (every || '1'), on: scheduleOn(freq, new Date(startDate)), startDate: datePart(startDate) }, (endType === 'on' && endDate && { endDate: datePart(endDate) })), (endType === 'after' && repeat && { repeat: repeat }));
    };
    //nosonar
    var toPostRequest = function (paymentItem) {
        var _h;
        var _a, _b;
        if (paymentItem[exports.PaymentBaseFields.counterparty][exports.CounterPartyFields.role] ===
            'DEBTOR') {
            paymentItem = switchPaymentParties(paymentItem);
        }
        var _j = paymentItem, _k = exports.PaymentBaseFields.counterparty, _l = _j[_k], _m = exports.CounterPartyFields.standardEntryClass, entryClass = _l[_m], _o = exports.CounterPartyFields.creditorBank, creditorBankDetails = _l[_o], _p = exports.CounterPartyFields.bankName, bankNameValue = _l[_p], _q = exports.CounterPartyFields.correspondentBank, correspondentBankDetails = _l[_q], _r = exports.CounterPartyFields.intermediaryBank, intermediaryBankDetails = _l[_r], _s = exports.CounterPartyFields.recipientId, recipientId = _l[_s], _t = exports.CounterPartyFields.accountType, accountType = _l[_t], _u = exports.CounterPartyFields.accountNumber, accountNumber = _l[_u], _v = exports.CounterPartyFields.name, counterpartyNameValue = _l[_v], _w = exports.CounterPartyFields.id, counterpartyId = _l[_w], _x = exports.CounterPartyFields.postalAddress, postalAddress = _l[_x], _y = exports.CounterPartyFields.messageToBank, messageToBank = _l[_y], _z = exports.CounterPartyFields.targetCurrency, targetCurrency = _l[_z], _0 = exports.CounterPartyFields.remittanceInformation, remittanceInfo = _l[_0], _1 = exports.CounterPartyFields.endToEndIdentification, endToEndIdentification = _l[_1], _2 = exports.CounterPartyFields.mandateIdentifier, mandateIdentifier = _l[_2], _3 = exports.CounterPartyFields.role, role = _l[_3], _4 = exports.CounterPartyFields.selectedContact, selectedContact = _l[_4], _5 = exports.CounterPartyFields.additions, creditorAdditions = _l[_5], _6 = exports.CounterPartyFields.counterpartyAccountAdditions, counterpartyAccountAdditions = _l[_6], _7 = exports.PaymentBaseFields.initiator, debitorAccount = _j[_7], _8 = exports.PaymentBaseFields.remittanceInfo, _9 = _j[_8], _10 = exports.RemittanceInfoFields.urgent, urgent = _9[_10], _11 = exports.RemittanceInfoFields.amountCurrencyGroup, _12 = _9[_11], amountValue = _12.amount, currency = _12.currency, _13 = exports.RemittanceInfoFields.paymentReference, paymentReference = _9[_13], _14 = exports.RemittanceInfoFields.purposeOfPayment, purposeOfPayment = _9[_14], _15 = exports.RemittanceInfoFields.description, description = _9[_15], _16 = exports.PaymentBaseFields.schedule, paymentSchedule = _j[_16], paymentType = _j.paymentType, approved = _j.approved, chargeBearer = _j.chargeBearer, transferFee = _j.transferFee, _17 = exports.PaymentBaseFields.additions, additions = _j[_17];
        var scheduleItem = normalizePaymentSchedule(paymentSchedule);
        var _18 = creditorBankDetails || {}, _19 = exports.CounterPartyFields.bankBranchCode, bankBranchCode = _18[_19], _20 = exports.CounterPartyFields.bic, bankBic = _18[_20], _21 = exports.CounterPartyFields.postalAddress, bankAddress = _18[_21], _22 = exports.CounterPartyFields.bankName, creditorBankName = _18[_22], _23 = exports.CounterPartyFields.additions, creditorBankAdditions = _18[_23];
        var bankName = bankNameValue || creditorBankName;
        var transferFeeValue = transferFee || {};
        var _24 = correspondentBankDetails || {}, _25 = exports.CounterPartyFields.bankBranchCode, correspondentBankBranchCode = _24[_25], _26 = exports.CounterPartyFields.bic, correspondentBankBic = _24[_26], _27 = exports.CounterPartyFields.postalAddress, correspondentBankAddress = _24[_27], _28 = exports.CounterPartyFields.bankName, correspondentBankName = _24[_28], _29 = exports.CounterPartyFields.additions, correspondentBankAdditions = _24[_29];
        var counterpartyBank = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, (bankBranchCode ? { bankBranchCode: bankBranchCode } : null)), (bankBic ? { bic: bankBic } : null)), (isObjectTruthy(bankAddress) ? { postalAddress: bankAddress } : null)), (bankName ? { name: bankName } : null)), (isObjectTruthy(creditorBankAdditions)
            ? { additions: creditorBankAdditions }
            : null));
        var _30 = intermediaryBankDetails || {}, _31 = exports.CounterPartyFields.bankBranchCode, intermediaryBankBranchCode = _30[_31], _32 = exports.CounterPartyFields.bic, intermediaryBankBic = _30[_32], _33 = exports.CounterPartyFields.postalAddress, intermediaryBankAddress = _30[_33], _34 = exports.CounterPartyFields.bankName, intermediaryBankName = _30[_34], _35 = exports.CounterPartyFields.additions, intermediaryBankAdditions = _30[_35];
        var correspondentBank = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, (correspondentBankBranchCode
            ? { bankBranchCode: correspondentBankBranchCode }
            : null)), (correspondentBankBic ? { bic: correspondentBankBic } : null)), (isObjectTruthy(correspondentBankAddress)
            ? { postalAddress: correspondentBankAddress }
            : null)), (correspondentBankName ? { name: correspondentBankName } : null)), (isObjectTruthy(correspondentBankAdditions)
            ? { additions: correspondentBankAdditions }
            : null));
        var intermediaryBank = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, (intermediaryBankBranchCode
            ? { bankBranchCode: intermediaryBankBranchCode }
            : null)), (intermediaryBankBic ? { bic: intermediaryBankBic } : null)), (isObjectTruthy(intermediaryBankAddress)
            ? { postalAddress: intermediaryBankAddress }
            : null)), (intermediaryBankName ? { name: intermediaryBankName } : null)), (isObjectTruthy(intermediaryBankAdditions)
            ? { additions: intermediaryBankAdditions }
            : null));
        var remittanceInformation = remittanceInfo || description;
        var scheduledPayment = scheduleItem && scheduleItem.transferFrequency !== 'ONCE'
            ? { paymentMode: 'RECURRING', schedule: { schedule: scheduleItem } }
            : { paymentMode: 'SINGLE', schedule: {} };
        var purposeType = ((_b = (_a = paymentItem.inputFormFromSettings) === null || _a === void 0 ? void 0 : _a.purposesOfPayment) === null || _b === void 0 ? void 0 : _b.length)
            ? 'code'
            : 'freeText';
        var creditorScheme = getCounterpartySchemeName(paymentItem);
        return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ paymentType: paymentType }, (approved ? { approved: approved } : {})), { originatorAccount: Object.assign({ identification: {
                    identification: debitorAccount.id,
                    schemeName: 'ID',
                }, name: debitorAccount.name }, (debitorAccount.additions
                ? { additions: debitorAccount.additions }
                : {})), requestedExecutionDate: datePart(paymentSchedule === null || paymentSchedule === void 0 ? void 0 : paymentSchedule.startDate), paymentMode: scheduledPayment.paymentMode }), (entryClass ? { entryClass: entryClass } : {})), { instructionPriority: urgent ? 'HIGH' : 'NORM' }), scheduledPayment.schedule), { transferTransactionInformation: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ instructedAmount: {
                    amount: amountValue,
                    currencyCode: currency,
                }, counterparty: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ name: counterpartyNameValue }, (recipientId ? { recipientId: recipientId } : {})), (isObjectTruthy(postalAddress) ? { postalAddress: postalAddress } : {})), (role ? { role: role } : {})), (isObjectTruthy(creditorAdditions)
                    ? { additions: creditorAdditions }
                    : {})), (paymentItem.isDebitPayment ? { role: 'DEBTOR' } : {})), counterpartyAccount: Object.assign(Object.assign(Object.assign({ identification: {
                        identification: creditorScheme === 'ID' || creditorScheme === 'EXTERNAL_ID'
                            ? stripSpaces(counterpartyId)
                            : stripSpaces(accountNumber),
                        schemeName: creditorScheme || 'BBAN',
                    } }, (accountType ? { accountType: accountType } : {})), (isObjectTruthy(selectedContact) ? { selectedContact: selectedContact } : {})), (isObjectTruthy(counterpartyAccountAdditions)
                    ? { additions: counterpartyAccountAdditions }
                    : {})) }, (isObjectTruthy(counterpartyBank) ? { counterpartyBank: counterpartyBank } : {})), (isObjectTruthy(correspondentBank) ? { correspondentBank: correspondentBank } : {})), (isObjectTruthy(intermediaryBank) ? { intermediaryBank: intermediaryBank } : {})), (targetCurrency ? { targetCurrency: targetCurrency } : {})), (mandateIdentifier ? { mandateIdentifier: mandateIdentifier } : {})), (endToEndIdentification ? { endToEndIdentification: endToEndIdentification } : {})), (remittanceInformation ? { remittanceInformation: remittanceInformation } : {})), (messageToBank ? { messageToBank: messageToBank } : {})), (paymentReference ? { messageToBank: paymentReference } : {})), (purposeOfPayment
                ? { purposeOfPayment: (_h = {}, _h[purposeType] = purposeOfPayment, _h) }
                : {})), (chargeBearer ? { chargeBearer: chargeBearer } : {})), (isObjectTruthy(transferFeeValue)
                ? { transferFee: Object.assign({}, transferFeeValue) }
                : {})) }), (isObjectTruthy(additions) ? { additions: additions } : {}));
    };
    var toPostPaymentTemplate = function (paymentItem) {
        var name = paymentItem[exports.PaymentTemplateFields.templateName];
        var _h = toPostRequest(paymentItem), paymentType = _h.paymentType, originatorAccount = _h.originatorAccount, instructionPriority = _h.instructionPriority, transferTransactionInformation = _h.transferTransactionInformation, entryClass = _h.entryClass, additions = _h.additions;
        return Object.assign(Object.assign(Object.assign({ name: name, paymentType: paymentType, originatorAccount: originatorAccount, transferTransactionInformation: transferTransactionInformation }, (instructionPriority ? { instructionPriority: instructionPriority } : {})), (entryClass ? { entryClass: entryClass } : {})), (isObjectTruthy(additions) ? { additions: additions } : {}));
    };
    var setMainFormDetails = function (form, paymentResponse) {
        var _h, _j, _k, _l, _m;
        var _a, _b, _c, _d, _e, _f, _g;
        var initiator = form.get(exports.PaymentBaseFields.initiator);
        var counterparty = form.get(exports.PaymentBaseFields.counterparty);
        var remittanceInfo = form.get(exports.PaymentBaseFields.remittanceInfo);
        var additions = form.get(exports.PaymentBaseFields.additions);
        var selectPaymentOption = form.get(exports.PaymentOptionFields.selectPaymentOption);
        var chargeBearer = form.get(exports.PaymentOptionFields.chargeBearer);
        var defaultAddress = {
            addressLine1: '',
            addressLine2: '',
            streetName: '',
            postCode: '',
            town: '',
            countrySubDivision: '',
            country: '',
        };
        var transferTransactionInformation = paymentResponse.transferTransactionInformation || {};
        var counterpartyAccount = transferTransactionInformation.counterpartyAccount || {};
        var counterpartyDetails = transferTransactionInformation.counterparty || {};
        var counterPartyIdentification = counterpartyAccount.identification || {};
        var counterpartyAddress = isObjectTruthy(counterpartyDetails.postalAddress)
            ? counterpartyDetails.postalAddress
            : defaultAddress;
        var originatorAccount = paymentResponse.originatorAccount || {};
        var instructedAmount = transferTransactionInformation.instructedAmount || {};
        var counterpartyBank = transferTransactionInformation.counterpartyBank || {};
        var counterpartyBankDetails = Object.assign(Object.assign(Object.assign({}, counterpartyBank), (counterpartyBank.name ? { bankName: counterpartyBank.name } : null)), {
            postalAddress: isObjectTruthy(counterpartyBank.postalAddress)
                ? counterpartyBank.postalAddress
                : defaultAddress,
        });
        var alphabetRegex = /^[a-zA-Z]*$/;
        var isIbanTransfer = counterPartyIdentification[exports.CounterPartyFields.schemeName] ===
            i1.SchemeNames.IBAN &&
            alphabetRegex.test(counterPartyIdentification.identification.substring(0, 2));
        if (!counterpartyBankDetails.postalAddress.country) {
            counterpartyBankDetails.postalAddress.country = isIbanTransfer
                ? counterPartyIdentification.identification.substring(0, 2)
                : (_a = form.get(exports.HiddenFields.defaultCountry)) === null || _a === void 0 ? void 0 : _a.value;
        }
        var correspondentBank = transferTransactionInformation.correspondentBank || {};
        var correspondentBankDetails = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, correspondentBank), (correspondentBank.name ? { bankName: correspondentBank.name } : null)), { isCorrespondentBankTransfer: isObjectTruthy(correspondentBank) }), (correspondentBank.bankBranchCode
            ? { selectAdditionalBankCodeType: 'BRANCH_CODE' }
            : null)), (_h = {}, _h[exports.CounterPartyFields.enableAdditionalBankDetails] = isObjectTruthy(correspondentBank), _h));
        var intermediaryBank = transferTransactionInformation.intermediaryBank || {};
        var intermediaryBankDetails = Object.assign(Object.assign(Object.assign(Object.assign({}, intermediaryBank), (intermediaryBank.name ? { bankName: intermediaryBank.name } : null)), (intermediaryBank.bankBranchCode
            ? { selectAdditionalBankCodeType: 'BRANCH_CODE' }
            : null)), (_j = {}, _j[exports.CounterPartyFields.enableAdditionalBankDetails] = isObjectTruthy(intermediaryBank), _j));
        var counterPartyDetails = (_k = {},
            _k[exports.CounterPartyFields.standardEntryClass] = paymentResponse.entryClass,
            _k[exports.CounterPartyFields.creditorBank] = counterpartyBankDetails,
            _k[exports.CounterPartyFields.correspondentBank] = correspondentBankDetails,
            _k[exports.CounterPartyFields.intermediaryBank] = intermediaryBankDetails,
            _k[exports.CounterPartyFields.schemeName] = counterPartyIdentification.schemeName,
            _k[exports.CounterPartyFields.recipientId] = counterpartyDetails.recipientId,
            _k[exports.CounterPartyFields.accountType] = counterpartyAccount.accountType,
            _k[exports.CounterPartyFields.accountNumber] = counterPartyIdentification.identification,
            _k[exports.CounterPartyFields.name] = counterpartyDetails.name,
            _k[exports.CounterPartyFields.postalAddress] = counterpartyAddress,
            _k[exports.CounterPartyFields.messageToBank] = transferTransactionInformation.messageToBank || '',
            _k[exports.CounterPartyFields.targetCurrency] = transferTransactionInformation.targetCurrency,
            _k[exports.CounterPartyFields.remittanceInformation] = ((_b = transferTransactionInformation
                .remittanceInformation) === null || _b === void 0 ? void 0 : _b.content)
                ? (_c = transferTransactionInformation.remittanceInformation) === null || _c === void 0 ? void 0 : _c.content
                : transferTransactionInformation.remittanceInformation || '',
            _k[exports.CounterPartyFields.endToEndIdentification] = transferTransactionInformation.endToEndIdentification,
            _k[exports.CounterPartyFields.mandateIdentifier] = transferTransactionInformation.mandateIdentifier,
            _k[exports.CounterPartyFields.role] = counterpartyDetails.role,
            _k[exports.CounterPartyFields.selectedContact] = counterpartyAccount.selectedContact || {},
            _k[exports.CounterPartyFields.id] = counterpartyAccount.arrangementId ||
                counterpartyAccount.externalArrangementId,
            _k);
        var initiatorDetails = (_l = {},
            _l[exports.InitiatorFields.id] = originatorAccount.arrangementId,
            _l[exports.InitiatorFields.name] = originatorAccount.name,
            _l[exports.InitiatorFields.accountNumber] = originatorAccount.identification &&
                originatorAccount.identification.identification,
            _l.currency = originatorAccount.currency || paymentResponse.originatorAccountCurrency,
            _l.balance = originatorAccount.balance,
            _l);
        var decimalIndex = (_d = instructedAmount.amount) === null || _d === void 0 ? void 0 : _d.indexOf('.');
        var purposeOfPayment = transferTransactionInformation.purposeOfPayment || {};
        var description = ((_e = transferTransactionInformation.remittanceInformation) === null || _e === void 0 ? void 0 : _e.content)
            ? (_f = transferTransactionInformation.remittanceInformation) === null || _f === void 0 ? void 0 : _f.content
            : transferTransactionInformation.remittanceInformation || '';
        var remittanceInfoDetails = (_m = {},
            _m[exports.RemittanceInfoFields.urgent] = paymentResponse.instructionPriority === 'HIGH',
            _m[exports.RemittanceInfoFields.amountCurrencyGroup] = {
                amount: (_g = instructedAmount.amount) === null || _g === void 0 ? void 0 : _g.slice(0, decimalIndex + 3),
                currency: instructedAmount.currencyCode,
            },
            _m[exports.RemittanceInfoFields.paymentReference] = transferTransactionInformation.messageToBank || '',
            _m[exports.RemittanceInfoFields.description] = paymentResponse.paymentReference || description,
            _m[exports.RemittanceInfoFields.purposeOfPayment] = purposeOfPayment.code || purposeOfPayment.freeText || '',
            _m);
        var setValues = function (control, obj) {
            if (control) {
                control.patchValue(obj);
            }
        };
        setValues(initiator, initiatorDetails);
        setValues(counterparty, counterPartyDetails);
        setValues(remittanceInfo, remittanceInfoDetails);
        setValues(additions, paymentResponse.additions);
        selectPaymentOption === null || selectPaymentOption === void 0 ? void 0 : selectPaymentOption.patchValue(paymentResponse.paymentType + "::" + paymentResponse.instructionPriority);
        chargeBearer === null || chargeBearer === void 0 ? void 0 : chargeBearer.patchValue(transferTransactionInformation.chargeBearer);
        return form;
    };
    var setFormDetailsFromService = function (form, payment) {
        var scheduleControl = form.get(exports.PaymentBaseFields.schedule);
        var startDateControl = scheduleControl === null || scheduleControl === void 0 ? void 0 : scheduleControl.get(exports.ScheduleFields.startDate);
        var isPaymentCopyControl = form.get(exports.HiddenFields.isPaymentCopy);
        if (payment.schedule && !(isPaymentCopyControl === null || isPaymentCopyControl === void 0 ? void 0 : isPaymentCopyControl.value)) {
            var schedule = payment.schedule;
            var freqControl = scheduleControl === null || scheduleControl === void 0 ? void 0 : scheduleControl.get(exports.ScheduleFields.frequency);
            var endTypeControl = scheduleControl === null || scheduleControl === void 0 ? void 0 : scheduleControl.get(exports.ScheduleFields.endType);
            var endDateControl = scheduleControl === null || scheduleControl === void 0 ? void 0 : scheduleControl.get(exports.ScheduleFields.endDate);
            var repeatControl = scheduleControl === null || scheduleControl === void 0 ? void 0 : scheduleControl.get(exports.ScheduleFields.repeat);
            startDateControl === null || startDateControl === void 0 ? void 0 : startDateControl.patchValue(new Date(datePart(schedule.startDate)).toISOString());
            freqControl === null || freqControl === void 0 ? void 0 : freqControl.patchValue(schedule.transferFrequency);
            endTypeControl === null || endTypeControl === void 0 ? void 0 : endTypeControl.patchValue(schedule.repeat
                ? endTypes.after
                : schedule.endDate
                    ? endTypes.on
                    : endTypes.never);
            repeatControl === null || repeatControl === void 0 ? void 0 : repeatControl.patchValue(schedule.repeat || 2);
            if (schedule.endDate) {
                startDateControl === null || startDateControl === void 0 ? void 0 : startDateControl.markAsPristine(); // to prevent overwriting endDate with calculated value
                endDateControl === null || endDateControl === void 0 ? void 0 : endDateControl.patchValue(new Date(schedule.endDate).toISOString());
            }
        }
        else if (!payment.schedule && !(isPaymentCopyControl === null || isPaymentCopyControl === void 0 ? void 0 : isPaymentCopyControl.value)) {
            startDateControl === null || startDateControl === void 0 ? void 0 : startDateControl.patchValue(new Date(payment.requestedExecutionDate || '').toISOString());
        }
        return setMainFormDetails(form, payment);
    };
    var setFormDetailsFromResponse = function (form, paymentResponse, _h) {
        var _j = _h === void 0 ? {} : _h, id = _j.id, name = _j.name;
        var paymentTemplateName = form.get(exports.PaymentTemplateFields.templateName);
        var paymentTemplateId = form.get(exports.PaymentTemplateFields.paymentTemplateId);
        paymentTemplateName === null || paymentTemplateName === void 0 ? void 0 : paymentTemplateName.patchValue(name);
        paymentTemplateId === null || paymentTemplateId === void 0 ? void 0 : paymentTemplateId.patchValue(id);
        return setMainFormDetails(form, paymentResponse);
    };
    var switchPaymentParties = function (paymentData) {
        var _h, _j, _k, _l;
        var role = exports.CounterPartyFields.role;
        var currency = exports.InitiatorFields.currency;
        var initiator = exports.PaymentBaseFields.initiator, counterparty = exports.PaymentBaseFields.counterparty;
        var _m = paymentData[initiator], _o = currency, currencyValue = _m[_o];
        var initiatorValue = Object.assign(Object.assign({}, paymentData[counterparty]), (currencyValue ? (_h = {}, _h[currency] = currencyValue, _h) : (_j = {}, _j[currency] = '', _j)));
        var counterPartyValue = Object.assign(Object.assign({}, paymentData[initiator]), (_k = {}, _k[role] = paymentData[counterparty][role], _k));
        return Object.assign(Object.assign({}, paymentData), (_l = {}, _l[initiator] = initiatorValue, _l[counterparty] = counterPartyValue, _l));
    };
    /**
     * @deprecated
     * Will be removed in widget collection v3.11.0
     */
    var updateFreqFieldOptions = function (field, isRecurrent, widgetOptions) {
        var options = __spreadArray([], __read(field.options.options));
        var isOneOffToRecurrentAllowed = widgetOptions.isOneOffToRecurrentAllowed, isRecurrentToOneOffAllowed = widgetOptions.isRecurrentToOneOffAllowed;
        if (isRecurrent && !isRecurrentToOneOffAllowed) {
            options.shift();
            field = Object.assign(Object.assign({}, field), { options: Object.assign(Object.assign({}, field.options), { options: options, defaultValue: options[0].value }) });
        }
        else if (!isRecurrent && !isOneOffToRecurrentAllowed) {
            field = Object.assign(Object.assign({}, field), { options: Object.assign(Object.assign({}, field.options), { options: [options[0]] }) });
        }
        return field;
    };

    var mapPaymentOptions = function (options, optionsLabel) {
        var e_1, _a;
        if (optionsLabel === void 0) { optionsLabel = {}; }
        var optionsArr = [];
        var paymentOptions;
        var _loop_1 = function (option) {
            paymentOptions = option.paymentOptions || [];
            paymentOptions.forEach(function (paymentOption) {
                optionsArr.push(Object.assign({ paymentType: option.paymentType, canEditCounterparty: option.canEditCounterparty, showHelperText: paymentOptions.length > 1, name: optionsLabel[option.paymentType] }, paymentOption));
            });
        };
        try {
            for (var options_1 = __values(options), options_1_1 = options_1.next(); !options_1_1.done; options_1_1 = options_1.next()) {
                var option = options_1_1.value;
                _loop_1(option);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (options_1_1 && !options_1_1.done && (_a = options_1.return)) _a.call(options_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return optionsArr;
    };

    var initialTemplatesParams = {
        from: 0,
        size: paymentTemplatesPageSize,
        intendedAction: exports.PaymentTemplateAction.CREATE,
    };
    var PaymentOrderHttpService = /** @class */ (function () {
        function PaymentOrderHttpService(paymentOrderData, paymentTemplateData, contactsData, productSummaryData, accessgroupData, notificationService, settings, paymentOrdersA2ADataHttpService, deprecationService) {
            var _this = this;
            this.paymentOrderData = paymentOrderData;
            this.paymentTemplateData = paymentTemplateData;
            this.contactsData = contactsData;
            this.productSummaryData = productSummaryData;
            this.accessgroupData = accessgroupData;
            this.notificationService = notificationService;
            this.settings = settings;
            this.paymentOrdersA2ADataHttpService = paymentOrdersA2ADataHttpService;
            this.deprecationService = deprecationService;
            this.paymentResponseSubject = new rxjs.Subject();
            this.contactsGetParams = new rxjs.BehaviorSubject({
                from: 0,
                size: contactsPageSize,
            });
            this.creditAccountsParams = new rxjs.BehaviorSubject({
                from: 0,
                creditAccount: true,
                size: arrangementsPageSize,
            });
            this.debitAccountsParams$ = new rxjs.BehaviorSubject({
                from: 0,
                debitAccount: true,
                size: arrangementsPageSize,
            });
            this.paymentTemplateParams = new rxjs.BehaviorSubject(initialTemplatesParams);
            this.creditAccountsParameters$ = this.creditAccountsParams.pipe(operators.map(this.buildArrangementsContextParameters.bind(this)));
            this.dataItemParams$ = new rxjs.Subject();
            this.loading$ = new rxjs.BehaviorSubject(true);
            this.dataItemPermissions$ = this.dataItemParams$.pipe(operators.switchMap(function (id) { return _this.handleDataItemPermissions(id); }));
            this.arrangementUserPermissions$ = this.dataItemParams$.pipe(operators.switchMap(function (id) { return _this.getArrangementUserPermission(id); }));
            this.createPermission$ = this.settings ? this.getUserPermission() : rxjs.EMPTY;
            this.paymentResponse = this.paymentResponseSubject.asObservable();
            this.debitAccounts = this.debitAccountsParams$.pipe(operators.map(this.buildArrangementsContextParameters.bind(this)), operators.exhaustMap(function (params) { return _this.fetchArrangementList(params); }), operators.shareReplay(1), operators.scan(function (acc, curr) {
                var _c = _this.debitAccountsParams$.value, merge = _c.merge, from = _c.from;
                return _this.mergeArrangementList(acc, curr, from > 0 && !!merge);
            }));
            this.contacts = this.contactsGetParams.pipe(operators.exhaustMap(function (_a) {
                var isLoadMore = _a.isLoadMore, params = __rest(_a, ["isLoadMore"]);
                return _this.contactsData.getContacts(params, 'response').pipe(operators.map(function (response) { return contactListFromService(response, isLoadMore); }), operators.catchError(function (err) { return rxjs.of(err); }));
            }), operators.shareReplay(1));
            this.creditAccounts = this.creditAccountsParameters$.pipe(operators.exhaustMap(function (params) { return _this.fetchArrangementList(params); }), operators.shareReplay(1), operators.scan(function (acc, curr) {
                var _c = _this.creditAccountsParams.value, merge = _c.merge, from = _c.from;
                return _this.mergeArrangementList(acc, curr, from > 0 && !!merge);
            }), operators.catchError(function (err) { return rxjs.of(err); }));
            this.connectedAccounts$ = this.paymentOrdersA2ADataHttpService
                .getAll('response')
                .pipe(operators.map(fromResponse), operators.map(function (res) { return res.accounts && res.accounts.filter(function (acc) { return acc.status === 'Active'; }); }), operators.shareReplay(1));
            this.paymentTemplates$ = this.paymentTemplateParams.pipe(operators.tap(function () { return _this.loading$.next(true); }), operators.debounce(function (par) { return (par.query ? rxjs.timer(1000) : rxjs.EMPTY); }), operators.switchMap(function (params) { return _this.loadPaymentTemplates(Object.assign(Object.assign({}, params), { paymentType: _this.paymentType })); }), operators.scan(function (acc, curr) { return _this.mergeResults(acc, curr); }), operators.tap(function () { return _this.loading$.next(false); }));
            this.templatesList$ = function (paymentType) { return _this.paymentTemplateData
                .getPaymentTemplates(Object.assign(Object.assign({}, initialTemplatesParams), { paymentType: paymentType }), 'response')
                .pipe(operators.map(function (response) { return response.body; })); };
            this.deprecationService.logDeprecatedFeature('"handleDataItemPermissions" method and "dataItemPermissions$" property are deprecated and will be removed in next major release');
        }
        PaymentOrderHttpService.prototype.buildArrangementsContextParameters = function (params) {
            var _a;
            return Object.assign({ resourceName: this.resourceName || defaultResourceName, businessFunction: (_a = this.arrangementBusFunctions) !== null && _a !== void 0 ? _a : this.businessFunction, privilege: this.privilege || defaultPrivilege }, params);
        };
        PaymentOrderHttpService.prototype.fetchArrangementList = function (params) {
            return this.productSummaryData.getArrangementsByBusinessFunction(params, 'response').pipe(operators.map(function (_c) {
                var headers = _c.headers, body = _c.body;
                var totalCount = headers.get('x-total-count') || '0';
                var items = body || [];
                return {
                    count: parseInt(totalCount, 10) || items.length,
                    items: items.map(arrangementItemFromService),
                };
            }));
        };
        PaymentOrderHttpService.prototype.getUserPermission = function () {
            return this.accessgroupData
                .getCheckUserPermission(Object.assign(Object.assign({}, this.settings.businessConfig), { privileges: 'create' }), 'response')
                .pipe(operators.shareReplay(1));
        };
        PaymentOrderHttpService.prototype.postPaymentOrder = function (paymentOrder) {
            return this.paymentOrderData.postPaymentOrders({ paymentOrdersPost: paymentOrder });
        };
        PaymentOrderHttpService.prototype.putPaymentOrder = function (paymentOrder, paymentOrderId) {
            return this.paymentOrderData.putPaymentOrderById({
                paymentOrderId: paymentOrderId,
                paymentOrderPut: paymentOrder,
            });
        };
        PaymentOrderHttpService.prototype.getPayment = function (id) {
            return this.paymentOrderData.getPaymentOrderById({ paymentOrderId: id }, 'response').pipe(operators.map(fromResponse));
        };
        PaymentOrderHttpService.prototype.getPaymentProgressStatus = function (paymentOrderId) {
            return this.paymentOrderData
                .getProgressStatusByPaymentOrderId({ paymentOrderId: paymentOrderId }, 'response')
                .pipe(operators.map(function (response) { return response.body; }));
        };
        PaymentOrderHttpService.prototype.handleDataItemPermissions = function (dataItemId) {
            return this.accessgroupData
                .getDataItemPermissionsContext({
                resourceName: dataItemPermissionParams.resourceName,
                privilege: dataItemPermissionParams.privilege,
                dataGroupType: dataItemPermissionParams.dataGroupType,
                dataItemId: dataItemId,
            })
                .pipe(operators.pluck(0, 'permissions'), operators.map(function (permissions) { return permissions === null || permissions === void 0 ? void 0 : permissions.map(function (permission) { return permission.businessFunction; }); }));
        };
        PaymentOrderHttpService.prototype.getArrangementUserPermission = function (id) {
            return this.accessgroupData
                .getArrangementUserPermissionCheck({
                id: id,
                resource: dataItemPermissionParams.resourceName,
                function: this.businessFunction,
                privilege: dataItemPermissionParams.privilege,
            })
                .pipe(operators.catchError(function (error) { return rxjs.of(error); }));
        };
        PaymentOrderHttpService.prototype.loadDataItemPermissions = function (id) {
            this.dataItemParams$.next(id);
        };
        PaymentOrderHttpService.prototype.ngOnDestroy = function () {
            this.paymentResponseSubject.complete();
            this.contactsGetParams.complete();
            this.creditAccountsParams.complete();
        };
        PaymentOrderHttpService.prototype.loadMoreContacts = function (page, params) {
            if (page === void 0) { page = 0; }
            this.contactsGetParams.next(Object.assign({ from: page, isLoadMore: true, size: contactsPageSize }, params));
        };
        PaymentOrderHttpService.prototype.loadMoreCreditAccounts = function (page, params) {
            if (page === void 0) { page = 0; }
            this.creditAccountsParams.next(Object.assign(Object.assign(Object.assign({ from: page, creditAccount: true }, ((params === null || params === void 0 ? void 0 : params.query) && { searchTerm: params.query })), { isLoadMore: true, size: arrangementsPageSize }), params));
        };
        PaymentOrderHttpService.prototype.fetchCreditAccounts = function (query, params) {
            if (query === void 0) { query = ''; }
            this.contactsGetParams.next(Object.assign(Object.assign(Object.assign({}, (query && { query: query })), { from: 0 }), params));
            this.creditAccountsParams.next(Object.assign(Object.assign(Object.assign({}, (query && { searchTerm: query })), { from: 0, creditAccount: true }), params));
        };
        PaymentOrderHttpService.prototype.loadMoreDebitAccounts = function (params) {
            this.debitAccountsParams$.next(Object.assign(Object.assign({}, this.debitAccountsParams$.value), params));
        };
        PaymentOrderHttpService.prototype.validatePayment = function (payment) {
            return this.paymentOrderData
                .postValidate({ paymentOrdersValidatePost: payment }, 'response')
                .pipe(operators.map(fromResponse));
        };
        PaymentOrderHttpService.prototype.saveNewContact = function (contact) {
            return this.contactsData.postContacts({ contactsPostRequestBody: contact }, 'response').pipe(operators.map(function (res) { return res.body; }), operators.catchError(function () { return rxjs.of(null); }));
        };
        PaymentOrderHttpService.prototype.postPaymentTemplate = function (requestObject) {
            var _this = this;
            return this.paymentTemplateData
                .postPaymentTemplates({ paymentTemplatesPostRequest: requestObject })
                .pipe(operators.tap(function () { return _this.loadMore(0); }));
        };
        PaymentOrderHttpService.prototype.editPaymentTemplate = function (paymentTemplateId, paymentTemplatesPutRequest) {
            return this.paymentTemplateData.putPaymentTemplateById({
                paymentTemplateId: paymentTemplateId,
                paymentTemplatesPutRequest: paymentTemplatesPutRequest,
            });
        };
        PaymentOrderHttpService.prototype.getCurrencyExchangeRate = function (currencyFrom, currencyTo) {
            return this.paymentOrderData.getRate({ currencyFrom: currencyFrom, currencyTo: currencyTo }, 'response').pipe(operators.map(function (response) { return response && response.body; }), operators.catchError(function () { return rxjs.of(null); }));
        };
        PaymentOrderHttpService.prototype.getAccountByAccountId = function (id, accountNumber) {
            return this.productSummaryData
                .getArrangementsByBusinessFunction({
                resourceName: this.resourceName || defaultResourceName,
                businessFunction: this.businessFunction,
                privilege: this.privilege || defaultPrivilege,
                searchTerm: accountNumber,
            }, 'response')
                .pipe(operators.map(fromResponse), operators.map(function (items) { return items.find(function (item) { return item.id === id; }); }), operators.map(function (item) {
                if (item) {
                    return arrangementItemFromService(item);
                }
                else {
                    throw new Error('No account found...');
                }
            }));
        };
        PaymentOrderHttpService.prototype.loadPaymentTemplates = function (params) {
            return this.paymentTemplateData.getPaymentTemplates(params, 'response').pipe(operators.map(function (response) {
                var items = response.body || [];
                return {
                    items: items,
                    totalCount: parseInt(response.headers.get('x-total-count') || '0', 10) || items.length,
                    params: params,
                };
            }));
        };
        PaymentOrderHttpService.prototype.mergeResults = function (acc, curr) {
            return {
                totalCount: curr.totalCount || curr.items.length,
                items: curr.params.from === 0 ? curr.items : __spreadArray(__spreadArray([], __read(acc.items)), __read(curr.items)),
                params: curr.params,
            };
        };
        PaymentOrderHttpService.prototype.mergeArrangementList = function (accumulator, currentValue, merge) {
            return {
                count: currentValue.count || currentValue.items.length,
                items: merge ? __spreadArray(__spreadArray([], __read(accumulator.items)), __read(currentValue.items)) : currentValue.items,
            };
        };
        PaymentOrderHttpService.prototype.loadMore = function (page) {
            var currentPage = this.paymentTemplateParams.value.from || 0;
            this.paymentTemplateParams.next(Object.assign(Object.assign({}, this.paymentTemplateParams.value), { from: currentPage + page }));
        };
        PaymentOrderHttpService.prototype.search = function (query) {
            this.paymentTemplateParams.next(Object.assign(Object.assign(Object.assign({}, this.paymentTemplateParams.value), { from: 0 }), { query: query }));
        };
        PaymentOrderHttpService.prototype.manageErrorResponse = function (response) {
            var _this = this;
            var _a, _b;
            var notification = {
                header: response.notificationHeader,
                headerContext: response.errorResponse,
                message: '',
            };
            if ((_a = response.errors) === null || _a === void 0 ? void 0 : _a.length) {
                (_b = response.errors) === null || _b === void 0 ? void 0 : _b.forEach(function (responseError) {
                    var _a;
                    (_a = response.paymentErrors) === null || _a === void 0 ? void 0 : _a.errorData.find(function (err) {
                        if (responseError.key === err.key) {
                            responseError.message = err.message;
                        }
                    });
                    if (!responseError.message && response.genericMessage) {
                        responseError.message = response.genericMessage;
                    }
                    notification.message = responseError.message;
                    _this.showNotification(false, notification);
                });
            }
            else {
                if (response.genericMessage) {
                    notification.message = response.genericMessage;
                }
                this.showNotification(false, notification);
            }
        };
        PaymentOrderHttpService.prototype.showNotification = function (success, notification) {
            this.notificationService.showNotification(Object.assign({ dismissible: true, ttl: 5000, modifier: success ? 'success' : 'error', header: '', message: '' }, notification));
        };
        PaymentOrderHttpService.prototype.getContacts = function (params) {
            this.contactsGetParams.next(Object.assign(Object.assign({}, this.contactsGetParams.value), params));
            return this.contacts;
        };
        PaymentOrderHttpService.prototype.getCreditAccounts = function (params) {
            this.creditAccountsParams.next(Object.assign(Object.assign(Object.assign({}, this.creditAccountsParams.value), ((params === null || params === void 0 ? void 0 : params.query) && { searchTerm: params.query })), params));
            return this.creditAccounts;
        };
        PaymentOrderHttpService.prototype.getDebitAccounts = function (params) {
            this.debitAccountsParams$.next(Object.assign(Object.assign({}, this.debitAccountsParams$.value), params));
            return this.debitAccounts.pipe(operators.shareReplay(1));
        };
        PaymentOrderHttpService.prototype.fetchBeneficiaries = function (params, type) {
            var from = params.from, size = params.size, query = params.query;
            switch (type) {
                case exports.BeneficiaryList.ACCOUNTS:
                    this.loadMoreCreditAccounts(from, { size: size, query: query });
                    break;
                case exports.BeneficiaryList.CONTACTS:
                    this.loadMoreContacts(from, { size: size, query: query });
                    break;
                default:
                    this.fetchCreditAccounts(query, { size: size });
                    break;
            }
        };
        return PaymentOrderHttpService;
    }());
    /** @nocollapse */ PaymentOrderHttpService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentOrderHttpService, deps: [{ token: i1__namespace$b.PaymentOrdersHttpService }, { token: i2__namespace$5.PaymentTemplatesHttpService }, { token: i3__namespace$6.ContactsHttpService }, { token: i4__namespace$2.ProductSummaryHttpService }, { token: i5__namespace$1.UsersHttpService }, { token: i1__namespace$a.NotificationService }, { token: BB_PAYORD_OMNI_PAYMENT_CONFIG_TOKEN, optional: true }, { token: i7__namespace$1.A2aClientHttpService }, { token: i1__namespace$6.DeprecationsService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ PaymentOrderHttpService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentOrderHttpService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentOrderHttpService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () {
            return [{ type: i1__namespace$b.PaymentOrdersHttpService }, { type: i2__namespace$5.PaymentTemplatesHttpService }, { type: i3__namespace$6.ContactsHttpService }, { type: i4__namespace$2.ProductSummaryHttpService }, { type: i5__namespace$1.UsersHttpService }, { type: i1__namespace$a.NotificationService }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [BB_PAYORD_OMNI_PAYMENT_CONFIG_TOKEN]
                        }] }, { type: i7__namespace$1.A2aClientHttpService }, { type: i1__namespace$6.DeprecationsService }];
        } });

    var PaymentServiceStub = /** @class */ (function () {
        function PaymentServiceStub() {
        }
        PaymentServiceStub.prototype.getPaymentOrders = function (params) {
            var response = new http.HttpResponse();
            return rxjs.of(response);
        };
        PaymentServiceStub.prototype.getPaymentDetails = function (paymentId, params) {
            return rxjs.of();
        };
        PaymentServiceStub.prototype.approvePayment = function (paymentId, comment) {
            return rxjs.of();
        };
        PaymentServiceStub.prototype.rejectPayment = function (paymentId, comment) {
            return rxjs.of();
        };
        PaymentServiceStub.prototype.postCancelPayment = function (paymentOrderId, version) {
            var response = new http.HttpResponse();
            return rxjs.of(response);
        };
        PaymentServiceStub.prototype.cancelPayment = function (paymentOrderId, version) {
            var response = new http.HttpResponse();
            return rxjs.of(response);
        };
        return PaymentServiceStub;
    }());

    var PaymentOptionsService = /** @class */ (function () {
        function PaymentOptionsService(paymentOptionsData, sanctionedCountriesService, sanctionedCurrenciesService) {
            this.paymentOptionsData = paymentOptionsData;
            this.sanctionedCountriesService = sanctionedCountriesService;
            this.sanctionedCurrenciesService = sanctionedCurrenciesService;
            this.paymentOptionsSubject$ = new rxjs.BehaviorSubject(undefined);
        }
        Object.defineProperty(PaymentOptionsService.prototype, "paymentOptions$", {
            get: function () {
                return this.paymentOptionsSubject$.asObservable();
            },
            enumerable: false,
            configurable: true
        });
        PaymentOptionsService.prototype.fetchPaymentOptions = function (payment) {
            var _this = this;
            return this.paymentOptionsData
                .postPaymentOptions({ paymentOptionsRequest: payment })
                .pipe(operators.tap(function (response) {
                _this.paymentOptionsSubject$.next(response.options || []);
            }));
        };
        PaymentOptionsService.prototype.getPaymentOptionsRecordByPaymentType = function (paymentType) {
            return this.paymentOptionsData
                .getPaymentOptionsByPaymentType({ paymentType: paymentType })
                .pipe(operators.map(function (response) { return (response && [response]) || []; }), operators.shareReplay(1));
        };
        PaymentOptionsService.prototype.getSanctionedCurrencies = function (countryIso) {
            return this.sanctionedCurrenciesService
                .getSanctionedCurrencies({ countryIso: countryIso })
                .pipe(operators.map(function (response) { return response || {}; }));
        };
        PaymentOptionsService.prototype.getSanctionedCountries = function (countryIso) {
            return this.sanctionedCountriesService
                .getSanctionedCountries({ countryIso: countryIso })
                .pipe(operators.map(function (response) { return (response === null || response === void 0 ? void 0 : response.countries) || []; }));
        };
        PaymentOptionsService.prototype.resetPaymentOptions = function () {
            this.paymentOptionsSubject$.next([]);
        };
        return PaymentOptionsService;
    }());
    /** @nocollapse */ PaymentOptionsService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentOptionsService, deps: [{ token: i1__namespace$d.PaymentOptionsHttpService }, { token: i1__namespace$d.SanctionedCountriesHttpService }, { token: i1__namespace$d.SanctionedCurrenciesHttpService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ PaymentOptionsService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentOptionsService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentOptionsService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace$d.PaymentOptionsHttpService }, { type: i1__namespace$d.SanctionedCountriesHttpService }, { type: i1__namespace$d.SanctionedCurrenciesHttpService }]; } });

    var MultiplePaymentService = /** @class */ (function () {
        function MultiplePaymentService(batchOrderService, batchTemplateService, productSummaryService) {
            this.batchOrderService = batchOrderService;
            this.batchTemplateService = batchTemplateService;
            this.productSummaryService = productSummaryService;
            this.submitting = false;
        }
        MultiplePaymentService.prototype.createFetchAccountsFactory = function (config) {
            return this._fetchAccountsFactory.bind(this, config);
        };
        MultiplePaymentService.prototype.saveBatchOrder = function (data, batchOrderID, dryRun) {
            this.submitting = true;
            var param = {
                batchOrdersPostRequest: data,
            };
            if (batchOrderID === '') {
                return this.batchOrderService
                    .postBatchOrders(param)
                    .pipe(operators.catchError(this.catchResponseError));
            }
            else {
                return this.updateBatchOrder(data, batchOrderID, dryRun);
            }
        };
        MultiplePaymentService.prototype.updateBatchOrder = function (event, batchOrderID, dryRun, intendedCreditTransactionsCount, intendedCreditAmount) {
            return this.batchOrderService
                .updateBatchOrderById({
                batchOrderId: batchOrderID,
                dryRun: dryRun,
                batchOrderPutRequest: event,
                intendedCreditAmount: intendedCreditAmount,
                intendedCreditTransactionsCount: intendedCreditTransactionsCount,
            })
                .pipe(operators.catchError(this.catchResponseError));
        };
        MultiplePaymentService.prototype.cancelDraftOrder = function (batchOrderId) {
            this.batchOrderService
                .deleteBatchOrderIdByBatchOrderId({ batchOrderId: batchOrderId })
                .pipe(operators.take(1))
                .subscribe();
        };
        MultiplePaymentService.prototype.saveDraftPayment = function (data, batchOrderID) {
            return this.batchOrderService
                .postBatchPayments({
                batchOrderId: batchOrderID,
                batchPaymentsPostRequest: data,
            })
                .pipe(operators.catchError(this.catchResponseError));
        };
        MultiplePaymentService.prototype.updatePayment = function (batchOrderID, paymentID, data) {
            return this.batchOrderService
                .putBatchPaymentById({
                batchOrderId: batchOrderID,
                batchPaymentId: paymentID,
                batchPaymentsPutRequest: data,
            })
                .pipe(operators.catchError(this.catchResponseError));
        };
        MultiplePaymentService.prototype.deletePayment = function (batchOrderId, batchPaymentId) {
            return this.batchOrderService
                .deleteBatchPaymentById({ batchOrderId: batchOrderId, batchPaymentId: batchPaymentId })
                .pipe(operators.catchError(this.catchResponseError));
        };
        MultiplePaymentService.prototype.saveAsTemplate = function (batchOrderId, name) {
            var parameter = {
                batchTemplatesPostRequest: { batchOrderId: batchOrderId, name: name },
            };
            return this.batchTemplateService
                .postBatchTemplates(parameter)
                .pipe(operators.catchError(this.catchResponseError))
                .toPromise();
        };
        MultiplePaymentService.prototype.getPayments = function (batchOrderId, options) {
            if (options === void 0) { options = { from: 0, size: 1000 }; }
            return this.batchOrderService
                .getBatchPaymentsById(Object.assign({ batchOrderId: batchOrderId }, options))
                .pipe(operators.catchError(this.catchResponseError))
                .toPromise();
        };
        MultiplePaymentService.prototype.catchResponseError = function (response) {
            switch (response.status) {
                case 400:
                    return rxjs.throwError(response.error || {
                        message: 'Unknown error',
                        errors: [{ message: 'Unknown error' }],
                    });
                case 401:
                    return rxjs.throwError({
                        type: 'TIMEOUT',
                        message: 'Session Timeout',
                        subMessage: 'Please login again.',
                    });
                default:
                    return rxjs.throwError({
                        type: 'GENERIC',
                        message: 'Unknown Error',
                        subMessage: 'Try to reload the page or contact system administrator.',
                    });
            }
        };
        MultiplePaymentService.prototype._fetchAccountsFactory = function (config) {
            var _this = this;
            var search$ = new rxjs.BehaviorSubject('');
            var items$ = search$.pipe(operators.distinctUntilChanged(), operators.debounce(function (searchTerm) { return searchTerm ? rxjs.timer(config.debounceTime || 0) : rxjs.EMPTY; }), operators.switchMap(function (searchTerm) {
                var params = Object.assign(Object.assign({}, config), (searchTerm ? { searchTerm: searchTerm } : {}));
                return _this.productSummaryService
                    .getArrangementsByBusinessFunction(params)
                    .pipe(operators.map(function (arrangements) { return arrangements.map(function (arrangement) { return ({
                    id: arrangement.id,
                    name: arrangement.name || '',
                    alias: (arrangement.userPreferences || {}).alias ||
                        arrangement.bankAlias,
                    balance: arrangement.availableBalance || arrangement.bookedBalance,
                    bookedBalance: arrangement.bookedBalance,
                    availableBalance: arrangement.availableBalance,
                    creditLimit: arrangement.creditLimit,
                    currency: arrangement.currency || '',
                    IBAN: arrangement.IBAN || arrangement.number,
                    BBAN: arrangement.BBAN,
                    accountNumber: arrangement.BBAN || arrangement.IBAN || '',
                    number: arrangement.BBAN || '',
                    bankBranchCode: arrangement.bankBranchCode,
                    externalTransferAllowed: arrangement.externalTransferAllowed,
                    urgentTransferAllowed: arrangement.urgentTransferAllowed,
                    additions: arrangement.additions,
                    productKindName: arrangement.productKindName,
                    originalArrangement: arrangement,
                }); }); }));
            }));
            return {
                search$: search$,
                items$: items$,
            };
        };
        return MultiplePaymentService;
    }());
    /** @nocollapse */ MultiplePaymentService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: MultiplePaymentService, deps: [{ token: i1__namespace$e.BatchOrdersHttpService }, { token: i2__namespace$6.BatchTemplatesHttpService }, { token: i4__namespace$2.ProductSummaryHttpService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ MultiplePaymentService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: MultiplePaymentService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: MultiplePaymentService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$e.BatchOrdersHttpService }, { type: i2__namespace$6.BatchTemplatesHttpService }, { type: i4__namespace$2.ProductSummaryHttpService }]; } });

    function objectHasValue(input) {
        for (var property in input) {
            if (typeof input[property] === 'object') {
                return objectHasValue(input[property]);
            }
            else if (input[property]) {
                return true;
            }
        }
        return false;
    }
    function objectsHasValueByKey(obj, keys) {
        if (!obj) {
            return;
        }
        return keys.reduce(function (acc, key, index) {
            if (!acc || !acc.hasOwnProperty(key)) {
                return false;
            }
            var isLast = keys.length - 1 === index;
            if (isLast && typeof acc[key] === 'object') {
                return objectHasValue(acc[key]) && acc[key];
            }
            return acc[key];
        }, obj);
    }

    var HasValuePipe = /** @class */ (function () {
        function HasValuePipe() {
        }
        HasValuePipe.prototype.transform = function (data, compareTo, keys) {
            return Boolean(objectsHasValueByKey(data, keys) || objectsHasValueByKey(compareTo, keys));
        };
        return HasValuePipe;
    }());
    /** @nocollapse */ HasValuePipe.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: HasValuePipe, deps: [], target: i0__namespace.ɵɵFactoryTarget.Pipe });
    /** @nocollapse */ HasValuePipe.ɵpipe = i0__namespace.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: HasValuePipe, name: "hasValue" });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: HasValuePipe, decorators: [{
                type: i0.Pipe,
                args: [{
                        name: 'hasValue',
                    }]
            }] });

    var HasValueModule = /** @class */ (function () {
        function HasValueModule() {
        }
        return HasValueModule;
    }());
    /** @nocollapse */ HasValueModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: HasValueModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ HasValueModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: HasValueModule, declarations: [HasValuePipe], imports: [i2.CommonModule], exports: [HasValuePipe] });
    /** @nocollapse */ HasValueModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: HasValueModule, imports: [[i2.CommonModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: HasValueModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [HasValuePipe],
                        exports: [HasValuePipe],
                        imports: [i2.CommonModule],
                    }]
            }] });

    function getAccountHolderAddress(account) {
        if (account === void 0) { account = {}; }
        return {
            addressLine1: account.accountHolderAddressLine1 || '',
            addressLine2: account.accountHolderAddressLine2 || '',
            streetName: account.accountHolderStreetName || '',
            town: account.accountHolderTown || '',
            postCode: account.accountHolderPostCode || '',
            countrySubDivision: account.accountHolderCountrySubDivision || '',
            country: account.accountHolderCountry || '',
        };
    }
    function getContactBankAddress(account) {
        if (account === void 0) { account = {}; }
        return {
            addressLine1: account.bankAddressLine1 || '',
            addressLine2: account.bankAddressLine2 || '',
            streetName: account.bankStreetName || '',
            town: account.bankTown || '',
            postCode: account.bankPostCode || '',
            countrySubDivision: account.bankCountrySubDivision || '',
            country: account.bankCountry || '',
        };
    }

    var handleCurrenciesList = function (currencies) {
        var res = {};
        var labeled = currencies.labeled;
        if (labeled) {
            var popular = labeled.popular || [];
            var normal = labeled.normal || [];
            var currenciesExtendedList = popular.concat(normal);
            res.dividerIndex = popular.length ? popular.length - 1 : undefined;
            res.currencies = currenciesExtendedList.map(function (item) { return item.code; });
            res.decimals = currenciesExtendedList.reduce(function (acc, val) {
                acc[val.code] = val.decimals;
                return acc;
            }, {});
            if (currencies.default) {
                var defaultCode = currencies.default.code;
                res.currencies.splice(res.currencies.indexOf(defaultCode), 1);
                res.currencies.unshift(defaultCode);
            }
        }
        return res;
    };
    var getForexDetailsFromPayment = function (payment) {
        var rate = payment.exchangeRate;
        var amountValue = new BigNumber__default["default"](payment.remittanceInfo.amountGroup.amount);
        var calculatedAmount = amountValue.dividedBy(rate).toString();
        if (rate && rate !== 0) {
            return {
                fromCurrency: payment.initiator.currency,
                toCurrency: payment.remittanceInfo.amountGroup.currency,
                calculatedAmount: calculatedAmount,
                rate: rate,
            };
        }
        return {
            fromCurrency: payment.initiator.currency,
            toCurrency: payment.remittanceInfo.amountGroup.currency,
        };
    };

    function triggerPaymentHook(hooks, hookName, callback, formGroup) {
        var hook = hooks && hooks[hookName];
        var doneFn = callback;
        if (typeof hook === 'function') {
            if (hookName === exports.PaymentHooks.onSave ||
                hookName === exports.PaymentHooks.onSubmit) {
                hook({
                    doneFn: doneFn,
                    form: formGroup, // The entire payment form
                });
            }
            else {
                hook();
            }
        }
    }

    exports.PaymentActionsTypes = void 0;
    (function (PaymentActionsTypes) {
        PaymentActionsTypes["LoadPayments"] = "LoadPayments";
        PaymentActionsTypes["RefreshPayments"] = "RefreshPayments";
        PaymentActionsTypes["LoadMore"] = "LoadMore";
        PaymentActionsTypes["SelectAccount"] = "SelectAccount";
        PaymentActionsTypes["ChangePage"] = "ChangePage";
        PaymentActionsTypes["Search"] = "Search";
    })(exports.PaymentActionsTypes || (exports.PaymentActionsTypes = {}));

    var ChecksService = /** @class */ (function () {
        function ChecksService(model, stopChecksDataHttpService) {
            this.model = model;
            this.stopChecksDataHttpService = stopChecksDataHttpService;
            this.loadingSub$ = new rxjs.ReplaySubject(1);
            this.loading$ = this.loadingSub$.pipe(operators.distinctUntilChanged());
        }
        Object.defineProperty(ChecksService.prototype, "loading", {
            set: function (val) {
                this.loadingSub$.next(val);
            },
            enumerable: false,
            configurable: true
        });
        ChecksService.prototype.getStopChecks = function (params) {
            var _this = this;
            this.loading = true;
            return this.stopChecksDataHttpService
                .getStopChecks(params, 'response')
                .pipe(operators.map(fromResponse), operators.finalize(function () {
                _this.loading = false;
            }));
        };
        ChecksService.prototype.postStopChecks = function (payload) {
            var _this = this;
            this.loading = true;
            return this.stopChecksDataHttpService
                .postStopChecks({ stopCheckPostRequest: payload }, 'response')
                .pipe(operators.map(fromResponse), operators.finalize(function () {
                _this.loading = false;
            }));
        };
        return ChecksService;
    }());
    /** @nocollapse */ ChecksService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ChecksService, deps: [{ token: i1__namespace$6.ItemModel, optional: true }, { token: i2__namespace$7.StopChecksHttpService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ ChecksService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ChecksService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ChecksService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () {
            return [{ type: i1__namespace$6.ItemModel, decorators: [{
                            type: i0.Optional
                        }] }, { type: i2__namespace$7.StopChecksHttpService }];
        } });

    var PaymentOrdersHttpService = /** @class */ (function () {
        function PaymentOrdersHttpService(paymentsDataHttpService) {
            this.paymentsDataHttpService = paymentsDataHttpService;
        }
        PaymentOrdersHttpService.prototype.approvalsServiceCall = function (paymentId, approvalStatus, comment) {
            return this.paymentsDataHttpService
                .putApprovalsByPaymentOrderId({
                paymentOrderId: paymentId,
                paymentOrderApprovalPutRequest: Object.assign({ approvalStatus: approvalStatus }, (!!comment && { comment: comment })),
            }, 'response')
                .pipe(operators.map(fromResponse));
        };
        PaymentOrdersHttpService.prototype.bulkApprovalsServiceCall = function (paymentOrderIds, approvalStatus, comment) {
            return this.paymentsDataHttpService
                .putBulkApprovals({
                bulkPaymentOrdersApprovalPutRequest: Object.assign({ approvalStatus: approvalStatus, paymentOrderIds: paymentOrderIds }, (!!comment && { comment: comment })),
            }, 'response')
                .pipe(operators.map(fromResponse));
        };
        PaymentOrdersHttpService.prototype.loadPayments = function (params) {
            return this.getPaymentOrders(params).pipe(operators.map(function (response) {
                var totalCount = response.headers.get('x-total-count');
                return {
                    totalCount: Number(totalCount),
                    items: response.body || [],
                };
            }));
        };
        PaymentOrdersHttpService.prototype.getPaymentOrders = function (params) {
            return this.paymentsDataHttpService.getPaymentOrders(params, 'response');
        };
        PaymentOrdersHttpService.prototype.getPayment = function (id, params) {
            return this.paymentsDataHttpService
                .getPaymentOrderById(Object.assign({ paymentOrderId: id }, params), 'response')
                .pipe(operators.map(fromResponse));
        };
        PaymentOrdersHttpService.prototype.cancelPayment = function (paymentOrderId, version) {
            return this.paymentsDataHttpService.deletePaymentOrderById({
                paymentOrderId: paymentOrderId,
                version: version,
            });
        };
        PaymentOrdersHttpService.prototype.postPaymentCancel = function (paymentOrderId, version) {
            return this.paymentsDataHttpService.postCancelByPaymentOrderId({
                paymentOrderId: paymentOrderId,
                paymentOrderCancelPostRequest: { version: version },
            }, 'response');
        };
        PaymentOrdersHttpService.prototype.getCurrencyExchangeRate = function (currencyFrom, currencyTo) {
            return this.paymentsDataHttpService.getRate({ currencyFrom: currencyFrom, currencyTo: currencyTo }, 'response');
        };
        PaymentOrdersHttpService.prototype.approvePayment = function (paymentId, comment) {
            return this.approvalsServiceCall(paymentId, exports.Actions.APPROVE, comment);
        };
        PaymentOrdersHttpService.prototype.bulkApprovePayments = function (paymentIds, comment) {
            return this.bulkApprovalsServiceCall(paymentIds, exports.Actions.APPROVE, comment);
        };
        PaymentOrdersHttpService.prototype.rejectPayment = function (paymentId, comment) {
            return this.approvalsServiceCall(paymentId, exports.Actions.REJECT, comment);
        };
        PaymentOrdersHttpService.prototype.bulkRejectPayments = function (paymentIds, comment) {
            return this.bulkApprovalsServiceCall(paymentIds, exports.Actions.REJECT, comment);
        };
        PaymentOrdersHttpService.prototype.validatePayment = function (payment) {
            return this.paymentsDataHttpService
                .postValidate({ paymentOrdersValidatePost: payment }, 'response')
                .pipe(operators.map(fromResponse));
        };
        return PaymentOrdersHttpService;
    }());
    /** @nocollapse */ PaymentOrdersHttpService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentOrdersHttpService, deps: [{ token: i1__namespace$b.PaymentOrdersHttpService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ PaymentOrdersHttpService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentOrdersHttpService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentOrdersHttpService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace$b.PaymentOrdersHttpService }]; } });

    var DEFAULT_PAYMENT_PARAMS = new i0.InjectionToken('default Payments Params');

    var PaymentService = /** @class */ (function () {
        function PaymentService(paymentOrdersService, model, defaultPaymentsParams) {
            var _this = this;
            var _a;
            this.paymentOrdersService = paymentOrdersService;
            this.model = model;
            this.defaultPaymentsParams = defaultPaymentsParams;
            this.destroy$ = new rxjs.Subject();
            this.selectedAccount$ = new rxjs.Subject();
            this.search$ = new rxjs.Subject();
            this.changePage$ = new rxjs.Subject();
            this.loadMore$ = new rxjs.Subject();
            this.loadPayments$ = new rxjs.ReplaySubject(1);
            this.refreshPayments$ = new rxjs.Subject();
            this.sortPayments$ = new rxjs.Subject();
            this.loadingSub$ = new rxjs.ReplaySubject(1);
            this.actingSub$ = new rxjs.ReplaySubject(1);
            this.pageSizeIM$ = ((_a = this.model) === null || _a === void 0 ? void 0 : _a.property('pageSize')) || rxjs.of(null);
            this.loading$ = this.loadingSub$.pipe(operators.distinctUntilChanged());
            this.acting$ = this.actingSub$.pipe(operators.distinctUntilChanged());
            this.pageSizeSub$ = new rxjs.BehaviorSubject(undefined);
            this.debitMode$ = new rxjs.BehaviorSubject(undefined);
            this.pageSize$ = this.pageSizeSub$.asObservable().pipe(operators.withLatestFrom(this.pageSizeIM$), operators.map(function (_b) {
                var _c = __read(_b, 2), pageSize = _c[0], pageSizeIM = _c[1];
                //TODO: remove it when migration on journeys for payments will be done
                return pageSize === undefined
                    ? pageSizeIM || _this.defaultPaymentsParams.size
                    : pageSize;
            }));
            this.loadingCalls = 0;
            this.actingCalls = 0;
            this.paymentsActions$ = rxjs.merge(this.loadPayments$.pipe(operators.map(function (paymentMode) { return ({
                type: exports.PaymentActionsTypes.LoadPayments,
                paymentMode: paymentMode,
            }); })), this.refreshPayments$.pipe(operators.mapTo({ type: exports.PaymentActionsTypes.RefreshPayments })), this.changePage$.pipe(operators.map(function (from) { return ({ type: exports.PaymentActionsTypes.ChangePage, from: from }); })), this.loadMore$.pipe(operators.map(function (from) { return ({ type: exports.PaymentActionsTypes.LoadMore, from: from }); })), this.selectedAccount$.pipe(operators.map(function (query) { return ({ type: exports.PaymentActionsTypes.SelectAccount, query: query }); })), this.sortPayments$.pipe(operators.map(function (sortParams) { return (Object.assign({ type: exports.PaymentActionsTypes.SelectAccount }, sortParams)); })), this.search$.pipe(operators.map(function (params) { return (Object.assign({ type: exports.PaymentActionsTypes.Search }, params)); })));
            this.paymentState$ = this.paymentsActions$.pipe(operators.withLatestFrom(this.pageSize$, this.debitMode$), operators.map(function (_b) {
                var _c = __read(_b, 3), state = _c[0], pageSize = _c[1], isDebitMode = _c[2];
                return (Object.assign(Object.assign({}, state), { pageSize: pageSize, isDebitMode: isDebitMode }));
            }), //TODO: remove it when migration on journeys for payments will be done
            operators.scan(function (state, action) { return (Object.assign(Object.assign({}, state), action)); }), operators.map(function (state) { return (Object.assign(Object.assign({}, _this.defaultPaymentsParams), state)); }), operators.map(function (_a) {
                var pageSize = _a.pageSize, isDebitMode = _a.isDebitMode, state = __rest(_a, ["pageSize", "isDebitMode"]);
                var isRefresh = state.type === 'RefreshPayments';
                var size = pageSize || 50;
                var from = state.from || 0;
                return Object.assign(Object.assign(Object.assign({}, state), { size: isRefresh ? size * (from + 1) : size, from: isRefresh ? 0 : from }), (isDebitMode ? { paymentTypeGroup: 'Debit' } : null));
            }), operators.filter(function (action) { return action.type !== undefined; }), operators.shareReplay(1));
            this.paymentsEffect$ = this.paymentState$.pipe(operators.switchMap(function (_a) {
                var type = _a.type, params = __rest(_a, ["type"]);
                var isActing = type === exports.PaymentActionsTypes.SelectAccount;
                var isLoadMore = type === exports.PaymentActionsTypes.LoadMore;
                isActing ? (_this.acting = true) : (_this.loading = true);
                return _this.paymentOrdersService.loadPayments(params).pipe(operators.map(function (response) { return (Object.assign(Object.assign({}, response), { isLoadMore: isLoadMore })); }), operators.finalize(function () { return isActing ? (_this.acting = false) : (_this.loading = false); }));
            }), operators.takeUntil(this.destroy$), operators.shareReplay(1));
            this.paymentsStateSource$ = new rxjs.BehaviorSubject(undefined);
            this.paymentsEffect$.subscribe(function (payload) { return _this.handlePaymentSuccess(payload); }, function (error) { return _this.paymentsStateSource$.error(error); });
        }
        Object.defineProperty(PaymentService.prototype, "loading", {
            set: function (val) {
                val ? this.loadingCalls++ : this.loadingCalls--;
                this.loadingSub$.next(this.loadingCalls > 0);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PaymentService.prototype, "acting", {
            set: function (val) {
                val ? this.actingCalls++ : this.actingCalls--;
                this.actingSub$.next(this.actingCalls > 0);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PaymentService.prototype, "payments$", {
            get: function () {
                return this.paymentsStateSource$.asObservable();
            },
            enumerable: false,
            configurable: true
        });
        PaymentService.prototype.handlePaymentSuccess = function (payload) {
            var orders = [];
            if (payload.isLoadMore) {
                orders.push.apply(orders, __spreadArray([], __read(this.handleLoadMore())));
            }
            this.paymentsStateSource$.next({
                items: __spreadArray(__spreadArray([], __read(orders)), __read(payload.items)),
                totalCount: payload.totalCount || payload.items.length,
            });
        };
        PaymentService.prototype.handleLoadMore = function () {
            var existingPayments = this.paymentsStateSource$.getValue();
            return existingPayments ? existingPayments.items : [];
        };
        PaymentService.prototype.loadPayments = function (paymentMode) {
            this.loadPayments$.next(paymentMode);
        };
        PaymentService.prototype.refreshPayments = function () {
            this.refreshPayments$.next();
        };
        PaymentService.prototype.loadMore = function (from) {
            this.loadMore$.next(from);
        };
        PaymentService.prototype.changePage = function (from) {
            this.changePage$.next(from);
        };
        PaymentService.prototype.sortPayments = function (orderBy, direction) {
            this.sortPayments$.next({ orderBy: orderBy, direction: direction });
        };
        PaymentService.prototype.setPageSize = function (value) {
            this.pageSizeSub$.next(value);
        };
        PaymentService.prototype.setDebitMode = function (value) {
            this.debitMode$.next(value);
        };
        PaymentService.prototype.cancelPayment = function (paymentOrderId, version) {
            var _this = this;
            this.acting = true;
            return this.paymentOrdersService
                .cancelPayment(paymentOrderId, version)
                .pipe(operators.finalize(function () { return (_this.acting = false); }), operators.tap(function () {
                _this.handleCancelPaymentSuccess(paymentOrderId);
            }));
        };
        PaymentService.prototype.handleCancelPaymentSuccess = function (paymentOrderId) {
            var payments = this.paymentsStateSource$.getValue();
            if (payments) {
                var newItems = payments.items.filter(function (item) { return item.id !== paymentOrderId; });
                this.paymentsStateSource$.next({
                    items: newItems,
                    totalCount: payments.totalCount,
                });
            }
        };
        PaymentService.prototype.getCurrencyExchangeRate = function (currencyFrom, currencyTo) {
            if (currencyFrom === void 0) { currencyFrom = 'EUR'; }
            if (currencyTo === void 0) { currencyTo = 'USD'; }
            return this.paymentOrdersService.getCurrencyExchangeRate(currencyFrom, currencyTo);
        };
        PaymentService.prototype.getPaymentOrders = function (params) {
            return this.paymentOrdersService.getPaymentOrders(params);
        };
        PaymentService.prototype.getPaymentDetails = function (paymentId, params) {
            return this.paymentOrdersService.getPayment(paymentId, params);
        };
        PaymentService.prototype.approvePayment = function (paymentId, comment) {
            return this.paymentOrdersService.approvePayment(paymentId, comment);
        };
        PaymentService.prototype.bulkApprovePayments = function (paymentIds, comment) {
            return this.paymentOrdersService.bulkApprovePayments(paymentIds, comment);
        };
        PaymentService.prototype.rejectPayment = function (paymentId, comment) {
            return this.paymentOrdersService.rejectPayment(paymentId, comment);
        };
        PaymentService.prototype.bulkRejectPayments = function (paymentIds, comment) {
            return this.paymentOrdersService.bulkRejectPayments(paymentIds, comment);
        };
        PaymentService.prototype.searchPayments = function (query) {
            this.search$.next({ query: query, from: 0 });
        };
        PaymentService.prototype.applyFilter = function (_a) {
            var amount = _a.amount, executionDate = _a.executionDate, rest = __rest(_a, ["amount", "executionDate"]);
            var retVal = Object.assign(Object.assign({}, rest), { from: 0 });
            if (!retVal.status) {
                retVal.status = [];
            }
            retVal.amountFrom = amount.from || '';
            retVal.amountTo = amount.to || '';
            retVal.executionDateFrom =
                executionDate && executionDate.from ? datePart(executionDate.from) : '';
            retVal.executionDateTo =
                executionDate && executionDate.to ? datePart(executionDate.to) : '';
            this.search$.next(retVal);
        };
        PaymentService.prototype.postCancelPayment = function (paymentOrderId, version) {
            var _this = this;
            this.acting = true;
            return this.paymentOrdersService
                .postPaymentCancel(paymentOrderId, version)
                .pipe(operators.finalize(function () { return (_this.acting = false); }), operators.tap(function () {
                _this.handleCancelPaymentSuccess(paymentOrderId);
            }));
        };
        PaymentService.prototype.validatePayment = function (payment) {
            return this.paymentOrdersService.validatePayment(payment);
        };
        PaymentService.prototype.ngOnDestroy = function () {
            // clean up our subjects
            this.destroy$.complete();
            this.loadMore$.complete();
            this.changePage$.complete();
            this.selectedAccount$.complete();
            this.search$.complete();
            this.loadPayments$.complete();
            this.refreshPayments$.complete();
        };
        return PaymentService;
    }());
    /** @nocollapse */ PaymentService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentService, deps: [{ token: PaymentOrdersHttpService }, { token: i1__namespace$6.ItemModel, optional: true }, { token: DEFAULT_PAYMENT_PARAMS }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ PaymentService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () {
            return [{ type: PaymentOrdersHttpService }, { type: i1__namespace$6.ItemModel, decorators: [{
                            type: i0.Optional
                        }] }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [DEFAULT_PAYMENT_PARAMS]
                        }] }];
        } });
    var providePaymentServices = [
        { provide: PaymentOrdersHttpService, useClass: PaymentOrdersHttpService },
        {
            provide: PaymentService,
            useClass: PaymentService,
            deps: [PaymentOrdersHttpService, i1$7.ItemModel, DEFAULT_PAYMENT_PARAMS],
        },
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    Object.defineProperty(exports, 'PaymentOrdersService', {
        enumerable: true,
        get: function () { return i1.PaymentOrdersHttpService; }
    });
    exports.ACH_DEBIT = ACH_DEBIT;
    exports.AccountFormatterPipe = AccountFormatterPipe;
    exports.BATCH_INTERNAL_TRANSFERS = BATCH_INTERNAL_TRANSFERS;
    exports.BBHighlightPipe = BBHighlightPipe;
    exports.BB_CLOSED_PAYMENT_BUS_FN_SUFFIX = BB_CLOSED_PAYMENT_BUS_FN_SUFFIX;
    exports.BB_INTRACOMPANY_PAYMENT_BUS_FN_SUFFIX = BB_INTRACOMPANY_PAYMENT_BUS_FN_SUFFIX;
    exports.BB_MULTI_PAYMENT_CONFIG = BB_MULTI_PAYMENT_CONFIG;
    exports.BB_PAYMENT_CONFIG = BB_PAYMENT_CONFIG;
    exports.BB_PAYORD_OMNI_PAYMENT_CONFIG_TOKEN = BB_PAYORD_OMNI_PAYMENT_CONFIG_TOKEN;
    exports.BB_PAYORD_PAYMENT_ERROR_MESSAGES_TOKEN = BB_PAYORD_PAYMENT_ERROR_MESSAGES_TOKEN;
    exports.BB_REGISTERED_PAYMENT_CONFIGS = BB_REGISTERED_PAYMENT_CONFIGS;
    exports.BatchOrderStateService = BatchOrderStateService;
    exports.BeneficiarySelectorUIModule = BeneficiarySelectorUIModule;
    exports.BreachLimitError = BreachLimitError;
    exports.BytesPipe = BytesPipe;
    exports.CHAPS = CHAPS;
    exports.ChecksService = ChecksService;
    exports.CountriesMap = CountriesMap;
    exports.CurrenciesMap = CurrenciesMap;
    exports.CurrencyToCountryMap = CurrencyToCountryMap;
    exports.DEFAULT_PAYMENT_PARAMS = DEFAULT_PAYMENT_PARAMS;
    exports.DefaultClosedPaymentBusFnSuffix = DefaultClosedPaymentBusFnSuffix;
    exports.DefaultDebounceTime = DefaultDebounceTime;
    exports.DefaultIntraCompanyPaymentBusFnSuffix = DefaultIntraCompanyPaymentBusFnSuffix;
    exports.ExportPdfDirective = ExportPdfDirective;
    exports.ExportPdfModule = ExportPdfModule;
    exports.HasValueModule = HasValueModule;
    exports.INTERNAL_TRANSFER = INTERNAL_TRANSFER;
    exports.INTERNAL_TRANSFER_BUSINESS = INTERNAL_TRANSFER_BUSINESS;
    exports.INTERNATIONAL_TRANSFER = INTERNATIONAL_TRANSFER;
    exports.INTRABANK_TRANSFER = INTRABANK_TRANSFER;
    exports.MANUAL_BATCHES = MANUAL_BATCHES;
    exports.MULTIPLE_PAYMENT = MULTIPLE_PAYMENT;
    exports.MultiplePaymentService = MultiplePaymentService;
    exports.NavigationService = NavigationService;
    exports.OOTBPaymentTypes = OOTBPaymentTypes;
    exports.OOTB_PAYMENT_CONFIGS = OOTB_PAYMENT_CONFIGS;
    exports.P2P_TRANSFER = P2P_TRANSFER;
    exports.PaymentConfigService = PaymentConfigService;
    exports.PaymentOptionsService = PaymentOptionsService;
    exports.PaymentOrderHttpService = PaymentOrderHttpService;
    exports.PaymentOrdersBadRequest = PaymentOrdersBadRequest;
    exports.PaymentOrdersHttpService = PaymentOrdersHttpService;
    exports.PaymentOrdersUiModule = PaymentOrdersUiModule;
    exports.PaymentService = PaymentService;
    exports.PaymentServiceStub = PaymentServiceStub;
    exports.PaymentsSrSearchResultInfoComponent = PaymentsSrSearchResultInfoComponent;
    exports.PaymentsSrSearchResultInfoModule = PaymentsSrSearchResultInfoModule;
    exports.PayordOmniPaymentConfigProvider = PayordOmniPaymentConfigProvider;
    exports.PayordPaymentErrorsConfigProvider = PayordPaymentErrorsConfigProvider;
    exports.PayordStatusBadgeComponent = PayordStatusBadgeComponent;
    exports.PayordStatusBadgeModule = PayordStatusBadgeModule;
    exports.RelativeDatePipe = RelativeDatePipe;
    exports.RoutableModalParamName = RoutableModalParamName;
    exports.RoutableModalService = RoutableModalService;
    exports.SEPA = SEPA;
    exports.STEPPER_CONFIG = STEPPER_CONFIG;
    exports.ScheduleComponent = ScheduleComponent;
    exports.ScheduleCustomizableDirective = ScheduleCustomizableDirective;
    exports.SearchMinLength = SearchMinLength;
    exports.SepaCountries = SepaCountries;
    exports.StateService = StateService;
    exports.THEME_V2 = THEME_V2;
    exports.UK_FASTER_PAYMENT = UK_FASTER_PAYMENT;
    exports.USStates = USStates;
    exports.US_ACH_CREDIT = US_ACH_CREDIT;
    exports.US_DOMESTIC_WIRE = US_DOMESTIC_WIRE;
    exports.US_States = US_States;
    exports.UnknownError = UnknownError;
    exports.accMap = accMap;
    exports.accountsValidation = accountsValidation;
    exports.addressToString = addressToString;
    exports.amountGreaterThanZero = amountGreaterThanZero;
    exports.amountValidator = amountValidator;
    exports.arrangementItemFromService = arrangementItemFromService;
    exports.arrangementListFromService = arrangementListFromService;
    exports.arrangementsPageSize = arrangementsPageSize;
    exports.bicCodeValidationPattern = bicCodeValidationPattern;
    exports.canCopyPayment = canCopyPayment;
    exports.cloneFormFieldOptions = cloneFormFieldOptions;
    exports.clonePaymentConfig = clonePaymentConfig;
    exports.clonePaymentFormItem = clonePaymentFormItem;
    exports.contactItemFromService = contactItemFromService;
    exports.contactItemToService = contactItemToService;
    exports.contactListFromService = contactListFromService;
    exports.contactsPageSize = contactsPageSize;
    exports.currencyValidatorFactory = currencyValidatorFactory;
    exports.dataItemPermissionParams = dataItemPermissionParams;
    exports.datePart = datePart;
    exports.defaultBeneficiaryTabsConfig = defaultBeneficiaryTabsConfig;
    exports.defaultCounterPartyConfig = defaultCounterPartyConfig;
    exports.defaultInitiatorConfig = defaultInitiatorConfig;
    exports.defaultPaymentSuccessEventName = defaultPaymentSuccessEventName;
    exports.defaultPrivilege = defaultPrivilege;
    exports.defaultRemittanceInfoConfig = defaultRemittanceInfoConfig;
    exports.defaultResourceName = defaultResourceName;
    exports.defaultScheduleConfig = defaultScheduleConfig;
    exports.endDateAfterStartDateValidator = endDateAfterStartDateValidator;
    exports.endTypes = endTypes;
    exports.filterObjectValues = filterObjectValues;
    exports.focusChildElement = focusChildElement;
    exports.focusErrorElement = focusErrorElement;
    exports.forbiddenStatus = forbiddenStatus;
    exports.frequencies = frequencies;
    exports.fromResponse = fromResponse;
    exports.getAccountHolderAddress = getAccountHolderAddress;
    exports.getBankDetails = getBankDetails;
    exports.getConfig = getConfig;
    exports.getContactBankAddress = getContactBankAddress;
    exports.getCounterpartySchemeName = getCounterpartySchemeName;
    exports.getDateOnly = getDateOnly;
    exports.getEndDate = getEndDate;
    exports.getForexDetailsFromPayment = getForexDetailsFromPayment;
    exports.getIconByPaymnentType = getIconByPaymnentType;
    exports.getLabelFromPaymentConfig = getLabelFromPaymentConfig;
    exports.getRelativeDate = getRelativeDate;
    exports.handleCurrenciesList = handleCurrenciesList;
    exports.hasCreatePermission = hasCreatePermission;
    exports.ibanCountryValidator = ibanCountryValidator;
    exports.internalTransAmountOptToggleDependants = internalTransAmountOptToggleDependants;
    exports.internalTransScheduleStartDateOnInitHook = internalTransScheduleStartDateOnInitHook;
    exports.internalTransferEndTypeOnInitHook = internalTransferEndTypeOnInitHook;
    exports.internalTransferOnDestroyHook = internalTransferOnDestroyHook;
    exports.internalTransferRepeatOnInitHook = internalTransferRepeatOnInitHook;
    exports.internalTransferScheduleAlertOnInitHook = internalTransferScheduleAlertOnInitHook;
    exports.internalTransferScheduleFreqOnInitHook = internalTransferScheduleFreqOnInitHook;
    exports.intrabankCheckboxOnInitHook = intrabankCheckboxOnInitHook;
    exports.isAdditionsGroup = isAdditionsGroup;
    exports.isAddressTruthy = isAddressTruthy;
    exports.isCounterpartyObjectEquals = isCounterpartyObjectEquals;
    exports.isFormGroupConfig = isFormGroupConfig;
    exports.isObjectTruthy = isObjectTruthy;
    exports.isSelectedBeneficiaryModified = isSelectedBeneficiaryModified;
    exports.mapArrangementList = mapArrangementList;
    exports.mapArrangementToCreditAccount = mapArrangementToCreditAccount;
    exports.mapConnectedAccounts = mapConnectedAccounts;
    exports.mapContactAccounts = mapContactAccounts;
    exports.mapPaymentOptions = mapPaymentOptions;
    exports.maxValueTwoHundredValidator = maxValueTwoHundredValidator;
    exports.minValueTwoValidator = minValueTwoValidator;
    exports.minimumOneAccount = minimumOneAccount;
    exports.missingInListValidator = missingInListValidator;
    exports.modelItemToBoolean = modelItemToBoolean;
    exports.noWhitespaceValidator = noWhitespaceValidator;
    exports.normalizePaymentType = normalizePaymentType;
    exports.objectEquals = objectEquals;
    exports.objectHasValue = objectHasValue;
    exports.objectsHasValueByKey = objectsHasValueByKey;
    exports.parseString = parseString;
    exports.pastDateValidator = pastDateValidator;
    exports.paymentTemplatesPageSize = paymentTemplatesPageSize;
    exports.payordMessagesDefaults = payordMessagesDefaults;
    exports.payordOmniPaymentDefaults = payordOmniPaymentDefaults;
    exports.providePaymentServices = providePaymentServices;
    exports.removeScheduleFromConfig = removeScheduleFromConfig;
    exports.requiredAfterValidator = requiredAfterValidator;
    exports.requiredEndDateValidator = requiredEndDateValidator;
    exports.requiredEndTypeValidator = requiredEndTypeValidator;
    exports.resetBeneficiaryDetails = resetBeneficiaryDetails;
    exports.routingTransitNumberValidator = routingTransitNumberValidator;
    exports.sameAccountsValidator = sameAccountsValidator;
    exports.scheduleEndDateOnInitHook = scheduleEndDateOnInitHook;
    exports.scheduleEndTypeToggleDependants = scheduleEndTypeToggleDependants;
    exports.scheduleFrequencyToggleDependants = scheduleFrequencyToggleDependants;
    exports.scheduleOn = scheduleOn;
    exports.scheduleStartDateOnDestroyHook = scheduleStartDateOnDestroyHook;
    exports.scheduleStartDateOnInitHook = scheduleStartDateOnInitHook;
    exports.scheduledPaymentValidationMethod = scheduledPaymentValidationMethod;
    exports.scrollToElement = scrollToElement;
    exports.setFormDetailsFromResponse = setFormDetailsFromResponse;
    exports.setFormDetailsFromService = setFormDetailsFromService;
    exports.setFrequencyOptionsPerConfig = setFrequencyOptionsPerConfig;
    exports.shouldLoadTabContent = shouldLoadTabContent;
    exports.stripSpaces = stripSpaces;
    exports.switchPaymentParties = switchPaymentParties;
    exports.toInteger = toInteger;
    exports.toNumber = toNumber;
    exports.toPostPaymentTemplate = toPostPaymentTemplate;
    exports.toPostRequest = toPostRequest;
    exports.today = today;
    exports.toggleForAmountOptions = toggleForAmountOptions;
    exports.toggleTabIndex = toggleTabIndex;
    exports.triggerPaymentHook = triggerPaymentHook;
    exports.updateFreqFieldOptions = updateFreqFieldOptions;
    exports["ӨAccountFormatterModule"] = AccountFormatterModule;
    exports["ӨAddressDetailsComponent"] = AddressDetailsComponent;
    exports["ӨBBHighlightModule"] = BBHighlightModule;
    exports["ӨBbKeyboardNavigationModule"] = BbKeyboardNavigationModule;
    exports["ӨBeneficiarySelectorUiComponent"] = BeneficiarySelectorUiComponent;
    exports["ӨBreachLimitDetailsModalComponent"] = BreachLimitDetailsModalComponent;
    exports["ӨBytesModule"] = BytesModule;
    exports["ӨConfirmationDialogComponent"] = ConfirmationDialogComponent;
    exports["ӨConfirmationDialogModule"] = ConfirmationDialogModule;
    exports["ӨCountryNameComponent"] = CountryNameComponent;
    exports["ӨCountrySelectorComponent"] = CountrySelectorComponent;
    exports["ӨCurrencyAmountSelectorComponent"] = CurrencyAmountSelectorComponent;
    exports["ӨCurrencySelectorComponent"] = CurrencySelectorComponent;
    exports["ӨFlagIconComponent"] = FlagIconComponent;
    exports["ӨFullAddressComponent"] = FullAddressComponent;
    exports["ӨHasValuePipe"] = HasValuePipe;
    exports["ӨHorizontalListSelectorComponent"] = HorizontalListSelectorComponent;
    exports["ӨIbanDirective"] = IbanDirective;
    exports["ӨIbanModule"] = IbanModule;
    exports["ӨKeyboardNavigationAnchorDirective"] = KeyboardNavigationAnchorDirective;
    exports["ӨKeyboardNavigationDirective"] = KeyboardNavigationDirective;
    exports["ӨKeyboardNavigationItemDirective"] = KeyboardNavigationItemDirective;
    exports["ӨKeyboardNavigationListDirective"] = KeyboardNavigationListDirective;
    exports["ӨPaymentCreditorDetailsCardComponent"] = PaymentCreditorDetailsCardComponent;
    exports["ӨPaymentDebitorDetailsCardComponent"] = PaymentDebitorDetailsCardComponent;
    exports["ӨPaymentTemplateComponent"] = PaymentTemplateComponent;
    exports["ӨPaymentTemplateSelectorComponent"] = PaymentTemplateSelectorComponent;
    exports["ӨPaymentsControlsComponent"] = PaymentsControlsComponent;
    exports["ӨPaymentsControlsCustomizableDirective"] = PaymentsControlsCustomizableDirective;
    exports["ӨPaymentsControlsModule"] = PaymentsControlsModule;
    exports["ӨPaymentsFilterComponent"] = PaymentsFilterComponent;
    exports["ӨPaymentsFilterCustomizableDirective"] = PaymentsFilterCustomizableDirective;
    exports["ӨPaymentsFilterModule"] = PaymentsFilterModule;
    exports["ӨPaymentsListComponent"] = PaymentsListComponent;
    exports["ӨPaymentsSearchComponent"] = PaymentsSearchComponent;
    exports["ӨPaymentsSearchCustomizableDirective"] = PaymentsSearchCustomizableDirective;
    exports["ӨPaymentsSearchModule"] = PaymentsSearchModule;
    exports["ӨPaymentsTableComponent"] = PaymentsTableComponent;
    exports["ӨPayordAmountDetailsComponent"] = PayordAmountDetailsComponent;
    exports["ӨPayordCardMenuComponent"] = PayordCardMenuComponent;
    exports["ӨPayordCounterpartyDetailsComponent"] = PayordCounterpartyDetailsComponent;
    exports["ӨPayordDynamicLabelComponent"] = PayordDynamicLabelComponent;
    exports["ӨPayordScheduleDetailsComponent"] = PayordScheduleDetailsComponent;
    exports["ӨPayordStatusBadgeAbbreviationCustomizableDirective"] = PayordStatusBadgeAbbreviationCustomizableDirective;
    exports["ӨPayordStatusBadgeCustomizableDirective"] = PayordStatusBadgeCustomizableDirective;
    exports["ӨPayordStatusBadgeLabelCustomizableDirective"] = PayordStatusBadgeLabelCustomizableDirective;
    exports["ӨPayordStatusComponent"] = PayordStatusComponent;
    exports["ӨPurposeOfPaymentDetailComponent"] = PurposeOfPaymentDetailComponent;
    exports["ӨRelativeDateModule"] = RelativeDateModule;
    exports["ӨRoutableModalComponent"] = RoutableModalComponent;
    exports["ӨScheduleCustomizableDirective"] = ScheduleCustomizableDirective;
    exports["ӨScheduleLabelComponent"] = ScheduleLabelComponent;
    exports["ӨScheduleLabelModule"] = ScheduleLabelModule;
    exports["ӨScheduleModule"] = ScheduleModule;
    exports["ӨSelectCountryDropdownComponent"] = SelectCountryDropdownComponent;
    exports["ӨSelectPurposeDropdownComponent"] = SelectPurposeDropdownComponent;
    exports["ӨSeparatorComponent"] = SeparatorComponent;
    exports["ӨSeparatorModule"] = SeparatorModule;
    exports["ӨTableCheckboxComponent"] = TableCheckboxComponent;
    exports["ӨTableCheckboxModule"] = TableCheckboxModule;
    exports["ӨTableHeaderCheckboxComponent"] = TableHeaderCheckboxComponent;
    exports["ӨTableHeaderCheckboxModule"] = TableHeaderCheckboxModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-payment-orders-ang.umd.js.map
