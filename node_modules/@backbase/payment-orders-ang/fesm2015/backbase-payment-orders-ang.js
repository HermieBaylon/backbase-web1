import '@angular/localize/init';
import * as i1$1 from '@angular/forms';
import { Validators, FormControl, NG_VALUE_ACCESSOR, ReactiveFormsModule, FormsModule, FormGroup } from '@angular/forms';
import { Subject, combineLatest, BehaviorSubject, of, EMPTY, timer, throwError, ReplaySubject, merge } from 'rxjs';
import { takeUntil, pluck, distinctUntilChanged, startWith, skip, filter, debounceTime, tap, switchMap, catchError, distinct, delay, map, exhaustMap, shareReplay, scan, debounce, take, finalize, withLatestFrom, mapTo } from 'rxjs/operators';
import * as i0 from '@angular/core';
import { InjectionToken, Injectable, Inject, Optional, Component, ChangeDetectionStrategy, Input, NgModule, EventEmitter, Output, forwardRef, LOCALE_ID, Self, ViewChild, Directive, ContentChildren, ContentChild, ElementRef, HostListener, Pipe } from '@angular/core';
import { isValidIBANFormControl } from '@backbase/ui-ang/iban-lib';
import { __rest } from 'tslib';
import * as i1$b from '@backbase/data-ang/payment-order';
import { SchemeNames } from '@backbase/data-ang/payment-order';
export { PaymentOrdersHttpService as PaymentOrdersService } from '@backbase/data-ang/payment-order';
import * as i2 from '@angular/common';
import { CommonModule, getLocaleNumberSymbol, NumberSymbol, getNumberOfCurrencyDigits, DecimalPipe, DOCUMENT, DatePipe } from '@angular/common';
import * as i1 from '@backbase/ui-ang/icon';
import { IconModule } from '@backbase/ui-ang/icon';
import * as i3 from '@backbase/ui-ang/input-text';
import { InputTextModule } from '@backbase/ui-ang/input-text';
import * as i4 from '@backbase/ui-ang/input-validation-message';
import { InputValidationMessageModule } from '@backbase/ui-ang/input-validation-message';
import * as i3$1 from '@backbase/ui-ang/dropdown-single-select';
import { DropdownSingleSelectModule } from '@backbase/ui-ang/dropdown-single-select';
import * as i7 from '@backbase/ui-ang/button';
import { ButtonModule } from '@backbase/ui-ang/button';
import * as i9 from '@backbase/ui-ang/tooltip-directive';
import { TooltipModule } from '@backbase/ui-ang/tooltip-directive';
import * as i2$1 from '@backbase/ui-ang/search-box';
import { SearchBoxModule } from '@backbase/ui-ang/search-box';
import * as i5 from '@backbase/ui-ang/empty-state';
import { EmptyStateModule } from '@backbase/ui-ang/empty-state';
import * as i6 from '@ng-bootstrap/ng-bootstrap';
import { NgbTooltipConfig, NgbDropdownModule } from '@ng-bootstrap/ng-bootstrap';
import * as i10 from '@backbase/ui-ang/keyboard-click-directive';
import { KeyboardClickModule } from '@backbase/ui-ang/keyboard-click-directive';
import BigNumber from 'bignumber.js';
import * as i2$2 from '@backbase/ui-ang/amount';
import { AmountModule } from '@backbase/ui-ang/amount';
import * as i1$2 from '@backbase/ui-ang/avatar';
import { AvatarModule } from '@backbase/ui-ang/avatar';
import * as i1$3 from '@backbase/ui-ang/modal';
import { ModalModule } from '@backbase/ui-ang/modal';
import * as i3$2 from '@backbase/ui-ang/header';
import { HeaderModule } from '@backbase/ui-ang/header';
import * as i6$1 from '@backbase/ui-ang/load-button';
import { LoadButtonModule } from '@backbase/ui-ang/load-button';
import * as i1$4 from '@backbase/ui-ang/ellipsis';
import { EllipsisModule } from '@backbase/ui-ang/ellipsis';
import * as i1$5 from '@angular/router';
import { PUBSUB } from '@backbase/foundation-ang/web-sdk';
import * as i1$6 from '@backbase/foundation-ang/core';
import { BbTemplate, ItemModel } from '@backbase/foundation-ang/core';
import * as i2$3 from '@backbase/ui-ang/dropdown-menu';
import { DropdownMenuModule } from '@backbase/ui-ang/dropdown-menu';
import * as i6$2 from '@backbase/ui-ang/infinite-scroll';
import { InfiniteScrollModule } from '@backbase/ui-ang/infinite-scroll';
import * as i8 from '@backbase/ui-ang/loading-indicator';
import { LoadingIndicatorModule } from '@backbase/ui-ang/loading-indicator';
import * as i3$3 from '@backbase/ui-ang/highlight';
import { HighlightModule } from '@backbase/ui-ang/highlight';
import * as i1$7 from '@angular/cdk/scrolling';
import { FixedSizeVirtualScrollStrategy, VIRTUAL_SCROLL_STRATEGY, ScrollingModule } from '@angular/cdk/scrolling';
import { FocusModule } from '@backbase/ui-ang/focus';
import * as i1$8 from '@backbase/ui-ang/table';
import { TableModule } from '@backbase/ui-ang/table';
import * as i1$9 from '@backbase/ui-ang/badge';
import { BadgeModule } from '@backbase/ui-ang/badge';
import * as i1$a from '@backbase/ui-ang/notification';
import { NotificationService } from '@backbase/ui-ang/notification';
import * as i3$4 from '@backbase/ui-ang/textarea';
import { TextareaModule } from '@backbase/ui-ang/textarea';
import { ProductSelectorModule } from '@backbase/ui-ang/product-selector';
import { PaginationModule } from '@backbase/ui-ang/pagination';
import * as i2$4 from '@backbase/ui-ang/dropdown-multi-select';
import { DropdownMultiSelectModule } from '@backbase/ui-ang/dropdown-multi-select';
import * as i3$5 from '@backbase/ui-ang/input-number';
import { InputNumberModule } from '@backbase/ui-ang/input-number';
import * as i1$c from '@backbase/ui-ang/input-datepicker';
import { InputDatepickerModule } from '@backbase/ui-ang/input-datepicker';
import * as i4$1 from '@backbase/ui-ang/input-radio-group';
import { InputRadioGroupModule } from '@backbase/ui-ang/input-radio-group';
import * as i3$6 from '@backbase/data-ang/contact-manager';
import * as i2$5 from '@backbase/data-ang/payment-template';
import * as i7$1 from '@backbase/data-ang/payment-order-a2a';
import * as i4$2 from '@backbase/data-ang/arrangements';
import * as i5$1 from '@backbase/data-ang/accesscontrol';
import { HttpResponse } from '@angular/common/http';
import * as i1$d from '@backbase/data-ang/payment-order-options';
import * as i1$e from '@backbase/data-ang/payment-batch';
import * as i2$6 from '@backbase/data-ang/payment-batch-template';
import * as i2$7 from '@backbase/data-ang/stop-checks';

var PaymentBaseFields;
(function (PaymentBaseFields) {
    PaymentBaseFields["initiator"] = "initiator";
    PaymentBaseFields["counterparty"] = "counterparty";
    PaymentBaseFields["remittanceInfo"] = "remittanceInfo";
    PaymentBaseFields["schedule"] = "schedule";
    PaymentBaseFields["additions"] = "additions";
})(PaymentBaseFields || (PaymentBaseFields = {}));
var PaymentOptionFields;
(function (PaymentOptionFields) {
    PaymentOptionFields["selectPaymentOption"] = "selectPaymentOption";
    PaymentOptionFields["paymentCost"] = "paymentCost";
    PaymentOptionFields["chargeBearer"] = "chargeBearer";
    PaymentOptionFields["chargeBearerOptions"] = "chargeBearerOptions";
    PaymentOptionFields["transferFee"] = "transferFee";
    PaymentOptionFields["exchangeRate"] = "exchangeRate";
    PaymentOptionFields["inputFormFromSettings"] = "inputFormFromSettings";
    PaymentOptionFields["paymentTypeName"] = "paymentTypeName";
})(PaymentOptionFields || (PaymentOptionFields = {}));
var InitiatorFields;
(function (InitiatorFields) {
    InitiatorFields["initiatorAccountGroup"] = "debitorAccount";
    InitiatorFields["id"] = "id";
    InitiatorFields["name"] = "name";
    InitiatorFields["alias"] = "alias";
    InitiatorFields["accountNumber"] = "accountNumber";
    InitiatorFields["accountType"] = "accountType";
    InitiatorFields["currency"] = "currency";
})(InitiatorFields || (InitiatorFields = {}));
var AccountField;
(function (AccountField) {
    AccountField["id"] = "id";
    AccountField["name"] = "name";
    AccountField["accountNumber"] = "accountNumber";
    AccountField["accountType"] = "accountType";
    AccountField["currency"] = "currency";
    AccountField["bankBranchCode"] = "bankBranchCode";
    AccountField["balance"] = "balance";
    AccountField["number"] = "number";
})(AccountField || (AccountField = {}));
var CounterPartyFields;
(function (CounterPartyFields) {
    CounterPartyFields["counterPartyAccountGroup"] = "creditorAccount";
    CounterPartyFields["standardEntryClass"] = "entryClass";
    CounterPartyFields["creditor"] = "creditor";
    CounterPartyFields["creditorBank"] = "creditorBank";
    CounterPartyFields["bankName"] = "bankName";
    CounterPartyFields["bic"] = "bic";
    CounterPartyFields["bankBranchCode"] = "bankBranchCode";
    CounterPartyFields["correspondentBank"] = "correspondentBank";
    CounterPartyFields["intermediaryBank"] = "intermediaryBank";
    CounterPartyFields["schemeName"] = "schemeName";
    CounterPartyFields["recipientId"] = "recipientId";
    CounterPartyFields["accountType"] = "accountType";
    CounterPartyFields["accountNumber"] = "accountNumber";
    CounterPartyFields["name"] = "name";
    CounterPartyFields["alias"] = "alias";
    CounterPartyFields["id"] = "id";
    CounterPartyFields["postalAddress"] = "postalAddress";
    CounterPartyFields["messageToBank"] = "messageToBank";
    CounterPartyFields["remittanceInformation"] = "remittanceInformation";
    CounterPartyFields["targetCurrency"] = "targetCurrency";
    CounterPartyFields["endToEndIdentification"] = "endToEndIdentification";
    CounterPartyFields["mandateIdentifier"] = "mandateIdentifier";
    CounterPartyFields["role"] = "role";
    CounterPartyFields["selectedContact"] = "selectedContact";
    CounterPartyFields["counterpartyAccountAdditions"] = "counterpartyAccountAdditions";
    CounterPartyFields["additions"] = "additions";
    CounterPartyFields["country"] = "country";
    CounterPartyFields["saveNewContact"] = "saveNewContact";
    CounterPartyFields["enableAdditionalBankDetails"] = "enableAdditionalBankDetails";
})(CounterPartyFields || (CounterPartyFields = {}));
var PaymentTemplateFields;
(function (PaymentTemplateFields) {
    PaymentTemplateFields["templateName"] = "templateName";
    PaymentTemplateFields["paymentTemplateId"] = "paymentTemplateId";
})(PaymentTemplateFields || (PaymentTemplateFields = {}));
var RemittanceInfoFields;
(function (RemittanceInfoFields) {
    RemittanceInfoFields["amountCurrencyGroup"] = "amountGroup";
    RemittanceInfoFields["amount"] = "amount";
    RemittanceInfoFields["currency"] = "currency";
    RemittanceInfoFields["urgent"] = "urgent";
    RemittanceInfoFields["paymentReference"] = "paymentReference";
    RemittanceInfoFields["description"] = "description";
    RemittanceInfoFields["amountOptions"] = "amountOptions";
    RemittanceInfoFields["amountOptionLabel"] = "amountOptionLabel";
    RemittanceInfoFields["purposeOfPayment"] = "purposeOfPayment";
})(RemittanceInfoFields || (RemittanceInfoFields = {}));
var ScheduleFields;
(function (ScheduleFields) {
    ScheduleFields["scheduleGroup"] = "scheduleGroup";
    ScheduleFields["frequency"] = "frequency";
    ScheduleFields["endType"] = "endType";
    ScheduleFields["every"] = "every";
    ScheduleFields["on"] = "on";
    ScheduleFields["startDate"] = "startDate";
    ScheduleFields["endDate"] = "endDate";
    ScheduleFields["repeat"] = "repeat";
    ScheduleFields["frequencySwitch"] = "frequencySwitch";
    ScheduleFields["scheduleInfo"] = "scheduleInfo";
})(ScheduleFields || (ScheduleFields = {}));
var HiddenFields;
(function (HiddenFields) {
    HiddenFields["isManualEdit"] = "isManualEdit";
    HiddenFields["isClosedPayment"] = "isClosedPayment";
    HiddenFields["enableBeneficiary"] = "enableBeneficiary";
    HiddenFields["beneficiaryAccountName"] = "beneficiaryAccountName";
    HiddenFields["showSaveNewContact"] = "showSaveNewContact";
    HiddenFields["selectedBeneficiary"] = "selectedBeneficiary";
    HiddenFields["hideBeneficiaryFields"] = "hideBeneficiaryFields";
    HiddenFields["defaultCountry"] = "defaultCountry";
    HiddenFields["isPaymentCopy"] = "isPaymentCopy";
    HiddenFields["isDebitPayment"] = "isDebitPayment";
    HiddenFields["defaultBankCodeSetting"] = "defaultBankCodeSetting";
    HiddenFields["sanctionedCountries"] = "sanctionedCountries";
})(HiddenFields || (HiddenFields = {}));
var PaymentFormFieldHooks;
(function (PaymentFormFieldHooks) {
    PaymentFormFieldHooks["onInit"] = "onInit";
    PaymentFormFieldHooks["onDestroy"] = "onDestroy";
})(PaymentFormFieldHooks || (PaymentFormFieldHooks = {}));
var PaymentHooks;
(function (PaymentHooks) {
    PaymentHooks["onInit"] = "onInit";
    PaymentHooks["onDestroy"] = "onDestroy";
    PaymentHooks["onSave"] = "onSave";
    PaymentHooks["onSubmit"] = "onSubmit";
})(PaymentHooks || (PaymentHooks = {}));
/**
 * @deprecated Will be removed in widget collection v3.11.0
 */
var MultiPaymentHooks;
(function (MultiPaymentHooks) {
    MultiPaymentHooks["onClick"] = "onClick";
    MultiPaymentHooks["onBlur"] = "onBlur";
})(MultiPaymentHooks || (MultiPaymentHooks = {}));
/**
 * @deprecated Will be removed in widget collection v3.11.0
 */
var StepperAction;
(function (StepperAction) {
    StepperAction["NEXT"] = "next";
    StepperAction["BACK"] = "back";
    StepperAction["SUBMIT"] = "submit";
})(StepperAction || (StepperAction = {}));
/**
 * @deprecated Will be removed in widget collection v3.11.0
 */
var MultiPaymentFormCardFields;
(function (MultiPaymentFormCardFields) {
    MultiPaymentFormCardFields["counterpartyName"] = "counterpartyName";
    MultiPaymentFormCardFields["amount"] = "amount";
    MultiPaymentFormCardFields["description"] = "description";
})(MultiPaymentFormCardFields || (MultiPaymentFormCardFields = {}));
/**
 * @deprecated Will be removed in widget collection v3.11.0
 */
var MultiPaymentEvents;
(function (MultiPaymentEvents) {
    MultiPaymentEvents["paymentBlur"] = "payment-blur";
    MultiPaymentEvents["deletePayment"] = "delete-payment";
})(MultiPaymentEvents || (MultiPaymentEvents = {}));
/**
 * @deprecated Will be removed in widget collection v3.11.0
 */
var multiPaymnetValidationRules;
(function (multiPaymnetValidationRules) {
    multiPaymnetValidationRules["batchNameIsMandatory"] = "batchInfo.name";
    multiPaymnetValidationRules["requestedExecutionDateIsMandatory"] = "batchInfo.requestedExecutionDate";
    multiPaymnetValidationRules["requestedExecutionDateIsValid"] = "batchInfo.requestedExecutionDate";
    multiPaymnetValidationRules["batchhasatleastonecredittransaction"] = "counterparty.debitorAccount";
    multiPaymnetValidationRules["totalcredittransactionscountisequaltointendedtransactionscount"] = "counterparty.debitorAccount";
    multiPaymnetValidationRules["totalcreditamountisequaltototalintendedcreditamount"] = "counterparty.debitorAccount";
    multiPaymnetValidationRules["originatoraccountnumberismandatory"] = "initiator";
    multiPaymnetValidationRules["userhasaccesstooriginatoraccount"] = "initiator";
    multiPaymnetValidationRules["originatoraccountisallowedtodebit"] = "initiator";
    multiPaymnetValidationRules["counterpartyaccountnumberismandatory"] = "counterpartyAccountNumber";
    multiPaymnetValidationRules["userhasaccesstocounterpartyaccount"] = "counterpartyAccountNumber";
    multiPaymnetValidationRules["counterpartyaccountnumberisnotsameasoriginatoraccount"] = "counterpartyAccountNumber";
    multiPaymnetValidationRules["counterpartyaccountisallowedtocredit"] = "counterpartyAccountNumber";
    multiPaymnetValidationRules["batchpaymentiscredit"] = "counterpartyAccountNumber";
    multiPaymnetValidationRules["batchpaymentamountisgreaterthanzero"] = "amount";
    multiPaymnetValidationRules["batchpaymentcurrencyisvalid"] = "amount.currency";
})(multiPaymnetValidationRules || (multiPaymnetValidationRules = {}));

var AccessContextScope;
(function (AccessContextScope) {
    AccessContextScope["USER"] = "USER";
    AccessContextScope["SA"] = "SA";
    AccessContextScope["LE"] = "LE";
})(AccessContextScope || (AccessContextScope = {}));
var PaymentComponents;
(function (PaymentComponents) {
    PaymentComponents["text"] = "text";
    PaymentComponents["date"] = "date";
    PaymentComponents["phone"] = "phone";
    PaymentComponents["number"] = "number";
    PaymentComponents["textarea"] = "textarea";
    PaymentComponents["address"] = "address";
    PaymentComponents["select"] = "select";
    PaymentComponents["radio"] = "radio";
    PaymentComponents["checkbox"] = "checkbox";
    PaymentComponents["debitAccountSelector"] = "debitAccountSelector";
    PaymentComponents["countrySelector"] = "countrySelector";
    PaymentComponents["sanctionedCountrySelector"] = "sanctionedCountrySelector";
    PaymentComponents["beneficiarySelector"] = "beneficiarySelector";
    PaymentComponents["selectPaymentOption"] = "selectPaymentOption";
    PaymentComponents["paymentCost"] = "paymentCost";
    PaymentComponents["chargeBearer"] = "chargeBearer";
    PaymentComponents["schedule"] = "schedule";
    PaymentComponents["amount"] = "amount";
    PaymentComponents["sanctionedCurrencyAmount"] = "sanctionedCurrencyAmount";
    PaymentComponents["switch"] = "switch";
    PaymentComponents["internalAccountSelector"] = "internalAccountSelector";
    PaymentComponents["compactAmount"] = "compactAmount";
    PaymentComponents["scheduleHeader"] = "scheduleHeader";
    PaymentComponents["buttonGroup"] = "buttonGroup";
    PaymentComponents["multiPaymentCard"] = "multiPaymentCard";
    PaymentComponents["creditDebitSelector"] = "creditDebitSelector";
    PaymentComponents["internalAmountOptions"] = "internalAmountOptions";
    PaymentComponents["header"] = "header";
    PaymentComponents["purposeOfPayment"] = "purposeOfPayment";
    PaymentComponents["alert"] = "alert";
    PaymentComponents["scheduleSwitch"] = "scheduleSwitch";
    PaymentComponents["beneficiaryGroupHeader"] = "beneficiaryGroupHeader";
    PaymentComponents["multiPaymentAccountSelector"] = "multiPaymentAccountSelector";
    PaymentComponents["contactSelector"] = "contactSelector";
    PaymentComponents["accountSelector"] = "accountSelector";
})(PaymentComponents || (PaymentComponents = {}));
var AddressType;
(function (AddressType) {
    AddressType["beneficiary"] = "beneficiary";
    AddressType["beneficiary bank"] = "beneficiary bank";
    AddressType["correspondent bank"] = "correspondent bank";
    AddressType["intermediary bank"] = "intermediary bank";
})(AddressType || (AddressType = {}));
var TemplateModeType;
(function (TemplateModeType) {
    TemplateModeType["CREATE"] = "CREATE";
    TemplateModeType["EDIT"] = "EDIT";
})(TemplateModeType || (TemplateModeType = {}));
var EditModeTypes;
(function (EditModeTypes) {
    EditModeTypes["EDIT_TEMPLATE"] = "EDIT_TEMPLATE";
    EditModeTypes["EDIT_PAYMENT"] = "EDIT_PAYMENT";
})(EditModeTypes || (EditModeTypes = {}));
var PaymentMode;
(function (PaymentMode) {
    PaymentMode["EDIT_PAYMENT"] = "EDIT_PAYMENT";
    PaymentMode["CREATE_PAYMENT"] = "CREATE_PAYMENT";
    PaymentMode["COPY_PAYMENT"] = "COPY_PAYMENT";
    PaymentMode["EDIT_TEMPLATE"] = "EDIT_TEMPLATE";
    PaymentMode["CREATE_TEMPLATE"] = "CREATE_TEMPLATE";
})(PaymentMode || (PaymentMode = {}));
var ContactScheme;
(function (ContactScheme) {
    ContactScheme["accountNumber"] = "accountNumber";
    ContactScheme["phoneNumber"] = "phoneNumber";
    ContactScheme["email"] = "email";
})(ContactScheme || (ContactScheme = {}));
var ReviewScreens;
(function (ReviewScreens) {
    ReviewScreens[ReviewScreens["ADAPTED"] = 0] = "ADAPTED";
    ReviewScreens[ReviewScreens["DEFAULT"] = 1] = "DEFAULT";
})(ReviewScreens || (ReviewScreens = {}));
var Scheme;
(function (Scheme) {
    Scheme["IBAN"] = "IBAN";
    Scheme["BBAN"] = "BBAN";
    Scheme["ID"] = "ID";
})(Scheme || (Scheme = {}));
var ProductKinds;
(function (ProductKinds) {
    ProductKinds["currentAccount"] = "Current Account";
    ProductKinds["savingsAccount"] = "Savings Account";
    ProductKinds["creditCard"] = "Credit Card";
    ProductKinds["debitCard"] = "Debit Card";
    ProductKinds["loanAccount"] = "Loan";
    ProductKinds["connectedAccounts"] = "Connected Account";
    ProductKinds["investmentAccount"] = "Investment Account";
})(ProductKinds || (ProductKinds = {}));
var AccountBalances;
(function (AccountBalances) {
    AccountBalances["available"] = "availableBalance";
    AccountBalances["current"] = "bookedBalance";
    AccountBalances["creditLimit"] = "creditLimit";
    AccountBalances["outstandingPrincipalAmount"] = "outstandingPrincipalAmount";
})(AccountBalances || (AccountBalances = {}));
var InitiatePaymentHeaderStates;
(function (InitiatePaymentHeaderStates) {
    InitiatePaymentHeaderStates["FORM"] = "FORM";
    InitiatePaymentHeaderStates["REVIEW"] = "REVIEW";
    InitiatePaymentHeaderStates["SUBMITTED"] = "SUBMITTED";
})(InitiatePaymentHeaderStates || (InitiatePaymentHeaderStates = {}));

const contactsPageSize = 1000;
const arrangementsPageSize = 100;
const dataItemPermissionParams = {
    resourceName: 'Payments',
    privilege: 'create',
    dataGroupType: 'ARRANGEMENTS',
};
var BeneficiaryList;
(function (BeneficiaryList) {
    BeneficiaryList["CONTACTS"] = "contacts";
    BeneficiaryList["ACCOUNTS"] = "accounts";
})(BeneficiaryList || (BeneficiaryList = {}));
const defaultBeneficiaryTabsConfig = [
    BeneficiaryList.CONTACTS,
    BeneficiaryList.ACCOUNTS,
];
var ListState;
(function (ListState) {
    ListState["EMPTY"] = "empty";
    ListState["LIST"] = "list";
    ListState["FULL_LIST"] = "full-list";
    ListState["LOADING"] = "loading";
    ListState["FETCHING"] = "fetching";
    ListState["FETCHING_FAILURE"] = "fetching-failure";
    ListState["NO_RESULT"] = "no-result";
    ListState["ERROR"] = "error";
})(ListState || (ListState = {}));
var PaymentTypeIcon;
(function (PaymentTypeIcon) {
    PaymentTypeIcon["INTERNATIONAL"] = "language";
    PaymentTypeIcon["DOMESTIC"] = "accounts";
    PaymentTypeIcon["INTERNAL"] = "domain";
})(PaymentTypeIcon || (PaymentTypeIcon = {}));

/* eslint-disable @typescript-eslint/quotes */
const CurrenciesMap = {
    USD: {
        symbol: '$',
        name: 'United States Dollar',
        symbol_native: '$',
        decimal_digits: 2,
        rounding: 0,
        code: 'USD',
        name_plural: 'US dollars',
    },
    CAD: {
        symbol: 'CA$',
        name: 'Canadian Dollar',
        symbol_native: '$',
        decimal_digits: 2,
        rounding: 0,
        code: 'CAD',
        name_plural: 'Canadian dollars',
    },
    EUR: {
        symbol: '€',
        name: 'Euro',
        symbol_native: '€',
        decimal_digits: 2,
        rounding: 0,
        code: 'EUR',
        name_plural: 'euros',
    },
    AED: {
        symbol: 'AED',
        name: 'United Arab Emirates Dirham',
        symbol_native: 'د.إ.‏',
        decimal_digits: 2,
        rounding: 0,
        code: 'AED',
        name_plural: 'UAE dirhams',
    },
    AFN: {
        symbol: 'Af',
        name: 'Afghan Afghani',
        symbol_native: '؋',
        decimal_digits: 0,
        rounding: 0,
        code: 'AFN',
        name_plural: 'Afghan Afghanis',
    },
    ALL: {
        symbol: 'ALL',
        name: 'Albanian Lek',
        symbol_native: 'Lek',
        decimal_digits: 0,
        rounding: 0,
        code: 'ALL',
        name_plural: 'Albanian lekë',
    },
    AMD: {
        symbol: 'AMD',
        name: 'Armenian Dram',
        symbol_native: 'դր.',
        decimal_digits: 0,
        rounding: 0,
        code: 'AMD',
        name_plural: 'Armenian drams',
    },
    ARS: {
        symbol: 'AR$',
        name: 'Argentine Peso',
        symbol_native: '$',
        decimal_digits: 2,
        rounding: 0,
        code: 'ARS',
        name_plural: 'Argentine pesos',
    },
    AUD: {
        symbol: 'AU$',
        name: 'Australian Dollar',
        symbol_native: '$',
        decimal_digits: 2,
        rounding: 0,
        code: 'AUD',
        name_plural: 'Australian dollars',
    },
    AZN: {
        symbol: 'man.',
        name: 'Azerbaijani Manat',
        symbol_native: 'ман.',
        decimal_digits: 2,
        rounding: 0,
        code: 'AZN',
        name_plural: 'Azerbaijani manats',
    },
    BAM: {
        symbol: 'KM',
        name: 'Bosnia-Herzegovina Convertible Mark',
        symbol_native: 'KM',
        decimal_digits: 2,
        rounding: 0,
        code: 'BAM',
        name_plural: 'Bosnia-Herzegovina convertible marks',
    },
    BDT: {
        symbol: 'Tk',
        name: 'Bangladeshi Taka',
        symbol_native: '৳',
        decimal_digits: 2,
        rounding: 0,
        code: 'BDT',
        name_plural: 'Bangladeshi takas',
    },
    BGN: {
        symbol: 'BGN',
        name: 'Bulgarian Lev',
        symbol_native: 'лв.',
        decimal_digits: 2,
        rounding: 0,
        code: 'BGN',
        name_plural: 'Bulgarian leva',
    },
    BHD: {
        symbol: 'BD',
        name: 'Bahraini Dinar',
        symbol_native: 'د.ب.‏',
        decimal_digits: 3,
        rounding: 0,
        code: 'BHD',
        name_plural: 'Bahraini dinars',
    },
    BIF: {
        symbol: 'FBu',
        name: 'Burundian Franc',
        symbol_native: 'FBu',
        decimal_digits: 0,
        rounding: 0,
        code: 'BIF',
        name_plural: 'Burundian francs',
    },
    BND: {
        symbol: 'BN$',
        name: 'Brunei Dollar',
        symbol_native: '$',
        decimal_digits: 2,
        rounding: 0,
        code: 'BND',
        name_plural: 'Brunei dollars',
    },
    BOB: {
        symbol: 'Bs',
        name: 'Bolivian Boliviano',
        symbol_native: 'Bs',
        decimal_digits: 2,
        rounding: 0,
        code: 'BOB',
        name_plural: 'Bolivian bolivianos',
    },
    BRL: {
        symbol: 'R$',
        name: 'Brazilian Real',
        symbol_native: 'R$',
        decimal_digits: 2,
        rounding: 0,
        code: 'BRL',
        name_plural: 'Brazilian reals',
    },
    BWP: {
        symbol: 'BWP',
        name: 'Botswanan Pula',
        symbol_native: 'P',
        decimal_digits: 2,
        rounding: 0,
        code: 'BWP',
        name_plural: 'Botswanan pulas',
    },
    BYN: {
        symbol: 'Br',
        name: 'Belarusian Ruble',
        symbol_native: 'руб.',
        decimal_digits: 2,
        rounding: 0,
        code: 'BYN',
        name_plural: 'Belarusian rubles',
    },
    BZD: {
        symbol: 'BZ$',
        name: 'Belize Dollar',
        symbol_native: '$',
        decimal_digits: 2,
        rounding: 0,
        code: 'BZD',
        name_plural: 'Belize dollars',
    },
    CDF: {
        symbol: 'CDF',
        name: 'Congolese Franc',
        symbol_native: 'FrCD',
        decimal_digits: 2,
        rounding: 0,
        code: 'CDF',
        name_plural: 'Congolese francs',
    },
    CHF: {
        symbol: 'CHF',
        name: 'Swiss Franc',
        symbol_native: 'CHF',
        decimal_digits: 2,
        rounding: 0.05,
        code: 'CHF',
        name_plural: 'Swiss francs',
    },
    CLP: {
        symbol: 'CL$',
        name: 'Chilean Peso',
        symbol_native: '$',
        decimal_digits: 0,
        rounding: 0,
        code: 'CLP',
        name_plural: 'Chilean pesos',
    },
    CNY: {
        symbol: 'CN¥',
        name: 'Chinese Yuan',
        symbol_native: 'CN¥',
        decimal_digits: 2,
        rounding: 0,
        code: 'CNY',
        name_plural: 'Chinese yuan',
    },
    COP: {
        symbol: 'CO$',
        name: 'Colombian Peso',
        symbol_native: '$',
        decimal_digits: 0,
        rounding: 0,
        code: 'COP',
        name_plural: 'Colombian pesos',
    },
    CRC: {
        symbol: '₡',
        name: 'Costa Rican Colón',
        symbol_native: '₡',
        decimal_digits: 0,
        rounding: 0,
        code: 'CRC',
        name_plural: 'Costa Rican colóns',
    },
    CVE: {
        symbol: 'CV$',
        name: 'Cape Verdean Escudo',
        symbol_native: 'CV$',
        decimal_digits: 2,
        rounding: 0,
        code: 'CVE',
        name_plural: 'Cape Verdean escudos',
    },
    CZK: {
        symbol: 'Kč',
        name: 'Czech Republic Koruna',
        symbol_native: 'Kč',
        decimal_digits: 2,
        rounding: 0,
        code: 'CZK',
        name_plural: 'Czech Republic korunas',
    },
    DJF: {
        symbol: 'Fdj',
        name: 'Djiboutian Franc',
        symbol_native: 'Fdj',
        decimal_digits: 0,
        rounding: 0,
        code: 'DJF',
        name_plural: 'Djiboutian francs',
    },
    DKK: {
        symbol: 'Dkr',
        name: 'Danish Krone',
        symbol_native: 'kr',
        decimal_digits: 2,
        rounding: 0,
        code: 'DKK',
        name_plural: 'Danish kroner',
    },
    DOP: {
        symbol: 'RD$',
        name: 'Dominican Peso',
        symbol_native: 'RD$',
        decimal_digits: 2,
        rounding: 0,
        code: 'DOP',
        name_plural: 'Dominican pesos',
    },
    DZD: {
        symbol: 'DA',
        name: 'Algerian Dinar',
        symbol_native: 'د.ج.‏',
        decimal_digits: 2,
        rounding: 0,
        code: 'DZD',
        name_plural: 'Algerian dinars',
    },
    EEK: {
        symbol: 'Ekr',
        name: 'Estonian Kroon',
        symbol_native: 'kr',
        decimal_digits: 2,
        rounding: 0,
        code: 'EEK',
        name_plural: 'Estonian kroons',
    },
    EGP: {
        symbol: 'EGP',
        name: 'Egyptian Pound',
        symbol_native: 'ج.م.‏',
        decimal_digits: 2,
        rounding: 0,
        code: 'EGP',
        name_plural: 'Egyptian pounds',
    },
    ERN: {
        symbol: 'Nfk',
        name: 'Eritrean Nakfa',
        symbol_native: 'Nfk',
        decimal_digits: 2,
        rounding: 0,
        code: 'ERN',
        name_plural: 'Eritrean nakfas',
    },
    ETB: {
        symbol: 'Br',
        name: 'Ethiopian Birr',
        symbol_native: 'Br',
        decimal_digits: 2,
        rounding: 0,
        code: 'ETB',
        name_plural: 'Ethiopian birrs',
    },
    GBP: {
        symbol: '£',
        name: 'British Pound Sterling',
        symbol_native: '£',
        decimal_digits: 2,
        rounding: 0,
        code: 'GBP',
        name_plural: 'British pounds sterling',
    },
    GEL: {
        symbol: 'GEL',
        name: 'Georgian Lari',
        symbol_native: 'GEL',
        decimal_digits: 2,
        rounding: 0,
        code: 'GEL',
        name_plural: 'Georgian laris',
    },
    GHS: {
        symbol: 'GH₵',
        name: 'Ghanaian Cedi',
        symbol_native: 'GH₵',
        decimal_digits: 2,
        rounding: 0,
        code: 'GHS',
        name_plural: 'Ghanaian cedis',
    },
    GNF: {
        symbol: 'FG',
        name: 'Guinean Franc',
        symbol_native: 'FG',
        decimal_digits: 0,
        rounding: 0,
        code: 'GNF',
        name_plural: 'Guinean francs',
    },
    GTQ: {
        symbol: 'GTQ',
        name: 'Guatemalan Quetzal',
        symbol_native: 'Q',
        decimal_digits: 2,
        rounding: 0,
        code: 'GTQ',
        name_plural: 'Guatemalan quetzals',
    },
    HKD: {
        symbol: 'HK$',
        name: 'Hong Kong Dollar',
        symbol_native: '$',
        decimal_digits: 2,
        rounding: 0,
        code: 'HKD',
        name_plural: 'Hong Kong dollars',
    },
    HNL: {
        symbol: 'HNL',
        name: 'Honduran Lempira',
        symbol_native: 'L',
        decimal_digits: 2,
        rounding: 0,
        code: 'HNL',
        name_plural: 'Honduran lempiras',
    },
    HRK: {
        symbol: 'kn',
        name: 'Croatian Kuna',
        symbol_native: 'kn',
        decimal_digits: 2,
        rounding: 0,
        code: 'HRK',
        name_plural: 'Croatian kunas',
    },
    HUF: {
        symbol: 'Ft',
        name: 'Hungarian Forint',
        symbol_native: 'Ft',
        decimal_digits: 0,
        rounding: 0,
        code: 'HUF',
        name_plural: 'Hungarian forints',
    },
    IDR: {
        symbol: 'Rp',
        name: 'Indonesian Rupiah',
        symbol_native: 'Rp',
        decimal_digits: 0,
        rounding: 0,
        code: 'IDR',
        name_plural: 'Indonesian rupiahs',
    },
    ILS: {
        symbol: '₪',
        name: 'Israeli New Sheqel',
        symbol_native: '₪',
        decimal_digits: 2,
        rounding: 0,
        code: 'ILS',
        name_plural: 'Israeli new sheqels',
    },
    INR: {
        symbol: 'Rs',
        name: 'Indian Rupee',
        symbol_native: 'টকা',
        decimal_digits: 2,
        rounding: 0,
        code: 'INR',
        name_plural: 'Indian rupees',
    },
    IQD: {
        symbol: 'IQD',
        name: 'Iraqi Dinar',
        symbol_native: 'د.ع.‏',
        decimal_digits: 0,
        rounding: 0,
        code: 'IQD',
        name_plural: 'Iraqi dinars',
    },
    IRR: {
        symbol: 'IRR',
        name: 'Iranian Rial',
        symbol_native: '﷼',
        decimal_digits: 0,
        rounding: 0,
        code: 'IRR',
        name_plural: 'Iranian rials',
    },
    ISK: {
        symbol: 'Ikr',
        name: 'Icelandic Króna',
        symbol_native: 'kr',
        decimal_digits: 0,
        rounding: 0,
        code: 'ISK',
        name_plural: 'Icelandic krónur',
    },
    JMD: {
        symbol: 'J$',
        name: 'Jamaican Dollar',
        symbol_native: '$',
        decimal_digits: 2,
        rounding: 0,
        code: 'JMD',
        name_plural: 'Jamaican dollars',
    },
    JOD: {
        symbol: 'JD',
        name: 'Jordanian Dinar',
        symbol_native: 'د.أ.‏',
        decimal_digits: 3,
        rounding: 0,
        code: 'JOD',
        name_plural: 'Jordanian dinars',
    },
    JPY: {
        symbol: '¥',
        name: 'Japanese Yen',
        symbol_native: '￥',
        decimal_digits: 0,
        rounding: 0,
        code: 'JPY',
        name_plural: 'Japanese yen',
    },
    KES: {
        symbol: 'Ksh',
        name: 'Kenyan Shilling',
        symbol_native: 'Ksh',
        decimal_digits: 2,
        rounding: 0,
        code: 'KES',
        name_plural: 'Kenyan shillings',
    },
    KHR: {
        symbol: 'KHR',
        name: 'Cambodian Riel',
        symbol_native: '៛',
        decimal_digits: 2,
        rounding: 0,
        code: 'KHR',
        name_plural: 'Cambodian riels',
    },
    KMF: {
        symbol: 'CF',
        name: 'Comorian Franc',
        symbol_native: 'FC',
        decimal_digits: 0,
        rounding: 0,
        code: 'KMF',
        name_plural: 'Comorian francs',
    },
    KRW: {
        symbol: '₩',
        name: 'South Korean Won',
        symbol_native: '₩',
        decimal_digits: 0,
        rounding: 0,
        code: 'KRW',
        name_plural: 'South Korean won',
    },
    KWD: {
        symbol: 'KD',
        name: 'Kuwaiti Dinar',
        symbol_native: 'د.ك.‏',
        decimal_digits: 3,
        rounding: 0,
        code: 'KWD',
        name_plural: 'Kuwaiti dinars',
    },
    KZT: {
        symbol: 'KZT',
        name: 'Kazakhstani Tenge',
        symbol_native: 'тңг.',
        decimal_digits: 2,
        rounding: 0,
        code: 'KZT',
        name_plural: 'Kazakhstani tenges',
    },
    LBP: {
        symbol: 'LB£',
        name: 'Lebanese Pound',
        symbol_native: 'ل.ل.‏',
        decimal_digits: 0,
        rounding: 0,
        code: 'LBP',
        name_plural: 'Lebanese pounds',
    },
    LKR: {
        symbol: 'SLRs',
        name: 'Sri Lankan Rupee',
        symbol_native: 'SL Re',
        decimal_digits: 2,
        rounding: 0,
        code: 'LKR',
        name_plural: 'Sri Lankan rupees',
    },
    LTL: {
        symbol: 'Lt',
        name: 'Lithuanian Litas',
        symbol_native: 'Lt',
        decimal_digits: 2,
        rounding: 0,
        code: 'LTL',
        name_plural: 'Lithuanian litai',
    },
    LVL: {
        symbol: 'Ls',
        name: 'Latvian Lats',
        symbol_native: 'Ls',
        decimal_digits: 2,
        rounding: 0,
        code: 'LVL',
        name_plural: 'Latvian lati',
    },
    LYD: {
        symbol: 'LD',
        name: 'Libyan Dinar',
        symbol_native: 'د.ل.‏',
        decimal_digits: 3,
        rounding: 0,
        code: 'LYD',
        name_plural: 'Libyan dinars',
    },
    MAD: {
        symbol: 'MAD',
        name: 'Moroccan Dirham',
        symbol_native: 'د.م.‏',
        decimal_digits: 2,
        rounding: 0,
        code: 'MAD',
        name_plural: 'Moroccan dirhams',
    },
    MDL: {
        symbol: 'MDL',
        name: 'Moldovan Leu',
        symbol_native: 'MDL',
        decimal_digits: 2,
        rounding: 0,
        code: 'MDL',
        name_plural: 'Moldovan lei',
    },
    MGA: {
        symbol: 'MGA',
        name: 'Malagasy Ariary',
        symbol_native: 'MGA',
        decimal_digits: 0,
        rounding: 0,
        code: 'MGA',
        name_plural: 'Malagasy Ariaries',
    },
    MKD: {
        symbol: 'MKD',
        name: 'Macedonian Denar',
        symbol_native: 'MKD',
        decimal_digits: 2,
        rounding: 0,
        code: 'MKD',
        name_plural: 'Macedonian denari',
    },
    MMK: {
        symbol: 'MMK',
        name: 'Myanma Kyat',
        symbol_native: 'K',
        decimal_digits: 0,
        rounding: 0,
        code: 'MMK',
        name_plural: 'Myanma kyats',
    },
    MOP: {
        symbol: 'MOP$',
        name: 'Macanese Pataca',
        symbol_native: 'MOP$',
        decimal_digits: 2,
        rounding: 0,
        code: 'MOP',
        name_plural: 'Macanese patacas',
    },
    MUR: {
        symbol: 'MURs',
        name: 'Mauritian Rupee',
        symbol_native: 'MURs',
        decimal_digits: 0,
        rounding: 0,
        code: 'MUR',
        name_plural: 'Mauritian rupees',
    },
    MXN: {
        symbol: 'MX$',
        name: 'Mexican Peso',
        symbol_native: '$',
        decimal_digits: 2,
        rounding: 0,
        code: 'MXN',
        name_plural: 'Mexican pesos',
    },
    MYR: {
        symbol: 'RM',
        name: 'Malaysian Ringgit',
        symbol_native: 'RM',
        decimal_digits: 2,
        rounding: 0,
        code: 'MYR',
        name_plural: 'Malaysian ringgits',
    },
    MZN: {
        symbol: 'MTn',
        name: 'Mozambican Metical',
        symbol_native: 'MTn',
        decimal_digits: 2,
        rounding: 0,
        code: 'MZN',
        name_plural: 'Mozambican meticals',
    },
    NAD: {
        symbol: 'N$',
        name: 'Namibian Dollar',
        symbol_native: 'N$',
        decimal_digits: 2,
        rounding: 0,
        code: 'NAD',
        name_plural: 'Namibian dollars',
    },
    NGN: {
        symbol: '₦',
        name: 'Nigerian Naira',
        symbol_native: '₦',
        decimal_digits: 2,
        rounding: 0,
        code: 'NGN',
        name_plural: 'Nigerian nairas',
    },
    NIO: {
        symbol: 'C$',
        name: 'Nicaraguan Córdoba',
        symbol_native: 'C$',
        decimal_digits: 2,
        rounding: 0,
        code: 'NIO',
        name_plural: 'Nicaraguan córdobas',
    },
    NOK: {
        symbol: 'Nkr',
        name: 'Norwegian Krone',
        symbol_native: 'kr',
        decimal_digits: 2,
        rounding: 0,
        code: 'NOK',
        name_plural: 'Norwegian kroner',
    },
    NPR: {
        symbol: 'NPRs',
        name: 'Nepalese Rupee',
        symbol_native: 'नेरू',
        decimal_digits: 2,
        rounding: 0,
        code: 'NPR',
        name_plural: 'Nepalese rupees',
    },
    NZD: {
        symbol: 'NZ$',
        name: 'New Zealand Dollar',
        symbol_native: '$',
        decimal_digits: 2,
        rounding: 0,
        code: 'NZD',
        name_plural: 'New Zealand dollars',
    },
    OMR: {
        symbol: 'OMR',
        name: 'Omani Rial',
        symbol_native: 'ر.ع.‏',
        decimal_digits: 3,
        rounding: 0,
        code: 'OMR',
        name_plural: 'Omani rials',
    },
    PAB: {
        symbol: 'B/.',
        name: 'Panamanian Balboa',
        symbol_native: 'B/.',
        decimal_digits: 2,
        rounding: 0,
        code: 'PAB',
        name_plural: 'Panamanian balboas',
    },
    PEN: {
        symbol: 'S/.',
        name: 'Peruvian Nuevo Sol',
        symbol_native: 'S/.',
        decimal_digits: 2,
        rounding: 0,
        code: 'PEN',
        name_plural: 'Peruvian nuevos soles',
    },
    PHP: {
        symbol: '₱',
        name: 'Philippine Peso',
        symbol_native: '₱',
        decimal_digits: 2,
        rounding: 0,
        code: 'PHP',
        name_plural: 'Philippine pesos',
    },
    PKR: {
        symbol: 'PKRs',
        name: 'Pakistani Rupee',
        symbol_native: '₨',
        decimal_digits: 0,
        rounding: 0,
        code: 'PKR',
        name_plural: 'Pakistani rupees',
    },
    PLN: {
        symbol: 'zł',
        name: 'Polish Zloty',
        symbol_native: 'zł',
        decimal_digits: 2,
        rounding: 0,
        code: 'PLN',
        name_plural: 'Polish zlotys',
    },
    PYG: {
        symbol: '₲',
        name: 'Paraguayan Guarani',
        symbol_native: '₲',
        decimal_digits: 0,
        rounding: 0,
        code: 'PYG',
        name_plural: 'Paraguayan guaranis',
    },
    QAR: {
        symbol: 'QR',
        name: 'Qatari Rial',
        symbol_native: 'ر.ق.‏',
        decimal_digits: 2,
        rounding: 0,
        code: 'QAR',
        name_plural: 'Qatari rials',
    },
    RON: {
        symbol: 'RON',
        name: 'Romanian Leu',
        symbol_native: 'RON',
        decimal_digits: 2,
        rounding: 0,
        code: 'RON',
        name_plural: 'Romanian lei',
    },
    RSD: {
        symbol: 'din.',
        name: 'Serbian Dinar',
        symbol_native: 'дин.',
        decimal_digits: 0,
        rounding: 0,
        code: 'RSD',
        name_plural: 'Serbian dinars',
    },
    RUB: {
        symbol: 'RUB',
        name: 'Russian Ruble',
        symbol_native: '₽.',
        decimal_digits: 2,
        rounding: 0,
        code: 'RUB',
        name_plural: 'Russian rubles',
    },
    RWF: {
        symbol: 'RWF',
        name: 'Rwandan Franc',
        symbol_native: 'FR',
        decimal_digits: 0,
        rounding: 0,
        code: 'RWF',
        name_plural: 'Rwandan francs',
    },
    SAR: {
        symbol: 'SR',
        name: 'Saudi Riyal',
        symbol_native: 'ر.س.‏',
        decimal_digits: 2,
        rounding: 0,
        code: 'SAR',
        name_plural: 'Saudi riyals',
    },
    SDG: {
        symbol: 'SDG',
        name: 'Sudanese Pound',
        symbol_native: 'SDG',
        decimal_digits: 2,
        rounding: 0,
        code: 'SDG',
        name_plural: 'Sudanese pounds',
    },
    SEK: {
        symbol: 'Skr',
        name: 'Swedish Krona',
        symbol_native: 'kr',
        decimal_digits: 2,
        rounding: 0,
        code: 'SEK',
        name_plural: 'Swedish kronor',
    },
    SGD: {
        symbol: 'S$',
        name: 'Singapore Dollar',
        symbol_native: '$',
        decimal_digits: 2,
        rounding: 0,
        code: 'SGD',
        name_plural: 'Singapore dollars',
    },
    SOS: {
        symbol: 'Ssh',
        name: 'Somali Shilling',
        symbol_native: 'Ssh',
        decimal_digits: 0,
        rounding: 0,
        code: 'SOS',
        name_plural: 'Somali shillings',
    },
    SYP: {
        symbol: 'SY£',
        name: 'Syrian Pound',
        symbol_native: 'ل.س.‏',
        decimal_digits: 0,
        rounding: 0,
        code: 'SYP',
        name_plural: 'Syrian pounds',
    },
    THB: {
        symbol: '฿',
        name: 'Thai Baht',
        symbol_native: '฿',
        decimal_digits: 2,
        rounding: 0,
        code: 'THB',
        name_plural: 'Thai baht',
    },
    TND: {
        symbol: 'DT',
        name: 'Tunisian Dinar',
        symbol_native: 'د.ت.‏',
        decimal_digits: 3,
        rounding: 0,
        code: 'TND',
        name_plural: 'Tunisian dinars',
    },
    TOP: {
        symbol: 'T$',
        name: 'Tongan Paʻanga',
        symbol_native: 'T$',
        decimal_digits: 2,
        rounding: 0,
        code: 'TOP',
        name_plural: 'Tongan paʻanga',
    },
    TRY: {
        symbol: 'TL',
        name: 'Turkish Lira',
        symbol_native: 'TL',
        decimal_digits: 2,
        rounding: 0,
        code: 'TRY',
        name_plural: 'Turkish Lira',
    },
    TTD: {
        symbol: 'TT$',
        name: 'Trinidad and Tobago Dollar',
        symbol_native: '$',
        decimal_digits: 2,
        rounding: 0,
        code: 'TTD',
        name_plural: 'Trinidad and Tobago dollars',
    },
    TWD: {
        symbol: 'NT$',
        name: 'New Taiwan Dollar',
        symbol_native: 'NT$',
        decimal_digits: 2,
        rounding: 0,
        code: 'TWD',
        name_plural: 'New Taiwan dollars',
    },
    TZS: {
        symbol: 'TSh',
        name: 'Tanzanian Shilling',
        symbol_native: 'TSh',
        decimal_digits: 0,
        rounding: 0,
        code: 'TZS',
        name_plural: 'Tanzanian shillings',
    },
    UAH: {
        symbol: '₴',
        name: 'Ukrainian Hryvnia',
        symbol_native: '₴',
        decimal_digits: 2,
        rounding: 0,
        code: 'UAH',
        name_plural: 'Ukrainian hryvnias',
    },
    UGX: {
        symbol: 'USh',
        name: 'Ugandan Shilling',
        symbol_native: 'USh',
        decimal_digits: 0,
        rounding: 0,
        code: 'UGX',
        name_plural: 'Ugandan shillings',
    },
    UYU: {
        symbol: '$U',
        name: 'Uruguayan Peso',
        symbol_native: '$',
        decimal_digits: 2,
        rounding: 0,
        code: 'UYU',
        name_plural: 'Uruguayan pesos',
    },
    UZS: {
        symbol: 'UZS',
        name: 'Uzbekistan Som',
        symbol_native: 'UZS',
        decimal_digits: 0,
        rounding: 0,
        code: 'UZS',
        name_plural: 'Uzbekistan som',
    },
    VEF: {
        symbol: 'Bs.F.',
        name: 'Venezuelan Bolívar',
        symbol_native: 'Bs.F.',
        decimal_digits: 2,
        rounding: 0,
        code: 'VEF',
        name_plural: 'Venezuelan bolívars',
    },
    VND: {
        symbol: '₫',
        name: 'Vietnamese Dong',
        symbol_native: '₫',
        decimal_digits: 0,
        rounding: 0,
        code: 'VND',
        name_plural: 'Vietnamese dong',
    },
    XAF: {
        symbol: 'FCFA',
        name: 'CFA Franc BEAC',
        symbol_native: 'FCFA',
        decimal_digits: 0,
        rounding: 0,
        code: 'XAF',
        name_plural: 'CFA francs BEAC',
    },
    XOF: {
        symbol: 'CFA',
        name: 'CFA Franc BCEAO',
        symbol_native: 'CFA',
        decimal_digits: 0,
        rounding: 0,
        code: 'XOF',
        name_plural: 'CFA francs BCEAO',
    },
    YER: {
        symbol: 'YR',
        name: 'Yemeni Rial',
        symbol_native: 'ر.ي.‏',
        decimal_digits: 0,
        rounding: 0,
        code: 'YER',
        name_plural: 'Yemeni rials',
    },
    ZAR: {
        symbol: 'R',
        name: 'South African Rand',
        symbol_native: 'R',
        decimal_digits: 2,
        rounding: 0,
        code: 'ZAR',
        name_plural: 'South African rand',
    },
    ZMK: {
        symbol: 'ZK',
        name: 'Zambian Kwacha',
        symbol_native: 'ZK',
        decimal_digits: 0,
        rounding: 0,
        code: 'ZMK',
        name_plural: 'Zambian kwachas',
    },
    ZWL: {
        symbol: 'ZWL$',
        name: 'Zimbabwean Dollar',
        symbol_native: 'ZWL$',
        decimal_digits: 0,
        rounding: 0,
        code: 'ZWL',
        name_plural: 'Zimbabwean Dollar',
    },
};
const paymentTemplatesPageSize = 20;
const defaultResourceName = 'Payments';
const defaultPrivilege = 'create';
const CountriesMap = {
    AF: 'Afghanistan',
    AX: 'Aland Islands',
    AL: 'Albania',
    DZ: 'Algeria',
    AS: 'American Samoa',
    AD: 'Andorra',
    AO: 'Angola',
    AI: 'Anguilla',
    AQ: 'Antarctica',
    AG: 'Antigua and Barbuda',
    AR: 'Argentina',
    AM: 'Armenia',
    AW: 'Aruba',
    AU: 'Australia',
    AT: 'Austria',
    AZ: 'Azerbaijan',
    BS: 'Bahamas',
    BH: 'Bahrain',
    BD: 'Bangladesh',
    BB: 'Barbados',
    BY: 'Belarus',
    BE: 'Belgium',
    BZ: 'Belize',
    BJ: 'Benin',
    BM: 'Bermuda',
    BT: 'Bhutan',
    BO: 'Bolivia, Plurinational State of',
    BQ: 'Bonaire, Saint Eustatius and Saba',
    BA: 'Bosnia and Herzegovina',
    BW: 'Botswana',
    BV: 'Bouvet Island',
    BR: 'Brazil',
    IO: 'British Indian Ocean Territory',
    BN: 'Brunei Darussalam',
    BG: 'Bulgaria',
    BF: 'Burkina Faso',
    BI: 'Burundi',
    KH: 'Cambodia',
    CM: 'Cameroon',
    CA: 'Canada',
    CV: 'Cape Verde',
    KY: 'Cayman Islands',
    CF: 'Central African Republic',
    TD: 'Chad',
    CL: 'Chile',
    CN: 'China',
    CX: 'Christmas Island',
    CC: 'Cocos (Keeling) Islands',
    CO: 'Colombia',
    KM: 'Comoros',
    CG: 'Congo',
    CD: 'Congo, The Democratic Republic of the',
    CK: 'Cook Islands',
    CR: 'Costa Rica',
    CI: "Cote d'Ivoire",
    HR: 'Croatia',
    CU: 'Cuba',
    CW: 'Curacao',
    CY: 'Cyprus',
    CZ: 'Czech Republic',
    DK: 'Denmark',
    DJ: 'Djibouti',
    DM: 'Dominica',
    DO: 'Dominican Republic',
    EC: 'Ecuador',
    EG: 'Egypt',
    SV: 'El Salvador',
    GQ: 'Equatorial Guinea',
    ER: 'Eritrea',
    EE: 'Estonia',
    ET: 'Ethiopia',
    FK: 'Falkland Islands (Malvinas',
    FO: 'Faroe Islands',
    FJ: 'Fiji',
    FI: 'Finland',
    FR: 'France',
    GF: 'French Guiana',
    PF: 'French Polynesia',
    TF: 'French Southern Territories',
    GA: 'Gabon',
    GM: 'Gambia',
    GE: 'Georgia',
    DE: 'Germany',
    GH: 'Ghana',
    GI: 'Gibraltar',
    GR: 'Greece',
    GL: 'Greenland',
    GD: 'Grenada',
    GP: 'Guadeloupe',
    GU: 'Guam',
    GT: 'Guatemala',
    GG: 'Guernsey',
    GN: 'Guinea',
    GW: 'Guinea-Bissau',
    GY: 'Guyana',
    HT: 'Haiti',
    HM: 'Heard Island and McDonald Islands',
    VA: 'Holy See (Vatican City State',
    HN: 'Honduras',
    HK: 'Hong Kong',
    HU: 'Hungary',
    IS: 'Iceland',
    IN: 'India',
    ID: 'Indonesia',
    IR: 'Iran, Islamic Republic of',
    IQ: 'Iraq',
    IE: 'Ireland',
    IM: 'Isle of Man',
    IL: 'Israel',
    IT: 'Italy',
    JM: 'Jamaica',
    JP: 'Japan',
    JE: 'Jersey',
    JO: 'Jordan',
    KZ: 'Kazakhstan',
    KE: 'Kenya',
    KI: 'Kiribati',
    KP: "Korea, Democratic People's Republic of",
    KR: 'Korea, Republic of',
    KW: 'Kuwait',
    KG: 'Kyrgyzstan',
    LA: "Lao People's Democratic Republic",
    LV: 'Latvia',
    LB: 'Lebanon',
    LS: 'Lesotho',
    LR: 'Liberia',
    LY: 'Libyan Arab Jamahiriya',
    LI: 'Liechtenstein',
    LT: 'Lithuania',
    LU: 'Luxembourg',
    MO: 'Macao',
    MK: 'Macedonia, The Former Yugoslav Republic of',
    MG: 'Madagascar',
    MW: 'Malawi',
    MY: 'Malaysia',
    MV: 'Maldives',
    ML: 'Mali',
    MT: 'Malta',
    MH: 'Marshall Islands',
    MQ: 'Martinique',
    MR: 'Mauritania',
    MU: 'Mauritius',
    YT: 'Mayotte',
    MX: 'Mexico',
    FM: 'Micronesia, Federated States of',
    MD: 'Moldova, Republic of',
    MC: 'Monaco',
    MN: 'Mongolia',
    ME: 'Montenegro',
    MS: 'Montserrat',
    MA: 'Morocco',
    MZ: 'Mozambique',
    MM: 'Myanmar',
    NA: 'Namibia',
    NR: 'Nauru',
    NP: 'Nepal',
    NL: 'Netherlands',
    NC: 'New Caledonia',
    NZ: 'New Zealand',
    NI: 'Nicaragua',
    NE: 'Niger',
    NG: 'Nigeria',
    NU: 'Niue',
    NF: 'Norfolk Island',
    MP: 'Northern Mariana Islands',
    NO: 'Norway',
    PS: 'Occupied Palestinian Territory',
    OM: 'Oman',
    PK: 'Pakistan',
    PW: 'Palau',
    PA: 'Panama',
    PG: 'Papua New Guinea',
    PY: 'Paraguay',
    PE: 'Peru',
    PH: 'Philippines',
    PN: 'Pitcairn',
    PL: 'Poland',
    PT: 'Portugal',
    PR: 'Puerto Rico',
    QA: 'Qatar',
    RE: 'Reunion',
    RO: 'Romania',
    RU: 'Russian Federation',
    RW: 'Rwanda',
    BL: 'Saint Barthelemy',
    SH: 'Saint Helena, Ascension and Tristan da Cunha',
    KN: 'Saint Kitts and Nevis',
    LC: 'Saint Lucia',
    MF: 'Saint Martin (French part',
    PM: 'Saint Pierre and Miquelon',
    VC: 'Saint Vincent and The Grenadines',
    WS: 'Samoa',
    SM: 'San Marino',
    ST: 'Sao Tome and Principe',
    SA: 'Saudi Arabia',
    SN: 'Senegal',
    RS: 'Serbia',
    SC: 'Seychelles',
    SL: 'Sierra Leone',
    SG: 'Singapore',
    SX: 'Sint Maarten (Dutch part',
    SK: 'Slovakia',
    SI: 'Slovenia',
    SB: 'Solomon Islands',
    SO: 'Somalia',
    ZA: 'South Africa',
    GS: 'South Georgia and the South Sandwich Islands',
    ES: 'Spain',
    LK: 'Sri Lanka',
    SD: 'Sudan',
    SR: 'Suriname',
    SJ: 'Svalbard and Jan Mayen',
    SZ: 'Swaziland',
    SE: 'Sweden',
    CH: 'Switzerland',
    SY: 'Syrian Arab Republic',
    TW: 'Taiwan, Province of China',
    TJ: 'Tajikistan',
    TZ: 'Tanzania, United Republic of',
    TH: 'Thailand',
    TL: 'Timor-Leste',
    TG: 'Togo',
    TK: 'Tokelau',
    TO: 'Tonga',
    TT: 'Trinidad and Tobago',
    TN: 'Tunisia',
    TR: 'Turkey',
    TM: 'Turkmenistan',
    TC: 'Turks and Caicos Islands',
    TV: 'Tuvalu',
    UG: 'Uganda',
    UA: 'Ukraine',
    AE: 'United Arab Emirates',
    GB: 'United Kingdom',
    US: 'United States',
    UY: 'Uruguay',
    UZ: 'Uzbekistan',
    VU: 'Vanuatu',
    VE: 'Venezuela, Bolivarian Republic of',
    VN: 'Viet Nam',
    VG: 'Virgin Islands, British',
    VI: 'Virgin Islands, U.S',
    WF: 'Wallis and Futuna',
    EH: 'Western Sahara',
    YE: 'Yemen',
    ZM: 'Zambia',
    ZW: 'Zimbabwe',
};

const CurrencyToCountryMap = {
    BDT: 'BD',
    EUR: 'EU',
    XOF: 'TG',
    BGN: 'BG',
    BAM: 'BA',
    BBD: 'BB',
    XPF: 'NC',
    BMD: 'BM',
    BND: 'BN',
    BOB: 'BO',
    BHD: 'BH',
    BIF: 'BI',
    BTN: 'BT',
    JMD: 'JM',
    NOK: 'NO',
    BWP: 'BW',
    WST: 'WS',
    USD: 'US',
    BRL: 'BR',
    BSD: 'BS',
    GBP: 'IM',
    BYR: 'BY',
    BZD: 'BZ',
    RUB: 'RU',
    RWF: 'RW',
    RSD: 'RS',
    TMT: 'TM',
    TJS: 'TJ',
    RON: 'RO',
    NZD: 'CK',
    GTQ: 'GT',
    XAF: 'TD',
    JPY: 'JP',
    GYD: 'GY',
    GEL: 'GE',
    XCD: 'AI',
    GNF: 'GN',
    GMD: 'GM',
    DKK: 'DK',
    GIP: 'GI',
    GHS: 'GH',
    OMR: 'OM',
    TND: 'TN',
    JOD: 'JO',
    HRK: 'HR',
    HTG: 'HT',
    HUF: 'HU',
    HKD: 'HK',
    HNL: 'HN',
    AUD: 'AU',
    VEF: 'VE',
    ILS: 'IL',
    PYG: 'PY',
    IQD: 'IQ',
    PAB: 'PA',
    PGK: 'PG',
    PEN: 'PE',
    PKR: 'PK',
    PHP: 'PH',
    PLN: 'PL',
    ZMK: 'ZM',
    MAD: 'MA',
    EGP: 'EG',
    ZAR: 'ZA',
    VND: 'VN',
    SBD: 'SB',
    ETB: 'ET',
    SOS: 'SO',
    ZWL: 'ZW',
    SAR: 'SA',
    ERN: 'ER',
    MDL: 'MD',
    MGA: 'MG',
    UZS: 'UZ',
    MMK: 'MM',
    MOP: 'MO',
    MNT: 'MN',
    MKD: 'MK',
    MUR: 'MU',
    MWK: 'MW',
    MVR: 'MV',
    MRO: 'MR',
    UGX: 'UG',
    TZS: 'TZ',
    MYR: 'MY',
    MXN: 'MX',
    SHP: 'SH',
    FJD: 'FJ',
    FKP: 'FK',
    NIO: 'NI',
    NAD: 'NA',
    VUV: 'VU',
    NGN: 'NG',
    NPR: 'NP',
    CHF: 'LI',
    COP: 'CO',
    CNY: 'CN',
    CLP: 'CL',
    CAD: 'CA',
    CDF: 'CD',
    CZK: 'CZ',
    CRC: 'CR',
    ANG: 'SX',
    CVE: 'CV',
    CUP: 'CU',
    SZL: 'SZ',
    SYP: 'SY',
    KGS: 'KG',
    KES: 'KE',
    SSP: 'SS',
    SRD: 'SR',
    KHR: 'KH',
    KMF: 'KM',
    STD: 'ST',
    KRW: 'KR',
    KPW: 'KP',
    KWD: 'KW',
    SLL: 'SL',
    SCR: 'SC',
    KZT: 'KZ',
    KYD: 'KY',
    SGD: 'SG',
    SEK: 'SE',
    SDG: 'SD',
    DOP: 'DO',
    DJF: 'DJ',
    YER: 'YE',
    DZD: 'DZ',
    UYU: 'UY',
    LBP: 'LB',
    LAK: 'LA',
    TWD: 'TW',
    TTD: 'TT',
    TRY: 'TR',
    LKR: 'LK',
    TOP: 'TO',
    LTL: 'LT',
    LRD: 'LR',
    LSL: 'LS',
    THB: 'TH',
    LYD: 'LY',
    AED: 'AE',
    AFN: 'AF',
    ISK: 'IS',
    IRR: 'IR',
    AMD: 'AM',
    ALL: 'AL',
    AOA: 'AO',
    ARS: 'AR',
    AWG: 'AW',
    INR: 'IN',
    AZN: 'AZ',
    IDR: 'ID',
    UAH: 'UA',
    QAR: 'QA',
    MZN: 'MZ',
};

var Preferences;
(function (Preferences) {
    Preferences[Preferences["PAGE_SIZE"] = 50] = "PAGE_SIZE";
    Preferences[Preferences["MAX_NAV_SIZE"] = 3] = "MAX_NAV_SIZE";
    Preferences[Preferences["NOTIFICATION_DISMISS_TIMEOUT"] = 5000] = "NOTIFICATION_DISMISS_TIMEOUT";
    Preferences[Preferences["DEBOUNCE_TIME"] = 300] = "DEBOUNCE_TIME";
    Preferences[Preferences["INFINITE_SCROLL_OFFSET"] = 150] = "INFINITE_SCROLL_OFFSET";
})(Preferences || (Preferences = {}));
var LoadMoreMethod;
(function (LoadMoreMethod) {
    LoadMoreMethod["PAGINATION"] = "pagination";
    LoadMoreMethod["LOAD_MORE"] = "load-more";
})(LoadMoreMethod || (LoadMoreMethod = {}));
var StatusBadgeColorMap;
(function (StatusBadgeColorMap) {
    StatusBadgeColorMap["OPEN"] = "success";
    StatusBadgeColorMap["CLOSED"] = "danger";
    StatusBadgeColorMap["INVALID"] = "danger";
    StatusBadgeColorMap["VALID"] = "success";
    StatusBadgeColorMap["ENTERED"] = "primary";
    StatusBadgeColorMap["ACCEPTED"] = "success";
    StatusBadgeColorMap["APPROVED"] = "success";
    StatusBadgeColorMap["REJECTED"] = "danger";
    StatusBadgeColorMap["PROCESSED"] = "success";
    StatusBadgeColorMap["CANCELLED"] = "danger";
    StatusBadgeColorMap["CANCELLATION_PENDING"] = "danger";
    StatusBadgeColorMap["READY"] = "primary";
    StatusBadgeColorMap["ACKNOWLEDGED"] = "warning";
    StatusBadgeColorMap["DOWNLOADING"] = "warning";
    StatusBadgeColorMap["EXPIRED"] = "secondary";
    StatusBadgeColorMap["PENDING"] = "warning";
})(StatusBadgeColorMap || (StatusBadgeColorMap = {}));
var AvailableActions;
(function (AvailableActions) {
    AvailableActions["APPROVE"] = "APPROVE";
    AvailableActions["REJECT"] = "REJECT";
    AvailableActions["CANCEL"] = "CANCEL";
    AvailableActions["DELETE"] = "DELETE";
    AvailableActions["EDIT"] = "EDIT";
    AvailableActions["CREATE"] = "CREATE";
})(AvailableActions || (AvailableActions = {}));
var Actions;
(function (Actions) {
    Actions["APPROVE"] = "APPROVED";
    Actions["REJECT"] = "REJECTED";
})(Actions || (Actions = {}));
var BatchOrderActions;
(function (BatchOrderActions) {
    BatchOrderActions["APPROVE"] = "APPROVED";
    BatchOrderActions["REJECT"] = "REJECTED";
    BatchOrderActions["CANCEL"] = "CANCELLED";
    BatchOrderActions["DELETE"] = "DELETED";
})(BatchOrderActions || (BatchOrderActions = {}));
var Status;
(function (Status) {
    Status["OPEN"] = "OPEN";
    Status["CLOSED"] = "CLOSED";
    Status["INVALID"] = "INVALID";
    Status["VALID"] = "VALID";
    Status["ENTERED"] = "ENTERED";
    Status["READY"] = "READY";
    Status["ACCEPTED"] = "ACCEPTED";
    Status["APPROVED"] = "APPROVED";
    Status["REJECTED"] = "REJECTED";
    Status["CANCELLED"] = "CANCELLED";
    Status["CANCELLATION_PENDING"] = "CANCELLATION_PENDING";
    Status["PROCESSED"] = "PROCESSED";
    Status["ACKNOWLEDGED"] = "ACKNOWLEDGED";
    Status["DOWNLOADING"] = "DOWNLOADING";
    Status["EXPIRED"] = "EXPIRED";
    Status["PENDING"] = "PENDING";
    /**
     * PROCESSING is Front-end only, convert to `READY`, `ACKNOWLEDGED`,
     * and `DOWNLOADING` before sending to server.
     */
    Status["PROCESSING"] = "PROCESSING";
})(Status || (Status = {}));
var BatchUploadStatus;
(function (BatchUploadStatus) {
    BatchUploadStatus["OPEN"] = "OPEN";
    BatchUploadStatus["DUPLICATE"] = "DUPLICATE";
    BatchUploadStatus["UPLOADING"] = "UPLOADING";
    BatchUploadStatus["DONE"] = "DONE";
})(BatchUploadStatus || (BatchUploadStatus = {}));
var ApprovalStatus;
(function (ApprovalStatus) {
    ApprovalStatus["PENDING"] = "PENDING";
    ApprovalStatus["APPROVED"] = "APPROVED";
    ApprovalStatus["REJECTED"] = "REJECTED";
    ApprovalStatus["CANCELLED"] = "CANCELLED";
})(ApprovalStatus || (ApprovalStatus = {}));
var DuplicateBatchAction;
(function (DuplicateBatchAction) {
    DuplicateBatchAction["SUBMIT"] = "SUBMIT";
    DuplicateBatchAction["DELETE"] = "DELETE";
})(DuplicateBatchAction || (DuplicateBatchAction = {}));
var ScheduleEndType;
(function (ScheduleEndType) {
    ScheduleEndType["NEVER"] = "never";
    ScheduleEndType["ON"] = "on";
    ScheduleEndType["AFTER"] = "after";
})(ScheduleEndType || (ScheduleEndType = {}));
var Frequencies;
(function (Frequencies) {
    Frequencies["ONCE"] = "ONCE";
    Frequencies["DAILY"] = "DAILY";
    Frequencies["WEEKLY"] = "WEEKLY";
    Frequencies["BIWEEKLY"] = "BIWEEKLY";
    Frequencies["MONTHLY"] = "MONTHLY";
    Frequencies["QUARTERLY"] = "QUARTERLY";
    Frequencies["YEARLY"] = "YEARLY";
})(Frequencies || (Frequencies = {}));
var PaymentModes;
(function (PaymentModes) {
    PaymentModes["SINGLE"] = "SINGLE";
    PaymentModes["RECURRING"] = "RECURRING";
    PaymentModes["ALL"] = "ALL";
})(PaymentModes || (PaymentModes = {}));
const DefaultDebounceTime = 300;
const SearchMinLength = 3;
const today = new Date();
/**
 * Label for each value is set using Angular recommended approach
 * https://angular.io/guide/i18n#select-among-alternative-text-messages
 * Template example
 * <span i18n="Schedule frequency list|List of available schedule frequencies@@bb-schedule-ui.frequency.list"
 * >{item.frequency.value, select, other {once} DAILY {daily} WEEKLY {weekly}}</span>
 */
const frequencies = [
    {
        value: 'ONCE',
        every: '1',
    },
    {
        value: 'DAILY',
        every: '1',
    },
    {
        value: 'WEEKLY',
        every: '1',
    },
    {
        value: 'BIWEEKLY',
        every: '1',
    },
    {
        value: 'MONTHLY',
        every: '1',
    },
    {
        value: 'QUARTERLY',
        every: '1',
    },
    {
        value: 'YEARLY',
        every: '1',
    },
];
const USStates = [
    { id: 'AL', name: 'Alabama' },
    { id: 'AK', name: 'Alaska' },
    { id: 'AS', name: 'American Samoa' },
    { id: 'AZ', name: 'Arizona' },
    { id: 'AR', name: 'Arkansas' },
    { id: 'CA', name: 'California' },
    { id: 'CO', name: 'Colorado' },
    { id: 'CT', name: 'Connecticut' },
    { id: 'DE', name: 'Delaware' },
    { id: 'DC', name: 'District Of Columbia' },
    { id: 'FM', name: 'Federated States Of Micronesia' },
    { id: 'FL', name: 'Florida' },
    { id: 'GA', name: 'Georgia' },
    { id: 'GU', name: 'Guam' },
    { id: 'HI', name: 'Hawaii' },
    { id: 'ID', name: 'Idaho' },
    { id: 'IL', name: 'Illinois' },
    { id: 'IN', name: 'Indiana' },
    { id: 'IA', name: 'Iowa' },
    { id: 'KS', name: 'Kansas' },
    { id: 'KY', name: 'Kentucky' },
    { id: 'LA', name: 'Louisiana' },
    { id: 'ME', name: 'Maine' },
    { id: 'MH', name: 'Marshall Islands' },
    { id: 'MD', name: 'Maryland' },
    { id: 'MA', name: 'Massachusetts' },
    { id: 'MI', name: 'Michigan' },
    { id: 'MN', name: 'Minnesota' },
    { id: 'MS', name: 'Mississippi' },
    { id: 'MO', name: 'Missouri' },
    { id: 'MT', name: 'Montana' },
    { id: 'NE', name: 'Nebraska' },
    { id: 'NV', name: 'Nevada' },
    { id: 'NH', name: 'New Hampshire' },
    { id: 'NJ', name: 'New Jersey' },
    { id: 'NM', name: 'New Mexico' },
    { id: 'NY', name: 'New York' },
    { id: 'NC', name: 'North Carolina' },
    { id: 'ND', name: 'North Dakota' },
    { id: 'MP', name: 'Northern Mariana Islands' },
    { id: 'OH', name: 'Ohio' },
    { id: 'OK', name: 'Oklahoma' },
    { id: 'OR', name: 'Oregon' },
    { id: 'PW', name: 'Palau' },
    { id: 'PA', name: 'Pennsylvania' },
    { id: 'PR', name: 'Puerto Rico' },
    { id: 'RI', name: 'Rhode Island' },
    { id: 'SC', name: 'South Carolina' },
    { id: 'SD', name: 'South Dakota' },
    { id: 'TN', name: 'Tennessee' },
    { id: 'TX', name: 'Texas' },
    { id: 'UT', name: 'Utah' },
    { id: 'VT', name: 'Vermont' },
    { id: 'VI', name: 'Virgin Islands' },
    { id: 'VA', name: 'Virginia' },
    { id: 'WA', name: 'Washington' },
    { id: 'WV', name: 'West Virginia' },
    { id: 'WI', name: 'Wisconsin' },
    { id: 'WY', name: 'Wyoming' },
];
var BatchOrderError;
(function (BatchOrderError) {
    BatchOrderError["BREACH_LIMIT"] = "BREACH_LIMIT";
    BatchOrderError["UNKNOWN"] = "UNKNOWN";
})(BatchOrderError || (BatchOrderError = {}));
var Period;
(function (Period) {
    Period[Period["DAILY"] = 0] = "DAILY";
    Period[Period["WEEKLY"] = 1] = "WEEKLY";
    Period[Period["MONTHLY"] = 2] = "MONTHLY";
    Period[Period["QUARTERLY"] = 3] = "QUARTERLY";
    Period[Period["YEARLY"] = 4] = "YEARLY";
})(Period || (Period = {}));
var BreachedLimitType;
(function (BreachedLimitType) {
    BreachedLimitType["PERIODIC"] = "PERIODIC";
    BreachedLimitType["TRANSACTIONAL"] = "TRANSACTIONAL";
    BreachedLimitType["GLOBAL_PERIODIC"] = "GLOBAL_PERIODIC";
    BreachedLimitType["GLOBAL_TRANSACTIONAL"] = "GLOBAL_TRANSACTIONAL";
})(BreachedLimitType || (BreachedLimitType = {}));
var BreachType;
(function (BreachType) {
    BreachType["THRESHOLD"] = "THRESHOLD";
    BreachType["CONSUMPTION"] = "CONSUMPTION";
})(BreachType || (BreachType = {}));
const THEME_V2 = {
    name: 'THEME_V2',
    description: 'Switch to templates that support theme v2',
};
const MANUAL_BATCHES = {
    name: 'MANUAL_BATCHES',
    description: 'Features enabled when whole functionality of Manual Batches is implemented',
};

const getDateOnly = (dateArg = new Date()) => {
    const date = new Date(dateArg);
    const month = String(date.getMonth() + 1);
    const day = String(date.getDate());
    const year = String(date.getFullYear());
    return `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;
};
const getRelativeDate = (next, ISOStringFormat) => {
    const date = new Date();
    if (next) {
        date.setDate(date.getDate() + next);
    }
    return ISOStringFormat ? date.toISOString() : getDateOnly(date);
};
const datePart = (date) => {
    let normalisedDate = new Date();
    if (date) {
        if (typeof date === 'string') {
            normalisedDate = new Date(date);
        }
        else if (date instanceof Date) {
            normalisedDate = date;
        }
    }
    return getDateOnly(normalisedDate);
};
const scheduleOn = (frequency, date) => {
    switch (frequency) {
        case 'YEARLY':
            return date.getMonth() + 1;
        case 'MONTHLY':
            return date.getDate();
        default:
            return date.getDay() + 1;
    }
};
const getEndDate = (frequency, startDate) => {
    const freq = (frequency && frequency.value) || frequency;
    const today = startDate ? new Date(startDate) : new Date();
    switch (freq) {
        case Frequencies.ONCE:
            return undefined;
        case Frequencies.WEEKLY: {
            return new Date(today.getFullYear(), today.getMonth(), today.getDate() + 7).toISOString();
        }
        case Frequencies.BIWEEKLY: {
            return new Date(today.getFullYear(), today.getMonth(), today.getDate() + 14).toISOString();
        }
        case Frequencies.MONTHLY: {
            return new Date(today.getFullYear(), today.getMonth() + 1, today.getDate()).toISOString();
        }
        case Frequencies.QUARTERLY: {
            return new Date(today.getFullYear(), today.getMonth() + 3, today.getDate()).toISOString();
        }
        case Frequencies.YEARLY: {
            return new Date(today.getFullYear() + 1, today.getMonth(), today.getDate()).toISOString();
        }
        case Frequencies.DAILY:
        default: {
            return new Date(today.getFullYear(), today.getMonth(), today.getDate() + 1).toISOString();
        }
    }
};

function scheduleEndTypeToggleDependants(value) {
    switch (value) {
        case ScheduleEndType.ON:
            return [ScheduleFields.endDate];
        case ScheduleEndType.AFTER:
            return [ScheduleFields.repeat];
        default:
            return;
    }
}
function scheduleFrequencyToggleDependants(value) {
    return value !== Frequencies.ONCE ? [ScheduleFields.endType] : undefined;
}
let onDestroyStartDate$;
let onDestroyEndDate$;
const getNgbTime = (date) => new Date(date.year, date.month - 1, date.day).getTime();
const oneDay = 24 * 60 * 60 * 1000;
function scheduleStartDateOnDestroyHook() {
    if (onDestroyStartDate$) {
        onDestroyStartDate$.next();
        onDestroyStartDate$.complete();
    }
    if (onDestroyEndDate$) {
        onDestroyEndDate$.next();
        onDestroyEndDate$.complete();
    }
}
function scheduleStartDateOnInitHook({ control, group, component, }) {
    onDestroyStartDate$ = new Subject();
    if (group) {
        group.valueChanges
            .pipe(takeUntil(onDestroyStartDate$), pluck(ScheduleFields.frequency), distinctUntilChanged())
            .subscribe((value) => {
            if (value === Frequencies.ONCE) {
                component.options.label = 'Execution date';
            }
            else {
                component.options.label = 'Start on';
            }
            component.options.markDisabled = (date) => getNgbTime(date) < new Date().getTime() - oneDay;
        });
    }
}
function scheduleEndDateOnInitHook({ control, group, component, }) {
    onDestroyEndDate$ = new Subject();
    const startDate = group && group.get(ScheduleFields.startDate);
    const frequency = group && group.get(ScheduleFields.frequency);
    const endType = group && group.get(ScheduleFields.endType);
    if (startDate && !startDate.pristine && frequency && control.pristine) {
        control.patchValue(getEndDate(frequency.value, startDate.value));
    }
    if (startDate && frequency && endType) {
        combineLatest([
            startDate.valueChanges.pipe(startWith(startDate.value), distinctUntilChanged()),
            frequency.valueChanges.pipe(startWith(frequency.value), distinctUntilChanged()),
            endType.valueChanges.pipe(startWith(endType.value), distinctUntilChanged()),
        ])
            .pipe(takeUntil(onDestroyEndDate$), skip(1))
            .subscribe(() => {
            if (control) {
                const endDate = getEndDate(frequency.value, startDate.value);
                control.patchValue(endDate);
                component.options.markDisabled = (date) => getNgbTime(date) < new Date(endDate || '').getTime();
            }
        });
    }
}
function toggleForAmountOptions(_, control, amountOptions) {
    var _a, _b, _c, _d;
    const selectedAccKind = control && control.parent ? (_a = control.parent.value) === null || _a === void 0 ? void 0 : _a.productKindName : null;
    const product = control && control.parent
        ? (_c = (_b = control.parent.value) === null || _b === void 0 ? void 0 : _b.accountData) === null || _c === void 0 ? void 0 : _c.defaultRecord
        : null;
    const isAmountOptionsZero = (_d = amountOptions === null || amountOptions === void 0 ? void 0 : amountOptions.creditCard) === null || _d === void 0 ? void 0 : _d.every((option) => (option === null || option === void 0 ? void 0 : option.amountApiField)
        ? Number(product === null || product === void 0 ? void 0 : product[option.amountApiField]) === 0
        : true);
    if (selectedAccKind === ProductKinds.creditCard ||
        selectedAccKind === ProductKinds.loanAccount) {
        const items = [RemittanceInfoFields.amountOptions];
        if (selectedAccKind === ProductKinds.creditCard && isAmountOptionsZero) {
            items.push(RemittanceInfoFields.amountCurrencyGroup);
        }
        return [
            {
                parent: PaymentBaseFields.remittanceInfo,
                items,
            },
        ];
    }
    return [
        {
            parent: PaymentBaseFields.remittanceInfo,
            items: [
                RemittanceInfoFields.description,
                RemittanceInfoFields.amountCurrencyGroup,
            ],
        },
    ];
}
// Internal transfer onInit-onDestroy hooks
let internalTransferDestroy$;
function internalTransferScheduleFreqOnInitHook({ control, group, component, }) {
    var _a, _b, _c, _d;
    internalTransferDestroy$ = new Subject();
    const initialOptions = component.options.options;
    const frequencyCtrl = (_b = (_a = group.parent) === null || _a === void 0 ? void 0 : _a.get(PaymentBaseFields.remittanceInfo)) === null || _b === void 0 ? void 0 : _b.get('scheduleFrequency');
    const paymentType$ = (_d = (_c = group.parent) === null || _c === void 0 ? void 0 : _c.get('paymentType')) === null || _d === void 0 ? void 0 : _d.valueChanges;
    paymentType$ === null || paymentType$ === void 0 ? void 0 : paymentType$.pipe(takeUntil(internalTransferDestroy$)).subscribe((paymentType) => {
        if (paymentType === 'EXTERNAL_A2A') {
            const optionsWithoutDaily = initialOptions.filter((opt) => opt.value !== Frequencies.DAILY);
            component.options.options = optionsWithoutDaily;
        }
        else {
            component.options.options = initialOptions;
        }
        component.toggleDependants();
    });
    frequencyCtrl === null || frequencyCtrl === void 0 ? void 0 : frequencyCtrl.valueChanges.pipe(takeUntil(internalTransferDestroy$), startWith(frequencyCtrl.value)).subscribe((scheduleFrequency) => {
        const scheduleOptions = scheduleFrequency || initialOptions;
        component.options.options = scheduleOptions;
        const isFreqExistInOptions = scheduleOptions.find(({ value }) => value === control.value);
        // Check whether previously selected frequency is in options
        if (!isFreqExistInOptions) {
            control.setValue(component.options.defaultValue);
            component.toggleDependants();
        }
    });
}
function internalTransferOnDestroyHook() {
    if (internalTransferDestroy$) {
        internalTransferDestroy$.next();
        internalTransferDestroy$.complete();
    }
}
function internalTransferScheduleAlertOnInitHook({ group, component, }) {
    var _a, _b;
    internalTransferDestroy$ = new Subject();
    const { config, options } = component;
    (_b = (_a = group === null || group === void 0 ? void 0 : group.parent) === null || _a === void 0 ? void 0 : _a.get(PaymentBaseFields.counterparty)) === null || _b === void 0 ? void 0 : _b.valueChanges.pipe(filter((account) => {
        const isCreditCardOrLoan = [
            ProductKinds.creditCard,
            ProductKinds.loanAccount,
        ].includes(account === null || account === void 0 ? void 0 : account.productKindName);
        config.hidden = !isCreditCardOrLoan;
        return isCreditCardOrLoan;
    }), takeUntil(internalTransferDestroy$)).subscribe((account) => {
        var _a, _b, _c, _d, _e;
        const dueDate = new Date((_b = (_a = account === null || account === void 0 ? void 0 : account.accountData) === null || _a === void 0 ? void 0 : _a.defaultRecord) === null || _b === void 0 ? void 0 : _b.minimumPaymentDueDate);
        if (dueDate) {
            const fullMonth = dueDate.toLocaleDateString('default', {
                month: 'long',
            });
            const formattedDueDate = `${fullMonth} ${dueDate.getDate()}, ${dueDate.getFullYear()}`;
            const alert = new Date().getTime() >= dueDate.getTime()
                ? (_c = options.alerts) === null || _c === void 0 ? void 0 : _c.overdue
                : (_d = options.alerts) === null || _d === void 0 ? void 0 : _d.undue;
            if (alert) {
                alert.description = (_e = alert.description) === null || _e === void 0 ? void 0 : _e.replace('@@date', formattedDueDate);
            }
            component.options = Object.assign(Object.assign({}, options), (alert ? alert : {}));
        }
    });
}
function internalTransAmountOptToggleDependants(_, control) {
    var _a;
    const showFreqSwitch = control && control.parent
        ? (_a = control.parent.get('showFrequencySwitch')) === null || _a === void 0 ? void 0 : _a.value
        : null;
    const items = showFreqSwitch
        ? [ScheduleFields.frequencySwitch]
        : [ScheduleFields.frequency];
    return [
        {
            parent: PaymentBaseFields.schedule,
            items,
        },
    ];
}
function internalTransScheduleStartDateOnInitHook({ control, group, component, }) {
    var _a, _b, _c;
    scheduleStartDateOnInitHook({ control, group, component });
    internalTransferDestroy$ = new Subject();
    const { options } = component;
    const defaultDescription = options.description;
    component.options = Object.assign(Object.assign({}, options), { description: '' }); // No description until an account is selected
    const date$ = control === null || control === void 0 ? void 0 : control.valueChanges.pipe(startWith(control.value));
    const account$ = (_b = (_a = group === null || group === void 0 ? void 0 : group.parent) === null || _a === void 0 ? void 0 : _a.get(PaymentBaseFields.counterparty)) === null || _b === void 0 ? void 0 : _b.valueChanges.pipe(startWith((_c = group.parent.get(PaymentBaseFields.counterparty)) === null || _c === void 0 ? void 0 : _c.value), filter((account) => [ProductKinds.creditCard, ProductKinds.loanAccount].includes(account === null || account === void 0 ? void 0 : account.productKindName)));
    combineLatest([account$, date$])
        .pipe(takeUntil(internalTransferDestroy$))
        .subscribe(([account, date]) => {
        var _a, _b;
        const dueDate = new Date((_b = (_a = account === null || account === void 0 ? void 0 : account.accountData) === null || _a === void 0 ? void 0 : _a.defaultRecord) === null || _b === void 0 ? void 0 : _b.minimumPaymentDueDate).getTime();
        const executeDate = new Date(date).getTime();
        if (dueDate && executeDate) {
            component.options.description =
                executeDate >= dueDate && dueDate >= new Date().getTime()
                    ? defaultDescription
                    : '';
        }
    });
}
function intrabankCheckboxOnInitHook({ control, group, component, }) {
    var _a, _b, _c;
    internalTransferDestroy$ = new Subject();
    const contactNameCtrl = (_a = group.parent) === null || _a === void 0 ? void 0 : _a.get(`${PaymentBaseFields.counterparty}.${CounterPartyFields.name}`);
    const contactNumberCtrl = (_b = group.parent) === null || _b === void 0 ? void 0 : _b.get(`${PaymentBaseFields.counterparty}.${CounterPartyFields.accountNumber}`);
    const selectedContact = (_c = group.parent) === null || _c === void 0 ? void 0 : _c.get(`${PaymentBaseFields.counterparty}.${HiddenFields.selectedBeneficiary}`);
    combineLatest([
        contactNameCtrl === null || contactNameCtrl === void 0 ? void 0 : contactNameCtrl.valueChanges,
        contactNumberCtrl === null || contactNumberCtrl === void 0 ? void 0 : contactNumberCtrl.valueChanges,
        selectedContact === null || selectedContact === void 0 ? void 0 : selectedContact.valueChanges,
    ])
        .pipe(takeUntil(internalTransferDestroy$))
        .subscribe(([typedName, typedAccountNumber, { name, accounts }]) => {
        const { accountNumber, email, phoneNumber } = accounts[0];
        const isFormValuesEqualToSavedContact = typedName === name &&
            [accountNumber, email, phoneNumber].includes(typedAccountNumber);
        component.options.disabled = isFormValuesEqualToSavedContact;
        if (isFormValuesEqualToSavedContact) {
            control.reset();
        }
    });
}
function internalTransferEndTypeOnInitHook({ group, component, }) {
    var _a, _b;
    internalTransferDestroy$ = new Subject();
    const initialOptions = component.options.options;
    const initialCssClasses = component.options.cssClasses;
    const paymentType$ = (_b = (_a = group.parent) === null || _a === void 0 ? void 0 : _a.get('paymentType')) === null || _b === void 0 ? void 0 : _b.valueChanges;
    paymentType$ === null || paymentType$ === void 0 ? void 0 : paymentType$.pipe(takeUntil(internalTransferDestroy$)).subscribe((paymentType) => {
        if (paymentType === 'EXTERNAL_A2A') {
            component.options.options = initialOptions.filter((opt) => opt.value !== ScheduleEndType.ON);
            component.options.cssClasses = initialCssClasses.filter((i) => i !== 'bb-schedule__end-type');
        }
        else {
            component.options.options = initialOptions;
            component.options.cssClasses = initialCssClasses;
        }
    });
}
function internalTransferRepeatOnInitHook({ group, component, }) {
    var _a, _b;
    internalTransferDestroy$ = new Subject();
    const initialCssClasses = component.options.cssClasses;
    const paymentType$ = (_b = (_a = group.parent) === null || _a === void 0 ? void 0 : _a.get('paymentType')) === null || _b === void 0 ? void 0 : _b.valueChanges;
    paymentType$ === null || paymentType$ === void 0 ? void 0 : paymentType$.pipe(takeUntil(internalTransferDestroy$)).subscribe((paymentType) => {
        component.options.cssClasses = [
            ...initialCssClasses,
            ...(paymentType === 'EXTERNAL_A2A'
                ? ['bb-schedule__repeat--two-option']
                : []),
        ];
    });
}

function amountValidator(control) {
    return control.value &&
        control.value.amount > 0 &&
        control.value.currency.length > 0
        ? undefined
        : { invalidAmount: { value: control.value } };
}
function missingInListValidator(getIdsFn) {
    return function (control) {
        return getIdsFn().includes(control.value) || !control.value
            ? null
            : { missingInList: { value: control.value } };
    };
}
function pastDateValidator(control) {
    const selectedDate = new Date(control.value);
    return control.value &&
        today > selectedDate &&
        today.toDateString() !== selectedDate.toDateString()
        ? { pastDate: { value: control.value } }
        : null;
}
function maxValueTwoHundredValidator(control) {
    const value = parseFloat(control.value);
    return !isNaN(value) && value > 200
        ? { max: { max: 200, actual: control.value } }
        : null;
}
function minValueTwoValidator(control) {
    const value = parseFloat(control.value);
    return !isNaN(value) && value < 2
        ? { min: { min: 2, actual: control.value } }
        : null;
}
function endDateAfterStartDateValidator(control) {
    if (control.parent) {
        const parentControl = control.parent;
        const startDateControl = parentControl.get('startDate');
        const startDate = new Date(startDateControl.value);
        const endDate = new Date(control.value);
        return control.value &&
            startDate > endDate &&
            startDate.toDateString() !== endDate.toDateString()
            ? { lessThanStartDate: true }
            : undefined;
    }
    return;
}
function sameAccountsValidator(config) {
    return (control) => {
        var _a, _b, _c;
        const parentForm = (_a = control === null || control === void 0 ? void 0 : control.parent) === null || _a === void 0 ? void 0 : _a.parent;
        const debitAccountId = (_b = parentForm === null || parentForm === void 0 ? void 0 : parentForm.get(['initiator', 'id'])) === null || _b === void 0 ? void 0 : _b.value;
        const creditAccountId = (_c = parentForm === null || parentForm === void 0 ? void 0 : parentForm.get(['counterparty', 'id'])) === null || _c === void 0 ? void 0 : _c.value;
        if (control.value && debitAccountId && debitAccountId === creditAccountId) {
            return { sameDebitCreditAccountsSelected: true };
        }
        return null;
    };
}
function scheduledPaymentValidationMethod(control, _endType) {
    if (control.parent) {
        const parentControl = control.parent;
        const { endType, frequency } = parentControl && parentControl.value;
        return frequency.value !== 'ONCE' &&
            endType &&
            !control.value &&
            endType === _endType
            ? { required: true }
            : undefined;
    }
    return;
}
function requiredEndDateValidator(control) {
    return scheduledPaymentValidationMethod(control, 'on');
}
function requiredAfterValidator(control) {
    return scheduledPaymentValidationMethod(control, 'after');
}
function requiredEndTypeValidator(control) {
    if (control.parent) {
        const parentControl = control.parent;
        const { frequency: { value: _value }, } = parentControl && parentControl.value;
        return !control.value && _value && _value !== 'ONCE'
            ? { required: true }
            : undefined;
    }
    return;
}
function routingTransitNumberValidator(control) {
    let { value } = control;
    const errors = {
        pattern: false,
        size: false,
    };
    if (value) {
        value = value.toString(10);
        const p = (str) => parseInt(str, 10);
        if (value.length !== 9) {
            errors.size = true;
        }
        const left = 3 * (p(value[0]) + p(value[3]) + p(value[6]));
        const mid = 7 * (p(value[1]) + p(value[4]) + p(value[7]));
        const right = p(value[2]) + p(value[5]) + p(value[8]);
        if ((left + mid + right) % 10 !== 0 && value.length >= 9) {
            errors.pattern = true;
        }
    }
    return errors.size || errors.pattern ? errors : null;
}
function noWhitespaceValidator(control) {
    const isWhitespace = (control.value || '').trim().length === 0;
    const isValid = !isWhitespace;
    return isValid ? null : { required: true };
}
function getSanctionedCurrencies(control) {
    var _a, _b, _c, _d;
    const { inputFormSettings } = ((_c = (_b = (_a = control === null || control === void 0 ? void 0 : control.parent) === null || _a === void 0 ? void 0 : _a.parent) === null || _b === void 0 ? void 0 : _b.get('inputFormFromSettings')) === null || _c === void 0 ? void 0 : _c.value) || {};
    return (((_d = inputFormSettings === null || inputFormSettings === void 0 ? void 0 : inputFormSettings.find((setting) => setting.key === 'currency')) === null || _d === void 0 ? void 0 : _d.values) || []);
}
function currencyValidatorFactory(currencies = []) {
    return (control) => {
        const sanctionedCurrencies = currencies.length
            ? currencies
            : getSanctionedCurrencies(control);
        if (!sanctionedCurrencies.length) {
            return null;
        }
        const pattern = `(${sanctionedCurrencies.join('|')})`;
        const regex = new RegExp(pattern);
        const isValid = regex.test(control.value && control.value.currency);
        return isValid ? null : { invalidCurrency: true };
    };
}
function accountsValidation(rootControlName) {
    return (control) => {
        var _a, _b;
        if (control.root && control.parent) {
            const rootControl = control.root;
            const fromControl = rootControl.get(rootControlName);
            const fromAccount = (_a = fromControl === null || fromControl === void 0 ? void 0 : fromControl.get('id')) === null || _a === void 0 ? void 0 : _a.value;
            const selectedAccount = (_b = control.parent.get('id')) === null || _b === void 0 ? void 0 : _b.value;
            return control.parent.value && fromAccount === selectedAccount
                ? { sameAccount: true }
                : null;
        }
        return null;
    };
}
function minimumOneAccount(control) {
    return control.controls.length > 0 ? null : { empty: true };
}
function amountGreaterThanZero(control) {
    return control.value > 0
        ? undefined
        : { invalidAmount: { value: control.value } };
}

const defaultInitiatorConfig = {
    name: PaymentBaseFields.initiator,
    title: $localize `:@@default-config.initiator-title:From`,
    fields: [
        {
            type: PaymentComponents.debitAccountSelector,
            name: InitiatorFields.initiatorAccountGroup,
            options: {
                placeholder: $localize `:@@default-config.initiator-placeholder:Select an account`,
                cssClasses: ['col-12'],
                validationMessages: [
                    {
                        message: $localize `:@@default-config.invalid-account-message:Debit account is invalid`,
                        name: 'missingInList',
                    },
                    {
                        message: $localize `:@@default-config.closed-permission-error-message:You can not do payments to new beneficiary from this account.`,
                        name: 'hasOnlyClosedPaymentPermission',
                    },
                ],
            },
        },
    ],
};
const defaultCounterPartyConfig = {
    name: PaymentBaseFields.counterparty,
    fields: [
        {
            name: CounterPartyFields.name,
            type: PaymentComponents.beneficiarySelector,
            options: {
                label: $localize `:@@default-config.beneficiary-label:To`,
                placeholder: $localize `:@@default-config.beneficiary-placeholder:Select a beneficiary`,
                saveNewContactLabel: $localize `:@@default-config.new-contact-label:Save as a new contact`,
                cssClasses: ['col-12'],
                validationMessages: [
                    {
                        message: $localize `:@@default-config.same-accounts-selected-error-message:Beneficiary is same as selected Debit account`,
                        name: 'sameDebitCreditAccountsSelected',
                    },
                ],
            },
        },
        {
            name: CounterPartyFields.accountNumber,
            type: PaymentComponents.text,
            options: {
                validators: [Validators.required, Validators.minLength(6)],
                label: $localize `:@@default-config.account-number-label:Account number`,
                validationMessages: [
                    {
                        name: 'minlength',
                        message: $localize `:@@default-config.account-number-min-length-error-message:Account number should have minimum 6 characters`,
                    },
                ],
                cssClasses: ['col-12'],
            },
        },
    ],
};
const defaultRemittanceInfoConfig = {
    name: PaymentBaseFields.remittanceInfo,
    fields: [
        {
            type: PaymentComponents.amount,
            name: RemittanceInfoFields.amountCurrencyGroup,
            options: {
                label: $localize `:@@default-config.currency-label:Amount`,
                currencies: ['GBP', 'EUR', 'USD'],
                cssClasses: ['col-12'],
            },
        },
    ],
};
const defaultScheduleConfig = {
    name: PaymentBaseFields.schedule,
    fields: [
        {
            name: PaymentComponents.scheduleHeader,
            type: PaymentComponents.scheduleHeader,
            options: {
                label: $localize `:@@default-config.schedule-header:Delivery`,
            },
        },
        {
            name: ScheduleFields.frequency,
            type: PaymentComponents.select,
            options: {
                label: $localize `:@@default-config.frequency-label:Frequency`,
                validators: [Validators.required],
                options: [
                    {
                        label: $localize `:@@default-config.once-frequency-label:Once`,
                        value: Frequencies.ONCE,
                    },
                    {
                        label: $localize `:@@default-config.daily-frequency-label:Daily`,
                        value: Frequencies.DAILY,
                    },
                    {
                        label: $localize `:@@default-config.weekly-frequency-label:Weekly`,
                        value: Frequencies.WEEKLY,
                    },
                    {
                        label: $localize `:@@default-config.biweekly-frequency-label:Biweekly`,
                        value: Frequencies.BIWEEKLY,
                    },
                    {
                        label: $localize `:@@default-config.monthly-frequency-label:Monthly`,
                        value: Frequencies.MONTHLY,
                    },
                    {
                        label: $localize `:@@default-config.quarterly-frequency-label:Quarterly`,
                        value: Frequencies.QUARTERLY,
                    },
                    {
                        label: $localize `:@@default-config.annually-frequency-label:Annually`,
                        value: Frequencies.YEARLY,
                    },
                ],
                defaultValue: Frequencies.ONCE,
                cssClasses: ['d-inline-block', 'col-md-6', 'align-top'],
                dependants: [ScheduleFields.endType],
                activateDependantsOn: scheduleFrequencyToggleDependants,
            },
        },
        {
            type: PaymentComponents.date,
            name: ScheduleFields.startDate,
            options: {
                label: $localize `:@@default-config.start-date-label:Start on`,
                cssClasses: ['d-inline-block', 'col-md-6', 'align-top'],
                validators: [Validators.required, pastDateValidator],
                defaultValue: new Date().toISOString(),
                validationMessages: [
                    {
                        name: 'pastDate',
                        message: $localize `:@@default-config.past-date-error-message:Start date cannot be in the past`,
                    },
                ],
            },
            hooks: {
                onInit: scheduleStartDateOnInitHook,
                onDestroy: scheduleStartDateOnDestroyHook,
            },
        },
        {
            name: ScheduleFields.endType,
            type: PaymentComponents.radio,
            options: {
                label: $localize `:@@default-config.end-type-label:End`,
                preselect: true,
                isConditionalMandatory: true,
                cssClasses: [
                    'd-inline-block',
                    'col-md-2',
                    'align-top',
                    'bb-schedule__end-type',
                ],
                defaultValue: ScheduleEndType.NEVER,
                options: [
                    {
                        label: $localize `:@@default-config.never-end-type-label:Never`,
                        value: ScheduleEndType.NEVER,
                    },
                    {
                        label: $localize `:@@default-config.on-date-end-type-label:On date`,
                        value: ScheduleEndType.ON,
                    },
                    {
                        label: $localize `:@@default-config.after-end-type-label:After`,
                        value: ScheduleEndType.AFTER,
                    },
                ],
                dependants: [ScheduleFields.endDate, ScheduleFields.repeat],
                activateDependantsOn: scheduleEndTypeToggleDependants,
            },
        },
        {
            type: PaymentComponents.date,
            name: ScheduleFields.endDate,
            options: {
                cssClasses: [
                    'd-inline-block',
                    'col-md-10',
                    'align-top',
                    'bb-schedule__end-date',
                ],
                validators: [endDateAfterStartDateValidator],
                validationMessages: [
                    {
                        name: 'required',
                        message: $localize `:@@default-config.end-date-required-message:End date is required`,
                    },
                    {
                        name: 'lessThanStartDate',
                        message: $localize `:@@default-config.end-date-less-start-date-message:End date cannot be before start date`,
                    },
                ],
                isConditionalMandatory: true,
            },
            hooks: {
                onInit: scheduleEndDateOnInitHook,
            },
        },
        {
            name: ScheduleFields.repeat,
            type: PaymentComponents.number,
            options: {
                isConditionalMandatory: true,
                description: $localize `:@@default-config.repeat-schedule-description:times`,
                min: 2,
                max: 200,
                defaultValue: 2,
                validators: [minValueTwoValidator, maxValueTwoHundredValidator],
                validationMessages: [
                    {
                        name: 'required',
                        message: $localize `:@@default-config.repeat-schedule-required-message:Value is required`,
                    },
                    {
                        name: 'min',
                        message: $localize `:@@default-config.repeat-schedule-min--ocurrences-message:Value is below the minimum allowed occurrences (2)`,
                    },
                    {
                        name: 'max',
                        message: $localize `:@@default-config.repeat-schedule-max--ocurrences-message:Value exceeds maximum allowed occurances (200)`,
                    },
                ],
                cssClasses: [
                    'd-inline-block',
                    'col-md-9',
                    'align-top',
                    'px-0',
                    'bb-schedule__repeat',
                ],
            },
        },
    ],
};

const SepaCountries = [
    'AD',
    'AT',
    'BE',
    'BG',
    'CH',
    'CY',
    'CZ',
    'DE',
    'DK',
    'EE',
    'ES',
    'FI',
    'FR',
    'GB',
    'GI',
    'GR',
    'HR',
    'HU',
    'IE',
    'IS',
    'IT',
    'LI',
    'LT',
    'LU',
    'LV',
    'MC',
    'MT',
    'NL',
    'NO',
    'PL',
    'PT',
    'RO',
    'SE',
    'SI',
    'SK',
    'SM',
    'VA',
];
const BB_PAYMENT_CONFIG = new InjectionToken('BB_PAYMENT_CONFIG');
/**
 * @deprecated Will be removed in widget collection v3.11.0
 */
const BB_MULTI_PAYMENT_CONFIG = new InjectionToken('BB_MULTI_PAYMENT_CONFIG');
// eslint-disable-next-line @typescript-eslint/naming-convention
const US_States = USStates.map(({ name, id }) => ({ label: name, value: id }));
const BB_REGISTERED_PAYMENT_CONFIGS = new InjectionToken('BB_PAYMENT_REGISTERED_CONFIGS');
const BB_PAYORD_OMNI_PAYMENT_CONFIG_TOKEN = new InjectionToken('BB_PAYORD_OMNI_PAYMENT_CONFIG_TOKEN');
const payordOmniPaymentDefaults = {
    businessConfig: {
        functionName: 'Payment Templates',
        resourceName: 'Payments',
    },
};
const PayordOmniPaymentConfigProvider = [
    {
        provide: BB_PAYORD_OMNI_PAYMENT_CONFIG_TOKEN,
        useValue: payordOmniPaymentDefaults,
    },
];
const DefaultClosedPaymentBusFnSuffix = ' - closed';
const DefaultIntraCompanyPaymentBusFnSuffix = ' - Intracompany';
const BB_CLOSED_PAYMENT_BUS_FN_SUFFIX = new InjectionToken('Suffix for closed payment business functions');
const BB_INTRACOMPANY_PAYMENT_BUS_FN_SUFFIX = new InjectionToken('Suffix for intracompany payment business functions');
const BB_PAYORD_PAYMENT_ERROR_MESSAGES_TOKEN = new InjectionToken('BB_PAYORD_PAYMENT_ERROR_MESSAGES_TOKEN');
var P2PLimitErrorKeys;
(function (P2PLimitErrorKeys) {
    P2PLimitErrorKeys["minLimit"] = "p2p.payveris.limit_violation.min_payment_amount";
    P2PLimitErrorKeys["maxLimit"] = "p2p.payveris.limit_violation.max_payment_amount";
})(P2PLimitErrorKeys || (P2PLimitErrorKeys = {}));
const payordMessagesDefaults = {
    errorData: [
        {
            key: 'arrangements.api.invalid.iban',
            message: 'Entered IBAN is invalid',
        },
    ],
};
const PayordPaymentErrorsConfigProvider = [
    {
        provide: BB_PAYORD_PAYMENT_ERROR_MESSAGES_TOKEN,
        useValue: payordMessagesDefaults,
    },
];
const bicCodeValidationPattern = '^[A-Z]{6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3})?$';
const defaultPaymentSuccessEventName = 'bb.payment.success.event';
const forbiddenStatus = 403;

const toInteger = (value) => parseInt(value, 10) || 0;
const modelItemToBoolean = (value) => {
    if (typeof value === 'boolean') {
        return value;
    }
    return value === 'true';
};
const isObjectTruthy = (obj) => obj && Object.keys(obj).some((key) => !!obj[key]);
function getKeysWithValue(obj) {
    return Object.entries(obj).reduce((acc, [addrKey, addrValue]) => {
        if (addrValue) {
            acc.push(addrKey);
        }
        return acc;
    }, []);
}
function shouldRemoveCountryFromBeneficiaryBankAddress(address) {
    let shouldRemoveCountry = false;
    if (address) {
        const keysWithValue = getKeysWithValue(address);
        shouldRemoveCountry =
            keysWithValue.length === 1 && keysWithValue.indexOf('country') !== -1;
    }
    return shouldRemoveCountry;
}
function isCounterpartyObjectEquals(o1, o2) {
    var _a, _b, _c, _d, _e, _f;
    const branchCode1 = (_a = o1 === null || o1 === void 0 ? void 0 : o1.creditorBank) === null || _a === void 0 ? void 0 : _a.bankBranchCode;
    const branchCode2 = (_b = o2 === null || o2 === void 0 ? void 0 : o2.creditorBank) === null || _b === void 0 ? void 0 : _b.bankBranchCode;
    if (branchCode1 === undefined || branchCode2 === undefined) {
        (_c = o1 === null || o1 === void 0 ? void 0 : o1.creditorBank) === null || _c === void 0 ? true : delete _c.bankBranchCode;
        (_d = o2 === null || o2 === void 0 ? void 0 : o2.creditorBank) === null || _d === void 0 ? true : delete _d.bankBranchCode;
    }
    // Remove `selectedContact` from comparison (edited payment doesn't have beneficiary's account id)
    const { selectedContact: toExclude1 } = o1, rest1 = __rest(o1, ["selectedContact"]);
    const { selectedContact: toExclude2 } = o2, rest2 = __rest(o2, ["selectedContact"]);
    o1 = rest1;
    o2 = rest2;
    if (!o1.hideBeneficiaryFields || !o2.hideBeneficiaryFields) {
        const { hideBeneficiaryFields: toExclude3 } = o1, rest3 = __rest(o1, ["hideBeneficiaryFields"]);
        const { hideBeneficiaryFields: toExclude4 } = o2, rest4 = __rest(o2, ["hideBeneficiaryFields"]);
        o1 = rest3;
        o2 = rest4;
    }
    if (shouldRemoveCountryFromBeneficiaryBankAddress((_e = o1.creditorBank) === null || _e === void 0 ? void 0 : _e.postalAddress) ||
        shouldRemoveCountryFromBeneficiaryBankAddress((_f = o2.creditorBank) === null || _f === void 0 ? void 0 : _f.postalAddress)) {
        const _g = o1.creditorBank.postalAddress, { country: toExclude5 } = _g, rest5 = __rest(_g, ["country"]);
        const _h = o2.creditorBank.postalAddress, { country: toExclude6 } = _h, rest6 = __rest(_h, ["country"]);
        o1.creditorBank.postalAddress = rest5;
        o2.creditorBank.postalAddress = rest6;
    }
    return (o1.id && o1.id === o2.id) || objectEquals(o1, o2);
}
function objectEquals(o1, o2) {
    return (JSON.stringify(o1, falsyValueReplacer) ===
        JSON.stringify(o2, falsyValueReplacer));
}
function falsyValueReplacer(_, val) {
    return val || '';
}
const isAddressTruthy = (address) => {
    const { addressLine1 = '', addressLine2 = '', postCode = '', town = '', } = address || {};
    return isObjectTruthy({ addressLine1, addressLine2, postCode, town });
};
const filterObjectValues = (obj) => {
    for (const key in obj) {
        if (!obj[key] || !isObjectTruthy(obj[key])) {
            delete obj[key];
        }
    }
    return obj;
};
const addressToString = (address) => [
    address[`addressLine1`],
    address[`addressLine2`],
    address[`streetName`],
    address[`postCode`],
    address[`town`],
    address[`countrySubDivision`],
]
    .filter(Boolean)
    .join(', ');
function stripSpaces(str = '') {
    return str === null || str === void 0 ? void 0 : str.replace(/\s/g, '');
}
function toNumber(item) {
    return parseFloat(item) || 0;
}
function parseString(str, ...args) {
    let i = 0;
    return str.replace(/%s/g, () => args[i++]);
}

function ibanCountryValidator(countries = []) {
    return (control) => {
        var _a, _b;
        const parentForm = (_a = control.parent) === null || _a === void 0 ? void 0 : _a.parent;
        const sanctionedCountries = countries.length
            ? countries
            : (_b = parentForm === null || parentForm === void 0 ? void 0 : parentForm.get(HiddenFields.sanctionedCountries)) === null || _b === void 0 ? void 0 : _b.value;
        const countryControl = parentForm === null || parentForm === void 0 ? void 0 : parentForm.get([
            PaymentBaseFields.counterparty,
            CounterPartyFields.creditorBank,
            CounterPartyFields.postalAddress,
            CounterPartyFields.country,
        ]);
        if (!(sanctionedCountries === null || sanctionedCountries === void 0 ? void 0 : sanctionedCountries.length))
            return isValidIBANFormControl;
        const isInvalidIban = isValidIBANFormControl(control);
        if (isInvalidIban) {
            return { invalidIban: { value: control.value } };
        }
        else {
            const regexStr = (countryControl === null || countryControl === void 0 ? void 0 : countryControl.value) || sanctionedCountries.join('|');
            const regex = new RegExp(`^(${regexStr})\\w+`, 'i');
            return regex.test(stripSpaces(control.value))
                ? null
                : { invalidIbanCountry: { value: control.value } };
        }
    };
}

const counterParty$8 = {
    name: PaymentBaseFields.counterparty,
    fields: [
        {
            name: PaymentComponents.beneficiaryGroupHeader,
            type: PaymentComponents.beneficiaryGroupHeader,
            options: {
                label: $localize `:@@sepa-config.beneficiary.header-label:To`,
                hasDynamicTitle: true,
            },
        },
        {
            name: CounterPartyFields.name,
            type: PaymentComponents.beneficiarySelector,
            options: {
                placeholder: $localize `:@@sepa-config.beneficiary-selector-placeholder:Select a beneficiary`,
                saveNewContactLabel: $localize `:@@sepa-config.new-contact-label:Save as a new contact`,
                cssClasses: ['col-12'],
                validationMessages: [
                    {
                        message: $localize `:@@sepa-config.same-accounts-selected-error-message:Beneficiary is same as selected Debit account`,
                        name: 'sameDebitCreditAccountsSelected',
                    },
                ],
            },
        },
        {
            name: CounterPartyFields.accountNumber,
            type: PaymentComponents.text,
            options: {
                validators: [Validators.required, ibanCountryValidator(SepaCountries)],
                label: $localize `:@@sepa-config.beneficiary.iban-label:IBAN`,
                isIban: true,
                cssClasses: ['d-inline-block', 'col-md-6', 'align-top'],
                validationMessages: [
                    {
                        message: $localize `:@@sepa-config.iban-country-error-message:Invalid IBAN`,
                        name: 'invalidIbanCountry',
                    },
                ],
            },
        },
    ],
};
const remittanceInfo$a = {
    name: PaymentBaseFields.remittanceInfo,
    title: $localize `:@@sepa-config.remittance-info-title:Payment details`,
    fields: [
        {
            type: PaymentComponents.amount,
            name: RemittanceInfoFields.amountCurrencyGroup,
            options: {
                label: $localize `:@@sepa-config.amount-label:Amount`,
                currencies: ['EUR'],
                cssClasses: ['col-12'],
            },
        },
    ],
};
const paymentInformation$2 = {
    name: 'paymentInformation',
    title: $localize `:@@sepa-config.information-title:Payment information`,
    fields: [
        {
            name: CounterPartyFields.remittanceInformation,
            type: PaymentComponents.textarea,
            options: {
                label: $localize `:@@sepa-config.remittance-info-label:Description`,
                helperText: $localize `:@@sepa-config.remittance-info-helper-text: (optional)`,
                placeholder: $localize `:@@sepa-config.remittance-info-placeholder:Enter payment description`,
                showCharCounter: true,
                minLength: 0,
                rows: 3,
                maxLength: 140,
                cols: 50,
                cssClasses: ['d-inline-block', 'col-md-8'],
                mapToField: PaymentBaseFields.counterparty,
            },
        },
    ],
};
const SEPA = {
    fields: [
        defaultInitiatorConfig,
        remittanceInfo$a,
        counterParty$8,
        paymentInformation$2,
        defaultScheduleConfig,
    ],
    name: $localize `:@@sepa-config.name:SEPA CT Transfer`,
    businessFunction: 'SEPA CT',
    paymentType: 'SEPA_CREDIT_TRANSFER',
    options: {
        closedPaymentBusFns: ['SEPA CT - closed,SEPA CT - Intracompany'],
    },
};

const initiator$8 = {
    name: PaymentBaseFields.initiator,
    fields: [
        {
            type: PaymentComponents.internalAccountSelector,
            name: InitiatorFields.initiatorAccountGroup,
            options: {
                label: $localize `:@@internal-config.initiator-label:From`,
                placeholder: $localize `:@@internal-config.initiator-placeholder:Select an account`,
                cssClasses: ['col-12', 'bb-block', 'bb-block--lg'],
                productKinds: [
                    {
                        productKind: ProductKinds.savingsAccount,
                        balance: {
                            apiField: AccountBalances.available,
                            label: $localize `:@@internal-config.available-balance-label:Available Balance`,
                        },
                    },
                    {
                        productKind: ProductKinds.currentAccount,
                        balance: {
                            apiField: AccountBalances.current,
                            label: $localize `:@@internal-config.current-balance-label:Current Balance`,
                        },
                    },
                    {
                        productKind: ProductKinds.loanAccount,
                        balance: {
                            label: $localize `:@@internal-config.loan-balance-label:Current Balance`,
                        },
                    },
                ],
                mapItems: (accounts) => accounts.filter((account) => ['EUR', 'AED', 'USD'].includes((account === null || account === void 0 ? void 0 : account.currency) || '')),
                connectedAccounts: true,
                connectedAccountsSubHeader: $localize `:@@internal-config.initiator-subheader:Connected Accounts`,
                preselect: true,
            },
        },
    ],
};
const counterParty$7 = {
    name: PaymentBaseFields.counterparty,
    fields: [
        {
            type: PaymentComponents.internalAccountSelector,
            name: CounterPartyFields.counterPartyAccountGroup,
            options: {
                label: $localize `:@@internal-config.beneficiary-label:To`,
                placeholder: $localize `:@@internal-config.beneficiary-placeholder:Select an account`,
                cssClasses: ['col-12', 'bb-block', 'bb-block--lg'],
                productKinds: [
                    {
                        productKind: ProductKinds.savingsAccount,
                        balance: {
                            apiField: AccountBalances.available,
                            label: $localize `:@@internal-config.beneficiary.available-balance-label:Available Balance`,
                        },
                    },
                    {
                        productKind: ProductKinds.currentAccount,
                        balance: {
                            apiField: AccountBalances.current,
                            label: $localize `:@@internal-config.beneficiary.current-balance-label:Current Balance`,
                        },
                    },
                    {
                        productKind: ProductKinds.loanAccount,
                        balance: {
                            label: $localize `:@@internal-config.beneficiary.loan-balance-label:Current Balance`,
                        },
                    },
                ],
                connectedAccountsSubHeader: $localize `:@@internal-config.beneficiary-subheader:Connected Accounts`,
                connectedAccounts: true,
                dependants: [
                    {
                        parent: PaymentBaseFields.remittanceInfo,
                        items: [
                            RemittanceInfoFields.description,
                            RemittanceInfoFields.amountCurrencyGroup,
                            RemittanceInfoFields.amountOptions,
                        ],
                    },
                ],
                activateDependantsOn: (value, control) => {
                    var _a, _b;
                    return toggleForAmountOptions(value, control, (_b = (_a = remittanceInfo$9.fields[1]) === null || _a === void 0 ? void 0 : _a.options) === null || _b === void 0 ? void 0 : _b.amountOptions);
                },
                validationMessages: [
                    {
                        name: 'required',
                        message: $localize `:@@internal-config.beneficiary.account-required-message:Please select an account from the list to transfer to`,
                    },
                ],
            },
        },
    ],
};
const scheduleFrequencyForAmountOption = [
    {
        label: $localize `:@@internal-config.once-frequency-label:Once`,
        value: Frequencies.ONCE,
    },
    {
        label: $localize `:@@internal-config.monthly-frequency-label:Monthly`,
        value: Frequencies.MONTHLY,
    },
];
const remittanceInfo$9 = {
    name: PaymentBaseFields.remittanceInfo,
    fields: [
        {
            type: PaymentComponents.header,
            name: PaymentComponents.header,
            options: {
                cssClasses: ['col-12', 'pb-0', 'pt-2', 'bb-fieldset__heading'],
                heading: $localize `:@@internal-config.remittance-info-heading:Payment details `,
                headingType: 'h2',
                headingClasses: ['mb-0'],
                separatorLine: true,
            },
        },
        {
            type: PaymentComponents.internalAmountOptions,
            name: RemittanceInfoFields.amountOptions,
            hidden: true,
            options: {
                cssClasses: ['col-12', 'pb-0'],
                isConditionalMandatory: true,
                noBalanceText: $localize `:@@internal-config.no-balance-text:You don’t have any amount due on this credit card account.`,
                amountInputClassName: 'bb-amount-input__field--large',
                autoDecimal: true,
                amountOptions: {
                    cssClasses: ['pl-2'],
                    creditCard: [
                        {
                            label: $localize `:@@internal-config.remittance-current-balance-label:Current balance`,
                            description: $localize `:@@internal-config.remittance-current-balance-description:The balance plus any activity since the latest billing cycle`,
                            amountApiField: 'bookedBalance',
                            scheduleFrequency: scheduleFrequencyForAmountOption,
                            showFrequencySwitch: true,
                        },
                        {
                            label: $localize `:@@internal-config.min-payment-label:Minimum payment due`,
                            description: $localize `:@@internal-config.min-payment-description:5% of the outstanding balance`,
                            amountApiField: 'minimumPayment',
                            scheduleFrequency: scheduleFrequencyForAmountOption,
                            showFrequencySwitch: true,
                        },
                        {
                            label: $localize `:@@internal-config.other-amount-label:Other amount`,
                            description: $localize `:@@internal-config.other-amount-description:Enter amount manually`,
                            hasCustomAmountInput: true,
                            scheduleFrequency: scheduleFrequencyForAmountOption,
                            showFrequencySwitch: true,
                        },
                    ],
                    loan: [
                        {
                            label: $localize `:@@internal-config.loan.full-amount-label:Full amount`,
                            description: $localize `:@@internal-config.loan.full-amount-description:The principal plus interests of the loan`,
                            amountApiField: 'bookedBalance',
                            scheduleFrequency: scheduleFrequencyForAmountOption,
                        },
                        {
                            label: $localize `:@@internal-config.loan.other-amount-label:Other amount`,
                            description: $localize `:@@internal-config.loan.other-amount-description:Enter amount manually`,
                            hasCustomAmountInput: true,
                            scheduleFrequency: scheduleFrequencyForAmountOption,
                            showFrequencySwitch: true,
                        },
                    ],
                },
                validationMessages: [
                    {
                        name: 'invalidAmount',
                        message: $localize `:@@internal-config.invalid-amount-message:Please select an amount to transfer`,
                    },
                    {
                        name: 'required',
                        message: $localize `:@@internal-config.required-amount-message:Please add amount of this transfer`,
                    },
                ],
                dependants: [
                    {
                        parent: PaymentBaseFields.schedule,
                        items: [ScheduleFields.frequency, ScheduleFields.frequencySwitch],
                    },
                ],
                keepDependantsOnHide: true,
                activateDependantsOn: internalTransAmountOptToggleDependants,
            },
        },
        {
            type: PaymentComponents.compactAmount,
            name: RemittanceInfoFields.amountCurrencyGroup,
            options: {
                label: 'Amount',
                cssClasses: [
                    'bb-amount-input__field--large',
                    'bb-block',
                    'bb-block--lg',
                    'col-md-6',
                ],
                currency: 'USD',
                autoDecimal: true,
                keepValueOnHidden: true,
                validationMessages: [
                    {
                        name: 'invalidAmount',
                        message: $localize `:@@internal-config.invalid.compact-amount-message:Please add amount of this transfer`,
                    },
                ],
            },
        },
        {
            type: PaymentComponents.textarea,
            name: RemittanceInfoFields.description,
            options: {
                label: $localize `:@@internal-config.add-memo-label:Add memo`,
                placeholder: $localize `:@@internal-config.add-memo-placeholder:Enter memo`,
                showCharCounter: true,
                minLength: 0,
                rows: 2,
                maxLength: 140,
                helperText: $localize `:@@internal-config.add-memo-helper-text: (Optional)`,
                cssClasses: ['col-md-6', 'bb-block', 'bb-block--lg'],
            },
        },
    ],
};
const schedule$3 = {
    name: PaymentBaseFields.schedule,
    fields: [
        {
            type: PaymentComponents.scheduleHeader,
            name: PaymentComponents.scheduleHeader,
            options: {
                cssClasses: ['pb-0', 'bb-schedule-header__relative-text'],
                label: $localize `:@@internal-config.schedule-label:Schedule`,
            },
        },
        {
            type: PaymentComponents.alert,
            name: PaymentComponents.alert,
            hidden: true,
            options: {
                cssClasses: ['col-md-12'],
                alerts: {
                    undue: {
                        title: $localize `:@@internal-config.undue-alert-label:A payment executed after the due date will incur a  late fee.`,
                        description: $localize `:@@internal-config.undue-alert-description:The due date is @@date. A payment made before may improve your credit score.`,
                        modifier: 'info',
                    },
                    overdue: {
                        title: $localize `:@@internal-config.overdue-alert-label:The due date has passed. This payment will incur a late fee.`,
                        description: $localize `:@@internal-config.overdue-alert-description:The due date was @@date. Late payments will decrease your credit score.`,
                        modifier: 'warning',
                    },
                },
            },
            hooks: {
                onInit: internalTransferScheduleAlertOnInitHook,
            },
        },
        {
            type: PaymentComponents.date,
            name: ScheduleFields.startDate,
            options: {
                label: $localize `:@@internal-config.transfer-date-label:Transfer date`,
                cssClasses: ['d-block', 'col-md-6', 'align-top'],
                validators: [Validators.required, pastDateValidator],
                defaultValue: new Date().toISOString(),
                validationMessages: [
                    {
                        name: 'pastDate',
                        message: $localize `:@@internal-config.past-date-error-message:Start date cannot be in the past`,
                    },
                ],
                description: $localize `:@@internal-config.transfer-date-description:You selected a date after the due date, this transfer will incur a late fee`,
            },
            hooks: {
                onInit: internalTransScheduleStartDateOnInitHook,
                onDestroy: scheduleStartDateOnDestroyHook,
            },
        },
        {
            type: PaymentComponents.select,
            name: ScheduleFields.frequency,
            options: {
                label: $localize `:@@internal-config.frequency-label:Frequency`,
                validators: [Validators.required],
                options: [
                    {
                        label: $localize `:@@internal-config.once-frequency-label:Once`,
                        value: Frequencies.ONCE,
                    },
                    {
                        label: $localize `:@@internal-config.daily-frequency-label:Daily`,
                        value: Frequencies.DAILY,
                    },
                    {
                        label: $localize `:@@internal-config.weekly-frequency-label:Weekly`,
                        value: Frequencies.WEEKLY,
                    },
                    {
                        label: $localize `:@@internal-config.biweekly-frequency-label:Biweekly`,
                        value: Frequencies.BIWEEKLY,
                    },
                    {
                        label: $localize `:@@internal-config.monthly-frequency-label:Monthly`,
                        value: Frequencies.MONTHLY,
                    },
                    {
                        label: $localize `:@@internal-config.quarterly-frequency-label:Quarterly`,
                        value: Frequencies.QUARTERLY,
                    },
                    {
                        label: $localize `:@@internal-config.annually-frequency-label:Annually`,
                        value: Frequencies.YEARLY,
                    },
                ],
                defaultValue: Frequencies.ONCE,
                cssClasses: ['d-block', 'col-md-6', 'align-top'],
                dependants: [ScheduleFields.endType],
                activateDependantsOn: scheduleFrequencyToggleDependants,
            },
            hooks: {
                onInit: internalTransferScheduleFreqOnInitHook,
            },
        },
        {
            type: PaymentComponents.radio,
            name: ScheduleFields.endType,
            options: {
                label: $localize `:@@internal-config.end-type-label:End`,
                preselect: true,
                isConditionalMandatory: true,
                cssClasses: [
                    'd-inline-block',
                    'col-md-2',
                    'align-top',
                    'bb-schedule__end-type',
                ],
                defaultValue: ScheduleEndType.NEVER,
                options: [
                    {
                        label: $localize `:@@internal-config.never-end-type-label:Never`,
                        value: ScheduleEndType.NEVER,
                    },
                    {
                        label: $localize `:@@internal-config.on-date-end-type-label:On date`,
                        value: ScheduleEndType.ON,
                    },
                    {
                        label: $localize `:@@internal-config.after-end-type-label:After`,
                        value: ScheduleEndType.AFTER,
                    },
                ],
                dependants: [ScheduleFields.endDate, ScheduleFields.repeat],
                activateDependantsOn: scheduleEndTypeToggleDependants,
            },
            hooks: {
                onInit: internalTransferEndTypeOnInitHook,
            },
        },
        {
            type: PaymentComponents.date,
            name: ScheduleFields.endDate,
            options: {
                cssClasses: [
                    'd-inline-block',
                    'col-md-10',
                    'align-top',
                    'bb-schedule__end-date',
                ],
                validators: [endDateAfterStartDateValidator],
                validationMessages: [
                    {
                        name: 'required',
                        message: $localize `:@@internal-config.end-date-required-message:End date is required`,
                    },
                    {
                        name: 'lessThanStartDate',
                        message: $localize `:@@internal-config.end-date-less-start-date-message:End date cannot be before start date`,
                    },
                ],
                isConditionalMandatory: true,
            },
            hooks: {
                onInit: scheduleEndDateOnInitHook,
            },
        },
        {
            type: PaymentComponents.number,
            name: ScheduleFields.repeat,
            options: {
                isConditionalMandatory: true,
                description: $localize `:@@internal-config.ocurrences-description:occurrences`,
                min: 2,
                max: 200,
                defaultValue: 2,
                validators: [minValueTwoValidator, maxValueTwoHundredValidator],
                validationMessages: [
                    {
                        name: 'required',
                        message: $localize `:@@internal-config.ocurrences-required-message:Value is required`,
                    },
                    {
                        name: 'min',
                        message: $localize `:@@internal-config.min-ocurrences-message:Value is below the minimum allowed occurrences (2)`,
                    },
                    {
                        name: 'max',
                        message: $localize `:@@internal-config.max-ocurrences-message:Value exceeds maximum allowed occurances (200)`,
                    },
                ],
                cssClasses: [
                    'd-inline-block',
                    'col-md-9',
                    'align-top',
                    'px-0',
                    'bb-schedule__repeat',
                ],
            },
            hooks: {
                onInit: internalTransferRepeatOnInitHook,
            },
        },
        {
            type: PaymentComponents.scheduleSwitch,
            name: ScheduleFields.frequencySwitch,
            hidden: true,
            options: {
                cssClasses: ['col-12', 'mb-0', 'mt-4'],
                label: $localize `:@@internal-config.auto-payments-label:Automatic monthly payments`,
                tooltipMessage: $localize `:@@internal-config.auto-payments-tooltip-message:The amount selected will be automatically paid every month. This amount may change over time.`,
                description: $localize `:@@internal-config.auto-payments-description:If the execution date falls on a weekend or holiday, we’ll make the payment on the previous business day.`,
                values: {
                    on: Frequencies.MONTHLY,
                    off: Frequencies.ONCE,
                },
                defaultValue: false,
            },
        },
    ],
};
const INTERNAL_TRANSFER = {
    fields: [initiator$8, counterParty$7, remittanceInfo$9, schedule$3],
    name: $localize `:@@internal-config.name:Internal Transfer`,
    paymentType: 'INTERNAL_TRANSFER',
    businessFunction: 'A2A Transfer',
    options: {
        paymentTypes: {
            internal: 'INTERNAL_TRANSFER',
            external: 'EXTERNAL_A2A',
        },
        disabledCombinations: [
            { from: ProductKinds.loanAccount, to: ProductKinds.loanAccount },
            { from: ProductKinds.creditCard, to: ProductKinds.creditCard },
        ],
    },
    hooks: {
        onDestroy: internalTransferOnDestroyHook,
    },
};

const initiator$7 = {
    name: PaymentBaseFields.initiator,
    title: $localize `:@@ach-config.initiator-title:From account`,
    fields: [
        {
            type: PaymentComponents.debitAccountSelector,
            name: InitiatorFields.initiatorAccountGroup,
            options: {
                placeholder: $localize `:@@ach-config.initiator-placeholder:Select an account`,
                cssClasses: ['col-12'],
                validationMessages: [
                    {
                        message: $localize `:@@ach-config.invalid-account-message:Debit account is invalid`,
                        name: 'missingInList',
                    },
                    {
                        message: $localize `:@@ach-config.closed-permission-error-message:You can not do payments to new beneficiary from this account.`,
                        name: 'hasOnlyClosedPaymentPermission',
                    },
                ],
            },
        },
    ],
};
const counterParty$6 = {
    name: PaymentBaseFields.counterparty,
    fields: [
        {
            name: PaymentComponents.beneficiaryGroupHeader,
            type: PaymentComponents.beneficiaryGroupHeader,
            options: {
                label: $localize `:@@ach-config.beneficiary.header-label:Transfer to`,
                hasDynamicTitle: true,
            },
        },
        {
            name: CounterPartyFields.name,
            type: PaymentComponents.beneficiarySelector,
            options: {
                placeholder: $localize `:@@ach-config.beneficiary-selector-placeholder:Enter beneficiary's name or account`,
                cssClasses: ['col-12'],
                saveNewContactLabel: $localize `:@@ach-config.new-contact-label:Save as a new contact`,
                label: $localize `:@@ach-config.beneficiary-selector-label:Beneficiary name`,
                dropdownIcon: 'perm-contact-calendar',
                dependants: [
                    CounterPartyFields.accountNumber,
                    CounterPartyFields.accountType,
                    CounterPartyFields.creditorBank,
                    CounterPartyFields.standardEntryClass,
                    CounterPartyFields.recipientId,
                ],
                validationMessages: [
                    {
                        message: $localize `:@@ach-config.same-accounts-selected-error-message:Beneficiary is same as selected Debit account`,
                        name: 'sameDebitCreditAccountsSelected',
                    },
                ],
            },
        },
        {
            name: CounterPartyFields.accountNumber,
            type: PaymentComponents.text,
            options: {
                validators: [Validators.required],
                label: $localize `:@@ach-config.beneficiary.account-number-label:Account number`,
                maxLength: 34,
                cssClasses: ['d-inline-block', 'col-md-6', 'align-top'],
            },
        },
        {
            name: CounterPartyFields.accountType,
            type: PaymentComponents.select,
            options: {
                label: $localize `:@@ach-config.beneficiary.account-type-label:Account type`,
                validators: [Validators.required],
                options: [
                    {
                        label: $localize `:@@ach-config.beneficiary.savings-account-label:Savings`,
                        value: 'SAVINGS',
                    },
                    {
                        label: $localize `:@@ach-config.beneficiary.checking-account-label:Checking`,
                        value: 'CHECKING',
                    },
                ],
                placeholder: $localize `:@@ach-config.beneficiary-account-type-placeholder:Select an account type`,
                cssClasses: ['d-inline-block', 'col-md-6', 'align-top'],
            },
        },
        {
            name: CounterPartyFields.creditorBank,
            fields: [
                {
                    name: CounterPartyFields.bankBranchCode,
                    type: PaymentComponents.text,
                    options: {
                        label: $localize `:@@ach-config.branch-code-label:Routing transit number (ABA)`,
                        maxLength: 9,
                        cssClasses: ['d-inline-block', 'col-md-6', 'align-top'],
                        validators: [Validators.required, routingTransitNumberValidator],
                    },
                },
                {
                    name: CounterPartyFields.standardEntryClass,
                    type: PaymentComponents.select,
                    options: {
                        label: $localize `:@@ach-config.entry-class-label:Standard entry class (SEC)`,
                        validators: [Validators.required],
                        placeholder: $localize `:@@ach-config.entry-class-placeholder:Select SEC type`,
                        cssClasses: ['d-inline-block', 'col-md-6', 'align-top'],
                        mapToField: PaymentBaseFields.counterparty,
                        options: [
                            {
                                label: $localize `:@@ach-config.ppd-class-label:Personal (PPD)`,
                                value: 'PPD',
                            },
                            {
                                label: $localize `:@@ach-config.ccd-class-label:Business (CCD)`,
                                value: 'CCD',
                            },
                        ],
                    },
                },
            ],
        },
        {
            name: CounterPartyFields.recipientId,
            type: PaymentComponents.text,
            options: {
                label: $localize `:@@ach-config.recipient-id-label:Recipient ID`,
                helperText: $localize `:@@ach-config.recipient-id-helper-text: (optional)`,
                cssClasses: ['d-inline-block', 'col-md-6', 'align-top'],
                maxLength: 15,
                showCharCounter: true,
            },
        },
    ],
};
const remittanceInfo$8 = {
    name: PaymentBaseFields.remittanceInfo,
    title: $localize `:@@ach-config.remittance-info-title:Payment details`,
    fields: [
        {
            type: PaymentComponents.amount,
            name: RemittanceInfoFields.amountCurrencyGroup,
            options: {
                label: $localize `:@@ach-config.amount-label:Amount`,
                currencies: ['USD'],
                cssClasses: ['col-md-8'],
                validationMessages: [
                    {
                        name: 'invalidAmount',
                        message: $localize `:@@ach-config.invalid-amount-message:Amount is required`,
                    },
                ],
            },
        },
        {
            type: PaymentComponents.checkbox,
            name: RemittanceInfoFields.urgent,
            options: {
                label: $localize `:@@ach-config.urgent-payment-label:This payment is urgent`,
                cssClasses: ['col-md-8'],
                hideInWizardMode: true,
            },
        },
        {
            name: RemittanceInfoFields.paymentReference,
            type: PaymentComponents.text,
            options: {
                label: $localize `:@@ach-config.reference-label:Payment reference`,
                helperText: $localize `:@@ach-config.reference-placeholder: (optional)`,
                showCharCounter: true,
                maxLength: 35,
                cssClasses: ['d-inline-block', 'col-md-8'],
            },
        },
    ],
};
const US_ACH_CREDIT = {
    fields: [initiator$7, remittanceInfo$8, counterParty$6, defaultScheduleConfig],
    name: $localize `:@@ach-config.name:ACH Transfer`,
    businessFunction: 'ACH Credit Transfer',
    paymentType: 'ACH_CREDIT',
};

const countriesList$1 = [
    {
        label: 'United States',
        value: 'US',
    },
];
const initiator$6 = {
    name: PaymentBaseFields.initiator,
    title: $localize `:@@wire-config.initiator-title:From account`,
    fields: [
        {
            type: PaymentComponents.debitAccountSelector,
            name: InitiatorFields.initiatorAccountGroup,
            options: {
                placeholder: $localize `:@@wire-config.initiator-placeholder:Select an account`,
                cssClasses: ['col-12', 'mb-0'],
                validationMessages: [
                    {
                        message: $localize `:@@wire-config.invalid-account-message:Debit account is invalid`,
                        name: 'missingInList',
                    },
                    {
                        message: $localize `:@@wire-config.closed-permission-error-message:You can not do payments to new beneficiary from this account.`,
                        name: 'hasOnlyClosedPaymentPermission',
                    },
                ],
            },
        },
    ],
};
const counterParty$5 = {
    name: PaymentBaseFields.counterparty,
    fields: [
        {
            name: PaymentComponents.beneficiaryGroupHeader,
            type: PaymentComponents.beneficiaryGroupHeader,
            options: {
                label: $localize `:@@wire-config.beneficiary.header-label:Transfer to`,
                hasDynamicTitle: true,
                clearOptions: {
                    onClear: () => {
                        console.log('clear');
                    },
                },
            },
        },
        {
            name: CounterPartyFields.name,
            type: PaymentComponents.beneficiarySelector,
            options: {
                label: $localize `:@@wire-config.beneficiary-selector-label:Beneficiary name`,
                placeholder: $localize `:@@wire-config.beneficiary-selector-placeholder:Select a beneficiary`,
                cssClasses: ['col-12'],
                saveNewContactLabel: $localize `:@@wire-config.new-contact-label:Save as a new contact`,
                isManualEditDisabled: true,
                dependants: [
                    CounterPartyFields.accountNumber,
                    CounterPartyFields.bankBranchCode,
                    CounterPartyFields.postalAddress,
                    CounterPartyFields.creditorBank,
                    CounterPartyFields.correspondentBank,
                ],
                validationMessages: [
                    {
                        message: $localize `:@@wire-config.same-accounts-selected-error-message:Beneficiary is same as selected Debit account`,
                        name: 'sameDebitCreditAccountsSelected',
                    },
                ],
            },
        },
        {
            name: CounterPartyFields.accountNumber,
            type: PaymentComponents.text,
            options: {
                validators: [Validators.required],
                label: $localize `:@@wire-config.beneficiary.account-number-label:Account number`,
                maxLength: 34,
                cssClasses: ['d-inline-block', 'col-md-6', 'align-top'],
            },
        },
        {
            name: CounterPartyFields.bankBranchCode,
            type: PaymentComponents.text,
            options: {
                label: $localize `:@@wire-config.branch-code-label:Routing transit number (ABA)`,
                maxLength: 9,
                cssClasses: ['d-inline-block', 'col-md-6', 'align-top'],
                validators: [Validators.required, routingTransitNumberValidator],
                mapToField: `${PaymentBaseFields.counterparty}.${CounterPartyFields.creditorBank}`,
            },
        },
        {
            name: CounterPartyFields.postalAddress,
            type: PaymentComponents.address,
            options: {
                addressType: 'beneficiary',
                countries: countriesList$1,
                states: US_States,
                cssClasses: ['col-12'],
            },
        },
        {
            name: CounterPartyFields.creditorBank,
            fields: [
                {
                    name: CounterPartyFields.bankName,
                    type: PaymentComponents.text,
                    options: {
                        label: $localize `:@@wire-config.creditor-bank-name-label:Bank name`,
                        helperText: $localize `:@@wire-config.creditor-bank-name-placeholder: (optional)`,
                        maxLength: 140,
                        cssClasses: ['d-block', 'align-top', 'col-md-8'],
                    },
                },
                {
                    name: CounterPartyFields.postalAddress,
                    type: PaymentComponents.address,
                    options: {
                        addressType: 'beneficiary bank',
                        countries: countriesList$1,
                        states: US_States,
                        cssClasses: ['col-12'],
                    },
                },
            ],
        },
        {
            name: CounterPartyFields.correspondentBank,
            fields: [
                {
                    name: CounterPartyFields.enableAdditionalBankDetails,
                    type: PaymentComponents.switch,
                    options: {
                        label: $localize `:@@wire-config.correspondent-bank-label:Transfer through correspondent bank`,
                        cssClasses: ['col-12', 'align-top'],
                        labelPosition: 'right',
                        dependants: [
                            CounterPartyFields.bankName,
                            CounterPartyFields.bankBranchCode,
                            CounterPartyFields.postalAddress,
                        ],
                        activateDependantsOn: true,
                    },
                },
                {
                    name: CounterPartyFields.bankBranchCode,
                    type: PaymentComponents.text,
                    options: {
                        label: $localize `:@@wire-config.correspondent-bank-branch-code-label:Routing Transit Number (ABA)`,
                        maxLength: 9,
                        cssClasses: ['d-inline-block', 'col-md-6', 'align-top'],
                        validators: [routingTransitNumberValidator],
                        isConditionalMandatory: true,
                    },
                },
                {
                    name: CounterPartyFields.bankName,
                    type: PaymentComponents.text,
                    options: {
                        label: $localize `:@@wire-config.correspondent-bank-name-label:Bank name`,
                        maxLength: 140,
                        helperText: $localize `:@@wire-config.correspondent-bank-name-placeholder: (optional)`,
                        cssClasses: ['d-inline-block', 'col-md-6', 'align-top'],
                    },
                },
                {
                    name: CounterPartyFields.postalAddress,
                    type: PaymentComponents.address,
                    options: {
                        addressType: 'correspondent bank',
                        countries: countriesList$1,
                        states: US_States,
                        cssClasses: ['mb-0', 'col-12'],
                    },
                },
            ],
        },
    ],
};
const remittanceInfo$7 = {
    name: PaymentBaseFields.remittanceInfo,
    title: $localize `:@@wire-config.remittance-info-title:Payment details`,
    fields: [
        {
            type: PaymentComponents.amount,
            name: RemittanceInfoFields.amountCurrencyGroup,
            options: {
                label: $localize `:@@wire-config.amount-label:Amount`,
                cssClasses: ['col-md-8', 'large-label'],
                currencies: ['USD'],
                validationMessages: [
                    {
                        name: 'invalidAmount',
                        message: $localize `:@@wire-config.invalid-amount-message:Amount is required`,
                    },
                ],
            },
        },
    ],
};
const additionalMessage$2 = {
    name: 'additionalMessage',
    title: $localize `:@@wire-config.additional-message-title:Add message`,
    collapsible: true,
    fields: [
        {
            name: CounterPartyFields.remittanceInformation,
            type: PaymentComponents.textarea,
            options: {
                label: $localize `:@@wire-config.additional-message-label:Message to beneficiary`,
                helperText: $localize `:@@wire-config.additional-message-helper-text: (optional)`,
                placeholder: $localize `:@@wire-config.additional-message-placeholder:Type your message here`,
                showCharCounter: true,
                minLength: 0,
                maxLength: 140,
                rows: 3,
                cols: 50,
                cssClasses: ['col-12'],
                mapToField: PaymentBaseFields.counterparty,
            },
        },
        {
            name: CounterPartyFields.messageToBank,
            type: PaymentComponents.textarea,
            options: {
                label: $localize `:@@wire-config.message-to-bank-label:Message to beneficiary bank`,
                helperText: $localize `:@@wire-config.message-to-bank-helper-text: (optional)`,
                placeholder: $localize `:@@wire-config.message-to-bank-placeholder:Type your message here`,
                showCharCounter: true,
                minLength: 0,
                rows: 3,
                maxLength: 140,
                cols: 50,
                cssClasses: ['col-12'],
                mapToField: `${PaymentBaseFields.counterparty}`,
            },
        },
    ],
};
const US_DOMESTIC_WIRE = {
    fields: [
        initiator$6,
        remittanceInfo$7,
        counterParty$5,
        defaultScheduleConfig,
        additionalMessage$2,
    ],
    name: $localize `:@@wire-config.name:Wire Transfer`,
    paymentType: 'US_DOMESTIC_WIRE',
    businessFunction: 'US Domestic Wire',
    options: {
        closedPaymentBusFns: ['US Domestic Wire - Intracompany'],
    },
};

const counterParty$4 = {
    name: PaymentBaseFields.counterparty,
    fields: [
        {
            name: PaymentComponents.beneficiaryGroupHeader,
            type: PaymentComponents.beneficiaryGroupHeader,
            options: {
                label: $localize `:@@chaps-config.beneficiary.header-label:To`,
                hasDynamicTitle: true,
            },
        },
        {
            name: CounterPartyFields.name,
            type: PaymentComponents.beneficiarySelector,
            options: {
                placeholder: $localize `:@@chaps-config.beneficiary-selector-placeholder:Select a beneficiary`,
                saveNewContactLabel: $localize `:@@chaps-config.new-contact-label:Save as a new contact`,
                cssClasses: ['col-12'],
            },
        },
        {
            name: CounterPartyFields.accountNumber,
            type: PaymentComponents.text,
            options: {
                validators: [Validators.required],
                label: $localize `:@@chaps-config.beneficiary.account-number-label:Account number`,
                cssClasses: ['d-inline-block', 'col-md-6', 'align-top'],
            },
        },
        {
            name: CounterPartyFields.creditorBank,
            fields: [
                {
                    name: CounterPartyFields.bankBranchCode,
                    type: PaymentComponents.text,
                    options: {
                        label: $localize `:@@chaps-config.sort-code-label:Sort code`,
                        cssClasses: ['d-inline-block', 'col-md-6', 'align-top'],
                        validators: [Validators.required],
                    },
                },
            ],
        },
    ],
};
const remittanceInfo$6 = {
    name: PaymentBaseFields.remittanceInfo,
    title: $localize `:@@chaps-config.remittance-info-title:Payment details`,
    fields: [
        {
            type: PaymentComponents.amount,
            name: RemittanceInfoFields.amountCurrencyGroup,
            options: {
                label: $localize `:@@chaps-config.amount-label:Amount`,
                currencies: ['GBP'],
                cssClasses: ['col-12'],
            },
        },
    ],
};
const paymentInformation$1 = {
    name: 'paymentInformation',
    title: $localize `:@@chaps-config.information-title:Payment information`,
    fields: [
        {
            name: CounterPartyFields.remittanceInformation,
            type: PaymentComponents.textarea,
            options: {
                label: $localize `:@@chaps-config.remittance-info-label:Description`,
                placeholder: $localize `:@@chaps-config.remittance-info-placeholder:Enter payment description`,
                showCharCounter: true,
                minLength: 0,
                rows: 3,
                maxLength: 140,
                cols: 50,
                cssClasses: ['d-inline-block', 'col-12'],
                mapToField: PaymentBaseFields.counterparty,
            },
        },
    ],
};
const CHAPS = {
    fields: [
        defaultInitiatorConfig,
        remittanceInfo$6,
        counterParty$4,
        paymentInformation$1,
        defaultScheduleConfig,
    ],
    name: $localize `:@@chaps-config.name:CHAPS Transfer`,
    paymentType: 'CHAPS',
    businessFunction: 'UK CHAPS',
    relatedPaymentTypes: ['FASTER_PAYMENT'],
};

const counterParty$3 = {
    name: PaymentBaseFields.counterparty,
    fields: [
        {
            name: PaymentComponents.beneficiaryGroupHeader,
            type: PaymentComponents.beneficiaryGroupHeader,
            options: {
                label: $localize `:@@fps-config.beneficiary.header-label:To`,
                hasDynamicTitle: true,
            },
        },
        {
            name: CounterPartyFields.name,
            type: PaymentComponents.beneficiarySelector,
            options: {
                placeholder: $localize `:@@fps-config.beneficiary-selector-placeholder:Select a beneficiary`,
                saveNewContactLabel: $localize `:@@fps-config.new-contact-label:Save as a new contact`,
                cssClasses: ['col-12'],
                validationMessages: [
                    {
                        message: $localize `:@@fps-config.same-accounts-selected-error-message:Beneficiary is same as selected Debit account`,
                        name: 'sameDebitCreditAccountsSelected',
                    },
                ],
            },
        },
        {
            name: CounterPartyFields.accountNumber,
            type: PaymentComponents.text,
            options: {
                validators: [Validators.required],
                label: $localize `:@@fps-config.beneficiary.account-number-label:Account number`,
                cssClasses: ['d-inline-block', 'col-md-6', 'align-top'],
            },
        },
        {
            name: CounterPartyFields.creditorBank,
            fields: [
                {
                    name: CounterPartyFields.bankBranchCode,
                    type: PaymentComponents.text,
                    options: {
                        label: $localize `:@@fps-config.sort-code-label:Sort code`,
                        cssClasses: ['d-inline-block', 'col-md-6', 'align-top'],
                        validators: [Validators.required],
                    },
                },
            ],
        },
    ],
};
const remittanceInfo$5 = {
    name: PaymentBaseFields.remittanceInfo,
    title: $localize `:@@fps-config.remittance-info-title:Payment details`,
    fields: [
        {
            type: PaymentComponents.amount,
            name: RemittanceInfoFields.amountCurrencyGroup,
            options: {
                label: $localize `:@@fps-config.amount-label:Amount`,
                currencies: ['GBP'],
                cssClasses: ['col-md-8'],
            },
        },
    ],
};
const paymentInformation = {
    name: 'paymentInformation',
    title: $localize `:@@fps-config.information-title:Payment information`,
    fields: [
        {
            name: CounterPartyFields.remittanceInformation,
            type: PaymentComponents.textarea,
            options: {
                label: $localize `:@@fps-config.remittance-info-label:Description`,
                placeholder: $localize `:@@fps-config.remittance-info-placeholder:Enter payment description`,
                showCharCounter: true,
                minLength: 0,
                rows: 3,
                maxLength: 140,
                cols: 50,
                cssClasses: ['d-inline-block', 'col-12'],
                mapToField: PaymentBaseFields.counterparty,
            },
        },
    ],
};
const UK_FASTER_PAYMENT = {
    fields: [
        defaultInitiatorConfig,
        remittanceInfo$5,
        counterParty$3,
        paymentInformation,
        defaultScheduleConfig,
    ],
    name: $localize `:@@fps-config.name:UK Faster Payment`,
    paymentType: 'FASTER_PAYMENT',
    businessFunction: 'UK Faster Payments',
};

const countriesList = [
    {
        label: $localize `:@@international-config.us-country-label:United States`,
        value: 'US',
    },
    {
        label: $localize `:@@international-config.au-country-label:Australia`,
        value: 'AU',
    },
    {
        label: $localize `:@@international-config.ca-country-label:Canada`,
        value: 'CA',
    },
    {
        label: $localize `:@@international-config.ie-country-label:Ireland`,
        value: 'IE',
    },
    {
        label: $localize `:@@international-config.nl-country-label:Netherlands`,
        value: 'NL',
    },
    {
        label: $localize `:@@international-config.nz-country-label:New Zealand`,
        value: 'NZ',
    },
    {
        label: $localize `:@@international-config.gb-country-label:United Kingdom`,
        value: 'GB',
    },
];
const initiator$5 = {
    name: PaymentBaseFields.initiator,
    title: $localize `:@@international-config.initiator-label:From account`,
    fields: [
        {
            type: PaymentComponents.debitAccountSelector,
            name: InitiatorFields.initiatorAccountGroup,
            options: {
                placeholder: 'Select an account',
                cssClasses: ['col-12', 'mb-0'],
                validationMessages: [
                    {
                        message: $localize `:@@international-config.account-missing-error-message:Debit account is invalid`,
                        name: 'missingInList',
                    },
                    {
                        message: $localize `:@@international-config.closed-permission-error-message:You can not do payments to new beneficiary from this account.`,
                        name: 'hasOnlyClosedPaymentPermission',
                    },
                ],
            },
        },
    ],
};
const toggleBankID = (value, control) => {
    const parentGroup = control && control.parent ? control.parent : null;
    const enableAdditionalBankDetails = parentGroup && parentGroup.get('enableAdditionalBankDetails');
    switch (value) {
        case 'BIC':
            return enableAdditionalBankDetails && enableAdditionalBankDetails.value
                ? [CounterPartyFields.bic]
                : [];
        case 'BRANCH_CODE':
            return [CounterPartyFields.bankBranchCode];
    }
    return [];
};
const counterParty$2 = {
    name: PaymentBaseFields.counterparty,
    fields: [
        {
            name: PaymentComponents.beneficiaryGroupHeader,
            type: PaymentComponents.beneficiaryGroupHeader,
            options: {
                label: $localize `:@@international-config.beneficiary.header-label:Transfer to`,
                hasDynamicTitle: true,
            },
        },
        {
            name: CounterPartyFields.name,
            type: PaymentComponents.beneficiarySelector,
            options: {
                label: $localize `:@@international-config.beneficiary-selector-label:Beneficiary name`,
                placeholder: $localize `:@@international-config.beneficiary-selector-placeholder:Select a beneficiary`,
                cssClasses: ['col-12', 'mb-0'],
                saveNewContactLabel: 'Save as a new contact',
                validationMessages: [
                    {
                        message: $localize `:@@international-config.new-contact-label:Beneficiary is same as selected Debit account`,
                        name: 'sameDebitCreditAccountsSelected',
                    },
                ],
                dependants: [
                    CounterPartyFields.bic,
                    CounterPartyFields.country,
                    CounterPartyFields.creditorBank,
                    CounterPartyFields.accountNumber,
                    CounterPartyFields.postalAddress,
                    CounterPartyFields.bankBranchCode,
                    CounterPartyFields.intermediaryBank,
                    CounterPartyFields.correspondentBank,
                ],
                tabs: [BeneficiaryList.CONTACTS],
            },
        },
        {
            name: CounterPartyFields.creditorBank,
            fields: [
                {
                    name: CounterPartyFields.postalAddress,
                    fields: [
                        {
                            name: CounterPartyFields.country,
                            type: PaymentComponents.sanctionedCountrySelector,
                            options: {
                                label: $localize `:@@international-config.sanctioned-country-label:Country`,
                                placeholder: '- select country -',
                                cssClasses: [
                                    'd-inline-block',
                                    'col-md-6',
                                    'align-top',
                                    'pr-md-3',
                                ],
                                validators: [Validators.required],
                            },
                        },
                    ],
                },
            ],
        },
        {
            name: CounterPartyFields.accountNumber,
            type: PaymentComponents.text,
            options: {
                validators: [Validators.required],
                label: $localize `:@@international-config.beneficiary.account-number-label:Account number or IBAN`,
                maxLength: 36,
                cssClasses: ['d-inline-block', 'col-md-6', 'align-top', 'pr-md-3'],
                validationMessages: [
                    {
                        message: $localize `:@@international-config.iban-country-error-message:Invalid IBAN`,
                        name: 'invalidIbanCountry',
                    },
                ],
            },
        },
        {
            name: CounterPartyFields.creditorBank,
            fields: [
                {
                    name: CounterPartyFields.bankBranchCode,
                    type: PaymentComponents.text,
                    options: {
                        validators: [Validators.required],
                        label: $localize `:@@international-config.bank-code-label:Bank code`,
                        maxLength: 20,
                        mapToField: `${PaymentBaseFields.counterparty}.${CounterPartyFields.creditorBank}`,
                        cssClasses: ['d-inline-block', 'col-md-6', 'align-top', 'pr-md-3'],
                    },
                },
            ],
        },
        {
            name: CounterPartyFields.postalAddress,
            type: PaymentComponents.address,
            options: {
                addressType: 'beneficiary',
                countries: countriesList,
                useSanctionedCountries: true,
                cssClasses: ['col-12'],
            },
        },
        {
            name: CounterPartyFields.creditorBank,
            fields: [
                {
                    name: CounterPartyFields.bic,
                    type: PaymentComponents.text,
                    options: {
                        validators: [
                            Validators.required,
                            Validators.pattern(bicCodeValidationPattern),
                        ],
                        label: $localize `:@@international-config.creditor-bank-bic-label:SWIFT/BIC`,
                        cssClasses: ['d-inline-block', 'col-md-6', 'align-top', 'pr-md-3'],
                    },
                },
                {
                    name: CounterPartyFields.bankName,
                    type: PaymentComponents.text,
                    options: {
                        label: $localize `:@@international-config.creditor-bank-name-label:Bank name`,
                        helperText: $localize `:@@international-config.bank-name-helper-text: (optional)`,
                        maxLength: 140,
                        cssClasses: ['d-inline-block', 'col-md-6', 'align-top', 'pr-md-3'],
                    },
                },
                {
                    name: CounterPartyFields.postalAddress,
                    type: PaymentComponents.address,
                    options: {
                        addressType: 'beneficiary bank',
                        countries: countriesList,
                        cssClasses: ['col-12'],
                        hideCountry: true,
                    },
                },
            ],
        },
        {
            name: CounterPartyFields.correspondentBank,
            cssClasses: ['card--highlight', 'p-3', 'm-3', 'rounded'],
            fields: [
                {
                    name: CounterPartyFields.enableAdditionalBankDetails,
                    type: PaymentComponents.switch,
                    options: {
                        label: $localize `:@@international-config.correspondent-bank-label:Transfer through correspondent bank`,
                        cssClasses: ['col-12', 'mb-0'],
                        labelPosition: 'right',
                        dependants: [
                            'selectAdditionalBankCodeType',
                            CounterPartyFields.bic,
                            CounterPartyFields.bankName,
                            CounterPartyFields.postalAddress,
                        ],
                        activateDependantsOn: true,
                    },
                },
                {
                    name: 'selectAdditionalBankCodeType',
                    type: PaymentComponents.radio,
                    options: {
                        label: $localize `:@@international-config.additional-correspondent-bank-code-label:Bank ID type`,
                        isConditionalMandatory: true,
                        cssClasses: ['col-12', 'mb-0', 'mt-3'],
                        horizontal: true,
                        options: [
                            {
                                label: $localize `:@@international-config.additional-correspondent-bank-swift-label:SWIFT/BIC`,
                                value: 'BIC',
                            },
                            {
                                label: $localize `:@@international-config.additional-correspondent-bank-sort-code-label:Sort code`,
                                value: 'BRANCH_CODE',
                            },
                        ],
                        defaultValue: 'BIC',
                        dependants: [
                            CounterPartyFields.bic,
                            CounterPartyFields.bankBranchCode,
                        ],
                        activateDependantsOn: toggleBankID,
                    },
                },
                {
                    name: CounterPartyFields.bic,
                    type: PaymentComponents.text,
                    options: {
                        isConditionalMandatory: true,
                        validators: [Validators.pattern(bicCodeValidationPattern)],
                        label: $localize `:@@international-config.correspondent-bank-bic-label:SWIFT/BIC`,
                        cssClasses: ['d-inline-block', 'col-md-6', 'align-top'],
                    },
                },
                {
                    name: CounterPartyFields.bankBranchCode,
                    type: PaymentComponents.text,
                    options: {
                        isConditionalMandatory: true,
                        label: $localize `:@@international-config.correspondent-bank-sort-code-label:Sort code`,
                        maxLength: 20,
                        cssClasses: ['d-inline-block', 'col-md-6', 'align-top'],
                    },
                },
                {
                    name: CounterPartyFields.bankName,
                    type: PaymentComponents.text,
                    options: {
                        label: $localize `:@@international-config.correspondent-bank-name:Bank name`,
                        maxLength: 140,
                        helperText: $localize `:@@international-config.correspondent-bank-name-helper-text: (optional)`,
                        cssClasses: ['d-inline-block', 'col-md-6', 'align-top'],
                    },
                },
                {
                    name: CounterPartyFields.postalAddress,
                    type: PaymentComponents.address,
                    options: {
                        addressType: 'correspondent bank',
                        useSanctionedCountries: true,
                        countries: countriesList,
                        cssClasses: ['mb-0'],
                    },
                },
            ],
        },
        {
            name: CounterPartyFields.intermediaryBank,
            cssClasses: ['card--highlight', 'p-3', 'm-3', 'rounded'],
            fields: [
                {
                    name: CounterPartyFields.enableAdditionalBankDetails,
                    type: PaymentComponents.switch,
                    options: {
                        label: $localize `:@@international-config.intermediary-bank-label:Transfer through intermediary bank`,
                        cssClasses: ['col-12', 'mb-0'],
                        labelPosition: 'right',
                        dependants: [
                            'selectAdditionalBankCodeType',
                            CounterPartyFields.bic,
                            CounterPartyFields.bankName,
                            CounterPartyFields.postalAddress,
                        ],
                        activateDependantsOn: true,
                    },
                },
                {
                    name: 'selectAdditionalBankCodeType',
                    type: PaymentComponents.radio,
                    options: {
                        label: $localize `:@@international-config.additional-intermediary-bank-code-label:Bank ID type`,
                        isConditionalMandatory: true,
                        cssClasses: ['col-12', 'mb-0', 'mt-3'],
                        horizontal: true,
                        options: [
                            {
                                label: $localize `:@@international-config.additional-intermediary-bank-swift-label:SWIFT/BIC`,
                                value: 'BIC',
                            },
                            {
                                label: $localize `:@@international-config.additional-intermediary-bank-sort-code-label:Sort code`,
                                value: 'BRANCH_CODE',
                            },
                        ],
                        defaultValue: 'BIC',
                        dependants: [
                            CounterPartyFields.bic,
                            CounterPartyFields.bankBranchCode,
                        ],
                        activateDependantsOn: toggleBankID,
                    },
                },
                {
                    name: CounterPartyFields.bic,
                    type: PaymentComponents.text,
                    options: {
                        isConditionalMandatory: true,
                        validators: [Validators.pattern(bicCodeValidationPattern)],
                        label: $localize `:@@international-config.intermediary-bank-bic-label:SWIFT/BIC`,
                        cssClasses: ['d-inline-block', 'col-md-6', 'align-top'],
                    },
                },
                {
                    name: CounterPartyFields.bankBranchCode,
                    type: PaymentComponents.text,
                    options: {
                        isConditionalMandatory: true,
                        label: $localize `:@@international-config.intermediary-bank-sort-code-label:Sort code`,
                        maxLength: 20,
                        cssClasses: ['d-inline-block', 'col-md-6', 'align-top'],
                    },
                },
                {
                    name: CounterPartyFields.bankName,
                    type: PaymentComponents.text,
                    options: {
                        label: $localize `:@@international-config.intermediary-bank-name:Bank name`,
                        maxLength: 140,
                        helperText: $localize `:@@international-config.intermediary-bank-name-helper-text: (optional)`,
                        cssClasses: ['d-inline-block', 'col-md-6', 'align-top'],
                    },
                },
                {
                    name: CounterPartyFields.postalAddress,
                    type: PaymentComponents.address,
                    options: {
                        addressType: 'intermediary bank',
                        useSanctionedCountries: true,
                        countries: countriesList,
                        cssClasses: ['mb-0'],
                    },
                },
            ],
        },
    ],
};
const remittanceInfo$4 = {
    name: PaymentBaseFields.remittanceInfo,
    title: $localize `:@@international-config.remittance-info-title:Payment details`,
    fields: [
        {
            type: PaymentComponents.sanctionedCurrencyAmount,
            name: RemittanceInfoFields.amountCurrencyGroup,
            options: {
                label: $localize `:@@international-config.amount-label:Amount`,
                cssClasses: ['col-12'],
                validationMessages: [
                    {
                        message: $localize `:@@international-config.invalid-amount-message:Enter amount`,
                        name: 'invalidAmount',
                    },
                    {
                        message: $localize `:@@international-config.invalid-currency-message:Selected country does not allow payments in this currency`,
                        name: 'invalidCurrency',
                    },
                ],
            },
        },
    ],
};
const additionalMessage$1 = {
    name: 'additionalMessage',
    title: $localize `:@@international-config.information-title:Payment information`,
    fields: [
        {
            name: CounterPartyFields.remittanceInformation,
            type: PaymentComponents.textarea,
            options: {
                label: $localize `:@@international-config.remittance-info-label:Message to beneficiary`,
                placeholder: $localize `:@@international-config.remittance-info-placeholder:Type your message here`,
                showCharCounter: true,
                collapseOptions: {
                    label: $localize `:@@international-config.collapsed.remittance-info-label:Add message to beneficiary`,
                },
                minLength: 0,
                rows: 3,
                maxLength: 140,
                cols: 50,
                cssClasses: ['d-block', 'col-md-8'],
                mapToField: PaymentBaseFields.counterparty,
            },
        },
        {
            name: RemittanceInfoFields.purposeOfPayment,
            type: PaymentComponents.purposeOfPayment,
            options: {
                label: $localize `:@@international-config.purpose-payment-label:Purpose of payment`,
                helperText: $localize `:@@international-config.purpose-payment-helper-text: (optional)`,
                showCharCounter: true,
                collapseOptions: {
                    label: $localize `:@@international-config.purpose-collapsed-label:Add purpose of payment`,
                },
                maxLength: 35,
                cssClasses: ['d-block', 'col-md-8'],
                mapToField: PaymentBaseFields.remittanceInfo,
            },
        },
    ],
};
const paymentOptions = [
    {
        name: PaymentOptionFields.selectPaymentOption,
        type: PaymentComponents.selectPaymentOption,
        options: {
            skipDefaultValue: true,
        },
    },
    {
        name: PaymentOptionFields.chargeBearer,
        type: PaymentComponents.chargeBearer,
        options: {
            label: $localize `:@@international-config.charge-bearer-label:How fees are paid`,
        },
    },
    {
        name: PaymentOptionFields.paymentCost,
        type: PaymentComponents.paymentCost,
        options: {},
    },
];
const INTERNATIONAL_TRANSFER = {
    fields: [
        initiator$5,
        remittanceInfo$4,
        counterParty$2,
        additionalMessage$1,
        defaultScheduleConfig,
        ...paymentOptions,
    ],
    name: $localize `:@@international-config.name:International Transfer`,
    businessFunction: 'US Foreign Wire',
    paymentType: 'INTERNATIONAL_TRANSFER',
};

const initiator$4 = {
    name: PaymentBaseFields.initiator,
    fields: [
        {
            type: PaymentComponents.header,
            name: PaymentComponents.header,
            options: {
                cssClasses: ['px-3', 'mb-3'],
                heading: $localize `:@@intrabank-config.initiator-label:From`,
                headingType: 'h3',
            },
        },
        {
            type: PaymentComponents.internalAccountSelector,
            name: InitiatorFields.initiatorAccountGroup,
            options: {
                placeholder: $localize `:@@intrabank-config.initiator-placeholder:Select an account`,
                cssClasses: ['col-12', 'bb-block', 'bb-block--xl'],
                preselect: true,
            },
        },
    ],
};
const counterParty$1 = {
    name: PaymentBaseFields.counterparty,
    fields: [
        {
            type: PaymentComponents.header,
            name: PaymentComponents.header,
            options: {
                cssClasses: ['px-3', 'mb-3'],
                heading: $localize `:@@intrabank-config.beneficiary-label:To`,
                headingType: 'h3',
            },
        },
        {
            name: CounterPartyFields.name,
            type: PaymentComponents.contactSelector,
            options: {
                label: $localize `:@@intrabank-config.beneficiary-contact-label:Recipient’s name`,
                placeholder: $localize `:@@intrabank-config.beneficiary-contact-placeholder:Select contact or enter new`,
                cssClasses: ['col-md-6'],
                validators: [Validators.required],
                mapItems: (contacts) => contacts.filter(({ accounts }) => !!accounts[0].accountNumber),
                contactSchemes: [{ name: ContactScheme.accountNumber }],
                validationMessages: [
                    {
                        message: $localize `:@@intrabank-config.beneficiary-invalid-name-message:Enter a valid name`,
                        name: 'pattern',
                    },
                    {
                        name: 'required',
                        message: $localize `:@@intrabank-config.beneficiary-required-name-message:Enter a recipient name`,
                    },
                ],
            },
        },
        {
            name: CounterPartyFields.accountNumber,
            type: PaymentComponents.text,
            options: {
                validators: [Validators.required],
                label: $localize `:@@intrabank-config.beneficiary-account-number-label:Recipient’s account number`,
                cssClasses: ['col-md-6', 'bb-block', 'bb-block--md'],
                validationMessages: [
                    {
                        name: 'required',
                        message: $localize `:@@intrabank-config.beneficiary-account-number-required-message:Enter an account number`,
                    },
                ],
            },
        },
        {
            name: CounterPartyFields.saveNewContact,
            type: PaymentComponents.checkbox,
            options: {
                cssClasses: ['col-md-6', 'bb-block', 'bb-block--lg'],
                label: $localize `:@@intrabank-config.new-contact-label:Save to contacts`,
            },
            hooks: {
                onInit: intrabankCheckboxOnInitHook,
            },
        },
    ],
};
const remittanceInfo$3 = {
    name: PaymentBaseFields.remittanceInfo,
    fields: [
        {
            type: PaymentComponents.header,
            name: PaymentComponents.header,
            options: {
                cssClasses: ['col-12', 'pb-0', 'pt-2', 'bb-fieldset__heading'],
                heading: 'Payment details',
                headingType: 'h2',
                headingClasses: ['mb-0'],
                separatorLine: true,
            },
        },
        {
            type: PaymentComponents.compactAmount,
            name: RemittanceInfoFields.amountCurrencyGroup,
            options: {
                label: $localize `:@@intrabank-config.amount-label:Amount`,
                cssClasses: [
                    'bb-amount-input__field--large',
                    'bb-block',
                    'bb-block--lg',
                    'col-md-6',
                ],
                currency: 'USD',
                autoDecimal: true,
                keepValueOnHidden: true,
                validationMessages: [
                    {
                        name: 'invalidAmount',
                        message: $localize `:@@intrabank-config.invalid-amount-message:Please add amount of this transfer`,
                    },
                ],
            },
        },
        {
            type: PaymentComponents.textarea,
            name: RemittanceInfoFields.description,
            options: {
                label: $localize `:@@intrabank-config.add-memo-label:Add memo`,
                placeholder: $localize `:@@intrabank-config.add-memo-placeholder:Enter memo`,
                showCharCounter: true,
                minLength: 0,
                rows: 2,
                maxLength: 140,
                helperText: $localize `:@@intrabank-config.add-memo-helper-text: (Optional)`,
                cssClasses: ['col-md-6', 'bb-block', 'bb-block--lg'],
            },
        },
    ],
};
const schedule$2 = {
    name: PaymentBaseFields.schedule,
    fields: [
        {
            type: PaymentComponents.scheduleHeader,
            name: PaymentComponents.scheduleHeader,
            options: {
                cssClasses: ['pb-0', 'bb-schedule-header__relative-text'],
                label: $localize `:@@intrabank-config.schedule-label:Schedule`,
            },
        },
        {
            type: PaymentComponents.alert,
            name: PaymentComponents.alert,
            hidden: true,
            options: {
                cssClasses: ['col-md-12'],
                alerts: {
                    undue: {
                        title: $localize `:@@intrabank-config.undue-alert-label:A payment executed after the due date will incur a  late fee.`,
                        description: $localize `:@@intrabank-config.undue-alert-description:The due date is @@date. A payment made before may improve your credit score.`,
                        modifier: 'info',
                    },
                    overdue: {
                        title: $localize `:@@intrabank-config.overdue-alert-label:The due date has passed. This payment will incur a late fee.`,
                        description: $localize `:@@intrabank-config.overdue-alert-description:The due date was @@date. Late payments will decrease your credit score.`,
                        modifier: 'warning',
                    },
                },
            },
            hooks: {
                onInit: internalTransferScheduleAlertOnInitHook,
            },
        },
        {
            type: PaymentComponents.date,
            name: ScheduleFields.startDate,
            options: {
                label: $localize `:@@intrabank-config.transfer-date-label:Transfer date`,
                cssClasses: ['d-block', 'col-md-6', 'align-top'],
                validators: [Validators.required, pastDateValidator],
                defaultValue: new Date().toISOString(),
                validationMessages: [
                    {
                        name: 'pastDate',
                        message: $localize `:@@intrabank-config.past-date-error-message:Start date cannot be in the past`,
                    },
                ],
                description: $localize `:@@intrabank-config.transfer-date-description:You selected a date after the due date, this transfer will incur a late fee`,
            },
            hooks: {
                onInit: internalTransScheduleStartDateOnInitHook,
                onDestroy: scheduleStartDateOnDestroyHook,
            },
        },
        {
            type: PaymentComponents.select,
            name: ScheduleFields.frequency,
            options: {
                label: $localize `:@@intrabank-config.frequency-label:Frequency`,
                validators: [Validators.required],
                options: [
                    {
                        label: $localize `:@@intrabank-config.once-frequency-label:Once`,
                        value: Frequencies.ONCE,
                    },
                    {
                        label: $localize `:@@intrabank-config.weekly-frequency-label:Weekly`,
                        value: Frequencies.WEEKLY,
                    },
                    {
                        label: $localize `:@@intrabank-config.biweekly-frequency-label:Biweekly`,
                        value: Frequencies.BIWEEKLY,
                    },
                    {
                        label: $localize `:@@intrabank-config.monthly-frequency-label:Monthly`,
                        value: Frequencies.MONTHLY,
                    },
                    {
                        label: $localize `:@@intrabank-config.quarterly-frequency-label:Quarterly`,
                        value: Frequencies.QUARTERLY,
                    },
                    {
                        label: $localize `:@@intrabank-config.annually-frequency-label:Annually`,
                        value: Frequencies.YEARLY,
                    },
                ],
                defaultValue: Frequencies.ONCE,
                cssClasses: ['d-block', 'col-md-6', 'align-top'],
                dependants: [ScheduleFields.endType],
                activateDependantsOn: scheduleFrequencyToggleDependants,
            },
        },
        {
            type: PaymentComponents.radio,
            name: ScheduleFields.endType,
            options: {
                label: $localize `:@@intrabank-config.end-type-label:End`,
                preselect: true,
                isConditionalMandatory: true,
                cssClasses: ['d-inline-block', 'col-md-2', 'align-top'],
                defaultValue: ScheduleEndType.NEVER,
                options: [
                    {
                        label: $localize `:@@intrabank-config.never-end-type-label:Never`,
                        value: ScheduleEndType.NEVER,
                    },
                    {
                        label: $localize `:@@intrabank-config.after-end-type-label:After`,
                        value: ScheduleEndType.AFTER,
                    },
                ],
                dependants: [ScheduleFields.endDate, ScheduleFields.repeat],
                activateDependantsOn: scheduleEndTypeToggleDependants,
            },
        },
        {
            type: PaymentComponents.date,
            name: ScheduleFields.endDate,
            options: {
                cssClasses: [
                    'd-inline-block',
                    'col-md-10',
                    'align-top',
                    'bb-schedule__end-date',
                ],
                validators: [endDateAfterStartDateValidator],
                validationMessages: [
                    {
                        name: 'required',
                        message: $localize `:@@intrabank-config.end-date-required-message:End date is required`,
                    },
                    {
                        name: 'lessThanStartDate',
                        message: $localize `:@@intrabank-config.end-date-less-start-date-message:End date cannot be before start date`,
                    },
                ],
                isConditionalMandatory: true,
            },
            hooks: {
                onInit: scheduleEndDateOnInitHook,
            },
        },
        {
            type: PaymentComponents.number,
            name: ScheduleFields.repeat,
            options: {
                isConditionalMandatory: true,
                description: $localize `:@@intrabank-config.ocurrences-description:occurrences`,
                min: 2,
                max: 200,
                defaultValue: 2,
                validators: [minValueTwoValidator, maxValueTwoHundredValidator],
                validationMessages: [
                    {
                        name: 'required',
                        message: $localize `:@@intrabank-config.ocurrences-required-message:Value is required`,
                    },
                    {
                        name: 'min',
                        message: $localize `:@@intrabank-config.min-ocurrences-message:Value is below the minimum allowed occurrences (2)`,
                    },
                    {
                        name: 'max',
                        message: $localize `:@@intrabank-config.max-ocurrences-message:Value exceeds maximum allowed occurances (200)`,
                    },
                ],
                cssClasses: [
                    'd-inline-block',
                    'col-md-9',
                    'align-top',
                    'px-0',
                    'bb-schedule__repeat',
                    'bb-schedule__repeat--two-option',
                ],
            },
        },
    ],
};
const INTRABANK_TRANSFER = {
    fields: [initiator$4, counterParty$1, remittanceInfo$3, schedule$2],
    name: $localize `:@@intrabank-config.name:Intrabank Transfer`,
    paymentType: 'INTRABANK_TRANSFER',
    businessFunction: 'A2A Transfer',
    hooks: {
        onDestroy: internalTransferOnDestroyHook,
    },
};

const initiator$3 = {
    name: PaymentBaseFields.initiator,
    fields: [
        {
            type: PaymentComponents.accountSelector,
            name: InitiatorFields.initiatorAccountGroup,
            options: {
                label: $localize `:@@internal-bus-config.initiator-label:From`,
                placeholder: $localize `:@@internal-bus-config.initiator-placeholder:Select an account`,
                cssClasses: ['col-12', 'bb-block', 'bb-block--lg'],
                validationMessages: [
                    {
                        name: 'required',
                        message: $localize `:@@internal-bus-config.initiator-required-error:Please select an account from the list to transfer from`,
                    },
                ],
            },
        },
    ],
};
const counterparty$1 = {
    name: PaymentBaseFields.counterparty,
    fields: [
        {
            type: PaymentComponents.accountSelector,
            name: CounterPartyFields.counterPartyAccountGroup,
            options: {
                label: $localize `:@@internal-bus-config.counterparty-label:To`,
                placeholder: $localize `:@@internal-bus-config.counterparty-placeholder:Select an account`,
                cssClasses: ['col-12', 'bb-block', 'bb-block--lg'],
                validationMessages: [
                    {
                        name: 'required',
                        message: $localize `:@@internal-bus-config.counterparty-required-err:Please select an account from the list to transfer to`,
                    },
                    {
                        message: $localize `:@@internal-bus-config.counterparty-same-acc-err:Beneficiary is same as selected Debit account`,
                        name: 'sameDebitCreditAccountsSelected',
                    },
                ],
            },
        },
    ],
};
const remittanceInfo$2 = {
    name: PaymentBaseFields.remittanceInfo,
    fields: [
        {
            type: PaymentComponents.amount,
            name: RemittanceInfoFields.amountCurrencyGroup,
            options: {
                label: $localize `:@@internal-bus-config.amount-label:Amount`,
                currencies: ['USD'],
                cssClasses: ['col-md-8', 'large-label'],
            },
        },
        {
            name: CounterPartyFields.remittanceInformation,
            type: PaymentComponents.textarea,
            options: {
                label: $localize `:@@internal-bus-config.remittance-Info-label:Description`,
                showCharCounter: true,
                minLength: 0,
                rows: 3,
                maxLength: 140,
                cols: 50,
                cssClasses: ['col-md-8'],
                mapToField: PaymentBaseFields.counterparty,
            },
        },
    ],
};
const schedule$1 = {
    name: PaymentBaseFields.schedule,
    fields: [
        {
            type: PaymentComponents.date,
            name: ScheduleFields.startDate,
            options: {
                label: $localize `:@@internal-bus-config.start-date-label:Start on`,
                cssClasses: ['d-inline-block', 'col-md-6', 'align-top'],
                validators: [Validators.required, pastDateValidator],
                defaultValue: new Date().toISOString(),
                validationMessages: [
                    {
                        name: 'pastDate',
                        message: $localize `:@@internal-bus-config.start-date-past-err:Start date cannot be in the past`,
                    },
                ],
            },
            hooks: {
                onInit: scheduleStartDateOnInitHook,
                onDestroy: scheduleStartDateOnDestroyHook,
            },
        },
        {
            name: ScheduleFields.frequency,
            type: PaymentComponents.select,
            options: {
                label: 'Frequency',
                validators: [Validators.required],
                options: [
                    {
                        label: $localize `:@@internal-bus-config.freq-once-label:Once`,
                        value: Frequencies.ONCE,
                    },
                    {
                        label: $localize `:@@internal-bus-config.freq-daily-label:Daily`,
                        value: Frequencies.DAILY,
                    },
                    {
                        label: $localize `:@@internal-bus-config.freq-weekly-label:Weekly`,
                        value: Frequencies.WEEKLY,
                    },
                    {
                        label: $localize `:@@internal-bus-config.freq-biweekly-label:Biweekly`,
                        value: Frequencies.BIWEEKLY,
                    },
                    {
                        label: $localize `:@@internal-bus-config.freq-monthly-label:Monthly`,
                        value: Frequencies.MONTHLY,
                    },
                    {
                        label: $localize `:@@internal-bus-config.freq-quarterly-label:Quarterly`,
                        value: Frequencies.QUARTERLY,
                    },
                    {
                        label: $localize `:@@internal-bus-config.freq-annually-label:Annually`,
                        value: Frequencies.YEARLY,
                    },
                ],
                defaultValue: Frequencies.ONCE,
                cssClasses: ['d-inline-block', 'col-md-6', 'align-top'],
                dependants: [ScheduleFields.endType],
                activateDependantsOn: scheduleFrequencyToggleDependants,
            },
        },
        {
            name: ScheduleFields.endType,
            type: PaymentComponents.radio,
            options: {
                label: 'End',
                preselect: true,
                isConditionalMandatory: true,
                cssClasses: [
                    'd-inline-block',
                    'col-md-2',
                    'align-top',
                    'bb-schedule__end-type',
                ],
                defaultValue: ScheduleEndType.NEVER,
                options: [
                    {
                        label: $localize `:@@internal-bus-config.end-date-type-never-label:Never`,
                        value: ScheduleEndType.NEVER,
                    },
                    {
                        label: $localize `:@@internal-bus-config.end-date-type-on-label:On date`,
                        value: ScheduleEndType.ON,
                    },
                    {
                        label: $localize `:@@internal-bus-config.end-date-type-after-label:After`,
                        value: ScheduleEndType.AFTER,
                    },
                ],
                dependants: [ScheduleFields.endDate, ScheduleFields.repeat],
                activateDependantsOn: scheduleEndTypeToggleDependants,
            },
        },
        {
            type: PaymentComponents.date,
            name: ScheduleFields.endDate,
            options: {
                cssClasses: [
                    'd-inline-block',
                    'col-md-10',
                    'align-top',
                    'bb-schedule__end-date',
                ],
                validators: [endDateAfterStartDateValidator],
                validationMessages: [
                    {
                        name: 'required',
                        message: $localize `:@@internal-bus-config.end-date-past-err:End date is required`,
                    },
                    {
                        name: 'lessThanStartDate',
                        message: $localize `:@@internal-bus-config.end-date--before-start-err:End date cannot be before start date`,
                    },
                ],
                isConditionalMandatory: true,
            },
            hooks: {
                onInit: scheduleEndDateOnInitHook,
            },
        },
        {
            name: ScheduleFields.repeat,
            type: PaymentComponents.number,
            options: {
                isConditionalMandatory: true,
                description: $localize `:@@internal-bus-config.repeat-desc:times`,
                min: 2,
                max: 200,
                defaultValue: 2,
                validators: [minValueTwoValidator, maxValueTwoHundredValidator],
                validationMessages: [
                    {
                        name: 'required',
                        message: $localize `:@@internal-bus-config.repeat-required-err:Value is required`,
                    },
                    {
                        name: 'min',
                        message: $localize `:@@internal-bus-config.repeat-min-val-err:Value is below the minimum allowed occurrences (2)`,
                    },
                    {
                        name: 'max',
                        message: $localize `:@@internal-bus-config.repeat-max-val-err:Value exceeds maximum allowed occurances (200)`,
                    },
                ],
                cssClasses: [
                    'd-inline-block',
                    'col-md-9',
                    'align-top',
                    'px-0',
                    'bb-schedule__repeat',
                ],
            },
        },
    ],
};
const INTERNAL_TRANSFER_BUSINESS = {
    fields: [initiator$3, counterparty$1, remittanceInfo$2, schedule$1],
    name: $localize `:@@internal-bus-config.name:Internal Transfer`,
    businessFunction: 'A2A Transfer',
    paymentType: 'INTERNAL_TRANSFER',
};

const emailRegex = /(^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$)$/;
const phoneNumberRegex = /(^(?:\+?1[-. ]?)?\(?([0-9]{3})\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$)$/;
const initiator$2 = {
    name: PaymentBaseFields.initiator,
    fields: [
        {
            type: PaymentComponents.header,
            name: PaymentComponents.header,
            options: {
                cssClasses: ['px-3', 'mb-3'],
                heading: $localize `:@@p2p-config.initiator-label:From`,
                headingType: 'h3',
            },
        },
        {
            type: PaymentComponents.internalAccountSelector,
            name: InitiatorFields.initiatorAccountGroup,
            options: {
                placeholder: $localize `:@@p2p-config.initiator-placeholder:Select an account`,
                cssClasses: ['col-12', 'bb-block', 'bb-block--xl'],
                preselect: true,
            },
        },
    ],
};
const counterParty = {
    name: PaymentBaseFields.counterparty,
    fields: [
        {
            type: PaymentComponents.header,
            name: PaymentComponents.header,
            options: {
                cssClasses: ['px-3', 'mb-3'],
                heading: $localize `:@@p2p-config.beneficiary-label:To`,
                headingType: 'h3',
            },
        },
        {
            name: CounterPartyFields.name,
            type: PaymentComponents.contactSelector,
            options: {
                label: $localize `:@@p2p-config.beneficiary-contact-label:Name`,
                placeholder: $localize `:@@p2p-config.beneficiary-contact-description:Select contact or enter new`,
                cssClasses: ['col-md-6'],
                validators: [Validators.required],
                mapItems: (contacts) => contacts.filter(({ accounts }) => { var _a, _b; return ((_a = accounts[0]) === null || _a === void 0 ? void 0 : _a.email) || ((_b = accounts[0]) === null || _b === void 0 ? void 0 : _b.phoneNumber); }),
                contactSchemes: [
                    { name: ContactScheme.email, regex: emailRegex },
                    { name: ContactScheme.phoneNumber, regex: phoneNumberRegex },
                ],
                validationMessages: [
                    {
                        message: $localize `:@@p2p-config.beneficiary-invalid-name-message:Enter a valid name`,
                        name: 'pattern',
                    },
                    {
                        name: 'required',
                        message: $localize `:@@p2p-config.beneficiary-required-name-message:Please select a contact or enter a new one manually`,
                    },
                ],
            },
        },
        {
            name: CounterPartyFields.accountNumber,
            type: PaymentComponents.text,
            options: {
                validators: [
                    Validators.required,
                    Validators.pattern(new RegExp(phoneNumberRegex.source + '|' + emailRegex.source)),
                ],
                label: $localize `:@@p2p-config.beneficiary-account-number-label:Mobile Number or Email Address`,
                cssClasses: ['col-md-6', 'bb-block', 'bb-block--md'],
                validationMessages: [
                    {
                        name: 'required',
                        message: $localize `:@@p2p-config.beneficiary-account-number-required-message:Please enter a valid mobile number or email address`,
                    },
                ],
            },
        },
        {
            name: CounterPartyFields.saveNewContact,
            type: PaymentComponents.checkbox,
            options: {
                cssClasses: ['col-md-6', 'bb-block', 'bb-block--lg'],
                label: $localize `:@@p2p-config.new-contact-label:Save to contacts`,
            },
            hooks: {
                onInit: intrabankCheckboxOnInitHook,
            },
        },
    ],
};
const remittanceInfo$1 = {
    name: PaymentBaseFields.remittanceInfo,
    fields: [
        {
            type: PaymentComponents.header,
            name: PaymentComponents.header,
            options: {
                cssClasses: ['col-12', 'pb-0', 'pt-2', 'bb-fieldset__heading'],
                heading: $localize `:@@p2p-config.remittance-info-heading:Payment details`,
                headingType: 'h2',
                headingClasses: ['mb-0'],
                separatorLine: true,
            },
        },
        {
            type: PaymentComponents.compactAmount,
            name: RemittanceInfoFields.amountCurrencyGroup,
            options: {
                label: $localize `:@@p2p-config.amount-label:Amount`,
                cssClasses: [
                    'bb-amount-input__field--large',
                    'bb-block',
                    'bb-block--lg',
                    'col-md-6',
                ],
                currency: 'USD',
                autoDecimal: true,
                keepValueOnHidden: true,
                validationMessages: [
                    {
                        name: 'invalidAmount',
                        message: $localize `:@@p2p-config.invalid-amount-message:Please add amount of this transfer`,
                    },
                    {
                        name: P2PLimitErrorKeys.minLimit,
                        message: $localize `:@@p2p-config.amount-limit-min:The amount can't be lower than #amount#. Please enter a higher amount.`,
                    },
                    {
                        name: P2PLimitErrorKeys.maxLimit,
                        message: $localize `:@@p2p-config.amount-limit-max:The amount can't exceed #amount#. Please enter a lower amount.`,
                    },
                ],
            },
        },
        {
            type: PaymentComponents.textarea,
            name: RemittanceInfoFields.description,
            options: {
                label: $localize `:@@p2p-config.add-memo-label:Add memo`,
                placeholder: $localize `:@@p2p-config.add-memo-placeholder:Enter memo`,
                showCharCounter: true,
                minLength: 0,
                rows: 2,
                maxLength: 140,
                helperText: $localize `:@@p2p-config.add-memo-helper-text: (Optional)`,
                cssClasses: ['col-md-6', 'bb-block', 'bb-block--lg'],
            },
        },
    ],
};
const schedule = {
    name: PaymentBaseFields.schedule,
    fields: [
        {
            type: PaymentComponents.scheduleHeader,
            name: PaymentComponents.scheduleHeader,
            options: {
                cssClasses: ['pb-0', 'bb-schedule-header__relative-text'],
                label: $localize `:@@p2p-config.schedule-label:Schedule`,
            },
        },
        {
            type: PaymentComponents.alert,
            name: PaymentComponents.alert,
            hidden: true,
            options: {
                cssClasses: ['col-md-12'],
                alerts: {
                    undue: {
                        title: $localize `:@@p2p-config.undue-alert-label:A payment executed after the due date will incur a  late fee.`,
                        description: $localize `:@@p2p-config.undue-alert-description:The due date is @@date. A payment made before may improve your credit score.`,
                        modifier: 'info',
                    },
                    overdue: {
                        title: $localize `:@@p2p-config.overdue-alert-label:The due date has passed. This payment will incur a late fee.`,
                        description: $localize `:@@p2p-config.overdue-alert-description:The due date was @@date. Late payments will decrease your credit score.`,
                        modifier: 'warning',
                    },
                },
            },
            hooks: {
                onInit: internalTransferScheduleAlertOnInitHook,
            },
        },
        {
            type: PaymentComponents.date,
            name: ScheduleFields.startDate,
            options: {
                label: $localize `:@@p2p-config.transfer-date-label:Transfer date`,
                cssClasses: ['d-block', 'col-md-6', 'align-top'],
                validators: [Validators.required, pastDateValidator],
                defaultValue: new Date().toISOString(),
                validationMessages: [
                    {
                        name: 'pastDate',
                        message: $localize `:@@p2p-config.past-date-error-message:Start date cannot be in the past`,
                    },
                ],
                description: $localize `:@@p2p-config.transfer-date-description:You selected a date after the due date, this transfer will incur a late fee`,
            },
            hooks: {
                onInit: internalTransScheduleStartDateOnInitHook,
                onDestroy: scheduleStartDateOnDestroyHook,
            },
        },
        {
            type: PaymentComponents.select,
            name: ScheduleFields.frequency,
            options: {
                label: $localize `:@@p2p-config.frequency-label:Frequency`,
                validators: [Validators.required],
                options: [
                    {
                        label: $localize `:@@p2p-config.once-frequency-label:Once`,
                        value: Frequencies.ONCE,
                    },
                    {
                        label: $localize `:@@p2p-config.weekly-frequency-label:Weekly`,
                        value: Frequencies.WEEKLY,
                    },
                    {
                        label: $localize `:@@p2p-config.biweekly-frequency-label:Biweekly`,
                        value: Frequencies.BIWEEKLY,
                    },
                    {
                        label: $localize `:@@p2p-config.monthly-frequency-label:Monthly`,
                        value: Frequencies.MONTHLY,
                    },
                    {
                        label: $localize `:@@p2p-config.quarterly-frequency-label:Quarterly`,
                        value: Frequencies.QUARTERLY,
                    },
                    {
                        label: $localize `:@@p2p-config.annually-frequency-label:Annually`,
                        value: Frequencies.YEARLY,
                    },
                ],
                defaultValue: Frequencies.ONCE,
                cssClasses: ['d-block', 'col-md-6', 'align-top'],
                dependants: [ScheduleFields.endType],
                activateDependantsOn: scheduleFrequencyToggleDependants,
            },
        },
        {
            type: PaymentComponents.radio,
            name: ScheduleFields.endType,
            options: {
                label: $localize `:@@p2p-config.end-type-label:End`,
                preselect: true,
                isConditionalMandatory: true,
                cssClasses: ['d-inline-block', 'col-md-2', 'align-top'],
                defaultValue: ScheduleEndType.NEVER,
                options: [
                    {
                        label: $localize `:@@p2p-config.never-end-type-label:Never`,
                        value: ScheduleEndType.NEVER,
                    },
                    {
                        label: $localize `:@@p2p-config.after-end-type-label:After`,
                        value: ScheduleEndType.AFTER,
                    },
                ],
                dependants: [ScheduleFields.endDate, ScheduleFields.repeat],
                activateDependantsOn: scheduleEndTypeToggleDependants,
            },
        },
        {
            type: PaymentComponents.date,
            name: ScheduleFields.endDate,
            options: {
                cssClasses: [
                    'd-inline-block',
                    'col-md-10',
                    'align-top',
                    'bb-schedule__end-date',
                ],
                validators: [endDateAfterStartDateValidator],
                validationMessages: [
                    {
                        name: 'required',
                        message: $localize `:@@p2p-config.end-date-required-message:End date is required`,
                    },
                    {
                        name: 'lessThanStartDate',
                        message: $localize `:@@p2p-config.end-date-less-start-date-message:End date cannot be before start date`,
                    },
                ],
                isConditionalMandatory: true,
            },
            hooks: {
                onInit: scheduleEndDateOnInitHook,
            },
        },
        {
            type: PaymentComponents.number,
            name: ScheduleFields.repeat,
            options: {
                isConditionalMandatory: true,
                description: $localize `:@@p2p-config.ocurrences-description:occurrences`,
                min: 2,
                max: 200,
                defaultValue: 2,
                validators: [minValueTwoValidator, maxValueTwoHundredValidator],
                validationMessages: [
                    {
                        name: 'required',
                        message: $localize `:@@p2p-config.ocurrences-required-message:Value is required`,
                    },
                    {
                        name: 'min',
                        message: $localize `:@@p2p-config.min-ocurrences-message:Value is below the minimum allowed occurrences (2)`,
                    },
                    {
                        name: 'max',
                        message: $localize `:@@p2p-config.max-ocurrences-message:Value exceeds maximum allowed occurances (200)`,
                    },
                ],
                cssClasses: [
                    'd-inline-block',
                    'col-md-9',
                    'align-top',
                    'px-0',
                    'bb-schedule__repeat',
                    'bb-schedule__repeat--two-option',
                ],
            },
        },
    ],
};
const P2P_TRANSFER = {
    fields: [initiator$2, counterParty, remittanceInfo$1, schedule],
    name: $localize `:@@p2p-config.name:P2P Transfer`,
    paymentType: 'P2P_TRANSFER',
    businessFunction: 'P2P Transfer',
    hooks: {
        onDestroy: internalTransferOnDestroyHook,
    },
};

const initiator$1 = {
    name: PaymentBaseFields.initiator,
    title: $localize `:@@ach-debit-config.initiator-label:Transfer to`,
    fields: [
        {
            type: PaymentComponents.accountSelector,
            name: InitiatorFields.initiatorAccountGroup,
            options: {
                placeholder: 'Select an account',
                cssClasses: ['col-12', 'mb-0'],
                validationMessages: [
                    {
                        message: $localize `:@@ach-debit-config.account-missing-error-message:Account is invalid`,
                        name: 'missingInList',
                    },
                    {
                        message: $localize `:@@ach-debit-config.required-message:Please select an account`,
                        name: 'required',
                    },
                    {
                        message: $localize `:@@ach-debit-config.closed-permission-error-message:You can not do payments to new beneficiary from this account.`,
                        name: 'hasOnlyClosedPaymentPermission',
                    },
                ],
            },
        },
    ],
};
const counterparty = {
    name: PaymentBaseFields.counterparty,
    fields: [
        {
            name: PaymentComponents.beneficiaryGroupHeader,
            type: PaymentComponents.beneficiaryGroupHeader,
            options: {
                label: $localize `:@@ach-debit-config.beneficiary.header-label:Collect from`,
                hasDynamicTitle: true,
            },
        },
        {
            name: CounterPartyFields.name,
            type: PaymentComponents.beneficiarySelector,
            options: {
                placeholder: $localize `:@@ach-debit-config.beneficiary-selector-placeholder:Select a client`,
                cssClasses: ['col-12', 'mb-0'],
                saveNewContactLabel: 'Save as a new contact',
                validationMessages: [
                    {
                        message: $localize `:@@ach-debit-config.new-contact-label:Beneficiary is same as selected Debit account`,
                        name: 'sameDebitCreditAccountsSelected',
                    },
                ],
                dependants: [
                    CounterPartyFields.creditorBank,
                    CounterPartyFields.accountNumber,
                    CounterPartyFields.postalAddress,
                    CounterPartyFields.bankBranchCode,
                ],
                tabs: [BeneficiaryList.CONTACTS],
            },
        },
        {
            name: CounterPartyFields.accountNumber,
            type: PaymentComponents.text,
            options: {
                validators: [Validators.required],
                label: $localize `:@@ach-debit-config.beneficiary.account-number-label:Account number`,
                maxLength: 36,
                cssClasses: ['d-inline-block', 'col-md-6', 'align-top', 'pr-md-3'],
            },
        },
        {
            name: CounterPartyFields.creditorBank,
            fields: [
                {
                    name: CounterPartyFields.bankBranchCode,
                    type: PaymentComponents.text,
                    options: {
                        validators: [Validators.required, routingTransitNumberValidator],
                        label: $localize `:@@ach-debit-config.bank-code-label:Routing transit number (ABA)`,
                        maxLength: 20,
                        mapToField: `${PaymentBaseFields.counterparty}.${CounterPartyFields.creditorBank}`,
                        cssClasses: ['d-inline-block', 'col-md-6', 'align-top', 'pr-md-3'],
                    },
                },
            ],
        },
        {
            name: CounterPartyFields.postalAddress,
            type: PaymentComponents.address,
            options: {
                addressType: 'client',
                cssClasses: ['col-12'],
                states: US_States,
                countries: [
                    {
                        label: 'United States',
                        value: 'US',
                    },
                ],
            },
        },
        {
            name: CounterPartyFields.creditorBank,
            fields: [
                {
                    name: CounterPartyFields.bankName,
                    type: PaymentComponents.text,
                    options: {
                        label: $localize `:@@ach-debit-config.creditor-bank-name-label:Bank name`,
                        helperText: $localize `:@@ach-debit-config.bank-name-helper-text: (optional)`,
                        maxLength: 140,
                        cssClasses: ['d-inline-block', 'col-md-6', 'align-top', 'pr-md-3'],
                    },
                },
                {
                    name: CounterPartyFields.postalAddress,
                    type: PaymentComponents.address,
                    options: {
                        addressType: 'client bank',
                        cssClasses: ['col-12'],
                        states: US_States,
                        countries: [
                            {
                                label: 'United States',
                                value: 'US',
                            },
                        ],
                    },
                },
            ],
        },
    ],
};
const remittanceInfo = {
    name: PaymentBaseFields.remittanceInfo,
    fields: [
        {
            type: PaymentComponents.amount,
            name: RemittanceInfoFields.amountCurrencyGroup,
            options: {
                label: $localize `:@@ach-debit-config.amount-label:Amount`,
                cssClasses: ['col-md-8', 'large-label', 'mt-4'],
                currencies: ['USD'],
                validationMessages: [
                    {
                        message: $localize `:@@ach-debit-config.invalid-amount-message:Enter amount`,
                        name: 'invalidAmount',
                    },
                ],
            },
        },
    ],
};
const additionalMessage = {
    name: 'additionalMessage',
    fields: [
        {
            name: CounterPartyFields.mandateIdentifier,
            type: PaymentComponents.text,
            options: {
                label: $localize `:@@ach-debit-config.mandate-identifier-label:Mandate identifier`,
                placeholder: $localize `:@@ach-debit-config.mandate-identifier-placeholder:Enter mandate identifier`,
                helperText: $localize `:@@ach-debit-config.mandate-identifier-helper-text: (optional)`,
                minLength: 0,
                maxLength: 35,
                cssClasses: ['d-block', 'col-md-8'],
                mapToField: PaymentBaseFields.counterparty,
            },
        },
        {
            name: CounterPartyFields.remittanceInformation,
            type: PaymentComponents.textarea,
            options: {
                label: $localize `:@@ach-debit-config.remittance-info-label:Message to client`,
                helperText: $localize `:@@ach-debit-config.remittance-info-helper-text: (optional)`,
                showCharCounter: true,
                collapseOptions: {
                    label: $localize `:@@ach-debit-config.collapsed.remittance-info-label:Add message to client`,
                },
                minLength: 0,
                rows: 3,
                maxLength: 140,
                cols: 50,
                cssClasses: ['d-block', 'col-md-8'],
                mapToField: PaymentBaseFields.counterparty,
            },
        },
        {
            name: CounterPartyFields.messageToBank,
            type: PaymentComponents.textarea,
            options: {
                label: $localize `:@@ach-debit-config.message-to-bank-label:Message to client bank`,
                helperText: $localize `:@@ach-debit-config.message-to-bank-helper-text: (optional)`,
                showCharCounter: true,
                collapseOptions: {
                    label: $localize `:@@ach-debit-config.message-to-bank-collapsed-label:Add message to client bank`,
                },
                maxLength: 140,
                cssClasses: ['d-block', 'col-md-8'],
                mapToField: PaymentBaseFields.counterparty,
            },
        },
    ],
};
const isDebitPayment = {
    name: HiddenFields.isDebitPayment,
    type: PaymentComponents.checkbox,
    options: {
        cssClasses: ['d-none'],
        defaultValue: true,
    },
};
const ACH_DEBIT = {
    fields: [
        initiator$1,
        remittanceInfo,
        counterparty,
        additionalMessage,
        defaultScheduleConfig,
        isDebitPayment,
    ],
    name: $localize `:@@ach-debit-config.name:ACH Debit`,
    businessFunction: 'ACH Debit',
    paymentType: 'ACH_DEBIT',
};

const batchInfo = {
    name: 'batchInfo',
    title: 'Internal transfers',
    subTitle: 'Add the main batch information',
    fields: [
        {
            type: PaymentComponents.text,
            name: 'name',
            options: {
                validators: [Validators.required, noWhitespaceValidator],
                validationMessages: [
                    { message: 'Batch name is required', name: 'required' },
                ],
                label: 'Batch name',
                showCharCounter: true,
                maxLength: 25,
                cssClasses: ['w-50'],
            },
        },
        {
            type: PaymentComponents.date,
            name: 'requestedExecutionDate',
            options: {
                validators: [pastDateValidator, Validators.required],
                validationMessages: [
                    { message: 'Execution date cannot be in past', name: 'pastDate' },
                ],
                label: 'Execution date',
                cssClasses: ['w-50'],
            },
        },
    ],
    stepName: 'batchInfo',
};
const creditDebitSelection = {
    name: 'creditDebitSelection',
    fields: [
        {
            type: PaymentComponents.creditDebitSelector,
            name: 'creditDebitIndicator',
            options: {
                label: 'Internal transfers',
                choices: [
                    {
                        type: 'CREDIT',
                        name: 'Send',
                        description: 'Send funds to multiple own accounts',
                    },
                    // { type: 'DEBIT', name: 'Receive', description: 'Receive funds from multiple own accounts' },
                ],
            },
        },
    ],
    stepName: 'transferDetails',
};
const initiator = {
    name: PaymentBaseFields.initiator,
    cssClasses: ['bb-block', 'bb-block--xl'],
    fields: [
        {
            type: PaymentComponents.multiPaymentAccountSelector,
            name: InitiatorFields.initiatorAccountGroup,
            options: {
                label: 'From',
                placeholder: 'Select an account',
                validators: [Validators.required],
                validationMessages: [
                    { message: 'Account is required', name: 'required' },
                ],
                arrangements: {
                    privilege: 'create',
                    ignoredProductKindNames: [
                        ProductKinds.creditCard,
                        ProductKinds.debitCard,
                    ],
                },
                cssClasses: ['w-75'],
                filterItems: false,
                required: true,
                showBankBranchCode: true,
            },
        },
    ],
    stepName: 'transferDetails',
    separator: {
        icon: { name: 'arrow-downward', color: 'dark' },
    },
};
const verifyOnBlur = (form) => { };
const payments = {
    name: PaymentBaseFields.counterparty,
    cssClasses: ['bb-block', 'bb-block--xl'],
    fields: [
        {
            type: PaymentComponents.multiPaymentCard,
            name: InitiatorFields.initiatorAccountGroup,
            options: {
                label: 'To',
                helperText: 'You can add up to %s transfers',
                validators: [minimumOneAccount],
                maximumNumberOfPayments: 100,
                validationMessages: [
                    { message: 'Minimum one transfer is required', name: 'empty' },
                ],
                arrangements: {
                    privilege: 'view',
                    ignoredProductKindNames: [
                        ProductKinds.creditCard,
                        ProductKinds.debitCard,
                        ProductKinds.loanAccount,
                    ],
                },
                fieldsConfig: {
                    counterpartyName: {
                        header: 'Own account',
                        validators: [
                            Validators.required,
                            accountsValidation(PaymentBaseFields.initiator),
                        ],
                        placeholder: 'Enter or select account',
                        dropdownIcon: '',
                        ariaLabel: '',
                        validationMessages: [
                            { message: 'Account is required', name: 'required' },
                            { message: 'Account is same as from', name: 'sameAccount' },
                        ],
                    },
                    amount: {
                        validators: [
                            Validators.required,
                            amountGreaterThanZero,
                        ],
                        placeholder: '0.00',
                        ariaLabel: '',
                        currency: 'USD',
                        maxLength: 10,
                        validationMessages: [
                            { message: 'Amount is required', name: 'required' },
                            { message: 'Amount is required', name: 'invalidAmount' },
                        ],
                    },
                    description: {
                        validators: [],
                        placeholder: 'Enter Description',
                        label: 'Add Description',
                        helperText: 'Optional',
                        title: 'Description',
                    },
                },
                hooks: {
                    onBlur: verifyOnBlur,
                },
            },
        },
    ],
    stepName: 'transferDetails',
};
/**
 * @deprecated Use `INTRACOMPANY_PAYMENT_CREDIT_USA` from `@backbase/batch-common-ang`.
 * Will be removed in widget collection v.3.11.0
 */
const BATCH_INTERNAL_TRANSFERS = {
    fields: [batchInfo, creditDebitSelection, initiator, payments],
    name: 'Internal transfers',
    description: 'Send funds to multiple own accounts',
    paymentType: 'INTRACOMPANY_PAYMENT_CREDIT_USA',
    resourceName: 'Batch',
    businessFunction: 'Batch - Intracompany Payments',
    customFields: {},
    options: {},
};
const STEPPER_CONFIG = [
    {
        stepName: 'batchInfo',
        stepDisplayValue: 'Batch info',
        cssClasses: ['card', 'card-body'],
        isActive: true,
        isChecked: false,
        buttonClass: [],
        buttonConfig: [
            {
                type: 'primary',
                text: 'Next: Transfer details',
                action: StepperAction.NEXT,
                hooks: {
                    onClick: onClickEvent,
                },
            },
        ],
    },
    {
        stepName: 'transferDetails',
        stepDisplayValue: 'Transfer details',
        isActive: false,
        isChecked: false,
        cssClasses: ['pb-5', 'mb-5'],
        buttonClass: ['py-4', 'fixed-bottom', 'bb-button-bar--sticky', 'px-sm-3'],
        footerDetail: { totalAmount: true, totalCount: true },
        buttonConfig: [
            {
                type: 'secondary',
                text: 'Back',
                action: StepperAction.BACK,
            },
            {
                type: 'primary',
                text: 'Next: Review',
                action: StepperAction.NEXT,
            },
        ],
    },
    {
        stepName: 'review',
        stepDisplayValue: 'Review',
        cssClasses: ['card', 'card-body', 'bb-block', 'bb-block--lg'],
        isActive: false,
        isChecked: false,
        buttonClass: [],
        buttonConfig: [
            {
                type: 'secondary',
                text: 'Edit',
                action: StepperAction.BACK,
            },
            {
                type: 'primary',
                text: 'Submit',
                action: StepperAction.SUBMIT,
            },
        ],
    },
];
function onClickEvent({ doneFn, stepperConfig, action, }) {
    if (doneFn) {
        doneFn(stepperConfig, action);
    }
}
/**
 * @deprecated Use `MANUAL_BATCH` from `@backbase/batch-common-ang`.
 * Will be removed in widget collection v.3.11.0
 */
const MULTIPLE_PAYMENT = {
    availableTypes: [BATCH_INTERNAL_TRANSFERS],
    enableTypeSelection: ['batchInfo'],
    steps: STEPPER_CONFIG,
    options: {
        successEventName: 'bb.event.batch.create.success',
        createTemplates: true,
    },
};

var ViewType;
(function (ViewType) {
    ViewType["CARD"] = "CARD";
    ViewType["FORM"] = "FORM";
    ViewType["BUTTON"] = "BUTTON";
})(ViewType || (ViewType = {}));
class BreachLimitError {
    constructor(reportError) {
        this.reportError = reportError;
        this.kind = BatchOrderError.BREACH_LIMIT;
    }
}
var PaymentTemplateAction;
(function (PaymentTemplateAction) {
    PaymentTemplateAction["CREATE"] = "CREATE";
    PaymentTemplateAction["VIEW"] = "VIEW";
})(PaymentTemplateAction || (PaymentTemplateAction = {}));
/** @deprecated Use `CreditDebitMixedIndicator` from `@backbase/data-ang/payment-batch` instead */
var CreditDebitMixedIndicator;
(function (CreditDebitMixedIndicator) {
    CreditDebitMixedIndicator["CREDIT"] = "CREDIT";
    CreditDebitMixedIndicator["DEBIT"] = "DEBIT";
    CreditDebitMixedIndicator["MIXED"] = "MIXED";
})(CreditDebitMixedIndicator || (CreditDebitMixedIndicator = {}));
const RoutableModalParamName = 'modalOpened';

const getConfig = (configName, parent) => {
    let fields = [];
    if (!configName) {
        return;
    }
    if (Array.isArray(parent)) {
        fields = [...parent];
    }
    else if ((parent === null || parent === void 0 ? void 0 : parent.name) === configName) {
        return parent;
    }
    else {
        fields = parent ? [...parent.fields] : [];
    }
    let config;
    while (fields.length) {
        config = fields.shift();
        if (config) {
            if (config.name === configName) {
                return config;
            }
            else if (config.fields) {
                fields.push(...config.fields);
            }
        }
    }
    return;
};
const isFormGroupConfig = (config) => Array.isArray(config.fields);
const isAdditionsGroup = (group) => group.name === PaymentBaseFields.additions ||
    group.name === CounterPartyFields.counterpartyAccountAdditions;
function getLabelFromPaymentConfig(name, paymentConfig, parentName = '') {
    const parentConfig = parentName
        ? getConfig(parentName, paymentConfig)
        : paymentConfig;
    const config = getConfig(name, parentConfig);
    let label = '';
    if (config) {
        if (isFormGroupConfig(config)) {
            label = config.title || '';
        }
        else if (config.options) {
            label = config.options.label || '';
        }
    }
    return label;
}
const cloneFormFieldOptions = (options = {}) => {
    const newOptions = Object.assign({}, options);
    for (const key in newOptions) {
        if (Array.isArray(newOptions[key])) {
            newOptions[key] = [...newOptions[key]];
        }
        else if (typeof newOptions[key] === 'object') {
            newOptions[key] = Object.assign({}, newOptions[key]);
        }
    }
    return newOptions;
};
const clonePaymentFormItem = (formItemConfig) => {
    var _a, _b;
    const configItem = Object.assign({}, formItemConfig);
    if ((_b = (_a = formItemConfig) === null || _a === void 0 ? void 0 : _a.fields) === null || _b === void 0 ? void 0 : _b.length) {
        configItem.fields = formItemConfig.fields.map(clonePaymentFormItem);
    }
    else {
        configItem.options = cloneFormFieldOptions(formItemConfig.options);
    }
    return configItem;
};
const clonePaymentConfig = (config) => (Object.assign(Object.assign({}, config), { fields: config.fields.map(clonePaymentFormItem) }));
function setFrequencyOptionsPerConfig(config, isRecurring = false, scheduleConfigOptions) {
    var _a;
    const clonedConfig = clonePaymentConfig(config);
    const schedule = getConfig(PaymentBaseFields.schedule, clonedConfig);
    const frequencyFieldOptions = (_a = getConfig(ScheduleFields.frequency, schedule)) === null || _a === void 0 ? void 0 : _a.options;
    if (isRecurring && !scheduleConfigOptions.isRecurrentToOneOffAllowed) {
        frequencyFieldOptions === null || frequencyFieldOptions === void 0 ? void 0 : frequencyFieldOptions.options.shift();
    }
    else if (!isRecurring &&
        !scheduleConfigOptions.isOneOffToRecurrentAllowed) {
        frequencyFieldOptions.options = [frequencyFieldOptions === null || frequencyFieldOptions === void 0 ? void 0 : frequencyFieldOptions.options[0]];
    }
    return Object.assign({}, clonedConfig);
}
function removeScheduleFromConfig(config) {
    const clonedConfig = clonePaymentConfig(config);
    return Object.assign(Object.assign({}, clonedConfig), { 
        // Schedule is on the top level so we can skip deep nested checks.
        fields: clonedConfig.fields.filter((field) => field.name !== PaymentBaseFields.schedule) });
}
const shouldLoadTabContent = (tab, options) => !options.tabs || (Array.isArray(options.tabs) && options.tabs.includes(tab));
function getIconByPaymnentType(paymentType) {
    const type = normalizePaymentType(paymentType);
    switch (type) {
        case INTERNAL_TRANSFER.paymentType:
        case INTRABANK_TRANSFER.paymentType:
            return PaymentTypeIcon.INTERNAL;
        case INTERNATIONAL_TRANSFER.paymentType:
        case 'US_FOREIGN_WIRE':
            return PaymentTypeIcon.INTERNATIONAL;
        case SEPA.paymentType:
        case 'SEPA_CT':
        case US_DOMESTIC_WIRE.paymentType:
        case US_ACH_CREDIT.paymentType:
        case CHAPS.paymentType:
        case UK_FASTER_PAYMENT.paymentType:
            return PaymentTypeIcon.DOMESTIC;
    }
    return '';
}
function normalizePaymentType(paymentType) {
    const paymentTypeSuffixes = ['_ILE', '_CLOSED'];
    if (paymentType) {
        let normalisedPaymentType = paymentType;
        paymentTypeSuffixes.forEach((suffix) => {
            if (paymentType.endsWith(suffix)) {
                normalisedPaymentType = paymentType.replace(suffix, '');
            }
        });
        return normalisedPaymentType;
    }
    return;
}
function hasCreatePermission(item) {
    var _a;
    const actions = ((_a = item) === null || _a === void 0 ? void 0 : _a.actions) || item;
    return !!(actions === null || actions === void 0 ? void 0 : actions.find((action) => action === PaymentTemplateAction.CREATE));
}
function canCopyPayment(item) {
    var _a;
    return !!((_a = item === null || item === void 0 ? void 0 : item.permissibleActions) === null || _a === void 0 ? void 0 : _a.create);
}
function isModified(currentValue = '', expectedValue = '') {
    if (!currentValue) {
        return false;
    }
    return currentValue !== expectedValue;
}
function getBeneficairyDetails(beneficiary) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
    return {
        bankBranchCode: ((_c = (_b = (_a = beneficiary) === null || _a === void 0 ? void 0 : _a.accounts) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.bankCode) ||
            ((_d = beneficiary) === null || _d === void 0 ? void 0 : _d.bankBranchCode),
        accountNumber: ((_g = (_f = (_e = beneficiary) === null || _e === void 0 ? void 0 : _e.accounts) === null || _f === void 0 ? void 0 : _f[0]) === null || _g === void 0 ? void 0 : _g.accountNumber) ||
            ((_h = beneficiary) === null || _h === void 0 ? void 0 : _h.accountNumber),
        name: beneficiary === null || beneficiary === void 0 ? void 0 : beneficiary.name,
        BIC: ((_l = (_k = (_j = beneficiary) === null || _j === void 0 ? void 0 : _j.accounts) === null || _k === void 0 ? void 0 : _k[0]) === null || _l === void 0 ? void 0 : _l.BIC) ||
            ((_m = beneficiary) === null || _m === void 0 ? void 0 : _m.BIC),
    };
}
function isSelectedBeneficiaryModified(counterparty, selectedBeneficiary) {
    var _a, _b;
    const beneficiaryDetails = getBeneficairyDetails(selectedBeneficiary);
    return ((isObjectTruthy(beneficiaryDetails) &&
        isModified(counterparty === null || counterparty === void 0 ? void 0 : counterparty.name, beneficiaryDetails.name)) ||
        isModified(stripSpaces(counterparty === null || counterparty === void 0 ? void 0 : counterparty.accountNumber), stripSpaces(beneficiaryDetails.accountNumber)) ||
        isModified((_a = counterparty === null || counterparty === void 0 ? void 0 : counterparty.creditorBank) === null || _a === void 0 ? void 0 : _a.bankBranchCode, beneficiaryDetails.bankBranchCode) ||
        isModified((_b = counterparty === null || counterparty === void 0 ? void 0 : counterparty.creditorBank) === null || _b === void 0 ? void 0 : _b.bic, beneficiaryDetails.BIC));
}
const getCounterpartySchemeName = (paymentItem) => {
    const { counterparty, selectedBeneficiary } = paymentItem;
    const isBeneficiaryModified = isSelectedBeneficiaryModified(counterparty, selectedBeneficiary);
    let creditorScheme = counterparty.schemeName || SchemeNames.BBAN;
    const beneficiarySchemes = [SchemeNames.BBAN, SchemeNames.IBAN];
    const isOwnAccountTransfer = (selectedBeneficiary === null || selectedBeneficiary === void 0 ? void 0 : selectedBeneficiary.isArrangement) &&
        beneficiarySchemes.includes(creditorScheme);
    // Set scheme to ID when payment template has counterparty id
    if (!selectedBeneficiary &&
        counterparty.id &&
        creditorScheme !== SchemeNames.EXTERNALID) {
        creditorScheme = SchemeNames.ID;
    }
    return isOwnAccountTransfer && !isBeneficiaryModified
        ? SchemeNames.ID
        : creditorScheme;
};

const DEFAULT_KEY = 'DEFAULT';
class PaymentConfigService {
    constructor(configs, registeredPaymentConfigs) {
        this.paymentConfigRegistry = new BehaviorSubject(new Map(configs
            ? configs.reduce((acc, { paymentType, businessFunction }) => {
                const paymentConfig = Object.assign(paymentType, {
                    businessFunction,
                });
                return [...acc, [paymentConfig.paymentType, paymentConfig]];
            }, [])
            : undefined));
        this.classIdRegistry = new BehaviorSubject(new Map(configs
            ? configs.reduce((acc, { classId, paymentType }) => [
                ...acc,
                [classId || DEFAULT_KEY, paymentType.paymentType],
            ], [])
            : undefined));
        this.configRegistry = new BehaviorSubject(new Map(configs
            ? configs.reduce((acc, config) => [
                ...acc,
                [config.classId || DEFAULT_KEY, config],
            ], [])
            : undefined));
        if (registeredPaymentConfigs && registeredPaymentConfigs.length) {
            registeredPaymentConfigs
                .reduce((acc, val) => acc.concat(val), [])
                .forEach((config) => this.setPaymentConfigByType(config));
        }
    }
    has(paymentType) {
        return this.paymentConfigRegistry.value.has(paymentType);
    }
    hasClassId(classId) {
        return this.classIdRegistry.value.has(classId);
    }
    getPaymentConfigByClassId(classId) {
        const paymentConfigType = this.getBaseConfigByClassId(classId);
        return paymentConfigType && paymentConfigType.paymentType;
    }
    getPaymentConfigByType(paymentType) {
        return this.paymentConfigRegistry.value.get(paymentType);
    }
    mapPaymentType(item) {
        var _a;
        const paymentType = typeof item === 'string'
            ? item
            : item.details.paymentType;
        const _paymentType = normalizePaymentType(paymentType);
        return _paymentType
            ? (_a = this.getPaymentConfigByType(_paymentType)) === null || _a === void 0 ? void 0 : _a.name
            : undefined;
    }
    getBaseConfigByClassId(classId) {
        return (this.configRegistry.value.get(classId) ||
            this.configRegistry.value.get(DEFAULT_KEY));
    }
    setPaymentConfigByType(config) {
        const _value = this.paymentConfigRegistry.value;
        _value.set(config.paymentType, config);
        this.paymentConfigRegistry.next(_value);
    }
}
/** @nocollapse */ PaymentConfigService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentConfigService, deps: [{ token: BB_PAYMENT_CONFIG, optional: true }, { token: BB_REGISTERED_PAYMENT_CONFIGS, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ PaymentConfigService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentConfigService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentConfigService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: Array, decorators: [{
                    type: Inject,
                    args: [BB_PAYMENT_CONFIG]
                }, {
                    type: Optional
                }] }, { type: Array, decorators: [{
                    type: Inject,
                    args: [BB_REGISTERED_PAYMENT_CONFIGS]
                }, {
                    type: Optional
                }] }]; } });

function resetBeneficiaryDetails(formGroup) {
    var _a, _b;
    const beneficiaryFormControls = [
        CounterPartyFields.accountNumber,
        CounterPartyFields.name,
        CounterPartyFields.id,
        CounterPartyFields.postalAddress,
        CounterPartyFields.creditorBank,
        CounterPartyFields.selectedContact,
        CounterPartyFields.saveNewContact,
        HiddenFields.beneficiaryAccountName,
    ];
    beneficiaryFormControls.forEach((control) => {
        var _a;
        (_a = formGroup.get(control)) === null || _a === void 0 ? void 0 : _a.reset();
    });
    (_b = (_a = formGroup.parent) === null || _a === void 0 ? void 0 : _a.get(HiddenFields.selectedBeneficiary)) === null || _b === void 0 ? void 0 : _b.reset();
}

const OOTB_PAYMENT_CONFIGS = [
    SEPA,
    INTERNAL_TRANSFER,
    US_ACH_CREDIT,
    US_DOMESTIC_WIRE,
    CHAPS,
    UK_FASTER_PAYMENT,
    INTERNATIONAL_TRANSFER,
    INTRABANK_TRANSFER,
    INTERNAL_TRANSFER_BUSINESS,
    P2P_TRANSFER,
    ACH_DEBIT,
];
function OOTBPaymentTypes() {
    return OOTB_PAYMENT_CONFIGS;
}

class PaymentsSrSearchResultInfoComponent {
    constructor() {
        this.debounceTotal = new BehaviorSubject(undefined);
        this.total$ = this.debounceTotal.pipe(debounceTime(1000));
    }
    /**
     * Total count of search result.
     */
    set totalNumber(val) {
        this.debounceTotal.next(val);
    }
    isNumber(val) {
        return typeof val === 'number';
    }
}
/** @nocollapse */ PaymentsSrSearchResultInfoComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentsSrSearchResultInfoComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PaymentsSrSearchResultInfoComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PaymentsSrSearchResultInfoComponent, selector: "bb-payments-sr-search-result-info", inputs: { totalNumber: "totalNumber" }, ngImport: i0, template: "<div class=\"sr-only\" aria-live=\"polite\" aria-atomic=\"true\" role=\"status\">\n  <ng-container *ngIf=\"{ total: total$ | async } as data\">\n    <ng-container *ngIf=\"isNumber(data.total)\">\n      <ng-content></ng-content>\n      <span i18n=\"@@sr-search-result-info-label.someValue\">\n        {data.total, plural, =0 {No results found} =1 {1 result found} other\n        {{{data.total}} results found}}\n      </span>\n    </ng-container>\n  </ng-container>\n</div>\n", directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i2.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentsSrSearchResultInfoComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payments-sr-search-result-info',
                    templateUrl: 'sr-search-result-info.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { totalNumber: [{
                type: Input
            }] } });

/**
 * Exports UI components and modules for payments common
 */
class PaymentsSrSearchResultInfoModule {
}
/** @nocollapse */ PaymentsSrSearchResultInfoModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentsSrSearchResultInfoModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ PaymentsSrSearchResultInfoModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentsSrSearchResultInfoModule, declarations: [PaymentsSrSearchResultInfoComponent], imports: [CommonModule], exports: [PaymentsSrSearchResultInfoComponent] });
/** @nocollapse */ PaymentsSrSearchResultInfoModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentsSrSearchResultInfoModule, imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentsSrSearchResultInfoModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [PaymentsSrSearchResultInfoComponent],
                    exports: [PaymentsSrSearchResultInfoComponent],
                }]
        }] });

class PaymentOrdersBadRequest {
    constructor(payment) {
        this.payment = payment;
        this.kind = 'PaymentOrdersBadRequest';
    }
}
class UnknownError {
    constructor(origin) {
        this.origin = origin;
        this.kind = 'UnknownError';
    }
}
var Routes;
(function (Routes) {
    Routes["FORM"] = "form";
    Routes["REVIEW"] = "review";
})(Routes || (Routes = {}));
var PaymentState;
(function (PaymentState) {
    PaymentState["INITIAL"] = "INITIAL";
    PaymentState["REVIEW"] = "REVIEW";
    PaymentState["EDIT"] = "EDIT";
})(PaymentState || (PaymentState = {}));
var ExecutionTimeFrame;
(function (ExecutionTimeFrame) {
    ExecutionTimeFrame["HOUR"] = "HOUR";
    ExecutionTimeFrame["CALENDAR_DAY"] = "CALENDAR_DAY";
    ExecutionTimeFrame["BUSINESS_DAY"] = "BUSINESS_DAY";
})(ExecutionTimeFrame || (ExecutionTimeFrame = {}));
var ChargeBearer;
(function (ChargeBearer) {
    ChargeBearer["OUR"] = "OUR";
    ChargeBearer["BEN"] = "BEN";
    ChargeBearer["SHA"] = "SHA";
})(ChargeBearer || (ChargeBearer = {}));
var ModalState;
(function (ModalState) {
    ModalState[ModalState["Preview"] = 0] = "Preview";
    ModalState[ModalState["Hidden"] = 1] = "Hidden";
})(ModalState || (ModalState = {}));
var ProgressStatus;
(function (ProgressStatus) {
    ProgressStatus["CONFIRMATION_PENDING"] = "CONFIRMATION_PENDING";
    ProgressStatus["USER_DECLINED"] = "USER_DECLINED";
    ProgressStatus["SYSTEM_DECLINED"] = "SYSTEM_DECLINED";
    ProgressStatus["PENDING_APPROVAL"] = "PENDING_APPROVAL";
    ProgressStatus["SENDING"] = "SENDING";
    ProgressStatus["ACCEPTED"] = "ACCEPTED";
    ProgressStatus["REJECTED"] = "REJECTED";
    ProgressStatus["PROCESSED"] = "PROCESSED";
    ProgressStatus["NO_PROGRESS"] = "NO_PROGRESS";
})(ProgressStatus || (ProgressStatus = {}));
var ManualBatchState;
(function (ManualBatchState) {
    ManualBatchState["CLOSED"] = "CLOSED";
    ManualBatchState["INITIAL"] = "INITIAL";
    ManualBatchState["DRAFT"] = "DRAFT";
    ManualBatchState["REVIEW"] = "REVIEW";
    ManualBatchState["VALID"] = "VALID";
})(ManualBatchState || (ManualBatchState = {}));
var PaymentSubmitStatuses;
(function (PaymentSubmitStatuses) {
    PaymentSubmitStatuses["SUCCESS"] = "success";
    PaymentSubmitStatuses["ERROR"] = "error";
    PaymentSubmitStatuses["PENDING"] = "pending";
    PaymentSubmitStatuses["PENDING_EDITED"] = "pending_edited";
})(PaymentSubmitStatuses || (PaymentSubmitStatuses = {}));
var ScrollToElementBehavior;
(function (ScrollToElementBehavior) {
    ScrollToElementBehavior["AUTO"] = "auto";
    ScrollToElementBehavior["SMOOTH"] = "smooth";
})(ScrollToElementBehavior || (ScrollToElementBehavior = {}));
var ScrollToElementBlock;
(function (ScrollToElementBlock) {
    ScrollToElementBlock["START"] = "start";
    ScrollToElementBlock["CENTER"] = "center";
    ScrollToElementBlock["END"] = "end";
    ScrollToElementBlock["NEAREST"] = "nearest";
})(ScrollToElementBlock || (ScrollToElementBlock = {}));
var ScrollToElementInline;
(function (ScrollToElementInline) {
    ScrollToElementInline["START"] = "start";
    ScrollToElementInline["CENTER"] = "center";
    ScrollToElementInline["END"] = "end";
    ScrollToElementInline["NEAREST"] = "nearest";
})(ScrollToElementInline || (ScrollToElementInline = {}));

function scrollToElement(elem, selector, options) {
    const defaultOptions = {
        behavior: ScrollToElementBehavior.SMOOTH,
        block: ScrollToElementBlock.CENTER,
        inline: ScrollToElementInline.NEAREST,
    };
    setTimeout(() => {
        const errorElems = elem === null || elem === void 0 ? void 0 : elem.querySelectorAll(selector);
        if (errorElems === null || errorElems === void 0 ? void 0 : errorElems.length) {
            errorElems[0].scrollIntoView(Object.assign(defaultOptions, options || {}));
        }
    });
}
function focusChildElement(selector, parent) {
    setTimeout(() => {
        const child = parent === null || parent === void 0 ? void 0 : parent.querySelector(selector);
        child === null || child === void 0 ? void 0 : child.focus();
    });
}
function focusErrorElement(parent, selector = 'small.bb-input-validation-message') {
    toggleTabIndex(selector, parent);
    scrollToElement(parent, selector);
    focusChildElement(selector, parent);
}
function toggleTabIndex(selector, parent, focusable = true) {
    const child = parent === null || parent === void 0 ? void 0 : parent.querySelector(selector);
    child === null || child === void 0 ? void 0 : child.setAttribute('tabindex', focusable ? '0' : '-1');
}

class CountryNameComponent {
    ngOnInit() {
        if (!this.countryCode) {
            console.warn('Please provide a ISO 3166 Alpha-2 country code');
        }
    }
}
/** @nocollapse */ CountryNameComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CountryNameComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ CountryNameComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: CountryNameComponent, selector: "bb-country-name", inputs: { countryCode: "countryCode" }, ngImport: i0, template: "<ng-container [ngSwitch]=\"countryCode\">\n  <ng-container *ngSwitchCase=\"'AF'\" i18n=\"@@bb-country-name.AF\"\n    >Afghanistan</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'AX'\" i18n=\"@@bb-country-name.AX\"\n    >Aland Islands</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'AL'\" i18n=\"@@bb-country-name.AL\"\n    >Albania</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'DZ'\" i18n=\"@@bb-country-name.DZ\"\n    >Algeria</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'AS'\" i18n=\"@@bb-country-name.AS\"\n    >American Samoa</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'AD'\" i18n=\"@@bb-country-name.AD\"\n    >Andorra</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'AO'\" i18n=\"@@bb-country-name.AO\"\n    >Angola</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'AI'\" i18n=\"@@bb-country-name.AI\"\n    >Anguilla</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'AQ'\" i18n=\"@@bb-country-name.AQ\"\n    >Antarctica</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'AG'\" i18n=\"@@bb-country-name.AG\"\n    >Antigua and Barbuda</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'AR'\" i18n=\"@@bb-country-name.AR\"\n    >Argentina</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'AM'\" i18n=\"@@bb-country-name.AM\"\n    >Armenia</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'AW'\" i18n=\"@@bb-country-name.AW\"\n    >Aruba</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'AU'\" i18n=\"@@bb-country-name.AU\"\n    >Australia</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'AT'\" i18n=\"@@bb-country-name.AT\"\n    >Austria</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'AZ'\" i18n=\"@@bb-country-name.AZ\"\n    >Azerbaijan</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'BS'\" i18n=\"@@bb-country-name.BS\"\n    >Bahamas</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'BH'\" i18n=\"@@bb-country-name.BH\"\n    >Bahrain</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'BD'\" i18n=\"@@bb-country-name.BD\"\n    >Bangladesh</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'BB'\" i18n=\"@@bb-country-name.BB\"\n    >Barbados</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'BY'\" i18n=\"@@bb-country-name.BY\"\n    >Belarus</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'BE'\" i18n=\"@@bb-country-name.BE\"\n    >Belgium</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'BZ'\" i18n=\"@@bb-country-name.BZ\"\n    >Belize</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'BJ'\" i18n=\"@@bb-country-name.BJ\"\n    >Benin</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'BM'\" i18n=\"@@bb-country-name.BM\"\n    >Bermuda</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'BT'\" i18n=\"@@bb-country-name.BT\"\n    >Bhutan</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'BO'\" i18n=\"@@bb-country-name.BO\"\n    >Bolivia, Plurinational State of</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'BQ'\" i18n=\"@@bb-country-name.BQ\"\n    >Bonaire, Saint Eustatius and Saba</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'BA'\" i18n=\"@@bb-country-name.BA\"\n    >Bosnia and Herzegovina</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'BW'\" i18n=\"@@bb-country-name.BW\"\n    >Botswana</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'BV'\" i18n=\"@@bb-country-name.BV\"\n    >Bouvet Island</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'BR'\" i18n=\"@@bb-country-name.BR\"\n    >Brazil</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'IO'\" i18n=\"@@bb-country-name.IO\"\n    >British Indian Ocean Territory</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'BN'\" i18n=\"@@bb-country-name.BN\"\n    >Brunei Darussalam</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'BG'\" i18n=\"@@bb-country-name.BG\"\n    >Bulgaria</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'BF'\" i18n=\"@@bb-country-name.BF\"\n    >Burkina Faso</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'BI'\" i18n=\"@@bb-country-name.BI\"\n    >Burundi</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'KH'\" i18n=\"@@bb-country-name.KH\"\n    >Cambodia</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'CM'\" i18n=\"@@bb-country-name.CM\"\n    >Cameroon</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'CA'\" i18n=\"@@bb-country-name.CA\"\n    >Canada</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'CV'\" i18n=\"@@bb-country-name.CV\"\n    >Cape Verde</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'KY'\" i18n=\"@@bb-country-name.KY\"\n    >Cayman Islands</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'CF'\" i18n=\"@@bb-country-name.CF\"\n    >Central African Republic</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'TD'\" i18n=\"@@bb-country-name.TD\"\n    >Chad</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'CL'\" i18n=\"@@bb-country-name.CL\"\n    >Chile</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'CN'\" i18n=\"@@bb-country-name.CN\"\n    >China</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'CX'\" i18n=\"@@bb-country-name.CX\"\n    >Christmas Island</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'CC'\" i18n=\"@@bb-country-name.CC\"\n    >Cocos (Keeling) Islands</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'CO'\" i18n=\"@@bb-country-name.CO\"\n    >Colombia</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'KM'\" i18n=\"@@bb-country-name.KM\"\n    >Comoros</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'CG'\" i18n=\"@@bb-country-name.CG\"\n    >Congo</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'CD'\" i18n=\"@@bb-country-name.CD\"\n    >Congo, The Democratic Republic of the</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'CK'\" i18n=\"@@bb-country-name.CK\"\n    >Cook Islands</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'CR'\" i18n=\"@@bb-country-name.CR\"\n    >Costa Rica</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'CI'\" i18n=\"@@bb-country-name.CI\"\n    >Cote d'Ivoire</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'HR'\" i18n=\"@@bb-country-name.HR\"\n    >Croatia</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'CU'\" i18n=\"@@bb-country-name.CU\"\n    >Cuba</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'CW'\" i18n=\"@@bb-country-name.CW\"\n    >Curacao</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'CY'\" i18n=\"@@bb-country-name.CY\"\n    >Cyprus</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'CZ'\" i18n=\"@@bb-country-name.CZ\"\n    >Czech Republic</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'DK'\" i18n=\"@@bb-country-name.DK\"\n    >Denmark</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'DJ'\" i18n=\"@@bb-country-name.DJ\"\n    >Djibouti</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'DM'\" i18n=\"@@bb-country-name.DM\"\n    >Dominica</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'DO'\" i18n=\"@@bb-country-name.DO\"\n    >Dominican Republic</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'EC'\" i18n=\"@@bb-country-name.EC\"\n    >Ecuador</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'EG'\" i18n=\"@@bb-country-name.EG\"\n    >Egypt</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'SV'\" i18n=\"@@bb-country-name.SV\"\n    >El Salvador</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'GQ'\" i18n=\"@@bb-country-name.GQ\"\n    >Equatorial Guinea</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'ER'\" i18n=\"@@bb-country-name.ER\"\n    >Eritrea</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'EE'\" i18n=\"@@bb-country-name.EE\"\n    >Estonia</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'ET'\" i18n=\"@@bb-country-name.ET\"\n    >Ethiopia</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'FK'\" i18n=\"@@bb-country-name.FK\"\n    >Falkland Islands (Malvinas)</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'FO'\" i18n=\"@@bb-country-name.FO\"\n    >Faroe Islands</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'FJ'\" i18n=\"@@bb-country-name.FJ\"\n    >Fiji</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'FI'\" i18n=\"@@bb-country-name.FI\"\n    >Finland</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'FR'\" i18n=\"@@bb-country-name.FR\"\n    >France</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'GF'\" i18n=\"@@bb-country-name.GF\"\n    >French Guiana</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'PF'\" i18n=\"@@bb-country-name.PF\"\n    >French Polynesia</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'TF'\" i18n=\"@@bb-country-name.TF\"\n    >French Southern Territories</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'GA'\" i18n=\"@@bb-country-name.GA\"\n    >Gabon</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'GM'\" i18n=\"@@bb-country-name.GM\"\n    >Gambia</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'GE'\" i18n=\"@@bb-country-name.GE\"\n    >Georgia</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'DE'\" i18n=\"@@bb-country-name.DE\"\n    >Germany</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'GH'\" i18n=\"@@bb-country-name.GH\"\n    >Ghana</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'GI'\" i18n=\"@@bb-country-name.GI\"\n    >Gibraltar</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'GR'\" i18n=\"@@bb-country-name.GR\"\n    >Greece</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'GL'\" i18n=\"@@bb-country-name.GL\"\n    >Greenland</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'GD'\" i18n=\"@@bb-country-name.GD\"\n    >Grenada</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'GP'\" i18n=\"@@bb-country-name.GP\"\n    >Guadeloupe</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'GU'\" i18n=\"@@bb-country-name.GU\"\n    >Guam</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'GT'\" i18n=\"@@bb-country-name.GT\"\n    >Guatemala</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'GG'\" i18n=\"@@bb-country-name.GG\"\n    >Guernsey</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'GN'\" i18n=\"@@bb-country-name.GN\"\n    >Guinea</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'GW'\" i18n=\"@@bb-country-name.GW\"\n    >Guinea-Bissau</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'GY'\" i18n=\"@@bb-country-name.GY\"\n    >Guyana</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'HT'\" i18n=\"@@bb-country-name.HT\"\n    >Haiti</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'HM'\" i18n=\"@@bb-country-name.HM\"\n    >Heard Island and McDonald Islands</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'VA'\" i18n=\"@@bb-country-name.VA\"\n    >Holy See (Vatican City State)</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'HN'\" i18n=\"@@bb-country-name.HN\"\n    >Honduras</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'HK'\" i18n=\"@@bb-country-name.HK\"\n    >Hong Kong</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'HU'\" i18n=\"@@bb-country-name.HU\"\n    >Hungary</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'IS'\" i18n=\"@@bb-country-name.IS\"\n    >Iceland</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'IN'\" i18n=\"@@bb-country-name.IN\"\n    >India</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'ID'\" i18n=\"@@bb-country-name.ID\"\n    >Indonesia</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'IR'\" i18n=\"@@bb-country-name.IR\"\n    >Iran, Islamic Republic of</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'IQ'\" i18n=\"@@bb-country-name.IQ\"\n    >Iraq</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'IE'\" i18n=\"@@bb-country-name.IE\"\n    >Ireland</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'IM'\" i18n=\"@@bb-country-name.IM\"\n    >Isle of Man</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'IL'\" i18n=\"@@bb-country-name.IL\"\n    >Israel</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'IT'\" i18n=\"@@bb-country-name.IT\"\n    >Italy</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'JM'\" i18n=\"@@bb-country-name.JM\"\n    >Jamaica</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'JP'\" i18n=\"@@bb-country-name.JP\"\n    >Japan</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'JE'\" i18n=\"@@bb-country-name.JE\"\n    >Jersey</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'JO'\" i18n=\"@@bb-country-name.JO\"\n    >Jordan</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'KZ'\" i18n=\"@@bb-country-name.KZ\"\n    >Kazakhstan</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'KE'\" i18n=\"@@bb-country-name.KE\"\n    >Kenya</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'KI'\" i18n=\"@@bb-country-name.KI\"\n    >Kiribati</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'KP'\" i18n=\"@@bb-country-name.KP\"\n    >Korea, Democratic People's Republic of</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'KR'\" i18n=\"@@bb-country-name.KR\"\n    >Korea, Republic of</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'KW'\" i18n=\"@@bb-country-name.KW\"\n    >Kuwait</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'KG'\" i18n=\"@@bb-country-name.KG\"\n    >Kyrgyzstan</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'LA'\" i18n=\"@@bb-country-name.LA\"\n    >Lao People's Democratic Republic</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'LV'\" i18n=\"@@bb-country-name.LV\"\n    >Latvia</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'LB'\" i18n=\"@@bb-country-name.LB\"\n    >Lebanon</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'LS'\" i18n=\"@@bb-country-name.LS\"\n    >Lesotho</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'LR'\" i18n=\"@@bb-country-name.LR\"\n    >Liberia</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'LY'\" i18n=\"@@bb-country-name.LY\"\n    >Libyan Arab Jamahiriya</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'LI'\" i18n=\"@@bb-country-name.LI\"\n    >Liechtenstein</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'LT'\" i18n=\"@@bb-country-name.LT\"\n    >Lithuania</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'LU'\" i18n=\"@@bb-country-name.LU\"\n    >Luxembourg</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'MO'\" i18n=\"@@bb-country-name.MO\"\n    >Macao</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'MK'\" i18n=\"@@bb-country-name.MK\"\n    >Macedonia, The Former Yugoslav Republic of</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'MG'\" i18n=\"@@bb-country-name.MG\"\n    >Madagascar</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'MW'\" i18n=\"@@bb-country-name.MW\"\n    >Malawi</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'MY'\" i18n=\"@@bb-country-name.MY\"\n    >Malaysia</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'MV'\" i18n=\"@@bb-country-name.MV\"\n    >Maldives</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'ML'\" i18n=\"@@bb-country-name.ML\"\n    >Mali</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'MT'\" i18n=\"@@bb-country-name.MT\"\n    >Malta</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'MH'\" i18n=\"@@bb-country-name.MH\"\n    >Marshall Islands</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'MQ'\" i18n=\"@@bb-country-name.MQ\"\n    >Martinique</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'MR'\" i18n=\"@@bb-country-name.MR\"\n    >Mauritania</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'MU'\" i18n=\"@@bb-country-name.MU\"\n    >Mauritius</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'YT'\" i18n=\"@@bb-country-name.YT\"\n    >Mayotte</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'MX'\" i18n=\"@@bb-country-name.MX\"\n    >Mexico</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'FM'\" i18n=\"@@bb-country-name.FM\"\n    >Micronesia, Federated States of</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'MD'\" i18n=\"@@bb-country-name.MD\"\n    >Moldova, Republic of</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'MC'\" i18n=\"@@bb-country-name.MC\"\n    >Monaco</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'MN'\" i18n=\"@@bb-country-name.MN\"\n    >Mongolia</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'ME'\" i18n=\"@@bb-country-name.ME\"\n    >Montenegro</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'MS'\" i18n=\"@@bb-country-name.MS\"\n    >Montserrat</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'MA'\" i18n=\"@@bb-country-name.MA\"\n    >Morocco</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'MZ'\" i18n=\"@@bb-country-name.MZ\"\n    >Mozambique</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'MM'\" i18n=\"@@bb-country-name.MM\"\n    >Myanmar</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'NA'\" i18n=\"@@bb-country-name.NA\"\n    >Namibia</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'NR'\" i18n=\"@@bb-country-name.NR\"\n    >Nauru</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'NP'\" i18n=\"@@bb-country-name.NP\"\n    >Nepal</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'NL'\" i18n=\"@@bb-country-name.NL\"\n    >Netherlands</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'NC'\" i18n=\"@@bb-country-name.NC\"\n    >New Caledonia</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'NZ'\" i18n=\"@@bb-country-name.NZ\"\n    >New Zealand</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'NI'\" i18n=\"@@bb-country-name.NI\"\n    >Nicaragua</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'NE'\" i18n=\"@@bb-country-name.NE\"\n    >Niger</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'NG'\" i18n=\"@@bb-country-name.NG\"\n    >Nigeria</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'NU'\" i18n=\"@@bb-country-name.NU\"\n    >Niue</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'NF'\" i18n=\"@@bb-country-name.NF\"\n    >Norfolk Island</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'MP'\" i18n=\"@@bb-country-name.MP\"\n    >Northern Mariana Islands</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'NO'\" i18n=\"@@bb-country-name.NO\"\n    >Norway</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'PS'\" i18n=\"@@bb-country-name.PS\"\n    >Occupied Palestinian Territory</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'OM'\" i18n=\"@@bb-country-name.OM\"\n    >Oman</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'PK'\" i18n=\"@@bb-country-name.PK\"\n    >Pakistan</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'PW'\" i18n=\"@@bb-country-name.PW\"\n    >Palau</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'PA'\" i18n=\"@@bb-country-name.PA\"\n    >Panama</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'PG'\" i18n=\"@@bb-country-name.PG\"\n    >Papua New Guinea</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'PY'\" i18n=\"@@bb-country-name.PY\"\n    >Paraguay</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'PE'\" i18n=\"@@bb-country-name.PE\"\n    >Peru</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'PH'\" i18n=\"@@bb-country-name.PH\"\n    >Philippines</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'PN'\" i18n=\"@@bb-country-name.PN\"\n    >Pitcairn</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'PL'\" i18n=\"@@bb-country-name.PL\"\n    >Poland</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'PT'\" i18n=\"@@bb-country-name.PT\"\n    >Portugal</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'PR'\" i18n=\"@@bb-country-name.PR\"\n    >Puerto Rico</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'QA'\" i18n=\"@@bb-country-name.QA\"\n    >Qatar</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'RE'\" i18n=\"@@bb-country-name.RE\"\n    >Reunion</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'RO'\" i18n=\"@@bb-country-name.RO\"\n    >Romania</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'RU'\" i18n=\"@@bb-country-name.RU\"\n    >Russian Federation</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'RW'\" i18n=\"@@bb-country-name.RW\"\n    >Rwanda</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'BL'\" i18n=\"@@bb-country-name.BL\"\n    >Saint Barthelemy</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'SH'\" i18n=\"@@bb-country-name.SH\"\n    >Saint Helena, Ascension and Tristan da Cunha</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'KN'\" i18n=\"@@bb-country-name.KN\"\n    >Saint Kitts and Nevis</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'LC'\" i18n=\"@@bb-country-name.LC\"\n    >Saint Lucia</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'MF'\" i18n=\"@@bb-country-name.MF\"\n    >Saint Martin (French part)</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'PM'\" i18n=\"@@bb-country-name.PM\"\n    >Saint Pierre and Miquelon</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'VC'\" i18n=\"@@bb-country-name.VC\"\n    >Saint Vincent and The Grenadines</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'WS'\" i18n=\"@@bb-country-name.WS\"\n    >Samoa</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'SM'\" i18n=\"@@bb-country-name.SM\"\n    >San Marino</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'ST'\" i18n=\"@@bb-country-name.ST\"\n    >Sao Tome and Principe</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'SA'\" i18n=\"@@bb-country-name.SA\"\n    >Saudi Arabia</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'SN'\" i18n=\"@@bb-country-name.SN\"\n    >Senegal</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'RS'\" i18n=\"@@bb-country-name.RS\"\n    >Serbia</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'SC'\" i18n=\"@@bb-country-name.SC\"\n    >Seychelles</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'SL'\" i18n=\"@@bb-country-name.SL\"\n    >Sierra Leone</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'SG'\" i18n=\"@@bb-country-name.SG\"\n    >Singapore</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'SX'\" i18n=\"@@bb-country-name.SX\"\n    >Sint Maarten (Dutch part)</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'SK'\" i18n=\"@@bb-country-name.SK\"\n    >Slovakia</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'SI'\" i18n=\"@@bb-country-name.SI\"\n    >Slovenia</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'SB'\" i18n=\"@@bb-country-name.SB\"\n    >Solomon Islands</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'SO'\" i18n=\"@@bb-country-name.SO\"\n    >Somalia</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'ZA'\" i18n=\"@@bb-country-name.ZA\"\n    >South Africa</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'GS'\" i18n=\"@@bb-country-name.GS\"\n    >South Georgia and the South Sandwich Islands</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'ES'\" i18n=\"@@bb-country-name.ES\"\n    >Spain</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'LK'\" i18n=\"@@bb-country-name.LK\"\n    >Sri Lanka</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'SD'\" i18n=\"@@bb-country-name.SD\"\n    >Sudan</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'SR'\" i18n=\"@@bb-country-name.SR\"\n    >Suriname</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'SJ'\" i18n=\"@@bb-country-name.SJ\"\n    >Svalbard and Jan Mayen</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'SZ'\" i18n=\"@@bb-country-name.SZ\"\n    >Swaziland</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'SE'\" i18n=\"@@bb-country-name.SE\"\n    >Sweden</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'CH'\" i18n=\"@@bb-country-name.CH\"\n    >Switzerland</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'SY'\" i18n=\"@@bb-country-name.SY\"\n    >Syrian Arab Republic</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'TW'\" i18n=\"@@bb-country-name.TW\"\n    >Taiwan, Province of China</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'TJ'\" i18n=\"@@bb-country-name.TJ\"\n    >Tajikistan</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'TZ'\" i18n=\"@@bb-country-name.TZ\"\n    >Tanzania, United Republic of</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'TH'\" i18n=\"@@bb-country-name.TH\"\n    >Thailand</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'TL'\" i18n=\"@@bb-country-name.TL\"\n    >Timor-Leste</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'TG'\" i18n=\"@@bb-country-name.TG\"\n    >Togo</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'TK'\" i18n=\"@@bb-country-name.TK\"\n    >Tokelau</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'TO'\" i18n=\"@@bb-country-name.TO\"\n    >Tonga</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'TT'\" i18n=\"@@bb-country-name.TT\"\n    >Trinidad and Tobago</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'TN'\" i18n=\"@@bb-country-name.TN\"\n    >Tunisia</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'TR'\" i18n=\"@@bb-country-name.TR\"\n    >Turkey</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'TM'\" i18n=\"@@bb-country-name.TM\"\n    >Turkmenistan</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'TC'\" i18n=\"@@bb-country-name.TC\"\n    >Turks and Caicos Islands</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'TV'\" i18n=\"@@bb-country-name.TV\"\n    >Tuvalu</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'UG'\" i18n=\"@@bb-country-name.UG\"\n    >Uganda</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'UA'\" i18n=\"@@bb-country-name.UA\"\n    >Ukraine</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'AE'\" i18n=\"@@bb-country-name.AE\"\n    >United Arab Emirates</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'GB'\" i18n=\"@@bb-country-name.GB\"\n    >United Kingdom</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'US'\" i18n=\"@@bb-country-name.US\"\n    >United States</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'UY'\" i18n=\"@@bb-country-name.UY\"\n    >Uruguay</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'UZ'\" i18n=\"@@bb-country-name.UZ\"\n    >Uzbekistan</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'VU'\" i18n=\"@@bb-country-name.VU\"\n    >Vanuatu</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'VE'\" i18n=\"@@bb-country-name.VE\"\n    >Venezuela, Bolivarian Republic of</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'VN'\" i18n=\"@@bb-country-name.VN\"\n    >Viet Nam</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'VG'\" i18n=\"@@bb-country-name.VG\"\n    >Virgin Islands, British</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'VI'\" i18n=\"@@bb-country-name.VI\"\n    >Virgin Islands, U.S.</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'WF'\" i18n=\"@@bb-country-name.WF\"\n    >Wallis and Futuna</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'EH'\" i18n=\"@@bb-country-name.EH\"\n    >Western Sahara</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'YE'\" i18n=\"@@bb-country-name.YE\"\n    >Yemen</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'ZM'\" i18n=\"@@bb-country-name.ZM\"\n    >Zambia</ng-container\n  >\n  <ng-container *ngSwitchCase=\"'ZW'\" i18n=\"@@bb-country-name.ZW\"\n    >Zimbabwe</ng-container\n  >\n</ng-container>\n", directives: [{ type: i2.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i2.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CountryNameComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-country-name',
                    templateUrl: './country-name.component.html',
                }]
        }], propDecorators: { countryCode: [{
                type: Input
            }] } });

class FullAddressComponent {
    constructor() {
        this.hostRef = this;
    }
    ngOnInit() {
        if (!this.address) {
            console.warn('Please provide a valid `address` input');
        }
    }
    format() {
        return addressToString(this.address);
    }
}
/** @nocollapse */ FullAddressComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FullAddressComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ FullAddressComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FullAddressComponent, selector: "bb-full-address", inputs: { address: "address" }, ngImport: i0, template: `
    <span class="break-word" data-role="full-address-details">
      {{ hostRef.format() }},
      <bb-country-name
        *ngIf="address?.country"
        [countryCode]="address?.country"
      ></bb-country-name>
    </span>
  `, isInline: true, components: [{ type: CountryNameComponent, selector: "bb-country-name", inputs: ["countryCode"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FullAddressComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-full-address',
                    template: `
    <span class="break-word" data-role="full-address-details">
      {{ hostRef.format() }},
      <bb-country-name
        *ngIf="address?.country"
        [countryCode]="address?.country"
      ></bb-country-name>
    </span>
  `,
                }]
        }], propDecorators: { address: [{
                type: Input
            }] } });

class AddressDetailsComponent {
    constructor(elRef) {
        this.elRef = elRef;
        this.id = AddressDetailsComponent._id++;
        /**
         * Instance that holds the address details
         */
        this.address = {};
        /**
         * Flag that denoted if contact address is copied
         */
        this.isContactAddressCopied = false;
        /**
         * Flag to hide country input in the address component
         */
        this.hideCountry = false;
        /**
         * Type of address view. Possible values `FORM`| `CARD`. Defaults to `FORM`
         */
        this.viewType = ViewType.BUTTON;
        /**
         * Flag to denote if the debit account has only closed payment permissions
         * Default value is `false`
         */
        this.isClosedPayment = false;
        /**
         * Event emitted when address is submitted
         */
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.submit = new EventEmitter();
        /**
         * Event emitted when address is reset
         */
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.reset = new EventEmitter();
        /**
         * Event emitted when address is discarded
         */
        this.discard = new EventEmitter();
        /**
         * Event emitted when address is deleted
         */
        this.delete = new EventEmitter();
        /**
         * Event emitted when address is editted
         */
        this.edit = new EventEmitter();
        /**
         * Event emitted when add address action is triggered
         */
        this.add = new EventEmitter();
        this.requiredFields = ['addressLine1', 'postCode', 'town'];
    }
    ngOnInit() {
        if (!this.hideCountry) {
            this.requiredFields.push('country');
        }
        this.markFieldsAsPristine();
        if (!this.isAddressTruthy()) {
            this.viewType = ViewType.BUTTON;
            this.reset.emit();
        }
        this.valueChangeSubscription = this.addressForm.valueChanges.subscribe(() => {
            this.address = this.addressForm.value;
            if (this.viewType !== ViewType.FORM) {
                if (this.isAddressTruthy()) {
                    this.submit.emit();
                }
                else if (this.viewType === ViewType.CARD) {
                    this.reset.emit();
                }
            }
        });
    }
    ngOnChanges(changes) {
        var _a, _b, _c;
        const validator = (_b = (_a = this.addressForm) === null || _a === void 0 ? void 0 : _a.controls['addressLine1']) === null || _b === void 0 ? void 0 : _b.validator;
        const currentView = (_c = changes['viewType']) === null || _c === void 0 ? void 0 : _c.currentValue;
        if (changes['viewType']) {
            if (currentView === ViewType.FORM) {
                if (!validator) {
                    this.toggleValidators(true);
                }
            }
            else {
                if (currentView === ViewType.CARD && !this.isAddressTruthy()) {
                    this.reset.emit();
                }
                if (validator) {
                    this.toggleValidators(false);
                }
            }
        }
    }
    markFieldsAsPristine() {
        this.requiredFields.forEach((controlName) => {
            const control = this.addressForm.controls[controlName];
            if (control) {
                control.markAsUntouched();
                control.markAsPristine();
            }
        });
    }
    addAddress() {
        var _a;
        if (((_a = this.countries) === null || _a === void 0 ? void 0 : _a.length) === 1) {
            this.addressForm.patchValue({ country: this.countries[0].value });
        }
        if (this.addressForm.touched) {
            // This prevents address form from showing errors before saving an address
            this.addressForm.markAsUntouched();
        }
        this.add.emit();
    }
    editAddress() {
        this.edit.emit();
    }
    discardAddress() {
        this.discard.emit();
    }
    deleteAddress() {
        this.delete.emit();
    }
    submitAddress() {
        if (this.viewType === ViewType.FORM) {
            this.addressForm.markAsDirty();
            this.addressForm.markAllAsTouched();
        }
        this.submit.emit();
    }
    toggleValidators(addValidators) {
        this.requiredFields.forEach((controlName) => {
            const control = this.addressForm.controls[controlName];
            const validators = addValidators ? [Validators.required] : null;
            if (control) {
                control.setValidators(validators);
                control.updateValueAndValidity();
            }
        });
    }
    selectCountry(country) {
        this.addressForm.patchValue({ country });
    }
    isAddressTruthy() {
        var _a;
        return isAddressTruthy((_a = this.addressForm) === null || _a === void 0 ? void 0 : _a.value);
    }
    onFocusout() {
        toggleTabIndex('.bb-input-validation-message', this.elRef.nativeElement, false);
    }
    ngOnDestroy() {
        if (this.valueChangeSubscription) {
            this.valueChangeSubscription.unsubscribe();
        }
    }
}
AddressDetailsComponent._id = 0;
/** @nocollapse */ AddressDetailsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AddressDetailsComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ AddressDetailsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AddressDetailsComponent, selector: "bb-address-item-details", inputs: { addressForm: "addressForm", addressType: "addressType", address: "address", isContactAddressCopied: "isContactAddressCopied", states: "states", countries: "countries", hideCountry: "hideCountry", viewType: "viewType", isClosedPayment: "isClosedPayment" }, outputs: { submit: "submit", reset: "reset", discard: "discard", delete: "delete", edit: "edit", add: "add" }, usesOnChanges: true, ngImport: i0, template: "<div class=\"address__view-btn\" [hidden]=\"viewType !== 'BUTTON'\">\n  <button\n    bbButton\n    color=\"link\"\n    (click)=\"addAddress()\"\n    class=\"bb-text-wrap\"\n    data-role=\"control-point\"\n    [disabled]=\"isClosedPayment\"\n  >\n    <bb-icon-ui class=\"mr-2\" name=\"control-point\"></bb-icon-ui>\n    <ng-container i18n=\"@@address-data.add.address.label\"\n      >Add {{ addressType | lowercase }} address</ng-container\n    >\n  </button>\n</div>\n\n<div\n  class=\"address__container--collapsed card card-sm card--highlight card--shadowless\"\n  [hidden]=\"viewType !== 'CARD'\"\n>\n  <div class=\"card-body\">\n    <div class=\"address__container-header bb-stack justify-content-between\">\n      <div class=\"address-label bb-highlight bb-block--md\">\n        <ng-container *ngTemplateOutlet=\"addressTitle\"></ng-container>\n      </div>\n      <div *ngIf=\"!isClosedPayment\">\n        <button\n          bbButton\n          data-role=\"control-point\"\n          color=\"link\"\n          circle=\"true\"\n          (click)=\"editAddress()\"\n          class=\"edit-btn\"\n          bbTooltip=\"Edit address\"\n          [attr.aria-labelledby]=\"'addressInfo_' + id\"\n          triggers=\"hover focus\"\n          i18n-bbTooltip=\"@@address-data.contactaddress.card.buttons.edit.label\"\n        >\n          <bb-icon-ui color=\"dark\" name=\"edit\"></bb-icon-ui>\n        </button>\n        <button\n          bbButton\n          color=\"link\"\n          circle=\"true\"\n          (click)=\"deleteAddress()\"\n          class=\"address__delete-btn\"\n          bbTooltip=\"Delete address\"\n          [attr.aria-labelledby]=\"'addressInfo_' + id\"\n          triggers=\"hover focus\"\n          i18n-bbTooltip=\"\n            @@address-data.contactaddress.card.buttons.delete.label\"\n        >\n          <bb-icon-ui color=\"dark\" name=\"delete\"></bb-icon-ui>\n        </button>\n      </div>\n    </div>\n    <div class=\"address__details--collapsed\" id=\"addressInfo_{{ id }}\">\n      <span class=\"sr-only\"\n        ><ng-container *ngTemplateOutlet=\"addressTitle\"></ng-container\n      ></span>\n      <bb-full-address [address]=\"addressForm?.value\"></bb-full-address>\n    </div>\n  </div>\n</div>\n\n<div\n  class=\"address__container card card-sm card--highlight card--shadowless\"\n  *ngIf=\"viewType === 'FORM'\"\n>\n  <div class=\"card-body\">\n    <fieldSet [formGroup]=\"addressForm\">\n      <legend class=\"sr-only\" i18n=\"@@address-data.addressGroup.title\">\n        Address details\n      </legend>\n      <div class=\"form-group\">\n        <div>\n          <div\n            class=\"address-label bb-highlight bb-block--md\"\n            data-role=\"address-label\"\n            i18n=\"@@address-data.contactAddress.label\"\n          >\n            {{ addressType | titlecase }} address\n          </div>\n          <div class=\"form-group\">\n            <bb-input-text-ui\n              label=\"Address line 1\"\n              i18n-label=\"@@address-data.addressLine1.label\"\n              formControlName=\"addressLine1\"\n              data-role=\"addressLine1\"\n              [maxLength]=\"70\"\n              [attr.aria-describedby]=\"addressLine1?.id + '__error'\"\n              #addressLine1\n            >\n            </bb-input-text-ui>\n            <bb-input-validation-message-ui\n              [attr.id]=\"addressLine1?.id + '__error'\"\n              *ngIf=\"addressForm.controls['addressLine1'] as formControl\"\n              [showErrors]=\"formControl?.touched && formControl?.invalid\"\n              (focusout)=\"onFocusout()\"\n            >\n              <ng-container *ngIf=\"formControl?.errors?.required\">\n                <span i18n=\"@@address-data.addressLine1.requiredError\"\n                  >Address is required.</span\n                >\n              </ng-container>\n            </bb-input-validation-message-ui>\n          </div>\n        </div>\n        <div class=\"form-group\">\n          <bb-input-text-ui\n            label=\"Address line 2 (Optional)\"\n            i18n-label=\"@@address-data.addressLine2.label\"\n            formControlName=\"addressLine2\"\n            data-role=\"addressLine2\"\n            [maxLength]=\"70\"\n            #addressLine2\n          >\n          </bb-input-text-ui>\n        </div>\n        <div class=\"form-group\">\n          <bb-input-text-ui\n            label=\"Address line 3 (Optional)\"\n            i18n-label=\"@@address-data.addressLine3.label\"\n            formControlName=\"streetName\"\n            data-role=\"streetName\"\n            [maxLength]=\"70\"\n            #addressLine3\n          >\n          </bb-input-text-ui>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-md-4 form-group\">\n          <bb-input-text-ui\n            label=\"Postal code\"\n            i18n-label=\"@@address-data.postCode.label\"\n            formControlName=\"postCode\"\n            data-role=\"postCode\"\n            #postCode\n            [maxLength]=\"16\"\n            [attr.aria-describedby]=\"postCode?.id + '__error'\"\n          >\n          </bb-input-text-ui>\n          <bb-input-validation-message-ui\n            [attr.id]=\"postCode?.id + '__error'\"\n            *ngIf=\"addressForm.controls['postCode'] as formControl\"\n            [showErrors]=\"formControl?.touched && formControl?.invalid\"\n            (focusout)=\"onFocusout()\"\n          >\n            <ng-container *ngIf=\"formControl?.errors?.required\">\n              <span i18n=\"@@address-data.postCode.requiredError\"\n                >Postal code is required.</span\n              >\n            </ng-container>\n          </bb-input-validation-message-ui>\n        </div>\n        <div class=\"col-md-8 form-group\">\n          <bb-input-text-ui\n            #contactCity\n            label=\"City\"\n            formControlName=\"town\"\n            data-role=\"town\"\n            [maxLength]=\"35\"\n            [attr.aria-describedby]=\"contactCity?.id + '__error'\"\n          >\n          </bb-input-text-ui>\n          <bb-input-validation-message-ui\n            [attr.id]=\"contactCity?.id + '__error'\"\n            *ngIf=\"addressForm.controls['town'] as formControl\"\n            [showErrors]=\"formControl?.touched && formControl?.invalid\"\n            (focusout)=\"onFocusout()\"\n          >\n            <ng-container *ngIf=\"formControl?.errors?.required\">\n              <span i18n=\"@@address-data.city.requiredError\"\n                >City is required.</span\n              >\n            </ng-container>\n          </bb-input-validation-message-ui>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-md-6 form-group\">\n          <ng-container *ngIf=\"states?.length > 0; else stateText\">\n            <bb-dropdown-single-select-ui\n              label=\"State or area (Optional)\"\n              i18n-label=\"@@address-data.countrySubDivision.label\"\n              data-role=\"stateOrArea\"\n              formControlName=\"countrySubDivision\"\n              placeholder=\"Select\"\n              i18n-placeholder=\"@@address-data.countrySubDivision.placeholder\"\n            >\n              <bb-dropdown-single-select-option-ui\n                *ngFor=\"let option of states\"\n                [value]=\"option.value\"\n                [label]=\"option.label\"\n              >\n              </bb-dropdown-single-select-option-ui>\n            </bb-dropdown-single-select-ui>\n          </ng-container>\n\n          <ng-template #stateText>\n            <bb-input-text-ui\n              #countrySubDivision\n              label=\"State or area (Optional)\"\n              data-role=\"countrySubDivision\"\n              i18n-label=\"@@address-data.countrySubDivision.label\"\n              formControlName=\"countrySubDivision\"\n              [maxLength]=\"35\"\n            >\n            </bb-input-text-ui>\n          </ng-template>\n        </div>\n        <div\n          class=\"col-md-6 form-group\"\n          data-role=\"country\"\n          *ngIf=\"!hideCountry\"\n        >\n          <ng-container *ngIf=\"countries?.length > 0; else countryText\">\n            <bb-dropdown-single-select-ui\n              label=\"Country\"\n              data-role=\"country\"\n              i18n-label=\"@@address-data.country.label\"\n              formControlName=\"country\"\n              placeholder=\"Select\"\n              i18n-placeholder=\"@@address-data.country.placeholder\"\n              [attr.aria-describedby]=\"countryEl?.id + '__error'\"\n              #countryEl\n            >\n              <bb-dropdown-single-select-option-ui\n                *ngFor=\"let option of countries\"\n                [value]=\"option.value\"\n                [label]=\"option.label\"\n              >\n              </bb-dropdown-single-select-option-ui>\n            </bb-dropdown-single-select-ui>\n            <bb-input-validation-message-ui\n              [attr.id]=\"countryEl?.id + '__error'\"\n              *ngIf=\"addressForm.controls['country'] as formControl\"\n              [showErrors]=\"formControl?.touched && formControl?.invalid\"\n              (focusout)=\"onFocusout()\"\n            >\n              <span i18n=\"@@address-data.country.requiredError\"\n                >Country is required.</span\n              >\n            </bb-input-validation-message-ui>\n          </ng-container>\n          <ng-template #countryText>\n            <bb-input-text-ui\n              label=\"Country\"\n              i18n-label=\"@@address-data.country.label\"\n              formControlName=\"country\"\n              [attr.aria-describedby]=\"countryTextEl?.id + '__error'\"\n              #countryTextEl\n            >\n            </bb-input-text-ui>\n            <bb-input-validation-message-ui\n              [attr.id]=\"countryTextEl?.id + '__error'\"\n              *ngIf=\"addressForm.controls['country'] as formControl\"\n              [showErrors]=\"formControl?.touched && formControl?.invalid\"\n              (focusout)=\"onFocusout()\"\n            >\n              <span i18n=\"@@address-data.country.requiredError\"\n                >Country is required.</span\n              >\n            </bb-input-validation-message-ui>\n          </ng-template>\n        </div>\n        <div class=\"col-md-6 form-group\" *ngIf=\"hideCountry\">\n          <div class=\"bb-label\" i18n=\"@@address-data.country-readonly.label\">\n            Country\n          </div>\n          <div class=\"form-control disabled bg-light\">\n            <bb-country-name\n              *ngIf=\"this.addressForm.get('country')?.value as countryCode\"\n              [countryCode]=\"countryCode\"\n            ></bb-country-name>\n          </div>\n        </div>\n      </div>\n    </fieldSet>\n    <div class=\"address__btn-container bb-button-bar bb-button-bar--reverse\">\n      <button\n        class=\"address__confirm-btn bb-button-bar__button\"\n        bbButton\n        buttonSize=\"sm\"\n        color=\"primary\"\n        data-role=\"confirm-address\"\n        (click)=\"submitAddress()\"\n      >\n        <ng-container i18n=\"@@address-data.submitAddressBtn.label\"\n          >Confirm address</ng-container\n        >\n      </button>\n      <button\n        class=\"address__cancel-btn bb-button-bar__button\"\n        bbButton\n        buttonSize=\"sm\"\n        color=\"link\"\n        (click)=\"discardAddress()\"\n      >\n        <ng-container i18n=\"@@address-data.discardAddressBtn.label\"\n          >Discard</ng-container\n        >\n      </button>\n    </div>\n  </div>\n</div>\n\n<ng-template #addressTitle>\n  <ng-container i18n=\"@@address-data.addressType.label\">\n    { addressType, select, beneficiary {Beneficiary} client {Client} beneficiary\n    bank {Beneficiary Bank} correspondent bank {Correspondent Bank} intermediary\n    bank {Intermediary Bank} client bank {Client Bank} }\n  </ng-container>\n  <ng-container i18n=\"@@address-data.contactaddress.card.label\">\n    address\n  </ng-container>\n</ng-template>\n", components: [{ type: i1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: FullAddressComponent, selector: "bb-full-address", inputs: ["address"] }, { type: i3.InputTextComponent, selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i4.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i3$1.DropdownSingleSelectComponent, selector: "bb-dropdown-single-select-ui", inputs: ["placeholder", "defaultOptionAsPlaceholder", "options", "displayAttributePath", "iconName", "compareWithFn"] }, { type: i3$1.DropdownSingleSelectOptionComponent, selector: "bb-dropdown-single-select-option-ui", inputs: ["value", "label"] }, { type: CountryNameComponent, selector: "bb-country-name", inputs: ["countryCode"] }], directives: [{ type: i7.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i2.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i9.TooltipDirective, selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i1$1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$1.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "lowercase": i2.LowerCasePipe, "titlecase": i2.TitleCasePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AddressDetailsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-address-item-details',
                    templateUrl: './address-details.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { addressForm: [{
                type: Input
            }], addressType: [{
                type: Input
            }], address: [{
                type: Input
            }], isContactAddressCopied: [{
                type: Input
            }], states: [{
                type: Input
            }], countries: [{
                type: Input
            }], hideCountry: [{
                type: Input
            }], viewType: [{
                type: Input
            }], isClosedPayment: [{
                type: Input
            }], submit: [{
                type: Output
            }], reset: [{
                type: Output
            }], discard: [{
                type: Output
            }], delete: [{
                type: Output
            }], edit: [{
                type: Output
            }], add: [{
                type: Output
            }] } });

class FlagIconComponent {
    constructor() {
        /**
         * Size of flag icon. Possible values sm | md | lg. Defaults to md.
         */
        this.flagSize = 'md';
    }
    /**
     * Iso code of the country
     */
    set countryCode(code) {
        this.code = code ? code.toLowerCase() : '';
    }
}
/** @nocollapse */ FlagIconComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FlagIconComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ FlagIconComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: FlagIconComponent, selector: "bb-flag-icon", inputs: { flagSize: "flagSize", countryCode: "countryCode" }, ngImport: i0, template: `
    <span
      *ngIf="code"
      class="flag-icon flag-icon-background flag-icon-{{ code }} flag-icon--{{
        flagSize
      }}"
    ></span>
  `, isInline: true, directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: FlagIconComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-flag-icon',
                    template: `
    <span
      *ngIf="code"
      class="flag-icon flag-icon-background flag-icon-{{ code }} flag-icon--{{
        flagSize
      }}"
    ></span>
  `,
                }]
        }], propDecorators: { flagSize: [{
                type: Input
            }], countryCode: [{
                type: Input
            }] } });

class CurrencySelectorComponent {
    constructor() {
        this.isDisabled = false;
        this.search = new FormControl();
        this.filteredCurrencies = [];
        this.currencyToCountryMap = CurrencyToCountryMap;
        this.currenciesMap = CurrenciesMap;
        this.change = new EventEmitter();
        /**
         * Flag to determine component config
         */
        this.config = {};
        /**
         * Selected currency output
         */
        this.selectCurrency = new EventEmitter();
    }
    /**
     * List of currencies setter
     */
    set currencies(currencies) {
        this._currencies = currencies || [];
        this.setupCurrencies();
    }
    setupCurrencies() {
        this.currencyEntries = this._currencies.map((currency) => [
            currency,
            this.currenciesMap[currency] ? this.currenciesMap[currency].name : '',
        ]);
        this.filteredCurrencies = [...this._currencies];
        this.selectedCurrency = this.selectedCurrency || this._currencies[0];
        if (this._currencies.length < 2) {
            this.isDisabled = true;
        }
    }
    selectItem(currency) {
        this.selectedCurrency = currency;
        this.selectCurrency.emit(currency);
        this.onChange(currency);
        this.value = currency;
    }
    handleSearch(query = '') {
        if (query) {
            this.filteredCurrencies = this.currencyEntries.reduce((acc, [currency, currName]) => {
                if (currency.toLocaleLowerCase().indexOf(query.toLocaleLowerCase()) >
                    -1 ||
                    currName.toLocaleLowerCase().indexOf(query.toLocaleLowerCase()) > -1) {
                    acc.push(currency);
                }
                return acc;
            }, []);
        }
        else {
            this.filteredCurrencies = this._currencies;
        }
    }
    onChange(_value) { }
    onTouched() { }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    writeValue(value) {
        if (value) {
            this.selectedCurrency = value;
        }
        this.value = value;
    }
    ngOnInit() {
        this.showFlags = this.config.showFlags || false;
        this.showName = this.config.showName || false;
        this.isSearchable = this.config.isSearchable || false;
        this.dividerIndex = this.config.dividerIndex;
        this.searchPlaceholder = this.config.searchPlaceholder || '';
        this.dropdownIcon = this.config.dropdownIcon || 'toggle-down';
    }
}
/** @nocollapse */ CurrencySelectorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CurrencySelectorComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ CurrencySelectorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: CurrencySelectorComponent, selector: "bb-currency-selector", inputs: { currencies: "currencies", config: "config", ariaLabelledby: ["aria-labelledby", "ariaLabelledby"] }, outputs: { selectCurrency: "selectCurrency" }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            multi: true,
            useExisting: forwardRef((() => CurrencySelectorComponent)),
        },
    ], ngImport: i0, template: "<div\n  class=\"d-inline-block\"\n  ngbDropdown\n  #dropdown=\"ngbDropdown\"\n  display=\"static\"\n>\n  <div>\n    <button\n      bbButton\n      ngbDropdownToggle\n      color=\"unstyled\"\n      (blur)=\"onTouched()\"\n      [disabled]=\"isDisabled\"\n      [attr.aria-labelledby]=\"ariaLabelledby\"\n      data-role=\"open-currency-dropdown-list-button\"\n      class=\"bb-currency-selector__toggle form-control d-flex justify-content-between bb-text-support\"\n    >\n      <ng-container *ngIf=\"selectedCurrency\">\n        <ng-container\n          *ngTemplateOutlet=\"\n            currencyTmpl;\n            context: { code: selectedCurrency, selected: true }\n          \"\n        ></ng-container>\n      </ng-container>\n      <bb-icon-ui [name]=\"dropdownIcon\"></bb-icon-ui>\n    </button>\n  </div>\n\n  <div\n    ngbDropdownMenu\n    class=\"dropdown-menu\"\n    [ngClass]=\"{ 'bb-currency-selector__dropdown': isSearchable }\"\n  >\n    <div *ngIf=\"isSearchable\" class=\"bb-block bb-block--md px-3\">\n      <bb-search-box-ui\n        (focus)=\"dropdown.open()\"\n        [formControl]=\"search\"\n        (clear)=\"handleSearch('')\"\n        data-role=\"currency-search\"\n        (ngModelChange)=\"handleSearch(search.value)\"\n        [placeholder]=\"searchPlaceholder || 'Search'\"\n        [attr.aria-label]=\"searchPlaceholder || 'Search'\"\n        [showSearch]=\"true\"\n        [showClear]=\"true\"\n        [autocomplete]=\"'off'\"\n      ></bb-search-box-ui>\n    </div>\n\n    <bb-payments-sr-search-result-info\n      [totalNumber]=\"filteredCurrencies?.length || 0\"\n    >\n    </bb-payments-sr-search-result-info>\n\n    <div *ngIf=\"filteredCurrencies?.length\" class=\"pre-scrollable\">\n      <ng-container *ngFor=\"let currency of filteredCurrencies; index as i\">\n        <button\n          role=\"menuitem\"\n          data-role=\"currency-item\"\n          type=\"button\"\n          class=\"d-sm-flex px-3 py-2 d-flex-row align-items-center btn--unstyled\"\n          (bbKeyboardClick)=\"selectItem(currency); dropdown.close()\"\n          ngbDropdownItem\n        >\n          <ng-container\n            *ngTemplateOutlet=\"currencyTmpl; context: { code: currency }\"\n          ></ng-container>\n        </button>\n        <hr *ngIf=\"dividerIndex === i\" />\n      </ng-container>\n    </div>\n    <ng-container *ngIf=\"!filteredCurrencies?.length && search?.value\">\n      <ng-container *ngTemplateOutlet=\"emptySearch\"></ng-container>\n    </ng-container>\n  </div>\n</div>\n\n<ng-template let-code=\"code\" let-selected=\"selected\" #currencyTmpl>\n  <div class=\"d-flex align-items-center\" data-role=\"selected-currency\">\n    <bb-flag-icon\n      *ngIf=\"showFlags\"\n      class=\"mr-2 d-flex\"\n      [countryCode]=\"currencyToCountryMap[code]\"\n      [flagSize]=\"'sm'\"\n      data-role=\"flag-icon\"\n    ></bb-flag-icon>\n    {{ code }}\n    <span\n      *ngIf=\"showName && !selected\"\n      class=\"d-inline-block ml-3 bb-text-support\"\n      >{{ currenciesMap[code] && currenciesMap[code].name }}</span\n    >\n  </div>\n</ng-template>\n\n<ng-template #emptySearch>\n  <div class=\"card-body\">\n    <bb-empty-state-ui\n      data-role=\"no-templates-found\"\n      title=\"No search results\"\n      iconSize=\"xl\"\n      i18n-title=\"@@bb-currency-selector.empty-state-title\"\n      iconModifier=\"search\"\n      [showIcon]=\"false\"\n    ></bb-empty-state-ui>\n  </div>\n</ng-template>\n", components: [{ type: i1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i2$1.SearchBoxComponent, selector: "bb-search-box-ui", inputs: ["placeholder", "maxLength", "squareBorder", "typeaheadOptions", "showSearch", "showClear", "searchLabel", "clearLabel", "autocomplete"], outputs: ["submit", "clear", "valueChange"] }, { type: PaymentsSrSearchResultInfoComponent, selector: "bb-payments-sr-search-result-info", inputs: ["totalNumber"] }, { type: FlagIconComponent, selector: "bb-flag-icon", inputs: ["flagSize", "countryCode"] }, { type: i5.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i6.NgbDropdown, selector: "[ngbDropdown]", inputs: ["open", "placement", "container", "autoClose", "display", "dropdownClass"], outputs: ["openChange"], exportAs: ["ngbDropdown"] }, { type: i7.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i6.NgbDropdownToggle, selector: "[ngbDropdownToggle]" }, { type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i6.NgbDropdownMenu, selector: "[ngbDropdownMenu]" }, { type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i1$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$1.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i6.NgbDropdownItem, selector: "[ngbDropdownItem]", inputs: ["disabled"] }, { type: i10.KeyboardClickDirective, selector: "[bbKeyboardClick]", outputs: ["bbKeyboardClick"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CurrencySelectorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-currency-selector',
                    templateUrl: './currency-selector.component.html',
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            multi: true,
                            useExisting: forwardRef((() => CurrencySelectorComponent)),
                        },
                    ],
                }]
        }], propDecorators: { currencies: [{
                type: Input
            }], config: [{
                type: Input
            }], ariaLabelledby: [{
                type: Input,
                args: ['aria-labelledby']
            }], selectCurrency: [{
                type: Output
            }] } });

/**
 * Convert a list of ID references for `aria-` attributes to an attribute value
 */
const idListAttr = (...tokens) => tokens.filter(Boolean).join(' ').toString();
let _nextId = 0;
function getInputNextId() {
    return `bb_input_${_nextId++}`;
}

/**
 * Utility service for DOM manipulations
 */
class DomAttributesService {
    constructor() {
        this.idPrefix = 'bb_element_';
    }
    generateId() {
        return `${this.idPrefix}${DomAttributesService.nextId++}`;
    }
}
DomAttributesService.nextId = 0;
/** @nocollapse */ DomAttributesService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DomAttributesService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ DomAttributesService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DomAttributesService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DomAttributesService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });

const defaultIntLength = 13;
const defaultDecimalPrecision = 2;
/**
 * @name CurrencyInputComponent
 *
 * @a11y Current component provide option to pass needed accessibility
 * attributes. You need to take care of properties that are required in your case :
 *  - aria-describedby
 *  - aria-invalid
 *  - aria-labelledby
 *  - integerLabelSrOnly
 *  - decimalLabelSrOnly
 * @description
 * Component for displaying and managing currency and it amount
 *
 */
class CurrencyAmountSelectorComponent {
    constructor(el, locale, domAttributeService, parentFormControl) {
        this.el = el;
        this.locale = locale;
        this.domAttributeService = domAttributeService;
        this.parentFormControl = parentFormControl;
        this.currencyList = [];
        this.currencyDisabledState = {
            currency: false,
            integer: false,
            decimal: false,
        };
        this.decimalSeparator = getLocaleNumberSymbol(this.locale, NumberSymbol.CurrencyDecimal);
        /**
         * Number of minimum currency precision. Defaults to 2.
         */
        this.decMinLen = defaultDecimalPrecision;
        this.currControl = new FormControl();
        this.intControl = new FormControl();
        this.decControl = new FormControl();
        /**
         * The placeholder for the input. Defaults to 0.
         */
        this.placeholder = '0';
        /**
         * For set output type string/number, by default 'number', when  need work with long number
         * ( bigger than MAX_SAFE_INTEGER = 9,007,199,254,740,993 ) need to use 'string'
         */
        this.resultType = 'number';
        /**
         * Whether there should be only the integer part.
         * You have to keep in mind, that if you have decimal part, even ".00"
         * you will not be able to remove it
         */
        this.integer = false;
        /**
         * Whether the input is required. Defaults to false.
         */
        this.required = false;
        /**
         * Whether the input is read only. Defaults to false.
         */
        this.readonly = false;
        /**
         * Whether integer label is only visible for screen readers.
         * By default is visible if it is needed to hide change this property
         * to "true" and it will have class "sr-only"
         */
        this.integerLabelSrOnly = false;
        /**
         * By default is visible if it is needed to hide change this property
         * to "true" and it will have class "sr-only"
         * By default is hidden and accessible only for screen reader
         */
        this.decimalLabelSrOnly = false;
        /**
         * Flag that denotes if the currency selector is extended. Defaults to false.
         */
        this.currencySelectorExtended = false;
        /**
         * The currency selector config map.
         */
        this.currencySelectorConfig = {};
        /**
         * Whether decimal text is aligned to the right.
         * By default is false
         */
        this.isRightAligned = false;
        this._integerId = getInputNextId();
        this._decimalId = getInputNextId();
        this.idListAttr = idListAttr;
        this.initialized = false;
        /**
         * The label for the integer input.
         */
        this.integerLabel = '';
        /**
         * The label for the decimal input.
         */
        this.decimalLabel = '';
        /**
         * The label for the currency input.
         */
        this.currencyLabel = '';
        /**
         * Flag is used to allow input negative value
         */
        this.allowNegativeValue = false;
        /**
         * Aria label for the currency dropdown.
         */
        this.currencyListAriaLabel = 'Currency List Dropdown';
        /**
         * Aria label for the currency list with one item.
         */
        this.currencyListWithOnItemAriaLabel = 'Currency';
        this.onChange = (_) => { };
        this.onTouched = () => { };
        this.currencyInputId = this.domAttributeService.generateId();
        this.currencyLabelId = this.domAttributeService.generateId();
        this.decimalInputId = this.domAttributeService.generateId();
        this.decimalLabelId = this.domAttributeService.generateId();
        this.integerInputId = this.domAttributeService.generateId();
        this.integerLabelId = this.domAttributeService.generateId();
        this.validationMessagesId = this.domAttributeService.generateId();
        BigNumber.config({
            FORMAT: {
                // grouping separator of the integer part
                groupSeparator: ',',
                // primary grouping size of the integer part
                groupSize: 3,
            },
        });
        if (this.parentFormControl != null) {
            // Setting the value accessor directly (instead of using
            // the providers) to avoid running into a circular import.
            this.parentFormControl.valueAccessor = this;
        }
    }
    /**
     * Configure the maximum number of decimals.
     *
     * When greater than the default number of decimals for the specified currency, this value will take precedence.
     * Configuring this value can affect the input placeholder.
     */
    get decMaxLen() {
        return typeof this._decMaxLen === 'number'
            ? this._decMaxLen
            : this.getDecimalDigits(this.currency || '');
    }
    set decMaxLen(value) {
        this._decMaxLen = value;
    }
    /**
     * Non-configurable placeholder for the decimal input.
     * Displays a zero digit for every digit that is allowed in the decimal field.
     */
    get decPlaceholder() {
        return '0'.repeat(this.decMaxLen || 0);
    }
    /**
     * Whether the input is disabled. Defaults to false.
     */
    set disabled(disabled) {
        if (typeof disabled === 'boolean') {
            this.currencyDisabledState = {
                currency: disabled,
                integer: disabled,
                decimal: disabled,
            };
        }
        else {
            this.currencyDisabledState = disabled;
        }
    }
    get disabled() {
        return this.currencyDisabledState;
    }
    /**
     * Currency list to be displayed in the dropdown.
     *
     * Note: Non-empty currency list is required for the currency symbol
     * field to be shown. Otherwise, only the amount fields will be shown.
     *
     * Additionally, If only a single currency provided, the dropdown of
     * the currency selection will be disabled and its value set to that single currency
     */
    set currencies(list) {
        this.currencyList = list;
        if (this.currencyList && this.currencyList.length > 1) {
            this.currControl.enable();
        }
        else {
            this.currControl.disable();
        }
        // if currency is not set, use first item from the list
        if (this.currencyList &&
            (this.currency === undefined ||
                this.currencyList.indexOf(this.currency) === -1)) {
            // [FIXME] Nothing guarantees that the currencyList isn't empty
            this.updateCurrency(this.currencyList[0]);
        }
    }
    /**
     * The id for the integer input. Defaults to unique string.
     * Used to map the label to the input.
     */
    set integerId(value) {
        this._integerId = value;
    }
    get integerId() {
        return this._integerId;
    }
    /**
     * The id for the decimal input. Defaults to unique string.
     * Used to map the label to the input.
     */
    set decimalId(value) {
        this._decimalId = value;
    }
    get decimalId() {
        return this._decimalId;
    }
    ngOnInit() {
        this.initialized = true;
        if (!this.integerLabel || !this.decimalLabel) {
            console.warn(`Found an input from '${this.constructor.name}' without 'label' or 'aria-label' attribute, please provide one of them`);
        }
        this.setDisabled(this.currencyDisabledState);
        this.formatInteger();
        console.warn(`The default value of "decMinLen" will be undefined from version 6 of ui-ang. \
      If you would like to keep the current functionality (to force a minimum of 2 decimals), \
      please set the decMinLen property to 2.`);
    }
    ngOnChanges(changes) {
        if (changes.disabled) {
            this.setDisabled(this.currencyDisabledState);
        }
    }
    get cur() {
        return this.currency;
    }
    get curList() {
        return this.currencyList;
    }
    ngAfterViewInit() {
        const len = this.el.nativeElement.getAttribute('maxlength');
        this.intMaxLen = len ? parseInt(len, 10) : defaultIntLength;
    }
    onPress($event) {
        this.focusDecEl($event.key);
        const keyCode = $event.keyCode || $event.which;
        const key = String.fromCharCode(keyCode);
        // allow to enter 'minus' only at the first position and if correspondent flag is enabled
        const isLeadingMinusPosition = this.allowNegativeValue &&
            this.intEl &&
            this.intEl.nativeElement.selectionStart === 0 &&
            key === '-';
        // regexp is used here to support both of regular keyboard's numbers and numpad's numbers
        if (!(isLeadingMinusPosition || /^\d$/.test(key)) &&
            $event.keyCode !== 8 &&
            $event.keyCode !== 9) {
            $event.preventDefault();
        }
    }
    onInput() {
        const isFormatted = this.formatInteger();
        if (isFormatted) {
            this.triggerChange();
        }
    }
    updateCurrency(currency) {
        this.currency = currency || this.currControl.value;
        this.triggerChange();
    }
    checkValues() {
        if (this.currency === undefined) {
            return true;
        }
        if (!this.decControl.value && !this.intControl.value) {
            this.onChange({
                currency: this.currency,
                amount: '',
            });
            return true;
        }
        return false;
    }
    formatDecimal(decControl) {
        const { value } = decControl;
        if (value && this.decMaxLen && value.lenght < this.decMaxLen) {
            const updatedValue = String(value).padEnd(this.decMaxLen, '0');
            decControl.patchValue(updatedValue);
        }
    }
    triggerChange() {
        if (this.checkValues()) {
            return;
        }
        const int = this.intControl.value || '0';
        if (this.resultType === 'string') {
            const whole = int.replace(/,/g, '');
            const dec = this.decControl.value || '0';
            const newAmount = whole + (dec !== '0' ? '.' + dec : '');
            this.onChange({
                currency: this.currency,
                amount: newAmount,
            });
        }
        else {
            const whole = parseInt(int.replace(/[^-\d]/g, ''), 10);
            const dec = parseFloat('0.' + this.decControl.value) || 0;
            const sign = whole < 0 ? -1 : 1;
            const newAmount = (Math.abs(whole) + dec) * sign;
            this.onChange({
                currency: this.currency,
                amount: newAmount,
            });
        }
    }
    checkNumeric(numeric) {
        // removed all dashes except the first one
        if (numeric.length > 0) {
            numeric = numeric[0] + numeric.slice(1).replace(/-/g, '');
        }
        numeric = this.sanitizeNumericValue(numeric);
        return numeric === '' ? numeric : new BigNumber(numeric || 0).toFormat();
    }
    /**
     * Formats integer to user-friendly format
     *
     * @returns Returns true in case of successful formatting, otherwise - false.
     */
    formatInteger() {
        // The behavior of `formatInteger` is dependent on some component inputs,
        // so don't format anything until the configuration is available.
        if (!this.initialized || !this.intEl) {
            return false;
        }
        if (!this.intControl.value) {
            this.intControl.setValue('');
            return true;
        }
        const offset = this.intEl.nativeElement.selectionStart - this.intControl.value.length;
        const numeric = this.intControl.value.replace(this.allowNegativeValue ? /[^-\d]/g : /\D/g, '');
        if (numeric === '-') {
            this.intControl.setValue('-', { emitEvent: false });
            return false;
        }
        const newVal = this.checkNumeric(numeric);
        // extend maxlength (if set) with the amount of special chars
        if (this.intMaxLen) {
            const specialCount = newVal.replace(/\d/g, '').length;
            this.intEl.nativeElement.setAttribute('maxlength', '' + (this.intMaxLen + specialCount));
        }
        this.intControl.setValue(newVal);
        const newLen = this.intControl.value.length;
        const newPos = Math.max(offset + newLen, 0);
        if (newLen > 0 && document.activeElement === this.intEl.nativeElement) {
            this.intEl.nativeElement.selectionStart = newPos;
            this.intEl.nativeElement.selectionEnd = newPos;
        }
        return true;
    }
    /**
     * Event handler for backspace key press, and check if correct number is deleted
     */
    onBackspace(el) {
        if (el.selectionStart &&
            (el.value[el.selectionStart - 1] === ',' ||
                el.value[el.selectionStart - 1] === '.')) {
            el.setSelectionRange(el.selectionStart - 1, el.selectionStart - 1);
        }
    }
    // method is used to correct rendered input's value if user entered '-' and left the field
    correctInputValue() {
        this.markAsTouched();
        const numeric = this.intControl.value;
        if (numeric !== '-') {
            return;
        }
        this.intControl.setValue('', { emitEvent: false });
    }
    writeValue(model) {
        if (!model) {
            return;
        }
        // currency cannot be set to nothing
        if (model.currency) {
            this.currency = model.currency;
            this.currControl.setValue(model.currency);
        }
        if (typeof model.amount === 'string' || typeof model.amount === 'number') {
            const [whole, decimals] = ('' + model.amount).split('.');
            this.intControl.setValue(whole);
            this.decControl.setValue(decimals);
        }
        else {
            this.intControl.setValue('');
            this.decControl.setValue('');
        }
        this.formatInteger();
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    markAsTouched() {
        this.onTouched();
    }
    setDisabled(disableState) {
        disableState.currency
            ? this.currControl.disable()
            : this.currControl.enable();
        disableState.integer ? this.intControl.disable() : this.intControl.enable();
        disableState.decimal ? this.decControl.disable() : this.decControl.enable();
    }
    focusDecEl(key) {
        if (this.decEl && ['.', ','].indexOf(key) !== -1) {
            this.decEl.nativeElement.focus();
        }
    }
    /**
     * Make sure that numeric value doesn't exceed max length (if set)
     * this might happen in case value is pasted to input that has extended max length
     *
     * @param numeric
     */
    sanitizeNumericValue(numeric) {
        if (this.intMaxLen && numeric) {
            return numeric.slice(0, this.intMaxLen);
        }
        return numeric;
    }
    /**
     * If currency doesn't have decimal part, decimal placeholder
     * will be set to default decMinLen
     */
    getDecimalDigits(currency) {
        return getNumberOfCurrencyDigits(currency) === 0
            ? this.decMinLen
            : getNumberOfCurrencyDigits(currency);
    }
}
/** @nocollapse */ CurrencyAmountSelectorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CurrencyAmountSelectorComponent, deps: [{ token: i0.ElementRef }, { token: LOCALE_ID }, { token: DomAttributesService }, { token: i1$1.NgControl, optional: true, self: true }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ CurrencyAmountSelectorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: CurrencyAmountSelectorComponent, selector: "bb-currency-amount-selector", inputs: { decMaxLen: "decMaxLen", decMinLen: "decMinLen", placeholder: "placeholder", resultType: "resultType", integer: "integer", required: "required", readonly: "readonly", disabled: "disabled", integerLabelSrOnly: "integerLabelSrOnly", decimalLabelSrOnly: "decimalLabelSrOnly", currencies: "currencies", currencySelectorExtended: "currencySelectorExtended", currencySelectorConfig: "currencySelectorConfig", isRightAligned: "isRightAligned", integerId: "integerId", decimalId: "decimalId", integerLabel: "integerLabel", decimalLabel: "decimalLabel", currencyLabel: "currencyLabel", labelClasses: "labelClasses", allowNegativeValue: "allowNegativeValue", currencyListAriaLabel: "currencyListAriaLabel", currencyListWithOnItemAriaLabel: "currencyListWithOnItemAriaLabel", ariaDescribedby: ["aria-describedby", "ariaDescribedby"], ariaLabelledby: ["aria-labelledby", "ariaLabelledby"], ariaInvalid: ["aria-invalid", "ariaInvalid"] }, providers: [DecimalPipe], viewQueries: [{ propertyName: "intEl", first: true, predicate: ["integerInput"], descendants: true, static: true }, { propertyName: "decEl", first: true, predicate: ["decimalsInput"], descendants: true, static: true }], usesOnChanges: true, ngImport: i0, template: "<div class=\"bb-currency-input\">\n  <div class=\"bb-stack bb-stack--align-bottom\">\n    <div\n      *ngIf=\"curList && curList.length\"\n      class=\"bb-currency-input__currency-selector selector bb-stack__item\"\n    >\n      <label\n        class=\"sr-only\"\n        *ngIf=\"currencyListAriaLabel || currencyListWithOnItemAriaLabel\"\n        [ngClass]=\"labelClasses\"\n        [for]=\"currencyInputId\"\n        [attr.aria-label]=\"currencyListWithOnItemAriaLabel\"\n        id=\"{{ currencyLabelId }}\"\n        [attr.data-role]=\"'currency-input-label'\"\n      >\n        <ng-container\n          [ngSwitch]=\"\n            !!currencyListAriaLabel || !!currencyListWithOnItemAriaLabel\n          \"\n        >\n          <ng-container *ngSwitchCase=\"true\">\n            {{\n              curList && curList.length > 1\n                ? currencyListAriaLabel\n                : currencyListWithOnItemAriaLabel\n            }}\n          </ng-container>\n          <ng-container\n            *ngSwitchDefault\n            i18n=\"\n              Currency label | Label for currency code dropdown of the Currency\n              Input component\n              @@bb-currency-input-ui-wrapper-wrapper.currency-input-label\"\n            >Currency</ng-container\n          >\n        </ng-container>\n      </label>\n      <ng-container\n        *ngIf=\"!currencySelectorExtended\"\n        [ngSwitch]=\"readonly || (curList && curList.length === 1)\"\n      >\n        <input\n          *ngSwitchCase=\"true\"\n          [id]=\"currencyInputId\"\n          [readonly]=\"true\"\n          [required]=\"required\"\n          [attr.aria-invalid]=\"ariaInvalid\"\n          [attr.aria-labelledby]=\"idListAttr(ariaLabelledby, currencyLabelId)\"\n          class=\"form-control bb-text-align-center\"\n          value=\"{{ cur }}\"\n          [attr.data-role]=\"'currency-input-currency-readonly'\"\n        />\n        <bb-dropdown-single-select-ui\n          *ngSwitchDefault\n          [id]=\"currencyInputId\"\n          class=\"bb-block\"\n          [placeholder]=\"curList[0]\"\n          [options]=\"curList\"\n          [readonly]=\"readonly\"\n          [required]=\"required\"\n          [aria-invalid]=\"ariaInvalid\"\n          [aria-labelledby]=\"idListAttr(ariaLabelledby, currencyLabelId)\"\n          (change)=\"updateCurrency(); markAsTouched()\"\n          [formControl]=\"currControl\"\n          [attr.data-role]=\"'currency-input-currency-selector'\"\n        ></bb-dropdown-single-select-ui>\n      </ng-container>\n      <ng-container *ngIf=\"currencySelectorExtended\">\n        <bb-currency-selector\n          [aria-labelledby]=\"idListAttr(ariaLabelledby, currencyLabelId)\"\n          [formControl]=\"currControl\"\n          [currencies]=\"curList\"\n          [config]=\"currencySelectorConfig\"\n          (selectCurrency)=\"updateCurrency($event)\"\n        ></bb-currency-selector>\n      </ng-container>\n    </div>\n    <!-- htmllint label-req-for=\"false\" -->\n    <div\n      class=\"bb-currency-input__integer bb-stack__item bb-stack__item--spacing-sm\"\n      [class.ng-touched]=\"\n        intControl.touched || decControl.touched || parentFormControl?.touched\n      \"\n      [class.ng-invalid]=\"intControl.invalid || parentFormControl?.invalid\"\n    >\n      <label\n        [class.sr-only]=\"!integerLabel || integerLabelSrOnly\"\n        [ngClass]=\"labelClasses\"\n        for=\"{{ integerInputId }}\"\n        id=\"{{ integerLabelId }}\"\n        [attr.data-role]=\"'currency-input-integer-label'\"\n      >\n        <ng-container [ngSwitch]=\"!!integerLabel\">\n          <ng-container *ngSwitchCase=\"true\">\n            {{ integerLabel }}\n          </ng-container>\n          <ng-container\n            *ngSwitchDefault\n            i18n=\"\n              Integer label | Label for integer part of the monetary amount of\n              the Currency Input component\n              @@bb-currency-input-ui-wrapper-wrapper.integer-input-label\"\n            >Integer</ng-container\n          >\n        </ng-container>\n      </label>\n      <input\n        id=\"{{ integerInputId }}\"\n        [attr.aria-describedby]=\"\n          idListAttr(ariaDescribedby, validationMessagesId)\n        \"\n        [attr.aria-invalid]=\"ariaInvalid\"\n        [attr.aria-labelledby]=\"idListAttr(ariaLabelledby, integerLabelId)\"\n        name=\"integer\"\n        type=\"text\"\n        size=\"5\"\n        role=\"textbox\"\n        [readOnly]=\"readonly\"\n        [required]=\"required\"\n        (keydown.backspace)=\"onBackspace(integerInput)\"\n        (keypress)=\"onPress($event)\"\n        (input)=\"onInput()\"\n        (blur)=\"correctInputValue()\"\n        [formControl]=\"intControl\"\n        class=\"form-control bb-text-align-right\"\n        placeholder=\"{{ placeholder }}\"\n        #integerInput\n        autocomplete=\"off\"\n        autocorrect=\"off\"\n        autocapitalize=\"off\"\n        spellcheck=\"false\"\n        [attr.data-role]=\"'currency-input-integer-input'\"\n      />\n    </div>\n\n    <span\n      *ngIf=\"!integer && decMaxLen\"\n      class=\"bb-stack__item bb-stack__item--spacing-sm\"\n      >{{ decimalSeparator }}</span\n    >\n\n    <div\n      *ngIf=\"!integer && decMaxLen\"\n      class=\"bb-currency-input__decimal\"\n      [class.ng-touched]=\"\n        intControl.touched || decControl.touched || parentFormControl?.touched\n      \"\n      [class.ng-invalid]=\"intControl.invalid || parentFormControl?.invalid\"\n    >\n      <label\n        [class.sr-only]=\"!decimalLabel || decimalLabelSrOnly\"\n        [ngClass]=\"labelClasses\"\n        for=\"{{ decimalInputId }}\"\n        id=\"{{ decimalLabelId }}\"\n        [attr.data-role]=\"'currency-input-decimal-label'\"\n      >\n        <ng-container [ngSwitch]=\"!!decimalLabel\">\n          <ng-container *ngSwitchCase=\"true\">\n            {{ decimalLabel }}\n          </ng-container>\n          <ng-container\n            *ngSwitchDefault\n            i18n=\"\n              Decimal label | Label for decimal part of the monetary amount of\n              the Currency Input component\n              @@bb-currency-input-ui-wrapper-wrapper.decimal-input-label\"\n          >\n            Decimals\n          </ng-container>\n        </ng-container>\n      </label>\n      <input\n        id=\"{{ decimalInputId }}\"\n        [attr.aria-describedby]=\"\n          idListAttr(ariaDescribedby, validationMessagesId)\n        \"\n        [attr.aria-invalid]=\"ariaInvalid\"\n        [attr.aria-labelledby]=\"idListAttr(ariaLabelledby, decimalLabelId)\"\n        name=\"decimals\"\n        type=\"text\"\n        role=\"textbox\"\n        [readOnly]=\"readonly\"\n        [required]=\"required\"\n        (keypress)=\"onPress($event)\"\n        (input)=\"triggerChange()\"\n        (blur)=\"markAsTouched(); formatDecimal(decControl)\"\n        [formControl]=\"decControl\"\n        class=\"form-control\"\n        [ngClass]=\"{ 'bb-text-align-right': isRightAligned }\"\n        maxlength=\"{{ decMaxLen }}\"\n        placeholder=\"{{ decPlaceholder }}\"\n        #decimalsInput\n        autocomplete=\"off\"\n        autocorrect=\"off\"\n        autocapitalize=\"off\"\n        spellcheck=\"false\"\n        [attr.data-role]=\"'input-currency-decimals'\"\n      />\n    </div>\n  </div>\n  <div\n    class=\"bb-input-validation-message\"\n    aria-live=\"assertive\"\n    [id]=\"validationMessagesId\"\n    [attr.data-role]=\"'currency-input-validation-message'\"\n  >\n    <ng-content select=\"[bbValidationMessage]\"></ng-content>\n  </div>\n</div>\n", components: [{ type: i3$1.DropdownSingleSelectComponent, selector: "bb-dropdown-single-select-ui", inputs: ["placeholder", "defaultOptionAsPlaceholder", "options", "displayAttributePath", "iconName", "compareWithFn"] }, { type: CurrencySelectorComponent, selector: "bb-currency-selector", inputs: ["currencies", "config", "aria-labelledby"], outputs: ["selectCurrency"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i2.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i2.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i2.NgSwitchDefault, selector: "[ngSwitchDefault]" }, { type: i1$1.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i1$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$1.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i1$1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i1$1.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CurrencyAmountSelectorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-currency-amount-selector',
                    templateUrl: './currency-amount-selector.component.html',
                    providers: [DecimalPipe],
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [LOCALE_ID]
                }] }, { type: DomAttributesService }, { type: i1$1.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }] }]; }, propDecorators: { decMaxLen: [{
                type: Input
            }], decMinLen: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], resultType: [{
                type: Input
            }], integer: [{
                type: Input
            }], required: [{
                type: Input
            }], readonly: [{
                type: Input
            }], disabled: [{
                type: Input
            }], integerLabelSrOnly: [{
                type: Input
            }], decimalLabelSrOnly: [{
                type: Input
            }], currencies: [{
                type: Input
            }], currencySelectorExtended: [{
                type: Input
            }], currencySelectorConfig: [{
                type: Input
            }], isRightAligned: [{
                type: Input
            }], integerId: [{
                type: Input
            }], decimalId: [{
                type: Input
            }], integerLabel: [{
                type: Input
            }], decimalLabel: [{
                type: Input
            }], currencyLabel: [{
                type: Input
            }], labelClasses: [{
                type: Input
            }], allowNegativeValue: [{
                type: Input
            }], currencyListAriaLabel: [{
                type: Input
            }], currencyListWithOnItemAriaLabel: [{
                type: Input
            }], ariaDescribedby: [{
                type: Input,
                args: ['aria-describedby']
            }], ariaLabelledby: [{
                type: Input,
                args: ['aria-labelledby']
            }], ariaInvalid: [{
                type: Input,
                args: ['aria-invalid']
            }], intEl: [{
                type: ViewChild,
                args: ['integerInput', { static: true }]
            }], decEl: [{
                type: ViewChild,
                args: ['decimalsInput', { static: true }]
            }] } });

class PayordDynamicLabelComponent {
    constructor() {
        /**
         * Fallback label name
         */
        this.defaultLabel = '';
        /**
         * Parent group name of the form field
         */
        this.parentName = '';
        this.label = '';
    }
    ngOnInit() {
        this.label = getLabelFromPaymentConfig(this.name, this.config, this.parentName);
    }
}
/** @nocollapse */ PayordDynamicLabelComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordDynamicLabelComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PayordDynamicLabelComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordDynamicLabelComponent, selector: "bb-payord-dynamic-label", inputs: { config: "config", name: "name", defaultLabel: "defaultLabel", parentName: "parentName" }, ngImport: i0, template: ` <ng-container>{{ label || defaultLabel }}</ng-container> `, isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordDynamicLabelComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payord-dynamic-label',
                    template: ` <ng-container>{{ label || defaultLabel }}</ng-container> `,
                }]
        }], propDecorators: { config: [{
                type: Input
            }], name: [{
                type: Input
            }], defaultLabel: [{
                type: Input
            }], parentName: [{
                type: Input
            }] } });

class PaymentDebitorDetailsCardComponent {
}
/** @nocollapse */ PaymentDebitorDetailsCardComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentDebitorDetailsCardComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PaymentDebitorDetailsCardComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PaymentDebitorDetailsCardComponent, selector: "bb-debitor-details-card", inputs: { details: "details" }, ngImport: i0, template: "<div class=\"bb-payment-account-details-card h-100\">\n  <div class=\"bb-payment-account-details-card__header\">\n    <bb-icon-ui\n      backgroundType=\"square\"\n      color=\"secondary\"\n      size=\"sm\"\n      name=\"current-accounts\"\n    ></bb-icon-ui>\n    <div class=\"bb-text-bold break-word\">\n      <bb-amount-ui\n        [mapCurrency]=\"false\"\n        [amount]=\"details?.balance\"\n        [currency]=\"details?.currency\"\n      ></bb-amount-ui>\n    </div>\n  </div>\n  <div class=\"bb-payment-account-details-card__body justify-content-start\">\n    <div class=\"bb-text-bold break-word\" data-role=\"debit-account-name\">\n      {{ details?.alias || details?.name }}\n    </div>\n    <div\n      class=\"bb-text-support bb-subtitle contextual-alternates-off\"\n      data-role=\"debit-account-number\"\n    >\n      {{ details?.accountNumber || details?.IBAN }}\n    </div>\n  </div>\n</div>\n", components: [{ type: i1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i2$2.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentDebitorDetailsCardComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-debitor-details-card',
                    templateUrl: './debitor-details-card.component.html',
                }]
        }], propDecorators: { details: [{
                type: Input
            }] } });

class PaymentCreditorDetailsCardComponent {
}
/** @nocollapse */ PaymentCreditorDetailsCardComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentCreditorDetailsCardComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PaymentCreditorDetailsCardComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PaymentCreditorDetailsCardComponent, selector: "bb-creditor-details-card", inputs: { details: "details" }, ngImport: i0, template: "<div class=\"bb-payment-account-details-card h-100\">\n  <div class=\"bb-payment-account-details-card__header\" aria-hidden=\"true\">\n    <bb-avatar-ui [name]=\"details?.name\"></bb-avatar-ui>\n    <bb-flag-icon\n      [countryCode]=\"details?.creditorBank?.postalAddress?.country\"\n      flagSize=\"lg\"\n    ></bb-flag-icon>\n  </div>\n  <div class=\"bb-payment-account-details-card__body justify-content-start\">\n    <div class=\"bb-text-bold break-word\" data-role=\"creditor-name\">\n      {{ details?.alias || details?.name }}\n    </div>\n    <div class=\"bb-text-support bb-subtitle\" data-role=\"creditor-number\">\n      <ng-container\n        data-role=\"creditor-account-number-with-branch-code\"\n        *ngIf=\"details?.creditorBank?.bankBranchCode\"\n        >{{ details?.creditorBank?.bankBranchCode }} /\n        {{ details?.accountNumber || details?.IBAN }}</ng-container\n      >\n      <ng-container\n        data-role=\"creditor-account-number\"\n        *ngIf=\"!details?.creditorBank?.bankBranchCode\"\n        >{{ details?.accountNumber || details.IBAN }}</ng-container\n      >\n    </div>\n  </div>\n</div>\n", components: [{ type: i1$2.AvatarComponent, selector: "bb-avatar-ui", inputs: ["image", "name", "imgAlt", "size"] }, { type: FlagIconComponent, selector: "bb-flag-icon", inputs: ["flagSize", "countryCode"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentCreditorDetailsCardComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-creditor-details-card',
                    templateUrl: './creditor-details-card.component.html',
                }]
        }], propDecorators: { details: [{
                type: Input
            }] } });

class PayordScheduleDetailsComponent {
    isRelativeDate(date) {
        const today = getRelativeDate();
        const tomorrow = getRelativeDate(1);
        const _date = getDateOnly(new Date(date));
        let relativeDate = '';
        if (_date === today) {
            relativeDate = 'today';
        }
        else if (_date === tomorrow) {
            relativeDate = 'tomorrow';
        }
        return relativeDate;
    }
}
/** @nocollapse */ PayordScheduleDetailsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordScheduleDetailsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PayordScheduleDetailsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordScheduleDetailsComponent, selector: "bb-payord-schedule-details", inputs: { data: "data", paymentConfig: "paymentConfig" }, ngImport: i0, template: "<div class=\"row\">\n  <ng-container *ngIf=\"data?.frequency?.value || data?.frequency as freq\">\n    <div class=\"col-md-6 bb-block bb-block--md\" *ngIf=\"data?.startDate\">\n      <div class=\"bb-text-bold\">\n        <bb-payord-dynamic-label\n          *ngIf=\"freq === 'ONCE'\"\n          name=\"startDate\"\n          [config]=\"paymentConfig\"\n          parentName=\"schedule\"\n          defaultLabel=\"Execution date\"\n          i18n-defaultLabel=\"@@schedule-details.execute-on.label\"\n        ></bb-payord-dynamic-label>\n        <bb-payord-dynamic-label\n          *ngIf=\"freq !== 'ONCE'\"\n          name=\"startDate\"\n          [config]=\"paymentConfig\"\n          parentName=\"schedule\"\n          defaultLabel=\"Start on\"\n          i18n-defaultLabel=\"@@schedule-details.start-date.label\"\n        ></bb-payord-dynamic-label>\n      </div>\n      <div data-role=\"execution-date\">\n        {{ data?.startDate | date: 'mediumDate' }}\n        <span i18n=\"@@schedule-details.execution-date.relative-date.label\">\n          {isRelativeDate(data?.startDate), select, today {(Today)} tomorrow\n          {(Tomorrow)}}\n        </span>\n      </div>\n    </div>\n\n    <div class=\"col-md-6 bb-block bb-block--md\" *ngIf=\"freq !== 'ONCE'\">\n      <div class=\"bb-text-bold\">\n        <bb-payord-dynamic-label\n          name=\"frequency\"\n          [config]=\"paymentConfig\"\n          parentName=\"schedule\"\n          defaultLabel=\"Frequency\"\n          i18n-defaultLabel=\"@@schedule-details.frequency.label\"\n        ></bb-payord-dynamic-label>\n      </div>\n\n      <div data-role=\"frequency-value\" i18n=\"@@schedule-details.frequency\">\n        {freq, select, DAILY {Daily} WEEKLY {Weekly} BIWEEKLY {Bi-Weekly}\n        MONTHLY {Monthly} QUARTERLY {Quarterly} YEARLY {Annually}}\n      </div>\n    </div>\n  </ng-container>\n\n  <ng-container *ngIf=\"(data?.frequency?.value || data?.frequency) !== 'ONCE'\">\n    <div\n      class=\"col-md-6 bb-block bb-block--md\"\n      *ngIf=\"data?.endType === 'after' && data?.repeat\"\n    >\n      <div class=\"bb-text-bold\" data-role=\"end-after-label\">\n        <bb-payord-dynamic-label\n          name=\"repeat\"\n          [config]=\"paymentConfig\"\n          parentName=\"schedule\"\n          defaultLabel=\"End after\"\n          i18n-defaultLabel=\"@@schedule-details.end-after.label\"\n        ></bb-payord-dynamic-label>\n      </div>\n      <div data-role=\"end-after\">\n        {{ data?.repeat }}\n        <span i18n=\"@@schedule-details.occurrences.label\">occurrences</span>\n      </div>\n    </div>\n    <div\n      class=\"col-md-6 bb-block bb-block--md\"\n      *ngIf=\"data?.endType === 'on' || data?.endType === 'never'\"\n    >\n      <div class=\"bb-text-bold\" data-role=\"end-date-label\">\n        <bb-payord-dynamic-label\n          name=\"endDate\"\n          [config]=\"paymentConfig\"\n          parentName=\"schedule\"\n          defaultLabel=\"End on\"\n          i18n-defaultLabel=\"@@schedule-details.end-date.label\"\n        ></bb-payord-dynamic-label>\n      </div>\n      <div *ngIf=\"data?.endType === 'on'\" data-role=\"end-date\">\n        {{ data?.endDate | date: 'mediumDate' }}\n        <span i18n=\"@@schedule-details-end-date.relative-date.label\">\n          {isRelativeDate(data?.endDate), select, today {(Today)} tomorrow\n          {(Tomorrow)}}\n        </span>\n      </div>\n      <div\n        *ngIf=\"data?.endType === 'never'\"\n        i18n=\"@@manage-payments.payment.details.endDate.never\"\n        data-role=\"payment-recurring-end-date-never-ending\"\n      >\n        Never ending\n      </div>\n    </div>\n  </ng-container>\n</div>\n", components: [{ type: PayordDynamicLabelComponent, selector: "bb-payord-dynamic-label", inputs: ["config", "name", "defaultLabel", "parentName"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "date": i2.DatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordScheduleDetailsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payord-schedule-details',
                    templateUrl: './schedule-details.component.html',
                }]
        }], propDecorators: { data: [{
                type: Input
            }], paymentConfig: [{
                type: Input
            }] } });

const counterpartyI18n = {
    beneficiaryTitle: $localize `:@@counterparty-details.beneficiary-details.title:Beneficiary details`,
    beneficiaryDebitTitle: $localize `:@@counterparty-details.client-details.title:Client details`,
    beneficiaryBankTitle: $localize `:@@counterparty-details.beneficiary-address.title:Beneficiary bank details`,
    beneficiaryBankDebitTitle: $localize `:@@counterparty-details.lient-address.title:Client bank details`,
    beneficiaryAddressTitle: $localize `:@@counterparty-details.bank-details.title:Beneficiary address`,
    beneficiaryAddressDebitTitle: $localize `:@@counterparty-details.client-bank-details.title:Client addresss`,
};

class PayordCounterpartyDetailsComponent {
    constructor() {
        /**
         * Flag to denote debit payment
         */
        this.isDebitPayment = false;
    }
    hasPostalAddress(address) {
        return isAddressTruthy(address);
    }
    ngOnInit() {
        this.beneficiaryDetailsTitles = this.isDebitPayment
            ? {
                beneficiaryTitle: counterpartyI18n.beneficiaryDebitTitle,
                bankTitle: counterpartyI18n.beneficiaryBankDebitTitle,
                addressTitle: counterpartyI18n.beneficiaryAddressDebitTitle,
            }
            : {
                beneficiaryTitle: counterpartyI18n.beneficiaryTitle,
                bankTitle: counterpartyI18n.beneficiaryBankTitle,
                addressTitle: counterpartyI18n.beneficiaryAddressTitle,
            };
    }
}
/** @nocollapse */ PayordCounterpartyDetailsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordCounterpartyDetailsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PayordCounterpartyDetailsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordCounterpartyDetailsComponent, selector: "bb-payord-counterparty-details", inputs: { config: "config", details: "details", isDebitPayment: "isDebitPayment" }, ngImport: i0, template: "<div\n  class=\"card card-sm card--highlight card--shadowless bb-block bb-block--md\"\n  *ngIf=\"\n    details?.entryClass ||\n    details?.accountType ||\n    details?.recipientId ||\n    hasPostalAddress(details?.postalAddress)\n  \"\n>\n  <div class=\"card-body\">\n    <div class=\"bb-text-bold bb-block bb-block--md\">\n      {{ beneficiaryDetailsTitles?.beneficiaryTitle }}\n    </div>\n    <div\n      class=\"row bb-block bb-block--md\"\n      *ngIf=\"details?.entryClass || details?.accountType\"\n    >\n      <div\n        class=\"col-md-6 bb-block bb-block--md\"\n        *ngIf=\"\n          details?.accountType &&\n          (details?.accountType === 'SAVINGS' ||\n            details?.accountType === 'CHECKING')\n        \"\n      >\n        <div class=\"bb-text-bold\">\n          <bb-payord-dynamic-label\n            name=\"accountType\"\n            [config]=\"config\"\n            parentName=\"counterparty\"\n            defaultLabel=\"Account type\"\n            i18n-defaultLabel=\"\n              @@counterparty-details.account-type-default-label\"\n          ></bb-payord-dynamic-label>\n        </div>\n        <div\n          [ngSwitch]=\"details?.accountType\"\n          data-role=\"beneficiary-account-type\"\n        >\n          <ng-container\n            i18n=\"@@counterparty-details.account-type-savings\"\n            *ngSwitchCase=\"'SAVINGS'\"\n          >\n            Savings\n          </ng-container>\n          <ng-container\n            i18n=\"@@counterparty-details.account-type-checking\"\n            *ngSwitchCase=\"'CHECKING'\"\n          >\n            Checking\n          </ng-container>\n        </div>\n      </div>\n\n      <div class=\"col-md-6 bb-block bb-block--md\" *ngIf=\"details?.entryClass\">\n        <div class=\"bb-text-bold\">\n          <bb-payord-dynamic-label\n            name=\"entryClass\"\n            [config]=\"config\"\n            parentName=\"counterparty\"\n            defaultLabel=\"Standard entry class (SEC Type)\"\n            i18n-defaultLabel=\"@@counterparty-details.entryClass-default-label\"\n          ></bb-payord-dynamic-label>\n        </div>\n        <div\n          [ngSwitch]=\"details?.entryClass\"\n          data-role=\"beneficiary-standard-entry-class\"\n        >\n          <ng-container\n            i18n=\"@@counterparty-details.entryClass-ppd\"\n            *ngSwitchCase=\"'PPD'\"\n          >\n            Personal (PPD)\n          </ng-container>\n          <ng-container\n            i18n=\"@@counterparty-details.entryClass-ccd\"\n            *ngSwitchCase=\"'CCD'\"\n          >\n            Business (CCD)\n          </ng-container>\n        </div>\n      </div>\n    </div>\n\n    <div\n      class=\"row\"\n      *ngIf=\"details?.recipientId\"\n      [ngClass]=\"{\n        'bb-block bb-block--md': hasPostalAddress(details?.postalAddress)\n      }\"\n    >\n      <div class=\"col-md-6 bb-block bb-block--md\">\n        <div\n          class=\"bb-text-bold break-word\"\n          data-role=\"payment-counterparty-recipient-id-label\"\n        >\n          <bb-payord-dynamic-label\n            name=\"recipientId\"\n            [config]=\"config\"\n            parentName=\"counterparty\"\n            defaultLabel=\"Recipient ID\"\n            i18n-defaultLabel=\"@@counterparty-details.recipientId-default-label\"\n          ></bb-payord-dynamic-label>\n        </div>\n        <div data-role=\"payment-counterparty-recipient-id\">\n          {{ details?.recipientId }}\n        </div>\n      </div>\n    </div>\n\n    <div *ngIf=\"hasPostalAddress(details?.postalAddress)\">\n      <div class=\"bb-text-bold\">\n        {{ beneficiaryDetailsTitles?.addressTitle }}\n      </div>\n      <div class=\"break-word\">\n        <bb-full-address [address]=\"details?.postalAddress\"></bb-full-address>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div>\n  <div\n    class=\"card card-sm card--highlight card--shadowless bb-block bb-block--md\"\n    data-role=\"beneficiary-bank-details\"\n    *ngIf=\"\n      details?.creditorBank?.bankName ||\n      details?.creditorBank?.bic ||\n      hasPostalAddress(details?.creditorBank?.postalAddress)\n    \"\n  >\n    <div class=\"card-body\">\n      <div class=\"bb-text-bold bb-block bb-block--md\">\n        {{ beneficiaryDetailsTitles?.bankTitle }}\n      </div>\n\n      <div\n        [ngClass]=\"{\n          'bb-block bb-block--md': hasPostalAddress(\n            details?.creditorBank?.postalAddress\n          )\n        }\"\n        *ngIf=\"details?.creditorBank?.bankName || details?.creditorBank?.bic\"\n      >\n        <div class=\"row\">\n          <div\n            class=\"col-6\"\n            [class.col-12]=\"!details?.creditorBank?.bic\"\n            *ngIf=\"details?.creditorBank?.bankName\"\n          >\n            <div class=\"bb-text-bold\">\n              <bb-payord-dynamic-label\n                name=\"bankName\"\n                [config]=\"config\"\n                parentName=\"creditorBank\"\n                defaultLabel=\"Bank name\"\n                i18n-defaultLabel=\"\n                  @@counterparty-details.creditor-bank-name-default-label\"\n              ></bb-payord-dynamic-label>\n            </div>\n            <div class=\"break-word\" data-role=\"beneficiary-bank-name\">\n              {{ details?.creditorBank?.bankName }}\n            </div>\n          </div>\n\n          <div class=\"col-6\" *ngIf=\"details?.creditorBank?.bic\">\n            <div class=\"bb-text-bold\">\n              <bb-payord-dynamic-label\n                name=\"bic\"\n                [config]=\"config\"\n                defaultLabel=\"SWIFT/BIC code\"\n                i18n-defaultLabel=\"\n                  @@counterparty-details.creditor-bank-bic-default-label\"\n              ></bb-payord-dynamic-label>\n            </div>\n            <div\n              class=\"break-word\"\n              *ngIf=\"details?.creditorBank?.bic\"\n              data-role=\"counterparty-bic-code\"\n            >\n              {{ details?.creditorBank?.bic }}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div *ngIf=\"hasPostalAddress(details?.creditorBank?.postalAddress)\">\n        <div\n          class=\"bb-text-bold\"\n          i18n=\"@@counterparty-details.bank-address.title\"\n        >\n          Bank address\n        </div>\n        <div class=\"break-word\" data-role=\"beneficiary-bank-address\">\n          <bb-full-address\n            [address]=\"details?.creditorBank?.postalAddress\"\n          ></bb-full-address>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div\n    class=\"card card-sm card--highlight card--shadowless bb-block bb-block--md\"\n    data-role=\"correspondant-bank-details\"\n    *ngIf=\"\n      details?.correspondentBank?.bankName ||\n      details?.correspondentBank?.bankBranchCode ||\n      details?.correspondentBank?.bic ||\n      hasPostalAddress(details?.correspondentBank?.postalAddress)\n    \"\n  >\n    <div class=\"card-body\">\n      <div\n        class=\"bb-text-bold bb-block bb-block--md\"\n        i18n=\"@@counterparty-details.correspondant-bank-details.title\"\n      >\n        Correspondent bank details\n      </div>\n\n      <div\n        [ngClass]=\"{\n          'bb-block bb-block--md': hasPostalAddress(\n            details?.correspondentBank?.postalAddress\n          )\n        }\"\n        *ngIf=\"\n          details?.correspondentBank?.bankName ||\n          details?.correspondentBank?.bankBranchCode ||\n          details?.correspondentBank?.bic\n        \"\n      >\n        <div class=\"row\">\n          <div class=\"col-6\" *ngIf=\"details?.correspondentBank?.bankName\">\n            <div class=\"bb-text-bold\">\n              <bb-payord-dynamic-label\n                name=\"bankName\"\n                [config]=\"config\"\n                parentName=\"correspondentBank\"\n                defaultLabel=\"Bank name\"\n                i18n-defaultLabel=\"\n                  @@counterparty-details.correspondent.bank-name-default-label\"\n              ></bb-payord-dynamic-label>\n            </div>\n            <div class=\"break-word\" data-role=\"correspondant-bank-name\">\n              {{ details?.correspondentBank?.bankName }}\n            </div>\n          </div>\n\n          <div class=\"col-6\" *ngIf=\"details?.correspondentBank?.bankBranchCode\">\n            <div class=\"bb-text-bold\">\n              <bb-payord-dynamic-label\n                name=\"bankBranchCode\"\n                [config]=\"config\"\n                parentName=\"correspondentBank\"\n                defaultLabel=\"Routing transit number (ABA)\"\n                i18n-defaultLabel=\"\n                  @@counterparty-details.routing-transit-number-default-label\"\n              ></bb-payord-dynamic-label>\n            </div>\n            <div class=\"bb-text-support\" data-role=\"correspondant-bank-code\">\n              {{ details?.correspondentBank?.bankBranchCode }}\n            </div>\n          </div>\n\n          <div class=\"col-6\" *ngIf=\"details?.correspondentBank?.bic\">\n            <div class=\"bb-text-bold\">\n              <bb-payord-dynamic-label\n                name=\"bic\"\n                [config]=\"config\"\n                parentName=\"correspondentBank\"\n                defaultLabel=\"SWIFT/BIC code\"\n                i18n-defaultLabel=\"\n                  @@counterparty-details.correspondentBank.bic-default-label\"\n              ></bb-payord-dynamic-label>\n            </div>\n            <div\n              class=\"break-word\"\n              *ngIf=\"details?.correspondentBank?.bic\"\n              data-role=\"correspondent-bic-code\"\n            >\n              {{ details?.correspondentBank?.bic }}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div *ngIf=\"hasPostalAddress(details?.correspondentBank?.postalAddress)\">\n        <div\n          class=\"bb-text-bold\"\n          i18n=\"@@counterparty-details.correspondant-bank-address.title\"\n        >\n          Bank address\n        </div>\n        <div class=\"break-word\" data-role=\"correspondant-bank-address\">\n          <bb-full-address\n            [address]=\"details?.correspondentBank?.postalAddress\"\n          ></bb-full-address>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <div\n    class=\"card card-sm card--highlight card--shadowless bb-block bb-block--md\"\n    data-role=\"intermediary-bank-details\"\n    *ngIf=\"\n      details?.intermediaryBank?.bankName ||\n      details?.intermediaryBank?.bankBranchCode ||\n      details?.intermediaryBank?.bic ||\n      hasPostalAddress(details?.intermediaryBank?.postalAddress)\n    \"\n  >\n    <div class=\"card-body\">\n      <div\n        class=\"bb-text-bold bb-block bb-block--md\"\n        i18n=\"@@counterparty-details.intermediary-bank-details.title\"\n      >\n        Intermediary bank details\n      </div>\n\n      <div\n        [ngClass]=\"{\n          'bb-block bb-block--md': hasPostalAddress(\n            details?.intermediaryBank?.postalAddress\n          )\n        }\"\n        *ngIf=\"\n          details?.intermediaryBank?.bankName ||\n          details?.intermediaryBank?.bankBranchCode ||\n          details?.intermediaryBank?.bic\n        \"\n      >\n        <div class=\"row\">\n          <div class=\"col-6\" *ngIf=\"details?.intermediaryBank?.bankName\">\n            <div class=\"bb-text-bold\">\n              <bb-payord-dynamic-label\n                name=\"bankName\"\n                [config]=\"config\"\n                parentName=\"intermediaryBank\"\n                defaultLabel=\"Bank name\"\n                i18n-defaultLabel=\"\n                  @@counterparty-details.intermediaryBank-bank-name-default-label\"\n              ></bb-payord-dynamic-label>\n            </div>\n            <div class=\"break-word\" data-role=\"intermediary-bank-name\">\n              {{ details?.intermediaryBank?.bankName }}\n            </div>\n          </div>\n\n          <div class=\"col-6\" *ngIf=\"details?.intermediaryBank?.bankBranchCode\">\n            <div class=\"bb-text-bold\">\n              <bb-payord-dynamic-label\n                name=\"bankBranchCode\"\n                [config]=\"config\"\n                parentName=\"intermediaryBank\"\n                defaultLabel=\"Routing transit number (ABA)\"\n                i18n-defaultLabel=\"\n                  @@counterparty-details.intermediary-routing-transit-number-default-label\"\n              ></bb-payord-dynamic-label>\n            </div>\n            <div class=\"bb-text-support\" data-role=\"intermediary-bank-code\">\n              {{ details?.intermediaryBank?.bankBranchCode }}\n            </div>\n          </div>\n\n          <div class=\"col-6\" *ngIf=\"details?.intermediaryBank?.bic\">\n            <div class=\"bb-text-bold\">\n              <bb-payord-dynamic-label\n                name=\"bic\"\n                [config]=\"config\"\n                parentName=\"intermediaryBank\"\n                defaultLabel=\"SWIFT/BIC code\"\n                i18n-defaultLabel=\"\n                  @@counterparty-details.intermediaryBank-bic-default-label\"\n              ></bb-payord-dynamic-label>\n            </div>\n            <div\n              class=\"break-word\"\n              *ngIf=\"details?.intermediaryBank?.bic\"\n              data-role=\"intermediaryBank-bic-code\"\n            >\n              {{ details?.intermediaryBank?.bic }}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div *ngIf=\"hasPostalAddress(details?.intermediaryBank?.postalAddress)\">\n        <div\n          class=\"bb-text-bold\"\n          i18n=\"@@counterparty-details.intermediary-bank-address.title\"\n        >\n          Bank address\n        </div>\n        <div class=\"break-word\" data-role=\"intermediary-bank-address\">\n          <bb-full-address\n            [address]=\"details?.intermediaryBank?.postalAddress\"\n          ></bb-full-address>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n", components: [{ type: PayordDynamicLabelComponent, selector: "bb-payord-dynamic-label", inputs: ["config", "name", "defaultLabel", "parentName"] }, { type: FullAddressComponent, selector: "bb-full-address", inputs: ["address"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i2.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordCounterpartyDetailsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payord-counterparty-details',
                    templateUrl: './counterparty-details.component.html',
                }]
        }], propDecorators: { config: [{
                type: Input
            }], details: [{
                type: Input
            }], isDebitPayment: [{
                type: Input
            }] } });

class PayordStatusComponent {
    constructor() {
        /**
         * Status of the payment. Defaults to success.
         */
        this.status = PaymentSubmitStatuses.SUCCESS;
        /**
         * Message to be displayed. Defaults to empty string.
         */
        this.message = '';
        /**
         * Flag to denote debit mode.
         */
        this.isDebitPayment = false;
    }
}
/** @nocollapse */ PayordStatusComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordStatusComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PayordStatusComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordStatusComponent, selector: "bb-payord-status-card", inputs: { status: "status", message: "message", isDebitPayment: "isDebitPayment" }, ngImport: i0, template: "<div\n  class=\"bb-payment-status-card\"\n  [ngClass]=\"\n    status === 'error'\n      ? 'bb-payment-status-card--danger'\n      : 'bb-payment-status-card--success'\n  \"\n>\n  <bb-icon-ui\n    class=\"bb-payment-status-card__icon\"\n    size=\"xxl\"\n    [color]=\"status === 'error' ? 'danger' : 'success'\"\n    [name]=\"status === 'error' ? 'error-outline' : 'success'\"\n  ></bb-icon-ui>\n  <div\n    class=\"break-word col-12 bb-text-align-center\"\n    *ngIf=\"message\"\n    data-role=\"payment-status-msg\"\n  >\n    {{ message }}\n  </div>\n  <div\n    class=\"break-word col-12 bb-text-align-center\"\n    *ngIf=\"!message\"\n    data-role=\"payment-status-msg\"\n  >\n    <ng-container\n      *ngIf=\"!isDebitPayment\"\n      i18n=\"@@bb-payment-status-card-payment-status-message\"\n    >\n      { status, select, error {Failed to submit payment. Please try again later}\n      pending {Payment is submitted successfully, and pending further\n      approval(s)} pending_edited {Edited payment submitted successfully} other\n      {Payment submitted successfully} }\n    </ng-container>\n    <ng-container\n      *ngIf=\"isDebitPayment\"\n      i18n=\"@@bb-payment-status-card-debit-status-message\"\n    >\n      { status, select, error {Failed to submit debit request. Please try again\n      later} pending {Debit request is submitted successfully, and pending\n      further approval(s)} pending_edited {Edited debit request submitted\n      successfully} other {Debit request submitted successfully} }\n    </ng-container>\n  </div>\n</div>\n", components: [{ type: i1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordStatusComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payord-status-card',
                    templateUrl: './status-card.component.html',
                }]
        }], propDecorators: { status: [{
                type: Input
            }], message: [{
                type: Input
            }], isDebitPayment: [{
                type: Input
            }] } });

class PayordAmountDetailsComponent {
    constructor() {
        this.hasTransferFee = false;
        this.exchangeRateError = false;
    }
    ngOnInit() {
        var _a, _b, _c;
        const transferFee = this.transferFee || { amount: '0', currencyCode: '' };
        const amount = (_b = (_a = this.details) === null || _a === void 0 ? void 0 : _a.amountGroup) === null || _b === void 0 ? void 0 : _b.amount;
        this.hasTransferFee = !!transferFee.amount;
        const calculatedAmount = new BigNumber(((_c = this.forexDetails) === null || _c === void 0 ? void 0 : _c.calculatedAmount) || amount || '0')
            .plus(transferFee.amount)
            .toString();
        this.exchangeRateError = this.hasForexError();
        this.totalAmount =
            this.hasTransferFee && this.chargeBearer !== 'BEN'
                ? calculatedAmount
                : amount;
    }
    hasForexError() {
        var _a, _b, _c;
        return !!(((_a = this.forexDetails) === null || _a === void 0 ? void 0 : _a.fromCurrency) !== ((_b = this.forexDetails) === null || _b === void 0 ? void 0 : _b.toCurrency) &&
            !((_c = this.forexDetails) === null || _c === void 0 ? void 0 : _c.rate));
    }
}
/** @nocollapse */ PayordAmountDetailsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordAmountDetailsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PayordAmountDetailsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordAmountDetailsComponent, selector: "bb-payord-amount-details", inputs: { config: "config", details: "details", transferFee: "transferFee", chargeBearer: "chargeBearer", forexDetails: "forexDetails" }, ngImport: i0, template: "<div class=\"bb-block bb-block--md\">\n  <div class=\"bb-text-bold\">\n    <bb-payord-dynamic-label\n      name=\"amountGroup\"\n      [config]=\"config\"\n      defaultLabel=\"Amount\"\n      i18n-defaultLabel\n    ></bb-payord-dynamic-label>\n  </div>\n  <div\n    class=\"bb-highlight break-word bb-block bb-block--xs\"\n    data-role=\"transfer-amount\"\n  >\n    <bb-amount-ui\n      [amount]=\"details?.amountGroup?.amount\"\n      [currency]=\"details?.amountGroup?.currency\"\n      [mapCurrency]=\"false\"\n    ></bb-amount-ui>\n  </div>\n  <ng-container *ngIf=\"forexDetails?.calculatedAmount\">\n    <div class=\"bb-block bb-block--xs\">\n      <span i18n=\"amount-details.payment.details.amount-you-pay-label\"\n        >Amount you pay</span\n      >:\n      <span data-role=\"amount-you-pay\">\n        &asymp;\n        <bb-amount-ui\n          [mapCurrency]=\"false\"\n          [amount]=\"forexDetails?.calculatedAmount\"\n          [currency]=\"forexDetails?.fromCurrency\"\n        ></bb-amount-ui>\n      </span>\n    </div>\n    <div class=\"bb-block bb-block--xs\" data-role=\"indicative-rate\">\n      <span i18n=\"amount-details.payment.details.indicative-fee-label\"\n        >Indicative rate</span\n      >: 1 {{ forexDetails?.fromCurrency }} &asymp; {{ forexDetails?.rate }}\n      {{ forexDetails?.toCurrency }}\n    </div>\n  </ng-container>\n\n  <div class=\"bb-block bb-block--md\" *ngIf=\"transferFee\">\n    <div class=\"bb-block bb-block--xs\" data-role=\"transfer-fee\">\n      <span\n        *ngIf=\"config?.name\"\n        i18n=\"@@standard-transfer-fee-label\"\n        data-role=\"transfer-fee-label\"\n        >Transfer fee - {{ config.name }}:\n      </span>\n\n      <bb-amount-ui\n        [amount]=\"transferFee?.amount\"\n        [currency]=\"transferFee?.currencyCode || details?.amountGroup?.currency\"\n        [mapCurrency]=\"false\"\n        data-role=\"transfer-fee\"\n      ></bb-amount-ui>\n    </div>\n\n    <div class=\"bb-block bb-block--xs\" data-role=\"charge-bearer\">\n      <ng-container *ngIf=\"chargeBearer\" [ngSwitch]=\"chargeBearer\">\n        <ng-container i18n=\"@@charge-bearer-value-our\" *ngSwitchCase=\"'OUR'\">\n          I pay all fees (OUR)\n        </ng-container>\n        <ng-container i18n=\"@@charge-bearer-value-ben\" *ngSwitchCase=\"'BEN'\">\n          Beneficiary pays all fees (BEN)\n        </ng-container>\n        <ng-container i18n=\"@@charge-bearer-value-sha\" *ngSwitchCase=\"'SHA'\">\n          Fee is shared between you and beneficiary (SHA)\n        </ng-container>\n      </ng-container>\n    </div>\n\n    <div *ngIf=\"!exchangeRateError\" class=\"bb-text-bold\">\n      <span i18n=\"@@total-label\">Total: </span>\n      <ng-container\n        i18n=\"@@total-approximate-sign\"\n        *ngIf=\"forexDetails?.calculatedAmount\"\n        >&asymp;\n      </ng-container>\n      <bb-amount-ui\n        [amount]=\"totalAmount\"\n        [currency]=\"\n          forexDetails?.fromCurrency || details?.amountGroup?.currency\n        \"\n        [mapCurrency]=\"false\"\n        [attr.data-role]=\"'transfer-total'\"\n      ></bb-amount-ui>\n    </div>\n  </div>\n</div>\n", components: [{ type: PayordDynamicLabelComponent, selector: "bb-payord-dynamic-label", inputs: ["config", "name", "defaultLabel", "parentName"] }, { type: i2$2.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i2.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordAmountDetailsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payord-amount-details',
                    templateUrl: './amount-details.component.html',
                }]
        }], propDecorators: { config: [{
                type: Input
            }], details: [{
                type: Input
            }], transferFee: [{
                type: Input
            }], chargeBearer: [{
                type: Input
            }], forexDetails: [{
                type: Input
            }] } });

class CountrySelectorComponent {
    constructor() {
        this._selectedCountry = '';
        this.search = new FormControl();
        this.filteredCountries = [];
        /** */
        this.selectedCountry = '';
        /** */
        this.helperText = '';
        /** */
        this.placeholder = '';
        /** */
        this.label = '';
        /** */
        this.searchPlaceholder = '';
        /** */
        this.dropdownIcon = 'toggle-down';
        /** */
        this.selectCountry = new EventEmitter();
    }
    /** */
    set countries(countries) {
        this._countries = countries || [];
        this.setupCountries();
    }
    setupCountries() {
        this.countryEntries = this._countries.map((country) => [
            country,
            CountriesMap[country],
        ]);
        this.filteredCountries = [...this._countries];
    }
    selectItem(country) {
        this.selectedCountry = country;
        this.selectCountry.emit(country);
    }
    handleSearch(query = '') {
        if (query) {
            this.filteredCountries = this.countryEntries.reduce((acc, [key, country]) => {
                if (key.toLocaleLowerCase().indexOf(query.toLocaleLowerCase()) > -1 ||
                    country.toLocaleLowerCase().indexOf(query.toLocaleLowerCase()) > -1) {
                    acc.push(key);
                }
                return acc;
            }, []);
        }
        else {
            this.filteredCountries = this._countries;
        }
    }
    onChange(_value) { }
    onTouched() { }
    writeValue(_value) { }
    onBlur() { }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
}
/** @nocollapse */ CountrySelectorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CountrySelectorComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ CountrySelectorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: CountrySelectorComponent, selector: "bb-country-selector", inputs: { countries: "countries", selectedCountry: "selectedCountry", helperText: "helperText", placeholder: "placeholder", label: "label", searchPlaceholder: "searchPlaceholder", dropdownIcon: "dropdownIcon" }, outputs: { selectCountry: "selectCountry" }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            multi: true,
            useExisting: forwardRef((() => CountrySelectorComponent)),
        },
    ], ngImport: i0, template: "<div\n  class=\"bb-country-selector\"\n  ngbDropdown\n  #dropdown=\"ngbDropdown\"\n  display=\"static\"\n>\n  <div class=\"d-inline-block bb-label\" (click)=\"btn.focus()\" *ngIf=\"label\">\n    {{ label }}\n  </div>\n  <span\n    class=\"bb-dynamic-input__helper-text bb-text-support\"\n    *ngIf=\"helperText\"\n    [id]=\"searchElem?.id + '__helper-text'\"\n    [textContent]=\"helperText\"\n  >\n  </span>\n  <div>\n    <button\n      bbButton\n      ngbDropdownToggle\n      color=\"unstyled\"\n      (blur)=\"onBlur()\"\n      data-role=\"open-country-dropdown-list-button\"\n      [attr.aria-label]=\"label\"\n      class=\"bb-country-selector__toggle form-control w-100 d-flex justify-content-between bb-text-support\"\n      #btn\n    >\n      <ng-container *ngIf=\"selectedCountry\">\n        <ng-container\n          *ngTemplateOutlet=\"\n            countryTmpl;\n            context: { $implicit: selectedCountry }\n          \"\n        ></ng-container>\n      </ng-container>\n      <div *ngIf=\"!selectedCountry\">\n        <ng-container\n          *ngIf=\"placeholder; else defaultPlaceHolder\"\n        ></ng-container>\n        {{ placeholder }}\n      </div>\n      <bb-icon-ui [name]=\"dropdownIcon || 'toggle-down'\"></bb-icon-ui>\n    </button>\n  </div>\n\n  <div ngbDropdownMenu class=\"dropdown-menu dropdown-menu-right w-100\">\n    <div class=\"bb-block bb-block--md px-3\">\n      <bb-search-box-ui\n        (focus)=\"dropdown.open()\"\n        [formControl]=\"search\"\n        (clear)=\"handleSearch('')\"\n        data-role=\"country-search\"\n        role=\"searchbox\"\n        (ngModelChange)=\"handleSearch(search.value)\"\n        [placeholder]=\"searchPlaceholder || 'Search'\"\n        [showSearch]=\"true\"\n        [showClear]=\"true\"\n        [autocomplete]=\"'off'\"\n        #searchElem\n      >\n      </bb-search-box-ui>\n    </div>\n    <div *ngIf=\"filteredCountries?.length\" class=\"pre-scrollable\">\n      <button\n        *ngFor=\"let country of filteredCountries\"\n        role=\"menuitem\"\n        type=\"button\"\n        class=\"d-sm-flex px-3 py-2 d-flex-row align-items-center btn--unstyled\"\n        (bbKeyboardClick)=\"selectItem(country); dropdown.close()\"\n        ngbDropdownItem\n      >\n        <ng-container\n          *ngTemplateOutlet=\"countryTmpl; context: { $implicit: country }\"\n        ></ng-container>\n      </button>\n    </div>\n    <ng-container *ngIf=\"!filteredCountries?.length && search?.value\">\n      <ng-container *ngTemplateOutlet=\"emptySearch\"></ng-container>\n    </ng-container>\n  </div>\n</div>\n\n<ng-template let-code #countryTmpl>\n  <div class=\"d-flex justify-content-between align-items-center w-100\">\n    <div class=\"d-flex align-items-center\">\n      <bb-flag-icon\n        class=\"mr-2 d-flex\"\n        [countryCode]=\"code\"\n        [flagSize]=\"'sm'\"\n      ></bb-flag-icon>\n      <bb-country-name [countryCode]=\"code\"></bb-country-name>\n    </div>\n    <div class=\"bb-text-support\">{{ code }}</div>\n  </div>\n</ng-template>\n\n<ng-template #emptySearch>\n  <div class=\"card-body\">\n    <bb-empty-state-ui\n      data-role=\"no-templates-found\"\n      title=\"No Results Found\"\n      subtitle=\"We can\u2019t find what you\u2019re looking for. Please try a different criteria.\"\n      iconSize=\"xxl\"\n      i18n-subtitle=\"@@bb-country-selector.empty-state-subtitle\"\n      i18n-title=\"@@bb-country-selector.empty-state-title\"\n      iconModifier=\"search\"\n      [showIcon]=\"true\"\n    ></bb-empty-state-ui>\n  </div>\n</ng-template>\n\n<ng-template #defaultPlaceHolder>\n  <ng-container i18n>- select a country -</ng-container>\n</ng-template>\n", components: [{ type: i1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i2$1.SearchBoxComponent, selector: "bb-search-box-ui", inputs: ["placeholder", "maxLength", "squareBorder", "typeaheadOptions", "showSearch", "showClear", "searchLabel", "clearLabel", "autocomplete"], outputs: ["submit", "clear", "valueChange"] }, { type: FlagIconComponent, selector: "bb-flag-icon", inputs: ["flagSize", "countryCode"] }, { type: CountryNameComponent, selector: "bb-country-name", inputs: ["countryCode"] }, { type: i5.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i6.NgbDropdown, selector: "[ngbDropdown]", inputs: ["open", "placement", "container", "autoClose", "display", "dropdownClass"], outputs: ["openChange"], exportAs: ["ngbDropdown"] }, { type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i7.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i6.NgbDropdownToggle, selector: "[ngbDropdownToggle]" }, { type: i2.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i6.NgbDropdownMenu, selector: "[ngbDropdownMenu]" }, { type: i1$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$1.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i6.NgbDropdownItem, selector: "[ngbDropdownItem]", inputs: ["disabled"] }, { type: i10.KeyboardClickDirective, selector: "[bbKeyboardClick]", outputs: ["bbKeyboardClick"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CountrySelectorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-country-selector',
                    templateUrl: './country-selector.component.html',
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            multi: true,
                            useExisting: forwardRef((() => CountrySelectorComponent)),
                        },
                    ],
                }]
        }], propDecorators: { countries: [{
                type: Input
            }], selectedCountry: [{
                type: Input
            }], helperText: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], label: [{
                type: Input
            }], searchPlaceholder: [{
                type: Input
            }], dropdownIcon: [{
                type: Input
            }], selectCountry: [{
                type: Output
            }] } });

class SelectCountryDropdownComponent {
    constructor() {
        this._selectedCountry = '';
        this.search = new FormControl();
        this.filteredCountries = [];
        /**
         * Selected country iso code
         */
        this.selectedCountry = '';
        /**
         * Helper text for the component. Defaults to empty string.
         */
        this.helperText = '';
        /**
         * Placeholder text. Defaults to empty string.
         */
        this.placeholder = '';
        /**
         * Label of the component. Defaults to empty string.
         */
        this.label = '';
        /**
         * Placeholder fot search. Defaults to empty string.
         */
        this.searchPlaceholder = '';
        /**
         * Icon for the dropdown. Defaults to `toggle-down`
         */
        this.dropdownIcon = 'toggle-down';
        /**
         * Flag which indicates permission to create closed payment
         * Default value is `false`
         */
        this.isClosedPayment = false;
        /**
         * Emits value when a country is selected
         */
        this.selectCountry = new EventEmitter();
    }
    /**
     * Array of country iso codes
     */
    set countries(countries) {
        this._countries = countries || [];
        this.setupCountries();
    }
    setupCountries() {
        this.countryEntries = this._countries.map((country) => [
            country,
            CountriesMap[country],
        ]);
        this.filteredCountries = [...this._countries];
    }
    selectItem(country) {
        this.selectedCountry = country;
        this.selectCountry.emit(country);
        if (this.search.value) {
            this.search.reset();
        }
    }
    handleSearch(query = '') {
        if (query) {
            this.filteredCountries = this.countryEntries.reduce((acc, [key, country]) => {
                if (key.toLocaleLowerCase().indexOf(query.toLocaleLowerCase()) > -1 ||
                    country.toLocaleLowerCase().indexOf(query.toLocaleLowerCase()) > -1) {
                    acc.push(key);
                }
                return acc;
            }, []);
        }
        else {
            this.filteredCountries = this._countries;
        }
    }
    onChange() { }
    onTouched() { }
    writeValue() { }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
}
/** @nocollapse */ SelectCountryDropdownComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectCountryDropdownComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ SelectCountryDropdownComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: SelectCountryDropdownComponent, selector: "bb-select-country-dropdown", inputs: { countries: "countries", selectedCountry: "selectedCountry", helperText: "helperText", placeholder: "placeholder", label: "label", searchPlaceholder: "searchPlaceholder", dropdownIcon: "dropdownIcon", isClosedPayment: "isClosedPayment" }, outputs: { selectCountry: "selectCountry" }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            multi: true,
            useExisting: forwardRef((() => SelectCountryDropdownComponent)),
        },
    ], ngImport: i0, template: "<div\n  class=\"bb-dynamic-input bb-select-country-dropdown\"\n  ngbDropdown\n  placement=\"bottom\"\n  #dropdown=\"ngbDropdown\"\n>\n  <div class=\"d-inline-block bb-label\" (click)=\"btn.focus()\" *ngIf=\"label\">\n    {{ label }}\n  </div>\n  <span\n    class=\"bb-dynamic-input__helper-text bb-text-support\"\n    *ngIf=\"helperText\"\n    [id]=\"searchElem?.id + '__helper-text'\"\n    [textContent]=\"helperText\"\n  >\n  </span>\n  <div>\n    <button\n      bbButton\n      ngbDropdownToggle\n      color=\"unstyled\"\n      (blur)=\"onTouched()\"\n      data-role=\"open-country-dropdown-list-button\"\n      [attr.aria-label]=\"label\"\n      [disabled]=\"isClosedPayment && selectedCountry\"\n      class=\"bb-select-country-dropdown__toggle form-control w-100 pr-5 d-flex justify-content-between bb-text-support\"\n      #btn\n    >\n      <ng-container *ngIf=\"selectedCountry\">\n        <ng-container\n          *ngTemplateOutlet=\"\n            countryTmpl;\n            context: { $implicit: selectedCountry }\n          \"\n        ></ng-container>\n      </ng-container>\n      <div *ngIf=\"!selectedCountry\">\n        <ng-container\n          *ngIf=\"placeholder; else defaultPlaceHolder\"\n        ></ng-container>\n        {{ placeholder }}\n      </div>\n      <bb-icon-ui [name]=\"dropdownIcon || 'toggle-down'\"></bb-icon-ui>\n    </button>\n  </div>\n\n  <div ngbDropdownMenu class=\"dropdown-menu dropdown-menu-right w-100\">\n    <div class=\"bb-block bb-block--md px-3\">\n      <bb-search-box-ui\n        (focus)=\"dropdown.open()\"\n        [formControl]=\"search\"\n        (clear)=\"handleSearch('')\"\n        data-role=\"country-search\"\n        (ngModelChange)=\"handleSearch(search.value)\"\n        [placeholder]=\"searchPlaceholder || 'Search'\"\n        [attr.aria-label]=\"searchPlaceholder || 'Search'\"\n        [showSearch]=\"true\"\n        [showClear]=\"true\"\n        [autocomplete]=\"'off'\"\n        #searchElem\n      >\n      </bb-search-box-ui>\n    </div>\n\n    <bb-payments-sr-search-result-info\n      [totalNumber]=\"filteredCountries?.length || 0\"\n    >\n    </bb-payments-sr-search-result-info>\n\n    <div *ngIf=\"filteredCountries?.length\" class=\"pre-scrollable\">\n      <button\n        *ngFor=\"let country of filteredCountries\"\n        role=\"menuitem\"\n        type=\"button\"\n        class=\"d-sm-flex px-3 py-2 d-flex-row align-items-center btn--unstyled\"\n        (bbKeyboardClick)=\"selectItem(country); dropdown.close()\"\n        ngbDropdownItem\n      >\n        <ng-container\n          *ngTemplateOutlet=\"countryTmpl; context: { $implicit: country }\"\n        ></ng-container>\n      </button>\n    </div>\n    <ng-container *ngIf=\"!filteredCountries?.length && search?.value\">\n      <ng-container *ngTemplateOutlet=\"emptySearch\"></ng-container>\n    </ng-container>\n  </div>\n</div>\n\n<ng-template let-code #countryTmpl>\n  <div class=\"d-flex justify-content-between align-items-center w-100\">\n    <div class=\"bb-stack\">\n      <bb-flag-icon\n        class=\"bb-stack__item\"\n        [countryCode]=\"code\"\n        [flagSize]=\"'md'\"\n      ></bb-flag-icon>\n      <bb-country-name\n        class=\"bb-stack__item bb-ellipsis bb-ellipsis--single-line\"\n        [countryCode]=\"code\"\n      ></bb-country-name>\n      <div class=\"bb-text-support bb-stack__item bb-stack__item--push-right\">\n        {{ code }}\n      </div>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #emptySearch>\n  <div class=\"card-body\">\n    <bb-empty-state-ui\n      data-role=\"no-templates-found\"\n      title=\"No Results Found\"\n      subtitle=\"We can\u2019t find what you\u2019re looking for. Please try a different criteria.\"\n      iconSize=\"xxl\"\n      i18n-subtitle=\"@@bb-select-country-dropdown.empty-state-subtitle\"\n      i18n-title=\"@@bb-select-country-dropdown.empty-state-title\"\n      iconModifier=\"search\"\n      [showIcon]=\"true\"\n    ></bb-empty-state-ui>\n  </div>\n</ng-template>\n\n<ng-template #defaultPlaceHolder>\n  <ng-container i18n=\"@@country-selector-default-placeholder\"\n    >- select a country -</ng-container\n  >\n</ng-template>\n", components: [{ type: i1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i2$1.SearchBoxComponent, selector: "bb-search-box-ui", inputs: ["placeholder", "maxLength", "squareBorder", "typeaheadOptions", "showSearch", "showClear", "searchLabel", "clearLabel", "autocomplete"], outputs: ["submit", "clear", "valueChange"] }, { type: PaymentsSrSearchResultInfoComponent, selector: "bb-payments-sr-search-result-info", inputs: ["totalNumber"] }, { type: FlagIconComponent, selector: "bb-flag-icon", inputs: ["flagSize", "countryCode"] }, { type: CountryNameComponent, selector: "bb-country-name", inputs: ["countryCode"] }, { type: i5.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i6.NgbDropdown, selector: "[ngbDropdown]", inputs: ["open", "placement", "container", "autoClose", "display", "dropdownClass"], outputs: ["openChange"], exportAs: ["ngbDropdown"] }, { type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i7.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i6.NgbDropdownToggle, selector: "[ngbDropdownToggle]" }, { type: i2.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i6.NgbDropdownMenu, selector: "[ngbDropdownMenu]" }, { type: i1$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$1.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i6.NgbDropdownItem, selector: "[ngbDropdownItem]", inputs: ["disabled"] }, { type: i10.KeyboardClickDirective, selector: "[bbKeyboardClick]", outputs: ["bbKeyboardClick"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectCountryDropdownComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-select-country-dropdown',
                    templateUrl: './select-country-dropdown.component.html',
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            multi: true,
                            useExisting: forwardRef((() => SelectCountryDropdownComponent)),
                        },
                    ],
                }]
        }], propDecorators: { countries: [{
                type: Input
            }], selectedCountry: [{
                type: Input
            }], helperText: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], label: [{
                type: Input
            }], searchPlaceholder: [{
                type: Input
            }], dropdownIcon: [{
                type: Input
            }], isClosedPayment: [{
                type: Input
            }], selectCountry: [{
                type: Output
            }] } });

class PaymentTemplateComponent {
    constructor() {
        this.modalOptions = {
            backdrop: 'static',
            keyboard: false,
        };
        /**
         * Saving template data flag.
         * Default value is false.
         */
        this.isSavingTemplate = false;
        /**
         * Close payment template modal event emitter
         */
        this.closeModal = new EventEmitter();
        /**
         * Open payment template modal event emitter
         */
        this.openModal = new EventEmitter();
        /**
         * Submit form event emitter
         */
        this.submitForm = new EventEmitter();
        this.states = ModalState;
        this.isSubmitted = false;
    }
    onOpen() {
        this.openModal.emit();
    }
    onClose() {
        this.closeModal.emit();
        this.isSubmitted = false;
    }
    onSubmit() {
        this.submitForm.emit();
        this.isSubmitted = true;
    }
}
/** @nocollapse */ PaymentTemplateComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentTemplateComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PaymentTemplateComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PaymentTemplateComponent, selector: "bb-payment-template-form", inputs: { modalState: "modalState", paymentTemplateForm: "paymentTemplateForm", isSavingTemplate: "isSavingTemplate" }, outputs: { closeModal: "closeModal", openModal: "openModal", submitForm: "submitForm" }, ngImport: i0, template: "<bb-modal-ui\n  [isOpen]=\"states.Preview === (modalState | async)\"\n  [modalOptions]=\"modalOptions\"\n>\n  <bb-modal-header-ui>\n    <ng-template bbCustomModalHeader>\n      <div class=\"bb-stack\">\n        <bb-icon-ui\n          class=\"bb-text-disabled bb-stack__item bb-stack__item--spacing-sm bb-text-support d-inline-block\"\n          name=\"insert-drive-file\"\n        >\n        </bb-icon-ui>\n        <bb-header-ui\n          class=\"bb-stack__item\"\n          headingType=\"h2\"\n          heading=\"Save as a template\"\n          i18n-heading=\"@@omni-payment-review-template-modal.title\"\n          [attr.data-role]=\"'payment-template-header'\"\n        ></bb-header-ui>\n      </div>\n    </ng-template>\n  </bb-modal-header-ui>\n\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody>\n      <div\n        class=\"bb-block bb-block--lg\"\n        data-role=\"payment-template-modal-text\"\n        i18n=\"@@omni-payment-review-template-modal.description\"\n      >\n        Type a name to the template in order to re-use it and manage it when\n        needed.\n      </div>\n      <form [formGroup]=\"paymentTemplateForm\" class=\"form-group\">\n        <label [for]=\"TemplateName.id\" class=\"bb-label\">\n          <span\n            id=\"name\"\n            i18n=\"@@omni-payment-review-template-modal.template-name.label\"\n            >Name of the template</span\n          >\n        </label>\n        <span\n          class=\"bb-text-support\"\n          i18n=\"\n            @@omni-payment-review-template-modal.template-name.required.label\"\n        >\n          (required)\n        </span>\n        <div class=\"bb-payment-template__form-container\">\n          <bb-input-text-ui\n            #TemplateName\n            [aria-labelledby]=\"'name'\"\n            formControlName=\"templateName\"\n            [maxLength]=\"50\"\n            [showCharCounter]=\"true\"\n            data-role=\"template-name-field\"\n          ></bb-input-text-ui>\n\n          <bb-input-validation-message-ui\n            data-role=\"initiate-payment-template-name-input-error\"\n            role=\"alert\"\n            [showErrors]=\"paymentTemplateForm?.get('templateName')?.invalid\"\n          >\n            <ng-container\n              *ngIf=\"\n                paymentTemplateForm?.get('templateName') as templateNameControl\n              \"\n            >\n              <span\n                data-role=\"required-template-name-error\"\n                i18n=\"\n                  @@omni-payment-review-template-modal.template-name.validation.required-error\"\n                *ngIf=\"\n                  templateNameControl.errors &&\n                  templateNameControl.errors['required'] &&\n                  isSubmitted\n                \"\n              >\n                Template name is required\n              </span>\n            </ng-container>\n          </bb-input-validation-message-ui>\n        </div>\n      </form>\n    </ng-template>\n  </bb-modal-body-ui>\n\n  <bb-modal-footer-ui>\n    <ng-template bbCustomModalFooter>\n      <div class=\"bb-button-bar\">\n        <bb-load-button-ui\n          [isLoading]=\"isSavingTemplate\"\n          color=\"primary\"\n          class=\"bb-button-bar__button\"\n          data-role=\"save-template-button\"\n          (click)=\"onSubmit()\"\n        >\n          <ng-container\n            i18n=\"@@omni-payment-review-template-modal.save-btn.label\"\n          >\n            Save\n          </ng-container>\n        </bb-load-button-ui>\n        <button\n          bbButton\n          color=\"link\"\n          class=\"bb-button-bar__button\"\n          data-role=\"cancel-template-button\"\n          (click)=\"onClose()\"\n        >\n          <ng-container\n            i18n=\"@@omni-payment-review-template-modal.cancel-btn.label\"\n          >\n            Cancel\n          </ng-container>\n        </button>\n      </div>\n    </ng-template>\n  </bb-modal-footer-ui>\n</bb-modal-ui>\n", components: [{ type: i1$3.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i1$3.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i3$2.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i1$3.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: i3.InputTextComponent, selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i4.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i1$3.ModalFooterComponent, selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }, { type: i6$1.LoadButtonComponent, selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }], directives: [{ type: i1$3.CustomModalHeaderDirective, selector: "ng-template[bbCustomModalHeader]" }, { type: i1$3.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i1$1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1$1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$1.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1$3.CustomModalFooterDirective, selector: "ng-template[bbCustomModalFooter]" }, { type: i7.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "async": i2.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentTemplateComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payment-template-form',
                    templateUrl: './create-payment-template-modal.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { modalState: [{
                type: Input
            }], paymentTemplateForm: [{
                type: Input
            }], isSavingTemplate: [{
                type: Input
            }], closeModal: [{
                type: Output
            }], openModal: [{
                type: Output
            }], submitForm: [{
                type: Output
            }] } });

class BreachLimitDetailsModalComponent {
    constructor() {
        /**
         * The flag that controls visibility of the breach limit report.
         * By default is `false`.
         */
        this.isOpen = false;
        /**
         * Event emitted when user clicks on close icon.
         */
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.close = new EventEmitter();
    }
    get breachReportCurrency() {
        var _a, _b, _c;
        return (_c = (_b = (_a = this.error) === null || _a === void 0 ? void 0 : _a.breachReport) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.currency;
    }
    normalizeBreachReportPeriod(breachReportInfo) {
        return breachReportInfo.timeframe
            ? Object.assign(Object.assign({}, breachReportInfo), { timeframe: Object.assign(Object.assign({}, breachReportInfo.timeframe), { period: breachReportInfo.timeframe.period.toUpperCase() }) }) : breachReportInfo;
    }
    flattenBreachReports() {
        if (!this.error || !this.error.breachReport) {
            return [];
        }
        return this.error.breachReport
            .map((report) => report.breachInfo)
            .reduce((prev, current) => prev.concat(...current.map(this.normalizeBreachReportPeriod)), []);
    }
    compareByPeriod(left, right) {
        var _a, _b;
        const leftPeriod = (_a = left.timeframe) === null || _a === void 0 ? void 0 : _a.period;
        const rightPeriod = (_b = right.timeframe) === null || _b === void 0 ? void 0 : _b.period;
        return (Period[leftPeriod] - Period[rightPeriod]);
    }
    get sortedBreaches() {
        const limits = this.flattenBreachReports();
        const transactional = limits.filter((limit, index) => {
            const isTransactional = limit.breachedLimitType === BreachedLimitType.TRANSACTIONAL;
            const hasPeriodicThreshold = limit.breachType === BreachType.THRESHOLD &&
                limit.breachedLimitType === BreachedLimitType.PERIODIC;
            if (isTransactional || hasPeriodicThreshold) {
                limits.splice(index, 1);
            }
            return isTransactional;
        });
        return [...transactional, ...limits.sort(this.compareByPeriod)];
    }
    onClose() {
        this.close.emit();
    }
    print() {
        window.print();
    }
}
/** @nocollapse */ BreachLimitDetailsModalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BreachLimitDetailsModalComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ BreachLimitDetailsModalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: BreachLimitDetailsModalComponent, selector: "bb-breach-limit-details", inputs: { paymentDetails: "paymentDetails", error: "error", isOpen: "isOpen" }, outputs: { close: "close" }, ngImport: i0, template: "<bb-modal-ui [isOpen]=\"isOpen\" (cancel)=\"onClose()\" (confirm)=\"onClose()\">\n  <bb-modal-header-ui role=\"heading\">\n    <ng-template bbCustomModalHeader>\n      <header\n        class=\"bb-stack bb-stack__item--fill\"\n        aria-labelledby=\"headerTitle\"\n      >\n        <bb-icon-ui\n          color=\"danger\"\n          name=\"error-outline\"\n          class=\"bb-stack__item bb-stack__item--spacing-sm\"\n        ></bb-icon-ui>\n\n        <span\n          id=\"headerTitle\"\n          class=\"bb-stack__item highlight text-large\"\n          data-role=\"limit-breach-modal-title\"\n          aria-label=\"Limits breach\"\n          i18n-aria-label=\"@bb-payord-breach-limit-modal-title\"\n        >\n          Limits breach\n        </span>\n        <div class=\"bb-stack__item bb-stack__item--push-right\">\n          <button\n            (click)=\"print()\"\n            type=\"button\"\n            class=\"bb-stack__item btn border-0 btn-circle\"\n          >\n            <!-- ACCESSIBILITY compliance: The style attributes' content is needed for NVDA to read content on hover -->\n            <span\n              class=\"sr-only\"\n              aria-label=\"Print breach limit report\"\n              i18n-aria-label=\"@bb-payord-breach-limit-print-action-aria-label\"\n              style=\"min-width: 10px; min-height: 10px\"\n            >\n              Print breach limit report\n            </span>\n            <bb-icon-ui name=\"print\"></bb-icon-ui>\n          </button>\n          <button\n            (click)=\"onClose()\"\n            type=\"button\"\n            class=\"bb-stack__item btn border-0 btn-circle\"\n          >\n            <span\n              class=\"sr-only\"\n              aria-label=\"Close breach limit report dialog\"\n              i18n-aria-label=\"@bb-payord-breach-limit-close-action-aria-label\"\n              style=\"min-width: 10px; min-height: 10px\"\n            >\n              Close breach limit report dialog\n            </span>\n            <bb-icon-ui name=\"clear\"></bb-icon-ui>\n          </button>\n        </div>\n      </header>\n    </ng-template>\n  </bb-modal-header-ui>\n  <bb-modal-body-ui role=\"main\">\n    <ng-template bbCustomModalBody>\n      <div\n        class=\"bb-block bb-block--lg\"\n        i18n=\"@bb-payord-breach-limit-details-heading\"\n        data-role=\"limit-breach-modal-message\"\n      >\n        Payment could not be submitted due to a limit breach. See details below:\n      </div>\n\n      <div class=\"table-responsive\">\n        <table class=\"table table-hover\">\n          <thead class=\"bb-table__head--highlight\">\n            <tr>\n              <th scope=\"col\" class=\"bb-table--text-start\"></th>\n              <th\n                scope=\"col\"\n                class=\"bb-table--text-end\"\n                data-role=\"breach-currency\"\n              >\n                <ng-container\n                  i18n=\"\n                    @bb-payord-breach-limit-details-breach-currency-table-heading\n                  \"\n                  >Limit</ng-container\n                >\n                <ng-container *ngIf=\"breachReportCurrency\"\n                  >({{ breachReportCurrency }})</ng-container\n                >\n              </th>\n              <th\n                scope=\"col\"\n                class=\"bb-table--text-end\"\n                i18n=\"@bb-payord-breach-limit-details-consumed-table-heading\"\n              >\n                Consumed\n              </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            <tr\n              *ngFor=\"let breachInfo of sortedBreaches\"\n              data-role=\"limit-breach\"\n            >\n              <td class=\"bb-table--text-start\" data-role=\"limit-type\">\n                <span\n                  class=\"highlight\"\n                  *ngIf=\"breachInfo.breachedLimitType === 'TRANSACTIONAL'\"\n                  i18n=\"@bb-payord-breach-limit-details-per-transaction-label\"\n                >\n                  Per transaction\n                </span>\n                <ng-container\n                  *ngIf=\"breachInfo.breachedLimitType !== 'TRANSACTIONAL'\"\n                >\n                  <span\n                    class=\"highlight\"\n                    i18n=\"@bb-payord-breach-limit-details-time-frame\"\n                  >\n                    {breachInfo.timeframe.period, select, DAILY {Daily} WEEKLY\n                    {Weekly} MONTHLY {Monthly} QUARTERLY {Quarterly} YEARLY\n                    {Yearly} other\n                    {{{breachInfo.timeframe.period | titlecase}}}}\n                  </span>\n                  <ng-container *ngIf=\"breachInfo.timeframe.period !== 'DAILY'\">\n                    <div\n                      [ngSwitch]=\"breachInfo.timeframe.period\"\n                      class=\"text-muted\"\n                      data-role=\"period\"\n                    >\n                      <ng-container\n                        *ngSwitchCase=\"'WEEKLY'\"\n                        i18n=\"@@bb-payord-breach-limit-details-timeframe-weekly\"\n                      >\n                        Till\n                        {{ breachInfo.timeframe.endTime | date: 'mediumDate' }}\n                      </ng-container>\n                      <ng-container\n                        *ngSwitchCase=\"'MONTHLY'\"\n                        i18n=\"\n                          @@bb-payord-breach-limit-details-timeframe-monthly\"\n                      >\n                        Till\n                        {{ breachInfo.timeframe.endTime | date: 'mediumDate' }}\n                      </ng-container>\n                      <ng-container\n                        *ngSwitchCase=\"'QUARTERLY'\"\n                        i18n=\"\n                          @@bb-payord-breach-limit-details-timeframe-quarterly\"\n                      >\n                        {{\n                          breachInfo.timeframe.startTime | date: 'mediumDate'\n                        }}\n                        -\n                        {{ breachInfo.timeframe.endTime | date: 'mediumDate' }}\n                      </ng-container>\n                      <ng-container\n                        *ngSwitchCase=\"'YEARLY'\"\n                        i18n=\"@@bb-payord-breach-limit-details-timeframe-yearly\"\n                      >\n                        {{\n                          breachInfo.timeframe.startTime | date: 'mediumDate'\n                        }}\n                        -\n                        {{ breachInfo.timeframe.endTime | date: 'mediumDate' }}\n                      </ng-container>\n                    </div>\n                  </ng-container>\n                </ng-container>\n              </td>\n\n              <td class=\"bb-table--text-end\" data-role=\"limit-amount\">\n                <span class=\"d-md-none bb-text-bold\">\n                  <ng-container\n                    i18n=\"\n                      @bb-payord-breach-limit-details-breach-currency-table-heading.responsive\n                    \"\n                  >\n                    Limit\n                  </ng-container>\n                  <ng-container *ngIf=\"breachReportCurrency\"\n                    >({{ breachReportCurrency }})</ng-container\n                  >&nbsp;\n                </span>\n                <bb-amount-ui\n                  [amount]=\"breachInfo.currentThreshold\"\n                ></bb-amount-ui>\n              </td>\n\n              <td class=\"bb-table--text-end\" data-role=\"limit-consumed\">\n                <span\n                  class=\"d-md-none bb-text-bold\"\n                  i18n=\"\n                    @bb-payord-breach-limit-details-consumed-table-heading.responsive\n                  \"\n                >\n                  Consumed&nbsp;\n                </span>\n                <ng-container\n                  *ngIf=\"breachInfo.breachedLimitType === 'TRANSACTIONAL'\"\n                >\n                  &mdash;\n                </ng-container>\n                <ng-container\n                  *ngIf=\"breachInfo.breachedLimitType !== 'TRANSACTIONAL'\"\n                >\n                  <bb-amount-ui\n                    [amount]=\"breachInfo.currentConsumption\"\n                  ></bb-amount-ui>\n                </ng-container>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n\n      <div\n        class=\"card card-sm card--highlight card--shadowless\"\n        *ngIf=\"paymentDetails\"\n      >\n        <div class=\"card-body\">\n          <div class=\"row\">\n            <div class=\"col-md-6 bb-block bb-block--md\">\n              <div\n                class=\"bb-text-bold\"\n                i18n=\"@@bb-payord-breach-limit-details-payment-debtor-account\"\n              >\n                From\n              </div>\n              <div>\n                <div class=\"break-word\" data-role=\"debit-account-name\">\n                  {{\n                    paymentDetails.initiator?.alias ||\n                      paymentDetails.initiator?.name\n                  }}\n                </div>\n                <div\n                  class=\"bb-text-support bb-subtitle\"\n                  data-role=\"debit-account-number\"\n                >\n                  {{\n                    paymentDetails.initiator?.accountNumber ||\n                      paymentDetails.initiator?.IBAN\n                  }}\n                </div>\n              </div>\n            </div>\n\n            <div class=\"col-md-6 bb-block bb-block--md\">\n              <div\n                class=\"bb-text-bold\"\n                i18n=\"\n                  @@bb-payord-breach-limit-details-payment-counterparty-account\"\n              >\n                To\n              </div>\n              <div>\n                <div class=\"break-word\" data-role=\"credit-account-name\">\n                  {{\n                    paymentDetails.counterparty?.alias ||\n                      paymentDetails.counterparty?.name\n                  }}\n                </div>\n                <div\n                  class=\"bb-text-support bb-subtitle\"\n                  data-role=\"credit-account-number\"\n                >\n                  {{\n                    paymentDetails.counterparty?.accountNumber ||\n                      paymentDetails.counterparty?.IBAN\n                  }}\n                </div>\n              </div>\n            </div>\n\n            <div class=\"col-md-6 bb-block bb-block--md\">\n              <div\n                class=\"bb-text-bold\"\n                i18n=\"@@bb-payord-breach-limit-details-payment-execution-date\"\n              >\n                Execution date\n              </div>\n              <div>\n                {{ paymentDetails.schedule?.startDate | date: 'mediumDate' }}\n              </div>\n            </div>\n\n            <div class=\"col-md-6\">\n              <div\n                class=\"bb-text-bold\"\n                i18n=\"@@bb-payord-breach-limit-details-payment-amount\"\n              >\n                Amount\n              </div>\n              <div class=\"highlight\">\n                <bb-amount-ui\n                  class=\"bb-amount--currency-space\"\n                  data-role=\"total-amount\"\n                  [amount]=\"paymentDetails.remittanceInfo.amountGroup.amount\"\n                  [currency]=\"\n                    paymentDetails.remittanceInfo.amountGroup.currency\n                  \"\n                  [mapCurrency]=\"false\"\n                ></bb-amount-ui>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </ng-template>\n  </bb-modal-body-ui>\n</bb-modal-ui>\n", components: [{ type: i1$3.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i1$3.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i1$3.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: i2$2.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }], directives: [{ type: i1$3.CustomModalHeaderDirective, selector: "ng-template[bbCustomModalHeader]" }, { type: i1$3.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i2.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }], pipes: { "titlecase": i2.TitleCasePipe, "date": i2.DatePipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BreachLimitDetailsModalComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-breach-limit-details',
                    templateUrl: 'breach-limit-details.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { paymentDetails: [{
                type: Input
            }], error: [{
                type: Input
            }], isOpen: [{
                type: Input
            }], close: [{
                type: Output
            }] } });

class PayordCardMenuComponent {
    constructor(config) {
        /**
         * List of tab items.
         * Default is empty list.
         */
        this.items = [];
        /**
         * Initial selected tab item.
         * Default is `0`.
         */
        this.initialSelection = 0;
        /**
         * Select event emitted when a new tab item has been selected.
         */
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.select = new EventEmitter();
        this.activeItem = 0;
        config.container = 'body';
    }
    ngAfterViewInit() {
        if (this.items) {
            this.activeItem = this.items[this.initialSelection]
                ? this.initialSelection
                : 0;
        }
    }
    onSelect(index) {
        this.activeItem = index;
        this.select.emit(this.items[index]);
    }
    trackByName(index, item) {
        return item.name;
    }
}
/** @nocollapse */ PayordCardMenuComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordCardMenuComponent, deps: [{ token: i6.NgbTooltipConfig }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PayordCardMenuComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordCardMenuComponent, selector: "bb-payord-card-menu", inputs: { items: "items", initialSelection: "initialSelection" }, outputs: { select: "select" }, providers: [NgbTooltipConfig], ngImport: i0, template: "<div class=\"bb-card-menu bb-stack manual-batches-type-select overflow-auto\">\n  <div\n    class=\"bb-card-menu__option bb-stack__item manual-batches-type-select__button\"\n    [class.selected]=\"i === activeItem\"\n    role=\"button\"\n    tabindex=\"0\"\n    (bbKeyboardClick)=\"onSelect(i)\"\n    *ngFor=\"let item of items; trackBy: trackByName; let i = index\"\n  >\n    <bb-ellipsis-ui\n      [text]=\"item.name\"\n      tooltipTriggers=\"hover\"\n      class=\"bb-text-bold\"\n    >\n    </bb-ellipsis-ui>\n    <ng-container *ngIf=\"item.description\">\n      <bb-ellipsis-ui\n        [text]=\"item.description\"\n        tooltipTriggers=\"hover\"\n        [lineClamp]=\"2\"\n        class=\"bb-subheader bb-subheader--regular\"\n      ></bb-ellipsis-ui>\n    </ng-container>\n  </div>\n</div>\n", components: [{ type: i1$4.EllipsisComponent, selector: "bb-ellipsis-ui", inputs: ["text", "tooltipTriggers", "lineClamp"] }], directives: [{ type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i10.KeyboardClickDirective, selector: "[bbKeyboardClick]", outputs: ["bbKeyboardClick"] }, { type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordCardMenuComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payord-card-menu',
                    templateUrl: 'card-menu.component.html',
                    providers: [NgbTooltipConfig],
                }]
        }], ctorParameters: function () { return [{ type: i6.NgbTooltipConfig }]; }, propDecorators: { items: [{
                type: Input
            }], initialSelection: [{
                type: Input
            }], select: [{
                type: Output
            }] } });

class SelectPurposeDropdownComponent {
    constructor() {
        this.search = new FormControl();
        this.filteredPurposes = [];
        /**
         * Description length to show tooltip along
         */
        this.longDescription = 150;
        /**
         * Helper text for the component. Defaults to empty string.
         */
        this.helperText = '';
        /**
         * Placeholder text. Defaults to empty string.
         */
        this.placeholder = '';
        /**
         * Label of the component. Defaults to empty string.
         */
        this.label = '';
        /**
         * Placeholder fot search. Defaults to empty string.
         */
        this.searchPlaceholder = '';
        /**
         * Icon for the dropdown. Defaults to `toggle-down`
         */
        this.dropdownIcon = 'toggle-down';
        /**
         * Emits value when a country is selected
         */
        this.selectPurpose = new EventEmitter();
    }
    /**
     * Array of country iso codes
     */
    set purposes(purposes) {
        this._purposes = purposes || [];
        this.setupPurposes();
    }
    getSelectedPurposeFull(purposeCode) {
        return (this._purposes.find((item) => (item === null || item === void 0 ? void 0 : item.code) === purposeCode) || {
            code: purposeCode,
            description: '',
        });
    }
    setupPurposes() {
        this.purposeEntries = this._purposes.map((purpose) => [
            purpose.code,
            purpose.description,
        ]);
        this.filteredPurposes = [...this._purposes];
    }
    selectItem(purpose) {
        this.selectedPurpose = purpose.code;
        this.selectPurpose.emit(purpose.code);
        if (this.search.value) {
            this.search.reset();
        }
    }
    handleSearch(query = '') {
        if (query) {
            this.filteredPurposes = this.purposeEntries.reduce((acc, [code, description]) => {
                if (code.toLocaleLowerCase().indexOf(query.toLocaleLowerCase()) > -1 ||
                    description.toLocaleLowerCase().indexOf(query.toLocaleLowerCase()) >
                        -1) {
                    acc.push({ code, description });
                }
                return acc;
            }, []);
        }
        else {
            this.filteredPurposes = this._purposes;
        }
    }
    onChange() { }
    onTouched() { }
    writeValue() { }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
}
/** @nocollapse */ SelectPurposeDropdownComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectPurposeDropdownComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ SelectPurposeDropdownComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: SelectPurposeDropdownComponent, selector: "bb-select-purpose-dropdown", inputs: { longDescription: "longDescription", purposes: "purposes", isOptional: "isOptional", selectedPurpose: "selectedPurpose", helperText: "helperText", placeholder: "placeholder", label: "label", searchPlaceholder: "searchPlaceholder", dropdownIcon: "dropdownIcon" }, outputs: { selectPurpose: "selectPurpose" }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            multi: true,
            useExisting: forwardRef((() => SelectPurposeDropdownComponent)),
        },
    ], ngImport: i0, template: "<div\n  class=\"bb-dynamic-input bb-select-purpose-dropdown\"\n  ngbDropdown\n  #dropdown=\"ngbDropdown\"\n  display=\"static\"\n>\n  <div class=\"d-inline-block bb-label\" (click)=\"btn.focus()\" *ngIf=\"label\">\n    {{ label }}\n  </div>\n  <span\n    class=\"bb-dynamic-input__helper-text bb-text-support\"\n    *ngIf=\"isOptional && helperText\"\n    [id]=\"searchElem?.id + '__helper-text'\"\n    [textContent]=\"helperText\"\n  >\n  </span>\n  <div>\n    <button\n      #btn\n      bbButton\n      ngbDropdownToggle\n      color=\"unstyled\"\n      (blur)=\"onTouched()\"\n      data-role=\"open-purpose-dropdown-list-button\"\n      [attr.aria-label]=\"label\"\n      class=\"bb-select-purpose-dropdown__toggle form-control w-100 pr-5 d-flex justify-content-between bb-text-support\"\n    >\n      <ng-container *ngIf=\"selectedPurpose\">\n        <ng-container\n          *ngTemplateOutlet=\"\n            selectedPurposeTmpl;\n            context: { $implicit: getSelectedPurposeFull(selectedPurpose) }\n          \"\n        ></ng-container>\n      </ng-container>\n      <ng-container *ngIf=\"!selectedPurpose\">\n        <ng-container\n          *ngIf=\"placeholder; else defaultPlaceHolder\"\n        ></ng-container>\n        {{ placeholder }}\n      </ng-container>\n      <bb-icon-ui [name]=\"dropdownIcon || 'toggle-down'\"></bb-icon-ui>\n    </button>\n  </div>\n\n  <div ngbDropdownMenu class=\"dropdown-menu dropdown-menu-right w-100\">\n    <div class=\"bb-block bb-block--md px-3\">\n      <bb-search-box-ui\n        (focus)=\"dropdown.open()\"\n        [formControl]=\"search\"\n        (clear)=\"handleSearch('')\"\n        data-role=\"purpose-search\"\n        (ngModelChange)=\"handleSearch(search.value)\"\n        [placeholder]=\"searchPlaceholder || 'Search'\"\n        [showSearch]=\"true\"\n        [showClear]=\"true\"\n        [autocomplete]=\"'off'\"\n        #searchElem\n      >\n      </bb-search-box-ui>\n    </div>\n\n    <bb-payments-sr-search-result-info [totalNumber]=\"filteredPurposes?.length\">\n    </bb-payments-sr-search-result-info>\n\n    <div\n      *ngIf=\"filteredPurposes?.length\"\n      class=\"pre-scrollable\"\n      data-role=\"list-pop-values\"\n    >\n      <button\n        *ngFor=\"let purpose of filteredPurposes\"\n        role=\"menuitem\"\n        type=\"button\"\n        class=\"d-sm-flex px-3 py-2 d-flex-row align-items-center btn--unstyled\"\n        (bbKeyboardClick)=\"selectItem(purpose)\"\n        ngbDropdownItem\n      >\n        <ng-container\n          *ngTemplateOutlet=\"\n            purpose?.description?.length < longDescription\n              ? purposeTmpl\n              : purposeTmplLong;\n            context: { $implicit: purpose }\n          \"\n        ></ng-container>\n      </button>\n    </div>\n    <ng-container *ngIf=\"!filteredPurposes?.length && search?.value\">\n      <ng-container *ngTemplateOutlet=\"emptySearch\"></ng-container>\n    </ng-container>\n    <ng-container *ngIf=\"!filteredPurposes?.length && !search?.value\">\n      <ng-container *ngTemplateOutlet=\"empty\"></ng-container>\n    </ng-container>\n  </div>\n</div>\n\n<ng-template let-purpose #purposeTmplLong>\n  <div\n    class=\"d-flex justify-content-between align-items-center w-100\"\n    data-role=\"long-pop-desc\"\n  >\n    <div class=\"bb-stack\">\n      <div class=\"bb-stack__item bb-stack__item--align-top\">\n        {{ purpose.code }}\n      </div>\n      <div\n        class=\"bb-stack__item bb-text-support bb-product-selector__item-content\"\n        [bbTooltip]=\"tipContent\"\n        placement=\"right\"\n        [triggers]=\"'hover'\"\n        [container]=\"'body'\"\n      >\n        <bb-ellipsis-ui [lineClamp]=\"5\">{{\n          purpose.description\n        }}</bb-ellipsis-ui>\n      </div>\n    </div>\n  </div>\n  <ng-template #tipContent\n    ><div class=\"bb-text-align-left\">\n      {{ purpose.description }}\n    </div></ng-template\n  >\n</ng-template>\n\n<ng-template let-purpose #purposeTmpl>\n  <div\n    class=\"d-flex justify-content-between align-items-center w-100\"\n    data-role=\"short-pop-desc\"\n  >\n    <div class=\"bb-stack\">\n      <div class=\"bb-stack__item bb-stack__item--align-top\">\n        {{ purpose.code }}\n      </div>\n      <div\n        class=\"bb-stack__item bb-text-support bb-product-selector__item-content\"\n      >\n        {{ purpose.description }}\n      </div>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template let-purpose #selectedPurposeTmpl>\n  <div class=\"d-flex justify-content-between align-items-center w-100\">\n    <div class=\"bb-stack\">\n      <div class=\"bb-stack__item bb-stack__item--align-top\">\n        {{ purpose.code }}\n      </div>\n      <div\n        class=\"bb-stack__item bb-text-support bb-ellipsis bb-ellipsis--single-line\"\n        [bbTooltip]=\"tipContent\"\n        placement=\"bottom\"\n        [triggers]=\"'hover'\"\n        data-role=\"pop-description\"\n      >\n        {{ purpose.description }}\n      </div>\n    </div>\n  </div>\n  <ng-template #tipContent\n    ><div class=\"bb-text-align-left\">\n      {{ purpose.description }}\n    </div></ng-template\n  >\n</ng-template>\n\n<ng-template #emptySearch>\n  <div class=\"card-body\">\n    <bb-empty-state-ui\n      data-role=\"no-templates-found\"\n      title=\"No search results\"\n      i18n-title=\"@@bb-select-purpose-dropdown.empty-state-title\"\n      [showIcon]=\"false\"\n    ></bb-empty-state-ui>\n  </div>\n</ng-template>\n\n<ng-template #empty>\n  <div class=\"card-body\">\n    <bb-empty-state-ui\n      data-role=\"no-templates-provided\"\n      title=\"No Purposes Provided\"\n      i18n-title=\"@@bb-select-purpose-dropdown.empty-title\"\n    ></bb-empty-state-ui>\n  </div>\n</ng-template>\n\n<ng-template #defaultPlaceHolder>\n  <ng-container i18n=\"@@purpose-selector-default-placeholder\"\n    >- select a purpose -</ng-container\n  >\n</ng-template>\n", components: [{ type: i1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i2$1.SearchBoxComponent, selector: "bb-search-box-ui", inputs: ["placeholder", "maxLength", "squareBorder", "typeaheadOptions", "showSearch", "showClear", "searchLabel", "clearLabel", "autocomplete"], outputs: ["submit", "clear", "valueChange"] }, { type: PaymentsSrSearchResultInfoComponent, selector: "bb-payments-sr-search-result-info", inputs: ["totalNumber"] }, { type: i1$4.EllipsisComponent, selector: "bb-ellipsis-ui", inputs: ["text", "tooltipTriggers", "lineClamp"] }, { type: i5.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i6.NgbDropdown, selector: "[ngbDropdown]", inputs: ["open", "placement", "container", "autoClose", "display", "dropdownClass"], outputs: ["openChange"], exportAs: ["ngbDropdown"] }, { type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i7.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i6.NgbDropdownToggle, selector: "[ngbDropdownToggle]" }, { type: i2.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i6.NgbDropdownMenu, selector: "[ngbDropdownMenu]" }, { type: i1$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$1.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i6.NgbDropdownItem, selector: "[ngbDropdownItem]", inputs: ["disabled"] }, { type: i10.KeyboardClickDirective, selector: "[bbKeyboardClick]", outputs: ["bbKeyboardClick"] }, { type: i9.TooltipDirective, selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectPurposeDropdownComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-select-purpose-dropdown',
                    templateUrl: './select-purpose-dropdown.component.html',
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            multi: true,
                            useExisting: forwardRef((() => SelectPurposeDropdownComponent)),
                        },
                    ],
                }]
        }], propDecorators: { longDescription: [{
                type: Input
            }], purposes: [{
                type: Input
            }], isOptional: [{
                type: Input
            }], selectedPurpose: [{
                type: Input
            }], helperText: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], label: [{
                type: Input
            }], searchPlaceholder: [{
                type: Input
            }], dropdownIcon: [{
                type: Input
            }], selectPurpose: [{
                type: Output
            }] } });

class RoutableModalService {
    constructor(router) {
        this.router = router;
    }
    openModal(modalName) {
        if (modalName) {
            this.router.navigate([], {
                queryParams: { [RoutableModalParamName]: modalName },
                queryParamsHandling: 'merge',
            });
        }
    }
    closeModal() {
        this.router.navigate([], {
            queryParams: { [RoutableModalParamName]: null },
            queryParamsHandling: 'merge',
        });
    }
}
/** @nocollapse */ RoutableModalService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RoutableModalService, deps: [{ token: i1$5.Router }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ RoutableModalService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RoutableModalService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RoutableModalService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1$5.Router }]; } });

class RoutableModalComponent {
    constructor(route, modalService, eventBus) {
        this.route = route;
        this.modalService = modalService;
        this.eventBus = eventBus;
        /**
         * Flag to show close button
         */
        this.closeButton = false;
        /**
         * Modal window name (url friendly, without spaces)
         */
        this.modalWindowName = '';
        /**
         * Flag to show modal header
         */
        this.showHeader = true;
        /**
         * Modal Title
         */
        this.modalTitle = '';
        /**
         * Modal Title Icon
         */
        this.modalTitleIcon = '';
        /**
         * Modal heading type (h1-h6)
         */
        this.modalHeadingType = 'h2';
        /**
         * Event emitted when the modal visibility has changed
         */
        this.visibilityChange = new EventEmitter();
        this.isModalOpen$ = new BehaviorSubject(false);
        this.defaultModalOptions = {
            backdrop: 'static',
            keyboard: false,
            size: 'lg',
            animation: false,
            scrollable: false,
            windowClass: '',
        };
    }
    ngOnInit() {
        this.unsubscribeEvent = this.eventBus.subscribe(this.modalWindowName, () => {
            this.modalService.openModal(this.modalWindowName);
        });
        this.subscription = this.route.queryParams.subscribe((params) => {
            if (params[RoutableModalParamName] === this.modalWindowName &&
                !this.isModalOpen$.value) {
                this.openModal();
            }
            else if (this.isModalOpen$.value) {
                this.closeModal();
            }
        });
    }
    ngOnDestroy() {
        var _a, _b;
        (_a = this.subscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
        (_b = this.unsubscribeEvent) === null || _b === void 0 ? void 0 : _b.call(this);
    }
    openModal() {
        this.isModalOpen$.next(true);
        this.visibilityChange.emit(true);
    }
    closeModal() {
        this.isModalOpen$.next(false);
        this.visibilityChange.emit(false);
        this.modalService.closeModal();
    }
}
/** @nocollapse */ RoutableModalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RoutableModalComponent, deps: [{ token: i1$5.ActivatedRoute }, { token: RoutableModalService }, { token: PUBSUB }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ RoutableModalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: RoutableModalComponent, selector: "bb-routable-modal", inputs: { modalOptions: "modalOptions", closeButton: "closeButton", modalWindowName: "modalWindowName", showHeader: "showHeader", modalTitle: "modalTitle", modalTitleIcon: "modalTitleIcon", modalHeadingType: "modalHeadingType" }, outputs: { visibilityChange: "visibilityChange" }, ngImport: i0, template: `
    <bb-modal-ui
      class="bb-modal-container"
      [isOpen]="isModalOpen$ | async"
      [modalOptions]="modalOptions || defaultModalOptions"
      (dismissCallback)="closeModal()"
    >
      <bb-modal-header-ui *ngIf="showHeader">
        <ng-template bbCustomModalHeader>
          <div class="bb-stack bb-stack--density-xs">
            <div class="bb-stack__item" *ngIf="modalTitleIcon">
              <bb-icon-ui
                [name]="modalTitleIcon"
                class="bb-text-disabled bb-modal-container__header-icon"
              >
              </bb-icon-ui>
            </div>

            <div class="bb-stack__item" *ngIf="modalTitle">
              <bb-header-ui
                class="bb-modal-container__header-title"
                [headingType]="modalHeadingType"
                [heading]="modalTitle"
              ></bb-header-ui>
            </div>

            <div
              class="bb-stack__item bb-stack__item--push-right"
              *ngIf="closeButton"
            >
              <button
                bbButton
                class="bb-modal-container__close-btn bb-text-support"
                circle="true"
                buttonSize="sm"
                color="unstyled"
                (click)="closeModal()"
                aria-label="Close modal dialog"
                i18n-aria-label="
                  Close template detail dialog@@modal-container.close-btn"
              >
                <bb-icon-ui color="muted" name="clear"></bb-icon-ui>
              </button>
            </div>
          </div>
        </ng-template>
      </bb-modal-header-ui>
      <bb-modal-body-ui>
        <ng-template bbCustomModalBody>
          <ng-content></ng-content>
        </ng-template>
      </bb-modal-body-ui>
    </bb-modal-ui>
  `, isInline: true, components: [{ type: i1$3.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i1$3.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i3$2.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i1$3.ModalBodyComponent, selector: "bb-modal-body-ui" }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1$3.CustomModalHeaderDirective, selector: "ng-template[bbCustomModalHeader]" }, { type: i7.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i1$3.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }], pipes: { "async": i2.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RoutableModalComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-routable-modal',
                    template: `
    <bb-modal-ui
      class="bb-modal-container"
      [isOpen]="isModalOpen$ | async"
      [modalOptions]="modalOptions || defaultModalOptions"
      (dismissCallback)="closeModal()"
    >
      <bb-modal-header-ui *ngIf="showHeader">
        <ng-template bbCustomModalHeader>
          <div class="bb-stack bb-stack--density-xs">
            <div class="bb-stack__item" *ngIf="modalTitleIcon">
              <bb-icon-ui
                [name]="modalTitleIcon"
                class="bb-text-disabled bb-modal-container__header-icon"
              >
              </bb-icon-ui>
            </div>

            <div class="bb-stack__item" *ngIf="modalTitle">
              <bb-header-ui
                class="bb-modal-container__header-title"
                [headingType]="modalHeadingType"
                [heading]="modalTitle"
              ></bb-header-ui>
            </div>

            <div
              class="bb-stack__item bb-stack__item--push-right"
              *ngIf="closeButton"
            >
              <button
                bbButton
                class="bb-modal-container__close-btn bb-text-support"
                circle="true"
                buttonSize="sm"
                color="unstyled"
                (click)="closeModal()"
                aria-label="Close modal dialog"
                i18n-aria-label="
                  Close template detail dialog@@modal-container.close-btn"
              >
                <bb-icon-ui color="muted" name="clear"></bb-icon-ui>
              </button>
            </div>
          </div>
        </ng-template>
      </bb-modal-header-ui>
      <bb-modal-body-ui>
        <ng-template bbCustomModalBody>
          <ng-content></ng-content>
        </ng-template>
      </bb-modal-body-ui>
    </bb-modal-ui>
  `,
                }]
        }], ctorParameters: function () { return [{ type: i1$5.ActivatedRoute }, { type: RoutableModalService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [PUBSUB]
                }] }]; }, propDecorators: { modalOptions: [{
                type: Input
            }], closeButton: [{
                type: Input
            }], modalWindowName: [{
                type: Input
            }], showHeader: [{
                type: Input
            }], modalTitle: [{
                type: Input
            }], modalTitleIcon: [{
                type: Input
            }], modalHeadingType: [{
                type: Input
            }], visibilityChange: [{
                type: Output
            }] } });

const ModalContainerParamName = 'modalOpened';
class HorizontalListSelectorComponent {
    constructor() {
        /**
         * List items
         */
        this.options = [];
        /**
         * Flag to denote if the list is preselected. Defaults to true.
         */
        this.preselect = true;
        /**
         * Event emitted on select of an item
         */
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.select = new EventEmitter();
    }
    ngOnInit() {
        var _a;
        if (this.preselect && !this.activeItem) {
            this.select.emit((_a = this.options[0]) === null || _a === void 0 ? void 0 : _a.value);
        }
    }
    onSelect(value) {
        this.select.emit(value);
    }
}
/** @nocollapse */ HorizontalListSelectorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: HorizontalListSelectorComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ HorizontalListSelectorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: HorizontalListSelectorComponent, selector: "bb-horizontal-list-selector", inputs: { options: "options", activeItem: "activeItem", preselect: "preselect" }, outputs: { select: "select" }, ngImport: i0, template: `
    <div class="bb-horizontal-list-selector" role="tablist">
      <ng-container *ngFor="let option of options">
        <button
          class="bb-horizontal-list-selector__item"
          bbButton
          color="unstyled"
          role="tab"
          [attr.aria-selected]="activeItem === option.value"
          [attr.aria-controls]="option.value"
          [ngClass]="{
            'bb-horizontal-list-selector__item--active':
              activeItem === option.value
          }"
          (bbKeyboardClick)="onSelect(option.value)"
        >
          <div #elem>
            {{ option.label }}
          </div>
          <div
            class="bb-subheader bb-subheader--regular text-wrap"
            *ngIf="option.description"
            [style.width.px]="elem.offsetWidth"
          >
            <bb-ellipsis-ui
              [text]="option.description"
              tooltipTriggers="hover"
              [lineClamp]="2"
              class="bb-subheader bb-subheader--regular"
            ></bb-ellipsis-ui>
          </div>
        </button>
      </ng-container>
    </div>
  `, isInline: true, components: [{ type: i1$4.EllipsisComponent, selector: "bb-ellipsis-ui", inputs: ["text", "tooltipTriggers", "lineClamp"] }], directives: [{ type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i7.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i10.KeyboardClickDirective, selector: "[bbKeyboardClick]", outputs: ["bbKeyboardClick"] }, { type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: HorizontalListSelectorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-horizontal-list-selector',
                    template: `
    <div class="bb-horizontal-list-selector" role="tablist">
      <ng-container *ngFor="let option of options">
        <button
          class="bb-horizontal-list-selector__item"
          bbButton
          color="unstyled"
          role="tab"
          [attr.aria-selected]="activeItem === option.value"
          [attr.aria-controls]="option.value"
          [ngClass]="{
            'bb-horizontal-list-selector__item--active':
              activeItem === option.value
          }"
          (bbKeyboardClick)="onSelect(option.value)"
        >
          <div #elem>
            {{ option.label }}
          </div>
          <div
            class="bb-subheader bb-subheader--regular text-wrap"
            *ngIf="option.description"
            [style.width.px]="elem.offsetWidth"
          >
            <bb-ellipsis-ui
              [text]="option.description"
              tooltipTriggers="hover"
              [lineClamp]="2"
              class="bb-subheader bb-subheader--regular"
            ></bb-ellipsis-ui>
          </div>
        </button>
      </ng-container>
    </div>
  `,
                }]
        }], propDecorators: { options: [{
                type: Input
            }], activeItem: [{
                type: Input
            }], preselect: [{
                type: Input
            }], select: [{
                type: Output
            }] } });

class PaymentTemplateSelectorComponent {
    constructor(deprecationsService) {
        this.deprecationsService = deprecationsService;
        /**
         * Flag indicates if the list is loading.
         * Default value is `false`.
         */
        this.loading = false;
        /**
         * Name of the template selector.
         * Default value is ``
         */
        this.templateName = '';
        /**
         * Emits the values for the payment form.
         */
        this.setValues = new EventEmitter();
        /**
         * Event emmiter for loading payment templates.
         */
        this.loadMoreTemplates = new EventEmitter();
        /**
         * Event emmiter for search payment templates.
         */
        this.searchTemplates = new EventEmitter();
        /**
         * Event emmiter for clear the payment form.
         */
        this.clear = new EventEmitter();
        this.searchTerm = new BehaviorSubject('');
    }
    /**
     * Term value on searching a template
     */
    set searchValue(term) {
        this.onSearchPaymentTemplates(term);
        this.searchModel = term;
    }
    loadMore(page) {
        this.loadMoreTemplates.emit(page);
    }
    onSetValues(acc) {
        this.setValues.emit(acc);
    }
    onSearchPaymentTemplates(value) {
        this.searchTemplates.emit(value);
        this.searchTerm.next(value);
    }
    onClearForm(name) {
        this.clear.emit(name);
        this.templateName = name;
    }
    ngOnInit() {
        if (this.templatesList) {
            this.deprecationsService.logDeprecatedFeature(`The templatesList property has been deprecated since 3.9.1 and will be removed in 3.10.0.`);
        }
        this.items = this.items.pipe(tap((templateItems) => {
            var _a;
            return (this.templatesCount =
                (_a = this.templatesCount) !== null && _a !== void 0 ? _a : templateItems.totalCount);
        }));
    }
}
/** @nocollapse */ PaymentTemplateSelectorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentTemplateSelectorComponent, deps: [{ token: i1$6.DeprecationsService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PaymentTemplateSelectorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PaymentTemplateSelectorComponent, selector: "bb-payment-template-selector", inputs: { items: "items", templatesList: "templatesList", paymentTemplateSearch: "paymentTemplateSearch", loading: "loading", templateName: "templateName", searchValue: "searchValue" }, outputs: { setValues: "setValues", loadMoreTemplates: "loadMoreTemplates", searchTemplates: "searchTemplates", clear: "clear" }, ngImport: i0, template: "<ng-container *ngIf=\"items | async as paymentTemplates\">\n  <div *ngIf=\"templatesCount\" class=\"bb-block bb-block--lg\">\n    <bb-dropdown-menu-ui\n      position=\"bottom-left\"\n      buttonSize=\"sm\"\n      btnColor=\"secondary\"\n      container=\"body\"\n      (click)=\"$event.stopPropagation()\"\n      (keyUp.enter)=\"$event.stopPropagation()\"\n      data-role=\"payment-template-selector-dropdown\"\n      ariaLabel=\"Payment template DropDown button\"\n      i18n-ariaLabel=\"@@omni-payment-template-selector.dropdown\"\n    >\n      <ng-template bbDropdownLabel>\n        <span\n          class=\"bb-payment-template-selector__placeholder bb-ellipsis bb-ellipsis--single-line\"\n        >\n          <ng-container *ngIf=\"templateName\">{{ templateName }}</ng-container>\n          <ng-container\n            *ngIf=\"!templateName\"\n            i18n=\"@@omni-payment-template-selector.label\"\n            >Select a template\n          </ng-container>\n        </span>\n        <bb-icon-ui name=\"caret-down\" size=\"md\"></bb-icon-ui>\n      </ng-template>\n      <ng-template bbDropdownMenuItem>\n        <div class=\"bb-payment-template-selector__list-container\">\n          <div class=\"bb-payment-template-selector__search-box-container\">\n            <div\n              class=\"bb-payment-template-selector__search-box\"\n              [ngClass]=\"{ 'bb-block--sm': (searchTerm | async) }\"\n            >\n              <bb-search-box-ui\n                data-role=\"search-template\"\n                #searchBox\n                aria-label=\"Search template name\"\n                i18n-aria-label=\"@@template-selector-search-template-label\"\n                [showSearch]=\"true\"\n                [showClear]=\"true\"\n                [ngModel]=\"searchModel\"\n                placeholder=\"Search template name\"\n                i18n-placeholder=\"\n                  @@template-selector-search-template-placeholder\"\n                (valueChange)=\"onSearchPaymentTemplates($event)\"\n                (clear)=\"onSearchPaymentTemplates('')\"\n              >\n              </bb-search-box-ui>\n            </div>\n            <ng-container *ngIf=\"(searchTerm | async) && !loading\">\n              <bb-payments-sr-search-result-info\n                [totalNumber]=\"paymentTemplates.totalCount\"\n              >\n              </bb-payments-sr-search-result-info>\n              <div class=\"bb-block bb-block--xs\"></div>\n              <div\n                *ngIf=\"paymentTemplates?.items?.length\"\n                data-role=\"results-found\"\n                i18n=\"@@omni-payment-template-selector.results-found\"\n              >\n                {paymentTemplates?.items?.length, plural, =1 {1 result found}\n                other\n                {{{paymentTemplates?.items?.length}} results found}}\n              </div>\n            </ng-container>\n          </div>\n          <div class=\"bb-infinite-scroll-container\">\n            <bb-infinite-scroll-ui\n              class=\"bb-infinite-scroll\"\n              [disableScrollEnd]=\"\n                loading ||\n                paymentTemplates?.items?.length === paymentTemplates?.totalCount\n              \"\n              [offset]=\"5\"\n              (scrollEnd)=\"loadMore(1)\"\n            >\n              <ng-container\n                *ngIf=\"paymentTemplates?.items?.length; else emptyState\"\n              >\n                <div class=\"bb-list\" *ngIf=\"!loading\">\n                  <div\n                    role=\"menuitem\"\n                    *ngFor=\"let temp of paymentTemplates?.items\"\n                    class=\"dropdown-item btn-link-dark bb-payment-template-selector__item\"\n                    (click)=\"onSetValues(temp)\"\n                    (keydown.enter)=\"onSetValues(temp)\"\n                  >\n                    <div\n                      class=\"bb-ellipsis bb-ellipsis--single-line bb-text-bold\"\n                      data-role=\"template-name\"\n                    >\n                      {{ temp.name }}\n                    </div>\n                    <ng-container\n                      *ngIf=\"\n                        temp.details\n                          .transferTransactionInformation as transactionInfo;\n                        else noBeneficiaryInfo\n                      \"\n                    >\n                      <div\n                        *ngIf=\"\n                          transactionInfo?.counterpartyAccount?.identification\n                            ?.identification ||\n                            transactionInfo?.counterparty?.name;\n                          else noBeneficiaryInfo\n                        \"\n                      >\n                        <div\n                          class=\"bb-subtitle bb-ellipsis bb-ellipsis--single-line\"\n                          data-role=\"template-counterparty-name\"\n                        >\n                          To: {{ transactionInfo.counterparty.name }}\n                        </div>\n                        <div\n                          class=\"bb-subtitle bb-text-support bb-ellipsis bb-ellipsis--single-line\"\n                          data-role=\"template-account\"\n                        >\n                          {{\n                            transactionInfo.counterpartyAccount.identification\n                              .identification\n                          }}\n                        </div>\n                        <div\n                          *ngIf=\"\n                            transactionInfo?.instructedAmount?.amount as amount\n                          \"\n                          class=\"bb-stack bb-subtitle\"\n                        >\n                          <bb-amount-ui\n                            class=\"bb-stack__item bb-stack__item--push-right\"\n                            [currency]=\"\n                              transactionInfo.instructedAmount.currencyCode\n                            \"\n                            [amount]=\"amount\"\n                            [mapCurrency]=\"false\"\n                          ></bb-amount-ui>\n                        </div>\n                      </div>\n                    </ng-container>\n                    <ng-template #noBeneficiaryInfo>\n                      <div\n                        data-role=\"no-beneficiary-info\"\n                        class=\"bb-subtitle bb-text-support\"\n                        i18n=\"\n                          @@omni-payment-template-selector.no-beneficiary-info\"\n                      >\n                        No beneficiary info\n                      </div>\n                    </ng-template>\n                  </div>\n                </div>\n                <p *ngIf=\"loading\">\n                  <bb-loading-indicator-ui></bb-loading-indicator-ui>\n                </p>\n              </ng-container>\n              <ng-template #emptyState>\n                <div class=\"card-body\">\n                  <bb-empty-state-ui\n                    data-role=\"no-templates-found\"\n                    title=\"No Results Found\"\n                    subtitle=\"We can\u2019t find what you\u2019re looking for. Please try a different criteria.\"\n                    iconSize=\"xxl\"\n                    i18n-subtitle=\"\n                      @@omni-payment-template-selector.empty-state-subtitle\"\n                    i18n-title=\"\n                      @@omni-payment-template-selector.empty-state-title\"\n                    iconModifier=\"search\"\n                    [showIcon]=\"true\"\n                  ></bb-empty-state-ui>\n                </div>\n              </ng-template>\n            </bb-infinite-scroll-ui>\n          </div>\n        </div>\n      </ng-template>\n    </bb-dropdown-menu-ui>\n  </div>\n</ng-container>\n", components: [{ type: i2$3.DropdownMenuComponent, selector: "bb-dropdown-menu-ui", inputs: ["label", "disabled", "options", "icon", "iconSize", "iconColor", "btnColor", "btnCircle", "optionLabelKey", "fullWidth", "autoClose", "container", "position", "ariaLabel", "dropDownMenuRole", "dropDownMenuId", "buttonSize", "dropDownButtonLabel", "visibleElementDependingOnViewport", "role"], outputs: ["select"] }, { type: i1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i2$1.SearchBoxComponent, selector: "bb-search-box-ui", inputs: ["placeholder", "maxLength", "squareBorder", "typeaheadOptions", "showSearch", "showClear", "searchLabel", "clearLabel", "autocomplete"], outputs: ["submit", "clear", "valueChange"] }, { type: PaymentsSrSearchResultInfoComponent, selector: "bb-payments-sr-search-result-info", inputs: ["totalNumber"] }, { type: i6$2.InfiniteScrollComponent, selector: "bb-infinite-scroll-ui", inputs: ["offset", "debounce", "disableScrollEnd"], outputs: ["scrollEnd"] }, { type: i2$2.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: i8.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i5.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2$3.DropdownLabelDirective, selector: "ng-template[bbDropdownLabel]" }, { type: i2$3.DropdownMenuItemDirective, selector: "ng-template[bbDropdownMenuItem]" }, { type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i1$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "async": i2.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentTemplateSelectorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payment-template-selector',
                    templateUrl: 'payment-template-selector.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1$6.DeprecationsService }]; }, propDecorators: { items: [{
                type: Input
            }], templatesList: [{
                type: Input
            }], paymentTemplateSearch: [{
                type: Input
            }], loading: [{
                type: Input
            }], templateName: [{
                type: Input
            }], searchValue: [{
                type: Input
            }], setValues: [{
                type: Output
            }], loadMoreTemplates: [{
                type: Output
            }], searchTemplates: [{
                type: Output
            }], clear: [{
                type: Output
            }] } });

class BeneficiaryAccountComponent {
    /**
     * Own account item
     */
    set account(item) {
        this._account = item;
        if (item) {
            this.accountNumber = item.BBAN || item.number || '';
            this.balance = item.availableBalance || item.bookedBalance || 0;
        }
    }
    get account() {
        return this._account;
    }
}
/** @nocollapse */ BeneficiaryAccountComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BeneficiaryAccountComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ BeneficiaryAccountComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: BeneficiaryAccountComponent, selector: "bb-beneficiary-account", inputs: { account: "account" }, ngImport: i0, template: "<div class=\"bb-stack\">\n  <div class=\"d-none d-md-block bb-stack__item\">\n    <span\n      class=\"sr-only\"\n      i18n=\"@@beneficiary.selector.ui.group.account.own.account\"\n      >Own Account</span\n    >\n    <bb-icon-ui\n      size=\"xl\"\n      color=\"primary\"\n      class=\"bb-stack\"\n      name=\"current-accounts\"\n    >\n    </bb-icon-ui>\n  </div>\n\n  <div class=\"bb-stack__item\">\n    <span\n      class=\"sr-only\"\n      i18n=\"@@beneficiary.selector.ui.account.name.label\"\n      id=\"account_accountNameLabel\"\n    >\n      Account name:\n    </span>\n    <div class=\"bb-text-bold\" data-role=\"beneficiary-account-name-list-item\">\n      {{ account?.name }}\n    </div>\n\n    <span\n      class=\"sr-only\"\n      i18n=\"@@beneficiary.selector.ui.account.number.label\"\n      id=\"account_accountNumberLabel\"\n    >\n      Account number:\n    </span>\n    <div class=\"text-dark\" data-role=\"beneficiary-account-number-list-item\">\n      {{ accountNumber }}\n    </div>\n  </div>\n\n  <ng-container>\n    <div\n      class=\"bb-stack__item bb-stack__item--push-right bb-stack__break--sm-down\"\n    >\n      <span\n        class=\"sr-only\"\n        i18n=\"@@beneficiary.selector.ui.balance.label\"\n        id=\"account_accountBalanceLabel\"\n      >\n        Account balance:\n      </span>\n\n      <bb-amount-ui\n        class=\"bb-text-bold\"\n        [amount]=\"balance\"\n        [mapCurrency]=\"false\"\n        [currency]=\"account?.currency\"\n        [bbHighlight]=\"false\"\n        [attr.data-role]=\"'beneficiary-account-amount-list-item'\"\n      ></bb-amount-ui>\n    </div>\n  </ng-container>\n</div>\n", components: [{ type: i1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i2$2.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }], directives: [{ type: i3$3.HighlightDirective, selector: "[bbHighlight]", inputs: ["amount", "bbHighlight", "negativeClass", "positiveClass"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BeneficiaryAccountComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-beneficiary-account',
                    templateUrl: 'beneficiary-account.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { account: [{
                type: Input
            }] } });

class BeneficiaryContactComponent {
    /**
     * Contact item
     */
    set contact(item) {
        this._contact = item;
        if (item === null || item === void 0 ? void 0 : item.accounts[0]) {
            this.accountNumber =
                item.accounts[0].accountNumber || item.accounts[0].IBAN || '';
        }
    }
    get contact() {
        return this._contact;
    }
}
/** @nocollapse */ BeneficiaryContactComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BeneficiaryContactComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ BeneficiaryContactComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: BeneficiaryContactComponent, selector: "bb-beneficiary-contact", inputs: { contact: "contact" }, ngImport: i0, template: "<div class=\"bb-stack\">\n  <div class=\"d-none d-md-block bb-stack__item\">\n    <span class=\"sr-only\" i18n=\"@@beneficiary.selector.ui.group.contacts\"\n      >Contact</span\n    >\n    <bb-icon-ui size=\"xl\" color=\"primary\" class=\"bb-stack\" name=\"contacts\">\n    </bb-icon-ui>\n  </div>\n\n  <div class=\"text-left\">\n    <span\n      class=\"sr-only\"\n      i18n=\"@@beneficiary.selector.ui.contact.account.name.label\"\n      id=\"contact_accountNameLabel\"\n    >\n      Account name:\n    </span>\n    <div class=\"bb-text-bold\" data-role=\"beneficiary-account-name-list-item\">\n      {{ contact?.name }}\n      <ng-container *ngIf=\"contact?.accountName\">\n        - {{contact?.accountName}}</ng-container\n      >\n    </div>\n\n    <span\n      class=\"sr-only\"\n      i18n=\"@@beneficiary.selector.ui.contact.account.number.label\"\n      id=\"contact_accountNumberLabel\"\n    >\n      ; Account number:\n    </span>\n    <div\n      class=\"text-dark\"\n      *ngIf=\"accountNumber\"\n      data-role=\"beneficiary-account-number-list-item\"\n    >\n      {{ accountNumber }}\n    </div>\n  </div>\n</div>\n", components: [{ type: i1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BeneficiaryContactComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-beneficiary-contact',
                    templateUrl: 'beneficiary-contact.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { contact: [{
                type: Input
            }] } });

class KeyboardNavigationDirectiveBase {
}
class KeyboardNavigationItemDirective {
    constructor(navigator, elementRef) {
        this.navigator = navigator;
        this.elementRef = elementRef;
    }
}
/** @nocollapse */ KeyboardNavigationItemDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: KeyboardNavigationItemDirective, deps: [{ token: forwardRef(() => KeyboardNavigationDirective) }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ KeyboardNavigationItemDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: KeyboardNavigationItemDirective, selector: "[bbKeyboardNavigationItem]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: KeyboardNavigationItemDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbKeyboardNavigationItem]',
                }]
        }], ctorParameters: function () { return [{ type: KeyboardNavigationDirectiveBase, decorators: [{
                    type: Inject,
                    args: [forwardRef(() => KeyboardNavigationDirective)]
                }] }, { type: i0.ElementRef }]; } });
class KeyboardNavigationAnchorDirective {
    constructor(navigator, elementRef) {
        this.navigator = navigator;
        this.elementRef = elementRef;
        this.nativeElement = this.elementRef.nativeElement;
    }
}
/** @nocollapse */ KeyboardNavigationAnchorDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: KeyboardNavigationAnchorDirective, deps: [{ token: forwardRef(() => KeyboardNavigationDirective) }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ KeyboardNavigationAnchorDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: KeyboardNavigationAnchorDirective, selector: "[bbKeyboardNavigationAnchor]", host: { listeners: { "keydown.ArrowLeft": "navigator.onKeyDown($event)", "keydown.ArrowRight": "navigator.onKeyDown($event)", "keydown.ArrowDown": "navigator.onKeyDown($event)", "keydown.Tab": "navigator.onKeyDown($event)" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: KeyboardNavigationAnchorDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbKeyboardNavigationAnchor]',
                    // eslint-disable-next-line @angular-eslint/no-host-metadata-property
                    host: {
                        '(keydown.ArrowLeft)': 'navigator.onKeyDown($event)',
                        '(keydown.ArrowRight)': 'navigator.onKeyDown($event)',
                        '(keydown.ArrowDown)': 'navigator.onKeyDown($event)',
                        '(keydown.Tab)': 'navigator.onKeyDown($event)',
                    },
                }]
        }], ctorParameters: function () { return [{ type: KeyboardNavigationDirectiveBase, decorators: [{
                    type: Inject,
                    args: [forwardRef(() => KeyboardNavigationDirective)]
                }] }, { type: i0.ElementRef }]; } });
class KeyboardNavigationListDirective {
    constructor(navigator, elementRef) {
        this.navigator = navigator;
        this.elementRef = elementRef;
        this.nativeElement = this.elementRef.nativeElement;
    }
}
/** @nocollapse */ KeyboardNavigationListDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: KeyboardNavigationListDirective, deps: [{ token: forwardRef(() => KeyboardNavigationDirective) }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ KeyboardNavigationListDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: KeyboardNavigationListDirective, selector: "[bbKeyboardNavigationList]", host: { listeners: { "keydown.ArrowUp": "navigator.onKeyDown($event)", "keydown.ArrowDown": "navigator.onKeyDown($event)", "keydown.Shift": "navigator.onKeyDown($event)", "keydown.Tab": "navigator.onKeyDown($event)", "keydown.Shift.Tab": "navigator.onKeyDown($event)", "keydown.Space": "navigator.onKeyDown($event)", "keydown.Enter": "navigator.onKeyDown($event)" } }, queries: [{ propertyName: "items", predicate: KeyboardNavigationItemDirective, descendants: true }], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: KeyboardNavigationListDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbKeyboardNavigationList]',
                    // eslint-disable-next-line @angular-eslint/no-host-metadata-property
                    host: {
                        '(keydown.ArrowUp)': 'navigator.onKeyDown($event)',
                        '(keydown.ArrowDown)': 'navigator.onKeyDown($event)',
                        '(keydown.Shift)': 'navigator.onKeyDown($event)',
                        '(keydown.Tab)': 'navigator.onKeyDown($event)',
                        '(keydown.Shift.Tab)': 'navigator.onKeyDown($event)',
                        '(keydown.Space)': 'navigator.onKeyDown($event)',
                        '(keydown.Enter)': 'navigator.onKeyDown($event)',
                    },
                }]
        }], ctorParameters: function () { return [{ type: KeyboardNavigationDirectiveBase, decorators: [{
                    type: Inject,
                    args: [forwardRef(() => KeyboardNavigationDirective)]
                }] }, { type: i0.ElementRef }]; }, propDecorators: { items: [{
                type: ContentChildren,
                args: [KeyboardNavigationItemDirective, { descendants: true }]
            }] } });
class KeyboardNavigationDirective {
    constructor(document) {
        this.document = document;
        this._document = this.document;
    }
    static resetItem(position, itemElements) {
        if (position === -1) {
            return;
        }
        itemElements[position].removeAttribute('tabindex');
    }
    static resetTabItem(position, itemElements) {
        itemElements[position].setAttribute('tabindex', '-1');
    }
    static setItemActive(position, itemElements) {
        itemElements[position].setAttribute('tabindex', '0');
        itemElements[position].focus();
    }
    static setPositionUp(position) {
        return Math.max(position - 1, 0);
    }
    static setPositionDown(position, itemsLength) {
        return Math.min(position + 1, itemsLength - 1);
    }
    isEventFromAnchor($event) {
        var _a;
        return !!((_a = this.anchorList) === null || _a === void 0 ? void 0 : _a.find((el) => el.nativeElement.contains($event.target)));
    }
    getListElements() {
        var _a;
        return (_a = this.list) === null || _a === void 0 ? void 0 : _a.items.map((item) => item.elementRef.nativeElement);
    }
    getListAnchor() {
        var _a;
        return (_a = this.anchorList) === null || _a === void 0 ? void 0 : _a.map((item) => item.elementRef.nativeElement);
    }
    onKeyDown(event) {
        const code = event.code;
        const itemElements = this.getListElements();
        const anchorElements = this.getListAnchor();
        const isEventFromAnchor = this.isEventFromAnchor(event);
        const horizontalNav = new Set(['ArrowRight', 'ArrowLeft']);
        const selectedEvents = new Set(['Space', 'Enter']);
        let itemPosition = -1;
        let anchorPosition = 0;
        let itemElement = null;
        if (code === 'ArrowDown' || code === 'Tab') {
            if (isEventFromAnchor && (itemElements === null || itemElements === void 0 ? void 0 : itemElements.length)) {
                KeyboardNavigationDirective.setItemActive(0, itemElements);
                event.preventDefault();
            }
            if (code === 'Tab') {
                return;
            }
        }
        if (!isEventFromAnchor && (itemElements === null || itemElements === void 0 ? void 0 : itemElements.length)) {
            itemElements.forEach((item, index) => {
                if (item.contains(event.target)) {
                    itemElement = item;
                }
                if (item === this._document.activeElement) {
                    itemPosition = index;
                }
            });
        }
        if (selectedEvents.has(code) && !isEventFromAnchor && itemElement) {
            event.preventDefault();
            itemElement.click();
            return;
        }
        if (isEventFromAnchor &&
            anchorElements.length > 1 &&
            horizontalNav.has(code)) {
            anchorElements.forEach((item, index) => {
                if (item === this._document.activeElement) {
                    anchorPosition = index;
                }
            });
            switch (code) {
                case 'ArrowRight':
                    KeyboardNavigationDirective.resetTabItem(anchorPosition, anchorElements);
                    anchorPosition = KeyboardNavigationDirective.setPositionDown(anchorPosition, anchorElements.length);
                    break;
                case 'ArrowLeft':
                    KeyboardNavigationDirective.resetTabItem(anchorPosition, anchorElements);
                    anchorPosition =
                        KeyboardNavigationDirective.setPositionUp(anchorPosition);
                    break;
            }
            KeyboardNavigationDirective.setItemActive(anchorPosition, anchorElements);
            return;
        }
        if (!isEventFromAnchor && itemElement) {
            switch (code) {
                case 'ArrowDown':
                    KeyboardNavigationDirective.resetItem(itemPosition, itemElements);
                    itemPosition = KeyboardNavigationDirective.setPositionDown(itemPosition, itemElements.length);
                    break;
                case 'ArrowUp':
                    KeyboardNavigationDirective.resetItem(itemPosition, itemElements);
                    itemPosition =
                        KeyboardNavigationDirective.setPositionUp(itemPosition);
                    break;
            }
            KeyboardNavigationDirective.setItemActive(itemPosition, itemElements);
            event.preventDefault();
        }
    }
}
/** @nocollapse */ KeyboardNavigationDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: KeyboardNavigationDirective, deps: [{ token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ KeyboardNavigationDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: KeyboardNavigationDirective, selector: "[bbKeyboardNavigation]", queries: [{ propertyName: "list", first: true, predicate: KeyboardNavigationListDirective, descendants: true }, { propertyName: "anchorList", predicate: KeyboardNavigationAnchorDirective, descendants: true }], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: KeyboardNavigationDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbKeyboardNavigation]',
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; }, propDecorators: { list: [{
                type: ContentChild,
                args: [KeyboardNavigationListDirective, { static: false }]
            }], anchorList: [{
                type: ContentChildren,
                args: [KeyboardNavigationAnchorDirective, { descendants: true }]
            }] } });

const defaultBeneficiaryCdkScrollConfig = {
    itemSize: 64,
    minBufferPx: 340,
    maxBufferPx: 400,
};

class BeneficiaryScrollStrategyService extends FixedSizeVirtualScrollStrategy {
    constructor() {
        const { itemSize, minBufferPx, maxBufferPx } = defaultBeneficiaryCdkScrollConfig;
        super(itemSize, minBufferPx, maxBufferPx);
    }
}

class BeneficiaryScrollItemDirective {
}
/** @nocollapse */ BeneficiaryScrollItemDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BeneficiaryScrollItemDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ BeneficiaryScrollItemDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: BeneficiaryScrollItemDirective, selector: "[bbBeneficiaryScrollItem]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BeneficiaryScrollItemDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbBeneficiaryScrollItem]',
                }]
        }] });
function factoryScroll() {
    return new BeneficiaryScrollStrategyService();
}
class BeneficiaryScrollDirective {
    constructor(viewport, scrollStrategy, ngZone) {
        this.viewport = viewport;
        this.scrollStrategy = scrollStrategy;
        this.ngZone = ngZone;
        this.destroy$ = new Subject();
        /**
         * Trigger fetching more items
         */
        this.loadMore = new EventEmitter();
        this.viewport.scrolledIndexChange
            .pipe(takeUntil(this.destroy$))
            .subscribe(() => {
            const dataLength = this.viewport.getDataLength();
            const { end } = this.viewport.getRenderedRange();
            if (dataLength &&
                end === dataLength &&
                dataLength !== this.bbBeneficiaryScrollTotalCount) {
                // CdkVirtualScrollViewport runs all events outside zone,
                // to detect changes we need to emit load more event inside zone.
                this.ngZone.run(() => Promise.resolve().then(() => {
                    this.loadMore.emit();
                }));
            }
        });
    }
    ngAfterViewInit() {
        var _a, _b, _c;
        const { minBufferPx, maxBufferPx } = defaultBeneficiaryCdkScrollConfig;
        const listItemSize = (_c = (_b = (_a = this.listItems) === null || _a === void 0 ? void 0 : _a.toArray()[0]) === null || _b === void 0 ? void 0 : _b.nativeElement) === null || _c === void 0 ? void 0 : _c.clientHeight;
        if (listItemSize) {
            this.scrollStrategy.updateItemAndBufferSize(listItemSize, minBufferPx, maxBufferPx);
        }
    }
    ngOnDestroy() {
        this.destroy$.next();
    }
}
/** @nocollapse */ BeneficiaryScrollDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BeneficiaryScrollDirective, deps: [{ token: i1$7.CdkVirtualScrollViewport, self: true }, { token: VIRTUAL_SCROLL_STRATEGY }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ BeneficiaryScrollDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: BeneficiaryScrollDirective, selector: "[bbBeneficiaryScroll]", inputs: { bbBeneficiaryScrollTotalCount: "bbBeneficiaryScrollTotalCount" }, outputs: { loadMore: "bbBeneficiaryScroll" }, providers: [
        {
            provide: VIRTUAL_SCROLL_STRATEGY,
            useFactory: factoryScroll,
        },
    ], queries: [{ propertyName: "listItems", predicate: BeneficiaryScrollItemDirective, descendants: true, read: ElementRef }], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BeneficiaryScrollDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbBeneficiaryScroll]',
                    providers: [
                        {
                            provide: VIRTUAL_SCROLL_STRATEGY,
                            useFactory: factoryScroll,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i1$7.CdkVirtualScrollViewport, decorators: [{
                    type: Self
                }] }, { type: BeneficiaryScrollStrategyService, decorators: [{
                    type: Inject,
                    args: [VIRTUAL_SCROLL_STRATEGY]
                }] }, { type: i0.NgZone }]; }, propDecorators: { listItems: [{
                type: ContentChildren,
                args: [BeneficiaryScrollItemDirective, {
                        descendants: true,
                        read: ElementRef,
                    }]
            }], bbBeneficiaryScrollTotalCount: [{
                type: Input
            }], loadMore: [{
                type: Output,
                args: ['bbBeneficiaryScroll']
            }] } });

class BeneficiaryTabsComponent {
    constructor() {
        this.tabsId = `beneficiaryTabs${BeneficiaryTabsComponent._id++}`;
        this.contactsListId = `beneficiaryContactsList${BeneficiaryTabsComponent._id++}`;
        this.accountsListId = `beneficiaryAccountsList${BeneficiaryTabsComponent._id++}`;
        /**
         * Total count of accounts
         */
        this.totalAccounts = 0;
        /**
         * Total count of contacts
         */
        this.totalContacts = 0;
        /**
         * Selected account event emitter
         */
        this.selectedAccount = new EventEmitter();
        /**
         * Selected contact event emitter
         */
        this.selectedContact = new EventEmitter();
        /**
         * Trigger fetching more beneficiary items
         */
        this.fetchMoreItems = new EventEmitter();
        /**
         * Manual edit event emitter
         */
        this.manualEdit = new EventEmitter();
        /**
         * Search state, has truthy value if has search query
         */
        this.searching = new EventEmitter();
        /**
         * Dropdown status
         */
        this.isDropdownOpen = false;
        /** Flag which determines if we can enter data manually
         * Default value is `true`
         */
        this.canEditManually = true;
        this.listingState = ListState;
        this.beneficiaryList = BeneficiaryList;
    }
    onLoadMore() {
        this.fetchMoreItems.emit(this.activeTab);
    }
    ngOnInit() {
        this.tabsConfig = this.tabsConfig || defaultBeneficiaryTabsConfig;
        this.activeTab = this.tabsConfig[0];
    }
    showTabs() {
        return (this.isDropdownOpen &&
            Object.values(this.listState || {}).some((state) => state !== ListState.NO_RESULT) &&
            !this.isNoTabsConfigured());
    }
    isNoTabsConfigured() {
        return this.tabsConfig.length === 0;
    }
    selectAccount(account) {
        this.selectedAccount.emit(account);
    }
    selectContact(contact) {
        this.selectedContact.emit(contact);
    }
    setActiveTab(event, tabName) {
        this.activeTab = tabName;
    }
    emitManualDetails() {
        this.manualEdit.emit(true);
    }
    onRangeChange() {
        if (this.activeTab &&
            this.listState[this.activeTab] === this.listingState.LIST) {
            this.onLoadMore();
        }
    }
    refreshList() {
        this.onLoadMore();
    }
    trackById(_index, item) {
        return item.id;
    }
}
BeneficiaryTabsComponent._id = 0;
/** @nocollapse */ BeneficiaryTabsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BeneficiaryTabsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ BeneficiaryTabsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: BeneficiaryTabsComponent, selector: "bb-beneficiary-tabs", inputs: { accounts: "accounts", contacts: "contacts", totalAccounts: "totalAccounts", totalContacts: "totalContacts", listState: "listState", tabsConfig: "tabsConfig", isDropdownOpen: "isDropdownOpen", canEditManually: "canEditManually" }, outputs: { selectedAccount: "selectedAccount", selectedContact: "selectedContact", fetchMoreItems: "fetchMoreItems", manualEdit: "manualEdit", searching: "searching" }, ngImport: i0, template: "<div bbKeyboardNavigation role=\"tablist\" [id]=\"tabsId\">\n  <div\n    *ngIf=\"showTabs()\"\n    role=\"tablist\"\n    aria-label=\"Beneficiary selector tabs\"\n    class=\"nav nav-tabs\"\n  >\n    <ng-container *ngFor=\"let tab of tabsConfig\">\n      <ng-container *ngIf=\"tab === beneficiaryList.CONTACTS\">\n        <button\n          bbButton\n          color=\"unstyled\"\n          role=\"tab\"\n          class=\"nav-item nav-link\"\n          aria-controls=\"contacts-tab\"\n          data-role=\"contacts-tab-item\"\n          aria-haspopup=\"listbox\"\n          [attr.aria-owns]=\"contactsListId\"\n          [attr.aria-selected]=\"activeTab === beneficiaryList.CONTACTS\"\n          [ngClass]=\"{'active': activeTab === beneficiaryList.CONTACTS}\"\n          (bbKeyboardClick)=\"setActiveTab($event, beneficiaryList.CONTACTS)\"\n          bbKeyboardNavigationAnchor\n        >\n          <ng-container\n            i18n=\"Label|Contacts tab label@@beneficiary.selector.ui.tabs.contacts.label\"\n          >\n            Contacts\n          </ng-container>\n          <span class=\"text-dark\" *ngIf=\"totalContacts\"\n            >({{totalContacts}})</span\n          >\n        </button>\n      </ng-container>\n\n      <ng-container *ngIf=\"tab === beneficiaryList.ACCOUNTS\">\n        <button\n          bbButton\n          tabindex=\"-1\"\n          color=\"unstyled\"\n          role=\"tab\"\n          class=\"nav-item nav-link\"\n          aria-controls=\"accounts-tab\"\n          data-role=\"accounts-tab-item\"\n          [attr.aria-owns]=\"accountsListId\"\n          [attr.aria-selected]=\"activeTab === beneficiaryList.ACCOUNTS\"\n          [ngClass]=\"{'active': activeTab === beneficiaryList.ACCOUNTS}\"\n          (bbKeyboardClick)=\"setActiveTab($event, beneficiaryList.ACCOUNTS)\"\n          bbKeyboardNavigationAnchor\n        >\n          <ng-container\n            i18n=\"Label|Own accounts tab label@@beneficiary.selector.ui.tabs.own-accounts.label\"\n          >\n            Own Accounts\n          </ng-container>\n          <span class=\"text-dark\" *ngIf=\"totalAccounts\">\n            ({{totalAccounts}})</span\n          >\n        </button>\n      </ng-container>\n    </ng-container>\n  </div>\n\n  <ng-container *ngIf=\"isNoTabsConfigured()\">\n    <ng-container\n      *ngTemplateOutlet=\"enterAccountDetailsButton; context:{icon: 'add'}\"\n    ></ng-container>\n  </ng-container>\n\n  <ng-container *ngIf=\"isDropdownOpen\">\n    <ng-container [ngSwitch]=\"activeTab\">\n      <div id=\"contacts-tab\" *ngSwitchCase=\"beneficiaryList.CONTACTS\">\n        <bb-payments-sr-search-result-info [totalNumber]=\"contacts?.length\">\n          <span\n            i18n=\"contacts search result label|label for screen reader@@beneficiary.selector.ui.tabs.contacts.screenReaderResultsLabel\"\n          >\n            Contacts tab:\n          </span>\n        </bb-payments-sr-search-result-info>\n\n        <ng-container [ngSwitch]=\"listState?.contacts\">\n          <ng-container *ngSwitchDefault>\n            <cdk-virtual-scroll-viewport\n              tabindex=\"-1\"\n              role=\"tabpanel\"\n              bbKeyboardNavigationList\n              [id]=\"contactsListId\"\n              (bbBeneficiaryScroll)=\"onRangeChange()\"\n              [bbBeneficiaryScrollTotalCount]=\"totalContacts\"\n              class=\"bb-beneficiary-selector-ui__scroll-container\"\n            >\n              <div\n                bbKeyboardNavigationItem\n                role=\"option\"\n                aria-selected=\"false\"\n                (click)=\"emitManualDetails()\"\n              >\n                <ng-container\n                  *ngTemplateOutlet=\"enterAccountDetailsButton; context:{icon: 'edit'}\"\n                >\n                </ng-container>\n              </div>\n\n              <ng-container\n                *cdkVirtualFor=\"let contact of contacts; trackBy: trackById\"\n              >\n                <bb-beneficiary-contact\n                  bbBeneficiaryScrollItem\n                  bbKeyboardNavigationItem\n                  role=\"option\"\n                  class=\"bb-beneficiary-selector-ui__list-item dropdown-item\"\n                  (click)=\"selectContact(contact)\"\n                  [contact]=\"contact\"\n                ></bb-beneficiary-contact>\n              </ng-container>\n\n              <ng-container\n                *ngIf=\"listState?.contacts === listingState.FULL_LIST\"\n              >\n                <ng-container *ngTemplateOutlet=\"completeList\"></ng-container>\n              </ng-container>\n\n              <ng-container\n                *ngIf=\"listState?.contacts === listingState.FETCHING_FAILURE\"\n              >\n                <ng-container *ngTemplateOutlet=\"failToLoadMore\"></ng-container>\n              </ng-container>\n\n              <ng-container\n                *ngIf=\"listState?.contacts === listingState.FETCHING\"\n              >\n                <bb-loading-indicator-ui\n                  loaderSize=\"sm\"\n                ></bb-loading-indicator-ui>\n              </ng-container>\n            </cdk-virtual-scroll-viewport>\n          </ng-container>\n\n          <ng-container *ngSwitchCase=\"listingState.ERROR\">\n            <bb-empty-state-ui\n              title=\"Contacts unavailable\"\n              i18n-title=\"@@beneficiary.selector.ui.tabs.contacts.error-state.unavailable.title\"\n              class=\"bb-state-container\"\n              subtitle=\"Unable to load list of contacts. Try to reload the page or contact the support.\"\n              i18n-subtitle=\"@@beneficiary.selector.ui.tabs.contacts.error-state.unavailable.message\"\n              iconSize=\"xxl\"\n              iconModifier=\"info\"\n            ></bb-empty-state-ui>\n          </ng-container>\n\n          <ng-container *ngSwitchCase=\"listingState.EMPTY\">\n            <ng-container\n              *ngTemplateOutlet=\"emptyListContactsTemplate\"\n            ></ng-container>\n          </ng-container>\n\n          <ng-container *ngSwitchCase=\"listingState.NO_RESULT\">\n            <ng-container\n              *ngTemplateOutlet=\"emptyMatchingResults\"\n            ></ng-container>\n          </ng-container>\n\n          <ng-container *ngSwitchCase=\"listingState.LOADING\">\n            <ng-container *ngTemplateOutlet=\"loadingTemplate\"></ng-container>\n          </ng-container>\n        </ng-container>\n      </div>\n\n      <div id=\"accounts-tab\" *ngSwitchCase=\"beneficiaryList.ACCOUNTS\">\n        <bb-payments-sr-search-result-info [totalNumber]=\"accounts?.length\">\n          <span\n            i18n=\"accounts search result label|label for screen reader@@beneficiary.selector.ui.tabs.account.screenReaderResultsLabel\"\n            >Accounts tab:</span\n          >\n        </bb-payments-sr-search-result-info>\n\n        <ng-container [ngSwitch]=\"listState?.accounts\">\n          <ng-container *ngSwitchDefault>\n            <cdk-virtual-scroll-viewport\n              bbKeyboardNavigationList\n              tabindex=\"-1\"\n              role=\"tabpanel\"\n              [id]=\"accountsListId\"\n              (bbBeneficiaryScroll)=\"onRangeChange()\"\n              [bbBeneficiaryScrollTotalCount]=\"totalAccounts\"\n              class=\"bb-beneficiary-selector-ui__scroll-container\"\n            >\n              <div\n                bbKeyboardNavigationItem\n                role=\"option\"\n                (click)=\"emitManualDetails()\"\n              >\n                <ng-container\n                  *ngTemplateOutlet=\"enterAccountDetailsButton; context:{icon: 'edit'}\"\n                >\n                </ng-container>\n              </div>\n\n              <ng-container\n                *cdkVirtualFor=\"let account of accounts; trackBy: trackById\"\n              >\n                <bb-beneficiary-account\n                  bbBeneficiaryScrollItem\n                  bbKeyboardNavigationItem\n                  role=\"option\"\n                  class=\"bb-beneficiary-selector-ui__list-item dropdown-item\"\n                  [account]=\"account\"\n                  (click)=\"selectAccount(account)\"\n                ></bb-beneficiary-account>\n              </ng-container>\n\n              <ng-container\n                *ngIf=\"listState?.accounts === listingState.FULL_LIST\"\n              >\n                <ng-container *ngTemplateOutlet=\"completeList\"></ng-container>\n              </ng-container>\n\n              <ng-container\n                *ngIf=\"listState?.accounts === listingState.FETCHING_FAILURE\"\n              >\n                <ng-container *ngTemplateOutlet=\"failToLoadMore\"></ng-container>\n              </ng-container>\n\n              <ng-container\n                *ngIf=\"listState?.accounts === listingState.FETCHING\"\n              >\n                <bb-loading-indicator-ui\n                  loaderSize=\"sm\"\n                ></bb-loading-indicator-ui>\n              </ng-container>\n            </cdk-virtual-scroll-viewport>\n          </ng-container>\n\n          <ng-container *ngSwitchCase=\"listingState.ERROR\">\n            <bb-empty-state-ui\n              title=\"Accounts unavailable\"\n              i18n-title=\"@@beneficiary.selector.ui.tabs.accounts.error-state.unavailable.title\"\n              class=\"bb-state-container\"\n              subtitle=\"Unable to load list of accounts. Try to reload the page or contact the support.\"\n              i18n-subtitle=\"@@beneficiary.selector.ui.tabs.accounts.error-state.unavailable.message\"\n              iconSize=\"xxl\"\n              iconModifier=\"info\"\n            ></bb-empty-state-ui>\n          </ng-container>\n\n          <ng-container *ngSwitchCase=\"listingState.EMPTY\">\n            <ng-container\n              *ngTemplateOutlet=\"emptyListAccountsTemplate\"\n            ></ng-container>\n          </ng-container>\n\n          <ng-container *ngSwitchCase=\"listingState.NO_RESULT\">\n            <ng-container\n              *ngTemplateOutlet=\"emptyMatchingResults\"\n            ></ng-container>\n          </ng-container>\n\n          <ng-container *ngSwitchCase=\"listingState.LOADING\">\n            <ng-container *ngTemplateOutlet=\"loadingTemplate\"></ng-container>\n          </ng-container>\n        </ng-container>\n      </div>\n    </ng-container>\n  </ng-container>\n</div>\n\n<!-- Empty lists -->\n<ng-template #emptyListAccountsTemplate>\n  <bb-empty-state-ui\n    data-role=\"accounts-empty-state\"\n    iconSize=\"xxl\"\n    class=\"bb-state-container\"\n    iconModifier=\"account\"\n    title=\"No accounts\"\n    subtitle=\"There are no accounts to display.\"\n    i18n-title=\"Label|Nothing found in accounts title@@beneficiary.selector.ui.tabs.accounts.nothing-found.label\"\n    i18n-subtitle=\"Label|Nothing found in accounts subtitle@@beneficiary.selector.ui.tabs.accounts.nothing-found.subtitle\"\n  ></bb-empty-state-ui>\n</ng-template>\n\n<ng-template #emptyListContactsTemplate>\n  <bb-empty-state-ui\n    data-role=\"contacts-empty-state\"\n    iconSize=\"xxl\"\n    class=\"bb-state-container\"\n    iconModifier=\"contacts\"\n    title=\"No contacts\"\n    subtitle=\"Go to Contact Manager to create contact that you often transfer money to.\"\n    i18n-title=\"Label|Nothing found in contacts title@@beneficiary.selector.ui.tabs.contacts.nothing-found.label\"\n    i18n-subtitle=\"Label|Nothing found in contacts subtitle@@beneficiary.selector.ui.tabs.contacts.nothing-found.subtitle\"\n  ></bb-empty-state-ui>\n</ng-template>\n\n<ng-template #loadingTemplate>\n  <div class=\"bb-state-container\">\n    <bb-loading-indicator-ui loaderSize=\"md\"></bb-loading-indicator-ui>\n  </div>\n</ng-template>\n\n<ng-template #enterAccountDetailsButton let-icon=\"icon\">\n  <div\n    *ngIf=\"canEditManually\"\n    data-role=\"enter-data-manually\"\n    class=\"bb-beneficiary-selector-ui__enter-details dropdown-item\"\n  >\n    <div class=\"bb-create-beneficiary-account-menuitem\">\n      <div class=\"bb-stack\">\n        <ng-container\n          *ngTemplateOutlet=\"enterAccountDetails; context: {type: icon}\"\n        ></ng-container>\n      </div>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #enterAccountDetails let-type=\"type\">\n  <bb-icon-ui name=\"{{ type }}\" size=\"l\" class=\"bb-stack__item\"></bb-icon-ui>\n  <span\n    class=\"bb-stack__item\"\n    i18n=\"@@beneficiary.selector.ui.list.enter-details-manually.button\"\n  >\n    Enter details manually\n  </span>\n</ng-template>\n\n<ng-template #emptyMatchingResults>\n  <div class=\"bb-state-container\">\n    <bb-empty-state-ui\n      [showIcon]=\"false\"\n      class=\"d-block bb-block bb-block--md\"\n      title=\"No suggestions found\"\n      aria-label=\"No suggestions found\"\n      i18n-aria-label=\"Label|No suggestions found@@beneficiary.selector.ui.list.nothing-found.label\"\n    ></bb-empty-state-ui>\n\n    <div *ngIf=\"canEditManually\" class=\"bb-state-container__footer\">\n      <button\n        bbButton\n        type=\"button\"\n        buttonSize=\"md\"\n        color=\"link-text\"\n        class=\"bb-beneficiary-selector-ui__enter-details\"\n        data-role=\"enter-data-manually\"\n        (bbKeyboardClick)=\"emitManualDetails()\"\n      >\n        <ng-container\n          *ngTemplateOutlet=\"enterAccountDetails; context: {type: 'add'}\"\n        ></ng-container>\n      </button>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #completeList>\n  <div\n    data-role=\"all-items-loaded\"\n    class=\"bb-create-beneficiary-account-menuitem bb-stack bb-stack--center bb-text-support\"\n    i18n=\"@@beneficiary-selector-ui.loaded-all-items\"\n  >\n    All items are loaded.\n  </div>\n</ng-template>\n\n<ng-template #failToLoadMore>\n  <button\n    type=\"button\"\n    role=\"menuitem\"\n    data-role=\"fail-to-load-more-try-again\"\n    (click)=\"refreshList()\"\n    class=\"dropdow-item bb-stack bb-stack--center bb-text-danger dropdown-item\"\n  >\n    <bb-icon-ui\n      color=\"danger\"\n      name=\"error-outline\"\n      class=\"bb-stack__item bb-stack__item--spacing-sm\"\n    ></bb-icon-ui>\n\n    <span class=\"bb-stack__item\" i18n=\"@@beneficiary-selector-ui.fail-to-fetch\">\n      Loading failed. Click here to try again.\n    </span>\n  </button>\n</ng-template>\n", components: [{ type: PaymentsSrSearchResultInfoComponent, selector: "bb-payments-sr-search-result-info", inputs: ["totalNumber"] }, { type: i1$7.CdkVirtualScrollViewport, selector: "cdk-virtual-scroll-viewport", inputs: ["orientation", "appendOnly"], outputs: ["scrolledIndexChange"] }, { type: BeneficiaryContactComponent, selector: "bb-beneficiary-contact", inputs: ["contact"] }, { type: i8.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i5.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }, { type: BeneficiaryAccountComponent, selector: "bb-beneficiary-account", inputs: ["account"] }, { type: i1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: KeyboardNavigationDirective, selector: "[bbKeyboardNavigation]" }, { type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i7.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: KeyboardNavigationAnchorDirective, selector: "[bbKeyboardNavigationAnchor]" }, { type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i10.KeyboardClickDirective, selector: "[bbKeyboardClick]", outputs: ["bbKeyboardClick"] }, { type: i2.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i2.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i2.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i2.NgSwitchDefault, selector: "[ngSwitchDefault]" }, { type: KeyboardNavigationListDirective, selector: "[bbKeyboardNavigationList]" }, { type: BeneficiaryScrollDirective, selector: "[bbBeneficiaryScroll]", inputs: ["bbBeneficiaryScrollTotalCount"], outputs: ["bbBeneficiaryScroll"] }, { type: KeyboardNavigationItemDirective, selector: "[bbKeyboardNavigationItem]" }, { type: i1$7.CdkVirtualForOf, selector: "[cdkVirtualFor][cdkVirtualForOf]", inputs: ["cdkVirtualForOf", "cdkVirtualForTrackBy", "cdkVirtualForTemplate", "cdkVirtualForTemplateCacheSize"] }, { type: BeneficiaryScrollItemDirective, selector: "[bbBeneficiaryScrollItem]" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BeneficiaryTabsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-beneficiary-tabs',
                    templateUrl: 'beneficiary-tabs.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { accounts: [{
                type: Input
            }], contacts: [{
                type: Input
            }], totalAccounts: [{
                type: Input
            }], totalContacts: [{
                type: Input
            }], selectedAccount: [{
                type: Output
            }], selectedContact: [{
                type: Output
            }], fetchMoreItems: [{
                type: Output
            }], manualEdit: [{
                type: Output
            }], searching: [{
                type: Output
            }], listState: [{
                type: Input
            }], tabsConfig: [{
                type: Input
            }], isDropdownOpen: [{
                type: Input
            }], canEditManually: [{
                type: Input
            }] } });

class BeneficiarySelectorUiComponent {
    constructor() {
        this.state = {
            contacts: ListState.EMPTY,
            accounts: ListState.EMPTY,
        };
        /**
         * Total count of accounts
         */
        this.totalAccounts = 0;
        /**
         * Total count of contacts
         */
        this.totalContacts = 0;
        /**
         * Total count of contacts items before sub-accounts extract
         */
        this.totalContactsItemsCount = 0;
        /**
         * Pipe to initiate dropdown closure from outside
         */
        this.closeDropdownRequest$ = new Subject();
        /**
         * Dropdown icon that would be shown alongside with textbox
         */
        this.dropdownIcon = 'toggle-down';
        /**
         * Selected account event emitter
         */
        this.selectedAccount = new EventEmitter();
        /**
         * Selected contact event emitter
         */
        this.selectedContact = new EventEmitter();
        /**
         * Search string
         */
        this.searchValue = new EventEmitter();
        /**
         * Fetch more items event handler
         */
        this.fetchMoreItems = new EventEmitter();
        /**
         * Enter account detail event
         */
        this.manualEdit = new EventEmitter();
        /**
         * Event emitted search is blurred
         */
        this.searchBlur = new EventEmitter();
        /**
         * Clear search value
         */
        this.clear = new EventEmitter();
        /**
         * Time delay between each search requests in milliseconds. Defaults to 300
         */
        this.debounceTime = DefaultDebounceTime;
        /**
         * Form control for search value.
         */
        this.search = new FormControl();
        /**
         * Flag to denote if the account has only closed payment permission.
         * Default value is `false`
         */
        this.isClosedPayment = false;
        /**
         * Flag to denote if the beneficiary field is disabled.
         * Default value is `false`
         */
        this.isBeneficiaryDisabled = false;
        /**
         * Flag to denote if the manual edit feature is disabled.
         * Default value is `false`
         */
        this.isManualEditDisabled = false;
        this.searchIsFocused = false;
        this.debounceSearch$ = new Subject();
        this.gc$ = new Subject();
        this.pageState = {
            [BeneficiaryList.CONTACTS]: {
                page: 0,
                shouldLoadMore: () => this.totalContacts > this.totalContactsItemsCount,
            },
            [BeneficiaryList.ACCOUNTS]: {
                page: 0,
                shouldLoadMore: () => this.totalAccounts > this._accounts.length,
            },
        };
        this.debounceSearch$
            .pipe(debounceTime(this.debounceTime), distinctUntilChanged(), takeUntil(this.gc$), tap(() => {
            this.listStateReducer({
                [BeneficiaryList.ACCOUNTS]: ListState.LOADING,
                [BeneficiaryList.CONTACTS]: ListState.LOADING,
            });
        }))
            .subscribe((term) => {
            this.searchValue.emit(term);
        });
    }
    /**
     * List of contacts
     */
    set contacts(value) {
        if (this.state.contacts === ListState.FETCHING && value) {
            this._contacts = [...this._contacts, ...value];
        }
        else {
            this._contacts = value;
        }
        this.updateListStateOnDataChange(BeneficiaryList.CONTACTS, this._contacts);
    }
    get contacts() {
        return this._contacts;
    }
    /**
     * List of own accounts
     */
    set accounts(value) {
        if (this.state.accounts === ListState.FETCHING && value) {
            this._accounts = [...this._accounts, ...value];
        }
        else {
            this._accounts = value;
        }
        this.updateListStateOnDataChange(BeneficiaryList.ACCOUNTS, this._accounts);
    }
    get accounts() {
        return this._accounts;
    }
    /**
     * Flag to denote if the beneficiary selector has errors.
     */
    set hasError(error) {
        if (error) {
            if (!this.search.touched) {
                this.search.markAsTouched();
            }
        }
    }
    /**
     * Selected item, contact or account
     */
    set selectedItem(selectedItem) {
        if (selectedItem === null || selectedItem === void 0 ? void 0 : selectedItem.name) {
            this.search.patchValue(selectedItem.name);
            this._selectedItem = selectedItem;
        }
    }
    get selectedItem() {
        return this._selectedItem;
    }
    ngOnInit() {
        this.closeDropdownRequest$
            .pipe(takeUntil(this.gc$))
            .subscribe((closeFlag) => {
            if (closeFlag && this.dropdownItem) {
                this.dropdownItem.close();
            }
        });
    }
    ngOnDestroy() {
        this.gc$.next();
        this.gc$.complete();
    }
    listStateReducer(update) {
        this.state = Object.assign(Object.assign({}, this.state), update);
    }
    selectAccount(account) {
        this.selectedAccount.emit(account);
        this.search.patchValue(account.name);
    }
    selectContact(contact) {
        this.selectedContact.emit(contact);
        this.search.patchValue(contact.name);
    }
    handleSearch(searchString = '') {
        if (this.searchIsFocused) {
            this.debounceSearch$.next(searchString === null || searchString === void 0 ? void 0 : searchString.trim());
            // reset page count in pageState when search is triggered
            this.pageState[BeneficiaryList.ACCOUNTS].page = 0;
            this.pageState[BeneficiaryList.CONTACTS].page = 0;
        }
    }
    onBlur() {
        this.searchIsFocused = false;
        this.searchBlur.emit(this.search.value ? this.search.value.trim() : '');
    }
    focusHandler() {
        this.searchIsFocused = true;
        if (this.dropdownItem) {
            this.dropdownItem.open();
        }
    }
    onClear() {
        this.handleSearch('');
        this.search.reset();
        this.clear.emit('');
    }
    handleDropdownClose(opened, dropdown) {
        if (!opened && this.searchIsFocused) {
            dropdown.open();
        }
    }
    onManualEdit() {
        if (!this.isManualEditDisabled) {
            this.manualEdit.emit(this.search.value ? this.search.value.trim() : '');
        }
    }
    fetchMoreItemsAction(listType) {
        const { shouldLoadMore } = this.pageState[listType];
        let { page: _page } = this.pageState[listType];
        if (shouldLoadMore() && this.state[listType] === ListState.LIST) {
            this.listStateReducer({ [listType]: ListState.FETCHING });
            this.fetchMoreItems.emit({ page: ++_page, type: listType });
            // update page state after being incremented
            this.pageState[listType].page = _page;
        }
    }
    updateListStateOnDataChange(listType, value) {
        let _state = this.state[listType];
        const { FETCHING, FETCHING_FAILURE, ERROR, NO_RESULT, EMPTY, LIST, FULL_LIST, } = ListState;
        if (!value || value.error) {
            _state === FETCHING ? (_state = FETCHING_FAILURE) : (_state = ERROR);
        }
        else if (!(value === null || value === void 0 ? void 0 : value.length)) {
            this.search.value ? (_state = NO_RESULT) : (_state = EMPTY);
        }
        else if (!this.pageState[listType].shouldLoadMore()) {
            _state = FULL_LIST;
        }
        else {
            _state = LIST;
        }
        this.listStateReducer({ [listType]: _state });
    }
}
/** @nocollapse */ BeneficiarySelectorUiComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BeneficiarySelectorUiComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ BeneficiarySelectorUiComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: BeneficiarySelectorUiComponent, selector: "bb-beneficiary-selector-ui", inputs: { totalAccounts: "totalAccounts", totalContacts: "totalContacts", totalContactsItemsCount: "totalContactsItemsCount", contacts: "contacts", accounts: "accounts", tabs: "tabs", closeDropdownRequest$: "closeDropdownRequest$", placeholder: "placeholder", title: "title", helperText: "helperText", hasError: "hasError", ariaLabel: ["aria-label", "ariaLabel"], dropdownIcon: "dropdownIcon", debounceTime: "debounceTime", selectedItem: "selectedItem", search: "search", isClosedPayment: "isClosedPayment", isBeneficiaryDisabled: "isBeneficiaryDisabled", isManualEditDisabled: "isManualEditDisabled" }, outputs: { selectedAccount: "selectedAccount", selectedContact: "selectedContact", searchValue: "searchValue", fetchMoreItems: "fetchMoreItems", manualEdit: "manualEdit", searchBlur: "searchBlur", clear: "clear" }, viewQueries: [{ propertyName: "dropdownItem", first: true, predicate: ["dd"], descendants: true }], ngImport: i0, template: "<div\n  class=\"bb-beneficiary-selector-ui\"\n  ngbDropdown\n  #dd=\"ngbDropdown\"\n  display=\"static\"\n  (openChange)=\"handleDropdownClose($event, dd)\"\n>\n  <label *ngIf=\"title\" [for]=\"searchElem?.id\">{{ title }}</label>\n\n  <span\n    class=\"bb-dynamic-input__helper-text bb-text-support\"\n    *ngIf=\"helperText\"\n    [id]=\"searchElem?.id + '__helper-text'\"\n    [textContent]=\"helperText\"\n  >\n  </span>\n\n  <bb-search-box-ui\n    ngbDropdownAnchor\n    (focus)=\"focusHandler()\"\n    (blur)=\"onBlur()\"\n    [formControl]=\"search\"\n    (clear)=\"onClear()\"\n    data-role=\"beneficiary-account-input\"\n    (ngModelChange)=\"handleSearch(search.value)\"\n    [placeholder]=\"placeholder\"\n    [squareBorder]=\"true\"\n    [showClear]=\"!isBeneficiaryDisabled\"\n    [autocomplete]=\"'off'\"\n    [disabled]=\"isBeneficiaryDisabled\"\n    role=\"combobox\"\n    aria-haspopup=\"true\"\n    [attr.aria-owns]=\"tabsComponent.tabsId\"\n    #searchElem\n  >\n    <button\n      bbButton\n      ngbDropdownToggle\n      color=\"outline-secondary\"\n      [attr.aria-label]=\"ariaLabel\"\n      data-role=\"open-beneficiary-dropdown-list-button\"\n    >\n      <bb-icon-ui [name]=\"dropdownIcon\"></bb-icon-ui>\n    </button>\n  </bb-search-box-ui>\n\n  <div\n    ngbDropdownMenu\n    class=\"dropdown-menu dropdown-menu-right w-100 bb-beneficiary-selector-ui__list\"\n  >\n    <bb-beneficiary-tabs\n      #tabsComponent\n      class=\"bb-beneficiary-selector-ui__tabs\"\n      [accounts]=\"accounts\"\n      [contacts]=\"contacts\"\n      [listState]=\"state\"\n      [tabsConfig]=\"tabs\"\n      [totalAccounts]=\"totalAccounts\"\n      [totalContacts]=\"totalContacts\"\n      [canEditManually]=\"!isClosedPayment && !isManualEditDisabled\"\n      [isDropdownOpen]=\"dd.isOpen()\"\n      (selectedContact)=\"selectContact($event); dd.close()\"\n      (selectedAccount)=\"selectAccount($event); dd.close()\"\n      (fetchMoreItems)=\"fetchMoreItemsAction($event)\"\n      (manualEdit)=\"onManualEdit(); dd.close()\"\n    >\n    </bb-beneficiary-tabs>\n  </div>\n</div>\n", components: [{ type: i2$1.SearchBoxComponent, selector: "bb-search-box-ui", inputs: ["placeholder", "maxLength", "squareBorder", "typeaheadOptions", "showSearch", "showClear", "searchLabel", "clearLabel", "autocomplete"], outputs: ["submit", "clear", "valueChange"] }, { type: i1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: BeneficiaryTabsComponent, selector: "bb-beneficiary-tabs", inputs: ["accounts", "contacts", "totalAccounts", "totalContacts", "listState", "tabsConfig", "isDropdownOpen", "canEditManually"], outputs: ["selectedAccount", "selectedContact", "fetchMoreItems", "manualEdit", "searching"] }], directives: [{ type: i6.NgbDropdown, selector: "[ngbDropdown]", inputs: ["open", "placement", "container", "autoClose", "display", "dropdownClass"], outputs: ["openChange"], exportAs: ["ngbDropdown"] }, { type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i6.NgbDropdownAnchor, selector: "[ngbDropdownAnchor]" }, { type: i1$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$1.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i7.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i6.NgbDropdownToggle, selector: "[ngbDropdownToggle]" }, { type: i6.NgbDropdownMenu, selector: "[ngbDropdownMenu]" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BeneficiarySelectorUiComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-beneficiary-selector-ui',
                    templateUrl: './beneficiary-selector-ui.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { totalAccounts: [{
                type: Input
            }], totalContacts: [{
                type: Input
            }], totalContactsItemsCount: [{
                type: Input
            }], contacts: [{
                type: Input
            }], accounts: [{
                type: Input
            }], tabs: [{
                type: Input
            }], closeDropdownRequest$: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], title: [{
                type: Input
            }], helperText: [{
                type: Input
            }], hasError: [{
                type: Input
            }], ariaLabel: [{
                type: Input,
                args: ['aria-label']
            }], dropdownIcon: [{
                type: Input
            }], selectedAccount: [{
                type: Output
            }], selectedContact: [{
                type: Output
            }], searchValue: [{
                type: Output
            }], fetchMoreItems: [{
                type: Output
            }], manualEdit: [{
                type: Output
            }], searchBlur: [{
                type: Output
            }], clear: [{
                type: Output
            }], debounceTime: [{
                type: Input
            }], selectedItem: [{
                type: Input
            }], search: [{
                type: Input
            }], isClosedPayment: [{
                type: Input
            }], isBeneficiaryDisabled: [{
                type: Input
            }], isManualEditDisabled: [{
                type: Input
            }], dropdownItem: [{
                type: ViewChild,
                args: ['dd']
            }] } });

class BbKeyboardNavigationModule {
}
/** @nocollapse */ BbKeyboardNavigationModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BbKeyboardNavigationModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ BbKeyboardNavigationModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BbKeyboardNavigationModule, declarations: [KeyboardNavigationItemDirective,
        KeyboardNavigationAnchorDirective,
        KeyboardNavigationListDirective,
        KeyboardNavigationDirective], imports: [CommonModule], exports: [KeyboardNavigationItemDirective,
        KeyboardNavigationAnchorDirective,
        KeyboardNavigationListDirective,
        KeyboardNavigationDirective] });
/** @nocollapse */ BbKeyboardNavigationModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BbKeyboardNavigationModule, imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BbKeyboardNavigationModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [
                        KeyboardNavigationItemDirective,
                        KeyboardNavigationAnchorDirective,
                        KeyboardNavigationListDirective,
                        KeyboardNavigationDirective,
                    ],
                    exports: [
                        KeyboardNavigationItemDirective,
                        KeyboardNavigationAnchorDirective,
                        KeyboardNavigationListDirective,
                        KeyboardNavigationDirective,
                    ],
                }]
        }] });

const modules$1 = [
    NgbDropdownModule,
    IconModule,
    SearchBoxModule,
    EmptyStateModule,
    HighlightModule,
    DropdownMenuModule,
    ButtonModule,
    LoadingIndicatorModule,
    KeyboardClickModule,
    AmountModule,
    PaymentsSrSearchResultInfoModule,
    ScrollingModule,
    BbKeyboardNavigationModule,
];
const components$1 = [
    BeneficiarySelectorUiComponent,
    BeneficiaryTabsComponent,
    BeneficiaryContactComponent,
    BeneficiaryAccountComponent,
    BeneficiaryScrollDirective,
    BeneficiaryScrollItemDirective,
];
class BeneficiarySelectorUIModule {
}
/** @nocollapse */ BeneficiarySelectorUIModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BeneficiarySelectorUIModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ BeneficiarySelectorUIModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BeneficiarySelectorUIModule, declarations: [BeneficiarySelectorUiComponent,
        BeneficiaryTabsComponent,
        BeneficiaryContactComponent,
        BeneficiaryAccountComponent,
        BeneficiaryScrollDirective,
        BeneficiaryScrollItemDirective], imports: [CommonModule, ReactiveFormsModule, NgbDropdownModule,
        IconModule,
        SearchBoxModule,
        EmptyStateModule,
        HighlightModule,
        DropdownMenuModule,
        ButtonModule,
        LoadingIndicatorModule,
        KeyboardClickModule,
        AmountModule,
        PaymentsSrSearchResultInfoModule,
        ScrollingModule,
        BbKeyboardNavigationModule, FocusModule], exports: [BeneficiarySelectorUiComponent, NgbDropdownModule,
        IconModule,
        SearchBoxModule,
        EmptyStateModule,
        HighlightModule,
        DropdownMenuModule,
        ButtonModule,
        LoadingIndicatorModule,
        KeyboardClickModule,
        AmountModule,
        PaymentsSrSearchResultInfoModule,
        ScrollingModule,
        BbKeyboardNavigationModule] });
/** @nocollapse */ BeneficiarySelectorUIModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BeneficiarySelectorUIModule, imports: [[CommonModule, ReactiveFormsModule, ...modules$1, FocusModule], NgbDropdownModule,
        IconModule,
        SearchBoxModule,
        EmptyStateModule,
        HighlightModule,
        DropdownMenuModule,
        ButtonModule,
        LoadingIndicatorModule,
        KeyboardClickModule,
        AmountModule,
        PaymentsSrSearchResultInfoModule,
        ScrollingModule,
        BbKeyboardNavigationModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BeneficiarySelectorUIModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [...components$1],
                    imports: [CommonModule, ReactiveFormsModule, ...modules$1, FocusModule],
                    exports: [BeneficiarySelectorUiComponent, ...modules$1],
                }]
        }] });

class PurposeOfPaymentDetailComponent {
    constructor() {
        this.hostRef = this;
        this.isPoPOpen = false;
        this.isPoPMessageTruncated = false;
        /**
         * Label for the pop information.
         */
        this.label = '';
        /**
         * Hide label for the pop information.
         */
        this.hideLabel = false;
        /**
         * The purpose of payment code.
         */
        this.code = '';
        /**
         * The purpose of payment description.
         */
        this.description = '';
    }
    /**
     * Set truncation status of PoP message
     */
    setIsContentTruncated(isMessageTruncated) {
        this.isPoPMessageTruncated = isMessageTruncated;
    }
    /**
     * Toggle PoP message
     */
    togglePoP() {
        this.isPoPOpen = !this.isPoPOpen;
    }
}
/** @nocollapse */ PurposeOfPaymentDetailComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PurposeOfPaymentDetailComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PurposeOfPaymentDetailComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PurposeOfPaymentDetailComponent, selector: "bb-purpose-of-payment-detail", inputs: { label: "label", hideLabel: "hideLabel", code: "code", description: "description" }, ngImport: i0, template: "<ng-container *ngIf=\"code || description\">\n  <div\n    class=\"bb-text-bold\"\n    *ngIf=\"label; else defaultPurposeOfPaymentLabelTemplate\"\n  >\n    {{ label }}\n  </div>\n  <ng-template #defaultPurposeOfPaymentLabelTemplate>\n    <div\n      *ngIf=\"!hideLabel\"\n      class=\"bb-text-bold\"\n      i18n=\"@@purpose-of-payment-detail.label\"\n      data-role=\"payment-purpose-of-payment-label\"\n    >\n      Purpose of payment\n    </div>\n  </ng-template>\n\n  <div data-role=\"payment-purpose-of-payment\" *ngIf=\"description\">\n    <bb-ellipsis-ui [lineClamp]=\"isPoPOpen ? description.length : 3\">\n      <div bbIsContentTruncated [hostRef]=\"hostRef\">\n        <ng-container *ngIf=\"code\">{{ code }} - </ng-container>\n\n        {{ description }}\n      </div>\n    </bb-ellipsis-ui>\n\n    <button\n      *ngIf=\"isPoPMessageTruncated\"\n      bbButton\n      color=\"link-text\"\n      (click)=\"togglePoP()\"\n    >\n      <ng-container [ngSwitch]=\"isPoPOpen\">\n        <ng-container\n          *ngSwitchCase=\"true\"\n          i18n=\"@@purpose-of-payment-detail.showLessBtn\"\n        >\n          See less\n        </ng-container>\n        <ng-container\n          *ngSwitchDefault\n          i18n=\"@@purpose-of-payment-detail.showMoreBtn\"\n        >\n          See more\n        </ng-container>\n      </ng-container>\n    </button>\n  </div>\n</ng-container>\n", components: [{ type: i1$4.EllipsisComponent, selector: "bb-ellipsis-ui", inputs: ["text", "tooltipTriggers", "lineClamp"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1$4.IsContentTruncatedDirective, selector: "[bbIsContentTruncated]", inputs: ["hostRef"] }, { type: i7.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i2.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i2.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i2.NgSwitchDefault, selector: "[ngSwitchDefault]" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PurposeOfPaymentDetailComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-purpose-of-payment-detail',
                    templateUrl: './purpose-of-payment-detail.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { label: [{
                type: Input
            }], hideLabel: [{
                type: Input
            }], code: [{
                type: Input
            }], description: [{
                type: Input
            }] } });

class TableHeaderCheckboxComponent {
    constructor(parentTable) {
        this.parentTable = parentTable;
        /**
         * Input which sends current selection set to be cleared
         */
        this.clearSelection = new Subject();
    }
    getSelectedItemsCount(list) {
        return list.filter((item) => this.parentTable.isSelected(item)).length;
    }
    get isChecked() {
        const pageList = this.parentTable.dataSource
            ? this.parentTable.dataSource
            : [];
        const selected = this.getSelectedItemsCount(pageList);
        return selected === pageList.length;
    }
    get isIntermediate() {
        const pageList = this.parentTable.dataSource
            ? this.parentTable.dataSource
            : [];
        const selected = this.getSelectedItemsCount(pageList);
        return selected > 0 && selected < pageList.length;
    }
    onClick(event) {
        event.stopPropagation();
        if (this.checkboxInput) {
            const pageList = this.parentTable.dataSource
                ? this.parentTable.dataSource
                : [];
            if (this.isIntermediate) {
                pageList.forEach((item) => {
                    if (this.parentTable.isSelected(item)) {
                        this.parentTable.toggleItem(item, false);
                    }
                });
            }
            else {
                pageList.forEach((item) => {
                    this.parentTable.toggleItem(item, !this.parentTable.isSelected(item));
                });
            }
        }
    }
    ngOnInit() {
        this.clearSelection.subscribe((items) => {
            if (items.size) {
                items.forEach((pid) => {
                    this.parentTable.toggleItem(pid, false);
                });
            }
        });
    }
    ngOnDestroy() {
        this.clearSelection.unsubscribe();
    }
}
/** @nocollapse */ TableHeaderCheckboxComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TableHeaderCheckboxComponent, deps: [{ token: i1$8.TableDirective }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ TableHeaderCheckboxComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TableHeaderCheckboxComponent, selector: "bb-table-header-checkbox", inputs: { clearSelection: "clearSelection" }, viewQueries: [{ propertyName: "checkboxInput", first: true, predicate: ["checkbox"], descendants: true, read: ElementRef, static: true }], ngImport: i0, template: "<div class=\"bb-input-checkbox\" (click)=\"onClick($event)\">\n  <input\n    #checkbox\n    type=\"checkbox\"\n    [checked]=\"isChecked\"\n    aria-label=\"select all items\"\n    [indeterminate]=\"isIntermediate\"\n    class=\"bb-input-checkbox__input\"\n    i18n-aria-label=\"@@bb-table-header-checkbox.aria-label\"\n  />\n  <span class=\"bb-input-checkbox__content bb-block--xs\"></span>\n</div>\n" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TableHeaderCheckboxComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-table-header-checkbox',
                    templateUrl: './table-header-checkbox.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$8.TableDirective }]; }, propDecorators: { checkboxInput: [{
                type: ViewChild,
                args: ['checkbox', { read: ElementRef, static: true }]
            }], clearSelection: [{
                type: Input
            }] } });

class TableCheckboxComponent {
    constructor(parentTable) {
        this.parentTable = parentTable;
    }
    get rowItem() {
        return this.row || this.rowId || undefined;
    }
    get isChecked() {
        return this.parentTable.isSelected(this.rowItem);
    }
    onClick(event) {
        event.stopPropagation();
        if (this.checkboxInput) {
            if (event.target !== this.checkboxInput.nativeElement) {
                this.checkboxInput.nativeElement.checked =
                    !this.checkboxInput.nativeElement.checked;
            }
            this.parentTable.toggleItem(this.rowItem, this.checkboxInput.nativeElement.checked);
        }
    }
}
/** @nocollapse */ TableCheckboxComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TableCheckboxComponent, deps: [{ token: i1$8.TableDirective }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ TableCheckboxComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TableCheckboxComponent, selector: "bb-table-checkbox", inputs: { row: "row", rowId: "rowId" }, viewQueries: [{ propertyName: "checkboxInput", first: true, predicate: ["checkbox"], descendants: true, read: ElementRef, static: true }], ngImport: i0, template: "<div class=\"bb-input-checkbox bb-stack\" (click)=\"onClick($event)\">\n  <input\n    #checkbox\n    type=\"checkbox\"\n    [checked]=\"isChecked\"\n    aria-label=\"select item\"\n    class=\"bb-input-checkbox__input\"\n    i18n-aria-label=\"@@bb-table-checkbox.aria-label\"\n  />\n  <span class=\"bb-input-checkbox__content\"></span>\n</div>\n" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TableCheckboxComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-table-checkbox',
                    templateUrl: './table-checkbox.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$8.TableDirective }]; }, propDecorators: { row: [{
                type: Input
            }], rowId: [{
                type: Input
            }], checkboxInput: [{
                type: ViewChild,
                args: ['checkbox', { read: ElementRef, static: true }]
            }] } });

class PayordStatusBadgeComponent {
    constructor() {
        this.hostRef = this;
        this.statusMap = Status;
        /**
         * Map containing the color to apply to each status
         */
        this.statusColorMap = StatusBadgeColorMap;
        /**
         * Sets the default case badge color if not found in the map
         */
        this.statusColorDefault = 'warning';
        /**
         * Sets when to display abbreviated badge text
         */
        this.showAbbreviated = false;
    }
    isKnownStatus() {
        return this.status && this.status in this.statusMap;
    }
}
/** @nocollapse */ PayordStatusBadgeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordStatusBadgeComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PayordStatusBadgeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordStatusBadgeComponent, selector: "bb-payord-status-badge", inputs: { status: "status", statusColorMap: "statusColorMap", statusColorDefault: "statusColorDefault", showAbbreviated: "showAbbreviated" }, ngImport: i0, template: "<ng-container\n  bbPayordStatusBadgeCustomizable\n  [bbHostRef]=\"hostRef\"\n></ng-container>\n\n<ng-template bbPayordStatusBadgeCustomizable let-hostRef>\n  <ng-container *ngIf=\"hostRef.isKnownStatus(); else defaultStatus\">\n    <ng-container\n      *ngIf=\"hostRef.showAbbreviated\"\n      bbPayordStatusBadgeAbbreviationCustomizable\n      [bbHostRef]=\"hostRef\"\n    ></ng-container>\n    <ng-container\n      *ngIf=\"!hostRef.showAbbreviated\"\n      bbPayordStatusBadgeLabelCustomizable\n      [bbHostRef]=\"hostRef\"\n    ></ng-container>\n  </ng-container>\n\n  <ng-template #defaultStatus>\n    <bb-badge-ui\n      *ngIf=\"hostRef.showAbbreviated; else defaultStatusLabel\"\n      [color]=\"hostRef.statusColorDefault\"\n      [abbr]=\"hostRef.status.slice(0, 3)\"\n      [text]=\"hostRef.status | titlecase\"\n    ></bb-badge-ui>\n    <ng-template #defaultStatusLabel>\n      <bb-badge-ui\n        [color]=\"hostRef.statusColorDefault\"\n        [text]=\"hostRef.status | uppercase\"\n      ></bb-badge-ui>\n    </ng-template>\n  </ng-template>\n</ng-template>\n\n<ng-template bbPayordStatusBadgeAbbreviationCustomizable let-hostRef>\n  <span\n    class=\"d-none\"\n    aria-hidden=\"true\"\n    i18n=\"@@payord-status-badge.abbreviation.label\"\n    #abbreviation\n  >\n    {hostRef.status, select, OPEN {Ope} CLOSED {Clo} INVALID {Inv} VALID {Val}\n    ENTERED {Ent} READY {Rea} ACCEPTED {Acc} APPROVED {App} REJECTED {Rej}\n    CANCELLED {Can} CANCELLATION_PENDING {Can} PROCESSED {Pro} ACKNOWLEDGED\n    {Ack} DOWNLOADING {Dow} EXPIRED {Exp} PENDING {Pen} }\n  </span>\n  <span\n    class=\"d-none\"\n    aria-hidden=\"true\"\n    i18n=\"@@payord-status-badge.tooltip.label\"\n    #tooltip\n  >\n    {hostRef.status, select, OPEN {Open} CLOSED {Closed} INVALID {Invalid} VALID\n    {Valid} ENTERED {Entered} READY {Ready} ACCEPTED {Accepted} APPROVED\n    {Approved} REJECTED {Rejected} CANCELLED {Cancelled} CANCELLATION_PENDING\n    {Cancellation pending} PROCESSED {Processed} ACKNOWLEDGED {Acknowledged}\n    DOWNLOADING {Downloading} EXPIRED {Expired} PENDING {Pending} }\n  </span>\n  <bb-badge-ui\n    [color]=\"hostRef.statusColorMap[hostRef.status]\"\n    [abbr]=\"abbreviation.textContent\"\n    [text]=\"tooltip.textContent\"\n  ></bb-badge-ui>\n</ng-template>\n\n<ng-template bbPayordStatusBadgeLabelCustomizable let-hostRef>\n  <span\n    class=\"d-none\"\n    aria-hidden=\"true\"\n    i18n=\"@@payord-status-badge.label\"\n    #label\n  >\n    {hostRef.status, select, OPEN {Open} CLOSED {Closed} INVALID {Invalid} VALID\n    {Valid} ENTERED {Entered} READY {Ready} ACCEPTED {Accepted} APPROVED\n    {Approved} REJECTED {Rejected} CANCELLED {Cancelled} CANCELLATION_PENDING\n    {Cancellation pending} PROCESSED {Processed} ACKNOWLEDGED {Acknowledged}\n    DOWNLOADING {Downloading} EXPIRED {Expired} PENDING {Pending} }\n  </span>\n  <bb-badge-ui\n    [color]=\"hostRef.statusColorMap[hostRef.status]\"\n    [text]=\"label.textContent\"\n  ></bb-badge-ui>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i1$9.BadgeComponent; }), selector: "bb-badge-ui", inputs: ["color", "text", "abbr", "circle", "wrap", "ariaLabel"] }], directives: [{ type: i0.forwardRef(function () { return PayordStatusBadgeCustomizableDirective; }), selector: "[bbPayordStatusBadgeCustomizable]" }, { type: i0.forwardRef(function () { return i2.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return PayordStatusBadgeAbbreviationCustomizableDirective; }), selector: "[bbPayordStatusBadgeAbbreviationCustomizable]" }, { type: i0.forwardRef(function () { return PayordStatusBadgeLabelCustomizableDirective; }), selector: "[bbPayordStatusBadgeLabelCustomizable]" }], pipes: { "titlecase": i0.forwardRef(function () { return i2.TitleCasePipe; }), "uppercase": i0.forwardRef(function () { return i2.UpperCasePipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordStatusBadgeComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payord-status-badge',
                    templateUrl: './status-badge.component.html',
                }]
        }], propDecorators: { status: [{
                type: Input
            }], statusColorMap: [{
                type: Input
            }], statusColorDefault: [{
                type: Input
            }], showAbbreviated: [{
                type: Input
            }] } });
class PayordStatusBadgeCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ PayordStatusBadgeCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordStatusBadgeCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ PayordStatusBadgeCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: PayordStatusBadgeCustomizableDirective, selector: "[bbPayordStatusBadgeCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordStatusBadgeCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbPayordStatusBadgeCustomizable]',
                }]
        }] });
class PayordStatusBadgeAbbreviationCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ PayordStatusBadgeAbbreviationCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordStatusBadgeAbbreviationCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ PayordStatusBadgeAbbreviationCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: PayordStatusBadgeAbbreviationCustomizableDirective, selector: "[bbPayordStatusBadgeAbbreviationCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordStatusBadgeAbbreviationCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbPayordStatusBadgeAbbreviationCustomizable]',
                }]
        }] });
class PayordStatusBadgeLabelCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ PayordStatusBadgeLabelCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordStatusBadgeLabelCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ PayordStatusBadgeLabelCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: PayordStatusBadgeLabelCustomizableDirective, selector: "[bbPayordStatusBadgeLabelCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordStatusBadgeLabelCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbPayordStatusBadgeLabelCustomizable]',
                }]
        }] });

class ExportPdfDirective {
    constructor(notificationService, paymentOrderService) {
        this.notificationService = notificationService;
        this.paymentOrderService = paymentOrderService;
        this.downloadSub = new Subject();
    }
    static convertByteToBlob(data) {
        const blob = new Blob([data], { type: 'application/pdf' });
        const link = document.createElement('a');
        const fileName = $localize `:@@export-pdf.pdf-file.name:payment_confirmation`;
        link.href = window.URL.createObjectURL(blob);
        link.download = fileName;
        link.click();
    }
    onClick() {
        this.downloadSub.next(this.paymentOrderId);
    }
    ngOnInit() {
        this.downloadSub.pipe(switchMap(this.getPdf.bind(this))).subscribe();
    }
    ngOnDestroy() {
        this.downloadSub.unsubscribe();
    }
    getPdf(paymentOrderId) {
        return this.paymentOrderService
            .getPaymentOrderExport({ paymentOrderId })
            .pipe(tap(ExportPdfDirective.convertByteToBlob), catchError((err) => {
            let header = $localize `:@@export-pdf.pdf-file.server-error-header:Server error`;
            let message = $localize `:@@export-pdf.pdf-file.server-error-message:Unknown error occurred.`;
            if (err.status === 409) {
                header = $localize `:@@export-pdf.pdf-file.409-error-header:The payment status does not allow this action. Please verify if the payment is still valid`;
                message = '';
            }
            this.notificationService.showNotification({
                modifier: 'error',
                header,
                message,
            });
            return of(err);
        }));
    }
}
/** @nocollapse */ ExportPdfDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ExportPdfDirective, deps: [{ token: i1$a.NotificationService }, { token: i1$b.PaymentOrdersHttpService }], target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ ExportPdfDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ExportPdfDirective, selector: "[bbExportPdf]", inputs: { paymentOrderId: ["bbExportPdf", "paymentOrderId"] }, host: { listeners: { "click": "onClick()" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ExportPdfDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbExportPdf]',
                }]
        }], ctorParameters: function () { return [{ type: i1$a.NotificationService }, { type: i1$b.PaymentOrdersHttpService }]; }, propDecorators: { paymentOrderId: [{
                type: Input,
                args: ['bbExportPdf']
            }], onClick: [{
                type: HostListener,
                args: ['click']
            }] } });

const formatIBAN = (iban) => iban && iban.replace(/(.{4})/g, '$1 ').trim();

class AccountFormatterPipe {
    transform(identification) {
        if ((identification === null || identification === void 0 ? void 0 : identification.schemeName) === 'IBAN') {
            return formatIBAN(identification.identification);
        }
        return identification === null || identification === void 0 ? void 0 : identification.identification;
    }
}
/** @nocollapse */ AccountFormatterPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountFormatterPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
/** @nocollapse */ AccountFormatterPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountFormatterPipe, name: "accountFormatter" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountFormatterPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'accountFormatter', pure: true }]
        }] });

class PaymentsTableComponent {
    constructor(paymentConfigService) {
        this.paymentConfigService = paymentConfigService;
        this.hostRef = this;
        /**
         * Search query string (if any)
         */
        this.clearSelection = new Subject();
        /**
         * Flag indicates if the user has delete permission.
         * Default value is `false`.
         */
        this.canDelete = false;
        /**
         * Flag indicates if the user has edit permission.
         * Default value is `false`.
         */
        this.canEdit = false;
        /**
         * Flag indicates whether called from Manage transfers
         */
        this.isManageTransfersMode = false;
        /**
         * The flag to denote if it is a debit mode
         */
        this.isDebitMode = false;
        /**
         * Payment mode
         * Default is `SINGLE`.
         */
        this.paymentMode = 'ALL';
        /**
         * Select template event emitter
         */
        this.selectTemplate = new EventEmitter();
        /**
         * Click template event emitter.
         */
        this.templateItemClick = new EventEmitter();
        /**
         * Changes will be triggered on paymentItemClick event emit.
         */
        this.paymentItemClick = new EventEmitter();
        /**
         * Click delete event emitter.
         */
        this.triggerDeleteTemplate = new EventEmitter();
        /**
         * Changes will be triggered on column sorting.
         */
        this.sort = new EventEmitter();
        /**
         * Selection set
         */
        this.selectionSet = new EventEmitter();
        /**
         * Edit template event emitter.
         */
        this.editTemplate = new EventEmitter();
        /**
         * Approval event emitter
         */
        this.approvePayment = new EventEmitter();
        /**
         * Rejection event emitter
         */
        this.rejectPayment = new EventEmitter();
        /**
         * Cancel event emitter
         */
        this.cancelPayment = new EventEmitter();
        /**
         * Edit event emitter
         */
        this.editPayment = new EventEmitter();
        /**
         * Copy payment event emitter
         */
        this.copyPayment = new EventEmitter();
        this.selection = new Set();
        this.preferences = Preferences;
        this.mapPaymentType = (item) => this.paymentConfigService.mapPaymentType(item);
    }
    onSelectTemplate(item) {
        this.selectTemplate.emit(item);
    }
    onTemplateClick(template) {
        this.templateItemClick.emit(template);
    }
    onPaymentItemClick(paymentItem) {
        this.paymentItemClick.emit(paymentItem);
    }
    onEditTemplate(template) {
        this.editTemplate.emit(Object.assign(Object.assign({}, template), { query: this.searchTerm }));
    }
    trackById(_index, item) {
        return item.id;
    }
    onSort(event) {
        this.sort.emit(event);
    }
    setSelection(selection) {
        this.selection = selection;
        this.selectionSet.emit(this.selection);
    }
    getIds(items) {
        return items === null || items === void 0 ? void 0 : items.map((payment) => payment.id);
    }
    openDeleteTemplateModal(item) {
        this.triggerDeleteTemplate.emit(Object.assign(Object.assign({}, item), { query: this.searchTerm }));
    }
    formatExecutionDate(date) {
        let result = date;
        if (result === getRelativeDate()) {
            result = 'today';
        }
        else if (result === getRelativeDate(1)) {
            result = 'tomorrow';
        }
        return result;
    }
    stopPropagation(event) {
        event.stopPropagation();
    }
    isApprovalProhibited(paymentItem) {
        return this.isActionDisabled(paymentItem === null || paymentItem === void 0 ? void 0 : paymentItem.actions, AvailableActions.APPROVE);
    }
    onApprovePayment(payment, event) {
        event.stopPropagation();
        if (!this.isApprovalProhibited(payment)) {
            this.approvePayment.emit(payment);
        }
    }
    isRejectionProhibited(paymentItem) {
        return this.isActionDisabled(paymentItem === null || paymentItem === void 0 ? void 0 : paymentItem.actions, AvailableActions.REJECT);
    }
    onRejectPayment(payment, event) {
        event.stopPropagation();
        if (!this.isRejectionProhibited(payment)) {
            this.rejectPayment.emit(payment);
        }
    }
    onCancelPayment(payment) {
        if (!this.isCancelProhibited(payment)) {
            this.cancelPayment.emit(payment);
        }
    }
    onEditPayment(payment) {
        if (!this.isEditProhibited(payment)) {
            this.editPayment.emit(payment);
        }
    }
    onCopyPayment(payment) {
        if (this.canCopyPayment(payment)) {
            this.copyPayment.emit(Object.assign(Object.assign({}, payment), { isPaymentCopy: true }));
        }
    }
    canCopyPayment(payment) {
        return canCopyPayment(payment);
    }
    isEditProhibited(paymentItem) {
        return this.isActionDisabled(paymentItem === null || paymentItem === void 0 ? void 0 : paymentItem.actions, AvailableActions.EDIT);
    }
    isCancelProhibited(paymentItem) {
        return this.isActionDisabled(paymentItem === null || paymentItem === void 0 ? void 0 : paymentItem.actions, AvailableActions.CANCEL);
    }
    transactionInformation(payment) {
        return payment === null || payment === void 0 ? void 0 : payment.transferTransactionInformation;
    }
    hasCreatePermission(template) {
        return hasCreatePermission(template.actions);
    }
    isActionDisabled(actions, actionType) {
        return !actions || actions.indexOf(actionType) === -1;
    }
}
/** @nocollapse */ PaymentsTableComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentsTableComponent, deps: [{ token: PaymentConfigService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PaymentsTableComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PaymentsTableComponent, selector: "bb-table-payments-component", inputs: { items: "items", searchTerm: "searchTerm", clearSelection: "clearSelection", responseError: "responseError", canDelete: "canDelete", canEdit: "canEdit", isManageTransfersMode: "isManageTransfersMode", isDebitMode: "isDebitMode", paymentMode: "paymentMode", totalCount: "totalCount", pageSize: "pageSize" }, outputs: { selectTemplate: "selectTemplate", templateItemClick: "templateItemClick", paymentItemClick: "paymentItemClick", triggerDeleteTemplate: "triggerDeleteTemplate", sort: "sort", selectionSet: "selectionSet", editTemplate: "editTemplate", approvePayment: "approvePayment", rejectPayment: "rejectPayment", cancelPayment: "cancelPayment", editPayment: "editPayment", copyPayment: "copyPayment" }, ngImport: i0, template: "<div *ngIf=\"items?.items.length && !responseError\" class=\"table-responsive\">\n  <div class=\"bb-block bb-block--xl\"></div>\n  <div *ngIf=\"searchTerm\">\n    <div class=\"bb-block bb-block--xs\"></div>\n    <div\n      class=\"bb-block bb-block--xs\"\n      data-role=\"results-found\"\n      i18n=\"@@manage-payment-items.results-found\"\n    >\n      {items.totalCount, plural, =1 {1 result found} other\n      {{{items.totalCount}} results found}}\n    </div>\n  </div>\n\n  <table\n    bbTableFocus\n    [bbTable]=\"getIds(items.items)\"\n    class=\"table table-hover bb-table\"\n    (sort)=\"onSort($event)\"\n    (selectRow)=\"setSelection($event)\"\n  >\n    <thead>\n      <tr data-role=\"item-row\">\n        <td\n          data-role=\"selection-checkbox\"\n          *ngIf=\"isManageTransfersMode || isDebitMode\"\n        >\n          <bb-table-header-checkbox\n            [clearSelection]=\"clearSelection\"\n          ></bb-table-header-checkbox>\n        </td>\n        <td *ngIf=\"!(isManageTransfersMode || isDebitMode)\"></td>\n        <ng-template #itemStatusHeader>\n          <span\n            class=\"th-content\"\n            i18n=\"\n              Manage payments table header label| Manage payments header label\n              for status@@manage-payments.header.status\"\n          >\n            Status\n          </span>\n        </ng-template>\n        <th\n          data-role=\"header-status\"\n          scope=\"col\"\n          bbSortable=\"status\"\n          tabindex=\"0\"\n          *ngIf=\"isManageTransfersMode || isDebitMode\"\n        >\n          <ng-container *ngTemplateOutlet=\"itemStatusHeader\"></ng-container>\n        </th>\n        <ng-template #templateNameHeader>\n          <span\n            class=\"th-content\"\n            i18n=\"\n              Manage payment templates table header label| Manage payment\n              templates header label for\n              status@@manage-payment-templates.header.status\"\n          >\n            Template name\n          </span>\n        </ng-template>\n        <th\n          data-role=\"header-status\"\n          scope=\"col\"\n          *ngIf=\"!(isManageTransfersMode || isDebitMode)\"\n          tabindex=\"0\"\n        >\n          <ng-container *ngTemplateOutlet=\"templateNameHeader\"></ng-container>\n        </th>\n        <th\n          #itemFromHeader\n          data-role=\"header-account-from\"\n          scope=\"col\"\n          bbSortable=\"originatorName\"\n          tabindex=\"0\"\n        >\n          <span\n            class=\"th-content\"\n            i18n=\"\n              Manage payment items table header label| Manage payment items\n              header label for from@@manage-payment-items.header.from\"\n          >\n            From\n          </span>\n        </th>\n        <th\n          #itemToHeader\n          data-role=\"header-account-to\"\n          scope=\"col\"\n          bbSortable=\"counterpartyName\"\n          tabindex=\"0\"\n        >\n          <span\n            class=\"th-content\"\n            i18n=\"\n              Manage payment items table header label| Manage payment items\n              header label for number of\n              payments@@manage-payment-items.header.payments-number\"\n          >\n            To\n          </span>\n        </th>\n        <th\n          #itemCurrencyHeader\n          data-role=\"header-currency\"\n          scope=\"col\"\n          class=\"bb-table--text-end\"\n          bbSortable=\"currency\"\n          tabindex=\"0\"\n        >\n          <span\n            class=\"th-content\"\n            i18n=\"\n              Manage payment items table header label| Manage payment items\n              header label for currency@@manage-payment-items.header.currency\"\n          >\n            Ccy\n          </span>\n        </th>\n        <th\n          #itemAmountHeader\n          scope=\"col\"\n          data-role=\"header-amount\"\n          class=\"bb-table--text-end\"\n          bbSortable=\"amount\"\n          tabindex=\"0\"\n        >\n          <span\n            i18n=\"\n              Manage payment items table header label| Manage payment items\n              header label for amount@@manage-payment-items.header.amount\"\n            class=\"th-content\"\n          >\n            Amount\n          </span>\n        </th>\n\n        <th\n          *ngIf=\"\n            (paymentMode === 'RECURRING' || paymentMode === 'ALL') &&\n            (isManageTransfersMode || isDebitMode)\n          \"\n          scope=\"col\"\n          data-role=\"header-frequency\"\n          tabindex=\"0\"\n        >\n          <span\n            i18n=\"\n              Manage payments table header label| Manage payments header label\n              for frequency@@manage-payments.header.frequency\"\n            class=\"th-content\"\n          >\n            Frequency\n          </span>\n        </th>\n\n        <th\n          *ngIf=\"isManageTransfersMode || isDebitMode\"\n          scope=\"col\"\n          data-role=\"header-exec-date\"\n          bbSortable=\"requestedExecutionDate\"\n          tabindex=\"0\"\n        >\n          <span\n            i18n=\"\n              Manage payments table header label| Manage payments header label\n              for execution date@@manage-payments.header.execution-date\"\n            class=\"th-content\"\n          >\n            Exec. date\n          </span>\n        </th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr\n        *ngFor=\"let item of items?.items; trackBy: trackById\"\n        [bbRow]=\"item\"\n        (bbKeyboardClick)=\"\n          isManageTransfersMode || isDebitMode\n            ? onPaymentItemClick(item)\n            : onTemplateClick(item)\n        \"\n        tabindex=\"0\"\n        data-role=\"payment-row\"\n      >\n        <td\n          data-role=\"payment-col-selection\"\n          *ngIf=\"isManageTransfersMode || isDebitMode\"\n        >\n          <bb-table-checkbox\n            class=\"bb-stack\"\n            [rowId]=\"item.id\"\n          ></bb-table-checkbox>\n        </td>\n        <td\n          data-role=\"payment-col-selection\"\n          *ngIf=\"!(isManageTransfersMode || isDebitMode)\"\n        >\n          <bb-icon-ui\n            class=\"bb-text-disabled bb-stack__item\"\n            name=\"insert-drive-file\"\n          >\n          </bb-icon-ui>\n        </td>\n\n        <td\n          data-role=\"payment-col-status\"\n          *ngIf=\"!(isManageTransfersMode || isDebitMode); else statusData\"\n        >\n          <span class=\"sr-only\">\n            <ng-container *ngTemplateOutlet=\"templateNameHeader\">\n            </ng-container>\n          </span>\n          <div class=\"bb-text-bold\">\n            {{ item.name }}\n          </div>\n\n          <div #paymentTypeHeading class=\"d-none\" aria-hidden=\"true\">\n            <ng-container i18n=\"manage-payment-templates.payment-types\">\n              {item?.details?.paymentType, select, US_FOREIGN_WIRE {US Foreign\n              Wire Payment} US_FOREIGN_WIRE_ILE {US Foreign Wire Payment}\n              SEPA_CT_CLOSED {SEPA CT Transfer} SEPA_CT {SEPA CT Transfer}\n              SEPA_CT_ILE {SEPA CT Transfer}}\n            </ng-container>\n          </div>\n\n          <div\n            class=\"bb-text-support\"\n            data-role=\"payment-type\"\n            *ngIf=\"!(isManageTransfersMode || isDebitMode)\"\n          >\n            {{\n              mapPaymentType(item)\n                ? mapPaymentType(item)\n                : paymentTypeHeading.textContent\n            }}\n          </div>\n        </td>\n\n        <ng-template #statusData>\n          <td data-role=\"payment-col-status\">\n            <span class=\"sr-only\">\n              <ng-container *ngTemplateOutlet=\"itemStatusHeader\">\n              </ng-container>\n            </span>\n            <div class=\"bb-stack\">\n              <div class=\"bb-stack__item\">\n                <bb-payord-status-badge\n                  class=\"d-none d-md-block\"\n                  [status]=\"item.status\"\n                  [showAbbreviated]=\"true\"\n                ></bb-payord-status-badge>\n              </div>\n            </div>\n          </td>\n        </ng-template>\n\n        <td>\n          <bb-badge-ui\n            *ngIf=\"item.edited\"\n            color=\"secondary\"\n            text=\"Edit pending\"\n            data-role=\"edit-pending-label\"\n            i18n-text=\"@@manage-payments.payment.list.editPending.label\"\n          ></bb-badge-ui>\n\n          <span class=\"sr-only\">; {{ itemFromHeader.innerText }}:</span>\n          <div data-role=\"payment-col-debitor-name\">\n            {{\n              isDebitMode ||\n              transactionInformation(item)?.counterparty?.role === 'DEBTOR'\n                ? transactionInformation(item)?.counterparty?.name\n                : isManageTransfersMode\n                ? item.originator?.name\n                : item.details.originatorAccount.name\n            }}\n          </div>\n          <div class=\"bb-text-support\" data-role=\"payment-col-debitor-account\">\n            {{\n              isDebitMode ||\n              transactionInformation(item)?.counterparty?.role === 'DEBTOR'\n                ? (transactionInformation(item)?.counterpartyAccount\n                    ?.identification | accountFormatter)\n                : isManageTransfersMode\n                ? (item.originatorAccount?.identification | accountFormatter)\n                : (item.details.originatorAccount.identification\n                  | accountFormatter)\n            }}\n          </div>\n        </td>\n\n        <td>\n          <span class=\"sr-only\">; {{ itemToHeader.innerText }}:</span>\n          <div data-role=\"payment-col-creditor-name\">\n            {{\n              isDebitMode ||\n              transactionInformation(item)?.counterparty?.role === 'DEBTOR'\n                ? item.originator?.name\n                : isManageTransfersMode\n                ? transactionInformation(item)?.counterparty?.name\n                : item.details.transferTransactionInformation.counterparty.name\n            }}\n          </div>\n          <div class=\"bb-text-support\" data-role=\"payment-col-creditor-account\">\n            {{\n              isDebitMode ||\n              transactionInformation(item)?.counterparty?.role === 'DEBTOR'\n                ? (item.originatorAccount?.identification | accountFormatter)\n                : isManageTransfersMode\n                ? (transactionInformation(item)?.counterpartyAccount\n                    ?.identification | accountFormatter)\n                : (item.details.transferTransactionInformation\n                    .counterpartyAccount.identification | accountFormatter)\n            }}\n          </div>\n        </td>\n\n        <td class=\"bb-table--text-end\">\n          <span class=\"sr-only\">; {{ itemCurrencyHeader.innerText }}</span>\n          <span data-role=\"payment-col-currency\">\n            {{\n              isManageTransfersMode || isDebitMode\n                ? item.transferTransactionInformation?.instructedAmount\n                    .currencyCode\n                : item.details.transferTransactionInformation.instructedAmount\n                    .currencyCode\n            }}\n          </span>\n        </td>\n\n        <td data-role=\"payment-col-amount\" class=\"bb-table--text-end\">\n          <span class=\"sr-only\">; {{ itemAmountHeader.innerText }}:</span>\n          <bb-amount-ui\n            [amount]=\"\n              isManageTransfersMode || isDebitMode\n                ? item.transferTransactionInformation?.instructedAmount.amount\n                : item.details.transferTransactionInformation.instructedAmount\n                    .amount\n            \"\n          ></bb-amount-ui>\n        </td>\n\n        <td\n          *ngIf=\"\n            (paymentMode === 'RECURRING' || paymentMode === 'ALL') &&\n            (isManageTransfersMode || isDebitMode)\n          \"\n          data-role=\"payment-col-frequency\"\n        >\n          <span i18n=\"@@@@manage-payments.payment.list.frequency\">\n            {item.schedule?.transferFrequency, select, DAILY {Daily} WEEKLY\n            {Weekly} MONTHLY {Monthly} QUARTERLY {Quarterly} YEARLY {Yearly}\n            other {{{item.schedule?.transferFrequency | titlecase}}}}\n          </span>\n        </td>\n\n        <td data-role=\"payment-col-date\">\n          <span\n            *ngIf=\"item.schedule?.nextExecutionDate\"\n            i18n=\"@@manage-payments.payment.list.execution-date-value\"\n          >\n            {formatExecutionDate(item.schedule?.nextExecutionDate), select,\n            today {Today} tomorrow {Tomorrow} other\n            {{{ item.schedule?.nextExecutionDate | date:'shortDate'}}} }\n          </span>\n\n          <span *ngIf=\"!item.schedule?.nextExecutionDate\">\n            {{ item.requestedExecutionDate | date: 'shortDate' }}\n          </span>\n        </td>\n\n        <td>\n          <div class=\"bb-stack\">\n            <div\n              class=\"bb-stack__item bb-stack__item--push-right d-none d-md-block\"\n            >\n              <div class=\"bb-stack\">\n                <!-- Large screens (Hidden only on xs and sm) -->\n                <ng-container\n                  *ngIf=\"\n                    item &&\n                    item.status === 'ENTERED' &&\n                    (isManageTransfersMode || isDebitMode)\n                  \"\n                >\n                  <div class=\"bb-stack__item\">\n                    <button\n                      bbButton\n                      buttonSize=\"sm\"\n                      [circle]=\"true\"\n                      color=\"success\"\n                      triggers=\"hover focus\"\n                      aria-label=\"Approve payment\"\n                      data-role=\"approve-payment-order\"\n                      (click)=\"onApprovePayment(item, $event)\"\n                      [ngClass]=\"{\n                        'disabled btn-circle--filled':\n                          isApprovalProhibited(item)\n                      }\"\n                      i18n-aria-label=\"\n                        Approve payment@@manage-payments-list.action.approve\"\n                      [bbTooltip]=\"\n                        isApprovalProhibited(item)\n                          ? actionNotAvailable\n                          : actionApprove\n                      \"\n                    >\n                      <bb-icon-ui name=\"check\"></bb-icon-ui>\n                    </button>\n                  </div>\n\n                  <div class=\"bb-stack__item\">\n                    <button\n                      bbButton\n                      buttonSize=\"sm\"\n                      [circle]=\"true\"\n                      color=\"danger\"\n                      triggers=\"hover focus\"\n                      aria-label=\"Reject payment\"\n                      data-role=\"reject-payment-order\"\n                      (click)=\"onRejectPayment(item, $event)\"\n                      [ngClass]=\"{\n                        'disabled btn-circle--filled':\n                          isRejectionProhibited(item)\n                      }\"\n                      i18n-aria-label=\"\n                        Reject payment@@manage-payments-list.action.reject\"\n                      [bbTooltip]=\"\n                        isRejectionProhibited(item)\n                          ? actionNotAvailable\n                          : actionReject\n                      \"\n                    >\n                      <bb-icon-ui name=\"times\"></bb-icon-ui>\n                    </button>\n                  </div>\n                </ng-container>\n\n                <div\n                  class=\"bb-stack__item\"\n                  *ngIf=\"isManageTransfersMode || isDebitMode\"\n                >\n                  <span\n                    class=\"sr-only\"\n                    i18n=\"@@manage-templates.bb-table-payments.more-actions\"\n                    >More actions</span\n                  >\n                  <bb-dropdown-menu-ui\n                    type=\"button\"\n                    buttonSize=\"sm\"\n                    container=\"body\"\n                    btnCircle=\"true\"\n                    icon=\"ellipsis-h\"\n                    btnColor=\"link-dark\"\n                    triggers=\"hover focus\"\n                    data-role=\"more-options\"\n                    ariaLabel=\"More actions\"\n                    bbTooltip=\"More actions\"\n                    (click)=\"stopPropagation($event)\"\n                    (keydown.enter)=\"stopPropagation($event)\"\n                    i18n-ariaLabel=\"\n                      @@manage-transfers.bb-table-payments.more-actions.label\"\n                    i18n-bbTooltip=\"\n                      @@manage-transfers.bb-table-payments.more-actions.tooltip\"\n                  >\n                    <ng-template bbDropdownMenuItem>\n                      <button\n                        type=\"button\"\n                        role=\"menuitem\"\n                        class=\"dropdown-item\"\n                        *ngIf=\"canCopyPayment(item)\"\n                        (bbKeyboardClick)=\"onCopyPayment(item)\"\n                        data-role=\"transfer-payment-order-dropdown\"\n                        i18n=\"@@manage-payments.payment.list.action.transfer\"\n                      >\n                        Transfer\n                      </button>\n                      <button\n                        type=\"button\"\n                        role=\"menuitem\"\n                        class=\"dropdown-item\"\n                        i18n=\"@@manage-payments.payment.list.action.edit\"\n                        data-role=\"edit-payment-order-dropdown\"\n                        *ngIf=\"!isEditProhibited(item)\"\n                        (bbKeyboardClick)=\"onEditPayment(item)\"\n                      >\n                        Edit\n                      </button>\n\n                      <button\n                        type=\"button\"\n                        role=\"menuitem\"\n                        container=\"body\"\n                        placement=\"left\"\n                        class=\"dropdown-item\"\n                        triggers=\"hover focus\"\n                        data-role=\"cancel-payment-order-dropdown\"\n                        (bbKeyboardClick)=\"onCancelPayment(item)\"\n                        [class.disabled]=\"isCancelProhibited(item)\"\n                        [bbTooltip]=\"\n                          isCancelProhibited(item) && actionNotAvailable\n                        \"\n                      >\n                        Cancel\n                      </button>\n\n                      <button\n                        type=\"button\"\n                        role=\"menuitem\"\n                        class=\"dropdown-item\"\n                        data-role=\"export-payment-order-dropdown\"\n                        i18n=\"@@manage-payments.payment.list.action.export-pdf\"\n                        *ngIf=\"item.permissibleActions?.export\"\n                        [bbExportPdf]=\"item.id\"\n                      >\n                        Export PDF\n                      </button>\n                    </ng-template>\n                  </bb-dropdown-menu-ui>\n                </div>\n              </div>\n            </div>\n          </div>\n        </td>\n\n        <td\n          data-role=\"create-payment-col-selection\"\n          *ngIf=\"!(isManageTransfersMode || isDebitMode)\"\n        >\n          <button\n            *ngIf=\"hasCreatePermission(item)\"\n            bbButton\n            buttonSize=\"md\"\n            color=\"unstyled\"\n            aria-label=\"Create payment from template\"\n            i18n-aria-label=\"\n              Button for create payment from\n              template@@manage-payment-templates.create-payment.button\"\n            data-role=\"create-payment-button\"\n            bbTooltip=\"Create new payment from this template\"\n            triggers=\"hover focus\"\n            i18n-bbTooltip=\"\n              Tooltip for create payment from\n              template@@manage-payment-templates.create-payment.tooltip\"\n            (click)=\"stopPropagation($event); onSelectTemplate(item)\"\n          >\n            <bb-icon-ui name=\"payments\" class=\"bb-stack__item\"> </bb-icon-ui>\n          </button>\n        </td>\n        <td\n          class=\"text-right\"\n          *ngIf=\"\n            (canDelete || canEdit) && !(isManageTransfersMode || isDebitMode)\n          \"\n        >\n          <span\n            class=\"sr-only\"\n            i18n=\"@@manage-templates.bb-table-payments.more-actions\"\n            >More actions</span\n          >\n          <bb-dropdown-menu-ui\n            class=\"bb-button-bar__button\"\n            btnColor=\"unstyled\"\n            btnCircle=\"true\"\n            container=\"body\"\n            data-role=\"more-options\"\n            (bbKeyboardClick)=\"$event.stopPropagation()\"\n          >\n            <ng-template bbDropdownLabel>\n              <bb-icon-ui name=\"ellipsis-h\"></bb-icon-ui>\n            </ng-template>\n            <ng-template bbDropdownMenuItem>\n              <button\n                [attr.aria-label]=\"'Delete ' + item.name\"\n                *ngIf=\"canEdit\"\n                role=\"menuitem\"\n                type=\"button\"\n                class=\"dropdown-item\"\n                (bbKeyboardClick)=\"onEditTemplate(item)\"\n                i18n=\"manage-payment-templates.edit.template\"\n                data-role=\"edit-template-dropdown-item\"\n              >\n                Edit\n              </button>\n              <button\n                *ngIf=\"canDelete\"\n                [attr.aria-label]=\"'Delete ' + item.name\"\n                role=\"menuitem\"\n                type=\"button\"\n                class=\"dropdown-item\"\n                (bbKeyboardClick)=\"openDeleteTemplateModal(item)\"\n                i18n=\"manage-payment-templates.remove.account\"\n                data-role=\"delete-template-dropdown\"\n              >\n                Delete\n              </button>\n            </ng-template>\n          </bb-dropdown-menu-ui>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</div>\n\n<ng-template #actionNotAvailable>\n  <span i18n=\"@@manage-payments.action.not.available\">Not available</span>\n</ng-template>\n\n<ng-template #actionApprove>\n  <span i18n=\"@@manage-payments.action.approve\">Approve</span>\n</ng-template>\n\n<ng-template #actionReject>\n  <span i18n=\"@@manage-payments.action.reject\">Reject</span>\n</ng-template>\n", components: [{ type: TableHeaderCheckboxComponent, selector: "bb-table-header-checkbox", inputs: ["clearSelection"] }, { type: TableCheckboxComponent, selector: "bb-table-checkbox", inputs: ["row", "rowId"] }, { type: i1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: PayordStatusBadgeComponent, selector: "bb-payord-status-badge", inputs: ["status", "statusColorMap", "statusColorDefault", "showAbbreviated"] }, { type: i1$9.BadgeComponent, selector: "bb-badge-ui", inputs: ["color", "text", "abbr", "circle", "wrap", "ariaLabel"] }, { type: i2$2.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: i2$3.DropdownMenuComponent, selector: "bb-dropdown-menu-ui", inputs: ["label", "disabled", "options", "icon", "iconSize", "iconColor", "btnColor", "btnCircle", "optionLabelKey", "fullWidth", "autoClose", "container", "position", "ariaLabel", "dropDownMenuRole", "dropDownMenuId", "buttonSize", "dropDownButtonLabel", "visibleElementDependingOnViewport", "role"], outputs: ["select"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1$8.TableDirective, selector: "table[bbTable]", inputs: ["bbTable"], outputs: ["selectRow", "rowClick", "sort"] }, { type: i1$8.TableFocusDirective, selector: "[bbTableFocus]", inputs: ["focusFirstRowOnChanges"] }, { type: i1$8.TableSortableDirective, selector: "th[bbSortable]", inputs: ["bbSortable", "direction"], outputs: ["sort"] }, { type: i2.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1$8.TableRowDirective, selector: "tr[bbRow]", inputs: ["bbRow"] }, { type: i10.KeyboardClickDirective, selector: "[bbKeyboardClick]", outputs: ["bbKeyboardClick"] }, { type: i7.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i9.TooltipDirective, selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i2$3.DropdownMenuItemDirective, selector: "ng-template[bbDropdownMenuItem]" }, { type: ExportPdfDirective, selector: "[bbExportPdf]", inputs: ["bbExportPdf"] }, { type: i2$3.DropdownLabelDirective, selector: "ng-template[bbDropdownLabel]" }], pipes: { "accountFormatter": AccountFormatterPipe, "titlecase": i2.TitleCasePipe, "date": i2.DatePipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentsTableComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-table-payments-component',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    templateUrl: 'bb-table-payments.component.html',
                }]
        }], ctorParameters: function () { return [{ type: PaymentConfigService }]; }, propDecorators: { items: [{
                type: Input
            }], searchTerm: [{
                type: Input
            }], clearSelection: [{
                type: Input
            }], responseError: [{
                type: Input
            }], canDelete: [{
                type: Input
            }], canEdit: [{
                type: Input
            }], isManageTransfersMode: [{
                type: Input
            }], isDebitMode: [{
                type: Input
            }], paymentMode: [{
                type: Input
            }], totalCount: [{
                type: Input
            }], pageSize: [{
                type: Input
            }], selectTemplate: [{
                type: Output
            }], templateItemClick: [{
                type: Output
            }], paymentItemClick: [{
                type: Output
            }], triggerDeleteTemplate: [{
                type: Output
            }], sort: [{
                type: Output
            }], selectionSet: [{
                type: Output
            }], editTemplate: [{
                type: Output
            }], approvePayment: [{
                type: Output
            }], rejectPayment: [{
                type: Output
            }], cancelPayment: [{
                type: Output
            }], editPayment: [{
                type: Output
            }], copyPayment: [{
                type: Output
            }] } });

class PaymentsListComponent {
    constructor(paymentConfigService) {
        this.paymentConfigService = paymentConfigService;
        this.hostRef = this;
        /**
         * Flag indicates if the user has delete permission.
         * Default value is `false`.
         */
        this.canDelete = false;
        /**
         * Flag indicates if the user has edit permission.
         * Default value is `false`.
         */
        this.canEdit = false;
        /**
         * Flag indicates whether called from Manage transfers
         */
        this.isManageTransfersMode = false;
        /**
         * Number of payment items shown per page.
         */
        this.size = 0;
        /**
         * Payment mode
         * Default is `SINGLE`.
         */
        this.paymentMode = 'SINGLE';
        /**
         * The flag to denote if it is a debit payment.
         */
        this.isDebitMode = false;
        /**
         * Click delete event emitter.
         */
        this.triggerDeleteTemplate = new EventEmitter();
        /**
         * Click template event emitter.
         */
        this.templateItemClick = new EventEmitter();
        /**
         * Select template event emitter
         */
        this.selectTemplate = new EventEmitter();
        /**
         * Edit template event emitter.
         */
        this.editTemplate = new EventEmitter();
        /**
         * Changes will be triggered on paymentItemClick event emit.
         */
        this.paymentItemClick = new EventEmitter();
        /**
         * Approval event emitter
         */
        this.approvePayment = new EventEmitter();
        /**
         * Rejection event emitter
         */
        this.rejectPayment = new EventEmitter();
        /**
         * Cancel event emitter
         */
        this.cancelPayment = new EventEmitter();
        /**
         * Edit event emitter
         */
        this.editPayment = new EventEmitter();
        /**
         * Copy payment event emitter
         */
        this.copyPayment = new EventEmitter();
        /**
         * Selection set
         */
        this.selectionSet = new EventEmitter();
    }
    mapPaymentType(item) {
        return this.paymentConfigService.mapPaymentType(item);
    }
    onSelectItem(item) {
        this.selectTemplate.emit(item);
    }
    onEditTemplate(template) {
        this.editTemplate.emit(Object.assign(Object.assign({}, template), { query: this.searchTerm }));
    }
    openDeleteTemplateModal(item) {
        this.triggerDeleteTemplate.emit(Object.assign(Object.assign({}, item), { query: this.searchTerm }));
    }
    onTemplateClick(template) {
        this.templateItemClick.emit(template);
    }
    onPaymentItemClick(paymentItem) {
        this.paymentItemClick.emit(paymentItem);
    }
    isApprovalProhibited(paymentItem) {
        return this.isActionDisabled(paymentItem === null || paymentItem === void 0 ? void 0 : paymentItem.actions, AvailableActions.APPROVE);
    }
    onApprovePayment(payment, event) {
        event === null || event === void 0 ? void 0 : event.stopPropagation();
        if (!this.isApprovalProhibited(payment)) {
            this.approvePayment.emit(payment);
        }
    }
    isRejectionProhibited(paymentItem) {
        return this.isActionDisabled(paymentItem === null || paymentItem === void 0 ? void 0 : paymentItem.actions, AvailableActions.REJECT);
    }
    onRejectPayment(payment, event) {
        event === null || event === void 0 ? void 0 : event.stopPropagation();
        if (!this.isRejectionProhibited(payment)) {
            this.rejectPayment.emit(payment);
        }
    }
    onCancelPayment(payment) {
        if (!this.isCancelProhibited(payment)) {
            this.cancelPayment.emit(payment);
        }
    }
    onEditPayment(payment) {
        if (!this.isEditProhibited(payment)) {
            this.editPayment.emit(payment);
        }
    }
    onCopyPayment(payment) {
        if (this.canCopyPayment(payment)) {
            this.copyPayment.emit(Object.assign(Object.assign({}, payment), { isPaymentCopy: true }));
        }
    }
    canCopyPayment(payment) {
        return canCopyPayment(payment);
    }
    isEditProhibited(paymentItem) {
        return this.isActionDisabled(paymentItem === null || paymentItem === void 0 ? void 0 : paymentItem.actions, AvailableActions.EDIT);
    }
    isCancelProhibited(paymentItem) {
        return this.isActionDisabled(paymentItem === null || paymentItem === void 0 ? void 0 : paymentItem.actions, AvailableActions.CANCEL);
    }
    hasCreatePermission(item) {
        return hasCreatePermission(item.actions);
    }
    formatExecutionDate(date) {
        let result = date;
        if (result === getRelativeDate()) {
            result = 'today';
        }
        else if (result === getRelativeDate(1)) {
            result = 'tomorrow';
        }
        return result;
    }
    stopPropagation(event) {
        event.stopPropagation();
    }
    transactionInformation(payment) {
        return payment === null || payment === void 0 ? void 0 : payment.transferTransactionInformation;
    }
    isActionDisabled(actions, actionType) {
        return !actions || actions.indexOf(actionType) === -1;
    }
}
/** @nocollapse */ PaymentsListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentsListComponent, deps: [{ token: PaymentConfigService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PaymentsListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PaymentsListComponent, selector: "bb-list-payments-component", inputs: { items: "items", searchTerm: "searchTerm", responseError: "responseError", canDelete: "canDelete", canEdit: "canEdit", isManageTransfersMode: "isManageTransfersMode", size: "size", paymentMode: "paymentMode", isDebitMode: "isDebitMode" }, outputs: { triggerDeleteTemplate: "triggerDeleteTemplate", templateItemClick: "templateItemClick", selectTemplate: "selectTemplate", editTemplate: "editTemplate", paymentItemClick: "paymentItemClick", approvePayment: "approvePayment", rejectPayment: "rejectPayment", cancelPayment: "cancelPayment", editPayment: "editPayment", copyPayment: "copyPayment", selectionSet: "selectionSet" }, ngImport: i0, template: "<div class=\"bb-block bb-block--xl\"></div>\n<div class=\"col-12 bb-list bb-block bb-block--xl px-3\">\n  <div *ngIf=\"items?.length && !responseError\">\n    <div *ngFor=\"let item of items\" class=\"bb-list__item\" tabindex=\"0\">\n      <div\n        (click)=\"\n          isManageTransfersMode || isDebitMode\n            ? onPaymentItemClick(item)\n            : onTemplateClick(item)\n        \"\n      >\n        <div\n          class=\"bb-stack bb-block bb-block--md\"\n          *ngIf=\"!(isManageTransfersMode || isDebitMode)\"\n        >\n          <ng-container>\n            <bb-icon-ui\n              class=\"bb-text-disabled bb-stack__item bb-stack__item--spacing-xl\"\n              name=\"insert-drive-file\"\n            >\n            </bb-icon-ui>\n            <div class=\"bb-stack__item\">\n              <div class=\"bb-text-bold break-word\">\n                {{ item.name }}\n              </div>\n              <div class=\"bb-text-support\" data-role=\"payment-type\">\n                <div #paymentTypeHeading class=\"d-none\" aria-hidden=\"true\">\n                  <ng-container i18n=\"manage-payment-templates.payment-types\">\n                    {item?.details?.paymentType, select, US_FOREIGN_WIRE {US\n                    Foreign Wire Payment} US_FOREIGN_WIRE_ILE {US Foreign Wire\n                    Payment} SEPA_CT_CLOSED {SEPA CT Transfer} SEPA_CT {SEPA CT\n                    Transfer} SEPA_CT_ILE {SEPA CT Transfer}}\n                  </ng-container>\n                </div>\n                {{\n                  mapPaymentType(item)\n                    ? mapPaymentType(item)\n                    : paymentTypeHeading.textContent\n                }}\n              </div>\n            </div>\n          </ng-container>\n\n          <div\n            class=\"bb-stack__item bb-stack__item--push-right\"\n            *ngIf=\"\n              hasCreatePermission(item) &&\n              !(isManageTransfersMode || isDebitMode)\n            \"\n          >\n            <div class=\"bb-stack\">\n              <button\n                bbButton\n                class=\"bb-stack__item\"\n                buttonSize=\"md\"\n                color=\"unstyled\"\n                aria-label=\"Create payment\"\n                i18n-aria-label=\"\n                  Button for create payment from\n                  template@@manage-payment-templates.create-payment.button\"\n                data-role=\"create-payment-button\"\n                bbTooltip=\"Create new payment from this template\"\n                triggers=\"hover focus\"\n                i18n-bbTooltip=\"\n                  Tooltip for create payment from\n                  template@@manage-payment-templates.create-payment.tooltip\"\n                (click)=\"stopPropagation($event); onSelectItem(item)\"\n              >\n                <bb-icon-ui name=\"payments\" class=\"bb-stack__item\">\n                </bb-icon-ui>\n              </button>\n\n              <ng-container *ngIf=\"!(isManageTransfersMode || isDebitMode)\">\n                <span\n                  class=\"sr-only\"\n                  i18n=\"@@manage-transfers.bb-list-templates.more-actions\"\n                  >More actions</span\n                >\n                <bb-dropdown-menu-ui\n                  class=\"bb-button-bar__button\"\n                  btnColor=\"unstyled\"\n                  btnCircle=\"true\"\n                  container=\"body\"\n                  data-role=\"more-options\"\n                  ariaLabel=\"More actions\"\n                  i18n-ariaLabel=\"\n                    @@manage-templates.bb-list-payments.more-actions.label\"\n                  (bbKeyboardClick)=\"$event.stopPropagation()\"\n                  *ngIf=\"canDelete || canEdit\"\n                >\n                  <ng-template bbDropdownLabel>\n                    <bb-icon-ui name=\"ellipsis-h\"></bb-icon-ui>\n                  </ng-template>\n                  <ng-template bbDropdownMenuItem>\n                    <button\n                      *ngIf=\"canEdit\"\n                      role=\"menuitem\"\n                      type=\"button\"\n                      class=\"dropdown-item\"\n                      (bbKeyboardClick)=\"onEditTemplate(item)\"\n                      i18n=\"manage-payment-templates.edit.template\"\n                      data-role=\"edit-template-dropdown-item\"\n                    >\n                      Edit\n                    </button>\n                    <button\n                      *ngIf=\"canDelete\"\n                      [attr.aria-label]=\"'Delete ' + item.name\"\n                      role=\"menuitem\"\n                      type=\"button\"\n                      class=\"dropdown-item\"\n                      (bbKeyboardClick)=\"openDeleteTemplateModal(item)\"\n                      i18n=\"manage-payment-templates.remove.account\"\n                      data-role=\"delete-template-dropdown\"\n                    >\n                      Delete\n                    </button>\n                  </ng-template>\n                </bb-dropdown-menu-ui>\n              </ng-container>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"bb-stack bb-block bb-block--md\">\n          <div class=\"bb-stack__item bb-stack__item--spacing-md bb-text-bold\">\n            From\n          </div>\n          <div class=\"bb-stack__item\">\n            <div data-role=\"payment-debitor-name\" class=\"break-word\">\n              {{\n                isDebitMode ||\n                transactionInformation(item)?.counterparty?.role === 'DEBTOR'\n                  ? transactionInformation(item)?.counterparty?.name\n                  : isManageTransfersMode\n                  ? item.originator?.name\n                  : item.details.originatorAccount.name\n              }}\n            </div>\n            <div\n              class=\"bb-text-support break-word\"\n              data-role=\"payment-debitor-account\"\n            >\n              {{\n                isDebitMode ||\n                transactionInformation(item)?.counterparty?.role === 'DEBTOR'\n                  ? (transactionInformation(item)?.counterpartyAccount\n                      ?.identification | accountFormatter)\n                  : isManageTransfersMode\n                  ? (item.originatorAccount?.identification | accountFormatter)\n                  : (item.details.originatorAccount.identification\n                    | accountFormatter)\n              }}\n            </div>\n          </div>\n          <ng-container *ngIf=\"isManageTransfersMode || isDebitMode\">\n            <div class=\"bb-stack__item bb-stack__item--push-right\">\n              <div class=\"bb-stack\">\n                <bb-payord-status-badge\n                  class=\"d-md-none\"\n                  [status]=\"item.status\"\n                ></bb-payord-status-badge>\n\n                <span\n                  class=\"sr-only\"\n                  i18n=\"@@manage-transfers.bb-list-payments.more-actions\"\n                  >More actions</span\n                >\n                <bb-dropdown-menu-ui\n                  class=\"bb-button-bar__button\"\n                  btnColor=\"unstyled\"\n                  btnCircle=\"true\"\n                  container=\"body\"\n                  data-role=\"more-options\"\n                  (bbKeyboardClick)=\"$event.stopPropagation()\"\n                  i18n-ariaLabel=\"\n                    @@manage-transfers.bb-list-payments.more-actions.label\"\n                >\n                  <ng-template bbDropdownLabel>\n                    <bb-icon-ui name=\"ellipsis-h\"></bb-icon-ui>\n                  </ng-template>\n                  <ng-template bbDropdownMenuItem>\n                    <button\n                      type=\"button\"\n                      role=\"menuitem\"\n                      class=\"dropdown-item\"\n                      *ngIf=\"!isApprovalProhibited(item)\"\n                      (bbKeyboardClick)=\"onApprovePayment(item, $event)\"\n                      i18n=\"\n                        Approve payment|Approve selected\n                        payment@@manage-payments.payment.list.action.approve\"\n                    >\n                      Approve\n                    </button>\n\n                    <button\n                      type=\"button\"\n                      role=\"menuitem\"\n                      class=\"dropdown-item\"\n                      *ngIf=\"!isRejectionProhibited(item)\"\n                      (bbKeyboardClick)=\"onRejectPayment(item, $event)\"\n                      i18n=\"\n                        Reject payment|Reject selected\n                        payment@@manage-payments.payment.list.action.reject\"\n                    >\n                      Reject\n                    </button>\n\n                    <button\n                      type=\"button\"\n                      role=\"menuitem\"\n                      class=\"dropdown-item\"\n                      *ngIf=\"canCopyPayment(item)\"\n                      (bbKeyboardClick)=\"onCopyPayment(item)\"\n                      i18n=\"\n                        copy payment|transfer selected\n                        payment@@manage-payments.payment.list.action.transfer\"\n                    >\n                      Transfer\n                    </button>\n\n                    <button\n                      type=\"button\"\n                      role=\"menuitem\"\n                      class=\"dropdown-item\"\n                      data-role=\"edit-payment-order-dropdown\"\n                      i18n=\"@@manage-payments.payment.list.action.edit\"\n                      *ngIf=\"!isEditProhibited(item)\"\n                      (bbKeyboardClick)=\"onEditPayment(item)\"\n                    >\n                      Edit\n                    </button>\n\n                    <button\n                      type=\"button\"\n                      role=\"menuitem\"\n                      triggers=\"hover\"\n                      placement=\"left\"\n                      class=\"dropdown-item\"\n                      (bbKeyboardClick)=\"onCancelPayment(item)\"\n                      [class.disabled]=\"isCancelProhibited(item)\"\n                      [bbTooltip]=\"\n                        isCancelProhibited(item) && actionNotAvailable\n                      \"\n                      i18n=\"\n                        cancel payment|cancel selected\n                        payment@@manage-payments.payment.list.action.cancel\"\n                    >\n                      Cancel\n                    </button>\n                    <button\n                      type=\"button\"\n                      role=\"menuitem\"\n                      class=\"dropdown-item\"\n                      data-role=\"export-payment-order-dropdown\"\n                      i18n=\"@@manage-payments.payment.list.action.export-pdf\"\n                      *ngIf=\"item.permissibleActions?.export\"\n                      [bbExportPdf]=\"item.id\"\n                    >\n                      Export PDF\n                    </button>\n                  </ng-template>\n                </bb-dropdown-menu-ui>\n              </div>\n            </div>\n          </ng-container>\n        </div>\n\n        <div class=\"bb-stack bb-block bb-block--md\">\n          <div class=\"bb-stack__item bb-stack__item--spacing-xl bb-text-bold\">\n            To\n          </div>\n          <div class=\"bb-stack__item\">\n            <div data-role=\"payment-creditor-name\" class=\"break-word\">\n              {{\n                isDebitMode ||\n                transactionInformation(item)?.counterparty?.role === 'DEBTOR'\n                  ? item.originator?.name\n                  : isManageTransfersMode\n                  ? transactionInformation(item)?.counterparty?.name\n                  : item.details.transferTransactionInformation.counterparty\n                      .name\n              }}\n            </div>\n            <div\n              class=\"bb-text-support break-word\"\n              data-role=\"payment-creditor-account\"\n            >\n              {{\n                isDebitMode ||\n                transactionInformation(item)?.counterparty?.role === 'DEBTOR'\n                  ? (item.originatorAccount?.identification | accountFormatter)\n                  : isManageTransfersMode\n                  ? (transactionInformation(item)?.counterpartyAccount\n                      ?.identification | accountFormatter)\n                  : (item.details.transferTransactionInformation\n                      .counterpartyAccount.identification | accountFormatter)\n              }}\n            </div>\n          </div>\n          <div\n            class=\"bb-stack__item bb-stack__item--push-right\"\n            *ngIf=\"!(isManageTransfersMode || isDebitMode)\"\n          >\n            <bb-amount-ui\n              [amount]=\"\n                item.details.transferTransactionInformation.instructedAmount\n                  .amount\n              \"\n              [currency]=\"\n                item.details.transferTransactionInformation.instructedAmount\n                  .currencyCode\n              \"\n              [mapCurrency]=\"false\"\n            ></bb-amount-ui>\n          </div>\n        </div>\n\n        <div\n          class=\"bb-stack bb-block bb-block--md\"\n          *ngIf=\"isManageTransfersMode || isDebitMode\"\n        >\n          <div class=\"bb-stack__item bb-stack__item--spacing-xl bb-text-bold\">\n            Exec. date\n          </div>\n          <div class=\"bb-stack__item\">\n            <div\n              data-role=\"payment-exec-date\"\n              *ngIf=\"item.schedule?.nextExecutionDate\"\n              i18n=\"@@manage-payments.payment.list.execution-date-value\"\n            >\n              {formatExecutionDate(item.schedule?.nextExecutionDate), select,\n              today {Today} tomorrow {Tomorrow} other\n              {{{ item.schedule?.nextExecutionDate | date:'shortDate'}}} }\n            </div>\n            <div *ngIf=\"!item.schedule?.nextExecutionDate\">\n              {{ item.requestedExecutionDate | date: 'shortDate' }}\n            </div>\n          </div>\n          <div class=\"bb-stack__item bb-stack__item--push-right\">\n            <bb-amount-ui\n              [amount]=\"\n                item.transferTransactionInformation?.instructedAmount.amount\n              \"\n              [currency]=\"\n                item.transferTransactionInformation?.instructedAmount\n                  .currencyCode\n              \"\n              [mapCurrency]=\"false\"\n            ></bb-amount-ui>\n          </div>\n        </div>\n        <div\n          class=\"bb-stack\"\n          *ngIf=\"\n            (paymentMode === 'RECURRING' || paymentMode === 'ALL') &&\n            (isManageTransfersMode || isDebitMode)\n          \"\n        >\n          <div class=\"bb-stack__item bb-stack__item--spacing-xl bb-text-bold\">\n            Frequency\n          </div>\n          <div class=\"bb-stack__item\">\n            <div\n              data-role=\"payment-frequency\"\n              i18n=\"@@manage-payments.payment.list.frequency-value\"\n            >\n              {item.schedule?.transferFrequency, select, DAILY {Daily} WEEKLY\n              {Weekly} MONTHLY {Monthly} QUARTERLY {Quarterly} YEARLY {Yearly}\n              other {{{item.schedule?.transferFrequency | titlecase}}}}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<ng-template #actionNotAvailable>\n  <span i18n=\"@@manage-payments.action.not.available\">Not available</span>\n</ng-template>\n", components: [{ type: i1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i2$3.DropdownMenuComponent, selector: "bb-dropdown-menu-ui", inputs: ["label", "disabled", "options", "icon", "iconSize", "iconColor", "btnColor", "btnCircle", "optionLabelKey", "fullWidth", "autoClose", "container", "position", "ariaLabel", "dropDownMenuRole", "dropDownMenuId", "buttonSize", "dropDownButtonLabel", "visibleElementDependingOnViewport", "role"], outputs: ["select"] }, { type: PayordStatusBadgeComponent, selector: "bb-payord-status-badge", inputs: ["status", "statusColorMap", "statusColorDefault", "showAbbreviated"] }, { type: i2$2.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i7.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i9.TooltipDirective, selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i10.KeyboardClickDirective, selector: "[bbKeyboardClick]", outputs: ["bbKeyboardClick"] }, { type: i2$3.DropdownLabelDirective, selector: "ng-template[bbDropdownLabel]" }, { type: i2$3.DropdownMenuItemDirective, selector: "ng-template[bbDropdownMenuItem]" }, { type: ExportPdfDirective, selector: "[bbExportPdf]", inputs: ["bbExportPdf"] }], pipes: { "accountFormatter": AccountFormatterPipe, "date": i2.DatePipe, "titlecase": i2.TitleCasePipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentsListComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-list-payments-component',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    templateUrl: 'bb-list-payments.component.html',
                }]
        }], ctorParameters: function () { return [{ type: PaymentConfigService }]; }, propDecorators: { items: [{
                type: Input
            }], searchTerm: [{
                type: Input
            }], responseError: [{
                type: Input
            }], canDelete: [{
                type: Input
            }], canEdit: [{
                type: Input
            }], isManageTransfersMode: [{
                type: Input
            }], size: [{
                type: Input
            }], paymentMode: [{
                type: Input
            }], isDebitMode: [{
                type: Input
            }], triggerDeleteTemplate: [{
                type: Output
            }], templateItemClick: [{
                type: Output
            }], selectTemplate: [{
                type: Output
            }], editTemplate: [{
                type: Output
            }], paymentItemClick: [{
                type: Output
            }], approvePayment: [{
                type: Output
            }], rejectPayment: [{
                type: Output
            }], cancelPayment: [{
                type: Output
            }], editPayment: [{
                type: Output
            }], copyPayment: [{
                type: Output
            }], selectionSet: [{
                type: Output
            }] } });

class ScheduleLabelComponent {
    constructor() {
        // @todo should be configurable and passed from parent
        this.minOccurrences = 2;
    }
    get startDate() {
        return this.item && Date.parse(this.item.startDate)
            ? new Date(this.item.startDate)
            : undefined;
    }
    get isSingleFrequency() {
        return (this.item &&
            this.item.frequency &&
            (this.item.frequency.value
                ? this.item.frequency.value.toLocaleLowerCase() === 'once'
                : false));
    }
    get endDate() {
        return this.item && this.item.endDate && Date.parse(this.item.endDate)
            ? new Date(this.item.endDate)
            : undefined;
    }
    isToday() {
        if (this.item === undefined) {
            throw new Error('`item` input is required in `bb-schedule-label-ui` component');
        }
        const today = new Date().setHours(0, 0, 0, 0);
        const startDate = new Date(this.item.startDate);
        return startDate.setHours(0, 0, 0, 0) === today;
    }
    hasEnd() {
        return (!!this.item &&
            (this.item.endDate !== undefined || this.item.repeat !== undefined));
    }
    hasLimit() {
        return this.hasEnd() && !this.isSingleFrequency;
    }
    hasEnoughOccurences() {
        return (!!this.item &&
            this.item.repeat !== undefined &&
            this.item.repeat >= this.minOccurrences);
    }
}
/** @nocollapse */ ScheduleLabelComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ScheduleLabelComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ ScheduleLabelComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ScheduleLabelComponent, selector: "bb-schedule-label-ui", inputs: { item: "item" }, ngImport: i0, template: `
    <span
      i18n="
        Schedule frequency title list|List of titles for available schedule
        frequencies@@bb-schedule-label-ui.frequency.list"
      >{ item?.frequency?.value, select, other {Once} DAILY {Daily} WEEKLY
      {Weekly} BIWEEKLY {Bi-Weekly} MONTHLY {Monthly} QUARTERLY {Quarterly}
      YEARLY {Annually} }</span
    >
    <span>&nbsp;&minus;</span>
    <ng-container *ngIf="isSingleFrequency">
      <span
        *ngIf="isToday()"
        i18n="
          Today|Capitalized word for
          today@@bb-schedule-label-ui.label.today.title"
      >
        Today</span
      >
      <span
        *ngIf="!isToday()"
        i18n="
          On|Word to be used before a date to indicate that the payment will be
          executed on that date@@bb-schedule-label-ui.label.on"
      >
        on</span
      >
    </ng-container>

    <ng-container *ngIf="!isSingleFrequency">
      <span
        i18n="
          Schedule start|Word to be used before a date to indicate that this
          date is a starting date of the
          schedule@@bb-schedule-label-ui.label.start"
      >
        from</span
      >
      <span *ngIf="isToday()">
        <ng-container
          i18n="
            today|Lowercase name for current
            day@@bb-schedule-label-ui.label.today"
        >
          today</ng-container
        >{{ hasLimit() && hasEnoughOccurences() ? ';' : '' }}</span
      >
    </ng-container>

    <span *ngIf="!isToday()">
      {{ startDate | date: 'mediumDate'
      }}{{ hasLimit() && hasEnoughOccurences() ? ';' : '' }}</span
    >

    <ng-container *ngIf="hasLimit() && item?.endDate">
      <span
        i18n="
          Schedule end|Word to be used before a date to indicate that this date
          is an end date of the schedule@@bb-schedule-label-ui.label.end"
      >
        till</span
      >
      <span> {{ endDate | date: 'mediumDate' }}</span>
    </ng-container>
    <ng-container
      *ngIf="
        hasLimit() &&
        (item?.repeat || 0) >= minOccurrences &&
        item?.endType === 'after'
      "
    >
      <span> {{ item?.repeat }}</span>
      <span
        i18n="
          Number of times|Word to be used after number of
          occurences@@bb-schedule-label-ui.label.repeat"
      >
        times</span
      >
    </ng-container>
  `, isInline: true, directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "date": i2.DatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ScheduleLabelComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-schedule-label-ui',
                    template: `
    <span
      i18n="
        Schedule frequency title list|List of titles for available schedule
        frequencies@@bb-schedule-label-ui.frequency.list"
      >{ item?.frequency?.value, select, other {Once} DAILY {Daily} WEEKLY
      {Weekly} BIWEEKLY {Bi-Weekly} MONTHLY {Monthly} QUARTERLY {Quarterly}
      YEARLY {Annually} }</span
    >
    <span>&nbsp;&minus;</span>
    <ng-container *ngIf="isSingleFrequency">
      <span
        *ngIf="isToday()"
        i18n="
          Today|Capitalized word for
          today@@bb-schedule-label-ui.label.today.title"
      >
        Today</span
      >
      <span
        *ngIf="!isToday()"
        i18n="
          On|Word to be used before a date to indicate that the payment will be
          executed on that date@@bb-schedule-label-ui.label.on"
      >
        on</span
      >
    </ng-container>

    <ng-container *ngIf="!isSingleFrequency">
      <span
        i18n="
          Schedule start|Word to be used before a date to indicate that this
          date is a starting date of the
          schedule@@bb-schedule-label-ui.label.start"
      >
        from</span
      >
      <span *ngIf="isToday()">
        <ng-container
          i18n="
            today|Lowercase name for current
            day@@bb-schedule-label-ui.label.today"
        >
          today</ng-container
        >{{ hasLimit() && hasEnoughOccurences() ? ';' : '' }}</span
      >
    </ng-container>

    <span *ngIf="!isToday()">
      {{ startDate | date: 'mediumDate'
      }}{{ hasLimit() && hasEnoughOccurences() ? ';' : '' }}</span
    >

    <ng-container *ngIf="hasLimit() && item?.endDate">
      <span
        i18n="
          Schedule end|Word to be used before a date to indicate that this date
          is an end date of the schedule@@bb-schedule-label-ui.label.end"
      >
        till</span
      >
      <span> {{ endDate | date: 'mediumDate' }}</span>
    </ng-container>
    <ng-container
      *ngIf="
        hasLimit() &&
        (item?.repeat || 0) >= minOccurrences &&
        item?.endType === 'after'
      "
    >
      <span> {{ item?.repeat }}</span>
      <span
        i18n="
          Number of times|Word to be used after number of
          occurences@@bb-schedule-label-ui.label.repeat"
      >
        times</span
      >
    </ng-container>
  `,
                }]
        }], propDecorators: { item: [{
                type: Input
            }] } });

class ScheduleLabelModule {
}
/** @nocollapse */ ScheduleLabelModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ScheduleLabelModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ ScheduleLabelModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ScheduleLabelModule, declarations: [ScheduleLabelComponent], imports: [CommonModule], exports: [ScheduleLabelComponent] });
/** @nocollapse */ ScheduleLabelModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ScheduleLabelModule, imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ScheduleLabelModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [ScheduleLabelComponent],
                    imports: [CommonModule],
                    exports: [ScheduleLabelComponent],
                }]
        }] });

class ConfirmationDialogComponent {
    constructor() {
        this.modalOptions = {
            backdrop: 'static',
            keyboard: false,
        };
        this.comment = '';
        /**
         * The button color for confirm button
         * Default value is `primary`.
         */
        this.confirmButtonColor = 'primary';
        /**
         * The button color for cancel button
         * Default value is `link`.
         */
        this.cancelButtonColor = 'link';
        /**
         * Indicator for confirmation dialog open state.
         * Default value is `false`.
         */
        this.isOpen = false;
        /**
         * Changes will be triggered on confirmAction event emit.
         */
        this.confirm = new EventEmitter();
        /**
         * Changes will be triggered on cancel event emit.
         */
        this.cancel = new EventEmitter();
        /**
         * Show the field for the comment
         * Default value is `false`.
         */
        this.attachComment = false;
        /**
         * Text for comment field label,
         * Default value is `Add comment`.
         */
        this.commentFieldLabel = $localize `:@@bb-confirmation-dialog.comment.label:Add comment`;
    }
    resetComment() {
        if (this.attachComment) {
            this.comment = '';
        }
    }
    onCancelAction() {
        this.cancel.emit();
        this.resetComment();
    }
    onConfirmAction() {
        var _a, _b;
        const _comment = this.comment.trim();
        let emitValue = (_a = this.confirmActionPayload) === null || _a === void 0 ? void 0 : _a.payload;
        if (this.attachComment && !!_comment) {
            emitValue = {
                payload: (_b = this.confirmActionPayload) === null || _b === void 0 ? void 0 : _b.payload,
                comment: _comment,
            };
        }
        this.confirm.emit(emitValue);
        this.resetComment();
    }
}
/** @nocollapse */ ConfirmationDialogComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ConfirmationDialogComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ ConfirmationDialogComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ConfirmationDialogComponent, selector: "bb-confirmation-dialog", inputs: { confirmButtonColor: "confirmButtonColor", cancelButtonColor: "cancelButtonColor", isOpen: "isOpen", confirmActionPayload: "confirmActionPayload", attachComment: "attachComment", commentFieldLabel: "commentFieldLabel" }, outputs: { confirm: "confirm", cancel: "cancel" }, ngImport: i0, template: "<bb-modal-ui [isOpen]=\"isOpen\" [modalOptions]=\"modalOptions\">\n  <bb-modal-header-ui>\n    <ng-template bbCustomModalHeader>\n      <span #headerContent class=\"d-none\" aria-hidden=\"true\">\n        <ng-content select=\"[title]\"></ng-content>\n      </span>\n      <bb-header-ui\n        headingType=\"h2\"\n        [heading]=\"headerContent.textContent\"\n        [attr.data-role]=\"'confirmation-header'\"\n      ></bb-header-ui>\n    </ng-template>\n  </bb-modal-header-ui>\n\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody>\n      <div [ngClass]=\"{ 'bb-block bb-block--md': attachComment }\">\n        <ng-content select=\"[body]\"></ng-content>\n      </div>\n\n      <ng-container *ngIf=\"attachComment && isOpen\">\n        <label\n          [for]=\"commentField.id\"\n          i18n=\"@@bb-confirmation-dialog.comment\"\n          >{{ commentFieldLabel }}</label\n        >\n        <span class=\"bb-text-support\">\n          (<ng-container i18n=\"@@bb-confirmation-dialog.comment.optional-label\"\n            >Optional</ng-container\n          >)\n        </span>\n        <bb-textarea-ui\n          #commentField\n          wrap=\"hard\"\n          [rows]=\"3\"\n          [cols]=\"50\"\n          [minLength]=\"3\"\n          [maxLength]=\"140\"\n          [(ngModel)]=\"comment\"\n          showCharCounter=\"true\"\n          data-role=\"confirmation-comment\"\n        ></bb-textarea-ui>\n      </ng-container>\n    </ng-template>\n  </bb-modal-body-ui>\n\n  <bb-modal-footer-ui>\n    <ng-template bbCustomModalFooter>\n      <div class=\"bb-button-bar\">\n        <button\n          bbButton\n          [color]=\"confirmButtonColor\"\n          class=\"bb-button-bar__button\"\n          (click)=\"onConfirmAction()\"\n          [attr.data-role]=\"'confirm-action-btn'\"\n        >\n          <ng-content select=\"[confirmActionName]\"></ng-content>\n        </button>\n\n        <button\n          bbButton\n          (click)=\"onCancelAction()\"\n          [color]=\"cancelButtonColor\"\n          class=\"bb-button-bar__button\"\n          [attr.data-role]=\"'cancel-action-btn'\"\n        >\n          <ng-content select=\"[cancelActionName]\"></ng-content>\n        </button>\n      </div>\n    </ng-template>\n  </bb-modal-footer-ui>\n</bb-modal-ui>\n", components: [{ type: i1$3.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i1$3.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i3$2.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i1$3.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: i3$4.TextareaComponent, selector: "bb-textarea-ui", inputs: ["rows", "cols", "placeholder", "maxLength", "minLength", "readonly", "showCharCounter", "wrap"] }, { type: i1$3.ModalFooterComponent, selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }], directives: [{ type: i1$3.CustomModalHeaderDirective, selector: "ng-template[bbCustomModalHeader]" }, { type: i1$3.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i1$3.CustomModalFooterDirective, selector: "ng-template[bbCustomModalFooter]" }, { type: i7.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ConfirmationDialogComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-confirmation-dialog',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    templateUrl: 'confirmation-dialog.component.html',
                }]
        }], propDecorators: { confirmButtonColor: [{
                type: Input
            }], cancelButtonColor: [{
                type: Input
            }], isOpen: [{
                type: Input
            }], confirmActionPayload: [{
                type: Input
            }], confirm: [{
                type: Output
            }], cancel: [{
                type: Output
            }], attachComment: [{
                type: Input
            }], commentFieldLabel: [{
                type: Input
            }] } });

class ConfirmationDialogModule {
}
/** @nocollapse */ ConfirmationDialogModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ConfirmationDialogModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ ConfirmationDialogModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ConfirmationDialogModule, declarations: [ConfirmationDialogComponent], imports: [CommonModule,
        HeaderModule,
        ModalModule,
        TextareaModule,
        ButtonModule,
        FormsModule], exports: [ConfirmationDialogComponent] });
/** @nocollapse */ ConfirmationDialogModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ConfirmationDialogModule, imports: [[
            CommonModule,
            HeaderModule,
            ModalModule,
            TextareaModule,
            ButtonModule,
            FormsModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ConfirmationDialogModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [ConfirmationDialogComponent],
                    imports: [
                        CommonModule,
                        HeaderModule,
                        ModalModule,
                        TextareaModule,
                        ButtonModule,
                        FormsModule,
                    ],
                    exports: [ConfirmationDialogComponent],
                }]
        }] });

class PaymentsSearchComponent {
    constructor() {
        /**
         * Reference to instance of customizable component.
         */
        this.hostRef = this;
        this.gc$ = new Subject();
        this.debounceSearch$ = new Subject();
        this.searchTerm = '';
        /**
         * Time delay between each search requests in milliseconds.
         * Default is 300
         */
        this.debounceTime = DefaultDebounceTime;
        /**
         * Minimum search length
         * Default is 3
         */
        this.searchMinLength = SearchMinLength;
        /**
         * Changes will be triggered on search
         */
        this.search = new EventEmitter();
    }
    ngOnInit() {
        this.debounceSearch$
            .pipe(takeUntil(this.gc$), debounceTime(this.debounceTime), distinctUntilChanged())
            .subscribe((term) => {
            if (!term || term.length >= this.searchMinLength) {
                this.search.emit(term);
            }
        });
    }
    startSearching(query) {
        this.searchTerm = query;
        this.debounceSearch$.next(this.searchTerm);
    }
    clearSearching() {
        this.searchTerm = '';
        this.debounceSearch$.next(this.searchTerm);
    }
    submitSearch() {
        if (this.searchTerm.length >= this.searchMinLength) {
            this.search.emit(this.searchTerm);
        }
    }
    ngOnDestroy() {
        this.gc$.next();
        this.debounceSearch$.complete();
        this.gc$.complete();
    }
}
/** @nocollapse */ PaymentsSearchComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentsSearchComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PaymentsSearchComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PaymentsSearchComponent, selector: "bb-payments-search", inputs: { debounceTime: "debounceTime", searchMinLength: "searchMinLength" }, outputs: { search: "search" }, ngImport: i0, template: "<ng-container bbPaymentsSearchCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n<ng-template bbPaymentsSearchCustomizable let-hostRef>\n  <div class=\"payments-search-container\">\n    <bb-search-box-ui\n      placeholder=\"Search\"\n      i18n-placeholder=\"@@payments-list.placeholder.search\"\n      aria-label=\"Search payments\"\n      i18n-aria-label=\"@@payments-list.label.search\"\n      [showSearch]=\"true\"\n      [showClear]=\"true\"\n      (submit)=\"hostRef.submitSearch()\"\n      (clear)=\"hostRef.clearSearching()\"\n      (search)=\"$event.stopPropagation()\"\n      [ngModel]=\"hostRef.searchTerm\"\n      (ngModelChange)=\"hostRef.startSearching($event)\"\n      data-role=\"searchbox\"\n    >\n    </bb-search-box-ui>\n  </div>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i2$1.SearchBoxComponent; }), selector: "bb-search-box-ui", inputs: ["placeholder", "maxLength", "squareBorder", "typeaheadOptions", "showSearch", "showClear", "searchLabel", "clearLabel", "autocomplete"], outputs: ["submit", "clear", "valueChange"] }], directives: [{ type: i0.forwardRef(function () { return PaymentsSearchCustomizableDirective; }), selector: "[bbPaymentsSearchCustomizable]" }, { type: i0.forwardRef(function () { return i1$1.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0.forwardRef(function () { return i1$1.NgModel; }), selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentsSearchComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payments-search',
                    templateUrl: 'payments-search.component.html',
                }]
        }], propDecorators: { debounceTime: [{
                type: Input
            }], searchMinLength: [{
                type: Input
            }], search: [{
                type: Output
            }] } });
class PaymentsSearchCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ PaymentsSearchCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentsSearchCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ PaymentsSearchCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: PaymentsSearchCustomizableDirective, selector: "[bbPaymentsSearchCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentsSearchCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbPaymentsSearchCustomizable]',
                }]
        }] });

class PaymentsFilterComponent {
    constructor(fb) {
        this.fb = fb;
        /**
         * Reference to instance of customizable component.
         */
        this.hostRef = this;
        /**
         * Reference to Status enum
         */
        this.statusesMap = Status;
        this.paymentsFilterForm = this.fb.group({
            status: new FormControl(),
            amount: this.fb.group({
                from: ['', Validators.min(0)],
                to: ['', Validators.min(0)],
            }, { validator: this.amountValidator.bind(this) }),
            executionDate: new FormControl(),
        });
        this.gc$ = new Subject();
        this.filterValueChanges = this.paymentsFilterForm.valueChanges.pipe(takeUntil(this.gc$));
        this.alreadyApplied = false;
        /**
         * EventEmitter for triggering a filter action.
         */
        this.filter = new EventEmitter();
        /**
         * EventEmitter for closing filter form
         */
        this.closeFilter = new EventEmitter();
        /**
         * EventEmitter for displaying wether filter was applied or not
         */
        this.isFilterApplied = new EventEmitter();
        /**
         * EventEmitter for when form is reset. Search should be executed
         */
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.reset = new EventEmitter();
        /**
         * String array with statuses that should not be available in current instance
         */
        this.statusBlackList = [];
    }
    ngOnInit() {
        this.onFilterChanges();
    }
    /**
     * Emit event to apply filter.
     *
     * @param filterParams - Options to filter transactions list with.
     */
    onFilter(filterParams) {
        if (filterParams.status) {
            filterParams.status = this.filterStatusMap(filterParams.status);
        }
        this.filter.emit(this.normalizeFilterValues(filterParams));
        this.alreadyApplied = true;
    }
    /**
     * Clear filter form, reset values to default and emit event to apply filter.
     */
    onClearFilter() {
        this.paymentsFilterForm.reset();
        this.paymentsFilterForm.markAsPristine();
        if (this.alreadyApplied) {
            this.reset.emit(Object.assign({}, this.paymentsFilterForm.value));
        }
        this.isFilterApplied.emit(false);
        this.alreadyApplied = false;
    }
    /**
     * Emit event to close this filter form.
     */
    onCloseFilter() {
        this.closeFilter.emit();
    }
    isApplyButtonDisabled() {
        const amountControl = this.paymentsFilterForm.get('amount');
        const executionDateControl = this.paymentsFilterForm.get('executionDate');
        return !!(this.paymentsFilterForm.pristine ||
            (amountControl === null || amountControl === void 0 ? void 0 : amountControl.invalid) ||
            (executionDateControl === null || executionDateControl === void 0 ? void 0 : executionDateControl.invalid));
    }
    amountValidator(group) {
        const amountControls = group.controls;
        const toControlHasValue = amountControls.to.value || amountControls.to.value === 0;
        this.resetAmountError(amountControls.to);
        this.resetAmountError(amountControls.from);
        if (toControlHasValue &&
            amountControls.from.value > amountControls.to.value) {
            amountControls.to.setErrors(Object.assign({ incorrectAmount: true }, amountControls.to.errors));
            amountControls.from.setErrors(Object.assign({ incorrectAmount: true }, amountControls.from.errors));
        }
    }
    resetAmountError(control) {
        let controlErrors = control.errors;
        controlErrors === null || controlErrors === void 0 ? true : delete controlErrors.incorrectAmount;
        if (!Object.keys(Object.assign({}, controlErrors)).length) {
            controlErrors = null;
        }
        control.setErrors(controlErrors);
    }
    get amountToControl() {
        var _a;
        return (_a = this.paymentsFilterForm.get('amount')) === null || _a === void 0 ? void 0 : _a.get('to');
    }
    /**
     * filterStatusMap Converts `PROCESSING`status in the array,
     * to `READY`, `ACKNOWLEDGED`, and `DOWNLOADING` since the server
     * uses the statuses, but the user should only see them as
     * `PROCESSING`
     */
    filterStatusMap(statuses) {
        const processingStatusMapping = [
            this.statusesMap.READY,
            this.statusesMap.ACKNOWLEDGED,
            this.statusesMap.DOWNLOADING,
        ];
        const retVal = statuses.includes(this.statusesMap.PROCESSING)
            ? [
                ...statuses.filter((status) => status !== this.statusesMap.PROCESSING),
                ...processingStatusMapping,
            ]
            : statuses;
        return retVal;
    }
    normalizeFilterValues(model) {
        if (model.executionDate &&
            model.executionDate.from &&
            !model.executionDate.to) {
            model.executionDate.to = model.executionDate.from;
        }
        return model;
    }
    /**
     * onFilterChanges generates the subscription that will
     * mark the form as pristine if no filter inputs have values
     */
    onFilterChanges() {
        this.filterValueChanges.subscribe((val) => {
            if (val.status ||
                val.amount.from ||
                val.amount.to ||
                (val.executionDate && val.executionDate.from)) {
                return;
            }
            this.paymentsFilterForm.markAsPristine();
            if (this.alreadyApplied) {
                this.reset.emit(Object.assign({}, this.paymentsFilterForm.value));
                this.alreadyApplied = false;
                this.isFilterApplied.emit(false);
            }
        });
    }
    ngOnDestroy() {
        this.gc$.next();
        this.gc$.complete();
    }
    getExecutionDateErrorId(executionDateId) {
        return `${executionDateId}__error`;
    }
    getExecutionDateDescribedBy(executionDateId) {
        return `date-range-header-${executionDateId} ${this.getExecutionDateErrorId(executionDateId)}`;
    }
}
/** @nocollapse */ PaymentsFilterComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentsFilterComponent, deps: [{ token: i1$1.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PaymentsFilterComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PaymentsFilterComponent, selector: "bb-payments-filter", inputs: { statusBlackList: "statusBlackList" }, outputs: { filter: "filter", closeFilter: "closeFilter", isFilterApplied: "isFilterApplied", reset: "reset" }, ngImport: i0, template: "<ng-container bbPaymentsFilterCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbPaymentsFilterCustomizable let-hostRef>\n  <form class=\"form bg-lighter\" [formGroup]=\"hostRef.paymentsFilterForm\">\n    <div class=\"bb-block bb-block--md\">\n      <div class=\"row\">\n        <!-- Payment Status select -->\n        <div class=\"bb-block bb-block--md col-12 col-md-6 col-xl-4\">\n          <bb-dropdown-multi-select-ui\n            label=\"Status\"\n            i18n-label=\"@@bb-payments-filter.form.label.status\"\n            placeholder=\"All\"\n            i18n-placeholder=\"@@bb-payments-filter.form.label.status.all\"\n            formControlName=\"status\"\n            data-role=\"select-status\"\n          >\n            <bb-dropdown-multi-select-option-ui\n              *ngIf=\"\n                !hostRef.statusBlackList.includes(hostRef.statusesMap.ENTERED)\n              \"\n              label=\"Entered\"\n              [value]=\"hostRef.statusesMap.ENTERED\"\n              i18n-label=\"@@payments.filter.dropdown.option.entered\"\n            >\n            </bb-dropdown-multi-select-option-ui>\n            <bb-dropdown-multi-select-option-ui\n              *ngIf=\"\n                !hostRef.statusBlackList.includes(\n                  hostRef.statusesMap.PROCESSING\n                )\n              \"\n              label=\"Processing\"\n              [value]=\"hostRef.statusesMap.PROCESSING\"\n              i18n-label=\"@@payments.filter.dropdown.option.processing\"\n            >\n            </bb-dropdown-multi-select-option-ui>\n            <bb-dropdown-multi-select-option-ui\n              *ngIf=\"\n                !hostRef.statusBlackList.includes(hostRef.statusesMap.PROCESSED)\n              \"\n              label=\"Processed\"\n              [value]=\"hostRef.statusesMap.PROCESSED\"\n              i18n-label=\"@@payments.filter.dropdown.option.processed\"\n            >\n            </bb-dropdown-multi-select-option-ui>\n            <bb-dropdown-multi-select-option-ui\n              *ngIf=\"\n                !hostRef.statusBlackList.includes(hostRef.statusesMap.ACCEPTED)\n              \"\n              label=\"Accepted\"\n              [value]=\"hostRef.statusesMap.ACCEPTED\"\n              i18n-label=\"@@payments.filter.dropdown.option.accepted\"\n            >\n            </bb-dropdown-multi-select-option-ui>\n            <bb-dropdown-multi-select-option-ui\n              *ngIf=\"\n                !hostRef.statusBlackList.includes(hostRef.statusesMap.REJECTED)\n              \"\n              label=\"Rejected\"\n              [value]=\"hostRef.statusesMap.REJECTED\"\n              i18n-label=\"@@payments.filter.dropdown.option.rejected\"\n            >\n            </bb-dropdown-multi-select-option-ui>\n            <bb-dropdown-multi-select-option-ui\n              *ngIf=\"\n                !hostRef.statusBlackList.includes(\n                  hostRef.statusesMap.CANCELLATION_PENDING\n                )\n              \"\n              label=\"Cancellation pending\"\n              [value]=\"hostRef.statusesMap.CANCELLATION_PENDING\"\n              i18n-label=\"\n                @@payments.filter.dropdown.option.cancellation-pending\"\n            >\n            </bb-dropdown-multi-select-option-ui>\n            <bb-dropdown-multi-select-option-ui\n              *ngIf=\"\n                !hostRef.statusBlackList.includes(hostRef.statusesMap.CANCELLED)\n              \"\n              label=\"Cancelled\"\n              [value]=\"hostRef.statusesMap.CANCELLED\"\n              i18n-label=\"@@payments.filter.dropdown.option.cancelled\"\n            >\n            </bb-dropdown-multi-select-option-ui>\n          </bb-dropdown-multi-select-ui>\n        </div>\n        <!-- Amount range -->\n        <fieldset class=\"bb-block bb-block--md col-12 col-md-6 col-xl-4\">\n          <label\n            i18n=\"amount from@@bb-payments-filter.form.label.amount\"\n            [for]=\"'payment-filter-amount' + min.id + '-' + max.id + '-group'\"\n          >\n            Amount\n          </label>\n          <div\n            class=\"row\"\n            [id]=\"'payment-filter-amount' + min.id + '-' + max.id + '-group'\"\n            formGroupName=\"amount\"\n          >\n            <bb-input-number-ui\n              #min\n              class=\"col-6\"\n              formControlName=\"from\"\n              min=\"0\"\n              aria-label=\"Amount From\"\n              placeholder=\"min\"\n              i18n-aria-label=\"\n                amount from aria@@bb-payments-filter.form.ariaLabel.amountFrom\"\n              i18n-placeholder=\"@@bb-payments-filter.form.placeholder.min\"\n              data-role=\"input-amount-from\"\n            >\n            </bb-input-number-ui>\n            <bb-input-number-ui\n              #max\n              [min]=\"min.value || 0\"\n              class=\"col-6\"\n              formControlName=\"to\"\n              placeholder=\"max\"\n              aria-label=\"Amount To\"\n              i18n-aria-label=\"\n                amount to aria@@bb-payments-filter.form.ariaLabel.amountTo\"\n              i18n-placeholder=\"@@bb-payments-filter.form.placeholder.max\"\n              data-role=\"input-amount-to\"\n            >\n              <!-- Do not remove label, placeholder needed for layout not to break -->\n            </bb-input-number-ui>\n            <bb-input-validation-message-ui\n              class=\"col-12\"\n              id=\"amountError\"\n              [showErrors]=\"\n                hostRef.amountToControl?.touched &&\n                hostRef.amountToControl?.errors?.incorrectAmount\n              \"\n            >\n              <span i18n=\"@@payments.filter.invalid-amount-range-error\"\n                >Maximum amount cannot be smaller than the minimum amount</span\n              >\n            </bb-input-validation-message-ui>\n          </div>\n        </fieldset>\n        <!-- Date range -->\n        <div class=\"bb-block bb-block--md col-12 col-md-6 col-xl-4\">\n          <label\n            [for]=\"executionDate.id\"\n            i18n=\"@@bb-payments-filter.form.label.executionDate\"\n            [id]=\"'date-range-header-' + executionDate.id\"\n          >\n            Execution date\n          </label>\n          <bb-input-datepicker-ui\n            name=\"executionDate\"\n            formControlName=\"executionDate\"\n            data-role=\"input-date\"\n            aria-label=\"Execution date range\"\n            i18n-aria-label=\"\n              amount to aria@@bb-payments-filter.form.ariaLabel.executionDate\"\n            overrideDateFormat=\"MM/dd/y\"\n            [placeholder]=\"'MM/DD/YY - MM/DD/YY'\"\n            [rangeSelection]=\"true\"\n            [attr.aria-describedby]=\"\n              getExecutionDateDescribedBy(executionDate?.id)\n            \"\n            #executionDate\n          >\n          </bb-input-datepicker-ui>\n          <bb-input-validation-message-ui\n            *ngIf=\"\n              paymentsFilterForm.get('executionDate') as executionDateControl\n            \"\n            [attr.id]=\"getExecutionDateErrorId(executionDate?.id)\"\n            [showErrors]=\"\n              executionDateControl?.touched && executionDateControl?.invalid\n            \"\n          >\n            <span i18n=\"@@payments.filter.invalid-date-range-error\"\n              >Please provide a valid date range format.</span\n            >\n          </bb-input-validation-message-ui>\n        </div>\n      </div>\n    </div>\n    <div class=\"bb-button-bar bb-button-bar--reverse\">\n      <!-- Apply -->\n      <button\n        bbButton\n        type=\"submit\"\n        class=\"bb-button-bar__button\"\n        (click)=\"hostRef.onFilter(hostRef.paymentsFilterForm.value)\"\n        color=\"primary\"\n        data-role=\"btn-apply\"\n        [disabled]=\"hostRef.isApplyButtonDisabled()\"\n        i18n=\"@@bb-payments-filter.form.button.apply\"\n      >\n        Apply\n      </button>\n      <!-- Close -->\n      <button\n        bbButton\n        type=\"button\"\n        color=\"secondary\"\n        class=\"bb-button-bar__button\"\n        data-role=\"btn-cancel\"\n        i18n=\"@@bb-payments-filter.form.button.close\"\n        (click)=\"hostRef.onCloseFilter()\"\n      >\n        Close\n      </button>\n      <!-- Clear all -->\n      <button\n        bbButton\n        type=\"reset\"\n        color=\"link\"\n        class=\"bb-button-bar__button\"\n        i18n=\"@@bb-payments-filter.form.button.clearAll\"\n        (click)=\"hostRef.onClearFilter()\"\n        *ngIf=\"hostRef.paymentsFilterForm.dirty\"\n        data-role=\"btn-clear-all\"\n      >\n        Clear All\n      </button>\n    </div>\n  </form>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i2$4.DropdownMultiSelectComponent; }), selector: "bb-dropdown-multi-select-ui", inputs: ["dropdownHeaderText", "placeholder", "label", "filtering", "readonly"] }, { type: i0.forwardRef(function () { return i2$4.DropdownMultiSelectOptionComponent; }), selector: "bb-dropdown-multi-select-option-ui", inputs: ["id", "value", "label", "state"] }, { type: i0.forwardRef(function () { return i3$5.InputNumberComponent; }), selector: "bb-input-number-ui", inputs: ["placeholder", "max", "min", "step", "readonly", "autocomplete", "ariaLabel", "allowNonDigits", "allowNegativeSign"] }, { type: i0.forwardRef(function () { return i4.InputValidationMessageComponent; }), selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i0.forwardRef(function () { return i1$c.InputDatepickerComponent; }), selector: "bb-input-datepicker-ui", inputs: ["rangeSelection", "rangeSelectionSplit", "clickOpen", "focusOpen", "placement", "datepickerDescribedby", "ariaLabelForButton", "minDate", "maxDate", "markDisabled", "icon", "iconSize", "iconColor", "btnColor", "ariaLabel", "navigation", "autocomplete", "firstDayOfWeek", "displayMonths", "placeholder", "overrideDateFormat"], outputs: ["focusedDate"] }], directives: [{ type: i0.forwardRef(function () { return PaymentsFilterCustomizableDirective; }), selector: "[bbPaymentsFilterCustomizable]" }, { type: i0.forwardRef(function () { return i1$1.ɵNgNoValidate; }), selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i0.forwardRef(function () { return i1$1.NgControlStatusGroup; }), selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i0.forwardRef(function () { return i1$1.FormGroupDirective; }), selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i0.forwardRef(function () { return i1$1.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0.forwardRef(function () { return i1$1.FormControlName; }), selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i0.forwardRef(function () { return i2.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i1$1.FormGroupName; }), selector: "[formGroupName]", inputs: ["formGroupName"] }, { type: i0.forwardRef(function () { return i7.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentsFilterComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payments-filter',
                    templateUrl: 'payments-filter.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1$1.FormBuilder }]; }, propDecorators: { filter: [{
                type: Output
            }], closeFilter: [{
                type: Output
            }], isFilterApplied: [{
                type: Output
            }], reset: [{
                type: Output
            }], statusBlackList: [{
                type: Input
            }] } });
class PaymentsFilterCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ PaymentsFilterCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentsFilterCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ PaymentsFilterCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: PaymentsFilterCustomizableDirective, selector: "[bbPaymentsFilterCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentsFilterCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbPaymentsFilterCustomizable]',
                }]
        }] });

class PaymentsControlsComponent {
    constructor() {
        /**
         * Reference to instance of customizable component.
         */
        this.hostRef = this;
        /**
         * Reference to Status enum
         */
        this.statusesMap = Status;
        /**
         * EventEmitter for triggering a filter action.
         */
        this.applyFilter = new EventEmitter();
        /**
         * Subject will emit when searchbox from payment-search input changes
         */
        this.search$ = new BehaviorSubject('');
        /**
         * Subject that will emit when filters from payments-filter are modified
         */
        this.filters$ = new BehaviorSubject({
            executionDate: {},
            status: [],
            amount: {},
        });
        /**
         * Whether the filter form is shown.
         */
        this.isFilterOpen = false;
        /**
         * Whether a filter is applied on the transactions.
         */
        this.isFilterApplied = false;
        this.filterParams$ = new Subject();
        /**
         * destroy$ should emit only when component is destroyed to
         * signal subscriptions to unsubscribe.
         */
        this.destroy$ = new Subject();
        /**
         * Subscription will emit for the search to be triggered
         */
        combineLatest([this.search$, this.filters$])
            .pipe(takeUntil(this.destroy$), distinctUntilChanged())
            .subscribe(([query, filterObject]) => {
            const retVal = Object.assign({ query }, filterObject);
            this.applyFilter.emit(retVal);
        });
    }
    /**
     * Search event callback
     */
    onSearch(searchParam) {
        this.search$.next(searchParam);
    }
    /**
     * Filter event callback
     */
    onFilter(filterParams) {
        this.filters$.next(filterParams);
        this.isFilterApplied = true;
    }
    /**
     * Close event callback to hide the filters controls
     */
    onClose() {
        this.isFilterOpen = false;
    }
    /**
     * Toogle method to hide or show the filter form
     */
    toggleFilter() {
        this.isFilterOpen = !this.isFilterOpen;
    }
    /**
     * Handle effects when filter is reset
     */
    onFilterReset(event) {
        this.isFilterApplied = event;
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
        this.filterParams$.complete();
        this.search$.complete();
        this.filters$.complete();
    }
}
/** @nocollapse */ PaymentsControlsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentsControlsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PaymentsControlsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PaymentsControlsComponent, selector: "bb-payments-controls", inputs: { debounceTime: "debounceTime" }, outputs: { applyFilter: "applyFilter" }, ngImport: i0, template: "<ng-container\n  bbPaymentsControlsCustomizable\n  [bbHostRef]=\"hostRef\"\n></ng-container>\n\n<ng-template bbPaymentsControlsCustomizable let-hostRef>\n  <div (keydown)=\"$event?.stopPropagation()\">\n    <div class=\"bb-block\" [ngClass]=\"{ 'bb-block--md': hostRef.isFilterOpen }\">\n      <div class=\"bb-stack\">\n        <!-- Search -->\n        <div class=\"bb-stack__item bb-stack__item--fill--lg-down\">\n          <bb-payments-search\n            [debounceTime]=\"hostRef.debounceTime\"\n            (search)=\"hostRef.onSearch($event)\"\n            data-role=\"searchbox\"\n          >\n          </bb-payments-search>\n        </div>\n        <div class=\"bb-stack__item d-none d-xl-block\">\n          <!-- Filter button -->\n          <button\n            bbButton\n            [color]=\"hostRef.isFilterApplied ? 'primary' : 'secondary'\"\n            aria-label=\"Toggle filter\"\n            [attr.aria-expanded]=\"hostRef.isFilterOpen\"\n            i18n-aria-label=\"\n              Filter payments@@payments.ariaLabel.filter.big.button\"\n            (click)=\"hostRef.toggleFilter()\"\n            [attr.data-role]=\"'btn-filter'\"\n          >\n            <bb-icon-ui name=\"filter\"></bb-icon-ui>\n            <ng-container\n              *ngIf=\"!hostRef.isFilterApplied\"\n              i18n=\"Filter toggle button@@transactions.filter.button\"\n            >\n              Filter\n            </ng-container>\n            <ng-container\n              *ngIf=\"hostRef.isFilterApplied\"\n              i18n=\"Filter toggle button@@transactions.filtersApplied.button\"\n            >\n              Filters applied\n            </ng-container>\n          </button>\n        </div>\n        <div class=\"bb-stack__item bb-stack__item--push-right d-xl-none\">\n          <button\n            bbButton\n            [color]=\"hostRef.isFilterApplied ? 'primary' : 'secondary'\"\n            circle=\"true\"\n            aria-label=\"Toggle filter\"\n            i18n-aria-label=\"\n              Filter payments@@payments.ariaLabel.filter.small.button\"\n            (click)=\"hostRef.toggleFilter()\"\n            [attr.data-role]=\"'btn-filter'\"\n          >\n            <bb-icon-ui name=\"filter\"></bb-icon-ui>\n          </button>\n        </div>\n      </div>\n    </div>\n    <bb-payments-filter\n      [statusBlackList]=\"[hostRef.statusesMap.CANCELLATION_PENDING]\"\n      (filter)=\"hostRef.onFilter($event)\"\n      (isFilterApplied)=\"hostRef.onFilterReset($event)\"\n      (closeFilter)=\"hostRef.onClose()\"\n      (reset)=\"hostRef.onFilter($event)\"\n      [hidden]=\"!hostRef.isFilterOpen\"\n    >\n    </bb-payments-filter>\n  </div>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return PaymentsSearchComponent; }), selector: "bb-payments-search", inputs: ["debounceTime", "searchMinLength"], outputs: ["search"] }, { type: i0.forwardRef(function () { return i1.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0.forwardRef(function () { return PaymentsFilterComponent; }), selector: "bb-payments-filter", inputs: ["statusBlackList"], outputs: ["filter", "closeFilter", "isFilterApplied", "reset"] }], directives: [{ type: i0.forwardRef(function () { return PaymentsControlsCustomizableDirective; }), selector: "[bbPaymentsControlsCustomizable]" }, { type: i0.forwardRef(function () { return i2.NgClass; }), selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i0.forwardRef(function () { return i7.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0.forwardRef(function () { return i2.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentsControlsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payments-controls',
                    templateUrl: 'payments-controls.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { debounceTime: [{
                type: Input
            }], applyFilter: [{
                type: Output
            }] } });
class PaymentsControlsCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ PaymentsControlsCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentsControlsCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ PaymentsControlsCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: PaymentsControlsCustomizableDirective, selector: "[bbPaymentsControlsCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentsControlsCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbPaymentsControlsCustomizable]',
                }]
        }] });

class PaymentsSearchModule {
}
/** @nocollapse */ PaymentsSearchModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentsSearchModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ PaymentsSearchModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentsSearchModule, declarations: [PaymentsSearchComponent, PaymentsSearchCustomizableDirective], imports: [CommonModule, FormsModule, SearchBoxModule, ReactiveFormsModule], exports: [PaymentsSearchComponent, PaymentsSearchCustomizableDirective] });
/** @nocollapse */ PaymentsSearchModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentsSearchModule, imports: [[CommonModule, FormsModule, SearchBoxModule, ReactiveFormsModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentsSearchModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [PaymentsSearchComponent, PaymentsSearchCustomizableDirective],
                    imports: [CommonModule, FormsModule, SearchBoxModule, ReactiveFormsModule],
                    exports: [PaymentsSearchComponent, PaymentsSearchCustomizableDirective],
                }]
        }] });

('@backbase/payord-form-builder-ang');
const uiModules$1 = [
    ButtonModule,
    DropdownMultiSelectModule,
    InputDatepickerModule,
    InputValidationMessageModule,
    InputNumberModule,
];
class PaymentsFilterModule {
}
/** @nocollapse */ PaymentsFilterModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentsFilterModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ PaymentsFilterModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentsFilterModule, declarations: [PaymentsFilterComponent, PaymentsFilterCustomizableDirective], imports: [CommonModule, ReactiveFormsModule, ButtonModule,
        DropdownMultiSelectModule,
        InputDatepickerModule,
        InputValidationMessageModule,
        InputNumberModule], exports: [PaymentsFilterComponent, PaymentsFilterCustomizableDirective] });
/** @nocollapse */ PaymentsFilterModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentsFilterModule, providers: [DatePipe], imports: [[CommonModule, ReactiveFormsModule, ...uiModules$1]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentsFilterModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [PaymentsFilterComponent, PaymentsFilterCustomizableDirective],
                    imports: [CommonModule, ReactiveFormsModule, ...uiModules$1],
                    exports: [PaymentsFilterComponent, PaymentsFilterCustomizableDirective],
                    providers: [DatePipe],
                }]
        }] });

class PaymentsControlsModule {
}
/** @nocollapse */ PaymentsControlsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentsControlsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ PaymentsControlsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentsControlsModule, declarations: [PaymentsControlsComponent,
        PaymentsControlsCustomizableDirective], imports: [ButtonModule,
        CommonModule,
        IconModule,
        PaymentsFilterModule,
        PaymentsSearchModule], exports: [PaymentsControlsComponent, PaymentsControlsCustomizableDirective] });
/** @nocollapse */ PaymentsControlsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentsControlsModule, imports: [[
            ButtonModule,
            CommonModule,
            IconModule,
            PaymentsFilterModule,
            PaymentsSearchModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentsControlsModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        PaymentsControlsComponent,
                        PaymentsControlsCustomizableDirective,
                    ],
                    imports: [
                        ButtonModule,
                        CommonModule,
                        IconModule,
                        PaymentsFilterModule,
                        PaymentsSearchModule,
                    ],
                    exports: [PaymentsControlsComponent, PaymentsControlsCustomizableDirective],
                }]
        }] });

const endTypes = {
    never: 'never',
    on: 'on',
    after: 'after',
};
const endDate = (frequency, startDate) => {
    const today = startDate ? new Date(startDate) : new Date();
    switch (frequency.value) {
        case Frequencies.ONCE:
            return undefined;
        case Frequencies.WEEKLY: {
            return new Date(today.getFullYear(), today.getMonth(), today.getDate() + 7).toISOString();
        }
        case Frequencies.BIWEEKLY: {
            return new Date(today.getFullYear(), today.getMonth(), today.getDate() + 14).toISOString();
        }
        case Frequencies.MONTHLY: {
            return new Date(today.getFullYear(), today.getMonth() + 1, today.getDate()).toISOString();
        }
        case Frequencies.QUARTERLY: {
            return new Date(today.getFullYear(), today.getMonth() + 3, today.getDate()).toISOString();
        }
        case Frequencies.YEARLY: {
            return new Date(today.getFullYear() + 1, today.getMonth(), today.getDate()).toISOString();
        }
        case Frequencies.DAILY:
        default: {
            return new Date(today.getFullYear(), today.getMonth(), today.getDate() + 1).toISOString();
        }
    }
};
class ScheduleComponent {
    constructor(changeDetectorRef) {
        this.changeDetectorRef = changeDetectorRef;
        this.hostRef = this;
        this.gc$ = new Subject();
    }
    get endTypes() {
        return endTypes;
    }
    get item() {
        return this.rawItem;
    }
    get isSingleTransfer() {
        return (this.item &&
            this.item.frequency &&
            (this.item.frequency.value
                ? this.item.frequency.value.toLocaleLowerCase() === 'once'
                : false));
    }
    get today() {
        const today = new Date();
        return {
            year: today.getFullYear(),
            month: today.getMonth() + 1,
            day: today.getDate(),
        };
    }
    ngDoCheck() {
        if (this.scheduleForm !== undefined) {
            this.rawItem = this.scheduleForm.getRawValue();
        }
    }
    ngOnInit() {
        if (this.scheduleForm === undefined) {
            throw new Error('`scheduleForm` input is required in `bb-schedule-ui` component');
        }
        if (this.frequencies === undefined) {
            throw new Error('`frequencies` input is required in `bb-schedule-ui` component');
        }
        this.rawItem = this.scheduleForm.getRawValue();
        this.onEndTypeChange();
        this.onFrequencyChange();
        this.onStartDateChange();
    }
    ngOnDestroy() {
        this.gc$.next();
        this.gc$.complete();
    }
    onEndTypeChange() {
        const endTypeControl = this.scheduleForm && this.scheduleForm.get('endType');
        const frequencyControl = this.scheduleForm && this.scheduleForm.get('frequency');
        if (endTypeControl) {
            endTypeControl.valueChanges
                .pipe(takeUntil(this.gc$))
                .subscribe((endTypeValue) => {
                this.setControlsState(endTypeValue);
                if (frequencyControl) {
                    this.setEndDate(frequencyControl.value);
                }
            });
        }
    }
    setControlsState(endTypeValue) {
        if (!this.scheduleForm) {
            return;
        }
        const endDateControl = this.scheduleForm.get('endDate');
        const repeatControl = this.scheduleForm.get('repeat');
        if (endDateControl && repeatControl) {
            if (endDateControl.value) {
                endDateControl.enable();
            }
            else {
                this.setEndDate({ value: Frequencies.DAILY, every: '1' });
                endDateControl.disable();
            }
            if (repeatControl.value) {
                repeatControl.enable();
            }
            else {
                repeatControl.disable();
            }
            switch (endTypeValue) {
                case endTypes.after: {
                    repeatControl.enable();
                    endDateControl.disable();
                    break;
                }
                case endTypes.on: {
                    endDateControl.enable();
                    repeatControl.disable();
                    break;
                }
                case endTypes.never:
                default: {
                    endDateControl.disable();
                    repeatControl.disable();
                    break;
                }
            }
        }
    }
    onStartDateChange() {
        const startDateControl = this.scheduleForm && this.scheduleForm.get('startDate');
        const startDate = startDateControl && startDateControl.value;
        if (startDateControl) {
            startDateControl.valueChanges
                .pipe(takeUntil(this.gc$), distinct())
                .subscribe((value) => {
                const frequency = this.item && this.item.frequency;
                if (frequency && startDate !== value) {
                    this.setEndDate(frequency);
                }
            });
        }
    }
    onFrequencyChange() {
        if (!this.frequencies) {
            return;
        }
        const frequencyControl = this.scheduleForm && this.scheduleForm.get('frequency');
        if (frequencyControl) {
            if (this.isSingleTransfer) {
                frequencyControl.setValue(this.frequencies[0]);
            }
            frequencyControl.valueChanges
                .pipe(takeUntil(this.gc$))
                .subscribe((freq) => {
                this.setEndDate(freq);
            });
        }
    }
    setEndDate(frequency) {
        const endDateControl = this.scheduleForm && this.scheduleForm.get('endDate');
        const startDateControl = this.scheduleForm && this.scheduleForm.get('startDate');
        const startDate = startDateControl && startDateControl.value;
        const endTypeControl = this.scheduleForm && this.scheduleForm.get('endType');
        if (endDateControl &&
            endTypeControl &&
            endTypeControl.value === this.endTypes.on) {
            endDateControl.setValue(endDate(frequency, startDate));
        }
        this.changeDetectorRef.detectChanges();
    }
    isInvalidControl(control) {
        if (!this.scheduleForm) {
            return false;
        }
        if (!this.formSubmitted) {
            control.markAsUntouched();
        }
        return !!this.formSubmitted && control.invalid;
    }
}
/** @nocollapse */ ScheduleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ScheduleComponent, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ ScheduleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ScheduleComponent, selector: "bb-schedule-ui", inputs: { frequencies: "frequencies", minOccurs: "minOccurs", maxOccurs: "maxOccurs", scheduleForm: "scheduleForm", formSubmitted: "formSubmitted" }, ngImport: i0, template: "<ng-template bbScheduleCustomizable let-hostRef>\n  <div [formGroup]=\"hostRef.scheduleForm\">\n    <div class=\"bb-block bb-block--md\"></div>\n    <div class=\"row bb-block bb-block--md\">\n      <div class=\"col-md-7\">\n        <label class=\"bb-text-bold\" [attr.for]=\"startDatePicker.id\">\n          <ng-container\n            i18n=\"\n              Schedule execution label|Label for an execution date in scheduling\n              component@@bb-schedule-ui.label.execution\"\n            >{hostRef.scheduleForm?.get('frequency')?.value?.value.toUpperCase(),\n            select, ONCE {Execute on} other {Start on}}\n          </ng-container>\n        </label>\n\n        <bb-input-datepicker-ui\n          #startDatePicker\n          [minDate]=\"hostRef.today\"\n          formControlName=\"startDate\"\n          data-role=\"execution-date-calendar\"\n        ></bb-input-datepicker-ui>\n\n        <bb-input-validation-message-ui\n          role=\"alert\"\n          [showErrors]=\"\n            hostRef.isInvalidControl(hostRef.scheduleForm.get('startDate'))\n          \"\n        >\n          <span\n            data-role=\"missing-schedule-execution-date\"\n            *ngIf=\"hostRef.scheduleForm.get('startDate').errors?.required\"\n            i18n=\"\n              Execution date required error text|Error required message for\n              Execution date input field@@bb-schedule.error.required.startDate\"\n          >\n            Execution date is required\n          </span>\n\n          <span\n            data-role=\"past-date-schedule-execution-date\"\n            *ngIf=\"hostRef.scheduleForm.get('startDate').errors?.pastDate\"\n            i18n=\"\n              Execution date past date error text |Error past date message for\n              Execution date input field@@bb-schedule.error.pastDate.startDate\"\n          >\n            Execution date cannot be in the past\n          </span>\n\n          <span\n            data-role=\"invalid-date-schedule-execution-date\"\n            *ngIf=\"\n              hostRef.scheduleForm.get('startDate').errors?.invalidDateFormat\n            \"\n            i18n=\"\n              Execution date invalid date error text |Error invalid date format\n              message for Execution date input\n              field@@bb-schedule.error.invalidDateFormat\"\n          >\n            Invalid date format\n          </span>\n        </bb-input-validation-message-ui>\n      </div>\n    </div>\n\n    <div class=\"row bb-block bb-block--md\">\n      <div class=\"col-md-7\">\n        <label\n          class=\"bb-text-bold\"\n          [attr.for]=\"frequencySelector.id\"\n          i18n=\"Frequency|Label for frequency@@bb-schedule-ui.frequency.label\"\n        >\n          Frequency\n        </label>\n\n        <bb-dropdown-single-select-ui\n          #frequencySelector\n          displayAttributePath=\"value\"\n          formControlName=\"frequency\"\n          data-role=\"frequency-selector\"\n        >\n          <bb-dropdown-single-select-option-ui\n            label=\"Once\"\n            data-role=\"frequency\"\n            [value]=\"hostRef.frequencies[0]\"\n            i18n-label=\"\n              Once|Once frequency type Label@@bb-schedule-ui.frequency.Once\"\n          ></bb-dropdown-single-select-option-ui>\n\n          <bb-dropdown-single-select-option-ui\n            label=\"Daily\"\n            data-role=\"frequency\"\n            [value]=\"hostRef.frequencies[1]\"\n            i18n-label=\"\n              Daily|Daily frequency type Label@@bb-schedule-ui.frequency.Daily\"\n          ></bb-dropdown-single-select-option-ui>\n\n          <bb-dropdown-single-select-option-ui\n            label=\"Weekly\"\n            data-role=\"frequency\"\n            [value]=\"hostRef.frequencies[2]\"\n            i18n-label=\"\n              Weekly|Weekly frequency type\n              Label@@bb-schedule-ui.frequency.Weekly\"\n          ></bb-dropdown-single-select-option-ui>\n\n          <bb-dropdown-single-select-option-ui\n            label=\"Biweekly\"\n            data-role=\"frequency\"\n            [value]=\"hostRef.frequencies[3]\"\n            i18n-label=\"\n              Biweekly|Biweekly frequency type\n              Label@@bb-schedule-ui.frequency.Biweekly\"\n          ></bb-dropdown-single-select-option-ui>\n\n          <bb-dropdown-single-select-option-ui\n            label=\"Monthly\"\n            data-role=\"frequency\"\n            [value]=\"hostRef.frequencies[4]\"\n            i18n-label=\"\n              Monthly|Monthly frequency type\n              Label@@bb-schedule-ui.frequency.Monthly\"\n          ></bb-dropdown-single-select-option-ui>\n\n          <bb-dropdown-single-select-option-ui\n            label=\"Quarterly\"\n            data-role=\"frequency\"\n            [value]=\"hostRef.frequencies[5]\"\n            i18n-label=\"\n              Quarterly|Quarterly frequency type\n              Label@@bb-schedule-ui.frequency.Quarterly\"\n          ></bb-dropdown-single-select-option-ui>\n\n          <bb-dropdown-single-select-option-ui\n            label=\"Annually\"\n            data-role=\"frequency\"\n            [value]=\"hostRef.frequencies[6]\"\n            i18n-label=\"\n              Annually|Annually frequency type\n              Label@@bb-schedule-ui.frequency.Annually\"\n          ></bb-dropdown-single-select-option-ui>\n        </bb-dropdown-single-select-ui>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"col-md-7\" [hidden]=\"hostRef.isSingleTransfer\">\n        <bb-input-radio-group-ui\n          label=\"End\"\n          data-role=\"radio-group\"\n          formControlName=\"endType\"\n          i18n-label=\"\n            Schedule ending section name|Label for the section containing inputs\n            that determine way of ending of the\n            schedule@@bb-schedule-ui.label.ending\"\n        >\n          <bb-input-radio-ui\n            [value]=\"hostRef.endTypes.never\"\n            [labelTemplate]=\"neverEndingSchedule\"\n          ></bb-input-radio-ui>\n\n          <bb-input-radio-ui\n            [value]=\"hostRef.endTypes.on\"\n            [labelTemplate]=\"onDateSchedule\"\n          ></bb-input-radio-ui>\n\n          <bb-input-radio-ui\n            [value]=\"hostRef.endTypes.after\"\n            [labelTemplate]=\"endingAfterSchedule\"\n          ></bb-input-radio-ui>\n        </bb-input-radio-group-ui>\n\n        <ng-template #neverEndingSchedule>\n          <span\n            class=\"bb-text-default\"\n            data-role=\"ending-never-selector\"\n            i18n=\"\n              Schedule never ends|Label for an option to never end the\n              schedule@@bb-schedule-ui.label.ending.never\"\n          >\n            Never\n          </span>\n        </ng-template>\n\n        <ng-template #onDateSchedule>\n          <div data-role=\"ending-on-selector\">\n            <div class=\"bb-stack\">\n              <div class=\"bb-stack__item\">\n                <span\n                  class=\"bb-text-default\"\n                  i18n=\"\n                    Schedule end date|Label for an option to end the schedule on\n                    a specific date@@bb-schedule-ui.label.ending.on\"\n                >\n                  On date\n                </span>\n              </div>\n\n              <div class=\"bb-stack__item bb-stack__item--fill\">\n                <bb-input-datepicker-ui\n                  [minDate]=\"hostRef.today\"\n                  aria-label=\"End date\"\n                  formControlName=\"endDate\"\n                  data-role=\"ending-end-date\"\n                  i18n-aria-label=\"\n                    Schedule end date date picker label|Aria label for end date\n                    schedule control@@bb-schedule-ui.label.end-date\"\n                  *ngIf=\"\n                    hostRef.scheduleForm.get('endDate').enabled &&\n                    hostRef.scheduleForm.get('endType').value ==\n                      hostRef.endTypes.on\n                  \"\n                ></bb-input-datepicker-ui>\n\n                <bb-input-validation-message-ui\n                  role=\"alert\"\n                  *ngIf=\"hostRef.scheduleForm.get('endDate') as control\"\n                  [showErrors]=\"hostRef.isInvalidControl(control)\"\n                >\n                  <span\n                    *ngIf=\"control.errors?.pastDate\"\n                    i18n=\"\n                      End date past date error text |Error past date message for\n                      End date input field@@bb-schedule.error.pastDate.endDate\"\n                    data-role=\"past-date-ending-end-date\"\n                  >\n                    End date cannot be in the past\n                  </span>\n                  <span\n                    *ngIf=\"control.errors?.required\"\n                    i18n=\"\n                      End date required error text|Error required message for\n                      End date input field@@bb-schedule.error.required.endDate\"\n                    data-role=\"missing-schedule-end-date\"\n                  >\n                    End date is required\n                  </span>\n                  <span\n                    *ngIf=\"control.errors?.invalidDateFormat\"\n                    i18n=\"\n                      End date invalid date error text |Error invalid date\n                      format message for End date input\n                      field@@bb-schedule.invalidDateFormat.endDate\"\n                    data-role=\"invalid-date-schedule-end-date\"\n                  >\n                    Invalid date format\n                  </span>\n                </bb-input-validation-message-ui>\n              </div>\n            </div>\n          </div>\n        </ng-template>\n\n        <ng-template #endingAfterSchedule>\n          <div data-role=\"ending-occurrences-selector\">\n            <div class=\"bb-stack\">\n              <div class=\"bb-stack__item\">\n                <span\n                  class=\"bb-text-default\"\n                  i18n=\"\n                    Schedule number of occurrences|Label for an option to end\n                    the schedule after some number of\n                    occurrences@@bb-schedule-ui.label.ending.after\"\n                >\n                  After\n                </span>\n              </div>\n\n              <div class=\"bb-stack__item bb-stack__item--fill\">\n                <div\n                  class=\"bb-stack\"\n                  *ngIf=\"\n                    hostRef.scheduleForm.get('repeat').enabled &&\n                    hostRef.scheduleForm.get('endType').value ==\n                      hostRef.endTypes.after\n                  \"\n                >\n                  <div class=\"bb-stack__item\">\n                    <bb-input-number-ui\n                      id=\"ending-occurrences\"\n                      formControlName=\"repeat\"\n                      [min]=\"hostRef.minOccurs\"\n                      [max]=\"hostRef.maxOccurs\"\n                      data-role=\"ending-occurrences\"\n                    ></bb-input-number-ui>\n                  </div>\n\n                  <div class=\"bb-stack__item\">\n                    <span\n                      class=\"bb-text-default\"\n                      i18n=\"\n                        Schedule occurrences text|Text to be appended after\n                        schedule end after some number of occurrences\n                        input@@bb-schedule-ui.label.ending.occurrences\"\n                    >\n                      occurrences\n                    </span>\n                  </div>\n                </div>\n\n                <bb-input-validation-message-ui\n                  role=\"alert\"\n                  [showErrors]=\"\n                    hostRef.item.endType === hostRef.endTypes.after &&\n                    hostRef.isInvalidControl(hostRef.scheduleForm.get('repeat'))\n                  \"\n                >\n                  <span\n                    data-role=\"ending-occurrences-too-few\"\n                    *ngIf=\"hostRef.scheduleForm.get('repeat').errors?.min\"\n                    i18n=\"\n                      Repeat less then min error text |Error min message for\n                      repeat input field@@bb-schedule.error.min.repeat\"\n                  >\n                    Value is below the minimum allowed occurrences ({{\n                      hostRef.minOccurs\n                    }})\n                  </span>\n\n                  <span\n                    data-role=\"ending-occurrences-too-many\"\n                    *ngIf=\"hostRef.scheduleForm.get('repeat').errors?.max\"\n                    i18n=\"\n                      Repeat more then max error text |Error max message for\n                      repeat input field@@bb-schedule.error.max.repeat\"\n                  >\n                    Value exceeds the maximum allowed occurrences ({{\n                      hostRef.maxOccurs\n                    }})\n                  </span>\n\n                  <span\n                    data-role=\"missing-ending-occurrences\"\n                    *ngIf=\"hostRef.scheduleForm.get('repeat').errors?.required\"\n                    i18n=\"\n                      Repeat required error text |Error required message for\n                      repeat input field@@bb-schedule.error.required.repeat\"\n                  >\n                    Value is required\n                  </span>\n                </bb-input-validation-message-ui>\n              </div>\n            </div>\n          </div>\n        </ng-template>\n      </div>\n    </div>\n  </div>\n</ng-template>\n\n<ng-container bbScheduleCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n", components: [{ type: i0.forwardRef(function () { return i1$c.InputDatepickerComponent; }), selector: "bb-input-datepicker-ui", inputs: ["rangeSelection", "rangeSelectionSplit", "clickOpen", "focusOpen", "placement", "datepickerDescribedby", "ariaLabelForButton", "minDate", "maxDate", "markDisabled", "icon", "iconSize", "iconColor", "btnColor", "ariaLabel", "navigation", "autocomplete", "firstDayOfWeek", "displayMonths", "placeholder", "overrideDateFormat"], outputs: ["focusedDate"] }, { type: i0.forwardRef(function () { return i4.InputValidationMessageComponent; }), selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i0.forwardRef(function () { return i3$1.DropdownSingleSelectComponent; }), selector: "bb-dropdown-single-select-ui", inputs: ["placeholder", "defaultOptionAsPlaceholder", "options", "displayAttributePath", "iconName", "compareWithFn"] }, { type: i0.forwardRef(function () { return i3$1.DropdownSingleSelectOptionComponent; }), selector: "bb-dropdown-single-select-option-ui", inputs: ["value", "label"] }, { type: i0.forwardRef(function () { return i4$1.InputRadioGroupComponent; }), selector: "bb-input-radio-group-ui", inputs: ["horizontal", "preselect", "name", "verticalAlign"] }, { type: i0.forwardRef(function () { return i4$1.InputRadioComponent; }), selector: "bb-input-radio-ui", inputs: ["labelTemplate", "labelTemplateContext", "value", "label", "aria-label", "aria-labelledby", "aria-describedby", "role", "aria-activedescendant", "aria-expanded", "aria-invalid", "aria-owns", "disabled"] }, { type: i0.forwardRef(function () { return i3$5.InputNumberComponent; }), selector: "bb-input-number-ui", inputs: ["placeholder", "max", "min", "step", "readonly", "autocomplete", "ariaLabel", "allowNonDigits", "allowNegativeSign"] }], directives: [{ type: i0.forwardRef(function () { return ScheduleCustomizableDirective; }), selector: "[bbScheduleCustomizable], [bbPayordInitiatePaymentScheduleCustomizable]" }, { type: i0.forwardRef(function () { return i1$1.NgControlStatusGroup; }), selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i0.forwardRef(function () { return i1$1.FormGroupDirective; }), selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i0.forwardRef(function () { return i1$c.MinDateValidatorDirective; }), selector: "bb-input-datepicker-ui[minDate]", inputs: ["minDate"] }, { type: i0.forwardRef(function () { return i1$1.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0.forwardRef(function () { return i1$1.FormControlName; }), selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i0.forwardRef(function () { return i2.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ScheduleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-schedule-ui',
                    templateUrl: './schedule.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }]; }, propDecorators: { frequencies: [{
                type: Input
            }], minOccurs: [{
                type: Input
            }], maxOccurs: [{
                type: Input
            }], scheduleForm: [{
                type: Input
            }], formSubmitted: [{
                type: Input
            }] } });
class ScheduleCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ ScheduleCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ScheduleCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ ScheduleCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ScheduleCustomizableDirective, selector: "[bbScheduleCustomizable], [bbPayordInitiatePaymentScheduleCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ScheduleCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbScheduleCustomizable], [bbPayordInitiatePaymentScheduleCustomizable]',
                }]
        }] });

const uiModules = [
    InputDatepickerModule,
    InputValidationMessageModule,
    DropdownSingleSelectModule,
    InputNumberModule,
    InputRadioGroupModule,
];
class ScheduleModule {
}
/** @nocollapse */ ScheduleModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ScheduleModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ ScheduleModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ScheduleModule, declarations: [ScheduleComponent, ScheduleCustomizableDirective], imports: [CommonModule, ReactiveFormsModule, InputDatepickerModule,
        InputValidationMessageModule,
        DropdownSingleSelectModule,
        InputNumberModule,
        InputRadioGroupModule], exports: [ScheduleComponent, ScheduleCustomizableDirective] });
/** @nocollapse */ ScheduleModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ScheduleModule, imports: [[CommonModule, ReactiveFormsModule, ...uiModules]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ScheduleModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [ScheduleComponent, ScheduleCustomizableDirective],
                    imports: [CommonModule, ReactiveFormsModule, ...uiModules],
                    exports: [ScheduleComponent, ScheduleCustomizableDirective],
                }]
        }] });

class SeparatorComponent {
}
/** @nocollapse */ SeparatorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SeparatorComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ SeparatorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: SeparatorComponent, selector: "bb-separator", inputs: { options: "options" }, ngImport: i0, template: "<div class=\"bb-separator\" [ngClass]=\"options?.cssClasses\">\n  <hr />\n  <bb-icon-ui\n    *ngIf=\"options?.icon\"\n    [name]=\"options?.icon?.name\"\n    [color]=\"options?.icon?.color || 'dark'\"\n    class=\"bb-separator__icon\"\n  ></bb-icon-ui>\n</div>\n", components: [{ type: i1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SeparatorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-separator',
                    templateUrl: './separator.component.html',
                }]
        }], propDecorators: { options: [{
                type: Input
            }] } });

class SeparatorModule {
}
/** @nocollapse */ SeparatorModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SeparatorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ SeparatorModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SeparatorModule, declarations: [SeparatorComponent], imports: [CommonModule, IconModule], exports: [SeparatorComponent] });
/** @nocollapse */ SeparatorModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SeparatorModule, imports: [[CommonModule, IconModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SeparatorModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [SeparatorComponent],
                    imports: [CommonModule, IconModule],
                    exports: [SeparatorComponent],
                }]
        }] });

const customizables = [
    PayordStatusBadgeCustomizableDirective,
    PayordStatusBadgeAbbreviationCustomizableDirective,
    PayordStatusBadgeLabelCustomizableDirective,
];
class PayordStatusBadgeModule {
}
/** @nocollapse */ PayordStatusBadgeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordStatusBadgeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ PayordStatusBadgeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordStatusBadgeModule, declarations: [PayordStatusBadgeComponent, PayordStatusBadgeCustomizableDirective,
        PayordStatusBadgeAbbreviationCustomizableDirective,
        PayordStatusBadgeLabelCustomizableDirective], imports: [CommonModule, BadgeModule], exports: [BadgeModule, PayordStatusBadgeComponent, PayordStatusBadgeCustomizableDirective,
        PayordStatusBadgeAbbreviationCustomizableDirective,
        PayordStatusBadgeLabelCustomizableDirective] });
/** @nocollapse */ PayordStatusBadgeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordStatusBadgeModule, imports: [[CommonModule, BadgeModule], BadgeModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordStatusBadgeModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, BadgeModule],
                    declarations: [PayordStatusBadgeComponent, ...customizables],
                    exports: [BadgeModule, PayordStatusBadgeComponent, ...customizables],
                }]
        }] });

class TableCheckboxModule {
}
/** @nocollapse */ TableCheckboxModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TableCheckboxModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ TableCheckboxModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TableCheckboxModule, declarations: [TableCheckboxComponent], imports: [CommonModule], exports: [TableCheckboxComponent] });
/** @nocollapse */ TableCheckboxModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TableCheckboxModule, imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TableCheckboxModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [TableCheckboxComponent],
                    imports: [CommonModule],
                    exports: [TableCheckboxComponent],
                }]
        }] });

class TableHeaderCheckboxModule {
}
/** @nocollapse */ TableHeaderCheckboxModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TableHeaderCheckboxModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ TableHeaderCheckboxModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TableHeaderCheckboxModule, declarations: [TableHeaderCheckboxComponent], imports: [CommonModule], exports: [TableHeaderCheckboxComponent] });
/** @nocollapse */ TableHeaderCheckboxModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TableHeaderCheckboxModule, imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TableHeaderCheckboxModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [TableHeaderCheckboxComponent],
                    imports: [CommonModule],
                    exports: [TableHeaderCheckboxComponent],
                }]
        }] });

class IbanDirective {
    constructor(el, ngControl, changeDetectorRef) {
        this.el = el;
        this.ngControl = ngControl;
        this.changeDetectorRef = changeDetectorRef;
        /**
         * The max length for the IBAN number, mostly 34
         */
        this.maxLen = 34;
        this.value = '';
        this.editPositionRestorer$ = new Subject();
        this.garbageCollector$ = new Subject();
        this.transformValue = (value, max) => {
            if (!value) {
                return value;
            }
            const format = (v) => v.replace(/(.{4})/g, '$1 ').trim();
            const rawResult = value.toUpperCase().replace(/[^a-z0-9]/gi, '');
            return rawResult.length > max
                ? format(rawResult.slice(0, max))
                : format(rawResult);
        };
    }
    ngOnInit() {
        if (!this.ngControl || !this.ngControl.control) {
            return;
        }
        const control = this.ngControl.control;
        const ibanInputEl = this.el.nativeElement.querySelector('input');
        control.valueChanges
            .pipe(distinctUntilChanged(), filter((value) => {
            const alphaNumericRegex = /^[a-zA-Z0-9 ]{5,}$/; //Only format string with valid iban chars
            return value !== this.value && alphaNumericRegex.test(value);
        }), takeUntil(this.garbageCollector$))
            .subscribe((value) => {
            let pos = ibanInputEl.selectionStart;
            const transformedValue = this.transformValue(value, this.maxLen);
            if (value &&
                value.substring(0, pos) !== transformedValue.substring(0, pos)) {
                pos++;
            }
            this.changeDetectorRef.detectChanges();
            control.setValue(transformedValue);
            control.updateValueAndValidity();
            this.value = transformedValue;
            this.changeDetectorRef.detectChanges();
            this.editPositionRestorer$.next(pos);
        });
        this.editPositionRestorer$.pipe(delay(1)).subscribe((position) => {
            ibanInputEl.setSelectionRange(position, position);
        });
    }
    ngOnDestroy() {
        this.editPositionRestorer$.unsubscribe();
        if (this.garbageCollector$) {
            this.garbageCollector$.next();
            this.garbageCollector$.complete();
        }
    }
}
/** @nocollapse */ IbanDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: IbanDirective, deps: [{ token: i0.ElementRef }, { token: i1$1.NgControl }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ IbanDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: IbanDirective, selector: "[bbIban]", inputs: { maxLen: "maxLen" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: IbanDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbIban]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1$1.NgControl }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { maxLen: [{
                type: Input
            }] } });

class IbanModule {
}
/** @nocollapse */ IbanModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: IbanModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ IbanModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: IbanModule, declarations: [IbanDirective], imports: [CommonModule], exports: [IbanDirective] });
/** @nocollapse */ IbanModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: IbanModule, imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: IbanModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [IbanDirective],
                    imports: [CommonModule],
                    exports: [IbanDirective],
                }]
        }] });

class AccountFormatterModule {
}
/** @nocollapse */ AccountFormatterModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountFormatterModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ AccountFormatterModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountFormatterModule, declarations: [AccountFormatterPipe], imports: [CommonModule], exports: [AccountFormatterPipe] });
/** @nocollapse */ AccountFormatterModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountFormatterModule, imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountFormatterModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [AccountFormatterPipe],
                    imports: [CommonModule],
                    exports: [AccountFormatterPipe],
                }]
        }] });

class BytesPipe {
    constructor() {
        this.units = ['bytes', 'KB', 'MB', 'GB'];
    }
    transform(bytes = 0, precision = 2) {
        if (isNaN(parseFloat(String(bytes))) || !isFinite(bytes)) {
            return '?';
        }
        let unit = 0;
        while (bytes >= 1024) {
            bytes /= 1024;
            unit++;
        }
        const transformedBytes = Number.isInteger(bytes)
            ? bytes
            : bytes.toFixed(+precision);
        return `${transformedBytes} ${this.units[unit]}`;
    }
}
/** @nocollapse */ BytesPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BytesPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
/** @nocollapse */ BytesPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BytesPipe, name: "bytes" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BytesPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'bytes' }]
        }] });

class BytesModule {
}
/** @nocollapse */ BytesModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BytesModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ BytesModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BytesModule, declarations: [BytesPipe], imports: [CommonModule], exports: [BytesPipe] });
/** @nocollapse */ BytesModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BytesModule, imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BytesModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [BytesPipe],
                    imports: [CommonModule],
                    exports: [BytesPipe],
                }]
        }] });

class BBHighlightPipe {
    transform(text, search) {
        let pattern = search.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&');
        pattern = pattern
            .split(' ')
            .filter((t) => t.length > 0)
            .join('|');
        const regex = new RegExp(pattern, 'gi');
        return search
            ? text.replace(regex, (match) => `<b class="highlight-pipe-content">${match}</b>`)
            : text;
    }
}
/** @nocollapse */ BBHighlightPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BBHighlightPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
/** @nocollapse */ BBHighlightPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BBHighlightPipe, name: "highlight" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BBHighlightPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'highlight' }]
        }] });

class BBHighlightModule {
}
/** @nocollapse */ BBHighlightModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BBHighlightModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ BBHighlightModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BBHighlightModule, declarations: [BBHighlightPipe], imports: [CommonModule], exports: [BBHighlightPipe] });
/** @nocollapse */ BBHighlightModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BBHighlightModule, imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BBHighlightModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [BBHighlightPipe],
                    imports: [CommonModule],
                    exports: [BBHighlightPipe],
                }]
        }] });

var RelativeDate;
(function (RelativeDate) {
    RelativeDate["Yesterday"] = "Yesterday";
    RelativeDate["Today"] = "Today";
    RelativeDate["Tomorrow"] = "Tomorrow";
})(RelativeDate || (RelativeDate = {}));
class RelativeDatePipe {
    constructor(datePipe) {
        this.datePipe = datePipe;
        this.getRelativeDateHelper = getRelativeDate;
    }
    transform(value, dateFormat) {
        let result;
        const _value = getDateOnly(new Date(value));
        const yesterday = this.getRelativeDateHelper(-1);
        const today = this.getRelativeDateHelper();
        const tomorrow = this.getRelativeDateHelper(1);
        switch (_value) {
            case yesterday:
                result = RelativeDate.Yesterday;
                break;
            case today:
                result = RelativeDate.Today;
                break;
            case tomorrow:
                result = RelativeDate.Tomorrow;
                break;
            default:
                result = this.datePipe.transform(value, dateFormat);
        }
        return result;
    }
}
/** @nocollapse */ RelativeDatePipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RelativeDatePipe, deps: [{ token: i2.DatePipe }], target: i0.ɵɵFactoryTarget.Pipe });
/** @nocollapse */ RelativeDatePipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RelativeDatePipe, name: "relativeDate" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RelativeDatePipe, decorators: [{
            type: Pipe,
            args: [{ name: 'relativeDate' }]
        }], ctorParameters: function () { return [{ type: i2.DatePipe }]; } });

class RelativeDateModule {
}
/** @nocollapse */ RelativeDateModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RelativeDateModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ RelativeDateModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RelativeDateModule, declarations: [RelativeDatePipe], imports: [CommonModule], exports: [RelativeDatePipe] });
/** @nocollapse */ RelativeDateModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RelativeDateModule, imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RelativeDateModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [RelativeDatePipe],
                    imports: [CommonModule],
                    exports: [RelativeDatePipe],
                }]
        }] });

class ExportPdfModule {
}
/** @nocollapse */ ExportPdfModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ExportPdfModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ ExportPdfModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ExportPdfModule, declarations: [ExportPdfDirective], imports: [CommonModule], exports: [ExportPdfDirective] });
/** @nocollapse */ ExportPdfModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ExportPdfModule, providers: [NotificationService], imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ExportPdfModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [ExportPdfDirective],
                    imports: [CommonModule],
                    exports: [ExportPdfDirective],
                    providers: [NotificationService],
                }]
        }] });

const components = [
    AddressDetailsComponent,
    FullAddressComponent,
    PaymentDebitorDetailsCardComponent,
    PaymentCreditorDetailsCardComponent,
    PayordCounterpartyDetailsComponent,
    PayordScheduleDetailsComponent,
    PayordStatusComponent,
    PayordAmountDetailsComponent,
    PayordDynamicLabelComponent,
    FlagIconComponent,
    CountryNameComponent,
    CountrySelectorComponent,
    PayordDynamicLabelComponent,
    FlagIconComponent,
    CountryNameComponent,
    SelectCountryDropdownComponent,
    CurrencySelectorComponent,
    CurrencyAmountSelectorComponent,
    PaymentTemplateComponent,
    BreachLimitDetailsModalComponent,
    PayordCardMenuComponent,
    SelectPurposeDropdownComponent,
    RoutableModalComponent,
    HorizontalListSelectorComponent,
    PaymentTemplateSelectorComponent,
    PurposeOfPaymentDetailComponent,
    PaymentsTableComponent,
    PaymentsListComponent,
];
const modules = [
    InputTextModule,
    ButtonModule,
    IconModule,
    DropdownMenuModule,
    DropdownSingleSelectModule,
    InfiniteScrollModule,
    InputValidationMessageModule,
    EmptyStateModule,
    SearchBoxModule,
    NgbDropdownModule,
    AvatarModule,
    AmountModule,
    SearchBoxModule,
    ProductSelectorModule,
    KeyboardClickModule,
    EmptyStateModule,
    ModalModule,
    HeaderModule,
    LoadButtonModule,
    LoadingIndicatorModule,
    EllipsisModule,
    TooltipModule,
    PaginationModule,
    TableModule,
    HighlightModule,
    BeneficiarySelectorUIModule,
    PaymentsSrSearchResultInfoModule,
    ScheduleLabelModule,
    ConfirmationDialogModule,
    PaymentsControlsModule,
    PaymentsFilterModule,
    PaymentsSearchModule,
    ScheduleModule,
    SeparatorModule,
    PayordStatusBadgeModule,
    TableHeaderCheckboxModule,
    TableCheckboxModule,
    IbanModule,
    AccountFormatterModule,
    BytesModule,
    BBHighlightModule,
    RelativeDateModule,
    ExportPdfModule,
];
class PaymentOrdersUiModule {
}
/** @nocollapse */ PaymentOrdersUiModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentOrdersUiModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ PaymentOrdersUiModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentOrdersUiModule, declarations: [AddressDetailsComponent,
        FullAddressComponent,
        PaymentDebitorDetailsCardComponent,
        PaymentCreditorDetailsCardComponent,
        PayordCounterpartyDetailsComponent,
        PayordScheduleDetailsComponent,
        PayordStatusComponent,
        PayordAmountDetailsComponent,
        PayordDynamicLabelComponent,
        FlagIconComponent,
        CountryNameComponent,
        CountrySelectorComponent,
        PayordDynamicLabelComponent,
        FlagIconComponent,
        CountryNameComponent,
        SelectCountryDropdownComponent,
        CurrencySelectorComponent,
        CurrencyAmountSelectorComponent,
        PaymentTemplateComponent,
        BreachLimitDetailsModalComponent,
        PayordCardMenuComponent,
        SelectPurposeDropdownComponent,
        RoutableModalComponent,
        HorizontalListSelectorComponent,
        PaymentTemplateSelectorComponent,
        PurposeOfPaymentDetailComponent,
        PaymentsTableComponent,
        PaymentsListComponent], imports: [CommonModule, FormsModule, ReactiveFormsModule, InputTextModule,
        ButtonModule,
        IconModule,
        DropdownMenuModule,
        DropdownSingleSelectModule,
        InfiniteScrollModule,
        InputValidationMessageModule,
        EmptyStateModule,
        SearchBoxModule,
        NgbDropdownModule,
        AvatarModule,
        AmountModule,
        SearchBoxModule,
        ProductSelectorModule,
        KeyboardClickModule,
        EmptyStateModule,
        ModalModule,
        HeaderModule,
        LoadButtonModule,
        LoadingIndicatorModule,
        EllipsisModule,
        TooltipModule,
        PaginationModule,
        TableModule,
        HighlightModule,
        BeneficiarySelectorUIModule,
        PaymentsSrSearchResultInfoModule,
        ScheduleLabelModule,
        ConfirmationDialogModule,
        PaymentsControlsModule,
        PaymentsFilterModule,
        PaymentsSearchModule,
        ScheduleModule,
        SeparatorModule,
        PayordStatusBadgeModule,
        TableHeaderCheckboxModule,
        TableCheckboxModule,
        IbanModule,
        AccountFormatterModule,
        BytesModule,
        BBHighlightModule,
        RelativeDateModule,
        ExportPdfModule], exports: [AddressDetailsComponent,
        FullAddressComponent,
        PaymentDebitorDetailsCardComponent,
        PaymentCreditorDetailsCardComponent,
        PayordCounterpartyDetailsComponent,
        PayordScheduleDetailsComponent,
        PayordStatusComponent,
        PayordAmountDetailsComponent,
        PayordDynamicLabelComponent,
        FlagIconComponent,
        CountryNameComponent,
        CountrySelectorComponent,
        PayordDynamicLabelComponent,
        FlagIconComponent,
        CountryNameComponent,
        SelectCountryDropdownComponent,
        CurrencySelectorComponent,
        CurrencyAmountSelectorComponent,
        PaymentTemplateComponent,
        BreachLimitDetailsModalComponent,
        PayordCardMenuComponent,
        SelectPurposeDropdownComponent,
        RoutableModalComponent,
        HorizontalListSelectorComponent,
        PaymentTemplateSelectorComponent,
        PurposeOfPaymentDetailComponent,
        PaymentsTableComponent,
        PaymentsListComponent, InputTextModule,
        ButtonModule,
        IconModule,
        DropdownMenuModule,
        DropdownSingleSelectModule,
        InfiniteScrollModule,
        InputValidationMessageModule,
        EmptyStateModule,
        SearchBoxModule,
        NgbDropdownModule,
        AvatarModule,
        AmountModule,
        SearchBoxModule,
        ProductSelectorModule,
        KeyboardClickModule,
        EmptyStateModule,
        ModalModule,
        HeaderModule,
        LoadButtonModule,
        LoadingIndicatorModule,
        EllipsisModule,
        TooltipModule,
        PaginationModule,
        TableModule,
        HighlightModule,
        BeneficiarySelectorUIModule,
        PaymentsSrSearchResultInfoModule,
        ScheduleLabelModule,
        ConfirmationDialogModule,
        PaymentsControlsModule,
        PaymentsFilterModule,
        PaymentsSearchModule,
        ScheduleModule,
        SeparatorModule,
        PayordStatusBadgeModule,
        TableHeaderCheckboxModule,
        TableCheckboxModule,
        IbanModule,
        AccountFormatterModule,
        BytesModule,
        BBHighlightModule,
        RelativeDateModule,
        ExportPdfModule] });
/** @nocollapse */ PaymentOrdersUiModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentOrdersUiModule, imports: [[CommonModule, FormsModule, ReactiveFormsModule, ...modules], InputTextModule,
        ButtonModule,
        IconModule,
        DropdownMenuModule,
        DropdownSingleSelectModule,
        InfiniteScrollModule,
        InputValidationMessageModule,
        EmptyStateModule,
        SearchBoxModule,
        NgbDropdownModule,
        AvatarModule,
        AmountModule,
        SearchBoxModule,
        ProductSelectorModule,
        KeyboardClickModule,
        EmptyStateModule,
        ModalModule,
        HeaderModule,
        LoadButtonModule,
        LoadingIndicatorModule,
        EllipsisModule,
        TooltipModule,
        PaginationModule,
        TableModule,
        HighlightModule,
        BeneficiarySelectorUIModule,
        PaymentsSrSearchResultInfoModule,
        ScheduleLabelModule,
        ConfirmationDialogModule,
        PaymentsControlsModule,
        PaymentsFilterModule,
        PaymentsSearchModule,
        ScheduleModule,
        SeparatorModule,
        PayordStatusBadgeModule,
        TableHeaderCheckboxModule,
        TableCheckboxModule,
        IbanModule,
        AccountFormatterModule,
        BytesModule,
        BBHighlightModule,
        RelativeDateModule,
        ExportPdfModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentOrdersUiModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, FormsModule, ReactiveFormsModule, ...modules],
                    declarations: [...components],
                    exports: [...components, ...modules],
                }]
        }] });

class StateService {
    constructor() {
        this.formSubject = new BehaviorSubject(new FormGroup({}));
        this.paymentStateSubject = new BehaviorSubject(PaymentState.INITIAL);
        this.canApprovePayment = false;
        this.paymentTemplateSubject = new BehaviorSubject(undefined);
        this.paymentEditSubject = new BehaviorSubject(undefined);
    }
    get form$() {
        return this.formSubject.asObservable();
    }
    get formInstance() {
        return this.formSubject.value;
    }
    get paymentState$() {
        return this.paymentStateSubject.asObservable();
    }
    get currentState() {
        return this.paymentStateSubject.value;
    }
    get canApprove() {
        return this.canApprovePayment;
    }
    set canApprove(canApprovePayment) {
        this.canApprovePayment = canApprovePayment;
    }
    get paymentTemplateState$() {
        return this.paymentTemplateSubject.asObservable();
    }
    get paymentEditState$() {
        return this.paymentEditSubject.asObservable();
    }
    get initialEditFormValue() {
        return this.initialEditFormValueItem;
    }
    set initialEditFormValue(formValue) {
        this.initialEditFormValueItem = formValue;
    }
    saveForm(form) {
        this.formSubject.next(form);
    }
    resetForm() {
        this.formSubject.next(new FormGroup({}));
    }
    setPaymentState(paymentState) {
        this.paymentStateSubject.next(paymentState);
    }
    setPaymentTemplate(template) {
        this.paymentTemplateSubject.next(template);
    }
    setEditPayment(payment) {
        this.paymentEditSubject.next(payment);
    }
}
/** @nocollapse */ StateService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StateService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ StateService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StateService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: StateService, decorators: [{
            type: Injectable
        }] });

class BatchOrderStateService {
    constructor() {
        this.batchOrderIdSubject = new BehaviorSubject('');
        this.formSubject = new BehaviorSubject(new FormGroup({}));
        this.stateSubject = new BehaviorSubject(ManualBatchState.INITIAL);
        this.stepSubject = new BehaviorSubject(undefined);
        this.errorsSubject = new BehaviorSubject({});
        this.selectedBatchTemplateSubject = new BehaviorSubject(undefined);
        this.bacthOrderFromTemplateSubject = new BehaviorSubject(undefined);
        this.bacthPaymentsFromTemplateSubject = new BehaviorSubject(undefined);
    }
    get batchOrderId$() {
        return this.batchOrderIdSubject.asObservable();
    }
    get batchOrderId() {
        return this.batchOrderIdSubject.value;
    }
    set batchOrderId(id) {
        this.batchOrderIdSubject.next(id);
    }
    get form$() {
        return this.formSubject.asObservable();
    }
    get formInstance() {
        return this.formSubject.value;
    }
    get state$() {
        return this.stateSubject.asObservable();
    }
    get step$() {
        return this.stepSubject.asObservable();
    }
    get currentState() {
        return this.stateSubject.value;
    }
    get currentStep() {
        return this.stepSubject.value;
    }
    get errors$() {
        return this.errorsSubject.asObservable();
    }
    get selectedBatchTemplate$() {
        return this.selectedBatchTemplateSubject.asObservable();
    }
    get selectedBatchTemplate() {
        return this.selectedBatchTemplateSubject.value;
    }
    get batchOrderFromTemplate$() {
        return this.bacthOrderFromTemplateSubject.asObservable();
    }
    get batchPaymentsFromTemplate$() {
        return this.bacthPaymentsFromTemplateSubject.asObservable();
    }
    saveForm(form) {
        this.formSubject.next(form);
    }
    resetForm() {
        this.formSubject.next(new FormGroup({}));
    }
    setState(paymentState) {
        this.stateSubject.next(paymentState);
    }
    setStep(step) {
        this.stepSubject.next(step);
    }
    resetErrors() {
        this.errorsSubject.next({});
    }
    addError(stepName, error) {
        const errors = this.errorsSubject.value;
        const currentStepErrors = errors[stepName] || [];
        this.errorsSubject.next(Object.assign(Object.assign({}, errors), { [stepName]: [...currentStepErrors, error] }));
    }
    removeErrorAt(stepName, index) {
        const errors = this.errorsSubject.value;
        const currentStepErrors = errors[stepName] || [];
        if (currentStepErrors.length && index < currentStepErrors.length) {
            currentStepErrors.splice(index, 1);
            this.errorsSubject.next(Object.assign(Object.assign({}, errors), { [stepName]: [...currentStepErrors] }));
        }
    }
    selectBatchTemplate(batchTemplate) {
        this.selectedBatchTemplateSubject.next(batchTemplate);
    }
    unselectBatchTemplate() {
        this.selectedBatchTemplateSubject.next(undefined);
    }
    loadBatchOrderFromTemplate(batchOrder) {
        this.bacthOrderFromTemplateSubject.next(batchOrder);
    }
    loadBatchPaymentsFromTemplate(batchPayments) {
        this.bacthPaymentsFromTemplateSubject.next(batchPayments);
    }
    removeBatchOrderFromTemplate() {
        this.bacthOrderFromTemplateSubject.next(undefined);
    }
    removeBatchPaymentsFromTemplate() {
        this.bacthPaymentsFromTemplateSubject.next(undefined);
    }
}
/** @nocollapse */ BatchOrderStateService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BatchOrderStateService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ BatchOrderStateService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BatchOrderStateService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BatchOrderStateService, decorators: [{
            type: Injectable
        }] });

class NavigationService {
    constructor(routerService) {
        this.routerService = routerService;
        this.emitAfterSuccess = new Subject();
        this.afterSuccessEmitted$ = this.emitAfterSuccess.asObservable();
    }
    form() {
        return this.routerService.navigate([Routes.FORM], {
            queryParamsHandling: 'merge',
        });
    }
    review() {
        return this.routerService.navigate([Routes.REVIEW], {
            queryParamsHandling: 'merge',
        });
    }
    afterSuccess() {
        this.emitAfterSuccess.next();
    }
}
/** @nocollapse */ NavigationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: NavigationService, deps: [{ token: i1$6.RouterService }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ NavigationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: NavigationService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: NavigationService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1$6.RouterService }]; } });

function arrangementItemFromService(record) {
    return {
        id: record.id,
        name: record.displayName || record.bankAlias || record.name || '',
        alias: (record.userPreferences || {}).alias || record.bankAlias,
        balance: record.bookedBalance || record.availableBalance,
        bookedBalance: record.bookedBalance,
        availableBalance: record.availableBalance,
        creditLimit: record.creditLimit,
        currency: record.currency || '',
        bankBranchCode: record.bankBranchCode || '',
        BIC: record.BIC,
        IBAN: record.IBAN || record.number,
        BBAN: record.BBAN,
        externalTransferAllowed: record.externalTransferAllowed,
        urgentTransferAllowed: record.urgentTransferAllowed,
        additions: record.additions,
        productKindName: record.productKindName,
        isArrangement: true,
        defaultRecord: record,
    };
}
function arrangementListFromService(response, isLoadMore = false, totalCount) {
    return {
        count: totalCount || response.length,
        items: response.map(arrangementItemFromService),
        isLoadMore,
    };
}
const accMap = (scheme = 'BBAN') => (source) => source.pipe(map((arrangements) => mapArrangementList(arrangements, scheme)));
const mapArrangementList = (arrangements, scheme = 'BBAN') => arrangements.items.map((arrangement) => ({
    id: arrangement.id,
    name: arrangement.name,
    displayName: arrangement.displayName,
    alias: arrangement.alias,
    balance: arrangement.bookedBalance,
    bookedBalance: arrangement.bookedBalance,
    availableBalance: arrangement.availableBalance,
    creditLimit: arrangement.creditLimit,
    accountNumber: arrangement[scheme] || arrangement.BBAN || arrangement.IBAN || '',
    number: arrangement[scheme] || arrangement.BBAN || arrangement.IBAN || '',
    bankBranchCode: arrangement.bankBranchCode,
    BIC: arrangement.BIC,
    accountType: scheme,
    currency: arrangement.currency,
    schemeName: arrangement.IBAN ? 'IBAN' : 'BBAN',
    externalTransferAllowed: arrangement.externalTransferAllowed,
    urgentTransferAllowed: arrangement.urgentTransferAllowed,
    additions: arrangement.additions || {},
    productKindName: arrangement.productKindName,
    isArrangement: true,
    defaultRecord: arrangement.defaultRecord,
}));
/**
 * @deprecated
 * This will be removed in the next major version
 * Please use `mapArrangementList` instead
 */
const mapArrangementToCreditAccount = mapArrangementList;
const mapConnectedAccounts = (account) => ({
    id: account.externalAccountId,
    name: account.accountNickName || account.bankName,
    accountNumber: account.accountNumber,
    productKindName: ProductKinds.connectedAccounts,
    accountType: account.accountType,
});

const fromResponse = (response) => {
    if (response.body === null) {
        throw new Error('Response body not set');
    }
    if (response.status < 200 || response.status > 299) {
        throw new Error(`Server error ${response.status}`);
    }
    return response.body;
};

function contactItemFromService(contact) {
    return {
        name: contact.name,
        addressLine1: contact.addressLine1,
        addressLine2: contact.addressLine2,
        streetName: contact.streetName,
        town: contact.town,
        postCode: contact.postCode,
        countrySubDivision: contact.countrySubDivision,
        country: contact.country,
        accounts: contact.accounts.map((account) => (Object.assign(Object.assign({}, account), { accountNumber: account.accountNumber || account.IBAN || '' }))),
        id: contact.id,
    };
}
function mapContactAccounts(contact) {
    return contact.accounts.map((account) => (Object.assign(Object.assign({ name: contact.name }, (contact.accounts.length > 1 ? { accountName: account.name } : null)), { addressLine1: contact.addressLine1, addressLine2: contact.addressLine2, streetName: contact.streetName, town: contact.town, postCode: contact.postCode, countrySubDivision: contact.countrySubDivision, country: contact.country, accounts: [
            Object.assign(Object.assign({}, account), { accountNumber: account.accountNumber || account.IBAN || '', email: account.email || contact.emailId, phoneNumber: account.phoneNumber || contact.phoneNumber }),
        ], id: contact.id })));
}
function contactListFromService(response, isLoadMore = false) {
    const responseValue = fromResponse(response);
    const items = responseValue.reduce((acc, contact) => {
        acc.push(...mapContactAccounts(contact));
        return acc;
    }, []);
    return {
        items,
        itemsCount: responseValue.length,
        count: parseInt(response.headers.get('x-total-count'), 10),
        isLoadMore,
    };
}
function contactItemToService(counterparty) {
    const { name, accountNumber, schemeName, creditorBank = {}, postalAddress = {}, } = counterparty;
    let schemeValue;
    switch (schemeName) {
        case SchemeNames.EMAIL:
            schemeValue = { email: stripSpaces(accountNumber) };
            break;
        case SchemeNames.MOBILE:
            schemeValue = { phoneNumber: stripSpaces(accountNumber) };
            break;
        case SchemeNames.IBAN:
            schemeValue = { IBAN: stripSpaces(accountNumber) };
            break;
        default:
            schemeValue = { accountNumber: stripSpaces(accountNumber) };
    }
    return {
        name,
        addressLine1: postalAddress.addressLine1,
        addressLine2: postalAddress.addressLine2,
        streetName: postalAddress.streetName,
        town: postalAddress.town,
        postCode: postalAddress.postCode,
        countrySubDivision: postalAddress.countrySubDivision,
        country: postalAddress.country,
        accounts: [
            Object.assign(Object.assign({}, getBankDetails(creditorBank)), schemeValue),
        ],
    };
}
function getBankDetails({ bankBranchCode: bankCode, bic: BIC, bankName, postalAddress = {}, }) {
    return {
        bankCode,
        BIC,
        bankName,
        bankAddressLine1: postalAddress.addressLine1,
        bankAddressLine2: postalAddress.addressLine2,
        bankStreetName: postalAddress.streetName,
        bankPostCode: postalAddress.postCode,
        bankTown: postalAddress.town,
        bankCountrySubDivision: postalAddress.countrySubDivision,
        bankCountry: postalAddress.country,
    };
}

const normalizePaymentSchedule = (scheduleItem) => {
    const { frequency, endDate, startDate = '', repeat, endType, every, } = scheduleItem || {};
    const freq = (frequency === null || frequency === void 0 ? void 0 : frequency.value) || frequency;
    return Object.assign(Object.assign({ transferFrequency: freq, every: (every || '1'), on: scheduleOn(freq, new Date(startDate)), startDate: datePart(startDate) }, (endType === 'on' && endDate && { endDate: datePart(endDate) })), (endType === 'after' && repeat && { repeat }));
};
//nosonar
const toPostRequest = (paymentItem) => {
    var _a, _b;
    if (paymentItem[PaymentBaseFields.counterparty][CounterPartyFields.role] ===
        'DEBTOR') {
        paymentItem = switchPaymentParties(paymentItem);
    }
    const { [PaymentBaseFields.counterparty]: { [CounterPartyFields.standardEntryClass]: entryClass, [CounterPartyFields.creditorBank]: creditorBankDetails, [CounterPartyFields.bankName]: bankNameValue, [CounterPartyFields.correspondentBank]: correspondentBankDetails, [CounterPartyFields.intermediaryBank]: intermediaryBankDetails, [CounterPartyFields.recipientId]: recipientId, [CounterPartyFields.accountType]: accountType, [CounterPartyFields.accountNumber]: accountNumber, [CounterPartyFields.name]: counterpartyNameValue, [CounterPartyFields.id]: counterpartyId, [CounterPartyFields.postalAddress]: postalAddress, [CounterPartyFields.messageToBank]: messageToBank, [CounterPartyFields.targetCurrency]: targetCurrency, [CounterPartyFields.remittanceInformation]: remittanceInfo, [CounterPartyFields.endToEndIdentification]: endToEndIdentification, [CounterPartyFields.mandateIdentifier]: mandateIdentifier, [CounterPartyFields.role]: role, [CounterPartyFields.selectedContact]: selectedContact, [CounterPartyFields.additions]: creditorAdditions, [CounterPartyFields.counterpartyAccountAdditions]: counterpartyAccountAdditions, }, [PaymentBaseFields.initiator]: debitorAccount, [PaymentBaseFields.remittanceInfo]: { [RemittanceInfoFields.urgent]: urgent, [RemittanceInfoFields.amountCurrencyGroup]: { amount: amountValue, currency, }, [RemittanceInfoFields.paymentReference]: paymentReference, [RemittanceInfoFields.purposeOfPayment]: purposeOfPayment, [RemittanceInfoFields.description]: description, }, [PaymentBaseFields.schedule]: paymentSchedule, paymentType, approved, chargeBearer, transferFee, [PaymentBaseFields.additions]: additions, } = paymentItem;
    const scheduleItem = normalizePaymentSchedule(paymentSchedule);
    const { [CounterPartyFields.bankBranchCode]: bankBranchCode, [CounterPartyFields.bic]: bankBic, [CounterPartyFields.postalAddress]: bankAddress, [CounterPartyFields.bankName]: creditorBankName, [CounterPartyFields.additions]: creditorBankAdditions, } = creditorBankDetails || {};
    const bankName = bankNameValue || creditorBankName;
    const transferFeeValue = transferFee || {};
    const { [CounterPartyFields.bankBranchCode]: correspondentBankBranchCode, [CounterPartyFields.bic]: correspondentBankBic, [CounterPartyFields.postalAddress]: correspondentBankAddress, [CounterPartyFields.bankName]: correspondentBankName, [CounterPartyFields.additions]: correspondentBankAdditions, } = correspondentBankDetails || {};
    const counterpartyBank = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, (bankBranchCode ? { bankBranchCode } : null)), (bankBic ? { bic: bankBic } : null)), (isObjectTruthy(bankAddress) ? { postalAddress: bankAddress } : null)), (bankName ? { name: bankName } : null)), (isObjectTruthy(creditorBankAdditions)
        ? { additions: creditorBankAdditions }
        : null));
    const { [CounterPartyFields.bankBranchCode]: intermediaryBankBranchCode, [CounterPartyFields.bic]: intermediaryBankBic, [CounterPartyFields.postalAddress]: intermediaryBankAddress, [CounterPartyFields.bankName]: intermediaryBankName, [CounterPartyFields.additions]: intermediaryBankAdditions, } = intermediaryBankDetails || {};
    const correspondentBank = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, (correspondentBankBranchCode
        ? { bankBranchCode: correspondentBankBranchCode }
        : null)), (correspondentBankBic ? { bic: correspondentBankBic } : null)), (isObjectTruthy(correspondentBankAddress)
        ? { postalAddress: correspondentBankAddress }
        : null)), (correspondentBankName ? { name: correspondentBankName } : null)), (isObjectTruthy(correspondentBankAdditions)
        ? { additions: correspondentBankAdditions }
        : null));
    const intermediaryBank = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, (intermediaryBankBranchCode
        ? { bankBranchCode: intermediaryBankBranchCode }
        : null)), (intermediaryBankBic ? { bic: intermediaryBankBic } : null)), (isObjectTruthy(intermediaryBankAddress)
        ? { postalAddress: intermediaryBankAddress }
        : null)), (intermediaryBankName ? { name: intermediaryBankName } : null)), (isObjectTruthy(intermediaryBankAdditions)
        ? { additions: intermediaryBankAdditions }
        : null));
    const remittanceInformation = remittanceInfo || description;
    const scheduledPayment = scheduleItem && scheduleItem.transferFrequency !== 'ONCE'
        ? { paymentMode: 'RECURRING', schedule: { schedule: scheduleItem } }
        : { paymentMode: 'SINGLE', schedule: {} };
    const purposeType = ((_b = (_a = paymentItem.inputFormFromSettings) === null || _a === void 0 ? void 0 : _a.purposesOfPayment) === null || _b === void 0 ? void 0 : _b.length)
        ? 'code'
        : 'freeText';
    const creditorScheme = getCounterpartySchemeName(paymentItem);
    return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ paymentType }, (approved ? { approved } : {})), { originatorAccount: Object.assign({ identification: {
                identification: debitorAccount.id,
                schemeName: 'ID',
            }, name: debitorAccount.name }, (debitorAccount.additions
            ? { additions: debitorAccount.additions }
            : {})), requestedExecutionDate: datePart(paymentSchedule === null || paymentSchedule === void 0 ? void 0 : paymentSchedule.startDate), paymentMode: scheduledPayment.paymentMode }), (entryClass ? { entryClass } : {})), { instructionPriority: urgent ? 'HIGH' : 'NORM' }), scheduledPayment.schedule), { transferTransactionInformation: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ instructedAmount: {
                amount: amountValue,
                currencyCode: currency,
            }, counterparty: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ name: counterpartyNameValue }, (recipientId ? { recipientId } : {})), (isObjectTruthy(postalAddress) ? { postalAddress } : {})), (role ? { role } : {})), (isObjectTruthy(creditorAdditions)
                ? { additions: creditorAdditions }
                : {})), (paymentItem.isDebitPayment ? { role: 'DEBTOR' } : {})), counterpartyAccount: Object.assign(Object.assign(Object.assign({ identification: {
                    identification: creditorScheme === 'ID' || creditorScheme === 'EXTERNAL_ID'
                        ? stripSpaces(counterpartyId)
                        : stripSpaces(accountNumber),
                    schemeName: creditorScheme || 'BBAN',
                } }, (accountType ? { accountType } : {})), (isObjectTruthy(selectedContact) ? { selectedContact } : {})), (isObjectTruthy(counterpartyAccountAdditions)
                ? { additions: counterpartyAccountAdditions }
                : {})) }, (isObjectTruthy(counterpartyBank) ? { counterpartyBank } : {})), (isObjectTruthy(correspondentBank) ? { correspondentBank } : {})), (isObjectTruthy(intermediaryBank) ? { intermediaryBank } : {})), (targetCurrency ? { targetCurrency } : {})), (mandateIdentifier ? { mandateIdentifier } : {})), (endToEndIdentification ? { endToEndIdentification } : {})), (remittanceInformation ? { remittanceInformation } : {})), (messageToBank ? { messageToBank } : {})), (paymentReference ? { messageToBank: paymentReference } : {})), (purposeOfPayment
            ? { purposeOfPayment: { [purposeType]: purposeOfPayment } }
            : {})), (chargeBearer ? { chargeBearer } : {})), (isObjectTruthy(transferFeeValue)
            ? { transferFee: Object.assign({}, transferFeeValue) }
            : {})) }), (isObjectTruthy(additions) ? { additions } : {}));
};
const toPostPaymentTemplate = (paymentItem) => {
    const name = paymentItem[PaymentTemplateFields.templateName];
    const { paymentType, originatorAccount, instructionPriority, transferTransactionInformation, entryClass, additions, } = toPostRequest(paymentItem);
    return Object.assign(Object.assign(Object.assign({ name,
        paymentType,
        originatorAccount,
        transferTransactionInformation }, (instructionPriority ? { instructionPriority } : {})), (entryClass ? { entryClass } : {})), (isObjectTruthy(additions) ? { additions } : {}));
};
const setMainFormDetails = (form, paymentResponse) => {
    var _a, _b, _c, _d, _e, _f, _g;
    const initiator = form.get(PaymentBaseFields.initiator);
    const counterparty = form.get(PaymentBaseFields.counterparty);
    const remittanceInfo = form.get(PaymentBaseFields.remittanceInfo);
    const additions = form.get(PaymentBaseFields.additions);
    const selectPaymentOption = form.get(PaymentOptionFields.selectPaymentOption);
    const chargeBearer = form.get(PaymentOptionFields.chargeBearer);
    const defaultAddress = {
        addressLine1: '',
        addressLine2: '',
        streetName: '',
        postCode: '',
        town: '',
        countrySubDivision: '',
        country: '',
    };
    const transferTransactionInformation = paymentResponse.transferTransactionInformation || {};
    const counterpartyAccount = transferTransactionInformation.counterpartyAccount || {};
    const counterpartyDetails = transferTransactionInformation.counterparty || {};
    const counterPartyIdentification = counterpartyAccount.identification || {};
    const counterpartyAddress = isObjectTruthy(counterpartyDetails.postalAddress)
        ? counterpartyDetails.postalAddress
        : defaultAddress;
    const originatorAccount = paymentResponse.originatorAccount || {};
    const instructedAmount = transferTransactionInformation.instructedAmount || {};
    const counterpartyBank = transferTransactionInformation.counterpartyBank || {};
    const counterpartyBankDetails = Object.assign(Object.assign(Object.assign({}, counterpartyBank), (counterpartyBank.name ? { bankName: counterpartyBank.name } : null)), {
        postalAddress: isObjectTruthy(counterpartyBank.postalAddress)
            ? counterpartyBank.postalAddress
            : defaultAddress,
    });
    const alphabetRegex = /^[a-zA-Z]*$/;
    const isIbanTransfer = counterPartyIdentification[CounterPartyFields.schemeName] ===
        SchemeNames.IBAN &&
        alphabetRegex.test(counterPartyIdentification.identification.substring(0, 2));
    if (!counterpartyBankDetails.postalAddress.country) {
        counterpartyBankDetails.postalAddress.country = isIbanTransfer
            ? counterPartyIdentification.identification.substring(0, 2)
            : (_a = form.get(HiddenFields.defaultCountry)) === null || _a === void 0 ? void 0 : _a.value;
    }
    const correspondentBank = transferTransactionInformation.correspondentBank || {};
    const correspondentBankDetails = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, correspondentBank), (correspondentBank.name ? { bankName: correspondentBank.name } : null)), { isCorrespondentBankTransfer: isObjectTruthy(correspondentBank) }), (correspondentBank.bankBranchCode
        ? { selectAdditionalBankCodeType: 'BRANCH_CODE' }
        : null)), { [CounterPartyFields.enableAdditionalBankDetails]: isObjectTruthy(correspondentBank) });
    const intermediaryBank = transferTransactionInformation.intermediaryBank || {};
    const intermediaryBankDetails = Object.assign(Object.assign(Object.assign(Object.assign({}, intermediaryBank), (intermediaryBank.name ? { bankName: intermediaryBank.name } : null)), (intermediaryBank.bankBranchCode
        ? { selectAdditionalBankCodeType: 'BRANCH_CODE' }
        : null)), { [CounterPartyFields.enableAdditionalBankDetails]: isObjectTruthy(intermediaryBank) });
    const counterPartyDetails = {
        [CounterPartyFields.standardEntryClass]: paymentResponse.entryClass,
        [CounterPartyFields.creditorBank]: counterpartyBankDetails,
        [CounterPartyFields.correspondentBank]: correspondentBankDetails,
        [CounterPartyFields.intermediaryBank]: intermediaryBankDetails,
        [CounterPartyFields.schemeName]: counterPartyIdentification.schemeName,
        [CounterPartyFields.recipientId]: counterpartyDetails.recipientId,
        [CounterPartyFields.accountType]: counterpartyAccount.accountType,
        [CounterPartyFields.accountNumber]: counterPartyIdentification.identification,
        [CounterPartyFields.name]: counterpartyDetails.name,
        [CounterPartyFields.postalAddress]: counterpartyAddress,
        [CounterPartyFields.messageToBank]: transferTransactionInformation.messageToBank || '',
        [CounterPartyFields.targetCurrency]: transferTransactionInformation.targetCurrency,
        [CounterPartyFields.remittanceInformation]: ((_b = transferTransactionInformation
            .remittanceInformation) === null || _b === void 0 ? void 0 : _b.content)
            ? (_c = transferTransactionInformation.remittanceInformation) === null || _c === void 0 ? void 0 : _c.content
            : transferTransactionInformation.remittanceInformation || '',
        [CounterPartyFields.endToEndIdentification]: transferTransactionInformation.endToEndIdentification,
        [CounterPartyFields.mandateIdentifier]: transferTransactionInformation.mandateIdentifier,
        [CounterPartyFields.role]: counterpartyDetails.role,
        [CounterPartyFields.selectedContact]: counterpartyAccount.selectedContact || {},
        [CounterPartyFields.id]: counterpartyAccount.arrangementId ||
            counterpartyAccount.externalArrangementId,
    };
    const initiatorDetails = {
        [InitiatorFields.id]: originatorAccount.arrangementId,
        [InitiatorFields.name]: originatorAccount.name,
        [InitiatorFields.accountNumber]: originatorAccount.identification &&
            originatorAccount.identification.identification,
        currency: originatorAccount.currency || paymentResponse.originatorAccountCurrency,
        balance: originatorAccount.balance,
    };
    const decimalIndex = (_d = instructedAmount.amount) === null || _d === void 0 ? void 0 : _d.indexOf('.');
    const purposeOfPayment = transferTransactionInformation.purposeOfPayment || {};
    const description = ((_e = transferTransactionInformation.remittanceInformation) === null || _e === void 0 ? void 0 : _e.content)
        ? (_f = transferTransactionInformation.remittanceInformation) === null || _f === void 0 ? void 0 : _f.content
        : transferTransactionInformation.remittanceInformation || '';
    const remittanceInfoDetails = {
        [RemittanceInfoFields.urgent]: paymentResponse.instructionPriority === 'HIGH',
        [RemittanceInfoFields.amountCurrencyGroup]: {
            amount: (_g = instructedAmount.amount) === null || _g === void 0 ? void 0 : _g.slice(0, decimalIndex + 3),
            currency: instructedAmount.currencyCode,
        },
        [RemittanceInfoFields.paymentReference]: transferTransactionInformation.messageToBank || '',
        [RemittanceInfoFields.description]: paymentResponse.paymentReference || description,
        [RemittanceInfoFields.purposeOfPayment]: purposeOfPayment.code || purposeOfPayment.freeText || '',
    };
    const setValues = (control, obj) => {
        if (control) {
            control.patchValue(obj);
        }
    };
    setValues(initiator, initiatorDetails);
    setValues(counterparty, counterPartyDetails);
    setValues(remittanceInfo, remittanceInfoDetails);
    setValues(additions, paymentResponse.additions);
    selectPaymentOption === null || selectPaymentOption === void 0 ? void 0 : selectPaymentOption.patchValue(`${paymentResponse.paymentType}::${paymentResponse.instructionPriority}`);
    chargeBearer === null || chargeBearer === void 0 ? void 0 : chargeBearer.patchValue(transferTransactionInformation.chargeBearer);
    return form;
};
const setFormDetailsFromService = (form, payment) => {
    const scheduleControl = form.get(PaymentBaseFields.schedule);
    const startDateControl = scheduleControl === null || scheduleControl === void 0 ? void 0 : scheduleControl.get(ScheduleFields.startDate);
    const isPaymentCopyControl = form.get(HiddenFields.isPaymentCopy);
    if (payment.schedule && !(isPaymentCopyControl === null || isPaymentCopyControl === void 0 ? void 0 : isPaymentCopyControl.value)) {
        const schedule = payment.schedule;
        const freqControl = scheduleControl === null || scheduleControl === void 0 ? void 0 : scheduleControl.get(ScheduleFields.frequency);
        const endTypeControl = scheduleControl === null || scheduleControl === void 0 ? void 0 : scheduleControl.get(ScheduleFields.endType);
        const endDateControl = scheduleControl === null || scheduleControl === void 0 ? void 0 : scheduleControl.get(ScheduleFields.endDate);
        const repeatControl = scheduleControl === null || scheduleControl === void 0 ? void 0 : scheduleControl.get(ScheduleFields.repeat);
        startDateControl === null || startDateControl === void 0 ? void 0 : startDateControl.patchValue(new Date(datePart(schedule.startDate)).toISOString());
        freqControl === null || freqControl === void 0 ? void 0 : freqControl.patchValue(schedule.transferFrequency);
        endTypeControl === null || endTypeControl === void 0 ? void 0 : endTypeControl.patchValue(schedule.repeat
            ? endTypes.after
            : schedule.endDate
                ? endTypes.on
                : endTypes.never);
        repeatControl === null || repeatControl === void 0 ? void 0 : repeatControl.patchValue(schedule.repeat || 2);
        if (schedule.endDate) {
            startDateControl === null || startDateControl === void 0 ? void 0 : startDateControl.markAsPristine(); // to prevent overwriting endDate with calculated value
            endDateControl === null || endDateControl === void 0 ? void 0 : endDateControl.patchValue(new Date(schedule.endDate).toISOString());
        }
    }
    else if (!payment.schedule && !(isPaymentCopyControl === null || isPaymentCopyControl === void 0 ? void 0 : isPaymentCopyControl.value)) {
        startDateControl === null || startDateControl === void 0 ? void 0 : startDateControl.patchValue(new Date(payment.requestedExecutionDate || '').toISOString());
    }
    return setMainFormDetails(form, payment);
};
const setFormDetailsFromResponse = (form, paymentResponse, { id, name } = {}) => {
    const paymentTemplateName = form.get(PaymentTemplateFields.templateName);
    const paymentTemplateId = form.get(PaymentTemplateFields.paymentTemplateId);
    paymentTemplateName === null || paymentTemplateName === void 0 ? void 0 : paymentTemplateName.patchValue(name);
    paymentTemplateId === null || paymentTemplateId === void 0 ? void 0 : paymentTemplateId.patchValue(id);
    return setMainFormDetails(form, paymentResponse);
};
const switchPaymentParties = (paymentData) => {
    const { role } = CounterPartyFields;
    const { currency } = InitiatorFields;
    const { initiator, counterparty } = PaymentBaseFields;
    const { [currency]: currencyValue } = paymentData[initiator];
    const initiatorValue = Object.assign(Object.assign({}, paymentData[counterparty]), (currencyValue ? { [currency]: currencyValue } : { [currency]: '' }));
    const counterPartyValue = Object.assign(Object.assign({}, paymentData[initiator]), { [role]: paymentData[counterparty][role] });
    return Object.assign(Object.assign({}, paymentData), { [initiator]: initiatorValue, [counterparty]: counterPartyValue });
};
/**
 * @deprecated
 * Will be removed in widget collection v3.11.0
 */
const updateFreqFieldOptions = (field, isRecurrent, widgetOptions) => {
    const options = [...field.options.options];
    const { isOneOffToRecurrentAllowed, isRecurrentToOneOffAllowed } = widgetOptions;
    if (isRecurrent && !isRecurrentToOneOffAllowed) {
        options.shift();
        field = Object.assign(Object.assign({}, field), { options: Object.assign(Object.assign({}, field.options), { options, defaultValue: options[0].value }) });
    }
    else if (!isRecurrent && !isOneOffToRecurrentAllowed) {
        field = Object.assign(Object.assign({}, field), { options: Object.assign(Object.assign({}, field.options), { options: [options[0]] }) });
    }
    return field;
};

const mapPaymentOptions = (options, optionsLabel = {}) => {
    const optionsArr = [];
    let paymentOptions;
    for (const option of options) {
        paymentOptions = option.paymentOptions || [];
        paymentOptions.forEach((paymentOption) => {
            optionsArr.push(Object.assign({ paymentType: option.paymentType, canEditCounterparty: option.canEditCounterparty, showHelperText: paymentOptions.length > 1, name: optionsLabel[option.paymentType] }, paymentOption));
        });
    }
    return optionsArr;
};

const initialTemplatesParams = {
    from: 0,
    size: paymentTemplatesPageSize,
    intendedAction: PaymentTemplateAction.CREATE,
};
class PaymentOrderHttpService {
    constructor(paymentOrderData, paymentTemplateData, contactsData, productSummaryData, accessgroupData, notificationService, settings, paymentOrdersA2ADataHttpService, deprecationService) {
        this.paymentOrderData = paymentOrderData;
        this.paymentTemplateData = paymentTemplateData;
        this.contactsData = contactsData;
        this.productSummaryData = productSummaryData;
        this.accessgroupData = accessgroupData;
        this.notificationService = notificationService;
        this.settings = settings;
        this.paymentOrdersA2ADataHttpService = paymentOrdersA2ADataHttpService;
        this.deprecationService = deprecationService;
        this.paymentResponseSubject = new Subject();
        this.contactsGetParams = new BehaviorSubject({
            from: 0,
            size: contactsPageSize,
        });
        this.creditAccountsParams = new BehaviorSubject({
            from: 0,
            creditAccount: true,
            size: arrangementsPageSize,
        });
        this.debitAccountsParams$ = new BehaviorSubject({
            from: 0,
            debitAccount: true,
            size: arrangementsPageSize,
        });
        this.paymentTemplateParams = new BehaviorSubject(initialTemplatesParams);
        this.creditAccountsParameters$ = this.creditAccountsParams.pipe(map(this.buildArrangementsContextParameters.bind(this)));
        this.dataItemParams$ = new Subject();
        this.loading$ = new BehaviorSubject(true);
        this.dataItemPermissions$ = this.dataItemParams$.pipe(switchMap((id) => this.handleDataItemPermissions(id)));
        this.arrangementUserPermissions$ = this.dataItemParams$.pipe(switchMap((id) => this.getArrangementUserPermission(id)));
        this.createPermission$ = this.settings ? this.getUserPermission() : EMPTY;
        this.paymentResponse = this.paymentResponseSubject.asObservable();
        this.debitAccounts = this.debitAccountsParams$.pipe(map(this.buildArrangementsContextParameters.bind(this)), exhaustMap((params) => this.fetchArrangementList(params)), shareReplay(1), scan((acc, curr) => {
            const { merge, from } = this.debitAccountsParams$.value;
            return this.mergeArrangementList(acc, curr, from > 0 && !!merge);
        }));
        this.contacts = this.contactsGetParams.pipe(exhaustMap((_a) => {
            var { isLoadMore } = _a, params = __rest(_a, ["isLoadMore"]);
            return this.contactsData.getContacts(params, 'response').pipe(map((response) => contactListFromService(response, isLoadMore)), catchError((err) => of(err)));
        }), shareReplay(1));
        this.creditAccounts = this.creditAccountsParameters$.pipe(exhaustMap((params) => this.fetchArrangementList(params)), shareReplay(1), scan((acc, curr) => {
            const { merge, from } = this.creditAccountsParams.value;
            return this.mergeArrangementList(acc, curr, from > 0 && !!merge);
        }), catchError((err) => of(err)));
        this.connectedAccounts$ = this.paymentOrdersA2ADataHttpService
            .getAll('response')
            .pipe(map(fromResponse), map((res) => res.accounts && res.accounts.filter((acc) => acc.status === 'Active')), shareReplay(1));
        this.paymentTemplates$ = this.paymentTemplateParams.pipe(tap(() => this.loading$.next(true)), debounce((par) => (par.query ? timer(1000) : EMPTY)), switchMap((params) => this.loadPaymentTemplates(Object.assign(Object.assign({}, params), { paymentType: this.paymentType }))), scan((acc, curr) => this.mergeResults(acc, curr)), tap(() => this.loading$.next(false)));
        this.templatesList$ = (paymentType) => this.paymentTemplateData
            .getPaymentTemplates(Object.assign(Object.assign({}, initialTemplatesParams), { paymentType }), 'response')
            .pipe(map((response) => response.body));
        this.deprecationService.logDeprecatedFeature('"handleDataItemPermissions" method and "dataItemPermissions$" property are deprecated and will be removed in next major release');
    }
    buildArrangementsContextParameters(params) {
        var _a;
        return Object.assign({ resourceName: this.resourceName || defaultResourceName, businessFunction: (_a = this.arrangementBusFunctions) !== null && _a !== void 0 ? _a : this.businessFunction, privilege: this.privilege || defaultPrivilege }, params);
    }
    fetchArrangementList(params) {
        return this.productSummaryData.getArrangementsByBusinessFunction(params, 'response').pipe(map(({ headers, body }) => {
            const totalCount = headers.get('x-total-count') || '0';
            const items = body || [];
            return {
                count: parseInt(totalCount, 10) || items.length,
                items: items.map(arrangementItemFromService),
            };
        }));
    }
    getUserPermission() {
        return this.accessgroupData
            .getCheckUserPermission(Object.assign(Object.assign({}, this.settings.businessConfig), { privileges: 'create' }), 'response')
            .pipe(shareReplay(1));
    }
    postPaymentOrder(paymentOrder) {
        return this.paymentOrderData.postPaymentOrders({ paymentOrdersPost: paymentOrder });
    }
    putPaymentOrder(paymentOrder, paymentOrderId) {
        return this.paymentOrderData.putPaymentOrderById({
            paymentOrderId,
            paymentOrderPut: paymentOrder,
        });
    }
    getPayment(id) {
        return this.paymentOrderData.getPaymentOrderById({ paymentOrderId: id }, 'response').pipe(map(fromResponse));
    }
    getPaymentProgressStatus(paymentOrderId) {
        return this.paymentOrderData
            .getProgressStatusByPaymentOrderId({ paymentOrderId }, 'response')
            .pipe(map((response) => response.body));
    }
    handleDataItemPermissions(dataItemId) {
        return this.accessgroupData
            .getDataItemPermissionsContext({
            resourceName: dataItemPermissionParams.resourceName,
            privilege: dataItemPermissionParams.privilege,
            dataGroupType: dataItemPermissionParams.dataGroupType,
            dataItemId,
        })
            .pipe(pluck(0, 'permissions'), map((permissions) => permissions === null || permissions === void 0 ? void 0 : permissions.map((permission) => permission.businessFunction)));
    }
    getArrangementUserPermission(id) {
        return this.accessgroupData
            .getArrangementUserPermissionCheck({
            id,
            resource: dataItemPermissionParams.resourceName,
            function: this.businessFunction,
            privilege: dataItemPermissionParams.privilege,
        })
            .pipe(catchError((error) => of(error)));
    }
    loadDataItemPermissions(id) {
        this.dataItemParams$.next(id);
    }
    ngOnDestroy() {
        this.paymentResponseSubject.complete();
        this.contactsGetParams.complete();
        this.creditAccountsParams.complete();
    }
    loadMoreContacts(page = 0, params) {
        this.contactsGetParams.next(Object.assign({ from: page, isLoadMore: true, size: contactsPageSize }, params));
    }
    loadMoreCreditAccounts(page = 0, params) {
        this.creditAccountsParams.next(Object.assign(Object.assign(Object.assign({ from: page, creditAccount: true }, ((params === null || params === void 0 ? void 0 : params.query) && { searchTerm: params.query })), { isLoadMore: true, size: arrangementsPageSize }), params));
    }
    fetchCreditAccounts(query = '', params) {
        this.contactsGetParams.next(Object.assign(Object.assign(Object.assign({}, (query && { query })), { from: 0 }), params));
        this.creditAccountsParams.next(Object.assign(Object.assign(Object.assign({}, (query && { searchTerm: query })), { from: 0, creditAccount: true }), params));
    }
    loadMoreDebitAccounts(params) {
        this.debitAccountsParams$.next(Object.assign(Object.assign({}, this.debitAccountsParams$.value), params));
    }
    validatePayment(payment) {
        return this.paymentOrderData
            .postValidate({ paymentOrdersValidatePost: payment }, 'response')
            .pipe(map(fromResponse));
    }
    saveNewContact(contact) {
        return this.contactsData.postContacts({ contactsPostRequestBody: contact }, 'response').pipe(map((res) => res.body), catchError(() => of(null)));
    }
    postPaymentTemplate(requestObject) {
        return this.paymentTemplateData
            .postPaymentTemplates({ paymentTemplatesPostRequest: requestObject })
            .pipe(tap(() => this.loadMore(0)));
    }
    editPaymentTemplate(paymentTemplateId, paymentTemplatesPutRequest) {
        return this.paymentTemplateData.putPaymentTemplateById({
            paymentTemplateId,
            paymentTemplatesPutRequest,
        });
    }
    getCurrencyExchangeRate(currencyFrom, currencyTo) {
        return this.paymentOrderData.getRate({ currencyFrom, currencyTo }, 'response').pipe(map((response) => response && response.body), catchError(() => of(null)));
    }
    getAccountByAccountId(id, accountNumber) {
        return this.productSummaryData
            .getArrangementsByBusinessFunction({
            resourceName: this.resourceName || defaultResourceName,
            businessFunction: this.businessFunction,
            privilege: this.privilege || defaultPrivilege,
            searchTerm: accountNumber,
        }, 'response')
            .pipe(map(fromResponse), map((items) => items.find((item) => item.id === id)), map((item) => {
            if (item) {
                return arrangementItemFromService(item);
            }
            else {
                throw new Error('No account found...');
            }
        }));
    }
    loadPaymentTemplates(params) {
        return this.paymentTemplateData.getPaymentTemplates(params, 'response').pipe(map((response) => {
            const items = response.body || [];
            return {
                items,
                totalCount: parseInt(response.headers.get('x-total-count') || '0', 10) || items.length,
                params,
            };
        }));
    }
    mergeResults(acc, curr) {
        return {
            totalCount: curr.totalCount || curr.items.length,
            items: curr.params.from === 0 ? curr.items : [...acc.items, ...curr.items],
            params: curr.params,
        };
    }
    mergeArrangementList(accumulator, currentValue, merge) {
        return {
            count: currentValue.count || currentValue.items.length,
            items: merge ? [...accumulator.items, ...currentValue.items] : currentValue.items,
        };
    }
    loadMore(page) {
        const currentPage = this.paymentTemplateParams.value.from || 0;
        this.paymentTemplateParams.next(Object.assign(Object.assign({}, this.paymentTemplateParams.value), { from: currentPage + page }));
    }
    search(query) {
        this.paymentTemplateParams.next(Object.assign(Object.assign(Object.assign({}, this.paymentTemplateParams.value), { from: 0 }), { query }));
    }
    manageErrorResponse(response) {
        var _a, _b;
        const notification = {
            header: response.notificationHeader,
            headerContext: response.errorResponse,
            message: '',
        };
        if ((_a = response.errors) === null || _a === void 0 ? void 0 : _a.length) {
            (_b = response.errors) === null || _b === void 0 ? void 0 : _b.forEach((responseError) => {
                var _a;
                (_a = response.paymentErrors) === null || _a === void 0 ? void 0 : _a.errorData.find((err) => {
                    if (responseError.key === err.key) {
                        responseError.message = err.message;
                    }
                });
                if (!responseError.message && response.genericMessage) {
                    responseError.message = response.genericMessage;
                }
                notification.message = responseError.message;
                this.showNotification(false, notification);
            });
        }
        else {
            if (response.genericMessage) {
                notification.message = response.genericMessage;
            }
            this.showNotification(false, notification);
        }
    }
    showNotification(success, notification) {
        this.notificationService.showNotification(Object.assign({ dismissible: true, ttl: 5000, modifier: success ? 'success' : 'error', header: '', message: '' }, notification));
    }
    getContacts(params) {
        this.contactsGetParams.next(Object.assign(Object.assign({}, this.contactsGetParams.value), params));
        return this.contacts;
    }
    getCreditAccounts(params) {
        this.creditAccountsParams.next(Object.assign(Object.assign(Object.assign({}, this.creditAccountsParams.value), ((params === null || params === void 0 ? void 0 : params.query) && { searchTerm: params.query })), params));
        return this.creditAccounts;
    }
    getDebitAccounts(params) {
        this.debitAccountsParams$.next(Object.assign(Object.assign({}, this.debitAccountsParams$.value), params));
        return this.debitAccounts.pipe(shareReplay(1));
    }
    fetchBeneficiaries(params, type) {
        const { from, size, query } = params;
        switch (type) {
            case BeneficiaryList.ACCOUNTS:
                this.loadMoreCreditAccounts(from, { size, query });
                break;
            case BeneficiaryList.CONTACTS:
                this.loadMoreContacts(from, { size, query });
                break;
            default:
                this.fetchCreditAccounts(query, { size });
                break;
        }
    }
}
/** @nocollapse */ PaymentOrderHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentOrderHttpService, deps: [{ token: i1$b.PaymentOrdersHttpService }, { token: i2$5.PaymentTemplatesHttpService }, { token: i3$6.ContactsHttpService }, { token: i4$2.ProductSummaryHttpService }, { token: i5$1.UsersHttpService }, { token: i1$a.NotificationService }, { token: BB_PAYORD_OMNI_PAYMENT_CONFIG_TOKEN, optional: true }, { token: i7$1.A2aClientHttpService }, { token: i1$6.DeprecationsService }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ PaymentOrderHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentOrderHttpService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentOrderHttpService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1$b.PaymentOrdersHttpService }, { type: i2$5.PaymentTemplatesHttpService }, { type: i3$6.ContactsHttpService }, { type: i4$2.ProductSummaryHttpService }, { type: i5$1.UsersHttpService }, { type: i1$a.NotificationService }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [BB_PAYORD_OMNI_PAYMENT_CONFIG_TOKEN]
                }] }, { type: i7$1.A2aClientHttpService }, { type: i1$6.DeprecationsService }]; } });

class PaymentServiceStub {
    getPaymentOrders(params) {
        const response = new HttpResponse();
        return of(response);
    }
    getPaymentDetails(paymentId, params) {
        return of();
    }
    approvePayment(paymentId, comment) {
        return of();
    }
    rejectPayment(paymentId, comment) {
        return of();
    }
    postCancelPayment(paymentOrderId, version) {
        const response = new HttpResponse();
        return of(response);
    }
    cancelPayment(paymentOrderId, version) {
        const response = new HttpResponse();
        return of(response);
    }
}

class PaymentOptionsService {
    constructor(paymentOptionsData, sanctionedCountriesService, sanctionedCurrenciesService) {
        this.paymentOptionsData = paymentOptionsData;
        this.sanctionedCountriesService = sanctionedCountriesService;
        this.sanctionedCurrenciesService = sanctionedCurrenciesService;
        this.paymentOptionsSubject$ = new BehaviorSubject(undefined);
    }
    get paymentOptions$() {
        return this.paymentOptionsSubject$.asObservable();
    }
    fetchPaymentOptions(payment) {
        return this.paymentOptionsData
            .postPaymentOptions({ paymentOptionsRequest: payment })
            .pipe(tap((response) => {
            this.paymentOptionsSubject$.next(response.options || []);
        }));
    }
    getPaymentOptionsRecordByPaymentType(paymentType) {
        return this.paymentOptionsData
            .getPaymentOptionsByPaymentType({ paymentType })
            .pipe(map((response) => (response && [response]) || []), shareReplay(1));
    }
    getSanctionedCurrencies(countryIso) {
        return this.sanctionedCurrenciesService
            .getSanctionedCurrencies({ countryIso })
            .pipe(map((response) => response || {}));
    }
    getSanctionedCountries(countryIso) {
        return this.sanctionedCountriesService
            .getSanctionedCountries({ countryIso })
            .pipe(map((response) => (response === null || response === void 0 ? void 0 : response.countries) || []));
    }
    resetPaymentOptions() {
        this.paymentOptionsSubject$.next([]);
    }
}
/** @nocollapse */ PaymentOptionsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentOptionsService, deps: [{ token: i1$d.PaymentOptionsHttpService }, { token: i1$d.SanctionedCountriesHttpService }, { token: i1$d.SanctionedCurrenciesHttpService }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ PaymentOptionsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentOptionsService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentOptionsService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1$d.PaymentOptionsHttpService }, { type: i1$d.SanctionedCountriesHttpService }, { type: i1$d.SanctionedCurrenciesHttpService }]; } });

class MultiplePaymentService {
    constructor(batchOrderService, batchTemplateService, productSummaryService) {
        this.batchOrderService = batchOrderService;
        this.batchTemplateService = batchTemplateService;
        this.productSummaryService = productSummaryService;
        this.submitting = false;
    }
    createFetchAccountsFactory(config) {
        return this._fetchAccountsFactory.bind(this, config);
    }
    saveBatchOrder(data, batchOrderID, dryRun) {
        this.submitting = true;
        const param = {
            batchOrdersPostRequest: data,
        };
        if (batchOrderID === '') {
            return this.batchOrderService
                .postBatchOrders(param)
                .pipe(catchError(this.catchResponseError));
        }
        else {
            return this.updateBatchOrder(data, batchOrderID, dryRun);
        }
    }
    updateBatchOrder(event, batchOrderID, dryRun, intendedCreditTransactionsCount, intendedCreditAmount) {
        return this.batchOrderService
            .updateBatchOrderById({
            batchOrderId: batchOrderID,
            dryRun,
            batchOrderPutRequest: event,
            intendedCreditAmount,
            intendedCreditTransactionsCount,
        })
            .pipe(catchError(this.catchResponseError));
    }
    cancelDraftOrder(batchOrderId) {
        this.batchOrderService
            .deleteBatchOrderIdByBatchOrderId({ batchOrderId })
            .pipe(take(1))
            .subscribe();
    }
    saveDraftPayment(data, batchOrderID) {
        return this.batchOrderService
            .postBatchPayments({
            batchOrderId: batchOrderID,
            batchPaymentsPostRequest: data,
        })
            .pipe(catchError(this.catchResponseError));
    }
    updatePayment(batchOrderID, paymentID, data) {
        return this.batchOrderService
            .putBatchPaymentById({
            batchOrderId: batchOrderID,
            batchPaymentId: paymentID,
            batchPaymentsPutRequest: data,
        })
            .pipe(catchError(this.catchResponseError));
    }
    deletePayment(batchOrderId, batchPaymentId) {
        return this.batchOrderService
            .deleteBatchPaymentById({ batchOrderId, batchPaymentId })
            .pipe(catchError(this.catchResponseError));
    }
    saveAsTemplate(batchOrderId, name) {
        const parameter = {
            batchTemplatesPostRequest: { batchOrderId, name },
        };
        return this.batchTemplateService
            .postBatchTemplates(parameter)
            .pipe(catchError(this.catchResponseError))
            .toPromise();
    }
    getPayments(batchOrderId, options = { from: 0, size: 1000 }) {
        return this.batchOrderService
            .getBatchPaymentsById(Object.assign({ batchOrderId }, options))
            .pipe(catchError(this.catchResponseError))
            .toPromise();
    }
    catchResponseError(response) {
        switch (response.status) {
            case 400:
                return throwError(response.error || {
                    message: 'Unknown error',
                    errors: [{ message: 'Unknown error' }],
                });
            case 401:
                return throwError({
                    type: 'TIMEOUT',
                    message: 'Session Timeout',
                    subMessage: 'Please login again.',
                });
            default:
                return throwError({
                    type: 'GENERIC',
                    message: 'Unknown Error',
                    subMessage: 'Try to reload the page or contact system administrator.',
                });
        }
    }
    _fetchAccountsFactory(config) {
        const search$ = new BehaviorSubject('');
        const items$ = search$.pipe(distinctUntilChanged(), debounce((searchTerm) => searchTerm ? timer(config.debounceTime || 0) : EMPTY), switchMap((searchTerm) => {
            const params = Object.assign(Object.assign({}, config), (searchTerm ? { searchTerm } : {}));
            return this.productSummaryService
                .getArrangementsByBusinessFunction(params)
                .pipe(map((arrangements) => arrangements.map((arrangement) => ({
                id: arrangement.id,
                name: arrangement.name || '',
                alias: (arrangement.userPreferences || {}).alias ||
                    arrangement.bankAlias,
                balance: arrangement.availableBalance || arrangement.bookedBalance,
                bookedBalance: arrangement.bookedBalance,
                availableBalance: arrangement.availableBalance,
                creditLimit: arrangement.creditLimit,
                currency: arrangement.currency || '',
                IBAN: arrangement.IBAN || arrangement.number,
                BBAN: arrangement.BBAN,
                accountNumber: arrangement.BBAN || arrangement.IBAN || '',
                number: arrangement.BBAN || '',
                bankBranchCode: arrangement.bankBranchCode,
                externalTransferAllowed: arrangement.externalTransferAllowed,
                urgentTransferAllowed: arrangement.urgentTransferAllowed,
                additions: arrangement.additions,
                productKindName: arrangement.productKindName,
                originalArrangement: arrangement,
            }))));
        }));
        return {
            search$,
            items$,
        };
    }
}
/** @nocollapse */ MultiplePaymentService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: MultiplePaymentService, deps: [{ token: i1$e.BatchOrdersHttpService }, { token: i2$6.BatchTemplatesHttpService }, { token: i4$2.ProductSummaryHttpService }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ MultiplePaymentService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: MultiplePaymentService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: MultiplePaymentService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1$e.BatchOrdersHttpService }, { type: i2$6.BatchTemplatesHttpService }, { type: i4$2.ProductSummaryHttpService }]; } });

function objectHasValue(input) {
    for (const property in input) {
        if (typeof input[property] === 'object') {
            return objectHasValue(input[property]);
        }
        else if (input[property]) {
            return true;
        }
    }
    return false;
}
function objectsHasValueByKey(obj, keys) {
    if (!obj) {
        return;
    }
    return keys.reduce((acc, key, index) => {
        if (!acc || !acc.hasOwnProperty(key)) {
            return false;
        }
        const isLast = keys.length - 1 === index;
        if (isLast && typeof acc[key] === 'object') {
            return objectHasValue(acc[key]) && acc[key];
        }
        return acc[key];
    }, obj);
}

class HasValuePipe {
    transform(data, compareTo, keys) {
        return Boolean(objectsHasValueByKey(data, keys) || objectsHasValueByKey(compareTo, keys));
    }
}
/** @nocollapse */ HasValuePipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: HasValuePipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
/** @nocollapse */ HasValuePipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: HasValuePipe, name: "hasValue" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: HasValuePipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'hasValue',
                }]
        }] });

class HasValueModule {
}
/** @nocollapse */ HasValueModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: HasValueModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ HasValueModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: HasValueModule, declarations: [HasValuePipe], imports: [CommonModule], exports: [HasValuePipe] });
/** @nocollapse */ HasValueModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: HasValueModule, imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: HasValueModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [HasValuePipe],
                    exports: [HasValuePipe],
                    imports: [CommonModule],
                }]
        }] });

function getAccountHolderAddress(account = {}) {
    return {
        addressLine1: account.accountHolderAddressLine1 || '',
        addressLine2: account.accountHolderAddressLine2 || '',
        streetName: account.accountHolderStreetName || '',
        town: account.accountHolderTown || '',
        postCode: account.accountHolderPostCode || '',
        countrySubDivision: account.accountHolderCountrySubDivision || '',
        country: account.accountHolderCountry || '',
    };
}
function getContactBankAddress(account = {}) {
    return {
        addressLine1: account.bankAddressLine1 || '',
        addressLine2: account.bankAddressLine2 || '',
        streetName: account.bankStreetName || '',
        town: account.bankTown || '',
        postCode: account.bankPostCode || '',
        countrySubDivision: account.bankCountrySubDivision || '',
        country: account.bankCountry || '',
    };
}

const handleCurrenciesList = (currencies) => {
    const res = {};
    const labeled = currencies.labeled;
    if (labeled) {
        const popular = labeled.popular || [];
        const normal = labeled.normal || [];
        const currenciesExtendedList = popular.concat(normal);
        res.dividerIndex = popular.length ? popular.length - 1 : undefined;
        res.currencies = currenciesExtendedList.map((item) => item.code);
        res.decimals = currenciesExtendedList.reduce((acc, val) => {
            acc[val.code] = val.decimals;
            return acc;
        }, {});
        if (currencies.default) {
            const defaultCode = currencies.default.code;
            res.currencies.splice(res.currencies.indexOf(defaultCode), 1);
            res.currencies.unshift(defaultCode);
        }
    }
    return res;
};
const getForexDetailsFromPayment = (payment) => {
    const rate = payment.exchangeRate;
    const amountValue = new BigNumber(payment.remittanceInfo.amountGroup.amount);
    const calculatedAmount = amountValue.dividedBy(rate).toString();
    if (rate && rate !== 0) {
        return {
            fromCurrency: payment.initiator.currency,
            toCurrency: payment.remittanceInfo.amountGroup.currency,
            calculatedAmount,
            rate,
        };
    }
    return {
        fromCurrency: payment.initiator.currency,
        toCurrency: payment.remittanceInfo.amountGroup.currency,
    };
};

function triggerPaymentHook(hooks, hookName, callback, formGroup) {
    const hook = hooks && hooks[hookName];
    const doneFn = callback;
    if (typeof hook === 'function') {
        if (hookName === PaymentHooks.onSave ||
            hookName === PaymentHooks.onSubmit) {
            hook({
                doneFn,
                form: formGroup, // The entire payment form
            });
        }
        else {
            hook();
        }
    }
}

var PaymentActionsTypes;
(function (PaymentActionsTypes) {
    PaymentActionsTypes["LoadPayments"] = "LoadPayments";
    PaymentActionsTypes["RefreshPayments"] = "RefreshPayments";
    PaymentActionsTypes["LoadMore"] = "LoadMore";
    PaymentActionsTypes["SelectAccount"] = "SelectAccount";
    PaymentActionsTypes["ChangePage"] = "ChangePage";
    PaymentActionsTypes["Search"] = "Search";
})(PaymentActionsTypes || (PaymentActionsTypes = {}));

class ChecksService {
    constructor(model, stopChecksDataHttpService) {
        this.model = model;
        this.stopChecksDataHttpService = stopChecksDataHttpService;
        this.loadingSub$ = new ReplaySubject(1);
        this.loading$ = this.loadingSub$.pipe(distinctUntilChanged());
    }
    set loading(val) {
        this.loadingSub$.next(val);
    }
    getStopChecks(params) {
        this.loading = true;
        return this.stopChecksDataHttpService
            .getStopChecks(params, 'response')
            .pipe(map(fromResponse), finalize(() => {
            this.loading = false;
        }));
    }
    postStopChecks(payload) {
        this.loading = true;
        return this.stopChecksDataHttpService
            .postStopChecks({ stopCheckPostRequest: payload }, 'response')
            .pipe(map(fromResponse), finalize(() => {
            this.loading = false;
        }));
    }
}
/** @nocollapse */ ChecksService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ChecksService, deps: [{ token: i1$6.ItemModel, optional: true }, { token: i2$7.StopChecksHttpService }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ ChecksService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ChecksService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ChecksService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1$6.ItemModel, decorators: [{
                    type: Optional
                }] }, { type: i2$7.StopChecksHttpService }]; } });

class PaymentOrdersHttpService {
    constructor(paymentsDataHttpService) {
        this.paymentsDataHttpService = paymentsDataHttpService;
    }
    approvalsServiceCall(paymentId, approvalStatus, comment) {
        return this.paymentsDataHttpService
            .putApprovalsByPaymentOrderId({
            paymentOrderId: paymentId,
            paymentOrderApprovalPutRequest: Object.assign({ approvalStatus }, (!!comment && { comment })),
        }, 'response')
            .pipe(map(fromResponse));
    }
    bulkApprovalsServiceCall(paymentOrderIds, approvalStatus, comment) {
        return this.paymentsDataHttpService
            .putBulkApprovals({
            bulkPaymentOrdersApprovalPutRequest: Object.assign({ approvalStatus,
                paymentOrderIds }, (!!comment && { comment })),
        }, 'response')
            .pipe(map(fromResponse));
    }
    loadPayments(params) {
        return this.getPaymentOrders(params).pipe(map((response) => {
            const totalCount = response.headers.get('x-total-count');
            return {
                totalCount: Number(totalCount),
                items: response.body || [],
            };
        }));
    }
    getPaymentOrders(params) {
        return this.paymentsDataHttpService.getPaymentOrders(params, 'response');
    }
    getPayment(id, params) {
        return this.paymentsDataHttpService
            .getPaymentOrderById(Object.assign({ paymentOrderId: id }, params), 'response')
            .pipe(map(fromResponse));
    }
    cancelPayment(paymentOrderId, version) {
        return this.paymentsDataHttpService.deletePaymentOrderById({
            paymentOrderId,
            version,
        });
    }
    postPaymentCancel(paymentOrderId, version) {
        return this.paymentsDataHttpService.postCancelByPaymentOrderId({
            paymentOrderId,
            paymentOrderCancelPostRequest: { version },
        }, 'response');
    }
    getCurrencyExchangeRate(currencyFrom, currencyTo) {
        return this.paymentsDataHttpService.getRate({ currencyFrom, currencyTo }, 'response');
    }
    approvePayment(paymentId, comment) {
        return this.approvalsServiceCall(paymentId, Actions.APPROVE, comment);
    }
    bulkApprovePayments(paymentIds, comment) {
        return this.bulkApprovalsServiceCall(paymentIds, Actions.APPROVE, comment);
    }
    rejectPayment(paymentId, comment) {
        return this.approvalsServiceCall(paymentId, Actions.REJECT, comment);
    }
    bulkRejectPayments(paymentIds, comment) {
        return this.bulkApprovalsServiceCall(paymentIds, Actions.REJECT, comment);
    }
    validatePayment(payment) {
        return this.paymentsDataHttpService
            .postValidate({ paymentOrdersValidatePost: payment }, 'response')
            .pipe(map(fromResponse));
    }
}
/** @nocollapse */ PaymentOrdersHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentOrdersHttpService, deps: [{ token: i1$b.PaymentOrdersHttpService }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ PaymentOrdersHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentOrdersHttpService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentOrdersHttpService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1$b.PaymentOrdersHttpService }]; } });

const DEFAULT_PAYMENT_PARAMS = new InjectionToken('default Payments Params');

class PaymentService {
    constructor(paymentOrdersService, model, defaultPaymentsParams) {
        var _a;
        this.paymentOrdersService = paymentOrdersService;
        this.model = model;
        this.defaultPaymentsParams = defaultPaymentsParams;
        this.destroy$ = new Subject();
        this.selectedAccount$ = new Subject();
        this.search$ = new Subject();
        this.changePage$ = new Subject();
        this.loadMore$ = new Subject();
        this.loadPayments$ = new ReplaySubject(1);
        this.refreshPayments$ = new Subject();
        this.sortPayments$ = new Subject();
        this.loadingSub$ = new ReplaySubject(1);
        this.actingSub$ = new ReplaySubject(1);
        this.pageSizeIM$ = ((_a = this.model) === null || _a === void 0 ? void 0 : _a.property('pageSize')) || of(null);
        this.loading$ = this.loadingSub$.pipe(distinctUntilChanged());
        this.acting$ = this.actingSub$.pipe(distinctUntilChanged());
        this.pageSizeSub$ = new BehaviorSubject(undefined);
        this.debitMode$ = new BehaviorSubject(undefined);
        this.pageSize$ = this.pageSizeSub$.asObservable().pipe(withLatestFrom(this.pageSizeIM$), map(([pageSize, pageSizeIM]) => 
        //TODO: remove it when migration on journeys for payments will be done
        pageSize === undefined
            ? pageSizeIM || this.defaultPaymentsParams.size
            : pageSize));
        this.loadingCalls = 0;
        this.actingCalls = 0;
        this.paymentsActions$ = merge(this.loadPayments$.pipe(map((paymentMode) => ({
            type: PaymentActionsTypes.LoadPayments,
            paymentMode,
        }))), this.refreshPayments$.pipe(mapTo({ type: PaymentActionsTypes.RefreshPayments })), this.changePage$.pipe(map((from) => ({ type: PaymentActionsTypes.ChangePage, from }))), this.loadMore$.pipe(map((from) => ({ type: PaymentActionsTypes.LoadMore, from }))), this.selectedAccount$.pipe(map((query) => ({ type: PaymentActionsTypes.SelectAccount, query }))), this.sortPayments$.pipe(map((sortParams) => (Object.assign({ type: PaymentActionsTypes.SelectAccount }, sortParams)))), this.search$.pipe(map((params) => (Object.assign({ type: PaymentActionsTypes.Search }, params)))));
        this.paymentState$ = this.paymentsActions$.pipe(withLatestFrom(this.pageSize$, this.debitMode$), map(([state, pageSize, isDebitMode]) => (Object.assign(Object.assign({}, state), { pageSize,
            isDebitMode }))), //TODO: remove it when migration on journeys for payments will be done
        scan((state, action) => (Object.assign(Object.assign({}, state), action))), map((state) => (Object.assign(Object.assign({}, this.defaultPaymentsParams), state))), map((_a) => {
            var { pageSize, isDebitMode } = _a, state = __rest(_a, ["pageSize", "isDebitMode"]);
            const isRefresh = state.type === 'RefreshPayments';
            const size = pageSize || 50;
            const from = state.from || 0;
            return Object.assign(Object.assign(Object.assign({}, state), { size: isRefresh ? size * (from + 1) : size, from: isRefresh ? 0 : from }), (isDebitMode ? { paymentTypeGroup: 'Debit' } : null));
        }), filter((action) => action.type !== undefined), shareReplay(1));
        this.paymentsEffect$ = this.paymentState$.pipe(switchMap((_a) => {
            var { type } = _a, params = __rest(_a, ["type"]);
            const isActing = type === PaymentActionsTypes.SelectAccount;
            const isLoadMore = type === PaymentActionsTypes.LoadMore;
            isActing ? (this.acting = true) : (this.loading = true);
            return this.paymentOrdersService.loadPayments(params).pipe(map((response) => (Object.assign(Object.assign({}, response), { isLoadMore }))), finalize(() => isActing ? (this.acting = false) : (this.loading = false)));
        }), takeUntil(this.destroy$), shareReplay(1));
        this.paymentsStateSource$ = new BehaviorSubject(undefined);
        this.paymentsEffect$.subscribe((payload) => this.handlePaymentSuccess(payload), (error) => this.paymentsStateSource$.error(error));
    }
    set loading(val) {
        val ? this.loadingCalls++ : this.loadingCalls--;
        this.loadingSub$.next(this.loadingCalls > 0);
    }
    set acting(val) {
        val ? this.actingCalls++ : this.actingCalls--;
        this.actingSub$.next(this.actingCalls > 0);
    }
    get payments$() {
        return this.paymentsStateSource$.asObservable();
    }
    handlePaymentSuccess(payload) {
        const orders = [];
        if (payload.isLoadMore) {
            orders.push(...this.handleLoadMore());
        }
        this.paymentsStateSource$.next({
            items: [...orders, ...payload.items],
            totalCount: payload.totalCount || payload.items.length,
        });
    }
    handleLoadMore() {
        const existingPayments = this.paymentsStateSource$.getValue();
        return existingPayments ? existingPayments.items : [];
    }
    loadPayments(paymentMode) {
        this.loadPayments$.next(paymentMode);
    }
    refreshPayments() {
        this.refreshPayments$.next();
    }
    loadMore(from) {
        this.loadMore$.next(from);
    }
    changePage(from) {
        this.changePage$.next(from);
    }
    sortPayments(orderBy, direction) {
        this.sortPayments$.next({ orderBy, direction });
    }
    setPageSize(value) {
        this.pageSizeSub$.next(value);
    }
    setDebitMode(value) {
        this.debitMode$.next(value);
    }
    cancelPayment(paymentOrderId, version) {
        this.acting = true;
        return this.paymentOrdersService
            .cancelPayment(paymentOrderId, version)
            .pipe(finalize(() => (this.acting = false)), tap(() => {
            this.handleCancelPaymentSuccess(paymentOrderId);
        }));
    }
    handleCancelPaymentSuccess(paymentOrderId) {
        const payments = this.paymentsStateSource$.getValue();
        if (payments) {
            const newItems = payments.items.filter((item) => item.id !== paymentOrderId);
            this.paymentsStateSource$.next({
                items: newItems,
                totalCount: payments.totalCount,
            });
        }
    }
    getCurrencyExchangeRate(currencyFrom = 'EUR', currencyTo = 'USD') {
        return this.paymentOrdersService.getCurrencyExchangeRate(currencyFrom, currencyTo);
    }
    getPaymentOrders(params) {
        return this.paymentOrdersService.getPaymentOrders(params);
    }
    getPaymentDetails(paymentId, params) {
        return this.paymentOrdersService.getPayment(paymentId, params);
    }
    approvePayment(paymentId, comment) {
        return this.paymentOrdersService.approvePayment(paymentId, comment);
    }
    bulkApprovePayments(paymentIds, comment) {
        return this.paymentOrdersService.bulkApprovePayments(paymentIds, comment);
    }
    rejectPayment(paymentId, comment) {
        return this.paymentOrdersService.rejectPayment(paymentId, comment);
    }
    bulkRejectPayments(paymentIds, comment) {
        return this.paymentOrdersService.bulkRejectPayments(paymentIds, comment);
    }
    searchPayments(query) {
        this.search$.next({ query, from: 0 });
    }
    applyFilter(_a) {
        var { amount, executionDate } = _a, rest = __rest(_a, ["amount", "executionDate"]);
        const retVal = Object.assign(Object.assign({}, rest), { from: 0 });
        if (!retVal.status) {
            retVal.status = [];
        }
        retVal.amountFrom = amount.from || '';
        retVal.amountTo = amount.to || '';
        retVal.executionDateFrom =
            executionDate && executionDate.from ? datePart(executionDate.from) : '';
        retVal.executionDateTo =
            executionDate && executionDate.to ? datePart(executionDate.to) : '';
        this.search$.next(retVal);
    }
    postCancelPayment(paymentOrderId, version) {
        this.acting = true;
        return this.paymentOrdersService
            .postPaymentCancel(paymentOrderId, version)
            .pipe(finalize(() => (this.acting = false)), tap(() => {
            this.handleCancelPaymentSuccess(paymentOrderId);
        }));
    }
    validatePayment(payment) {
        return this.paymentOrdersService.validatePayment(payment);
    }
    ngOnDestroy() {
        // clean up our subjects
        this.destroy$.complete();
        this.loadMore$.complete();
        this.changePage$.complete();
        this.selectedAccount$.complete();
        this.search$.complete();
        this.loadPayments$.complete();
        this.refreshPayments$.complete();
    }
}
/** @nocollapse */ PaymentService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentService, deps: [{ token: PaymentOrdersHttpService }, { token: i1$6.ItemModel, optional: true }, { token: DEFAULT_PAYMENT_PARAMS }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ PaymentService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: PaymentOrdersHttpService }, { type: i1$6.ItemModel, decorators: [{
                    type: Optional
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DEFAULT_PAYMENT_PARAMS]
                }] }]; } });
const providePaymentServices = [
    { provide: PaymentOrdersHttpService, useClass: PaymentOrdersHttpService },
    {
        provide: PaymentService,
        useClass: PaymentService,
        deps: [PaymentOrdersHttpService, ItemModel, DEFAULT_PAYMENT_PARAMS],
    },
];

/**
 * Generated bundle index. Do not edit.
 */

export { ACH_DEBIT, AccessContextScope, AccountBalances, AccountField, AccountFormatterPipe, Actions, AddressType, ApprovalStatus, AvailableActions, BATCH_INTERNAL_TRANSFERS, BBHighlightPipe, BB_CLOSED_PAYMENT_BUS_FN_SUFFIX, BB_INTRACOMPANY_PAYMENT_BUS_FN_SUFFIX, BB_MULTI_PAYMENT_CONFIG, BB_PAYMENT_CONFIG, BB_PAYORD_OMNI_PAYMENT_CONFIG_TOKEN, BB_PAYORD_PAYMENT_ERROR_MESSAGES_TOKEN, BB_REGISTERED_PAYMENT_CONFIGS, BatchOrderActions, BatchOrderError, BatchOrderStateService, BatchUploadStatus, BeneficiaryList, BeneficiarySelectorUIModule, BreachLimitError, BreachType, BreachedLimitType, BytesPipe, CHAPS, ChargeBearer, ChecksService, ContactScheme, CounterPartyFields, CountriesMap, CreditDebitMixedIndicator, CurrenciesMap, CurrencyToCountryMap, DEFAULT_PAYMENT_PARAMS, DefaultClosedPaymentBusFnSuffix, DefaultDebounceTime, DefaultIntraCompanyPaymentBusFnSuffix, DuplicateBatchAction, EditModeTypes, ExecutionTimeFrame, ExportPdfDirective, ExportPdfModule, Frequencies, HasValueModule, HiddenFields, INTERNAL_TRANSFER, INTERNAL_TRANSFER_BUSINESS, INTERNATIONAL_TRANSFER, INTRABANK_TRANSFER, InitiatePaymentHeaderStates, InitiatorFields, ListState, LoadMoreMethod, MANUAL_BATCHES, MULTIPLE_PAYMENT, ManualBatchState, ModalState, MultiPaymentEvents, MultiPaymentFormCardFields, MultiPaymentHooks, MultiplePaymentService, NavigationService, OOTBPaymentTypes, OOTB_PAYMENT_CONFIGS, P2PLimitErrorKeys, P2P_TRANSFER, PaymentActionsTypes, PaymentBaseFields, PaymentComponents, PaymentConfigService, PaymentFormFieldHooks, PaymentHooks, PaymentMode, PaymentModes, PaymentOptionFields, PaymentOptionsService, PaymentOrderHttpService, PaymentOrdersBadRequest, PaymentOrdersHttpService, PaymentOrdersUiModule, PaymentService, PaymentServiceStub, PaymentState, PaymentSubmitStatuses, PaymentTemplateAction, PaymentTemplateFields, PaymentTypeIcon, PaymentsSrSearchResultInfoComponent, PaymentsSrSearchResultInfoModule, PayordOmniPaymentConfigProvider, PayordPaymentErrorsConfigProvider, PayordStatusBadgeComponent, PayordStatusBadgeModule, Period, Preferences, ProductKinds, ProgressStatus, RelativeDate, RelativeDatePipe, RemittanceInfoFields, ReviewScreens, RoutableModalParamName, RoutableModalService, Routes, SEPA, STEPPER_CONFIG, ScheduleComponent, ScheduleCustomizableDirective, ScheduleEndType, ScheduleFields, Scheme, ScrollToElementBehavior, ScrollToElementBlock, ScrollToElementInline, SearchMinLength, SepaCountries, StateService, Status, StatusBadgeColorMap, StepperAction, THEME_V2, TemplateModeType, UK_FASTER_PAYMENT, USStates, US_ACH_CREDIT, US_DOMESTIC_WIRE, US_States, UnknownError, ViewType, accMap, accountsValidation, addressToString, amountGreaterThanZero, amountValidator, arrangementItemFromService, arrangementListFromService, arrangementsPageSize, bicCodeValidationPattern, canCopyPayment, cloneFormFieldOptions, clonePaymentConfig, clonePaymentFormItem, contactItemFromService, contactItemToService, contactListFromService, contactsPageSize, currencyValidatorFactory, dataItemPermissionParams, datePart, defaultBeneficiaryTabsConfig, defaultCounterPartyConfig, defaultInitiatorConfig, defaultPaymentSuccessEventName, defaultPrivilege, defaultRemittanceInfoConfig, defaultResourceName, defaultScheduleConfig, endDateAfterStartDateValidator, endTypes, filterObjectValues, focusChildElement, focusErrorElement, forbiddenStatus, frequencies, fromResponse, getAccountHolderAddress, getBankDetails, getConfig, getContactBankAddress, getCounterpartySchemeName, getDateOnly, getEndDate, getForexDetailsFromPayment, getIconByPaymnentType, getLabelFromPaymentConfig, getRelativeDate, handleCurrenciesList, hasCreatePermission, ibanCountryValidator, internalTransAmountOptToggleDependants, internalTransScheduleStartDateOnInitHook, internalTransferEndTypeOnInitHook, internalTransferOnDestroyHook, internalTransferRepeatOnInitHook, internalTransferScheduleAlertOnInitHook, internalTransferScheduleFreqOnInitHook, intrabankCheckboxOnInitHook, isAdditionsGroup, isAddressTruthy, isCounterpartyObjectEquals, isFormGroupConfig, isObjectTruthy, isSelectedBeneficiaryModified, mapArrangementList, mapArrangementToCreditAccount, mapConnectedAccounts, mapContactAccounts, mapPaymentOptions, maxValueTwoHundredValidator, minValueTwoValidator, minimumOneAccount, missingInListValidator, modelItemToBoolean, multiPaymnetValidationRules, noWhitespaceValidator, normalizePaymentType, objectEquals, objectHasValue, objectsHasValueByKey, parseString, pastDateValidator, paymentTemplatesPageSize, payordMessagesDefaults, payordOmniPaymentDefaults, providePaymentServices, removeScheduleFromConfig, requiredAfterValidator, requiredEndDateValidator, requiredEndTypeValidator, resetBeneficiaryDetails, routingTransitNumberValidator, sameAccountsValidator, scheduleEndDateOnInitHook, scheduleEndTypeToggleDependants, scheduleFrequencyToggleDependants, scheduleOn, scheduleStartDateOnDestroyHook, scheduleStartDateOnInitHook, scheduledPaymentValidationMethod, scrollToElement, setFormDetailsFromResponse, setFormDetailsFromService, setFrequencyOptionsPerConfig, shouldLoadTabContent, stripSpaces, switchPaymentParties, toInteger, toNumber, toPostPaymentTemplate, toPostRequest, today, toggleForAmountOptions, toggleTabIndex, triggerPaymentHook, updateFreqFieldOptions, AccountFormatterModule as ӨAccountFormatterModule, AddressDetailsComponent as ӨAddressDetailsComponent, BBHighlightModule as ӨBBHighlightModule, BbKeyboardNavigationModule as ӨBbKeyboardNavigationModule, BeneficiarySelectorUiComponent as ӨBeneficiarySelectorUiComponent, BreachLimitDetailsModalComponent as ӨBreachLimitDetailsModalComponent, BytesModule as ӨBytesModule, ConfirmationDialogComponent as ӨConfirmationDialogComponent, ConfirmationDialogModule as ӨConfirmationDialogModule, CountryNameComponent as ӨCountryNameComponent, CountrySelectorComponent as ӨCountrySelectorComponent, CurrencyAmountSelectorComponent as ӨCurrencyAmountSelectorComponent, CurrencySelectorComponent as ӨCurrencySelectorComponent, FlagIconComponent as ӨFlagIconComponent, FullAddressComponent as ӨFullAddressComponent, HasValuePipe as ӨHasValuePipe, HorizontalListSelectorComponent as ӨHorizontalListSelectorComponent, IbanDirective as ӨIbanDirective, IbanModule as ӨIbanModule, KeyboardNavigationAnchorDirective as ӨKeyboardNavigationAnchorDirective, KeyboardNavigationDirective as ӨKeyboardNavigationDirective, KeyboardNavigationItemDirective as ӨKeyboardNavigationItemDirective, KeyboardNavigationListDirective as ӨKeyboardNavigationListDirective, PaymentCreditorDetailsCardComponent as ӨPaymentCreditorDetailsCardComponent, PaymentDebitorDetailsCardComponent as ӨPaymentDebitorDetailsCardComponent, PaymentTemplateComponent as ӨPaymentTemplateComponent, PaymentTemplateSelectorComponent as ӨPaymentTemplateSelectorComponent, PaymentsControlsComponent as ӨPaymentsControlsComponent, PaymentsControlsCustomizableDirective as ӨPaymentsControlsCustomizableDirective, PaymentsControlsModule as ӨPaymentsControlsModule, PaymentsFilterComponent as ӨPaymentsFilterComponent, PaymentsFilterCustomizableDirective as ӨPaymentsFilterCustomizableDirective, PaymentsFilterModule as ӨPaymentsFilterModule, PaymentsListComponent as ӨPaymentsListComponent, PaymentsSearchComponent as ӨPaymentsSearchComponent, PaymentsSearchCustomizableDirective as ӨPaymentsSearchCustomizableDirective, PaymentsSearchModule as ӨPaymentsSearchModule, PaymentsTableComponent as ӨPaymentsTableComponent, PayordAmountDetailsComponent as ӨPayordAmountDetailsComponent, PayordCardMenuComponent as ӨPayordCardMenuComponent, PayordCounterpartyDetailsComponent as ӨPayordCounterpartyDetailsComponent, PayordDynamicLabelComponent as ӨPayordDynamicLabelComponent, PayordScheduleDetailsComponent as ӨPayordScheduleDetailsComponent, PayordStatusBadgeAbbreviationCustomizableDirective as ӨPayordStatusBadgeAbbreviationCustomizableDirective, PayordStatusBadgeCustomizableDirective as ӨPayordStatusBadgeCustomizableDirective, PayordStatusBadgeLabelCustomizableDirective as ӨPayordStatusBadgeLabelCustomizableDirective, PayordStatusComponent as ӨPayordStatusComponent, PurposeOfPaymentDetailComponent as ӨPurposeOfPaymentDetailComponent, RelativeDateModule as ӨRelativeDateModule, RoutableModalComponent as ӨRoutableModalComponent, ScheduleCustomizableDirective as ӨScheduleCustomizableDirective, ScheduleLabelComponent as ӨScheduleLabelComponent, ScheduleLabelModule as ӨScheduleLabelModule, ScheduleModule as ӨScheduleModule, SelectCountryDropdownComponent as ӨSelectCountryDropdownComponent, SelectPurposeDropdownComponent as ӨSelectPurposeDropdownComponent, SeparatorComponent as ӨSeparatorComponent, SeparatorModule as ӨSeparatorModule, TableCheckboxComponent as ӨTableCheckboxComponent, TableCheckboxModule as ӨTableCheckboxModule, TableHeaderCheckboxComponent as ӨTableHeaderCheckboxComponent, TableHeaderCheckboxModule as ӨTableHeaderCheckboxModule };
//# sourceMappingURL=backbase-payment-orders-ang.js.map
