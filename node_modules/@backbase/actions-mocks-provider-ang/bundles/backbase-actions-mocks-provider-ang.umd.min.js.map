{"version":3,"sources":["../../../../libs/actions-mocks-provider-ang/src/error-responses.ts","../../../../libs/actions-mocks-provider-ang/src/actions-interceptor.ts","../../../../libs/actions-mocks-provider-ang/src/helpers.ts"],"names":["unhandledError","HttpErrorResponse","status","statusText","ACCOUNT_IDS_ERRORS","1cdb2224-8926-4b4d-a99f-1c9dfbbb4692","ActionsInterceptor","this","actionsGetErrorCode","parseInt","localStorage","getItem","prototype","intercept","req","next","_this","handle","url","match","method","response_1","HttpResponse","of","pipe","delay","tap","console","log","map","event","items","body","actionRecipes","recipe","arrangementId","errorResponse","response","clone","id","Math","random","toString","slice","actions","type","enabled","findIndex","item","recurrence","daysOfWeek","_a","hoursOfDay","_c","_b","hour","Number","sort","a","b","Injectable","ActionsMocksProvider","provide","HTTP_INTERCEPTORS","useClass","multi"],"mappings":"8iBAEO,IAAMA,EAAiB,IAAIC,EAAAA,kBAAkB,CAClDC,OAAQ,IACRC,WAAY,wBCWDC,EAA2D,CAEtEC,uCAAwCL,gBAG1C,SAAAM,IAEmBC,KAAAC,oBAAsBC,SAASC,aAAaC,QAAQ,wBAA0B,GAAI,WAEnGL,EAAAM,UAAAC,UAAA,SAAUC,EAAuBC,GAAjC,IAAAC,EAAAT,KACE,GAA4C,SAAxCG,aAAaC,QAAQ,eACvB,OAAOI,EAAKE,OAAOH,GAKrB,GAAIA,EAAII,IAAIC,MAAM,mCAAoD,QAAfL,EAAIM,OAAkB,CAC3E,IAAMC,EAAW,IAAIC,EAAAA,aAAa,CAChCpB,OAAQ,MAGV,OAAOqB,EAAAA,GAAGF,GAAUG,KAClBC,EAAAA,MAAM,KACNC,EAAAA,KAAI,WAAM,OAAAC,QAAQC,IAAI,sBAAuBd,EAAKO,OAItD,OAAIP,EAAII,IAAIC,MAAM,6BAA8C,QAAfL,EAAIM,OAC5CL,EAAKE,OAAOH,GAAKU,KACtBK,EAAAA,KAAI,SAACC,aCxCyBC,EDyC5B,GAAID,aAAiBR,EAAAA,aAAc,CACjC,IAAKR,EAAIkB,OAASlB,EAAIkB,KAAKC,cAAe,OAAOH,EAEjD,IAAMI,EAASpB,EAAIkB,KAAKC,cAAc,GAEtC,GAAI7B,EAAmB8B,EAAOC,eAAgB,CAC5C,IAAMC,EAAgBhC,EAAmB8B,EAAOC,eAGhD,MADAR,QAAQC,IAAI,wBAAyBd,EAAKsB,GACpCA,EAGR,IAAMC,EAAWP,EAAMQ,MAAM,CAC3BN,KAAM,CACJC,cAAe,8BAEXM,GC3DYC,KAAKC,SAASC,SAAS,IAAIC,MAAM,ID4D1CT,GAAM,CACTU,SC3DkBb,ED2DaG,EAAOU,QC1DxD,CAAC,eAAgB,QAAS,OAAOf,KAAI,SAAAgB,GAAQ,MAAA,CAC3CA,KAAIA,EACJC,SAA0D,IAAjDf,EAAMgB,WAAU,SAAAC,GAAQ,OAAAA,EAAKH,OAASA,UDyD/BI,WAAY,CACVC,WAA8B,QAApBC,EAAEjB,MAAAA,OAAM,EAANA,EAAQe,kBAAU,IAAAE,OAAA,EAAAA,EAAED,WAChCE,WAA0C,QAAhCC,EAAoB,QAApBC,EAAEpB,MAAAA,OAAM,EAANA,EAAQe,kBAAU,IAAAK,OAAA,EAAAA,EAAEF,kBAAU,IAAAC,OAAA,EAAAA,EACtCxB,KAAI,SAAC0B,GAAiB,OAAAC,OAAOD,MAC9BE,MAAK,SAACC,EAAWC,GAAc,OAAAD,EAAIC,YAShD,OAFAhC,QAAQC,IAAI,wBAAyBd,EAAKuB,GAEnCA,EAGT,OAAOP,MAKThB,EAAII,IAAIC,MAAM,sBAAuC,QAAfL,EAAIM,OACrCL,EAAKE,OAAOH,GAAKU,KACtBK,EAAAA,KAAI,SAACC,GACH,GAAId,EAAKR,oBAAqB,CAC5B,IAAM4B,EAAgB,IAAInC,EAAAA,kBAAkB,CAC1CC,OAAQc,EAAKR,sBAIf,MADAmB,QAAQC,IAAI,wBAAyBd,EAAKsB,GACpCA,EAGR,OAAON,MAKNf,EAAKE,OAAOH,6BAlFtB8C,EAAAA,iBAsFYC,EAAiC,CAC5CC,QAASC,EAAAA,kBACTC,SAAU1D,EACV2D,OAAO","sourcesContent":["import { HttpErrorResponse } from '@angular/common/http';\n\nexport const unhandledError = new HttpErrorResponse({\n  status: 500,\n  statusText: 'Unhandled Exception',\n});\n","import {\n  HTTP_INTERCEPTORS,\n  HttpErrorResponse,\n  HttpEvent,\n  HttpHandler,\n  HttpInterceptor,\n  HttpRequest,\n  HttpResponse,\n} from '@angular/common/http';\nimport { Injectable, Provider } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { delay, map, tap } from 'rxjs/operators';\nimport { unhandledError } from './error-responses';\nimport { actionItemsToResponse, generateId } from './helpers';\n\nexport const ACCOUNT_IDS_ERRORS: { [key: string]: HttpErrorResponse } = {\n  // 2nd account from top\n  '1cdb2224-8926-4b4d-a99f-1c9dfbbb4692': unhandledError,\n};\n\n@Injectable()\nexport class ActionsInterceptor implements HttpInterceptor {\n  private readonly actionsGetErrorCode = parseInt(localStorage.getItem('actionsGetErrorCode') || '', 10);\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    if (localStorage.getItem('enableMocks') !== 'true') {\n      return next.handle(req);\n    }\n\n    // empty response in mocks data module causes error\n    // PUT for /action-recipes, excluding /action-recipes/batch\n    if (req.url.match(/\\/action-recipes\\/(?!batch).*$/) && req.method === 'PUT') {\n      const response = new HttpResponse({\n        status: 202,\n      });\n\n      return of(response).pipe(\n        delay(500),\n        tap(() => console.log('CUSTOM INTERCEPTOR:', req, response)),\n      );\n    }\n\n    if (req.url.match(/\\/action-recipes\\/batch$/) && req.method === 'PUT') {\n      return next.handle(req).pipe(\n        map((event: HttpEvent<any>) => {\n          if (event instanceof HttpResponse) {\n            if (!req.body || !req.body.actionRecipes) return event;\n\n            const recipe = req.body.actionRecipes[0];\n\n            if (ACCOUNT_IDS_ERRORS[recipe.arrangementId]) {\n              const errorResponse = ACCOUNT_IDS_ERRORS[recipe.arrangementId];\n\n              console.log('[ACTIONS INTERCEPTOR]', req, errorResponse);\n              throw errorResponse;\n            }\n\n            const response = event.clone({\n              body: {\n                actionRecipes: [\n                  {\n                    id: generateId(),\n                    ...recipe,\n                    actions: actionItemsToResponse(recipe.actions),\n                    recurrence: {\n                      daysOfWeek: recipe?.recurrence?.daysOfWeek,\n                      hoursOfDay: recipe?.recurrence?.hoursOfDay\n                        ?.map((hour: string) => Number(hour))\n                        .sort((a: number, b: number) => a - b),\n                    },\n                  },\n                ],\n              },\n            });\n\n            console.log('[ACTIONS INTERCEPTOR]', req, response);\n\n            return response;\n          }\n\n          return event;\n        }),\n      );\n    }\n\n    if (req.url.match(/\\/action-recipes$/) && req.method === 'GET') {\n      return next.handle(req).pipe(\n        map((event: HttpEvent<any>) => {\n          if (this.actionsGetErrorCode) {\n            const errorResponse = new HttpErrorResponse({\n              status: this.actionsGetErrorCode,\n            });\n\n            console.log('[ACTIONS INTERCEPTOR]', req, errorResponse);\n            throw errorResponse;\n          }\n\n          return event;\n        }),\n      );\n    }\n\n    return next.handle(req);\n  }\n}\n\nexport const ActionsMocksProvider: Provider = {\n  provide: HTTP_INTERCEPTORS,\n  useClass: ActionsInterceptor,\n  multi: true,\n};\n","import { ActionParent, Action } from '@backbase/data-ang/actions';\n\nexport const generateId = () => Math.random().toString(16).slice(2);\n\nexport const actionItemsToResponse = (items: ActionParent[]): Action[] =>\n  ['notification', 'email', 'sms'].map(type => ({\n    type,\n    enabled: items.findIndex(item => item.type === type) !== -1,\n  }));\n"]}