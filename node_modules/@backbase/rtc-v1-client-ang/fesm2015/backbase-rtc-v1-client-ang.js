import * as i0 from '@angular/core';
import { InjectionToken, NgModule, Optional, SkipSelf, Injectable, Inject } from '@angular/core';
import * as i1 from '@angular/common/http';
import { HttpHeaders, HttpParams } from '@angular/common/http';
import * as i2 from '@backbase/foundation-ang/data-http';
import { createMocks } from '@backbase/foundation-ang/data-http';

var CallRequest;
(function (CallRequest) {
    CallRequest.TypeEnum = {
        Voice: 'voice',
        Video: 'video'
    };
})(CallRequest || (CallRequest = {}));

var ConversationStatus;
(function (ConversationStatus) {
    ConversationStatus.StatusEnum = {
        Assigned: 'assigned',
        Ended: 'ended',
        Resolved: 'resolved'
    };
})(ConversationStatus || (ConversationStatus = {}));

var ConversationStatusUpdate;
(function (ConversationStatusUpdate) {
    ConversationStatusUpdate.StatusEnum = {
        Assigned: 'assigned',
        Resolved: 'resolved',
        Ended: 'ended'
    };
})(ConversationStatusUpdate || (ConversationStatusUpdate = {}));

var MessageItem;
(function (MessageItem) {
    MessageItem.TypeEnum = {
        CONVERSATIONACCEPTED: 'CONVERSATION_ACCEPTED',
        CONVERSATIONENDED: 'CONVERSATION_ENDED',
        MESSAGE: 'MESSAGE',
        VOICECALLINITIATED: 'VOICE_CALL_INITIATED',
        VOICECALLACCEPTED: 'VOICE_CALL_ACCEPTED',
        VOICECALLENDED: 'VOICE_CALL_ENDED',
        VIDEOCALLINITIATED: 'VIDEO_CALL_INITIATED',
        VIDEOCALLACCEPTED: 'VIDEO_CALL_ACCEPTED',
        VIDEOCALLENDED: 'VIDEO_CALL_ENDED',
        VOICECALLREJECTED: 'VOICE_CALL_REJECTED',
        VOICECALLTIMEOUT: 'VOICE_CALL_TIMEOUT',
        VIDEOCALLREJECTED: 'VIDEO_CALL_REJECTED',
        VIDEOCALLTIMEOUT: 'VIDEO_CALL_TIMEOUT'
    };
})(MessageItem || (MessageItem = {}));

const RTC_V1_BASE_PATH = new InjectionToken('RTC_V1_BASE_PATH');
const COLLECTION_FORMATS = {
    'csv': ',',
    'tsv': '   ',
    'ssv': ' ',
    'pipes': '|'
};

class RtcV1Configuration {
    constructor(configurationParameters = {}) {
        this.apiKeys = configurationParameters.apiKeys;
        this.username = configurationParameters.username;
        this.password = configurationParameters.password;
        this.accessToken = configurationParameters.accessToken;
        this.basePath = configurationParameters.basePath;
        this.withCredentials = configurationParameters.withCredentials;
        this.encoder = configurationParameters.encoder;
        if (configurationParameters.credentials) {
            this.credentials = configurationParameters.credentials;
        }
        else {
            this.credentials = {};
        }
    }
    selectHeaderContentType(contentTypes) {
        if (contentTypes.length === 0) {
            return undefined;
        }
        const type = contentTypes.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return contentTypes[0];
        }
        return type;
    }
    selectHeaderAccept(accepts) {
        if (accepts.length === 0) {
            return undefined;
        }
        const type = accepts.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return accepts[0];
        }
        return type;
    }
    isJsonMime(mime) {
        const jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
    lookupCredential(key) {
        const value = this.credentials[key];
        return typeof value === 'function'
            ? value()
            : value;
    }
}
const CONFIG_TOKEN = new InjectionToken('api-data-module RtcV1Configuration');

class RtcV1ApiModule {
    constructor(parentModule, http, dataModulesManager, config) {
        if (parentModule) {
            throw new Error('RtcV1ApiModule is already loaded. Import in your base AppModule only.');
        }
        if (!http) {
            throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                'See also https://github.com/angular/angular/issues/20575');
        }
        if (dataModulesManager) {
            dataModulesManager.setModuleConfig(CONFIG_TOKEN, {
                apiRoot: '',
                servicePath: config.basePath || '',
                headers: {},
            });
        }
    }
    static forRoot(configurationFactory) {
        return {
            ngModule: RtcV1ApiModule,
            providers: [{ provide: RtcV1Configuration, useFactory: configurationFactory }]
        };
    }
}
RtcV1ApiModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: RtcV1ApiModule, deps: [{ token: RtcV1ApiModule, optional: true, skipSelf: true }, { token: i1.HttpClient, optional: true }, { token: i2.DataModulesManager, optional: true }, { token: RtcV1Configuration }], target: i0.ɵɵFactoryTarget.NgModule });
RtcV1ApiModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: RtcV1ApiModule });
RtcV1ApiModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: RtcV1ApiModule, providers: [], imports: [[]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: RtcV1ApiModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [],
                    declarations: [],
                    exports: [],
                    providers: []
                }]
        }], ctorParameters: function () { return [{ type: RtcV1ApiModule, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: i1.HttpClient, decorators: [{
                    type: Optional
                }] }, { type: i2.DataModulesManager, decorators: [{
                    type: Optional
                }] }, { type: RtcV1Configuration }]; } });

class CustomHttpParameterCodec {
    encodeKey(k) {
        return encodeURIComponent(k);
    }
    encodeValue(v) {
        return encodeURIComponent(v);
    }
    decodeKey(k) {
        return decodeURIComponent(k);
    }
    decodeValue(v) {
        return decodeURIComponent(v);
    }
}

class AccessService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new RtcV1Configuration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    generateCustomerAccessToken(requestParameters, observe = 'body', reportProgress = false, options) {
        const _conversationId = requestParameters["conversationId"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_conversationId !== undefined && _conversationId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _conversationId, 'conversationId');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/rtc/access/customer`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    generateCustomerAccessTokenUrl(requestParameters) {
        const _conversationId = requestParameters["conversationId"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_conversationId !== undefined && _conversationId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _conversationId, 'conversationId');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v1/rtc/access/customer${queryString ? `?${queryString}` : ''}`;
    }
    generateEmployeeAccessTokens(observe = 'body', reportProgress = false, options) {
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/rtc/access/employee`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    generateEmployeeAccessTokensUrl() {
        return `${this.configuration.basePath}/client-api/v1/rtc/access/employee`;
    }
}
AccessService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccessService, deps: [{ token: i1.HttpClient }, { token: RTC_V1_BASE_PATH, optional: true }, { token: RtcV1Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
AccessService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccessService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccessService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [RTC_V1_BASE_PATH]
                }] }, { type: RtcV1Configuration, decorators: [{
                    type: Optional
                }] }]; } });

const AccessServiceGenerateCustomerAccessTokenMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/rtc/access/customer",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "conversationToken": "eyJjdHkiOiJ0d2lsaW8tZnBhO3Y9MSIsInR5cCI6IkpXVCIsImFsZyI6IkhTMjU2In0.eyJpc3MiOiJTSzRmNjhlMDg2ZjY1NzVlYTY1NTAyM2E0MDBkNDNmNzNhIiwiZXhwIjoxNjI2MzcxMTE4LCJncmFudHMiOnsiaWRlbnRpdHkiOiJBTk9OWU1PVVMiLCJjaGF0Ijp7InNlcnZpY2Vfc2lkIjoiSVNhYjlkMzFkNzdmZTg0MjJmOWFlNTJiNGM2NTVjMTNhNyJ9fSwianRpIjoiU0s0ZjY4ZTA4NmY2NTc1ZWE2NTUwMjNhNDAwZDQzZjczYS0xNjI2MzQyMjcyIiwic3ViIjoiQUM0YmM1N2RjYTZmOWY3MTdlNDdkOWRlYzc4NGRjOTJhMCJ9.MFtIBvMfl3oYHOILsPMYklhdUuhsdwviTV_Pxdxi_6g"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const AccessServiceGenerateEmployeeAccessTokensMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/rtc/access/employee",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "taskToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJBQzFjOGFiYjViMzZjMGYxOGEyY2ZlOWQ0ZmQ1MDA3YmEyIiwiZXhwIjoxNjI4MTkwNDAwLCJ3b3JrZXJfc2lkIjoiV0s2NDk5MTY5ZDNjNDEzYzI4ZmZmZjQxODJhZGJiMDM5MCIsIndvcmtzcGFjZV9zaWQiOiJXUzExM2UwNjQxYTZmZGExMWRlM2MxYjc4ZjA0ZmU5ZWE5IiwiY2hhbm5lbCI6IldLNjQ5OTE2OWQzYzQxM2MyOGZmZmY0MTgyYWRiYjAzOTAiLCJwb2xpY2llcyI6W3sidXJsIjoiaHR0cHM6Ly90YXNrcm91dGVyLnR3aWxpby5jb20vdjEvV29ya3NwYWNlcy9XUzExM2UwNjQxYTZmZGExMWRlM2MxYjc4ZjA0ZmU5ZWE5L0FjdGl2aXRpZXMiLCJtZXRob2QiOiJHRVQiLCJhbGxvdyI6dHJ1ZX0seyJ1cmwiOiJodHRwczovL3Rhc2tyb3V0ZXIudHdpbGlvLmNvbS92MS9Xb3Jrc3BhY2VzL1dTMTEzZTA2NDFhNmZkYTExZGUzYzFiNzhmMDRmZTllYTkvVGFza3MvKioiLCJtZXRob2QiOiJHRVQiLCJhbGxvdyI6dHJ1ZX0seyJ1cmwiOiJodHRwczovL3Rhc2tyb3V0ZXIudHdpbGlvLmNvbS92MS9Xb3Jrc3BhY2VzL1dTMTEzZTA2NDFhNmZkYTExZGUzYzFiNzhmMDRmZTllYTkvV29ya2Vycy9XSzY0OTkxNjlkM2M0MTNjMjhmZmZmNDE4MmFkYmIwMzkwL1Jlc2VydmF0aW9ucy8qKiIsIm1ldGhvZCI6IkdFVCIsImFsbG93Ijp0cnVlfSx7InVybCI6Imh0dHBzOi8vdGFza3JvdXRlci50d2lsaW8uY29tL3YxL1dvcmtzcGFjZXMvV1MxMTNlMDY0MWE2ZmRhMTFkZTNjMWI3OGYwNGZlOWVhOS9Xb3JrZXJzL1dLNjQ5OTE2OWQzYzQxM2MyOGZmZmY0MTgyYWRiYjAzOTAiLCJtZXRob2QiOiJHRVQiLCJhbGxvdyI6dHJ1ZX0seyJ1cmwiOiJodHRwczovL2V2ZW50LWJyaWRnZS50d2lsaW8uY29tL3YxL3dzY2hhbm5lbHMvQWNjb3VudFNpZC9DaGFubmVsIiwibWV0aG9kIjoiR0VUIiwiYWxsb3ciOnRydWV9LHsidXJsIjoiaHR0cHM6Ly9ldmVudC1icmlkZ2UudHdpbGlvLmNvbS92MS93c2NoYW5uZWxzL0FjY291bnRTaWQvQ2hhbm5lbCIsIm1ldGhvZCI6IlBPU1QiLCJhbGxvdyI6dHJ1ZX0seyJ1cmwiOiJodHRwczovL3Rhc2tyb3V0ZXIudHdpbGlvLmNvbS92MS9Xb3Jrc3BhY2VzL1dTMTEzZTA2NDFhNmZkYTExZGUzYzFiNzhmMDRmZTllYTkvV29ya2Vycy9XSzY0OTkxNjlkM2M0MTNjMjhmZmZmNDE4MmFkYmIwMzkwIiwibWV0aG9kIjoiUE9TVCIsInBvc3RfZmlsdGVyIjp7IkFjdGl2aXR5U2lkIjp7InJlcXVpcmVkIjp0cnVlfX0sImFsbG93Ijp0cnVlfSx7InVybCI6Imh0dHBzOi8vdGFza3JvdXRlci50d2lsaW8uY29tL3YxL1dvcmtzcGFjZXMvV1MxMTNlMDY0MWE2ZmRhMTFkZTNjMWI3OGYwNGZlOWVhOS9UYXNrcy8qKiIsIm1ldGhvZCI6IlBPU1QiLCJhbGxvdyI6dHJ1ZX0seyJ1cmwiOiJodHRwczovL2V2ZW50LWJyaWRnZS50d2lsaW8uY29tL3YxL3dzY2hhbm5lbHMvQUMxYzhhYmI1YjM2YzBmMThhMmNmZTlkNGZkNTAwN2JhMi9XSzY0OTkxNjlkM2M0MTNjMjhmZmZmNDE4MmFkYmIwMzkwIiwibWV0aG9kIjoiR0VUIiwiYWxsb3ciOnRydWV9LHsidXJsIjoiaHR0cHM6Ly9ldmVudC1icmlkZ2UudHdpbGlvLmNvbS92MS93c2NoYW5uZWxzL0FDMWM4YWJiNWIzNmMwZjE4YTJjZmU5ZDRmZDUwMDdiYTIvV0s2NDk5MTY5ZDNjNDEzYzI4ZmZmZjQxODJhZGJiMDM5MCIsIm1ldGhvZCI6IlBPU1QiLCJhbGxvdyI6dHJ1ZX1dLCJhY2NvdW50X3NpZCI6IkFDMWM4YWJiNWIzNmMwZjE4YTJjZmU5ZDRmZDUwMDdiYTIiLCJ2ZXJzaW9uIjoidjEifQ.3qR5XvqS3saAsnpc6XzKc2O4bPr3MCvlf2nZwmCOOs0",
                    "conversationToken": "eyJjdHkiOiJ0d2lsaW8tZnBhO3Y9MSIsInR5cCI6IkpXVCIsImFsZyI6IkhTMjU2In0.eyJpc3MiOiJTSzRmNjhlMDg2ZjY1NzVlYTY1NTAyM2E0MDBkNDNmNzNhIiwiZXhwIjoxNjI2MzcxMTE4LCJncmFudHMiOnsiaWRlbnRpdHkiOiJBTk9OWU1PVVMiLCJjaGF0Ijp7InNlcnZpY2Vfc2lkIjoiSVNhYjlkMzFkNzdmZTg0MjJmOWFlNTJiNGM2NTVjMTNhNyJ9fSwianRpIjoiU0s0ZjY4ZTA4NmY2NTc1ZWE2NTUwMjNhNDAwZDQzZjczYS0xNjI2MzQyMjcyIiwic3ViIjoiQUM0YmM1N2RjYTZmOWY3MTdlNDdkOWRlYzc4NGRjOTJhMCJ9.MFtIBvMfl3oYHOILsPMYklhdUuhsdwviTV_Pxdxi_6g"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const AccessServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v1/rtc/access/customer",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "conversationToken": "eyJjdHkiOiJ0d2lsaW8tZnBhO3Y9MSIsInR5cCI6IkpXVCIsImFsZyI6IkhTMjU2In0.eyJpc3MiOiJTSzRmNjhlMDg2ZjY1NzVlYTY1NTAyM2E0MDBkNDNmNzNhIiwiZXhwIjoxNjI2MzcxMTE4LCJncmFudHMiOnsiaWRlbnRpdHkiOiJBTk9OWU1PVVMiLCJjaGF0Ijp7InNlcnZpY2Vfc2lkIjoiSVNhYjlkMzFkNzdmZTg0MjJmOWFlNTJiNGM2NTVjMTNhNyJ9fSwianRpIjoiU0s0ZjY4ZTA4NmY2NTc1ZWE2NTUwMjNhNDAwZDQzZjczYS0xNjI2MzQyMjcyIiwic3ViIjoiQUM0YmM1N2RjYTZmOWY3MTdlNDdkOWRlYzc4NGRjOTJhMCJ9.MFtIBvMfl3oYHOILsPMYklhdUuhsdwviTV_Pxdxi_6g"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/rtc/access/employee",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "taskToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJBQzFjOGFiYjViMzZjMGYxOGEyY2ZlOWQ0ZmQ1MDA3YmEyIiwiZXhwIjoxNjI4MTkwNDAwLCJ3b3JrZXJfc2lkIjoiV0s2NDk5MTY5ZDNjNDEzYzI4ZmZmZjQxODJhZGJiMDM5MCIsIndvcmtzcGFjZV9zaWQiOiJXUzExM2UwNjQxYTZmZGExMWRlM2MxYjc4ZjA0ZmU5ZWE5IiwiY2hhbm5lbCI6IldLNjQ5OTE2OWQzYzQxM2MyOGZmZmY0MTgyYWRiYjAzOTAiLCJwb2xpY2llcyI6W3sidXJsIjoiaHR0cHM6Ly90YXNrcm91dGVyLnR3aWxpby5jb20vdjEvV29ya3NwYWNlcy9XUzExM2UwNjQxYTZmZGExMWRlM2MxYjc4ZjA0ZmU5ZWE5L0FjdGl2aXRpZXMiLCJtZXRob2QiOiJHRVQiLCJhbGxvdyI6dHJ1ZX0seyJ1cmwiOiJodHRwczovL3Rhc2tyb3V0ZXIudHdpbGlvLmNvbS92MS9Xb3Jrc3BhY2VzL1dTMTEzZTA2NDFhNmZkYTExZGUzYzFiNzhmMDRmZTllYTkvVGFza3MvKioiLCJtZXRob2QiOiJHRVQiLCJhbGxvdyI6dHJ1ZX0seyJ1cmwiOiJodHRwczovL3Rhc2tyb3V0ZXIudHdpbGlvLmNvbS92MS9Xb3Jrc3BhY2VzL1dTMTEzZTA2NDFhNmZkYTExZGUzYzFiNzhmMDRmZTllYTkvV29ya2Vycy9XSzY0OTkxNjlkM2M0MTNjMjhmZmZmNDE4MmFkYmIwMzkwL1Jlc2VydmF0aW9ucy8qKiIsIm1ldGhvZCI6IkdFVCIsImFsbG93Ijp0cnVlfSx7InVybCI6Imh0dHBzOi8vdGFza3JvdXRlci50d2lsaW8uY29tL3YxL1dvcmtzcGFjZXMvV1MxMTNlMDY0MWE2ZmRhMTFkZTNjMWI3OGYwNGZlOWVhOS9Xb3JrZXJzL1dLNjQ5OTE2OWQzYzQxM2MyOGZmZmY0MTgyYWRiYjAzOTAiLCJtZXRob2QiOiJHRVQiLCJhbGxvdyI6dHJ1ZX0seyJ1cmwiOiJodHRwczovL2V2ZW50LWJyaWRnZS50d2lsaW8uY29tL3YxL3dzY2hhbm5lbHMvQWNjb3VudFNpZC9DaGFubmVsIiwibWV0aG9kIjoiR0VUIiwiYWxsb3ciOnRydWV9LHsidXJsIjoiaHR0cHM6Ly9ldmVudC1icmlkZ2UudHdpbGlvLmNvbS92MS93c2NoYW5uZWxzL0FjY291bnRTaWQvQ2hhbm5lbCIsIm1ldGhvZCI6IlBPU1QiLCJhbGxvdyI6dHJ1ZX0seyJ1cmwiOiJodHRwczovL3Rhc2tyb3V0ZXIudHdpbGlvLmNvbS92MS9Xb3Jrc3BhY2VzL1dTMTEzZTA2NDFhNmZkYTExZGUzYzFiNzhmMDRmZTllYTkvV29ya2Vycy9XSzY0OTkxNjlkM2M0MTNjMjhmZmZmNDE4MmFkYmIwMzkwIiwibWV0aG9kIjoiUE9TVCIsInBvc3RfZmlsdGVyIjp7IkFjdGl2aXR5U2lkIjp7InJlcXVpcmVkIjp0cnVlfX0sImFsbG93Ijp0cnVlfSx7InVybCI6Imh0dHBzOi8vdGFza3JvdXRlci50d2lsaW8uY29tL3YxL1dvcmtzcGFjZXMvV1MxMTNlMDY0MWE2ZmRhMTFkZTNjMWI3OGYwNGZlOWVhOS9UYXNrcy8qKiIsIm1ldGhvZCI6IlBPU1QiLCJhbGxvdyI6dHJ1ZX0seyJ1cmwiOiJodHRwczovL2V2ZW50LWJyaWRnZS50d2lsaW8uY29tL3YxL3dzY2hhbm5lbHMvQUMxYzhhYmI1YjM2YzBmMThhMmNmZTlkNGZkNTAwN2JhMi9XSzY0OTkxNjlkM2M0MTNjMjhmZmZmNDE4MmFkYmIwMzkwIiwibWV0aG9kIjoiR0VUIiwiYWxsb3ciOnRydWV9LHsidXJsIjoiaHR0cHM6Ly9ldmVudC1icmlkZ2UudHdpbGlvLmNvbS92MS93c2NoYW5uZWxzL0FDMWM4YWJiNWIzNmMwZjE4YTJjZmU5ZDRmZDUwMDdiYTIvV0s2NDk5MTY5ZDNjNDEzYzI4ZmZmZjQxODJhZGJiMDM5MCIsIm1ldGhvZCI6IlBPU1QiLCJhbGxvdyI6dHJ1ZX1dLCJhY2NvdW50X3NpZCI6IkFDMWM4YWJiNWIzNmMwZjE4YTJjZmU5ZDRmZDUwMDdiYTIiLCJ2ZXJzaW9uIjoidjEifQ.3qR5XvqS3saAsnpc6XzKc2O4bPr3MCvlf2nZwmCOOs0",
                    "conversationToken": "eyJjdHkiOiJ0d2lsaW8tZnBhO3Y9MSIsInR5cCI6IkpXVCIsImFsZyI6IkhTMjU2In0.eyJpc3MiOiJTSzRmNjhlMDg2ZjY1NzVlYTY1NTAyM2E0MDBkNDNmNzNhIiwiZXhwIjoxNjI2MzcxMTE4LCJncmFudHMiOnsiaWRlbnRpdHkiOiJBTk9OWU1PVVMiLCJjaGF0Ijp7InNlcnZpY2Vfc2lkIjoiSVNhYjlkMzFkNzdmZTg0MjJmOWFlNTJiNGM2NTVjMTNhNyJ9fSwianRpIjoiU0s0ZjY4ZTA4NmY2NTc1ZWE2NTUwMjNhNDAwZDQzZjczYS0xNjI2MzQyMjcyIiwic3ViIjoiQUM0YmM1N2RjYTZmOWY3MTdlNDdkOWRlYzc4NGRjOTJhMCJ9.MFtIBvMfl3oYHOILsPMYklhdUuhsdwviTV_Pxdxi_6g"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
]);

class ConversationsService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new RtcV1Configuration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    createConversation(observe = 'body', reportProgress = false, options) {
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v1/rtc/conversations`, null, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    createConversationUrl() {
        return `${this.configuration.basePath}/client-api/v1/rtc/conversations`;
    }
    endCall(requestParameters, observe = 'body', reportProgress = false, options) {
        const _conversationId = requestParameters["conversationId"];
        if (_conversationId === null || _conversationId === undefined) {
            throw new Error('Required parameter conversationId was null or undefined when calling endCall.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v1/rtc/conversations/${encodeURIComponent(String(_conversationId))}/call`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    endCallUrl(requestParameters) {
        const _conversationId = requestParameters["conversationId"];
        if (_conversationId === null || _conversationId === undefined) {
            throw new Error('Required parameter conversationId was null or undefined when calling endCall.');
        }
        return `${this.configuration.basePath}/client-api/v1/rtc/conversations/${encodeURIComponent(String(_conversationId))}/call`;
    }
    getConversations(requestParameters, observe = 'body', reportProgress = false, options) {
        const _userId = requestParameters["userId"];
        if (_userId === null || _userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getConversations.');
        }
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        const _conversationIds = requestParameters["conversationIds"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_conversationIds) {
            _conversationIds.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'conversationIds');
            });
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/rtc/users/${encodeURIComponent(String(_userId))}/conversations`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getConversationsUrl(requestParameters) {
        const _userId = requestParameters["userId"];
        if (_userId === null || _userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getConversations.');
        }
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        const _conversationIds = requestParameters["conversationIds"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_conversationIds) {
            _conversationIds.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'conversationIds');
            });
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v1/rtc/users/${encodeURIComponent(String(_userId))}/conversations${queryString ? `?${queryString}` : ''}`;
    }
    getMessages(requestParameters, observe = 'body', reportProgress = false, options) {
        const _userId = requestParameters["userId"];
        if (_userId === null || _userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getMessages.');
        }
        const _conversationId = requestParameters["conversationId"];
        if (_conversationId === null || _conversationId === undefined) {
            throw new Error('Required parameter conversationId was null or undefined when calling getMessages.');
        }
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/rtc/users/${encodeURIComponent(String(_userId))}/conversations/${encodeURIComponent(String(_conversationId))}/messages`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getMessagesUrl(requestParameters) {
        const _userId = requestParameters["userId"];
        if (_userId === null || _userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getMessages.');
        }
        const _conversationId = requestParameters["conversationId"];
        if (_conversationId === null || _conversationId === undefined) {
            throw new Error('Required parameter conversationId was null or undefined when calling getMessages.');
        }
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v1/rtc/users/${encodeURIComponent(String(_userId))}/conversations/${encodeURIComponent(String(_conversationId))}/messages${queryString ? `?${queryString}` : ''}`;
    }
    initiateCall(requestParameters, observe = 'body', reportProgress = false, options) {
        const _conversationId = requestParameters["conversationId"];
        if (_conversationId === null || _conversationId === undefined) {
            throw new Error('Required parameter conversationId was null or undefined when calling initiateCall.');
        }
        const _callRequest = requestParameters["callRequest"];
        if (_callRequest === null || _callRequest === undefined) {
            throw new Error('Required parameter callRequest was null or undefined when calling initiateCall.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v1/rtc/conversations/${encodeURIComponent(String(_conversationId))}/call`, _callRequest, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    initiateCallUrl(requestParameters) {
        const _conversationId = requestParameters["conversationId"];
        if (_conversationId === null || _conversationId === undefined) {
            throw new Error('Required parameter conversationId was null or undefined when calling initiateCall.');
        }
        const _callRequest = requestParameters["callRequest"];
        if (_callRequest === null || _callRequest === undefined) {
            throw new Error('Required parameter callRequest was null or undefined when calling initiateCall.');
        }
        return `${this.configuration.basePath}/client-api/v1/rtc/conversations/${encodeURIComponent(String(_conversationId))}/call`;
    }
    updateConversationStatus(requestParameters, observe = 'body', reportProgress = false, options) {
        const _conversationId = requestParameters["conversationId"];
        if (_conversationId === null || _conversationId === undefined) {
            throw new Error('Required parameter conversationId was null or undefined when calling updateConversationStatus.');
        }
        const _conversationStatusUpdate = requestParameters["conversationStatusUpdate"];
        if (_conversationStatusUpdate === null || _conversationStatusUpdate === undefined) {
            throw new Error('Required parameter conversationStatusUpdate was null or undefined when calling updateConversationStatus.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v1/rtc/conversations/${encodeURIComponent(String(_conversationId))}/status`, _conversationStatusUpdate, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    updateConversationStatusUrl(requestParameters) {
        const _conversationId = requestParameters["conversationId"];
        if (_conversationId === null || _conversationId === undefined) {
            throw new Error('Required parameter conversationId was null or undefined when calling updateConversationStatus.');
        }
        const _conversationStatusUpdate = requestParameters["conversationStatusUpdate"];
        if (_conversationStatusUpdate === null || _conversationStatusUpdate === undefined) {
            throw new Error('Required parameter conversationStatusUpdate was null or undefined when calling updateConversationStatus.');
        }
        return `${this.configuration.basePath}/client-api/v1/rtc/conversations/${encodeURIComponent(String(_conversationId))}/status`;
    }
}
ConversationsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConversationsService, deps: [{ token: i1.HttpClient }, { token: RTC_V1_BASE_PATH, optional: true }, { token: RtcV1Configuration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
ConversationsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConversationsService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConversationsService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [RTC_V1_BASE_PATH]
                }] }, { type: RtcV1Configuration, decorators: [{
                    type: Optional
                }] }]; } });

const ConversationsServiceCreateConversationMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/rtc/conversations",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "id": "CH0c17647bed78463291d80a72acc7c58c"
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const ConversationsServiceEndCallMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/rtc/conversations/{conversationId}/call",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const ConversationsServiceGetConversationsMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/rtc/users/{userId}/conversations",
        method: "GET",
        responses: [
            {
                status: 200,
                body: []
            },
            {
                status: 200,
                body: [{
                        "id": "CH1",
                        "dateCreated": "2021-09-16T22:18:37Z",
                        "participants": [{
                                "id": "employee1",
                                "preferredName": "John Smith"
                            }, {
                                "id": "supervisor1",
                                "preferredName": "David Jones"
                            }]
                    }, {
                        "id": "CH2",
                        "dateCreated": "2021-09-16T20:18:37Z",
                        "participants": [{
                                "id": "employee1",
                                "preferredName": "John Smith"
                            }]
                    }, {
                        "id": "CH3",
                        "dateCreated": "2019-12-26T22:18:37Z",
                        "participants": []
                    }, {
                        "id": "CH4",
                        "dateCreated": "2019-12-25T22:18:37Z",
                        "participants": [{
                                "id": "employee2"
                            }]
                    }, {
                        "id": "CH524234",
                        "dateCreated": "2017-12-26T22:18:37Z",
                        "participants": [{
                                "id": "employee1",
                                "preferredName": "John Smith"
                            }, {
                                "id": "supervisor1",
                                "preferredName": "David Jones"
                            }]
                    }, {
                        "id": "CH6",
                        "dateCreated": "2016-12-26T22:18:37Z",
                        "participants": [{
                                "id": "employee1"
                            }]
                    }, {
                        "id": "CH7",
                        "dateCreated": "2015-12-26T22:18:37Z",
                        "participants": [{
                                "id": "employee1"
                            }]
                    }, {
                        "id": "CH8",
                        "dateCreated": "2014-12-26T22:18:37Z",
                        "participants": [{
                                "id": "employee8"
                            }]
                    }, {
                        "id": "CH9",
                        "dateCreated": "2014-10-26T22:18:37Z",
                        "participants": [{
                                "id": "employee9"
                            }]
                    }, {
                        "id": "CH10",
                        "dateCreated": "2014-09-26T22:18:37Z",
                        "participants": [{
                                "id": "employee10"
                            }]
                    }]
            },
            {
                status: 200,
                body: [{
                        "id": "CH1",
                        "dateCreated": "2020-12-16T22:18:37Z",
                        "participants": [{
                                "id": "employee1",
                                "preferredName": "John Smith"
                            }, {
                                "id": "supervisor1",
                                "preferredName": "David Jones"
                            }]
                    }, {
                        "id": "CH2",
                        "dateCreated": "2019-12-16T22:18:37Z",
                        "participants": [{
                                "id": "employee1",
                                "preferredName": "John Smith"
                            }]
                    }, {
                        "id": "CH3",
                        "dateCreated": "2019-11-26T22:18:37Z",
                        "participants": []
                    }]
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const ConversationsServiceGetMessagesMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/rtc/users/{userId}/conversations/{conversationId}/messages",
        method: "GET",
        responses: [
            {
                status: 200,
                body: []
            },
            {
                status: 200,
                body: [{
                        "id": "IM426d0acb198c43df8b42ee6e206fddb9",
                        "type": "CONVERSATION_ACCEPTED",
                        "body": null,
                        "media": [],
                        "authorId": "admin",
                        "authorPreferredName": "Kjiro",
                        "dateCreated": "2021-11-16T20:08:30Z",
                        "dateUpdated": "2021-11-16T20:08:30Z"
                    }, {
                        "id": "IMa7443cccfc9946a2810ab019396ce15c",
                        "type": "MESSAGE",
                        "body": "asdf",
                        "media": [],
                        "authorId": "admin",
                        "authorPreferredName": "Kjiro",
                        "dateCreated": "2021-11-16T20:08:32Z",
                        "dateUpdated": "2021-11-16T20:08:32Z"
                    }, {
                        "id": "IM81f239c9222b4f548c394489ace20ecc",
                        "type": "MESSAGE",
                        "body": "123123",
                        "media": [],
                        "authorId": "admin",
                        "authorPreferredName": "Kjiro",
                        "dateCreated": "2021-11-16T23:11:32Z",
                        "dateUpdated": "2021-11-16T23:11:32Z"
                    }, {
                        "id": "IM079552e6556c4ed6825b84597fa7c691",
                        "type": "MESSAGE",
                        "body": null,
                        "media": [{
                                "id": "MEd726969bac4ea9a8ea0ed1b4881d982f",
                                "contentType": "image/png",
                                "fileName": null,
                                "size": 226933
                            }],
                        "authorId": "customer",
                        "authorPreferredName": null,
                        "dateCreated": "2021-11-17T00:32:29Z",
                        "dateUpdated": "2021-11-17T00:32:29Z"
                    }, {
                        "id": "IM079552e6556c4ed6825b84597fa7c780",
                        "type": "CONVERSATION_ENDED",
                        "body": null,
                        "media": [],
                        "authorId": "admin",
                        "authorPreferredName": "Kjiro",
                        "dateCreated": "2021-11-17T00:52:29Z",
                        "dateUpdated": "2021-11-17T00:52:29Z"
                    }]
            },
            {
                status: 200,
                body: [{
                        "id": "IM426d0acb198c43df8b42ee6e206fddb9",
                        "type": "CONVERSATION_ACCEPTED",
                        "body": null,
                        "media": [],
                        "authorId": "admin",
                        "authorPreferredName": "Kjiro",
                        "dateCreated": "2021-11-16T20:08:30Z",
                        "dateUpdated": "2021-11-16T20:08:30Z"
                    }, {
                        "id": "IMa7443cccfc9946a2810ab019396ce15c",
                        "type": "MESSAGE",
                        "body": "asdf",
                        "media": [],
                        "authorId": "admin",
                        "authorPreferredName": "Kjiro",
                        "dateCreated": "2021-11-16T20:08:32Z",
                        "dateUpdated": "2021-11-16T20:08:32Z"
                    }, {
                        "id": "IM81f239c9222b4f548c394489ace20ecc",
                        "type": "MESSAGE",
                        "body": "123123",
                        "media": [],
                        "authorId": "admin",
                        "authorPreferredName": "Kjiro",
                        "dateCreated": "2021-11-16T23:11:32Z",
                        "dateUpdated": "2021-11-16T23:11:32Z"
                    }, {
                        "id": "IM079552e6556c4ed6825b84597fa7c691",
                        "type": "MESSAGE",
                        "body": null,
                        "media": [{
                                "id": "MEd726969bac4ea9a8ea0ed1b4881d982f",
                                "contentType": "image/png",
                                "fileName": null,
                                "size": 226933
                            }],
                        "authorId": "customer",
                        "authorPreferredName": null,
                        "dateCreated": "2021-11-17T00:32:29Z",
                        "dateUpdated": "2021-11-17T00:32:29Z"
                    }]
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const ConversationsServiceInitiateCallMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/rtc/conversations/{conversationId}/call",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "conversationToken": "eyJjdHkiOiJ0d2lsaW8tZnBhO3Y9MSIsInR5cCI6IkpXVCIsImFsZyI6IkhTMjU2In0.eyJpc3MiOiJTSzRmNjhlMDg2ZjY1NzVlYTY1NTAyM2E0MDBkNDNmNzNhIiwiZXhwIjoxNjI2MzcxMTE4LCJncmFudHMiOnsiaWRlbnRpdHkiOiJBTk9OWU1PVVMiLCJjaGF0Ijp7InNlcnZpY2Vfc2lkIjoiSVNhYjlkMzFkNzdmZTg0MjJmOWFlNTJiNGM2NTVjMTNhNyJ9fSwianRpIjoiU0s0ZjY4ZTA4NmY2NTc1ZWE2NTUwMjNhNDAwZDQzZjczYS0xNjI2MzQyMjcyIiwic3ViIjoiQUM0YmM1N2RjYTZmOWY3MTdlNDdkOWRlYzc4NGRjOTJhMCJ9.MFtIBvMfl3oYHOILsPMYklhdUuhsdwviTV_Pxdxi_6g",
                    "callTimeout": 120
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const ConversationsServiceUpdateConversationStatusMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/rtc/conversations/{conversationId}/status",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "conversationId": "CH0c17647bed78463291d80a72acc7c58c",
                    "status": "assigned"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const ConversationsServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v1/rtc/conversations",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "id": "CH0c17647bed78463291d80a72acc7c58c"
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/rtc/conversations/{conversationId}/call",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/rtc/users/{userId}/conversations",
        method: "GET",
        responses: [
            {
                status: 200,
                body: []
            },
            {
                status: 200,
                body: [{
                        "id": "CH1",
                        "dateCreated": "2021-09-16T22:18:37Z",
                        "participants": [{
                                "id": "employee1",
                                "preferredName": "John Smith"
                            }, {
                                "id": "supervisor1",
                                "preferredName": "David Jones"
                            }]
                    }, {
                        "id": "CH2",
                        "dateCreated": "2021-09-16T20:18:37Z",
                        "participants": [{
                                "id": "employee1",
                                "preferredName": "John Smith"
                            }]
                    }, {
                        "id": "CH3",
                        "dateCreated": "2019-12-26T22:18:37Z",
                        "participants": []
                    }, {
                        "id": "CH4",
                        "dateCreated": "2019-12-25T22:18:37Z",
                        "participants": [{
                                "id": "employee2"
                            }]
                    }, {
                        "id": "CH524234",
                        "dateCreated": "2017-12-26T22:18:37Z",
                        "participants": [{
                                "id": "employee1",
                                "preferredName": "John Smith"
                            }, {
                                "id": "supervisor1",
                                "preferredName": "David Jones"
                            }]
                    }, {
                        "id": "CH6",
                        "dateCreated": "2016-12-26T22:18:37Z",
                        "participants": [{
                                "id": "employee1"
                            }]
                    }, {
                        "id": "CH7",
                        "dateCreated": "2015-12-26T22:18:37Z",
                        "participants": [{
                                "id": "employee1"
                            }]
                    }, {
                        "id": "CH8",
                        "dateCreated": "2014-12-26T22:18:37Z",
                        "participants": [{
                                "id": "employee8"
                            }]
                    }, {
                        "id": "CH9",
                        "dateCreated": "2014-10-26T22:18:37Z",
                        "participants": [{
                                "id": "employee9"
                            }]
                    }, {
                        "id": "CH10",
                        "dateCreated": "2014-09-26T22:18:37Z",
                        "participants": [{
                                "id": "employee10"
                            }]
                    }]
            },
            {
                status: 200,
                body: [{
                        "id": "CH1",
                        "dateCreated": "2020-12-16T22:18:37Z",
                        "participants": [{
                                "id": "employee1",
                                "preferredName": "John Smith"
                            }, {
                                "id": "supervisor1",
                                "preferredName": "David Jones"
                            }]
                    }, {
                        "id": "CH2",
                        "dateCreated": "2019-12-16T22:18:37Z",
                        "participants": [{
                                "id": "employee1",
                                "preferredName": "John Smith"
                            }]
                    }, {
                        "id": "CH3",
                        "dateCreated": "2019-11-26T22:18:37Z",
                        "participants": []
                    }]
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/rtc/users/{userId}/conversations/{conversationId}/messages",
        method: "GET",
        responses: [
            {
                status: 200,
                body: []
            },
            {
                status: 200,
                body: [{
                        "id": "IM426d0acb198c43df8b42ee6e206fddb9",
                        "type": "CONVERSATION_ACCEPTED",
                        "body": null,
                        "media": [],
                        "authorId": "admin",
                        "authorPreferredName": "Kjiro",
                        "dateCreated": "2021-11-16T20:08:30Z",
                        "dateUpdated": "2021-11-16T20:08:30Z"
                    }, {
                        "id": "IMa7443cccfc9946a2810ab019396ce15c",
                        "type": "MESSAGE",
                        "body": "asdf",
                        "media": [],
                        "authorId": "admin",
                        "authorPreferredName": "Kjiro",
                        "dateCreated": "2021-11-16T20:08:32Z",
                        "dateUpdated": "2021-11-16T20:08:32Z"
                    }, {
                        "id": "IM81f239c9222b4f548c394489ace20ecc",
                        "type": "MESSAGE",
                        "body": "123123",
                        "media": [],
                        "authorId": "admin",
                        "authorPreferredName": "Kjiro",
                        "dateCreated": "2021-11-16T23:11:32Z",
                        "dateUpdated": "2021-11-16T23:11:32Z"
                    }, {
                        "id": "IM079552e6556c4ed6825b84597fa7c691",
                        "type": "MESSAGE",
                        "body": null,
                        "media": [{
                                "id": "MEd726969bac4ea9a8ea0ed1b4881d982f",
                                "contentType": "image/png",
                                "fileName": null,
                                "size": 226933
                            }],
                        "authorId": "customer",
                        "authorPreferredName": null,
                        "dateCreated": "2021-11-17T00:32:29Z",
                        "dateUpdated": "2021-11-17T00:32:29Z"
                    }, {
                        "id": "IM079552e6556c4ed6825b84597fa7c780",
                        "type": "CONVERSATION_ENDED",
                        "body": null,
                        "media": [],
                        "authorId": "admin",
                        "authorPreferredName": "Kjiro",
                        "dateCreated": "2021-11-17T00:52:29Z",
                        "dateUpdated": "2021-11-17T00:52:29Z"
                    }]
            },
            {
                status: 200,
                body: [{
                        "id": "IM426d0acb198c43df8b42ee6e206fddb9",
                        "type": "CONVERSATION_ACCEPTED",
                        "body": null,
                        "media": [],
                        "authorId": "admin",
                        "authorPreferredName": "Kjiro",
                        "dateCreated": "2021-11-16T20:08:30Z",
                        "dateUpdated": "2021-11-16T20:08:30Z"
                    }, {
                        "id": "IMa7443cccfc9946a2810ab019396ce15c",
                        "type": "MESSAGE",
                        "body": "asdf",
                        "media": [],
                        "authorId": "admin",
                        "authorPreferredName": "Kjiro",
                        "dateCreated": "2021-11-16T20:08:32Z",
                        "dateUpdated": "2021-11-16T20:08:32Z"
                    }, {
                        "id": "IM81f239c9222b4f548c394489ace20ecc",
                        "type": "MESSAGE",
                        "body": "123123",
                        "media": [],
                        "authorId": "admin",
                        "authorPreferredName": "Kjiro",
                        "dateCreated": "2021-11-16T23:11:32Z",
                        "dateUpdated": "2021-11-16T23:11:32Z"
                    }, {
                        "id": "IM079552e6556c4ed6825b84597fa7c691",
                        "type": "MESSAGE",
                        "body": null,
                        "media": [{
                                "id": "MEd726969bac4ea9a8ea0ed1b4881d982f",
                                "contentType": "image/png",
                                "fileName": null,
                                "size": 226933
                            }],
                        "authorId": "customer",
                        "authorPreferredName": null,
                        "dateCreated": "2021-11-17T00:32:29Z",
                        "dateUpdated": "2021-11-17T00:32:29Z"
                    }]
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/rtc/conversations/{conversationId}/call",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "conversationToken": "eyJjdHkiOiJ0d2lsaW8tZnBhO3Y9MSIsInR5cCI6IkpXVCIsImFsZyI6IkhTMjU2In0.eyJpc3MiOiJTSzRmNjhlMDg2ZjY1NzVlYTY1NTAyM2E0MDBkNDNmNzNhIiwiZXhwIjoxNjI2MzcxMTE4LCJncmFudHMiOnsiaWRlbnRpdHkiOiJBTk9OWU1PVVMiLCJjaGF0Ijp7InNlcnZpY2Vfc2lkIjoiSVNhYjlkMzFkNzdmZTg0MjJmOWFlNTJiNGM2NTVjMTNhNyJ9fSwianRpIjoiU0s0ZjY4ZTA4NmY2NTc1ZWE2NTUwMjNhNDAwZDQzZjczYS0xNjI2MzQyMjcyIiwic3ViIjoiQUM0YmM1N2RjYTZmOWY3MTdlNDdkOWRlYzc4NGRjOTJhMCJ9.MFtIBvMfl3oYHOILsPMYklhdUuhsdwviTV_Pxdxi_6g",
                    "callTimeout": 120
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/rtc/conversations/{conversationId}/status",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "conversationId": "CH0c17647bed78463291d80a72acc7c58c",
                    "status": "assigned"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
]);

export { AccessService, AccessServiceGenerateCustomerAccessTokenMocksProvider, AccessServiceGenerateEmployeeAccessTokensMocksProvider, AccessServiceMocksProvider, COLLECTION_FORMATS, CONFIG_TOKEN, CallRequest, ConversationStatus, ConversationStatusUpdate, ConversationsService, ConversationsServiceCreateConversationMocksProvider, ConversationsServiceEndCallMocksProvider, ConversationsServiceGetConversationsMocksProvider, ConversationsServiceGetMessagesMocksProvider, ConversationsServiceInitiateCallMocksProvider, ConversationsServiceMocksProvider, ConversationsServiceUpdateConversationStatusMocksProvider, MessageItem, RTC_V1_BASE_PATH, RtcV1ApiModule, RtcV1Configuration };
//# sourceMappingURL=backbase-rtc-v1-client-ang.js.map
