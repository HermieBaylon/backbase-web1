import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { CallRequest } from '../model/models';
import { CallResponse } from '../model/models';
import { ConversationId } from '../model/models';
import { ConversationItem } from '../model/models';
import { ConversationStatus } from '../model/models';
import { ConversationStatusUpdate } from '../model/models';
import { MessageItem } from '../model/models';
import { RtcV1Configuration } from '../configuration';
import * as i0 from "@angular/core";
export interface EndCallRequestParams {
    ["conversationId"]: string;
}
export interface GetConversationsRequestParams {
    ["userId"]: string;
    ["from"]?: number;
    ["size"]?: number;
    ["conversationIds"]?: Array<string>;
}
export interface GetMessagesRequestParams {
    ["userId"]: string;
    ["conversationId"]: string;
    ["from"]?: number;
    ["size"]?: number;
}
export interface InitiateCallRequestParams {
    ["conversationId"]: string;
    ["callRequest"]: CallRequest;
}
export interface UpdateConversationStatusRequestParams {
    ["conversationId"]: string;
    ["conversationStatusUpdate"]: ConversationStatusUpdate;
}
export declare class ConversationsService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: RtcV1Configuration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: RtcV1Configuration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    createConversation(observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<ConversationId>;
    createConversation(observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<ConversationId>>;
    createConversation(observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<ConversationId>>;
    createConversationUrl(): string;
    endCall(requestParameters: EndCallRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    endCall(requestParameters: EndCallRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    endCall(requestParameters: EndCallRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    endCallUrl(requestParameters: EndCallRequestParams): string;
    getConversations(requestParameters: GetConversationsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<ConversationItem>>;
    getConversations(requestParameters: GetConversationsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<ConversationItem>>>;
    getConversations(requestParameters: GetConversationsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<ConversationItem>>>;
    getConversationsUrl(requestParameters: GetConversationsRequestParams): string;
    getMessages(requestParameters: GetMessagesRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<MessageItem>>;
    getMessages(requestParameters: GetMessagesRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<MessageItem>>>;
    getMessages(requestParameters: GetMessagesRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<MessageItem>>>;
    getMessagesUrl(requestParameters: GetMessagesRequestParams): string;
    initiateCall(requestParameters: InitiateCallRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<CallResponse>;
    initiateCall(requestParameters: InitiateCallRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<CallResponse>>;
    initiateCall(requestParameters: InitiateCallRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<CallResponse>>;
    initiateCallUrl(requestParameters: InitiateCallRequestParams): string;
    updateConversationStatus(requestParameters: UpdateConversationStatusRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<ConversationStatus>;
    updateConversationStatus(requestParameters: UpdateConversationStatusRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<ConversationStatus>>;
    updateConversationStatus(requestParameters: UpdateConversationStatusRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<ConversationStatus>>;
    updateConversationStatusUrl(requestParameters: UpdateConversationStatusRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<ConversationsService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<ConversationsService>;
}
