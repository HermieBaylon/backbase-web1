(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common/http'), require('@backbase/foundation-ang/data-http')) :
    typeof define === 'function' && define.amd ? define('@backbase/rtc-v1-client-ang', ['exports', '@angular/core', '@angular/common/http', '@backbase/foundation-ang/data-http'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["rtc-v1-client-ang"] = {}), global.ng.core, global.ng.common.http, global.i2));
})(this, (function (exports, i0, i1, i2) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);

    exports.CallRequest = void 0;
    (function (CallRequest) {
        CallRequest.TypeEnum = {
            Voice: 'voice',
            Video: 'video'
        };
    })(exports.CallRequest || (exports.CallRequest = {}));

    exports.ConversationStatus = void 0;
    (function (ConversationStatus) {
        ConversationStatus.StatusEnum = {
            Assigned: 'assigned',
            Ended: 'ended',
            Resolved: 'resolved'
        };
    })(exports.ConversationStatus || (exports.ConversationStatus = {}));

    exports.ConversationStatusUpdate = void 0;
    (function (ConversationStatusUpdate) {
        ConversationStatusUpdate.StatusEnum = {
            Assigned: 'assigned',
            Resolved: 'resolved',
            Ended: 'ended'
        };
    })(exports.ConversationStatusUpdate || (exports.ConversationStatusUpdate = {}));

    exports.MessageItem = void 0;
    (function (MessageItem) {
        MessageItem.TypeEnum = {
            CONVERSATIONACCEPTED: 'CONVERSATION_ACCEPTED',
            CONVERSATIONENDED: 'CONVERSATION_ENDED',
            MESSAGE: 'MESSAGE',
            VOICECALLINITIATED: 'VOICE_CALL_INITIATED',
            VOICECALLACCEPTED: 'VOICE_CALL_ACCEPTED',
            VOICECALLENDED: 'VOICE_CALL_ENDED',
            VIDEOCALLINITIATED: 'VIDEO_CALL_INITIATED',
            VIDEOCALLACCEPTED: 'VIDEO_CALL_ACCEPTED',
            VIDEOCALLENDED: 'VIDEO_CALL_ENDED',
            VOICECALLREJECTED: 'VOICE_CALL_REJECTED',
            VOICECALLTIMEOUT: 'VOICE_CALL_TIMEOUT',
            VIDEOCALLREJECTED: 'VIDEO_CALL_REJECTED',
            VIDEOCALLTIMEOUT: 'VIDEO_CALL_TIMEOUT'
        };
    })(exports.MessageItem || (exports.MessageItem = {}));

    var RTC_V1_BASE_PATH = new i0.InjectionToken('RTC_V1_BASE_PATH');
    var COLLECTION_FORMATS = {
        'csv': ',',
        'tsv': '   ',
        'ssv': ' ',
        'pipes': '|'
    };

    var RtcV1Configuration = /** @class */ (function () {
        function RtcV1Configuration(configurationParameters) {
            if (configurationParameters === void 0) { configurationParameters = {}; }
            this.apiKeys = configurationParameters.apiKeys;
            this.username = configurationParameters.username;
            this.password = configurationParameters.password;
            this.accessToken = configurationParameters.accessToken;
            this.basePath = configurationParameters.basePath;
            this.withCredentials = configurationParameters.withCredentials;
            this.encoder = configurationParameters.encoder;
            if (configurationParameters.credentials) {
                this.credentials = configurationParameters.credentials;
            }
            else {
                this.credentials = {};
            }
        }
        RtcV1Configuration.prototype.selectHeaderContentType = function (contentTypes) {
            var _this = this;
            if (contentTypes.length === 0) {
                return undefined;
            }
            var type = contentTypes.find(function (x) { return _this.isJsonMime(x); });
            if (type === undefined) {
                return contentTypes[0];
            }
            return type;
        };
        RtcV1Configuration.prototype.selectHeaderAccept = function (accepts) {
            var _this = this;
            if (accepts.length === 0) {
                return undefined;
            }
            var type = accepts.find(function (x) { return _this.isJsonMime(x); });
            if (type === undefined) {
                return accepts[0];
            }
            return type;
        };
        RtcV1Configuration.prototype.isJsonMime = function (mime) {
            var jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
            return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
        };
        RtcV1Configuration.prototype.lookupCredential = function (key) {
            var value = this.credentials[key];
            return typeof value === 'function'
                ? value()
                : value;
        };
        return RtcV1Configuration;
    }());
    var CONFIG_TOKEN = new i0.InjectionToken('api-data-module RtcV1Configuration');

    var RtcV1ApiModule = /** @class */ (function () {
        function RtcV1ApiModule(parentModule, http, dataModulesManager, config) {
            if (parentModule) {
                throw new Error('RtcV1ApiModule is already loaded. Import in your base AppModule only.');
            }
            if (!http) {
                throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                    'See also https://github.com/angular/angular/issues/20575');
            }
            if (dataModulesManager) {
                dataModulesManager.setModuleConfig(CONFIG_TOKEN, {
                    apiRoot: '',
                    servicePath: config.basePath || '',
                    headers: {},
                });
            }
        }
        RtcV1ApiModule.forRoot = function (configurationFactory) {
            return {
                ngModule: RtcV1ApiModule,
                providers: [{ provide: RtcV1Configuration, useFactory: configurationFactory }]
            };
        };
        return RtcV1ApiModule;
    }());
    RtcV1ApiModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: RtcV1ApiModule, deps: [{ token: RtcV1ApiModule, optional: true, skipSelf: true }, { token: i1__namespace.HttpClient, optional: true }, { token: i2__namespace.DataModulesManager, optional: true }, { token: RtcV1Configuration }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    RtcV1ApiModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: RtcV1ApiModule });
    RtcV1ApiModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: RtcV1ApiModule, providers: [], imports: [[]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: RtcV1ApiModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [],
                        declarations: [],
                        exports: [],
                        providers: []
                    }]
            }], ctorParameters: function () {
            return [{ type: RtcV1ApiModule, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.SkipSelf
                        }] }, { type: i1__namespace.HttpClient, decorators: [{
                            type: i0.Optional
                        }] }, { type: i2__namespace.DataModulesManager, decorators: [{
                            type: i0.Optional
                        }] }, { type: RtcV1Configuration }];
        } });

    var CustomHttpParameterCodec = /** @class */ (function () {
        function CustomHttpParameterCodec() {
        }
        CustomHttpParameterCodec.prototype.encodeKey = function (k) {
            return encodeURIComponent(k);
        };
        CustomHttpParameterCodec.prototype.encodeValue = function (v) {
            return encodeURIComponent(v);
        };
        CustomHttpParameterCodec.prototype.decodeKey = function (k) {
            return decodeURIComponent(k);
        };
        CustomHttpParameterCodec.prototype.decodeValue = function (v) {
            return decodeURIComponent(v);
        };
        return CustomHttpParameterCodec;
    }());

    var AccessService = /** @class */ (function () {
        function AccessService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new RtcV1Configuration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        AccessService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        AccessService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        AccessService.prototype.generateCustomerAccessToken = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _conversationId = requestParameters["conversationId"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_conversationId !== undefined && _conversationId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _conversationId, 'conversationId');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v1/rtc/access/customer", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        AccessService.prototype.generateCustomerAccessTokenUrl = function (requestParameters) {
            var _conversationId = requestParameters["conversationId"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_conversationId !== undefined && _conversationId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _conversationId, 'conversationId');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v1/rtc/access/customer" + (queryString ? "?" + queryString : '');
        };
        AccessService.prototype.generateEmployeeAccessTokens = function (observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v1/rtc/access/employee", {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        AccessService.prototype.generateEmployeeAccessTokensUrl = function () {
            return this.configuration.basePath + "/client-api/v1/rtc/access/employee";
        };
        return AccessService;
    }());
    AccessService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AccessService, deps: [{ token: i1__namespace.HttpClient }, { token: RTC_V1_BASE_PATH, optional: true }, { token: RtcV1Configuration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    AccessService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AccessService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AccessService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [RTC_V1_BASE_PATH]
                        }] }, { type: RtcV1Configuration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var AccessServiceGenerateCustomerAccessTokenMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v1/rtc/access/customer",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "conversationToken": "eyJjdHkiOiJ0d2lsaW8tZnBhO3Y9MSIsInR5cCI6IkpXVCIsImFsZyI6IkhTMjU2In0.eyJpc3MiOiJTSzRmNjhlMDg2ZjY1NzVlYTY1NTAyM2E0MDBkNDNmNzNhIiwiZXhwIjoxNjI2MzcxMTE4LCJncmFudHMiOnsiaWRlbnRpdHkiOiJBTk9OWU1PVVMiLCJjaGF0Ijp7InNlcnZpY2Vfc2lkIjoiSVNhYjlkMzFkNzdmZTg0MjJmOWFlNTJiNGM2NTVjMTNhNyJ9fSwianRpIjoiU0s0ZjY4ZTA4NmY2NTc1ZWE2NTUwMjNhNDAwZDQzZjczYS0xNjI2MzQyMjcyIiwic3ViIjoiQUM0YmM1N2RjYTZmOWY3MTdlNDdkOWRlYzc4NGRjOTJhMCJ9.MFtIBvMfl3oYHOILsPMYklhdUuhsdwviTV_Pxdxi_6g"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var AccessServiceGenerateEmployeeAccessTokensMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v1/rtc/access/employee",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "taskToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJBQzFjOGFiYjViMzZjMGYxOGEyY2ZlOWQ0ZmQ1MDA3YmEyIiwiZXhwIjoxNjI4MTkwNDAwLCJ3b3JrZXJfc2lkIjoiV0s2NDk5MTY5ZDNjNDEzYzI4ZmZmZjQxODJhZGJiMDM5MCIsIndvcmtzcGFjZV9zaWQiOiJXUzExM2UwNjQxYTZmZGExMWRlM2MxYjc4ZjA0ZmU5ZWE5IiwiY2hhbm5lbCI6IldLNjQ5OTE2OWQzYzQxM2MyOGZmZmY0MTgyYWRiYjAzOTAiLCJwb2xpY2llcyI6W3sidXJsIjoiaHR0cHM6Ly90YXNrcm91dGVyLnR3aWxpby5jb20vdjEvV29ya3NwYWNlcy9XUzExM2UwNjQxYTZmZGExMWRlM2MxYjc4ZjA0ZmU5ZWE5L0FjdGl2aXRpZXMiLCJtZXRob2QiOiJHRVQiLCJhbGxvdyI6dHJ1ZX0seyJ1cmwiOiJodHRwczovL3Rhc2tyb3V0ZXIudHdpbGlvLmNvbS92MS9Xb3Jrc3BhY2VzL1dTMTEzZTA2NDFhNmZkYTExZGUzYzFiNzhmMDRmZTllYTkvVGFza3MvKioiLCJtZXRob2QiOiJHRVQiLCJhbGxvdyI6dHJ1ZX0seyJ1cmwiOiJodHRwczovL3Rhc2tyb3V0ZXIudHdpbGlvLmNvbS92MS9Xb3Jrc3BhY2VzL1dTMTEzZTA2NDFhNmZkYTExZGUzYzFiNzhmMDRmZTllYTkvV29ya2Vycy9XSzY0OTkxNjlkM2M0MTNjMjhmZmZmNDE4MmFkYmIwMzkwL1Jlc2VydmF0aW9ucy8qKiIsIm1ldGhvZCI6IkdFVCIsImFsbG93Ijp0cnVlfSx7InVybCI6Imh0dHBzOi8vdGFza3JvdXRlci50d2lsaW8uY29tL3YxL1dvcmtzcGFjZXMvV1MxMTNlMDY0MWE2ZmRhMTFkZTNjMWI3OGYwNGZlOWVhOS9Xb3JrZXJzL1dLNjQ5OTE2OWQzYzQxM2MyOGZmZmY0MTgyYWRiYjAzOTAiLCJtZXRob2QiOiJHRVQiLCJhbGxvdyI6dHJ1ZX0seyJ1cmwiOiJodHRwczovL2V2ZW50LWJyaWRnZS50d2lsaW8uY29tL3YxL3dzY2hhbm5lbHMvQWNjb3VudFNpZC9DaGFubmVsIiwibWV0aG9kIjoiR0VUIiwiYWxsb3ciOnRydWV9LHsidXJsIjoiaHR0cHM6Ly9ldmVudC1icmlkZ2UudHdpbGlvLmNvbS92MS93c2NoYW5uZWxzL0FjY291bnRTaWQvQ2hhbm5lbCIsIm1ldGhvZCI6IlBPU1QiLCJhbGxvdyI6dHJ1ZX0seyJ1cmwiOiJodHRwczovL3Rhc2tyb3V0ZXIudHdpbGlvLmNvbS92MS9Xb3Jrc3BhY2VzL1dTMTEzZTA2NDFhNmZkYTExZGUzYzFiNzhmMDRmZTllYTkvV29ya2Vycy9XSzY0OTkxNjlkM2M0MTNjMjhmZmZmNDE4MmFkYmIwMzkwIiwibWV0aG9kIjoiUE9TVCIsInBvc3RfZmlsdGVyIjp7IkFjdGl2aXR5U2lkIjp7InJlcXVpcmVkIjp0cnVlfX0sImFsbG93Ijp0cnVlfSx7InVybCI6Imh0dHBzOi8vdGFza3JvdXRlci50d2lsaW8uY29tL3YxL1dvcmtzcGFjZXMvV1MxMTNlMDY0MWE2ZmRhMTFkZTNjMWI3OGYwNGZlOWVhOS9UYXNrcy8qKiIsIm1ldGhvZCI6IlBPU1QiLCJhbGxvdyI6dHJ1ZX0seyJ1cmwiOiJodHRwczovL2V2ZW50LWJyaWRnZS50d2lsaW8uY29tL3YxL3dzY2hhbm5lbHMvQUMxYzhhYmI1YjM2YzBmMThhMmNmZTlkNGZkNTAwN2JhMi9XSzY0OTkxNjlkM2M0MTNjMjhmZmZmNDE4MmFkYmIwMzkwIiwibWV0aG9kIjoiR0VUIiwiYWxsb3ciOnRydWV9LHsidXJsIjoiaHR0cHM6Ly9ldmVudC1icmlkZ2UudHdpbGlvLmNvbS92MS93c2NoYW5uZWxzL0FDMWM4YWJiNWIzNmMwZjE4YTJjZmU5ZDRmZDUwMDdiYTIvV0s2NDk5MTY5ZDNjNDEzYzI4ZmZmZjQxODJhZGJiMDM5MCIsIm1ldGhvZCI6IlBPU1QiLCJhbGxvdyI6dHJ1ZX1dLCJhY2NvdW50X3NpZCI6IkFDMWM4YWJiNWIzNmMwZjE4YTJjZmU5ZDRmZDUwMDdiYTIiLCJ2ZXJzaW9uIjoidjEifQ.3qR5XvqS3saAsnpc6XzKc2O4bPr3MCvlf2nZwmCOOs0",
                        "conversationToken": "eyJjdHkiOiJ0d2lsaW8tZnBhO3Y9MSIsInR5cCI6IkpXVCIsImFsZyI6IkhTMjU2In0.eyJpc3MiOiJTSzRmNjhlMDg2ZjY1NzVlYTY1NTAyM2E0MDBkNDNmNzNhIiwiZXhwIjoxNjI2MzcxMTE4LCJncmFudHMiOnsiaWRlbnRpdHkiOiJBTk9OWU1PVVMiLCJjaGF0Ijp7InNlcnZpY2Vfc2lkIjoiSVNhYjlkMzFkNzdmZTg0MjJmOWFlNTJiNGM2NTVjMTNhNyJ9fSwianRpIjoiU0s0ZjY4ZTA4NmY2NTc1ZWE2NTUwMjNhNDAwZDQzZjczYS0xNjI2MzQyMjcyIiwic3ViIjoiQUM0YmM1N2RjYTZmOWY3MTdlNDdkOWRlYzc4NGRjOTJhMCJ9.MFtIBvMfl3oYHOILsPMYklhdUuhsdwviTV_Pxdxi_6g"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var AccessServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/client-api/v1/rtc/access/customer",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "conversationToken": "eyJjdHkiOiJ0d2lsaW8tZnBhO3Y9MSIsInR5cCI6IkpXVCIsImFsZyI6IkhTMjU2In0.eyJpc3MiOiJTSzRmNjhlMDg2ZjY1NzVlYTY1NTAyM2E0MDBkNDNmNzNhIiwiZXhwIjoxNjI2MzcxMTE4LCJncmFudHMiOnsiaWRlbnRpdHkiOiJBTk9OWU1PVVMiLCJjaGF0Ijp7InNlcnZpY2Vfc2lkIjoiSVNhYjlkMzFkNzdmZTg0MjJmOWFlNTJiNGM2NTVjMTNhNyJ9fSwianRpIjoiU0s0ZjY4ZTA4NmY2NTc1ZWE2NTUwMjNhNDAwZDQzZjczYS0xNjI2MzQyMjcyIiwic3ViIjoiQUM0YmM1N2RjYTZmOWY3MTdlNDdkOWRlYzc4NGRjOTJhMCJ9.MFtIBvMfl3oYHOILsPMYklhdUuhsdwviTV_Pxdxi_6g"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v1/rtc/access/employee",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "taskToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJBQzFjOGFiYjViMzZjMGYxOGEyY2ZlOWQ0ZmQ1MDA3YmEyIiwiZXhwIjoxNjI4MTkwNDAwLCJ3b3JrZXJfc2lkIjoiV0s2NDk5MTY5ZDNjNDEzYzI4ZmZmZjQxODJhZGJiMDM5MCIsIndvcmtzcGFjZV9zaWQiOiJXUzExM2UwNjQxYTZmZGExMWRlM2MxYjc4ZjA0ZmU5ZWE5IiwiY2hhbm5lbCI6IldLNjQ5OTE2OWQzYzQxM2MyOGZmZmY0MTgyYWRiYjAzOTAiLCJwb2xpY2llcyI6W3sidXJsIjoiaHR0cHM6Ly90YXNrcm91dGVyLnR3aWxpby5jb20vdjEvV29ya3NwYWNlcy9XUzExM2UwNjQxYTZmZGExMWRlM2MxYjc4ZjA0ZmU5ZWE5L0FjdGl2aXRpZXMiLCJtZXRob2QiOiJHRVQiLCJhbGxvdyI6dHJ1ZX0seyJ1cmwiOiJodHRwczovL3Rhc2tyb3V0ZXIudHdpbGlvLmNvbS92MS9Xb3Jrc3BhY2VzL1dTMTEzZTA2NDFhNmZkYTExZGUzYzFiNzhmMDRmZTllYTkvVGFza3MvKioiLCJtZXRob2QiOiJHRVQiLCJhbGxvdyI6dHJ1ZX0seyJ1cmwiOiJodHRwczovL3Rhc2tyb3V0ZXIudHdpbGlvLmNvbS92MS9Xb3Jrc3BhY2VzL1dTMTEzZTA2NDFhNmZkYTExZGUzYzFiNzhmMDRmZTllYTkvV29ya2Vycy9XSzY0OTkxNjlkM2M0MTNjMjhmZmZmNDE4MmFkYmIwMzkwL1Jlc2VydmF0aW9ucy8qKiIsIm1ldGhvZCI6IkdFVCIsImFsbG93Ijp0cnVlfSx7InVybCI6Imh0dHBzOi8vdGFza3JvdXRlci50d2lsaW8uY29tL3YxL1dvcmtzcGFjZXMvV1MxMTNlMDY0MWE2ZmRhMTFkZTNjMWI3OGYwNGZlOWVhOS9Xb3JrZXJzL1dLNjQ5OTE2OWQzYzQxM2MyOGZmZmY0MTgyYWRiYjAzOTAiLCJtZXRob2QiOiJHRVQiLCJhbGxvdyI6dHJ1ZX0seyJ1cmwiOiJodHRwczovL2V2ZW50LWJyaWRnZS50d2lsaW8uY29tL3YxL3dzY2hhbm5lbHMvQWNjb3VudFNpZC9DaGFubmVsIiwibWV0aG9kIjoiR0VUIiwiYWxsb3ciOnRydWV9LHsidXJsIjoiaHR0cHM6Ly9ldmVudC1icmlkZ2UudHdpbGlvLmNvbS92MS93c2NoYW5uZWxzL0FjY291bnRTaWQvQ2hhbm5lbCIsIm1ldGhvZCI6IlBPU1QiLCJhbGxvdyI6dHJ1ZX0seyJ1cmwiOiJodHRwczovL3Rhc2tyb3V0ZXIudHdpbGlvLmNvbS92MS9Xb3Jrc3BhY2VzL1dTMTEzZTA2NDFhNmZkYTExZGUzYzFiNzhmMDRmZTllYTkvV29ya2Vycy9XSzY0OTkxNjlkM2M0MTNjMjhmZmZmNDE4MmFkYmIwMzkwIiwibWV0aG9kIjoiUE9TVCIsInBvc3RfZmlsdGVyIjp7IkFjdGl2aXR5U2lkIjp7InJlcXVpcmVkIjp0cnVlfX0sImFsbG93Ijp0cnVlfSx7InVybCI6Imh0dHBzOi8vdGFza3JvdXRlci50d2lsaW8uY29tL3YxL1dvcmtzcGFjZXMvV1MxMTNlMDY0MWE2ZmRhMTFkZTNjMWI3OGYwNGZlOWVhOS9UYXNrcy8qKiIsIm1ldGhvZCI6IlBPU1QiLCJhbGxvdyI6dHJ1ZX0seyJ1cmwiOiJodHRwczovL2V2ZW50LWJyaWRnZS50d2lsaW8uY29tL3YxL3dzY2hhbm5lbHMvQUMxYzhhYmI1YjM2YzBmMThhMmNmZTlkNGZkNTAwN2JhMi9XSzY0OTkxNjlkM2M0MTNjMjhmZmZmNDE4MmFkYmIwMzkwIiwibWV0aG9kIjoiR0VUIiwiYWxsb3ciOnRydWV9LHsidXJsIjoiaHR0cHM6Ly9ldmVudC1icmlkZ2UudHdpbGlvLmNvbS92MS93c2NoYW5uZWxzL0FDMWM4YWJiNWIzNmMwZjE4YTJjZmU5ZDRmZDUwMDdiYTIvV0s2NDk5MTY5ZDNjNDEzYzI4ZmZmZjQxODJhZGJiMDM5MCIsIm1ldGhvZCI6IlBPU1QiLCJhbGxvdyI6dHJ1ZX1dLCJhY2NvdW50X3NpZCI6IkFDMWM4YWJiNWIzNmMwZjE4YTJjZmU5ZDRmZDUwMDdiYTIiLCJ2ZXJzaW9uIjoidjEifQ.3qR5XvqS3saAsnpc6XzKc2O4bPr3MCvlf2nZwmCOOs0",
                        "conversationToken": "eyJjdHkiOiJ0d2lsaW8tZnBhO3Y9MSIsInR5cCI6IkpXVCIsImFsZyI6IkhTMjU2In0.eyJpc3MiOiJTSzRmNjhlMDg2ZjY1NzVlYTY1NTAyM2E0MDBkNDNmNzNhIiwiZXhwIjoxNjI2MzcxMTE4LCJncmFudHMiOnsiaWRlbnRpdHkiOiJBTk9OWU1PVVMiLCJjaGF0Ijp7InNlcnZpY2Vfc2lkIjoiSVNhYjlkMzFkNzdmZTg0MjJmOWFlNTJiNGM2NTVjMTNhNyJ9fSwianRpIjoiU0s0ZjY4ZTA4NmY2NTc1ZWE2NTUwMjNhNDAwZDQzZjczYS0xNjI2MzQyMjcyIiwic3ViIjoiQUM0YmM1N2RjYTZmOWY3MTdlNDdkOWRlYzc4NGRjOTJhMCJ9.MFtIBvMfl3oYHOILsPMYklhdUuhsdwviTV_Pxdxi_6g"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
    ]);

    var ConversationsService = /** @class */ (function () {
        function ConversationsService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new RtcV1Configuration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        ConversationsService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        ConversationsService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        ConversationsService.prototype.createConversation = function (observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v1/rtc/conversations", null, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ConversationsService.prototype.createConversationUrl = function () {
            return this.configuration.basePath + "/client-api/v1/rtc/conversations";
        };
        ConversationsService.prototype.endCall = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _conversationId = requestParameters["conversationId"];
            if (_conversationId === null || _conversationId === undefined) {
                throw new Error('Required parameter conversationId was null or undefined when calling endCall.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.delete(this.configuration.basePath + "/client-api/v1/rtc/conversations/" + encodeURIComponent(String(_conversationId)) + "/call", {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ConversationsService.prototype.endCallUrl = function (requestParameters) {
            var _conversationId = requestParameters["conversationId"];
            if (_conversationId === null || _conversationId === undefined) {
                throw new Error('Required parameter conversationId was null or undefined when calling endCall.');
            }
            return this.configuration.basePath + "/client-api/v1/rtc/conversations/" + encodeURIComponent(String(_conversationId)) + "/call";
        };
        ConversationsService.prototype.getConversations = function (requestParameters, observe, reportProgress, options) {
            var _this = this;
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _userId = requestParameters["userId"];
            if (_userId === null || _userId === undefined) {
                throw new Error('Required parameter userId was null or undefined when calling getConversations.');
            }
            var _from = requestParameters["from"];
            var _size = requestParameters["size"];
            var _conversationIds = requestParameters["conversationIds"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            if (_conversationIds) {
                _conversationIds.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'conversationIds');
                });
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v1/rtc/users/" + encodeURIComponent(String(_userId)) + "/conversations", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ConversationsService.prototype.getConversationsUrl = function (requestParameters) {
            var _this = this;
            var _userId = requestParameters["userId"];
            if (_userId === null || _userId === undefined) {
                throw new Error('Required parameter userId was null or undefined when calling getConversations.');
            }
            var _from = requestParameters["from"];
            var _size = requestParameters["size"];
            var _conversationIds = requestParameters["conversationIds"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            if (_conversationIds) {
                _conversationIds.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'conversationIds');
                });
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v1/rtc/users/" + encodeURIComponent(String(_userId)) + "/conversations" + (queryString ? "?" + queryString : '');
        };
        ConversationsService.prototype.getMessages = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _userId = requestParameters["userId"];
            if (_userId === null || _userId === undefined) {
                throw new Error('Required parameter userId was null or undefined when calling getMessages.');
            }
            var _conversationId = requestParameters["conversationId"];
            if (_conversationId === null || _conversationId === undefined) {
                throw new Error('Required parameter conversationId was null or undefined when calling getMessages.');
            }
            var _from = requestParameters["from"];
            var _size = requestParameters["size"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v1/rtc/users/" + encodeURIComponent(String(_userId)) + "/conversations/" + encodeURIComponent(String(_conversationId)) + "/messages", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ConversationsService.prototype.getMessagesUrl = function (requestParameters) {
            var _userId = requestParameters["userId"];
            if (_userId === null || _userId === undefined) {
                throw new Error('Required parameter userId was null or undefined when calling getMessages.');
            }
            var _conversationId = requestParameters["conversationId"];
            if (_conversationId === null || _conversationId === undefined) {
                throw new Error('Required parameter conversationId was null or undefined when calling getMessages.');
            }
            var _from = requestParameters["from"];
            var _size = requestParameters["size"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_from !== undefined && _from !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
            }
            if (_size !== undefined && _size !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v1/rtc/users/" + encodeURIComponent(String(_userId)) + "/conversations/" + encodeURIComponent(String(_conversationId)) + "/messages" + (queryString ? "?" + queryString : '');
        };
        ConversationsService.prototype.initiateCall = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _conversationId = requestParameters["conversationId"];
            if (_conversationId === null || _conversationId === undefined) {
                throw new Error('Required parameter conversationId was null or undefined when calling initiateCall.');
            }
            var _callRequest = requestParameters["callRequest"];
            if (_callRequest === null || _callRequest === undefined) {
                throw new Error('Required parameter callRequest was null or undefined when calling initiateCall.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.put(this.configuration.basePath + "/client-api/v1/rtc/conversations/" + encodeURIComponent(String(_conversationId)) + "/call", _callRequest, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ConversationsService.prototype.initiateCallUrl = function (requestParameters) {
            var _conversationId = requestParameters["conversationId"];
            if (_conversationId === null || _conversationId === undefined) {
                throw new Error('Required parameter conversationId was null or undefined when calling initiateCall.');
            }
            var _callRequest = requestParameters["callRequest"];
            if (_callRequest === null || _callRequest === undefined) {
                throw new Error('Required parameter callRequest was null or undefined when calling initiateCall.');
            }
            return this.configuration.basePath + "/client-api/v1/rtc/conversations/" + encodeURIComponent(String(_conversationId)) + "/call";
        };
        ConversationsService.prototype.updateConversationStatus = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _conversationId = requestParameters["conversationId"];
            if (_conversationId === null || _conversationId === undefined) {
                throw new Error('Required parameter conversationId was null or undefined when calling updateConversationStatus.');
            }
            var _conversationStatusUpdate = requestParameters["conversationStatusUpdate"];
            if (_conversationStatusUpdate === null || _conversationStatusUpdate === undefined) {
                throw new Error('Required parameter conversationStatusUpdate was null or undefined when calling updateConversationStatus.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.put(this.configuration.basePath + "/client-api/v1/rtc/conversations/" + encodeURIComponent(String(_conversationId)) + "/status", _conversationStatusUpdate, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        ConversationsService.prototype.updateConversationStatusUrl = function (requestParameters) {
            var _conversationId = requestParameters["conversationId"];
            if (_conversationId === null || _conversationId === undefined) {
                throw new Error('Required parameter conversationId was null or undefined when calling updateConversationStatus.');
            }
            var _conversationStatusUpdate = requestParameters["conversationStatusUpdate"];
            if (_conversationStatusUpdate === null || _conversationStatusUpdate === undefined) {
                throw new Error('Required parameter conversationStatusUpdate was null or undefined when calling updateConversationStatus.');
            }
            return this.configuration.basePath + "/client-api/v1/rtc/conversations/" + encodeURIComponent(String(_conversationId)) + "/status";
        };
        return ConversationsService;
    }());
    ConversationsService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConversationsService, deps: [{ token: i1__namespace.HttpClient }, { token: RTC_V1_BASE_PATH, optional: true }, { token: RtcV1Configuration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    ConversationsService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConversationsService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConversationsService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [RTC_V1_BASE_PATH]
                        }] }, { type: RtcV1Configuration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var ConversationsServiceCreateConversationMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v1/rtc/conversations",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: {
                        "id": "CH0c17647bed78463291d80a72acc7c58c"
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var ConversationsServiceEndCallMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v1/rtc/conversations/{conversationId}/call",
            method: "DELETE",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var ConversationsServiceGetConversationsMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v1/rtc/users/{userId}/conversations",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: []
                },
                {
                    status: 200,
                    body: [{
                            "id": "CH1",
                            "dateCreated": "2021-09-16T22:18:37Z",
                            "participants": [{
                                    "id": "employee1",
                                    "preferredName": "John Smith"
                                }, {
                                    "id": "supervisor1",
                                    "preferredName": "David Jones"
                                }]
                        }, {
                            "id": "CH2",
                            "dateCreated": "2021-09-16T20:18:37Z",
                            "participants": [{
                                    "id": "employee1",
                                    "preferredName": "John Smith"
                                }]
                        }, {
                            "id": "CH3",
                            "dateCreated": "2019-12-26T22:18:37Z",
                            "participants": []
                        }, {
                            "id": "CH4",
                            "dateCreated": "2019-12-25T22:18:37Z",
                            "participants": [{
                                    "id": "employee2"
                                }]
                        }, {
                            "id": "CH524234",
                            "dateCreated": "2017-12-26T22:18:37Z",
                            "participants": [{
                                    "id": "employee1",
                                    "preferredName": "John Smith"
                                }, {
                                    "id": "supervisor1",
                                    "preferredName": "David Jones"
                                }]
                        }, {
                            "id": "CH6",
                            "dateCreated": "2016-12-26T22:18:37Z",
                            "participants": [{
                                    "id": "employee1"
                                }]
                        }, {
                            "id": "CH7",
                            "dateCreated": "2015-12-26T22:18:37Z",
                            "participants": [{
                                    "id": "employee1"
                                }]
                        }, {
                            "id": "CH8",
                            "dateCreated": "2014-12-26T22:18:37Z",
                            "participants": [{
                                    "id": "employee8"
                                }]
                        }, {
                            "id": "CH9",
                            "dateCreated": "2014-10-26T22:18:37Z",
                            "participants": [{
                                    "id": "employee9"
                                }]
                        }, {
                            "id": "CH10",
                            "dateCreated": "2014-09-26T22:18:37Z",
                            "participants": [{
                                    "id": "employee10"
                                }]
                        }]
                },
                {
                    status: 200,
                    body: [{
                            "id": "CH1",
                            "dateCreated": "2020-12-16T22:18:37Z",
                            "participants": [{
                                    "id": "employee1",
                                    "preferredName": "John Smith"
                                }, {
                                    "id": "supervisor1",
                                    "preferredName": "David Jones"
                                }]
                        }, {
                            "id": "CH2",
                            "dateCreated": "2019-12-16T22:18:37Z",
                            "participants": [{
                                    "id": "employee1",
                                    "preferredName": "John Smith"
                                }]
                        }, {
                            "id": "CH3",
                            "dateCreated": "2019-11-26T22:18:37Z",
                            "participants": []
                        }]
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var ConversationsServiceGetMessagesMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v1/rtc/users/{userId}/conversations/{conversationId}/messages",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: []
                },
                {
                    status: 200,
                    body: [{
                            "id": "IM426d0acb198c43df8b42ee6e206fddb9",
                            "type": "CONVERSATION_ACCEPTED",
                            "body": null,
                            "media": [],
                            "authorId": "admin",
                            "authorPreferredName": "Kjiro",
                            "dateCreated": "2021-11-16T20:08:30Z",
                            "dateUpdated": "2021-11-16T20:08:30Z"
                        }, {
                            "id": "IMa7443cccfc9946a2810ab019396ce15c",
                            "type": "MESSAGE",
                            "body": "asdf",
                            "media": [],
                            "authorId": "admin",
                            "authorPreferredName": "Kjiro",
                            "dateCreated": "2021-11-16T20:08:32Z",
                            "dateUpdated": "2021-11-16T20:08:32Z"
                        }, {
                            "id": "IM81f239c9222b4f548c394489ace20ecc",
                            "type": "MESSAGE",
                            "body": "123123",
                            "media": [],
                            "authorId": "admin",
                            "authorPreferredName": "Kjiro",
                            "dateCreated": "2021-11-16T23:11:32Z",
                            "dateUpdated": "2021-11-16T23:11:32Z"
                        }, {
                            "id": "IM079552e6556c4ed6825b84597fa7c691",
                            "type": "MESSAGE",
                            "body": null,
                            "media": [{
                                    "id": "MEd726969bac4ea9a8ea0ed1b4881d982f",
                                    "contentType": "image/png",
                                    "fileName": null,
                                    "size": 226933
                                }],
                            "authorId": "customer",
                            "authorPreferredName": null,
                            "dateCreated": "2021-11-17T00:32:29Z",
                            "dateUpdated": "2021-11-17T00:32:29Z"
                        }, {
                            "id": "IM079552e6556c4ed6825b84597fa7c780",
                            "type": "CONVERSATION_ENDED",
                            "body": null,
                            "media": [],
                            "authorId": "admin",
                            "authorPreferredName": "Kjiro",
                            "dateCreated": "2021-11-17T00:52:29Z",
                            "dateUpdated": "2021-11-17T00:52:29Z"
                        }]
                },
                {
                    status: 200,
                    body: [{
                            "id": "IM426d0acb198c43df8b42ee6e206fddb9",
                            "type": "CONVERSATION_ACCEPTED",
                            "body": null,
                            "media": [],
                            "authorId": "admin",
                            "authorPreferredName": "Kjiro",
                            "dateCreated": "2021-11-16T20:08:30Z",
                            "dateUpdated": "2021-11-16T20:08:30Z"
                        }, {
                            "id": "IMa7443cccfc9946a2810ab019396ce15c",
                            "type": "MESSAGE",
                            "body": "asdf",
                            "media": [],
                            "authorId": "admin",
                            "authorPreferredName": "Kjiro",
                            "dateCreated": "2021-11-16T20:08:32Z",
                            "dateUpdated": "2021-11-16T20:08:32Z"
                        }, {
                            "id": "IM81f239c9222b4f548c394489ace20ecc",
                            "type": "MESSAGE",
                            "body": "123123",
                            "media": [],
                            "authorId": "admin",
                            "authorPreferredName": "Kjiro",
                            "dateCreated": "2021-11-16T23:11:32Z",
                            "dateUpdated": "2021-11-16T23:11:32Z"
                        }, {
                            "id": "IM079552e6556c4ed6825b84597fa7c691",
                            "type": "MESSAGE",
                            "body": null,
                            "media": [{
                                    "id": "MEd726969bac4ea9a8ea0ed1b4881d982f",
                                    "contentType": "image/png",
                                    "fileName": null,
                                    "size": 226933
                                }],
                            "authorId": "customer",
                            "authorPreferredName": null,
                            "dateCreated": "2021-11-17T00:32:29Z",
                            "dateUpdated": "2021-11-17T00:32:29Z"
                        }]
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var ConversationsServiceInitiateCallMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v1/rtc/conversations/{conversationId}/call",
            method: "PUT",
            responses: [
                {
                    status: 200,
                    body: {
                        "conversationToken": "eyJjdHkiOiJ0d2lsaW8tZnBhO3Y9MSIsInR5cCI6IkpXVCIsImFsZyI6IkhTMjU2In0.eyJpc3MiOiJTSzRmNjhlMDg2ZjY1NzVlYTY1NTAyM2E0MDBkNDNmNzNhIiwiZXhwIjoxNjI2MzcxMTE4LCJncmFudHMiOnsiaWRlbnRpdHkiOiJBTk9OWU1PVVMiLCJjaGF0Ijp7InNlcnZpY2Vfc2lkIjoiSVNhYjlkMzFkNzdmZTg0MjJmOWFlNTJiNGM2NTVjMTNhNyJ9fSwianRpIjoiU0s0ZjY4ZTA4NmY2NTc1ZWE2NTUwMjNhNDAwZDQzZjczYS0xNjI2MzQyMjcyIiwic3ViIjoiQUM0YmM1N2RjYTZmOWY3MTdlNDdkOWRlYzc4NGRjOTJhMCJ9.MFtIBvMfl3oYHOILsPMYklhdUuhsdwviTV_Pxdxi_6g",
                        "callTimeout": 120
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var ConversationsServiceUpdateConversationStatusMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v1/rtc/conversations/{conversationId}/status",
            method: "PUT",
            responses: [
                {
                    status: 200,
                    body: {
                        "conversationId": "CH0c17647bed78463291d80a72acc7c58c",
                        "status": "assigned"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var ConversationsServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/client-api/v1/rtc/conversations",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: {
                        "id": "CH0c17647bed78463291d80a72acc7c58c"
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v1/rtc/conversations/{conversationId}/call",
            method: "DELETE",
            responses: [
                {
                    status: 204,
                    body: ""
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v1/rtc/users/{userId}/conversations",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: []
                },
                {
                    status: 200,
                    body: [{
                            "id": "CH1",
                            "dateCreated": "2021-09-16T22:18:37Z",
                            "participants": [{
                                    "id": "employee1",
                                    "preferredName": "John Smith"
                                }, {
                                    "id": "supervisor1",
                                    "preferredName": "David Jones"
                                }]
                        }, {
                            "id": "CH2",
                            "dateCreated": "2021-09-16T20:18:37Z",
                            "participants": [{
                                    "id": "employee1",
                                    "preferredName": "John Smith"
                                }]
                        }, {
                            "id": "CH3",
                            "dateCreated": "2019-12-26T22:18:37Z",
                            "participants": []
                        }, {
                            "id": "CH4",
                            "dateCreated": "2019-12-25T22:18:37Z",
                            "participants": [{
                                    "id": "employee2"
                                }]
                        }, {
                            "id": "CH524234",
                            "dateCreated": "2017-12-26T22:18:37Z",
                            "participants": [{
                                    "id": "employee1",
                                    "preferredName": "John Smith"
                                }, {
                                    "id": "supervisor1",
                                    "preferredName": "David Jones"
                                }]
                        }, {
                            "id": "CH6",
                            "dateCreated": "2016-12-26T22:18:37Z",
                            "participants": [{
                                    "id": "employee1"
                                }]
                        }, {
                            "id": "CH7",
                            "dateCreated": "2015-12-26T22:18:37Z",
                            "participants": [{
                                    "id": "employee1"
                                }]
                        }, {
                            "id": "CH8",
                            "dateCreated": "2014-12-26T22:18:37Z",
                            "participants": [{
                                    "id": "employee8"
                                }]
                        }, {
                            "id": "CH9",
                            "dateCreated": "2014-10-26T22:18:37Z",
                            "participants": [{
                                    "id": "employee9"
                                }]
                        }, {
                            "id": "CH10",
                            "dateCreated": "2014-09-26T22:18:37Z",
                            "participants": [{
                                    "id": "employee10"
                                }]
                        }]
                },
                {
                    status: 200,
                    body: [{
                            "id": "CH1",
                            "dateCreated": "2020-12-16T22:18:37Z",
                            "participants": [{
                                    "id": "employee1",
                                    "preferredName": "John Smith"
                                }, {
                                    "id": "supervisor1",
                                    "preferredName": "David Jones"
                                }]
                        }, {
                            "id": "CH2",
                            "dateCreated": "2019-12-16T22:18:37Z",
                            "participants": [{
                                    "id": "employee1",
                                    "preferredName": "John Smith"
                                }]
                        }, {
                            "id": "CH3",
                            "dateCreated": "2019-11-26T22:18:37Z",
                            "participants": []
                        }]
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v1/rtc/users/{userId}/conversations/{conversationId}/messages",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: []
                },
                {
                    status: 200,
                    body: [{
                            "id": "IM426d0acb198c43df8b42ee6e206fddb9",
                            "type": "CONVERSATION_ACCEPTED",
                            "body": null,
                            "media": [],
                            "authorId": "admin",
                            "authorPreferredName": "Kjiro",
                            "dateCreated": "2021-11-16T20:08:30Z",
                            "dateUpdated": "2021-11-16T20:08:30Z"
                        }, {
                            "id": "IMa7443cccfc9946a2810ab019396ce15c",
                            "type": "MESSAGE",
                            "body": "asdf",
                            "media": [],
                            "authorId": "admin",
                            "authorPreferredName": "Kjiro",
                            "dateCreated": "2021-11-16T20:08:32Z",
                            "dateUpdated": "2021-11-16T20:08:32Z"
                        }, {
                            "id": "IM81f239c9222b4f548c394489ace20ecc",
                            "type": "MESSAGE",
                            "body": "123123",
                            "media": [],
                            "authorId": "admin",
                            "authorPreferredName": "Kjiro",
                            "dateCreated": "2021-11-16T23:11:32Z",
                            "dateUpdated": "2021-11-16T23:11:32Z"
                        }, {
                            "id": "IM079552e6556c4ed6825b84597fa7c691",
                            "type": "MESSAGE",
                            "body": null,
                            "media": [{
                                    "id": "MEd726969bac4ea9a8ea0ed1b4881d982f",
                                    "contentType": "image/png",
                                    "fileName": null,
                                    "size": 226933
                                }],
                            "authorId": "customer",
                            "authorPreferredName": null,
                            "dateCreated": "2021-11-17T00:32:29Z",
                            "dateUpdated": "2021-11-17T00:32:29Z"
                        }, {
                            "id": "IM079552e6556c4ed6825b84597fa7c780",
                            "type": "CONVERSATION_ENDED",
                            "body": null,
                            "media": [],
                            "authorId": "admin",
                            "authorPreferredName": "Kjiro",
                            "dateCreated": "2021-11-17T00:52:29Z",
                            "dateUpdated": "2021-11-17T00:52:29Z"
                        }]
                },
                {
                    status: 200,
                    body: [{
                            "id": "IM426d0acb198c43df8b42ee6e206fddb9",
                            "type": "CONVERSATION_ACCEPTED",
                            "body": null,
                            "media": [],
                            "authorId": "admin",
                            "authorPreferredName": "Kjiro",
                            "dateCreated": "2021-11-16T20:08:30Z",
                            "dateUpdated": "2021-11-16T20:08:30Z"
                        }, {
                            "id": "IMa7443cccfc9946a2810ab019396ce15c",
                            "type": "MESSAGE",
                            "body": "asdf",
                            "media": [],
                            "authorId": "admin",
                            "authorPreferredName": "Kjiro",
                            "dateCreated": "2021-11-16T20:08:32Z",
                            "dateUpdated": "2021-11-16T20:08:32Z"
                        }, {
                            "id": "IM81f239c9222b4f548c394489ace20ecc",
                            "type": "MESSAGE",
                            "body": "123123",
                            "media": [],
                            "authorId": "admin",
                            "authorPreferredName": "Kjiro",
                            "dateCreated": "2021-11-16T23:11:32Z",
                            "dateUpdated": "2021-11-16T23:11:32Z"
                        }, {
                            "id": "IM079552e6556c4ed6825b84597fa7c691",
                            "type": "MESSAGE",
                            "body": null,
                            "media": [{
                                    "id": "MEd726969bac4ea9a8ea0ed1b4881d982f",
                                    "contentType": "image/png",
                                    "fileName": null,
                                    "size": 226933
                                }],
                            "authorId": "customer",
                            "authorPreferredName": null,
                            "dateCreated": "2021-11-17T00:32:29Z",
                            "dateUpdated": "2021-11-17T00:32:29Z"
                        }]
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v1/rtc/conversations/{conversationId}/call",
            method: "PUT",
            responses: [
                {
                    status: 200,
                    body: {
                        "conversationToken": "eyJjdHkiOiJ0d2lsaW8tZnBhO3Y9MSIsInR5cCI6IkpXVCIsImFsZyI6IkhTMjU2In0.eyJpc3MiOiJTSzRmNjhlMDg2ZjY1NzVlYTY1NTAyM2E0MDBkNDNmNzNhIiwiZXhwIjoxNjI2MzcxMTE4LCJncmFudHMiOnsiaWRlbnRpdHkiOiJBTk9OWU1PVVMiLCJjaGF0Ijp7InNlcnZpY2Vfc2lkIjoiSVNhYjlkMzFkNzdmZTg0MjJmOWFlNTJiNGM2NTVjMTNhNyJ9fSwianRpIjoiU0s0ZjY4ZTA4NmY2NTc1ZWE2NTUwMjNhNDAwZDQzZjczYS0xNjI2MzQyMjcyIiwic3ViIjoiQUM0YmM1N2RjYTZmOWY3MTdlNDdkOWRlYzc4NGRjOTJhMCJ9.MFtIBvMfl3oYHOILsPMYklhdUuhsdwviTV_Pxdxi_6g",
                        "callTimeout": 120
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v1/rtc/conversations/{conversationId}/status",
            method: "PUT",
            responses: [
                {
                    status: 200,
                    body: {
                        "conversationId": "CH0c17647bed78463291d80a72acc7c58c",
                        "status": "assigned"
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 403,
                    body: {
                        "message": "Access to requested resource denied.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "key": "GENERAL_ERROR",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
    ]);

    exports.AccessService = AccessService;
    exports.AccessServiceGenerateCustomerAccessTokenMocksProvider = AccessServiceGenerateCustomerAccessTokenMocksProvider;
    exports.AccessServiceGenerateEmployeeAccessTokensMocksProvider = AccessServiceGenerateEmployeeAccessTokensMocksProvider;
    exports.AccessServiceMocksProvider = AccessServiceMocksProvider;
    exports.COLLECTION_FORMATS = COLLECTION_FORMATS;
    exports.CONFIG_TOKEN = CONFIG_TOKEN;
    exports.ConversationsService = ConversationsService;
    exports.ConversationsServiceCreateConversationMocksProvider = ConversationsServiceCreateConversationMocksProvider;
    exports.ConversationsServiceEndCallMocksProvider = ConversationsServiceEndCallMocksProvider;
    exports.ConversationsServiceGetConversationsMocksProvider = ConversationsServiceGetConversationsMocksProvider;
    exports.ConversationsServiceGetMessagesMocksProvider = ConversationsServiceGetMessagesMocksProvider;
    exports.ConversationsServiceInitiateCallMocksProvider = ConversationsServiceInitiateCallMocksProvider;
    exports.ConversationsServiceMocksProvider = ConversationsServiceMocksProvider;
    exports.ConversationsServiceUpdateConversationStatusMocksProvider = ConversationsServiceUpdateConversationStatusMocksProvider;
    exports.RTC_V1_BASE_PATH = RTC_V1_BASE_PATH;
    exports.RtcV1ApiModule = RtcV1ApiModule;
    exports.RtcV1Configuration = RtcV1Configuration;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-rtc-v1-client-ang.umd.js.map
