(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common/http'), require('rxjs'), require('rxjs/operators'), require('@angular/common'), require('@angular/forms'), require('@backbase/ui-ang/alert'), require('@backbase/ui-ang/amount'), require('@backbase/ui-ang/badge'), require('@backbase/ui-ang/button'), require('@backbase/ui-ang/empty-state'), require('@backbase/ui-ang/focus'), require('@backbase/ui-ang/icon'), require('@backbase/ui-ang/input-inline-edit'), require('@backbase/ui-ang/input-password'), require('@backbase/ui-ang/input-radio-group'), require('@backbase/ui-ang/input-validation-message'), require('@backbase/ui-ang/load-button'), require('@backbase/ui-ang/loading-indicator'), require('@backbase/ui-ang/modal'), require('@backbase/ui-ang/payment-card'), require('@backbase/foundation-ang/core'), require('@backbase/data-ang/cards'), require('@backbase/ui-ang/notification')) :
    typeof define === 'function' && define.amd ? define('@backbase/cards-common-ang', ['exports', '@angular/core', '@angular/common/http', 'rxjs', 'rxjs/operators', '@angular/common', '@angular/forms', '@backbase/ui-ang/alert', '@backbase/ui-ang/amount', '@backbase/ui-ang/badge', '@backbase/ui-ang/button', '@backbase/ui-ang/empty-state', '@backbase/ui-ang/focus', '@backbase/ui-ang/icon', '@backbase/ui-ang/input-inline-edit', '@backbase/ui-ang/input-password', '@backbase/ui-ang/input-radio-group', '@backbase/ui-ang/input-validation-message', '@backbase/ui-ang/load-button', '@backbase/ui-ang/loading-indicator', '@backbase/ui-ang/modal', '@backbase/ui-ang/payment-card', '@backbase/foundation-ang/core', '@backbase/data-ang/cards', '@backbase/ui-ang/notification'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["cards-common-ang"] = {}), global.ng.core, global.ng.common.http, global.rxjs, global.rxjs.operators, global.ng.common, global.ng.forms, global.i6, global.i1$3, global.i2$4, global.i5, global.i1$4, global.i7, global.i1, global.i2$2, global.i3, global.i3$1, global.i4, global.i1$2, global.i2$3, global.i2$1, global.i7$1, global.i1$1, global.i1$5, global.i2$5));
})(this, (function (exports, i0, http, rxjs, operators, i2, i9, i6, i1$3, i2$4, i5, i1$4, i7, i1, i2$2, i3, i3$1, i4, i1$2, i2$3, i2$1, i7$1, i1$1, i1$5, i2$5) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i9__namespace = /*#__PURE__*/_interopNamespace(i9);
    var i6__namespace = /*#__PURE__*/_interopNamespace(i6);
    var i1__namespace$2 = /*#__PURE__*/_interopNamespace(i1$3);
    var i2__namespace$4 = /*#__PURE__*/_interopNamespace(i2$4);
    var i5__namespace = /*#__PURE__*/_interopNamespace(i5);
    var i1__namespace$3 = /*#__PURE__*/_interopNamespace(i1$4);
    var i7__namespace = /*#__PURE__*/_interopNamespace(i7);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i2__namespace$2 = /*#__PURE__*/_interopNamespace(i2$2);
    var i3__namespace = /*#__PURE__*/_interopNamespace(i3);
    var i3__namespace$1 = /*#__PURE__*/_interopNamespace(i3$1);
    var i4__namespace = /*#__PURE__*/_interopNamespace(i4);
    var i1__namespace$1 = /*#__PURE__*/_interopNamespace(i1$2);
    var i2__namespace$3 = /*#__PURE__*/_interopNamespace(i2$3);
    var i2__namespace$1 = /*#__PURE__*/_interopNamespace(i2$1);
    var i7__namespace$1 = /*#__PURE__*/_interopNamespace(i7$1);
    var i1__namespace$5 = /*#__PURE__*/_interopNamespace(i1$1);
    var i1__namespace$4 = /*#__PURE__*/_interopNamespace(i1$5);
    var i2__namespace$5 = /*#__PURE__*/_interopNamespace(i2$5);

    var baseCardItem = {
        id: '0',
        brand: 'Mastercard',
        type: 'Credit',
        subType: 'ATM',
        name: 'Blue Card',
        status: 'Active',
        lockStatus: 'UNLOCKED',
        holder: {
            name: 'Jack Reacher',
        },
        expiryDate: {
            year: '2023',
            month: '12',
        },
        currency: 'USD',
        maskedNumber: '1234',
    };
    var generateCardItem = (function () {
        var uid = 0;
        return function (changes) { return (Object.assign(Object.assign(Object.assign({}, baseCardItem), { id: (++uid).toString() }), changes)); };
    })();
    var data = [
        // with additions
        generateCardItem({
            maskedNumber: '0101',
            additions: {
                bonusPoints: '5',
            },
        }),
        // deactivated card
        generateCardItem({
            maskedNumber: '0301',
            status: 'Cancelled',
            replacement: { status: 'ReplacementRequested' },
            delivery: {
                transitSteps: [
                    {
                        name: 'Ordered',
                        status: 'SUCCESS',
                        stepDateTime: '2019-01-28T16:41:41.090Z',
                    },
                    {
                        name: 'Processed',
                        status: 'SUCCESS',
                        stepDateTime: '2019-01-30T00:00:00.000Z',
                    },
                    {
                        name: 'In Transit',
                        status: 'PENDING',
                    },
                    {
                        name: 'Delivered',
                        status: 'PENDING',
                    },
                ],
            },
        }),
        // should have a visa logo and gold color
        generateCardItem({
            maskedNumber: '0204',
            name: 'Gold Card',
            brand: 'Visa',
            type: 'Prepaid',
        }),
        // should have a visa logo and gold color
        generateCardItem({
            maskedNumber: '0201',
            name: 'Gold Card',
            brand: 'Visa',
        }),
        // needs to be activated
        generateCardItem({
            maskedNumber: '0401',
            status: 'Inactive',
        }),
        // expired
        generateCardItem({
            maskedNumber: '0302',
            status: 'Expired',
            type: 'Debit',
        }),
        // under delivery
        generateCardItem({
            maskedNumber: '0501',
            type: 'Debit',
            status: 'Inactive',
            delivery: {
                transitSteps: [
                    {
                        name: 'Ordered',
                        status: 'SUCCESS',
                        stepDateTime: '2019-01-28T16:41:41.090Z',
                    },
                    {
                        name: 'Processed',
                        status: 'SUCCESS',
                        stepDateTime: '2019-01-30T00:00:00.000Z',
                    },
                    {
                        name: 'In Transit',
                        status: 'SUCCESS',
                        stepDateTime: '2019-02-01T00:00:00.000Z',
                    },
                    {
                        name: 'Delivered',
                        status: 'SUCCESS',
                        stepDateTime: '2019-02-03T00:00:00.000Z',
                    },
                ],
            },
        }),
        // should have a visa logo and black color
        generateCardItem({
            maskedNumber: '0202',
            brand: 'Visa',
            name: 'Black Card',
            type: 'Debit',
        }),
        // with limits
        generateCardItem({
            maskedNumber: '1034',
            name: 'Green Card',
            limits: [
                {
                    id: '1',
                    channel: 'ATM',
                    frequency: 'DAILY',
                    amount: 3000.0,
                    maxAmount: 10000.0,
                    minAmount: 0.0,
                },
                {
                    id: '2',
                    channel: 'ONLINE',
                    frequency: 'DAILY',
                    amount: 2000.0,
                    maxAmount: 10000.0,
                    minAmount: 0.0,
                },
            ],
        }),
    ];

    // Replaces spec examples with a custom list of cards
    var cardsGetHook = (function () { return new http.HttpResponse({
        body: data,
        status: 200,
    }); });

    // Throw HttpErrorResponse on wrong parameters
    var cardsGetErrorHook = (function (response, params) {
        var errorCode = parseInt(params.get('error'), 10);
        if (errorCode === 400) {
            var responseBody = {
                message: 'Bad Request',
                errors: [
                    {
                        message: 'Mock error message: bad request',
                        key: 'cards.api.test.key',
                        context: {
                            arg0: 0,
                        },
                    },
                ],
            };
            throw new http.HttpErrorResponse({
                error: responseBody,
                status: 400,
            });
        }
        if (errorCode === 403) {
            var responseBody = {
                message: 'Forbidden',
                errors: [
                    {
                        message: 'Mock error message: Forbidden',
                        key: 'cards.api.test.key',
                        context: {
                            arg0: 0,
                        },
                    },
                ],
            };
            throw new http.HttpErrorResponse({
                error: responseBody,
                status: 403,
            });
        }
        return response;
    });

    var cardGetHook = (function (paymentCardId) { return new http.HttpResponse({
        body: data.find(function (paymentCard) { return paymentCard.id === paymentCardId; }),
        status: 200,
    }); });

    // Throw HttpErrorResponse if not found
    var cardGetErrorHook = (function (response) {
        if (response.body === null) {
            var responseBody = {
                message: 'Not found',
                errors: [
                    {
                        message: 'Mock error message: cannot find a card with this ID',
                        key: 'cards.api.test.key',
                        context: {
                            arg0: 0,
                        },
                    },
                ],
            };
            throw new http.HttpErrorResponse({
                error: responseBody,
                status: 404,
            });
        }
        return response;
    });

    var cardsLockStatusPostHook = (function (request, response) {
        var data = response.body;
        var lockStatus = request.body.lockStatus;
        data.lockStatus = lockStatus;
        return new http.HttpResponse({
            body: data,
            status: 200,
        });
    });

    var cardsReplacementPostHook = (function (response) {
        var data = response.body;
        data.replacementStatus = 'ReplacementRequested';
        data.status = 'Cancelled';
        return new http.HttpResponse({
            body: data,
            status: 200,
        });
    });

    var cardsActivationPostHook = (function (response) {
        var data = response.body;
        data.status = 'Active';
        return new http.HttpResponse({
            body: data,
            status: 200,
        });
    });

    var cardsLimitsPostHook = (function (response, limits) {
        var card = response.body;
        card.limits = card.limits.map(function (item, index) { return (Object.assign(Object.assign({}, item), limits[index])); });
        return new http.HttpResponse({
            body: card,
            status: 200,
        });
    });

    var generateTravelNotice = (function () {
        var uid = 0;
        return function (properties) { return (Object.assign({ id: (++uid).toString() }, properties)); };
    })();
    var travelNoticeList = [
        generateTravelNotice({
            cardIds: ['1'],
            departureDate: '2020-01-09',
            arrivalDate: '2020-01-18',
            destinations: [
                {
                    country: 'MEX',
                },
                {
                    country: 'USA',
                    region: 'US-TX',
                },
            ],
        }),
        generateTravelNotice({
            cardIds: ['1', '2'],
            departureDate: '2019-12-10',
            arrivalDate: '2019-12-23',
            destinations: [
                {
                    country: 'JPN',
                },
                {
                    country: 'USA',
                    region: 'US-CA',
                },
            ],
            contact: {
                phoneNumber: '+1 646 432 3000',
            },
        }),
        generateTravelNotice({
            cardIds: ['1', '3', '7'],
            departureDate: '2019-07-23',
            arrivalDate: '2019-08-11',
            destinations: [
                {
                    country: 'KHM',
                },
                {
                    country: 'KOR',
                },
                {
                    country: 'IND',
                },
            ],
            contact: {
                phoneNumber: '+1 646 432 3000',
            },
        }),
    ];

    var travelNoticeGetHook = (function () { return new http.HttpResponse({
        body: travelNoticeList,
        status: 200,
    }); });

    var travelNoticePostHook = (function (travelNotice) {
        var travelNoticeItem = generateTravelNotice(travelNotice);
        travelNoticeList.unshift(travelNoticeItem);
        return new http.HttpResponse({
            body: travelNoticeItem,
            status: 200,
        });
    });

    var travelNoticeDeleteHook = (function (id) {
        var index = travelNoticeList.findIndex(function (travelNoticeItem) { return travelNoticeItem.id === id; });
        travelNoticeList.splice(index, 1);
        return new http.HttpResponse({
            body: [],
            status: 200,
        });
    });

    var CardsMockBackendInterceptor = /** @class */ (function () {
        function CardsMockBackendInterceptor() {
        }
        CardsMockBackendInterceptor.prototype.intercept = function (request, next) {
            return rxjs.of(undefined).pipe(
            // eslint-disable-next-line
            operators.flatMap(function () {
                console.log(request.method, request.urlWithParams);
                if (request.url.endsWith('/cards') && request.method === 'GET') {
                    return rxjs.of(new http.HttpResponse({
                        body: [],
                        status: 200,
                    })).pipe(operators.map(cardsGetHook), operators.map(function (response) { return cardsGetErrorHook(response, request.params); }));
                }
                if (request.url.indexOf('/cards/') > -1 && request.method === 'GET') {
                    var paymentCardId_1 = request.url.split('/')[request.url.split('/').length - 1];
                    return rxjs.of(new http.HttpResponse({
                        body: [],
                        status: 200,
                    })).pipe(operators.map(function () { return cardGetHook(paymentCardId_1); }), operators.map(function (response) { return cardGetErrorHook(response); }));
                }
                if (request.url.endsWith('/travel-notices') && request.method === 'GET') {
                    return rxjs.of(new http.HttpResponse({
                        body: [],
                        status: 200,
                    })).pipe(operators.map(travelNoticeGetHook));
                }
                if (request.url.endsWith('/travel-notices') && request.method === 'POST') {
                    var travelNoticeItem_1 = request.body;
                    return rxjs.of(new http.HttpResponse({
                        body: [],
                        status: 200,
                    })).pipe(operators.map(function () { return travelNoticePostHook(travelNoticeItem_1); }));
                }
                if (request.url.indexOf('/travel-notices') !== -1 && request.method === 'DELETE') {
                    var travelNoticeItemId_1 = request.url.split('/')[request.url.split('/').length - 1];
                    return rxjs.of(new http.HttpResponse({
                        body: [],
                        status: 200,
                    })).pipe(operators.map(function () { return travelNoticeDeleteHook(travelNoticeItemId_1); }));
                }
                if (request.url.endsWith('/lock-status') && request.method === 'POST') {
                    var paymentCardId_2 = request.url.split('/')[request.url.split('/').length - 2];
                    return rxjs.of(new http.HttpResponse({
                        body: [],
                        status: 200,
                    })).pipe(operators.map(function () { return cardGetHook(paymentCardId_2); }), operators.map(function (response) { return cardsLockStatusPostHook(request, response); }));
                }
                if (request.url.endsWith('/replacement') && request.method === 'POST') {
                    var paymentCardId_3 = request.url.split('/')[request.url.split('/').length - 2];
                    return rxjs.of(new http.HttpResponse({
                        body: [],
                        status: 200,
                    })).pipe(operators.map(function () { return cardGetHook(paymentCardId_3); }), operators.map(function (response) { return cardsReplacementPostHook(response); }));
                }
                if (request.url.endsWith('/limits') && request.method === 'POST') {
                    var paymentCardId_4 = request.url.split('/')[request.url.split('/').length - 2];
                    var limits_1 = request.body;
                    return rxjs.of(new http.HttpResponse({
                        body: [],
                        status: 200,
                    })).pipe(operators.map(function () { return cardGetHook(paymentCardId_4); }), operators.map(function (response) { return cardsLimitsPostHook(response, limits_1); }));
                }
                if (request.url.endsWith('/activation') && request.method === 'POST') {
                    var paymentCardId_5 = request.url.split('/')[request.url.split('/').length - 2];
                    return rxjs.of(new http.HttpResponse({
                        body: [],
                        status: 200,
                    })).pipe(operators.map(function () { return cardGetHook(paymentCardId_5); }), operators.map(function (response) { return cardsActivationPostHook(response); }));
                }
                if (request.url.endsWith('/pin/reset') && request.method === 'POST') {
                    var paymentCardId_6 = request.url.split('/')[request.url.split('/').length - 3];
                    return rxjs.of(new http.HttpResponse({
                        body: [],
                        status: 200,
                    })).pipe(operators.map(function () { return cardGetHook(paymentCardId_6); }));
                }
                if (request.url.endsWith('/pin/request') && request.method === 'POST') {
                    var paymentCardId_7 = request.url.split('/')[request.url.split('/').length - 3];
                    return rxjs.of(new http.HttpResponse({
                        body: [],
                        status: 200,
                    })).pipe(operators.map(function () { return cardGetHook(paymentCardId_7); }));
                }
                return next.handle(request);
            }), operators.materialize(), operators.delay(1000), operators.dematerialize());
        };
        return CardsMockBackendInterceptor;
    }());
    CardsMockBackendInterceptor.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardsMockBackendInterceptor, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    CardsMockBackendInterceptor.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardsMockBackendInterceptor });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardsMockBackendInterceptor, decorators: [{
                type: i0.Injectable
            }] });
    var CardsMockBackendProvider = {
        provide: http.HTTP_INTERCEPTORS,
        useClass: CardsMockBackendInterceptor,
        multi: true,
    };

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var AccessibilityKeyboardDirective = /** @class */ (function () {
        function AccessibilityKeyboardDirective(element) {
            this.element = element;
            element.nativeElement.tabIndex = 0;
        }
        // eslint-disable-next-line
        AccessibilityKeyboardDirective.prototype.eventListener = function (event) {
            this.element.nativeElement.click(event);
        };
        return AccessibilityKeyboardDirective;
    }());
    AccessibilityKeyboardDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AccessibilityKeyboardDirective, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    AccessibilityKeyboardDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: AccessibilityKeyboardDirective, selector: "[bbAccessibilityKeyboard]", host: { listeners: { "keydown.enter": "eventListener($event)", "keydown.space": "eventListener($event)" } }, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: AccessibilityKeyboardDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbAccessibilityKeyboard]',
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; }, propDecorators: { eventListener: [{
                    type: i0.HostListener,
                    args: ['keydown.enter', ['$event']]
                }, {
                    type: i0.HostListener,
                    args: ['keydown.space', ['$event']]
                }] } });

    /**
     * Possible payment card delivery transit step statuses.
     */
    exports.PaymentCardDeliveryStepStatus = void 0;
    (function (PaymentCardDeliveryStepStatus) {
        PaymentCardDeliveryStepStatus["Success"] = "SUCCESS";
        PaymentCardDeliveryStepStatus["Pending"] = "PENDING";
        PaymentCardDeliveryStepStatus["Failed"] = "FAILED";
    })(exports.PaymentCardDeliveryStepStatus || (exports.PaymentCardDeliveryStepStatus = {}));

    /**
     * @name DeliveryTrackerComponent
     *
     * @description
     * Component that displays the steps to fulfill an activity.
     */
    var DeliveryTrackerComponent = /** @class */ (function () {
        function DeliveryTrackerComponent() {
            /**
             * The steps that this component displays the steps of.  Mandatory.
             */
            this.steps = [];
            /**
             * Color for the icons and the lines
             */
            this.color = 'primary';
        }
        Object.defineProperty(DeliveryTrackerComponent.prototype, "currentStep", {
            get: function () {
                var steps = this.steps.filter(function (step) { return step.status === exports.PaymentCardDeliveryStepStatus.Success; });
                if (steps.length > 0) {
                    return steps[steps.length - 1];
                }
                return undefined;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DeliveryTrackerComponent.prototype, "stepColorClassName", {
            get: function () {
                return "bb-delivery-tracker__step-icon-" + this.color;
            },
            enumerable: false,
            configurable: true
        });
        DeliveryTrackerComponent.prototype.getStepClassName = function (step) {
            var stepClassName = step.name.toLowerCase().replace(/\W/g, '-').replace(/-{2,}/g, '-');
            return "bb-delivery-tracker__step--" + stepClassName;
        };
        DeliveryTrackerComponent.prototype.getStepIconClassName = function (name) {
            var stepClassName = name.toLowerCase().replace(/\W/g, '-').replace(/-{2,}/g, '-');
            return "delivery-tracker__step--" + stepClassName;
        };
        DeliveryTrackerComponent.prototype.ngOnInit = function () {
            if (typeof this.steps === 'undefined') {
                throw new Error("\"steps\" input is required in \"" + this.constructor.name + "\"");
            }
        };
        return DeliveryTrackerComponent;
    }());
    DeliveryTrackerComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: DeliveryTrackerComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    DeliveryTrackerComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: DeliveryTrackerComponent, selector: "bb-delivery-tracker", inputs: { steps: "steps", color: "color" }, ngImport: i0__namespace, template: "<div class=\"bb-delivery-tracker\">\n  <div\n    class=\"bb-delivery-tracker__step\"\n    *ngFor=\"let step of steps\"\n    [ngClass]=\"[\n      step === currentStep ? 'active' : '',\n      getStepClassName(step)\n    ]\"\n  >\n    <div\n      class=\"bb-delivery-tracker__step-icon\"\n      [ngClass]=\"[\n        stepColorClassName,\n        step.status !== 'SUCCESS' ? 'bb-delivery-tracker__step-icon--disabled' : ''\n      ]\"\n    >\n      <bb-icon-ui \n        [name]=\"getStepIconClassName(step.status === 'SUCCESS' ? 'ordered' : step.name)\"\n        backgroundType=\"circle\"\n        size=\"md\"\n        [color]=\"step.status === 'SUCCESS' ? color : 'light'\"\n      ></bb-icon-ui>\n    </div>\n    <div\n      class=\"bb-delivery-tracker__step-text\"\n      [ngClass]=\"{'bb-text-support': step.status !== 'SUCCESS'}\"\n    >\n      {{ step.name }}\n    </div>\n    <div\n      class=\"bb-delivery-tracker__step-date bb-subtitle\"\n      *ngIf=\"step.stepDateTime\"\n    >\n      {{ step.stepDateTime | date }} at {{step.stepDateTime | date:'shortTime'}}\n    </div>\n  </div>\n</div>\n", components: [{ type: i1__namespace.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i2__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "date": i2__namespace.DatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: DeliveryTrackerComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-delivery-tracker',
                        templateUrl: './delivery-tracker.component.html',
                    }]
            }], propDecorators: { steps: [{
                    type: i0.Input
                }], color: [{
                    type: i0.Input
                }] } });

    var PaymentCardDeliveryStatusComponent = /** @class */ (function () {
        function PaymentCardDeliveryStatusComponent() {
            /**
             * Delivery status of the payment card to be displayed.
             */
            this.deliveryStatus = { transitSteps: [] };
            this.hostRef = this;
        }
        return PaymentCardDeliveryStatusComponent;
    }());
    PaymentCardDeliveryStatusComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PaymentCardDeliveryStatusComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    PaymentCardDeliveryStatusComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: PaymentCardDeliveryStatusComponent, selector: "bb-payment-card-delivery-status", inputs: { deliveryStatus: "deliveryStatus" }, ngImport: i0__namespace, template: "<ng-container bbCardsDeliveryStatusCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbCardsDeliveryStatusCustomizable let-hostRef>\n  <div class=\"bb-block bb-block--lg\">\n    <bb-delivery-tracker [steps]=\"hostRef.deliveryStatus.transitSteps\" color=\"success\"></bb-delivery-tracker>\n  </div>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return DeliveryTrackerComponent; }), selector: "bb-delivery-tracker", inputs: ["steps", "color"] }], directives: [{ type: i0__namespace.forwardRef(function () { return CardsDeliveryStatusCustomizableDirective; }), selector: "[bbCardsDeliveryStatusCustomizable]" }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PaymentCardDeliveryStatusComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-payment-card-delivery-status',
                        templateUrl: './payment-card-delivery-status.component.html',
                    }]
            }], propDecorators: { deliveryStatus: [{
                    type: i0.Input
                }] } });
    var CardsDeliveryStatusCustomizableDirective = /** @class */ (function (_super) {
        __extends(CardsDeliveryStatusCustomizableDirective, _super);
        function CardsDeliveryStatusCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return CardsDeliveryStatusCustomizableDirective;
    }(i1$1.BbTemplate));
    CardsDeliveryStatusCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardsDeliveryStatusCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    CardsDeliveryStatusCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: CardsDeliveryStatusCustomizableDirective, selector: "[bbCardsDeliveryStatusCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardsDeliveryStatusCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbCardsDeliveryStatusCustomizable]',
                    }]
            }] });

    var PaymentCardInitiateActivationComponent = /** @class */ (function () {
        function PaymentCardInitiateActivationComponent() {
            /**
             * Whether card activation has been initiated.
             */
            this.isInitiateActivationLoading = false;
            /**
             * Event to initiate activation of payment card;
             */
            this.initiateActivation = new i0.EventEmitter();
            /**
             * Reference to instance of customizable component.
             */
            this.hostRef = this;
            /**
             * Flag to denote whether the activation modal is open or not.
             */
            this.isModalOpen = false;
            /**
             * Form model for initiating activation.
             */
            this.form = new i9.FormGroup({
                token: new i9.FormControl('', [i9.Validators.required, i9.Validators.minLength(3)]),
            });
        }
        PaymentCardInitiateActivationComponent.prototype.ngOnInit = function () {
            if (typeof this.paymentCard === 'undefined') {
                throw new Error("\"paymentCard\" input is required in \"" + this.constructor.name + "\"");
            }
        };
        /**
         * Submit handler for initiating activation.
         *
         * @param params - form model value
         */
        PaymentCardInitiateActivationComponent.prototype.onSubmit = function (params) {
            this.isModalOpen = false;
            this.initiateActivation.emit(params.token);
        };
        /**
         * Opens the modal.
         */
        PaymentCardInitiateActivationComponent.prototype.onModalOpen = function () {
            this.isModalOpen = true;
        };
        /**
         * Closes the modal.
         */
        PaymentCardInitiateActivationComponent.prototype.onModalClose = function () {
            this.isModalOpen = false;
            this.form.reset({ token: '' });
        };
        /**
         * Form element validation control.
         */
        PaymentCardInitiateActivationComponent.prototype.isFieldValid = function (fieldName) {
            var control = this.form.get(fieldName);
            return !!control && (control.valid || control.untouched);
        };
        return PaymentCardInitiateActivationComponent;
    }());
    PaymentCardInitiateActivationComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PaymentCardInitiateActivationComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    PaymentCardInitiateActivationComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: PaymentCardInitiateActivationComponent, selector: "bb-payment-card-initiate-activation", inputs: { paymentCard: "paymentCard", isInitiateActivationLoading: "isInitiateActivationLoading" }, outputs: { initiateActivation: "initiateActivation" }, ngImport: i0__namespace, template: "<ng-container bbCardsInitiateActivationCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbCardsInitiateActivationCustomizable let-hostRef>\n  <bb-load-button-ui\n    data-role=\"activate-card-button\"\n    color=\"primary\"\n    [block]=\"true\"\n    [isLoading]=\"hostRef.isInitiateActivationLoading\"\n    (click)=\"!hostRef.isInitiateActivationLoading && hostRef.paymentCard?.status === 'INACTIVE' && hostRef.onModalOpen()\"\n    [disabled]=\"hostRef.paymentCard?.status !== 'INACTIVE'\"\n    i18n=\"Activate card button|Activate the card@@card.activation.button\"\n  >Activate card</bb-load-button-ui>\n\n  <bb-modal-ui\n    [isOpen]=\"hostRef.isModalOpen\"\n    [modalOptions]=\"{ centered: true }\"\n    (cancel)=\"hostRef.onModalClose()\"\n  >\n    <div class=\"modal-header\">\n      <div class=\"bb-block bb-block--xs\">\n        <h2 i18n=\"Activate card heading|Activate card header@@card.activationForm.heading\">\n          Activate card\n        </h2>\n      </div>\n    </div>\n    <ng-container bbCardsInitiateActivationFormCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n  </bb-modal-ui>\n</ng-template>\n\n<ng-template bbCardsInitiateActivationFormCustomizable let-hostRef>\n  <form *ngIf=\"hostRef.isModalOpen\" [formGroup]=\"hostRef.form\" (ngSubmit)=\"hostRef.onSubmit(hostRef.form.value)\">\n    <div class=\"modal-body\">\n      <div class=\"row\">\n        <div class=\"col-12 col-sm-6 order-sm-2\">\n          <div data-role=\"modal-card-img\" class=\"bb-block bb-block--md bb-payment-card-back bb-payment-card-icon-dialog\"></div>\n        </div>\n        <div class=\"col-12 col-sm-6\">\n          <h3 i18n=\"Enter your code heading|Heading for enter your code@@card.activationForm.options.heading\">\n            Enter your CVV code\n          </h3>\n          <p\n            class=\"bb-text-support\"\n            i18n=\"Enter your code subtext|Subtext for enter your code@@card.activationForm.options.subtitle\"\n          >To activate your card, please enter your CVV code at the back of your card as shown.</p>\n          <div class=\"row\">\n            <div class=\"col-6\">\n              <bb-input-password-ui\n                data-role=\"card-details-cvv-input\"\n                [autofocus]=\"true\"\n                formControlName=\"token\"\n                label=\"CVV code\"\n                i18n-label='CVV Code heading|Heading for CVV@@card.activationForm.options.heading'\n              ></bb-input-password-ui>\n            </div>\n            <div class=\"col-12\">\n              <bb-input-validation-message-ui [showErrors]=\"!hostRef.isFieldValid('token')\">\n                <span i18n=\"CVV Code validation@@card.activationForm.options.token.error.msg\">\n                  You need to enter the full CVV code.\n                </span>\n              </bb-input-validation-message-ui>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"modal-footer\">\n      <div class=\"bb-button-bar\">\n        <bb-button-ui\n          class=\"bb-button-bar__button\"\n          type=\"submit\"\n          color=\"primary\"\n          [disabled]=\"hostRef.form.invalid\"\n          i18n=\"Activate button|Activation confirm button@@card.activationForm.submitButton\"\n        >Activate</bb-button-ui>\n        <bb-button-ui\n          class=\"bb-button-bar__button\"\n          type=\"button\"\n          color=\"link\"\n          (click)=\"hostRef.onModalClose()\"\n          i18n=\"Cancel button|Cancel card activation@@card.activationForm.cancelButton\"\n        >Cancel</bb-button-ui>\n      </div>\n    </div>\n  </form>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return i1__namespace$1.LoadButtonComponent; }), selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }, { type: i0__namespace.forwardRef(function () { return i2__namespace$1.ModalComponent; }), selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i0__namespace.forwardRef(function () { return i3__namespace.InputPasswordComponent; }), selector: "bb-input-password-ui", inputs: ["placeholder", "maxLength", "minLength", "readonly", "autocomplete", "showVisibilityControl", "showPassword", "visibilityControlLabel", "ariaLabel"], outputs: ["toggleVisibility"] }, { type: i0__namespace.forwardRef(function () { return i4__namespace.InputValidationMessageComponent; }), selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i0__namespace.forwardRef(function () { return i5__namespace.ButtonComponent; }), selector: "bb-button-ui", inputs: ["autofocus", "type", "disabled", "buttonSize", "color", "block"] }], directives: [{ type: i0__namespace.forwardRef(function () { return CardsInitiateActivationCustomizableDirective; }), selector: "[bbCardsInitiateActivationCustomizable]" }, { type: i0__namespace.forwardRef(function () { return CardsInitiateActivationFormCustomizableDirective; }), selector: "[bbCardsInitiateActivationFormCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i2__namespace.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0__namespace.forwardRef(function () { return i9__namespace.ɵNgNoValidate; }), selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i0__namespace.forwardRef(function () { return i9__namespace.NgControlStatusGroup; }), selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i0__namespace.forwardRef(function () { return i9__namespace.FormGroupDirective; }), selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i0__namespace.forwardRef(function () { return i9__namespace.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0__namespace.forwardRef(function () { return i9__namespace.FormControlName; }), selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PaymentCardInitiateActivationComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-payment-card-initiate-activation',
                        templateUrl: './payment-card-initiate-activation.component.html',
                    }]
            }], propDecorators: { paymentCard: [{
                    type: i0.Input
                }], isInitiateActivationLoading: [{
                    type: i0.Input
                }], initiateActivation: [{
                    type: i0.Output
                }] } });
    var CardsInitiateActivationFormCustomizableDirective = /** @class */ (function (_super) {
        __extends(CardsInitiateActivationFormCustomizableDirective, _super);
        function CardsInitiateActivationFormCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return CardsInitiateActivationFormCustomizableDirective;
    }(i1$1.BbTemplate));
    CardsInitiateActivationFormCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardsInitiateActivationFormCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    CardsInitiateActivationFormCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: CardsInitiateActivationFormCustomizableDirective, selector: "[bbCardsInitiateActivationFormCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardsInitiateActivationFormCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbCardsInitiateActivationFormCustomizable]',
                    }]
            }] });
    var CardsInitiateActivationCustomizableDirective = /** @class */ (function (_super) {
        __extends(CardsInitiateActivationCustomizableDirective, _super);
        function CardsInitiateActivationCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return CardsInitiateActivationCustomizableDirective;
    }(i1$1.BbTemplate));
    CardsInitiateActivationCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardsInitiateActivationCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    CardsInitiateActivationCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: CardsInitiateActivationCustomizableDirective, selector: "[bbCardsInitiateActivationCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardsInitiateActivationCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbCardsInitiateActivationCustomizable]',
                    }]
            }] });

    var PaymentCardInitiateReplacementComponent = /** @class */ (function () {
        function PaymentCardInitiateReplacementComponent() {
            /**
             * Whether card replacement has been initiated.
             */
            this.isInitiateReplacementLoading = false;
            /**
             * Event to initiate replacement of payment card;
             */
            this.initiateReplacement = new i0.EventEmitter();
            /**
             * Reference to instance of customizable component.
             */
            this.hostRef = this;
            /**
             * Flag to denote whether the replacement modal is open or not.
             */
            this.isModalOpen = false;
            /**
             * The page of the replacement modal.
             */
            this.modalStep = 0;
            /**
             * Form model for initiating replacement.
             */
            this.form = new i9.FormGroup({
                replacementReason: new i9.FormControl(),
            });
        }
        PaymentCardInitiateReplacementComponent.prototype.ngOnInit = function () {
            if (typeof this.paymentCard === 'undefined') {
                throw new Error("\"paymentCard\" input is required in \"" + this.constructor.name + "\"");
            }
        };
        /**
         * Submit handler for initiating replacement.
         *
         * @param params - form model value
         */
        PaymentCardInitiateReplacementComponent.prototype.onSubmit = function (params) {
            this.isModalOpen = false;
            this.initiateReplacement.emit(params.replacementReason);
        };
        /**
         * Opens the modal (and resets the page to the first page).
         */
        PaymentCardInitiateReplacementComponent.prototype.onModalOpen = function () {
            this.modalStep = 0;
            this.isModalOpen = true;
        };
        /**
         * Closes the modal.
         */
        PaymentCardInitiateReplacementComponent.prototype.onModalClose = function () {
            this.isModalOpen = false;
        };
        return PaymentCardInitiateReplacementComponent;
    }());
    PaymentCardInitiateReplacementComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PaymentCardInitiateReplacementComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    PaymentCardInitiateReplacementComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: PaymentCardInitiateReplacementComponent, selector: "bb-payment-card-initiate-replacement", inputs: { paymentCard: "paymentCard", isInitiateReplacementLoading: "isInitiateReplacementLoading" }, outputs: { initiateReplacement: "initiateReplacement" }, ngImport: i0__namespace, template: "<ng-container bbCardsInitiateReplacementCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbCardsInitiateReplacementCustomizable let-hostRef>\n  <bb-load-button-ui\n    data-role=\"replace-card-button\"\n    color=\"secondary\"\n    aria-label=\"Replace payment card, Replace lost, stolen or damaged cards\"\n    i18n-aria-label=\"Replace payment card@@card.replace.button.aria-label\"\n    [block]=\"true\"\n    [isLoading]=\"hostRef.isInitiateReplacementLoading\"\n    (click)=\"!hostRef.isInitiateReplacementLoading && hostRef.paymentCard?.replacementStatus === 'NOT_UNDER_REPLACEMENT' && hostRef.onModalOpen()\"\n    [disabled]=\"hostRef.paymentCard?.replacementStatus !== 'NOT_UNDER_REPLACEMENT'\"\n    i18n=\"Replace card button|Replace the card@@card.replace.button\"\n  >Replace</bb-load-button-ui>\n\n  <bb-modal-ui\n    [isOpen]=\"hostRef.isModalOpen\"\n    [modalOptions]=\"{ centered: true }\"\n    (cancel)=\"hostRef.onModalClose()\"\n  >\n  <div role=\"dialog\">\n    <div class=\"modal-header\">\n      <div class=\"bb-block\">\n        <h2 i18n=\"Replace card heading|Replace card header@@card.replaceForm.heading\">\n          Replace card\n        </h2>\n        <ng-container *ngIf=\"hostRef.modalStep === 0\">\n          <p\n            class=\"bb-text-support bb-block bb-block--no-margin\"\n            i18n=\"Replace card text|Why you want to replace card@@card.replaceForm.options.subtitle\"\n          >Tell us why you want to replace your card.</p>\n        </ng-container>\n      </div>\n    </div>\n    <ng-container bbCardsInitiateReplacementFormCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n  </div>\n  </bb-modal-ui>\n</ng-template>\n\n<ng-template bbCardsInitiateReplacementFormCustomizable let-hostRef>\n  <form [formGroup]=\"hostRef.form\" (ngSubmit)=\"hostRef.onSubmit(hostRef.form.value)\">\n    <!-- Form step -->\n    <ng-container *ngIf=\"hostRef.modalStep === 0\">\n      <div class=\"modal-body\">\n        <bb-input-radio-group-ui\n          [required]=\"true\"\n          aria-label=\"Tell us why you want to replace your card, select a reason\"\n          i18n-aria-label=\"replacement reason radio group aria-label@@card.replaceForm.radioGroup.options.aria-label\"\n          formControlName=\"replacementReason\"\n        >\n          <bb-input-radio-ui\n            value=\"LOST\"\n            [labelTemplate]=\"cardLostLabel\"\n            aria-label=\"Card lost, Report a missing card and get a new one. Your current card will be locked automatically\"\n            i18n-aria-label=\"Card lost radio button label|Card lost option@@card.replaceForm.options.lost.aria-label\"\n          ></bb-input-radio-ui>\n          <bb-input-radio-ui\n            value=\"STOLEN\"\n            [labelTemplate]=\"cardStolenLabel\"\n            aria-label=\"Card stolen, Report a stolen card and get a new one. Your current card will be locked automatically\"\n            i18n-aria-label=\"Card stolen radio button label|Card stolen option@@card.replaceForm.options.stolen.aria-label\"\n          ></bb-input-radio-ui>\n          <bb-input-radio-ui\n            value=\"BROKEN\"\n            [labelTemplate]=\"cardBrokenLabel\"\n            aria-label=\"Card broken, Report a broken card and get a new one\"\n            i18n-aria-label=\"Card broken radio button label|Card broken option@@card.replaceForm.options.broken.aria-label\"\n          ></bb-input-radio-ui>\n        </bb-input-radio-group-ui>\n\n        <ng-template #cardLostLabel>\n          <strong i18n=\"Card lost radio button label|Card lost option@@card.replaceForm.options.lost\">\n            Card lost\n          </strong>\n          <br>\n          <p\n            class=\"bb-text-support bb-text-default\"\n            i18n=\"Card lost radio button label subtext|Card lost option@@card.replaceForm.options.lost.subtext\"\n          >Report a missing card and get a new one. Your current card will be locked automatically.</p>\n        </ng-template>\n\n        <ng-template #cardStolenLabel>\n          <strong i18n=\"Card stolen radio button label|Card stolen option@@card.replaceForm.options.stolen\">\n            Card stolen\n          </strong>\n          <br>\n          <p\n            class=\"bb-text-support bb-text-default\"\n            i18n=\"Card stolen radio button label subtext|Card stolen option@@card.replaceForm.options.stolen.subtext\"\n          >Report a stolen card and get a new one. Your current card will be locked automatically.</p>\n        </ng-template>\n\n        <ng-template #cardBrokenLabel>\n          <strong i18n=\"Card broken radio button label|Card broken option@@card.replaceForm.options.broken\">\n            Card broken\n          </strong>\n          <br>\n          <p\n            class=\"bb-text-support bb-text-default\"\n            i18n=\"Card broken radio button label subtext|Card broken option@@card.replaceForm.options.broken.subtext\"\n          >Report a broken card and get a new one.</p>\n        </ng-template>\n      </div>\n      <div class=\"modal-footer\">\n        <div class=\"bb-button-bar\">\n          <button\n            bbButton\n            class=\"bb-button-bar__button\"\n            type=\"submit\"\n            color=\"primary\"\n            (click)=\"hostRef.modalStep = 1\"\n            i18n=\"Next button|Next step for replace@@card.replaceForm.nextButton\"\n          >Continue</button>\n          <button\n            bbButton\n            class=\"bb-button-bar__button\"\n            type=\"button\"\n            color=\"link\"\n            (click)=\"hostRef.onModalClose()\"\n            i18n=\"Cancel button|Cancel replace card@@card.replaceForm.cancelButton\"\n          >Cancel</button>\n        </div>\n      </div>\n    </ng-container>\n\n    <!-- Confirm step -->\n    <ng-container *ngIf=\"hostRef.modalStep === 1\">\n      <div class=\"modal-body\" tabindex=\"0\">\n        <h5\n          class=\"bb-text-semi-bold\"\n          i18n=\"Delivery address header|Delivery address@@card.replaceForm.deliveryAddress.heading\"\n          >Delivery address</h5>\n        <p\n          class=\"bb-text-support\"\n          i18n=\"Delivery address subtext|Delivery address@@card.replaceForm.deliveryAddress.subtext\"\n        >The new card will be delivered at your currently registered address.</p>\n      </div>\n      <div class=\"modal-footer\">\n        <div class=\"bb-button-bar\">\n          <button\n            bbButton\n            class=\"bb-button-bar__button\"\n            type=\"submit\"\n            color=\"primary\"\n            i18n=\"Order New button|Order new card Confirm@@card.replaceForm.submitButton\"\n            aria-label=\"order new payment card to the provided delivery address\"\n            i18n-aria-label= \"order new button aria-label@@card.replaceForm.submitButton.aria-label\"\n            [bbFocus]=\"true\"\n            *ngIf=\"hostRef.modalStep === 1\"\n          >Order New</button>\n          <button\n            bbButton\n            class=\"bb-button-bar__button\"\n            type=\"button\"\n            color=\"link\"\n            (click)=\"hostRef.onModalClose()\"\n            i18n=\"Cancel button|Cancel card replace@@card.replaceForm.cancelButton\"\n          >Cancel</button>\n        </div>\n      </div>\n    </ng-container>\n  </form>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return i1__namespace$1.LoadButtonComponent; }), selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }, { type: i0__namespace.forwardRef(function () { return i2__namespace$1.ModalComponent; }), selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i0__namespace.forwardRef(function () { return i3__namespace$1.InputRadioGroupComponent; }), selector: "bb-input-radio-group-ui", inputs: ["horizontal", "preselect", "name", "verticalAlign"] }, { type: i0__namespace.forwardRef(function () { return i3__namespace$1.InputRadioComponent; }), selector: "bb-input-radio-ui", inputs: ["labelTemplate", "labelTemplateContext", "value", "label", "aria-label", "aria-labelledby", "aria-describedby", "role", "aria-activedescendant", "aria-expanded", "aria-invalid", "aria-owns", "disabled"] }], directives: [{ type: i0__namespace.forwardRef(function () { return CardsInitiateReplacementCustomizableDirective; }), selector: "[bbCardsInitiateReplacementCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i2__namespace.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0__namespace.forwardRef(function () { return CardsInitiateReplacementFormCustomizableDirective; }), selector: "[bbCardsInitiateReplacementFormCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i9__namespace.ɵNgNoValidate; }), selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i0__namespace.forwardRef(function () { return i9__namespace.NgControlStatusGroup; }), selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i0__namespace.forwardRef(function () { return i9__namespace.FormGroupDirective; }), selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i0__namespace.forwardRef(function () { return i9__namespace.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0__namespace.forwardRef(function () { return i9__namespace.FormControlName; }), selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i0__namespace.forwardRef(function () { return i9__namespace.RequiredValidator; }), selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i0__namespace.forwardRef(function () { return i5__namespace.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0__namespace.forwardRef(function () { return i7__namespace.FocusDirective; }), selector: "[bbFocus]", inputs: ["bbFocus"], exportAs: ["bbFocus"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PaymentCardInitiateReplacementComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-payment-card-initiate-replacement',
                        templateUrl: './payment-card-initiate-replacement.component.html',
                    }]
            }], propDecorators: { paymentCard: [{
                    type: i0.Input
                }], isInitiateReplacementLoading: [{
                    type: i0.Input
                }], initiateReplacement: [{
                    type: i0.Output
                }] } });
    var CardsInitiateReplacementFormCustomizableDirective = /** @class */ (function (_super) {
        __extends(CardsInitiateReplacementFormCustomizableDirective, _super);
        function CardsInitiateReplacementFormCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return CardsInitiateReplacementFormCustomizableDirective;
    }(i1$1.BbTemplate));
    CardsInitiateReplacementFormCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardsInitiateReplacementFormCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    CardsInitiateReplacementFormCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: CardsInitiateReplacementFormCustomizableDirective, selector: "[bbCardsInitiateReplacementFormCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardsInitiateReplacementFormCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbCardsInitiateReplacementFormCustomizable]',
                    }]
            }] });
    var CardsInitiateReplacementCustomizableDirective = /** @class */ (function (_super) {
        __extends(CardsInitiateReplacementCustomizableDirective, _super);
        function CardsInitiateReplacementCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return CardsInitiateReplacementCustomizableDirective;
    }(i1$1.BbTemplate));
    CardsInitiateReplacementCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardsInitiateReplacementCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    CardsInitiateReplacementCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: CardsInitiateReplacementCustomizableDirective, selector: "[bbCardsInitiateReplacementCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardsInitiateReplacementCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbCardsInitiateReplacementCustomizable]',
                    }]
            }] });

    var PaymentCardLimitComponent = /** @class */ (function () {
        function PaymentCardLimitComponent() {
            /**
             * Event to update limit of payment card;
             */
            // eslint-disable-next-line
            this.updateLimit = new i0.EventEmitter();
            /**
             * Reference to instance of customizable component.
             */
            this.hostRef = this;
        }
        PaymentCardLimitComponent.prototype.onUpdateLimit = function (amount) {
            if (this.limit) {
                this.updateLimit.emit({ amount: amount, cardLimit: this.limit });
            }
        };
        return PaymentCardLimitComponent;
    }());
    PaymentCardLimitComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PaymentCardLimitComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    PaymentCardLimitComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: PaymentCardLimitComponent, selector: "bb-payment-card-limit", inputs: { currency: "currency", limit: "limit" }, outputs: { updateLimit: "updateLimit" }, viewQueries: [{ propertyName: "inputEdit", first: true, predicate: i2$2.InputInlineEditComponent, descendants: true }], ngImport: i0__namespace, template: "<ng-container bbCardsUpdateLimitCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbCardsUpdateLimitCustomizable let-hostRef>\n  <div class=\"row\">\n    <div class=\"col-12 col-sm-8\">\n      <h5 class=\"bb-block--no-margin\" data-role=\"limit-title\">\n        <span>{{hostRef?.limit?.frequency | titlecase }}&nbsp;</span>\n        <span>{{hostRef?.limit?.channel?.name}}</span>\n      </h5>\n      <span class=\"bb-text-support text-small\" data-role=\"limit-description\">{{hostRef?.limit?.channel?.description}}</span>\n    </div>\n\n    <div class=\"col-12 col-sm-4\">\n      <ng-template #amountTemplateRef>\n          <strong class=\"bb-stack__item bb-stack__item--push-right bb-stack__item--spacing-sm\">\n            <bb-amount-ui\n              data-role=\"limit-max-amount\"\n              [currency]=\"hostRef?.currency\" \n              [amount]=\"hostRef.limit?.amount\" \n              [mapCurrency]=\"true\"\n              [decimalPlaces]=\"0\"\n            ></bb-amount-ui>\n          </strong>\n      </ng-template>\n\n      <bb-input-inline-edit-ui \n        [inputText]=\"hostRef.limit?.amount\" \n        [maxValue]=\"hostRef.limit?.maxAmount\"\n        [minValue]=\"hostRef.limit?.minAmount\"\n        pattern=\"[0-9]+\"\n        [inputInlineTemplate]=\"amountTemplateRef\"\n        (accept)=\"hostRef.onUpdateLimit($event)\"\n      ></bb-input-inline-edit-ui> \n\n      <p class=\"bb-text-support bb-text-align-right text-small\" data-role=\"limit-max-allowed-amount\">\n        <span i18n=\"limit max amount@@card.limit.amount.header.maxAmount\">\n          Max:\n        </span>\n        <bb-amount-ui \n          [currency]=\"hostRef?.currency\" \n          [amount]=\"hostRef.limit?.maxAmount\" \n          [mapCurrency]=\"true\"\n          [decimalPlaces]=\"0\"\n        ></bb-amount-ui>\n      </p>\n    </div>\n  </div>\n</ng-template>", components: [{ type: i0__namespace.forwardRef(function () { return i1__namespace$2.AmountComponent; }), selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: i0__namespace.forwardRef(function () { return i2__namespace$2.InputInlineEditComponent; }), selector: "bb-input-inline-edit-ui", inputs: ["state", "canEdit", "hasLoadingState", "inputInlineTemplate", "inputText", "maxLength", "minLength", "maxValue", "minValue", "autofocus", "ariaLabelAccept", "ariaLabelCancel", "ariaLabelEdit", "tooltipAccept", "tooltipCancel", "tooltipEdit", "autocomplete", "pattern", "hint"], outputs: ["stateChange", "cancel", "accept"] }], directives: [{ type: i0__namespace.forwardRef(function () { return CardsUpdateLimitCustomizableDirective; }), selector: "[bbCardsUpdateLimitCustomizable]" }], pipes: { "titlecase": i0__namespace.forwardRef(function () { return i2__namespace.TitleCasePipe; }) } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PaymentCardLimitComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-payment-card-limit',
                        templateUrl: 'payment-card-limit.component.html',
                    }]
            }], propDecorators: { currency: [{
                    type: i0.Input
                }], limit: [{
                    type: i0.Input
                }], updateLimit: [{
                    type: i0.Output
                }], inputEdit: [{
                    type: i0.ViewChild,
                    args: [i2$2.InputInlineEditComponent]
                }] } });
    var CardsUpdateLimitCustomizableDirective = /** @class */ (function (_super) {
        __extends(CardsUpdateLimitCustomizableDirective, _super);
        function CardsUpdateLimitCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return CardsUpdateLimitCustomizableDirective;
    }(i1$1.BbTemplate));
    CardsUpdateLimitCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardsUpdateLimitCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    CardsUpdateLimitCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: CardsUpdateLimitCustomizableDirective, selector: "[bbCardsUpdateLimitCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardsUpdateLimitCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbCardsUpdateLimitCustomizable]',
                    }]
            }] });

    var PaymentCardLimitsComponent = /** @class */ (function () {
        function PaymentCardLimitsComponent() {
            /**
             * Event to update limit of payment card;
             */
            this.updateLimit = new i0.EventEmitter();
            /**
             * Reference to instance of customizable component.
             */
            this.hostRef = this;
        }
        PaymentCardLimitsComponent.prototype.onUpdateLimit = function (limit) {
            if (this.paymentCard) {
                var limits = this.paymentCard.limits;
                if (limits) {
                    this.updateLimit.emit(limits.map(function (item) {
                        var amount = item.amount;
                        if (limit.cardLimit && item.id === limit.cardLimit.id) {
                            amount = +limit.amount;
                        }
                        return {
                            amount: amount,
                            id: item.id,
                            frequency: item.frequency,
                        };
                    }));
                }
            }
        };
        return PaymentCardLimitsComponent;
    }());
    PaymentCardLimitsComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PaymentCardLimitsComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    PaymentCardLimitsComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: PaymentCardLimitsComponent, selector: "bb-payment-card-limits", inputs: { paymentCard: "paymentCard", isLimitsLoading: "isLimitsLoading" }, outputs: { updateLimit: "updateLimit" }, ngImport: i0__namespace, template: "<ng-container bbCardsUpdateLimitsCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n<ng-template bbCardsUpdateLimitsCustomizable let-hostRef>\n  <div class=\"card bb-list\" *ngIf=\"hostRef.paymentCard?.limits\">\n    <div class=\"card-header\">\n      <h2 i18n=\"Limits update heading|update card limits header@@card.updateLimit.heading\">\n        Limits\n      </h2>\n    </div>\n    <div class=\"card-body\">\n      <div class=\"bb-list\" *ngIf=\"!hostRef.isLimitsLoading; else loadingTemplate\">\n        <div class=\"bb-list__item\" *ngFor=\"let limit of hostRef.paymentCard.limits\">\n          <bb-payment-card-limit \n            [limit]=\"limit\"\n            [currency]=\"hostRef.paymentCard.currency\"\n            (updateLimit)=\"hostRef.onUpdateLimit($event)\"\n          ></bb-payment-card-limit>\n        </div>\n      </div>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #loadingTemplate>\n  <bb-loading-indicator-ui loaderSize=\"lg\"></bb-loading-indicator-ui>\n</ng-template>", components: [{ type: i0__namespace.forwardRef(function () { return PaymentCardLimitComponent; }), selector: "bb-payment-card-limit", inputs: ["currency", "limit"], outputs: ["updateLimit"] }, { type: i0__namespace.forwardRef(function () { return i2__namespace$3.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }], directives: [{ type: i0__namespace.forwardRef(function () { return CardsUpdateLimitsCustomizableDirective; }), selector: "[bbCardsUpdateLimitsCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i2__namespace.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0__namespace.forwardRef(function () { return i2__namespace.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PaymentCardLimitsComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-payment-card-limits',
                        templateUrl: './payment-card-limits.component.html',
                    }]
            }], propDecorators: { paymentCard: [{
                    type: i0.Input
                }], isLimitsLoading: [{
                    type: i0.Input
                }], updateLimit: [{
                    type: i0.Output
                }] } });
    var CardsUpdateLimitsCustomizableDirective = /** @class */ (function (_super) {
        __extends(CardsUpdateLimitsCustomizableDirective, _super);
        function CardsUpdateLimitsCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return CardsUpdateLimitsCustomizableDirective;
    }(i1$1.BbTemplate));
    CardsUpdateLimitsCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardsUpdateLimitsCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    CardsUpdateLimitsCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: CardsUpdateLimitsCustomizableDirective, selector: "[bbCardsUpdateLimitsCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardsUpdateLimitsCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbCardsUpdateLimitsCustomizable]',
                    }]
            }] });

    var PaymentCardMultipleErrorStateComponent = /** @class */ (function () {
        function PaymentCardMultipleErrorStateComponent() {
            this.hostRef = this;
        }
        return PaymentCardMultipleErrorStateComponent;
    }());
    PaymentCardMultipleErrorStateComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PaymentCardMultipleErrorStateComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    PaymentCardMultipleErrorStateComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: PaymentCardMultipleErrorStateComponent, selector: "bb-payment-card-multiple-error-state", inputs: { errors: "errors" }, ngImport: i0__namespace, template: "\n<ng-container\n  bbCardsMultipleErrorStateCustomizable\n  [bbHostRef]=\"hostRef\"\n></ng-container>\n\n<ng-template bbCardsMultipleErrorStateCustomizable let-hostRef>\n  <div class=\"card bb-state-container\">\n    <bb-empty-state-ui\n      title=\"Unknown Error\"\n      i18n-title=\"Error state title@@cards.common.errorState.title\"\n      iconModifier=\"error\"\n      iconSize=\"xxl\"\n      iconClasses=\"text-muted\"\n    ></bb-empty-state-ui>\n    <p \n      *ngFor=\"let error of hostRef.errors\" \n      data-role=\"custom-error-state-message\" \n      class=\"bb-empty-state__message bb-empty-state\"\n    >\n      {{error?.message}}\n    </p>\n  </div>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return i1__namespace$3.EmptyStateComponent; }), selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i0__namespace.forwardRef(function () { return CardsMultipleErrorStateCustomizableDirective; }), selector: "[bbCardsMultipleErrorStateCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i2__namespace.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PaymentCardMultipleErrorStateComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-payment-card-multiple-error-state',
                        templateUrl: 'payment-card-multiple-error-state.component.html',
                    }]
            }], propDecorators: { errors: [{
                    type: i0.Input
                }] } });
    var CardsMultipleErrorStateCustomizableDirective = /** @class */ (function (_super) {
        __extends(CardsMultipleErrorStateCustomizableDirective, _super);
        function CardsMultipleErrorStateCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return CardsMultipleErrorStateCustomizableDirective;
    }(i1$1.BbTemplate));
    CardsMultipleErrorStateCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardsMultipleErrorStateCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    CardsMultipleErrorStateCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: CardsMultipleErrorStateCustomizableDirective, selector: "[bbCardsMultipleErrorStateCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardsMultipleErrorStateCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbCardsMultipleErrorStateCustomizable]',
                    }]
            }] });

    /**
     * Enum values to determine whether a reset pin would be done via delivery address or immediate change
     * Reset stands for allowing users to change their pin using the web app
     * Request stands for a delivery letter with the new pin
     */
    exports.ResetPinModeEnum = void 0;
    (function (ResetPinModeEnum) {
        ResetPinModeEnum["Reset"] = "RESET";
        ResetPinModeEnum["Request"] = "REQUEST";
    })(exports.ResetPinModeEnum || (exports.ResetPinModeEnum = {}));

    var PaymentCardResetPinComponent = /** @class */ (function () {
        function PaymentCardResetPinComponent() {
            /**
             * Whether card reset pin has been initiated.
             */
            this.isResetPinLoading = false;
            /**
             * Event for reset pin of payment card;
             */
            this.resetPin = new i0.EventEmitter();
            /**
             * Event for request pin of payment card;
             */
            this.requestPin = new i0.EventEmitter();
            /**
             * Flag to denote whether the reset pin modal is open or not.
             */
            this.isModalOpen = false;
            /**
             * The page of the reset pin modal.
             */
            this.modalStep = 1;
            /**
             * Form model for reset pin.
             */
            this.model = {};
            /**
             * Form model for reset pin.
             */
            this.modelExclude = {};
            /**
             * Reference to instance of customizable component.
             */
            this.hostRef = this;
        }
        /**
         * Opens the modal.
         */
        PaymentCardResetPinComponent.prototype.onModalOpen = function () {
            this.isModalOpen = true;
        };
        /**
         * Submit handler for reset pin.
         */
        PaymentCardResetPinComponent.prototype.onSubmit = function () {
            var model = Object.assign({}, this.model);
            var raw = Object.assign(Object.assign({}, this.model), this.modelExclude);
            if (this.mode === exports.ResetPinModeEnum.Reset) {
                this.resetPin.emit({ raw: raw, model: model });
            }
            else if (this.mode === exports.ResetPinModeEnum.Request) {
                this.requestPin.emit({ raw: raw, model: model });
            }
            this.onModalClose();
        };
        /**
         * Closes the modal.
         */
        PaymentCardResetPinComponent.prototype.onModalClose = function () {
            this.modalStep = 1;
            this.model = {};
            this.modelExclude = {};
            this.isModalOpen = false;
        };
        PaymentCardResetPinComponent.prototype.ngOnInit = function () {
            if (typeof this.paymentCard === 'undefined') {
                throw new Error("\"paymentCard\" input is required in \"" + this.constructor.name + "\"");
            }
        };
        return PaymentCardResetPinComponent;
    }());
    PaymentCardResetPinComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PaymentCardResetPinComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    PaymentCardResetPinComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: PaymentCardResetPinComponent, selector: "bb-payment-card-reset-pin", inputs: { paymentCard: "paymentCard", mode: "mode", isResetPinLoading: "isResetPinLoading" }, outputs: { resetPin: "resetPin", requestPin: "requestPin" }, ngImport: i0__namespace, template: "<ng-container bbCardsResetPinCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbCardsResetPinCustomizable let-hostRef>\n  <bb-load-button-ui\n    [block]=\"true\"\n    color=\"secondary\"\n    [isLoading]=\"hostRef.isResetPinLoading\"\n    (click)=\"hostRef.onModalOpen()\"\n  >\n    <ng-container *ngIf=\"hostRef.mode ==='REQUEST'\" i18n=\"Request PIN button|Request pin@@card.pin.request.button\">Request</ng-container>\n    <ng-container *ngIf=\"hostRef.mode ==='RESET'\" i18n=\"Reset PIN button|Reset pin@@card.pin.reset.button\">Reset</ng-container>\n  </bb-load-button-ui>\n\n  <bb-modal-ui\n    [isOpen]=\"hostRef.isModalOpen\"\n    [modalOptions]=\"{ centered: true }\"\n    (cancel)=\"hostRef.onModalClose()\"\n  >\n    <div class=\"modal-header\">\n      <div class=\"bb-block bb-block--xs\">\n        <ng-container *ngIf=\"hostRef.mode === 'REQUEST'\">\n          <h2 i18n=\"Request PIN card heading|Request pin card header@@card.requestPinForm.heading\">\n            Request new PIN\n          </h2>\n        </ng-container>\n        <ng-container *ngIf=\"hostRef.mode === 'RESET'\">\n          <h2 i18n=\"Reset PIN card heading|Reset pin header@@card.resetPin.heading\">\n            Reset PIN\n          </h2>\n        </ng-container>\n      </div>\n    </div>\n\n    <ng-container \n      bbCardsResetPinFormCustomizable \n      *ngIf=\"hostRef.modalStep === 1 && hostRef.isModalOpen\" \n      [bbHostRef]=\"hostRef\"\n    ></ng-container>\n\n    <ng-container\n      bbCardsResetPinConfirmationCustomizable\n      *ngIf=\"hostRef.modalStep === 2 && hostRef.mode ==='REQUEST' && hostRef.isModalOpen\" \n      [bbHostRef]=\"hostRef\"\n    ></ng-container>\n\n    <ng-container\n      bbCardsResetPinNewPinCustomizable\n      *ngIf=\"(hostRef.modalStep === 2 || hostRef.modalStep === 3) && hostRef.mode ==='RESET' && hostRef.isModalOpen\" \n      [bbHostRef]=\"hostRef\"\n    ></ng-container>\n  </bb-modal-ui>\n</ng-template>\n\n<ng-template bbCardsResetPinFormCustomizable let-hostRef>\n  <!-- Form step for Request and Reset PIN-->\n  <form #pinForm=\"ngForm\" (ngSubmit)=\"hostRef.modalStep = hostRef.modalStep + 1\">\n    <div class=\"modal-body\">\n      <div class=\"row\">\n        <div class=\"col-12 col-sm-6 order-sm-2\">\n          <div data-role=\"modal-card-img\" class=\"bb-block bb-block--md bb-payment-card-back bb-payment-card-icon-dialog\"></div>\n        </div>\n        <div class=\"col-12 col-sm-6\">\n          <h3 i18n=\"Enter your code heading|Heading for enter your code@@card.resetPinForm.options.heading\">\n            Enter your CVV code\n          </h3>\n          <p\n            class=\"bb-text-support\"\n            i18n=\"Enter your code subtext|Subtext for enter your code@@card.resetPinForm.options.subtitle\"\n          >Continue by entering your CVV code found on the back of your card as shown in the image.</p>\n          <div class=\"row\">\n            <div class=\"col-6\">\n              <bb-input-password-ui\n                #cvvToken=\"ngModel\"\n                data-role=\"card-details-cvv-input\"\n                name=\"token\"\n                [autofocus]=\"true\"\n                [(ngModel)]=\"hostRef.model.token\"\n                [required]=\"true\"\n                [minlength]=\"3\"\n                label=\"CVV code\"\n                i18n-label='CVV Code heading|Heading for CVV@@card.resetPinForm.options.heading'\n              ></bb-input-password-ui>\n            </div>\n            <div class=\"col-12\">\n              <bb-input-validation-message-ui [showErrors]=\"!!cvvToken.errors && !!cvvToken.touched\">\n                <span i18n=\"CVV Code validation@@card.resetPinForm.options.token.error.msg\">\n                  You need to enter the full CVV code.\n                </span>\n              </bb-input-validation-message-ui>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"modal-footer\">\n      <div class=\"bb-button-bar\">\n        <bb-button-ui\n          class=\"bb-button-bar__button\"\n          type=\"submit\"\n          color=\"primary\"\n          [disabled]=\"!!pinForm.invalid\"\n          i18n=\"Confirm continue pin button|Reset pin continue button@@card.resetPinForm.submitButton\"\n        >Continue</bb-button-ui>\n        <bb-button-ui\n          class=\"bb-button-bar__button\"\n          type=\"button\"\n          color=\"link\"\n          (click)=\"hostRef.onModalClose()\"\n          i18n=\"Cancel button|Cancel card reset pin@@card.resetPinForm.cancelButton\"\n        >Cancel</bb-button-ui>\n      </div>\n    </div>\n  </form>\n</ng-template>\n\n<ng-template bbCardsResetPinConfirmationCustomizable let-hostRef>\n  <!-- Confirmation step for Request Pin -->\n  <div class=\"modal-body\">\n    <bb-alert-ui \n      modifier=\"warning\" \n      title=\"Your new PIN will be delivered to your address within approximately 3 to 5 working days.\" \n      i18n-title=\"Reset pin alert|Reset pin alert@card.resetPinForm.alert\"\n    >\n    </bb-alert-ui>\n    <div>\n      <h5\n        class=\"bb-text-semi-bold\"\n        i18n=\"Delivery address header|Delivery address@@card.resetPinForm.deliveryAddress.heading\"\n      >Delivery address</h5>\n      <p\n        class=\"bb-text-support\"\n        i18n=\"Delivery address subtext|Delivery address@@card.resetPinForm.deliveryAddress.subtext\"\n      >The card will be delivered at your address currently known by us.</p>\n    </div>\n  </div>\n    \n  <div class=\"modal-footer\">\n    <div class=\"bb-button-bar\">\n      <bb-button-ui\n        class=\"bb-button-bar__button\"\n        color=\"primary\"\n        (click)=\"hostRef.onSubmit()\"\n        i18n=\"Request pin button|Request pin confirm button@@card.requestPinForm.submitButtonConfirm\"\n      >Request new PIN</bb-button-ui>\n      <bb-button-ui\n        class=\"bb-button-bar__button\"\n        type=\"button\"\n        color=\"link\"\n        (click)=\"hostRef.onModalClose()\"\n        i18n=\"Cancel button|Cancel card request pin@@card.requestPinForm.cancelButton\"\n      >Cancel</bb-button-ui>\n    </div>\n    \n  </div>\n</ng-template>\n\n<ng-template bbCardsResetPinNewPinCustomizable let-hostRef>\n  <!-- Confirmation step for Reset Pin -->\n  <form #pinForm=\"ngForm\" (ngSubmit)=\"hostRef.onSubmit()\">\n    <div class=\"modal-body\">\n      <div class=\"row\">\n        <div class=\"bb-block bb-block--md col-12 col-sm-8 order-sm-2\">\n          <div class=\"bb-stack\">\n            <div class=\"bb-stack__item bb-stack__item--push-right\">\n              <bb-payment-card-ui\n                [paymentCard]=\"hostRef.paymentCard\"\n              ></bb-payment-card-ui>\n            </div>\n          </div>\n        </div>\n        <div class=\"col-6 col-sm-4\">\n          <ng-container *ngIf=\"hostRef.modalStep === 2\">\n            <bb-input-password-ui\n              label=\"Enter new PIN\"\n              i18n-label=\"Enter your new pin|Enter new pin code@@card.resetPinForm.enterNewPin\"\n              name=\"pin\"\n              [(ngModel)]=\"hostRef.model.pin\"\n              [autofocus]=\"true\"\n              [required]=\"true\"\n            ></bb-input-password-ui>\n          </ng-container>\n    \n          <ng-container *ngIf=\"hostRef.modalStep === 3\">\n            <bb-input-password-ui\n              label=\"Re-enter new PIN\"\n              i18n-label=\"Re-enter your new pin|Re-enter new pin code@@card.resetPinForm.reEnterNewPin\"\n              name=\"pin2\"\n              [(ngModel)]=\"hostRef.modelExclude.pin2\"\n              [autofocus]=\"true\"\n              [required]=\"true\"\n            ></bb-input-password-ui>\n          </ng-container>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"modal-footer\">\n      <div class=\"bb-button-bar\">\n        <bb-button-ui\n          *ngIf=\"hostRef.modalStep === 2\"\n          class=\"bb-button-bar__button\"\n          color=\"primary\"\n          (click)=\"hostRef.modalStep = hostRef.modalStep + 1\"\n          [disabled]=\"!!pinForm.invalid\"\n          i18n=\"Continue button|Continue card reset pin@@card.resetPinForm.continueButton\"\n        >Continue</bb-button-ui>\n        <bb-button-ui\n          *ngIf=\"hostRef.modalStep === 3\"\n          class=\"bb-button-bar__button\"\n          color=\"primary\"\n          type=\"submit\"\n          [disabled]=\"!!pinForm.invalid\"\n          i18n=\"Confirm reset pin button|Reset pin confirm button@@card.resetPinForm.resetSubmitButton\"\n        >Confirm Reset</bb-button-ui>\n        <bb-button-ui\n          class=\"bb-button-bar__button\"\n          type=\"button\"\n          color=\"link\"\n          (click)=\"hostRef.onModalClose()\"\n          i18n=\"Cancel button|Cancel card reset pin@@card.resetPinForm.cancelButton\"\n        >Cancel</bb-button-ui>\n      </div>\n    </div>\n  </form>  \n</ng-template>\n   ", components: [{ type: i0__namespace.forwardRef(function () { return i1__namespace$1.LoadButtonComponent; }), selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }, { type: i0__namespace.forwardRef(function () { return i2__namespace$1.ModalComponent; }), selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i0__namespace.forwardRef(function () { return i3__namespace.InputPasswordComponent; }), selector: "bb-input-password-ui", inputs: ["placeholder", "maxLength", "minLength", "readonly", "autocomplete", "showVisibilityControl", "showPassword", "visibilityControlLabel", "ariaLabel"], outputs: ["toggleVisibility"] }, { type: i0__namespace.forwardRef(function () { return i4__namespace.InputValidationMessageComponent; }), selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i0__namespace.forwardRef(function () { return i5__namespace.ButtonComponent; }), selector: "bb-button-ui", inputs: ["autofocus", "type", "disabled", "buttonSize", "color", "block"] }, { type: i0__namespace.forwardRef(function () { return i6__namespace.AlertComponent; }), selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i0__namespace.forwardRef(function () { return i7__namespace$1.PaymentCardComponent; }), selector: "bb-payment-card-ui", inputs: ["paymentCard", "paymentCardNumberFormat"] }], directives: [{ type: i0__namespace.forwardRef(function () { return CardsResetPinCustomizableDirective; }), selector: "[bbCardsResetPinCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i2__namespace.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0__namespace.forwardRef(function () { return CardsResetPinFormCustomizableDirective; }), selector: "[bbCardsResetPinFormCustomizable]" }, { type: i0__namespace.forwardRef(function () { return CardsResetPinConfirmationCustomizableDirective; }), selector: "[bbCardsResetPinConfirmationCustomizable]" }, { type: i0__namespace.forwardRef(function () { return CardsResetPinNewPinCustomizableDirective; }), selector: "[bbCardsResetPinNewPinCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i9__namespace.ɵNgNoValidate; }), selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i0__namespace.forwardRef(function () { return i9__namespace.NgControlStatusGroup; }), selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i0__namespace.forwardRef(function () { return i9__namespace.NgForm; }), selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i0__namespace.forwardRef(function () { return i9__namespace.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0__namespace.forwardRef(function () { return i9__namespace.NgModel; }), selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i0__namespace.forwardRef(function () { return i9__namespace.RequiredValidator; }), selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i0__namespace.forwardRef(function () { return i9__namespace.MinLengthValidator; }), selector: "[minlength][formControlName],[minlength][formControl],[minlength][ngModel]", inputs: ["minlength"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PaymentCardResetPinComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-payment-card-reset-pin',
                        templateUrl: 'payment-card-reset-pin.component.html',
                    }]
            }], propDecorators: { paymentCard: [{
                    type: i0.Input
                }], mode: [{
                    type: i0.Input
                }], isResetPinLoading: [{
                    type: i0.Input
                }], resetPin: [{
                    type: i0.Output
                }], requestPin: [{
                    type: i0.Output
                }] } });
    var CardsResetPinCustomizableDirective = /** @class */ (function (_super) {
        __extends(CardsResetPinCustomizableDirective, _super);
        function CardsResetPinCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return CardsResetPinCustomizableDirective;
    }(i1$1.BbTemplate));
    CardsResetPinCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardsResetPinCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    CardsResetPinCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: CardsResetPinCustomizableDirective, selector: "[bbCardsResetPinCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardsResetPinCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbCardsResetPinCustomizable]',
                    }]
            }] });
    var CardsResetPinConfirmationCustomizableDirective = /** @class */ (function (_super) {
        __extends(CardsResetPinConfirmationCustomizableDirective, _super);
        function CardsResetPinConfirmationCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return CardsResetPinConfirmationCustomizableDirective;
    }(i1$1.BbTemplate));
    CardsResetPinConfirmationCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardsResetPinConfirmationCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    CardsResetPinConfirmationCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: CardsResetPinConfirmationCustomizableDirective, selector: "[bbCardsResetPinConfirmationCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardsResetPinConfirmationCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbCardsResetPinConfirmationCustomizable]',
                    }]
            }] });
    var CardsResetPinFormCustomizableDirective = /** @class */ (function (_super) {
        __extends(CardsResetPinFormCustomizableDirective, _super);
        function CardsResetPinFormCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return CardsResetPinFormCustomizableDirective;
    }(i1$1.BbTemplate));
    CardsResetPinFormCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardsResetPinFormCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    CardsResetPinFormCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: CardsResetPinFormCustomizableDirective, selector: "[bbCardsResetPinFormCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardsResetPinFormCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbCardsResetPinFormCustomizable]',
                    }]
            }] });
    var CardsResetPinNewPinCustomizableDirective = /** @class */ (function (_super) {
        __extends(CardsResetPinNewPinCustomizableDirective, _super);
        function CardsResetPinNewPinCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return CardsResetPinNewPinCustomizableDirective;
    }(i1$1.BbTemplate));
    CardsResetPinNewPinCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardsResetPinNewPinCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    CardsResetPinNewPinCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: CardsResetPinNewPinCustomizableDirective, selector: "[bbCardsResetPinNewPinCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardsResetPinNewPinCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbCardsResetPinNewPinCustomizable]',
                    }]
            }] });

    var PaymentCardStateWrapperComponent = /** @class */ (function () {
        function PaymentCardStateWrapperComponent() {
        }
        return PaymentCardStateWrapperComponent;
    }());
    PaymentCardStateWrapperComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PaymentCardStateWrapperComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    PaymentCardStateWrapperComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: PaymentCardStateWrapperComponent, selector: "bb-payment-card-state-wrapper,bb-payment-card-state-wrapper-ui", inputs: { state: "state" }, ngImport: i0__namespace, template: "<div class=\"bb-payment-card-state\">\n  <div class=\"bb-payment-card-state__container\" *ngIf=\"state\">\n    <!-- Inactive -->\n    <ng-container *ngIf=\"state === 'INACTIVE'\">\n      <bb-icon-ui\n        class=\"bb-payment-card-state__icon\"\n        name=\"warning\"\n        size=\"xxl\"\n        color=\"white\"\n      ></bb-icon-ui>\n      <bb-badge-ui\n        text=\"Inactive\"\n        i18n-text=\"Inactive label|Text for the inactive label@@cards.cardState.inactive\"\n        color=\"secondary\"\n      ></bb-badge-ui>\n    </ng-container>\n\n    <!-- Locked -->\n    <ng-container *ngIf=\"state === 'LOCKED'\">\n      <bb-icon-ui\n        class=\"bb-payment-card-state__icon\"\n        name=\"lock\"\n        size=\"xxl\"\n        color=\"white\"\n      ></bb-icon-ui>\n      <bb-badge-ui\n        text=\"Locked\"\n        i18n-text=\"Locked label|Text for the locked label@@cards.cardState.locked\"\n        color=\"secondary\"\n      ></bb-badge-ui>\n    </ng-container>\n\n    <!-- Cancelled -->\n    <ng-container *ngIf=\"state === 'CANCELLED'\">\n      <bb-icon-ui\n        class=\"bb-payment-card-state__icon\"\n        name=\"not-interested\"\n        size=\"xxl\"\n        color=\"white\"\n      ></bb-icon-ui>\n      <bb-badge-ui\n        text=\"Cancelled\"\n        i18n-text=\"Cancelled label|Text for the cancelled label@@cards.cardState.cancelled\"\n        color=\"secondary\"\n      ></bb-badge-ui>\n    </ng-container>\n\n    <!-- Expired -->\n    <ng-container *ngIf=\"state === 'EXPIRED'\">\n      <bb-icon-ui\n        class=\"bb-payment-card-state__icon\"\n        name=\"access-time\"\n        size=\"xxl\"\n        color=\"white\"\n      ></bb-icon-ui>\n      <bb-badge-ui\n        text=\"Expired\"\n        i18n-text=\"Expired label|Text for the expired label@@cards.cardState.expired\"\n        color=\"secondary\"\n      ></bb-badge-ui>\n    </ng-container>\n  </div>\n\n  <div [ngClass]=\"{ 'bb-payment-card-state__overlay': state }\">\n    <ng-content></ng-content>\n  </div>\n</div>\n", components: [{ type: i1__namespace.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i2__namespace$4.BadgeComponent, selector: "bb-badge-ui", inputs: ["color", "text", "abbr", "circle", "wrap", "ariaLabel"] }], directives: [{ type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PaymentCardStateWrapperComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-payment-card-state-wrapper,bb-payment-card-state-wrapper-ui',
                        templateUrl: './payment-card-state-wrapper.component.html',
                    }]
            }], propDecorators: { state: [{
                    type: i0.Input
                }] } });

    /**
     * Possible payment card replacement reasons.
     */
    exports.PaymentCardReplacementReason = void 0;
    (function (PaymentCardReplacementReason) {
        PaymentCardReplacementReason["Lost"] = "LOST";
        PaymentCardReplacementReason["Stolen"] = "STOLEN";
        PaymentCardReplacementReason["Damaged"] = "DAMAGED";
    })(exports.PaymentCardReplacementReason || (exports.PaymentCardReplacementReason = {}));

    /**
     * Possible payment card statuses.
     */
    exports.PaymentCardStatus = void 0;
    (function (PaymentCardStatus) {
        PaymentCardStatus["Active"] = "ACTIVE";
        PaymentCardStatus["Inactive"] = "INACTIVE";
        PaymentCardStatus["Canceled"] = "CANCELED";
        PaymentCardStatus["Expired"] = "EXPIRED";
    })(exports.PaymentCardStatus || (exports.PaymentCardStatus = {}));
    /**
     * Possible payment card replacement statuses.
     */
    exports.PaymentCardReplacementStatus = void 0;
    (function (PaymentCardReplacementStatus) {
        PaymentCardReplacementStatus["NotUnderReplacement"] = "NOT_UNDER_REPLACEMENT";
        PaymentCardReplacementStatus["UnderReplacement"] = "UNDER_REPLACEMENT";
        PaymentCardReplacementStatus["Replaced"] = "REPLACED";
    })(exports.PaymentCardReplacementStatus || (exports.PaymentCardReplacementStatus = {}));
    /**
     * Possible payment card lock statuses.
     */
    exports.PaymentCardLockStatus = void 0;
    (function (PaymentCardLockStatus) {
        PaymentCardLockStatus["Locked"] = "LOCKED";
        PaymentCardLockStatus["Unlocked"] = "UNLOCKED";
    })(exports.PaymentCardLockStatus || (exports.PaymentCardLockStatus = {}));

    var _a;
    /**
     * Timeout for the notification
     */
    var notificationTtl = 5000;
    /**
     * The default mapping of backend values to internal model representation for card status.  This
     * mapping can be overridden per app.
     */
    // prettier-ignore
    var defaultStatusMapping = {
        'Active': exports.PaymentCardStatus.Active,
        'Inactive': exports.PaymentCardStatus.Inactive,
        'Cancelled': exports.PaymentCardStatus.Canceled,
        'Expired': exports.PaymentCardStatus.Expired,
    };
    /**
     * The default mapping of backend values to internal model representation for card replacement
     * status.  This mapping can be overridden per app.
     */
    // prettier-ignore
    var defaultReplacementStatusMapping = {
        'NotUnderReplacement': exports.PaymentCardReplacementStatus.NotUnderReplacement,
        'ReplacementRequested': exports.PaymentCardReplacementStatus.UnderReplacement,
        'ReplacementInTransit': exports.PaymentCardReplacementStatus.UnderReplacement,
        'ReplacementUnderCancellation': exports.PaymentCardReplacementStatus.UnderReplacement,
        'Replaced': exports.PaymentCardReplacementStatus.Replaced,
    };
    /**
     * The mapping of backend values to internal model representation for card lock status.  This
     * mapping cannot be overridden (it is hardwired in the spec).
     */
    // prettier-ignore
    var defaultLockStatusMapping = {
        'LOCKED': exports.PaymentCardLockStatus.Locked,
        'UNLOCKED': exports.PaymentCardLockStatus.Unlocked,
    };
    /**
     * The mapping of backend values to internal model representation for card delivery step status.
     * This mapping cannot be overridden (it is hardwired in the spec).
     */
    // prettier-ignore
    var defaultDeliveryStepStatusMapping = {
        'SUCCESS': exports.PaymentCardDeliveryStepStatus.Success,
        'PENDING': exports.PaymentCardDeliveryStepStatus.Pending,
        'FAILED': exports.PaymentCardDeliveryStepStatus.Failed,
    };
    /**
     * The default mapping of internal model representation to backend values for card replacement
     * reason.  This mapping can be overridden per app.
     */
    var defaultReplacementReasonMapping = (_a = {},
        _a[exports.PaymentCardReplacementReason.Lost] = 'Lost',
        _a[exports.PaymentCardReplacementReason.Stolen] = 'Stolen',
        _a[exports.PaymentCardReplacementReason.Damaged] = 'Damaged',
        _a);
    // prettier-ignore
    var defaultLimitChannelMapping = {
        'ATM': { name: 'withdrawals', description: 'The amount you can withdraw from cash machines' },
        'ONLINE': { name: 'online purchases', description: 'The limit for when using your card for payments online' },
        'POS': {
            name: 'terminal payments',
            description: 'The limit for physical payments with your card (e.g. supermarkets, restaurants, etc.)',
        },
    };
    /**
     * Enumeration of possible widget preferences
     */
    var WidgetProperties = {
        NotificationTtl: 'notificationTtl',
        updateAllLimits: 'bb.card.updateAllLimits',
    };
    var DEFAULT_PAYMENT_CARD_TYPE_GROUP = ['Credit', 'Debit'];
    var filterInputParameters = function (input, prop) { return rxjs.combineLatest([input, prop]).pipe(operators.map(function (_a) {
        var _b = __read(_a, 2), inputVal = _b[0], propVal = _b[1];
        return (inputVal !== undefined ? inputVal : propVal);
    })); };

    /* eslint-disable no-redeclare*/
    exports.CardsBackendError = void 0;
    (function (CardsBackendError) {
        var getMessageFromResponse = function (error) {
            var responseBody = error.error;
            if (Array.isArray(responseBody && responseBody.errors)) {
                return responseBody.errors.map(function (data) {
                    var _a = data.context, context = _a === void 0 ? {} : _a;
                    var message = data.message.replace(/{[_a-zA-Z][_a-zA-Z0-9]*}/g, function (match) {
                        var result = context[match.replace(/[\{\}']+/g, '')];
                        return result !== undefined ? result : match;
                    });
                    return "Error " + error.status + ": " + message;
                });
            }
            else {
                return undefined;
            }
        };
        /**
         * @name fromHttpErrorResponse
         * @param errorResponse The error response
         * @returns An object containing a user-friendly error message
         *
         * @description
         * Parse an HttpErrorResponse and return a CardsBackendError object that can be used to display a
         * user-friendly error message.
         */
        CardsBackendError.fromHttpErrorResponse = function (errorResponse) {
            if (errorResponse.error instanceof ErrorEvent || !errorResponse.status) {
                // Client-side or network error.
                return {
                    message: 'An unexpected error occurred',
                };
            }
            else {
                var error = getMessageFromResponse(errorResponse) || [];
                return {
                    message: error[0] || "Error " + errorResponse.status,
                };
            }
        };
        CardsBackendError.fromHttpErrorsResponse = function (errorResponse) {
            if (errorResponse.error instanceof ErrorEvent || !errorResponse.status) {
                // Client-side or network error.
                return [
                    {
                        message: 'An unexpected error occurred',
                    },
                ];
            }
            else {
                var errors = getMessageFromResponse(errorResponse) || ["Error " + errorResponse.status];
                return errors.map(function (message) { return ({ message: message }); });
            }
        };
    })(exports.CardsBackendError || (exports.CardsBackendError = {}));

    /**
     * InjectionToken for overriding the default `PaymentCardStatusMapping` used to map backend
     * `status` values to internal status values.
     */
    var StatusMappingConfigToken = new i0.InjectionToken('statusMapping injection token');
    /**
     * InjectionToken for overriding the default `PaymentCardReplacementStatusMapping` used to map
     * backend `replacementStatus` values to internal replacement status values.
     */
    var ReplacementStatusMappingConfigToken = new i0.InjectionToken('replacementStatusMapping injection token');
    /**
     * InjectionToken for overriding the default `PaymentCardReplacementReasonMapping` used to map
     * internal replacement reason values to backend `replacementReason` values.
     */
    var ReplacementReasonMappingConfigToken = new i0.InjectionToken('replacementReasonMapping injection token');
    /**
     * InjectionToken for overriding the default `limitChannelMappingConfigToken` used to map
     * internal limit channels to backend values.
     */
    var LimitChannelMappingConfigToken = new i0.InjectionToken('limitChannelMapping injection token');
    /**
     * InjectionToken for overriding the default `CardsBackendDestinations` used to retrieve
     * countries from either a content-manager or database or any other third party.
     */
    var DestinationsServiceConfigToken = new i0.InjectionToken('coutriesService injection token');
    /**
     * @inner
     * @param maskedNumber - Number as returned in the http response
     * @returns Number
     *
     * @description
     * Process number provided by backend, removing whitespace.
     */
    function processNumber(maskedNumber) {
        return maskedNumber.replace(/\s/g, '');
    }
    /**
     * @inner
     * @param status - Status as returned in the http response
     * @param statusMapping - Mapping of http response value to model
     * @returns Mapped payment card status, of the passed status if it cannot be mapped
     *
     * @description
     * Process status provided by backend.
     */
    function processStatus(status, statusMapping) {
        if (statusMapping.hasOwnProperty(status)) {
            return statusMapping[status];
        }
        else {
            return status;
        }
    }
    function processLimitChannel(limitChannel, limitChannelMapping) {
        if (limitChannel === void 0) { limitChannel = ''; }
        if (limitChannelMapping.hasOwnProperty(limitChannel)) {
            return limitChannelMapping[limitChannel];
        }
        else {
            return { name: limitChannel, description: '' };
        }
    }
    /**
     * @inner
     * @param replacementStatus - Replacement status as returned in the http response
     * @param replacementStatusMapping - Mapping of http response value to model
     * @returns Mapped payment card replacement status, or
     * `PaymentCardReplacementStatus.NotUnderReplacement` if the passed status is empty, or the passed
     * status if it cannot be mapped
     *
     * @description
     * Process replacement status provided by backend.
     */
    function processReplacementStatus(replacementStatus, replacementStatusMapping) {
        if (typeof replacementStatus === 'undefined') {
            return exports.PaymentCardReplacementStatus.NotUnderReplacement;
        }
        else if (replacementStatusMapping.hasOwnProperty(replacementStatus)) {
            return replacementStatusMapping[replacementStatus];
        }
        else {
            return replacementStatus;
        }
    }
    /**
     * @inner
     * @param lockStatus - Lock status as returned in the http response
     * @param lockStatusMapping - Mapping of http response value to model
     * @returns Payment card lock status
     *
     * @description
     * Process lock status provided by backend.
     */
    function processLockStatus(lockStatus, lockStatusMapping) {
        if (lockStatus && lockStatusMapping.hasOwnProperty(lockStatus)) {
            return lockStatusMapping[lockStatus];
        }
        else {
            return exports.PaymentCardLockStatus.Unlocked;
        }
    }
    /**
     * @inner
     * @param replacementReason - Replacement reason
     * @param replacementReasonMapping - Mapping of model to http POST value
     * @returns Mapped payment card replacement reason, or the passed replacement reason if it cannot
     * be mapped
     *
     * @description
     * Process replacement reason into value to pass to backend.
     */
    function processReplacementReason(replacementReason, replacementReasonMapping) {
        if (replacementReasonMapping.hasOwnProperty(replacementReason)) {
            return replacementReasonMapping[replacementReason];
        }
        else {
            return replacementReason;
        }
    }
    /**
     * @inner
     * @param deliveryStepStatus - delivery transit step status as returned in the http response
     * @returns Delivery transit step status
     *
     * @description
     * Process delivery transit step status provided by backend.
     */
    function processDeliveryStepStatus(deliveryStepStatus) {
        if (deliveryStepStatus && defaultDeliveryStepStatusMapping.hasOwnProperty(deliveryStepStatus)) {
            return defaultDeliveryStepStatusMapping[deliveryStepStatus];
        }
        else {
            return exports.PaymentCardDeliveryStepStatus.Pending;
        }
    }
    /**
     * @inner
     * @param deliveryStep - delivery transit step object as returned in the http response
     * @returns Delivery transit step
     *
     * @description
     * Process delivery transit step provided by backend.
     */
    function processDeliveryStep(deliveryStep) {
        return Object.assign({ name: deliveryStep.name, status: processDeliveryStepStatus(deliveryStep.status) }, (deliveryStep.stepDateTime ? { stepDateTime: new Date(deliveryStep.stepDateTime) } : {}));
    }
    /**
     * @inner
     * @param delivery - delivery object as returned in the http response
     * @returns Delivery status
     *
     * @description
     * Process delivery status provided by backend.
     */
    function processDeliveryStatus(delivery) {
        return {
            transitSteps: delivery.transitSteps.map(processDeliveryStep),
        };
    }
    /**
     * @inner
     * @param yearMonth - expiration date as returned in the http response
     * @returns Date
     *
     * @description
     * Process expiration date provided by backend.
     */
    function processExpirationDate(yearMonth) {
        return new Date(Number(yearMonth.year), Number(yearMonth.month) - 1);
    }
    /**
     * @name CardsBackendService
     *
     * @description
     * Utility functions for processing data returned by the backend.
     */
    var CardsBackendService = /** @class */ (function () {
        /* eslint-disable */
        function CardsBackendService(statusMapping, replacementStatusMapping, replacementReasonMapping, limitChannelMapping) {
            var _this = this;
            /**
             * @name CardsBackendService#itemToModel
             * @param item - Item as returned in the http response
             * @returns Payment card
             *
             * @description
             * Process payment card provided by backend.
             */
            // eslint-disable-next-line
            this.itemToModel = function (item) { return (Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ id: item.id, name: (item.holder && item.holder.name) || '', number: processNumber(item.maskedNumber), vendor: item.brand, type: item.type, status: processStatus(item.status, _this.statusMapping), replacementStatus: processReplacementStatus(item.replacement && item.replacement.status, _this.replacementStatusMapping), lockStatus: processLockStatus(item.lockStatus, _this.lockStatusMapping), expirationDate: processExpirationDate(item.expiryDate || { year: '', month: '' }), cardName: item.name || '' }, (item.delivery ? { deliveryStatus: processDeliveryStatus(item.delivery) } : {})), (item.subType ? { subType: item.subType } : {})), (item.currency ? { currency: item.currency } : {})), (item.additions ? { additions: item.additions } : {})), (item.limits
                ? {
                    limits: item.limits.map(function (limit) { return (Object.assign(Object.assign({}, limit), { channel: processLimitChannel(limit.channel, _this.limitChannelMapping) })); }),
                }
                : {}))); };
            this.travelNoticeToModel = function (item, paymentCards) { return ({
                id: item.id,
                cards: item.cardIds
                    .map(function (cardId) { return paymentCards.find(function (card) { return card.id === cardId; }); })
                    .filter(function (card) { return card !== undefined; }),
                departureDate: new Date(item.departureDate),
                arrivalDate: new Date(item.arrivalDate),
                destinations: item.destinations,
                contact: item.contact,
            }); };
            /**
             * @name CardsBackendService#getLockStatusUpdate
             * @param lockStatus - New lock status
             * @returns Update object to pass to `postCardsLockStatusRecordById` data module function
             *
             * @description
             * Make lock status update object to pass to backend.
             */
            this.getLockStatusUpdate = function (lockStatus) { return ({
                lockStatus: lockStatus === exports.PaymentCardLockStatus.Unlocked ? 'UNLOCKED' : 'LOCKED',
            }); };
            /**
             * @name CardsBackendService#getReplacementUpdate
             * @param replacementReason - Reason for the replacement
             * @returns Update object to pass to `postCardsReplacementRecordById` data module function
             *
             * @description
             * Make replacement update object to pass to backend.
             */
            this.getReplacementUpdate = function (replacementReason) { return ({
                replacementReason: processReplacementReason(replacementReason, _this.replacementReasonMapping),
            }); };
            this.statusMapping = Object.assign(Object.assign({}, defaultStatusMapping), statusMapping);
            this.replacementStatusMapping = Object.assign(Object.assign({}, defaultReplacementStatusMapping), replacementStatusMapping);
            this.lockStatusMapping = Object.assign({}, defaultLockStatusMapping);
            this.replacementReasonMapping = Object.assign(Object.assign({}, defaultReplacementReasonMapping), replacementReasonMapping);
            this.limitChannelMapping = Object.assign(Object.assign({}, defaultLimitChannelMapping), limitChannelMapping);
        }
        /**
         * @name CardsBackendService#itemListToModel
         * @param items - List of card items as returned in the http response
         * @returns Array of payment cards
         *
         * @description
         * Process data returned by the backend.
         */
        CardsBackendService.prototype.itemListToModel = function (items) {
            return (items || []).map(this.itemToModel);
        };
        /**
         * @name CardsBackendService#parseError
         * @param error - The error response
         * @returns An object containing a user-friendly error message
         *
         * @description
         * Parse an HttpErrorResponse and return a CardsBackendError object that can be used to display a
         * user-friendly error message.
         */
        CardsBackendService.prototype.parseError = function (error) {
            return exports.CardsBackendError.fromHttpErrorsResponse(error);
        };
        return CardsBackendService;
    }());
    CardsBackendService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardsBackendService, deps: [{ token: StatusMappingConfigToken, optional: true }, { token: ReplacementStatusMappingConfigToken, optional: true }, { token: ReplacementReasonMappingConfigToken, optional: true }, { token: LimitChannelMappingConfigToken, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    CardsBackendService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardsBackendService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardsBackendService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () {
            return [{ type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [StatusMappingConfigToken]
                        }] }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [ReplacementStatusMappingConfigToken]
                        }] }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [ReplacementReasonMappingConfigToken]
                        }] }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [LimitChannelMappingConfigToken]
                        }] }];
        } });

    var initialGetParams = {};
    var deepEqual = function (x, y) { return x && y && typeof x === 'object' && typeof x === typeof y
        ? Object.keys(x).length === Object.keys(y).length && Object.keys(x).every(function (key) { return deepEqual(x[key], y[key]); })
        : x === y; };
    var cacheRequest$1 = function (request) { return function (source) { return source.pipe(operators.switchMap(request), operators.publishReplay(1), operators.refCount()); }; };
    /**
     * @name CardsService
     *
     * @description
     * Service for retrieving cards from the backend.
     */
    var CardsService = /** @class */ (function () {
        function CardsService(cardsDataHttpService, cardsBackendService, cardsTravelNotice) {
            var _this = this;
            this.cardsDataHttpService = cardsDataHttpService;
            this.cardsBackendService = cardsBackendService;
            this.cardsTravelNotice = cardsTravelNotice;
            this.getParams = new rxjs.BehaviorSubject(initialGetParams);
            this.paymentCards = this.getParams.pipe(operators.distinctUntilChanged(deepEqual), cacheRequest$1(function (getParams) { return _this.cardsDataHttpService.getCards(getParams, 'response').pipe(operators.map(function (response) { return _this.cardsBackendService.itemListToModel(response.body); }), operators.catchError(function (error) {
                throw _this.cardsBackendService.parseError(error);
            })); }));
            this.travelNotice = this.cardsTravelNotice.getTravelNotices('response').pipe(operators.distinctUntilChanged(deepEqual), operators.map(function (response) { return (response.body === null ? [] : response.body); }), operators.catchError(function (error) {
                throw _this.cardsBackendService.parseError(error);
            }));
        }
        /**
         * @name CardsService#getCards
         * @returns The (single-instance) observable of payment cards retrieved from the backend.
         *
         * @description
         * Returns the (single-instance) observable of payment cards retrieved from the backend.
         */
        CardsService.prototype.getCards = function () {
            return this.paymentCards;
        };
        CardsService.prototype.setParameters = function (typesParams) {
            typesParams
                .pipe(operators.map(function (types) { return ({
                types: types,
            }); }))
                .subscribe(this.getParams);
        };
        /**
         * @name CardsService#updateLockStatus
         * @returns An observable of the payment card with updated lock status.
         *
         * @description
         * Calls the backend to change the lock status and returns an observable of updated payment card
         * returned in the response.  If that response is empty, the existing payment card with the
         * updated lock status is returned.
         */
        CardsService.prototype.updateLockStatus = function (card, lockStatus) {
            var _this = this;
            var body = this.cardsBackendService.getLockStatusUpdate(lockStatus);
            return this.cardsDataHttpService.updateLockStatus({ id: card.id, lockStatusPost: body }, 'response').pipe(operators.map(function (response) { return response.body === null
                ? Object.assign(Object.assign({}, card), { lockStatus: lockStatus }) : _this.cardsBackendService.itemToModel(response.body); }), operators.catchError(function (error) {
                throw _this.cardsBackendService.parseError(error);
            }));
        };
        /**
         * @name CardsService#initiateReplacement
         * @returns An observable of the payment card with updated replacement status.
         *
         * @description
         * Calls the backend to initiate replacement and returns an observable of the updated payment
         * card returned in the response.  If the response is empty, the existing payment card with
         * replacement status set to `UNDER_REPLACEMENT` is returned.
         */
        CardsService.prototype.initiateReplacement = function (card, replacementReason) {
            var _this = this;
            var body = this.cardsBackendService.getReplacementUpdate(replacementReason);
            return this.cardsDataHttpService.requestReplacement({ id: card.id, requestReplacementPost: body }, 'response').pipe(operators.map(function (response) { return response.body === null
                ? Object.assign(Object.assign({}, card), { replacementStatus: exports.PaymentCardReplacementStatus.UnderReplacement }) : _this.cardsBackendService.itemToModel(response.body); }), operators.catchError(function (error) {
                throw _this.cardsBackendService.parseError(error);
            }));
        };
        /**
         * @name CardsService#initiateActivation
         * @returns An observable of the payment card with updated status.
         *
         * @description
         * Calls the backend to activate a payment card and returns an observable of the updated payment
         * card returned in the response.  If the response is empty, the existing payment card with
         * status set to `ACTIVE` is returned.
         */
        CardsService.prototype.initiateActivation = function (card, token) {
            var _this = this;
            var body = { token: token };
            return this.cardsDataHttpService.activate({ id: card.id, activatePost: body }, 'response').pipe(operators.map(function (response) { return response.body === null
                ? Object.assign(Object.assign({}, card), { status: exports.PaymentCardStatus.Active }) : _this.cardsBackendService.itemToModel(response.body); }), operators.catchError(function (error) {
                throw _this.cardsBackendService.parseError(error);
            }));
        };
        /**
         * @name CardsService#updateLimit
         * @returns An observable of the payment card with updated limits.
         *
         * @description
         * Calls the backend to update a payment card and returns an observable of the updated payment
         * card returned in the response.  If the response is empty, the existing payment card with
         * limits updated is returned.
         */
        CardsService.prototype.updateLimit = function (card, limit, updateAllLimits) {
            var _this = this;
            var limitPayload = updateAllLimits
                ? limit
                : limit.filter(function (newLimitItem, index) { var _a; return newLimitItem.amount !== ((_a = card.limits) === null || _a === void 0 ? void 0 : _a[index].amount); });
            return this.cardsDataHttpService.changeLimits({ id: card.id, changeLimitsPostItem: limitPayload }, 'response').pipe(operators.map(function (response) {
                var limits = card.limits &&
                    card.limits.map(function (item, index) { return (Object.assign(Object.assign({}, item), { amount: limit[index].amount })); });
                return response.body === null
                    ? Object.assign(Object.assign({}, card), { limits: limits }) : _this.cardsBackendService.itemToModel(response.body);
            }), operators.catchError(function (error) {
                throw _this.cardsBackendService.parseError(error);
            }));
        };
        CardsService.prototype.resetPIN = function (card, paymentCardResetPin) {
            var _this = this;
            return this.cardsDataHttpService.resetPin({ id: card.id, resetPinPost: paymentCardResetPin }, 'response').pipe(operators.map(function (response) { return response.body === null
                ? Object.assign({}, card) : _this.cardsBackendService.itemToModel(response.body); }), operators.catchError(function (error) {
                throw _this.cardsBackendService.parseError(error);
            }));
        };
        CardsService.prototype.requestPIN = function (card, paymentCardResetPin) {
            var _this = this;
            return this.cardsDataHttpService.requestPin({ id: card.id, requestPinPost: paymentCardResetPin }, 'response').pipe(operators.map(function (response) { return response.body === null
                ? Object.assign({}, card) : _this.cardsBackendService.itemToModel(response.body); }), operators.catchError(function (error) {
                throw _this.cardsBackendService.parseError(error);
            }));
        };
        /**
         *  Modified - added a observable to only respond with active cards.
         *
         * @returns Observable with all travel notices and payment cards with
         * status active
         */
        CardsService.prototype.getTravelNotice = function () {
            var _this = this;
            var activeCards = this.paymentCards.pipe(operators.map(function (cards) { return cards.filter(function (card) { return card.status === exports.PaymentCardStatus.Active; }); }));
            return rxjs.combineLatest([activeCards, this.travelNotice]).pipe(operators.map(function (_b) {
                var _c = __read(_b, 2), paymentCards = _c[0], travelNotice = _c[1];
                return ({
                    travelNoticeList: travelNotice.map(function (item) { return _this.cardsBackendService.travelNoticeToModel(item, paymentCards); }),
                    paymentCards: paymentCards,
                });
            }));
        };
        CardsService.prototype.postTravelNotice = function (travelNoticeItem) {
            var cards = travelNoticeItem.cards, otherTravelNoticeProperties = __rest(travelNoticeItem, ["cards"]);
            var travelNoticeData = Object.assign(Object.assign({}, otherTravelNoticeProperties), { cardIds: cards.map(function (item) { return item.id; }) });
            return this.cardsTravelNotice.createTravelNotice({ travelNotice: travelNoticeData });
        };
        CardsService.prototype.deleteTravelNotice = function (travelNoticeItem) {
            var id = travelNoticeItem.id;
            if (!id)
                throw new Error('Error no matching id');
            return this.cardsTravelNotice.deleteTravelNoticeById({ id: id }, 'response');
        };
        CardsService.prototype.ngOnDestroy = function () {
            this.getParams.complete();
        };
        return CardsService;
    }());
    CardsService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardsService, deps: [{ token: i1__namespace$4.CardsHttpService }, { token: CardsBackendService }, { token: i1__namespace$4.TravelNoticesHttpService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    CardsService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardsService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardsService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace$4.CardsHttpService }, { type: CardsBackendService }, { type: i1__namespace$4.TravelNoticesHttpService }]; } });

    var modules = [
        i2$4.BadgeModule,
        i5.ButtonModule,
        i1.IconModule,
        i3.InputPasswordModule,
        i3$1.InputRadioGroupModule,
        i1$2.LoadButtonModule,
        i2$1.ModalModule,
        i2$2.InputInlineEditModule,
        i4.InputValidationMessageModule,
        i6.AlertModule,
        i7$1.PaymentCardModule,
        i1$3.AmountModule,
        i7.FocusModule,
        i1$4.EmptyStateModule,
        i2$3.LoadingIndicatorModule,
    ];
    var components = [
        PaymentCardMultipleErrorStateComponent,
        PaymentCardStateWrapperComponent,
        PaymentCardInitiateReplacementComponent,
        PaymentCardInitiateActivationComponent,
        PaymentCardDeliveryStatusComponent,
        DeliveryTrackerComponent,
        PaymentCardLimitsComponent,
        PaymentCardLimitComponent,
        PaymentCardResetPinComponent,
        AccessibilityKeyboardDirective,
    ];
    var directives = [
        CardsInitiateActivationCustomizableDirective,
        CardsInitiateActivationFormCustomizableDirective,
        CardsInitiateReplacementCustomizableDirective,
        CardsInitiateReplacementFormCustomizableDirective,
        CardsDeliveryStatusCustomizableDirective,
        CardsUpdateLimitsCustomizableDirective,
        CardsResetPinCustomizableDirective,
        CardsResetPinFormCustomizableDirective,
        CardsResetPinConfirmationCustomizableDirective,
        CardsResetPinNewPinCustomizableDirective,
        CardsUpdateLimitCustomizableDirective,
        CardsMultipleErrorStateCustomizableDirective,
    ];
    var services = [CardsBackendService, CardsService];
    var CardsCommonModule = /** @class */ (function () {
        function CardsCommonModule() {
        }
        return CardsCommonModule;
    }());
    CardsCommonModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardsCommonModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    CardsCommonModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardsCommonModule, declarations: [PaymentCardMultipleErrorStateComponent,
            PaymentCardStateWrapperComponent,
            PaymentCardInitiateReplacementComponent,
            PaymentCardInitiateActivationComponent,
            PaymentCardDeliveryStatusComponent,
            DeliveryTrackerComponent,
            PaymentCardLimitsComponent,
            PaymentCardLimitComponent,
            PaymentCardResetPinComponent,
            AccessibilityKeyboardDirective, CardsInitiateActivationCustomizableDirective,
            CardsInitiateActivationFormCustomizableDirective,
            CardsInitiateReplacementCustomizableDirective,
            CardsInitiateReplacementFormCustomizableDirective,
            CardsDeliveryStatusCustomizableDirective,
            CardsUpdateLimitsCustomizableDirective,
            CardsResetPinCustomizableDirective,
            CardsResetPinFormCustomizableDirective,
            CardsResetPinConfirmationCustomizableDirective,
            CardsResetPinNewPinCustomizableDirective,
            CardsUpdateLimitCustomizableDirective,
            CardsMultipleErrorStateCustomizableDirective], imports: [i2.CommonModule, i9.ReactiveFormsModule, i9.FormsModule, i2$4.BadgeModule,
            i5.ButtonModule,
            i1.IconModule,
            i3.InputPasswordModule,
            i3$1.InputRadioGroupModule,
            i1$2.LoadButtonModule,
            i2$1.ModalModule,
            i2$2.InputInlineEditModule,
            i4.InputValidationMessageModule,
            i6.AlertModule,
            i7$1.PaymentCardModule,
            i1$3.AmountModule,
            i7.FocusModule,
            i1$4.EmptyStateModule,
            i2$3.LoadingIndicatorModule], exports: [i2$4.BadgeModule,
            i5.ButtonModule,
            i1.IconModule,
            i3.InputPasswordModule,
            i3$1.InputRadioGroupModule,
            i1$2.LoadButtonModule,
            i2$1.ModalModule,
            i2$2.InputInlineEditModule,
            i4.InputValidationMessageModule,
            i6.AlertModule,
            i7$1.PaymentCardModule,
            i1$3.AmountModule,
            i7.FocusModule,
            i1$4.EmptyStateModule,
            i2$3.LoadingIndicatorModule, PaymentCardMultipleErrorStateComponent,
            PaymentCardStateWrapperComponent,
            PaymentCardInitiateReplacementComponent,
            PaymentCardInitiateActivationComponent,
            PaymentCardDeliveryStatusComponent,
            DeliveryTrackerComponent,
            PaymentCardLimitsComponent,
            PaymentCardLimitComponent,
            PaymentCardResetPinComponent,
            AccessibilityKeyboardDirective, CardsInitiateActivationCustomizableDirective,
            CardsInitiateActivationFormCustomizableDirective,
            CardsInitiateReplacementCustomizableDirective,
            CardsInitiateReplacementFormCustomizableDirective,
            CardsDeliveryStatusCustomizableDirective,
            CardsUpdateLimitsCustomizableDirective,
            CardsResetPinCustomizableDirective,
            CardsResetPinFormCustomizableDirective,
            CardsResetPinConfirmationCustomizableDirective,
            CardsResetPinNewPinCustomizableDirective,
            CardsUpdateLimitCustomizableDirective,
            CardsMultipleErrorStateCustomizableDirective] });
    CardsCommonModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardsCommonModule, providers: __spreadArray([], __read(services)), imports: [__spreadArray([i2.CommonModule, i9.ReactiveFormsModule, i9.FormsModule], __read(modules)), i2$4.BadgeModule,
            i5.ButtonModule,
            i1.IconModule,
            i3.InputPasswordModule,
            i3$1.InputRadioGroupModule,
            i1$2.LoadButtonModule,
            i2$1.ModalModule,
            i2$2.InputInlineEditModule,
            i4.InputValidationMessageModule,
            i6.AlertModule,
            i7$1.PaymentCardModule,
            i1$3.AmountModule,
            i7.FocusModule,
            i1$4.EmptyStateModule,
            i2$3.LoadingIndicatorModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardsCommonModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: __spreadArray([i2.CommonModule, i9.ReactiveFormsModule, i9.FormsModule], __read(modules)),
                        providers: __spreadArray([], __read(services)),
                        declarations: __spreadArray(__spreadArray([], __read(components)), __read(directives)),
                        exports: __spreadArray(__spreadArray(__spreadArray([], __read(modules)), __read(components)), __read(directives)),
                    }]
            }] });

    var baseNotification = {
        header: '',
        message: '',
        dismissible: true,
        modifier: 'success',
    };
    // eslint-disable-next-line
    var PaymentCardContainerBase = /** @class */ (function () {
        function PaymentCardContainerBase(cardsService, cd, notificationService) {
            this.cardsService = cardsService;
            this.cd = cd;
            this.notificationService = notificationService;
            /**
             * Notification messages translations
             */
            this.localizations = {
                activationErrorHeader: '',
                activationErrorMessage: '',
                activationSuccessHeader: '',
                lockErrorHeader: '',
                lockErrorMessage: '',
                lockSuccessHeader: '',
                lockSuccessMessage: '',
                replacementErrorHeader: '',
                replacementErrorMessage: '',
                replacementSuccessHeader: '',
                replacementSuccessMessage: '',
                requestNewPinSuccessMessage: '',
                requestPinErrorMessage: '',
                resetPinSuccessMessage: '',
                resetPinErrorMessage: '',
                resetInvalidPinMessage: '',
                unlockErrorHeader: '',
                unlockErrorMessage: '',
                unlockSuccessHeader: '',
                unlockSuccessMessage: '',
                updateLimitErrorHeader: '',
                updateLimitErrorMessage: '',
                updateLimitSuccessHeader: '',
                updateLimitSuccessMessage: '',
            };
            /**
             * Event emitter for selecting a card.
             */
            this.selectCard = new i0.EventEmitter();
            this.isLockLoading = false;
            this.isInitiateReplacementLoading = false;
            this.isInitiateActivationLoading = false;
            this.isResetPinLoading = false;
            this.isLimitsLoading = false;
        }
        PaymentCardContainerBase.prototype.showNotification = function (notification) {
            this.notificationService.showNotification(Object.assign(Object.assign(Object.assign({}, baseNotification), { ttl: this.notificationTtl }), notification));
        };
        PaymentCardContainerBase.prototype.ngOnInit = function () {
            if (typeof this.paymentCard === 'undefined') {
                throw new Error("\"paymentCard\" input is required in \"" + this.constructor.name + "\"");
            }
        };
        PaymentCardContainerBase.prototype.onUpdateLockStatus = function (lockStatus) {
            var _this = this;
            if (typeof this.paymentCard === 'undefined') {
                return;
            }
            this.isLockLoading = true;
            var onUpdateLockStatusSuccess = function (paymentCard) {
                if (typeof _this.paymentCard !== 'undefined') {
                    _this.paymentCard = paymentCard;
                    var header = lockStatus === exports.PaymentCardLockStatus.Locked
                        ? _this.localizations.lockSuccessHeader
                        : _this.localizations.unlockSuccessHeader;
                    var message = lockStatus === exports.PaymentCardLockStatus.Locked
                        ? _this.localizations.lockSuccessMessage
                        : _this.localizations.unlockSuccessMessage;
                    _this.showNotification({
                        header: header,
                        message: message,
                    });
                }
            };
            var onUpdateLockStatusError = function () {
                if (typeof _this.paymentCard !== 'undefined') {
                    var header = lockStatus === exports.PaymentCardLockStatus.Locked
                        ? _this.localizations.lockErrorHeader
                        : _this.localizations.unlockErrorHeader;
                    var message = lockStatus === exports.PaymentCardLockStatus.Locked
                        ? _this.localizations.lockErrorMessage
                        : _this.localizations.unlockErrorMessage;
                    _this.showNotification({
                        header: header,
                        message: message,
                        modifier: 'error',
                    });
                }
                _this.isLockLoading = false;
                _this.cd.markForCheck();
            };
            var onUpdateLockStatusComplete = function () {
                _this.isLockLoading = false;
                _this.cd.markForCheck();
            };
            this.cardsService
                .updateLockStatus(this.paymentCard, lockStatus)
                .subscribe(onUpdateLockStatusSuccess, onUpdateLockStatusError, onUpdateLockStatusComplete);
        };
        PaymentCardContainerBase.prototype.onInitiateReplacement = function (reason) {
            var _this = this;
            if (typeof this.paymentCard === 'undefined') {
                return;
            }
            this.isInitiateReplacementLoading = true;
            var onInitiateReplacementSuccess = function (paymentCard) {
                if (typeof _this.paymentCard !== 'undefined') {
                    _this.paymentCard = paymentCard;
                    _this.showNotification({
                        header: _this.localizations.replacementSuccessHeader,
                        message: _this.localizations.replacementSuccessMessage,
                    });
                }
            };
            var onInitiateReplacementError = function () {
                if (typeof _this.paymentCard !== 'undefined') {
                    _this.showNotification({
                        header: _this.localizations.replacementErrorHeader,
                        message: _this.localizations.replacementErrorMessage,
                        modifier: 'error',
                    });
                }
                _this.isInitiateReplacementLoading = false;
                _this.cd.markForCheck();
            };
            var onInitiateReplacementComplete = function () {
                _this.isInitiateReplacementLoading = false;
                _this.cd.markForCheck();
            };
            this.cardsService
                .initiateReplacement(this.paymentCard, reason)
                .subscribe(onInitiateReplacementSuccess, onInitiateReplacementError, onInitiateReplacementComplete);
        };
        PaymentCardContainerBase.prototype.onInitiateActivation = function (token) {
            var _this = this;
            if (typeof this.paymentCard === 'undefined') {
                return;
            }
            this.isInitiateActivationLoading = true;
            var onInitiateActivationSuccess = function (paymentCard) {
                if (typeof _this.paymentCard !== 'undefined') {
                    _this.paymentCard = paymentCard;
                    _this.showNotification({
                        header: _this.localizations.activationSuccessHeader,
                    });
                }
            };
            var onInitiateActivationError = function () {
                if (typeof _this.paymentCard !== 'undefined') {
                    _this.showNotification({
                        header: _this.localizations.activationErrorHeader,
                        message: _this.localizations.activationErrorMessage,
                        modifier: 'error',
                    });
                }
                _this.isInitiateActivationLoading = false;
                _this.cd.markForCheck();
            };
            var onInitiateActivationComplete = function () {
                _this.isInitiateActivationLoading = false;
                _this.cd.markForCheck();
            };
            this.cardsService
                .initiateActivation(this.paymentCard, token)
                .subscribe(onInitiateActivationSuccess, onInitiateActivationError, onInitiateActivationComplete);
        };
        PaymentCardContainerBase.prototype.onUpdateLimit = function (limit) {
            var _this = this;
            if (typeof this.paymentCard === 'undefined') {
                return;
            }
            this.isLimitsLoading = true;
            var onUpdateLimitSuccess = function (paymentCard) {
                if (typeof _this.paymentCard !== 'undefined') {
                    _this.paymentCard = paymentCard;
                    _this.showNotification({
                        header: _this.localizations.updateLimitSuccessHeader,
                        message: _this.localizations.updateLimitSuccessMessage,
                    });
                }
            };
            var onUpdateLimitError = function () {
                if (typeof _this.paymentCard !== 'undefined') {
                    _this.notificationService.showNotification(Object.assign(Object.assign({}, baseNotification), { header: _this.localizations.updateLimitErrorHeader, message: _this.localizations.updateLimitErrorMessage, modifier: 'error' }));
                }
                _this.isLimitsLoading = false;
                _this.cd.markForCheck();
            };
            var onUpdateLimitComplete = function () {
                _this.isLimitsLoading = false;
                _this.cd.markForCheck();
            };
            this.cardsService
                .updateLimit(this.paymentCard, limit, this.updateAllLimits)
                .subscribe(onUpdateLimitSuccess, onUpdateLimitError, onUpdateLimitComplete);
        };
        PaymentCardContainerBase.prototype.onResetPin = function (token) {
            var _this = this;
            if (typeof this.paymentCard === 'undefined') {
                return;
            }
            this.isResetPinLoading = true;
            if (token.raw.pin2 !== undefined && token.raw.pin !== token.raw.pin2) {
                this.isResetPinLoading = false;
                this.showNotification({
                    message: this.localizations.resetInvalidPinMessage,
                    modifier: 'error',
                });
                return;
            }
            var onResetPinSuccess = function (paymentCard) {
                if (typeof _this.paymentCard !== 'undefined') {
                    _this.paymentCard = paymentCard;
                    _this.showNotification({
                        message: _this.localizations.resetPinSuccessMessage,
                    });
                }
            };
            var onResetPinError = function () {
                if (typeof _this.paymentCard !== 'undefined') {
                    _this.showNotification({
                        message: _this.localizations.resetPinErrorMessage,
                        modifier: 'error',
                    });
                }
                _this.isResetPinLoading = false;
                _this.cd.markForCheck();
            };
            var onResetPinComplete = function () {
                _this.isResetPinLoading = false;
                _this.cd.markForCheck();
            };
            this.cardsService
                .resetPIN(this.paymentCard, token.model)
                .subscribe(onResetPinSuccess, onResetPinError, onResetPinComplete);
        };
        PaymentCardContainerBase.prototype.onRequestPin = function (token) {
            var _this = this;
            if (typeof this.paymentCard === 'undefined') {
                return;
            }
            this.isResetPinLoading = true;
            var onRequestPinSuccess = function (paymentCard) {
                if (typeof _this.paymentCard !== 'undefined') {
                    _this.paymentCard = paymentCard;
                    _this.showNotification({
                        message: _this.localizations.requestNewPinSuccessMessage,
                    });
                }
            };
            var onRequestPinError = function () {
                if (typeof _this.paymentCard !== 'undefined') {
                    _this.showNotification({
                        message: _this.localizations.requestPinErrorMessage,
                        modifier: 'error',
                    });
                }
                _this.isResetPinLoading = false;
                _this.cd.markForCheck();
            };
            var onRequestPinComplete = function () {
                _this.isResetPinLoading = false;
                _this.cd.markForCheck();
            };
            this.cardsService
                .requestPIN(this.paymentCard, token.model)
                .subscribe(onRequestPinSuccess, onRequestPinError, onRequestPinComplete);
        };
        PaymentCardContainerBase.prototype.onOpenDetails = function () {
            if (typeof this.paymentCard !== 'undefined') {
                this.selectCard.emit(this.paymentCard);
            }
        };
        return PaymentCardContainerBase;
    }());
    PaymentCardContainerBase.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PaymentCardContainerBase, deps: [{ token: CardsService }, { token: i0__namespace.ChangeDetectorRef }, { token: i2__namespace$5.NotificationService }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    PaymentCardContainerBase.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: PaymentCardContainerBase, inputs: { paymentCard: "paymentCard", notificationTtl: "notificationTtl", updateAllLimits: "updateAllLimits" }, outputs: { selectCard: "selectCard" }, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PaymentCardContainerBase, decorators: [{
                type: i0.Directive
            }], ctorParameters: function () { return [{ type: CardsService }, { type: i0__namespace.ChangeDetectorRef }, { type: i2__namespace$5.NotificationService }]; }, propDecorators: { paymentCard: [{
                    type: i0.Input
                }], notificationTtl: [{
                    type: i0.Input
                }], updateAllLimits: [{
                    type: i0.Input
                }], selectCard: [{
                    type: i0.Output
                }] } });

    // eslint-disable-next-line
    var PaymentCardControlsBase = /** @class */ (function () {
        function PaymentCardControlsBase() {
            /**
             * Whether lock status is being updated.
             */
            this.isLockLoading = false;
            /**
             * Whether card replacement has been initiated.
             */
            this.isInitiateReplacementLoading = false;
            /**
             * Whether card replacement has been initiated.
             */
            this.isInitiateActivationLoading = false;
            /**
             * Whether card change pin has been initiated.
             */
            this.isResetPinLoading = false;
            /**
             * Event to update the lock status of the payment card.
             */
            this.updateLockStatus = new i0.EventEmitter();
            /**
             * Event to initiate replacement of the payment card.
             */
            this.initiateReplacement = new i0.EventEmitter();
            /**
             * Event to initiate activation of the payment card.
             */
            this.initiateActivation = new i0.EventEmitter();
            /**
             * Event to initiate reset pin of the payment card.
             */
            this.resetPin = new i0.EventEmitter();
            /**
             * Event to initiate requestPin pin of the payment card.
             */
            this.requestPin = new i0.EventEmitter();
            this.hostRef = this;
        }
        PaymentCardControlsBase.prototype.ngOnInit = function () {
            if (typeof this.paymentCard === 'undefined') {
                throw new Error("\"paymentCard\" input is required in \"" + this.constructor.name + "\"");
            }
        };
        PaymentCardControlsBase.prototype.onLock = function () {
            this.updateLockStatus.emit(exports.PaymentCardLockStatus.Locked);
        };
        PaymentCardControlsBase.prototype.onUnlock = function () {
            this.updateLockStatus.emit(exports.PaymentCardLockStatus.Unlocked);
        };
        Object.defineProperty(PaymentCardControlsBase.prototype, "isLocked", {
            get: function () {
                return this.paymentCard && this.paymentCard.lockStatus === exports.PaymentCardLockStatus.Locked;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PaymentCardControlsBase.prototype, "resetPinMode", {
            get: function () {
                if (this.paymentCard) {
                    if (this.paymentCard.type === 'Credit') {
                        return exports.ResetPinModeEnum.Request;
                    }
                    return exports.ResetPinModeEnum.Reset;
                }
                return '';
            },
            enumerable: false,
            configurable: true
        });
        PaymentCardControlsBase.prototype.onInitiateReplacement = function (replacementReason) {
            this.initiateReplacement.emit(replacementReason);
        };
        PaymentCardControlsBase.prototype.onInitiateActivation = function (token) {
            this.initiateActivation.emit(token);
        };
        PaymentCardControlsBase.prototype.onResetPin = function (token) {
            this.resetPin.emit(token);
        };
        PaymentCardControlsBase.prototype.onRequestPin = function (token) {
            this.requestPin.emit(token);
        };
        return PaymentCardControlsBase;
    }());
    PaymentCardControlsBase.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PaymentCardControlsBase, deps: [], target: i0__namespace.ɵɵFactoryTarget.Directive });
    PaymentCardControlsBase.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: PaymentCardControlsBase, inputs: { paymentCard: "paymentCard", isLockLoading: "isLockLoading", isInitiateReplacementLoading: "isInitiateReplacementLoading", isInitiateActivationLoading: "isInitiateActivationLoading", isResetPinLoading: "isResetPinLoading" }, outputs: { updateLockStatus: "updateLockStatus", initiateReplacement: "initiateReplacement", initiateActivation: "initiateActivation", resetPin: "resetPin", requestPin: "requestPin" }, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: PaymentCardControlsBase, decorators: [{
                type: i0.Directive
            }], propDecorators: { paymentCard: [{
                    type: i0.Input
                }], isLockLoading: [{
                    type: i0.Input
                }], isInitiateReplacementLoading: [{
                    type: i0.Input
                }], isInitiateActivationLoading: [{
                    type: i0.Input
                }], isResetPinLoading: [{
                    type: i0.Input
                }], updateLockStatus: [{
                    type: i0.Output
                }], initiateReplacement: [{
                    type: i0.Output
                }], initiateActivation: [{
                    type: i0.Output
                }], resetPin: [{
                    type: i0.Output
                }], requestPin: [{
                    type: i0.Output
                }] } });

    function getCountryName(destinationList, _a) {
        var country = _a.country, region = _a.region;
        if (!destinationList) {
            return country;
        }
        var destinationCountry = destinationList.find(function (item) { return item.code === country; });
        if (destinationCountry && region) {
            var destinationRegion = destinationCountry.regions && destinationCountry.regions.find(function (item) { return item.code === region; });
            return destinationRegion ? destinationRegion.name + " (" + destinationCountry.code + ")" : destinationCountry.name;
        }
        return destinationCountry ? destinationCountry.name : country;
    }

    var BaseWidgetPropertiesService = /** @class */ (function () {
        function BaseWidgetPropertiesService(itemModel) {
            this.itemModel = itemModel;
        }
        Object.defineProperty(BaseWidgetPropertiesService.prototype, "notificationTtl", {
            get: function () {
                return this.itemModel
                    ? this.itemModel.property(WidgetProperties.NotificationTtl).pipe(operators.map(function (propertyValue) { return parseInt(propertyValue, 10); }), operators.map(function (ttl) { return (ttl !== undefined && !isNaN(ttl) && ttl > 0 ? ttl : notificationTtl); }))
                    : rxjs.of(notificationTtl);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseWidgetPropertiesService.prototype, "updateAllLimits", {
            get: function () {
                return this.itemModel
                    ? this.itemModel
                        .property(WidgetProperties.updateAllLimits)
                        .pipe(operators.map(function (propertyValue) { return (typeof propertyValue === 'boolean' ? propertyValue : propertyValue === 'true'); }))
                    : rxjs.of(false);
            },
            enumerable: false,
            configurable: true
        });
        return BaseWidgetPropertiesService;
    }());
    BaseWidgetPropertiesService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BaseWidgetPropertiesService, deps: [{ token: i1__namespace$5.ItemModel, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    BaseWidgetPropertiesService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BaseWidgetPropertiesService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: BaseWidgetPropertiesService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () {
            return [{ type: i1__namespace$5.ItemModel, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var cacheRequest = function (request) { return function (source) { return source.pipe(operators.switchMap(request), operators.publishReplay(1), operators.refCount()); }; };
    /**
     * @name CardService
     *
     * @description
     * Service for retrieving and updating a single card from the backend.
     */
    var CardService = /** @class */ (function () {
        function CardService(cardsDataHttpService, cardsBackendService) {
            var _this = this;
            this.cardsDataHttpService = cardsDataHttpService;
            this.cardsBackendService = cardsBackendService;
            this.paymentCardId = new rxjs.ReplaySubject(1);
            this.paymentCard = this.paymentCardId.pipe(operators.distinctUntilChanged(), operators.filter(function (paymentCardId) { return typeof paymentCardId !== 'undefined'; }), cacheRequest(function (paymentCardId) { return _this.cardsDataHttpService.getCardById({ id: paymentCardId }, 'response').pipe(operators.map(function (response) {
                if (response.body === null) {
                    throw new Error('Some error message');
                }
                return _this.cardsBackendService.itemToModel(response.body);
            }), operators.catchError(function (error) {
                throw _this.cardsBackendService.parseError(error);
            })); }));
        }
        CardService.prototype.getPaymentCardFrom = function (paymentCardId) {
            paymentCardId.subscribe(this.paymentCardId);
        };
        CardService.prototype.getPaymentCard = function () {
            return this.paymentCard;
        };
        return CardService;
    }());
    CardService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardService, deps: [{ token: i1__namespace$4.CardsHttpService }, { token: CardsBackendService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    CardService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CardService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace$4.CardsHttpService }, { type: CardsBackendService }]; } });

    var destination = [
        { code: 'ABW', name: 'Aruba' },
        { code: 'AFG', name: 'Afghanistan' },
        { code: 'AGO', name: 'Angola' },
        { code: 'ALB', name: 'Albania' },
        { code: 'AND', name: 'Andorra' },
        { code: 'ARE', name: 'United Arab Emirates' },
        { code: 'ARG', name: 'Argentina' },
        { code: 'ARM', name: 'Armenia' },
        { code: 'ASM', name: 'American Samoa' },
        { code: 'ATG', name: 'Antigua and Barbuda' },
        { code: 'AUS', name: 'Australia' },
        { code: 'AUT', name: 'Austria' },
        { code: 'AZE', name: 'Azerbaijan' },
        { code: 'BDI', name: 'Burundi' },
        { code: 'BEL', name: 'Belgium' },
        { code: 'BEN', name: 'Benin' },
        { code: 'BFA', name: 'Burkina Faso' },
        { code: 'BGD', name: 'Bangladesh' },
        { code: 'BGR', name: 'Bulgaria' },
        { code: 'BHR', name: 'Bahrain' },
        { code: 'BHS', name: 'The Bahamas' },
        { code: 'BIH', name: 'Bosnia and Herzegovina' },
        { code: 'BLR', name: 'Belarus' },
        { code: 'BLZ', name: 'Belize' },
        { code: 'BMU', name: 'Bermuda' },
        { code: 'BOL', name: 'Bolivia' },
        { code: 'BRA', name: 'Brazil' },
        { code: 'BRB', name: 'Barbados' },
        { code: 'BRN', name: 'Brunei Darussalam' },
        { code: 'BTN', name: 'Bhutan' },
        { code: 'BWA', name: 'Botswana' },
        { code: 'CAF', name: 'Central African Republic' },
        {
            code: 'CAN',
            name: 'Canada',
            regions: [
                { code: 'CA-AB', name: 'Alberta' },
                { code: 'CA-BC', name: 'British Columbia' },
                { code: 'CA-MB', name: 'Manitoba' },
                { code: 'CA-NB', name: 'New Brunswick' },
                { code: 'CA-NL', name: 'Newfoundland and Labrador' },
                { code: 'CA-NS', name: 'Nova Scotia' },
                { code: 'CA-ON', name: 'Ontario' },
                { code: 'CA-PE', name: 'Prince Edward Island' },
                { code: 'CA-QC', name: 'Quebec' },
                { code: 'CA-SK', name: 'Saskatchewan' },
                { code: 'CA-NT', name: 'Northwest Territories' },
                { code: 'CA-NU', name: 'Nunavut' },
                { code: 'CA-YT', name: 'Yukon' },
            ],
        },
        { code: 'CHE', name: 'Switzerland' },
        { code: 'CHL', name: 'Chile' },
        { code: 'CHN', name: 'China' },
        { code: 'CIV', name: "Cote d'Ivoire" },
        { code: 'CMR', name: 'Cameroon' },
        { code: 'COD', name: 'Democratic Republic of Congo' },
        { code: 'COG', name: 'Republic of Congo' },
        { code: 'COL', name: 'Colombia' },
        { code: 'COM', name: 'Comoros' },
        { code: 'CPV', name: 'Cabo Verde' },
        { code: 'CRI', name: 'Costa Rica' },
        { code: 'CUB', name: 'Cuba' },
        { code: 'CUW', name: 'Curacao' },
        { code: 'CYM', name: 'Cayman Islands' },
        { code: 'CYP', name: 'Cyprus' },
        { code: 'CZE', name: 'Czech Republic' },
        { code: 'DEU', name: 'Germany' },
        { code: 'DJI', name: 'Djibouti' },
        { code: 'DMA', name: 'Dominica' },
        { code: 'DNK', name: 'Denmark' },
        { code: 'DOM', name: 'Dominican Republic' },
        { code: 'DZA', name: 'Algeria' },
        { code: 'ECU', name: 'Ecuador' },
        { code: 'EGY', name: 'Egypt' },
        { code: 'ERI', name: 'Eritrea' },
        { code: 'ESP', name: 'Spain' },
        { code: 'EST', name: 'Estonia' },
        { code: 'ETH', name: 'Ethiopia' },
        { code: 'FIN', name: 'Finland' },
        { code: 'FJI', name: 'Fiji' },
        { code: 'FRA', name: 'France' },
        { code: 'FRO', name: 'Faroe Islands' },
        { code: 'GAB', name: 'Gabon' },
        { code: 'GBR', name: 'United Kingdom' },
        { code: 'GEO', name: 'Georgia' },
        { code: 'GHA', name: 'Ghana' },
        { code: 'GIB', name: 'Gibraltar' },
        { code: 'GIN', name: 'Guinea' },
        { code: 'GMB', name: 'The Gambia' },
        { code: 'GNB', name: 'Guinea-Bissau' },
        { code: 'GNQ', name: 'Equatorial Guinea' },
        { code: 'GRC', name: 'Greece' },
        { code: 'GRD', name: 'Grenada' },
        { code: 'GRL', name: 'Greenland' },
        { code: 'GTM', name: 'Guatemala' },
        { code: 'GUM', name: 'Guam' },
        { code: 'GUY', name: 'Guyana' },
        { code: 'HKG', name: 'Hong Kong' },
        { code: 'HND', name: 'Honduras' },
        { code: 'HRV', name: 'Croatia' },
        { code: 'HTI', name: 'Haiti' },
        { code: 'HUN', name: 'Hungary' },
        { code: 'IDN', name: 'Indonesia' },
        { code: 'IMN', name: 'Isle of Man' },
        { code: 'IND', name: 'India' },
        { code: 'IRL', name: 'Ireland' },
        { code: 'IRN', name: 'Islamic Republic of Iran' },
        { code: 'IRQ', name: 'Iraq' },
        { code: 'ISL', name: 'Iceland' },
        { code: 'ISR', name: 'Israel' },
        { code: 'ITA', name: 'Italy' },
        { code: 'JAM', name: 'Jamaica' },
        { code: 'JOR', name: 'Jordan' },
        { code: 'JPN', name: 'Japan' },
        { code: 'KAZ', name: 'Kazakhstan' },
        { code: 'KEN', name: 'Kenya' },
        { code: 'KGZ', name: 'Kyrgyz Republic' },
        { code: 'KHM', name: 'Cambodia' },
        { code: 'KIR', name: 'Kiribati' },
        { code: 'KNA', name: 'St. Kitts and Nevis' },
        { code: 'KOR', name: 'Republic of Korea' },
        { code: 'KWT', name: 'Kuwait' },
        { code: 'LBN', name: 'Lebanon' },
        { code: 'LBR', name: 'Liberia' },
        { code: 'LKA', name: 'Sri Lanka' },
        { code: 'LBY', name: 'Libya' },
        { code: 'LCA', name: 'St. Lucia' },
        { code: 'LIE', name: 'Liechtenstein' },
        { code: 'LSO', name: 'Lesotho' },
        { code: 'LTU', name: 'Lithuania' },
        { code: 'LUX', name: 'Luxembourg' },
        { code: 'LVA', name: 'Latvia' },
        { code: 'MAF', name: 'St. Martin (French part)' },
        { code: 'MAR', name: 'Morocco' },
        { code: 'MCO', name: 'Monaco' },
        { code: 'MDA', name: 'Moldova' },
        { code: 'MRT', name: 'Mauritania' },
        { code: 'MUS', name: 'Mauritius' },
        { code: 'MWI', name: 'Malawi' },
        { code: 'MYS', name: 'Malaysia' },
        { code: 'NAM', name: 'Namibia' },
        { code: 'NCL', name: 'New Caledonia' },
        { code: 'NER', name: 'Niger' },
        { code: 'NGA', name: 'Nigeria' },
        { code: 'NIC', name: 'Nicaragua' },
        { code: 'NLD', name: 'Netherlands' },
        { code: 'NOR', name: 'Norway' },
        { code: 'NPL', name: 'Nepal' },
        { code: 'NRU', name: 'Nauru' },
        { code: 'NZL', name: 'New Zealand' },
        { code: 'OMN', name: 'Oman' },
        { code: 'PAK', name: 'Pakistan' },
        { code: 'PAN', name: 'Panama' },
        { code: 'PER', name: 'Peru' },
        { code: 'PHL', name: 'Philippines' },
        { code: 'PLW', name: 'Palau' },
        { code: 'PNG', name: 'Papua New Guinea' },
        { code: 'POL', name: 'Poland' },
        { code: 'PRI', name: 'Puerto Rico' },
        { code: 'PRK', name: "Democratic People's Republic of Korea" },
        { code: 'PRT', name: 'Portugal' },
        { code: 'PRY', name: 'Paraguay' },
        { code: 'PSE', name: 'West Bank and Gaza' },
        { code: 'QAT', name: 'Qatar' },
        { code: 'ROU', name: 'Romania' },
        { code: 'RUS', name: 'Russian Federation' },
        { code: 'RWA', name: 'Rwanda' },
        { code: 'SAU', name: 'Saudi Arabia' },
        { code: 'SDN', name: 'Sudan' },
        { code: 'SEN', name: 'Senegal' },
        { code: 'SGP', name: 'Singapore' },
        { code: 'SLB', name: 'Solomon Islands' },
        { code: 'SLE', name: 'Sierra Leone' },
        { code: 'SLV', name: 'El Salvador' },
        { code: 'SMR', name: 'San Marino' },
        { code: 'SOM', name: 'Somalia' },
        { code: 'SRB', name: 'Serbia' },
        { code: 'SSD', name: 'South Sudan' },
        { code: 'STP', name: 'Sao Tome and Principe' },
        { code: 'SUR', name: 'Suriname' },
        { code: 'SVK', name: 'Slovak Republic' },
        { code: 'SVN', name: 'Slovenia' },
        { code: 'SWE', name: 'Sweden' },
        { code: 'SWZ', name: 'Eswatini' },
        { code: 'SXM', name: 'Sint Maarten (Dutch part)' },
        { code: 'SYC', name: 'Seychelles' },
        { code: 'SYR', name: 'Syrian Arab Republic' },
        { code: 'TCA', name: 'Turks and Caicos Islands' },
        { code: 'TCD', name: 'Chad' },
        { code: 'TGO', name: 'Togo' },
        { code: 'THA', name: 'Thailand' },
        { code: 'TJK', name: 'Tajikistan' },
        { code: 'TKM', name: 'Turkmenistan' },
        { code: 'TLS', name: 'Timor-Leste' },
        { code: 'TON', name: 'Tonga' },
        { code: 'TTO', name: 'Trinidad and Tobago' },
        { code: 'TUN', name: 'Tunisia' },
        { code: 'TUR', name: 'Turkey' },
        { code: 'TUV', name: 'Tuvalu' },
        { code: 'TWN', name: 'Taiwan' },
        { code: 'TZA', name: 'Tanzania' },
        { code: 'UGA', name: 'Uganda' },
        { code: 'UKR', name: 'Ukraine' },
        { code: 'URY', name: 'Uruguay' },
        {
            code: 'USA',
            name: 'United States',
            regions: [
                { code: 'US-AL', name: 'Alabama' },
                { code: 'US-AK', name: 'Alaska' },
                { code: 'US-AZ', name: 'Arizona' },
                { code: 'US-AR', name: 'Arkansas' },
                { code: 'US-CA', name: 'California' },
                { code: 'US-CO', name: 'Colorado' },
                { code: 'US-CT', name: 'Connecticut' },
                { code: 'US-DE', name: 'Delaware' },
                { code: 'US-FL', name: 'Florida' },
                { code: 'US-GA', name: 'Georgia' },
                { code: 'US-HI', name: 'Hawaii' },
                { code: 'US-ID', name: 'Idaho' },
                { code: 'US-IL', name: 'Illinois' },
                { code: 'US-IN', name: 'Indiana' },
                { code: 'US-IA', name: 'Iowa' },
                { code: 'US-KS', name: 'Kansas' },
                { code: 'US-KY', name: 'Kentucky' },
                { code: 'US-LA', name: 'Louisiana' },
                { code: 'US-ME', name: 'Maine' },
                { code: 'US-MD', name: 'Maryland' },
                { code: 'US-MA', name: 'Massachusetts' },
                { code: 'US-MI', name: 'Michigan' },
                { code: 'US-MN', name: 'Minnesota' },
                { code: 'US-MS', name: 'Mississippi' },
                { code: 'US-MO', name: 'Missouri' },
                { code: 'US-MT', name: 'Montana' },
                { code: 'US-NE', name: 'Nebraska' },
                { code: 'US-NV', name: 'Nevada' },
                { code: 'US-NH', name: 'New Hampshire' },
                { code: 'US-NJ', name: 'New Jersey' },
                { code: 'US-NM', name: 'New Mexico' },
                { code: 'US-NY', name: 'New York' },
                { code: 'US-NC', name: 'North Carolina' },
                { code: 'US-ND', name: 'North Dakota' },
                { code: 'US-OH', name: 'Ohio' },
                { code: 'US-OK', name: 'Oklahoma' },
                { code: 'US-OR', name: 'Oregon' },
                { code: 'US-PA', name: 'Pennsylvania' },
                { code: 'US-RI', name: 'Rhode Island' },
                { code: 'US-SC', name: 'South Carolina' },
                { code: 'US-SD', name: 'South Dakota' },
                { code: 'US-TN', name: 'Tennessee' },
                { code: 'US-TX', name: 'Texas' },
                { code: 'US-UT', name: 'Utah' },
                { code: 'US-VT', name: 'Vermont' },
                { code: 'US-VA', name: 'Virginia' },
                { code: 'US-WA', name: 'Washington' },
                { code: 'US-WV', name: 'West Virginia' },
                { code: 'US-WI', name: 'Wisconsin' },
                { code: 'US-WY', name: 'Wyoming' },
                { code: 'US-DC', name: 'District of Columbia' },
                { code: 'US-AS', name: 'American Samoa' },
                { code: 'US-GU', name: 'Guam' },
                { code: 'US-MP', name: 'Northern Mariana Islands' },
                { code: 'US-PR', name: 'Puerto Rico' },
                { code: 'US-UM', name: 'United States Minor Outlying Islands' },
                { code: 'US-VI', name: 'Virgin Islands' },
            ],
        },
        { code: 'UZB', name: 'Uzbekistan' },
        { code: 'VCT', name: 'St. Vincent and the Grenadines' },
        { code: 'VEN', name: 'Venezuela' },
        { code: 'VGB', name: 'British Virgin Islands' },
        { code: 'VNM', name: 'Vietnam' },
        { code: 'VUT', name: 'Vanuatu' },
        { code: 'WSM', name: 'Samoa' },
        { code: 'XKX', name: 'Kosovo' },
        { code: 'YEM', name: 'Yemen, Rep.' },
        { code: 'ZMB', name: 'Zambia' },
        { code: 'ZWE', name: 'Zimbabwe' },
        { code: 'MEX', name: 'Mexico' },
    ];

    /**
     * This service is a default implementation for countries that retrieve locations from a
     * static file. If no other service is injected then this is used instead
     */
    var DefaultDestionsService = /** @class */ (function () {
        function DefaultDestionsService() {
        }
        DefaultDestionsService.prototype.getDestinations = function () {
            return rxjs.of(destination);
        };
        return DefaultDestionsService;
    }());
    DefaultDestionsService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: DefaultDestionsService, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    DefaultDestionsService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: DefaultDestionsService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: DefaultDestionsService, decorators: [{
                type: i0.Injectable
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.AccessibilityKeyboardDirective = AccessibilityKeyboardDirective;
    exports.BaseWidgetPropertiesService = BaseWidgetPropertiesService;
    exports.CardService = CardService;
    exports.CardsCommonModule = CardsCommonModule;
    exports.CardsDeliveryStatusCustomizableDirective = CardsDeliveryStatusCustomizableDirective;
    exports.CardsInitiateActivationCustomizableDirective = CardsInitiateActivationCustomizableDirective;
    exports.CardsInitiateActivationFormCustomizableDirective = CardsInitiateActivationFormCustomizableDirective;
    exports.CardsInitiateReplacementCustomizableDirective = CardsInitiateReplacementCustomizableDirective;
    exports.CardsInitiateReplacementFormCustomizableDirective = CardsInitiateReplacementFormCustomizableDirective;
    exports.CardsMockBackendInterceptor = CardsMockBackendInterceptor;
    exports.CardsMockBackendProvider = CardsMockBackendProvider;
    exports.CardsMultipleErrorStateCustomizableDirective = CardsMultipleErrorStateCustomizableDirective;
    exports.CardsResetPinConfirmationCustomizableDirective = CardsResetPinConfirmationCustomizableDirective;
    exports.CardsResetPinCustomizableDirective = CardsResetPinCustomizableDirective;
    exports.CardsResetPinFormCustomizableDirective = CardsResetPinFormCustomizableDirective;
    exports.CardsResetPinNewPinCustomizableDirective = CardsResetPinNewPinCustomizableDirective;
    exports.CardsService = CardsService;
    exports.CardsUpdateLimitCustomizableDirective = CardsUpdateLimitCustomizableDirective;
    exports.CardsUpdateLimitsCustomizableDirective = CardsUpdateLimitsCustomizableDirective;
    exports.DEFAULT_PAYMENT_CARD_TYPE_GROUP = DEFAULT_PAYMENT_CARD_TYPE_GROUP;
    exports.DefaultDestionsService = DefaultDestionsService;
    exports.DeliveryTrackerComponent = DeliveryTrackerComponent;
    exports.DestinationsServiceConfigToken = DestinationsServiceConfigToken;
    exports.LimitChannelMappingConfigToken = LimitChannelMappingConfigToken;
    exports.PaymentCardContainerBase = PaymentCardContainerBase;
    exports.PaymentCardControlsBase = PaymentCardControlsBase;
    exports.PaymentCardDeliveryStatusComponent = PaymentCardDeliveryStatusComponent;
    exports.PaymentCardInitiateActivationComponent = PaymentCardInitiateActivationComponent;
    exports.PaymentCardInitiateReplacementComponent = PaymentCardInitiateReplacementComponent;
    exports.PaymentCardLimitComponent = PaymentCardLimitComponent;
    exports.PaymentCardLimitsComponent = PaymentCardLimitsComponent;
    exports.PaymentCardMultipleErrorStateComponent = PaymentCardMultipleErrorStateComponent;
    exports.PaymentCardResetPinComponent = PaymentCardResetPinComponent;
    exports.PaymentCardStateWrapperComponent = PaymentCardStateWrapperComponent;
    exports.ReplacementReasonMappingConfigToken = ReplacementReasonMappingConfigToken;
    exports.ReplacementStatusMappingConfigToken = ReplacementStatusMappingConfigToken;
    exports.StatusMappingConfigToken = StatusMappingConfigToken;
    exports.WidgetProperties = WidgetProperties;
    exports.defaultDeliveryStepStatusMapping = defaultDeliveryStepStatusMapping;
    exports.defaultLimitChannelMapping = defaultLimitChannelMapping;
    exports.defaultLockStatusMapping = defaultLockStatusMapping;
    exports.defaultReplacementReasonMapping = defaultReplacementReasonMapping;
    exports.defaultReplacementStatusMapping = defaultReplacementStatusMapping;
    exports.defaultStatusMapping = defaultStatusMapping;
    exports.filterInputParameters = filterInputParameters;
    exports.getCountryName = getCountryName;
    exports.notificationTtl = notificationTtl;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-cards-common-ang.umd.js.map
