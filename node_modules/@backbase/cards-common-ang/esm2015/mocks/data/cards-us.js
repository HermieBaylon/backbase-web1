const baseCardItem = {
    id: '0',
    brand: 'Mastercard',
    type: 'Credit',
    subType: 'ATM',
    name: 'Blue Card',
    status: 'Active',
    lockStatus: 'UNLOCKED',
    holder: {
        name: 'Jack Reacher',
    },
    expiryDate: {
        year: '2023',
        month: '12',
    },
    currency: 'USD',
    maskedNumber: '1234',
};
const generateCardItem = (() => {
    let uid = 0;
    return (changes) => (Object.assign(Object.assign(Object.assign({}, baseCardItem), { id: (++uid).toString() }), changes));
})();
export default [
    // with additions
    generateCardItem({
        maskedNumber: '0101',
        additions: {
            bonusPoints: '5',
        },
    }),
    // deactivated card
    generateCardItem({
        maskedNumber: '0301',
        status: 'Cancelled',
        replacement: { status: 'ReplacementRequested' },
        delivery: {
            transitSteps: [
                {
                    name: 'Ordered',
                    status: 'SUCCESS',
                    stepDateTime: '2019-01-28T16:41:41.090Z',
                },
                {
                    name: 'Processed',
                    status: 'SUCCESS',
                    stepDateTime: '2019-01-30T00:00:00.000Z',
                },
                {
                    name: 'In Transit',
                    status: 'PENDING',
                },
                {
                    name: 'Delivered',
                    status: 'PENDING',
                },
            ],
        },
    }),
    // should have a visa logo and gold color
    generateCardItem({
        maskedNumber: '0204',
        name: 'Gold Card',
        brand: 'Visa',
        type: 'Prepaid',
    }),
    // should have a visa logo and gold color
    generateCardItem({
        maskedNumber: '0201',
        name: 'Gold Card',
        brand: 'Visa',
    }),
    // needs to be activated
    generateCardItem({
        maskedNumber: '0401',
        status: 'Inactive',
    }),
    // expired
    generateCardItem({
        maskedNumber: '0302',
        status: 'Expired',
        type: 'Debit',
    }),
    // under delivery
    generateCardItem({
        maskedNumber: '0501',
        type: 'Debit',
        status: 'Inactive',
        delivery: {
            transitSteps: [
                {
                    name: 'Ordered',
                    status: 'SUCCESS',
                    stepDateTime: '2019-01-28T16:41:41.090Z',
                },
                {
                    name: 'Processed',
                    status: 'SUCCESS',
                    stepDateTime: '2019-01-30T00:00:00.000Z',
                },
                {
                    name: 'In Transit',
                    status: 'SUCCESS',
                    stepDateTime: '2019-02-01T00:00:00.000Z',
                },
                {
                    name: 'Delivered',
                    status: 'SUCCESS',
                    stepDateTime: '2019-02-03T00:00:00.000Z',
                },
            ],
        },
    }),
    // should have a visa logo and black color
    generateCardItem({
        maskedNumber: '0202',
        brand: 'Visa',
        name: 'Black Card',
        type: 'Debit',
    }),
    // with limits
    generateCardItem({
        maskedNumber: '1034',
        name: 'Green Card',
        limits: [
            {
                id: '1',
                channel: 'ATM',
                frequency: 'DAILY',
                amount: 3000.0,
                maxAmount: 10000.0,
                minAmount: 0.0,
            },
            {
                id: '2',
                channel: 'ONLINE',
                frequency: 'DAILY',
                amount: 2000.0,
                maxAmount: 10000.0,
                minAmount: 0.0,
            },
        ],
    }),
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyZHMtdXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL2NhcmRzLWNvbW1vbi1hbmcvbW9ja3MvZGF0YS9jYXJkcy11cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLFlBQVksR0FBYTtJQUM3QixFQUFFLEVBQUUsR0FBRztJQUNQLEtBQUssRUFBRSxZQUFZO0lBQ25CLElBQUksRUFBRSxRQUFRO0lBQ2QsT0FBTyxFQUFFLEtBQUs7SUFDZCxJQUFJLEVBQUUsV0FBVztJQUNqQixNQUFNLEVBQUUsUUFBUTtJQUNoQixVQUFVLEVBQUUsVUFBVTtJQUN0QixNQUFNLEVBQUU7UUFDTixJQUFJLEVBQUUsY0FBYztLQUNyQjtJQUNELFVBQVUsRUFBRTtRQUNWLElBQUksRUFBRSxNQUFNO1FBQ1osS0FBSyxFQUFFLElBQUk7S0FDWjtJQUNELFFBQVEsRUFBRSxLQUFLO0lBQ2YsWUFBWSxFQUFFLE1BQU07Q0FDckIsQ0FBQztBQUVGLE1BQU0sZ0JBQWdCLEdBQUcsQ0FBQyxHQUFHLEVBQUU7SUFDN0IsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDO0lBRVosT0FBTyxDQUFDLE9BQTBCLEVBQUUsRUFBRSxDQUFDLCtDQUNsQyxZQUFZLEtBQ2YsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxRQUFRLEVBQUUsS0FDbkIsT0FBTyxFQUNWLENBQUM7QUFDTCxDQUFDLENBQUMsRUFBRSxDQUFDO0FBRUwsZUFBZTtJQUNiLGlCQUFpQjtJQUNqQixnQkFBZ0IsQ0FBQztRQUNmLFlBQVksRUFBRSxNQUFNO1FBQ3BCLFNBQVMsRUFBRTtZQUNULFdBQVcsRUFBRSxHQUFHO1NBQ2pCO0tBQ0YsQ0FBQztJQUVGLG1CQUFtQjtJQUNuQixnQkFBZ0IsQ0FBQztRQUNmLFlBQVksRUFBRSxNQUFNO1FBQ3BCLE1BQU0sRUFBRSxXQUFXO1FBQ25CLFdBQVcsRUFBRSxFQUFFLE1BQU0sRUFBRSxzQkFBc0IsRUFBRTtRQUMvQyxRQUFRLEVBQUU7WUFDUixZQUFZLEVBQUU7Z0JBQ1o7b0JBQ0UsSUFBSSxFQUFFLFNBQVM7b0JBQ2YsTUFBTSxFQUFFLFNBQVM7b0JBQ2pCLFlBQVksRUFBRSwwQkFBMEI7aUJBQ3pDO2dCQUNEO29CQUNFLElBQUksRUFBRSxXQUFXO29CQUNqQixNQUFNLEVBQUUsU0FBUztvQkFDakIsWUFBWSxFQUFFLDBCQUEwQjtpQkFDekM7Z0JBQ0Q7b0JBQ0UsSUFBSSxFQUFFLFlBQVk7b0JBQ2xCLE1BQU0sRUFBRSxTQUFTO2lCQUNsQjtnQkFDRDtvQkFDRSxJQUFJLEVBQUUsV0FBVztvQkFDakIsTUFBTSxFQUFFLFNBQVM7aUJBQ2xCO2FBQ0Y7U0FDRjtLQUNGLENBQUM7SUFFRix5Q0FBeUM7SUFDekMsZ0JBQWdCLENBQUM7UUFDZixZQUFZLEVBQUUsTUFBTTtRQUNwQixJQUFJLEVBQUUsV0FBVztRQUNqQixLQUFLLEVBQUUsTUFBTTtRQUNiLElBQUksRUFBRSxTQUFTO0tBQ2hCLENBQUM7SUFFRix5Q0FBeUM7SUFDekMsZ0JBQWdCLENBQUM7UUFDZixZQUFZLEVBQUUsTUFBTTtRQUNwQixJQUFJLEVBQUUsV0FBVztRQUNqQixLQUFLLEVBQUUsTUFBTTtLQUNkLENBQUM7SUFFRix3QkFBd0I7SUFDeEIsZ0JBQWdCLENBQUM7UUFDZixZQUFZLEVBQUUsTUFBTTtRQUNwQixNQUFNLEVBQUUsVUFBVTtLQUNuQixDQUFDO0lBRUYsVUFBVTtJQUNWLGdCQUFnQixDQUFDO1FBQ2YsWUFBWSxFQUFFLE1BQU07UUFDcEIsTUFBTSxFQUFFLFNBQVM7UUFDakIsSUFBSSxFQUFFLE9BQU87S0FDZCxDQUFDO0lBRUYsaUJBQWlCO0lBQ2pCLGdCQUFnQixDQUFDO1FBQ2YsWUFBWSxFQUFFLE1BQU07UUFDcEIsSUFBSSxFQUFFLE9BQU87UUFDYixNQUFNLEVBQUUsVUFBVTtRQUNsQixRQUFRLEVBQUU7WUFDUixZQUFZLEVBQUU7Z0JBQ1o7b0JBQ0UsSUFBSSxFQUFFLFNBQVM7b0JBQ2YsTUFBTSxFQUFFLFNBQVM7b0JBQ2pCLFlBQVksRUFBRSwwQkFBMEI7aUJBQ3pDO2dCQUNEO29CQUNFLElBQUksRUFBRSxXQUFXO29CQUNqQixNQUFNLEVBQUUsU0FBUztvQkFDakIsWUFBWSxFQUFFLDBCQUEwQjtpQkFDekM7Z0JBQ0Q7b0JBQ0UsSUFBSSxFQUFFLFlBQVk7b0JBQ2xCLE1BQU0sRUFBRSxTQUFTO29CQUNqQixZQUFZLEVBQUUsMEJBQTBCO2lCQUN6QztnQkFDRDtvQkFDRSxJQUFJLEVBQUUsV0FBVztvQkFDakIsTUFBTSxFQUFFLFNBQVM7b0JBQ2pCLFlBQVksRUFBRSwwQkFBMEI7aUJBQ3pDO2FBQ0Y7U0FDRjtLQUNGLENBQUM7SUFFRiwwQ0FBMEM7SUFDMUMsZ0JBQWdCLENBQUM7UUFDZixZQUFZLEVBQUUsTUFBTTtRQUNwQixLQUFLLEVBQUUsTUFBTTtRQUNiLElBQUksRUFBRSxZQUFZO1FBQ2xCLElBQUksRUFBRSxPQUFPO0tBQ2QsQ0FBQztJQUVGLGNBQWM7SUFDZCxnQkFBZ0IsQ0FBQztRQUNmLFlBQVksRUFBRSxNQUFNO1FBQ3BCLElBQUksRUFBRSxZQUFZO1FBQ2xCLE1BQU0sRUFBRTtZQUNOO2dCQUNFLEVBQUUsRUFBRSxHQUFHO2dCQUNQLE9BQU8sRUFBRSxLQUFLO2dCQUNkLFNBQVMsRUFBRSxPQUFPO2dCQUNsQixNQUFNLEVBQUUsTUFBTTtnQkFDZCxTQUFTLEVBQUUsT0FBTztnQkFDbEIsU0FBUyxFQUFFLEdBQUc7YUFDZjtZQUNEO2dCQUNFLEVBQUUsRUFBRSxHQUFHO2dCQUNQLE9BQU8sRUFBRSxRQUFRO2dCQUNqQixTQUFTLEVBQUUsT0FBTztnQkFDbEIsTUFBTSxFQUFFLE1BQU07Z0JBQ2QsU0FBUyxFQUFFLE9BQU87Z0JBQ2xCLFNBQVMsRUFBRSxHQUFHO2FBQ2Y7U0FDRjtLQUNGLENBQUM7Q0FDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2FyZEl0ZW0gfSBmcm9tICdAYmFja2Jhc2UvZGF0YS1hbmcvY2FyZHMnO1xuXG5jb25zdCBiYXNlQ2FyZEl0ZW06IENhcmRJdGVtID0ge1xuICBpZDogJzAnLFxuICBicmFuZDogJ01hc3RlcmNhcmQnLFxuICB0eXBlOiAnQ3JlZGl0JyxcbiAgc3ViVHlwZTogJ0FUTScsXG4gIG5hbWU6ICdCbHVlIENhcmQnLFxuICBzdGF0dXM6ICdBY3RpdmUnLFxuICBsb2NrU3RhdHVzOiAnVU5MT0NLRUQnLFxuICBob2xkZXI6IHtcbiAgICBuYW1lOiAnSmFjayBSZWFjaGVyJyxcbiAgfSxcbiAgZXhwaXJ5RGF0ZToge1xuICAgIHllYXI6ICcyMDIzJyxcbiAgICBtb250aDogJzEyJyxcbiAgfSxcbiAgY3VycmVuY3k6ICdVU0QnLFxuICBtYXNrZWROdW1iZXI6ICcxMjM0Jyxcbn07XG5cbmNvbnN0IGdlbmVyYXRlQ2FyZEl0ZW0gPSAoKCkgPT4ge1xuICBsZXQgdWlkID0gMDtcblxuICByZXR1cm4gKGNoYW5nZXM6IFBhcnRpYWw8Q2FyZEl0ZW0+KSA9PiAoe1xuICAgIC4uLmJhc2VDYXJkSXRlbSxcbiAgICBpZDogKCsrdWlkKS50b1N0cmluZygpLFxuICAgIC4uLmNoYW5nZXMsXG4gIH0pO1xufSkoKTtcblxuZXhwb3J0IGRlZmF1bHQgW1xuICAvLyB3aXRoIGFkZGl0aW9uc1xuICBnZW5lcmF0ZUNhcmRJdGVtKHtcbiAgICBtYXNrZWROdW1iZXI6ICcwMTAxJyxcbiAgICBhZGRpdGlvbnM6IHtcbiAgICAgIGJvbnVzUG9pbnRzOiAnNScsXG4gICAgfSxcbiAgfSksXG5cbiAgLy8gZGVhY3RpdmF0ZWQgY2FyZFxuICBnZW5lcmF0ZUNhcmRJdGVtKHtcbiAgICBtYXNrZWROdW1iZXI6ICcwMzAxJyxcbiAgICBzdGF0dXM6ICdDYW5jZWxsZWQnLFxuICAgIHJlcGxhY2VtZW50OiB7IHN0YXR1czogJ1JlcGxhY2VtZW50UmVxdWVzdGVkJyB9LFxuICAgIGRlbGl2ZXJ5OiB7XG4gICAgICB0cmFuc2l0U3RlcHM6IFtcbiAgICAgICAge1xuICAgICAgICAgIG5hbWU6ICdPcmRlcmVkJyxcbiAgICAgICAgICBzdGF0dXM6ICdTVUNDRVNTJyxcbiAgICAgICAgICBzdGVwRGF0ZVRpbWU6ICcyMDE5LTAxLTI4VDE2OjQxOjQxLjA5MFonLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgbmFtZTogJ1Byb2Nlc3NlZCcsXG4gICAgICAgICAgc3RhdHVzOiAnU1VDQ0VTUycsXG4gICAgICAgICAgc3RlcERhdGVUaW1lOiAnMjAxOS0wMS0zMFQwMDowMDowMC4wMDBaJyxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIG5hbWU6ICdJbiBUcmFuc2l0JyxcbiAgICAgICAgICBzdGF0dXM6ICdQRU5ESU5HJyxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIG5hbWU6ICdEZWxpdmVyZWQnLFxuICAgICAgICAgIHN0YXR1czogJ1BFTkRJTkcnLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9LFxuICB9KSxcblxuICAvLyBzaG91bGQgaGF2ZSBhIHZpc2EgbG9nbyBhbmQgZ29sZCBjb2xvclxuICBnZW5lcmF0ZUNhcmRJdGVtKHtcbiAgICBtYXNrZWROdW1iZXI6ICcwMjA0JyxcbiAgICBuYW1lOiAnR29sZCBDYXJkJyxcbiAgICBicmFuZDogJ1Zpc2EnLFxuICAgIHR5cGU6ICdQcmVwYWlkJyxcbiAgfSksXG5cbiAgLy8gc2hvdWxkIGhhdmUgYSB2aXNhIGxvZ28gYW5kIGdvbGQgY29sb3JcbiAgZ2VuZXJhdGVDYXJkSXRlbSh7XG4gICAgbWFza2VkTnVtYmVyOiAnMDIwMScsXG4gICAgbmFtZTogJ0dvbGQgQ2FyZCcsXG4gICAgYnJhbmQ6ICdWaXNhJyxcbiAgfSksXG5cbiAgLy8gbmVlZHMgdG8gYmUgYWN0aXZhdGVkXG4gIGdlbmVyYXRlQ2FyZEl0ZW0oe1xuICAgIG1hc2tlZE51bWJlcjogJzA0MDEnLFxuICAgIHN0YXR1czogJ0luYWN0aXZlJyxcbiAgfSksXG5cbiAgLy8gZXhwaXJlZFxuICBnZW5lcmF0ZUNhcmRJdGVtKHtcbiAgICBtYXNrZWROdW1iZXI6ICcwMzAyJyxcbiAgICBzdGF0dXM6ICdFeHBpcmVkJyxcbiAgICB0eXBlOiAnRGViaXQnLFxuICB9KSxcblxuICAvLyB1bmRlciBkZWxpdmVyeVxuICBnZW5lcmF0ZUNhcmRJdGVtKHtcbiAgICBtYXNrZWROdW1iZXI6ICcwNTAxJyxcbiAgICB0eXBlOiAnRGViaXQnLFxuICAgIHN0YXR1czogJ0luYWN0aXZlJyxcbiAgICBkZWxpdmVyeToge1xuICAgICAgdHJhbnNpdFN0ZXBzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lOiAnT3JkZXJlZCcsXG4gICAgICAgICAgc3RhdHVzOiAnU1VDQ0VTUycsXG4gICAgICAgICAgc3RlcERhdGVUaW1lOiAnMjAxOS0wMS0yOFQxNjo0MTo0MS4wOTBaJyxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIG5hbWU6ICdQcm9jZXNzZWQnLFxuICAgICAgICAgIHN0YXR1czogJ1NVQ0NFU1MnLFxuICAgICAgICAgIHN0ZXBEYXRlVGltZTogJzIwMTktMDEtMzBUMDA6MDA6MDAuMDAwWicsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBuYW1lOiAnSW4gVHJhbnNpdCcsXG4gICAgICAgICAgc3RhdHVzOiAnU1VDQ0VTUycsXG4gICAgICAgICAgc3RlcERhdGVUaW1lOiAnMjAxOS0wMi0wMVQwMDowMDowMC4wMDBaJyxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIG5hbWU6ICdEZWxpdmVyZWQnLFxuICAgICAgICAgIHN0YXR1czogJ1NVQ0NFU1MnLFxuICAgICAgICAgIHN0ZXBEYXRlVGltZTogJzIwMTktMDItMDNUMDA6MDA6MDAuMDAwWicsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH0sXG4gIH0pLFxuXG4gIC8vIHNob3VsZCBoYXZlIGEgdmlzYSBsb2dvIGFuZCBibGFjayBjb2xvclxuICBnZW5lcmF0ZUNhcmRJdGVtKHtcbiAgICBtYXNrZWROdW1iZXI6ICcwMjAyJyxcbiAgICBicmFuZDogJ1Zpc2EnLFxuICAgIG5hbWU6ICdCbGFjayBDYXJkJyxcbiAgICB0eXBlOiAnRGViaXQnLFxuICB9KSxcblxuICAvLyB3aXRoIGxpbWl0c1xuICBnZW5lcmF0ZUNhcmRJdGVtKHtcbiAgICBtYXNrZWROdW1iZXI6ICcxMDM0JyxcbiAgICBuYW1lOiAnR3JlZW4gQ2FyZCcsXG4gICAgbGltaXRzOiBbXG4gICAgICB7XG4gICAgICAgIGlkOiAnMScsXG4gICAgICAgIGNoYW5uZWw6ICdBVE0nLFxuICAgICAgICBmcmVxdWVuY3k6ICdEQUlMWScsXG4gICAgICAgIGFtb3VudDogMzAwMC4wLFxuICAgICAgICBtYXhBbW91bnQ6IDEwMDAwLjAsXG4gICAgICAgIG1pbkFtb3VudDogMC4wLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgaWQ6ICcyJyxcbiAgICAgICAgY2hhbm5lbDogJ09OTElORScsXG4gICAgICAgIGZyZXF1ZW5jeTogJ0RBSUxZJyxcbiAgICAgICAgYW1vdW50OiAyMDAwLjAsXG4gICAgICAgIG1heEFtb3VudDogMTAwMDAuMCxcbiAgICAgICAgbWluQW1vdW50OiAwLjAsXG4gICAgICB9LFxuICAgIF0sXG4gIH0pLFxuXTtcbiJdfQ==