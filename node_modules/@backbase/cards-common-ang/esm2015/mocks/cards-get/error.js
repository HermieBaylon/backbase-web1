import { HttpErrorResponse } from '@angular/common/http';
// Throw HttpErrorResponse on wrong parameters
export default (response, params) => {
    const errorCode = parseInt(params.get('error'), 10);
    if (errorCode === 400) {
        const responseBody = {
            message: 'Bad Request',
            errors: [
                {
                    message: 'Mock error message: bad request',
                    key: 'cards.api.test.key',
                    context: {
                        arg0: 0,
                    },
                },
            ],
        };
        throw new HttpErrorResponse({
            error: responseBody,
            status: 400,
        });
    }
    if (errorCode === 403) {
        const responseBody = {
            message: 'Forbidden',
            errors: [
                {
                    message: 'Mock error message: Forbidden',
                    key: 'cards.api.test.key',
                    context: {
                        arg0: 0,
                    },
                },
            ],
        };
        throw new HttpErrorResponse({
            error: responseBody,
            status: 403,
        });
    }
    return response;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL2NhcmRzLWNvbW1vbi1hbmcvbW9ja3MvY2FyZHMtZ2V0L2Vycm9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBNEIsaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUVuRiw4Q0FBOEM7QUFDOUMsZUFBZSxDQUFDLFFBQTJCLEVBQUUsTUFBa0IsRUFBRSxFQUFFO0lBQ2pFLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBVyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBRTlELElBQUksU0FBUyxLQUFLLEdBQUcsRUFBRTtRQUNyQixNQUFNLFlBQVksR0FBRztZQUNuQixPQUFPLEVBQUUsYUFBYTtZQUN0QixNQUFNLEVBQUU7Z0JBQ047b0JBQ0UsT0FBTyxFQUFFLGlDQUFpQztvQkFDMUMsR0FBRyxFQUFFLG9CQUFvQjtvQkFDekIsT0FBTyxFQUFFO3dCQUNQLElBQUksRUFBRSxDQUFDO3FCQUNSO2lCQUNGO2FBQ0Y7U0FDRixDQUFDO1FBRUYsTUFBTSxJQUFJLGlCQUFpQixDQUFDO1lBQzFCLEtBQUssRUFBRSxZQUFZO1lBQ25CLE1BQU0sRUFBRSxHQUFHO1NBQ1osQ0FBQyxDQUFDO0tBQ0o7SUFFRCxJQUFJLFNBQVMsS0FBSyxHQUFHLEVBQUU7UUFDckIsTUFBTSxZQUFZLEdBQUc7WUFDbkIsT0FBTyxFQUFFLFdBQVc7WUFDcEIsTUFBTSxFQUFFO2dCQUNOO29CQUNFLE9BQU8sRUFBRSwrQkFBK0I7b0JBQ3hDLEdBQUcsRUFBRSxvQkFBb0I7b0JBQ3pCLE9BQU8sRUFBRTt3QkFDUCxJQUFJLEVBQUUsQ0FBQztxQkFDUjtpQkFDRjthQUNGO1NBQ0YsQ0FBQztRQUVGLE1BQU0sSUFBSSxpQkFBaUIsQ0FBQztZQUMxQixLQUFLLEVBQUUsWUFBWTtZQUNuQixNQUFNLEVBQUUsR0FBRztTQUNaLENBQUMsQ0FBQztLQUNKO0lBRUQsT0FBTyxRQUFRLENBQUM7QUFDbEIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cFJlc3BvbnNlLCBIdHRwUGFyYW1zLCBIdHRwRXJyb3JSZXNwb25zZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcblxuLy8gVGhyb3cgSHR0cEVycm9yUmVzcG9uc2Ugb24gd3JvbmcgcGFyYW1ldGVyc1xuZXhwb3J0IGRlZmF1bHQgKHJlc3BvbnNlOiBIdHRwUmVzcG9uc2U8YW55PiwgcGFyYW1zOiBIdHRwUGFyYW1zKSA9PiB7XG4gIGNvbnN0IGVycm9yQ29kZSA9IHBhcnNlSW50KHBhcmFtcy5nZXQoJ2Vycm9yJykgYXMgc3RyaW5nLCAxMCk7XG5cbiAgaWYgKGVycm9yQ29kZSA9PT0gNDAwKSB7XG4gICAgY29uc3QgcmVzcG9uc2VCb2R5ID0ge1xuICAgICAgbWVzc2FnZTogJ0JhZCBSZXF1ZXN0JyxcbiAgICAgIGVycm9yczogW1xuICAgICAgICB7XG4gICAgICAgICAgbWVzc2FnZTogJ01vY2sgZXJyb3IgbWVzc2FnZTogYmFkIHJlcXVlc3QnLFxuICAgICAgICAgIGtleTogJ2NhcmRzLmFwaS50ZXN0LmtleScsXG4gICAgICAgICAgY29udGV4dDoge1xuICAgICAgICAgICAgYXJnMDogMCxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9O1xuXG4gICAgdGhyb3cgbmV3IEh0dHBFcnJvclJlc3BvbnNlKHtcbiAgICAgIGVycm9yOiByZXNwb25zZUJvZHksXG4gICAgICBzdGF0dXM6IDQwMCxcbiAgICB9KTtcbiAgfVxuXG4gIGlmIChlcnJvckNvZGUgPT09IDQwMykge1xuICAgIGNvbnN0IHJlc3BvbnNlQm9keSA9IHtcbiAgICAgIG1lc3NhZ2U6ICdGb3JiaWRkZW4nLFxuICAgICAgZXJyb3JzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBtZXNzYWdlOiAnTW9jayBlcnJvciBtZXNzYWdlOiBGb3JiaWRkZW4nLFxuICAgICAgICAgIGtleTogJ2NhcmRzLmFwaS50ZXN0LmtleScsXG4gICAgICAgICAgY29udGV4dDoge1xuICAgICAgICAgICAgYXJnMDogMCxcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9O1xuXG4gICAgdGhyb3cgbmV3IEh0dHBFcnJvclJlc3BvbnNlKHtcbiAgICAgIGVycm9yOiByZXNwb25zZUJvZHksXG4gICAgICBzdGF0dXM6IDQwMyxcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiByZXNwb25zZTtcbn07XG4iXX0=