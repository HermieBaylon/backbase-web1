import { Injectable } from '@angular/core';
import { HttpResponse, HTTP_INTERCEPTORS, } from '@angular/common/http';
import { of } from 'rxjs';
import { flatMap, materialize, delay, dematerialize, map } from 'rxjs/operators';
import cardsGetHook from './cards-get';
import cardsGetErrorHook from './cards-get/error';
import cardGetHook from './card-get';
import cardGetErrorHook from './card-get/error';
import cardsLockStatusPostHook from './cards-lock-status-post';
import cardsReplacementPostHook from './cards-replacement-post';
import cardsActivationPostHook from './cards-activation-post';
import cardsLimitsPostHook from './cards-limit-post';
import travelNoticeGetHook from './travel-notice-get';
import travelNoticePostHook from './travel-notice-post';
import travelNoticeDeleteHook from './travel-notice-delete';
import * as i0 from "@angular/core";
export class CardsMockBackendInterceptor {
    intercept(request, next) {
        return of(undefined).pipe(
        // eslint-disable-next-line
        flatMap(() => {
            console.log(request.method, request.urlWithParams);
            if (request.url.endsWith('/cards') && request.method === 'GET') {
                return of(new HttpResponse({
                    body: [],
                    status: 200,
                })).pipe(map(cardsGetHook), map((response) => cardsGetErrorHook(response, request.params)));
            }
            if (request.url.indexOf('/cards/') > -1 && request.method === 'GET') {
                const paymentCardId = request.url.split('/')[request.url.split('/').length - 1];
                return of(new HttpResponse({
                    body: [],
                    status: 200,
                })).pipe(map(() => cardGetHook(paymentCardId)), map((response) => cardGetErrorHook(response)));
            }
            if (request.url.endsWith('/travel-notices') && request.method === 'GET') {
                return of(new HttpResponse({
                    body: [],
                    status: 200,
                })).pipe(map(travelNoticeGetHook));
            }
            if (request.url.endsWith('/travel-notices') && request.method === 'POST') {
                const travelNoticeItem = request.body;
                return of(new HttpResponse({
                    body: [],
                    status: 200,
                })).pipe(map(() => travelNoticePostHook(travelNoticeItem)));
            }
            if (request.url.indexOf('/travel-notices') !== -1 && request.method === 'DELETE') {
                const travelNoticeItemId = request.url.split('/')[request.url.split('/').length - 1];
                return of(new HttpResponse({
                    body: [],
                    status: 200,
                })).pipe(map(() => travelNoticeDeleteHook(travelNoticeItemId)));
            }
            if (request.url.endsWith('/lock-status') && request.method === 'POST') {
                const paymentCardId = request.url.split('/')[request.url.split('/').length - 2];
                return of(new HttpResponse({
                    body: [],
                    status: 200,
                })).pipe(map(() => cardGetHook(paymentCardId)), map((response) => cardsLockStatusPostHook(request, response)));
            }
            if (request.url.endsWith('/replacement') && request.method === 'POST') {
                const paymentCardId = request.url.split('/')[request.url.split('/').length - 2];
                return of(new HttpResponse({
                    body: [],
                    status: 200,
                })).pipe(map(() => cardGetHook(paymentCardId)), map((response) => cardsReplacementPostHook(response)));
            }
            if (request.url.endsWith('/limits') && request.method === 'POST') {
                const paymentCardId = request.url.split('/')[request.url.split('/').length - 2];
                const limits = request.body;
                return of(new HttpResponse({
                    body: [],
                    status: 200,
                })).pipe(map(() => cardGetHook(paymentCardId)), map((response) => cardsLimitsPostHook(response, limits)));
            }
            if (request.url.endsWith('/activation') && request.method === 'POST') {
                const paymentCardId = request.url.split('/')[request.url.split('/').length - 2];
                return of(new HttpResponse({
                    body: [],
                    status: 200,
                })).pipe(map(() => cardGetHook(paymentCardId)), map((response) => cardsActivationPostHook(response)));
            }
            if (request.url.endsWith('/pin/reset') && request.method === 'POST') {
                const paymentCardId = request.url.split('/')[request.url.split('/').length - 3];
                return of(new HttpResponse({
                    body: [],
                    status: 200,
                })).pipe(map(() => cardGetHook(paymentCardId)));
            }
            if (request.url.endsWith('/pin/request') && request.method === 'POST') {
                const paymentCardId = request.url.split('/')[request.url.split('/').length - 3];
                return of(new HttpResponse({
                    body: [],
                    status: 200,
                })).pipe(map(() => cardGetHook(paymentCardId)));
            }
            return next.handle(request);
        }), materialize(), delay(1000), dematerialize());
    }
}
CardsMockBackendInterceptor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsMockBackendInterceptor, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
CardsMockBackendInterceptor.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsMockBackendInterceptor });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsMockBackendInterceptor, decorators: [{
            type: Injectable
        }] });
export const CardsMockBackendProvider = {
    provide: HTTP_INTERCEPTORS,
    useClass: CardsMockBackendInterceptor,
    multi: true,
};
//# sourceMappingURL=data:application/json;base64,