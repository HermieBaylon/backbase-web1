import { Directive, EventEmitter, Input, Output } from '@angular/core';
import { ResetPinModeEnum } from '../../model/payment-card-reset-pin.model';
import { PaymentCardLockStatus } from '../../model/payment-card.model';
import * as i0 from "@angular/core";
// eslint-disable-next-line
export class PaymentCardControlsBase {
    constructor() {
        /**
         * Whether lock status is being updated.
         */
        this.isLockLoading = false;
        /**
         * Whether card replacement has been initiated.
         */
        this.isInitiateReplacementLoading = false;
        /**
         * Whether card replacement has been initiated.
         */
        this.isInitiateActivationLoading = false;
        /**
         * Whether card change pin has been initiated.
         */
        this.isResetPinLoading = false;
        /**
         * Event to update the lock status of the payment card.
         */
        this.updateLockStatus = new EventEmitter();
        /**
         * Event to initiate replacement of the payment card.
         */
        this.initiateReplacement = new EventEmitter();
        /**
         * Event to initiate activation of the payment card.
         */
        this.initiateActivation = new EventEmitter();
        /**
         * Event to initiate reset pin of the payment card.
         */
        this.resetPin = new EventEmitter();
        /**
         * Event to initiate requestPin pin of the payment card.
         */
        this.requestPin = new EventEmitter();
        this.hostRef = this;
    }
    ngOnInit() {
        if (typeof this.paymentCard === 'undefined') {
            throw new Error(`"paymentCard" input is required in "${this.constructor.name}"`);
        }
    }
    onLock() {
        this.updateLockStatus.emit(PaymentCardLockStatus.Locked);
    }
    onUnlock() {
        this.updateLockStatus.emit(PaymentCardLockStatus.Unlocked);
    }
    get isLocked() {
        return this.paymentCard && this.paymentCard.lockStatus === PaymentCardLockStatus.Locked;
    }
    get resetPinMode() {
        if (this.paymentCard) {
            if (this.paymentCard.type === 'Credit') {
                return ResetPinModeEnum.Request;
            }
            return ResetPinModeEnum.Reset;
        }
        return '';
    }
    onInitiateReplacement(replacementReason) {
        this.initiateReplacement.emit(replacementReason);
    }
    onInitiateActivation(token) {
        this.initiateActivation.emit(token);
    }
    onResetPin(token) {
        this.resetPin.emit(token);
    }
    onRequestPin(token) {
        this.requestPin.emit(token);
    }
}
PaymentCardControlsBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentCardControlsBase, deps: [], target: i0.ɵɵFactoryTarget.Directive });
PaymentCardControlsBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: PaymentCardControlsBase, inputs: { paymentCard: "paymentCard", isLockLoading: "isLockLoading", isInitiateReplacementLoading: "isInitiateReplacementLoading", isInitiateActivationLoading: "isInitiateActivationLoading", isResetPinLoading: "isResetPinLoading" }, outputs: { updateLockStatus: "updateLockStatus", initiateReplacement: "initiateReplacement", initiateActivation: "initiateActivation", resetPin: "resetPin", requestPin: "requestPin" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentCardControlsBase, decorators: [{
            type: Directive
        }], propDecorators: { paymentCard: [{
                type: Input
            }], isLockLoading: [{
                type: Input
            }], isInitiateReplacementLoading: [{
                type: Input
            }], isInitiateActivationLoading: [{
                type: Input
            }], isResetPinLoading: [{
                type: Input
            }], updateLockStatus: [{
                type: Output
            }], initiateReplacement: [{
                type: Output
            }], initiateActivation: [{
                type: Output
            }], resetPin: [{
                type: Output
            }], requestPin: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF5bWVudC1jYXJkLWNvbnRyb2xzLWJhc2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9jYXJkcy1jb21tb24tYW5nL3NyYy9jb21wb25lbnRzL2JiLXBheW1lbnQtY2FyZC1jb250cm9scy1iYXNlL3BheW1lbnQtY2FyZC1jb250cm9scy1iYXNlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQVUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRS9FLE9BQU8sRUFBZ0MsZ0JBQWdCLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQztBQUMxRyxPQUFPLEVBQWUscUJBQXFCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQzs7QUFHcEYsMkJBQTJCO0FBQzNCLE1BQU0sT0FBTyx1QkFBdUI7SUFGcEM7UUFPRTs7V0FFRztRQUNNLGtCQUFhLEdBQUcsS0FBSyxDQUFDO1FBQy9COztXQUVHO1FBQ00saUNBQTRCLEdBQUcsS0FBSyxDQUFDO1FBQzlDOztXQUVHO1FBQ00sZ0NBQTJCLEdBQUcsS0FBSyxDQUFDO1FBQzdDOztXQUVHO1FBQ00sc0JBQWlCLEdBQUcsS0FBSyxDQUFDO1FBQ25DOztXQUVHO1FBQ2dCLHFCQUFnQixHQUFHLElBQUksWUFBWSxFQUF5QixDQUFDO1FBQ2hGOztXQUVHO1FBQ2dCLHdCQUFtQixHQUFHLElBQUksWUFBWSxFQUF5QyxDQUFDO1FBQ25HOztXQUVHO1FBQ2dCLHVCQUFrQixHQUFHLElBQUksWUFBWSxFQUFVLENBQUM7UUFDbkU7O1dBRUc7UUFDZ0IsYUFBUSxHQUFHLElBQUksWUFBWSxFQUFnQyxDQUFDO1FBQy9FOztXQUVHO1FBQ2dCLGVBQVUsR0FBRyxJQUFJLFlBQVksRUFBZ0MsQ0FBQztRQUV4RSxZQUFPLEdBQUcsSUFBSSxDQUFDO0tBOEN6QjtJQTVDQyxRQUFRO1FBQ04sSUFBSSxPQUFPLElBQUksQ0FBQyxXQUFXLEtBQUssV0FBVyxFQUFFO1lBQzNDLE1BQU0sSUFBSSxLQUFLLENBQUMsdUNBQXVDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQztTQUNsRjtJQUNILENBQUM7SUFDRCxNQUFNO1FBQ0osSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMzRCxDQUFDO0lBRUQsUUFBUTtRQUNOLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMscUJBQXFCLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDN0QsQ0FBQztJQUVELElBQUksUUFBUTtRQUNWLE9BQU8sSUFBSSxDQUFDLFdBQVcsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsS0FBSyxxQkFBcUIsQ0FBQyxNQUFNLENBQUM7SUFDMUYsQ0FBQztJQUVELElBQUksWUFBWTtRQUNkLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNwQixJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxLQUFLLFFBQVEsRUFBRTtnQkFDdEMsT0FBTyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUM7YUFDakM7WUFFRCxPQUFPLGdCQUFnQixDQUFDLEtBQUssQ0FBQztTQUMvQjtRQUVELE9BQU8sRUFBRSxDQUFDO0lBQ1osQ0FBQztJQUVELHFCQUFxQixDQUFDLGlCQUF3RDtRQUM1RSxJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFDbkQsQ0FBQztJQUVELG9CQUFvQixDQUFDLEtBQWE7UUFDaEMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBRUQsVUFBVSxDQUFDLEtBQW1DO1FBQzVDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFFRCxZQUFZLENBQUMsS0FBbUM7UUFDOUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDOUIsQ0FBQzs7cUhBdkZVLHVCQUF1Qjt5R0FBdkIsdUJBQXVCOzRGQUF2Qix1QkFBdUI7a0JBRm5DLFNBQVM7OEJBTUMsV0FBVztzQkFBbkIsS0FBSztnQkFJRyxhQUFhO3NCQUFyQixLQUFLO2dCQUlHLDRCQUE0QjtzQkFBcEMsS0FBSztnQkFJRywyQkFBMkI7c0JBQW5DLEtBQUs7Z0JBSUcsaUJBQWlCO3NCQUF6QixLQUFLO2dCQUlhLGdCQUFnQjtzQkFBbEMsTUFBTTtnQkFJWSxtQkFBbUI7c0JBQXJDLE1BQU07Z0JBSVksa0JBQWtCO3NCQUFwQyxNQUFNO2dCQUlZLFFBQVE7c0JBQTFCLE1BQU07Z0JBSVksVUFBVTtzQkFBNUIsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25Jbml0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBheW1lbnRDYXJkUmVwbGFjZW1lbnRSZWFzb24gfSBmcm9tICcuLi8uLi9tb2RlbC9wYXltZW50LWNhcmQtcmVwbGFjZW1lbnQtcmVhc29uLm1vZGVsJztcbmltcG9ydCB7IFBheW1lbnRDYXJkUmVzZXRQaW5UcmFuc3BvcnQsIFJlc2V0UGluTW9kZUVudW0gfSBmcm9tICcuLi8uLi9tb2RlbC9wYXltZW50LWNhcmQtcmVzZXQtcGluLm1vZGVsJztcbmltcG9ydCB7IFBheW1lbnRDYXJkLCBQYXltZW50Q2FyZExvY2tTdGF0dXMgfSBmcm9tICcuLi8uLi9tb2RlbC9wYXltZW50LWNhcmQubW9kZWwnO1xuXG5ARGlyZWN0aXZlKClcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuZXhwb3J0IGNsYXNzIFBheW1lbnRDYXJkQ29udHJvbHNCYXNlIGltcGxlbWVudHMgT25Jbml0IHtcbiAgLyoqXG4gICAqIFBheW1lbnQgY2FyZCBpdGVtIHRoaXMgY29tcG9uZW50IGNvbnRyb2xzLlxuICAgKi9cbiAgQElucHV0KCkgcGF5bWVudENhcmQ6IFBheW1lbnRDYXJkIHwgdW5kZWZpbmVkO1xuICAvKipcbiAgICogV2hldGhlciBsb2NrIHN0YXR1cyBpcyBiZWluZyB1cGRhdGVkLlxuICAgKi9cbiAgQElucHV0KCkgaXNMb2NrTG9hZGluZyA9IGZhbHNlO1xuICAvKipcbiAgICogV2hldGhlciBjYXJkIHJlcGxhY2VtZW50IGhhcyBiZWVuIGluaXRpYXRlZC5cbiAgICovXG4gIEBJbnB1dCgpIGlzSW5pdGlhdGVSZXBsYWNlbWVudExvYWRpbmcgPSBmYWxzZTtcbiAgLyoqXG4gICAqIFdoZXRoZXIgY2FyZCByZXBsYWNlbWVudCBoYXMgYmVlbiBpbml0aWF0ZWQuXG4gICAqL1xuICBASW5wdXQoKSBpc0luaXRpYXRlQWN0aXZhdGlvbkxvYWRpbmcgPSBmYWxzZTtcbiAgLyoqXG4gICAqIFdoZXRoZXIgY2FyZCBjaGFuZ2UgcGluIGhhcyBiZWVuIGluaXRpYXRlZC5cbiAgICovXG4gIEBJbnB1dCgpIGlzUmVzZXRQaW5Mb2FkaW5nID0gZmFsc2U7XG4gIC8qKlxuICAgKiBFdmVudCB0byB1cGRhdGUgdGhlIGxvY2sgc3RhdHVzIG9mIHRoZSBwYXltZW50IGNhcmQuXG4gICAqL1xuICBAT3V0cHV0KCkgcmVhZG9ubHkgdXBkYXRlTG9ja1N0YXR1cyA9IG5ldyBFdmVudEVtaXR0ZXI8UGF5bWVudENhcmRMb2NrU3RhdHVzPigpO1xuICAvKipcbiAgICogRXZlbnQgdG8gaW5pdGlhdGUgcmVwbGFjZW1lbnQgb2YgdGhlIHBheW1lbnQgY2FyZC5cbiAgICovXG4gIEBPdXRwdXQoKSByZWFkb25seSBpbml0aWF0ZVJlcGxhY2VtZW50ID0gbmV3IEV2ZW50RW1pdHRlcjxQYXltZW50Q2FyZFJlcGxhY2VtZW50UmVhc29uIHwgc3RyaW5nPigpO1xuICAvKipcbiAgICogRXZlbnQgdG8gaW5pdGlhdGUgYWN0aXZhdGlvbiBvZiB0aGUgcGF5bWVudCBjYXJkLlxuICAgKi9cbiAgQE91dHB1dCgpIHJlYWRvbmx5IGluaXRpYXRlQWN0aXZhdGlvbiA9IG5ldyBFdmVudEVtaXR0ZXI8c3RyaW5nPigpO1xuICAvKipcbiAgICogRXZlbnQgdG8gaW5pdGlhdGUgcmVzZXQgcGluIG9mIHRoZSBwYXltZW50IGNhcmQuXG4gICAqL1xuICBAT3V0cHV0KCkgcmVhZG9ubHkgcmVzZXRQaW4gPSBuZXcgRXZlbnRFbWl0dGVyPFBheW1lbnRDYXJkUmVzZXRQaW5UcmFuc3BvcnQ+KCk7XG4gIC8qKlxuICAgKiBFdmVudCB0byBpbml0aWF0ZSByZXF1ZXN0UGluIHBpbiBvZiB0aGUgcGF5bWVudCBjYXJkLlxuICAgKi9cbiAgQE91dHB1dCgpIHJlYWRvbmx5IHJlcXVlc3RQaW4gPSBuZXcgRXZlbnRFbWl0dGVyPFBheW1lbnRDYXJkUmVzZXRQaW5UcmFuc3BvcnQ+KCk7XG5cbiAgcmVhZG9ubHkgaG9zdFJlZiA9IHRoaXM7XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLnBheW1lbnRDYXJkID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBcInBheW1lbnRDYXJkXCIgaW5wdXQgaXMgcmVxdWlyZWQgaW4gXCIke3RoaXMuY29uc3RydWN0b3IubmFtZX1cImApO1xuICAgIH1cbiAgfVxuICBvbkxvY2soKSB7XG4gICAgdGhpcy51cGRhdGVMb2NrU3RhdHVzLmVtaXQoUGF5bWVudENhcmRMb2NrU3RhdHVzLkxvY2tlZCk7XG4gIH1cblxuICBvblVubG9jaygpIHtcbiAgICB0aGlzLnVwZGF0ZUxvY2tTdGF0dXMuZW1pdChQYXltZW50Q2FyZExvY2tTdGF0dXMuVW5sb2NrZWQpO1xuICB9XG5cbiAgZ2V0IGlzTG9ja2VkKCkge1xuICAgIHJldHVybiB0aGlzLnBheW1lbnRDYXJkICYmIHRoaXMucGF5bWVudENhcmQubG9ja1N0YXR1cyA9PT0gUGF5bWVudENhcmRMb2NrU3RhdHVzLkxvY2tlZDtcbiAgfVxuXG4gIGdldCByZXNldFBpbk1vZGUoKSB7XG4gICAgaWYgKHRoaXMucGF5bWVudENhcmQpIHtcbiAgICAgIGlmICh0aGlzLnBheW1lbnRDYXJkLnR5cGUgPT09ICdDcmVkaXQnKSB7XG4gICAgICAgIHJldHVybiBSZXNldFBpbk1vZGVFbnVtLlJlcXVlc3Q7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBSZXNldFBpbk1vZGVFbnVtLlJlc2V0O1xuICAgIH1cblxuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIG9uSW5pdGlhdGVSZXBsYWNlbWVudChyZXBsYWNlbWVudFJlYXNvbjogUGF5bWVudENhcmRSZXBsYWNlbWVudFJlYXNvbiB8IHN0cmluZykge1xuICAgIHRoaXMuaW5pdGlhdGVSZXBsYWNlbWVudC5lbWl0KHJlcGxhY2VtZW50UmVhc29uKTtcbiAgfVxuXG4gIG9uSW5pdGlhdGVBY3RpdmF0aW9uKHRva2VuOiBzdHJpbmcpIHtcbiAgICB0aGlzLmluaXRpYXRlQWN0aXZhdGlvbi5lbWl0KHRva2VuKTtcbiAgfVxuXG4gIG9uUmVzZXRQaW4odG9rZW46IFBheW1lbnRDYXJkUmVzZXRQaW5UcmFuc3BvcnQpIHtcbiAgICB0aGlzLnJlc2V0UGluLmVtaXQodG9rZW4pO1xuICB9XG5cbiAgb25SZXF1ZXN0UGluKHRva2VuOiBQYXltZW50Q2FyZFJlc2V0UGluVHJhbnNwb3J0KSB7XG4gICAgdGhpcy5yZXF1ZXN0UGluLmVtaXQodG9rZW4pO1xuICB9XG59XG4iXX0=