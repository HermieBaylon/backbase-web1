import { Directive, EventEmitter, Input, Output } from '@angular/core';
import { PaymentCardLockStatus } from '../../model/payment-card.model';
import * as i0 from "@angular/core";
import * as i1 from "../../services/cards.service";
import * as i2 from "@backbase/ui-ang/notification";
const baseNotification = {
    header: '',
    message: '',
    dismissible: true,
    modifier: 'success',
};
// eslint-disable-next-line
export class PaymentCardContainerBase {
    constructor(cardsService, cd, notificationService) {
        this.cardsService = cardsService;
        this.cd = cd;
        this.notificationService = notificationService;
        /**
         * Notification messages translations
         */
        this.localizations = {
            activationErrorHeader: '',
            activationErrorMessage: '',
            activationSuccessHeader: '',
            lockErrorHeader: '',
            lockErrorMessage: '',
            lockSuccessHeader: '',
            lockSuccessMessage: '',
            replacementErrorHeader: '',
            replacementErrorMessage: '',
            replacementSuccessHeader: '',
            replacementSuccessMessage: '',
            requestNewPinSuccessMessage: '',
            requestPinErrorMessage: '',
            resetPinSuccessMessage: '',
            resetPinErrorMessage: '',
            resetInvalidPinMessage: '',
            unlockErrorHeader: '',
            unlockErrorMessage: '',
            unlockSuccessHeader: '',
            unlockSuccessMessage: '',
            updateLimitErrorHeader: '',
            updateLimitErrorMessage: '',
            updateLimitSuccessHeader: '',
            updateLimitSuccessMessage: '',
        };
        /**
         * Event emitter for selecting a card.
         */
        this.selectCard = new EventEmitter();
        this.isLockLoading = false;
        this.isInitiateReplacementLoading = false;
        this.isInitiateActivationLoading = false;
        this.isResetPinLoading = false;
        this.isLimitsLoading = false;
    }
    showNotification(notification) {
        this.notificationService.showNotification(Object.assign(Object.assign(Object.assign({}, baseNotification), { ttl: this.notificationTtl }), notification));
    }
    ngOnInit() {
        if (typeof this.paymentCard === 'undefined') {
            throw new Error(`"paymentCard" input is required in "${this.constructor.name}"`);
        }
    }
    onUpdateLockStatus(lockStatus) {
        if (typeof this.paymentCard === 'undefined') {
            return;
        }
        this.isLockLoading = true;
        const onUpdateLockStatusSuccess = (paymentCard) => {
            if (typeof this.paymentCard !== 'undefined') {
                this.paymentCard = paymentCard;
                const header = lockStatus === PaymentCardLockStatus.Locked
                    ? this.localizations.lockSuccessHeader
                    : this.localizations.unlockSuccessHeader;
                const message = lockStatus === PaymentCardLockStatus.Locked
                    ? this.localizations.lockSuccessMessage
                    : this.localizations.unlockSuccessMessage;
                this.showNotification({
                    header,
                    message,
                });
            }
        };
        const onUpdateLockStatusError = () => {
            if (typeof this.paymentCard !== 'undefined') {
                const header = lockStatus === PaymentCardLockStatus.Locked
                    ? this.localizations.lockErrorHeader
                    : this.localizations.unlockErrorHeader;
                const message = lockStatus === PaymentCardLockStatus.Locked
                    ? this.localizations.lockErrorMessage
                    : this.localizations.unlockErrorMessage;
                this.showNotification({
                    header,
                    message,
                    modifier: 'error',
                });
            }
            this.isLockLoading = false;
            this.cd.markForCheck();
        };
        const onUpdateLockStatusComplete = () => {
            this.isLockLoading = false;
            this.cd.markForCheck();
        };
        this.cardsService
            .updateLockStatus(this.paymentCard, lockStatus)
            .subscribe(onUpdateLockStatusSuccess, onUpdateLockStatusError, onUpdateLockStatusComplete);
    }
    onInitiateReplacement(reason) {
        if (typeof this.paymentCard === 'undefined') {
            return;
        }
        this.isInitiateReplacementLoading = true;
        const onInitiateReplacementSuccess = (paymentCard) => {
            if (typeof this.paymentCard !== 'undefined') {
                this.paymentCard = paymentCard;
                this.showNotification({
                    header: this.localizations.replacementSuccessHeader,
                    message: this.localizations.replacementSuccessMessage,
                });
            }
        };
        const onInitiateReplacementError = () => {
            if (typeof this.paymentCard !== 'undefined') {
                this.showNotification({
                    header: this.localizations.replacementErrorHeader,
                    message: this.localizations.replacementErrorMessage,
                    modifier: 'error',
                });
            }
            this.isInitiateReplacementLoading = false;
            this.cd.markForCheck();
        };
        const onInitiateReplacementComplete = () => {
            this.isInitiateReplacementLoading = false;
            this.cd.markForCheck();
        };
        this.cardsService
            .initiateReplacement(this.paymentCard, reason)
            .subscribe(onInitiateReplacementSuccess, onInitiateReplacementError, onInitiateReplacementComplete);
    }
    onInitiateActivation(token) {
        if (typeof this.paymentCard === 'undefined') {
            return;
        }
        this.isInitiateActivationLoading = true;
        const onInitiateActivationSuccess = (paymentCard) => {
            if (typeof this.paymentCard !== 'undefined') {
                this.paymentCard = paymentCard;
                this.showNotification({
                    header: this.localizations.activationSuccessHeader,
                });
            }
        };
        const onInitiateActivationError = () => {
            if (typeof this.paymentCard !== 'undefined') {
                this.showNotification({
                    header: this.localizations.activationErrorHeader,
                    message: this.localizations.activationErrorMessage,
                    modifier: 'error',
                });
            }
            this.isInitiateActivationLoading = false;
            this.cd.markForCheck();
        };
        const onInitiateActivationComplete = () => {
            this.isInitiateActivationLoading = false;
            this.cd.markForCheck();
        };
        this.cardsService
            .initiateActivation(this.paymentCard, token)
            .subscribe(onInitiateActivationSuccess, onInitiateActivationError, onInitiateActivationComplete);
    }
    onUpdateLimit(limit) {
        if (typeof this.paymentCard === 'undefined') {
            return;
        }
        this.isLimitsLoading = true;
        const onUpdateLimitSuccess = (paymentCard) => {
            if (typeof this.paymentCard !== 'undefined') {
                this.paymentCard = paymentCard;
                this.showNotification({
                    header: this.localizations.updateLimitSuccessHeader,
                    message: this.localizations.updateLimitSuccessMessage,
                });
            }
        };
        const onUpdateLimitError = () => {
            if (typeof this.paymentCard !== 'undefined') {
                this.notificationService.showNotification(Object.assign(Object.assign({}, baseNotification), { header: this.localizations.updateLimitErrorHeader, message: this.localizations.updateLimitErrorMessage, modifier: 'error' }));
            }
            this.isLimitsLoading = false;
            this.cd.markForCheck();
        };
        const onUpdateLimitComplete = () => {
            this.isLimitsLoading = false;
            this.cd.markForCheck();
        };
        this.cardsService
            .updateLimit(this.paymentCard, limit, this.updateAllLimits)
            .subscribe(onUpdateLimitSuccess, onUpdateLimitError, onUpdateLimitComplete);
    }
    onResetPin(token) {
        if (typeof this.paymentCard === 'undefined') {
            return;
        }
        this.isResetPinLoading = true;
        if (token.raw.pin2 !== undefined && token.raw.pin !== token.raw.pin2) {
            this.isResetPinLoading = false;
            this.showNotification({
                message: this.localizations.resetInvalidPinMessage,
                modifier: 'error',
            });
            return;
        }
        const onResetPinSuccess = (paymentCard) => {
            if (typeof this.paymentCard !== 'undefined') {
                this.paymentCard = paymentCard;
                this.showNotification({
                    message: this.localizations.resetPinSuccessMessage,
                });
            }
        };
        const onResetPinError = () => {
            if (typeof this.paymentCard !== 'undefined') {
                this.showNotification({
                    message: this.localizations.resetPinErrorMessage,
                    modifier: 'error',
                });
            }
            this.isResetPinLoading = false;
            this.cd.markForCheck();
        };
        const onResetPinComplete = () => {
            this.isResetPinLoading = false;
            this.cd.markForCheck();
        };
        this.cardsService
            .resetPIN(this.paymentCard, token.model)
            .subscribe(onResetPinSuccess, onResetPinError, onResetPinComplete);
    }
    onRequestPin(token) {
        if (typeof this.paymentCard === 'undefined') {
            return;
        }
        this.isResetPinLoading = true;
        const onRequestPinSuccess = (paymentCard) => {
            if (typeof this.paymentCard !== 'undefined') {
                this.paymentCard = paymentCard;
                this.showNotification({
                    message: this.localizations.requestNewPinSuccessMessage,
                });
            }
        };
        const onRequestPinError = () => {
            if (typeof this.paymentCard !== 'undefined') {
                this.showNotification({
                    message: this.localizations.requestPinErrorMessage,
                    modifier: 'error',
                });
            }
            this.isResetPinLoading = false;
            this.cd.markForCheck();
        };
        const onRequestPinComplete = () => {
            this.isResetPinLoading = false;
            this.cd.markForCheck();
        };
        this.cardsService
            .requestPIN(this.paymentCard, token.model)
            .subscribe(onRequestPinSuccess, onRequestPinError, onRequestPinComplete);
    }
    onOpenDetails() {
        if (typeof this.paymentCard !== 'undefined') {
            this.selectCard.emit(this.paymentCard);
        }
    }
}
PaymentCardContainerBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentCardContainerBase, deps: [{ token: i1.CardsService }, { token: i0.ChangeDetectorRef }, { token: i2.NotificationService }], target: i0.ɵɵFactoryTarget.Directive });
PaymentCardContainerBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: PaymentCardContainerBase, inputs: { paymentCard: "paymentCard", notificationTtl: "notificationTtl", updateAllLimits: "updateAllLimits" }, outputs: { selectCard: "selectCard" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentCardContainerBase, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i1.CardsService }, { type: i0.ChangeDetectorRef }, { type: i2.NotificationService }]; }, propDecorators: { paymentCard: [{
                type: Input
            }], notificationTtl: [{
                type: Input
            }], updateAllLimits: [{
                type: Input
            }], selectCard: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,