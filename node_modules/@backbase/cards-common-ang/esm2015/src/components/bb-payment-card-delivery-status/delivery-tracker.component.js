import { Component, Input } from '@angular/core';
import { PaymentCardDeliveryStepStatus } from '../../model/payment-card-delivery-status.model';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/icon";
import * as i2 from "@angular/common";
/**
 * @name DeliveryTrackerComponent
 *
 * @description
 * Component that displays the steps to fulfill an activity.
 */
export class DeliveryTrackerComponent {
    constructor() {
        /**
         * The steps that this component displays the steps of.  Mandatory.
         */
        this.steps = [];
        /**
         * Color for the icons and the lines
         */
        this.color = 'primary';
    }
    get currentStep() {
        const steps = this.steps.filter((step) => step.status === PaymentCardDeliveryStepStatus.Success);
        if (steps.length > 0) {
            return steps[steps.length - 1];
        }
        return undefined;
    }
    get stepColorClassName() {
        return `bb-delivery-tracker__step-icon-${this.color}`;
    }
    getStepClassName(step) {
        const stepClassName = step.name.toLowerCase().replace(/\W/g, '-').replace(/-{2,}/g, '-');
        return `bb-delivery-tracker__step--${stepClassName}`;
    }
    getStepIconClassName(name) {
        const stepClassName = name.toLowerCase().replace(/\W/g, '-').replace(/-{2,}/g, '-');
        return `delivery-tracker__step--${stepClassName}`;
    }
    ngOnInit() {
        if (typeof this.steps === 'undefined') {
            throw new Error(`"steps" input is required in "${this.constructor.name}"`);
        }
    }
}
DeliveryTrackerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: DeliveryTrackerComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
DeliveryTrackerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: DeliveryTrackerComponent, selector: "bb-delivery-tracker", inputs: { steps: "steps", color: "color" }, ngImport: i0, template: "<div class=\"bb-delivery-tracker\">\n  <div\n    class=\"bb-delivery-tracker__step\"\n    *ngFor=\"let step of steps\"\n    [ngClass]=\"[\n      step === currentStep ? 'active' : '',\n      getStepClassName(step)\n    ]\"\n  >\n    <div\n      class=\"bb-delivery-tracker__step-icon\"\n      [ngClass]=\"[\n        stepColorClassName,\n        step.status !== 'SUCCESS' ? 'bb-delivery-tracker__step-icon--disabled' : ''\n      ]\"\n    >\n      <bb-icon-ui \n        [name]=\"getStepIconClassName(step.status === 'SUCCESS' ? 'ordered' : step.name)\"\n        backgroundType=\"circle\"\n        size=\"md\"\n        [color]=\"step.status === 'SUCCESS' ? color : 'light'\"\n      ></bb-icon-ui>\n    </div>\n    <div\n      class=\"bb-delivery-tracker__step-text\"\n      [ngClass]=\"{'bb-text-support': step.status !== 'SUCCESS'}\"\n    >\n      {{ step.name }}\n    </div>\n    <div\n      class=\"bb-delivery-tracker__step-date bb-subtitle\"\n      *ngIf=\"step.stepDateTime\"\n    >\n      {{ step.stepDateTime | date }} at {{step.stepDateTime | date:'shortTime'}}\n    </div>\n  </div>\n</div>\n", components: [{ type: i1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "date": i2.DatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: DeliveryTrackerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-delivery-tracker',
                    templateUrl: './delivery-tracker.component.html',
                }]
        }], propDecorators: { steps: [{
                type: Input
            }], color: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVsaXZlcnktdHJhY2tlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL2NhcmRzLWNvbW1vbi1hbmcvc3JjL2NvbXBvbmVudHMvYmItcGF5bWVudC1jYXJkLWRlbGl2ZXJ5LXN0YXR1cy9kZWxpdmVyeS10cmFja2VyLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvY2FyZHMtY29tbW9uLWFuZy9zcmMvY29tcG9uZW50cy9iYi1wYXltZW50LWNhcmQtZGVsaXZlcnktc3RhdHVzL2RlbGl2ZXJ5LXRyYWNrZXIuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFDekQsT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0sZ0RBQWdELENBQUM7Ozs7QUFVL0Y7Ozs7O0dBS0c7QUFLSCxNQUFNLE9BQU8sd0JBQXdCO0lBSnJDO1FBS0U7O1dBRUc7UUFDTSxVQUFLLEdBQStCLEVBQUUsQ0FBQztRQUNoRDs7V0FFRztRQUNNLFVBQUssR0FBRyxTQUFTLENBQUM7S0FnQzVCO0lBOUJDLElBQUksV0FBVztRQUNiLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxLQUFLLDZCQUE2QixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2pHLElBQUksS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDcEIsT0FBTyxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQztTQUNoQztRQUVELE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7SUFFRCxJQUFJLGtCQUFrQjtRQUNwQixPQUFPLGtDQUFrQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDeEQsQ0FBQztJQUVELGdCQUFnQixDQUFDLElBQXlCO1FBQ3hDLE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBRXpGLE9BQU8sOEJBQThCLGFBQWEsRUFBRSxDQUFDO0lBQ3ZELENBQUM7SUFFRCxvQkFBb0IsQ0FBQyxJQUFZO1FBQy9CLE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFFcEYsT0FBTywyQkFBMkIsYUFBYSxFQUFFLENBQUM7SUFDcEQsQ0FBQztJQUVELFFBQVE7UUFDTixJQUFJLE9BQU8sSUFBSSxDQUFDLEtBQUssS0FBSyxXQUFXLEVBQUU7WUFDckMsTUFBTSxJQUFJLEtBQUssQ0FBQyxpQ0FBaUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDO1NBQzVFO0lBQ0gsQ0FBQzs7c0hBdkNVLHdCQUF3QjswR0FBeEIsd0JBQXdCLHVHQ3JCckMsNGtDQXFDQTs0RkRoQmEsd0JBQXdCO2tCQUpwQyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxxQkFBcUI7b0JBQy9CLFdBQVcsRUFBRSxtQ0FBbUM7aUJBQ2pEOzhCQUtVLEtBQUs7c0JBQWIsS0FBSztnQkFJRyxLQUFLO3NCQUFiLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBheW1lbnRDYXJkRGVsaXZlcnlTdGVwU3RhdHVzIH0gZnJvbSAnLi4vLi4vbW9kZWwvcGF5bWVudC1jYXJkLWRlbGl2ZXJ5LXN0YXR1cy5tb2RlbCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGVsaXZlcnlUcmFja2VyU3RlcCB7XG4gIG5hbWU6IHN0cmluZztcbiAgc3RhdHVzOiAnUEVORElORycgfCAnU1VDQ0VTUycgfCAnRkFJTEVEJztcbiAgc3VidGV4dD86IHN0cmluZztcbiAgaWNvbj86IHN0cmluZztcbiAgc3RlcERhdGVUaW1lPzogc3RyaW5nO1xufVxuXG4vKipcbiAqIEBuYW1lIERlbGl2ZXJ5VHJhY2tlckNvbXBvbmVudFxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogQ29tcG9uZW50IHRoYXQgZGlzcGxheXMgdGhlIHN0ZXBzIHRvIGZ1bGZpbGwgYW4gYWN0aXZpdHkuXG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2JiLWRlbGl2ZXJ5LXRyYWNrZXInLFxuICB0ZW1wbGF0ZVVybDogJy4vZGVsaXZlcnktdHJhY2tlci5jb21wb25lbnQuaHRtbCcsXG59KVxuZXhwb3J0IGNsYXNzIERlbGl2ZXJ5VHJhY2tlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIC8qKlxuICAgKiBUaGUgc3RlcHMgdGhhdCB0aGlzIGNvbXBvbmVudCBkaXNwbGF5cyB0aGUgc3RlcHMgb2YuICBNYW5kYXRvcnkuXG4gICAqL1xuICBASW5wdXQoKSBzdGVwczogQXJyYXk8RGVsaXZlcnlUcmFja2VyU3RlcD4gPSBbXTtcbiAgLyoqXG4gICAqIENvbG9yIGZvciB0aGUgaWNvbnMgYW5kIHRoZSBsaW5lc1xuICAgKi9cbiAgQElucHV0KCkgY29sb3IgPSAncHJpbWFyeSc7XG5cbiAgZ2V0IGN1cnJlbnRTdGVwKCkge1xuICAgIGNvbnN0IHN0ZXBzID0gdGhpcy5zdGVwcy5maWx0ZXIoKHN0ZXApID0+IHN0ZXAuc3RhdHVzID09PSBQYXltZW50Q2FyZERlbGl2ZXJ5U3RlcFN0YXR1cy5TdWNjZXNzKTtcbiAgICBpZiAoc3RlcHMubGVuZ3RoID4gMCkge1xuICAgICAgcmV0dXJuIHN0ZXBzW3N0ZXBzLmxlbmd0aCAtIDFdO1xuICAgIH1cblxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICBnZXQgc3RlcENvbG9yQ2xhc3NOYW1lKCkge1xuICAgIHJldHVybiBgYmItZGVsaXZlcnktdHJhY2tlcl9fc3RlcC1pY29uLSR7dGhpcy5jb2xvcn1gO1xuICB9XG5cbiAgZ2V0U3RlcENsYXNzTmFtZShzdGVwOiBEZWxpdmVyeVRyYWNrZXJTdGVwKSB7XG4gICAgY29uc3Qgc3RlcENsYXNzTmFtZSA9IHN0ZXAubmFtZS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1xcVy9nLCAnLScpLnJlcGxhY2UoLy17Mix9L2csICctJyk7XG5cbiAgICByZXR1cm4gYGJiLWRlbGl2ZXJ5LXRyYWNrZXJfX3N0ZXAtLSR7c3RlcENsYXNzTmFtZX1gO1xuICB9XG5cbiAgZ2V0U3RlcEljb25DbGFzc05hbWUobmFtZTogc3RyaW5nKSB7XG4gICAgY29uc3Qgc3RlcENsYXNzTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9cXFcvZywgJy0nKS5yZXBsYWNlKC8tezIsfS9nLCAnLScpO1xuXG4gICAgcmV0dXJuIGBkZWxpdmVyeS10cmFja2VyX19zdGVwLS0ke3N0ZXBDbGFzc05hbWV9YDtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5zdGVwcyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgXCJzdGVwc1wiIGlucHV0IGlzIHJlcXVpcmVkIGluIFwiJHt0aGlzLmNvbnN0cnVjdG9yLm5hbWV9XCJgKTtcbiAgICB9XG4gIH1cbn1cbiIsIjxkaXYgY2xhc3M9XCJiYi1kZWxpdmVyeS10cmFja2VyXCI+XG4gIDxkaXZcbiAgICBjbGFzcz1cImJiLWRlbGl2ZXJ5LXRyYWNrZXJfX3N0ZXBcIlxuICAgICpuZ0Zvcj1cImxldCBzdGVwIG9mIHN0ZXBzXCJcbiAgICBbbmdDbGFzc109XCJbXG4gICAgICBzdGVwID09PSBjdXJyZW50U3RlcCA/ICdhY3RpdmUnIDogJycsXG4gICAgICBnZXRTdGVwQ2xhc3NOYW1lKHN0ZXApXG4gICAgXVwiXG4gID5cbiAgICA8ZGl2XG4gICAgICBjbGFzcz1cImJiLWRlbGl2ZXJ5LXRyYWNrZXJfX3N0ZXAtaWNvblwiXG4gICAgICBbbmdDbGFzc109XCJbXG4gICAgICAgIHN0ZXBDb2xvckNsYXNzTmFtZSxcbiAgICAgICAgc3RlcC5zdGF0dXMgIT09ICdTVUNDRVNTJyA/ICdiYi1kZWxpdmVyeS10cmFja2VyX19zdGVwLWljb24tLWRpc2FibGVkJyA6ICcnXG4gICAgICBdXCJcbiAgICA+XG4gICAgICA8YmItaWNvbi11aSBcbiAgICAgICAgW25hbWVdPVwiZ2V0U3RlcEljb25DbGFzc05hbWUoc3RlcC5zdGF0dXMgPT09ICdTVUNDRVNTJyA/ICdvcmRlcmVkJyA6IHN0ZXAubmFtZSlcIlxuICAgICAgICBiYWNrZ3JvdW5kVHlwZT1cImNpcmNsZVwiXG4gICAgICAgIHNpemU9XCJtZFwiXG4gICAgICAgIFtjb2xvcl09XCJzdGVwLnN0YXR1cyA9PT0gJ1NVQ0NFU1MnID8gY29sb3IgOiAnbGlnaHQnXCJcbiAgICAgID48L2JiLWljb24tdWk+XG4gICAgPC9kaXY+XG4gICAgPGRpdlxuICAgICAgY2xhc3M9XCJiYi1kZWxpdmVyeS10cmFja2VyX19zdGVwLXRleHRcIlxuICAgICAgW25nQ2xhc3NdPVwieydiYi10ZXh0LXN1cHBvcnQnOiBzdGVwLnN0YXR1cyAhPT0gJ1NVQ0NFU1MnfVwiXG4gICAgPlxuICAgICAge3sgc3RlcC5uYW1lIH19XG4gICAgPC9kaXY+XG4gICAgPGRpdlxuICAgICAgY2xhc3M9XCJiYi1kZWxpdmVyeS10cmFja2VyX19zdGVwLWRhdGUgYmItc3VidGl0bGVcIlxuICAgICAgKm5nSWY9XCJzdGVwLnN0ZXBEYXRlVGltZVwiXG4gICAgPlxuICAgICAge3sgc3RlcC5zdGVwRGF0ZVRpbWUgfCBkYXRlIH19IGF0IHt7c3RlcC5zdGVwRGF0ZVRpbWUgfCBkYXRlOidzaG9ydFRpbWUnfX1cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L2Rpdj5cbiJdfQ==