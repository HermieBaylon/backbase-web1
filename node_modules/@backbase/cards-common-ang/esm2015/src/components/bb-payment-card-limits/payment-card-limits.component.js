import { Component, Directive, EventEmitter, Input, Output } from '@angular/core';
import { BbTemplate } from '@backbase/foundation-ang/core';
import * as i0 from "@angular/core";
import * as i1 from "./payment-card-limit.component";
import * as i2 from "@backbase/ui-ang/loading-indicator";
import * as i3 from "@angular/common";
export class PaymentCardLimitsComponent {
    constructor() {
        /**
         * Event to update limit of payment card;
         */
        this.updateLimit = new EventEmitter();
        /**
         * Reference to instance of customizable component.
         */
        this.hostRef = this;
    }
    onUpdateLimit(limit) {
        if (this.paymentCard) {
            const limits = this.paymentCard.limits;
            if (limits) {
                this.updateLimit.emit(limits.map((item) => {
                    let amount = item.amount;
                    if (limit.cardLimit && item.id === limit.cardLimit.id) {
                        amount = +limit.amount;
                    }
                    return {
                        amount,
                        id: item.id,
                        frequency: item.frequency,
                    };
                }));
            }
        }
    }
}
PaymentCardLimitsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentCardLimitsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
PaymentCardLimitsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: PaymentCardLimitsComponent, selector: "bb-payment-card-limits", inputs: { paymentCard: "paymentCard", isLimitsLoading: "isLimitsLoading" }, outputs: { updateLimit: "updateLimit" }, ngImport: i0, template: "<ng-container bbCardsUpdateLimitsCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n<ng-template bbCardsUpdateLimitsCustomizable let-hostRef>\n  <div class=\"card bb-list\" *ngIf=\"hostRef.paymentCard?.limits\">\n    <div class=\"card-header\">\n      <h2 i18n=\"Limits update heading|update card limits header@@card.updateLimit.heading\">\n        Limits\n      </h2>\n    </div>\n    <div class=\"card-body\">\n      <div class=\"bb-list\" *ngIf=\"!hostRef.isLimitsLoading; else loadingTemplate\">\n        <div class=\"bb-list__item\" *ngFor=\"let limit of hostRef.paymentCard.limits\">\n          <bb-payment-card-limit \n            [limit]=\"limit\"\n            [currency]=\"hostRef.paymentCard.currency\"\n            (updateLimit)=\"hostRef.onUpdateLimit($event)\"\n          ></bb-payment-card-limit>\n        </div>\n      </div>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #loadingTemplate>\n  <bb-loading-indicator-ui loaderSize=\"lg\"></bb-loading-indicator-ui>\n</ng-template>", components: [{ type: i0.forwardRef(function () { return i1.PaymentCardLimitComponent; }), selector: "bb-payment-card-limit", inputs: ["currency", "limit"], outputs: ["updateLimit"] }, { type: i0.forwardRef(function () { return i2.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }], directives: [{ type: i0.forwardRef(function () { return CardsUpdateLimitsCustomizableDirective; }), selector: "[bbCardsUpdateLimitsCustomizable]" }, { type: i0.forwardRef(function () { return i3.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i3.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentCardLimitsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payment-card-limits',
                    templateUrl: './payment-card-limits.component.html',
                }]
        }], propDecorators: { paymentCard: [{
                type: Input
            }], isLimitsLoading: [{
                type: Input
            }], updateLimit: [{
                type: Output
            }] } });
export class CardsUpdateLimitsCustomizableDirective extends BbTemplate {
}
CardsUpdateLimitsCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsUpdateLimitsCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
CardsUpdateLimitsCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: CardsUpdateLimitsCustomizableDirective, selector: "[bbCardsUpdateLimitsCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsUpdateLimitsCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbCardsUpdateLimitsCustomizable]',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF5bWVudC1jYXJkLWxpbWl0cy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL2NhcmRzLWNvbW1vbi1hbmcvc3JjL2NvbXBvbmVudHMvYmItcGF5bWVudC1jYXJkLWxpbWl0cy9wYXltZW50LWNhcmQtbGltaXRzLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvY2FyZHMtY29tbW9uLWFuZy9zcmMvY29tcG9uZW50cy9iYi1wYXltZW50LWNhcmQtbGltaXRzL3BheW1lbnQtY2FyZC1saW1pdHMuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbEYsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLCtCQUErQixDQUFDOzs7OztBQVEzRCxNQUFNLE9BQU8sMEJBQTBCO0lBSnZDO1FBYUU7O1dBRUc7UUFDZ0IsZ0JBQVcsR0FBRyxJQUFJLFlBQVksRUFBc0IsQ0FBQztRQUV4RTs7V0FFRztRQUNNLFlBQU8sR0FBRyxJQUFJLENBQUM7S0F1QnpCO0lBckJDLGFBQWEsQ0FBQyxLQUFrRTtRQUM5RSxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDcEIsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUM7WUFDdkMsSUFBSSxNQUFNLEVBQUU7Z0JBQ1YsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQ25CLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtvQkFDbEIsSUFBSSxNQUFNLEdBQW9CLElBQUksQ0FBQyxNQUFNLENBQUM7b0JBQzFDLElBQUksS0FBSyxDQUFDLFNBQVMsSUFBSSxJQUFJLENBQUMsRUFBRSxLQUFLLEtBQUssQ0FBQyxTQUFTLENBQUMsRUFBRSxFQUFFO3dCQUNyRCxNQUFNLEdBQUcsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDO3FCQUN4QjtvQkFFRCxPQUFPO3dCQUNMLE1BQU07d0JBQ04sRUFBRSxFQUFFLElBQUksQ0FBQyxFQUFFO3dCQUNYLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUztxQkFDMUIsQ0FBQztnQkFDSixDQUFDLENBQUMsQ0FDSCxDQUFDO2FBQ0g7U0FDRjtJQUNILENBQUM7O3dIQXZDVSwwQkFBMEI7NEdBQTFCLDBCQUEwQixtTENUdkMsOCtCQXdCYywrYUQ4QkQsc0NBQXNDOzRGQTdDdEMsMEJBQTBCO2tCQUp0QyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSx3QkFBd0I7b0JBQ2xDLFdBQVcsRUFBRSxzQ0FBc0M7aUJBQ3BEOzhCQUtVLFdBQVc7c0JBQW5CLEtBQUs7Z0JBSUcsZUFBZTtzQkFBdkIsS0FBSztnQkFJYSxXQUFXO3NCQUE3QixNQUFNOztBQWlDVCxNQUFNLE9BQU8sc0NBQXVDLFNBQVEsVUFBaUQ7O29JQUFoRyxzQ0FBc0M7d0hBQXRDLHNDQUFzQzs0RkFBdEMsc0NBQXNDO2tCQUhsRCxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxtQ0FBbUM7aUJBQzlDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBEaXJlY3RpdmUsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQmJUZW1wbGF0ZSB9IGZyb20gJ0BiYWNrYmFzZS9mb3VuZGF0aW9uLWFuZy9jb3JlJztcbmltcG9ydCB7IFBheW1lbnRDYXJkTGltaXQgfSBmcm9tICcuLi8uLi9tb2RlbC9wYXltZW50LWNhcmQtbGltaXQubW9kZWwnO1xuaW1wb3J0IHsgUGF5bWVudENhcmQgfSBmcm9tICcuLi8uLi9tb2RlbC9wYXltZW50LWNhcmQubW9kZWwnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdiYi1wYXltZW50LWNhcmQtbGltaXRzJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3BheW1lbnQtY2FyZC1saW1pdHMuY29tcG9uZW50Lmh0bWwnLFxufSlcbmV4cG9ydCBjbGFzcyBQYXltZW50Q2FyZExpbWl0c0NvbXBvbmVudCB7XG4gIC8qKlxuICAgKiBQYXltZW50IGNhcmQgdG8gYmUgZGlzcGxheWVkLlxuICAgKi9cbiAgQElucHV0KCkgcGF5bWVudENhcmQ6IFBheW1lbnRDYXJkIHwgdW5kZWZpbmVkO1xuICAvKipcbiAgICogTG9hZGluZyBzdGF0dXMgb2YgbGltaXQgdXBkYXRlIEFQSVxuICAgKi9cbiAgQElucHV0KCkgaXNMaW1pdHNMb2FkaW5nPzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIEV2ZW50IHRvIHVwZGF0ZSBsaW1pdCBvZiBwYXltZW50IGNhcmQ7XG4gICAqL1xuICBAT3V0cHV0KCkgcmVhZG9ubHkgdXBkYXRlTGltaXQgPSBuZXcgRXZlbnRFbWl0dGVyPFBheW1lbnRDYXJkTGltaXRbXT4oKTtcblxuICAvKipcbiAgICogUmVmZXJlbmNlIHRvIGluc3RhbmNlIG9mIGN1c3RvbWl6YWJsZSBjb21wb25lbnQuXG4gICAqL1xuICByZWFkb25seSBob3N0UmVmID0gdGhpcztcblxuICBvblVwZGF0ZUxpbWl0KGxpbWl0OiB7IGFtb3VudDogc3RyaW5nOyBjYXJkTGltaXQ6IFBheW1lbnRDYXJkTGltaXQgfCB1bmRlZmluZWQgfSkge1xuICAgIGlmICh0aGlzLnBheW1lbnRDYXJkKSB7XG4gICAgICBjb25zdCBsaW1pdHMgPSB0aGlzLnBheW1lbnRDYXJkLmxpbWl0cztcbiAgICAgIGlmIChsaW1pdHMpIHtcbiAgICAgICAgdGhpcy51cGRhdGVMaW1pdC5lbWl0KFxuICAgICAgICAgIGxpbWl0cy5tYXAoKGl0ZW0pID0+IHtcbiAgICAgICAgICAgIGxldCBhbW91bnQ6IG51bWJlciB8IHN0cmluZyA9IGl0ZW0uYW1vdW50O1xuICAgICAgICAgICAgaWYgKGxpbWl0LmNhcmRMaW1pdCAmJiBpdGVtLmlkID09PSBsaW1pdC5jYXJkTGltaXQuaWQpIHtcbiAgICAgICAgICAgICAgYW1vdW50ID0gK2xpbWl0LmFtb3VudDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgYW1vdW50LFxuICAgICAgICAgICAgICBpZDogaXRlbS5pZCxcbiAgICAgICAgICAgICAgZnJlcXVlbmN5OiBpdGVtLmZyZXF1ZW5jeSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSksXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tiYkNhcmRzVXBkYXRlTGltaXRzQ3VzdG9taXphYmxlXScsXG59KVxuZXhwb3J0IGNsYXNzIENhcmRzVXBkYXRlTGltaXRzQ3VzdG9taXphYmxlRGlyZWN0aXZlIGV4dGVuZHMgQmJUZW1wbGF0ZTxQYXltZW50Q2FyZExpbWl0c0NvbXBvbmVudCwgdW5kZWZpbmVkPiB7fVxuIiwiPG5nLWNvbnRhaW5lciBiYkNhcmRzVXBkYXRlTGltaXRzQ3VzdG9taXphYmxlIFtiYkhvc3RSZWZdPVwiaG9zdFJlZlwiPjwvbmctY29udGFpbmVyPlxuPG5nLXRlbXBsYXRlIGJiQ2FyZHNVcGRhdGVMaW1pdHNDdXN0b21pemFibGUgbGV0LWhvc3RSZWY+XG4gIDxkaXYgY2xhc3M9XCJjYXJkIGJiLWxpc3RcIiAqbmdJZj1cImhvc3RSZWYucGF5bWVudENhcmQ/LmxpbWl0c1wiPlxuICAgIDxkaXYgY2xhc3M9XCJjYXJkLWhlYWRlclwiPlxuICAgICAgPGgyIGkxOG49XCJMaW1pdHMgdXBkYXRlIGhlYWRpbmd8dXBkYXRlIGNhcmQgbGltaXRzIGhlYWRlckBAY2FyZC51cGRhdGVMaW1pdC5oZWFkaW5nXCI+XG4gICAgICAgIExpbWl0c1xuICAgICAgPC9oMj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiYmItbGlzdFwiICpuZ0lmPVwiIWhvc3RSZWYuaXNMaW1pdHNMb2FkaW5nOyBlbHNlIGxvYWRpbmdUZW1wbGF0ZVwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiYmItbGlzdF9faXRlbVwiICpuZ0Zvcj1cImxldCBsaW1pdCBvZiBob3N0UmVmLnBheW1lbnRDYXJkLmxpbWl0c1wiPlxuICAgICAgICAgIDxiYi1wYXltZW50LWNhcmQtbGltaXQgXG4gICAgICAgICAgICBbbGltaXRdPVwibGltaXRcIlxuICAgICAgICAgICAgW2N1cnJlbmN5XT1cImhvc3RSZWYucGF5bWVudENhcmQuY3VycmVuY3lcIlxuICAgICAgICAgICAgKHVwZGF0ZUxpbWl0KT1cImhvc3RSZWYub25VcGRhdGVMaW1pdCgkZXZlbnQpXCJcbiAgICAgICAgICA+PC9iYi1wYXltZW50LWNhcmQtbGltaXQ+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC9uZy10ZW1wbGF0ZT5cblxuPG5nLXRlbXBsYXRlICNsb2FkaW5nVGVtcGxhdGU+XG4gIDxiYi1sb2FkaW5nLWluZGljYXRvci11aSBsb2FkZXJTaXplPVwibGdcIj48L2JiLWxvYWRpbmctaW5kaWNhdG9yLXVpPlxuPC9uZy10ZW1wbGF0ZT4iXX0=