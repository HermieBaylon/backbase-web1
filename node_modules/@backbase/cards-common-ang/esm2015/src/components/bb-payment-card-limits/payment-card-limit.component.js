import { Component, Directive, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { InputInlineEditComponent } from '@backbase/ui-ang/input-inline-edit';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/amount";
import * as i2 from "@backbase/ui-ang/input-inline-edit";
import * as i3 from "@angular/common";
export class PaymentCardLimitComponent {
    constructor() {
        /**
         * Event to update limit of payment card;
         */
        // eslint-disable-next-line
        this.updateLimit = new EventEmitter();
        /**
         * Reference to instance of customizable component.
         */
        this.hostRef = this;
    }
    onUpdateLimit(amount) {
        if (this.limit) {
            this.updateLimit.emit({ amount, cardLimit: this.limit });
        }
    }
}
PaymentCardLimitComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentCardLimitComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
PaymentCardLimitComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: PaymentCardLimitComponent, selector: "bb-payment-card-limit", inputs: { currency: "currency", limit: "limit" }, outputs: { updateLimit: "updateLimit" }, viewQueries: [{ propertyName: "inputEdit", first: true, predicate: InputInlineEditComponent, descendants: true }], ngImport: i0, template: "<ng-container bbCardsUpdateLimitCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbCardsUpdateLimitCustomizable let-hostRef>\n  <div class=\"row\">\n    <div class=\"col-12 col-sm-8\">\n      <h5 class=\"bb-block--no-margin\" data-role=\"limit-title\">\n        <span>{{hostRef?.limit?.frequency | titlecase }}&nbsp;</span>\n        <span>{{hostRef?.limit?.channel?.name}}</span>\n      </h5>\n      <span class=\"bb-text-support text-small\" data-role=\"limit-description\">{{hostRef?.limit?.channel?.description}}</span>\n    </div>\n\n    <div class=\"col-12 col-sm-4\">\n      <ng-template #amountTemplateRef>\n          <strong class=\"bb-stack__item bb-stack__item--push-right bb-stack__item--spacing-sm\">\n            <bb-amount-ui\n              data-role=\"limit-max-amount\"\n              [currency]=\"hostRef?.currency\" \n              [amount]=\"hostRef.limit?.amount\" \n              [mapCurrency]=\"true\"\n              [decimalPlaces]=\"0\"\n            ></bb-amount-ui>\n          </strong>\n      </ng-template>\n\n      <bb-input-inline-edit-ui \n        [inputText]=\"hostRef.limit?.amount\" \n        [maxValue]=\"hostRef.limit?.maxAmount\"\n        [minValue]=\"hostRef.limit?.minAmount\"\n        pattern=\"[0-9]+\"\n        [inputInlineTemplate]=\"amountTemplateRef\"\n        (accept)=\"hostRef.onUpdateLimit($event)\"\n      ></bb-input-inline-edit-ui> \n\n      <p class=\"bb-text-support bb-text-align-right text-small\" data-role=\"limit-max-allowed-amount\">\n        <span i18n=\"limit max amount@@card.limit.amount.header.maxAmount\">\n          Max:\n        </span>\n        <bb-amount-ui \n          [currency]=\"hostRef?.currency\" \n          [amount]=\"hostRef.limit?.maxAmount\" \n          [mapCurrency]=\"true\"\n          [decimalPlaces]=\"0\"\n        ></bb-amount-ui>\n      </p>\n    </div>\n  </div>\n</ng-template>", components: [{ type: i0.forwardRef(function () { return i1.AmountComponent; }), selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: i0.forwardRef(function () { return i2.InputInlineEditComponent; }), selector: "bb-input-inline-edit-ui", inputs: ["state", "canEdit", "hasLoadingState", "inputInlineTemplate", "inputText", "maxLength", "minLength", "maxValue", "minValue", "autofocus", "ariaLabelAccept", "ariaLabelCancel", "ariaLabelEdit", "tooltipAccept", "tooltipCancel", "tooltipEdit", "autocomplete", "pattern", "hint"], outputs: ["stateChange", "cancel", "accept"] }], directives: [{ type: i0.forwardRef(function () { return CardsUpdateLimitCustomizableDirective; }), selector: "[bbCardsUpdateLimitCustomizable]" }], pipes: { "titlecase": i0.forwardRef(function () { return i3.TitleCasePipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentCardLimitComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payment-card-limit',
                    templateUrl: 'payment-card-limit.component.html',
                }]
        }], propDecorators: { currency: [{
                type: Input
            }], limit: [{
                type: Input
            }], updateLimit: [{
                type: Output
            }], inputEdit: [{
                type: ViewChild,
                args: [InputInlineEditComponent]
            }] } });
export class CardsUpdateLimitCustomizableDirective extends BbTemplate {
}
CardsUpdateLimitCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsUpdateLimitCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
CardsUpdateLimitCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: CardsUpdateLimitCustomizableDirective, selector: "[bbCardsUpdateLimitCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsUpdateLimitCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbCardsUpdateLimitCustomizable]',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF5bWVudC1jYXJkLWxpbWl0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvY2FyZHMtY29tbW9uLWFuZy9zcmMvY29tcG9uZW50cy9iYi1wYXltZW50LWNhcmQtbGltaXRzL3BheW1lbnQtY2FyZC1saW1pdC5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL2NhcmRzLWNvbW1vbi1hbmcvc3JjL2NvbXBvbmVudHMvYmItcGF5bWVudC1jYXJkLWxpbWl0cy9wYXltZW50LWNhcmQtbGltaXQuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdGLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUMzRCxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQzs7Ozs7QUFPOUUsTUFBTSxPQUFPLHlCQUF5QjtJQUp0QztRQWFFOztXQUVHO1FBQ0gsMkJBQTJCO1FBRWxCLGdCQUFXLEdBQUcsSUFBSSxZQUFZLEVBQTBCLENBQUM7UUFHbEU7O1dBRUc7UUFDTSxZQUFPLEdBQUcsSUFBSSxDQUFDO0tBT3pCO0lBTEMsYUFBYSxDQUFDLE1BQWM7UUFDMUIsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ2QsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO1NBQzFEO0lBQ0gsQ0FBQzs7dUhBMUJVLHlCQUF5QjsyR0FBekIseUJBQXlCLG1NQWV6Qix3QkFBd0IsZ0RDeEJyQywrMURBK0NjLHN1QkRORCxxQ0FBcUM7NEZBaENyQyx5QkFBeUI7a0JBSnJDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLHVCQUF1QjtvQkFDakMsV0FBVyxFQUFFLG1DQUFtQztpQkFDakQ7OEJBS1UsUUFBUTtzQkFBaEIsS0FBSztnQkFJRyxLQUFLO3NCQUFiLEtBQUs7Z0JBTUcsV0FBVztzQkFEbkIsTUFBTTtnQkFFOEIsU0FBUztzQkFBN0MsU0FBUzt1QkFBQyx3QkFBd0I7O0FBaUJyQyxNQUFNLE9BQU8scUNBQXNDLFNBQVEsVUFBZ0Q7O21JQUE5RixxQ0FBcUM7dUhBQXJDLHFDQUFxQzs0RkFBckMscUNBQXFDO2tCQUhqRCxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxrQ0FBa0M7aUJBQzdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBEaXJlY3RpdmUsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCYlRlbXBsYXRlIH0gZnJvbSAnQGJhY2tiYXNlL2ZvdW5kYXRpb24tYW5nL2NvcmUnO1xuaW1wb3J0IHsgSW5wdXRJbmxpbmVFZGl0Q29tcG9uZW50IH0gZnJvbSAnQGJhY2tiYXNlL3VpLWFuZy9pbnB1dC1pbmxpbmUtZWRpdCc7XG5pbXBvcnQgeyBQYXltZW50Q2FyZExpbWl0LCBQYXltZW50Q2FyZExpbWl0VXBkYXRlIH0gZnJvbSAnLi4vLi4vbW9kZWwvcGF5bWVudC1jYXJkLWxpbWl0Lm1vZGVsJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYmItcGF5bWVudC1jYXJkLWxpbWl0JyxcbiAgdGVtcGxhdGVVcmw6ICdwYXltZW50LWNhcmQtbGltaXQuY29tcG9uZW50Lmh0bWwnLFxufSlcbmV4cG9ydCBjbGFzcyBQYXltZW50Q2FyZExpbWl0Q29tcG9uZW50IHtcbiAgLyoqXG4gICAqIGN1cnJlbmN5IGZvciBwYXltZW50IGNhcmQuXG4gICAqL1xuICBASW5wdXQoKSBjdXJyZW5jeT86IHN0cmluZztcbiAgLyoqXG4gICAqIG9uZSBsaW1pdCBmb3IgcGF5bWVudCBjYXJkLlxuICAgKi9cbiAgQElucHV0KCkgbGltaXQ/OiBQYXltZW50Q2FyZExpbWl0O1xuICAvKipcbiAgICogRXZlbnQgdG8gdXBkYXRlIGxpbWl0IG9mIHBheW1lbnQgY2FyZDtcbiAgICovXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBAT3V0cHV0KClcbiAgcmVhZG9ubHkgdXBkYXRlTGltaXQgPSBuZXcgRXZlbnRFbWl0dGVyPFBheW1lbnRDYXJkTGltaXRVcGRhdGU+KCk7XG4gIEBWaWV3Q2hpbGQoSW5wdXRJbmxpbmVFZGl0Q29tcG9uZW50KSBpbnB1dEVkaXQ6IElucHV0SW5saW5lRWRpdENvbXBvbmVudCB8IHVuZGVmaW5lZDtcblxuICAvKipcbiAgICogUmVmZXJlbmNlIHRvIGluc3RhbmNlIG9mIGN1c3RvbWl6YWJsZSBjb21wb25lbnQuXG4gICAqL1xuICByZWFkb25seSBob3N0UmVmID0gdGhpcztcblxuICBvblVwZGF0ZUxpbWl0KGFtb3VudDogc3RyaW5nKSB7XG4gICAgaWYgKHRoaXMubGltaXQpIHtcbiAgICAgIHRoaXMudXBkYXRlTGltaXQuZW1pdCh7IGFtb3VudCwgY2FyZExpbWl0OiB0aGlzLmxpbWl0IH0pO1xuICAgIH1cbiAgfVxufVxuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbYmJDYXJkc1VwZGF0ZUxpbWl0Q3VzdG9taXphYmxlXScsXG59KVxuZXhwb3J0IGNsYXNzIENhcmRzVXBkYXRlTGltaXRDdXN0b21pemFibGVEaXJlY3RpdmUgZXh0ZW5kcyBCYlRlbXBsYXRlPFBheW1lbnRDYXJkTGltaXRDb21wb25lbnQsIHVuZGVmaW5lZD4ge31cbiIsIjxuZy1jb250YWluZXIgYmJDYXJkc1VwZGF0ZUxpbWl0Q3VzdG9taXphYmxlIFtiYkhvc3RSZWZdPVwiaG9zdFJlZlwiPjwvbmctY29udGFpbmVyPlxuXG48bmctdGVtcGxhdGUgYmJDYXJkc1VwZGF0ZUxpbWl0Q3VzdG9taXphYmxlIGxldC1ob3N0UmVmPlxuICA8ZGl2IGNsYXNzPVwicm93XCI+XG4gICAgPGRpdiBjbGFzcz1cImNvbC0xMiBjb2wtc20tOFwiPlxuICAgICAgPGg1IGNsYXNzPVwiYmItYmxvY2stLW5vLW1hcmdpblwiIGRhdGEtcm9sZT1cImxpbWl0LXRpdGxlXCI+XG4gICAgICAgIDxzcGFuPnt7aG9zdFJlZj8ubGltaXQ/LmZyZXF1ZW5jeSB8IHRpdGxlY2FzZSB9fSZuYnNwOzwvc3Bhbj5cbiAgICAgICAgPHNwYW4+e3tob3N0UmVmPy5saW1pdD8uY2hhbm5lbD8ubmFtZX19PC9zcGFuPlxuICAgICAgPC9oNT5cbiAgICAgIDxzcGFuIGNsYXNzPVwiYmItdGV4dC1zdXBwb3J0IHRleHQtc21hbGxcIiBkYXRhLXJvbGU9XCJsaW1pdC1kZXNjcmlwdGlvblwiPnt7aG9zdFJlZj8ubGltaXQ/LmNoYW5uZWw/LmRlc2NyaXB0aW9ufX08L3NwYW4+XG4gICAgPC9kaXY+XG5cbiAgICA8ZGl2IGNsYXNzPVwiY29sLTEyIGNvbC1zbS00XCI+XG4gICAgICA8bmctdGVtcGxhdGUgI2Ftb3VudFRlbXBsYXRlUmVmPlxuICAgICAgICAgIDxzdHJvbmcgY2xhc3M9XCJiYi1zdGFja19faXRlbSBiYi1zdGFja19faXRlbS0tcHVzaC1yaWdodCBiYi1zdGFja19faXRlbS0tc3BhY2luZy1zbVwiPlxuICAgICAgICAgICAgPGJiLWFtb3VudC11aVxuICAgICAgICAgICAgICBkYXRhLXJvbGU9XCJsaW1pdC1tYXgtYW1vdW50XCJcbiAgICAgICAgICAgICAgW2N1cnJlbmN5XT1cImhvc3RSZWY/LmN1cnJlbmN5XCIgXG4gICAgICAgICAgICAgIFthbW91bnRdPVwiaG9zdFJlZi5saW1pdD8uYW1vdW50XCIgXG4gICAgICAgICAgICAgIFttYXBDdXJyZW5jeV09XCJ0cnVlXCJcbiAgICAgICAgICAgICAgW2RlY2ltYWxQbGFjZXNdPVwiMFwiXG4gICAgICAgICAgICA+PC9iYi1hbW91bnQtdWk+XG4gICAgICAgICAgPC9zdHJvbmc+XG4gICAgICA8L25nLXRlbXBsYXRlPlxuXG4gICAgICA8YmItaW5wdXQtaW5saW5lLWVkaXQtdWkgXG4gICAgICAgIFtpbnB1dFRleHRdPVwiaG9zdFJlZi5saW1pdD8uYW1vdW50XCIgXG4gICAgICAgIFttYXhWYWx1ZV09XCJob3N0UmVmLmxpbWl0Py5tYXhBbW91bnRcIlxuICAgICAgICBbbWluVmFsdWVdPVwiaG9zdFJlZi5saW1pdD8ubWluQW1vdW50XCJcbiAgICAgICAgcGF0dGVybj1cIlswLTldK1wiXG4gICAgICAgIFtpbnB1dElubGluZVRlbXBsYXRlXT1cImFtb3VudFRlbXBsYXRlUmVmXCJcbiAgICAgICAgKGFjY2VwdCk9XCJob3N0UmVmLm9uVXBkYXRlTGltaXQoJGV2ZW50KVwiXG4gICAgICA+PC9iYi1pbnB1dC1pbmxpbmUtZWRpdC11aT4gXG5cbiAgICAgIDxwIGNsYXNzPVwiYmItdGV4dC1zdXBwb3J0IGJiLXRleHQtYWxpZ24tcmlnaHQgdGV4dC1zbWFsbFwiIGRhdGEtcm9sZT1cImxpbWl0LW1heC1hbGxvd2VkLWFtb3VudFwiPlxuICAgICAgICA8c3BhbiBpMThuPVwibGltaXQgbWF4IGFtb3VudEBAY2FyZC5saW1pdC5hbW91bnQuaGVhZGVyLm1heEFtb3VudFwiPlxuICAgICAgICAgIE1heDpcbiAgICAgICAgPC9zcGFuPlxuICAgICAgICA8YmItYW1vdW50LXVpIFxuICAgICAgICAgIFtjdXJyZW5jeV09XCJob3N0UmVmPy5jdXJyZW5jeVwiIFxuICAgICAgICAgIFthbW91bnRdPVwiaG9zdFJlZi5saW1pdD8ubWF4QW1vdW50XCIgXG4gICAgICAgICAgW21hcEN1cnJlbmN5XT1cInRydWVcIlxuICAgICAgICAgIFtkZWNpbWFsUGxhY2VzXT1cIjBcIlxuICAgICAgICA+PC9iYi1hbW91bnQtdWk+XG4gICAgICA8L3A+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC9uZy10ZW1wbGF0ZT4iXX0=