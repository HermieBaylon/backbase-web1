import { combineLatest } from 'rxjs';
import { map } from 'rxjs/operators';
import { PaymentCardDeliveryStepStatus } from './model/payment-card-delivery-status.model';
import { PaymentCardReplacementReason, } from './model/payment-card-replacement-reason.model';
import { PaymentCardLockStatus, PaymentCardReplacementStatus, PaymentCardStatus } from './model/payment-card.model';
/**
 * Timeout for the notification
 */
export const notificationTtl = 5000;
/**
 * The default mapping of backend values to internal model representation for card status.  This
 * mapping can be overridden per app.
 */
// prettier-ignore
export const defaultStatusMapping = {
    'Active': PaymentCardStatus.Active,
    'Inactive': PaymentCardStatus.Inactive,
    'Cancelled': PaymentCardStatus.Canceled,
    'Expired': PaymentCardStatus.Expired,
};
/**
 * The default mapping of backend values to internal model representation for card replacement
 * status.  This mapping can be overridden per app.
 */
// prettier-ignore
export const defaultReplacementStatusMapping = {
    'NotUnderReplacement': PaymentCardReplacementStatus.NotUnderReplacement,
    'ReplacementRequested': PaymentCardReplacementStatus.UnderReplacement,
    'ReplacementInTransit': PaymentCardReplacementStatus.UnderReplacement,
    'ReplacementUnderCancellation': PaymentCardReplacementStatus.UnderReplacement,
    'Replaced': PaymentCardReplacementStatus.Replaced,
};
/**
 * The mapping of backend values to internal model representation for card lock status.  This
 * mapping cannot be overridden (it is hardwired in the spec).
 */
// prettier-ignore
export const defaultLockStatusMapping = {
    'LOCKED': PaymentCardLockStatus.Locked,
    'UNLOCKED': PaymentCardLockStatus.Unlocked,
};
/**
 * The mapping of backend values to internal model representation for card delivery step status.
 * This mapping cannot be overridden (it is hardwired in the spec).
 */
// prettier-ignore
export const defaultDeliveryStepStatusMapping = {
    'SUCCESS': PaymentCardDeliveryStepStatus.Success,
    'PENDING': PaymentCardDeliveryStepStatus.Pending,
    'FAILED': PaymentCardDeliveryStepStatus.Failed,
};
/**
 * The default mapping of internal model representation to backend values for card replacement
 * reason.  This mapping can be overridden per app.
 */
export const defaultReplacementReasonMapping = {
    [PaymentCardReplacementReason.Lost]: 'Lost',
    [PaymentCardReplacementReason.Stolen]: 'Stolen',
    [PaymentCardReplacementReason.Damaged]: 'Damaged',
};
// prettier-ignore
export const defaultLimitChannelMapping = {
    'ATM': { name: 'withdrawals', description: 'The amount you can withdraw from cash machines' },
    'ONLINE': { name: 'online purchases', description: 'The limit for when using your card for payments online' },
    'POS': {
        name: 'terminal payments',
        description: 'The limit for physical payments with your card (e.g. supermarkets, restaurants, etc.)',
    },
};
/**
 * Enumeration of possible widget preferences
 */
export const WidgetProperties = {
    NotificationTtl: 'notificationTtl',
    updateAllLimits: 'bb.card.updateAllLimits',
};
export const DEFAULT_PAYMENT_CARD_TYPE_GROUP = ['Credit', 'Debit'];
export const filterInputParameters = (input, prop) => combineLatest([input, prop]).pipe(map(([inputVal, propVal]) => (inputVal !== undefined ? inputVal : propVal)));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vbGlicy9jYXJkcy1jb21tb24tYW5nL3NyYy9jb25zdGFudHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGFBQWEsRUFBYyxNQUFNLE1BQU0sQ0FBQztBQUNqRCxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDckMsT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0sNENBQTRDLENBQUM7QUFJM0YsT0FBTyxFQUNMLDRCQUE0QixHQUU3QixNQUFNLCtDQUErQyxDQUFDO0FBR3ZELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSw0QkFBNEIsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRXBIOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLElBQUksQ0FBQztBQUVwQzs7O0dBR0c7QUFDSCxrQkFBa0I7QUFDbEIsTUFBTSxDQUFDLE1BQU0sb0JBQW9CLEdBQTZCO0lBQzVELFFBQVEsRUFBRSxpQkFBaUIsQ0FBQyxNQUFNO0lBQ2xDLFVBQVUsRUFBRSxpQkFBaUIsQ0FBQyxRQUFRO0lBQ3RDLFdBQVcsRUFBRSxpQkFBaUIsQ0FBQyxRQUFRO0lBQ3ZDLFNBQVMsRUFBRSxpQkFBaUIsQ0FBQyxPQUFPO0NBQ3JDLENBQUM7QUFFRjs7O0dBR0c7QUFDSCxrQkFBa0I7QUFDbEIsTUFBTSxDQUFDLE1BQU0sK0JBQStCLEdBQXdDO0lBQ2xGLHFCQUFxQixFQUFFLDRCQUE0QixDQUFDLG1CQUFtQjtJQUN2RSxzQkFBc0IsRUFBRSw0QkFBNEIsQ0FBQyxnQkFBZ0I7SUFDckUsc0JBQXNCLEVBQUUsNEJBQTRCLENBQUMsZ0JBQWdCO0lBQ3JFLDhCQUE4QixFQUFFLDRCQUE0QixDQUFDLGdCQUFnQjtJQUM3RSxVQUFVLEVBQUUsNEJBQTRCLENBQUMsUUFBUTtDQUNsRCxDQUFDO0FBRUY7OztHQUdHO0FBQ0gsa0JBQWtCO0FBQ2xCLE1BQU0sQ0FBQyxNQUFNLHdCQUF3QixHQUFpQztJQUNwRSxRQUFRLEVBQUUscUJBQXFCLENBQUMsTUFBTTtJQUN0QyxVQUFVLEVBQUUscUJBQXFCLENBQUMsUUFBUTtDQUMzQyxDQUFDO0FBRUY7OztHQUdHO0FBQ0gsa0JBQWtCO0FBQ2xCLE1BQU0sQ0FBQyxNQUFNLGdDQUFnQyxHQUF5QztJQUNwRixTQUFTLEVBQUUsNkJBQTZCLENBQUMsT0FBTztJQUNoRCxTQUFTLEVBQUUsNkJBQTZCLENBQUMsT0FBTztJQUNoRCxRQUFRLEVBQUUsNkJBQTZCLENBQUMsTUFBTTtDQUMvQyxDQUFDO0FBRUY7OztHQUdHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sK0JBQStCLEdBQXdDO0lBQ2xGLENBQUMsNEJBQTRCLENBQUMsSUFBSSxDQUFDLEVBQUUsTUFBTTtJQUMzQyxDQUFDLDRCQUE0QixDQUFDLE1BQU0sQ0FBQyxFQUFFLFFBQVE7SUFDL0MsQ0FBQyw0QkFBNEIsQ0FBQyxPQUFPLENBQUMsRUFBRSxTQUFTO0NBQ2xELENBQUM7QUFFRixrQkFBa0I7QUFDbEIsTUFBTSxDQUFDLE1BQU0sMEJBQTBCLEdBQW1DO0lBQ3hFLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxhQUFhLEVBQUUsV0FBVyxFQUFFLGdEQUFnRCxFQUFFO0lBQzdGLFFBQVEsRUFBRSxFQUFFLElBQUksRUFBRSxrQkFBa0IsRUFBRSxXQUFXLEVBQUUsd0RBQXdELEVBQUU7SUFDN0csS0FBSyxFQUFFO1FBQ0wsSUFBSSxFQUFFLG1CQUFtQjtRQUN6QixXQUFXLEVBQUUsdUZBQXVGO0tBQ3JHO0NBQ0YsQ0FBQztBQUVGOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUc7SUFDOUIsZUFBZSxFQUFFLGlCQUFpQjtJQUNsQyxlQUFlLEVBQUUseUJBQXlCO0NBQzNDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSwrQkFBK0IsR0FBRyxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQztBQUVuRSxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRyxDQUFJLEtBQWdDLEVBQUUsSUFBbUIsRUFBaUIsRUFBRSxDQUMvRyxhQUFhLENBQUMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsUUFBUSxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb21iaW5lTGF0ZXN0LCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBQYXltZW50Q2FyZERlbGl2ZXJ5U3RlcFN0YXR1cyB9IGZyb20gJy4vbW9kZWwvcGF5bWVudC1jYXJkLWRlbGl2ZXJ5LXN0YXR1cy5tb2RlbCc7XG5pbXBvcnQgeyBQYXltZW50Q2FyZERlbGl2ZXJ5U3RlcFN0YXR1c01hcHBpbmcgfSBmcm9tICcuL21vZGVsL3BheW1lbnQtY2FyZC1kZWxpdmVyeS1zdGVwLXN0YXR1cy1tYXBwaW5nLm1vZGVsJztcbmltcG9ydCB7IFBheW1lbnRDYXJkTGltaXRDaGFubmVsTWFwcGluZyB9IGZyb20gJy4vbW9kZWwvcGF5bWVudC1jYXJkLWxpbWl0LWNoYW5uZWwtbWFwcGluZyc7XG5pbXBvcnQgeyBQYXltZW50Q2FyZExvY2tTdGF0dXNNYXBwaW5nIH0gZnJvbSAnLi9tb2RlbC9wYXltZW50LWNhcmQtbG9jay1zdGF0dXMtbWFwcGluZy5tb2RlbCc7XG5pbXBvcnQge1xuICBQYXltZW50Q2FyZFJlcGxhY2VtZW50UmVhc29uLFxuICBQYXltZW50Q2FyZFJlcGxhY2VtZW50UmVhc29uTWFwcGluZyxcbn0gZnJvbSAnLi9tb2RlbC9wYXltZW50LWNhcmQtcmVwbGFjZW1lbnQtcmVhc29uLm1vZGVsJztcbmltcG9ydCB7IFBheW1lbnRDYXJkUmVwbGFjZW1lbnRTdGF0dXNNYXBwaW5nIH0gZnJvbSAnLi9tb2RlbC9wYXltZW50LWNhcmQtcmVwbGFjZW1lbnQtc3RhdHVzLW1hcHBpbmcubW9kZWwnO1xuaW1wb3J0IHsgUGF5bWVudENhcmRTdGF0dXNNYXBwaW5nIH0gZnJvbSAnLi9tb2RlbC9wYXltZW50LWNhcmQtc3RhdHVzLW1hcHBpbmcubW9kZWwnO1xuaW1wb3J0IHsgUGF5bWVudENhcmRMb2NrU3RhdHVzLCBQYXltZW50Q2FyZFJlcGxhY2VtZW50U3RhdHVzLCBQYXltZW50Q2FyZFN0YXR1cyB9IGZyb20gJy4vbW9kZWwvcGF5bWVudC1jYXJkLm1vZGVsJztcblxuLyoqXG4gKiBUaW1lb3V0IGZvciB0aGUgbm90aWZpY2F0aW9uXG4gKi9cbmV4cG9ydCBjb25zdCBub3RpZmljYXRpb25UdGwgPSA1MDAwO1xuXG4vKipcbiAqIFRoZSBkZWZhdWx0IG1hcHBpbmcgb2YgYmFja2VuZCB2YWx1ZXMgdG8gaW50ZXJuYWwgbW9kZWwgcmVwcmVzZW50YXRpb24gZm9yIGNhcmQgc3RhdHVzLiAgVGhpc1xuICogbWFwcGluZyBjYW4gYmUgb3ZlcnJpZGRlbiBwZXIgYXBwLlxuICovXG4vLyBwcmV0dGllci1pZ25vcmVcbmV4cG9ydCBjb25zdCBkZWZhdWx0U3RhdHVzTWFwcGluZzogUGF5bWVudENhcmRTdGF0dXNNYXBwaW5nID0ge1xuICAnQWN0aXZlJzogUGF5bWVudENhcmRTdGF0dXMuQWN0aXZlLFxuICAnSW5hY3RpdmUnOiBQYXltZW50Q2FyZFN0YXR1cy5JbmFjdGl2ZSxcbiAgJ0NhbmNlbGxlZCc6IFBheW1lbnRDYXJkU3RhdHVzLkNhbmNlbGVkLFxuICAnRXhwaXJlZCc6IFBheW1lbnRDYXJkU3RhdHVzLkV4cGlyZWQsXG59O1xuXG4vKipcbiAqIFRoZSBkZWZhdWx0IG1hcHBpbmcgb2YgYmFja2VuZCB2YWx1ZXMgdG8gaW50ZXJuYWwgbW9kZWwgcmVwcmVzZW50YXRpb24gZm9yIGNhcmQgcmVwbGFjZW1lbnRcbiAqIHN0YXR1cy4gIFRoaXMgbWFwcGluZyBjYW4gYmUgb3ZlcnJpZGRlbiBwZXIgYXBwLlxuICovXG4vLyBwcmV0dGllci1pZ25vcmVcbmV4cG9ydCBjb25zdCBkZWZhdWx0UmVwbGFjZW1lbnRTdGF0dXNNYXBwaW5nOiBQYXltZW50Q2FyZFJlcGxhY2VtZW50U3RhdHVzTWFwcGluZyA9IHtcbiAgJ05vdFVuZGVyUmVwbGFjZW1lbnQnOiBQYXltZW50Q2FyZFJlcGxhY2VtZW50U3RhdHVzLk5vdFVuZGVyUmVwbGFjZW1lbnQsXG4gICdSZXBsYWNlbWVudFJlcXVlc3RlZCc6IFBheW1lbnRDYXJkUmVwbGFjZW1lbnRTdGF0dXMuVW5kZXJSZXBsYWNlbWVudCxcbiAgJ1JlcGxhY2VtZW50SW5UcmFuc2l0JzogUGF5bWVudENhcmRSZXBsYWNlbWVudFN0YXR1cy5VbmRlclJlcGxhY2VtZW50LFxuICAnUmVwbGFjZW1lbnRVbmRlckNhbmNlbGxhdGlvbic6IFBheW1lbnRDYXJkUmVwbGFjZW1lbnRTdGF0dXMuVW5kZXJSZXBsYWNlbWVudCxcbiAgJ1JlcGxhY2VkJzogUGF5bWVudENhcmRSZXBsYWNlbWVudFN0YXR1cy5SZXBsYWNlZCxcbn07XG5cbi8qKlxuICogVGhlIG1hcHBpbmcgb2YgYmFja2VuZCB2YWx1ZXMgdG8gaW50ZXJuYWwgbW9kZWwgcmVwcmVzZW50YXRpb24gZm9yIGNhcmQgbG9jayBzdGF0dXMuICBUaGlzXG4gKiBtYXBwaW5nIGNhbm5vdCBiZSBvdmVycmlkZGVuIChpdCBpcyBoYXJkd2lyZWQgaW4gdGhlIHNwZWMpLlxuICovXG4vLyBwcmV0dGllci1pZ25vcmVcbmV4cG9ydCBjb25zdCBkZWZhdWx0TG9ja1N0YXR1c01hcHBpbmc6IFBheW1lbnRDYXJkTG9ja1N0YXR1c01hcHBpbmcgPSB7XG4gICdMT0NLRUQnOiBQYXltZW50Q2FyZExvY2tTdGF0dXMuTG9ja2VkLFxuICAnVU5MT0NLRUQnOiBQYXltZW50Q2FyZExvY2tTdGF0dXMuVW5sb2NrZWQsXG59O1xuXG4vKipcbiAqIFRoZSBtYXBwaW5nIG9mIGJhY2tlbmQgdmFsdWVzIHRvIGludGVybmFsIG1vZGVsIHJlcHJlc2VudGF0aW9uIGZvciBjYXJkIGRlbGl2ZXJ5IHN0ZXAgc3RhdHVzLlxuICogVGhpcyBtYXBwaW5nIGNhbm5vdCBiZSBvdmVycmlkZGVuIChpdCBpcyBoYXJkd2lyZWQgaW4gdGhlIHNwZWMpLlxuICovXG4vLyBwcmV0dGllci1pZ25vcmVcbmV4cG9ydCBjb25zdCBkZWZhdWx0RGVsaXZlcnlTdGVwU3RhdHVzTWFwcGluZzogUGF5bWVudENhcmREZWxpdmVyeVN0ZXBTdGF0dXNNYXBwaW5nID0ge1xuICAnU1VDQ0VTUyc6IFBheW1lbnRDYXJkRGVsaXZlcnlTdGVwU3RhdHVzLlN1Y2Nlc3MsXG4gICdQRU5ESU5HJzogUGF5bWVudENhcmREZWxpdmVyeVN0ZXBTdGF0dXMuUGVuZGluZyxcbiAgJ0ZBSUxFRCc6IFBheW1lbnRDYXJkRGVsaXZlcnlTdGVwU3RhdHVzLkZhaWxlZCxcbn07XG5cbi8qKlxuICogVGhlIGRlZmF1bHQgbWFwcGluZyBvZiBpbnRlcm5hbCBtb2RlbCByZXByZXNlbnRhdGlvbiB0byBiYWNrZW5kIHZhbHVlcyBmb3IgY2FyZCByZXBsYWNlbWVudFxuICogcmVhc29uLiAgVGhpcyBtYXBwaW5nIGNhbiBiZSBvdmVycmlkZGVuIHBlciBhcHAuXG4gKi9cbmV4cG9ydCBjb25zdCBkZWZhdWx0UmVwbGFjZW1lbnRSZWFzb25NYXBwaW5nOiBQYXltZW50Q2FyZFJlcGxhY2VtZW50UmVhc29uTWFwcGluZyA9IHtcbiAgW1BheW1lbnRDYXJkUmVwbGFjZW1lbnRSZWFzb24uTG9zdF06ICdMb3N0JyxcbiAgW1BheW1lbnRDYXJkUmVwbGFjZW1lbnRSZWFzb24uU3RvbGVuXTogJ1N0b2xlbicsXG4gIFtQYXltZW50Q2FyZFJlcGxhY2VtZW50UmVhc29uLkRhbWFnZWRdOiAnRGFtYWdlZCcsXG59O1xuXG4vLyBwcmV0dGllci1pZ25vcmVcbmV4cG9ydCBjb25zdCBkZWZhdWx0TGltaXRDaGFubmVsTWFwcGluZzogUGF5bWVudENhcmRMaW1pdENoYW5uZWxNYXBwaW5nID0ge1xuICAnQVRNJzogeyBuYW1lOiAnd2l0aGRyYXdhbHMnLCBkZXNjcmlwdGlvbjogJ1RoZSBhbW91bnQgeW91IGNhbiB3aXRoZHJhdyBmcm9tIGNhc2ggbWFjaGluZXMnIH0sXG4gICdPTkxJTkUnOiB7IG5hbWU6ICdvbmxpbmUgcHVyY2hhc2VzJywgZGVzY3JpcHRpb246ICdUaGUgbGltaXQgZm9yIHdoZW4gdXNpbmcgeW91ciBjYXJkIGZvciBwYXltZW50cyBvbmxpbmUnIH0sXG4gICdQT1MnOiB7XG4gICAgbmFtZTogJ3Rlcm1pbmFsIHBheW1lbnRzJyxcbiAgICBkZXNjcmlwdGlvbjogJ1RoZSBsaW1pdCBmb3IgcGh5c2ljYWwgcGF5bWVudHMgd2l0aCB5b3VyIGNhcmQgKGUuZy4gc3VwZXJtYXJrZXRzLCByZXN0YXVyYW50cywgZXRjLiknLFxuICB9LFxufTtcblxuLyoqXG4gKiBFbnVtZXJhdGlvbiBvZiBwb3NzaWJsZSB3aWRnZXQgcHJlZmVyZW5jZXNcbiAqL1xuZXhwb3J0IGNvbnN0IFdpZGdldFByb3BlcnRpZXMgPSB7XG4gIE5vdGlmaWNhdGlvblR0bDogJ25vdGlmaWNhdGlvblR0bCcsXG4gIHVwZGF0ZUFsbExpbWl0czogJ2JiLmNhcmQudXBkYXRlQWxsTGltaXRzJyxcbn07XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX1BBWU1FTlRfQ0FSRF9UWVBFX0dST1VQID0gWydDcmVkaXQnLCAnRGViaXQnXTtcblxuZXhwb3J0IGNvbnN0IGZpbHRlcklucHV0UGFyYW1ldGVycyA9IDxUPihpbnB1dDogT2JzZXJ2YWJsZTxUIHwgdW5kZWZpbmVkPiwgcHJvcDogT2JzZXJ2YWJsZTxUPik6IE9ic2VydmFibGU8VD4gPT5cbiAgY29tYmluZUxhdGVzdChbaW5wdXQsIHByb3BdKS5waXBlKG1hcCgoW2lucHV0VmFsLCBwcm9wVmFsXSkgPT4gKGlucHV0VmFsICE9PSB1bmRlZmluZWQgPyBpbnB1dFZhbCA6IHByb3BWYWwpKSk7XG4iXX0=