/* eslint-disable no-redeclare*/
export var CardsBackendError;
(function (CardsBackendError) {
    const getMessageFromResponse = (error) => {
        const responseBody = error.error;
        if (Array.isArray(responseBody && responseBody.errors)) {
            return responseBody.errors.map((data) => {
                const { context = {} } = data;
                const message = data.message.replace(/{[_a-zA-Z][_a-zA-Z0-9]*}/g, (match) => {
                    const result = context[match.replace(/[\{\}']+/g, '')];
                    return result !== undefined ? result : match;
                });
                return `Error ${error.status}: ${message}`;
            });
        }
        else {
            return undefined;
        }
    };
    /**
     * @name fromHttpErrorResponse
     * @param errorResponse The error response
     * @returns An object containing a user-friendly error message
     *
     * @description
     * Parse an HttpErrorResponse and return a CardsBackendError object that can be used to display a
     * user-friendly error message.
     */
    CardsBackendError.fromHttpErrorResponse = (errorResponse) => {
        if (errorResponse.error instanceof ErrorEvent || !errorResponse.status) {
            // Client-side or network error.
            return {
                message: 'An unexpected error occurred',
            };
        }
        else {
            const error = getMessageFromResponse(errorResponse) || [];
            return {
                message: error[0] || `Error ${errorResponse.status}`,
            };
        }
    };
    CardsBackendError.fromHttpErrorsResponse = (errorResponse) => {
        if (errorResponse.error instanceof ErrorEvent || !errorResponse.status) {
            // Client-side or network error.
            return [
                {
                    message: 'An unexpected error occurred',
                },
            ];
        }
        else {
            const errors = getMessageFromResponse(errorResponse) || [`Error ${errorResponse.status}`];
            return errors.map((message) => ({ message }));
        }
    };
})(CardsBackendError || (CardsBackendError = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyZHMtYmFja2VuZC1lcnJvci5tb2RlbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvY2FyZHMtY29tbW9uLWFuZy9zcmMvbW9kZWwvY2FyZHMtYmFja2VuZC1lcnJvci5tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFXQSxnQ0FBZ0M7QUFDaEMsTUFBTSxLQUFXLGlCQUFpQixDQXlEakM7QUF6REQsV0FBaUIsaUJBQWlCO0lBQ2hDLE1BQU0sc0JBQXNCLEdBQUcsQ0FBQyxLQUF3QixFQUF3QixFQUFFO1FBQ2hGLE1BQU0sWUFBWSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7UUFDakMsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLFlBQVksSUFBSSxZQUFZLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDdEQsT0FBTyxZQUFZLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQXVCLEVBQUUsRUFBRTtnQkFDekQsTUFBTSxFQUFFLE9BQU8sR0FBRyxFQUFFLEVBQUUsR0FBRyxJQUFJLENBQUM7Z0JBQzlCLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLDJCQUEyQixFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUU7b0JBQzFFLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO29CQUV2RCxPQUFPLE1BQU0sS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO2dCQUMvQyxDQUFDLENBQUMsQ0FBQztnQkFFSCxPQUFPLFNBQVMsS0FBSyxDQUFDLE1BQU0sS0FBSyxPQUFPLEVBQUUsQ0FBQztZQUM3QyxDQUFDLENBQUMsQ0FBQztTQUNKO2FBQU07WUFDTCxPQUFPLFNBQVMsQ0FBQztTQUNsQjtJQUNILENBQUMsQ0FBQztJQUVGOzs7Ozs7OztPQVFHO0lBQ1UsdUNBQXFCLEdBQUcsQ0FBQyxhQUFnQyxFQUFxQixFQUFFO1FBQzNGLElBQUksYUFBYSxDQUFDLEtBQUssWUFBWSxVQUFVLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFO1lBQ3RFLGdDQUFnQztZQUNoQyxPQUFPO2dCQUNMLE9BQU8sRUFBRSw4QkFBOEI7YUFDeEMsQ0FBQztTQUNIO2FBQU07WUFDTCxNQUFNLEtBQUssR0FBRyxzQkFBc0IsQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLENBQUM7WUFFMUQsT0FBTztnQkFDTCxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLFNBQVMsYUFBYSxDQUFDLE1BQU0sRUFBRTthQUNyRCxDQUFDO1NBQ0g7SUFDSCxDQUFDLENBQUM7SUFFVyx3Q0FBc0IsR0FBRyxDQUFDLGFBQWdDLEVBQXVCLEVBQUU7UUFDOUYsSUFBSSxhQUFhLENBQUMsS0FBSyxZQUFZLFVBQVUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUU7WUFDdEUsZ0NBQWdDO1lBQ2hDLE9BQU87Z0JBQ0w7b0JBQ0UsT0FBTyxFQUFFLDhCQUE4QjtpQkFDeEM7YUFDRixDQUFDO1NBQ0g7YUFBTTtZQUNMLE1BQU0sTUFBTSxHQUFHLHNCQUFzQixDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsU0FBUyxhQUFhLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztZQUUxRixPQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUM7U0FDL0M7SUFDSCxDQUFDLENBQUM7QUFDSixDQUFDLEVBekRnQixpQkFBaUIsS0FBakIsaUJBQWlCLFFBeURqQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBFcnJvclJlc3BvbnNlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuXG4vKipcbiAqIFRoaXMgaW50ZXJmYWNlIGlzIHVzZWQgYnkgdGhlIHRlbXBsYXRlIHRvIGRpc3BsYXkgd2hhdCBpcyB3cm9uZyB0byB0aGUgdXNlci5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDYXJkc0JhY2tlbmRFcnJvciB7XG4gIG1lc3NhZ2U6IHN0cmluZztcbiAga2V5Pzogc3RyaW5nO1xuICBjb250ZXh0PzogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfTtcbn1cblxuLyogZXNsaW50LWRpc2FibGUgbm8tcmVkZWNsYXJlKi9cbmV4cG9ydCBuYW1lc3BhY2UgQ2FyZHNCYWNrZW5kRXJyb3Ige1xuICBjb25zdCBnZXRNZXNzYWdlRnJvbVJlc3BvbnNlID0gKGVycm9yOiBIdHRwRXJyb3JSZXNwb25zZSk6IHN0cmluZ1tdIHwgdW5kZWZpbmVkID0+IHtcbiAgICBjb25zdCByZXNwb25zZUJvZHkgPSBlcnJvci5lcnJvcjtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShyZXNwb25zZUJvZHkgJiYgcmVzcG9uc2VCb2R5LmVycm9ycykpIHtcbiAgICAgIHJldHVybiByZXNwb25zZUJvZHkuZXJyb3JzLm1hcCgoZGF0YTogQ2FyZHNCYWNrZW5kRXJyb3IpID0+IHtcbiAgICAgICAgY29uc3QgeyBjb250ZXh0ID0ge30gfSA9IGRhdGE7XG4gICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBkYXRhLm1lc3NhZ2UucmVwbGFjZSgve1tfYS16QS1aXVtfYS16QS1aMC05XSp9L2csIChtYXRjaCkgPT4ge1xuICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGNvbnRleHRbbWF0Y2gucmVwbGFjZSgvW1xce1xcfSddKy9nLCAnJyldO1xuXG4gICAgICAgICAgcmV0dXJuIHJlc3VsdCAhPT0gdW5kZWZpbmVkID8gcmVzdWx0IDogbWF0Y2g7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBgRXJyb3IgJHtlcnJvci5zdGF0dXN9OiAke21lc3NhZ2V9YDtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQG5hbWUgZnJvbUh0dHBFcnJvclJlc3BvbnNlXG4gICAqIEBwYXJhbSBlcnJvclJlc3BvbnNlIFRoZSBlcnJvciByZXNwb25zZVxuICAgKiBAcmV0dXJucyBBbiBvYmplY3QgY29udGFpbmluZyBhIHVzZXItZnJpZW5kbHkgZXJyb3IgbWVzc2FnZVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogUGFyc2UgYW4gSHR0cEVycm9yUmVzcG9uc2UgYW5kIHJldHVybiBhIENhcmRzQmFja2VuZEVycm9yIG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIHRvIGRpc3BsYXkgYVxuICAgKiB1c2VyLWZyaWVuZGx5IGVycm9yIG1lc3NhZ2UuXG4gICAqL1xuICBleHBvcnQgY29uc3QgZnJvbUh0dHBFcnJvclJlc3BvbnNlID0gKGVycm9yUmVzcG9uc2U6IEh0dHBFcnJvclJlc3BvbnNlKTogQ2FyZHNCYWNrZW5kRXJyb3IgPT4ge1xuICAgIGlmIChlcnJvclJlc3BvbnNlLmVycm9yIGluc3RhbmNlb2YgRXJyb3JFdmVudCB8fCAhZXJyb3JSZXNwb25zZS5zdGF0dXMpIHtcbiAgICAgIC8vIENsaWVudC1zaWRlIG9yIG5ldHdvcmsgZXJyb3IuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBtZXNzYWdlOiAnQW4gdW5leHBlY3RlZCBlcnJvciBvY2N1cnJlZCcsXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBlcnJvciA9IGdldE1lc3NhZ2VGcm9tUmVzcG9uc2UoZXJyb3JSZXNwb25zZSkgfHwgW107XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIG1lc3NhZ2U6IGVycm9yWzBdIHx8IGBFcnJvciAke2Vycm9yUmVzcG9uc2Uuc3RhdHVzfWAsXG4gICAgICB9O1xuICAgIH1cbiAgfTtcblxuICBleHBvcnQgY29uc3QgZnJvbUh0dHBFcnJvcnNSZXNwb25zZSA9IChlcnJvclJlc3BvbnNlOiBIdHRwRXJyb3JSZXNwb25zZSk6IENhcmRzQmFja2VuZEVycm9yW10gPT4ge1xuICAgIGlmIChlcnJvclJlc3BvbnNlLmVycm9yIGluc3RhbmNlb2YgRXJyb3JFdmVudCB8fCAhZXJyb3JSZXNwb25zZS5zdGF0dXMpIHtcbiAgICAgIC8vIENsaWVudC1zaWRlIG9yIG5ldHdvcmsgZXJyb3IuXG4gICAgICByZXR1cm4gW1xuICAgICAgICB7XG4gICAgICAgICAgbWVzc2FnZTogJ0FuIHVuZXhwZWN0ZWQgZXJyb3Igb2NjdXJyZWQnLFxuICAgICAgICB9LFxuICAgICAgXTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgZXJyb3JzID0gZ2V0TWVzc2FnZUZyb21SZXNwb25zZShlcnJvclJlc3BvbnNlKSB8fCBbYEVycm9yICR7ZXJyb3JSZXNwb25zZS5zdGF0dXN9YF07XG5cbiAgICAgIHJldHVybiBlcnJvcnMubWFwKChtZXNzYWdlKSA9PiAoeyBtZXNzYWdlIH0pKTtcbiAgICB9XG4gIH07XG59XG4iXX0=