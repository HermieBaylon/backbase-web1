import { __rest } from "tslib";
import { Injectable } from '@angular/core';
import { BehaviorSubject, combineLatest } from 'rxjs';
import { catchError, distinctUntilChanged, map, publishReplay, refCount, switchMap } from 'rxjs/operators';
import { PaymentCardReplacementStatus, PaymentCardStatus, } from '../model/payment-card.model';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/data-ang/cards";
import * as i2 from "./cards-backend.service";
const initialGetParams = {};
const deepEqual = (x, y) => x && y && typeof x === 'object' && typeof x === typeof y
    ? Object.keys(x).length === Object.keys(y).length && Object.keys(x).every((key) => deepEqual(x[key], y[key]))
    : x === y;
const cacheRequest = (request) => (source) => source.pipe(switchMap(request), publishReplay(1), refCount());
/**
 * @name CardsService
 *
 * @description
 * Service for retrieving cards from the backend.
 */
export class CardsService {
    constructor(cardsDataHttpService, cardsBackendService, cardsTravelNotice) {
        this.cardsDataHttpService = cardsDataHttpService;
        this.cardsBackendService = cardsBackendService;
        this.cardsTravelNotice = cardsTravelNotice;
        this.getParams = new BehaviorSubject(initialGetParams);
        this.paymentCards = this.getParams.pipe(distinctUntilChanged(deepEqual), cacheRequest((getParams) => this.cardsDataHttpService.getCards(getParams, 'response').pipe(map((response) => this.cardsBackendService.itemListToModel(response.body)), catchError((error) => {
            throw this.cardsBackendService.parseError(error);
        }))));
        this.travelNotice = this.cardsTravelNotice.getTravelNotices('response').pipe(distinctUntilChanged(deepEqual), map((response) => (response.body === null ? [] : response.body)), catchError((error) => {
            throw this.cardsBackendService.parseError(error);
        }));
    }
    /**
     * @name CardsService#getCards
     * @returns The (single-instance) observable of payment cards retrieved from the backend.
     *
     * @description
     * Returns the (single-instance) observable of payment cards retrieved from the backend.
     */
    getCards() {
        return this.paymentCards;
    }
    setParameters(typesParams) {
        typesParams
            .pipe(map((types) => ({
            types,
        })))
            .subscribe(this.getParams);
    }
    /**
     * @name CardsService#updateLockStatus
     * @returns An observable of the payment card with updated lock status.
     *
     * @description
     * Calls the backend to change the lock status and returns an observable of updated payment card
     * returned in the response.  If that response is empty, the existing payment card with the
     * updated lock status is returned.
     */
    updateLockStatus(card, lockStatus) {
        const body = this.cardsBackendService.getLockStatusUpdate(lockStatus);
        return this.cardsDataHttpService.updateLockStatus({ id: card.id, lockStatusPost: body }, 'response').pipe(map((response) => response.body === null
            ? Object.assign(Object.assign({}, card), { lockStatus }) : this.cardsBackendService.itemToModel(response.body)), catchError((error) => {
            throw this.cardsBackendService.parseError(error);
        }));
    }
    /**
     * @name CardsService#initiateReplacement
     * @returns An observable of the payment card with updated replacement status.
     *
     * @description
     * Calls the backend to initiate replacement and returns an observable of the updated payment
     * card returned in the response.  If the response is empty, the existing payment card with
     * replacement status set to `UNDER_REPLACEMENT` is returned.
     */
    initiateReplacement(card, replacementReason) {
        const body = this.cardsBackendService.getReplacementUpdate(replacementReason);
        return this.cardsDataHttpService.requestReplacement({ id: card.id, requestReplacementPost: body }, 'response').pipe(map((response) => response.body === null
            ? Object.assign(Object.assign({}, card), { replacementStatus: PaymentCardReplacementStatus.UnderReplacement }) : this.cardsBackendService.itemToModel(response.body)), catchError((error) => {
            throw this.cardsBackendService.parseError(error);
        }));
    }
    /**
     * @name CardsService#initiateActivation
     * @returns An observable of the payment card with updated status.
     *
     * @description
     * Calls the backend to activate a payment card and returns an observable of the updated payment
     * card returned in the response.  If the response is empty, the existing payment card with
     * status set to `ACTIVE` is returned.
     */
    initiateActivation(card, token) {
        const body = { token };
        return this.cardsDataHttpService.activate({ id: card.id, activatePost: body }, 'response').pipe(map((response) => response.body === null
            ? Object.assign(Object.assign({}, card), { status: PaymentCardStatus.Active }) : this.cardsBackendService.itemToModel(response.body)), catchError((error) => {
            throw this.cardsBackendService.parseError(error);
        }));
    }
    /**
     * @name CardsService#updateLimit
     * @returns An observable of the payment card with updated limits.
     *
     * @description
     * Calls the backend to update a payment card and returns an observable of the updated payment
     * card returned in the response.  If the response is empty, the existing payment card with
     * limits updated is returned.
     */
    updateLimit(card, limit, updateAllLimits) {
        const limitPayload = updateAllLimits
            ? limit
            : limit.filter((newLimitItem, index) => { var _a; return newLimitItem.amount !== ((_a = card.limits) === null || _a === void 0 ? void 0 : _a[index].amount); });
        return this.cardsDataHttpService.changeLimits({ id: card.id, changeLimitsPostItem: limitPayload }, 'response').pipe(map((response) => {
            const limits = card.limits &&
                card.limits.map((item, index) => (Object.assign(Object.assign({}, item), { amount: limit[index].amount })));
            return response.body === null
                ? Object.assign(Object.assign({}, card), { limits }) : this.cardsBackendService.itemToModel(response.body);
        }), catchError((error) => {
            throw this.cardsBackendService.parseError(error);
        }));
    }
    resetPIN(card, paymentCardResetPin) {
        return this.cardsDataHttpService.resetPin({ id: card.id, resetPinPost: paymentCardResetPin }, 'response').pipe(map((response) => response.body === null
            ? Object.assign({}, card) : this.cardsBackendService.itemToModel(response.body)), catchError((error) => {
            throw this.cardsBackendService.parseError(error);
        }));
    }
    requestPIN(card, paymentCardResetPin) {
        return this.cardsDataHttpService.requestPin({ id: card.id, requestPinPost: paymentCardResetPin }, 'response').pipe(map((response) => response.body === null
            ? Object.assign({}, card) : this.cardsBackendService.itemToModel(response.body)), catchError((error) => {
            throw this.cardsBackendService.parseError(error);
        }));
    }
    /**
     *  Modified - added a observable to only respond with active cards.
     *
     * @returns Observable with all travel notices and payment cards with
     * status active
     */
    getTravelNotice() {
        const activeCards = this.paymentCards.pipe(map((cards) => cards.filter((card) => card.status === PaymentCardStatus.Active)));
        return combineLatest([activeCards, this.travelNotice]).pipe(map(([paymentCards, travelNotice]) => ({
            travelNoticeList: travelNotice.map((item) => this.cardsBackendService.travelNoticeToModel(item, paymentCards)),
            paymentCards,
        })));
    }
    postTravelNotice(travelNoticeItem) {
        const { cards } = travelNoticeItem, otherTravelNoticeProperties = __rest(travelNoticeItem, ["cards"]);
        const travelNoticeData = Object.assign(Object.assign({}, otherTravelNoticeProperties), { cardIds: cards.map((item) => item.id) });
        return this.cardsTravelNotice.createTravelNotice({ travelNotice: travelNoticeData });
    }
    deleteTravelNotice(travelNoticeItem) {
        const { id } = travelNoticeItem;
        if (!id)
            throw new Error('Error no matching id');
        return this.cardsTravelNotice.deleteTravelNoticeById({ id }, 'response');
    }
    ngOnDestroy() {
        this.getParams.complete();
    }
}
CardsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsService, deps: [{ token: i1.CardsHttpService }, { token: i2.CardsBackendService }, { token: i1.TravelNoticesHttpService }], target: i0.ɵɵFactoryTarget.Injectable });
CardsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.CardsHttpService }, { type: i2.CardsBackendService }, { type: i1.TravelNoticesHttpService }]; } });
//# sourceMappingURL=data:application/json;base64,