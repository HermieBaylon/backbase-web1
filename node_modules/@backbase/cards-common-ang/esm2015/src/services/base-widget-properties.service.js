import { Injectable, Optional } from '@angular/core';
import { of } from 'rxjs';
import { map } from 'rxjs/operators';
import { notificationTtl, WidgetProperties } from '../constants';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/foundation-ang/core";
export class BaseWidgetPropertiesService {
    constructor(itemModel) {
        this.itemModel = itemModel;
    }
    get notificationTtl() {
        return this.itemModel
            ? this.itemModel.property(WidgetProperties.NotificationTtl).pipe(map((propertyValue) => parseInt(propertyValue, 10)), map((ttl) => (ttl !== undefined && !isNaN(ttl) && ttl > 0 ? ttl : notificationTtl)))
            : of(notificationTtl);
    }
    get updateAllLimits() {
        return this.itemModel
            ? this.itemModel
                .property(WidgetProperties.updateAllLimits)
                .pipe(map((propertyValue) => (typeof propertyValue === 'boolean' ? propertyValue : propertyValue === 'true')))
            : of(false);
    }
}
BaseWidgetPropertiesService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BaseWidgetPropertiesService, deps: [{ token: i1.ItemModel, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
BaseWidgetPropertiesService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BaseWidgetPropertiesService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BaseWidgetPropertiesService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.ItemModel, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS13aWRnZXQtcHJvcGVydGllcy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9jYXJkcy1jb21tb24tYW5nL3NyYy9zZXJ2aWNlcy9iYXNlLXdpZGdldC1wcm9wZXJ0aWVzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFckQsT0FBTyxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN0QyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDckMsT0FBTyxFQUFFLGVBQWUsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGNBQWMsQ0FBQzs7O0FBR2pFLE1BQU0sT0FBTywyQkFBMkI7SUFrQnRDLFlBQTJDLFNBQW9CO1FBQXBCLGNBQVMsR0FBVCxTQUFTLENBQVc7SUFBRyxDQUFDO0lBakJuRSxJQUFJLGVBQWU7UUFDakIsT0FBTyxJQUFJLENBQUMsU0FBUztZQUNuQixDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsZUFBZSxDQUFDLENBQUMsSUFBSSxDQUM1RCxHQUFHLENBQUMsQ0FBQyxhQUFhLEVBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxhQUF1QixFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQzdELEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLEtBQUssU0FBUyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FDcEY7WUFDSCxDQUFDLENBQUMsRUFBRSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQzFCLENBQUM7SUFFRCxJQUFJLGVBQWU7UUFDakIsT0FBTyxJQUFJLENBQUMsU0FBUztZQUNuQixDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVM7aUJBQ1gsUUFBUSxDQUFDLGdCQUFnQixDQUFDLGVBQWUsQ0FBQztpQkFDMUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLGFBQWEsRUFBRSxFQUFFLENBQUMsQ0FBQyxPQUFPLGFBQWEsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsYUFBYSxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDbEgsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNoQixDQUFDOzt5SEFoQlUsMkJBQTJCOzZIQUEzQiwyQkFBMkI7NEZBQTNCLDJCQUEyQjtrQkFEdkMsVUFBVTs7MEJBbUJJLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSXRlbU1vZGVsIH0gZnJvbSAnQGJhY2tiYXNlL2ZvdW5kYXRpb24tYW5nL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IG5vdGlmaWNhdGlvblR0bCwgV2lkZ2V0UHJvcGVydGllcyB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBCYXNlV2lkZ2V0UHJvcGVydGllc1NlcnZpY2Uge1xuICBnZXQgbm90aWZpY2F0aW9uVHRsKCk6IE9ic2VydmFibGU8bnVtYmVyPiB7XG4gICAgcmV0dXJuIHRoaXMuaXRlbU1vZGVsXG4gICAgICA/IHRoaXMuaXRlbU1vZGVsLnByb3BlcnR5KFdpZGdldFByb3BlcnRpZXMuTm90aWZpY2F0aW9uVHRsKS5waXBlKFxuICAgICAgICAgIG1hcCgocHJvcGVydHlWYWx1ZSkgPT4gcGFyc2VJbnQocHJvcGVydHlWYWx1ZSBhcyBzdHJpbmcsIDEwKSksXG4gICAgICAgICAgbWFwKCh0dGwpID0+ICh0dGwgIT09IHVuZGVmaW5lZCAmJiAhaXNOYU4odHRsKSAmJiB0dGwgPiAwID8gdHRsIDogbm90aWZpY2F0aW9uVHRsKSksXG4gICAgICAgIClcbiAgICAgIDogb2Yobm90aWZpY2F0aW9uVHRsKTtcbiAgfVxuXG4gIGdldCB1cGRhdGVBbGxMaW1pdHMoKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG4gICAgcmV0dXJuIHRoaXMuaXRlbU1vZGVsXG4gICAgICA/IHRoaXMuaXRlbU1vZGVsXG4gICAgICAgICAgLnByb3BlcnR5KFdpZGdldFByb3BlcnRpZXMudXBkYXRlQWxsTGltaXRzKVxuICAgICAgICAgIC5waXBlKG1hcCgocHJvcGVydHlWYWx1ZSkgPT4gKHR5cGVvZiBwcm9wZXJ0eVZhbHVlID09PSAnYm9vbGVhbicgPyBwcm9wZXJ0eVZhbHVlIDogcHJvcGVydHlWYWx1ZSA9PT0gJ3RydWUnKSkpXG4gICAgICA6IG9mKGZhbHNlKTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIHByb3RlY3RlZCByZWFkb25seSBpdGVtTW9kZWw6IEl0ZW1Nb2RlbCkge31cbn1cbiJdfQ==