import { Injectable } from '@angular/core';
import { ReplaySubject } from 'rxjs';
import { catchError, distinctUntilChanged, filter, map, publishReplay, refCount, switchMap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/data-ang/cards";
import * as i2 from "./cards-backend.service";
const cacheRequest = (request) => (source) => source.pipe(switchMap(request), publishReplay(1), refCount());
/**
 * @name CardService
 *
 * @description
 * Service for retrieving and updating a single card from the backend.
 */
export class CardService {
    constructor(cardsDataHttpService, cardsBackendService) {
        this.cardsDataHttpService = cardsDataHttpService;
        this.cardsBackendService = cardsBackendService;
        this.paymentCardId = new ReplaySubject(1);
        this.paymentCard = this.paymentCardId.pipe(distinctUntilChanged(), filter((paymentCardId) => typeof paymentCardId !== 'undefined'), cacheRequest((paymentCardId) => this.cardsDataHttpService.getCardById({ id: paymentCardId }, 'response').pipe(map((response) => {
            if (response.body === null) {
                throw new Error('Some error message');
            }
            return this.cardsBackendService.itemToModel(response.body);
        }), catchError((error) => {
            throw this.cardsBackendService.parseError(error);
        }))));
    }
    getPaymentCardFrom(paymentCardId) {
        paymentCardId.subscribe(this.paymentCardId);
    }
    getPaymentCard() {
        return this.paymentCard;
    }
}
CardService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardService, deps: [{ token: i1.CardsHttpService }, { token: i2.CardsBackendService }], target: i0.ɵɵFactoryTarget.Injectable });
CardService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.CardsHttpService }, { type: i2.CardsBackendService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyZC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9jYXJkcy1jb21tb24tYW5nL3NyYy9zZXJ2aWNlcy9jYXJkLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQWMsYUFBYSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ2pELE9BQU8sRUFBRSxVQUFVLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxhQUFhLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7O0FBSW5ILE1BQU0sWUFBWSxHQUNoQixDQUFpQixPQUErQyxFQUFFLEVBQUUsQ0FDcEUsQ0FBQyxNQUEwQixFQUFzQixFQUFFLENBQ2pELE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxFQUFFLGFBQWEsQ0FBQyxDQUFDLENBQUMsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO0FBRWxFOzs7OztHQUtHO0FBRUgsTUFBTSxPQUFPLFdBQVc7SUE4QnRCLFlBQ21CLG9CQUFzQyxFQUN0QyxtQkFBd0M7UUFEeEMseUJBQW9CLEdBQXBCLG9CQUFvQixDQUFrQjtRQUN0Qyx3QkFBbUIsR0FBbkIsbUJBQW1CLENBQXFCO1FBL0IxQyxrQkFBYSxHQUFHLElBQUksYUFBYSxDQUFTLENBQUMsQ0FBQyxDQUFDO1FBRTdDLGdCQUFXLEdBQTRCLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUM3RSxvQkFBb0IsRUFBRSxFQUN0QixNQUFNLENBQUMsQ0FBQyxhQUFhLEVBQUUsRUFBRSxDQUFDLE9BQU8sYUFBYSxLQUFLLFdBQVcsQ0FBQyxFQUMvRCxZQUFZLENBQUMsQ0FBQyxhQUFhLEVBQUUsRUFBRSxDQUM3QixJQUFJLENBQUMsb0JBQW9CLENBQUMsV0FBVyxDQUFDLEVBQUUsRUFBRSxFQUFFLGFBQWEsRUFBRSxFQUFFLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FDM0UsR0FBRyxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUU7WUFDZixJQUFJLFFBQVEsQ0FBQyxJQUFJLEtBQUssSUFBSSxFQUFFO2dCQUMxQixNQUFNLElBQUksS0FBSyxDQUFDLG9CQUFvQixDQUFDLENBQUM7YUFDdkM7WUFFRCxPQUFPLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzdELENBQUMsQ0FBQyxFQUNGLFVBQVUsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFO1lBQ25CLE1BQU0sSUFBSSxDQUFDLG1CQUFtQixDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNuRCxDQUFDLENBQUMsQ0FDSCxDQUNGLENBQ0YsQ0FBQztJQWFDLENBQUM7SUFYSixrQkFBa0IsQ0FBQyxhQUFpQztRQUNsRCxhQUFhLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBRUQsY0FBYztRQUNaLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUMxQixDQUFDOzt5R0E1QlUsV0FBVzs2R0FBWCxXQUFXOzRGQUFYLFdBQVc7a0JBRHZCLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDYXJkc0h0dHBTZXJ2aWNlIH0gZnJvbSAnQGJhY2tiYXNlL2RhdGEtYW5nL2NhcmRzJztcbmltcG9ydCB7IE9ic2VydmFibGUsIFJlcGxheVN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGNhdGNoRXJyb3IsIGRpc3RpbmN0VW50aWxDaGFuZ2VkLCBmaWx0ZXIsIG1hcCwgcHVibGlzaFJlcGxheSwgcmVmQ291bnQsIHN3aXRjaE1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IFBheW1lbnRDYXJkIH0gZnJvbSAnLi4vbW9kZWwvcGF5bWVudC1jYXJkLm1vZGVsJztcbmltcG9ydCB7IENhcmRzQmFja2VuZFNlcnZpY2UgfSBmcm9tICcuL2NhcmRzLWJhY2tlbmQuc2VydmljZSc7XG5cbmNvbnN0IGNhY2hlUmVxdWVzdCA9XG4gIDxQYXJhbXMsIFJlc3VsdD4ocmVxdWVzdDogKHBhcmFtczogUGFyYW1zKSA9PiBPYnNlcnZhYmxlPFJlc3VsdD4pID0+XG4gIChzb3VyY2U6IE9ic2VydmFibGU8UGFyYW1zPik6IE9ic2VydmFibGU8UmVzdWx0PiA9PlxuICAgIHNvdXJjZS5waXBlKHN3aXRjaE1hcChyZXF1ZXN0KSwgcHVibGlzaFJlcGxheSgxKSwgcmVmQ291bnQoKSk7XG5cbi8qKlxuICogQG5hbWUgQ2FyZFNlcnZpY2VcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNlcnZpY2UgZm9yIHJldHJpZXZpbmcgYW5kIHVwZGF0aW5nIGEgc2luZ2xlIGNhcmQgZnJvbSB0aGUgYmFja2VuZC5cbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIENhcmRTZXJ2aWNlIHtcbiAgcHJpdmF0ZSByZWFkb25seSBwYXltZW50Q2FyZElkID0gbmV3IFJlcGxheVN1YmplY3Q8c3RyaW5nPigxKTtcblxuICBwcml2YXRlIHJlYWRvbmx5IHBheW1lbnRDYXJkOiBPYnNlcnZhYmxlPFBheW1lbnRDYXJkPiA9IHRoaXMucGF5bWVudENhcmRJZC5waXBlKFxuICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKCksXG4gICAgZmlsdGVyKChwYXltZW50Q2FyZElkKSA9PiB0eXBlb2YgcGF5bWVudENhcmRJZCAhPT0gJ3VuZGVmaW5lZCcpLFxuICAgIGNhY2hlUmVxdWVzdCgocGF5bWVudENhcmRJZCkgPT5cbiAgICAgIHRoaXMuY2FyZHNEYXRhSHR0cFNlcnZpY2UuZ2V0Q2FyZEJ5SWQoeyBpZDogcGF5bWVudENhcmRJZCB9LCAncmVzcG9uc2UnKS5waXBlKFxuICAgICAgICBtYXAoKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgaWYgKHJlc3BvbnNlLmJvZHkgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignU29tZSBlcnJvciBtZXNzYWdlJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHRoaXMuY2FyZHNCYWNrZW5kU2VydmljZS5pdGVtVG9Nb2RlbChyZXNwb25zZS5ib2R5KTtcbiAgICAgICAgfSksXG4gICAgICAgIGNhdGNoRXJyb3IoKGVycm9yKSA9PiB7XG4gICAgICAgICAgdGhyb3cgdGhpcy5jYXJkc0JhY2tlbmRTZXJ2aWNlLnBhcnNlRXJyb3IoZXJyb3IpO1xuICAgICAgICB9KSxcbiAgICAgICksXG4gICAgKSxcbiAgKTtcblxuICBnZXRQYXltZW50Q2FyZEZyb20ocGF5bWVudENhcmRJZDogT2JzZXJ2YWJsZTxzdHJpbmc+KSB7XG4gICAgcGF5bWVudENhcmRJZC5zdWJzY3JpYmUodGhpcy5wYXltZW50Q2FyZElkKTtcbiAgfVxuXG4gIGdldFBheW1lbnRDYXJkKCkge1xuICAgIHJldHVybiB0aGlzLnBheW1lbnRDYXJkO1xuICB9XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBjYXJkc0RhdGFIdHRwU2VydmljZTogQ2FyZHNIdHRwU2VydmljZSxcbiAgICBwcml2YXRlIHJlYWRvbmx5IGNhcmRzQmFja2VuZFNlcnZpY2U6IENhcmRzQmFja2VuZFNlcnZpY2UsXG4gICkge31cbn1cbiJdfQ==