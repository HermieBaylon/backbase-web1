import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';
import { defaultReplacementStatusMapping, defaultStatusMapping, defaultLockStatusMapping, defaultReplacementReasonMapping, defaultDeliveryStepStatusMapping, defaultLimitChannelMapping, } from '../constants';
import { CardsBackendError } from '../model/cards-backend-error.model';
import { PaymentCardLockStatus, PaymentCardReplacementStatus } from '../model/payment-card.model';
import { PaymentCardDeliveryStepStatus } from '../model/payment-card-delivery-status.model';
import * as i0 from "@angular/core";
/**
 * InjectionToken for overriding the default `PaymentCardStatusMapping` used to map backend
 * `status` values to internal status values.
 */
export const StatusMappingConfigToken = new InjectionToken('statusMapping injection token');
/**
 * InjectionToken for overriding the default `PaymentCardReplacementStatusMapping` used to map
 * backend `replacementStatus` values to internal replacement status values.
 */
export const ReplacementStatusMappingConfigToken = new InjectionToken('replacementStatusMapping injection token');
/**
 * InjectionToken for overriding the default `PaymentCardReplacementReasonMapping` used to map
 * internal replacement reason values to backend `replacementReason` values.
 */
export const ReplacementReasonMappingConfigToken = new InjectionToken('replacementReasonMapping injection token');
/**
 * InjectionToken for overriding the default `limitChannelMappingConfigToken` used to map
 * internal limit channels to backend values.
 */
export const LimitChannelMappingConfigToken = new InjectionToken('limitChannelMapping injection token');
/**
 * InjectionToken for overriding the default `CardsBackendDestinations` used to retrieve
 * countries from either a content-manager or database or any other third party.
 */
export const DestinationsServiceConfigToken = new InjectionToken('coutriesService injection token');
/**
 * @inner
 * @param maskedNumber - Number as returned in the http response
 * @returns Number
 *
 * @description
 * Process number provided by backend, removing whitespace.
 */
function processNumber(maskedNumber) {
    return maskedNumber.replace(/\s/g, '');
}
/**
 * @inner
 * @param status - Status as returned in the http response
 * @param statusMapping - Mapping of http response value to model
 * @returns Mapped payment card status, of the passed status if it cannot be mapped
 *
 * @description
 * Process status provided by backend.
 */
function processStatus(status, statusMapping) {
    if (statusMapping.hasOwnProperty(status)) {
        return statusMapping[status];
    }
    else {
        return status;
    }
}
function processLimitChannel(limitChannel = '', limitChannelMapping) {
    if (limitChannelMapping.hasOwnProperty(limitChannel)) {
        return limitChannelMapping[limitChannel];
    }
    else {
        return { name: limitChannel, description: '' };
    }
}
/**
 * @inner
 * @param replacementStatus - Replacement status as returned in the http response
 * @param replacementStatusMapping - Mapping of http response value to model
 * @returns Mapped payment card replacement status, or
 * `PaymentCardReplacementStatus.NotUnderReplacement` if the passed status is empty, or the passed
 * status if it cannot be mapped
 *
 * @description
 * Process replacement status provided by backend.
 */
function processReplacementStatus(replacementStatus, replacementStatusMapping) {
    if (typeof replacementStatus === 'undefined') {
        return PaymentCardReplacementStatus.NotUnderReplacement;
    }
    else if (replacementStatusMapping.hasOwnProperty(replacementStatus)) {
        return replacementStatusMapping[replacementStatus];
    }
    else {
        return replacementStatus;
    }
}
/**
 * @inner
 * @param lockStatus - Lock status as returned in the http response
 * @param lockStatusMapping - Mapping of http response value to model
 * @returns Payment card lock status
 *
 * @description
 * Process lock status provided by backend.
 */
function processLockStatus(lockStatus, lockStatusMapping) {
    if (lockStatus && lockStatusMapping.hasOwnProperty(lockStatus)) {
        return lockStatusMapping[lockStatus];
    }
    else {
        return PaymentCardLockStatus.Unlocked;
    }
}
/**
 * @inner
 * @param replacementReason - Replacement reason
 * @param replacementReasonMapping - Mapping of model to http POST value
 * @returns Mapped payment card replacement reason, or the passed replacement reason if it cannot
 * be mapped
 *
 * @description
 * Process replacement reason into value to pass to backend.
 */
function processReplacementReason(replacementReason, replacementReasonMapping) {
    if (replacementReasonMapping.hasOwnProperty(replacementReason)) {
        return replacementReasonMapping[replacementReason];
    }
    else {
        return replacementReason;
    }
}
/**
 * @inner
 * @param deliveryStepStatus - delivery transit step status as returned in the http response
 * @returns Delivery transit step status
 *
 * @description
 * Process delivery transit step status provided by backend.
 */
function processDeliveryStepStatus(deliveryStepStatus) {
    if (deliveryStepStatus && defaultDeliveryStepStatusMapping.hasOwnProperty(deliveryStepStatus)) {
        return defaultDeliveryStepStatusMapping[deliveryStepStatus];
    }
    else {
        return PaymentCardDeliveryStepStatus.Pending;
    }
}
/**
 * @inner
 * @param deliveryStep - delivery transit step object as returned in the http response
 * @returns Delivery transit step
 *
 * @description
 * Process delivery transit step provided by backend.
 */
function processDeliveryStep(deliveryStep) {
    return Object.assign({ name: deliveryStep.name, status: processDeliveryStepStatus(deliveryStep.status) }, (deliveryStep.stepDateTime ? { stepDateTime: new Date(deliveryStep.stepDateTime) } : {}));
}
/**
 * @inner
 * @param delivery - delivery object as returned in the http response
 * @returns Delivery status
 *
 * @description
 * Process delivery status provided by backend.
 */
function processDeliveryStatus(delivery) {
    return {
        transitSteps: delivery.transitSteps.map(processDeliveryStep),
    };
}
/**
 * @inner
 * @param yearMonth - expiration date as returned in the http response
 * @returns Date
 *
 * @description
 * Process expiration date provided by backend.
 */
function processExpirationDate(yearMonth) {
    return new Date(Number(yearMonth.year), Number(yearMonth.month) - 1);
}
/**
 * @name CardsBackendService
 *
 * @description
 * Utility functions for processing data returned by the backend.
 */
export class CardsBackendService {
    /* eslint-disable */
    constructor(statusMapping, replacementStatusMapping, replacementReasonMapping, limitChannelMapping) {
        /**
         * @name CardsBackendService#itemToModel
         * @param item - Item as returned in the http response
         * @returns Payment card
         *
         * @description
         * Process payment card provided by backend.
         */
        // eslint-disable-next-line
        this.itemToModel = (item) => (Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ id: item.id, name: (item.holder && item.holder.name) || '', number: processNumber(item.maskedNumber), vendor: item.brand, type: item.type, status: processStatus(item.status, this.statusMapping), replacementStatus: processReplacementStatus(item.replacement && item.replacement.status, this.replacementStatusMapping), lockStatus: processLockStatus(item.lockStatus, this.lockStatusMapping), expirationDate: processExpirationDate(item.expiryDate || { year: '', month: '' }), cardName: item.name || '' }, (item.delivery ? { deliveryStatus: processDeliveryStatus(item.delivery) } : {})), (item.subType ? { subType: item.subType } : {})), (item.currency ? { currency: item.currency } : {})), (item.additions ? { additions: item.additions } : {})), (item.limits
            ? {
                limits: item.limits.map((limit) => (Object.assign(Object.assign({}, limit), { channel: processLimitChannel(limit.channel, this.limitChannelMapping) }))),
            }
            : {})));
        this.travelNoticeToModel = (item, paymentCards) => ({
            id: item.id,
            cards: item.cardIds
                .map((cardId) => paymentCards.find((card) => card.id === cardId))
                .filter((card) => card !== undefined),
            departureDate: new Date(item.departureDate),
            arrivalDate: new Date(item.arrivalDate),
            destinations: item.destinations,
            contact: item.contact,
        });
        /**
         * @name CardsBackendService#getLockStatusUpdate
         * @param lockStatus - New lock status
         * @returns Update object to pass to `postCardsLockStatusRecordById` data module function
         *
         * @description
         * Make lock status update object to pass to backend.
         */
        this.getLockStatusUpdate = (lockStatus) => ({
            lockStatus: lockStatus === PaymentCardLockStatus.Unlocked ? 'UNLOCKED' : 'LOCKED',
        });
        /**
         * @name CardsBackendService#getReplacementUpdate
         * @param replacementReason - Reason for the replacement
         * @returns Update object to pass to `postCardsReplacementRecordById` data module function
         *
         * @description
         * Make replacement update object to pass to backend.
         */
        this.getReplacementUpdate = (replacementReason) => ({
            replacementReason: processReplacementReason(replacementReason, this.replacementReasonMapping),
        });
        this.statusMapping = Object.assign(Object.assign({}, defaultStatusMapping), statusMapping);
        this.replacementStatusMapping = Object.assign(Object.assign({}, defaultReplacementStatusMapping), replacementStatusMapping);
        this.lockStatusMapping = Object.assign({}, defaultLockStatusMapping);
        this.replacementReasonMapping = Object.assign(Object.assign({}, defaultReplacementReasonMapping), replacementReasonMapping);
        this.limitChannelMapping = Object.assign(Object.assign({}, defaultLimitChannelMapping), limitChannelMapping);
    }
    /**
     * @name CardsBackendService#itemListToModel
     * @param items - List of card items as returned in the http response
     * @returns Array of payment cards
     *
     * @description
     * Process data returned by the backend.
     */
    itemListToModel(items) {
        return (items || []).map(this.itemToModel);
    }
    /**
     * @name CardsBackendService#parseError
     * @param error - The error response
     * @returns An object containing a user-friendly error message
     *
     * @description
     * Parse an HttpErrorResponse and return a CardsBackendError object that can be used to display a
     * user-friendly error message.
     */
    parseError(error) {
        return CardsBackendError.fromHttpErrorsResponse(error);
    }
}
CardsBackendService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsBackendService, deps: [{ token: StatusMappingConfigToken, optional: true }, { token: ReplacementStatusMappingConfigToken, optional: true }, { token: ReplacementReasonMappingConfigToken, optional: true }, { token: LimitChannelMappingConfigToken, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
CardsBackendService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsBackendService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsBackendService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [StatusMappingConfigToken]
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [ReplacementStatusMappingConfigToken]
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [ReplacementReasonMappingConfigToken]
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [LimitChannelMappingConfigToken]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,