import * as i0 from '@angular/core';
import { Injectable, Directive, HostListener, Component, Input, EventEmitter, Output, ViewChild, InjectionToken, Optional, Inject, NgModule } from '@angular/core';
import { HttpResponse, HttpErrorResponse, HTTP_INTERCEPTORS } from '@angular/common/http';
import { of, combineLatest, BehaviorSubject, ReplaySubject } from 'rxjs';
import { flatMap, map, materialize, delay, dematerialize, switchMap, publishReplay, refCount, distinctUntilChanged, catchError, filter } from 'rxjs/operators';
import * as i2 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i9 from '@angular/forms';
import { FormGroup, FormControl, Validators, ReactiveFormsModule, FormsModule } from '@angular/forms';
import * as i6 from '@backbase/ui-ang/alert';
import { AlertModule } from '@backbase/ui-ang/alert';
import * as i1$2 from '@backbase/ui-ang/amount';
import { AmountModule } from '@backbase/ui-ang/amount';
import * as i2$4 from '@backbase/ui-ang/badge';
import { BadgeModule } from '@backbase/ui-ang/badge';
import * as i5 from '@backbase/ui-ang/button';
import { ButtonModule } from '@backbase/ui-ang/button';
import * as i1$3 from '@backbase/ui-ang/empty-state';
import { EmptyStateModule } from '@backbase/ui-ang/empty-state';
import * as i7 from '@backbase/ui-ang/focus';
import { FocusModule } from '@backbase/ui-ang/focus';
import * as i1 from '@backbase/ui-ang/icon';
import { IconModule } from '@backbase/ui-ang/icon';
import * as i2$2 from '@backbase/ui-ang/input-inline-edit';
import { InputInlineEditComponent, InputInlineEditModule } from '@backbase/ui-ang/input-inline-edit';
import * as i3 from '@backbase/ui-ang/input-password';
import { InputPasswordModule } from '@backbase/ui-ang/input-password';
import * as i3$1 from '@backbase/ui-ang/input-radio-group';
import { InputRadioGroupModule } from '@backbase/ui-ang/input-radio-group';
import * as i4 from '@backbase/ui-ang/input-validation-message';
import { InputValidationMessageModule } from '@backbase/ui-ang/input-validation-message';
import * as i1$1 from '@backbase/ui-ang/load-button';
import { LoadButtonModule } from '@backbase/ui-ang/load-button';
import * as i2$3 from '@backbase/ui-ang/loading-indicator';
import { LoadingIndicatorModule } from '@backbase/ui-ang/loading-indicator';
import * as i2$1 from '@backbase/ui-ang/modal';
import { ModalModule } from '@backbase/ui-ang/modal';
import * as i7$1 from '@backbase/ui-ang/payment-card';
import { PaymentCardModule } from '@backbase/ui-ang/payment-card';
import * as i1$5 from '@backbase/foundation-ang/core';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { __rest } from 'tslib';
import * as i1$4 from '@backbase/data-ang/cards';
import * as i2$5 from '@backbase/ui-ang/notification';

const baseCardItem = {
    id: '0',
    brand: 'Mastercard',
    type: 'Credit',
    subType: 'ATM',
    name: 'Blue Card',
    status: 'Active',
    lockStatus: 'UNLOCKED',
    holder: {
        name: 'Jack Reacher',
    },
    expiryDate: {
        year: '2023',
        month: '12',
    },
    currency: 'USD',
    maskedNumber: '1234',
};
const generateCardItem = (() => {
    let uid = 0;
    return (changes) => (Object.assign(Object.assign(Object.assign({}, baseCardItem), { id: (++uid).toString() }), changes));
})();
var data = [
    // with additions
    generateCardItem({
        maskedNumber: '0101',
        additions: {
            bonusPoints: '5',
        },
    }),
    // deactivated card
    generateCardItem({
        maskedNumber: '0301',
        status: 'Cancelled',
        replacement: { status: 'ReplacementRequested' },
        delivery: {
            transitSteps: [
                {
                    name: 'Ordered',
                    status: 'SUCCESS',
                    stepDateTime: '2019-01-28T16:41:41.090Z',
                },
                {
                    name: 'Processed',
                    status: 'SUCCESS',
                    stepDateTime: '2019-01-30T00:00:00.000Z',
                },
                {
                    name: 'In Transit',
                    status: 'PENDING',
                },
                {
                    name: 'Delivered',
                    status: 'PENDING',
                },
            ],
        },
    }),
    // should have a visa logo and gold color
    generateCardItem({
        maskedNumber: '0204',
        name: 'Gold Card',
        brand: 'Visa',
        type: 'Prepaid',
    }),
    // should have a visa logo and gold color
    generateCardItem({
        maskedNumber: '0201',
        name: 'Gold Card',
        brand: 'Visa',
    }),
    // needs to be activated
    generateCardItem({
        maskedNumber: '0401',
        status: 'Inactive',
    }),
    // expired
    generateCardItem({
        maskedNumber: '0302',
        status: 'Expired',
        type: 'Debit',
    }),
    // under delivery
    generateCardItem({
        maskedNumber: '0501',
        type: 'Debit',
        status: 'Inactive',
        delivery: {
            transitSteps: [
                {
                    name: 'Ordered',
                    status: 'SUCCESS',
                    stepDateTime: '2019-01-28T16:41:41.090Z',
                },
                {
                    name: 'Processed',
                    status: 'SUCCESS',
                    stepDateTime: '2019-01-30T00:00:00.000Z',
                },
                {
                    name: 'In Transit',
                    status: 'SUCCESS',
                    stepDateTime: '2019-02-01T00:00:00.000Z',
                },
                {
                    name: 'Delivered',
                    status: 'SUCCESS',
                    stepDateTime: '2019-02-03T00:00:00.000Z',
                },
            ],
        },
    }),
    // should have a visa logo and black color
    generateCardItem({
        maskedNumber: '0202',
        brand: 'Visa',
        name: 'Black Card',
        type: 'Debit',
    }),
    // with limits
    generateCardItem({
        maskedNumber: '1034',
        name: 'Green Card',
        limits: [
            {
                id: '1',
                channel: 'ATM',
                frequency: 'DAILY',
                amount: 3000.0,
                maxAmount: 10000.0,
                minAmount: 0.0,
            },
            {
                id: '2',
                channel: 'ONLINE',
                frequency: 'DAILY',
                amount: 2000.0,
                maxAmount: 10000.0,
                minAmount: 0.0,
            },
        ],
    }),
];

// Replaces spec examples with a custom list of cards
var cardsGetHook = () => new HttpResponse({
    body: data,
    status: 200,
});

// Throw HttpErrorResponse on wrong parameters
var cardsGetErrorHook = (response, params) => {
    const errorCode = parseInt(params.get('error'), 10);
    if (errorCode === 400) {
        const responseBody = {
            message: 'Bad Request',
            errors: [
                {
                    message: 'Mock error message: bad request',
                    key: 'cards.api.test.key',
                    context: {
                        arg0: 0,
                    },
                },
            ],
        };
        throw new HttpErrorResponse({
            error: responseBody,
            status: 400,
        });
    }
    if (errorCode === 403) {
        const responseBody = {
            message: 'Forbidden',
            errors: [
                {
                    message: 'Mock error message: Forbidden',
                    key: 'cards.api.test.key',
                    context: {
                        arg0: 0,
                    },
                },
            ],
        };
        throw new HttpErrorResponse({
            error: responseBody,
            status: 403,
        });
    }
    return response;
};

var cardGetHook = (paymentCardId) => new HttpResponse({
    body: data.find((paymentCard) => paymentCard.id === paymentCardId),
    status: 200,
});

// Throw HttpErrorResponse if not found
var cardGetErrorHook = (response) => {
    if (response.body === null) {
        const responseBody = {
            message: 'Not found',
            errors: [
                {
                    message: 'Mock error message: cannot find a card with this ID',
                    key: 'cards.api.test.key',
                    context: {
                        arg0: 0,
                    },
                },
            ],
        };
        throw new HttpErrorResponse({
            error: responseBody,
            status: 404,
        });
    }
    return response;
};

var cardsLockStatusPostHook = (request, response) => {
    const data = response.body;
    const lockStatus = request.body.lockStatus;
    data.lockStatus = lockStatus;
    return new HttpResponse({
        body: data,
        status: 200,
    });
};

var cardsReplacementPostHook = (response) => {
    const data = response.body;
    data.replacementStatus = 'ReplacementRequested';
    data.status = 'Cancelled';
    return new HttpResponse({
        body: data,
        status: 200,
    });
};

var cardsActivationPostHook = (response) => {
    const data = response.body;
    data.status = 'Active';
    return new HttpResponse({
        body: data,
        status: 200,
    });
};

var cardsLimitsPostHook = (response, limits) => {
    const card = response.body;
    card.limits = card.limits.map((item, index) => (Object.assign(Object.assign({}, item), limits[index])));
    return new HttpResponse({
        body: card,
        status: 200,
    });
};

const generateTravelNotice = (() => {
    let uid = 0;
    return (properties) => (Object.assign({ id: (++uid).toString() }, properties));
})();
const travelNoticeList = [
    generateTravelNotice({
        cardIds: ['1'],
        departureDate: '2020-01-09',
        arrivalDate: '2020-01-18',
        destinations: [
            {
                country: 'MEX',
            },
            {
                country: 'USA',
                region: 'US-TX',
            },
        ],
    }),
    generateTravelNotice({
        cardIds: ['1', '2'],
        departureDate: '2019-12-10',
        arrivalDate: '2019-12-23',
        destinations: [
            {
                country: 'JPN',
            },
            {
                country: 'USA',
                region: 'US-CA',
            },
        ],
        contact: {
            phoneNumber: '+1 646 432 3000',
        },
    }),
    generateTravelNotice({
        cardIds: ['1', '3', '7'],
        departureDate: '2019-07-23',
        arrivalDate: '2019-08-11',
        destinations: [
            {
                country: 'KHM',
            },
            {
                country: 'KOR',
            },
            {
                country: 'IND',
            },
        ],
        contact: {
            phoneNumber: '+1 646 432 3000',
        },
    }),
];

var travelNoticeGetHook = () => new HttpResponse({
    body: travelNoticeList,
    status: 200,
});

var travelNoticePostHook = (travelNotice) => {
    const travelNoticeItem = generateTravelNotice(travelNotice);
    travelNoticeList.unshift(travelNoticeItem);
    return new HttpResponse({
        body: travelNoticeItem,
        status: 200,
    });
};

var travelNoticeDeleteHook = (id) => {
    const index = travelNoticeList.findIndex((travelNoticeItem) => travelNoticeItem.id === id);
    travelNoticeList.splice(index, 1);
    return new HttpResponse({
        body: [],
        status: 200,
    });
};

class CardsMockBackendInterceptor {
    intercept(request, next) {
        return of(undefined).pipe(
        // eslint-disable-next-line
        flatMap(() => {
            console.log(request.method, request.urlWithParams);
            if (request.url.endsWith('/cards') && request.method === 'GET') {
                return of(new HttpResponse({
                    body: [],
                    status: 200,
                })).pipe(map(cardsGetHook), map((response) => cardsGetErrorHook(response, request.params)));
            }
            if (request.url.indexOf('/cards/') > -1 && request.method === 'GET') {
                const paymentCardId = request.url.split('/')[request.url.split('/').length - 1];
                return of(new HttpResponse({
                    body: [],
                    status: 200,
                })).pipe(map(() => cardGetHook(paymentCardId)), map((response) => cardGetErrorHook(response)));
            }
            if (request.url.endsWith('/travel-notices') && request.method === 'GET') {
                return of(new HttpResponse({
                    body: [],
                    status: 200,
                })).pipe(map(travelNoticeGetHook));
            }
            if (request.url.endsWith('/travel-notices') && request.method === 'POST') {
                const travelNoticeItem = request.body;
                return of(new HttpResponse({
                    body: [],
                    status: 200,
                })).pipe(map(() => travelNoticePostHook(travelNoticeItem)));
            }
            if (request.url.indexOf('/travel-notices') !== -1 && request.method === 'DELETE') {
                const travelNoticeItemId = request.url.split('/')[request.url.split('/').length - 1];
                return of(new HttpResponse({
                    body: [],
                    status: 200,
                })).pipe(map(() => travelNoticeDeleteHook(travelNoticeItemId)));
            }
            if (request.url.endsWith('/lock-status') && request.method === 'POST') {
                const paymentCardId = request.url.split('/')[request.url.split('/').length - 2];
                return of(new HttpResponse({
                    body: [],
                    status: 200,
                })).pipe(map(() => cardGetHook(paymentCardId)), map((response) => cardsLockStatusPostHook(request, response)));
            }
            if (request.url.endsWith('/replacement') && request.method === 'POST') {
                const paymentCardId = request.url.split('/')[request.url.split('/').length - 2];
                return of(new HttpResponse({
                    body: [],
                    status: 200,
                })).pipe(map(() => cardGetHook(paymentCardId)), map((response) => cardsReplacementPostHook(response)));
            }
            if (request.url.endsWith('/limits') && request.method === 'POST') {
                const paymentCardId = request.url.split('/')[request.url.split('/').length - 2];
                const limits = request.body;
                return of(new HttpResponse({
                    body: [],
                    status: 200,
                })).pipe(map(() => cardGetHook(paymentCardId)), map((response) => cardsLimitsPostHook(response, limits)));
            }
            if (request.url.endsWith('/activation') && request.method === 'POST') {
                const paymentCardId = request.url.split('/')[request.url.split('/').length - 2];
                return of(new HttpResponse({
                    body: [],
                    status: 200,
                })).pipe(map(() => cardGetHook(paymentCardId)), map((response) => cardsActivationPostHook(response)));
            }
            if (request.url.endsWith('/pin/reset') && request.method === 'POST') {
                const paymentCardId = request.url.split('/')[request.url.split('/').length - 3];
                return of(new HttpResponse({
                    body: [],
                    status: 200,
                })).pipe(map(() => cardGetHook(paymentCardId)));
            }
            if (request.url.endsWith('/pin/request') && request.method === 'POST') {
                const paymentCardId = request.url.split('/')[request.url.split('/').length - 3];
                return of(new HttpResponse({
                    body: [],
                    status: 200,
                })).pipe(map(() => cardGetHook(paymentCardId)));
            }
            return next.handle(request);
        }), materialize(), delay(1000), dematerialize());
    }
}
CardsMockBackendInterceptor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsMockBackendInterceptor, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
CardsMockBackendInterceptor.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsMockBackendInterceptor });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsMockBackendInterceptor, decorators: [{
            type: Injectable
        }] });
const CardsMockBackendProvider = {
    provide: HTTP_INTERCEPTORS,
    useClass: CardsMockBackendInterceptor,
    multi: true,
};

class AccessibilityKeyboardDirective {
    constructor(element) {
        this.element = element;
        element.nativeElement.tabIndex = 0;
    }
    // eslint-disable-next-line
    eventListener(event) {
        this.element.nativeElement.click(event);
    }
}
AccessibilityKeyboardDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccessibilityKeyboardDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
AccessibilityKeyboardDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: AccessibilityKeyboardDirective, selector: "[bbAccessibilityKeyboard]", host: { listeners: { "keydown.enter": "eventListener($event)", "keydown.space": "eventListener($event)" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: AccessibilityKeyboardDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbAccessibilityKeyboard]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { eventListener: [{
                type: HostListener,
                args: ['keydown.enter', ['$event']]
            }, {
                type: HostListener,
                args: ['keydown.space', ['$event']]
            }] } });

/**
 * Possible payment card delivery transit step statuses.
 */
var PaymentCardDeliveryStepStatus;
(function (PaymentCardDeliveryStepStatus) {
    PaymentCardDeliveryStepStatus["Success"] = "SUCCESS";
    PaymentCardDeliveryStepStatus["Pending"] = "PENDING";
    PaymentCardDeliveryStepStatus["Failed"] = "FAILED";
})(PaymentCardDeliveryStepStatus || (PaymentCardDeliveryStepStatus = {}));

/**
 * @name DeliveryTrackerComponent
 *
 * @description
 * Component that displays the steps to fulfill an activity.
 */
class DeliveryTrackerComponent {
    constructor() {
        /**
         * The steps that this component displays the steps of.  Mandatory.
         */
        this.steps = [];
        /**
         * Color for the icons and the lines
         */
        this.color = 'primary';
    }
    get currentStep() {
        const steps = this.steps.filter((step) => step.status === PaymentCardDeliveryStepStatus.Success);
        if (steps.length > 0) {
            return steps[steps.length - 1];
        }
        return undefined;
    }
    get stepColorClassName() {
        return `bb-delivery-tracker__step-icon-${this.color}`;
    }
    getStepClassName(step) {
        const stepClassName = step.name.toLowerCase().replace(/\W/g, '-').replace(/-{2,}/g, '-');
        return `bb-delivery-tracker__step--${stepClassName}`;
    }
    getStepIconClassName(name) {
        const stepClassName = name.toLowerCase().replace(/\W/g, '-').replace(/-{2,}/g, '-');
        return `delivery-tracker__step--${stepClassName}`;
    }
    ngOnInit() {
        if (typeof this.steps === 'undefined') {
            throw new Error(`"steps" input is required in "${this.constructor.name}"`);
        }
    }
}
DeliveryTrackerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: DeliveryTrackerComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
DeliveryTrackerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: DeliveryTrackerComponent, selector: "bb-delivery-tracker", inputs: { steps: "steps", color: "color" }, ngImport: i0, template: "<div class=\"bb-delivery-tracker\">\n  <div\n    class=\"bb-delivery-tracker__step\"\n    *ngFor=\"let step of steps\"\n    [ngClass]=\"[\n      step === currentStep ? 'active' : '',\n      getStepClassName(step)\n    ]\"\n  >\n    <div\n      class=\"bb-delivery-tracker__step-icon\"\n      [ngClass]=\"[\n        stepColorClassName,\n        step.status !== 'SUCCESS' ? 'bb-delivery-tracker__step-icon--disabled' : ''\n      ]\"\n    >\n      <bb-icon-ui \n        [name]=\"getStepIconClassName(step.status === 'SUCCESS' ? 'ordered' : step.name)\"\n        backgroundType=\"circle\"\n        size=\"md\"\n        [color]=\"step.status === 'SUCCESS' ? color : 'light'\"\n      ></bb-icon-ui>\n    </div>\n    <div\n      class=\"bb-delivery-tracker__step-text\"\n      [ngClass]=\"{'bb-text-support': step.status !== 'SUCCESS'}\"\n    >\n      {{ step.name }}\n    </div>\n    <div\n      class=\"bb-delivery-tracker__step-date bb-subtitle\"\n      *ngIf=\"step.stepDateTime\"\n    >\n      {{ step.stepDateTime | date }} at {{step.stepDateTime | date:'shortTime'}}\n    </div>\n  </div>\n</div>\n", components: [{ type: i1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "date": i2.DatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: DeliveryTrackerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-delivery-tracker',
                    templateUrl: './delivery-tracker.component.html',
                }]
        }], propDecorators: { steps: [{
                type: Input
            }], color: [{
                type: Input
            }] } });

class PaymentCardDeliveryStatusComponent {
    constructor() {
        /**
         * Delivery status of the payment card to be displayed.
         */
        this.deliveryStatus = { transitSteps: [] };
        this.hostRef = this;
    }
}
PaymentCardDeliveryStatusComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentCardDeliveryStatusComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
PaymentCardDeliveryStatusComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: PaymentCardDeliveryStatusComponent, selector: "bb-payment-card-delivery-status", inputs: { deliveryStatus: "deliveryStatus" }, ngImport: i0, template: "<ng-container bbCardsDeliveryStatusCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbCardsDeliveryStatusCustomizable let-hostRef>\n  <div class=\"bb-block bb-block--lg\">\n    <bb-delivery-tracker [steps]=\"hostRef.deliveryStatus.transitSteps\" color=\"success\"></bb-delivery-tracker>\n  </div>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return DeliveryTrackerComponent; }), selector: "bb-delivery-tracker", inputs: ["steps", "color"] }], directives: [{ type: i0.forwardRef(function () { return CardsDeliveryStatusCustomizableDirective; }), selector: "[bbCardsDeliveryStatusCustomizable]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentCardDeliveryStatusComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payment-card-delivery-status',
                    templateUrl: './payment-card-delivery-status.component.html',
                }]
        }], propDecorators: { deliveryStatus: [{
                type: Input
            }] } });
class CardsDeliveryStatusCustomizableDirective extends BbTemplate {
}
CardsDeliveryStatusCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsDeliveryStatusCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
CardsDeliveryStatusCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: CardsDeliveryStatusCustomizableDirective, selector: "[bbCardsDeliveryStatusCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsDeliveryStatusCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbCardsDeliveryStatusCustomizable]',
                }]
        }] });

class PaymentCardInitiateActivationComponent {
    constructor() {
        /**
         * Whether card activation has been initiated.
         */
        this.isInitiateActivationLoading = false;
        /**
         * Event to initiate activation of payment card;
         */
        this.initiateActivation = new EventEmitter();
        /**
         * Reference to instance of customizable component.
         */
        this.hostRef = this;
        /**
         * Flag to denote whether the activation modal is open or not.
         */
        this.isModalOpen = false;
        /**
         * Form model for initiating activation.
         */
        this.form = new FormGroup({
            token: new FormControl('', [Validators.required, Validators.minLength(3)]),
        });
    }
    ngOnInit() {
        if (typeof this.paymentCard === 'undefined') {
            throw new Error(`"paymentCard" input is required in "${this.constructor.name}"`);
        }
    }
    /**
     * Submit handler for initiating activation.
     *
     * @param params - form model value
     */
    onSubmit(params) {
        this.isModalOpen = false;
        this.initiateActivation.emit(params.token);
    }
    /**
     * Opens the modal.
     */
    onModalOpen() {
        this.isModalOpen = true;
    }
    /**
     * Closes the modal.
     */
    onModalClose() {
        this.isModalOpen = false;
        this.form.reset({ token: '' });
    }
    /**
     * Form element validation control.
     */
    isFieldValid(fieldName) {
        const control = this.form.get(fieldName);
        return !!control && (control.valid || control.untouched);
    }
}
PaymentCardInitiateActivationComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentCardInitiateActivationComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
PaymentCardInitiateActivationComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: PaymentCardInitiateActivationComponent, selector: "bb-payment-card-initiate-activation", inputs: { paymentCard: "paymentCard", isInitiateActivationLoading: "isInitiateActivationLoading" }, outputs: { initiateActivation: "initiateActivation" }, ngImport: i0, template: "<ng-container bbCardsInitiateActivationCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbCardsInitiateActivationCustomizable let-hostRef>\n  <bb-load-button-ui\n    data-role=\"activate-card-button\"\n    color=\"primary\"\n    [block]=\"true\"\n    [isLoading]=\"hostRef.isInitiateActivationLoading\"\n    (click)=\"!hostRef.isInitiateActivationLoading && hostRef.paymentCard?.status === 'INACTIVE' && hostRef.onModalOpen()\"\n    [disabled]=\"hostRef.paymentCard?.status !== 'INACTIVE'\"\n    i18n=\"Activate card button|Activate the card@@card.activation.button\"\n  >Activate card</bb-load-button-ui>\n\n  <bb-modal-ui\n    [isOpen]=\"hostRef.isModalOpen\"\n    [modalOptions]=\"{ centered: true }\"\n    (cancel)=\"hostRef.onModalClose()\"\n  >\n    <div class=\"modal-header\">\n      <div class=\"bb-block bb-block--xs\">\n        <h2 i18n=\"Activate card heading|Activate card header@@card.activationForm.heading\">\n          Activate card\n        </h2>\n      </div>\n    </div>\n    <ng-container bbCardsInitiateActivationFormCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n  </bb-modal-ui>\n</ng-template>\n\n<ng-template bbCardsInitiateActivationFormCustomizable let-hostRef>\n  <form *ngIf=\"hostRef.isModalOpen\" [formGroup]=\"hostRef.form\" (ngSubmit)=\"hostRef.onSubmit(hostRef.form.value)\">\n    <div class=\"modal-body\">\n      <div class=\"row\">\n        <div class=\"col-12 col-sm-6 order-sm-2\">\n          <div data-role=\"modal-card-img\" class=\"bb-block bb-block--md bb-payment-card-back bb-payment-card-icon-dialog\"></div>\n        </div>\n        <div class=\"col-12 col-sm-6\">\n          <h3 i18n=\"Enter your code heading|Heading for enter your code@@card.activationForm.options.heading\">\n            Enter your CVV code\n          </h3>\n          <p\n            class=\"bb-text-support\"\n            i18n=\"Enter your code subtext|Subtext for enter your code@@card.activationForm.options.subtitle\"\n          >To activate your card, please enter your CVV code at the back of your card as shown.</p>\n          <div class=\"row\">\n            <div class=\"col-6\">\n              <bb-input-password-ui\n                data-role=\"card-details-cvv-input\"\n                [autofocus]=\"true\"\n                formControlName=\"token\"\n                label=\"CVV code\"\n                i18n-label='CVV Code heading|Heading for CVV@@card.activationForm.options.heading'\n              ></bb-input-password-ui>\n            </div>\n            <div class=\"col-12\">\n              <bb-input-validation-message-ui [showErrors]=\"!hostRef.isFieldValid('token')\">\n                <span i18n=\"CVV Code validation@@card.activationForm.options.token.error.msg\">\n                  You need to enter the full CVV code.\n                </span>\n              </bb-input-validation-message-ui>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"modal-footer\">\n      <div class=\"bb-button-bar\">\n        <bb-button-ui\n          class=\"bb-button-bar__button\"\n          type=\"submit\"\n          color=\"primary\"\n          [disabled]=\"hostRef.form.invalid\"\n          i18n=\"Activate button|Activation confirm button@@card.activationForm.submitButton\"\n        >Activate</bb-button-ui>\n        <bb-button-ui\n          class=\"bb-button-bar__button\"\n          type=\"button\"\n          color=\"link\"\n          (click)=\"hostRef.onModalClose()\"\n          i18n=\"Cancel button|Cancel card activation@@card.activationForm.cancelButton\"\n        >Cancel</bb-button-ui>\n      </div>\n    </div>\n  </form>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i1$1.LoadButtonComponent; }), selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }, { type: i0.forwardRef(function () { return i2$1.ModalComponent; }), selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i0.forwardRef(function () { return i3.InputPasswordComponent; }), selector: "bb-input-password-ui", inputs: ["placeholder", "maxLength", "minLength", "readonly", "autocomplete", "showVisibilityControl", "showPassword", "visibilityControlLabel", "ariaLabel"], outputs: ["toggleVisibility"] }, { type: i0.forwardRef(function () { return i4.InputValidationMessageComponent; }), selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i0.forwardRef(function () { return i5.ButtonComponent; }), selector: "bb-button-ui", inputs: ["autofocus", "type", "disabled", "buttonSize", "color", "block"] }], directives: [{ type: i0.forwardRef(function () { return CardsInitiateActivationCustomizableDirective; }), selector: "[bbCardsInitiateActivationCustomizable]" }, { type: i0.forwardRef(function () { return CardsInitiateActivationFormCustomizableDirective; }), selector: "[bbCardsInitiateActivationFormCustomizable]" }, { type: i0.forwardRef(function () { return i2.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i9.ɵNgNoValidate; }), selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i0.forwardRef(function () { return i9.NgControlStatusGroup; }), selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i0.forwardRef(function () { return i9.FormGroupDirective; }), selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i0.forwardRef(function () { return i9.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0.forwardRef(function () { return i9.FormControlName; }), selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentCardInitiateActivationComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payment-card-initiate-activation',
                    templateUrl: './payment-card-initiate-activation.component.html',
                }]
        }], propDecorators: { paymentCard: [{
                type: Input
            }], isInitiateActivationLoading: [{
                type: Input
            }], initiateActivation: [{
                type: Output
            }] } });
class CardsInitiateActivationFormCustomizableDirective extends BbTemplate {
}
CardsInitiateActivationFormCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsInitiateActivationFormCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
CardsInitiateActivationFormCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: CardsInitiateActivationFormCustomizableDirective, selector: "[bbCardsInitiateActivationFormCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsInitiateActivationFormCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbCardsInitiateActivationFormCustomizable]',
                }]
        }] });
class CardsInitiateActivationCustomizableDirective extends BbTemplate {
}
CardsInitiateActivationCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsInitiateActivationCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
CardsInitiateActivationCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: CardsInitiateActivationCustomizableDirective, selector: "[bbCardsInitiateActivationCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsInitiateActivationCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbCardsInitiateActivationCustomizable]',
                }]
        }] });

class PaymentCardInitiateReplacementComponent {
    constructor() {
        /**
         * Whether card replacement has been initiated.
         */
        this.isInitiateReplacementLoading = false;
        /**
         * Event to initiate replacement of payment card;
         */
        this.initiateReplacement = new EventEmitter();
        /**
         * Reference to instance of customizable component.
         */
        this.hostRef = this;
        /**
         * Flag to denote whether the replacement modal is open or not.
         */
        this.isModalOpen = false;
        /**
         * The page of the replacement modal.
         */
        this.modalStep = 0;
        /**
         * Form model for initiating replacement.
         */
        this.form = new FormGroup({
            replacementReason: new FormControl(),
        });
    }
    ngOnInit() {
        if (typeof this.paymentCard === 'undefined') {
            throw new Error(`"paymentCard" input is required in "${this.constructor.name}"`);
        }
    }
    /**
     * Submit handler for initiating replacement.
     *
     * @param params - form model value
     */
    onSubmit(params) {
        this.isModalOpen = false;
        this.initiateReplacement.emit(params.replacementReason);
    }
    /**
     * Opens the modal (and resets the page to the first page).
     */
    onModalOpen() {
        this.modalStep = 0;
        this.isModalOpen = true;
    }
    /**
     * Closes the modal.
     */
    onModalClose() {
        this.isModalOpen = false;
    }
}
PaymentCardInitiateReplacementComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentCardInitiateReplacementComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
PaymentCardInitiateReplacementComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: PaymentCardInitiateReplacementComponent, selector: "bb-payment-card-initiate-replacement", inputs: { paymentCard: "paymentCard", isInitiateReplacementLoading: "isInitiateReplacementLoading" }, outputs: { initiateReplacement: "initiateReplacement" }, ngImport: i0, template: "<ng-container bbCardsInitiateReplacementCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbCardsInitiateReplacementCustomizable let-hostRef>\n  <bb-load-button-ui\n    data-role=\"replace-card-button\"\n    color=\"secondary\"\n    aria-label=\"Replace payment card, Replace lost, stolen or damaged cards\"\n    i18n-aria-label=\"Replace payment card@@card.replace.button.aria-label\"\n    [block]=\"true\"\n    [isLoading]=\"hostRef.isInitiateReplacementLoading\"\n    (click)=\"!hostRef.isInitiateReplacementLoading && hostRef.paymentCard?.replacementStatus === 'NOT_UNDER_REPLACEMENT' && hostRef.onModalOpen()\"\n    [disabled]=\"hostRef.paymentCard?.replacementStatus !== 'NOT_UNDER_REPLACEMENT'\"\n    i18n=\"Replace card button|Replace the card@@card.replace.button\"\n  >Replace</bb-load-button-ui>\n\n  <bb-modal-ui\n    [isOpen]=\"hostRef.isModalOpen\"\n    [modalOptions]=\"{ centered: true }\"\n    (cancel)=\"hostRef.onModalClose()\"\n  >\n  <div role=\"dialog\">\n    <div class=\"modal-header\">\n      <div class=\"bb-block\">\n        <h2 i18n=\"Replace card heading|Replace card header@@card.replaceForm.heading\">\n          Replace card\n        </h2>\n        <ng-container *ngIf=\"hostRef.modalStep === 0\">\n          <p\n            class=\"bb-text-support bb-block bb-block--no-margin\"\n            i18n=\"Replace card text|Why you want to replace card@@card.replaceForm.options.subtitle\"\n          >Tell us why you want to replace your card.</p>\n        </ng-container>\n      </div>\n    </div>\n    <ng-container bbCardsInitiateReplacementFormCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n  </div>\n  </bb-modal-ui>\n</ng-template>\n\n<ng-template bbCardsInitiateReplacementFormCustomizable let-hostRef>\n  <form [formGroup]=\"hostRef.form\" (ngSubmit)=\"hostRef.onSubmit(hostRef.form.value)\">\n    <!-- Form step -->\n    <ng-container *ngIf=\"hostRef.modalStep === 0\">\n      <div class=\"modal-body\">\n        <bb-input-radio-group-ui\n          [required]=\"true\"\n          aria-label=\"Tell us why you want to replace your card, select a reason\"\n          i18n-aria-label=\"replacement reason radio group aria-label@@card.replaceForm.radioGroup.options.aria-label\"\n          formControlName=\"replacementReason\"\n        >\n          <bb-input-radio-ui\n            value=\"LOST\"\n            [labelTemplate]=\"cardLostLabel\"\n            aria-label=\"Card lost, Report a missing card and get a new one. Your current card will be locked automatically\"\n            i18n-aria-label=\"Card lost radio button label|Card lost option@@card.replaceForm.options.lost.aria-label\"\n          ></bb-input-radio-ui>\n          <bb-input-radio-ui\n            value=\"STOLEN\"\n            [labelTemplate]=\"cardStolenLabel\"\n            aria-label=\"Card stolen, Report a stolen card and get a new one. Your current card will be locked automatically\"\n            i18n-aria-label=\"Card stolen radio button label|Card stolen option@@card.replaceForm.options.stolen.aria-label\"\n          ></bb-input-radio-ui>\n          <bb-input-radio-ui\n            value=\"BROKEN\"\n            [labelTemplate]=\"cardBrokenLabel\"\n            aria-label=\"Card broken, Report a broken card and get a new one\"\n            i18n-aria-label=\"Card broken radio button label|Card broken option@@card.replaceForm.options.broken.aria-label\"\n          ></bb-input-radio-ui>\n        </bb-input-radio-group-ui>\n\n        <ng-template #cardLostLabel>\n          <strong i18n=\"Card lost radio button label|Card lost option@@card.replaceForm.options.lost\">\n            Card lost\n          </strong>\n          <br>\n          <p\n            class=\"bb-text-support bb-text-default\"\n            i18n=\"Card lost radio button label subtext|Card lost option@@card.replaceForm.options.lost.subtext\"\n          >Report a missing card and get a new one. Your current card will be locked automatically.</p>\n        </ng-template>\n\n        <ng-template #cardStolenLabel>\n          <strong i18n=\"Card stolen radio button label|Card stolen option@@card.replaceForm.options.stolen\">\n            Card stolen\n          </strong>\n          <br>\n          <p\n            class=\"bb-text-support bb-text-default\"\n            i18n=\"Card stolen radio button label subtext|Card stolen option@@card.replaceForm.options.stolen.subtext\"\n          >Report a stolen card and get a new one. Your current card will be locked automatically.</p>\n        </ng-template>\n\n        <ng-template #cardBrokenLabel>\n          <strong i18n=\"Card broken radio button label|Card broken option@@card.replaceForm.options.broken\">\n            Card broken\n          </strong>\n          <br>\n          <p\n            class=\"bb-text-support bb-text-default\"\n            i18n=\"Card broken radio button label subtext|Card broken option@@card.replaceForm.options.broken.subtext\"\n          >Report a broken card and get a new one.</p>\n        </ng-template>\n      </div>\n      <div class=\"modal-footer\">\n        <div class=\"bb-button-bar\">\n          <button\n            bbButton\n            class=\"bb-button-bar__button\"\n            type=\"submit\"\n            color=\"primary\"\n            (click)=\"hostRef.modalStep = 1\"\n            i18n=\"Next button|Next step for replace@@card.replaceForm.nextButton\"\n          >Continue</button>\n          <button\n            bbButton\n            class=\"bb-button-bar__button\"\n            type=\"button\"\n            color=\"link\"\n            (click)=\"hostRef.onModalClose()\"\n            i18n=\"Cancel button|Cancel replace card@@card.replaceForm.cancelButton\"\n          >Cancel</button>\n        </div>\n      </div>\n    </ng-container>\n\n    <!-- Confirm step -->\n    <ng-container *ngIf=\"hostRef.modalStep === 1\">\n      <div class=\"modal-body\" tabindex=\"0\">\n        <h5\n          class=\"bb-text-semi-bold\"\n          i18n=\"Delivery address header|Delivery address@@card.replaceForm.deliveryAddress.heading\"\n          >Delivery address</h5>\n        <p\n          class=\"bb-text-support\"\n          i18n=\"Delivery address subtext|Delivery address@@card.replaceForm.deliveryAddress.subtext\"\n        >The new card will be delivered at your currently registered address.</p>\n      </div>\n      <div class=\"modal-footer\">\n        <div class=\"bb-button-bar\">\n          <button\n            bbButton\n            class=\"bb-button-bar__button\"\n            type=\"submit\"\n            color=\"primary\"\n            i18n=\"Order New button|Order new card Confirm@@card.replaceForm.submitButton\"\n            aria-label=\"order new payment card to the provided delivery address\"\n            i18n-aria-label= \"order new button aria-label@@card.replaceForm.submitButton.aria-label\"\n            [bbFocus]=\"true\"\n            *ngIf=\"hostRef.modalStep === 1\"\n          >Order New</button>\n          <button\n            bbButton\n            class=\"bb-button-bar__button\"\n            type=\"button\"\n            color=\"link\"\n            (click)=\"hostRef.onModalClose()\"\n            i18n=\"Cancel button|Cancel card replace@@card.replaceForm.cancelButton\"\n          >Cancel</button>\n        </div>\n      </div>\n    </ng-container>\n  </form>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i1$1.LoadButtonComponent; }), selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }, { type: i0.forwardRef(function () { return i2$1.ModalComponent; }), selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i0.forwardRef(function () { return i3$1.InputRadioGroupComponent; }), selector: "bb-input-radio-group-ui", inputs: ["horizontal", "preselect", "name", "verticalAlign"] }, { type: i0.forwardRef(function () { return i3$1.InputRadioComponent; }), selector: "bb-input-radio-ui", inputs: ["labelTemplate", "labelTemplateContext", "value", "label", "aria-label", "aria-labelledby", "aria-describedby", "role", "aria-activedescendant", "aria-expanded", "aria-invalid", "aria-owns", "disabled"] }], directives: [{ type: i0.forwardRef(function () { return CardsInitiateReplacementCustomizableDirective; }), selector: "[bbCardsInitiateReplacementCustomizable]" }, { type: i0.forwardRef(function () { return i2.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return CardsInitiateReplacementFormCustomizableDirective; }), selector: "[bbCardsInitiateReplacementFormCustomizable]" }, { type: i0.forwardRef(function () { return i9.ɵNgNoValidate; }), selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i0.forwardRef(function () { return i9.NgControlStatusGroup; }), selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i0.forwardRef(function () { return i9.FormGroupDirective; }), selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i0.forwardRef(function () { return i9.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0.forwardRef(function () { return i9.FormControlName; }), selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i0.forwardRef(function () { return i9.RequiredValidator; }), selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i0.forwardRef(function () { return i5.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0.forwardRef(function () { return i7.FocusDirective; }), selector: "[bbFocus]", inputs: ["bbFocus"], exportAs: ["bbFocus"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentCardInitiateReplacementComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payment-card-initiate-replacement',
                    templateUrl: './payment-card-initiate-replacement.component.html',
                }]
        }], propDecorators: { paymentCard: [{
                type: Input
            }], isInitiateReplacementLoading: [{
                type: Input
            }], initiateReplacement: [{
                type: Output
            }] } });
class CardsInitiateReplacementFormCustomizableDirective extends BbTemplate {
}
CardsInitiateReplacementFormCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsInitiateReplacementFormCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
CardsInitiateReplacementFormCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: CardsInitiateReplacementFormCustomizableDirective, selector: "[bbCardsInitiateReplacementFormCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsInitiateReplacementFormCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbCardsInitiateReplacementFormCustomizable]',
                }]
        }] });
class CardsInitiateReplacementCustomizableDirective extends BbTemplate {
}
CardsInitiateReplacementCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsInitiateReplacementCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
CardsInitiateReplacementCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: CardsInitiateReplacementCustomizableDirective, selector: "[bbCardsInitiateReplacementCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsInitiateReplacementCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbCardsInitiateReplacementCustomizable]',
                }]
        }] });

class PaymentCardLimitComponent {
    constructor() {
        /**
         * Event to update limit of payment card;
         */
        // eslint-disable-next-line
        this.updateLimit = new EventEmitter();
        /**
         * Reference to instance of customizable component.
         */
        this.hostRef = this;
    }
    onUpdateLimit(amount) {
        if (this.limit) {
            this.updateLimit.emit({ amount, cardLimit: this.limit });
        }
    }
}
PaymentCardLimitComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentCardLimitComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
PaymentCardLimitComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: PaymentCardLimitComponent, selector: "bb-payment-card-limit", inputs: { currency: "currency", limit: "limit" }, outputs: { updateLimit: "updateLimit" }, viewQueries: [{ propertyName: "inputEdit", first: true, predicate: InputInlineEditComponent, descendants: true }], ngImport: i0, template: "<ng-container bbCardsUpdateLimitCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbCardsUpdateLimitCustomizable let-hostRef>\n  <div class=\"row\">\n    <div class=\"col-12 col-sm-8\">\n      <h5 class=\"bb-block--no-margin\" data-role=\"limit-title\">\n        <span>{{hostRef?.limit?.frequency | titlecase }}&nbsp;</span>\n        <span>{{hostRef?.limit?.channel?.name}}</span>\n      </h5>\n      <span class=\"bb-text-support text-small\" data-role=\"limit-description\">{{hostRef?.limit?.channel?.description}}</span>\n    </div>\n\n    <div class=\"col-12 col-sm-4\">\n      <ng-template #amountTemplateRef>\n          <strong class=\"bb-stack__item bb-stack__item--push-right bb-stack__item--spacing-sm\">\n            <bb-amount-ui\n              data-role=\"limit-max-amount\"\n              [currency]=\"hostRef?.currency\" \n              [amount]=\"hostRef.limit?.amount\" \n              [mapCurrency]=\"true\"\n              [decimalPlaces]=\"0\"\n            ></bb-amount-ui>\n          </strong>\n      </ng-template>\n\n      <bb-input-inline-edit-ui \n        [inputText]=\"hostRef.limit?.amount\" \n        [maxValue]=\"hostRef.limit?.maxAmount\"\n        [minValue]=\"hostRef.limit?.minAmount\"\n        pattern=\"[0-9]+\"\n        [inputInlineTemplate]=\"amountTemplateRef\"\n        (accept)=\"hostRef.onUpdateLimit($event)\"\n      ></bb-input-inline-edit-ui> \n\n      <p class=\"bb-text-support bb-text-align-right text-small\" data-role=\"limit-max-allowed-amount\">\n        <span i18n=\"limit max amount@@card.limit.amount.header.maxAmount\">\n          Max:\n        </span>\n        <bb-amount-ui \n          [currency]=\"hostRef?.currency\" \n          [amount]=\"hostRef.limit?.maxAmount\" \n          [mapCurrency]=\"true\"\n          [decimalPlaces]=\"0\"\n        ></bb-amount-ui>\n      </p>\n    </div>\n  </div>\n</ng-template>", components: [{ type: i0.forwardRef(function () { return i1$2.AmountComponent; }), selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: i0.forwardRef(function () { return i2$2.InputInlineEditComponent; }), selector: "bb-input-inline-edit-ui", inputs: ["state", "canEdit", "hasLoadingState", "inputInlineTemplate", "inputText", "maxLength", "minLength", "maxValue", "minValue", "autofocus", "ariaLabelAccept", "ariaLabelCancel", "ariaLabelEdit", "tooltipAccept", "tooltipCancel", "tooltipEdit", "autocomplete", "pattern", "hint"], outputs: ["stateChange", "cancel", "accept"] }], directives: [{ type: i0.forwardRef(function () { return CardsUpdateLimitCustomizableDirective; }), selector: "[bbCardsUpdateLimitCustomizable]" }], pipes: { "titlecase": i0.forwardRef(function () { return i2.TitleCasePipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentCardLimitComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payment-card-limit',
                    templateUrl: 'payment-card-limit.component.html',
                }]
        }], propDecorators: { currency: [{
                type: Input
            }], limit: [{
                type: Input
            }], updateLimit: [{
                type: Output
            }], inputEdit: [{
                type: ViewChild,
                args: [InputInlineEditComponent]
            }] } });
class CardsUpdateLimitCustomizableDirective extends BbTemplate {
}
CardsUpdateLimitCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsUpdateLimitCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
CardsUpdateLimitCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: CardsUpdateLimitCustomizableDirective, selector: "[bbCardsUpdateLimitCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsUpdateLimitCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbCardsUpdateLimitCustomizable]',
                }]
        }] });

class PaymentCardLimitsComponent {
    constructor() {
        /**
         * Event to update limit of payment card;
         */
        this.updateLimit = new EventEmitter();
        /**
         * Reference to instance of customizable component.
         */
        this.hostRef = this;
    }
    onUpdateLimit(limit) {
        if (this.paymentCard) {
            const limits = this.paymentCard.limits;
            if (limits) {
                this.updateLimit.emit(limits.map((item) => {
                    let amount = item.amount;
                    if (limit.cardLimit && item.id === limit.cardLimit.id) {
                        amount = +limit.amount;
                    }
                    return {
                        amount,
                        id: item.id,
                        frequency: item.frequency,
                    };
                }));
            }
        }
    }
}
PaymentCardLimitsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentCardLimitsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
PaymentCardLimitsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: PaymentCardLimitsComponent, selector: "bb-payment-card-limits", inputs: { paymentCard: "paymentCard", isLimitsLoading: "isLimitsLoading" }, outputs: { updateLimit: "updateLimit" }, ngImport: i0, template: "<ng-container bbCardsUpdateLimitsCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n<ng-template bbCardsUpdateLimitsCustomizable let-hostRef>\n  <div class=\"card bb-list\" *ngIf=\"hostRef.paymentCard?.limits\">\n    <div class=\"card-header\">\n      <h2 i18n=\"Limits update heading|update card limits header@@card.updateLimit.heading\">\n        Limits\n      </h2>\n    </div>\n    <div class=\"card-body\">\n      <div class=\"bb-list\" *ngIf=\"!hostRef.isLimitsLoading; else loadingTemplate\">\n        <div class=\"bb-list__item\" *ngFor=\"let limit of hostRef.paymentCard.limits\">\n          <bb-payment-card-limit \n            [limit]=\"limit\"\n            [currency]=\"hostRef.paymentCard.currency\"\n            (updateLimit)=\"hostRef.onUpdateLimit($event)\"\n          ></bb-payment-card-limit>\n        </div>\n      </div>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #loadingTemplate>\n  <bb-loading-indicator-ui loaderSize=\"lg\"></bb-loading-indicator-ui>\n</ng-template>", components: [{ type: i0.forwardRef(function () { return PaymentCardLimitComponent; }), selector: "bb-payment-card-limit", inputs: ["currency", "limit"], outputs: ["updateLimit"] }, { type: i0.forwardRef(function () { return i2$3.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }], directives: [{ type: i0.forwardRef(function () { return CardsUpdateLimitsCustomizableDirective; }), selector: "[bbCardsUpdateLimitsCustomizable]" }, { type: i0.forwardRef(function () { return i2.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i2.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentCardLimitsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payment-card-limits',
                    templateUrl: './payment-card-limits.component.html',
                }]
        }], propDecorators: { paymentCard: [{
                type: Input
            }], isLimitsLoading: [{
                type: Input
            }], updateLimit: [{
                type: Output
            }] } });
class CardsUpdateLimitsCustomizableDirective extends BbTemplate {
}
CardsUpdateLimitsCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsUpdateLimitsCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
CardsUpdateLimitsCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: CardsUpdateLimitsCustomizableDirective, selector: "[bbCardsUpdateLimitsCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsUpdateLimitsCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbCardsUpdateLimitsCustomizable]',
                }]
        }] });

class PaymentCardMultipleErrorStateComponent {
    constructor() {
        this.hostRef = this;
    }
}
PaymentCardMultipleErrorStateComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentCardMultipleErrorStateComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
PaymentCardMultipleErrorStateComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: PaymentCardMultipleErrorStateComponent, selector: "bb-payment-card-multiple-error-state", inputs: { errors: "errors" }, ngImport: i0, template: "\n<ng-container\n  bbCardsMultipleErrorStateCustomizable\n  [bbHostRef]=\"hostRef\"\n></ng-container>\n\n<ng-template bbCardsMultipleErrorStateCustomizable let-hostRef>\n  <div class=\"card bb-state-container\">\n    <bb-empty-state-ui\n      title=\"Unknown Error\"\n      i18n-title=\"Error state title@@cards.common.errorState.title\"\n      iconModifier=\"error\"\n      iconSize=\"xxl\"\n      iconClasses=\"text-muted\"\n    ></bb-empty-state-ui>\n    <p \n      *ngFor=\"let error of hostRef.errors\" \n      data-role=\"custom-error-state-message\" \n      class=\"bb-empty-state__message bb-empty-state\"\n    >\n      {{error?.message}}\n    </p>\n  </div>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i1$3.EmptyStateComponent; }), selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i0.forwardRef(function () { return CardsMultipleErrorStateCustomizableDirective; }), selector: "[bbCardsMultipleErrorStateCustomizable]" }, { type: i0.forwardRef(function () { return i2.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentCardMultipleErrorStateComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payment-card-multiple-error-state',
                    templateUrl: 'payment-card-multiple-error-state.component.html',
                }]
        }], propDecorators: { errors: [{
                type: Input
            }] } });
class CardsMultipleErrorStateCustomizableDirective extends BbTemplate {
}
CardsMultipleErrorStateCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsMultipleErrorStateCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
CardsMultipleErrorStateCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: CardsMultipleErrorStateCustomizableDirective, selector: "[bbCardsMultipleErrorStateCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsMultipleErrorStateCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbCardsMultipleErrorStateCustomizable]',
                }]
        }] });

/**
 * Enum values to determine whether a reset pin would be done via delivery address or immediate change
 * Reset stands for allowing users to change their pin using the web app
 * Request stands for a delivery letter with the new pin
 */
var ResetPinModeEnum;
(function (ResetPinModeEnum) {
    ResetPinModeEnum["Reset"] = "RESET";
    ResetPinModeEnum["Request"] = "REQUEST";
})(ResetPinModeEnum || (ResetPinModeEnum = {}));

class PaymentCardResetPinComponent {
    constructor() {
        /**
         * Whether card reset pin has been initiated.
         */
        this.isResetPinLoading = false;
        /**
         * Event for reset pin of payment card;
         */
        this.resetPin = new EventEmitter();
        /**
         * Event for request pin of payment card;
         */
        this.requestPin = new EventEmitter();
        /**
         * Flag to denote whether the reset pin modal is open or not.
         */
        this.isModalOpen = false;
        /**
         * The page of the reset pin modal.
         */
        this.modalStep = 1;
        /**
         * Form model for reset pin.
         */
        this.model = {};
        /**
         * Form model for reset pin.
         */
        this.modelExclude = {};
        /**
         * Reference to instance of customizable component.
         */
        this.hostRef = this;
    }
    /**
     * Opens the modal.
     */
    onModalOpen() {
        this.isModalOpen = true;
    }
    /**
     * Submit handler for reset pin.
     */
    onSubmit() {
        const model = Object.assign({}, this.model);
        const raw = Object.assign(Object.assign({}, this.model), this.modelExclude);
        if (this.mode === ResetPinModeEnum.Reset) {
            this.resetPin.emit({ raw, model });
        }
        else if (this.mode === ResetPinModeEnum.Request) {
            this.requestPin.emit({ raw, model });
        }
        this.onModalClose();
    }
    /**
     * Closes the modal.
     */
    onModalClose() {
        this.modalStep = 1;
        this.model = {};
        this.modelExclude = {};
        this.isModalOpen = false;
    }
    ngOnInit() {
        if (typeof this.paymentCard === 'undefined') {
            throw new Error(`"paymentCard" input is required in "${this.constructor.name}"`);
        }
    }
}
PaymentCardResetPinComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentCardResetPinComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
PaymentCardResetPinComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: PaymentCardResetPinComponent, selector: "bb-payment-card-reset-pin", inputs: { paymentCard: "paymentCard", mode: "mode", isResetPinLoading: "isResetPinLoading" }, outputs: { resetPin: "resetPin", requestPin: "requestPin" }, ngImport: i0, template: "<ng-container bbCardsResetPinCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbCardsResetPinCustomizable let-hostRef>\n  <bb-load-button-ui\n    [block]=\"true\"\n    color=\"secondary\"\n    [isLoading]=\"hostRef.isResetPinLoading\"\n    (click)=\"hostRef.onModalOpen()\"\n  >\n    <ng-container *ngIf=\"hostRef.mode ==='REQUEST'\" i18n=\"Request PIN button|Request pin@@card.pin.request.button\">Request</ng-container>\n    <ng-container *ngIf=\"hostRef.mode ==='RESET'\" i18n=\"Reset PIN button|Reset pin@@card.pin.reset.button\">Reset</ng-container>\n  </bb-load-button-ui>\n\n  <bb-modal-ui\n    [isOpen]=\"hostRef.isModalOpen\"\n    [modalOptions]=\"{ centered: true }\"\n    (cancel)=\"hostRef.onModalClose()\"\n  >\n    <div class=\"modal-header\">\n      <div class=\"bb-block bb-block--xs\">\n        <ng-container *ngIf=\"hostRef.mode === 'REQUEST'\">\n          <h2 i18n=\"Request PIN card heading|Request pin card header@@card.requestPinForm.heading\">\n            Request new PIN\n          </h2>\n        </ng-container>\n        <ng-container *ngIf=\"hostRef.mode === 'RESET'\">\n          <h2 i18n=\"Reset PIN card heading|Reset pin header@@card.resetPin.heading\">\n            Reset PIN\n          </h2>\n        </ng-container>\n      </div>\n    </div>\n\n    <ng-container \n      bbCardsResetPinFormCustomizable \n      *ngIf=\"hostRef.modalStep === 1 && hostRef.isModalOpen\" \n      [bbHostRef]=\"hostRef\"\n    ></ng-container>\n\n    <ng-container\n      bbCardsResetPinConfirmationCustomizable\n      *ngIf=\"hostRef.modalStep === 2 && hostRef.mode ==='REQUEST' && hostRef.isModalOpen\" \n      [bbHostRef]=\"hostRef\"\n    ></ng-container>\n\n    <ng-container\n      bbCardsResetPinNewPinCustomizable\n      *ngIf=\"(hostRef.modalStep === 2 || hostRef.modalStep === 3) && hostRef.mode ==='RESET' && hostRef.isModalOpen\" \n      [bbHostRef]=\"hostRef\"\n    ></ng-container>\n  </bb-modal-ui>\n</ng-template>\n\n<ng-template bbCardsResetPinFormCustomizable let-hostRef>\n  <!-- Form step for Request and Reset PIN-->\n  <form #pinForm=\"ngForm\" (ngSubmit)=\"hostRef.modalStep = hostRef.modalStep + 1\">\n    <div class=\"modal-body\">\n      <div class=\"row\">\n        <div class=\"col-12 col-sm-6 order-sm-2\">\n          <div data-role=\"modal-card-img\" class=\"bb-block bb-block--md bb-payment-card-back bb-payment-card-icon-dialog\"></div>\n        </div>\n        <div class=\"col-12 col-sm-6\">\n          <h3 i18n=\"Enter your code heading|Heading for enter your code@@card.resetPinForm.options.heading\">\n            Enter your CVV code\n          </h3>\n          <p\n            class=\"bb-text-support\"\n            i18n=\"Enter your code subtext|Subtext for enter your code@@card.resetPinForm.options.subtitle\"\n          >Continue by entering your CVV code found on the back of your card as shown in the image.</p>\n          <div class=\"row\">\n            <div class=\"col-6\">\n              <bb-input-password-ui\n                #cvvToken=\"ngModel\"\n                data-role=\"card-details-cvv-input\"\n                name=\"token\"\n                [autofocus]=\"true\"\n                [(ngModel)]=\"hostRef.model.token\"\n                [required]=\"true\"\n                [minlength]=\"3\"\n                label=\"CVV code\"\n                i18n-label='CVV Code heading|Heading for CVV@@card.resetPinForm.options.heading'\n              ></bb-input-password-ui>\n            </div>\n            <div class=\"col-12\">\n              <bb-input-validation-message-ui [showErrors]=\"!!cvvToken.errors && !!cvvToken.touched\">\n                <span i18n=\"CVV Code validation@@card.resetPinForm.options.token.error.msg\">\n                  You need to enter the full CVV code.\n                </span>\n              </bb-input-validation-message-ui>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div class=\"modal-footer\">\n      <div class=\"bb-button-bar\">\n        <bb-button-ui\n          class=\"bb-button-bar__button\"\n          type=\"submit\"\n          color=\"primary\"\n          [disabled]=\"!!pinForm.invalid\"\n          i18n=\"Confirm continue pin button|Reset pin continue button@@card.resetPinForm.submitButton\"\n        >Continue</bb-button-ui>\n        <bb-button-ui\n          class=\"bb-button-bar__button\"\n          type=\"button\"\n          color=\"link\"\n          (click)=\"hostRef.onModalClose()\"\n          i18n=\"Cancel button|Cancel card reset pin@@card.resetPinForm.cancelButton\"\n        >Cancel</bb-button-ui>\n      </div>\n    </div>\n  </form>\n</ng-template>\n\n<ng-template bbCardsResetPinConfirmationCustomizable let-hostRef>\n  <!-- Confirmation step for Request Pin -->\n  <div class=\"modal-body\">\n    <bb-alert-ui \n      modifier=\"warning\" \n      title=\"Your new PIN will be delivered to your address within approximately 3 to 5 working days.\" \n      i18n-title=\"Reset pin alert|Reset pin alert@card.resetPinForm.alert\"\n    >\n    </bb-alert-ui>\n    <div>\n      <h5\n        class=\"bb-text-semi-bold\"\n        i18n=\"Delivery address header|Delivery address@@card.resetPinForm.deliveryAddress.heading\"\n      >Delivery address</h5>\n      <p\n        class=\"bb-text-support\"\n        i18n=\"Delivery address subtext|Delivery address@@card.resetPinForm.deliveryAddress.subtext\"\n      >The card will be delivered at your address currently known by us.</p>\n    </div>\n  </div>\n    \n  <div class=\"modal-footer\">\n    <div class=\"bb-button-bar\">\n      <bb-button-ui\n        class=\"bb-button-bar__button\"\n        color=\"primary\"\n        (click)=\"hostRef.onSubmit()\"\n        i18n=\"Request pin button|Request pin confirm button@@card.requestPinForm.submitButtonConfirm\"\n      >Request new PIN</bb-button-ui>\n      <bb-button-ui\n        class=\"bb-button-bar__button\"\n        type=\"button\"\n        color=\"link\"\n        (click)=\"hostRef.onModalClose()\"\n        i18n=\"Cancel button|Cancel card request pin@@card.requestPinForm.cancelButton\"\n      >Cancel</bb-button-ui>\n    </div>\n    \n  </div>\n</ng-template>\n\n<ng-template bbCardsResetPinNewPinCustomizable let-hostRef>\n  <!-- Confirmation step for Reset Pin -->\n  <form #pinForm=\"ngForm\" (ngSubmit)=\"hostRef.onSubmit()\">\n    <div class=\"modal-body\">\n      <div class=\"row\">\n        <div class=\"bb-block bb-block--md col-12 col-sm-8 order-sm-2\">\n          <div class=\"bb-stack\">\n            <div class=\"bb-stack__item bb-stack__item--push-right\">\n              <bb-payment-card-ui\n                [paymentCard]=\"hostRef.paymentCard\"\n              ></bb-payment-card-ui>\n            </div>\n          </div>\n        </div>\n        <div class=\"col-6 col-sm-4\">\n          <ng-container *ngIf=\"hostRef.modalStep === 2\">\n            <bb-input-password-ui\n              label=\"Enter new PIN\"\n              i18n-label=\"Enter your new pin|Enter new pin code@@card.resetPinForm.enterNewPin\"\n              name=\"pin\"\n              [(ngModel)]=\"hostRef.model.pin\"\n              [autofocus]=\"true\"\n              [required]=\"true\"\n            ></bb-input-password-ui>\n          </ng-container>\n    \n          <ng-container *ngIf=\"hostRef.modalStep === 3\">\n            <bb-input-password-ui\n              label=\"Re-enter new PIN\"\n              i18n-label=\"Re-enter your new pin|Re-enter new pin code@@card.resetPinForm.reEnterNewPin\"\n              name=\"pin2\"\n              [(ngModel)]=\"hostRef.modelExclude.pin2\"\n              [autofocus]=\"true\"\n              [required]=\"true\"\n            ></bb-input-password-ui>\n          </ng-container>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"modal-footer\">\n      <div class=\"bb-button-bar\">\n        <bb-button-ui\n          *ngIf=\"hostRef.modalStep === 2\"\n          class=\"bb-button-bar__button\"\n          color=\"primary\"\n          (click)=\"hostRef.modalStep = hostRef.modalStep + 1\"\n          [disabled]=\"!!pinForm.invalid\"\n          i18n=\"Continue button|Continue card reset pin@@card.resetPinForm.continueButton\"\n        >Continue</bb-button-ui>\n        <bb-button-ui\n          *ngIf=\"hostRef.modalStep === 3\"\n          class=\"bb-button-bar__button\"\n          color=\"primary\"\n          type=\"submit\"\n          [disabled]=\"!!pinForm.invalid\"\n          i18n=\"Confirm reset pin button|Reset pin confirm button@@card.resetPinForm.resetSubmitButton\"\n        >Confirm Reset</bb-button-ui>\n        <bb-button-ui\n          class=\"bb-button-bar__button\"\n          type=\"button\"\n          color=\"link\"\n          (click)=\"hostRef.onModalClose()\"\n          i18n=\"Cancel button|Cancel card reset pin@@card.resetPinForm.cancelButton\"\n        >Cancel</bb-button-ui>\n      </div>\n    </div>\n  </form>  \n</ng-template>\n   ", components: [{ type: i0.forwardRef(function () { return i1$1.LoadButtonComponent; }), selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }, { type: i0.forwardRef(function () { return i2$1.ModalComponent; }), selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i0.forwardRef(function () { return i3.InputPasswordComponent; }), selector: "bb-input-password-ui", inputs: ["placeholder", "maxLength", "minLength", "readonly", "autocomplete", "showVisibilityControl", "showPassword", "visibilityControlLabel", "ariaLabel"], outputs: ["toggleVisibility"] }, { type: i0.forwardRef(function () { return i4.InputValidationMessageComponent; }), selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i0.forwardRef(function () { return i5.ButtonComponent; }), selector: "bb-button-ui", inputs: ["autofocus", "type", "disabled", "buttonSize", "color", "block"] }, { type: i0.forwardRef(function () { return i6.AlertComponent; }), selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i0.forwardRef(function () { return i7$1.PaymentCardComponent; }), selector: "bb-payment-card-ui", inputs: ["paymentCard", "paymentCardNumberFormat"] }], directives: [{ type: i0.forwardRef(function () { return CardsResetPinCustomizableDirective; }), selector: "[bbCardsResetPinCustomizable]" }, { type: i0.forwardRef(function () { return i2.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return CardsResetPinFormCustomizableDirective; }), selector: "[bbCardsResetPinFormCustomizable]" }, { type: i0.forwardRef(function () { return CardsResetPinConfirmationCustomizableDirective; }), selector: "[bbCardsResetPinConfirmationCustomizable]" }, { type: i0.forwardRef(function () { return CardsResetPinNewPinCustomizableDirective; }), selector: "[bbCardsResetPinNewPinCustomizable]" }, { type: i0.forwardRef(function () { return i9.ɵNgNoValidate; }), selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i0.forwardRef(function () { return i9.NgControlStatusGroup; }), selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i0.forwardRef(function () { return i9.NgForm; }), selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i0.forwardRef(function () { return i9.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0.forwardRef(function () { return i9.NgModel; }), selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i0.forwardRef(function () { return i9.RequiredValidator; }), selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i0.forwardRef(function () { return i9.MinLengthValidator; }), selector: "[minlength][formControlName],[minlength][formControl],[minlength][ngModel]", inputs: ["minlength"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentCardResetPinComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payment-card-reset-pin',
                    templateUrl: 'payment-card-reset-pin.component.html',
                }]
        }], propDecorators: { paymentCard: [{
                type: Input
            }], mode: [{
                type: Input
            }], isResetPinLoading: [{
                type: Input
            }], resetPin: [{
                type: Output
            }], requestPin: [{
                type: Output
            }] } });
class CardsResetPinCustomizableDirective extends BbTemplate {
}
CardsResetPinCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsResetPinCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
CardsResetPinCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: CardsResetPinCustomizableDirective, selector: "[bbCardsResetPinCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsResetPinCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbCardsResetPinCustomizable]',
                }]
        }] });
class CardsResetPinConfirmationCustomizableDirective extends BbTemplate {
}
CardsResetPinConfirmationCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsResetPinConfirmationCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
CardsResetPinConfirmationCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: CardsResetPinConfirmationCustomizableDirective, selector: "[bbCardsResetPinConfirmationCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsResetPinConfirmationCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbCardsResetPinConfirmationCustomizable]',
                }]
        }] });
class CardsResetPinFormCustomizableDirective extends BbTemplate {
}
CardsResetPinFormCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsResetPinFormCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
CardsResetPinFormCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: CardsResetPinFormCustomizableDirective, selector: "[bbCardsResetPinFormCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsResetPinFormCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbCardsResetPinFormCustomizable]',
                }]
        }] });
class CardsResetPinNewPinCustomizableDirective extends BbTemplate {
}
CardsResetPinNewPinCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsResetPinNewPinCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
CardsResetPinNewPinCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: CardsResetPinNewPinCustomizableDirective, selector: "[bbCardsResetPinNewPinCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsResetPinNewPinCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbCardsResetPinNewPinCustomizable]',
                }]
        }] });

class PaymentCardStateWrapperComponent {
}
PaymentCardStateWrapperComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentCardStateWrapperComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
PaymentCardStateWrapperComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: PaymentCardStateWrapperComponent, selector: "bb-payment-card-state-wrapper,bb-payment-card-state-wrapper-ui", inputs: { state: "state" }, ngImport: i0, template: "<div class=\"bb-payment-card-state\">\n  <div class=\"bb-payment-card-state__container\" *ngIf=\"state\">\n    <!-- Inactive -->\n    <ng-container *ngIf=\"state === 'INACTIVE'\">\n      <bb-icon-ui\n        class=\"bb-payment-card-state__icon\"\n        name=\"warning\"\n        size=\"xxl\"\n        color=\"white\"\n      ></bb-icon-ui>\n      <bb-badge-ui\n        text=\"Inactive\"\n        i18n-text=\"Inactive label|Text for the inactive label@@cards.cardState.inactive\"\n        color=\"secondary\"\n      ></bb-badge-ui>\n    </ng-container>\n\n    <!-- Locked -->\n    <ng-container *ngIf=\"state === 'LOCKED'\">\n      <bb-icon-ui\n        class=\"bb-payment-card-state__icon\"\n        name=\"lock\"\n        size=\"xxl\"\n        color=\"white\"\n      ></bb-icon-ui>\n      <bb-badge-ui\n        text=\"Locked\"\n        i18n-text=\"Locked label|Text for the locked label@@cards.cardState.locked\"\n        color=\"secondary\"\n      ></bb-badge-ui>\n    </ng-container>\n\n    <!-- Cancelled -->\n    <ng-container *ngIf=\"state === 'CANCELLED'\">\n      <bb-icon-ui\n        class=\"bb-payment-card-state__icon\"\n        name=\"not-interested\"\n        size=\"xxl\"\n        color=\"white\"\n      ></bb-icon-ui>\n      <bb-badge-ui\n        text=\"Cancelled\"\n        i18n-text=\"Cancelled label|Text for the cancelled label@@cards.cardState.cancelled\"\n        color=\"secondary\"\n      ></bb-badge-ui>\n    </ng-container>\n\n    <!-- Expired -->\n    <ng-container *ngIf=\"state === 'EXPIRED'\">\n      <bb-icon-ui\n        class=\"bb-payment-card-state__icon\"\n        name=\"access-time\"\n        size=\"xxl\"\n        color=\"white\"\n      ></bb-icon-ui>\n      <bb-badge-ui\n        text=\"Expired\"\n        i18n-text=\"Expired label|Text for the expired label@@cards.cardState.expired\"\n        color=\"secondary\"\n      ></bb-badge-ui>\n    </ng-container>\n  </div>\n\n  <div [ngClass]=\"{ 'bb-payment-card-state__overlay': state }\">\n    <ng-content></ng-content>\n  </div>\n</div>\n", components: [{ type: i1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i2$4.BadgeComponent, selector: "bb-badge-ui", inputs: ["color", "text", "abbr", "circle", "wrap", "ariaLabel"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentCardStateWrapperComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payment-card-state-wrapper,bb-payment-card-state-wrapper-ui',
                    templateUrl: './payment-card-state-wrapper.component.html',
                }]
        }], propDecorators: { state: [{
                type: Input
            }] } });

/**
 * Possible payment card replacement reasons.
 */
var PaymentCardReplacementReason;
(function (PaymentCardReplacementReason) {
    PaymentCardReplacementReason["Lost"] = "LOST";
    PaymentCardReplacementReason["Stolen"] = "STOLEN";
    PaymentCardReplacementReason["Damaged"] = "DAMAGED";
})(PaymentCardReplacementReason || (PaymentCardReplacementReason = {}));

/**
 * Possible payment card statuses.
 */
var PaymentCardStatus;
(function (PaymentCardStatus) {
    PaymentCardStatus["Active"] = "ACTIVE";
    PaymentCardStatus["Inactive"] = "INACTIVE";
    PaymentCardStatus["Canceled"] = "CANCELED";
    PaymentCardStatus["Expired"] = "EXPIRED";
})(PaymentCardStatus || (PaymentCardStatus = {}));
/**
 * Possible payment card replacement statuses.
 */
var PaymentCardReplacementStatus;
(function (PaymentCardReplacementStatus) {
    PaymentCardReplacementStatus["NotUnderReplacement"] = "NOT_UNDER_REPLACEMENT";
    PaymentCardReplacementStatus["UnderReplacement"] = "UNDER_REPLACEMENT";
    PaymentCardReplacementStatus["Replaced"] = "REPLACED";
})(PaymentCardReplacementStatus || (PaymentCardReplacementStatus = {}));
/**
 * Possible payment card lock statuses.
 */
var PaymentCardLockStatus;
(function (PaymentCardLockStatus) {
    PaymentCardLockStatus["Locked"] = "LOCKED";
    PaymentCardLockStatus["Unlocked"] = "UNLOCKED";
})(PaymentCardLockStatus || (PaymentCardLockStatus = {}));

/**
 * Timeout for the notification
 */
const notificationTtl = 5000;
/**
 * The default mapping of backend values to internal model representation for card status.  This
 * mapping can be overridden per app.
 */
// prettier-ignore
const defaultStatusMapping = {
    'Active': PaymentCardStatus.Active,
    'Inactive': PaymentCardStatus.Inactive,
    'Cancelled': PaymentCardStatus.Canceled,
    'Expired': PaymentCardStatus.Expired,
};
/**
 * The default mapping of backend values to internal model representation for card replacement
 * status.  This mapping can be overridden per app.
 */
// prettier-ignore
const defaultReplacementStatusMapping = {
    'NotUnderReplacement': PaymentCardReplacementStatus.NotUnderReplacement,
    'ReplacementRequested': PaymentCardReplacementStatus.UnderReplacement,
    'ReplacementInTransit': PaymentCardReplacementStatus.UnderReplacement,
    'ReplacementUnderCancellation': PaymentCardReplacementStatus.UnderReplacement,
    'Replaced': PaymentCardReplacementStatus.Replaced,
};
/**
 * The mapping of backend values to internal model representation for card lock status.  This
 * mapping cannot be overridden (it is hardwired in the spec).
 */
// prettier-ignore
const defaultLockStatusMapping = {
    'LOCKED': PaymentCardLockStatus.Locked,
    'UNLOCKED': PaymentCardLockStatus.Unlocked,
};
/**
 * The mapping of backend values to internal model representation for card delivery step status.
 * This mapping cannot be overridden (it is hardwired in the spec).
 */
// prettier-ignore
const defaultDeliveryStepStatusMapping = {
    'SUCCESS': PaymentCardDeliveryStepStatus.Success,
    'PENDING': PaymentCardDeliveryStepStatus.Pending,
    'FAILED': PaymentCardDeliveryStepStatus.Failed,
};
/**
 * The default mapping of internal model representation to backend values for card replacement
 * reason.  This mapping can be overridden per app.
 */
const defaultReplacementReasonMapping = {
    [PaymentCardReplacementReason.Lost]: 'Lost',
    [PaymentCardReplacementReason.Stolen]: 'Stolen',
    [PaymentCardReplacementReason.Damaged]: 'Damaged',
};
// prettier-ignore
const defaultLimitChannelMapping = {
    'ATM': { name: 'withdrawals', description: 'The amount you can withdraw from cash machines' },
    'ONLINE': { name: 'online purchases', description: 'The limit for when using your card for payments online' },
    'POS': {
        name: 'terminal payments',
        description: 'The limit for physical payments with your card (e.g. supermarkets, restaurants, etc.)',
    },
};
/**
 * Enumeration of possible widget preferences
 */
const WidgetProperties = {
    NotificationTtl: 'notificationTtl',
    updateAllLimits: 'bb.card.updateAllLimits',
};
const DEFAULT_PAYMENT_CARD_TYPE_GROUP = ['Credit', 'Debit'];
const filterInputParameters = (input, prop) => combineLatest([input, prop]).pipe(map(([inputVal, propVal]) => (inputVal !== undefined ? inputVal : propVal)));

/* eslint-disable no-redeclare*/
var CardsBackendError;
(function (CardsBackendError) {
    const getMessageFromResponse = (error) => {
        const responseBody = error.error;
        if (Array.isArray(responseBody && responseBody.errors)) {
            return responseBody.errors.map((data) => {
                const { context = {} } = data;
                const message = data.message.replace(/{[_a-zA-Z][_a-zA-Z0-9]*}/g, (match) => {
                    const result = context[match.replace(/[\{\}']+/g, '')];
                    return result !== undefined ? result : match;
                });
                return `Error ${error.status}: ${message}`;
            });
        }
        else {
            return undefined;
        }
    };
    /**
     * @name fromHttpErrorResponse
     * @param errorResponse The error response
     * @returns An object containing a user-friendly error message
     *
     * @description
     * Parse an HttpErrorResponse and return a CardsBackendError object that can be used to display a
     * user-friendly error message.
     */
    CardsBackendError.fromHttpErrorResponse = (errorResponse) => {
        if (errorResponse.error instanceof ErrorEvent || !errorResponse.status) {
            // Client-side or network error.
            return {
                message: 'An unexpected error occurred',
            };
        }
        else {
            const error = getMessageFromResponse(errorResponse) || [];
            return {
                message: error[0] || `Error ${errorResponse.status}`,
            };
        }
    };
    CardsBackendError.fromHttpErrorsResponse = (errorResponse) => {
        if (errorResponse.error instanceof ErrorEvent || !errorResponse.status) {
            // Client-side or network error.
            return [
                {
                    message: 'An unexpected error occurred',
                },
            ];
        }
        else {
            const errors = getMessageFromResponse(errorResponse) || [`Error ${errorResponse.status}`];
            return errors.map((message) => ({ message }));
        }
    };
})(CardsBackendError || (CardsBackendError = {}));

/**
 * InjectionToken for overriding the default `PaymentCardStatusMapping` used to map backend
 * `status` values to internal status values.
 */
const StatusMappingConfigToken = new InjectionToken('statusMapping injection token');
/**
 * InjectionToken for overriding the default `PaymentCardReplacementStatusMapping` used to map
 * backend `replacementStatus` values to internal replacement status values.
 */
const ReplacementStatusMappingConfigToken = new InjectionToken('replacementStatusMapping injection token');
/**
 * InjectionToken for overriding the default `PaymentCardReplacementReasonMapping` used to map
 * internal replacement reason values to backend `replacementReason` values.
 */
const ReplacementReasonMappingConfigToken = new InjectionToken('replacementReasonMapping injection token');
/**
 * InjectionToken for overriding the default `limitChannelMappingConfigToken` used to map
 * internal limit channels to backend values.
 */
const LimitChannelMappingConfigToken = new InjectionToken('limitChannelMapping injection token');
/**
 * InjectionToken for overriding the default `CardsBackendDestinations` used to retrieve
 * countries from either a content-manager or database or any other third party.
 */
const DestinationsServiceConfigToken = new InjectionToken('coutriesService injection token');
/**
 * @inner
 * @param maskedNumber - Number as returned in the http response
 * @returns Number
 *
 * @description
 * Process number provided by backend, removing whitespace.
 */
function processNumber(maskedNumber) {
    return maskedNumber.replace(/\s/g, '');
}
/**
 * @inner
 * @param status - Status as returned in the http response
 * @param statusMapping - Mapping of http response value to model
 * @returns Mapped payment card status, of the passed status if it cannot be mapped
 *
 * @description
 * Process status provided by backend.
 */
function processStatus(status, statusMapping) {
    if (statusMapping.hasOwnProperty(status)) {
        return statusMapping[status];
    }
    else {
        return status;
    }
}
function processLimitChannel(limitChannel = '', limitChannelMapping) {
    if (limitChannelMapping.hasOwnProperty(limitChannel)) {
        return limitChannelMapping[limitChannel];
    }
    else {
        return { name: limitChannel, description: '' };
    }
}
/**
 * @inner
 * @param replacementStatus - Replacement status as returned in the http response
 * @param replacementStatusMapping - Mapping of http response value to model
 * @returns Mapped payment card replacement status, or
 * `PaymentCardReplacementStatus.NotUnderReplacement` if the passed status is empty, or the passed
 * status if it cannot be mapped
 *
 * @description
 * Process replacement status provided by backend.
 */
function processReplacementStatus(replacementStatus, replacementStatusMapping) {
    if (typeof replacementStatus === 'undefined') {
        return PaymentCardReplacementStatus.NotUnderReplacement;
    }
    else if (replacementStatusMapping.hasOwnProperty(replacementStatus)) {
        return replacementStatusMapping[replacementStatus];
    }
    else {
        return replacementStatus;
    }
}
/**
 * @inner
 * @param lockStatus - Lock status as returned in the http response
 * @param lockStatusMapping - Mapping of http response value to model
 * @returns Payment card lock status
 *
 * @description
 * Process lock status provided by backend.
 */
function processLockStatus(lockStatus, lockStatusMapping) {
    if (lockStatus && lockStatusMapping.hasOwnProperty(lockStatus)) {
        return lockStatusMapping[lockStatus];
    }
    else {
        return PaymentCardLockStatus.Unlocked;
    }
}
/**
 * @inner
 * @param replacementReason - Replacement reason
 * @param replacementReasonMapping - Mapping of model to http POST value
 * @returns Mapped payment card replacement reason, or the passed replacement reason if it cannot
 * be mapped
 *
 * @description
 * Process replacement reason into value to pass to backend.
 */
function processReplacementReason(replacementReason, replacementReasonMapping) {
    if (replacementReasonMapping.hasOwnProperty(replacementReason)) {
        return replacementReasonMapping[replacementReason];
    }
    else {
        return replacementReason;
    }
}
/**
 * @inner
 * @param deliveryStepStatus - delivery transit step status as returned in the http response
 * @returns Delivery transit step status
 *
 * @description
 * Process delivery transit step status provided by backend.
 */
function processDeliveryStepStatus(deliveryStepStatus) {
    if (deliveryStepStatus && defaultDeliveryStepStatusMapping.hasOwnProperty(deliveryStepStatus)) {
        return defaultDeliveryStepStatusMapping[deliveryStepStatus];
    }
    else {
        return PaymentCardDeliveryStepStatus.Pending;
    }
}
/**
 * @inner
 * @param deliveryStep - delivery transit step object as returned in the http response
 * @returns Delivery transit step
 *
 * @description
 * Process delivery transit step provided by backend.
 */
function processDeliveryStep(deliveryStep) {
    return Object.assign({ name: deliveryStep.name, status: processDeliveryStepStatus(deliveryStep.status) }, (deliveryStep.stepDateTime ? { stepDateTime: new Date(deliveryStep.stepDateTime) } : {}));
}
/**
 * @inner
 * @param delivery - delivery object as returned in the http response
 * @returns Delivery status
 *
 * @description
 * Process delivery status provided by backend.
 */
function processDeliveryStatus(delivery) {
    return {
        transitSteps: delivery.transitSteps.map(processDeliveryStep),
    };
}
/**
 * @inner
 * @param yearMonth - expiration date as returned in the http response
 * @returns Date
 *
 * @description
 * Process expiration date provided by backend.
 */
function processExpirationDate(yearMonth) {
    return new Date(Number(yearMonth.year), Number(yearMonth.month) - 1);
}
/**
 * @name CardsBackendService
 *
 * @description
 * Utility functions for processing data returned by the backend.
 */
class CardsBackendService {
    /* eslint-disable */
    constructor(statusMapping, replacementStatusMapping, replacementReasonMapping, limitChannelMapping) {
        /**
         * @name CardsBackendService#itemToModel
         * @param item - Item as returned in the http response
         * @returns Payment card
         *
         * @description
         * Process payment card provided by backend.
         */
        // eslint-disable-next-line
        this.itemToModel = (item) => (Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ id: item.id, name: (item.holder && item.holder.name) || '', number: processNumber(item.maskedNumber), vendor: item.brand, type: item.type, status: processStatus(item.status, this.statusMapping), replacementStatus: processReplacementStatus(item.replacement && item.replacement.status, this.replacementStatusMapping), lockStatus: processLockStatus(item.lockStatus, this.lockStatusMapping), expirationDate: processExpirationDate(item.expiryDate || { year: '', month: '' }), cardName: item.name || '' }, (item.delivery ? { deliveryStatus: processDeliveryStatus(item.delivery) } : {})), (item.subType ? { subType: item.subType } : {})), (item.currency ? { currency: item.currency } : {})), (item.additions ? { additions: item.additions } : {})), (item.limits
            ? {
                limits: item.limits.map((limit) => (Object.assign(Object.assign({}, limit), { channel: processLimitChannel(limit.channel, this.limitChannelMapping) }))),
            }
            : {})));
        this.travelNoticeToModel = (item, paymentCards) => ({
            id: item.id,
            cards: item.cardIds
                .map((cardId) => paymentCards.find((card) => card.id === cardId))
                .filter((card) => card !== undefined),
            departureDate: new Date(item.departureDate),
            arrivalDate: new Date(item.arrivalDate),
            destinations: item.destinations,
            contact: item.contact,
        });
        /**
         * @name CardsBackendService#getLockStatusUpdate
         * @param lockStatus - New lock status
         * @returns Update object to pass to `postCardsLockStatusRecordById` data module function
         *
         * @description
         * Make lock status update object to pass to backend.
         */
        this.getLockStatusUpdate = (lockStatus) => ({
            lockStatus: lockStatus === PaymentCardLockStatus.Unlocked ? 'UNLOCKED' : 'LOCKED',
        });
        /**
         * @name CardsBackendService#getReplacementUpdate
         * @param replacementReason - Reason for the replacement
         * @returns Update object to pass to `postCardsReplacementRecordById` data module function
         *
         * @description
         * Make replacement update object to pass to backend.
         */
        this.getReplacementUpdate = (replacementReason) => ({
            replacementReason: processReplacementReason(replacementReason, this.replacementReasonMapping),
        });
        this.statusMapping = Object.assign(Object.assign({}, defaultStatusMapping), statusMapping);
        this.replacementStatusMapping = Object.assign(Object.assign({}, defaultReplacementStatusMapping), replacementStatusMapping);
        this.lockStatusMapping = Object.assign({}, defaultLockStatusMapping);
        this.replacementReasonMapping = Object.assign(Object.assign({}, defaultReplacementReasonMapping), replacementReasonMapping);
        this.limitChannelMapping = Object.assign(Object.assign({}, defaultLimitChannelMapping), limitChannelMapping);
    }
    /**
     * @name CardsBackendService#itemListToModel
     * @param items - List of card items as returned in the http response
     * @returns Array of payment cards
     *
     * @description
     * Process data returned by the backend.
     */
    itemListToModel(items) {
        return (items || []).map(this.itemToModel);
    }
    /**
     * @name CardsBackendService#parseError
     * @param error - The error response
     * @returns An object containing a user-friendly error message
     *
     * @description
     * Parse an HttpErrorResponse and return a CardsBackendError object that can be used to display a
     * user-friendly error message.
     */
    parseError(error) {
        return CardsBackendError.fromHttpErrorsResponse(error);
    }
}
CardsBackendService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsBackendService, deps: [{ token: StatusMappingConfigToken, optional: true }, { token: ReplacementStatusMappingConfigToken, optional: true }, { token: ReplacementReasonMappingConfigToken, optional: true }, { token: LimitChannelMappingConfigToken, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
CardsBackendService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsBackendService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsBackendService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [StatusMappingConfigToken]
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [ReplacementStatusMappingConfigToken]
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [ReplacementReasonMappingConfigToken]
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [LimitChannelMappingConfigToken]
                }] }]; } });

const initialGetParams = {};
const deepEqual = (x, y) => x && y && typeof x === 'object' && typeof x === typeof y
    ? Object.keys(x).length === Object.keys(y).length && Object.keys(x).every((key) => deepEqual(x[key], y[key]))
    : x === y;
const cacheRequest$1 = (request) => (source) => source.pipe(switchMap(request), publishReplay(1), refCount());
/**
 * @name CardsService
 *
 * @description
 * Service for retrieving cards from the backend.
 */
class CardsService {
    constructor(cardsDataHttpService, cardsBackendService, cardsTravelNotice) {
        this.cardsDataHttpService = cardsDataHttpService;
        this.cardsBackendService = cardsBackendService;
        this.cardsTravelNotice = cardsTravelNotice;
        this.getParams = new BehaviorSubject(initialGetParams);
        this.paymentCards = this.getParams.pipe(distinctUntilChanged(deepEqual), cacheRequest$1((getParams) => this.cardsDataHttpService.getCards(getParams, 'response').pipe(map((response) => this.cardsBackendService.itemListToModel(response.body)), catchError((error) => {
            throw this.cardsBackendService.parseError(error);
        }))));
        this.travelNotice = this.cardsTravelNotice.getTravelNotices('response').pipe(distinctUntilChanged(deepEqual), map((response) => (response.body === null ? [] : response.body)), catchError((error) => {
            throw this.cardsBackendService.parseError(error);
        }));
    }
    /**
     * @name CardsService#getCards
     * @returns The (single-instance) observable of payment cards retrieved from the backend.
     *
     * @description
     * Returns the (single-instance) observable of payment cards retrieved from the backend.
     */
    getCards() {
        return this.paymentCards;
    }
    setParameters(typesParams) {
        typesParams
            .pipe(map((types) => ({
            types,
        })))
            .subscribe(this.getParams);
    }
    /**
     * @name CardsService#updateLockStatus
     * @returns An observable of the payment card with updated lock status.
     *
     * @description
     * Calls the backend to change the lock status and returns an observable of updated payment card
     * returned in the response.  If that response is empty, the existing payment card with the
     * updated lock status is returned.
     */
    updateLockStatus(card, lockStatus) {
        const body = this.cardsBackendService.getLockStatusUpdate(lockStatus);
        return this.cardsDataHttpService.updateLockStatus({ id: card.id, lockStatusPost: body }, 'response').pipe(map((response) => response.body === null
            ? Object.assign(Object.assign({}, card), { lockStatus }) : this.cardsBackendService.itemToModel(response.body)), catchError((error) => {
            throw this.cardsBackendService.parseError(error);
        }));
    }
    /**
     * @name CardsService#initiateReplacement
     * @returns An observable of the payment card with updated replacement status.
     *
     * @description
     * Calls the backend to initiate replacement and returns an observable of the updated payment
     * card returned in the response.  If the response is empty, the existing payment card with
     * replacement status set to `UNDER_REPLACEMENT` is returned.
     */
    initiateReplacement(card, replacementReason) {
        const body = this.cardsBackendService.getReplacementUpdate(replacementReason);
        return this.cardsDataHttpService.requestReplacement({ id: card.id, requestReplacementPost: body }, 'response').pipe(map((response) => response.body === null
            ? Object.assign(Object.assign({}, card), { replacementStatus: PaymentCardReplacementStatus.UnderReplacement }) : this.cardsBackendService.itemToModel(response.body)), catchError((error) => {
            throw this.cardsBackendService.parseError(error);
        }));
    }
    /**
     * @name CardsService#initiateActivation
     * @returns An observable of the payment card with updated status.
     *
     * @description
     * Calls the backend to activate a payment card and returns an observable of the updated payment
     * card returned in the response.  If the response is empty, the existing payment card with
     * status set to `ACTIVE` is returned.
     */
    initiateActivation(card, token) {
        const body = { token };
        return this.cardsDataHttpService.activate({ id: card.id, activatePost: body }, 'response').pipe(map((response) => response.body === null
            ? Object.assign(Object.assign({}, card), { status: PaymentCardStatus.Active }) : this.cardsBackendService.itemToModel(response.body)), catchError((error) => {
            throw this.cardsBackendService.parseError(error);
        }));
    }
    /**
     * @name CardsService#updateLimit
     * @returns An observable of the payment card with updated limits.
     *
     * @description
     * Calls the backend to update a payment card and returns an observable of the updated payment
     * card returned in the response.  If the response is empty, the existing payment card with
     * limits updated is returned.
     */
    updateLimit(card, limit, updateAllLimits) {
        const limitPayload = updateAllLimits
            ? limit
            : limit.filter((newLimitItem, index) => { var _a; return newLimitItem.amount !== ((_a = card.limits) === null || _a === void 0 ? void 0 : _a[index].amount); });
        return this.cardsDataHttpService.changeLimits({ id: card.id, changeLimitsPostItem: limitPayload }, 'response').pipe(map((response) => {
            const limits = card.limits &&
                card.limits.map((item, index) => (Object.assign(Object.assign({}, item), { amount: limit[index].amount })));
            return response.body === null
                ? Object.assign(Object.assign({}, card), { limits }) : this.cardsBackendService.itemToModel(response.body);
        }), catchError((error) => {
            throw this.cardsBackendService.parseError(error);
        }));
    }
    resetPIN(card, paymentCardResetPin) {
        return this.cardsDataHttpService.resetPin({ id: card.id, resetPinPost: paymentCardResetPin }, 'response').pipe(map((response) => response.body === null
            ? Object.assign({}, card) : this.cardsBackendService.itemToModel(response.body)), catchError((error) => {
            throw this.cardsBackendService.parseError(error);
        }));
    }
    requestPIN(card, paymentCardResetPin) {
        return this.cardsDataHttpService.requestPin({ id: card.id, requestPinPost: paymentCardResetPin }, 'response').pipe(map((response) => response.body === null
            ? Object.assign({}, card) : this.cardsBackendService.itemToModel(response.body)), catchError((error) => {
            throw this.cardsBackendService.parseError(error);
        }));
    }
    /**
     *  Modified - added a observable to only respond with active cards.
     *
     * @returns Observable with all travel notices and payment cards with
     * status active
     */
    getTravelNotice() {
        const activeCards = this.paymentCards.pipe(map((cards) => cards.filter((card) => card.status === PaymentCardStatus.Active)));
        return combineLatest([activeCards, this.travelNotice]).pipe(map(([paymentCards, travelNotice]) => ({
            travelNoticeList: travelNotice.map((item) => this.cardsBackendService.travelNoticeToModel(item, paymentCards)),
            paymentCards,
        })));
    }
    postTravelNotice(travelNoticeItem) {
        const { cards } = travelNoticeItem, otherTravelNoticeProperties = __rest(travelNoticeItem, ["cards"]);
        const travelNoticeData = Object.assign(Object.assign({}, otherTravelNoticeProperties), { cardIds: cards.map((item) => item.id) });
        return this.cardsTravelNotice.createTravelNotice({ travelNotice: travelNoticeData });
    }
    deleteTravelNotice(travelNoticeItem) {
        const { id } = travelNoticeItem;
        if (!id)
            throw new Error('Error no matching id');
        return this.cardsTravelNotice.deleteTravelNoticeById({ id }, 'response');
    }
    ngOnDestroy() {
        this.getParams.complete();
    }
}
CardsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsService, deps: [{ token: i1$4.CardsHttpService }, { token: CardsBackendService }, { token: i1$4.TravelNoticesHttpService }], target: i0.ɵɵFactoryTarget.Injectable });
CardsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1$4.CardsHttpService }, { type: CardsBackendService }, { type: i1$4.TravelNoticesHttpService }]; } });

const modules = [
    BadgeModule,
    ButtonModule,
    IconModule,
    InputPasswordModule,
    InputRadioGroupModule,
    LoadButtonModule,
    ModalModule,
    InputInlineEditModule,
    InputValidationMessageModule,
    AlertModule,
    PaymentCardModule,
    AmountModule,
    FocusModule,
    EmptyStateModule,
    LoadingIndicatorModule,
];
const components = [
    PaymentCardMultipleErrorStateComponent,
    PaymentCardStateWrapperComponent,
    PaymentCardInitiateReplacementComponent,
    PaymentCardInitiateActivationComponent,
    PaymentCardDeliveryStatusComponent,
    DeliveryTrackerComponent,
    PaymentCardLimitsComponent,
    PaymentCardLimitComponent,
    PaymentCardResetPinComponent,
    AccessibilityKeyboardDirective,
];
const directives = [
    CardsInitiateActivationCustomizableDirective,
    CardsInitiateActivationFormCustomizableDirective,
    CardsInitiateReplacementCustomizableDirective,
    CardsInitiateReplacementFormCustomizableDirective,
    CardsDeliveryStatusCustomizableDirective,
    CardsUpdateLimitsCustomizableDirective,
    CardsResetPinCustomizableDirective,
    CardsResetPinFormCustomizableDirective,
    CardsResetPinConfirmationCustomizableDirective,
    CardsResetPinNewPinCustomizableDirective,
    CardsUpdateLimitCustomizableDirective,
    CardsMultipleErrorStateCustomizableDirective,
];
const services = [CardsBackendService, CardsService];
class CardsCommonModule {
}
CardsCommonModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsCommonModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
CardsCommonModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsCommonModule, declarations: [PaymentCardMultipleErrorStateComponent,
        PaymentCardStateWrapperComponent,
        PaymentCardInitiateReplacementComponent,
        PaymentCardInitiateActivationComponent,
        PaymentCardDeliveryStatusComponent,
        DeliveryTrackerComponent,
        PaymentCardLimitsComponent,
        PaymentCardLimitComponent,
        PaymentCardResetPinComponent,
        AccessibilityKeyboardDirective, CardsInitiateActivationCustomizableDirective,
        CardsInitiateActivationFormCustomizableDirective,
        CardsInitiateReplacementCustomizableDirective,
        CardsInitiateReplacementFormCustomizableDirective,
        CardsDeliveryStatusCustomizableDirective,
        CardsUpdateLimitsCustomizableDirective,
        CardsResetPinCustomizableDirective,
        CardsResetPinFormCustomizableDirective,
        CardsResetPinConfirmationCustomizableDirective,
        CardsResetPinNewPinCustomizableDirective,
        CardsUpdateLimitCustomizableDirective,
        CardsMultipleErrorStateCustomizableDirective], imports: [CommonModule, ReactiveFormsModule, FormsModule, BadgeModule,
        ButtonModule,
        IconModule,
        InputPasswordModule,
        InputRadioGroupModule,
        LoadButtonModule,
        ModalModule,
        InputInlineEditModule,
        InputValidationMessageModule,
        AlertModule,
        PaymentCardModule,
        AmountModule,
        FocusModule,
        EmptyStateModule,
        LoadingIndicatorModule], exports: [BadgeModule,
        ButtonModule,
        IconModule,
        InputPasswordModule,
        InputRadioGroupModule,
        LoadButtonModule,
        ModalModule,
        InputInlineEditModule,
        InputValidationMessageModule,
        AlertModule,
        PaymentCardModule,
        AmountModule,
        FocusModule,
        EmptyStateModule,
        LoadingIndicatorModule, PaymentCardMultipleErrorStateComponent,
        PaymentCardStateWrapperComponent,
        PaymentCardInitiateReplacementComponent,
        PaymentCardInitiateActivationComponent,
        PaymentCardDeliveryStatusComponent,
        DeliveryTrackerComponent,
        PaymentCardLimitsComponent,
        PaymentCardLimitComponent,
        PaymentCardResetPinComponent,
        AccessibilityKeyboardDirective, CardsInitiateActivationCustomizableDirective,
        CardsInitiateActivationFormCustomizableDirective,
        CardsInitiateReplacementCustomizableDirective,
        CardsInitiateReplacementFormCustomizableDirective,
        CardsDeliveryStatusCustomizableDirective,
        CardsUpdateLimitsCustomizableDirective,
        CardsResetPinCustomizableDirective,
        CardsResetPinFormCustomizableDirective,
        CardsResetPinConfirmationCustomizableDirective,
        CardsResetPinNewPinCustomizableDirective,
        CardsUpdateLimitCustomizableDirective,
        CardsMultipleErrorStateCustomizableDirective] });
CardsCommonModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsCommonModule, providers: [...services], imports: [[CommonModule, ReactiveFormsModule, FormsModule, ...modules], BadgeModule,
        ButtonModule,
        IconModule,
        InputPasswordModule,
        InputRadioGroupModule,
        LoadButtonModule,
        ModalModule,
        InputInlineEditModule,
        InputValidationMessageModule,
        AlertModule,
        PaymentCardModule,
        AmountModule,
        FocusModule,
        EmptyStateModule,
        LoadingIndicatorModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardsCommonModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, ReactiveFormsModule, FormsModule, ...modules],
                    providers: [...services],
                    declarations: [...components, ...directives],
                    exports: [...modules, ...components, ...directives],
                }]
        }] });

const baseNotification = {
    header: '',
    message: '',
    dismissible: true,
    modifier: 'success',
};
// eslint-disable-next-line
class PaymentCardContainerBase {
    constructor(cardsService, cd, notificationService) {
        this.cardsService = cardsService;
        this.cd = cd;
        this.notificationService = notificationService;
        /**
         * Notification messages translations
         */
        this.localizations = {
            activationErrorHeader: '',
            activationErrorMessage: '',
            activationSuccessHeader: '',
            lockErrorHeader: '',
            lockErrorMessage: '',
            lockSuccessHeader: '',
            lockSuccessMessage: '',
            replacementErrorHeader: '',
            replacementErrorMessage: '',
            replacementSuccessHeader: '',
            replacementSuccessMessage: '',
            requestNewPinSuccessMessage: '',
            requestPinErrorMessage: '',
            resetPinSuccessMessage: '',
            resetPinErrorMessage: '',
            resetInvalidPinMessage: '',
            unlockErrorHeader: '',
            unlockErrorMessage: '',
            unlockSuccessHeader: '',
            unlockSuccessMessage: '',
            updateLimitErrorHeader: '',
            updateLimitErrorMessage: '',
            updateLimitSuccessHeader: '',
            updateLimitSuccessMessage: '',
        };
        /**
         * Event emitter for selecting a card.
         */
        this.selectCard = new EventEmitter();
        this.isLockLoading = false;
        this.isInitiateReplacementLoading = false;
        this.isInitiateActivationLoading = false;
        this.isResetPinLoading = false;
        this.isLimitsLoading = false;
    }
    showNotification(notification) {
        this.notificationService.showNotification(Object.assign(Object.assign(Object.assign({}, baseNotification), { ttl: this.notificationTtl }), notification));
    }
    ngOnInit() {
        if (typeof this.paymentCard === 'undefined') {
            throw new Error(`"paymentCard" input is required in "${this.constructor.name}"`);
        }
    }
    onUpdateLockStatus(lockStatus) {
        if (typeof this.paymentCard === 'undefined') {
            return;
        }
        this.isLockLoading = true;
        const onUpdateLockStatusSuccess = (paymentCard) => {
            if (typeof this.paymentCard !== 'undefined') {
                this.paymentCard = paymentCard;
                const header = lockStatus === PaymentCardLockStatus.Locked
                    ? this.localizations.lockSuccessHeader
                    : this.localizations.unlockSuccessHeader;
                const message = lockStatus === PaymentCardLockStatus.Locked
                    ? this.localizations.lockSuccessMessage
                    : this.localizations.unlockSuccessMessage;
                this.showNotification({
                    header,
                    message,
                });
            }
        };
        const onUpdateLockStatusError = () => {
            if (typeof this.paymentCard !== 'undefined') {
                const header = lockStatus === PaymentCardLockStatus.Locked
                    ? this.localizations.lockErrorHeader
                    : this.localizations.unlockErrorHeader;
                const message = lockStatus === PaymentCardLockStatus.Locked
                    ? this.localizations.lockErrorMessage
                    : this.localizations.unlockErrorMessage;
                this.showNotification({
                    header,
                    message,
                    modifier: 'error',
                });
            }
            this.isLockLoading = false;
            this.cd.markForCheck();
        };
        const onUpdateLockStatusComplete = () => {
            this.isLockLoading = false;
            this.cd.markForCheck();
        };
        this.cardsService
            .updateLockStatus(this.paymentCard, lockStatus)
            .subscribe(onUpdateLockStatusSuccess, onUpdateLockStatusError, onUpdateLockStatusComplete);
    }
    onInitiateReplacement(reason) {
        if (typeof this.paymentCard === 'undefined') {
            return;
        }
        this.isInitiateReplacementLoading = true;
        const onInitiateReplacementSuccess = (paymentCard) => {
            if (typeof this.paymentCard !== 'undefined') {
                this.paymentCard = paymentCard;
                this.showNotification({
                    header: this.localizations.replacementSuccessHeader,
                    message: this.localizations.replacementSuccessMessage,
                });
            }
        };
        const onInitiateReplacementError = () => {
            if (typeof this.paymentCard !== 'undefined') {
                this.showNotification({
                    header: this.localizations.replacementErrorHeader,
                    message: this.localizations.replacementErrorMessage,
                    modifier: 'error',
                });
            }
            this.isInitiateReplacementLoading = false;
            this.cd.markForCheck();
        };
        const onInitiateReplacementComplete = () => {
            this.isInitiateReplacementLoading = false;
            this.cd.markForCheck();
        };
        this.cardsService
            .initiateReplacement(this.paymentCard, reason)
            .subscribe(onInitiateReplacementSuccess, onInitiateReplacementError, onInitiateReplacementComplete);
    }
    onInitiateActivation(token) {
        if (typeof this.paymentCard === 'undefined') {
            return;
        }
        this.isInitiateActivationLoading = true;
        const onInitiateActivationSuccess = (paymentCard) => {
            if (typeof this.paymentCard !== 'undefined') {
                this.paymentCard = paymentCard;
                this.showNotification({
                    header: this.localizations.activationSuccessHeader,
                });
            }
        };
        const onInitiateActivationError = () => {
            if (typeof this.paymentCard !== 'undefined') {
                this.showNotification({
                    header: this.localizations.activationErrorHeader,
                    message: this.localizations.activationErrorMessage,
                    modifier: 'error',
                });
            }
            this.isInitiateActivationLoading = false;
            this.cd.markForCheck();
        };
        const onInitiateActivationComplete = () => {
            this.isInitiateActivationLoading = false;
            this.cd.markForCheck();
        };
        this.cardsService
            .initiateActivation(this.paymentCard, token)
            .subscribe(onInitiateActivationSuccess, onInitiateActivationError, onInitiateActivationComplete);
    }
    onUpdateLimit(limit) {
        if (typeof this.paymentCard === 'undefined') {
            return;
        }
        this.isLimitsLoading = true;
        const onUpdateLimitSuccess = (paymentCard) => {
            if (typeof this.paymentCard !== 'undefined') {
                this.paymentCard = paymentCard;
                this.showNotification({
                    header: this.localizations.updateLimitSuccessHeader,
                    message: this.localizations.updateLimitSuccessMessage,
                });
            }
        };
        const onUpdateLimitError = () => {
            if (typeof this.paymentCard !== 'undefined') {
                this.notificationService.showNotification(Object.assign(Object.assign({}, baseNotification), { header: this.localizations.updateLimitErrorHeader, message: this.localizations.updateLimitErrorMessage, modifier: 'error' }));
            }
            this.isLimitsLoading = false;
            this.cd.markForCheck();
        };
        const onUpdateLimitComplete = () => {
            this.isLimitsLoading = false;
            this.cd.markForCheck();
        };
        this.cardsService
            .updateLimit(this.paymentCard, limit, this.updateAllLimits)
            .subscribe(onUpdateLimitSuccess, onUpdateLimitError, onUpdateLimitComplete);
    }
    onResetPin(token) {
        if (typeof this.paymentCard === 'undefined') {
            return;
        }
        this.isResetPinLoading = true;
        if (token.raw.pin2 !== undefined && token.raw.pin !== token.raw.pin2) {
            this.isResetPinLoading = false;
            this.showNotification({
                message: this.localizations.resetInvalidPinMessage,
                modifier: 'error',
            });
            return;
        }
        const onResetPinSuccess = (paymentCard) => {
            if (typeof this.paymentCard !== 'undefined') {
                this.paymentCard = paymentCard;
                this.showNotification({
                    message: this.localizations.resetPinSuccessMessage,
                });
            }
        };
        const onResetPinError = () => {
            if (typeof this.paymentCard !== 'undefined') {
                this.showNotification({
                    message: this.localizations.resetPinErrorMessage,
                    modifier: 'error',
                });
            }
            this.isResetPinLoading = false;
            this.cd.markForCheck();
        };
        const onResetPinComplete = () => {
            this.isResetPinLoading = false;
            this.cd.markForCheck();
        };
        this.cardsService
            .resetPIN(this.paymentCard, token.model)
            .subscribe(onResetPinSuccess, onResetPinError, onResetPinComplete);
    }
    onRequestPin(token) {
        if (typeof this.paymentCard === 'undefined') {
            return;
        }
        this.isResetPinLoading = true;
        const onRequestPinSuccess = (paymentCard) => {
            if (typeof this.paymentCard !== 'undefined') {
                this.paymentCard = paymentCard;
                this.showNotification({
                    message: this.localizations.requestNewPinSuccessMessage,
                });
            }
        };
        const onRequestPinError = () => {
            if (typeof this.paymentCard !== 'undefined') {
                this.showNotification({
                    message: this.localizations.requestPinErrorMessage,
                    modifier: 'error',
                });
            }
            this.isResetPinLoading = false;
            this.cd.markForCheck();
        };
        const onRequestPinComplete = () => {
            this.isResetPinLoading = false;
            this.cd.markForCheck();
        };
        this.cardsService
            .requestPIN(this.paymentCard, token.model)
            .subscribe(onRequestPinSuccess, onRequestPinError, onRequestPinComplete);
    }
    onOpenDetails() {
        if (typeof this.paymentCard !== 'undefined') {
            this.selectCard.emit(this.paymentCard);
        }
    }
}
PaymentCardContainerBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentCardContainerBase, deps: [{ token: CardsService }, { token: i0.ChangeDetectorRef }, { token: i2$5.NotificationService }], target: i0.ɵɵFactoryTarget.Directive });
PaymentCardContainerBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: PaymentCardContainerBase, inputs: { paymentCard: "paymentCard", notificationTtl: "notificationTtl", updateAllLimits: "updateAllLimits" }, outputs: { selectCard: "selectCard" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentCardContainerBase, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: CardsService }, { type: i0.ChangeDetectorRef }, { type: i2$5.NotificationService }]; }, propDecorators: { paymentCard: [{
                type: Input
            }], notificationTtl: [{
                type: Input
            }], updateAllLimits: [{
                type: Input
            }], selectCard: [{
                type: Output
            }] } });

// eslint-disable-next-line
class PaymentCardControlsBase {
    constructor() {
        /**
         * Whether lock status is being updated.
         */
        this.isLockLoading = false;
        /**
         * Whether card replacement has been initiated.
         */
        this.isInitiateReplacementLoading = false;
        /**
         * Whether card replacement has been initiated.
         */
        this.isInitiateActivationLoading = false;
        /**
         * Whether card change pin has been initiated.
         */
        this.isResetPinLoading = false;
        /**
         * Event to update the lock status of the payment card.
         */
        this.updateLockStatus = new EventEmitter();
        /**
         * Event to initiate replacement of the payment card.
         */
        this.initiateReplacement = new EventEmitter();
        /**
         * Event to initiate activation of the payment card.
         */
        this.initiateActivation = new EventEmitter();
        /**
         * Event to initiate reset pin of the payment card.
         */
        this.resetPin = new EventEmitter();
        /**
         * Event to initiate requestPin pin of the payment card.
         */
        this.requestPin = new EventEmitter();
        this.hostRef = this;
    }
    ngOnInit() {
        if (typeof this.paymentCard === 'undefined') {
            throw new Error(`"paymentCard" input is required in "${this.constructor.name}"`);
        }
    }
    onLock() {
        this.updateLockStatus.emit(PaymentCardLockStatus.Locked);
    }
    onUnlock() {
        this.updateLockStatus.emit(PaymentCardLockStatus.Unlocked);
    }
    get isLocked() {
        return this.paymentCard && this.paymentCard.lockStatus === PaymentCardLockStatus.Locked;
    }
    get resetPinMode() {
        if (this.paymentCard) {
            if (this.paymentCard.type === 'Credit') {
                return ResetPinModeEnum.Request;
            }
            return ResetPinModeEnum.Reset;
        }
        return '';
    }
    onInitiateReplacement(replacementReason) {
        this.initiateReplacement.emit(replacementReason);
    }
    onInitiateActivation(token) {
        this.initiateActivation.emit(token);
    }
    onResetPin(token) {
        this.resetPin.emit(token);
    }
    onRequestPin(token) {
        this.requestPin.emit(token);
    }
}
PaymentCardControlsBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentCardControlsBase, deps: [], target: i0.ɵɵFactoryTarget.Directive });
PaymentCardControlsBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: PaymentCardControlsBase, inputs: { paymentCard: "paymentCard", isLockLoading: "isLockLoading", isInitiateReplacementLoading: "isInitiateReplacementLoading", isInitiateActivationLoading: "isInitiateActivationLoading", isResetPinLoading: "isResetPinLoading" }, outputs: { updateLockStatus: "updateLockStatus", initiateReplacement: "initiateReplacement", initiateActivation: "initiateActivation", resetPin: "resetPin", requestPin: "requestPin" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentCardControlsBase, decorators: [{
            type: Directive
        }], propDecorators: { paymentCard: [{
                type: Input
            }], isLockLoading: [{
                type: Input
            }], isInitiateReplacementLoading: [{
                type: Input
            }], isInitiateActivationLoading: [{
                type: Input
            }], isResetPinLoading: [{
                type: Input
            }], updateLockStatus: [{
                type: Output
            }], initiateReplacement: [{
                type: Output
            }], initiateActivation: [{
                type: Output
            }], resetPin: [{
                type: Output
            }], requestPin: [{
                type: Output
            }] } });

function getCountryName(destinationList, { country, region }) {
    if (!destinationList) {
        return country;
    }
    const destinationCountry = destinationList.find((item) => item.code === country);
    if (destinationCountry && region) {
        const destinationRegion = destinationCountry.regions && destinationCountry.regions.find((item) => item.code === region);
        return destinationRegion ? `${destinationRegion.name} (${destinationCountry.code})` : destinationCountry.name;
    }
    return destinationCountry ? destinationCountry.name : country;
}

class BaseWidgetPropertiesService {
    constructor(itemModel) {
        this.itemModel = itemModel;
    }
    get notificationTtl() {
        return this.itemModel
            ? this.itemModel.property(WidgetProperties.NotificationTtl).pipe(map((propertyValue) => parseInt(propertyValue, 10)), map((ttl) => (ttl !== undefined && !isNaN(ttl) && ttl > 0 ? ttl : notificationTtl)))
            : of(notificationTtl);
    }
    get updateAllLimits() {
        return this.itemModel
            ? this.itemModel
                .property(WidgetProperties.updateAllLimits)
                .pipe(map((propertyValue) => (typeof propertyValue === 'boolean' ? propertyValue : propertyValue === 'true')))
            : of(false);
    }
}
BaseWidgetPropertiesService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BaseWidgetPropertiesService, deps: [{ token: i1$5.ItemModel, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
BaseWidgetPropertiesService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BaseWidgetPropertiesService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: BaseWidgetPropertiesService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1$5.ItemModel, decorators: [{
                    type: Optional
                }] }]; } });

const cacheRequest = (request) => (source) => source.pipe(switchMap(request), publishReplay(1), refCount());
/**
 * @name CardService
 *
 * @description
 * Service for retrieving and updating a single card from the backend.
 */
class CardService {
    constructor(cardsDataHttpService, cardsBackendService) {
        this.cardsDataHttpService = cardsDataHttpService;
        this.cardsBackendService = cardsBackendService;
        this.paymentCardId = new ReplaySubject(1);
        this.paymentCard = this.paymentCardId.pipe(distinctUntilChanged(), filter((paymentCardId) => typeof paymentCardId !== 'undefined'), cacheRequest((paymentCardId) => this.cardsDataHttpService.getCardById({ id: paymentCardId }, 'response').pipe(map((response) => {
            if (response.body === null) {
                throw new Error('Some error message');
            }
            return this.cardsBackendService.itemToModel(response.body);
        }), catchError((error) => {
            throw this.cardsBackendService.parseError(error);
        }))));
    }
    getPaymentCardFrom(paymentCardId) {
        paymentCardId.subscribe(this.paymentCardId);
    }
    getPaymentCard() {
        return this.paymentCard;
    }
}
CardService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardService, deps: [{ token: i1$4.CardsHttpService }, { token: CardsBackendService }], target: i0.ɵɵFactoryTarget.Injectable });
CardService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1$4.CardsHttpService }, { type: CardsBackendService }]; } });

var destination = [
    { code: 'ABW', name: 'Aruba' },
    { code: 'AFG', name: 'Afghanistan' },
    { code: 'AGO', name: 'Angola' },
    { code: 'ALB', name: 'Albania' },
    { code: 'AND', name: 'Andorra' },
    { code: 'ARE', name: 'United Arab Emirates' },
    { code: 'ARG', name: 'Argentina' },
    { code: 'ARM', name: 'Armenia' },
    { code: 'ASM', name: 'American Samoa' },
    { code: 'ATG', name: 'Antigua and Barbuda' },
    { code: 'AUS', name: 'Australia' },
    { code: 'AUT', name: 'Austria' },
    { code: 'AZE', name: 'Azerbaijan' },
    { code: 'BDI', name: 'Burundi' },
    { code: 'BEL', name: 'Belgium' },
    { code: 'BEN', name: 'Benin' },
    { code: 'BFA', name: 'Burkina Faso' },
    { code: 'BGD', name: 'Bangladesh' },
    { code: 'BGR', name: 'Bulgaria' },
    { code: 'BHR', name: 'Bahrain' },
    { code: 'BHS', name: 'The Bahamas' },
    { code: 'BIH', name: 'Bosnia and Herzegovina' },
    { code: 'BLR', name: 'Belarus' },
    { code: 'BLZ', name: 'Belize' },
    { code: 'BMU', name: 'Bermuda' },
    { code: 'BOL', name: 'Bolivia' },
    { code: 'BRA', name: 'Brazil' },
    { code: 'BRB', name: 'Barbados' },
    { code: 'BRN', name: 'Brunei Darussalam' },
    { code: 'BTN', name: 'Bhutan' },
    { code: 'BWA', name: 'Botswana' },
    { code: 'CAF', name: 'Central African Republic' },
    {
        code: 'CAN',
        name: 'Canada',
        regions: [
            { code: 'CA-AB', name: 'Alberta' },
            { code: 'CA-BC', name: 'British Columbia' },
            { code: 'CA-MB', name: 'Manitoba' },
            { code: 'CA-NB', name: 'New Brunswick' },
            { code: 'CA-NL', name: 'Newfoundland and Labrador' },
            { code: 'CA-NS', name: 'Nova Scotia' },
            { code: 'CA-ON', name: 'Ontario' },
            { code: 'CA-PE', name: 'Prince Edward Island' },
            { code: 'CA-QC', name: 'Quebec' },
            { code: 'CA-SK', name: 'Saskatchewan' },
            { code: 'CA-NT', name: 'Northwest Territories' },
            { code: 'CA-NU', name: 'Nunavut' },
            { code: 'CA-YT', name: 'Yukon' },
        ],
    },
    { code: 'CHE', name: 'Switzerland' },
    { code: 'CHL', name: 'Chile' },
    { code: 'CHN', name: 'China' },
    { code: 'CIV', name: "Cote d'Ivoire" },
    { code: 'CMR', name: 'Cameroon' },
    { code: 'COD', name: 'Democratic Republic of Congo' },
    { code: 'COG', name: 'Republic of Congo' },
    { code: 'COL', name: 'Colombia' },
    { code: 'COM', name: 'Comoros' },
    { code: 'CPV', name: 'Cabo Verde' },
    { code: 'CRI', name: 'Costa Rica' },
    { code: 'CUB', name: 'Cuba' },
    { code: 'CUW', name: 'Curacao' },
    { code: 'CYM', name: 'Cayman Islands' },
    { code: 'CYP', name: 'Cyprus' },
    { code: 'CZE', name: 'Czech Republic' },
    { code: 'DEU', name: 'Germany' },
    { code: 'DJI', name: 'Djibouti' },
    { code: 'DMA', name: 'Dominica' },
    { code: 'DNK', name: 'Denmark' },
    { code: 'DOM', name: 'Dominican Republic' },
    { code: 'DZA', name: 'Algeria' },
    { code: 'ECU', name: 'Ecuador' },
    { code: 'EGY', name: 'Egypt' },
    { code: 'ERI', name: 'Eritrea' },
    { code: 'ESP', name: 'Spain' },
    { code: 'EST', name: 'Estonia' },
    { code: 'ETH', name: 'Ethiopia' },
    { code: 'FIN', name: 'Finland' },
    { code: 'FJI', name: 'Fiji' },
    { code: 'FRA', name: 'France' },
    { code: 'FRO', name: 'Faroe Islands' },
    { code: 'GAB', name: 'Gabon' },
    { code: 'GBR', name: 'United Kingdom' },
    { code: 'GEO', name: 'Georgia' },
    { code: 'GHA', name: 'Ghana' },
    { code: 'GIB', name: 'Gibraltar' },
    { code: 'GIN', name: 'Guinea' },
    { code: 'GMB', name: 'The Gambia' },
    { code: 'GNB', name: 'Guinea-Bissau' },
    { code: 'GNQ', name: 'Equatorial Guinea' },
    { code: 'GRC', name: 'Greece' },
    { code: 'GRD', name: 'Grenada' },
    { code: 'GRL', name: 'Greenland' },
    { code: 'GTM', name: 'Guatemala' },
    { code: 'GUM', name: 'Guam' },
    { code: 'GUY', name: 'Guyana' },
    { code: 'HKG', name: 'Hong Kong' },
    { code: 'HND', name: 'Honduras' },
    { code: 'HRV', name: 'Croatia' },
    { code: 'HTI', name: 'Haiti' },
    { code: 'HUN', name: 'Hungary' },
    { code: 'IDN', name: 'Indonesia' },
    { code: 'IMN', name: 'Isle of Man' },
    { code: 'IND', name: 'India' },
    { code: 'IRL', name: 'Ireland' },
    { code: 'IRN', name: 'Islamic Republic of Iran' },
    { code: 'IRQ', name: 'Iraq' },
    { code: 'ISL', name: 'Iceland' },
    { code: 'ISR', name: 'Israel' },
    { code: 'ITA', name: 'Italy' },
    { code: 'JAM', name: 'Jamaica' },
    { code: 'JOR', name: 'Jordan' },
    { code: 'JPN', name: 'Japan' },
    { code: 'KAZ', name: 'Kazakhstan' },
    { code: 'KEN', name: 'Kenya' },
    { code: 'KGZ', name: 'Kyrgyz Republic' },
    { code: 'KHM', name: 'Cambodia' },
    { code: 'KIR', name: 'Kiribati' },
    { code: 'KNA', name: 'St. Kitts and Nevis' },
    { code: 'KOR', name: 'Republic of Korea' },
    { code: 'KWT', name: 'Kuwait' },
    { code: 'LBN', name: 'Lebanon' },
    { code: 'LBR', name: 'Liberia' },
    { code: 'LKA', name: 'Sri Lanka' },
    { code: 'LBY', name: 'Libya' },
    { code: 'LCA', name: 'St. Lucia' },
    { code: 'LIE', name: 'Liechtenstein' },
    { code: 'LSO', name: 'Lesotho' },
    { code: 'LTU', name: 'Lithuania' },
    { code: 'LUX', name: 'Luxembourg' },
    { code: 'LVA', name: 'Latvia' },
    { code: 'MAF', name: 'St. Martin (French part)' },
    { code: 'MAR', name: 'Morocco' },
    { code: 'MCO', name: 'Monaco' },
    { code: 'MDA', name: 'Moldova' },
    { code: 'MRT', name: 'Mauritania' },
    { code: 'MUS', name: 'Mauritius' },
    { code: 'MWI', name: 'Malawi' },
    { code: 'MYS', name: 'Malaysia' },
    { code: 'NAM', name: 'Namibia' },
    { code: 'NCL', name: 'New Caledonia' },
    { code: 'NER', name: 'Niger' },
    { code: 'NGA', name: 'Nigeria' },
    { code: 'NIC', name: 'Nicaragua' },
    { code: 'NLD', name: 'Netherlands' },
    { code: 'NOR', name: 'Norway' },
    { code: 'NPL', name: 'Nepal' },
    { code: 'NRU', name: 'Nauru' },
    { code: 'NZL', name: 'New Zealand' },
    { code: 'OMN', name: 'Oman' },
    { code: 'PAK', name: 'Pakistan' },
    { code: 'PAN', name: 'Panama' },
    { code: 'PER', name: 'Peru' },
    { code: 'PHL', name: 'Philippines' },
    { code: 'PLW', name: 'Palau' },
    { code: 'PNG', name: 'Papua New Guinea' },
    { code: 'POL', name: 'Poland' },
    { code: 'PRI', name: 'Puerto Rico' },
    { code: 'PRK', name: "Democratic People's Republic of Korea" },
    { code: 'PRT', name: 'Portugal' },
    { code: 'PRY', name: 'Paraguay' },
    { code: 'PSE', name: 'West Bank and Gaza' },
    { code: 'QAT', name: 'Qatar' },
    { code: 'ROU', name: 'Romania' },
    { code: 'RUS', name: 'Russian Federation' },
    { code: 'RWA', name: 'Rwanda' },
    { code: 'SAU', name: 'Saudi Arabia' },
    { code: 'SDN', name: 'Sudan' },
    { code: 'SEN', name: 'Senegal' },
    { code: 'SGP', name: 'Singapore' },
    { code: 'SLB', name: 'Solomon Islands' },
    { code: 'SLE', name: 'Sierra Leone' },
    { code: 'SLV', name: 'El Salvador' },
    { code: 'SMR', name: 'San Marino' },
    { code: 'SOM', name: 'Somalia' },
    { code: 'SRB', name: 'Serbia' },
    { code: 'SSD', name: 'South Sudan' },
    { code: 'STP', name: 'Sao Tome and Principe' },
    { code: 'SUR', name: 'Suriname' },
    { code: 'SVK', name: 'Slovak Republic' },
    { code: 'SVN', name: 'Slovenia' },
    { code: 'SWE', name: 'Sweden' },
    { code: 'SWZ', name: 'Eswatini' },
    { code: 'SXM', name: 'Sint Maarten (Dutch part)' },
    { code: 'SYC', name: 'Seychelles' },
    { code: 'SYR', name: 'Syrian Arab Republic' },
    { code: 'TCA', name: 'Turks and Caicos Islands' },
    { code: 'TCD', name: 'Chad' },
    { code: 'TGO', name: 'Togo' },
    { code: 'THA', name: 'Thailand' },
    { code: 'TJK', name: 'Tajikistan' },
    { code: 'TKM', name: 'Turkmenistan' },
    { code: 'TLS', name: 'Timor-Leste' },
    { code: 'TON', name: 'Tonga' },
    { code: 'TTO', name: 'Trinidad and Tobago' },
    { code: 'TUN', name: 'Tunisia' },
    { code: 'TUR', name: 'Turkey' },
    { code: 'TUV', name: 'Tuvalu' },
    { code: 'TWN', name: 'Taiwan' },
    { code: 'TZA', name: 'Tanzania' },
    { code: 'UGA', name: 'Uganda' },
    { code: 'UKR', name: 'Ukraine' },
    { code: 'URY', name: 'Uruguay' },
    {
        code: 'USA',
        name: 'United States',
        regions: [
            { code: 'US-AL', name: 'Alabama' },
            { code: 'US-AK', name: 'Alaska' },
            { code: 'US-AZ', name: 'Arizona' },
            { code: 'US-AR', name: 'Arkansas' },
            { code: 'US-CA', name: 'California' },
            { code: 'US-CO', name: 'Colorado' },
            { code: 'US-CT', name: 'Connecticut' },
            { code: 'US-DE', name: 'Delaware' },
            { code: 'US-FL', name: 'Florida' },
            { code: 'US-GA', name: 'Georgia' },
            { code: 'US-HI', name: 'Hawaii' },
            { code: 'US-ID', name: 'Idaho' },
            { code: 'US-IL', name: 'Illinois' },
            { code: 'US-IN', name: 'Indiana' },
            { code: 'US-IA', name: 'Iowa' },
            { code: 'US-KS', name: 'Kansas' },
            { code: 'US-KY', name: 'Kentucky' },
            { code: 'US-LA', name: 'Louisiana' },
            { code: 'US-ME', name: 'Maine' },
            { code: 'US-MD', name: 'Maryland' },
            { code: 'US-MA', name: 'Massachusetts' },
            { code: 'US-MI', name: 'Michigan' },
            { code: 'US-MN', name: 'Minnesota' },
            { code: 'US-MS', name: 'Mississippi' },
            { code: 'US-MO', name: 'Missouri' },
            { code: 'US-MT', name: 'Montana' },
            { code: 'US-NE', name: 'Nebraska' },
            { code: 'US-NV', name: 'Nevada' },
            { code: 'US-NH', name: 'New Hampshire' },
            { code: 'US-NJ', name: 'New Jersey' },
            { code: 'US-NM', name: 'New Mexico' },
            { code: 'US-NY', name: 'New York' },
            { code: 'US-NC', name: 'North Carolina' },
            { code: 'US-ND', name: 'North Dakota' },
            { code: 'US-OH', name: 'Ohio' },
            { code: 'US-OK', name: 'Oklahoma' },
            { code: 'US-OR', name: 'Oregon' },
            { code: 'US-PA', name: 'Pennsylvania' },
            { code: 'US-RI', name: 'Rhode Island' },
            { code: 'US-SC', name: 'South Carolina' },
            { code: 'US-SD', name: 'South Dakota' },
            { code: 'US-TN', name: 'Tennessee' },
            { code: 'US-TX', name: 'Texas' },
            { code: 'US-UT', name: 'Utah' },
            { code: 'US-VT', name: 'Vermont' },
            { code: 'US-VA', name: 'Virginia' },
            { code: 'US-WA', name: 'Washington' },
            { code: 'US-WV', name: 'West Virginia' },
            { code: 'US-WI', name: 'Wisconsin' },
            { code: 'US-WY', name: 'Wyoming' },
            { code: 'US-DC', name: 'District of Columbia' },
            { code: 'US-AS', name: 'American Samoa' },
            { code: 'US-GU', name: 'Guam' },
            { code: 'US-MP', name: 'Northern Mariana Islands' },
            { code: 'US-PR', name: 'Puerto Rico' },
            { code: 'US-UM', name: 'United States Minor Outlying Islands' },
            { code: 'US-VI', name: 'Virgin Islands' },
        ],
    },
    { code: 'UZB', name: 'Uzbekistan' },
    { code: 'VCT', name: 'St. Vincent and the Grenadines' },
    { code: 'VEN', name: 'Venezuela' },
    { code: 'VGB', name: 'British Virgin Islands' },
    { code: 'VNM', name: 'Vietnam' },
    { code: 'VUT', name: 'Vanuatu' },
    { code: 'WSM', name: 'Samoa' },
    { code: 'XKX', name: 'Kosovo' },
    { code: 'YEM', name: 'Yemen, Rep.' },
    { code: 'ZMB', name: 'Zambia' },
    { code: 'ZWE', name: 'Zimbabwe' },
    { code: 'MEX', name: 'Mexico' },
];

/**
 * This service is a default implementation for countries that retrieve locations from a
 * static file. If no other service is injected then this is used instead
 */
class DefaultDestionsService {
    getDestinations() {
        return of(destination);
    }
}
DefaultDestionsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: DefaultDestionsService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
DefaultDestionsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: DefaultDestionsService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: DefaultDestionsService, decorators: [{
            type: Injectable
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { AccessibilityKeyboardDirective, BaseWidgetPropertiesService, CardService, CardsBackendError, CardsCommonModule, CardsDeliveryStatusCustomizableDirective, CardsInitiateActivationCustomizableDirective, CardsInitiateActivationFormCustomizableDirective, CardsInitiateReplacementCustomizableDirective, CardsInitiateReplacementFormCustomizableDirective, CardsMockBackendInterceptor, CardsMockBackendProvider, CardsMultipleErrorStateCustomizableDirective, CardsResetPinConfirmationCustomizableDirective, CardsResetPinCustomizableDirective, CardsResetPinFormCustomizableDirective, CardsResetPinNewPinCustomizableDirective, CardsService, CardsUpdateLimitCustomizableDirective, CardsUpdateLimitsCustomizableDirective, DEFAULT_PAYMENT_CARD_TYPE_GROUP, DefaultDestionsService, DeliveryTrackerComponent, DestinationsServiceConfigToken, LimitChannelMappingConfigToken, PaymentCardContainerBase, PaymentCardControlsBase, PaymentCardDeliveryStatusComponent, PaymentCardDeliveryStepStatus, PaymentCardInitiateActivationComponent, PaymentCardInitiateReplacementComponent, PaymentCardLimitComponent, PaymentCardLimitsComponent, PaymentCardLockStatus, PaymentCardMultipleErrorStateComponent, PaymentCardReplacementReason, PaymentCardReplacementStatus, PaymentCardResetPinComponent, PaymentCardStateWrapperComponent, PaymentCardStatus, ReplacementReasonMappingConfigToken, ReplacementStatusMappingConfigToken, ResetPinModeEnum, StatusMappingConfigToken, WidgetProperties, defaultDeliveryStepStatusMapping, defaultLimitChannelMapping, defaultLockStatusMapping, defaultReplacementReasonMapping, defaultReplacementStatusMapping, defaultStatusMapping, filterInputParameters, getCountryName, notificationTtl };
//# sourceMappingURL=backbase-cards-common-ang.js.map
