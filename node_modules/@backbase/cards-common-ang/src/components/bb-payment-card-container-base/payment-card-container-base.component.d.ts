import { ChangeDetectorRef, EventEmitter, OnInit, TemplateRef } from '@angular/core';
import { NotificationService } from '@backbase/ui-ang/notification';
import { PaymentCardLimit } from '../../model/payment-card-limit.model';
import { PaymentCardReplacementReason } from '../../model/payment-card-replacement-reason.model';
import { PaymentCardResetPinTransport } from '../../model/payment-card-reset-pin.model';
import { PaymentCard, PaymentCardLockStatus } from '../../model/payment-card.model';
import { CardsService } from '../../services/cards.service';
import * as i0 from "@angular/core";
export declare class PaymentCardContainerBase implements OnInit {
    protected readonly cardsService: CardsService;
    protected readonly cd: ChangeDetectorRef;
    protected readonly notificationService: NotificationService;
    /**
     * Notification messages translations
     */
    protected localizations: {
        [key: string]: TemplateRef<any> | string;
    };
    /**
     * Payment card to be displayed.
     */
    paymentCard: PaymentCard | undefined;
    notificationTtl: number | undefined;
    updateAllLimits: boolean | undefined;
    /**
     * Event emitter for selecting a card.
     */
    readonly selectCard: EventEmitter<PaymentCard>;
    isLockLoading: boolean;
    isInitiateReplacementLoading: boolean;
    isInitiateActivationLoading: boolean;
    isResetPinLoading: boolean;
    isLimitsLoading: boolean;
    constructor(cardsService: CardsService, cd: ChangeDetectorRef, notificationService: NotificationService);
    private showNotification;
    ngOnInit(): void;
    onUpdateLockStatus(lockStatus: PaymentCardLockStatus): void;
    onInitiateReplacement(reason: PaymentCardReplacementReason | string): void;
    onInitiateActivation(token: string): void;
    onUpdateLimit(limit: Array<PaymentCardLimit>): void;
    onResetPin(token: PaymentCardResetPinTransport): void;
    onRequestPin(token: PaymentCardResetPinTransport): void;
    onOpenDetails(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<PaymentCardContainerBase, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<PaymentCardContainerBase, never, never, { "paymentCard": "paymentCard"; "notificationTtl": "notificationTtl"; "updateAllLimits": "updateAllLimits"; }, { "selectCard": "selectCard"; }, never>;
}
