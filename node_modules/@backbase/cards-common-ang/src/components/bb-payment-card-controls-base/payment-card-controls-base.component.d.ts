import { EventEmitter, OnInit } from '@angular/core';
import { PaymentCardReplacementReason } from '../../model/payment-card-replacement-reason.model';
import { PaymentCardResetPinTransport, ResetPinModeEnum } from '../../model/payment-card-reset-pin.model';
import { PaymentCard, PaymentCardLockStatus } from '../../model/payment-card.model';
import * as i0 from "@angular/core";
export declare class PaymentCardControlsBase implements OnInit {
    /**
     * Payment card item this component controls.
     */
    paymentCard: PaymentCard | undefined;
    /**
     * Whether lock status is being updated.
     */
    isLockLoading: boolean;
    /**
     * Whether card replacement has been initiated.
     */
    isInitiateReplacementLoading: boolean;
    /**
     * Whether card replacement has been initiated.
     */
    isInitiateActivationLoading: boolean;
    /**
     * Whether card change pin has been initiated.
     */
    isResetPinLoading: boolean;
    /**
     * Event to update the lock status of the payment card.
     */
    readonly updateLockStatus: EventEmitter<PaymentCardLockStatus>;
    /**
     * Event to initiate replacement of the payment card.
     */
    readonly initiateReplacement: EventEmitter<string>;
    /**
     * Event to initiate activation of the payment card.
     */
    readonly initiateActivation: EventEmitter<string>;
    /**
     * Event to initiate reset pin of the payment card.
     */
    readonly resetPin: EventEmitter<PaymentCardResetPinTransport>;
    /**
     * Event to initiate requestPin pin of the payment card.
     */
    readonly requestPin: EventEmitter<PaymentCardResetPinTransport>;
    readonly hostRef: this;
    ngOnInit(): void;
    onLock(): void;
    onUnlock(): void;
    get isLocked(): boolean | undefined;
    get resetPinMode(): "" | ResetPinModeEnum;
    onInitiateReplacement(replacementReason: PaymentCardReplacementReason | string): void;
    onInitiateActivation(token: string): void;
    onResetPin(token: PaymentCardResetPinTransport): void;
    onRequestPin(token: PaymentCardResetPinTransport): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<PaymentCardControlsBase, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<PaymentCardControlsBase, never, never, { "paymentCard": "paymentCard"; "isLockLoading": "isLockLoading"; "isInitiateReplacementLoading": "isInitiateReplacementLoading"; "isInitiateActivationLoading": "isInitiateActivationLoading"; "isResetPinLoading": "isResetPinLoading"; }, { "updateLockStatus": "updateLockStatus"; "initiateReplacement": "initiateReplacement"; "initiateActivation": "initiateActivation"; "resetPin": "resetPin"; "requestPin": "requestPin"; }, never>;
}
