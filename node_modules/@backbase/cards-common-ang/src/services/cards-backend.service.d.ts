import { InjectionToken } from '@angular/core';
import { HttpErrorResponse } from '@angular/common/http';
import { CardItem, TravelNotice, Destination, Contact, LockStatusPost } from '@backbase/data-ang/cards';
import { CardsBackendError } from '../model/cards-backend-error.model';
import { PaymentCard, PaymentCardLockStatus } from '../model/payment-card.model';
import { PaymentCardReplacementStatusMapping } from '../model/payment-card-replacement-status-mapping.model';
import { PaymentCardStatusMapping } from '../model/payment-card-status-mapping.model';
import { PaymentCardLimitChannelMapping } from '../model/payment-card-limit-channel-mapping';
import { PaymentCardReplacementReason, PaymentCardReplacementReasonMapping } from '../model/payment-card-replacement-reason.model';
import { CardsBackendDestinations } from '../model/cards-backend-destination.model';
import * as i0 from "@angular/core";
declare type CardItemList = CardItem[];
/**
 * InjectionToken for overriding the default `PaymentCardStatusMapping` used to map backend
 * `status` values to internal status values.
 */
export declare const StatusMappingConfigToken: InjectionToken<PaymentCardStatusMapping>;
/**
 * InjectionToken for overriding the default `PaymentCardReplacementStatusMapping` used to map
 * backend `replacementStatus` values to internal replacement status values.
 */
export declare const ReplacementStatusMappingConfigToken: InjectionToken<PaymentCardReplacementStatusMapping>;
/**
 * InjectionToken for overriding the default `PaymentCardReplacementReasonMapping` used to map
 * internal replacement reason values to backend `replacementReason` values.
 */
export declare const ReplacementReasonMappingConfigToken: InjectionToken<PaymentCardReplacementReasonMapping>;
/**
 * InjectionToken for overriding the default `limitChannelMappingConfigToken` used to map
 * internal limit channels to backend values.
 */
export declare const LimitChannelMappingConfigToken: InjectionToken<PaymentCardLimitChannelMapping>;
/**
 * InjectionToken for overriding the default `CardsBackendDestinations` used to retrieve
 * countries from either a content-manager or database or any other third party.
 */
export declare const DestinationsServiceConfigToken: InjectionToken<CardsBackendDestinations>;
/**
 * @name CardsBackendService
 *
 * @description
 * Utility functions for processing data returned by the backend.
 */
export declare class CardsBackendService {
    private readonly statusMapping;
    private readonly replacementStatusMapping;
    private readonly lockStatusMapping;
    private readonly replacementReasonMapping;
    private readonly limitChannelMapping;
    /**
     * @name CardsBackendService#itemListToModel
     * @param items - List of card items as returned in the http response
     * @returns Array of payment cards
     *
     * @description
     * Process data returned by the backend.
     */
    itemListToModel(items: CardItemList | null): Array<PaymentCard>;
    /**
     * @name CardsBackendService#itemToModel
     * @param item - Item as returned in the http response
     * @returns Payment card
     *
     * @description
     * Process payment card provided by backend.
     */
    itemToModel: (item: CardItem) => PaymentCard;
    travelNoticeToModel: (item: TravelNotice, paymentCards: PaymentCard[]) => {
        id: string | undefined;
        cards: PaymentCard[];
        departureDate: Date;
        arrivalDate: Date;
        destinations: Destination[];
        contact: Contact;
    };
    /**
     * @name CardsBackendService#getLockStatusUpdate
     * @param lockStatus - New lock status
     * @returns Update object to pass to `postCardsLockStatusRecordById` data module function
     *
     * @description
     * Make lock status update object to pass to backend.
     */
    getLockStatusUpdate: (lockStatus: PaymentCardLockStatus) => LockStatusPost;
    /**
     * @name CardsBackendService#getReplacementUpdate
     * @param replacementReason - Reason for the replacement
     * @returns Update object to pass to `postCardsReplacementRecordById` data module function
     *
     * @description
     * Make replacement update object to pass to backend.
     */
    getReplacementUpdate: (replacementReason: PaymentCardReplacementReason | string) => {
        replacementReason: string;
    };
    /**
     * @name CardsBackendService#parseError
     * @param error - The error response
     * @returns An object containing a user-friendly error message
     *
     * @description
     * Parse an HttpErrorResponse and return a CardsBackendError object that can be used to display a
     * user-friendly error message.
     */
    parseError(error: HttpErrorResponse): CardsBackendError[];
    constructor(statusMapping: PaymentCardStatusMapping | undefined, replacementStatusMapping: PaymentCardReplacementStatusMapping | undefined, replacementReasonMapping: PaymentCardReplacementReasonMapping | undefined, limitChannelMapping: PaymentCardLimitChannelMapping | undefined);
    static ɵfac: i0.ɵɵFactoryDeclaration<CardsBackendService, [{ optional: true; }, { optional: true; }, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<CardsBackendService>;
}
export {};
