import { HttpResponse } from '@angular/common/http';
import { OnDestroy } from '@angular/core';
import { CardsHttpService as ApiCardsService, TravelNotice, TravelNoticesHttpService } from '@backbase/data-ang/cards';
import { Observable } from 'rxjs';
import { PaymentCardLimit } from '../model/payment-card-limit.model';
import { PaymentCardReplacementReason } from '../model/payment-card-replacement-reason.model';
import { PaymentCard, PaymentCardLockStatus } from '../model/payment-card.model';
import { FullTravelNoticeModel, TravelNotice as TravelNoticeModel } from '../model/travel-notice.model';
import { CardsBackendService } from './cards-backend.service';
import * as i0 from "@angular/core";
/**
 * @name CardsService
 *
 * @description
 * Service for retrieving cards from the backend.
 */
export declare class CardsService implements OnDestroy {
    private readonly cardsDataHttpService;
    private readonly cardsBackendService;
    private readonly cardsTravelNotice;
    private readonly getParams;
    private readonly paymentCards;
    private readonly travelNotice;
    /**
     * @name CardsService#getCards
     * @returns The (single-instance) observable of payment cards retrieved from the backend.
     *
     * @description
     * Returns the (single-instance) observable of payment cards retrieved from the backend.
     */
    getCards(): Observable<Array<PaymentCard>>;
    setParameters(typesParams: Observable<string[]>): void;
    /**
     * @name CardsService#updateLockStatus
     * @returns An observable of the payment card with updated lock status.
     *
     * @description
     * Calls the backend to change the lock status and returns an observable of updated payment card
     * returned in the response.  If that response is empty, the existing payment card with the
     * updated lock status is returned.
     */
    updateLockStatus(card: PaymentCard, lockStatus: PaymentCardLockStatus): Observable<PaymentCard>;
    /**
     * @name CardsService#initiateReplacement
     * @returns An observable of the payment card with updated replacement status.
     *
     * @description
     * Calls the backend to initiate replacement and returns an observable of the updated payment
     * card returned in the response.  If the response is empty, the existing payment card with
     * replacement status set to `UNDER_REPLACEMENT` is returned.
     */
    initiateReplacement(card: PaymentCard, replacementReason: PaymentCardReplacementReason | string): Observable<PaymentCard>;
    /**
     * @name CardsService#initiateActivation
     * @returns An observable of the payment card with updated status.
     *
     * @description
     * Calls the backend to activate a payment card and returns an observable of the updated payment
     * card returned in the response.  If the response is empty, the existing payment card with
     * status set to `ACTIVE` is returned.
     */
    initiateActivation(card: PaymentCard, token: string): Observable<PaymentCard>;
    /**
     * @name CardsService#updateLimit
     * @returns An observable of the payment card with updated limits.
     *
     * @description
     * Calls the backend to update a payment card and returns an observable of the updated payment
     * card returned in the response.  If the response is empty, the existing payment card with
     * limits updated is returned.
     */
    updateLimit(card: PaymentCard, limit: Array<PaymentCardLimit>, updateAllLimits?: boolean): Observable<PaymentCard>;
    resetPIN(card: PaymentCard, paymentCardResetPin: any): Observable<PaymentCard>;
    requestPIN(card: PaymentCard, paymentCardResetPin: any): Observable<PaymentCard>;
    /**
     *  Modified - added a observable to only respond with active cards.
     *
     * @returns Observable with all travel notices and payment cards with
     * status active
     */
    getTravelNotice(): Observable<FullTravelNoticeModel>;
    postTravelNotice(travelNoticeItem: TravelNoticeModel): Observable<TravelNotice>;
    deleteTravelNotice(travelNoticeItem: TravelNoticeModel): Observable<HttpResponse<any>>;
    ngOnDestroy(): void;
    constructor(cardsDataHttpService: ApiCardsService, cardsBackendService: CardsBackendService, cardsTravelNotice: TravelNoticesHttpService);
    static ɵfac: i0.ɵɵFactoryDeclaration<CardsService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<CardsService>;
}
