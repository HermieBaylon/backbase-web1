import { Inject, Injectable, Optional } from '@angular/core';
import { HttpHeaders } from '@angular/common/http';
import { CustomHttpParameterCodec } from '../encoder';
import { USER_PROFILE_BASE_PATH } from '../variables';
import { UserProfileConfiguration } from '../configuration';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../configuration";
export class UserProfileManagementService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new UserProfileConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    createUserProfile(requestParameters, observe = 'body', reportProgress = false, options) {
        const _createUserProfile = requestParameters["createUserProfile"];
        if (_createUserProfile === null || _createUserProfile === undefined) {
            throw new Error('Required parameter createUserProfile was null or undefined when calling createUserProfile.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/user-profile`, _createUserProfile, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    createUserProfileUrl(requestParameters) {
        const _createUserProfile = requestParameters["createUserProfile"];
        if (_createUserProfile === null || _createUserProfile === undefined) {
            throw new Error('Required parameter createUserProfile was null or undefined when calling createUserProfile.');
        }
        return `${this.configuration.basePath}/client-api/v2/user-profile`;
    }
    deleteUserProfile(requestParameters, observe = 'body', reportProgress = false, options) {
        const _userId = requestParameters["userId"];
        if (_userId === null || _userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling deleteUserProfile.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v2/user-profile/${encodeURIComponent(String(_userId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteUserProfileUrl(requestParameters) {
        const _userId = requestParameters["userId"];
        if (_userId === null || _userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling deleteUserProfile.');
        }
        return `${this.configuration.basePath}/client-api/v2/user-profile/${encodeURIComponent(String(_userId))}`;
    }
    getUserProfile(requestParameters, observe = 'body', reportProgress = false, options) {
        const _userId = requestParameters["userId"];
        if (_userId === null || _userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getUserProfile.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/user-profile/${encodeURIComponent(String(_userId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getUserProfileUrl(requestParameters) {
        const _userId = requestParameters["userId"];
        if (_userId === null || _userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getUserProfile.');
        }
        return `${this.configuration.basePath}/client-api/v2/user-profile/${encodeURIComponent(String(_userId))}`;
    }
    replaceUserProfile(requestParameters, observe = 'body', reportProgress = false, options) {
        const _userId = requestParameters["userId"];
        if (_userId === null || _userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling replaceUserProfile.');
        }
        const _replaceUserProfile = requestParameters["replaceUserProfile"];
        if (_replaceUserProfile === null || _replaceUserProfile === undefined) {
            throw new Error('Required parameter replaceUserProfile was null or undefined when calling replaceUserProfile.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/user-profile/${encodeURIComponent(String(_userId))}`, _replaceUserProfile, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    replaceUserProfileUrl(requestParameters) {
        const _userId = requestParameters["userId"];
        if (_userId === null || _userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling replaceUserProfile.');
        }
        const _replaceUserProfile = requestParameters["replaceUserProfile"];
        if (_replaceUserProfile === null || _replaceUserProfile === undefined) {
            throw new Error('Required parameter replaceUserProfile was null or undefined when calling replaceUserProfile.');
        }
        return `${this.configuration.basePath}/client-api/v2/user-profile/${encodeURIComponent(String(_userId))}`;
    }
}
UserProfileManagementService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserProfileManagementService, deps: [{ token: i1.HttpClient }, { token: USER_PROFILE_BASE_PATH, optional: true }, { token: i2.UserProfileConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
UserProfileManagementService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserProfileManagementService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserProfileManagementService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [USER_PROFILE_BASE_PATH]
                }] }, { type: i2.UserProfileConfiguration, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,