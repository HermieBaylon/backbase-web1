import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { CreateUserProfile } from '../model/models';
import { GetUserProfile } from '../model/models';
import { ReplaceUserProfile } from '../model/models';
import { UserProfileConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface CreateUserProfileRequestParams {
    ["createUserProfile"]: CreateUserProfile;
}
export interface DeleteUserProfileRequestParams {
    ["userId"]: string;
}
export interface GetUserProfileRequestParams {
    ["userId"]: string;
}
export interface ReplaceUserProfileRequestParams {
    ["userId"]: string;
    ["replaceUserProfile"]: ReplaceUserProfile;
}
export declare class UserProfileManagementService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: UserProfileConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: UserProfileConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    createUserProfile(requestParameters: CreateUserProfileRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<GetUserProfile>;
    createUserProfile(requestParameters: CreateUserProfileRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<GetUserProfile>>;
    createUserProfile(requestParameters: CreateUserProfileRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<GetUserProfile>>;
    createUserProfileUrl(requestParameters: CreateUserProfileRequestParams): string;
    deleteUserProfile(requestParameters: DeleteUserProfileRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    deleteUserProfile(requestParameters: DeleteUserProfileRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    deleteUserProfile(requestParameters: DeleteUserProfileRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    deleteUserProfileUrl(requestParameters: DeleteUserProfileRequestParams): string;
    getUserProfile(requestParameters: GetUserProfileRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<GetUserProfile>;
    getUserProfile(requestParameters: GetUserProfileRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<GetUserProfile>>;
    getUserProfile(requestParameters: GetUserProfileRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<GetUserProfile>>;
    getUserProfileUrl(requestParameters: GetUserProfileRequestParams): string;
    replaceUserProfile(requestParameters: ReplaceUserProfileRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<GetUserProfile>;
    replaceUserProfile(requestParameters: ReplaceUserProfileRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<GetUserProfile>>;
    replaceUserProfile(requestParameters: ReplaceUserProfileRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<GetUserProfile>>;
    replaceUserProfileUrl(requestParameters: ReplaceUserProfileRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<UserProfileManagementService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<UserProfileManagementService>;
}
