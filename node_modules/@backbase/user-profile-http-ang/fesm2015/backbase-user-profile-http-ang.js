import * as i0 from '@angular/core';
import { InjectionToken, NgModule, Optional, SkipSelf, Injectable, Inject } from '@angular/core';
import * as i1 from '@angular/common/http';
import { HttpHeaders } from '@angular/common/http';
import * as i2 from '@backbase/foundation-ang/data-http';
import { createMocks } from '@backbase/foundation-ang/data-http';

const USER_PROFILE_BASE_PATH = new InjectionToken('USER_PROFILE_BASE_PATH');
const COLLECTION_FORMATS = {
    'csv': ',',
    'tsv': '   ',
    'ssv': ' ',
    'pipes': '|'
};

class UserProfileConfiguration {
    constructor(configurationParameters = {}) {
        this.apiKeys = configurationParameters.apiKeys;
        this.username = configurationParameters.username;
        this.password = configurationParameters.password;
        this.accessToken = configurationParameters.accessToken;
        this.basePath = configurationParameters.basePath;
        this.withCredentials = configurationParameters.withCredentials;
        this.encoder = configurationParameters.encoder;
        if (configurationParameters.credentials) {
            this.credentials = configurationParameters.credentials;
        }
        else {
            this.credentials = {};
        }
    }
    selectHeaderContentType(contentTypes) {
        if (contentTypes.length === 0) {
            return undefined;
        }
        const type = contentTypes.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return contentTypes[0];
        }
        return type;
    }
    selectHeaderAccept(accepts) {
        if (accepts.length === 0) {
            return undefined;
        }
        const type = accepts.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return accepts[0];
        }
        return type;
    }
    isJsonMime(mime) {
        const jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
    lookupCredential(key) {
        const value = this.credentials[key];
        return typeof value === 'function'
            ? value()
            : value;
    }
}
const CONFIG_TOKEN = new InjectionToken('api-data-module UserProfileConfiguration');

class UserProfileApiModule {
    constructor(parentModule, http, dataModulesManager, config) {
        if (parentModule) {
            throw new Error('UserProfileApiModule is already loaded. Import in your base AppModule only.');
        }
        if (!http) {
            throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                'See also https://github.com/angular/angular/issues/20575');
        }
        if (dataModulesManager) {
            dataModulesManager.setModuleConfig(CONFIG_TOKEN, {
                apiRoot: '',
                servicePath: config.basePath || '',
                headers: {},
            });
        }
    }
    static forRoot(configurationFactory) {
        return {
            ngModule: UserProfileApiModule,
            providers: [{ provide: UserProfileConfiguration, useFactory: configurationFactory }]
        };
    }
}
UserProfileApiModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserProfileApiModule, deps: [{ token: UserProfileApiModule, optional: true, skipSelf: true }, { token: i1.HttpClient, optional: true }, { token: i2.DataModulesManager, optional: true }, { token: UserProfileConfiguration }], target: i0.ɵɵFactoryTarget.NgModule });
UserProfileApiModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserProfileApiModule });
UserProfileApiModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserProfileApiModule, providers: [], imports: [[]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserProfileApiModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [],
                    declarations: [],
                    exports: [],
                    providers: []
                }]
        }], ctorParameters: function () { return [{ type: UserProfileApiModule, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: i1.HttpClient, decorators: [{
                    type: Optional
                }] }, { type: i2.DataModulesManager, decorators: [{
                    type: Optional
                }] }, { type: UserProfileConfiguration }]; } });

class CustomHttpParameterCodec {
    encodeKey(k) {
        return encodeURIComponent(k);
    }
    encodeValue(v) {
        return encodeURIComponent(v);
    }
    decodeKey(k) {
        return decodeURIComponent(k);
    }
    decodeValue(v) {
        return decodeURIComponent(v);
    }
}

class UserProfileManagementService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new UserProfileConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    createUserProfile(requestParameters, observe = 'body', reportProgress = false, options) {
        const _createUserProfile = requestParameters["createUserProfile"];
        if (_createUserProfile === null || _createUserProfile === undefined) {
            throw new Error('Required parameter createUserProfile was null or undefined when calling createUserProfile.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/user-profile`, _createUserProfile, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    createUserProfileUrl(requestParameters) {
        const _createUserProfile = requestParameters["createUserProfile"];
        if (_createUserProfile === null || _createUserProfile === undefined) {
            throw new Error('Required parameter createUserProfile was null or undefined when calling createUserProfile.');
        }
        return `${this.configuration.basePath}/client-api/v2/user-profile`;
    }
    deleteUserProfile(requestParameters, observe = 'body', reportProgress = false, options) {
        const _userId = requestParameters["userId"];
        if (_userId === null || _userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling deleteUserProfile.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v2/user-profile/${encodeURIComponent(String(_userId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteUserProfileUrl(requestParameters) {
        const _userId = requestParameters["userId"];
        if (_userId === null || _userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling deleteUserProfile.');
        }
        return `${this.configuration.basePath}/client-api/v2/user-profile/${encodeURIComponent(String(_userId))}`;
    }
    getUserProfile(requestParameters, observe = 'body', reportProgress = false, options) {
        const _userId = requestParameters["userId"];
        if (_userId === null || _userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getUserProfile.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/user-profile/${encodeURIComponent(String(_userId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getUserProfileUrl(requestParameters) {
        const _userId = requestParameters["userId"];
        if (_userId === null || _userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getUserProfile.');
        }
        return `${this.configuration.basePath}/client-api/v2/user-profile/${encodeURIComponent(String(_userId))}`;
    }
    replaceUserProfile(requestParameters, observe = 'body', reportProgress = false, options) {
        const _userId = requestParameters["userId"];
        if (_userId === null || _userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling replaceUserProfile.');
        }
        const _replaceUserProfile = requestParameters["replaceUserProfile"];
        if (_replaceUserProfile === null || _replaceUserProfile === undefined) {
            throw new Error('Required parameter replaceUserProfile was null or undefined when calling replaceUserProfile.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/user-profile/${encodeURIComponent(String(_userId))}`, _replaceUserProfile, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    replaceUserProfileUrl(requestParameters) {
        const _userId = requestParameters["userId"];
        if (_userId === null || _userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling replaceUserProfile.');
        }
        const _replaceUserProfile = requestParameters["replaceUserProfile"];
        if (_replaceUserProfile === null || _replaceUserProfile === undefined) {
            throw new Error('Required parameter replaceUserProfile was null or undefined when calling replaceUserProfile.');
        }
        return `${this.configuration.basePath}/client-api/v2/user-profile/${encodeURIComponent(String(_userId))}`;
    }
}
UserProfileManagementService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserProfileManagementService, deps: [{ token: i1.HttpClient }, { token: USER_PROFILE_BASE_PATH, optional: true }, { token: UserProfileConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
UserProfileManagementService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserProfileManagementService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: UserProfileManagementService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [USER_PROFILE_BASE_PATH]
                }] }, { type: UserProfileConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const UserProfileManagementServiceCreateUserProfileMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/user-profile",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "id": "0628465a-483b-44ef-9dbc-927d619de766",
                    "userId": "2819c223-7f76-453a-919d-413861904646",
                    "externalId": "701984",
                    "userName": "bjensen@example.com",
                    "name": {
                        "formatted": "Ms. Barbara J Jensen, III",
                        "familyName": "Jensen",
                        "givenName": "Barbara",
                        "middleName": "Jane",
                        "honorificPrefix": "Ms.",
                        "honorificSuffix": "III"
                    },
                    "displayName": "Babs Jensen",
                    "nickName": "Babs",
                    "profileUrl": "https://login.example.com/bjensen",
                    "personalInformation": {
                        "gender": "female",
                        "dateOfBirth": "07/03/1987",
                        "countryOfBirth": "NL",
                        "countryOfResidence": "UK",
                        "nationalities": ["Dutch", "British"],
                        "maritalStatus": "single",
                        "employer": "Backbase UK LTD.",
                        "employmentStatus": "FULL-TIME"
                    },
                    "identificationDetails": [{
                            "value": "111-22222-555",
                            "type": "National Insurance Number",
                            "issueCountryCode": "GB"
                        }, {
                            "value": "PAW413594164",
                            "type": "Passport",
                            "issueCountryCode": "NL",
                            "issueDate": "2011-11-11T00:00:00.000Z",
                            "expiryDate": "2021-11-11T00:00:00.000Z"
                        }],
                    "emails": [{
                            "value": "bjensen@example.com",
                            "type": "work",
                            "primary": true
                        }, {
                            "value": "babs@jensen.org",
                            "type": "home"
                        }],
                    "addresses": [{
                            "type": "work",
                            "streetAddress": "100 Universal City Plaza",
                            "locality": "Hollywood",
                            "region": "CA",
                            "postalCode": "91608",
                            "country": "USA",
                            "formatted": "100 Universal City Plaza\nHollywood, CA 91608 USA",
                            "primary": true
                        }, {
                            "type": "home",
                            "streetAddress": "456 Hollywood Blvd",
                            "locality": "Hollywood",
                            "region": "CA",
                            "postalCode": "91608",
                            "country": "USA",
                            "formatted": "456 Hollywood Blvd\nHollywood, CA 91608 USA"
                        }],
                    "phoneNumbers": [{
                            "value": "555-555-5555",
                            "type": "work"
                        }, {
                            "value": "555-555-4444",
                            "type": "mobile"
                        }],
                    "ims": [{
                            "value": "someaimhandle",
                            "type": "aim"
                        }],
                    "photos": [{
                            "value": "https://photos.example.com/profilephoto/72930000000Ccne/F",
                            "type": "photo"
                        }, {
                            "value": "https://photos.example.com/profilephoto/72930000000Ccne/T",
                            "type": "thumbnail"
                        }],
                    "userType": "Employee",
                    "title": "Tour Guide",
                    "preferredLanguage": "en-US",
                    "locale": "en-US",
                    "timezone": "America/Los_Angeles",
                    "active": true,
                    "x509Certificates": [{
                            "value": "MIIDQzCCAqygAwIBAgICEAAwDQYJKoZIhvcNAQEFBQAwTjELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFDASBgNVBAoMC2V4YW1wbGUuY29tMRQwEgYDVQQDDAtleGFtcGxlLmNvbTAeFw0xMTEwMjIwNjI0MzFaFw0xMjEwMDQwNjI0MzFaMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRQwEgYDVQQKDAtleGFtcGxlLmNvbTEhMB8GA1UEAwwYTXMuIEJhcmJhcmEgSiBKZW5zZW4gSUlJMSIwIAYJKoZIhvcNAQkBFhNiamVuc2VuQGV4YW1wbGUuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7Kr+Dcds/JQ5GwejJFcBIP682X3xpjis56AK02bc1FLgzdLI8auoR+cC9/Vrh5t66HkQIOdA4unHh0AaZ4xL5PhVbXIPMB5vAPKpzz5iPSi8xO8SL7I7SDhcBVJhqVqr3HgllEG6UClDdHO7nkLuwXq8HcISKkbT5WFTVfFZzidPl8HZ7DhXkZIRtJwBweq4bvm3hM1Os7UQH05ZS6cVDgweKNwdLLrT51ikSQG3DYrl+ft781UQRIqxgwqCfXEuDiinPh0kkvIi5jivVu1Z9QiwlYEdRbLJ4zJQBmDrSGTMYn4lRc2HgHO4DqB/bnMVorHB0CC6AV1QoFK4GPe1LwIDAQABo3sweTAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRlZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU8pD0U0vsZIsaA16lL8En8bx0F/gwHwYDVR0jBBgwFoAUdGeKitcaF7gnzsNwDx708kqaVt0wDQYJKoZIhvcNAQEFBQADgYEAA81SsFnOdYJtNg5Tcq+/ByEDrBgnusx0jloUhByPMEVkoMZ3J7j1ZgI8rAbOkNngX8+pKfTiDz1RC4+dx8oU6Za+4NJXUjlL5CvV6BEYb1+QAEJwitTVvxB/A67g42/vzgAtoRUeDov1+GFiBZ+GNF/cAYKcMtGcrs2i97ZkJMo="
                        }],
                    "extended": {
                        "my-custom-reference-id": "Banky-McBankFace"
                    }
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 409,
                body: {
                    "message": "Conflict error",
                    "errors": [{
                            "message": "The request could not be completed due to a conflict with the current state of the resource.",
                            "key": "transactions.api.billingstatus.transaction",
                            "context": {
                                "billingStatus": "BILLED"
                            }
                        }]
                }
            },
        ]
    }]);
const UserProfileManagementServiceDeleteUserProfileMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/user-profile/{userId}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const UserProfileManagementServiceGetUserProfileMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/user-profile/{userId}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "id": "0628465a-483b-44ef-9dbc-927d619de766",
                    "userId": "2819c223-7f76-453a-919d-413861904646",
                    "externalId": "701984",
                    "userName": "bjensen@example.com",
                    "name": {
                        "formatted": "Ms. Barbara J Jensen, III",
                        "familyName": "Jensen",
                        "givenName": "Barbara",
                        "middleName": "Jane",
                        "honorificPrefix": "Ms.",
                        "honorificSuffix": "III"
                    },
                    "displayName": "Babs Jensen",
                    "nickName": "Babs",
                    "profileUrl": "https://login.example.com/bjensen",
                    "personalInformation": {
                        "gender": "female",
                        "dateOfBirth": "07/03/1987",
                        "countryOfBirth": "NL",
                        "countryOfResidence": "UK",
                        "nationalities": ["Dutch", "British"],
                        "maritalStatus": "single",
                        "employer": "Backbase UK LTD.",
                        "employmentStatus": "FULL-TIME"
                    },
                    "identificationDetails": [{
                            "value": "111-22222-555",
                            "type": "National Insurance Number",
                            "issueCountryCode": "GB"
                        }, {
                            "value": "PAW413594164",
                            "type": "Passport",
                            "issueCountryCode": "NL",
                            "issueDate": "2011-11-11T00:00:00.000Z",
                            "expiryDate": "2021-11-11T00:00:00.000Z"
                        }],
                    "emails": [{
                            "value": "bjensen@example.com",
                            "type": "work",
                            "primary": true
                        }, {
                            "value": "babs@jensen.org",
                            "type": "home"
                        }],
                    "addresses": [{
                            "type": "work",
                            "streetAddress": "100 Universal City Plaza",
                            "locality": "Hollywood",
                            "region": "CA",
                            "postalCode": "91608",
                            "country": "USA",
                            "formatted": "100 Universal City Plaza\nHollywood, CA 91608 USA",
                            "primary": true
                        }, {
                            "type": "home",
                            "streetAddress": "456 Hollywood Blvd",
                            "locality": "Hollywood",
                            "region": "CA",
                            "postalCode": "91608",
                            "country": "USA",
                            "formatted": "456 Hollywood Blvd\nHollywood, CA 91608 USA"
                        }],
                    "phoneNumbers": [{
                            "value": "555-555-5555",
                            "type": "work"
                        }, {
                            "value": "555-555-4444",
                            "type": "mobile"
                        }],
                    "ims": [{
                            "value": "someaimhandle",
                            "type": "aim"
                        }],
                    "photos": [{
                            "value": "https://photos.example.com/profilephoto/72930000000Ccne/F",
                            "type": "photo"
                        }, {
                            "value": "https://photos.example.com/profilephoto/72930000000Ccne/T",
                            "type": "thumbnail"
                        }],
                    "userType": "Employee",
                    "title": "Tour Guide",
                    "preferredLanguage": "en-US",
                    "locale": "en-US",
                    "timezone": "America/Los_Angeles",
                    "active": true,
                    "x509Certificates": [{
                            "value": "MIIDQzCCAqygAwIBAgICEAAwDQYJKoZIhvcNAQEFBQAwTjELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFDASBgNVBAoMC2V4YW1wbGUuY29tMRQwEgYDVQQDDAtleGFtcGxlLmNvbTAeFw0xMTEwMjIwNjI0MzFaFw0xMjEwMDQwNjI0MzFaMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRQwEgYDVQQKDAtleGFtcGxlLmNvbTEhMB8GA1UEAwwYTXMuIEJhcmJhcmEgSiBKZW5zZW4gSUlJMSIwIAYJKoZIhvcNAQkBFhNiamVuc2VuQGV4YW1wbGUuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7Kr+Dcds/JQ5GwejJFcBIP682X3xpjis56AK02bc1FLgzdLI8auoR+cC9/Vrh5t66HkQIOdA4unHh0AaZ4xL5PhVbXIPMB5vAPKpzz5iPSi8xO8SL7I7SDhcBVJhqVqr3HgllEG6UClDdHO7nkLuwXq8HcISKkbT5WFTVfFZzidPl8HZ7DhXkZIRtJwBweq4bvm3hM1Os7UQH05ZS6cVDgweKNwdLLrT51ikSQG3DYrl+ft781UQRIqxgwqCfXEuDiinPh0kkvIi5jivVu1Z9QiwlYEdRbLJ4zJQBmDrSGTMYn4lRc2HgHO4DqB/bnMVorHB0CC6AV1QoFK4GPe1LwIDAQABo3sweTAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRlZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU8pD0U0vsZIsaA16lL8En8bx0F/gwHwYDVR0jBBgwFoAUdGeKitcaF7gnzsNwDx708kqaVt0wDQYJKoZIhvcNAQEFBQADgYEAA81SsFnOdYJtNg5Tcq+/ByEDrBgnusx0jloUhByPMEVkoMZ3J7j1ZgI8rAbOkNngX8+pKfTiDz1RC4+dx8oU6Za+4NJXUjlL5CvV6BEYb1+QAEJwitTVvxB/A67g42/vzgAtoRUeDov1+GFiBZ+GNF/cAYKcMtGcrs2i97ZkJMo="
                        }],
                    "extended": {
                        "my-custom-reference-id": "Banky-McBankFace"
                    }
                }
            },
            {
                status: 200,
                body: {
                    "profileUrl": "profileUrl",
                    "x509Certificates": [{
                            "additions": {
                                "key": "additions"
                            },
                            "display": "display",
                            "type": "type",
                            "value": "value",
                            "primary": true
                        }, {
                            "additions": {
                                "key": "additions"
                            },
                            "display": "display",
                            "type": "type",
                            "value": "value",
                            "primary": true
                        }],
                    "preferredLanguage": "preferredLanguage",
                    "addresses": [{
                            "country": "country",
                            "additions": {
                                "key": "additions"
                            },
                            "streetAddress": "streetAddress",
                            "formatted": "formatted",
                            "postalCode": "postalCode",
                            "locality": "locality",
                            "region": "region",
                            "type": "type",
                            "primary": true
                        }, {
                            "country": "country",
                            "additions": {
                                "key": "additions"
                            },
                            "streetAddress": "streetAddress",
                            "formatted": "formatted",
                            "postalCode": "postalCode",
                            "locality": "locality",
                            "region": "region",
                            "type": "type",
                            "primary": true
                        }],
                    "additions": {
                        "key": "additions"
                    },
                    "displayName": "displayName",
                    "nickName": "nickName",
                    "timezone": "timezone",
                    "personalInformation": {
                        "gender": "gender",
                        "additions": {
                            "key": "additions"
                        },
                        "countryOfBirth": "countryOfBirth",
                        "educationLevel": "educationLevel",
                        "employer": "employer",
                        "dateOfBirth": "dateOfBirth",
                        "nationalities": ["nationalities", "nationalities"],
                        "countryOfResidence": "countryOfResidence",
                        "employmentStatus": "employmentStatus",
                        "maritalStatus": "maritalStatus"
                    },
                    "externalId": "externalId",
                    "active": true,
                    "userName": "userName",
                    "title": "title",
                    "locale": "locale",
                    "userId": "userId",
                    "photos": [{
                            "additions": {
                                "key": "additions"
                            },
                            "display": "display",
                            "type": "type",
                            "value": "value",
                            "primary": true
                        }, {
                            "additions": {
                                "key": "additions"
                            },
                            "display": "display",
                            "type": "type",
                            "value": "value",
                            "primary": true
                        }],
                    "phoneNumbers": [{
                            "additions": {
                                "key": "additions"
                            },
                            "display": "display",
                            "type": "type",
                            "value": "value",
                            "primary": true
                        }, {
                            "additions": {
                                "key": "additions"
                            },
                            "display": "display",
                            "type": "type",
                            "value": "value",
                            "primary": true
                        }],
                    "ims": [{
                            "additions": {
                                "key": "additions"
                            },
                            "display": "display",
                            "type": "type",
                            "value": "value",
                            "primary": true
                        }, {
                            "additions": {
                                "key": "additions"
                            },
                            "display": "display",
                            "type": "type",
                            "value": "value",
                            "primary": true
                        }],
                    "extended": {
                        "key": "{}"
                    },
                    "emails": [{
                            "additions": {
                                "key": "additions"
                            },
                            "display": "display",
                            "type": "type",
                            "value": "value",
                            "primary": true
                        }, {
                            "additions": {
                                "key": "additions"
                            },
                            "display": "display",
                            "type": "type",
                            "value": "value",
                            "primary": true
                        }],
                    "identificationDetails": [{
                            "expiryDate": "2000-01-23",
                            "additions": {
                                "key": "additions"
                            },
                            "issueCountryCode": "issueCountryCode",
                            "type": "type",
                            "issueDate": "2000-01-23",
                            "value": "value"
                        }, {
                            "expiryDate": "2000-01-23",
                            "additions": {
                                "key": "additions"
                            },
                            "issueCountryCode": "issueCountryCode",
                            "type": "type",
                            "issueDate": "2000-01-23",
                            "value": "value"
                        }],
                    "name": {
                        "honorificSuffix": "honorificSuffix",
                        "additions": {
                            "key": "additions"
                        },
                        "formatted": "formatted",
                        "familyName": "familyName",
                        "givenName": "givenName",
                        "honorificPrefix": "honorificPrefix",
                        "middleName": "middleName"
                    },
                    "id": "id",
                    "userType": "userType"
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const UserProfileManagementServiceReplaceUserProfileMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/user-profile/{userId}",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "id": "0628465a-483b-44ef-9dbc-927d619de766",
                    "userId": "2819c223-7f76-453a-919d-413861904646",
                    "externalId": "701984",
                    "userName": "bjensen@example.com",
                    "name": {
                        "formatted": "Ms. Barbara J Jensen, III",
                        "familyName": "Jensen",
                        "givenName": "Barbara",
                        "middleName": "Jane",
                        "honorificPrefix": "Ms.",
                        "honorificSuffix": "III"
                    },
                    "displayName": "Babs Jensen",
                    "nickName": "Babs",
                    "profileUrl": "https://login.example.com/bjensen",
                    "personalInformation": {
                        "gender": "female",
                        "dateOfBirth": "07/03/1987",
                        "countryOfBirth": "NL",
                        "countryOfResidence": "UK",
                        "nationalities": ["Dutch", "British"],
                        "maritalStatus": "single",
                        "employer": "Backbase UK LTD.",
                        "employmentStatus": "FULL-TIME"
                    },
                    "identificationDetails": [{
                            "value": "111-22222-555",
                            "type": "National Insurance Number",
                            "issueCountryCode": "GB"
                        }, {
                            "value": "PAW413594164",
                            "type": "Passport",
                            "issueCountryCode": "NL",
                            "issueDate": "2011-11-11T00:00:00.000Z",
                            "expiryDate": "2021-11-11T00:00:00.000Z"
                        }],
                    "emails": [{
                            "value": "bjensen@example.com",
                            "type": "work",
                            "primary": true
                        }, {
                            "value": "babs@jensen.org",
                            "type": "home"
                        }],
                    "addresses": [{
                            "type": "work",
                            "streetAddress": "100 Universal City Plaza",
                            "locality": "Hollywood",
                            "region": "CA",
                            "postalCode": "91608",
                            "country": "USA",
                            "formatted": "100 Universal City Plaza\nHollywood, CA 91608 USA",
                            "primary": true
                        }, {
                            "type": "home",
                            "streetAddress": "456 Hollywood Blvd",
                            "locality": "Hollywood",
                            "region": "CA",
                            "postalCode": "91608",
                            "country": "USA",
                            "formatted": "456 Hollywood Blvd\nHollywood, CA 91608 USA"
                        }],
                    "phoneNumbers": [{
                            "value": "555-555-5555",
                            "type": "work"
                        }, {
                            "value": "555-555-4444",
                            "type": "mobile"
                        }],
                    "ims": [{
                            "value": "someaimhandle",
                            "type": "aim"
                        }],
                    "photos": [{
                            "value": "https://photos.example.com/profilephoto/72930000000Ccne/F",
                            "type": "photo"
                        }, {
                            "value": "https://photos.example.com/profilephoto/72930000000Ccne/T",
                            "type": "thumbnail"
                        }],
                    "userType": "Employee",
                    "title": "Tour Guide",
                    "preferredLanguage": "en-US",
                    "locale": "en-US",
                    "timezone": "America/Los_Angeles",
                    "active": true,
                    "x509Certificates": [{
                            "value": "MIIDQzCCAqygAwIBAgICEAAwDQYJKoZIhvcNAQEFBQAwTjELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFDASBgNVBAoMC2V4YW1wbGUuY29tMRQwEgYDVQQDDAtleGFtcGxlLmNvbTAeFw0xMTEwMjIwNjI0MzFaFw0xMjEwMDQwNjI0MzFaMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRQwEgYDVQQKDAtleGFtcGxlLmNvbTEhMB8GA1UEAwwYTXMuIEJhcmJhcmEgSiBKZW5zZW4gSUlJMSIwIAYJKoZIhvcNAQkBFhNiamVuc2VuQGV4YW1wbGUuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7Kr+Dcds/JQ5GwejJFcBIP682X3xpjis56AK02bc1FLgzdLI8auoR+cC9/Vrh5t66HkQIOdA4unHh0AaZ4xL5PhVbXIPMB5vAPKpzz5iPSi8xO8SL7I7SDhcBVJhqVqr3HgllEG6UClDdHO7nkLuwXq8HcISKkbT5WFTVfFZzidPl8HZ7DhXkZIRtJwBweq4bvm3hM1Os7UQH05ZS6cVDgweKNwdLLrT51ikSQG3DYrl+ft781UQRIqxgwqCfXEuDiinPh0kkvIi5jivVu1Z9QiwlYEdRbLJ4zJQBmDrSGTMYn4lRc2HgHO4DqB/bnMVorHB0CC6AV1QoFK4GPe1LwIDAQABo3sweTAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRlZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU8pD0U0vsZIsaA16lL8En8bx0F/gwHwYDVR0jBBgwFoAUdGeKitcaF7gnzsNwDx708kqaVt0wDQYJKoZIhvcNAQEFBQADgYEAA81SsFnOdYJtNg5Tcq+/ByEDrBgnusx0jloUhByPMEVkoMZ3J7j1ZgI8rAbOkNngX8+pKfTiDz1RC4+dx8oU6Za+4NJXUjlL5CvV6BEYb1+QAEJwitTVvxB/A67g42/vzgAtoRUeDov1+GFiBZ+GNF/cAYKcMtGcrs2i97ZkJMo="
                        }],
                    "extended": {
                        "my-custom-reference-id": "Banky-McBankFace"
                    }
                }
            },
            {
                status: 200,
                body: {
                    "profileUrl": "profileUrl",
                    "x509Certificates": [{
                            "additions": {
                                "key": "additions"
                            },
                            "display": "display",
                            "type": "type",
                            "value": "value",
                            "primary": true
                        }, {
                            "additions": {
                                "key": "additions"
                            },
                            "display": "display",
                            "type": "type",
                            "value": "value",
                            "primary": true
                        }],
                    "preferredLanguage": "preferredLanguage",
                    "addresses": [{
                            "country": "country",
                            "additions": {
                                "key": "additions"
                            },
                            "streetAddress": "streetAddress",
                            "formatted": "formatted",
                            "postalCode": "postalCode",
                            "locality": "locality",
                            "region": "region",
                            "type": "type",
                            "primary": true
                        }, {
                            "country": "country",
                            "additions": {
                                "key": "additions"
                            },
                            "streetAddress": "streetAddress",
                            "formatted": "formatted",
                            "postalCode": "postalCode",
                            "locality": "locality",
                            "region": "region",
                            "type": "type",
                            "primary": true
                        }],
                    "additions": {
                        "key": "additions"
                    },
                    "displayName": "displayName",
                    "nickName": "nickName",
                    "timezone": "timezone",
                    "personalInformation": {
                        "gender": "gender",
                        "additions": {
                            "key": "additions"
                        },
                        "countryOfBirth": "countryOfBirth",
                        "educationLevel": "educationLevel",
                        "employer": "employer",
                        "dateOfBirth": "dateOfBirth",
                        "nationalities": ["nationalities", "nationalities"],
                        "countryOfResidence": "countryOfResidence",
                        "employmentStatus": "employmentStatus",
                        "maritalStatus": "maritalStatus"
                    },
                    "externalId": "externalId",
                    "active": true,
                    "userName": "userName",
                    "title": "title",
                    "locale": "locale",
                    "userId": "userId",
                    "photos": [{
                            "additions": {
                                "key": "additions"
                            },
                            "display": "display",
                            "type": "type",
                            "value": "value",
                            "primary": true
                        }, {
                            "additions": {
                                "key": "additions"
                            },
                            "display": "display",
                            "type": "type",
                            "value": "value",
                            "primary": true
                        }],
                    "phoneNumbers": [{
                            "additions": {
                                "key": "additions"
                            },
                            "display": "display",
                            "type": "type",
                            "value": "value",
                            "primary": true
                        }, {
                            "additions": {
                                "key": "additions"
                            },
                            "display": "display",
                            "type": "type",
                            "value": "value",
                            "primary": true
                        }],
                    "ims": [{
                            "additions": {
                                "key": "additions"
                            },
                            "display": "display",
                            "type": "type",
                            "value": "value",
                            "primary": true
                        }, {
                            "additions": {
                                "key": "additions"
                            },
                            "display": "display",
                            "type": "type",
                            "value": "value",
                            "primary": true
                        }],
                    "extended": {
                        "key": "{}"
                    },
                    "emails": [{
                            "additions": {
                                "key": "additions"
                            },
                            "display": "display",
                            "type": "type",
                            "value": "value",
                            "primary": true
                        }, {
                            "additions": {
                                "key": "additions"
                            },
                            "display": "display",
                            "type": "type",
                            "value": "value",
                            "primary": true
                        }],
                    "identificationDetails": [{
                            "expiryDate": "2000-01-23",
                            "additions": {
                                "key": "additions"
                            },
                            "issueCountryCode": "issueCountryCode",
                            "type": "type",
                            "issueDate": "2000-01-23",
                            "value": "value"
                        }, {
                            "expiryDate": "2000-01-23",
                            "additions": {
                                "key": "additions"
                            },
                            "issueCountryCode": "issueCountryCode",
                            "type": "type",
                            "issueDate": "2000-01-23",
                            "value": "value"
                        }],
                    "name": {
                        "honorificSuffix": "honorificSuffix",
                        "additions": {
                            "key": "additions"
                        },
                        "formatted": "formatted",
                        "familyName": "familyName",
                        "givenName": "givenName",
                        "honorificPrefix": "honorificPrefix",
                        "middleName": "middleName"
                    },
                    "id": "id",
                    "userType": "userType"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 409,
                body: {
                    "message": "Conflict error",
                    "errors": [{
                            "message": "The request could not be completed due to a conflict with the current state of the resource.",
                            "key": "transactions.api.billingstatus.transaction",
                            "context": {
                                "billingStatus": "BILLED"
                            }
                        }]
                }
            },
        ]
    }]);
const UserProfileManagementServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v2/user-profile",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "id": "0628465a-483b-44ef-9dbc-927d619de766",
                    "userId": "2819c223-7f76-453a-919d-413861904646",
                    "externalId": "701984",
                    "userName": "bjensen@example.com",
                    "name": {
                        "formatted": "Ms. Barbara J Jensen, III",
                        "familyName": "Jensen",
                        "givenName": "Barbara",
                        "middleName": "Jane",
                        "honorificPrefix": "Ms.",
                        "honorificSuffix": "III"
                    },
                    "displayName": "Babs Jensen",
                    "nickName": "Babs",
                    "profileUrl": "https://login.example.com/bjensen",
                    "personalInformation": {
                        "gender": "female",
                        "dateOfBirth": "07/03/1987",
                        "countryOfBirth": "NL",
                        "countryOfResidence": "UK",
                        "nationalities": ["Dutch", "British"],
                        "maritalStatus": "single",
                        "employer": "Backbase UK LTD.",
                        "employmentStatus": "FULL-TIME"
                    },
                    "identificationDetails": [{
                            "value": "111-22222-555",
                            "type": "National Insurance Number",
                            "issueCountryCode": "GB"
                        }, {
                            "value": "PAW413594164",
                            "type": "Passport",
                            "issueCountryCode": "NL",
                            "issueDate": "2011-11-11T00:00:00.000Z",
                            "expiryDate": "2021-11-11T00:00:00.000Z"
                        }],
                    "emails": [{
                            "value": "bjensen@example.com",
                            "type": "work",
                            "primary": true
                        }, {
                            "value": "babs@jensen.org",
                            "type": "home"
                        }],
                    "addresses": [{
                            "type": "work",
                            "streetAddress": "100 Universal City Plaza",
                            "locality": "Hollywood",
                            "region": "CA",
                            "postalCode": "91608",
                            "country": "USA",
                            "formatted": "100 Universal City Plaza\nHollywood, CA 91608 USA",
                            "primary": true
                        }, {
                            "type": "home",
                            "streetAddress": "456 Hollywood Blvd",
                            "locality": "Hollywood",
                            "region": "CA",
                            "postalCode": "91608",
                            "country": "USA",
                            "formatted": "456 Hollywood Blvd\nHollywood, CA 91608 USA"
                        }],
                    "phoneNumbers": [{
                            "value": "555-555-5555",
                            "type": "work"
                        }, {
                            "value": "555-555-4444",
                            "type": "mobile"
                        }],
                    "ims": [{
                            "value": "someaimhandle",
                            "type": "aim"
                        }],
                    "photos": [{
                            "value": "https://photos.example.com/profilephoto/72930000000Ccne/F",
                            "type": "photo"
                        }, {
                            "value": "https://photos.example.com/profilephoto/72930000000Ccne/T",
                            "type": "thumbnail"
                        }],
                    "userType": "Employee",
                    "title": "Tour Guide",
                    "preferredLanguage": "en-US",
                    "locale": "en-US",
                    "timezone": "America/Los_Angeles",
                    "active": true,
                    "x509Certificates": [{
                            "value": "MIIDQzCCAqygAwIBAgICEAAwDQYJKoZIhvcNAQEFBQAwTjELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFDASBgNVBAoMC2V4YW1wbGUuY29tMRQwEgYDVQQDDAtleGFtcGxlLmNvbTAeFw0xMTEwMjIwNjI0MzFaFw0xMjEwMDQwNjI0MzFaMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRQwEgYDVQQKDAtleGFtcGxlLmNvbTEhMB8GA1UEAwwYTXMuIEJhcmJhcmEgSiBKZW5zZW4gSUlJMSIwIAYJKoZIhvcNAQkBFhNiamVuc2VuQGV4YW1wbGUuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7Kr+Dcds/JQ5GwejJFcBIP682X3xpjis56AK02bc1FLgzdLI8auoR+cC9/Vrh5t66HkQIOdA4unHh0AaZ4xL5PhVbXIPMB5vAPKpzz5iPSi8xO8SL7I7SDhcBVJhqVqr3HgllEG6UClDdHO7nkLuwXq8HcISKkbT5WFTVfFZzidPl8HZ7DhXkZIRtJwBweq4bvm3hM1Os7UQH05ZS6cVDgweKNwdLLrT51ikSQG3DYrl+ft781UQRIqxgwqCfXEuDiinPh0kkvIi5jivVu1Z9QiwlYEdRbLJ4zJQBmDrSGTMYn4lRc2HgHO4DqB/bnMVorHB0CC6AV1QoFK4GPe1LwIDAQABo3sweTAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRlZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU8pD0U0vsZIsaA16lL8En8bx0F/gwHwYDVR0jBBgwFoAUdGeKitcaF7gnzsNwDx708kqaVt0wDQYJKoZIhvcNAQEFBQADgYEAA81SsFnOdYJtNg5Tcq+/ByEDrBgnusx0jloUhByPMEVkoMZ3J7j1ZgI8rAbOkNngX8+pKfTiDz1RC4+dx8oU6Za+4NJXUjlL5CvV6BEYb1+QAEJwitTVvxB/A67g42/vzgAtoRUeDov1+GFiBZ+GNF/cAYKcMtGcrs2i97ZkJMo="
                        }],
                    "extended": {
                        "my-custom-reference-id": "Banky-McBankFace"
                    }
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 409,
                body: {
                    "message": "Conflict error",
                    "errors": [{
                            "message": "The request could not be completed due to a conflict with the current state of the resource.",
                            "key": "transactions.api.billingstatus.transaction",
                            "context": {
                                "billingStatus": "BILLED"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/user-profile/{userId}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/user-profile/{userId}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "id": "0628465a-483b-44ef-9dbc-927d619de766",
                    "userId": "2819c223-7f76-453a-919d-413861904646",
                    "externalId": "701984",
                    "userName": "bjensen@example.com",
                    "name": {
                        "formatted": "Ms. Barbara J Jensen, III",
                        "familyName": "Jensen",
                        "givenName": "Barbara",
                        "middleName": "Jane",
                        "honorificPrefix": "Ms.",
                        "honorificSuffix": "III"
                    },
                    "displayName": "Babs Jensen",
                    "nickName": "Babs",
                    "profileUrl": "https://login.example.com/bjensen",
                    "personalInformation": {
                        "gender": "female",
                        "dateOfBirth": "07/03/1987",
                        "countryOfBirth": "NL",
                        "countryOfResidence": "UK",
                        "nationalities": ["Dutch", "British"],
                        "maritalStatus": "single",
                        "employer": "Backbase UK LTD.",
                        "employmentStatus": "FULL-TIME"
                    },
                    "identificationDetails": [{
                            "value": "111-22222-555",
                            "type": "National Insurance Number",
                            "issueCountryCode": "GB"
                        }, {
                            "value": "PAW413594164",
                            "type": "Passport",
                            "issueCountryCode": "NL",
                            "issueDate": "2011-11-11T00:00:00.000Z",
                            "expiryDate": "2021-11-11T00:00:00.000Z"
                        }],
                    "emails": [{
                            "value": "bjensen@example.com",
                            "type": "work",
                            "primary": true
                        }, {
                            "value": "babs@jensen.org",
                            "type": "home"
                        }],
                    "addresses": [{
                            "type": "work",
                            "streetAddress": "100 Universal City Plaza",
                            "locality": "Hollywood",
                            "region": "CA",
                            "postalCode": "91608",
                            "country": "USA",
                            "formatted": "100 Universal City Plaza\nHollywood, CA 91608 USA",
                            "primary": true
                        }, {
                            "type": "home",
                            "streetAddress": "456 Hollywood Blvd",
                            "locality": "Hollywood",
                            "region": "CA",
                            "postalCode": "91608",
                            "country": "USA",
                            "formatted": "456 Hollywood Blvd\nHollywood, CA 91608 USA"
                        }],
                    "phoneNumbers": [{
                            "value": "555-555-5555",
                            "type": "work"
                        }, {
                            "value": "555-555-4444",
                            "type": "mobile"
                        }],
                    "ims": [{
                            "value": "someaimhandle",
                            "type": "aim"
                        }],
                    "photos": [{
                            "value": "https://photos.example.com/profilephoto/72930000000Ccne/F",
                            "type": "photo"
                        }, {
                            "value": "https://photos.example.com/profilephoto/72930000000Ccne/T",
                            "type": "thumbnail"
                        }],
                    "userType": "Employee",
                    "title": "Tour Guide",
                    "preferredLanguage": "en-US",
                    "locale": "en-US",
                    "timezone": "America/Los_Angeles",
                    "active": true,
                    "x509Certificates": [{
                            "value": "MIIDQzCCAqygAwIBAgICEAAwDQYJKoZIhvcNAQEFBQAwTjELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFDASBgNVBAoMC2V4YW1wbGUuY29tMRQwEgYDVQQDDAtleGFtcGxlLmNvbTAeFw0xMTEwMjIwNjI0MzFaFw0xMjEwMDQwNjI0MzFaMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRQwEgYDVQQKDAtleGFtcGxlLmNvbTEhMB8GA1UEAwwYTXMuIEJhcmJhcmEgSiBKZW5zZW4gSUlJMSIwIAYJKoZIhvcNAQkBFhNiamVuc2VuQGV4YW1wbGUuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7Kr+Dcds/JQ5GwejJFcBIP682X3xpjis56AK02bc1FLgzdLI8auoR+cC9/Vrh5t66HkQIOdA4unHh0AaZ4xL5PhVbXIPMB5vAPKpzz5iPSi8xO8SL7I7SDhcBVJhqVqr3HgllEG6UClDdHO7nkLuwXq8HcISKkbT5WFTVfFZzidPl8HZ7DhXkZIRtJwBweq4bvm3hM1Os7UQH05ZS6cVDgweKNwdLLrT51ikSQG3DYrl+ft781UQRIqxgwqCfXEuDiinPh0kkvIi5jivVu1Z9QiwlYEdRbLJ4zJQBmDrSGTMYn4lRc2HgHO4DqB/bnMVorHB0CC6AV1QoFK4GPe1LwIDAQABo3sweTAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRlZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU8pD0U0vsZIsaA16lL8En8bx0F/gwHwYDVR0jBBgwFoAUdGeKitcaF7gnzsNwDx708kqaVt0wDQYJKoZIhvcNAQEFBQADgYEAA81SsFnOdYJtNg5Tcq+/ByEDrBgnusx0jloUhByPMEVkoMZ3J7j1ZgI8rAbOkNngX8+pKfTiDz1RC4+dx8oU6Za+4NJXUjlL5CvV6BEYb1+QAEJwitTVvxB/A67g42/vzgAtoRUeDov1+GFiBZ+GNF/cAYKcMtGcrs2i97ZkJMo="
                        }],
                    "extended": {
                        "my-custom-reference-id": "Banky-McBankFace"
                    }
                }
            },
            {
                status: 200,
                body: {
                    "profileUrl": "profileUrl",
                    "x509Certificates": [{
                            "additions": {
                                "key": "additions"
                            },
                            "display": "display",
                            "type": "type",
                            "value": "value",
                            "primary": true
                        }, {
                            "additions": {
                                "key": "additions"
                            },
                            "display": "display",
                            "type": "type",
                            "value": "value",
                            "primary": true
                        }],
                    "preferredLanguage": "preferredLanguage",
                    "addresses": [{
                            "country": "country",
                            "additions": {
                                "key": "additions"
                            },
                            "streetAddress": "streetAddress",
                            "formatted": "formatted",
                            "postalCode": "postalCode",
                            "locality": "locality",
                            "region": "region",
                            "type": "type",
                            "primary": true
                        }, {
                            "country": "country",
                            "additions": {
                                "key": "additions"
                            },
                            "streetAddress": "streetAddress",
                            "formatted": "formatted",
                            "postalCode": "postalCode",
                            "locality": "locality",
                            "region": "region",
                            "type": "type",
                            "primary": true
                        }],
                    "additions": {
                        "key": "additions"
                    },
                    "displayName": "displayName",
                    "nickName": "nickName",
                    "timezone": "timezone",
                    "personalInformation": {
                        "gender": "gender",
                        "additions": {
                            "key": "additions"
                        },
                        "countryOfBirth": "countryOfBirth",
                        "educationLevel": "educationLevel",
                        "employer": "employer",
                        "dateOfBirth": "dateOfBirth",
                        "nationalities": ["nationalities", "nationalities"],
                        "countryOfResidence": "countryOfResidence",
                        "employmentStatus": "employmentStatus",
                        "maritalStatus": "maritalStatus"
                    },
                    "externalId": "externalId",
                    "active": true,
                    "userName": "userName",
                    "title": "title",
                    "locale": "locale",
                    "userId": "userId",
                    "photos": [{
                            "additions": {
                                "key": "additions"
                            },
                            "display": "display",
                            "type": "type",
                            "value": "value",
                            "primary": true
                        }, {
                            "additions": {
                                "key": "additions"
                            },
                            "display": "display",
                            "type": "type",
                            "value": "value",
                            "primary": true
                        }],
                    "phoneNumbers": [{
                            "additions": {
                                "key": "additions"
                            },
                            "display": "display",
                            "type": "type",
                            "value": "value",
                            "primary": true
                        }, {
                            "additions": {
                                "key": "additions"
                            },
                            "display": "display",
                            "type": "type",
                            "value": "value",
                            "primary": true
                        }],
                    "ims": [{
                            "additions": {
                                "key": "additions"
                            },
                            "display": "display",
                            "type": "type",
                            "value": "value",
                            "primary": true
                        }, {
                            "additions": {
                                "key": "additions"
                            },
                            "display": "display",
                            "type": "type",
                            "value": "value",
                            "primary": true
                        }],
                    "extended": {
                        "key": "{}"
                    },
                    "emails": [{
                            "additions": {
                                "key": "additions"
                            },
                            "display": "display",
                            "type": "type",
                            "value": "value",
                            "primary": true
                        }, {
                            "additions": {
                                "key": "additions"
                            },
                            "display": "display",
                            "type": "type",
                            "value": "value",
                            "primary": true
                        }],
                    "identificationDetails": [{
                            "expiryDate": "2000-01-23",
                            "additions": {
                                "key": "additions"
                            },
                            "issueCountryCode": "issueCountryCode",
                            "type": "type",
                            "issueDate": "2000-01-23",
                            "value": "value"
                        }, {
                            "expiryDate": "2000-01-23",
                            "additions": {
                                "key": "additions"
                            },
                            "issueCountryCode": "issueCountryCode",
                            "type": "type",
                            "issueDate": "2000-01-23",
                            "value": "value"
                        }],
                    "name": {
                        "honorificSuffix": "honorificSuffix",
                        "additions": {
                            "key": "additions"
                        },
                        "formatted": "formatted",
                        "familyName": "familyName",
                        "givenName": "givenName",
                        "honorificPrefix": "honorificPrefix",
                        "middleName": "middleName"
                    },
                    "id": "id",
                    "userType": "userType"
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/user-profile/{userId}",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "id": "0628465a-483b-44ef-9dbc-927d619de766",
                    "userId": "2819c223-7f76-453a-919d-413861904646",
                    "externalId": "701984",
                    "userName": "bjensen@example.com",
                    "name": {
                        "formatted": "Ms. Barbara J Jensen, III",
                        "familyName": "Jensen",
                        "givenName": "Barbara",
                        "middleName": "Jane",
                        "honorificPrefix": "Ms.",
                        "honorificSuffix": "III"
                    },
                    "displayName": "Babs Jensen",
                    "nickName": "Babs",
                    "profileUrl": "https://login.example.com/bjensen",
                    "personalInformation": {
                        "gender": "female",
                        "dateOfBirth": "07/03/1987",
                        "countryOfBirth": "NL",
                        "countryOfResidence": "UK",
                        "nationalities": ["Dutch", "British"],
                        "maritalStatus": "single",
                        "employer": "Backbase UK LTD.",
                        "employmentStatus": "FULL-TIME"
                    },
                    "identificationDetails": [{
                            "value": "111-22222-555",
                            "type": "National Insurance Number",
                            "issueCountryCode": "GB"
                        }, {
                            "value": "PAW413594164",
                            "type": "Passport",
                            "issueCountryCode": "NL",
                            "issueDate": "2011-11-11T00:00:00.000Z",
                            "expiryDate": "2021-11-11T00:00:00.000Z"
                        }],
                    "emails": [{
                            "value": "bjensen@example.com",
                            "type": "work",
                            "primary": true
                        }, {
                            "value": "babs@jensen.org",
                            "type": "home"
                        }],
                    "addresses": [{
                            "type": "work",
                            "streetAddress": "100 Universal City Plaza",
                            "locality": "Hollywood",
                            "region": "CA",
                            "postalCode": "91608",
                            "country": "USA",
                            "formatted": "100 Universal City Plaza\nHollywood, CA 91608 USA",
                            "primary": true
                        }, {
                            "type": "home",
                            "streetAddress": "456 Hollywood Blvd",
                            "locality": "Hollywood",
                            "region": "CA",
                            "postalCode": "91608",
                            "country": "USA",
                            "formatted": "456 Hollywood Blvd\nHollywood, CA 91608 USA"
                        }],
                    "phoneNumbers": [{
                            "value": "555-555-5555",
                            "type": "work"
                        }, {
                            "value": "555-555-4444",
                            "type": "mobile"
                        }],
                    "ims": [{
                            "value": "someaimhandle",
                            "type": "aim"
                        }],
                    "photos": [{
                            "value": "https://photos.example.com/profilephoto/72930000000Ccne/F",
                            "type": "photo"
                        }, {
                            "value": "https://photos.example.com/profilephoto/72930000000Ccne/T",
                            "type": "thumbnail"
                        }],
                    "userType": "Employee",
                    "title": "Tour Guide",
                    "preferredLanguage": "en-US",
                    "locale": "en-US",
                    "timezone": "America/Los_Angeles",
                    "active": true,
                    "x509Certificates": [{
                            "value": "MIIDQzCCAqygAwIBAgICEAAwDQYJKoZIhvcNAQEFBQAwTjELMAkGA1UEBhMCVVMxEzARBgNVBAgMCkNhbGlmb3JuaWExFDASBgNVBAoMC2V4YW1wbGUuY29tMRQwEgYDVQQDDAtleGFtcGxlLmNvbTAeFw0xMTEwMjIwNjI0MzFaFw0xMjEwMDQwNjI0MzFaMH8xCzAJBgNVBAYTAlVTMRMwEQYDVQQIDApDYWxpZm9ybmlhMRQwEgYDVQQKDAtleGFtcGxlLmNvbTEhMB8GA1UEAwwYTXMuIEJhcmJhcmEgSiBKZW5zZW4gSUlJMSIwIAYJKoZIhvcNAQkBFhNiamVuc2VuQGV4YW1wbGUuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA7Kr+Dcds/JQ5GwejJFcBIP682X3xpjis56AK02bc1FLgzdLI8auoR+cC9/Vrh5t66HkQIOdA4unHh0AaZ4xL5PhVbXIPMB5vAPKpzz5iPSi8xO8SL7I7SDhcBVJhqVqr3HgllEG6UClDdHO7nkLuwXq8HcISKkbT5WFTVfFZzidPl8HZ7DhXkZIRtJwBweq4bvm3hM1Os7UQH05ZS6cVDgweKNwdLLrT51ikSQG3DYrl+ft781UQRIqxgwqCfXEuDiinPh0kkvIi5jivVu1Z9QiwlYEdRbLJ4zJQBmDrSGTMYn4lRc2HgHO4DqB/bnMVorHB0CC6AV1QoFK4GPe1LwIDAQABo3sweTAJBgNVHRMEAjAAMCwGCWCGSAGG+EIBDQQfFh1PcGVuU1NMIEdlbmVyYXRlZCBDZXJ0aWZpY2F0ZTAdBgNVHQ4EFgQU8pD0U0vsZIsaA16lL8En8bx0F/gwHwYDVR0jBBgwFoAUdGeKitcaF7gnzsNwDx708kqaVt0wDQYJKoZIhvcNAQEFBQADgYEAA81SsFnOdYJtNg5Tcq+/ByEDrBgnusx0jloUhByPMEVkoMZ3J7j1ZgI8rAbOkNngX8+pKfTiDz1RC4+dx8oU6Za+4NJXUjlL5CvV6BEYb1+QAEJwitTVvxB/A67g42/vzgAtoRUeDov1+GFiBZ+GNF/cAYKcMtGcrs2i97ZkJMo="
                        }],
                    "extended": {
                        "my-custom-reference-id": "Banky-McBankFace"
                    }
                }
            },
            {
                status: 200,
                body: {
                    "profileUrl": "profileUrl",
                    "x509Certificates": [{
                            "additions": {
                                "key": "additions"
                            },
                            "display": "display",
                            "type": "type",
                            "value": "value",
                            "primary": true
                        }, {
                            "additions": {
                                "key": "additions"
                            },
                            "display": "display",
                            "type": "type",
                            "value": "value",
                            "primary": true
                        }],
                    "preferredLanguage": "preferredLanguage",
                    "addresses": [{
                            "country": "country",
                            "additions": {
                                "key": "additions"
                            },
                            "streetAddress": "streetAddress",
                            "formatted": "formatted",
                            "postalCode": "postalCode",
                            "locality": "locality",
                            "region": "region",
                            "type": "type",
                            "primary": true
                        }, {
                            "country": "country",
                            "additions": {
                                "key": "additions"
                            },
                            "streetAddress": "streetAddress",
                            "formatted": "formatted",
                            "postalCode": "postalCode",
                            "locality": "locality",
                            "region": "region",
                            "type": "type",
                            "primary": true
                        }],
                    "additions": {
                        "key": "additions"
                    },
                    "displayName": "displayName",
                    "nickName": "nickName",
                    "timezone": "timezone",
                    "personalInformation": {
                        "gender": "gender",
                        "additions": {
                            "key": "additions"
                        },
                        "countryOfBirth": "countryOfBirth",
                        "educationLevel": "educationLevel",
                        "employer": "employer",
                        "dateOfBirth": "dateOfBirth",
                        "nationalities": ["nationalities", "nationalities"],
                        "countryOfResidence": "countryOfResidence",
                        "employmentStatus": "employmentStatus",
                        "maritalStatus": "maritalStatus"
                    },
                    "externalId": "externalId",
                    "active": true,
                    "userName": "userName",
                    "title": "title",
                    "locale": "locale",
                    "userId": "userId",
                    "photos": [{
                            "additions": {
                                "key": "additions"
                            },
                            "display": "display",
                            "type": "type",
                            "value": "value",
                            "primary": true
                        }, {
                            "additions": {
                                "key": "additions"
                            },
                            "display": "display",
                            "type": "type",
                            "value": "value",
                            "primary": true
                        }],
                    "phoneNumbers": [{
                            "additions": {
                                "key": "additions"
                            },
                            "display": "display",
                            "type": "type",
                            "value": "value",
                            "primary": true
                        }, {
                            "additions": {
                                "key": "additions"
                            },
                            "display": "display",
                            "type": "type",
                            "value": "value",
                            "primary": true
                        }],
                    "ims": [{
                            "additions": {
                                "key": "additions"
                            },
                            "display": "display",
                            "type": "type",
                            "value": "value",
                            "primary": true
                        }, {
                            "additions": {
                                "key": "additions"
                            },
                            "display": "display",
                            "type": "type",
                            "value": "value",
                            "primary": true
                        }],
                    "extended": {
                        "key": "{}"
                    },
                    "emails": [{
                            "additions": {
                                "key": "additions"
                            },
                            "display": "display",
                            "type": "type",
                            "value": "value",
                            "primary": true
                        }, {
                            "additions": {
                                "key": "additions"
                            },
                            "display": "display",
                            "type": "type",
                            "value": "value",
                            "primary": true
                        }],
                    "identificationDetails": [{
                            "expiryDate": "2000-01-23",
                            "additions": {
                                "key": "additions"
                            },
                            "issueCountryCode": "issueCountryCode",
                            "type": "type",
                            "issueDate": "2000-01-23",
                            "value": "value"
                        }, {
                            "expiryDate": "2000-01-23",
                            "additions": {
                                "key": "additions"
                            },
                            "issueCountryCode": "issueCountryCode",
                            "type": "type",
                            "issueDate": "2000-01-23",
                            "value": "value"
                        }],
                    "name": {
                        "honorificSuffix": "honorificSuffix",
                        "additions": {
                            "key": "additions"
                        },
                        "formatted": "formatted",
                        "familyName": "familyName",
                        "givenName": "givenName",
                        "honorificPrefix": "honorificPrefix",
                        "middleName": "middleName"
                    },
                    "id": "id",
                    "userType": "userType"
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 409,
                body: {
                    "message": "Conflict error",
                    "errors": [{
                            "message": "The request could not be completed due to a conflict with the current state of the resource.",
                            "key": "transactions.api.billingstatus.transaction",
                            "context": {
                                "billingStatus": "BILLED"
                            }
                        }]
                }
            },
        ]
    },
]);

export { COLLECTION_FORMATS, CONFIG_TOKEN, USER_PROFILE_BASE_PATH, UserProfileApiModule, UserProfileConfiguration, UserProfileManagementService, UserProfileManagementServiceCreateUserProfileMocksProvider, UserProfileManagementServiceDeleteUserProfileMocksProvider, UserProfileManagementServiceGetUserProfileMocksProvider, UserProfileManagementServiceMocksProvider, UserProfileManagementServiceReplaceUserProfileMocksProvider };
//# sourceMappingURL=backbase-user-profile-http-ang.js.map
