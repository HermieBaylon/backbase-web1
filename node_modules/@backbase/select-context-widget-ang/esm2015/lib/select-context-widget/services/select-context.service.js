import { Injectable } from '@angular/core';
import { UserContextHttpService, ServiceAgreementHttpService, } from '@backbase/data-ang/accesscontrol';
import { BehaviorSubject, of, combineLatest } from 'rxjs';
import { switchMap, catchError, map, tap, scan } from 'rxjs/operators';
import { parseError } from '../select-context-error';
import { SelectContextWidgetPropertiesService } from './select-context-widget-properties.service';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/data-ang/accesscontrol";
import * as i2 from "./select-context-widget-properties.service";
const initialParams = {
    from: 0,
    size: 7,
};
export class SelectContextService {
    constructor(userContextService, serviceAgreementService, widgetPropertiesService) {
        this.userContextService = userContextService;
        this.serviceAgreementService = serviceAgreementService;
        this.widgetPropertiesService = widgetPropertiesService;
        this.params = new BehaviorSubject(initialParams);
        this.loading = new BehaviorSubject(true);
        this.error = new BehaviorSubject(undefined);
        this.serviceAgreements = combineLatest([
            this.params,
            this.widgetPropertiesService.properties,
        ]).pipe(map(([params, { pageSize }]) => (Object.assign(Object.assign({}, params), { size: pageSize }))), tap(() => this.loading.next(true)), switchMap((params) => this.loadServiceAgreements(params)), scan((acc, curr) => this.mergeResults(acc, curr)), catchError((error) => {
            this.error.next(error);
            return of({ items: [], totalCount: 0, params: this.params.value });
        }), tap(() => this.loading.next(false)));
        this.currentContext = this.serviceAgreementService
            .getServiceAgreementContext()
            .pipe(catchError(() => of(undefined)));
    }
    loadServiceAgreements(params) {
        return this.userContextService.getUserContextServiceAgreements(params, 'response').pipe(map((response) => {
            const items = response.body || [];
            return {
                items,
                totalCount: parseInt(response.headers.get('x-total-count') || '0', 10) || items.length,
                params,
            };
        }), catchError((error) => {
            throw parseError(error);
        }));
    }
    mergeResults(acc, curr) {
        return {
            totalCount: curr.totalCount || curr.items.length,
            items: curr.params.from === 0 ? curr.items : [...acc.items, ...curr.items],
            params: curr.params,
        };
    }
    search(query) {
        this.params.next(Object.assign({ from: 0, size: this.params.value.size }, (query ? { query } : {})));
    }
    loadMore() {
        this.params.next(Object.assign(Object.assign({}, this.params.value), { from: (this.params.value.from || 0) + 1 }));
    }
    select(serviceAgreement) {
        return this.userContextService.postUserContext({
            userContextPOST: {
                serviceAgreementId: serviceAgreement.id,
            },
        });
    }
}
/** @nocollapse */ SelectContextService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectContextService, deps: [{ token: i1.UserContextHttpService }, { token: i1.ServiceAgreementHttpService }, { token: i2.SelectContextWidgetPropertiesService }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ SelectContextService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectContextService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectContextService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.UserContextHttpService }, { type: i1.ServiceAgreementHttpService }, { type: i2.SelectContextWidgetPropertiesService }]; } });
//# sourceMappingURL=select-context.service.js.map