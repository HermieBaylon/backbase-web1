import { Injectable, Optional } from '@angular/core';
import { ItemModel } from '@backbase/foundation-ang/core';
import { combineLatest, BehaviorSubject, of } from 'rxjs';
import { map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/foundation-ang/core";
export const WidgetProperty = {
    PAGE_SIZE: 'pageSize',
    INCLUDE_CURRENT_CONTEXT: 'includeCurrentContext',
    SHOW_SEARCH_AFTER: 'showSearchAfter',
    REDIRECT_PAGE: 'selectContextRedirectPage',
    BACK_OUTPUT: 'output.back',
};
export class SelectContextWidgetPropertiesService {
    constructor(itemModel) {
        var _a, _b, _c, _d, _e;
        this.itemModel = itemModel;
        this.pageSizeSubject$ = new BehaviorSubject(undefined);
        this.includeCurrentContextSubject$ = new BehaviorSubject(undefined);
        this.showSearchAfterSubject$ = new BehaviorSubject(undefined);
        this.selectContextRedirectPageSubject$ = new BehaviorSubject(undefined);
        this.backOutputSubject$ = new BehaviorSubject(undefined);
        this.pageSize = ((_a = this.itemModel) === null || _a === void 0 ? void 0 : _a.property(WidgetProperty.PAGE_SIZE, '7').pipe(map(propertyValue => parseInt(propertyValue, 10)))) || of(7);
        this.includeCurrentContext = ((_b = this.itemModel) === null || _b === void 0 ? void 0 : _b.property(WidgetProperty.INCLUDE_CURRENT_CONTEXT, 'false').pipe(map(propertyValue => `${propertyValue}` === 'true'))) || of(false);
        this.showSearchAfter = ((_c = this.itemModel) === null || _c === void 0 ? void 0 : _c.property(WidgetProperty.SHOW_SEARCH_AFTER, '7').pipe(map(propertyValue => parseInt(propertyValue, 10)))) || of(7);
        this.selectContextRedirectPage = ((_d = this.itemModel) === null || _d === void 0 ? void 0 : _d.property(WidgetProperty.REDIRECT_PAGE, '')) || of('');
        this.backOutput = ((_e = this.itemModel) === null || _e === void 0 ? void 0 : _e.property(WidgetProperty.BACK_OUTPUT, '')) || of('');
        this.pageSize$ = this.getProperty(this.pageSizeSubject$, this.pageSize).pipe(map(Number));
        this.includeCurrentContext$ = this.getProperty(this.includeCurrentContextSubject$, this.includeCurrentContext).pipe(map(this.toBoolean));
        this.showSearchAfter$ = this.getProperty(this.showSearchAfterSubject$, this.showSearchAfter).pipe(map(Number));
        this.selectContextRedirectPage$ = this.getProperty(this.selectContextRedirectPageSubject$, this.selectContextRedirectPage);
        this.backOutput$ = this.getProperty(this.backOutputSubject$, this.backOutput);
        this.properties = combineLatest([
            this.pageSize$,
            this.includeCurrentContext$,
            this.showSearchAfter$,
            this.selectContextRedirectPage$,
            this.backOutput$,
        ]).pipe(map(([pageSize, includeCurrentContext, showSearchAfter, selectContextRedirectPage, backOutput]) => ({
            pageSize,
            includeCurrentContext,
            showSearchAfter,
            selectContextRedirectPage,
            backOutput,
        })));
    }
    getProperty(input$, itemModel) {
        return combineLatest([input$, itemModel]).pipe(map(([value, valueIM]) => (value === undefined ? valueIM : value)));
    }
    toBoolean(value) {
        return value === 'true' || value === true;
    }
    setPageSize(value) {
        this.pageSizeSubject$.next(value);
    }
    setIncludeCurrentContext(value) {
        this.includeCurrentContextSubject$.next(value);
    }
    setShowSearchAfter(value) {
        this.showSearchAfterSubject$.next(value);
    }
    setSelectContextRedirectPage(value) {
        this.selectContextRedirectPageSubject$.next(value);
    }
    setBackOutput(value) {
        this.backOutputSubject$.next(value);
    }
}
/** @nocollapse */ SelectContextWidgetPropertiesService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectContextWidgetPropertiesService, deps: [{ token: i1.ItemModel, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ SelectContextWidgetPropertiesService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectContextWidgetPropertiesService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectContextWidgetPropertiesService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.ItemModel, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=select-context-widget-properties.service.js.map