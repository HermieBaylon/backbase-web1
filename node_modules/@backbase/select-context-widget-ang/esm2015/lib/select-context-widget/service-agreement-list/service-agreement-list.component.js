import { Component, Input, Output, EventEmitter, Directive } from '@angular/core';
import { BbTemplate } from '@backbase/foundation-ang/core';
import * as i0 from "@angular/core";
import * as i1 from "../service-agreement-item/service-agreement-item.component";
import * as i2 from "@backbase/ui-ang/loading-indicator";
import * as i3 from "@angular/common";
export class ServiceAgreementListComponent {
    constructor() {
        this.hostRef = this;
        this.serviceAgreements = [];
        this.loading = false;
        this.searchValue = '';
        this.totalCount = 0;
        this.from = 0;
        this.loadMore = new EventEmitter();
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.select = new EventEmitter();
    }
    onLoadMore() {
        this.loadMore.emit();
    }
    onSelect(serviceAgreement) {
        this.select.emit(serviceAgreement);
    }
}
/** @nocollapse */ ServiceAgreementListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ServiceAgreementListComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ ServiceAgreementListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ServiceAgreementListComponent, selector: "bb-service-agreement-list", inputs: { serviceAgreements: "serviceAgreements", currentContext: "currentContext", loading: "loading", searchValue: "searchValue", totalCount: "totalCount", from: "from" }, outputs: { loadMore: "loadMore", select: "select" }, ngImport: i0, template: "<ng-container\n  bbSelectContextServiceAgreementListCustomizable\n  [bbHostRef]=\"hostRef\"\n  [bbTemplateContext]=\"{\n    serviceAgreements: serviceAgreements,\n    currentContext: currentContext,\n    loading: loading,\n    searchValue: searchValue,\n    totalCount: totalCount,\n    from: from\n  }\">\n</ng-container>\n\n<ng-template\n  bbSelectContextServiceAgreementListCustomizable\n  let-hostRef\n  let-serviceAgreements=\"context.serviceAgreements\"\n  let-currentContext=\"context.currentContext\"\n  let-loading=\"context.loading\"\n  let-searchValue=\"context.searchValue\"\n  let-totalCount=\"context.totalCount\"\n  let-from=\"context.from\">\n  <ng-container *ngIf=\"currentContext && !searchValue\">\n    <div\n      data-role=\"current-context-label\"\n      class=\"bb-select-context__subheader\"\n      i18n=\"Current context|Current context label@@select-context.label.currentContext\">\n      Current context\n    </div>\n    <div class=\"list-group list-group-flush\">\n      <div\n        role=\"button\"\n        data-role=\"current-context-data\"\n        tabindex=\"0\"\n        (click)=\"hostRef.onSelect(currentContext)\"\n        (keyup.enter)=\"hostRef.onSelect(currentContext)\"\n        class=\"bb-select-context__current-context list-group-item list-group-item-action\">\n        <bb-service-agreement-item [item]=\"currentContext\"></bb-service-agreement-item>\n      </div>\n    </div>\n\n    <div\n      class=\"bb-select-context__subheader\"\n      data-role=\"switch-context-label\"\n      i18n=\"Switch to context|Switch to context label@@select-context.label.switchToContext\">\n      Switch to context\n    </div>\n  </ng-container>\n\n  <div class=\"bb-select-context__subheader\" *ngIf=\"searchValue && totalCount > 0\">\n    <span i18n=\"Results found|Results found label@@select-context.label.resultsFound\">\n      {totalCount, plural, =1 {1 result found} other {{{totalCount}} results found}}\n    </span>\n  </div>\n\n  <div class=\"list-group list-group-flush\">\n    <div\n      *ngFor=\"let item of serviceAgreements; let first = first; let last = last\"\n      role=\"button\"\n      tabindex=\"0\"\n      [attr.data-role]=\"'service-agreement-list-item-' + item.name\"\n      (click)=\"hostRef.onSelect(item)\"\n      (keyup.enter)=\"hostRef.onSelect(item)\"\n      [class.first]=\"first\"\n      [class.last]=\"last\"\n      class=\"list-group-item list-group-item-action bb-select-context__item\">\n      <bb-service-agreement-item [item]=\"item\"></bb-service-agreement-item>\n    </div>\n  </div>\n\n  <div [class.invisible]=\"!loading\" *ngIf=\"serviceAgreements.length !== totalCount\">\n    <bb-loading-indicator-ui loaderSize=\"sm\"></bb-loading-indicator-ui>\n  </div>\n\n  <div class=\"bb-select-context__items-loaded-label\" *ngIf=\"from > 0 && serviceAgreements.length === totalCount\">\n    <span *ngIf=\"!searchValue\" i18n=\"All items loaded|All items loaded label@@select-context.label.allItemsLoaded\">\n      All items are loaded\n    </span>\n    <span *ngIf=\"searchValue\" i18n=\"All items loaded|All items loaded label@@select-context.label.allResultsLoaded\">\n      All results are loaded\n    </span>\n  </div>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i1.ServiceAgreementItemComponent; }), selector: "bb-service-agreement-item", inputs: ["item"] }, { type: i0.forwardRef(function () { return i2.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }], directives: [{ type: i0.forwardRef(function () { return SelectContextServiceAgreementListCustomizableDirective; }), selector: "[bbSelectContextServiceAgreementListCustomizable]" }, { type: i0.forwardRef(function () { return i3.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i3.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ServiceAgreementListComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-service-agreement-list',
                    templateUrl: './service-agreement-list.component.html',
                }]
        }], propDecorators: { serviceAgreements: [{
                type: Input
            }], currentContext: [{
                type: Input
            }], loading: [{
                type: Input
            }], searchValue: [{
                type: Input
            }], totalCount: [{
                type: Input
            }], from: [{
                type: Input
            }], loadMore: [{
                type: Output
            }], select: [{
                type: Output
            }] } });
export class SelectContextServiceAgreementListCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ SelectContextServiceAgreementListCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectContextServiceAgreementListCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ SelectContextServiceAgreementListCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: SelectContextServiceAgreementListCustomizableDirective, selector: "[bbSelectContextServiceAgreementListCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectContextServiceAgreementListCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbSelectContextServiceAgreementListCustomizable]',
                }]
        }] });
//# sourceMappingURL=service-agreement-list.component.js.map