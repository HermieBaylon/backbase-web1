import { Component, Directive, InjectionToken, Inject, EventEmitter, Output, Optional, } from '@angular/core';
import { Router } from '@angular/router';
import { BbTemplate, DeprecationsService, FeaturesService } from '@backbase/foundation-ang/core';
import { of, BehaviorSubject, Subject } from 'rxjs';
import { switchMap, shareReplay, tap, map, take, takeUntil } from 'rxjs/operators';
import { LOGOUT, PAGE_CONFIG } from '@backbase/foundation-ang/web-sdk';
import { SelectContextService } from '../services/select-context.service';
import { SelectContextWidgetPropertiesService, } from '../services/select-context-widget-properties.service';
import { SELECT_CONTEXT_URL_PROCESSOR_SERVICE_TOKEN, } from '../services/default-select-context-redirect.service';
import * as i0 from "@angular/core";
import * as i1 from "../services/select-context.service";
import * as i2 from "../services/select-context-widget-properties.service";
import * as i3 from "@angular/router";
import * as i4 from "@backbase/foundation-ang/core";
import * as i5 from "@backbase/ui-ang/header";
import * as i6 from "@backbase/ui-ang/alert";
import * as i7 from "@backbase/ui-ang/search-box";
import * as i8 from "@backbase/ui-ang/infinite-scroll";
import * as i9 from "../service-agreement-list/service-agreement-list.component";
import * as i10 from "@backbase/ui-ang/loading-indicator";
import * as i11 from "../select-context-error/select-context-error.component";
import * as i12 from "@backbase/ui-ang/empty-state";
import * as i13 from "@angular/common";
import * as i14 from "@backbase/ui-ang/button";
export const WINDOW = new InjectionToken('Select Context :: WindowToken');
export const SELECT_CONTEXT_INNER_CONTAINER = {
    name: 'SELECT_CONTEXT_INNER_CONTAINER',
    description: 'Include a card container in the select context widget template',
};
export class SelectContextContainerComponent {
    constructor(service, widgetPropertiesService, router, localWindow, redirectUrlService, pageConfig, logoutService, featuresService, deprecationsService) {
        this.service = service;
        this.widgetPropertiesService = widgetPropertiesService;
        this.router = router;
        this.localWindow = localWindow;
        this.redirectUrlService = redirectUrlService;
        this.pageConfig = pageConfig;
        this.logoutService = logoutService;
        this.featuresService = featuresService;
        this.deprecationsService = deprecationsService;
        this.back = new EventEmitter();
        this.loadingChanged = new EventEmitter();
        this.destroy$ = new Subject();
        this.hostRef = this;
        this.serviceAgreements = this.service.serviceAgreements.pipe(tap((data) => this.selectFirstIfOnlyOne(data)));
        this.loading = this.service.loading;
        this.error = this.service.error;
        this.params = this.service.params;
        this.widgetProperties = this.widgetPropertiesService.properties;
        this.currentContext = this.widgetProperties.pipe(switchMap(({ includeCurrentContext }) => {
            if (includeCurrentContext) {
                return this.service.currentContext;
            }
            return of(undefined);
        }), shareReplay(1));
        this.searchValue = '';
        this.saving = new BehaviorSubject(false);
        this.savingError = false;
        this.loading.pipe(takeUntil(this.destroy$)).subscribe((event) => {
            this.loadingChanged.emit(event);
        });
    }
    get hasContainer() {
        return this.featuresService.isEnabled(SELECT_CONTEXT_INNER_CONTAINER);
    }
    search(text) {
        this.searchValue = text;
        this.service.search(text);
    }
    loadMore() {
        this.service.loadMore();
    }
    select(serviceAgreement) {
        this.savingError = false;
        this.saving.next(true);
        this.loadingChanged.emit(true);
        this.service
            .select(serviceAgreement)
            .pipe(switchMap(() => this.widgetProperties), map(({ selectContextRedirectPage }) => selectContextRedirectPage), take(1))
            .subscribe((selectContextRedirectPage) => this.afterSelectContextSuccess(serviceAgreement, selectContextRedirectPage), () => {
            /* error */
            this.savingError = true;
            this.saving.next(false);
        });
    }
    goBack() {
        this.logoutService
            .logout()
            .catch(() => { })
            .then(() => {
            this.back.emit();
        });
    }
    selectFirstIfOnlyOne(result) {
        if (result.totalCount === 1 && result.params.from === 0 && !result.params.query) {
            this.select(result.items[0]);
        }
    }
    redirectToUrl(serviceAgreement, url, spaMode) {
        this.redirectUrlService
            .processUrl(serviceAgreement, url, spaMode)
            .pipe(tap(processedUrl => {
            const bbWindow = this.localWindow;
            const currentUrl = bbWindow.location.pathname;
            const [newUrl] = processedUrl.replace(bbWindow.location.origin, '').split('#');
            bbWindow.location.href = processedUrl;
            if (currentUrl === newUrl) {
                bbWindow.location.reload(true);
            }
        }), take(1))
            .subscribe();
    }
    afterSelectContextSuccess(serviceAgreement, urlModel = '') {
        const spaMode = urlModel.substring(0, 4);
        const urlToNavigate = urlModel.substring(4);
        const bbWindow = this.localWindow;
        switch (spaMode) {
            case 'spa:':
                if (bbWindow.reloadPage) {
                    bbWindow.reloadPage().then(() => {
                        this.redirectUrlService
                            .processUrl(serviceAgreement, urlToNavigate, spaMode)
                            .pipe(tap(url => this.router.navigateByUrl(url)), take(1))
                            .subscribe();
                    });
                }
                else {
                    throw new Error('window.reloadPage() not available. SPA navigation is not supported');
                }
                break;
            case 'mpa:':
                const gatewayRoot = this.pageConfig.linkRoot || '';
                const portalName = this.pageConfig.portalName || '';
                const mpaUrl = `${gatewayRoot}${portalName ? '/' + portalName : ''}/${urlToNavigate}`.replace(/\/{2,}/g, '/');
                this.redirectToUrl(serviceAgreement, mpaUrl, spaMode);
                break;
            case 'abs:':
                const linkRoot = this.pageConfig.linkRoot || '';
                const absUrl = `${linkRoot}/${urlToNavigate}`.replace(/\/{2,}/g, '/');
                this.redirectToUrl(serviceAgreement, absUrl, spaMode);
                break;
        }
    }
    ngOnInit() {
        if (!this.hasContainer) {
            this.deprecationsService.logDeprecatedFeature('Select context widget will include card container in its template in the next major release. Please enable `SELECT_CONTEXT_INNER_CONTAINER` and adjust your page to support this change.');
        }
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
}
/** @nocollapse */ SelectContextContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectContextContainerComponent, deps: [{ token: i1.SelectContextService }, { token: i2.SelectContextWidgetPropertiesService }, { token: i3.Router }, { token: WINDOW }, { token: SELECT_CONTEXT_URL_PROCESSOR_SERVICE_TOKEN }, { token: PAGE_CONFIG, optional: true }, { token: LOGOUT }, { token: i4.FeaturesService }, { token: i4.DeprecationsService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ SelectContextContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: SelectContextContainerComponent, selector: "bb-select-context-container", outputs: { back: "back", loadingChanged: "loadingChanged" }, ngImport: i0, template: "<ng-container\n  bbSelectContextContainerCustomizable\n  [bbHostRef]=\"hostRef\"\n  [bbTemplateContext]=\"{\n    serviceAgreements: serviceAgreements | async,\n    loading: loading | async,\n    error: error | async,\n    params: params | async,\n    widgetProperties: widgetProperties | async,\n    currentContext: currentContext | async,\n    saving: saving | async\n  }\">\n</ng-container>\n\n<ng-template\n  bbSelectContextContainerCustomizable\n  let-hostRef\n  let-serviceAgreements=\"context.serviceAgreements\"\n  let-loading=\"context.loading\"\n  let-error=\"context.error\"\n  let-params=\"context.params\"\n  let-widgetProperties=\"context.widgetProperties\"\n  let-currentContext=\"context.currentContext\"\n  let-saving=\"context.saving\">\n  <div class=\"bb-select-context\">\n    <ng-container *ngIf=\"serviceAgreements; else loadingTemplate\">\n      <ng-container *ngIf=\"!saving; else savingTemplate\">\n        <div class=\"bb-select-context__container\" [ngClass]=\"{ 'card card-body': hostRef.hasContainer }\">\n          <bb-header-ui\n            class=\"bb-block bb-block--md\"\n            headingType=\"h2\"\n            heading=\"Select context\"\n            data-role=\"select-context-header\"\n            i18n-heading=\"Select context|Select context label@@select-context.label.selectContext\"></bb-header-ui>\n\n          <bb-alert-ui\n            *ngIf=\"hostRef.savingError\"\n            title=\"Unknown error\"\n            i18n-title=\"Unknown Error|Unknown Error Label@@select-context.label.error.unknown\"\n            message=\"Try to make action again or contact your system administrator.\"\n            i18n-message=\"Try again|Try again error message@@select-context.label.error.tryAgain\"></bb-alert-ui>\n\n          <ng-container *ngIf=\"hostRef.searchValue || serviceAgreements.totalCount > widgetProperties.showSearchAfter\">\n            <bb-search-box-ui\n              class=\"bb-block bb-block--lg\"\n              searchLabel=\"Search button\"\n              i18n-searchLabel=\"Search button|Search button@@select-context.label.searchLabel\"\n              [showClear]=\"true\"\n              [showSearch]=\"true\"\n              placeholder=\"Search\"\n              i18n-placeholder=\"Search|Search placeholder@@select-context.label.search\"\n              aria-label=\"Search service agreements\"\n              i18n-aria-label=\"Search service agreements|Search service agreements@@select-context.aria-label.search\"\n              data-role=\"Search\"\n              (submit)=\"hostRef.search($event)\"\n              (clear)=\"hostRef.search('')\"></bb-search-box-ui>\n          </ng-container>\n\n          <ng-container *ngIf=\"!error; else errorTemplate\">\n            <ng-container *ngIf=\"!(loading && params.from === 0); else loadingIndicatorTemplate\">\n              <ng-container *ngIf=\"serviceAgreements.items.length > 0; else emptyTemplate\">\n                <bb-infinite-scroll-ui\n                  class=\"bb-infinite-scroll\"\n                  [offset]=\"5\"\n                  [disableScrollEnd]=\"loading || serviceAgreements.items.length === serviceAgreements.totalCount\"\n                  (scrollEnd)=\"loadMore()\">\n                  <bb-service-agreement-list\n                    [serviceAgreements]=\"serviceAgreements.items\"\n                    [loading]=\"loading\"\n                    [currentContext]=\"currentContext\"\n                    [searchValue]=\"hostRef.searchValue\"\n                    [totalCount]=\"serviceAgreements.totalCount\"\n                    [from]=\"params.from\"\n                    (loadMore)=\"hostRef.loadMore()\"\n                    (select)=\"hostRef.select($event)\"></bb-service-agreement-list>\n                </bb-infinite-scroll-ui>\n              </ng-container>\n            </ng-container>\n          </ng-container>\n\n          <ng-container *ngIf=\"widgetProperties.backOutput\">\n            <div class=\"bb-block bb-block--lg\"></div>\n            <div class=\"d-block\">\n              <div class=\"bb-button-bar bb-button-bar--reverse\">\n                <button\n                  bbButton\n                  (click)=\"hostRef.goBack()\"\n                  color=\"secondary\"\n                  class=\"bb-button-bar__button\"\n                  data-role=\"select-context-back-button\">\n                  <span i18n=\"Back button|Button to navigate back@@select-context.label.backButton\"> Back </span>\n                </button>\n              </div>\n            </div>\n          </ng-container>\n        </div>\n      </ng-container>\n    </ng-container>\n  </div>\n\n  <ng-template #loadingTemplate>\n    <ng-container bbSelectContextContainerLoadingCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n    <ng-template bbSelectContextContainerLoadingCustomizable let-hostRef>\n      <div class=\"bb-select-context__container\" [ngClass]=\"{ 'card card-body': hostRef.hasContainer }\">\n        <ng-template [ngTemplateOutlet]=\"loadingIndicatorTemplate\"></ng-template>\n      </div>\n    </ng-template>\n  </ng-template>\n\n  <ng-template #loadingIndicatorTemplate>\n    <div class=\"bb-state-container bb-select-context__state\">\n      <bb-loading-indicator-ui></bb-loading-indicator-ui>\n    </div>\n  </ng-template>\n\n  <ng-template #savingTemplate>\n    <ng-container bbSelectContextContainerSavingCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n    <ng-template bbSelectContextContainerSavingCustomizable let-hostRef>\n      <div class=\"bb-select-context__container\" [ngClass]=\"{ 'card card-body': hostRef.hasContainer }\">\n        <div class=\"bb-state-container bb-select-context__state\">\n          <bb-loading-indicator-ui\n            text=\"Processing the request...\"\n            i18n-text=\"\n              Processing the request|Text to show while saving the selected context@@select-context.label.processing\"></bb-loading-indicator-ui>\n        </div>\n      </div>\n    </ng-template>\n  </ng-template>\n\n  <ng-template #errorTemplate>\n    <div class=\"bb-state-container bb-select-context__state\">\n      <bb-select-context-error [errorKind]=\"error?.kind\"></bb-select-context-error>\n    </div>\n  </ng-template>\n\n  <ng-template #emptyTemplate>\n    <div class=\"bb-state-container bb-select-context__state\">\n      <bb-empty-state-ui\n        *ngIf=\"hostRef.searchValue\"\n        title=\"No Results Found\"\n        i18n-title=\"\n          Search empty state title|Empty state label when there is no search results@@select-context.search.empty.title\"\n        subtitle=\"We can\u2019t find what you\u2019re looking for. Please try a different criteria.\"\n        i18n-subtitle=\"\n          Search empty state subtitle|Empty state subtitle when there is no search\n          results@@select-context.search.empty.subtitle\"\n        iconModifier=\"search\"\n        iconColor=\"muted\"\n        iconSize=\"xxl\"></bb-empty-state-ui>\n\n      <bb-empty-state-ui\n        *ngIf=\"!hostRef.searchValue\"\n        title=\"Permissions required.\"\n        i18n-title=\"\n          Permissions required|Empty state label when user has no permissions@@select-context.permissions.empty.title\"\n        subtitle=\"Please contact the administrator to activate your account.\"\n        i18n-subtitle=\"\n          Permissions required subtilte|Empty state subtitle when user has no\n          permissions@@select-context.permissions.empty.subtitle\"\n        iconModifier=\"lock\"\n        iconColor=\"muted\"\n        iconSize=\"xxl\"></bb-empty-state-ui>\n    </div>\n  </ng-template>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i5.HeaderComponent; }), selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i0.forwardRef(function () { return i6.AlertComponent; }), selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i0.forwardRef(function () { return i7.SearchBoxComponent; }), selector: "bb-search-box-ui", inputs: ["placeholder", "maxLength", "squareBorder", "typeaheadOptions", "showSearch", "showClear", "searchLabel", "clearLabel", "autocomplete"], outputs: ["submit", "clear", "valueChange"] }, { type: i0.forwardRef(function () { return i8.InfiniteScrollComponent; }), selector: "bb-infinite-scroll-ui", inputs: ["offset", "debounce", "disableScrollEnd"], outputs: ["scrollEnd"] }, { type: i0.forwardRef(function () { return i9.ServiceAgreementListComponent; }), selector: "bb-service-agreement-list", inputs: ["serviceAgreements", "currentContext", "loading", "searchValue", "totalCount", "from"], outputs: ["loadMore", "select"] }, { type: i0.forwardRef(function () { return i10.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i0.forwardRef(function () { return i11.SelectContextErrorComponent; }), selector: "bb-select-context-error", inputs: ["errorKind"] }, { type: i0.forwardRef(function () { return i12.EmptyStateComponent; }), selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i0.forwardRef(function () { return SelectContextContainerCustomizableDirective; }), selector: "[bbSelectContextContainerCustomizable]" }, { type: i0.forwardRef(function () { return i13.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i13.NgClass; }), selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i0.forwardRef(function () { return i14.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0.forwardRef(function () { return SelectContextContainerLoadingCustomizableDirective; }), selector: "[bbSelectContextContainerLoadingCustomizable]" }, { type: i0.forwardRef(function () { return i13.NgTemplateOutlet; }), selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i0.forwardRef(function () { return SelectContextContainerSavingCustomizableDirective; }), selector: "[bbSelectContextContainerSavingCustomizable]" }], pipes: { "async": i0.forwardRef(function () { return i13.AsyncPipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectContextContainerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-select-context-container',
                    templateUrl: './select-context-container.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.SelectContextService }, { type: i2.SelectContextWidgetPropertiesService }, { type: i3.Router }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [WINDOW]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [SELECT_CONTEXT_URL_PROCESSOR_SERVICE_TOKEN]
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [PAGE_CONFIG]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [LOGOUT]
                }] }, { type: i4.FeaturesService }, { type: i4.DeprecationsService }]; }, propDecorators: { back: [{
                type: Output
            }], loadingChanged: [{
                type: Output
            }] } });
export class SelectContextContainerCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ SelectContextContainerCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectContextContainerCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ SelectContextContainerCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: SelectContextContainerCustomizableDirective, selector: "[bbSelectContextContainerCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectContextContainerCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbSelectContextContainerCustomizable]',
                }]
        }] });
export class SelectContextContainerLoadingCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ SelectContextContainerLoadingCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectContextContainerLoadingCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ SelectContextContainerLoadingCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: SelectContextContainerLoadingCustomizableDirective, selector: "[bbSelectContextContainerLoadingCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectContextContainerLoadingCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbSelectContextContainerLoadingCustomizable]',
                }]
        }] });
export class SelectContextContainerSavingCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ SelectContextContainerSavingCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectContextContainerSavingCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ SelectContextContainerSavingCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: SelectContextContainerSavingCustomizableDirective, selector: "[bbSelectContextContainerSavingCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectContextContainerSavingCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbSelectContextContainerSavingCustomizable]',
                }]
        }] });
//# sourceMappingURL=select-context-container.component.js.map