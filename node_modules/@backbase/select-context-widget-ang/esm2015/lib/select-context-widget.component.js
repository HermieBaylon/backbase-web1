import { Component, Output, EventEmitter, Input } from '@angular/core';
import { SelectContextService } from './select-context-widget/services/select-context.service';
import { SelectContextWidgetPropertiesService } from './select-context-widget/services/select-context-widget-properties.service';
import { WINDOW } from './select-context-widget/select-context-container/select-context-container.component';
import * as i0 from "@angular/core";
import * as i1 from "./select-context-widget/services/select-context-widget-properties.service";
import * as i2 from "./select-context-widget/select-context-container/select-context-container.component";
export function windowFactory() {
    return window;
}
export class SelectContextWidgetComponent {
    constructor(selectContextWidgetPropertiesService) {
        this.selectContextWidgetPropertiesService = selectContextWidgetPropertiesService;
        this.back = new EventEmitter();
        this.loading = new EventEmitter();
    }
    /**
     * Number of service agreements to load per page
     */
    set pageSize(value) {
        this.selectContextWidgetPropertiesService.setPageSize(value);
    }
    /**
     * Include current context
     */
    set includeCurrentContext(value) {
        this.selectContextWidgetPropertiesService.setIncludeCurrentContext(value);
    }
    /**
     * Show search if more than service agreements
     */
    set showSearchAfter(value) {
        this.selectContextWidgetPropertiesService.setShowSearchAfter(value);
    }
    /**
     * Redirect after successful context select
     */
    set selectContextRedirectPage(value) {
        this.selectContextWidgetPropertiesService.setSelectContextRedirectPage(value);
    }
    /**
     * Navigation after clicking back
     */
    set backOutput(value) {
        this.selectContextWidgetPropertiesService.setBackOutput(value);
    }
    goBack() {
        this.back.emit();
    }
    loadingChanged(event) {
        this.loading.emit(event);
    }
}
/** @nocollapse */ SelectContextWidgetComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectContextWidgetComponent, deps: [{ token: i1.SelectContextWidgetPropertiesService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ SelectContextWidgetComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: SelectContextWidgetComponent, selector: "bb-select-context-widget", inputs: { pageSize: "pageSize", includeCurrentContext: "includeCurrentContext", showSearchAfter: "showSearchAfter", selectContextRedirectPage: "selectContextRedirectPage", backOutput: "backOutput" }, outputs: { back: "back", loading: "loading" }, providers: [
        SelectContextWidgetPropertiesService,
        SelectContextService,
        {
            provide: WINDOW,
            useFactory: windowFactory,
        },
    ], ngImport: i0, template: "<bb-select-context-container (back)=\"goBack()\" (loadingChanged)=\"loadingChanged($event)\"></bb-select-context-container>\n", components: [{ type: i2.SelectContextContainerComponent, selector: "bb-select-context-container", outputs: ["back", "loadingChanged"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectContextWidgetComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-select-context-widget',
                    templateUrl: './select-context-widget.component.html',
                    providers: [
                        SelectContextWidgetPropertiesService,
                        SelectContextService,
                        {
                            provide: WINDOW,
                            useFactory: windowFactory,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i1.SelectContextWidgetPropertiesService }]; }, propDecorators: { pageSize: [{
                type: Input
            }], includeCurrentContext: [{
                type: Input
            }], showSearchAfter: [{
                type: Input
            }], selectContextRedirectPage: [{
                type: Input
            }], backOutput: [{
                type: Input
            }], back: [{
                type: Output
            }], loading: [{
                type: Output
            }] } });
//# sourceMappingURL=select-context-widget.component.js.map