import * as i0 from '@angular/core';
import { InjectionToken, Injectable, Optional, Component, Input, Directive, EventEmitter, Output, Inject, NgModule } from '@angular/core';
import * as i2$1 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i4 from '@backbase/foundation-ang/core';
import { BbTemplate, BackbaseCoreModule, FutureFeaturesModule } from '@backbase/foundation-ang/core';
import * as i1$1 from '@backbase/accessgroup-ui';
import { AccessgroupUiModule } from '@backbase/accessgroup-ui';
import * as i1$2 from '@backbase/ui-ang/empty-state';
import { EmptyStateModule } from '@backbase/ui-ang/empty-state';
import * as i5 from '@backbase/ui-ang/header';
import { HeaderModule } from '@backbase/ui-ang/header';
import { IconModule } from '@backbase/ui-ang/icon';
import * as i2 from '@backbase/ui-ang/loading-indicator';
import { LoadingIndicatorModule } from '@backbase/ui-ang/loading-indicator';
import * as i7 from '@backbase/ui-ang/search-box';
import { SearchBoxModule } from '@backbase/ui-ang/search-box';
import * as i6 from '@backbase/ui-ang/alert';
import { AlertModule } from '@backbase/ui-ang/alert';
import * as i14 from '@backbase/ui-ang/button';
import { ButtonModule } from '@backbase/ui-ang/button';
import * as i8 from '@backbase/ui-ang/infinite-scroll';
import { InfiniteScrollModule } from '@backbase/ui-ang/infinite-scroll';
import { of, BehaviorSubject, combineLatest, Subject } from 'rxjs';
import * as i3 from '@angular/router';
import { map, tap, switchMap, scan, catchError, shareReplay, takeUntil, take } from 'rxjs/operators';
import { PAGE_CONFIG, LOGOUT } from '@backbase/foundation-ang/web-sdk';
import * as i1 from '@backbase/data-ang/accesscontrol';
import { parseError as parseError$1 } from '@backbase/accessgroup-common-ang';

const SELECT_CONTEXT_URL_PROCESSOR_SERVICE_TOKEN = new InjectionToken('Select Context :: SELECT_CONTEXT_URL_PROCESSOR_SERVICE_TOKEN');
class DefaultSelectContextRedirectService {
    /* eslint-disable @typescript-eslint/no-unused-vars */
    //@ts-ignore
    processUrl(serviceAgreement, urlToNavigate, spaMode) {
        return of(urlToNavigate);
    }
}
/** @nocollapse */ DefaultSelectContextRedirectService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DefaultSelectContextRedirectService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ DefaultSelectContextRedirectService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DefaultSelectContextRedirectService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DefaultSelectContextRedirectService, decorators: [{
            type: Injectable
        }] });

const parseError = (error) => parseError$1('SelectContext', error);

const WidgetProperty = {
    PAGE_SIZE: 'pageSize',
    INCLUDE_CURRENT_CONTEXT: 'includeCurrentContext',
    SHOW_SEARCH_AFTER: 'showSearchAfter',
    REDIRECT_PAGE: 'selectContextRedirectPage',
    BACK_OUTPUT: 'output.back',
};
class SelectContextWidgetPropertiesService {
    constructor(itemModel) {
        var _a, _b, _c, _d, _e;
        this.itemModel = itemModel;
        this.pageSizeSubject$ = new BehaviorSubject(undefined);
        this.includeCurrentContextSubject$ = new BehaviorSubject(undefined);
        this.showSearchAfterSubject$ = new BehaviorSubject(undefined);
        this.selectContextRedirectPageSubject$ = new BehaviorSubject(undefined);
        this.backOutputSubject$ = new BehaviorSubject(undefined);
        this.pageSize = ((_a = this.itemModel) === null || _a === void 0 ? void 0 : _a.property(WidgetProperty.PAGE_SIZE, '7').pipe(map(propertyValue => parseInt(propertyValue, 10)))) || of(7);
        this.includeCurrentContext = ((_b = this.itemModel) === null || _b === void 0 ? void 0 : _b.property(WidgetProperty.INCLUDE_CURRENT_CONTEXT, 'false').pipe(map(propertyValue => `${propertyValue}` === 'true'))) || of(false);
        this.showSearchAfter = ((_c = this.itemModel) === null || _c === void 0 ? void 0 : _c.property(WidgetProperty.SHOW_SEARCH_AFTER, '7').pipe(map(propertyValue => parseInt(propertyValue, 10)))) || of(7);
        this.selectContextRedirectPage = ((_d = this.itemModel) === null || _d === void 0 ? void 0 : _d.property(WidgetProperty.REDIRECT_PAGE, '')) || of('');
        this.backOutput = ((_e = this.itemModel) === null || _e === void 0 ? void 0 : _e.property(WidgetProperty.BACK_OUTPUT, '')) || of('');
        this.pageSize$ = this.getProperty(this.pageSizeSubject$, this.pageSize).pipe(map(Number));
        this.includeCurrentContext$ = this.getProperty(this.includeCurrentContextSubject$, this.includeCurrentContext).pipe(map(this.toBoolean));
        this.showSearchAfter$ = this.getProperty(this.showSearchAfterSubject$, this.showSearchAfter).pipe(map(Number));
        this.selectContextRedirectPage$ = this.getProperty(this.selectContextRedirectPageSubject$, this.selectContextRedirectPage);
        this.backOutput$ = this.getProperty(this.backOutputSubject$, this.backOutput);
        this.properties = combineLatest([
            this.pageSize$,
            this.includeCurrentContext$,
            this.showSearchAfter$,
            this.selectContextRedirectPage$,
            this.backOutput$,
        ]).pipe(map(([pageSize, includeCurrentContext, showSearchAfter, selectContextRedirectPage, backOutput]) => ({
            pageSize,
            includeCurrentContext,
            showSearchAfter,
            selectContextRedirectPage,
            backOutput,
        })));
    }
    getProperty(input$, itemModel) {
        return combineLatest([input$, itemModel]).pipe(map(([value, valueIM]) => (value === undefined ? valueIM : value)));
    }
    toBoolean(value) {
        return value === 'true' || value === true;
    }
    setPageSize(value) {
        this.pageSizeSubject$.next(value);
    }
    setIncludeCurrentContext(value) {
        this.includeCurrentContextSubject$.next(value);
    }
    setShowSearchAfter(value) {
        this.showSearchAfterSubject$.next(value);
    }
    setSelectContextRedirectPage(value) {
        this.selectContextRedirectPageSubject$.next(value);
    }
    setBackOutput(value) {
        this.backOutputSubject$.next(value);
    }
}
/** @nocollapse */ SelectContextWidgetPropertiesService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectContextWidgetPropertiesService, deps: [{ token: i4.ItemModel, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ SelectContextWidgetPropertiesService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectContextWidgetPropertiesService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectContextWidgetPropertiesService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i4.ItemModel, decorators: [{
                    type: Optional
                }] }]; } });

const initialParams = {
    from: 0,
    size: 7,
};
class SelectContextService {
    constructor(userContextService, serviceAgreementService, widgetPropertiesService) {
        this.userContextService = userContextService;
        this.serviceAgreementService = serviceAgreementService;
        this.widgetPropertiesService = widgetPropertiesService;
        this.params = new BehaviorSubject(initialParams);
        this.loading = new BehaviorSubject(true);
        this.error = new BehaviorSubject(undefined);
        this.serviceAgreements = combineLatest([
            this.params,
            this.widgetPropertiesService.properties,
        ]).pipe(map(([params, { pageSize }]) => (Object.assign(Object.assign({}, params), { size: pageSize }))), tap(() => this.loading.next(true)), switchMap((params) => this.loadServiceAgreements(params)), scan((acc, curr) => this.mergeResults(acc, curr)), catchError((error) => {
            this.error.next(error);
            return of({ items: [], totalCount: 0, params: this.params.value });
        }), tap(() => this.loading.next(false)));
        this.currentContext = this.serviceAgreementService
            .getServiceAgreementContext()
            .pipe(catchError(() => of(undefined)));
    }
    loadServiceAgreements(params) {
        return this.userContextService.getUserContextServiceAgreements(params, 'response').pipe(map((response) => {
            const items = response.body || [];
            return {
                items,
                totalCount: parseInt(response.headers.get('x-total-count') || '0', 10) || items.length,
                params,
            };
        }), catchError((error) => {
            throw parseError(error);
        }));
    }
    mergeResults(acc, curr) {
        return {
            totalCount: curr.totalCount || curr.items.length,
            items: curr.params.from === 0 ? curr.items : [...acc.items, ...curr.items],
            params: curr.params,
        };
    }
    search(query) {
        this.params.next(Object.assign({ from: 0, size: this.params.value.size }, (query ? { query } : {})));
    }
    loadMore() {
        this.params.next(Object.assign(Object.assign({}, this.params.value), { from: (this.params.value.from || 0) + 1 }));
    }
    select(serviceAgreement) {
        return this.userContextService.postUserContext({
            userContextPOST: {
                serviceAgreementId: serviceAgreement.id,
            },
        });
    }
}
/** @nocollapse */ SelectContextService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectContextService, deps: [{ token: i1.UserContextHttpService }, { token: i1.ServiceAgreementHttpService }, { token: SelectContextWidgetPropertiesService }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ SelectContextService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectContextService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectContextService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.UserContextHttpService }, { type: i1.ServiceAgreementHttpService }, { type: SelectContextWidgetPropertiesService }]; } });

class ServiceAgreementItemComponent {
    constructor() {
        this.hostRef = this;
    }
}
/** @nocollapse */ ServiceAgreementItemComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ServiceAgreementItemComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ ServiceAgreementItemComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ServiceAgreementItemComponent, selector: "bb-service-agreement-item", inputs: { item: "item" }, ngImport: i0, template: "<ng-container bbSelectContextServiceAgreementItemCustomizable [bbHostRef]=\"hostRef\" [bbTemplateContext]=\"item\">\n</ng-container>\n\n<ng-template bbSelectContextServiceAgreementItemCustomizable let-hostRef let-item=\"context\">\n  <div class=\"bb-stack bb-stack--align-top\">\n    <div class=\"bb-stack__item\">\n      <bb-user-context-icon-ui [isMaster]=\"item?.isMaster\" [name]=\"item?.name\"></bb-user-context-icon-ui>\n    </div>\n    <div class=\"bb-stack__item bb-stack__item--fill\">\n      <div class=\"bb-text-bold\" data-role=\"service-agreement-item-name\">{{ item?.name }}</div>\n      <div class=\"bb-subtitle bb-text-support\" data-role=\"service-agreement-item-description\">\n        {{ item?.description }}\n      </div>\n    </div>\n  </div>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i1$1.UserContextIconComponent; }), selector: "bb-user-context-icon-ui", inputs: ["isMaster", "name"] }], directives: [{ type: i0.forwardRef(function () { return SelectContextServiceAgreementItemCustomizableDirective; }), selector: "[bbSelectContextServiceAgreementItemCustomizable]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ServiceAgreementItemComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-service-agreement-item',
                    templateUrl: './service-agreement-item.component.html',
                }]
        }], propDecorators: { item: [{
                type: Input
            }] } });
class SelectContextServiceAgreementItemCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ SelectContextServiceAgreementItemCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectContextServiceAgreementItemCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ SelectContextServiceAgreementItemCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: SelectContextServiceAgreementItemCustomizableDirective, selector: "[bbSelectContextServiceAgreementItemCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectContextServiceAgreementItemCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbSelectContextServiceAgreementItemCustomizable]',
                }]
        }] });

class ServiceAgreementListComponent {
    constructor() {
        this.hostRef = this;
        this.serviceAgreements = [];
        this.loading = false;
        this.searchValue = '';
        this.totalCount = 0;
        this.from = 0;
        this.loadMore = new EventEmitter();
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.select = new EventEmitter();
    }
    onLoadMore() {
        this.loadMore.emit();
    }
    onSelect(serviceAgreement) {
        this.select.emit(serviceAgreement);
    }
}
/** @nocollapse */ ServiceAgreementListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ServiceAgreementListComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ ServiceAgreementListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ServiceAgreementListComponent, selector: "bb-service-agreement-list", inputs: { serviceAgreements: "serviceAgreements", currentContext: "currentContext", loading: "loading", searchValue: "searchValue", totalCount: "totalCount", from: "from" }, outputs: { loadMore: "loadMore", select: "select" }, ngImport: i0, template: "<ng-container\n  bbSelectContextServiceAgreementListCustomizable\n  [bbHostRef]=\"hostRef\"\n  [bbTemplateContext]=\"{\n    serviceAgreements: serviceAgreements,\n    currentContext: currentContext,\n    loading: loading,\n    searchValue: searchValue,\n    totalCount: totalCount,\n    from: from\n  }\">\n</ng-container>\n\n<ng-template\n  bbSelectContextServiceAgreementListCustomizable\n  let-hostRef\n  let-serviceAgreements=\"context.serviceAgreements\"\n  let-currentContext=\"context.currentContext\"\n  let-loading=\"context.loading\"\n  let-searchValue=\"context.searchValue\"\n  let-totalCount=\"context.totalCount\"\n  let-from=\"context.from\">\n  <ng-container *ngIf=\"currentContext && !searchValue\">\n    <div\n      data-role=\"current-context-label\"\n      class=\"bb-select-context__subheader\"\n      i18n=\"Current context|Current context label@@select-context.label.currentContext\">\n      Current context\n    </div>\n    <div class=\"list-group list-group-flush\">\n      <div\n        role=\"button\"\n        data-role=\"current-context-data\"\n        tabindex=\"0\"\n        (click)=\"hostRef.onSelect(currentContext)\"\n        (keyup.enter)=\"hostRef.onSelect(currentContext)\"\n        class=\"bb-select-context__current-context list-group-item list-group-item-action\">\n        <bb-service-agreement-item [item]=\"currentContext\"></bb-service-agreement-item>\n      </div>\n    </div>\n\n    <div\n      class=\"bb-select-context__subheader\"\n      data-role=\"switch-context-label\"\n      i18n=\"Switch to context|Switch to context label@@select-context.label.switchToContext\">\n      Switch to context\n    </div>\n  </ng-container>\n\n  <div class=\"bb-select-context__subheader\" *ngIf=\"searchValue && totalCount > 0\">\n    <span i18n=\"Results found|Results found label@@select-context.label.resultsFound\">\n      {totalCount, plural, =1 {1 result found} other {{{totalCount}} results found}}\n    </span>\n  </div>\n\n  <div class=\"list-group list-group-flush\">\n    <div\n      *ngFor=\"let item of serviceAgreements; let first = first; let last = last\"\n      role=\"button\"\n      tabindex=\"0\"\n      [attr.data-role]=\"'service-agreement-list-item-' + item.name\"\n      (click)=\"hostRef.onSelect(item)\"\n      (keyup.enter)=\"hostRef.onSelect(item)\"\n      [class.first]=\"first\"\n      [class.last]=\"last\"\n      class=\"list-group-item list-group-item-action bb-select-context__item\">\n      <bb-service-agreement-item [item]=\"item\"></bb-service-agreement-item>\n    </div>\n  </div>\n\n  <div [class.invisible]=\"!loading\" *ngIf=\"serviceAgreements.length !== totalCount\">\n    <bb-loading-indicator-ui loaderSize=\"sm\"></bb-loading-indicator-ui>\n  </div>\n\n  <div class=\"bb-select-context__items-loaded-label\" *ngIf=\"from > 0 && serviceAgreements.length === totalCount\">\n    <span *ngIf=\"!searchValue\" i18n=\"All items loaded|All items loaded label@@select-context.label.allItemsLoaded\">\n      All items are loaded\n    </span>\n    <span *ngIf=\"searchValue\" i18n=\"All items loaded|All items loaded label@@select-context.label.allResultsLoaded\">\n      All results are loaded\n    </span>\n  </div>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return ServiceAgreementItemComponent; }), selector: "bb-service-agreement-item", inputs: ["item"] }, { type: i0.forwardRef(function () { return i2.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }], directives: [{ type: i0.forwardRef(function () { return SelectContextServiceAgreementListCustomizableDirective; }), selector: "[bbSelectContextServiceAgreementListCustomizable]" }, { type: i0.forwardRef(function () { return i2$1.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i2$1.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ServiceAgreementListComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-service-agreement-list',
                    templateUrl: './service-agreement-list.component.html',
                }]
        }], propDecorators: { serviceAgreements: [{
                type: Input
            }], currentContext: [{
                type: Input
            }], loading: [{
                type: Input
            }], searchValue: [{
                type: Input
            }], totalCount: [{
                type: Input
            }], from: [{
                type: Input
            }], loadMore: [{
                type: Output
            }], select: [{
                type: Output
            }] } });
class SelectContextServiceAgreementListCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ SelectContextServiceAgreementListCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectContextServiceAgreementListCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ SelectContextServiceAgreementListCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: SelectContextServiceAgreementListCustomizableDirective, selector: "[bbSelectContextServiceAgreementListCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectContextServiceAgreementListCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbSelectContextServiceAgreementListCustomizable]',
                }]
        }] });

class SelectContextErrorComponent {
}
/** @nocollapse */ SelectContextErrorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectContextErrorComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ SelectContextErrorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: SelectContextErrorComponent, selector: "bb-select-context-error", inputs: { errorKind: "errorKind" }, ngImport: i0, template: "<ng-container *ngIf=\"errorKind\" [ngSwitch]=\"errorKind\">\n  <bb-empty-state-ui\n    *ngSwitchCase=\"'SelectContextAccessDenied'\"\n    title=\"Permissions required\"\n    i18n-title=\"\n      Permissions required|Error state label when user does not have permissions to select\n      context@@select-context.error.accessDenied.title\"\n    subtitle=\"You don't have permissions to select context.\"\n    i18n-subtitle=\"\n      No Permissions Subtitle|Error state subtitle label when user does not have permissions to select\n      contexts@@select-context.error.accessDenied.subtitle\"\n    iconModifier=\"lock\"\n    iconColor=\"muted\"\n    iconSize=\"xxl\"></bb-empty-state-ui>\n\n  <bb-empty-state-ui\n    *ngSwitchCase=\"'SelectContextConnectivityError'\"\n    title=\"Connectivity Error\"\n    i18n-title=\"\n      Connectivity Error title|Empty state label when there is connectivity\n      error@@select-context.error.connectivity.title\"\n    subtitle=\"Are you connected to the internet? Please check your connection and try again.\"\n    i18n-subtitle=\"\n      Connectivity Error subtitle|Empty state subtitle label when there is connectivity\n      error@@select-context.error.connectivity.subtitle\"\n    iconModifier=\"error-outline\"\n    iconColor=\"muted\"\n    iconSize=\"xxl\"></bb-empty-state-ui>\n\n  <!-- SelectContextUnknownError-->\n  <bb-empty-state-ui\n    *ngSwitchDefault\n    title=\"Unknown Error\"\n    i18n-title=\"\n      Unknown Error title|Empty state label when there is an unknown error@@select-context.error.unknown.title\"\n    subtitle=\"Try to reload the page or contact the system administrator.\"\n    i18n-subtitle=\"\n      Unknown Error subtitle|Empty state subtitle label when there is an unknown\n      error@@select-context.error.unknown.subtitle\"\n    iconModifier=\"error-outline\"\n    iconColor=\"muted\"\n    iconSize=\"xxl\"></bb-empty-state-ui>\n</ng-container>\n", components: [{ type: i1$2.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2$1.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i2$1.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i2$1.NgSwitchDefault, selector: "[ngSwitchDefault]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectContextErrorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-select-context-error',
                    templateUrl: './select-context-error.component.html',
                }]
        }], propDecorators: { errorKind: [{
                type: Input
            }] } });

const WINDOW = new InjectionToken('Select Context :: WindowToken');
const SELECT_CONTEXT_INNER_CONTAINER = {
    name: 'SELECT_CONTEXT_INNER_CONTAINER',
    description: 'Include a card container in the select context widget template',
};
class SelectContextContainerComponent {
    constructor(service, widgetPropertiesService, router, localWindow, redirectUrlService, pageConfig, logoutService, featuresService, deprecationsService) {
        this.service = service;
        this.widgetPropertiesService = widgetPropertiesService;
        this.router = router;
        this.localWindow = localWindow;
        this.redirectUrlService = redirectUrlService;
        this.pageConfig = pageConfig;
        this.logoutService = logoutService;
        this.featuresService = featuresService;
        this.deprecationsService = deprecationsService;
        this.back = new EventEmitter();
        this.loadingChanged = new EventEmitter();
        this.destroy$ = new Subject();
        this.hostRef = this;
        this.serviceAgreements = this.service.serviceAgreements.pipe(tap((data) => this.selectFirstIfOnlyOne(data)));
        this.loading = this.service.loading;
        this.error = this.service.error;
        this.params = this.service.params;
        this.widgetProperties = this.widgetPropertiesService.properties;
        this.currentContext = this.widgetProperties.pipe(switchMap(({ includeCurrentContext }) => {
            if (includeCurrentContext) {
                return this.service.currentContext;
            }
            return of(undefined);
        }), shareReplay(1));
        this.searchValue = '';
        this.saving = new BehaviorSubject(false);
        this.savingError = false;
        this.loading.pipe(takeUntil(this.destroy$)).subscribe((event) => {
            this.loadingChanged.emit(event);
        });
    }
    get hasContainer() {
        return this.featuresService.isEnabled(SELECT_CONTEXT_INNER_CONTAINER);
    }
    search(text) {
        this.searchValue = text;
        this.service.search(text);
    }
    loadMore() {
        this.service.loadMore();
    }
    select(serviceAgreement) {
        this.savingError = false;
        this.saving.next(true);
        this.loadingChanged.emit(true);
        this.service
            .select(serviceAgreement)
            .pipe(switchMap(() => this.widgetProperties), map(({ selectContextRedirectPage }) => selectContextRedirectPage), take(1))
            .subscribe((selectContextRedirectPage) => this.afterSelectContextSuccess(serviceAgreement, selectContextRedirectPage), () => {
            /* error */
            this.savingError = true;
            this.saving.next(false);
        });
    }
    goBack() {
        this.logoutService
            .logout()
            .catch(() => { })
            .then(() => {
            this.back.emit();
        });
    }
    selectFirstIfOnlyOne(result) {
        if (result.totalCount === 1 && result.params.from === 0 && !result.params.query) {
            this.select(result.items[0]);
        }
    }
    redirectToUrl(serviceAgreement, url, spaMode) {
        this.redirectUrlService
            .processUrl(serviceAgreement, url, spaMode)
            .pipe(tap(processedUrl => {
            const bbWindow = this.localWindow;
            const currentUrl = bbWindow.location.pathname;
            const [newUrl] = processedUrl.replace(bbWindow.location.origin, '').split('#');
            bbWindow.location.href = processedUrl;
            if (currentUrl === newUrl) {
                bbWindow.location.reload(true);
            }
        }), take(1))
            .subscribe();
    }
    afterSelectContextSuccess(serviceAgreement, urlModel = '') {
        const spaMode = urlModel.substring(0, 4);
        const urlToNavigate = urlModel.substring(4);
        const bbWindow = this.localWindow;
        switch (spaMode) {
            case 'spa:':
                if (bbWindow.reloadPage) {
                    bbWindow.reloadPage().then(() => {
                        this.redirectUrlService
                            .processUrl(serviceAgreement, urlToNavigate, spaMode)
                            .pipe(tap(url => this.router.navigateByUrl(url)), take(1))
                            .subscribe();
                    });
                }
                else {
                    throw new Error('window.reloadPage() not available. SPA navigation is not supported');
                }
                break;
            case 'mpa:':
                const gatewayRoot = this.pageConfig.linkRoot || '';
                const portalName = this.pageConfig.portalName || '';
                const mpaUrl = `${gatewayRoot}${portalName ? '/' + portalName : ''}/${urlToNavigate}`.replace(/\/{2,}/g, '/');
                this.redirectToUrl(serviceAgreement, mpaUrl, spaMode);
                break;
            case 'abs:':
                const linkRoot = this.pageConfig.linkRoot || '';
                const absUrl = `${linkRoot}/${urlToNavigate}`.replace(/\/{2,}/g, '/');
                this.redirectToUrl(serviceAgreement, absUrl, spaMode);
                break;
        }
    }
    ngOnInit() {
        if (!this.hasContainer) {
            this.deprecationsService.logDeprecatedFeature('Select context widget will include card container in its template in the next major release. Please enable `SELECT_CONTEXT_INNER_CONTAINER` and adjust your page to support this change.');
        }
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
}
/** @nocollapse */ SelectContextContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectContextContainerComponent, deps: [{ token: SelectContextService }, { token: SelectContextWidgetPropertiesService }, { token: i3.Router }, { token: WINDOW }, { token: SELECT_CONTEXT_URL_PROCESSOR_SERVICE_TOKEN }, { token: PAGE_CONFIG, optional: true }, { token: LOGOUT }, { token: i4.FeaturesService }, { token: i4.DeprecationsService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ SelectContextContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: SelectContextContainerComponent, selector: "bb-select-context-container", outputs: { back: "back", loadingChanged: "loadingChanged" }, ngImport: i0, template: "<ng-container\n  bbSelectContextContainerCustomizable\n  [bbHostRef]=\"hostRef\"\n  [bbTemplateContext]=\"{\n    serviceAgreements: serviceAgreements | async,\n    loading: loading | async,\n    error: error | async,\n    params: params | async,\n    widgetProperties: widgetProperties | async,\n    currentContext: currentContext | async,\n    saving: saving | async\n  }\">\n</ng-container>\n\n<ng-template\n  bbSelectContextContainerCustomizable\n  let-hostRef\n  let-serviceAgreements=\"context.serviceAgreements\"\n  let-loading=\"context.loading\"\n  let-error=\"context.error\"\n  let-params=\"context.params\"\n  let-widgetProperties=\"context.widgetProperties\"\n  let-currentContext=\"context.currentContext\"\n  let-saving=\"context.saving\">\n  <div class=\"bb-select-context\">\n    <ng-container *ngIf=\"serviceAgreements; else loadingTemplate\">\n      <ng-container *ngIf=\"!saving; else savingTemplate\">\n        <div class=\"bb-select-context__container\" [ngClass]=\"{ 'card card-body': hostRef.hasContainer }\">\n          <bb-header-ui\n            class=\"bb-block bb-block--md\"\n            headingType=\"h2\"\n            heading=\"Select context\"\n            data-role=\"select-context-header\"\n            i18n-heading=\"Select context|Select context label@@select-context.label.selectContext\"></bb-header-ui>\n\n          <bb-alert-ui\n            *ngIf=\"hostRef.savingError\"\n            title=\"Unknown error\"\n            i18n-title=\"Unknown Error|Unknown Error Label@@select-context.label.error.unknown\"\n            message=\"Try to make action again or contact your system administrator.\"\n            i18n-message=\"Try again|Try again error message@@select-context.label.error.tryAgain\"></bb-alert-ui>\n\n          <ng-container *ngIf=\"hostRef.searchValue || serviceAgreements.totalCount > widgetProperties.showSearchAfter\">\n            <bb-search-box-ui\n              class=\"bb-block bb-block--lg\"\n              searchLabel=\"Search button\"\n              i18n-searchLabel=\"Search button|Search button@@select-context.label.searchLabel\"\n              [showClear]=\"true\"\n              [showSearch]=\"true\"\n              placeholder=\"Search\"\n              i18n-placeholder=\"Search|Search placeholder@@select-context.label.search\"\n              aria-label=\"Search service agreements\"\n              i18n-aria-label=\"Search service agreements|Search service agreements@@select-context.aria-label.search\"\n              data-role=\"Search\"\n              (submit)=\"hostRef.search($event)\"\n              (clear)=\"hostRef.search('')\"></bb-search-box-ui>\n          </ng-container>\n\n          <ng-container *ngIf=\"!error; else errorTemplate\">\n            <ng-container *ngIf=\"!(loading && params.from === 0); else loadingIndicatorTemplate\">\n              <ng-container *ngIf=\"serviceAgreements.items.length > 0; else emptyTemplate\">\n                <bb-infinite-scroll-ui\n                  class=\"bb-infinite-scroll\"\n                  [offset]=\"5\"\n                  [disableScrollEnd]=\"loading || serviceAgreements.items.length === serviceAgreements.totalCount\"\n                  (scrollEnd)=\"loadMore()\">\n                  <bb-service-agreement-list\n                    [serviceAgreements]=\"serviceAgreements.items\"\n                    [loading]=\"loading\"\n                    [currentContext]=\"currentContext\"\n                    [searchValue]=\"hostRef.searchValue\"\n                    [totalCount]=\"serviceAgreements.totalCount\"\n                    [from]=\"params.from\"\n                    (loadMore)=\"hostRef.loadMore()\"\n                    (select)=\"hostRef.select($event)\"></bb-service-agreement-list>\n                </bb-infinite-scroll-ui>\n              </ng-container>\n            </ng-container>\n          </ng-container>\n\n          <ng-container *ngIf=\"widgetProperties.backOutput\">\n            <div class=\"bb-block bb-block--lg\"></div>\n            <div class=\"d-block\">\n              <div class=\"bb-button-bar bb-button-bar--reverse\">\n                <button\n                  bbButton\n                  (click)=\"hostRef.goBack()\"\n                  color=\"secondary\"\n                  class=\"bb-button-bar__button\"\n                  data-role=\"select-context-back-button\">\n                  <span i18n=\"Back button|Button to navigate back@@select-context.label.backButton\"> Back </span>\n                </button>\n              </div>\n            </div>\n          </ng-container>\n        </div>\n      </ng-container>\n    </ng-container>\n  </div>\n\n  <ng-template #loadingTemplate>\n    <ng-container bbSelectContextContainerLoadingCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n    <ng-template bbSelectContextContainerLoadingCustomizable let-hostRef>\n      <div class=\"bb-select-context__container\" [ngClass]=\"{ 'card card-body': hostRef.hasContainer }\">\n        <ng-template [ngTemplateOutlet]=\"loadingIndicatorTemplate\"></ng-template>\n      </div>\n    </ng-template>\n  </ng-template>\n\n  <ng-template #loadingIndicatorTemplate>\n    <div class=\"bb-state-container bb-select-context__state\">\n      <bb-loading-indicator-ui></bb-loading-indicator-ui>\n    </div>\n  </ng-template>\n\n  <ng-template #savingTemplate>\n    <ng-container bbSelectContextContainerSavingCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n    <ng-template bbSelectContextContainerSavingCustomizable let-hostRef>\n      <div class=\"bb-select-context__container\" [ngClass]=\"{ 'card card-body': hostRef.hasContainer }\">\n        <div class=\"bb-state-container bb-select-context__state\">\n          <bb-loading-indicator-ui\n            text=\"Processing the request...\"\n            i18n-text=\"\n              Processing the request|Text to show while saving the selected context@@select-context.label.processing\"></bb-loading-indicator-ui>\n        </div>\n      </div>\n    </ng-template>\n  </ng-template>\n\n  <ng-template #errorTemplate>\n    <div class=\"bb-state-container bb-select-context__state\">\n      <bb-select-context-error [errorKind]=\"error?.kind\"></bb-select-context-error>\n    </div>\n  </ng-template>\n\n  <ng-template #emptyTemplate>\n    <div class=\"bb-state-container bb-select-context__state\">\n      <bb-empty-state-ui\n        *ngIf=\"hostRef.searchValue\"\n        title=\"No Results Found\"\n        i18n-title=\"\n          Search empty state title|Empty state label when there is no search results@@select-context.search.empty.title\"\n        subtitle=\"We can\u2019t find what you\u2019re looking for. Please try a different criteria.\"\n        i18n-subtitle=\"\n          Search empty state subtitle|Empty state subtitle when there is no search\n          results@@select-context.search.empty.subtitle\"\n        iconModifier=\"search\"\n        iconColor=\"muted\"\n        iconSize=\"xxl\"></bb-empty-state-ui>\n\n      <bb-empty-state-ui\n        *ngIf=\"!hostRef.searchValue\"\n        title=\"Permissions required.\"\n        i18n-title=\"\n          Permissions required|Empty state label when user has no permissions@@select-context.permissions.empty.title\"\n        subtitle=\"Please contact the administrator to activate your account.\"\n        i18n-subtitle=\"\n          Permissions required subtilte|Empty state subtitle when user has no\n          permissions@@select-context.permissions.empty.subtitle\"\n        iconModifier=\"lock\"\n        iconColor=\"muted\"\n        iconSize=\"xxl\"></bb-empty-state-ui>\n    </div>\n  </ng-template>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i5.HeaderComponent; }), selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i0.forwardRef(function () { return i6.AlertComponent; }), selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i0.forwardRef(function () { return i7.SearchBoxComponent; }), selector: "bb-search-box-ui", inputs: ["placeholder", "maxLength", "squareBorder", "typeaheadOptions", "showSearch", "showClear", "searchLabel", "clearLabel", "autocomplete"], outputs: ["submit", "clear", "valueChange"] }, { type: i0.forwardRef(function () { return i8.InfiniteScrollComponent; }), selector: "bb-infinite-scroll-ui", inputs: ["offset", "debounce", "disableScrollEnd"], outputs: ["scrollEnd"] }, { type: i0.forwardRef(function () { return ServiceAgreementListComponent; }), selector: "bb-service-agreement-list", inputs: ["serviceAgreements", "currentContext", "loading", "searchValue", "totalCount", "from"], outputs: ["loadMore", "select"] }, { type: i0.forwardRef(function () { return i2.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i0.forwardRef(function () { return SelectContextErrorComponent; }), selector: "bb-select-context-error", inputs: ["errorKind"] }, { type: i0.forwardRef(function () { return i1$2.EmptyStateComponent; }), selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i0.forwardRef(function () { return SelectContextContainerCustomizableDirective; }), selector: "[bbSelectContextContainerCustomizable]" }, { type: i0.forwardRef(function () { return i2$1.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i2$1.NgClass; }), selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i0.forwardRef(function () { return i14.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0.forwardRef(function () { return SelectContextContainerLoadingCustomizableDirective; }), selector: "[bbSelectContextContainerLoadingCustomizable]" }, { type: i0.forwardRef(function () { return i2$1.NgTemplateOutlet; }), selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i0.forwardRef(function () { return SelectContextContainerSavingCustomizableDirective; }), selector: "[bbSelectContextContainerSavingCustomizable]" }], pipes: { "async": i0.forwardRef(function () { return i2$1.AsyncPipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectContextContainerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-select-context-container',
                    templateUrl: './select-context-container.component.html',
                }]
        }], ctorParameters: function () { return [{ type: SelectContextService }, { type: SelectContextWidgetPropertiesService }, { type: i3.Router }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [WINDOW]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [SELECT_CONTEXT_URL_PROCESSOR_SERVICE_TOKEN]
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [PAGE_CONFIG]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [LOGOUT]
                }] }, { type: i4.FeaturesService }, { type: i4.DeprecationsService }]; }, propDecorators: { back: [{
                type: Output
            }], loadingChanged: [{
                type: Output
            }] } });
class SelectContextContainerCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ SelectContextContainerCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectContextContainerCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ SelectContextContainerCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: SelectContextContainerCustomizableDirective, selector: "[bbSelectContextContainerCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectContextContainerCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbSelectContextContainerCustomizable]',
                }]
        }] });
class SelectContextContainerLoadingCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ SelectContextContainerLoadingCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectContextContainerLoadingCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ SelectContextContainerLoadingCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: SelectContextContainerLoadingCustomizableDirective, selector: "[bbSelectContextContainerLoadingCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectContextContainerLoadingCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbSelectContextContainerLoadingCustomizable]',
                }]
        }] });
class SelectContextContainerSavingCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ SelectContextContainerSavingCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectContextContainerSavingCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ SelectContextContainerSavingCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: SelectContextContainerSavingCustomizableDirective, selector: "[bbSelectContextContainerSavingCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectContextContainerSavingCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbSelectContextContainerSavingCustomizable]',
                }]
        }] });

function windowFactory() {
    return window;
}
class SelectContextWidgetComponent {
    constructor(selectContextWidgetPropertiesService) {
        this.selectContextWidgetPropertiesService = selectContextWidgetPropertiesService;
        this.back = new EventEmitter();
        this.loading = new EventEmitter();
    }
    /**
     * Number of service agreements to load per page
     */
    set pageSize(value) {
        this.selectContextWidgetPropertiesService.setPageSize(value);
    }
    /**
     * Include current context
     */
    set includeCurrentContext(value) {
        this.selectContextWidgetPropertiesService.setIncludeCurrentContext(value);
    }
    /**
     * Show search if more than service agreements
     */
    set showSearchAfter(value) {
        this.selectContextWidgetPropertiesService.setShowSearchAfter(value);
    }
    /**
     * Redirect after successful context select
     */
    set selectContextRedirectPage(value) {
        this.selectContextWidgetPropertiesService.setSelectContextRedirectPage(value);
    }
    /**
     * Navigation after clicking back
     */
    set backOutput(value) {
        this.selectContextWidgetPropertiesService.setBackOutput(value);
    }
    goBack() {
        this.back.emit();
    }
    loadingChanged(event) {
        this.loading.emit(event);
    }
}
/** @nocollapse */ SelectContextWidgetComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectContextWidgetComponent, deps: [{ token: SelectContextWidgetPropertiesService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ SelectContextWidgetComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: SelectContextWidgetComponent, selector: "bb-select-context-widget", inputs: { pageSize: "pageSize", includeCurrentContext: "includeCurrentContext", showSearchAfter: "showSearchAfter", selectContextRedirectPage: "selectContextRedirectPage", backOutput: "backOutput" }, outputs: { back: "back", loading: "loading" }, providers: [
        SelectContextWidgetPropertiesService,
        SelectContextService,
        {
            provide: WINDOW,
            useFactory: windowFactory,
        },
    ], ngImport: i0, template: "<bb-select-context-container (back)=\"goBack()\" (loadingChanged)=\"loadingChanged($event)\"></bb-select-context-container>\n", components: [{ type: SelectContextContainerComponent, selector: "bb-select-context-container", outputs: ["back", "loadingChanged"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectContextWidgetComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-select-context-widget',
                    templateUrl: './select-context-widget.component.html',
                    providers: [
                        SelectContextWidgetPropertiesService,
                        SelectContextService,
                        {
                            provide: WINDOW,
                            useFactory: windowFactory,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: SelectContextWidgetPropertiesService }]; }, propDecorators: { pageSize: [{
                type: Input
            }], includeCurrentContext: [{
                type: Input
            }], showSearchAfter: [{
                type: Input
            }], selectContextRedirectPage: [{
                type: Input
            }], backOutput: [{
                type: Input
            }], back: [{
                type: Output
            }], loading: [{
                type: Output
            }] } });

const components = [
    SelectContextWidgetComponent,
    ServiceAgreementItemComponent,
    SelectContextErrorComponent,
    ServiceAgreementListComponent,
    SelectContextContainerComponent,
];
const directives = [
    SelectContextServiceAgreementListCustomizableDirective,
    SelectContextServiceAgreementItemCustomizableDirective,
    SelectContextContainerCustomizableDirective,
    SelectContextContainerLoadingCustomizableDirective,
    SelectContextContainerSavingCustomizableDirective,
];
const uiModules = [
    EmptyStateModule,
    HeaderModule,
    IconModule,
    LoadingIndicatorModule,
    SearchBoxModule,
    AlertModule,
    ButtonModule,
    InfiniteScrollModule,
    AccessgroupUiModule,
];
class SelectContextWidgetModule {
}
/** @nocollapse */ SelectContextWidgetModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectContextWidgetModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ SelectContextWidgetModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectContextWidgetModule, declarations: [SelectContextWidgetComponent,
        ServiceAgreementItemComponent,
        SelectContextErrorComponent,
        ServiceAgreementListComponent,
        SelectContextContainerComponent, SelectContextServiceAgreementListCustomizableDirective,
        SelectContextServiceAgreementItemCustomizableDirective,
        SelectContextContainerCustomizableDirective,
        SelectContextContainerLoadingCustomizableDirective,
        SelectContextContainerSavingCustomizableDirective], imports: [CommonModule, i4.BackbaseCoreModule, i4.FutureFeaturesModule, EmptyStateModule,
        HeaderModule,
        IconModule,
        LoadingIndicatorModule,
        SearchBoxModule,
        AlertModule,
        ButtonModule,
        InfiniteScrollModule,
        AccessgroupUiModule], exports: [SelectContextWidgetComponent,
        ServiceAgreementItemComponent,
        SelectContextErrorComponent,
        ServiceAgreementListComponent,
        SelectContextContainerComponent, SelectContextServiceAgreementListCustomizableDirective,
        SelectContextServiceAgreementItemCustomizableDirective,
        SelectContextContainerCustomizableDirective,
        SelectContextContainerLoadingCustomizableDirective,
        SelectContextContainerSavingCustomizableDirective, EmptyStateModule,
        HeaderModule,
        IconModule,
        LoadingIndicatorModule,
        SearchBoxModule,
        AlertModule,
        ButtonModule,
        InfiniteScrollModule,
        AccessgroupUiModule] });
/** @nocollapse */ SelectContextWidgetModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectContextWidgetModule, providers: [
        {
            provide: SELECT_CONTEXT_URL_PROCESSOR_SERVICE_TOKEN,
            useClass: DefaultSelectContextRedirectService,
        },
    ], imports: [[
            CommonModule,
            BackbaseCoreModule.withConfig({
                classMap: { SelectContextWidgetComponent },
            }),
            FutureFeaturesModule.allowOptIn([SELECT_CONTEXT_INNER_CONTAINER]),
            ...uiModules,
        ], EmptyStateModule,
        HeaderModule,
        IconModule,
        LoadingIndicatorModule,
        SearchBoxModule,
        AlertModule,
        ButtonModule,
        InfiniteScrollModule,
        AccessgroupUiModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: SelectContextWidgetModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        BackbaseCoreModule.withConfig({
                            classMap: { SelectContextWidgetComponent },
                        }),
                        FutureFeaturesModule.allowOptIn([SELECT_CONTEXT_INNER_CONTAINER]),
                        ...uiModules,
                    ],
                    providers: [
                        {
                            provide: SELECT_CONTEXT_URL_PROCESSOR_SERVICE_TOKEN,
                            useClass: DefaultSelectContextRedirectService,
                        },
                    ],
                    declarations: [...components, ...directives],
                    exports: [...components, ...directives, ...uiModules],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { SELECT_CONTEXT_URL_PROCESSOR_SERVICE_TOKEN, SelectContextWidgetComponent, SelectContextWidgetModule, SelectContextContainerComponent as ӨSelectContextContainerComponent, SelectContextContainerCustomizableDirective as ӨSelectContextContainerCustomizableDirective, SelectContextContainerLoadingCustomizableDirective as ӨSelectContextContainerLoadingCustomizableDirective, SelectContextContainerSavingCustomizableDirective as ӨSelectContextContainerSavingCustomizableDirective, SelectContextErrorComponent as ӨSelectContextErrorComponent, SelectContextServiceAgreementItemCustomizableDirective as ӨSelectContextServiceAgreementItemCustomizableDirective, SelectContextServiceAgreementListCustomizableDirective as ӨSelectContextServiceAgreementListCustomizableDirective, ServiceAgreementItemComponent as ӨServiceAgreementItemComponent, ServiceAgreementListComponent as ӨServiceAgreementListComponent };
//# sourceMappingURL=backbase-select-context-widget-ang.js.map
