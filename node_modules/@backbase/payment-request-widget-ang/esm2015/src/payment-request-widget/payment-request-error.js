export class PaymentRequestAccessDenied {
    constructor(error) {
        this.error = error;
        this.kind = 'PaymentRequestAccessDenied';
    }
}
export class PaymentRequestNotFound {
    constructor(error) {
        this.error = error;
        this.kind = 'PaymentRequestNotFound';
    }
}
export class PaymentRequestBadRequest {
    constructor(error) {
        this.error = error;
        this.kind = 'PaymentRequestBadRequest';
    }
}
export class PaymentRequestUnknownError {
    constructor(error) {
        this.error = error;
        this.kind = 'PaymentRequestUnknownError';
    }
}
export class PaymentRequestConnectivityError {
    constructor(error) {
        this.error = error;
        this.kind = 'PaymentRequestConnectivityError';
    }
}
export const parseError = (error) => {
    if (error.error instanceof ErrorEvent) {
        return new PaymentRequestUnknownError(error);
    }
    else {
        switch (error.status) {
            case 0:
                return new PaymentRequestConnectivityError(error);
            case 400:
                return new PaymentRequestBadRequest(error);
            case 401:
                return new PaymentRequestAccessDenied(error);
            case 403:
                return new PaymentRequestAccessDenied(error);
            case 404:
                return new PaymentRequestNotFound(error);
            default:
                return new PaymentRequestUnknownError(error);
        }
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF5bWVudC1yZXF1ZXN0LWVycm9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9wYXltZW50LXJlcXVlc3Qtd2lkZ2V0LWFuZy9zcmMvcGF5bWVudC1yZXF1ZXN0LXdpZGdldC9wYXltZW50LXJlcXVlc3QtZXJyb3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxPQUFPLDBCQUEwQjtJQUVyQyxZQUFxQixLQUF3QjtRQUF4QixVQUFLLEdBQUwsS0FBSyxDQUFtQjtRQUQ3QyxTQUFJLEdBQWlDLDRCQUE0QixDQUFDO0lBQ2xCLENBQUM7Q0FDbEQ7QUFFRCxNQUFNLE9BQU8sc0JBQXNCO0lBRWpDLFlBQXFCLEtBQXdCO1FBQXhCLFVBQUssR0FBTCxLQUFLLENBQW1CO1FBRDdDLFNBQUksR0FBNkIsd0JBQXdCLENBQUM7SUFDVixDQUFDO0NBQ2xEO0FBRUQsTUFBTSxPQUFPLHdCQUF3QjtJQUVuQyxZQUFxQixLQUF3QjtRQUF4QixVQUFLLEdBQUwsS0FBSyxDQUFtQjtRQUQ3QyxTQUFJLEdBQStCLDBCQUEwQixDQUFDO0lBQ2QsQ0FBQztDQUNsRDtBQUVELE1BQU0sT0FBTywwQkFBMEI7SUFFckMsWUFBcUIsS0FBd0I7UUFBeEIsVUFBSyxHQUFMLEtBQUssQ0FBbUI7UUFEN0MsU0FBSSxHQUFpQyw0QkFBNEIsQ0FBQztJQUNsQixDQUFDO0NBQ2xEO0FBRUQsTUFBTSxPQUFPLCtCQUErQjtJQUUxQyxZQUFxQixLQUF3QjtRQUF4QixVQUFLLEdBQUwsS0FBSyxDQUFtQjtRQUQ3QyxTQUFJLEdBQXNDLGlDQUFpQyxDQUFDO0lBQzVCLENBQUM7Q0FDbEQ7QUFTRCxNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsQ0FBQyxLQUF3QixFQUF1QixFQUFFO0lBQzFFLElBQUksS0FBSyxDQUFDLEtBQUssWUFBWSxVQUFVLEVBQUU7UUFDckMsT0FBTyxJQUFJLDBCQUEwQixDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQzlDO1NBQU07UUFDTCxRQUFRLEtBQUssQ0FBQyxNQUFNLEVBQUU7WUFDcEIsS0FBSyxDQUFDO2dCQUNKLE9BQU8sSUFBSSwrQkFBK0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNwRCxLQUFLLEdBQUc7Z0JBQ04sT0FBTyxJQUFJLHdCQUF3QixDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzdDLEtBQUssR0FBRztnQkFDTixPQUFPLElBQUksMEJBQTBCLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDL0MsS0FBSyxHQUFHO2dCQUNOLE9BQU8sSUFBSSwwQkFBMEIsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUMvQyxLQUFLLEdBQUc7Z0JBQ04sT0FBTyxJQUFJLHNCQUFzQixDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzNDO2dCQUNFLE9BQU8sSUFBSSwwQkFBMEIsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNoRDtLQUNGO0FBQ0gsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cEVycm9yUmVzcG9uc2UgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5cbmV4cG9ydCBjbGFzcyBQYXltZW50UmVxdWVzdEFjY2Vzc0RlbmllZCB7XG4gIGtpbmQ6ICdQYXltZW50UmVxdWVzdEFjY2Vzc0RlbmllZCcgPSAnUGF5bWVudFJlcXVlc3RBY2Nlc3NEZW5pZWQnO1xuICBjb25zdHJ1Y3RvcihyZWFkb25seSBlcnJvcjogSHR0cEVycm9yUmVzcG9uc2UpIHt9XG59XG5cbmV4cG9ydCBjbGFzcyBQYXltZW50UmVxdWVzdE5vdEZvdW5kIHtcbiAga2luZDogJ1BheW1lbnRSZXF1ZXN0Tm90Rm91bmQnID0gJ1BheW1lbnRSZXF1ZXN0Tm90Rm91bmQnO1xuICBjb25zdHJ1Y3RvcihyZWFkb25seSBlcnJvcjogSHR0cEVycm9yUmVzcG9uc2UpIHt9XG59XG5cbmV4cG9ydCBjbGFzcyBQYXltZW50UmVxdWVzdEJhZFJlcXVlc3Qge1xuICBraW5kOiAnUGF5bWVudFJlcXVlc3RCYWRSZXF1ZXN0JyA9ICdQYXltZW50UmVxdWVzdEJhZFJlcXVlc3QnO1xuICBjb25zdHJ1Y3RvcihyZWFkb25seSBlcnJvcjogSHR0cEVycm9yUmVzcG9uc2UpIHt9XG59XG5cbmV4cG9ydCBjbGFzcyBQYXltZW50UmVxdWVzdFVua25vd25FcnJvciB7XG4gIGtpbmQ6ICdQYXltZW50UmVxdWVzdFVua25vd25FcnJvcicgPSAnUGF5bWVudFJlcXVlc3RVbmtub3duRXJyb3InO1xuICBjb25zdHJ1Y3RvcihyZWFkb25seSBlcnJvcjogSHR0cEVycm9yUmVzcG9uc2UpIHt9XG59XG5cbmV4cG9ydCBjbGFzcyBQYXltZW50UmVxdWVzdENvbm5lY3Rpdml0eUVycm9yIHtcbiAga2luZDogJ1BheW1lbnRSZXF1ZXN0Q29ubmVjdGl2aXR5RXJyb3InID0gJ1BheW1lbnRSZXF1ZXN0Q29ubmVjdGl2aXR5RXJyb3InO1xuICBjb25zdHJ1Y3RvcihyZWFkb25seSBlcnJvcjogSHR0cEVycm9yUmVzcG9uc2UpIHt9XG59XG5cbmV4cG9ydCB0eXBlIFBheW1lbnRSZXF1ZXN0RXJyb3IgPVxuICB8IFBheW1lbnRSZXF1ZXN0QWNjZXNzRGVuaWVkXG4gIHwgUGF5bWVudFJlcXVlc3ROb3RGb3VuZFxuICB8IFBheW1lbnRSZXF1ZXN0QmFkUmVxdWVzdFxuICB8IFBheW1lbnRSZXF1ZXN0VW5rbm93bkVycm9yXG4gIHwgUGF5bWVudFJlcXVlc3RDb25uZWN0aXZpdHlFcnJvcjtcblxuZXhwb3J0IGNvbnN0IHBhcnNlRXJyb3IgPSAoZXJyb3I6IEh0dHBFcnJvclJlc3BvbnNlKTogUGF5bWVudFJlcXVlc3RFcnJvciA9PiB7XG4gIGlmIChlcnJvci5lcnJvciBpbnN0YW5jZW9mIEVycm9yRXZlbnQpIHtcbiAgICByZXR1cm4gbmV3IFBheW1lbnRSZXF1ZXN0VW5rbm93bkVycm9yKGVycm9yKTtcbiAgfSBlbHNlIHtcbiAgICBzd2l0Y2ggKGVycm9yLnN0YXR1cykge1xuICAgICAgY2FzZSAwOlxuICAgICAgICByZXR1cm4gbmV3IFBheW1lbnRSZXF1ZXN0Q29ubmVjdGl2aXR5RXJyb3IoZXJyb3IpO1xuICAgICAgY2FzZSA0MDA6XG4gICAgICAgIHJldHVybiBuZXcgUGF5bWVudFJlcXVlc3RCYWRSZXF1ZXN0KGVycm9yKTtcbiAgICAgIGNhc2UgNDAxOlxuICAgICAgICByZXR1cm4gbmV3IFBheW1lbnRSZXF1ZXN0QWNjZXNzRGVuaWVkKGVycm9yKTtcbiAgICAgIGNhc2UgNDAzOlxuICAgICAgICByZXR1cm4gbmV3IFBheW1lbnRSZXF1ZXN0QWNjZXNzRGVuaWVkKGVycm9yKTtcbiAgICAgIGNhc2UgNDA0OlxuICAgICAgICByZXR1cm4gbmV3IFBheW1lbnRSZXF1ZXN0Tm90Rm91bmQoZXJyb3IpO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIG5ldyBQYXltZW50UmVxdWVzdFVua25vd25FcnJvcihlcnJvcik7XG4gICAgfVxuICB9XG59O1xuIl19