import { Component, Directive, ViewChild, Output, EventEmitter } from '@angular/core';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { combineLatest } from 'rxjs';
import { pluck, map, tap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../payment-request.service";
import * as i2 from "@angular/router";
import * as i3 from "@backbase/ui-ang/alert";
import * as i4 from "../payment-request-tpp-information/payment-request-tpp-information.component";
import * as i5 from "../payment-request-amount/payment-request-amount.component";
import * as i6 from "../payment-request-account-selector/payment-request-account-selector.component";
import * as i7 from "@backbase/ui-ang/loading-indicator";
import * as i8 from "../payment-request-error/payment-request-error.component";
import * as i9 from "@angular/common";
import * as i10 from "@backbase/ui-ang/button";
export class PaymentRequestContainerComponent {
    constructor(service, route) {
        this.service = service;
        this.route = route;
        /**
         * Component context
         */
        this.hostRef = this;
        /**
         * Emitter that fires when allowing payment
         */
        this.redirectToAllowUrl = new EventEmitter();
        /**
         * Emitter that fires when rejecting payment
         */
        this.redirectToRejectUrl = new EventEmitter();
        /**
         * Error notification template reference
         */
        this.notificationErrorTemplate = '';
        /**
         * Stream of payment request ID
         */
        this.paymentRequestId = this.getRouteParam(this.route, 'paymentRequestId').pipe(map(paymentRequestId => paymentRequestId || ''));
        /**
         * Stream of Payment request
         */
        this.paymentRequest = this.service.paymentRequest.pipe(tap((paymentRequest) => {
            if (paymentRequest && paymentRequest.selectedAccount) {
                this.selectedAccount = paymentRequest.selectedAccount;
            }
        }));
        /**
         * Stream of loading spinner visibility flag
         */
        this.loading = this.service.loading;
        /**
         * Stream of Payment request errors
         */
        this.error = this.service.error;
        /**
         * Show account error flag
         */
        this.showAccountError = false;
        /**
         * Stream of saving flag
         */
        this.saving = this.service.saving;
        /**
         * Stream of saving errors
         */
        this.savingError = this.service.savingError;
    }
    /**
     * Sends allow payment request
     */
    allowPaymentRequest() {
        this.showAccountError = false;
        if (this.selectedAccount) {
            this.service
                .allowPaymentRequest(this.selectedAccount, this.notificationErrorTemplate)
                .pipe(tap((redirect) => {
                if (redirect.redirectUrl) {
                    this.redirectToAllowUrl.emit(redirect.redirectUrl);
                }
            }))
                .subscribe();
        }
        else {
            this.showAccountError = true;
        }
    }
    /**
     * Sends reject payment request
     */
    rejectPaymentRequest() {
        this.service
            .rejectPaymentRequest(this.notificationErrorTemplate)
            .pipe(tap((response) => {
            if (response.redirectUrl) {
                this.redirectToRejectUrl.emit(response.redirectUrl);
            }
        }))
            .subscribe();
    }
    ngOnInit() {
        this.service.getPaymentRequestFrom(this.paymentRequestId);
    }
    getRouteParam(route, param) {
        const paramValue = combineLatest(route.paramMap.pipe(pluck('params', param)), route.queryParamMap.pipe(pluck('params', param)), (params, qparams) => {
            return params ? params : qparams;
        });
        if (!route.parent) {
            return paramValue;
        }
        // ensure that level that has actual value keeps it from being cleared
        return combineLatest([paramValue, this.getRouteParam(route === null || route === void 0 ? void 0 : route.parent, param)]).pipe(map(params => params[0] || params[1]));
    }
}
PaymentRequestContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentRequestContainerComponent, deps: [{ token: i1.PaymentRequestService }, { token: i2.ActivatedRoute }], target: i0.ɵɵFactoryTarget.Component });
PaymentRequestContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: PaymentRequestContainerComponent, selector: "bb-payment-request-container", outputs: { redirectToAllowUrl: "redirectToAllowUrl", redirectToRejectUrl: "redirectToRejectUrl" }, viewQueries: [{ propertyName: "notificationErrorTemplate", first: true, predicate: ["notificationError"], descendants: true, static: true }], ngImport: i0, template: "<ng-container bbPaymentRequestWidgetCustomizable [bbHostRef]=\"hostRef\" [bbTemplateContext]=\"paymentRequest | async\">\n</ng-container>\n\n<ng-template bbPaymentRequestWidgetCustomizable let-hostRef let-paymentRequest=\"context\">\n  <ng-container *ngIf=\"hostRef.paymentRequestId | async; else errorTemplate\">\n    <ng-container *ngIf=\"!(hostRef.loading | async) as loading; else loadingTemplate\">\n      <ng-container *ngIf=\"!(hostRef.error | async); else errorTemplate\">\n        <div class=\"bb-payment-request\" *ngIf=\"paymentRequest\">\n          <div\n            class=\"bb-heading-2 bb-block bb-block--md\"\n            i18n=\"Widget header|Payment request access message@@payment-request.label.header\"\n            data-role=\"payment-request-label\">\n            Payment request\n          </div>\n\n          <div\n            i18n=\"Widget sub header|Payment request access message@@payment-request.label.sub-header\"\n            class=\"bb-subtitle bb-block bb-block--md\"\n            data-role=\"payment-request-description\">\n            Third party requested a payment from you. Select an account to pay from and review payment details to\n            proceed with payment.\n          </div>\n\n          <ng-container *ngIf=\"!(hostRef.saving | async); else savingLoadingTemplate\">\n            <bb-alert-ui\n              *ngIf=\"hostRef.savingError | async\"\n              title=\"Unknown error\"\n              i18n-title=\"Unknown Error|Unknown Error Label@@payment-request.label.error.unknown\"\n              message=\"Try to make action again or contact your system administrator.\"\n              i18n-message=\"Try again|Try again error message@@payment-request.label.error.tryAgain\"\n              data-role=\"allow-payment-request-error\"></bb-alert-ui>\n\n            <div class=\"bb-block bb-block--lg\">\n              <bb-payment-request-tpp-information [tpp]=\"paymentRequest.tpp\"></bb-payment-request-tpp-information>\n            </div>\n\n            <div class=\"bb-block bb-block--lg\">\n              <bb-payment-request-amount\n                [amount]=\"paymentRequest.amount\"\n                [currency]=\"paymentRequest.currency\"></bb-payment-request-amount>\n            </div>\n\n            <div class=\"bb-block bb-block--lg\">\n              <bb-payment-request-account-selector\n                [showError]=\"hostRef.showAccountError\"\n                [accounts]=\"paymentRequest.accounts\"\n                [(selectedAccount)]=\"hostRef.selectedAccount\"></bb-payment-request-account-selector>\n            </div>\n\n            <div class=\"bb-block bb-block--lg\">\n              <div\n                i18n=\"Payment details|Payment details message@@payment-request.label.payment-details\"\n                class=\"bb-block--sm bb-text-bold\"\n                data-role=\"payment-details-label\">\n                Payment details\n              </div>\n\n              <div>{{ paymentRequest.details }}</div>\n            </div>\n          </ng-container>\n\n          <div class=\"bb-button-bar bb-button-bar--reverse\">\n            <button\n              bbButton\n              [disabled]=\"hostRef.saving | async\"\n              (click)=\"hostRef.allowPaymentRequest()\"\n              data-role=\"confirm-button\"\n              i18n=\"Confirm button|Confirm consent request@@payment-request.label.confirm\"\n              color=\"primary\"\n              class=\"bb-button-bar__button\">\n              Confirm\n            </button>\n            <button\n              bbButton\n              [disabled]=\"hostRef.saving | async\"\n              (click)=\"hostRef.rejectPaymentRequest()\"\n              data-role=\"cancel-button\"\n              i18n=\"Cancel button|Cancel consent request@@payment-request.label.cancel\"\n              color=\"secondary\"\n              class=\"bb-button-bar__button\">\n              Cancel\n            </button>\n          </div>\n\n          <ng-template #savingLoadingTemplate>\n            <div class=\"bb-state-container\">\n              <bb-loading-indicator-ui\n                text=\"Processing the request...\"\n                i18n-text=\"\n                  Processing|Processing the allow/reject payment request@@payment-request.label.processing\"></bb-loading-indicator-ui>\n            </div>\n          </ng-template>\n        </div>\n      </ng-container>\n    </ng-container>\n\n    <ng-template #loadingTemplate>\n      <div class=\"bb-state-container\">\n        <bb-loading-indicator-ui></bb-loading-indicator-ui>\n      </div>\n    </ng-template>\n  </ng-container>\n\n  <ng-template #errorTemplate>\n    <div class=\"bb-state-container\">\n      <bb-payment-request-error\n        [paymentRequestId]=\"hostRef.paymentRequestId | async\"\n        [errorKind]=\"$any(hostRef.error | async)?.kind\"></bb-payment-request-error>\n    </div>\n  </ng-template>\n</ng-template>\n\n<ng-template #notificationError>\n  <span\n    i18n=\"\n      Operation Failed|Error notification when failing to save payment request@@payment-request.label.notification.error\">\n    Operation failed\n  </span>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i3.AlertComponent; }), selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i0.forwardRef(function () { return i4.PaymentRequestTppInformationComponent; }), selector: "bb-payment-request-tpp-information", inputs: ["tpp"] }, { type: i0.forwardRef(function () { return i5.PaymentRequestAmountComponent; }), selector: "bb-payment-request-amount", inputs: ["amount", "currency"] }, { type: i0.forwardRef(function () { return i6.PaymentRequestAccountSelectorComponent; }), selector: "bb-payment-request-account-selector", inputs: ["showError", "accounts", "selectedAccount"], outputs: ["selectedAccountChange"] }, { type: i0.forwardRef(function () { return i7.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i0.forwardRef(function () { return i8.PaymentRequestErrorComponent; }), selector: "bb-payment-request-error", inputs: ["paymentRequestId", "errorKind"] }], directives: [{ type: i0.forwardRef(function () { return PaymentRequestWidgetCustomizableDirective; }), selector: "[bbPaymentRequestWidgetCustomizable]" }, { type: i0.forwardRef(function () { return i9.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i10.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "async": i0.forwardRef(function () { return i9.AsyncPipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentRequestContainerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payment-request-container',
                    templateUrl: './payment-request-container.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.PaymentRequestService }, { type: i2.ActivatedRoute }]; }, propDecorators: { redirectToAllowUrl: [{
                type: Output
            }], redirectToRejectUrl: [{
                type: Output
            }], notificationErrorTemplate: [{
                type: ViewChild,
                args: ['notificationError', { static: true }]
            }] } });
export class PaymentRequestWidgetCustomizableDirective extends BbTemplate {
}
PaymentRequestWidgetCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentRequestWidgetCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
PaymentRequestWidgetCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: PaymentRequestWidgetCustomizableDirective, selector: "[bbPaymentRequestWidgetCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentRequestWidgetCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbPaymentRequestWidgetCustomizable]',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,