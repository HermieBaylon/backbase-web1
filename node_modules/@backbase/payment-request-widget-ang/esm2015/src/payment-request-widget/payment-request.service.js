import { Injectable } from '@angular/core';
import { ReplaySubject, BehaviorSubject, of } from 'rxjs';
import { catchError, pluck, filter, distinctUntilChanged, tap, switchMap, shareReplay, take, map, } from 'rxjs/operators';
import { parseError } from './payment-request-error';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/data-ang/consent";
import * as i2 from "@backbase/ui-ang/notification";
export class PaymentRequestService {
    constructor(consentDataHttpService, notification) {
        this.consentDataHttpService = consentDataHttpService;
        this.notification = notification;
        this.paymentRequestId = new ReplaySubject(1);
        this.loading = new BehaviorSubject(true);
        this.error = new BehaviorSubject(undefined);
        this.saving = new BehaviorSubject(false);
        this.savingError = new BehaviorSubject(undefined);
        this.paymentRequest = this.paymentRequestId.pipe(filter((id) => !!id), distinctUntilChanged(), tap(() => this.loading.next(true)), switchMap((id) => this.loadPaymentRequestRequest(id)), tap(() => this.error.next(undefined)), catchError((error) => {
            this.error.next(error);
            return of(undefined);
        }), tap(() => this.loading.next(false)), shareReplay(1));
    }
    getPaymentRequestFrom(paymentRequestId) {
        paymentRequestId.subscribe(this.paymentRequestId);
    }
    allowPaymentRequest(account, templateRef) {
        return this.paymentRequest.pipe(take(1), filter((paymentRequest) => !!paymentRequest), tap(() => this.saving.next(true)), switchMap((paymentRequest) => this.allow(paymentRequest, account)), tap(() => this.savingError.next(undefined)), catchError((error) => this.handleError(error, templateRef)), tap(() => this.saving.next(false)));
    }
    rejectPaymentRequest(templateRef) {
        return this.paymentRequest.pipe(take(1), filter((paymentRequest) => paymentRequest !== undefined), tap(() => this.saving.next(true)), switchMap((paymentRequest) => this.reject(paymentRequest)), tap(() => this.savingError.next(undefined)), catchError((error) => this.handleError(error, templateRef)), tap(() => this.saving.next(false)));
    }
    handleError(error, templateRef) {
        this.savingError.next(error);
        this.notification.showNotification({
            message: templateRef,
            modifier: 'error',
        });
        return of({});
    }
    loadPaymentRequestRequest(id) {
        return this.consentDataHttpService.getIdByIdgetPaymentRequestById({ id }, 'response').pipe(pluck('body'), catchError((error) => {
            throw parseError(error);
        }));
    }
    allow({ id, allowPaymentRedirectUrl: redirectUrl }, { id: accountId }) {
        return this.consentDataHttpService.postConfirmById({ id, paymentPost: { accountId } }).pipe(map(() => ({ redirectUrl })), catchError((error) => {
            throw parseError(error);
        }));
    }
    reject({ id, rejectPaymentRedirectUrl: redirectUrl }) {
        return this.consentDataHttpService.postRejectByIdpostReject({ id }).pipe(map(() => ({ redirectUrl })), catchError((error) => {
            throw parseError(error);
        }));
    }
}
PaymentRequestService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentRequestService, deps: [{ token: i1.PaymentRequestsHttpService }, { token: i2.NotificationService }], target: i0.ɵɵFactoryTarget.Injectable });
PaymentRequestService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentRequestService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentRequestService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.PaymentRequestsHttpService }, { type: i2.NotificationService }]; } });
//# sourceMappingURL=data:application/json;base64,