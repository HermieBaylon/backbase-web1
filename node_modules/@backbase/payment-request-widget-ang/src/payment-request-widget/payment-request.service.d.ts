import { TemplateRef } from '@angular/core';
import { Observable, BehaviorSubject } from 'rxjs';
import { PaymentRequestsHttpService, PaymentRequest, Account } from '@backbase/data-ang/consent';
import { NotificationService } from '@backbase/ui-ang/notification';
import { PaymentRequestError } from './payment-request-error';
import * as i0 from "@angular/core";
export { PaymentRequest, Account, Tpp } from '@backbase/data-ang/consent';
export interface RedirectUrl {
    redirectUrl?: string;
}
export declare class PaymentRequestService {
    private readonly consentDataHttpService;
    private readonly notification;
    constructor(consentDataHttpService: PaymentRequestsHttpService, notification: NotificationService);
    private readonly paymentRequestId;
    readonly loading: BehaviorSubject<boolean>;
    readonly error: BehaviorSubject<PaymentRequestError | undefined>;
    readonly saving: BehaviorSubject<boolean>;
    readonly savingError: BehaviorSubject<PaymentRequestError | undefined>;
    readonly paymentRequest: Observable<PaymentRequest | undefined>;
    getPaymentRequestFrom(paymentRequestId: Observable<string>): void;
    allowPaymentRequest(account: Account, templateRef: TemplateRef<any> | string): Observable<RedirectUrl>;
    rejectPaymentRequest(templateRef: TemplateRef<any> | string): Observable<RedirectUrl>;
    private handleError;
    private loadPaymentRequestRequest;
    private allow;
    private reject;
    static ɵfac: i0.ɵɵFactoryDeclaration<PaymentRequestService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<PaymentRequestService>;
}
