import * as i0 from '@angular/core';
import { Component, Input, Directive, EventEmitter, Output, Injectable, ViewChild, NgModule } from '@angular/core';
import * as i2 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i1$5 from '@backbase/foundation-ang/core';
import { BbTemplate, BackbaseCoreModule } from '@backbase/foundation-ang/core';
import * as i1$2 from '@backbase/consent-ui';
import { ConsentUiModule } from '@backbase/consent-ui';
import * as i10 from '@backbase/ui-ang/button';
import { ButtonModule } from '@backbase/ui-ang/button';
import * as i3 from '@backbase/ui-ang/alert';
import { AlertModule } from '@backbase/ui-ang/alert';
import * as i7 from '@backbase/ui-ang/loading-indicator';
import { LoadingIndicatorModule } from '@backbase/ui-ang/loading-indicator';
import * as i2$1 from '@backbase/ui-ang/product-item-basic-account';
import { ProductItemBasicAccountModule } from '@backbase/ui-ang/product-item-basic-account';
import * as i1$1 from '@backbase/ui-ang/empty-state';
import { EmptyStateModule } from '@backbase/ui-ang/empty-state';
import * as i1 from '@backbase/ui-ang/amount';
import { AmountModule } from '@backbase/ui-ang/amount';
import * as i2$2 from '@backbase/ui-ang/notification';
import { NotificationModule } from '@backbase/ui-ang/notification';
import * as i1$3 from '@backbase/ui-ang/account-selector';
import { AccountSelectorModule } from '@backbase/ui-ang/account-selector';
import { ReplaySubject, BehaviorSubject, of, combineLatest } from 'rxjs';
import { filter, distinctUntilChanged, tap, switchMap, catchError, shareReplay, take, pluck, map } from 'rxjs/operators';
import * as i1$4 from '@backbase/data-ang/consent';
import * as i2$3 from '@angular/router';

class PaymentRequestAmountComponent {
    constructor() {
        /**
         * Component context
         */
        this.hostRef = this;
        /**
         * Amount of the request
         */
        this.amount = '';
        /**
         * Currency of the request
         */
        this.currency = '';
    }
}
PaymentRequestAmountComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentRequestAmountComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
PaymentRequestAmountComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: PaymentRequestAmountComponent, selector: "bb-payment-request-amount", inputs: { amount: "amount", currency: "currency" }, ngImport: i0, template: "<ng-container\n  bbPaymentRequestAmountCustomizable\n  [bbHostRef]=\"hostRef\"\n  [bbTemplateContext]=\"{\n    amount: amount,\n    currency: currency\n  }\">\n</ng-container>\n\n<ng-template bbPaymentRequestAmountCustomizable let-hostRef let-amount=\"context.amount\" let-currency=\"context.currency\">\n  <div\n    i18n=\"Amount|Amount message@@payment-request.label.amount\"\n    data-role=\"amount-label\"\n    class=\"bb-block bb-block--sm bb-text-bold\">\n    Amount\n  </div>\n  <bb-amount-ui\n    class=\"bb-payment-request__amount\"\n    data-role=\"amount-value\"\n    [amount]=\"amount\"\n    [currency]=\"currency\"></bb-amount-ui>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i1.AmountComponent; }), selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }], directives: [{ type: i0.forwardRef(function () { return PaymentRequestAmountCustomizableDirective; }), selector: "[bbPaymentRequestAmountCustomizable]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentRequestAmountComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payment-request-amount',
                    templateUrl: './payment-request-amount.component.html',
                }]
        }], propDecorators: { amount: [{
                type: Input
            }], currency: [{
                type: Input
            }] } });
class PaymentRequestAmountCustomizableDirective extends BbTemplate {
}
PaymentRequestAmountCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentRequestAmountCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
PaymentRequestAmountCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: PaymentRequestAmountCustomizableDirective, selector: "[bbPaymentRequestAmountCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentRequestAmountCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbPaymentRequestAmountCustomizable]',
                }]
        }] });

class PaymentRequestErrorComponent {
}
PaymentRequestErrorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentRequestErrorComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
PaymentRequestErrorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: PaymentRequestErrorComponent, selector: "bb-payment-request-error", inputs: { paymentRequestId: "paymentRequestId", errorKind: "errorKind" }, ngImport: i0, template: "<bb-empty-state-ui\n  *ngIf=\"!paymentRequestId\"\n  title=\"Unexpected Error\"\n  i18n-title=\"\n    Unexpected Error title|Empty state label when there is an unexpected\n    error@@payment-request.error.noPaymentRequest.title\"\n  subtitle=\"Something's gone wrong with our server. Please try again later.\"\n  i18n-subtitle=\"\n    Unexpected Error subtitle|Empty state subtitle label when there is an unexpected\n    error@@payment-request.error.noPaymentRequest.subtitle\"\n  iconModifier=\"error\"></bb-empty-state-ui>\n<ng-container *ngIf=\"paymentRequestId && errorKind\" [ngSwitch]=\"errorKind\">\n  <bb-empty-state-ui\n    *ngSwitchCase=\"'PaymentRequestAccessDenied'\"\n    title=\"Permissions required\"\n    i18n-title=\"\n      Permissions required|Error state label when user does not have permissions to view payment\n      request@@payment-request.error.accessDenied.title\"\n    subtitle=\"You don't have permissions to allow payments.\"\n    i18n-subtitle=\"\n      No Permissions Subtitle|Error state subtitle label when user does not have permissions to view payment\n      requests@@payment-request.error.accessDenied.subtitle\"\n    iconModifier=\"lock\"></bb-empty-state-ui>\n\n  <bb-empty-state-ui\n    *ngSwitchCase=\"'PaymentRequestConnectivityError'\"\n    title=\"Connectivity Error\"\n    i18n-title=\"\n      Connectivity Error title|Empty state label when there is connectivity\n      error@@payment-request.error.connectivity.title\"\n    subtitle=\"Are you connected to the internet? Please check your connection and try again.\"\n    i18n-subtitle=\"\n      Connectivity Error subtitle|Empty state subtitle label when there is connectivity\n      error@@payment-request.error.connectivity.subtitle\"\n    iconModifier=\"error\"></bb-empty-state-ui>\n\n  <!-- This will usually happen on environment misconfiguration -->\n  <!-- PaymentRequestNotFound | PaymentRequestUnknownError | PaymentRequestBadRequest-->\n  <bb-empty-state-ui\n    *ngSwitchDefault\n    title=\"Unexpected Error\"\n    i18n-title=\"\n      Unexpected Error title|Empty state label when there is an unexpected error@@payment-request.error.unexpected.title\"\n    subtitle=\"Something's gone wrong with our server. Please try again later.\"\n    i18n-subtitle=\"\n      Unexpected Error subtitle|Empty state subtitle label when there is an unexpected\n      error@@payment-request.error.unexpected.subtitle\"\n    iconModifier=\"error\"></bb-empty-state-ui>\n</ng-container>\n", components: [{ type: i1$1.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i2.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i2.NgSwitchDefault, selector: "[ngSwitchDefault]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentRequestErrorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payment-request-error',
                    templateUrl: './payment-request-error.component.html',
                }]
        }], propDecorators: { paymentRequestId: [{
                type: Input
            }], errorKind: [{
                type: Input
            }] } });

class PaymentRequestTppInformationComponent {
    constructor() {
        /**
         * Component context
         */
        this.hostRef = this;
    }
}
PaymentRequestTppInformationComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentRequestTppInformationComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
PaymentRequestTppInformationComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: PaymentRequestTppInformationComponent, selector: "bb-payment-request-tpp-information", inputs: { tpp: "tpp" }, ngImport: i0, template: "<ng-container bbPaymentRequestTppInformationCustomizable [bbHostRef]=\"hostRef\" [bbTemplateContext]=\"tpp\">\n</ng-container>\n\n<ng-template bbPaymentRequestTppInformationCustomizable let-hostRef let-tpp=\"context\">\n  <div\n    class=\"bb-block bb-block--sm bb-text-bold\"\n    data-role=\"pay-to-label\"\n    i18n=\"Pay to|Third party information@@payment-request.label.payTo\">\n    Pay to\n  </div>\n\n  <div class=\"card card-sm\">\n    <div class=\"card-body\">\n      <bb-third-party-provider-ui\n        [name]=\"tpp.name\"\n        [url]=\"tpp.website\"\n        [verified]=\"tpp.isTrusted\"\n        [image]=\"tpp.imageUrl\"\n        data-role=\"third-party-provider-label\">\n      </bb-third-party-provider-ui>\n    </div>\n  </div>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i1$2.ӨThirdPartyProviderComponent; }), selector: "bb-third-party-provider-ui", inputs: ["name", "image", "url", "verified", "condensed", "expiryDate", "expired", "showExpire"] }], directives: [{ type: i0.forwardRef(function () { return PaymentRequestTppInformationCustomizableDirective; }), selector: "[bbPaymentRequestTppInformationCustomizable]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentRequestTppInformationComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payment-request-tpp-information',
                    templateUrl: './payment-request-tpp-information.component.html',
                }]
        }], propDecorators: { tpp: [{
                type: Input
            }] } });
class PaymentRequestTppInformationCustomizableDirective extends BbTemplate {
}
PaymentRequestTppInformationCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentRequestTppInformationCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
PaymentRequestTppInformationCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: PaymentRequestTppInformationCustomizableDirective, selector: "[bbPaymentRequestTppInformationCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentRequestTppInformationCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbPaymentRequestTppInformationCustomizable]',
                }]
        }] });

class PaymentRequestAccountSelectorComponent {
    constructor() {
        /**
         * Component context
         */
        this.hostRef = this;
        /**
         * If error should be shown
         */
        this.showError = false;
        /**
         * List of accounts
         */
        this.accounts = [];
        /**
         * Emitter that fires when selecting account
         */
        this.selectedAccountChange = new EventEmitter();
    }
    /**
     * Select account event handler
     * @param account
     */
    onSelectAccount(account) {
        this.selectedAccountChange.emit(account);
        this.showError = false;
    }
}
PaymentRequestAccountSelectorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentRequestAccountSelectorComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
PaymentRequestAccountSelectorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: PaymentRequestAccountSelectorComponent, selector: "bb-payment-request-account-selector", inputs: { showError: "showError", accounts: "accounts", selectedAccount: "selectedAccount" }, outputs: { selectedAccountChange: "selectedAccountChange" }, ngImport: i0, template: "<ng-container bbPaymentRequestAccountSelectorCustomizable [bbHostRef]=\"hostRef\" [bbTemplateContext]=\"accounts\">\n</ng-container>\n\n<ng-template bbPaymentRequestAccountSelectorCustomizable let-hostRef let-accounts=\"context\">\n  <div\n    class=\"bb-block bb-block--sm bb-text-bold\"\n    data-role=\"from-account-label\"\n    i18n=\"From account|From account label@@payment-request.label.fromAccount\">\n    From account\n  </div>\n  <div [ngClass]=\"{ 'border border-danger rounded': hostRef.showError }\">\n    <bb-account-selector-ui\n      data-role=\"account-selector\"\n      [items]=\"accounts\"\n      [disableScrollEnd]=\"false\"\n      [multiple]=\"false\"\n      [closeOnSelect]=\"true\"\n      [filterItems]=\"false\"\n      [selectedItems]=\"hostRef.selectedAccount\"\n      [dropdownPosition]=\"'bottom'\"\n      (change)=\"hostRef.onSelectAccount($event)\"\n      placeholder=\"Select Accounts\"\n      i18n-placeholder=\"Select Accounts placeholder@@payment-request.account-selector.placeholder\">\n      <ng-template bbCustomSingleSelectedItemLabel let-item=\"item\">\n        <bb-product-item-basic-account-ui\n          [active]=\"true\"\n          [amount]=\"item.balance\"\n          [currency]=\"item.currency\"\n          [productNumber]=\"item.IBAN || item.BBAN || item.number\"\n          [title]=\"item.name\">\n          <ng-template bbCustomProductItemBasicAccountDetailsFormatter let-amount=\"amount\" let-currency=\"currency\">\n            <bb-amount-ui\n              class=\"font-weight-bold\"\n              [amount]=\"amount\"\n              [currency]=\"currency\"\n              [mapCurrency]=\"false\"></bb-amount-ui>\n          </ng-template>\n        </bb-product-item-basic-account-ui>\n      </ng-template>\n    </bb-account-selector-ui>\n  </div>\n  <div\n    *ngIf=\"hostRef.showError\"\n    class=\"bb-payment-request-product-selector__no-account\"\n    data-role=\"no-accounts-error-message\"\n    i18n=\"Select an account|No account selected label@@payment-request.label.noAccountSelected\">\n    Select an account.\n  </div>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i1$3.AccountSelectorComponent; }), selector: "bb-account-selector-ui", inputs: ["items", "disabled", "notFoundText", "showError", "productNumberFormat", "selectedItems", "multiple", "closeOnSelect", "searchable", "clearable", "placeholder", "loading", "dropdownPosition", "disableScrollEnd", "highlight", "filterItems", "markFirst", "internalFiltering", "virtualScroll", "required", "typeahead", "minTermLength", "typeToSearchText", "aria-describedby", "aria-labelledby", "aria-invalid", "searchFunc", "showCurrencySymbol", "showBankBranchCode", "groupByFn", "groupValueFn", "size", "compareItemsWith"], outputs: ["search", "clearSearch", "scroll", "scrollToEnd", "remove", "change", "filterChange", "focus", "blur"] }, { type: i0.forwardRef(function () { return i2$1.ProductItemBasicAccountComponent; }), selector: "bb-product-item-basic-account-ui", inputs: ["title", "productNumber", "productNumberFormat", "currency", "showCurrencySymbol", "amount", "highlight", "productDetailsInfo", "active", "favorite", "favoriteIconColor", "selected", "type", "status", "balanceLabel", "bankBranchCode"] }, { type: i0.forwardRef(function () { return i1.AmountComponent; }), selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }], directives: [{ type: i0.forwardRef(function () { return PaymentRequestAccountSelectorCustomizableDirective; }), selector: "[bbPaymentRequestAccountSelectorCustomizable]" }, { type: i0.forwardRef(function () { return i2.NgClass; }), selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i0.forwardRef(function () { return i1$3.CustomSingleSelectedItemLabelDirective; }), selector: "ng-template[bbCustomSingleSelectedItemLabel]" }, { type: i0.forwardRef(function () { return i2$1.CustomProductItemBasicAccountDetailsFormatterDirective; }), selector: "ng-template[bbCustomProductItemBasicAccountDetailsFormatter]" }, { type: i0.forwardRef(function () { return i2.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentRequestAccountSelectorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payment-request-account-selector',
                    templateUrl: './payment-request-account-selector.component.html',
                }]
        }], propDecorators: { showError: [{
                type: Input
            }], accounts: [{
                type: Input
            }], selectedAccount: [{
                type: Input
            }], selectedAccountChange: [{
                type: Output
            }] } });
class PaymentRequestAccountSelectorCustomizableDirective extends BbTemplate {
}
PaymentRequestAccountSelectorCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentRequestAccountSelectorCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
PaymentRequestAccountSelectorCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: PaymentRequestAccountSelectorCustomizableDirective, selector: "[bbPaymentRequestAccountSelectorCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentRequestAccountSelectorCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbPaymentRequestAccountSelectorCustomizable]',
                }]
        }] });

class PaymentRequestAccessDenied {
    constructor(error) {
        this.error = error;
        this.kind = 'PaymentRequestAccessDenied';
    }
}
class PaymentRequestNotFound {
    constructor(error) {
        this.error = error;
        this.kind = 'PaymentRequestNotFound';
    }
}
class PaymentRequestBadRequest {
    constructor(error) {
        this.error = error;
        this.kind = 'PaymentRequestBadRequest';
    }
}
class PaymentRequestUnknownError {
    constructor(error) {
        this.error = error;
        this.kind = 'PaymentRequestUnknownError';
    }
}
class PaymentRequestConnectivityError {
    constructor(error) {
        this.error = error;
        this.kind = 'PaymentRequestConnectivityError';
    }
}
const parseError = (error) => {
    if (error.error instanceof ErrorEvent) {
        return new PaymentRequestUnknownError(error);
    }
    else {
        switch (error.status) {
            case 0:
                return new PaymentRequestConnectivityError(error);
            case 400:
                return new PaymentRequestBadRequest(error);
            case 401:
                return new PaymentRequestAccessDenied(error);
            case 403:
                return new PaymentRequestAccessDenied(error);
            case 404:
                return new PaymentRequestNotFound(error);
            default:
                return new PaymentRequestUnknownError(error);
        }
    }
};

class PaymentRequestService {
    constructor(consentDataHttpService, notification) {
        this.consentDataHttpService = consentDataHttpService;
        this.notification = notification;
        this.paymentRequestId = new ReplaySubject(1);
        this.loading = new BehaviorSubject(true);
        this.error = new BehaviorSubject(undefined);
        this.saving = new BehaviorSubject(false);
        this.savingError = new BehaviorSubject(undefined);
        this.paymentRequest = this.paymentRequestId.pipe(filter((id) => !!id), distinctUntilChanged(), tap(() => this.loading.next(true)), switchMap((id) => this.loadPaymentRequestRequest(id)), tap(() => this.error.next(undefined)), catchError((error) => {
            this.error.next(error);
            return of(undefined);
        }), tap(() => this.loading.next(false)), shareReplay(1));
    }
    getPaymentRequestFrom(paymentRequestId) {
        paymentRequestId.subscribe(this.paymentRequestId);
    }
    allowPaymentRequest(account, templateRef) {
        return this.paymentRequest.pipe(take(1), filter((paymentRequest) => !!paymentRequest), tap(() => this.saving.next(true)), switchMap((paymentRequest) => this.allow(paymentRequest, account)), tap(() => this.savingError.next(undefined)), catchError((error) => this.handleError(error, templateRef)), tap(() => this.saving.next(false)));
    }
    rejectPaymentRequest(templateRef) {
        return this.paymentRequest.pipe(take(1), filter((paymentRequest) => paymentRequest !== undefined), tap(() => this.saving.next(true)), switchMap((paymentRequest) => this.reject(paymentRequest)), tap(() => this.savingError.next(undefined)), catchError((error) => this.handleError(error, templateRef)), tap(() => this.saving.next(false)));
    }
    handleError(error, templateRef) {
        this.savingError.next(error);
        this.notification.showNotification({
            message: templateRef,
            modifier: 'error',
        });
        return of({});
    }
    loadPaymentRequestRequest(id) {
        return this.consentDataHttpService.getIdByIdgetPaymentRequestById({ id }, 'response').pipe(pluck('body'), catchError((error) => {
            throw parseError(error);
        }));
    }
    allow({ id, allowPaymentRedirectUrl: redirectUrl }, { id: accountId }) {
        return this.consentDataHttpService.postConfirmById({ id, paymentPost: { accountId } }).pipe(map(() => ({ redirectUrl })), catchError((error) => {
            throw parseError(error);
        }));
    }
    reject({ id, rejectPaymentRedirectUrl: redirectUrl }) {
        return this.consentDataHttpService.postRejectByIdpostReject({ id }).pipe(map(() => ({ redirectUrl })), catchError((error) => {
            throw parseError(error);
        }));
    }
}
PaymentRequestService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentRequestService, deps: [{ token: i1$4.PaymentRequestsHttpService }, { token: i2$2.NotificationService }], target: i0.ɵɵFactoryTarget.Injectable });
PaymentRequestService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentRequestService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentRequestService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1$4.PaymentRequestsHttpService }, { type: i2$2.NotificationService }]; } });

class PaymentRequestContainerComponent {
    constructor(service, route) {
        this.service = service;
        this.route = route;
        /**
         * Component context
         */
        this.hostRef = this;
        /**
         * Emitter that fires when allowing payment
         */
        this.redirectToAllowUrl = new EventEmitter();
        /**
         * Emitter that fires when rejecting payment
         */
        this.redirectToRejectUrl = new EventEmitter();
        /**
         * Error notification template reference
         */
        this.notificationErrorTemplate = '';
        /**
         * Stream of payment request ID
         */
        this.paymentRequestId = this.getRouteParam(this.route, 'paymentRequestId').pipe(map(paymentRequestId => paymentRequestId || ''));
        /**
         * Stream of Payment request
         */
        this.paymentRequest = this.service.paymentRequest.pipe(tap((paymentRequest) => {
            if (paymentRequest && paymentRequest.selectedAccount) {
                this.selectedAccount = paymentRequest.selectedAccount;
            }
        }));
        /**
         * Stream of loading spinner visibility flag
         */
        this.loading = this.service.loading;
        /**
         * Stream of Payment request errors
         */
        this.error = this.service.error;
        /**
         * Show account error flag
         */
        this.showAccountError = false;
        /**
         * Stream of saving flag
         */
        this.saving = this.service.saving;
        /**
         * Stream of saving errors
         */
        this.savingError = this.service.savingError;
    }
    /**
     * Sends allow payment request
     */
    allowPaymentRequest() {
        this.showAccountError = false;
        if (this.selectedAccount) {
            this.service
                .allowPaymentRequest(this.selectedAccount, this.notificationErrorTemplate)
                .pipe(tap((redirect) => {
                if (redirect.redirectUrl) {
                    this.redirectToAllowUrl.emit(redirect.redirectUrl);
                }
            }))
                .subscribe();
        }
        else {
            this.showAccountError = true;
        }
    }
    /**
     * Sends reject payment request
     */
    rejectPaymentRequest() {
        this.service
            .rejectPaymentRequest(this.notificationErrorTemplate)
            .pipe(tap((response) => {
            if (response.redirectUrl) {
                this.redirectToRejectUrl.emit(response.redirectUrl);
            }
        }))
            .subscribe();
    }
    ngOnInit() {
        this.service.getPaymentRequestFrom(this.paymentRequestId);
    }
    getRouteParam(route, param) {
        const paramValue = combineLatest(route.paramMap.pipe(pluck('params', param)), route.queryParamMap.pipe(pluck('params', param)), (params, qparams) => {
            return params ? params : qparams;
        });
        if (!route.parent) {
            return paramValue;
        }
        // ensure that level that has actual value keeps it from being cleared
        return combineLatest([paramValue, this.getRouteParam(route === null || route === void 0 ? void 0 : route.parent, param)]).pipe(map(params => params[0] || params[1]));
    }
}
PaymentRequestContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentRequestContainerComponent, deps: [{ token: PaymentRequestService }, { token: i2$3.ActivatedRoute }], target: i0.ɵɵFactoryTarget.Component });
PaymentRequestContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: PaymentRequestContainerComponent, selector: "bb-payment-request-container", outputs: { redirectToAllowUrl: "redirectToAllowUrl", redirectToRejectUrl: "redirectToRejectUrl" }, viewQueries: [{ propertyName: "notificationErrorTemplate", first: true, predicate: ["notificationError"], descendants: true, static: true }], ngImport: i0, template: "<ng-container bbPaymentRequestWidgetCustomizable [bbHostRef]=\"hostRef\" [bbTemplateContext]=\"paymentRequest | async\">\n</ng-container>\n\n<ng-template bbPaymentRequestWidgetCustomizable let-hostRef let-paymentRequest=\"context\">\n  <ng-container *ngIf=\"hostRef.paymentRequestId | async; else errorTemplate\">\n    <ng-container *ngIf=\"!(hostRef.loading | async) as loading; else loadingTemplate\">\n      <ng-container *ngIf=\"!(hostRef.error | async); else errorTemplate\">\n        <div class=\"bb-payment-request\" *ngIf=\"paymentRequest\">\n          <div\n            class=\"bb-heading-2 bb-block bb-block--md\"\n            i18n=\"Widget header|Payment request access message@@payment-request.label.header\"\n            data-role=\"payment-request-label\">\n            Payment request\n          </div>\n\n          <div\n            i18n=\"Widget sub header|Payment request access message@@payment-request.label.sub-header\"\n            class=\"bb-subtitle bb-block bb-block--md\"\n            data-role=\"payment-request-description\">\n            Third party requested a payment from you. Select an account to pay from and review payment details to\n            proceed with payment.\n          </div>\n\n          <ng-container *ngIf=\"!(hostRef.saving | async); else savingLoadingTemplate\">\n            <bb-alert-ui\n              *ngIf=\"hostRef.savingError | async\"\n              title=\"Unknown error\"\n              i18n-title=\"Unknown Error|Unknown Error Label@@payment-request.label.error.unknown\"\n              message=\"Try to make action again or contact your system administrator.\"\n              i18n-message=\"Try again|Try again error message@@payment-request.label.error.tryAgain\"\n              data-role=\"allow-payment-request-error\"></bb-alert-ui>\n\n            <div class=\"bb-block bb-block--lg\">\n              <bb-payment-request-tpp-information [tpp]=\"paymentRequest.tpp\"></bb-payment-request-tpp-information>\n            </div>\n\n            <div class=\"bb-block bb-block--lg\">\n              <bb-payment-request-amount\n                [amount]=\"paymentRequest.amount\"\n                [currency]=\"paymentRequest.currency\"></bb-payment-request-amount>\n            </div>\n\n            <div class=\"bb-block bb-block--lg\">\n              <bb-payment-request-account-selector\n                [showError]=\"hostRef.showAccountError\"\n                [accounts]=\"paymentRequest.accounts\"\n                [(selectedAccount)]=\"hostRef.selectedAccount\"></bb-payment-request-account-selector>\n            </div>\n\n            <div class=\"bb-block bb-block--lg\">\n              <div\n                i18n=\"Payment details|Payment details message@@payment-request.label.payment-details\"\n                class=\"bb-block--sm bb-text-bold\"\n                data-role=\"payment-details-label\">\n                Payment details\n              </div>\n\n              <div>{{ paymentRequest.details }}</div>\n            </div>\n          </ng-container>\n\n          <div class=\"bb-button-bar bb-button-bar--reverse\">\n            <button\n              bbButton\n              [disabled]=\"hostRef.saving | async\"\n              (click)=\"hostRef.allowPaymentRequest()\"\n              data-role=\"confirm-button\"\n              i18n=\"Confirm button|Confirm consent request@@payment-request.label.confirm\"\n              color=\"primary\"\n              class=\"bb-button-bar__button\">\n              Confirm\n            </button>\n            <button\n              bbButton\n              [disabled]=\"hostRef.saving | async\"\n              (click)=\"hostRef.rejectPaymentRequest()\"\n              data-role=\"cancel-button\"\n              i18n=\"Cancel button|Cancel consent request@@payment-request.label.cancel\"\n              color=\"secondary\"\n              class=\"bb-button-bar__button\">\n              Cancel\n            </button>\n          </div>\n\n          <ng-template #savingLoadingTemplate>\n            <div class=\"bb-state-container\">\n              <bb-loading-indicator-ui\n                text=\"Processing the request...\"\n                i18n-text=\"\n                  Processing|Processing the allow/reject payment request@@payment-request.label.processing\"></bb-loading-indicator-ui>\n            </div>\n          </ng-template>\n        </div>\n      </ng-container>\n    </ng-container>\n\n    <ng-template #loadingTemplate>\n      <div class=\"bb-state-container\">\n        <bb-loading-indicator-ui></bb-loading-indicator-ui>\n      </div>\n    </ng-template>\n  </ng-container>\n\n  <ng-template #errorTemplate>\n    <div class=\"bb-state-container\">\n      <bb-payment-request-error\n        [paymentRequestId]=\"hostRef.paymentRequestId | async\"\n        [errorKind]=\"$any(hostRef.error | async)?.kind\"></bb-payment-request-error>\n    </div>\n  </ng-template>\n</ng-template>\n\n<ng-template #notificationError>\n  <span\n    i18n=\"\n      Operation Failed|Error notification when failing to save payment request@@payment-request.label.notification.error\">\n    Operation failed\n  </span>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i3.AlertComponent; }), selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i0.forwardRef(function () { return PaymentRequestTppInformationComponent; }), selector: "bb-payment-request-tpp-information", inputs: ["tpp"] }, { type: i0.forwardRef(function () { return PaymentRequestAmountComponent; }), selector: "bb-payment-request-amount", inputs: ["amount", "currency"] }, { type: i0.forwardRef(function () { return PaymentRequestAccountSelectorComponent; }), selector: "bb-payment-request-account-selector", inputs: ["showError", "accounts", "selectedAccount"], outputs: ["selectedAccountChange"] }, { type: i0.forwardRef(function () { return i7.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i0.forwardRef(function () { return PaymentRequestErrorComponent; }), selector: "bb-payment-request-error", inputs: ["paymentRequestId", "errorKind"] }], directives: [{ type: i0.forwardRef(function () { return PaymentRequestWidgetCustomizableDirective; }), selector: "[bbPaymentRequestWidgetCustomizable]" }, { type: i0.forwardRef(function () { return i2.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i10.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "async": i0.forwardRef(function () { return i2.AsyncPipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentRequestContainerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payment-request-container',
                    templateUrl: './payment-request-container.component.html',
                }]
        }], ctorParameters: function () { return [{ type: PaymentRequestService }, { type: i2$3.ActivatedRoute }]; }, propDecorators: { redirectToAllowUrl: [{
                type: Output
            }], redirectToRejectUrl: [{
                type: Output
            }], notificationErrorTemplate: [{
                type: ViewChild,
                args: ['notificationError', { static: true }]
            }] } });
class PaymentRequestWidgetCustomizableDirective extends BbTemplate {
}
PaymentRequestWidgetCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentRequestWidgetCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
PaymentRequestWidgetCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: PaymentRequestWidgetCustomizableDirective, selector: "[bbPaymentRequestWidgetCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentRequestWidgetCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbPaymentRequestWidgetCustomizable]',
                }]
        }] });

class PaymentRequestWidgetComponent {
    constructor() {
        /**
         * Emitter that fires after allowing payment
         */
        this.allowPaymentRequestRedirectUrl = new EventEmitter();
        /**
         * Emitter that fires after rejecting payment
         */
        this.rejectPaymentRequestRedirectUrl = new EventEmitter();
    }
    redirectToAllowUrl(url) {
        this.allowPaymentRequestRedirectUrl.next(url);
    }
    redirectToRejectUrl(url) {
        this.rejectPaymentRequestRedirectUrl.next(url);
    }
}
PaymentRequestWidgetComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentRequestWidgetComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
PaymentRequestWidgetComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: PaymentRequestWidgetComponent, selector: "bb-payment-request-widget", outputs: { allowPaymentRequestRedirectUrl: "allowPaymentRequestRedirectUrl", rejectPaymentRequestRedirectUrl: "rejectPaymentRequestRedirectUrl" }, providers: [PaymentRequestService], ngImport: i0, template: `
    <bb-payment-request-container
      (redirectToAllowUrl)="redirectToAllowUrl($event)"
      (redirectToRejectUrl)="redirectToRejectUrl($event)"></bb-payment-request-container>
  `, isInline: true, components: [{ type: PaymentRequestContainerComponent, selector: "bb-payment-request-container", outputs: ["redirectToAllowUrl", "redirectToRejectUrl"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentRequestWidgetComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payment-request-widget',
                    template: `
    <bb-payment-request-container
      (redirectToAllowUrl)="redirectToAllowUrl($event)"
      (redirectToRejectUrl)="redirectToRejectUrl($event)"></bb-payment-request-container>
  `,
                    providers: [PaymentRequestService],
                }]
        }], propDecorators: { allowPaymentRequestRedirectUrl: [{
                type: Output
            }], rejectPaymentRequestRedirectUrl: [{
                type: Output
            }] } });

const components = [
    PaymentRequestWidgetComponent,
    PaymentRequestContainerComponent,
    PaymentRequestAccountSelectorComponent,
    PaymentRequestTppInformationComponent,
    PaymentRequestErrorComponent,
    PaymentRequestAmountComponent,
];
const directives = [
    PaymentRequestWidgetCustomizableDirective,
    PaymentRequestTppInformationCustomizableDirective,
    PaymentRequestAccountSelectorCustomizableDirective,
    PaymentRequestAmountCustomizableDirective,
];
const uiModules = [
    ConsentUiModule,
    ButtonModule,
    AlertModule,
    LoadingIndicatorModule,
    ProductItemBasicAccountModule,
    EmptyStateModule,
    AmountModule,
    NotificationModule,
    AccountSelectorModule,
    AmountModule,
];
class PaymentRequestWidgetModule {
}
PaymentRequestWidgetModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentRequestWidgetModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
PaymentRequestWidgetModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentRequestWidgetModule, declarations: [PaymentRequestWidgetComponent,
        PaymentRequestContainerComponent,
        PaymentRequestAccountSelectorComponent,
        PaymentRequestTppInformationComponent,
        PaymentRequestErrorComponent,
        PaymentRequestAmountComponent, PaymentRequestWidgetCustomizableDirective,
        PaymentRequestTppInformationCustomizableDirective,
        PaymentRequestAccountSelectorCustomizableDirective,
        PaymentRequestAmountCustomizableDirective], imports: [CommonModule, ConsentUiModule,
        ButtonModule,
        AlertModule,
        LoadingIndicatorModule,
        ProductItemBasicAccountModule,
        EmptyStateModule,
        AmountModule,
        NotificationModule,
        AccountSelectorModule,
        AmountModule, i1$5.BackbaseCoreModule], exports: [PaymentRequestWidgetComponent,
        PaymentRequestContainerComponent,
        PaymentRequestAccountSelectorComponent,
        PaymentRequestTppInformationComponent,
        PaymentRequestErrorComponent,
        PaymentRequestAmountComponent, PaymentRequestWidgetCustomizableDirective,
        PaymentRequestTppInformationCustomizableDirective,
        PaymentRequestAccountSelectorCustomizableDirective,
        PaymentRequestAmountCustomizableDirective, ConsentUiModule,
        ButtonModule,
        AlertModule,
        LoadingIndicatorModule,
        ProductItemBasicAccountModule,
        EmptyStateModule,
        AmountModule,
        NotificationModule,
        AccountSelectorModule,
        AmountModule] });
PaymentRequestWidgetModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentRequestWidgetModule, imports: [[
            CommonModule,
            ...uiModules,
            BackbaseCoreModule.withConfig({
                classMap: { PaymentRequestWidgetComponent },
            }),
        ], ConsentUiModule,
        ButtonModule,
        AlertModule,
        LoadingIndicatorModule,
        ProductItemBasicAccountModule,
        EmptyStateModule,
        AmountModule,
        NotificationModule,
        AccountSelectorModule,
        AmountModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentRequestWidgetModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        ...uiModules,
                        BackbaseCoreModule.withConfig({
                            classMap: { PaymentRequestWidgetComponent },
                        }),
                    ],
                    declarations: [...components, ...directives],
                    exports: [...components, ...directives, ...uiModules],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { PaymentRequestWidgetComponent, PaymentRequestWidgetModule, PaymentRequestAccountSelectorComponent as ӨPaymentRequestAccountSelectorComponent, PaymentRequestAccountSelectorCustomizableDirective as ӨPaymentRequestAccountSelectorCustomizableDirective, PaymentRequestAmountComponent as ӨPaymentRequestAmountComponent, PaymentRequestAmountCustomizableDirective as ӨPaymentRequestAmountCustomizableDirective, PaymentRequestContainerComponent as ӨPaymentRequestContainerComponent, PaymentRequestErrorComponent as ӨPaymentRequestErrorComponent, PaymentRequestTppInformationComponent as ӨPaymentRequestTppInformationComponent, PaymentRequestTppInformationCustomizableDirective as ӨPaymentRequestTppInformationCustomizableDirective, PaymentRequestWidgetCustomizableDirective as ӨPaymentRequestWidgetCustomizableDirective };
//# sourceMappingURL=backbase-payment-request-widget-ang.js.map
