import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { AllocationsAssetGet } from '../model/models';
import { AllocationsCurrencyGet } from '../model/models';
import { CreatePortfolioCustomListRequest } from '../model/models';
import { CumulativePerformanceBenchmarkDataGet } from '../model/models';
import { CumulativePerformanceChartDataGet } from '../model/models';
import { CustomListAddPortfolios } from '../model/models';
import { CustomListName } from '../model/models';
import { CustomListResponse } from '../model/models';
import { FileTypeEnum } from '../model/models';
import { MarkPortfolioAsFavoriteRequest } from '../model/models';
import { MarkPortfolioFavoriteItemRequest } from '../model/models';
import { PerformanceBenchmarkGetItem } from '../model/models';
import { PortfolioClientOrder } from '../model/models';
import { PortfolioCustomListGetItem } from '../model/models';
import { PortfolioSummaryAggregationGet } from '../model/models';
import { PortfolioSummaryItemGet } from '../model/models';
import { PortfoliosSummaryItem } from '../model/models';
import { PositionsGet } from '../model/models';
import { PostPortfolioAlias } from '../model/models';
import { TransactionsDetailsGet } from '../model/models';
import { TransactionsFilterOptionsGet } from '../model/models';
import { TransactionsItem } from '../model/models';
import { ValuationChartDataGet } from '../model/models';
import { PortfolioSummaryConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface DeleteFavoriteByIbanRequestParams {
    ["iban"]: string;
}
export interface DeleteFavoriteByPortfolioIdRequestParams {
    ["portfolioId"]: string;
}
export interface DeleteRemovePortfoliosFromCustomListByUuidAndPortfolioIbanListRequestParams {
    ["portfolioIbanList"]: string;
    ["uuid"]: string;
}
export interface DeleteUuidByUuidRequestParams {
    ["uuid"]: string;
}
export interface ExportPortfolioTransactionsRequestParams {
    ["portfolioId"]: string;
    ["fileType"]: FileTypeEnum;
}
export interface GetAggregationRequestParams {
    ["portfolioIds"]?: Array<string>;
    ["currencyCode"]?: string;
}
export interface GetBenchmarkDataByPortfolioIdRequestParams {
    ["portfolioId"]: string;
    ["uuid"]: string;
    ["fromDate"]: string;
    ["toDate"]: string;
}
export interface GetChartDataByPortfolioIdRequestParams {
    ["portfolioId"]: string;
    ["fromDate"]: string;
    ["toDate"]: string;
    ["granularity"]: string;
}
export interface GetChartDataByPortfolioIdChartRequestParams {
    ["portfolioId"]: string;
    ["fromDate"]: string;
    ["toDate"]: string;
}
export interface GetPerformancebenchmarksByPortfolioIdRequestParams {
    ["portfolioId"]: string;
}
export interface GetPortfolioAllocationsByAssetClassByPortfolioIdRequestParams {
    ["portfolioId"]: string;
    ["currencyCode"]?: string;
}
export interface GetPortfolioAllocationsByCurrencyByPortfolioIdRequestParams {
    ["portfolioId"]: string;
}
export interface GetPortfolioIdByPortfolioIdRequestParams {
    ["portfolioId"]: string;
    ["currencyCode"]?: string;
}
export interface GetPortfolioPositionsByPortfolioIdRequestParams {
    ["portfolioId"]: string;
    ["search"]?: string;
    ["from"]?: number;
    ["size"]?: number;
    ["currencyCode"]?: string;
}
export interface GetPortfoliosummaryRequestParams {
    ["query"]?: string;
    ["customListUuid"]?: string;
    ["justFavorites"]?: boolean;
    ["from"]?: number;
    ["cursor"]?: string;
    ["size"]?: number;
    ["orderBy"]?: string;
    ["direction"]?: 'ASC' | 'DESC';
    ["currencyCode"]?: string;
}
export interface GetTransactionFilterOptionsByPortfolioIdRequestParams {
    ["portfolioId"]: string;
}
export interface GetTransactionIdByPortfolioIdAndTransactionIdRequestParams {
    ["transactionId"]: string;
    ["portfolioId"]: string;
}
export interface GetTransactionsByPortfolioIdRequestParams {
    ["portfolioId"]: string;
    ["size"]: number;
    ["from"]: number;
    ["search"]?: string;
    ["fromDate"]?: string;
    ["toDate"]?: string;
    ["fromAmount"]?: string;
    ["toAmount"]?: string;
    ["category"]?: string;
    ["instrumentName"]?: string;
    ["counterpartyName"]?: string;
    ["counterpartyAccount"]?: string;
    ["subPortfolioId"]?: string;
    ["iSIN"]?: string;
    ["assetKey"]?: string;
    ["assetClass"]?: string;
    ["positionType"]?: string;
}
export interface PostAddPortfoliosToCustomListByUuidRequestParams {
    ["uuid"]: string;
    ["customListAddPortfolios"]?: CustomListAddPortfolios;
}
export interface PostCreatePortfolioCustomListRequestParams {
    ["createPortfolioCustomListRequest"]?: CreatePortfolioCustomListRequest;
}
export interface PostSavePortfolioAliasRequestParams {
    ["postPortfolioAlias"]?: PostPortfolioAlias;
}
export interface PostSavePortfoliosOrderingRequestParams {
    ["portfolioClientOrder"]?: PortfolioClientOrder;
}
export interface PutMarkPortfolioAsFavoriteRequestParams {
    ["markPortfolioAsFavoriteRequest"]?: MarkPortfolioAsFavoriteRequest;
}
export interface PutMarkPortfolioAsFavoriteUnfavoriteRequestParams {
    ["markPortfolioFavoriteItemRequest"]?: Array<MarkPortfolioFavoriteItemRequest>;
}
export interface PutRenameTheCustomListByUuidRequestParams {
    ["uuid"]: string;
    ["customListName"]?: CustomListName;
}
export declare class PortfolioSummaryClientApiHttpService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: PortfolioSummaryConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: PortfolioSummaryConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    deleteFavoriteByIban(requestParameters: DeleteFavoriteByIbanRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    deleteFavoriteByIban(requestParameters: DeleteFavoriteByIbanRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    deleteFavoriteByIban(requestParameters: DeleteFavoriteByIbanRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    deleteFavoriteByIbanUrl(requestParameters: DeleteFavoriteByIbanRequestParams): string;
    deleteFavoriteByPortfolioId(requestParameters: DeleteFavoriteByPortfolioIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    deleteFavoriteByPortfolioId(requestParameters: DeleteFavoriteByPortfolioIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    deleteFavoriteByPortfolioId(requestParameters: DeleteFavoriteByPortfolioIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    deleteFavoriteByPortfolioIdUrl(requestParameters: DeleteFavoriteByPortfolioIdRequestParams): string;
    deleteRemovePortfoliosFromCustomListByUuidAndPortfolioIbanList(requestParameters: DeleteRemovePortfoliosFromCustomListByUuidAndPortfolioIbanListRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    deleteRemovePortfoliosFromCustomListByUuidAndPortfolioIbanList(requestParameters: DeleteRemovePortfoliosFromCustomListByUuidAndPortfolioIbanListRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    deleteRemovePortfoliosFromCustomListByUuidAndPortfolioIbanList(requestParameters: DeleteRemovePortfoliosFromCustomListByUuidAndPortfolioIbanListRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    deleteRemovePortfoliosFromCustomListByUuidAndPortfolioIbanListUrl(requestParameters: DeleteRemovePortfoliosFromCustomListByUuidAndPortfolioIbanListRequestParams): string;
    deleteUuidByUuid(requestParameters: DeleteUuidByUuidRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    deleteUuidByUuid(requestParameters: DeleteUuidByUuidRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    deleteUuidByUuid(requestParameters: DeleteUuidByUuidRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    deleteUuidByUuidUrl(requestParameters: DeleteUuidByUuidRequestParams): string;
    exportPortfolioTransactions(requestParameters: ExportPortfolioTransactionsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'text/csv';
    }): Observable<Blob>;
    exportPortfolioTransactions(requestParameters: ExportPortfolioTransactionsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'text/csv';
    }): Observable<HttpResponse<Blob>>;
    exportPortfolioTransactions(requestParameters: ExportPortfolioTransactionsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'text/csv';
    }): Observable<HttpEvent<Blob>>;
    exportPortfolioTransactions(requestParameters: ExportPortfolioTransactionsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';
    }): Observable<Blob>;
    exportPortfolioTransactions(requestParameters: ExportPortfolioTransactionsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';
    }): Observable<HttpResponse<Blob>>;
    exportPortfolioTransactions(requestParameters: ExportPortfolioTransactionsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';
    }): Observable<HttpEvent<Blob>>;
    exportPortfolioTransactions(requestParameters: ExportPortfolioTransactionsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Blob>;
    exportPortfolioTransactions(requestParameters: ExportPortfolioTransactionsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Blob>>;
    exportPortfolioTransactions(requestParameters: ExportPortfolioTransactionsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Blob>>;
    exportPortfolioTransactionsUrl(requestParameters: ExportPortfolioTransactionsRequestParams): string;
    getAggregation(requestParameters: GetAggregationRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<PortfolioSummaryAggregationGet>;
    getAggregation(requestParameters: GetAggregationRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<PortfolioSummaryAggregationGet>>;
    getAggregation(requestParameters: GetAggregationRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<PortfolioSummaryAggregationGet>>;
    getAggregationUrl(requestParameters: GetAggregationRequestParams): string;
    getBenchmarkDataByPortfolioId(requestParameters: GetBenchmarkDataByPortfolioIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<CumulativePerformanceBenchmarkDataGet>;
    getBenchmarkDataByPortfolioId(requestParameters: GetBenchmarkDataByPortfolioIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<CumulativePerformanceBenchmarkDataGet>>;
    getBenchmarkDataByPortfolioId(requestParameters: GetBenchmarkDataByPortfolioIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<CumulativePerformanceBenchmarkDataGet>>;
    getBenchmarkDataByPortfolioIdUrl(requestParameters: GetBenchmarkDataByPortfolioIdRequestParams): string;
    getChartDataByPortfolioId(requestParameters: GetChartDataByPortfolioIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<ValuationChartDataGet>;
    getChartDataByPortfolioId(requestParameters: GetChartDataByPortfolioIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<ValuationChartDataGet>>;
    getChartDataByPortfolioId(requestParameters: GetChartDataByPortfolioIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<ValuationChartDataGet>>;
    getChartDataByPortfolioIdUrl(requestParameters: GetChartDataByPortfolioIdRequestParams): string;
    getChartDataByPortfolioIdChart(requestParameters: GetChartDataByPortfolioIdChartRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<CumulativePerformanceChartDataGet>;
    getChartDataByPortfolioIdChart(requestParameters: GetChartDataByPortfolioIdChartRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<CumulativePerformanceChartDataGet>>;
    getChartDataByPortfolioIdChart(requestParameters: GetChartDataByPortfolioIdChartRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<CumulativePerformanceChartDataGet>>;
    getChartDataByPortfolioIdChartUrl(requestParameters: GetChartDataByPortfolioIdChartRequestParams): string;
    getCustomlist(observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<PortfolioCustomListGetItem>>;
    getCustomlist(observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<PortfolioCustomListGetItem>>>;
    getCustomlist(observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<PortfolioCustomListGetItem>>>;
    getCustomlistUrl(): string;
    getPerformancebenchmarksByPortfolioId(requestParameters: GetPerformancebenchmarksByPortfolioIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<PerformanceBenchmarkGetItem>>;
    getPerformancebenchmarksByPortfolioId(requestParameters: GetPerformancebenchmarksByPortfolioIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<PerformanceBenchmarkGetItem>>>;
    getPerformancebenchmarksByPortfolioId(requestParameters: GetPerformancebenchmarksByPortfolioIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<PerformanceBenchmarkGetItem>>>;
    getPerformancebenchmarksByPortfolioIdUrl(requestParameters: GetPerformancebenchmarksByPortfolioIdRequestParams): string;
    getPortfolioAllocationsByAssetClassByPortfolioId(requestParameters: GetPortfolioAllocationsByAssetClassByPortfolioIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<AllocationsAssetGet>;
    getPortfolioAllocationsByAssetClassByPortfolioId(requestParameters: GetPortfolioAllocationsByAssetClassByPortfolioIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<AllocationsAssetGet>>;
    getPortfolioAllocationsByAssetClassByPortfolioId(requestParameters: GetPortfolioAllocationsByAssetClassByPortfolioIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<AllocationsAssetGet>>;
    getPortfolioAllocationsByAssetClassByPortfolioIdUrl(requestParameters: GetPortfolioAllocationsByAssetClassByPortfolioIdRequestParams): string;
    getPortfolioAllocationsByCurrencyByPortfolioId(requestParameters: GetPortfolioAllocationsByCurrencyByPortfolioIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<AllocationsCurrencyGet>;
    getPortfolioAllocationsByCurrencyByPortfolioId(requestParameters: GetPortfolioAllocationsByCurrencyByPortfolioIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<AllocationsCurrencyGet>>;
    getPortfolioAllocationsByCurrencyByPortfolioId(requestParameters: GetPortfolioAllocationsByCurrencyByPortfolioIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<AllocationsCurrencyGet>>;
    getPortfolioAllocationsByCurrencyByPortfolioIdUrl(requestParameters: GetPortfolioAllocationsByCurrencyByPortfolioIdRequestParams): string;
    getPortfolioIdByPortfolioId(requestParameters: GetPortfolioIdByPortfolioIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<PortfolioSummaryItemGet>;
    getPortfolioIdByPortfolioId(requestParameters: GetPortfolioIdByPortfolioIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<PortfolioSummaryItemGet>>;
    getPortfolioIdByPortfolioId(requestParameters: GetPortfolioIdByPortfolioIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<PortfolioSummaryItemGet>>;
    getPortfolioIdByPortfolioIdUrl(requestParameters: GetPortfolioIdByPortfolioIdRequestParams): string;
    getPortfolioPositionsByPortfolioId(requestParameters: GetPortfolioPositionsByPortfolioIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<PositionsGet>;
    getPortfolioPositionsByPortfolioId(requestParameters: GetPortfolioPositionsByPortfolioIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<PositionsGet>>;
    getPortfolioPositionsByPortfolioId(requestParameters: GetPortfolioPositionsByPortfolioIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<PositionsGet>>;
    getPortfolioPositionsByPortfolioIdUrl(requestParameters: GetPortfolioPositionsByPortfolioIdRequestParams): string;
    getPortfoliosummary(requestParameters: GetPortfoliosummaryRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<PortfoliosSummaryItem>>;
    getPortfoliosummary(requestParameters: GetPortfoliosummaryRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<PortfoliosSummaryItem>>>;
    getPortfoliosummary(requestParameters: GetPortfoliosummaryRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<PortfoliosSummaryItem>>>;
    getPortfoliosummaryUrl(requestParameters: GetPortfoliosummaryRequestParams): string;
    getTransactionFilterOptionsByPortfolioId(requestParameters: GetTransactionFilterOptionsByPortfolioIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<TransactionsFilterOptionsGet>;
    getTransactionFilterOptionsByPortfolioId(requestParameters: GetTransactionFilterOptionsByPortfolioIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<TransactionsFilterOptionsGet>>;
    getTransactionFilterOptionsByPortfolioId(requestParameters: GetTransactionFilterOptionsByPortfolioIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<TransactionsFilterOptionsGet>>;
    getTransactionFilterOptionsByPortfolioIdUrl(requestParameters: GetTransactionFilterOptionsByPortfolioIdRequestParams): string;
    getTransactionIdByPortfolioIdAndTransactionId(requestParameters: GetTransactionIdByPortfolioIdAndTransactionIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<TransactionsDetailsGet>;
    getTransactionIdByPortfolioIdAndTransactionId(requestParameters: GetTransactionIdByPortfolioIdAndTransactionIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<TransactionsDetailsGet>>;
    getTransactionIdByPortfolioIdAndTransactionId(requestParameters: GetTransactionIdByPortfolioIdAndTransactionIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<TransactionsDetailsGet>>;
    getTransactionIdByPortfolioIdAndTransactionIdUrl(requestParameters: GetTransactionIdByPortfolioIdAndTransactionIdRequestParams): string;
    getTransactionsByPortfolioId(requestParameters: GetTransactionsByPortfolioIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<TransactionsItem>>;
    getTransactionsByPortfolioId(requestParameters: GetTransactionsByPortfolioIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<TransactionsItem>>>;
    getTransactionsByPortfolioId(requestParameters: GetTransactionsByPortfolioIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<TransactionsItem>>>;
    getTransactionsByPortfolioIdUrl(requestParameters: GetTransactionsByPortfolioIdRequestParams): string;
    postAddPortfoliosToCustomListByUuid(requestParameters: PostAddPortfoliosToCustomListByUuidRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    postAddPortfoliosToCustomListByUuid(requestParameters: PostAddPortfoliosToCustomListByUuidRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    postAddPortfoliosToCustomListByUuid(requestParameters: PostAddPortfoliosToCustomListByUuidRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    postAddPortfoliosToCustomListByUuidUrl(requestParameters: PostAddPortfoliosToCustomListByUuidRequestParams): string;
    postCreatePortfolioCustomList(requestParameters: PostCreatePortfolioCustomListRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<CustomListResponse>;
    postCreatePortfolioCustomList(requestParameters: PostCreatePortfolioCustomListRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<CustomListResponse>>;
    postCreatePortfolioCustomList(requestParameters: PostCreatePortfolioCustomListRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<CustomListResponse>>;
    postCreatePortfolioCustomListUrl(requestParameters: PostCreatePortfolioCustomListRequestParams): string;
    postSavePortfolioAlias(requestParameters: PostSavePortfolioAliasRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    postSavePortfolioAlias(requestParameters: PostSavePortfolioAliasRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    postSavePortfolioAlias(requestParameters: PostSavePortfolioAliasRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    postSavePortfolioAliasUrl(requestParameters: PostSavePortfolioAliasRequestParams): string;
    postSavePortfoliosOrdering(requestParameters: PostSavePortfoliosOrderingRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    postSavePortfoliosOrdering(requestParameters: PostSavePortfoliosOrderingRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    postSavePortfoliosOrdering(requestParameters: PostSavePortfoliosOrderingRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    postSavePortfoliosOrderingUrl(requestParameters: PostSavePortfoliosOrderingRequestParams): string;
    putMarkPortfolioAsFavorite(requestParameters: PutMarkPortfolioAsFavoriteRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    putMarkPortfolioAsFavorite(requestParameters: PutMarkPortfolioAsFavoriteRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    putMarkPortfolioAsFavorite(requestParameters: PutMarkPortfolioAsFavoriteRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    putMarkPortfolioAsFavoriteUrl(requestParameters: PutMarkPortfolioAsFavoriteRequestParams): string;
    putMarkPortfolioAsFavoriteUnfavorite(requestParameters: PutMarkPortfolioAsFavoriteUnfavoriteRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    putMarkPortfolioAsFavoriteUnfavorite(requestParameters: PutMarkPortfolioAsFavoriteUnfavoriteRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    putMarkPortfolioAsFavoriteUnfavorite(requestParameters: PutMarkPortfolioAsFavoriteUnfavoriteRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    putMarkPortfolioAsFavoriteUnfavoriteUrl(requestParameters: PutMarkPortfolioAsFavoriteUnfavoriteRequestParams): string;
    putRenameTheCustomListByUuid(requestParameters: PutRenameTheCustomListByUuidRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<CustomListResponse>;
    putRenameTheCustomListByUuid(requestParameters: PutRenameTheCustomListByUuidRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<CustomListResponse>>;
    putRenameTheCustomListByUuid(requestParameters: PutRenameTheCustomListByUuidRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<CustomListResponse>>;
    putRenameTheCustomListByUuidUrl(requestParameters: PutRenameTheCustomListByUuidRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<PortfolioSummaryClientApiHttpService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<PortfolioSummaryClientApiHttpService>;
}
