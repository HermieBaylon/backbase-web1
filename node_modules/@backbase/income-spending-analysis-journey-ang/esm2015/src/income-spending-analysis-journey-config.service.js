import { Injectable, Optional, Inject, InjectionToken } from '@angular/core';
import * as i0 from "@angular/core";
export var AnalysisType;
(function (AnalysisType) {
    AnalysisType["INCOME"] = "CRDT";
    AnalysisType["SPENDING"] = "DBIT";
})(AnalysisType || (AnalysisType = {}));
export const IncomeSpendingAnalysisJourneyConfigurationToken = new InjectionToken('IncomeSpendingAnalysisJourneyConfiguration injection token');
const configDefaults = {
    analysisType: AnalysisType.SPENDING,
};
export class IncomeSpendingAnalysisJourneyService {
    constructor(config) {
        config = config || {};
        this._config = Object.assign(Object.assign({}, configDefaults), config);
    }
    get defaults() {
        return configDefaults;
    }
    get analysisType() {
        return this._config.analysisType;
    }
}
IncomeSpendingAnalysisJourneyService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: IncomeSpendingAnalysisJourneyService, deps: [{ token: IncomeSpendingAnalysisJourneyConfigurationToken, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
IncomeSpendingAnalysisJourneyService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: IncomeSpendingAnalysisJourneyService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: IncomeSpendingAnalysisJourneyService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [IncomeSpendingAnalysisJourneyConfigurationToken]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5jb21lLXNwZW5kaW5nLWFuYWx5c2lzLWpvdXJuZXktY29uZmlnLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9saWJzL2luY29tZS1zcGVuZGluZy1hbmFseXNpcy1qb3VybmV5L3NyYy9pbmNvbWUtc3BlbmRpbmctYW5hbHlzaXMtam91cm5leS1jb25maWcuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsY0FBYyxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUU3RSxNQUFNLENBQU4sSUFBWSxZQUdYO0FBSEQsV0FBWSxZQUFZO0lBQ3RCLCtCQUFlLENBQUE7SUFDZixpQ0FBaUIsQ0FBQTtBQUNuQixDQUFDLEVBSFcsWUFBWSxLQUFaLFlBQVksUUFHdkI7QUFTRCxNQUFNLENBQUMsTUFBTSwrQ0FBK0MsR0FDMUQsSUFBSSxjQUFjLENBQ2hCLDREQUE0RCxDQUM3RCxDQUFDO0FBRUosTUFBTSxjQUFjLEdBQStDO0lBQ2pFLFlBQVksRUFBRSxZQUFZLENBQUMsUUFBUTtDQUNwQyxDQUFDO0FBR0YsTUFBTSxPQUFPLG9DQUFvQztJQUcvQyxZQUdFLE1BQWtEO1FBRWxELE1BQU0sR0FBRyxNQUFNLElBQUksRUFBRSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxPQUFPLG1DQUFRLGNBQWMsR0FBSyxNQUFNLENBQUUsQ0FBQztJQUNsRCxDQUFDO0lBRUQsSUFBSSxRQUFRO1FBQ1YsT0FBTyxjQUFjLENBQUM7SUFDeEIsQ0FBQztJQUVELElBQUksWUFBWTtRQUNkLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUM7SUFDbkMsQ0FBQzs7a0lBbEJVLG9DQUFvQyxrQkFLckMsK0NBQStDO3NJQUw5QyxvQ0FBb0M7NEZBQXBDLG9DQUFvQztrQkFEaEQsVUFBVTs7MEJBS04sUUFBUTs7MEJBQ1IsTUFBTTsyQkFBQywrQ0FBK0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBPcHRpb25hbCwgSW5qZWN0LCBJbmplY3Rpb25Ub2tlbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5leHBvcnQgZW51bSBBbmFseXNpc1R5cGUge1xuICBJTkNPTUUgPSAnQ1JEVCcsXG4gIFNQRU5ESU5HID0gJ0RCSVQnLFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEluY29tZVNwZW5kaW5nQW5hbHlzaXNKb3VybmV5Q29uZmlndXJhdGlvbiB7XG4gIC8qKlxuICAgKiBTaG91bGQgdGhlIGFuYWx5c2lzIGJlIGRvbmUgZm9yIGluY29tZSBvciBzcGVuZGluZ1xuICAgKi9cbiAgYW5hbHlzaXNUeXBlOiBBbmFseXNpc1R5cGU7XG59XG5cbmV4cG9ydCBjb25zdCBJbmNvbWVTcGVuZGluZ0FuYWx5c2lzSm91cm5leUNvbmZpZ3VyYXRpb25Ub2tlbiA9XG4gIG5ldyBJbmplY3Rpb25Ub2tlbjxJbmNvbWVTcGVuZGluZ0FuYWx5c2lzSm91cm5leUNvbmZpZ3VyYXRpb24+KFxuICAgICdJbmNvbWVTcGVuZGluZ0FuYWx5c2lzSm91cm5leUNvbmZpZ3VyYXRpb24gaW5qZWN0aW9uIHRva2VuJyxcbiAgKTtcblxuY29uc3QgY29uZmlnRGVmYXVsdHM6IEluY29tZVNwZW5kaW5nQW5hbHlzaXNKb3VybmV5Q29uZmlndXJhdGlvbiA9IHtcbiAgYW5hbHlzaXNUeXBlOiBBbmFseXNpc1R5cGUuU1BFTkRJTkcsXG59O1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgSW5jb21lU3BlbmRpbmdBbmFseXNpc0pvdXJuZXlTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBfY29uZmlnOiBJbmNvbWVTcGVuZGluZ0FuYWx5c2lzSm91cm5leUNvbmZpZ3VyYXRpb247XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQE9wdGlvbmFsKClcbiAgICBASW5qZWN0KEluY29tZVNwZW5kaW5nQW5hbHlzaXNKb3VybmV5Q29uZmlndXJhdGlvblRva2VuKVxuICAgIGNvbmZpZzogSW5jb21lU3BlbmRpbmdBbmFseXNpc0pvdXJuZXlDb25maWd1cmF0aW9uLFxuICApIHtcbiAgICBjb25maWcgPSBjb25maWcgfHwge307XG4gICAgdGhpcy5fY29uZmlnID0geyAuLi5jb25maWdEZWZhdWx0cywgLi4uY29uZmlnIH07XG4gIH1cblxuICBnZXQgZGVmYXVsdHMoKTogSW5jb21lU3BlbmRpbmdBbmFseXNpc0pvdXJuZXlDb25maWd1cmF0aW9uIHtcbiAgICByZXR1cm4gY29uZmlnRGVmYXVsdHM7XG4gIH1cblxuICBnZXQgYW5hbHlzaXNUeXBlKCk6IEFuYWx5c2lzVHlwZSB7XG4gICAgcmV0dXJuIHRoaXMuX2NvbmZpZy5hbmFseXNpc1R5cGU7XG4gIH1cbn1cbiJdfQ==