import * as i4 from '@angular/common';
import { getLocaleNumberSymbol, NumberSymbol, CommonModule, DatePipe, CurrencyPipe } from '@angular/common';
import * as i0 from '@angular/core';
import { Component, Input, ViewChild, Injectable, Directive, Optional, Inject, EventEmitter, ElementRef, LOCALE_ID, ChangeDetectionStrategy, Output, NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';
import * as i5 from '@angular/forms';
import { FormControl, FormGroup, Validators, FormArray, FormsModule, ReactiveFormsModule } from '@angular/forms';
import * as i1$2 from '@backbase/foundation-ang/core';
import { BackbaseCoreModule } from '@backbase/foundation-ang/core';
import * as i1 from '@backbase/payment-orders-ang';
import { isObjectTruthy, CounterPartyFields, PaymentBaseFields, RemittanceInfoFields, getConfig, HiddenFields, amountValidator, currencyValidatorFactory, ibanCountryValidator, isSelectedBeneficiaryModified, datePart, isCounterpartyObjectEquals, objectEquals, PaymentTemplateFields, getAccountHolderAddress, getContactBankAddress, resetBeneficiaryDetails, MultiPaymentHooks, ViewType, AddressType, CountriesMap, isAddressTruthy, PaymentFormFieldHooks, focusErrorElement, toggleTabIndex, sameAccountsValidator, InitiatorFields, BeneficiaryList, DefaultClosedPaymentBusFnSuffix, DefaultIntraCompanyPaymentBusFnSuffix, forbiddenStatus, missingInListValidator, BB_CLOSED_PAYMENT_BUS_FN_SUFFIX, BB_INTRACOMPANY_PAYMENT_BUS_FN_SUFFIX, ScheduleFields, pastDateValidator, requiredEndDateValidator, requiredAfterValidator, endTypes, requiredEndTypeValidator, focusChildElement, Scheme, PaymentOptionFields, getDateOnly, ChargeBearer, ProductKinds, AccountBalances, PaymentMode, ScheduleEndType, Frequencies, getRelativeDate, TemplateModeType, parseString, CreditDebitMixedIndicator, PaymentState, AccountField, ListState, ContactScheme, PaymentComponents, getIconByPaymnentType, isFormGroupConfig, StepperAction, PaymentOrdersUiModule } from '@backbase/payment-orders-ang';
import { of, BehaviorSubject, Subject, combineLatest, fromEvent, animationFrameScheduler, asapScheduler, pipe } from 'rxjs';
import { map, takeUntil, startWith, tap, catchError, switchMap, debounceTime, distinctUntilChanged, filter, take, shareReplay, auditTime, pluck, skipWhile } from 'rxjs/operators';
import * as i1$1 from '@backbase/ui-ang/currency-input';
import { CurrencyInputModule } from '@backbase/ui-ang/currency-input';
import * as i3 from '@backbase/ui-ang/input-validation-message';
import * as i2 from '@backbase/foundation-ang/future';
import * as i5$1 from '@backbase/ui-ang/input-checkbox';
import { InputCheckboxModule } from '@backbase/ui-ang/input-checkbox';
import { SchemeNames } from '@backbase/data-ang/payment-order';
import * as i2$1 from '@backbase/ui-ang/account-selector';
import { AccountSelectorModule } from '@backbase/ui-ang/account-selector';
import * as i2$2 from '@backbase/ui-ang/input-radio-group';
import { InputRadioGroupModule } from '@backbase/ui-ang/input-radio-group';
import * as i1$3 from '@backbase/ui-ang/collapsible';
import { CollapsibleModule } from '@backbase/ui-ang/collapsible';
import * as i2$3 from '@backbase/ui-ang/icon';
import { IconModule } from '@backbase/ui-ang/icon';
import * as i7 from '@backbase/ui-ang/button';
import { ButtonModule } from '@backbase/ui-ang/button';
import * as i2$4 from '@backbase/ui-ang/dropdown-single-select';
import { DropdownSingleSelectModule } from '@backbase/ui-ang/dropdown-single-select';
import * as i1$4 from '@backbase/ui-ang/textarea';
import { TextareaModule } from '@backbase/ui-ang/textarea';
import * as i1$5 from '@backbase/ui-ang/input-text';
import { InputTextModule } from '@backbase/ui-ang/input-text';
import * as i4$1 from '@backbase/ui-ang/loading-indicator';
import { LoadingIndicatorModule } from '@backbase/ui-ang/loading-indicator';
import * as i5$2 from '@backbase/ui-ang/amount';
import { AmountModule } from '@backbase/ui-ang/amount';
import * as i2$5 from '@backbase/ui-ang/switch';
import { SwitchModule } from '@backbase/ui-ang/switch';
import * as i1$6 from '@backbase/ui-ang/input-datepicker';
import { InputDatepickerModule } from '@backbase/ui-ang/input-datepicker';
import * as i1$7 from '@backbase/ui-ang/input-number';
import { InputNumberModule } from '@backbase/ui-ang/input-number';
import * as i1$8 from '@backbase/ui-ang/input-phone';
import { InputPhoneModule } from '@backbase/ui-ang/input-phone';
import BigNumber from 'bignumber.js';
import * as i1$9 from '@angular/router';
import * as i3$1 from '@backbase/ui-ang/product-selector';
import { ProductSelectorModule } from '@backbase/ui-ang/product-selector';
import * as i4$2 from '@backbase/ui-ang/product-item-basic-account';
import { ProductItemBasicAccountModule } from '@backbase/ui-ang/product-item-basic-account';
import * as i6 from '@backbase/ui-ang/empty-state';
import { EmptyStateModule } from '@backbase/ui-ang/empty-state';
import * as i1$a from '@backbase/ui-ang/amount-input';
import { AmountInputModule } from '@backbase/ui-ang/amount-input';
import * as i2$6 from '@backbase/ui-ang/load-button';
import { LoadButtonModule } from '@backbase/ui-ang/load-button';
import * as i3$2 from '@backbase/ui-ang/modal';
import * as i1$b from '@angular/cdk/scrolling';
import '@angular/localize/init';
import * as i7$1 from '@ng-bootstrap/ng-bootstrap';
import * as i9 from '@backbase/ui-ang/highlight';
import * as i1$c from '@backbase/ui-ang/header';
import * as i1$d from '@backbase/ui-ang/alert';
import { AlertModule } from '@backbase/ui-ang/alert';
import * as i6$1 from '@backbase/ui-ang/tooltip-directive';
import { TooltipModule } from '@backbase/ui-ang/tooltip-directive';
import { HttpErrorResponse } from '@angular/common/http';
import * as i1$e from '@backbase/ui-ang/search-box';
import * as i2$7 from '@backbase/ui-ang/fieldset';
import { FieldsetModule } from '@backbase/ui-ang/fieldset';
import { StepperModule } from '@backbase/ui-ang/stepper';

const mapLocalize = (obj) => {
    if (!isObjectTruthy(obj))
        return obj;
    return Object.entries(obj).reduce((result, [key, value]) => {
        const localizedValue = typeof value === 'string' ? $localize `${value}` : value;
        return Object.assign(Object.assign({}, result), { [key]: localizedValue });
    }, {});
};
function mapDependentItems(dependants = [], currentParent) {
    const localDeps = [];
    const dependantItems = dependants.reduce((result, dep) => {
        if (typeof dep === 'string') {
            localDeps.push(dep);
            return result;
        }
        else {
            return [...result, dep];
        }
    }, []);
    return [
        ...dependantItems,
        { parent: currentParent, items: localDeps },
    ];
}
function getPurposeOfPaymentInfo(country) {
    const fieldName = 'purpose-of-payment';
    const result = { isOptional: true };
    const countryInfo = (country === null || country === void 0 ? void 0 : country.inputFormSettings) || [];
    const purposes = country === null || country === void 0 ? void 0 : country.purposesOfPayment;
    countryInfo.forEach((field) => {
        if (field.key === fieldName) {
            result.isOptional =
                field.mandatory !== undefined ? !field.mandatory : result.isOptional;
        }
    });
    return Object.assign(Object.assign({}, result), { purposes });
}
function toggleBeneficiaryControls(formGroup, shouldDisableFields) {
    const controls = [
        CounterPartyFields.accountNumber,
        `${CounterPartyFields.creditorBank}.${CounterPartyFields.bankBranchCode}`,
        `${CounterPartyFields.creditorBank}.${CounterPartyFields.bankName}`,
        `${CounterPartyFields.creditorBank}.${CounterPartyFields.bic}`,
    ];
    if (shouldDisableFields) {
        controls === null || controls === void 0 ? void 0 : controls.forEach((control) => { var _a; return (_a = formGroup.get(control)) === null || _a === void 0 ? void 0 : _a.disable(); });
    }
    else {
        controls === null || controls === void 0 ? void 0 : controls.forEach((control) => { var _a; return (_a = formGroup.get(control)) === null || _a === void 0 ? void 0 : _a.enable(); });
    }
}

/**
 * Registers a FormControl in the provided FormGroup
 *
 * @param group
 * @param formControlName
 * @param [validators]
 * @param [asyncValidators]
 * @param [initialValue='']
 * @returns
 */
function registerFormControl(group, formControlName, validators, asyncValidators, initialValue = '', config) {
    let formControl;
    formControl = group.controls[formControlName];
    group.addControl(formControlName, new FormControl(initialValue, validators || [], asyncValidators || []));
    if (formControl) {
        resetValidators(formControl, validators, asyncValidators, config);
    }
    else {
        group.addControl(formControlName, new FormControl(initialValue, validators || [], asyncValidators || []));
        formControl = group.controls[formControlName];
    }
    return formControl;
}
/**
 * Converts the nested form array into a flat map. It is used to lookup any fields easily
 */
const createControlsMap = (controls, controlsMap = {}) => {
    let path;
    return controls.reduce((acc, control) => {
        path = control.parent
            ? `${control.parent}.${control.name}`
            : control.name;
        if (control.fields) {
            acc = Object.assign(Object.assign({}, acc), createControlsMap(control.fields, acc));
        }
        else {
            acc[path] = control;
        }
        return acc;
    }, controlsMap);
};
function registerFormGroup(group, formGroupName, formGroupConfig, validators, asyncValidators) {
    const subGroup = group.get(formGroupName) ||
        new FormGroup({}, validators || [], asyncValidators || []);
    for (const key in formGroupConfig) {
        if (formGroupConfig.hasOwnProperty(key)) {
            subGroup.registerControl(key, new FormControl(formGroupConfig[key].shift(), formGroupConfig[key].shift() || []));
        }
    }
    group.addControl(formGroupName, subGroup);
    return group.get(formGroupName);
}
function getParentForm(control) {
    let ancestor = control;
    while (ancestor && ancestor.parent) {
        ancestor = ancestor.parent;
    }
    return ancestor;
}
function getFormFieldData({ formControlPath, form, config, }) {
    const apiFieldMap = {
        'transferTransactionInformation.counterpartyAccount.identification.identification': {
            name: CounterPartyFields.accountNumber,
            path: `${PaymentBaseFields.counterparty}.${CounterPartyFields.accountNumber}`,
        },
        'transferTransactionInformation.counterpartyBank.bankBranchCode': {
            name: CounterPartyFields.bankBranchCode,
            path: `${PaymentBaseFields.counterparty}.${CounterPartyFields.creditorBank}.${CounterPartyFields.bankBranchCode}`,
        },
        'transferTransactionInformation.instructedAmount.currencyCode': {
            name: RemittanceInfoFields.amountCurrencyGroup,
            path: `${PaymentBaseFields.remittanceInfo}.${RemittanceInfoFields.amountCurrencyGroup}`,
        },
    };
    const fieldData = apiFieldMap[formControlPath] || null;
    if (fieldData) {
        const control = form.get(fieldData.path);
        const fieldConfig = getConfig(fieldData.name, config);
        return { control, fieldConfig };
    }
    return;
}
function applyInputFormSettingForCountry({ inputFormSetting, form, config, }) {
    var _a;
    const counterpartyGroup = form.get(PaymentBaseFields.counterparty);
    const isClosedPaymentControl = (form.get(HiddenFields.isClosedPayment));
    const hasArrangementIdControl = (counterpartyGroup.get(CounterPartyFields.id));
    const schemeControl = counterpartyGroup.get(CounterPartyFields.schemeName) ||
        registerFormControl(counterpartyGroup, CounterPartyFields.schemeName);
    if (inputFormSetting.apiField) {
        const { control = null, fieldConfig = null } = getFormFieldData({
            formControlPath: inputFormSetting.apiField,
            form,
            config,
        }) || {};
        let validators = [];
        if (inputFormSetting.mandatory) {
            // For currency input we need amountValidator instead of Validators.required
            if (inputFormSetting.key === 'currency') {
                validators.push(amountValidator);
            }
            else {
                validators.push(Validators.required);
            }
        }
        if (inputFormSetting.regex) {
            validators.push(createValidatorFromRegex(inputFormSetting.regex));
        }
        if (inputFormSetting.key === 'currency' && inputFormSetting.values.length) {
            validators.push(currencyValidatorFactory(inputFormSetting.values));
        }
        if (inputFormSetting.key === 'account-number') {
            schemeControl.setValue(inputFormSetting.format);
            if (inputFormSetting.format === 'IBAN') {
                validators.push(ibanCountryValidator());
            }
        }
        if (control && fieldConfig) {
            const labelData = inputFormSetting.label || {};
            const labelKey = Object.keys(labelData)[0];
            const label = labelData[labelKey]; // need  to implement i18n for this
            fieldConfig.options = fieldConfig.options || {};
            if (label) {
                if (!fieldConfig.options.defaultLabel) {
                    fieldConfig.options.defaultLabel =
                        getLabelFromInputSetting((_a = form.get('defaultBankCodeSetting')) === null || _a === void 0 ? void 0 : _a.value) || fieldConfig.options.label;
                }
                fieldConfig.options.label = label;
            }
            else if (fieldConfig.options.defaultLabel &&
                fieldConfig.options.defaultLabel !== fieldConfig.options.label) {
                // reset to default label if the inputform setting doesn't contain label.
                fieldConfig.options.label = fieldConfig.options.defaultLabel;
            }
            const shouldEnableControls = !((isClosedPaymentControl === null || isClosedPaymentControl === void 0 ? void 0 : isClosedPaymentControl.value) || (hasArrangementIdControl === null || hasArrangementIdControl === void 0 ? void 0 : hasArrangementIdControl.value));
            if (inputFormSetting.notApplicable) {
                control.reset();
                validators = null;
                control.disable();
            }
            else if (control.disabled && shouldEnableControls) {
                control.enable();
            }
            if (isControlFilled(control)) {
                control.markAsTouched();
            }
            control.setValidators(validators);
            control.updateValueAndValidity();
        }
    }
}
function setAdditionalBankDetails(form, config) {
    var _a;
    const setting = (_a = form.get('defaultBankCodeSetting')) === null || _a === void 0 ? void 0 : _a.value;
    if (!setting)
        return;
    const label = getLabelFromInputSetting(setting);
    const regex = setting.regex;
    if (label) {
        setAdditionalBankLabel(CounterPartyFields.correspondentBank, label, config);
        setAdditionalBankLabel(CounterPartyFields.intermediaryBank, label, config);
    }
    if (regex) {
        appendBankCodePatternValidator(CounterPartyFields.correspondentBank, regex, config);
        appendBankCodePatternValidator(CounterPartyFields.intermediaryBank, regex, config);
    }
}
function createValidatorFromRegex(pattern) {
    if (pattern.startsWith('/') && pattern.endsWith('/')) {
        pattern = pattern.slice(1, -1);
    }
    return Validators.pattern(new RegExp(pattern));
}
function appendBankCodePatternValidator(controlName, regex, config) {
    const additionalBankConfig = getConfig(controlName, config);
    if (!additionalBankConfig)
        return;
    const bankCodeConfig = getConfig(CounterPartyFields.bankBranchCode, additionalBankConfig);
    if (bankCodeConfig) {
        if (!(bankCodeConfig === null || bankCodeConfig === void 0 ? void 0 : bankCodeConfig.options)) {
            bankCodeConfig.options = {};
        }
        bankCodeConfig.options.validators = [createValidatorFromRegex(regex)];
    }
}
function getLabelFromInputSetting(setting) {
    return Object.values((setting === null || setting === void 0 ? void 0 : setting.label) || {})[0];
}
function setAdditionalBankLabel(additionalBankType, label, config) {
    var _a;
    const additionalBankConfig = getConfig(additionalBankType, config);
    if (additionalBankConfig) {
        const bankCodeConfig = getConfig(CounterPartyFields.bankBranchCode, additionalBankConfig);
        const selectAdditionalBankCodeTypeConfig = getConfig('selectAdditionalBankCodeType', additionalBankConfig);
        const selectAdditionalBankCodeTypeOptions = (_a = selectAdditionalBankCodeTypeConfig === null || selectAdditionalBankCodeTypeConfig === void 0 ? void 0 : selectAdditionalBankCodeTypeConfig.options) === null || _a === void 0 ? void 0 : _a.options;
        if (bankCodeConfig === null || bankCodeConfig === void 0 ? void 0 : bankCodeConfig.options) {
            bankCodeConfig.options.label = label;
        }
        if (selectAdditionalBankCodeTypeOptions === null || selectAdditionalBankCodeTypeOptions === void 0 ? void 0 : selectAdditionalBankCodeTypeOptions.length) {
            selectAdditionalBankCodeTypeOptions.forEach((option) => {
                if (option.value === 'BRANCH_CODE') {
                    option.label = label;
                }
            });
        }
    }
}
function isControlFilled(control) {
    var _a;
    const isAmountControl = ((control === null || control === void 0 ? void 0 : control.value) || {}).hasOwnProperty('currency') &&
        ((control === null || control === void 0 ? void 0 : control.value) || {}).hasOwnProperty('amount');
    return isAmountControl ? !!((_a = control === null || control === void 0 ? void 0 : control.value) === null || _a === void 0 ? void 0 : _a.amount) : !!(control === null || control === void 0 ? void 0 : control.value);
}
function isClosedPaymentValidator(control) {
    var _a, _b, _c, _d;
    const form = getParentForm(control);
    const counterPartyDetails = (_a = (form.get(PaymentBaseFields.counterparty))) === null || _a === void 0 ? void 0 : _a.getRawValue();
    const selectedBeneficiary = (_b = form.get(HiddenFields.selectedBeneficiary)) === null || _b === void 0 ? void 0 : _b.value;
    const isBeneficairyUpdatedManually = isSelectedBeneficiaryModified(counterPartyDetails, selectedBeneficiary) ||
        (((_c = form === null || form === void 0 ? void 0 : form.get(HiddenFields.isManualEdit)) === null || _c === void 0 ? void 0 : _c.value) &&
            isCounterPartyDetailsTruthy(counterPartyDetails));
    return isBeneficairyUpdatedManually &&
        ((_d = form === null || form === void 0 ? void 0 : form.get(HiddenFields.isClosedPayment)) === null || _d === void 0 ? void 0 : _d.value)
        ? { hasOnlyClosedPaymentPermission: true }
        : null;
}
function getCounterpartyFormGroupDetails(form) {
    var _a, _b, _c;
    const counterparty = (_a = (form.get(PaymentBaseFields.counterparty))) === null || _a === void 0 ? void 0 : _a.getRawValue();
    return {
        name: counterparty === null || counterparty === void 0 ? void 0 : counterparty.name,
        accountNumber: counterparty === null || counterparty === void 0 ? void 0 : counterparty.accountNumber,
        bankBranchCode: (_b = counterparty === null || counterparty === void 0 ? void 0 : counterparty.creditorBank) === null || _b === void 0 ? void 0 : _b.bankBranchCode,
        BIC: (_c = counterparty === null || counterparty === void 0 ? void 0 : counterparty.creditorBank) === null || _c === void 0 ? void 0 : _c.bic,
    };
}
function resetValidators(formControl, validators, asyncValidators, config) {
    var _a;
    const computedValidators = validators ? [...validators] : [];
    if (!(config === null || config === void 0 ? void 0 : config.hidden) && ((_a = config === null || config === void 0 ? void 0 : config.options) === null || _a === void 0 ? void 0 : _a.isConditionalMandatory)) {
        computedValidators.push(Validators.required);
    }
    formControl.markAsUntouched();
    formControl.clearValidators();
    formControl.clearAsyncValidators();
    formControl.setAsyncValidators(asyncValidators || []);
    formControl.setValidators(computedValidators);
}
function addAddressFields(formGroup) {
    const addressFields = {
        addressLine1: [''],
        addressLine2: [''],
        streetName: [''],
        postCode: [''],
        town: [''],
        countrySubDivision: [''],
        country: [''],
    };
    for (const key in addressFields) {
        if (addressFields.hasOwnProperty(key) && !formGroup.get(key)) {
            registerFormControl(formGroup, key);
        }
    }
}
function registerFormArray(group, formArrayName, validators, asyncValidators) {
    const array = group.get(formArrayName) ||
        new FormArray([], validators || [], asyncValidators || []);
    group.addControl(formArrayName, array);
    return group.get(formArrayName);
}
function addControlToFormArray(array, formGroupConfig, validators, asyncValidators, initialValue = null) {
    const subGroup = new FormGroup({}, validators || [], asyncValidators || []);
    formGroupConfig.forEach((formConfig) => {
        if (formConfig.name) {
            subGroup.registerControl(formConfig.name, new FormControl(initialValue, formConfig.validators || []));
        }
    });
    array.push(subGroup);
    return array;
}
function isEditFormDirty(formValue, initialFormValue) {
    var _a, _b;
    if (!initialFormValue)
        return true;
    const schedule = getScheduleDatePart(formValue.schedule);
    const initialSchedule = getScheduleDatePart(initialFormValue.schedule);
    return (((_a = formValue.initiator) === null || _a === void 0 ? void 0 : _a.id) !== ((_b = initialFormValue.initiator) === null || _b === void 0 ? void 0 : _b.id) ||
        !isCounterpartyObjectEquals(formValue.counterparty, initialFormValue.counterparty) ||
        !objectEquals(schedule, initialSchedule) ||
        isRemittanceInfoDirty(formValue[PaymentBaseFields.remittanceInfo], initialFormValue[PaymentBaseFields.remittanceInfo]) ||
        formValue.chargeBearer !== initialFormValue.chargeBearer);
}
function isTemplateFormDirty(formValue, initialFormValue) {
    return (formValue[PaymentBaseFields.initiator].id !==
        initialFormValue[PaymentBaseFields.initiator].id ||
        !objectEquals(formValue[PaymentBaseFields.counterparty], initialFormValue[PaymentBaseFields.counterparty]) ||
        isRemittanceInfoDirty(formValue[PaymentBaseFields.remittanceInfo], initialFormValue[PaymentBaseFields.remittanceInfo]) ||
        formValue[PaymentTemplateFields.templateName] !==
            initialFormValue[PaymentTemplateFields.templateName]);
}
function getScheduleDatePart(schedule) {
    return Object.assign(Object.assign({}, schedule), { startDate: datePart(schedule === null || schedule === void 0 ? void 0 : schedule.startDate), endDate: datePart(schedule === null || schedule === void 0 ? void 0 : schedule.endDate) });
}
function isRemittanceInfoDirty(remittanceInfo, initialRemittanceInfo) {
    if (!remittanceInfo)
        return false;
    const amountGroup = remittanceInfo[RemittanceInfoFields.amountCurrencyGroup];
    const initialAmountGroup = initialRemittanceInfo[RemittanceInfoFields.amountCurrencyGroup];
    return ((amountGroup === null || amountGroup === void 0 ? void 0 : amountGroup.amount) !== (initialAmountGroup === null || initialAmountGroup === void 0 ? void 0 : initialAmountGroup.amount) ||
        (amountGroup === null || amountGroup === void 0 ? void 0 : amountGroup.currency) !== (initialAmountGroup === null || initialAmountGroup === void 0 ? void 0 : initialAmountGroup.currency) ||
        remittanceInfo[RemittanceInfoFields.urgent] !==
            initialRemittanceInfo[RemittanceInfoFields.urgent] ||
        remittanceInfo[RemittanceInfoFields.paymentReference] !==
            initialRemittanceInfo[RemittanceInfoFields.paymentReference] ||
        remittanceInfo[RemittanceInfoFields.description] !==
            initialRemittanceInfo[RemittanceInfoFields.description]);
}
function applyPurposeOfPaymentSettings({ form, config, }) {
    var _a;
    const country = (_a = form.value) === null || _a === void 0 ? void 0 : _a.inputFormFromSettings;
    const remittanceGroup = form.get(PaymentBaseFields.remittanceInfo);
    if (!remittanceGroup) {
        return;
    }
    const purposeControl = remittanceGroup.get(RemittanceInfoFields.purposeOfPayment) ||
        registerFormControl(remittanceGroup, RemittanceInfoFields.purposeOfPayment);
    const info = getPurposeOfPaymentInfo(country);
    const fieldConfig = getConfig(RemittanceInfoFields.purposeOfPayment, config);
    const options = fieldConfig === null || fieldConfig === void 0 ? void 0 : fieldConfig.options;
    if (purposeControl && options) {
        options.isOptional = info.isOptional;
        options.purposes = info.purposes;
        options.isCollapsed = info.isOptional;
        if (options.isOptional) {
            purposeControl.setValidators(null);
            purposeControl.setAsyncValidators(null);
            purposeControl.updateValueAndValidity();
        }
        else {
            purposeControl.setValidators([
                Validators.required,
                ...(options.validators || []),
            ]);
            purposeControl.setAsyncValidators([...(options.asyncValidators || [])]);
            purposeControl.updateValueAndValidity();
        }
    }
}
function isCounterPartyDetailsTruthy(counterpartyDetails) {
    var _a;
    return isObjectTruthy({
        name: counterpartyDetails === null || counterpartyDetails === void 0 ? void 0 : counterpartyDetails.name,
        accountNumber: counterpartyDetails.accountNumber,
        bankBranchCode: (_a = counterpartyDetails.creditorBank) === null || _a === void 0 ? void 0 : _a.bankBranchCode,
    });
}
function getBeneficiaryDetails(beneficiary) {
    var _a, _b;
    const contactAccount = (_b = (_a = beneficiary) === null || _a === void 0 ? void 0 : _a.accounts) === null || _b === void 0 ? void 0 : _b[0];
    const beneficiaryItem = beneficiary;
    return {
        bankBranchCode: (contactAccount === null || contactAccount === void 0 ? void 0 : contactAccount.bankCode) || (beneficiaryItem === null || beneficiaryItem === void 0 ? void 0 : beneficiaryItem.bankBranchCode),
        accountNumber: (contactAccount === null || contactAccount === void 0 ? void 0 : contactAccount.accountNumber) || (beneficiaryItem === null || beneficiaryItem === void 0 ? void 0 : beneficiaryItem.accountNumber),
        name: beneficiary === null || beneficiary === void 0 ? void 0 : beneficiary.name,
        BIC: (contactAccount === null || contactAccount === void 0 ? void 0 : contactAccount.BIC) || (beneficiaryItem === null || beneficiaryItem === void 0 ? void 0 : beneficiaryItem.BIC),
        address: getAccountHolderAddress(contactAccount),
        bankAddress: getContactBankAddress(contactAccount),
    };
}
function revertBeneficiaryChanges(form) {
    var _a, _b, _c;
    const counterPartyGroup = form.get(PaymentBaseFields.counterparty);
    const selectedBeneficiary = (_a = form.get(HiddenFields.selectedBeneficiary)) === null || _a === void 0 ? void 0 : _a.value;
    const addressGroup = counterPartyGroup.get(CounterPartyFields.postalAddress);
    const bankAddressGroup = counterPartyGroup.get([
        CounterPartyFields.creditorBank,
        CounterPartyFields.postalAddress,
    ]);
    const isManualEditControl = form.get(HiddenFields.isManualEdit);
    if (selectedBeneficiary) {
        const beneficiaryDetails = getBeneficiaryDetails(selectedBeneficiary);
        isManualEditControl === null || isManualEditControl === void 0 ? void 0 : isManualEditControl.reset();
        counterPartyGroup.patchValue({
            [CounterPartyFields.name]: beneficiaryDetails.name,
            [CounterPartyFields.accountNumber]: beneficiaryDetails.accountNumber,
            [CounterPartyFields.creditorBank]: {
                [CounterPartyFields.bankBranchCode]: beneficiaryDetails.bankBranchCode,
                [CounterPartyFields.bic]: beneficiaryDetails.BIC,
            },
        });
        addressGroup === null || addressGroup === void 0 ? void 0 : addressGroup.setValue(Object.assign({}, beneficiaryDetails.address));
        bankAddressGroup === null || bankAddressGroup === void 0 ? void 0 : bankAddressGroup.setValue(Object.assign(Object.assign({}, beneficiaryDetails.bankAddress), { country: ((_b = beneficiaryDetails.bankAddress) === null || _b === void 0 ? void 0 : _b.country) ||
                ((_c = form.get(HiddenFields.defaultCountry)) === null || _c === void 0 ? void 0 : _c.value) }));
    }
    else {
        resetBeneficiaryDetails(counterPartyGroup);
    }
}

function triggerHook(name, component) {
    const control = component.group.get(component.config.name);
    const hook = component.config.hooks && component.config.hooks[name];
    if (typeof hook === 'function') {
        // Triggering the hook with component specific parameters
        hook({
            component,
            control,
            group: component.group, // The parent form group
        });
    }
}
function triggerStepperHook(hooks, hookName, callback, stepperConfig, action) {
    const hook = hookName && hookName[hooks];
    const doneFn = callback;
    if (typeof hook === 'function') {
        if (hooks === MultiPaymentHooks.onClick) {
            hook({
                doneFn,
                stepperConfig,
                action,
            });
        }
        else {
            hook({});
        }
    }
}

class PayordAddressComponent {
    constructor(elRef) {
        this.elRef = elRef;
        this.options = {};
        this.addressViewType = ViewType.FORM;
        this.initialAddress = {
            addressLine1: [''],
            addressLine2: [''],
            streetName: [''],
            postCode: [''],
            town: [''],
            countrySubDivision: [''],
        };
    }
    ngOnInit() {
        this.options.hideCountry =
            this.options.hideCountry ||
                (this.options.isWizardMode &&
                    this.options.addressType === AddressType['beneficiary bank']);
        this.countries$ =
            this.options.useSanctionedCountries || this.options.isWizardMode
                ? this.options.items$.pipe(map((items) => items.map(({ country }) => ({
                    value: country,
                    label: CountriesMap[country],
                }))))
                : of(this.options.countries);
        this.addressGroup = (registerFormGroup(this.group, this.config.name, this.initialAddress));
        if (!this.options.hideCountry) {
            registerFormControl(this.addressGroup, 'country');
        }
        this.addressViewType = isAddressTruthy(this.addressGroup.value)
            ? ViewType.CARD
            : ViewType.BUTTON;
        this.parentForm = getParentForm(this.group);
        this.counterpartyIdControl = (this.parentForm.get([
            PaymentBaseFields.counterparty,
            CounterPartyFields.id,
        ]));
        triggerHook(PaymentFormFieldHooks.onInit, this);
    }
    ngOnDestroy() {
        triggerHook(PaymentFormFieldHooks.onDestroy, this);
    }
    onAddressAdd() {
        this.addressViewType = ViewType.FORM;
    }
    onAddressEdit() {
        this.addressViewType = ViewType.FORM;
    }
    onAddressDelete() {
        var _a;
        this.addressViewType = ViewType.BUTTON;
        if (this.options.hideCountry || ((_a = this.options.options) === null || _a === void 0 ? void 0 : _a.length) === 1) {
            for (const key in this.addressGroup.controls) {
                if (key !== 'country') {
                    this.addressGroup.controls[key].reset();
                }
            }
        }
        else {
            this.addressGroup.reset();
        }
    }
    onAddressReset() {
        this.addressViewType = ViewType.BUTTON;
    }
    onAddressSubmit() {
        if (this.addressGroup.valid) {
            this.addressViewType = ViewType.CARD;
        }
        else {
            focusErrorElement(this.elRef.nativeElement);
        }
    }
}
/** @nocollapse */ PayordAddressComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordAddressComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PayordAddressComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordAddressComponent, selector: "bb-payord-address", ngImport: i0, template: "<div class=\"bb-dynamic-input\" [hidden]=\"config?.hidden\">\n  <div class=\"form-group\" [ngClass]=\"options?.cssClasses\">\n    <bb-address-item-details\n      [addressForm]=\"addressGroup\"\n      [addressType]=\"options?.addressType\"\n      [viewType]=\"options?.viewType || addressViewType\"\n      [isClosedPayment]=\"\n        parentForm.get('isClosedPayment')?.value || counterpartyIdControl?.value\n      \"\n      (add)=\"onAddressAdd()\"\n      (edit)=\"onAddressEdit()\"\n      (discard)=\"onAddressDelete()\"\n      (delete)=\"onAddressDelete()\"\n      (reset)=\"onAddressReset()\"\n      (submit)=\"onAddressSubmit()\"\n      [states]=\"options?.states\"\n      [countries]=\"countries$ | async\"\n      [hideCountry]=\"options?.hideCountry\"\n      [attr.data-role]=\"config?.name\"\n    >\n    </bb-address-item-details>\n  </div>\n</div>\n", components: [{ type: i1.ӨAddressDetailsComponent, selector: "bb-address-item-details", inputs: ["addressForm", "addressType", "address", "isContactAddressCopied", "states", "countries", "hideCountry", "viewType", "isClosedPayment"], outputs: ["submit", "reset", "discard", "delete", "edit", "add"] }], directives: [{ type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], pipes: { "async": i4.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordAddressComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payord-address',
                    templateUrl: './payord-address.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; } });

class ValidationMessageComponent {
    constructor(elRef) {
        this.elRef = elRef;
        /**
         * If Generic messages are not needed.
         */
        this.hideGeneric = false;
    }
    ngOnInit() {
        this.validationMessages = this.validationMessages || [];
    }
    getValidationMessage(error) {
        this.validationMessage = '';
        if (this.control.errors && this.validationMessages.length) {
            for (const msg of this.validationMessages) {
                if (error && msg.name === error) {
                    this.validationMessage = msg.message;
                    return this.validationMessage;
                }
                else if (this.control.errors[msg.name]) {
                    this.validationMessage = msg.message;
                    return this.validationMessage;
                }
            }
        }
        return this.validationMessage;
    }
    getRequiredMessage() {
        this.requiredMessage = this.getValidationMessage('required');
        return this.requiredMessage;
    }
    onFocusout() {
        toggleTabIndex('.bb-input-validation-message', this.elRef.nativeElement, false);
    }
}
/** @nocollapse */ ValidationMessageComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ValidationMessageComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ ValidationMessageComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ValidationMessageComponent, selector: "bb-payord-validation-message", inputs: { control: "control", validationMessages: "validationMessages", label: "label", id: "id", hideGeneric: "hideGeneric" }, ngImport: i0, template: "<bb-input-validation-message-ui\n  data-role=\"input-error\"\n  (focusout)=\"onFocusout()\"\n  *ngIf=\"control\"\n  [showErrors]=\"control?.touched && control?.invalid\"\n>\n  <ng-container\n    *ngIf=\"control.errors && control.errors['required']; else invalidError\"\n  >\n    <span data-role=\"required-error\" [attr.id]=\"id\">\n      <ng-container *ngIf=\"getRequiredMessage(); else requiredError\">\n        {{ requiredMessage }}\n      </ng-container>\n    </span>\n  </ng-container>\n\n  <ng-template #requiredError>\n    <ng-container\n      i18n=\"@@dynamic-form-field-default-validation-message.required.error\"\n    >\n      {{ label }} is required\n    </ng-container>\n  </ng-template>\n\n  <ng-template #invalidError>\n    <span data-role=\"required-error\" [attr.id]=\"id\">\n      <ng-container *ngIf=\"getValidationMessage(); else genericError\">\n        {{ validationMessage }}\n      </ng-container>\n    </span>\n  </ng-template>\n\n  <ng-template #genericError>\n    <ng-container\n      *ngIf=\"!hideGeneric\"\n      i18n=\"@@dynamic-form-field-default-validation-message.generic.error\"\n    >\n      Invalid {{ label }}\n    </ng-container>\n  </ng-template>\n</bb-input-validation-message-ui>\n", components: [{ type: i3.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ValidationMessageComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payord-validation-message',
                    templateUrl: './validation-message.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { control: [{
                type: Input
            }], validationMessages: [{
                type: Input
            }], label: [{
                type: Input
            }], id: [{
                type: Input
            }], hideGeneric: [{
                type: Input
            }] } });

class PayordAmountComponent {
    constructor() {
        this.payordAmountId = PayordAmountComponent._id++;
        /**
         * Initial amount value
         */
        this.initialAmount = {
            [RemittanceInfoFields.amount]: '',
            [RemittanceInfoFields.currency]: '',
        };
    }
    /**
     * Initializes the component.
     *
     * @returns
     */
    ngOnInit() {
        this.control = registerFormControl(this.group, this.config.name, [Validators.required, amountValidator], this.options.asyncValidators, this.options.defaultValue || this.initialAmount, this.config);
        triggerHook(PaymentFormFieldHooks.onInit, this);
    }
    /**
     * Cleanups just before Angular destroys the component.
     *
     * @returns
     */
    ngOnDestroy() {
        triggerHook(PaymentFormFieldHooks.onDestroy, this);
    }
    getLabelledbyForSelector() {
        var _a, _b, _c;
        return (((_a = this.options) === null || _a === void 0 ? void 0 : _a.labelledBy) ||
            `${((_b = this.amountLabelEl) === null || _b === void 0 ? void 0 : _b.nativeElement.id) || ''} ${((_c = this.helperTextEL) === null || _c === void 0 ? void 0 : _c.nativeElement.id) || ''}`.trim());
    }
}
PayordAmountComponent._id = 0;
/** @nocollapse */ PayordAmountComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordAmountComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PayordAmountComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordAmountComponent, selector: "bb-payord-amount", viewQueries: [{ propertyName: "amountLabelEl", first: true, predicate: ["amountLabel"], descendants: true }, { propertyName: "helperTextEL", first: true, predicate: ["helperText"], descendants: true }], ngImport: i0, template: "<section\n  *ngIf=\"!config?.hidden\"\n  class=\"bb-dynamic-input form-group payment-amount\"\n  [formGroup]=\"group\"\n  [ngClass]=\"options?.cssClasses\"\n>\n  <div\n    #amountLabel\n    class=\"bb-dynamic-input__label bb-label\"\n    id=\"payord-amount__helper-label-{{ payordAmountId }}\"\n    *ngIf=\"options?.label\"\n  >\n    {{ options?.label }}\n  </div>\n  <span\n    #helperText\n    class=\"bb-dynamic-input__helper-text bb-text-support\"\n    id=\"payord-amount__helper-text-{{ payordAmountId }}\"\n    *ngIf=\"options?.helperText\"\n    [textContent]=\"options?.helperText\"\n  >\n  </span>\n  <bb-currency-input-ui\n    resultType=\"string\"\n    [attr.maxlength]=\"options?.maxLength || 18\"\n    [currencies]=\"options?.currencies\"\n    [decMaxLen]=\"options?.decMaxLen\"\n    [allowNegativeValue]=\"options?.allowNegativeValue\"\n    [currencyLabel]=\"options?.currencyLabel || ''\"\n    [decimalLabel]=\"options?.decimalLabel || ''\"\n    [disabled]=\"options?.disabled || false\"\n    [integer]=\"options?.integer\"\n    [integerLabel]=\"options?.integerLabel || ''\"\n    [isRightAligned]=\"options?.isRightAligned\"\n    [placeholder]=\"options?.placeholder || 0\"\n    [readonly]=\"options?.readonly\"\n    [aria-describedby]=\"options?.describedBy\"\n    [aria-labelledby]=\"getLabelledbyForSelector()\"\n    [aria-invalid]=\"options?.ariaInvalid\"\n    [formControlName]=\"this.config.name\"\n    [attr.data-role]=\"config.name\"\n  >\n    <div bbValidationMessage>\n      <bb-payord-validation-message\n        *ngIf=\"control?.touched && control?.invalid\"\n        [control]=\"group.get('amountGroup')\"\n        [validationMessages]=\"options?.validationMessages\"\n        [label]=\"options?.label || 'Amount'\"\n      ></bb-payord-validation-message>\n    </div>\n  </bb-currency-input-ui>\n  <div\n    class=\"bb-dynamic-input__desc bb-text-support bb-subtitle\"\n    *ngIf=\"options?.description\"\n    [textContent]=\"options?.description\"\n  ></div>\n</section>\n", components: [{ type: i1$1.CurrencyInputComponent, selector: "bb-currency-input-ui", inputs: ["decMaxLen", "decMinLen", "placeholder", "resultType", "integer", "required", "readonly", "disabled", "integerLabelSrOnly", "decimalLabelSrOnly", "currencies", "isRightAligned", "integerId", "decimalId", "integerLabel", "decimalLabel", "currencyLabel", "allowNegativeValue", "currencyListAriaLabel", "currencyListWithOnItemAriaLabel", "aria-describedby", "aria-labelledby", "aria-invalid"], outputs: ["blur"] }, { type: ValidationMessageComponent, selector: "bb-payord-validation-message", inputs: ["control", "validationMessages", "label", "id", "hideGeneric"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i5.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordAmountComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payord-amount',
                    templateUrl: './payord-amount.component.html',
                }]
        }], propDecorators: { amountLabelEl: [{
                type: ViewChild,
                args: ['amountLabel']
            }], helperTextEL: [{
                type: ViewChild,
                args: ['helperText']
            }] } });

class VisibilityService {
    constructor() {
        this.showSubject$ = new BehaviorSubject({});
        this.hideSubject$ = new BehaviorSubject({});
    }
    /**
     * Getter to show an item
     */
    get show$() {
        return this.showSubject$.asObservable();
    }
    /**
     * Getter to hide an item
     */
    get hide$() {
        return this.hideSubject$.asObservable();
    }
    /**
     * Shows the items
     *
     * @param [name] Item name
     * @param [items] Items to show
     * @returns
     */
    showItems(name, items) {
        this.showSubject$.next({ name, items });
    }
    /**
     * Hides the items
     *
     * @param [name] Item name
     * @param [items] Items to hide
     * @returns
     */
    hideItems(name, items) {
        this.hideSubject$.next({ name, items });
    }
}
/** @nocollapse */ VisibilityService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: VisibilityService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ VisibilityService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: VisibilityService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: VisibilityService, decorators: [{
            type: Injectable
        }] });

class PayordBeneficiarySelectorComponent {
    constructor(visibilityService, deprecationService) {
        this.visibilityService = visibilityService;
        this.deprecationService = deprecationService;
        this.showBeneficiaryDetails = false;
        this.saveContactControlName = CounterPartyFields.saveNewContact;
        this.manualEdit$ = new BehaviorSubject(false);
        this.query = '';
        this.destroy$ = new Subject();
    }
    ngOnInit() {
        var _a, _b, _c, _d;
        this.setupFormFields();
        if (this.options.isWizardMode) {
            this.setupWizardFormFields();
        }
        triggerHook(PaymentFormFieldHooks.onInit, this);
        if (this.accountNameControl.value || ((_a = this.options) === null || _a === void 0 ? void 0 : _a.isTemplateMode)) {
            this.showDependantFields();
        }
        else {
            this.hideDependantFields();
        }
        const initiatorControl = (_b = this.group.parent) === null || _b === void 0 ? void 0 : _b.get(PaymentBaseFields.initiator);
        initiatorControl === null || initiatorControl === void 0 ? void 0 : initiatorControl.valueChanges.pipe(takeUntil(this.destroy$), startWith(initiatorControl.value)).subscribe(({ id }) => {
            this.accountNameControl.updateValueAndValidity();
        });
        (_c = this.arrangementIdControl) === null || _c === void 0 ? void 0 : _c.valueChanges.pipe(takeUntil(this.destroy$)).subscribe((controlId) => {
            if (!this.isClosedPaymentControl.value) {
                toggleBeneficiaryControls(this.group, !!controlId);
            }
        });
        (_d = this.hideBeneficiaryFieldsControl) === null || _d === void 0 ? void 0 : _d.valueChanges.pipe(takeUntil(this.destroy$)).subscribe(() => {
            this.onSearch('');
            this.enableBeneficiaryControl.setValue(true);
            this.manualEdit$.next(false);
            this.saveNewContactControl.setValue(false);
            if (!this.options.isWizardMode) {
                this.hideDependantFields();
            }
        });
    }
    ngOnDestroy() {
        var _a;
        (_a = this.initiatorControlSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
        triggerHook(PaymentFormFieldHooks.onDestroy, this);
    }
    setupFormFields() {
        var _a;
        this.deprecationService.logDeprecatedFeature(`
      "initiatorNameControl" is deprecated and will be removed in next major release, please use "initiatorIdControl" instead.
    `);
        this.accountNameControl = registerFormControl(this.group, this.config.name, [Validators.required, sameAccountsValidator()]);
        this.manualEditControl = registerFormControl(this.group.parent, HiddenFields.isManualEdit);
        this.isClosedPaymentControl = registerFormControl(this.group.parent, HiddenFields.isClosedPayment);
        this.enableBeneficiaryControl = registerFormControl(this.group.parent, HiddenFields.enableBeneficiary, [], [], true);
        this.beneficiaryAccountNameControl = registerFormControl(this.group, HiddenFields.beneficiaryAccountName);
        this.saveContactControl = registerFormControl(this.group, this.saveContactControlName);
        this.saveNewContactControl = registerFormControl(this.group, HiddenFields.showSaveNewContact);
        this.hideBeneficiaryFieldsControl = registerFormControl(this.group, HiddenFields.hideBeneficiaryFields);
        this.arrangementIdControl = registerFormControl(this.group, CounterPartyFields.id);
        this.selectedBeneficiaryControl = registerFormControl(this.group.parent, HiddenFields.selectedBeneficiary);
        this.selectedContactControl = (registerFormGroup(this.group, CounterPartyFields.selectedContact, {
            contactId: [''],
            accountId: [''],
        }));
        this.initiatorIdControl = ((_a = this.group.parent) === null || _a === void 0 ? void 0 : _a.get([PaymentBaseFields.initiator, InitiatorFields.id]));
    }
    setupWizardFormFields() {
        this.accountNumberControl =
            this.group.controls[CounterPartyFields.accountNumber] ||
                this.registerAccountNumberControl();
        this.beneficiaryAddressGroup =
            this.group.controls[CounterPartyFields.postalAddress] ||
                this.registerAddressGroup(this.group);
        this.beneficiaryBankGroup =
            this.group.controls[CounterPartyFields.creditorBank] ||
                this.registerCreditorBankGroup();
        this.bankCodeControl =
            this.group.controls[`${CounterPartyFields.creditorBank}.${CounterPartyFields.bankBranchCode}`] || this.registerBankCodeControl();
        this.bankNameControl =
            this.group.controls[`${CounterPartyFields.creditorBank}.${CounterPartyFields.bankName}`] || this.registerBankNameControl();
        this.bankBicControl =
            this.group.controls[`${CounterPartyFields.creditorBank}.${CounterPartyFields.bic}`] || this.registerBankBicControl();
        this.beneficiaryBankAddressGroup =
            this.group.controls[`${CounterPartyFields.creditorBank}.${CounterPartyFields.postalAddress}`] || this.registerAddressGroup(this.beneficiaryBankGroup);
        registerFormControl(this.group, CounterPartyFields.schemeName);
    }
    registerAccountNumberControl() {
        return registerFormControl(this.group, CounterPartyFields.accountNumber);
    }
    registerBankNameControl() {
        return registerFormControl(this.beneficiaryBankGroup, CounterPartyFields.bankName);
    }
    registerBankBicControl() {
        return registerFormControl(this.beneficiaryBankGroup, CounterPartyFields.bic);
    }
    registerBankCodeControl() {
        return registerFormControl(this.beneficiaryBankGroup, CounterPartyFields.bankBranchCode);
    }
    registerAddressGroup(group) {
        const initialAddress = {
            addressLine1: [''],
            addressLine2: [''],
            streetName: [''],
            postCode: [''],
            town: [''],
            countrySubDivision: [''],
            country: [''],
        };
        return (registerFormGroup(group, CounterPartyFields.postalAddress, initialAddress));
    }
    registerCreditorBankGroup() {
        const creditorBankGroup = new FormGroup({});
        this.group.addControl(CounterPartyFields.creditorBank, creditorBankGroup);
        return creditorBankGroup;
    }
    registerCreditorBankAddress() {
        const creditorBankGroup = new FormGroup({});
        this.group.addControl(CounterPartyFields.creditorBank, creditorBankGroup);
        return creditorBankGroup;
    }
    fetchCreditorItems(params) {
        var _a;
        if ((_a = this.config.options) === null || _a === void 0 ? void 0 : _a.fetchItems$) {
            this.config.options.fetchItems$.next(params);
        }
    }
    onLoadMoreAccounts(page) {
        this.deprecationService.logDeprecatedFeature(`
      "onLoadMoreAccounts" is deprecated since 3.9.3 and will be removed in 3.10.0, please use "onFetchMoreItems" instead.
    `);
        this.fetchCreditorItems({
            params: { from: page, query: this.query },
            type: BeneficiaryList.ACCOUNTS,
        });
    }
    onLoadMoreContacts(page) {
        this.deprecationService.logDeprecatedFeature(`
      "onLoadMoreContacts" is deprecated since 3.9.3 and will be removed in 3.10.0, please use "onFetchMoreItems" instead.
    `);
        this.fetchCreditorItems({
            params: { from: page, query: this.query },
            type: BeneficiaryList.CONTACTS,
        });
    }
    onFetchMoreItems(event) {
        this.fetchCreditorItems({
            params: { from: event.page, query: this.query },
            type: event.type,
        });
    }
    onSearch(query) {
        this.query = query;
        this.manualEditControl.setValue(true);
        this.fetchCreditorItems({ params: { query } });
    }
    onSelectAccount(selectedItem) {
        var _a;
        const accountNumberControl = this.group.controls[CounterPartyFields.accountNumber];
        const bankNameControl = this.group.get(`${CounterPartyFields.creditorBank}.${CounterPartyFields.bankName}`);
        const bankCodeControl = this.group.get(`${CounterPartyFields.creditorBank}.${CounterPartyFields.bankBranchCode}`);
        const beneficiaryAddressGroup = this.group.get(CounterPartyFields.postalAddress);
        const creditorBankBic = this.group.get(`${CounterPartyFields.creditorBank}.${CounterPartyFields.bic}`);
        this.setValue(this.accountNameControl, selectedItem.name || '');
        this.setValue(accountNumberControl, selectedItem.accountNumber || '');
        this.setValue(bankCodeControl, selectedItem.bankBranchCode);
        this.setValue(creditorBankBic, selectedItem.BIC || '');
        this.setValue(bankNameControl, '');
        this.setValue(this.arrangementIdControl, selectedItem.id);
        this.saveNewContactControl.setValue(false);
        this.setAddress(beneficiaryAddressGroup, {});
        this.setDefaultCountry();
        this.showBeneficiaryDetails = true;
        this.enableBeneficiaryControl.setValue(false);
        this.manualEdit$.next(false);
        this.manualEditControl.setValue(false);
        this.selectedBeneficiaryControl.setValue(selectedItem);
        this.selectedContactControl.reset();
        this.saveContactControl.reset();
        this.showDependantFields();
        (_a = this.initiatorIdControl) === null || _a === void 0 ? void 0 : _a.updateValueAndValidity();
    }
    onSelectContact(selectedcontact) {
        var _a;
        const accountNumberControl = this.group.controls[CounterPartyFields.accountNumber];
        const bankNameControl = this.group.get(`${CounterPartyFields.creditorBank}.${CounterPartyFields.bankName}`);
        const bankCodeControl = this.group.get(`${CounterPartyFields.creditorBank}.${CounterPartyFields.bankBranchCode}`);
        const creditorBankBic = this.group.get(`${CounterPartyFields.creditorBank}.${CounterPartyFields.bic}`);
        const beneficiaryAddressGroup = this.group.get(CounterPartyFields.postalAddress);
        const beneficiaryBankAddressGroup = this.group.get(`${CounterPartyFields.creditorBank}.${CounterPartyFields.postalAddress}`);
        const account = selectedcontact.accounts[0];
        const accountHolderAddress = this.getAccountHolderAddress(account);
        const beneficiaryAddress = isAddressTruthy(accountHolderAddress)
            ? accountHolderAddress
            : this.getBeneficiaryAddress(selectedcontact);
        const bankAddress = this.getContactBankAddress(account);
        this.setValue(this.accountNameControl, selectedcontact.name);
        this.setValue(this.beneficiaryAccountNameControl, selectedcontact.accountName || '');
        this.setValue(accountNumberControl, account.accountNumber || account.IBAN || '');
        this.setValue(bankCodeControl, account.bankCode || '');
        this.setValue(bankNameControl, account.bankName || '');
        this.setValue(creditorBankBic, account.BIC || '');
        this.setValue(this.arrangementIdControl, '');
        this.setValue(this.selectedContactControl, this.getSelectedContactDetails(selectedcontact));
        this.selectedBeneficiaryControl.setValue(selectedcontact);
        this.setAddress(beneficiaryAddressGroup, beneficiaryAddress);
        this.setAddress(beneficiaryBankAddressGroup, bankAddress, true);
        this.showBeneficiaryDetails = true;
        this.manualEdit$.next(false);
        this.manualEditControl.setValue(false);
        this.enableBeneficiaryControl.setValue(false);
        this.saveContactControl.reset();
        this.showDependantFields();
        (_a = this.initiatorIdControl) === null || _a === void 0 ? void 0 : _a.updateValueAndValidity();
    }
    getSelectedContactDetails(selectedcontact) {
        // currently there is no id associated with a contact account. Will need populate accountId when contacts fix this.
        return { contactId: selectedcontact === null || selectedcontact === void 0 ? void 0 : selectedcontact.id, accountId: '' };
    }
    setAddressDetails(addressGroup, address) {
        if (addressGroup) {
            if (isAddressTruthy(address)) {
                this.setAddress(addressGroup, address);
            }
        }
    }
    onManualEdit(search) {
        const bankaddressGroup = this.group.get(`${CounterPartyFields.creditorBank}.${CounterPartyFields.postalAddress}`);
        const banksAddressControls = this.options.isWizardMode
            ? this.getAddressFields(bankaddressGroup)
            : [bankaddressGroup];
        this.accountNameControl.patchValue(search);
        this.manualEdit$.next(true);
        this.manualEditControl.setValue(true);
        this.saveNewContactControl.setValue(true);
        this.setValue(this.arrangementIdControl, '');
        this.selectedBeneficiaryControl.reset();
        this.resetControls([
            this.group.controls[CounterPartyFields.accountNumber],
            this.group.get(`${CounterPartyFields.creditorBank}.${CounterPartyFields.bankName}`),
            this.group.get(`${CounterPartyFields.creditorBank}.${CounterPartyFields.bankBranchCode}`),
            this.group.get(`${CounterPartyFields.creditorBank}.${CounterPartyFields.bic}`),
            this.group.get(CounterPartyFields.postalAddress),
            this.selectedContactControl,
            ...banksAddressControls,
        ]);
        this.setDefaultCountry();
        this.visibilityService.showItems(this.config.parent);
        this.showDependantFields();
    }
    setDefaultCountry() {
        var _a, _b;
        const defaultCountry = this.options.isWizardMode
            ? {
                country: (_b = (_a = this.group.parent) === null || _a === void 0 ? void 0 : _a.get(HiddenFields.defaultCountry)) === null || _b === void 0 ? void 0 : _b.value,
            }
            : null;
        const beneficiaryBankAddressGroup = this.group.get(`${CounterPartyFields.creditorBank}.${CounterPartyFields.postalAddress}`);
        this.setAddress(beneficiaryBankAddressGroup, Object.assign({}, defaultCountry), true);
    }
    onSearchBlur(value) {
        this.accountNameControl.patchValue(value);
        if (!this.accountNameControl.touched) {
            this.accountNameControl.markAsTouched();
        }
    }
    getAddressFields(bankaddressGroup) {
        const addressControls = [];
        if (bankaddressGroup) {
            for (const controlName in bankaddressGroup.controls) {
                if (bankaddressGroup.controls.hasOwnProperty(controlName)) {
                    const control = bankaddressGroup.controls[controlName];
                    if (controlName !== CounterPartyFields.country) {
                        addressControls.push(control);
                    }
                }
            }
        }
        return addressControls;
    }
    resetControls(controls) {
        controls.forEach((control) => {
            if (control) {
                control.reset();
            }
        });
    }
    showDependantFields() {
        var _a;
        if ((_a = this.config.options) === null || _a === void 0 ? void 0 : _a.dependants) {
            this.visibilityService.showItems(this.config.parent, this.config.options.dependants);
        }
    }
    hideDependantFields() {
        var _a;
        if ((_a = this.config.options) === null || _a === void 0 ? void 0 : _a.dependants) {
            this.visibilityService.hideItems(this.config.parent, this.config.options.dependants);
        }
    }
    getBeneficiaryAddress(contact) {
        return {
            addressLine1: contact.addressLine1,
            addressLine2: contact.addressLine2,
            streetName: contact.streetName,
            town: contact.town,
            postCode: contact.postCode,
            countrySubDivision: contact.countrySubDivision,
            country: contact.country,
        };
    }
    getAccountHolderAddress(account) {
        return getAccountHolderAddress(account);
    }
    getContactBankAddress(account) {
        return getContactBankAddress(account);
    }
    setAddress(addressGroup, addressInfo, isBankAddress = false) {
        if (addressGroup) {
            if (isAddressTruthy(addressInfo) || isBankAddress) {
                addressGroup.patchValue({
                    addressLine1: addressInfo.addressLine1,
                    addressLine2: addressInfo.addressLine2,
                    streetName: addressInfo.streetName,
                    town: addressInfo.town,
                    postCode: addressInfo.postCode,
                    countrySubDivision: addressInfo.countrySubDivision,
                    country: addressInfo.country,
                });
            }
            else {
                for (const controlName in addressGroup.controls) {
                    if (!(isBankAddress &&
                        this.options.retainBankCountry &&
                        controlName === 'country')) {
                        addressGroup.controls[controlName].reset();
                    }
                }
            }
        }
    }
    setValue(control, value) {
        if (control) {
            if (value) {
                control.patchValue(value);
            }
            else {
                control.reset();
            }
        }
    }
    onClearValue(value) {
        this.setValue(this.beneficiaryAccountNameControl, value);
    }
    isBeneficiaryDisabled() {
        return ((this.isClosedPaymentControl.value &&
            !this.enableBeneficiaryControl.value) ||
            !!this.arrangementIdControl.value);
    }
}
/** @nocollapse */ PayordBeneficiarySelectorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordBeneficiarySelectorComponent, deps: [{ token: VisibilityService }, { token: i2.DeprecationsService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PayordBeneficiarySelectorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordBeneficiarySelectorComponent, selector: "bb-payord-beneficiary-selector", ngImport: i0, template: "<ng-container\n  *ngTemplateOutlet=\"\n    creditorTmpl;\n    context: { $implicit: options?.items$ | async }\n  \"\n></ng-container>\n\n<ng-template let-creditorDetails #creditorTmpl>\n  <div\n    class=\"form-group bb-dynamic-input\"\n    [ngClass]=\"options?.cssClasses\"\n    *ngIf=\"!config?.hidden\"\n    [formGroup]=\"group\"\n  >\n    <section class=\"payment-to form-group\">\n      <bb-beneficiary-selector-ui\n        [selectedItem]=\"{ name: accountNameControl?.value }\"\n        [placeholder]=\"options?.placeholder || ''\"\n        [tabs]=\"options?.tabs\"\n        [hasError]=\"accountNameControl?.touched && accountNameControl?.invalid\"\n        [totalAccounts]=\"creditorDetails?.totalCreditAccounts\"\n        [totalContacts]=\"creditorDetails?.totalContacts\"\n        [accounts]=\"creditorDetails?.accounts\"\n        [contacts]=\"creditorDetails?.contacts\"\n        [totalContactsItemsCount]=\"creditorDetails?.totalContactsItemsCount\"\n        [dropdownIcon]=\"options?.dropdownIcon || 'toggle-down'\"\n        [aria-label]=\"options?.ariaLabel || 'Toggle beneficiary list'\"\n        [title]=\"options?.label\"\n        [helperText]=\"options?.helperText\"\n        [search]=\"accountNameControl\"\n        [isManualEditDisabled]=\"options?.isManualEditDisabled\"\n        [isClosedPayment]=\"isClosedPaymentControl.value\"\n        [isBeneficiaryDisabled]=\"isBeneficiaryDisabled()\"\n        (fetchMoreItems)=\"onFetchMoreItems($event)\"\n        (searchValue)=\"onSearch($event)\"\n        (selectedAccount)=\"onSelectAccount($event)\"\n        (selectedContact)=\"onSelectContact($event)\"\n        (manualEdit)=\"onManualEdit($event)\"\n        (searchBlur)=\"onSearchBlur($event)\"\n        (clear)=\"onClearValue($event)\"\n        #beneficiarySelector\n      ></bb-beneficiary-selector-ui>\n\n      <bb-payord-validation-message\n        [control]=\"group?.controls['name']\"\n        [validationMessages]=\"options?.validationMessages\"\n        [label]=\"options?.label || 'Beneficiary name'\"\n      ></bb-payord-validation-message>\n\n      <div\n        class=\"bb-dynamic-input__desc bb-text-support bb-subtitle\"\n        *ngIf=\"options?.description\"\n        [textContent]=\"options?.description\"\n      ></div>\n    </section>\n    <ng-container *ngIf=\"!options?.isTemplateMode\">\n      <div\n        *ngIf=\"saveNewContactControl?.value || (manualEdit$ | async)\"\n        class=\"bb-block bb-block--md\"\n      >\n        <bb-input-checkbox-ui\n          [disabled]=\"!!isClosedPaymentControl.value\"\n          [formControlName]=\"saveContactControlName\"\n          [label]=\"options.saveNewContactLabel || 'Save as a new contact'\"\n          data-role=\"save-new-contact-checkbox\"\n        >\n        </bb-input-checkbox-ui>\n      </div>\n    </ng-container>\n  </div>\n</ng-template>\n", components: [{ type: i1.ӨBeneficiarySelectorUiComponent, selector: "bb-beneficiary-selector-ui", inputs: ["totalAccounts", "totalContacts", "totalContactsItemsCount", "contacts", "accounts", "tabs", "closeDropdownRequest$", "placeholder", "title", "helperText", "hasError", "aria-label", "dropdownIcon", "debounceTime", "selectedItem", "search", "isClosedPayment", "isBeneficiaryDisabled", "isManualEditDisabled"], outputs: ["selectedAccount", "selectedContact", "searchValue", "fetchMoreItems", "manualEdit", "searchBlur", "clear"] }, { type: ValidationMessageComponent, selector: "bb-payord-validation-message", inputs: ["control", "validationMessages", "label", "id", "hideGeneric"] }, { type: i5$1.InputCheckboxComponent, selector: "bb-input-checkbox-ui", inputs: ["indeterminate"], outputs: ["indeterminateChange"] }], directives: [{ type: i4.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i5.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }], pipes: { "async": i4.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordBeneficiarySelectorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payord-beneficiary-selector',
                    templateUrl: 'payord-beneficiary-selector.component.html',
                }]
        }], ctorParameters: function () { return [{ type: VisibilityService }, { type: i2.DeprecationsService }]; } });

class ActivatableFormField {
    /**
     * @internal
     */
    constructor(service) {
        this.service = service;
    }
    /**
     * @internal
     */
    showDependantFields() {
        if (this.config.options && this.config.options.dependants) {
            this.service.showItems(this.config.parent, this.config.options.dependants);
        }
    }
    /**
     * @internal
     */
    hideDependantFields() {
        if (this.config.options) {
            this.service.hideItems(this.config.parent, this.config.options.dependants);
        }
    }
    /**
     * Tracks if a form item should be shown or not
     */
    toggleDependants() {
        const { options, parent: currentParent } = this.config;
        if (options && options.dependants) {
            if (typeof options.activateDependantsOn === 'function') {
                const toShow = options.activateDependantsOn(this.control.value, this.control) || [];
                const toShowMap = mapDependentItems(toShow, currentParent);
                const toHide = mapDependentItems(options === null || options === void 0 ? void 0 : options.dependants, currentParent).map(({ parent, items }) => {
                    const toShowItem = toShowMap.find((i) => i.parent === parent);
                    if (toShowItem) {
                        return {
                            parent,
                            items: items.filter((i) => !toShowItem.items.includes(i)),
                        };
                    }
                    else {
                        return { parent, items };
                    }
                });
                mapDependentItems(toShow, currentParent).forEach(({ parent, items }) => {
                    if (items.length) {
                        this.service.showItems(parent, items);
                    }
                });
                mapDependentItems(toHide, currentParent).forEach(({ parent, items }) => {
                    if (items.length) {
                        this.service.hideItems(parent, items);
                    }
                });
            }
            else if (this.control.value === this.config.options.activateDependantsOn) {
                this.showDependantFields();
            }
            else {
                this.hideDependantFields();
            }
        }
    }
}

class DynamicAriaAttributeDirective {
    constructor(keyValueDiffers, hostElem, renderer) {
        this.keyValueDiffers = keyValueDiffers;
        this.hostElem = hostElem;
        this.renderer = renderer;
        /**
         * Flag to denote if the id of the input should be prepended to provided aria ids
         */
        this.prependInputId = true;
        /**
         * The selector to select the actual html input.
         */
        this.inputSelector = '.form-control';
        /**
         * The name of the aria attribute to be added dynamically. Defaults to aria-describedby.
         */
        this.ariaAttributeName = 'aria-describedby';
        this._keyValueDiffer = null;
        this._rawMap = null;
    }
    /**
     * The map that contains a key value pair that contains the an id
     * and a condition when they should be added to the element.
     */
    set ariaAttributeMap(value) {
        this._rawMap = value;
        if (this._rawMap) {
            this.setAriaAttributeIds(this._rawMap);
            this._keyValueDiffer = null;
            this._keyValueDiffer = this.keyValueDiffers.find(this._rawMap).create();
        }
    }
    ngDoCheck() {
        if (this._keyValueDiffer) {
            const keyValueChanges = this._keyValueDiffer.diff(this._rawMap);
            if (keyValueChanges) {
                this.applyKeyValueChanges(keyValueChanges);
            }
        }
    }
    applyKeyValueChanges(changes) {
        const currentMap = {};
        changes.forEachAddedItem((record) => (currentMap[record.key] = record.currentValue));
        changes.forEachChangedItem((record) => (currentMap[record.key] = record.currentValue));
        changes.forEachRemovedItem((record) => {
            if (record.previousValue) {
                currentMap[record.key] = false;
            }
        });
        this.setAriaAttributeIds(currentMap);
    }
    setAriaAttributeIds(idMap) {
        const targetElem = this.hostElem.nativeElement.querySelector(this.inputSelector);
        const targetElemId = (targetElem === null || targetElem === void 0 ? void 0 : targetElem.id) || '';
        const ids = Object.keys(idMap).reduce((acc, id) => {
            if (!!idMap[id]) {
                acc.push(this.prependInputId ? targetElemId + id : id);
            }
            return acc;
        }, []);
        this.removeAriaAttributeIds(targetElem);
        const descByIds = ids.join(' ').trim();
        if (targetElem && descByIds) {
            this.renderer.setAttribute(targetElem, this.ariaAttributeName, descByIds);
        }
    }
    removeAriaAttributeIds(targetElem) {
        if (targetElem) {
            this.renderer.removeAttribute(targetElem, this.ariaAttributeName);
        }
    }
}
/** @nocollapse */ DynamicAriaAttributeDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DynamicAriaAttributeDirective, deps: [{ token: i0.KeyValueDiffers }, { token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ DynamicAriaAttributeDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: DynamicAriaAttributeDirective, selector: "[bbDynamicAriaAttribute]", inputs: { ariaAttributeMap: ["bbDynamicAriaAttribute", "ariaAttributeMap"], prependInputId: "prependInputId", inputSelector: "inputSelector", ariaAttributeName: "ariaAttributeName" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DynamicAriaAttributeDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbDynamicAriaAttribute]',
                }]
        }], ctorParameters: function () { return [{ type: i0.KeyValueDiffers }, { type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { ariaAttributeMap: [{
                type: Input,
                args: ['bbDynamicAriaAttribute']
            }], prependInputId: [{
                type: Input
            }], inputSelector: [{
                type: Input
            }], ariaAttributeName: [{
                type: Input
            }] } });

class PayordCheckboxComponent extends ActivatableFormField {
    constructor(visibilityService) {
        super(visibilityService);
        this.visibilityService = visibilityService;
        this.shouldDisplay = true;
    }
    ngOnInit() {
        this.shouldDisplay = !(this.options.hideInWizardMode && this.options.isWizardMode);
        this.control = registerFormControl(this.group, this.config.name, this.options.validators, this.options.asyncValidators, this.options.defaultValue, this.config);
        this.toggleDependants();
        triggerHook(PaymentFormFieldHooks.onInit, this);
    }
    ngOnDestroy() {
        triggerHook(PaymentFormFieldHooks.onDestroy, this);
    }
}
/** @nocollapse */ PayordCheckboxComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordCheckboxComponent, deps: [{ token: VisibilityService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PayordCheckboxComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordCheckboxComponent, selector: "bb-payord-checkbox", usesInheritance: true, ngImport: i0, template: "<div\n  class=\"bb-dynamic-input form-group\"\n  *ngIf=\"!config?.hidden && shouldDisplay\"\n  [formGroup]=\"group\"\n  [ngClass]=\"options?.cssClasses\"\n>\n  <bb-input-checkbox-ui\n    [formControlName]=\"config?.name\"\n    [label]=\"options?.label\"\n    (change)=\"toggleDependants()\"\n    [disabled]=\"options?.disabled\"\n    [bbDynamicAriaAttribute]=\"{\n      __error: control?.touched && control?.invalid\n    }\"\n    [attr.data-role]=\"config?.name\"\n    #inputEl\n  >\n  </bb-input-checkbox-ui>\n  <bb-payord-validation-message\n    [control]=\"group?.controls[config.name]\"\n    [validationMessages]=\"options?.validationMessages\"\n    [label]=\"options?.label\"\n    [id]=\"inputEl?.id + '__error'\"\n  ></bb-payord-validation-message>\n</div>\n", components: [{ type: i5$1.InputCheckboxComponent, selector: "bb-input-checkbox-ui", inputs: ["indeterminate"], outputs: ["indeterminateChange"] }, { type: ValidationMessageComponent, selector: "bb-payord-validation-message", inputs: ["control", "validationMessages", "label", "id", "hideGeneric"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: DynamicAriaAttributeDirective, selector: "[bbDynamicAriaAttribute]", inputs: ["bbDynamicAriaAttribute", "prependInputId", "inputSelector", "ariaAttributeName"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordCheckboxComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payord-checkbox',
                    templateUrl: './payord-checkbox.component.html',
                }]
        }], ctorParameters: function () { return [{ type: VisibilityService }]; } });

class PayordDebitAccountSelectorComponent {
    constructor(closedPaymentBusFnSuffix, intraCompanyPaymentBusFnSuffix, deprecationService, cdRef) {
        this.closedPaymentBusFnSuffix = closedPaymentBusFnSuffix;
        this.intraCompanyPaymentBusFnSuffix = intraCompanyPaymentBusFnSuffix;
        this.deprecationService = deprecationService;
        this.cdRef = cdRef;
        this.initialDebitGroup = {
            [InitiatorFields.id]: [''],
            [InitiatorFields.name]: [''],
            [InitiatorFields.accountNumber]: [''],
            schemeName: [],
            currency: [''],
            balance: [''],
        };
        this.gc$ = new Subject();
        this.loadDebitAccountAndSelect$ = new Subject();
        this.accountIds = [];
        this.currentPage = 0;
        this.searchTerm = '';
        this.typeahead$ = new Subject();
        this.loading$ = new BehaviorSubject(true);
        this.defaultTypeToSearchText = $localize `:@@debit-account-selector.default-type-to-search-text:No items found`;
    }
    ngOnInit() {
        var _a, _b, _c, _d;
        this.deprecationService.logDeprecatedFeature(`"BB_CLOSED_PAYMENT_BUS_FN_SUFFIX", "BB_INTRACOMPANY_PAYMENT_BUS_FN_SUFFIX", "DefaultClosedPaymentBusFnSuffix" and
      "DefaultIntraCompanyPaymentBusFnSuffix" are deprecated and will be removed in next major release`);
        this.closedPaymentBusFnSuffix =
            this.closedPaymentBusFnSuffix || DefaultClosedPaymentBusFnSuffix;
        this.intraCompanyPaymentBusFnSuffix =
            this.intraCompanyPaymentBusFnSuffix ||
                DefaultIntraCompanyPaymentBusFnSuffix;
        this.registerFields();
        this.listenSearch();
        this.control = this.group.controls['id'];
        this.form = getParentForm(this.control);
        this.isClosedPaymentControl = registerFormControl(this.form, HiddenFields.isClosedPayment);
        // populate value to show it in edit mode
        if (this.group.value.id) {
            this.selectItem(this.group.value);
        }
        // populate account balance and currency when applying a payment template or editing payment
        this.arrangementItems$ = (_b = (_a = this.options) === null || _a === void 0 ? void 0 : _a.items$) === null || _b === void 0 ? void 0 : _b.pipe(tap(({ items: list }) => {
            this.accountIds = list.map((item) => item.id);
            if (this.group.value.id) {
                const selectedAccount = list === null || list === void 0 ? void 0 : list.find((item) => item.id === this.group.value.id);
                if (selectedAccount) {
                    this.selectItem(selectedAccount);
                }
                else {
                    // we need to load debit account to show it selected
                    this.loadDebitAccountAndSelect$.next();
                }
            }
        }), catchError((err) => of(err)));
        this.arrangementItems$
            .pipe(takeUntil(this.gc$))
            .subscribe((arrangementList) => {
            this.loading$.next(false);
            this.arrangementList = arrangementList;
            this.cdRef.detectChanges();
        });
        const counterpartyGroup = (this.form.get(PaymentBaseFields.counterparty));
        if (this.options.checkClosedPaymentsAccess) {
            (_c = this.isClosedPaymentControl) === null || _c === void 0 ? void 0 : _c.valueChanges.pipe(takeUntil(this.gc$)).subscribe((isClosedPayment) => {
                if (isClosedPayment) {
                    toggleBeneficiaryControls(counterpartyGroup, isClosedPayment);
                    this.control.updateValueAndValidity();
                }
            });
            (_d = this.options.arrangementPermissions$) === null || _d === void 0 ? void 0 : _d.pipe(takeUntil(this.gc$)).subscribe((response) => {
                var _a;
                (_a = this.isClosedPaymentControl) === null || _a === void 0 ? void 0 : _a.setValue((response === null || response === void 0 ? void 0 : response.status) === forbiddenStatus);
            });
        }
        this.loadDebitAccountAndSelect$
            .pipe(takeUntil(this.gc$), switchMap(() => this.options.loadAccountByAccountId(this.group.value.id, this.group.value.accountNumber)), tap((item) => {
            if (item) {
                this.accountIds.push(item.id);
            }
            else {
                this.control.setValidators([
                    Validators.required,
                    missingInListValidator(this.getAccountIdsList.bind(this)),
                ]);
                this.control.updateValueAndValidity();
            }
            const account = item || this.group.value;
            this.selectItem(account);
        }), catchError(() => of(undefined)))
            .subscribe();
        triggerHook(PaymentFormFieldHooks.onInit, this);
    }
    fetchArrangementPermissions(arrangementId) {
        var _a;
        if (!this.options.isWizardMode &&
            this.options.checkClosedPaymentsAccess &&
            arrangementId) {
            (_a = this.options.fetchArrangementPermissions$) === null || _a === void 0 ? void 0 : _a.next(arrangementId);
        }
    }
    getAccountIdsList() {
        return this.accountIds;
    }
    listenSearch() {
        this.typeahead$
            .pipe(takeUntil(this.gc$), debounceTime(300))
            .subscribe((query) => {
            this.onSearch(query);
        });
    }
    ngOnDestroy() {
        this.gc$.next();
        this.gc$.complete();
        triggerHook(PaymentFormFieldHooks.onDestroy, this);
    }
    registerFields() {
        const validators = {
            [InitiatorFields.id]: [Validators.required],
        };
        for (const key in this.initialDebitGroup) {
            if (this.initialDebitGroup.hasOwnProperty(key)) {
                if (key === InitiatorFields.id) {
                    if (this.checkClosedPayment()) {
                        validators[InitiatorFields.id].push(isClosedPaymentValidator);
                    }
                    if (this.isCounterpartyGroup()) {
                        validators[InitiatorFields.id].push(sameAccountsValidator());
                    }
                }
                registerFormControl(this.group, key, validators[key], [], '');
            }
        }
    }
    isCounterpartyGroup() {
        return this.config.name === CounterPartyFields.counterPartyAccountGroup;
    }
    checkClosedPayment() {
        return (!this.options.isWizardMode &&
            this.config.name === InitiatorFields.initiatorAccountGroup &&
            this.options.checkClosedPaymentsAccess);
    }
    selectItem(account) {
        var _a;
        if (this.group && account.name) {
            this.group.patchValue({
                id: account.id,
                name: account.name,
                accountNumber: account.accountNumber,
                balance: account.balance,
                currency: account.currency,
                accountType: account.accountType,
                additions: account.additions || {},
                schemeName: SchemeNames.ID,
            });
            this.selectedAccount = Object.assign(Object.assign({}, account), { number: account.accountNumber, currency: account.currency, balance: account.balance });
            if (!this.isCounterpartyGroup()) {
                (_a = this.form
                    .get([PaymentBaseFields.counterparty, CounterPartyFields.id])) === null || _a === void 0 ? void 0 : _a.updateValueAndValidity();
            }
            this.fetchArrangementPermissions(account.id);
        }
        this.group.markAllAsTouched();
        this.group.markAsDirty();
    }
    onBlur() {
        if (this.options.required) {
            this.group.markAllAsTouched();
        }
    }
    onScrollToEnd() {
        this.options.fetchItems$.next({
            from: ++this.currentPage,
            searchTerm: this.searchTerm,
        });
        this.loading$.next(true);
    }
    onSearch(searchTerm) {
        this.currentPage = 0;
        this.searchTerm = searchTerm;
        this.options.fetchItems$.next({ from: this.currentPage, searchTerm });
        this.loading$.next(true);
    }
}
/** @nocollapse */ PayordDebitAccountSelectorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordDebitAccountSelectorComponent, deps: [{ token: BB_CLOSED_PAYMENT_BUS_FN_SUFFIX, optional: true }, { token: BB_INTRACOMPANY_PAYMENT_BUS_FN_SUFFIX, optional: true }, { token: i1$2.DeprecationsService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PayordDebitAccountSelectorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordDebitAccountSelectorComponent, selector: "bb-payord-debit-account-selector", ngImport: i0, template: "<div\n  class=\"bb-dynamic-input form-group\"\n  [ngClass]=\"options?.cssClasses\"\n  *ngIf=\"!config?.hidden\"\n>\n  <section class=\"payment-from\" [formGroup]=\"group\">\n    <label class=\"d-block\">\n      <div *ngIf=\"options?.label\" class=\"bb-dynamic-input__label bb-label\">\n        <span>\n          {{ options?.label }}\n        </span>\n        <span\n          class=\"bb-dynamic-input__helper-text bb-text-support\"\n          *ngIf=\"options?.helperText\"\n          [textContent]=\"options?.helperText\"\n        >\n        </span>\n      </div>\n      <div class=\"bb-form-field\">\n        <bb-account-selector-ui\n          [markFirst]=\"true\"\n          [highlight]=\"false\"\n          [filterItems]=\"options?.filterItems\"\n          [closeOnSelect]=\"true\"\n          [dropdownPosition]=\"'bottom'\"\n          [items]=\"arrangementList?.items\"\n          [selectedItems]=\"selectedAccount\"\n          (change)=\"selectItem($event)\"\n          (blur)=\"onBlur()\"\n          [placeholder]=\"options?.placeholder || ''\"\n          [attr.aria-label]=\"options?.label\"\n          [required]=\"options?.required\"\n          [attr.data-role]=\"'debit-account-selector'\"\n          [showBankBranchCode]=\"options?.showBankBranchCode\"\n          [bbDynamicAriaAttribute]=\"{\n            'payord-debit-account-selector__error':\n              control?.touched && control?.invalid,\n            'payord-debit-account-selector__desc': options?.description\n          }\"\n          [prependInputId]=\"false\"\n          inputSelector=\".ng-input input\"\n          [disableScrollEnd]=\"\n            arrangementList?.items?.length >= arrangementList?.count\n          \"\n          (scrollToEnd)=\"onScrollToEnd()\"\n          [searchFunc]=\"options.searchFn\"\n          [minTermLength]=\"options.minTermLength || 0\"\n          [typeToSearchText]=\"\n            options.typeToSearchText || defaultTypeToSearchText\n          \"\n          [typeahead]=\"options.disableTypeahead ? undefined : typeahead$\"\n          [loading]=\"loading$ | async\"\n        ></bb-account-selector-ui>\n      </div>\n    </label>\n\n    <bb-payord-validation-message\n      [control]=\"control\"\n      [validationMessages]=\"options?.validationMessages\"\n      [label]=\"options?.label || 'Debit account'\"\n      [id]=\"'payord-debit-account-selector__error'\"\n    ></bb-payord-validation-message>\n\n    <div\n      class=\"bb-dynamic-input__desc bb-text-support bb-subtitle\"\n      id=\"payord-debit-account-selector__desc\"\n      *ngIf=\"options?.description\"\n      [textContent]=\"options?.description\"\n    ></div>\n  </section>\n</div>\n", components: [{ type: i2$1.AccountSelectorComponent, selector: "bb-account-selector-ui", inputs: ["items", "disabled", "notFoundText", "showError", "productNumberFormat", "selectedItems", "multiple", "closeOnSelect", "searchable", "clearable", "placeholder", "loading", "dropdownPosition", "disableScrollEnd", "highlight", "filterItems", "markFirst", "internalFiltering", "virtualScroll", "required", "typeahead", "minTermLength", "typeToSearchText", "aria-describedby", "aria-labelledby", "aria-invalid", "searchFunc", "showCurrencySymbol", "showBankBranchCode", "groupByFn", "groupValueFn", "size", "compareItemsWith"], outputs: ["search", "clearSearch", "scroll", "scrollToEnd", "remove", "change", "filterChange", "focus", "blur"] }, { type: ValidationMessageComponent, selector: "bb-payord-validation-message", inputs: ["control", "validationMessages", "label", "id", "hideGeneric"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i5.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: DynamicAriaAttributeDirective, selector: "[bbDynamicAriaAttribute]", inputs: ["bbDynamicAriaAttribute", "prependInputId", "inputSelector", "ariaAttributeName"] }], pipes: { "async": i4.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordDebitAccountSelectorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payord-debit-account-selector',
                    templateUrl: 'payord-debit-account-selector.component.html',
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [BB_CLOSED_PAYMENT_BUS_FN_SUFFIX]
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [BB_INTRACOMPANY_PAYMENT_BUS_FN_SUFFIX]
                }] }, { type: i1$2.DeprecationsService }, { type: i0.ChangeDetectorRef }]; } });

class PayordRadioComponent extends ActivatableFormField {
    constructor(visibilityService) {
        super(visibilityService);
        this.visibilityService = visibilityService;
    }
    ngOnInit() {
        this.control = registerFormControl(this.group, this.config.name, this.options.validators, this.options.asyncValidators, this.options.defaultValue, this.config);
        this.toggleDependants();
        triggerHook(PaymentFormFieldHooks.onInit, this);
    }
    getDescribedByRefs(id) {
        var _a;
        return {
            [`${id}__error`]: this.control.touched && this.control.invalid,
            [`${id}__desc`]: (_a = this.options) === null || _a === void 0 ? void 0 : _a.description,
        };
    }
    ngOnDestroy() {
        triggerHook(PaymentFormFieldHooks.onDestroy, this);
    }
}
/** @nocollapse */ PayordRadioComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordRadioComponent, deps: [{ token: VisibilityService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PayordRadioComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordRadioComponent, selector: "bb-payord-radio", usesInheritance: true, ngImport: i0, template: "<div\n  *ngIf=\"!config?.hidden\"\n  class=\"bb-dynamic-input form-group\"\n  [formGroup]=\"group\"\n  [ngClass]=\"options?.cssClasses\"\n>\n  <label\n    class=\"bb-dynamic-input__label\"\n    [id]=\"inputEl?.id + '__label'\"\n    [for]=\"inputEl?.id\"\n    [textContent]=\"options?.label || ''\"\n    #labelElem\n  ></label>\n  <span\n    class=\"bb-dynamic-input__helper-text bb-text-support\"\n    *ngIf=\"options?.helperText\"\n    [id]=\"inputEl?.id + '__helper'\"\n    [textContent]=\"options?.helperText\"\n  >\n  </span>\n\n  <bb-input-radio-group-ui\n    [label]=\"options?.label\"\n    [formControlName]=\"config?.name\"\n    (change)=\"toggleDependants()\"\n    [horizontal]=\"options?.horizontal\"\n    [preselect]=\"options?.preselect\"\n    [bbDynamicAriaAttribute]=\"getDescribedByRefs(inputEl.id)\"\n    inputSelector=\".bb-input-radio-group\"\n    [attr.data-role]=\"config?.name\"\n    #inputEl\n  >\n    <bb-input-radio-ui\n      *ngFor=\"let option of options?.options\"\n      [value]=\"option.value\"\n      [label]=\"option.label\"\n      [attr.data-role]=\"option.value\"\n    ></bb-input-radio-ui>\n  </bb-input-radio-group-ui>\n  <bb-payord-validation-message\n    [control]=\"group?.controls[config.name]\"\n    [validationMessages]=\"options?.validationMessages\"\n    [label]=\"options?.label\"\n    [id]=\"inputEl?.id + '__error'\"\n  ></bb-payord-validation-message>\n\n  <div\n    class=\"bb-dynamic-input__desc bb-text-support bb-subtitle\"\n    [attr.aria-hidden]=\"!options?.description\"\n    [hidden]=\"!options?.description\"\n    [id]=\"inputEl?.id + '__desc'\"\n    [textContent]=\"options?.description || ''\"\n    #descElem\n  ></div>\n</div>\n", components: [{ type: i2$2.InputRadioGroupComponent, selector: "bb-input-radio-group-ui", inputs: ["horizontal", "preselect", "name", "verticalAlign"] }, { type: i2$2.InputRadioComponent, selector: "bb-input-radio-ui", inputs: ["labelTemplate", "labelTemplateContext", "value", "label", "aria-label", "aria-labelledby", "aria-describedby", "role", "aria-activedescendant", "aria-expanded", "aria-invalid", "aria-owns", "disabled"] }, { type: ValidationMessageComponent, selector: "bb-payord-validation-message", inputs: ["control", "validationMessages", "label", "id", "hideGeneric"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: DynamicAriaAttributeDirective, selector: "[bbDynamicAriaAttribute]", inputs: ["bbDynamicAriaAttribute", "prependInputId", "inputSelector", "ariaAttributeName"] }, { type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordRadioComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payord-radio',
                    templateUrl: './payord-radio.component.html',
                }]
        }], ctorParameters: function () { return [{ type: VisibilityService }]; } });

class PayordScheduleComponent {
    constructor() {
        this.defaultMinOcccurs = 2;
        this.defaultMaxOcccurs = 100;
    }
    ngOnInit() {
        this.registerFields(this.initScheduleFields(this.options.minOccurs, this.options.maxOccurs));
        triggerHook(PaymentFormFieldHooks.onInit, this);
    }
    ngOnDestroy() {
        triggerHook(PaymentFormFieldHooks.onDestroy, this);
    }
    initScheduleFields(minOccurs, maxOccurs) {
        return {
            [ScheduleFields.frequency]: [
                { value: 'ONCE', every: '1' },
                [Validators.required],
            ],
            [ScheduleFields.startDate]: [
                new Date().toISOString(),
                [Validators.required, pastDateValidator],
            ],
            [ScheduleFields.endDate]: [
                new Date(new Date().getFullYear(), new Date().getMonth() + 1, new Date().getDate()).toISOString(),
                [requiredEndDateValidator, pastDateValidator],
            ],
            [ScheduleFields.repeat]: [
                minOccurs || this.defaultMinOcccurs,
                [
                    requiredAfterValidator,
                    Validators.compose([
                        Validators.min(minOccurs || this.defaultMinOcccurs),
                        Validators.max(maxOccurs || this.defaultMaxOcccurs),
                    ]),
                ],
            ],
            [ScheduleFields.endType]: [endTypes.never, [requiredEndTypeValidator]],
        };
    }
    registerFields(fields) {
        for (const key in fields) {
            if (fields.hasOwnProperty(key)) {
                registerFormControl(this.group, key, fields[key].pop(), [], fields[key].pop());
            }
        }
    }
    get scheduleLabelData() {
        const { frequency, endDate, endType, repeat, startDate } = this.group.value;
        let end = {};
        switch (endType) {
            case endTypes.on: {
                end = { endDate };
                break;
            }
            case endTypes.after: {
                end = { repeat };
                break;
            }
        }
        return Object.assign({ frequency,
            endType,
            startDate }, end);
    }
}
/** @nocollapse */ PayordScheduleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordScheduleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PayordScheduleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordScheduleComponent, selector: "bb-payord-schedule", ngImport: i0, template: "<ng-container *ngIf=\"!config?.hidden\">\n  <section\n    class=\"payment-schedule flex-row bb-dynamic-input\"\n    [ngClass]=\"options?.cssClasses\"\n  >\n    <fieldset class=\"bb-fieldset\">\n      <ng-container *ngIf=\"!config.options.collapsible; else collapsibleTmpl\">\n        <ng-container *ngTemplateOutlet=\"header\"></ng-container>\n        <hr class=\"mt-0\" />\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n      </ng-container>\n    </fieldset>\n  </section>\n  <ng-template #collapsibleTmpl>\n    <bb-collapsible-ui data-role=\"schedule-toggle\" #collapse>\n      <ng-template bbCollapsibleHeader let-toggle=\"toggle\" let-isOpen=\"isOpen\">\n        <div\n          [attr.aria-expanded]=\"isOpen\"\n          (click)=\"collapse.toggle()\"\n          class=\"bb-stack justify-content-between\"\n        >\n          <ng-container *ngTemplateOutlet=\"header\"></ng-container>\n          <button\n            bbButton\n            color=\"outline\"\n            (click)=\"collapse.toggle(); $event.stopPropagation()\"\n            aria-label=\"Schedule toggle\"\n          >\n            <bb-icon-ui\n              [name]=\"isOpen ? 'toggle-up' : 'toggle-down'\"\n            ></bb-icon-ui>\n          </button>\n        </div>\n        <hr class=\"mt-0\" />\n      </ng-template>\n      <ng-template bbCollapsibleBody>\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n      </ng-template>\n    </bb-collapsible-ui>\n  </ng-template>\n  <ng-template #header>\n    <legend>\n      <span class=\"bb-label\">\n        {{ options?.label || 'Schedule' }}\n      </span>\n      <span class=\"bb-text-support\">\n        (<bb-schedule-label-ui [item]=\"scheduleLabelData\"></bb-schedule-label-ui\n        >)\n      </span>\n    </legend>\n  </ng-template>\n\n  <ng-template #content>\n    <bb-schedule-ui\n      [scheduleForm]=\"group\"\n      [frequencies]=\"options?.frequencies\"\n      [minOccurs]=\"options?.minOccurs\"\n      [maxOccurs]=\"options?.maxOccurs\"\n      [formSubmitted]=\"group?.touched\"\n      data-role=\"payment-schedule\"\n    >\n    </bb-schedule-ui>\n  </ng-template>\n</ng-container>\n", components: [{ type: i1$3.CollapsibleComponent, selector: "bb-collapsible-ui", inputs: ["recreateBodyContent", "hasChevron", "isOpen"], outputs: ["isOpenChange"] }, { type: i2$3.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i1.ӨScheduleLabelComponent, selector: "bb-schedule-label-ui", inputs: ["item"] }, { type: i1.ScheduleComponent, selector: "bb-schedule-ui", inputs: ["frequencies", "minOccurs", "maxOccurs", "scheduleForm", "formSubmitted"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i4.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i1$3.CollapsibleHeaderDirective, selector: "ng-template[bbCollapsibleHeader]" }, { type: i7.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i1$3.CollapsibleBodyDirective, selector: "ng-template[bbCollapsibleBody]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordScheduleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payord-schedule',
                    templateUrl: './payord-schedule.component.html',
                }]
        }] });

class PayordSelectComponent extends ActivatableFormField {
    constructor(visibilityService) {
        super(visibilityService);
        this.visibilityService = visibilityService;
    }
    ngOnInit() {
        this.control = registerFormControl(this.group, this.config.name, this.options.validators, this.options.asyncValidators, this.options.defaultValue, this.config);
        this.toggleDependants();
        triggerHook(PaymentFormFieldHooks.onInit, this);
    }
    ngOnDestroy() {
        triggerHook(PaymentFormFieldHooks.onDestroy, this);
    }
}
/** @nocollapse */ PayordSelectComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordSelectComponent, deps: [{ token: VisibilityService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PayordSelectComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordSelectComponent, selector: "bb-payord-select", usesInheritance: true, ngImport: i0, template: "<div\n  class=\"bb-dynamic-input form-group\"\n  *ngIf=\"!config?.hidden\"\n  [formGroup]=\"group\"\n  [ngClass]=\"options?.cssClasses\"\n>\n  <label\n    class=\"bb-dynamic-input__label\"\n    [id]=\"inputEl?.id + '__label'\"\n    [for]=\"inputEl?.id\"\n    [textContent]=\"options?.label || ''\"\n    #labelElem\n  ></label>\n  <span\n    class=\"bb-dynamic-input__helper-text bb-text-support\"\n    *ngIf=\"options?.helperText\"\n    [id]=\"inputEl?.id + '__desc'\"\n    [textContent]=\"options?.helperText\"\n  >\n  </span>\n\n  <bb-dropdown-single-select-ui\n    [formControlName]=\"config.name\"\n    [placeholder]=\"options?.placeholder || ''\"\n    (change)=\"toggleDependants()\"\n    [bbDynamicAriaAttribute]=\"{\n      __error: control?.touched && control?.invalid,\n      __desc: options?.description\n    }\"\n    [attr.data-role]=\"config.name\"\n    #inputEl\n  >\n    <bb-dropdown-single-select-option-ui\n      *ngFor=\"let option of options?.options\"\n      [value]=\"option.value\"\n      [label]=\"option.label\"\n      [attr.data-role]=\"option.value\"\n    >\n    </bb-dropdown-single-select-option-ui>\n  </bb-dropdown-single-select-ui>\n\n  <bb-payord-validation-message\n    [control]=\"group?.controls[config.name]\"\n    [validationMessages]=\"options?.validationMessages\"\n    [label]=\"options?.label\"\n    [id]=\"inputEl?.id + '__error'\"\n  ></bb-payord-validation-message>\n\n  <div\n    class=\"bb-dynamic-input__desc bb-text-support bb-subtitle\"\n    [attr.aria-hidden]=\"!options?.description\"\n    [hidden]=\"!options?.description\"\n    [id]=\"inputEl?.id + '__desc'\"\n    [textContent]=\"options?.description || ''\"\n    #descElem\n  ></div>\n</div>\n", components: [{ type: i2$4.DropdownSingleSelectComponent, selector: "bb-dropdown-single-select-ui", inputs: ["placeholder", "defaultOptionAsPlaceholder", "options", "displayAttributePath", "iconName", "compareWithFn"] }, { type: i2$4.DropdownSingleSelectOptionComponent, selector: "bb-dropdown-single-select-option-ui", inputs: ["value", "label"] }, { type: ValidationMessageComponent, selector: "bb-payord-validation-message", inputs: ["control", "validationMessages", "label", "id", "hideGeneric"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: DynamicAriaAttributeDirective, selector: "[bbDynamicAriaAttribute]", inputs: ["bbDynamicAriaAttribute", "prependInputId", "inputSelector", "ariaAttributeName"] }, { type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordSelectComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payord-select',
                    templateUrl: './payord-select.component.html',
                }]
        }], ctorParameters: function () { return [{ type: VisibilityService }]; } });

class PayordTextAreaComponent {
    constructor(elRef) {
        this.elRef = elRef;
        this.isCollapsed = false;
    }
    ngOnInit() {
        var _a;
        this.control = registerFormControl(this.group, this.config.name, this.options.validators, this.options.asyncValidators, this.options.defaultValue, this.config);
        if ((_a = this.control.value) === null || _a === void 0 ? void 0 : _a.content) {
            this.control.setValue(this.control.value.content);
        }
        this.isCollapsed =
            !this.control.value && isObjectTruthy(this.options.collapseOptions);
        triggerHook(PaymentFormFieldHooks.onInit, this);
    }
    expand() {
        this.isCollapsed = false;
        focusChildElement('textarea', this.elRef.nativeElement);
    }
    ngOnDestroy() {
        triggerHook(PaymentFormFieldHooks.onDestroy, this);
    }
}
/** @nocollapse */ PayordTextAreaComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordTextAreaComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PayordTextAreaComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordTextAreaComponent, selector: "bb-payord-textarea", ngImport: i0, template: "<ng-container *ngIf=\"!config?.hidden\">\n  <div\n    *ngIf=\"!isCollapsed\"\n    class=\"bb-dynamic-input form-group\"\n    [formGroup]=\"group\"\n    [ngClass]=\"options?.cssClasses\"\n  >\n    <label\n      class=\"bb-dynamic-input__label\"\n      [id]=\"inputEl?.id + '__label'\"\n      [for]=\"inputEl?.id\"\n      [textContent]=\"options?.label || ''\"\n      #labelElem\n    ></label>\n    <span\n      class=\"bb-dynamic-input__helper-text bb-text-support\"\n      *ngIf=\"options?.helperText\"\n      [id]=\"inputEl?.id + '__desc'\"\n      [textContent]=\"options?.helperText\"\n    >\n    </span>\n    <bb-textarea-ui\n      [placeholder]=\"options?.placeholder || ''\"\n      [formControlName]=\"config.name\"\n      [showCharCounter]=\"true\"\n      [minLength]=\"options?.minLength\"\n      [maxLength]=\"options?.maxLength\"\n      [rows]=\"options?.rows\"\n      [cols]=\"options?.cols\"\n      [attr.data-role]=\"config.name\"\n      wrap=\"hard\"\n      [bbDynamicAriaAttribute]=\"{\n        __error: control?.touched && control?.invalid,\n        __desc: options?.description\n      }\"\n      #inputEl\n    >\n    </bb-textarea-ui>\n    <bb-payord-validation-message\n      [control]=\"group?.controls[config.name]\"\n      [validationMessages]=\"options?.validationMessages\"\n      [label]=\"options?.label\"\n    ></bb-payord-validation-message>\n\n    <div\n      class=\"bb-dynamic-input__desc bb-text-support bb-subtitle\"\n      [attr.aria-hidden]=\"!options?.description\"\n      [hidden]=\"!options?.description\"\n      [id]=\"inputEl?.id + '__desc'\"\n      [textContent]=\"options?.description || ''\"\n      #descElem\n    ></div>\n  </div>\n\n  <ng-container *ngIf=\"isCollapsed\">\n    <span class=\"bb-dynamic-input__collapse-btn-container\">\n      <button\n        class=\"bb-dynamic-input__collapse-btn\"\n        bbButton\n        [color]=\"options?.collapseOptions?.btnColor || 'link'\"\n        [buttonSize]=\"options?.collapseOptions?.btnSize\"\n        (click)=\"expand()\"\n      >\n        <bb-icon-ui\n          class=\"bb-dynamic-input__collapse-btn-icon mr-2\"\n          *ngIf=\"!options?.collapseOptions?.hideIcon\"\n          [name]=\"options?.collapseOptions?.icon || 'add'\"\n          [size]=\"options?.collapseOptions?.iconSize\"\n        >\n        </bb-icon-ui>\n        <span class=\"bb-dynamic-input__collapse-btn-label\">\n          {{ options?.collapseOptions?.label || options?.label }}\n        </span>\n      </button>\n      <bb-payord-validation-message\n        [control]=\"group?.controls[config.name]\"\n        [validationMessages]=\"options?.validationMessages\"\n        [label]=\"options?.label\"\n      ></bb-payord-validation-message>\n    </span>\n  </ng-container>\n</ng-container>\n", components: [{ type: i1$4.TextareaComponent, selector: "bb-textarea-ui", inputs: ["rows", "cols", "placeholder", "maxLength", "minLength", "readonly", "showCharCounter", "wrap"] }, { type: ValidationMessageComponent, selector: "bb-payord-validation-message", inputs: ["control", "validationMessages", "label", "id", "hideGeneric"] }, { type: i2$3.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: DynamicAriaAttributeDirective, selector: "[bbDynamicAriaAttribute]", inputs: ["bbDynamicAriaAttribute", "prependInputId", "inputSelector", "ariaAttributeName"] }, { type: i7.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordTextAreaComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payord-textarea',
                    templateUrl: './payord-textarea.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; } });

class PayordTextboxComponent {
    ngOnInit() {
        this.control = registerFormControl(this.group, this.config.name, this.options.validators, this.options.asyncValidators, this.options.defaultValue, this.config);
        if (this.options.isIban) {
            const schemeNameControl = this.group.get(CounterPartyFields.schemeName) ||
                registerFormControl(this.group, CounterPartyFields.schemeName);
            if (schemeNameControl.value !== Scheme.IBAN) {
                schemeNameControl.setValue(Scheme.IBAN);
            }
        }
        triggerHook(PaymentFormFieldHooks.onInit, this);
    }
    ngOnDestroy() {
        triggerHook(PaymentFormFieldHooks.onDestroy, this);
    }
}
/** @nocollapse */ PayordTextboxComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordTextboxComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PayordTextboxComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordTextboxComponent, selector: "bb-payord-text", ngImport: i0, template: "<div\n  *ngIf=\"!config?.hidden\"\n  class=\"bb-dynamic-input form-group contextual-alternates-off\"\n  [formGroup]=\"group\"\n  [ngClass]=\"options?.cssClasses\"\n>\n  <ng-container *ngIf=\"!options?.isIban; else ibanElem\">\n    <label\n      class=\"bb-dynamic-input__label\"\n      [id]=\"inputEl?.id + '__label'\"\n      [for]=\"inputEl?.id\"\n      #labelElem\n    >\n      {{ options?.label || '' }}\n    </label>\n    <span\n      class=\"bb-dynamic-input__helper-text bb-text-support\"\n      [textContent]=\"options?.helperText\"\n      *ngIf=\"options?.helperText\"\n    >\n    </span>\n    <bb-input-text-ui\n      #inputEl\n      [formControlName]=\"config.name\"\n      [disabled]=\"options?.disabled\"\n      [minLength]=\"options?.minLength\"\n      [maxLength]=\"options?.maxLength\"\n      [showCharCounter]=\"options?.showCharCounter\"\n      [id]=\"options?.id\"\n      [placeholder]=\"options?.placeholder || ''\"\n      [autocomplete]=\"options?.autoComplete\"\n      [autofocus]=\"options?.autofocus\"\n      [readonly]=\"options?.readonly\"\n      [bbDynamicAriaAttribute]=\"{\n        __error: control?.touched && control?.invalid,\n        __desc: options?.description\n      }\"\n      [attr.data-role]=\"config.name\"\n    >\n    </bb-input-text-ui>\n    <bb-payord-validation-message\n      [control]=\"group?.controls[config.name]\"\n      [validationMessages]=\"options?.validationMessages\"\n      [label]=\"options?.label\"\n      [id]=\"inputEl?.id + '__error'\"\n      #errorElem\n    ></bb-payord-validation-message>\n    <div\n      class=\"bb-dynamic-input__desc bb-text-support bb-subtitle\"\n      [attr.aria-hidden]=\"!options?.description\"\n      [hidden]=\"!options?.description\"\n      [id]=\"inputEl?.id + '__desc'\"\n      [textContent]=\"options?.description || ''\"\n      #descElem\n    ></div>\n  </ng-container>\n\n  <ng-template #ibanElem>\n    <label\n      class=\"bb-dynamic-input__label\"\n      [id]=\"ibanInput?.id + '__label'\"\n      [for]=\"ibanInput?.id\"\n      [textContent]=\"options?.label || ''\"\n      #ibanLabelElem\n    >\n    </label>\n    <span\n      class=\"bb-dynamic-input__helper-text bb-text-support\"\n      *ngIf=\"options?.helperText\"\n      [textContent]=\"options?.helperText\"\n    >\n    </span>\n    <bb-input-text-ui\n      [formControlName]=\"config.name\"\n      [disabled]=\"options?.disabled\"\n      [maxLength]=\"options?.maxLength\"\n      [placeholder]=\"options?.placeholder || ''\"\n      [autocomplete]=\"options?.autoComplete\"\n      [autofocus]=\"options?.autofocus\"\n      [minLength]=\"options?.minLength\"\n      [readonly]=\"options?.readonly\"\n      [id]=\"options?.id\"\n      [bbDynamicAriaAttribute]=\"{\n        __error: control?.touched && control?.invalid,\n        __desc: options?.description\n      }\"\n      bbIban\n      #ibanInput\n    >\n    </bb-input-text-ui>\n    <bb-payord-validation-message\n      [control]=\"group?.controls[config.name]\"\n      [validationMessages]=\"options?.validationMessages\"\n      [label]=\"options?.label\"\n      [id]=\"ibanInput?.id + '__error'\"\n      #ibanErrorElem\n    ></bb-payord-validation-message>\n\n    <div\n      class=\"bb-dynamic-input__desc bb-text-support bb-subtitle\"\n      [attr.aria-hidden]=\"!options?.description\"\n      [hidden]=\"!options?.description\"\n      [id]=\"ibanInput?.id + '__desc'\"\n      [textContent]=\"options?.description || ''\"\n      #ibanDescElem\n    ></div>\n  </ng-template>\n</div>\n", components: [{ type: i1$5.InputTextComponent, selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: ValidationMessageComponent, selector: "bb-payord-validation-message", inputs: ["control", "validationMessages", "label", "id", "hideGeneric"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: DynamicAriaAttributeDirective, selector: "[bbDynamicAriaAttribute]", inputs: ["bbDynamicAriaAttribute", "prependInputId", "inputSelector", "ariaAttributeName"] }, { type: i1.ӨIbanDirective, selector: "[bbIban]", inputs: ["maxLen"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordTextboxComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payord-text',
                    templateUrl: './payord-text.component.html',
                }]
        }] });

class PayordSanctionedCurrencyAmountComponent {
    constructor() {
        this.sanctionedCurrencyAmountId = PayordSanctionedCurrencyAmountComponent._id++;
        /**
         * Initial amount value
         */
        this.initialAmount = {
            [RemittanceInfoFields.amount]: '',
            [RemittanceInfoFields.currency]: '',
        };
    }
    /**
     * Initializes the component.
     *
     * @returns
     */
    ngOnInit() {
        this.parentForm = getParentForm(this.group);
        this.control = registerFormControl(this.group, this.config.name, [
            Validators.required,
            amountValidator,
            currencyValidatorFactory(),
        ], this.options.asyncValidators, this.options.defaultValue || this.initialAmount, this.config);
        this.initiatorCurrencyControl = (this.parentForm.get(`${PaymentBaseFields.initiator}.${InitiatorFields.currency}`));
        this.exchangeRateControl =
            this.parentForm.get(PaymentOptionFields.exchangeRate) ||
                registerFormControl(this.parentForm, PaymentOptionFields.exchangeRate);
        if (this.initiatorCurrencyControl &&
            this.control &&
            !this.options.isTemplateMode) {
            // Listen for "from" and "to" currency values
            this.valueChangeSubscription = combineLatest([
                this.initiatorCurrencyControl.valueChanges.pipe(startWith(this.initiatorCurrencyControl.value), distinctUntilChanged(), filter((val) => !!val)),
                this.control.valueChanges.pipe(startWith(this.control.value), map(({ currency }) => currency), distinctUntilChanged(), filter((val) => !!val)),
            ]).subscribe(([fromCurrency, toCurrency]) => {
                this.options.getExchangeRate$.next({ fromCurrency, toCurrency });
            });
        }
        if (this.options.exchangeRate$) {
            this.exchangeRate$ = this.options.exchangeRate$.pipe(tap((rate) => {
                this.exchangeRateControl.setValue(rate);
            }));
        }
        triggerHook(PaymentFormFieldHooks.onInit, this);
    }
    /**
     * Returns the calculated rate
     *
     * @param [exchangeRate] Exchange rate
     */
    getCalculatedRate(exchangeRate = 0) {
        if (exchangeRate &&
            this.initiatorCurrencyControl &&
            this.control.value.amount) {
            return {
                currencyFrom: this.initiatorCurrencyControl.value,
                currencyTo: this.control.value.currency,
                rate: exchangeRate,
                calculatedAmount: this.control.value.amount / exchangeRate,
            };
        }
        return;
    }
    /**
     * Cleanups just before Angular destroys the component.
     *
     * @returns
     */
    ngOnDestroy() {
        if (this.valueChangeSubscription) {
            this.valueChangeSubscription.unsubscribe();
        }
        triggerHook(PaymentFormFieldHooks.onDestroy, this);
    }
    getLabelledbyForSelector() {
        var _a, _b, _c;
        return (((_a = this.options) === null || _a === void 0 ? void 0 : _a.labelledBy) ||
            `${((_b = this.amountLabelEl) === null || _b === void 0 ? void 0 : _b.nativeElement.id) || ''} ${((_c = this.helperTextEL) === null || _c === void 0 ? void 0 : _c.nativeElement.id) || ''}`.trim());
    }
}
PayordSanctionedCurrencyAmountComponent._id = 0;
/** @nocollapse */ PayordSanctionedCurrencyAmountComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordSanctionedCurrencyAmountComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PayordSanctionedCurrencyAmountComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordSanctionedCurrencyAmountComponent, selector: "bb-sanctioned-currency-amount", viewQueries: [{ propertyName: "amountLabelEl", first: true, predicate: ["amountLabel"], descendants: true }, { propertyName: "helperTextEL", first: true, predicate: ["helperText"], descendants: true }], ngImport: i0, template: "<section\n  *ngIf=\"!config?.hidden\"\n  class=\"bb-dynamic-input form-group payment-amount\"\n  [formGroup]=\"group\"\n  [ngClass]=\"options?.cssClasses\"\n>\n  <div\n    #amountLabel\n    class=\"bb-dynamic-input__label bb-label\"\n    id=\"payment-amount__helper-label-{{ sanctionedCurrencyAmountId }}\"\n    *ngIf=\"options?.label\"\n  >\n    {{ options?.label }}\n  </div>\n\n  <span\n    #helperText\n    class=\"bb-dynamic-input__helper-text bb-text-support\"\n    id=\"payment-amount__helper-text-{{ sanctionedCurrencyAmountId }}\"\n    *ngIf=\"options?.helperText\"\n    [textContent]=\"options?.helperText\"\n  >\n  </span>\n\n  <div class=\"col-md-8 px-0\">\n    <ng-container *ngIf=\"options?.items$ | async as response; else loading\">\n      <bb-currency-amount-selector\n        [currencies]=\"response.currencies\"\n        [decMinLen]=\"0\"\n        [decMaxLen]=\"options?.decMaxLen\"\n        [allowNegativeValue]=\"options?.allowNegativeValue\"\n        [currencyLabel]=\"options?.currencyLabel || ''\"\n        [decimalLabel]=\"options?.decimalLabel || ''\"\n        [disabled]=\"options?.disabled || false\"\n        [integer]=\"options?.integer\"\n        [integerLabel]=\"options?.integerLabel || ''\"\n        [isRightAligned]=\"options?.isRightAligned\"\n        [labelClasses]=\"options?.labelClasses || ''\"\n        [placeholder]=\"options?.placeholder || 0\"\n        [readonly]=\"options?.readonly\"\n        [aria-describedby]=\"options?.describedBy\"\n        [aria-labelledby]=\"getLabelledbyForSelector()\"\n        [aria-invalid]=\"options?.ariaInvalid\"\n        [formControlName]=\"config.name\"\n        [currencySelectorExtended]=\"true\"\n        [currencySelectorConfig]=\"{\n          dividerIndex: response.dividerIndex,\n          showName: true,\n          isSearchable: true\n        }\"\n        [attr.maxlength]=\"options?.maxLength || 18\"\n        data-role=\"sanctioned-currency-amount-selector\"\n        resultType=\"string\"\n        ngDefaultControl\n      >\n        <div bbValidationMessage>\n          <bb-payord-validation-message\n            [control]=\"group.get('amountGroup')\"\n            [validationMessages]=\"options?.validationMessages\"\n            [label]=\"options?.label || 'Amount'\"\n          ></bb-payord-validation-message>\n        </div>\n      </bb-currency-amount-selector>\n      <bb-input-validation-message-ui [showErrors]=\"response.message\">\n        <span i18n=\"@@load-error-message-curr\"\n          >Something went wrong. Reload the page or contact system\n          administrator.</span\n        >\n      </bb-input-validation-message-ui>\n    </ng-container>\n  </div>\n  <ng-template #loading>\n    <bb-loading-indicator-ui></bb-loading-indicator-ui>\n  </ng-template>\n\n  <ng-container *ngIf=\"exchangeRate$ | async as exchangeRate\">\n    <ng-container *ngIf=\"getCalculatedRate(exchangeRate) as calculatedRate\">\n      <ng-container i18n=\"@@approximatelyPriceLabel\"\n        >You pay approximately:</ng-container\n      >\n      <span class=\"bb-text-bold\">\n        &asymp;\n        <bb-amount-ui\n          [mapCurrency]=\"false\"\n          [amount]=\"calculatedRate.calculatedAmount\"\n          [currency]=\"calculatedRate.currencyFrom\"\n        ></bb-amount-ui>\n      </span>\n      <ng-container i18n=\"@@currency-exchange-rate\">\n        (1 {{ calculatedRate.currencyFrom }} &asymp; {{ calculatedRate.rate }}\n        {{ calculatedRate.currencyTo }})\n      </ng-container>\n    </ng-container>\n  </ng-container>\n\n  <div *ngIf=\"options?.exchangeRateError$ | async\">\n    <span i18n=\"@@load-error-message-rate\"\n      >Exchange rate for this currency pair is unavailable.</span\n    >\n  </div>\n\n  <div\n    class=\"bb-dynamic-input__desc bb-text-support bb-subtitle\"\n    *ngIf=\"options?.description\"\n    [textContent]=\"options?.description\"\n  ></div>\n</section>\n", components: [{ type: i1.ӨCurrencyAmountSelectorComponent, selector: "bb-currency-amount-selector", inputs: ["decMaxLen", "decMinLen", "placeholder", "resultType", "integer", "required", "readonly", "disabled", "integerLabelSrOnly", "decimalLabelSrOnly", "currencies", "currencySelectorExtended", "currencySelectorConfig", "isRightAligned", "integerId", "decimalId", "integerLabel", "decimalLabel", "currencyLabel", "labelClasses", "allowNegativeValue", "currencyListAriaLabel", "currencyListWithOnItemAriaLabel", "aria-describedby", "aria-labelledby", "aria-invalid"] }, { type: ValidationMessageComponent, selector: "bb-payord-validation-message", inputs: ["control", "validationMessages", "label", "id", "hideGeneric"] }, { type: i3.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i4$1.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i5$2.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i5.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i5.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }], pipes: { "async": i4.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordSanctionedCurrencyAmountComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-sanctioned-currency-amount',
                    templateUrl: './payord-sanctioned-currency-amount.component.html',
                }]
        }], propDecorators: { amountLabelEl: [{
                type: ViewChild,
                args: ['amountLabel']
            }], helperTextEL: [{
                type: ViewChild,
                args: ['helperText']
            }] } });

class PayordCountrySelectorComponent extends ActivatableFormField {
    constructor(visibilityService) {
        super(visibilityService);
        this.visibilityService = visibilityService;
    }
    /**
     * Initialize the component.
     *
     * @returns
     */
    ngOnInit() {
        this.defaultCountry = this.options.defaultValue || '';
        this.control = registerFormControl(this.group, this.config.name, this.options.validators, this.options.asyncValidators, this.defaultCountry, this.config);
        this.toggleDependants();
        triggerHook(PaymentFormFieldHooks.onInit, this);
    }
    /**
     * Cleanup just before Angular destroys the component.
     *
     * @returns
     */
    ngOnDestroy() {
        triggerHook(PaymentFormFieldHooks.onDestroy, this);
    }
    /**
     * Selects an item
     *
     * @param country Item country
     * @returns
     */
    selectItem(country) {
        this.control.setValue(country);
        this.toggleDependants();
    }
}
/** @nocollapse */ PayordCountrySelectorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordCountrySelectorComponent, deps: [{ token: VisibilityService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PayordCountrySelectorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordCountrySelectorComponent, selector: "bb-payord-country-selector", usesInheritance: true, ngImport: i0, template: "<div\n  class=\"bb-dynamic-input form-group\"\n  *ngIf=\"!config?.hidden\"\n  [formGroup]=\"group\"\n  [ngClass]=\"options?.cssClasses\"\n>\n  <bb-select-country-dropdown\n    [formControlName]=\"config?.name\"\n    [countries]=\"options?.countries\"\n    [label]=\"options?.label\"\n    [helperText]=\"options?.helperText\"\n    [placeholder]=\"options?.placeholder\"\n    [searchPlaceholder]=\"options?.searchPlaceholder\"\n    [dropdownIcon]=\"options?.dropdownIcon\"\n    [selectedCountry]=\"control.value\"\n    (selectCountry)=\"selectItem($event)\"\n    [attr.data-role]=\"config?.name\"\n  ></bb-select-country-dropdown>\n\n  <bb-payord-validation-message\n    [control]=\"group?.controls[config.name]\"\n    [validationMessages]=\"options?.validationMessages\"\n    [label]=\"options?.label\"\n  ></bb-payord-validation-message>\n\n  <div\n    class=\"bb-dynamic-input__desc bb-text-support bb-subtitle\"\n    [attr.aria-hidden]=\"!options?.description\"\n    [hidden]=\"!options?.description\"\n    [textContent]=\"options?.description || ''\"\n    #descElem\n  ></div>\n</div>\n", components: [{ type: i1.ӨSelectCountryDropdownComponent, selector: "bb-select-country-dropdown", inputs: ["countries", "selectedCountry", "helperText", "placeholder", "label", "searchPlaceholder", "dropdownIcon", "isClosedPayment"], outputs: ["selectCountry"] }, { type: ValidationMessageComponent, selector: "bb-payord-validation-message", inputs: ["control", "validationMessages", "label", "id", "hideGeneric"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordCountrySelectorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payord-country-selector',
                    templateUrl: 'payord-country-selector.component.html',
                }]
        }], ctorParameters: function () { return [{ type: VisibilityService }]; } });

class PayordSwitchComponent extends ActivatableFormField {
    constructor(visibilityService) {
        super(visibilityService);
        this.visibilityService = visibilityService;
    }
    ngOnInit() {
        this.control = registerFormControl(this.group, this.config.name, this.options.validators, this.options.asyncValidators, this.options.defaultValue, this.config);
        this.toggleDependants();
        triggerHook(PaymentFormFieldHooks.onInit, this);
    }
    ngOnDestroy() {
        triggerHook(PaymentFormFieldHooks.onDestroy, this);
    }
}
/** @nocollapse */ PayordSwitchComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordSwitchComponent, deps: [{ token: VisibilityService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PayordSwitchComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordSwitchComponent, selector: "bb-payord-switch", usesInheritance: true, ngImport: i0, template: "<div\n  class=\"form-group bb-dynamic-input\"\n  [formGroup]=\"group\"\n  [ngClass]=\"options?.cssClasses\"\n>\n  <div [hidden]=\"config?.hidden\">\n    <bb-switch-ui\n      [formControlName]=\"config?.name\"\n      [label]=\"options?.label\"\n      [labelPosition]=\"options?.labelPosition\"\n      (change)=\"toggleDependants()\"\n      [bbDynamicAriaAttribute]=\"{\n        __error: control?.touched && control?.invalid\n      }\"\n      [inputSelector]=\"'.bb-switch__checkbox'\"\n      [attr.data-role]=\"config?.name\"\n      #inputEl\n    >\n    </bb-switch-ui>\n    <bb-payord-validation-message\n      [control]=\"group?.controls[config.name]\"\n      [validationMessages]=\"options?.validationMessages\"\n      [label]=\"options?.label\"\n      [id]=\"inputEl?.id + '__error'\"\n    ></bb-payord-validation-message>\n  </div>\n</div>\n", components: [{ type: i2$5.SwitchComponent, selector: "bb-switch-ui", inputs: ["labelPosition"] }, { type: ValidationMessageComponent, selector: "bb-payord-validation-message", inputs: ["control", "validationMessages", "label", "id", "hideGeneric"] }], directives: [{ type: i5.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: DynamicAriaAttributeDirective, selector: "[bbDynamicAriaAttribute]", inputs: ["bbDynamicAriaAttribute", "prependInputId", "inputSelector", "ariaAttributeName"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordSwitchComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payord-switch',
                    templateUrl: './payord-switch.component.html',
                }]
        }], ctorParameters: function () { return [{ type: VisibilityService }]; } });

class PayordDateComponent {
    ngOnInit() {
        this.control = registerFormControl(this.group, this.config.name, this.options.validators, this.options.asyncValidators, this.options.defaultValue, this.config);
        triggerHook(PaymentFormFieldHooks.onInit, this);
    }
    ngOnDestroy() {
        triggerHook(PaymentFormFieldHooks.onDestroy, this);
    }
}
/** @nocollapse */ PayordDateComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordDateComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PayordDateComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordDateComponent, selector: "bb-payord-date", ngImport: i0, template: "<div\n  *ngIf=\"!config?.hidden\"\n  class=\"bb-dynamic-input form-group payord-date-control\"\n  [formGroup]=\"group\"\n  [ngClass]=\"options?.cssClasses\"\n>\n  <div>\n    <div\n      [class.payord-date-control__no-label]=\"\n        !options?.label && !options?.helperText\n      \"\n    >\n      <label\n        class=\"bb-dynamic-input__label\"\n        *ngIf=\"options?.label\"\n        [id]=\"inputEl?.id + '__label'\"\n        [textContent]=\"options?.label\"\n        #labelElem\n      ></label>\n      <span\n        class=\"bb-dynamic-input__helper-text bb-text-support\"\n        *ngIf=\"options?.helperText\"\n        [textContent]=\"options?.helperText\"\n      >\n      </span>\n    </div>\n    <div class=\"bb-block bb-block--sm\">\n      <bb-input-datepicker-ui\n        [formControlName]=\"config.name\"\n        [minDate]=\"options.minDate\"\n        [maxDate]=\"options.maxDate\"\n        [overrideDateFormat]=\"options.overrideDateFormat\"\n        [placeholder]=\"options.placeholder\"\n        [btnColor]=\"options.btnColor || 'link'\"\n        [clickOpen]=\"options.clickOpen || false\"\n        [focusOpen]=\"options.focusOpen || false\"\n        [icon]=\"options.icon || 'calendar'\"\n        [iconColor]=\"options.iconColor\"\n        [iconSize]=\"options.iconSize || 'md'\"\n        [markDisabled]=\"options.markDisabled\"\n        [navigation]=\"options.navigation || 'arrows'\"\n        [placement]=\"options.placement || 'bottom-left'\"\n        [rangeSelection]=\"options.rangeSelection || false\"\n        [firstDayOfWeek]=\"options.firstDayOfWeek\"\n        [readonly]=\"options.readonly || false\"\n        [bbDynamicAriaAttribute]=\"{\n          __error: control?.touched && control?.invalid,\n          __desc: options?.description\n        }\"\n        [attr.data-role]=\"config.name\"\n        [aria-labelledby]=\"options?.label ? inputEl?.id + '__label' : null\"\n        #inputEl\n      >\n      </bb-input-datepicker-ui>\n    </div>\n\n    <bb-payord-validation-message\n      [control]=\"group?.controls[config.name]\"\n      [validationMessages]=\"options?.validationMessages\"\n      [label]=\"options?.label\"\n      [id]=\"inputEl?.id + '__error'\"\n    ></bb-payord-validation-message>\n\n    <div\n      class=\"bb-dynamic-input__desc bb-text-support bb-subtitle\"\n      [attr.aria-hidden]=\"!options?.description\"\n      [hidden]=\"!options?.description\"\n      [id]=\"inputEl?.id + '__desc'\"\n      [textContent]=\"options?.description || ''\"\n      #descElem\n    ></div>\n  </div>\n</div>\n", components: [{ type: i1$6.InputDatepickerComponent, selector: "bb-input-datepicker-ui", inputs: ["rangeSelection", "rangeSelectionSplit", "clickOpen", "focusOpen", "placement", "datepickerDescribedby", "ariaLabelForButton", "minDate", "maxDate", "markDisabled", "icon", "iconSize", "iconColor", "btnColor", "ariaLabel", "navigation", "autocomplete", "firstDayOfWeek", "displayMonths", "placeholder", "overrideDateFormat"], outputs: ["focusedDate"] }, { type: ValidationMessageComponent, selector: "bb-payord-validation-message", inputs: ["control", "validationMessages", "label", "id", "hideGeneric"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i1$6.MinDateValidatorDirective, selector: "bb-input-datepicker-ui[minDate]", inputs: ["minDate"] }, { type: i1$6.MaxDateValidatorDirective, selector: "bb-input-datepicker-ui[maxDate]", inputs: ["maxDate"] }, { type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: DynamicAriaAttributeDirective, selector: "[bbDynamicAriaAttribute]", inputs: ["bbDynamicAriaAttribute", "prependInputId", "inputSelector", "ariaAttributeName"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordDateComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payord-date',
                    templateUrl: './payord-date.component.html',
                }]
        }] });

class PayordNumberComponent {
    ngOnInit() {
        this.control = registerFormControl(this.group, this.config.name, this.options.validators, this.options.asyncValidators, this.options.defaultValue, this.config);
        triggerHook(PaymentFormFieldHooks.onInit, this);
    }
    ngOnDestroy() {
        triggerHook(PaymentFormFieldHooks.onDestroy, this);
    }
}
/** @nocollapse */ PayordNumberComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordNumberComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PayordNumberComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordNumberComponent, selector: "bb-payord-number", ngImport: i0, template: "<div\n  *ngIf=\"!config?.hidden\"\n  class=\"bb-dynamic-input form-group\"\n  [formGroup]=\"group\"\n  [ngClass]=\"options?.cssClasses\"\n>\n  <div>\n    <label\n      class=\"bb-dynamic-input__label\"\n      [id]=\"inputEl?.id + '__label'\"\n      [for]=\"inputEl?.id\"\n      [textContent]=\"options?.label || ''\"\n      #labelElem\n    ></label>\n    <span\n      class=\"bb-dynamic-input__helper-text bb-text-support\"\n      *ngIf=\"options?.helperText\"\n      [id]=\"inputEl?.id + '__desc'\"\n      [textContent]=\"options?.helperText\"\n    >\n    </span>\n    <bb-input-number-ui\n      [placeholder]=\"options.placeholder || ''\"\n      [formControlName]=\"config.name\"\n      [max]=\"options.max\"\n      [min]=\"options.min\"\n      [step]=\"options.step\"\n      [bbDynamicAriaAttribute]=\"{\n        __error: control?.touched && control?.invalid,\n        __desc: options?.description\n      }\"\n      #inputEl\n    >\n    </bb-input-number-ui>\n\n    <bb-payord-validation-message\n      [control]=\"group?.controls[config.name]\"\n      [validationMessages]=\"options?.validationMessages\"\n      [label]=\"options?.label\"\n      [id]=\"inputEl?.id + '__error'\"\n    ></bb-payord-validation-message>\n\n    <div\n      class=\"bb-dynamic-input__desc bb-text-support bb-subtitle\"\n      [attr.aria-hidden]=\"!options?.description\"\n      [hidden]=\"!options?.description\"\n      [id]=\"inputEl?.id + '__desc'\"\n      [textContent]=\"options?.description || ''\"\n      #descElem\n    ></div>\n  </div>\n</div>\n", components: [{ type: i1$7.InputNumberComponent, selector: "bb-input-number-ui", inputs: ["placeholder", "max", "min", "step", "readonly", "autocomplete", "ariaLabel", "allowNonDigits", "allowNegativeSign"] }, { type: ValidationMessageComponent, selector: "bb-payord-validation-message", inputs: ["control", "validationMessages", "label", "id", "hideGeneric"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: DynamicAriaAttributeDirective, selector: "[bbDynamicAriaAttribute]", inputs: ["bbDynamicAriaAttribute", "prependInputId", "inputSelector", "ariaAttributeName"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordNumberComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payord-number',
                    templateUrl: './payord-number.component.html',
                }]
        }] });

class PayordPhoneComponent {
    ngOnInit() {
        this.control = registerFormControl(this.group, this.config.name, this.options.validators, this.options.asyncValidators, this.options.defaultValue, this.config);
        triggerHook(PaymentFormFieldHooks.onInit, this);
    }
    ngOnDestroy() {
        triggerHook(PaymentFormFieldHooks.onDestroy, this);
    }
}
/** @nocollapse */ PayordPhoneComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordPhoneComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PayordPhoneComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordPhoneComponent, selector: "bb-payord-phone", ngImport: i0, template: "<div\n  *ngIf=\"!config?.hidden\"\n  class=\"bb-dynamic-input form-group\"\n  [formGroup]=\"group\"\n  [ngClass]=\"options?.cssClasses\"\n>\n  <div>\n    <label\n      class=\"bb-dynamic-input__label\"\n      [id]=\"inputEl?.id + '__label'\"\n      [for]=\"inputEl?.id\"\n      [textContent]=\"options?.label || ''\"\n      #labelElem\n    ></label>\n    <span\n      class=\"bb-dynamic-input__helper-text bb-text-support\"\n      *ngIf=\"options?.helperText\"\n      [id]=\"inputEl?.id + '__desc'\"\n      [textContent]=\"options?.helperText\"\n    >\n    </span>\n    <bb-input-phone-ui\n      [placeholder]=\"options.placeholder || ''\"\n      [formControlName]=\"config.name\"\n      [minLength]=\"options?.minLength\"\n      [maxLength]=\"options?.maxLength\"\n      [bbDynamicAriaAttribute]=\"{\n        __error: control?.touched && control?.invalid,\n        __desc: options?.description\n      }\"\n      [attr.data-role]=\"config.name\"\n      #inputEl\n    >\n    </bb-input-phone-ui>\n\n    <bb-payord-validation-message\n      [control]=\"group?.controls[config.name]\"\n      [validationMessages]=\"options?.validationMessages\"\n      [label]=\"options?.label\"\n      [id]=\"inputEl?.id + '__error'\"\n    ></bb-payord-validation-message>\n\n    <div\n      class=\"bb-dynamic-input__desc bb-subtitle bb-text-support\"\n      [attr.aria-hidden]=\"!options?.description\"\n      [hidden]=\"!options?.description\"\n      [id]=\"inputEl?.id + '__desc'\"\n      [textContent]=\"options?.description || ''\"\n      #descElem\n    ></div>\n  </div>\n</div>\n", components: [{ type: i1$8.InputPhoneComponent, selector: "bb-input-phone-ui", inputs: ["placeholder", "maxLength", "minLength", "readonly", "ariaLabel", "autocomplete", "countryList", "dropdownPosition", "clearable", "searchable", "defaultCountryIsoCode", "enableCountryCode"] }, { type: ValidationMessageComponent, selector: "bb-payord-validation-message", inputs: ["control", "validationMessages", "label", "id", "hideGeneric"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: DynamicAriaAttributeDirective, selector: "[bbDynamicAriaAttribute]", inputs: ["bbDynamicAriaAttribute", "prependInputId", "inputSelector", "ariaAttributeName"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordPhoneComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payord-phone',
                    templateUrl: './payord-phone.component.html',
                }]
        }] });

class PayordSelectPaymentOptionComponent extends ActivatableFormField {
    constructor(visibilityService) {
        super(visibilityService);
        this.visibilityService = visibilityService;
        this.separator = '::';
        this.defaultTransFerFee = {
            amount: '',
            currencyCode: '',
        };
        this.today = getDateOnly(new Date());
        this.showConfirmOptionModal = false;
    }
    ngOnInit() {
        this.paymentTypecontrol = this.group.get('paymentType');
        this.paymentTypeNameControl = registerFormControl(this.group, PaymentOptionFields.paymentTypeName);
        this.control = registerFormControl(this.group, this.config.name, [
            Validators.required,
        ]);
        this.transferFeeControl =
            this.group.get(PaymentOptionFields.transferFee) ||
                registerFormControl(this.group, PaymentOptionFields.transferFee);
        this.chargeBearerOptionsControl =
            this.group.get(PaymentOptionFields.chargeBearerOptions) ||
                registerFormControl(this.group, PaymentOptionFields.chargeBearerOptions);
        this.remittanceInfoGroup = this.group.get(PaymentBaseFields.remittanceInfo);
        this.isClosedPaymentControl = (this.group.get(HiddenFields.isClosedPayment));
        this.isManualEditControl = (this.group.get(HiddenFields.isManualEdit));
        if (this.remittanceInfoGroup) {
            this.instructionPriorityControl =
                this.remittanceInfoGroup.get(RemittanceInfoFields.urgent) ||
                    registerFormControl(this.remittanceInfoGroup, RemittanceInfoFields.urgent);
        }
        this.paymentOptions$ = (this.options.items$ || of([])).pipe(map((paymentOptions) => paymentOptions.map((paymentOption) => (Object.assign(Object.assign({}, paymentOption), { hasMin: paymentOption.executionTimeFrame &&
                typeof paymentOption.executionTimeFrame.min === 'number', hasMax: paymentOption.executionTimeFrame &&
                typeof paymentOption.executionTimeFrame.max === 'number', name: paymentOption.name ||
                (this.options.optionLabels || {})[paymentOption.paymentType || ''] })))), tap((paymentOptions) => {
            var _a;
            this.paymentOptions = paymentOptions || [];
            if (paymentOptions && paymentOptions.length === 1) {
                const value = this.getValue(paymentOptions[0]);
                if (value !== this.control.value) {
                    this.control.setValue(value);
                    this.setPaymentOptionDetails(paymentOptions[0]);
                }
            }
            if (((_a = this.control) === null || _a === void 0 ? void 0 : _a.value) && paymentOptions.length) {
                const [type, instructionPriority] = this.control.value.split(this.separator);
                const paymentOption = this.getValueByType(type, instructionPriority);
                if (paymentOption) {
                    this.setPaymentOptionDetails(paymentOption);
                }
                else {
                    this.control.reset();
                }
            }
        }));
        this.toggleDependants();
        triggerHook(PaymentFormFieldHooks.onInit, this);
    }
    setPaymentOptionDetails(paymentOption) {
        var _a;
        if (this.instructionPriorityControl) {
            this.instructionPriorityControl.setValue(paymentOption.instructionPriority === 'HIGH');
        }
        if (this.options.isWizardMode && this.options.checkClosedPaymentsAccess) {
            (_a = this.isClosedPaymentControl) === null || _a === void 0 ? void 0 : _a.setValue(!paymentOption.canEditCounterparty);
        }
        this.transferFeeControl.setValue(paymentOption.transferFee || this.defaultTransFerFee);
        this.chargeBearerOptionsControl.setValue(paymentOption.chargeBearer);
        this.paymentTypecontrol.patchValue(paymentOption.paymentType);
        this.paymentTypeNameControl.setValue(paymentOption.name);
    }
    getValue(option) {
        return `${option.paymentType}${this.separator}${option.instructionPriority || ''}`;
    }
    getValueByType(type, priority) {
        return this.paymentOptions.filter((option) => option.paymentType === type && option.instructionPriority === priority)[0];
    }
    onRadioChange(value) {
        this.toggleDependants();
        const [type, instructionPriority] = value.split(this.separator);
        const paymentOption = this.getValueByType(type, instructionPriority);
        this.selectedPaymentOptionLabel = paymentOption.name;
        this.previousPaymentOption = this.currentPaymentOption;
        this.currentPaymentOption = paymentOption;
        if (type && instructionPriority) {
            if (this.shouldShowConfirmationModal(!!(paymentOption === null || paymentOption === void 0 ? void 0 : paymentOption.canEditCounterparty))) {
                this.showConfirmOptionModal = true;
            }
            else {
                this.setPaymentOptionDetails(this.currentPaymentOption);
            }
        }
    }
    shouldShowConfirmationModal(canEditCounterparty) {
        var _a, _b, _c;
        const counterpartyDetails = (_a = (this.group.get(PaymentBaseFields.counterparty))) === null || _a === void 0 ? void 0 : _a.getRawValue();
        const selectedBeneficiary = (_b = this.group.get(HiddenFields.selectedBeneficiary)) === null || _b === void 0 ? void 0 : _b.value;
        const filledBeneficiary = getCounterpartyFormGroupDetails(this.group);
        const isSelectedBeneficiaryChanged = selectedBeneficiary &&
            isSelectedBeneficiaryModified(counterpartyDetails, selectedBeneficiary);
        const isClosedPayment = this.options.isWizardMode &&
            this.options.checkClosedPaymentsAccess &&
            !canEditCounterparty;
        const isEdittedManually = isObjectTruthy(filledBeneficiary) && ((_c = this.isManualEditControl) === null || _c === void 0 ? void 0 : _c.value);
        return (isClosedPayment && (isSelectedBeneficiaryChanged || isEdittedManually));
    }
    confirmPaymentOption() {
        this.showConfirmOptionModal = false;
        revertBeneficiaryChanges(this.group);
        if (this.currentPaymentOption) {
            this.setPaymentOptionDetails(this.currentPaymentOption);
        }
    }
    cancelPaymentOption() {
        this.showConfirmOptionModal = false;
        let prevPaymentType = '';
        this.currentPaymentOption = this.previousPaymentOption;
        if (this.currentPaymentOption) {
            const instructionPriority = this.instructionPriorityControl.value
                ? 'HIGH'
                : 'NORM';
            prevPaymentType = this.paymentTypecontrol.value;
            if (prevPaymentType) {
                this.control.setValue(`${prevPaymentType}${this.separator}${instructionPriority}`);
            }
        }
        if (!prevPaymentType || !this.previousPaymentOption) {
            this.instructionPriorityControl.reset();
            this.control.reset();
        }
    }
    ngOnDestroy() {
        triggerHook(PaymentFormFieldHooks.onDestroy, this);
    }
}
/** @nocollapse */ PayordSelectPaymentOptionComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordSelectPaymentOptionComponent, deps: [{ token: VisibilityService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PayordSelectPaymentOptionComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordSelectPaymentOptionComponent, selector: "bb-select-payment-option", usesInheritance: true, ngImport: i0, template: "<ng-container *ngIf=\"paymentOptions$ | async as paymentOptions\">\n  <ng-container *ngIf=\"paymentOptions.length\">\n    <div\n      *ngIf=\"!config?.hidden\"\n      class=\"form-group col-12 bb-dynamic-input\"\n      [formGroup]=\"group\"\n      [ngClass]=\"options?.cssClasses\"\n    >\n      <div class=\"bb-select-payment-option\">\n        <div\n          class=\"bb-label\"\n          i18n-label=\"@@payord-select-payment-option.delivery.label\"\n        >\n          Delivery\n        </div>\n        <bb-input-radio-group-ui\n          label=\"Delivery\"\n          i18n-label=\"@@payord-select-payment-option.radiogroup.label\"\n          [formControlName]=\"config?.name\"\n          (change)=\"onRadioChange($event?.target?.value || '')\"\n          [preselect]=\"false\"\n          [bbDynamicAriaAttribute]=\"{\n            select_payment_option__error: control?.touched && control?.invalid\n          }\"\n          [prependInputId]=\"false\"\n          data-role=\"payment-option-radio-group\"\n          inputSelector=\".bb-input-radio-group\"\n          #inputEl\n        >\n          <bb-input-radio-ui\n            *ngFor=\"let option of paymentOptions\"\n            [labelTemplate]=\"labelTemplate\"\n            [labelTemplateContext]=\"option\"\n            [value]=\"getValue(option)\"\n            [attr.data-role]=\"getValue(option)\"\n          ></bb-input-radio-ui>\n        </bb-input-radio-group-ui>\n\n        <bb-input-validation-message-ui\n          data-role=\"input-error\"\n          role=\"alert\"\n          *ngIf=\"control\"\n          [showErrors]=\"control?.touched && control?.invalid\"\n        >\n          <ng-container *ngIf=\"control.errors && control.errors['required']\">\n            <span id=\"select_payment_option__error\" data-role=\"required-error\">\n              <ng-container i18n\n                >Please choose a payment delivery option</ng-container\n              >\n            </span>\n          </ng-container>\n        </bb-input-validation-message-ui>\n      </div>\n    </div>\n  </ng-container>\n</ng-container>\n\n<ng-template #labelTemplate let-context=\"labelTemplateContext\">\n  <div class=\"row bb-select-payment-option__label\">\n    <div class=\"col-6\">\n      <div>\n        <span>{{context?.name}}</span>\n        <span *ngIf=\"context.showHelperText\">\n          ({ context.instructionPriority, select, HIGH {Urgent} NORM {Standard}\n          })\n        </span>\n      </div>\n      <div\n        class=\"bb-text-support font-weight-normal bb-subtitle\"\n        *ngIf=\"context?.executionTimeFrame\"\n      >\n        <ng-container *ngIf=\"!context?.hasMin && context?.hasMax\" i18n>\n          Delivered {context.executionTimeFrame.max, plural, =0\n          {{context.executionTimeFrame.unit, select, HOUR {instantly}\n          CALENDAR_DAY {same day} BUSINESS_DAY { same business day}}} =1\n          {{context.executionTimeFrame.unit, select, HOUR {within 1 hour}\n          CALENDAR_DAY {within 1 day} BUSINESS_DAY {within 1 business day}}}\n          other {{context.executionTimeFrame.unit, select, HOUR {within\n          {{context.executionTimeFrame.max}} hours} CALENDAR_DAY {within\n          {{context.executionTimeFrame.max}} days} BUSINESS_DAY {within\n          {{context.executionTimeFrame.max}} business days}}}}\n        </ng-container>\n        <ng-container *ngIf=\"context?.hasMin && context?.hasMax\" i18n>\n          Delivered within\n          {{context.executionTimeFrame.min}}-{{context.executionTimeFrame.max}}\n          {context.executionTimeFrame.unit, select, HOUR {hours} CALENDAR_DAY\n          {days} BUSINESS_DAY {business days}}\n        </ng-container>\n        <ng-container *ngIf=\"context?.cutOffTime\" i18n>\n          if received before {{today + ' ' + context?.cutOffTime | date:\n          'HH:mm'}} Hrs\n        </ng-container>\n      </div>\n    </div>\n    <div\n      class=\"col-6 d-flex align-items-center bb-text-support font-weight-normal\"\n    >\n      <bb-icon-ui\n        class=\"bb-select-payment-option__icon\"\n        name=\"data-usage\"\n      ></bb-icon-ui>\n      <span data-role=\"transfer-fee\"\n        >{{context.transferFee.amount | currency:\n        context.transferFee.currencyCode: 'code'}}</span\n      >\n    </div>\n  </div>\n</ng-template>\n\n<bb-confirmation-dialog\n  [isOpen]=\"showConfirmOptionModal\"\n  (cancel)=\"cancelPaymentOption()\"\n  (confirm)=\"confirmPaymentOption()\"\n>\n  <h2\n    title\n    data-role=\"confirm-reset-beneficiary-modal-header\"\n    i18n=\"@@confirm-reset-beneficiary-modal-title\"\n  >\n    'Continue with '{{selectedPaymentOptionLabel}}'?'\n  </h2>\n  <span\n    body\n    i18n=\"@@confirm-reset-beneficiary-modal-content\"\n    data-role=\"confirm-reset-beneficiary-modal-message\"\n  >\n    Changes to beneficiary will be reset.\n  </span>\n  <span\n    confirmActionName\n    data-role=\"continue-action-btn\"\n    i18n=\"@@confirm-reset-beneficiary-modal-discard-btn\"\n  >\n    Continue\n  </span>\n  <span\n    cancelActionName\n    data-role=\"cancel-action-btn\"\n    i18n=\"@@confirm-reset-beneficiary-modal-cancel-btn\"\n  >\n    Cancel\n  </span>\n</bb-confirmation-dialog>\n", components: [{ type: i2$2.InputRadioGroupComponent, selector: "bb-input-radio-group-ui", inputs: ["horizontal", "preselect", "name", "verticalAlign"] }, { type: i2$2.InputRadioComponent, selector: "bb-input-radio-ui", inputs: ["labelTemplate", "labelTemplateContext", "value", "label", "aria-label", "aria-labelledby", "aria-describedby", "role", "aria-activedescendant", "aria-expanded", "aria-invalid", "aria-owns", "disabled"] }, { type: i3.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i2$3.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i1.ӨConfirmationDialogComponent, selector: "bb-confirmation-dialog", inputs: ["confirmButtonColor", "cancelButtonColor", "isOpen", "confirmActionPayload", "attachComment", "commentFieldLabel"], outputs: ["confirm", "cancel"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: DynamicAriaAttributeDirective, selector: "[bbDynamicAriaAttribute]", inputs: ["bbDynamicAriaAttribute", "prependInputId", "inputSelector", "ariaAttributeName"] }, { type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "async": i4.AsyncPipe, "date": i4.DatePipe, "currency": i4.CurrencyPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordSelectPaymentOptionComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-select-payment-option',
                    templateUrl: './payord-select-payment-option.html',
                }]
        }], ctorParameters: function () { return [{ type: VisibilityService }]; } });

class PayordPaymentCostComponent {
    constructor() {
        this.defaultCurrency = 'USD';
        this.paymentCostInfo$ = new BehaviorSubject(undefined);
        this.fromCurrency = '';
        this.exchangeRate = 0;
        this.instructionPriority = false;
        this.isTotalAmountDisplayed = true;
    }
    ngOnInit() {
        this.fromCurrencyControl = this.group.get(`${PaymentBaseFields.initiator}.${InitiatorFields.currency}`);
        this.amountControl = this.group.get(`${PaymentBaseFields.remittanceInfo}.${RemittanceInfoFields.amountCurrencyGroup}`);
        this.instructionPriorityControl = this.group.get(`${PaymentBaseFields.remittanceInfo}.${RemittanceInfoFields.urgent}`);
        this.transferFeeControl =
            this.group.get(PaymentOptionFields.transferFee) ||
                registerFormControl(this.group, PaymentOptionFields.transferFee);
        this.chargeBearerControl =
            this.group.get(PaymentOptionFields.chargeBearer) ||
                registerFormControl(this.group, PaymentOptionFields.chargeBearer);
        this.exchangeRateControl =
            this.group.get(PaymentOptionFields.exchangeRate) ||
                registerFormControl(this.group, PaymentOptionFields.exchangeRate);
        this.paymentTypeNameControl = this.group.get(PaymentOptionFields.paymentTypeName);
        this.listenChanges();
    }
    getTotalCost(transferFee, calculatedAmount = 0) {
        const fee = new BigNumber((transferFee === null || transferFee === void 0 ? void 0 : transferFee.amount) || '0');
        const amount = new BigNumber(calculatedAmount || this.amount.amount || '0');
        return amount.plus(fee).toString();
    }
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
    hasForexInfo(fromCurrency = '', toCurrency = '', exchangeRate = 0) {
        return (!!fromCurrency &&
            !!toCurrency &&
            fromCurrency !== toCurrency &&
            exchangeRate !== 0);
    }
    listenChanges() {
        if (this.amountControl &&
            this.fromCurrencyControl &&
            this.instructionPriorityControl) {
            this.subscription = combineLatest([
                this.fromCurrencyControl.valueChanges.pipe(startWith(this.fromCurrencyControl.value), distinctUntilChanged()),
                this.amountControl.valueChanges.pipe(startWith(this.amountControl.value), distinctUntilChanged()),
                this.transferFeeControl.valueChanges.pipe(startWith(this.transferFeeControl.value), distinctUntilChanged()),
                this.chargeBearerControl.valueChanges.pipe(startWith(this.chargeBearerControl.value), distinctUntilChanged()),
                this.exchangeRateControl.valueChanges.pipe(startWith(this.exchangeRateControl.value), distinctUntilChanged()),
                this.instructionPriorityControl.valueChanges.pipe(startWith(this.instructionPriorityControl.value), distinctUntilChanged()),
            ]).subscribe(([fromCurrency, amount, transferFee, chargeBearer, exchangeRate, instructionPriority,]) => {
                var _a;
                this.fromCurrency = fromCurrency;
                this.amount = amount;
                this.exchangeRate = exchangeRate;
                this.instructionPriority = instructionPriority;
                this.isTotalAmountDisplayed =
                    !!this.exchangeRate || this.fromCurrency === this.amount.currency;
                const fee = Object.assign({}, transferFee);
                if (chargeBearer === ChargeBearer.BEN) {
                    // If chargebearer is beneficiary then set transfer fee to 0
                    fee.amount = '0';
                }
                if (chargeBearer && !((_a = this.options) === null || _a === void 0 ? void 0 : _a.isTemplateMode)) {
                    const _amountByRate = new BigNumber(amount.amount || '0').dividedBy(exchangeRate);
                    const calculatedAmount = !!exchangeRate
                        ? _amountByRate.toString()
                        : amount.amount;
                    this.paymentCostInfo$.next({
                        transferFee: fee,
                        hasForexInfo: this.hasForexInfo(fromCurrency, amount.currency, exchangeRate),
                        rate: exchangeRate,
                        fromCurrency: this.fromCurrency,
                        toCurrency: this.amount.currency,
                        calculatedAmount,
                    });
                }
            });
        }
    }
}
/** @nocollapse */ PayordPaymentCostComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordPaymentCostComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PayordPaymentCostComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordPaymentCostComponent, selector: "bb-payment-cost", ngImport: i0, template: "<section\n  class=\"bb-block--md col-12 bb-dynamic-input\"\n  *ngIf=\"paymentCostInfo$ | async as paymentCostInfo\"\n>\n  <ng-container *ngIf=\"paymentCostInfo.transferFee?.amount\">\n    <ng-container\n      *ngIf=\"paymentCostInfo?.hasForexInfo; else sameCurrencyTransferTmpl\"\n    >\n      <hr />\n      <div\n        class=\"bb-heading-3 bb-block bb-block--md d-flex justify-content-between\"\n      >\n        <div i18n=\"@@bb-dynamic-input-payment-cost.transfer-amount.title\">\n          Transfer amount\n        </div>\n        <bb-amount-ui\n          data-role=\"transfer-amount\"\n          [mapCurrency]=\"false\"\n          [amount]=\"amount.amount || '0'\"\n          [currency]=\"amount.currency || defaultCurrency\"\n        >\n        </bb-amount-ui>\n      </div>\n\n      <div\n        [hidden]=\"!paymentCostInfo.calculatedAmount\"\n        class=\"bb-block bb-block--md d-flex justify-content-between\"\n      >\n        <div i18n=\"@@bb-dynamic-amount-you-pay-label.title\">\n          Amount you pay\n          <span data-role=\"exchange-rate\"\n            >(1 {{ paymentCostInfo.fromCurrency }} &asymp;\n            {{ paymentCostInfo.rate }} {{ paymentCostInfo.toCurrency }})</span\n          >\n        </div>\n        <div data-role=\"amount-you-pay\">\n          &asymp;\n          <bb-amount-ui\n            [mapCurrency]=\"false\"\n            [amount]=\"paymentCostInfo?.calculatedAmount || '0'\"\n            [currency]=\"paymentCostInfo?.fromCurrency\"\n          ></bb-amount-ui>\n        </div>\n      </div>\n      <div class=\"bb-block bb-block--md d-flex justify-content-between\">\n        <div\n          *ngIf=\"paymentTypeNameControl?.value\"\n          i18n=\"@@bb-dynamic-input-payment-cost.fee.title\"\n        >\n          Transfer fee - {{ paymentTypeNameControl?.value }}\n        </div>\n        <bb-amount-ui\n          data-role=\"payment-fee\"\n          [mapCurrency]=\"false\"\n          [amount]=\"paymentCostInfo.transferFee?.amount || '0'\"\n          [currency]=\"paymentCostInfo.transferFee?.currencyCode\"\n        >\n        </bb-amount-ui>\n      </div>\n      <div\n        *ngIf=\"isTotalAmountDisplayed\"\n        class=\"bb-text-bold bb-block bb-block--md d-flex justify-content-between\"\n      >\n        <div i18n=\"@@bb-dynamic-input-payment-cost.total.title\">Total</div>\n        <div>\n          &asymp;\n          <bb-amount-ui\n            data-role=\"total-amount-to-pay\"\n            [mapCurrency]=\"false\"\n            [amount]=\"\n              getTotalCost(\n                paymentCostInfo.transferFee,\n                paymentCostInfo.calculatedAmount\n              )\n            \"\n            [currency]=\"paymentCostInfo.fromCurrency\"\n          >\n          </bb-amount-ui>\n        </div>\n      </div>\n    </ng-container>\n\n    <ng-template #sameCurrencyTransferTmpl>\n      <div>\n        <hr />\n        <div\n          class=\"bb-heading-3 bb-block bb-block--md d-flex justify-content-between\"\n        >\n          <div i18n=\"@@bb-dynamic-input-payment-cost.amount.title\">Amount</div>\n          <bb-amount-ui\n            data-role=\"amount-you-pay\"\n            [mapCurrency]=\"false\"\n            [amount]=\"amount.amount || '0'\"\n            [currency]=\"amount.currency || defaultCurrency\"\n          ></bb-amount-ui>\n        </div>\n        <div class=\"bb-block bb-block--md d-flex justify-content-between\">\n          <div\n            *ngIf=\"paymentTypeNameControl?.value\"\n            i18n=\"@@bb-dynamic-input-payment-cost.fee.title\"\n          >\n            Transfer fee - {{ paymentTypeNameControl?.value }}\n          </div>\n          <bb-amount-ui\n            data-role=\"payment-fee\"\n            [mapCurrency]=\"false\"\n            [amount]=\"paymentCostInfo.transferFee?.amount || '0'\"\n            [currency]=\"paymentCostInfo.transferFee?.currencyCode\"\n          >\n          </bb-amount-ui>\n        </div>\n        <div\n          *ngIf=\"isTotalAmountDisplayed\"\n          class=\"bb-text-bold bb-block bb-block--md d-flex justify-content-between\"\n        >\n          <div i18n=\"@@bb-dynamic-input-payment-cost.total.title\">Total</div>\n          <bb-amount-ui\n            data-role=\"total-amount\"\n            [mapCurrency]=\"false\"\n            [amount]=\"getTotalCost(paymentCostInfo.transferFee)\"\n            [currency]=\"amount.currency || defaultCurrency\"\n          >\n          </bb-amount-ui>\n        </div>\n      </div>\n    </ng-template>\n  </ng-container>\n</section>\n", components: [{ type: i5$2.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i4.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordPaymentCostComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payment-cost',
                    templateUrl: './payment-cost.component.html',
                }]
        }] });

function getRouteParams(route) {
    if (!route) {
        return {};
    }
    let params = route.snapshot.params;
    params = Object.assign(Object.assign({}, route.snapshot.queryParams), params);
    if (route.children) {
        for (const r of route.children) {
            params = Object.assign(Object.assign({}, getRouteParams(r)), params);
        }
    }
    return params;
}

const getDbsValue = (dbsObj, keys) => {
    const value = keys
        .split('.')
        .reduce((obj, key) => { var _a; return (_a = obj) === null || _a === void 0 ? void 0 : _a[key]; }, dbsObj);
    return ((['string', 'number'].includes(typeof value) ? value : undefined));
};
class PayordInternalAccountSelectorComponent extends ActivatableFormField {
    constructor(renderer, cd, activatedRoute, visibilityService) {
        super(visibilityService);
        this.renderer = renderer;
        this.cd = cd;
        this.activatedRoute = activatedRoute;
        this.destroy$ = new Subject();
        this.connectedAccounts$ = of([]);
        this.productKinds = ProductKinds;
        /**
         * Id to associate messages to form field for accessibility
         */
        this.validationId = '';
        /**
         * Account number fromat used to mask the account numbers in the selector
         */
        this.accountFormat = {
            length: 0,
            maskRange: [0, 0],
            segments: 0,
        };
        /**
         * Boolean to show if account selector tab is touched
         */
        this.touched = false;
    }
    /**
     * Return other account selector field name
     */
    get peerFieldName() {
        return this.config.name === InitiatorFields.initiatorAccountGroup
            ? PaymentBaseFields.counterparty
            : PaymentBaseFields.initiator;
    }
    /**
     * Flag to show if dropdown is open
     */
    get isDropdownOpen() {
        var _a, _b;
        return !!((_b = (_a = this.productSelector) === null || _a === void 0 ? void 0 : _a.bbDropdown) === null || _b === void 0 ? void 0 : _b.isOpen());
    }
    /**
     * Flag to show which account kinds should not be rendered in order to avoid unwanted matches between two account
     */
    get disabledProductKinds() {
        var _a, _b;
        const combinations = ((_a = this.options.paymentTypeOptions) === null || _a === void 0 ? void 0 : _a.disabledCombinations) || [];
        const isInitiator = this.config.name === InitiatorFields.initiatorAccountGroup;
        const counterParty = (_b = this.disabledAccount) === null || _b === void 0 ? void 0 : _b.productKindName;
        const disabledProductKinds = combinations.filter((i) => isInitiator ? i.to === counterParty : i.from === counterParty);
        return disabledProductKinds.map((i) => isInitiator ? i.from : i.to);
    }
    ngOnInit() {
        this.validationId = `account-selector-${this.config.name}-error-message`;
        this.form = (this.group.parent ? this.group.parent : null);
        this.registerFields();
        this.control = this.group.controls['name'];
        const { otherFilters, connectedItems$, items$, productKinds, connectedAccounts, preselect, } = this.options;
        if (connectedAccounts) {
            this.connectedAccounts$ = connectedItems$.pipe(take(1));
        }
        this.options.items$ = items$.pipe(take(1), map((accounts) => this.options.mapItems && (accounts === null || accounts === void 0 ? void 0 : accounts.length)
            ? this.options.mapItems(accounts)
            : accounts), map((accounts) => this.filterByProductKind(accounts, productKinds)), map((accounts) => this.filterByOtherProps(accounts, otherFilters)), map((accounts) => accounts.map(this.mapBalance.bind(this))), shareReplay(1));
        combineLatest([
            this.options.items$.pipe(take(1), catchError(() => of([]))),
            this.connectedAccounts$.pipe(take(1), catchError(() => of([]))),
        ]).subscribe(([internals, externals = []]) => {
            var _a;
            const accounts = [...internals, ...externals];
            if (!this.group.value['id']) {
                let selection;
                const { transferFrom, transferTo } = getRouteParams(this.activatedRoute.root);
                const { name: configName } = this.config;
                const idParam = configName === InitiatorFields.initiatorAccountGroup
                    ? transferFrom
                    : transferTo;
                selection = idParam && accounts.find((acc) => acc.id === idParam);
                if (preselect && !selection && transferTo !== ((_a = accounts[0]) === null || _a === void 0 ? void 0 : _a.id)) {
                    selection = accounts[0];
                }
                if (selection) {
                    this.selectItem(selection);
                }
            }
            this.setAccountInEditMode(accounts, this.group, 'id');
        });
        this.setDisabledAccount(this.form);
        triggerHook(PaymentFormFieldHooks.onInit, this);
    }
    ngAfterViewInit() {
        if (this.productSelector) {
            const { nativeElement } = this.productSelector.dropdownToggle;
            fromEvent(nativeElement, 'blur')
                .pipe(take(1))
                .subscribe(() => this.setTouched());
            //Here to fix Safari focus issue https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#Clicking_and_focus
            fromEvent(nativeElement, 'click')
                .pipe(take(1))
                .subscribe((e) => e.currentTarget.focus());
            // Fix accessibility issue (MAINT-10313)
            this.renderer.setAttribute(nativeElement, 'aria-describedby', this.validationId);
        }
    }
    /**
     * Filtering accounts by product kind
     */
    filterByProductKind(accounts = [], productKinds = []) {
        return accounts === null || accounts === void 0 ? void 0 : accounts.filter((account) => productKinds.length
            ? productKinds.some((i) => i.productKind === account.productKindName)
            : true);
    }
    /**
     * Filtering accounts by other filter properties
     */
    filterByOtherProps(accounts = [], otherFilters = []) {
        return accounts.filter((account) => otherFilters.length
            ? otherFilters.every(({ key, value }) => {
                const dbsValue = getDbsValue(account === null || account === void 0 ? void 0 : account.defaultRecord, key);
                return value.some((v) => v === dbsValue);
            })
            : true);
    }
    /**
     * Disable account which is already selected at the counter party selector
     */
    setDisabledAccount(form) {
        if (form === null || form === void 0 ? void 0 : form.get(this.peerFieldName)) {
            this.disabledAccount = form.get(this.peerFieldName).value;
            form.get(this.peerFieldName).valueChanges
                .pipe(takeUntil(this.destroy$))
                .subscribe((acc) => {
                this.disabledAccount = acc;
                this.setPaymentConfig(acc);
            });
        }
    }
    setPaymentConfig(acc) {
        if (this.config.name === CounterPartyFields.counterPartyAccountGroup &&
            this.form.get(PaymentBaseFields.counterparty)) {
            const role = acc.productKindName === ProductKinds.connectedAccounts
                ? 'DEBTOR'
                : 'CREDITOR';
            this.form.get(PaymentBaseFields.counterparty).patchValue({
                role,
            });
        }
    }
    setTouched(isTouched = true) {
        this.touched = isTouched;
        if (isTouched) {
            this.group.markAllAsTouched();
        }
        this.cd.detectChanges();
    }
    /**
     * Return paymentType regarding to from-to account combination
     */
    pickPaymentType() {
        var _a, _b;
        const initiatorKind = (_a = this.form.value.initiator) === null || _a === void 0 ? void 0 : _a.productKindName;
        const counterPartyKind = (_b = this.form.value.counterparty) === null || _b === void 0 ? void 0 : _b.productKindName;
        const { paymentTypes } = this.options.paymentTypeOptions || {};
        const { connectedAccounts } = ProductKinds;
        if (paymentTypes && initiatorKind && counterPartyKind) {
            return counterPartyKind === connectedAccounts ||
                initiatorKind === connectedAccounts
                ? paymentTypes.external
                : paymentTypes.internal;
        }
        return;
    }
    setAccountInEditMode(accounts, group, key) {
        if (accounts && (group === null || group === void 0 ? void 0 : group.value[key])) {
            const account = accounts.filter((a) => a.id === group.value[key]);
            this.selectItem(account[0]);
        }
    }
    selectAccountGroup() {
        const fieldsGroup = this.config.name === InitiatorFields.initiatorAccountGroup
            ? InitiatorFields
            : CounterPartyFields;
        return {
            [fieldsGroup.id]: [Validators.required],
            [fieldsGroup.name]: [Validators.required],
            [fieldsGroup.accountNumber]: [Validators.required],
            [CounterPartyFields.role]: [Validators.required],
            currency: [],
            schemeName: [Validators.required],
            productKindName: [Validators.required],
            accountData: [],
        };
    }
    registerFields() {
        const accountGroup = this.selectAccountGroup();
        for (const key in accountGroup) {
            if (accountGroup.hasOwnProperty(key)) {
                registerFormControl(this.group, key, accountGroup[key], [], '');
            }
        }
    }
    /**
     * Set balance and balance label to account regarding to selected balance type in config
     */
    mapBalance(account) {
        var _a, _b, _c, _d;
        const defaultBalanceType = AccountBalances.current;
        const productKindConfig = (_b = (_a = this.options) === null || _a === void 0 ? void 0 : _a.productKinds) === null || _b === void 0 ? void 0 : _b.find((config) => config.productKind === account.productKindName);
        const dbsProperty = ((_c = productKindConfig === null || productKindConfig === void 0 ? void 0 : productKindConfig.balance) === null || _c === void 0 ? void 0 : _c.apiField)
            ? productKindConfig.balance.apiField
            : defaultBalanceType;
        const balance = getDbsValue(account === null || account === void 0 ? void 0 : account.defaultRecord, dbsProperty);
        return Object.assign(Object.assign({}, account), { balance: balance, balanceLabel: (_d = productKindConfig === null || productKindConfig === void 0 ? void 0 : productKindConfig.balance) === null || _d === void 0 ? void 0 : _d.label });
    }
    ngOnDestroy() {
        triggerHook(PaymentFormFieldHooks.onDestroy, this);
        this.destroy$.next();
        this.destroy$.complete();
    }
    selectItem(account) {
        var _a;
        if (this.group && (account === null || account === void 0 ? void 0 : account.name)) {
            const { productKindName } = account;
            const { connectedAccounts } = ProductKinds;
            const isPeerConnectedAcc = ((_a = this.disabledAccount) === null || _a === void 0 ? void 0 : _a.productKindName) === connectedAccounts;
            const schemeName = productKindName === connectedAccounts ? 'EXTERNAL_ID' : 'ID';
            const role = this.config.name === CounterPartyFields.counterPartyAccountGroup &&
                isPeerConnectedAcc
                ? 'DEBTOR'
                : 'CREDITOR';
            this.group.patchValue({
                id: account.id,
                name: account.name,
                accountNumber: account.accountNumber,
                currency: account.currency,
                schemeName,
                productKindName: account.productKindName,
                role,
                accountData: account,
            });
            this.selectedAccount = Object.assign({}, account);
        }
        this.toggleDependants();
        const paymentType = this.pickPaymentType();
        if (paymentType) {
            this.form.patchValue({ paymentType });
        }
        this.group.markAsDirty();
        this.cd.detectChanges();
    }
}
/** @nocollapse */ PayordInternalAccountSelectorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordInternalAccountSelectorComponent, deps: [{ token: i0.Renderer2 }, { token: i0.ChangeDetectorRef }, { token: i1$9.ActivatedRoute }, { token: VisibilityService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PayordInternalAccountSelectorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordInternalAccountSelectorComponent, selector: "bb-payord-internal-account-selector", viewQueries: [{ propertyName: "productSelector", first: true, predicate: ["productSelector"], descendants: true }], usesInheritance: true, ngImport: i0, template: "<div\n  class=\"form-group bb-dynamic-input\"\n  [ngClass]=\"options?.cssClasses\"\n  *ngIf=\"!config?.hidden\"\n>\n  <div *ngIf=\"options?.label\" class=\"bb-label bb-block bb-block--lg\">\n    {{ options?.label }}\n  </div>\n  <section class=\"payment-from\" [formGroup]=\"group\">\n    <label class=\"bb-form-field\">\n      <bb-product-selector-ui\n        [autoClose]=\"true\"\n        [class.bb-product-selector--invalid-border]=\"\n          touched && group.invalid && !isDropdownOpen\n        \"\n        #productSelector\n      >\n        <ng-container bbDropdownToggle>\n          <div\n            *ngIf=\"selectedAccount\"\n            data-role=\"product-selector-selected-product\"\n          >\n            <bb-product-item-basic-account-ui\n              [title]=\"selectedAccount?.name\"\n              [productNumber]=\"selectedAccount?.accountNumber\"\n              [amount]=\"selectedAccount.balance\"\n              [currency]=\"selectedAccount.currency\"\n              [productNumberFormat]=\"\n                options?.productNumberFormat || accountFormat\n              \"\n              [highlight]=\"options?.highlight\"\n              [showCurrencySymbol]=\"options?.showCurrencySymbol !== false\"\n              [active]=\"false\"\n              [balanceLabel]=\"selectedAccount?.balanceLabel\"\n              i18n-balanceLabel=\"\n                Available balance\n                label@@payord-internal-account-selector.amount.available\"\n            ></bb-product-item-basic-account-ui>\n          </div>\n          <div *ngIf=\"!selectedAccount\" class=\"bb-stack\">\n            <span\n              data-role=\"item-empty-state\"\n              class=\"bb-text-support bb-product-selector__placeholder\"\n            >\n              {{ options?.placeholder }}\n            </span>\n          </div>\n        </ng-container>\n        <ng-container bbDropdownMenu>\n          <ng-container\n            *ngIf=\"{\n              internal: options?.items$ | async,\n              external: connectedAccounts$ | async\n            } as accounts\"\n          >\n            <ng-container\n              *ngIf=\"\n                accounts.internal?.length || accounts.external?.length;\n                else notFound\n              \"\n            >\n              <ng-container\n                *ngFor=\"let item of accounts.internal; let i = index\"\n              >\n                <button\n                  *ngIf=\"!disabledProductKinds.includes(item.productKindName)\"\n                  (click)=\"selectItem(item)\"\n                  [disabled]=\"\n                    item.accountNumber === disabledAccount?.accountNumber\n                  \"\n                  bbButton\n                  color=\"unstyled\"\n                  class=\"bb-product-selector__dropdown-item\"\n                  [ngClass]=\"{\n                    selected: item.id === selectedAccount?.id,\n                    'bb-text-support':\n                      item.accountNumber === disabledAccount?.accountNumber\n                  }\"\n                >\n                  <bb-product-item-basic-account-ui\n                    [title]=\"item.name\"\n                    [amount]=\"item.balance\"\n                    [productNumber]=\"item.accountNumber\"\n                    [currency]=\"item.currency\"\n                    [highlight]=\"options?.highlight\"\n                    [active]=\"false\"\n                    [class.bb-dropdown-multi-select--disabled]=\"\n                      item.accountNumber === disabledAccount?.accountNumber\n                    \"\n                    [productNumberFormat]=\"\n                      options?.productNumberFormat || accountFormat\n                    \"\n                    [showCurrencySymbol]=\"options?.showCurrencySymbol !== false\"\n                    [balanceLabel]=\"item?.balanceLabel\"\n                    i18n-balanceLabel=\"\n                      Available balance\n                      label@@payord-internal-account-selector.amount.available\"\n                  ></bb-product-item-basic-account-ui>\n                </button>\n              </ng-container>\n              <ng-container\n                *ngIf=\"\n                  disabledAccount?.productKindName !==\n                  productKinds.connectedAccounts\n                \"\n              >\n                <h4\n                  class=\"bb-subheader bb-text-support bb-block bb-block--no-margin bb-inline-stack bb-internal-account-selector__subheader\"\n                  *ngIf=\"\n                    accounts.external?.length &&\n                    options?.connectedAccountsSubHeader as subheader\n                  \"\n                  tabIndex=\"-1\"\n                >\n                  <bb-icon-ui\n                    name=\"insert-link\"\n                    cropped\n                    class=\"bb-inline-stack__item--spacing-sm\"\n                  ></bb-icon-ui>\n                  <span>{{ subheader }}</span>\n                </h4>\n                <button\n                  *ngFor=\"let item of accounts.external\"\n                  (click)=\"selectItem(item)\"\n                  [disabled]=\"\n                    item.accountNumber === disabledAccount?.accountNumber\n                  \"\n                  bbButton\n                  color=\"unstyled\"\n                  class=\"bb-product-selector__dropdown-item\"\n                  [ngClass]=\"{\n                    selected: item.id === selectedAccount?.id,\n                    'bb-text-support':\n                      item.accountNumber === disabledAccount?.accountNumber\n                  }\"\n                >\n                  <bb-product-item-basic-account-ui\n                    [title]=\"item.name\"\n                    [productNumber]=\"item.accountNumber\"\n                    [highlight]=\"options?.highlight\"\n                    [active]=\"false\"\n                    [class.bb-dropdown-multi-select--disabled]=\"\n                      item.accountNumber === disabledAccount?.accountNumber\n                    \"\n                    [productNumberFormat]=\"\n                      options?.productNumberFormat || accountFormat\n                    \"\n                    [showCurrencySymbol]=\"options?.showCurrencySymbol !== false\"\n                  ></bb-product-item-basic-account-ui>\n                </button>\n              </ng-container>\n            </ng-container>\n          </ng-container>\n          <ng-template #notFound>\n            <bb-empty-state-ui\n              title=\"No items found\"\n              [showIcon]=\"false\"\n            ></bb-empty-state-ui>\n          </ng-template>\n        </ng-container>\n      </bb-product-selector-ui>\n    </label>\n\n    <ng-container *ngIf=\"!selectedAccount\">\n      <bb-payord-validation-message\n        [id]=\"validationId\"\n        [control]=\"group?.controls['name']\"\n        [validationMessages]=\"options?.validationMessages\"\n        [label]=\"options?.label\"\n      ></bb-payord-validation-message>\n    </ng-container>\n  </section>\n</div>\n", components: [{ type: i3$1.ProductSelectorComponent, selector: "bb-product-selector-ui", inputs: ["autoClose", "position", "container"] }, { type: i4$2.ProductItemBasicAccountComponent, selector: "bb-product-item-basic-account-ui", inputs: ["title", "productNumber", "productNumberFormat", "currency", "showCurrencySymbol", "amount", "highlight", "productDetailsInfo", "active", "favorite", "favoriteIconColor", "selected", "type", "status", "balanceLabel", "bankBranchCode"] }, { type: i2$3.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i6.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }, { type: ValidationMessageComponent, selector: "bb-payord-validation-message", inputs: ["control", "validationMessages", "label", "id", "hideGeneric"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i5.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i7.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "async": i4.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordInternalAccountSelectorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payord-internal-account-selector',
                    templateUrl: 'payord-internal-account-selector.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }, { type: i1$9.ActivatedRoute }, { type: VisibilityService }]; }, propDecorators: { productSelector: [{
                type: ViewChild,
                args: ['productSelector']
            }] } });

class PayordCompactAmountComponent {
    constructor() {
        this.remittanceInfoFields = RemittanceInfoFields;
        this.initialAmount = {
            [RemittanceInfoFields.amount]: '',
            [RemittanceInfoFields.currency]: '',
        };
        this.id = new Date().getTime();
    }
    ngOnInit() {
        var _a, _b, _c, _d, _e, _f;
        this.amountGroup = registerFormGroup(this.group, this.config.name, {
            [RemittanceInfoFields.amount]: [
                ((_a = this.options.defaultValue) === null || _a === void 0 ? void 0 : _a.amount) || this.initialAmount.amount,
            ],
            [RemittanceInfoFields.currency]: [
                ((_b = this.options.defaultValue) === null || _b === void 0 ? void 0 : _b.currency) || this.initialAmount.currency,
            ],
        }, [Validators.required, amountValidator], this.options.asyncValidators);
        this.fromAccountProduct$ = (_d = ((_c = this.group.parent) === null || _c === void 0 ? void 0 : _c.get(PaymentBaseFields.initiator))) === null || _d === void 0 ? void 0 : _d.valueChanges.pipe(startWith((_f = (_e = this.group.parent) === null || _e === void 0 ? void 0 : _e.get(PaymentBaseFields.initiator)) === null || _f === void 0 ? void 0 : _f.value), tap((initiator) => {
            var _a;
            return (_a = this.amountGroup
                .get(RemittanceInfoFields.currency)) === null || _a === void 0 ? void 0 : _a.patchValue((initiator === null || initiator === void 0 ? void 0 : initiator.currency) || this.options.currency);
        }));
        triggerHook(PaymentFormFieldHooks.onInit, this);
    }
    ngOnDestroy() {
        triggerHook(PaymentFormFieldHooks.onDestroy, this);
    }
}
/** @nocollapse */ PayordCompactAmountComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordCompactAmountComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PayordCompactAmountComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordCompactAmountComponent, selector: "bb-payord-compact-amount-ui", ngImport: i0, template: "<section\n  class=\"form-group bb-dynamic-input\"\n  [formGroup]=\"amountGroup\"\n  [ngClass]=\"options?.cssClasses\"\n  *ngIf=\"!config?.hidden\"\n  [class.was-validated]=\"\n    group.get(config.name)?.invalid && group.get(config.name)?.touched\n  \"\n>\n  <label [attr.for]=\"'bb-compact-amount-' + id\" *ngIf=\"options?.label\">{{\n    options?.label\n  }}</label>\n  <div class=\"position-relative\">\n    <bb-amount-input-ui\n      [id]=\"'bb-compact-amount-' + id\"\n      [formControlName]=\"remittanceInfoFields.amount\"\n      [mapCurrency]=\"options?.showCurrencySymbol !== false\"\n      [currency]=\"(fromAccountProduct$ | async)?.currency || options?.currency\"\n      [placeholder]=\"options?.placeholder || '0.00'\"\n      [required]=\"true\"\n      [wrapperClasses]=\"\n        options.wrapperClasses || 'bb-amount-input__field--large'\n      \"\n      [autoDecimal]=\"options.autoDecimal\"\n      [maxLength]=\"options?.maxLength\"\n      [aria-describedby]=\"'compact-amount-error-message-' + id\"\n    ></bb-amount-input-ui>\n  </div>\n  <bb-payord-validation-message\n    [id]=\"'compact-amount-error-message-' + id\"\n    [control]=\"group.get(config.name)\"\n    [validationMessages]=\"options?.validationMessages\"\n    [label]=\"options?.label || 'Amount'\"\n  ></bb-payord-validation-message>\n</section>\n", components: [{ type: i1$a.AmountInputComponent, selector: "bb-amount-input-ui", inputs: ["placeholder", "maxLength", "wrapperClasses", "mapCurrency", "currency", "autoDecimal"] }, { type: ValidationMessageComponent, selector: "bb-payord-validation-message", inputs: ["control", "validationMessages", "label", "id", "hideGeneric"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i5.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }], pipes: { "async": i4.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordCompactAmountComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payord-compact-amount-ui',
                    templateUrl: './payord-compact-amount.component.html',
                }]
        }] });

class PayordButtonGroupComponent {
    constructor(modalService) {
        this.modalService = modalService;
        this.confirmModalClose$ = new BehaviorSubject(false);
        this.paymentMode = PaymentMode;
    }
    ngOnInit() {
        var _a;
        this.initialFormValue = (_a = this.group) === null || _a === void 0 ? void 0 : _a.value;
    }
    onCancel() {
        if (isTemplateFormDirty(this.group.value, this.initialFormValue)) {
            this.confirmModalClose$.next(true);
        }
        else {
            this.closeModal();
        }
    }
    closeModal() {
        var _a;
        this.confirmModalClose$.next(false);
        (_a = this.modalService) === null || _a === void 0 ? void 0 : _a.closeModal();
    }
}
/** @nocollapse */ PayordButtonGroupComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordButtonGroupComponent, deps: [{ token: i1.RoutableModalService, optional: true }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PayordButtonGroupComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordButtonGroupComponent, selector: "bb-payord-button-group", ngImport: i0, template: "<div\n  class=\"btn-container bb-dynamic-input bb-button-bar\"\n  [ngClass]=\"{ 'bb-button-bar--reverse': !options?.isModalView }\"\n>\n  <bb-load-button-ui\n    type=\"submit\"\n    class=\"bb-button-bar__button\"\n    [isLoading]=\"options?.submitting$ | async\"\n  >\n    <ng-container\n      *ngIf=\"!options?.isTemplateMode\"\n      i18n=\"@@dynamic-form-field-button-group.continue.label\"\n      >Continue</ng-container\n    >\n    <ng-container\n      *ngIf=\"options?.isTemplateMode\"\n      i18n=\"@@dynamic-form-field-button-group.save.label\"\n      >Save</ng-container\n    >\n  </bb-load-button-ui>\n  <button\n    *ngIf=\"\n      options?.isModalView || options?.paymentMode === paymentMode.COPY_PAYMENT\n    \"\n    bbButton\n    class=\"bb-button-bar__button\"\n    color=\"secondary\"\n    data-role=\"cancel-button\"\n    (click)=\"onCancel()\"\n    [disabled]=\"options?.submitting$ | async\"\n    i18n=\"@@dynamic-form-field-button-group-cancel-label\"\n  >\n    Cancel\n  </button>\n  <button\n    *ngIf=\"\n      options?.paymentMode !== paymentMode.EDIT_TEMPLATE &&\n      options?.paymentMode !== paymentMode.COPY_PAYMENT\n    \"\n    class=\"bb-button-bar__button bb-button-bar__button--across\"\n    bbButton\n    type=\"button\"\n    color=\"link\"\n    (click)=\"options?.reset()\"\n    [disabled]=\"options?.submitting$ | async\"\n  >\n    <ng-container i18n=\"@@dynamic-form-field-button-group.clear.label\"\n      >Clear all fields</ng-container\n    >\n  </button>\n</div>\n\n<bb-modal-ui\n  [isOpen]=\"confirmModalClose$.value\"\n  (cancel)=\"confirmModalClose$.next(false)\"\n  (confirm)=\"closeModal()\"\n  data-role=\"close-discard-modal-dialog\"\n>\n  <bb-modal-header-ui\n    title=\"Discard entered data?\"\n    i18n-title=\"omni-payment-template-discard-modal-title\"\n  ></bb-modal-header-ui>\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody>\n      <ng-container i18n=\"@@omni-payment-template-discard-modal-content\">\n        Are you sure to exit and discard all changes? Entered data will be lost.\n      </ng-container>\n    </ng-template>\n  </bb-modal-body-ui>\n\n  <bb-modal-footer-ui #modalFooterRef>\n    <ng-template bbCustomModalFooter>\n      <div class=\"bb-button-bar\">\n        <button\n          bbButton\n          color=\"danger\"\n          class=\"bb-button-bar__button\"\n          (click)=\"closeModal()\"\n          data-role=\"discard-action-btn\"\n          i18n=\"@@omni-payment-template-discard-modal-discard-btn\"\n        >\n          Discard\n        </button>\n\n        <button\n          bbButton\n          class=\"bb-button-bar__button\"\n          color=\"link\"\n          (click)=\"confirmModalClose$.next(false)\"\n          data-role=\"cancel-action-btn\"\n          i18n=\"@@omni-payment-template-discard-modal-cancel-btn\"\n        >\n          Cancel\n        </button>\n      </div>\n    </ng-template>\n  </bb-modal-footer-ui>\n</bb-modal-ui>\n", components: [{ type: i2$6.LoadButtonComponent, selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }, { type: i3$2.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i3$2.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i3$2.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: i3$2.ModalFooterComponent, selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }], directives: [{ type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i7.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i3$2.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i3$2.CustomModalFooterDirective, selector: "ng-template[bbCustomModalFooter]" }], pipes: { "async": i4.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordButtonGroupComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payord-button-group',
                    templateUrl: './payord-button-group.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.RoutableModalService, decorators: [{
                    type: Optional
                }] }]; } });

class PayordScheduleHeaderComponent {
    constructor() {
        this.minOccurrences = 2;
        this.endType = ScheduleEndType;
        this.frequencies = Frequencies;
    }
    isToday(startDate) {
        const today = getRelativeDate();
        const date = getDateOnly(new Date(startDate));
        return date === today;
    }
    ngOnInit() {
        var _a;
        this.dateFormat = ((_a = this.options) === null || _a === void 0 ? void 0 : _a.dateFormat) || 'd MMM y';
        triggerHook(PaymentFormFieldHooks.onInit, this);
    }
    ngOnDestroy() {
        triggerHook(PaymentFormFieldHooks.onDestroy, this);
    }
}
/** @nocollapse */ PayordScheduleHeaderComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordScheduleHeaderComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PayordScheduleHeaderComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordScheduleHeaderComponent, selector: "bb-payord-schedule-header", ngImport: i0, template: "<div\n  class=\"bb-dynamic-input bb-schedule-header bb-fieldset__heading\"\n  *ngIf=\"!config?.hidden\"\n  [ngClass]=\"options?.cssClasses\"\n>\n  <ng-container\n    *ngIf=\"(group?.value?.frequency?.value || group?.value?.frequency) as freq\"\n  >\n    <span>\n      <ng-container *ngIf=\"options?.label\">{{options?.label}}</ng-container>\n      <ng-container\n        *ngIf=\"!options?.label\"\n        i18n=\"@@dynamic-form-field-schedule-header.default-title\"\n        >Schedule</ng-container\n      >\n    </span>\n    <span class=\"bb-schedule-header__text\">\n      <span> - </span>\n      <span i18n=\"@@dynamic-form-field-schedule-header.frequency\"\n        >{ freq, select, DAILY {Daily} WEEKLY {Weekly} BIWEEKLY {Bi-Weekly}\n        MONTHLY {Monthly} QUARTERLY {Quarterly} YEARLY {Annually} }</span\n      >\n      <ng-container *ngIf=\"freq === frequencies.ONCE\">\n        <span>\n          {{ group?.value?.startDate | date: dateFormat }}\n          <span\n            class=\"bb-schedule-header__relative-text\"\n            *ngIf=\"isToday(group?.value?.startDate)\"\n            i18n=\"@@dynamic-form-field-schedule-header.today\"\n          >\n            (Today)\n          </span>\n        </span>\n      </ng-container>\n\n      <ng-container *ngIf=\"freq !== frequencies.ONCE\">\n        <span class=\"bb-schedule-header__sepatator\">,</span>\n        <span i18n=\"@@dynamic-form-field-schedule-header-from.label\">\n          from\n        </span>\n        <span>{{group?.value?.startDate | date: dateFormat}}</span>\n        <ng-container\n          *ngIf=\"group?.value?.endType === endType.ON && group?.value?.endDate\"\n        >\n          <span> - </span>\n          <span> {{group?.value?.endDate | date: dateFormat}}</span>\n        </ng-container>\n        <ng-container\n          *ngIf=\"group?.value?.endType === endType.AFTER && group?.value?.repeat\"\n        >\n          <span>, </span> <span> {{ group?.value?.repeat }} </span>\n          <span i18n=\"@@dynamic-form-field-schedule-header-occurances.label\">\n            times</span\n          >\n        </ng-container>\n      </ng-container>\n    </span>\n  </ng-container>\n  <hr class=\"bb-schedule-header__sepatator\" />\n</div>\n", directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], pipes: { "date": i4.DatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordScheduleHeaderComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payord-schedule-header',
                    templateUrl: './payord-schedule-header.html',
                }]
        }] });

class PayordSanctionedCountrySelectorComponent extends ActivatableFormField {
    constructor(visibilityService) {
        super(visibilityService);
        this.visibilityService = visibilityService;
        this.countries = [];
        this.inputFormSettings = {};
        this.sanctionedCountries = {};
    }
    ngOnInit() {
        this.defaultCountry = this.options.defaultCountry || '';
        this.parentForm = getParentForm(this.group);
        this.control = registerFormControl(this.group, this.config.name, this.options.validators, this.options.asyncValidators, this.defaultCountry, this.config);
        this.inputFormSettingControl =
            this.parentForm.get(PaymentOptionFields.inputFormFromSettings) ||
                registerFormControl(this.parentForm, PaymentOptionFields.inputFormFromSettings);
        this.defaultBankCodeSettingControl =
            this.parentForm.get(HiddenFields.defaultBankCodeSetting) ||
                registerFormControl(this.parentForm, HiddenFields.defaultBankCodeSetting);
        this.defaultCountryControl = registerFormControl(this.parentForm, HiddenFields.sanctionedCountries);
        this.sanctionedCountriesControl = registerFormControl(this.parentForm, HiddenFields.sanctionedCountries);
        if (this.options.items$) {
            this.httpSubscription = this.options.items$
                .pipe(map((items) => this.mapCountries(items)), tap((countryCodes) => {
                var _a;
                this.countries = this.options.isWizardMode
                    ? countryCodes
                    : countryCodes.filter((country) => country !== this.defaultCountry);
                this.sanctionedCountriesControl.setValue(this.countries);
                if (!this.control.value &&
                    this.defaultCountry &&
                    ((_a = this.parentForm.get('isEditMode')) === null || _a === void 0 ? void 0 : _a.value)) {
                    this.control.setValue(this.defaultCountry);
                }
            }))
                .subscribe();
        }
        this.formSubscription = this.control.valueChanges.subscribe((value) => this.onChange(value));
        this.counterpartyIdControl = (this.parentForm.get([
            PaymentBaseFields.counterparty,
            CounterPartyFields.id,
        ]));
        this.toggleDependants();
        triggerHook(PaymentFormFieldHooks.onInit, this);
    }
    mapCountries(sanctionedCountries) {
        return sanctionedCountries.map((item) => {
            if (item.country === this.control.value) {
                this.inputFormSettingControl.reset();
                this.inputFormSettingControl.setValue(item);
            }
            if (item.inputFormSettings) {
                this.sanctionedCountries[item.country] = item;
                this.inputFormSettings[item.country] = item.inputFormSettings;
            }
            if (item.isDefault) {
                this.defaultCountry = item.country;
                this.defaultCountryControl.setValue(item.country);
                if (this.inputFormSettings[item.country]) {
                    this.inputFormSettings[item.country].forEach((setting) => {
                        if (setting.key === 'bank-code') {
                            this.defaultBankCodeSettingControl.setValue(setting);
                        }
                    });
                }
            }
            return item.country;
        });
    }
    onChange(val) {
        this.inputFormSettingControl.setValue(this.sanctionedCountries[val]);
        this.toggleDependants();
    }
    resetAddressGroup() {
        const addressGroup = ((this.control && this.control.parent ? this.control.parent : null));
        if (isAddressTruthy(addressGroup.value)) {
            for (const controlName in addressGroup.controls) {
                if (controlName !== 'country') {
                    addressGroup.controls[controlName].reset();
                }
            }
        }
    }
    ngOnDestroy() {
        if (this.formSubscription) {
            this.formSubscription.unsubscribe();
        }
        if (this.httpSubscription) {
            this.httpSubscription.unsubscribe();
        }
        triggerHook(PaymentFormFieldHooks.onDestroy, this);
    }
    resetPurposeOfPayment() {
        const popControl = this.parentForm.get([
            PaymentBaseFields.remittanceInfo,
            RemittanceInfoFields.purposeOfPayment,
        ]);
        if (popControl === null || popControl === void 0 ? void 0 : popControl.value) {
            popControl.reset();
        }
    }
    selectItem(country) {
        this.defaultCountry = country;
        this.control.setValue(country);
        this.resetAddressGroup();
        this.resetPurposeOfPayment();
    }
}
/** @nocollapse */ PayordSanctionedCountrySelectorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordSanctionedCountrySelectorComponent, deps: [{ token: VisibilityService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PayordSanctionedCountrySelectorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordSanctionedCountrySelectorComponent, selector: "bb-payord-sanctioned-country-selector", usesInheritance: true, ngImport: i0, template: "<div\n  class=\"bb-dynamic-input form-group\"\n  *ngIf=\"!config?.hidden\"\n  [formGroup]=\"group\"\n  [ngClass]=\"options?.cssClasses\"\n>\n  <bb-select-country-dropdown\n    [formControlName]=\"config?.name\"\n    [countries]=\"countries\"\n    [label]=\"options?.label\"\n    [helperText]=\"options?.helperText\"\n    [placeholder]=\"options?.placeholder\"\n    [searchPlaceholder]=\"options?.searchPlaceholder\"\n    [dropdownIcon]=\"options?.dropdownIcon\"\n    [selectedCountry]=\"control.value\"\n    [isClosedPayment]=\"\n      parentForm.get('isClosedPayment')?.value || counterpartyIdControl?.value\n    \"\n    (selectCountry)=\"selectItem($event)\"\n    data-role=\"sanctioned-country-selector-dropdown\"\n  ></bb-select-country-dropdown>\n\n  <bb-payord-validation-message\n    [control]=\"group?.controls[config.name]\"\n    [validationMessages]=\"options?.validationMessages\"\n    [label]=\"options?.label\"\n  ></bb-payord-validation-message>\n\n  <div\n    class=\"bb-dynamic-input__desc bb-text-support bb-subtitle\"\n    [attr.aria-hidden]=\"!options?.description\"\n    [hidden]=\"!options?.description\"\n    [textContent]=\"options?.description || ''\"\n    #descElem\n  ></div>\n</div>\n", components: [{ type: i1.ӨSelectCountryDropdownComponent, selector: "bb-select-country-dropdown", inputs: ["countries", "selectedCountry", "helperText", "placeholder", "label", "searchPlaceholder", "dropdownIcon", "isClosedPayment"], outputs: ["selectCountry"] }, { type: ValidationMessageComponent, selector: "bb-payord-validation-message", inputs: ["control", "validationMessages", "label", "id", "hideGeneric"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordSanctionedCountrySelectorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payord-sanctioned-country-selector',
                    templateUrl: 'payord-sanctioned-country-selector.component.html',
                }]
        }], ctorParameters: function () { return [{ type: VisibilityService }]; } });

class PayordChargeBearerComponent extends ActivatableFormField {
    constructor(visibilityService) {
        super(visibilityService);
        this.visibilityService = visibilityService;
        this.chargeBearerOptionsSubject$ = new BehaviorSubject([]);
        this.chargeBearerOptions$ = this.chargeBearerOptionsSubject$.asObservable();
    }
    ngOnInit() {
        this.control = registerFormControl(this.group, this.config.name, this.options.validators, this.options.asyncValidators, this.options.defaultValue, this.config);
        this.chargeBearerOptionsControl = registerFormControl(this.group, PaymentOptionFields.chargeBearerOptions);
        if (this.chargeBearerOptionsControl) {
            this.subscription = this.chargeBearerOptionsControl.valueChanges
                .pipe(startWith(this.chargeBearerOptionsControl.value), tap((chargeBearerOptions) => {
                chargeBearerOptions = chargeBearerOptions || [];
                this.control.setValidators(chargeBearerOptions.length ? Validators.required : null);
                this.control.updateValueAndValidity();
                if (this.control.value &&
                    chargeBearerOptions.length &&
                    chargeBearerOptions.indexOf(this.control.value) === -1 &&
                    this.options.templateModeType !== TemplateModeType.EDIT) {
                    this.control.reset();
                }
                this.chargeBearerOptionsSubject$.next(chargeBearerOptions);
            }))
                .subscribe();
        }
        this.toggleDependants();
        triggerHook(PaymentFormFieldHooks.onInit, this);
    }
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
        triggerHook(PaymentFormFieldHooks.onDestroy, this);
    }
}
/** @nocollapse */ PayordChargeBearerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordChargeBearerComponent, deps: [{ token: VisibilityService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PayordChargeBearerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordChargeBearerComponent, selector: "bb-charge-bearer", usesInheritance: true, ngImport: i0, template: "<ng-container *ngIf=\"chargeBearerOptions$ | async as chargeBearerOptions\">\n  <ng-container *ngIf=\"chargeBearerOptions.length\">\n    <div\n      *ngIf=\"!config?.hidden\"\n      class=\"bb-dynamic-input form-group charge-bearer-options\"\n      [formGroup]=\"group\"\n      [ngClass]=\"options?.cssClasses\"\n    >\n      <div class=\"bb-label\" [textContent]=\"options?.label || ''\"></div>\n      <span\n        class=\"bb-dynamic-input__helper-text bb-text-support\"\n        *ngIf=\"options?.helperText\"\n        [id]=\"inputEl?.id + '__desc'\"\n        [textContent]=\"options?.helperText\"\n      >\n      </span>\n\n      <bb-input-radio-group-ui\n        [label]=\"options?.label\"\n        [formControlName]=\"config?.name\"\n        (change)=\"toggleDependants()\"\n        [horizontal]=\"options?.horizontal\"\n        [preselect]=\"options?.preselect\"\n        data-role=\"charge-bearer-radio-group\"\n        [bbDynamicAriaAttribute]=\"{\n          charge_bearer__error: control?.touched && control?.invalid,\n          charge_bearer__desc: options?.description\n        }\"\n        [prependInputId]=\"false\"\n        inputSelector=\".bb-input-radio-group\"\n        #inputEl\n      >\n        <bb-input-radio-ui\n          *ngFor=\"let option of chargeBearerOptions\"\n          [value]=\"option\"\n          [labelTemplate]=\"paymentOptionTmpl\"\n          [labelTemplateContext]=\"option\"\n          [attr.data-role]=\"option\"\n        ></bb-input-radio-ui>\n      </bb-input-radio-group-ui>\n      <bb-payord-validation-message\n        [control]=\"group?.controls[config.name]\"\n        [validationMessages]=\"options?.validationMessages\"\n        [label]=\"options?.label\"\n        [id]=\"'charge_bearer__error'\"\n      ></bb-payord-validation-message>\n\n      <div\n        class=\"bb-dynamic-input__desc bb-text-support bb-subtitle\"\n        [attr.aria-hidden]=\"!options?.description\"\n        [hidden]=\"!options?.description\"\n        [id]=\"'charge_bearer__desc'\"\n        [textContent]=\"options?.description || ''\"\n        #descElem\n      ></div>\n    </div>\n  </ng-container>\n</ng-container>\n\n<ng-template let-context=\"labelTemplateContext\" #paymentOptionTmpl>\n  <ng-container [ngSwitch]=\"context\">\n    <div class=\"font-weight-normal\" *ngSwitchCase=\"'OUR'\">\n      I pay all fees (OUR)\n      <div *ngIf=\"control?.value === 'OUR'\" class=\"bb-text-support bb-subtitle\">\n        The beneficiary receives the payment amount in full. You pay the fees\n        charged by our bank initially (fees will be charged separately). You\n        will also pay the fees charged by the payee\u2019s bank, including any\n        correspondent/intermediary fees (this could be days or weeks after you\n        have made the payment).\n      </div>\n    </div>\n    <div class=\"font-weight-normal\" *ngSwitchCase=\"'BEN'\">\n      <div>Beneficiary pays all fees (BEN)</div>\n      <div *ngIf=\"control?.value === 'BEN'\" class=\"bb-text-support bb-subtitle\">\n        The beneficiary pays any fees charged by our bank and/or the recipient\n        bank (including any correspondent/intermediary fees). The beneficiary\n        will typically receive the payment minus the transfer charges.\n      </div>\n    </div>\n    <div class=\"font-weight-normal\" *ngSwitchCase=\"'SHA'\">\n      <div>Fees are shared (SHA)</div>\n      <div *ngIf=\"control?.value === 'SHA'\" class=\"bb-text-support bb-subtitle\">\n        You pay the fees charged by our bank (fees will be charged separately).\n        The beneficiary will pay all fees charged by their bank, including any\n        correspondent/intermediary fees.\n      </div>\n    </div>\n  </ng-container>\n</ng-template>\n", components: [{ type: i2$2.InputRadioGroupComponent, selector: "bb-input-radio-group-ui", inputs: ["horizontal", "preselect", "name", "verticalAlign"] }, { type: i2$2.InputRadioComponent, selector: "bb-input-radio-ui", inputs: ["labelTemplate", "labelTemplateContext", "value", "label", "aria-label", "aria-labelledby", "aria-describedby", "role", "aria-activedescendant", "aria-expanded", "aria-invalid", "aria-owns", "disabled"] }, { type: ValidationMessageComponent, selector: "bb-payord-validation-message", inputs: ["control", "validationMessages", "label", "id", "hideGeneric"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: DynamicAriaAttributeDirective, selector: "[bbDynamicAriaAttribute]", inputs: ["bbDynamicAriaAttribute", "prependInputId", "inputSelector", "ariaAttributeName"] }, { type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i4.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i4.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }], pipes: { "async": i4.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordChargeBearerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-charge-bearer',
                    templateUrl: './charge-bearer.component.html',
                }]
        }], ctorParameters: function () { return [{ type: VisibilityService }]; } });

const SCROLL_SCHEDULER = typeof requestAnimationFrame !== 'undefined'
    ? animationFrameScheduler
    : asapScheduler;
class MultiPaymentCardComponent {
    constructor(renderer, ngZone, viewportRuler, changeDetector) {
        this.renderer = renderer;
        this.ngZone = ngZone;
        this.viewportRuler = viewportRuler;
        this.changeDetector = changeDetector;
        this.fieldOptions = {};
        this.count = new EventEmitter();
        this.search = new EventEmitter();
        this.cardConfig = [
            {
                name: 'counterpartyName',
                validators: [],
            },
            {
                name: 'counterpartyAccountNumber',
                validators: [],
            },
            {
                name: 'id',
                validators: [],
            },
            { name: 'bankBranchCode' },
            { name: 'accountType' },
            { name: 'balance' },
            { name: 'currency' },
            { name: 'description', validators: [] },
            {
                name: 'amount',
                validators: [],
            },
        ];
        this.hostRef = this;
        this.viewportItems = [];
        this.destroy$ = new Subject();
        this._items = [];
        this.visibleItemsInViewport = 0;
        this.bufferedItems = 5;
        this.visibleViewport = 0;
        this.firstRenderedItemIndex = 0;
        this.accounts = [];
        this.defaultConfig = {
            counterpartyName: {
                label: '',
                validationMessageLabel: $localize `:@@multipayment-card.account.validation-message-label:Account`,
                placeholder: '',
                dropdownIcon: 'toggle-down',
                ariaLabel: $localize `:@@multipayment-card.counterparty-name.aria-label:Toggle beneficiary list`,
            },
            amount: {
                label: $localize `:@@multipayment-card.amount.label:Amount`,
                validationMessageLabel: $localize `:@@multipayment-card.amount.validation-message-label:Amount`,
                currency: 'USD',
                maxLength: 10,
                placeholder: '0.00',
            },
            description: {
                placeholder: $localize `:@@multipayment-card.description.placeholder:Enter text...`,
                minLength: 3,
                maxLength: 140,
            },
        };
        this.lastBlur = {
            timeoutId: 0,
            itemIndex: -1,
        };
    }
    ngOnInit() {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        this.fieldOptions = {
            counterpartyName: Object.assign(Object.assign({}, this.defaultConfig.counterpartyName), (_b = (_a = this.options) === null || _a === void 0 ? void 0 : _a.fieldsConfig) === null || _b === void 0 ? void 0 : _b.counterpartyName),
            amount: Object.assign(Object.assign({}, this.defaultConfig.amount), (_d = (_c = this.options) === null || _c === void 0 ? void 0 : _c.fieldsConfig) === null || _d === void 0 ? void 0 : _d.amount),
            description: Object.assign(Object.assign({}, this.defaultConfig.description), (_f = (_e = this.options) === null || _e === void 0 ? void 0 : _e.fieldsConfig) === null || _f === void 0 ? void 0 : _f.description),
        };
        this._addValidators();
        this.options.helperText = parseString(((_g = this.options) === null || _g === void 0 ? void 0 : _g.helperText) || '', (_h = this.options) === null || _h === void 0 ? void 0 : _h.maximumAllowedPayments);
        this.paymentArrayControl = registerFormArray(this.group, this.config.name, this.options.validators);
        const controls = this.paymentArrayControl.controls;
        controls.forEach((control) => this.setupItem(control));
        const len = Math.min(controls.length, this.bufferedItems * 2);
        for (let i = 0; i < len; i++) {
            this.addRenderedItem(controls[i], i);
        }
        this.scrollableElement = this.config.options.containerRef.nativeElement;
        this.paymentArrayControl.valueChanges
            .pipe(takeUntil(this.destroy$))
            .subscribe(() => {
            while (this.paymentArrayControl.length > this._items.length) {
                const currentIndex = this._items.length;
                const control = this.paymentArrayControl.at(currentIndex);
                this.setupItem(control);
                this.addRenderedItem(control, currentIndex);
            }
            this.onScrollChanged();
        });
        this.viewportRuler
            .change()
            .pipe(startWith(null), takeUntil(this.destroy$))
            .subscribe(() => {
            this.updateViewport();
            this.onScrollChanged();
        });
        this.ngZone.runOutsideAngular(() => {
            fromEvent(this.scrollableElement, 'scroll')
                .pipe(startWith(null), takeUntil(this.destroy$), auditTime(0, SCROLL_SCHEDULER))
                .subscribe(() => this.onScrollChanged());
        });
    }
    ngOnDestroy() {
        this.accounts.forEach((account) => account.search$.complete());
        this.destroy$.next();
        this.destroy$.complete();
    }
    addAccount() {
        this.setupItem();
        addControlToFormArray(this.paymentArrayControl, this.cardConfig);
        const currentIndex = this.paymentArrayControl.length - 1;
        const control = this.paymentArrayControl.at(currentIndex);
        this.addRenderedItem(control, currentIndex);
        this.count.emit(this.paymentArrayControl.length);
        this.onScrollChanged();
    }
    removeAccount(index) {
        if (this.options.paymentIdList[index]) {
            this.config.options
                .deletePayment(index)
                .pipe(take(1))
                .subscribe(() => {
                this.removeAccountAt(index);
            });
        }
        else {
            this.removeAccountAt(index);
        }
    }
    /**
     * will return form with given index in form Array
     *
     * @param index - form array index
     */
    getForm(index) {
        return this.paymentArrayControl.at(index);
    }
    /**
     *  method to get the form details.
     *
     * @param index form array index
     * @param name form field
     */
    getControl(index, name) {
        return this.paymentArrayControl.at(index).get(name);
    }
    /**
     * patch value on selecting account
     *
     * @param event -  the selected data
     * @param index - form Array index
     */
    onSelectAccount(event, index) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        (_a = this.getControl(index, 'id')) === null || _a === void 0 ? void 0 : _a.patchValue(event.id, { emitEvent: false });
        (_b = this.getControl(index, 'counterpartyName')) === null || _b === void 0 ? void 0 : _b.patchValue(event.name);
        (_c = this.getControl(index, 'counterpartyAccountNumber')) === null || _c === void 0 ? void 0 : _c.patchValue(event.accountNumber, { emitEvent: false });
        (_d = this.getControl(index, 'bankBranchCode')) === null || _d === void 0 ? void 0 : _d.patchValue(event.bankBranchCode, {
            emitEvent: false,
        });
        (_e = this.getControl(index, 'accountType')) === null || _e === void 0 ? void 0 : _e.patchValue(event.accountType, {
            emitEvent: false,
        });
        (_f = this.getControl(index, 'balance')) === null || _f === void 0 ? void 0 : _f.patchValue(event.balance, {
            emitEvent: false,
        });
        (_g = this.getControl(index, 'currency')) === null || _g === void 0 ? void 0 : _g.patchValue(event.currency, {
            emitEvent: false,
        });
        (_h = this.getControl(index, 'counterpartyName')) === null || _h === void 0 ? void 0 : _h.markAllAsTouched();
        (_j = this.getControl(index, 'counterpartyName')) === null || _j === void 0 ? void 0 : _j.markAsDirty();
        (_k = this.getControl(index, 'counterpartyName')) === null || _k === void 0 ? void 0 : _k.updateValueAndValidity();
        (_l = this.getControl(index, 'counterpartyAccountNumber')) === null || _l === void 0 ? void 0 : _l.updateValueAndValidity();
        this.cardBlur(index);
    }
    /**
     * Search query will emit search on account selector
     *
     * @param query
     */
    onSearch(index, query) {
        this.accounts[index].search$.next(query);
        this.search.emit(query);
    }
    openDescription(index) {
        var _a;
        this._items[index].expanded = true;
        (_a = this.getControl(index, 'description')) === null || _a === void 0 ? void 0 : _a.patchValue('', { onlySelf: true });
        this.onScrollChanged();
    }
    isExpanded(index) {
        return Boolean(this._items[index] && this._items[index].expanded);
    }
    /**
     * will emit call the blur hook if any
     *
     * @param index - form index
     */
    cardBlur(index) {
        this.lastBlur.itemIndex = index;
        this.ngZone.runOutsideAngular(() => {
            this.lastBlur.timeoutId = setTimeout(() => {
                const form = this.getForm(index);
                if (form.dirty && form.valid && this.config.options.paymentBlur) {
                    const formValue = form.value;
                    const payment = {
                        creditDebitIndicator: CreditDebitMixedIndicator.CREDIT,
                        counterpartyArrangementId: formValue.id,
                        counterpartyName: formValue.counterpartyName,
                        counterpartyAccountNumber: formValue.counterpartyAccountNumber,
                        counterpartyBankBranchCode: formValue.bankBranchCode,
                        instructedAmount: {
                            amount: formValue.amount,
                            currencyCode: formValue.currency,
                        },
                        description: formValue.description,
                    };
                    this.config.options
                        .paymentBlur(payment, index)
                        .pipe(take(1))
                        .subscribe((response) => {
                        form.markAsPristine();
                        this.changeDetector.detectChanges();
                    }, (error) => {
                        if ('message' in error) {
                            form.setErrors({
                                error: { name: 'error', message: error.message },
                            });
                        }
                        this.changeDetector.detectChanges();
                    });
                }
                if (this.options && this.options.hooks && this.options.hooks.onBlur) {
                    this.options.hooks.onBlur(form);
                }
            });
        });
    }
    cardFocus(index) {
        if (this.lastBlur.itemIndex === index) {
            clearTimeout(this.lastBlur.timeoutId);
        }
    }
    deleteDescription(index) {
        var _a, _b, _c;
        if ((_a = this.getControl(index, 'description')) === null || _a === void 0 ? void 0 : _a.value) {
            (_b = this.getControl(index, 'description')) === null || _b === void 0 ? void 0 : _b.markAsDirty();
        }
        (_c = this.getControl(index, 'description')) === null || _c === void 0 ? void 0 : _c.patchValue('');
        this._items[index].expanded = false;
        this.onScrollChanged();
    }
    onDropdownOpenChange(index, isOpen) {
        this._items[index].dropdownOpen = isOpen;
    }
    isDropdownOpen(index) {
        return this._items[index].dropdownOpen;
    }
    addRenderedItem(control, index) {
        this.viewportItems.push(control);
        this.changeDetector.detectChanges();
        this.cacheItemHeight(this.content.nativeElement.children[this.content.nativeElement.children.length - 1], index);
    }
    removeAccountAt(index) {
        this.paymentArrayControl.removeAt(index);
        this._items.splice(index, 1);
        this.updateVisibleItems();
        this.updateDimensions();
        this.count.emit(this.paymentArrayControl.length);
    }
    calculateAverageItemHeight() {
        if (this._items.length === 0) {
            return 0;
        }
        return Math.ceil(this._items.reduce((prev, curr) => prev + curr.height, 0) /
            this._items.length);
    }
    cacheItemHeight(item, index) {
        const currentItemHeight = this.getElementSize(item).height;
        this._items[index].height = currentItemHeight;
    }
    firstVisibleItemIndex() {
        if (this._items.length === 0) {
            return 0;
        }
        const scrollTop = this.scrollableElement.scrollTop;
        const contentScrollPosition = Math.max(0, scrollTop - this.scroll.nativeElement.offsetTop);
        let index = 0;
        let remainingScroll = contentScrollPosition - this._items[index].height;
        while (remainingScroll > 0 && index < this._items.length) {
            index += 1;
            remainingScroll -= this._items[index].height;
        }
        return index;
    }
    invalidateVisibleItemsCache() {
        const children = this.content.nativeElement.children;
        const itemsLength = this.content.nativeElement.children.length;
        for (let i = 0; i < itemsLength; ++i) {
            const internalIndex = this.firstRenderedItemIndex + i;
            this.cacheItemHeight(children[i], internalIndex);
        }
        this.changeDetector.markForCheck();
    }
    onScrollChanged() {
        this.ngZone.runOutsideAngular(() => {
            requestAnimationFrame(() => {
                this.invalidateVisibleItemsCache();
                this.updateVisibleItems();
                this.updateDimensions();
            });
        });
    }
    updateViewport() {
        this.ngZone.runOutsideAngular(() => {
            requestAnimationFrame(() => {
                const topOffset = Math.max(0, this.scroll.nativeElement.offsetTop - this.scrollableElement.scrollTop);
                /** @TODO get bottom offset dynamically */
                const bottomOffset = 100;
                this.visibleViewport =
                    this.scrollableElement.clientHeight - topOffset - bottomOffset;
            });
        });
    }
    updateVisibleItems() {
        const averageItemHeight = this.calculateAverageItemHeight();
        if (averageItemHeight > 0) {
            this.visibleItemsInViewport = Math.round(this.visibleViewport / this.calculateAverageItemHeight());
        }
        else {
            this.visibleItemsInViewport = 0;
        }
        this.firstRenderedItemIndex = Math.max(0, this.firstVisibleItemIndex() - this.bufferedItems);
        const renderedItemsLength = Math.min(this.visibleItemsInViewport + this.bufferedItems * 2, this.paymentArrayControl.controls.length);
        this.viewportItems = this.paymentArrayControl.controls.slice(this.firstRenderedItemIndex, this.firstRenderedItemIndex + renderedItemsLength);
        this.changeDetector.markForCheck();
        this.changeDetector.detectChanges();
    }
    updateDimensions() {
        const contentHeight = this.virtualViewportHeight();
        const padding = this._items
            .slice(0, this.firstRenderedItemIndex)
            .reduce((prev, curr) => prev + curr.height, 0);
        this.renderer.setStyle(this.padding.nativeElement, 'transform', `scaleY(${contentHeight})`);
        this.renderer.setStyle(this.scroll.nativeElement, 'height', `${contentHeight}px`);
        this.renderer.setStyle(this.content.nativeElement, 'transform', `translateY(${padding}px)`);
        this.changeDetector.markForCheck();
        this.changeDetector.detectChanges();
    }
    getElementSize(element) {
        const result = element.getBoundingClientRect();
        const styles = getComputedStyle(element);
        const marginTop = parseInt(styles['margin-top'], 10) || 0;
        const marginBottom = parseInt(styles['margin-bottom'], 10) || 0;
        const marginLeft = parseInt(styles['margin-left'], 10) || 0;
        const marginRight = parseInt(styles['margin-right'], 10) || 0;
        return {
            top: result.top + marginTop,
            bottom: result.bottom + marginBottom,
            left: result.left + marginLeft,
            right: result.right + marginRight,
            width: result.width + marginLeft + marginRight,
            height: result.height + marginTop + marginBottom,
        };
    }
    virtualViewportHeight() {
        return this._items.reduce((prev, curr) => prev + curr.height, 0);
    }
    _addValidators() {
        this.cardConfig.forEach((field) => {
            const name = field.name;
            if (this.fieldOptions[name]) {
                field.validators = this.fieldOptions[name].validators;
            }
        });
    }
    setupItem(control) {
        var _a, _b;
        const expanded = control
            ? (_b = (_a = control.get('description')) === null || _a === void 0 ? void 0 : _a.value) === null || _b === void 0 ? void 0 : _b.trim()
            : false;
        this._items.push({
            height: 0,
            expanded,
            dropdownOpen: false,
        });
        this.accounts.push(this.config.options.observableAccountsFactory());
    }
}
/** @nocollapse */ MultiPaymentCardComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: MultiPaymentCardComponent, deps: [{ token: i0.Renderer2 }, { token: i0.NgZone }, { token: i1$b.ViewportRuler }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ MultiPaymentCardComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: MultiPaymentCardComponent, selector: "bb-multi-payment-card", viewQueries: [{ propertyName: "scroll", first: true, predicate: ["scroll"], descendants: true, read: ElementRef, static: true }, { propertyName: "padding", first: true, predicate: ["padding"], descendants: true, read: ElementRef, static: true }, { propertyName: "content", first: true, predicate: ["content"], descendants: true, read: ElementRef, static: true }], ngImport: i0, template: "<div\n  class=\"form-group bb-dynamic-input\"\n  [formGroup]=\"group\"\n  [ngClass]=\"options?.cssClasses\"\n>\n  <div class=\"bb-block bb-block--lg\">\n    <div *ngIf=\"options?.label\" class=\"bb-heading-3\">\n      {{ options?.label }}\n    </div>\n    <div\n      *ngIf=\"options?.helperText\"\n      class=\"bb-dynamic-input__desc bb-text-support bb-subtitle\"\n    >\n      {{ options?.helperText }}\n    </div>\n  </div>\n\n  <div\n    class=\"row bb-block bb-block--md bb-subheader bb-subheader--regular bb-text-bold\"\n    *ngIf=\"paymentArrayControl.controls.length\"\n  >\n    <span class=\"col-6\">{{ fieldOptions?.counterpartyName?.header }}</span>\n    <span\n      class=\"col-4 d-none d-md-block\"\n      i18n=\"@@multipayment-card-column-header-ammount-title.label\"\n      >Amount (Credit)</span\n    >\n  </div>\n\n  <div #scroll class=\"virtual-scroll__container\">\n    <div #padding class=\"virtual-scroll__padding\"></div>\n    <div #content class=\"virtual-scroll__content\">\n      <ng-container [formArrayName]=\"hostRef.config?.name\">\n        <div\n          *ngFor=\"let group of viewportItems; let i = index\"\n          class=\"bb-block bb-block--md\"\n        >\n          <ng-container\n            *ngTemplateOutlet=\"\n              cardTemplate;\n              context: { group: group, index: firstRenderedItemIndex + i }\n            \"\n          ></ng-container>\n        </div>\n      </ng-container>\n    </div>\n  </div>\n\n  <div\n    class=\"text-center\"\n    *ngIf=\"\n      paymentArrayControl.controls.length < options?.maximumAllowedPayments\n    \"\n    data-role=\"add-account-card\"\n    [ngClass]=\"{\n      'border border-danger':\n        paymentArrayControl.controls.length === 0 && paymentArrayControl.touched\n    }\"\n  >\n    <button\n      bbButton\n      color=\"link\"\n      buttonSize=\"md\"\n      [attr.data-role]=\"'btn-icon-link-md-def'\"\n      (click)=\"addAccount()\"\n      class=\"m-2\"\n    >\n      <bb-icon-ui color=\"link\" name=\"add\" size=\"md\" cropped></bb-icon-ui>\n      <span\n        data-role=\"add-account\"\n        i18n=\"@@multipayment-card-button-text-add-account.text\"\n        >Add account</span\n      >\n    </button>\n  </div>\n\n  <bb-payord-validation-message\n    [control]=\"hostRef.paymentArrayControl\"\n    [validationMessages]=\"options.validationMessages\"\n    [hideGeneric]=\"true\"\n  ></bb-payord-validation-message>\n\n  <ng-template #cardTemplate let-group=\"group\" let-index=\"index\">\n    <div\n      class=\"card card-sm\"\n      [formGroup]=\"getForm(index)\"\n      (focusout)=\"cardBlur(index)\"\n      (focusin)=\"cardFocus(index)\"\n    >\n      <div class=\"card-body\">\n        <div\n          class=\"bb-block\"\n          [ngClass]=\"{ 'bb-block--sm': getForm(index)?.errors?.error }\"\n        >\n          <div\n            class=\"bb-stack bb-block\"\n            [ngClass]=\"{\n              'bb-block--sm':\n                isExpanded(index) &&\n                !getControl(index, 'counterpartyName')?.value,\n              'bb-block--md':\n                isExpanded(index) &&\n                getControl(index, 'counterpartyName')?.value\n            }\"\n          >\n            <div class=\"bb-stack__item bb-stack__item--fill\">\n              <div class=\"row\">\n                <div class=\"col-md-6 bb-block--md-md-down\">\n                  <bb-beneficiary-selector\n                    [selectedItem]=\"{\n                      name: getControl(index, 'counterpartyName')?.value\n                    }\"\n                    [placeholder]=\"fieldOptions?.counterpartyName?.placeholder\"\n                    [dropdownIcon]=\"\n                      fieldOptions?.counterpartyName?.dropdownIcon\n                    \"\n                    [aria-label]=\"fieldOptions?.counterpartyName?.ariaLabel\"\n                    [title]=\"fieldOptions?.counterpartyName?.label\"\n                    [debounceTime]=\"\n                      fieldOptions?.counterpartyName?.debounceTime\n                    \"\n                    [hasError]=\"\n                      getControl(index, 'counterpartyName')?.touched &&\n                      getControl(index, 'counterpartyName')?.invalid\n                    \"\n                    [helperText]=\"fieldOptions?.counterpartyName?.helperText\"\n                    [selectedItemTemplate]=\"selectedItemtemplate\"\n                    [listItemTemplate]=\"listItemtemplate\"\n                    (searchValue)=\"onSearch(index, $event)\"\n                    (selectedAccount)=\"onSelectAccount($event, index)\"\n                    (searchBlur)=\"\n                      getControl(index, 'counterpartyName').markAsTouched()\n                    \"\n                    (dropdownOpenChange)=\"onDropdownOpenChange(index, $event)\"\n                    [clearSearchOnselect]=\"true\"\n                    #beneficiarySelector\n                  ></bb-beneficiary-selector>\n                  <bb-payord-validation-message\n                    [control]=\"getControl(index, 'counterpartyName')\"\n                    [validationMessages]=\"\n                      fieldOptions?.counterpartyName?.validationMessages\n                    \"\n                    [label]=\"\n                      fieldOptions?.counterpartyName?.validationMessageLabel\n                    \"\n                  ></bb-payord-validation-message>\n                </div>\n                <div class=\"col-md-4\">\n                  <div class=\"bb-block bb-block--sm\">\n                    <bb-amount-input-ui\n                      formControlName=\"amount\"\n                      [mapCurrency]=\"false\"\n                      [currency]=\"fieldOptions?.amount?.currency\"\n                      [required]=\"true\"\n                      [aria-describedby]=\"\n                        'compact-amount-error-message' + index\n                      \"\n                      [maxLength]=\"fieldOptions?.amount?.maxLength\"\n                      [placeholder]=\"fieldOptions?.amount?.placeholder\"\n                    >\n                    </bb-amount-input-ui>\n                    <bb-payord-validation-message\n                      [control]=\"getControl(index, 'amount')\"\n                      [validationMessages]=\"\n                        fieldOptions?.amount?.validationMessages\n                      \"\n                      [label]=\"fieldOptions?.amount?.validationMessageLabel\"\n                    ></bb-payord-validation-message>\n                  </div>\n                  <span\n                    class=\"bb-text-support bb-subtitle\"\n                    [hidden]=\"isExpanded(index)\"\n                  >\n                    <ng-container>Add</ng-container>\n                    <a\n                      role=\"button\"\n                      class=\"ml-1\"\n                      (click)=\"openDescription(index)\"\n                    >\n                      <u class=\"bb-text-support\" data-role=\"description-link\"\n                        >description</u\n                      >\n                    </a>\n                  </span>\n                </div>\n              </div>\n            </div>\n            <div\n              class=\"bb-stack__item bb-stack__item--push-right bb-stack__item--align-top d-print-none\"\n            >\n              <button\n                bbButton\n                buttonSize=\"sm\"\n                circle=\"true\"\n                color=\"link-dark\"\n                data-role=\"close-to-account\"\n                (click)=\"removeAccount(index)\"\n              >\n                <span\n                  class=\"sr-only\"\n                  id=\"closeBtn\"\n                  aria-label=\"remove payment card\"\n                  i18n-aria-label=\"\n                    Remove Payment Card@@multi-payment-card.details.remove\"\n                >\n                  Remove account\n                </span>\n                <bb-icon-ui name=\"times\"></bb-icon-ui>\n              </button>\n            </div>\n          </div>\n\n          <div\n            class=\"card card-sm card--highlight card--shadowless\"\n            [hidden]=\"!isExpanded(index)\"\n          >\n            <div class=\"card-body\">\n              <label class=\"bb-label\">\n                {{ fieldOptions?.description?.title }}\n                <span\n                  class=\"bb-text-support bb-text-default\"\n                  i18n=\"@@multipayment-card.description.label.optional\"\n                  >(optional)</span\n                >\n              </label>\n              <div\n                class=\"bb-stack bb-stack--align-top bb-stack--density-sm\"\n                data-role=\"description-input\"\n              >\n                <bb-textarea-ui\n                  formControlName=\"description\"\n                  [placeholder]=\"fieldOptions?.description?.placeholder\"\n                  [showCharCounter]=\"true\"\n                  [minLength]=\"fieldOptions?.description?.minLength\"\n                  [maxLength]=\"fieldOptions?.description?.maxLength\"\n                  [rows]=\"3\"\n                  [cols]=\"50\"\n                  wrap=\"hard\"\n                  class=\"bb-stack__item\"\n                >\n                </bb-textarea-ui>\n                <button\n                  bbButton\n                  buttonSize=\"sm\"\n                  class=\"bb-stack__item\"\n                  circle=\"true\"\n                  color=\"link-dark\"\n                  (click)=\"deleteDescription(index)\"\n                >\n                  <bb-icon-ui\n                    name=\"delete\"\n                    data-role=\"delete-description\"\n                    color=\"secondary-lightest\"\n                  ></bb-icon-ui>\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <ng-container *ngIf=\"getForm(index)?.errors?.error\">\n          <bb-payord-validation-message\n            [control]=\"getForm(index)\"\n            [validationMessages]=\"[getForm(index)?.errors?.error]\"\n          ></bb-payord-validation-message>\n        </ng-container>\n      </div>\n    </div>\n\n    <ng-template #listItemtemplate>\n      <ng-container *ngIf=\"isDropdownOpen(index)\" class=\"bb-product-selector\">\n        <div\n          *ngIf=\"\n            accounts[index] && (accounts[index].items$ | async);\n            let accounts;\n            else: loadingAccounts\n          \"\n          class=\"pre-scrollable\"\n          style=\"z-index: 1040\"\n        >\n          <bb-beneficiary-selector-account\n            *ngFor=\"let account of accounts\"\n            [account]=\"account\"\n            size=\"sm\"\n            class=\"px-1 border-bottom bb-product-selector__dropdown-item\"\n            [class.selected]=\"getControl(index, 'id').value === account.id\"\n            ngbDropdownItem\n            (selectedAccount)=\"onSelectAccount($event, index)\"\n          >\n          </bb-beneficiary-selector-account>\n        </div>\n      </ng-container>\n    </ng-template>\n\n    <ng-template #loadingAccounts>\n      <bb-loading-indicator-ui></bb-loading-indicator-ui>\n    </ng-template>\n\n    <ng-template #selectedItemtemplate>\n      <div\n        class=\"rounded border p-3\"\n        [ngClass]=\"{\n          'border-danger': getControl(index, 'counterpartyName').invalid\n        }\"\n      >\n        <div role=\"menuitem\" class=\"\">\n          <div class=\"bb-stack\">\n            <div class=\"bb-stack__item\" data-role=\"selected-to-account\">\n              <span class=\"bb-text-bold\">{{\n                getControl(index, 'counterpartyName')?.value\n              }}</span>\n            </div>\n            <div class=\"bb-stack__item bb-stack__item--push-right\">\n              <bb-icon-ui\n                name=\"perm-contact-calendar\"\n                color=\"dark\"\n              ></bb-icon-ui>\n            </div>\n          </div>\n          <div class=\"bb-subtitle bb-text-support break-word\">\n            <span *ngIf=\"getControl(index, 'bankBranchCode')?.value\"\n              >{{ getControl(index, 'bankBranchCode')?.value }} /</span\n            >\n            {{ getControl(index, 'counterpartyAccountNumber')?.value }}\n          </div>\n          <div class=\"text-right\">\n            <bb-amount-ui\n              [amount]=\"getControl(index, 'balance')?.value\"\n              [currency]=\"getControl(index, 'currency')?.value\"\n              [mapCurrency]=\"false\"\n            ></bb-amount-ui>\n          </div>\n        </div>\n      </div>\n    </ng-template>\n  </ng-template>\n</div>\n", styles: ["\n      .virtual-scroll__container {\n        position: relative;\n      }\n\n      .virtual-scroll__padding {\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 1px;\n        height: 1px;\n        transform-origin: 0 0;\n        opacity: 0;\n      }\n\n      .virtual-scroll__content {\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        max-width: 100vw;\n        max-height: 100vh;\n      }\n    "], components: [{ type: i2$3.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: ValidationMessageComponent, selector: "bb-payord-validation-message", inputs: ["control", "validationMessages", "label", "id", "hideGeneric"] }, { type: i1$a.AmountInputComponent, selector: "bb-amount-input-ui", inputs: ["placeholder", "maxLength", "wrapperClasses", "mapCurrency", "currency", "autoDecimal"] }, { type: i1$4.TextareaComponent, selector: "bb-textarea-ui", inputs: ["rows", "cols", "placeholder", "maxLength", "minLength", "readonly", "showCharCounter", "wrap"] }, { type: i4$1.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i5$2.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }], directives: [{ type: i5.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.FormArrayName, selector: "[formArrayName]", inputs: ["formArrayName"] }, { type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i4.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i7.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i5.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i7$1.NgbDropdownItem, selector: "[ngbDropdownItem]", inputs: ["disabled"] }], pipes: { "async": i4.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: MultiPaymentCardComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-multi-payment-card',
                    templateUrl: './multi-payment-card.component.html',
                    styles: [
                        `
      .virtual-scroll__container {
        position: relative;
      }

      .virtual-scroll__padding {
        position: absolute;
        top: 0;
        left: 0;
        width: 1px;
        height: 1px;
        transform-origin: 0 0;
        opacity: 0;
      }

      .virtual-scroll__content {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        max-width: 100vw;
        max-height: 100vh;
      }
    `,
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.NgZone }, { type: i1$b.ViewportRuler }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { scroll: [{
                type: ViewChild,
                args: ['scroll', { read: ElementRef, static: true }]
            }], padding: [{
                type: ViewChild,
                args: ['padding', { read: ElementRef, static: true }]
            }], content: [{
                type: ViewChild,
                args: ['content', { read: ElementRef, static: true }]
            }] } });

/**
 * @deprecated Will be removed in widget collection v3.11.0
 */
class PayordCreditDebitSelectorComponent {
    constructor(deprecationsService) {
        this.deprecationsService = deprecationsService;
        /**
         * @TODO Remove this component in 3.11.0
         */
        deprecationsService.logDeprecatedFeature(`
      bb-payord-credit-debit-selector has been deprecated since 3.10.0, it will be removed in 3.11.0\n
      To define credit/debit options use \`creditDebitOptions\` property from \`ManualBatchTypeConfig\`
      type defined in \`@backbase/business-ang/batch\`
    `);
    }
    ngOnInit() {
        var _a, _b, _c, _d, _e;
        this.control = registerFormControl(this.group, (_a = this.config) === null || _a === void 0 ? void 0 : _a.name, (_b = this.options) === null || _b === void 0 ? void 0 : _b.validators, (_c = this.options) === null || _c === void 0 ? void 0 : _c.asyncValidators, ((_d = this.options) === null || _d === void 0 ? void 0 : _d.defaultValue) ||
            (((_e = this.options) === null || _e === void 0 ? void 0 : _e.choices) && this.options.choices[0]), this.config);
    }
}
/** @nocollapse */ PayordCreditDebitSelectorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordCreditDebitSelectorComponent, deps: [{ token: i2.DeprecationsService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PayordCreditDebitSelectorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordCreditDebitSelectorComponent, selector: "bb-payord-credit-debit-selector", ngImport: i0, template: "<div class=\"bb-block bb-block--lg\">\n  <div class=\"bb-block bb-block--sm\">\n    <div *ngIf=\"options?.label\" class=\"bb-heading-3\">{{options?.label}}</div>\n    <div\n      *ngIf=\"options?.helperText\"\n      class=\"bb-dynamic-input__desc bb-text-support bb-subtitle\"\n    >\n      {{options?.helperText}}\n    </div>\n  </div>\n  <bb-payord-card-menu [items]=\"options?.choices\"></bb-payord-card-menu>\n</div>\n", components: [{ type: i1.ӨPayordCardMenuComponent, selector: "bb-payord-card-menu", inputs: ["items", "initialSelection"], outputs: ["select"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordCreditDebitSelectorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payord-credit-debit-selector',
                    templateUrl: './payord-credit-debit-selector.html',
                }]
        }], ctorParameters: function () { return [{ type: i2.DeprecationsService }]; } });

class PayordInternalAmountOptionsComponent extends ActivatableFormField {
    constructor(stateService, visibilityService, locale) {
        super(visibilityService);
        this.stateService = stateService;
        this.locale = locale;
        this.productKinds = ProductKinds;
        this.remittanceInfoFields = RemittanceInfoFields;
        this.touched = false;
        this.id = `bb-compact-amount-${new Date().getTime()}`;
        this.groupSeparator = getLocaleNumberSymbol(this.locale, NumberSymbol.CurrencyGroup);
        this.decimalSeparator = getLocaleNumberSymbol(this.locale, NumberSymbol.CurrencyDecimal);
        this.format = {
            groupSeparator: this.groupSeparator,
            decimalSeparator: this.decimalSeparator,
            groupSize: 3,
        };
    }
    ngOnInit() {
        var _a, _b, _c, _d;
        this.registerFields();
        triggerHook(PaymentFormFieldHooks.onInit, this);
        this.control = this.group.controls[this.config.name];
        this.listenAmountOptionChanges();
        this.toAccountProduct$ = (_b = (_a = this.group.parent) === null || _a === void 0 ? void 0 : _a.get(PaymentBaseFields.counterparty)) === null || _b === void 0 ? void 0 : _b.valueChanges.pipe(startWith((_d = (_c = this.group.parent) === null || _c === void 0 ? void 0 : _c.get(PaymentBaseFields.counterparty)) === null || _d === void 0 ? void 0 : _d.value), pluck('accountData'), filter((account) => !!account), distinctUntilChanged((prev, curr) => prev.id === curr.id), tap((account) => {
            var _a, _b, _c, _d;
            const optionValue = (_a = this.control) === null || _a === void 0 ? void 0 : _a.value;
            if (optionValue || optionValue === 0) {
                if (this.stateService.currentState !== PaymentState.EDIT) {
                    (_b = this.control) === null || _b === void 0 ? void 0 : _b.reset();
                    this.group.controls[RemittanceInfoFields.amountOptionLabel].reset();
                    this.group.controls[RemittanceInfoFields.amountCurrencyGroup].reset();
                    this.group.controls['scheduleFrequency'].reset();
                    this.group.controls['showFrequencySwitch'].reset();
                }
                this.customAmount = new BigNumber((_c = this.group.controls[RemittanceInfoFields.amountCurrencyGroup].value) === null || _c === void 0 ? void 0 : _c.amount).toFormat(this.format);
            }
            this.toggleDependants();
            this.toAccountDefaultRecord = account.defaultRecord;
            this.setAmountOptions(account);
            this.stateService.setPaymentState(PaymentState.INITIAL);
            if (this.options.noBalanceText) {
                if (this.isAmountOptionsZero(account) && this.control) {
                    this.group.removeControl(this.config.name);
                }
                else if (!this.control) {
                    registerFormControl(this.group, this.config.name, [Validators.required], this.options.asyncValidators);
                    this.listenAmountOptionChanges();
                }
            }
            if (account.currency) {
                (_d = this.group
                    .get(`${RemittanceInfoFields.amountCurrencyGroup}.${RemittanceInfoFields.currency}`)) === null || _d === void 0 ? void 0 : _d.patchValue(account.currency);
            }
        }));
    }
    ngOnDestroy() {
        var _a;
        triggerHook(PaymentFormFieldHooks.onDestroy, this);
        (_a = this.subscription$) === null || _a === void 0 ? void 0 : _a.unsubscribe();
    }
    registerFields() {
        registerFormControl(this.group, RemittanceInfoFields.amountOptionLabel);
        registerFormControl(this.group, this.config.name, this.options.validators, this.options.asyncValidators);
        registerFormControl(this.group, 'scheduleFrequency');
        registerFormControl(this.group, 'showFrequencySwitch');
    }
    /**
     * Method to handle selecting amount option
     *
     * @param [index] index of selected amount option
     */
    amountOptionChange(index) {
        var _a, _b, _c, _d;
        const option = ((_a = this.amountOptions) === null || _a === void 0 ? void 0 : _a[index]) || {};
        const label = option.label;
        const currency = (_b = this.toAccountDefaultRecord) === null || _b === void 0 ? void 0 : _b.currency;
        const amount = (_d = (_c = this.toAccountDefaultRecord) === null || _c === void 0 ? void 0 : _c[option.amountApiField || '']) === null || _d === void 0 ? void 0 : _d.toString();
        if (option.hasCustomAmountInput) {
            this.group.controls[RemittanceInfoFields.amountCurrencyGroup].reset({
                amount: '',
                currency,
            });
            this.group.controls[RemittanceInfoFields.amountOptionLabel].patchValue(label);
            this.group.controls['scheduleFrequency'].patchValue(option.scheduleFrequency);
            this.group.controls['showFrequencySwitch'].patchValue(option.showFrequencySwitch);
        }
        if (amount) {
            this.group.patchValue({
                [RemittanceInfoFields.amountCurrencyGroup]: { amount, currency },
                [RemittanceInfoFields.amountOptionLabel]: label,
                scheduleFrequency: option.scheduleFrequency,
                showFrequencySwitch: option.showFrequencySwitch,
            });
        }
        this.toggleDependants();
    }
    /**
     * Set amount options depend on selected product
     *
     * @param [product] selected account in counterParty product selector
     */
    setAmountOptions(product) {
        var _a;
        const { creditCard, loan } = ((_a = this.options) === null || _a === void 0 ? void 0 : _a.amountOptions) || {};
        switch (product.productKindName) {
            case ProductKinds.creditCard:
                this.amountOptions = (creditCard === null || creditCard === void 0 ? void 0 : creditCard.map(mapLocalize)) || [];
                break;
            case ProductKinds.loanAccount:
                this.amountOptions = (loan === null || loan === void 0 ? void 0 : loan.map(mapLocalize)) || [];
                break;
            default:
                this.amountOptions = [];
        }
    }
    isAmountOptionsZero(account) {
        var _a, _b;
        if (!((_a = this.amountOptions) === null || _a === void 0 ? void 0 : _a.length) || !account) {
            return;
        }
        return (_b = this.amountOptions) === null || _b === void 0 ? void 0 : _b.every((option) => {
            var _a;
            return (option === null || option === void 0 ? void 0 : option.amountApiField)
                ? Number((_a = account.defaultRecord) === null || _a === void 0 ? void 0 : _a[option.amountApiField]) === 0
                : true;
        });
    }
    listenAmountOptionChanges() {
        var _a, _b;
        this.subscription$ = (_a = this.control) === null || _a === void 0 ? void 0 : _a.valueChanges.pipe(startWith((_b = this.control) === null || _b === void 0 ? void 0 : _b.value), distinctUntilChanged(), filter((value) => (value || value === 0) &&
            this.stateService.currentState !== PaymentState.EDIT)).subscribe(this.amountOptionChange.bind(this));
    }
}
/** @nocollapse */ PayordInternalAmountOptionsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordInternalAmountOptionsComponent, deps: [{ token: i1.StateService }, { token: VisibilityService }, { token: LOCALE_ID }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PayordInternalAmountOptionsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordInternalAmountOptionsComponent, selector: "bb-internal-amount-options", usesInheritance: true, ngImport: i0, template: "<ng-container *ngIf=\"toAccountProduct$ | async as product\">\n  <fieldset\n    class=\"bb-fieldset bb-amount-options\"\n    [ngClass]=\"options?.cssClasses\"\n    [formGroup]=\"group\"\n    *ngIf=\"!config?.hidden\"\n  >\n    <div\n      class=\"bb-block bb-block--md\"\n      *ngIf=\"\n        !(options?.noBalanceText && isAmountOptionsZero(product));\n        else noBalanceMessage\n      \"\n    >\n      <bb-payord-validation-message\n        id=\"amount-option-error-message\"\n        [control]=\"group.get(config.name)\"\n        [validationMessages]=\"options?.validationMessages\"\n        class=\"d-block bb-block bb-block--md\"\n      ></bb-payord-validation-message>\n      <bb-input-radio-group-ui\n        [formControlName]=\"config.name\"\n        [aria-describedby]=\"'amount-option-error-message'\"\n        [preselect]=\"options?.preselect\"\n        [horizontal]=\"options?.horizontal\"\n      >\n        <bb-input-radio-ui\n          *ngFor=\"let option of amountOptions; index as i\"\n          aria-labelledby=\"payord-amount-options-amount-{{\n            i\n          }} payord-amount-options-label-{{ i }}\"\n          aria-describedby=\"payord-amount-options-description-{{ i }}\"\n          [labelTemplate]=\"\n            option.hasCustomAmountInput ? otherTemplate : labelTemplate\n          \"\n          [labelTemplateContext]=\"[option, product, i]\"\n          [value]=\"i\"\n        ></bb-input-radio-ui>\n      </bb-input-radio-group-ui>\n    </div>\n    <ng-template #noBalanceMessage>\n      <div class=\"bb-block bb-block--md bb-amount-options__no-balance-text\">\n        {{ options?.noBalanceText }}\n      </div>\n    </ng-template>\n  </fieldset>\n</ng-container>\n\n<ng-template #labelTemplate let-context=\"labelTemplateContext\">\n  <div\n    class=\"bb-stack bb-stack--wrap\"\n    [ngClass]=\"options?.amountOptions?.cssClasses\"\n  >\n    <div class=\"bb-stack__item bb-stack__item--fill\">\n      <div attr.id=\"payord-amount-options-label-{{ context[2] }}\">\n        {{ context[0].label }}\n      </div>\n      <div *ngIf=\"context[0].description\">\n        <span\n          class=\"bb-text-support bb-subtitle bb-input-radio-group__radio-label\"\n          attr.id=\"payord-amount-options-description-{{ context[2] }}\"\n        >\n          {{ context[0].description }}\n        </span>\n      </div>\n    </div>\n    <div class=\"bb-stack__item bb-stack__break--sm-down\">\n      <bb-amount-ui\n        attr.id=\"payord-amount-options-amount-{{ context[2] }}\"\n        [amount]=\"context[1].defaultRecord[context[0].amountApiField]\"\n        [currency]=\"context[1].currency\"\n        [mapCurrency]=\"options?.mapCurrency !== false\"\n        [bbHighlight]=\"options?.highlight\"\n        [abbreviate]=\"options?.abbreviate\"\n        [showPlusSign]=\"options?.showPlusSign\"\n        [trailingZeroes]=\"options?.trailingZeroes !== false\"\n      ></bb-amount-ui>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #otherTemplate let-context=\"labelTemplateContext\">\n  <div\n    class=\"bb-amount-input__field--large bb-form-field bb-form-field--md\"\n    [ngClass]=\"options?.amountOptions?.cssClasses\"\n    [class.was-validated]=\"\n      touched &&\n      group.controls[remittanceInfoFields.amountCurrencyGroup].invalid\n    \"\n  >\n    <div>{{ context[0].label }}</div>\n    <div *ngIf=\"context[0].description\" class=\"bb-block bb-block--sm\">\n      <span\n        class=\"bb-text-support bb-subtitle bb-input-radio-group__radio-label\"\n      >\n        {{ context[0].description }}\n      </span>\n    </div>\n    <ng-container *ngIf=\"group.controls[config.name]?.value === context[2]\">\n      <div\n        class=\"position-relative\"\n        [formGroup]=\"group.controls[remittanceInfoFields.amountCurrencyGroup]\"\n      >\n        <bb-amount-input-ui\n          [formControlName]=\"remittanceInfoFields.amount\"\n          (focusout)=\"touched = true\"\n          [mapCurrency]=\"options?.showCurrencySymbol !== false\"\n          [wrapperClasses]=\"\n            options.wrapperClasses || 'bb-amount-input__field--large'\n          \"\n          [currency]=\"context[1].currency\"\n          [required]=\"true\"\n          [autoDecimal]=\"options.autoDecimal\"\n          [aria-describedby]=\"'compact-amount-error-message'\"\n          [placeholder]=\"options?.placeholder || '0.00'\"\n          [maxLength]=\"options?.maxLength\"\n        ></bb-amount-input-ui>\n      </div>\n      <bb-payord-validation-message\n        [id]=\"'compact-amount-error-message'\"\n        [control]=\"group.controls[remittanceInfoFields.amountCurrencyGroup]\"\n        [validationMessages]=\"options?.validationMessages\"\n      ></bb-payord-validation-message>\n    </ng-container>\n  </div>\n</ng-template>\n", components: [{ type: ValidationMessageComponent, selector: "bb-payord-validation-message", inputs: ["control", "validationMessages", "label", "id", "hideGeneric"] }, { type: i2$2.InputRadioGroupComponent, selector: "bb-input-radio-group-ui", inputs: ["horizontal", "preselect", "name", "verticalAlign"] }, { type: i2$2.InputRadioComponent, selector: "bb-input-radio-ui", inputs: ["labelTemplate", "labelTemplateContext", "value", "label", "aria-label", "aria-labelledby", "aria-describedby", "role", "aria-activedescendant", "aria-expanded", "aria-invalid", "aria-owns", "disabled"] }, { type: i5$2.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: i1$a.AmountInputComponent, selector: "bb-amount-input-ui", inputs: ["placeholder", "maxLength", "wrapperClasses", "mapCurrency", "currency", "autoDecimal"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i5.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i9.HighlightDirective, selector: "[bbHighlight]", inputs: ["amount", "bbHighlight", "negativeClass", "positiveClass"] }, { type: i5.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }], pipes: { "async": i4.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordInternalAmountOptionsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-internal-amount-options',
                    templateUrl: './payord-internal-amount-options.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.StateService }, { type: VisibilityService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [LOCALE_ID]
                }] }]; } });

class PayordHeaderComponent {
    ngOnInit() {
        var _a;
        const remittanceInfoForm = (_a = this.group.parent) === null || _a === void 0 ? void 0 : _a.get(PaymentBaseFields.remittanceInfo);
        this.headerAddition$ = remittanceInfoForm === null || remittanceInfoForm === void 0 ? void 0 : remittanceInfoForm.valueChanges.pipe(pluck(RemittanceInfoFields.amountOptionLabel));
        triggerHook(PaymentFormFieldHooks.onInit, this);
    }
    ngOnDestroy() {
        triggerHook(PaymentFormFieldHooks.onDestroy, this);
    }
}
/** @nocollapse */ PayordHeaderComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordHeaderComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PayordHeaderComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordHeaderComponent, selector: "bb-payord-header-ui", ngImport: i0, template: "<div [ngClass]=\"options?.cssClasses\" *ngIf=\"!config?.hidden\">\n  <div class=\"bb-stack\">\n    <bb-header-ui\n      [headingType]=\"options.headingType\"\n      [heading]=\"options.heading\"\n      [headingClasses]=\"options?.headingClasses\"\n    >\n    </bb-header-ui>\n    <span\n      class=\"bb-text-support bb-highlight bb-highlight--regular\"\n      *ngIf=\"headerAddition$ | async as headerAddition\"\n    >\n      &nbsp;- {{ headerAddition }}\n    </span>\n  </div>\n  <hr *ngIf=\"options?.separatorLine\" class=\"bb-schedule-header__sepatator\" />\n</div>\n", components: [{ type: i1$c.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], pipes: { "async": i4.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordHeaderComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payord-header-ui',
                    templateUrl: './payord-header.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }] });

class PayordPurposeOfPaymentComponent {
    constructor(elRef) {
        this.elRef = elRef;
    }
    ngOnInit() {
        this.control =
            this.group.get(RemittanceInfoFields.purposeOfPayment) ||
                registerFormControl(this.group, this.config.name, this.options.validators, this.options.asyncValidators, this.options.defaultValue, this.config);
        this.options.isCollapsed = this.control.value
            ? false
            : this.options.isCollapsed === undefined
                ? true
                : this.options.isCollapsed;
        triggerHook(PaymentFormFieldHooks.onInit, this);
    }
    expand() {
        this.options.isCollapsed = false;
        focusChildElement('.form-control', this.elRef.nativeElement);
    }
    selectPurpose(purpose) {
        this.control.setValue(purpose);
    }
    ngOnDestroy() {
        triggerHook(PaymentFormFieldHooks.onDestroy, this);
    }
}
/** @nocollapse */ PayordPurposeOfPaymentComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordPurposeOfPaymentComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PayordPurposeOfPaymentComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordPurposeOfPaymentComponent, selector: "bb-payord-purpose-of-payment", ngImport: i0, template: "<ng-container\n  *ngIf=\"control?.value || !options?.isCollapsed; else collapsedTmpl\"\n>\n  <div\n    class=\"bb-dynamic-input form-group\"\n    [formGroup]=\"group\"\n    [ngClass]=\"options?.cssClasses\"\n  >\n    <div [hidden]=\"config?.hidden\" [attr.aria-hidden]=\"config?.hidden\">\n      <ng-container *ngIf=\"!options?.purposes || !options?.purposes.length\">\n        <label\n          class=\"bb-dynamic-input__label\"\n          data-role=\"purpose-of-payment-label\"\n          [id]=\"inputEl?.id + '__label'\"\n          [for]=\"inputEl?.id\"\n          [textContent]=\"options?.label || ''\"\n        ></label>\n        <span\n          class=\"bb-dynamic-input__helper-text bb-text-support\"\n          data-role=\"purpose-of-payment-optional-label\"\n          *ngIf=\"options?.isOptional && options?.helperText\"\n          [id]=\"inputEl?.id + '__desc'\"\n          [textContent]=\"options?.helperText\"\n        >\n        </span>\n\n        <bb-input-text-ui\n          #inputEl\n          [formControlName]=\"config.name\"\n          [attr.disabled]=\"options?.disabled\"\n          [minLength]=\"options?.minLength\"\n          [maxLength]=\"options?.maxLength\"\n          [showCharCounter]=\"options?.showCharCounter\"\n          [attr.id]=\"options?.id\"\n          [placeholder]=\"options?.placeholder || ''\"\n          [autocomplete]=\"options?.autoComplete\"\n          [attr.autofocus]=\"options?.autofocus\"\n          [attr.readonly]=\"options?.readonly\"\n          [aria-describedby]=\"descElem?.id\"\n          data-role=\"purpose-of-payment-selector\"\n        ></bb-input-text-ui>\n\n        <div\n          #descElem\n          class=\"bb-dynamic-input__desc bb-text-support bb-subtitle\"\n          [attr.aria-hidden]=\"!options?.description\"\n          [hidden]=\"!options?.description\"\n          [id]=\"inputEl?.id + '__desc'\"\n          [textContent]=\"options?.description || ''\"\n        ></div>\n      </ng-container>\n\n      <ng-container *ngIf=\"options?.purposes?.length\">\n        <bb-select-purpose-dropdown\n          [formControlName]=\"config?.name\"\n          [label]=\"options?.label\"\n          [purposes]=\"options?.purposes\"\n          [isOptional]=\"options?.isOptional\"\n          [helperText]=\"options?.helperText\"\n          [placeholder]=\"options?.placeholder\"\n          [searchPlaceholder]=\"options?.searchPlaceholder\"\n          [dropdownIcon]=\"options?.dropdownIcon\"\n          [selectedPurpose]=\"control.value\"\n          (selectPurpose)=\"selectPurpose($event)\"\n          data-role=\"purpose-of-payment-selector-dropdown\"\n        ></bb-select-purpose-dropdown>\n      </ng-container>\n\n      <bb-payord-validation-message\n        [control]=\"group?.controls[config.name]\"\n        [validationMessages]=\"options?.validationMessages\"\n        [label]=\"options?.label\"\n      ></bb-payord-validation-message>\n    </div>\n  </div>\n</ng-container>\n\n<ng-template #collapsedTmpl>\n  <span\n    class=\"bb-dynamic-input__collapse-btn-container\"\n    [hidden]=\"config?.hidden\"\n    [attr.aria-hidden]=\"config?.hidden\"\n  >\n    <button\n      class=\"bb-dynamic-input__collapse-btn\"\n      data-role=\"purpose-of-payment-btn\"\n      bbButton\n      [color]=\"options?.collapseOptions?.btnColor || 'link'\"\n      [buttonSize]=\"options?.collapseOptions?.btnSize\"\n      (click)=\"expand()\"\n    >\n      <bb-icon-ui\n        class=\"bb-dynamic-input__collapse-btn-icon mr-2\"\n        *ngIf=\"!options?.collapseOptions?.hideIcon\"\n        [name]=\"options?.collapseOptions?.icon || 'add'\"\n        [size]=\"options?.collapseOptions?.iconSize\"\n      >\n      </bb-icon-ui>\n      <span class=\"bb-dynamic-input__collapse-btn-label\">\n        {{ options?.collapseOptions?.label || options?.label }}\n      </span>\n    </button>\n    <bb-payord-validation-message\n      [control]=\"group?.controls[config.name]\"\n      [validationMessages]=\"options?.validationMessages\"\n      [label]=\"options?.label\"\n    ></bb-payord-validation-message>\n  </span>\n</ng-template>\n", components: [{ type: i1$5.InputTextComponent, selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i1.ӨSelectPurposeDropdownComponent, selector: "bb-select-purpose-dropdown", inputs: ["longDescription", "purposes", "isOptional", "selectedPurpose", "helperText", "placeholder", "label", "searchPlaceholder", "dropdownIcon"], outputs: ["selectPurpose"] }, { type: ValidationMessageComponent, selector: "bb-payord-validation-message", inputs: ["control", "validationMessages", "label", "id", "hideGeneric"] }, { type: i2$3.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i7.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordPurposeOfPaymentComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payord-purpose-of-payment',
                    templateUrl: './payord-purpose-of-payment.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; } });

class PayordAlertComponent {
    /**
     * Initializes the component.
     *
     * @returns
     */
    ngOnInit() {
        triggerHook(PaymentFormFieldHooks.onInit, this);
    }
    /**
     * Cleanups just before Angular destroys the component.
     *
     * @returns
     */
    ngOnDestroy() {
        triggerHook(PaymentFormFieldHooks.onDestroy, this);
    }
}
/** @nocollapse */ PayordAlertComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordAlertComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PayordAlertComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordAlertComponent, selector: "bb-payord-alert", ngImport: i0, template: "<ng-container *ngIf=\"!config?.hidden\">\n  <div [ngClass]=\"options?.cssClasses\" role=\"alert\">\n    <bb-alert-ui\n      *ngIf=\"options?.title && options?.modifier\"\n      [title]=\"options?.title\"\n      [modifier]=\"options?.modifier\"\n      [dismissible]=\"options?.dismissible\"\n    >\n      <p class=\"bb-block bb-block--no-margin\">{{ options?.description }}</p>\n    </bb-alert-ui>\n  </div>\n</ng-container>\n", components: [{ type: i1$d.AlertComponent, selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordAlertComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payord-alert',
                    templateUrl: './payord-alert.component.html',
                }]
        }] });

class PayordScheduleSwitchComponent {
    constructor() {
        this.destroy$ = new Subject();
        this.id = new Date().getTime();
    }
    ngOnInit() {
        registerFormControl(this.group, this.config.name, this.options.validators, this.options.asyncValidators, this.options.defaultValue, this.config);
        registerFormControl(this.group, ScheduleFields.frequency);
        registerFormControl(this.group, ScheduleFields.scheduleInfo);
        triggerHook(PaymentFormFieldHooks.onInit, this);
        this.setValue();
    }
    ngOnDestroy() {
        triggerHook(PaymentFormFieldHooks.onDestroy, this);
        this.destroy$.next();
        this.destroy$.complete();
    }
    setValue() {
        var _a;
        // listen changes to reset value before hiding this component
        (_a = this.group.controls[this.config.name]) === null || _a === void 0 ? void 0 : _a.valueChanges.pipe(distinctUntilChanged(), takeUntil(this.destroy$)).subscribe((switchValue) => {
            var _a, _b, _c, _d;
            // the condition is added to avoid unnecessary subscriptions when the component is hidden
            if (!this.config.hidden) {
                const freqValue = switchValue
                    ? (_a = this.options.values) === null || _a === void 0 ? void 0 : _a.on
                    : (_b = this.options.values) === null || _b === void 0 ? void 0 : _b.off;
                const infoValue = switchValue ? this.options.description : undefined;
                (_c = this.group.controls[ScheduleFields.frequency]) === null || _c === void 0 ? void 0 : _c.patchValue(freqValue);
                (_d = this.group.controls[ScheduleFields.scheduleInfo]) === null || _d === void 0 ? void 0 : _d.patchValue(infoValue);
            }
        });
    }
}
/** @nocollapse */ PayordScheduleSwitchComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordScheduleSwitchComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PayordScheduleSwitchComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordScheduleSwitchComponent, selector: "bb-payord-schedule-switch-ui", ngImport: i0, template: "<ng-container *ngIf=\"!config?.hidden\">\n  <div\n    class=\"form-group bb-dynamic-input bb-schedule-switch\"\n    [formGroup]=\"group\"\n    [ngClass]=\"options?.cssClasses\"\n  >\n    <div class=\"bb-inline-stack bb-stack--align-top\">\n      <div class=\"bb-inline-stack__item--spacing-md\">\n        <bb-switch-ui\n          [id]=\"'bb-payord-schedule-switch-' + id\"\n          [formControlName]=\"config.name\"\n        >\n        </bb-switch-ui>\n      </div>\n      <div>\n        <div class=\"b-block bb-block--xs bb-stack bb-schedule-switch__label\">\n          <label\n            [attr.for]=\"'bb-payord-schedule-switch-' + id\"\n            *ngIf=\"options?.label\"\n            class=\"bb-stack__item bb-stack__item--spacing-xs bb-block bb-block--no-margin\"\n            >{{ options?.label }}</label\n          >\n          <span\n            [bbTooltip]=\"options?.tooltipMessage\"\n            placement=\"bottom\"\n            [triggers]=\"'hover'\"\n          >\n            <bb-icon-ui\n              name=\"info\"\n              color=\"secondary\"\n              size=\"sm\"\n              class=\"\"\n            ></bb-icon-ui>\n          </span>\n        </div>\n        <div\n          class=\"bb-subtitle bb-text-support bb-schedule-switch__description\"\n        >\n          <span\n            *ngIf=\"options?.description && group.controls[config.name]?.value\"\n            >{{ options?.description }}</span\n          >\n        </div>\n      </div>\n    </div>\n    <bb-payord-validation-message\n      [control]=\"group?.controls[config.name]\"\n      [validationMessages]=\"options?.validationMessages\"\n      [label]=\"options?.label\"\n    ></bb-payord-validation-message>\n  </div>\n</ng-container>\n", components: [{ type: i2$5.SwitchComponent, selector: "bb-switch-ui", inputs: ["labelPosition"] }, { type: i2$3.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: ValidationMessageComponent, selector: "bb-payord-validation-message", inputs: ["control", "validationMessages", "label", "id", "hideGeneric"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i6$1.TooltipDirective, selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordScheduleSwitchComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payord-schedule-switch-ui',
                    templateUrl: './payord-schedule-switch.component.html',
                }]
        }] });

class PayordBeneficiaryGroupHeaderComponent {
    constructor() {
        this.iconName = 'clear';
    }
    ngOnInit() {
        var _a;
        this.hideBeneficiaryFieldsControl = registerFormControl(this.group, HiddenFields.hideBeneficiaryFields);
        this.initiatorIdControl = ((_a = this.group.parent) === null || _a === void 0 ? void 0 : _a.get([PaymentBaseFields.initiator, InitiatorFields.id]));
        triggerHook(PaymentFormFieldHooks.onInit, this);
    }
    onClearValues() {
        var _a, _b, _c, _d;
        const parentGroup = this.group.parent;
        const nameControl = (parentGroup.get([PaymentBaseFields.initiator, InitiatorFields.name]));
        if (nameControl.value) {
            nameControl.setErrors(null);
        }
        if (typeof ((_b = (_a = this.options) === null || _a === void 0 ? void 0 : _a.clearOptions) === null || _b === void 0 ? void 0 : _b.onClear) === 'function') {
            this.options.clearOptions.onClear(this.group);
        }
        else {
            resetBeneficiaryDetails(this.group);
        }
        (_c = this.hideBeneficiaryFieldsControl) === null || _c === void 0 ? void 0 : _c.setValue(true);
        (_d = this.initiatorIdControl) === null || _d === void 0 ? void 0 : _d.updateValueAndValidity();
    }
    showClearBtn() {
        const accountName = this.group.get(CounterPartyFields.name);
        const accountNumber = this.group.get(CounterPartyFields.accountNumber);
        const bankBranchCode = this.group.get([
            CounterPartyFields.creditorBank,
            CounterPartyFields.bankBranchCode,
        ]);
        const bic = this.group.get([
            CounterPartyFields.creditorBank,
            CounterPartyFields.bic,
        ]);
        return ((accountName === null || accountName === void 0 ? void 0 : accountName.value) ||
            (accountNumber === null || accountNumber === void 0 ? void 0 : accountNumber.value) ||
            (bankBranchCode === null || bankBranchCode === void 0 ? void 0 : bankBranchCode.value) ||
            (bic === null || bic === void 0 ? void 0 : bic.value));
    }
    ngOnDestroy() {
        triggerHook(PaymentFormFieldHooks.onDestroy, this);
    }
}
/** @nocollapse */ PayordBeneficiaryGroupHeaderComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordBeneficiaryGroupHeaderComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PayordBeneficiaryGroupHeaderComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordBeneficiaryGroupHeaderComponent, selector: "bb-payord-beneficiary-header", ngImport: i0, template: "<div\n  *ngIf=\"config?.options?.label\"\n  class=\"bb-stack\"\n  [ngClass]=\"options?.cssClasses\"\n>\n  <legend class=\"bb-inline-stack__item bb-fieldset__heading break-word\">\n    <ng-container *ngIf=\"!group?.value?.name\">{{\n      options?.label\n    }}</ng-container>\n    <ng-container *ngIf=\"group?.value?.name && options?.hasDynamicTitle\">\n      <span>{{ options?.label }}: {{ group?.value?.name }}</span>\n      <span\n        *ngIf=\"\n          group?.value?.selectedContact?.contactId &&\n          group?.value?.beneficiaryAccountName\n        \"\n      >\n        - {{ group?.value?.beneficiaryAccountName }}\n      </span>\n    </ng-container>\n  </legend>\n  <button\n    *ngIf=\"showClearBtn()\"\n    class=\"bb-stack__item--push-right\"\n    bbButton\n    color=\"link\"\n    (click)=\"onClearValues()\"\n    data-role=\"clear-beneficiary-button\"\n  >\n    <bb-icon-ui [name]=\"options?.clearOptions?.icon || iconName\"></bb-icon-ui>\n    <span *ngIf=\"options?.clearOptions?.label\">{{\n      options?.clearOptions?.label\n    }}</span>\n    <span\n      *ngIf=\"!options?.clearOptions?.label\"\n      i18n=\"@@dynamic-form-field-beneficiary-header.label\"\n      >Clear</span\n    >\n  </button>\n</div>\n", components: [{ type: i2$3.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i7.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordBeneficiaryGroupHeaderComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payord-beneficiary-header',
                    templateUrl: './payord-beneficiary-group-header.component.html',
                }]
        }] });

class MultiPaymentAccountSelectorComponent {
    constructor() {
        this.gc$$ = new Subject();
        this.accountFormat = {
            length: 0,
            maskRange: [0, 0],
            segments: 0,
        };
        this.accountGroup = {
            [AccountField.id]: [''],
            [AccountField.name]: [''],
            [AccountField.accountNumber]: [''],
            [AccountField.number]: [''],
            [AccountField.accountType]: [''],
            [AccountField.currency]: [''],
            [AccountField.balance]: [''],
            [AccountField.bankBranchCode]: [''],
        };
    }
    get selectedAccount() {
        return this._selectedAccount;
    }
    set selectedAccount(account) {
        var _a, _b, _c;
        this._selectedAccount = account;
        (_a = this.group) === null || _a === void 0 ? void 0 : _a.patchValue(account);
        (_b = this.group) === null || _b === void 0 ? void 0 : _b.markAsTouched();
        (_c = this.group) === null || _c === void 0 ? void 0 : _c.markAsDirty();
    }
    ngOnInit() {
        var _a, _b, _c;
        this.registerFields();
        this.items$ = (_a = this.options) === null || _a === void 0 ? void 0 : _a.items$.pipe(tap((items) => {
            var _a, _b, _c, _d;
            this.items = items;
            if ((_b = (_a = this.group) === null || _a === void 0 ? void 0 : _a.get('id')) === null || _b === void 0 ? void 0 : _b.value) {
                this.selectedAccount = this.findAccount((_d = (_c = this.group) === null || _c === void 0 ? void 0 : _c.get('id')) === null || _d === void 0 ? void 0 : _d.value);
            }
        }));
        const initiator = (_c = (_b = this.group) === null || _b === void 0 ? void 0 : _b.parent) === null || _c === void 0 ? void 0 : _c.get('initiator');
        initiator === null || initiator === void 0 ? void 0 : initiator.valueChanges.pipe(takeUntil(this.gc$$)).subscribe({
            next: (account) => {
                this._selectedAccount = this.findAccount(account.id);
            },
        });
        triggerHook(PaymentFormFieldHooks.onInit, this);
    }
    ngOnDestroy() {
        this.gc$$.next();
        this.gc$$.complete();
        triggerHook(PaymentFormFieldHooks.onDestroy, this);
    }
    registerFields() {
        for (const key in this.accountGroup) {
            if (this.accountGroup.hasOwnProperty(key)) {
                const validators = [];
                if (key === AccountField.id || key === AccountField.name) {
                    validators.push(Validators.required);
                }
                registerFormControl(this.group, key, validators, [], '');
            }
        }
    }
    selectItem(account) {
        var _a, _b, _c;
        this.selectedAccount = account;
        if ((_a = this.options) === null || _a === void 0 ? void 0 : _a.accountSelected) {
            (_b = this.options) === null || _b === void 0 ? void 0 : _b.accountSelected(account);
        }
        (_c = this.options) === null || _c === void 0 ? void 0 : _c.searchTerm$.next('');
    }
    onBlur() {
        var _a, _b;
        if ((_a = this.options) === null || _a === void 0 ? void 0 : _a.required) {
            (_b = this.group) === null || _b === void 0 ? void 0 : _b.markAllAsTouched();
        }
    }
    onSearch($event) {
        var _a, _b;
        if ((_a = this.options) === null || _a === void 0 ? void 0 : _a.searchTerm$) {
            (_b = this.options) === null || _b === void 0 ? void 0 : _b.searchTerm$.next($event);
        }
    }
    findAccount(id) {
        var _a;
        return this.items.find((item) => item.id === id) || ((_a = this.group) === null || _a === void 0 ? void 0 : _a.value);
    }
}
/** @nocollapse */ MultiPaymentAccountSelectorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: MultiPaymentAccountSelectorComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ MultiPaymentAccountSelectorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: MultiPaymentAccountSelectorComponent, selector: "bb-multi-payment-account-selector", ngImport: i0, template: "<div\n  class=\"bb-dynamic-input form-group\"\n  [ngClass]=\"options?.cssClasses\"\n  *ngIf=\"!config?.hidden\"\n>\n  <section class=\"payment-from\" [formGroup]=\"group\">\n    <label class=\"bb-form-field\">\n      <div *ngIf=\"options?.label\" class=\"bb-dynamic-input__label bb-label\">\n        <span>\n          {{ options?.label }}\n        </span>\n        <span\n          class=\"bb-dynamic-input__helper-text bb-text-support\"\n          *ngIf=\"options?.helperText\"\n          [textContent]=\"options?.helperText\"\n        >\n        </span>\n      </div>\n      <bb-account-selector-ui\n        [markFirst]=\"true\"\n        [highlight]=\"false\"\n        [filterItems]=\"options?.filterItems\"\n        [internalFiltering]=\"false\"\n        [closeOnSelect]=\"true\"\n        [dropdownPosition]=\"'bottom'\"\n        [items]=\"items$ | async\"\n        [selectedItems]=\"selectedAccount\"\n        [searchFunc]=\"options?.searchFunc\"\n        (change)=\"selectItem($event)\"\n        (blur)=\"onBlur()\"\n        (search)=\"onSearch($event)\"\n        (filterChange)=\"onSearch($event)\"\n        [placeholder]=\"options?.placeholder || ''\"\n        [attr.aria-label]=\"options?.label\"\n        [required]=\"options?.required\"\n        [attr.data-role]=\"'debit-account-selector'\"\n        [showCurrencySymbol]=\"options?.showCurrencySymbol\"\n        [showBankBranchCode]=\"options?.showBankBranchCode\"\n        [productNumberFormat]=\"accountFormat\"\n      ></bb-account-selector-ui>\n    </label>\n\n    <ng-container *ngIf=\"!selectedAccount\">\n      <bb-payord-validation-message\n        [control]=\"group?.controls['id']\"\n        [validationMessages]=\"options?.validationMessages\"\n        [label]=\"options?.label || 'Account'\"\n      ></bb-payord-validation-message>\n    </ng-container>\n\n    <div\n      class=\"bb-dynamic-input__desc bb-text-support bb-subtitle\"\n      *ngIf=\"options?.description\"\n      [textContent]=\"options?.description\"\n    ></div>\n  </section>\n</div>\n", components: [{ type: i2$1.AccountSelectorComponent, selector: "bb-account-selector-ui", inputs: ["items", "disabled", "notFoundText", "showError", "productNumberFormat", "selectedItems", "multiple", "closeOnSelect", "searchable", "clearable", "placeholder", "loading", "dropdownPosition", "disableScrollEnd", "highlight", "filterItems", "markFirst", "internalFiltering", "virtualScroll", "required", "typeahead", "minTermLength", "typeToSearchText", "aria-describedby", "aria-labelledby", "aria-invalid", "searchFunc", "showCurrencySymbol", "showBankBranchCode", "groupByFn", "groupValueFn", "size", "compareItemsWith"], outputs: ["search", "clearSearch", "scroll", "scrollToEnd", "remove", "change", "filterChange", "focus", "blur"] }, { type: ValidationMessageComponent, selector: "bb-payord-validation-message", inputs: ["control", "validationMessages", "label", "id", "hideGeneric"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i5.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }], pipes: { "async": i4.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: MultiPaymentAccountSelectorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-multi-payment-account-selector',
                    templateUrl: './multipayment-account-selector.component.html',
                }]
        }] });

class PayordContactSelectorComponent {
    constructor() {
        this.listStateType = ListState;
        this.inputFocused = false;
        this.destroy$ = new Subject();
        this.searchQuery = '';
        this.defaultEmptyStateTitle = $localize `:@@payord.contact.selector.ui.contacts.nothing-found.label:No contacts`;
        this.defaultEmptyStateSubtitle = $localize `:@@payord.contact.selector.ui.contacts.nothing-found.subtitle:You don't have any contacts to be displayed.`;
        this.defaultErrorStateTitle = $localize `:@@payord.contact.selector.ui.contacts.error.label:Oops! Something went wrong`;
        this.defaultErrorStateSubtitle = $localize `:@@payord.contact.selector.ui.contacts.error.subtitle:We are unable to load your contacts Please try again.`;
    }
    ngOnInit() {
        this.registerFields();
        triggerHook(PaymentFormFieldHooks.onInit, this);
        this.listState = ListState.LOADING;
        this.contacts$ = this.options.items$.pipe(map((response) => response instanceof HttpErrorResponse ? null : response), map((contacts) => this.options.mapItems && (contacts === null || contacts === void 0 ? void 0 : contacts.length)
            ? this.options.mapItems(contacts)
            : contacts), map((contacts) => contacts === null || contacts === void 0 ? void 0 : contacts.map((contact) => (Object.assign(Object.assign({}, contact), { transferKey: this.getTransferEntry(contact) })))), tap((contacts) => {
            var _a, _b;
            this.setStatus(contacts);
            // Close dropdown if there is no result by search
            if (this.inputFocused && this.searchQuery) {
                contacts && contacts.length
                    ? (_a = this.dropdownItem) === null || _a === void 0 ? void 0 : _a.open()
                    : (_b = this.dropdownItem) === null || _b === void 0 ? void 0 : _b.close();
            }
        }));
        // Sets schemeName on value change in accountNumber field
        this.group.valueChanges
            .pipe(takeUntil(this.destroy$), debounceTime(1000), map(({ accountNumber }) => accountNumber))
            .subscribe(this.setScheme.bind(this));
    }
    registerFields() {
        registerFormControl(this.group, this.config.name, this.options.validators, this.options.asyncValidators, this.options.defaultValue);
        registerFormControl(this.group, CounterPartyFields.role, [], [], 'CREDITOR');
        registerFormControl(this.group, CounterPartyFields.selectedContact, [], []);
        registerFormControl(this.group, CounterPartyFields.schemeName);
        registerFormControl(this.group, HiddenFields.selectedBeneficiary);
    }
    fetchCreditorItems(params) {
        var _a;
        if ((_a = this.options) === null || _a === void 0 ? void 0 : _a.fetchItems$) {
            this.options.fetchItems$.next(params);
        }
    }
    onSelectContact(_event, contact) {
        var _a, _b, _c, _d, _e;
        (_a = this.group.get(this.config.name)) === null || _a === void 0 ? void 0 : _a.patchValue(contact.name);
        (_b = this.group
            .get(CounterPartyFields.accountNumber)) === null || _b === void 0 ? void 0 : _b.patchValue((_c = this.getTransferEntry(contact)) === null || _c === void 0 ? void 0 : _c.value);
        (_d = this.group.get([HiddenFields.selectedBeneficiary])) === null || _d === void 0 ? void 0 : _d.patchValue(contact);
        (_e = this.dropdownItem) === null || _e === void 0 ? void 0 : _e.close();
        this.setContactId(contact);
    }
    handleSearch(query) {
        var _a;
        if (this.inputFocused) {
            this.searchQuery = query;
            this.fetchCreditorItems({
                params: { query },
                type: BeneficiaryList.CONTACTS,
            });
            if (!query) {
                (_a = this.dropdownItem) === null || _a === void 0 ? void 0 : _a.close();
            }
        }
    }
    setStatus(contacts) {
        if (!contacts) {
            this.listState = ListState.ERROR;
        }
        else if (!contacts.length) {
            this.listState = ListState.EMPTY;
        }
        else if (contacts.length) {
            this.listState = ListState.LIST;
        }
    }
    onClear() {
        var _a;
        (_a = this.group.get(this.config.name)) === null || _a === void 0 ? void 0 : _a.reset();
        this.fetchCreditorItems({ type: BeneficiaryList.CONTACTS });
    }
    focusHandler() {
        this.inputFocused = true;
    }
    onBlur() {
        this.inputFocused = false;
    }
    setContactId(contact) {
        var _a;
        (_a = this.group
            .get([CounterPartyFields.selectedContact])) === null || _a === void 0 ? void 0 : _a.patchValue({ contactId: contact === null || contact === void 0 ? void 0 : contact.id });
    }
    /**
     * Sets schemeName for payment order request payload
     * Checks entered value with regex pattern to detect if it is email, phone number or accountNumber
     */
    setScheme(counterPartyIdentification) {
        var _a;
        if (!counterPartyIdentification)
            return;
        const scheme = (_a = this.options.contactSchemes) === null || _a === void 0 ? void 0 : _a.find(({ regex }) => regex === null || regex === void 0 ? void 0 : regex.test(counterPartyIdentification));
        let schemeValue;
        switch (scheme === null || scheme === void 0 ? void 0 : scheme.name) {
            case ContactScheme.email:
                schemeValue = SchemeNames.EMAIL;
                break;
            case ContactScheme.phoneNumber:
                schemeValue = SchemeNames.MOBILE;
                break;
            case ContactScheme.accountNumber:
                schemeValue = SchemeNames.BBAN;
                break;
        }
        if (schemeValue) {
            this.group.controls[CounterPartyFields.schemeName].patchValue(schemeValue, { emitEvent: false });
        }
    }
    /**
     * Return first scheme value of contact. That allows customer to prioritize either email, phone number or account number for a contact.
     * For instance [email, phoneNumber] will return mail if there is a mail value in contact item, otherwise will check phoneNumber.
     * This is
     */
    getTransferEntry(contact) {
        var _a, _b;
        const defaultScheme = ContactScheme.accountNumber;
        const firstScheme = ((_b = (_a = this.options.contactSchemes) === null || _a === void 0 ? void 0 : _a.find((scheme) => !!contact.accounts[0][scheme.name])) === null || _b === void 0 ? void 0 : _b.name) || defaultScheme;
        return { scheme: firstScheme, value: contact.accounts[0][firstScheme] };
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
        triggerHook(PaymentFormFieldHooks.onDestroy, this);
    }
}
/** @nocollapse */ PayordContactSelectorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordContactSelectorComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PayordContactSelectorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordContactSelectorComponent, selector: "bb-payord-contact-selector", viewQueries: [{ propertyName: "dropdownItem", first: true, predicate: ["dd"], descendants: true }], ngImport: i0, template: "<div\n  class=\"form-group bb-dynamic-input\"\n  [ngClass]=\"options?.cssClasses\"\n  *ngIf=\"!config?.hidden\"\n>\n  <label *ngIf=\"options?.label\" [for]=\"'payord-contact-selector-search-box'\"\n    >{{ options?.label }}\n  </label>\n\n  <div\n    ngbDropdown\n    #dd=\"ngbDropdown\"\n    class=\"full-width-typeahead bb-payment-card-state bb-block bb-block--md\"\n  >\n    <span\n      class=\"bb-dynamic-input__helper-text bb-text-support\"\n      *ngIf=\"options?.helperText\"\n      [attr.id]=\"'payord-contact-selector__helper-text'\"\n      [textContent]=\"options?.helperText\"\n    >\n    </span>\n\n    <bb-search-box-ui\n      ngbDropdownAnchor\n      (clear)=\"onClear()\"\n      (focus)=\"focusHandler()\"\n      (blur)=\"onBlur()\"\n      [formControl]=\"group.controls[config.name]\"\n      [placeholder]=\"options?.placeholder\"\n      [squareBorder]=\"options?.squareBorder\"\n      [autocomplete]=\"options?.autocomplete || 'off'\"\n      (ngModelChange)=\"handleSearch(group.controls[config.name].value)\"\n      [showClear]=\"true\"\n      [id]=\"'payord-contact-selector-search-box'\"\n      [attr.data-role]=\"'contact-selector-search-box'\"\n    >\n      <button\n        bbButton\n        ngbDropdownToggle\n        color=\"unstyled\"\n        [attr.aria-label]=\"'contact dropdown button'\"\n      >\n        <bb-icon-ui name=\"contacts\"></bb-icon-ui>\n      </button>\n    </bb-search-box-ui>\n\n    <div\n      ngbDropdownMenu\n      class=\"dropdown-menu bb-product-selector__dropdown-menu dropdown-menu-right pre-scrollable-typeahead\"\n    >\n      <div class=\"dropdown-menu-inner-container\">\n        <!-- CONTACTS -->\n        <ng-container *ngIf=\"contacts$ | async as contacts\">\n          <ng-container *ngIf=\"listState === listStateType.LIST\">\n            <ng-container *ngFor=\"let contact of contacts\">\n              <ng-container\n                *ngTemplateOutlet=\"contactTemp; context: { $implicit: contact }\"\n              >\n              </ng-container>\n            </ng-container>\n          </ng-container>\n        </ng-container>\n        <!-- TODO UPDATE EMPTY AND ERROR STATES -->\n        <ng-container *ngIf=\"listState === listStateType.ERROR\">\n          <ng-container *ngTemplateOutlet=\"errorState\"></ng-container>\n        </ng-container>\n        <ng-container *ngIf=\"listState === listStateType.EMPTY\">\n          <ng-container *ngTemplateOutlet=\"emptyState\"></ng-container>\n        </ng-container>\n        <ng-container *ngIf=\"listState === listStateType.LOADING\">\n          <ng-container *ngTemplateOutlet=\"loading\"></ng-container>\n        </ng-container>\n      </div>\n    </div>\n    <bb-payord-validation-message\n      [control]=\"group?.controls[config.name]\"\n      [validationMessages]=\"options?.validationMessages\"\n      [label]=\"options?.label || 'Beneficiary name'\"\n    ></bb-payord-validation-message>\n  </div>\n</div>\n\n<ng-template #contactTemp let-contact>\n  <button\n    role=\"menuitem\"\n    type=\"button\"\n    class=\"bb-stack\"\n    (click)=\"onSelectContact($event, contact)\"\n    ngbDropdownItem\n  >\n    <div class=\"bb-stack__item\">\n      <span class=\"sr-only\" i18n=\"@@payord.contact.selector.ui.group.contacts\"\n        >Contact</span\n      >\n      <bb-icon-ui\n        size=\"xl\"\n        class=\"bb-stack text-muted\"\n        name=\"account-box\"\n      ></bb-icon-ui>\n    </div>\n\n    <div\n      class=\"text-left bb-stack__item\"\n      *ngIf=\"contact?.transferKey as transferKey\"\n    >\n      <span\n        class=\"sr-only\"\n        i18n=\"@@payord.contact.selector.ui.contact.account.name.label\"\n        id=\"contact_accountNameLabel\"\n      >\n        Contact name:\n      </span>\n      <div attr.aria-labelledby=\"contact_accountNameLabel\" class=\"bb-text-bold\">\n        {{ contact?.name }}\n      </div>\n      <span\n        class=\"sr-only\"\n        i18n=\"@@payord.contact.selector.ui.contact.account.number.label\"\n        id=\"contact_accountNumberLabel\"\n      >\n        { transferKey.scheme, select, accountNumber { Account Number } email {\n        Email } phoneNumber { Phone Number } }\n      </span>\n      <div\n        class=\"text-dark\"\n        *ngIf=\"contact?.accounts[0]?.accountNumber\"\n        attr.aria-labelledby=\"contact_accountNumberLabel\"\n        class=\"bb-subtitle bb-text-support\"\n      >\n        {{ transferKey.value }}\n      </div>\n    </div>\n  </button>\n</ng-template>\n\n<ng-template #emptyState>\n  <bb-empty-state-ui\n    data-role=\"contacts-empty-state\"\n    iconSize=\"xxl\"\n    class=\"bb-state-container\"\n    iconModifier=\"contacts\"\n    [title]=\"options?.emptyStateTitle || defaultEmptyStateTitle\"\n    [subtitle]=\"options?.emptyStateSubtitle || defaultEmptyStateSubtitle\"\n  >\n  </bb-empty-state-ui>\n</ng-template>\n<ng-template #errorState>\n  <bb-empty-state-ui\n    data-role=\"contacts-error-state\"\n    iconSize=\"xxl\"\n    class=\"bb-state-container\"\n    iconModifier=\"error-outline\"\n    [title]=\"options?.errorStateTitle || defaultErrorStateTitle\"\n    [subtitle]=\"options?.errorStateSubtitle || defaultErrorStateSubtitle\"\n  >\n  </bb-empty-state-ui>\n</ng-template>\n\n<ng-template #loading>\n  <div class=\"bb-state-container\">\n    <bb-loading-indicator-ui loaderSize=\"md\"></bb-loading-indicator-ui>\n  </div>\n</ng-template>\n", components: [{ type: i1$e.SearchBoxComponent, selector: "bb-search-box-ui", inputs: ["placeholder", "maxLength", "squareBorder", "typeaheadOptions", "showSearch", "showClear", "searchLabel", "clearLabel", "autocomplete"], outputs: ["submit", "clear", "valueChange"] }, { type: i2$3.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: ValidationMessageComponent, selector: "bb-payord-validation-message", inputs: ["control", "validationMessages", "label", "id", "hideGeneric"] }, { type: i6.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }, { type: i4$1.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i7$1.NgbDropdown, selector: "[ngbDropdown]", inputs: ["open", "placement", "container", "autoClose", "display", "dropdownClass"], outputs: ["openChange"], exportAs: ["ngbDropdown"] }, { type: i7$1.NgbDropdownAnchor, selector: "[ngbDropdownAnchor]" }, { type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i7.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i7$1.NgbDropdownToggle, selector: "[ngbDropdownToggle]" }, { type: i7$1.NgbDropdownMenu, selector: "[ngbDropdownMenu]" }, { type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i4.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i7$1.NgbDropdownItem, selector: "[ngbDropdownItem]", inputs: ["disabled"] }], pipes: { "async": i4.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordContactSelectorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payord-contact-selector',
                    templateUrl: './payord-contact-selector.component.html',
                }]
        }], propDecorators: { dropdownItem: [{
                type: ViewChild,
                args: ['dd']
            }] } });

/**
 * Payment component field types
 */
const PaymentComponentsMap = {
    [PaymentComponents.text]: PayordTextboxComponent,
    [PaymentComponents.textarea]: PayordTextAreaComponent,
    [PaymentComponents.address]: PayordAddressComponent,
    [PaymentComponents.select]: PayordSelectComponent,
    [PaymentComponents.radio]: PayordRadioComponent,
    [PaymentComponents.debitAccountSelector]: PayordDebitAccountSelectorComponent,
    [PaymentComponents.beneficiarySelector]: PayordBeneficiarySelectorComponent,
    [PaymentComponents.schedule]: PayordScheduleComponent,
    [PaymentComponents.amount]: PayordAmountComponent,
    [PaymentComponents.sanctionedCurrencyAmount]: PayordSanctionedCurrencyAmountComponent,
    [PaymentComponents.checkbox]: PayordCheckboxComponent,
    [PaymentComponents.switch]: PayordSwitchComponent,
    [PaymentComponents.date]: PayordDateComponent,
    [PaymentComponents.number]: PayordNumberComponent,
    [PaymentComponents.phone]: PayordPhoneComponent,
    [PaymentComponents.selectPaymentOption]: PayordSelectPaymentOptionComponent,
    [PaymentComponents.paymentCost]: PayordPaymentCostComponent,
    [PaymentComponents.chargeBearer]: PayordChargeBearerComponent,
    [PaymentComponents.internalAccountSelector]: PayordInternalAccountSelectorComponent,
    [PaymentComponents.compactAmount]: PayordCompactAmountComponent,
    [PaymentComponents.scheduleHeader]: PayordScheduleHeaderComponent,
    [PaymentComponents.buttonGroup]: PayordButtonGroupComponent,
    [PaymentComponents.countrySelector]: PayordCountrySelectorComponent,
    [PaymentComponents.sanctionedCountrySelector]: PayordSanctionedCountrySelectorComponent,
    [PaymentComponents.multiPaymentCard]: MultiPaymentCardComponent,
    /** @depreacted Will be removed in widget collection v3.11.0 */
    [PaymentComponents.creditDebitSelector]: PayordCreditDebitSelectorComponent,
    [PaymentComponents.internalAmountOptions]: PayordInternalAmountOptionsComponent,
    [PaymentComponents.header]: PayordHeaderComponent,
    [PaymentComponents.purposeOfPayment]: PayordPurposeOfPaymentComponent,
    [PaymentComponents.alert]: PayordAlertComponent,
    [PaymentComponents.scheduleSwitch]: PayordScheduleSwitchComponent,
    [PaymentComponents.beneficiaryGroupHeader]: PayordBeneficiaryGroupHeaderComponent,
    [PaymentComponents.multiPaymentAccountSelector]: MultiPaymentAccountSelectorComponent,
    [PaymentComponents.contactSelector]: PayordContactSelectorComponent,
    [PaymentComponents.accountSelector]: PayordDebitAccountSelectorComponent,
};

class ComponentsFactoryService {
    constructor() {
        this.componentsMap = Object.assign({}, PaymentComponentsMap);
    }
    /**
     * Registers custom fields
     *
     * @param components Payment components
     * @returns
     */
    registerCustomFields(components = {}) {
        for (const key in components) {
            if (components.hasOwnProperty(key)) {
                this.componentsMap[key] = components[key];
            }
        }
    }
    /**
     * Registers custom fields for payment configs
     *
     * @param paymentConfigs Payment configurations
     * @returns
     */
    registerCustomFieldsForPaymentConfigs(paymentConfigs) {
        for (const config of paymentConfigs) {
            if (config.customFields) {
                this.registerCustomFields(config.customFields);
            }
        }
    }
    /**
     * Gets a form field
     *
     * @param formFieldType Type of the form field
     * @returns
     */
    getFormField(formFieldType) {
        return this.componentsMap[formFieldType] || PayordTextboxComponent;
    }
}
/** @nocollapse */ ComponentsFactoryService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ComponentsFactoryService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ ComponentsFactoryService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ComponentsFactoryService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ComponentsFactoryService, decorators: [{
            type: Injectable
        }] });

class PayordGroupComponent {
    constructor(visibilityService) {
        this.visibilityService = visibilityService;
        this.gc$ = new EventEmitter();
    }
    ngOnInit() {
        this.eventName = this.config.parent
            ? `${this.config.parent}.${this.config.name}`
            : this.config.name;
        this.visibilityService.show$
            .pipe(map(({ name, items }) => mapDependentItems(items, name).find((dep) => dep.parent === this.eventName)), takeUntil(this.gc$))
            .subscribe((data) => {
            var _a;
            if ((_a = data === null || data === void 0 ? void 0 : data.items) === null || _a === void 0 ? void 0 : _a.length) {
                this.showFields(data.items);
            }
        });
        this.visibilityService.hide$
            .pipe(map(({ name, items }) => mapDependentItems(items, name).find((dep) => dep.parent === this.eventName)), takeUntil(this.gc$))
            .subscribe((data) => {
            var _a;
            if ((_a = data === null || data === void 0 ? void 0 : data.items) === null || _a === void 0 ? void 0 : _a.length) {
                this.hideFields(data.items);
            }
        });
    }
    scanHideableItems(items) {
        const hideableFields = {};
        items.forEach((itemName) => {
            hideableFields[itemName] = true;
        });
        return hideableFields;
    }
    showFields(fieldsNames) {
        const hideableFields = this.scanHideableItems(fieldsNames);
        let control;
        this.config.fields.forEach((field) => {
            var _a;
            if (hideableFields[field.name]) {
                field.hidden = false;
                control = this.group.get(`${this.config.name}.${field.name}`);
                if (control && ((_a = field === null || field === void 0 ? void 0 : field.options) === null || _a === void 0 ? void 0 : _a.isConditionalMandatory)) {
                    control.setValidators([
                        Validators.required,
                        ...(field.options.validators || []),
                    ]);
                    control.setAsyncValidators([
                        ...(field.options.asyncValidators || []),
                    ]);
                    control.updateValueAndValidity();
                }
            }
        });
    }
    hideFields(fieldsNames) {
        const hideableFields = this.scanHideableItems(fieldsNames);
        let control;
        this.config.fields.forEach((field) => {
            var _a, _b, _c, _d, _e, _f, _g, _h;
            if (hideableFields[field.name]) {
                field.hidden = true;
                control = ((_a = field === null || field === void 0 ? void 0 : field.options) === null || _a === void 0 ? void 0 : _a.mapToField)
                    ? this.getMappedField(field.name, field.options.mapToField)
                    : this.group.get(`${this.config.name}.${field.name}`);
                if (control && !((_b = field === null || field === void 0 ? void 0 : field.options) === null || _b === void 0 ? void 0 : _b.keepValueOnHidden)) {
                    if ((_c = field === null || field === void 0 ? void 0 : field.options) === null || _c === void 0 ? void 0 : _c.isConditionalMandatory) {
                        control.setValidators(null);
                        control.setAsyncValidators(null);
                        control.updateValueAndValidity();
                    }
                    control.reset();
                    if ((_d = field === null || field === void 0 ? void 0 : field.options) === null || _d === void 0 ? void 0 : _d.defaultValue) {
                        control.patchValue(field.options.defaultValue);
                    }
                }
                this.hideNestedField(field);
                if ((_f = (_e = field) === null || _e === void 0 ? void 0 : _e.fields) === null || _f === void 0 ? void 0 : _f.length) {
                    (_h = (_g = field) === null || _g === void 0 ? void 0 : _g.fields) === null || _h === void 0 ? void 0 : _h.forEach((nestedField) => this.hideNestedField(nestedField));
                }
            }
        });
    }
    hideNestedField(field) {
        var _a, _b;
        if (((_a = field === null || field === void 0 ? void 0 : field.options) === null || _a === void 0 ? void 0 : _a.dependants) && !((_b = field === null || field === void 0 ? void 0 : field.options) === null || _b === void 0 ? void 0 : _b.keepDependantsOnHide)) {
            mapDependentItems(field.options.dependants, field.parent).forEach(({ parent, items }) => {
                this.visibilityService.hideItems(parent, items);
            });
        }
    }
    getMappedField(fieldName, mapToField) {
        let parent = this.group;
        let control;
        while (parent) {
            control = parent.get(`${mapToField}.${fieldName}`);
            if (control) {
                return control;
            }
            parent = parent.parent;
        }
        return null;
    }
    ngOnDestroy() {
        this.gc$.next();
        this.gc$.complete();
    }
}
/** @nocollapse */ PayordGroupComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordGroupComponent, deps: [{ token: VisibilityService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PayordGroupComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordGroupComponent, selector: "bb-payord-group", inputs: { config: "config", group: "group" }, ngImport: i0, template: "<ng-container *ngIf=\"!config?.hidden\">\n  <div\n    *ngIf=\"config?.cssClasses?.length; else defaultTmpl\"\n    [ngClass]=\"config?.cssClasses\"\n  >\n    <ng-container *ngTemplateOutlet=\"defaultTmpl\"></ng-container>\n  </div>\n</ng-container>\n\n<ng-template #defaultTmpl>\n  <ng-container *ngIf=\"!config.collapsible; else collapsibleTmpl\">\n    <bb-fieldset-ui\n      *ngIf=\"config?.title; else subGroup\"\n      [heading]=\"config?.title\"\n    >\n      <div *ngIf=\"config.subTitle\" class=\"bb-fieldset\">\n        {{ config?.subTitle }}\n      </div>\n      <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n    </bb-fieldset-ui>\n    <ng-container *ngIf=\"config?.separator\">\n      <bb-separator\n        [options]=\"config.separator\"\n        class=\"d-block mt-5\"\n      ></bb-separator>\n    </ng-container>\n  </ng-container>\n</ng-template>\n\n<ng-template #subGroup>\n  <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n</ng-template>\n\n<ng-template #collapsibleTmpl>\n  <fieldset class=\"bb-fieldset\">\n    <bb-collapsible-ui data-role=\"schedule-toggle\" #collapse>\n      <ng-template bbCollapsibleHeader let-toggle=\"toggle\" let-isOpen=\"isOpen\">\n        <div\n          (click)=\"collapse.toggle()\"\n          [attr.aria-expanded]=\"isOpen\"\n          class=\"bb-stack justify-content-between col-12\"\n        >\n          <legend>\n            <span class=\"bb-label\">{{ config?.title }}</span>\n          </legend>\n          <button\n            bbButton\n            color=\"outline\"\n            [attr.aria-label]=\"config?.title\"\n            [attr.aria-expanded]=\"isOpen\"\n            (click)=\"collapse.toggle(); $event.stopPropagation()\"\n          >\n            <bb-icon-ui\n              [name]=\"isOpen ? 'toggle-up' : 'toggle-down'\"\n            ></bb-icon-ui>\n          </button>\n        </div>\n        <hr class=\"mt-0 mx-3\" />\n      </ng-template>\n      <ng-template bbCollapsibleBody>\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n      </ng-template>\n    </bb-collapsible-ui>\n  </fieldset>\n</ng-template>\n\n<ng-template #content>\n  <ng-content></ng-content>\n</ng-template>\n", components: [{ type: i2$7.FieldsetComponent, selector: "bb-fieldset-ui", inputs: ["heading", "disabled"] }, { type: i1.ӨSeparatorComponent, selector: "bb-separator", inputs: ["options"] }, { type: i1$3.CollapsibleComponent, selector: "bb-collapsible-ui", inputs: ["recreateBodyContent", "hasChevron", "isOpen"], outputs: ["isOpenChange"] }, { type: i2$3.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i4.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i1$3.CollapsibleHeaderDirective, selector: "ng-template[bbCollapsibleHeader]" }, { type: i7.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i1$3.CollapsibleBodyDirective, selector: "ng-template[bbCollapsibleBody]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordGroupComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payord-group',
                    templateUrl: './payord-group.component.html',
                }]
        }], ctorParameters: function () { return [{ type: VisibilityService }]; }, propDecorators: { config: [{
                type: Input
            }], group: [{
                type: Input
            }] } });

class PaymentFormFieldDirective {
    constructor(resolver, container, componentsFactory) {
        this.resolver = resolver;
        this.container = container;
        this.componentsFactory = componentsFactory;
    }
    ngOnInit() {
        const component = this.componentsFactory.getFormField(this.config.type);
        const factory = this.resolver.resolveComponentFactory(component);
        this.component = this.container.createComponent(factory);
        this.component.instance.config = this.config;
        this.component.instance.group = this.group;
        this.component.instance.options = this.options;
    }
}
/** @nocollapse */ PaymentFormFieldDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentFormFieldDirective, deps: [{ token: i0.ComponentFactoryResolver }, { token: i0.ViewContainerRef }, { token: ComponentsFactoryService }], target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ PaymentFormFieldDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: PaymentFormFieldDirective, selector: "[bbPaymentFormField]", inputs: { options: "options", config: "config", group: "group" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PaymentFormFieldDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbPaymentFormField]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }, { type: i0.ViewContainerRef }, { type: ComponentsFactoryService }]; }, propDecorators: { options: [{
                type: Input
            }], config: [{
                type: Input
            }], group: [{
                type: Input
            }] } });

class PayordFormComponent {
    constructor(fb, componentsFactory, formEl) {
        this.fb = fb;
        this.componentsFactory = componentsFactory;
        this.formEl = formEl;
        /**
         * Event emitted when the form is submitted.
         */
        this.submitted = new EventEmitter();
        /**
         * Event emitted when the form is reset.
         */
        this.clear = new EventEmitter();
        /**
         * The flag to denote if the widget is rendered inside a modal.
         */
        this.isModalView = false;
        /**
         * The flag to denote if the widget is rendered in payment template mode.
         */
        this.isTemplateMode = false;
        /**
         * The flag to denote if it is a debit payment.
         */
        this.isDebitPayment = false;
        /**
         * The flag to denote if the widget is rendered in payment edit mode.
         */
        this.isEditPaymentModal = false;
        /**
         * Payment mode type.
         */
        this.paymentMode = PaymentMode.CREATE_PAYMENT;
        /**
         * Event emitter when we cancel payment editing (sends form to check if it's not changed)
         */
        this.editPaymentCancel = new EventEmitter();
        /**
         * Event emitter when we submit editing payment (sends form)
         */
        this.editPaymentSubmit = new EventEmitter();
        this.isSubmitting$ = new BehaviorSubject(false);
        this.isSubmittingShared$ = this.isSubmitting$.asObservable().pipe(shareReplay(1));
        this.controls = [];
        this.paymentModeType = PaymentMode;
    }
    /**
     * Flag that denotes if form is being submitted
     */
    set submitting(isSubmitting) {
        this.isSubmitting$.next(isSubmitting);
    }
    scrollToError() {
        var _a;
        focusErrorElement((_a = this.formEl) === null || _a === void 0 ? void 0 : _a.nativeElement, 'small.bb-input-validation-message');
    }
    ngOnInit() {
        this.form = this.formItem || this.fb.group({});
        this.buttonGroupConfig = this.getButtonGroupConfig();
        this.componentsFactory.registerCustomFields(this.config.customFields);
        this.createFormFields(this.config.fields, this.form, this.controls);
        registerFormControl(this.form, 'paymentType', [], [], this.config.paymentType);
        this.defaultBankCodeSettingControl = registerFormControl(this.form, 'defaultBankCodeSetting');
        this.inputFormSettingControl =
            this.form.get(PaymentOptionFields.inputFormFromSettings) ||
                registerFormControl(this.form, PaymentOptionFields.inputFormFromSettings);
        if (this.isTemplateMode) {
            this.templateNameControl = registerFormControl(this.form, PaymentTemplateFields.templateName, [Validators.required]);
            if (this.paymentMode === PaymentMode.EDIT_TEMPLATE) {
                registerFormControl(this.form, PaymentTemplateFields.paymentTemplateId);
            }
        }
        if (this.isDebitPayment) {
            registerFormControl(this.form, HiddenFields.isDebitPayment, [], [], true);
        }
        this.listenDefaultBankCodeSettingChange();
        this.listenFormSettingChange();
    }
    ngOnDestroy() {
        if (this.inputFormSettingSubscription) {
            this.inputFormSettingSubscription.unsubscribe();
        }
        if (this.defaultBankCodeSettingSubscription) {
            this.defaultBankCodeSettingSubscription.unsubscribe();
        }
    }
    createFormFields(arr, _group, controlsArr, parentName) {
        arr.forEach((control) => {
            const mappedField = control.options && control.options.mapToField;
            const group = mappedField
                ? this.form.get(mappedField)
                : _group;
            const parent = mappedField || parentName;
            const subArray = [];
            if (control.fields instanceof Array) {
                const subGroup = group.get(control.name) || this.fb.group({});
                this.createFormFields(control.fields, subGroup, subArray, parent ? `${parent}.${control.name}` : control.name);
                group.addControl(control.name, subGroup);
                controlsArr.push(Object.assign(Object.assign({}, control), { fields: subArray, parent: parentName }));
            }
            else {
                controlsArr.push(Object.assign(Object.assign({}, control), { parent }));
            }
        });
    }
    getFormGroup(field) {
        return this.form.get(field.parent) || this.form;
    }
    getButtonGroupConfig() {
        return {
            type: PaymentComponents.buttonGroup,
            name: PaymentComponents.buttonGroup,
            options: {
                submitting$: this.isSubmitting$,
                isModalView: this.isModalView,
                isTemplateMode: this.isTemplateMode,
                templateModeType: this.templateModeType,
                paymentMode: this.paymentMode,
                submit: this.onSubmit.bind(this),
                reset: this.resetForm.bind(this),
            },
        };
    }
    getIcon() {
        return getIconByPaymnentType(this.config.paymentType);
    }
    onSubmit() {
        this.form.markAsDirty();
        this.form.markAllAsTouched();
        this.form.updateValueAndValidity();
        if (!this.form.valid) {
            this.scrollToError();
        }
        else if (this.form.valid && !this.submitting) {
            this.submitted.emit(this.form);
        }
    }
    onEditionSubmit() {
        this.form.markAllAsTouched();
        if (this.form.valid) {
            this.editPaymentSubmit.emit(this.form);
        }
        else {
            this.scrollToError();
        }
    }
    onEditionCancel() {
        this.editPaymentCancel.emit(this.form);
    }
    listenDefaultBankCodeSettingChange() {
        this.defaultBankCodeSettingSubscription =
            this.defaultBankCodeSettingControl.valueChanges.subscribe(() => {
                setAdditionalBankDetails(this.form, this.config);
            });
    }
    listenFormSettingChange() {
        this.inputFormSettingSubscription =
            this.inputFormSettingControl.valueChanges
                .pipe(startWith(this.inputFormSettingControl.value), distinctUntilChanged(), filter((value) => !!value))
                .subscribe((value) => {
                for (const inputFormSetting of value.inputFormSettings || []) {
                    applyInputFormSettingForCountry({
                        inputFormSetting,
                        form: this.form,
                        config: this.config,
                    });
                }
                applyPurposeOfPaymentSettings({
                    form: this.form,
                    config: this.config,
                });
            });
    }
    resetForm() {
        this.clear.emit();
    }
}
/** @nocollapse */ PayordFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordFormComponent, deps: [{ token: i5.FormBuilder }, { token: ComponentsFactoryService }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PayordFormComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordFormComponent, selector: "bb-payord-form", inputs: { config: "config", isModalView: "isModalView", isTemplateMode: "isTemplateMode", isDebitPayment: "isDebitPayment", isEditPaymentModal: "isEditPaymentModal", templateModeType: "templateModeType", formItem: "formItem", submitting: "submitting", paymentMode: "paymentMode" }, outputs: { submitted: "submitted", clear: "clear", editPaymentCancel: "editPaymentCancel", editPaymentSubmit: "editPaymentSubmit" }, providers: [VisibilityService, ComponentsFactoryService], ngImport: i0, template: "<form class=\"dynamic-form\" [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n  <!-- show template name control when template mode is true-->\n  <div\n    class=\"bb-stack bb-stack--density-sm bb-text-support bb-block bb-block--lg col-12\"\n    *ngIf=\"\n      paymentMode === paymentModeType.EDIT_TEMPLATE ||\n      paymentMode === paymentModeType.COPY_PAYMENT\n    \"\n  >\n    <bb-icon-ui\n      *ngIf=\"getIcon() as icon\"\n      class=\"bb-stack__item\"\n      [name]=\"icon\"\n    ></bb-icon-ui>\n    <div class=\"bb-stack__item\" data-role=\"payment-type-label\">\n      {{ config?.name }}\n    </div>\n  </div>\n  <div class=\"form-group col-12\" *ngIf=\"isTemplateMode && templateNameControl\">\n    <bb-input-text-ui\n      label=\"Name of the template\"\n      i18n-label=\"@@payord-form.template-name.label\"\n      [formControl]=\"templateNameControl\"\n      [maxLength]=\"50\"\n      autocomplete=\"off\"\n      [showCharCounter]=\"true\"\n    >\n    </bb-input-text-ui>\n\n    <bb-input-validation-message-ui\n      [showErrors]=\"templateNameControl.touched && templateNameControl?.invalid\"\n    >\n      <ng-container\n        *ngIf=\"\n          templateNameControl.errors && templateNameControl.errors['required']\n        \"\n      >\n        <span\n          data-role=\"required-template-name-error\"\n          i18n=\"@@payment-form-template-name.validation.required-error\"\n        >\n          Template name is required\n        </span>\n      </ng-container>\n    </bb-input-validation-message-ui>\n  </div>\n\n  <!-- Render form controls  -->\n  <ng-container *ngFor=\"let field of controls\">\n    <ng-container\n      *ngTemplateOutlet=\"\n        field.fields ? formGroupTmpl : formControlTmpl;\n        context: { $implicit: field }\n      \"\n    >\n    </ng-container>\n  </ng-container>\n\n  <!--Render button group -->\n  <ng-container\n    *ngIf=\"paymentMode !== paymentModeType.EDIT_PAYMENT; else editButtonGroup\"\n  >\n    <ng-container\n      *ngTemplateOutlet=\"\n        formControlTmpl;\n        context: { $implicit: buttonGroupConfig }\n      \"\n    ></ng-container>\n  </ng-container>\n\n  <ng-template #editButtonGroup>\n    <div class=\"btn-container bb-button-bar\">\n      <bb-load-button-ui\n        class=\"bb-button-bar__button\"\n        color=\"primary\"\n        [isLoading]=\"isSubmittingShared$ | async\"\n        (click)=\"onEditionSubmit()\"\n        data-role=\"submit-button\"\n        i18n=\"@@omni-edit-payment-next-btn\"\n      >\n        Next\n      </bb-load-button-ui>\n      <button\n        bbButton\n        class=\"bb-button-bar__button\"\n        color=\"link\"\n        data-role=\"cancel-button\"\n        (click)=\"onEditionCancel()\"\n        [disabled]=\"isSubmittingShared$ | async\"\n        i18n=\"@@omni-edit-payment-cancel-btn\"\n      >\n        Cancel\n      </button>\n    </div>\n  </ng-template>\n\n  <ng-template let-config #formGroupTmpl>\n    <bb-payord-group [config]=\"config\" [group]=\"getFormGroup(config)\">\n      <ng-container *ngFor=\"let control of config.fields\">\n        <ng-container\n          *ngTemplateOutlet=\"\n            control.fields ? formGroupTmpl : formControlTmpl;\n            context: { $implicit: control }\n          \"\n        >\n        </ng-container>\n      </ng-container>\n    </bb-payord-group>\n  </ng-template>\n\n  <ng-template let-config #formControlTmpl>\n    <ng-container\n      bbPaymentFormField\n      [config]=\"config\"\n      [options]=\"config.options\"\n      [group]=\"getFormGroup(config)\"\n    ></ng-container>\n  </ng-template>\n</form>\n", components: [{ type: i2$3.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i1$5.InputTextComponent, selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i3.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i2$6.LoadButtonComponent, selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }, { type: PayordGroupComponent, selector: "bb-payord-group", inputs: ["config", "group"] }], directives: [{ type: i5.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i5.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i4.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i7.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: PaymentFormFieldDirective, selector: "[bbPaymentFormField]", inputs: ["options", "config", "group"] }], pipes: { "async": i4.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordFormComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payord-form',
                    templateUrl: './payord-form.component.html',
                    providers: [VisibilityService, ComponentsFactoryService],
                }]
        }], ctorParameters: function () { return [{ type: i5.FormBuilder }, { type: ComponentsFactoryService }, { type: i0.ElementRef }]; }, propDecorators: { config: [{
                type: Input
            }], submitted: [{
                type: Output
            }], clear: [{
                type: Output
            }], isModalView: [{
                type: Input
            }], isTemplateMode: [{
                type: Input
            }], isDebitPayment: [{
                type: Input
            }], isEditPaymentModal: [{
                type: Input
            }], templateModeType: [{
                type: Input
            }], formItem: [{
                type: Input
            }], submitting: [{
                type: Input
            }], paymentMode: [{
                type: Input
            }], editPaymentCancel: [{
                type: Output
            }], editPaymentSubmit: [{
                type: Output
            }] } });

const filterPaymentConfigs = (paymentOptions, paymentTypes) => paymentOptions.map((paymentOption) => paymentTypes.filter((paymentConfig) => paymentOption.paymentType === paymentConfig.paymentType)[0]);
const getPaymentCostFieldConfig = () => ({
    name: PaymentOptionFields.paymentCost,
    type: PaymentComponents.paymentCost,
    options: {
        isWizardMode: true,
    },
});
const getSelectPaymentOptionFieldConfig = (items$, paymentTypes, checkClosedPaymentsAccess = false) => {
    const optionLabels = paymentTypes.reduce((nameMap, paymentConfig) => {
        nameMap[paymentConfig.paymentType] = paymentConfig.name;
        return nameMap;
    }, {});
    return {
        name: PaymentOptionFields.selectPaymentOption,
        type: PaymentComponents.selectPaymentOption,
        options: {
            items$,
            optionLabels,
            isWizardMode: true,
            checkClosedPaymentsAccess,
        },
    };
};
const getChargeBearerFieldConfig = () => ({
    name: PaymentOptionFields.chargeBearer,
    type: PaymentComponents.chargeBearer,
    options: {
        label: 'How fees are paid',
        isWizardMode: true,
    },
});
const getRelatedPaymentConfig = (paymentConfigs) => paymentConfigs.filter((paymentConfig) => paymentConfig && !!paymentConfig.relatedPaymentTypes)[0];
const getMappedGroup = (mappedGroupName, form) => {
    let mappedGroup = form.get(mappedGroupName);
    let parent = form;
    const subGroups = mappedGroupName.split('.');
    if (mappedGroup)
        return mappedGroup;
    for (const subGroup of subGroups) {
        if (!parent.get(subGroup)) {
            parent.addControl(subGroup, new FormGroup({}));
        }
        mappedGroup = parent.get(subGroup);
        parent = mappedGroup;
    }
    return mappedGroup;
};
/**
 * Tags each form field in a payment config to the corresponding parent form Group.
 */
const tagFormGroupToFormFields = (arr, _group, controlsArr, form, parentName = '') => {
    arr.forEach((control) => {
        const mappedField = control.options && control.options.mapToField;
        const group = mappedField ? getMappedGroup(mappedField, form) : _group;
        const parent = mappedField || parentName;
        const subArray = [];
        if (control.fields instanceof Array) {
            const subGroup = group.get(control.name) || new FormGroup({});
            tagFormGroupToFormFields(control.fields, subGroup, subArray, form, parent ? `${parent}.${control.name}` : control.name);
            group.addControl(control.name, subGroup);
            controlsArr.push(Object.assign(Object.assign({}, control), { fields: subArray, parent: parentName }));
        }
        else {
            controlsArr.push(Object.assign(Object.assign({}, control), { parent }));
        }
    });
};
const hasSameFields = (paymentConfigs) => {
    let similar = false;
    const relatedTypeConfig = getRelatedPaymentConfig(paymentConfigs);
    if (relatedTypeConfig && relatedTypeConfig.relatedPaymentTypes) {
        const relatedPaymentTypes = [
            relatedTypeConfig.paymentType,
            ...relatedTypeConfig.relatedPaymentTypes,
        ];
        similar = paymentConfigs.every((config) => relatedPaymentTypes.indexOf(config.paymentType) !== -1);
    }
    else {
        similar = paymentConfigs.every((config) => config.paymentType === paymentConfigs[0].paymentType);
    }
    return similar;
};

class AdaptiveFormComponent {
    constructor(formEl) {
        this.formEl = formEl;
        /**
         * The initial set of fields rendered on the form.
         * These fields are static for all payment types.
         */
        this.baseFields = [];
        /**
         * Array of payment configs that are needs to be supported by the wizard.
         */
        this.paymentTypes = [];
        /**
         * The current state of the payment. Defaults to INITIAL
         */
        this.paymentState = PaymentState.INITIAL;
        /**
         * The flag to denote if it is a debit payment.
         */
        this.isDebitPayment = false;
        /**
         * Flag to display when not payment option is avaialble
         */
        this.paymentOptionsError = false;
        /**
         * Flag to check closed payment access
         */
        this.checkClosedPaymentsAccess = false;
        /**
         * Apply a payment template event emitter
         */
        this.applyPaymentTemplate = new EventEmitter();
        /**
         * Flag that indicates wether should apply a template
         * Default value is `false`
         */
        this.shouldApplyTemplate = false;
        /**
         * The flag to denote if the widget is rendered inside a modal.
         */
        this.isModalView = false;
        /**
         * Event emitted when the form is submitted.
         */
        this.submitted = new EventEmitter();
        /**
         *  Event emitted when a payment option is selected
         */
        this.selectPaymentOption = new EventEmitter();
        /**
         * Event emitted when the form is reset.
         */
        this.clear = new EventEmitter();
        /**
         * Event emitted when a payment config is selected based on the form details.
         */
        this.selectConfig = new EventEmitter();
        this.isSubmitting$ = new BehaviorSubject(false);
        this.fetchingOptions$ = new BehaviorSubject(false);
        this.gc$ = new Subject();
        this.currentControls = [];
        this.shouldResetPaymentOptions = false;
        this.debounceInput = pipe(takeUntil(this.gc$), debounceTime(500), distinctUntilChanged());
        this.controls$ = new BehaviorSubject([]);
        this.paymentOptionControls$ = new BehaviorSubject(undefined);
        this.paymentOptionsSubject$ = new BehaviorSubject(undefined);
        this.baseControls$ = new BehaviorSubject([]);
        this.taggedBaseFields = [];
        this.retainableFields = [
            `${PaymentBaseFields.counterparty}.${CounterPartyFields.postalAddress}`,
            `${PaymentBaseFields.counterparty}.${CounterPartyFields.creditorBank}.${CounterPartyFields.postalAddress}`,
            `${PaymentBaseFields.counterparty}.${CounterPartyFields.creditorBank}.${CounterPartyFields.bic}`,
            `${PaymentBaseFields.counterparty}.${CounterPartyFields.creditorBank}.${CounterPartyFields.bankName}`,
        ];
    }
    /**
     * A subject that emit s a flag to denote if we are in the process of fetching the payment options
     */
    set fetchingOptions(isFetchingOptions) {
        this.fetchingOptions$.next(!!isFetchingOptions);
    }
    /**
     * Flag that denotes if form is being submitted
     */
    set submitting(isSubmitting) {
        this.isSubmitting$.next(isSubmitting);
    }
    ngOnInit() {
        this.form = this.formItem || new FormGroup({});
        this.paymentTypeControl = registerFormControl(this.form, 'paymentType');
        this.registerPaymentOptionControls();
        this.listenPaymentOptionsChange();
        this.listenFormSettingChange();
        // tagging the base fields is required to find the delta between the base fields and others
        tagFormGroupToFormFields(this.baseFields, this.form, this.taggedBaseFields, this.form);
        this.baseControls$.next(this.taggedBaseFields);
        this.currentControls = this.baseFields;
        this.listenChanges =
            this.fetchPaymentOptionsListener || this.listenCriticalFieldChanges;
        this.registerPostalAddressFormGroups();
        registerFormControl(this.form, 'isEditMode', [], [], this.paymentState === PaymentState.EDIT);
        if (this.paymentState === PaymentState.EDIT && this.selectedPaymentConfig) {
            this.listenPaymentType(this.selectedPaymentConfig.paymentType);
        }
        if (this.isDebitPayment) {
            registerFormControl(this.form, HiddenFields.isDebitPayment, [], [], true);
        }
        this.buttonGroupConfig = this.getButtonGroupConfig();
        this.renderPaymentOptionControls();
    }
    ngAfterViewInit() {
        this.listenChanges(this.form, this.fetchOptions$);
        this.listenPaymentTypeChanges();
        if (this.shouldApplyTemplate) {
            this.applyPaymentTemplate.emit(this.form);
        }
    }
    ngOnDestroy() {
        this.gc$.next();
        this.gc$.complete();
        this.controls$.complete();
        this.paymentOptionControls$.next([]);
        this.paymentOptionControls$.complete();
    }
    getButtonGroupConfig() {
        return {
            type: PaymentComponents.buttonGroup,
            name: PaymentComponents.buttonGroup,
            options: {
                submitting$: this.isSubmitting$,
                isLoading$: this.fetchingOptions$,
                submit: this.onSubmit.bind(this),
                reset: this.resetForm.bind(this),
                isModalView: this.isModalView,
            },
        };
    }
    registerPaymentOptionControls() {
        this.chargeBearerControl = registerFormControl(this.form, PaymentOptionFields.chargeBearer);
        this.chargeBearerOptionsControl = registerFormControl(this.form, PaymentOptionFields.chargeBearerOptions);
        this.transferFeeControl = registerFormControl(this.form, PaymentOptionFields.transferFee);
        this.selectPaymentOptionControl = registerFormControl(this.form, PaymentOptionFields.selectPaymentOption);
        this.inputFormSettingControl = registerFormControl(this.form, PaymentOptionFields.inputFormFromSettings);
    }
    registerPostalAddressFormGroups() {
        const counterpartyGroup = (this.form.get(PaymentBaseFields.counterparty));
        let creditorBankGroup = (counterpartyGroup.get(CounterPartyFields.creditorBank));
        if (!creditorBankGroup) {
            creditorBankGroup = new FormGroup({});
            counterpartyGroup.addControl(CounterPartyFields.creditorBank, creditorBankGroup);
        }
        let creditorAddressGroup = (creditorBankGroup.get(CounterPartyFields.postalAddress));
        let creditorBankAddressGroup = (creditorBankGroup.get(CounterPartyFields.postalAddress));
        if (!creditorAddressGroup) {
            creditorAddressGroup = new FormGroup({});
            counterpartyGroup.addControl(CounterPartyFields.postalAddress, creditorAddressGroup);
        }
        if (!creditorBankAddressGroup) {
            creditorBankAddressGroup = new FormGroup({});
            creditorBankGroup.addControl(CounterPartyFields.postalAddress, creditorBankAddressGroup);
        }
        addAddressFields(creditorAddressGroup);
        addAddressFields(creditorBankAddressGroup);
    }
    /**
     * Renders the provided payment config
     */
    renderPaymentConfig(paymentConfig) {
        const newControls = [];
        let deltaFields = [];
        tagFormGroupToFormFields(paymentConfig.fields, this.form, newControls, this.form);
        setAdditionalBankDetails(this.form, paymentConfig);
        if (this.currentControls.length) {
            deltaFields = this.deleteControls(this.currentControls, newControls);
        }
        const groupedDelta = this.groupDeltaFields(newControls, deltaFields);
        this.currentControls = newControls;
        this.controls$.next(groupedDelta);
        if (this.paymentTypeControl) {
            this.paymentTypeControl.patchValue(paymentConfig.paymentType);
        }
    }
    /**
     * The activate depandants feature is based on groups so we need to group delta fields in order to toggle dependatants.
     * This function is used to group sibling delta fields into groups, so that the toggle dependatants feature is retained.
     */
    groupDeltaFields(currentControls, delta) {
        const groupedFields = [];
        for (const deltaField of delta) {
            if (Array.isArray(groupedFields[groupedFields.length - 1])) {
                const prevParent = groupedFields[groupedFields.length - 1][0].parent;
                if (deltaField.parent !== PaymentBaseFields.counterparty &&
                    prevParent === deltaField.parent) {
                    groupedFields[groupedFields.length - 1].push(deltaField);
                }
                else {
                    groupedFields.push(deltaField);
                }
            }
            else if (deltaField.parent !== PaymentBaseFields.counterparty &&
                groupedFields.length &&
                groupedFields[groupedFields.length - 1].parent === deltaField.parent) {
                const prevElem = groupedFields.pop();
                groupedFields.push([prevElem, deltaField]);
            }
            else {
                groupedFields.push(deltaField);
            }
        }
        return this.mapGroupedFields(groupedFields, currentControls);
    }
    /**
     * This function is fetches the grouped delta fields and encloses them with their appropriate parent group config.
     * Doing so ensures the toggle dependants feature works as expected
     */
    mapGroupedFields(groupedFields, currentControls) {
        const configs = groupedFields.map((groupedField) => {
            if (Array.isArray(groupedField)) {
                const anccestorArray = groupedField[0].parent.split('.');
                const parent = anccestorArray.pop();
                const ancestor = anccestorArray.length
                    ? anccestorArray.length === 1
                        ? anccestorArray[0]
                        : anccestorArray.join('.')
                    : '';
                const ancestorConfig = getConfig(ancestor, currentControls);
                const parentConfig = getConfig(parent, ancestorConfig || currentControls);
                return Object.assign(Object.assign({}, parentConfig), { fields: groupedField, 
                    //reset the group title since it will be added in payment information group
                    title: '' });
            }
            else
                return groupedField;
        });
        return this.organiseConfigs(configs);
    }
    /**
     * This function encloses the non counterparty and non schedule delta fields inside payment information group.
     */
    organiseConfigs(configs) {
        const counterPartyConfigs = [];
        const paymentInfoConfigs = [];
        const scheduleConfigs = [];
        for (const config of configs) {
            config.parent = config.parent || '';
            if (config.name === CounterPartyFields.remittanceInformation ||
                config.name === CounterPartyFields.messageToBank) {
                paymentInfoConfigs.push(config);
            }
            else if (config.parent === PaymentBaseFields.counterparty ||
                config.parent.indexOf(`${PaymentBaseFields.counterparty}`) === 0) {
                counterPartyConfigs.push(config);
            }
            else if (config.name === PaymentBaseFields.schedule ||
                config.parent === PaymentBaseFields.schedule) {
                if (isFormGroupConfig(config)) {
                    scheduleConfigs.push(...config.fields);
                }
                else {
                    scheduleConfigs.push(config);
                }
            }
            else {
                paymentInfoConfigs.push(config);
            }
        }
        const paymentInfo = {
            name: 'paymentInfo',
            title: 'Payment Infomation',
            fields: [...paymentInfoConfigs],
        };
        const schedule = {
            name: PaymentBaseFields.schedule,
            fields: [...scheduleConfigs],
        };
        return [...counterPartyConfigs, paymentInfo, schedule];
    }
    /**
     * Renders the provided array of fields in the form
     */
    renderFields(fields, flatArray) {
        tagFormGroupToFormFields(fields, this.form, flatArray, this.form);
        this.controls$.next([...flatArray]);
    }
    /**
     * Deletes form controls in current array that are absent in the new array and returns the delta fields
     */
    deleteControls(currentControls, newControls) {
        const baseControlsMap = createControlsMap(this.taggedBaseFields);
        const currentControlsMap = createControlsMap(currentControls);
        const newControlsMap = createControlsMap(newControls);
        const deltaControls = [];
        // Get new configs that are not rendered in the form
        for (const key in newControlsMap) {
            if (!baseControlsMap.hasOwnProperty(key) &&
                !PaymentOptionFields[key] &&
                key !==
                    `${PaymentBaseFields.counterparty}.${CounterPartyFields.counterPartyAccountGroup}`) {
                deltaControls.push(newControlsMap[key]);
            }
        }
        // Remove existing controls from the form that are not present in the newe config
        for (const key in currentControlsMap) {
            if (currentControlsMap.hasOwnProperty(key)) {
                const controlName = key.split('.').pop();
                const control = this.form.get(key) || this.form.get(controlName);
                if (!baseControlsMap.hasOwnProperty(key) &&
                    !PaymentOptionFields[key] &&
                    !newControlsMap.hasOwnProperty(key) &&
                    this.retainableFields.indexOf(key) === -1 &&
                    control &&
                    control.parent) {
                    control.parent.removeControl(controlName);
                }
                // reset validators from retainable controls
                else if (this.retainableFields.indexOf(key) !== -1) {
                    control === null || control === void 0 ? void 0 : control.setValidators(null);
                    control === null || control === void 0 ? void 0 : control.updateValueAndValidity();
                }
            }
        }
        return deltaControls;
    }
    /**
     * Listens to the form for changes in debit account number, credit account number, amount and currency
     */
    listenCriticalFieldChanges(form, fetchOptions$) {
        // Cache the critical form controls
        const debitAccount = (form.get([PaymentBaseFields.initiator, InitiatorFields.accountNumber]));
        const creditAccount = (form.get([
            PaymentBaseFields.counterparty,
            CounterPartyFields.accountNumber,
        ]));
        const counterpartyCountry = (form.get([
            PaymentBaseFields.counterparty,
            CounterPartyFields.creditorBank,
            CounterPartyFields.postalAddress,
            CounterPartyFields.country,
        ]));
        const amountInfo = (form.get([
            PaymentBaseFields.remittanceInfo,
            RemittanceInfoFields.amountCurrencyGroup,
        ]));
        this.currentDebitAccount = debitAccount.value;
        // subscribe for value changes in the critical form controls and trigger payment options endpoint
        if (debitAccount && creditAccount && amountInfo) {
            this.debounceInput(debitAccount.valueChanges)
                .pipe(skipWhile((val) => this.currentDebitAccount === val), tap(() => {
                this.currentDebitAccount = debitAccount.value;
            }))
                .subscribe(this.fetchPaymentOptions.bind(this, form, fetchOptions$));
            this.debounceInput(creditAccount.valueChanges).subscribe(this.fetchPaymentOptions.bind(this, form, fetchOptions$));
            this.debounceInput(amountInfo.valueChanges).subscribe(this.fetchPaymentOptions.bind(this, form, fetchOptions$));
            if (counterpartyCountry) {
                this.debounceInput(counterpartyCountry.valueChanges).subscribe(this.fetchPaymentOptions.bind(this, form, fetchOptions$));
            }
        }
    }
    /**
     * Listen to the select payment option component and render the fields fo the selected payment type.
     */
    listenPaymentTypeChanges() {
        this.paymentTypeControl.valueChanges
            .pipe(distinctUntilChanged(), takeUntil(this.gc$))
            .subscribe(() => {
            this.listenPaymentType(this.paymentTypeControl.value);
        });
    }
    /**
     * Listens to changes to the payment type in the form
     */
    listenPaymentType(paymentType) {
        if (paymentType) {
            const selectedPaymentTypeConfig = this.paymentTypes.filter((paymentConfig) => paymentType === paymentConfig.paymentType)[0];
            this.selectConfig.next(selectedPaymentTypeConfig);
            this.renderPaymentConfig(selectedPaymentTypeConfig);
        }
    }
    getPaymentConfigByType(paymentType, paymentConfigs) {
        return paymentConfigs.filter((paymentConfig) => paymentType === paymentConfig.paymentType)[0];
    }
    listenPaymentOptionsChange() {
        if (this.paymentOptions$) {
            this.paymentOptions$
                .pipe(takeUntil(this.gc$), tap((options) => {
                this.onPaymentOptionsChange(options);
                this.applyCountrySpecificSettings(this.inputFormSettingControl.value);
            }))
                .subscribe();
        }
    }
    listenFormSettingChange() {
        this.inputFormSettingControl.valueChanges
            .pipe(startWith(this.inputFormSettingControl.value), takeUntil(this.gc$), distinctUntilChanged(), filter((value) => !!value))
            .subscribe((value) => this.applyCountrySpecificSettings(value));
    }
    applyCountrySpecificSettings(value) {
        const currentConfig = this.getPaymentConfigByType(this.paymentTypeControl.value, this.paymentTypes);
        if (value) {
            for (const inputFormSetting of value.inputFormSettings || []) {
                applyInputFormSettingForCountry({
                    inputFormSetting,
                    form: this.form,
                    config: { fields: this.baseFields, name: '', paymentType: '' },
                });
                if (currentConfig) {
                    applyInputFormSettingForCountry({
                        inputFormSetting,
                        form: this.form,
                        config: currentConfig,
                    });
                }
            }
            if (currentConfig) {
                applyPurposeOfPaymentSettings({
                    form: this.form,
                    config: currentConfig,
                });
            }
        }
    }
    renderPaymentOptionControls() {
        const paymentOptionControls = [];
        paymentOptionControls.push(getSelectPaymentOptionFieldConfig(this.paymentOptions$, this.paymentTypes, this.checkClosedPaymentsAccess));
        paymentOptionControls.push(getChargeBearerFieldConfig());
        paymentOptionControls.push(getPaymentCostFieldConfig());
        this.paymentOptionControls$.next(paymentOptionControls);
    }
    /**
     * Resets the existing payment options
     */
    resetPaymentOptions(paymentOptions) {
        if (this.shouldResetPaymentOptions) {
            if (this.shouldResetSelectedPaymentOption(paymentOptions)) {
                this.selectPaymentOptionControl.reset();
            }
            this.chargeBearerOptionsControl.reset();
            this.transferFeeControl.reset();
        }
    }
    shouldResetSelectedPaymentOption(paymentOptions) {
        const selectedPaymentType = (this.selectPaymentOptionControl.value || '').split('::')[0];
        if (selectedPaymentType) {
            return !paymentOptions.some((option) => option.paymentType === selectedPaymentType);
        }
        return false;
    }
    /**
     * Callback triggered when the payment type changes
     */
    onPaymentOptionsChange(paymentOptions = []) {
        this.resetPaymentOptions(paymentOptions);
        this.shouldResetPaymentOptions = true;
        if (!paymentOptions || !paymentOptions.length) {
            return;
        }
        const paymentConfigs = filterPaymentConfigs(paymentOptions, this.paymentTypes);
        if (paymentOptions.length === 1 || hasSameFields(paymentConfigs)) {
            this.renderPaymentConfig(paymentConfigs[0]);
            this.selectConfig.next(paymentConfigs[0]);
        }
        else if (this.shouldResetSelectedPaymentOption(paymentOptions)) {
            this.controls$.next([]);
        }
    }
    /**
     * Fetches the payment options for provided payment details
     */
    fetchPaymentOptions(form, fetchOptions$) {
        const debitAccount = (form.get(`${PaymentBaseFields.initiator}.${InitiatorFields.accountNumber}`));
        const creditAccount = (form.get(`${PaymentBaseFields.counterparty}.${CounterPartyFields.accountNumber}`));
        const amountInfo = (form.get(`${PaymentBaseFields.remittanceInfo}.${RemittanceInfoFields.amountCurrencyGroup}`));
        const bankCountry = (form.get([
            PaymentBaseFields.counterparty,
            CounterPartyFields.creditorBank,
            CounterPartyFields.postalAddress,
            CounterPartyFields.country,
        ]));
        const closedPayment = form.get(HiddenFields.isClosedPayment);
        const arrangementId = form.get([
            PaymentBaseFields.counterparty,
            CounterPartyFields.id,
        ]);
        const skipCreditAccountValidityCheck = (closedPayment === null || closedPayment === void 0 ? void 0 : closedPayment.value) || (arrangementId === null || arrangementId === void 0 ? void 0 : arrangementId.value);
        if (debitAccount &&
            creditAccount &&
            amountInfo &&
            bankCountry &&
            bankCountry.valid &&
            debitAccount.value &&
            (creditAccount.valid || skipCreditAccountValidityCheck) &&
            amountInfo.valid) {
            fetchOptions$.next(form);
        }
    }
    /**
     * Returns the form group for the provided form field config
     */
    getFormGroup(field) {
        return this.form.get(field.parent) || this.form;
    }
    /**
     * Submits the payment form
     */
    onSubmit() {
        var _a;
        this.form.markAsDirty();
        this.form.markAllAsTouched();
        if (!this.form.valid) {
            focusErrorElement((_a = this.formEl) === null || _a === void 0 ? void 0 : _a.nativeElement);
        }
        else if (this.form.valid && !this.submitting) {
            this.submitted.next(this.form);
            this.selectPaymentOption.next(this.selectedPaymentOption);
        }
    }
    /**
     * Resets the payment form
     */
    resetForm() {
        this.selectConfig.next(undefined);
        this.selectPaymentOption.next(undefined);
        this.gc$.next(); // Clear listeners
        this.clear.next();
    }
}
/** @nocollapse */ AdaptiveFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AdaptiveFormComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ AdaptiveFormComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AdaptiveFormComponent, selector: "bb-adaptive-form", inputs: { formItem: "formItem", baseFields: "baseFields", paymentTypes: "paymentTypes", paymentState: "paymentState", isDebitPayment: "isDebitPayment", selectedPaymentConfig: "selectedPaymentConfig", selectedPaymentOption: "selectedPaymentOption", paymentOptionsError: "paymentOptionsError", checkClosedPaymentsAccess: "checkClosedPaymentsAccess", paymentOptions$: "paymentOptions$", fetchingOptions: "fetchingOptions", fetchPaymentOptionsListener: "fetchPaymentOptionsListener", submitting: "submitting", fetchOptions$: "fetchOptions$", shouldApplyTemplate: "shouldApplyTemplate", isModalView: "isModalView" }, outputs: { applyPaymentTemplate: "applyPaymentTemplate", submitted: "submitted", selectPaymentOption: "selectPaymentOption", clear: "clear", selectConfig: "selectConfig" }, ngImport: i0, template: "<form class=\"payment-wizard-form\" [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n  <ng-container *ngFor=\"let field of baseControls$ | async\">\n    <ng-container\n      *ngTemplateOutlet=\"\n        field.fields ? formGroupTmpl : formControlTmpl;\n        context: { $implicit: field }\n      \"\n    >\n    </ng-container>\n  </ng-container>\n\n  <div class=\"position-relative\">\n    <div class=\"delta-container\">\n      <ng-container *ngFor=\"let field of controls$ | async\">\n        <ng-container\n          *ngTemplateOutlet=\"\n            field.fields ? formGroupTmpl : formControlTmpl;\n            context: { $implicit: field }\n          \"\n        >\n        </ng-container>\n      </ng-container>\n    </div>\n\n    <ng-container *ngFor=\"let controlConfig of paymentOptionControls$ | async\">\n      <ng-container\n        *ngTemplateOutlet=\"\n          controlConfig.fields ? formGroupTmpl : formControlTmpl;\n          context: { $implicit: controlConfig }\n        \"\n      >\n      </ng-container>\n    </ng-container>\n\n    <div\n      *ngIf=\"fetchingOptions$ | async\"\n      class=\"wizard-loader-container position-absolute w-100 h-100 top-0 fixed-top bg-white\"\n      [style.opacity]=\"0.8\"\n    >\n      <bb-loading-indicator-ui\n        loaderSize=\"lg\"\n        class=\"absolute-center\"\n      ></bb-loading-indicator-ui>\n    </div>\n  </div>\n\n  <ng-template let-config #formGroupTmpl>\n    <bb-payord-group [config]=\"config\" [group]=\"getFormGroup(config)\">\n      <ng-container *ngFor=\"let control of config.fields\">\n        <ng-container\n          *ngTemplateOutlet=\"\n            control.fields ? formGroupTmpl : formControlTmpl;\n            context: { $implicit: control }\n          \"\n        >\n        </ng-container>\n      </ng-container>\n    </bb-payord-group>\n  </ng-template>\n\n  <ng-template let-config #formControlTmpl>\n    <ng-container\n      bbPaymentFormField\n      [config]=\"config\"\n      [options]=\"config.options\"\n      [group]=\"getFormGroup(config)\"\n    ></ng-container>\n  </ng-template>\n\n  <div\n    class=\"text-danger bb-block--md col-12\"\n    *ngIf=\"paymentOptionsError\"\n    i18n=\"@@adaptive-form-no-payment-option-error\"\n  >\n    A Payment transfer is not possible with provided details. Please update the\n    details and try again.\n  </div>\n\n  <!--Render button group -->\n  <ng-container\n    *ngTemplateOutlet=\"\n      formControlTmpl;\n      context: { $implicit: buttonGroupConfig }\n    \"\n  ></ng-container>\n\n  <ng-template #fetchingOptions>\n    <bb-loading-indicator-ui\n      loaderSize=\"sm\"\n      class=\"bb-load-button__loading-indicator\"\n    ></bb-loading-indicator-ui>\n  </ng-template>\n</form>\n", components: [{ type: i4$1.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: PayordGroupComponent, selector: "bb-payord-group", inputs: ["config", "group"] }], directives: [{ type: i5.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i5.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i4.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: PaymentFormFieldDirective, selector: "[bbPaymentFormField]", inputs: ["options", "config", "group"] }], pipes: { "async": i4.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AdaptiveFormComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-adaptive-form',
                    templateUrl: './adaptive-form.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { formItem: [{
                type: Input
            }], baseFields: [{
                type: Input
            }], paymentTypes: [{
                type: Input
            }], paymentState: [{
                type: Input
            }], isDebitPayment: [{
                type: Input
            }], selectedPaymentConfig: [{
                type: Input
            }], selectedPaymentOption: [{
                type: Input
            }], paymentOptionsError: [{
                type: Input
            }], checkClosedPaymentsAccess: [{
                type: Input
            }], paymentOptions$: [{
                type: Input
            }], applyPaymentTemplate: [{
                type: Output
            }], fetchingOptions: [{
                type: Input
            }], fetchPaymentOptionsListener: [{
                type: Input
            }], submitting: [{
                type: Input
            }], fetchOptions$: [{
                type: Input
            }], shouldApplyTemplate: [{
                type: Input
            }], isModalView: [{
                type: Input
            }], submitted: [{
                type: Output
            }], selectPaymentOption: [{
                type: Output
            }], clear: [{
                type: Output
            }], selectConfig: [{
                type: Output
            }] } });

class MultiPaymentService {
    constructor() {
        this.totalAmount$ = new BehaviorSubject(0);
        this.totalTransfers$ = new BehaviorSubject(0);
    }
    get paymentTotalAmount$() {
        return this.totalAmount$.asObservable().pipe(distinctUntilChanged());
    }
    get paymentTotalTransfers$() {
        return this.totalTransfers$.asObservable().pipe(distinctUntilChanged());
    }
}
/** @nocollapse */ MultiPaymentService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: MultiPaymentService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ MultiPaymentService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: MultiPaymentService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: MultiPaymentService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });

class MultiPaymentFormComponent {
    constructor(fb, componentsFactory, multiPaymentService, stateService) {
        this.fb = fb;
        this.componentsFactory = componentsFactory;
        this.multiPaymentService = multiPaymentService;
        this.stateService = stateService;
        /**
         * errorList to be displayed in the component.
         */
        this.errorList = [];
        /**
         * Event emitter when form is submitted
         */
        this.submitted = new EventEmitter();
        /**
         * Event Emitter when step is next.
         */
        this.stepNext = new EventEmitter();
        /**
         * Event Emitter when step is back.
         */
        this.back = new EventEmitter();
        /**
         * Event emitter when alert is hidden.
         */
        this.hideError = new EventEmitter();
        this.controls = [];
        this.stepData = {};
        this.destroy$ = new Subject();
        this.totalTransfers$ = this.multiPaymentService.paymentTotalTransfers$;
        this.totalAmount$ = this.multiPaymentService.paymentTotalAmount$;
        this.currentStepForm = [];
        this.currentForm = {};
        this.formVal = new Subject();
    }
    ngOnInit() {
        this.form = this.formItem || this.fb.group({});
        if (this.config) {
            this.componentsFactory.registerCustomFields(this.config.customFields);
            this.createFormFields(this.config.fields, this.form, this.controls);
            this._listenFormChanges(this.form);
        }
        for (const step in this.stepperConfig) {
            if (this.stepperConfig.hasOwnProperty(step)) {
                this.stepData[this.stepperConfig[step].stepName] = {};
            }
        }
    }
    updateStepperDetails(currentStep, action) {
        switch (action) {
            case StepperAction.NEXT:
                this.stateService.resetErrors();
                if (this.isStepValid(currentStep.stepName)) {
                    this.onStepSubmit();
                }
                else {
                    this.stateService.addError(currentStep.stepName, {
                        message: $localize `:@@bb-multi-payment-widget.form-error:Form error: Check entered data before proceeding to the next step.`,
                    });
                }
                break;
            case StepperAction.BACK:
                this.stateService.resetErrors();
                this.back.emit();
                break;
            case StepperAction.SUBMIT:
                if (this.isStepValid(currentStep.stepName)) {
                    this.stateService.resetErrors();
                    this.onSubmit();
                }
                break;
        }
    }
    createFormFields(arr, _group, controlsArr, parentName) {
        arr.forEach((control) => {
            var _a;
            const mappedField = control.options && control.options.mapToField;
            const group = mappedField
                ? this.form.get(mappedField)
                : _group;
            const parent = mappedField || parentName;
            const subArray = [];
            if ((_a = control.options) === null || _a === void 0 ? void 0 : _a.fieldsConfig) {
                this.currency = control.options.fieldsConfig.amount.currency;
            }
            if (control.fields instanceof Array) {
                const subGroup = group.get(control.name) || this.fb.group({});
                this.createFormFields(control.fields, subGroup, subArray, parent ? `${parent}.${control.name}` : control.name);
                group.addControl(control.name, subGroup);
                controlsArr.push(Object.assign(Object.assign({}, control), { fields: subArray, parent: parentName }));
            }
            else {
                controlsArr.push(Object.assign(Object.assign({}, control), { parent }));
            }
        });
    }
    isStepValid(currentStepName) {
        const currentStepFields = this.controls.filter((control) => control.stepName === currentStepName);
        this.currentStepForm = [];
        this.currentForm = {};
        const isValidArray = currentStepFields.reduce((acc, steps) => {
            var _a, _b, _c;
            (_a = this.form.get(steps.name)) === null || _a === void 0 ? void 0 : _a.markAllAsTouched();
            this.currentForm = Object.assign(Object.assign({}, this.currentForm), (_b = this.form.get(steps.name)) === null || _b === void 0 ? void 0 : _b.value);
            acc.push((_c = this.form.get(steps.name)) === null || _c === void 0 ? void 0 : _c.valid);
            return acc;
        }, []);
        return isValidArray.every(Boolean);
    }
    onSubmit() {
        this.form.markAsDirty();
        this.form.markAllAsTouched();
        if (this.form.valid) {
            this.submitted.emit(this.form);
        }
    }
    onStepSubmit() {
        var _a, _b, _c, _d;
        if (JSON.stringify(this.stepData[((_a = this.stateService.currentStep) === null || _a === void 0 ? void 0 : _a.stepName) || '']) !== JSON.stringify(this.currentForm)) {
            this.stepData[((_b = this.stateService.currentStep) === null || _b === void 0 ? void 0 : _b.stepName) || ''] = this
                .stepData[((_c = this.stateService.currentStep) === null || _c === void 0 ? void 0 : _c.stepName) || '']
                ? this.currentForm
                : {};
        }
        this.stepNext.emit({
            form: this.currentForm,
            stepName: (_d = this.stateService.currentStep) === null || _d === void 0 ? void 0 : _d.stepName,
        });
    }
    triggerButtonEvent(hooks, action, currentStep) {
        if (hooks) {
            triggerStepperHook(MultiPaymentHooks.onClick, hooks, this.updateStepperDetails.bind(this, currentStep, action), this.stateService.currentStep, action);
        }
        else {
            this.updateStepperDetails(currentStep, action);
        }
    }
    _listenFormChanges(form) {
        const counterpartyControl = (form.get([PaymentBaseFields.counterparty]));
        counterpartyControl.valueChanges
            .pipe(distinctUntilChanged(), takeUntil(this.destroy$))
            .subscribe(() => {
            let amount = 0;
            let totalTransfers = 0;
            const formArray = form.get([
                PaymentBaseFields.counterparty,
                InitiatorFields.initiatorAccountGroup,
            ]);
            if (formArray) {
                const transferControls = formArray.controls;
                totalTransfers = transferControls.length;
                transferControls.forEach((control) => {
                    var _a, _b;
                    if ((_a = control.get('amount')) === null || _a === void 0 ? void 0 : _a.valid) {
                        amount = +amount + +((_b = control.get('amount')) === null || _b === void 0 ? void 0 : _b.value);
                    }
                });
            }
            this.multiPaymentService.totalTransfers$.next(totalTransfers);
            this.multiPaymentService.totalAmount$.next(amount);
        });
        const initiatorControl = (form.get([PaymentBaseFields.initiator]));
        initiatorControl.valueChanges
            .pipe(debounceTime(500), distinctUntilChanged(), takeUntil(this.destroy$))
            .subscribe(() => {
            const formArray = form.get([
                PaymentBaseFields.counterparty,
                InitiatorFields.initiatorAccountGroup,
            ]);
            if (formArray) {
                formArray.controls.forEach((control) => {
                    var _a, _b, _c;
                    if ((_a = control.get('counterpartyName')) === null || _a === void 0 ? void 0 : _a.touched) {
                        (_b = control.get('counterpartyName')) === null || _b === void 0 ? void 0 : _b.updateValueAndValidity();
                        (_c = control.get('counterpartyName')) === null || _c === void 0 ? void 0 : _c.markAllAsTouched();
                    }
                });
            }
        });
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    hideAlert(id) {
        var _a;
        this.hideError.emit({
            id,
            stepName: ((_a = this.stateService.currentStep) === null || _a === void 0 ? void 0 : _a.stepName) || '',
        });
    }
    getFormGroup(field) {
        return this.form.get(field.parent) || this.form;
    }
}
/** @nocollapse */ MultiPaymentFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: MultiPaymentFormComponent, deps: [{ token: i5.FormBuilder }, { token: ComponentsFactoryService }, { token: MultiPaymentService }, { token: i1.BatchOrderStateService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ MultiPaymentFormComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: MultiPaymentFormComponent, selector: "bb-multi-payment-form", inputs: { stepperConfig: "stepperConfig", formItem: "formItem", config: "config", errorList: "errorList" }, outputs: { submitted: "submitted", stepNext: "stepNext", back: "back", hideError: "hideError" }, providers: [VisibilityService, ComponentsFactoryService], ngImport: i0, template: "<form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n  <ng-container *ngIf=\"stateService.step$ | async as step; else allControls\">\n    <div [ngClass]=\"step.cssClasses\">\n      <ng-container *ngFor=\"let field of controls\">\n        <div *ngIf=\"field['stepName'] === step['stepName']\">\n          <ng-container\n            *ngTemplateOutlet=\"controlTempl; context: { $implicit: field }\"\n          ></ng-container>\n        </div>\n      </ng-container>\n      <ng-container *ngIf=\"(stateService.state$ | async) !== 'VALID'\">\n        <div [ngClass]=\"step.buttonClass\">\n          <div\n            class=\"bb-stack\"\n            [ngClass]=\"{\n              'container container--fixed-width': step.footerDetail\n            }\"\n            data-role=\"payment-footer\"\n          >\n            <div *ngIf=\"step.footerDetail\" class=\"bb-stack__item\">\n              <div\n                *ngIf=\"step.footerDetail.totalCount\"\n                i18n=\"@@multipayment-form-footer-text-total-transfers.text\"\n                data-role=\"total-transfers\"\n              >\n                {{ totalTransfers$ | async }} {totalTransfers$ | async, plural,\n                =1 {Transfer} other {Transfers}} (Credit)\n              </div>\n              <div\n                *ngIf=\"step.footerDetail.totalAmount\"\n                class=\"bb-highlight\"\n                i18n=\"@@multipayment-form-footer-text-total-amount.text\"\n                data-role=\"total-amount\"\n              >\n                Total: {{ currency\n                }}{{ totalAmount$ | async | number: '1.2-2' }}\n              </div>\n            </div>\n\n            <div class=\"bb-stack__item bb-stack__item--push-right\">\n              <div class=\"bb-button-bar bb-button-bar--reverse\">\n                <button\n                  bbButton\n                  *ngFor=\"let buttonDetail of step.buttonConfig\"\n                  class=\"bb-button-bar__button\"\n                  [color]=\"buttonDetail.type\"\n                  [attr.data-role]=\"'multi-payment-' + buttonDetail.action\"\n                  (click)=\"\n                    triggerButtonEvent(\n                      buttonDetail?.hooks,\n                      buttonDetail.action,\n                      step\n                    )\n                  \"\n                >\n                  {{ buttonDetail.text }}\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </ng-container>\n    </div>\n  </ng-container>\n\n  <ng-template #allControls>\n    <div>\n      <div *ngFor=\"let field of controls\">\n        <ng-container\n          *ngTemplateOutlet=\"controlTempl; context: { $implicit: field }\"\n        ></ng-container>\n      </div>\n      <div class=\"bb-button-bar\">\n        <button\n          bbButton\n          class=\"bb-button-bar__button\"\n          (click)=\"onSubmit()\"\n          color=\"primary\"\n          data-role=\"multi-payment-submit-button\"\n          i18n=\"\n            Submit button|Body text of the button that allows the user to go to\n            submit step @@bb-multi-payment-widget.submit\"\n        >\n          Submit\n        </button>\n      </div>\n    </div>\n  </ng-template>\n\n  <ng-template #controlTempl let-field>\n    <ng-container\n      *ngTemplateOutlet=\"\n        field.fields ? formGroupTmpl : formControlTmpl;\n        context: { $implicit: field }\n      \"\n    >\n    </ng-container>\n  </ng-template>\n\n  <ng-template let-config #formGroupTmpl>\n    <bb-payord-group [config]=\"config\" [group]=\"getFormGroup(config)\">\n      <ng-container *ngFor=\"let control of config.fields\">\n        <ng-container\n          *ngTemplateOutlet=\"\n            control.fields ? formGroupTmpl : formControlTmpl;\n            context: { $implicit: control }\n          \"\n        >\n        </ng-container>\n      </ng-container>\n    </bb-payord-group>\n  </ng-template>\n\n  <ng-template let-config #formControlTmpl>\n    <ng-container\n      bbPaymentFormField\n      [config]=\"config\"\n      [options]=\"config.options\"\n      [group]=\"getFormGroup(config)\"\n    >\n    </ng-container>\n  </ng-template>\n</form>\n", components: [{ type: PayordGroupComponent, selector: "bb-payord-group", inputs: ["config", "group"] }], directives: [{ type: i5.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i5.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i4.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i7.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: PaymentFormFieldDirective, selector: "[bbPaymentFormField]", inputs: ["options", "config", "group"] }], pipes: { "async": i4.AsyncPipe, "number": i4.DecimalPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: MultiPaymentFormComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-multi-payment-form',
                    templateUrl: './multi-payment-form.component.html',
                    providers: [VisibilityService, ComponentsFactoryService],
                }]
        }], ctorParameters: function () { return [{ type: i5.FormBuilder }, { type: ComponentsFactoryService }, { type: MultiPaymentService }, { type: i1.BatchOrderStateService }]; }, propDecorators: { stepperConfig: [{
                type: Input
            }], formItem: [{
                type: Input
            }], config: [{
                type: Input
            }], errorList: [{
                type: Input
            }], submitted: [{
                type: Output
            }], stepNext: [{
                type: Output
            }], back: [{
                type: Output
            }], hideError: [{
                type: Output
            }] } });

class ErrorAlertComponent {
    constructor() {
        /**
         * Emitted when an alert has been closed
         */
        this.hideAlert = new EventEmitter();
        this.hostRef = this;
    }
    ngOnChanges() {
        if (this.errorList && this.errorList.length > 0) {
            this.errorList.forEach((error) => {
                var _a;
                for (const context in error.context) {
                    if (error.message && ((_a = error.context) === null || _a === void 0 ? void 0 : _a.hasOwnProperty(context))) {
                        const regEx = new RegExp('{{' + context + '}}', 'g');
                        const replacedValue = error.context[context];
                        error.message = error.message.replace(regEx, replacedValue);
                    }
                }
            });
        }
    }
    hideError(index) {
        this.hideAlert.emit(index);
    }
}
/** @nocollapse */ ErrorAlertComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ErrorAlertComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ ErrorAlertComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ErrorAlertComponent, selector: "bb-error-alert", inputs: { errorList: "errorList" }, outputs: { hideAlert: "hideAlert" }, usesOnChanges: true, ngImport: i0, template: "<div class=\"sticky-top pt-2\">\n  <div\n    class=\"bb-block bb-block--md\"\n    *ngFor=\"let error of errorList; let ind = index\"\n    role=\"alert\"\n  >\n    <ng-content\n      *ngTemplateOutlet=\"notification; context: { error: error, id: ind }\"\n    ></ng-content>\n  </div>\n</div>\n\n<ng-template #notification let-error=\"error\" let-id=\"id\">\n  <bb-alert-ui [title]=\"''\" [dismissible]=\"true\" (close)=\"hideError(id)\">\n    <p class=\"bb-block bb-block--no-margin\">{{ error?.message }}</p>\n  </bb-alert-ui>\n</ng-template>\n", components: [{ type: i1$d.AlertComponent, selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }], directives: [{ type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i4.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ErrorAlertComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-error-alert',
                    templateUrl: './error-alert.component.html',
                }]
        }], propDecorators: { errorList: [{
                type: Input
            }], hideAlert: [{
                type: Output
            }] } });

const entryComponents = [
    PayordAddressComponent,
    PayordAmountComponent,
    PayordBeneficiarySelectorComponent,
    PayordCheckboxComponent,
    PayordDebitAccountSelectorComponent,
    PayordRadioComponent,
    PayordScheduleComponent,
    PayordSelectComponent,
    PayordTextAreaComponent,
    PayordTextboxComponent,
    PayordSwitchComponent,
    PayordDateComponent,
    PayordNumberComponent,
    PayordPhoneComponent,
    ValidationMessageComponent,
    PayordSelectPaymentOptionComponent,
    PayordPaymentCostComponent,
    PayordInternalAccountSelectorComponent,
    PayordCompactAmountComponent,
    PayordButtonGroupComponent,
    PayordScheduleHeaderComponent,
    PayordSanctionedCurrencyAmountComponent,
    PayordCountrySelectorComponent,
    PayordChargeBearerComponent,
    PayordSanctionedCountrySelectorComponent,
    PayordChargeBearerComponent,
    MultiPaymentCardComponent,
    MultiPaymentFormComponent,
    PayordCreditDebitSelectorComponent,
    PayordInternalAmountOptionsComponent,
    PayordHeaderComponent,
    PayordPurposeOfPaymentComponent,
    PayordAlertComponent,
    ErrorAlertComponent,
    PayordScheduleSwitchComponent,
    PayordBeneficiaryGroupHeaderComponent,
    MultiPaymentAccountSelectorComponent,
    PayordContactSelectorComponent,
];
const modules = [
    InputTextModule,
    InputRadioGroupModule,
    InputCheckboxModule,
    InputDatepickerModule,
    InputNumberModule,
    InputPhoneModule,
    CurrencyInputModule,
    TextareaModule,
    SwitchModule,
    DropdownSingleSelectModule,
    FormsModule,
    ReactiveFormsModule,
    InputRadioGroupModule,
    AccountSelectorModule,
    CollapsibleModule,
    AlertModule,
    PaymentOrdersUiModule,
    AmountModule,
    FieldsetModule,
    LoadButtonModule,
    LoadingIndicatorModule,
    ProductSelectorModule,
    ProductItemBasicAccountModule,
    ButtonModule,
    IconModule,
    EmptyStateModule,
    StepperModule,
    TooltipModule,
    AmountInputModule,
];
const components = [
    PayordFormComponent,
    PayordGroupComponent,
    AdaptiveFormComponent,
    ...entryComponents,
];
const directives = [PaymentFormFieldDirective, DynamicAriaAttributeDirective];
/**
 * Exports the UI components, directives and modules for the form builder
 */
class PayordFormBuilderAngModule {
}
/** @nocollapse */ PayordFormBuilderAngModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordFormBuilderAngModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ PayordFormBuilderAngModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordFormBuilderAngModule, declarations: [PayordFormComponent,
        PayordGroupComponent,
        AdaptiveFormComponent, PayordAddressComponent,
        PayordAmountComponent,
        PayordBeneficiarySelectorComponent,
        PayordCheckboxComponent,
        PayordDebitAccountSelectorComponent,
        PayordRadioComponent,
        PayordScheduleComponent,
        PayordSelectComponent,
        PayordTextAreaComponent,
        PayordTextboxComponent,
        PayordSwitchComponent,
        PayordDateComponent,
        PayordNumberComponent,
        PayordPhoneComponent,
        ValidationMessageComponent,
        PayordSelectPaymentOptionComponent,
        PayordPaymentCostComponent,
        PayordInternalAccountSelectorComponent,
        PayordCompactAmountComponent,
        PayordButtonGroupComponent,
        PayordScheduleHeaderComponent,
        PayordSanctionedCurrencyAmountComponent,
        PayordCountrySelectorComponent,
        PayordChargeBearerComponent,
        PayordSanctionedCountrySelectorComponent,
        PayordChargeBearerComponent,
        MultiPaymentCardComponent,
        MultiPaymentFormComponent,
        PayordCreditDebitSelectorComponent,
        PayordInternalAmountOptionsComponent,
        PayordHeaderComponent,
        PayordPurposeOfPaymentComponent,
        PayordAlertComponent,
        ErrorAlertComponent,
        PayordScheduleSwitchComponent,
        PayordBeneficiaryGroupHeaderComponent,
        MultiPaymentAccountSelectorComponent,
        PayordContactSelectorComponent, PaymentFormFieldDirective, DynamicAriaAttributeDirective], imports: [CommonModule, BackbaseCoreModule, InputTextModule,
        InputRadioGroupModule,
        InputCheckboxModule,
        InputDatepickerModule,
        InputNumberModule,
        InputPhoneModule,
        CurrencyInputModule,
        TextareaModule,
        SwitchModule,
        DropdownSingleSelectModule,
        FormsModule,
        ReactiveFormsModule,
        InputRadioGroupModule,
        AccountSelectorModule,
        CollapsibleModule,
        AlertModule,
        PaymentOrdersUiModule,
        AmountModule,
        FieldsetModule,
        LoadButtonModule,
        LoadingIndicatorModule,
        ProductSelectorModule,
        ProductItemBasicAccountModule,
        ButtonModule,
        IconModule,
        EmptyStateModule,
        StepperModule,
        TooltipModule,
        AmountInputModule], exports: [PayordFormComponent,
        PayordGroupComponent,
        AdaptiveFormComponent, PayordAddressComponent,
        PayordAmountComponent,
        PayordBeneficiarySelectorComponent,
        PayordCheckboxComponent,
        PayordDebitAccountSelectorComponent,
        PayordRadioComponent,
        PayordScheduleComponent,
        PayordSelectComponent,
        PayordTextAreaComponent,
        PayordTextboxComponent,
        PayordSwitchComponent,
        PayordDateComponent,
        PayordNumberComponent,
        PayordPhoneComponent,
        ValidationMessageComponent,
        PayordSelectPaymentOptionComponent,
        PayordPaymentCostComponent,
        PayordInternalAccountSelectorComponent,
        PayordCompactAmountComponent,
        PayordButtonGroupComponent,
        PayordScheduleHeaderComponent,
        PayordSanctionedCurrencyAmountComponent,
        PayordCountrySelectorComponent,
        PayordChargeBearerComponent,
        PayordSanctionedCountrySelectorComponent,
        PayordChargeBearerComponent,
        MultiPaymentCardComponent,
        MultiPaymentFormComponent,
        PayordCreditDebitSelectorComponent,
        PayordInternalAmountOptionsComponent,
        PayordHeaderComponent,
        PayordPurposeOfPaymentComponent,
        PayordAlertComponent,
        ErrorAlertComponent,
        PayordScheduleSwitchComponent,
        PayordBeneficiaryGroupHeaderComponent,
        MultiPaymentAccountSelectorComponent,
        PayordContactSelectorComponent, PaymentFormFieldDirective, DynamicAriaAttributeDirective, InputTextModule,
        InputRadioGroupModule,
        InputCheckboxModule,
        InputDatepickerModule,
        InputNumberModule,
        InputPhoneModule,
        CurrencyInputModule,
        TextareaModule,
        SwitchModule,
        DropdownSingleSelectModule,
        FormsModule,
        ReactiveFormsModule,
        InputRadioGroupModule,
        AccountSelectorModule,
        CollapsibleModule,
        AlertModule,
        PaymentOrdersUiModule,
        AmountModule,
        FieldsetModule,
        LoadButtonModule,
        LoadingIndicatorModule,
        ProductSelectorModule,
        ProductItemBasicAccountModule,
        ButtonModule,
        IconModule,
        EmptyStateModule,
        StepperModule,
        TooltipModule,
        AmountInputModule] });
/** @nocollapse */ PayordFormBuilderAngModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordFormBuilderAngModule, providers: [
        DatePipe,
        CurrencyPipe,
        VisibilityService,
        ComponentsFactoryService,
    ], imports: [[CommonModule, BackbaseCoreModule, ...modules], InputTextModule,
        InputRadioGroupModule,
        InputCheckboxModule,
        InputDatepickerModule,
        InputNumberModule,
        InputPhoneModule,
        CurrencyInputModule,
        TextareaModule,
        SwitchModule,
        DropdownSingleSelectModule,
        FormsModule,
        ReactiveFormsModule,
        InputRadioGroupModule,
        AccountSelectorModule,
        CollapsibleModule,
        AlertModule,
        PaymentOrdersUiModule,
        AmountModule,
        FieldsetModule,
        LoadButtonModule,
        LoadingIndicatorModule,
        ProductSelectorModule,
        ProductItemBasicAccountModule,
        ButtonModule,
        IconModule,
        EmptyStateModule,
        StepperModule,
        TooltipModule,
        AmountInputModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordFormBuilderAngModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [...components, ...directives],
                    exports: [...components, ...directives, ...modules],
                    entryComponents,
                    imports: [CommonModule, BackbaseCoreModule, ...modules],
                    providers: [
                        DatePipe,
                        CurrencyPipe,
                        VisibilityService,
                        ComponentsFactoryService,
                    ],
                    schemas: [CUSTOM_ELEMENTS_SCHEMA],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { ActivatableFormField, ComponentsFactoryService, MultiPaymentService, PaymentComponentsMap, PayordAmountComponent, PayordBeneficiarySelectorComponent, PayordCountrySelectorComponent, PayordDebitAccountSelectorComponent, PayordFormBuilderAngModule, PayordInternalAccountSelectorComponent, PayordInternalAmountOptionsComponent, PayordSanctionedCountrySelectorComponent, PayordSanctionedCurrencyAmountComponent, PayordSelectPaymentOptionComponent, VisibilityService, addAddressFields, addControlToFormArray, applyInputFormSettingForCountry, applyPurposeOfPaymentSettings, createControlsMap, createValidatorFromRegex, filterPaymentConfigs, getBeneficiaryDetails, getChargeBearerFieldConfig, getCounterpartyFormGroupDetails, getFormFieldData, getMappedGroup, getParentForm, getPaymentCostFieldConfig, getRelatedPaymentConfig, getSelectPaymentOptionFieldConfig, hasSameFields, isClosedPaymentValidator, isControlFilled, isEditFormDirty, isTemplateFormDirty, registerFormArray, registerFormControl, registerFormGroup, resetValidators, revertBeneficiaryChanges, setAdditionalBankDetails, tagFormGroupToFormFields, triggerHook, triggerStepperHook, AdaptiveFormComponent as ӨAdaptiveFormComponent, DynamicAriaAttributeDirective as ӨDynamicAriaAttributeDirective, ErrorAlertComponent as ӨErrorAlertComponent, MultiPaymentAccountSelectorComponent as ӨMultiPaymentAccountSelectorComponent, MultiPaymentCardComponent as ӨMultiPaymentCardComponent, MultiPaymentFormComponent as ӨMultiPaymentFormComponent, PaymentFormFieldDirective as ӨPaymentFormFieldDirective, PayordAddressComponent as ӨPayordAddressComponent, PayordAlertComponent as ӨPayordAlertComponent, PayordBeneficiaryGroupHeaderComponent as ӨPayordBeneficiaryGroupHeaderComponent, PayordButtonGroupComponent as ӨPayordButtonGroupComponent, PayordChargeBearerComponent as ӨPayordChargeBearerComponent, PayordCheckboxComponent as ӨPayordCheckboxComponent, PayordCompactAmountComponent as ӨPayordCompactAmountComponent, PayordContactSelectorComponent as ӨPayordContactSelectorComponent, PayordCreditDebitSelectorComponent as ӨPayordCreditDebitSelectorComponent, PayordDateComponent as ӨPayordDateComponent, PayordFormComponent as ӨPayordFormComponent, PayordGroupComponent as ӨPayordGroupComponent, PayordHeaderComponent as ӨPayordHeaderComponent, PayordNumberComponent as ӨPayordNumberComponent, PayordPaymentCostComponent as ӨPayordPaymentCostComponent, PayordPhoneComponent as ӨPayordPhoneComponent, PayordPurposeOfPaymentComponent as ӨPayordPurposeOfPaymentComponent, PayordRadioComponent as ӨPayordRadioComponent, PayordScheduleComponent as ӨPayordScheduleComponent, PayordScheduleHeaderComponent as ӨPayordScheduleHeaderComponent, PayordScheduleSwitchComponent as ӨPayordScheduleSwitchComponent, PayordSelectComponent as ӨPayordSelectComponent, PayordSwitchComponent as ӨPayordSwitchComponent, PayordTextAreaComponent as ӨPayordTextAreaComponent, PayordTextboxComponent as ӨPayordTextboxComponent, ValidationMessageComponent as ӨValidationMessageComponent };
//# sourceMappingURL=backbase-payord-form-builder-ang.js.map
