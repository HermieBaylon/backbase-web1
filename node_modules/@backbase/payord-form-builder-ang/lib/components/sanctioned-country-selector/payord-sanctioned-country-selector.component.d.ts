import { OnInit, OnDestroy } from '@angular/core';
import { AbstractControl, FormGroup } from '@angular/forms';
import { Observable, Subscription } from 'rxjs';
import { ActivatableFormField } from '../../models/activatable-form-field';
import { VisibilityService } from '../../services/visibility.service';
import { SanctionedCountry, InputFormField } from '@backbase/data-ang/payment-order-options';
import * as i0 from "@angular/core";
export declare class PayordSanctionedCountrySelectorComponent extends ActivatableFormField implements OnInit, OnDestroy {
    private readonly visibilityService;
    control: AbstractControl;
    inputFormSettingControl: AbstractControl;
    defaultBankCodeSettingControl: AbstractControl;
    defaultCountryControl: AbstractControl;
    isClosedPaymentControl: AbstractControl;
    parentForm: FormGroup;
    countries$: Observable<Array<string>>;
    countries: Array<string>;
    defaultCountry: string;
    inputFormSettings: {
        [key: string]: Array<InputFormField>;
    };
    sanctionedCountries: {
        [key: string]: SanctionedCountry;
    };
    formSubscription?: Subscription;
    httpSubscription?: Subscription;
    counterpartyIdControl: AbstractControl;
    private sanctionedCountriesControl;
    constructor(visibilityService: VisibilityService);
    ngOnInit(): void;
    mapCountries(sanctionedCountries: Array<SanctionedCountry>): string[];
    onChange(val: string): void;
    resetAddressGroup(): void;
    ngOnDestroy(): void;
    private resetPurposeOfPayment;
    selectItem(country: string): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<PayordSanctionedCountrySelectorComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<PayordSanctionedCountrySelectorComponent, "bb-payord-sanctioned-country-selector", never, {}, {}, never, never>;
}
