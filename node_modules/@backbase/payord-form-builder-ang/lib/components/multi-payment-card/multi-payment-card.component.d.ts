import { ChangeDetectorRef, ElementRef, EventEmitter, NgZone, OnDestroy, OnInit, Renderer2 } from '@angular/core';
import { AbstractControl, FormArray, FormControl, FormGroup, ValidatorFn } from '@angular/forms';
import { InternalAccountFormItem, MultiPaymentCard, PaymentFormField, PaymentFormFieldConfig, PaymentFormFieldOptions } from '@backbase/payment-orders-ang';
import { Observable, BehaviorSubject } from 'rxjs';
import { ViewportRuler } from '@angular/cdk/scrolling';
import '@angular/localize/init';
import * as i0 from "@angular/core";
export declare class MultiPaymentCardComponent implements PaymentFormField, OnInit, OnDestroy {
    private readonly renderer;
    private readonly ngZone;
    private readonly viewportRuler;
    private readonly changeDetector;
    options: PaymentFormFieldOptions;
    fieldOptions: Partial<MultiPaymentCard>;
    config: PaymentFormFieldConfig;
    group: FormGroup;
    paymentArrayControl: FormArray;
    count: EventEmitter<any>;
    search: EventEmitter<any>;
    cardConfig: {
        name: string;
        validators?: ValidatorFn[];
    }[];
    readonly hostRef: MultiPaymentCardComponent;
    scroll: ElementRef;
    padding: ElementRef;
    content: ElementRef;
    viewportItems: AbstractControl[];
    subscription: Observable<any>;
    private readonly destroy$;
    private scrollableElement;
    private _items;
    private visibleItemsInViewport;
    private bufferedItems;
    private visibleViewport;
    firstRenderedItemIndex: number;
    accounts: {
        search$: BehaviorSubject<string>;
        items$: Observable<InternalAccountFormItem[]>;
    }[];
    defaultConfig: MultiPaymentCard;
    private lastBlur;
    constructor(renderer: Renderer2, ngZone: NgZone, viewportRuler: ViewportRuler, changeDetector: ChangeDetectorRef);
    ngOnInit(): void;
    ngOnDestroy(): void;
    addAccount(): void;
    removeAccount(index: number): void;
    /**
     * will return form with given index in form Array
     *
     * @param index - form array index
     */
    getForm(index: number): FormGroup;
    /**
     *  method to get the form details.
     *
     * @param index form array index
     * @param name form field
     */
    getControl(index: number, name: string): FormControl;
    /**
     * patch value on selecting account
     *
     * @param event -  the selected data
     * @param index - form Array index
     */
    onSelectAccount(event: any, index: number): void;
    /**
     * Search query will emit search on account selector
     *
     * @param query
     */
    onSearch(index: number, query: string): void;
    openDescription(index: number): void;
    isExpanded(index: number): boolean;
    /**
     * will emit call the blur hook if any
     *
     * @param index - form index
     */
    cardBlur(index: number): void;
    cardFocus(index: number): void;
    deleteDescription(index: number): void;
    onDropdownOpenChange(index: number, isOpen: boolean): void;
    isDropdownOpen(index: number): boolean;
    private addRenderedItem;
    private removeAccountAt;
    private calculateAverageItemHeight;
    private cacheItemHeight;
    private firstVisibleItemIndex;
    private invalidateVisibleItemsCache;
    private onScrollChanged;
    private updateViewport;
    private updateVisibleItems;
    private updateDimensions;
    private getElementSize;
    private virtualViewportHeight;
    private _addValidators;
    private setupItem;
    static ɵfac: i0.ɵɵFactoryDeclaration<MultiPaymentCardComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<MultiPaymentCardComponent, "bb-multi-payment-card", never, {}, {}, never, never>;
}
