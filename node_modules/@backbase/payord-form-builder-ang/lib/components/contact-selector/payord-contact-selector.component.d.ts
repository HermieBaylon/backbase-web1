import { OnDestroy, OnInit } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { ContactItem, Hideable, ListState, PaymentFormFieldConfig, PaymentFormFieldOptions } from '@backbase/payment-orders-ang';
import { NgbDropdown } from '@ng-bootstrap/ng-bootstrap';
import { Observable } from 'rxjs';
import * as i0 from "@angular/core";
export declare class PayordContactSelectorComponent implements OnInit, OnDestroy {
    options: PaymentFormFieldOptions;
    config: PaymentFormFieldConfig & Hideable;
    group: FormGroup;
    contacts$: Observable<Array<ContactItem> | null>;
    dropdownItem?: NgbDropdown;
    listState?: ListState;
    listStateType: typeof ListState;
    private inputFocused;
    private destroy$;
    private searchQuery;
    defaultEmptyStateTitle: string;
    defaultEmptyStateSubtitle: string;
    defaultErrorStateTitle: string;
    defaultErrorStateSubtitle: string;
    ngOnInit(): void;
    private registerFields;
    private fetchCreditorItems;
    onSelectContact(_event: EventTarget, contact: ContactItem): void;
    handleSearch(query: string): void;
    setStatus(contacts?: ContactItem[]): void;
    onClear(): void;
    focusHandler(): void;
    onBlur(): void;
    private setContactId;
    /**
     * Sets schemeName for payment order request payload
     * Checks entered value with regex pattern to detect if it is email, phone number or accountNumber
     */
    private setScheme;
    /**
     * Return first scheme value of contact. That allows customer to prioritize either email, phone number or account number for a contact.
     * For instance [email, phoneNumber] will return mail if there is a mail value in contact item, otherwise will check phoneNumber.
     * This is
     */
    private getTransferEntry;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<PayordContactSelectorComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<PayordContactSelectorComponent, "bb-payord-contact-selector", never, {}, {}, never, never>;
}
