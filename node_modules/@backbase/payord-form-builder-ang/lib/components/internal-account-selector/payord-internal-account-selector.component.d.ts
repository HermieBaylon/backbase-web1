import { OnInit, OnDestroy, AfterViewInit, Renderer2, ChangeDetectorRef } from '@angular/core';
import { FormGroup, AbstractControl, ValidatorFn } from '@angular/forms';
import { Observable } from 'rxjs';
import { PaymentFormField, PaymentFormFieldOptions, PaymentFormFieldConfig, PaymentBaseFields, BaseObject, ProductKinds, FilterState, ProductKindItem, InternalAccountFormItem } from '@backbase/payment-orders-ang';
import { ActivatedRoute } from '@angular/router';
import { ActivatableFormField } from '../../models/activatable-form-field';
import { VisibilityService } from '../../services/visibility.service';
import { ProductSelectorComponent } from '@backbase/ui-ang/product-selector';
import * as i0 from "@angular/core";
export declare class PayordInternalAccountSelectorComponent extends ActivatableFormField implements PaymentFormField, OnInit, OnDestroy, AfterViewInit {
    private readonly renderer;
    private readonly cd;
    private readonly activatedRoute;
    productSelector: ProductSelectorComponent | undefined;
    options: PaymentFormFieldOptions;
    config: PaymentFormFieldConfig;
    group: FormGroup;
    form: FormGroup;
    control: AbstractControl;
    selectedAccount: InternalAccountFormItem & {
        number?: string;
    };
    disabledAccount: InternalAccountFormItem | undefined;
    private readonly destroy$;
    connectedAccounts$: Observable<InternalAccountFormItem[]>;
    readonly productKinds: typeof ProductKinds;
    /**
     * Id to associate messages to form field for accessibility
     */
    validationId: string;
    /**
     * Account number fromat used to mask the account numbers in the selector
     */
    accountFormat: {
        length: number;
        maskRange: number[];
        segments: number;
    };
    /**
     * Boolean to show if account selector tab is touched
     */
    touched: boolean;
    /**
     * Return other account selector field name
     */
    get peerFieldName(): PaymentBaseFields.initiator | PaymentBaseFields.counterparty;
    /**
     * Flag to show if dropdown is open
     */
    get isDropdownOpen(): boolean;
    /**
     * Flag to show which account kinds should not be rendered in order to avoid unwanted matches between two account
     */
    get disabledProductKinds(): ProductKinds[];
    constructor(renderer: Renderer2, cd: ChangeDetectorRef, activatedRoute: ActivatedRoute, visibilityService: VisibilityService);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    /**
     * Filtering accounts by product kind
     */
    filterByProductKind(accounts?: InternalAccountFormItem[], productKinds?: ProductKindItem[]): InternalAccountFormItem[];
    /**
     * Filtering accounts by other filter properties
     */
    filterByOtherProps(accounts?: InternalAccountFormItem[], otherFilters?: FilterState[]): InternalAccountFormItem[];
    /**
     * Disable account which is already selected at the counter party selector
     */
    setDisabledAccount(form: FormGroup): void;
    setPaymentConfig(acc: InternalAccountFormItem): void;
    setTouched(isTouched?: boolean): void;
    /**
     * Return paymentType regarding to from-to account combination
     */
    pickPaymentType(): string | undefined;
    setAccountInEditMode(accounts: InternalAccountFormItem[], group: FormGroup, key: string): void;
    selectAccountGroup(): BaseObject<ValidatorFn[]> | undefined;
    registerFields(): void;
    /**
     * Set balance and balance label to account regarding to selected balance type in config
     */
    mapBalance(account: InternalAccountFormItem): InternalAccountFormItem;
    ngOnDestroy(): void;
    selectItem(account: InternalAccountFormItem): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<PayordInternalAccountSelectorComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<PayordInternalAccountSelectorComponent, "bb-payord-internal-account-selector", never, {}, {}, never, never>;
}
