import { KeyValueDiffers, Renderer2, ElementRef, DoCheck } from '@angular/core';
import * as i0 from "@angular/core";
interface KeyValueMap {
    [key: string]: any;
}
export declare class DynamicAriaAttributeDirective implements DoCheck {
    private readonly keyValueDiffers;
    private readonly hostElem;
    private readonly renderer;
    /**
     * The map that contains a key value pair that contains the an id
     * and a condition when they should be added to the element.
     */
    set ariaAttributeMap(value: KeyValueMap);
    /**
     * Flag to denote if the id of the input should be prepended to provided aria ids
     */
    prependInputId: boolean;
    /**
     * The selector to select the actual html input.
     */
    inputSelector: string;
    /**
     * The name of the aria attribute to be added dynamically. Defaults to aria-describedby.
     */
    ariaAttributeName: string;
    private _keyValueDiffer;
    private _rawMap;
    constructor(keyValueDiffers: KeyValueDiffers, hostElem: ElementRef, renderer: Renderer2);
    ngDoCheck(): void;
    private applyKeyValueChanges;
    private setAriaAttributeIds;
    private removeAriaAttributeIds;
    static ɵfac: i0.ɵɵFactoryDeclaration<DynamicAriaAttributeDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<DynamicAriaAttributeDirective, "[bbDynamicAriaAttribute]", never, { "ariaAttributeMap": "bbDynamicAriaAttribute"; "prependInputId": "prependInputId"; "inputSelector": "inputSelector"; "ariaAttributeName": "ariaAttributeName"; }, {}, never>;
}
export {};
