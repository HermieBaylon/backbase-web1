import { OnInit, EventEmitter, OnDestroy } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import { PaymentFormGroup, PaymentFormItem, PaymentTypeConfig, StepperConfig, PaymentFormFieldConfig, MultipleFormGroup, MultiPaymentHooksConfig, StepperAction, ManualBatchTypeConfig } from '@backbase/payment-orders-ang';
import { Subject, Observable } from 'rxjs';
import { ComponentsFactoryService } from '../../services/components-factory.service';
import { MultiPaymentService } from '../../services/multi-payment.service';
import { BatchOrderStateService } from '@backbase/payment-orders-ang';
import '@angular/localize/init';
import * as i0 from "@angular/core";
export declare class MultiPaymentFormComponent implements OnInit, OnDestroy {
    private fb;
    private readonly componentsFactory;
    private multiPaymentService;
    stateService: BatchOrderStateService;
    /**
     * stepper Config for showing stepper details
     */
    stepperConfig: StepperConfig[];
    /**
     * existing form
     */
    formItem?: FormGroup;
    /**
     * Manual batches configuration
     */
    config: ManualBatchTypeConfig;
    /**
     * errorList to be displayed in the component.
     */
    errorList: Array<any>;
    /**
     * Event emitter when form is submitted
     */
    submitted: EventEmitter<any>;
    /**
     * Event Emitter when step is next.
     */
    stepNext: EventEmitter<any>;
    /**
     * Event Emitter when step is back.
     */
    back: EventEmitter<any>;
    /**
     * Event emitter when alert is hidden.
     */
    hideError: EventEmitter<{
        id: number;
        stepName: string;
    }>;
    form: FormGroup;
    controls: Array<MultipleFormGroup>;
    stepData: {
        [key: string]: any;
    };
    private destroy$;
    totalTransfers$: Observable<number>;
    totalAmount$: Observable<number>;
    currentTypeConfig: PaymentTypeConfig;
    currentStepForm: Array<Observable<any> | undefined>;
    currentForm: {};
    subscription: Observable<any>;
    formVal: Subject<unknown>;
    currency: string;
    constructor(fb: FormBuilder, componentsFactory: ComponentsFactoryService, multiPaymentService: MultiPaymentService, stateService: BatchOrderStateService);
    ngOnInit(): void;
    updateStepperDetails(currentStep: StepperConfig, action?: StepperAction): void;
    createFormFields(arr: Array<PaymentFormFieldConfig | PaymentFormGroup>, _group: FormGroup, controlsArr: Array<PaymentFormItem>, parentName?: string): void;
    isStepValid(currentStepName: string): boolean;
    onSubmit(): void;
    onStepSubmit(): void;
    triggerButtonEvent(hooks: MultiPaymentHooksConfig | undefined, action: StepperAction, currentStep: StepperConfig): void;
    private _listenFormChanges;
    ngOnDestroy(): void;
    hideAlert(id: number): void;
    getFormGroup(field: PaymentFormItem): FormGroup;
    static ɵfac: i0.ɵɵFactoryDeclaration<MultiPaymentFormComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<MultiPaymentFormComponent, "bb-multi-payment-form", never, { "stepperConfig": "stepperConfig"; "formItem": "formItem"; "config": "config"; "errorList": "errorList"; }, { "submitted": "submitted"; "stepNext": "stepNext"; "back": "back"; "hideError": "hideError"; }, never, never>;
}
