import { ElementRef, EventEmitter, OnDestroy, OnInit } from '@angular/core';
import { AbstractControl, FormBuilder, FormGroup } from '@angular/forms';
import { PaymentFormFieldConfig, PaymentFormGroup, PaymentFormItem, PaymentTypeConfig, PaymentComponents, TemplateModeType, PaymentMode } from '@backbase/payment-orders-ang';
import { ComponentsFactoryService } from '../../services/components-factory.service';
import { BehaviorSubject, Subscription } from 'rxjs';
import * as i0 from "@angular/core";
export declare class PayordFormComponent implements OnInit, OnDestroy {
    private readonly fb;
    private readonly componentsFactory;
    private readonly formEl;
    /**
     * The payment type config. Containas the details of all the fields and details of a payment type.
     */
    config: PaymentTypeConfig;
    /**
     * Event emitted when the form is submitted.
     */
    submitted: EventEmitter<any>;
    /**
     * Event emitted when the form is reset.
     */
    clear: EventEmitter<any>;
    /**
     * The flag to denote if the widget is rendered inside a modal.
     */
    isModalView: boolean;
    /**
     * The flag to denote if the widget is rendered in payment template mode.
     */
    isTemplateMode: boolean;
    /**
     * The flag to denote if it is a debit payment.
     */
    isDebitPayment: boolean;
    /**
     * The flag to denote if the widget is rendered in payment edit mode.
     */
    isEditPaymentModal: boolean;
    /**
     * The flag to denote if widget should be render the template is edit or create mode.
     */
    templateModeType?: TemplateModeType;
    /**
     * The actual formgroup item.
     */
    formItem?: FormGroup;
    /**
     * Flag that denotes if form is being submitted
     */
    set submitting(isSubmitting: boolean);
    /**
     * Payment mode type.
     */
    paymentMode: PaymentMode;
    /**
     * Event emitter when we cancel payment editing (sends form to check if it's not changed)
     */
    editPaymentCancel: EventEmitter<FormGroup>;
    /**
     * Event emitter when we submit editing payment (sends form)
     */
    editPaymentSubmit: EventEmitter<FormGroup>;
    private isSubmitting$;
    isSubmittingShared$: import("rxjs").Observable<boolean>;
    form: FormGroup;
    controls: Array<PaymentFormGroup>;
    inputFormSettingControl: AbstractControl;
    templateNameControl: AbstractControl;
    defaultBankCodeSettingControl: AbstractControl;
    defaultBankCodeSettingSubscription?: Subscription;
    inputFormSettingSubscription?: Subscription;
    buttonGroupConfig: PaymentFormFieldConfig;
    paymentModeType: typeof PaymentMode;
    constructor(fb: FormBuilder, componentsFactory: ComponentsFactoryService, formEl: ElementRef);
    private scrollToError;
    ngOnInit(): void;
    ngOnDestroy(): void;
    createFormFields(arr: Array<PaymentFormFieldConfig | PaymentFormGroup>, _group: FormGroup, controlsArr: Array<PaymentFormItem>, parentName?: string): void;
    getFormGroup(field: PaymentFormItem): FormGroup;
    getButtonGroupConfig(): {
        type: PaymentComponents;
        name: PaymentComponents;
        options: {
            submitting$: BehaviorSubject<boolean>;
            isModalView: boolean;
            isTemplateMode: boolean;
            templateModeType: TemplateModeType | undefined;
            paymentMode: PaymentMode;
            submit: () => void;
            reset: () => void;
        };
    };
    getIcon(): string;
    onSubmit(): void;
    onEditionSubmit(): void;
    onEditionCancel(): void;
    listenDefaultBankCodeSettingChange(): void;
    listenFormSettingChange(): void;
    resetForm(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<PayordFormComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<PayordFormComponent, "bb-payord-form", never, { "config": "config"; "isModalView": "isModalView"; "isTemplateMode": "isTemplateMode"; "isDebitPayment": "isDebitPayment"; "isEditPaymentModal": "isEditPaymentModal"; "templateModeType": "templateModeType"; "formItem": "formItem"; "submitting": "submitting"; "paymentMode": "paymentMode"; }, { "submitted": "submitted"; "clear": "clear"; "editPaymentCancel": "editPaymentCancel"; "editPaymentSubmit": "editPaymentSubmit"; }, never, never>;
}
