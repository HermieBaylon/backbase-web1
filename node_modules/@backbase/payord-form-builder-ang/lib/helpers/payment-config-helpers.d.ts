import { FormGroup } from '@angular/forms';
import { PaymentOption as PaymentOptionResponse } from '@backbase/data-ang/payment-order-options';
import { PaymentComponents, PaymentFormFieldConfig, PaymentFormGroup, PaymentFormItem, PaymentOptionFields, PaymentTypeConfig } from '@backbase/payment-orders-ang';
import { Observable } from 'rxjs';
export declare const filterPaymentConfigs: (paymentOptions: PaymentOptionResponse[], paymentTypes: Array<PaymentTypeConfig>) => PaymentTypeConfig[];
export declare const getPaymentCostFieldConfig: () => {
    name: PaymentOptionFields;
    type: PaymentComponents;
    options: {
        isWizardMode: boolean;
    };
};
export declare const getSelectPaymentOptionFieldConfig: (items$: Observable<Array<PaymentOptionResponse>>, paymentTypes: Array<PaymentTypeConfig>, checkClosedPaymentsAccess?: boolean) => {
    name: PaymentOptionFields;
    type: PaymentComponents;
    options: {
        items$: Observable<PaymentOptionResponse[]>;
        optionLabels: {
            [key: string]: string;
        };
        isWizardMode: boolean;
        checkClosedPaymentsAccess: boolean;
    };
};
export declare const getChargeBearerFieldConfig: () => {
    name: PaymentOptionFields;
    type: PaymentComponents;
    options: {
        label: string;
        isWizardMode: boolean;
    };
};
export declare const getRelatedPaymentConfig: (paymentConfigs: PaymentTypeConfig[]) => PaymentTypeConfig | undefined;
export declare const getMappedGroup: (mappedGroupName: string, form: FormGroup) => FormGroup;
/**
 * Tags each form field in a payment config to the corresponding parent form Group.
 */
export declare const tagFormGroupToFormFields: (arr: Array<PaymentFormFieldConfig | PaymentFormGroup>, _group: FormGroup, controlsArr: Array<PaymentFormItem>, form: FormGroup, parentName?: string) => void;
export declare const hasSameFields: (paymentConfigs: PaymentTypeConfig[]) => boolean;
