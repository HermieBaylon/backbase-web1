(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core'), require('@angular/forms'), require('@backbase/foundation-ang/core'), require('@backbase/payment-orders-ang'), require('rxjs'), require('rxjs/operators'), require('@backbase/ui-ang/currency-input'), require('@backbase/ui-ang/input-validation-message'), require('@backbase/foundation-ang/future'), require('@backbase/ui-ang/input-checkbox'), require('@backbase/data-ang/payment-order'), require('@backbase/ui-ang/account-selector'), require('@backbase/ui-ang/input-radio-group'), require('@backbase/ui-ang/collapsible'), require('@backbase/ui-ang/icon'), require('@backbase/ui-ang/button'), require('@backbase/ui-ang/dropdown-single-select'), require('@backbase/ui-ang/textarea'), require('@backbase/ui-ang/input-text'), require('@backbase/ui-ang/loading-indicator'), require('@backbase/ui-ang/amount'), require('@backbase/ui-ang/switch'), require('@backbase/ui-ang/input-datepicker'), require('@backbase/ui-ang/input-number'), require('@backbase/ui-ang/input-phone'), require('bignumber.js'), require('@angular/router'), require('@backbase/ui-ang/product-selector'), require('@backbase/ui-ang/product-item-basic-account'), require('@backbase/ui-ang/empty-state'), require('@backbase/ui-ang/amount-input'), require('@backbase/ui-ang/load-button'), require('@backbase/ui-ang/modal'), require('@angular/localize/init'), require('@angular/cdk/scrolling'), require('@ng-bootstrap/ng-bootstrap'), require('@backbase/ui-ang/highlight'), require('@backbase/ui-ang/header'), require('@backbase/ui-ang/alert'), require('@backbase/ui-ang/tooltip-directive'), require('@angular/common/http'), require('@backbase/ui-ang/search-box'), require('@backbase/ui-ang/fieldset'), require('@backbase/ui-ang/stepper')) :
    typeof define === 'function' && define.amd ? define('@backbase/payord-form-builder-ang', ['exports', '@angular/common', '@angular/core', '@angular/forms', '@backbase/foundation-ang/core', '@backbase/payment-orders-ang', 'rxjs', 'rxjs/operators', '@backbase/ui-ang/currency-input', '@backbase/ui-ang/input-validation-message', '@backbase/foundation-ang/future', '@backbase/ui-ang/input-checkbox', '@backbase/data-ang/payment-order', '@backbase/ui-ang/account-selector', '@backbase/ui-ang/input-radio-group', '@backbase/ui-ang/collapsible', '@backbase/ui-ang/icon', '@backbase/ui-ang/button', '@backbase/ui-ang/dropdown-single-select', '@backbase/ui-ang/textarea', '@backbase/ui-ang/input-text', '@backbase/ui-ang/loading-indicator', '@backbase/ui-ang/amount', '@backbase/ui-ang/switch', '@backbase/ui-ang/input-datepicker', '@backbase/ui-ang/input-number', '@backbase/ui-ang/input-phone', 'bignumber.js', '@angular/router', '@backbase/ui-ang/product-selector', '@backbase/ui-ang/product-item-basic-account', '@backbase/ui-ang/empty-state', '@backbase/ui-ang/amount-input', '@backbase/ui-ang/load-button', '@backbase/ui-ang/modal', '@angular/localize/init', '@angular/cdk/scrolling', '@ng-bootstrap/ng-bootstrap', '@backbase/ui-ang/highlight', '@backbase/ui-ang/header', '@backbase/ui-ang/alert', '@backbase/ui-ang/tooltip-directive', '@angular/common/http', '@backbase/ui-ang/search-box', '@backbase/ui-ang/fieldset', '@backbase/ui-ang/stepper'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["payord-form-builder-ang"] = {}), global.ng.common, global.ng.core, global.ng.forms, global.i1$2, global.i1, global.rxjs, global.rxjs.operators, global.i1$1, global.i3, global.i2, global.i5$1, global.paymentOrder, global.i2$1, global.i2$2, global.i1$3, global.i2$3, global.i7, global.i2$4, global.i1$4, global.i1$5, global.i4$1, global.i5$2, global.i2$5, global.i1$6, global.i1$7, global.i1$8, global.BigNumber, global.ng.router, global.i3$1, global.i4$2, global.i6, global.i1$a, global.i2$6, global.i3$2, global.ng.localize.init, global.ng.cdk.scrolling, global.i7$1, global.i9, global.i1$c, global.i1$d, global.i6$1, global.ng.common.http, global.i1$e, global.i2$7, global.stepper));
})(this, (function (exports, i4, i0, i5, i1$2, i1, rxjs, operators, i1$1, i3, i2, i5$1, paymentOrder, i2$1, i2$2, i1$3, i2$3, i7, i2$4, i1$4, i1$5, i4$1, i5$2, i2$5, i1$6, i1$7, i1$8, BigNumber, i1$9, i3$1, i4$2, i6, i1$a, i2$6, i3$2, init, i1$b, i7$1, i9, i1$c, i1$d, i6$1, http, i1$e, i2$7, stepper) { 'use strict';

    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i4__namespace = /*#__PURE__*/_interopNamespace(i4);
    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i5__namespace = /*#__PURE__*/_interopNamespace(i5);
    var i1__namespace$2 = /*#__PURE__*/_interopNamespace(i1$2);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i1__namespace$1 = /*#__PURE__*/_interopNamespace(i1$1);
    var i3__namespace = /*#__PURE__*/_interopNamespace(i3);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i5__namespace$1 = /*#__PURE__*/_interopNamespace(i5$1);
    var i2__namespace$1 = /*#__PURE__*/_interopNamespace(i2$1);
    var i2__namespace$2 = /*#__PURE__*/_interopNamespace(i2$2);
    var i1__namespace$3 = /*#__PURE__*/_interopNamespace(i1$3);
    var i2__namespace$3 = /*#__PURE__*/_interopNamespace(i2$3);
    var i7__namespace = /*#__PURE__*/_interopNamespace(i7);
    var i2__namespace$4 = /*#__PURE__*/_interopNamespace(i2$4);
    var i1__namespace$4 = /*#__PURE__*/_interopNamespace(i1$4);
    var i1__namespace$5 = /*#__PURE__*/_interopNamespace(i1$5);
    var i4__namespace$1 = /*#__PURE__*/_interopNamespace(i4$1);
    var i5__namespace$2 = /*#__PURE__*/_interopNamespace(i5$2);
    var i2__namespace$5 = /*#__PURE__*/_interopNamespace(i2$5);
    var i1__namespace$6 = /*#__PURE__*/_interopNamespace(i1$6);
    var i1__namespace$7 = /*#__PURE__*/_interopNamespace(i1$7);
    var i1__namespace$8 = /*#__PURE__*/_interopNamespace(i1$8);
    var BigNumber__default = /*#__PURE__*/_interopDefaultLegacy(BigNumber);
    var i1__namespace$9 = /*#__PURE__*/_interopNamespace(i1$9);
    var i3__namespace$1 = /*#__PURE__*/_interopNamespace(i3$1);
    var i4__namespace$2 = /*#__PURE__*/_interopNamespace(i4$2);
    var i6__namespace = /*#__PURE__*/_interopNamespace(i6);
    var i1__namespace$a = /*#__PURE__*/_interopNamespace(i1$a);
    var i2__namespace$6 = /*#__PURE__*/_interopNamespace(i2$6);
    var i3__namespace$2 = /*#__PURE__*/_interopNamespace(i3$2);
    var i1__namespace$b = /*#__PURE__*/_interopNamespace(i1$b);
    var i7__namespace$1 = /*#__PURE__*/_interopNamespace(i7$1);
    var i9__namespace = /*#__PURE__*/_interopNamespace(i9);
    var i1__namespace$c = /*#__PURE__*/_interopNamespace(i1$c);
    var i1__namespace$d = /*#__PURE__*/_interopNamespace(i1$d);
    var i6__namespace$1 = /*#__PURE__*/_interopNamespace(i6$1);
    var i1__namespace$e = /*#__PURE__*/_interopNamespace(i1$e);
    var i2__namespace$7 = /*#__PURE__*/_interopNamespace(i2$7);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var mapLocalize = function (obj) {
        if (!i1.isObjectTruthy(obj))
            return obj;
        return Object.entries(obj).reduce(function (result, _b) {
            var _c;
            var _d = __read(_b, 2), key = _d[0], value = _d[1];
            var localizedValue = typeof value === 'string' ? $localize(templateObject_1$4 || (templateObject_1$4 = __makeTemplateObject(["", ""], ["", ""])), value) : value;
            return Object.assign(Object.assign({}, result), (_c = {}, _c[key] = localizedValue, _c));
        }, {});
    };
    function mapDependentItems(dependants, currentParent) {
        if (dependants === void 0) { dependants = []; }
        var localDeps = [];
        var dependantItems = dependants.reduce(function (result, dep) {
            if (typeof dep === 'string') {
                localDeps.push(dep);
                return result;
            }
            else {
                return __spreadArray(__spreadArray([], __read(result)), [dep]);
            }
        }, []);
        return __spreadArray(__spreadArray([], __read(dependantItems)), [
            { parent: currentParent, items: localDeps },
        ]);
    }
    function getPurposeOfPaymentInfo(country) {
        var fieldName = 'purpose-of-payment';
        var result = { isOptional: true };
        var countryInfo = (country === null || country === void 0 ? void 0 : country.inputFormSettings) || [];
        var purposes = country === null || country === void 0 ? void 0 : country.purposesOfPayment;
        countryInfo.forEach(function (field) {
            if (field.key === fieldName) {
                result.isOptional =
                    field.mandatory !== undefined ? !field.mandatory : result.isOptional;
            }
        });
        return Object.assign(Object.assign({}, result), { purposes: purposes });
    }
    function toggleBeneficiaryControls(formGroup, shouldDisableFields) {
        var controls = [
            i1.CounterPartyFields.accountNumber,
            i1.CounterPartyFields.creditorBank + "." + i1.CounterPartyFields.bankBranchCode,
            i1.CounterPartyFields.creditorBank + "." + i1.CounterPartyFields.bankName,
            i1.CounterPartyFields.creditorBank + "." + i1.CounterPartyFields.bic,
        ];
        if (shouldDisableFields) {
            controls === null || controls === void 0 ? void 0 : controls.forEach(function (control) { var _a; return (_a = formGroup.get(control)) === null || _a === void 0 ? void 0 : _a.disable(); });
        }
        else {
            controls === null || controls === void 0 ? void 0 : controls.forEach(function (control) { var _a; return (_a = formGroup.get(control)) === null || _a === void 0 ? void 0 : _a.enable(); });
        }
    }
    var templateObject_1$4;

    /**
     * Registers a FormControl in the provided FormGroup
     *
     * @param group
     * @param formControlName
     * @param [validators]
     * @param [asyncValidators]
     * @param [initialValue='']
     * @returns
     */
    function registerFormControl(group, formControlName, validators, asyncValidators, initialValue, config) {
        if (initialValue === void 0) { initialValue = ''; }
        var formControl;
        formControl = group.controls[formControlName];
        group.addControl(formControlName, new i5.FormControl(initialValue, validators || [], asyncValidators || []));
        if (formControl) {
            resetValidators(formControl, validators, asyncValidators, config);
        }
        else {
            group.addControl(formControlName, new i5.FormControl(initialValue, validators || [], asyncValidators || []));
            formControl = group.controls[formControlName];
        }
        return formControl;
    }
    /**
     * Converts the nested form array into a flat map. It is used to lookup any fields easily
     */
    var createControlsMap = function (controls, controlsMap) {
        if (controlsMap === void 0) { controlsMap = {}; }
        var path;
        return controls.reduce(function (acc, control) {
            path = control.parent
                ? control.parent + "." + control.name
                : control.name;
            if (control.fields) {
                acc = Object.assign(Object.assign({}, acc), createControlsMap(control.fields, acc));
            }
            else {
                acc[path] = control;
            }
            return acc;
        }, controlsMap);
    };
    function registerFormGroup(group, formGroupName, formGroupConfig, validators, asyncValidators) {
        var subGroup = group.get(formGroupName) ||
            new i5.FormGroup({}, validators || [], asyncValidators || []);
        for (var key in formGroupConfig) {
            if (formGroupConfig.hasOwnProperty(key)) {
                subGroup.registerControl(key, new i5.FormControl(formGroupConfig[key].shift(), formGroupConfig[key].shift() || []));
            }
        }
        group.addControl(formGroupName, subGroup);
        return group.get(formGroupName);
    }
    function getParentForm(control) {
        var ancestor = control;
        while (ancestor && ancestor.parent) {
            ancestor = ancestor.parent;
        }
        return ancestor;
    }
    function getFormFieldData(_e) {
        var formControlPath = _e.formControlPath, form = _e.form, config = _e.config;
        var apiFieldMap = {
            'transferTransactionInformation.counterpartyAccount.identification.identification': {
                name: i1.CounterPartyFields.accountNumber,
                path: i1.PaymentBaseFields.counterparty + "." + i1.CounterPartyFields.accountNumber,
            },
            'transferTransactionInformation.counterpartyBank.bankBranchCode': {
                name: i1.CounterPartyFields.bankBranchCode,
                path: i1.PaymentBaseFields.counterparty + "." + i1.CounterPartyFields.creditorBank + "." + i1.CounterPartyFields.bankBranchCode,
            },
            'transferTransactionInformation.instructedAmount.currencyCode': {
                name: i1.RemittanceInfoFields.amountCurrencyGroup,
                path: i1.PaymentBaseFields.remittanceInfo + "." + i1.RemittanceInfoFields.amountCurrencyGroup,
            },
        };
        var fieldData = apiFieldMap[formControlPath] || null;
        if (fieldData) {
            var control = form.get(fieldData.path);
            var fieldConfig = i1.getConfig(fieldData.name, config);
            return { control: control, fieldConfig: fieldConfig };
        }
        return;
    }
    function applyInputFormSettingForCountry(_e) {
        var inputFormSetting = _e.inputFormSetting, form = _e.form, config = _e.config;
        var _a;
        var counterpartyGroup = form.get(i1.PaymentBaseFields.counterparty);
        var isClosedPaymentControl = (form.get(i1.HiddenFields.isClosedPayment));
        var hasArrangementIdControl = (counterpartyGroup.get(i1.CounterPartyFields.id));
        var schemeControl = counterpartyGroup.get(i1.CounterPartyFields.schemeName) ||
            registerFormControl(counterpartyGroup, i1.CounterPartyFields.schemeName);
        if (inputFormSetting.apiField) {
            var _f = getFormFieldData({
                formControlPath: inputFormSetting.apiField,
                form: form,
                config: config,
            }) || {}, _g = _f.control, control = _g === void 0 ? null : _g, _h = _f.fieldConfig, fieldConfig = _h === void 0 ? null : _h;
            var validators = [];
            if (inputFormSetting.mandatory) {
                // For currency input we need amountValidator instead of Validators.required
                if (inputFormSetting.key === 'currency') {
                    validators.push(i1.amountValidator);
                }
                else {
                    validators.push(i5.Validators.required);
                }
            }
            if (inputFormSetting.regex) {
                validators.push(createValidatorFromRegex(inputFormSetting.regex));
            }
            if (inputFormSetting.key === 'currency' && inputFormSetting.values.length) {
                validators.push(i1.currencyValidatorFactory(inputFormSetting.values));
            }
            if (inputFormSetting.key === 'account-number') {
                schemeControl.setValue(inputFormSetting.format);
                if (inputFormSetting.format === 'IBAN') {
                    validators.push(i1.ibanCountryValidator());
                }
            }
            if (control && fieldConfig) {
                var labelData = inputFormSetting.label || {};
                var labelKey = Object.keys(labelData)[0];
                var label = labelData[labelKey]; // need  to implement i18n for this
                fieldConfig.options = fieldConfig.options || {};
                if (label) {
                    if (!fieldConfig.options.defaultLabel) {
                        fieldConfig.options.defaultLabel =
                            getLabelFromInputSetting((_a = form.get('defaultBankCodeSetting')) === null || _a === void 0 ? void 0 : _a.value) || fieldConfig.options.label;
                    }
                    fieldConfig.options.label = label;
                }
                else if (fieldConfig.options.defaultLabel &&
                    fieldConfig.options.defaultLabel !== fieldConfig.options.label) {
                    // reset to default label if the inputform setting doesn't contain label.
                    fieldConfig.options.label = fieldConfig.options.defaultLabel;
                }
                var shouldEnableControls = !((isClosedPaymentControl === null || isClosedPaymentControl === void 0 ? void 0 : isClosedPaymentControl.value) || (hasArrangementIdControl === null || hasArrangementIdControl === void 0 ? void 0 : hasArrangementIdControl.value));
                if (inputFormSetting.notApplicable) {
                    control.reset();
                    validators = null;
                    control.disable();
                }
                else if (control.disabled && shouldEnableControls) {
                    control.enable();
                }
                if (isControlFilled(control)) {
                    control.markAsTouched();
                }
                control.setValidators(validators);
                control.updateValueAndValidity();
            }
        }
    }
    function setAdditionalBankDetails(form, config) {
        var _a;
        var setting = (_a = form.get('defaultBankCodeSetting')) === null || _a === void 0 ? void 0 : _a.value;
        if (!setting)
            return;
        var label = getLabelFromInputSetting(setting);
        var regex = setting.regex;
        if (label) {
            setAdditionalBankLabel(i1.CounterPartyFields.correspondentBank, label, config);
            setAdditionalBankLabel(i1.CounterPartyFields.intermediaryBank, label, config);
        }
        if (regex) {
            appendBankCodePatternValidator(i1.CounterPartyFields.correspondentBank, regex, config);
            appendBankCodePatternValidator(i1.CounterPartyFields.intermediaryBank, regex, config);
        }
    }
    function createValidatorFromRegex(pattern) {
        if (pattern.startsWith('/') && pattern.endsWith('/')) {
            pattern = pattern.slice(1, -1);
        }
        return i5.Validators.pattern(new RegExp(pattern));
    }
    function appendBankCodePatternValidator(controlName, regex, config) {
        var additionalBankConfig = i1.getConfig(controlName, config);
        if (!additionalBankConfig)
            return;
        var bankCodeConfig = i1.getConfig(i1.CounterPartyFields.bankBranchCode, additionalBankConfig);
        if (bankCodeConfig) {
            if (!(bankCodeConfig === null || bankCodeConfig === void 0 ? void 0 : bankCodeConfig.options)) {
                bankCodeConfig.options = {};
            }
            bankCodeConfig.options.validators = [createValidatorFromRegex(regex)];
        }
    }
    function getLabelFromInputSetting(setting) {
        return Object.values((setting === null || setting === void 0 ? void 0 : setting.label) || {})[0];
    }
    function setAdditionalBankLabel(additionalBankType, label, config) {
        var _a;
        var additionalBankConfig = i1.getConfig(additionalBankType, config);
        if (additionalBankConfig) {
            var bankCodeConfig = i1.getConfig(i1.CounterPartyFields.bankBranchCode, additionalBankConfig);
            var selectAdditionalBankCodeTypeConfig = i1.getConfig('selectAdditionalBankCodeType', additionalBankConfig);
            var selectAdditionalBankCodeTypeOptions = (_a = selectAdditionalBankCodeTypeConfig === null || selectAdditionalBankCodeTypeConfig === void 0 ? void 0 : selectAdditionalBankCodeTypeConfig.options) === null || _a === void 0 ? void 0 : _a.options;
            if (bankCodeConfig === null || bankCodeConfig === void 0 ? void 0 : bankCodeConfig.options) {
                bankCodeConfig.options.label = label;
            }
            if (selectAdditionalBankCodeTypeOptions === null || selectAdditionalBankCodeTypeOptions === void 0 ? void 0 : selectAdditionalBankCodeTypeOptions.length) {
                selectAdditionalBankCodeTypeOptions.forEach(function (option) {
                    if (option.value === 'BRANCH_CODE') {
                        option.label = label;
                    }
                });
            }
        }
    }
    function isControlFilled(control) {
        var _a;
        var isAmountControl = ((control === null || control === void 0 ? void 0 : control.value) || {}).hasOwnProperty('currency') &&
            ((control === null || control === void 0 ? void 0 : control.value) || {}).hasOwnProperty('amount');
        return isAmountControl ? !!((_a = control === null || control === void 0 ? void 0 : control.value) === null || _a === void 0 ? void 0 : _a.amount) : !!(control === null || control === void 0 ? void 0 : control.value);
    }
    function isClosedPaymentValidator(control) {
        var _a, _b, _c, _d;
        var form = getParentForm(control);
        var counterPartyDetails = (_a = (form.get(i1.PaymentBaseFields.counterparty))) === null || _a === void 0 ? void 0 : _a.getRawValue();
        var selectedBeneficiary = (_b = form.get(i1.HiddenFields.selectedBeneficiary)) === null || _b === void 0 ? void 0 : _b.value;
        var isBeneficairyUpdatedManually = i1.isSelectedBeneficiaryModified(counterPartyDetails, selectedBeneficiary) ||
            (((_c = form === null || form === void 0 ? void 0 : form.get(i1.HiddenFields.isManualEdit)) === null || _c === void 0 ? void 0 : _c.value) &&
                isCounterPartyDetailsTruthy(counterPartyDetails));
        return isBeneficairyUpdatedManually &&
            ((_d = form === null || form === void 0 ? void 0 : form.get(i1.HiddenFields.isClosedPayment)) === null || _d === void 0 ? void 0 : _d.value)
            ? { hasOnlyClosedPaymentPermission: true }
            : null;
    }
    function getCounterpartyFormGroupDetails(form) {
        var _a, _b, _c;
        var counterparty = (_a = (form.get(i1.PaymentBaseFields.counterparty))) === null || _a === void 0 ? void 0 : _a.getRawValue();
        return {
            name: counterparty === null || counterparty === void 0 ? void 0 : counterparty.name,
            accountNumber: counterparty === null || counterparty === void 0 ? void 0 : counterparty.accountNumber,
            bankBranchCode: (_b = counterparty === null || counterparty === void 0 ? void 0 : counterparty.creditorBank) === null || _b === void 0 ? void 0 : _b.bankBranchCode,
            BIC: (_c = counterparty === null || counterparty === void 0 ? void 0 : counterparty.creditorBank) === null || _c === void 0 ? void 0 : _c.bic,
        };
    }
    function resetValidators(formControl, validators, asyncValidators, config) {
        var _a;
        var computedValidators = validators ? __spreadArray([], __read(validators)) : [];
        if (!(config === null || config === void 0 ? void 0 : config.hidden) && ((_a = config === null || config === void 0 ? void 0 : config.options) === null || _a === void 0 ? void 0 : _a.isConditionalMandatory)) {
            computedValidators.push(i5.Validators.required);
        }
        formControl.markAsUntouched();
        formControl.clearValidators();
        formControl.clearAsyncValidators();
        formControl.setAsyncValidators(asyncValidators || []);
        formControl.setValidators(computedValidators);
    }
    function addAddressFields(formGroup) {
        var addressFields = {
            addressLine1: [''],
            addressLine2: [''],
            streetName: [''],
            postCode: [''],
            town: [''],
            countrySubDivision: [''],
            country: [''],
        };
        for (var key in addressFields) {
            if (addressFields.hasOwnProperty(key) && !formGroup.get(key)) {
                registerFormControl(formGroup, key);
            }
        }
    }
    function registerFormArray(group, formArrayName, validators, asyncValidators) {
        var array = group.get(formArrayName) ||
            new i5.FormArray([], validators || [], asyncValidators || []);
        group.addControl(formArrayName, array);
        return group.get(formArrayName);
    }
    function addControlToFormArray(array, formGroupConfig, validators, asyncValidators, initialValue) {
        if (initialValue === void 0) { initialValue = null; }
        var subGroup = new i5.FormGroup({}, validators || [], asyncValidators || []);
        formGroupConfig.forEach(function (formConfig) {
            if (formConfig.name) {
                subGroup.registerControl(formConfig.name, new i5.FormControl(initialValue, formConfig.validators || []));
            }
        });
        array.push(subGroup);
        return array;
    }
    function isEditFormDirty(formValue, initialFormValue) {
        var _a, _b;
        if (!initialFormValue)
            return true;
        var schedule = getScheduleDatePart(formValue.schedule);
        var initialSchedule = getScheduleDatePart(initialFormValue.schedule);
        return (((_a = formValue.initiator) === null || _a === void 0 ? void 0 : _a.id) !== ((_b = initialFormValue.initiator) === null || _b === void 0 ? void 0 : _b.id) ||
            !i1.isCounterpartyObjectEquals(formValue.counterparty, initialFormValue.counterparty) ||
            !i1.objectEquals(schedule, initialSchedule) ||
            isRemittanceInfoDirty(formValue[i1.PaymentBaseFields.remittanceInfo], initialFormValue[i1.PaymentBaseFields.remittanceInfo]) ||
            formValue.chargeBearer !== initialFormValue.chargeBearer);
    }
    function isTemplateFormDirty(formValue, initialFormValue) {
        return (formValue[i1.PaymentBaseFields.initiator].id !==
            initialFormValue[i1.PaymentBaseFields.initiator].id ||
            !i1.objectEquals(formValue[i1.PaymentBaseFields.counterparty], initialFormValue[i1.PaymentBaseFields.counterparty]) ||
            isRemittanceInfoDirty(formValue[i1.PaymentBaseFields.remittanceInfo], initialFormValue[i1.PaymentBaseFields.remittanceInfo]) ||
            formValue[i1.PaymentTemplateFields.templateName] !==
                initialFormValue[i1.PaymentTemplateFields.templateName]);
    }
    function getScheduleDatePart(schedule) {
        return Object.assign(Object.assign({}, schedule), { startDate: i1.datePart(schedule === null || schedule === void 0 ? void 0 : schedule.startDate), endDate: i1.datePart(schedule === null || schedule === void 0 ? void 0 : schedule.endDate) });
    }
    function isRemittanceInfoDirty(remittanceInfo, initialRemittanceInfo) {
        if (!remittanceInfo)
            return false;
        var amountGroup = remittanceInfo[i1.RemittanceInfoFields.amountCurrencyGroup];
        var initialAmountGroup = initialRemittanceInfo[i1.RemittanceInfoFields.amountCurrencyGroup];
        return ((amountGroup === null || amountGroup === void 0 ? void 0 : amountGroup.amount) !== (initialAmountGroup === null || initialAmountGroup === void 0 ? void 0 : initialAmountGroup.amount) ||
            (amountGroup === null || amountGroup === void 0 ? void 0 : amountGroup.currency) !== (initialAmountGroup === null || initialAmountGroup === void 0 ? void 0 : initialAmountGroup.currency) ||
            remittanceInfo[i1.RemittanceInfoFields.urgent] !==
                initialRemittanceInfo[i1.RemittanceInfoFields.urgent] ||
            remittanceInfo[i1.RemittanceInfoFields.paymentReference] !==
                initialRemittanceInfo[i1.RemittanceInfoFields.paymentReference] ||
            remittanceInfo[i1.RemittanceInfoFields.description] !==
                initialRemittanceInfo[i1.RemittanceInfoFields.description]);
    }
    function applyPurposeOfPaymentSettings(_e) {
        var form = _e.form, config = _e.config;
        var _a;
        var country = (_a = form.value) === null || _a === void 0 ? void 0 : _a.inputFormFromSettings;
        var remittanceGroup = form.get(i1.PaymentBaseFields.remittanceInfo);
        if (!remittanceGroup) {
            return;
        }
        var purposeControl = remittanceGroup.get(i1.RemittanceInfoFields.purposeOfPayment) ||
            registerFormControl(remittanceGroup, i1.RemittanceInfoFields.purposeOfPayment);
        var info = getPurposeOfPaymentInfo(country);
        var fieldConfig = i1.getConfig(i1.RemittanceInfoFields.purposeOfPayment, config);
        var options = fieldConfig === null || fieldConfig === void 0 ? void 0 : fieldConfig.options;
        if (purposeControl && options) {
            options.isOptional = info.isOptional;
            options.purposes = info.purposes;
            options.isCollapsed = info.isOptional;
            if (options.isOptional) {
                purposeControl.setValidators(null);
                purposeControl.setAsyncValidators(null);
                purposeControl.updateValueAndValidity();
            }
            else {
                purposeControl.setValidators(__spreadArray([
                    i5.Validators.required
                ], __read((options.validators || []))));
                purposeControl.setAsyncValidators(__spreadArray([], __read((options.asyncValidators || []))));
                purposeControl.updateValueAndValidity();
            }
        }
    }
    function isCounterPartyDetailsTruthy(counterpartyDetails) {
        var _a;
        return i1.isObjectTruthy({
            name: counterpartyDetails === null || counterpartyDetails === void 0 ? void 0 : counterpartyDetails.name,
            accountNumber: counterpartyDetails.accountNumber,
            bankBranchCode: (_a = counterpartyDetails.creditorBank) === null || _a === void 0 ? void 0 : _a.bankBranchCode,
        });
    }
    function getBeneficiaryDetails(beneficiary) {
        var _a, _b;
        var contactAccount = (_b = (_a = beneficiary) === null || _a === void 0 ? void 0 : _a.accounts) === null || _b === void 0 ? void 0 : _b[0];
        var beneficiaryItem = beneficiary;
        return {
            bankBranchCode: (contactAccount === null || contactAccount === void 0 ? void 0 : contactAccount.bankCode) || (beneficiaryItem === null || beneficiaryItem === void 0 ? void 0 : beneficiaryItem.bankBranchCode),
            accountNumber: (contactAccount === null || contactAccount === void 0 ? void 0 : contactAccount.accountNumber) || (beneficiaryItem === null || beneficiaryItem === void 0 ? void 0 : beneficiaryItem.accountNumber),
            name: beneficiary === null || beneficiary === void 0 ? void 0 : beneficiary.name,
            BIC: (contactAccount === null || contactAccount === void 0 ? void 0 : contactAccount.BIC) || (beneficiaryItem === null || beneficiaryItem === void 0 ? void 0 : beneficiaryItem.BIC),
            address: i1.getAccountHolderAddress(contactAccount),
            bankAddress: i1.getContactBankAddress(contactAccount),
        };
    }
    function revertBeneficiaryChanges(form) {
        var _e, _f;
        var _a, _b, _c;
        var counterPartyGroup = form.get(i1.PaymentBaseFields.counterparty);
        var selectedBeneficiary = (_a = form.get(i1.HiddenFields.selectedBeneficiary)) === null || _a === void 0 ? void 0 : _a.value;
        var addressGroup = counterPartyGroup.get(i1.CounterPartyFields.postalAddress);
        var bankAddressGroup = counterPartyGroup.get([
            i1.CounterPartyFields.creditorBank,
            i1.CounterPartyFields.postalAddress,
        ]);
        var isManualEditControl = form.get(i1.HiddenFields.isManualEdit);
        if (selectedBeneficiary) {
            var beneficiaryDetails = getBeneficiaryDetails(selectedBeneficiary);
            isManualEditControl === null || isManualEditControl === void 0 ? void 0 : isManualEditControl.reset();
            counterPartyGroup.patchValue((_e = {},
                _e[i1.CounterPartyFields.name] = beneficiaryDetails.name,
                _e[i1.CounterPartyFields.accountNumber] = beneficiaryDetails.accountNumber,
                _e[i1.CounterPartyFields.creditorBank] = (_f = {},
                    _f[i1.CounterPartyFields.bankBranchCode] = beneficiaryDetails.bankBranchCode,
                    _f[i1.CounterPartyFields.bic] = beneficiaryDetails.BIC,
                    _f),
                _e));
            addressGroup === null || addressGroup === void 0 ? void 0 : addressGroup.setValue(Object.assign({}, beneficiaryDetails.address));
            bankAddressGroup === null || bankAddressGroup === void 0 ? void 0 : bankAddressGroup.setValue(Object.assign(Object.assign({}, beneficiaryDetails.bankAddress), { country: ((_b = beneficiaryDetails.bankAddress) === null || _b === void 0 ? void 0 : _b.country) ||
                    ((_c = form.get(i1.HiddenFields.defaultCountry)) === null || _c === void 0 ? void 0 : _c.value) }));
        }
        else {
            i1.resetBeneficiaryDetails(counterPartyGroup);
        }
    }

    function triggerHook(name, component) {
        var control = component.group.get(component.config.name);
        var hook = component.config.hooks && component.config.hooks[name];
        if (typeof hook === 'function') {
            // Triggering the hook with component specific parameters
            hook({
                component: component,
                control: control,
                group: component.group, // The parent form group
            });
        }
    }
    function triggerStepperHook(hooks, hookName, callback, stepperConfig, action) {
        var hook = hookName && hookName[hooks];
        var doneFn = callback;
        if (typeof hook === 'function') {
            if (hooks === i1.MultiPaymentHooks.onClick) {
                hook({
                    doneFn: doneFn,
                    stepperConfig: stepperConfig,
                    action: action,
                });
            }
            else {
                hook({});
            }
        }
    }

    var PayordAddressComponent = /** @class */ (function () {
        function PayordAddressComponent(elRef) {
            this.elRef = elRef;
            this.options = {};
            this.addressViewType = i1.ViewType.FORM;
            this.initialAddress = {
                addressLine1: [''],
                addressLine2: [''],
                streetName: [''],
                postCode: [''],
                town: [''],
                countrySubDivision: [''],
            };
        }
        PayordAddressComponent.prototype.ngOnInit = function () {
            this.options.hideCountry =
                this.options.hideCountry ||
                    (this.options.isWizardMode &&
                        this.options.addressType === i1.AddressType['beneficiary bank']);
            this.countries$ =
                this.options.useSanctionedCountries || this.options.isWizardMode
                    ? this.options.items$.pipe(operators.map(function (items) { return items.map(function (_b) {
                        var country = _b.country;
                        return ({
                            value: country,
                            label: i1.CountriesMap[country],
                        });
                    }); }))
                    : rxjs.of(this.options.countries);
            this.addressGroup = (registerFormGroup(this.group, this.config.name, this.initialAddress));
            if (!this.options.hideCountry) {
                registerFormControl(this.addressGroup, 'country');
            }
            this.addressViewType = i1.isAddressTruthy(this.addressGroup.value)
                ? i1.ViewType.CARD
                : i1.ViewType.BUTTON;
            this.parentForm = getParentForm(this.group);
            this.counterpartyIdControl = (this.parentForm.get([
                i1.PaymentBaseFields.counterparty,
                i1.CounterPartyFields.id,
            ]));
            triggerHook(i1.PaymentFormFieldHooks.onInit, this);
        };
        PayordAddressComponent.prototype.ngOnDestroy = function () {
            triggerHook(i1.PaymentFormFieldHooks.onDestroy, this);
        };
        PayordAddressComponent.prototype.onAddressAdd = function () {
            this.addressViewType = i1.ViewType.FORM;
        };
        PayordAddressComponent.prototype.onAddressEdit = function () {
            this.addressViewType = i1.ViewType.FORM;
        };
        PayordAddressComponent.prototype.onAddressDelete = function () {
            var _a;
            this.addressViewType = i1.ViewType.BUTTON;
            if (this.options.hideCountry || ((_a = this.options.options) === null || _a === void 0 ? void 0 : _a.length) === 1) {
                for (var key in this.addressGroup.controls) {
                    if (key !== 'country') {
                        this.addressGroup.controls[key].reset();
                    }
                }
            }
            else {
                this.addressGroup.reset();
            }
        };
        PayordAddressComponent.prototype.onAddressReset = function () {
            this.addressViewType = i1.ViewType.BUTTON;
        };
        PayordAddressComponent.prototype.onAddressSubmit = function () {
            if (this.addressGroup.valid) {
                this.addressViewType = i1.ViewType.CARD;
            }
            else {
                i1.focusErrorElement(this.elRef.nativeElement);
            }
        };
        return PayordAddressComponent;
    }());
    /** @nocollapse */ PayordAddressComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordAddressComponent, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ PayordAddressComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordAddressComponent, selector: "bb-payord-address", ngImport: i0__namespace, template: "<div class=\"bb-dynamic-input\" [hidden]=\"config?.hidden\">\n  <div class=\"form-group\" [ngClass]=\"options?.cssClasses\">\n    <bb-address-item-details\n      [addressForm]=\"addressGroup\"\n      [addressType]=\"options?.addressType\"\n      [viewType]=\"options?.viewType || addressViewType\"\n      [isClosedPayment]=\"\n        parentForm.get('isClosedPayment')?.value || counterpartyIdControl?.value\n      \"\n      (add)=\"onAddressAdd()\"\n      (edit)=\"onAddressEdit()\"\n      (discard)=\"onAddressDelete()\"\n      (delete)=\"onAddressDelete()\"\n      (reset)=\"onAddressReset()\"\n      (submit)=\"onAddressSubmit()\"\n      [states]=\"options?.states\"\n      [countries]=\"countries$ | async\"\n      [hideCountry]=\"options?.hideCountry\"\n      [attr.data-role]=\"config?.name\"\n    >\n    </bb-address-item-details>\n  </div>\n</div>\n", components: [{ type: i1__namespace.ӨAddressDetailsComponent, selector: "bb-address-item-details", inputs: ["addressForm", "addressType", "address", "isContactAddressCopied", "states", "countries", "hideCountry", "viewType", "isClosedPayment"], outputs: ["submit", "reset", "discard", "delete", "edit", "add"] }], directives: [{ type: i4__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], pipes: { "async": i4__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordAddressComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-payord-address',
                        templateUrl: './payord-address.component.html',
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; } });

    var ValidationMessageComponent = /** @class */ (function () {
        function ValidationMessageComponent(elRef) {
            this.elRef = elRef;
            /**
             * If Generic messages are not needed.
             */
            this.hideGeneric = false;
        }
        ValidationMessageComponent.prototype.ngOnInit = function () {
            this.validationMessages = this.validationMessages || [];
        };
        ValidationMessageComponent.prototype.getValidationMessage = function (error) {
            var e_1, _a;
            this.validationMessage = '';
            if (this.control.errors && this.validationMessages.length) {
                try {
                    for (var _b = __values(this.validationMessages), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var msg = _c.value;
                        if (error && msg.name === error) {
                            this.validationMessage = msg.message;
                            return this.validationMessage;
                        }
                        else if (this.control.errors[msg.name]) {
                            this.validationMessage = msg.message;
                            return this.validationMessage;
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            return this.validationMessage;
        };
        ValidationMessageComponent.prototype.getRequiredMessage = function () {
            this.requiredMessage = this.getValidationMessage('required');
            return this.requiredMessage;
        };
        ValidationMessageComponent.prototype.onFocusout = function () {
            i1.toggleTabIndex('.bb-input-validation-message', this.elRef.nativeElement, false);
        };
        return ValidationMessageComponent;
    }());
    /** @nocollapse */ ValidationMessageComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ValidationMessageComponent, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ ValidationMessageComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ValidationMessageComponent, selector: "bb-payord-validation-message", inputs: { control: "control", validationMessages: "validationMessages", label: "label", id: "id", hideGeneric: "hideGeneric" }, ngImport: i0__namespace, template: "<bb-input-validation-message-ui\n  data-role=\"input-error\"\n  (focusout)=\"onFocusout()\"\n  *ngIf=\"control\"\n  [showErrors]=\"control?.touched && control?.invalid\"\n>\n  <ng-container\n    *ngIf=\"control.errors && control.errors['required']; else invalidError\"\n  >\n    <span data-role=\"required-error\" [attr.id]=\"id\">\n      <ng-container *ngIf=\"getRequiredMessage(); else requiredError\">\n        {{ requiredMessage }}\n      </ng-container>\n    </span>\n  </ng-container>\n\n  <ng-template #requiredError>\n    <ng-container\n      i18n=\"@@dynamic-form-field-default-validation-message.required.error\"\n    >\n      {{ label }} is required\n    </ng-container>\n  </ng-template>\n\n  <ng-template #invalidError>\n    <span data-role=\"required-error\" [attr.id]=\"id\">\n      <ng-container *ngIf=\"getValidationMessage(); else genericError\">\n        {{ validationMessage }}\n      </ng-container>\n    </span>\n  </ng-template>\n\n  <ng-template #genericError>\n    <ng-container\n      *ngIf=\"!hideGeneric\"\n      i18n=\"@@dynamic-form-field-default-validation-message.generic.error\"\n    >\n      Invalid {{ label }}\n    </ng-container>\n  </ng-template>\n</bb-input-validation-message-ui>\n", components: [{ type: i3__namespace.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }], directives: [{ type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ValidationMessageComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-payord-validation-message',
                        templateUrl: './validation-message.component.html',
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; }, propDecorators: { control: [{
                    type: i0.Input
                }], validationMessages: [{
                    type: i0.Input
                }], label: [{
                    type: i0.Input
                }], id: [{
                    type: i0.Input
                }], hideGeneric: [{
                    type: i0.Input
                }] } });

    var PayordAmountComponent = /** @class */ (function () {
        function PayordAmountComponent() {
            var _d;
            this.payordAmountId = PayordAmountComponent._id++;
            /**
             * Initial amount value
             */
            this.initialAmount = (_d = {},
                _d[i1.RemittanceInfoFields.amount] = '',
                _d[i1.RemittanceInfoFields.currency] = '',
                _d);
        }
        /**
         * Initializes the component.
         *
         * @returns
         */
        PayordAmountComponent.prototype.ngOnInit = function () {
            this.control = registerFormControl(this.group, this.config.name, [i5.Validators.required, i1.amountValidator], this.options.asyncValidators, this.options.defaultValue || this.initialAmount, this.config);
            triggerHook(i1.PaymentFormFieldHooks.onInit, this);
        };
        /**
         * Cleanups just before Angular destroys the component.
         *
         * @returns
         */
        PayordAmountComponent.prototype.ngOnDestroy = function () {
            triggerHook(i1.PaymentFormFieldHooks.onDestroy, this);
        };
        PayordAmountComponent.prototype.getLabelledbyForSelector = function () {
            var _a, _b, _c;
            return (((_a = this.options) === null || _a === void 0 ? void 0 : _a.labelledBy) ||
                ((((_b = this.amountLabelEl) === null || _b === void 0 ? void 0 : _b.nativeElement.id) || '') + " " + (((_c = this.helperTextEL) === null || _c === void 0 ? void 0 : _c.nativeElement.id) || '')).trim());
        };
        return PayordAmountComponent;
    }());
    PayordAmountComponent._id = 0;
    /** @nocollapse */ PayordAmountComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordAmountComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ PayordAmountComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordAmountComponent, selector: "bb-payord-amount", viewQueries: [{ propertyName: "amountLabelEl", first: true, predicate: ["amountLabel"], descendants: true }, { propertyName: "helperTextEL", first: true, predicate: ["helperText"], descendants: true }], ngImport: i0__namespace, template: "<section\n  *ngIf=\"!config?.hidden\"\n  class=\"bb-dynamic-input form-group payment-amount\"\n  [formGroup]=\"group\"\n  [ngClass]=\"options?.cssClasses\"\n>\n  <div\n    #amountLabel\n    class=\"bb-dynamic-input__label bb-label\"\n    id=\"payord-amount__helper-label-{{ payordAmountId }}\"\n    *ngIf=\"options?.label\"\n  >\n    {{ options?.label }}\n  </div>\n  <span\n    #helperText\n    class=\"bb-dynamic-input__helper-text bb-text-support\"\n    id=\"payord-amount__helper-text-{{ payordAmountId }}\"\n    *ngIf=\"options?.helperText\"\n    [textContent]=\"options?.helperText\"\n  >\n  </span>\n  <bb-currency-input-ui\n    resultType=\"string\"\n    [attr.maxlength]=\"options?.maxLength || 18\"\n    [currencies]=\"options?.currencies\"\n    [decMaxLen]=\"options?.decMaxLen\"\n    [allowNegativeValue]=\"options?.allowNegativeValue\"\n    [currencyLabel]=\"options?.currencyLabel || ''\"\n    [decimalLabel]=\"options?.decimalLabel || ''\"\n    [disabled]=\"options?.disabled || false\"\n    [integer]=\"options?.integer\"\n    [integerLabel]=\"options?.integerLabel || ''\"\n    [isRightAligned]=\"options?.isRightAligned\"\n    [placeholder]=\"options?.placeholder || 0\"\n    [readonly]=\"options?.readonly\"\n    [aria-describedby]=\"options?.describedBy\"\n    [aria-labelledby]=\"getLabelledbyForSelector()\"\n    [aria-invalid]=\"options?.ariaInvalid\"\n    [formControlName]=\"this.config.name\"\n    [attr.data-role]=\"config.name\"\n  >\n    <div bbValidationMessage>\n      <bb-payord-validation-message\n        *ngIf=\"control?.touched && control?.invalid\"\n        [control]=\"group.get('amountGroup')\"\n        [validationMessages]=\"options?.validationMessages\"\n        [label]=\"options?.label || 'Amount'\"\n      ></bb-payord-validation-message>\n    </div>\n  </bb-currency-input-ui>\n  <div\n    class=\"bb-dynamic-input__desc bb-text-support bb-subtitle\"\n    *ngIf=\"options?.description\"\n    [textContent]=\"options?.description\"\n  ></div>\n</section>\n", components: [{ type: i1__namespace$1.CurrencyInputComponent, selector: "bb-currency-input-ui", inputs: ["decMaxLen", "decMinLen", "placeholder", "resultType", "integer", "required", "readonly", "disabled", "integerLabelSrOnly", "decimalLabelSrOnly", "currencies", "isRightAligned", "integerId", "decimalId", "integerLabel", "decimalLabel", "currencyLabel", "allowNegativeValue", "currencyListAriaLabel", "currencyListWithOnItemAriaLabel", "aria-describedby", "aria-labelledby", "aria-invalid"], outputs: ["blur"] }, { type: ValidationMessageComponent, selector: "bb-payord-validation-message", inputs: ["control", "validationMessages", "label", "id", "hideGeneric"] }], directives: [{ type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5__namespace.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5__namespace.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i5__namespace.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { type: i5__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5__namespace.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordAmountComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-payord-amount',
                        templateUrl: './payord-amount.component.html',
                    }]
            }], propDecorators: { amountLabelEl: [{
                    type: i0.ViewChild,
                    args: ['amountLabel']
                }], helperTextEL: [{
                    type: i0.ViewChild,
                    args: ['helperText']
                }] } });

    var VisibilityService = /** @class */ (function () {
        function VisibilityService() {
            this.showSubject$ = new rxjs.BehaviorSubject({});
            this.hideSubject$ = new rxjs.BehaviorSubject({});
        }
        Object.defineProperty(VisibilityService.prototype, "show$", {
            /**
             * Getter to show an item
             */
            get: function () {
                return this.showSubject$.asObservable();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(VisibilityService.prototype, "hide$", {
            /**
             * Getter to hide an item
             */
            get: function () {
                return this.hideSubject$.asObservable();
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Shows the items
         *
         * @param [name] Item name
         * @param [items] Items to show
         * @returns
         */
        VisibilityService.prototype.showItems = function (name, items) {
            this.showSubject$.next({ name: name, items: items });
        };
        /**
         * Hides the items
         *
         * @param [name] Item name
         * @param [items] Items to hide
         * @returns
         */
        VisibilityService.prototype.hideItems = function (name, items) {
            this.hideSubject$.next({ name: name, items: items });
        };
        return VisibilityService;
    }());
    /** @nocollapse */ VisibilityService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: VisibilityService, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ VisibilityService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: VisibilityService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: VisibilityService, decorators: [{
                type: i0.Injectable
            }] });

    var PayordBeneficiarySelectorComponent = /** @class */ (function () {
        function PayordBeneficiarySelectorComponent(visibilityService, deprecationService) {
            this.visibilityService = visibilityService;
            this.deprecationService = deprecationService;
            this.showBeneficiaryDetails = false;
            this.saveContactControlName = i1.CounterPartyFields.saveNewContact;
            this.manualEdit$ = new rxjs.BehaviorSubject(false);
            this.query = '';
            this.destroy$ = new rxjs.Subject();
        }
        PayordBeneficiarySelectorComponent.prototype.ngOnInit = function () {
            var _this = this;
            var _a, _b, _c, _d;
            this.setupFormFields();
            if (this.options.isWizardMode) {
                this.setupWizardFormFields();
            }
            triggerHook(i1.PaymentFormFieldHooks.onInit, this);
            if (this.accountNameControl.value || ((_a = this.options) === null || _a === void 0 ? void 0 : _a.isTemplateMode)) {
                this.showDependantFields();
            }
            else {
                this.hideDependantFields();
            }
            var initiatorControl = (_b = this.group.parent) === null || _b === void 0 ? void 0 : _b.get(i1.PaymentBaseFields.initiator);
            initiatorControl === null || initiatorControl === void 0 ? void 0 : initiatorControl.valueChanges.pipe(operators.takeUntil(this.destroy$), operators.startWith(initiatorControl.value)).subscribe(function (_e) {
                var id = _e.id;
                _this.accountNameControl.updateValueAndValidity();
            });
            (_c = this.arrangementIdControl) === null || _c === void 0 ? void 0 : _c.valueChanges.pipe(operators.takeUntil(this.destroy$)).subscribe(function (controlId) {
                if (!_this.isClosedPaymentControl.value) {
                    toggleBeneficiaryControls(_this.group, !!controlId);
                }
            });
            (_d = this.hideBeneficiaryFieldsControl) === null || _d === void 0 ? void 0 : _d.valueChanges.pipe(operators.takeUntil(this.destroy$)).subscribe(function () {
                _this.onSearch('');
                _this.enableBeneficiaryControl.setValue(true);
                _this.manualEdit$.next(false);
                _this.saveNewContactControl.setValue(false);
                if (!_this.options.isWizardMode) {
                    _this.hideDependantFields();
                }
            });
        };
        PayordBeneficiarySelectorComponent.prototype.ngOnDestroy = function () {
            var _a;
            (_a = this.initiatorControlSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
            triggerHook(i1.PaymentFormFieldHooks.onDestroy, this);
        };
        PayordBeneficiarySelectorComponent.prototype.setupFormFields = function () {
            var _a;
            this.deprecationService.logDeprecatedFeature("\n      \"initiatorNameControl\" is deprecated and will be removed in next major release, please use \"initiatorIdControl\" instead.\n    ");
            this.accountNameControl = registerFormControl(this.group, this.config.name, [i5.Validators.required, i1.sameAccountsValidator()]);
            this.manualEditControl = registerFormControl(this.group.parent, i1.HiddenFields.isManualEdit);
            this.isClosedPaymentControl = registerFormControl(this.group.parent, i1.HiddenFields.isClosedPayment);
            this.enableBeneficiaryControl = registerFormControl(this.group.parent, i1.HiddenFields.enableBeneficiary, [], [], true);
            this.beneficiaryAccountNameControl = registerFormControl(this.group, i1.HiddenFields.beneficiaryAccountName);
            this.saveContactControl = registerFormControl(this.group, this.saveContactControlName);
            this.saveNewContactControl = registerFormControl(this.group, i1.HiddenFields.showSaveNewContact);
            this.hideBeneficiaryFieldsControl = registerFormControl(this.group, i1.HiddenFields.hideBeneficiaryFields);
            this.arrangementIdControl = registerFormControl(this.group, i1.CounterPartyFields.id);
            this.selectedBeneficiaryControl = registerFormControl(this.group.parent, i1.HiddenFields.selectedBeneficiary);
            this.selectedContactControl = (registerFormGroup(this.group, i1.CounterPartyFields.selectedContact, {
                contactId: [''],
                accountId: [''],
            }));
            this.initiatorIdControl = ((_a = this.group.parent) === null || _a === void 0 ? void 0 : _a.get([i1.PaymentBaseFields.initiator, i1.InitiatorFields.id]));
        };
        PayordBeneficiarySelectorComponent.prototype.setupWizardFormFields = function () {
            this.accountNumberControl =
                this.group.controls[i1.CounterPartyFields.accountNumber] ||
                    this.registerAccountNumberControl();
            this.beneficiaryAddressGroup =
                this.group.controls[i1.CounterPartyFields.postalAddress] ||
                    this.registerAddressGroup(this.group);
            this.beneficiaryBankGroup =
                this.group.controls[i1.CounterPartyFields.creditorBank] ||
                    this.registerCreditorBankGroup();
            this.bankCodeControl =
                this.group.controls[i1.CounterPartyFields.creditorBank + "." + i1.CounterPartyFields.bankBranchCode] || this.registerBankCodeControl();
            this.bankNameControl =
                this.group.controls[i1.CounterPartyFields.creditorBank + "." + i1.CounterPartyFields.bankName] || this.registerBankNameControl();
            this.bankBicControl =
                this.group.controls[i1.CounterPartyFields.creditorBank + "." + i1.CounterPartyFields.bic] || this.registerBankBicControl();
            this.beneficiaryBankAddressGroup =
                this.group.controls[i1.CounterPartyFields.creditorBank + "." + i1.CounterPartyFields.postalAddress] || this.registerAddressGroup(this.beneficiaryBankGroup);
            registerFormControl(this.group, i1.CounterPartyFields.schemeName);
        };
        PayordBeneficiarySelectorComponent.prototype.registerAccountNumberControl = function () {
            return registerFormControl(this.group, i1.CounterPartyFields.accountNumber);
        };
        PayordBeneficiarySelectorComponent.prototype.registerBankNameControl = function () {
            return registerFormControl(this.beneficiaryBankGroup, i1.CounterPartyFields.bankName);
        };
        PayordBeneficiarySelectorComponent.prototype.registerBankBicControl = function () {
            return registerFormControl(this.beneficiaryBankGroup, i1.CounterPartyFields.bic);
        };
        PayordBeneficiarySelectorComponent.prototype.registerBankCodeControl = function () {
            return registerFormControl(this.beneficiaryBankGroup, i1.CounterPartyFields.bankBranchCode);
        };
        PayordBeneficiarySelectorComponent.prototype.registerAddressGroup = function (group) {
            var initialAddress = {
                addressLine1: [''],
                addressLine2: [''],
                streetName: [''],
                postCode: [''],
                town: [''],
                countrySubDivision: [''],
                country: [''],
            };
            return (registerFormGroup(group, i1.CounterPartyFields.postalAddress, initialAddress));
        };
        PayordBeneficiarySelectorComponent.prototype.registerCreditorBankGroup = function () {
            var creditorBankGroup = new i5.FormGroup({});
            this.group.addControl(i1.CounterPartyFields.creditorBank, creditorBankGroup);
            return creditorBankGroup;
        };
        PayordBeneficiarySelectorComponent.prototype.registerCreditorBankAddress = function () {
            var creditorBankGroup = new i5.FormGroup({});
            this.group.addControl(i1.CounterPartyFields.creditorBank, creditorBankGroup);
            return creditorBankGroup;
        };
        PayordBeneficiarySelectorComponent.prototype.fetchCreditorItems = function (params) {
            var _a;
            if ((_a = this.config.options) === null || _a === void 0 ? void 0 : _a.fetchItems$) {
                this.config.options.fetchItems$.next(params);
            }
        };
        PayordBeneficiarySelectorComponent.prototype.onLoadMoreAccounts = function (page) {
            this.deprecationService.logDeprecatedFeature("\n      \"onLoadMoreAccounts\" is deprecated since 3.9.3 and will be removed in 3.10.0, please use \"onFetchMoreItems\" instead.\n    ");
            this.fetchCreditorItems({
                params: { from: page, query: this.query },
                type: i1.BeneficiaryList.ACCOUNTS,
            });
        };
        PayordBeneficiarySelectorComponent.prototype.onLoadMoreContacts = function (page) {
            this.deprecationService.logDeprecatedFeature("\n      \"onLoadMoreContacts\" is deprecated since 3.9.3 and will be removed in 3.10.0, please use \"onFetchMoreItems\" instead.\n    ");
            this.fetchCreditorItems({
                params: { from: page, query: this.query },
                type: i1.BeneficiaryList.CONTACTS,
            });
        };
        PayordBeneficiarySelectorComponent.prototype.onFetchMoreItems = function (event) {
            this.fetchCreditorItems({
                params: { from: event.page, query: this.query },
                type: event.type,
            });
        };
        PayordBeneficiarySelectorComponent.prototype.onSearch = function (query) {
            this.query = query;
            this.manualEditControl.setValue(true);
            this.fetchCreditorItems({ params: { query: query } });
        };
        PayordBeneficiarySelectorComponent.prototype.onSelectAccount = function (selectedItem) {
            var _a;
            var accountNumberControl = this.group.controls[i1.CounterPartyFields.accountNumber];
            var bankNameControl = this.group.get(i1.CounterPartyFields.creditorBank + "." + i1.CounterPartyFields.bankName);
            var bankCodeControl = this.group.get(i1.CounterPartyFields.creditorBank + "." + i1.CounterPartyFields.bankBranchCode);
            var beneficiaryAddressGroup = this.group.get(i1.CounterPartyFields.postalAddress);
            var creditorBankBic = this.group.get(i1.CounterPartyFields.creditorBank + "." + i1.CounterPartyFields.bic);
            this.setValue(this.accountNameControl, selectedItem.name || '');
            this.setValue(accountNumberControl, selectedItem.accountNumber || '');
            this.setValue(bankCodeControl, selectedItem.bankBranchCode);
            this.setValue(creditorBankBic, selectedItem.BIC || '');
            this.setValue(bankNameControl, '');
            this.setValue(this.arrangementIdControl, selectedItem.id);
            this.saveNewContactControl.setValue(false);
            this.setAddress(beneficiaryAddressGroup, {});
            this.setDefaultCountry();
            this.showBeneficiaryDetails = true;
            this.enableBeneficiaryControl.setValue(false);
            this.manualEdit$.next(false);
            this.manualEditControl.setValue(false);
            this.selectedBeneficiaryControl.setValue(selectedItem);
            this.selectedContactControl.reset();
            this.saveContactControl.reset();
            this.showDependantFields();
            (_a = this.initiatorIdControl) === null || _a === void 0 ? void 0 : _a.updateValueAndValidity();
        };
        PayordBeneficiarySelectorComponent.prototype.onSelectContact = function (selectedcontact) {
            var _a;
            var accountNumberControl = this.group.controls[i1.CounterPartyFields.accountNumber];
            var bankNameControl = this.group.get(i1.CounterPartyFields.creditorBank + "." + i1.CounterPartyFields.bankName);
            var bankCodeControl = this.group.get(i1.CounterPartyFields.creditorBank + "." + i1.CounterPartyFields.bankBranchCode);
            var creditorBankBic = this.group.get(i1.CounterPartyFields.creditorBank + "." + i1.CounterPartyFields.bic);
            var beneficiaryAddressGroup = this.group.get(i1.CounterPartyFields.postalAddress);
            var beneficiaryBankAddressGroup = this.group.get(i1.CounterPartyFields.creditorBank + "." + i1.CounterPartyFields.postalAddress);
            var account = selectedcontact.accounts[0];
            var accountHolderAddress = this.getAccountHolderAddress(account);
            var beneficiaryAddress = i1.isAddressTruthy(accountHolderAddress)
                ? accountHolderAddress
                : this.getBeneficiaryAddress(selectedcontact);
            var bankAddress = this.getContactBankAddress(account);
            this.setValue(this.accountNameControl, selectedcontact.name);
            this.setValue(this.beneficiaryAccountNameControl, selectedcontact.accountName || '');
            this.setValue(accountNumberControl, account.accountNumber || account.IBAN || '');
            this.setValue(bankCodeControl, account.bankCode || '');
            this.setValue(bankNameControl, account.bankName || '');
            this.setValue(creditorBankBic, account.BIC || '');
            this.setValue(this.arrangementIdControl, '');
            this.setValue(this.selectedContactControl, this.getSelectedContactDetails(selectedcontact));
            this.selectedBeneficiaryControl.setValue(selectedcontact);
            this.setAddress(beneficiaryAddressGroup, beneficiaryAddress);
            this.setAddress(beneficiaryBankAddressGroup, bankAddress, true);
            this.showBeneficiaryDetails = true;
            this.manualEdit$.next(false);
            this.manualEditControl.setValue(false);
            this.enableBeneficiaryControl.setValue(false);
            this.saveContactControl.reset();
            this.showDependantFields();
            (_a = this.initiatorIdControl) === null || _a === void 0 ? void 0 : _a.updateValueAndValidity();
        };
        PayordBeneficiarySelectorComponent.prototype.getSelectedContactDetails = function (selectedcontact) {
            // currently there is no id associated with a contact account. Will need populate accountId when contacts fix this.
            return { contactId: selectedcontact === null || selectedcontact === void 0 ? void 0 : selectedcontact.id, accountId: '' };
        };
        PayordBeneficiarySelectorComponent.prototype.setAddressDetails = function (addressGroup, address) {
            if (addressGroup) {
                if (i1.isAddressTruthy(address)) {
                    this.setAddress(addressGroup, address);
                }
            }
        };
        PayordBeneficiarySelectorComponent.prototype.onManualEdit = function (search) {
            var bankaddressGroup = this.group.get(i1.CounterPartyFields.creditorBank + "." + i1.CounterPartyFields.postalAddress);
            var banksAddressControls = this.options.isWizardMode
                ? this.getAddressFields(bankaddressGroup)
                : [bankaddressGroup];
            this.accountNameControl.patchValue(search);
            this.manualEdit$.next(true);
            this.manualEditControl.setValue(true);
            this.saveNewContactControl.setValue(true);
            this.setValue(this.arrangementIdControl, '');
            this.selectedBeneficiaryControl.reset();
            this.resetControls(__spreadArray([
                this.group.controls[i1.CounterPartyFields.accountNumber],
                this.group.get(i1.CounterPartyFields.creditorBank + "." + i1.CounterPartyFields.bankName),
                this.group.get(i1.CounterPartyFields.creditorBank + "." + i1.CounterPartyFields.bankBranchCode),
                this.group.get(i1.CounterPartyFields.creditorBank + "." + i1.CounterPartyFields.bic),
                this.group.get(i1.CounterPartyFields.postalAddress),
                this.selectedContactControl
            ], __read(banksAddressControls)));
            this.setDefaultCountry();
            this.visibilityService.showItems(this.config.parent);
            this.showDependantFields();
        };
        PayordBeneficiarySelectorComponent.prototype.setDefaultCountry = function () {
            var _a, _b;
            var defaultCountry = this.options.isWizardMode
                ? {
                    country: (_b = (_a = this.group.parent) === null || _a === void 0 ? void 0 : _a.get(i1.HiddenFields.defaultCountry)) === null || _b === void 0 ? void 0 : _b.value,
                }
                : null;
            var beneficiaryBankAddressGroup = this.group.get(i1.CounterPartyFields.creditorBank + "." + i1.CounterPartyFields.postalAddress);
            this.setAddress(beneficiaryBankAddressGroup, Object.assign({}, defaultCountry), true);
        };
        PayordBeneficiarySelectorComponent.prototype.onSearchBlur = function (value) {
            this.accountNameControl.patchValue(value);
            if (!this.accountNameControl.touched) {
                this.accountNameControl.markAsTouched();
            }
        };
        PayordBeneficiarySelectorComponent.prototype.getAddressFields = function (bankaddressGroup) {
            var addressControls = [];
            if (bankaddressGroup) {
                for (var controlName in bankaddressGroup.controls) {
                    if (bankaddressGroup.controls.hasOwnProperty(controlName)) {
                        var control = bankaddressGroup.controls[controlName];
                        if (controlName !== i1.CounterPartyFields.country) {
                            addressControls.push(control);
                        }
                    }
                }
            }
            return addressControls;
        };
        PayordBeneficiarySelectorComponent.prototype.resetControls = function (controls) {
            controls.forEach(function (control) {
                if (control) {
                    control.reset();
                }
            });
        };
        PayordBeneficiarySelectorComponent.prototype.showDependantFields = function () {
            var _a;
            if ((_a = this.config.options) === null || _a === void 0 ? void 0 : _a.dependants) {
                this.visibilityService.showItems(this.config.parent, this.config.options.dependants);
            }
        };
        PayordBeneficiarySelectorComponent.prototype.hideDependantFields = function () {
            var _a;
            if ((_a = this.config.options) === null || _a === void 0 ? void 0 : _a.dependants) {
                this.visibilityService.hideItems(this.config.parent, this.config.options.dependants);
            }
        };
        PayordBeneficiarySelectorComponent.prototype.getBeneficiaryAddress = function (contact) {
            return {
                addressLine1: contact.addressLine1,
                addressLine2: contact.addressLine2,
                streetName: contact.streetName,
                town: contact.town,
                postCode: contact.postCode,
                countrySubDivision: contact.countrySubDivision,
                country: contact.country,
            };
        };
        PayordBeneficiarySelectorComponent.prototype.getAccountHolderAddress = function (account) {
            return i1.getAccountHolderAddress(account);
        };
        PayordBeneficiarySelectorComponent.prototype.getContactBankAddress = function (account) {
            return i1.getContactBankAddress(account);
        };
        PayordBeneficiarySelectorComponent.prototype.setAddress = function (addressGroup, addressInfo, isBankAddress) {
            if (isBankAddress === void 0) { isBankAddress = false; }
            if (addressGroup) {
                if (i1.isAddressTruthy(addressInfo) || isBankAddress) {
                    addressGroup.patchValue({
                        addressLine1: addressInfo.addressLine1,
                        addressLine2: addressInfo.addressLine2,
                        streetName: addressInfo.streetName,
                        town: addressInfo.town,
                        postCode: addressInfo.postCode,
                        countrySubDivision: addressInfo.countrySubDivision,
                        country: addressInfo.country,
                    });
                }
                else {
                    for (var controlName in addressGroup.controls) {
                        if (!(isBankAddress &&
                            this.options.retainBankCountry &&
                            controlName === 'country')) {
                            addressGroup.controls[controlName].reset();
                        }
                    }
                }
            }
        };
        PayordBeneficiarySelectorComponent.prototype.setValue = function (control, value) {
            if (control) {
                if (value) {
                    control.patchValue(value);
                }
                else {
                    control.reset();
                }
            }
        };
        PayordBeneficiarySelectorComponent.prototype.onClearValue = function (value) {
            this.setValue(this.beneficiaryAccountNameControl, value);
        };
        PayordBeneficiarySelectorComponent.prototype.isBeneficiaryDisabled = function () {
            return ((this.isClosedPaymentControl.value &&
                !this.enableBeneficiaryControl.value) ||
                !!this.arrangementIdControl.value);
        };
        return PayordBeneficiarySelectorComponent;
    }());
    /** @nocollapse */ PayordBeneficiarySelectorComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordBeneficiarySelectorComponent, deps: [{ token: VisibilityService }, { token: i2__namespace.DeprecationsService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ PayordBeneficiarySelectorComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordBeneficiarySelectorComponent, selector: "bb-payord-beneficiary-selector", ngImport: i0__namespace, template: "<ng-container\n  *ngTemplateOutlet=\"\n    creditorTmpl;\n    context: { $implicit: options?.items$ | async }\n  \"\n></ng-container>\n\n<ng-template let-creditorDetails #creditorTmpl>\n  <div\n    class=\"form-group bb-dynamic-input\"\n    [ngClass]=\"options?.cssClasses\"\n    *ngIf=\"!config?.hidden\"\n    [formGroup]=\"group\"\n  >\n    <section class=\"payment-to form-group\">\n      <bb-beneficiary-selector-ui\n        [selectedItem]=\"{ name: accountNameControl?.value }\"\n        [placeholder]=\"options?.placeholder || ''\"\n        [tabs]=\"options?.tabs\"\n        [hasError]=\"accountNameControl?.touched && accountNameControl?.invalid\"\n        [totalAccounts]=\"creditorDetails?.totalCreditAccounts\"\n        [totalContacts]=\"creditorDetails?.totalContacts\"\n        [accounts]=\"creditorDetails?.accounts\"\n        [contacts]=\"creditorDetails?.contacts\"\n        [totalContactsItemsCount]=\"creditorDetails?.totalContactsItemsCount\"\n        [dropdownIcon]=\"options?.dropdownIcon || 'toggle-down'\"\n        [aria-label]=\"options?.ariaLabel || 'Toggle beneficiary list'\"\n        [title]=\"options?.label\"\n        [helperText]=\"options?.helperText\"\n        [search]=\"accountNameControl\"\n        [isManualEditDisabled]=\"options?.isManualEditDisabled\"\n        [isClosedPayment]=\"isClosedPaymentControl.value\"\n        [isBeneficiaryDisabled]=\"isBeneficiaryDisabled()\"\n        (fetchMoreItems)=\"onFetchMoreItems($event)\"\n        (searchValue)=\"onSearch($event)\"\n        (selectedAccount)=\"onSelectAccount($event)\"\n        (selectedContact)=\"onSelectContact($event)\"\n        (manualEdit)=\"onManualEdit($event)\"\n        (searchBlur)=\"onSearchBlur($event)\"\n        (clear)=\"onClearValue($event)\"\n        #beneficiarySelector\n      ></bb-beneficiary-selector-ui>\n\n      <bb-payord-validation-message\n        [control]=\"group?.controls['name']\"\n        [validationMessages]=\"options?.validationMessages\"\n        [label]=\"options?.label || 'Beneficiary name'\"\n      ></bb-payord-validation-message>\n\n      <div\n        class=\"bb-dynamic-input__desc bb-text-support bb-subtitle\"\n        *ngIf=\"options?.description\"\n        [textContent]=\"options?.description\"\n      ></div>\n    </section>\n    <ng-container *ngIf=\"!options?.isTemplateMode\">\n      <div\n        *ngIf=\"saveNewContactControl?.value || (manualEdit$ | async)\"\n        class=\"bb-block bb-block--md\"\n      >\n        <bb-input-checkbox-ui\n          [disabled]=\"!!isClosedPaymentControl.value\"\n          [formControlName]=\"saveContactControlName\"\n          [label]=\"options.saveNewContactLabel || 'Save as a new contact'\"\n          data-role=\"save-new-contact-checkbox\"\n        >\n        </bb-input-checkbox-ui>\n      </div>\n    </ng-container>\n  </div>\n</ng-template>\n", components: [{ type: i1__namespace.ӨBeneficiarySelectorUiComponent, selector: "bb-beneficiary-selector-ui", inputs: ["totalAccounts", "totalContacts", "totalContactsItemsCount", "contacts", "accounts", "tabs", "closeDropdownRequest$", "placeholder", "title", "helperText", "hasError", "aria-label", "dropdownIcon", "debounceTime", "selectedItem", "search", "isClosedPayment", "isBeneficiaryDisabled", "isManualEditDisabled"], outputs: ["selectedAccount", "selectedContact", "searchValue", "fetchMoreItems", "manualEdit", "searchBlur", "clear"] }, { type: ValidationMessageComponent, selector: "bb-payord-validation-message", inputs: ["control", "validationMessages", "label", "id", "hideGeneric"] }, { type: i5__namespace$1.InputCheckboxComponent, selector: "bb-input-checkbox-ui", inputs: ["indeterminate"], outputs: ["indeterminateChange"] }], directives: [{ type: i4__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i5__namespace.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5__namespace.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i5__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5__namespace.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }], pipes: { "async": i4__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordBeneficiarySelectorComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-payord-beneficiary-selector',
                        templateUrl: 'payord-beneficiary-selector.component.html',
                    }]
            }], ctorParameters: function () { return [{ type: VisibilityService }, { type: i2__namespace.DeprecationsService }]; } });

    var ActivatableFormField = /** @class */ (function () {
        /**
         * @internal
         */
        function ActivatableFormField(service) {
            this.service = service;
        }
        /**
         * @internal
         */
        ActivatableFormField.prototype.showDependantFields = function () {
            if (this.config.options && this.config.options.dependants) {
                this.service.showItems(this.config.parent, this.config.options.dependants);
            }
        };
        /**
         * @internal
         */
        ActivatableFormField.prototype.hideDependantFields = function () {
            if (this.config.options) {
                this.service.hideItems(this.config.parent, this.config.options.dependants);
            }
        };
        /**
         * Tracks if a form item should be shown or not
         */
        ActivatableFormField.prototype.toggleDependants = function () {
            var _this = this;
            var _a = this.config, options = _a.options, currentParent = _a.parent;
            if (options && options.dependants) {
                if (typeof options.activateDependantsOn === 'function') {
                    var toShow = options.activateDependantsOn(this.control.value, this.control) || [];
                    var toShowMap_1 = mapDependentItems(toShow, currentParent);
                    var toHide = mapDependentItems(options === null || options === void 0 ? void 0 : options.dependants, currentParent).map(function (_a) {
                        var parent = _a.parent, items = _a.items;
                        var toShowItem = toShowMap_1.find(function (i) { return i.parent === parent; });
                        if (toShowItem) {
                            return {
                                parent: parent,
                                items: items.filter(function (i) { return !toShowItem.items.includes(i); }),
                            };
                        }
                        else {
                            return { parent: parent, items: items };
                        }
                    });
                    mapDependentItems(toShow, currentParent).forEach(function (_a) {
                        var parent = _a.parent, items = _a.items;
                        if (items.length) {
                            _this.service.showItems(parent, items);
                        }
                    });
                    mapDependentItems(toHide, currentParent).forEach(function (_a) {
                        var parent = _a.parent, items = _a.items;
                        if (items.length) {
                            _this.service.hideItems(parent, items);
                        }
                    });
                }
                else if (this.control.value === this.config.options.activateDependantsOn) {
                    this.showDependantFields();
                }
                else {
                    this.hideDependantFields();
                }
            }
        };
        return ActivatableFormField;
    }());

    var DynamicAriaAttributeDirective = /** @class */ (function () {
        function DynamicAriaAttributeDirective(keyValueDiffers, hostElem, renderer) {
            this.keyValueDiffers = keyValueDiffers;
            this.hostElem = hostElem;
            this.renderer = renderer;
            /**
             * Flag to denote if the id of the input should be prepended to provided aria ids
             */
            this.prependInputId = true;
            /**
             * The selector to select the actual html input.
             */
            this.inputSelector = '.form-control';
            /**
             * The name of the aria attribute to be added dynamically. Defaults to aria-describedby.
             */
            this.ariaAttributeName = 'aria-describedby';
            this._keyValueDiffer = null;
            this._rawMap = null;
        }
        Object.defineProperty(DynamicAriaAttributeDirective.prototype, "ariaAttributeMap", {
            /**
             * The map that contains a key value pair that contains the an id
             * and a condition when they should be added to the element.
             */
            set: function (value) {
                this._rawMap = value;
                if (this._rawMap) {
                    this.setAriaAttributeIds(this._rawMap);
                    this._keyValueDiffer = null;
                    this._keyValueDiffer = this.keyValueDiffers.find(this._rawMap).create();
                }
            },
            enumerable: false,
            configurable: true
        });
        DynamicAriaAttributeDirective.prototype.ngDoCheck = function () {
            if (this._keyValueDiffer) {
                var keyValueChanges = this._keyValueDiffer.diff(this._rawMap);
                if (keyValueChanges) {
                    this.applyKeyValueChanges(keyValueChanges);
                }
            }
        };
        DynamicAriaAttributeDirective.prototype.applyKeyValueChanges = function (changes) {
            var currentMap = {};
            changes.forEachAddedItem(function (record) { return (currentMap[record.key] = record.currentValue); });
            changes.forEachChangedItem(function (record) { return (currentMap[record.key] = record.currentValue); });
            changes.forEachRemovedItem(function (record) {
                if (record.previousValue) {
                    currentMap[record.key] = false;
                }
            });
            this.setAriaAttributeIds(currentMap);
        };
        DynamicAriaAttributeDirective.prototype.setAriaAttributeIds = function (idMap) {
            var _this = this;
            var targetElem = this.hostElem.nativeElement.querySelector(this.inputSelector);
            var targetElemId = (targetElem === null || targetElem === void 0 ? void 0 : targetElem.id) || '';
            var ids = Object.keys(idMap).reduce(function (acc, id) {
                if (!!idMap[id]) {
                    acc.push(_this.prependInputId ? targetElemId + id : id);
                }
                return acc;
            }, []);
            this.removeAriaAttributeIds(targetElem);
            var descByIds = ids.join(' ').trim();
            if (targetElem && descByIds) {
                this.renderer.setAttribute(targetElem, this.ariaAttributeName, descByIds);
            }
        };
        DynamicAriaAttributeDirective.prototype.removeAriaAttributeIds = function (targetElem) {
            if (targetElem) {
                this.renderer.removeAttribute(targetElem, this.ariaAttributeName);
            }
        };
        return DynamicAriaAttributeDirective;
    }());
    /** @nocollapse */ DynamicAriaAttributeDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DynamicAriaAttributeDirective, deps: [{ token: i0__namespace.KeyValueDiffers }, { token: i0__namespace.ElementRef }, { token: i0__namespace.Renderer2 }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ DynamicAriaAttributeDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: DynamicAriaAttributeDirective, selector: "[bbDynamicAriaAttribute]", inputs: { ariaAttributeMap: ["bbDynamicAriaAttribute", "ariaAttributeMap"], prependInputId: "prependInputId", inputSelector: "inputSelector", ariaAttributeName: "ariaAttributeName" }, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DynamicAriaAttributeDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbDynamicAriaAttribute]',
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.KeyValueDiffers }, { type: i0__namespace.ElementRef }, { type: i0__namespace.Renderer2 }]; }, propDecorators: { ariaAttributeMap: [{
                    type: i0.Input,
                    args: ['bbDynamicAriaAttribute']
                }], prependInputId: [{
                    type: i0.Input
                }], inputSelector: [{
                    type: i0.Input
                }], ariaAttributeName: [{
                    type: i0.Input
                }] } });

    var PayordCheckboxComponent = /** @class */ (function (_super) {
        __extends(PayordCheckboxComponent, _super);
        function PayordCheckboxComponent(visibilityService) {
            var _this = _super.call(this, visibilityService) || this;
            _this.visibilityService = visibilityService;
            _this.shouldDisplay = true;
            return _this;
        }
        PayordCheckboxComponent.prototype.ngOnInit = function () {
            this.shouldDisplay = !(this.options.hideInWizardMode && this.options.isWizardMode);
            this.control = registerFormControl(this.group, this.config.name, this.options.validators, this.options.asyncValidators, this.options.defaultValue, this.config);
            this.toggleDependants();
            triggerHook(i1.PaymentFormFieldHooks.onInit, this);
        };
        PayordCheckboxComponent.prototype.ngOnDestroy = function () {
            triggerHook(i1.PaymentFormFieldHooks.onDestroy, this);
        };
        return PayordCheckboxComponent;
    }(ActivatableFormField));
    /** @nocollapse */ PayordCheckboxComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordCheckboxComponent, deps: [{ token: VisibilityService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ PayordCheckboxComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordCheckboxComponent, selector: "bb-payord-checkbox", usesInheritance: true, ngImport: i0__namespace, template: "<div\n  class=\"bb-dynamic-input form-group\"\n  *ngIf=\"!config?.hidden && shouldDisplay\"\n  [formGroup]=\"group\"\n  [ngClass]=\"options?.cssClasses\"\n>\n  <bb-input-checkbox-ui\n    [formControlName]=\"config?.name\"\n    [label]=\"options?.label\"\n    (change)=\"toggleDependants()\"\n    [disabled]=\"options?.disabled\"\n    [bbDynamicAriaAttribute]=\"{\n      __error: control?.touched && control?.invalid\n    }\"\n    [attr.data-role]=\"config?.name\"\n    #inputEl\n  >\n  </bb-input-checkbox-ui>\n  <bb-payord-validation-message\n    [control]=\"group?.controls[config.name]\"\n    [validationMessages]=\"options?.validationMessages\"\n    [label]=\"options?.label\"\n    [id]=\"inputEl?.id + '__error'\"\n  ></bb-payord-validation-message>\n</div>\n", components: [{ type: i5__namespace$1.InputCheckboxComponent, selector: "bb-input-checkbox-ui", inputs: ["indeterminate"], outputs: ["indeterminateChange"] }, { type: ValidationMessageComponent, selector: "bb-payord-validation-message", inputs: ["control", "validationMessages", "label", "id", "hideGeneric"] }], directives: [{ type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5__namespace.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5__namespace.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i5__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5__namespace.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: DynamicAriaAttributeDirective, selector: "[bbDynamicAriaAttribute]", inputs: ["bbDynamicAriaAttribute", "prependInputId", "inputSelector", "ariaAttributeName"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordCheckboxComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-payord-checkbox',
                        templateUrl: './payord-checkbox.component.html',
                    }]
            }], ctorParameters: function () { return [{ type: VisibilityService }]; } });

    var PayordDebitAccountSelectorComponent = /** @class */ (function () {
        function PayordDebitAccountSelectorComponent(closedPaymentBusFnSuffix, intraCompanyPaymentBusFnSuffix, deprecationService, cdRef) {
            var _e;
            this.closedPaymentBusFnSuffix = closedPaymentBusFnSuffix;
            this.intraCompanyPaymentBusFnSuffix = intraCompanyPaymentBusFnSuffix;
            this.deprecationService = deprecationService;
            this.cdRef = cdRef;
            this.initialDebitGroup = (_e = {},
                _e[i1.InitiatorFields.id] = [''],
                _e[i1.InitiatorFields.name] = [''],
                _e[i1.InitiatorFields.accountNumber] = [''],
                _e.schemeName = [],
                _e.currency = [''],
                _e.balance = [''],
                _e);
            this.gc$ = new rxjs.Subject();
            this.loadDebitAccountAndSelect$ = new rxjs.Subject();
            this.accountIds = [];
            this.currentPage = 0;
            this.searchTerm = '';
            this.typeahead$ = new rxjs.Subject();
            this.loading$ = new rxjs.BehaviorSubject(true);
            this.defaultTypeToSearchText = $localize(templateObject_1$3 || (templateObject_1$3 = __makeTemplateObject([":@@debit-account-selector.default-type-to-search-text:No items found"], [":@@debit-account-selector.default-type-to-search-text:No items found"])));
        }
        PayordDebitAccountSelectorComponent.prototype.ngOnInit = function () {
            var _this = this;
            var _a, _b, _c, _d;
            this.deprecationService.logDeprecatedFeature("\"BB_CLOSED_PAYMENT_BUS_FN_SUFFIX\", \"BB_INTRACOMPANY_PAYMENT_BUS_FN_SUFFIX\", \"DefaultClosedPaymentBusFnSuffix\" and\n      \"DefaultIntraCompanyPaymentBusFnSuffix\" are deprecated and will be removed in next major release");
            this.closedPaymentBusFnSuffix =
                this.closedPaymentBusFnSuffix || i1.DefaultClosedPaymentBusFnSuffix;
            this.intraCompanyPaymentBusFnSuffix =
                this.intraCompanyPaymentBusFnSuffix ||
                    i1.DefaultIntraCompanyPaymentBusFnSuffix;
            this.registerFields();
            this.listenSearch();
            this.control = this.group.controls['id'];
            this.form = getParentForm(this.control);
            this.isClosedPaymentControl = registerFormControl(this.form, i1.HiddenFields.isClosedPayment);
            // populate value to show it in edit mode
            if (this.group.value.id) {
                this.selectItem(this.group.value);
            }
            // populate account balance and currency when applying a payment template or editing payment
            this.arrangementItems$ = (_b = (_a = this.options) === null || _a === void 0 ? void 0 : _a.items$) === null || _b === void 0 ? void 0 : _b.pipe(operators.tap(function (_e) {
                var list = _e.items;
                _this.accountIds = list.map(function (item) { return item.id; });
                if (_this.group.value.id) {
                    var selectedAccount = list === null || list === void 0 ? void 0 : list.find(function (item) { return item.id === _this.group.value.id; });
                    if (selectedAccount) {
                        _this.selectItem(selectedAccount);
                    }
                    else {
                        // we need to load debit account to show it selected
                        _this.loadDebitAccountAndSelect$.next();
                    }
                }
            }), operators.catchError(function (err) { return rxjs.of(err); }));
            this.arrangementItems$
                .pipe(operators.takeUntil(this.gc$))
                .subscribe(function (arrangementList) {
                _this.loading$.next(false);
                _this.arrangementList = arrangementList;
                _this.cdRef.detectChanges();
            });
            var counterpartyGroup = (this.form.get(i1.PaymentBaseFields.counterparty));
            if (this.options.checkClosedPaymentsAccess) {
                (_c = this.isClosedPaymentControl) === null || _c === void 0 ? void 0 : _c.valueChanges.pipe(operators.takeUntil(this.gc$)).subscribe(function (isClosedPayment) {
                    if (isClosedPayment) {
                        toggleBeneficiaryControls(counterpartyGroup, isClosedPayment);
                        _this.control.updateValueAndValidity();
                    }
                });
                (_d = this.options.arrangementPermissions$) === null || _d === void 0 ? void 0 : _d.pipe(operators.takeUntil(this.gc$)).subscribe(function (response) {
                    var _a;
                    (_a = _this.isClosedPaymentControl) === null || _a === void 0 ? void 0 : _a.setValue((response === null || response === void 0 ? void 0 : response.status) === i1.forbiddenStatus);
                });
            }
            this.loadDebitAccountAndSelect$
                .pipe(operators.takeUntil(this.gc$), operators.switchMap(function () { return _this.options.loadAccountByAccountId(_this.group.value.id, _this.group.value.accountNumber); }), operators.tap(function (item) {
                if (item) {
                    _this.accountIds.push(item.id);
                }
                else {
                    _this.control.setValidators([
                        i5.Validators.required,
                        i1.missingInListValidator(_this.getAccountIdsList.bind(_this)),
                    ]);
                    _this.control.updateValueAndValidity();
                }
                var account = item || _this.group.value;
                _this.selectItem(account);
            }), operators.catchError(function () { return rxjs.of(undefined); }))
                .subscribe();
            triggerHook(i1.PaymentFormFieldHooks.onInit, this);
        };
        PayordDebitAccountSelectorComponent.prototype.fetchArrangementPermissions = function (arrangementId) {
            var _a;
            if (!this.options.isWizardMode &&
                this.options.checkClosedPaymentsAccess &&
                arrangementId) {
                (_a = this.options.fetchArrangementPermissions$) === null || _a === void 0 ? void 0 : _a.next(arrangementId);
            }
        };
        PayordDebitAccountSelectorComponent.prototype.getAccountIdsList = function () {
            return this.accountIds;
        };
        PayordDebitAccountSelectorComponent.prototype.listenSearch = function () {
            var _this = this;
            this.typeahead$
                .pipe(operators.takeUntil(this.gc$), operators.debounceTime(300))
                .subscribe(function (query) {
                _this.onSearch(query);
            });
        };
        PayordDebitAccountSelectorComponent.prototype.ngOnDestroy = function () {
            this.gc$.next();
            this.gc$.complete();
            triggerHook(i1.PaymentFormFieldHooks.onDestroy, this);
        };
        PayordDebitAccountSelectorComponent.prototype.registerFields = function () {
            var _e;
            var validators = (_e = {},
                _e[i1.InitiatorFields.id] = [i5.Validators.required],
                _e);
            for (var key in this.initialDebitGroup) {
                if (this.initialDebitGroup.hasOwnProperty(key)) {
                    if (key === i1.InitiatorFields.id) {
                        if (this.checkClosedPayment()) {
                            validators[i1.InitiatorFields.id].push(isClosedPaymentValidator);
                        }
                        if (this.isCounterpartyGroup()) {
                            validators[i1.InitiatorFields.id].push(i1.sameAccountsValidator());
                        }
                    }
                    registerFormControl(this.group, key, validators[key], [], '');
                }
            }
        };
        PayordDebitAccountSelectorComponent.prototype.isCounterpartyGroup = function () {
            return this.config.name === i1.CounterPartyFields.counterPartyAccountGroup;
        };
        PayordDebitAccountSelectorComponent.prototype.checkClosedPayment = function () {
            return (!this.options.isWizardMode &&
                this.config.name === i1.InitiatorFields.initiatorAccountGroup &&
                this.options.checkClosedPaymentsAccess);
        };
        PayordDebitAccountSelectorComponent.prototype.selectItem = function (account) {
            var _a;
            if (this.group && account.name) {
                this.group.patchValue({
                    id: account.id,
                    name: account.name,
                    accountNumber: account.accountNumber,
                    balance: account.balance,
                    currency: account.currency,
                    accountType: account.accountType,
                    additions: account.additions || {},
                    schemeName: paymentOrder.SchemeNames.ID,
                });
                this.selectedAccount = Object.assign(Object.assign({}, account), { number: account.accountNumber, currency: account.currency, balance: account.balance });
                if (!this.isCounterpartyGroup()) {
                    (_a = this.form
                        .get([i1.PaymentBaseFields.counterparty, i1.CounterPartyFields.id])) === null || _a === void 0 ? void 0 : _a.updateValueAndValidity();
                }
                this.fetchArrangementPermissions(account.id);
            }
            this.group.markAllAsTouched();
            this.group.markAsDirty();
        };
        PayordDebitAccountSelectorComponent.prototype.onBlur = function () {
            if (this.options.required) {
                this.group.markAllAsTouched();
            }
        };
        PayordDebitAccountSelectorComponent.prototype.onScrollToEnd = function () {
            this.options.fetchItems$.next({
                from: ++this.currentPage,
                searchTerm: this.searchTerm,
            });
            this.loading$.next(true);
        };
        PayordDebitAccountSelectorComponent.prototype.onSearch = function (searchTerm) {
            this.currentPage = 0;
            this.searchTerm = searchTerm;
            this.options.fetchItems$.next({ from: this.currentPage, searchTerm: searchTerm });
            this.loading$.next(true);
        };
        return PayordDebitAccountSelectorComponent;
    }());
    /** @nocollapse */ PayordDebitAccountSelectorComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordDebitAccountSelectorComponent, deps: [{ token: i1.BB_CLOSED_PAYMENT_BUS_FN_SUFFIX, optional: true }, { token: i1.BB_INTRACOMPANY_PAYMENT_BUS_FN_SUFFIX, optional: true }, { token: i1__namespace$2.DeprecationsService }, { token: i0__namespace.ChangeDetectorRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ PayordDebitAccountSelectorComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordDebitAccountSelectorComponent, selector: "bb-payord-debit-account-selector", ngImport: i0__namespace, template: "<div\n  class=\"bb-dynamic-input form-group\"\n  [ngClass]=\"options?.cssClasses\"\n  *ngIf=\"!config?.hidden\"\n>\n  <section class=\"payment-from\" [formGroup]=\"group\">\n    <label class=\"d-block\">\n      <div *ngIf=\"options?.label\" class=\"bb-dynamic-input__label bb-label\">\n        <span>\n          {{ options?.label }}\n        </span>\n        <span\n          class=\"bb-dynamic-input__helper-text bb-text-support\"\n          *ngIf=\"options?.helperText\"\n          [textContent]=\"options?.helperText\"\n        >\n        </span>\n      </div>\n      <div class=\"bb-form-field\">\n        <bb-account-selector-ui\n          [markFirst]=\"true\"\n          [highlight]=\"false\"\n          [filterItems]=\"options?.filterItems\"\n          [closeOnSelect]=\"true\"\n          [dropdownPosition]=\"'bottom'\"\n          [items]=\"arrangementList?.items\"\n          [selectedItems]=\"selectedAccount\"\n          (change)=\"selectItem($event)\"\n          (blur)=\"onBlur()\"\n          [placeholder]=\"options?.placeholder || ''\"\n          [attr.aria-label]=\"options?.label\"\n          [required]=\"options?.required\"\n          [attr.data-role]=\"'debit-account-selector'\"\n          [showBankBranchCode]=\"options?.showBankBranchCode\"\n          [bbDynamicAriaAttribute]=\"{\n            'payord-debit-account-selector__error':\n              control?.touched && control?.invalid,\n            'payord-debit-account-selector__desc': options?.description\n          }\"\n          [prependInputId]=\"false\"\n          inputSelector=\".ng-input input\"\n          [disableScrollEnd]=\"\n            arrangementList?.items?.length >= arrangementList?.count\n          \"\n          (scrollToEnd)=\"onScrollToEnd()\"\n          [searchFunc]=\"options.searchFn\"\n          [minTermLength]=\"options.minTermLength || 0\"\n          [typeToSearchText]=\"\n            options.typeToSearchText || defaultTypeToSearchText\n          \"\n          [typeahead]=\"options.disableTypeahead ? undefined : typeahead$\"\n          [loading]=\"loading$ | async\"\n        ></bb-account-selector-ui>\n      </div>\n    </label>\n\n    <bb-payord-validation-message\n      [control]=\"control\"\n      [validationMessages]=\"options?.validationMessages\"\n      [label]=\"options?.label || 'Debit account'\"\n      [id]=\"'payord-debit-account-selector__error'\"\n    ></bb-payord-validation-message>\n\n    <div\n      class=\"bb-dynamic-input__desc bb-text-support bb-subtitle\"\n      id=\"payord-debit-account-selector__desc\"\n      *ngIf=\"options?.description\"\n      [textContent]=\"options?.description\"\n    ></div>\n  </section>\n</div>\n", components: [{ type: i2__namespace$1.AccountSelectorComponent, selector: "bb-account-selector-ui", inputs: ["items", "disabled", "notFoundText", "showError", "productNumberFormat", "selectedItems", "multiple", "closeOnSelect", "searchable", "clearable", "placeholder", "loading", "dropdownPosition", "disableScrollEnd", "highlight", "filterItems", "markFirst", "internalFiltering", "virtualScroll", "required", "typeahead", "minTermLength", "typeToSearchText", "aria-describedby", "aria-labelledby", "aria-invalid", "searchFunc", "showCurrencySymbol", "showBankBranchCode", "groupByFn", "groupValueFn", "size", "compareItemsWith"], outputs: ["search", "clearSearch", "scroll", "scrollToEnd", "remove", "change", "filterChange", "focus", "blur"] }, { type: ValidationMessageComponent, selector: "bb-payord-validation-message", inputs: ["control", "validationMessages", "label", "id", "hideGeneric"] }], directives: [{ type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i5__namespace.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5__namespace.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: DynamicAriaAttributeDirective, selector: "[bbDynamicAriaAttribute]", inputs: ["bbDynamicAriaAttribute", "prependInputId", "inputSelector", "ariaAttributeName"] }], pipes: { "async": i4__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordDebitAccountSelectorComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-payord-debit-account-selector',
                        templateUrl: 'payord-debit-account-selector.component.html',
                    }]
            }], ctorParameters: function () {
            return [{ type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [i1.BB_CLOSED_PAYMENT_BUS_FN_SUFFIX]
                        }] }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [i1.BB_INTRACOMPANY_PAYMENT_BUS_FN_SUFFIX]
                        }] }, { type: i1__namespace$2.DeprecationsService }, { type: i0__namespace.ChangeDetectorRef }];
        } });
    var templateObject_1$3;

    var PayordRadioComponent = /** @class */ (function (_super) {
        __extends(PayordRadioComponent, _super);
        function PayordRadioComponent(visibilityService) {
            var _this = _super.call(this, visibilityService) || this;
            _this.visibilityService = visibilityService;
            return _this;
        }
        PayordRadioComponent.prototype.ngOnInit = function () {
            this.control = registerFormControl(this.group, this.config.name, this.options.validators, this.options.asyncValidators, this.options.defaultValue, this.config);
            this.toggleDependants();
            triggerHook(i1.PaymentFormFieldHooks.onInit, this);
        };
        PayordRadioComponent.prototype.getDescribedByRefs = function (id) {
            var _b;
            var _a;
            return _b = {},
                _b[id + "__error"] = this.control.touched && this.control.invalid,
                _b[id + "__desc"] = (_a = this.options) === null || _a === void 0 ? void 0 : _a.description,
                _b;
        };
        PayordRadioComponent.prototype.ngOnDestroy = function () {
            triggerHook(i1.PaymentFormFieldHooks.onDestroy, this);
        };
        return PayordRadioComponent;
    }(ActivatableFormField));
    /** @nocollapse */ PayordRadioComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordRadioComponent, deps: [{ token: VisibilityService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ PayordRadioComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordRadioComponent, selector: "bb-payord-radio", usesInheritance: true, ngImport: i0__namespace, template: "<div\n  *ngIf=\"!config?.hidden\"\n  class=\"bb-dynamic-input form-group\"\n  [formGroup]=\"group\"\n  [ngClass]=\"options?.cssClasses\"\n>\n  <label\n    class=\"bb-dynamic-input__label\"\n    [id]=\"inputEl?.id + '__label'\"\n    [for]=\"inputEl?.id\"\n    [textContent]=\"options?.label || ''\"\n    #labelElem\n  ></label>\n  <span\n    class=\"bb-dynamic-input__helper-text bb-text-support\"\n    *ngIf=\"options?.helperText\"\n    [id]=\"inputEl?.id + '__helper'\"\n    [textContent]=\"options?.helperText\"\n  >\n  </span>\n\n  <bb-input-radio-group-ui\n    [label]=\"options?.label\"\n    [formControlName]=\"config?.name\"\n    (change)=\"toggleDependants()\"\n    [horizontal]=\"options?.horizontal\"\n    [preselect]=\"options?.preselect\"\n    [bbDynamicAriaAttribute]=\"getDescribedByRefs(inputEl.id)\"\n    inputSelector=\".bb-input-radio-group\"\n    [attr.data-role]=\"config?.name\"\n    #inputEl\n  >\n    <bb-input-radio-ui\n      *ngFor=\"let option of options?.options\"\n      [value]=\"option.value\"\n      [label]=\"option.label\"\n      [attr.data-role]=\"option.value\"\n    ></bb-input-radio-ui>\n  </bb-input-radio-group-ui>\n  <bb-payord-validation-message\n    [control]=\"group?.controls[config.name]\"\n    [validationMessages]=\"options?.validationMessages\"\n    [label]=\"options?.label\"\n    [id]=\"inputEl?.id + '__error'\"\n  ></bb-payord-validation-message>\n\n  <div\n    class=\"bb-dynamic-input__desc bb-text-support bb-subtitle\"\n    [attr.aria-hidden]=\"!options?.description\"\n    [hidden]=\"!options?.description\"\n    [id]=\"inputEl?.id + '__desc'\"\n    [textContent]=\"options?.description || ''\"\n    #descElem\n  ></div>\n</div>\n", components: [{ type: i2__namespace$2.InputRadioGroupComponent, selector: "bb-input-radio-group-ui", inputs: ["horizontal", "preselect", "name", "verticalAlign"] }, { type: i2__namespace$2.InputRadioComponent, selector: "bb-input-radio-ui", inputs: ["labelTemplate", "labelTemplateContext", "value", "label", "aria-label", "aria-labelledby", "aria-describedby", "role", "aria-activedescendant", "aria-expanded", "aria-invalid", "aria-owns", "disabled"] }, { type: ValidationMessageComponent, selector: "bb-payord-validation-message", inputs: ["control", "validationMessages", "label", "id", "hideGeneric"] }], directives: [{ type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5__namespace.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5__namespace.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i5__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5__namespace.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: DynamicAriaAttributeDirective, selector: "[bbDynamicAriaAttribute]", inputs: ["bbDynamicAriaAttribute", "prependInputId", "inputSelector", "ariaAttributeName"] }, { type: i4__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordRadioComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-payord-radio',
                        templateUrl: './payord-radio.component.html',
                    }]
            }], ctorParameters: function () { return [{ type: VisibilityService }]; } });

    var PayordScheduleComponent = /** @class */ (function () {
        function PayordScheduleComponent() {
            this.defaultMinOcccurs = 2;
            this.defaultMaxOcccurs = 100;
        }
        PayordScheduleComponent.prototype.ngOnInit = function () {
            this.registerFields(this.initScheduleFields(this.options.minOccurs, this.options.maxOccurs));
            triggerHook(i1.PaymentFormFieldHooks.onInit, this);
        };
        PayordScheduleComponent.prototype.ngOnDestroy = function () {
            triggerHook(i1.PaymentFormFieldHooks.onDestroy, this);
        };
        PayordScheduleComponent.prototype.initScheduleFields = function (minOccurs, maxOccurs) {
            var _a;
            return _a = {},
                _a[i1.ScheduleFields.frequency] = [
                    { value: 'ONCE', every: '1' },
                    [i5.Validators.required],
                ],
                _a[i1.ScheduleFields.startDate] = [
                    new Date().toISOString(),
                    [i5.Validators.required, i1.pastDateValidator],
                ],
                _a[i1.ScheduleFields.endDate] = [
                    new Date(new Date().getFullYear(), new Date().getMonth() + 1, new Date().getDate()).toISOString(),
                    [i1.requiredEndDateValidator, i1.pastDateValidator],
                ],
                _a[i1.ScheduleFields.repeat] = [
                    minOccurs || this.defaultMinOcccurs,
                    [
                        i1.requiredAfterValidator,
                        i5.Validators.compose([
                            i5.Validators.min(minOccurs || this.defaultMinOcccurs),
                            i5.Validators.max(maxOccurs || this.defaultMaxOcccurs),
                        ]),
                    ],
                ],
                _a[i1.ScheduleFields.endType] = [i1.endTypes.never, [i1.requiredEndTypeValidator]],
                _a;
        };
        PayordScheduleComponent.prototype.registerFields = function (fields) {
            for (var key in fields) {
                if (fields.hasOwnProperty(key)) {
                    registerFormControl(this.group, key, fields[key].pop(), [], fields[key].pop());
                }
            }
        };
        Object.defineProperty(PayordScheduleComponent.prototype, "scheduleLabelData", {
            get: function () {
                var _a = this.group.value, frequency = _a.frequency, endDate = _a.endDate, endType = _a.endType, repeat = _a.repeat, startDate = _a.startDate;
                var end = {};
                switch (endType) {
                    case i1.endTypes.on: {
                        end = { endDate: endDate };
                        break;
                    }
                    case i1.endTypes.after: {
                        end = { repeat: repeat };
                        break;
                    }
                }
                return Object.assign({ frequency: frequency, endType: endType, startDate: startDate }, end);
            },
            enumerable: false,
            configurable: true
        });
        return PayordScheduleComponent;
    }());
    /** @nocollapse */ PayordScheduleComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordScheduleComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ PayordScheduleComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordScheduleComponent, selector: "bb-payord-schedule", ngImport: i0__namespace, template: "<ng-container *ngIf=\"!config?.hidden\">\n  <section\n    class=\"payment-schedule flex-row bb-dynamic-input\"\n    [ngClass]=\"options?.cssClasses\"\n  >\n    <fieldset class=\"bb-fieldset\">\n      <ng-container *ngIf=\"!config.options.collapsible; else collapsibleTmpl\">\n        <ng-container *ngTemplateOutlet=\"header\"></ng-container>\n        <hr class=\"mt-0\" />\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n      </ng-container>\n    </fieldset>\n  </section>\n  <ng-template #collapsibleTmpl>\n    <bb-collapsible-ui data-role=\"schedule-toggle\" #collapse>\n      <ng-template bbCollapsibleHeader let-toggle=\"toggle\" let-isOpen=\"isOpen\">\n        <div\n          [attr.aria-expanded]=\"isOpen\"\n          (click)=\"collapse.toggle()\"\n          class=\"bb-stack justify-content-between\"\n        >\n          <ng-container *ngTemplateOutlet=\"header\"></ng-container>\n          <button\n            bbButton\n            color=\"outline\"\n            (click)=\"collapse.toggle(); $event.stopPropagation()\"\n            aria-label=\"Schedule toggle\"\n          >\n            <bb-icon-ui\n              [name]=\"isOpen ? 'toggle-up' : 'toggle-down'\"\n            ></bb-icon-ui>\n          </button>\n        </div>\n        <hr class=\"mt-0\" />\n      </ng-template>\n      <ng-template bbCollapsibleBody>\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n      </ng-template>\n    </bb-collapsible-ui>\n  </ng-template>\n  <ng-template #header>\n    <legend>\n      <span class=\"bb-label\">\n        {{ options?.label || 'Schedule' }}\n      </span>\n      <span class=\"bb-text-support\">\n        (<bb-schedule-label-ui [item]=\"scheduleLabelData\"></bb-schedule-label-ui\n        >)\n      </span>\n    </legend>\n  </ng-template>\n\n  <ng-template #content>\n    <bb-schedule-ui\n      [scheduleForm]=\"group\"\n      [frequencies]=\"options?.frequencies\"\n      [minOccurs]=\"options?.minOccurs\"\n      [maxOccurs]=\"options?.maxOccurs\"\n      [formSubmitted]=\"group?.touched\"\n      data-role=\"payment-schedule\"\n    >\n    </bb-schedule-ui>\n  </ng-template>\n</ng-container>\n", components: [{ type: i1__namespace$3.CollapsibleComponent, selector: "bb-collapsible-ui", inputs: ["recreateBodyContent", "hasChevron", "isOpen"], outputs: ["isOpenChange"] }, { type: i2__namespace$3.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i1__namespace.ӨScheduleLabelComponent, selector: "bb-schedule-label-ui", inputs: ["item"] }, { type: i1__namespace.ScheduleComponent, selector: "bb-schedule-ui", inputs: ["frequencies", "minOccurs", "maxOccurs", "scheduleForm", "formSubmitted"] }], directives: [{ type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i4__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i1__namespace$3.CollapsibleHeaderDirective, selector: "ng-template[bbCollapsibleHeader]" }, { type: i7__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i1__namespace$3.CollapsibleBodyDirective, selector: "ng-template[bbCollapsibleBody]" }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordScheduleComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-payord-schedule',
                        templateUrl: './payord-schedule.component.html',
                    }]
            }] });

    var PayordSelectComponent = /** @class */ (function (_super) {
        __extends(PayordSelectComponent, _super);
        function PayordSelectComponent(visibilityService) {
            var _this = _super.call(this, visibilityService) || this;
            _this.visibilityService = visibilityService;
            return _this;
        }
        PayordSelectComponent.prototype.ngOnInit = function () {
            this.control = registerFormControl(this.group, this.config.name, this.options.validators, this.options.asyncValidators, this.options.defaultValue, this.config);
            this.toggleDependants();
            triggerHook(i1.PaymentFormFieldHooks.onInit, this);
        };
        PayordSelectComponent.prototype.ngOnDestroy = function () {
            triggerHook(i1.PaymentFormFieldHooks.onDestroy, this);
        };
        return PayordSelectComponent;
    }(ActivatableFormField));
    /** @nocollapse */ PayordSelectComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordSelectComponent, deps: [{ token: VisibilityService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ PayordSelectComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordSelectComponent, selector: "bb-payord-select", usesInheritance: true, ngImport: i0__namespace, template: "<div\n  class=\"bb-dynamic-input form-group\"\n  *ngIf=\"!config?.hidden\"\n  [formGroup]=\"group\"\n  [ngClass]=\"options?.cssClasses\"\n>\n  <label\n    class=\"bb-dynamic-input__label\"\n    [id]=\"inputEl?.id + '__label'\"\n    [for]=\"inputEl?.id\"\n    [textContent]=\"options?.label || ''\"\n    #labelElem\n  ></label>\n  <span\n    class=\"bb-dynamic-input__helper-text bb-text-support\"\n    *ngIf=\"options?.helperText\"\n    [id]=\"inputEl?.id + '__desc'\"\n    [textContent]=\"options?.helperText\"\n  >\n  </span>\n\n  <bb-dropdown-single-select-ui\n    [formControlName]=\"config.name\"\n    [placeholder]=\"options?.placeholder || ''\"\n    (change)=\"toggleDependants()\"\n    [bbDynamicAriaAttribute]=\"{\n      __error: control?.touched && control?.invalid,\n      __desc: options?.description\n    }\"\n    [attr.data-role]=\"config.name\"\n    #inputEl\n  >\n    <bb-dropdown-single-select-option-ui\n      *ngFor=\"let option of options?.options\"\n      [value]=\"option.value\"\n      [label]=\"option.label\"\n      [attr.data-role]=\"option.value\"\n    >\n    </bb-dropdown-single-select-option-ui>\n  </bb-dropdown-single-select-ui>\n\n  <bb-payord-validation-message\n    [control]=\"group?.controls[config.name]\"\n    [validationMessages]=\"options?.validationMessages\"\n    [label]=\"options?.label\"\n    [id]=\"inputEl?.id + '__error'\"\n  ></bb-payord-validation-message>\n\n  <div\n    class=\"bb-dynamic-input__desc bb-text-support bb-subtitle\"\n    [attr.aria-hidden]=\"!options?.description\"\n    [hidden]=\"!options?.description\"\n    [id]=\"inputEl?.id + '__desc'\"\n    [textContent]=\"options?.description || ''\"\n    #descElem\n  ></div>\n</div>\n", components: [{ type: i2__namespace$4.DropdownSingleSelectComponent, selector: "bb-dropdown-single-select-ui", inputs: ["placeholder", "defaultOptionAsPlaceholder", "options", "displayAttributePath", "iconName", "compareWithFn"] }, { type: i2__namespace$4.DropdownSingleSelectOptionComponent, selector: "bb-dropdown-single-select-option-ui", inputs: ["value", "label"] }, { type: ValidationMessageComponent, selector: "bb-payord-validation-message", inputs: ["control", "validationMessages", "label", "id", "hideGeneric"] }], directives: [{ type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5__namespace.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5__namespace.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i5__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5__namespace.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: DynamicAriaAttributeDirective, selector: "[bbDynamicAriaAttribute]", inputs: ["bbDynamicAriaAttribute", "prependInputId", "inputSelector", "ariaAttributeName"] }, { type: i4__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordSelectComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-payord-select',
                        templateUrl: './payord-select.component.html',
                    }]
            }], ctorParameters: function () { return [{ type: VisibilityService }]; } });

    var PayordTextAreaComponent = /** @class */ (function () {
        function PayordTextAreaComponent(elRef) {
            this.elRef = elRef;
            this.isCollapsed = false;
        }
        PayordTextAreaComponent.prototype.ngOnInit = function () {
            var _a;
            this.control = registerFormControl(this.group, this.config.name, this.options.validators, this.options.asyncValidators, this.options.defaultValue, this.config);
            if ((_a = this.control.value) === null || _a === void 0 ? void 0 : _a.content) {
                this.control.setValue(this.control.value.content);
            }
            this.isCollapsed =
                !this.control.value && i1.isObjectTruthy(this.options.collapseOptions);
            triggerHook(i1.PaymentFormFieldHooks.onInit, this);
        };
        PayordTextAreaComponent.prototype.expand = function () {
            this.isCollapsed = false;
            i1.focusChildElement('textarea', this.elRef.nativeElement);
        };
        PayordTextAreaComponent.prototype.ngOnDestroy = function () {
            triggerHook(i1.PaymentFormFieldHooks.onDestroy, this);
        };
        return PayordTextAreaComponent;
    }());
    /** @nocollapse */ PayordTextAreaComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordTextAreaComponent, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ PayordTextAreaComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordTextAreaComponent, selector: "bb-payord-textarea", ngImport: i0__namespace, template: "<ng-container *ngIf=\"!config?.hidden\">\n  <div\n    *ngIf=\"!isCollapsed\"\n    class=\"bb-dynamic-input form-group\"\n    [formGroup]=\"group\"\n    [ngClass]=\"options?.cssClasses\"\n  >\n    <label\n      class=\"bb-dynamic-input__label\"\n      [id]=\"inputEl?.id + '__label'\"\n      [for]=\"inputEl?.id\"\n      [textContent]=\"options?.label || ''\"\n      #labelElem\n    ></label>\n    <span\n      class=\"bb-dynamic-input__helper-text bb-text-support\"\n      *ngIf=\"options?.helperText\"\n      [id]=\"inputEl?.id + '__desc'\"\n      [textContent]=\"options?.helperText\"\n    >\n    </span>\n    <bb-textarea-ui\n      [placeholder]=\"options?.placeholder || ''\"\n      [formControlName]=\"config.name\"\n      [showCharCounter]=\"true\"\n      [minLength]=\"options?.minLength\"\n      [maxLength]=\"options?.maxLength\"\n      [rows]=\"options?.rows\"\n      [cols]=\"options?.cols\"\n      [attr.data-role]=\"config.name\"\n      wrap=\"hard\"\n      [bbDynamicAriaAttribute]=\"{\n        __error: control?.touched && control?.invalid,\n        __desc: options?.description\n      }\"\n      #inputEl\n    >\n    </bb-textarea-ui>\n    <bb-payord-validation-message\n      [control]=\"group?.controls[config.name]\"\n      [validationMessages]=\"options?.validationMessages\"\n      [label]=\"options?.label\"\n    ></bb-payord-validation-message>\n\n    <div\n      class=\"bb-dynamic-input__desc bb-text-support bb-subtitle\"\n      [attr.aria-hidden]=\"!options?.description\"\n      [hidden]=\"!options?.description\"\n      [id]=\"inputEl?.id + '__desc'\"\n      [textContent]=\"options?.description || ''\"\n      #descElem\n    ></div>\n  </div>\n\n  <ng-container *ngIf=\"isCollapsed\">\n    <span class=\"bb-dynamic-input__collapse-btn-container\">\n      <button\n        class=\"bb-dynamic-input__collapse-btn\"\n        bbButton\n        [color]=\"options?.collapseOptions?.btnColor || 'link'\"\n        [buttonSize]=\"options?.collapseOptions?.btnSize\"\n        (click)=\"expand()\"\n      >\n        <bb-icon-ui\n          class=\"bb-dynamic-input__collapse-btn-icon mr-2\"\n          *ngIf=\"!options?.collapseOptions?.hideIcon\"\n          [name]=\"options?.collapseOptions?.icon || 'add'\"\n          [size]=\"options?.collapseOptions?.iconSize\"\n        >\n        </bb-icon-ui>\n        <span class=\"bb-dynamic-input__collapse-btn-label\">\n          {{ options?.collapseOptions?.label || options?.label }}\n        </span>\n      </button>\n      <bb-payord-validation-message\n        [control]=\"group?.controls[config.name]\"\n        [validationMessages]=\"options?.validationMessages\"\n        [label]=\"options?.label\"\n      ></bb-payord-validation-message>\n    </span>\n  </ng-container>\n</ng-container>\n", components: [{ type: i1__namespace$4.TextareaComponent, selector: "bb-textarea-ui", inputs: ["rows", "cols", "placeholder", "maxLength", "minLength", "readonly", "showCharCounter", "wrap"] }, { type: ValidationMessageComponent, selector: "bb-payord-validation-message", inputs: ["control", "validationMessages", "label", "id", "hideGeneric"] }, { type: i2__namespace$3.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5__namespace.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5__namespace.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i5__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5__namespace.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: DynamicAriaAttributeDirective, selector: "[bbDynamicAriaAttribute]", inputs: ["bbDynamicAriaAttribute", "prependInputId", "inputSelector", "ariaAttributeName"] }, { type: i7__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordTextAreaComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-payord-textarea',
                        templateUrl: './payord-textarea.component.html',
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; } });

    var PayordTextboxComponent = /** @class */ (function () {
        function PayordTextboxComponent() {
        }
        PayordTextboxComponent.prototype.ngOnInit = function () {
            this.control = registerFormControl(this.group, this.config.name, this.options.validators, this.options.asyncValidators, this.options.defaultValue, this.config);
            if (this.options.isIban) {
                var schemeNameControl = this.group.get(i1.CounterPartyFields.schemeName) ||
                    registerFormControl(this.group, i1.CounterPartyFields.schemeName);
                if (schemeNameControl.value !== i1.Scheme.IBAN) {
                    schemeNameControl.setValue(i1.Scheme.IBAN);
                }
            }
            triggerHook(i1.PaymentFormFieldHooks.onInit, this);
        };
        PayordTextboxComponent.prototype.ngOnDestroy = function () {
            triggerHook(i1.PaymentFormFieldHooks.onDestroy, this);
        };
        return PayordTextboxComponent;
    }());
    /** @nocollapse */ PayordTextboxComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordTextboxComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ PayordTextboxComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordTextboxComponent, selector: "bb-payord-text", ngImport: i0__namespace, template: "<div\n  *ngIf=\"!config?.hidden\"\n  class=\"bb-dynamic-input form-group contextual-alternates-off\"\n  [formGroup]=\"group\"\n  [ngClass]=\"options?.cssClasses\"\n>\n  <ng-container *ngIf=\"!options?.isIban; else ibanElem\">\n    <label\n      class=\"bb-dynamic-input__label\"\n      [id]=\"inputEl?.id + '__label'\"\n      [for]=\"inputEl?.id\"\n      #labelElem\n    >\n      {{ options?.label || '' }}\n    </label>\n    <span\n      class=\"bb-dynamic-input__helper-text bb-text-support\"\n      [textContent]=\"options?.helperText\"\n      *ngIf=\"options?.helperText\"\n    >\n    </span>\n    <bb-input-text-ui\n      #inputEl\n      [formControlName]=\"config.name\"\n      [disabled]=\"options?.disabled\"\n      [minLength]=\"options?.minLength\"\n      [maxLength]=\"options?.maxLength\"\n      [showCharCounter]=\"options?.showCharCounter\"\n      [id]=\"options?.id\"\n      [placeholder]=\"options?.placeholder || ''\"\n      [autocomplete]=\"options?.autoComplete\"\n      [autofocus]=\"options?.autofocus\"\n      [readonly]=\"options?.readonly\"\n      [bbDynamicAriaAttribute]=\"{\n        __error: control?.touched && control?.invalid,\n        __desc: options?.description\n      }\"\n      [attr.data-role]=\"config.name\"\n    >\n    </bb-input-text-ui>\n    <bb-payord-validation-message\n      [control]=\"group?.controls[config.name]\"\n      [validationMessages]=\"options?.validationMessages\"\n      [label]=\"options?.label\"\n      [id]=\"inputEl?.id + '__error'\"\n      #errorElem\n    ></bb-payord-validation-message>\n    <div\n      class=\"bb-dynamic-input__desc bb-text-support bb-subtitle\"\n      [attr.aria-hidden]=\"!options?.description\"\n      [hidden]=\"!options?.description\"\n      [id]=\"inputEl?.id + '__desc'\"\n      [textContent]=\"options?.description || ''\"\n      #descElem\n    ></div>\n  </ng-container>\n\n  <ng-template #ibanElem>\n    <label\n      class=\"bb-dynamic-input__label\"\n      [id]=\"ibanInput?.id + '__label'\"\n      [for]=\"ibanInput?.id\"\n      [textContent]=\"options?.label || ''\"\n      #ibanLabelElem\n    >\n    </label>\n    <span\n      class=\"bb-dynamic-input__helper-text bb-text-support\"\n      *ngIf=\"options?.helperText\"\n      [textContent]=\"options?.helperText\"\n    >\n    </span>\n    <bb-input-text-ui\n      [formControlName]=\"config.name\"\n      [disabled]=\"options?.disabled\"\n      [maxLength]=\"options?.maxLength\"\n      [placeholder]=\"options?.placeholder || ''\"\n      [autocomplete]=\"options?.autoComplete\"\n      [autofocus]=\"options?.autofocus\"\n      [minLength]=\"options?.minLength\"\n      [readonly]=\"options?.readonly\"\n      [id]=\"options?.id\"\n      [bbDynamicAriaAttribute]=\"{\n        __error: control?.touched && control?.invalid,\n        __desc: options?.description\n      }\"\n      bbIban\n      #ibanInput\n    >\n    </bb-input-text-ui>\n    <bb-payord-validation-message\n      [control]=\"group?.controls[config.name]\"\n      [validationMessages]=\"options?.validationMessages\"\n      [label]=\"options?.label\"\n      [id]=\"ibanInput?.id + '__error'\"\n      #ibanErrorElem\n    ></bb-payord-validation-message>\n\n    <div\n      class=\"bb-dynamic-input__desc bb-text-support bb-subtitle\"\n      [attr.aria-hidden]=\"!options?.description\"\n      [hidden]=\"!options?.description\"\n      [id]=\"ibanInput?.id + '__desc'\"\n      [textContent]=\"options?.description || ''\"\n      #ibanDescElem\n    ></div>\n  </ng-template>\n</div>\n", components: [{ type: i1__namespace$5.InputTextComponent, selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: ValidationMessageComponent, selector: "bb-payord-validation-message", inputs: ["control", "validationMessages", "label", "id", "hideGeneric"] }], directives: [{ type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5__namespace.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5__namespace.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i5__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5__namespace.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: DynamicAriaAttributeDirective, selector: "[bbDynamicAriaAttribute]", inputs: ["bbDynamicAriaAttribute", "prependInputId", "inputSelector", "ariaAttributeName"] }, { type: i1__namespace.ӨIbanDirective, selector: "[bbIban]", inputs: ["maxLen"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordTextboxComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-payord-text',
                        templateUrl: './payord-text.component.html',
                    }]
            }] });

    var PayordSanctionedCurrencyAmountComponent = /** @class */ (function () {
        function PayordSanctionedCurrencyAmountComponent() {
            var _d;
            this.sanctionedCurrencyAmountId = PayordSanctionedCurrencyAmountComponent._id++;
            /**
             * Initial amount value
             */
            this.initialAmount = (_d = {},
                _d[i1.RemittanceInfoFields.amount] = '',
                _d[i1.RemittanceInfoFields.currency] = '',
                _d);
        }
        /**
         * Initializes the component.
         *
         * @returns
         */
        PayordSanctionedCurrencyAmountComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.parentForm = getParentForm(this.group);
            this.control = registerFormControl(this.group, this.config.name, [
                i5.Validators.required,
                i1.amountValidator,
                i1.currencyValidatorFactory(),
            ], this.options.asyncValidators, this.options.defaultValue || this.initialAmount, this.config);
            this.initiatorCurrencyControl = (this.parentForm.get(i1.PaymentBaseFields.initiator + "." + i1.InitiatorFields.currency));
            this.exchangeRateControl =
                this.parentForm.get(i1.PaymentOptionFields.exchangeRate) ||
                    registerFormControl(this.parentForm, i1.PaymentOptionFields.exchangeRate);
            if (this.initiatorCurrencyControl &&
                this.control &&
                !this.options.isTemplateMode) {
                // Listen for "from" and "to" currency values
                this.valueChangeSubscription = rxjs.combineLatest([
                    this.initiatorCurrencyControl.valueChanges.pipe(operators.startWith(this.initiatorCurrencyControl.value), operators.distinctUntilChanged(), operators.filter(function (val) { return !!val; })),
                    this.control.valueChanges.pipe(operators.startWith(this.control.value), operators.map(function (_d) {
                        var currency = _d.currency;
                        return currency;
                    }), operators.distinctUntilChanged(), operators.filter(function (val) { return !!val; })),
                ]).subscribe(function (_d) {
                    var _e = __read(_d, 2), fromCurrency = _e[0], toCurrency = _e[1];
                    _this.options.getExchangeRate$.next({ fromCurrency: fromCurrency, toCurrency: toCurrency });
                });
            }
            if (this.options.exchangeRate$) {
                this.exchangeRate$ = this.options.exchangeRate$.pipe(operators.tap(function (rate) {
                    _this.exchangeRateControl.setValue(rate);
                }));
            }
            triggerHook(i1.PaymentFormFieldHooks.onInit, this);
        };
        /**
         * Returns the calculated rate
         *
         * @param [exchangeRate] Exchange rate
         */
        PayordSanctionedCurrencyAmountComponent.prototype.getCalculatedRate = function (exchangeRate) {
            if (exchangeRate === void 0) { exchangeRate = 0; }
            if (exchangeRate &&
                this.initiatorCurrencyControl &&
                this.control.value.amount) {
                return {
                    currencyFrom: this.initiatorCurrencyControl.value,
                    currencyTo: this.control.value.currency,
                    rate: exchangeRate,
                    calculatedAmount: this.control.value.amount / exchangeRate,
                };
            }
            return;
        };
        /**
         * Cleanups just before Angular destroys the component.
         *
         * @returns
         */
        PayordSanctionedCurrencyAmountComponent.prototype.ngOnDestroy = function () {
            if (this.valueChangeSubscription) {
                this.valueChangeSubscription.unsubscribe();
            }
            triggerHook(i1.PaymentFormFieldHooks.onDestroy, this);
        };
        PayordSanctionedCurrencyAmountComponent.prototype.getLabelledbyForSelector = function () {
            var _a, _b, _c;
            return (((_a = this.options) === null || _a === void 0 ? void 0 : _a.labelledBy) ||
                ((((_b = this.amountLabelEl) === null || _b === void 0 ? void 0 : _b.nativeElement.id) || '') + " " + (((_c = this.helperTextEL) === null || _c === void 0 ? void 0 : _c.nativeElement.id) || '')).trim());
        };
        return PayordSanctionedCurrencyAmountComponent;
    }());
    PayordSanctionedCurrencyAmountComponent._id = 0;
    /** @nocollapse */ PayordSanctionedCurrencyAmountComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordSanctionedCurrencyAmountComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ PayordSanctionedCurrencyAmountComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordSanctionedCurrencyAmountComponent, selector: "bb-sanctioned-currency-amount", viewQueries: [{ propertyName: "amountLabelEl", first: true, predicate: ["amountLabel"], descendants: true }, { propertyName: "helperTextEL", first: true, predicate: ["helperText"], descendants: true }], ngImport: i0__namespace, template: "<section\n  *ngIf=\"!config?.hidden\"\n  class=\"bb-dynamic-input form-group payment-amount\"\n  [formGroup]=\"group\"\n  [ngClass]=\"options?.cssClasses\"\n>\n  <div\n    #amountLabel\n    class=\"bb-dynamic-input__label bb-label\"\n    id=\"payment-amount__helper-label-{{ sanctionedCurrencyAmountId }}\"\n    *ngIf=\"options?.label\"\n  >\n    {{ options?.label }}\n  </div>\n\n  <span\n    #helperText\n    class=\"bb-dynamic-input__helper-text bb-text-support\"\n    id=\"payment-amount__helper-text-{{ sanctionedCurrencyAmountId }}\"\n    *ngIf=\"options?.helperText\"\n    [textContent]=\"options?.helperText\"\n  >\n  </span>\n\n  <div class=\"col-md-8 px-0\">\n    <ng-container *ngIf=\"options?.items$ | async as response; else loading\">\n      <bb-currency-amount-selector\n        [currencies]=\"response.currencies\"\n        [decMinLen]=\"0\"\n        [decMaxLen]=\"options?.decMaxLen\"\n        [allowNegativeValue]=\"options?.allowNegativeValue\"\n        [currencyLabel]=\"options?.currencyLabel || ''\"\n        [decimalLabel]=\"options?.decimalLabel || ''\"\n        [disabled]=\"options?.disabled || false\"\n        [integer]=\"options?.integer\"\n        [integerLabel]=\"options?.integerLabel || ''\"\n        [isRightAligned]=\"options?.isRightAligned\"\n        [labelClasses]=\"options?.labelClasses || ''\"\n        [placeholder]=\"options?.placeholder || 0\"\n        [readonly]=\"options?.readonly\"\n        [aria-describedby]=\"options?.describedBy\"\n        [aria-labelledby]=\"getLabelledbyForSelector()\"\n        [aria-invalid]=\"options?.ariaInvalid\"\n        [formControlName]=\"config.name\"\n        [currencySelectorExtended]=\"true\"\n        [currencySelectorConfig]=\"{\n          dividerIndex: response.dividerIndex,\n          showName: true,\n          isSearchable: true\n        }\"\n        [attr.maxlength]=\"options?.maxLength || 18\"\n        data-role=\"sanctioned-currency-amount-selector\"\n        resultType=\"string\"\n        ngDefaultControl\n      >\n        <div bbValidationMessage>\n          <bb-payord-validation-message\n            [control]=\"group.get('amountGroup')\"\n            [validationMessages]=\"options?.validationMessages\"\n            [label]=\"options?.label || 'Amount'\"\n          ></bb-payord-validation-message>\n        </div>\n      </bb-currency-amount-selector>\n      <bb-input-validation-message-ui [showErrors]=\"response.message\">\n        <span i18n=\"@@load-error-message-curr\"\n          >Something went wrong. Reload the page or contact system\n          administrator.</span\n        >\n      </bb-input-validation-message-ui>\n    </ng-container>\n  </div>\n  <ng-template #loading>\n    <bb-loading-indicator-ui></bb-loading-indicator-ui>\n  </ng-template>\n\n  <ng-container *ngIf=\"exchangeRate$ | async as exchangeRate\">\n    <ng-container *ngIf=\"getCalculatedRate(exchangeRate) as calculatedRate\">\n      <ng-container i18n=\"@@approximatelyPriceLabel\"\n        >You pay approximately:</ng-container\n      >\n      <span class=\"bb-text-bold\">\n        &asymp;\n        <bb-amount-ui\n          [mapCurrency]=\"false\"\n          [amount]=\"calculatedRate.calculatedAmount\"\n          [currency]=\"calculatedRate.currencyFrom\"\n        ></bb-amount-ui>\n      </span>\n      <ng-container i18n=\"@@currency-exchange-rate\">\n        (1 {{ calculatedRate.currencyFrom }} &asymp; {{ calculatedRate.rate }}\n        {{ calculatedRate.currencyTo }})\n      </ng-container>\n    </ng-container>\n  </ng-container>\n\n  <div *ngIf=\"options?.exchangeRateError$ | async\">\n    <span i18n=\"@@load-error-message-rate\"\n      >Exchange rate for this currency pair is unavailable.</span\n    >\n  </div>\n\n  <div\n    class=\"bb-dynamic-input__desc bb-text-support bb-subtitle\"\n    *ngIf=\"options?.description\"\n    [textContent]=\"options?.description\"\n  ></div>\n</section>\n", components: [{ type: i1__namespace.ӨCurrencyAmountSelectorComponent, selector: "bb-currency-amount-selector", inputs: ["decMaxLen", "decMinLen", "placeholder", "resultType", "integer", "required", "readonly", "disabled", "integerLabelSrOnly", "decimalLabelSrOnly", "currencies", "currencySelectorExtended", "currencySelectorConfig", "isRightAligned", "integerId", "decimalId", "integerLabel", "decimalLabel", "currencyLabel", "labelClasses", "allowNegativeValue", "currencyListAriaLabel", "currencyListWithOnItemAriaLabel", "aria-describedby", "aria-labelledby", "aria-invalid"] }, { type: ValidationMessageComponent, selector: "bb-payord-validation-message", inputs: ["control", "validationMessages", "label", "id", "hideGeneric"] }, { type: i3__namespace.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i4__namespace$1.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i5__namespace$2.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }], directives: [{ type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5__namespace.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5__namespace.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i5__namespace.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i5__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5__namespace.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i5__namespace.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }], pipes: { "async": i4__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordSanctionedCurrencyAmountComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-sanctioned-currency-amount',
                        templateUrl: './payord-sanctioned-currency-amount.component.html',
                    }]
            }], propDecorators: { amountLabelEl: [{
                    type: i0.ViewChild,
                    args: ['amountLabel']
                }], helperTextEL: [{
                    type: i0.ViewChild,
                    args: ['helperText']
                }] } });

    var PayordCountrySelectorComponent = /** @class */ (function (_super) {
        __extends(PayordCountrySelectorComponent, _super);
        function PayordCountrySelectorComponent(visibilityService) {
            var _this = _super.call(this, visibilityService) || this;
            _this.visibilityService = visibilityService;
            return _this;
        }
        /**
         * Initialize the component.
         *
         * @returns
         */
        PayordCountrySelectorComponent.prototype.ngOnInit = function () {
            this.defaultCountry = this.options.defaultValue || '';
            this.control = registerFormControl(this.group, this.config.name, this.options.validators, this.options.asyncValidators, this.defaultCountry, this.config);
            this.toggleDependants();
            triggerHook(i1.PaymentFormFieldHooks.onInit, this);
        };
        /**
         * Cleanup just before Angular destroys the component.
         *
         * @returns
         */
        PayordCountrySelectorComponent.prototype.ngOnDestroy = function () {
            triggerHook(i1.PaymentFormFieldHooks.onDestroy, this);
        };
        /**
         * Selects an item
         *
         * @param country Item country
         * @returns
         */
        PayordCountrySelectorComponent.prototype.selectItem = function (country) {
            this.control.setValue(country);
            this.toggleDependants();
        };
        return PayordCountrySelectorComponent;
    }(ActivatableFormField));
    /** @nocollapse */ PayordCountrySelectorComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordCountrySelectorComponent, deps: [{ token: VisibilityService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ PayordCountrySelectorComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordCountrySelectorComponent, selector: "bb-payord-country-selector", usesInheritance: true, ngImport: i0__namespace, template: "<div\n  class=\"bb-dynamic-input form-group\"\n  *ngIf=\"!config?.hidden\"\n  [formGroup]=\"group\"\n  [ngClass]=\"options?.cssClasses\"\n>\n  <bb-select-country-dropdown\n    [formControlName]=\"config?.name\"\n    [countries]=\"options?.countries\"\n    [label]=\"options?.label\"\n    [helperText]=\"options?.helperText\"\n    [placeholder]=\"options?.placeholder\"\n    [searchPlaceholder]=\"options?.searchPlaceholder\"\n    [dropdownIcon]=\"options?.dropdownIcon\"\n    [selectedCountry]=\"control.value\"\n    (selectCountry)=\"selectItem($event)\"\n    [attr.data-role]=\"config?.name\"\n  ></bb-select-country-dropdown>\n\n  <bb-payord-validation-message\n    [control]=\"group?.controls[config.name]\"\n    [validationMessages]=\"options?.validationMessages\"\n    [label]=\"options?.label\"\n  ></bb-payord-validation-message>\n\n  <div\n    class=\"bb-dynamic-input__desc bb-text-support bb-subtitle\"\n    [attr.aria-hidden]=\"!options?.description\"\n    [hidden]=\"!options?.description\"\n    [textContent]=\"options?.description || ''\"\n    #descElem\n  ></div>\n</div>\n", components: [{ type: i1__namespace.ӨSelectCountryDropdownComponent, selector: "bb-select-country-dropdown", inputs: ["countries", "selectedCountry", "helperText", "placeholder", "label", "searchPlaceholder", "dropdownIcon", "isClosedPayment"], outputs: ["selectCountry"] }, { type: ValidationMessageComponent, selector: "bb-payord-validation-message", inputs: ["control", "validationMessages", "label", "id", "hideGeneric"] }], directives: [{ type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5__namespace.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5__namespace.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i5__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5__namespace.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordCountrySelectorComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-payord-country-selector',
                        templateUrl: 'payord-country-selector.component.html',
                    }]
            }], ctorParameters: function () { return [{ type: VisibilityService }]; } });

    var PayordSwitchComponent = /** @class */ (function (_super) {
        __extends(PayordSwitchComponent, _super);
        function PayordSwitchComponent(visibilityService) {
            var _this = _super.call(this, visibilityService) || this;
            _this.visibilityService = visibilityService;
            return _this;
        }
        PayordSwitchComponent.prototype.ngOnInit = function () {
            this.control = registerFormControl(this.group, this.config.name, this.options.validators, this.options.asyncValidators, this.options.defaultValue, this.config);
            this.toggleDependants();
            triggerHook(i1.PaymentFormFieldHooks.onInit, this);
        };
        PayordSwitchComponent.prototype.ngOnDestroy = function () {
            triggerHook(i1.PaymentFormFieldHooks.onDestroy, this);
        };
        return PayordSwitchComponent;
    }(ActivatableFormField));
    /** @nocollapse */ PayordSwitchComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordSwitchComponent, deps: [{ token: VisibilityService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ PayordSwitchComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordSwitchComponent, selector: "bb-payord-switch", usesInheritance: true, ngImport: i0__namespace, template: "<div\n  class=\"form-group bb-dynamic-input\"\n  [formGroup]=\"group\"\n  [ngClass]=\"options?.cssClasses\"\n>\n  <div [hidden]=\"config?.hidden\">\n    <bb-switch-ui\n      [formControlName]=\"config?.name\"\n      [label]=\"options?.label\"\n      [labelPosition]=\"options?.labelPosition\"\n      (change)=\"toggleDependants()\"\n      [bbDynamicAriaAttribute]=\"{\n        __error: control?.touched && control?.invalid\n      }\"\n      [inputSelector]=\"'.bb-switch__checkbox'\"\n      [attr.data-role]=\"config?.name\"\n      #inputEl\n    >\n    </bb-switch-ui>\n    <bb-payord-validation-message\n      [control]=\"group?.controls[config.name]\"\n      [validationMessages]=\"options?.validationMessages\"\n      [label]=\"options?.label\"\n      [id]=\"inputEl?.id + '__error'\"\n    ></bb-payord-validation-message>\n  </div>\n</div>\n", components: [{ type: i2__namespace$5.SwitchComponent, selector: "bb-switch-ui", inputs: ["labelPosition"] }, { type: ValidationMessageComponent, selector: "bb-payord-validation-message", inputs: ["control", "validationMessages", "label", "id", "hideGeneric"] }], directives: [{ type: i5__namespace.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5__namespace.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i5__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5__namespace.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: DynamicAriaAttributeDirective, selector: "[bbDynamicAriaAttribute]", inputs: ["bbDynamicAriaAttribute", "prependInputId", "inputSelector", "ariaAttributeName"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordSwitchComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-payord-switch',
                        templateUrl: './payord-switch.component.html',
                    }]
            }], ctorParameters: function () { return [{ type: VisibilityService }]; } });

    var PayordDateComponent = /** @class */ (function () {
        function PayordDateComponent() {
        }
        PayordDateComponent.prototype.ngOnInit = function () {
            this.control = registerFormControl(this.group, this.config.name, this.options.validators, this.options.asyncValidators, this.options.defaultValue, this.config);
            triggerHook(i1.PaymentFormFieldHooks.onInit, this);
        };
        PayordDateComponent.prototype.ngOnDestroy = function () {
            triggerHook(i1.PaymentFormFieldHooks.onDestroy, this);
        };
        return PayordDateComponent;
    }());
    /** @nocollapse */ PayordDateComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordDateComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ PayordDateComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordDateComponent, selector: "bb-payord-date", ngImport: i0__namespace, template: "<div\n  *ngIf=\"!config?.hidden\"\n  class=\"bb-dynamic-input form-group payord-date-control\"\n  [formGroup]=\"group\"\n  [ngClass]=\"options?.cssClasses\"\n>\n  <div>\n    <div\n      [class.payord-date-control__no-label]=\"\n        !options?.label && !options?.helperText\n      \"\n    >\n      <label\n        class=\"bb-dynamic-input__label\"\n        *ngIf=\"options?.label\"\n        [id]=\"inputEl?.id + '__label'\"\n        [textContent]=\"options?.label\"\n        #labelElem\n      ></label>\n      <span\n        class=\"bb-dynamic-input__helper-text bb-text-support\"\n        *ngIf=\"options?.helperText\"\n        [textContent]=\"options?.helperText\"\n      >\n      </span>\n    </div>\n    <div class=\"bb-block bb-block--sm\">\n      <bb-input-datepicker-ui\n        [formControlName]=\"config.name\"\n        [minDate]=\"options.minDate\"\n        [maxDate]=\"options.maxDate\"\n        [overrideDateFormat]=\"options.overrideDateFormat\"\n        [placeholder]=\"options.placeholder\"\n        [btnColor]=\"options.btnColor || 'link'\"\n        [clickOpen]=\"options.clickOpen || false\"\n        [focusOpen]=\"options.focusOpen || false\"\n        [icon]=\"options.icon || 'calendar'\"\n        [iconColor]=\"options.iconColor\"\n        [iconSize]=\"options.iconSize || 'md'\"\n        [markDisabled]=\"options.markDisabled\"\n        [navigation]=\"options.navigation || 'arrows'\"\n        [placement]=\"options.placement || 'bottom-left'\"\n        [rangeSelection]=\"options.rangeSelection || false\"\n        [firstDayOfWeek]=\"options.firstDayOfWeek\"\n        [readonly]=\"options.readonly || false\"\n        [bbDynamicAriaAttribute]=\"{\n          __error: control?.touched && control?.invalid,\n          __desc: options?.description\n        }\"\n        [attr.data-role]=\"config.name\"\n        [aria-labelledby]=\"options?.label ? inputEl?.id + '__label' : null\"\n        #inputEl\n      >\n      </bb-input-datepicker-ui>\n    </div>\n\n    <bb-payord-validation-message\n      [control]=\"group?.controls[config.name]\"\n      [validationMessages]=\"options?.validationMessages\"\n      [label]=\"options?.label\"\n      [id]=\"inputEl?.id + '__error'\"\n    ></bb-payord-validation-message>\n\n    <div\n      class=\"bb-dynamic-input__desc bb-text-support bb-subtitle\"\n      [attr.aria-hidden]=\"!options?.description\"\n      [hidden]=\"!options?.description\"\n      [id]=\"inputEl?.id + '__desc'\"\n      [textContent]=\"options?.description || ''\"\n      #descElem\n    ></div>\n  </div>\n</div>\n", components: [{ type: i1__namespace$6.InputDatepickerComponent, selector: "bb-input-datepicker-ui", inputs: ["rangeSelection", "rangeSelectionSplit", "clickOpen", "focusOpen", "placement", "datepickerDescribedby", "ariaLabelForButton", "minDate", "maxDate", "markDisabled", "icon", "iconSize", "iconColor", "btnColor", "ariaLabel", "navigation", "autocomplete", "firstDayOfWeek", "displayMonths", "placeholder", "overrideDateFormat"], outputs: ["focusedDate"] }, { type: ValidationMessageComponent, selector: "bb-payord-validation-message", inputs: ["control", "validationMessages", "label", "id", "hideGeneric"] }], directives: [{ type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5__namespace.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5__namespace.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i1__namespace$6.MinDateValidatorDirective, selector: "bb-input-datepicker-ui[minDate]", inputs: ["minDate"] }, { type: i1__namespace$6.MaxDateValidatorDirective, selector: "bb-input-datepicker-ui[maxDate]", inputs: ["maxDate"] }, { type: i5__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5__namespace.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: DynamicAriaAttributeDirective, selector: "[bbDynamicAriaAttribute]", inputs: ["bbDynamicAriaAttribute", "prependInputId", "inputSelector", "ariaAttributeName"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordDateComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-payord-date',
                        templateUrl: './payord-date.component.html',
                    }]
            }] });

    var PayordNumberComponent = /** @class */ (function () {
        function PayordNumberComponent() {
        }
        PayordNumberComponent.prototype.ngOnInit = function () {
            this.control = registerFormControl(this.group, this.config.name, this.options.validators, this.options.asyncValidators, this.options.defaultValue, this.config);
            triggerHook(i1.PaymentFormFieldHooks.onInit, this);
        };
        PayordNumberComponent.prototype.ngOnDestroy = function () {
            triggerHook(i1.PaymentFormFieldHooks.onDestroy, this);
        };
        return PayordNumberComponent;
    }());
    /** @nocollapse */ PayordNumberComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordNumberComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ PayordNumberComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordNumberComponent, selector: "bb-payord-number", ngImport: i0__namespace, template: "<div\n  *ngIf=\"!config?.hidden\"\n  class=\"bb-dynamic-input form-group\"\n  [formGroup]=\"group\"\n  [ngClass]=\"options?.cssClasses\"\n>\n  <div>\n    <label\n      class=\"bb-dynamic-input__label\"\n      [id]=\"inputEl?.id + '__label'\"\n      [for]=\"inputEl?.id\"\n      [textContent]=\"options?.label || ''\"\n      #labelElem\n    ></label>\n    <span\n      class=\"bb-dynamic-input__helper-text bb-text-support\"\n      *ngIf=\"options?.helperText\"\n      [id]=\"inputEl?.id + '__desc'\"\n      [textContent]=\"options?.helperText\"\n    >\n    </span>\n    <bb-input-number-ui\n      [placeholder]=\"options.placeholder || ''\"\n      [formControlName]=\"config.name\"\n      [max]=\"options.max\"\n      [min]=\"options.min\"\n      [step]=\"options.step\"\n      [bbDynamicAriaAttribute]=\"{\n        __error: control?.touched && control?.invalid,\n        __desc: options?.description\n      }\"\n      #inputEl\n    >\n    </bb-input-number-ui>\n\n    <bb-payord-validation-message\n      [control]=\"group?.controls[config.name]\"\n      [validationMessages]=\"options?.validationMessages\"\n      [label]=\"options?.label\"\n      [id]=\"inputEl?.id + '__error'\"\n    ></bb-payord-validation-message>\n\n    <div\n      class=\"bb-dynamic-input__desc bb-text-support bb-subtitle\"\n      [attr.aria-hidden]=\"!options?.description\"\n      [hidden]=\"!options?.description\"\n      [id]=\"inputEl?.id + '__desc'\"\n      [textContent]=\"options?.description || ''\"\n      #descElem\n    ></div>\n  </div>\n</div>\n", components: [{ type: i1__namespace$7.InputNumberComponent, selector: "bb-input-number-ui", inputs: ["placeholder", "max", "min", "step", "readonly", "autocomplete", "ariaLabel", "allowNonDigits", "allowNegativeSign"] }, { type: ValidationMessageComponent, selector: "bb-payord-validation-message", inputs: ["control", "validationMessages", "label", "id", "hideGeneric"] }], directives: [{ type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5__namespace.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5__namespace.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i5__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5__namespace.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: DynamicAriaAttributeDirective, selector: "[bbDynamicAriaAttribute]", inputs: ["bbDynamicAriaAttribute", "prependInputId", "inputSelector", "ariaAttributeName"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordNumberComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-payord-number',
                        templateUrl: './payord-number.component.html',
                    }]
            }] });

    var PayordPhoneComponent = /** @class */ (function () {
        function PayordPhoneComponent() {
        }
        PayordPhoneComponent.prototype.ngOnInit = function () {
            this.control = registerFormControl(this.group, this.config.name, this.options.validators, this.options.asyncValidators, this.options.defaultValue, this.config);
            triggerHook(i1.PaymentFormFieldHooks.onInit, this);
        };
        PayordPhoneComponent.prototype.ngOnDestroy = function () {
            triggerHook(i1.PaymentFormFieldHooks.onDestroy, this);
        };
        return PayordPhoneComponent;
    }());
    /** @nocollapse */ PayordPhoneComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordPhoneComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ PayordPhoneComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordPhoneComponent, selector: "bb-payord-phone", ngImport: i0__namespace, template: "<div\n  *ngIf=\"!config?.hidden\"\n  class=\"bb-dynamic-input form-group\"\n  [formGroup]=\"group\"\n  [ngClass]=\"options?.cssClasses\"\n>\n  <div>\n    <label\n      class=\"bb-dynamic-input__label\"\n      [id]=\"inputEl?.id + '__label'\"\n      [for]=\"inputEl?.id\"\n      [textContent]=\"options?.label || ''\"\n      #labelElem\n    ></label>\n    <span\n      class=\"bb-dynamic-input__helper-text bb-text-support\"\n      *ngIf=\"options?.helperText\"\n      [id]=\"inputEl?.id + '__desc'\"\n      [textContent]=\"options?.helperText\"\n    >\n    </span>\n    <bb-input-phone-ui\n      [placeholder]=\"options.placeholder || ''\"\n      [formControlName]=\"config.name\"\n      [minLength]=\"options?.minLength\"\n      [maxLength]=\"options?.maxLength\"\n      [bbDynamicAriaAttribute]=\"{\n        __error: control?.touched && control?.invalid,\n        __desc: options?.description\n      }\"\n      [attr.data-role]=\"config.name\"\n      #inputEl\n    >\n    </bb-input-phone-ui>\n\n    <bb-payord-validation-message\n      [control]=\"group?.controls[config.name]\"\n      [validationMessages]=\"options?.validationMessages\"\n      [label]=\"options?.label\"\n      [id]=\"inputEl?.id + '__error'\"\n    ></bb-payord-validation-message>\n\n    <div\n      class=\"bb-dynamic-input__desc bb-subtitle bb-text-support\"\n      [attr.aria-hidden]=\"!options?.description\"\n      [hidden]=\"!options?.description\"\n      [id]=\"inputEl?.id + '__desc'\"\n      [textContent]=\"options?.description || ''\"\n      #descElem\n    ></div>\n  </div>\n</div>\n", components: [{ type: i1__namespace$8.InputPhoneComponent, selector: "bb-input-phone-ui", inputs: ["placeholder", "maxLength", "minLength", "readonly", "ariaLabel", "autocomplete", "countryList", "dropdownPosition", "clearable", "searchable", "defaultCountryIsoCode", "enableCountryCode"] }, { type: ValidationMessageComponent, selector: "bb-payord-validation-message", inputs: ["control", "validationMessages", "label", "id", "hideGeneric"] }], directives: [{ type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5__namespace.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5__namespace.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i5__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5__namespace.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: DynamicAriaAttributeDirective, selector: "[bbDynamicAriaAttribute]", inputs: ["bbDynamicAriaAttribute", "prependInputId", "inputSelector", "ariaAttributeName"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordPhoneComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-payord-phone',
                        templateUrl: './payord-phone.component.html',
                    }]
            }] });

    var PayordSelectPaymentOptionComponent = /** @class */ (function (_super) {
        __extends(PayordSelectPaymentOptionComponent, _super);
        function PayordSelectPaymentOptionComponent(visibilityService) {
            var _this = _super.call(this, visibilityService) || this;
            _this.visibilityService = visibilityService;
            _this.separator = '::';
            _this.defaultTransFerFee = {
                amount: '',
                currencyCode: '',
            };
            _this.today = i1.getDateOnly(new Date());
            _this.showConfirmOptionModal = false;
            return _this;
        }
        PayordSelectPaymentOptionComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.paymentTypecontrol = this.group.get('paymentType');
            this.paymentTypeNameControl = registerFormControl(this.group, i1.PaymentOptionFields.paymentTypeName);
            this.control = registerFormControl(this.group, this.config.name, [
                i5.Validators.required,
            ]);
            this.transferFeeControl =
                this.group.get(i1.PaymentOptionFields.transferFee) ||
                    registerFormControl(this.group, i1.PaymentOptionFields.transferFee);
            this.chargeBearerOptionsControl =
                this.group.get(i1.PaymentOptionFields.chargeBearerOptions) ||
                    registerFormControl(this.group, i1.PaymentOptionFields.chargeBearerOptions);
            this.remittanceInfoGroup = this.group.get(i1.PaymentBaseFields.remittanceInfo);
            this.isClosedPaymentControl = (this.group.get(i1.HiddenFields.isClosedPayment));
            this.isManualEditControl = (this.group.get(i1.HiddenFields.isManualEdit));
            if (this.remittanceInfoGroup) {
                this.instructionPriorityControl =
                    this.remittanceInfoGroup.get(i1.RemittanceInfoFields.urgent) ||
                        registerFormControl(this.remittanceInfoGroup, i1.RemittanceInfoFields.urgent);
            }
            this.paymentOptions$ = (this.options.items$ || rxjs.of([])).pipe(operators.map(function (paymentOptions) { return paymentOptions.map(function (paymentOption) { return (Object.assign(Object.assign({}, paymentOption), { hasMin: paymentOption.executionTimeFrame &&
                    typeof paymentOption.executionTimeFrame.min === 'number', hasMax: paymentOption.executionTimeFrame &&
                    typeof paymentOption.executionTimeFrame.max === 'number', name: paymentOption.name ||
                    (_this.options.optionLabels || {})[paymentOption.paymentType || ''] })); }); }), operators.tap(function (paymentOptions) {
                var _a;
                _this.paymentOptions = paymentOptions || [];
                if (paymentOptions && paymentOptions.length === 1) {
                    var value = _this.getValue(paymentOptions[0]);
                    if (value !== _this.control.value) {
                        _this.control.setValue(value);
                        _this.setPaymentOptionDetails(paymentOptions[0]);
                    }
                }
                if (((_a = _this.control) === null || _a === void 0 ? void 0 : _a.value) && paymentOptions.length) {
                    var _d = __read(_this.control.value.split(_this.separator), 2), type = _d[0], instructionPriority = _d[1];
                    var paymentOption = _this.getValueByType(type, instructionPriority);
                    if (paymentOption) {
                        _this.setPaymentOptionDetails(paymentOption);
                    }
                    else {
                        _this.control.reset();
                    }
                }
            }));
            this.toggleDependants();
            triggerHook(i1.PaymentFormFieldHooks.onInit, this);
        };
        PayordSelectPaymentOptionComponent.prototype.setPaymentOptionDetails = function (paymentOption) {
            var _a;
            if (this.instructionPriorityControl) {
                this.instructionPriorityControl.setValue(paymentOption.instructionPriority === 'HIGH');
            }
            if (this.options.isWizardMode && this.options.checkClosedPaymentsAccess) {
                (_a = this.isClosedPaymentControl) === null || _a === void 0 ? void 0 : _a.setValue(!paymentOption.canEditCounterparty);
            }
            this.transferFeeControl.setValue(paymentOption.transferFee || this.defaultTransFerFee);
            this.chargeBearerOptionsControl.setValue(paymentOption.chargeBearer);
            this.paymentTypecontrol.patchValue(paymentOption.paymentType);
            this.paymentTypeNameControl.setValue(paymentOption.name);
        };
        PayordSelectPaymentOptionComponent.prototype.getValue = function (option) {
            return "" + option.paymentType + this.separator + (option.instructionPriority || '');
        };
        PayordSelectPaymentOptionComponent.prototype.getValueByType = function (type, priority) {
            return this.paymentOptions.filter(function (option) { return option.paymentType === type && option.instructionPriority === priority; })[0];
        };
        PayordSelectPaymentOptionComponent.prototype.onRadioChange = function (value) {
            this.toggleDependants();
            var _d = __read(value.split(this.separator), 2), type = _d[0], instructionPriority = _d[1];
            var paymentOption = this.getValueByType(type, instructionPriority);
            this.selectedPaymentOptionLabel = paymentOption.name;
            this.previousPaymentOption = this.currentPaymentOption;
            this.currentPaymentOption = paymentOption;
            if (type && instructionPriority) {
                if (this.shouldShowConfirmationModal(!!(paymentOption === null || paymentOption === void 0 ? void 0 : paymentOption.canEditCounterparty))) {
                    this.showConfirmOptionModal = true;
                }
                else {
                    this.setPaymentOptionDetails(this.currentPaymentOption);
                }
            }
        };
        PayordSelectPaymentOptionComponent.prototype.shouldShowConfirmationModal = function (canEditCounterparty) {
            var _a, _b, _c;
            var counterpartyDetails = (_a = (this.group.get(i1.PaymentBaseFields.counterparty))) === null || _a === void 0 ? void 0 : _a.getRawValue();
            var selectedBeneficiary = (_b = this.group.get(i1.HiddenFields.selectedBeneficiary)) === null || _b === void 0 ? void 0 : _b.value;
            var filledBeneficiary = getCounterpartyFormGroupDetails(this.group);
            var isSelectedBeneficiaryChanged = selectedBeneficiary &&
                i1.isSelectedBeneficiaryModified(counterpartyDetails, selectedBeneficiary);
            var isClosedPayment = this.options.isWizardMode &&
                this.options.checkClosedPaymentsAccess &&
                !canEditCounterparty;
            var isEdittedManually = i1.isObjectTruthy(filledBeneficiary) && ((_c = this.isManualEditControl) === null || _c === void 0 ? void 0 : _c.value);
            return (isClosedPayment && (isSelectedBeneficiaryChanged || isEdittedManually));
        };
        PayordSelectPaymentOptionComponent.prototype.confirmPaymentOption = function () {
            this.showConfirmOptionModal = false;
            revertBeneficiaryChanges(this.group);
            if (this.currentPaymentOption) {
                this.setPaymentOptionDetails(this.currentPaymentOption);
            }
        };
        PayordSelectPaymentOptionComponent.prototype.cancelPaymentOption = function () {
            this.showConfirmOptionModal = false;
            var prevPaymentType = '';
            this.currentPaymentOption = this.previousPaymentOption;
            if (this.currentPaymentOption) {
                var instructionPriority = this.instructionPriorityControl.value
                    ? 'HIGH'
                    : 'NORM';
                prevPaymentType = this.paymentTypecontrol.value;
                if (prevPaymentType) {
                    this.control.setValue("" + prevPaymentType + this.separator + instructionPriority);
                }
            }
            if (!prevPaymentType || !this.previousPaymentOption) {
                this.instructionPriorityControl.reset();
                this.control.reset();
            }
        };
        PayordSelectPaymentOptionComponent.prototype.ngOnDestroy = function () {
            triggerHook(i1.PaymentFormFieldHooks.onDestroy, this);
        };
        return PayordSelectPaymentOptionComponent;
    }(ActivatableFormField));
    /** @nocollapse */ PayordSelectPaymentOptionComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordSelectPaymentOptionComponent, deps: [{ token: VisibilityService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ PayordSelectPaymentOptionComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordSelectPaymentOptionComponent, selector: "bb-select-payment-option", usesInheritance: true, ngImport: i0__namespace, template: "<ng-container *ngIf=\"paymentOptions$ | async as paymentOptions\">\n  <ng-container *ngIf=\"paymentOptions.length\">\n    <div\n      *ngIf=\"!config?.hidden\"\n      class=\"form-group col-12 bb-dynamic-input\"\n      [formGroup]=\"group\"\n      [ngClass]=\"options?.cssClasses\"\n    >\n      <div class=\"bb-select-payment-option\">\n        <div\n          class=\"bb-label\"\n          i18n-label=\"@@payord-select-payment-option.delivery.label\"\n        >\n          Delivery\n        </div>\n        <bb-input-radio-group-ui\n          label=\"Delivery\"\n          i18n-label=\"@@payord-select-payment-option.radiogroup.label\"\n          [formControlName]=\"config?.name\"\n          (change)=\"onRadioChange($event?.target?.value || '')\"\n          [preselect]=\"false\"\n          [bbDynamicAriaAttribute]=\"{\n            select_payment_option__error: control?.touched && control?.invalid\n          }\"\n          [prependInputId]=\"false\"\n          data-role=\"payment-option-radio-group\"\n          inputSelector=\".bb-input-radio-group\"\n          #inputEl\n        >\n          <bb-input-radio-ui\n            *ngFor=\"let option of paymentOptions\"\n            [labelTemplate]=\"labelTemplate\"\n            [labelTemplateContext]=\"option\"\n            [value]=\"getValue(option)\"\n            [attr.data-role]=\"getValue(option)\"\n          ></bb-input-radio-ui>\n        </bb-input-radio-group-ui>\n\n        <bb-input-validation-message-ui\n          data-role=\"input-error\"\n          role=\"alert\"\n          *ngIf=\"control\"\n          [showErrors]=\"control?.touched && control?.invalid\"\n        >\n          <ng-container *ngIf=\"control.errors && control.errors['required']\">\n            <span id=\"select_payment_option__error\" data-role=\"required-error\">\n              <ng-container i18n\n                >Please choose a payment delivery option</ng-container\n              >\n            </span>\n          </ng-container>\n        </bb-input-validation-message-ui>\n      </div>\n    </div>\n  </ng-container>\n</ng-container>\n\n<ng-template #labelTemplate let-context=\"labelTemplateContext\">\n  <div class=\"row bb-select-payment-option__label\">\n    <div class=\"col-6\">\n      <div>\n        <span>{{context?.name}}</span>\n        <span *ngIf=\"context.showHelperText\">\n          ({ context.instructionPriority, select, HIGH {Urgent} NORM {Standard}\n          })\n        </span>\n      </div>\n      <div\n        class=\"bb-text-support font-weight-normal bb-subtitle\"\n        *ngIf=\"context?.executionTimeFrame\"\n      >\n        <ng-container *ngIf=\"!context?.hasMin && context?.hasMax\" i18n>\n          Delivered {context.executionTimeFrame.max, plural, =0\n          {{context.executionTimeFrame.unit, select, HOUR {instantly}\n          CALENDAR_DAY {same day} BUSINESS_DAY { same business day}}} =1\n          {{context.executionTimeFrame.unit, select, HOUR {within 1 hour}\n          CALENDAR_DAY {within 1 day} BUSINESS_DAY {within 1 business day}}}\n          other {{context.executionTimeFrame.unit, select, HOUR {within\n          {{context.executionTimeFrame.max}} hours} CALENDAR_DAY {within\n          {{context.executionTimeFrame.max}} days} BUSINESS_DAY {within\n          {{context.executionTimeFrame.max}} business days}}}}\n        </ng-container>\n        <ng-container *ngIf=\"context?.hasMin && context?.hasMax\" i18n>\n          Delivered within\n          {{context.executionTimeFrame.min}}-{{context.executionTimeFrame.max}}\n          {context.executionTimeFrame.unit, select, HOUR {hours} CALENDAR_DAY\n          {days} BUSINESS_DAY {business days}}\n        </ng-container>\n        <ng-container *ngIf=\"context?.cutOffTime\" i18n>\n          if received before {{today + ' ' + context?.cutOffTime | date:\n          'HH:mm'}} Hrs\n        </ng-container>\n      </div>\n    </div>\n    <div\n      class=\"col-6 d-flex align-items-center bb-text-support font-weight-normal\"\n    >\n      <bb-icon-ui\n        class=\"bb-select-payment-option__icon\"\n        name=\"data-usage\"\n      ></bb-icon-ui>\n      <span data-role=\"transfer-fee\"\n        >{{context.transferFee.amount | currency:\n        context.transferFee.currencyCode: 'code'}}</span\n      >\n    </div>\n  </div>\n</ng-template>\n\n<bb-confirmation-dialog\n  [isOpen]=\"showConfirmOptionModal\"\n  (cancel)=\"cancelPaymentOption()\"\n  (confirm)=\"confirmPaymentOption()\"\n>\n  <h2\n    title\n    data-role=\"confirm-reset-beneficiary-modal-header\"\n    i18n=\"@@confirm-reset-beneficiary-modal-title\"\n  >\n    'Continue with '{{selectedPaymentOptionLabel}}'?'\n  </h2>\n  <span\n    body\n    i18n=\"@@confirm-reset-beneficiary-modal-content\"\n    data-role=\"confirm-reset-beneficiary-modal-message\"\n  >\n    Changes to beneficiary will be reset.\n  </span>\n  <span\n    confirmActionName\n    data-role=\"continue-action-btn\"\n    i18n=\"@@confirm-reset-beneficiary-modal-discard-btn\"\n  >\n    Continue\n  </span>\n  <span\n    cancelActionName\n    data-role=\"cancel-action-btn\"\n    i18n=\"@@confirm-reset-beneficiary-modal-cancel-btn\"\n  >\n    Cancel\n  </span>\n</bb-confirmation-dialog>\n", components: [{ type: i2__namespace$2.InputRadioGroupComponent, selector: "bb-input-radio-group-ui", inputs: ["horizontal", "preselect", "name", "verticalAlign"] }, { type: i2__namespace$2.InputRadioComponent, selector: "bb-input-radio-ui", inputs: ["labelTemplate", "labelTemplateContext", "value", "label", "aria-label", "aria-labelledby", "aria-describedby", "role", "aria-activedescendant", "aria-expanded", "aria-invalid", "aria-owns", "disabled"] }, { type: i3__namespace.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i2__namespace$3.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i1__namespace.ӨConfirmationDialogComponent, selector: "bb-confirmation-dialog", inputs: ["confirmButtonColor", "cancelButtonColor", "isOpen", "confirmActionPayload", "attachComment", "commentFieldLabel"], outputs: ["confirm", "cancel"] }], directives: [{ type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5__namespace.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5__namespace.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i5__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5__namespace.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: DynamicAriaAttributeDirective, selector: "[bbDynamicAriaAttribute]", inputs: ["bbDynamicAriaAttribute", "prependInputId", "inputSelector", "ariaAttributeName"] }, { type: i4__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "async": i4__namespace.AsyncPipe, "date": i4__namespace.DatePipe, "currency": i4__namespace.CurrencyPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordSelectPaymentOptionComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-select-payment-option',
                        templateUrl: './payord-select-payment-option.html',
                    }]
            }], ctorParameters: function () { return [{ type: VisibilityService }]; } });

    var PayordPaymentCostComponent = /** @class */ (function () {
        function PayordPaymentCostComponent() {
            this.defaultCurrency = 'USD';
            this.paymentCostInfo$ = new rxjs.BehaviorSubject(undefined);
            this.fromCurrency = '';
            this.exchangeRate = 0;
            this.instructionPriority = false;
            this.isTotalAmountDisplayed = true;
        }
        PayordPaymentCostComponent.prototype.ngOnInit = function () {
            this.fromCurrencyControl = this.group.get(i1.PaymentBaseFields.initiator + "." + i1.InitiatorFields.currency);
            this.amountControl = this.group.get(i1.PaymentBaseFields.remittanceInfo + "." + i1.RemittanceInfoFields.amountCurrencyGroup);
            this.instructionPriorityControl = this.group.get(i1.PaymentBaseFields.remittanceInfo + "." + i1.RemittanceInfoFields.urgent);
            this.transferFeeControl =
                this.group.get(i1.PaymentOptionFields.transferFee) ||
                    registerFormControl(this.group, i1.PaymentOptionFields.transferFee);
            this.chargeBearerControl =
                this.group.get(i1.PaymentOptionFields.chargeBearer) ||
                    registerFormControl(this.group, i1.PaymentOptionFields.chargeBearer);
            this.exchangeRateControl =
                this.group.get(i1.PaymentOptionFields.exchangeRate) ||
                    registerFormControl(this.group, i1.PaymentOptionFields.exchangeRate);
            this.paymentTypeNameControl = this.group.get(i1.PaymentOptionFields.paymentTypeName);
            this.listenChanges();
        };
        PayordPaymentCostComponent.prototype.getTotalCost = function (transferFee, calculatedAmount) {
            if (calculatedAmount === void 0) { calculatedAmount = 0; }
            var fee = new BigNumber__default["default"]((transferFee === null || transferFee === void 0 ? void 0 : transferFee.amount) || '0');
            var amount = new BigNumber__default["default"](calculatedAmount || this.amount.amount || '0');
            return amount.plus(fee).toString();
        };
        PayordPaymentCostComponent.prototype.ngOnDestroy = function () {
            if (this.subscription) {
                this.subscription.unsubscribe();
            }
        };
        PayordPaymentCostComponent.prototype.hasForexInfo = function (fromCurrency, toCurrency, exchangeRate) {
            if (fromCurrency === void 0) { fromCurrency = ''; }
            if (toCurrency === void 0) { toCurrency = ''; }
            if (exchangeRate === void 0) { exchangeRate = 0; }
            return (!!fromCurrency &&
                !!toCurrency &&
                fromCurrency !== toCurrency &&
                exchangeRate !== 0);
        };
        PayordPaymentCostComponent.prototype.listenChanges = function () {
            var _this = this;
            if (this.amountControl &&
                this.fromCurrencyControl &&
                this.instructionPriorityControl) {
                this.subscription = rxjs.combineLatest([
                    this.fromCurrencyControl.valueChanges.pipe(operators.startWith(this.fromCurrencyControl.value), operators.distinctUntilChanged()),
                    this.amountControl.valueChanges.pipe(operators.startWith(this.amountControl.value), operators.distinctUntilChanged()),
                    this.transferFeeControl.valueChanges.pipe(operators.startWith(this.transferFeeControl.value), operators.distinctUntilChanged()),
                    this.chargeBearerControl.valueChanges.pipe(operators.startWith(this.chargeBearerControl.value), operators.distinctUntilChanged()),
                    this.exchangeRateControl.valueChanges.pipe(operators.startWith(this.exchangeRateControl.value), operators.distinctUntilChanged()),
                    this.instructionPriorityControl.valueChanges.pipe(operators.startWith(this.instructionPriorityControl.value), operators.distinctUntilChanged()),
                ]).subscribe(function (_b) {
                    var _c = __read(_b, 6), fromCurrency = _c[0], amount = _c[1], transferFee = _c[2], chargeBearer = _c[3], exchangeRate = _c[4], instructionPriority = _c[5];
                    var _a;
                    _this.fromCurrency = fromCurrency;
                    _this.amount = amount;
                    _this.exchangeRate = exchangeRate;
                    _this.instructionPriority = instructionPriority;
                    _this.isTotalAmountDisplayed =
                        !!_this.exchangeRate || _this.fromCurrency === _this.amount.currency;
                    var fee = Object.assign({}, transferFee);
                    if (chargeBearer === i1.ChargeBearer.BEN) {
                        // If chargebearer is beneficiary then set transfer fee to 0
                        fee.amount = '0';
                    }
                    if (chargeBearer && !((_a = _this.options) === null || _a === void 0 ? void 0 : _a.isTemplateMode)) {
                        var _amountByRate = new BigNumber__default["default"](amount.amount || '0').dividedBy(exchangeRate);
                        var calculatedAmount = !!exchangeRate
                            ? _amountByRate.toString()
                            : amount.amount;
                        _this.paymentCostInfo$.next({
                            transferFee: fee,
                            hasForexInfo: _this.hasForexInfo(fromCurrency, amount.currency, exchangeRate),
                            rate: exchangeRate,
                            fromCurrency: _this.fromCurrency,
                            toCurrency: _this.amount.currency,
                            calculatedAmount: calculatedAmount,
                        });
                    }
                });
            }
        };
        return PayordPaymentCostComponent;
    }());
    /** @nocollapse */ PayordPaymentCostComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordPaymentCostComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ PayordPaymentCostComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordPaymentCostComponent, selector: "bb-payment-cost", ngImport: i0__namespace, template: "<section\n  class=\"bb-block--md col-12 bb-dynamic-input\"\n  *ngIf=\"paymentCostInfo$ | async as paymentCostInfo\"\n>\n  <ng-container *ngIf=\"paymentCostInfo.transferFee?.amount\">\n    <ng-container\n      *ngIf=\"paymentCostInfo?.hasForexInfo; else sameCurrencyTransferTmpl\"\n    >\n      <hr />\n      <div\n        class=\"bb-heading-3 bb-block bb-block--md d-flex justify-content-between\"\n      >\n        <div i18n=\"@@bb-dynamic-input-payment-cost.transfer-amount.title\">\n          Transfer amount\n        </div>\n        <bb-amount-ui\n          data-role=\"transfer-amount\"\n          [mapCurrency]=\"false\"\n          [amount]=\"amount.amount || '0'\"\n          [currency]=\"amount.currency || defaultCurrency\"\n        >\n        </bb-amount-ui>\n      </div>\n\n      <div\n        [hidden]=\"!paymentCostInfo.calculatedAmount\"\n        class=\"bb-block bb-block--md d-flex justify-content-between\"\n      >\n        <div i18n=\"@@bb-dynamic-amount-you-pay-label.title\">\n          Amount you pay\n          <span data-role=\"exchange-rate\"\n            >(1 {{ paymentCostInfo.fromCurrency }} &asymp;\n            {{ paymentCostInfo.rate }} {{ paymentCostInfo.toCurrency }})</span\n          >\n        </div>\n        <div data-role=\"amount-you-pay\">\n          &asymp;\n          <bb-amount-ui\n            [mapCurrency]=\"false\"\n            [amount]=\"paymentCostInfo?.calculatedAmount || '0'\"\n            [currency]=\"paymentCostInfo?.fromCurrency\"\n          ></bb-amount-ui>\n        </div>\n      </div>\n      <div class=\"bb-block bb-block--md d-flex justify-content-between\">\n        <div\n          *ngIf=\"paymentTypeNameControl?.value\"\n          i18n=\"@@bb-dynamic-input-payment-cost.fee.title\"\n        >\n          Transfer fee - {{ paymentTypeNameControl?.value }}\n        </div>\n        <bb-amount-ui\n          data-role=\"payment-fee\"\n          [mapCurrency]=\"false\"\n          [amount]=\"paymentCostInfo.transferFee?.amount || '0'\"\n          [currency]=\"paymentCostInfo.transferFee?.currencyCode\"\n        >\n        </bb-amount-ui>\n      </div>\n      <div\n        *ngIf=\"isTotalAmountDisplayed\"\n        class=\"bb-text-bold bb-block bb-block--md d-flex justify-content-between\"\n      >\n        <div i18n=\"@@bb-dynamic-input-payment-cost.total.title\">Total</div>\n        <div>\n          &asymp;\n          <bb-amount-ui\n            data-role=\"total-amount-to-pay\"\n            [mapCurrency]=\"false\"\n            [amount]=\"\n              getTotalCost(\n                paymentCostInfo.transferFee,\n                paymentCostInfo.calculatedAmount\n              )\n            \"\n            [currency]=\"paymentCostInfo.fromCurrency\"\n          >\n          </bb-amount-ui>\n        </div>\n      </div>\n    </ng-container>\n\n    <ng-template #sameCurrencyTransferTmpl>\n      <div>\n        <hr />\n        <div\n          class=\"bb-heading-3 bb-block bb-block--md d-flex justify-content-between\"\n        >\n          <div i18n=\"@@bb-dynamic-input-payment-cost.amount.title\">Amount</div>\n          <bb-amount-ui\n            data-role=\"amount-you-pay\"\n            [mapCurrency]=\"false\"\n            [amount]=\"amount.amount || '0'\"\n            [currency]=\"amount.currency || defaultCurrency\"\n          ></bb-amount-ui>\n        </div>\n        <div class=\"bb-block bb-block--md d-flex justify-content-between\">\n          <div\n            *ngIf=\"paymentTypeNameControl?.value\"\n            i18n=\"@@bb-dynamic-input-payment-cost.fee.title\"\n          >\n            Transfer fee - {{ paymentTypeNameControl?.value }}\n          </div>\n          <bb-amount-ui\n            data-role=\"payment-fee\"\n            [mapCurrency]=\"false\"\n            [amount]=\"paymentCostInfo.transferFee?.amount || '0'\"\n            [currency]=\"paymentCostInfo.transferFee?.currencyCode\"\n          >\n          </bb-amount-ui>\n        </div>\n        <div\n          *ngIf=\"isTotalAmountDisplayed\"\n          class=\"bb-text-bold bb-block bb-block--md d-flex justify-content-between\"\n        >\n          <div i18n=\"@@bb-dynamic-input-payment-cost.total.title\">Total</div>\n          <bb-amount-ui\n            data-role=\"total-amount\"\n            [mapCurrency]=\"false\"\n            [amount]=\"getTotalCost(paymentCostInfo.transferFee)\"\n            [currency]=\"amount.currency || defaultCurrency\"\n          >\n          </bb-amount-ui>\n        </div>\n      </div>\n    </ng-template>\n  </ng-container>\n</section>\n", components: [{ type: i5__namespace$2.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }], directives: [{ type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i4__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordPaymentCostComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-payment-cost',
                        templateUrl: './payment-cost.component.html',
                    }]
            }] });

    function getRouteParams(route) {
        var e_1, _a;
        if (!route) {
            return {};
        }
        var params = route.snapshot.params;
        params = Object.assign(Object.assign({}, route.snapshot.queryParams), params);
        if (route.children) {
            try {
                for (var _b = __values(route.children), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var r = _c.value;
                    params = Object.assign(Object.assign({}, getRouteParams(r)), params);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        return params;
    }

    var getDbsValue = function (dbsObj, keys) {
        var value = keys
            .split('.')
            .reduce(function (obj, key) { var _a; return (_a = obj) === null || _a === void 0 ? void 0 : _a[key]; }, dbsObj);
        return ((['string', 'number'].includes(typeof value) ? value : undefined));
    };
    var PayordInternalAccountSelectorComponent = /** @class */ (function (_super) {
        __extends(PayordInternalAccountSelectorComponent, _super);
        function PayordInternalAccountSelectorComponent(renderer, cd, activatedRoute, visibilityService) {
            var _this = _super.call(this, visibilityService) || this;
            _this.renderer = renderer;
            _this.cd = cd;
            _this.activatedRoute = activatedRoute;
            _this.destroy$ = new rxjs.Subject();
            _this.connectedAccounts$ = rxjs.of([]);
            _this.productKinds = i1.ProductKinds;
            /**
             * Id to associate messages to form field for accessibility
             */
            _this.validationId = '';
            /**
             * Account number fromat used to mask the account numbers in the selector
             */
            _this.accountFormat = {
                length: 0,
                maskRange: [0, 0],
                segments: 0,
            };
            /**
             * Boolean to show if account selector tab is touched
             */
            _this.touched = false;
            return _this;
        }
        Object.defineProperty(PayordInternalAccountSelectorComponent.prototype, "peerFieldName", {
            /**
             * Return other account selector field name
             */
            get: function () {
                return this.config.name === i1.InitiatorFields.initiatorAccountGroup
                    ? i1.PaymentBaseFields.counterparty
                    : i1.PaymentBaseFields.initiator;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PayordInternalAccountSelectorComponent.prototype, "isDropdownOpen", {
            /**
             * Flag to show if dropdown is open
             */
            get: function () {
                var _a, _b;
                return !!((_b = (_a = this.productSelector) === null || _a === void 0 ? void 0 : _a.bbDropdown) === null || _b === void 0 ? void 0 : _b.isOpen());
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PayordInternalAccountSelectorComponent.prototype, "disabledProductKinds", {
            /**
             * Flag to show which account kinds should not be rendered in order to avoid unwanted matches between two account
             */
            get: function () {
                var _a, _b;
                var combinations = ((_a = this.options.paymentTypeOptions) === null || _a === void 0 ? void 0 : _a.disabledCombinations) || [];
                var isInitiator = this.config.name === i1.InitiatorFields.initiatorAccountGroup;
                var counterParty = (_b = this.disabledAccount) === null || _b === void 0 ? void 0 : _b.productKindName;
                var disabledProductKinds = combinations.filter(function (i) { return isInitiator ? i.to === counterParty : i.from === counterParty; });
                return disabledProductKinds.map(function (i) { return isInitiator ? i.from : i.to; });
            },
            enumerable: false,
            configurable: true
        });
        PayordInternalAccountSelectorComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.validationId = "account-selector-" + this.config.name + "-error-message";
            this.form = (this.group.parent ? this.group.parent : null);
            this.registerFields();
            this.control = this.group.controls['name'];
            var _e = this.options, otherFilters = _e.otherFilters, connectedItems$ = _e.connectedItems$, items$ = _e.items$, productKinds = _e.productKinds, connectedAccounts = _e.connectedAccounts, preselect = _e.preselect;
            if (connectedAccounts) {
                this.connectedAccounts$ = connectedItems$.pipe(operators.take(1));
            }
            this.options.items$ = items$.pipe(operators.take(1), operators.map(function (accounts) { return _this.options.mapItems && (accounts === null || accounts === void 0 ? void 0 : accounts.length)
                ? _this.options.mapItems(accounts)
                : accounts; }), operators.map(function (accounts) { return _this.filterByProductKind(accounts, productKinds); }), operators.map(function (accounts) { return _this.filterByOtherProps(accounts, otherFilters); }), operators.map(function (accounts) { return accounts.map(_this.mapBalance.bind(_this)); }), operators.shareReplay(1));
            rxjs.combineLatest([
                this.options.items$.pipe(operators.take(1), operators.catchError(function () { return rxjs.of([]); })),
                this.connectedAccounts$.pipe(operators.take(1), operators.catchError(function () { return rxjs.of([]); })),
            ]).subscribe(function (_e) {
                var _f = __read(_e, 2), internals = _f[0], _g = _f[1], externals = _g === void 0 ? [] : _g;
                var _a;
                var accounts = __spreadArray(__spreadArray([], __read(internals)), __read(externals));
                if (!_this.group.value['id']) {
                    var selection = void 0;
                    var _h = getRouteParams(_this.activatedRoute.root), transferFrom = _h.transferFrom, transferTo = _h.transferTo;
                    var configName = _this.config.name;
                    var idParam_1 = configName === i1.InitiatorFields.initiatorAccountGroup
                        ? transferFrom
                        : transferTo;
                    selection = idParam_1 && accounts.find(function (acc) { return acc.id === idParam_1; });
                    if (preselect && !selection && transferTo !== ((_a = accounts[0]) === null || _a === void 0 ? void 0 : _a.id)) {
                        selection = accounts[0];
                    }
                    if (selection) {
                        _this.selectItem(selection);
                    }
                }
                _this.setAccountInEditMode(accounts, _this.group, 'id');
            });
            this.setDisabledAccount(this.form);
            triggerHook(i1.PaymentFormFieldHooks.onInit, this);
        };
        PayordInternalAccountSelectorComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            if (this.productSelector) {
                var nativeElement = this.productSelector.dropdownToggle.nativeElement;
                rxjs.fromEvent(nativeElement, 'blur')
                    .pipe(operators.take(1))
                    .subscribe(function () { return _this.setTouched(); });
                //Here to fix Safari focus issue https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#Clicking_and_focus
                rxjs.fromEvent(nativeElement, 'click')
                    .pipe(operators.take(1))
                    .subscribe(function (e) { return e.currentTarget.focus(); });
                // Fix accessibility issue (MAINT-10313)
                this.renderer.setAttribute(nativeElement, 'aria-describedby', this.validationId);
            }
        };
        /**
         * Filtering accounts by product kind
         */
        PayordInternalAccountSelectorComponent.prototype.filterByProductKind = function (accounts, productKinds) {
            if (accounts === void 0) { accounts = []; }
            if (productKinds === void 0) { productKinds = []; }
            return accounts === null || accounts === void 0 ? void 0 : accounts.filter(function (account) { return productKinds.length
                ? productKinds.some(function (i) { return i.productKind === account.productKindName; })
                : true; });
        };
        /**
         * Filtering accounts by other filter properties
         */
        PayordInternalAccountSelectorComponent.prototype.filterByOtherProps = function (accounts, otherFilters) {
            if (accounts === void 0) { accounts = []; }
            if (otherFilters === void 0) { otherFilters = []; }
            return accounts.filter(function (account) { return otherFilters.length
                ? otherFilters.every(function (_e) {
                    var key = _e.key, value = _e.value;
                    var dbsValue = getDbsValue(account === null || account === void 0 ? void 0 : account.defaultRecord, key);
                    return value.some(function (v) { return v === dbsValue; });
                })
                : true; });
        };
        /**
         * Disable account which is already selected at the counter party selector
         */
        PayordInternalAccountSelectorComponent.prototype.setDisabledAccount = function (form) {
            var _this = this;
            if (form === null || form === void 0 ? void 0 : form.get(this.peerFieldName)) {
                this.disabledAccount = form.get(this.peerFieldName).value;
                form.get(this.peerFieldName).valueChanges
                    .pipe(operators.takeUntil(this.destroy$))
                    .subscribe(function (acc) {
                    _this.disabledAccount = acc;
                    _this.setPaymentConfig(acc);
                });
            }
        };
        PayordInternalAccountSelectorComponent.prototype.setPaymentConfig = function (acc) {
            if (this.config.name === i1.CounterPartyFields.counterPartyAccountGroup &&
                this.form.get(i1.PaymentBaseFields.counterparty)) {
                var role = acc.productKindName === i1.ProductKinds.connectedAccounts
                    ? 'DEBTOR'
                    : 'CREDITOR';
                this.form.get(i1.PaymentBaseFields.counterparty).patchValue({
                    role: role,
                });
            }
        };
        PayordInternalAccountSelectorComponent.prototype.setTouched = function (isTouched) {
            if (isTouched === void 0) { isTouched = true; }
            this.touched = isTouched;
            if (isTouched) {
                this.group.markAllAsTouched();
            }
            this.cd.detectChanges();
        };
        /**
         * Return paymentType regarding to from-to account combination
         */
        PayordInternalAccountSelectorComponent.prototype.pickPaymentType = function () {
            var _a, _b;
            var initiatorKind = (_a = this.form.value.initiator) === null || _a === void 0 ? void 0 : _a.productKindName;
            var counterPartyKind = (_b = this.form.value.counterparty) === null || _b === void 0 ? void 0 : _b.productKindName;
            var paymentTypes = (this.options.paymentTypeOptions || {}).paymentTypes;
            var connectedAccounts = i1.ProductKinds.connectedAccounts;
            if (paymentTypes && initiatorKind && counterPartyKind) {
                return counterPartyKind === connectedAccounts ||
                    initiatorKind === connectedAccounts
                    ? paymentTypes.external
                    : paymentTypes.internal;
            }
            return;
        };
        PayordInternalAccountSelectorComponent.prototype.setAccountInEditMode = function (accounts, group, key) {
            if (accounts && (group === null || group === void 0 ? void 0 : group.value[key])) {
                var account = accounts.filter(function (a) { return a.id === group.value[key]; });
                this.selectItem(account[0]);
            }
        };
        PayordInternalAccountSelectorComponent.prototype.selectAccountGroup = function () {
            var _e;
            var fieldsGroup = this.config.name === i1.InitiatorFields.initiatorAccountGroup
                ? i1.InitiatorFields
                : i1.CounterPartyFields;
            return _e = {},
                _e[fieldsGroup.id] = [i5.Validators.required],
                _e[fieldsGroup.name] = [i5.Validators.required],
                _e[fieldsGroup.accountNumber] = [i5.Validators.required],
                _e[i1.CounterPartyFields.role] = [i5.Validators.required],
                _e.currency = [],
                _e.schemeName = [i5.Validators.required],
                _e.productKindName = [i5.Validators.required],
                _e.accountData = [],
                _e;
        };
        PayordInternalAccountSelectorComponent.prototype.registerFields = function () {
            var accountGroup = this.selectAccountGroup();
            for (var key in accountGroup) {
                if (accountGroup.hasOwnProperty(key)) {
                    registerFormControl(this.group, key, accountGroup[key], [], '');
                }
            }
        };
        /**
         * Set balance and balance label to account regarding to selected balance type in config
         */
        PayordInternalAccountSelectorComponent.prototype.mapBalance = function (account) {
            var _a, _b, _c, _d;
            var defaultBalanceType = i1.AccountBalances.current;
            var productKindConfig = (_b = (_a = this.options) === null || _a === void 0 ? void 0 : _a.productKinds) === null || _b === void 0 ? void 0 : _b.find(function (config) { return config.productKind === account.productKindName; });
            var dbsProperty = ((_c = productKindConfig === null || productKindConfig === void 0 ? void 0 : productKindConfig.balance) === null || _c === void 0 ? void 0 : _c.apiField)
                ? productKindConfig.balance.apiField
                : defaultBalanceType;
            var balance = getDbsValue(account === null || account === void 0 ? void 0 : account.defaultRecord, dbsProperty);
            return Object.assign(Object.assign({}, account), { balance: balance, balanceLabel: (_d = productKindConfig === null || productKindConfig === void 0 ? void 0 : productKindConfig.balance) === null || _d === void 0 ? void 0 : _d.label });
        };
        PayordInternalAccountSelectorComponent.prototype.ngOnDestroy = function () {
            triggerHook(i1.PaymentFormFieldHooks.onDestroy, this);
            this.destroy$.next();
            this.destroy$.complete();
        };
        PayordInternalAccountSelectorComponent.prototype.selectItem = function (account) {
            var _a;
            if (this.group && (account === null || account === void 0 ? void 0 : account.name)) {
                var productKindName = account.productKindName;
                var connectedAccounts = i1.ProductKinds.connectedAccounts;
                var isPeerConnectedAcc = ((_a = this.disabledAccount) === null || _a === void 0 ? void 0 : _a.productKindName) === connectedAccounts;
                var schemeName = productKindName === connectedAccounts ? 'EXTERNAL_ID' : 'ID';
                var role = this.config.name === i1.CounterPartyFields.counterPartyAccountGroup &&
                    isPeerConnectedAcc
                    ? 'DEBTOR'
                    : 'CREDITOR';
                this.group.patchValue({
                    id: account.id,
                    name: account.name,
                    accountNumber: account.accountNumber,
                    currency: account.currency,
                    schemeName: schemeName,
                    productKindName: account.productKindName,
                    role: role,
                    accountData: account,
                });
                this.selectedAccount = Object.assign({}, account);
            }
            this.toggleDependants();
            var paymentType = this.pickPaymentType();
            if (paymentType) {
                this.form.patchValue({ paymentType: paymentType });
            }
            this.group.markAsDirty();
            this.cd.detectChanges();
        };
        return PayordInternalAccountSelectorComponent;
    }(ActivatableFormField));
    /** @nocollapse */ PayordInternalAccountSelectorComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordInternalAccountSelectorComponent, deps: [{ token: i0__namespace.Renderer2 }, { token: i0__namespace.ChangeDetectorRef }, { token: i1__namespace$9.ActivatedRoute }, { token: VisibilityService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ PayordInternalAccountSelectorComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordInternalAccountSelectorComponent, selector: "bb-payord-internal-account-selector", viewQueries: [{ propertyName: "productSelector", first: true, predicate: ["productSelector"], descendants: true }], usesInheritance: true, ngImport: i0__namespace, template: "<div\n  class=\"form-group bb-dynamic-input\"\n  [ngClass]=\"options?.cssClasses\"\n  *ngIf=\"!config?.hidden\"\n>\n  <div *ngIf=\"options?.label\" class=\"bb-label bb-block bb-block--lg\">\n    {{ options?.label }}\n  </div>\n  <section class=\"payment-from\" [formGroup]=\"group\">\n    <label class=\"bb-form-field\">\n      <bb-product-selector-ui\n        [autoClose]=\"true\"\n        [class.bb-product-selector--invalid-border]=\"\n          touched && group.invalid && !isDropdownOpen\n        \"\n        #productSelector\n      >\n        <ng-container bbDropdownToggle>\n          <div\n            *ngIf=\"selectedAccount\"\n            data-role=\"product-selector-selected-product\"\n          >\n            <bb-product-item-basic-account-ui\n              [title]=\"selectedAccount?.name\"\n              [productNumber]=\"selectedAccount?.accountNumber\"\n              [amount]=\"selectedAccount.balance\"\n              [currency]=\"selectedAccount.currency\"\n              [productNumberFormat]=\"\n                options?.productNumberFormat || accountFormat\n              \"\n              [highlight]=\"options?.highlight\"\n              [showCurrencySymbol]=\"options?.showCurrencySymbol !== false\"\n              [active]=\"false\"\n              [balanceLabel]=\"selectedAccount?.balanceLabel\"\n              i18n-balanceLabel=\"\n                Available balance\n                label@@payord-internal-account-selector.amount.available\"\n            ></bb-product-item-basic-account-ui>\n          </div>\n          <div *ngIf=\"!selectedAccount\" class=\"bb-stack\">\n            <span\n              data-role=\"item-empty-state\"\n              class=\"bb-text-support bb-product-selector__placeholder\"\n            >\n              {{ options?.placeholder }}\n            </span>\n          </div>\n        </ng-container>\n        <ng-container bbDropdownMenu>\n          <ng-container\n            *ngIf=\"{\n              internal: options?.items$ | async,\n              external: connectedAccounts$ | async\n            } as accounts\"\n          >\n            <ng-container\n              *ngIf=\"\n                accounts.internal?.length || accounts.external?.length;\n                else notFound\n              \"\n            >\n              <ng-container\n                *ngFor=\"let item of accounts.internal; let i = index\"\n              >\n                <button\n                  *ngIf=\"!disabledProductKinds.includes(item.productKindName)\"\n                  (click)=\"selectItem(item)\"\n                  [disabled]=\"\n                    item.accountNumber === disabledAccount?.accountNumber\n                  \"\n                  bbButton\n                  color=\"unstyled\"\n                  class=\"bb-product-selector__dropdown-item\"\n                  [ngClass]=\"{\n                    selected: item.id === selectedAccount?.id,\n                    'bb-text-support':\n                      item.accountNumber === disabledAccount?.accountNumber\n                  }\"\n                >\n                  <bb-product-item-basic-account-ui\n                    [title]=\"item.name\"\n                    [amount]=\"item.balance\"\n                    [productNumber]=\"item.accountNumber\"\n                    [currency]=\"item.currency\"\n                    [highlight]=\"options?.highlight\"\n                    [active]=\"false\"\n                    [class.bb-dropdown-multi-select--disabled]=\"\n                      item.accountNumber === disabledAccount?.accountNumber\n                    \"\n                    [productNumberFormat]=\"\n                      options?.productNumberFormat || accountFormat\n                    \"\n                    [showCurrencySymbol]=\"options?.showCurrencySymbol !== false\"\n                    [balanceLabel]=\"item?.balanceLabel\"\n                    i18n-balanceLabel=\"\n                      Available balance\n                      label@@payord-internal-account-selector.amount.available\"\n                  ></bb-product-item-basic-account-ui>\n                </button>\n              </ng-container>\n              <ng-container\n                *ngIf=\"\n                  disabledAccount?.productKindName !==\n                  productKinds.connectedAccounts\n                \"\n              >\n                <h4\n                  class=\"bb-subheader bb-text-support bb-block bb-block--no-margin bb-inline-stack bb-internal-account-selector__subheader\"\n                  *ngIf=\"\n                    accounts.external?.length &&\n                    options?.connectedAccountsSubHeader as subheader\n                  \"\n                  tabIndex=\"-1\"\n                >\n                  <bb-icon-ui\n                    name=\"insert-link\"\n                    cropped\n                    class=\"bb-inline-stack__item--spacing-sm\"\n                  ></bb-icon-ui>\n                  <span>{{ subheader }}</span>\n                </h4>\n                <button\n                  *ngFor=\"let item of accounts.external\"\n                  (click)=\"selectItem(item)\"\n                  [disabled]=\"\n                    item.accountNumber === disabledAccount?.accountNumber\n                  \"\n                  bbButton\n                  color=\"unstyled\"\n                  class=\"bb-product-selector__dropdown-item\"\n                  [ngClass]=\"{\n                    selected: item.id === selectedAccount?.id,\n                    'bb-text-support':\n                      item.accountNumber === disabledAccount?.accountNumber\n                  }\"\n                >\n                  <bb-product-item-basic-account-ui\n                    [title]=\"item.name\"\n                    [productNumber]=\"item.accountNumber\"\n                    [highlight]=\"options?.highlight\"\n                    [active]=\"false\"\n                    [class.bb-dropdown-multi-select--disabled]=\"\n                      item.accountNumber === disabledAccount?.accountNumber\n                    \"\n                    [productNumberFormat]=\"\n                      options?.productNumberFormat || accountFormat\n                    \"\n                    [showCurrencySymbol]=\"options?.showCurrencySymbol !== false\"\n                  ></bb-product-item-basic-account-ui>\n                </button>\n              </ng-container>\n            </ng-container>\n          </ng-container>\n          <ng-template #notFound>\n            <bb-empty-state-ui\n              title=\"No items found\"\n              [showIcon]=\"false\"\n            ></bb-empty-state-ui>\n          </ng-template>\n        </ng-container>\n      </bb-product-selector-ui>\n    </label>\n\n    <ng-container *ngIf=\"!selectedAccount\">\n      <bb-payord-validation-message\n        [id]=\"validationId\"\n        [control]=\"group?.controls['name']\"\n        [validationMessages]=\"options?.validationMessages\"\n        [label]=\"options?.label\"\n      ></bb-payord-validation-message>\n    </ng-container>\n  </section>\n</div>\n", components: [{ type: i3__namespace$1.ProductSelectorComponent, selector: "bb-product-selector-ui", inputs: ["autoClose", "position", "container"] }, { type: i4__namespace$2.ProductItemBasicAccountComponent, selector: "bb-product-item-basic-account-ui", inputs: ["title", "productNumber", "productNumberFormat", "currency", "showCurrencySymbol", "amount", "highlight", "productDetailsInfo", "active", "favorite", "favoriteIconColor", "selected", "type", "status", "balanceLabel", "bankBranchCode"] }, { type: i2__namespace$3.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i6__namespace.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }, { type: ValidationMessageComponent, selector: "bb-payord-validation-message", inputs: ["control", "validationMessages", "label", "id", "hideGeneric"] }], directives: [{ type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i5__namespace.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5__namespace.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i7__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "async": i4__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordInternalAccountSelectorComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-payord-internal-account-selector',
                        templateUrl: 'payord-internal-account-selector.component.html',
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.Renderer2 }, { type: i0__namespace.ChangeDetectorRef }, { type: i1__namespace$9.ActivatedRoute }, { type: VisibilityService }]; }, propDecorators: { productSelector: [{
                    type: i0.ViewChild,
                    args: ['productSelector']
                }] } });

    var PayordCompactAmountComponent = /** @class */ (function () {
        function PayordCompactAmountComponent() {
            var _g;
            this.remittanceInfoFields = i1.RemittanceInfoFields;
            this.initialAmount = (_g = {},
                _g[i1.RemittanceInfoFields.amount] = '',
                _g[i1.RemittanceInfoFields.currency] = '',
                _g);
            this.id = new Date().getTime();
        }
        PayordCompactAmountComponent.prototype.ngOnInit = function () {
            var _g;
            var _this = this;
            var _a, _b, _c, _d, _e, _f;
            this.amountGroup = registerFormGroup(this.group, this.config.name, (_g = {},
                _g[i1.RemittanceInfoFields.amount] = [
                    ((_a = this.options.defaultValue) === null || _a === void 0 ? void 0 : _a.amount) || this.initialAmount.amount,
                ],
                _g[i1.RemittanceInfoFields.currency] = [
                    ((_b = this.options.defaultValue) === null || _b === void 0 ? void 0 : _b.currency) || this.initialAmount.currency,
                ],
                _g), [i5.Validators.required, i1.amountValidator], this.options.asyncValidators);
            this.fromAccountProduct$ = (_d = ((_c = this.group.parent) === null || _c === void 0 ? void 0 : _c.get(i1.PaymentBaseFields.initiator))) === null || _d === void 0 ? void 0 : _d.valueChanges.pipe(operators.startWith((_f = (_e = this.group.parent) === null || _e === void 0 ? void 0 : _e.get(i1.PaymentBaseFields.initiator)) === null || _f === void 0 ? void 0 : _f.value), operators.tap(function (initiator) {
                var _a;
                return (_a = _this.amountGroup
                    .get(i1.RemittanceInfoFields.currency)) === null || _a === void 0 ? void 0 : _a.patchValue((initiator === null || initiator === void 0 ? void 0 : initiator.currency) || _this.options.currency);
            }));
            triggerHook(i1.PaymentFormFieldHooks.onInit, this);
        };
        PayordCompactAmountComponent.prototype.ngOnDestroy = function () {
            triggerHook(i1.PaymentFormFieldHooks.onDestroy, this);
        };
        return PayordCompactAmountComponent;
    }());
    /** @nocollapse */ PayordCompactAmountComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordCompactAmountComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ PayordCompactAmountComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordCompactAmountComponent, selector: "bb-payord-compact-amount-ui", ngImport: i0__namespace, template: "<section\n  class=\"form-group bb-dynamic-input\"\n  [formGroup]=\"amountGroup\"\n  [ngClass]=\"options?.cssClasses\"\n  *ngIf=\"!config?.hidden\"\n  [class.was-validated]=\"\n    group.get(config.name)?.invalid && group.get(config.name)?.touched\n  \"\n>\n  <label [attr.for]=\"'bb-compact-amount-' + id\" *ngIf=\"options?.label\">{{\n    options?.label\n  }}</label>\n  <div class=\"position-relative\">\n    <bb-amount-input-ui\n      [id]=\"'bb-compact-amount-' + id\"\n      [formControlName]=\"remittanceInfoFields.amount\"\n      [mapCurrency]=\"options?.showCurrencySymbol !== false\"\n      [currency]=\"(fromAccountProduct$ | async)?.currency || options?.currency\"\n      [placeholder]=\"options?.placeholder || '0.00'\"\n      [required]=\"true\"\n      [wrapperClasses]=\"\n        options.wrapperClasses || 'bb-amount-input__field--large'\n      \"\n      [autoDecimal]=\"options.autoDecimal\"\n      [maxLength]=\"options?.maxLength\"\n      [aria-describedby]=\"'compact-amount-error-message-' + id\"\n    ></bb-amount-input-ui>\n  </div>\n  <bb-payord-validation-message\n    [id]=\"'compact-amount-error-message-' + id\"\n    [control]=\"group.get(config.name)\"\n    [validationMessages]=\"options?.validationMessages\"\n    [label]=\"options?.label || 'Amount'\"\n  ></bb-payord-validation-message>\n</section>\n", components: [{ type: i1__namespace$a.AmountInputComponent, selector: "bb-amount-input-ui", inputs: ["placeholder", "maxLength", "wrapperClasses", "mapCurrency", "currency", "autoDecimal"] }, { type: ValidationMessageComponent, selector: "bb-payord-validation-message", inputs: ["control", "validationMessages", "label", "id", "hideGeneric"] }], directives: [{ type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5__namespace.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5__namespace.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i5__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5__namespace.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i5__namespace.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }], pipes: { "async": i4__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordCompactAmountComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-payord-compact-amount-ui',
                        templateUrl: './payord-compact-amount.component.html',
                    }]
            }] });

    var PayordButtonGroupComponent = /** @class */ (function () {
        function PayordButtonGroupComponent(modalService) {
            this.modalService = modalService;
            this.confirmModalClose$ = new rxjs.BehaviorSubject(false);
            this.paymentMode = i1.PaymentMode;
        }
        PayordButtonGroupComponent.prototype.ngOnInit = function () {
            var _a;
            this.initialFormValue = (_a = this.group) === null || _a === void 0 ? void 0 : _a.value;
        };
        PayordButtonGroupComponent.prototype.onCancel = function () {
            if (isTemplateFormDirty(this.group.value, this.initialFormValue)) {
                this.confirmModalClose$.next(true);
            }
            else {
                this.closeModal();
            }
        };
        PayordButtonGroupComponent.prototype.closeModal = function () {
            var _a;
            this.confirmModalClose$.next(false);
            (_a = this.modalService) === null || _a === void 0 ? void 0 : _a.closeModal();
        };
        return PayordButtonGroupComponent;
    }());
    /** @nocollapse */ PayordButtonGroupComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordButtonGroupComponent, deps: [{ token: i1__namespace.RoutableModalService, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ PayordButtonGroupComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordButtonGroupComponent, selector: "bb-payord-button-group", ngImport: i0__namespace, template: "<div\n  class=\"btn-container bb-dynamic-input bb-button-bar\"\n  [ngClass]=\"{ 'bb-button-bar--reverse': !options?.isModalView }\"\n>\n  <bb-load-button-ui\n    type=\"submit\"\n    class=\"bb-button-bar__button\"\n    [isLoading]=\"options?.submitting$ | async\"\n  >\n    <ng-container\n      *ngIf=\"!options?.isTemplateMode\"\n      i18n=\"@@dynamic-form-field-button-group.continue.label\"\n      >Continue</ng-container\n    >\n    <ng-container\n      *ngIf=\"options?.isTemplateMode\"\n      i18n=\"@@dynamic-form-field-button-group.save.label\"\n      >Save</ng-container\n    >\n  </bb-load-button-ui>\n  <button\n    *ngIf=\"\n      options?.isModalView || options?.paymentMode === paymentMode.COPY_PAYMENT\n    \"\n    bbButton\n    class=\"bb-button-bar__button\"\n    color=\"secondary\"\n    data-role=\"cancel-button\"\n    (click)=\"onCancel()\"\n    [disabled]=\"options?.submitting$ | async\"\n    i18n=\"@@dynamic-form-field-button-group-cancel-label\"\n  >\n    Cancel\n  </button>\n  <button\n    *ngIf=\"\n      options?.paymentMode !== paymentMode.EDIT_TEMPLATE &&\n      options?.paymentMode !== paymentMode.COPY_PAYMENT\n    \"\n    class=\"bb-button-bar__button bb-button-bar__button--across\"\n    bbButton\n    type=\"button\"\n    color=\"link\"\n    (click)=\"options?.reset()\"\n    [disabled]=\"options?.submitting$ | async\"\n  >\n    <ng-container i18n=\"@@dynamic-form-field-button-group.clear.label\"\n      >Clear all fields</ng-container\n    >\n  </button>\n</div>\n\n<bb-modal-ui\n  [isOpen]=\"confirmModalClose$.value\"\n  (cancel)=\"confirmModalClose$.next(false)\"\n  (confirm)=\"closeModal()\"\n  data-role=\"close-discard-modal-dialog\"\n>\n  <bb-modal-header-ui\n    title=\"Discard entered data?\"\n    i18n-title=\"omni-payment-template-discard-modal-title\"\n  ></bb-modal-header-ui>\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody>\n      <ng-container i18n=\"@@omni-payment-template-discard-modal-content\">\n        Are you sure to exit and discard all changes? Entered data will be lost.\n      </ng-container>\n    </ng-template>\n  </bb-modal-body-ui>\n\n  <bb-modal-footer-ui #modalFooterRef>\n    <ng-template bbCustomModalFooter>\n      <div class=\"bb-button-bar\">\n        <button\n          bbButton\n          color=\"danger\"\n          class=\"bb-button-bar__button\"\n          (click)=\"closeModal()\"\n          data-role=\"discard-action-btn\"\n          i18n=\"@@omni-payment-template-discard-modal-discard-btn\"\n        >\n          Discard\n        </button>\n\n        <button\n          bbButton\n          class=\"bb-button-bar__button\"\n          color=\"link\"\n          (click)=\"confirmModalClose$.next(false)\"\n          data-role=\"cancel-action-btn\"\n          i18n=\"@@omni-payment-template-discard-modal-cancel-btn\"\n        >\n          Cancel\n        </button>\n      </div>\n    </ng-template>\n  </bb-modal-footer-ui>\n</bb-modal-ui>\n", components: [{ type: i2__namespace$6.LoadButtonComponent, selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }, { type: i3__namespace$2.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i3__namespace$2.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i3__namespace$2.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: i3__namespace$2.ModalFooterComponent, selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }], directives: [{ type: i4__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i7__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i3__namespace$2.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i3__namespace$2.CustomModalFooterDirective, selector: "ng-template[bbCustomModalFooter]" }], pipes: { "async": i4__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordButtonGroupComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-payord-button-group',
                        templateUrl: './payord-button-group.component.html',
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.RoutableModalService, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var PayordScheduleHeaderComponent = /** @class */ (function () {
        function PayordScheduleHeaderComponent() {
            this.minOccurrences = 2;
            this.endType = i1.ScheduleEndType;
            this.frequencies = i1.Frequencies;
        }
        PayordScheduleHeaderComponent.prototype.isToday = function (startDate) {
            var today = i1.getRelativeDate();
            var date = i1.getDateOnly(new Date(startDate));
            return date === today;
        };
        PayordScheduleHeaderComponent.prototype.ngOnInit = function () {
            var _a;
            this.dateFormat = ((_a = this.options) === null || _a === void 0 ? void 0 : _a.dateFormat) || 'd MMM y';
            triggerHook(i1.PaymentFormFieldHooks.onInit, this);
        };
        PayordScheduleHeaderComponent.prototype.ngOnDestroy = function () {
            triggerHook(i1.PaymentFormFieldHooks.onDestroy, this);
        };
        return PayordScheduleHeaderComponent;
    }());
    /** @nocollapse */ PayordScheduleHeaderComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordScheduleHeaderComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ PayordScheduleHeaderComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordScheduleHeaderComponent, selector: "bb-payord-schedule-header", ngImport: i0__namespace, template: "<div\n  class=\"bb-dynamic-input bb-schedule-header bb-fieldset__heading\"\n  *ngIf=\"!config?.hidden\"\n  [ngClass]=\"options?.cssClasses\"\n>\n  <ng-container\n    *ngIf=\"(group?.value?.frequency?.value || group?.value?.frequency) as freq\"\n  >\n    <span>\n      <ng-container *ngIf=\"options?.label\">{{options?.label}}</ng-container>\n      <ng-container\n        *ngIf=\"!options?.label\"\n        i18n=\"@@dynamic-form-field-schedule-header.default-title\"\n        >Schedule</ng-container\n      >\n    </span>\n    <span class=\"bb-schedule-header__text\">\n      <span> - </span>\n      <span i18n=\"@@dynamic-form-field-schedule-header.frequency\"\n        >{ freq, select, DAILY {Daily} WEEKLY {Weekly} BIWEEKLY {Bi-Weekly}\n        MONTHLY {Monthly} QUARTERLY {Quarterly} YEARLY {Annually} }</span\n      >\n      <ng-container *ngIf=\"freq === frequencies.ONCE\">\n        <span>\n          {{ group?.value?.startDate | date: dateFormat }}\n          <span\n            class=\"bb-schedule-header__relative-text\"\n            *ngIf=\"isToday(group?.value?.startDate)\"\n            i18n=\"@@dynamic-form-field-schedule-header.today\"\n          >\n            (Today)\n          </span>\n        </span>\n      </ng-container>\n\n      <ng-container *ngIf=\"freq !== frequencies.ONCE\">\n        <span class=\"bb-schedule-header__sepatator\">,</span>\n        <span i18n=\"@@dynamic-form-field-schedule-header-from.label\">\n          from\n        </span>\n        <span>{{group?.value?.startDate | date: dateFormat}}</span>\n        <ng-container\n          *ngIf=\"group?.value?.endType === endType.ON && group?.value?.endDate\"\n        >\n          <span> - </span>\n          <span> {{group?.value?.endDate | date: dateFormat}}</span>\n        </ng-container>\n        <ng-container\n          *ngIf=\"group?.value?.endType === endType.AFTER && group?.value?.repeat\"\n        >\n          <span>, </span> <span> {{ group?.value?.repeat }} </span>\n          <span i18n=\"@@dynamic-form-field-schedule-header-occurances.label\">\n            times</span\n          >\n        </ng-container>\n      </ng-container>\n    </span>\n  </ng-container>\n  <hr class=\"bb-schedule-header__sepatator\" />\n</div>\n", directives: [{ type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], pipes: { "date": i4__namespace.DatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordScheduleHeaderComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-payord-schedule-header',
                        templateUrl: './payord-schedule-header.html',
                    }]
            }] });

    var PayordSanctionedCountrySelectorComponent = /** @class */ (function (_super) {
        __extends(PayordSanctionedCountrySelectorComponent, _super);
        function PayordSanctionedCountrySelectorComponent(visibilityService) {
            var _this = _super.call(this, visibilityService) || this;
            _this.visibilityService = visibilityService;
            _this.countries = [];
            _this.inputFormSettings = {};
            _this.sanctionedCountries = {};
            return _this;
        }
        PayordSanctionedCountrySelectorComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.defaultCountry = this.options.defaultCountry || '';
            this.parentForm = getParentForm(this.group);
            this.control = registerFormControl(this.group, this.config.name, this.options.validators, this.options.asyncValidators, this.defaultCountry, this.config);
            this.inputFormSettingControl =
                this.parentForm.get(i1.PaymentOptionFields.inputFormFromSettings) ||
                    registerFormControl(this.parentForm, i1.PaymentOptionFields.inputFormFromSettings);
            this.defaultBankCodeSettingControl =
                this.parentForm.get(i1.HiddenFields.defaultBankCodeSetting) ||
                    registerFormControl(this.parentForm, i1.HiddenFields.defaultBankCodeSetting);
            this.defaultCountryControl = registerFormControl(this.parentForm, i1.HiddenFields.sanctionedCountries);
            this.sanctionedCountriesControl = registerFormControl(this.parentForm, i1.HiddenFields.sanctionedCountries);
            if (this.options.items$) {
                this.httpSubscription = this.options.items$
                    .pipe(operators.map(function (items) { return _this.mapCountries(items); }), operators.tap(function (countryCodes) {
                    var _a;
                    _this.countries = _this.options.isWizardMode
                        ? countryCodes
                        : countryCodes.filter(function (country) { return country !== _this.defaultCountry; });
                    _this.sanctionedCountriesControl.setValue(_this.countries);
                    if (!_this.control.value &&
                        _this.defaultCountry &&
                        ((_a = _this.parentForm.get('isEditMode')) === null || _a === void 0 ? void 0 : _a.value)) {
                        _this.control.setValue(_this.defaultCountry);
                    }
                }))
                    .subscribe();
            }
            this.formSubscription = this.control.valueChanges.subscribe(function (value) { return _this.onChange(value); });
            this.counterpartyIdControl = (this.parentForm.get([
                i1.PaymentBaseFields.counterparty,
                i1.CounterPartyFields.id,
            ]));
            this.toggleDependants();
            triggerHook(i1.PaymentFormFieldHooks.onInit, this);
        };
        PayordSanctionedCountrySelectorComponent.prototype.mapCountries = function (sanctionedCountries) {
            var _this = this;
            return sanctionedCountries.map(function (item) {
                if (item.country === _this.control.value) {
                    _this.inputFormSettingControl.reset();
                    _this.inputFormSettingControl.setValue(item);
                }
                if (item.inputFormSettings) {
                    _this.sanctionedCountries[item.country] = item;
                    _this.inputFormSettings[item.country] = item.inputFormSettings;
                }
                if (item.isDefault) {
                    _this.defaultCountry = item.country;
                    _this.defaultCountryControl.setValue(item.country);
                    if (_this.inputFormSettings[item.country]) {
                        _this.inputFormSettings[item.country].forEach(function (setting) {
                            if (setting.key === 'bank-code') {
                                _this.defaultBankCodeSettingControl.setValue(setting);
                            }
                        });
                    }
                }
                return item.country;
            });
        };
        PayordSanctionedCountrySelectorComponent.prototype.onChange = function (val) {
            this.inputFormSettingControl.setValue(this.sanctionedCountries[val]);
            this.toggleDependants();
        };
        PayordSanctionedCountrySelectorComponent.prototype.resetAddressGroup = function () {
            var addressGroup = ((this.control && this.control.parent ? this.control.parent : null));
            if (i1.isAddressTruthy(addressGroup.value)) {
                for (var controlName in addressGroup.controls) {
                    if (controlName !== 'country') {
                        addressGroup.controls[controlName].reset();
                    }
                }
            }
        };
        PayordSanctionedCountrySelectorComponent.prototype.ngOnDestroy = function () {
            if (this.formSubscription) {
                this.formSubscription.unsubscribe();
            }
            if (this.httpSubscription) {
                this.httpSubscription.unsubscribe();
            }
            triggerHook(i1.PaymentFormFieldHooks.onDestroy, this);
        };
        PayordSanctionedCountrySelectorComponent.prototype.resetPurposeOfPayment = function () {
            var popControl = this.parentForm.get([
                i1.PaymentBaseFields.remittanceInfo,
                i1.RemittanceInfoFields.purposeOfPayment,
            ]);
            if (popControl === null || popControl === void 0 ? void 0 : popControl.value) {
                popControl.reset();
            }
        };
        PayordSanctionedCountrySelectorComponent.prototype.selectItem = function (country) {
            this.defaultCountry = country;
            this.control.setValue(country);
            this.resetAddressGroup();
            this.resetPurposeOfPayment();
        };
        return PayordSanctionedCountrySelectorComponent;
    }(ActivatableFormField));
    /** @nocollapse */ PayordSanctionedCountrySelectorComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordSanctionedCountrySelectorComponent, deps: [{ token: VisibilityService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ PayordSanctionedCountrySelectorComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordSanctionedCountrySelectorComponent, selector: "bb-payord-sanctioned-country-selector", usesInheritance: true, ngImport: i0__namespace, template: "<div\n  class=\"bb-dynamic-input form-group\"\n  *ngIf=\"!config?.hidden\"\n  [formGroup]=\"group\"\n  [ngClass]=\"options?.cssClasses\"\n>\n  <bb-select-country-dropdown\n    [formControlName]=\"config?.name\"\n    [countries]=\"countries\"\n    [label]=\"options?.label\"\n    [helperText]=\"options?.helperText\"\n    [placeholder]=\"options?.placeholder\"\n    [searchPlaceholder]=\"options?.searchPlaceholder\"\n    [dropdownIcon]=\"options?.dropdownIcon\"\n    [selectedCountry]=\"control.value\"\n    [isClosedPayment]=\"\n      parentForm.get('isClosedPayment')?.value || counterpartyIdControl?.value\n    \"\n    (selectCountry)=\"selectItem($event)\"\n    data-role=\"sanctioned-country-selector-dropdown\"\n  ></bb-select-country-dropdown>\n\n  <bb-payord-validation-message\n    [control]=\"group?.controls[config.name]\"\n    [validationMessages]=\"options?.validationMessages\"\n    [label]=\"options?.label\"\n  ></bb-payord-validation-message>\n\n  <div\n    class=\"bb-dynamic-input__desc bb-text-support bb-subtitle\"\n    [attr.aria-hidden]=\"!options?.description\"\n    [hidden]=\"!options?.description\"\n    [textContent]=\"options?.description || ''\"\n    #descElem\n  ></div>\n</div>\n", components: [{ type: i1__namespace.ӨSelectCountryDropdownComponent, selector: "bb-select-country-dropdown", inputs: ["countries", "selectedCountry", "helperText", "placeholder", "label", "searchPlaceholder", "dropdownIcon", "isClosedPayment"], outputs: ["selectCountry"] }, { type: ValidationMessageComponent, selector: "bb-payord-validation-message", inputs: ["control", "validationMessages", "label", "id", "hideGeneric"] }], directives: [{ type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5__namespace.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5__namespace.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i5__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5__namespace.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordSanctionedCountrySelectorComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-payord-sanctioned-country-selector',
                        templateUrl: 'payord-sanctioned-country-selector.component.html',
                    }]
            }], ctorParameters: function () { return [{ type: VisibilityService }]; } });

    var PayordChargeBearerComponent = /** @class */ (function (_super) {
        __extends(PayordChargeBearerComponent, _super);
        function PayordChargeBearerComponent(visibilityService) {
            var _this = _super.call(this, visibilityService) || this;
            _this.visibilityService = visibilityService;
            _this.chargeBearerOptionsSubject$ = new rxjs.BehaviorSubject([]);
            _this.chargeBearerOptions$ = _this.chargeBearerOptionsSubject$.asObservable();
            return _this;
        }
        PayordChargeBearerComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.control = registerFormControl(this.group, this.config.name, this.options.validators, this.options.asyncValidators, this.options.defaultValue, this.config);
            this.chargeBearerOptionsControl = registerFormControl(this.group, i1.PaymentOptionFields.chargeBearerOptions);
            if (this.chargeBearerOptionsControl) {
                this.subscription = this.chargeBearerOptionsControl.valueChanges
                    .pipe(operators.startWith(this.chargeBearerOptionsControl.value), operators.tap(function (chargeBearerOptions) {
                    chargeBearerOptions = chargeBearerOptions || [];
                    _this.control.setValidators(chargeBearerOptions.length ? i5.Validators.required : null);
                    _this.control.updateValueAndValidity();
                    if (_this.control.value &&
                        chargeBearerOptions.length &&
                        chargeBearerOptions.indexOf(_this.control.value) === -1 &&
                        _this.options.templateModeType !== i1.TemplateModeType.EDIT) {
                        _this.control.reset();
                    }
                    _this.chargeBearerOptionsSubject$.next(chargeBearerOptions);
                }))
                    .subscribe();
            }
            this.toggleDependants();
            triggerHook(i1.PaymentFormFieldHooks.onInit, this);
        };
        PayordChargeBearerComponent.prototype.ngOnDestroy = function () {
            if (this.subscription) {
                this.subscription.unsubscribe();
            }
            triggerHook(i1.PaymentFormFieldHooks.onDestroy, this);
        };
        return PayordChargeBearerComponent;
    }(ActivatableFormField));
    /** @nocollapse */ PayordChargeBearerComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordChargeBearerComponent, deps: [{ token: VisibilityService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ PayordChargeBearerComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordChargeBearerComponent, selector: "bb-charge-bearer", usesInheritance: true, ngImport: i0__namespace, template: "<ng-container *ngIf=\"chargeBearerOptions$ | async as chargeBearerOptions\">\n  <ng-container *ngIf=\"chargeBearerOptions.length\">\n    <div\n      *ngIf=\"!config?.hidden\"\n      class=\"bb-dynamic-input form-group charge-bearer-options\"\n      [formGroup]=\"group\"\n      [ngClass]=\"options?.cssClasses\"\n    >\n      <div class=\"bb-label\" [textContent]=\"options?.label || ''\"></div>\n      <span\n        class=\"bb-dynamic-input__helper-text bb-text-support\"\n        *ngIf=\"options?.helperText\"\n        [id]=\"inputEl?.id + '__desc'\"\n        [textContent]=\"options?.helperText\"\n      >\n      </span>\n\n      <bb-input-radio-group-ui\n        [label]=\"options?.label\"\n        [formControlName]=\"config?.name\"\n        (change)=\"toggleDependants()\"\n        [horizontal]=\"options?.horizontal\"\n        [preselect]=\"options?.preselect\"\n        data-role=\"charge-bearer-radio-group\"\n        [bbDynamicAriaAttribute]=\"{\n          charge_bearer__error: control?.touched && control?.invalid,\n          charge_bearer__desc: options?.description\n        }\"\n        [prependInputId]=\"false\"\n        inputSelector=\".bb-input-radio-group\"\n        #inputEl\n      >\n        <bb-input-radio-ui\n          *ngFor=\"let option of chargeBearerOptions\"\n          [value]=\"option\"\n          [labelTemplate]=\"paymentOptionTmpl\"\n          [labelTemplateContext]=\"option\"\n          [attr.data-role]=\"option\"\n        ></bb-input-radio-ui>\n      </bb-input-radio-group-ui>\n      <bb-payord-validation-message\n        [control]=\"group?.controls[config.name]\"\n        [validationMessages]=\"options?.validationMessages\"\n        [label]=\"options?.label\"\n        [id]=\"'charge_bearer__error'\"\n      ></bb-payord-validation-message>\n\n      <div\n        class=\"bb-dynamic-input__desc bb-text-support bb-subtitle\"\n        [attr.aria-hidden]=\"!options?.description\"\n        [hidden]=\"!options?.description\"\n        [id]=\"'charge_bearer__desc'\"\n        [textContent]=\"options?.description || ''\"\n        #descElem\n      ></div>\n    </div>\n  </ng-container>\n</ng-container>\n\n<ng-template let-context=\"labelTemplateContext\" #paymentOptionTmpl>\n  <ng-container [ngSwitch]=\"context\">\n    <div class=\"font-weight-normal\" *ngSwitchCase=\"'OUR'\">\n      I pay all fees (OUR)\n      <div *ngIf=\"control?.value === 'OUR'\" class=\"bb-text-support bb-subtitle\">\n        The beneficiary receives the payment amount in full. You pay the fees\n        charged by our bank initially (fees will be charged separately). You\n        will also pay the fees charged by the payee\u2019s bank, including any\n        correspondent/intermediary fees (this could be days or weeks after you\n        have made the payment).\n      </div>\n    </div>\n    <div class=\"font-weight-normal\" *ngSwitchCase=\"'BEN'\">\n      <div>Beneficiary pays all fees (BEN)</div>\n      <div *ngIf=\"control?.value === 'BEN'\" class=\"bb-text-support bb-subtitle\">\n        The beneficiary pays any fees charged by our bank and/or the recipient\n        bank (including any correspondent/intermediary fees). The beneficiary\n        will typically receive the payment minus the transfer charges.\n      </div>\n    </div>\n    <div class=\"font-weight-normal\" *ngSwitchCase=\"'SHA'\">\n      <div>Fees are shared (SHA)</div>\n      <div *ngIf=\"control?.value === 'SHA'\" class=\"bb-text-support bb-subtitle\">\n        You pay the fees charged by our bank (fees will be charged separately).\n        The beneficiary will pay all fees charged by their bank, including any\n        correspondent/intermediary fees.\n      </div>\n    </div>\n  </ng-container>\n</ng-template>\n", components: [{ type: i2__namespace$2.InputRadioGroupComponent, selector: "bb-input-radio-group-ui", inputs: ["horizontal", "preselect", "name", "verticalAlign"] }, { type: i2__namespace$2.InputRadioComponent, selector: "bb-input-radio-ui", inputs: ["labelTemplate", "labelTemplateContext", "value", "label", "aria-label", "aria-labelledby", "aria-describedby", "role", "aria-activedescendant", "aria-expanded", "aria-invalid", "aria-owns", "disabled"] }, { type: ValidationMessageComponent, selector: "bb-payord-validation-message", inputs: ["control", "validationMessages", "label", "id", "hideGeneric"] }], directives: [{ type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5__namespace.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5__namespace.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i5__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5__namespace.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: DynamicAriaAttributeDirective, selector: "[bbDynamicAriaAttribute]", inputs: ["bbDynamicAriaAttribute", "prependInputId", "inputSelector", "ariaAttributeName"] }, { type: i4__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i4__namespace.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i4__namespace.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }], pipes: { "async": i4__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordChargeBearerComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-charge-bearer',
                        templateUrl: './charge-bearer.component.html',
                    }]
            }], ctorParameters: function () { return [{ type: VisibilityService }]; } });

    var SCROLL_SCHEDULER = typeof requestAnimationFrame !== 'undefined'
        ? rxjs.animationFrameScheduler
        : rxjs.asapScheduler;
    var MultiPaymentCardComponent = /** @class */ (function () {
        function MultiPaymentCardComponent(renderer, ngZone, viewportRuler, changeDetector) {
            this.renderer = renderer;
            this.ngZone = ngZone;
            this.viewportRuler = viewportRuler;
            this.changeDetector = changeDetector;
            this.fieldOptions = {};
            this.count = new i0.EventEmitter();
            this.search = new i0.EventEmitter();
            this.cardConfig = [
                {
                    name: 'counterpartyName',
                    validators: [],
                },
                {
                    name: 'counterpartyAccountNumber',
                    validators: [],
                },
                {
                    name: 'id',
                    validators: [],
                },
                { name: 'bankBranchCode' },
                { name: 'accountType' },
                { name: 'balance' },
                { name: 'currency' },
                { name: 'description', validators: [] },
                {
                    name: 'amount',
                    validators: [],
                },
            ];
            this.hostRef = this;
            this.viewportItems = [];
            this.destroy$ = new rxjs.Subject();
            this._items = [];
            this.visibleItemsInViewport = 0;
            this.bufferedItems = 5;
            this.visibleViewport = 0;
            this.firstRenderedItemIndex = 0;
            this.accounts = [];
            this.defaultConfig = {
                counterpartyName: {
                    label: '',
                    validationMessageLabel: $localize(templateObject_1$2 || (templateObject_1$2 = __makeTemplateObject([":@@multipayment-card.account.validation-message-label:Account"], [":@@multipayment-card.account.validation-message-label:Account"]))),
                    placeholder: '',
                    dropdownIcon: 'toggle-down',
                    ariaLabel: $localize(templateObject_2$1 || (templateObject_2$1 = __makeTemplateObject([":@@multipayment-card.counterparty-name.aria-label:Toggle beneficiary list"], [":@@multipayment-card.counterparty-name.aria-label:Toggle beneficiary list"]))),
                },
                amount: {
                    label: $localize(templateObject_3$1 || (templateObject_3$1 = __makeTemplateObject([":@@multipayment-card.amount.label:Amount"], [":@@multipayment-card.amount.label:Amount"]))),
                    validationMessageLabel: $localize(templateObject_4$1 || (templateObject_4$1 = __makeTemplateObject([":@@multipayment-card.amount.validation-message-label:Amount"], [":@@multipayment-card.amount.validation-message-label:Amount"]))),
                    currency: 'USD',
                    maxLength: 10,
                    placeholder: '0.00',
                },
                description: {
                    placeholder: $localize(templateObject_5 || (templateObject_5 = __makeTemplateObject([":@@multipayment-card.description.placeholder:Enter text..."], [":@@multipayment-card.description.placeholder:Enter text..."]))),
                    minLength: 3,
                    maxLength: 140,
                },
            };
            this.lastBlur = {
                timeoutId: 0,
                itemIndex: -1,
            };
        }
        MultiPaymentCardComponent.prototype.ngOnInit = function () {
            var _this = this;
            var _a, _b, _c, _d, _e, _f, _g, _h;
            this.fieldOptions = {
                counterpartyName: Object.assign(Object.assign({}, this.defaultConfig.counterpartyName), (_b = (_a = this.options) === null || _a === void 0 ? void 0 : _a.fieldsConfig) === null || _b === void 0 ? void 0 : _b.counterpartyName),
                amount: Object.assign(Object.assign({}, this.defaultConfig.amount), (_d = (_c = this.options) === null || _c === void 0 ? void 0 : _c.fieldsConfig) === null || _d === void 0 ? void 0 : _d.amount),
                description: Object.assign(Object.assign({}, this.defaultConfig.description), (_f = (_e = this.options) === null || _e === void 0 ? void 0 : _e.fieldsConfig) === null || _f === void 0 ? void 0 : _f.description),
            };
            this._addValidators();
            this.options.helperText = i1.parseString(((_g = this.options) === null || _g === void 0 ? void 0 : _g.helperText) || '', (_h = this.options) === null || _h === void 0 ? void 0 : _h.maximumAllowedPayments);
            this.paymentArrayControl = registerFormArray(this.group, this.config.name, this.options.validators);
            var controls = this.paymentArrayControl.controls;
            controls.forEach(function (control) { return _this.setupItem(control); });
            var len = Math.min(controls.length, this.bufferedItems * 2);
            for (var i = 0; i < len; i++) {
                this.addRenderedItem(controls[i], i);
            }
            this.scrollableElement = this.config.options.containerRef.nativeElement;
            this.paymentArrayControl.valueChanges
                .pipe(operators.takeUntil(this.destroy$))
                .subscribe(function () {
                while (_this.paymentArrayControl.length > _this._items.length) {
                    var currentIndex = _this._items.length;
                    var control = _this.paymentArrayControl.at(currentIndex);
                    _this.setupItem(control);
                    _this.addRenderedItem(control, currentIndex);
                }
                _this.onScrollChanged();
            });
            this.viewportRuler
                .change()
                .pipe(operators.startWith(null), operators.takeUntil(this.destroy$))
                .subscribe(function () {
                _this.updateViewport();
                _this.onScrollChanged();
            });
            this.ngZone.runOutsideAngular(function () {
                rxjs.fromEvent(_this.scrollableElement, 'scroll')
                    .pipe(operators.startWith(null), operators.takeUntil(_this.destroy$), operators.auditTime(0, SCROLL_SCHEDULER))
                    .subscribe(function () { return _this.onScrollChanged(); });
            });
        };
        MultiPaymentCardComponent.prototype.ngOnDestroy = function () {
            this.accounts.forEach(function (account) { return account.search$.complete(); });
            this.destroy$.next();
            this.destroy$.complete();
        };
        MultiPaymentCardComponent.prototype.addAccount = function () {
            this.setupItem();
            addControlToFormArray(this.paymentArrayControl, this.cardConfig);
            var currentIndex = this.paymentArrayControl.length - 1;
            var control = this.paymentArrayControl.at(currentIndex);
            this.addRenderedItem(control, currentIndex);
            this.count.emit(this.paymentArrayControl.length);
            this.onScrollChanged();
        };
        MultiPaymentCardComponent.prototype.removeAccount = function (index) {
            var _this = this;
            if (this.options.paymentIdList[index]) {
                this.config.options
                    .deletePayment(index)
                    .pipe(operators.take(1))
                    .subscribe(function () {
                    _this.removeAccountAt(index);
                });
            }
            else {
                this.removeAccountAt(index);
            }
        };
        /**
         * will return form with given index in form Array
         *
         * @param index - form array index
         */
        MultiPaymentCardComponent.prototype.getForm = function (index) {
            return this.paymentArrayControl.at(index);
        };
        /**
         *  method to get the form details.
         *
         * @param index form array index
         * @param name form field
         */
        MultiPaymentCardComponent.prototype.getControl = function (index, name) {
            return this.paymentArrayControl.at(index).get(name);
        };
        /**
         * patch value on selecting account
         *
         * @param event -  the selected data
         * @param index - form Array index
         */
        MultiPaymentCardComponent.prototype.onSelectAccount = function (event, index) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
            (_a = this.getControl(index, 'id')) === null || _a === void 0 ? void 0 : _a.patchValue(event.id, { emitEvent: false });
            (_b = this.getControl(index, 'counterpartyName')) === null || _b === void 0 ? void 0 : _b.patchValue(event.name);
            (_c = this.getControl(index, 'counterpartyAccountNumber')) === null || _c === void 0 ? void 0 : _c.patchValue(event.accountNumber, { emitEvent: false });
            (_d = this.getControl(index, 'bankBranchCode')) === null || _d === void 0 ? void 0 : _d.patchValue(event.bankBranchCode, {
                emitEvent: false,
            });
            (_e = this.getControl(index, 'accountType')) === null || _e === void 0 ? void 0 : _e.patchValue(event.accountType, {
                emitEvent: false,
            });
            (_f = this.getControl(index, 'balance')) === null || _f === void 0 ? void 0 : _f.patchValue(event.balance, {
                emitEvent: false,
            });
            (_g = this.getControl(index, 'currency')) === null || _g === void 0 ? void 0 : _g.patchValue(event.currency, {
                emitEvent: false,
            });
            (_h = this.getControl(index, 'counterpartyName')) === null || _h === void 0 ? void 0 : _h.markAllAsTouched();
            (_j = this.getControl(index, 'counterpartyName')) === null || _j === void 0 ? void 0 : _j.markAsDirty();
            (_k = this.getControl(index, 'counterpartyName')) === null || _k === void 0 ? void 0 : _k.updateValueAndValidity();
            (_l = this.getControl(index, 'counterpartyAccountNumber')) === null || _l === void 0 ? void 0 : _l.updateValueAndValidity();
            this.cardBlur(index);
        };
        /**
         * Search query will emit search on account selector
         *
         * @param query
         */
        MultiPaymentCardComponent.prototype.onSearch = function (index, query) {
            this.accounts[index].search$.next(query);
            this.search.emit(query);
        };
        MultiPaymentCardComponent.prototype.openDescription = function (index) {
            var _a;
            this._items[index].expanded = true;
            (_a = this.getControl(index, 'description')) === null || _a === void 0 ? void 0 : _a.patchValue('', { onlySelf: true });
            this.onScrollChanged();
        };
        MultiPaymentCardComponent.prototype.isExpanded = function (index) {
            return Boolean(this._items[index] && this._items[index].expanded);
        };
        /**
         * will emit call the blur hook if any
         *
         * @param index - form index
         */
        MultiPaymentCardComponent.prototype.cardBlur = function (index) {
            var _this = this;
            this.lastBlur.itemIndex = index;
            this.ngZone.runOutsideAngular(function () {
                _this.lastBlur.timeoutId = setTimeout(function () {
                    var form = _this.getForm(index);
                    if (form.dirty && form.valid && _this.config.options.paymentBlur) {
                        var formValue = form.value;
                        var payment = {
                            creditDebitIndicator: i1.CreditDebitMixedIndicator.CREDIT,
                            counterpartyArrangementId: formValue.id,
                            counterpartyName: formValue.counterpartyName,
                            counterpartyAccountNumber: formValue.counterpartyAccountNumber,
                            counterpartyBankBranchCode: formValue.bankBranchCode,
                            instructedAmount: {
                                amount: formValue.amount,
                                currencyCode: formValue.currency,
                            },
                            description: formValue.description,
                        };
                        _this.config.options
                            .paymentBlur(payment, index)
                            .pipe(operators.take(1))
                            .subscribe(function (response) {
                            form.markAsPristine();
                            _this.changeDetector.detectChanges();
                        }, function (error) {
                            if ('message' in error) {
                                form.setErrors({
                                    error: { name: 'error', message: error.message },
                                });
                            }
                            _this.changeDetector.detectChanges();
                        });
                    }
                    if (_this.options && _this.options.hooks && _this.options.hooks.onBlur) {
                        _this.options.hooks.onBlur(form);
                    }
                });
            });
        };
        MultiPaymentCardComponent.prototype.cardFocus = function (index) {
            if (this.lastBlur.itemIndex === index) {
                clearTimeout(this.lastBlur.timeoutId);
            }
        };
        MultiPaymentCardComponent.prototype.deleteDescription = function (index) {
            var _a, _b, _c;
            if ((_a = this.getControl(index, 'description')) === null || _a === void 0 ? void 0 : _a.value) {
                (_b = this.getControl(index, 'description')) === null || _b === void 0 ? void 0 : _b.markAsDirty();
            }
            (_c = this.getControl(index, 'description')) === null || _c === void 0 ? void 0 : _c.patchValue('');
            this._items[index].expanded = false;
            this.onScrollChanged();
        };
        MultiPaymentCardComponent.prototype.onDropdownOpenChange = function (index, isOpen) {
            this._items[index].dropdownOpen = isOpen;
        };
        MultiPaymentCardComponent.prototype.isDropdownOpen = function (index) {
            return this._items[index].dropdownOpen;
        };
        MultiPaymentCardComponent.prototype.addRenderedItem = function (control, index) {
            this.viewportItems.push(control);
            this.changeDetector.detectChanges();
            this.cacheItemHeight(this.content.nativeElement.children[this.content.nativeElement.children.length - 1], index);
        };
        MultiPaymentCardComponent.prototype.removeAccountAt = function (index) {
            this.paymentArrayControl.removeAt(index);
            this._items.splice(index, 1);
            this.updateVisibleItems();
            this.updateDimensions();
            this.count.emit(this.paymentArrayControl.length);
        };
        MultiPaymentCardComponent.prototype.calculateAverageItemHeight = function () {
            if (this._items.length === 0) {
                return 0;
            }
            return Math.ceil(this._items.reduce(function (prev, curr) { return prev + curr.height; }, 0) /
                this._items.length);
        };
        MultiPaymentCardComponent.prototype.cacheItemHeight = function (item, index) {
            var currentItemHeight = this.getElementSize(item).height;
            this._items[index].height = currentItemHeight;
        };
        MultiPaymentCardComponent.prototype.firstVisibleItemIndex = function () {
            if (this._items.length === 0) {
                return 0;
            }
            var scrollTop = this.scrollableElement.scrollTop;
            var contentScrollPosition = Math.max(0, scrollTop - this.scroll.nativeElement.offsetTop);
            var index = 0;
            var remainingScroll = contentScrollPosition - this._items[index].height;
            while (remainingScroll > 0 && index < this._items.length) {
                index += 1;
                remainingScroll -= this._items[index].height;
            }
            return index;
        };
        MultiPaymentCardComponent.prototype.invalidateVisibleItemsCache = function () {
            var children = this.content.nativeElement.children;
            var itemsLength = this.content.nativeElement.children.length;
            for (var i = 0; i < itemsLength; ++i) {
                var internalIndex = this.firstRenderedItemIndex + i;
                this.cacheItemHeight(children[i], internalIndex);
            }
            this.changeDetector.markForCheck();
        };
        MultiPaymentCardComponent.prototype.onScrollChanged = function () {
            var _this = this;
            this.ngZone.runOutsideAngular(function () {
                requestAnimationFrame(function () {
                    _this.invalidateVisibleItemsCache();
                    _this.updateVisibleItems();
                    _this.updateDimensions();
                });
            });
        };
        MultiPaymentCardComponent.prototype.updateViewport = function () {
            var _this = this;
            this.ngZone.runOutsideAngular(function () {
                requestAnimationFrame(function () {
                    var topOffset = Math.max(0, _this.scroll.nativeElement.offsetTop - _this.scrollableElement.scrollTop);
                    /** @TODO get bottom offset dynamically */
                    var bottomOffset = 100;
                    _this.visibleViewport =
                        _this.scrollableElement.clientHeight - topOffset - bottomOffset;
                });
            });
        };
        MultiPaymentCardComponent.prototype.updateVisibleItems = function () {
            var averageItemHeight = this.calculateAverageItemHeight();
            if (averageItemHeight > 0) {
                this.visibleItemsInViewport = Math.round(this.visibleViewport / this.calculateAverageItemHeight());
            }
            else {
                this.visibleItemsInViewport = 0;
            }
            this.firstRenderedItemIndex = Math.max(0, this.firstVisibleItemIndex() - this.bufferedItems);
            var renderedItemsLength = Math.min(this.visibleItemsInViewport + this.bufferedItems * 2, this.paymentArrayControl.controls.length);
            this.viewportItems = this.paymentArrayControl.controls.slice(this.firstRenderedItemIndex, this.firstRenderedItemIndex + renderedItemsLength);
            this.changeDetector.markForCheck();
            this.changeDetector.detectChanges();
        };
        MultiPaymentCardComponent.prototype.updateDimensions = function () {
            var contentHeight = this.virtualViewportHeight();
            var padding = this._items
                .slice(0, this.firstRenderedItemIndex)
                .reduce(function (prev, curr) { return prev + curr.height; }, 0);
            this.renderer.setStyle(this.padding.nativeElement, 'transform', "scaleY(" + contentHeight + ")");
            this.renderer.setStyle(this.scroll.nativeElement, 'height', contentHeight + "px");
            this.renderer.setStyle(this.content.nativeElement, 'transform', "translateY(" + padding + "px)");
            this.changeDetector.markForCheck();
            this.changeDetector.detectChanges();
        };
        MultiPaymentCardComponent.prototype.getElementSize = function (element) {
            var result = element.getBoundingClientRect();
            var styles = getComputedStyle(element);
            var marginTop = parseInt(styles['margin-top'], 10) || 0;
            var marginBottom = parseInt(styles['margin-bottom'], 10) || 0;
            var marginLeft = parseInt(styles['margin-left'], 10) || 0;
            var marginRight = parseInt(styles['margin-right'], 10) || 0;
            return {
                top: result.top + marginTop,
                bottom: result.bottom + marginBottom,
                left: result.left + marginLeft,
                right: result.right + marginRight,
                width: result.width + marginLeft + marginRight,
                height: result.height + marginTop + marginBottom,
            };
        };
        MultiPaymentCardComponent.prototype.virtualViewportHeight = function () {
            return this._items.reduce(function (prev, curr) { return prev + curr.height; }, 0);
        };
        MultiPaymentCardComponent.prototype._addValidators = function () {
            var _this = this;
            this.cardConfig.forEach(function (field) {
                var name = field.name;
                if (_this.fieldOptions[name]) {
                    field.validators = _this.fieldOptions[name].validators;
                }
            });
        };
        MultiPaymentCardComponent.prototype.setupItem = function (control) {
            var _a, _b;
            var expanded = control
                ? (_b = (_a = control.get('description')) === null || _a === void 0 ? void 0 : _a.value) === null || _b === void 0 ? void 0 : _b.trim()
                : false;
            this._items.push({
                height: 0,
                expanded: expanded,
                dropdownOpen: false,
            });
            this.accounts.push(this.config.options.observableAccountsFactory());
        };
        return MultiPaymentCardComponent;
    }());
    /** @nocollapse */ MultiPaymentCardComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: MultiPaymentCardComponent, deps: [{ token: i0__namespace.Renderer2 }, { token: i0__namespace.NgZone }, { token: i1__namespace$b.ViewportRuler }, { token: i0__namespace.ChangeDetectorRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ MultiPaymentCardComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: MultiPaymentCardComponent, selector: "bb-multi-payment-card", viewQueries: [{ propertyName: "scroll", first: true, predicate: ["scroll"], descendants: true, read: i0.ElementRef, static: true }, { propertyName: "padding", first: true, predicate: ["padding"], descendants: true, read: i0.ElementRef, static: true }, { propertyName: "content", first: true, predicate: ["content"], descendants: true, read: i0.ElementRef, static: true }], ngImport: i0__namespace, template: "<div\n  class=\"form-group bb-dynamic-input\"\n  [formGroup]=\"group\"\n  [ngClass]=\"options?.cssClasses\"\n>\n  <div class=\"bb-block bb-block--lg\">\n    <div *ngIf=\"options?.label\" class=\"bb-heading-3\">\n      {{ options?.label }}\n    </div>\n    <div\n      *ngIf=\"options?.helperText\"\n      class=\"bb-dynamic-input__desc bb-text-support bb-subtitle\"\n    >\n      {{ options?.helperText }}\n    </div>\n  </div>\n\n  <div\n    class=\"row bb-block bb-block--md bb-subheader bb-subheader--regular bb-text-bold\"\n    *ngIf=\"paymentArrayControl.controls.length\"\n  >\n    <span class=\"col-6\">{{ fieldOptions?.counterpartyName?.header }}</span>\n    <span\n      class=\"col-4 d-none d-md-block\"\n      i18n=\"@@multipayment-card-column-header-ammount-title.label\"\n      >Amount (Credit)</span\n    >\n  </div>\n\n  <div #scroll class=\"virtual-scroll__container\">\n    <div #padding class=\"virtual-scroll__padding\"></div>\n    <div #content class=\"virtual-scroll__content\">\n      <ng-container [formArrayName]=\"hostRef.config?.name\">\n        <div\n          *ngFor=\"let group of viewportItems; let i = index\"\n          class=\"bb-block bb-block--md\"\n        >\n          <ng-container\n            *ngTemplateOutlet=\"\n              cardTemplate;\n              context: { group: group, index: firstRenderedItemIndex + i }\n            \"\n          ></ng-container>\n        </div>\n      </ng-container>\n    </div>\n  </div>\n\n  <div\n    class=\"text-center\"\n    *ngIf=\"\n      paymentArrayControl.controls.length < options?.maximumAllowedPayments\n    \"\n    data-role=\"add-account-card\"\n    [ngClass]=\"{\n      'border border-danger':\n        paymentArrayControl.controls.length === 0 && paymentArrayControl.touched\n    }\"\n  >\n    <button\n      bbButton\n      color=\"link\"\n      buttonSize=\"md\"\n      [attr.data-role]=\"'btn-icon-link-md-def'\"\n      (click)=\"addAccount()\"\n      class=\"m-2\"\n    >\n      <bb-icon-ui color=\"link\" name=\"add\" size=\"md\" cropped></bb-icon-ui>\n      <span\n        data-role=\"add-account\"\n        i18n=\"@@multipayment-card-button-text-add-account.text\"\n        >Add account</span\n      >\n    </button>\n  </div>\n\n  <bb-payord-validation-message\n    [control]=\"hostRef.paymentArrayControl\"\n    [validationMessages]=\"options.validationMessages\"\n    [hideGeneric]=\"true\"\n  ></bb-payord-validation-message>\n\n  <ng-template #cardTemplate let-group=\"group\" let-index=\"index\">\n    <div\n      class=\"card card-sm\"\n      [formGroup]=\"getForm(index)\"\n      (focusout)=\"cardBlur(index)\"\n      (focusin)=\"cardFocus(index)\"\n    >\n      <div class=\"card-body\">\n        <div\n          class=\"bb-block\"\n          [ngClass]=\"{ 'bb-block--sm': getForm(index)?.errors?.error }\"\n        >\n          <div\n            class=\"bb-stack bb-block\"\n            [ngClass]=\"{\n              'bb-block--sm':\n                isExpanded(index) &&\n                !getControl(index, 'counterpartyName')?.value,\n              'bb-block--md':\n                isExpanded(index) &&\n                getControl(index, 'counterpartyName')?.value\n            }\"\n          >\n            <div class=\"bb-stack__item bb-stack__item--fill\">\n              <div class=\"row\">\n                <div class=\"col-md-6 bb-block--md-md-down\">\n                  <bb-beneficiary-selector\n                    [selectedItem]=\"{\n                      name: getControl(index, 'counterpartyName')?.value\n                    }\"\n                    [placeholder]=\"fieldOptions?.counterpartyName?.placeholder\"\n                    [dropdownIcon]=\"\n                      fieldOptions?.counterpartyName?.dropdownIcon\n                    \"\n                    [aria-label]=\"fieldOptions?.counterpartyName?.ariaLabel\"\n                    [title]=\"fieldOptions?.counterpartyName?.label\"\n                    [debounceTime]=\"\n                      fieldOptions?.counterpartyName?.debounceTime\n                    \"\n                    [hasError]=\"\n                      getControl(index, 'counterpartyName')?.touched &&\n                      getControl(index, 'counterpartyName')?.invalid\n                    \"\n                    [helperText]=\"fieldOptions?.counterpartyName?.helperText\"\n                    [selectedItemTemplate]=\"selectedItemtemplate\"\n                    [listItemTemplate]=\"listItemtemplate\"\n                    (searchValue)=\"onSearch(index, $event)\"\n                    (selectedAccount)=\"onSelectAccount($event, index)\"\n                    (searchBlur)=\"\n                      getControl(index, 'counterpartyName').markAsTouched()\n                    \"\n                    (dropdownOpenChange)=\"onDropdownOpenChange(index, $event)\"\n                    [clearSearchOnselect]=\"true\"\n                    #beneficiarySelector\n                  ></bb-beneficiary-selector>\n                  <bb-payord-validation-message\n                    [control]=\"getControl(index, 'counterpartyName')\"\n                    [validationMessages]=\"\n                      fieldOptions?.counterpartyName?.validationMessages\n                    \"\n                    [label]=\"\n                      fieldOptions?.counterpartyName?.validationMessageLabel\n                    \"\n                  ></bb-payord-validation-message>\n                </div>\n                <div class=\"col-md-4\">\n                  <div class=\"bb-block bb-block--sm\">\n                    <bb-amount-input-ui\n                      formControlName=\"amount\"\n                      [mapCurrency]=\"false\"\n                      [currency]=\"fieldOptions?.amount?.currency\"\n                      [required]=\"true\"\n                      [aria-describedby]=\"\n                        'compact-amount-error-message' + index\n                      \"\n                      [maxLength]=\"fieldOptions?.amount?.maxLength\"\n                      [placeholder]=\"fieldOptions?.amount?.placeholder\"\n                    >\n                    </bb-amount-input-ui>\n                    <bb-payord-validation-message\n                      [control]=\"getControl(index, 'amount')\"\n                      [validationMessages]=\"\n                        fieldOptions?.amount?.validationMessages\n                      \"\n                      [label]=\"fieldOptions?.amount?.validationMessageLabel\"\n                    ></bb-payord-validation-message>\n                  </div>\n                  <span\n                    class=\"bb-text-support bb-subtitle\"\n                    [hidden]=\"isExpanded(index)\"\n                  >\n                    <ng-container>Add</ng-container>\n                    <a\n                      role=\"button\"\n                      class=\"ml-1\"\n                      (click)=\"openDescription(index)\"\n                    >\n                      <u class=\"bb-text-support\" data-role=\"description-link\"\n                        >description</u\n                      >\n                    </a>\n                  </span>\n                </div>\n              </div>\n            </div>\n            <div\n              class=\"bb-stack__item bb-stack__item--push-right bb-stack__item--align-top d-print-none\"\n            >\n              <button\n                bbButton\n                buttonSize=\"sm\"\n                circle=\"true\"\n                color=\"link-dark\"\n                data-role=\"close-to-account\"\n                (click)=\"removeAccount(index)\"\n              >\n                <span\n                  class=\"sr-only\"\n                  id=\"closeBtn\"\n                  aria-label=\"remove payment card\"\n                  i18n-aria-label=\"\n                    Remove Payment Card@@multi-payment-card.details.remove\"\n                >\n                  Remove account\n                </span>\n                <bb-icon-ui name=\"times\"></bb-icon-ui>\n              </button>\n            </div>\n          </div>\n\n          <div\n            class=\"card card-sm card--highlight card--shadowless\"\n            [hidden]=\"!isExpanded(index)\"\n          >\n            <div class=\"card-body\">\n              <label class=\"bb-label\">\n                {{ fieldOptions?.description?.title }}\n                <span\n                  class=\"bb-text-support bb-text-default\"\n                  i18n=\"@@multipayment-card.description.label.optional\"\n                  >(optional)</span\n                >\n              </label>\n              <div\n                class=\"bb-stack bb-stack--align-top bb-stack--density-sm\"\n                data-role=\"description-input\"\n              >\n                <bb-textarea-ui\n                  formControlName=\"description\"\n                  [placeholder]=\"fieldOptions?.description?.placeholder\"\n                  [showCharCounter]=\"true\"\n                  [minLength]=\"fieldOptions?.description?.minLength\"\n                  [maxLength]=\"fieldOptions?.description?.maxLength\"\n                  [rows]=\"3\"\n                  [cols]=\"50\"\n                  wrap=\"hard\"\n                  class=\"bb-stack__item\"\n                >\n                </bb-textarea-ui>\n                <button\n                  bbButton\n                  buttonSize=\"sm\"\n                  class=\"bb-stack__item\"\n                  circle=\"true\"\n                  color=\"link-dark\"\n                  (click)=\"deleteDescription(index)\"\n                >\n                  <bb-icon-ui\n                    name=\"delete\"\n                    data-role=\"delete-description\"\n                    color=\"secondary-lightest\"\n                  ></bb-icon-ui>\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <ng-container *ngIf=\"getForm(index)?.errors?.error\">\n          <bb-payord-validation-message\n            [control]=\"getForm(index)\"\n            [validationMessages]=\"[getForm(index)?.errors?.error]\"\n          ></bb-payord-validation-message>\n        </ng-container>\n      </div>\n    </div>\n\n    <ng-template #listItemtemplate>\n      <ng-container *ngIf=\"isDropdownOpen(index)\" class=\"bb-product-selector\">\n        <div\n          *ngIf=\"\n            accounts[index] && (accounts[index].items$ | async);\n            let accounts;\n            else: loadingAccounts\n          \"\n          class=\"pre-scrollable\"\n          style=\"z-index: 1040\"\n        >\n          <bb-beneficiary-selector-account\n            *ngFor=\"let account of accounts\"\n            [account]=\"account\"\n            size=\"sm\"\n            class=\"px-1 border-bottom bb-product-selector__dropdown-item\"\n            [class.selected]=\"getControl(index, 'id').value === account.id\"\n            ngbDropdownItem\n            (selectedAccount)=\"onSelectAccount($event, index)\"\n          >\n          </bb-beneficiary-selector-account>\n        </div>\n      </ng-container>\n    </ng-template>\n\n    <ng-template #loadingAccounts>\n      <bb-loading-indicator-ui></bb-loading-indicator-ui>\n    </ng-template>\n\n    <ng-template #selectedItemtemplate>\n      <div\n        class=\"rounded border p-3\"\n        [ngClass]=\"{\n          'border-danger': getControl(index, 'counterpartyName').invalid\n        }\"\n      >\n        <div role=\"menuitem\" class=\"\">\n          <div class=\"bb-stack\">\n            <div class=\"bb-stack__item\" data-role=\"selected-to-account\">\n              <span class=\"bb-text-bold\">{{\n                getControl(index, 'counterpartyName')?.value\n              }}</span>\n            </div>\n            <div class=\"bb-stack__item bb-stack__item--push-right\">\n              <bb-icon-ui\n                name=\"perm-contact-calendar\"\n                color=\"dark\"\n              ></bb-icon-ui>\n            </div>\n          </div>\n          <div class=\"bb-subtitle bb-text-support break-word\">\n            <span *ngIf=\"getControl(index, 'bankBranchCode')?.value\"\n              >{{ getControl(index, 'bankBranchCode')?.value }} /</span\n            >\n            {{ getControl(index, 'counterpartyAccountNumber')?.value }}\n          </div>\n          <div class=\"text-right\">\n            <bb-amount-ui\n              [amount]=\"getControl(index, 'balance')?.value\"\n              [currency]=\"getControl(index, 'currency')?.value\"\n              [mapCurrency]=\"false\"\n            ></bb-amount-ui>\n          </div>\n        </div>\n      </div>\n    </ng-template>\n  </ng-template>\n</div>\n", styles: ["\n      .virtual-scroll__container {\n        position: relative;\n      }\n\n      .virtual-scroll__padding {\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 1px;\n        height: 1px;\n        transform-origin: 0 0;\n        opacity: 0;\n      }\n\n      .virtual-scroll__content {\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        max-width: 100vw;\n        max-height: 100vh;\n      }\n    "], components: [{ type: i2__namespace$3.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: ValidationMessageComponent, selector: "bb-payord-validation-message", inputs: ["control", "validationMessages", "label", "id", "hideGeneric"] }, { type: i1__namespace$a.AmountInputComponent, selector: "bb-amount-input-ui", inputs: ["placeholder", "maxLength", "wrapperClasses", "mapCurrency", "currency", "autoDecimal"] }, { type: i1__namespace$4.TextareaComponent, selector: "bb-textarea-ui", inputs: ["rows", "cols", "placeholder", "maxLength", "minLength", "readonly", "showCharCounter", "wrap"] }, { type: i4__namespace$1.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i5__namespace$2.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }], directives: [{ type: i5__namespace.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5__namespace.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5__namespace.FormArrayName, selector: "[formArrayName]", inputs: ["formArrayName"] }, { type: i4__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i4__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i7__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i5__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5__namespace.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i5__namespace.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i7__namespace$1.NgbDropdownItem, selector: "[ngbDropdownItem]", inputs: ["disabled"] }], pipes: { "async": i4__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: MultiPaymentCardComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-multi-payment-card',
                        templateUrl: './multi-payment-card.component.html',
                        styles: [
                            "\n      .virtual-scroll__container {\n        position: relative;\n      }\n\n      .virtual-scroll__padding {\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 1px;\n        height: 1px;\n        transform-origin: 0 0;\n        opacity: 0;\n      }\n\n      .virtual-scroll__content {\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        max-width: 100vw;\n        max-height: 100vh;\n      }\n    ",
                        ],
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.Renderer2 }, { type: i0__namespace.NgZone }, { type: i1__namespace$b.ViewportRuler }, { type: i0__namespace.ChangeDetectorRef }]; }, propDecorators: { scroll: [{
                    type: i0.ViewChild,
                    args: ['scroll', { read: i0.ElementRef, static: true }]
                }], padding: [{
                    type: i0.ViewChild,
                    args: ['padding', { read: i0.ElementRef, static: true }]
                }], content: [{
                    type: i0.ViewChild,
                    args: ['content', { read: i0.ElementRef, static: true }]
                }] } });
    var templateObject_1$2, templateObject_2$1, templateObject_3$1, templateObject_4$1, templateObject_5;

    /**
     * @deprecated Will be removed in widget collection v3.11.0
     */
    var PayordCreditDebitSelectorComponent = /** @class */ (function () {
        function PayordCreditDebitSelectorComponent(deprecationsService) {
            this.deprecationsService = deprecationsService;
            /**
             * @TODO Remove this component in 3.11.0
             */
            deprecationsService.logDeprecatedFeature("\n      bb-payord-credit-debit-selector has been deprecated since 3.10.0, it will be removed in 3.11.0\n\n      To define credit/debit options use `creditDebitOptions` property from `ManualBatchTypeConfig`\n      type defined in `@backbase/business-ang/batch`\n    ");
        }
        PayordCreditDebitSelectorComponent.prototype.ngOnInit = function () {
            var _a, _b, _c, _d, _e;
            this.control = registerFormControl(this.group, (_a = this.config) === null || _a === void 0 ? void 0 : _a.name, (_b = this.options) === null || _b === void 0 ? void 0 : _b.validators, (_c = this.options) === null || _c === void 0 ? void 0 : _c.asyncValidators, ((_d = this.options) === null || _d === void 0 ? void 0 : _d.defaultValue) ||
                (((_e = this.options) === null || _e === void 0 ? void 0 : _e.choices) && this.options.choices[0]), this.config);
        };
        return PayordCreditDebitSelectorComponent;
    }());
    /** @nocollapse */ PayordCreditDebitSelectorComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordCreditDebitSelectorComponent, deps: [{ token: i2__namespace.DeprecationsService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ PayordCreditDebitSelectorComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordCreditDebitSelectorComponent, selector: "bb-payord-credit-debit-selector", ngImport: i0__namespace, template: "<div class=\"bb-block bb-block--lg\">\n  <div class=\"bb-block bb-block--sm\">\n    <div *ngIf=\"options?.label\" class=\"bb-heading-3\">{{options?.label}}</div>\n    <div\n      *ngIf=\"options?.helperText\"\n      class=\"bb-dynamic-input__desc bb-text-support bb-subtitle\"\n    >\n      {{options?.helperText}}\n    </div>\n  </div>\n  <bb-payord-card-menu [items]=\"options?.choices\"></bb-payord-card-menu>\n</div>\n", components: [{ type: i1__namespace.ӨPayordCardMenuComponent, selector: "bb-payord-card-menu", inputs: ["items", "initialSelection"], outputs: ["select"] }], directives: [{ type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordCreditDebitSelectorComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-payord-credit-debit-selector',
                        templateUrl: './payord-credit-debit-selector.html',
                    }]
            }], ctorParameters: function () { return [{ type: i2__namespace.DeprecationsService }]; } });

    var PayordInternalAmountOptionsComponent = /** @class */ (function (_super) {
        __extends(PayordInternalAmountOptionsComponent, _super);
        function PayordInternalAmountOptionsComponent(stateService, visibilityService, locale) {
            var _this = _super.call(this, visibilityService) || this;
            _this.stateService = stateService;
            _this.locale = locale;
            _this.productKinds = i1.ProductKinds;
            _this.remittanceInfoFields = i1.RemittanceInfoFields;
            _this.touched = false;
            _this.id = "bb-compact-amount-" + new Date().getTime();
            _this.groupSeparator = i4.getLocaleNumberSymbol(_this.locale, i4.NumberSymbol.CurrencyGroup);
            _this.decimalSeparator = i4.getLocaleNumberSymbol(_this.locale, i4.NumberSymbol.CurrencyDecimal);
            _this.format = {
                groupSeparator: _this.groupSeparator,
                decimalSeparator: _this.decimalSeparator,
                groupSize: 3,
            };
            return _this;
        }
        PayordInternalAmountOptionsComponent.prototype.ngOnInit = function () {
            var _this = this;
            var _a, _b, _c, _d;
            this.registerFields();
            triggerHook(i1.PaymentFormFieldHooks.onInit, this);
            this.control = this.group.controls[this.config.name];
            this.listenAmountOptionChanges();
            this.toAccountProduct$ = (_b = (_a = this.group.parent) === null || _a === void 0 ? void 0 : _a.get(i1.PaymentBaseFields.counterparty)) === null || _b === void 0 ? void 0 : _b.valueChanges.pipe(operators.startWith((_d = (_c = this.group.parent) === null || _c === void 0 ? void 0 : _c.get(i1.PaymentBaseFields.counterparty)) === null || _d === void 0 ? void 0 : _d.value), operators.pluck('accountData'), operators.filter(function (account) { return !!account; }), operators.distinctUntilChanged(function (prev, curr) { return prev.id === curr.id; }), operators.tap(function (account) {
                var _a, _b, _c, _d;
                var optionValue = (_a = _this.control) === null || _a === void 0 ? void 0 : _a.value;
                if (optionValue || optionValue === 0) {
                    if (_this.stateService.currentState !== i1.PaymentState.EDIT) {
                        (_b = _this.control) === null || _b === void 0 ? void 0 : _b.reset();
                        _this.group.controls[i1.RemittanceInfoFields.amountOptionLabel].reset();
                        _this.group.controls[i1.RemittanceInfoFields.amountCurrencyGroup].reset();
                        _this.group.controls['scheduleFrequency'].reset();
                        _this.group.controls['showFrequencySwitch'].reset();
                    }
                    _this.customAmount = new BigNumber__default["default"]((_c = _this.group.controls[i1.RemittanceInfoFields.amountCurrencyGroup].value) === null || _c === void 0 ? void 0 : _c.amount).toFormat(_this.format);
                }
                _this.toggleDependants();
                _this.toAccountDefaultRecord = account.defaultRecord;
                _this.setAmountOptions(account);
                _this.stateService.setPaymentState(i1.PaymentState.INITIAL);
                if (_this.options.noBalanceText) {
                    if (_this.isAmountOptionsZero(account) && _this.control) {
                        _this.group.removeControl(_this.config.name);
                    }
                    else if (!_this.control) {
                        registerFormControl(_this.group, _this.config.name, [i5.Validators.required], _this.options.asyncValidators);
                        _this.listenAmountOptionChanges();
                    }
                }
                if (account.currency) {
                    (_d = _this.group
                        .get(i1.RemittanceInfoFields.amountCurrencyGroup + "." + i1.RemittanceInfoFields.currency)) === null || _d === void 0 ? void 0 : _d.patchValue(account.currency);
                }
            }));
        };
        PayordInternalAmountOptionsComponent.prototype.ngOnDestroy = function () {
            var _a;
            triggerHook(i1.PaymentFormFieldHooks.onDestroy, this);
            (_a = this.subscription$) === null || _a === void 0 ? void 0 : _a.unsubscribe();
        };
        PayordInternalAmountOptionsComponent.prototype.registerFields = function () {
            registerFormControl(this.group, i1.RemittanceInfoFields.amountOptionLabel);
            registerFormControl(this.group, this.config.name, this.options.validators, this.options.asyncValidators);
            registerFormControl(this.group, 'scheduleFrequency');
            registerFormControl(this.group, 'showFrequencySwitch');
        };
        /**
         * Method to handle selecting amount option
         *
         * @param [index] index of selected amount option
         */
        PayordInternalAmountOptionsComponent.prototype.amountOptionChange = function (index) {
            var _e;
            var _a, _b, _c, _d;
            var option = ((_a = this.amountOptions) === null || _a === void 0 ? void 0 : _a[index]) || {};
            var label = option.label;
            var currency = (_b = this.toAccountDefaultRecord) === null || _b === void 0 ? void 0 : _b.currency;
            var amount = (_d = (_c = this.toAccountDefaultRecord) === null || _c === void 0 ? void 0 : _c[option.amountApiField || '']) === null || _d === void 0 ? void 0 : _d.toString();
            if (option.hasCustomAmountInput) {
                this.group.controls[i1.RemittanceInfoFields.amountCurrencyGroup].reset({
                    amount: '',
                    currency: currency,
                });
                this.group.controls[i1.RemittanceInfoFields.amountOptionLabel].patchValue(label);
                this.group.controls['scheduleFrequency'].patchValue(option.scheduleFrequency);
                this.group.controls['showFrequencySwitch'].patchValue(option.showFrequencySwitch);
            }
            if (amount) {
                this.group.patchValue((_e = {},
                    _e[i1.RemittanceInfoFields.amountCurrencyGroup] = { amount: amount, currency: currency },
                    _e[i1.RemittanceInfoFields.amountOptionLabel] = label,
                    _e.scheduleFrequency = option.scheduleFrequency,
                    _e.showFrequencySwitch = option.showFrequencySwitch,
                    _e));
            }
            this.toggleDependants();
        };
        /**
         * Set amount options depend on selected product
         *
         * @param [product] selected account in counterParty product selector
         */
        PayordInternalAmountOptionsComponent.prototype.setAmountOptions = function (product) {
            var _a;
            var _e = ((_a = this.options) === null || _a === void 0 ? void 0 : _a.amountOptions) || {}, creditCard = _e.creditCard, loan = _e.loan;
            switch (product.productKindName) {
                case i1.ProductKinds.creditCard:
                    this.amountOptions = (creditCard === null || creditCard === void 0 ? void 0 : creditCard.map(mapLocalize)) || [];
                    break;
                case i1.ProductKinds.loanAccount:
                    this.amountOptions = (loan === null || loan === void 0 ? void 0 : loan.map(mapLocalize)) || [];
                    break;
                default:
                    this.amountOptions = [];
            }
        };
        PayordInternalAmountOptionsComponent.prototype.isAmountOptionsZero = function (account) {
            var _a, _b;
            if (!((_a = this.amountOptions) === null || _a === void 0 ? void 0 : _a.length) || !account) {
                return;
            }
            return (_b = this.amountOptions) === null || _b === void 0 ? void 0 : _b.every(function (option) {
                var _a;
                return (option === null || option === void 0 ? void 0 : option.amountApiField)
                    ? Number((_a = account.defaultRecord) === null || _a === void 0 ? void 0 : _a[option.amountApiField]) === 0
                    : true;
            });
        };
        PayordInternalAmountOptionsComponent.prototype.listenAmountOptionChanges = function () {
            var _this = this;
            var _a, _b;
            this.subscription$ = (_a = this.control) === null || _a === void 0 ? void 0 : _a.valueChanges.pipe(operators.startWith((_b = this.control) === null || _b === void 0 ? void 0 : _b.value), operators.distinctUntilChanged(), operators.filter(function (value) { return (value || value === 0) &&
                _this.stateService.currentState !== i1.PaymentState.EDIT; })).subscribe(this.amountOptionChange.bind(this));
        };
        return PayordInternalAmountOptionsComponent;
    }(ActivatableFormField));
    /** @nocollapse */ PayordInternalAmountOptionsComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordInternalAmountOptionsComponent, deps: [{ token: i1__namespace.StateService }, { token: VisibilityService }, { token: i0.LOCALE_ID }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ PayordInternalAmountOptionsComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordInternalAmountOptionsComponent, selector: "bb-internal-amount-options", usesInheritance: true, ngImport: i0__namespace, template: "<ng-container *ngIf=\"toAccountProduct$ | async as product\">\n  <fieldset\n    class=\"bb-fieldset bb-amount-options\"\n    [ngClass]=\"options?.cssClasses\"\n    [formGroup]=\"group\"\n    *ngIf=\"!config?.hidden\"\n  >\n    <div\n      class=\"bb-block bb-block--md\"\n      *ngIf=\"\n        !(options?.noBalanceText && isAmountOptionsZero(product));\n        else noBalanceMessage\n      \"\n    >\n      <bb-payord-validation-message\n        id=\"amount-option-error-message\"\n        [control]=\"group.get(config.name)\"\n        [validationMessages]=\"options?.validationMessages\"\n        class=\"d-block bb-block bb-block--md\"\n      ></bb-payord-validation-message>\n      <bb-input-radio-group-ui\n        [formControlName]=\"config.name\"\n        [aria-describedby]=\"'amount-option-error-message'\"\n        [preselect]=\"options?.preselect\"\n        [horizontal]=\"options?.horizontal\"\n      >\n        <bb-input-radio-ui\n          *ngFor=\"let option of amountOptions; index as i\"\n          aria-labelledby=\"payord-amount-options-amount-{{\n            i\n          }} payord-amount-options-label-{{ i }}\"\n          aria-describedby=\"payord-amount-options-description-{{ i }}\"\n          [labelTemplate]=\"\n            option.hasCustomAmountInput ? otherTemplate : labelTemplate\n          \"\n          [labelTemplateContext]=\"[option, product, i]\"\n          [value]=\"i\"\n        ></bb-input-radio-ui>\n      </bb-input-radio-group-ui>\n    </div>\n    <ng-template #noBalanceMessage>\n      <div class=\"bb-block bb-block--md bb-amount-options__no-balance-text\">\n        {{ options?.noBalanceText }}\n      </div>\n    </ng-template>\n  </fieldset>\n</ng-container>\n\n<ng-template #labelTemplate let-context=\"labelTemplateContext\">\n  <div\n    class=\"bb-stack bb-stack--wrap\"\n    [ngClass]=\"options?.amountOptions?.cssClasses\"\n  >\n    <div class=\"bb-stack__item bb-stack__item--fill\">\n      <div attr.id=\"payord-amount-options-label-{{ context[2] }}\">\n        {{ context[0].label }}\n      </div>\n      <div *ngIf=\"context[0].description\">\n        <span\n          class=\"bb-text-support bb-subtitle bb-input-radio-group__radio-label\"\n          attr.id=\"payord-amount-options-description-{{ context[2] }}\"\n        >\n          {{ context[0].description }}\n        </span>\n      </div>\n    </div>\n    <div class=\"bb-stack__item bb-stack__break--sm-down\">\n      <bb-amount-ui\n        attr.id=\"payord-amount-options-amount-{{ context[2] }}\"\n        [amount]=\"context[1].defaultRecord[context[0].amountApiField]\"\n        [currency]=\"context[1].currency\"\n        [mapCurrency]=\"options?.mapCurrency !== false\"\n        [bbHighlight]=\"options?.highlight\"\n        [abbreviate]=\"options?.abbreviate\"\n        [showPlusSign]=\"options?.showPlusSign\"\n        [trailingZeroes]=\"options?.trailingZeroes !== false\"\n      ></bb-amount-ui>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #otherTemplate let-context=\"labelTemplateContext\">\n  <div\n    class=\"bb-amount-input__field--large bb-form-field bb-form-field--md\"\n    [ngClass]=\"options?.amountOptions?.cssClasses\"\n    [class.was-validated]=\"\n      touched &&\n      group.controls[remittanceInfoFields.amountCurrencyGroup].invalid\n    \"\n  >\n    <div>{{ context[0].label }}</div>\n    <div *ngIf=\"context[0].description\" class=\"bb-block bb-block--sm\">\n      <span\n        class=\"bb-text-support bb-subtitle bb-input-radio-group__radio-label\"\n      >\n        {{ context[0].description }}\n      </span>\n    </div>\n    <ng-container *ngIf=\"group.controls[config.name]?.value === context[2]\">\n      <div\n        class=\"position-relative\"\n        [formGroup]=\"group.controls[remittanceInfoFields.amountCurrencyGroup]\"\n      >\n        <bb-amount-input-ui\n          [formControlName]=\"remittanceInfoFields.amount\"\n          (focusout)=\"touched = true\"\n          [mapCurrency]=\"options?.showCurrencySymbol !== false\"\n          [wrapperClasses]=\"\n            options.wrapperClasses || 'bb-amount-input__field--large'\n          \"\n          [currency]=\"context[1].currency\"\n          [required]=\"true\"\n          [autoDecimal]=\"options.autoDecimal\"\n          [aria-describedby]=\"'compact-amount-error-message'\"\n          [placeholder]=\"options?.placeholder || '0.00'\"\n          [maxLength]=\"options?.maxLength\"\n        ></bb-amount-input-ui>\n      </div>\n      <bb-payord-validation-message\n        [id]=\"'compact-amount-error-message'\"\n        [control]=\"group.controls[remittanceInfoFields.amountCurrencyGroup]\"\n        [validationMessages]=\"options?.validationMessages\"\n      ></bb-payord-validation-message>\n    </ng-container>\n  </div>\n</ng-template>\n", components: [{ type: ValidationMessageComponent, selector: "bb-payord-validation-message", inputs: ["control", "validationMessages", "label", "id", "hideGeneric"] }, { type: i2__namespace$2.InputRadioGroupComponent, selector: "bb-input-radio-group-ui", inputs: ["horizontal", "preselect", "name", "verticalAlign"] }, { type: i2__namespace$2.InputRadioComponent, selector: "bb-input-radio-ui", inputs: ["labelTemplate", "labelTemplateContext", "value", "label", "aria-label", "aria-labelledby", "aria-describedby", "role", "aria-activedescendant", "aria-expanded", "aria-invalid", "aria-owns", "disabled"] }, { type: i5__namespace$2.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: i1__namespace$a.AmountInputComponent, selector: "bb-amount-input-ui", inputs: ["placeholder", "maxLength", "wrapperClasses", "mapCurrency", "currency", "autoDecimal"] }], directives: [{ type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i5__namespace.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5__namespace.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i5__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5__namespace.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i4__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i9__namespace.HighlightDirective, selector: "[bbHighlight]", inputs: ["amount", "bbHighlight", "negativeClass", "positiveClass"] }, { type: i5__namespace.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }], pipes: { "async": i4__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordInternalAmountOptionsComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-internal-amount-options',
                        templateUrl: './payord-internal-amount-options.component.html',
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.StateService }, { type: VisibilityService }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [i0.LOCALE_ID]
                        }] }];
        } });

    var PayordHeaderComponent = /** @class */ (function () {
        function PayordHeaderComponent() {
        }
        PayordHeaderComponent.prototype.ngOnInit = function () {
            var _a;
            var remittanceInfoForm = (_a = this.group.parent) === null || _a === void 0 ? void 0 : _a.get(i1.PaymentBaseFields.remittanceInfo);
            this.headerAddition$ = remittanceInfoForm === null || remittanceInfoForm === void 0 ? void 0 : remittanceInfoForm.valueChanges.pipe(operators.pluck(i1.RemittanceInfoFields.amountOptionLabel));
            triggerHook(i1.PaymentFormFieldHooks.onInit, this);
        };
        PayordHeaderComponent.prototype.ngOnDestroy = function () {
            triggerHook(i1.PaymentFormFieldHooks.onDestroy, this);
        };
        return PayordHeaderComponent;
    }());
    /** @nocollapse */ PayordHeaderComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordHeaderComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ PayordHeaderComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordHeaderComponent, selector: "bb-payord-header-ui", ngImport: i0__namespace, template: "<div [ngClass]=\"options?.cssClasses\" *ngIf=\"!config?.hidden\">\n  <div class=\"bb-stack\">\n    <bb-header-ui\n      [headingType]=\"options.headingType\"\n      [heading]=\"options.heading\"\n      [headingClasses]=\"options?.headingClasses\"\n    >\n    </bb-header-ui>\n    <span\n      class=\"bb-text-support bb-highlight bb-highlight--regular\"\n      *ngIf=\"headerAddition$ | async as headerAddition\"\n    >\n      &nbsp;- {{ headerAddition }}\n    </span>\n  </div>\n  <hr *ngIf=\"options?.separatorLine\" class=\"bb-schedule-header__sepatator\" />\n</div>\n", components: [{ type: i1__namespace$c.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }], directives: [{ type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], pipes: { "async": i4__namespace.AsyncPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordHeaderComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-payord-header-ui',
                        templateUrl: './payord-header.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }] });

    var PayordPurposeOfPaymentComponent = /** @class */ (function () {
        function PayordPurposeOfPaymentComponent(elRef) {
            this.elRef = elRef;
        }
        PayordPurposeOfPaymentComponent.prototype.ngOnInit = function () {
            this.control =
                this.group.get(i1.RemittanceInfoFields.purposeOfPayment) ||
                    registerFormControl(this.group, this.config.name, this.options.validators, this.options.asyncValidators, this.options.defaultValue, this.config);
            this.options.isCollapsed = this.control.value
                ? false
                : this.options.isCollapsed === undefined
                    ? true
                    : this.options.isCollapsed;
            triggerHook(i1.PaymentFormFieldHooks.onInit, this);
        };
        PayordPurposeOfPaymentComponent.prototype.expand = function () {
            this.options.isCollapsed = false;
            i1.focusChildElement('.form-control', this.elRef.nativeElement);
        };
        PayordPurposeOfPaymentComponent.prototype.selectPurpose = function (purpose) {
            this.control.setValue(purpose);
        };
        PayordPurposeOfPaymentComponent.prototype.ngOnDestroy = function () {
            triggerHook(i1.PaymentFormFieldHooks.onDestroy, this);
        };
        return PayordPurposeOfPaymentComponent;
    }());
    /** @nocollapse */ PayordPurposeOfPaymentComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordPurposeOfPaymentComponent, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ PayordPurposeOfPaymentComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordPurposeOfPaymentComponent, selector: "bb-payord-purpose-of-payment", ngImport: i0__namespace, template: "<ng-container\n  *ngIf=\"control?.value || !options?.isCollapsed; else collapsedTmpl\"\n>\n  <div\n    class=\"bb-dynamic-input form-group\"\n    [formGroup]=\"group\"\n    [ngClass]=\"options?.cssClasses\"\n  >\n    <div [hidden]=\"config?.hidden\" [attr.aria-hidden]=\"config?.hidden\">\n      <ng-container *ngIf=\"!options?.purposes || !options?.purposes.length\">\n        <label\n          class=\"bb-dynamic-input__label\"\n          data-role=\"purpose-of-payment-label\"\n          [id]=\"inputEl?.id + '__label'\"\n          [for]=\"inputEl?.id\"\n          [textContent]=\"options?.label || ''\"\n        ></label>\n        <span\n          class=\"bb-dynamic-input__helper-text bb-text-support\"\n          data-role=\"purpose-of-payment-optional-label\"\n          *ngIf=\"options?.isOptional && options?.helperText\"\n          [id]=\"inputEl?.id + '__desc'\"\n          [textContent]=\"options?.helperText\"\n        >\n        </span>\n\n        <bb-input-text-ui\n          #inputEl\n          [formControlName]=\"config.name\"\n          [attr.disabled]=\"options?.disabled\"\n          [minLength]=\"options?.minLength\"\n          [maxLength]=\"options?.maxLength\"\n          [showCharCounter]=\"options?.showCharCounter\"\n          [attr.id]=\"options?.id\"\n          [placeholder]=\"options?.placeholder || ''\"\n          [autocomplete]=\"options?.autoComplete\"\n          [attr.autofocus]=\"options?.autofocus\"\n          [attr.readonly]=\"options?.readonly\"\n          [aria-describedby]=\"descElem?.id\"\n          data-role=\"purpose-of-payment-selector\"\n        ></bb-input-text-ui>\n\n        <div\n          #descElem\n          class=\"bb-dynamic-input__desc bb-text-support bb-subtitle\"\n          [attr.aria-hidden]=\"!options?.description\"\n          [hidden]=\"!options?.description\"\n          [id]=\"inputEl?.id + '__desc'\"\n          [textContent]=\"options?.description || ''\"\n        ></div>\n      </ng-container>\n\n      <ng-container *ngIf=\"options?.purposes?.length\">\n        <bb-select-purpose-dropdown\n          [formControlName]=\"config?.name\"\n          [label]=\"options?.label\"\n          [purposes]=\"options?.purposes\"\n          [isOptional]=\"options?.isOptional\"\n          [helperText]=\"options?.helperText\"\n          [placeholder]=\"options?.placeholder\"\n          [searchPlaceholder]=\"options?.searchPlaceholder\"\n          [dropdownIcon]=\"options?.dropdownIcon\"\n          [selectedPurpose]=\"control.value\"\n          (selectPurpose)=\"selectPurpose($event)\"\n          data-role=\"purpose-of-payment-selector-dropdown\"\n        ></bb-select-purpose-dropdown>\n      </ng-container>\n\n      <bb-payord-validation-message\n        [control]=\"group?.controls[config.name]\"\n        [validationMessages]=\"options?.validationMessages\"\n        [label]=\"options?.label\"\n      ></bb-payord-validation-message>\n    </div>\n  </div>\n</ng-container>\n\n<ng-template #collapsedTmpl>\n  <span\n    class=\"bb-dynamic-input__collapse-btn-container\"\n    [hidden]=\"config?.hidden\"\n    [attr.aria-hidden]=\"config?.hidden\"\n  >\n    <button\n      class=\"bb-dynamic-input__collapse-btn\"\n      data-role=\"purpose-of-payment-btn\"\n      bbButton\n      [color]=\"options?.collapseOptions?.btnColor || 'link'\"\n      [buttonSize]=\"options?.collapseOptions?.btnSize\"\n      (click)=\"expand()\"\n    >\n      <bb-icon-ui\n        class=\"bb-dynamic-input__collapse-btn-icon mr-2\"\n        *ngIf=\"!options?.collapseOptions?.hideIcon\"\n        [name]=\"options?.collapseOptions?.icon || 'add'\"\n        [size]=\"options?.collapseOptions?.iconSize\"\n      >\n      </bb-icon-ui>\n      <span class=\"bb-dynamic-input__collapse-btn-label\">\n        {{ options?.collapseOptions?.label || options?.label }}\n      </span>\n    </button>\n    <bb-payord-validation-message\n      [control]=\"group?.controls[config.name]\"\n      [validationMessages]=\"options?.validationMessages\"\n      [label]=\"options?.label\"\n    ></bb-payord-validation-message>\n  </span>\n</ng-template>\n", components: [{ type: i1__namespace$5.InputTextComponent, selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i1__namespace.ӨSelectPurposeDropdownComponent, selector: "bb-select-purpose-dropdown", inputs: ["longDescription", "purposes", "isOptional", "selectedPurpose", "helperText", "placeholder", "label", "searchPlaceholder", "dropdownIcon"], outputs: ["selectPurpose"] }, { type: ValidationMessageComponent, selector: "bb-payord-validation-message", inputs: ["control", "validationMessages", "label", "id", "hideGeneric"] }, { type: i2__namespace$3.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5__namespace.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5__namespace.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i5__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5__namespace.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i7__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordPurposeOfPaymentComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-payord-purpose-of-payment',
                        templateUrl: './payord-purpose-of-payment.component.html',
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; } });

    var PayordAlertComponent = /** @class */ (function () {
        function PayordAlertComponent() {
        }
        /**
         * Initializes the component.
         *
         * @returns
         */
        PayordAlertComponent.prototype.ngOnInit = function () {
            triggerHook(i1.PaymentFormFieldHooks.onInit, this);
        };
        /**
         * Cleanups just before Angular destroys the component.
         *
         * @returns
         */
        PayordAlertComponent.prototype.ngOnDestroy = function () {
            triggerHook(i1.PaymentFormFieldHooks.onDestroy, this);
        };
        return PayordAlertComponent;
    }());
    /** @nocollapse */ PayordAlertComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordAlertComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ PayordAlertComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordAlertComponent, selector: "bb-payord-alert", ngImport: i0__namespace, template: "<ng-container *ngIf=\"!config?.hidden\">\n  <div [ngClass]=\"options?.cssClasses\" role=\"alert\">\n    <bb-alert-ui\n      *ngIf=\"options?.title && options?.modifier\"\n      [title]=\"options?.title\"\n      [modifier]=\"options?.modifier\"\n      [dismissible]=\"options?.dismissible\"\n    >\n      <p class=\"bb-block bb-block--no-margin\">{{ options?.description }}</p>\n    </bb-alert-ui>\n  </div>\n</ng-container>\n", components: [{ type: i1__namespace$d.AlertComponent, selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }], directives: [{ type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordAlertComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-payord-alert',
                        templateUrl: './payord-alert.component.html',
                    }]
            }] });

    var PayordScheduleSwitchComponent = /** @class */ (function () {
        function PayordScheduleSwitchComponent() {
            this.destroy$ = new rxjs.Subject();
            this.id = new Date().getTime();
        }
        PayordScheduleSwitchComponent.prototype.ngOnInit = function () {
            registerFormControl(this.group, this.config.name, this.options.validators, this.options.asyncValidators, this.options.defaultValue, this.config);
            registerFormControl(this.group, i1.ScheduleFields.frequency);
            registerFormControl(this.group, i1.ScheduleFields.scheduleInfo);
            triggerHook(i1.PaymentFormFieldHooks.onInit, this);
            this.setValue();
        };
        PayordScheduleSwitchComponent.prototype.ngOnDestroy = function () {
            triggerHook(i1.PaymentFormFieldHooks.onDestroy, this);
            this.destroy$.next();
            this.destroy$.complete();
        };
        PayordScheduleSwitchComponent.prototype.setValue = function () {
            var _this = this;
            var _a;
            // listen changes to reset value before hiding this component
            (_a = this.group.controls[this.config.name]) === null || _a === void 0 ? void 0 : _a.valueChanges.pipe(operators.distinctUntilChanged(), operators.takeUntil(this.destroy$)).subscribe(function (switchValue) {
                var _a, _b, _c, _d;
                // the condition is added to avoid unnecessary subscriptions when the component is hidden
                if (!_this.config.hidden) {
                    var freqValue = switchValue
                        ? (_a = _this.options.values) === null || _a === void 0 ? void 0 : _a.on
                        : (_b = _this.options.values) === null || _b === void 0 ? void 0 : _b.off;
                    var infoValue = switchValue ? _this.options.description : undefined;
                    (_c = _this.group.controls[i1.ScheduleFields.frequency]) === null || _c === void 0 ? void 0 : _c.patchValue(freqValue);
                    (_d = _this.group.controls[i1.ScheduleFields.scheduleInfo]) === null || _d === void 0 ? void 0 : _d.patchValue(infoValue);
                }
            });
        };
        return PayordScheduleSwitchComponent;
    }());
    /** @nocollapse */ PayordScheduleSwitchComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordScheduleSwitchComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ PayordScheduleSwitchComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordScheduleSwitchComponent, selector: "bb-payord-schedule-switch-ui", ngImport: i0__namespace, template: "<ng-container *ngIf=\"!config?.hidden\">\n  <div\n    class=\"form-group bb-dynamic-input bb-schedule-switch\"\n    [formGroup]=\"group\"\n    [ngClass]=\"options?.cssClasses\"\n  >\n    <div class=\"bb-inline-stack bb-stack--align-top\">\n      <div class=\"bb-inline-stack__item--spacing-md\">\n        <bb-switch-ui\n          [id]=\"'bb-payord-schedule-switch-' + id\"\n          [formControlName]=\"config.name\"\n        >\n        </bb-switch-ui>\n      </div>\n      <div>\n        <div class=\"b-block bb-block--xs bb-stack bb-schedule-switch__label\">\n          <label\n            [attr.for]=\"'bb-payord-schedule-switch-' + id\"\n            *ngIf=\"options?.label\"\n            class=\"bb-stack__item bb-stack__item--spacing-xs bb-block bb-block--no-margin\"\n            >{{ options?.label }}</label\n          >\n          <span\n            [bbTooltip]=\"options?.tooltipMessage\"\n            placement=\"bottom\"\n            [triggers]=\"'hover'\"\n          >\n            <bb-icon-ui\n              name=\"info\"\n              color=\"secondary\"\n              size=\"sm\"\n              class=\"\"\n            ></bb-icon-ui>\n          </span>\n        </div>\n        <div\n          class=\"bb-subtitle bb-text-support bb-schedule-switch__description\"\n        >\n          <span\n            *ngIf=\"options?.description && group.controls[config.name]?.value\"\n            >{{ options?.description }}</span\n          >\n        </div>\n      </div>\n    </div>\n    <bb-payord-validation-message\n      [control]=\"group?.controls[config.name]\"\n      [validationMessages]=\"options?.validationMessages\"\n      [label]=\"options?.label\"\n    ></bb-payord-validation-message>\n  </div>\n</ng-container>\n", components: [{ type: i2__namespace$5.SwitchComponent, selector: "bb-switch-ui", inputs: ["labelPosition"] }, { type: i2__namespace$3.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: ValidationMessageComponent, selector: "bb-payord-validation-message", inputs: ["control", "validationMessages", "label", "id", "hideGeneric"] }], directives: [{ type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5__namespace.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5__namespace.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i5__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5__namespace.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i6__namespace$1.TooltipDirective, selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordScheduleSwitchComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-payord-schedule-switch-ui',
                        templateUrl: './payord-schedule-switch.component.html',
                    }]
            }] });

    var PayordBeneficiaryGroupHeaderComponent = /** @class */ (function () {
        function PayordBeneficiaryGroupHeaderComponent() {
            this.iconName = 'clear';
        }
        PayordBeneficiaryGroupHeaderComponent.prototype.ngOnInit = function () {
            var _a;
            this.hideBeneficiaryFieldsControl = registerFormControl(this.group, i1.HiddenFields.hideBeneficiaryFields);
            this.initiatorIdControl = ((_a = this.group.parent) === null || _a === void 0 ? void 0 : _a.get([i1.PaymentBaseFields.initiator, i1.InitiatorFields.id]));
            triggerHook(i1.PaymentFormFieldHooks.onInit, this);
        };
        PayordBeneficiaryGroupHeaderComponent.prototype.onClearValues = function () {
            var _a, _b, _c, _d;
            var parentGroup = this.group.parent;
            var nameControl = (parentGroup.get([i1.PaymentBaseFields.initiator, i1.InitiatorFields.name]));
            if (nameControl.value) {
                nameControl.setErrors(null);
            }
            if (typeof ((_b = (_a = this.options) === null || _a === void 0 ? void 0 : _a.clearOptions) === null || _b === void 0 ? void 0 : _b.onClear) === 'function') {
                this.options.clearOptions.onClear(this.group);
            }
            else {
                i1.resetBeneficiaryDetails(this.group);
            }
            (_c = this.hideBeneficiaryFieldsControl) === null || _c === void 0 ? void 0 : _c.setValue(true);
            (_d = this.initiatorIdControl) === null || _d === void 0 ? void 0 : _d.updateValueAndValidity();
        };
        PayordBeneficiaryGroupHeaderComponent.prototype.showClearBtn = function () {
            var accountName = this.group.get(i1.CounterPartyFields.name);
            var accountNumber = this.group.get(i1.CounterPartyFields.accountNumber);
            var bankBranchCode = this.group.get([
                i1.CounterPartyFields.creditorBank,
                i1.CounterPartyFields.bankBranchCode,
            ]);
            var bic = this.group.get([
                i1.CounterPartyFields.creditorBank,
                i1.CounterPartyFields.bic,
            ]);
            return ((accountName === null || accountName === void 0 ? void 0 : accountName.value) ||
                (accountNumber === null || accountNumber === void 0 ? void 0 : accountNumber.value) ||
                (bankBranchCode === null || bankBranchCode === void 0 ? void 0 : bankBranchCode.value) ||
                (bic === null || bic === void 0 ? void 0 : bic.value));
        };
        PayordBeneficiaryGroupHeaderComponent.prototype.ngOnDestroy = function () {
            triggerHook(i1.PaymentFormFieldHooks.onDestroy, this);
        };
        return PayordBeneficiaryGroupHeaderComponent;
    }());
    /** @nocollapse */ PayordBeneficiaryGroupHeaderComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordBeneficiaryGroupHeaderComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ PayordBeneficiaryGroupHeaderComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordBeneficiaryGroupHeaderComponent, selector: "bb-payord-beneficiary-header", ngImport: i0__namespace, template: "<div\n  *ngIf=\"config?.options?.label\"\n  class=\"bb-stack\"\n  [ngClass]=\"options?.cssClasses\"\n>\n  <legend class=\"bb-inline-stack__item bb-fieldset__heading break-word\">\n    <ng-container *ngIf=\"!group?.value?.name\">{{\n      options?.label\n    }}</ng-container>\n    <ng-container *ngIf=\"group?.value?.name && options?.hasDynamicTitle\">\n      <span>{{ options?.label }}: {{ group?.value?.name }}</span>\n      <span\n        *ngIf=\"\n          group?.value?.selectedContact?.contactId &&\n          group?.value?.beneficiaryAccountName\n        \"\n      >\n        - {{ group?.value?.beneficiaryAccountName }}\n      </span>\n    </ng-container>\n  </legend>\n  <button\n    *ngIf=\"showClearBtn()\"\n    class=\"bb-stack__item--push-right\"\n    bbButton\n    color=\"link\"\n    (click)=\"onClearValues()\"\n    data-role=\"clear-beneficiary-button\"\n  >\n    <bb-icon-ui [name]=\"options?.clearOptions?.icon || iconName\"></bb-icon-ui>\n    <span *ngIf=\"options?.clearOptions?.label\">{{\n      options?.clearOptions?.label\n    }}</span>\n    <span\n      *ngIf=\"!options?.clearOptions?.label\"\n      i18n=\"@@dynamic-form-field-beneficiary-header.label\"\n      >Clear</span\n    >\n  </button>\n</div>\n", components: [{ type: i2__namespace$3.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i7__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordBeneficiaryGroupHeaderComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-payord-beneficiary-header',
                        templateUrl: './payord-beneficiary-group-header.component.html',
                    }]
            }] });

    var MultiPaymentAccountSelectorComponent = /** @class */ (function () {
        function MultiPaymentAccountSelectorComponent() {
            var _e;
            this.gc$$ = new rxjs.Subject();
            this.accountFormat = {
                length: 0,
                maskRange: [0, 0],
                segments: 0,
            };
            this.accountGroup = (_e = {},
                _e[i1.AccountField.id] = [''],
                _e[i1.AccountField.name] = [''],
                _e[i1.AccountField.accountNumber] = [''],
                _e[i1.AccountField.number] = [''],
                _e[i1.AccountField.accountType] = [''],
                _e[i1.AccountField.currency] = [''],
                _e[i1.AccountField.balance] = [''],
                _e[i1.AccountField.bankBranchCode] = [''],
                _e);
        }
        Object.defineProperty(MultiPaymentAccountSelectorComponent.prototype, "selectedAccount", {
            get: function () {
                return this._selectedAccount;
            },
            set: function (account) {
                var _a, _b, _c;
                this._selectedAccount = account;
                (_a = this.group) === null || _a === void 0 ? void 0 : _a.patchValue(account);
                (_b = this.group) === null || _b === void 0 ? void 0 : _b.markAsTouched();
                (_c = this.group) === null || _c === void 0 ? void 0 : _c.markAsDirty();
            },
            enumerable: false,
            configurable: true
        });
        MultiPaymentAccountSelectorComponent.prototype.ngOnInit = function () {
            var _this = this;
            var _a, _b, _c;
            this.registerFields();
            this.items$ = (_a = this.options) === null || _a === void 0 ? void 0 : _a.items$.pipe(operators.tap(function (items) {
                var _a, _b, _c, _d;
                _this.items = items;
                if ((_b = (_a = _this.group) === null || _a === void 0 ? void 0 : _a.get('id')) === null || _b === void 0 ? void 0 : _b.value) {
                    _this.selectedAccount = _this.findAccount((_d = (_c = _this.group) === null || _c === void 0 ? void 0 : _c.get('id')) === null || _d === void 0 ? void 0 : _d.value);
                }
            }));
            var initiator = (_c = (_b = this.group) === null || _b === void 0 ? void 0 : _b.parent) === null || _c === void 0 ? void 0 : _c.get('initiator');
            initiator === null || initiator === void 0 ? void 0 : initiator.valueChanges.pipe(operators.takeUntil(this.gc$$)).subscribe({
                next: function (account) {
                    _this._selectedAccount = _this.findAccount(account.id);
                },
            });
            triggerHook(i1.PaymentFormFieldHooks.onInit, this);
        };
        MultiPaymentAccountSelectorComponent.prototype.ngOnDestroy = function () {
            this.gc$$.next();
            this.gc$$.complete();
            triggerHook(i1.PaymentFormFieldHooks.onDestroy, this);
        };
        MultiPaymentAccountSelectorComponent.prototype.registerFields = function () {
            for (var key in this.accountGroup) {
                if (this.accountGroup.hasOwnProperty(key)) {
                    var validators = [];
                    if (key === i1.AccountField.id || key === i1.AccountField.name) {
                        validators.push(i5.Validators.required);
                    }
                    registerFormControl(this.group, key, validators, [], '');
                }
            }
        };
        MultiPaymentAccountSelectorComponent.prototype.selectItem = function (account) {
            var _a, _b, _c;
            this.selectedAccount = account;
            if ((_a = this.options) === null || _a === void 0 ? void 0 : _a.accountSelected) {
                (_b = this.options) === null || _b === void 0 ? void 0 : _b.accountSelected(account);
            }
            (_c = this.options) === null || _c === void 0 ? void 0 : _c.searchTerm$.next('');
        };
        MultiPaymentAccountSelectorComponent.prototype.onBlur = function () {
            var _a, _b;
            if ((_a = this.options) === null || _a === void 0 ? void 0 : _a.required) {
                (_b = this.group) === null || _b === void 0 ? void 0 : _b.markAllAsTouched();
            }
        };
        MultiPaymentAccountSelectorComponent.prototype.onSearch = function ($event) {
            var _a, _b;
            if ((_a = this.options) === null || _a === void 0 ? void 0 : _a.searchTerm$) {
                (_b = this.options) === null || _b === void 0 ? void 0 : _b.searchTerm$.next($event);
            }
        };
        MultiPaymentAccountSelectorComponent.prototype.findAccount = function (id) {
            var _a;
            return this.items.find(function (item) { return item.id === id; }) || ((_a = this.group) === null || _a === void 0 ? void 0 : _a.value);
        };
        return MultiPaymentAccountSelectorComponent;
    }());
    /** @nocollapse */ MultiPaymentAccountSelectorComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: MultiPaymentAccountSelectorComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ MultiPaymentAccountSelectorComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: MultiPaymentAccountSelectorComponent, selector: "bb-multi-payment-account-selector", ngImport: i0__namespace, template: "<div\n  class=\"bb-dynamic-input form-group\"\n  [ngClass]=\"options?.cssClasses\"\n  *ngIf=\"!config?.hidden\"\n>\n  <section class=\"payment-from\" [formGroup]=\"group\">\n    <label class=\"bb-form-field\">\n      <div *ngIf=\"options?.label\" class=\"bb-dynamic-input__label bb-label\">\n        <span>\n          {{ options?.label }}\n        </span>\n        <span\n          class=\"bb-dynamic-input__helper-text bb-text-support\"\n          *ngIf=\"options?.helperText\"\n          [textContent]=\"options?.helperText\"\n        >\n        </span>\n      </div>\n      <bb-account-selector-ui\n        [markFirst]=\"true\"\n        [highlight]=\"false\"\n        [filterItems]=\"options?.filterItems\"\n        [internalFiltering]=\"false\"\n        [closeOnSelect]=\"true\"\n        [dropdownPosition]=\"'bottom'\"\n        [items]=\"items$ | async\"\n        [selectedItems]=\"selectedAccount\"\n        [searchFunc]=\"options?.searchFunc\"\n        (change)=\"selectItem($event)\"\n        (blur)=\"onBlur()\"\n        (search)=\"onSearch($event)\"\n        (filterChange)=\"onSearch($event)\"\n        [placeholder]=\"options?.placeholder || ''\"\n        [attr.aria-label]=\"options?.label\"\n        [required]=\"options?.required\"\n        [attr.data-role]=\"'debit-account-selector'\"\n        [showCurrencySymbol]=\"options?.showCurrencySymbol\"\n        [showBankBranchCode]=\"options?.showBankBranchCode\"\n        [productNumberFormat]=\"accountFormat\"\n      ></bb-account-selector-ui>\n    </label>\n\n    <ng-container *ngIf=\"!selectedAccount\">\n      <bb-payord-validation-message\n        [control]=\"group?.controls['id']\"\n        [validationMessages]=\"options?.validationMessages\"\n        [label]=\"options?.label || 'Account'\"\n      ></bb-payord-validation-message>\n    </ng-container>\n\n    <div\n      class=\"bb-dynamic-input__desc bb-text-support bb-subtitle\"\n      *ngIf=\"options?.description\"\n      [textContent]=\"options?.description\"\n    ></div>\n  </section>\n</div>\n", components: [{ type: i2__namespace$1.AccountSelectorComponent, selector: "bb-account-selector-ui", inputs: ["items", "disabled", "notFoundText", "showError", "productNumberFormat", "selectedItems", "multiple", "closeOnSelect", "searchable", "clearable", "placeholder", "loading", "dropdownPosition", "disableScrollEnd", "highlight", "filterItems", "markFirst", "internalFiltering", "virtualScroll", "required", "typeahead", "minTermLength", "typeToSearchText", "aria-describedby", "aria-labelledby", "aria-invalid", "searchFunc", "showCurrencySymbol", "showBankBranchCode", "groupByFn", "groupValueFn", "size", "compareItemsWith"], outputs: ["search", "clearSearch", "scroll", "scrollToEnd", "remove", "change", "filterChange", "focus", "blur"] }, { type: ValidationMessageComponent, selector: "bb-payord-validation-message", inputs: ["control", "validationMessages", "label", "id", "hideGeneric"] }], directives: [{ type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i5__namespace.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5__namespace.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }], pipes: { "async": i4__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: MultiPaymentAccountSelectorComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-multi-payment-account-selector',
                        templateUrl: './multipayment-account-selector.component.html',
                    }]
            }] });

    var PayordContactSelectorComponent = /** @class */ (function () {
        function PayordContactSelectorComponent() {
            this.listStateType = i1.ListState;
            this.inputFocused = false;
            this.destroy$ = new rxjs.Subject();
            this.searchQuery = '';
            this.defaultEmptyStateTitle = $localize(templateObject_1$1 || (templateObject_1$1 = __makeTemplateObject([":@@payord.contact.selector.ui.contacts.nothing-found.label:No contacts"], [":@@payord.contact.selector.ui.contacts.nothing-found.label:No contacts"])));
            this.defaultEmptyStateSubtitle = $localize(templateObject_2 || (templateObject_2 = __makeTemplateObject([":@@payord.contact.selector.ui.contacts.nothing-found.subtitle:You don't have any contacts to be displayed."], [":@@payord.contact.selector.ui.contacts.nothing-found.subtitle:You don't have any contacts to be displayed."])));
            this.defaultErrorStateTitle = $localize(templateObject_3 || (templateObject_3 = __makeTemplateObject([":@@payord.contact.selector.ui.contacts.error.label:Oops! Something went wrong"], [":@@payord.contact.selector.ui.contacts.error.label:Oops! Something went wrong"])));
            this.defaultErrorStateSubtitle = $localize(templateObject_4 || (templateObject_4 = __makeTemplateObject([":@@payord.contact.selector.ui.contacts.error.subtitle:We are unable to load your contacts Please try again."], [":@@payord.contact.selector.ui.contacts.error.subtitle:We are unable to load your contacts Please try again."])));
        }
        PayordContactSelectorComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.registerFields();
            triggerHook(i1.PaymentFormFieldHooks.onInit, this);
            this.listState = i1.ListState.LOADING;
            this.contacts$ = this.options.items$.pipe(operators.map(function (response) { return response instanceof http.HttpErrorResponse ? null : response; }), operators.map(function (contacts) { return _this.options.mapItems && (contacts === null || contacts === void 0 ? void 0 : contacts.length)
                ? _this.options.mapItems(contacts)
                : contacts; }), operators.map(function (contacts) { return contacts === null || contacts === void 0 ? void 0 : contacts.map(function (contact) { return (Object.assign(Object.assign({}, contact), { transferKey: _this.getTransferEntry(contact) })); }); }), operators.tap(function (contacts) {
                var _a, _b;
                _this.setStatus(contacts);
                // Close dropdown if there is no result by search
                if (_this.inputFocused && _this.searchQuery) {
                    contacts && contacts.length
                        ? (_a = _this.dropdownItem) === null || _a === void 0 ? void 0 : _a.open()
                        : (_b = _this.dropdownItem) === null || _b === void 0 ? void 0 : _b.close();
                }
            }));
            // Sets schemeName on value change in accountNumber field
            this.group.valueChanges
                .pipe(operators.takeUntil(this.destroy$), operators.debounceTime(1000), operators.map(function (_f) {
                var accountNumber = _f.accountNumber;
                return accountNumber;
            }))
                .subscribe(this.setScheme.bind(this));
        };
        PayordContactSelectorComponent.prototype.registerFields = function () {
            registerFormControl(this.group, this.config.name, this.options.validators, this.options.asyncValidators, this.options.defaultValue);
            registerFormControl(this.group, i1.CounterPartyFields.role, [], [], 'CREDITOR');
            registerFormControl(this.group, i1.CounterPartyFields.selectedContact, [], []);
            registerFormControl(this.group, i1.CounterPartyFields.schemeName);
            registerFormControl(this.group, i1.HiddenFields.selectedBeneficiary);
        };
        PayordContactSelectorComponent.prototype.fetchCreditorItems = function (params) {
            var _a;
            if ((_a = this.options) === null || _a === void 0 ? void 0 : _a.fetchItems$) {
                this.options.fetchItems$.next(params);
            }
        };
        PayordContactSelectorComponent.prototype.onSelectContact = function (_event, contact) {
            var _a, _b, _c, _d, _e;
            (_a = this.group.get(this.config.name)) === null || _a === void 0 ? void 0 : _a.patchValue(contact.name);
            (_b = this.group
                .get(i1.CounterPartyFields.accountNumber)) === null || _b === void 0 ? void 0 : _b.patchValue((_c = this.getTransferEntry(contact)) === null || _c === void 0 ? void 0 : _c.value);
            (_d = this.group.get([i1.HiddenFields.selectedBeneficiary])) === null || _d === void 0 ? void 0 : _d.patchValue(contact);
            (_e = this.dropdownItem) === null || _e === void 0 ? void 0 : _e.close();
            this.setContactId(contact);
        };
        PayordContactSelectorComponent.prototype.handleSearch = function (query) {
            var _a;
            if (this.inputFocused) {
                this.searchQuery = query;
                this.fetchCreditorItems({
                    params: { query: query },
                    type: i1.BeneficiaryList.CONTACTS,
                });
                if (!query) {
                    (_a = this.dropdownItem) === null || _a === void 0 ? void 0 : _a.close();
                }
            }
        };
        PayordContactSelectorComponent.prototype.setStatus = function (contacts) {
            if (!contacts) {
                this.listState = i1.ListState.ERROR;
            }
            else if (!contacts.length) {
                this.listState = i1.ListState.EMPTY;
            }
            else if (contacts.length) {
                this.listState = i1.ListState.LIST;
            }
        };
        PayordContactSelectorComponent.prototype.onClear = function () {
            var _a;
            (_a = this.group.get(this.config.name)) === null || _a === void 0 ? void 0 : _a.reset();
            this.fetchCreditorItems({ type: i1.BeneficiaryList.CONTACTS });
        };
        PayordContactSelectorComponent.prototype.focusHandler = function () {
            this.inputFocused = true;
        };
        PayordContactSelectorComponent.prototype.onBlur = function () {
            this.inputFocused = false;
        };
        PayordContactSelectorComponent.prototype.setContactId = function (contact) {
            var _a;
            (_a = this.group
                .get([i1.CounterPartyFields.selectedContact])) === null || _a === void 0 ? void 0 : _a.patchValue({ contactId: contact === null || contact === void 0 ? void 0 : contact.id });
        };
        /**
         * Sets schemeName for payment order request payload
         * Checks entered value with regex pattern to detect if it is email, phone number or accountNumber
         */
        PayordContactSelectorComponent.prototype.setScheme = function (counterPartyIdentification) {
            var _a;
            if (!counterPartyIdentification)
                return;
            var scheme = (_a = this.options.contactSchemes) === null || _a === void 0 ? void 0 : _a.find(function (_f) {
                var regex = _f.regex;
                return regex === null || regex === void 0 ? void 0 : regex.test(counterPartyIdentification);
            });
            var schemeValue;
            switch (scheme === null || scheme === void 0 ? void 0 : scheme.name) {
                case i1.ContactScheme.email:
                    schemeValue = paymentOrder.SchemeNames.EMAIL;
                    break;
                case i1.ContactScheme.phoneNumber:
                    schemeValue = paymentOrder.SchemeNames.MOBILE;
                    break;
                case i1.ContactScheme.accountNumber:
                    schemeValue = paymentOrder.SchemeNames.BBAN;
                    break;
            }
            if (schemeValue) {
                this.group.controls[i1.CounterPartyFields.schemeName].patchValue(schemeValue, { emitEvent: false });
            }
        };
        /**
         * Return first scheme value of contact. That allows customer to prioritize either email, phone number or account number for a contact.
         * For instance [email, phoneNumber] will return mail if there is a mail value in contact item, otherwise will check phoneNumber.
         * This is
         */
        PayordContactSelectorComponent.prototype.getTransferEntry = function (contact) {
            var _a, _b;
            var defaultScheme = i1.ContactScheme.accountNumber;
            var firstScheme = ((_b = (_a = this.options.contactSchemes) === null || _a === void 0 ? void 0 : _a.find(function (scheme) { return !!contact.accounts[0][scheme.name]; })) === null || _b === void 0 ? void 0 : _b.name) || defaultScheme;
            return { scheme: firstScheme, value: contact.accounts[0][firstScheme] };
        };
        PayordContactSelectorComponent.prototype.ngOnDestroy = function () {
            this.destroy$.next();
            this.destroy$.complete();
            triggerHook(i1.PaymentFormFieldHooks.onDestroy, this);
        };
        return PayordContactSelectorComponent;
    }());
    /** @nocollapse */ PayordContactSelectorComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordContactSelectorComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ PayordContactSelectorComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordContactSelectorComponent, selector: "bb-payord-contact-selector", viewQueries: [{ propertyName: "dropdownItem", first: true, predicate: ["dd"], descendants: true }], ngImport: i0__namespace, template: "<div\n  class=\"form-group bb-dynamic-input\"\n  [ngClass]=\"options?.cssClasses\"\n  *ngIf=\"!config?.hidden\"\n>\n  <label *ngIf=\"options?.label\" [for]=\"'payord-contact-selector-search-box'\"\n    >{{ options?.label }}\n  </label>\n\n  <div\n    ngbDropdown\n    #dd=\"ngbDropdown\"\n    class=\"full-width-typeahead bb-payment-card-state bb-block bb-block--md\"\n  >\n    <span\n      class=\"bb-dynamic-input__helper-text bb-text-support\"\n      *ngIf=\"options?.helperText\"\n      [attr.id]=\"'payord-contact-selector__helper-text'\"\n      [textContent]=\"options?.helperText\"\n    >\n    </span>\n\n    <bb-search-box-ui\n      ngbDropdownAnchor\n      (clear)=\"onClear()\"\n      (focus)=\"focusHandler()\"\n      (blur)=\"onBlur()\"\n      [formControl]=\"group.controls[config.name]\"\n      [placeholder]=\"options?.placeholder\"\n      [squareBorder]=\"options?.squareBorder\"\n      [autocomplete]=\"options?.autocomplete || 'off'\"\n      (ngModelChange)=\"handleSearch(group.controls[config.name].value)\"\n      [showClear]=\"true\"\n      [id]=\"'payord-contact-selector-search-box'\"\n      [attr.data-role]=\"'contact-selector-search-box'\"\n    >\n      <button\n        bbButton\n        ngbDropdownToggle\n        color=\"unstyled\"\n        [attr.aria-label]=\"'contact dropdown button'\"\n      >\n        <bb-icon-ui name=\"contacts\"></bb-icon-ui>\n      </button>\n    </bb-search-box-ui>\n\n    <div\n      ngbDropdownMenu\n      class=\"dropdown-menu bb-product-selector__dropdown-menu dropdown-menu-right pre-scrollable-typeahead\"\n    >\n      <div class=\"dropdown-menu-inner-container\">\n        <!-- CONTACTS -->\n        <ng-container *ngIf=\"contacts$ | async as contacts\">\n          <ng-container *ngIf=\"listState === listStateType.LIST\">\n            <ng-container *ngFor=\"let contact of contacts\">\n              <ng-container\n                *ngTemplateOutlet=\"contactTemp; context: { $implicit: contact }\"\n              >\n              </ng-container>\n            </ng-container>\n          </ng-container>\n        </ng-container>\n        <!-- TODO UPDATE EMPTY AND ERROR STATES -->\n        <ng-container *ngIf=\"listState === listStateType.ERROR\">\n          <ng-container *ngTemplateOutlet=\"errorState\"></ng-container>\n        </ng-container>\n        <ng-container *ngIf=\"listState === listStateType.EMPTY\">\n          <ng-container *ngTemplateOutlet=\"emptyState\"></ng-container>\n        </ng-container>\n        <ng-container *ngIf=\"listState === listStateType.LOADING\">\n          <ng-container *ngTemplateOutlet=\"loading\"></ng-container>\n        </ng-container>\n      </div>\n    </div>\n    <bb-payord-validation-message\n      [control]=\"group?.controls[config.name]\"\n      [validationMessages]=\"options?.validationMessages\"\n      [label]=\"options?.label || 'Beneficiary name'\"\n    ></bb-payord-validation-message>\n  </div>\n</div>\n\n<ng-template #contactTemp let-contact>\n  <button\n    role=\"menuitem\"\n    type=\"button\"\n    class=\"bb-stack\"\n    (click)=\"onSelectContact($event, contact)\"\n    ngbDropdownItem\n  >\n    <div class=\"bb-stack__item\">\n      <span class=\"sr-only\" i18n=\"@@payord.contact.selector.ui.group.contacts\"\n        >Contact</span\n      >\n      <bb-icon-ui\n        size=\"xl\"\n        class=\"bb-stack text-muted\"\n        name=\"account-box\"\n      ></bb-icon-ui>\n    </div>\n\n    <div\n      class=\"text-left bb-stack__item\"\n      *ngIf=\"contact?.transferKey as transferKey\"\n    >\n      <span\n        class=\"sr-only\"\n        i18n=\"@@payord.contact.selector.ui.contact.account.name.label\"\n        id=\"contact_accountNameLabel\"\n      >\n        Contact name:\n      </span>\n      <div attr.aria-labelledby=\"contact_accountNameLabel\" class=\"bb-text-bold\">\n        {{ contact?.name }}\n      </div>\n      <span\n        class=\"sr-only\"\n        i18n=\"@@payord.contact.selector.ui.contact.account.number.label\"\n        id=\"contact_accountNumberLabel\"\n      >\n        { transferKey.scheme, select, accountNumber { Account Number } email {\n        Email } phoneNumber { Phone Number } }\n      </span>\n      <div\n        class=\"text-dark\"\n        *ngIf=\"contact?.accounts[0]?.accountNumber\"\n        attr.aria-labelledby=\"contact_accountNumberLabel\"\n        class=\"bb-subtitle bb-text-support\"\n      >\n        {{ transferKey.value }}\n      </div>\n    </div>\n  </button>\n</ng-template>\n\n<ng-template #emptyState>\n  <bb-empty-state-ui\n    data-role=\"contacts-empty-state\"\n    iconSize=\"xxl\"\n    class=\"bb-state-container\"\n    iconModifier=\"contacts\"\n    [title]=\"options?.emptyStateTitle || defaultEmptyStateTitle\"\n    [subtitle]=\"options?.emptyStateSubtitle || defaultEmptyStateSubtitle\"\n  >\n  </bb-empty-state-ui>\n</ng-template>\n<ng-template #errorState>\n  <bb-empty-state-ui\n    data-role=\"contacts-error-state\"\n    iconSize=\"xxl\"\n    class=\"bb-state-container\"\n    iconModifier=\"error-outline\"\n    [title]=\"options?.errorStateTitle || defaultErrorStateTitle\"\n    [subtitle]=\"options?.errorStateSubtitle || defaultErrorStateSubtitle\"\n  >\n  </bb-empty-state-ui>\n</ng-template>\n\n<ng-template #loading>\n  <div class=\"bb-state-container\">\n    <bb-loading-indicator-ui loaderSize=\"md\"></bb-loading-indicator-ui>\n  </div>\n</ng-template>\n", components: [{ type: i1__namespace$e.SearchBoxComponent, selector: "bb-search-box-ui", inputs: ["placeholder", "maxLength", "squareBorder", "typeaheadOptions", "showSearch", "showClear", "searchLabel", "clearLabel", "autocomplete"], outputs: ["submit", "clear", "valueChange"] }, { type: i2__namespace$3.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: ValidationMessageComponent, selector: "bb-payord-validation-message", inputs: ["control", "validationMessages", "label", "id", "hideGeneric"] }, { type: i6__namespace.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }, { type: i4__namespace$1.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }], directives: [{ type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i7__namespace$1.NgbDropdown, selector: "[ngbDropdown]", inputs: ["open", "placement", "container", "autoClose", "display", "dropdownClass"], outputs: ["openChange"], exportAs: ["ngbDropdown"] }, { type: i7__namespace$1.NgbDropdownAnchor, selector: "[ngbDropdownAnchor]" }, { type: i5__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5__namespace.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i7__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i7__namespace$1.NgbDropdownToggle, selector: "[ngbDropdownToggle]" }, { type: i7__namespace$1.NgbDropdownMenu, selector: "[ngbDropdownMenu]" }, { type: i4__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i4__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i7__namespace$1.NgbDropdownItem, selector: "[ngbDropdownItem]", inputs: ["disabled"] }], pipes: { "async": i4__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordContactSelectorComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-payord-contact-selector',
                        templateUrl: './payord-contact-selector.component.html',
                    }]
            }], propDecorators: { dropdownItem: [{
                    type: i0.ViewChild,
                    args: ['dd']
                }] } });
    var templateObject_1$1, templateObject_2, templateObject_3, templateObject_4;

    var _a;
    /**
     * Payment component field types
     */
    var PaymentComponentsMap = (_a = {},
        _a[i1.PaymentComponents.text] = PayordTextboxComponent,
        _a[i1.PaymentComponents.textarea] = PayordTextAreaComponent,
        _a[i1.PaymentComponents.address] = PayordAddressComponent,
        _a[i1.PaymentComponents.select] = PayordSelectComponent,
        _a[i1.PaymentComponents.radio] = PayordRadioComponent,
        _a[i1.PaymentComponents.debitAccountSelector] = PayordDebitAccountSelectorComponent,
        _a[i1.PaymentComponents.beneficiarySelector] = PayordBeneficiarySelectorComponent,
        _a[i1.PaymentComponents.schedule] = PayordScheduleComponent,
        _a[i1.PaymentComponents.amount] = PayordAmountComponent,
        _a[i1.PaymentComponents.sanctionedCurrencyAmount] = PayordSanctionedCurrencyAmountComponent,
        _a[i1.PaymentComponents.checkbox] = PayordCheckboxComponent,
        _a[i1.PaymentComponents.switch] = PayordSwitchComponent,
        _a[i1.PaymentComponents.date] = PayordDateComponent,
        _a[i1.PaymentComponents.number] = PayordNumberComponent,
        _a[i1.PaymentComponents.phone] = PayordPhoneComponent,
        _a[i1.PaymentComponents.selectPaymentOption] = PayordSelectPaymentOptionComponent,
        _a[i1.PaymentComponents.paymentCost] = PayordPaymentCostComponent,
        _a[i1.PaymentComponents.chargeBearer] = PayordChargeBearerComponent,
        _a[i1.PaymentComponents.internalAccountSelector] = PayordInternalAccountSelectorComponent,
        _a[i1.PaymentComponents.compactAmount] = PayordCompactAmountComponent,
        _a[i1.PaymentComponents.scheduleHeader] = PayordScheduleHeaderComponent,
        _a[i1.PaymentComponents.buttonGroup] = PayordButtonGroupComponent,
        _a[i1.PaymentComponents.countrySelector] = PayordCountrySelectorComponent,
        _a[i1.PaymentComponents.sanctionedCountrySelector] = PayordSanctionedCountrySelectorComponent,
        _a[i1.PaymentComponents.multiPaymentCard] = MultiPaymentCardComponent,
        /** @depreacted Will be removed in widget collection v3.11.0 */
        _a[i1.PaymentComponents.creditDebitSelector] = PayordCreditDebitSelectorComponent,
        _a[i1.PaymentComponents.internalAmountOptions] = PayordInternalAmountOptionsComponent,
        _a[i1.PaymentComponents.header] = PayordHeaderComponent,
        _a[i1.PaymentComponents.purposeOfPayment] = PayordPurposeOfPaymentComponent,
        _a[i1.PaymentComponents.alert] = PayordAlertComponent,
        _a[i1.PaymentComponents.scheduleSwitch] = PayordScheduleSwitchComponent,
        _a[i1.PaymentComponents.beneficiaryGroupHeader] = PayordBeneficiaryGroupHeaderComponent,
        _a[i1.PaymentComponents.multiPaymentAccountSelector] = MultiPaymentAccountSelectorComponent,
        _a[i1.PaymentComponents.contactSelector] = PayordContactSelectorComponent,
        _a[i1.PaymentComponents.accountSelector] = PayordDebitAccountSelectorComponent,
        _a);

    var ComponentsFactoryService = /** @class */ (function () {
        function ComponentsFactoryService() {
            this.componentsMap = Object.assign({}, PaymentComponentsMap);
        }
        /**
         * Registers custom fields
         *
         * @param components Payment components
         * @returns
         */
        ComponentsFactoryService.prototype.registerCustomFields = function (components) {
            if (components === void 0) { components = {}; }
            for (var key in components) {
                if (components.hasOwnProperty(key)) {
                    this.componentsMap[key] = components[key];
                }
            }
        };
        /**
         * Registers custom fields for payment configs
         *
         * @param paymentConfigs Payment configurations
         * @returns
         */
        ComponentsFactoryService.prototype.registerCustomFieldsForPaymentConfigs = function (paymentConfigs) {
            var e_1, _a;
            try {
                for (var paymentConfigs_1 = __values(paymentConfigs), paymentConfigs_1_1 = paymentConfigs_1.next(); !paymentConfigs_1_1.done; paymentConfigs_1_1 = paymentConfigs_1.next()) {
                    var config = paymentConfigs_1_1.value;
                    if (config.customFields) {
                        this.registerCustomFields(config.customFields);
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (paymentConfigs_1_1 && !paymentConfigs_1_1.done && (_a = paymentConfigs_1.return)) _a.call(paymentConfigs_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        };
        /**
         * Gets a form field
         *
         * @param formFieldType Type of the form field
         * @returns
         */
        ComponentsFactoryService.prototype.getFormField = function (formFieldType) {
            return this.componentsMap[formFieldType] || PayordTextboxComponent;
        };
        return ComponentsFactoryService;
    }());
    /** @nocollapse */ ComponentsFactoryService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ComponentsFactoryService, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ ComponentsFactoryService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ComponentsFactoryService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ComponentsFactoryService, decorators: [{
                type: i0.Injectable
            }] });

    var PayordGroupComponent = /** @class */ (function () {
        function PayordGroupComponent(visibilityService) {
            this.visibilityService = visibilityService;
            this.gc$ = new i0.EventEmitter();
        }
        PayordGroupComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.eventName = this.config.parent
                ? this.config.parent + "." + this.config.name
                : this.config.name;
            this.visibilityService.show$
                .pipe(operators.map(function (_j) {
                var name = _j.name, items = _j.items;
                return mapDependentItems(items, name).find(function (dep) { return dep.parent === _this.eventName; });
            }), operators.takeUntil(this.gc$))
                .subscribe(function (data) {
                var _a;
                if ((_a = data === null || data === void 0 ? void 0 : data.items) === null || _a === void 0 ? void 0 : _a.length) {
                    _this.showFields(data.items);
                }
            });
            this.visibilityService.hide$
                .pipe(operators.map(function (_j) {
                var name = _j.name, items = _j.items;
                return mapDependentItems(items, name).find(function (dep) { return dep.parent === _this.eventName; });
            }), operators.takeUntil(this.gc$))
                .subscribe(function (data) {
                var _a;
                if ((_a = data === null || data === void 0 ? void 0 : data.items) === null || _a === void 0 ? void 0 : _a.length) {
                    _this.hideFields(data.items);
                }
            });
        };
        PayordGroupComponent.prototype.scanHideableItems = function (items) {
            var hideableFields = {};
            items.forEach(function (itemName) {
                hideableFields[itemName] = true;
            });
            return hideableFields;
        };
        PayordGroupComponent.prototype.showFields = function (fieldsNames) {
            var _this = this;
            var hideableFields = this.scanHideableItems(fieldsNames);
            var control;
            this.config.fields.forEach(function (field) {
                var _a;
                if (hideableFields[field.name]) {
                    field.hidden = false;
                    control = _this.group.get(_this.config.name + "." + field.name);
                    if (control && ((_a = field === null || field === void 0 ? void 0 : field.options) === null || _a === void 0 ? void 0 : _a.isConditionalMandatory)) {
                        control.setValidators(__spreadArray([
                            i5.Validators.required
                        ], __read((field.options.validators || []))));
                        control.setAsyncValidators(__spreadArray([], __read((field.options.asyncValidators || []))));
                        control.updateValueAndValidity();
                    }
                }
            });
        };
        PayordGroupComponent.prototype.hideFields = function (fieldsNames) {
            var _this = this;
            var hideableFields = this.scanHideableItems(fieldsNames);
            var control;
            this.config.fields.forEach(function (field) {
                var _a, _b, _c, _d, _e, _f, _g, _h;
                if (hideableFields[field.name]) {
                    field.hidden = true;
                    control = ((_a = field === null || field === void 0 ? void 0 : field.options) === null || _a === void 0 ? void 0 : _a.mapToField)
                        ? _this.getMappedField(field.name, field.options.mapToField)
                        : _this.group.get(_this.config.name + "." + field.name);
                    if (control && !((_b = field === null || field === void 0 ? void 0 : field.options) === null || _b === void 0 ? void 0 : _b.keepValueOnHidden)) {
                        if ((_c = field === null || field === void 0 ? void 0 : field.options) === null || _c === void 0 ? void 0 : _c.isConditionalMandatory) {
                            control.setValidators(null);
                            control.setAsyncValidators(null);
                            control.updateValueAndValidity();
                        }
                        control.reset();
                        if ((_d = field === null || field === void 0 ? void 0 : field.options) === null || _d === void 0 ? void 0 : _d.defaultValue) {
                            control.patchValue(field.options.defaultValue);
                        }
                    }
                    _this.hideNestedField(field);
                    if ((_f = (_e = field) === null || _e === void 0 ? void 0 : _e.fields) === null || _f === void 0 ? void 0 : _f.length) {
                        (_h = (_g = field) === null || _g === void 0 ? void 0 : _g.fields) === null || _h === void 0 ? void 0 : _h.forEach(function (nestedField) { return _this.hideNestedField(nestedField); });
                    }
                }
            });
        };
        PayordGroupComponent.prototype.hideNestedField = function (field) {
            var _this = this;
            var _a, _b;
            if (((_a = field === null || field === void 0 ? void 0 : field.options) === null || _a === void 0 ? void 0 : _a.dependants) && !((_b = field === null || field === void 0 ? void 0 : field.options) === null || _b === void 0 ? void 0 : _b.keepDependantsOnHide)) {
                mapDependentItems(field.options.dependants, field.parent).forEach(function (_j) {
                    var parent = _j.parent, items = _j.items;
                    _this.visibilityService.hideItems(parent, items);
                });
            }
        };
        PayordGroupComponent.prototype.getMappedField = function (fieldName, mapToField) {
            var parent = this.group;
            var control;
            while (parent) {
                control = parent.get(mapToField + "." + fieldName);
                if (control) {
                    return control;
                }
                parent = parent.parent;
            }
            return null;
        };
        PayordGroupComponent.prototype.ngOnDestroy = function () {
            this.gc$.next();
            this.gc$.complete();
        };
        return PayordGroupComponent;
    }());
    /** @nocollapse */ PayordGroupComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordGroupComponent, deps: [{ token: VisibilityService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ PayordGroupComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordGroupComponent, selector: "bb-payord-group", inputs: { config: "config", group: "group" }, ngImport: i0__namespace, template: "<ng-container *ngIf=\"!config?.hidden\">\n  <div\n    *ngIf=\"config?.cssClasses?.length; else defaultTmpl\"\n    [ngClass]=\"config?.cssClasses\"\n  >\n    <ng-container *ngTemplateOutlet=\"defaultTmpl\"></ng-container>\n  </div>\n</ng-container>\n\n<ng-template #defaultTmpl>\n  <ng-container *ngIf=\"!config.collapsible; else collapsibleTmpl\">\n    <bb-fieldset-ui\n      *ngIf=\"config?.title; else subGroup\"\n      [heading]=\"config?.title\"\n    >\n      <div *ngIf=\"config.subTitle\" class=\"bb-fieldset\">\n        {{ config?.subTitle }}\n      </div>\n      <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n    </bb-fieldset-ui>\n    <ng-container *ngIf=\"config?.separator\">\n      <bb-separator\n        [options]=\"config.separator\"\n        class=\"d-block mt-5\"\n      ></bb-separator>\n    </ng-container>\n  </ng-container>\n</ng-template>\n\n<ng-template #subGroup>\n  <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n</ng-template>\n\n<ng-template #collapsibleTmpl>\n  <fieldset class=\"bb-fieldset\">\n    <bb-collapsible-ui data-role=\"schedule-toggle\" #collapse>\n      <ng-template bbCollapsibleHeader let-toggle=\"toggle\" let-isOpen=\"isOpen\">\n        <div\n          (click)=\"collapse.toggle()\"\n          [attr.aria-expanded]=\"isOpen\"\n          class=\"bb-stack justify-content-between col-12\"\n        >\n          <legend>\n            <span class=\"bb-label\">{{ config?.title }}</span>\n          </legend>\n          <button\n            bbButton\n            color=\"outline\"\n            [attr.aria-label]=\"config?.title\"\n            [attr.aria-expanded]=\"isOpen\"\n            (click)=\"collapse.toggle(); $event.stopPropagation()\"\n          >\n            <bb-icon-ui\n              [name]=\"isOpen ? 'toggle-up' : 'toggle-down'\"\n            ></bb-icon-ui>\n          </button>\n        </div>\n        <hr class=\"mt-0 mx-3\" />\n      </ng-template>\n      <ng-template bbCollapsibleBody>\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n      </ng-template>\n    </bb-collapsible-ui>\n  </fieldset>\n</ng-template>\n\n<ng-template #content>\n  <ng-content></ng-content>\n</ng-template>\n", components: [{ type: i2__namespace$7.FieldsetComponent, selector: "bb-fieldset-ui", inputs: ["heading", "disabled"] }, { type: i1__namespace.ӨSeparatorComponent, selector: "bb-separator", inputs: ["options"] }, { type: i1__namespace$3.CollapsibleComponent, selector: "bb-collapsible-ui", inputs: ["recreateBodyContent", "hasChevron", "isOpen"], outputs: ["isOpenChange"] }, { type: i2__namespace$3.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i4__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i1__namespace$3.CollapsibleHeaderDirective, selector: "ng-template[bbCollapsibleHeader]" }, { type: i7__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i1__namespace$3.CollapsibleBodyDirective, selector: "ng-template[bbCollapsibleBody]" }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordGroupComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-payord-group',
                        templateUrl: './payord-group.component.html',
                    }]
            }], ctorParameters: function () { return [{ type: VisibilityService }]; }, propDecorators: { config: [{
                    type: i0.Input
                }], group: [{
                    type: i0.Input
                }] } });

    var PaymentFormFieldDirective = /** @class */ (function () {
        function PaymentFormFieldDirective(resolver, container, componentsFactory) {
            this.resolver = resolver;
            this.container = container;
            this.componentsFactory = componentsFactory;
        }
        PaymentFormFieldDirective.prototype.ngOnInit = function () {
            var component = this.componentsFactory.getFormField(this.config.type);
            var factory = this.resolver.resolveComponentFactory(component);
            this.component = this.container.createComponent(factory);
            this.component.instance.config = this.config;
            this.component.instance.group = this.group;
            this.component.instance.options = this.options;
        };
        return PaymentFormFieldDirective;
    }());
    /** @nocollapse */ PaymentFormFieldDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentFormFieldDirective, deps: [{ token: i0__namespace.ComponentFactoryResolver }, { token: i0__namespace.ViewContainerRef }, { token: ComponentsFactoryService }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ PaymentFormFieldDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: PaymentFormFieldDirective, selector: "[bbPaymentFormField]", inputs: { options: "options", config: "config", group: "group" }, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentFormFieldDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbPaymentFormField]',
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ComponentFactoryResolver }, { type: i0__namespace.ViewContainerRef }, { type: ComponentsFactoryService }]; }, propDecorators: { options: [{
                    type: i0.Input
                }], config: [{
                    type: i0.Input
                }], group: [{
                    type: i0.Input
                }] } });

    var PayordFormComponent = /** @class */ (function () {
        function PayordFormComponent(fb, componentsFactory, formEl) {
            this.fb = fb;
            this.componentsFactory = componentsFactory;
            this.formEl = formEl;
            /**
             * Event emitted when the form is submitted.
             */
            this.submitted = new i0.EventEmitter();
            /**
             * Event emitted when the form is reset.
             */
            this.clear = new i0.EventEmitter();
            /**
             * The flag to denote if the widget is rendered inside a modal.
             */
            this.isModalView = false;
            /**
             * The flag to denote if the widget is rendered in payment template mode.
             */
            this.isTemplateMode = false;
            /**
             * The flag to denote if it is a debit payment.
             */
            this.isDebitPayment = false;
            /**
             * The flag to denote if the widget is rendered in payment edit mode.
             */
            this.isEditPaymentModal = false;
            /**
             * Payment mode type.
             */
            this.paymentMode = i1.PaymentMode.CREATE_PAYMENT;
            /**
             * Event emitter when we cancel payment editing (sends form to check if it's not changed)
             */
            this.editPaymentCancel = new i0.EventEmitter();
            /**
             * Event emitter when we submit editing payment (sends form)
             */
            this.editPaymentSubmit = new i0.EventEmitter();
            this.isSubmitting$ = new rxjs.BehaviorSubject(false);
            this.isSubmittingShared$ = this.isSubmitting$.asObservable().pipe(operators.shareReplay(1));
            this.controls = [];
            this.paymentModeType = i1.PaymentMode;
        }
        Object.defineProperty(PayordFormComponent.prototype, "submitting", {
            /**
             * Flag that denotes if form is being submitted
             */
            set: function (isSubmitting) {
                this.isSubmitting$.next(isSubmitting);
            },
            enumerable: false,
            configurable: true
        });
        PayordFormComponent.prototype.scrollToError = function () {
            var _a;
            i1.focusErrorElement((_a = this.formEl) === null || _a === void 0 ? void 0 : _a.nativeElement, 'small.bb-input-validation-message');
        };
        PayordFormComponent.prototype.ngOnInit = function () {
            this.form = this.formItem || this.fb.group({});
            this.buttonGroupConfig = this.getButtonGroupConfig();
            this.componentsFactory.registerCustomFields(this.config.customFields);
            this.createFormFields(this.config.fields, this.form, this.controls);
            registerFormControl(this.form, 'paymentType', [], [], this.config.paymentType);
            this.defaultBankCodeSettingControl = registerFormControl(this.form, 'defaultBankCodeSetting');
            this.inputFormSettingControl =
                this.form.get(i1.PaymentOptionFields.inputFormFromSettings) ||
                    registerFormControl(this.form, i1.PaymentOptionFields.inputFormFromSettings);
            if (this.isTemplateMode) {
                this.templateNameControl = registerFormControl(this.form, i1.PaymentTemplateFields.templateName, [i5.Validators.required]);
                if (this.paymentMode === i1.PaymentMode.EDIT_TEMPLATE) {
                    registerFormControl(this.form, i1.PaymentTemplateFields.paymentTemplateId);
                }
            }
            if (this.isDebitPayment) {
                registerFormControl(this.form, i1.HiddenFields.isDebitPayment, [], [], true);
            }
            this.listenDefaultBankCodeSettingChange();
            this.listenFormSettingChange();
        };
        PayordFormComponent.prototype.ngOnDestroy = function () {
            if (this.inputFormSettingSubscription) {
                this.inputFormSettingSubscription.unsubscribe();
            }
            if (this.defaultBankCodeSettingSubscription) {
                this.defaultBankCodeSettingSubscription.unsubscribe();
            }
        };
        PayordFormComponent.prototype.createFormFields = function (arr, _group, controlsArr, parentName) {
            var _this = this;
            arr.forEach(function (control) {
                var mappedField = control.options && control.options.mapToField;
                var group = mappedField
                    ? _this.form.get(mappedField)
                    : _group;
                var parent = mappedField || parentName;
                var subArray = [];
                if (control.fields instanceof Array) {
                    var subGroup = group.get(control.name) || _this.fb.group({});
                    _this.createFormFields(control.fields, subGroup, subArray, parent ? parent + "." + control.name : control.name);
                    group.addControl(control.name, subGroup);
                    controlsArr.push(Object.assign(Object.assign({}, control), { fields: subArray, parent: parentName }));
                }
                else {
                    controlsArr.push(Object.assign(Object.assign({}, control), { parent: parent }));
                }
            });
        };
        PayordFormComponent.prototype.getFormGroup = function (field) {
            return this.form.get(field.parent) || this.form;
        };
        PayordFormComponent.prototype.getButtonGroupConfig = function () {
            return {
                type: i1.PaymentComponents.buttonGroup,
                name: i1.PaymentComponents.buttonGroup,
                options: {
                    submitting$: this.isSubmitting$,
                    isModalView: this.isModalView,
                    isTemplateMode: this.isTemplateMode,
                    templateModeType: this.templateModeType,
                    paymentMode: this.paymentMode,
                    submit: this.onSubmit.bind(this),
                    reset: this.resetForm.bind(this),
                },
            };
        };
        PayordFormComponent.prototype.getIcon = function () {
            return i1.getIconByPaymnentType(this.config.paymentType);
        };
        PayordFormComponent.prototype.onSubmit = function () {
            this.form.markAsDirty();
            this.form.markAllAsTouched();
            this.form.updateValueAndValidity();
            if (!this.form.valid) {
                this.scrollToError();
            }
            else if (this.form.valid && !this.submitting) {
                this.submitted.emit(this.form);
            }
        };
        PayordFormComponent.prototype.onEditionSubmit = function () {
            this.form.markAllAsTouched();
            if (this.form.valid) {
                this.editPaymentSubmit.emit(this.form);
            }
            else {
                this.scrollToError();
            }
        };
        PayordFormComponent.prototype.onEditionCancel = function () {
            this.editPaymentCancel.emit(this.form);
        };
        PayordFormComponent.prototype.listenDefaultBankCodeSettingChange = function () {
            var _this = this;
            this.defaultBankCodeSettingSubscription =
                this.defaultBankCodeSettingControl.valueChanges.subscribe(function () {
                    setAdditionalBankDetails(_this.form, _this.config);
                });
        };
        PayordFormComponent.prototype.listenFormSettingChange = function () {
            var _this = this;
            this.inputFormSettingSubscription =
                this.inputFormSettingControl.valueChanges
                    .pipe(operators.startWith(this.inputFormSettingControl.value), operators.distinctUntilChanged(), operators.filter(function (value) { return !!value; }))
                    .subscribe(function (value) {
                    var e_1, _b;
                    try {
                        for (var _c = __values(value.inputFormSettings || []), _d = _c.next(); !_d.done; _d = _c.next()) {
                            var inputFormSetting = _d.value;
                            applyInputFormSettingForCountry({
                                inputFormSetting: inputFormSetting,
                                form: _this.form,
                                config: _this.config,
                            });
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                    applyPurposeOfPaymentSettings({
                        form: _this.form,
                        config: _this.config,
                    });
                });
        };
        PayordFormComponent.prototype.resetForm = function () {
            this.clear.emit();
        };
        return PayordFormComponent;
    }());
    /** @nocollapse */ PayordFormComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordFormComponent, deps: [{ token: i5__namespace.FormBuilder }, { token: ComponentsFactoryService }, { token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ PayordFormComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordFormComponent, selector: "bb-payord-form", inputs: { config: "config", isModalView: "isModalView", isTemplateMode: "isTemplateMode", isDebitPayment: "isDebitPayment", isEditPaymentModal: "isEditPaymentModal", templateModeType: "templateModeType", formItem: "formItem", submitting: "submitting", paymentMode: "paymentMode" }, outputs: { submitted: "submitted", clear: "clear", editPaymentCancel: "editPaymentCancel", editPaymentSubmit: "editPaymentSubmit" }, providers: [VisibilityService, ComponentsFactoryService], ngImport: i0__namespace, template: "<form class=\"dynamic-form\" [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n  <!-- show template name control when template mode is true-->\n  <div\n    class=\"bb-stack bb-stack--density-sm bb-text-support bb-block bb-block--lg col-12\"\n    *ngIf=\"\n      paymentMode === paymentModeType.EDIT_TEMPLATE ||\n      paymentMode === paymentModeType.COPY_PAYMENT\n    \"\n  >\n    <bb-icon-ui\n      *ngIf=\"getIcon() as icon\"\n      class=\"bb-stack__item\"\n      [name]=\"icon\"\n    ></bb-icon-ui>\n    <div class=\"bb-stack__item\" data-role=\"payment-type-label\">\n      {{ config?.name }}\n    </div>\n  </div>\n  <div class=\"form-group col-12\" *ngIf=\"isTemplateMode && templateNameControl\">\n    <bb-input-text-ui\n      label=\"Name of the template\"\n      i18n-label=\"@@payord-form.template-name.label\"\n      [formControl]=\"templateNameControl\"\n      [maxLength]=\"50\"\n      autocomplete=\"off\"\n      [showCharCounter]=\"true\"\n    >\n    </bb-input-text-ui>\n\n    <bb-input-validation-message-ui\n      [showErrors]=\"templateNameControl.touched && templateNameControl?.invalid\"\n    >\n      <ng-container\n        *ngIf=\"\n          templateNameControl.errors && templateNameControl.errors['required']\n        \"\n      >\n        <span\n          data-role=\"required-template-name-error\"\n          i18n=\"@@payment-form-template-name.validation.required-error\"\n        >\n          Template name is required\n        </span>\n      </ng-container>\n    </bb-input-validation-message-ui>\n  </div>\n\n  <!-- Render form controls  -->\n  <ng-container *ngFor=\"let field of controls\">\n    <ng-container\n      *ngTemplateOutlet=\"\n        field.fields ? formGroupTmpl : formControlTmpl;\n        context: { $implicit: field }\n      \"\n    >\n    </ng-container>\n  </ng-container>\n\n  <!--Render button group -->\n  <ng-container\n    *ngIf=\"paymentMode !== paymentModeType.EDIT_PAYMENT; else editButtonGroup\"\n  >\n    <ng-container\n      *ngTemplateOutlet=\"\n        formControlTmpl;\n        context: { $implicit: buttonGroupConfig }\n      \"\n    ></ng-container>\n  </ng-container>\n\n  <ng-template #editButtonGroup>\n    <div class=\"btn-container bb-button-bar\">\n      <bb-load-button-ui\n        class=\"bb-button-bar__button\"\n        color=\"primary\"\n        [isLoading]=\"isSubmittingShared$ | async\"\n        (click)=\"onEditionSubmit()\"\n        data-role=\"submit-button\"\n        i18n=\"@@omni-edit-payment-next-btn\"\n      >\n        Next\n      </bb-load-button-ui>\n      <button\n        bbButton\n        class=\"bb-button-bar__button\"\n        color=\"link\"\n        data-role=\"cancel-button\"\n        (click)=\"onEditionCancel()\"\n        [disabled]=\"isSubmittingShared$ | async\"\n        i18n=\"@@omni-edit-payment-cancel-btn\"\n      >\n        Cancel\n      </button>\n    </div>\n  </ng-template>\n\n  <ng-template let-config #formGroupTmpl>\n    <bb-payord-group [config]=\"config\" [group]=\"getFormGroup(config)\">\n      <ng-container *ngFor=\"let control of config.fields\">\n        <ng-container\n          *ngTemplateOutlet=\"\n            control.fields ? formGroupTmpl : formControlTmpl;\n            context: { $implicit: control }\n          \"\n        >\n        </ng-container>\n      </ng-container>\n    </bb-payord-group>\n  </ng-template>\n\n  <ng-template let-config #formControlTmpl>\n    <ng-container\n      bbPaymentFormField\n      [config]=\"config\"\n      [options]=\"config.options\"\n      [group]=\"getFormGroup(config)\"\n    ></ng-container>\n  </ng-template>\n</form>\n", components: [{ type: i2__namespace$3.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i1__namespace$5.InputTextComponent, selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i3__namespace.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i2__namespace$6.LoadButtonComponent, selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }, { type: PayordGroupComponent, selector: "bb-payord-group", inputs: ["config", "group"] }], directives: [{ type: i5__namespace.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i5__namespace.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5__namespace.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5__namespace.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5__namespace.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i4__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i4__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i7__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: PaymentFormFieldDirective, selector: "[bbPaymentFormField]", inputs: ["options", "config", "group"] }], pipes: { "async": i4__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordFormComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-payord-form',
                        templateUrl: './payord-form.component.html',
                        providers: [VisibilityService, ComponentsFactoryService],
                    }]
            }], ctorParameters: function () { return [{ type: i5__namespace.FormBuilder }, { type: ComponentsFactoryService }, { type: i0__namespace.ElementRef }]; }, propDecorators: { config: [{
                    type: i0.Input
                }], submitted: [{
                    type: i0.Output
                }], clear: [{
                    type: i0.Output
                }], isModalView: [{
                    type: i0.Input
                }], isTemplateMode: [{
                    type: i0.Input
                }], isDebitPayment: [{
                    type: i0.Input
                }], isEditPaymentModal: [{
                    type: i0.Input
                }], templateModeType: [{
                    type: i0.Input
                }], formItem: [{
                    type: i0.Input
                }], submitting: [{
                    type: i0.Input
                }], paymentMode: [{
                    type: i0.Input
                }], editPaymentCancel: [{
                    type: i0.Output
                }], editPaymentSubmit: [{
                    type: i0.Output
                }] } });

    var filterPaymentConfigs = function (paymentOptions, paymentTypes) { return paymentOptions.map(function (paymentOption) { return paymentTypes.filter(function (paymentConfig) { return paymentOption.paymentType === paymentConfig.paymentType; })[0]; }); };
    var getPaymentCostFieldConfig = function () { return ({
        name: i1.PaymentOptionFields.paymentCost,
        type: i1.PaymentComponents.paymentCost,
        options: {
            isWizardMode: true,
        },
    }); };
    var getSelectPaymentOptionFieldConfig = function (items$, paymentTypes, checkClosedPaymentsAccess) {
        if (checkClosedPaymentsAccess === void 0) { checkClosedPaymentsAccess = false; }
        var optionLabels = paymentTypes.reduce(function (nameMap, paymentConfig) {
            nameMap[paymentConfig.paymentType] = paymentConfig.name;
            return nameMap;
        }, {});
        return {
            name: i1.PaymentOptionFields.selectPaymentOption,
            type: i1.PaymentComponents.selectPaymentOption,
            options: {
                items$: items$,
                optionLabels: optionLabels,
                isWizardMode: true,
                checkClosedPaymentsAccess: checkClosedPaymentsAccess,
            },
        };
    };
    var getChargeBearerFieldConfig = function () { return ({
        name: i1.PaymentOptionFields.chargeBearer,
        type: i1.PaymentComponents.chargeBearer,
        options: {
            label: 'How fees are paid',
            isWizardMode: true,
        },
    }); };
    var getRelatedPaymentConfig = function (paymentConfigs) { return paymentConfigs.filter(function (paymentConfig) { return paymentConfig && !!paymentConfig.relatedPaymentTypes; })[0]; };
    var getMappedGroup = function (mappedGroupName, form) {
        var e_1, _a;
        var mappedGroup = form.get(mappedGroupName);
        var parent = form;
        var subGroups = mappedGroupName.split('.');
        if (mappedGroup)
            return mappedGroup;
        try {
            for (var subGroups_1 = __values(subGroups), subGroups_1_1 = subGroups_1.next(); !subGroups_1_1.done; subGroups_1_1 = subGroups_1.next()) {
                var subGroup = subGroups_1_1.value;
                if (!parent.get(subGroup)) {
                    parent.addControl(subGroup, new i5.FormGroup({}));
                }
                mappedGroup = parent.get(subGroup);
                parent = mappedGroup;
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (subGroups_1_1 && !subGroups_1_1.done && (_a = subGroups_1.return)) _a.call(subGroups_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return mappedGroup;
    };
    /**
     * Tags each form field in a payment config to the corresponding parent form Group.
     */
    var tagFormGroupToFormFields = function (arr, _group, controlsArr, form, parentName) {
        if (parentName === void 0) { parentName = ''; }
        arr.forEach(function (control) {
            var mappedField = control.options && control.options.mapToField;
            var group = mappedField ? getMappedGroup(mappedField, form) : _group;
            var parent = mappedField || parentName;
            var subArray = [];
            if (control.fields instanceof Array) {
                var subGroup = group.get(control.name) || new i5.FormGroup({});
                tagFormGroupToFormFields(control.fields, subGroup, subArray, form, parent ? parent + "." + control.name : control.name);
                group.addControl(control.name, subGroup);
                controlsArr.push(Object.assign(Object.assign({}, control), { fields: subArray, parent: parentName }));
            }
            else {
                controlsArr.push(Object.assign(Object.assign({}, control), { parent: parent }));
            }
        });
    };
    var hasSameFields = function (paymentConfigs) {
        var similar = false;
        var relatedTypeConfig = getRelatedPaymentConfig(paymentConfigs);
        if (relatedTypeConfig && relatedTypeConfig.relatedPaymentTypes) {
            var relatedPaymentTypes_1 = __spreadArray([
                relatedTypeConfig.paymentType
            ], __read(relatedTypeConfig.relatedPaymentTypes));
            similar = paymentConfigs.every(function (config) { return relatedPaymentTypes_1.indexOf(config.paymentType) !== -1; });
        }
        else {
            similar = paymentConfigs.every(function (config) { return config.paymentType === paymentConfigs[0].paymentType; });
        }
        return similar;
    };

    var AdaptiveFormComponent = /** @class */ (function () {
        function AdaptiveFormComponent(formEl) {
            this.formEl = formEl;
            /**
             * The initial set of fields rendered on the form.
             * These fields are static for all payment types.
             */
            this.baseFields = [];
            /**
             * Array of payment configs that are needs to be supported by the wizard.
             */
            this.paymentTypes = [];
            /**
             * The current state of the payment. Defaults to INITIAL
             */
            this.paymentState = i1.PaymentState.INITIAL;
            /**
             * The flag to denote if it is a debit payment.
             */
            this.isDebitPayment = false;
            /**
             * Flag to display when not payment option is avaialble
             */
            this.paymentOptionsError = false;
            /**
             * Flag to check closed payment access
             */
            this.checkClosedPaymentsAccess = false;
            /**
             * Apply a payment template event emitter
             */
            this.applyPaymentTemplate = new i0.EventEmitter();
            /**
             * Flag that indicates wether should apply a template
             * Default value is `false`
             */
            this.shouldApplyTemplate = false;
            /**
             * The flag to denote if the widget is rendered inside a modal.
             */
            this.isModalView = false;
            /**
             * Event emitted when the form is submitted.
             */
            this.submitted = new i0.EventEmitter();
            /**
             *  Event emitted when a payment option is selected
             */
            this.selectPaymentOption = new i0.EventEmitter();
            /**
             * Event emitted when the form is reset.
             */
            this.clear = new i0.EventEmitter();
            /**
             * Event emitted when a payment config is selected based on the form details.
             */
            this.selectConfig = new i0.EventEmitter();
            this.isSubmitting$ = new rxjs.BehaviorSubject(false);
            this.fetchingOptions$ = new rxjs.BehaviorSubject(false);
            this.gc$ = new rxjs.Subject();
            this.currentControls = [];
            this.shouldResetPaymentOptions = false;
            this.debounceInput = rxjs.pipe(operators.takeUntil(this.gc$), operators.debounceTime(500), operators.distinctUntilChanged());
            this.controls$ = new rxjs.BehaviorSubject([]);
            this.paymentOptionControls$ = new rxjs.BehaviorSubject(undefined);
            this.paymentOptionsSubject$ = new rxjs.BehaviorSubject(undefined);
            this.baseControls$ = new rxjs.BehaviorSubject([]);
            this.taggedBaseFields = [];
            this.retainableFields = [
                i1.PaymentBaseFields.counterparty + "." + i1.CounterPartyFields.postalAddress,
                i1.PaymentBaseFields.counterparty + "." + i1.CounterPartyFields.creditorBank + "." + i1.CounterPartyFields.postalAddress,
                i1.PaymentBaseFields.counterparty + "." + i1.CounterPartyFields.creditorBank + "." + i1.CounterPartyFields.bic,
                i1.PaymentBaseFields.counterparty + "." + i1.CounterPartyFields.creditorBank + "." + i1.CounterPartyFields.bankName,
            ];
        }
        Object.defineProperty(AdaptiveFormComponent.prototype, "fetchingOptions", {
            /**
             * A subject that emit s a flag to denote if we are in the process of fetching the payment options
             */
            set: function (isFetchingOptions) {
                this.fetchingOptions$.next(!!isFetchingOptions);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AdaptiveFormComponent.prototype, "submitting", {
            /**
             * Flag that denotes if form is being submitted
             */
            set: function (isSubmitting) {
                this.isSubmitting$.next(isSubmitting);
            },
            enumerable: false,
            configurable: true
        });
        AdaptiveFormComponent.prototype.ngOnInit = function () {
            this.form = this.formItem || new i5.FormGroup({});
            this.paymentTypeControl = registerFormControl(this.form, 'paymentType');
            this.registerPaymentOptionControls();
            this.listenPaymentOptionsChange();
            this.listenFormSettingChange();
            // tagging the base fields is required to find the delta between the base fields and others
            tagFormGroupToFormFields(this.baseFields, this.form, this.taggedBaseFields, this.form);
            this.baseControls$.next(this.taggedBaseFields);
            this.currentControls = this.baseFields;
            this.listenChanges =
                this.fetchPaymentOptionsListener || this.listenCriticalFieldChanges;
            this.registerPostalAddressFormGroups();
            registerFormControl(this.form, 'isEditMode', [], [], this.paymentState === i1.PaymentState.EDIT);
            if (this.paymentState === i1.PaymentState.EDIT && this.selectedPaymentConfig) {
                this.listenPaymentType(this.selectedPaymentConfig.paymentType);
            }
            if (this.isDebitPayment) {
                registerFormControl(this.form, i1.HiddenFields.isDebitPayment, [], [], true);
            }
            this.buttonGroupConfig = this.getButtonGroupConfig();
            this.renderPaymentOptionControls();
        };
        AdaptiveFormComponent.prototype.ngAfterViewInit = function () {
            this.listenChanges(this.form, this.fetchOptions$);
            this.listenPaymentTypeChanges();
            if (this.shouldApplyTemplate) {
                this.applyPaymentTemplate.emit(this.form);
            }
        };
        AdaptiveFormComponent.prototype.ngOnDestroy = function () {
            this.gc$.next();
            this.gc$.complete();
            this.controls$.complete();
            this.paymentOptionControls$.next([]);
            this.paymentOptionControls$.complete();
        };
        AdaptiveFormComponent.prototype.getButtonGroupConfig = function () {
            return {
                type: i1.PaymentComponents.buttonGroup,
                name: i1.PaymentComponents.buttonGroup,
                options: {
                    submitting$: this.isSubmitting$,
                    isLoading$: this.fetchingOptions$,
                    submit: this.onSubmit.bind(this),
                    reset: this.resetForm.bind(this),
                    isModalView: this.isModalView,
                },
            };
        };
        AdaptiveFormComponent.prototype.registerPaymentOptionControls = function () {
            this.chargeBearerControl = registerFormControl(this.form, i1.PaymentOptionFields.chargeBearer);
            this.chargeBearerOptionsControl = registerFormControl(this.form, i1.PaymentOptionFields.chargeBearerOptions);
            this.transferFeeControl = registerFormControl(this.form, i1.PaymentOptionFields.transferFee);
            this.selectPaymentOptionControl = registerFormControl(this.form, i1.PaymentOptionFields.selectPaymentOption);
            this.inputFormSettingControl = registerFormControl(this.form, i1.PaymentOptionFields.inputFormFromSettings);
        };
        AdaptiveFormComponent.prototype.registerPostalAddressFormGroups = function () {
            var counterpartyGroup = (this.form.get(i1.PaymentBaseFields.counterparty));
            var creditorBankGroup = (counterpartyGroup.get(i1.CounterPartyFields.creditorBank));
            if (!creditorBankGroup) {
                creditorBankGroup = new i5.FormGroup({});
                counterpartyGroup.addControl(i1.CounterPartyFields.creditorBank, creditorBankGroup);
            }
            var creditorAddressGroup = (creditorBankGroup.get(i1.CounterPartyFields.postalAddress));
            var creditorBankAddressGroup = (creditorBankGroup.get(i1.CounterPartyFields.postalAddress));
            if (!creditorAddressGroup) {
                creditorAddressGroup = new i5.FormGroup({});
                counterpartyGroup.addControl(i1.CounterPartyFields.postalAddress, creditorAddressGroup);
            }
            if (!creditorBankAddressGroup) {
                creditorBankAddressGroup = new i5.FormGroup({});
                creditorBankGroup.addControl(i1.CounterPartyFields.postalAddress, creditorBankAddressGroup);
            }
            addAddressFields(creditorAddressGroup);
            addAddressFields(creditorBankAddressGroup);
        };
        /**
         * Renders the provided payment config
         */
        AdaptiveFormComponent.prototype.renderPaymentConfig = function (paymentConfig) {
            var newControls = [];
            var deltaFields = [];
            tagFormGroupToFormFields(paymentConfig.fields, this.form, newControls, this.form);
            setAdditionalBankDetails(this.form, paymentConfig);
            if (this.currentControls.length) {
                deltaFields = this.deleteControls(this.currentControls, newControls);
            }
            var groupedDelta = this.groupDeltaFields(newControls, deltaFields);
            this.currentControls = newControls;
            this.controls$.next(groupedDelta);
            if (this.paymentTypeControl) {
                this.paymentTypeControl.patchValue(paymentConfig.paymentType);
            }
        };
        /**
         * The activate depandants feature is based on groups so we need to group delta fields in order to toggle dependatants.
         * This function is used to group sibling delta fields into groups, so that the toggle dependatants feature is retained.
         */
        AdaptiveFormComponent.prototype.groupDeltaFields = function (currentControls, delta) {
            var e_1, _b;
            var groupedFields = [];
            try {
                for (var delta_1 = __values(delta), delta_1_1 = delta_1.next(); !delta_1_1.done; delta_1_1 = delta_1.next()) {
                    var deltaField = delta_1_1.value;
                    if (Array.isArray(groupedFields[groupedFields.length - 1])) {
                        var prevParent = groupedFields[groupedFields.length - 1][0].parent;
                        if (deltaField.parent !== i1.PaymentBaseFields.counterparty &&
                            prevParent === deltaField.parent) {
                            groupedFields[groupedFields.length - 1].push(deltaField);
                        }
                        else {
                            groupedFields.push(deltaField);
                        }
                    }
                    else if (deltaField.parent !== i1.PaymentBaseFields.counterparty &&
                        groupedFields.length &&
                        groupedFields[groupedFields.length - 1].parent === deltaField.parent) {
                        var prevElem = groupedFields.pop();
                        groupedFields.push([prevElem, deltaField]);
                    }
                    else {
                        groupedFields.push(deltaField);
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (delta_1_1 && !delta_1_1.done && (_b = delta_1.return)) _b.call(delta_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return this.mapGroupedFields(groupedFields, currentControls);
        };
        /**
         * This function is fetches the grouped delta fields and encloses them with their appropriate parent group config.
         * Doing so ensures the toggle dependants feature works as expected
         */
        AdaptiveFormComponent.prototype.mapGroupedFields = function (groupedFields, currentControls) {
            var configs = groupedFields.map(function (groupedField) {
                if (Array.isArray(groupedField)) {
                    var anccestorArray = groupedField[0].parent.split('.');
                    var parent = anccestorArray.pop();
                    var ancestor = anccestorArray.length
                        ? anccestorArray.length === 1
                            ? anccestorArray[0]
                            : anccestorArray.join('.')
                        : '';
                    var ancestorConfig = i1.getConfig(ancestor, currentControls);
                    var parentConfig = i1.getConfig(parent, ancestorConfig || currentControls);
                    return Object.assign(Object.assign({}, parentConfig), { fields: groupedField,
                        //reset the group title since it will be added in payment information group
                        title: '' });
                }
                else
                    return groupedField;
            });
            return this.organiseConfigs(configs);
        };
        /**
         * This function encloses the non counterparty and non schedule delta fields inside payment information group.
         */
        AdaptiveFormComponent.prototype.organiseConfigs = function (configs) {
            var e_2, _b;
            var counterPartyConfigs = [];
            var paymentInfoConfigs = [];
            var scheduleConfigs = [];
            try {
                for (var configs_1 = __values(configs), configs_1_1 = configs_1.next(); !configs_1_1.done; configs_1_1 = configs_1.next()) {
                    var config = configs_1_1.value;
                    config.parent = config.parent || '';
                    if (config.name === i1.CounterPartyFields.remittanceInformation ||
                        config.name === i1.CounterPartyFields.messageToBank) {
                        paymentInfoConfigs.push(config);
                    }
                    else if (config.parent === i1.PaymentBaseFields.counterparty ||
                        config.parent.indexOf("" + i1.PaymentBaseFields.counterparty) === 0) {
                        counterPartyConfigs.push(config);
                    }
                    else if (config.name === i1.PaymentBaseFields.schedule ||
                        config.parent === i1.PaymentBaseFields.schedule) {
                        if (i1.isFormGroupConfig(config)) {
                            scheduleConfigs.push.apply(scheduleConfigs, __spreadArray([], __read(config.fields)));
                        }
                        else {
                            scheduleConfigs.push(config);
                        }
                    }
                    else {
                        paymentInfoConfigs.push(config);
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (configs_1_1 && !configs_1_1.done && (_b = configs_1.return)) _b.call(configs_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
            var paymentInfo = {
                name: 'paymentInfo',
                title: 'Payment Infomation',
                fields: __spreadArray([], __read(paymentInfoConfigs)),
            };
            var schedule = {
                name: i1.PaymentBaseFields.schedule,
                fields: __spreadArray([], __read(scheduleConfigs)),
            };
            return __spreadArray(__spreadArray([], __read(counterPartyConfigs)), [paymentInfo, schedule]);
        };
        /**
         * Renders the provided array of fields in the form
         */
        AdaptiveFormComponent.prototype.renderFields = function (fields, flatArray) {
            tagFormGroupToFormFields(fields, this.form, flatArray, this.form);
            this.controls$.next(__spreadArray([], __read(flatArray)));
        };
        /**
         * Deletes form controls in current array that are absent in the new array and returns the delta fields
         */
        AdaptiveFormComponent.prototype.deleteControls = function (currentControls, newControls) {
            var baseControlsMap = createControlsMap(this.taggedBaseFields);
            var currentControlsMap = createControlsMap(currentControls);
            var newControlsMap = createControlsMap(newControls);
            var deltaControls = [];
            // Get new configs that are not rendered in the form
            for (var key in newControlsMap) {
                if (!baseControlsMap.hasOwnProperty(key) &&
                    !i1.PaymentOptionFields[key] &&
                    key !==
                        i1.PaymentBaseFields.counterparty + "." + i1.CounterPartyFields.counterPartyAccountGroup) {
                    deltaControls.push(newControlsMap[key]);
                }
            }
            // Remove existing controls from the form that are not present in the newe config
            for (var key in currentControlsMap) {
                if (currentControlsMap.hasOwnProperty(key)) {
                    var controlName = key.split('.').pop();
                    var control = this.form.get(key) || this.form.get(controlName);
                    if (!baseControlsMap.hasOwnProperty(key) &&
                        !i1.PaymentOptionFields[key] &&
                        !newControlsMap.hasOwnProperty(key) &&
                        this.retainableFields.indexOf(key) === -1 &&
                        control &&
                        control.parent) {
                        control.parent.removeControl(controlName);
                    }
                    // reset validators from retainable controls
                    else if (this.retainableFields.indexOf(key) !== -1) {
                        control === null || control === void 0 ? void 0 : control.setValidators(null);
                        control === null || control === void 0 ? void 0 : control.updateValueAndValidity();
                    }
                }
            }
            return deltaControls;
        };
        /**
         * Listens to the form for changes in debit account number, credit account number, amount and currency
         */
        AdaptiveFormComponent.prototype.listenCriticalFieldChanges = function (form, fetchOptions$) {
            var _this = this;
            // Cache the critical form controls
            var debitAccount = (form.get([i1.PaymentBaseFields.initiator, i1.InitiatorFields.accountNumber]));
            var creditAccount = (form.get([
                i1.PaymentBaseFields.counterparty,
                i1.CounterPartyFields.accountNumber,
            ]));
            var counterpartyCountry = (form.get([
                i1.PaymentBaseFields.counterparty,
                i1.CounterPartyFields.creditorBank,
                i1.CounterPartyFields.postalAddress,
                i1.CounterPartyFields.country,
            ]));
            var amountInfo = (form.get([
                i1.PaymentBaseFields.remittanceInfo,
                i1.RemittanceInfoFields.amountCurrencyGroup,
            ]));
            this.currentDebitAccount = debitAccount.value;
            // subscribe for value changes in the critical form controls and trigger payment options endpoint
            if (debitAccount && creditAccount && amountInfo) {
                this.debounceInput(debitAccount.valueChanges)
                    .pipe(operators.skipWhile(function (val) { return _this.currentDebitAccount === val; }), operators.tap(function () {
                    _this.currentDebitAccount = debitAccount.value;
                }))
                    .subscribe(this.fetchPaymentOptions.bind(this, form, fetchOptions$));
                this.debounceInput(creditAccount.valueChanges).subscribe(this.fetchPaymentOptions.bind(this, form, fetchOptions$));
                this.debounceInput(amountInfo.valueChanges).subscribe(this.fetchPaymentOptions.bind(this, form, fetchOptions$));
                if (counterpartyCountry) {
                    this.debounceInput(counterpartyCountry.valueChanges).subscribe(this.fetchPaymentOptions.bind(this, form, fetchOptions$));
                }
            }
        };
        /**
         * Listen to the select payment option component and render the fields fo the selected payment type.
         */
        AdaptiveFormComponent.prototype.listenPaymentTypeChanges = function () {
            var _this = this;
            this.paymentTypeControl.valueChanges
                .pipe(operators.distinctUntilChanged(), operators.takeUntil(this.gc$))
                .subscribe(function () {
                _this.listenPaymentType(_this.paymentTypeControl.value);
            });
        };
        /**
         * Listens to changes to the payment type in the form
         */
        AdaptiveFormComponent.prototype.listenPaymentType = function (paymentType) {
            if (paymentType) {
                var selectedPaymentTypeConfig = this.paymentTypes.filter(function (paymentConfig) { return paymentType === paymentConfig.paymentType; })[0];
                this.selectConfig.next(selectedPaymentTypeConfig);
                this.renderPaymentConfig(selectedPaymentTypeConfig);
            }
        };
        AdaptiveFormComponent.prototype.getPaymentConfigByType = function (paymentType, paymentConfigs) {
            return paymentConfigs.filter(function (paymentConfig) { return paymentType === paymentConfig.paymentType; })[0];
        };
        AdaptiveFormComponent.prototype.listenPaymentOptionsChange = function () {
            var _this = this;
            if (this.paymentOptions$) {
                this.paymentOptions$
                    .pipe(operators.takeUntil(this.gc$), operators.tap(function (options) {
                    _this.onPaymentOptionsChange(options);
                    _this.applyCountrySpecificSettings(_this.inputFormSettingControl.value);
                }))
                    .subscribe();
            }
        };
        AdaptiveFormComponent.prototype.listenFormSettingChange = function () {
            var _this = this;
            this.inputFormSettingControl.valueChanges
                .pipe(operators.startWith(this.inputFormSettingControl.value), operators.takeUntil(this.gc$), operators.distinctUntilChanged(), operators.filter(function (value) { return !!value; }))
                .subscribe(function (value) { return _this.applyCountrySpecificSettings(value); });
        };
        AdaptiveFormComponent.prototype.applyCountrySpecificSettings = function (value) {
            var e_3, _b;
            var currentConfig = this.getPaymentConfigByType(this.paymentTypeControl.value, this.paymentTypes);
            if (value) {
                try {
                    for (var _c = __values(value.inputFormSettings || []), _d = _c.next(); !_d.done; _d = _c.next()) {
                        var inputFormSetting = _d.value;
                        applyInputFormSettingForCountry({
                            inputFormSetting: inputFormSetting,
                            form: this.form,
                            config: { fields: this.baseFields, name: '', paymentType: '' },
                        });
                        if (currentConfig) {
                            applyInputFormSettingForCountry({
                                inputFormSetting: inputFormSetting,
                                form: this.form,
                                config: currentConfig,
                            });
                        }
                    }
                }
                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                finally {
                    try {
                        if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                    }
                    finally { if (e_3) throw e_3.error; }
                }
                if (currentConfig) {
                    applyPurposeOfPaymentSettings({
                        form: this.form,
                        config: currentConfig,
                    });
                }
            }
        };
        AdaptiveFormComponent.prototype.renderPaymentOptionControls = function () {
            var paymentOptionControls = [];
            paymentOptionControls.push(getSelectPaymentOptionFieldConfig(this.paymentOptions$, this.paymentTypes, this.checkClosedPaymentsAccess));
            paymentOptionControls.push(getChargeBearerFieldConfig());
            paymentOptionControls.push(getPaymentCostFieldConfig());
            this.paymentOptionControls$.next(paymentOptionControls);
        };
        /**
         * Resets the existing payment options
         */
        AdaptiveFormComponent.prototype.resetPaymentOptions = function (paymentOptions) {
            if (this.shouldResetPaymentOptions) {
                if (this.shouldResetSelectedPaymentOption(paymentOptions)) {
                    this.selectPaymentOptionControl.reset();
                }
                this.chargeBearerOptionsControl.reset();
                this.transferFeeControl.reset();
            }
        };
        AdaptiveFormComponent.prototype.shouldResetSelectedPaymentOption = function (paymentOptions) {
            var selectedPaymentType = (this.selectPaymentOptionControl.value || '').split('::')[0];
            if (selectedPaymentType) {
                return !paymentOptions.some(function (option) { return option.paymentType === selectedPaymentType; });
            }
            return false;
        };
        /**
         * Callback triggered when the payment type changes
         */
        AdaptiveFormComponent.prototype.onPaymentOptionsChange = function (paymentOptions) {
            if (paymentOptions === void 0) { paymentOptions = []; }
            this.resetPaymentOptions(paymentOptions);
            this.shouldResetPaymentOptions = true;
            if (!paymentOptions || !paymentOptions.length) {
                return;
            }
            var paymentConfigs = filterPaymentConfigs(paymentOptions, this.paymentTypes);
            if (paymentOptions.length === 1 || hasSameFields(paymentConfigs)) {
                this.renderPaymentConfig(paymentConfigs[0]);
                this.selectConfig.next(paymentConfigs[0]);
            }
            else if (this.shouldResetSelectedPaymentOption(paymentOptions)) {
                this.controls$.next([]);
            }
        };
        /**
         * Fetches the payment options for provided payment details
         */
        AdaptiveFormComponent.prototype.fetchPaymentOptions = function (form, fetchOptions$) {
            var debitAccount = (form.get(i1.PaymentBaseFields.initiator + "." + i1.InitiatorFields.accountNumber));
            var creditAccount = (form.get(i1.PaymentBaseFields.counterparty + "." + i1.CounterPartyFields.accountNumber));
            var amountInfo = (form.get(i1.PaymentBaseFields.remittanceInfo + "." + i1.RemittanceInfoFields.amountCurrencyGroup));
            var bankCountry = (form.get([
                i1.PaymentBaseFields.counterparty,
                i1.CounterPartyFields.creditorBank,
                i1.CounterPartyFields.postalAddress,
                i1.CounterPartyFields.country,
            ]));
            var closedPayment = form.get(i1.HiddenFields.isClosedPayment);
            var arrangementId = form.get([
                i1.PaymentBaseFields.counterparty,
                i1.CounterPartyFields.id,
            ]);
            var skipCreditAccountValidityCheck = (closedPayment === null || closedPayment === void 0 ? void 0 : closedPayment.value) || (arrangementId === null || arrangementId === void 0 ? void 0 : arrangementId.value);
            if (debitAccount &&
                creditAccount &&
                amountInfo &&
                bankCountry &&
                bankCountry.valid &&
                debitAccount.value &&
                (creditAccount.valid || skipCreditAccountValidityCheck) &&
                amountInfo.valid) {
                fetchOptions$.next(form);
            }
        };
        /**
         * Returns the form group for the provided form field config
         */
        AdaptiveFormComponent.prototype.getFormGroup = function (field) {
            return this.form.get(field.parent) || this.form;
        };
        /**
         * Submits the payment form
         */
        AdaptiveFormComponent.prototype.onSubmit = function () {
            var _a;
            this.form.markAsDirty();
            this.form.markAllAsTouched();
            if (!this.form.valid) {
                i1.focusErrorElement((_a = this.formEl) === null || _a === void 0 ? void 0 : _a.nativeElement);
            }
            else if (this.form.valid && !this.submitting) {
                this.submitted.next(this.form);
                this.selectPaymentOption.next(this.selectedPaymentOption);
            }
        };
        /**
         * Resets the payment form
         */
        AdaptiveFormComponent.prototype.resetForm = function () {
            this.selectConfig.next(undefined);
            this.selectPaymentOption.next(undefined);
            this.gc$.next(); // Clear listeners
            this.clear.next();
        };
        return AdaptiveFormComponent;
    }());
    /** @nocollapse */ AdaptiveFormComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AdaptiveFormComponent, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ AdaptiveFormComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AdaptiveFormComponent, selector: "bb-adaptive-form", inputs: { formItem: "formItem", baseFields: "baseFields", paymentTypes: "paymentTypes", paymentState: "paymentState", isDebitPayment: "isDebitPayment", selectedPaymentConfig: "selectedPaymentConfig", selectedPaymentOption: "selectedPaymentOption", paymentOptionsError: "paymentOptionsError", checkClosedPaymentsAccess: "checkClosedPaymentsAccess", paymentOptions$: "paymentOptions$", fetchingOptions: "fetchingOptions", fetchPaymentOptionsListener: "fetchPaymentOptionsListener", submitting: "submitting", fetchOptions$: "fetchOptions$", shouldApplyTemplate: "shouldApplyTemplate", isModalView: "isModalView" }, outputs: { applyPaymentTemplate: "applyPaymentTemplate", submitted: "submitted", selectPaymentOption: "selectPaymentOption", clear: "clear", selectConfig: "selectConfig" }, ngImport: i0__namespace, template: "<form class=\"payment-wizard-form\" [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n  <ng-container *ngFor=\"let field of baseControls$ | async\">\n    <ng-container\n      *ngTemplateOutlet=\"\n        field.fields ? formGroupTmpl : formControlTmpl;\n        context: { $implicit: field }\n      \"\n    >\n    </ng-container>\n  </ng-container>\n\n  <div class=\"position-relative\">\n    <div class=\"delta-container\">\n      <ng-container *ngFor=\"let field of controls$ | async\">\n        <ng-container\n          *ngTemplateOutlet=\"\n            field.fields ? formGroupTmpl : formControlTmpl;\n            context: { $implicit: field }\n          \"\n        >\n        </ng-container>\n      </ng-container>\n    </div>\n\n    <ng-container *ngFor=\"let controlConfig of paymentOptionControls$ | async\">\n      <ng-container\n        *ngTemplateOutlet=\"\n          controlConfig.fields ? formGroupTmpl : formControlTmpl;\n          context: { $implicit: controlConfig }\n        \"\n      >\n      </ng-container>\n    </ng-container>\n\n    <div\n      *ngIf=\"fetchingOptions$ | async\"\n      class=\"wizard-loader-container position-absolute w-100 h-100 top-0 fixed-top bg-white\"\n      [style.opacity]=\"0.8\"\n    >\n      <bb-loading-indicator-ui\n        loaderSize=\"lg\"\n        class=\"absolute-center\"\n      ></bb-loading-indicator-ui>\n    </div>\n  </div>\n\n  <ng-template let-config #formGroupTmpl>\n    <bb-payord-group [config]=\"config\" [group]=\"getFormGroup(config)\">\n      <ng-container *ngFor=\"let control of config.fields\">\n        <ng-container\n          *ngTemplateOutlet=\"\n            control.fields ? formGroupTmpl : formControlTmpl;\n            context: { $implicit: control }\n          \"\n        >\n        </ng-container>\n      </ng-container>\n    </bb-payord-group>\n  </ng-template>\n\n  <ng-template let-config #formControlTmpl>\n    <ng-container\n      bbPaymentFormField\n      [config]=\"config\"\n      [options]=\"config.options\"\n      [group]=\"getFormGroup(config)\"\n    ></ng-container>\n  </ng-template>\n\n  <div\n    class=\"text-danger bb-block--md col-12\"\n    *ngIf=\"paymentOptionsError\"\n    i18n=\"@@adaptive-form-no-payment-option-error\"\n  >\n    A Payment transfer is not possible with provided details. Please update the\n    details and try again.\n  </div>\n\n  <!--Render button group -->\n  <ng-container\n    *ngTemplateOutlet=\"\n      formControlTmpl;\n      context: { $implicit: buttonGroupConfig }\n    \"\n  ></ng-container>\n\n  <ng-template #fetchingOptions>\n    <bb-loading-indicator-ui\n      loaderSize=\"sm\"\n      class=\"bb-load-button__loading-indicator\"\n    ></bb-loading-indicator-ui>\n  </ng-template>\n</form>\n", components: [{ type: i4__namespace$1.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: PayordGroupComponent, selector: "bb-payord-group", inputs: ["config", "group"] }], directives: [{ type: i5__namespace.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i5__namespace.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5__namespace.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i4__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: PaymentFormFieldDirective, selector: "[bbPaymentFormField]", inputs: ["options", "config", "group"] }], pipes: { "async": i4__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AdaptiveFormComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-adaptive-form',
                        templateUrl: './adaptive-form.component.html',
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; }, propDecorators: { formItem: [{
                    type: i0.Input
                }], baseFields: [{
                    type: i0.Input
                }], paymentTypes: [{
                    type: i0.Input
                }], paymentState: [{
                    type: i0.Input
                }], isDebitPayment: [{
                    type: i0.Input
                }], selectedPaymentConfig: [{
                    type: i0.Input
                }], selectedPaymentOption: [{
                    type: i0.Input
                }], paymentOptionsError: [{
                    type: i0.Input
                }], checkClosedPaymentsAccess: [{
                    type: i0.Input
                }], paymentOptions$: [{
                    type: i0.Input
                }], applyPaymentTemplate: [{
                    type: i0.Output
                }], fetchingOptions: [{
                    type: i0.Input
                }], fetchPaymentOptionsListener: [{
                    type: i0.Input
                }], submitting: [{
                    type: i0.Input
                }], fetchOptions$: [{
                    type: i0.Input
                }], shouldApplyTemplate: [{
                    type: i0.Input
                }], isModalView: [{
                    type: i0.Input
                }], submitted: [{
                    type: i0.Output
                }], selectPaymentOption: [{
                    type: i0.Output
                }], clear: [{
                    type: i0.Output
                }], selectConfig: [{
                    type: i0.Output
                }] } });

    var MultiPaymentService = /** @class */ (function () {
        function MultiPaymentService() {
            this.totalAmount$ = new rxjs.BehaviorSubject(0);
            this.totalTransfers$ = new rxjs.BehaviorSubject(0);
        }
        Object.defineProperty(MultiPaymentService.prototype, "paymentTotalAmount$", {
            get: function () {
                return this.totalAmount$.asObservable().pipe(operators.distinctUntilChanged());
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MultiPaymentService.prototype, "paymentTotalTransfers$", {
            get: function () {
                return this.totalTransfers$.asObservable().pipe(operators.distinctUntilChanged());
            },
            enumerable: false,
            configurable: true
        });
        return MultiPaymentService;
    }());
    /** @nocollapse */ MultiPaymentService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: MultiPaymentService, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ MultiPaymentService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: MultiPaymentService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: MultiPaymentService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }] });

    var MultiPaymentFormComponent = /** @class */ (function () {
        function MultiPaymentFormComponent(fb, componentsFactory, multiPaymentService, stateService) {
            this.fb = fb;
            this.componentsFactory = componentsFactory;
            this.multiPaymentService = multiPaymentService;
            this.stateService = stateService;
            /**
             * errorList to be displayed in the component.
             */
            this.errorList = [];
            /**
             * Event emitter when form is submitted
             */
            this.submitted = new i0.EventEmitter();
            /**
             * Event Emitter when step is next.
             */
            this.stepNext = new i0.EventEmitter();
            /**
             * Event Emitter when step is back.
             */
            this.back = new i0.EventEmitter();
            /**
             * Event emitter when alert is hidden.
             */
            this.hideError = new i0.EventEmitter();
            this.controls = [];
            this.stepData = {};
            this.destroy$ = new rxjs.Subject();
            this.totalTransfers$ = this.multiPaymentService.paymentTotalTransfers$;
            this.totalAmount$ = this.multiPaymentService.paymentTotalAmount$;
            this.currentStepForm = [];
            this.currentForm = {};
            this.formVal = new rxjs.Subject();
        }
        MultiPaymentFormComponent.prototype.ngOnInit = function () {
            this.form = this.formItem || this.fb.group({});
            if (this.config) {
                this.componentsFactory.registerCustomFields(this.config.customFields);
                this.createFormFields(this.config.fields, this.form, this.controls);
                this._listenFormChanges(this.form);
            }
            for (var step in this.stepperConfig) {
                if (this.stepperConfig.hasOwnProperty(step)) {
                    this.stepData[this.stepperConfig[step].stepName] = {};
                }
            }
        };
        MultiPaymentFormComponent.prototype.updateStepperDetails = function (currentStep, action) {
            switch (action) {
                case i1.StepperAction.NEXT:
                    this.stateService.resetErrors();
                    if (this.isStepValid(currentStep.stepName)) {
                        this.onStepSubmit();
                    }
                    else {
                        this.stateService.addError(currentStep.stepName, {
                            message: $localize(templateObject_1 || (templateObject_1 = __makeTemplateObject([":@@bb-multi-payment-widget.form-error:Form error: Check entered data before proceeding to the next step."], [":@@bb-multi-payment-widget.form-error:Form error: Check entered data before proceeding to the next step."]))),
                        });
                    }
                    break;
                case i1.StepperAction.BACK:
                    this.stateService.resetErrors();
                    this.back.emit();
                    break;
                case i1.StepperAction.SUBMIT:
                    if (this.isStepValid(currentStep.stepName)) {
                        this.stateService.resetErrors();
                        this.onSubmit();
                    }
                    break;
            }
        };
        MultiPaymentFormComponent.prototype.createFormFields = function (arr, _group, controlsArr, parentName) {
            var _this = this;
            arr.forEach(function (control) {
                var _a;
                var mappedField = control.options && control.options.mapToField;
                var group = mappedField
                    ? _this.form.get(mappedField)
                    : _group;
                var parent = mappedField || parentName;
                var subArray = [];
                if ((_a = control.options) === null || _a === void 0 ? void 0 : _a.fieldsConfig) {
                    _this.currency = control.options.fieldsConfig.amount.currency;
                }
                if (control.fields instanceof Array) {
                    var subGroup = group.get(control.name) || _this.fb.group({});
                    _this.createFormFields(control.fields, subGroup, subArray, parent ? parent + "." + control.name : control.name);
                    group.addControl(control.name, subGroup);
                    controlsArr.push(Object.assign(Object.assign({}, control), { fields: subArray, parent: parentName }));
                }
                else {
                    controlsArr.push(Object.assign(Object.assign({}, control), { parent: parent }));
                }
            });
        };
        MultiPaymentFormComponent.prototype.isStepValid = function (currentStepName) {
            var _this = this;
            var currentStepFields = this.controls.filter(function (control) { return control.stepName === currentStepName; });
            this.currentStepForm = [];
            this.currentForm = {};
            var isValidArray = currentStepFields.reduce(function (acc, steps) {
                var _a, _b, _c;
                (_a = _this.form.get(steps.name)) === null || _a === void 0 ? void 0 : _a.markAllAsTouched();
                _this.currentForm = Object.assign(Object.assign({}, _this.currentForm), (_b = _this.form.get(steps.name)) === null || _b === void 0 ? void 0 : _b.value);
                acc.push((_c = _this.form.get(steps.name)) === null || _c === void 0 ? void 0 : _c.valid);
                return acc;
            }, []);
            return isValidArray.every(Boolean);
        };
        MultiPaymentFormComponent.prototype.onSubmit = function () {
            this.form.markAsDirty();
            this.form.markAllAsTouched();
            if (this.form.valid) {
                this.submitted.emit(this.form);
            }
        };
        MultiPaymentFormComponent.prototype.onStepSubmit = function () {
            var _a, _b, _c, _d;
            if (JSON.stringify(this.stepData[((_a = this.stateService.currentStep) === null || _a === void 0 ? void 0 : _a.stepName) || '']) !== JSON.stringify(this.currentForm)) {
                this.stepData[((_b = this.stateService.currentStep) === null || _b === void 0 ? void 0 : _b.stepName) || ''] = this
                    .stepData[((_c = this.stateService.currentStep) === null || _c === void 0 ? void 0 : _c.stepName) || '']
                    ? this.currentForm
                    : {};
            }
            this.stepNext.emit({
                form: this.currentForm,
                stepName: (_d = this.stateService.currentStep) === null || _d === void 0 ? void 0 : _d.stepName,
            });
        };
        MultiPaymentFormComponent.prototype.triggerButtonEvent = function (hooks, action, currentStep) {
            if (hooks) {
                triggerStepperHook(i1.MultiPaymentHooks.onClick, hooks, this.updateStepperDetails.bind(this, currentStep, action), this.stateService.currentStep, action);
            }
            else {
                this.updateStepperDetails(currentStep, action);
            }
        };
        MultiPaymentFormComponent.prototype._listenFormChanges = function (form) {
            var _this = this;
            var counterpartyControl = (form.get([i1.PaymentBaseFields.counterparty]));
            counterpartyControl.valueChanges
                .pipe(operators.distinctUntilChanged(), operators.takeUntil(this.destroy$))
                .subscribe(function () {
                var amount = 0;
                var totalTransfers = 0;
                var formArray = form.get([
                    i1.PaymentBaseFields.counterparty,
                    i1.InitiatorFields.initiatorAccountGroup,
                ]);
                if (formArray) {
                    var transferControls = formArray.controls;
                    totalTransfers = transferControls.length;
                    transferControls.forEach(function (control) {
                        var _a, _b;
                        if ((_a = control.get('amount')) === null || _a === void 0 ? void 0 : _a.valid) {
                            amount = +amount + +((_b = control.get('amount')) === null || _b === void 0 ? void 0 : _b.value);
                        }
                    });
                }
                _this.multiPaymentService.totalTransfers$.next(totalTransfers);
                _this.multiPaymentService.totalAmount$.next(amount);
            });
            var initiatorControl = (form.get([i1.PaymentBaseFields.initiator]));
            initiatorControl.valueChanges
                .pipe(operators.debounceTime(500), operators.distinctUntilChanged(), operators.takeUntil(this.destroy$))
                .subscribe(function () {
                var formArray = form.get([
                    i1.PaymentBaseFields.counterparty,
                    i1.InitiatorFields.initiatorAccountGroup,
                ]);
                if (formArray) {
                    formArray.controls.forEach(function (control) {
                        var _a, _b, _c;
                        if ((_a = control.get('counterpartyName')) === null || _a === void 0 ? void 0 : _a.touched) {
                            (_b = control.get('counterpartyName')) === null || _b === void 0 ? void 0 : _b.updateValueAndValidity();
                            (_c = control.get('counterpartyName')) === null || _c === void 0 ? void 0 : _c.markAllAsTouched();
                        }
                    });
                }
            });
        };
        MultiPaymentFormComponent.prototype.ngOnDestroy = function () {
            this.destroy$.next();
            this.destroy$.complete();
        };
        MultiPaymentFormComponent.prototype.hideAlert = function (id) {
            var _a;
            this.hideError.emit({
                id: id,
                stepName: ((_a = this.stateService.currentStep) === null || _a === void 0 ? void 0 : _a.stepName) || '',
            });
        };
        MultiPaymentFormComponent.prototype.getFormGroup = function (field) {
            return this.form.get(field.parent) || this.form;
        };
        return MultiPaymentFormComponent;
    }());
    /** @nocollapse */ MultiPaymentFormComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: MultiPaymentFormComponent, deps: [{ token: i5__namespace.FormBuilder }, { token: ComponentsFactoryService }, { token: MultiPaymentService }, { token: i1__namespace.BatchOrderStateService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ MultiPaymentFormComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: MultiPaymentFormComponent, selector: "bb-multi-payment-form", inputs: { stepperConfig: "stepperConfig", formItem: "formItem", config: "config", errorList: "errorList" }, outputs: { submitted: "submitted", stepNext: "stepNext", back: "back", hideError: "hideError" }, providers: [VisibilityService, ComponentsFactoryService], ngImport: i0__namespace, template: "<form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n  <ng-container *ngIf=\"stateService.step$ | async as step; else allControls\">\n    <div [ngClass]=\"step.cssClasses\">\n      <ng-container *ngFor=\"let field of controls\">\n        <div *ngIf=\"field['stepName'] === step['stepName']\">\n          <ng-container\n            *ngTemplateOutlet=\"controlTempl; context: { $implicit: field }\"\n          ></ng-container>\n        </div>\n      </ng-container>\n      <ng-container *ngIf=\"(stateService.state$ | async) !== 'VALID'\">\n        <div [ngClass]=\"step.buttonClass\">\n          <div\n            class=\"bb-stack\"\n            [ngClass]=\"{\n              'container container--fixed-width': step.footerDetail\n            }\"\n            data-role=\"payment-footer\"\n          >\n            <div *ngIf=\"step.footerDetail\" class=\"bb-stack__item\">\n              <div\n                *ngIf=\"step.footerDetail.totalCount\"\n                i18n=\"@@multipayment-form-footer-text-total-transfers.text\"\n                data-role=\"total-transfers\"\n              >\n                {{ totalTransfers$ | async }} {totalTransfers$ | async, plural,\n                =1 {Transfer} other {Transfers}} (Credit)\n              </div>\n              <div\n                *ngIf=\"step.footerDetail.totalAmount\"\n                class=\"bb-highlight\"\n                i18n=\"@@multipayment-form-footer-text-total-amount.text\"\n                data-role=\"total-amount\"\n              >\n                Total: {{ currency\n                }}{{ totalAmount$ | async | number: '1.2-2' }}\n              </div>\n            </div>\n\n            <div class=\"bb-stack__item bb-stack__item--push-right\">\n              <div class=\"bb-button-bar bb-button-bar--reverse\">\n                <button\n                  bbButton\n                  *ngFor=\"let buttonDetail of step.buttonConfig\"\n                  class=\"bb-button-bar__button\"\n                  [color]=\"buttonDetail.type\"\n                  [attr.data-role]=\"'multi-payment-' + buttonDetail.action\"\n                  (click)=\"\n                    triggerButtonEvent(\n                      buttonDetail?.hooks,\n                      buttonDetail.action,\n                      step\n                    )\n                  \"\n                >\n                  {{ buttonDetail.text }}\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </ng-container>\n    </div>\n  </ng-container>\n\n  <ng-template #allControls>\n    <div>\n      <div *ngFor=\"let field of controls\">\n        <ng-container\n          *ngTemplateOutlet=\"controlTempl; context: { $implicit: field }\"\n        ></ng-container>\n      </div>\n      <div class=\"bb-button-bar\">\n        <button\n          bbButton\n          class=\"bb-button-bar__button\"\n          (click)=\"onSubmit()\"\n          color=\"primary\"\n          data-role=\"multi-payment-submit-button\"\n          i18n=\"\n            Submit button|Body text of the button that allows the user to go to\n            submit step @@bb-multi-payment-widget.submit\"\n        >\n          Submit\n        </button>\n      </div>\n    </div>\n  </ng-template>\n\n  <ng-template #controlTempl let-field>\n    <ng-container\n      *ngTemplateOutlet=\"\n        field.fields ? formGroupTmpl : formControlTmpl;\n        context: { $implicit: field }\n      \"\n    >\n    </ng-container>\n  </ng-template>\n\n  <ng-template let-config #formGroupTmpl>\n    <bb-payord-group [config]=\"config\" [group]=\"getFormGroup(config)\">\n      <ng-container *ngFor=\"let control of config.fields\">\n        <ng-container\n          *ngTemplateOutlet=\"\n            control.fields ? formGroupTmpl : formControlTmpl;\n            context: { $implicit: control }\n          \"\n        >\n        </ng-container>\n      </ng-container>\n    </bb-payord-group>\n  </ng-template>\n\n  <ng-template let-config #formControlTmpl>\n    <ng-container\n      bbPaymentFormField\n      [config]=\"config\"\n      [options]=\"config.options\"\n      [group]=\"getFormGroup(config)\"\n    >\n    </ng-container>\n  </ng-template>\n</form>\n", components: [{ type: PayordGroupComponent, selector: "bb-payord-group", inputs: ["config", "group"] }], directives: [{ type: i5__namespace.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i5__namespace.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5__namespace.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i4__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i4__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i7__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: PaymentFormFieldDirective, selector: "[bbPaymentFormField]", inputs: ["options", "config", "group"] }], pipes: { "async": i4__namespace.AsyncPipe, "number": i4__namespace.DecimalPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: MultiPaymentFormComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-multi-payment-form',
                        templateUrl: './multi-payment-form.component.html',
                        providers: [VisibilityService, ComponentsFactoryService],
                    }]
            }], ctorParameters: function () { return [{ type: i5__namespace.FormBuilder }, { type: ComponentsFactoryService }, { type: MultiPaymentService }, { type: i1__namespace.BatchOrderStateService }]; }, propDecorators: { stepperConfig: [{
                    type: i0.Input
                }], formItem: [{
                    type: i0.Input
                }], config: [{
                    type: i0.Input
                }], errorList: [{
                    type: i0.Input
                }], submitted: [{
                    type: i0.Output
                }], stepNext: [{
                    type: i0.Output
                }], back: [{
                    type: i0.Output
                }], hideError: [{
                    type: i0.Output
                }] } });
    var templateObject_1;

    var ErrorAlertComponent = /** @class */ (function () {
        function ErrorAlertComponent() {
            /**
             * Emitted when an alert has been closed
             */
            this.hideAlert = new i0.EventEmitter();
            this.hostRef = this;
        }
        ErrorAlertComponent.prototype.ngOnChanges = function () {
            if (this.errorList && this.errorList.length > 0) {
                this.errorList.forEach(function (error) {
                    var _a;
                    for (var context in error.context) {
                        if (error.message && ((_a = error.context) === null || _a === void 0 ? void 0 : _a.hasOwnProperty(context))) {
                            var regEx = new RegExp('{{' + context + '}}', 'g');
                            var replacedValue = error.context[context];
                            error.message = error.message.replace(regEx, replacedValue);
                        }
                    }
                });
            }
        };
        ErrorAlertComponent.prototype.hideError = function (index) {
            this.hideAlert.emit(index);
        };
        return ErrorAlertComponent;
    }());
    /** @nocollapse */ ErrorAlertComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ErrorAlertComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ ErrorAlertComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ErrorAlertComponent, selector: "bb-error-alert", inputs: { errorList: "errorList" }, outputs: { hideAlert: "hideAlert" }, usesOnChanges: true, ngImport: i0__namespace, template: "<div class=\"sticky-top pt-2\">\n  <div\n    class=\"bb-block bb-block--md\"\n    *ngFor=\"let error of errorList; let ind = index\"\n    role=\"alert\"\n  >\n    <ng-content\n      *ngTemplateOutlet=\"notification; context: { error: error, id: ind }\"\n    ></ng-content>\n  </div>\n</div>\n\n<ng-template #notification let-error=\"error\" let-id=\"id\">\n  <bb-alert-ui [title]=\"''\" [dismissible]=\"true\" (close)=\"hideError(id)\">\n    <p class=\"bb-block bb-block--no-margin\">{{ error?.message }}</p>\n  </bb-alert-ui>\n</ng-template>\n", components: [{ type: i1__namespace$d.AlertComponent, selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }], directives: [{ type: i4__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i4__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ErrorAlertComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-error-alert',
                        templateUrl: './error-alert.component.html',
                    }]
            }], propDecorators: { errorList: [{
                    type: i0.Input
                }], hideAlert: [{
                    type: i0.Output
                }] } });

    var entryComponents = [
        PayordAddressComponent,
        PayordAmountComponent,
        PayordBeneficiarySelectorComponent,
        PayordCheckboxComponent,
        PayordDebitAccountSelectorComponent,
        PayordRadioComponent,
        PayordScheduleComponent,
        PayordSelectComponent,
        PayordTextAreaComponent,
        PayordTextboxComponent,
        PayordSwitchComponent,
        PayordDateComponent,
        PayordNumberComponent,
        PayordPhoneComponent,
        ValidationMessageComponent,
        PayordSelectPaymentOptionComponent,
        PayordPaymentCostComponent,
        PayordInternalAccountSelectorComponent,
        PayordCompactAmountComponent,
        PayordButtonGroupComponent,
        PayordScheduleHeaderComponent,
        PayordSanctionedCurrencyAmountComponent,
        PayordCountrySelectorComponent,
        PayordChargeBearerComponent,
        PayordSanctionedCountrySelectorComponent,
        PayordChargeBearerComponent,
        MultiPaymentCardComponent,
        MultiPaymentFormComponent,
        PayordCreditDebitSelectorComponent,
        PayordInternalAmountOptionsComponent,
        PayordHeaderComponent,
        PayordPurposeOfPaymentComponent,
        PayordAlertComponent,
        ErrorAlertComponent,
        PayordScheduleSwitchComponent,
        PayordBeneficiaryGroupHeaderComponent,
        MultiPaymentAccountSelectorComponent,
        PayordContactSelectorComponent,
    ];
    var modules = [
        i1$5.InputTextModule,
        i2$2.InputRadioGroupModule,
        i5$1.InputCheckboxModule,
        i1$6.InputDatepickerModule,
        i1$7.InputNumberModule,
        i1$8.InputPhoneModule,
        i1$1.CurrencyInputModule,
        i1$4.TextareaModule,
        i2$5.SwitchModule,
        i2$4.DropdownSingleSelectModule,
        i5.FormsModule,
        i5.ReactiveFormsModule,
        i2$2.InputRadioGroupModule,
        i2$1.AccountSelectorModule,
        i1$3.CollapsibleModule,
        i1$d.AlertModule,
        i1.PaymentOrdersUiModule,
        i5$2.AmountModule,
        i2$7.FieldsetModule,
        i2$6.LoadButtonModule,
        i4$1.LoadingIndicatorModule,
        i3$1.ProductSelectorModule,
        i4$2.ProductItemBasicAccountModule,
        i7.ButtonModule,
        i2$3.IconModule,
        i6.EmptyStateModule,
        stepper.StepperModule,
        i6$1.TooltipModule,
        i1$a.AmountInputModule,
    ];
    var components = __spreadArray([
        PayordFormComponent,
        PayordGroupComponent,
        AdaptiveFormComponent
    ], __read(entryComponents));
    var directives = [PaymentFormFieldDirective, DynamicAriaAttributeDirective];
    /**
     * Exports the UI components, directives and modules for the form builder
     */
    var PayordFormBuilderAngModule = /** @class */ (function () {
        function PayordFormBuilderAngModule() {
        }
        return PayordFormBuilderAngModule;
    }());
    /** @nocollapse */ PayordFormBuilderAngModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordFormBuilderAngModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ PayordFormBuilderAngModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordFormBuilderAngModule, declarations: [PayordFormComponent,
            PayordGroupComponent,
            AdaptiveFormComponent, PayordAddressComponent,
            PayordAmountComponent,
            PayordBeneficiarySelectorComponent,
            PayordCheckboxComponent,
            PayordDebitAccountSelectorComponent,
            PayordRadioComponent,
            PayordScheduleComponent,
            PayordSelectComponent,
            PayordTextAreaComponent,
            PayordTextboxComponent,
            PayordSwitchComponent,
            PayordDateComponent,
            PayordNumberComponent,
            PayordPhoneComponent,
            ValidationMessageComponent,
            PayordSelectPaymentOptionComponent,
            PayordPaymentCostComponent,
            PayordInternalAccountSelectorComponent,
            PayordCompactAmountComponent,
            PayordButtonGroupComponent,
            PayordScheduleHeaderComponent,
            PayordSanctionedCurrencyAmountComponent,
            PayordCountrySelectorComponent,
            PayordChargeBearerComponent,
            PayordSanctionedCountrySelectorComponent,
            PayordChargeBearerComponent,
            MultiPaymentCardComponent,
            MultiPaymentFormComponent,
            PayordCreditDebitSelectorComponent,
            PayordInternalAmountOptionsComponent,
            PayordHeaderComponent,
            PayordPurposeOfPaymentComponent,
            PayordAlertComponent,
            ErrorAlertComponent,
            PayordScheduleSwitchComponent,
            PayordBeneficiaryGroupHeaderComponent,
            MultiPaymentAccountSelectorComponent,
            PayordContactSelectorComponent, PaymentFormFieldDirective, DynamicAriaAttributeDirective], imports: [i4.CommonModule, i1$2.BackbaseCoreModule, i1$5.InputTextModule,
            i2$2.InputRadioGroupModule,
            i5$1.InputCheckboxModule,
            i1$6.InputDatepickerModule,
            i1$7.InputNumberModule,
            i1$8.InputPhoneModule,
            i1$1.CurrencyInputModule,
            i1$4.TextareaModule,
            i2$5.SwitchModule,
            i2$4.DropdownSingleSelectModule,
            i5.FormsModule,
            i5.ReactiveFormsModule,
            i2$2.InputRadioGroupModule,
            i2$1.AccountSelectorModule,
            i1$3.CollapsibleModule,
            i1$d.AlertModule,
            i1.PaymentOrdersUiModule,
            i5$2.AmountModule,
            i2$7.FieldsetModule,
            i2$6.LoadButtonModule,
            i4$1.LoadingIndicatorModule,
            i3$1.ProductSelectorModule,
            i4$2.ProductItemBasicAccountModule,
            i7.ButtonModule,
            i2$3.IconModule,
            i6.EmptyStateModule,
            stepper.StepperModule,
            i6$1.TooltipModule,
            i1$a.AmountInputModule], exports: [PayordFormComponent,
            PayordGroupComponent,
            AdaptiveFormComponent, PayordAddressComponent,
            PayordAmountComponent,
            PayordBeneficiarySelectorComponent,
            PayordCheckboxComponent,
            PayordDebitAccountSelectorComponent,
            PayordRadioComponent,
            PayordScheduleComponent,
            PayordSelectComponent,
            PayordTextAreaComponent,
            PayordTextboxComponent,
            PayordSwitchComponent,
            PayordDateComponent,
            PayordNumberComponent,
            PayordPhoneComponent,
            ValidationMessageComponent,
            PayordSelectPaymentOptionComponent,
            PayordPaymentCostComponent,
            PayordInternalAccountSelectorComponent,
            PayordCompactAmountComponent,
            PayordButtonGroupComponent,
            PayordScheduleHeaderComponent,
            PayordSanctionedCurrencyAmountComponent,
            PayordCountrySelectorComponent,
            PayordChargeBearerComponent,
            PayordSanctionedCountrySelectorComponent,
            PayordChargeBearerComponent,
            MultiPaymentCardComponent,
            MultiPaymentFormComponent,
            PayordCreditDebitSelectorComponent,
            PayordInternalAmountOptionsComponent,
            PayordHeaderComponent,
            PayordPurposeOfPaymentComponent,
            PayordAlertComponent,
            ErrorAlertComponent,
            PayordScheduleSwitchComponent,
            PayordBeneficiaryGroupHeaderComponent,
            MultiPaymentAccountSelectorComponent,
            PayordContactSelectorComponent, PaymentFormFieldDirective, DynamicAriaAttributeDirective, i1$5.InputTextModule,
            i2$2.InputRadioGroupModule,
            i5$1.InputCheckboxModule,
            i1$6.InputDatepickerModule,
            i1$7.InputNumberModule,
            i1$8.InputPhoneModule,
            i1$1.CurrencyInputModule,
            i1$4.TextareaModule,
            i2$5.SwitchModule,
            i2$4.DropdownSingleSelectModule,
            i5.FormsModule,
            i5.ReactiveFormsModule,
            i2$2.InputRadioGroupModule,
            i2$1.AccountSelectorModule,
            i1$3.CollapsibleModule,
            i1$d.AlertModule,
            i1.PaymentOrdersUiModule,
            i5$2.AmountModule,
            i2$7.FieldsetModule,
            i2$6.LoadButtonModule,
            i4$1.LoadingIndicatorModule,
            i3$1.ProductSelectorModule,
            i4$2.ProductItemBasicAccountModule,
            i7.ButtonModule,
            i2$3.IconModule,
            i6.EmptyStateModule,
            stepper.StepperModule,
            i6$1.TooltipModule,
            i1$a.AmountInputModule] });
    /** @nocollapse */ PayordFormBuilderAngModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordFormBuilderAngModule, providers: [
            i4.DatePipe,
            i4.CurrencyPipe,
            VisibilityService,
            ComponentsFactoryService,
        ], imports: [__spreadArray([i4.CommonModule, i1$2.BackbaseCoreModule], __read(modules)), i1$5.InputTextModule,
            i2$2.InputRadioGroupModule,
            i5$1.InputCheckboxModule,
            i1$6.InputDatepickerModule,
            i1$7.InputNumberModule,
            i1$8.InputPhoneModule,
            i1$1.CurrencyInputModule,
            i1$4.TextareaModule,
            i2$5.SwitchModule,
            i2$4.DropdownSingleSelectModule,
            i5.FormsModule,
            i5.ReactiveFormsModule,
            i2$2.InputRadioGroupModule,
            i2$1.AccountSelectorModule,
            i1$3.CollapsibleModule,
            i1$d.AlertModule,
            i1.PaymentOrdersUiModule,
            i5$2.AmountModule,
            i2$7.FieldsetModule,
            i2$6.LoadButtonModule,
            i4$1.LoadingIndicatorModule,
            i3$1.ProductSelectorModule,
            i4$2.ProductItemBasicAccountModule,
            i7.ButtonModule,
            i2$3.IconModule,
            i6.EmptyStateModule,
            stepper.StepperModule,
            i6$1.TooltipModule,
            i1$a.AmountInputModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PayordFormBuilderAngModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: __spreadArray(__spreadArray([], __read(components)), __read(directives)),
                        exports: __spreadArray(__spreadArray(__spreadArray([], __read(components)), __read(directives)), __read(modules)),
                        entryComponents: entryComponents,
                        imports: __spreadArray([i4.CommonModule, i1$2.BackbaseCoreModule], __read(modules)),
                        providers: [
                            i4.DatePipe,
                            i4.CurrencyPipe,
                            VisibilityService,
                            ComponentsFactoryService,
                        ],
                        schemas: [i0.CUSTOM_ELEMENTS_SCHEMA],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.ActivatableFormField = ActivatableFormField;
    exports.ComponentsFactoryService = ComponentsFactoryService;
    exports.MultiPaymentService = MultiPaymentService;
    exports.PaymentComponentsMap = PaymentComponentsMap;
    exports.PayordAmountComponent = PayordAmountComponent;
    exports.PayordBeneficiarySelectorComponent = PayordBeneficiarySelectorComponent;
    exports.PayordCountrySelectorComponent = PayordCountrySelectorComponent;
    exports.PayordDebitAccountSelectorComponent = PayordDebitAccountSelectorComponent;
    exports.PayordFormBuilderAngModule = PayordFormBuilderAngModule;
    exports.PayordInternalAccountSelectorComponent = PayordInternalAccountSelectorComponent;
    exports.PayordInternalAmountOptionsComponent = PayordInternalAmountOptionsComponent;
    exports.PayordSanctionedCountrySelectorComponent = PayordSanctionedCountrySelectorComponent;
    exports.PayordSanctionedCurrencyAmountComponent = PayordSanctionedCurrencyAmountComponent;
    exports.PayordSelectPaymentOptionComponent = PayordSelectPaymentOptionComponent;
    exports.VisibilityService = VisibilityService;
    exports.addAddressFields = addAddressFields;
    exports.addControlToFormArray = addControlToFormArray;
    exports.applyInputFormSettingForCountry = applyInputFormSettingForCountry;
    exports.applyPurposeOfPaymentSettings = applyPurposeOfPaymentSettings;
    exports.createControlsMap = createControlsMap;
    exports.createValidatorFromRegex = createValidatorFromRegex;
    exports.filterPaymentConfigs = filterPaymentConfigs;
    exports.getBeneficiaryDetails = getBeneficiaryDetails;
    exports.getChargeBearerFieldConfig = getChargeBearerFieldConfig;
    exports.getCounterpartyFormGroupDetails = getCounterpartyFormGroupDetails;
    exports.getFormFieldData = getFormFieldData;
    exports.getMappedGroup = getMappedGroup;
    exports.getParentForm = getParentForm;
    exports.getPaymentCostFieldConfig = getPaymentCostFieldConfig;
    exports.getRelatedPaymentConfig = getRelatedPaymentConfig;
    exports.getSelectPaymentOptionFieldConfig = getSelectPaymentOptionFieldConfig;
    exports.hasSameFields = hasSameFields;
    exports.isClosedPaymentValidator = isClosedPaymentValidator;
    exports.isControlFilled = isControlFilled;
    exports.isEditFormDirty = isEditFormDirty;
    exports.isTemplateFormDirty = isTemplateFormDirty;
    exports.registerFormArray = registerFormArray;
    exports.registerFormControl = registerFormControl;
    exports.registerFormGroup = registerFormGroup;
    exports.resetValidators = resetValidators;
    exports.revertBeneficiaryChanges = revertBeneficiaryChanges;
    exports.setAdditionalBankDetails = setAdditionalBankDetails;
    exports.tagFormGroupToFormFields = tagFormGroupToFormFields;
    exports.triggerHook = triggerHook;
    exports.triggerStepperHook = triggerStepperHook;
    exports["ӨAdaptiveFormComponent"] = AdaptiveFormComponent;
    exports["ӨDynamicAriaAttributeDirective"] = DynamicAriaAttributeDirective;
    exports["ӨErrorAlertComponent"] = ErrorAlertComponent;
    exports["ӨMultiPaymentAccountSelectorComponent"] = MultiPaymentAccountSelectorComponent;
    exports["ӨMultiPaymentCardComponent"] = MultiPaymentCardComponent;
    exports["ӨMultiPaymentFormComponent"] = MultiPaymentFormComponent;
    exports["ӨPaymentFormFieldDirective"] = PaymentFormFieldDirective;
    exports["ӨPayordAddressComponent"] = PayordAddressComponent;
    exports["ӨPayordAlertComponent"] = PayordAlertComponent;
    exports["ӨPayordBeneficiaryGroupHeaderComponent"] = PayordBeneficiaryGroupHeaderComponent;
    exports["ӨPayordButtonGroupComponent"] = PayordButtonGroupComponent;
    exports["ӨPayordChargeBearerComponent"] = PayordChargeBearerComponent;
    exports["ӨPayordCheckboxComponent"] = PayordCheckboxComponent;
    exports["ӨPayordCompactAmountComponent"] = PayordCompactAmountComponent;
    exports["ӨPayordContactSelectorComponent"] = PayordContactSelectorComponent;
    exports["ӨPayordCreditDebitSelectorComponent"] = PayordCreditDebitSelectorComponent;
    exports["ӨPayordDateComponent"] = PayordDateComponent;
    exports["ӨPayordFormComponent"] = PayordFormComponent;
    exports["ӨPayordGroupComponent"] = PayordGroupComponent;
    exports["ӨPayordHeaderComponent"] = PayordHeaderComponent;
    exports["ӨPayordNumberComponent"] = PayordNumberComponent;
    exports["ӨPayordPaymentCostComponent"] = PayordPaymentCostComponent;
    exports["ӨPayordPhoneComponent"] = PayordPhoneComponent;
    exports["ӨPayordPurposeOfPaymentComponent"] = PayordPurposeOfPaymentComponent;
    exports["ӨPayordRadioComponent"] = PayordRadioComponent;
    exports["ӨPayordScheduleComponent"] = PayordScheduleComponent;
    exports["ӨPayordScheduleHeaderComponent"] = PayordScheduleHeaderComponent;
    exports["ӨPayordScheduleSwitchComponent"] = PayordScheduleSwitchComponent;
    exports["ӨPayordSelectComponent"] = PayordSelectComponent;
    exports["ӨPayordSwitchComponent"] = PayordSwitchComponent;
    exports["ӨPayordTextAreaComponent"] = PayordTextAreaComponent;
    exports["ӨPayordTextboxComponent"] = PayordTextboxComponent;
    exports["ӨValidationMessageComponent"] = ValidationMessageComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-payord-form-builder-ang.umd.js.map
