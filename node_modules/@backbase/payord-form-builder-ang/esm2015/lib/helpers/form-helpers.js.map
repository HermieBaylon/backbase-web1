{"version":3,"file":"form-helpers.js","sourceRoot":"","sources":["../../../../../../libs/payord-form-builder-ang/src/lib/helpers/form-helpers.ts"],"names":[],"mappings":"AAAA,OAAO,EAGL,SAAS,EACT,WAAW,EACX,SAAS,EAET,UAAU,GACX,MAAM,gBAAgB,CAAC;AAExB,OAAO,EAEL,eAAe,EAIf,kBAAkB,EAClB,wBAAwB,EACxB,QAAQ,EACR,uBAAuB,EACvB,SAAS,EACT,qBAAqB,EACrB,YAAY,EACZ,oBAAoB,EACpB,0BAA0B,EAC1B,cAAc,EACd,6BAA6B,EAC7B,YAAY,EACZ,iBAAiB,EAIjB,qBAAqB,EAGrB,oBAAoB,EACpB,uBAAuB,GAExB,MAAM,8BAA8B,CAAC;AACtC,OAAO,EAAE,uBAAuB,EAAE,MAAM,iBAAiB,CAAC;AAE1D;;;;;;;;;GASG;AACH,MAAM,UAAU,mBAAmB,CACjC,KAAgB,EAChB,eAAuB,EACvB,UAA+B,EAC/B,eAAyC,EACzC,eAAoB,EAAE,EACtB,MAA+B;IAE/B,IAAI,WAA4B,CAAC;IACjC,WAAW,GAAG,KAAK,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC;IAC9C,KAAK,CAAC,UAAU,CACd,eAAe,EACf,IAAI,WAAW,CAAC,YAAY,EAAE,UAAU,IAAI,EAAE,EAAE,eAAe,IAAI,EAAE,CAAC,CACvE,CAAC;IAEF,IAAI,WAAW,EAAE;QACf,eAAe,CAAC,WAAW,EAAE,UAAU,EAAE,eAAe,EAAE,MAAM,CAAC,CAAC;KACnE;SAAM;QACL,KAAK,CAAC,UAAU,CACd,eAAe,EACf,IAAI,WAAW,CAAC,YAAY,EAAE,UAAU,IAAI,EAAE,EAAE,eAAe,IAAI,EAAE,CAAC,CACvE,CAAC;QACF,WAAW,GAAG,KAAK,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC;KAC/C;IAED,OAAO,WAAW,CAAC;AACrB,CAAC;AAED;;GAEG;AACH,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAC/B,QAA0D,EAC1D,cAA4E,EAAE,EAC9E,EAAE;IACF,IAAI,IAAY,CAAC;IACjB,OAAO,QAAQ,CAAC,MAAM,CACpB,CACE,GAAiE,EACjE,OAAkD,EAClD,EAAE;QACF,IAAI,GAAG,OAAO,CAAC,MAAM;YACnB,CAAC,CAAC,GAAG,OAAO,CAAC,MAAM,IAAI,OAAO,CAAC,IAAI,EAAE;YACrC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC;QACjB,IAAuB,OAAQ,CAAC,MAAM,EAAE;YACtC,GAAG,mCACE,GAAG,GACH,iBAAiB,CAAoB,OAAQ,CAAC,MAAM,EAAE,GAAG,CAAC,CAC9D,CAAC;SACH;aAAM;YACL,GAAG,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC;SACrB;QACD,OAAO,GAAG,CAAC;IACb,CAAC,EACD,WAAW,CACZ,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,UAAU,iBAAiB,CAC/B,KAAgB,EAChB,aAAqB,EACrB,eAAyC,EACzC,UAA+B,EAC/B,eAAyC;IAEzC,MAAM,QAAQ,GACD,KAAK,CAAC,GAAG,CAAC,aAAa,CAAC;QACnC,IAAI,SAAS,CAAC,EAAE,EAAE,UAAU,IAAI,EAAE,EAAE,eAAe,IAAI,EAAE,CAAC,CAAC;IAE7D,KAAK,MAAM,GAAG,IAAI,eAAe,EAAE;QACjC,IAAI,eAAe,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE;YACvC,QAAQ,CAAC,eAAe,CACtB,GAAG,EACH,IAAI,WAAW,CACb,eAAe,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAC3B,eAAe,CAAC,GAAG,CAAC,CAAC,KAAK,EAAyB,IAAI,EAAE,CAC3D,CACF,CAAC;SACH;KACF;IACD,KAAK,CAAC,UAAU,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC;IAE1C,OAAO,KAAK,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;AAClC,CAAC;AAED,MAAM,UAAU,aAAa,CAAC,OAAwB;IACpD,IAAI,QAAQ,GAAG,OAAO,CAAC;IAEvB,OAAO,QAAQ,IAAI,QAAQ,CAAC,MAAM,EAAE;QAClC,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC;KAC5B;IAED,OAAkB,QAAQ,CAAC;AAC7B,CAAC;AAED,MAAM,UAAU,gBAAgB,CAAC,EAC/B,eAAe,EACf,IAAI,EACJ,MAAM,GAKP;IAMC,MAAM,WAAW,GAA2B;QAC1C,kFAAkF,EAChF;YACE,IAAI,EAAE,kBAAkB,CAAC,aAAa;YACtC,IAAI,EAAE,GAAG,iBAAiB,CAAC,YAAY,IAAI,kBAAkB,CAAC,aAAa,EAAE;SAC9E;QACH,gEAAgE,EAAE;YAChE,IAAI,EAAE,kBAAkB,CAAC,cAAc;YACvC,IAAI,EAAE,GAAG,iBAAiB,CAAC,YAAY,IAAI,kBAAkB,CAAC,YAAY,IAAI,kBAAkB,CAAC,cAAc,EAAE;SAClH;QACD,8DAA8D,EAAE;YAC9D,IAAI,EAAE,oBAAoB,CAAC,mBAAmB;YAC9C,IAAI,EAAE,GAAG,iBAAiB,CAAC,cAAc,IAAI,oBAAoB,CAAC,mBAAmB,EAAE;SACxF;KACF,CAAC;IACF,MAAM,SAAS,GAAG,WAAW,CAAC,eAAe,CAAC,IAAI,IAAI,CAAC;IAEvD,IAAI,SAAS,EAAE;QACb,MAAM,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QACzC,MAAM,WAAW,GAAG,SAAS,CAAC,SAAS,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QACtD,OAAO,EAAE,OAAO,EAAE,WAAW,EAAE,CAAC;KACjC;IACD,OAAO;AACT,CAAC;AAED,MAAM,UAAU,+BAA+B,CAAC,EAC9C,gBAAgB,EAChB,IAAI,EACJ,MAAM,GAKP;;IACC,MAAM,iBAAiB,GAAc,IAAI,CAAC,GAAG,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC;IAC9E,MAAM,sBAAsB,GAAc,CACxC,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,eAAe,CAAC,CACvC,CAAC;IACF,MAAM,uBAAuB,GAAc,CACzC,iBAAiB,CAAC,GAAG,CAAC,kBAAkB,CAAC,EAAE,CAAC,CAC7C,CAAC;IACF,MAAM,aAAa,GACjB,iBAAiB,CAAC,GAAG,CAAC,kBAAkB,CAAC,UAAU,CAAC;QACpD,mBAAmB,CAAC,iBAAiB,EAAE,kBAAkB,CAAC,UAAU,CAAC,CAAC;IACxE,IAAI,gBAAgB,CAAC,QAAQ,EAAE;QAC7B,MAAM,EAAE,OAAO,GAAG,IAAI,EAAE,WAAW,GAAG,IAAI,EAAE,GAC1C,gBAAgB,CAAC;YACf,eAAe,EAAE,gBAAgB,CAAC,QAAQ;YAC1C,IAAI;YACJ,MAAM;SACP,CAAC,IAAI,EAAE,CAAC;QAEX,IAAI,UAAU,GAAyB,EAAE,CAAC;QAC1C,IAAI,gBAAgB,CAAC,SAAS,EAAE;YAC9B,4EAA4E;YAC5E,IAAI,gBAAgB,CAAC,GAAG,KAAK,UAAU,EAAE;gBACvC,UAAU,CAAC,IAAI,CAAC,eAA8B,CAAC,CAAC;aACjD;iBAAM;gBACL,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;aACtC;SACF;QAED,IAAI,gBAAgB,CAAC,KAAK,EAAE;YAC1B,UAAU,CAAC,IAAI,CAAC,wBAAwB,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC;SACnE;QAED,IAAI,gBAAgB,CAAC,GAAG,KAAK,UAAU,IAAI,gBAAgB,CAAC,MAAM,CAAC,MAAM,EAAE;YACzE,UAAU,CAAC,IAAI,CAAC,wBAAwB,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,CAAC;SACpE;QAED,IAAI,gBAAgB,CAAC,GAAG,KAAK,gBAAgB,EAAE;YAC7C,aAAa,CAAC,QAAQ,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;YAChD,IAAI,gBAAgB,CAAC,MAAM,KAAK,MAAM,EAAE;gBACtC,UAAU,CAAC,IAAI,CAAC,oBAAoB,EAAE,CAAC,CAAC;aACzC;SACF;QAED,IAAI,OAAO,IAAI,WAAW,EAAE;YAC1B,MAAM,SAAS,GAAG,gBAAgB,CAAC,KAAK,IAAI,EAAE,CAAC;YAC/C,MAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;YAC3C,MAAM,KAAK,GAAG,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,mCAAmC;YACtE,WAAW,CAAC,OAAO,GAAG,WAAW,CAAC,OAAO,IAAI,EAAE,CAAC;YAEhD,IAAI,KAAK,EAAE;gBACT,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,YAAY,EAAE;oBACrC,WAAW,CAAC,OAAO,CAAC,YAAY;wBAC9B,wBAAwB,CACtB,MAAA,IAAI,CAAC,GAAG,CAAC,wBAAwB,CAAC,0CAAE,KAAK,CAC1C,IAAI,WAAW,CAAC,OAAO,CAAC,KAAK,CAAC;iBAClC;gBACD,WAAW,CAAC,OAAO,CAAC,KAAK,GAAG,KAAK,CAAC;aACnC;iBAAM,IACL,WAAW,CAAC,OAAO,CAAC,YAAY;gBAChC,WAAW,CAAC,OAAO,CAAC,YAAY,KAAK,WAAW,CAAC,OAAO,CAAC,KAAK,EAC9D;gBACA,yEAAyE;gBACzE,WAAW,CAAC,OAAO,CAAC,KAAK,GAAG,WAAW,CAAC,OAAO,CAAC,YAAY,CAAC;aAC9D;YAED,MAAM,oBAAoB,GAAG,CAAC,CAC5B,CAAA,sBAAsB,aAAtB,sBAAsB,uBAAtB,sBAAsB,CAAE,KAAK,MAAI,uBAAuB,aAAvB,uBAAuB,uBAAvB,uBAAuB,CAAE,KAAK,CAAA,CAChE,CAAC;YACF,IAAI,gBAAgB,CAAC,aAAa,EAAE;gBAClC,OAAO,CAAC,KAAK,EAAE,CAAC;gBAChB,UAAU,GAAG,IAAI,CAAC;gBAClB,OAAO,CAAC,OAAO,EAAE,CAAC;aACnB;iBAAM,IAAI,OAAO,CAAC,QAAQ,IAAI,oBAAoB,EAAE;gBACnD,OAAO,CAAC,MAAM,EAAE,CAAC;aAClB;YAED,IAAI,eAAe,CAAC,OAAO,CAAC,EAAE;gBAC5B,OAAO,CAAC,aAAa,EAAE,CAAC;aACzB;YACD,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;YAClC,OAAO,CAAC,sBAAsB,EAAE,CAAC;SAClC;KACF;AACH,CAAC;AAED,MAAM,UAAU,wBAAwB,CACtC,IAAe,EACf,MAAyB;;IAEzB,MAAM,OAAO,GAAmB,MAAA,IAAI,CAAC,GAAG,CAAC,wBAAwB,CAAC,0CAAE,KAAK,CAAC;IAC1E,IAAI,CAAC,OAAO;QAAE,OAAO;IAErB,MAAM,KAAK,GAAG,wBAAwB,CAAC,OAAO,CAAC,CAAC;IAChD,MAAM,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;IAC5B,IAAI,KAAK,EAAE;QACT,sBAAsB,CAAC,kBAAkB,CAAC,iBAAiB,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;QAC5E,sBAAsB,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;KAC5E;IAED,IAAI,KAAK,EAAE;QACT,8BAA8B,CAC5B,kBAAkB,CAAC,iBAAiB,EACpC,KAAK,EACL,MAAM,CACP,CAAC;QACF,8BAA8B,CAC5B,kBAAkB,CAAC,gBAAgB,EACnC,KAAK,EACL,MAAM,CACP,CAAC;KACH;AACH,CAAC;AAED,MAAM,UAAU,wBAAwB,CAAC,OAAe;IACtD,IAAI,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;QACpD,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;KAChC;IAED,OAAO,UAAU,CAAC,OAAO,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;AACjD,CAAC;AAED,SAAS,8BAA8B,CACrC,WAAmB,EACnB,KAAa,EACb,MAAyB;IAEzB,MAAM,oBAAoB,GAAG,SAAS,CACpC,WAAW,EACX,MAAM,CACa,CAAC;IACtB,IAAI,CAAC,oBAAoB;QAAE,OAAO;IAClC,MAAM,cAAc,GAAG,SAAS,CAC9B,kBAAkB,CAAC,cAAc,EACjC,oBAAoB,CACrB,CAAC;IACF,IAAI,cAAc,EAAE;QAClB,IAAI,CAAC,CAAA,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,OAAO,CAAA,EAAE;YAC5B,cAAc,CAAC,OAAO,GAAG,EAAE,CAAC;SAC7B;QACD,cAAc,CAAC,OAAO,CAAC,UAAU,GAAG,CAAC,wBAAwB,CAAC,KAAK,CAAC,CAAC,CAAC;KACvE;AACH,CAAC;AAED,SAAS,wBAAwB,CAAC,OAAwB;IACxD,OAAO,MAAM,CAAC,MAAM,CAAC,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,KAAK,KAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AAChD,CAAC;AAED,SAAS,sBAAsB,CAC7B,kBAA0B,EAC1B,KAAa,EACb,MAAyB;;IAEzB,MAAM,oBAAoB,GAAG,SAAS,CACpC,kBAAkB,EAClB,MAAM,CACa,CAAC;IACtB,IAAI,oBAAoB,EAAE;QACxB,MAAM,cAAc,GAAG,SAAS,CAC9B,kBAAkB,CAAC,cAAc,EACjC,oBAAoB,CACrB,CAAC;QACF,MAAM,kCAAkC,GAAG,SAAS,CAClD,8BAA8B,EAC9B,oBAAoB,CACrB,CAAC;QACF,MAAM,mCAAmC,GACvC,MAAA,kCAAkC,aAAlC,kCAAkC,uBAAlC,kCAAkC,CAAE,OAAO,0CAAE,OAAO,CAAC;QACvD,IAAI,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,OAAO,EAAE;YAC3B,cAAc,CAAC,OAAO,CAAC,KAAK,GAAG,KAAK,CAAC;SACtC;QACD,IAAI,mCAAmC,aAAnC,mCAAmC,uBAAnC,mCAAmC,CAAE,MAAM,EAAE;YAC/C,mCAAmC,CAAC,OAAO,CACzC,CAAC,MAAwC,EAAE,EAAE;gBAC3C,IAAI,MAAM,CAAC,KAAK,KAAK,aAAa,EAAE;oBAClC,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC;iBACtB;YACH,CAAC,CACF,CAAC;SACH;KACF;AACH,CAAC;AAED,MAAM,UAAU,eAAe,CAAC,OAAwB;;IACtD,MAAM,eAAe,GACnB,CAAC,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,KAAK,KAAI,EAAE,CAAC,CAAC,cAAc,CAAC,UAAU,CAAC;QACjD,CAAC,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,KAAK,KAAI,EAAE,CAAC,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;IAClD,OAAO,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA,MAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,KAAK,0CAAE,MAAM,CAAA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,KAAK,CAAA,CAAC;AACvE,CAAC;AAED,MAAM,UAAU,wBAAwB,CAAC,OAAwB;;IAC/D,MAAM,IAAI,GAAG,aAAa,CAAC,OAAO,CAAC,CAAC;IACpC,MAAM,mBAAmB,GAAG,MAAY,CACtC,IAAI,CAAC,GAAG,CAAC,iBAAiB,CAAC,YAAY,CAAC,CACxC,0CAAE,WAAW,EAAE,CAAC;IAClB,MAAM,mBAAmB,GAAG,MAAA,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,mBAAmB,CAAC,0CAAE,KAAK,CAAC;IAC9E,MAAM,4BAA4B,GAChC,6BAA6B,CAAC,mBAAmB,EAAE,mBAAmB,CAAC;QACvE,CAAC,CAAA,MAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,GAAG,CAAC,YAAY,CAAC,YAAY,CAAC,0CAAE,KAAK;YAC1C,2BAA2B,CAAC,mBAAmB,CAAC,CAAC,CAAC;IAEtD,OAAO,4BAA4B;SACjC,MAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,GAAG,CAAC,YAAY,CAAC,eAAe,CAAC,0CAAE,KAAK,CAAA;QAC9C,CAAC,CAAC,EAAE,8BAA8B,EAAE,IAAI,EAAE;QAC1C,CAAC,CAAC,IAAI,CAAC;AACX,CAAC;AAED,MAAM,UAAU,+BAA+B,CAC7C,IAAe;;IAEf,MAAM,YAAY,GAAwB,MAAY,CACpD,IAAI,CAAC,GAAG,CAAC,iBAAiB,CAAC,YAAY,CAAC,CACxC,0CAAE,WAAW,EAAE,CAAC;IAElB,OAAO;QACL,IAAI,EAAE,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,IAAI;QACxB,aAAa,EAAE,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,aAAa;QAC1C,cAAc,EAAE,MAAA,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,YAAY,0CAAE,cAAc;QAC1D,GAAG,EAAE,MAAA,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,YAAY,0CAAE,GAAG;KACrC,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,eAAe,CAC7B,WAA4B,EAC5B,UAA+B,EAC/B,eAAyC,EACzC,MAA+B;;IAE/B,MAAM,kBAAkB,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;IAE7D,IAAI,CAAC,CAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,MAAM,CAAA,KAAI,MAAA,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,OAAO,0CAAE,sBAAsB,CAAA,EAAE;QAC9D,kBAAkB,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;KAC9C;IAED,WAAW,CAAC,eAAe,EAAE,CAAC;IAC9B,WAAW,CAAC,eAAe,EAAE,CAAC;IAC9B,WAAW,CAAC,oBAAoB,EAAE,CAAC;IACnC,WAAW,CAAC,kBAAkB,CAAC,eAAe,IAAI,EAAE,CAAC,CAAC;IACtD,WAAW,CAAC,aAAa,CAAC,kBAAkB,CAAC,CAAC;AAChD,CAAC;AAED,MAAM,UAAU,gBAAgB,CAAC,SAAoB;IACnD,MAAM,aAAa,GAAG;QACpB,YAAY,EAAE,CAAC,EAAE,CAAC;QAClB,YAAY,EAAE,CAAC,EAAE,CAAC;QAClB,UAAU,EAAE,CAAC,EAAE,CAAC;QAChB,QAAQ,EAAE,CAAC,EAAE,CAAC;QACd,IAAI,EAAE,CAAC,EAAE,CAAC;QACV,kBAAkB,EAAE,CAAC,EAAE,CAAC;QACxB,OAAO,EAAE,CAAC,EAAE,CAAC;KACd,CAAC;IACF,KAAK,MAAM,GAAG,IAAI,aAAa,EAAE;QAC/B,IAAI,aAAa,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;YAC5D,mBAAmB,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;SACrC;KACF;AACH,CAAC;AAED,MAAM,UAAU,iBAAiB,CAC/B,KAAgB,EAChB,aAAqB,EACrB,UAA+B,EAC/B,eAAyC;IAEzC,MAAM,KAAK,GACE,KAAK,CAAC,GAAG,CAAC,aAAa,CAAC;QACnC,IAAI,SAAS,CAAC,EAAE,EAAE,UAAU,IAAI,EAAE,EAAE,eAAe,IAAI,EAAE,CAAC,CAAC;IAC7D,KAAK,CAAC,UAAU,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;IACvC,OAAO,KAAK,CAAC,GAAG,CAAC,aAAa,CAAc,CAAC;AAC/C,CAAC;AAED,MAAM,UAAU,qBAAqB,CACnC,KAAgB,EAChB,eAAsB,EACtB,UAA+B,EAC/B,eAAyC,EACzC,eAAoB,IAAI;IAExB,MAAM,QAAQ,GAAG,IAAI,SAAS,CAAC,EAAE,EAAE,UAAU,IAAI,EAAE,EAAE,eAAe,IAAI,EAAE,CAAC,CAAC;IAC5E,eAAe,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,EAAE;QACrC,IAAI,UAAU,CAAC,IAAI,EAAE;YACnB,QAAQ,CAAC,eAAe,CACtB,UAAU,CAAC,IAAI,EACf,IAAI,WAAW,CACb,YAAY,EACX,UAAU,CAAC,UAAiC,IAAI,EAAE,CACpD,CACF,CAAC;SACH;IACH,CAAC,CAAC,CAAC;IACH,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACrB,OAAO,KAAK,CAAC;AACf,CAAC;AAED,MAAM,UAAU,eAAe,CAC7B,SAAyB,EACzB,gBAAiC;;IAEjC,IAAI,CAAC,gBAAgB;QAAE,OAAO,IAAI,CAAC;IACnC,MAAM,QAAQ,GAAG,mBAAmB,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;IACzD,MAAM,eAAe,GAAG,mBAAmB,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;IAEvE,OAAO,CACL,CAAA,MAAA,SAAS,CAAC,SAAS,0CAAE,EAAE,OAAK,MAAA,gBAAgB,CAAC,SAAS,0CAAE,EAAE,CAAA;QAC1D,CAAC,0BAA0B,CACzB,SAAS,CAAC,YAAY,EACtB,gBAAgB,CAAC,YAAY,CAC9B;QACD,CAAC,YAAY,CAAC,QAAQ,EAAE,eAAe,CAAC;QACxC,qBAAqB,CACnB,SAAS,CAAC,iBAAiB,CAAC,cAAc,CAAC,EAC3C,gBAAgB,CAAC,iBAAiB,CAAC,cAAc,CAAC,CACnD;QACD,SAAS,CAAC,YAAY,KAAK,gBAAgB,CAAC,YAAY,CACzD,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,mBAAmB,CACjC,SAAyB,EACzB,gBAAgC;IAEhC,OAAO,CACL,SAAS,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC,EAAE;QACvC,gBAAgB,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC,EAAE;QAClD,CAAC,YAAY,CACX,SAAS,CAAC,iBAAiB,CAAC,YAAY,CAAC,EACzC,gBAAgB,CAAC,iBAAiB,CAAC,YAAY,CAAC,CACjD;QACD,qBAAqB,CACnB,SAAS,CAAC,iBAAiB,CAAC,cAAc,CAAC,EAC3C,gBAAgB,CAAC,iBAAiB,CAAC,cAAc,CAAC,CACnD;QACD,SAAS,CAAC,qBAAqB,CAAC,YAAY,CAAC;YAC3C,gBAAgB,CAAC,qBAAqB,CAAC,YAAY,CAAC,CACvD,CAAC;AACJ,CAAC;AAED,SAAS,mBAAmB,CAAC,QAAsB;IACjD,uCACK,QAAQ,KACX,SAAS,EAAE,QAAQ,CAAC,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,SAAS,CAAC,EACxC,OAAO,EAAE,QAAQ,CAAC,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,OAAO,CAAC,IACpC;AACJ,CAAC;AAED,SAAS,qBAAqB,CAC5B,cAAiC,EACjC,qBAAwC;IAExC,IAAI,CAAC,cAAc;QAAE,OAAO,KAAK,CAAC;IAClC,MAAM,WAAW,GAAG,cAAc,CAAC,oBAAoB,CAAC,mBAAmB,CAAC,CAAC;IAC7E,MAAM,kBAAkB,GACtB,qBAAqB,CAAC,oBAAoB,CAAC,mBAAmB,CAAC,CAAC;IAElE,OAAO,CACL,CAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,MAAM,OAAK,kBAAkB,aAAlB,kBAAkB,uBAAlB,kBAAkB,CAAE,MAAM,CAAA;QAClD,CAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,QAAQ,OAAK,kBAAkB,aAAlB,kBAAkB,uBAAlB,kBAAkB,CAAE,QAAQ,CAAA;QACtD,cAAc,CAAC,oBAAoB,CAAC,MAAM,CAAC;YACzC,qBAAqB,CAAC,oBAAoB,CAAC,MAAM,CAAC;QACpD,cAAc,CAAC,oBAAoB,CAAC,gBAAgB,CAAC;YACnD,qBAAqB,CAAC,oBAAoB,CAAC,gBAAgB,CAAC;QAC9D,cAAc,CAAC,oBAAoB,CAAC,WAAW,CAAC;YAC9C,qBAAqB,CAAC,oBAAoB,CAAC,WAAW,CAAC,CAC1D,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,6BAA6B,CAAC,EAC5C,IAAI,EACJ,MAAM,GAIP;;IACC,MAAM,OAAO,GAAG,MAAA,IAAI,CAAC,KAAK,0CAAE,qBAAqB,CAAC;IAClD,MAAM,eAAe,GAAc,IAAI,CAAC,GAAG,CAAC,iBAAiB,CAAC,cAAc,CAAC,CAAC;IAC9E,IAAI,CAAC,eAAe,EAAE;QACpB,OAAO;KACR;IACD,MAAM,cAAc,GAClB,eAAe,CAAC,GAAG,CAAC,oBAAoB,CAAC,gBAAgB,CAAC;QAC1D,mBAAmB,CAAC,eAAe,EAAE,oBAAoB,CAAC,gBAAgB,CAAC,CAAC;IAC9E,MAAM,IAAI,GAAG,uBAAuB,CAAC,OAAO,CAAC,CAAC;IAC9C,MAAM,WAAW,GAAG,SAAS,CAAC,oBAAoB,CAAC,gBAAgB,EAAE,MAAM,CAAC,CAAC;IAC7E,MAAM,OAAO,GAAG,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,OAAO,CAAC;IAErC,IAAI,cAAc,IAAI,OAAO,EAAE;QAC7B,OAAO,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;QACrC,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QACjC,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC;QAEtC,IAAI,OAAO,CAAC,UAAU,EAAE;YACtB,cAAc,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;YACnC,cAAc,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC;YACxC,cAAc,CAAC,sBAAsB,EAAE,CAAC;SACzC;aAAM;YACL,cAAc,CAAC,aAAa,CAAC;gBAC3B,UAAU,CAAC,QAAQ;gBACnB,GAAG,CAAC,OAAO,CAAC,UAAU,IAAI,EAAE,CAAC;aAC9B,CAAC,CAAC;YACH,cAAc,CAAC,kBAAkB,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,eAAe,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;YACxE,cAAc,CAAC,sBAAsB,EAAE,CAAC;SACzC;KACF;AACH,CAAC;AAED,SAAS,2BAA2B,CAAC,mBAAwC;;IAC3E,OAAO,cAAc,CAAC;QACpB,IAAI,EAAE,mBAAmB,aAAnB,mBAAmB,uBAAnB,mBAAmB,CAAE,IAAI;QAC/B,aAAa,EAAE,mBAAmB,CAAC,aAAa;QAChD,cAAc,EAAE,MAAA,mBAAmB,CAAC,YAAY,0CAAE,cAAc;KACjE,CAAC,CAAC;AACL,CAAC;AAED,MAAM,UAAU,qBAAqB,CACnC,WAA2C;;IAE3C,MAAM,cAAc,GAAG,MAAA,MAAc,WAAY,0CAAE,QAAQ,0CAAG,CAAC,CAAC,CAAC;IACjE,MAAM,eAAe,GAAG,WAA8B,CAAC;IACvD,OAAO;QACL,cAAc,EAAE,CAAA,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,QAAQ,MAAI,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAE,cAAc,CAAA;QAC3E,aAAa,EACX,CAAA,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,aAAa,MAAI,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAE,aAAa,CAAA;QACjE,IAAI,EAAE,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,IAAI;QACvB,GAAG,EAAE,CAAA,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,GAAG,MAAI,eAAe,aAAf,eAAe,uBAAf,eAAe,CAAE,GAAG,CAAA;QAChD,OAAO,EAAE,uBAAuB,CAAC,cAAc,CAAC;QAChD,WAAW,EAAE,qBAAqB,CAAC,cAAc,CAAC;KACnD,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,wBAAwB,CAAC,IAAe;;IACtD,MAAM,iBAAiB,GAAc,IAAI,CAAC,GAAG,CAAC,iBAAiB,CAAC,YAAY,CAAC,CAAC;IAC9E,MAAM,mBAAmB,GAAG,MAAA,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,mBAAmB,CAAC,0CAAE,KAAK,CAAC;IAC9E,MAAM,YAAY,GAAG,iBAAiB,CAAC,GAAG,CAAC,kBAAkB,CAAC,aAAa,CAAC,CAAC;IAC7E,MAAM,gBAAgB,GAAG,iBAAiB,CAAC,GAAG,CAAC;QAC7C,kBAAkB,CAAC,YAAY;QAC/B,kBAAkB,CAAC,aAAa;KACjC,CAAC,CAAC;IACH,MAAM,mBAAmB,GAAG,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;IAEhE,IAAI,mBAAmB,EAAE;QACvB,MAAM,kBAAkB,GAAG,qBAAqB,CAAC,mBAAmB,CAAC,CAAC;QACtE,mBAAmB,aAAnB,mBAAmB,uBAAnB,mBAAmB,CAAE,KAAK,EAAE,CAAC;QAC7B,iBAAiB,CAAC,UAAU,CAAC;YAC3B,CAAC,kBAAkB,CAAC,IAAI,CAAC,EAAE,kBAAkB,CAAC,IAAI;YAClD,CAAC,kBAAkB,CAAC,aAAa,CAAC,EAAE,kBAAkB,CAAC,aAAa;YACpE,CAAC,kBAAkB,CAAC,YAAY,CAAC,EAAE;gBACjC,CAAC,kBAAkB,CAAC,cAAc,CAAC,EAAE,kBAAkB,CAAC,cAAc;gBACtE,CAAC,kBAAkB,CAAC,GAAG,CAAC,EAAE,kBAAkB,CAAC,GAAG;aACjD;SACF,CAAC,CAAC;QACH,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,QAAQ,mBAAM,kBAAkB,CAAC,OAAO,EAAG,CAAC;QAC1D,gBAAgB,aAAhB,gBAAgB,uBAAhB,gBAAgB,CAAE,QAAQ,iCACrB,kBAAkB,CAAC,WAAW,KACjC,OAAO,EACL,CAAA,MAAA,kBAAkB,CAAC,WAAW,0CAAE,OAAO;iBACvC,MAAA,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,cAAc,CAAC,0CAAE,KAAK,CAAA,IAC9C,CAAC;KACJ;SAAM;QACL,uBAAuB,CAAC,iBAAiB,CAAC,CAAC;KAC5C;AACH,CAAC","sourcesContent":["import {\n  AbstractControl,\n  AsyncValidatorFn,\n  FormArray,\n  FormControl,\n  FormGroup,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport { InputFormField } from '@backbase/data-ang/payment-order-options';\nimport {\n  Address,\n  amountValidator,\n  ArrangementItem,\n  ContactItem,\n  CounterPartyDetails,\n  CounterPartyFields,\n  currencyValidatorFactory,\n  datePart,\n  getAccountHolderAddress,\n  getConfig,\n  getContactBankAddress,\n  HiddenFields,\n  ibanCountryValidator,\n  isCounterpartyObjectEquals,\n  isObjectTruthy,\n  isSelectedBeneficiaryModified,\n  objectEquals,\n  PaymentBaseFields,\n  PaymentDetails,\n  PaymentFormFieldConfig,\n  PaymentFormGroup,\n  PaymentTemplateFields,\n  PaymentTypeConfig,\n  RemittanceDetails,\n  RemittanceInfoFields,\n  resetBeneficiaryDetails,\n  ScheduleItem,\n} from '@backbase/payment-orders-ang';\nimport { getPurposeOfPaymentInfo } from './generic-utils';\n\n/**\n * Registers a FormControl in the provided FormGroup\n *\n * @param group\n * @param formControlName\n * @param [validators]\n * @param [asyncValidators]\n * @param [initialValue='']\n * @returns\n */\nexport function registerFormControl(\n  group: FormGroup,\n  formControlName: string,\n  validators?: Array<ValidatorFn>,\n  asyncValidators?: Array<AsyncValidatorFn>,\n  initialValue: any = '',\n  config?: PaymentFormFieldConfig\n): AbstractControl {\n  let formControl: AbstractControl;\n  formControl = group.controls[formControlName];\n  group.addControl(\n    formControlName,\n    new FormControl(initialValue, validators || [], asyncValidators || [])\n  );\n\n  if (formControl) {\n    resetValidators(formControl, validators, asyncValidators, config);\n  } else {\n    group.addControl(\n      formControlName,\n      new FormControl(initialValue, validators || [], asyncValidators || [])\n    );\n    formControl = group.controls[formControlName];\n  }\n\n  return formControl;\n}\n\n/**\n * Converts the nested form array into a flat map. It is used to lookup any fields easily\n */\nexport const createControlsMap = (\n  controls: Array<PaymentFormFieldConfig | PaymentFormGroup>,\n  controlsMap: { [key: string]: PaymentFormFieldConfig | PaymentFormGroup } = {}\n) => {\n  let path: string;\n  return controls.reduce(\n    (\n      acc: { [key: string]: PaymentFormFieldConfig | PaymentFormGroup },\n      control: PaymentFormFieldConfig | PaymentFormGroup\n    ) => {\n      path = control.parent\n        ? `${control.parent}.${control.name}`\n        : control.name;\n      if ((<PaymentFormGroup>control).fields) {\n        acc = {\n          ...acc,\n          ...createControlsMap((<PaymentFormGroup>control).fields, acc),\n        };\n      } else {\n        acc[path] = control;\n      }\n      return acc;\n    },\n    controlsMap\n  );\n};\n\nexport function registerFormGroup(\n  group: FormGroup,\n  formGroupName: string,\n  formGroupConfig: { [key: string]: any[] },\n  validators?: Array<ValidatorFn>,\n  asyncValidators?: Array<AsyncValidatorFn>\n): AbstractControl | null {\n  const subGroup =\n    <FormGroup>group.get(formGroupName) ||\n    new FormGroup({}, validators || [], asyncValidators || []);\n\n  for (const key in formGroupConfig) {\n    if (formGroupConfig.hasOwnProperty(key)) {\n      subGroup.registerControl(\n        key,\n        new FormControl(\n          formGroupConfig[key].shift(),\n          (formGroupConfig[key].shift() as Array<ValidatorFn>) || []\n        )\n      );\n    }\n  }\n  group.addControl(formGroupName, subGroup);\n\n  return group.get(formGroupName);\n}\n\nexport function getParentForm(control: AbstractControl): FormGroup {\n  let ancestor = control;\n\n  while (ancestor && ancestor.parent) {\n    ancestor = ancestor.parent;\n  }\n\n  return <FormGroup>ancestor;\n}\n\nexport function getFormFieldData({\n  formControlPath,\n  form,\n  config,\n}: {\n  formControlPath: string;\n  form: FormGroup;\n  config: PaymentTypeConfig;\n}):\n  | {\n      control: AbstractControl | null;\n      fieldConfig: PaymentFormFieldConfig | PaymentFormGroup | undefined;\n    }\n  | undefined {\n  const apiFieldMap: { [key: string]: any } = {\n    'transferTransactionInformation.counterpartyAccount.identification.identification':\n      {\n        name: CounterPartyFields.accountNumber,\n        path: `${PaymentBaseFields.counterparty}.${CounterPartyFields.accountNumber}`,\n      },\n    'transferTransactionInformation.counterpartyBank.bankBranchCode': {\n      name: CounterPartyFields.bankBranchCode,\n      path: `${PaymentBaseFields.counterparty}.${CounterPartyFields.creditorBank}.${CounterPartyFields.bankBranchCode}`,\n    },\n    'transferTransactionInformation.instructedAmount.currencyCode': {\n      name: RemittanceInfoFields.amountCurrencyGroup,\n      path: `${PaymentBaseFields.remittanceInfo}.${RemittanceInfoFields.amountCurrencyGroup}`,\n    },\n  };\n  const fieldData = apiFieldMap[formControlPath] || null;\n\n  if (fieldData) {\n    const control = form.get(fieldData.path);\n    const fieldConfig = getConfig(fieldData.name, config);\n    return { control, fieldConfig };\n  }\n  return;\n}\n\nexport function applyInputFormSettingForCountry({\n  inputFormSetting,\n  form,\n  config,\n}: {\n  inputFormSetting: InputFormField | any;\n  form: FormGroup;\n  config: PaymentTypeConfig;\n}) {\n  const counterpartyGroup = <FormGroup>form.get(PaymentBaseFields.counterparty);\n  const isClosedPaymentControl = <FormGroup>(\n    form.get(HiddenFields.isClosedPayment)\n  );\n  const hasArrangementIdControl = <FormGroup>(\n    counterpartyGroup.get(CounterPartyFields.id)\n  );\n  const schemeControl =\n    counterpartyGroup.get(CounterPartyFields.schemeName) ||\n    registerFormControl(counterpartyGroup, CounterPartyFields.schemeName);\n  if (inputFormSetting.apiField) {\n    const { control = null, fieldConfig = null } =\n      getFormFieldData({\n        formControlPath: inputFormSetting.apiField,\n        form,\n        config,\n      }) || {};\n\n    let validators: ValidatorFn[] | null = [];\n    if (inputFormSetting.mandatory) {\n      // For currency input we need amountValidator instead of Validators.required\n      if (inputFormSetting.key === 'currency') {\n        validators.push(amountValidator as ValidatorFn);\n      } else {\n        validators.push(Validators.required);\n      }\n    }\n\n    if (inputFormSetting.regex) {\n      validators.push(createValidatorFromRegex(inputFormSetting.regex));\n    }\n\n    if (inputFormSetting.key === 'currency' && inputFormSetting.values.length) {\n      validators.push(currencyValidatorFactory(inputFormSetting.values));\n    }\n\n    if (inputFormSetting.key === 'account-number') {\n      schemeControl.setValue(inputFormSetting.format);\n      if (inputFormSetting.format === 'IBAN') {\n        validators.push(ibanCountryValidator());\n      }\n    }\n\n    if (control && fieldConfig) {\n      const labelData = inputFormSetting.label || {};\n      const labelKey = Object.keys(labelData)[0];\n      const label = labelData[labelKey]; // need  to implement i18n for this\n      fieldConfig.options = fieldConfig.options || {};\n\n      if (label) {\n        if (!fieldConfig.options.defaultLabel) {\n          fieldConfig.options.defaultLabel =\n            getLabelFromInputSetting(\n              form.get('defaultBankCodeSetting')?.value\n            ) || fieldConfig.options.label;\n        }\n        fieldConfig.options.label = label;\n      } else if (\n        fieldConfig.options.defaultLabel &&\n        fieldConfig.options.defaultLabel !== fieldConfig.options.label\n      ) {\n        // reset to default label if the inputform setting doesn't contain label.\n        fieldConfig.options.label = fieldConfig.options.defaultLabel;\n      }\n\n      const shouldEnableControls = !(\n        isClosedPaymentControl?.value || hasArrangementIdControl?.value\n      );\n      if (inputFormSetting.notApplicable) {\n        control.reset();\n        validators = null;\n        control.disable();\n      } else if (control.disabled && shouldEnableControls) {\n        control.enable();\n      }\n\n      if (isControlFilled(control)) {\n        control.markAsTouched();\n      }\n      control.setValidators(validators);\n      control.updateValueAndValidity();\n    }\n  }\n}\n\nexport function setAdditionalBankDetails(\n  form: FormGroup,\n  config: PaymentTypeConfig\n) {\n  const setting = <InputFormField>form.get('defaultBankCodeSetting')?.value;\n  if (!setting) return;\n\n  const label = getLabelFromInputSetting(setting);\n  const regex = setting.regex;\n  if (label) {\n    setAdditionalBankLabel(CounterPartyFields.correspondentBank, label, config);\n    setAdditionalBankLabel(CounterPartyFields.intermediaryBank, label, config);\n  }\n\n  if (regex) {\n    appendBankCodePatternValidator(\n      CounterPartyFields.correspondentBank,\n      regex,\n      config\n    );\n    appendBankCodePatternValidator(\n      CounterPartyFields.intermediaryBank,\n      regex,\n      config\n    );\n  }\n}\n\nexport function createValidatorFromRegex(pattern: string): ValidatorFn {\n  if (pattern.startsWith('/') && pattern.endsWith('/')) {\n    pattern = pattern.slice(1, -1);\n  }\n\n  return Validators.pattern(new RegExp(pattern));\n}\n\nfunction appendBankCodePatternValidator(\n  controlName: string,\n  regex: string,\n  config: PaymentTypeConfig\n) {\n  const additionalBankConfig = getConfig(\n    controlName,\n    config\n  ) as PaymentFormGroup;\n  if (!additionalBankConfig) return;\n  const bankCodeConfig = getConfig(\n    CounterPartyFields.bankBranchCode,\n    additionalBankConfig\n  );\n  if (bankCodeConfig) {\n    if (!bankCodeConfig?.options) {\n      bankCodeConfig.options = {};\n    }\n    bankCodeConfig.options.validators = [createValidatorFromRegex(regex)];\n  }\n}\n\nfunction getLabelFromInputSetting(setting?: InputFormField): string {\n  return Object.values(setting?.label || {})[0];\n}\n\nfunction setAdditionalBankLabel(\n  additionalBankType: string,\n  label: string,\n  config: PaymentTypeConfig\n) {\n  const additionalBankConfig = getConfig(\n    additionalBankType,\n    config\n  ) as PaymentFormGroup;\n  if (additionalBankConfig) {\n    const bankCodeConfig = getConfig(\n      CounterPartyFields.bankBranchCode,\n      additionalBankConfig\n    );\n    const selectAdditionalBankCodeTypeConfig = getConfig(\n      'selectAdditionalBankCodeType',\n      additionalBankConfig\n    );\n    const selectAdditionalBankCodeTypeOptions =\n      selectAdditionalBankCodeTypeConfig?.options?.options;\n    if (bankCodeConfig?.options) {\n      bankCodeConfig.options.label = label;\n    }\n    if (selectAdditionalBankCodeTypeOptions?.length) {\n      selectAdditionalBankCodeTypeOptions.forEach(\n        (option: { label: string; value: string }) => {\n          if (option.value === 'BRANCH_CODE') {\n            option.label = label;\n          }\n        }\n      );\n    }\n  }\n}\n\nexport function isControlFilled(control: AbstractControl) {\n  const isAmountControl =\n    (control?.value || {}).hasOwnProperty('currency') &&\n    (control?.value || {}).hasOwnProperty('amount');\n  return isAmountControl ? !!control?.value?.amount : !!control?.value;\n}\n\nexport function isClosedPaymentValidator(control: AbstractControl) {\n  const form = getParentForm(control);\n  const counterPartyDetails = (<FormGroup>(\n    form.get(PaymentBaseFields.counterparty)\n  ))?.getRawValue();\n  const selectedBeneficiary = form.get(HiddenFields.selectedBeneficiary)?.value;\n  const isBeneficairyUpdatedManually =\n    isSelectedBeneficiaryModified(counterPartyDetails, selectedBeneficiary) ||\n    (form?.get(HiddenFields.isManualEdit)?.value &&\n      isCounterPartyDetailsTruthy(counterPartyDetails));\n\n  return isBeneficairyUpdatedManually &&\n    form?.get(HiddenFields.isClosedPayment)?.value\n    ? { hasOnlyClosedPaymentPermission: true }\n    : null;\n}\n\nexport function getCounterpartyFormGroupDetails(\n  form: FormGroup\n): Partial<ArrangementItem> {\n  const counterparty: CounterPartyDetails = (<FormGroup>(\n    form.get(PaymentBaseFields.counterparty)\n  ))?.getRawValue();\n\n  return {\n    name: counterparty?.name,\n    accountNumber: counterparty?.accountNumber,\n    bankBranchCode: counterparty?.creditorBank?.bankBranchCode,\n    BIC: counterparty?.creditorBank?.bic,\n  };\n}\n\nexport function resetValidators(\n  formControl: AbstractControl,\n  validators?: Array<ValidatorFn>,\n  asyncValidators?: Array<AsyncValidatorFn>,\n  config?: PaymentFormFieldConfig\n) {\n  const computedValidators = validators ? [...validators] : [];\n\n  if (!config?.hidden && config?.options?.isConditionalMandatory) {\n    computedValidators.push(Validators.required);\n  }\n\n  formControl.markAsUntouched();\n  formControl.clearValidators();\n  formControl.clearAsyncValidators();\n  formControl.setAsyncValidators(asyncValidators || []);\n  formControl.setValidators(computedValidators);\n}\n\nexport function addAddressFields(formGroup: FormGroup) {\n  const addressFields = {\n    addressLine1: [''],\n    addressLine2: [''],\n    streetName: [''],\n    postCode: [''],\n    town: [''],\n    countrySubDivision: [''],\n    country: [''],\n  };\n  for (const key in addressFields) {\n    if (addressFields.hasOwnProperty(key) && !formGroup.get(key)) {\n      registerFormControl(formGroup, key);\n    }\n  }\n}\n\nexport function registerFormArray(\n  group: FormGroup,\n  formArrayName: string,\n  validators?: Array<ValidatorFn>,\n  asyncValidators?: Array<AsyncValidatorFn>\n): FormArray {\n  const array =\n    <FormArray>group.get(formArrayName) ||\n    new FormArray([], validators || [], asyncValidators || []);\n  group.addControl(formArrayName, array);\n  return group.get(formArrayName) as FormArray;\n}\n\nexport function addControlToFormArray(\n  array: FormArray,\n  formGroupConfig: any[],\n  validators?: Array<ValidatorFn>,\n  asyncValidators?: Array<AsyncValidatorFn>,\n  initialValue: any = null\n): FormArray {\n  const subGroup = new FormGroup({}, validators || [], asyncValidators || []);\n  formGroupConfig.forEach((formConfig) => {\n    if (formConfig.name) {\n      subGroup.registerControl(\n        formConfig.name,\n        new FormControl(\n          initialValue,\n          (formConfig.validators as Array<ValidatorFn>) || []\n        )\n      );\n    }\n  });\n  array.push(subGroup);\n  return array;\n}\n\nexport function isEditFormDirty(\n  formValue: PaymentDetails,\n  initialFormValue?: PaymentDetails\n): boolean {\n  if (!initialFormValue) return true;\n  const schedule = getScheduleDatePart(formValue.schedule);\n  const initialSchedule = getScheduleDatePart(initialFormValue.schedule);\n\n  return (\n    formValue.initiator?.id !== initialFormValue.initiator?.id ||\n    !isCounterpartyObjectEquals(\n      formValue.counterparty,\n      initialFormValue.counterparty\n    ) ||\n    !objectEquals(schedule, initialSchedule) ||\n    isRemittanceInfoDirty(\n      formValue[PaymentBaseFields.remittanceInfo],\n      initialFormValue[PaymentBaseFields.remittanceInfo]\n    ) ||\n    formValue.chargeBearer !== initialFormValue.chargeBearer\n  );\n}\n\nexport function isTemplateFormDirty(\n  formValue: PaymentDetails,\n  initialFormValue: PaymentDetails\n) {\n  return (\n    formValue[PaymentBaseFields.initiator].id !==\n      initialFormValue[PaymentBaseFields.initiator].id ||\n    !objectEquals(\n      formValue[PaymentBaseFields.counterparty],\n      initialFormValue[PaymentBaseFields.counterparty]\n    ) ||\n    isRemittanceInfoDirty(\n      formValue[PaymentBaseFields.remittanceInfo],\n      initialFormValue[PaymentBaseFields.remittanceInfo]\n    ) ||\n    formValue[PaymentTemplateFields.templateName] !==\n      initialFormValue[PaymentTemplateFields.templateName]\n  );\n}\n\nfunction getScheduleDatePart(schedule: ScheduleItem) {\n  return {\n    ...schedule,\n    startDate: datePart(schedule?.startDate),\n    endDate: datePart(schedule?.endDate),\n  };\n}\n\nfunction isRemittanceInfoDirty(\n  remittanceInfo: RemittanceDetails,\n  initialRemittanceInfo: RemittanceDetails\n) {\n  if (!remittanceInfo) return false;\n  const amountGroup = remittanceInfo[RemittanceInfoFields.amountCurrencyGroup];\n  const initialAmountGroup =\n    initialRemittanceInfo[RemittanceInfoFields.amountCurrencyGroup];\n\n  return (\n    amountGroup?.amount !== initialAmountGroup?.amount ||\n    amountGroup?.currency !== initialAmountGroup?.currency ||\n    remittanceInfo[RemittanceInfoFields.urgent] !==\n      initialRemittanceInfo[RemittanceInfoFields.urgent] ||\n    remittanceInfo[RemittanceInfoFields.paymentReference] !==\n      initialRemittanceInfo[RemittanceInfoFields.paymentReference] ||\n    remittanceInfo[RemittanceInfoFields.description] !==\n      initialRemittanceInfo[RemittanceInfoFields.description]\n  );\n}\n\nexport function applyPurposeOfPaymentSettings({\n  form,\n  config,\n}: {\n  form: FormGroup;\n  config: PaymentTypeConfig | any;\n}) {\n  const country = form.value?.inputFormFromSettings;\n  const remittanceGroup = <FormGroup>form.get(PaymentBaseFields.remittanceInfo);\n  if (!remittanceGroup) {\n    return;\n  }\n  const purposeControl =\n    remittanceGroup.get(RemittanceInfoFields.purposeOfPayment) ||\n    registerFormControl(remittanceGroup, RemittanceInfoFields.purposeOfPayment);\n  const info = getPurposeOfPaymentInfo(country);\n  const fieldConfig = getConfig(RemittanceInfoFields.purposeOfPayment, config);\n  const options = fieldConfig?.options;\n\n  if (purposeControl && options) {\n    options.isOptional = info.isOptional;\n    options.purposes = info.purposes;\n    options.isCollapsed = info.isOptional;\n\n    if (options.isOptional) {\n      purposeControl.setValidators(null);\n      purposeControl.setAsyncValidators(null);\n      purposeControl.updateValueAndValidity();\n    } else {\n      purposeControl.setValidators([\n        Validators.required,\n        ...(options.validators || []),\n      ]);\n      purposeControl.setAsyncValidators([...(options.asyncValidators || [])]);\n      purposeControl.updateValueAndValidity();\n    }\n  }\n}\n\nfunction isCounterPartyDetailsTruthy(counterpartyDetails: CounterPartyDetails) {\n  return isObjectTruthy({\n    name: counterpartyDetails?.name,\n    accountNumber: counterpartyDetails.accountNumber,\n    bankBranchCode: counterpartyDetails.creditorBank?.bankBranchCode,\n  });\n}\n\nexport function getBeneficiaryDetails(\n  beneficiary?: ContactItem | ArrangementItem\n): Partial<ArrangementItem & { address: Address; bankAddress: Address }> {\n  const contactAccount = (<ContactItem>beneficiary)?.accounts?.[0];\n  const beneficiaryItem = beneficiary as ArrangementItem;\n  return {\n    bankBranchCode: contactAccount?.bankCode || beneficiaryItem?.bankBranchCode,\n    accountNumber:\n      contactAccount?.accountNumber || beneficiaryItem?.accountNumber,\n    name: beneficiary?.name,\n    BIC: contactAccount?.BIC || beneficiaryItem?.BIC,\n    address: getAccountHolderAddress(contactAccount),\n    bankAddress: getContactBankAddress(contactAccount),\n  };\n}\n\nexport function revertBeneficiaryChanges(form: FormGroup): void {\n  const counterPartyGroup = <FormGroup>form.get(PaymentBaseFields.counterparty);\n  const selectedBeneficiary = form.get(HiddenFields.selectedBeneficiary)?.value;\n  const addressGroup = counterPartyGroup.get(CounterPartyFields.postalAddress);\n  const bankAddressGroup = counterPartyGroup.get([\n    CounterPartyFields.creditorBank,\n    CounterPartyFields.postalAddress,\n  ]);\n  const isManualEditControl = form.get(HiddenFields.isManualEdit);\n\n  if (selectedBeneficiary) {\n    const beneficiaryDetails = getBeneficiaryDetails(selectedBeneficiary);\n    isManualEditControl?.reset();\n    counterPartyGroup.patchValue({\n      [CounterPartyFields.name]: beneficiaryDetails.name,\n      [CounterPartyFields.accountNumber]: beneficiaryDetails.accountNumber,\n      [CounterPartyFields.creditorBank]: {\n        [CounterPartyFields.bankBranchCode]: beneficiaryDetails.bankBranchCode,\n        [CounterPartyFields.bic]: beneficiaryDetails.BIC,\n      },\n    });\n    addressGroup?.setValue({ ...beneficiaryDetails.address });\n    bankAddressGroup?.setValue({\n      ...beneficiaryDetails.bankAddress,\n      country:\n        beneficiaryDetails.bankAddress?.country ||\n        form.get(HiddenFields.defaultCountry)?.value,\n    });\n  } else {\n    resetBeneficiaryDetails(counterPartyGroup);\n  }\n}\n"]}