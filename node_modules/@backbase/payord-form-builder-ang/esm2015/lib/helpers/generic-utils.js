import { CounterPartyFields, } from '@backbase/payment-orders-ang';
import { isObjectTruthy } from '@backbase/payment-orders-ang';
export const mapLocalize = (obj) => {
    if (!isObjectTruthy(obj))
        return obj;
    return Object.entries(obj).reduce((result, [key, value]) => {
        const localizedValue = typeof value === 'string' ? $localize `${value}` : value;
        return Object.assign(Object.assign({}, result), { [key]: localizedValue });
    }, {});
};
export function mapDependentItems(dependants = [], currentParent) {
    const localDeps = [];
    const dependantItems = dependants.reduce((result, dep) => {
        if (typeof dep === 'string') {
            localDeps.push(dep);
            return result;
        }
        else {
            return [...result, dep];
        }
    }, []);
    return [
        ...dependantItems,
        { parent: currentParent, items: localDeps },
    ];
}
export function getPurposeOfPaymentInfo(country) {
    const fieldName = 'purpose-of-payment';
    const result = { isOptional: true };
    const countryInfo = (country === null || country === void 0 ? void 0 : country.inputFormSettings) || [];
    const purposes = country === null || country === void 0 ? void 0 : country.purposesOfPayment;
    countryInfo.forEach((field) => {
        if (field.key === fieldName) {
            result.isOptional =
                field.mandatory !== undefined ? !field.mandatory : result.isOptional;
        }
    });
    return Object.assign(Object.assign({}, result), { purposes });
}
export function toggleBeneficiaryControls(formGroup, shouldDisableFields) {
    const controls = [
        CounterPartyFields.accountNumber,
        `${CounterPartyFields.creditorBank}.${CounterPartyFields.bankBranchCode}`,
        `${CounterPartyFields.creditorBank}.${CounterPartyFields.bankName}`,
        `${CounterPartyFields.creditorBank}.${CounterPartyFields.bic}`,
    ];
    if (shouldDisableFields) {
        controls === null || controls === void 0 ? void 0 : controls.forEach((control) => { var _a; return (_a = formGroup.get(control)) === null || _a === void 0 ? void 0 : _a.disable(); });
    }
    else {
        controls === null || controls === void 0 ? void 0 : controls.forEach((control) => { var _a; return (_a = formGroup.get(control)) === null || _a === void 0 ? void 0 : _a.enable(); });
    }
}
//# sourceMappingURL=generic-utils.js.map