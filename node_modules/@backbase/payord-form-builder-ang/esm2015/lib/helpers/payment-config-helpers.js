import { FormGroup } from '@angular/forms';
import { PaymentComponents, PaymentOptionFields, } from '@backbase/payment-orders-ang';
export const filterPaymentConfigs = (paymentOptions, paymentTypes) => paymentOptions.map((paymentOption) => paymentTypes.filter((paymentConfig) => paymentOption.paymentType === paymentConfig.paymentType)[0]);
export const getPaymentCostFieldConfig = () => ({
    name: PaymentOptionFields.paymentCost,
    type: PaymentComponents.paymentCost,
    options: {
        isWizardMode: true,
    },
});
export const getSelectPaymentOptionFieldConfig = (items$, paymentTypes, checkClosedPaymentsAccess = false) => {
    const optionLabels = paymentTypes.reduce((nameMap, paymentConfig) => {
        nameMap[paymentConfig.paymentType] = paymentConfig.name;
        return nameMap;
    }, {});
    return {
        name: PaymentOptionFields.selectPaymentOption,
        type: PaymentComponents.selectPaymentOption,
        options: {
            items$,
            optionLabels,
            isWizardMode: true,
            checkClosedPaymentsAccess,
        },
    };
};
export const getChargeBearerFieldConfig = () => ({
    name: PaymentOptionFields.chargeBearer,
    type: PaymentComponents.chargeBearer,
    options: {
        label: 'How fees are paid',
        isWizardMode: true,
    },
});
export const getRelatedPaymentConfig = (paymentConfigs) => paymentConfigs.filter((paymentConfig) => paymentConfig && !!paymentConfig.relatedPaymentTypes)[0];
export const getMappedGroup = (mappedGroupName, form) => {
    let mappedGroup = form.get(mappedGroupName);
    let parent = form;
    const subGroups = mappedGroupName.split('.');
    if (mappedGroup)
        return mappedGroup;
    for (const subGroup of subGroups) {
        if (!parent.get(subGroup)) {
            parent.addControl(subGroup, new FormGroup({}));
        }
        mappedGroup = parent.get(subGroup);
        parent = mappedGroup;
    }
    return mappedGroup;
};
/**
 * Tags each form field in a payment config to the corresponding parent form Group.
 */
export const tagFormGroupToFormFields = (arr, _group, controlsArr, form, parentName = '') => {
    arr.forEach((control) => {
        const mappedField = control.options && control.options.mapToField;
        const group = mappedField ? getMappedGroup(mappedField, form) : _group;
        const parent = mappedField || parentName;
        const subArray = [];
        if (control.fields instanceof Array) {
            const subGroup = group.get(control.name) || new FormGroup({});
            tagFormGroupToFormFields(control.fields, subGroup, subArray, form, parent ? `${parent}.${control.name}` : control.name);
            group.addControl(control.name, subGroup);
            controlsArr.push(Object.assign(Object.assign({}, control), { fields: subArray, parent: parentName }));
        }
        else {
            controlsArr.push(Object.assign(Object.assign({}, control), { parent }));
        }
    });
};
export const hasSameFields = (paymentConfigs) => {
    let similar = false;
    const relatedTypeConfig = getRelatedPaymentConfig(paymentConfigs);
    if (relatedTypeConfig && relatedTypeConfig.relatedPaymentTypes) {
        const relatedPaymentTypes = [
            relatedTypeConfig.paymentType,
            ...relatedTypeConfig.relatedPaymentTypes,
        ];
        similar = paymentConfigs.every((config) => relatedPaymentTypes.indexOf(config.paymentType) !== -1);
    }
    else {
        similar = paymentConfigs.every((config) => config.paymentType === paymentConfigs[0].paymentType);
    }
    return similar;
};
//# sourceMappingURL=payment-config-helpers.js.map