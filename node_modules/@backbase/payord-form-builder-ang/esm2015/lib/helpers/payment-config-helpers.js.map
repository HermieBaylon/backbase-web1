{"version":3,"file":"payment-config-helpers.js","sourceRoot":"","sources":["../../../../../../libs/payord-form-builder-ang/src/lib/helpers/payment-config-helpers.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAE3C,OAAO,EACL,iBAAiB,EAIjB,mBAAmB,GAEpB,MAAM,8BAA8B,CAAC;AAGtC,MAAM,CAAC,MAAM,oBAAoB,GAAG,CAClC,cAAuC,EACvC,YAAsC,EACjB,EAAE,CACvB,cAAc,CAAC,GAAG,CAChB,CAAC,aAAa,EAAE,EAAE,CAChB,YAAY,CAAC,MAAM,CACjB,CAAC,aAAa,EAAE,EAAE,CAChB,aAAa,CAAC,WAAW,KAAK,aAAa,CAAC,WAAW,CAC1D,CAAC,CAAC,CAAC,CACP,CAAC;AAEJ,MAAM,CAAC,MAAM,yBAAyB,GAAG,GAAG,EAAE,CAAC,CAAC;IAC9C,IAAI,EAAE,mBAAmB,CAAC,WAAW;IACrC,IAAI,EAAE,iBAAiB,CAAC,WAAW;IACnC,OAAO,EAAE;QACP,YAAY,EAAE,IAAI;KACnB;CACF,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,iCAAiC,GAAG,CAC/C,MAAgD,EAChD,YAAsC,EACtC,yBAAyB,GAAG,KAAK,EACjC,EAAE;IACF,MAAM,YAAY,GAAG,YAAY,CAAC,MAAM,CACtC,CAAC,OAAkC,EAAE,aAAgC,EAAE,EAAE;QACvE,OAAO,CAAC,aAAa,CAAC,WAAW,CAAC,GAAG,aAAa,CAAC,IAAI,CAAC;QACxD,OAAO,OAAO,CAAC;IACjB,CAAC,EACD,EAAE,CACH,CAAC;IACF,OAAO;QACL,IAAI,EAAE,mBAAmB,CAAC,mBAAmB;QAC7C,IAAI,EAAE,iBAAiB,CAAC,mBAAmB;QAC3C,OAAO,EAAE;YACP,MAAM;YACN,YAAY;YACZ,YAAY,EAAE,IAAI;YAClB,yBAAyB;SAC1B;KACF,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,0BAA0B,GAAG,GAAG,EAAE,CAAC,CAAC;IAC/C,IAAI,EAAE,mBAAmB,CAAC,YAAY;IACtC,IAAI,EAAE,iBAAiB,CAAC,YAAY;IACpC,OAAO,EAAE;QACP,KAAK,EAAE,mBAAmB;QAC1B,YAAY,EAAE,IAAI;KACnB;CACF,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,uBAAuB,GAAG,CACrC,cAAmC,EACJ,EAAE,CACjC,cAAc,CAAC,MAAM,CACnB,CAAC,aAAa,EAAE,EAAE,CAAC,aAAa,IAAI,CAAC,CAAC,aAAa,CAAC,mBAAmB,CACxE,CAAC,CAAC,CAAC,CAAC;AAEP,MAAM,CAAC,MAAM,cAAc,GAAG,CAC5B,eAAuB,EACvB,IAAe,EACJ,EAAE;IACb,IAAI,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;IAC5C,IAAI,MAAM,GAAG,IAAI,CAAC;IAClB,MAAM,SAAS,GAAG,eAAe,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAE7C,IAAI,WAAW;QAAE,OAAkB,WAAW,CAAC;IAE/C,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE;QAChC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;YACzB,MAAM,CAAC,UAAU,CAAC,QAAQ,EAAE,IAAI,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;SAChD;QACD,WAAW,GAAc,MAAM,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAC9C,MAAM,GAAc,WAAW,CAAC;KACjC;IAED,OAAkB,WAAW,CAAC;AAChC,CAAC,CAAC;AAEF;;GAEG;AACH,MAAM,CAAC,MAAM,wBAAwB,GAAG,CACtC,GAAqD,EACrD,MAAiB,EACjB,WAAmC,EACnC,IAAe,EACf,UAAU,GAAG,EAAE,EACf,EAAE;IACF,GAAG,CAAC,OAAO,CAAC,CAAC,OAAkD,EAAE,EAAE;QACjE,MAAM,WAAW,GAAG,OAAO,CAAC,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC;QAClE,MAAM,KAAK,GAAG,WAAW,CAAC,CAAC,CAAC,cAAc,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;QACvE,MAAM,MAAM,GAAG,WAAW,IAAI,UAAU,CAAC;QACzC,MAAM,QAAQ,GAA2B,EAAE,CAAC;QAE5C,IAAuB,OAAQ,CAAC,MAAM,YAAY,KAAK,EAAE;YACvD,MAAM,QAAQ,GAAc,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,IAAI,SAAS,CAAC,EAAE,CAAC,CAAC;YACzE,wBAAwB,CACH,OAAQ,CAAC,MAAM,EAClC,QAAQ,EACR,QAAQ,EACR,IAAI,EACJ,MAAM,CAAC,CAAC,CAAC,GAAG,MAAM,IAAI,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CACpD,CAAC;YACF,KAAK,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;YACzC,WAAW,CAAC,IAAI,iCAAM,OAAO,KAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,UAAU,IAAG,CAAC;SACxE;aAAM;YACL,WAAW,CAAC,IAAI,iCAAM,OAAO,KAAE,MAAM,IAAG,CAAC;SAC1C;IACH,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,aAAa,GAAG,CAAC,cAAmC,EAAE,EAAE;IACnE,IAAI,OAAO,GAAG,KAAK,CAAC;IACpB,MAAM,iBAAiB,GAAG,uBAAuB,CAAC,cAAc,CAAC,CAAC;IAClE,IAAI,iBAAiB,IAAI,iBAAiB,CAAC,mBAAmB,EAAE;QAC9D,MAAM,mBAAmB,GAAG;YAC1B,iBAAiB,CAAC,WAAW;YAC7B,GAAG,iBAAiB,CAAC,mBAAmB;SACzC,CAAC;QACF,OAAO,GAAG,cAAc,CAAC,KAAK,CAC5B,CAAC,MAAM,EAAE,EAAE,CAAC,mBAAmB,CAAC,OAAO,CAAC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CACnE,CAAC;KACH;SAAM;QACL,OAAO,GAAG,cAAc,CAAC,KAAK,CAC5B,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,WAAW,KAAK,cAAc,CAAC,CAAC,CAAC,CAAC,WAAW,CACjE,CAAC;KACH;IACD,OAAO,OAAO,CAAC;AACjB,CAAC,CAAC","sourcesContent":["import { FormGroup } from '@angular/forms';\nimport { PaymentOption as PaymentOptionResponse } from '@backbase/data-ang/payment-order-options';\nimport {\n  PaymentComponents,\n  PaymentFormFieldConfig,\n  PaymentFormGroup,\n  PaymentFormItem,\n  PaymentOptionFields,\n  PaymentTypeConfig,\n} from '@backbase/payment-orders-ang';\nimport { Observable } from 'rxjs';\n\nexport const filterPaymentConfigs = (\n  paymentOptions: PaymentOptionResponse[],\n  paymentTypes: Array<PaymentTypeConfig>\n): PaymentTypeConfig[] =>\n  paymentOptions.map(\n    (paymentOption) =>\n      paymentTypes.filter(\n        (paymentConfig) =>\n          paymentOption.paymentType === paymentConfig.paymentType\n      )[0]\n  );\n\nexport const getPaymentCostFieldConfig = () => ({\n  name: PaymentOptionFields.paymentCost,\n  type: PaymentComponents.paymentCost,\n  options: {\n    isWizardMode: true,\n  },\n});\n\nexport const getSelectPaymentOptionFieldConfig = (\n  items$: Observable<Array<PaymentOptionResponse>>,\n  paymentTypes: Array<PaymentTypeConfig>,\n  checkClosedPaymentsAccess = false\n) => {\n  const optionLabels = paymentTypes.reduce(\n    (nameMap: { [key: string]: string }, paymentConfig: PaymentTypeConfig) => {\n      nameMap[paymentConfig.paymentType] = paymentConfig.name;\n      return nameMap;\n    },\n    {}\n  );\n  return {\n    name: PaymentOptionFields.selectPaymentOption,\n    type: PaymentComponents.selectPaymentOption,\n    options: {\n      items$,\n      optionLabels,\n      isWizardMode: true,\n      checkClosedPaymentsAccess,\n    },\n  };\n};\n\nexport const getChargeBearerFieldConfig = () => ({\n  name: PaymentOptionFields.chargeBearer,\n  type: PaymentComponents.chargeBearer,\n  options: {\n    label: 'How fees are paid',\n    isWizardMode: true,\n  },\n});\n\nexport const getRelatedPaymentConfig = (\n  paymentConfigs: PaymentTypeConfig[]\n): PaymentTypeConfig | undefined =>\n  paymentConfigs.filter(\n    (paymentConfig) => paymentConfig && !!paymentConfig.relatedPaymentTypes\n  )[0];\n\nexport const getMappedGroup = (\n  mappedGroupName: string,\n  form: FormGroup\n): FormGroup => {\n  let mappedGroup = form.get(mappedGroupName);\n  let parent = form;\n  const subGroups = mappedGroupName.split('.');\n\n  if (mappedGroup) return <FormGroup>mappedGroup;\n\n  for (const subGroup of subGroups) {\n    if (!parent.get(subGroup)) {\n      parent.addControl(subGroup, new FormGroup({}));\n    }\n    mappedGroup = <FormGroup>parent.get(subGroup);\n    parent = <FormGroup>mappedGroup;\n  }\n\n  return <FormGroup>mappedGroup;\n};\n\n/**\n * Tags each form field in a payment config to the corresponding parent form Group.\n */\nexport const tagFormGroupToFormFields = (\n  arr: Array<PaymentFormFieldConfig | PaymentFormGroup>,\n  _group: FormGroup,\n  controlsArr: Array<PaymentFormItem>,\n  form: FormGroup,\n  parentName = ''\n) => {\n  arr.forEach((control: PaymentFormFieldConfig | PaymentFormGroup) => {\n    const mappedField = control.options && control.options.mapToField;\n    const group = mappedField ? getMappedGroup(mappedField, form) : _group;\n    const parent = mappedField || parentName;\n    const subArray: Array<PaymentFormItem> = [];\n\n    if ((<PaymentFormGroup>control).fields instanceof Array) {\n      const subGroup = <FormGroup>group.get(control.name) || new FormGroup({});\n      tagFormGroupToFormFields(\n        (<PaymentFormGroup>control).fields,\n        subGroup,\n        subArray,\n        form,\n        parent ? `${parent}.${control.name}` : control.name\n      );\n      group.addControl(control.name, subGroup);\n      controlsArr.push({ ...control, fields: subArray, parent: parentName });\n    } else {\n      controlsArr.push({ ...control, parent });\n    }\n  });\n};\n\nexport const hasSameFields = (paymentConfigs: PaymentTypeConfig[]) => {\n  let similar = false;\n  const relatedTypeConfig = getRelatedPaymentConfig(paymentConfigs);\n  if (relatedTypeConfig && relatedTypeConfig.relatedPaymentTypes) {\n    const relatedPaymentTypes = [\n      relatedTypeConfig.paymentType,\n      ...relatedTypeConfig.relatedPaymentTypes,\n    ];\n    similar = paymentConfigs.every(\n      (config) => relatedPaymentTypes.indexOf(config.paymentType) !== -1\n    );\n  } else {\n    similar = paymentConfigs.every(\n      (config) => config.paymentType === paymentConfigs[0].paymentType\n    );\n  }\n  return similar;\n};\n"]}