{"version":3,"file":"dynamic-aria-attribute.directive.js","sourceRoot":"","sources":["../../../../../../libs/payord-form-builder-ang/src/lib/directives/dynamic-aria-attribute.directive.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Directive,\n  Input,\n  KeyValueDiffers,\n  KeyValueDiffer,\n  Renderer2,\n  ElementRef,\n  DoCheck,\n  KeyValueChanges,\n} from '@angular/core';\n\ninterface KeyValueMap {\n  [key: string]: any;\n}\n\n@Directive({\n  selector: '[bbDynamicAriaAttribute]',\n})\nexport class DynamicAriaAttributeDirective implements DoCheck {\n  /**\n   * The map that contains a key value pair that contains the an id\n   * and a condition when they should be added to the element.\n   */\n  @Input('bbDynamicAriaAttribute')\n  set ariaAttributeMap(value: KeyValueMap) {\n    this._rawMap = value;\n    if (this._rawMap) {\n      this.setAriaAttributeIds(this._rawMap);\n      this._keyValueDiffer = null;\n      this._keyValueDiffer = this.keyValueDiffers.find(this._rawMap).create();\n    }\n  }\n\n  /**\n   * Flag to denote if the id of the input should be prepended to provided aria ids\n   */\n  @Input() prependInputId = true;\n\n  /**\n   * The selector to select the actual html input.\n   */\n  @Input() inputSelector = '.form-control';\n\n  /**\n   * The name of the aria attribute to be added dynamically. Defaults to aria-describedby.\n   */\n  @Input() ariaAttributeName = 'aria-describedby';\n\n  private _keyValueDiffer: KeyValueDiffer<string, any> | null = null;\n  private _rawMap: KeyValueMap | null = null;\n\n  constructor(\n    private readonly keyValueDiffers: KeyValueDiffers,\n    private readonly hostElem: ElementRef,\n    private readonly renderer: Renderer2\n  ) {}\n\n  ngDoCheck() {\n    if (this._keyValueDiffer) {\n      const keyValueChanges = this._keyValueDiffer.diff(\n        this._rawMap as { [k: string]: any }\n      );\n      if (keyValueChanges) {\n        this.applyKeyValueChanges(keyValueChanges);\n      }\n    }\n  }\n\n  private applyKeyValueChanges(changes: KeyValueChanges<string, any>): void {\n    const currentMap: KeyValueMap = {};\n    changes.forEachAddedItem(\n      (record) => (currentMap[record.key] = record.currentValue)\n    );\n    changes.forEachChangedItem(\n      (record) => (currentMap[record.key] = record.currentValue)\n    );\n    changes.forEachRemovedItem((record) => {\n      if (record.previousValue) {\n        currentMap[record.key] = false;\n      }\n    });\n    this.setAriaAttributeIds(currentMap);\n  }\n\n  private setAriaAttributeIds(idMap: KeyValueMap) {\n    const targetElem = this.hostElem.nativeElement.querySelector(\n      this.inputSelector\n    );\n    const targetElemId = targetElem?.id || '';\n    const ids = Object.keys(idMap).reduce((acc: string[], id: string) => {\n      if (!!idMap[id]) {\n        acc.push(this.prependInputId ? targetElemId + id : id);\n      }\n      return acc;\n    }, []);\n\n    this.removeAriaAttributeIds(targetElem);\n    const descByIds = ids.join(' ').trim();\n    if (targetElem && descByIds) {\n      this.renderer.setAttribute(targetElem, this.ariaAttributeName, descByIds);\n    }\n  }\n\n  private removeAriaAttributeIds(targetElem: HTMLElement) {\n    if (targetElem) {\n      this.renderer.removeAttribute(targetElem, this.ariaAttributeName);\n    }\n  }\n}\n"]}