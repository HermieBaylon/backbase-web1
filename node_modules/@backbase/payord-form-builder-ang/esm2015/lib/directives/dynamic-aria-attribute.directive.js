import { Directive, Input, KeyValueDiffers, Renderer2, ElementRef, } from '@angular/core';
import * as i0 from "@angular/core";
export class DynamicAriaAttributeDirective {
    constructor(keyValueDiffers, hostElem, renderer) {
        this.keyValueDiffers = keyValueDiffers;
        this.hostElem = hostElem;
        this.renderer = renderer;
        /**
         * Flag to denote if the id of the input should be prepended to provided aria ids
         */
        this.prependInputId = true;
        /**
         * The selector to select the actual html input.
         */
        this.inputSelector = '.form-control';
        /**
         * The name of the aria attribute to be added dynamically. Defaults to aria-describedby.
         */
        this.ariaAttributeName = 'aria-describedby';
        this._keyValueDiffer = null;
        this._rawMap = null;
    }
    /**
     * The map that contains a key value pair that contains the an id
     * and a condition when they should be added to the element.
     */
    set ariaAttributeMap(value) {
        this._rawMap = value;
        if (this._rawMap) {
            this.setAriaAttributeIds(this._rawMap);
            this._keyValueDiffer = null;
            this._keyValueDiffer = this.keyValueDiffers.find(this._rawMap).create();
        }
    }
    ngDoCheck() {
        if (this._keyValueDiffer) {
            const keyValueChanges = this._keyValueDiffer.diff(this._rawMap);
            if (keyValueChanges) {
                this.applyKeyValueChanges(keyValueChanges);
            }
        }
    }
    applyKeyValueChanges(changes) {
        const currentMap = {};
        changes.forEachAddedItem((record) => (currentMap[record.key] = record.currentValue));
        changes.forEachChangedItem((record) => (currentMap[record.key] = record.currentValue));
        changes.forEachRemovedItem((record) => {
            if (record.previousValue) {
                currentMap[record.key] = false;
            }
        });
        this.setAriaAttributeIds(currentMap);
    }
    setAriaAttributeIds(idMap) {
        const targetElem = this.hostElem.nativeElement.querySelector(this.inputSelector);
        const targetElemId = (targetElem === null || targetElem === void 0 ? void 0 : targetElem.id) || '';
        const ids = Object.keys(idMap).reduce((acc, id) => {
            if (!!idMap[id]) {
                acc.push(this.prependInputId ? targetElemId + id : id);
            }
            return acc;
        }, []);
        this.removeAriaAttributeIds(targetElem);
        const descByIds = ids.join(' ').trim();
        if (targetElem && descByIds) {
            this.renderer.setAttribute(targetElem, this.ariaAttributeName, descByIds);
        }
    }
    removeAriaAttributeIds(targetElem) {
        if (targetElem) {
            this.renderer.removeAttribute(targetElem, this.ariaAttributeName);
        }
    }
}
/** @nocollapse */ DynamicAriaAttributeDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DynamicAriaAttributeDirective, deps: [{ token: i0.KeyValueDiffers }, { token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ DynamicAriaAttributeDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: DynamicAriaAttributeDirective, selector: "[bbDynamicAriaAttribute]", inputs: { ariaAttributeMap: ["bbDynamicAriaAttribute", "ariaAttributeMap"], prependInputId: "prependInputId", inputSelector: "inputSelector", ariaAttributeName: "ariaAttributeName" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DynamicAriaAttributeDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbDynamicAriaAttribute]',
                }]
        }], ctorParameters: function () { return [{ type: i0.KeyValueDiffers }, { type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { ariaAttributeMap: [{
                type: Input,
                args: ['bbDynamicAriaAttribute']
            }], prependInputId: [{
                type: Input
            }], inputSelector: [{
                type: Input
            }], ariaAttributeName: [{
                type: Input
            }] } });
//# sourceMappingURL=dynamic-aria-attribute.directive.js.map