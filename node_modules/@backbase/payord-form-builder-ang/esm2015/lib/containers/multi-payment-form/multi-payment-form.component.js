import { Component, Input, Output, EventEmitter, } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import { MultiPaymentHooks, StepperAction, PaymentBaseFields, InitiatorFields, } from '@backbase/payment-orders-ang';
import { Subject } from 'rxjs';
import { debounceTime, distinctUntilChanged, takeUntil } from 'rxjs/operators';
import { triggerStepperHook } from '../../helpers/hooks-helpers';
import { ComponentsFactoryService } from '../../services/components-factory.service';
import { MultiPaymentService } from '../../services/multi-payment.service';
import { VisibilityService } from '../../services/visibility.service';
import { BatchOrderStateService } from '@backbase/payment-orders-ang';
import '@angular/localize/init';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "../../services/components-factory.service";
import * as i3 from "../../services/multi-payment.service";
import * as i4 from "@backbase/payment-orders-ang";
import * as i5 from "../../components/group/payord-group.component";
import * as i6 from "@angular/common";
import * as i7 from "@backbase/ui-ang/button";
import * as i8 from "../../directives/form-field.directive";
export class MultiPaymentFormComponent {
    constructor(fb, componentsFactory, multiPaymentService, stateService) {
        this.fb = fb;
        this.componentsFactory = componentsFactory;
        this.multiPaymentService = multiPaymentService;
        this.stateService = stateService;
        /**
         * errorList to be displayed in the component.
         */
        this.errorList = [];
        /**
         * Event emitter when form is submitted
         */
        this.submitted = new EventEmitter();
        /**
         * Event Emitter when step is next.
         */
        this.stepNext = new EventEmitter();
        /**
         * Event Emitter when step is back.
         */
        this.back = new EventEmitter();
        /**
         * Event emitter when alert is hidden.
         */
        this.hideError = new EventEmitter();
        this.controls = [];
        this.stepData = {};
        this.destroy$ = new Subject();
        this.totalTransfers$ = this.multiPaymentService.paymentTotalTransfers$;
        this.totalAmount$ = this.multiPaymentService.paymentTotalAmount$;
        this.currentStepForm = [];
        this.currentForm = {};
        this.formVal = new Subject();
    }
    ngOnInit() {
        this.form = this.formItem || this.fb.group({});
        if (this.config) {
            this.componentsFactory.registerCustomFields(this.config.customFields);
            this.createFormFields(this.config.fields, this.form, this.controls);
            this._listenFormChanges(this.form);
        }
        for (const step in this.stepperConfig) {
            if (this.stepperConfig.hasOwnProperty(step)) {
                this.stepData[this.stepperConfig[step].stepName] = {};
            }
        }
    }
    updateStepperDetails(currentStep, action) {
        switch (action) {
            case StepperAction.NEXT:
                this.stateService.resetErrors();
                if (this.isStepValid(currentStep.stepName)) {
                    this.onStepSubmit();
                }
                else {
                    this.stateService.addError(currentStep.stepName, {
                        message: $localize `:@@bb-multi-payment-widget.form-error:Form error: Check entered data before proceeding to the next step.`,
                    });
                }
                break;
            case StepperAction.BACK:
                this.stateService.resetErrors();
                this.back.emit();
                break;
            case StepperAction.SUBMIT:
                if (this.isStepValid(currentStep.stepName)) {
                    this.stateService.resetErrors();
                    this.onSubmit();
                }
                break;
        }
    }
    createFormFields(arr, _group, controlsArr, parentName) {
        arr.forEach((control) => {
            var _a;
            const mappedField = control.options && control.options.mapToField;
            const group = mappedField
                ? this.form.get(mappedField)
                : _group;
            const parent = mappedField || parentName;
            const subArray = [];
            if ((_a = control.options) === null || _a === void 0 ? void 0 : _a.fieldsConfig) {
                this.currency = control.options.fieldsConfig.amount.currency;
            }
            if (control.fields instanceof Array) {
                const subGroup = group.get(control.name) || this.fb.group({});
                this.createFormFields(control.fields, subGroup, subArray, parent ? `${parent}.${control.name}` : control.name);
                group.addControl(control.name, subGroup);
                controlsArr.push(Object.assign(Object.assign({}, control), { fields: subArray, parent: parentName }));
            }
            else {
                controlsArr.push(Object.assign(Object.assign({}, control), { parent }));
            }
        });
    }
    isStepValid(currentStepName) {
        const currentStepFields = this.controls.filter((control) => control.stepName === currentStepName);
        this.currentStepForm = [];
        this.currentForm = {};
        const isValidArray = currentStepFields.reduce((acc, steps) => {
            var _a, _b, _c;
            (_a = this.form.get(steps.name)) === null || _a === void 0 ? void 0 : _a.markAllAsTouched();
            this.currentForm = Object.assign(Object.assign({}, this.currentForm), (_b = this.form.get(steps.name)) === null || _b === void 0 ? void 0 : _b.value);
            acc.push((_c = this.form.get(steps.name)) === null || _c === void 0 ? void 0 : _c.valid);
            return acc;
        }, []);
        return isValidArray.every(Boolean);
    }
    onSubmit() {
        this.form.markAsDirty();
        this.form.markAllAsTouched();
        if (this.form.valid) {
            this.submitted.emit(this.form);
        }
    }
    onStepSubmit() {
        var _a, _b, _c, _d;
        if (JSON.stringify(this.stepData[((_a = this.stateService.currentStep) === null || _a === void 0 ? void 0 : _a.stepName) || '']) !== JSON.stringify(this.currentForm)) {
            this.stepData[((_b = this.stateService.currentStep) === null || _b === void 0 ? void 0 : _b.stepName) || ''] = this
                .stepData[((_c = this.stateService.currentStep) === null || _c === void 0 ? void 0 : _c.stepName) || '']
                ? this.currentForm
                : {};
        }
        this.stepNext.emit({
            form: this.currentForm,
            stepName: (_d = this.stateService.currentStep) === null || _d === void 0 ? void 0 : _d.stepName,
        });
    }
    triggerButtonEvent(hooks, action, currentStep) {
        if (hooks) {
            triggerStepperHook(MultiPaymentHooks.onClick, hooks, this.updateStepperDetails.bind(this, currentStep, action), this.stateService.currentStep, action);
        }
        else {
            this.updateStepperDetails(currentStep, action);
        }
    }
    _listenFormChanges(form) {
        const counterpartyControl = (form.get([PaymentBaseFields.counterparty]));
        counterpartyControl.valueChanges
            .pipe(distinctUntilChanged(), takeUntil(this.destroy$))
            .subscribe(() => {
            let amount = 0;
            let totalTransfers = 0;
            const formArray = form.get([
                PaymentBaseFields.counterparty,
                InitiatorFields.initiatorAccountGroup,
            ]);
            if (formArray) {
                const transferControls = formArray.controls;
                totalTransfers = transferControls.length;
                transferControls.forEach((control) => {
                    var _a, _b;
                    if ((_a = control.get('amount')) === null || _a === void 0 ? void 0 : _a.valid) {
                        amount = +amount + +((_b = control.get('amount')) === null || _b === void 0 ? void 0 : _b.value);
                    }
                });
            }
            this.multiPaymentService.totalTransfers$.next(totalTransfers);
            this.multiPaymentService.totalAmount$.next(amount);
        });
        const initiatorControl = (form.get([PaymentBaseFields.initiator]));
        initiatorControl.valueChanges
            .pipe(debounceTime(500), distinctUntilChanged(), takeUntil(this.destroy$))
            .subscribe(() => {
            const formArray = form.get([
                PaymentBaseFields.counterparty,
                InitiatorFields.initiatorAccountGroup,
            ]);
            if (formArray) {
                formArray.controls.forEach((control) => {
                    var _a, _b, _c;
                    if ((_a = control.get('counterpartyName')) === null || _a === void 0 ? void 0 : _a.touched) {
                        (_b = control.get('counterpartyName')) === null || _b === void 0 ? void 0 : _b.updateValueAndValidity();
                        (_c = control.get('counterpartyName')) === null || _c === void 0 ? void 0 : _c.markAllAsTouched();
                    }
                });
            }
        });
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    hideAlert(id) {
        var _a;
        this.hideError.emit({
            id,
            stepName: ((_a = this.stateService.currentStep) === null || _a === void 0 ? void 0 : _a.stepName) || '',
        });
    }
    getFormGroup(field) {
        return this.form.get(field.parent) || this.form;
    }
}
/** @nocollapse */ MultiPaymentFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: MultiPaymentFormComponent, deps: [{ token: i1.FormBuilder }, { token: i2.ComponentsFactoryService }, { token: i3.MultiPaymentService }, { token: i4.BatchOrderStateService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ MultiPaymentFormComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: MultiPaymentFormComponent, selector: "bb-multi-payment-form", inputs: { stepperConfig: "stepperConfig", formItem: "formItem", config: "config", errorList: "errorList" }, outputs: { submitted: "submitted", stepNext: "stepNext", back: "back", hideError: "hideError" }, providers: [VisibilityService, ComponentsFactoryService], ngImport: i0, template: "<form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n  <ng-container *ngIf=\"stateService.step$ | async as step; else allControls\">\n    <div [ngClass]=\"step.cssClasses\">\n      <ng-container *ngFor=\"let field of controls\">\n        <div *ngIf=\"field['stepName'] === step['stepName']\">\n          <ng-container\n            *ngTemplateOutlet=\"controlTempl; context: { $implicit: field }\"\n          ></ng-container>\n        </div>\n      </ng-container>\n      <ng-container *ngIf=\"(stateService.state$ | async) !== 'VALID'\">\n        <div [ngClass]=\"step.buttonClass\">\n          <div\n            class=\"bb-stack\"\n            [ngClass]=\"{\n              'container container--fixed-width': step.footerDetail\n            }\"\n            data-role=\"payment-footer\"\n          >\n            <div *ngIf=\"step.footerDetail\" class=\"bb-stack__item\">\n              <div\n                *ngIf=\"step.footerDetail.totalCount\"\n                i18n=\"@@multipayment-form-footer-text-total-transfers.text\"\n                data-role=\"total-transfers\"\n              >\n                {{ totalTransfers$ | async }} {totalTransfers$ | async, plural,\n                =1 {Transfer} other {Transfers}} (Credit)\n              </div>\n              <div\n                *ngIf=\"step.footerDetail.totalAmount\"\n                class=\"bb-highlight\"\n                i18n=\"@@multipayment-form-footer-text-total-amount.text\"\n                data-role=\"total-amount\"\n              >\n                Total: {{ currency\n                }}{{ totalAmount$ | async | number: '1.2-2' }}\n              </div>\n            </div>\n\n            <div class=\"bb-stack__item bb-stack__item--push-right\">\n              <div class=\"bb-button-bar bb-button-bar--reverse\">\n                <button\n                  bbButton\n                  *ngFor=\"let buttonDetail of step.buttonConfig\"\n                  class=\"bb-button-bar__button\"\n                  [color]=\"buttonDetail.type\"\n                  [attr.data-role]=\"'multi-payment-' + buttonDetail.action\"\n                  (click)=\"\n                    triggerButtonEvent(\n                      buttonDetail?.hooks,\n                      buttonDetail.action,\n                      step\n                    )\n                  \"\n                >\n                  {{ buttonDetail.text }}\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </ng-container>\n    </div>\n  </ng-container>\n\n  <ng-template #allControls>\n    <div>\n      <div *ngFor=\"let field of controls\">\n        <ng-container\n          *ngTemplateOutlet=\"controlTempl; context: { $implicit: field }\"\n        ></ng-container>\n      </div>\n      <div class=\"bb-button-bar\">\n        <button\n          bbButton\n          class=\"bb-button-bar__button\"\n          (click)=\"onSubmit()\"\n          color=\"primary\"\n          data-role=\"multi-payment-submit-button\"\n          i18n=\"\n            Submit button|Body text of the button that allows the user to go to\n            submit step @@bb-multi-payment-widget.submit\"\n        >\n          Submit\n        </button>\n      </div>\n    </div>\n  </ng-template>\n\n  <ng-template #controlTempl let-field>\n    <ng-container\n      *ngTemplateOutlet=\"\n        field.fields ? formGroupTmpl : formControlTmpl;\n        context: { $implicit: field }\n      \"\n    >\n    </ng-container>\n  </ng-template>\n\n  <ng-template let-config #formGroupTmpl>\n    <bb-payord-group [config]=\"config\" [group]=\"getFormGroup(config)\">\n      <ng-container *ngFor=\"let control of config.fields\">\n        <ng-container\n          *ngTemplateOutlet=\"\n            control.fields ? formGroupTmpl : formControlTmpl;\n            context: { $implicit: control }\n          \"\n        >\n        </ng-container>\n      </ng-container>\n    </bb-payord-group>\n  </ng-template>\n\n  <ng-template let-config #formControlTmpl>\n    <ng-container\n      bbPaymentFormField\n      [config]=\"config\"\n      [options]=\"config.options\"\n      [group]=\"getFormGroup(config)\"\n    >\n    </ng-container>\n  </ng-template>\n</form>\n", components: [{ type: i5.PayordGroupComponent, selector: "bb-payord-group", inputs: ["config", "group"] }], directives: [{ type: i1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i6.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i6.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i6.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i7.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i8.PaymentFormFieldDirective, selector: "[bbPaymentFormField]", inputs: ["options", "config", "group"] }], pipes: { "async": i6.AsyncPipe, "number": i6.DecimalPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: MultiPaymentFormComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-multi-payment-form',
                    templateUrl: './multi-payment-form.component.html',
                    providers: [VisibilityService, ComponentsFactoryService],
                }]
        }], ctorParameters: function () { return [{ type: i1.FormBuilder }, { type: i2.ComponentsFactoryService }, { type: i3.MultiPaymentService }, { type: i4.BatchOrderStateService }]; }, propDecorators: { stepperConfig: [{
                type: Input
            }], formItem: [{
                type: Input
            }], config: [{
                type: Input
            }], errorList: [{
                type: Input
            }], submitted: [{
                type: Output
            }], stepNext: [{
                type: Output
            }], back: [{
                type: Output
            }], hideError: [{
                type: Output
            }] } });
//# sourceMappingURL=multi-payment-form.component.js.map