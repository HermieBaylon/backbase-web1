{"version":3,"file":"multi-payment-form.component.js","sourceRoot":"","sources":["../../../../../../../libs/payord-form-builder-ang/src/lib/containers/multi-payment-form/multi-payment-form.component.ts","../../../../../../../libs/payord-form-builder-ang/src/lib/containers/multi-payment-form/multi-payment-form.component.html"],"names":[],"mappings":"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","sourcesContent":["import {\n  Component,\n  OnInit,\n  Input,\n  Output,\n  EventEmitter,\n  OnDestroy,\n} from '@angular/core';\nimport { FormArray, FormBuilder, FormControl, FormGroup } from '@angular/forms';\nimport {\n  PaymentFormGroup,\n  PaymentFormItem,\n  PaymentTypeConfig,\n  StepperConfig,\n  PaymentFormFieldConfig,\n  MultipleFormGroup,\n  MultiPaymentHooksConfig,\n  MultiPaymentHooks,\n  StepperAction,\n  PaymentBaseFields,\n  InitiatorFields,\n  ManualBatchTypeConfig,\n} from '@backbase/payment-orders-ang';\nimport { Subject, Observable } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, takeUntil } from 'rxjs/operators';\n\nimport { triggerStepperHook } from '../../helpers/hooks-helpers';\nimport { ComponentsFactoryService } from '../../services/components-factory.service';\nimport { MultiPaymentService } from '../../services/multi-payment.service';\nimport { VisibilityService } from '../../services/visibility.service';\nimport { BatchOrderStateService } from '@backbase/payment-orders-ang';\nimport '@angular/localize/init';\n\n@Component({\n  selector: 'bb-multi-payment-form',\n  templateUrl: './multi-payment-form.component.html',\n  providers: [VisibilityService, ComponentsFactoryService],\n})\nexport class MultiPaymentFormComponent implements OnInit, OnDestroy {\n  /**\n   * stepper Config for showing stepper details\n   */\n  @Input() stepperConfig!: StepperConfig[];\n  /**\n   * existing form\n   */\n  @Input() formItem?: FormGroup;\n  /**\n   * Manual batches configuration\n   */\n  @Input() config!: ManualBatchTypeConfig;\n  /**\n   * errorList to be displayed in the component.\n   */\n  @Input() errorList: Array<any> = [];\n  /**\n   * Event emitter when form is submitted\n   */\n  @Output() submitted = new EventEmitter();\n  /**\n   * Event Emitter when step is next.\n   */\n  @Output() stepNext = new EventEmitter();\n  /**\n   * Event Emitter when step is back.\n   */\n  @Output() back = new EventEmitter();\n  /**\n   * Event emitter when alert is hidden.\n   */\n  @Output() hideError = new EventEmitter<{ id: number; stepName: string }>();\n\n  form!: FormGroup;\n\n  controls: Array<MultipleFormGroup> = [];\n  stepData: { [key: string]: any } = {};\n\n  private destroy$ = new Subject<void>();\n\n  totalTransfers$ = this.multiPaymentService.paymentTotalTransfers$;\n  totalAmount$ = this.multiPaymentService.paymentTotalAmount$;\n  currentTypeConfig!: PaymentTypeConfig;\n  currentStepForm: Array<Observable<any> | undefined> = [];\n  currentForm = {};\n  subscription!: Observable<any>;\n  formVal = new Subject();\n  currency!: string;\n\n  constructor(\n    private fb: FormBuilder,\n    private readonly componentsFactory: ComponentsFactoryService,\n    private multiPaymentService: MultiPaymentService,\n    public stateService: BatchOrderStateService\n  ) {}\n\n  ngOnInit(): void {\n    this.form = this.formItem || this.fb.group({});\n\n    if (this.config) {\n      this.componentsFactory.registerCustomFields(this.config.customFields);\n      this.createFormFields(this.config.fields, this.form, this.controls);\n      this._listenFormChanges(this.form);\n    }\n\n    for (const step in this.stepperConfig) {\n      if (this.stepperConfig.hasOwnProperty(step)) {\n        this.stepData[this.stepperConfig[step].stepName] = {};\n      }\n    }\n  }\n\n  updateStepperDetails(currentStep: StepperConfig, action?: StepperAction) {\n    switch (action) {\n      case StepperAction.NEXT:\n        this.stateService.resetErrors();\n        if (this.isStepValid(currentStep.stepName)) {\n          this.onStepSubmit();\n        } else {\n          this.stateService.addError(currentStep.stepName, {\n            message: $localize`:@@bb-multi-payment-widget.form-error:Form error: Check entered data before proceeding to the next step.`,\n          });\n        }\n        break;\n      case StepperAction.BACK:\n        this.stateService.resetErrors();\n        this.back.emit();\n        break;\n      case StepperAction.SUBMIT:\n        if (this.isStepValid(currentStep.stepName)) {\n          this.stateService.resetErrors();\n          this.onSubmit();\n        }\n        break;\n    }\n  }\n\n  createFormFields(\n    arr: Array<PaymentFormFieldConfig | PaymentFormGroup>,\n    _group: FormGroup,\n    controlsArr: Array<PaymentFormItem>,\n    parentName?: string\n  ) {\n    arr.forEach((control: PaymentFormFieldConfig | PaymentFormGroup) => {\n      const mappedField = control.options && control.options.mapToField;\n      const group = mappedField\n        ? <FormGroup>this.form.get(mappedField)\n        : _group;\n      const parent = mappedField || parentName;\n      const subArray: Array<PaymentFormItem> = [];\n      if (control.options?.fieldsConfig) {\n        this.currency = control.options.fieldsConfig.amount.currency;\n      }\n      if ((<PaymentFormGroup>control).fields instanceof Array) {\n        const subGroup =\n          <FormGroup>group.get(control.name) || this.fb.group({});\n        this.createFormFields(\n          (<PaymentFormGroup>control).fields,\n          subGroup,\n          subArray,\n          parent ? `${parent}.${control.name}` : control.name\n        );\n        group.addControl(control.name, subGroup);\n        controlsArr.push({ ...control, fields: subArray, parent: parentName });\n      } else {\n        controlsArr.push({ ...control, parent });\n      }\n    });\n  }\n\n  isStepValid(currentStepName: string): boolean {\n    const currentStepFields: Array<MultipleFormGroup> = this.controls.filter(\n      (control) => control.stepName === currentStepName\n    );\n    this.currentStepForm = [];\n    this.currentForm = {};\n\n    const isValidArray: Array<boolean | undefined> = currentStepFields.reduce(\n      (acc: Array<boolean | undefined>, steps: MultipleFormGroup) => {\n        this.form.get(steps.name)?.markAllAsTouched();\n\n        this.currentForm = {\n          ...this.currentForm,\n          ...this.form.get(steps.name)?.value,\n        };\n        acc.push(this.form.get(steps.name)?.valid);\n        return acc;\n      },\n      []\n    );\n    return isValidArray.every(Boolean);\n  }\n\n  onSubmit() {\n    this.form.markAsDirty();\n    this.form.markAllAsTouched();\n\n    if (this.form.valid) {\n      this.submitted.emit(this.form);\n    }\n  }\n\n  onStepSubmit() {\n    if (\n      JSON.stringify(\n        this.stepData[this.stateService.currentStep?.stepName || '']\n      ) !== JSON.stringify(this.currentForm)\n    ) {\n      this.stepData[this.stateService.currentStep?.stepName || ''] = this\n        .stepData[this.stateService.currentStep?.stepName || '']\n        ? this.currentForm\n        : {};\n    }\n    this.stepNext.emit({\n      form: this.currentForm,\n      stepName: this.stateService.currentStep?.stepName,\n    });\n  }\n\n  triggerButtonEvent(\n    hooks: MultiPaymentHooksConfig | undefined,\n    action: StepperAction,\n    currentStep: StepperConfig\n  ) {\n    if (hooks) {\n      triggerStepperHook(\n        MultiPaymentHooks.onClick,\n        hooks,\n        this.updateStepperDetails.bind(this, currentStep, action),\n        this.stateService.currentStep,\n        action\n      );\n    } else {\n      this.updateStepperDetails(currentStep, action);\n    }\n  }\n\n  private _listenFormChanges(form: FormGroup) {\n    const counterpartyControl = <FormArray>(\n      form.get([PaymentBaseFields.counterparty])\n    );\n    counterpartyControl.valueChanges\n      .pipe(distinctUntilChanged(), takeUntil(this.destroy$))\n      .subscribe(() => {\n        let amount = 0;\n        let totalTransfers = 0;\n\n        const formArray = form.get([\n          PaymentBaseFields.counterparty,\n          InitiatorFields.initiatorAccountGroup,\n        ]);\n\n        if (formArray) {\n          const transferControls = (formArray as FormArray).controls;\n          totalTransfers = transferControls.length;\n          transferControls.forEach((control) => {\n            if (control.get('amount')?.valid) {\n              amount = +amount + +control.get('amount')?.value;\n            }\n          });\n        }\n\n        this.multiPaymentService.totalTransfers$.next(totalTransfers);\n        this.multiPaymentService.totalAmount$.next(amount);\n      });\n    const initiatorControl = <FormControl>(\n      form.get([PaymentBaseFields.initiator])\n    );\n    initiatorControl.valueChanges\n      .pipe(debounceTime(500), distinctUntilChanged(), takeUntil(this.destroy$))\n      .subscribe(() => {\n        const formArray = form.get([\n          PaymentBaseFields.counterparty,\n          InitiatorFields.initiatorAccountGroup,\n        ]);\n        if (formArray) {\n          (formArray as FormArray).controls.forEach((control) => {\n            if (control.get('counterpartyName')?.touched) {\n              control.get('counterpartyName')?.updateValueAndValidity();\n              control.get('counterpartyName')?.markAllAsTouched();\n            }\n          });\n        }\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  hideAlert(id: number) {\n    this.hideError.emit({\n      id,\n      stepName: this.stateService.currentStep?.stepName || '',\n    });\n  }\n\n  getFormGroup(field: PaymentFormItem): FormGroup {\n    return <FormGroup>this.form.get(field.parent as string) || this.form;\n  }\n}\n","<form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n  <ng-container *ngIf=\"stateService.step$ | async as step; else allControls\">\n    <div [ngClass]=\"step.cssClasses\">\n      <ng-container *ngFor=\"let field of controls\">\n        <div *ngIf=\"field['stepName'] === step['stepName']\">\n          <ng-container\n            *ngTemplateOutlet=\"controlTempl; context: { $implicit: field }\"\n          ></ng-container>\n        </div>\n      </ng-container>\n      <ng-container *ngIf=\"(stateService.state$ | async) !== 'VALID'\">\n        <div [ngClass]=\"step.buttonClass\">\n          <div\n            class=\"bb-stack\"\n            [ngClass]=\"{\n              'container container--fixed-width': step.footerDetail\n            }\"\n            data-role=\"payment-footer\"\n          >\n            <div *ngIf=\"step.footerDetail\" class=\"bb-stack__item\">\n              <div\n                *ngIf=\"step.footerDetail.totalCount\"\n                i18n=\"@@multipayment-form-footer-text-total-transfers.text\"\n                data-role=\"total-transfers\"\n              >\n                {{ totalTransfers$ | async }} {totalTransfers$ | async, plural,\n                =1 {Transfer} other {Transfers}} (Credit)\n              </div>\n              <div\n                *ngIf=\"step.footerDetail.totalAmount\"\n                class=\"bb-highlight\"\n                i18n=\"@@multipayment-form-footer-text-total-amount.text\"\n                data-role=\"total-amount\"\n              >\n                Total: {{ currency\n                }}{{ totalAmount$ | async | number: '1.2-2' }}\n              </div>\n            </div>\n\n            <div class=\"bb-stack__item bb-stack__item--push-right\">\n              <div class=\"bb-button-bar bb-button-bar--reverse\">\n                <button\n                  bbButton\n                  *ngFor=\"let buttonDetail of step.buttonConfig\"\n                  class=\"bb-button-bar__button\"\n                  [color]=\"buttonDetail.type\"\n                  [attr.data-role]=\"'multi-payment-' + buttonDetail.action\"\n                  (click)=\"\n                    triggerButtonEvent(\n                      buttonDetail?.hooks,\n                      buttonDetail.action,\n                      step\n                    )\n                  \"\n                >\n                  {{ buttonDetail.text }}\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </ng-container>\n    </div>\n  </ng-container>\n\n  <ng-template #allControls>\n    <div>\n      <div *ngFor=\"let field of controls\">\n        <ng-container\n          *ngTemplateOutlet=\"controlTempl; context: { $implicit: field }\"\n        ></ng-container>\n      </div>\n      <div class=\"bb-button-bar\">\n        <button\n          bbButton\n          class=\"bb-button-bar__button\"\n          (click)=\"onSubmit()\"\n          color=\"primary\"\n          data-role=\"multi-payment-submit-button\"\n          i18n=\"\n            Submit button|Body text of the button that allows the user to go to\n            submit step @@bb-multi-payment-widget.submit\"\n        >\n          Submit\n        </button>\n      </div>\n    </div>\n  </ng-template>\n\n  <ng-template #controlTempl let-field>\n    <ng-container\n      *ngTemplateOutlet=\"\n        field.fields ? formGroupTmpl : formControlTmpl;\n        context: { $implicit: field }\n      \"\n    >\n    </ng-container>\n  </ng-template>\n\n  <ng-template let-config #formGroupTmpl>\n    <bb-payord-group [config]=\"config\" [group]=\"getFormGroup(config)\">\n      <ng-container *ngFor=\"let control of config.fields\">\n        <ng-container\n          *ngTemplateOutlet=\"\n            control.fields ? formGroupTmpl : formControlTmpl;\n            context: { $implicit: control }\n          \"\n        >\n        </ng-container>\n      </ng-container>\n    </bb-payord-group>\n  </ng-template>\n\n  <ng-template let-config #formControlTmpl>\n    <ng-container\n      bbPaymentFormField\n      [config]=\"config\"\n      [options]=\"config.options\"\n      [group]=\"getFormGroup(config)\"\n    >\n    </ng-container>\n  </ng-template>\n</form>\n"]}