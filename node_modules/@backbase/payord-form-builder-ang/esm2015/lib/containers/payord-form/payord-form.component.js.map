{"version":3,"file":"payord-form.component.js","sourceRoot":"","sources":["../../../../../../../libs/payord-form-builder-ang/src/lib/containers/payord-form/payord-form.component.ts","../../../../../../../libs/payord-form-builder-ang/src/lib/containers/payord-form/payord-form.component.html"],"names":[],"mappings":"AAAA,OAAO,EACL,SAAS,EACT,UAAU,EACV,YAAY,EACZ,KAAK,EAGL,MAAM,GACP,MAAM,eAAe,CAAC;AACvB,OAAO,EAEL,WAAW,EACX,SAAS,EACT,UAAU,GACX,MAAM,gBAAgB,CAAC;AACxB,OAAO,EAKL,iBAAiB,EACjB,mBAAmB,EACnB,qBAAqB,EACrB,gBAAgB,EAChB,qBAAqB,EACrB,iBAAiB,EACjB,WAAW,EACX,YAAY,GACb,MAAM,8BAA8B,CAAC;AACtC,OAAO,EACL,+BAA+B,EAC/B,6BAA6B,EAC7B,mBAAmB,EACnB,wBAAwB,GACzB,MAAM,4BAA4B,CAAC;AACpC,OAAO,EAAE,iBAAiB,EAAE,MAAM,mCAAmC,CAAC;AACtE,OAAO,EAAE,wBAAwB,EAAE,MAAM,2CAA2C,CAAC;AACrF,OAAO,EAAE,eAAe,EAAgB,MAAM,MAAM,CAAC;AACrD,OAAO,EACL,oBAAoB,EACpB,MAAM,EACN,WAAW,EACX,SAAS,GACV,MAAM,gBAAgB,CAAC;;;;;;;;;;;;AAQxB,MAAM,OAAO,mBAAmB;IAsE9B,YACmB,EAAe,EACf,iBAA2C,EAC3C,MAAkB;QAFlB,OAAE,GAAF,EAAE,CAAa;QACf,sBAAiB,GAAjB,iBAAiB,CAA0B;QAC3C,WAAM,GAAN,MAAM,CAAY;QApErC;;WAEG;QACO,cAAS,GAAG,IAAI,YAAY,EAAE,CAAC;QACzC;;WAEG;QACO,UAAK,GAAG,IAAI,YAAY,EAAE,CAAC;QACrC;;WAEG;QACM,gBAAW,GAAG,KAAK,CAAC;QAC7B;;WAEG;QACM,mBAAc,GAAG,KAAK,CAAC;QAChC;;WAEG;QACM,mBAAc,GAAG,KAAK,CAAC;QAChC;;WAEG;QACM,uBAAkB,GAAG,KAAK,CAAC;QAepC;;WAEG;QACM,gBAAW,GAAG,WAAW,CAAC,cAAc,CAAC;QAClD;;WAEG;QACO,sBAAiB,GAAG,IAAI,YAAY,EAAa,CAAC;QAC5D;;WAEG;QACO,sBAAiB,GAAG,IAAI,YAAY,EAAa,CAAC;QAEpD,kBAAa,GAAG,IAAI,eAAe,CAAU,KAAK,CAAC,CAAC;QAC5D,wBAAmB,GAAG,IAAI,CAAC,aAAa,CAAC,YAAY,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;QAG7E,aAAQ,GAA4B,EAAE,CAAC;QAQvC,oBAAe,GAAG,WAAW,CAAC;IAM3B,CAAC;IArCJ;;OAEG;IACH,IAAa,UAAU,CAAC,YAAqB;QAC3C,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IACxC,CAAC;IAkCO,aAAa;;QACnB,iBAAiB,CACf,MAAA,IAAI,CAAC,MAAM,0CAAE,aAAa,EAC1B,mCAAmC,CACpC,CAAC;IACJ,CAAC;IAED,QAAQ;QACN,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;QAC/C,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,oBAAoB,EAAE,CAAC;QACrD,IAAI,CAAC,iBAAiB,CAAC,oBAAoB,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;QACtE,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QACpE,mBAAmB,CACjB,IAAI,CAAC,IAAI,EACT,aAAa,EACb,EAAE,EACF,EAAE,EACF,IAAI,CAAC,MAAM,CAAC,WAAW,CACxB,CAAC;QACF,IAAI,CAAC,6BAA6B,GAAG,mBAAmB,CACtD,IAAI,CAAC,IAAI,EACT,wBAAwB,CACzB,CAAC;QAEF,IAAI,CAAC,uBAAuB;YAC1B,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,mBAAmB,CAAC,qBAAqB,CAAC;gBACxD,mBAAmB,CAAC,IAAI,CAAC,IAAI,EAAE,mBAAmB,CAAC,qBAAqB,CAAC,CAAC;QAC5E,IAAI,IAAI,CAAC,cAAc,EAAE;YACvB,IAAI,CAAC,mBAAmB,GAAG,mBAAmB,CAC5C,IAAI,CAAC,IAAI,EACT,qBAAqB,CAAC,YAAY,EAClC,CAAC,UAAU,CAAC,QAAQ,CAAC,CACtB,CAAC;YACF,IAAI,IAAI,CAAC,WAAW,KAAK,WAAW,CAAC,aAAa,EAAE;gBAClD,mBAAmB,CAAC,IAAI,CAAC,IAAI,EAAE,qBAAqB,CAAC,iBAAiB,CAAC,CAAC;aACzE;SACF;QAED,IAAI,IAAI,CAAC,cAAc,EAAE;YACvB,mBAAmB,CAAC,IAAI,CAAC,IAAI,EAAE,YAAY,CAAC,cAAc,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,CAAC,CAAC;SAC3E;QAED,IAAI,CAAC,kCAAkC,EAAE,CAAC;QAC1C,IAAI,CAAC,uBAAuB,EAAE,CAAC;IACjC,CAAC;IAED,WAAW;QACT,IAAI,IAAI,CAAC,4BAA4B,EAAE;YACrC,IAAI,CAAC,4BAA4B,CAAC,WAAW,EAAE,CAAC;SACjD;QACD,IAAI,IAAI,CAAC,kCAAkC,EAAE;YAC3C,IAAI,CAAC,kCAAkC,CAAC,WAAW,EAAE,CAAC;SACvD;IACH,CAAC;IAED,gBAAgB,CACd,GAAqD,EACrD,MAAiB,EACjB,WAAmC,EACnC,UAAmB;QAEnB,GAAG,CAAC,OAAO,CAAC,CAAC,OAAkD,EAAE,EAAE;YACjE,MAAM,WAAW,GAAG,OAAO,CAAC,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,UAAU,CAAC;YAClE,MAAM,KAAK,GAAG,WAAW;gBACvB,CAAC,CAAY,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC;gBACvC,CAAC,CAAC,MAAM,CAAC;YACX,MAAM,MAAM,GAAG,WAAW,IAAI,UAAU,CAAC;YACzC,MAAM,QAAQ,GAA2B,EAAE,CAAC;YAE5C,IAAuB,OAAQ,CAAC,MAAM,YAAY,KAAK,EAAE;gBACvD,MAAM,QAAQ,GACD,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;gBAC1D,IAAI,CAAC,gBAAgB,CACA,OAAQ,CAAC,MAAM,EAClC,QAAQ,EACR,QAAQ,EACR,MAAM,CAAC,CAAC,CAAC,GAAG,MAAM,IAAI,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CACpD,CAAC;gBACF,KAAK,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;gBACzC,WAAW,CAAC,IAAI,iCAAM,OAAO,KAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,UAAU,IAAG,CAAC;aACxE;iBAAM;gBACL,WAAW,CAAC,IAAI,iCAAM,OAAO,KAAE,MAAM,IAAG,CAAC;aAC1C;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,YAAY,CAAC,KAAsB;QACjC,OAAkB,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,MAAgB,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC;IACvE,CAAC;IAED,oBAAoB;QAClB,OAAO;YACL,IAAI,EAAE,iBAAiB,CAAC,WAAW;YACnC,IAAI,EAAE,iBAAiB,CAAC,WAAW;YACnC,OAAO,EAAE;gBACP,WAAW,EAAE,IAAI,CAAC,aAAa;gBAC/B,WAAW,EAAE,IAAI,CAAC,WAAW;gBAC7B,cAAc,EAAE,IAAI,CAAC,cAAc;gBACnC,gBAAgB,EAAE,IAAI,CAAC,gBAAgB;gBACvC,WAAW,EAAE,IAAI,CAAC,WAAW;gBAC7B,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC;gBAChC,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC;aACjC;SACF,CAAC;IACJ,CAAC;IAED,OAAO;QACL,OAAO,qBAAqB,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;IACxD,CAAC;IAED,QAAQ;QACN,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;QACxB,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAC7B,IAAI,CAAC,IAAI,CAAC,sBAAsB,EAAE,CAAC;QACnC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;YACpB,IAAI,CAAC,aAAa,EAAE,CAAC;SACtB;aAAM,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YAC9C,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SAChC;IACH,CAAC;IAED,eAAe;QACb,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAC7B,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;YACnB,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACxC;aAAM;YACL,IAAI,CAAC,aAAa,EAAE,CAAC;SACtB;IACH,CAAC;IAED,eAAe;QACb,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACzC,CAAC;IAED,kCAAkC;QAChC,IAAI,CAAC,kCAAkC;YACrC,IAAI,CAAC,6BAA6B,CAAC,YAAY,CAAC,SAAS,CAAC,GAAG,EAAE;gBAC7D,wBAAwB,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;YACnD,CAAC,CAAC,CAAC;IACP,CAAC;IAED,uBAAuB;QACrB,IAAI,CAAC,4BAA4B;YAC/B,IAAI,CAAC,uBAAuB,CAAC,YAAY;iBACtC,IAAI,CACH,SAAS,CAAC,IAAI,CAAC,uBAAuB,CAAC,KAAK,CAAC,EAC7C,oBAAoB,EAAE,EACtB,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAC3B;iBACA,SAAS,CAAC,CAAC,KAA8B,EAAE,EAAE;gBAC5C,KAAK,MAAM,gBAAgB,IAAI,KAAK,CAAC,iBAAiB,IAAI,EAAE,EAAE;oBAC5D,+BAA+B,CAAC;wBAC9B,gBAAgB;wBAChB,IAAI,EAAE,IAAI,CAAC,IAAI;wBACf,MAAM,EAAE,IAAI,CAAC,MAAM;qBACpB,CAAC,CAAC;iBACJ;gBACD,6BAA6B,CAAC;oBAC5B,IAAI,EAAE,IAAI,CAAC,IAAI;oBACf,MAAM,EAAE,IAAI,CAAC,MAAM;iBACpB,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;IACT,CAAC;IAED,SAAS;QACP,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;IACpB,CAAC;;oIAlPU,mBAAmB;wHAAnB,mBAAmB,wcAFnB,CAAC,iBAAiB,EAAE,wBAAwB,CAAC,0BCjD1D,6gHAuHA;4FDpEa,mBAAmB;kBAL/B,SAAS;mBAAC;oBACT,QAAQ,EAAE,gBAAgB;oBAC1B,WAAW,EAAE,8BAA8B;oBAC3C,SAAS,EAAE,CAAC,iBAAiB,EAAE,wBAAwB,CAAC;iBACzD;kKAKU,MAAM;sBAAd,KAAK;gBAII,SAAS;sBAAlB,MAAM;gBAIG,KAAK;sBAAd,MAAM;gBAIE,WAAW;sBAAnB,KAAK;gBAIG,cAAc;sBAAtB,KAAK;gBAIG,cAAc;sBAAtB,KAAK;gBAIG,kBAAkB;sBAA1B,KAAK;gBAIG,gBAAgB;sBAAxB,KAAK;gBAIG,QAAQ;sBAAhB,KAAK;gBAIO,UAAU;sBAAtB,KAAK;gBAMG,WAAW;sBAAnB,KAAK;gBAII,iBAAiB;sBAA1B,MAAM;gBAIG,iBAAiB;sBAA1B,MAAM","sourcesContent":["import {\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport {\n  PaymentFormFieldConfig,\n  PaymentFormGroup,\n  PaymentFormItem,\n  PaymentTypeConfig,\n  PaymentComponents,\n  PaymentOptionFields,\n  PaymentTemplateFields,\n  TemplateModeType,\n  getIconByPaymnentType,\n  focusErrorElement,\n  PaymentMode,\n  HiddenFields,\n} from '@backbase/payment-orders-ang';\nimport {\n  applyInputFormSettingForCountry,\n  applyPurposeOfPaymentSettings,\n  registerFormControl,\n  setAdditionalBankDetails,\n} from '../../helpers/form-helpers';\nimport { VisibilityService } from '../../services/visibility.service';\nimport { ComponentsFactoryService } from '../../services/components-factory.service';\nimport { BehaviorSubject, Subscription } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  shareReplay,\n  startWith,\n} from 'rxjs/operators';\nimport { SanctionedCountry } from '@backbase/data-ang/payment-order-options';\n\n@Component({\n  selector: 'bb-payord-form',\n  templateUrl: './payord-form.component.html',\n  providers: [VisibilityService, ComponentsFactoryService],\n})\nexport class PayordFormComponent implements OnInit, OnDestroy {\n  /**\n   * The payment type config. Containas the details of all the fields and details of a payment type.\n   */\n  @Input() config!: PaymentTypeConfig;\n  /**\n   * Event emitted when the form is submitted.\n   */\n  @Output() submitted = new EventEmitter();\n  /**\n   * Event emitted when the form is reset.\n   */\n  @Output() clear = new EventEmitter();\n  /**\n   * The flag to denote if the widget is rendered inside a modal.\n   */\n  @Input() isModalView = false;\n  /**\n   * The flag to denote if the widget is rendered in payment template mode.\n   */\n  @Input() isTemplateMode = false;\n  /**\n   * The flag to denote if it is a debit payment.\n   */\n  @Input() isDebitPayment = false;\n  /**\n   * The flag to denote if the widget is rendered in payment edit mode.\n   */\n  @Input() isEditPaymentModal = false;\n  /**\n   * The flag to denote if widget should be render the template is edit or create mode.\n   */\n  @Input() templateModeType?: TemplateModeType;\n  /**\n   * The actual formgroup item.\n   */\n  @Input() formItem?: FormGroup;\n  /**\n   * Flag that denotes if form is being submitted\n   */\n  @Input() set submitting(isSubmitting: boolean) {\n    this.isSubmitting$.next(isSubmitting);\n  }\n  /**\n   * Payment mode type.\n   */\n  @Input() paymentMode = PaymentMode.CREATE_PAYMENT;\n  /**\n   * Event emitter when we cancel payment editing (sends form to check if it's not changed)\n   */\n  @Output() editPaymentCancel = new EventEmitter<FormGroup>();\n  /**\n   * Event emitter when we submit editing payment (sends form)\n   */\n  @Output() editPaymentSubmit = new EventEmitter<FormGroup>();\n\n  private isSubmitting$ = new BehaviorSubject<boolean>(false);\n  isSubmittingShared$ = this.isSubmitting$.asObservable().pipe(shareReplay(1));\n  form!: FormGroup;\n\n  controls: Array<PaymentFormGroup> = [];\n  inputFormSettingControl!: AbstractControl;\n  templateNameControl!: AbstractControl;\n  defaultBankCodeSettingControl!: AbstractControl;\n  defaultBankCodeSettingSubscription?: Subscription;\n  inputFormSettingSubscription?: Subscription;\n\n  buttonGroupConfig!: PaymentFormFieldConfig;\n  paymentModeType = PaymentMode;\n\n  constructor(\n    private readonly fb: FormBuilder,\n    private readonly componentsFactory: ComponentsFactoryService,\n    private readonly formEl: ElementRef\n  ) {}\n\n  private scrollToError() {\n    focusErrorElement(\n      this.formEl?.nativeElement,\n      'small.bb-input-validation-message'\n    );\n  }\n\n  ngOnInit() {\n    this.form = this.formItem || this.fb.group({});\n    this.buttonGroupConfig = this.getButtonGroupConfig();\n    this.componentsFactory.registerCustomFields(this.config.customFields);\n    this.createFormFields(this.config.fields, this.form, this.controls);\n    registerFormControl(\n      this.form,\n      'paymentType',\n      [],\n      [],\n      this.config.paymentType\n    );\n    this.defaultBankCodeSettingControl = registerFormControl(\n      this.form,\n      'defaultBankCodeSetting'\n    );\n\n    this.inputFormSettingControl =\n      this.form.get(PaymentOptionFields.inputFormFromSettings) ||\n      registerFormControl(this.form, PaymentOptionFields.inputFormFromSettings);\n    if (this.isTemplateMode) {\n      this.templateNameControl = registerFormControl(\n        this.form,\n        PaymentTemplateFields.templateName,\n        [Validators.required]\n      );\n      if (this.paymentMode === PaymentMode.EDIT_TEMPLATE) {\n        registerFormControl(this.form, PaymentTemplateFields.paymentTemplateId);\n      }\n    }\n\n    if (this.isDebitPayment) {\n      registerFormControl(this.form, HiddenFields.isDebitPayment, [], [], true);\n    }\n\n    this.listenDefaultBankCodeSettingChange();\n    this.listenFormSettingChange();\n  }\n\n  ngOnDestroy() {\n    if (this.inputFormSettingSubscription) {\n      this.inputFormSettingSubscription.unsubscribe();\n    }\n    if (this.defaultBankCodeSettingSubscription) {\n      this.defaultBankCodeSettingSubscription.unsubscribe();\n    }\n  }\n\n  createFormFields(\n    arr: Array<PaymentFormFieldConfig | PaymentFormGroup>,\n    _group: FormGroup,\n    controlsArr: Array<PaymentFormItem>,\n    parentName?: string\n  ) {\n    arr.forEach((control: PaymentFormFieldConfig | PaymentFormGroup) => {\n      const mappedField = control.options && control.options.mapToField;\n      const group = mappedField\n        ? <FormGroup>this.form.get(mappedField)\n        : _group;\n      const parent = mappedField || parentName;\n      const subArray: Array<PaymentFormItem> = [];\n\n      if ((<PaymentFormGroup>control).fields instanceof Array) {\n        const subGroup =\n          <FormGroup>group.get(control.name) || this.fb.group({});\n        this.createFormFields(\n          (<PaymentFormGroup>control).fields,\n          subGroup,\n          subArray,\n          parent ? `${parent}.${control.name}` : control.name\n        );\n        group.addControl(control.name, subGroup);\n        controlsArr.push({ ...control, fields: subArray, parent: parentName });\n      } else {\n        controlsArr.push({ ...control, parent });\n      }\n    });\n  }\n\n  getFormGroup(field: PaymentFormItem): FormGroup {\n    return <FormGroup>this.form.get(field.parent as string) || this.form;\n  }\n\n  getButtonGroupConfig() {\n    return {\n      type: PaymentComponents.buttonGroup,\n      name: PaymentComponents.buttonGroup,\n      options: {\n        submitting$: this.isSubmitting$,\n        isModalView: this.isModalView,\n        isTemplateMode: this.isTemplateMode,\n        templateModeType: this.templateModeType,\n        paymentMode: this.paymentMode,\n        submit: this.onSubmit.bind(this),\n        reset: this.resetForm.bind(this),\n      },\n    };\n  }\n\n  getIcon() {\n    return getIconByPaymnentType(this.config.paymentType);\n  }\n\n  onSubmit() {\n    this.form.markAsDirty();\n    this.form.markAllAsTouched();\n    this.form.updateValueAndValidity();\n    if (!this.form.valid) {\n      this.scrollToError();\n    } else if (this.form.valid && !this.submitting) {\n      this.submitted.emit(this.form);\n    }\n  }\n\n  onEditionSubmit() {\n    this.form.markAllAsTouched();\n    if (this.form.valid) {\n      this.editPaymentSubmit.emit(this.form);\n    } else {\n      this.scrollToError();\n    }\n  }\n\n  onEditionCancel() {\n    this.editPaymentCancel.emit(this.form);\n  }\n\n  listenDefaultBankCodeSettingChange() {\n    this.defaultBankCodeSettingSubscription =\n      this.defaultBankCodeSettingControl.valueChanges.subscribe(() => {\n        setAdditionalBankDetails(this.form, this.config);\n      });\n  }\n\n  listenFormSettingChange() {\n    this.inputFormSettingSubscription =\n      this.inputFormSettingControl.valueChanges\n        .pipe(\n          startWith(this.inputFormSettingControl.value),\n          distinctUntilChanged(),\n          filter((value) => !!value)\n        )\n        .subscribe((value: SanctionedCountry | any) => {\n          for (const inputFormSetting of value.inputFormSettings || []) {\n            applyInputFormSettingForCountry({\n              inputFormSetting,\n              form: this.form,\n              config: this.config,\n            });\n          }\n          applyPurposeOfPaymentSettings({\n            form: this.form,\n            config: this.config,\n          });\n        });\n  }\n\n  resetForm() {\n    this.clear.emit();\n  }\n}\n","<form class=\"dynamic-form\" [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n  <!-- show template name control when template mode is true-->\n  <div\n    class=\"bb-stack bb-stack--density-sm bb-text-support bb-block bb-block--lg col-12\"\n    *ngIf=\"\n      paymentMode === paymentModeType.EDIT_TEMPLATE ||\n      paymentMode === paymentModeType.COPY_PAYMENT\n    \"\n  >\n    <bb-icon-ui\n      *ngIf=\"getIcon() as icon\"\n      class=\"bb-stack__item\"\n      [name]=\"icon\"\n    ></bb-icon-ui>\n    <div class=\"bb-stack__item\" data-role=\"payment-type-label\">\n      {{ config?.name }}\n    </div>\n  </div>\n  <div class=\"form-group col-12\" *ngIf=\"isTemplateMode && templateNameControl\">\n    <bb-input-text-ui\n      label=\"Name of the template\"\n      i18n-label=\"@@payord-form.template-name.label\"\n      [formControl]=\"templateNameControl\"\n      [maxLength]=\"50\"\n      autocomplete=\"off\"\n      [showCharCounter]=\"true\"\n    >\n    </bb-input-text-ui>\n\n    <bb-input-validation-message-ui\n      [showErrors]=\"templateNameControl.touched && templateNameControl?.invalid\"\n    >\n      <ng-container\n        *ngIf=\"\n          templateNameControl.errors && templateNameControl.errors['required']\n        \"\n      >\n        <span\n          data-role=\"required-template-name-error\"\n          i18n=\"@@payment-form-template-name.validation.required-error\"\n        >\n          Template name is required\n        </span>\n      </ng-container>\n    </bb-input-validation-message-ui>\n  </div>\n\n  <!-- Render form controls  -->\n  <ng-container *ngFor=\"let field of controls\">\n    <ng-container\n      *ngTemplateOutlet=\"\n        field.fields ? formGroupTmpl : formControlTmpl;\n        context: { $implicit: field }\n      \"\n    >\n    </ng-container>\n  </ng-container>\n\n  <!--Render button group -->\n  <ng-container\n    *ngIf=\"paymentMode !== paymentModeType.EDIT_PAYMENT; else editButtonGroup\"\n  >\n    <ng-container\n      *ngTemplateOutlet=\"\n        formControlTmpl;\n        context: { $implicit: buttonGroupConfig }\n      \"\n    ></ng-container>\n  </ng-container>\n\n  <ng-template #editButtonGroup>\n    <div class=\"btn-container bb-button-bar\">\n      <bb-load-button-ui\n        class=\"bb-button-bar__button\"\n        color=\"primary\"\n        [isLoading]=\"isSubmittingShared$ | async\"\n        (click)=\"onEditionSubmit()\"\n        data-role=\"submit-button\"\n        i18n=\"@@omni-edit-payment-next-btn\"\n      >\n        Next\n      </bb-load-button-ui>\n      <button\n        bbButton\n        class=\"bb-button-bar__button\"\n        color=\"link\"\n        data-role=\"cancel-button\"\n        (click)=\"onEditionCancel()\"\n        [disabled]=\"isSubmittingShared$ | async\"\n        i18n=\"@@omni-edit-payment-cancel-btn\"\n      >\n        Cancel\n      </button>\n    </div>\n  </ng-template>\n\n  <ng-template let-config #formGroupTmpl>\n    <bb-payord-group [config]=\"config\" [group]=\"getFormGroup(config)\">\n      <ng-container *ngFor=\"let control of config.fields\">\n        <ng-container\n          *ngTemplateOutlet=\"\n            control.fields ? formGroupTmpl : formControlTmpl;\n            context: { $implicit: control }\n          \"\n        >\n        </ng-container>\n      </ng-container>\n    </bb-payord-group>\n  </ng-template>\n\n  <ng-template let-config #formControlTmpl>\n    <ng-container\n      bbPaymentFormField\n      [config]=\"config\"\n      [options]=\"config.options\"\n      [group]=\"getFormGroup(config)\"\n    ></ng-container>\n  </ng-template>\n</form>\n"]}