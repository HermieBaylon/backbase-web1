import { Component, ElementRef, EventEmitter, Input, Output, } from '@angular/core';
import { FormBuilder, FormGroup, Validators, } from '@angular/forms';
import { PaymentComponents, PaymentOptionFields, PaymentTemplateFields, TemplateModeType, getIconByPaymnentType, focusErrorElement, PaymentMode, HiddenFields, } from '@backbase/payment-orders-ang';
import { applyInputFormSettingForCountry, applyPurposeOfPaymentSettings, registerFormControl, setAdditionalBankDetails, } from '../../helpers/form-helpers';
import { VisibilityService } from '../../services/visibility.service';
import { ComponentsFactoryService } from '../../services/components-factory.service';
import { BehaviorSubject } from 'rxjs';
import { distinctUntilChanged, filter, shareReplay, startWith, } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "../../services/components-factory.service";
import * as i3 from "@backbase/ui-ang/icon";
import * as i4 from "@backbase/ui-ang/input-text";
import * as i5 from "@backbase/ui-ang/input-validation-message";
import * as i6 from "@backbase/ui-ang/load-button";
import * as i7 from "../../components/group/payord-group.component";
import * as i8 from "@angular/common";
import * as i9 from "@backbase/ui-ang/button";
import * as i10 from "../../directives/form-field.directive";
export class PayordFormComponent {
    constructor(fb, componentsFactory, formEl) {
        this.fb = fb;
        this.componentsFactory = componentsFactory;
        this.formEl = formEl;
        /**
         * Event emitted when the form is submitted.
         */
        this.submitted = new EventEmitter();
        /**
         * Event emitted when the form is reset.
         */
        this.clear = new EventEmitter();
        /**
         * The flag to denote if the widget is rendered inside a modal.
         */
        this.isModalView = false;
        /**
         * The flag to denote if the widget is rendered in payment template mode.
         */
        this.isTemplateMode = false;
        /**
         * The flag to denote if it is a debit payment.
         */
        this.isDebitPayment = false;
        /**
         * The flag to denote if the widget is rendered in payment edit mode.
         */
        this.isEditPaymentModal = false;
        /**
         * Payment mode type.
         */
        this.paymentMode = PaymentMode.CREATE_PAYMENT;
        /**
         * Event emitter when we cancel payment editing (sends form to check if it's not changed)
         */
        this.editPaymentCancel = new EventEmitter();
        /**
         * Event emitter when we submit editing payment (sends form)
         */
        this.editPaymentSubmit = new EventEmitter();
        this.isSubmitting$ = new BehaviorSubject(false);
        this.isSubmittingShared$ = this.isSubmitting$.asObservable().pipe(shareReplay(1));
        this.controls = [];
        this.paymentModeType = PaymentMode;
    }
    /**
     * Flag that denotes if form is being submitted
     */
    set submitting(isSubmitting) {
        this.isSubmitting$.next(isSubmitting);
    }
    scrollToError() {
        var _a;
        focusErrorElement((_a = this.formEl) === null || _a === void 0 ? void 0 : _a.nativeElement, 'small.bb-input-validation-message');
    }
    ngOnInit() {
        this.form = this.formItem || this.fb.group({});
        this.buttonGroupConfig = this.getButtonGroupConfig();
        this.componentsFactory.registerCustomFields(this.config.customFields);
        this.createFormFields(this.config.fields, this.form, this.controls);
        registerFormControl(this.form, 'paymentType', [], [], this.config.paymentType);
        this.defaultBankCodeSettingControl = registerFormControl(this.form, 'defaultBankCodeSetting');
        this.inputFormSettingControl =
            this.form.get(PaymentOptionFields.inputFormFromSettings) ||
                registerFormControl(this.form, PaymentOptionFields.inputFormFromSettings);
        if (this.isTemplateMode) {
            this.templateNameControl = registerFormControl(this.form, PaymentTemplateFields.templateName, [Validators.required]);
            if (this.paymentMode === PaymentMode.EDIT_TEMPLATE) {
                registerFormControl(this.form, PaymentTemplateFields.paymentTemplateId);
            }
        }
        if (this.isDebitPayment) {
            registerFormControl(this.form, HiddenFields.isDebitPayment, [], [], true);
        }
        this.listenDefaultBankCodeSettingChange();
        this.listenFormSettingChange();
    }
    ngOnDestroy() {
        if (this.inputFormSettingSubscription) {
            this.inputFormSettingSubscription.unsubscribe();
        }
        if (this.defaultBankCodeSettingSubscription) {
            this.defaultBankCodeSettingSubscription.unsubscribe();
        }
    }
    createFormFields(arr, _group, controlsArr, parentName) {
        arr.forEach((control) => {
            const mappedField = control.options && control.options.mapToField;
            const group = mappedField
                ? this.form.get(mappedField)
                : _group;
            const parent = mappedField || parentName;
            const subArray = [];
            if (control.fields instanceof Array) {
                const subGroup = group.get(control.name) || this.fb.group({});
                this.createFormFields(control.fields, subGroup, subArray, parent ? `${parent}.${control.name}` : control.name);
                group.addControl(control.name, subGroup);
                controlsArr.push(Object.assign(Object.assign({}, control), { fields: subArray, parent: parentName }));
            }
            else {
                controlsArr.push(Object.assign(Object.assign({}, control), { parent }));
            }
        });
    }
    getFormGroup(field) {
        return this.form.get(field.parent) || this.form;
    }
    getButtonGroupConfig() {
        return {
            type: PaymentComponents.buttonGroup,
            name: PaymentComponents.buttonGroup,
            options: {
                submitting$: this.isSubmitting$,
                isModalView: this.isModalView,
                isTemplateMode: this.isTemplateMode,
                templateModeType: this.templateModeType,
                paymentMode: this.paymentMode,
                submit: this.onSubmit.bind(this),
                reset: this.resetForm.bind(this),
            },
        };
    }
    getIcon() {
        return getIconByPaymnentType(this.config.paymentType);
    }
    onSubmit() {
        this.form.markAsDirty();
        this.form.markAllAsTouched();
        this.form.updateValueAndValidity();
        if (!this.form.valid) {
            this.scrollToError();
        }
        else if (this.form.valid && !this.submitting) {
            this.submitted.emit(this.form);
        }
    }
    onEditionSubmit() {
        this.form.markAllAsTouched();
        if (this.form.valid) {
            this.editPaymentSubmit.emit(this.form);
        }
        else {
            this.scrollToError();
        }
    }
    onEditionCancel() {
        this.editPaymentCancel.emit(this.form);
    }
    listenDefaultBankCodeSettingChange() {
        this.defaultBankCodeSettingSubscription =
            this.defaultBankCodeSettingControl.valueChanges.subscribe(() => {
                setAdditionalBankDetails(this.form, this.config);
            });
    }
    listenFormSettingChange() {
        this.inputFormSettingSubscription =
            this.inputFormSettingControl.valueChanges
                .pipe(startWith(this.inputFormSettingControl.value), distinctUntilChanged(), filter((value) => !!value))
                .subscribe((value) => {
                for (const inputFormSetting of value.inputFormSettings || []) {
                    applyInputFormSettingForCountry({
                        inputFormSetting,
                        form: this.form,
                        config: this.config,
                    });
                }
                applyPurposeOfPaymentSettings({
                    form: this.form,
                    config: this.config,
                });
            });
    }
    resetForm() {
        this.clear.emit();
    }
}
/** @nocollapse */ PayordFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordFormComponent, deps: [{ token: i1.FormBuilder }, { token: i2.ComponentsFactoryService }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PayordFormComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordFormComponent, selector: "bb-payord-form", inputs: { config: "config", isModalView: "isModalView", isTemplateMode: "isTemplateMode", isDebitPayment: "isDebitPayment", isEditPaymentModal: "isEditPaymentModal", templateModeType: "templateModeType", formItem: "formItem", submitting: "submitting", paymentMode: "paymentMode" }, outputs: { submitted: "submitted", clear: "clear", editPaymentCancel: "editPaymentCancel", editPaymentSubmit: "editPaymentSubmit" }, providers: [VisibilityService, ComponentsFactoryService], ngImport: i0, template: "<form class=\"dynamic-form\" [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n  <!-- show template name control when template mode is true-->\n  <div\n    class=\"bb-stack bb-stack--density-sm bb-text-support bb-block bb-block--lg col-12\"\n    *ngIf=\"\n      paymentMode === paymentModeType.EDIT_TEMPLATE ||\n      paymentMode === paymentModeType.COPY_PAYMENT\n    \"\n  >\n    <bb-icon-ui\n      *ngIf=\"getIcon() as icon\"\n      class=\"bb-stack__item\"\n      [name]=\"icon\"\n    ></bb-icon-ui>\n    <div class=\"bb-stack__item\" data-role=\"payment-type-label\">\n      {{ config?.name }}\n    </div>\n  </div>\n  <div class=\"form-group col-12\" *ngIf=\"isTemplateMode && templateNameControl\">\n    <bb-input-text-ui\n      label=\"Name of the template\"\n      i18n-label=\"@@payord-form.template-name.label\"\n      [formControl]=\"templateNameControl\"\n      [maxLength]=\"50\"\n      autocomplete=\"off\"\n      [showCharCounter]=\"true\"\n    >\n    </bb-input-text-ui>\n\n    <bb-input-validation-message-ui\n      [showErrors]=\"templateNameControl.touched && templateNameControl?.invalid\"\n    >\n      <ng-container\n        *ngIf=\"\n          templateNameControl.errors && templateNameControl.errors['required']\n        \"\n      >\n        <span\n          data-role=\"required-template-name-error\"\n          i18n=\"@@payment-form-template-name.validation.required-error\"\n        >\n          Template name is required\n        </span>\n      </ng-container>\n    </bb-input-validation-message-ui>\n  </div>\n\n  <!-- Render form controls  -->\n  <ng-container *ngFor=\"let field of controls\">\n    <ng-container\n      *ngTemplateOutlet=\"\n        field.fields ? formGroupTmpl : formControlTmpl;\n        context: { $implicit: field }\n      \"\n    >\n    </ng-container>\n  </ng-container>\n\n  <!--Render button group -->\n  <ng-container\n    *ngIf=\"paymentMode !== paymentModeType.EDIT_PAYMENT; else editButtonGroup\"\n  >\n    <ng-container\n      *ngTemplateOutlet=\"\n        formControlTmpl;\n        context: { $implicit: buttonGroupConfig }\n      \"\n    ></ng-container>\n  </ng-container>\n\n  <ng-template #editButtonGroup>\n    <div class=\"btn-container bb-button-bar\">\n      <bb-load-button-ui\n        class=\"bb-button-bar__button\"\n        color=\"primary\"\n        [isLoading]=\"isSubmittingShared$ | async\"\n        (click)=\"onEditionSubmit()\"\n        data-role=\"submit-button\"\n        i18n=\"@@omni-edit-payment-next-btn\"\n      >\n        Next\n      </bb-load-button-ui>\n      <button\n        bbButton\n        class=\"bb-button-bar__button\"\n        color=\"link\"\n        data-role=\"cancel-button\"\n        (click)=\"onEditionCancel()\"\n        [disabled]=\"isSubmittingShared$ | async\"\n        i18n=\"@@omni-edit-payment-cancel-btn\"\n      >\n        Cancel\n      </button>\n    </div>\n  </ng-template>\n\n  <ng-template let-config #formGroupTmpl>\n    <bb-payord-group [config]=\"config\" [group]=\"getFormGroup(config)\">\n      <ng-container *ngFor=\"let control of config.fields\">\n        <ng-container\n          *ngTemplateOutlet=\"\n            control.fields ? formGroupTmpl : formControlTmpl;\n            context: { $implicit: control }\n          \"\n        >\n        </ng-container>\n      </ng-container>\n    </bb-payord-group>\n  </ng-template>\n\n  <ng-template let-config #formControlTmpl>\n    <ng-container\n      bbPaymentFormField\n      [config]=\"config\"\n      [options]=\"config.options\"\n      [group]=\"getFormGroup(config)\"\n    ></ng-container>\n  </ng-template>\n</form>\n", components: [{ type: i3.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i4.InputTextComponent, selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i5.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i6.LoadButtonComponent, selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }, { type: i7.PayordGroupComponent, selector: "bb-payord-group", inputs: ["config", "group"] }], directives: [{ type: i1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i8.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i8.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i9.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i10.PaymentFormFieldDirective, selector: "[bbPaymentFormField]", inputs: ["options", "config", "group"] }], pipes: { "async": i8.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordFormComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payord-form',
                    templateUrl: './payord-form.component.html',
                    providers: [VisibilityService, ComponentsFactoryService],
                }]
        }], ctorParameters: function () { return [{ type: i1.FormBuilder }, { type: i2.ComponentsFactoryService }, { type: i0.ElementRef }]; }, propDecorators: { config: [{
                type: Input
            }], submitted: [{
                type: Output
            }], clear: [{
                type: Output
            }], isModalView: [{
                type: Input
            }], isTemplateMode: [{
                type: Input
            }], isDebitPayment: [{
                type: Input
            }], isEditPaymentModal: [{
                type: Input
            }], templateModeType: [{
                type: Input
            }], formItem: [{
                type: Input
            }], submitting: [{
                type: Input
            }], paymentMode: [{
                type: Input
            }], editPaymentCancel: [{
                type: Output
            }], editPaymentSubmit: [{
                type: Output
            }] } });
//# sourceMappingURL=payord-form.component.js.map