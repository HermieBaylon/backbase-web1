{"version":3,"file":"adaptive-form.component.js","sourceRoot":"","sources":["../../../../../../../libs/payord-form-builder-ang/src/lib/containers/adaptive-form/adaptive-form.component.ts","../../../../../../../libs/payord-form-builder-ang/src/lib/containers/adaptive-form/adaptive-form.component.html"],"names":[],"mappings":"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","sourcesContent":["import {\n  AfterViewInit,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { AbstractControl, FormControl, FormGroup } from '@angular/forms';\nimport {\n  CounterPartyFields,\n  FetchPaymentOptionsListenerFn,\n  focusErrorElement,\n  getConfig,\n  HiddenFields,\n  InitiatorFields,\n  isFormGroupConfig,\n  PaymentBaseFields,\n  PaymentComponents,\n  PaymentFormFieldConfig,\n  PaymentFormGroup,\n  PaymentFormItem,\n  PaymentOption,\n  PaymentOptionFields,\n  PaymentState,\n  PaymentTypeConfig,\n  RemittanceInfoFields,\n} from '@backbase/payment-orders-ang';\nimport { BehaviorSubject, Observable, pipe, Subject } from 'rxjs';\nimport {\n  debounceTime,\n  distinctUntilChanged,\n  filter,\n  skipWhile,\n  startWith,\n  takeUntil,\n  tap,\n} from 'rxjs/operators';\n\nimport {\n  filterPaymentConfigs,\n  getChargeBearerFieldConfig,\n  getPaymentCostFieldConfig,\n  getSelectPaymentOptionFieldConfig,\n  hasSameFields,\n  tagFormGroupToFormFields,\n} from '../../helpers/payment-config-helpers';\nimport {\n  addAddressFields,\n  applyInputFormSettingForCountry,\n  applyPurposeOfPaymentSettings,\n  createControlsMap,\n  registerFormControl,\n  setAdditionalBankDetails,\n} from '../../helpers/form-helpers';\nimport {\n  PaymentOption as PaymentOptionResponse,\n  SanctionedCountry,\n} from '@backbase/data-ang/payment-order-options';\n\n@Component({\n  selector: 'bb-adaptive-form',\n  templateUrl: './adaptive-form.component.html',\n})\nexport class AdaptiveFormComponent implements OnInit, AfterViewInit, OnDestroy {\n  /**\n   * The actual formgroup item.\n   */\n  @Input() formItem!: FormGroup;\n  /**\n   * The initial set of fields rendered on the form.\n   * These fields are static for all payment types.\n   */\n  @Input() baseFields: Array<PaymentFormFieldConfig | PaymentFormGroup> = [];\n  /**\n   * Array of payment configs that are needs to be supported by the wizard.\n   */\n  @Input() paymentTypes: Array<PaymentTypeConfig> = [];\n  /**\n   * The current state of the payment. Defaults to INITIAL\n   */\n  @Input() paymentState: PaymentState = PaymentState.INITIAL;\n  /**\n   * The flag to denote if it is a debit payment.\n   */\n  @Input() isDebitPayment = false;\n  /**\n   * The current selected payment config\n   */\n  @Input() selectedPaymentConfig?: PaymentTypeConfig;\n  /**\n   * The current selected payment option\n   */\n  @Input() selectedPaymentOption?: PaymentOption;\n  /**\n   * Flag to display when not payment option is avaialble\n   */\n  @Input() paymentOptionsError = false;\n\n  /**\n   * Flag to check closed payment access\n   */\n  @Input() checkClosedPaymentsAccess = false;\n  /**\n   * An Observable containing the list of payment options\n   */\n  @Input() paymentOptions$!: Observable<Array<PaymentOptionResponse>>;\n\n  /**\n   * Apply a payment template event emitter\n   */\n  @Output() applyPaymentTemplate = new EventEmitter<FormGroup>();\n\n  /**\n   * A subject that emit s a flag to denote if we are in the process of fetching the payment options\n   */\n  @Input() set fetchingOptions(isFetchingOptions: boolean) {\n    this.fetchingOptions$.next(!!isFetchingOptions);\n  }\n\n  /**\n   * An optional listener that can be used be trigger the payment options api.\n   * This will replace call to listenCriticalFieldChanges function.\n   */\n  @Input() fetchPaymentOptionsListener?: FetchPaymentOptionsListenerFn;\n\n  /**\n   * Flag that denotes if form is being submitted\n   */\n  @Input() set submitting(isSubmitting: boolean) {\n    this.isSubmitting$.next(isSubmitting);\n  }\n\n  /**\n   * A subject that emits when payment options has to be fetched\n   */\n  @Input() fetchOptions$!: Subject<FormGroup>;\n  /**\n   * Flag that indicates wether should apply a template\n   * Default value is `false`\n   */\n  @Input() shouldApplyTemplate = false;\n  /**\n   * The flag to denote if the widget is rendered inside a modal.\n   */\n  @Input() isModalView = false;\n  /**\n   * Event emitted when the form is submitted.\n   */\n  @Output() submitted = new EventEmitter();\n  /**\n   *  Event emitted when a payment option is selected\n   */\n  @Output() selectPaymentOption = new EventEmitter();\n  /**\n   * Event emitted when the form is reset.\n   */\n  @Output() clear = new EventEmitter();\n  /**\n   * Event emitted when a payment config is selected based on the form details.\n   */\n  @Output() selectConfig = new EventEmitter();\n\n  isSubmitting$ = new BehaviorSubject<boolean>(false);\n  fetchingOptions$ = new BehaviorSubject<boolean>(false);\n\n  gc$ = new Subject();\n  currentControls: Array<PaymentFormFieldConfig | PaymentFormGroup> = [];\n  form!: FormGroup;\n  shouldResetPaymentOptions = false;\n  currentDebitAccount?: string;\n  debounceInput = pipe(\n    takeUntil(this.gc$),\n    debounceTime(500),\n    distinctUntilChanged()\n  );\n\n  controls$ = new BehaviorSubject<Array<any>>([]);\n  paymentOptionControls$ = new BehaviorSubject<\n    Array<PaymentFormFieldConfig> | undefined\n  >(undefined);\n  paymentOptionsSubject$ = new BehaviorSubject<\n    Array<Array<PaymentOption & { name: string }>> | undefined\n  >(undefined);\n  paymentTypeControl!: AbstractControl;\n  selectPaymentOptionControl!: AbstractControl;\n  inputFormSettingControl!: AbstractControl;\n  chargeBearerControl!: AbstractControl;\n  chargeBearerOptionsControl!: AbstractControl;\n  transferFeeControl!: AbstractControl;\n  baseControls$ = new BehaviorSubject<Array<any>>([]);\n  taggedBaseFields: Array<PaymentFormFieldConfig | PaymentFormGroup> = [];\n  listenChanges!: Function;\n  retainableFields = [\n    `${PaymentBaseFields.counterparty}.${CounterPartyFields.postalAddress}`,\n    `${PaymentBaseFields.counterparty}.${CounterPartyFields.creditorBank}.${CounterPartyFields.postalAddress}`,\n    `${PaymentBaseFields.counterparty}.${CounterPartyFields.creditorBank}.${CounterPartyFields.bic}`,\n    `${PaymentBaseFields.counterparty}.${CounterPartyFields.creditorBank}.${CounterPartyFields.bankName}`,\n  ];\n  buttonGroupConfig!: PaymentFormFieldConfig;\n\n  constructor(private readonly formEl: ElementRef) {}\n\n  ngOnInit() {\n    this.form = this.formItem || new FormGroup({});\n    this.paymentTypeControl = registerFormControl(this.form, 'paymentType');\n    this.registerPaymentOptionControls();\n\n    this.listenPaymentOptionsChange();\n    this.listenFormSettingChange();\n    // tagging the base fields is required to find the delta between the base fields and others\n    tagFormGroupToFormFields(\n      this.baseFields,\n      this.form,\n      this.taggedBaseFields,\n      this.form\n    );\n    this.baseControls$.next(this.taggedBaseFields);\n    this.currentControls = this.baseFields;\n\n    this.listenChanges =\n      this.fetchPaymentOptionsListener || this.listenCriticalFieldChanges;\n    this.registerPostalAddressFormGroups();\n    registerFormControl(\n      this.form,\n      'isEditMode',\n      [],\n      [],\n      this.paymentState === PaymentState.EDIT\n    );\n\n    if (this.paymentState === PaymentState.EDIT && this.selectedPaymentConfig) {\n      this.listenPaymentType(this.selectedPaymentConfig.paymentType);\n    }\n\n    if (this.isDebitPayment) {\n      registerFormControl(this.form, HiddenFields.isDebitPayment, [], [], true);\n    }\n\n    this.buttonGroupConfig = this.getButtonGroupConfig();\n    this.renderPaymentOptionControls();\n  }\n\n  ngAfterViewInit() {\n    this.listenChanges(this.form, this.fetchOptions$);\n    this.listenPaymentTypeChanges();\n    if (this.shouldApplyTemplate) {\n      this.applyPaymentTemplate.emit(this.form);\n    }\n  }\n\n  ngOnDestroy() {\n    this.gc$.next();\n    this.gc$.complete();\n    this.controls$.complete();\n    this.paymentOptionControls$.next([]);\n    this.paymentOptionControls$.complete();\n  }\n\n  private getButtonGroupConfig() {\n    return {\n      type: PaymentComponents.buttonGroup,\n      name: PaymentComponents.buttonGroup,\n      options: {\n        submitting$: this.isSubmitting$,\n        isLoading$: this.fetchingOptions$,\n        submit: this.onSubmit.bind(this),\n        reset: this.resetForm.bind(this),\n        isModalView: this.isModalView,\n      },\n    };\n  }\n\n  registerPaymentOptionControls() {\n    this.chargeBearerControl = registerFormControl(\n      this.form,\n      PaymentOptionFields.chargeBearer\n    );\n    this.chargeBearerOptionsControl = registerFormControl(\n      this.form,\n      PaymentOptionFields.chargeBearerOptions\n    );\n    this.transferFeeControl = registerFormControl(\n      this.form,\n      PaymentOptionFields.transferFee\n    );\n    this.selectPaymentOptionControl = registerFormControl(\n      this.form,\n      PaymentOptionFields.selectPaymentOption\n    );\n    this.inputFormSettingControl = registerFormControl(\n      this.form,\n      PaymentOptionFields.inputFormFromSettings\n    );\n  }\n\n  registerPostalAddressFormGroups() {\n    const counterpartyGroup = <FormGroup>(\n      this.form.get(PaymentBaseFields.counterparty)\n    );\n    let creditorBankGroup = <FormGroup>(\n      counterpartyGroup.get(CounterPartyFields.creditorBank)\n    );\n\n    if (!creditorBankGroup) {\n      creditorBankGroup = new FormGroup({});\n      counterpartyGroup.addControl(\n        CounterPartyFields.creditorBank,\n        creditorBankGroup\n      );\n    }\n\n    let creditorAddressGroup = <FormGroup>(\n      creditorBankGroup.get(CounterPartyFields.postalAddress)\n    );\n    let creditorBankAddressGroup = <FormGroup>(\n      creditorBankGroup.get(CounterPartyFields.postalAddress)\n    );\n\n    if (!creditorAddressGroup) {\n      creditorAddressGroup = new FormGroup({});\n      counterpartyGroup.addControl(\n        CounterPartyFields.postalAddress,\n        creditorAddressGroup\n      );\n    }\n\n    if (!creditorBankAddressGroup) {\n      creditorBankAddressGroup = new FormGroup({});\n      creditorBankGroup.addControl(\n        CounterPartyFields.postalAddress,\n        creditorBankAddressGroup\n      );\n    }\n\n    addAddressFields(creditorAddressGroup);\n    addAddressFields(creditorBankAddressGroup);\n  }\n\n  /**\n   * Renders the provided payment config\n   */\n  renderPaymentConfig(paymentConfig: PaymentTypeConfig) {\n    const newControls: Array<PaymentFormFieldConfig | PaymentFormGroup> = [];\n    let deltaFields: Array<PaymentFormFieldConfig | PaymentFormGroup> = [];\n    tagFormGroupToFormFields(\n      paymentConfig.fields,\n      this.form,\n      newControls,\n      this.form\n    );\n    setAdditionalBankDetails(this.form, paymentConfig);\n\n    if (this.currentControls.length) {\n      deltaFields = this.deleteControls(this.currentControls, newControls);\n    }\n    const groupedDelta = this.groupDeltaFields(newControls, deltaFields);\n    this.currentControls = newControls;\n\n    this.controls$.next(groupedDelta);\n\n    if (this.paymentTypeControl) {\n      this.paymentTypeControl.patchValue(paymentConfig.paymentType);\n    }\n  }\n\n  /**\n   * The activate depandants feature is based on groups so we need to group delta fields in order to toggle dependatants.\n   * This function is used to group sibling delta fields into groups, so that the toggle dependatants feature is retained.\n   */\n  groupDeltaFields(\n    currentControls: Array<PaymentFormItem>,\n    delta: Array<PaymentFormItem>\n  ) {\n    const groupedFields: Array<any> = [];\n    for (const deltaField of delta) {\n      if (Array.isArray(groupedFields[groupedFields.length - 1])) {\n        const prevParent = groupedFields[groupedFields.length - 1][0].parent;\n        if (\n          deltaField.parent !== PaymentBaseFields.counterparty &&\n          prevParent === deltaField.parent\n        ) {\n          groupedFields[groupedFields.length - 1].push(deltaField);\n        } else {\n          groupedFields.push(deltaField);\n        }\n      } else if (\n        deltaField.parent !== PaymentBaseFields.counterparty &&\n        groupedFields.length &&\n        groupedFields[groupedFields.length - 1].parent === deltaField.parent\n      ) {\n        const prevElem = groupedFields.pop();\n        groupedFields.push([prevElem, deltaField]);\n      } else {\n        groupedFields.push(deltaField);\n      }\n    }\n    return this.mapGroupedFields(groupedFields, currentControls);\n  }\n\n  /**\n   * This function is fetches the grouped delta fields and encloses them with their appropriate parent group config.\n   * Doing so ensures the toggle dependants feature works as expected\n   */\n  mapGroupedFields(\n    groupedFields: Array<PaymentFormItem>,\n    currentControls: Array<PaymentFormItem>\n  ) {\n    const configs: Array<PaymentFormItem> = groupedFields.map(\n      (groupedField) => {\n        if (Array.isArray(groupedField)) {\n          const anccestorArray = groupedField[0].parent.split('.');\n          const parent = anccestorArray.pop();\n          const ancestor = anccestorArray.length\n            ? anccestorArray.length === 1\n              ? anccestorArray[0]\n              : anccestorArray.join('.')\n            : '';\n          const ancestorConfig = getConfig(ancestor, currentControls);\n          const parentConfig = getConfig(\n            parent,\n            <PaymentFormGroup>ancestorConfig || currentControls\n          );\n\n          return {\n            ...parentConfig,\n            fields: groupedField,\n            //reset the group title since it will be added in payment information group\n            title: '',\n          } as PaymentFormItem;\n        } else return groupedField;\n      }\n    );\n\n    return this.organiseConfigs(configs);\n  }\n\n  /**\n   * This function encloses the non counterparty and non schedule delta fields inside payment information group.\n   */\n  organiseConfigs(configs: Array<PaymentFormItem>) {\n    const counterPartyConfigs = [];\n    const paymentInfoConfigs = [];\n    const scheduleConfigs = [];\n    for (const config of configs) {\n      config.parent = config.parent || '';\n      if (\n        config.name === CounterPartyFields.remittanceInformation ||\n        config.name === CounterPartyFields.messageToBank\n      ) {\n        paymentInfoConfigs.push(config);\n      } else if (\n        config.parent === PaymentBaseFields.counterparty ||\n        config.parent.indexOf(`${PaymentBaseFields.counterparty}`) === 0\n      ) {\n        counterPartyConfigs.push(config);\n      } else if (\n        config.name === PaymentBaseFields.schedule ||\n        config.parent === PaymentBaseFields.schedule\n      ) {\n        if (isFormGroupConfig(config)) {\n          scheduleConfigs.push(...(config as PaymentFormGroup).fields);\n        } else {\n          scheduleConfigs.push(config);\n        }\n      } else {\n        paymentInfoConfigs.push(config);\n      }\n    }\n    const paymentInfo: PaymentFormGroup = {\n      name: 'paymentInfo',\n      title: 'Payment Infomation',\n      fields: [...paymentInfoConfigs],\n    };\n    const schedule: PaymentFormGroup = {\n      name: PaymentBaseFields.schedule,\n      fields: [...scheduleConfigs],\n    };\n    return [...counterPartyConfigs, paymentInfo, schedule];\n  }\n\n  /**\n   * Renders the provided array of fields in the form\n   */\n  renderFields(\n    fields: Array<PaymentFormFieldConfig | PaymentFormGroup>,\n    flatArray: Array<PaymentFormFieldConfig | PaymentFormGroup>\n  ) {\n    tagFormGroupToFormFields(fields, this.form, flatArray, this.form);\n    this.controls$.next([...flatArray]);\n  }\n\n  /**\n   * Deletes form controls in current array that are absent in the new array and returns the delta fields\n   */\n  deleteControls(\n    currentControls: Array<PaymentFormFieldConfig | PaymentFormGroup>,\n    newControls: Array<PaymentFormFieldConfig | PaymentFormGroup>\n  ) {\n    const baseControlsMap = createControlsMap(this.taggedBaseFields);\n    const currentControlsMap = createControlsMap(currentControls);\n    const newControlsMap = createControlsMap(newControls);\n    const deltaControls = [];\n\n    // Get new configs that are not rendered in the form\n    for (const key in newControlsMap) {\n      if (\n        !baseControlsMap.hasOwnProperty(key) &&\n        !PaymentOptionFields[<PaymentOptionFields>key] &&\n        key !==\n          `${PaymentBaseFields.counterparty}.${CounterPartyFields.counterPartyAccountGroup}`\n      ) {\n        deltaControls.push(newControlsMap[key]);\n      }\n    }\n\n    // Remove existing controls from the form that are not present in the newe config\n    for (const key in currentControlsMap) {\n      if (currentControlsMap.hasOwnProperty(key)) {\n        const controlName = <string>key.split('.').pop();\n        const control = this.form.get(key) || this.form.get(controlName);\n        if (\n          !baseControlsMap.hasOwnProperty(key) &&\n          !PaymentOptionFields[<PaymentOptionFields>key] &&\n          !newControlsMap.hasOwnProperty(key) &&\n          this.retainableFields.indexOf(key) === -1 &&\n          control &&\n          control.parent\n        ) {\n          (<FormGroup>control.parent).removeControl(controlName);\n        }\n        // reset validators from retainable controls\n        else if (this.retainableFields.indexOf(key) !== -1) {\n          control?.setValidators(null);\n          control?.updateValueAndValidity();\n        }\n      }\n    }\n\n    return deltaControls;\n  }\n\n  /**\n   * Listens to the form for changes in debit account number, credit account number, amount and currency\n   */\n  private listenCriticalFieldChanges(\n    form: FormGroup,\n    fetchOptions$: Subject<FormGroup>\n  ) {\n    // Cache the critical form controls\n    const debitAccount = <FormControl>(\n      form.get([PaymentBaseFields.initiator, InitiatorFields.accountNumber])\n    );\n    const creditAccount = <FormControl>(\n      form.get([\n        PaymentBaseFields.counterparty,\n        CounterPartyFields.accountNumber,\n      ])\n    );\n    const counterpartyCountry = <FormControl>(\n      form.get([\n        PaymentBaseFields.counterparty,\n        CounterPartyFields.creditorBank,\n        CounterPartyFields.postalAddress,\n        CounterPartyFields.country,\n      ])\n    );\n    const amountInfo = <FormControl>(\n      form.get([\n        PaymentBaseFields.remittanceInfo,\n        RemittanceInfoFields.amountCurrencyGroup,\n      ])\n    );\n\n    this.currentDebitAccount = debitAccount.value;\n\n    // subscribe for value changes in the critical form controls and trigger payment options endpoint\n    if (debitAccount && creditAccount && amountInfo) {\n      this.debounceInput(debitAccount.valueChanges)\n        .pipe(\n          skipWhile((val) => this.currentDebitAccount === val),\n          tap(() => {\n            this.currentDebitAccount = debitAccount.value;\n          })\n        )\n        .subscribe(this.fetchPaymentOptions.bind(this, form, fetchOptions$));\n      this.debounceInput(creditAccount.valueChanges).subscribe(\n        this.fetchPaymentOptions.bind(this, form, fetchOptions$)\n      );\n      this.debounceInput(amountInfo.valueChanges).subscribe(\n        this.fetchPaymentOptions.bind(this, form, fetchOptions$)\n      );\n\n      if (counterpartyCountry) {\n        this.debounceInput(counterpartyCountry.valueChanges).subscribe(\n          this.fetchPaymentOptions.bind(this, form, fetchOptions$)\n        );\n      }\n    }\n  }\n\n  /**\n   * Listen to the select payment option component and render the fields fo the selected payment type.\n   */\n  private listenPaymentTypeChanges() {\n    this.paymentTypeControl.valueChanges\n      .pipe(distinctUntilChanged(), takeUntil(this.gc$))\n      .subscribe(() => {\n        this.listenPaymentType(this.paymentTypeControl.value);\n      });\n  }\n\n  /**\n   * Listens to changes to the payment type in the form\n   */\n  private listenPaymentType(paymentType: string) {\n    if (paymentType) {\n      const selectedPaymentTypeConfig = this.paymentTypes.filter(\n        (paymentConfig) => paymentType === paymentConfig.paymentType\n      )[0];\n      this.selectConfig.next(selectedPaymentTypeConfig);\n      this.renderPaymentConfig(selectedPaymentTypeConfig);\n    }\n  }\n\n  private getPaymentConfigByType(\n    paymentType: string,\n    paymentConfigs: PaymentTypeConfig[]\n  ): PaymentTypeConfig | undefined {\n    return paymentConfigs.filter(\n      (paymentConfig) => paymentType === paymentConfig.paymentType\n    )[0];\n  }\n\n  private listenPaymentOptionsChange() {\n    if (this.paymentOptions$) {\n      this.paymentOptions$\n        .pipe(\n          takeUntil(this.gc$),\n          tap((options: Array<PaymentOptionResponse>) => {\n            this.onPaymentOptionsChange(options);\n            this.applyCountrySpecificSettings(\n              this.inputFormSettingControl.value\n            );\n          })\n        )\n        .subscribe();\n    }\n  }\n\n  private listenFormSettingChange() {\n    this.inputFormSettingControl.valueChanges\n      .pipe(\n        startWith(this.inputFormSettingControl.value),\n        takeUntil(this.gc$),\n        distinctUntilChanged(),\n        filter((value) => !!value)\n      )\n      .subscribe((value: SanctionedCountry) =>\n        this.applyCountrySpecificSettings(value)\n      );\n  }\n\n  private applyCountrySpecificSettings(value: SanctionedCountry) {\n    const currentConfig = this.getPaymentConfigByType(\n      this.paymentTypeControl.value,\n      this.paymentTypes\n    );\n    if (value) {\n      for (const inputFormSetting of value.inputFormSettings || []) {\n        applyInputFormSettingForCountry({\n          inputFormSetting,\n          form: this.form,\n          config: { fields: this.baseFields, name: '', paymentType: '' },\n        });\n        if (currentConfig) {\n          applyInputFormSettingForCountry({\n            inputFormSetting,\n            form: this.form,\n            config: currentConfig,\n          });\n        }\n      }\n      if (currentConfig) {\n        applyPurposeOfPaymentSettings({\n          form: this.form,\n          config: currentConfig,\n        });\n      }\n    }\n  }\n\n  private renderPaymentOptionControls() {\n    const paymentOptionControls = [];\n    paymentOptionControls.push(\n      getSelectPaymentOptionFieldConfig(\n        this.paymentOptions$,\n        this.paymentTypes,\n        this.checkClosedPaymentsAccess\n      )\n    );\n    paymentOptionControls.push(getChargeBearerFieldConfig());\n    paymentOptionControls.push(getPaymentCostFieldConfig());\n    this.paymentOptionControls$.next(paymentOptionControls);\n  }\n\n  /**\n   * Resets the existing payment options\n   */\n  resetPaymentOptions(paymentOptions: Array<PaymentOptionResponse>) {\n    if (this.shouldResetPaymentOptions) {\n      if (this.shouldResetSelectedPaymentOption(paymentOptions)) {\n        this.selectPaymentOptionControl.reset();\n      }\n      this.chargeBearerOptionsControl.reset();\n      this.transferFeeControl.reset();\n    }\n  }\n\n  private shouldResetSelectedPaymentOption(\n    paymentOptions: Array<PaymentOptionResponse>\n  ): boolean {\n    const selectedPaymentType = (\n      this.selectPaymentOptionControl.value || ''\n    ).split('::')[0];\n    if (selectedPaymentType) {\n      return !paymentOptions.some(\n        (option) => option.paymentType === selectedPaymentType\n      );\n    }\n\n    return false;\n  }\n\n  /**\n   * Callback triggered when the payment type changes\n   */\n  private onPaymentOptionsChange(\n    paymentOptions: Array<PaymentOptionResponse> = []\n  ) {\n    this.resetPaymentOptions(paymentOptions);\n    this.shouldResetPaymentOptions = true;\n    if (!paymentOptions || !paymentOptions.length) {\n      return;\n    }\n\n    const paymentConfigs = filterPaymentConfigs(\n      paymentOptions,\n      this.paymentTypes\n    );\n    if (paymentOptions.length === 1 || hasSameFields(paymentConfigs)) {\n      this.renderPaymentConfig(paymentConfigs[0]);\n      this.selectConfig.next(paymentConfigs[0]);\n    } else if (this.shouldResetSelectedPaymentOption(paymentOptions)) {\n      this.controls$.next([]);\n    }\n  }\n\n  /**\n   * Fetches the payment options for provided payment details\n   */\n\n  fetchPaymentOptions(form: FormGroup, fetchOptions$: Subject<FormGroup>) {\n    const debitAccount = <FormControl>(\n      form.get(\n        `${PaymentBaseFields.initiator}.${InitiatorFields.accountNumber}`\n      )\n    );\n    const creditAccount = <FormControl>(\n      form.get(\n        `${PaymentBaseFields.counterparty}.${CounterPartyFields.accountNumber}`\n      )\n    );\n    const amountInfo = <FormControl>(\n      form.get(\n        `${PaymentBaseFields.remittanceInfo}.${RemittanceInfoFields.amountCurrencyGroup}`\n      )\n    );\n    const bankCountry = <FormControl>(\n      form.get([\n        PaymentBaseFields.counterparty,\n        CounterPartyFields.creditorBank,\n        CounterPartyFields.postalAddress,\n        CounterPartyFields.country,\n      ])\n    );\n    const closedPayment = form.get(HiddenFields.isClosedPayment);\n    const arrangementId = form.get([\n      PaymentBaseFields.counterparty,\n      CounterPartyFields.id,\n    ]);\n    const skipCreditAccountValidityCheck =\n      closedPayment?.value || arrangementId?.value;\n\n    if (\n      debitAccount &&\n      creditAccount &&\n      amountInfo &&\n      bankCountry &&\n      bankCountry.valid &&\n      debitAccount.value &&\n      (creditAccount.valid || skipCreditAccountValidityCheck) &&\n      amountInfo.valid\n    ) {\n      fetchOptions$.next(form);\n    }\n  }\n\n  /**\n   * Returns the form group for the provided form field config\n   */\n  getFormGroup(field: PaymentFormItem): FormGroup {\n    return <FormGroup>this.form.get(field.parent as string) || this.form;\n  }\n\n  /**\n   * Submits the payment form\n   */\n  onSubmit() {\n    this.form.markAsDirty();\n    this.form.markAllAsTouched();\n    if (!this.form.valid) {\n      focusErrorElement(this.formEl?.nativeElement);\n    } else if (this.form.valid && !this.submitting) {\n      this.submitted.next(this.form);\n      this.selectPaymentOption.next(this.selectedPaymentOption);\n    }\n  }\n\n  /**\n   * Resets the payment form\n   */\n  resetForm() {\n    this.selectConfig.next(undefined);\n    this.selectPaymentOption.next(undefined);\n    this.gc$.next(); // Clear listeners\n    this.clear.next();\n  }\n}\n","<form class=\"payment-wizard-form\" [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\n  <ng-container *ngFor=\"let field of baseControls$ | async\">\n    <ng-container\n      *ngTemplateOutlet=\"\n        field.fields ? formGroupTmpl : formControlTmpl;\n        context: { $implicit: field }\n      \"\n    >\n    </ng-container>\n  </ng-container>\n\n  <div class=\"position-relative\">\n    <div class=\"delta-container\">\n      <ng-container *ngFor=\"let field of controls$ | async\">\n        <ng-container\n          *ngTemplateOutlet=\"\n            field.fields ? formGroupTmpl : formControlTmpl;\n            context: { $implicit: field }\n          \"\n        >\n        </ng-container>\n      </ng-container>\n    </div>\n\n    <ng-container *ngFor=\"let controlConfig of paymentOptionControls$ | async\">\n      <ng-container\n        *ngTemplateOutlet=\"\n          controlConfig.fields ? formGroupTmpl : formControlTmpl;\n          context: { $implicit: controlConfig }\n        \"\n      >\n      </ng-container>\n    </ng-container>\n\n    <div\n      *ngIf=\"fetchingOptions$ | async\"\n      class=\"wizard-loader-container position-absolute w-100 h-100 top-0 fixed-top bg-white\"\n      [style.opacity]=\"0.8\"\n    >\n      <bb-loading-indicator-ui\n        loaderSize=\"lg\"\n        class=\"absolute-center\"\n      ></bb-loading-indicator-ui>\n    </div>\n  </div>\n\n  <ng-template let-config #formGroupTmpl>\n    <bb-payord-group [config]=\"config\" [group]=\"getFormGroup(config)\">\n      <ng-container *ngFor=\"let control of config.fields\">\n        <ng-container\n          *ngTemplateOutlet=\"\n            control.fields ? formGroupTmpl : formControlTmpl;\n            context: { $implicit: control }\n          \"\n        >\n        </ng-container>\n      </ng-container>\n    </bb-payord-group>\n  </ng-template>\n\n  <ng-template let-config #formControlTmpl>\n    <ng-container\n      bbPaymentFormField\n      [config]=\"config\"\n      [options]=\"config.options\"\n      [group]=\"getFormGroup(config)\"\n    ></ng-container>\n  </ng-template>\n\n  <div\n    class=\"text-danger bb-block--md col-12\"\n    *ngIf=\"paymentOptionsError\"\n    i18n=\"@@adaptive-form-no-payment-option-error\"\n  >\n    A Payment transfer is not possible with provided details. Please update the\n    details and try again.\n  </div>\n\n  <!--Render button group -->\n  <ng-container\n    *ngTemplateOutlet=\"\n      formControlTmpl;\n      context: { $implicit: buttonGroupConfig }\n    \"\n  ></ng-container>\n\n  <ng-template #fetchingOptions>\n    <bb-loading-indicator-ui\n      loaderSize=\"sm\"\n      class=\"bb-load-button__loading-indicator\"\n    ></bb-loading-indicator-ui>\n  </ng-template>\n</form>\n"]}