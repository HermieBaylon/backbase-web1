import { Component } from '@angular/core';
import { Validators } from '@angular/forms';
import { Subject } from 'rxjs';
import { AccountField, PaymentFormFieldHooks, } from '@backbase/payment-orders-ang';
import { registerFormControl } from '../../helpers/form-helpers';
import { triggerHook } from '../../helpers/hooks-helpers';
import { takeUntil, tap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/account-selector";
import * as i2 from "../validation-message/validation-message.component";
import * as i3 from "@angular/common";
import * as i4 from "@angular/forms";
export class MultiPaymentAccountSelectorComponent {
    constructor() {
        this.gc$$ = new Subject();
        this.accountFormat = {
            length: 0,
            maskRange: [0, 0],
            segments: 0,
        };
        this.accountGroup = {
            [AccountField.id]: [''],
            [AccountField.name]: [''],
            [AccountField.accountNumber]: [''],
            [AccountField.number]: [''],
            [AccountField.accountType]: [''],
            [AccountField.currency]: [''],
            [AccountField.balance]: [''],
            [AccountField.bankBranchCode]: [''],
        };
    }
    get selectedAccount() {
        return this._selectedAccount;
    }
    set selectedAccount(account) {
        var _a, _b, _c;
        this._selectedAccount = account;
        (_a = this.group) === null || _a === void 0 ? void 0 : _a.patchValue(account);
        (_b = this.group) === null || _b === void 0 ? void 0 : _b.markAsTouched();
        (_c = this.group) === null || _c === void 0 ? void 0 : _c.markAsDirty();
    }
    ngOnInit() {
        var _a, _b, _c;
        this.registerFields();
        this.items$ = (_a = this.options) === null || _a === void 0 ? void 0 : _a.items$.pipe(tap((items) => {
            var _a, _b, _c, _d;
            this.items = items;
            if ((_b = (_a = this.group) === null || _a === void 0 ? void 0 : _a.get('id')) === null || _b === void 0 ? void 0 : _b.value) {
                this.selectedAccount = this.findAccount((_d = (_c = this.group) === null || _c === void 0 ? void 0 : _c.get('id')) === null || _d === void 0 ? void 0 : _d.value);
            }
        }));
        const initiator = (_c = (_b = this.group) === null || _b === void 0 ? void 0 : _b.parent) === null || _c === void 0 ? void 0 : _c.get('initiator');
        initiator === null || initiator === void 0 ? void 0 : initiator.valueChanges.pipe(takeUntil(this.gc$$)).subscribe({
            next: (account) => {
                this._selectedAccount = this.findAccount(account.id);
            },
        });
        triggerHook(PaymentFormFieldHooks.onInit, this);
    }
    ngOnDestroy() {
        this.gc$$.next();
        this.gc$$.complete();
        triggerHook(PaymentFormFieldHooks.onDestroy, this);
    }
    registerFields() {
        for (const key in this.accountGroup) {
            if (this.accountGroup.hasOwnProperty(key)) {
                const validators = [];
                if (key === AccountField.id || key === AccountField.name) {
                    validators.push(Validators.required);
                }
                registerFormControl(this.group, key, validators, [], '');
            }
        }
    }
    selectItem(account) {
        var _a, _b, _c;
        this.selectedAccount = account;
        if ((_a = this.options) === null || _a === void 0 ? void 0 : _a.accountSelected) {
            (_b = this.options) === null || _b === void 0 ? void 0 : _b.accountSelected(account);
        }
        (_c = this.options) === null || _c === void 0 ? void 0 : _c.searchTerm$.next('');
    }
    onBlur() {
        var _a, _b;
        if ((_a = this.options) === null || _a === void 0 ? void 0 : _a.required) {
            (_b = this.group) === null || _b === void 0 ? void 0 : _b.markAllAsTouched();
        }
    }
    onSearch($event) {
        var _a, _b;
        if ((_a = this.options) === null || _a === void 0 ? void 0 : _a.searchTerm$) {
            (_b = this.options) === null || _b === void 0 ? void 0 : _b.searchTerm$.next($event);
        }
    }
    findAccount(id) {
        var _a;
        return this.items.find((item) => item.id === id) || ((_a = this.group) === null || _a === void 0 ? void 0 : _a.value);
    }
}
/** @nocollapse */ MultiPaymentAccountSelectorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: MultiPaymentAccountSelectorComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ MultiPaymentAccountSelectorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: MultiPaymentAccountSelectorComponent, selector: "bb-multi-payment-account-selector", ngImport: i0, template: "<div\n  class=\"bb-dynamic-input form-group\"\n  [ngClass]=\"options?.cssClasses\"\n  *ngIf=\"!config?.hidden\"\n>\n  <section class=\"payment-from\" [formGroup]=\"group\">\n    <label class=\"bb-form-field\">\n      <div *ngIf=\"options?.label\" class=\"bb-dynamic-input__label bb-label\">\n        <span>\n          {{ options?.label }}\n        </span>\n        <span\n          class=\"bb-dynamic-input__helper-text bb-text-support\"\n          *ngIf=\"options?.helperText\"\n          [textContent]=\"options?.helperText\"\n        >\n        </span>\n      </div>\n      <bb-account-selector-ui\n        [markFirst]=\"true\"\n        [highlight]=\"false\"\n        [filterItems]=\"options?.filterItems\"\n        [internalFiltering]=\"false\"\n        [closeOnSelect]=\"true\"\n        [dropdownPosition]=\"'bottom'\"\n        [items]=\"items$ | async\"\n        [selectedItems]=\"selectedAccount\"\n        [searchFunc]=\"options?.searchFunc\"\n        (change)=\"selectItem($event)\"\n        (blur)=\"onBlur()\"\n        (search)=\"onSearch($event)\"\n        (filterChange)=\"onSearch($event)\"\n        [placeholder]=\"options?.placeholder || ''\"\n        [attr.aria-label]=\"options?.label\"\n        [required]=\"options?.required\"\n        [attr.data-role]=\"'debit-account-selector'\"\n        [showCurrencySymbol]=\"options?.showCurrencySymbol\"\n        [showBankBranchCode]=\"options?.showBankBranchCode\"\n        [productNumberFormat]=\"accountFormat\"\n      ></bb-account-selector-ui>\n    </label>\n\n    <ng-container *ngIf=\"!selectedAccount\">\n      <bb-payord-validation-message\n        [control]=\"group?.controls['id']\"\n        [validationMessages]=\"options?.validationMessages\"\n        [label]=\"options?.label || 'Account'\"\n      ></bb-payord-validation-message>\n    </ng-container>\n\n    <div\n      class=\"bb-dynamic-input__desc bb-text-support bb-subtitle\"\n      *ngIf=\"options?.description\"\n      [textContent]=\"options?.description\"\n    ></div>\n  </section>\n</div>\n", components: [{ type: i1.AccountSelectorComponent, selector: "bb-account-selector-ui", inputs: ["items", "disabled", "notFoundText", "showError", "productNumberFormat", "selectedItems", "multiple", "closeOnSelect", "searchable", "clearable", "placeholder", "loading", "dropdownPosition", "disableScrollEnd", "highlight", "filterItems", "markFirst", "internalFiltering", "virtualScroll", "required", "typeahead", "minTermLength", "typeToSearchText", "aria-describedby", "aria-labelledby", "aria-invalid", "searchFunc", "showCurrencySymbol", "showBankBranchCode", "groupByFn", "groupValueFn", "size", "compareItemsWith"], outputs: ["search", "clearSearch", "scroll", "scrollToEnd", "remove", "change", "filterChange", "focus", "blur"] }, { type: i2.ValidationMessageComponent, selector: "bb-payord-validation-message", inputs: ["control", "validationMessages", "label", "id", "hideGeneric"] }], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i4.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i4.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }], pipes: { "async": i3.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: MultiPaymentAccountSelectorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-multi-payment-account-selector',
                    templateUrl: './multipayment-account-selector.component.html',
                }]
        }] });
//# sourceMappingURL=multipayment-account-selector.component.js.map