{"version":3,"file":"payord-button-group.component.js","sourceRoot":"","sources":["../../../../../../../libs/payord-form-builder-ang/src/lib/components/button-group/payord-button-group.component.ts","../../../../../../../libs/payord-form-builder-ang/src/lib/components/button-group/payord-button-group.component.html"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAU,MAAM,eAAe,CAAC;AAE5D,OAAO,EAKL,WAAW,GACZ,MAAM,8BAA8B,CAAC;AACtC,OAAO,EAAE,oBAAoB,EAAE,MAAM,8BAA8B,CAAC;AACpE,OAAO,EAAE,eAAe,EAAE,MAAM,MAAM,CAAC;AACvC,OAAO,EAAE,mBAAmB,EAAE,MAAM,4BAA4B,CAAC;;;;;;;AAMjE,MAAM,OAAO,0BAA0B;IAQrC,YAC+B,YAAkC;QAAlC,iBAAY,GAAZ,YAAY,CAAsB;QALjE,uBAAkB,GAAG,IAAI,eAAe,CAAC,KAAK,CAAC,CAAC;QAChD,gBAAW,GAAG,WAAW,CAAC;IAKvB,CAAC;IAEJ,QAAQ;;QACN,IAAI,CAAC,gBAAgB,GAAG,MAAA,IAAI,CAAC,KAAK,0CAAE,KAAK,CAAC;IAC5C,CAAC;IAED,QAAQ;QACN,IAAI,mBAAmB,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,gBAAgB,CAAC,EAAE;YAChE,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACpC;aAAM;YACL,IAAI,CAAC,UAAU,EAAE,CAAC;SACnB;IACH,CAAC;IAED,UAAU;;QACR,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACpC,MAAA,IAAI,CAAC,YAAY,0CAAE,UAAU,EAAE,CAAC;IAClC,CAAC;;2IA3BU,0BAA0B;+HAA1B,0BAA0B,8DCjBvC,g4FAkGA;4FDjFa,0BAA0B;kBAJtC,SAAS;mBAAC;oBACT,QAAQ,EAAE,wBAAwB;oBAClC,WAAW,EAAE,sCAAsC;iBACpD;;0BAUI,QAAQ","sourcesContent":["import { Component, Optional, OnInit } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport {\n  PaymentDetails,\n  PaymentFormField,\n  PaymentFormFieldConfig,\n  PaymentFormFieldOptions,\n  PaymentMode,\n} from '@backbase/payment-orders-ang';\nimport { RoutableModalService } from '@backbase/payment-orders-ang';\nimport { BehaviorSubject } from 'rxjs';\nimport { isTemplateFormDirty } from '../../helpers/form-helpers';\n\n@Component({\n  selector: 'bb-payord-button-group',\n  templateUrl: './payord-button-group.component.html',\n})\nexport class PayordButtonGroupComponent implements PaymentFormField, OnInit {\n  options!: PaymentFormFieldOptions;\n  config!: PaymentFormFieldConfig;\n  group!: FormGroup;\n  confirmModalClose$ = new BehaviorSubject(false);\n  paymentMode = PaymentMode;\n  private initialFormValue!: PaymentDetails;\n\n  constructor(\n    @Optional() private readonly modalService: RoutableModalService\n  ) {}\n\n  ngOnInit() {\n    this.initialFormValue = this.group?.value;\n  }\n\n  onCancel() {\n    if (isTemplateFormDirty(this.group.value, this.initialFormValue)) {\n      this.confirmModalClose$.next(true);\n    } else {\n      this.closeModal();\n    }\n  }\n\n  closeModal() {\n    this.confirmModalClose$.next(false);\n    this.modalService?.closeModal();\n  }\n}\n","<div\n  class=\"btn-container bb-dynamic-input bb-button-bar\"\n  [ngClass]=\"{ 'bb-button-bar--reverse': !options?.isModalView }\"\n>\n  <bb-load-button-ui\n    type=\"submit\"\n    class=\"bb-button-bar__button\"\n    [isLoading]=\"options?.submitting$ | async\"\n  >\n    <ng-container\n      *ngIf=\"!options?.isTemplateMode\"\n      i18n=\"@@dynamic-form-field-button-group.continue.label\"\n      >Continue</ng-container\n    >\n    <ng-container\n      *ngIf=\"options?.isTemplateMode\"\n      i18n=\"@@dynamic-form-field-button-group.save.label\"\n      >Save</ng-container\n    >\n  </bb-load-button-ui>\n  <button\n    *ngIf=\"\n      options?.isModalView || options?.paymentMode === paymentMode.COPY_PAYMENT\n    \"\n    bbButton\n    class=\"bb-button-bar__button\"\n    color=\"secondary\"\n    data-role=\"cancel-button\"\n    (click)=\"onCancel()\"\n    [disabled]=\"options?.submitting$ | async\"\n    i18n=\"@@dynamic-form-field-button-group-cancel-label\"\n  >\n    Cancel\n  </button>\n  <button\n    *ngIf=\"\n      options?.paymentMode !== paymentMode.EDIT_TEMPLATE &&\n      options?.paymentMode !== paymentMode.COPY_PAYMENT\n    \"\n    class=\"bb-button-bar__button bb-button-bar__button--across\"\n    bbButton\n    type=\"button\"\n    color=\"link\"\n    (click)=\"options?.reset()\"\n    [disabled]=\"options?.submitting$ | async\"\n  >\n    <ng-container i18n=\"@@dynamic-form-field-button-group.clear.label\"\n      >Clear all fields</ng-container\n    >\n  </button>\n</div>\n\n<bb-modal-ui\n  [isOpen]=\"confirmModalClose$.value\"\n  (cancel)=\"confirmModalClose$.next(false)\"\n  (confirm)=\"closeModal()\"\n  data-role=\"close-discard-modal-dialog\"\n>\n  <bb-modal-header-ui\n    title=\"Discard entered data?\"\n    i18n-title=\"omni-payment-template-discard-modal-title\"\n  ></bb-modal-header-ui>\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody>\n      <ng-container i18n=\"@@omni-payment-template-discard-modal-content\">\n        Are you sure to exit and discard all changes? Entered data will be lost.\n      </ng-container>\n    </ng-template>\n  </bb-modal-body-ui>\n\n  <bb-modal-footer-ui #modalFooterRef>\n    <ng-template bbCustomModalFooter>\n      <div class=\"bb-button-bar\">\n        <button\n          bbButton\n          color=\"danger\"\n          class=\"bb-button-bar__button\"\n          (click)=\"closeModal()\"\n          data-role=\"discard-action-btn\"\n          i18n=\"@@omni-payment-template-discard-modal-discard-btn\"\n        >\n          Discard\n        </button>\n\n        <button\n          bbButton\n          class=\"bb-button-bar__button\"\n          color=\"link\"\n          (click)=\"confirmModalClose$.next(false)\"\n          data-role=\"cancel-action-btn\"\n          i18n=\"@@omni-payment-template-discard-modal-cancel-btn\"\n        >\n          Cancel\n        </button>\n      </div>\n    </ng-template>\n  </bb-modal-footer-ui>\n</bb-modal-ui>\n"]}