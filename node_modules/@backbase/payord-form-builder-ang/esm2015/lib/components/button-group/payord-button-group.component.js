import { Component, Optional } from '@angular/core';
import { PaymentMode, } from '@backbase/payment-orders-ang';
import { RoutableModalService } from '@backbase/payment-orders-ang';
import { BehaviorSubject } from 'rxjs';
import { isTemplateFormDirty } from '../../helpers/form-helpers';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/payment-orders-ang";
import * as i2 from "@backbase/ui-ang/load-button";
import * as i3 from "@backbase/ui-ang/modal";
import * as i4 from "@angular/common";
import * as i5 from "@backbase/ui-ang/button";
export class PayordButtonGroupComponent {
    constructor(modalService) {
        this.modalService = modalService;
        this.confirmModalClose$ = new BehaviorSubject(false);
        this.paymentMode = PaymentMode;
    }
    ngOnInit() {
        var _a;
        this.initialFormValue = (_a = this.group) === null || _a === void 0 ? void 0 : _a.value;
    }
    onCancel() {
        if (isTemplateFormDirty(this.group.value, this.initialFormValue)) {
            this.confirmModalClose$.next(true);
        }
        else {
            this.closeModal();
        }
    }
    closeModal() {
        var _a;
        this.confirmModalClose$.next(false);
        (_a = this.modalService) === null || _a === void 0 ? void 0 : _a.closeModal();
    }
}
/** @nocollapse */ PayordButtonGroupComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordButtonGroupComponent, deps: [{ token: i1.RoutableModalService, optional: true }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PayordButtonGroupComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordButtonGroupComponent, selector: "bb-payord-button-group", ngImport: i0, template: "<div\n  class=\"btn-container bb-dynamic-input bb-button-bar\"\n  [ngClass]=\"{ 'bb-button-bar--reverse': !options?.isModalView }\"\n>\n  <bb-load-button-ui\n    type=\"submit\"\n    class=\"bb-button-bar__button\"\n    [isLoading]=\"options?.submitting$ | async\"\n  >\n    <ng-container\n      *ngIf=\"!options?.isTemplateMode\"\n      i18n=\"@@dynamic-form-field-button-group.continue.label\"\n      >Continue</ng-container\n    >\n    <ng-container\n      *ngIf=\"options?.isTemplateMode\"\n      i18n=\"@@dynamic-form-field-button-group.save.label\"\n      >Save</ng-container\n    >\n  </bb-load-button-ui>\n  <button\n    *ngIf=\"\n      options?.isModalView || options?.paymentMode === paymentMode.COPY_PAYMENT\n    \"\n    bbButton\n    class=\"bb-button-bar__button\"\n    color=\"secondary\"\n    data-role=\"cancel-button\"\n    (click)=\"onCancel()\"\n    [disabled]=\"options?.submitting$ | async\"\n    i18n=\"@@dynamic-form-field-button-group-cancel-label\"\n  >\n    Cancel\n  </button>\n  <button\n    *ngIf=\"\n      options?.paymentMode !== paymentMode.EDIT_TEMPLATE &&\n      options?.paymentMode !== paymentMode.COPY_PAYMENT\n    \"\n    class=\"bb-button-bar__button bb-button-bar__button--across\"\n    bbButton\n    type=\"button\"\n    color=\"link\"\n    (click)=\"options?.reset()\"\n    [disabled]=\"options?.submitting$ | async\"\n  >\n    <ng-container i18n=\"@@dynamic-form-field-button-group.clear.label\"\n      >Clear all fields</ng-container\n    >\n  </button>\n</div>\n\n<bb-modal-ui\n  [isOpen]=\"confirmModalClose$.value\"\n  (cancel)=\"confirmModalClose$.next(false)\"\n  (confirm)=\"closeModal()\"\n  data-role=\"close-discard-modal-dialog\"\n>\n  <bb-modal-header-ui\n    title=\"Discard entered data?\"\n    i18n-title=\"omni-payment-template-discard-modal-title\"\n  ></bb-modal-header-ui>\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody>\n      <ng-container i18n=\"@@omni-payment-template-discard-modal-content\">\n        Are you sure to exit and discard all changes? Entered data will be lost.\n      </ng-container>\n    </ng-template>\n  </bb-modal-body-ui>\n\n  <bb-modal-footer-ui #modalFooterRef>\n    <ng-template bbCustomModalFooter>\n      <div class=\"bb-button-bar\">\n        <button\n          bbButton\n          color=\"danger\"\n          class=\"bb-button-bar__button\"\n          (click)=\"closeModal()\"\n          data-role=\"discard-action-btn\"\n          i18n=\"@@omni-payment-template-discard-modal-discard-btn\"\n        >\n          Discard\n        </button>\n\n        <button\n          bbButton\n          class=\"bb-button-bar__button\"\n          color=\"link\"\n          (click)=\"confirmModalClose$.next(false)\"\n          data-role=\"cancel-action-btn\"\n          i18n=\"@@omni-payment-template-discard-modal-cancel-btn\"\n        >\n          Cancel\n        </button>\n      </div>\n    </ng-template>\n  </bb-modal-footer-ui>\n</bb-modal-ui>\n", components: [{ type: i2.LoadButtonComponent, selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }, { type: i3.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i3.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i3.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: i3.ModalFooterComponent, selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }], directives: [{ type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i3.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i3.CustomModalFooterDirective, selector: "ng-template[bbCustomModalFooter]" }], pipes: { "async": i4.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordButtonGroupComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payord-button-group',
                    templateUrl: './payord-button-group.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.RoutableModalService, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=payord-button-group.component.js.map