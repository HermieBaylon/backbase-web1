import { Component } from '@angular/core';
import { FormGroup, Validators, } from '@angular/forms';
import { BehaviorSubject, Subject } from 'rxjs';
import { startWith, takeUntil } from 'rxjs/operators';
import { BeneficiaryList, CounterPartyFields, getAccountHolderAddress, getContactBankAddress, HiddenFields, isAddressTruthy, InitiatorFields, PaymentBaseFields, PaymentFormFieldHooks, sameAccountsValidator, } from '@backbase/payment-orders-ang';
import { DeprecationsService } from '@backbase/foundation-ang/future';
import { registerFormControl, registerFormGroup, } from '../../helpers/form-helpers';
import { VisibilityService } from '../../services/visibility.service';
import { triggerHook } from '../../helpers/hooks-helpers';
import { toggleBeneficiaryControls } from '../../helpers/generic-utils';
import * as i0 from "@angular/core";
import * as i1 from "../../services/visibility.service";
import * as i2 from "@backbase/foundation-ang/future";
import * as i3 from "@backbase/payment-orders-ang";
import * as i4 from "../validation-message/validation-message.component";
import * as i5 from "@backbase/ui-ang/input-checkbox";
import * as i6 from "@angular/common";
import * as i7 from "@angular/forms";
export class PayordBeneficiarySelectorComponent {
    constructor(visibilityService, deprecationService) {
        this.visibilityService = visibilityService;
        this.deprecationService = deprecationService;
        this.showBeneficiaryDetails = false;
        this.saveContactControlName = CounterPartyFields.saveNewContact;
        this.manualEdit$ = new BehaviorSubject(false);
        this.query = '';
        this.destroy$ = new Subject();
    }
    ngOnInit() {
        var _a, _b, _c, _d;
        this.setupFormFields();
        if (this.options.isWizardMode) {
            this.setupWizardFormFields();
        }
        triggerHook(PaymentFormFieldHooks.onInit, this);
        if (this.accountNameControl.value || ((_a = this.options) === null || _a === void 0 ? void 0 : _a.isTemplateMode)) {
            this.showDependantFields();
        }
        else {
            this.hideDependantFields();
        }
        const initiatorControl = (_b = this.group.parent) === null || _b === void 0 ? void 0 : _b.get(PaymentBaseFields.initiator);
        initiatorControl === null || initiatorControl === void 0 ? void 0 : initiatorControl.valueChanges.pipe(takeUntil(this.destroy$), startWith(initiatorControl.value)).subscribe(({ id }) => {
            this.accountNameControl.updateValueAndValidity();
        });
        (_c = this.arrangementIdControl) === null || _c === void 0 ? void 0 : _c.valueChanges.pipe(takeUntil(this.destroy$)).subscribe((controlId) => {
            if (!this.isClosedPaymentControl.value) {
                toggleBeneficiaryControls(this.group, !!controlId);
            }
        });
        (_d = this.hideBeneficiaryFieldsControl) === null || _d === void 0 ? void 0 : _d.valueChanges.pipe(takeUntil(this.destroy$)).subscribe(() => {
            this.onSearch('');
            this.enableBeneficiaryControl.setValue(true);
            this.manualEdit$.next(false);
            this.saveNewContactControl.setValue(false);
            if (!this.options.isWizardMode) {
                this.hideDependantFields();
            }
        });
    }
    ngOnDestroy() {
        var _a;
        (_a = this.initiatorControlSubscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
        triggerHook(PaymentFormFieldHooks.onDestroy, this);
    }
    setupFormFields() {
        var _a;
        this.deprecationService.logDeprecatedFeature(`
      "initiatorNameControl" is deprecated and will be removed in next major release, please use "initiatorIdControl" instead.
    `);
        this.accountNameControl = registerFormControl(this.group, this.config.name, [Validators.required, sameAccountsValidator()]);
        this.manualEditControl = registerFormControl(this.group.parent, HiddenFields.isManualEdit);
        this.isClosedPaymentControl = registerFormControl(this.group.parent, HiddenFields.isClosedPayment);
        this.enableBeneficiaryControl = registerFormControl(this.group.parent, HiddenFields.enableBeneficiary, [], [], true);
        this.beneficiaryAccountNameControl = registerFormControl(this.group, HiddenFields.beneficiaryAccountName);
        this.saveContactControl = registerFormControl(this.group, this.saveContactControlName);
        this.saveNewContactControl = registerFormControl(this.group, HiddenFields.showSaveNewContact);
        this.hideBeneficiaryFieldsControl = registerFormControl(this.group, HiddenFields.hideBeneficiaryFields);
        this.arrangementIdControl = registerFormControl(this.group, CounterPartyFields.id);
        this.selectedBeneficiaryControl = registerFormControl(this.group.parent, HiddenFields.selectedBeneficiary);
        this.selectedContactControl = (registerFormGroup(this.group, CounterPartyFields.selectedContact, {
            contactId: [''],
            accountId: [''],
        }));
        this.initiatorIdControl = ((_a = this.group.parent) === null || _a === void 0 ? void 0 : _a.get([PaymentBaseFields.initiator, InitiatorFields.id]));
    }
    setupWizardFormFields() {
        this.accountNumberControl =
            this.group.controls[CounterPartyFields.accountNumber] ||
                this.registerAccountNumberControl();
        this.beneficiaryAddressGroup =
            this.group.controls[CounterPartyFields.postalAddress] ||
                this.registerAddressGroup(this.group);
        this.beneficiaryBankGroup =
            this.group.controls[CounterPartyFields.creditorBank] ||
                this.registerCreditorBankGroup();
        this.bankCodeControl =
            this.group.controls[`${CounterPartyFields.creditorBank}.${CounterPartyFields.bankBranchCode}`] || this.registerBankCodeControl();
        this.bankNameControl =
            this.group.controls[`${CounterPartyFields.creditorBank}.${CounterPartyFields.bankName}`] || this.registerBankNameControl();
        this.bankBicControl =
            this.group.controls[`${CounterPartyFields.creditorBank}.${CounterPartyFields.bic}`] || this.registerBankBicControl();
        this.beneficiaryBankAddressGroup =
            this.group.controls[`${CounterPartyFields.creditorBank}.${CounterPartyFields.postalAddress}`] || this.registerAddressGroup(this.beneficiaryBankGroup);
        registerFormControl(this.group, CounterPartyFields.schemeName);
    }
    registerAccountNumberControl() {
        return registerFormControl(this.group, CounterPartyFields.accountNumber);
    }
    registerBankNameControl() {
        return registerFormControl(this.beneficiaryBankGroup, CounterPartyFields.bankName);
    }
    registerBankBicControl() {
        return registerFormControl(this.beneficiaryBankGroup, CounterPartyFields.bic);
    }
    registerBankCodeControl() {
        return registerFormControl(this.beneficiaryBankGroup, CounterPartyFields.bankBranchCode);
    }
    registerAddressGroup(group) {
        const initialAddress = {
            addressLine1: [''],
            addressLine2: [''],
            streetName: [''],
            postCode: [''],
            town: [''],
            countrySubDivision: [''],
            country: [''],
        };
        return (registerFormGroup(group, CounterPartyFields.postalAddress, initialAddress));
    }
    registerCreditorBankGroup() {
        const creditorBankGroup = new FormGroup({});
        this.group.addControl(CounterPartyFields.creditorBank, creditorBankGroup);
        return creditorBankGroup;
    }
    registerCreditorBankAddress() {
        const creditorBankGroup = new FormGroup({});
        this.group.addControl(CounterPartyFields.creditorBank, creditorBankGroup);
        return creditorBankGroup;
    }
    fetchCreditorItems(params) {
        var _a;
        if ((_a = this.config.options) === null || _a === void 0 ? void 0 : _a.fetchItems$) {
            this.config.options.fetchItems$.next(params);
        }
    }
    onLoadMoreAccounts(page) {
        this.deprecationService.logDeprecatedFeature(`
      "onLoadMoreAccounts" is deprecated since 3.9.3 and will be removed in 3.10.0, please use "onFetchMoreItems" instead.
    `);
        this.fetchCreditorItems({
            params: { from: page, query: this.query },
            type: BeneficiaryList.ACCOUNTS,
        });
    }
    onLoadMoreContacts(page) {
        this.deprecationService.logDeprecatedFeature(`
      "onLoadMoreContacts" is deprecated since 3.9.3 and will be removed in 3.10.0, please use "onFetchMoreItems" instead.
    `);
        this.fetchCreditorItems({
            params: { from: page, query: this.query },
            type: BeneficiaryList.CONTACTS,
        });
    }
    onFetchMoreItems(event) {
        this.fetchCreditorItems({
            params: { from: event.page, query: this.query },
            type: event.type,
        });
    }
    onSearch(query) {
        this.query = query;
        this.manualEditControl.setValue(true);
        this.fetchCreditorItems({ params: { query } });
    }
    onSelectAccount(selectedItem) {
        var _a;
        const accountNumberControl = this.group.controls[CounterPartyFields.accountNumber];
        const bankNameControl = this.group.get(`${CounterPartyFields.creditorBank}.${CounterPartyFields.bankName}`);
        const bankCodeControl = this.group.get(`${CounterPartyFields.creditorBank}.${CounterPartyFields.bankBranchCode}`);
        const beneficiaryAddressGroup = this.group.get(CounterPartyFields.postalAddress);
        const creditorBankBic = this.group.get(`${CounterPartyFields.creditorBank}.${CounterPartyFields.bic}`);
        this.setValue(this.accountNameControl, selectedItem.name || '');
        this.setValue(accountNumberControl, selectedItem.accountNumber || '');
        this.setValue(bankCodeControl, selectedItem.bankBranchCode);
        this.setValue(creditorBankBic, selectedItem.BIC || '');
        this.setValue(bankNameControl, '');
        this.setValue(this.arrangementIdControl, selectedItem.id);
        this.saveNewContactControl.setValue(false);
        this.setAddress(beneficiaryAddressGroup, {});
        this.setDefaultCountry();
        this.showBeneficiaryDetails = true;
        this.enableBeneficiaryControl.setValue(false);
        this.manualEdit$.next(false);
        this.manualEditControl.setValue(false);
        this.selectedBeneficiaryControl.setValue(selectedItem);
        this.selectedContactControl.reset();
        this.saveContactControl.reset();
        this.showDependantFields();
        (_a = this.initiatorIdControl) === null || _a === void 0 ? void 0 : _a.updateValueAndValidity();
    }
    onSelectContact(selectedcontact) {
        var _a;
        const accountNumberControl = this.group.controls[CounterPartyFields.accountNumber];
        const bankNameControl = this.group.get(`${CounterPartyFields.creditorBank}.${CounterPartyFields.bankName}`);
        const bankCodeControl = this.group.get(`${CounterPartyFields.creditorBank}.${CounterPartyFields.bankBranchCode}`);
        const creditorBankBic = this.group.get(`${CounterPartyFields.creditorBank}.${CounterPartyFields.bic}`);
        const beneficiaryAddressGroup = this.group.get(CounterPartyFields.postalAddress);
        const beneficiaryBankAddressGroup = this.group.get(`${CounterPartyFields.creditorBank}.${CounterPartyFields.postalAddress}`);
        const account = selectedcontact.accounts[0];
        const accountHolderAddress = this.getAccountHolderAddress(account);
        const beneficiaryAddress = isAddressTruthy(accountHolderAddress)
            ? accountHolderAddress
            : this.getBeneficiaryAddress(selectedcontact);
        const bankAddress = this.getContactBankAddress(account);
        this.setValue(this.accountNameControl, selectedcontact.name);
        this.setValue(this.beneficiaryAccountNameControl, selectedcontact.accountName || '');
        this.setValue(accountNumberControl, account.accountNumber || account.IBAN || '');
        this.setValue(bankCodeControl, account.bankCode || '');
        this.setValue(bankNameControl, account.bankName || '');
        this.setValue(creditorBankBic, account.BIC || '');
        this.setValue(this.arrangementIdControl, '');
        this.setValue(this.selectedContactControl, this.getSelectedContactDetails(selectedcontact));
        this.selectedBeneficiaryControl.setValue(selectedcontact);
        this.setAddress(beneficiaryAddressGroup, beneficiaryAddress);
        this.setAddress(beneficiaryBankAddressGroup, bankAddress, true);
        this.showBeneficiaryDetails = true;
        this.manualEdit$.next(false);
        this.manualEditControl.setValue(false);
        this.enableBeneficiaryControl.setValue(false);
        this.saveContactControl.reset();
        this.showDependantFields();
        (_a = this.initiatorIdControl) === null || _a === void 0 ? void 0 : _a.updateValueAndValidity();
    }
    getSelectedContactDetails(selectedcontact) {
        // currently there is no id associated with a contact account. Will need populate accountId when contacts fix this.
        return { contactId: selectedcontact === null || selectedcontact === void 0 ? void 0 : selectedcontact.id, accountId: '' };
    }
    setAddressDetails(addressGroup, address) {
        if (addressGroup) {
            if (isAddressTruthy(address)) {
                this.setAddress(addressGroup, address);
            }
        }
    }
    onManualEdit(search) {
        const bankaddressGroup = this.group.get(`${CounterPartyFields.creditorBank}.${CounterPartyFields.postalAddress}`);
        const banksAddressControls = this.options.isWizardMode
            ? this.getAddressFields(bankaddressGroup)
            : [bankaddressGroup];
        this.accountNameControl.patchValue(search);
        this.manualEdit$.next(true);
        this.manualEditControl.setValue(true);
        this.saveNewContactControl.setValue(true);
        this.setValue(this.arrangementIdControl, '');
        this.selectedBeneficiaryControl.reset();
        this.resetControls([
            this.group.controls[CounterPartyFields.accountNumber],
            this.group.get(`${CounterPartyFields.creditorBank}.${CounterPartyFields.bankName}`),
            this.group.get(`${CounterPartyFields.creditorBank}.${CounterPartyFields.bankBranchCode}`),
            this.group.get(`${CounterPartyFields.creditorBank}.${CounterPartyFields.bic}`),
            this.group.get(CounterPartyFields.postalAddress),
            this.selectedContactControl,
            ...banksAddressControls,
        ]);
        this.setDefaultCountry();
        this.visibilityService.showItems(this.config.parent);
        this.showDependantFields();
    }
    setDefaultCountry() {
        var _a, _b;
        const defaultCountry = this.options.isWizardMode
            ? {
                country: (_b = (_a = this.group.parent) === null || _a === void 0 ? void 0 : _a.get(HiddenFields.defaultCountry)) === null || _b === void 0 ? void 0 : _b.value,
            }
            : null;
        const beneficiaryBankAddressGroup = this.group.get(`${CounterPartyFields.creditorBank}.${CounterPartyFields.postalAddress}`);
        this.setAddress(beneficiaryBankAddressGroup, Object.assign({}, defaultCountry), true);
    }
    onSearchBlur(value) {
        this.accountNameControl.patchValue(value);
        if (!this.accountNameControl.touched) {
            this.accountNameControl.markAsTouched();
        }
    }
    getAddressFields(bankaddressGroup) {
        const addressControls = [];
        if (bankaddressGroup) {
            for (const controlName in bankaddressGroup.controls) {
                if (bankaddressGroup.controls.hasOwnProperty(controlName)) {
                    const control = bankaddressGroup.controls[controlName];
                    if (controlName !== CounterPartyFields.country) {
                        addressControls.push(control);
                    }
                }
            }
        }
        return addressControls;
    }
    resetControls(controls) {
        controls.forEach((control) => {
            if (control) {
                control.reset();
            }
        });
    }
    showDependantFields() {
        var _a;
        if ((_a = this.config.options) === null || _a === void 0 ? void 0 : _a.dependants) {
            this.visibilityService.showItems(this.config.parent, this.config.options.dependants);
        }
    }
    hideDependantFields() {
        var _a;
        if ((_a = this.config.options) === null || _a === void 0 ? void 0 : _a.dependants) {
            this.visibilityService.hideItems(this.config.parent, this.config.options.dependants);
        }
    }
    getBeneficiaryAddress(contact) {
        return {
            addressLine1: contact.addressLine1,
            addressLine2: contact.addressLine2,
            streetName: contact.streetName,
            town: contact.town,
            postCode: contact.postCode,
            countrySubDivision: contact.countrySubDivision,
            country: contact.country,
        };
    }
    getAccountHolderAddress(account) {
        return getAccountHolderAddress(account);
    }
    getContactBankAddress(account) {
        return getContactBankAddress(account);
    }
    setAddress(addressGroup, addressInfo, isBankAddress = false) {
        if (addressGroup) {
            if (isAddressTruthy(addressInfo) || isBankAddress) {
                addressGroup.patchValue({
                    addressLine1: addressInfo.addressLine1,
                    addressLine2: addressInfo.addressLine2,
                    streetName: addressInfo.streetName,
                    town: addressInfo.town,
                    postCode: addressInfo.postCode,
                    countrySubDivision: addressInfo.countrySubDivision,
                    country: addressInfo.country,
                });
            }
            else {
                for (const controlName in addressGroup.controls) {
                    if (!(isBankAddress &&
                        this.options.retainBankCountry &&
                        controlName === 'country')) {
                        addressGroup.controls[controlName].reset();
                    }
                }
            }
        }
    }
    setValue(control, value) {
        if (control) {
            if (value) {
                control.patchValue(value);
            }
            else {
                control.reset();
            }
        }
    }
    onClearValue(value) {
        this.setValue(this.beneficiaryAccountNameControl, value);
    }
    isBeneficiaryDisabled() {
        return ((this.isClosedPaymentControl.value &&
            !this.enableBeneficiaryControl.value) ||
            !!this.arrangementIdControl.value);
    }
}
/** @nocollapse */ PayordBeneficiarySelectorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordBeneficiarySelectorComponent, deps: [{ token: i1.VisibilityService }, { token: i2.DeprecationsService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PayordBeneficiarySelectorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordBeneficiarySelectorComponent, selector: "bb-payord-beneficiary-selector", ngImport: i0, template: "<ng-container\n  *ngTemplateOutlet=\"\n    creditorTmpl;\n    context: { $implicit: options?.items$ | async }\n  \"\n></ng-container>\n\n<ng-template let-creditorDetails #creditorTmpl>\n  <div\n    class=\"form-group bb-dynamic-input\"\n    [ngClass]=\"options?.cssClasses\"\n    *ngIf=\"!config?.hidden\"\n    [formGroup]=\"group\"\n  >\n    <section class=\"payment-to form-group\">\n      <bb-beneficiary-selector-ui\n        [selectedItem]=\"{ name: accountNameControl?.value }\"\n        [placeholder]=\"options?.placeholder || ''\"\n        [tabs]=\"options?.tabs\"\n        [hasError]=\"accountNameControl?.touched && accountNameControl?.invalid\"\n        [totalAccounts]=\"creditorDetails?.totalCreditAccounts\"\n        [totalContacts]=\"creditorDetails?.totalContacts\"\n        [accounts]=\"creditorDetails?.accounts\"\n        [contacts]=\"creditorDetails?.contacts\"\n        [totalContactsItemsCount]=\"creditorDetails?.totalContactsItemsCount\"\n        [dropdownIcon]=\"options?.dropdownIcon || 'toggle-down'\"\n        [aria-label]=\"options?.ariaLabel || 'Toggle beneficiary list'\"\n        [title]=\"options?.label\"\n        [helperText]=\"options?.helperText\"\n        [search]=\"accountNameControl\"\n        [isManualEditDisabled]=\"options?.isManualEditDisabled\"\n        [isClosedPayment]=\"isClosedPaymentControl.value\"\n        [isBeneficiaryDisabled]=\"isBeneficiaryDisabled()\"\n        (fetchMoreItems)=\"onFetchMoreItems($event)\"\n        (searchValue)=\"onSearch($event)\"\n        (selectedAccount)=\"onSelectAccount($event)\"\n        (selectedContact)=\"onSelectContact($event)\"\n        (manualEdit)=\"onManualEdit($event)\"\n        (searchBlur)=\"onSearchBlur($event)\"\n        (clear)=\"onClearValue($event)\"\n        #beneficiarySelector\n      ></bb-beneficiary-selector-ui>\n\n      <bb-payord-validation-message\n        [control]=\"group?.controls['name']\"\n        [validationMessages]=\"options?.validationMessages\"\n        [label]=\"options?.label || 'Beneficiary name'\"\n      ></bb-payord-validation-message>\n\n      <div\n        class=\"bb-dynamic-input__desc bb-text-support bb-subtitle\"\n        *ngIf=\"options?.description\"\n        [textContent]=\"options?.description\"\n      ></div>\n    </section>\n    <ng-container *ngIf=\"!options?.isTemplateMode\">\n      <div\n        *ngIf=\"saveNewContactControl?.value || (manualEdit$ | async)\"\n        class=\"bb-block bb-block--md\"\n      >\n        <bb-input-checkbox-ui\n          [disabled]=\"!!isClosedPaymentControl.value\"\n          [formControlName]=\"saveContactControlName\"\n          [label]=\"options.saveNewContactLabel || 'Save as a new contact'\"\n          data-role=\"save-new-contact-checkbox\"\n        >\n        </bb-input-checkbox-ui>\n      </div>\n    </ng-container>\n  </div>\n</ng-template>\n", components: [{ type: i3.ӨBeneficiarySelectorUiComponent, selector: "bb-beneficiary-selector-ui", inputs: ["totalAccounts", "totalContacts", "totalContactsItemsCount", "contacts", "accounts", "tabs", "closeDropdownRequest$", "placeholder", "title", "helperText", "hasError", "aria-label", "dropdownIcon", "debounceTime", "selectedItem", "search", "isClosedPayment", "isBeneficiaryDisabled", "isManualEditDisabled"], outputs: ["selectedAccount", "selectedContact", "searchValue", "fetchMoreItems", "manualEdit", "searchBlur", "clear"] }, { type: i4.ValidationMessageComponent, selector: "bb-payord-validation-message", inputs: ["control", "validationMessages", "label", "id", "hideGeneric"] }, { type: i5.InputCheckboxComponent, selector: "bb-input-checkbox-ui", inputs: ["indeterminate"], outputs: ["indeterminateChange"] }], directives: [{ type: i6.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i6.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i7.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i7.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i7.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i7.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }], pipes: { "async": i6.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordBeneficiarySelectorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payord-beneficiary-selector',
                    templateUrl: 'payord-beneficiary-selector.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.VisibilityService }, { type: i2.DeprecationsService }]; } });
//# sourceMappingURL=payord-beneficiary-selector.component.js.map