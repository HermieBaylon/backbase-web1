import { HttpErrorResponse } from '@angular/common/http';
import { Component, ViewChild } from '@angular/core';
import { SchemeNames } from '@backbase/data-ang/payment-order';
import { BeneficiaryList, ContactScheme, CounterPartyFields, HiddenFields, ListState, PaymentFormFieldHooks, } from '@backbase/payment-orders-ang';
import { NgbDropdown } from '@ng-bootstrap/ng-bootstrap';
import { Subject } from 'rxjs';
import { debounceTime, map, takeUntil, tap } from 'rxjs/operators';
import { registerFormControl } from '../../helpers/form-helpers';
import { triggerHook } from '../../helpers/hooks-helpers';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/search-box";
import * as i2 from "@backbase/ui-ang/icon";
import * as i3 from "../validation-message/validation-message.component";
import * as i4 from "@backbase/ui-ang/empty-state";
import * as i5 from "@backbase/ui-ang/loading-indicator";
import * as i6 from "@angular/common";
import * as i7 from "@ng-bootstrap/ng-bootstrap";
import * as i8 from "@angular/forms";
import * as i9 from "@backbase/ui-ang/button";
export class PayordContactSelectorComponent {
    constructor() {
        this.listStateType = ListState;
        this.inputFocused = false;
        this.destroy$ = new Subject();
        this.searchQuery = '';
        this.defaultEmptyStateTitle = $localize `:@@payord.contact.selector.ui.contacts.nothing-found.label:No contacts`;
        this.defaultEmptyStateSubtitle = $localize `:@@payord.contact.selector.ui.contacts.nothing-found.subtitle:You don't have any contacts to be displayed.`;
        this.defaultErrorStateTitle = $localize `:@@payord.contact.selector.ui.contacts.error.label:Oops! Something went wrong`;
        this.defaultErrorStateSubtitle = $localize `:@@payord.contact.selector.ui.contacts.error.subtitle:We are unable to load your contacts Please try again.`;
    }
    ngOnInit() {
        this.registerFields();
        triggerHook(PaymentFormFieldHooks.onInit, this);
        this.listState = ListState.LOADING;
        this.contacts$ = this.options.items$.pipe(map((response) => response instanceof HttpErrorResponse ? null : response), map((contacts) => this.options.mapItems && (contacts === null || contacts === void 0 ? void 0 : contacts.length)
            ? this.options.mapItems(contacts)
            : contacts), map((contacts) => contacts === null || contacts === void 0 ? void 0 : contacts.map((contact) => (Object.assign(Object.assign({}, contact), { transferKey: this.getTransferEntry(contact) })))), tap((contacts) => {
            var _a, _b;
            this.setStatus(contacts);
            // Close dropdown if there is no result by search
            if (this.inputFocused && this.searchQuery) {
                contacts && contacts.length
                    ? (_a = this.dropdownItem) === null || _a === void 0 ? void 0 : _a.open()
                    : (_b = this.dropdownItem) === null || _b === void 0 ? void 0 : _b.close();
            }
        }));
        // Sets schemeName on value change in accountNumber field
        this.group.valueChanges
            .pipe(takeUntil(this.destroy$), debounceTime(1000), map(({ accountNumber }) => accountNumber))
            .subscribe(this.setScheme.bind(this));
    }
    registerFields() {
        registerFormControl(this.group, this.config.name, this.options.validators, this.options.asyncValidators, this.options.defaultValue);
        registerFormControl(this.group, CounterPartyFields.role, [], [], 'CREDITOR');
        registerFormControl(this.group, CounterPartyFields.selectedContact, [], []);
        registerFormControl(this.group, CounterPartyFields.schemeName);
        registerFormControl(this.group, HiddenFields.selectedBeneficiary);
    }
    fetchCreditorItems(params) {
        var _a;
        if ((_a = this.options) === null || _a === void 0 ? void 0 : _a.fetchItems$) {
            this.options.fetchItems$.next(params);
        }
    }
    onSelectContact(_event, contact) {
        var _a, _b, _c, _d, _e;
        (_a = this.group.get(this.config.name)) === null || _a === void 0 ? void 0 : _a.patchValue(contact.name);
        (_b = this.group
            .get(CounterPartyFields.accountNumber)) === null || _b === void 0 ? void 0 : _b.patchValue((_c = this.getTransferEntry(contact)) === null || _c === void 0 ? void 0 : _c.value);
        (_d = this.group.get([HiddenFields.selectedBeneficiary])) === null || _d === void 0 ? void 0 : _d.patchValue(contact);
        (_e = this.dropdownItem) === null || _e === void 0 ? void 0 : _e.close();
        this.setContactId(contact);
    }
    handleSearch(query) {
        var _a;
        if (this.inputFocused) {
            this.searchQuery = query;
            this.fetchCreditorItems({
                params: { query },
                type: BeneficiaryList.CONTACTS,
            });
            if (!query) {
                (_a = this.dropdownItem) === null || _a === void 0 ? void 0 : _a.close();
            }
        }
    }
    setStatus(contacts) {
        if (!contacts) {
            this.listState = ListState.ERROR;
        }
        else if (!contacts.length) {
            this.listState = ListState.EMPTY;
        }
        else if (contacts.length) {
            this.listState = ListState.LIST;
        }
    }
    onClear() {
        var _a;
        (_a = this.group.get(this.config.name)) === null || _a === void 0 ? void 0 : _a.reset();
        this.fetchCreditorItems({ type: BeneficiaryList.CONTACTS });
    }
    focusHandler() {
        this.inputFocused = true;
    }
    onBlur() {
        this.inputFocused = false;
    }
    setContactId(contact) {
        var _a;
        (_a = this.group
            .get([CounterPartyFields.selectedContact])) === null || _a === void 0 ? void 0 : _a.patchValue({ contactId: contact === null || contact === void 0 ? void 0 : contact.id });
    }
    /**
     * Sets schemeName for payment order request payload
     * Checks entered value with regex pattern to detect if it is email, phone number or accountNumber
     */
    setScheme(counterPartyIdentification) {
        var _a;
        if (!counterPartyIdentification)
            return;
        const scheme = (_a = this.options.contactSchemes) === null || _a === void 0 ? void 0 : _a.find(({ regex }) => regex === null || regex === void 0 ? void 0 : regex.test(counterPartyIdentification));
        let schemeValue;
        switch (scheme === null || scheme === void 0 ? void 0 : scheme.name) {
            case ContactScheme.email:
                schemeValue = SchemeNames.EMAIL;
                break;
            case ContactScheme.phoneNumber:
                schemeValue = SchemeNames.MOBILE;
                break;
            case ContactScheme.accountNumber:
                schemeValue = SchemeNames.BBAN;
                break;
        }
        if (schemeValue) {
            this.group.controls[CounterPartyFields.schemeName].patchValue(schemeValue, { emitEvent: false });
        }
    }
    /**
     * Return first scheme value of contact. That allows customer to prioritize either email, phone number or account number for a contact.
     * For instance [email, phoneNumber] will return mail if there is a mail value in contact item, otherwise will check phoneNumber.
     * This is
     */
    getTransferEntry(contact) {
        var _a, _b;
        const defaultScheme = ContactScheme.accountNumber;
        const firstScheme = ((_b = (_a = this.options.contactSchemes) === null || _a === void 0 ? void 0 : _a.find((scheme) => !!contact.accounts[0][scheme.name])) === null || _b === void 0 ? void 0 : _b.name) || defaultScheme;
        return { scheme: firstScheme, value: contact.accounts[0][firstScheme] };
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
        triggerHook(PaymentFormFieldHooks.onDestroy, this);
    }
}
/** @nocollapse */ PayordContactSelectorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordContactSelectorComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PayordContactSelectorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordContactSelectorComponent, selector: "bb-payord-contact-selector", viewQueries: [{ propertyName: "dropdownItem", first: true, predicate: ["dd"], descendants: true }], ngImport: i0, template: "<div\n  class=\"form-group bb-dynamic-input\"\n  [ngClass]=\"options?.cssClasses\"\n  *ngIf=\"!config?.hidden\"\n>\n  <label *ngIf=\"options?.label\" [for]=\"'payord-contact-selector-search-box'\"\n    >{{ options?.label }}\n  </label>\n\n  <div\n    ngbDropdown\n    #dd=\"ngbDropdown\"\n    class=\"full-width-typeahead bb-payment-card-state bb-block bb-block--md\"\n  >\n    <span\n      class=\"bb-dynamic-input__helper-text bb-text-support\"\n      *ngIf=\"options?.helperText\"\n      [attr.id]=\"'payord-contact-selector__helper-text'\"\n      [textContent]=\"options?.helperText\"\n    >\n    </span>\n\n    <bb-search-box-ui\n      ngbDropdownAnchor\n      (clear)=\"onClear()\"\n      (focus)=\"focusHandler()\"\n      (blur)=\"onBlur()\"\n      [formControl]=\"group.controls[config.name]\"\n      [placeholder]=\"options?.placeholder\"\n      [squareBorder]=\"options?.squareBorder\"\n      [autocomplete]=\"options?.autocomplete || 'off'\"\n      (ngModelChange)=\"handleSearch(group.controls[config.name].value)\"\n      [showClear]=\"true\"\n      [id]=\"'payord-contact-selector-search-box'\"\n      [attr.data-role]=\"'contact-selector-search-box'\"\n    >\n      <button\n        bbButton\n        ngbDropdownToggle\n        color=\"unstyled\"\n        [attr.aria-label]=\"'contact dropdown button'\"\n      >\n        <bb-icon-ui name=\"contacts\"></bb-icon-ui>\n      </button>\n    </bb-search-box-ui>\n\n    <div\n      ngbDropdownMenu\n      class=\"dropdown-menu bb-product-selector__dropdown-menu dropdown-menu-right pre-scrollable-typeahead\"\n    >\n      <div class=\"dropdown-menu-inner-container\">\n        <!-- CONTACTS -->\n        <ng-container *ngIf=\"contacts$ | async as contacts\">\n          <ng-container *ngIf=\"listState === listStateType.LIST\">\n            <ng-container *ngFor=\"let contact of contacts\">\n              <ng-container\n                *ngTemplateOutlet=\"contactTemp; context: { $implicit: contact }\"\n              >\n              </ng-container>\n            </ng-container>\n          </ng-container>\n        </ng-container>\n        <!-- TODO UPDATE EMPTY AND ERROR STATES -->\n        <ng-container *ngIf=\"listState === listStateType.ERROR\">\n          <ng-container *ngTemplateOutlet=\"errorState\"></ng-container>\n        </ng-container>\n        <ng-container *ngIf=\"listState === listStateType.EMPTY\">\n          <ng-container *ngTemplateOutlet=\"emptyState\"></ng-container>\n        </ng-container>\n        <ng-container *ngIf=\"listState === listStateType.LOADING\">\n          <ng-container *ngTemplateOutlet=\"loading\"></ng-container>\n        </ng-container>\n      </div>\n    </div>\n    <bb-payord-validation-message\n      [control]=\"group?.controls[config.name]\"\n      [validationMessages]=\"options?.validationMessages\"\n      [label]=\"options?.label || 'Beneficiary name'\"\n    ></bb-payord-validation-message>\n  </div>\n</div>\n\n<ng-template #contactTemp let-contact>\n  <button\n    role=\"menuitem\"\n    type=\"button\"\n    class=\"bb-stack\"\n    (click)=\"onSelectContact($event, contact)\"\n    ngbDropdownItem\n  >\n    <div class=\"bb-stack__item\">\n      <span class=\"sr-only\" i18n=\"@@payord.contact.selector.ui.group.contacts\"\n        >Contact</span\n      >\n      <bb-icon-ui\n        size=\"xl\"\n        class=\"bb-stack text-muted\"\n        name=\"account-box\"\n      ></bb-icon-ui>\n    </div>\n\n    <div\n      class=\"text-left bb-stack__item\"\n      *ngIf=\"contact?.transferKey as transferKey\"\n    >\n      <span\n        class=\"sr-only\"\n        i18n=\"@@payord.contact.selector.ui.contact.account.name.label\"\n        id=\"contact_accountNameLabel\"\n      >\n        Contact name:\n      </span>\n      <div attr.aria-labelledby=\"contact_accountNameLabel\" class=\"bb-text-bold\">\n        {{ contact?.name }}\n      </div>\n      <span\n        class=\"sr-only\"\n        i18n=\"@@payord.contact.selector.ui.contact.account.number.label\"\n        id=\"contact_accountNumberLabel\"\n      >\n        { transferKey.scheme, select, accountNumber { Account Number } email {\n        Email } phoneNumber { Phone Number } }\n      </span>\n      <div\n        class=\"text-dark\"\n        *ngIf=\"contact?.accounts[0]?.accountNumber\"\n        attr.aria-labelledby=\"contact_accountNumberLabel\"\n        class=\"bb-subtitle bb-text-support\"\n      >\n        {{ transferKey.value }}\n      </div>\n    </div>\n  </button>\n</ng-template>\n\n<ng-template #emptyState>\n  <bb-empty-state-ui\n    data-role=\"contacts-empty-state\"\n    iconSize=\"xxl\"\n    class=\"bb-state-container\"\n    iconModifier=\"contacts\"\n    [title]=\"options?.emptyStateTitle || defaultEmptyStateTitle\"\n    [subtitle]=\"options?.emptyStateSubtitle || defaultEmptyStateSubtitle\"\n  >\n  </bb-empty-state-ui>\n</ng-template>\n<ng-template #errorState>\n  <bb-empty-state-ui\n    data-role=\"contacts-error-state\"\n    iconSize=\"xxl\"\n    class=\"bb-state-container\"\n    iconModifier=\"error-outline\"\n    [title]=\"options?.errorStateTitle || defaultErrorStateTitle\"\n    [subtitle]=\"options?.errorStateSubtitle || defaultErrorStateSubtitle\"\n  >\n  </bb-empty-state-ui>\n</ng-template>\n\n<ng-template #loading>\n  <div class=\"bb-state-container\">\n    <bb-loading-indicator-ui loaderSize=\"md\"></bb-loading-indicator-ui>\n  </div>\n</ng-template>\n", components: [{ type: i1.SearchBoxComponent, selector: "bb-search-box-ui", inputs: ["placeholder", "maxLength", "squareBorder", "typeaheadOptions", "showSearch", "showClear", "searchLabel", "clearLabel", "autocomplete"], outputs: ["submit", "clear", "valueChange"] }, { type: i2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i3.ValidationMessageComponent, selector: "bb-payord-validation-message", inputs: ["control", "validationMessages", "label", "id", "hideGeneric"] }, { type: i4.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }, { type: i5.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }], directives: [{ type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i6.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i7.NgbDropdown, selector: "[ngbDropdown]", inputs: ["open", "placement", "container", "autoClose", "display", "dropdownClass"], outputs: ["openChange"], exportAs: ["ngbDropdown"] }, { type: i7.NgbDropdownAnchor, selector: "[ngbDropdownAnchor]" }, { type: i8.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i8.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i9.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i7.NgbDropdownToggle, selector: "[ngbDropdownToggle]" }, { type: i7.NgbDropdownMenu, selector: "[ngbDropdownMenu]" }, { type: i6.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i6.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i7.NgbDropdownItem, selector: "[ngbDropdownItem]", inputs: ["disabled"] }], pipes: { "async": i6.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordContactSelectorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payord-contact-selector',
                    templateUrl: './payord-contact-selector.component.html',
                }]
        }], propDecorators: { dropdownItem: [{
                type: ViewChild,
                args: ['dd']
            }] } });
//# sourceMappingURL=payord-contact-selector.component.js.map