{"version":3,"file":"payord-schedule.component.js","sourceRoot":"","sources":["../../../../../../../libs/payord-form-builder-ang/src/lib/components/schedule/payord-schedule.component.ts","../../../../../../../libs/payord-form-builder-ang/src/lib/components/schedule/payord-schedule.component.html"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { FormGroup, Validators } from '@angular/forms';\nimport {\n  pastDateValidator,\n  requiredEndDateValidator,\n  requiredEndTypeValidator,\n  requiredAfterValidator,\n} from '@backbase/payment-orders-ang';\nimport {\n  PaymentFormField,\n  PaymentFormFieldConfig,\n  PaymentFormFieldOptions,\n  ScheduleFields,\n  PaymentFormFieldHooks,\n  endTypes,\n  ScheduleItem,\n} from '@backbase/payment-orders-ang';\nimport { registerFormControl } from '../../helpers/form-helpers';\nimport { triggerHook } from '../../helpers/hooks-helpers';\n\n@Component({\n  selector: 'bb-payord-schedule',\n  templateUrl: './payord-schedule.component.html',\n})\nexport class PayordScheduleComponent\n  implements OnInit, PaymentFormField, OnDestroy\n{\n  options!: PaymentFormFieldOptions;\n  config!: PaymentFormFieldConfig;\n  group!: FormGroup;\n  scheduleGroup!: FormGroup;\n  defaultMinOcccurs = 2;\n  defaultMaxOcccurs = 100;\n\n  ngOnInit() {\n    this.registerFields(\n      this.initScheduleFields(this.options.minOccurs, this.options.maxOccurs)\n    );\n    triggerHook(PaymentFormFieldHooks.onInit, this);\n  }\n\n  ngOnDestroy() {\n    triggerHook(PaymentFormFieldHooks.onDestroy, this);\n  }\n\n  initScheduleFields(minOccurs: number, maxOccurs: number) {\n    return {\n      [ScheduleFields.frequency]: [\n        { value: 'ONCE', every: '1' },\n        [Validators.required],\n      ],\n      [ScheduleFields.startDate]: [\n        new Date().toISOString(),\n        [Validators.required, pastDateValidator],\n      ],\n      [ScheduleFields.endDate]: [\n        new Date(\n          new Date().getFullYear(),\n          new Date().getMonth() + 1,\n          new Date().getDate()\n        ).toISOString(),\n        [requiredEndDateValidator, pastDateValidator],\n      ],\n      [ScheduleFields.repeat]: [\n        minOccurs || this.defaultMinOcccurs,\n        [\n          requiredAfterValidator,\n          Validators.compose([\n            Validators.min(minOccurs || this.defaultMinOcccurs),\n            Validators.max(maxOccurs || this.defaultMaxOcccurs),\n          ]),\n        ],\n      ],\n      [ScheduleFields.endType]: [endTypes.never, [requiredEndTypeValidator]],\n    };\n  }\n\n  registerFields(fields: { [key: string]: any[] }) {\n    for (const key in fields) {\n      if (fields.hasOwnProperty(key)) {\n        registerFormControl(\n          this.group,\n          key,\n          fields[key].pop(),\n          [],\n          fields[key].pop()\n        );\n      }\n    }\n  }\n\n  get scheduleLabelData(): ScheduleItem {\n    const { frequency, endDate, endType, repeat, startDate } = this.group.value;\n    let end = {};\n    switch (endType) {\n      case endTypes.on: {\n        end = { endDate };\n        break;\n      }\n      case endTypes.after: {\n        end = { repeat };\n        break;\n      }\n    }\n    return {\n      frequency,\n      endType,\n      startDate,\n      ...end,\n    };\n  }\n}\n","<ng-container *ngIf=\"!config?.hidden\">\n  <section\n    class=\"payment-schedule flex-row bb-dynamic-input\"\n    [ngClass]=\"options?.cssClasses\"\n  >\n    <fieldset class=\"bb-fieldset\">\n      <ng-container *ngIf=\"!config.options.collapsible; else collapsibleTmpl\">\n        <ng-container *ngTemplateOutlet=\"header\"></ng-container>\n        <hr class=\"mt-0\" />\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n      </ng-container>\n    </fieldset>\n  </section>\n  <ng-template #collapsibleTmpl>\n    <bb-collapsible-ui data-role=\"schedule-toggle\" #collapse>\n      <ng-template bbCollapsibleHeader let-toggle=\"toggle\" let-isOpen=\"isOpen\">\n        <div\n          [attr.aria-expanded]=\"isOpen\"\n          (click)=\"collapse.toggle()\"\n          class=\"bb-stack justify-content-between\"\n        >\n          <ng-container *ngTemplateOutlet=\"header\"></ng-container>\n          <button\n            bbButton\n            color=\"outline\"\n            (click)=\"collapse.toggle(); $event.stopPropagation()\"\n            aria-label=\"Schedule toggle\"\n          >\n            <bb-icon-ui\n              [name]=\"isOpen ? 'toggle-up' : 'toggle-down'\"\n            ></bb-icon-ui>\n          </button>\n        </div>\n        <hr class=\"mt-0\" />\n      </ng-template>\n      <ng-template bbCollapsibleBody>\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n      </ng-template>\n    </bb-collapsible-ui>\n  </ng-template>\n  <ng-template #header>\n    <legend>\n      <span class=\"bb-label\">\n        {{ options?.label || 'Schedule' }}\n      </span>\n      <span class=\"bb-text-support\">\n        (<bb-schedule-label-ui [item]=\"scheduleLabelData\"></bb-schedule-label-ui\n        >)\n      </span>\n    </legend>\n  </ng-template>\n\n  <ng-template #content>\n    <bb-schedule-ui\n      [scheduleForm]=\"group\"\n      [frequencies]=\"options?.frequencies\"\n      [minOccurs]=\"options?.minOccurs\"\n      [maxOccurs]=\"options?.maxOccurs\"\n      [formSubmitted]=\"group?.touched\"\n      data-role=\"payment-schedule\"\n    >\n    </bb-schedule-ui>\n  </ng-template>\n</ng-container>\n"]}