import { Component } from '@angular/core';
import { Validators } from '@angular/forms';
import { pastDateValidator, requiredEndDateValidator, requiredEndTypeValidator, requiredAfterValidator, } from '@backbase/payment-orders-ang';
import { ScheduleFields, PaymentFormFieldHooks, endTypes, } from '@backbase/payment-orders-ang';
import { registerFormControl } from '../../helpers/form-helpers';
import { triggerHook } from '../../helpers/hooks-helpers';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/collapsible";
import * as i2 from "@backbase/ui-ang/icon";
import * as i3 from "@backbase/payment-orders-ang";
import * as i4 from "@angular/common";
import * as i5 from "@backbase/ui-ang/button";
export class PayordScheduleComponent {
    constructor() {
        this.defaultMinOcccurs = 2;
        this.defaultMaxOcccurs = 100;
    }
    ngOnInit() {
        this.registerFields(this.initScheduleFields(this.options.minOccurs, this.options.maxOccurs));
        triggerHook(PaymentFormFieldHooks.onInit, this);
    }
    ngOnDestroy() {
        triggerHook(PaymentFormFieldHooks.onDestroy, this);
    }
    initScheduleFields(minOccurs, maxOccurs) {
        return {
            [ScheduleFields.frequency]: [
                { value: 'ONCE', every: '1' },
                [Validators.required],
            ],
            [ScheduleFields.startDate]: [
                new Date().toISOString(),
                [Validators.required, pastDateValidator],
            ],
            [ScheduleFields.endDate]: [
                new Date(new Date().getFullYear(), new Date().getMonth() + 1, new Date().getDate()).toISOString(),
                [requiredEndDateValidator, pastDateValidator],
            ],
            [ScheduleFields.repeat]: [
                minOccurs || this.defaultMinOcccurs,
                [
                    requiredAfterValidator,
                    Validators.compose([
                        Validators.min(minOccurs || this.defaultMinOcccurs),
                        Validators.max(maxOccurs || this.defaultMaxOcccurs),
                    ]),
                ],
            ],
            [ScheduleFields.endType]: [endTypes.never, [requiredEndTypeValidator]],
        };
    }
    registerFields(fields) {
        for (const key in fields) {
            if (fields.hasOwnProperty(key)) {
                registerFormControl(this.group, key, fields[key].pop(), [], fields[key].pop());
            }
        }
    }
    get scheduleLabelData() {
        const { frequency, endDate, endType, repeat, startDate } = this.group.value;
        let end = {};
        switch (endType) {
            case endTypes.on: {
                end = { endDate };
                break;
            }
            case endTypes.after: {
                end = { repeat };
                break;
            }
        }
        return Object.assign({ frequency,
            endType,
            startDate }, end);
    }
}
/** @nocollapse */ PayordScheduleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordScheduleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PayordScheduleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordScheduleComponent, selector: "bb-payord-schedule", ngImport: i0, template: "<ng-container *ngIf=\"!config?.hidden\">\n  <section\n    class=\"payment-schedule flex-row bb-dynamic-input\"\n    [ngClass]=\"options?.cssClasses\"\n  >\n    <fieldset class=\"bb-fieldset\">\n      <ng-container *ngIf=\"!config.options.collapsible; else collapsibleTmpl\">\n        <ng-container *ngTemplateOutlet=\"header\"></ng-container>\n        <hr class=\"mt-0\" />\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n      </ng-container>\n    </fieldset>\n  </section>\n  <ng-template #collapsibleTmpl>\n    <bb-collapsible-ui data-role=\"schedule-toggle\" #collapse>\n      <ng-template bbCollapsibleHeader let-toggle=\"toggle\" let-isOpen=\"isOpen\">\n        <div\n          [attr.aria-expanded]=\"isOpen\"\n          (click)=\"collapse.toggle()\"\n          class=\"bb-stack justify-content-between\"\n        >\n          <ng-container *ngTemplateOutlet=\"header\"></ng-container>\n          <button\n            bbButton\n            color=\"outline\"\n            (click)=\"collapse.toggle(); $event.stopPropagation()\"\n            aria-label=\"Schedule toggle\"\n          >\n            <bb-icon-ui\n              [name]=\"isOpen ? 'toggle-up' : 'toggle-down'\"\n            ></bb-icon-ui>\n          </button>\n        </div>\n        <hr class=\"mt-0\" />\n      </ng-template>\n      <ng-template bbCollapsibleBody>\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n      </ng-template>\n    </bb-collapsible-ui>\n  </ng-template>\n  <ng-template #header>\n    <legend>\n      <span class=\"bb-label\">\n        {{ options?.label || 'Schedule' }}\n      </span>\n      <span class=\"bb-text-support\">\n        (<bb-schedule-label-ui [item]=\"scheduleLabelData\"></bb-schedule-label-ui\n        >)\n      </span>\n    </legend>\n  </ng-template>\n\n  <ng-template #content>\n    <bb-schedule-ui\n      [scheduleForm]=\"group\"\n      [frequencies]=\"options?.frequencies\"\n      [minOccurs]=\"options?.minOccurs\"\n      [maxOccurs]=\"options?.maxOccurs\"\n      [formSubmitted]=\"group?.touched\"\n      data-role=\"payment-schedule\"\n    >\n    </bb-schedule-ui>\n  </ng-template>\n</ng-container>\n", components: [{ type: i1.CollapsibleComponent, selector: "bb-collapsible-ui", inputs: ["recreateBodyContent", "hasChevron", "isOpen"], outputs: ["isOpenChange"] }, { type: i2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i3.ӨScheduleLabelComponent, selector: "bb-schedule-label-ui", inputs: ["item"] }, { type: i3.ScheduleComponent, selector: "bb-schedule-ui", inputs: ["frequencies", "minOccurs", "maxOccurs", "scheduleForm", "formSubmitted"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i4.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i1.CollapsibleHeaderDirective, selector: "ng-template[bbCollapsibleHeader]" }, { type: i5.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i1.CollapsibleBodyDirective, selector: "ng-template[bbCollapsibleBody]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordScheduleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payord-schedule',
                    templateUrl: './payord-schedule.component.html',
                }]
        }] });
//# sourceMappingURL=payord-schedule.component.js.map