import { Component, ChangeDetectionStrategy, } from '@angular/core';
import { PaymentFormFieldHooks, PaymentBaseFields, RemittanceInfoFields, } from '@backbase/payment-orders-ang';
import { pluck } from 'rxjs/operators';
import { triggerHook } from '../../helpers/hooks-helpers';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/header";
import * as i2 from "@angular/common";
export class PayordHeaderComponent {
    ngOnInit() {
        var _a;
        const remittanceInfoForm = (_a = this.group.parent) === null || _a === void 0 ? void 0 : _a.get(PaymentBaseFields.remittanceInfo);
        this.headerAddition$ = remittanceInfoForm === null || remittanceInfoForm === void 0 ? void 0 : remittanceInfoForm.valueChanges.pipe(pluck(RemittanceInfoFields.amountOptionLabel));
        triggerHook(PaymentFormFieldHooks.onInit, this);
    }
    ngOnDestroy() {
        triggerHook(PaymentFormFieldHooks.onDestroy, this);
    }
}
/** @nocollapse */ PayordHeaderComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordHeaderComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PayordHeaderComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordHeaderComponent, selector: "bb-payord-header-ui", ngImport: i0, template: "<div [ngClass]=\"options?.cssClasses\" *ngIf=\"!config?.hidden\">\n  <div class=\"bb-stack\">\n    <bb-header-ui\n      [headingType]=\"options.headingType\"\n      [heading]=\"options.heading\"\n      [headingClasses]=\"options?.headingClasses\"\n    >\n    </bb-header-ui>\n    <span\n      class=\"bb-text-support bb-highlight bb-highlight--regular\"\n      *ngIf=\"headerAddition$ | async as headerAddition\"\n    >\n      &nbsp;- {{ headerAddition }}\n    </span>\n  </div>\n  <hr *ngIf=\"options?.separatorLine\" class=\"bb-schedule-header__sepatator\" />\n</div>\n", components: [{ type: i1.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], pipes: { "async": i2.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordHeaderComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payord-header-ui',
                    templateUrl: './payord-header.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }] });
//# sourceMappingURL=payord-header.component.js.map