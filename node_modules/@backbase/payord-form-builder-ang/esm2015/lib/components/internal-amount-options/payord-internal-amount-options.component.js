import { getLocaleNumberSymbol, NumberSymbol } from '@angular/common';
import { Component, Inject, LOCALE_ID } from '@angular/core';
import { Validators } from '@angular/forms';
import { PaymentFormFieldHooks, PaymentBaseFields, ProductKinds, RemittanceInfoFields, } from '@backbase/payment-orders-ang';
import { StateService, PaymentState } from '@backbase/payment-orders-ang';
import BigNumber from 'bignumber.js';
import { pluck, tap, startWith, distinctUntilChanged, filter, } from 'rxjs/operators';
import { registerFormControl } from '../../helpers/form-helpers';
import { mapLocalize } from '../../helpers/generic-utils';
import { triggerHook } from '../../helpers/hooks-helpers';
import { ActivatableFormField } from '../../models/activatable-form-field';
import { VisibilityService } from '../../services/visibility.service';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/payment-orders-ang";
import * as i2 from "../../services/visibility.service";
import * as i3 from "../validation-message/validation-message.component";
import * as i4 from "@backbase/ui-ang/input-radio-group";
import * as i5 from "@backbase/ui-ang/amount";
import * as i6 from "@backbase/ui-ang/amount-input";
import * as i7 from "@angular/common";
import * as i8 from "@angular/forms";
import * as i9 from "@backbase/ui-ang/highlight";
export class PayordInternalAmountOptionsComponent extends ActivatableFormField {
    constructor(stateService, visibilityService, locale) {
        super(visibilityService);
        this.stateService = stateService;
        this.locale = locale;
        this.productKinds = ProductKinds;
        this.remittanceInfoFields = RemittanceInfoFields;
        this.touched = false;
        this.id = `bb-compact-amount-${new Date().getTime()}`;
        this.groupSeparator = getLocaleNumberSymbol(this.locale, NumberSymbol.CurrencyGroup);
        this.decimalSeparator = getLocaleNumberSymbol(this.locale, NumberSymbol.CurrencyDecimal);
        this.format = {
            groupSeparator: this.groupSeparator,
            decimalSeparator: this.decimalSeparator,
            groupSize: 3,
        };
    }
    ngOnInit() {
        var _a, _b, _c, _d;
        this.registerFields();
        triggerHook(PaymentFormFieldHooks.onInit, this);
        this.control = this.group.controls[this.config.name];
        this.listenAmountOptionChanges();
        this.toAccountProduct$ = (_b = (_a = this.group.parent) === null || _a === void 0 ? void 0 : _a.get(PaymentBaseFields.counterparty)) === null || _b === void 0 ? void 0 : _b.valueChanges.pipe(startWith((_d = (_c = this.group.parent) === null || _c === void 0 ? void 0 : _c.get(PaymentBaseFields.counterparty)) === null || _d === void 0 ? void 0 : _d.value), pluck('accountData'), filter((account) => !!account), distinctUntilChanged((prev, curr) => prev.id === curr.id), tap((account) => {
            var _a, _b, _c, _d;
            const optionValue = (_a = this.control) === null || _a === void 0 ? void 0 : _a.value;
            if (optionValue || optionValue === 0) {
                if (this.stateService.currentState !== PaymentState.EDIT) {
                    (_b = this.control) === null || _b === void 0 ? void 0 : _b.reset();
                    this.group.controls[RemittanceInfoFields.amountOptionLabel].reset();
                    this.group.controls[RemittanceInfoFields.amountCurrencyGroup].reset();
                    this.group.controls['scheduleFrequency'].reset();
                    this.group.controls['showFrequencySwitch'].reset();
                }
                this.customAmount = new BigNumber((_c = this.group.controls[RemittanceInfoFields.amountCurrencyGroup].value) === null || _c === void 0 ? void 0 : _c.amount).toFormat(this.format);
            }
            this.toggleDependants();
            this.toAccountDefaultRecord = account.defaultRecord;
            this.setAmountOptions(account);
            this.stateService.setPaymentState(PaymentState.INITIAL);
            if (this.options.noBalanceText) {
                if (this.isAmountOptionsZero(account) && this.control) {
                    this.group.removeControl(this.config.name);
                }
                else if (!this.control) {
                    registerFormControl(this.group, this.config.name, [Validators.required], this.options.asyncValidators);
                    this.listenAmountOptionChanges();
                }
            }
            if (account.currency) {
                (_d = this.group
                    .get(`${RemittanceInfoFields.amountCurrencyGroup}.${RemittanceInfoFields.currency}`)) === null || _d === void 0 ? void 0 : _d.patchValue(account.currency);
            }
        }));
    }
    ngOnDestroy() {
        var _a;
        triggerHook(PaymentFormFieldHooks.onDestroy, this);
        (_a = this.subscription$) === null || _a === void 0 ? void 0 : _a.unsubscribe();
    }
    registerFields() {
        registerFormControl(this.group, RemittanceInfoFields.amountOptionLabel);
        registerFormControl(this.group, this.config.name, this.options.validators, this.options.asyncValidators);
        registerFormControl(this.group, 'scheduleFrequency');
        registerFormControl(this.group, 'showFrequencySwitch');
    }
    /**
     * Method to handle selecting amount option
     *
     * @param [index] index of selected amount option
     */
    amountOptionChange(index) {
        var _a, _b, _c, _d;
        const option = ((_a = this.amountOptions) === null || _a === void 0 ? void 0 : _a[index]) || {};
        const label = option.label;
        const currency = (_b = this.toAccountDefaultRecord) === null || _b === void 0 ? void 0 : _b.currency;
        const amount = (_d = (_c = this.toAccountDefaultRecord) === null || _c === void 0 ? void 0 : _c[option.amountApiField || '']) === null || _d === void 0 ? void 0 : _d.toString();
        if (option.hasCustomAmountInput) {
            this.group.controls[RemittanceInfoFields.amountCurrencyGroup].reset({
                amount: '',
                currency,
            });
            this.group.controls[RemittanceInfoFields.amountOptionLabel].patchValue(label);
            this.group.controls['scheduleFrequency'].patchValue(option.scheduleFrequency);
            this.group.controls['showFrequencySwitch'].patchValue(option.showFrequencySwitch);
        }
        if (amount) {
            this.group.patchValue({
                [RemittanceInfoFields.amountCurrencyGroup]: { amount, currency },
                [RemittanceInfoFields.amountOptionLabel]: label,
                scheduleFrequency: option.scheduleFrequency,
                showFrequencySwitch: option.showFrequencySwitch,
            });
        }
        this.toggleDependants();
    }
    /**
     * Set amount options depend on selected product
     *
     * @param [product] selected account in counterParty product selector
     */
    setAmountOptions(product) {
        var _a;
        const { creditCard, loan } = ((_a = this.options) === null || _a === void 0 ? void 0 : _a.amountOptions) || {};
        switch (product.productKindName) {
            case ProductKinds.creditCard:
                this.amountOptions = (creditCard === null || creditCard === void 0 ? void 0 : creditCard.map(mapLocalize)) || [];
                break;
            case ProductKinds.loanAccount:
                this.amountOptions = (loan === null || loan === void 0 ? void 0 : loan.map(mapLocalize)) || [];
                break;
            default:
                this.amountOptions = [];
        }
    }
    isAmountOptionsZero(account) {
        var _a, _b;
        if (!((_a = this.amountOptions) === null || _a === void 0 ? void 0 : _a.length) || !account) {
            return;
        }
        return (_b = this.amountOptions) === null || _b === void 0 ? void 0 : _b.every((option) => {
            var _a;
            return (option === null || option === void 0 ? void 0 : option.amountApiField)
                ? Number((_a = account.defaultRecord) === null || _a === void 0 ? void 0 : _a[option.amountApiField]) === 0
                : true;
        });
    }
    listenAmountOptionChanges() {
        var _a, _b;
        this.subscription$ = (_a = this.control) === null || _a === void 0 ? void 0 : _a.valueChanges.pipe(startWith((_b = this.control) === null || _b === void 0 ? void 0 : _b.value), distinctUntilChanged(), filter((value) => (value || value === 0) &&
            this.stateService.currentState !== PaymentState.EDIT)).subscribe(this.amountOptionChange.bind(this));
    }
}
/** @nocollapse */ PayordInternalAmountOptionsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordInternalAmountOptionsComponent, deps: [{ token: i1.StateService }, { token: i2.VisibilityService }, { token: LOCALE_ID }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PayordInternalAmountOptionsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordInternalAmountOptionsComponent, selector: "bb-internal-amount-options", usesInheritance: true, ngImport: i0, template: "<ng-container *ngIf=\"toAccountProduct$ | async as product\">\n  <fieldset\n    class=\"bb-fieldset bb-amount-options\"\n    [ngClass]=\"options?.cssClasses\"\n    [formGroup]=\"group\"\n    *ngIf=\"!config?.hidden\"\n  >\n    <div\n      class=\"bb-block bb-block--md\"\n      *ngIf=\"\n        !(options?.noBalanceText && isAmountOptionsZero(product));\n        else noBalanceMessage\n      \"\n    >\n      <bb-payord-validation-message\n        id=\"amount-option-error-message\"\n        [control]=\"group.get(config.name)\"\n        [validationMessages]=\"options?.validationMessages\"\n        class=\"d-block bb-block bb-block--md\"\n      ></bb-payord-validation-message>\n      <bb-input-radio-group-ui\n        [formControlName]=\"config.name\"\n        [aria-describedby]=\"'amount-option-error-message'\"\n        [preselect]=\"options?.preselect\"\n        [horizontal]=\"options?.horizontal\"\n      >\n        <bb-input-radio-ui\n          *ngFor=\"let option of amountOptions; index as i\"\n          aria-labelledby=\"payord-amount-options-amount-{{\n            i\n          }} payord-amount-options-label-{{ i }}\"\n          aria-describedby=\"payord-amount-options-description-{{ i }}\"\n          [labelTemplate]=\"\n            option.hasCustomAmountInput ? otherTemplate : labelTemplate\n          \"\n          [labelTemplateContext]=\"[option, product, i]\"\n          [value]=\"i\"\n        ></bb-input-radio-ui>\n      </bb-input-radio-group-ui>\n    </div>\n    <ng-template #noBalanceMessage>\n      <div class=\"bb-block bb-block--md bb-amount-options__no-balance-text\">\n        {{ options?.noBalanceText }}\n      </div>\n    </ng-template>\n  </fieldset>\n</ng-container>\n\n<ng-template #labelTemplate let-context=\"labelTemplateContext\">\n  <div\n    class=\"bb-stack bb-stack--wrap\"\n    [ngClass]=\"options?.amountOptions?.cssClasses\"\n  >\n    <div class=\"bb-stack__item bb-stack__item--fill\">\n      <div attr.id=\"payord-amount-options-label-{{ context[2] }}\">\n        {{ context[0].label }}\n      </div>\n      <div *ngIf=\"context[0].description\">\n        <span\n          class=\"bb-text-support bb-subtitle bb-input-radio-group__radio-label\"\n          attr.id=\"payord-amount-options-description-{{ context[2] }}\"\n        >\n          {{ context[0].description }}\n        </span>\n      </div>\n    </div>\n    <div class=\"bb-stack__item bb-stack__break--sm-down\">\n      <bb-amount-ui\n        attr.id=\"payord-amount-options-amount-{{ context[2] }}\"\n        [amount]=\"context[1].defaultRecord[context[0].amountApiField]\"\n        [currency]=\"context[1].currency\"\n        [mapCurrency]=\"options?.mapCurrency !== false\"\n        [bbHighlight]=\"options?.highlight\"\n        [abbreviate]=\"options?.abbreviate\"\n        [showPlusSign]=\"options?.showPlusSign\"\n        [trailingZeroes]=\"options?.trailingZeroes !== false\"\n      ></bb-amount-ui>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #otherTemplate let-context=\"labelTemplateContext\">\n  <div\n    class=\"bb-amount-input__field--large bb-form-field bb-form-field--md\"\n    [ngClass]=\"options?.amountOptions?.cssClasses\"\n    [class.was-validated]=\"\n      touched &&\n      group.controls[remittanceInfoFields.amountCurrencyGroup].invalid\n    \"\n  >\n    <div>{{ context[0].label }}</div>\n    <div *ngIf=\"context[0].description\" class=\"bb-block bb-block--sm\">\n      <span\n        class=\"bb-text-support bb-subtitle bb-input-radio-group__radio-label\"\n      >\n        {{ context[0].description }}\n      </span>\n    </div>\n    <ng-container *ngIf=\"group.controls[config.name]?.value === context[2]\">\n      <div\n        class=\"position-relative\"\n        [formGroup]=\"group.controls[remittanceInfoFields.amountCurrencyGroup]\"\n      >\n        <bb-amount-input-ui\n          [formControlName]=\"remittanceInfoFields.amount\"\n          (focusout)=\"touched = true\"\n          [mapCurrency]=\"options?.showCurrencySymbol !== false\"\n          [wrapperClasses]=\"\n            options.wrapperClasses || 'bb-amount-input__field--large'\n          \"\n          [currency]=\"context[1].currency\"\n          [required]=\"true\"\n          [autoDecimal]=\"options.autoDecimal\"\n          [aria-describedby]=\"'compact-amount-error-message'\"\n          [placeholder]=\"options?.placeholder || '0.00'\"\n          [maxLength]=\"options?.maxLength\"\n        ></bb-amount-input-ui>\n      </div>\n      <bb-payord-validation-message\n        [id]=\"'compact-amount-error-message'\"\n        [control]=\"group.controls[remittanceInfoFields.amountCurrencyGroup]\"\n        [validationMessages]=\"options?.validationMessages\"\n      ></bb-payord-validation-message>\n    </ng-container>\n  </div>\n</ng-template>\n", components: [{ type: i3.ValidationMessageComponent, selector: "bb-payord-validation-message", inputs: ["control", "validationMessages", "label", "id", "hideGeneric"] }, { type: i4.InputRadioGroupComponent, selector: "bb-input-radio-group-ui", inputs: ["horizontal", "preselect", "name", "verticalAlign"] }, { type: i4.InputRadioComponent, selector: "bb-input-radio-ui", inputs: ["labelTemplate", "labelTemplateContext", "value", "label", "aria-label", "aria-labelledby", "aria-describedby", "role", "aria-activedescendant", "aria-expanded", "aria-invalid", "aria-owns", "disabled"] }, { type: i5.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: i6.AmountInputComponent, selector: "bb-amount-input-ui", inputs: ["placeholder", "maxLength", "wrapperClasses", "mapCurrency", "currency", "autoDecimal"] }], directives: [{ type: i7.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i7.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i8.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i8.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i8.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i8.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i7.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i9.HighlightDirective, selector: "[bbHighlight]", inputs: ["amount", "bbHighlight", "negativeClass", "positiveClass"] }, { type: i8.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }], pipes: { "async": i7.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordInternalAmountOptionsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-internal-amount-options',
                    templateUrl: './payord-internal-amount-options.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.StateService }, { type: i2.VisibilityService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [LOCALE_ID]
                }] }]; } });
//# sourceMappingURL=payord-internal-amount-options.component.js.map