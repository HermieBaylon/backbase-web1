import { Component, ElementRef } from '@angular/core';
import { PaymentFormFieldHooks, AddressType, focusErrorElement, PaymentBaseFields, CounterPartyFields, isAddressTruthy, } from '@backbase/payment-orders-ang';
import { registerFormGroup, registerFormControl, getParentForm, } from '../../helpers/form-helpers';
import { triggerHook } from '../../helpers/hooks-helpers';
import { of } from 'rxjs';
import { map } from 'rxjs/operators';
import { CountriesMap, ViewType } from '@backbase/payment-orders-ang';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/payment-orders-ang";
import * as i2 from "@angular/common";
export class PayordAddressComponent {
    constructor(elRef) {
        this.elRef = elRef;
        this.options = {};
        this.addressViewType = ViewType.FORM;
        this.initialAddress = {
            addressLine1: [''],
            addressLine2: [''],
            streetName: [''],
            postCode: [''],
            town: [''],
            countrySubDivision: [''],
        };
    }
    ngOnInit() {
        this.options.hideCountry =
            this.options.hideCountry ||
                (this.options.isWizardMode &&
                    this.options.addressType === AddressType['beneficiary bank']);
        this.countries$ =
            this.options.useSanctionedCountries || this.options.isWizardMode
                ? this.options.items$.pipe(map((items) => items.map(({ country }) => ({
                    value: country,
                    label: CountriesMap[country],
                }))))
                : of(this.options.countries);
        this.addressGroup = (registerFormGroup(this.group, this.config.name, this.initialAddress));
        if (!this.options.hideCountry) {
            registerFormControl(this.addressGroup, 'country');
        }
        this.addressViewType = isAddressTruthy(this.addressGroup.value)
            ? ViewType.CARD
            : ViewType.BUTTON;
        this.parentForm = getParentForm(this.group);
        this.counterpartyIdControl = (this.parentForm.get([
            PaymentBaseFields.counterparty,
            CounterPartyFields.id,
        ]));
        triggerHook(PaymentFormFieldHooks.onInit, this);
    }
    ngOnDestroy() {
        triggerHook(PaymentFormFieldHooks.onDestroy, this);
    }
    onAddressAdd() {
        this.addressViewType = ViewType.FORM;
    }
    onAddressEdit() {
        this.addressViewType = ViewType.FORM;
    }
    onAddressDelete() {
        var _a;
        this.addressViewType = ViewType.BUTTON;
        if (this.options.hideCountry || ((_a = this.options.options) === null || _a === void 0 ? void 0 : _a.length) === 1) {
            for (const key in this.addressGroup.controls) {
                if (key !== 'country') {
                    this.addressGroup.controls[key].reset();
                }
            }
        }
        else {
            this.addressGroup.reset();
        }
    }
    onAddressReset() {
        this.addressViewType = ViewType.BUTTON;
    }
    onAddressSubmit() {
        if (this.addressGroup.valid) {
            this.addressViewType = ViewType.CARD;
        }
        else {
            focusErrorElement(this.elRef.nativeElement);
        }
    }
}
/** @nocollapse */ PayordAddressComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordAddressComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PayordAddressComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordAddressComponent, selector: "bb-payord-address", ngImport: i0, template: "<div class=\"bb-dynamic-input\" [hidden]=\"config?.hidden\">\n  <div class=\"form-group\" [ngClass]=\"options?.cssClasses\">\n    <bb-address-item-details\n      [addressForm]=\"addressGroup\"\n      [addressType]=\"options?.addressType\"\n      [viewType]=\"options?.viewType || addressViewType\"\n      [isClosedPayment]=\"\n        parentForm.get('isClosedPayment')?.value || counterpartyIdControl?.value\n      \"\n      (add)=\"onAddressAdd()\"\n      (edit)=\"onAddressEdit()\"\n      (discard)=\"onAddressDelete()\"\n      (delete)=\"onAddressDelete()\"\n      (reset)=\"onAddressReset()\"\n      (submit)=\"onAddressSubmit()\"\n      [states]=\"options?.states\"\n      [countries]=\"countries$ | async\"\n      [hideCountry]=\"options?.hideCountry\"\n      [attr.data-role]=\"config?.name\"\n    >\n    </bb-address-item-details>\n  </div>\n</div>\n", components: [{ type: i1.ӨAddressDetailsComponent, selector: "bb-address-item-details", inputs: ["addressForm", "addressType", "address", "isContactAddressCopied", "states", "countries", "hideCountry", "viewType", "isClosedPayment"], outputs: ["submit", "reset", "discard", "delete", "edit", "add"] }], directives: [{ type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], pipes: { "async": i2.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordAddressComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payord-address',
                    templateUrl: './payord-address.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; } });
//# sourceMappingURL=payord-address.component.js.map