import { ChangeDetectorRef, Component, ElementRef, EventEmitter, NgZone, Renderer2, ViewChild, } from '@angular/core';
import { CreditDebitMixedIndicator, parseString, } from '@backbase/payment-orders-ang';
import { animationFrameScheduler, asapScheduler, fromEvent, Subject, } from 'rxjs';
import { addControlToFormArray, registerFormArray, } from '../../helpers/form-helpers';
import { auditTime, startWith, take, takeUntil } from 'rxjs/operators';
import { ViewportRuler } from '@angular/cdk/scrolling';
import '@angular/localize/init';
import * as i0 from "@angular/core";
import * as i1 from "@angular/cdk/scrolling";
import * as i2 from "@backbase/ui-ang/icon";
import * as i3 from "../validation-message/validation-message.component";
import * as i4 from "@backbase/ui-ang/amount-input";
import * as i5 from "@backbase/ui-ang/textarea";
import * as i6 from "@backbase/ui-ang/loading-indicator";
import * as i7 from "@backbase/ui-ang/amount";
import * as i8 from "@angular/forms";
import * as i9 from "@angular/common";
import * as i10 from "@backbase/ui-ang/button";
import * as i11 from "@ng-bootstrap/ng-bootstrap";
const SCROLL_SCHEDULER = typeof requestAnimationFrame !== 'undefined'
    ? animationFrameScheduler
    : asapScheduler;
export class MultiPaymentCardComponent {
    constructor(renderer, ngZone, viewportRuler, changeDetector) {
        this.renderer = renderer;
        this.ngZone = ngZone;
        this.viewportRuler = viewportRuler;
        this.changeDetector = changeDetector;
        this.fieldOptions = {};
        this.count = new EventEmitter();
        this.search = new EventEmitter();
        this.cardConfig = [
            {
                name: 'counterpartyName',
                validators: [],
            },
            {
                name: 'counterpartyAccountNumber',
                validators: [],
            },
            {
                name: 'id',
                validators: [],
            },
            { name: 'bankBranchCode' },
            { name: 'accountType' },
            { name: 'balance' },
            { name: 'currency' },
            { name: 'description', validators: [] },
            {
                name: 'amount',
                validators: [],
            },
        ];
        this.hostRef = this;
        this.viewportItems = [];
        this.destroy$ = new Subject();
        this._items = [];
        this.visibleItemsInViewport = 0;
        this.bufferedItems = 5;
        this.visibleViewport = 0;
        this.firstRenderedItemIndex = 0;
        this.accounts = [];
        this.defaultConfig = {
            counterpartyName: {
                label: '',
                validationMessageLabel: $localize `:@@multipayment-card.account.validation-message-label:Account`,
                placeholder: '',
                dropdownIcon: 'toggle-down',
                ariaLabel: $localize `:@@multipayment-card.counterparty-name.aria-label:Toggle beneficiary list`,
            },
            amount: {
                label: $localize `:@@multipayment-card.amount.label:Amount`,
                validationMessageLabel: $localize `:@@multipayment-card.amount.validation-message-label:Amount`,
                currency: 'USD',
                maxLength: 10,
                placeholder: '0.00',
            },
            description: {
                placeholder: $localize `:@@multipayment-card.description.placeholder:Enter text...`,
                minLength: 3,
                maxLength: 140,
            },
        };
        this.lastBlur = {
            timeoutId: 0,
            itemIndex: -1,
        };
    }
    ngOnInit() {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        this.fieldOptions = {
            counterpartyName: Object.assign(Object.assign({}, this.defaultConfig.counterpartyName), (_b = (_a = this.options) === null || _a === void 0 ? void 0 : _a.fieldsConfig) === null || _b === void 0 ? void 0 : _b.counterpartyName),
            amount: Object.assign(Object.assign({}, this.defaultConfig.amount), (_d = (_c = this.options) === null || _c === void 0 ? void 0 : _c.fieldsConfig) === null || _d === void 0 ? void 0 : _d.amount),
            description: Object.assign(Object.assign({}, this.defaultConfig.description), (_f = (_e = this.options) === null || _e === void 0 ? void 0 : _e.fieldsConfig) === null || _f === void 0 ? void 0 : _f.description),
        };
        this._addValidators();
        this.options.helperText = parseString(((_g = this.options) === null || _g === void 0 ? void 0 : _g.helperText) || '', (_h = this.options) === null || _h === void 0 ? void 0 : _h.maximumAllowedPayments);
        this.paymentArrayControl = registerFormArray(this.group, this.config.name, this.options.validators);
        const controls = this.paymentArrayControl.controls;
        controls.forEach((control) => this.setupItem(control));
        const len = Math.min(controls.length, this.bufferedItems * 2);
        for (let i = 0; i < len; i++) {
            this.addRenderedItem(controls[i], i);
        }
        this.scrollableElement = this.config.options.containerRef.nativeElement;
        this.paymentArrayControl.valueChanges
            .pipe(takeUntil(this.destroy$))
            .subscribe(() => {
            while (this.paymentArrayControl.length > this._items.length) {
                const currentIndex = this._items.length;
                const control = this.paymentArrayControl.at(currentIndex);
                this.setupItem(control);
                this.addRenderedItem(control, currentIndex);
            }
            this.onScrollChanged();
        });
        this.viewportRuler
            .change()
            .pipe(startWith(null), takeUntil(this.destroy$))
            .subscribe(() => {
            this.updateViewport();
            this.onScrollChanged();
        });
        this.ngZone.runOutsideAngular(() => {
            fromEvent(this.scrollableElement, 'scroll')
                .pipe(startWith(null), takeUntil(this.destroy$), auditTime(0, SCROLL_SCHEDULER))
                .subscribe(() => this.onScrollChanged());
        });
    }
    ngOnDestroy() {
        this.accounts.forEach((account) => account.search$.complete());
        this.destroy$.next();
        this.destroy$.complete();
    }
    addAccount() {
        this.setupItem();
        addControlToFormArray(this.paymentArrayControl, this.cardConfig);
        const currentIndex = this.paymentArrayControl.length - 1;
        const control = this.paymentArrayControl.at(currentIndex);
        this.addRenderedItem(control, currentIndex);
        this.count.emit(this.paymentArrayControl.length);
        this.onScrollChanged();
    }
    removeAccount(index) {
        if (this.options.paymentIdList[index]) {
            this.config.options
                .deletePayment(index)
                .pipe(take(1))
                .subscribe(() => {
                this.removeAccountAt(index);
            });
        }
        else {
            this.removeAccountAt(index);
        }
    }
    /**
     * will return form with given index in form Array
     *
     * @param index - form array index
     */
    getForm(index) {
        return this.paymentArrayControl.at(index);
    }
    /**
     *  method to get the form details.
     *
     * @param index form array index
     * @param name form field
     */
    getControl(index, name) {
        return this.paymentArrayControl.at(index).get(name);
    }
    /**
     * patch value on selecting account
     *
     * @param event -  the selected data
     * @param index - form Array index
     */
    onSelectAccount(event, index) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        (_a = this.getControl(index, 'id')) === null || _a === void 0 ? void 0 : _a.patchValue(event.id, { emitEvent: false });
        (_b = this.getControl(index, 'counterpartyName')) === null || _b === void 0 ? void 0 : _b.patchValue(event.name);
        (_c = this.getControl(index, 'counterpartyAccountNumber')) === null || _c === void 0 ? void 0 : _c.patchValue(event.accountNumber, { emitEvent: false });
        (_d = this.getControl(index, 'bankBranchCode')) === null || _d === void 0 ? void 0 : _d.patchValue(event.bankBranchCode, {
            emitEvent: false,
        });
        (_e = this.getControl(index, 'accountType')) === null || _e === void 0 ? void 0 : _e.patchValue(event.accountType, {
            emitEvent: false,
        });
        (_f = this.getControl(index, 'balance')) === null || _f === void 0 ? void 0 : _f.patchValue(event.balance, {
            emitEvent: false,
        });
        (_g = this.getControl(index, 'currency')) === null || _g === void 0 ? void 0 : _g.patchValue(event.currency, {
            emitEvent: false,
        });
        (_h = this.getControl(index, 'counterpartyName')) === null || _h === void 0 ? void 0 : _h.markAllAsTouched();
        (_j = this.getControl(index, 'counterpartyName')) === null || _j === void 0 ? void 0 : _j.markAsDirty();
        (_k = this.getControl(index, 'counterpartyName')) === null || _k === void 0 ? void 0 : _k.updateValueAndValidity();
        (_l = this.getControl(index, 'counterpartyAccountNumber')) === null || _l === void 0 ? void 0 : _l.updateValueAndValidity();
        this.cardBlur(index);
    }
    /**
     * Search query will emit search on account selector
     *
     * @param query
     */
    onSearch(index, query) {
        this.accounts[index].search$.next(query);
        this.search.emit(query);
    }
    openDescription(index) {
        var _a;
        this._items[index].expanded = true;
        (_a = this.getControl(index, 'description')) === null || _a === void 0 ? void 0 : _a.patchValue('', { onlySelf: true });
        this.onScrollChanged();
    }
    isExpanded(index) {
        return Boolean(this._items[index] && this._items[index].expanded);
    }
    /**
     * will emit call the blur hook if any
     *
     * @param index - form index
     */
    cardBlur(index) {
        this.lastBlur.itemIndex = index;
        this.ngZone.runOutsideAngular(() => {
            this.lastBlur.timeoutId = setTimeout(() => {
                const form = this.getForm(index);
                if (form.dirty && form.valid && this.config.options.paymentBlur) {
                    const formValue = form.value;
                    const payment = {
                        creditDebitIndicator: CreditDebitMixedIndicator.CREDIT,
                        counterpartyArrangementId: formValue.id,
                        counterpartyName: formValue.counterpartyName,
                        counterpartyAccountNumber: formValue.counterpartyAccountNumber,
                        counterpartyBankBranchCode: formValue.bankBranchCode,
                        instructedAmount: {
                            amount: formValue.amount,
                            currencyCode: formValue.currency,
                        },
                        description: formValue.description,
                    };
                    this.config.options
                        .paymentBlur(payment, index)
                        .pipe(take(1))
                        .subscribe((response) => {
                        form.markAsPristine();
                        this.changeDetector.detectChanges();
                    }, (error) => {
                        if ('message' in error) {
                            form.setErrors({
                                error: { name: 'error', message: error.message },
                            });
                        }
                        this.changeDetector.detectChanges();
                    });
                }
                if (this.options && this.options.hooks && this.options.hooks.onBlur) {
                    this.options.hooks.onBlur(form);
                }
            });
        });
    }
    cardFocus(index) {
        if (this.lastBlur.itemIndex === index) {
            clearTimeout(this.lastBlur.timeoutId);
        }
    }
    deleteDescription(index) {
        var _a, _b, _c;
        if ((_a = this.getControl(index, 'description')) === null || _a === void 0 ? void 0 : _a.value) {
            (_b = this.getControl(index, 'description')) === null || _b === void 0 ? void 0 : _b.markAsDirty();
        }
        (_c = this.getControl(index, 'description')) === null || _c === void 0 ? void 0 : _c.patchValue('');
        this._items[index].expanded = false;
        this.onScrollChanged();
    }
    onDropdownOpenChange(index, isOpen) {
        this._items[index].dropdownOpen = isOpen;
    }
    isDropdownOpen(index) {
        return this._items[index].dropdownOpen;
    }
    addRenderedItem(control, index) {
        this.viewportItems.push(control);
        this.changeDetector.detectChanges();
        this.cacheItemHeight(this.content.nativeElement.children[this.content.nativeElement.children.length - 1], index);
    }
    removeAccountAt(index) {
        this.paymentArrayControl.removeAt(index);
        this._items.splice(index, 1);
        this.updateVisibleItems();
        this.updateDimensions();
        this.count.emit(this.paymentArrayControl.length);
    }
    calculateAverageItemHeight() {
        if (this._items.length === 0) {
            return 0;
        }
        return Math.ceil(this._items.reduce((prev, curr) => prev + curr.height, 0) /
            this._items.length);
    }
    cacheItemHeight(item, index) {
        const currentItemHeight = this.getElementSize(item).height;
        this._items[index].height = currentItemHeight;
    }
    firstVisibleItemIndex() {
        if (this._items.length === 0) {
            return 0;
        }
        const scrollTop = this.scrollableElement.scrollTop;
        const contentScrollPosition = Math.max(0, scrollTop - this.scroll.nativeElement.offsetTop);
        let index = 0;
        let remainingScroll = contentScrollPosition - this._items[index].height;
        while (remainingScroll > 0 && index < this._items.length) {
            index += 1;
            remainingScroll -= this._items[index].height;
        }
        return index;
    }
    invalidateVisibleItemsCache() {
        const children = this.content.nativeElement.children;
        const itemsLength = this.content.nativeElement.children.length;
        for (let i = 0; i < itemsLength; ++i) {
            const internalIndex = this.firstRenderedItemIndex + i;
            this.cacheItemHeight(children[i], internalIndex);
        }
        this.changeDetector.markForCheck();
    }
    onScrollChanged() {
        this.ngZone.runOutsideAngular(() => {
            requestAnimationFrame(() => {
                this.invalidateVisibleItemsCache();
                this.updateVisibleItems();
                this.updateDimensions();
            });
        });
    }
    updateViewport() {
        this.ngZone.runOutsideAngular(() => {
            requestAnimationFrame(() => {
                const topOffset = Math.max(0, this.scroll.nativeElement.offsetTop - this.scrollableElement.scrollTop);
                /** @TODO get bottom offset dynamically */
                const bottomOffset = 100;
                this.visibleViewport =
                    this.scrollableElement.clientHeight - topOffset - bottomOffset;
            });
        });
    }
    updateVisibleItems() {
        const averageItemHeight = this.calculateAverageItemHeight();
        if (averageItemHeight > 0) {
            this.visibleItemsInViewport = Math.round(this.visibleViewport / this.calculateAverageItemHeight());
        }
        else {
            this.visibleItemsInViewport = 0;
        }
        this.firstRenderedItemIndex = Math.max(0, this.firstVisibleItemIndex() - this.bufferedItems);
        const renderedItemsLength = Math.min(this.visibleItemsInViewport + this.bufferedItems * 2, this.paymentArrayControl.controls.length);
        this.viewportItems = this.paymentArrayControl.controls.slice(this.firstRenderedItemIndex, this.firstRenderedItemIndex + renderedItemsLength);
        this.changeDetector.markForCheck();
        this.changeDetector.detectChanges();
    }
    updateDimensions() {
        const contentHeight = this.virtualViewportHeight();
        const padding = this._items
            .slice(0, this.firstRenderedItemIndex)
            .reduce((prev, curr) => prev + curr.height, 0);
        this.renderer.setStyle(this.padding.nativeElement, 'transform', `scaleY(${contentHeight})`);
        this.renderer.setStyle(this.scroll.nativeElement, 'height', `${contentHeight}px`);
        this.renderer.setStyle(this.content.nativeElement, 'transform', `translateY(${padding}px)`);
        this.changeDetector.markForCheck();
        this.changeDetector.detectChanges();
    }
    getElementSize(element) {
        const result = element.getBoundingClientRect();
        const styles = getComputedStyle(element);
        const marginTop = parseInt(styles['margin-top'], 10) || 0;
        const marginBottom = parseInt(styles['margin-bottom'], 10) || 0;
        const marginLeft = parseInt(styles['margin-left'], 10) || 0;
        const marginRight = parseInt(styles['margin-right'], 10) || 0;
        return {
            top: result.top + marginTop,
            bottom: result.bottom + marginBottom,
            left: result.left + marginLeft,
            right: result.right + marginRight,
            width: result.width + marginLeft + marginRight,
            height: result.height + marginTop + marginBottom,
        };
    }
    virtualViewportHeight() {
        return this._items.reduce((prev, curr) => prev + curr.height, 0);
    }
    _addValidators() {
        this.cardConfig.forEach((field) => {
            const name = field.name;
            if (this.fieldOptions[name]) {
                field.validators = this.fieldOptions[name].validators;
            }
        });
    }
    setupItem(control) {
        var _a, _b;
        const expanded = control
            ? (_b = (_a = control.get('description')) === null || _a === void 0 ? void 0 : _a.value) === null || _b === void 0 ? void 0 : _b.trim()
            : false;
        this._items.push({
            height: 0,
            expanded,
            dropdownOpen: false,
        });
        this.accounts.push(this.config.options.observableAccountsFactory());
    }
}
/** @nocollapse */ MultiPaymentCardComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: MultiPaymentCardComponent, deps: [{ token: i0.Renderer2 }, { token: i0.NgZone }, { token: i1.ViewportRuler }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ MultiPaymentCardComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: MultiPaymentCardComponent, selector: "bb-multi-payment-card", viewQueries: [{ propertyName: "scroll", first: true, predicate: ["scroll"], descendants: true, read: ElementRef, static: true }, { propertyName: "padding", first: true, predicate: ["padding"], descendants: true, read: ElementRef, static: true }, { propertyName: "content", first: true, predicate: ["content"], descendants: true, read: ElementRef, static: true }], ngImport: i0, template: "<div\n  class=\"form-group bb-dynamic-input\"\n  [formGroup]=\"group\"\n  [ngClass]=\"options?.cssClasses\"\n>\n  <div class=\"bb-block bb-block--lg\">\n    <div *ngIf=\"options?.label\" class=\"bb-heading-3\">\n      {{ options?.label }}\n    </div>\n    <div\n      *ngIf=\"options?.helperText\"\n      class=\"bb-dynamic-input__desc bb-text-support bb-subtitle\"\n    >\n      {{ options?.helperText }}\n    </div>\n  </div>\n\n  <div\n    class=\"row bb-block bb-block--md bb-subheader bb-subheader--regular bb-text-bold\"\n    *ngIf=\"paymentArrayControl.controls.length\"\n  >\n    <span class=\"col-6\">{{ fieldOptions?.counterpartyName?.header }}</span>\n    <span\n      class=\"col-4 d-none d-md-block\"\n      i18n=\"@@multipayment-card-column-header-ammount-title.label\"\n      >Amount (Credit)</span\n    >\n  </div>\n\n  <div #scroll class=\"virtual-scroll__container\">\n    <div #padding class=\"virtual-scroll__padding\"></div>\n    <div #content class=\"virtual-scroll__content\">\n      <ng-container [formArrayName]=\"hostRef.config?.name\">\n        <div\n          *ngFor=\"let group of viewportItems; let i = index\"\n          class=\"bb-block bb-block--md\"\n        >\n          <ng-container\n            *ngTemplateOutlet=\"\n              cardTemplate;\n              context: { group: group, index: firstRenderedItemIndex + i }\n            \"\n          ></ng-container>\n        </div>\n      </ng-container>\n    </div>\n  </div>\n\n  <div\n    class=\"text-center\"\n    *ngIf=\"\n      paymentArrayControl.controls.length < options?.maximumAllowedPayments\n    \"\n    data-role=\"add-account-card\"\n    [ngClass]=\"{\n      'border border-danger':\n        paymentArrayControl.controls.length === 0 && paymentArrayControl.touched\n    }\"\n  >\n    <button\n      bbButton\n      color=\"link\"\n      buttonSize=\"md\"\n      [attr.data-role]=\"'btn-icon-link-md-def'\"\n      (click)=\"addAccount()\"\n      class=\"m-2\"\n    >\n      <bb-icon-ui color=\"link\" name=\"add\" size=\"md\" cropped></bb-icon-ui>\n      <span\n        data-role=\"add-account\"\n        i18n=\"@@multipayment-card-button-text-add-account.text\"\n        >Add account</span\n      >\n    </button>\n  </div>\n\n  <bb-payord-validation-message\n    [control]=\"hostRef.paymentArrayControl\"\n    [validationMessages]=\"options.validationMessages\"\n    [hideGeneric]=\"true\"\n  ></bb-payord-validation-message>\n\n  <ng-template #cardTemplate let-group=\"group\" let-index=\"index\">\n    <div\n      class=\"card card-sm\"\n      [formGroup]=\"getForm(index)\"\n      (focusout)=\"cardBlur(index)\"\n      (focusin)=\"cardFocus(index)\"\n    >\n      <div class=\"card-body\">\n        <div\n          class=\"bb-block\"\n          [ngClass]=\"{ 'bb-block--sm': getForm(index)?.errors?.error }\"\n        >\n          <div\n            class=\"bb-stack bb-block\"\n            [ngClass]=\"{\n              'bb-block--sm':\n                isExpanded(index) &&\n                !getControl(index, 'counterpartyName')?.value,\n              'bb-block--md':\n                isExpanded(index) &&\n                getControl(index, 'counterpartyName')?.value\n            }\"\n          >\n            <div class=\"bb-stack__item bb-stack__item--fill\">\n              <div class=\"row\">\n                <div class=\"col-md-6 bb-block--md-md-down\">\n                  <bb-beneficiary-selector\n                    [selectedItem]=\"{\n                      name: getControl(index, 'counterpartyName')?.value\n                    }\"\n                    [placeholder]=\"fieldOptions?.counterpartyName?.placeholder\"\n                    [dropdownIcon]=\"\n                      fieldOptions?.counterpartyName?.dropdownIcon\n                    \"\n                    [aria-label]=\"fieldOptions?.counterpartyName?.ariaLabel\"\n                    [title]=\"fieldOptions?.counterpartyName?.label\"\n                    [debounceTime]=\"\n                      fieldOptions?.counterpartyName?.debounceTime\n                    \"\n                    [hasError]=\"\n                      getControl(index, 'counterpartyName')?.touched &&\n                      getControl(index, 'counterpartyName')?.invalid\n                    \"\n                    [helperText]=\"fieldOptions?.counterpartyName?.helperText\"\n                    [selectedItemTemplate]=\"selectedItemtemplate\"\n                    [listItemTemplate]=\"listItemtemplate\"\n                    (searchValue)=\"onSearch(index, $event)\"\n                    (selectedAccount)=\"onSelectAccount($event, index)\"\n                    (searchBlur)=\"\n                      getControl(index, 'counterpartyName').markAsTouched()\n                    \"\n                    (dropdownOpenChange)=\"onDropdownOpenChange(index, $event)\"\n                    [clearSearchOnselect]=\"true\"\n                    #beneficiarySelector\n                  ></bb-beneficiary-selector>\n                  <bb-payord-validation-message\n                    [control]=\"getControl(index, 'counterpartyName')\"\n                    [validationMessages]=\"\n                      fieldOptions?.counterpartyName?.validationMessages\n                    \"\n                    [label]=\"\n                      fieldOptions?.counterpartyName?.validationMessageLabel\n                    \"\n                  ></bb-payord-validation-message>\n                </div>\n                <div class=\"col-md-4\">\n                  <div class=\"bb-block bb-block--sm\">\n                    <bb-amount-input-ui\n                      formControlName=\"amount\"\n                      [mapCurrency]=\"false\"\n                      [currency]=\"fieldOptions?.amount?.currency\"\n                      [required]=\"true\"\n                      [aria-describedby]=\"\n                        'compact-amount-error-message' + index\n                      \"\n                      [maxLength]=\"fieldOptions?.amount?.maxLength\"\n                      [placeholder]=\"fieldOptions?.amount?.placeholder\"\n                    >\n                    </bb-amount-input-ui>\n                    <bb-payord-validation-message\n                      [control]=\"getControl(index, 'amount')\"\n                      [validationMessages]=\"\n                        fieldOptions?.amount?.validationMessages\n                      \"\n                      [label]=\"fieldOptions?.amount?.validationMessageLabel\"\n                    ></bb-payord-validation-message>\n                  </div>\n                  <span\n                    class=\"bb-text-support bb-subtitle\"\n                    [hidden]=\"isExpanded(index)\"\n                  >\n                    <ng-container>Add</ng-container>\n                    <a\n                      role=\"button\"\n                      class=\"ml-1\"\n                      (click)=\"openDescription(index)\"\n                    >\n                      <u class=\"bb-text-support\" data-role=\"description-link\"\n                        >description</u\n                      >\n                    </a>\n                  </span>\n                </div>\n              </div>\n            </div>\n            <div\n              class=\"bb-stack__item bb-stack__item--push-right bb-stack__item--align-top d-print-none\"\n            >\n              <button\n                bbButton\n                buttonSize=\"sm\"\n                circle=\"true\"\n                color=\"link-dark\"\n                data-role=\"close-to-account\"\n                (click)=\"removeAccount(index)\"\n              >\n                <span\n                  class=\"sr-only\"\n                  id=\"closeBtn\"\n                  aria-label=\"remove payment card\"\n                  i18n-aria-label=\"\n                    Remove Payment Card@@multi-payment-card.details.remove\"\n                >\n                  Remove account\n                </span>\n                <bb-icon-ui name=\"times\"></bb-icon-ui>\n              </button>\n            </div>\n          </div>\n\n          <div\n            class=\"card card-sm card--highlight card--shadowless\"\n            [hidden]=\"!isExpanded(index)\"\n          >\n            <div class=\"card-body\">\n              <label class=\"bb-label\">\n                {{ fieldOptions?.description?.title }}\n                <span\n                  class=\"bb-text-support bb-text-default\"\n                  i18n=\"@@multipayment-card.description.label.optional\"\n                  >(optional)</span\n                >\n              </label>\n              <div\n                class=\"bb-stack bb-stack--align-top bb-stack--density-sm\"\n                data-role=\"description-input\"\n              >\n                <bb-textarea-ui\n                  formControlName=\"description\"\n                  [placeholder]=\"fieldOptions?.description?.placeholder\"\n                  [showCharCounter]=\"true\"\n                  [minLength]=\"fieldOptions?.description?.minLength\"\n                  [maxLength]=\"fieldOptions?.description?.maxLength\"\n                  [rows]=\"3\"\n                  [cols]=\"50\"\n                  wrap=\"hard\"\n                  class=\"bb-stack__item\"\n                >\n                </bb-textarea-ui>\n                <button\n                  bbButton\n                  buttonSize=\"sm\"\n                  class=\"bb-stack__item\"\n                  circle=\"true\"\n                  color=\"link-dark\"\n                  (click)=\"deleteDescription(index)\"\n                >\n                  <bb-icon-ui\n                    name=\"delete\"\n                    data-role=\"delete-description\"\n                    color=\"secondary-lightest\"\n                  ></bb-icon-ui>\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <ng-container *ngIf=\"getForm(index)?.errors?.error\">\n          <bb-payord-validation-message\n            [control]=\"getForm(index)\"\n            [validationMessages]=\"[getForm(index)?.errors?.error]\"\n          ></bb-payord-validation-message>\n        </ng-container>\n      </div>\n    </div>\n\n    <ng-template #listItemtemplate>\n      <ng-container *ngIf=\"isDropdownOpen(index)\" class=\"bb-product-selector\">\n        <div\n          *ngIf=\"\n            accounts[index] && (accounts[index].items$ | async);\n            let accounts;\n            else: loadingAccounts\n          \"\n          class=\"pre-scrollable\"\n          style=\"z-index: 1040\"\n        >\n          <bb-beneficiary-selector-account\n            *ngFor=\"let account of accounts\"\n            [account]=\"account\"\n            size=\"sm\"\n            class=\"px-1 border-bottom bb-product-selector__dropdown-item\"\n            [class.selected]=\"getControl(index, 'id').value === account.id\"\n            ngbDropdownItem\n            (selectedAccount)=\"onSelectAccount($event, index)\"\n          >\n          </bb-beneficiary-selector-account>\n        </div>\n      </ng-container>\n    </ng-template>\n\n    <ng-template #loadingAccounts>\n      <bb-loading-indicator-ui></bb-loading-indicator-ui>\n    </ng-template>\n\n    <ng-template #selectedItemtemplate>\n      <div\n        class=\"rounded border p-3\"\n        [ngClass]=\"{\n          'border-danger': getControl(index, 'counterpartyName').invalid\n        }\"\n      >\n        <div role=\"menuitem\" class=\"\">\n          <div class=\"bb-stack\">\n            <div class=\"bb-stack__item\" data-role=\"selected-to-account\">\n              <span class=\"bb-text-bold\">{{\n                getControl(index, 'counterpartyName')?.value\n              }}</span>\n            </div>\n            <div class=\"bb-stack__item bb-stack__item--push-right\">\n              <bb-icon-ui\n                name=\"perm-contact-calendar\"\n                color=\"dark\"\n              ></bb-icon-ui>\n            </div>\n          </div>\n          <div class=\"bb-subtitle bb-text-support break-word\">\n            <span *ngIf=\"getControl(index, 'bankBranchCode')?.value\"\n              >{{ getControl(index, 'bankBranchCode')?.value }} /</span\n            >\n            {{ getControl(index, 'counterpartyAccountNumber')?.value }}\n          </div>\n          <div class=\"text-right\">\n            <bb-amount-ui\n              [amount]=\"getControl(index, 'balance')?.value\"\n              [currency]=\"getControl(index, 'currency')?.value\"\n              [mapCurrency]=\"false\"\n            ></bb-amount-ui>\n          </div>\n        </div>\n      </div>\n    </ng-template>\n  </ng-template>\n</div>\n", styles: ["\n      .virtual-scroll__container {\n        position: relative;\n      }\n\n      .virtual-scroll__padding {\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 1px;\n        height: 1px;\n        transform-origin: 0 0;\n        opacity: 0;\n      }\n\n      .virtual-scroll__content {\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        max-width: 100vw;\n        max-height: 100vh;\n      }\n    "], components: [{ type: i2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i3.ValidationMessageComponent, selector: "bb-payord-validation-message", inputs: ["control", "validationMessages", "label", "id", "hideGeneric"] }, { type: i4.AmountInputComponent, selector: "bb-amount-input-ui", inputs: ["placeholder", "maxLength", "wrapperClasses", "mapCurrency", "currency", "autoDecimal"] }, { type: i5.TextareaComponent, selector: "bb-textarea-ui", inputs: ["rows", "cols", "placeholder", "maxLength", "minLength", "readonly", "showCharCounter", "wrap"] }, { type: i6.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i7.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }], directives: [{ type: i8.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i8.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i9.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i9.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i8.FormArrayName, selector: "[formArrayName]", inputs: ["formArrayName"] }, { type: i9.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i9.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i10.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i8.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i8.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i8.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i11.NgbDropdownItem, selector: "[ngbDropdownItem]", inputs: ["disabled"] }], pipes: { "async": i9.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: MultiPaymentCardComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-multi-payment-card',
                    templateUrl: './multi-payment-card.component.html',
                    styles: [
                        `
      .virtual-scroll__container {
        position: relative;
      }

      .virtual-scroll__padding {
        position: absolute;
        top: 0;
        left: 0;
        width: 1px;
        height: 1px;
        transform-origin: 0 0;
        opacity: 0;
      }

      .virtual-scroll__content {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        max-width: 100vw;
        max-height: 100vh;
      }
    `,
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.NgZone }, { type: i1.ViewportRuler }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { scroll: [{
                type: ViewChild,
                args: ['scroll', { read: ElementRef, static: true }]
            }], padding: [{
                type: ViewChild,
                args: ['padding', { read: ElementRef, static: true }]
            }], content: [{
                type: ViewChild,
                args: ['content', { read: ElementRef, static: true }]
            }] } });
//# sourceMappingURL=multi-payment-card.component.js.map