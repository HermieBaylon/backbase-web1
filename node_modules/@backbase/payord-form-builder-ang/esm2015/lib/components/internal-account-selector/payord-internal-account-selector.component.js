import { Component, ViewChild, Renderer2, ChangeDetectorRef, } from '@angular/core';
import { Validators, } from '@angular/forms';
import { combineLatest, fromEvent, of, Subject } from 'rxjs';
import { map, take, takeUntil, catchError, shareReplay } from 'rxjs/operators';
import { PaymentFormFieldHooks, InitiatorFields, CounterPartyFields, AccountBalances, PaymentBaseFields, ProductKinds, } from '@backbase/payment-orders-ang';
import { triggerHook } from '../../helpers/hooks-helpers';
import { registerFormControl } from '../../helpers/form-helpers';
import { ActivatedRoute } from '@angular/router';
import { getRouteParams } from '../../helpers/route-helpers';
import { ActivatableFormField } from '../../models/activatable-form-field';
import { VisibilityService } from '../../services/visibility.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "../../services/visibility.service";
import * as i3 from "@backbase/ui-ang/product-selector";
import * as i4 from "@backbase/ui-ang/product-item-basic-account";
import * as i5 from "@backbase/ui-ang/icon";
import * as i6 from "@backbase/ui-ang/empty-state";
import * as i7 from "../validation-message/validation-message.component";
import * as i8 from "@angular/common";
import * as i9 from "@angular/forms";
import * as i10 from "@backbase/ui-ang/button";
const getDbsValue = (dbsObj, keys) => {
    const value = keys
        .split('.')
        .reduce((obj, key) => { var _a; return (_a = obj) === null || _a === void 0 ? void 0 : _a[key]; }, dbsObj);
    return ((['string', 'number'].includes(typeof value) ? value : undefined));
};
export class PayordInternalAccountSelectorComponent extends ActivatableFormField {
    constructor(renderer, cd, activatedRoute, visibilityService) {
        super(visibilityService);
        this.renderer = renderer;
        this.cd = cd;
        this.activatedRoute = activatedRoute;
        this.destroy$ = new Subject();
        this.connectedAccounts$ = of([]);
        this.productKinds = ProductKinds;
        /**
         * Id to associate messages to form field for accessibility
         */
        this.validationId = '';
        /**
         * Account number fromat used to mask the account numbers in the selector
         */
        this.accountFormat = {
            length: 0,
            maskRange: [0, 0],
            segments: 0,
        };
        /**
         * Boolean to show if account selector tab is touched
         */
        this.touched = false;
    }
    /**
     * Return other account selector field name
     */
    get peerFieldName() {
        return this.config.name === InitiatorFields.initiatorAccountGroup
            ? PaymentBaseFields.counterparty
            : PaymentBaseFields.initiator;
    }
    /**
     * Flag to show if dropdown is open
     */
    get isDropdownOpen() {
        var _a, _b;
        return !!((_b = (_a = this.productSelector) === null || _a === void 0 ? void 0 : _a.bbDropdown) === null || _b === void 0 ? void 0 : _b.isOpen());
    }
    /**
     * Flag to show which account kinds should not be rendered in order to avoid unwanted matches between two account
     */
    get disabledProductKinds() {
        var _a, _b;
        const combinations = ((_a = this.options.paymentTypeOptions) === null || _a === void 0 ? void 0 : _a.disabledCombinations) || [];
        const isInitiator = this.config.name === InitiatorFields.initiatorAccountGroup;
        const counterParty = (_b = this.disabledAccount) === null || _b === void 0 ? void 0 : _b.productKindName;
        const disabledProductKinds = combinations.filter((i) => isInitiator ? i.to === counterParty : i.from === counterParty);
        return disabledProductKinds.map((i) => isInitiator ? i.from : i.to);
    }
    ngOnInit() {
        this.validationId = `account-selector-${this.config.name}-error-message`;
        this.form = (this.group.parent ? this.group.parent : null);
        this.registerFields();
        this.control = this.group.controls['name'];
        const { otherFilters, connectedItems$, items$, productKinds, connectedAccounts, preselect, } = this.options;
        if (connectedAccounts) {
            this.connectedAccounts$ = connectedItems$.pipe(take(1));
        }
        this.options.items$ = items$.pipe(take(1), map((accounts) => this.options.mapItems && (accounts === null || accounts === void 0 ? void 0 : accounts.length)
            ? this.options.mapItems(accounts)
            : accounts), map((accounts) => this.filterByProductKind(accounts, productKinds)), map((accounts) => this.filterByOtherProps(accounts, otherFilters)), map((accounts) => accounts.map(this.mapBalance.bind(this))), shareReplay(1));
        combineLatest([
            this.options.items$.pipe(take(1), catchError(() => of([]))),
            this.connectedAccounts$.pipe(take(1), catchError(() => of([]))),
        ]).subscribe(([internals, externals = []]) => {
            var _a;
            const accounts = [...internals, ...externals];
            if (!this.group.value['id']) {
                let selection;
                const { transferFrom, transferTo } = getRouteParams(this.activatedRoute.root);
                const { name: configName } = this.config;
                const idParam = configName === InitiatorFields.initiatorAccountGroup
                    ? transferFrom
                    : transferTo;
                selection = idParam && accounts.find((acc) => acc.id === idParam);
                if (preselect && !selection && transferTo !== ((_a = accounts[0]) === null || _a === void 0 ? void 0 : _a.id)) {
                    selection = accounts[0];
                }
                if (selection) {
                    this.selectItem(selection);
                }
            }
            this.setAccountInEditMode(accounts, this.group, 'id');
        });
        this.setDisabledAccount(this.form);
        triggerHook(PaymentFormFieldHooks.onInit, this);
    }
    ngAfterViewInit() {
        if (this.productSelector) {
            const { nativeElement } = this.productSelector.dropdownToggle;
            fromEvent(nativeElement, 'blur')
                .pipe(take(1))
                .subscribe(() => this.setTouched());
            //Here to fix Safari focus issue https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#Clicking_and_focus
            fromEvent(nativeElement, 'click')
                .pipe(take(1))
                .subscribe((e) => e.currentTarget.focus());
            // Fix accessibility issue (MAINT-10313)
            this.renderer.setAttribute(nativeElement, 'aria-describedby', this.validationId);
        }
    }
    /**
     * Filtering accounts by product kind
     */
    filterByProductKind(accounts = [], productKinds = []) {
        return accounts === null || accounts === void 0 ? void 0 : accounts.filter((account) => productKinds.length
            ? productKinds.some((i) => i.productKind === account.productKindName)
            : true);
    }
    /**
     * Filtering accounts by other filter properties
     */
    filterByOtherProps(accounts = [], otherFilters = []) {
        return accounts.filter((account) => otherFilters.length
            ? otherFilters.every(({ key, value }) => {
                const dbsValue = getDbsValue(account === null || account === void 0 ? void 0 : account.defaultRecord, key);
                return value.some((v) => v === dbsValue);
            })
            : true);
    }
    /**
     * Disable account which is already selected at the counter party selector
     */
    setDisabledAccount(form) {
        if (form === null || form === void 0 ? void 0 : form.get(this.peerFieldName)) {
            this.disabledAccount = form.get(this.peerFieldName).value;
            form.get(this.peerFieldName).valueChanges
                .pipe(takeUntil(this.destroy$))
                .subscribe((acc) => {
                this.disabledAccount = acc;
                this.setPaymentConfig(acc);
            });
        }
    }
    setPaymentConfig(acc) {
        if (this.config.name === CounterPartyFields.counterPartyAccountGroup &&
            this.form.get(PaymentBaseFields.counterparty)) {
            const role = acc.productKindName === ProductKinds.connectedAccounts
                ? 'DEBTOR'
                : 'CREDITOR';
            this.form.get(PaymentBaseFields.counterparty).patchValue({
                role,
            });
        }
    }
    setTouched(isTouched = true) {
        this.touched = isTouched;
        if (isTouched) {
            this.group.markAllAsTouched();
        }
        this.cd.detectChanges();
    }
    /**
     * Return paymentType regarding to from-to account combination
     */
    pickPaymentType() {
        var _a, _b;
        const initiatorKind = (_a = this.form.value.initiator) === null || _a === void 0 ? void 0 : _a.productKindName;
        const counterPartyKind = (_b = this.form.value.counterparty) === null || _b === void 0 ? void 0 : _b.productKindName;
        const { paymentTypes } = this.options.paymentTypeOptions || {};
        const { connectedAccounts } = ProductKinds;
        if (paymentTypes && initiatorKind && counterPartyKind) {
            return counterPartyKind === connectedAccounts ||
                initiatorKind === connectedAccounts
                ? paymentTypes.external
                : paymentTypes.internal;
        }
        return;
    }
    setAccountInEditMode(accounts, group, key) {
        if (accounts && (group === null || group === void 0 ? void 0 : group.value[key])) {
            const account = accounts.filter((a) => a.id === group.value[key]);
            this.selectItem(account[0]);
        }
    }
    selectAccountGroup() {
        const fieldsGroup = this.config.name === InitiatorFields.initiatorAccountGroup
            ? InitiatorFields
            : CounterPartyFields;
        return {
            [fieldsGroup.id]: [Validators.required],
            [fieldsGroup.name]: [Validators.required],
            [fieldsGroup.accountNumber]: [Validators.required],
            [CounterPartyFields.role]: [Validators.required],
            currency: [],
            schemeName: [Validators.required],
            productKindName: [Validators.required],
            accountData: [],
        };
    }
    registerFields() {
        const accountGroup = this.selectAccountGroup();
        for (const key in accountGroup) {
            if (accountGroup.hasOwnProperty(key)) {
                registerFormControl(this.group, key, accountGroup[key], [], '');
            }
        }
    }
    /**
     * Set balance and balance label to account regarding to selected balance type in config
     */
    mapBalance(account) {
        var _a, _b, _c, _d;
        const defaultBalanceType = AccountBalances.current;
        const productKindConfig = (_b = (_a = this.options) === null || _a === void 0 ? void 0 : _a.productKinds) === null || _b === void 0 ? void 0 : _b.find((config) => config.productKind === account.productKindName);
        const dbsProperty = ((_c = productKindConfig === null || productKindConfig === void 0 ? void 0 : productKindConfig.balance) === null || _c === void 0 ? void 0 : _c.apiField)
            ? productKindConfig.balance.apiField
            : defaultBalanceType;
        const balance = getDbsValue(account === null || account === void 0 ? void 0 : account.defaultRecord, dbsProperty);
        return Object.assign(Object.assign({}, account), { balance: balance, balanceLabel: (_d = productKindConfig === null || productKindConfig === void 0 ? void 0 : productKindConfig.balance) === null || _d === void 0 ? void 0 : _d.label });
    }
    ngOnDestroy() {
        triggerHook(PaymentFormFieldHooks.onDestroy, this);
        this.destroy$.next();
        this.destroy$.complete();
    }
    selectItem(account) {
        var _a;
        if (this.group && (account === null || account === void 0 ? void 0 : account.name)) {
            const { productKindName } = account;
            const { connectedAccounts } = ProductKinds;
            const isPeerConnectedAcc = ((_a = this.disabledAccount) === null || _a === void 0 ? void 0 : _a.productKindName) === connectedAccounts;
            const schemeName = productKindName === connectedAccounts ? 'EXTERNAL_ID' : 'ID';
            const role = this.config.name === CounterPartyFields.counterPartyAccountGroup &&
                isPeerConnectedAcc
                ? 'DEBTOR'
                : 'CREDITOR';
            this.group.patchValue({
                id: account.id,
                name: account.name,
                accountNumber: account.accountNumber,
                currency: account.currency,
                schemeName,
                productKindName: account.productKindName,
                role,
                accountData: account,
            });
            this.selectedAccount = Object.assign({}, account);
        }
        this.toggleDependants();
        const paymentType = this.pickPaymentType();
        if (paymentType) {
            this.form.patchValue({ paymentType });
        }
        this.group.markAsDirty();
        this.cd.detectChanges();
    }
}
/** @nocollapse */ PayordInternalAccountSelectorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordInternalAccountSelectorComponent, deps: [{ token: i0.Renderer2 }, { token: i0.ChangeDetectorRef }, { token: i1.ActivatedRoute }, { token: i2.VisibilityService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PayordInternalAccountSelectorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordInternalAccountSelectorComponent, selector: "bb-payord-internal-account-selector", viewQueries: [{ propertyName: "productSelector", first: true, predicate: ["productSelector"], descendants: true }], usesInheritance: true, ngImport: i0, template: "<div\n  class=\"form-group bb-dynamic-input\"\n  [ngClass]=\"options?.cssClasses\"\n  *ngIf=\"!config?.hidden\"\n>\n  <div *ngIf=\"options?.label\" class=\"bb-label bb-block bb-block--lg\">\n    {{ options?.label }}\n  </div>\n  <section class=\"payment-from\" [formGroup]=\"group\">\n    <label class=\"bb-form-field\">\n      <bb-product-selector-ui\n        [autoClose]=\"true\"\n        [class.bb-product-selector--invalid-border]=\"\n          touched && group.invalid && !isDropdownOpen\n        \"\n        #productSelector\n      >\n        <ng-container bbDropdownToggle>\n          <div\n            *ngIf=\"selectedAccount\"\n            data-role=\"product-selector-selected-product\"\n          >\n            <bb-product-item-basic-account-ui\n              [title]=\"selectedAccount?.name\"\n              [productNumber]=\"selectedAccount?.accountNumber\"\n              [amount]=\"selectedAccount.balance\"\n              [currency]=\"selectedAccount.currency\"\n              [productNumberFormat]=\"\n                options?.productNumberFormat || accountFormat\n              \"\n              [highlight]=\"options?.highlight\"\n              [showCurrencySymbol]=\"options?.showCurrencySymbol !== false\"\n              [active]=\"false\"\n              [balanceLabel]=\"selectedAccount?.balanceLabel\"\n              i18n-balanceLabel=\"\n                Available balance\n                label@@payord-internal-account-selector.amount.available\"\n            ></bb-product-item-basic-account-ui>\n          </div>\n          <div *ngIf=\"!selectedAccount\" class=\"bb-stack\">\n            <span\n              data-role=\"item-empty-state\"\n              class=\"bb-text-support bb-product-selector__placeholder\"\n            >\n              {{ options?.placeholder }}\n            </span>\n          </div>\n        </ng-container>\n        <ng-container bbDropdownMenu>\n          <ng-container\n            *ngIf=\"{\n              internal: options?.items$ | async,\n              external: connectedAccounts$ | async\n            } as accounts\"\n          >\n            <ng-container\n              *ngIf=\"\n                accounts.internal?.length || accounts.external?.length;\n                else notFound\n              \"\n            >\n              <ng-container\n                *ngFor=\"let item of accounts.internal; let i = index\"\n              >\n                <button\n                  *ngIf=\"!disabledProductKinds.includes(item.productKindName)\"\n                  (click)=\"selectItem(item)\"\n                  [disabled]=\"\n                    item.accountNumber === disabledAccount?.accountNumber\n                  \"\n                  bbButton\n                  color=\"unstyled\"\n                  class=\"bb-product-selector__dropdown-item\"\n                  [ngClass]=\"{\n                    selected: item.id === selectedAccount?.id,\n                    'bb-text-support':\n                      item.accountNumber === disabledAccount?.accountNumber\n                  }\"\n                >\n                  <bb-product-item-basic-account-ui\n                    [title]=\"item.name\"\n                    [amount]=\"item.balance\"\n                    [productNumber]=\"item.accountNumber\"\n                    [currency]=\"item.currency\"\n                    [highlight]=\"options?.highlight\"\n                    [active]=\"false\"\n                    [class.bb-dropdown-multi-select--disabled]=\"\n                      item.accountNumber === disabledAccount?.accountNumber\n                    \"\n                    [productNumberFormat]=\"\n                      options?.productNumberFormat || accountFormat\n                    \"\n                    [showCurrencySymbol]=\"options?.showCurrencySymbol !== false\"\n                    [balanceLabel]=\"item?.balanceLabel\"\n                    i18n-balanceLabel=\"\n                      Available balance\n                      label@@payord-internal-account-selector.amount.available\"\n                  ></bb-product-item-basic-account-ui>\n                </button>\n              </ng-container>\n              <ng-container\n                *ngIf=\"\n                  disabledAccount?.productKindName !==\n                  productKinds.connectedAccounts\n                \"\n              >\n                <h4\n                  class=\"bb-subheader bb-text-support bb-block bb-block--no-margin bb-inline-stack bb-internal-account-selector__subheader\"\n                  *ngIf=\"\n                    accounts.external?.length &&\n                    options?.connectedAccountsSubHeader as subheader\n                  \"\n                  tabIndex=\"-1\"\n                >\n                  <bb-icon-ui\n                    name=\"insert-link\"\n                    cropped\n                    class=\"bb-inline-stack__item--spacing-sm\"\n                  ></bb-icon-ui>\n                  <span>{{ subheader }}</span>\n                </h4>\n                <button\n                  *ngFor=\"let item of accounts.external\"\n                  (click)=\"selectItem(item)\"\n                  [disabled]=\"\n                    item.accountNumber === disabledAccount?.accountNumber\n                  \"\n                  bbButton\n                  color=\"unstyled\"\n                  class=\"bb-product-selector__dropdown-item\"\n                  [ngClass]=\"{\n                    selected: item.id === selectedAccount?.id,\n                    'bb-text-support':\n                      item.accountNumber === disabledAccount?.accountNumber\n                  }\"\n                >\n                  <bb-product-item-basic-account-ui\n                    [title]=\"item.name\"\n                    [productNumber]=\"item.accountNumber\"\n                    [highlight]=\"options?.highlight\"\n                    [active]=\"false\"\n                    [class.bb-dropdown-multi-select--disabled]=\"\n                      item.accountNumber === disabledAccount?.accountNumber\n                    \"\n                    [productNumberFormat]=\"\n                      options?.productNumberFormat || accountFormat\n                    \"\n                    [showCurrencySymbol]=\"options?.showCurrencySymbol !== false\"\n                  ></bb-product-item-basic-account-ui>\n                </button>\n              </ng-container>\n            </ng-container>\n          </ng-container>\n          <ng-template #notFound>\n            <bb-empty-state-ui\n              title=\"No items found\"\n              [showIcon]=\"false\"\n            ></bb-empty-state-ui>\n          </ng-template>\n        </ng-container>\n      </bb-product-selector-ui>\n    </label>\n\n    <ng-container *ngIf=\"!selectedAccount\">\n      <bb-payord-validation-message\n        [id]=\"validationId\"\n        [control]=\"group?.controls['name']\"\n        [validationMessages]=\"options?.validationMessages\"\n        [label]=\"options?.label\"\n      ></bb-payord-validation-message>\n    </ng-container>\n  </section>\n</div>\n", components: [{ type: i3.ProductSelectorComponent, selector: "bb-product-selector-ui", inputs: ["autoClose", "position", "container"] }, { type: i4.ProductItemBasicAccountComponent, selector: "bb-product-item-basic-account-ui", inputs: ["title", "productNumber", "productNumberFormat", "currency", "showCurrencySymbol", "amount", "highlight", "productDetailsInfo", "active", "favorite", "favoriteIconColor", "selected", "type", "status", "balanceLabel", "bankBranchCode"] }, { type: i5.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i6.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }, { type: i7.ValidationMessageComponent, selector: "bb-payord-validation-message", inputs: ["control", "validationMessages", "label", "id", "hideGeneric"] }], directives: [{ type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i8.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i9.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i9.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i8.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i10.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "async": i8.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordInternalAccountSelectorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payord-internal-account-selector',
                    templateUrl: 'payord-internal-account-selector.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }, { type: i1.ActivatedRoute }, { type: i2.VisibilityService }]; }, propDecorators: { productSelector: [{
                type: ViewChild,
                args: ['productSelector']
            }] } });
//# sourceMappingURL=payord-internal-account-selector.component.js.map