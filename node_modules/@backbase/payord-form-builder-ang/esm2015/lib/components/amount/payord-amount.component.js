import { Component, ViewChild, } from '@angular/core';
import { Validators, } from '@angular/forms';
import { amountValidator, RemittanceInfoFields, PaymentFormFieldHooks, } from '@backbase/payment-orders-ang';
import { registerFormControl } from '../../helpers/form-helpers';
import { triggerHook } from '../../helpers/hooks-helpers';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/currency-input";
import * as i2 from "../validation-message/validation-message.component";
import * as i3 from "@angular/common";
import * as i4 from "@angular/forms";
export class PayordAmountComponent {
    constructor() {
        this.payordAmountId = PayordAmountComponent._id++;
        /**
         * Initial amount value
         */
        this.initialAmount = {
            [RemittanceInfoFields.amount]: '',
            [RemittanceInfoFields.currency]: '',
        };
    }
    /**
     * Initializes the component.
     *
     * @returns
     */
    ngOnInit() {
        this.control = registerFormControl(this.group, this.config.name, [Validators.required, amountValidator], this.options.asyncValidators, this.options.defaultValue || this.initialAmount, this.config);
        triggerHook(PaymentFormFieldHooks.onInit, this);
    }
    /**
     * Cleanups just before Angular destroys the component.
     *
     * @returns
     */
    ngOnDestroy() {
        triggerHook(PaymentFormFieldHooks.onDestroy, this);
    }
    getLabelledbyForSelector() {
        var _a, _b, _c;
        return (((_a = this.options) === null || _a === void 0 ? void 0 : _a.labelledBy) ||
            `${((_b = this.amountLabelEl) === null || _b === void 0 ? void 0 : _b.nativeElement.id) || ''} ${((_c = this.helperTextEL) === null || _c === void 0 ? void 0 : _c.nativeElement.id) || ''}`.trim());
    }
}
PayordAmountComponent._id = 0;
/** @nocollapse */ PayordAmountComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordAmountComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PayordAmountComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordAmountComponent, selector: "bb-payord-amount", viewQueries: [{ propertyName: "amountLabelEl", first: true, predicate: ["amountLabel"], descendants: true }, { propertyName: "helperTextEL", first: true, predicate: ["helperText"], descendants: true }], ngImport: i0, template: "<section\n  *ngIf=\"!config?.hidden\"\n  class=\"bb-dynamic-input form-group payment-amount\"\n  [formGroup]=\"group\"\n  [ngClass]=\"options?.cssClasses\"\n>\n  <div\n    #amountLabel\n    class=\"bb-dynamic-input__label bb-label\"\n    id=\"payord-amount__helper-label-{{ payordAmountId }}\"\n    *ngIf=\"options?.label\"\n  >\n    {{ options?.label }}\n  </div>\n  <span\n    #helperText\n    class=\"bb-dynamic-input__helper-text bb-text-support\"\n    id=\"payord-amount__helper-text-{{ payordAmountId }}\"\n    *ngIf=\"options?.helperText\"\n    [textContent]=\"options?.helperText\"\n  >\n  </span>\n  <bb-currency-input-ui\n    resultType=\"string\"\n    [attr.maxlength]=\"options?.maxLength || 18\"\n    [currencies]=\"options?.currencies\"\n    [decMaxLen]=\"options?.decMaxLen\"\n    [allowNegativeValue]=\"options?.allowNegativeValue\"\n    [currencyLabel]=\"options?.currencyLabel || ''\"\n    [decimalLabel]=\"options?.decimalLabel || ''\"\n    [disabled]=\"options?.disabled || false\"\n    [integer]=\"options?.integer\"\n    [integerLabel]=\"options?.integerLabel || ''\"\n    [isRightAligned]=\"options?.isRightAligned\"\n    [placeholder]=\"options?.placeholder || 0\"\n    [readonly]=\"options?.readonly\"\n    [aria-describedby]=\"options?.describedBy\"\n    [aria-labelledby]=\"getLabelledbyForSelector()\"\n    [aria-invalid]=\"options?.ariaInvalid\"\n    [formControlName]=\"this.config.name\"\n    [attr.data-role]=\"config.name\"\n  >\n    <div bbValidationMessage>\n      <bb-payord-validation-message\n        *ngIf=\"control?.touched && control?.invalid\"\n        [control]=\"group.get('amountGroup')\"\n        [validationMessages]=\"options?.validationMessages\"\n        [label]=\"options?.label || 'Amount'\"\n      ></bb-payord-validation-message>\n    </div>\n  </bb-currency-input-ui>\n  <div\n    class=\"bb-dynamic-input__desc bb-text-support bb-subtitle\"\n    *ngIf=\"options?.description\"\n    [textContent]=\"options?.description\"\n  ></div>\n</section>\n", components: [{ type: i1.CurrencyInputComponent, selector: "bb-currency-input-ui", inputs: ["decMaxLen", "decMinLen", "placeholder", "resultType", "integer", "required", "readonly", "disabled", "integerLabelSrOnly", "decimalLabelSrOnly", "currencies", "isRightAligned", "integerId", "decimalId", "integerLabel", "decimalLabel", "currencyLabel", "allowNegativeValue", "currencyListAriaLabel", "currencyListWithOnItemAriaLabel", "aria-describedby", "aria-labelledby", "aria-invalid"], outputs: ["blur"] }, { type: i2.ValidationMessageComponent, selector: "bb-payord-validation-message", inputs: ["control", "validationMessages", "label", "id", "hideGeneric"] }], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i4.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i3.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i4.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordAmountComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payord-amount',
                    templateUrl: './payord-amount.component.html',
                }]
        }], propDecorators: { amountLabelEl: [{
                type: ViewChild,
                args: ['amountLabel']
            }], helperTextEL: [{
                type: ViewChild,
                args: ['helperText']
            }] } });
//# sourceMappingURL=payord-amount.component.js.map