import { Component, ViewChild, } from '@angular/core';
import { Validators, } from '@angular/forms';
import { amountValidator, currencyValidatorFactory, InitiatorFields, PaymentBaseFields, PaymentFormFieldHooks, PaymentOptionFields, RemittanceInfoFields, } from '@backbase/payment-orders-ang';
import { combineLatest } from 'rxjs';
import { distinctUntilChanged, filter, map, startWith, tap, } from 'rxjs/operators';
import { getParentForm, registerFormControl } from '../../helpers/form-helpers';
import { triggerHook } from '../../helpers/hooks-helpers';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/payment-orders-ang";
import * as i2 from "../validation-message/validation-message.component";
import * as i3 from "@backbase/ui-ang/input-validation-message";
import * as i4 from "@backbase/ui-ang/loading-indicator";
import * as i5 from "@backbase/ui-ang/amount";
import * as i6 from "@angular/common";
import * as i7 from "@angular/forms";
export class PayordSanctionedCurrencyAmountComponent {
    constructor() {
        this.sanctionedCurrencyAmountId = PayordSanctionedCurrencyAmountComponent._id++;
        /**
         * Initial amount value
         */
        this.initialAmount = {
            [RemittanceInfoFields.amount]: '',
            [RemittanceInfoFields.currency]: '',
        };
    }
    /**
     * Initializes the component.
     *
     * @returns
     */
    ngOnInit() {
        this.parentForm = getParentForm(this.group);
        this.control = registerFormControl(this.group, this.config.name, [
            Validators.required,
            amountValidator,
            currencyValidatorFactory(),
        ], this.options.asyncValidators, this.options.defaultValue || this.initialAmount, this.config);
        this.initiatorCurrencyControl = (this.parentForm.get(`${PaymentBaseFields.initiator}.${InitiatorFields.currency}`));
        this.exchangeRateControl =
            this.parentForm.get(PaymentOptionFields.exchangeRate) ||
                registerFormControl(this.parentForm, PaymentOptionFields.exchangeRate);
        if (this.initiatorCurrencyControl &&
            this.control &&
            !this.options.isTemplateMode) {
            // Listen for "from" and "to" currency values
            this.valueChangeSubscription = combineLatest([
                this.initiatorCurrencyControl.valueChanges.pipe(startWith(this.initiatorCurrencyControl.value), distinctUntilChanged(), filter((val) => !!val)),
                this.control.valueChanges.pipe(startWith(this.control.value), map(({ currency }) => currency), distinctUntilChanged(), filter((val) => !!val)),
            ]).subscribe(([fromCurrency, toCurrency]) => {
                this.options.getExchangeRate$.next({ fromCurrency, toCurrency });
            });
        }
        if (this.options.exchangeRate$) {
            this.exchangeRate$ = this.options.exchangeRate$.pipe(tap((rate) => {
                this.exchangeRateControl.setValue(rate);
            }));
        }
        triggerHook(PaymentFormFieldHooks.onInit, this);
    }
    /**
     * Returns the calculated rate
     *
     * @param [exchangeRate] Exchange rate
     */
    getCalculatedRate(exchangeRate = 0) {
        if (exchangeRate &&
            this.initiatorCurrencyControl &&
            this.control.value.amount) {
            return {
                currencyFrom: this.initiatorCurrencyControl.value,
                currencyTo: this.control.value.currency,
                rate: exchangeRate,
                calculatedAmount: this.control.value.amount / exchangeRate,
            };
        }
        return;
    }
    /**
     * Cleanups just before Angular destroys the component.
     *
     * @returns
     */
    ngOnDestroy() {
        if (this.valueChangeSubscription) {
            this.valueChangeSubscription.unsubscribe();
        }
        triggerHook(PaymentFormFieldHooks.onDestroy, this);
    }
    getLabelledbyForSelector() {
        var _a, _b, _c;
        return (((_a = this.options) === null || _a === void 0 ? void 0 : _a.labelledBy) ||
            `${((_b = this.amountLabelEl) === null || _b === void 0 ? void 0 : _b.nativeElement.id) || ''} ${((_c = this.helperTextEL) === null || _c === void 0 ? void 0 : _c.nativeElement.id) || ''}`.trim());
    }
}
PayordSanctionedCurrencyAmountComponent._id = 0;
/** @nocollapse */ PayordSanctionedCurrencyAmountComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordSanctionedCurrencyAmountComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PayordSanctionedCurrencyAmountComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordSanctionedCurrencyAmountComponent, selector: "bb-sanctioned-currency-amount", viewQueries: [{ propertyName: "amountLabelEl", first: true, predicate: ["amountLabel"], descendants: true }, { propertyName: "helperTextEL", first: true, predicate: ["helperText"], descendants: true }], ngImport: i0, template: "<section\n  *ngIf=\"!config?.hidden\"\n  class=\"bb-dynamic-input form-group payment-amount\"\n  [formGroup]=\"group\"\n  [ngClass]=\"options?.cssClasses\"\n>\n  <div\n    #amountLabel\n    class=\"bb-dynamic-input__label bb-label\"\n    id=\"payment-amount__helper-label-{{ sanctionedCurrencyAmountId }}\"\n    *ngIf=\"options?.label\"\n  >\n    {{ options?.label }}\n  </div>\n\n  <span\n    #helperText\n    class=\"bb-dynamic-input__helper-text bb-text-support\"\n    id=\"payment-amount__helper-text-{{ sanctionedCurrencyAmountId }}\"\n    *ngIf=\"options?.helperText\"\n    [textContent]=\"options?.helperText\"\n  >\n  </span>\n\n  <div class=\"col-md-8 px-0\">\n    <ng-container *ngIf=\"options?.items$ | async as response; else loading\">\n      <bb-currency-amount-selector\n        [currencies]=\"response.currencies\"\n        [decMinLen]=\"0\"\n        [decMaxLen]=\"options?.decMaxLen\"\n        [allowNegativeValue]=\"options?.allowNegativeValue\"\n        [currencyLabel]=\"options?.currencyLabel || ''\"\n        [decimalLabel]=\"options?.decimalLabel || ''\"\n        [disabled]=\"options?.disabled || false\"\n        [integer]=\"options?.integer\"\n        [integerLabel]=\"options?.integerLabel || ''\"\n        [isRightAligned]=\"options?.isRightAligned\"\n        [labelClasses]=\"options?.labelClasses || ''\"\n        [placeholder]=\"options?.placeholder || 0\"\n        [readonly]=\"options?.readonly\"\n        [aria-describedby]=\"options?.describedBy\"\n        [aria-labelledby]=\"getLabelledbyForSelector()\"\n        [aria-invalid]=\"options?.ariaInvalid\"\n        [formControlName]=\"config.name\"\n        [currencySelectorExtended]=\"true\"\n        [currencySelectorConfig]=\"{\n          dividerIndex: response.dividerIndex,\n          showName: true,\n          isSearchable: true\n        }\"\n        [attr.maxlength]=\"options?.maxLength || 18\"\n        data-role=\"sanctioned-currency-amount-selector\"\n        resultType=\"string\"\n        ngDefaultControl\n      >\n        <div bbValidationMessage>\n          <bb-payord-validation-message\n            [control]=\"group.get('amountGroup')\"\n            [validationMessages]=\"options?.validationMessages\"\n            [label]=\"options?.label || 'Amount'\"\n          ></bb-payord-validation-message>\n        </div>\n      </bb-currency-amount-selector>\n      <bb-input-validation-message-ui [showErrors]=\"response.message\">\n        <span i18n=\"@@load-error-message-curr\"\n          >Something went wrong. Reload the page or contact system\n          administrator.</span\n        >\n      </bb-input-validation-message-ui>\n    </ng-container>\n  </div>\n  <ng-template #loading>\n    <bb-loading-indicator-ui></bb-loading-indicator-ui>\n  </ng-template>\n\n  <ng-container *ngIf=\"exchangeRate$ | async as exchangeRate\">\n    <ng-container *ngIf=\"getCalculatedRate(exchangeRate) as calculatedRate\">\n      <ng-container i18n=\"@@approximatelyPriceLabel\"\n        >You pay approximately:</ng-container\n      >\n      <span class=\"bb-text-bold\">\n        &asymp;\n        <bb-amount-ui\n          [mapCurrency]=\"false\"\n          [amount]=\"calculatedRate.calculatedAmount\"\n          [currency]=\"calculatedRate.currencyFrom\"\n        ></bb-amount-ui>\n      </span>\n      <ng-container i18n=\"@@currency-exchange-rate\">\n        (1 {{ calculatedRate.currencyFrom }} &asymp; {{ calculatedRate.rate }}\n        {{ calculatedRate.currencyTo }})\n      </ng-container>\n    </ng-container>\n  </ng-container>\n\n  <div *ngIf=\"options?.exchangeRateError$ | async\">\n    <span i18n=\"@@load-error-message-rate\"\n      >Exchange rate for this currency pair is unavailable.</span\n    >\n  </div>\n\n  <div\n    class=\"bb-dynamic-input__desc bb-text-support bb-subtitle\"\n    *ngIf=\"options?.description\"\n    [textContent]=\"options?.description\"\n  ></div>\n</section>\n", components: [{ type: i1.ӨCurrencyAmountSelectorComponent, selector: "bb-currency-amount-selector", inputs: ["decMaxLen", "decMinLen", "placeholder", "resultType", "integer", "required", "readonly", "disabled", "integerLabelSrOnly", "decimalLabelSrOnly", "currencies", "currencySelectorExtended", "currencySelectorConfig", "isRightAligned", "integerId", "decimalId", "integerLabel", "decimalLabel", "currencyLabel", "labelClasses", "allowNegativeValue", "currencyListAriaLabel", "currencyListWithOnItemAriaLabel", "aria-describedby", "aria-labelledby", "aria-invalid"] }, { type: i2.ValidationMessageComponent, selector: "bb-payord-validation-message", inputs: ["control", "validationMessages", "label", "id", "hideGeneric"] }, { type: i3.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i4.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i5.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }], directives: [{ type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i7.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i7.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i6.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i7.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i7.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i7.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i7.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }], pipes: { "async": i6.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordSanctionedCurrencyAmountComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-sanctioned-currency-amount',
                    templateUrl: './payord-sanctioned-currency-amount.component.html',
                }]
        }], propDecorators: { amountLabelEl: [{
                type: ViewChild,
                args: ['amountLabel']
            }], helperTextEL: [{
                type: ViewChild,
                args: ['helperText']
            }] } });
//# sourceMappingURL=payord-sanctioned-currency-amount.component.js.map