{"version":3,"file":"payord-sanctioned-currency-amount.component.js","sourceRoot":"","sources":["../../../../../../../libs/payord-form-builder-ang/src/lib/components/sanctioned-currency-input/payord-sanctioned-currency-amount.component.ts","../../../../../../../libs/payord-form-builder-ang/src/lib/components/sanctioned-currency-input/payord-sanctioned-currency-amount.component.html"],"names":[],"mappings":"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","sourcesContent":["import {\n  Component,\n  ElementRef,\n  OnDestroy,\n  OnInit,\n  ViewChild,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  FormGroup,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {\n  amountValidator,\n  currencyValidatorFactory,\n  InitiatorFields,\n  PaymentBaseFields,\n  PaymentFormField,\n  PaymentFormFieldConfig,\n  PaymentFormFieldHooks,\n  PaymentFormFieldOptions,\n  PaymentOptionFields,\n  RemittanceInfoFields,\n} from '@backbase/payment-orders-ang';\nimport { combineLatest, Subject, Subscription } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  startWith,\n  tap,\n} from 'rxjs/operators';\nimport { getParentForm, registerFormControl } from '../../helpers/form-helpers';\nimport { triggerHook } from '../../helpers/hooks-helpers';\n\nexport interface CalculatedRate {\n  currencyFrom: string;\n  currencyTo: string;\n  rate: number;\n  calculatedAmount: number;\n}\n\n@Component({\n  selector: 'bb-sanctioned-currency-amount',\n  templateUrl: './payord-sanctioned-currency-amount.component.html',\n})\nexport class PayordSanctionedCurrencyAmountComponent\n  implements OnInit, PaymentFormField, OnDestroy\n{\n  private static _id = 0;\n  readonly sanctionedCurrencyAmountId =\n    PayordSanctionedCurrencyAmountComponent._id++;\n\n  @ViewChild('amountLabel')\n  private amountLabelEl: ElementRef | undefined;\n\n  @ViewChild('helperText')\n  private helperTextEL: ElementRef | undefined;\n\n  /**\n   * Form config\n   */\n  config!: PaymentFormFieldConfig;\n\n  /**\n   * Form group\n   */\n  group!: FormGroup;\n\n  /**\n   * Form field options\n   */\n  options!: PaymentFormFieldOptions;\n\n  /**\n   * Form control\n   */\n  control!: AbstractControl;\n\n  /**\n   * Subscriptio to a value change\n   */\n  valueChangeSubscription?: Subscription;\n\n  /**\n   * Currency control\n   */\n  initiatorCurrencyControl!: AbstractControl;\n\n  /**\n   * Subject for exchange rate\n   */\n  exchangeRate$!: Subject<number>;\n\n  /**\n   * Control for exchange rate\n   */\n  exchangeRateControl!: AbstractControl;\n\n  /**\n   * Parent form group\n   */\n  parentForm!: FormGroup;\n\n  /**\n   * Initial amount value\n   */\n  initialAmount = {\n    [RemittanceInfoFields.amount]: '',\n    [RemittanceInfoFields.currency]: '',\n  };\n\n  /**\n   * Initializes the component.\n   *\n   * @returns\n   */\n  ngOnInit() {\n    this.parentForm = getParentForm(this.group);\n    this.control = registerFormControl(\n      this.group,\n      this.config.name,\n      [\n        Validators.required,\n        amountValidator as ValidatorFn,\n        currencyValidatorFactory(),\n      ],\n      this.options.asyncValidators,\n      this.options.defaultValue || this.initialAmount,\n      this.config\n    );\n\n    this.initiatorCurrencyControl = <AbstractControl>(\n      this.parentForm.get(\n        `${PaymentBaseFields.initiator}.${InitiatorFields.currency}`\n      )\n    );\n    this.exchangeRateControl =\n      this.parentForm.get(PaymentOptionFields.exchangeRate) ||\n      registerFormControl(this.parentForm, PaymentOptionFields.exchangeRate);\n\n    if (\n      this.initiatorCurrencyControl &&\n      this.control &&\n      !this.options.isTemplateMode\n    ) {\n      // Listen for \"from\" and \"to\" currency values\n      this.valueChangeSubscription = combineLatest([\n        this.initiatorCurrencyControl.valueChanges.pipe(\n          startWith(this.initiatorCurrencyControl.value),\n          distinctUntilChanged(),\n          filter((val) => !!val)\n        ),\n        this.control.valueChanges.pipe(\n          startWith(this.control.value),\n          map(({ currency }) => currency),\n          distinctUntilChanged(),\n          filter((val) => !!val)\n        ),\n      ]).subscribe(([fromCurrency, toCurrency]) => {\n        this.options.getExchangeRate$.next({ fromCurrency, toCurrency });\n      });\n    }\n\n    if (this.options.exchangeRate$) {\n      this.exchangeRate$ = this.options.exchangeRate$.pipe(\n        tap((rate) => {\n          this.exchangeRateControl.setValue(rate);\n        })\n      );\n    }\n\n    triggerHook(PaymentFormFieldHooks.onInit, this);\n  }\n\n  /**\n   * Returns the calculated rate\n   *\n   * @param [exchangeRate] Exchange rate\n   */\n  getCalculatedRate(exchangeRate = 0): CalculatedRate | undefined {\n    if (\n      exchangeRate &&\n      this.initiatorCurrencyControl &&\n      this.control.value.amount\n    ) {\n      return {\n        currencyFrom: this.initiatorCurrencyControl.value,\n        currencyTo: this.control.value.currency,\n        rate: exchangeRate,\n        calculatedAmount: this.control.value.amount / exchangeRate,\n      };\n    }\n    return;\n  }\n\n  /**\n   * Cleanups just before Angular destroys the component.\n   *\n   * @returns\n   */\n  ngOnDestroy() {\n    if (this.valueChangeSubscription) {\n      this.valueChangeSubscription.unsubscribe();\n    }\n    triggerHook(PaymentFormFieldHooks.onDestroy, this);\n  }\n\n  getLabelledbyForSelector(): string {\n    return (\n      this.options?.labelledBy ||\n      `${this.amountLabelEl?.nativeElement.id || ''} ${\n        this.helperTextEL?.nativeElement.id || ''\n      }`.trim()\n    );\n  }\n}\n","<section\n  *ngIf=\"!config?.hidden\"\n  class=\"bb-dynamic-input form-group payment-amount\"\n  [formGroup]=\"group\"\n  [ngClass]=\"options?.cssClasses\"\n>\n  <div\n    #amountLabel\n    class=\"bb-dynamic-input__label bb-label\"\n    id=\"payment-amount__helper-label-{{ sanctionedCurrencyAmountId }}\"\n    *ngIf=\"options?.label\"\n  >\n    {{ options?.label }}\n  </div>\n\n  <span\n    #helperText\n    class=\"bb-dynamic-input__helper-text bb-text-support\"\n    id=\"payment-amount__helper-text-{{ sanctionedCurrencyAmountId }}\"\n    *ngIf=\"options?.helperText\"\n    [textContent]=\"options?.helperText\"\n  >\n  </span>\n\n  <div class=\"col-md-8 px-0\">\n    <ng-container *ngIf=\"options?.items$ | async as response; else loading\">\n      <bb-currency-amount-selector\n        [currencies]=\"response.currencies\"\n        [decMinLen]=\"0\"\n        [decMaxLen]=\"options?.decMaxLen\"\n        [allowNegativeValue]=\"options?.allowNegativeValue\"\n        [currencyLabel]=\"options?.currencyLabel || ''\"\n        [decimalLabel]=\"options?.decimalLabel || ''\"\n        [disabled]=\"options?.disabled || false\"\n        [integer]=\"options?.integer\"\n        [integerLabel]=\"options?.integerLabel || ''\"\n        [isRightAligned]=\"options?.isRightAligned\"\n        [labelClasses]=\"options?.labelClasses || ''\"\n        [placeholder]=\"options?.placeholder || 0\"\n        [readonly]=\"options?.readonly\"\n        [aria-describedby]=\"options?.describedBy\"\n        [aria-labelledby]=\"getLabelledbyForSelector()\"\n        [aria-invalid]=\"options?.ariaInvalid\"\n        [formControlName]=\"config.name\"\n        [currencySelectorExtended]=\"true\"\n        [currencySelectorConfig]=\"{\n          dividerIndex: response.dividerIndex,\n          showName: true,\n          isSearchable: true\n        }\"\n        [attr.maxlength]=\"options?.maxLength || 18\"\n        data-role=\"sanctioned-currency-amount-selector\"\n        resultType=\"string\"\n        ngDefaultControl\n      >\n        <div bbValidationMessage>\n          <bb-payord-validation-message\n            [control]=\"group.get('amountGroup')\"\n            [validationMessages]=\"options?.validationMessages\"\n            [label]=\"options?.label || 'Amount'\"\n          ></bb-payord-validation-message>\n        </div>\n      </bb-currency-amount-selector>\n      <bb-input-validation-message-ui [showErrors]=\"response.message\">\n        <span i18n=\"@@load-error-message-curr\"\n          >Something went wrong. Reload the page or contact system\n          administrator.</span\n        >\n      </bb-input-validation-message-ui>\n    </ng-container>\n  </div>\n  <ng-template #loading>\n    <bb-loading-indicator-ui></bb-loading-indicator-ui>\n  </ng-template>\n\n  <ng-container *ngIf=\"exchangeRate$ | async as exchangeRate\">\n    <ng-container *ngIf=\"getCalculatedRate(exchangeRate) as calculatedRate\">\n      <ng-container i18n=\"@@approximatelyPriceLabel\"\n        >You pay approximately:</ng-container\n      >\n      <span class=\"bb-text-bold\">\n        &asymp;\n        <bb-amount-ui\n          [mapCurrency]=\"false\"\n          [amount]=\"calculatedRate.calculatedAmount\"\n          [currency]=\"calculatedRate.currencyFrom\"\n        ></bb-amount-ui>\n      </span>\n      <ng-container i18n=\"@@currency-exchange-rate\">\n        (1 {{ calculatedRate.currencyFrom }} &asymp; {{ calculatedRate.rate }}\n        {{ calculatedRate.currencyTo }})\n      </ng-container>\n    </ng-container>\n  </ng-container>\n\n  <div *ngIf=\"options?.exchangeRateError$ | async\">\n    <span i18n=\"@@load-error-message-rate\"\n      >Exchange rate for this currency pair is unavailable.</span\n    >\n  </div>\n\n  <div\n    class=\"bb-dynamic-input__desc bb-text-support bb-subtitle\"\n    *ngIf=\"options?.description\"\n    [textContent]=\"options?.description\"\n  ></div>\n</section>\n"]}