import { Component } from '@angular/core';
import { CounterPartyFields, HiddenFields, isAddressTruthy, PaymentBaseFields, PaymentFormFieldHooks, PaymentOptionFields, RemittanceInfoFields, } from '@backbase/payment-orders-ang';
import { tap, map } from 'rxjs/operators';
import { getParentForm, registerFormControl } from '../../helpers/form-helpers';
import { triggerHook } from '../../helpers/hooks-helpers';
import { ActivatableFormField } from '../../models/activatable-form-field';
import { VisibilityService } from '../../services/visibility.service';
import * as i0 from "@angular/core";
import * as i1 from "../../services/visibility.service";
import * as i2 from "@backbase/payment-orders-ang";
import * as i3 from "../validation-message/validation-message.component";
import * as i4 from "@angular/common";
import * as i5 from "@angular/forms";
export class PayordSanctionedCountrySelectorComponent extends ActivatableFormField {
    constructor(visibilityService) {
        super(visibilityService);
        this.visibilityService = visibilityService;
        this.countries = [];
        this.inputFormSettings = {};
        this.sanctionedCountries = {};
    }
    ngOnInit() {
        this.defaultCountry = this.options.defaultCountry || '';
        this.parentForm = getParentForm(this.group);
        this.control = registerFormControl(this.group, this.config.name, this.options.validators, this.options.asyncValidators, this.defaultCountry, this.config);
        this.inputFormSettingControl =
            this.parentForm.get(PaymentOptionFields.inputFormFromSettings) ||
                registerFormControl(this.parentForm, PaymentOptionFields.inputFormFromSettings);
        this.defaultBankCodeSettingControl =
            this.parentForm.get(HiddenFields.defaultBankCodeSetting) ||
                registerFormControl(this.parentForm, HiddenFields.defaultBankCodeSetting);
        this.defaultCountryControl = registerFormControl(this.parentForm, HiddenFields.sanctionedCountries);
        this.sanctionedCountriesControl = registerFormControl(this.parentForm, HiddenFields.sanctionedCountries);
        if (this.options.items$) {
            this.httpSubscription = this.options.items$
                .pipe(map((items) => this.mapCountries(items)), tap((countryCodes) => {
                var _a;
                this.countries = this.options.isWizardMode
                    ? countryCodes
                    : countryCodes.filter((country) => country !== this.defaultCountry);
                this.sanctionedCountriesControl.setValue(this.countries);
                if (!this.control.value &&
                    this.defaultCountry &&
                    ((_a = this.parentForm.get('isEditMode')) === null || _a === void 0 ? void 0 : _a.value)) {
                    this.control.setValue(this.defaultCountry);
                }
            }))
                .subscribe();
        }
        this.formSubscription = this.control.valueChanges.subscribe((value) => this.onChange(value));
        this.counterpartyIdControl = (this.parentForm.get([
            PaymentBaseFields.counterparty,
            CounterPartyFields.id,
        ]));
        this.toggleDependants();
        triggerHook(PaymentFormFieldHooks.onInit, this);
    }
    mapCountries(sanctionedCountries) {
        return sanctionedCountries.map((item) => {
            if (item.country === this.control.value) {
                this.inputFormSettingControl.reset();
                this.inputFormSettingControl.setValue(item);
            }
            if (item.inputFormSettings) {
                this.sanctionedCountries[item.country] = item;
                this.inputFormSettings[item.country] = item.inputFormSettings;
            }
            if (item.isDefault) {
                this.defaultCountry = item.country;
                this.defaultCountryControl.setValue(item.country);
                if (this.inputFormSettings[item.country]) {
                    this.inputFormSettings[item.country].forEach((setting) => {
                        if (setting.key === 'bank-code') {
                            this.defaultBankCodeSettingControl.setValue(setting);
                        }
                    });
                }
            }
            return item.country;
        });
    }
    onChange(val) {
        this.inputFormSettingControl.setValue(this.sanctionedCountries[val]);
        this.toggleDependants();
    }
    resetAddressGroup() {
        const addressGroup = ((this.control && this.control.parent ? this.control.parent : null));
        if (isAddressTruthy(addressGroup.value)) {
            for (const controlName in addressGroup.controls) {
                if (controlName !== 'country') {
                    addressGroup.controls[controlName].reset();
                }
            }
        }
    }
    ngOnDestroy() {
        if (this.formSubscription) {
            this.formSubscription.unsubscribe();
        }
        if (this.httpSubscription) {
            this.httpSubscription.unsubscribe();
        }
        triggerHook(PaymentFormFieldHooks.onDestroy, this);
    }
    resetPurposeOfPayment() {
        const popControl = this.parentForm.get([
            PaymentBaseFields.remittanceInfo,
            RemittanceInfoFields.purposeOfPayment,
        ]);
        if (popControl === null || popControl === void 0 ? void 0 : popControl.value) {
            popControl.reset();
        }
    }
    selectItem(country) {
        this.defaultCountry = country;
        this.control.setValue(country);
        this.resetAddressGroup();
        this.resetPurposeOfPayment();
    }
}
/** @nocollapse */ PayordSanctionedCountrySelectorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordSanctionedCountrySelectorComponent, deps: [{ token: i1.VisibilityService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PayordSanctionedCountrySelectorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordSanctionedCountrySelectorComponent, selector: "bb-payord-sanctioned-country-selector", usesInheritance: true, ngImport: i0, template: "<div\n  class=\"bb-dynamic-input form-group\"\n  *ngIf=\"!config?.hidden\"\n  [formGroup]=\"group\"\n  [ngClass]=\"options?.cssClasses\"\n>\n  <bb-select-country-dropdown\n    [formControlName]=\"config?.name\"\n    [countries]=\"countries\"\n    [label]=\"options?.label\"\n    [helperText]=\"options?.helperText\"\n    [placeholder]=\"options?.placeholder\"\n    [searchPlaceholder]=\"options?.searchPlaceholder\"\n    [dropdownIcon]=\"options?.dropdownIcon\"\n    [selectedCountry]=\"control.value\"\n    [isClosedPayment]=\"\n      parentForm.get('isClosedPayment')?.value || counterpartyIdControl?.value\n    \"\n    (selectCountry)=\"selectItem($event)\"\n    data-role=\"sanctioned-country-selector-dropdown\"\n  ></bb-select-country-dropdown>\n\n  <bb-payord-validation-message\n    [control]=\"group?.controls[config.name]\"\n    [validationMessages]=\"options?.validationMessages\"\n    [label]=\"options?.label\"\n  ></bb-payord-validation-message>\n\n  <div\n    class=\"bb-dynamic-input__desc bb-text-support bb-subtitle\"\n    [attr.aria-hidden]=\"!options?.description\"\n    [hidden]=\"!options?.description\"\n    [textContent]=\"options?.description || ''\"\n    #descElem\n  ></div>\n</div>\n", components: [{ type: i2.ӨSelectCountryDropdownComponent, selector: "bb-select-country-dropdown", inputs: ["countries", "selectedCountry", "helperText", "placeholder", "label", "searchPlaceholder", "dropdownIcon", "isClosedPayment"], outputs: ["selectCountry"] }, { type: i3.ValidationMessageComponent, selector: "bb-payord-validation-message", inputs: ["control", "validationMessages", "label", "id", "hideGeneric"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordSanctionedCountrySelectorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payord-sanctioned-country-selector',
                    templateUrl: 'payord-sanctioned-country-selector.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.VisibilityService }]; } });
//# sourceMappingURL=payord-sanctioned-country-selector.component.js.map