import { Component } from '@angular/core';
import { PaymentFormFieldHooks, ScheduleFields, } from '@backbase/payment-orders-ang';
import { Subject } from 'rxjs';
import { distinctUntilChanged, takeUntil } from 'rxjs/operators';
import { registerFormControl } from '../../helpers/form-helpers';
import { triggerHook } from '../../helpers/hooks-helpers';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/switch";
import * as i2 from "@backbase/ui-ang/icon";
import * as i3 from "../validation-message/validation-message.component";
import * as i4 from "@angular/common";
import * as i5 from "@angular/forms";
import * as i6 from "@backbase/ui-ang/tooltip-directive";
export class PayordScheduleSwitchComponent {
    constructor() {
        this.destroy$ = new Subject();
        this.id = new Date().getTime();
    }
    ngOnInit() {
        registerFormControl(this.group, this.config.name, this.options.validators, this.options.asyncValidators, this.options.defaultValue, this.config);
        registerFormControl(this.group, ScheduleFields.frequency);
        registerFormControl(this.group, ScheduleFields.scheduleInfo);
        triggerHook(PaymentFormFieldHooks.onInit, this);
        this.setValue();
    }
    ngOnDestroy() {
        triggerHook(PaymentFormFieldHooks.onDestroy, this);
        this.destroy$.next();
        this.destroy$.complete();
    }
    setValue() {
        var _a;
        // listen changes to reset value before hiding this component
        (_a = this.group.controls[this.config.name]) === null || _a === void 0 ? void 0 : _a.valueChanges.pipe(distinctUntilChanged(), takeUntil(this.destroy$)).subscribe((switchValue) => {
            var _a, _b, _c, _d;
            // the condition is added to avoid unnecessary subscriptions when the component is hidden
            if (!this.config.hidden) {
                const freqValue = switchValue
                    ? (_a = this.options.values) === null || _a === void 0 ? void 0 : _a.on
                    : (_b = this.options.values) === null || _b === void 0 ? void 0 : _b.off;
                const infoValue = switchValue ? this.options.description : undefined;
                (_c = this.group.controls[ScheduleFields.frequency]) === null || _c === void 0 ? void 0 : _c.patchValue(freqValue);
                (_d = this.group.controls[ScheduleFields.scheduleInfo]) === null || _d === void 0 ? void 0 : _d.patchValue(infoValue);
            }
        });
    }
}
/** @nocollapse */ PayordScheduleSwitchComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordScheduleSwitchComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PayordScheduleSwitchComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordScheduleSwitchComponent, selector: "bb-payord-schedule-switch-ui", ngImport: i0, template: "<ng-container *ngIf=\"!config?.hidden\">\n  <div\n    class=\"form-group bb-dynamic-input bb-schedule-switch\"\n    [formGroup]=\"group\"\n    [ngClass]=\"options?.cssClasses\"\n  >\n    <div class=\"bb-inline-stack bb-stack--align-top\">\n      <div class=\"bb-inline-stack__item--spacing-md\">\n        <bb-switch-ui\n          [id]=\"'bb-payord-schedule-switch-' + id\"\n          [formControlName]=\"config.name\"\n        >\n        </bb-switch-ui>\n      </div>\n      <div>\n        <div class=\"b-block bb-block--xs bb-stack bb-schedule-switch__label\">\n          <label\n            [attr.for]=\"'bb-payord-schedule-switch-' + id\"\n            *ngIf=\"options?.label\"\n            class=\"bb-stack__item bb-stack__item--spacing-xs bb-block bb-block--no-margin\"\n            >{{ options?.label }}</label\n          >\n          <span\n            [bbTooltip]=\"options?.tooltipMessage\"\n            placement=\"bottom\"\n            [triggers]=\"'hover'\"\n          >\n            <bb-icon-ui\n              name=\"info\"\n              color=\"secondary\"\n              size=\"sm\"\n              class=\"\"\n            ></bb-icon-ui>\n          </span>\n        </div>\n        <div\n          class=\"bb-subtitle bb-text-support bb-schedule-switch__description\"\n        >\n          <span\n            *ngIf=\"options?.description && group.controls[config.name]?.value\"\n            >{{ options?.description }}</span\n          >\n        </div>\n      </div>\n    </div>\n    <bb-payord-validation-message\n      [control]=\"group?.controls[config.name]\"\n      [validationMessages]=\"options?.validationMessages\"\n      [label]=\"options?.label\"\n    ></bb-payord-validation-message>\n  </div>\n</ng-container>\n", components: [{ type: i1.SwitchComponent, selector: "bb-switch-ui", inputs: ["labelPosition"] }, { type: i2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i3.ValidationMessageComponent, selector: "bb-payord-validation-message", inputs: ["control", "validationMessages", "label", "id", "hideGeneric"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i6.TooltipDirective, selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordScheduleSwitchComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payord-schedule-switch-ui',
                    templateUrl: './payord-schedule-switch.component.html',
                }]
        }] });
//# sourceMappingURL=payord-schedule-switch.component.js.map