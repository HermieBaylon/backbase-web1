import { Component, Input, ElementRef } from '@angular/core';
import { FormControl } from '@angular/forms';
import { toggleTabIndex } from '@backbase/payment-orders-ang';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/input-validation-message";
import * as i2 from "@angular/common";
export class ValidationMessageComponent {
    constructor(elRef) {
        this.elRef = elRef;
        /**
         * If Generic messages are not needed.
         */
        this.hideGeneric = false;
    }
    ngOnInit() {
        this.validationMessages = this.validationMessages || [];
    }
    getValidationMessage(error) {
        this.validationMessage = '';
        if (this.control.errors && this.validationMessages.length) {
            for (const msg of this.validationMessages) {
                if (error && msg.name === error) {
                    this.validationMessage = msg.message;
                    return this.validationMessage;
                }
                else if (this.control.errors[msg.name]) {
                    this.validationMessage = msg.message;
                    return this.validationMessage;
                }
            }
        }
        return this.validationMessage;
    }
    getRequiredMessage() {
        this.requiredMessage = this.getValidationMessage('required');
        return this.requiredMessage;
    }
    onFocusout() {
        toggleTabIndex('.bb-input-validation-message', this.elRef.nativeElement, false);
    }
}
/** @nocollapse */ ValidationMessageComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ValidationMessageComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ ValidationMessageComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ValidationMessageComponent, selector: "bb-payord-validation-message", inputs: { control: "control", validationMessages: "validationMessages", label: "label", id: "id", hideGeneric: "hideGeneric" }, ngImport: i0, template: "<bb-input-validation-message-ui\n  data-role=\"input-error\"\n  (focusout)=\"onFocusout()\"\n  *ngIf=\"control\"\n  [showErrors]=\"control?.touched && control?.invalid\"\n>\n  <ng-container\n    *ngIf=\"control.errors && control.errors['required']; else invalidError\"\n  >\n    <span data-role=\"required-error\" [attr.id]=\"id\">\n      <ng-container *ngIf=\"getRequiredMessage(); else requiredError\">\n        {{ requiredMessage }}\n      </ng-container>\n    </span>\n  </ng-container>\n\n  <ng-template #requiredError>\n    <ng-container\n      i18n=\"@@dynamic-form-field-default-validation-message.required.error\"\n    >\n      {{ label }} is required\n    </ng-container>\n  </ng-template>\n\n  <ng-template #invalidError>\n    <span data-role=\"required-error\" [attr.id]=\"id\">\n      <ng-container *ngIf=\"getValidationMessage(); else genericError\">\n        {{ validationMessage }}\n      </ng-container>\n    </span>\n  </ng-template>\n\n  <ng-template #genericError>\n    <ng-container\n      *ngIf=\"!hideGeneric\"\n      i18n=\"@@dynamic-form-field-default-validation-message.generic.error\"\n    >\n      Invalid {{ label }}\n    </ng-container>\n  </ng-template>\n</bb-input-validation-message-ui>\n", components: [{ type: i1.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ValidationMessageComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payord-validation-message',
                    templateUrl: './validation-message.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { control: [{
                type: Input
            }], validationMessages: [{
                type: Input
            }], label: [{
                type: Input
            }], id: [{
                type: Input
            }], hideGeneric: [{
                type: Input
            }] } });
//# sourceMappingURL=validation-message.component.js.map