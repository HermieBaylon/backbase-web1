import { Component } from '@angular/core';
import { Validators, } from '@angular/forms';
import { amountValidator, RemittanceInfoFields, PaymentFormFieldHooks, PaymentBaseFields, } from '@backbase/payment-orders-ang';
import { registerFormGroup } from '../../helpers/form-helpers';
import { triggerHook } from '../../helpers/hooks-helpers';
import { startWith, tap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/amount-input";
import * as i2 from "../validation-message/validation-message.component";
import * as i3 from "@angular/common";
import * as i4 from "@angular/forms";
export class PayordCompactAmountComponent {
    constructor() {
        this.remittanceInfoFields = RemittanceInfoFields;
        this.initialAmount = {
            [RemittanceInfoFields.amount]: '',
            [RemittanceInfoFields.currency]: '',
        };
        this.id = new Date().getTime();
    }
    ngOnInit() {
        var _a, _b, _c, _d, _e, _f;
        this.amountGroup = registerFormGroup(this.group, this.config.name, {
            [RemittanceInfoFields.amount]: [
                ((_a = this.options.defaultValue) === null || _a === void 0 ? void 0 : _a.amount) || this.initialAmount.amount,
            ],
            [RemittanceInfoFields.currency]: [
                ((_b = this.options.defaultValue) === null || _b === void 0 ? void 0 : _b.currency) || this.initialAmount.currency,
            ],
        }, [Validators.required, amountValidator], this.options.asyncValidators);
        this.fromAccountProduct$ = (_d = ((_c = this.group.parent) === null || _c === void 0 ? void 0 : _c.get(PaymentBaseFields.initiator))) === null || _d === void 0 ? void 0 : _d.valueChanges.pipe(startWith((_f = (_e = this.group.parent) === null || _e === void 0 ? void 0 : _e.get(PaymentBaseFields.initiator)) === null || _f === void 0 ? void 0 : _f.value), tap((initiator) => {
            var _a;
            return (_a = this.amountGroup
                .get(RemittanceInfoFields.currency)) === null || _a === void 0 ? void 0 : _a.patchValue((initiator === null || initiator === void 0 ? void 0 : initiator.currency) || this.options.currency);
        }));
        triggerHook(PaymentFormFieldHooks.onInit, this);
    }
    ngOnDestroy() {
        triggerHook(PaymentFormFieldHooks.onDestroy, this);
    }
}
/** @nocollapse */ PayordCompactAmountComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordCompactAmountComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PayordCompactAmountComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordCompactAmountComponent, selector: "bb-payord-compact-amount-ui", ngImport: i0, template: "<section\n  class=\"form-group bb-dynamic-input\"\n  [formGroup]=\"amountGroup\"\n  [ngClass]=\"options?.cssClasses\"\n  *ngIf=\"!config?.hidden\"\n  [class.was-validated]=\"\n    group.get(config.name)?.invalid && group.get(config.name)?.touched\n  \"\n>\n  <label [attr.for]=\"'bb-compact-amount-' + id\" *ngIf=\"options?.label\">{{\n    options?.label\n  }}</label>\n  <div class=\"position-relative\">\n    <bb-amount-input-ui\n      [id]=\"'bb-compact-amount-' + id\"\n      [formControlName]=\"remittanceInfoFields.amount\"\n      [mapCurrency]=\"options?.showCurrencySymbol !== false\"\n      [currency]=\"(fromAccountProduct$ | async)?.currency || options?.currency\"\n      [placeholder]=\"options?.placeholder || '0.00'\"\n      [required]=\"true\"\n      [wrapperClasses]=\"\n        options.wrapperClasses || 'bb-amount-input__field--large'\n      \"\n      [autoDecimal]=\"options.autoDecimal\"\n      [maxLength]=\"options?.maxLength\"\n      [aria-describedby]=\"'compact-amount-error-message-' + id\"\n    ></bb-amount-input-ui>\n  </div>\n  <bb-payord-validation-message\n    [id]=\"'compact-amount-error-message-' + id\"\n    [control]=\"group.get(config.name)\"\n    [validationMessages]=\"options?.validationMessages\"\n    [label]=\"options?.label || 'Amount'\"\n  ></bb-payord-validation-message>\n</section>\n", components: [{ type: i1.AmountInputComponent, selector: "bb-amount-input-ui", inputs: ["placeholder", "maxLength", "wrapperClasses", "mapCurrency", "currency", "autoDecimal"] }, { type: i2.ValidationMessageComponent, selector: "bb-payord-validation-message", inputs: ["control", "validationMessages", "label", "id", "hideGeneric"] }], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i4.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i3.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i4.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }], pipes: { "async": i3.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordCompactAmountComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payord-compact-amount-ui',
                    templateUrl: './payord-compact-amount.component.html',
                }]
        }] });
//# sourceMappingURL=payord-compact-amount.component.js.map