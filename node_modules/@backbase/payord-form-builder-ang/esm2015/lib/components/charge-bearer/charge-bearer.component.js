import { Component } from '@angular/core';
import { registerFormControl } from '../../helpers/form-helpers';
import { ActivatableFormField } from '../../models/activatable-form-field';
import { VisibilityService } from '../../services/visibility.service';
import { triggerHook } from '../../helpers/hooks-helpers';
import { PaymentFormFieldHooks, PaymentOptionFields, TemplateModeType, } from '@backbase/payment-orders-ang';
import { Validators } from '@angular/forms';
import { startWith, tap } from 'rxjs/operators';
import { BehaviorSubject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "../../services/visibility.service";
import * as i2 from "@backbase/ui-ang/input-radio-group";
import * as i3 from "../validation-message/validation-message.component";
import * as i4 from "@angular/common";
import * as i5 from "@angular/forms";
import * as i6 from "../../directives/dynamic-aria-attribute.directive";
export class PayordChargeBearerComponent extends ActivatableFormField {
    constructor(visibilityService) {
        super(visibilityService);
        this.visibilityService = visibilityService;
        this.chargeBearerOptionsSubject$ = new BehaviorSubject([]);
        this.chargeBearerOptions$ = this.chargeBearerOptionsSubject$.asObservable();
    }
    ngOnInit() {
        this.control = registerFormControl(this.group, this.config.name, this.options.validators, this.options.asyncValidators, this.options.defaultValue, this.config);
        this.chargeBearerOptionsControl = registerFormControl(this.group, PaymentOptionFields.chargeBearerOptions);
        if (this.chargeBearerOptionsControl) {
            this.subscription = this.chargeBearerOptionsControl.valueChanges
                .pipe(startWith(this.chargeBearerOptionsControl.value), tap((chargeBearerOptions) => {
                chargeBearerOptions = chargeBearerOptions || [];
                this.control.setValidators(chargeBearerOptions.length ? Validators.required : null);
                this.control.updateValueAndValidity();
                if (this.control.value &&
                    chargeBearerOptions.length &&
                    chargeBearerOptions.indexOf(this.control.value) === -1 &&
                    this.options.templateModeType !== TemplateModeType.EDIT) {
                    this.control.reset();
                }
                this.chargeBearerOptionsSubject$.next(chargeBearerOptions);
            }))
                .subscribe();
        }
        this.toggleDependants();
        triggerHook(PaymentFormFieldHooks.onInit, this);
    }
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
        triggerHook(PaymentFormFieldHooks.onDestroy, this);
    }
}
/** @nocollapse */ PayordChargeBearerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordChargeBearerComponent, deps: [{ token: i1.VisibilityService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PayordChargeBearerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordChargeBearerComponent, selector: "bb-charge-bearer", usesInheritance: true, ngImport: i0, template: "<ng-container *ngIf=\"chargeBearerOptions$ | async as chargeBearerOptions\">\n  <ng-container *ngIf=\"chargeBearerOptions.length\">\n    <div\n      *ngIf=\"!config?.hidden\"\n      class=\"bb-dynamic-input form-group charge-bearer-options\"\n      [formGroup]=\"group\"\n      [ngClass]=\"options?.cssClasses\"\n    >\n      <div class=\"bb-label\" [textContent]=\"options?.label || ''\"></div>\n      <span\n        class=\"bb-dynamic-input__helper-text bb-text-support\"\n        *ngIf=\"options?.helperText\"\n        [id]=\"inputEl?.id + '__desc'\"\n        [textContent]=\"options?.helperText\"\n      >\n      </span>\n\n      <bb-input-radio-group-ui\n        [label]=\"options?.label\"\n        [formControlName]=\"config?.name\"\n        (change)=\"toggleDependants()\"\n        [horizontal]=\"options?.horizontal\"\n        [preselect]=\"options?.preselect\"\n        data-role=\"charge-bearer-radio-group\"\n        [bbDynamicAriaAttribute]=\"{\n          charge_bearer__error: control?.touched && control?.invalid,\n          charge_bearer__desc: options?.description\n        }\"\n        [prependInputId]=\"false\"\n        inputSelector=\".bb-input-radio-group\"\n        #inputEl\n      >\n        <bb-input-radio-ui\n          *ngFor=\"let option of chargeBearerOptions\"\n          [value]=\"option\"\n          [labelTemplate]=\"paymentOptionTmpl\"\n          [labelTemplateContext]=\"option\"\n          [attr.data-role]=\"option\"\n        ></bb-input-radio-ui>\n      </bb-input-radio-group-ui>\n      <bb-payord-validation-message\n        [control]=\"group?.controls[config.name]\"\n        [validationMessages]=\"options?.validationMessages\"\n        [label]=\"options?.label\"\n        [id]=\"'charge_bearer__error'\"\n      ></bb-payord-validation-message>\n\n      <div\n        class=\"bb-dynamic-input__desc bb-text-support bb-subtitle\"\n        [attr.aria-hidden]=\"!options?.description\"\n        [hidden]=\"!options?.description\"\n        [id]=\"'charge_bearer__desc'\"\n        [textContent]=\"options?.description || ''\"\n        #descElem\n      ></div>\n    </div>\n  </ng-container>\n</ng-container>\n\n<ng-template let-context=\"labelTemplateContext\" #paymentOptionTmpl>\n  <ng-container [ngSwitch]=\"context\">\n    <div class=\"font-weight-normal\" *ngSwitchCase=\"'OUR'\">\n      I pay all fees (OUR)\n      <div *ngIf=\"control?.value === 'OUR'\" class=\"bb-text-support bb-subtitle\">\n        The beneficiary receives the payment amount in full. You pay the fees\n        charged by our bank initially (fees will be charged separately). You\n        will also pay the fees charged by the payee\u2019s bank, including any\n        correspondent/intermediary fees (this could be days or weeks after you\n        have made the payment).\n      </div>\n    </div>\n    <div class=\"font-weight-normal\" *ngSwitchCase=\"'BEN'\">\n      <div>Beneficiary pays all fees (BEN)</div>\n      <div *ngIf=\"control?.value === 'BEN'\" class=\"bb-text-support bb-subtitle\">\n        The beneficiary pays any fees charged by our bank and/or the recipient\n        bank (including any correspondent/intermediary fees). The beneficiary\n        will typically receive the payment minus the transfer charges.\n      </div>\n    </div>\n    <div class=\"font-weight-normal\" *ngSwitchCase=\"'SHA'\">\n      <div>Fees are shared (SHA)</div>\n      <div *ngIf=\"control?.value === 'SHA'\" class=\"bb-text-support bb-subtitle\">\n        You pay the fees charged by our bank (fees will be charged separately).\n        The beneficiary will pay all fees charged by their bank, including any\n        correspondent/intermediary fees.\n      </div>\n    </div>\n  </ng-container>\n</ng-template>\n", components: [{ type: i2.InputRadioGroupComponent, selector: "bb-input-radio-group-ui", inputs: ["horizontal", "preselect", "name", "verticalAlign"] }, { type: i2.InputRadioComponent, selector: "bb-input-radio-ui", inputs: ["labelTemplate", "labelTemplateContext", "value", "label", "aria-label", "aria-labelledby", "aria-describedby", "role", "aria-activedescendant", "aria-expanded", "aria-invalid", "aria-owns", "disabled"] }, { type: i3.ValidationMessageComponent, selector: "bb-payord-validation-message", inputs: ["control", "validationMessages", "label", "id", "hideGeneric"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i6.DynamicAriaAttributeDirective, selector: "[bbDynamicAriaAttribute]", inputs: ["bbDynamicAriaAttribute", "prependInputId", "inputSelector", "ariaAttributeName"] }, { type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i4.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i4.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }], pipes: { "async": i4.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordChargeBearerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-charge-bearer',
                    templateUrl: './charge-bearer.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.VisibilityService }]; } });
//# sourceMappingURL=charge-bearer.component.js.map