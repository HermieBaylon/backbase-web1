import { Component } from '@angular/core';
import { InitiatorFields, PaymentBaseFields, PaymentOptionFields, RemittanceInfoFields, } from '@backbase/payment-orders-ang';
import { ChargeBearer } from '@backbase/payment-orders-ang';
import BigNumber from 'bignumber.js';
import { BehaviorSubject, combineLatest } from 'rxjs';
import { distinctUntilChanged, startWith } from 'rxjs/operators';
import { registerFormControl } from '../../helpers/form-helpers';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/amount";
import * as i2 from "@angular/common";
export class PayordPaymentCostComponent {
    constructor() {
        this.defaultCurrency = 'USD';
        this.paymentCostInfo$ = new BehaviorSubject(undefined);
        this.fromCurrency = '';
        this.exchangeRate = 0;
        this.instructionPriority = false;
        this.isTotalAmountDisplayed = true;
    }
    ngOnInit() {
        this.fromCurrencyControl = this.group.get(`${PaymentBaseFields.initiator}.${InitiatorFields.currency}`);
        this.amountControl = this.group.get(`${PaymentBaseFields.remittanceInfo}.${RemittanceInfoFields.amountCurrencyGroup}`);
        this.instructionPriorityControl = this.group.get(`${PaymentBaseFields.remittanceInfo}.${RemittanceInfoFields.urgent}`);
        this.transferFeeControl =
            this.group.get(PaymentOptionFields.transferFee) ||
                registerFormControl(this.group, PaymentOptionFields.transferFee);
        this.chargeBearerControl =
            this.group.get(PaymentOptionFields.chargeBearer) ||
                registerFormControl(this.group, PaymentOptionFields.chargeBearer);
        this.exchangeRateControl =
            this.group.get(PaymentOptionFields.exchangeRate) ||
                registerFormControl(this.group, PaymentOptionFields.exchangeRate);
        this.paymentTypeNameControl = this.group.get(PaymentOptionFields.paymentTypeName);
        this.listenChanges();
    }
    getTotalCost(transferFee, calculatedAmount = 0) {
        const fee = new BigNumber((transferFee === null || transferFee === void 0 ? void 0 : transferFee.amount) || '0');
        const amount = new BigNumber(calculatedAmount || this.amount.amount || '0');
        return amount.plus(fee).toString();
    }
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
    hasForexInfo(fromCurrency = '', toCurrency = '', exchangeRate = 0) {
        return (!!fromCurrency &&
            !!toCurrency &&
            fromCurrency !== toCurrency &&
            exchangeRate !== 0);
    }
    listenChanges() {
        if (this.amountControl &&
            this.fromCurrencyControl &&
            this.instructionPriorityControl) {
            this.subscription = combineLatest([
                this.fromCurrencyControl.valueChanges.pipe(startWith(this.fromCurrencyControl.value), distinctUntilChanged()),
                this.amountControl.valueChanges.pipe(startWith(this.amountControl.value), distinctUntilChanged()),
                this.transferFeeControl.valueChanges.pipe(startWith(this.transferFeeControl.value), distinctUntilChanged()),
                this.chargeBearerControl.valueChanges.pipe(startWith(this.chargeBearerControl.value), distinctUntilChanged()),
                this.exchangeRateControl.valueChanges.pipe(startWith(this.exchangeRateControl.value), distinctUntilChanged()),
                this.instructionPriorityControl.valueChanges.pipe(startWith(this.instructionPriorityControl.value), distinctUntilChanged()),
            ]).subscribe(([fromCurrency, amount, transferFee, chargeBearer, exchangeRate, instructionPriority,]) => {
                var _a;
                this.fromCurrency = fromCurrency;
                this.amount = amount;
                this.exchangeRate = exchangeRate;
                this.instructionPriority = instructionPriority;
                this.isTotalAmountDisplayed =
                    !!this.exchangeRate || this.fromCurrency === this.amount.currency;
                const fee = Object.assign({}, transferFee);
                if (chargeBearer === ChargeBearer.BEN) {
                    // If chargebearer is beneficiary then set transfer fee to 0
                    fee.amount = '0';
                }
                if (chargeBearer && !((_a = this.options) === null || _a === void 0 ? void 0 : _a.isTemplateMode)) {
                    const _amountByRate = new BigNumber(amount.amount || '0').dividedBy(exchangeRate);
                    const calculatedAmount = !!exchangeRate
                        ? _amountByRate.toString()
                        : amount.amount;
                    this.paymentCostInfo$.next({
                        transferFee: fee,
                        hasForexInfo: this.hasForexInfo(fromCurrency, amount.currency, exchangeRate),
                        rate: exchangeRate,
                        fromCurrency: this.fromCurrency,
                        toCurrency: this.amount.currency,
                        calculatedAmount,
                    });
                }
            });
        }
    }
}
/** @nocollapse */ PayordPaymentCostComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordPaymentCostComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PayordPaymentCostComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordPaymentCostComponent, selector: "bb-payment-cost", ngImport: i0, template: "<section\n  class=\"bb-block--md col-12 bb-dynamic-input\"\n  *ngIf=\"paymentCostInfo$ | async as paymentCostInfo\"\n>\n  <ng-container *ngIf=\"paymentCostInfo.transferFee?.amount\">\n    <ng-container\n      *ngIf=\"paymentCostInfo?.hasForexInfo; else sameCurrencyTransferTmpl\"\n    >\n      <hr />\n      <div\n        class=\"bb-heading-3 bb-block bb-block--md d-flex justify-content-between\"\n      >\n        <div i18n=\"@@bb-dynamic-input-payment-cost.transfer-amount.title\">\n          Transfer amount\n        </div>\n        <bb-amount-ui\n          data-role=\"transfer-amount\"\n          [mapCurrency]=\"false\"\n          [amount]=\"amount.amount || '0'\"\n          [currency]=\"amount.currency || defaultCurrency\"\n        >\n        </bb-amount-ui>\n      </div>\n\n      <div\n        [hidden]=\"!paymentCostInfo.calculatedAmount\"\n        class=\"bb-block bb-block--md d-flex justify-content-between\"\n      >\n        <div i18n=\"@@bb-dynamic-amount-you-pay-label.title\">\n          Amount you pay\n          <span data-role=\"exchange-rate\"\n            >(1 {{ paymentCostInfo.fromCurrency }} &asymp;\n            {{ paymentCostInfo.rate }} {{ paymentCostInfo.toCurrency }})</span\n          >\n        </div>\n        <div data-role=\"amount-you-pay\">\n          &asymp;\n          <bb-amount-ui\n            [mapCurrency]=\"false\"\n            [amount]=\"paymentCostInfo?.calculatedAmount || '0'\"\n            [currency]=\"paymentCostInfo?.fromCurrency\"\n          ></bb-amount-ui>\n        </div>\n      </div>\n      <div class=\"bb-block bb-block--md d-flex justify-content-between\">\n        <div\n          *ngIf=\"paymentTypeNameControl?.value\"\n          i18n=\"@@bb-dynamic-input-payment-cost.fee.title\"\n        >\n          Transfer fee - {{ paymentTypeNameControl?.value }}\n        </div>\n        <bb-amount-ui\n          data-role=\"payment-fee\"\n          [mapCurrency]=\"false\"\n          [amount]=\"paymentCostInfo.transferFee?.amount || '0'\"\n          [currency]=\"paymentCostInfo.transferFee?.currencyCode\"\n        >\n        </bb-amount-ui>\n      </div>\n      <div\n        *ngIf=\"isTotalAmountDisplayed\"\n        class=\"bb-text-bold bb-block bb-block--md d-flex justify-content-between\"\n      >\n        <div i18n=\"@@bb-dynamic-input-payment-cost.total.title\">Total</div>\n        <div>\n          &asymp;\n          <bb-amount-ui\n            data-role=\"total-amount-to-pay\"\n            [mapCurrency]=\"false\"\n            [amount]=\"\n              getTotalCost(\n                paymentCostInfo.transferFee,\n                paymentCostInfo.calculatedAmount\n              )\n            \"\n            [currency]=\"paymentCostInfo.fromCurrency\"\n          >\n          </bb-amount-ui>\n        </div>\n      </div>\n    </ng-container>\n\n    <ng-template #sameCurrencyTransferTmpl>\n      <div>\n        <hr />\n        <div\n          class=\"bb-heading-3 bb-block bb-block--md d-flex justify-content-between\"\n        >\n          <div i18n=\"@@bb-dynamic-input-payment-cost.amount.title\">Amount</div>\n          <bb-amount-ui\n            data-role=\"amount-you-pay\"\n            [mapCurrency]=\"false\"\n            [amount]=\"amount.amount || '0'\"\n            [currency]=\"amount.currency || defaultCurrency\"\n          ></bb-amount-ui>\n        </div>\n        <div class=\"bb-block bb-block--md d-flex justify-content-between\">\n          <div\n            *ngIf=\"paymentTypeNameControl?.value\"\n            i18n=\"@@bb-dynamic-input-payment-cost.fee.title\"\n          >\n            Transfer fee - {{ paymentTypeNameControl?.value }}\n          </div>\n          <bb-amount-ui\n            data-role=\"payment-fee\"\n            [mapCurrency]=\"false\"\n            [amount]=\"paymentCostInfo.transferFee?.amount || '0'\"\n            [currency]=\"paymentCostInfo.transferFee?.currencyCode\"\n          >\n          </bb-amount-ui>\n        </div>\n        <div\n          *ngIf=\"isTotalAmountDisplayed\"\n          class=\"bb-text-bold bb-block bb-block--md d-flex justify-content-between\"\n        >\n          <div i18n=\"@@bb-dynamic-input-payment-cost.total.title\">Total</div>\n          <bb-amount-ui\n            data-role=\"total-amount\"\n            [mapCurrency]=\"false\"\n            [amount]=\"getTotalCost(paymentCostInfo.transferFee)\"\n            [currency]=\"amount.currency || defaultCurrency\"\n          >\n          </bb-amount-ui>\n        </div>\n      </div>\n    </ng-template>\n  </ng-container>\n</section>\n", components: [{ type: i1.AmountComponent, selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i2.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordPaymentCostComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payment-cost',
                    templateUrl: './payment-cost.component.html',
                }]
        }] });
//# sourceMappingURL=payment-cost.component.js.map