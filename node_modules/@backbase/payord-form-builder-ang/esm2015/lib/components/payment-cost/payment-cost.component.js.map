{"version":3,"file":"payment-cost.component.js","sourceRoot":"","sources":["../../../../../../../libs/payord-form-builder-ang/src/lib/components/payment-cost/payment-cost.component.ts","../../../../../../../libs/payord-form-builder-ang/src/lib/components/payment-cost/payment-cost.component.html"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAqB,MAAM,eAAe,CAAC;AAE7D,OAAO,EAGL,eAAe,EACf,iBAAiB,EAGjB,mBAAmB,EACnB,oBAAoB,GACrB,MAAM,8BAA8B,CAAC;AACtC,OAAO,EAAE,YAAY,EAAmB,MAAM,8BAA8B,CAAC;AAC7E,OAAO,SAAS,MAAM,cAAc,CAAC;AACrC,OAAO,EAAE,eAAe,EAAE,aAAa,EAAgB,MAAM,MAAM,CAAC;AACpE,OAAO,EAAE,oBAAoB,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AACjE,OAAO,EAAE,mBAAmB,EAAE,MAAM,4BAA4B,CAAC;;;;AAMjE,MAAM,OAAO,0BAA0B;IAJvC;QAKW,oBAAe,GAAG,KAAK,CAAC;QAYjC,qBAAgB,GAAG,IAAI,eAAe,CACpC,SAAS,CACV,CAAC;QAOF,iBAAY,GAAG,EAAE,CAAC;QAClB,iBAAY,GAAG,CAAC,CAAC;QACjB,wBAAmB,GAAG,KAAK,CAAC;QAC5B,2BAAsB,GAAG,IAAI,CAAC;KAqI/B;IAnIC,QAAQ;QACN,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CACvC,GAAG,iBAAiB,CAAC,SAAS,IAAI,eAAe,CAAC,QAAQ,EAAE,CAC7D,CAAC;QACF,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CACjC,GAAG,iBAAiB,CAAC,cAAc,IAAI,oBAAoB,CAAC,mBAAmB,EAAE,CAClF,CAAC;QACF,IAAI,CAAC,0BAA0B,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAC9C,GAAG,iBAAiB,CAAC,cAAc,IAAI,oBAAoB,CAAC,MAAM,EAAE,CACrE,CAAC;QAEF,IAAI,CAAC,kBAAkB;YACrB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,mBAAmB,CAAC,WAAW,CAAC;gBAC/C,mBAAmB,CAAC,IAAI,CAAC,KAAK,EAAE,mBAAmB,CAAC,WAAW,CAAC,CAAC;QAEnE,IAAI,CAAC,mBAAmB;YACtB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,mBAAmB,CAAC,YAAY,CAAC;gBAChD,mBAAmB,CAAC,IAAI,CAAC,KAAK,EAAE,mBAAmB,CAAC,YAAY,CAAC,CAAC;QAEpE,IAAI,CAAC,mBAAmB;YACtB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,mBAAmB,CAAC,YAAY,CAAC;gBAChD,mBAAmB,CAAC,IAAI,CAAC,KAAK,EAAE,mBAAmB,CAAC,YAAY,CAAC,CAAC;QAEpE,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAC1C,mBAAmB,CAAC,eAAe,CACpC,CAAC;QAEF,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC;IAED,YAAY,CAAC,WAAsB,EAAE,gBAAgB,GAAG,CAAC;QACvD,MAAM,GAAG,GAAG,IAAI,SAAS,CAAC,CAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,MAAM,KAAI,GAAG,CAAC,CAAC;QACtD,MAAM,MAAM,GAAG,IAAI,SAAS,CAAC,gBAAgB,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,IAAI,GAAG,CAAC,CAAC;QAC5E,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAC;IACrC,CAAC;IAED,WAAW;QACT,IAAI,IAAI,CAAC,YAAY,EAAE;YACrB,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC;SACjC;IACH,CAAC;IAED,YAAY,CAAC,YAAY,GAAG,EAAE,EAAE,UAAU,GAAG,EAAE,EAAE,YAAY,GAAG,CAAC;QAC/D,OAAO,CACL,CAAC,CAAC,YAAY;YACd,CAAC,CAAC,UAAU;YACZ,YAAY,KAAK,UAAU;YAC3B,YAAY,KAAK,CAAC,CACnB,CAAC;IACJ,CAAC;IAED,aAAa;QACX,IACE,IAAI,CAAC,aAAa;YAClB,IAAI,CAAC,mBAAmB;YACxB,IAAI,CAAC,0BAA0B,EAC/B;YACA,IAAI,CAAC,YAAY,GAAG,aAAa,CAAC;gBAChC,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,IAAI,CACxC,SAAS,CAAC,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,EACzC,oBAAoB,EAAE,CACvB;gBACD,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,IAAI,CAClC,SAAS,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,EACnC,oBAAoB,EAAE,CACvB;gBACD,IAAI,CAAC,kBAAkB,CAAC,YAAY,CAAC,IAAI,CACvC,SAAS,CAAC,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,EACxC,oBAAoB,EAAE,CACvB;gBACD,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,IAAI,CACxC,SAAS,CAAC,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,EACzC,oBAAoB,EAAE,CACvB;gBACD,IAAI,CAAC,mBAAmB,CAAC,YAAY,CAAC,IAAI,CACxC,SAAS,CAAC,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,EACzC,oBAAoB,EAAE,CACvB;gBACD,IAAI,CAAC,0BAA0B,CAAC,YAAY,CAAC,IAAI,CAC/C,SAAS,CAAC,IAAI,CAAC,0BAA0B,CAAC,KAAK,CAAC,EAChD,oBAAoB,EAAE,CACvB;aACF,CAAC,CAAC,SAAS,CACV,CAAC,CACC,YAAY,EACZ,MAAM,EACN,WAAW,EACX,YAAY,EACZ,YAAY,EACZ,mBAAmB,EACpB,EAAE,EAAE;;gBACH,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;gBACjC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;gBACrB,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;gBACjC,IAAI,CAAC,mBAAmB,GAAG,mBAAmB,CAAC;gBAE/C,IAAI,CAAC,sBAAsB;oBACzB,CAAC,CAAC,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,YAAY,KAAK,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC;gBAEpE,MAAM,GAAG,qBAAQ,WAAW,CAAE,CAAC;gBAE/B,IAAI,YAAY,KAAK,YAAY,CAAC,GAAG,EAAE;oBACrC,4DAA4D;oBAC5D,GAAG,CAAC,MAAM,GAAG,GAAG,CAAC;iBAClB;gBAED,IAAI,YAAY,IAAI,CAAC,CAAA,MAAA,IAAI,CAAC,OAAO,0CAAE,cAAc,CAAA,EAAE;oBACjD,MAAM,aAAa,GAAG,IAAI,SAAS,CAAC,MAAM,CAAC,MAAM,IAAI,GAAG,CAAC,CAAC,SAAS,CACjE,YAAY,CACb,CAAC;oBACF,MAAM,gBAAgB,GAAG,CAAC,CAAC,YAAY;wBACrC,CAAC,CAAC,aAAa,CAAC,QAAQ,EAAE;wBAC1B,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC;oBAElB,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC;wBACzB,WAAW,EAAE,GAAG;wBAChB,YAAY,EAAE,IAAI,CAAC,YAAY,CAC7B,YAAY,EACZ,MAAM,CAAC,QAAQ,EACf,YAAY,CACb;wBACD,IAAI,EAAE,YAAY;wBAClB,YAAY,EAAE,IAAI,CAAC,YAAY;wBAC/B,UAAU,EAAE,IAAI,CAAC,MAAM,CAAC,QAAQ;wBAChC,gBAAgB;qBACjB,CAAC,CAAC;iBACJ;YACH,CAAC,CACF,CAAC;SACH;IACH,CAAC;;2IA7JU,0BAA0B;+HAA1B,0BAA0B,uDCtBvC,g8IAgIA;4FD1Ga,0BAA0B;kBAJtC,SAAS;mBAAC;oBACT,QAAQ,EAAE,iBAAiB;oBAC3B,WAAW,EAAE,+BAA+B;iBAC7C","sourcesContent":["import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { AbstractControl, FormGroup } from '@angular/forms';\nimport {\n  Currency,\n  Hideable,\n  InitiatorFields,\n  PaymentBaseFields,\n  PaymentFormFieldConfig,\n  PaymentFormFieldOptions,\n  PaymentOptionFields,\n  RemittanceInfoFields,\n} from '@backbase/payment-orders-ang';\nimport { ChargeBearer, PaymentCostInfo } from '@backbase/payment-orders-ang';\nimport BigNumber from 'bignumber.js';\nimport { BehaviorSubject, combineLatest, Subscription } from 'rxjs';\nimport { distinctUntilChanged, startWith } from 'rxjs/operators';\nimport { registerFormControl } from '../../helpers/form-helpers';\n\n@Component({\n  selector: 'bb-payment-cost',\n  templateUrl: './payment-cost.component.html',\n})\nexport class PayordPaymentCostComponent implements OnInit, OnDestroy {\n  readonly defaultCurrency = 'USD';\n  options!: PaymentFormFieldOptions;\n  config!: PaymentFormFieldConfig & Hideable;\n  group!: FormGroup;\n  amountControl!: AbstractControl | null;\n  fromCurrencyControl!: AbstractControl | null;\n  chargeBearerControl!: AbstractControl;\n  transferFeeControl!: AbstractControl;\n  exchangeRateControl!: AbstractControl;\n  instructionPriorityControl!: AbstractControl | null;\n  paymentTypeNameControl!: AbstractControl | null;\n\n  paymentCostInfo$ = new BehaviorSubject<PaymentCostInfo | undefined>(\n    undefined\n  );\n\n  amount!: {\n    [RemittanceInfoFields.amount]: string;\n    [RemittanceInfoFields.currency]: string;\n  };\n  subscription?: Subscription;\n  fromCurrency = '';\n  exchangeRate = 0;\n  instructionPriority = false;\n  isTotalAmountDisplayed = true;\n\n  ngOnInit() {\n    this.fromCurrencyControl = this.group.get(\n      `${PaymentBaseFields.initiator}.${InitiatorFields.currency}`\n    );\n    this.amountControl = this.group.get(\n      `${PaymentBaseFields.remittanceInfo}.${RemittanceInfoFields.amountCurrencyGroup}`\n    );\n    this.instructionPriorityControl = this.group.get(\n      `${PaymentBaseFields.remittanceInfo}.${RemittanceInfoFields.urgent}`\n    );\n\n    this.transferFeeControl =\n      this.group.get(PaymentOptionFields.transferFee) ||\n      registerFormControl(this.group, PaymentOptionFields.transferFee);\n\n    this.chargeBearerControl =\n      this.group.get(PaymentOptionFields.chargeBearer) ||\n      registerFormControl(this.group, PaymentOptionFields.chargeBearer);\n\n    this.exchangeRateControl =\n      this.group.get(PaymentOptionFields.exchangeRate) ||\n      registerFormControl(this.group, PaymentOptionFields.exchangeRate);\n\n    this.paymentTypeNameControl = this.group.get(\n      PaymentOptionFields.paymentTypeName\n    );\n\n    this.listenChanges();\n  }\n\n  getTotalCost(transferFee?: Currency, calculatedAmount = 0): string {\n    const fee = new BigNumber(transferFee?.amount || '0');\n    const amount = new BigNumber(calculatedAmount || this.amount.amount || '0');\n    return amount.plus(fee).toString();\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  hasForexInfo(fromCurrency = '', toCurrency = '', exchangeRate = 0) {\n    return (\n      !!fromCurrency &&\n      !!toCurrency &&\n      fromCurrency !== toCurrency &&\n      exchangeRate !== 0\n    );\n  }\n\n  listenChanges() {\n    if (\n      this.amountControl &&\n      this.fromCurrencyControl &&\n      this.instructionPriorityControl\n    ) {\n      this.subscription = combineLatest([\n        this.fromCurrencyControl.valueChanges.pipe(\n          startWith(this.fromCurrencyControl.value),\n          distinctUntilChanged()\n        ),\n        this.amountControl.valueChanges.pipe(\n          startWith(this.amountControl.value),\n          distinctUntilChanged()\n        ),\n        this.transferFeeControl.valueChanges.pipe(\n          startWith(this.transferFeeControl.value),\n          distinctUntilChanged()\n        ),\n        this.chargeBearerControl.valueChanges.pipe(\n          startWith(this.chargeBearerControl.value),\n          distinctUntilChanged()\n        ),\n        this.exchangeRateControl.valueChanges.pipe(\n          startWith(this.exchangeRateControl.value),\n          distinctUntilChanged()\n        ),\n        this.instructionPriorityControl.valueChanges.pipe(\n          startWith(this.instructionPriorityControl.value),\n          distinctUntilChanged()\n        ),\n      ]).subscribe(\n        ([\n          fromCurrency,\n          amount,\n          transferFee,\n          chargeBearer,\n          exchangeRate,\n          instructionPriority,\n        ]) => {\n          this.fromCurrency = fromCurrency;\n          this.amount = amount;\n          this.exchangeRate = exchangeRate;\n          this.instructionPriority = instructionPriority;\n\n          this.isTotalAmountDisplayed =\n            !!this.exchangeRate || this.fromCurrency === this.amount.currency;\n\n          const fee = { ...transferFee };\n\n          if (chargeBearer === ChargeBearer.BEN) {\n            // If chargebearer is beneficiary then set transfer fee to 0\n            fee.amount = '0';\n          }\n\n          if (chargeBearer && !this.options?.isTemplateMode) {\n            const _amountByRate = new BigNumber(amount.amount || '0').dividedBy(\n              exchangeRate\n            );\n            const calculatedAmount = !!exchangeRate\n              ? _amountByRate.toString()\n              : amount.amount;\n\n            this.paymentCostInfo$.next({\n              transferFee: fee,\n              hasForexInfo: this.hasForexInfo(\n                fromCurrency,\n                amount.currency,\n                exchangeRate\n              ),\n              rate: exchangeRate,\n              fromCurrency: this.fromCurrency,\n              toCurrency: this.amount.currency,\n              calculatedAmount,\n            });\n          }\n        }\n      );\n    }\n  }\n}\n","<section\n  class=\"bb-block--md col-12 bb-dynamic-input\"\n  *ngIf=\"paymentCostInfo$ | async as paymentCostInfo\"\n>\n  <ng-container *ngIf=\"paymentCostInfo.transferFee?.amount\">\n    <ng-container\n      *ngIf=\"paymentCostInfo?.hasForexInfo; else sameCurrencyTransferTmpl\"\n    >\n      <hr />\n      <div\n        class=\"bb-heading-3 bb-block bb-block--md d-flex justify-content-between\"\n      >\n        <div i18n=\"@@bb-dynamic-input-payment-cost.transfer-amount.title\">\n          Transfer amount\n        </div>\n        <bb-amount-ui\n          data-role=\"transfer-amount\"\n          [mapCurrency]=\"false\"\n          [amount]=\"amount.amount || '0'\"\n          [currency]=\"amount.currency || defaultCurrency\"\n        >\n        </bb-amount-ui>\n      </div>\n\n      <div\n        [hidden]=\"!paymentCostInfo.calculatedAmount\"\n        class=\"bb-block bb-block--md d-flex justify-content-between\"\n      >\n        <div i18n=\"@@bb-dynamic-amount-you-pay-label.title\">\n          Amount you pay\n          <span data-role=\"exchange-rate\"\n            >(1 {{ paymentCostInfo.fromCurrency }} &asymp;\n            {{ paymentCostInfo.rate }} {{ paymentCostInfo.toCurrency }})</span\n          >\n        </div>\n        <div data-role=\"amount-you-pay\">\n          &asymp;\n          <bb-amount-ui\n            [mapCurrency]=\"false\"\n            [amount]=\"paymentCostInfo?.calculatedAmount || '0'\"\n            [currency]=\"paymentCostInfo?.fromCurrency\"\n          ></bb-amount-ui>\n        </div>\n      </div>\n      <div class=\"bb-block bb-block--md d-flex justify-content-between\">\n        <div\n          *ngIf=\"paymentTypeNameControl?.value\"\n          i18n=\"@@bb-dynamic-input-payment-cost.fee.title\"\n        >\n          Transfer fee - {{ paymentTypeNameControl?.value }}\n        </div>\n        <bb-amount-ui\n          data-role=\"payment-fee\"\n          [mapCurrency]=\"false\"\n          [amount]=\"paymentCostInfo.transferFee?.amount || '0'\"\n          [currency]=\"paymentCostInfo.transferFee?.currencyCode\"\n        >\n        </bb-amount-ui>\n      </div>\n      <div\n        *ngIf=\"isTotalAmountDisplayed\"\n        class=\"bb-text-bold bb-block bb-block--md d-flex justify-content-between\"\n      >\n        <div i18n=\"@@bb-dynamic-input-payment-cost.total.title\">Total</div>\n        <div>\n          &asymp;\n          <bb-amount-ui\n            data-role=\"total-amount-to-pay\"\n            [mapCurrency]=\"false\"\n            [amount]=\"\n              getTotalCost(\n                paymentCostInfo.transferFee,\n                paymentCostInfo.calculatedAmount\n              )\n            \"\n            [currency]=\"paymentCostInfo.fromCurrency\"\n          >\n          </bb-amount-ui>\n        </div>\n      </div>\n    </ng-container>\n\n    <ng-template #sameCurrencyTransferTmpl>\n      <div>\n        <hr />\n        <div\n          class=\"bb-heading-3 bb-block bb-block--md d-flex justify-content-between\"\n        >\n          <div i18n=\"@@bb-dynamic-input-payment-cost.amount.title\">Amount</div>\n          <bb-amount-ui\n            data-role=\"amount-you-pay\"\n            [mapCurrency]=\"false\"\n            [amount]=\"amount.amount || '0'\"\n            [currency]=\"amount.currency || defaultCurrency\"\n          ></bb-amount-ui>\n        </div>\n        <div class=\"bb-block bb-block--md d-flex justify-content-between\">\n          <div\n            *ngIf=\"paymentTypeNameControl?.value\"\n            i18n=\"@@bb-dynamic-input-payment-cost.fee.title\"\n          >\n            Transfer fee - {{ paymentTypeNameControl?.value }}\n          </div>\n          <bb-amount-ui\n            data-role=\"payment-fee\"\n            [mapCurrency]=\"false\"\n            [amount]=\"paymentCostInfo.transferFee?.amount || '0'\"\n            [currency]=\"paymentCostInfo.transferFee?.currencyCode\"\n          >\n          </bb-amount-ui>\n        </div>\n        <div\n          *ngIf=\"isTotalAmountDisplayed\"\n          class=\"bb-text-bold bb-block bb-block--md d-flex justify-content-between\"\n        >\n          <div i18n=\"@@bb-dynamic-input-payment-cost.total.title\">Total</div>\n          <bb-amount-ui\n            data-role=\"total-amount\"\n            [mapCurrency]=\"false\"\n            [amount]=\"getTotalCost(paymentCostInfo.transferFee)\"\n            [currency]=\"amount.currency || defaultCurrency\"\n          >\n          </bb-amount-ui>\n        </div>\n      </div>\n    </ng-template>\n  </ng-container>\n</section>\n"]}