import { Component, Inject, Optional, ChangeDetectorRef, } from '@angular/core';
import { Validators, } from '@angular/forms';
import { Subject, of, BehaviorSubject } from 'rxjs';
import { InitiatorFields, PaymentFormFieldHooks, PaymentBaseFields, BB_CLOSED_PAYMENT_BUS_FN_SUFFIX, BB_INTRACOMPANY_PAYMENT_BUS_FN_SUFFIX, DefaultClosedPaymentBusFnSuffix, DefaultIntraCompanyPaymentBusFnSuffix, HiddenFields, forbiddenStatus, CounterPartyFields, missingInListValidator, sameAccountsValidator, } from '@backbase/payment-orders-ang';
import { getParentForm, isClosedPaymentValidator, registerFormControl, } from '../../helpers/form-helpers';
import { triggerHook } from '../../helpers/hooks-helpers';
import { catchError, debounceTime, switchMap, takeUntil, tap, } from 'rxjs/operators';
import { DeprecationsService } from '@backbase/foundation-ang/core';
import { SchemeNames } from '@backbase/data-ang/payment-order';
import { toggleBeneficiaryControls } from '../../helpers/generic-utils';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/foundation-ang/core";
import * as i2 from "@backbase/ui-ang/account-selector";
import * as i3 from "../validation-message/validation-message.component";
import * as i4 from "@angular/common";
import * as i5 from "@angular/forms";
import * as i6 from "../../directives/dynamic-aria-attribute.directive";
export class PayordDebitAccountSelectorComponent {
    constructor(closedPaymentBusFnSuffix, intraCompanyPaymentBusFnSuffix, deprecationService, cdRef) {
        this.closedPaymentBusFnSuffix = closedPaymentBusFnSuffix;
        this.intraCompanyPaymentBusFnSuffix = intraCompanyPaymentBusFnSuffix;
        this.deprecationService = deprecationService;
        this.cdRef = cdRef;
        this.initialDebitGroup = {
            [InitiatorFields.id]: [''],
            [InitiatorFields.name]: [''],
            [InitiatorFields.accountNumber]: [''],
            schemeName: [],
            currency: [''],
            balance: [''],
        };
        this.gc$ = new Subject();
        this.loadDebitAccountAndSelect$ = new Subject();
        this.accountIds = [];
        this.currentPage = 0;
        this.searchTerm = '';
        this.typeahead$ = new Subject();
        this.loading$ = new BehaviorSubject(true);
        this.defaultTypeToSearchText = $localize `:@@debit-account-selector.default-type-to-search-text:No items found`;
    }
    ngOnInit() {
        var _a, _b, _c, _d;
        this.deprecationService.logDeprecatedFeature(`"BB_CLOSED_PAYMENT_BUS_FN_SUFFIX", "BB_INTRACOMPANY_PAYMENT_BUS_FN_SUFFIX", "DefaultClosedPaymentBusFnSuffix" and
      "DefaultIntraCompanyPaymentBusFnSuffix" are deprecated and will be removed in next major release`);
        this.closedPaymentBusFnSuffix =
            this.closedPaymentBusFnSuffix || DefaultClosedPaymentBusFnSuffix;
        this.intraCompanyPaymentBusFnSuffix =
            this.intraCompanyPaymentBusFnSuffix ||
                DefaultIntraCompanyPaymentBusFnSuffix;
        this.registerFields();
        this.listenSearch();
        this.control = this.group.controls['id'];
        this.form = getParentForm(this.control);
        this.isClosedPaymentControl = registerFormControl(this.form, HiddenFields.isClosedPayment);
        // populate value to show it in edit mode
        if (this.group.value.id) {
            this.selectItem(this.group.value);
        }
        // populate account balance and currency when applying a payment template or editing payment
        this.arrangementItems$ = (_b = (_a = this.options) === null || _a === void 0 ? void 0 : _a.items$) === null || _b === void 0 ? void 0 : _b.pipe(tap(({ items: list }) => {
            this.accountIds = list.map((item) => item.id);
            if (this.group.value.id) {
                const selectedAccount = list === null || list === void 0 ? void 0 : list.find((item) => item.id === this.group.value.id);
                if (selectedAccount) {
                    this.selectItem(selectedAccount);
                }
                else {
                    // we need to load debit account to show it selected
                    this.loadDebitAccountAndSelect$.next();
                }
            }
        }), catchError((err) => of(err)));
        this.arrangementItems$
            .pipe(takeUntil(this.gc$))
            .subscribe((arrangementList) => {
            this.loading$.next(false);
            this.arrangementList = arrangementList;
            this.cdRef.detectChanges();
        });
        const counterpartyGroup = (this.form.get(PaymentBaseFields.counterparty));
        if (this.options.checkClosedPaymentsAccess) {
            (_c = this.isClosedPaymentControl) === null || _c === void 0 ? void 0 : _c.valueChanges.pipe(takeUntil(this.gc$)).subscribe((isClosedPayment) => {
                if (isClosedPayment) {
                    toggleBeneficiaryControls(counterpartyGroup, isClosedPayment);
                    this.control.updateValueAndValidity();
                }
            });
            (_d = this.options.arrangementPermissions$) === null || _d === void 0 ? void 0 : _d.pipe(takeUntil(this.gc$)).subscribe((response) => {
                var _a;
                (_a = this.isClosedPaymentControl) === null || _a === void 0 ? void 0 : _a.setValue((response === null || response === void 0 ? void 0 : response.status) === forbiddenStatus);
            });
        }
        this.loadDebitAccountAndSelect$
            .pipe(takeUntil(this.gc$), switchMap(() => this.options.loadAccountByAccountId(this.group.value.id, this.group.value.accountNumber)), tap((item) => {
            if (item) {
                this.accountIds.push(item.id);
            }
            else {
                this.control.setValidators([
                    Validators.required,
                    missingInListValidator(this.getAccountIdsList.bind(this)),
                ]);
                this.control.updateValueAndValidity();
            }
            const account = item || this.group.value;
            this.selectItem(account);
        }), catchError(() => of(undefined)))
            .subscribe();
        triggerHook(PaymentFormFieldHooks.onInit, this);
    }
    fetchArrangementPermissions(arrangementId) {
        var _a;
        if (!this.options.isWizardMode &&
            this.options.checkClosedPaymentsAccess &&
            arrangementId) {
            (_a = this.options.fetchArrangementPermissions$) === null || _a === void 0 ? void 0 : _a.next(arrangementId);
        }
    }
    getAccountIdsList() {
        return this.accountIds;
    }
    listenSearch() {
        this.typeahead$
            .pipe(takeUntil(this.gc$), debounceTime(300))
            .subscribe((query) => {
            this.onSearch(query);
        });
    }
    ngOnDestroy() {
        this.gc$.next();
        this.gc$.complete();
        triggerHook(PaymentFormFieldHooks.onDestroy, this);
    }
    registerFields() {
        const validators = {
            [InitiatorFields.id]: [Validators.required],
        };
        for (const key in this.initialDebitGroup) {
            if (this.initialDebitGroup.hasOwnProperty(key)) {
                if (key === InitiatorFields.id) {
                    if (this.checkClosedPayment()) {
                        validators[InitiatorFields.id].push(isClosedPaymentValidator);
                    }
                    if (this.isCounterpartyGroup()) {
                        validators[InitiatorFields.id].push(sameAccountsValidator());
                    }
                }
                registerFormControl(this.group, key, validators[key], [], '');
            }
        }
    }
    isCounterpartyGroup() {
        return this.config.name === CounterPartyFields.counterPartyAccountGroup;
    }
    checkClosedPayment() {
        return (!this.options.isWizardMode &&
            this.config.name === InitiatorFields.initiatorAccountGroup &&
            this.options.checkClosedPaymentsAccess);
    }
    selectItem(account) {
        var _a;
        if (this.group && account.name) {
            this.group.patchValue({
                id: account.id,
                name: account.name,
                accountNumber: account.accountNumber,
                balance: account.balance,
                currency: account.currency,
                accountType: account.accountType,
                additions: account.additions || {},
                schemeName: SchemeNames.ID,
            });
            this.selectedAccount = Object.assign(Object.assign({}, account), { number: account.accountNumber, currency: account.currency, balance: account.balance });
            if (!this.isCounterpartyGroup()) {
                (_a = this.form
                    .get([PaymentBaseFields.counterparty, CounterPartyFields.id])) === null || _a === void 0 ? void 0 : _a.updateValueAndValidity();
            }
            this.fetchArrangementPermissions(account.id);
        }
        this.group.markAllAsTouched();
        this.group.markAsDirty();
    }
    onBlur() {
        if (this.options.required) {
            this.group.markAllAsTouched();
        }
    }
    onScrollToEnd() {
        this.options.fetchItems$.next({
            from: ++this.currentPage,
            searchTerm: this.searchTerm,
        });
        this.loading$.next(true);
    }
    onSearch(searchTerm) {
        this.currentPage = 0;
        this.searchTerm = searchTerm;
        this.options.fetchItems$.next({ from: this.currentPage, searchTerm });
        this.loading$.next(true);
    }
}
/** @nocollapse */ PayordDebitAccountSelectorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordDebitAccountSelectorComponent, deps: [{ token: BB_CLOSED_PAYMENT_BUS_FN_SUFFIX, optional: true }, { token: BB_INTRACOMPANY_PAYMENT_BUS_FN_SUFFIX, optional: true }, { token: i1.DeprecationsService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PayordDebitAccountSelectorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordDebitAccountSelectorComponent, selector: "bb-payord-debit-account-selector", ngImport: i0, template: "<div\n  class=\"bb-dynamic-input form-group\"\n  [ngClass]=\"options?.cssClasses\"\n  *ngIf=\"!config?.hidden\"\n>\n  <section class=\"payment-from\" [formGroup]=\"group\">\n    <label class=\"d-block\">\n      <div *ngIf=\"options?.label\" class=\"bb-dynamic-input__label bb-label\">\n        <span>\n          {{ options?.label }}\n        </span>\n        <span\n          class=\"bb-dynamic-input__helper-text bb-text-support\"\n          *ngIf=\"options?.helperText\"\n          [textContent]=\"options?.helperText\"\n        >\n        </span>\n      </div>\n      <div class=\"bb-form-field\">\n        <bb-account-selector-ui\n          [markFirst]=\"true\"\n          [highlight]=\"false\"\n          [filterItems]=\"options?.filterItems\"\n          [closeOnSelect]=\"true\"\n          [dropdownPosition]=\"'bottom'\"\n          [items]=\"arrangementList?.items\"\n          [selectedItems]=\"selectedAccount\"\n          (change)=\"selectItem($event)\"\n          (blur)=\"onBlur()\"\n          [placeholder]=\"options?.placeholder || ''\"\n          [attr.aria-label]=\"options?.label\"\n          [required]=\"options?.required\"\n          [attr.data-role]=\"'debit-account-selector'\"\n          [showBankBranchCode]=\"options?.showBankBranchCode\"\n          [bbDynamicAriaAttribute]=\"{\n            'payord-debit-account-selector__error':\n              control?.touched && control?.invalid,\n            'payord-debit-account-selector__desc': options?.description\n          }\"\n          [prependInputId]=\"false\"\n          inputSelector=\".ng-input input\"\n          [disableScrollEnd]=\"\n            arrangementList?.items?.length >= arrangementList?.count\n          \"\n          (scrollToEnd)=\"onScrollToEnd()\"\n          [searchFunc]=\"options.searchFn\"\n          [minTermLength]=\"options.minTermLength || 0\"\n          [typeToSearchText]=\"\n            options.typeToSearchText || defaultTypeToSearchText\n          \"\n          [typeahead]=\"options.disableTypeahead ? undefined : typeahead$\"\n          [loading]=\"loading$ | async\"\n        ></bb-account-selector-ui>\n      </div>\n    </label>\n\n    <bb-payord-validation-message\n      [control]=\"control\"\n      [validationMessages]=\"options?.validationMessages\"\n      [label]=\"options?.label || 'Debit account'\"\n      [id]=\"'payord-debit-account-selector__error'\"\n    ></bb-payord-validation-message>\n\n    <div\n      class=\"bb-dynamic-input__desc bb-text-support bb-subtitle\"\n      id=\"payord-debit-account-selector__desc\"\n      *ngIf=\"options?.description\"\n      [textContent]=\"options?.description\"\n    ></div>\n  </section>\n</div>\n", components: [{ type: i2.AccountSelectorComponent, selector: "bb-account-selector-ui", inputs: ["items", "disabled", "notFoundText", "showError", "productNumberFormat", "selectedItems", "multiple", "closeOnSelect", "searchable", "clearable", "placeholder", "loading", "dropdownPosition", "disableScrollEnd", "highlight", "filterItems", "markFirst", "internalFiltering", "virtualScroll", "required", "typeahead", "minTermLength", "typeToSearchText", "aria-describedby", "aria-labelledby", "aria-invalid", "searchFunc", "showCurrencySymbol", "showBankBranchCode", "groupByFn", "groupValueFn", "size", "compareItemsWith"], outputs: ["search", "clearSearch", "scroll", "scrollToEnd", "remove", "change", "filterChange", "focus", "blur"] }, { type: i3.ValidationMessageComponent, selector: "bb-payord-validation-message", inputs: ["control", "validationMessages", "label", "id", "hideGeneric"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i5.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i6.DynamicAriaAttributeDirective, selector: "[bbDynamicAriaAttribute]", inputs: ["bbDynamicAriaAttribute", "prependInputId", "inputSelector", "ariaAttributeName"] }], pipes: { "async": i4.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordDebitAccountSelectorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payord-debit-account-selector',
                    templateUrl: 'payord-debit-account-selector.component.html',
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [BB_CLOSED_PAYMENT_BUS_FN_SUFFIX]
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [BB_INTRACOMPANY_PAYMENT_BUS_FN_SUFFIX]
                }] }, { type: i1.DeprecationsService }, { type: i0.ChangeDetectorRef }]; } });
//# sourceMappingURL=payord-debit-account-selector.component.js.map