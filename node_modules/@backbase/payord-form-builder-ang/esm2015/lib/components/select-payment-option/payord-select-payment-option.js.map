{"version":3,"file":"payord-select-payment-option.js","sourceRoot":"","sources":["../../../../../../../libs/payord-form-builder-ang/src/lib/components/select-payment-option/payord-select-payment-option.ts","../../../../../../../libs/payord-form-builder-ang/src/lib/components/select-payment-option/payord-select-payment-option.html"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnInit, OnDestroy } from '@angular/core';\nimport {\n  PaymentFormFieldHooks,\n  PaymentBaseFields,\n  RemittanceInfoFields,\n  PaymentOptionFields,\n  HiddenFields,\n  isSelectedBeneficiaryModified,\n} from '@backbase/payment-orders-ang';\nimport {\n  getCounterpartyFormGroupDetails,\n  registerFormControl,\n  revertBeneficiaryChanges,\n} from '../../helpers/form-helpers';\nimport { ActivatableFormField } from '../../models/activatable-form-field';\nimport { VisibilityService } from '../../services/visibility.service';\nimport { triggerHook } from '../../helpers/hooks-helpers';\nimport {\n  AbstractControl,\n  FormControl,\n  Validators,\n  FormGroup,\n} from '@angular/forms';\nimport { PaymentOption } from '@backbase/payment-orders-ang';\nimport { Observable, of } from 'rxjs';\nimport { tap, map } from 'rxjs/operators';\nimport { getDateOnly, isObjectTruthy } from '@backbase/payment-orders-ang';\n\n@Component({\n  selector: 'bb-select-payment-option',\n  templateUrl: './payord-select-payment-option.html',\n})\nexport class PayordSelectPaymentOptionComponent\n  extends ActivatableFormField\n  implements OnInit, OnDestroy\n{\n  remittanceInfoGroup?: AbstractControl | null;\n  paymentOptions!: Array<PaymentOption>;\n  paymentOptions$!: Observable<Array<PaymentOption>>;\n  paymentTypecontrol!: AbstractControl;\n  instructionPriorityControl!: AbstractControl;\n  transferFeeControl!: AbstractControl;\n  chargeBearerOptionsControl!: AbstractControl;\n  paymentTypeNameControl!: AbstractControl;\n  separator = '::';\n  defaultTransFerFee = {\n    amount: '',\n    currencyCode: '',\n  };\n  today = getDateOnly(new Date());\n  showConfirmOptionModal = false;\n  selectedPaymentOptionLabel?: string;\n  private previousPaymentOption?: PaymentOption;\n  private currentPaymentOption?: PaymentOption;\n  private isClosedPaymentControl!: AbstractControl;\n  private isManualEditControl!: AbstractControl;\n\n  constructor(private readonly visibilityService: VisibilityService) {\n    super(visibilityService);\n  }\n\n  ngOnInit() {\n    this.paymentTypecontrol = <FormControl>this.group.get('paymentType');\n    this.paymentTypeNameControl = registerFormControl(\n      this.group,\n      PaymentOptionFields.paymentTypeName\n    );\n    this.control = registerFormControl(this.group, this.config.name, [\n      Validators.required,\n    ]);\n    this.transferFeeControl =\n      this.group.get(PaymentOptionFields.transferFee) ||\n      registerFormControl(this.group, PaymentOptionFields.transferFee);\n    this.chargeBearerOptionsControl =\n      this.group.get(PaymentOptionFields.chargeBearerOptions) ||\n      registerFormControl(this.group, PaymentOptionFields.chargeBearerOptions);\n    this.remittanceInfoGroup = this.group.get(PaymentBaseFields.remittanceInfo);\n    this.isClosedPaymentControl = <FormControl>(\n      this.group.get(HiddenFields.isClosedPayment)\n    );\n    this.isManualEditControl = <FormControl>(\n      this.group.get(HiddenFields.isManualEdit)\n    );\n\n    if (this.remittanceInfoGroup) {\n      this.instructionPriorityControl =\n        this.remittanceInfoGroup.get(RemittanceInfoFields.urgent) ||\n        registerFormControl(\n          <FormGroup>this.remittanceInfoGroup,\n          RemittanceInfoFields.urgent\n        );\n    }\n\n    this.paymentOptions$ = (this.options.items$ || of([])).pipe(\n      map((paymentOptions: Array<PaymentOption>) =>\n        paymentOptions.map((paymentOption) => ({\n          ...paymentOption,\n          hasMin:\n            paymentOption.executionTimeFrame &&\n            typeof paymentOption.executionTimeFrame.min === 'number',\n          hasMax:\n            paymentOption.executionTimeFrame &&\n            typeof paymentOption.executionTimeFrame.max === 'number',\n          name:\n            paymentOption.name ||\n            (this.options.optionLabels || {})[paymentOption.paymentType || ''],\n        }))\n      ),\n      tap((paymentOptions: Array<PaymentOption>) => {\n        this.paymentOptions = paymentOptions || [];\n        if (paymentOptions && paymentOptions.length === 1) {\n          const value = this.getValue(paymentOptions[0]);\n          if (value !== this.control.value) {\n            this.control.setValue(value);\n            this.setPaymentOptionDetails(paymentOptions[0]);\n          }\n        }\n        if (this.control?.value && paymentOptions.length) {\n          const [type, instructionPriority] = this.control.value.split(\n            this.separator\n          );\n          const paymentOption = this.getValueByType(type, instructionPriority);\n          if (paymentOption) {\n            this.setPaymentOptionDetails(paymentOption);\n          } else {\n            this.control.reset();\n          }\n        }\n      })\n    );\n    this.toggleDependants();\n    triggerHook(PaymentFormFieldHooks.onInit, this);\n  }\n\n  setPaymentOptionDetails(paymentOption: PaymentOption) {\n    if (this.instructionPriorityControl) {\n      this.instructionPriorityControl.setValue(\n        paymentOption.instructionPriority === 'HIGH'\n      );\n    }\n    if (this.options.isWizardMode && this.options.checkClosedPaymentsAccess) {\n      this.isClosedPaymentControl?.setValue(!paymentOption.canEditCounterparty);\n    }\n    this.transferFeeControl.setValue(\n      paymentOption.transferFee || this.defaultTransFerFee\n    );\n    this.chargeBearerOptionsControl.setValue(paymentOption.chargeBearer);\n    this.paymentTypecontrol.patchValue(paymentOption.paymentType);\n    this.paymentTypeNameControl.setValue(paymentOption.name);\n  }\n\n  getValue(option: PaymentOption) {\n    return `${option.paymentType}${this.separator}${\n      option.instructionPriority || ''\n    }`;\n  }\n\n  getValueByType(type: string, priority: string): PaymentOption {\n    return this.paymentOptions.filter(\n      (option: PaymentOption) =>\n        option.paymentType === type && option.instructionPriority === priority\n    )[0];\n  }\n\n  onRadioChange(value: string) {\n    this.toggleDependants();\n    const [type, instructionPriority] = value.split(this.separator);\n    const paymentOption = this.getValueByType(type, instructionPriority);\n    this.selectedPaymentOptionLabel = paymentOption.name;\n    this.previousPaymentOption = this.currentPaymentOption;\n    this.currentPaymentOption = paymentOption;\n    if (type && instructionPriority) {\n      if (\n        this.shouldShowConfirmationModal(!!paymentOption?.canEditCounterparty)\n      ) {\n        this.showConfirmOptionModal = true;\n      } else {\n        this.setPaymentOptionDetails(this.currentPaymentOption);\n      }\n    }\n  }\n\n  private shouldShowConfirmationModal(canEditCounterparty: boolean): boolean {\n    const counterpartyDetails = (<FormGroup>(\n      this.group.get(PaymentBaseFields.counterparty)\n    ))?.getRawValue();\n    const selectedBeneficiary = this.group.get(\n      HiddenFields.selectedBeneficiary\n    )?.value;\n    const filledBeneficiary = getCounterpartyFormGroupDetails(this.group);\n    const isSelectedBeneficiaryChanged =\n      selectedBeneficiary &&\n      isSelectedBeneficiaryModified(counterpartyDetails, selectedBeneficiary);\n    const isClosedPayment =\n      this.options.isWizardMode &&\n      this.options.checkClosedPaymentsAccess &&\n      !canEditCounterparty;\n    const isEdittedManually =\n      isObjectTruthy(filledBeneficiary) && this.isManualEditControl?.value;\n\n    return (\n      isClosedPayment && (isSelectedBeneficiaryChanged || isEdittedManually)\n    );\n  }\n\n  confirmPaymentOption(): void {\n    this.showConfirmOptionModal = false;\n    revertBeneficiaryChanges(this.group);\n    if (this.currentPaymentOption) {\n      this.setPaymentOptionDetails(this.currentPaymentOption);\n    }\n  }\n\n  cancelPaymentOption(): void {\n    this.showConfirmOptionModal = false;\n    let prevPaymentType = '';\n    this.currentPaymentOption = this.previousPaymentOption;\n    if (this.currentPaymentOption) {\n      const instructionPriority = this.instructionPriorityControl.value\n        ? 'HIGH'\n        : 'NORM';\n      prevPaymentType = this.paymentTypecontrol.value;\n      if (prevPaymentType) {\n        this.control.setValue(\n          `${prevPaymentType}${this.separator}${instructionPriority}`\n        );\n      }\n    }\n    if (!prevPaymentType || !this.previousPaymentOption) {\n      this.instructionPriorityControl.reset();\n      this.control.reset();\n    }\n  }\n\n  ngOnDestroy() {\n    triggerHook(PaymentFormFieldHooks.onDestroy, this);\n  }\n}\n","<ng-container *ngIf=\"paymentOptions$ | async as paymentOptions\">\n  <ng-container *ngIf=\"paymentOptions.length\">\n    <div\n      *ngIf=\"!config?.hidden\"\n      class=\"form-group col-12 bb-dynamic-input\"\n      [formGroup]=\"group\"\n      [ngClass]=\"options?.cssClasses\"\n    >\n      <div class=\"bb-select-payment-option\">\n        <div\n          class=\"bb-label\"\n          i18n-label=\"@@payord-select-payment-option.delivery.label\"\n        >\n          Delivery\n        </div>\n        <bb-input-radio-group-ui\n          label=\"Delivery\"\n          i18n-label=\"@@payord-select-payment-option.radiogroup.label\"\n          [formControlName]=\"config?.name\"\n          (change)=\"onRadioChange($event?.target?.value || '')\"\n          [preselect]=\"false\"\n          [bbDynamicAriaAttribute]=\"{\n            select_payment_option__error: control?.touched && control?.invalid\n          }\"\n          [prependInputId]=\"false\"\n          data-role=\"payment-option-radio-group\"\n          inputSelector=\".bb-input-radio-group\"\n          #inputEl\n        >\n          <bb-input-radio-ui\n            *ngFor=\"let option of paymentOptions\"\n            [labelTemplate]=\"labelTemplate\"\n            [labelTemplateContext]=\"option\"\n            [value]=\"getValue(option)\"\n            [attr.data-role]=\"getValue(option)\"\n          ></bb-input-radio-ui>\n        </bb-input-radio-group-ui>\n\n        <bb-input-validation-message-ui\n          data-role=\"input-error\"\n          role=\"alert\"\n          *ngIf=\"control\"\n          [showErrors]=\"control?.touched && control?.invalid\"\n        >\n          <ng-container *ngIf=\"control.errors && control.errors['required']\">\n            <span id=\"select_payment_option__error\" data-role=\"required-error\">\n              <ng-container i18n\n                >Please choose a payment delivery option</ng-container\n              >\n            </span>\n          </ng-container>\n        </bb-input-validation-message-ui>\n      </div>\n    </div>\n  </ng-container>\n</ng-container>\n\n<ng-template #labelTemplate let-context=\"labelTemplateContext\">\n  <div class=\"row bb-select-payment-option__label\">\n    <div class=\"col-6\">\n      <div>\n        <span>{{context?.name}}</span>\n        <span *ngIf=\"context.showHelperText\">\n          ({ context.instructionPriority, select, HIGH {Urgent} NORM {Standard}\n          })\n        </span>\n      </div>\n      <div\n        class=\"bb-text-support font-weight-normal bb-subtitle\"\n        *ngIf=\"context?.executionTimeFrame\"\n      >\n        <ng-container *ngIf=\"!context?.hasMin && context?.hasMax\" i18n>\n          Delivered {context.executionTimeFrame.max, plural, =0\n          {{context.executionTimeFrame.unit, select, HOUR {instantly}\n          CALENDAR_DAY {same day} BUSINESS_DAY { same business day}}} =1\n          {{context.executionTimeFrame.unit, select, HOUR {within 1 hour}\n          CALENDAR_DAY {within 1 day} BUSINESS_DAY {within 1 business day}}}\n          other {{context.executionTimeFrame.unit, select, HOUR {within\n          {{context.executionTimeFrame.max}} hours} CALENDAR_DAY {within\n          {{context.executionTimeFrame.max}} days} BUSINESS_DAY {within\n          {{context.executionTimeFrame.max}} business days}}}}\n        </ng-container>\n        <ng-container *ngIf=\"context?.hasMin && context?.hasMax\" i18n>\n          Delivered within\n          {{context.executionTimeFrame.min}}-{{context.executionTimeFrame.max}}\n          {context.executionTimeFrame.unit, select, HOUR {hours} CALENDAR_DAY\n          {days} BUSINESS_DAY {business days}}\n        </ng-container>\n        <ng-container *ngIf=\"context?.cutOffTime\" i18n>\n          if received before {{today + ' ' + context?.cutOffTime | date:\n          'HH:mm'}} Hrs\n        </ng-container>\n      </div>\n    </div>\n    <div\n      class=\"col-6 d-flex align-items-center bb-text-support font-weight-normal\"\n    >\n      <bb-icon-ui\n        class=\"bb-select-payment-option__icon\"\n        name=\"data-usage\"\n      ></bb-icon-ui>\n      <span data-role=\"transfer-fee\"\n        >{{context.transferFee.amount | currency:\n        context.transferFee.currencyCode: 'code'}}</span\n      >\n    </div>\n  </div>\n</ng-template>\n\n<bb-confirmation-dialog\n  [isOpen]=\"showConfirmOptionModal\"\n  (cancel)=\"cancelPaymentOption()\"\n  (confirm)=\"confirmPaymentOption()\"\n>\n  <h2\n    title\n    data-role=\"confirm-reset-beneficiary-modal-header\"\n    i18n=\"@@confirm-reset-beneficiary-modal-title\"\n  >\n    'Continue with '{{selectedPaymentOptionLabel}}'?'\n  </h2>\n  <span\n    body\n    i18n=\"@@confirm-reset-beneficiary-modal-content\"\n    data-role=\"confirm-reset-beneficiary-modal-message\"\n  >\n    Changes to beneficiary will be reset.\n  </span>\n  <span\n    confirmActionName\n    data-role=\"continue-action-btn\"\n    i18n=\"@@confirm-reset-beneficiary-modal-discard-btn\"\n  >\n    Continue\n  </span>\n  <span\n    cancelActionName\n    data-role=\"cancel-action-btn\"\n    i18n=\"@@confirm-reset-beneficiary-modal-cancel-btn\"\n  >\n    Cancel\n  </span>\n</bb-confirmation-dialog>\n"]}