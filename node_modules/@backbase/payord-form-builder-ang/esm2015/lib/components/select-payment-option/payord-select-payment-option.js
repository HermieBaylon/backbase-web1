import { Component } from '@angular/core';
import { PaymentFormFieldHooks, PaymentBaseFields, RemittanceInfoFields, PaymentOptionFields, HiddenFields, isSelectedBeneficiaryModified, } from '@backbase/payment-orders-ang';
import { getCounterpartyFormGroupDetails, registerFormControl, revertBeneficiaryChanges, } from '../../helpers/form-helpers';
import { ActivatableFormField } from '../../models/activatable-form-field';
import { VisibilityService } from '../../services/visibility.service';
import { triggerHook } from '../../helpers/hooks-helpers';
import { Validators, } from '@angular/forms';
import { of } from 'rxjs';
import { tap, map } from 'rxjs/operators';
import { getDateOnly, isObjectTruthy } from '@backbase/payment-orders-ang';
import * as i0 from "@angular/core";
import * as i1 from "../../services/visibility.service";
import * as i2 from "@backbase/ui-ang/input-radio-group";
import * as i3 from "@backbase/ui-ang/input-validation-message";
import * as i4 from "@backbase/ui-ang/icon";
import * as i5 from "@backbase/payment-orders-ang";
import * as i6 from "@angular/common";
import * as i7 from "@angular/forms";
import * as i8 from "../../directives/dynamic-aria-attribute.directive";
export class PayordSelectPaymentOptionComponent extends ActivatableFormField {
    constructor(visibilityService) {
        super(visibilityService);
        this.visibilityService = visibilityService;
        this.separator = '::';
        this.defaultTransFerFee = {
            amount: '',
            currencyCode: '',
        };
        this.today = getDateOnly(new Date());
        this.showConfirmOptionModal = false;
    }
    ngOnInit() {
        this.paymentTypecontrol = this.group.get('paymentType');
        this.paymentTypeNameControl = registerFormControl(this.group, PaymentOptionFields.paymentTypeName);
        this.control = registerFormControl(this.group, this.config.name, [
            Validators.required,
        ]);
        this.transferFeeControl =
            this.group.get(PaymentOptionFields.transferFee) ||
                registerFormControl(this.group, PaymentOptionFields.transferFee);
        this.chargeBearerOptionsControl =
            this.group.get(PaymentOptionFields.chargeBearerOptions) ||
                registerFormControl(this.group, PaymentOptionFields.chargeBearerOptions);
        this.remittanceInfoGroup = this.group.get(PaymentBaseFields.remittanceInfo);
        this.isClosedPaymentControl = (this.group.get(HiddenFields.isClosedPayment));
        this.isManualEditControl = (this.group.get(HiddenFields.isManualEdit));
        if (this.remittanceInfoGroup) {
            this.instructionPriorityControl =
                this.remittanceInfoGroup.get(RemittanceInfoFields.urgent) ||
                    registerFormControl(this.remittanceInfoGroup, RemittanceInfoFields.urgent);
        }
        this.paymentOptions$ = (this.options.items$ || of([])).pipe(map((paymentOptions) => paymentOptions.map((paymentOption) => (Object.assign(Object.assign({}, paymentOption), { hasMin: paymentOption.executionTimeFrame &&
                typeof paymentOption.executionTimeFrame.min === 'number', hasMax: paymentOption.executionTimeFrame &&
                typeof paymentOption.executionTimeFrame.max === 'number', name: paymentOption.name ||
                (this.options.optionLabels || {})[paymentOption.paymentType || ''] })))), tap((paymentOptions) => {
            var _a;
            this.paymentOptions = paymentOptions || [];
            if (paymentOptions && paymentOptions.length === 1) {
                const value = this.getValue(paymentOptions[0]);
                if (value !== this.control.value) {
                    this.control.setValue(value);
                    this.setPaymentOptionDetails(paymentOptions[0]);
                }
            }
            if (((_a = this.control) === null || _a === void 0 ? void 0 : _a.value) && paymentOptions.length) {
                const [type, instructionPriority] = this.control.value.split(this.separator);
                const paymentOption = this.getValueByType(type, instructionPriority);
                if (paymentOption) {
                    this.setPaymentOptionDetails(paymentOption);
                }
                else {
                    this.control.reset();
                }
            }
        }));
        this.toggleDependants();
        triggerHook(PaymentFormFieldHooks.onInit, this);
    }
    setPaymentOptionDetails(paymentOption) {
        var _a;
        if (this.instructionPriorityControl) {
            this.instructionPriorityControl.setValue(paymentOption.instructionPriority === 'HIGH');
        }
        if (this.options.isWizardMode && this.options.checkClosedPaymentsAccess) {
            (_a = this.isClosedPaymentControl) === null || _a === void 0 ? void 0 : _a.setValue(!paymentOption.canEditCounterparty);
        }
        this.transferFeeControl.setValue(paymentOption.transferFee || this.defaultTransFerFee);
        this.chargeBearerOptionsControl.setValue(paymentOption.chargeBearer);
        this.paymentTypecontrol.patchValue(paymentOption.paymentType);
        this.paymentTypeNameControl.setValue(paymentOption.name);
    }
    getValue(option) {
        return `${option.paymentType}${this.separator}${option.instructionPriority || ''}`;
    }
    getValueByType(type, priority) {
        return this.paymentOptions.filter((option) => option.paymentType === type && option.instructionPriority === priority)[0];
    }
    onRadioChange(value) {
        this.toggleDependants();
        const [type, instructionPriority] = value.split(this.separator);
        const paymentOption = this.getValueByType(type, instructionPriority);
        this.selectedPaymentOptionLabel = paymentOption.name;
        this.previousPaymentOption = this.currentPaymentOption;
        this.currentPaymentOption = paymentOption;
        if (type && instructionPriority) {
            if (this.shouldShowConfirmationModal(!!(paymentOption === null || paymentOption === void 0 ? void 0 : paymentOption.canEditCounterparty))) {
                this.showConfirmOptionModal = true;
            }
            else {
                this.setPaymentOptionDetails(this.currentPaymentOption);
            }
        }
    }
    shouldShowConfirmationModal(canEditCounterparty) {
        var _a, _b, _c;
        const counterpartyDetails = (_a = (this.group.get(PaymentBaseFields.counterparty))) === null || _a === void 0 ? void 0 : _a.getRawValue();
        const selectedBeneficiary = (_b = this.group.get(HiddenFields.selectedBeneficiary)) === null || _b === void 0 ? void 0 : _b.value;
        const filledBeneficiary = getCounterpartyFormGroupDetails(this.group);
        const isSelectedBeneficiaryChanged = selectedBeneficiary &&
            isSelectedBeneficiaryModified(counterpartyDetails, selectedBeneficiary);
        const isClosedPayment = this.options.isWizardMode &&
            this.options.checkClosedPaymentsAccess &&
            !canEditCounterparty;
        const isEdittedManually = isObjectTruthy(filledBeneficiary) && ((_c = this.isManualEditControl) === null || _c === void 0 ? void 0 : _c.value);
        return (isClosedPayment && (isSelectedBeneficiaryChanged || isEdittedManually));
    }
    confirmPaymentOption() {
        this.showConfirmOptionModal = false;
        revertBeneficiaryChanges(this.group);
        if (this.currentPaymentOption) {
            this.setPaymentOptionDetails(this.currentPaymentOption);
        }
    }
    cancelPaymentOption() {
        this.showConfirmOptionModal = false;
        let prevPaymentType = '';
        this.currentPaymentOption = this.previousPaymentOption;
        if (this.currentPaymentOption) {
            const instructionPriority = this.instructionPriorityControl.value
                ? 'HIGH'
                : 'NORM';
            prevPaymentType = this.paymentTypecontrol.value;
            if (prevPaymentType) {
                this.control.setValue(`${prevPaymentType}${this.separator}${instructionPriority}`);
            }
        }
        if (!prevPaymentType || !this.previousPaymentOption) {
            this.instructionPriorityControl.reset();
            this.control.reset();
        }
    }
    ngOnDestroy() {
        triggerHook(PaymentFormFieldHooks.onDestroy, this);
    }
}
/** @nocollapse */ PayordSelectPaymentOptionComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordSelectPaymentOptionComponent, deps: [{ token: i1.VisibilityService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ PayordSelectPaymentOptionComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: PayordSelectPaymentOptionComponent, selector: "bb-select-payment-option", usesInheritance: true, ngImport: i0, template: "<ng-container *ngIf=\"paymentOptions$ | async as paymentOptions\">\n  <ng-container *ngIf=\"paymentOptions.length\">\n    <div\n      *ngIf=\"!config?.hidden\"\n      class=\"form-group col-12 bb-dynamic-input\"\n      [formGroup]=\"group\"\n      [ngClass]=\"options?.cssClasses\"\n    >\n      <div class=\"bb-select-payment-option\">\n        <div\n          class=\"bb-label\"\n          i18n-label=\"@@payord-select-payment-option.delivery.label\"\n        >\n          Delivery\n        </div>\n        <bb-input-radio-group-ui\n          label=\"Delivery\"\n          i18n-label=\"@@payord-select-payment-option.radiogroup.label\"\n          [formControlName]=\"config?.name\"\n          (change)=\"onRadioChange($event?.target?.value || '')\"\n          [preselect]=\"false\"\n          [bbDynamicAriaAttribute]=\"{\n            select_payment_option__error: control?.touched && control?.invalid\n          }\"\n          [prependInputId]=\"false\"\n          data-role=\"payment-option-radio-group\"\n          inputSelector=\".bb-input-radio-group\"\n          #inputEl\n        >\n          <bb-input-radio-ui\n            *ngFor=\"let option of paymentOptions\"\n            [labelTemplate]=\"labelTemplate\"\n            [labelTemplateContext]=\"option\"\n            [value]=\"getValue(option)\"\n            [attr.data-role]=\"getValue(option)\"\n          ></bb-input-radio-ui>\n        </bb-input-radio-group-ui>\n\n        <bb-input-validation-message-ui\n          data-role=\"input-error\"\n          role=\"alert\"\n          *ngIf=\"control\"\n          [showErrors]=\"control?.touched && control?.invalid\"\n        >\n          <ng-container *ngIf=\"control.errors && control.errors['required']\">\n            <span id=\"select_payment_option__error\" data-role=\"required-error\">\n              <ng-container i18n\n                >Please choose a payment delivery option</ng-container\n              >\n            </span>\n          </ng-container>\n        </bb-input-validation-message-ui>\n      </div>\n    </div>\n  </ng-container>\n</ng-container>\n\n<ng-template #labelTemplate let-context=\"labelTemplateContext\">\n  <div class=\"row bb-select-payment-option__label\">\n    <div class=\"col-6\">\n      <div>\n        <span>{{context?.name}}</span>\n        <span *ngIf=\"context.showHelperText\">\n          ({ context.instructionPriority, select, HIGH {Urgent} NORM {Standard}\n          })\n        </span>\n      </div>\n      <div\n        class=\"bb-text-support font-weight-normal bb-subtitle\"\n        *ngIf=\"context?.executionTimeFrame\"\n      >\n        <ng-container *ngIf=\"!context?.hasMin && context?.hasMax\" i18n>\n          Delivered {context.executionTimeFrame.max, plural, =0\n          {{context.executionTimeFrame.unit, select, HOUR {instantly}\n          CALENDAR_DAY {same day} BUSINESS_DAY { same business day}}} =1\n          {{context.executionTimeFrame.unit, select, HOUR {within 1 hour}\n          CALENDAR_DAY {within 1 day} BUSINESS_DAY {within 1 business day}}}\n          other {{context.executionTimeFrame.unit, select, HOUR {within\n          {{context.executionTimeFrame.max}} hours} CALENDAR_DAY {within\n          {{context.executionTimeFrame.max}} days} BUSINESS_DAY {within\n          {{context.executionTimeFrame.max}} business days}}}}\n        </ng-container>\n        <ng-container *ngIf=\"context?.hasMin && context?.hasMax\" i18n>\n          Delivered within\n          {{context.executionTimeFrame.min}}-{{context.executionTimeFrame.max}}\n          {context.executionTimeFrame.unit, select, HOUR {hours} CALENDAR_DAY\n          {days} BUSINESS_DAY {business days}}\n        </ng-container>\n        <ng-container *ngIf=\"context?.cutOffTime\" i18n>\n          if received before {{today + ' ' + context?.cutOffTime | date:\n          'HH:mm'}} Hrs\n        </ng-container>\n      </div>\n    </div>\n    <div\n      class=\"col-6 d-flex align-items-center bb-text-support font-weight-normal\"\n    >\n      <bb-icon-ui\n        class=\"bb-select-payment-option__icon\"\n        name=\"data-usage\"\n      ></bb-icon-ui>\n      <span data-role=\"transfer-fee\"\n        >{{context.transferFee.amount | currency:\n        context.transferFee.currencyCode: 'code'}}</span\n      >\n    </div>\n  </div>\n</ng-template>\n\n<bb-confirmation-dialog\n  [isOpen]=\"showConfirmOptionModal\"\n  (cancel)=\"cancelPaymentOption()\"\n  (confirm)=\"confirmPaymentOption()\"\n>\n  <h2\n    title\n    data-role=\"confirm-reset-beneficiary-modal-header\"\n    i18n=\"@@confirm-reset-beneficiary-modal-title\"\n  >\n    'Continue with '{{selectedPaymentOptionLabel}}'?'\n  </h2>\n  <span\n    body\n    i18n=\"@@confirm-reset-beneficiary-modal-content\"\n    data-role=\"confirm-reset-beneficiary-modal-message\"\n  >\n    Changes to beneficiary will be reset.\n  </span>\n  <span\n    confirmActionName\n    data-role=\"continue-action-btn\"\n    i18n=\"@@confirm-reset-beneficiary-modal-discard-btn\"\n  >\n    Continue\n  </span>\n  <span\n    cancelActionName\n    data-role=\"cancel-action-btn\"\n    i18n=\"@@confirm-reset-beneficiary-modal-cancel-btn\"\n  >\n    Cancel\n  </span>\n</bb-confirmation-dialog>\n", components: [{ type: i2.InputRadioGroupComponent, selector: "bb-input-radio-group-ui", inputs: ["horizontal", "preselect", "name", "verticalAlign"] }, { type: i2.InputRadioComponent, selector: "bb-input-radio-ui", inputs: ["labelTemplate", "labelTemplateContext", "value", "label", "aria-label", "aria-labelledby", "aria-describedby", "role", "aria-activedescendant", "aria-expanded", "aria-invalid", "aria-owns", "disabled"] }, { type: i3.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i4.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i5.ӨConfirmationDialogComponent, selector: "bb-confirmation-dialog", inputs: ["confirmButtonColor", "cancelButtonColor", "isOpen", "confirmActionPayload", "attachComment", "commentFieldLabel"], outputs: ["confirm", "cancel"] }], directives: [{ type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i7.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i7.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i6.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i7.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i7.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i8.DynamicAriaAttributeDirective, selector: "[bbDynamicAriaAttribute]", inputs: ["bbDynamicAriaAttribute", "prependInputId", "inputSelector", "ariaAttributeName"] }, { type: i6.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "async": i6.AsyncPipe, "date": i6.DatePipe, "currency": i6.CurrencyPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: PayordSelectPaymentOptionComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-select-payment-option',
                    templateUrl: './payord-select-payment-option.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.VisibilityService }]; } });
//# sourceMappingURL=payord-select-payment-option.js.map