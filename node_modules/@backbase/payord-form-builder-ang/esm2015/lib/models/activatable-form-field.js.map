{"version":3,"file":"activatable-form-field.js","sourceRoot":"","sources":["../../../../../../libs/payord-form-builder-ang/src/lib/models/activatable-form-field.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  PaymentFormField,\n  PaymentFormFieldOptions,\n  PaymentFormFieldConfig,\n  DependantItem,\n} from '@backbase/payment-orders-ang';\nimport { FormGroup, AbstractControl } from '@angular/forms';\nimport { VisibilityService } from '../services/visibility.service';\nimport { mapDependentItems } from '../helpers/generic-utils';\n\nexport class ActivatableFormField implements PaymentFormField {\n  /**\n   * Payment form field options\n   */\n  options!: PaymentFormFieldOptions;\n\n  /**\n   * Payment form field configuration\n   */\n  config!: PaymentFormFieldConfig;\n\n  /**\n   * Form group object\n   * Tracks the value and validity state of a group of FormControl instances\n   */\n  group!: FormGroup;\n\n  /**\n   * Base class for FormControl, FormGroup, and FormArray\n   */\n  control!: AbstractControl;\n\n  /**\n   * @internal\n   */\n  constructor(private readonly service: VisibilityService) {}\n\n  /**\n   * @internal\n   */\n  private showDependantFields() {\n    if (this.config.options && this.config.options.dependants) {\n      this.service.showItems(\n        this.config.parent,\n        this.config.options.dependants\n      );\n    }\n  }\n\n  /**\n   * @internal\n   */\n  private hideDependantFields() {\n    if (this.config.options) {\n      this.service.hideItems(\n        this.config.parent,\n        this.config.options.dependants\n      );\n    }\n  }\n\n  /**\n   * Tracks if a form item should be shown or not\n   */\n  toggleDependants() {\n    const { options, parent: currentParent } = this.config;\n    if (options && options.dependants) {\n      if (typeof options.activateDependantsOn === 'function') {\n        const toShow =\n          options.activateDependantsOn(this.control.value, this.control) || [];\n        const toShowMap = mapDependentItems(toShow, currentParent);\n        const toHide = mapDependentItems(\n          options?.dependants,\n          currentParent\n        ).map(({ parent, items }: DependantItem) => {\n          const toShowItem = toShowMap.find(\n            (i: DependantItem) => i.parent === parent\n          );\n          if (toShowItem) {\n            return {\n              parent,\n              items: items.filter((i) => !toShowItem.items.includes(i)),\n            };\n          } else {\n            return { parent, items };\n          }\n        });\n\n        mapDependentItems(toShow, currentParent).forEach(\n          ({ parent, items }) => {\n            if (items.length) {\n              this.service.showItems(parent, items);\n            }\n          }\n        );\n\n        mapDependentItems(toHide, currentParent).forEach(\n          ({ parent, items }) => {\n            if (items.length) {\n              this.service.hideItems(parent, items);\n            }\n          }\n        );\n      } else if (\n        this.control.value === this.config.options.activateDependantsOn\n      ) {\n        this.showDependantFields();\n      } else {\n        this.hideDependantFields();\n      }\n    }\n  }\n}\n"]}