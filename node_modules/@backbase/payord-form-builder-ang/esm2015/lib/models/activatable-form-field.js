import { mapDependentItems } from '../helpers/generic-utils';
export class ActivatableFormField {
    /**
     * @internal
     */
    constructor(service) {
        this.service = service;
    }
    /**
     * @internal
     */
    showDependantFields() {
        if (this.config.options && this.config.options.dependants) {
            this.service.showItems(this.config.parent, this.config.options.dependants);
        }
    }
    /**
     * @internal
     */
    hideDependantFields() {
        if (this.config.options) {
            this.service.hideItems(this.config.parent, this.config.options.dependants);
        }
    }
    /**
     * Tracks if a form item should be shown or not
     */
    toggleDependants() {
        const { options, parent: currentParent } = this.config;
        if (options && options.dependants) {
            if (typeof options.activateDependantsOn === 'function') {
                const toShow = options.activateDependantsOn(this.control.value, this.control) || [];
                const toShowMap = mapDependentItems(toShow, currentParent);
                const toHide = mapDependentItems(options === null || options === void 0 ? void 0 : options.dependants, currentParent).map(({ parent, items }) => {
                    const toShowItem = toShowMap.find((i) => i.parent === parent);
                    if (toShowItem) {
                        return {
                            parent,
                            items: items.filter((i) => !toShowItem.items.includes(i)),
                        };
                    }
                    else {
                        return { parent, items };
                    }
                });
                mapDependentItems(toShow, currentParent).forEach(({ parent, items }) => {
                    if (items.length) {
                        this.service.showItems(parent, items);
                    }
                });
                mapDependentItems(toHide, currentParent).forEach(({ parent, items }) => {
                    if (items.length) {
                        this.service.hideItems(parent, items);
                    }
                });
            }
            else if (this.control.value === this.config.options.activateDependantsOn) {
                this.showDependantFields();
            }
            else {
                this.hideDependantFields();
            }
        }
    }
}
//# sourceMappingURL=activatable-form-field.js.map