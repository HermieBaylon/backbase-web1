import { OnInit, OnDestroy, TemplateRef } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { Observable, BehaviorSubject } from 'rxjs';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { ProductKindNames, LocalWindow, ProductMaskableAttribute, ProductsExternalInfoService } from '@backbase/product-summary-common-ang';
import { AccountService } from '../account.service';
import { AccountArrangementItem as ProductType, MaskableAttribute } from '@backbase/data-ang/arrangements';
import { AccountError } from '../account-error';
import { NotificationService } from '@backbase/ui-ang/notification';
import * as i0 from "@angular/core";
/**
 * Displays details for a product using its ID.
 * The ID is taken from the `selectedAccount` route param.
 *
 * The following extension slots are available in this component:
 *
 * - `ProductSummaryDetailsCustomizableDirective`
 *
 * @see ProductSummaryDetailsCustomizableDirective
 *
 * - `ProductSummaryDetailsHeaderCustomizableDirective`
 *
 * @see ProductSummaryDetailsHeaderCustomizableDirective
 *
 * - `ProductSummaryDetailsViewCustomizableDirective`
 *
 * @see ProductSummaryDetailsViewCustomizableDirective
 *
 * - `ProductSummaryDetailsLoadingCustomizableDirective`
 *
 * @see ProductSummaryDetailsLoadingCustomizableDirective
 *
 * - `ProductSummaryDetailsNoAccountSelectedCustomizableDirective`
 *
 * @see ProductSummaryDetailsNoAccountSelectedCustomizableDirective
 *
 * @usageNotes
 *
 * ### Display details of an account
 *
 * ```html
 * <bb-product-summary-account-details></bb-product-summary-account-details>
 * ```
 *
 * @ngModule ProductSummaryDetailsWidgetModule
 */
export declare class ProductSummaryDetailsComponent implements OnInit, OnDestroy {
    private readonly route;
    private readonly service;
    private readonly notificationService;
    private readonly localWindow;
    private readonly productsExternalInfoService;
    /**
     * Error notification template reference
     */
    errorNotificationTemplate: TemplateRef<any> | string;
    /**
     * @internal
     */
    readonly hostRef: ProductSummaryDetailsComponent;
    private readonly subscriptions;
    /**
     * The ID of the account for which to show the details
     * If not present, the widget has the `noAccountSelected` error state
     */
    readonly productId: Observable<string>;
    /**
     * If the fetching of the account details failed, this property
     * holds the errors coming from the server
     */
    readonly error: Observable<AccountError | undefined>;
    /**
     * Defines the loading state during the loading of data.
     */
    readonly isLoading: Observable<boolean>;
    /**
     * Event is triggered when an unmask button was clicked in any of the product types
     */
    private unmaskedProductEvent;
    /**
     * List of maskable attributes to store their states
     */
    maskableAttributes: ProductMaskableAttribute[];
    /**
     * The account details fetched from the server
     */
    readonly item: Observable<ProductType | undefined>;
    private readonly _item$;
    /**
     * Sets whether the bank customer can see details for multiple accounts at a time.
     */
    readonly multiple: BehaviorSubject<boolean>;
    /**
     * List of supported product kind names
     */
    readonly productKindNames: typeof ProductKindNames;
    /**
     * Joins the specified error messages to display on the template
     *
     * @param messages
     */
    processErrorMessages: (messages: string[] | undefined) => string | undefined;
    /**
     * Sets the passed unmasked attribute to the product
     *
     * @param product
     * @param attributeName
     * @param attributeValue
     * @private
     */
    private updateUnmaskedAttributes;
    /**
     * Event handler for product kind details components like `bb-current-account-details`
     * Emits `UnmaskedProductEventPayload` to `unmaskedProductEvent`
     *
     * @param attributeName
     * @param product
     */
    onMaskAttribute(attributeName: MaskableAttribute, product: ProductType): void;
    /**
     * Event handler for product kind details components like `bb-current-account-details`
     * Emits `UnmaskedProductEventPayload` to `unmaskedProductEvent`
     *
     * @param attributeName
     * @param product
     */
    onUnmaskAttribute(attributeName: MaskableAttribute, product: ProductType): void;
    /**
     * Constructor
     *
     * @param route
     * @param service
     * @param notificationService
     * @param localWindow
     * @param productsExternalInfoService
     */
    constructor(route: ActivatedRoute, service: AccountService, notificationService: NotificationService, localWindow: LocalWindow, productsExternalInfoService: ProductsExternalInfoService);
    /**
     * Returns unmasked productItem if present otherwise masked one
     *
     * @param details
     * @private
     */
    private mapProductDetails;
    private getRouteParam;
    /**
     * @internal
     */
    ngOnInit(): void;
    /**
     * Prints out product details
     */
    print(): void;
    /**
     * @internal
     */
    ngOnDestroy(): void;
    /**
     * Fetches unmasked attribute for the given product
     * and returns a new product with the attribute unmasked
     */
    private getUnmaskedAttribute;
    static ɵfac: i0.ɵɵFactoryDeclaration<ProductSummaryDetailsComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ProductSummaryDetailsComponent, "bb-product-summary-details", never, {}, {}, never, never>;
}
/**
 * This is an extension slot to be used for customizing the NoAccountSelected state
 *
 * @usageNotes
 *
 * ### Customize the NoAccountSelected view
 *
 * ```html
 * <ng-template
 *  bbProductSummaryDetailsNoAccountSelectedCustomizable
 *  [bbHostRef]="hostRef">
 *   Your custom template here
 * </ng-template>
 * ```
 *
 * @NgModule ProductSummaryDetailsWidgetModule
 */
export declare class ProductSummaryDetailsNoAccountSelectedCustomizableDirective extends BbTemplate<ProductSummaryDetailsComponent, ProductType> {
    static ɵfac: i0.ɵɵFactoryDeclaration<ProductSummaryDetailsNoAccountSelectedCustomizableDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<ProductSummaryDetailsNoAccountSelectedCustomizableDirective, "[bbProductSummaryDetailsNoAccountSelectedCustomizable]", never, {}, {}, never>;
}
/**
 * This is an extension slot to be used for customizing the loading state
 *
 * @usageNotes
 *
 * ### Customize the loading view
 *
 * ```html
 * <ng-template
 *  bbProductSummaryDetailsLoadingCustomizable
 *  [bbHostRef]="hostRef">
 *   Your custom template here
 * </ng-template>
 * ```
 *
 * @NgModule ProductSummaryDetailsWidgetModule
 */
export declare class ProductSummaryDetailsLoadingCustomizableDirective extends BbTemplate<ProductSummaryDetailsComponent, ProductType> {
    static ɵfac: i0.ɵɵFactoryDeclaration<ProductSummaryDetailsLoadingCustomizableDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<ProductSummaryDetailsLoadingCustomizableDirective, "[bbProductSummaryDetailsLoadingCustomizable]", never, {}, {}, never>;
}
/**
 * This is an extension slot to be used for customizing the entire view
 *
 * @usageNotes
 *
 * ### Customize the entire view
 *
 * ```html
 * <ng-template
 *  bbProductSummaryDetailsViewCustomizable
 *  let-hostRef
 *  let-item="context">
 *   Your custom template here
 * </ng-template>
 * ```
 *
 * @NgModule ProductSummaryDetailsWidgetModule
 */
export declare class ProductSummaryDetailsViewCustomizableDirective extends BbTemplate<ProductSummaryDetailsComponent, ProductType> {
    static ɵfac: i0.ɵɵFactoryDeclaration<ProductSummaryDetailsViewCustomizableDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<ProductSummaryDetailsViewCustomizableDirective, "[bbProductSummaryDetailsViewCustomizable]", never, {}, {}, never>;
}
/**
 * This is an extension slot to be used for customizing the header
 *
 * @usageNotes
 *
 * ### Customize the header
 *
 * ```html
 * <ng-template
 *   bbProductSummaryDetailsHeaderCustomizable
 *   let-hostRef
 *   let-item="context">
 *   Your custom template here
 * </ng-template>
 * ```
 *
 * @NgModule ProductSummaryDetailsWidgetModule
 */
export declare class ProductSummaryDetailsHeaderCustomizableDirective extends BbTemplate<ProductSummaryDetailsComponent, ProductType> {
    static ɵfac: i0.ɵɵFactoryDeclaration<ProductSummaryDetailsHeaderCustomizableDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<ProductSummaryDetailsHeaderCustomizableDirective, "[bbProductSummaryDetailsHeaderCustomizable]", never, {}, {}, never>;
}
/**
 * This is an extension slot to be used for customizing details
 *
 * @usageNotes
 *
 * ### Customize details
 *
 * ```html
 * <ng-template
 *   bbProductSummaryDetailsCustomizable
 *   let-hostRef
 *   let-item="context">
 *   Your custom template here
 * </ng-template>
 * ```
 *
 * @NgModule ProductSummaryDetailsWidgetModule
 */
export declare class ProductSummaryDetailsCustomizableDirective extends BbTemplate<ProductSummaryDetailsComponent, undefined> {
    static ɵfac: i0.ɵɵFactoryDeclaration<ProductSummaryDetailsCustomizableDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<ProductSummaryDetailsCustomizableDirective, "[bbProductSummaryDetailsCustomizable]", never, {}, {}, never>;
}
