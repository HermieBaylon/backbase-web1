import { Observable, BehaviorSubject } from 'rxjs';
import { AccountArrangementItem as ProductType, UnmaskedAttributeRequestParams } from '@backbase/data-ang/arrangements';
import { ProductSummaryAccountsService } from '@backbase/product-summary-common-ang';
import { AccountError } from './account-error';
import * as i0 from "@angular/core";
/**
 * Service for fetching and storing product summary account details.
 *
 * This service relies on providers from `ProductSummaryDetailsWidgetModule`.
 *
 * @see ProductSummaryDetailsWidgetModule
 *
 * @usageNotes
 *
 * ### Ensure the ProductSummaryDetailsWidgetModule is imported to your component module
 *
 * ```ts
 * @NgModule({
 *   ...
 *   imports: [
 *     ...
 *     ProductSummaryDetailsWidgetModule,
 *   ],
 * })
 * export class MyWidgetModule {}
 * ```
 *
 * ### Inject this service into your component
 *
 * ```ts
 * @Component({
 *   ...
 *   providers: [AccountService],
 * })
 *  export class MyComponent {
 * ```
 */
export declare class AccountService {
    private readonly productSummaryAccountService;
    constructor(productSummaryAccountService: ProductSummaryAccountsService);
    private readonly arrangementId;
    /**
     * If the fetching of the account details failed, this property
     * holds the errors coming from the server
     */
    readonly error: BehaviorSubject<AccountError | undefined>;
    /**
     * Defines the loading state during the loading of data.
     */
    readonly isLoading: BehaviorSubject<boolean>;
    /**
     * Fetches from the server and returns product details for `arrangementId`
     */
    productDetailsById: Observable<ProductType | undefined>;
    /**
     * Subscribes on the passed `arrangementId`
     * Causes refetching data
     *
     * @param arrangementId
     */
    loadProductDetailsFrom(arrangementId: Observable<string>): void;
    /**
     * Fetches an unmasked attribute from the server for the given attribute name
     *
     * @param requestParameters
     */
    getUnmaskedAttribute(requestParameters: UnmaskedAttributeRequestParams): Observable<string>;
    static ɵfac: i0.ɵɵFactoryDeclaration<AccountService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<AccountService>;
}
