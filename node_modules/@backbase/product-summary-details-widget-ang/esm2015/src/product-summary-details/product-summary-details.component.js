import { Component, Directive, Inject, ViewChild } from '@angular/core';
import { Observable, combineLatest, Subscription, BehaviorSubject, of } from 'rxjs';
import { catchError, filter, map, pluck, switchMap, tap } from 'rxjs/operators';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { processErrorMessages, ProductKindNames, WINDOW, setAttribute, hasExternalInfo, } from '@backbase/product-summary-common-ang';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "../account.service";
import * as i3 from "@backbase/ui-ang/notification";
import * as i4 from "@backbase/product-summary-common-ang";
import * as i5 from "@backbase/ui-ang/icon";
import * as i6 from "./product-details-ui/current-account-details/current-account-details.component";
import * as i7 from "./product-details-ui/savings-account-details/savings-account-details.component";
import * as i8 from "./product-details-ui/term-deposit-details/term-deposit-details.component";
import * as i9 from "./product-details-ui/loan-details/loan-details.component";
import * as i10 from "./product-details-ui/credit-card-details/credit-card-details.component";
import * as i11 from "./product-details-ui/debit-card-details/debit-card-details.component";
import * as i12 from "./product-details-ui/investment-account-details/investment-account-details.component";
import * as i13 from "./product-details-ui/other-details/other-details.component";
import * as i14 from "@backbase/ui-ang/empty-state";
import * as i15 from "@backbase/ui-ang/loading-indicator";
import * as i16 from "@angular/common";
import * as i17 from "@backbase/ui-ang/button";
/**
 * Displays details for a product using its ID.
 * The ID is taken from the `selectedAccount` route param.
 *
 * The following extension slots are available in this component:
 *
 * - `ProductSummaryDetailsCustomizableDirective`
 *
 * @see ProductSummaryDetailsCustomizableDirective
 *
 * - `ProductSummaryDetailsHeaderCustomizableDirective`
 *
 * @see ProductSummaryDetailsHeaderCustomizableDirective
 *
 * - `ProductSummaryDetailsViewCustomizableDirective`
 *
 * @see ProductSummaryDetailsViewCustomizableDirective
 *
 * - `ProductSummaryDetailsLoadingCustomizableDirective`
 *
 * @see ProductSummaryDetailsLoadingCustomizableDirective
 *
 * - `ProductSummaryDetailsNoAccountSelectedCustomizableDirective`
 *
 * @see ProductSummaryDetailsNoAccountSelectedCustomizableDirective
 *
 * @usageNotes
 *
 * ### Display details of an account
 *
 * ```html
 * <bb-product-summary-account-details></bb-product-summary-account-details>
 * ```
 *
 * @ngModule ProductSummaryDetailsWidgetModule
 */
export class ProductSummaryDetailsComponent {
    /**
     * Constructor
     *
     * @param route
     * @param service
     * @param notificationService
     * @param localWindow
     * @param productsExternalInfoService
     */
    constructor(route, service, notificationService, localWindow, productsExternalInfoService) {
        this.route = route;
        this.service = service;
        this.notificationService = notificationService;
        this.localWindow = localWindow;
        this.productsExternalInfoService = productsExternalInfoService;
        /**
         * Error notification template reference
         */
        this.errorNotificationTemplate = '';
        /**
         * @internal
         */
        this.hostRef = this;
        this.subscriptions = new Subscription();
        /**
         * The ID of the account for which to show the details
         * If not present, the widget has the `noAccountSelected` error state
         */
        this.productId = this.getRouteParam(this.route, 'selectedAccount').pipe(filter(productId => {
            const isMultiple = productId ? productId.split(',').length > 1 : false;
            this.multiple.next(isMultiple);
            return !isMultiple;
        }), map(productId => productId || ''));
        /**
         * If the fetching of the account details failed, this property
         * holds the errors coming from the server
         */
        this.error = this.service.error;
        /**
         * Defines the loading state during the loading of data.
         */
        this.isLoading = this.service.isLoading;
        /**
         * Event is triggered when an unmask button was clicked in any of the product types
         */
        this.unmaskedProductEvent = new BehaviorSubject(undefined);
        /**
         * List of maskable attributes to store their states
         */
        this.maskableAttributes = [];
        /**
         * The account details fetched from the server
         */
        this.item = new Observable(subscriber => {
            const subscriptions = [];
            subscriptions.push(this._item$.subscribe(product => {
                subscriber.next(product);
                if (product && hasExternalInfo(product)) {
                    subscriptions.push(this.productsExternalInfoService
                        .getProductsWithExternalInfo([product])
                        .pipe(map(([productWithFinancialInstitution]) => productWithFinancialInstitution))
                        .subscribe(subscriber));
                }
            }, subscriber.error));
            return () => subscriptions.forEach(subscription => subscription.unsubscribe());
        });
        this._item$ = combineLatest([
            this.service.productDetailsById.pipe(tap(() => {
                this.maskableAttributes = [];
                this.unmaskedProductEvent.next(undefined);
            })),
            this.unmaskedProductEvent.pipe(switchMap((payload) => {
                if (payload && !payload.attributeValue) {
                    return this.getUnmaskedAttribute(payload).pipe(filter(unmaskedAttribute => !!unmaskedAttribute), tap((unmaskedAttribute) => {
                        const maskableAttribute = this.maskableAttributes.find(attribute => attribute.attributeName === payload.attributeName);
                        if (maskableAttribute) {
                            maskableAttribute.masked = false;
                            maskableAttribute.unmaskedValue = unmaskedAttribute;
                        }
                    }), map((unmaskedValue) => ({
                        attributeName: payload.attributeName,
                        attributeValue: unmaskedValue,
                        product: payload.product,
                    })));
                }
                return of(payload);
            }), map((payload) => {
                if (payload) {
                    const { product, attributeName, attributeValue } = payload;
                    return this.updateUnmaskedAttributes(product, attributeName, attributeValue || '');
                }
                return payload;
            })),
        ]).pipe(map(this.mapProductDetails.bind(this)));
        /**
         * Sets whether the bank customer can see details for multiple accounts at a time.
         */
        this.multiple = new BehaviorSubject(false);
        /**
         * List of supported product kind names
         */
        this.productKindNames = ProductKindNames;
        /**
         * Joins the specified error messages to display on the template
         *
         * @param messages
         */
        this.processErrorMessages = processErrorMessages;
        /**
         * Sets the passed unmasked attribute to the product
         *
         * @param product
         * @param attributeName
         * @param attributeValue
         * @private
         */
        this.updateUnmaskedAttributes = setAttribute;
    }
    /**
     * Event handler for product kind details components like `bb-current-account-details`
     * Emits `UnmaskedProductEventPayload` to `unmaskedProductEvent`
     *
     * @param attributeName
     * @param product
     */
    onMaskAttribute(attributeName, product) {
        const maskableAttribute = this.maskableAttributes.find(attribute => attribute.attributeName === attributeName && attribute.maskedValue);
        if (maskableAttribute) {
            this.unmaskedProductEvent.next({ attributeName, product, attributeValue: maskableAttribute.maskedValue });
            maskableAttribute.masked = true;
        }
    }
    /**
     * Event handler for product kind details components like `bb-current-account-details`
     * Emits `UnmaskedProductEventPayload` to `unmaskedProductEvent`
     *
     * @param attributeName
     * @param product
     */
    onUnmaskAttribute(attributeName, product) {
        const maskableAttribute = this.maskableAttributes.find(attribute => attribute.attributeName === attributeName && attribute.unmaskedValue);
        const payload = { attributeName, product };
        if (maskableAttribute) {
            payload['attributeValue'] = maskableAttribute.unmaskedValue;
            maskableAttribute.masked = false;
        }
        else {
            this.maskableAttributes.push({
                attributeName,
                maskedValue: product[attributeName],
            });
        }
        this.unmaskedProductEvent.next(payload);
    }
    /**
     * Returns unmasked productItem if present otherwise masked one
     *
     * @param details
     * @private
     */
    mapProductDetails(details) {
        const [productDetails, unmaskedProduct] = details;
        return unmaskedProduct ? unmaskedProduct : productDetails;
    }
    getRouteParam(route, param) {
        const paramValue = route.paramMap.pipe(pluck('params', param));
        if (!route.parent) {
            return paramValue;
        }
        // ensure that level that has actual value keeps it from being cleared
        return combineLatest([paramValue, this.getRouteParam(route.parent, param)]).pipe(map(params => params[0] || params[1]));
    }
    /**
     * @internal
     */
    ngOnInit() {
        this.service.loadProductDetailsFrom(this.productId);
    }
    /**
     * Prints out product details
     */
    print() {
        this.localWindow.print();
    }
    /**
     * @internal
     */
    ngOnDestroy() {
        this.subscriptions.unsubscribe();
    }
    /**
     * Fetches unmasked attribute for the given product
     * and returns a new product with the attribute unmasked
     */
    getUnmaskedAttribute(unmaskedProductEventPayload) {
        const { attributeName, product } = unmaskedProductEventPayload;
        const requestParameters = {
            attributeName,
            arrangementId: product.id,
        };
        return this.service.getUnmaskedAttribute(requestParameters).pipe(catchError((error) => {
            this.notificationService.showNotification({
                header: this.errorNotificationTemplate,
                message: this.processErrorMessages(error === null || error === void 0 ? void 0 : error.messages),
                modifier: 'error',
            });
            return of('');
        }));
    }
}
ProductSummaryDetailsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryDetailsComponent, deps: [{ token: i1.ActivatedRoute }, { token: i2.AccountService }, { token: i3.NotificationService }, { token: WINDOW }, { token: i4.ProductsExternalInfoService }], target: i0.ɵɵFactoryTarget.Component });
ProductSummaryDetailsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ProductSummaryDetailsComponent, selector: "bb-product-summary-details", viewQueries: [{ propertyName: "errorNotificationTemplate", first: true, predicate: ["errorNotificationTemplate"], descendants: true, static: true }], ngImport: i0, template: "<ng-container *ngIf=\"((hostRef.multiple | async) === false); else multipleAccounts\">\n  <ng-container *ngIf=\"productId | async as productId; else noAccountSelected\">\n    <ng-container *ngIf=\"((isLoading | async) === false) && !(error | async | bbIsDefined) && (item | async) as item; else loadingTemplate\">\n      <ng-container\n        bbProductSummaryDetailsViewCustomizable\n        [bbHostRef]=\"hostRef\"\n        [bbTemplateContext]=\"item\">\n      </ng-container>\n    </ng-container>\n  </ng-container>\n</ng-container>\n\n<!-- Product summary wrapper template -->\n<ng-template\n  bbProductSummaryDetailsViewCustomizable\n  let-hostRef\n  let-item=\"context\">\n\n  <ng-container\n    bbProductSummaryDetailsHeaderCustomizable\n    [bbHostRef]=\"hostRef\"\n    [bbTemplateContext]=\"item\">\n  </ng-container>\n\n  <ng-container\n    bbProductSummaryDetailsCustomizable\n    [bbHostRef]=\"hostRef\"\n    [bbTemplateContext]=\"item\">\n  </ng-container>\n</ng-template>\n\n<!-- Product summary header template -->\n<ng-template\n  bbProductSummaryDetailsHeaderCustomizable\n  let-hostRef\n  let-item=\"context\">\n  <div\n    class=\"bb-stack bb-block bb-block--xl\"\n    data-role=\"product-summary-details-header\"\n  >\n    <h2\n      class=\"bb-stack__item bb-stack__item--fill\"\n      data-role=\"product-summary-details-header-name\"\n    >\n      {{item.displayName}}\n    </h2>\n    <button\n      bbButton\n      type=\"button\"\n      color=\"secondary\"\n      data-role=\"print\"\n      class=\"bb-stack__item\"\n      buttonSize=\"md\"\n      [circle]=\"true\"\n      (click)=\"hostRef.print()\"\n    >\n      <bb-icon-ui name=\"print\"></bb-icon-ui>\n      <span\n        class=\"sr-only\"\n        data-role=\"button-print\"\n        i18n=\"print button@@product.details.button.print\"\n      >Print</span>\n    </button>\n  </div>\n</ng-template>\n\n<!-- Product summary details template -->\n<ng-template\n  bbProductSummaryDetailsCustomizable\n  let-hostRef\n  let-item=\"context\">\n  <ng-container\n    [ngSwitch]=\"item.productKindName\">\n    <!-- Current Account -->\n    <ng-container *ngSwitchCase=\"hostRef.productKindNames.CURRENT_ACCOUNT\">\n      <bb-current-account-details\n        [product]=\"item\"\n        [maskableAttributes]=\"hostRef.maskableAttributes\"\n        (unmaskAttribute)=\"hostRef.onUnmaskAttribute($event, item)\"\n        (maskAttribute)=\"hostRef.onMaskAttribute($event, item)\"\n      >\n      </bb-current-account-details>\n    </ng-container>\n    <!-- Savings Account -->\n    <ng-container *ngSwitchCase=\"hostRef.productKindNames.SAVINGS_ACCOUNT\">\n      <bb-savings-account-details\n        [product]=\"item\"\n        [maskableAttributes]=\"hostRef.maskableAttributes\"\n        (unmaskAttribute)=\"hostRef.onUnmaskAttribute($event, item)\"\n        (maskAttribute)=\"hostRef.onMaskAttribute($event, item)\"\n      >\n      </bb-savings-account-details>\n    </ng-container>\n    <!-- Term Deposit -->\n    <ng-container *ngSwitchCase=\"hostRef.productKindNames.TERM_DEPOSIT\">\n      <bb-term-deposit-details\n        [product]=\"item\"\n        [maskableAttributes]=\"hostRef.maskableAttributes\"\n        (unmaskAttribute)=\"hostRef.onUnmaskAttribute($event, item)\"\n        (maskAttribute)=\"hostRef.onMaskAttribute($event, item)\"\n      >\n      </bb-term-deposit-details>\n    </ng-container>\n    <!-- Loan -->\n    <ng-container *ngSwitchCase=\"hostRef.productKindNames.LOAN\">\n      <bb-loan-details\n        [product]=\"item\"\n        [maskableAttributes]=\"hostRef.maskableAttributes\"\n        (unmaskAttribute)=\"hostRef.onUnmaskAttribute($event, item)\"\n        (maskAttribute)=\"hostRef.onMaskAttribute($event, item)\"\n      >\n      </bb-loan-details>\n    </ng-container>\n    <!-- Credit Card -->\n    <ng-container *ngSwitchCase=\"hostRef.productKindNames.CREDIT_CARD\">\n      <bb-credit-card-details\n        [product]=\"item\"\n        [maskableAttributes]=\"hostRef.maskableAttributes\"\n        (unmaskAttribute)=\"hostRef.onUnmaskAttribute($event, item)\"\n        (maskAttribute)=\"hostRef.onMaskAttribute($event, item)\"\n      >\n      </bb-credit-card-details>\n    </ng-container>\n    <!-- Debit Card -->\n    <ng-container *ngSwitchCase=\"hostRef.productKindNames.DEBIT_CARD\">\n      <bb-debit-card-details\n        [product]=\"item\"\n        [maskableAttributes]=\"hostRef.maskableAttributes\"\n        (unmaskAttribute)=\"hostRef.onUnmaskAttribute($event, item)\"\n        (maskAttribute)=\"hostRef.onMaskAttribute($event, item)\"\n      >\n      </bb-debit-card-details>\n    </ng-container>\n    <!-- Investment Account -->\n    <ng-container *ngSwitchCase=\"hostRef.productKindNames.INVESTMENT_ACCOUNT\">\n      <bb-investment-account-details\n        [product]=\"item\"\n        [maskableAttributes]=\"hostRef.maskableAttributes\"\n        (unmaskAttribute)=\"hostRef.onUnmaskAttribute($event, item)\"\n        (maskAttribute)=\"hostRef.onMaskAttribute($event, item)\"\n      >\n      </bb-investment-account-details>\n    </ng-container>\n    <!--\n      Other (Default):\n      This template can be used to add more custom productKinds.\n      The productKind is passed to the template so a customer can add\n      additional switch/if statements to determine what product template should be displayed\n    -->\n    <ng-container *ngSwitchDefault>\n      <bb-other-account-details\n        [product]=\"item\"\n        [maskableAttributes]=\"hostRef.maskableAttributes\"\n        (unmaskAttribute)=\"hostRef.onUnmaskAttribute($event, item)\"\n        (maskAttribute)=\"hostRef.onMaskAttribute($event, item)\"\n      >\n      </bb-other-account-details>\n    </ng-container>\n  </ng-container>\n</ng-template>\n\n<!-- Product summary details loading template -->\n<ng-template #loadingTemplate>\n  <ng-container bbProductSummaryDetailsLoadingCustomizable\n                [bbHostRef]=\"hostRef\">\n  </ng-container>\n</ng-template>\n\n<ng-template\n  bbProductSummaryDetailsLoadingCustomizable\n  let-hostRef>\n  <ng-container *ngIf=\"hostRef.error | async as error; else loading\">\n    <bb-empty-state-ui\n      iconSize=\"xxl\"\n      iconModifier=\"error-outline\"\n      iconClasses=\"text-muted\"\n      [title]=\"''\"\n      [subtitle]=\"hostRef.processErrorMessages(error.messages)\"\n    ></bb-empty-state-ui>\n  </ng-container>\n  <ng-template #loading>\n    <bb-loading-indicator-ui\n      i18n-text=\"@@product.details.loadingAccounts\"\n      [text]=\"'Loading Accounts...'\"\n    ></bb-loading-indicator-ui>\n  </ng-template>\n</ng-template>\n\n<!-- Product summary details no account selected template -->\n<ng-template #noAccountSelected>\n  <ng-container bbProductSummaryDetailsNoAccountSelectedCustomizable\n                [bbHostRef]=\"hostRef\">\n  </ng-container>\n</ng-template>\n\n<ng-template\n  bbProductSummaryDetailsNoAccountSelectedCustomizable\n  let-hostRef>\n  <bb-empty-state-ui\n    i18n-title=\"No accounts selected tittle|Empty state title label when there are no account details@@product.details.empty.title\"\n    [title]=\"'No account(s) selected.'\"\n    i18n-subtitle=\"No accounts selected subtitle|Empty state subtitle label when there are no account details@@product.details.empty.subtitle\"\n    [subtitle]=\"'Please select an account first.'\"\n  >\n  </bb-empty-state-ui>\n</ng-template>\n\n<ng-template #multipleAccounts>\n  <bb-empty-state-ui\n    data-role=\"product-summary-details-error-multi-selection\"\n    iconSize=\"xxl\"\n    iconModifier=\"error-outline\"\n    iconClasses=\"text-muted\"\n    title=\"You have selected multiple accounts\"\n    i18n-title=\"You have selected multiple accounts|Error title when getting multiple accounts@@product.details.error.multiple.title\"\n    subtitle=\"Please select only one account to display the account information\"\n    i18n-subtitle=\"Please select only one account to display the account information|Error subtitle when getting multiple accounts@@product.details.error.multiple.subtitle\"\n  ></bb-empty-state-ui>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i5.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0.forwardRef(function () { return i6.CurrentAccountDetailsComponent; }), selector: "bb-current-account-details" }, { type: i0.forwardRef(function () { return i7.SavingsAccountDetailsComponent; }), selector: "bb-savings-account-details" }, { type: i0.forwardRef(function () { return i8.TermDepositDetailsComponent; }), selector: "bb-term-deposit-details" }, { type: i0.forwardRef(function () { return i9.LoanDetailsComponent; }), selector: "bb-loan-details" }, { type: i0.forwardRef(function () { return i10.CreditCardDetailsComponent; }), selector: "bb-credit-card-details" }, { type: i0.forwardRef(function () { return i11.DebitCardDetailsComponent; }), selector: "bb-debit-card-details" }, { type: i0.forwardRef(function () { return i12.InvestmentAccountDetailsComponent; }), selector: "bb-investment-account-details" }, { type: i0.forwardRef(function () { return i13.OtherDetailsComponent; }), selector: "bb-other-account-details" }, { type: i0.forwardRef(function () { return i14.EmptyStateComponent; }), selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }, { type: i0.forwardRef(function () { return i15.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }], directives: [{ type: i0.forwardRef(function () { return i16.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return ProductSummaryDetailsViewCustomizableDirective; }), selector: "[bbProductSummaryDetailsViewCustomizable]" }, { type: i0.forwardRef(function () { return ProductSummaryDetailsHeaderCustomizableDirective; }), selector: "[bbProductSummaryDetailsHeaderCustomizable]" }, { type: i0.forwardRef(function () { return ProductSummaryDetailsCustomizableDirective; }), selector: "[bbProductSummaryDetailsCustomizable]" }, { type: i0.forwardRef(function () { return i17.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0.forwardRef(function () { return i16.NgSwitch; }), selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i0.forwardRef(function () { return i16.NgSwitchCase; }), selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i0.forwardRef(function () { return i16.NgSwitchDefault; }), selector: "[ngSwitchDefault]" }, { type: i0.forwardRef(function () { return ProductSummaryDetailsLoadingCustomizableDirective; }), selector: "[bbProductSummaryDetailsLoadingCustomizable]" }, { type: i0.forwardRef(function () { return ProductSummaryDetailsNoAccountSelectedCustomizableDirective; }), selector: "[bbProductSummaryDetailsNoAccountSelectedCustomizable]" }], pipes: { "async": i0.forwardRef(function () { return i16.AsyncPipe; }), "bbIsDefined": i0.forwardRef(function () { return i4.IsDefinedPipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryDetailsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-product-summary-details',
                    templateUrl: './product-summary-details.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.ActivatedRoute }, { type: i2.AccountService }, { type: i3.NotificationService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [WINDOW]
                }] }, { type: i4.ProductsExternalInfoService }]; }, propDecorators: { errorNotificationTemplate: [{
                type: ViewChild,
                args: ['errorNotificationTemplate', { static: true }]
            }] } });
/**
 * This is an extension slot to be used for customizing the NoAccountSelected state
 *
 * @usageNotes
 *
 * ### Customize the NoAccountSelected view
 *
 * ```html
 * <ng-template
 *  bbProductSummaryDetailsNoAccountSelectedCustomizable
 *  [bbHostRef]="hostRef">
 *   Your custom template here
 * </ng-template>
 * ```
 *
 * @NgModule ProductSummaryDetailsWidgetModule
 */
export class ProductSummaryDetailsNoAccountSelectedCustomizableDirective extends BbTemplate {
}
ProductSummaryDetailsNoAccountSelectedCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryDetailsNoAccountSelectedCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ProductSummaryDetailsNoAccountSelectedCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ProductSummaryDetailsNoAccountSelectedCustomizableDirective, selector: "[bbProductSummaryDetailsNoAccountSelectedCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryDetailsNoAccountSelectedCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbProductSummaryDetailsNoAccountSelectedCustomizable]',
                }]
        }] });
/**
 * This is an extension slot to be used for customizing the loading state
 *
 * @usageNotes
 *
 * ### Customize the loading view
 *
 * ```html
 * <ng-template
 *  bbProductSummaryDetailsLoadingCustomizable
 *  [bbHostRef]="hostRef">
 *   Your custom template here
 * </ng-template>
 * ```
 *
 * @NgModule ProductSummaryDetailsWidgetModule
 */
export class ProductSummaryDetailsLoadingCustomizableDirective extends BbTemplate {
}
ProductSummaryDetailsLoadingCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryDetailsLoadingCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ProductSummaryDetailsLoadingCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ProductSummaryDetailsLoadingCustomizableDirective, selector: "[bbProductSummaryDetailsLoadingCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryDetailsLoadingCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbProductSummaryDetailsLoadingCustomizable]',
                }]
        }] });
/**
 * This is an extension slot to be used for customizing the entire view
 *
 * @usageNotes
 *
 * ### Customize the entire view
 *
 * ```html
 * <ng-template
 *  bbProductSummaryDetailsViewCustomizable
 *  let-hostRef
 *  let-item="context">
 *   Your custom template here
 * </ng-template>
 * ```
 *
 * @NgModule ProductSummaryDetailsWidgetModule
 */
export class ProductSummaryDetailsViewCustomizableDirective extends BbTemplate {
}
ProductSummaryDetailsViewCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryDetailsViewCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ProductSummaryDetailsViewCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ProductSummaryDetailsViewCustomizableDirective, selector: "[bbProductSummaryDetailsViewCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryDetailsViewCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbProductSummaryDetailsViewCustomizable]',
                }]
        }] });
/**
 * This is an extension slot to be used for customizing the header
 *
 * @usageNotes
 *
 * ### Customize the header
 *
 * ```html
 * <ng-template
 *   bbProductSummaryDetailsHeaderCustomizable
 *   let-hostRef
 *   let-item="context">
 *   Your custom template here
 * </ng-template>
 * ```
 *
 * @NgModule ProductSummaryDetailsWidgetModule
 */
export class ProductSummaryDetailsHeaderCustomizableDirective extends BbTemplate {
}
ProductSummaryDetailsHeaderCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryDetailsHeaderCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ProductSummaryDetailsHeaderCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ProductSummaryDetailsHeaderCustomizableDirective, selector: "[bbProductSummaryDetailsHeaderCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryDetailsHeaderCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbProductSummaryDetailsHeaderCustomizable]',
                }]
        }] });
/**
 * This is an extension slot to be used for customizing details
 *
 * @usageNotes
 *
 * ### Customize details
 *
 * ```html
 * <ng-template
 *   bbProductSummaryDetailsCustomizable
 *   let-hostRef
 *   let-item="context">
 *   Your custom template here
 * </ng-template>
 * ```
 *
 * @NgModule ProductSummaryDetailsWidgetModule
 */
export class ProductSummaryDetailsCustomizableDirective extends BbTemplate {
}
ProductSummaryDetailsCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryDetailsCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ProductSummaryDetailsCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ProductSummaryDetailsCustomizableDirective, selector: "[bbProductSummaryDetailsCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryDetailsCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbProductSummaryDetailsCustomizable]',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,