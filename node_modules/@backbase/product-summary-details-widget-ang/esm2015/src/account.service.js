import { Injectable } from '@angular/core';
import { ReplaySubject, BehaviorSubject, of } from 'rxjs';
import { distinctUntilChanged, catchError, switchMap, filter, tap } from 'rxjs/operators';
import { isEqual } from '@backbase/product-summary-common-ang';
import { parseError } from './account-error';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/product-summary-common-ang";
/**
 * Service for fetching and storing product summary account details.
 *
 * This service relies on providers from `ProductSummaryDetailsWidgetModule`.
 *
 * @see ProductSummaryDetailsWidgetModule
 *
 * @usageNotes
 *
 * ### Ensure the ProductSummaryDetailsWidgetModule is imported to your component module
 *
 * ```ts
 * @NgModule({
 *   ...
 *   imports: [
 *     ...
 *     ProductSummaryDetailsWidgetModule,
 *   ],
 * })
 * export class MyWidgetModule {}
 * ```
 *
 * ### Inject this service into your component
 *
 * ```ts
 * @Component({
 *   ...
 *   providers: [AccountService],
 * })
 *  export class MyComponent {
 * ```
 */
export class AccountService {
    constructor(productSummaryAccountService) {
        this.productSummaryAccountService = productSummaryAccountService;
        this.arrangementId = new ReplaySubject(1);
        /**
         * If the fetching of the account details failed, this property
         * holds the errors coming from the server
         */
        this.error = new BehaviorSubject(undefined);
        /**
         * Defines the loading state during the loading of data.
         */
        this.isLoading = new BehaviorSubject(false);
        /**
         * Fetches from the server and returns product details for `arrangementId`
         */
        this.productDetailsById = this.arrangementId.pipe(distinctUntilChanged((a, b) => isEqual(a, b) && !this.error.value), filter(arrangementId => !!arrangementId), tap(() => this.error.next(undefined)), tap(() => this.isLoading.next(true)), switchMap((id) => this.productSummaryAccountService.getAccountById(id).pipe(catchError((error) => {
            this.error.next(parseError(error));
            return of(undefined);
        }))), tap(() => this.isLoading.next(false)));
    }
    /**
     * Subscribes on the passed `arrangementId`
     * Causes refetching data
     *
     * @param arrangementId
     */
    loadProductDetailsFrom(arrangementId) {
        arrangementId.subscribe(this.arrangementId);
    }
    /**
     * Fetches an unmasked attribute from the server for the given attribute name
     *
     * @param requestParameters
     */
    getUnmaskedAttribute(requestParameters) {
        return this.productSummaryAccountService.getUnmaskedAttribute(requestParameters);
    }
}
AccountService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountService, deps: [{ token: i1.ProductSummaryAccountsService }], target: i0.ɵɵFactoryTarget.Injectable });
AccountService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.ProductSummaryAccountsService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3VudC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vbGlicy9wcm9kdWN0LXN1bW1hcnktZGV0YWlscy13aWRnZXQtYW5nL3NyYy9hY2NvdW50LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQWMsYUFBYSxFQUFFLGVBQWUsRUFBRSxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdEUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRTFGLE9BQU8sRUFBRSxPQUFPLEVBQWlDLE1BQU0sc0NBQXNDLENBQUM7QUFDOUYsT0FBTyxFQUFFLFVBQVUsRUFBZ0IsTUFBTSxpQkFBaUIsQ0FBQzs7O0FBRTNEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBK0JHO0FBRUgsTUFBTSxPQUFPLGNBQWM7SUFDekIsWUFBNkIsNEJBQTJEO1FBQTNELGlDQUE0QixHQUE1Qiw0QkFBNEIsQ0FBK0I7UUFFdkUsa0JBQWEsR0FBRyxJQUFJLGFBQWEsQ0FBUyxDQUFDLENBQUMsQ0FBQztRQUM5RDs7O1dBR0c7UUFDTSxVQUFLLEdBQUcsSUFBSSxlQUFlLENBQTJCLFNBQVMsQ0FBQyxDQUFDO1FBQzFFOztXQUVHO1FBQ00sY0FBUyxHQUFHLElBQUksZUFBZSxDQUFVLEtBQUssQ0FBQyxDQUFDO1FBQ3pEOztXQUVHO1FBQ0gsdUJBQWtCLEdBQXdDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUMvRSxvQkFBb0IsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUNsRSxNQUFNLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLEVBQ3hDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUNyQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsRUFDcEMsU0FBUyxDQUFDLENBQUMsRUFBVSxFQUFFLEVBQUUsQ0FDdkIsSUFBSSxDQUFDLDRCQUE0QixDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQ3ZELFVBQVUsQ0FBQyxDQUFDLEtBQXdCLEVBQUUsRUFBRTtZQUN0QyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUNuQyxPQUFPLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN2QixDQUFDLENBQUMsQ0FDSCxDQUNGLEVBQ0QsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQ3RDLENBQUM7SUE3QnlGLENBQUM7SUE4QjVGOzs7OztPQUtHO0lBQ0ksc0JBQXNCLENBQUMsYUFBaUM7UUFDN0QsYUFBYSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxvQkFBb0IsQ0FBQyxpQkFBaUQ7UUFDcEUsT0FBTyxJQUFJLENBQUMsNEJBQTRCLENBQUMsb0JBQW9CLENBQUMsaUJBQWlCLENBQUMsQ0FBQztJQUNuRixDQUFDOzs0R0FoRFUsY0FBYztnSEFBZCxjQUFjOzRGQUFkLGNBQWM7a0JBRDFCLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIdHRwRXJyb3JSZXNwb25zZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IE9ic2VydmFibGUsIFJlcGxheVN1YmplY3QsIEJlaGF2aW9yU3ViamVjdCwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGRpc3RpbmN0VW50aWxDaGFuZ2VkLCBjYXRjaEVycm9yLCBzd2l0Y2hNYXAsIGZpbHRlciwgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgQWNjb3VudEFycmFuZ2VtZW50SXRlbSBhcyBQcm9kdWN0VHlwZSwgVW5tYXNrZWRBdHRyaWJ1dGVSZXF1ZXN0UGFyYW1zIH0gZnJvbSAnQGJhY2tiYXNlL2RhdGEtYW5nL2FycmFuZ2VtZW50cyc7XG5pbXBvcnQgeyBpc0VxdWFsLCBQcm9kdWN0U3VtbWFyeUFjY291bnRzU2VydmljZSB9IGZyb20gJ0BiYWNrYmFzZS9wcm9kdWN0LXN1bW1hcnktY29tbW9uLWFuZyc7XG5pbXBvcnQgeyBwYXJzZUVycm9yLCBBY2NvdW50RXJyb3IgfSBmcm9tICcuL2FjY291bnQtZXJyb3InO1xuXG4vKipcbiAqIFNlcnZpY2UgZm9yIGZldGNoaW5nIGFuZCBzdG9yaW5nIHByb2R1Y3Qgc3VtbWFyeSBhY2NvdW50IGRldGFpbHMuXG4gKlxuICogVGhpcyBzZXJ2aWNlIHJlbGllcyBvbiBwcm92aWRlcnMgZnJvbSBgUHJvZHVjdFN1bW1hcnlEZXRhaWxzV2lkZ2V0TW9kdWxlYC5cbiAqXG4gKiBAc2VlIFByb2R1Y3RTdW1tYXJ5RGV0YWlsc1dpZGdldE1vZHVsZVxuICpcbiAqIEB1c2FnZU5vdGVzXG4gKlxuICogIyMjIEVuc3VyZSB0aGUgUHJvZHVjdFN1bW1hcnlEZXRhaWxzV2lkZ2V0TW9kdWxlIGlzIGltcG9ydGVkIHRvIHlvdXIgY29tcG9uZW50IG1vZHVsZVxuICpcbiAqIGBgYHRzXG4gKiBATmdNb2R1bGUoe1xuICogICAuLi5cbiAqICAgaW1wb3J0czogW1xuICogICAgIC4uLlxuICogICAgIFByb2R1Y3RTdW1tYXJ5RGV0YWlsc1dpZGdldE1vZHVsZSxcbiAqICAgXSxcbiAqIH0pXG4gKiBleHBvcnQgY2xhc3MgTXlXaWRnZXRNb2R1bGUge31cbiAqIGBgYFxuICpcbiAqICMjIyBJbmplY3QgdGhpcyBzZXJ2aWNlIGludG8geW91ciBjb21wb25lbnRcbiAqXG4gKiBgYGB0c1xuICogQENvbXBvbmVudCh7XG4gKiAgIC4uLlxuICogICBwcm92aWRlcnM6IFtBY2NvdW50U2VydmljZV0sXG4gKiB9KVxuICogIGV4cG9ydCBjbGFzcyBNeUNvbXBvbmVudCB7XG4gKiBgYGBcbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEFjY291bnRTZXJ2aWNlIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBwcm9kdWN0U3VtbWFyeUFjY291bnRTZXJ2aWNlOiBQcm9kdWN0U3VtbWFyeUFjY291bnRzU2VydmljZSkge31cblxuICBwcml2YXRlIHJlYWRvbmx5IGFycmFuZ2VtZW50SWQgPSBuZXcgUmVwbGF5U3ViamVjdDxzdHJpbmc+KDEpO1xuICAvKipcbiAgICogSWYgdGhlIGZldGNoaW5nIG9mIHRoZSBhY2NvdW50IGRldGFpbHMgZmFpbGVkLCB0aGlzIHByb3BlcnR5XG4gICAqIGhvbGRzIHRoZSBlcnJvcnMgY29taW5nIGZyb20gdGhlIHNlcnZlclxuICAgKi9cbiAgcmVhZG9ubHkgZXJyb3IgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PEFjY291bnRFcnJvciB8IHVuZGVmaW5lZD4odW5kZWZpbmVkKTtcbiAgLyoqXG4gICAqIERlZmluZXMgdGhlIGxvYWRpbmcgc3RhdGUgZHVyaW5nIHRoZSBsb2FkaW5nIG9mIGRhdGEuXG4gICAqL1xuICByZWFkb25seSBpc0xvYWRpbmcgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PGJvb2xlYW4+KGZhbHNlKTtcbiAgLyoqXG4gICAqIEZldGNoZXMgZnJvbSB0aGUgc2VydmVyIGFuZCByZXR1cm5zIHByb2R1Y3QgZGV0YWlscyBmb3IgYGFycmFuZ2VtZW50SWRgXG4gICAqL1xuICBwcm9kdWN0RGV0YWlsc0J5SWQ6IE9ic2VydmFibGU8UHJvZHVjdFR5cGUgfCB1bmRlZmluZWQ+ID0gdGhpcy5hcnJhbmdlbWVudElkLnBpcGUoXG4gICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKGEsIGIpID0+IGlzRXF1YWwoYSwgYikgJiYgIXRoaXMuZXJyb3IudmFsdWUpLFxuICAgIGZpbHRlcihhcnJhbmdlbWVudElkID0+ICEhYXJyYW5nZW1lbnRJZCksXG4gICAgdGFwKCgpID0+IHRoaXMuZXJyb3IubmV4dCh1bmRlZmluZWQpKSxcbiAgICB0YXAoKCkgPT4gdGhpcy5pc0xvYWRpbmcubmV4dCh0cnVlKSksXG4gICAgc3dpdGNoTWFwKChpZDogc3RyaW5nKSA9PlxuICAgICAgdGhpcy5wcm9kdWN0U3VtbWFyeUFjY291bnRTZXJ2aWNlLmdldEFjY291bnRCeUlkKGlkKS5waXBlKFxuICAgICAgICBjYXRjaEVycm9yKChlcnJvcjogSHR0cEVycm9yUmVzcG9uc2UpID0+IHtcbiAgICAgICAgICB0aGlzLmVycm9yLm5leHQocGFyc2VFcnJvcihlcnJvcikpO1xuICAgICAgICAgIHJldHVybiBvZih1bmRlZmluZWQpO1xuICAgICAgICB9KSxcbiAgICAgICksXG4gICAgKSxcbiAgICB0YXAoKCkgPT4gdGhpcy5pc0xvYWRpbmcubmV4dChmYWxzZSkpLFxuICApO1xuICAvKipcbiAgICogU3Vic2NyaWJlcyBvbiB0aGUgcGFzc2VkIGBhcnJhbmdlbWVudElkYFxuICAgKiBDYXVzZXMgcmVmZXRjaGluZyBkYXRhXG4gICAqXG4gICAqIEBwYXJhbSBhcnJhbmdlbWVudElkXG4gICAqL1xuICBwdWJsaWMgbG9hZFByb2R1Y3REZXRhaWxzRnJvbShhcnJhbmdlbWVudElkOiBPYnNlcnZhYmxlPHN0cmluZz4pIHtcbiAgICBhcnJhbmdlbWVudElkLnN1YnNjcmliZSh0aGlzLmFycmFuZ2VtZW50SWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEZldGNoZXMgYW4gdW5tYXNrZWQgYXR0cmlidXRlIGZyb20gdGhlIHNlcnZlciBmb3IgdGhlIGdpdmVuIGF0dHJpYnV0ZSBuYW1lXG4gICAqXG4gICAqIEBwYXJhbSByZXF1ZXN0UGFyYW1ldGVyc1xuICAgKi9cbiAgZ2V0VW5tYXNrZWRBdHRyaWJ1dGUocmVxdWVzdFBhcmFtZXRlcnM6IFVubWFza2VkQXR0cmlidXRlUmVxdWVzdFBhcmFtcyk6IE9ic2VydmFibGU8c3RyaW5nPiB7XG4gICAgcmV0dXJuIHRoaXMucHJvZHVjdFN1bW1hcnlBY2NvdW50U2VydmljZS5nZXRVbm1hc2tlZEF0dHJpYnV0ZShyZXF1ZXN0UGFyYW1ldGVycyk7XG4gIH1cbn1cbiJdfQ==