export class AccountAccessDenied {
    constructor(response) {
        this.response = response;
        this.kind = 'AccountAccessDenied';
        this.messages = ((response.error || {}).errors || []).map((e) => e.message);
    }
}
export class AccountBadRequest {
    constructor(response) {
        this.response = response;
        this.kind = 'ProductKindsBadRequest';
        this.messages = ((response.error || {}).errors || []).map((e) => e.message);
    }
}
export class AccounttNotFound {
    constructor(response) {
        this.response = response;
        this.kind = 'ProductKindstNotFound';
        this.messages = ((response.error || {}).errors || []).map((e) => e.message);
    }
}
export class AccountConnectivityError {
    constructor(response) {
        this.response = response;
        this.kind = 'ProductKindsConnectivityError';
        this.messages = ((response.error || {}).errors || []).map((e) => e.message);
    }
}
export class AccountUnknownError {
    constructor(response) {
        this.response = response;
        this.kind = 'ProductKindsUnknownError';
        this.messages = [response.message];
    }
}
export const parseError = (error) => {
    if (error.error instanceof ErrorEvent) {
        return new AccountUnknownError(error);
    }
    else {
        switch (error.status) {
            case 0:
                return new AccountConnectivityError(error);
            case 400:
                return new AccountBadRequest(error);
            case 401:
                return new AccountAccessDenied(error);
            case 403:
                return new AccountAccessDenied(error);
            case 404:
                return new AccounttNotFound(error);
            default:
                return new AccountUnknownError(error);
        }
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3VudC1lcnJvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2xpYnMvcHJvZHVjdC1zdW1tYXJ5LWRldGFpbHMtd2lkZ2V0LWFuZy9zcmMvYWNjb3VudC1lcnJvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLE9BQU8sbUJBQW1CO0lBRzlCLFlBQXFCLFFBQTJCO1FBQTNCLGFBQVEsR0FBUixRQUFRLENBQW1CO1FBRGhELFNBQUksR0FBMEIscUJBQXFCLENBQUM7UUFFbEQsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUMsQ0FBQyxNQUFNLElBQUksRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDbkYsQ0FBQztDQUNGO0FBRUQsTUFBTSxPQUFPLGlCQUFpQjtJQUc1QixZQUFxQixRQUEyQjtRQUEzQixhQUFRLEdBQVIsUUFBUSxDQUFtQjtRQURoRCxTQUFJLEdBQTZCLHdCQUF3QixDQUFDO1FBRXhELElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDLENBQUMsTUFBTSxJQUFJLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQU0sRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ25GLENBQUM7Q0FDRjtBQUVELE1BQU0sT0FBTyxnQkFBZ0I7SUFHM0IsWUFBcUIsUUFBMkI7UUFBM0IsYUFBUSxHQUFSLFFBQVEsQ0FBbUI7UUFEaEQsU0FBSSxHQUE0Qix1QkFBdUIsQ0FBQztRQUV0RCxJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQyxDQUFDLE1BQU0sSUFBSSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFNLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNuRixDQUFDO0NBQ0Y7QUFFRCxNQUFNLE9BQU8sd0JBQXdCO0lBR25DLFlBQXFCLFFBQTJCO1FBQTNCLGFBQVEsR0FBUixRQUFRLENBQW1CO1FBRGhELFNBQUksR0FBb0MsK0JBQStCLENBQUM7UUFFdEUsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUMsQ0FBQyxNQUFNLElBQUksRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDbkYsQ0FBQztDQUNGO0FBRUQsTUFBTSxPQUFPLG1CQUFtQjtJQUc5QixZQUFxQixRQUEyQjtRQUEzQixhQUFRLEdBQVIsUUFBUSxDQUFtQjtRQURoRCxTQUFJLEdBQStCLDBCQUEwQixDQUFDO1FBRTVELElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDckMsQ0FBQztDQUNGO0FBU0QsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsS0FBd0IsRUFBZ0IsRUFBRTtJQUNuRSxJQUFJLEtBQUssQ0FBQyxLQUFLLFlBQVksVUFBVSxFQUFFO1FBQ3JDLE9BQU8sSUFBSSxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUN2QztTQUFNO1FBQ0wsUUFBUSxLQUFLLENBQUMsTUFBTSxFQUFFO1lBQ3BCLEtBQUssQ0FBQztnQkFDSixPQUFPLElBQUksd0JBQXdCLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDN0MsS0FBSyxHQUFHO2dCQUNOLE9BQU8sSUFBSSxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUN0QyxLQUFLLEdBQUc7Z0JBQ04sT0FBTyxJQUFJLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3hDLEtBQUssR0FBRztnQkFDTixPQUFPLElBQUksbUJBQW1CLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDeEMsS0FBSyxHQUFHO2dCQUNOLE9BQU8sSUFBSSxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNyQztnQkFDRSxPQUFPLElBQUksbUJBQW1CLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDekM7S0FDRjtBQUNILENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBFcnJvclJlc3BvbnNlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuXG5leHBvcnQgY2xhc3MgQWNjb3VudEFjY2Vzc0RlbmllZCB7XG4gIG1lc3NhZ2VzOiBzdHJpbmdbXTtcbiAga2luZDogJ0FjY291bnRBY2Nlc3NEZW5pZWQnID0gJ0FjY291bnRBY2Nlc3NEZW5pZWQnO1xuICBjb25zdHJ1Y3RvcihyZWFkb25seSByZXNwb25zZTogSHR0cEVycm9yUmVzcG9uc2UpIHtcbiAgICB0aGlzLm1lc3NhZ2VzID0gKChyZXNwb25zZS5lcnJvciB8fCB7fSkuZXJyb3JzIHx8IFtdKS5tYXAoKGU6IGFueSkgPT4gZS5tZXNzYWdlKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQWNjb3VudEJhZFJlcXVlc3Qge1xuICBtZXNzYWdlczogc3RyaW5nW107XG4gIGtpbmQ6ICdQcm9kdWN0S2luZHNCYWRSZXF1ZXN0JyA9ICdQcm9kdWN0S2luZHNCYWRSZXF1ZXN0JztcbiAgY29uc3RydWN0b3IocmVhZG9ubHkgcmVzcG9uc2U6IEh0dHBFcnJvclJlc3BvbnNlKSB7XG4gICAgdGhpcy5tZXNzYWdlcyA9ICgocmVzcG9uc2UuZXJyb3IgfHwge30pLmVycm9ycyB8fCBbXSkubWFwKChlOiBhbnkpID0+IGUubWVzc2FnZSk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEFjY291bnR0Tm90Rm91bmQge1xuICBtZXNzYWdlczogc3RyaW5nW107XG4gIGtpbmQ6ICdQcm9kdWN0S2luZHN0Tm90Rm91bmQnID0gJ1Byb2R1Y3RLaW5kc3ROb3RGb3VuZCc7XG4gIGNvbnN0cnVjdG9yKHJlYWRvbmx5IHJlc3BvbnNlOiBIdHRwRXJyb3JSZXNwb25zZSkge1xuICAgIHRoaXMubWVzc2FnZXMgPSAoKHJlc3BvbnNlLmVycm9yIHx8IHt9KS5lcnJvcnMgfHwgW10pLm1hcCgoZTogYW55KSA9PiBlLm1lc3NhZ2UpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBBY2NvdW50Q29ubmVjdGl2aXR5RXJyb3Ige1xuICBtZXNzYWdlczogc3RyaW5nW107XG4gIGtpbmQ6ICdQcm9kdWN0S2luZHNDb25uZWN0aXZpdHlFcnJvcicgPSAnUHJvZHVjdEtpbmRzQ29ubmVjdGl2aXR5RXJyb3InO1xuICBjb25zdHJ1Y3RvcihyZWFkb25seSByZXNwb25zZTogSHR0cEVycm9yUmVzcG9uc2UpIHtcbiAgICB0aGlzLm1lc3NhZ2VzID0gKChyZXNwb25zZS5lcnJvciB8fCB7fSkuZXJyb3JzIHx8IFtdKS5tYXAoKGU6IGFueSkgPT4gZS5tZXNzYWdlKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQWNjb3VudFVua25vd25FcnJvciB7XG4gIG1lc3NhZ2VzOiBzdHJpbmdbXTtcbiAga2luZDogJ1Byb2R1Y3RLaW5kc1Vua25vd25FcnJvcicgPSAnUHJvZHVjdEtpbmRzVW5rbm93bkVycm9yJztcbiAgY29uc3RydWN0b3IocmVhZG9ubHkgcmVzcG9uc2U6IEh0dHBFcnJvclJlc3BvbnNlKSB7XG4gICAgdGhpcy5tZXNzYWdlcyA9IFtyZXNwb25zZS5tZXNzYWdlXTtcbiAgfVxufVxuXG5leHBvcnQgdHlwZSBBY2NvdW50RXJyb3IgPVxuICB8IEFjY291bnRBY2Nlc3NEZW5pZWRcbiAgfCBBY2NvdW50QmFkUmVxdWVzdFxuICB8IEFjY291bnR0Tm90Rm91bmRcbiAgfCBBY2NvdW50Q29ubmVjdGl2aXR5RXJyb3JcbiAgfCBBY2NvdW50VW5rbm93bkVycm9yO1xuXG5leHBvcnQgY29uc3QgcGFyc2VFcnJvciA9IChlcnJvcjogSHR0cEVycm9yUmVzcG9uc2UpOiBBY2NvdW50RXJyb3IgPT4ge1xuICBpZiAoZXJyb3IuZXJyb3IgaW5zdGFuY2VvZiBFcnJvckV2ZW50KSB7XG4gICAgcmV0dXJuIG5ldyBBY2NvdW50VW5rbm93bkVycm9yKGVycm9yKTtcbiAgfSBlbHNlIHtcbiAgICBzd2l0Y2ggKGVycm9yLnN0YXR1cykge1xuICAgICAgY2FzZSAwOlxuICAgICAgICByZXR1cm4gbmV3IEFjY291bnRDb25uZWN0aXZpdHlFcnJvcihlcnJvcik7XG4gICAgICBjYXNlIDQwMDpcbiAgICAgICAgcmV0dXJuIG5ldyBBY2NvdW50QmFkUmVxdWVzdChlcnJvcik7XG4gICAgICBjYXNlIDQwMTpcbiAgICAgICAgcmV0dXJuIG5ldyBBY2NvdW50QWNjZXNzRGVuaWVkKGVycm9yKTtcbiAgICAgIGNhc2UgNDAzOlxuICAgICAgICByZXR1cm4gbmV3IEFjY291bnRBY2Nlc3NEZW5pZWQoZXJyb3IpO1xuICAgICAgY2FzZSA0MDQ6XG4gICAgICAgIHJldHVybiBuZXcgQWNjb3VudHROb3RGb3VuZChlcnJvcik7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbmV3IEFjY291bnRVbmtub3duRXJyb3IoZXJyb3IpO1xuICAgIH1cbiAgfVxufTtcbiJdfQ==