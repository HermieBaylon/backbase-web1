import { EventEmitter, OnInit } from '@angular/core';
import { AbstractControl, ControlContainer } from '@angular/forms';
import { Address, ContactItem, InputGroupName, ViewType } from '../../models/types';
import * as i0 from "@angular/core";
/**
 * The component is for showing persons personal data.
 *
 * The following extension slots are available in this component:
 *  - `ContactPersonalDataCustomizableDirective`
 *
 * @see ContactPersonalDataCustomizableDirective
 * @usageNotes
 *
 * ### Display contact personal data
 *
 * ```html
 *    <bb-contact-personal-data
 *      [contact]="hostRef.formModel.contact"
 *      [address]="hostRef.contactAddress"
 *      [viewType]="hostRef.contactViewType"
 *      [isAddContactAddress]= "hostRef.isAddContactAddress"
 *      (contactAddressAdd)= "hostRef.addContactAddress($event)"
 *      (viewChange)="hostRef.changeContactView($event)">
 *    </bb-contact-personal-data>
 * ```
 * @ngModule ContactPersonalDataModule
 */
export declare class ContactPersonalDataComponent implements OnInit {
    private readonly ctrlContainer;
    hostRef: ContactPersonalDataComponent;
    contactInputGroupName: InputGroupName;
    private originalAddress;
    /**
     * View type of the contact address
     */
    viewType: ViewType;
    /**
     * The contact details instance
     */
    contact: ContactItem;
    /**
     * Flag that denotes if contact address should be added
     */
    isAddContactAddress: boolean;
    /**
     * Address details of the contact
     */
    address: Address;
    /**
     * Property meant for forcing change detection when parent changes form state
     */
    forceChangeDetection: unknown;
    /**
     * Event emitted when contact add address flag changes
     */
    contactAddressAdd: EventEmitter<boolean>;
    /**
     *
     * Event emitted when contact address view is changed
     */
    viewChange: EventEmitter<ViewType>;
    constructor(ctrlContainer: ControlContainer);
    ngOnInit(): void;
    /**
     * Returns the control of the form
     *
     * @param {string} controlName name of a form control
     * @returns {AbstractControl | null} form control for given name.
     */
    getFormControl(controlName: string): AbstractControl | null;
    /**
     * Resets the control of the form.
     *
     * @param {string} controlName name of a form control
     */
    reset(controlName: string): void;
    /**
     * Updates the form status and mark as touched.
     * Also changes the view to CARD view once done.
     *
     * @param {string} controlName name of a form control
     */
    onAddressSubmit(controlName: string): void;
    /**
     * Emits the contact address add event
     *
     * @param {boolean} isAddAddress Emits the contact address add
     */
    onAddressAdd(isAddAddress: boolean): void;
    /**
     * hanges the view to form.
     */
    onAddressEdit(): void;
    /**
     * If there is no update then returns to card view.
     *
     * @param {string} controlName name of a form control
     */
    onAddressDiscard(controlName: string): void;
    /**
     * deletes the address and resets the form.
     *
     * @param {string} controlName name of a form control
     */
    onAddressDelete(controlName: string): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ContactPersonalDataComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ContactPersonalDataComponent, "bb-contact-personal-data", never, { "viewType": "viewType"; "contact": "contact"; "isAddContactAddress": "isAddContactAddress"; "address": "address"; "forceChangeDetection": "forceChangeDetection"; }, { "contactAddressAdd": "contactAddressAdd"; "viewChange": "viewChange"; }, never, never>;
}
