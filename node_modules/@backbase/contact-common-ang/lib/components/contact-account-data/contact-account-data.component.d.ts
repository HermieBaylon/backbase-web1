import { EventEmitter, OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { AbstractControl, ControlContainer } from '@angular/forms';
import { AccountInformation, Address, AddressType, ViewType } from '../../models/types';
import * as i0 from "@angular/core";
/**
 * The component is for showing contact  account data.
 *
 *
 * @usageNotes
 *
 * ### Display contact account data
 *
 * ```html
 *  <bb-contact-account-data
 *   [highlight]="false"
 *   [index]="index"
 *   [account]="account.data"
 *   [accountView]="account.viewType"
 *   [bankAddressViewType]="account.bankAddressViewType"
 *   [accountHolderAddressViewType]="account.accountHolderAddressViewType"
 *   [isAddBankAddress]="account.isAddBankAddress"
 *   [canCopyAddress]="hostRef.canCopyAddress()"
 *   [isContactAddressCopied]="account.isContactAddressCopied"
 *   [bankAddress]="account.bankAddress"
 *   [accountHolderAddress]="account.accountHolderAddress"
 *   [isAddAccountHolderAddress]="account.isAddAccountHolderAddress"
 *   [isAccountTypeRequired]="hostRef.isAccountTypeRequired"
 *   (bankAddressAdd)="hostRef.addBankAddress($event, index)"
 *   (accountHolderAddressAdd)="hostRef.addAccountHolderAddress($event, index)"
 *   (bankAddressViewChange)="hostRef.changeBankAddressView($event, index)"
 *   (accountHolderAddressViewChange)="hostRef.changeAccountHolderAddressView($event, index)"
 *   (editAccount)="hostRef.editAccount($event, formRef)"
 *   (deleteAccount)="hostRef.deleteAccount($event)"
 *   (contactAddressCopy)="hostRef.copyAddress($event, index)"
 *   (addressEditAfterCopy)="hostRef.onAddressEditAfterCopy(index)">
 * </bb-contact-account-data>
 * ```
 * @ngModule ContactAccountDataModule
 */
export declare class ContactAccountDataComponent implements OnInit, OnChanges {
    private readonly ctrlContainer;
    accountTypeList: string[];
    hostRef: ContactAccountDataComponent;
    readonly addressType: typeof AddressType;
    readonly ibanMask = "SS00 AAAA AAAA AAAA AAAA AAAA AAAA AAAA AA";
    private originalBankAddress;
    private originalAccountHolderAddress;
    /**
     * Current index of the account Information
     */
    index: number;
    /**
     * The details of the account
     */
    account: AccountInformation;
    /**
     * Current view type of the account. Possible values `FORM`| `CARD`. Defaults to `FORM`
     */
    accountView: ViewType;
    /**
     * Event emitted when the account is edited, i.e, switch from `CARD` view to `FORM` View
     */
    editAccount: EventEmitter<any>;
    /**
     * View type of the bank address
     */
    bankAddressViewType: ViewType;
    /**
     * View type of the account holder address
     */
    accountHolderAddressViewType: ViewType;
    /**
     * Flag that denotes if bank address should be added
     */
    isAddBankAddress: boolean;
    /**
     * Flag that denotes if address can be copied. Default value is `false`
     */
    canCopyAddress: boolean;
    /**
     * The bank address details
     */
    bankAddress: {};
    /**
     * The account holder address details
     */
    accountHolderAddress: {};
    /**
     * Flag that denotes if account holder address should be added
     */
    isAddAccountHolderAddress: boolean;
    /**
     * Flag that denotes if contact address is copied
     */
    isContactAddressCopied: boolean;
    /**
     * Property meant for forcing change detection when parent changes form state
     */
    forceChangeDetection: unknown;
    /**
     * If enabled it will apply highlight classes to this component.
     * By default is `true`.
     */
    highlight: boolean;
    /**
     * If enabled the accountType is mandatory field.
     */
    isAccountTypeRequired: boolean;
    /**
     * Event emitted when add bank address flag changes
     */
    bankAddressAdd: EventEmitter<boolean>;
    /**
     * Event emitted when add account holder address flag changes
     */
    accountHolderAddressAdd: EventEmitter<boolean>;
    /**
     * Event emitted when bank address view is changed
     */
    bankAddressViewChange: EventEmitter<ViewType>;
    /**
     * Event emitted when accountHolder address view is changed
     */
    accountHolderAddressViewChange: EventEmitter<ViewType>;
    /**
     * Event emitted when contact address has to be copied
     */
    contactAddressCopy: EventEmitter<boolean>;
    /**
     * Event emitted when the account is deleted
     */
    deleteAccount: EventEmitter<any>;
    /**
     * Event emitted when address is edited after it has been copied from contact address
     */
    addressEditAfterCopy: EventEmitter<any>;
    accountInputGroupName: string;
    constructor(ctrlContainer: ControlContainer, accountTypeList: string[]);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    /**
     *
     * @returns {string} Name of the current index of contact account.
     */
    getName(): string;
    /**
     * Emits the delete event
     *
     * @param {?number} accountIndex - account Index
     */
    onDeleteAccount(accountIndex?: number): void;
    /**
     * Emits the contactAddressCopy event
     *
     * @param {boolean} isCopy - if copy is allowed.
     */
    onAddressCopy(isCopy: boolean): void;
    /**
     * Emits the edit account method
     *
     * @param {?number} accountIndex index of an account
     */
    onEditAccount(accountIndex?: number): void;
    /**
     * Emits the bankaddress add event
     *
     * @param {boolean} isAddAddress whether new address should be added
     */
    onBankAddressAdd(isAddAddress: boolean): void;
    /**
     * Emits Bank address edit event
     */
    onBankAddressEdit(): void;
    /**
     * Emits the bankaddress delete event with index
     *
     * @param {string} controlName name of a form control
     */
    onBankAddressDelete(controlName: string): void;
    /**
     * Emits appropriate event based on validity.
     *
     * @param {string} controlName name of a form control
     * @param {AddressType} addressType enumerated value
     */
    onAddressSubmit(controlName: string, addressType: AddressType): void;
    /**
     * Emits appropriate view ehn discarded.
     *
     * @param {string} controlName name of a form control
     */
    onBankAddressDiscard(controlName: string): void;
    /**
     * Resets form control.
     *
     * @param {string} controlName name of a form control
     */
    resetAddress(controlName: string): void;
    /**
     * Checks if the address is valid.
     *
     * @param {Address} address address object
     * @returns {boolean} whether address is valid
     */
    isValidAddress(address: Address): boolean;
    /**
     * Returns the form control of given control name,
     *
     * @param {string} controlName name of a form control
     * @returns {AbstractControl} form control object
     */
    getFormControl(controlName: string): AbstractControl;
    /**
     * Emits event when account holder address is added
     *
     * @param {boolean} isAddAddress whether address should be added
     */
    onAccountHolderAddressAdd(isAddAddress: boolean): void;
    /**
     * Emits event when account holder address is edited.
     */
    onAccountHolderAddressEdit(): void;
    /**
     *Emits event when account holder address is deleted.
     *
     * @param {string} controlName name of a form control
     */
    onAccountHolderAddressDelete(controlName: string): void;
    /**
     * Emits account
     *
     * @param {string} controlName name of a form control
     */
    onAccountHolderAddressDiscard(controlName: string): void;
    /**
     * Emits address after edit copy event
     */
    onAddressEditAfterCopy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ContactAccountDataComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ContactAccountDataComponent, "bb-contact-account-data", never, { "index": "index"; "account": "account"; "accountView": "accountView"; "bankAddressViewType": "bankAddressViewType"; "accountHolderAddressViewType": "accountHolderAddressViewType"; "isAddBankAddress": "isAddBankAddress"; "canCopyAddress": "canCopyAddress"; "bankAddress": "bankAddress"; "accountHolderAddress": "accountHolderAddress"; "isAddAccountHolderAddress": "isAddAccountHolderAddress"; "isContactAddressCopied": "isContactAddressCopied"; "forceChangeDetection": "forceChangeDetection"; "highlight": "highlight"; "isAccountTypeRequired": "isAccountTypeRequired"; }, { "editAccount": "editAccount"; "bankAddressAdd": "bankAddressAdd"; "accountHolderAddressAdd": "accountHolderAddressAdd"; "bankAddressViewChange": "bankAddressViewChange"; "accountHolderAddressViewChange": "accountHolderAddressViewChange"; "contactAddressCopy": "contactAddressCopy"; "deleteAccount": "deleteAccount"; "addressEditAfterCopy": "addressEditAfterCopy"; }, never, never>;
}
