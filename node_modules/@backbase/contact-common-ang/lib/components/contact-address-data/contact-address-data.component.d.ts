import { AfterViewChecked, EventEmitter, OnInit } from '@angular/core';
import { Address, AddressType, InputName, ViewType } from '../../models/types';
import { ContactCountryListService } from '../../services/contact-country-list.service';
import { Observable } from 'rxjs';
import { InputTextComponent } from '@backbase/ui-ang/input-text';
import * as i0 from "@angular/core";
/**
 * The component is for showing contact  address data.
 *
 *
 * @usageNotes
 *
 * ### Display contact address data
 *
 * ```html
 *    <bb-contact-address-data
 *   [highlight]="hostRef.highlight"
 *   [isAddAddress]="hostRef.isAddAccountHolderAddress"
 *   [addressType]="'accountHolder'"
 *   [canCopyAddress]="hostRef.canCopyAddress"
 *   [isContactAddressCopied]="hostRef.isContactAddressCopied"
 *   [viewType]="hostRef.accountHolderAddressViewType"
 *   [address]="hostRef.accountHolderAddress"
 *   (add)="hostRef.onAccountHolderAddressAdd($event)"
 *   (edit)="hostRef.onAccountHolderAddressEdit()"
 *   (discard)="hostRef.onAccountHolderAddressDiscard($event)"
 *   (delete)="hostRef.onAccountHolderAddressDelete($event)"
 *   (submit)="hostRef.onAddressSubmit($event, hostRef.addressType.ACCOUNTHOLDER)"
 *   (contactAddressCopy)="hostRef.onAddressCopy($event)"
 *   (addressEditAfterCopy)="hostRef.onAddressEditAfterCopy()">
 * </bb-contact-address-data>
 * ```
 * @ngModule ContactAddressDataModule
 */
export declare class ContactAddressDataComponent implements OnInit, AfterViewChecked {
    private readonly contactCountryListService;
    hostRef: ContactAddressDataComponent;
    copyContactAddressInputName: InputName;
    /**
     * Flag that denotes if address form should be displayed
     */
    isAddAddress: boolean;
    /**
     * Instance that holds the address details
     */
    address: Address;
    /**
     * Type of addresses. Possible values `CONTACT`, `BANK`, `ACCOUNTHOLDER`. Defaults to `CONTACT`
     */
    addressType: AddressType;
    /**
     * Flag that denotes if address can be copied. Default value is `false`
     */
    canCopyAddress: boolean;
    /**
     * Flag that denoted if contact address is copied
     */
    isContactAddressCopied: boolean;
    /**
     * Type of address view. Possible values `FORM`| `CARD`. Defaults to `FORM`
     */
    viewType: ViewType;
    /**
     * If enabled it will apply highlight classes to this component.
     * By default is `true`.
     */
    highlight: boolean;
    /**
     * Event emitted when address is submitted
     */
    submit: EventEmitter<any>;
    /**
     * Event emitted when address is discarded
     */
    discard: EventEmitter<any>;
    /**
     * Event emitted when address is deleted
     */
    delete: EventEmitter<any>;
    /**
     * Event emitted when address is editted
     */
    edit: EventEmitter<any>;
    /**
     * Event emitted when contact address has to be copied
     */
    contactAddressCopy: EventEmitter<boolean>;
    /**
     * Event emitted when add address action is triggered
     */
    add: EventEmitter<any>;
    /**
     * Event emitted when address is edited after it has been copied from contact address
     */
    addressEditAfterCopy: EventEmitter<any>;
    /**
     * The first element one can Tab to in the form
     */
    firstTabElement?: InputTextComponent;
    private needsToRefocus;
    fieldGroupName: string;
    countriesList$: Observable<string[]>;
    constructor(contactCountryListService: ContactCountryListService);
    ngOnInit(): void;
    ngAfterViewChecked(): void;
    /**
     *
     * @returns {string} Name of the addressType.
     */
    getFieldGroupName(): string;
    /**
     * Emits the add address event
     *
     * @param {boolean} isAddAddress whether address should be added
     */
    addAddress(isAddAddress: boolean): void;
    /**
     * Emits the edit address event
     */
    editAddress(): void;
    /**
     * Emits the discard address event
     */
    discardAddress(): void;
    /**
     * Emits the delete address event
     */
    deleteAddress(): void;
    /**
     *  Emits the submit address event if valid.
     */
    submitAddress(): void;
    /**
     * Emits the copy address event
     */
    copyContactAddress(): void;
    /**
     * Emits the addressEditAfterCopy event
     */
    onAddressEdit(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ContactAddressDataComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ContactAddressDataComponent, "bb-contact-address-data", never, { "isAddAddress": "isAddAddress"; "address": "address"; "addressType": "addressType"; "canCopyAddress": "canCopyAddress"; "isContactAddressCopied": "isContactAddressCopied"; "viewType": "viewType"; "highlight": "highlight"; }, { "submit": "submit"; "discard": "discard"; "delete": "delete"; "edit": "edit"; "contactAddressCopy": "contactAddressCopy"; "add": "add"; "addressEditAfterCopy": "addressEditAfterCopy"; }, never, never>;
}
