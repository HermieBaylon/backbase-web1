import { HttpErrorResponse } from '@angular/common/http';
import { ApprovalGetResponseBodyItem, ApprovalsCreatedByMeGetResponseBodyItem, ContactGetResponseBody, Data, ApprovalSort, SortDirection } from '@backbase/data-ang/contact-manager';
export declare type Contacts = Array<ContactGetResponseBody>;
export declare type ApprovalItemsCreatedByMe = Array<ApprovalsCreatedByMeGetResponseBodyItem>;
export declare type ApprovalItems = Array<ApprovalGetResponseBodyItem>;
export interface Additions {
    [key: string]: any;
}
export interface Customizable {
    additions?: Additions;
}
export { ContactGetResponseBody as ContactItem, ContactPutResponseBody as ApprovalRequired, ContactPutResponseBody as ContactUpdateDeleteResponse, ContactPutRequestBody as Contact, } from '@backbase/data-ang/contact-manager';
export { GetApprovalDetailsResponse as ApprovalDetails } from '@backbase/data-ang/approvals';
export { RecordDto as ApprovalRecord } from '@backbase/data-ang/approvals';
export declare enum LoadMoreMethod {
    LOAD_MORE = "load-more",
    PAGINATION = "pagination"
}
export declare enum ContactActions {
    Load = 0,
    Refresh = 1,
    LoadMore = 2,
    ChangePage = 3,
    Search = 4,
    Sort = 5
}
export interface ContactRequestParameters {
    /**
     * fetch data from page number.
     */
    from?: number;
    /**
     * Size of the page
     */
    size?: number;
    /**
     * search query
     */
    query?: string;
    /**
     * Sorted Column
     */
    sort?: ApprovalSort;
    /**
     * Direction
     */
    direction?: SortDirection;
}
export interface ContactState {
    /**
     * contact user action.
     */
    action?: ContactActions;
    /**
     * data from page number.
     */
    from?: number;
    /**
     * page Size
     */
    pageSize?: number;
    /**
     * load more method.
     */
    loadMoreMethod?: LoadMoreMethod;
    /**
     * search term query
     */
    query?: string;
    sort?: ApprovalSort;
    direction?: SortDirection;
}
export interface ContactResponse {
    /**
     * total contacts
     */
    totalCount: number;
    /**
     * Contacts in a list
     */
    items: Contacts;
}
export interface ExtendedContactResponse extends ContactResponse {
    /**
     * if the loadmoreMethod is load-more
     */
    isLoadMore: boolean;
}
interface ErrorItem extends Customizable {
    message?: string;
    key?: string;
    context?: Record<string, unknown>;
}
export declare class ContactsError {
    private readonly errorResponse?;
    message: string;
    status?: number;
    errors?: ErrorItem[];
    additions?: Additions;
    constructor(errorResponse?: HttpErrorResponse);
}
export interface ApprovalsCreatedByMe {
    /**
     * ApprovalsItems in a list created by me
     */
    items: ApprovalItemsCreatedByMe;
    /**
     * total number of items in the list
     */
    totalCount: number;
}
export interface Approvals {
    /**
     * ApprovalsItems in a list
     */
    items: ApprovalItems;
    /**
     * total number of items in the list
     */
    totalCount: number;
}
export interface Address {
    /**
     * address line 1 of contact address
     */
    addressLine1?: string;
    /**
     * address line 2 of contact address
     */
    addressLine2?: string;
    /**
     * street name of contact address
     */
    streetName?: string;
    /**
     * town of contact address
     */
    town?: string;
    /**
     * postal code of contact address
     */
    postCode?: string;
    /**
     * country sub division of contact address
     */
    countrySubDivision?: string;
    /**
     * country of contact address
     */
    country?: string;
}
export declare enum ViewType {
    CARD = "CARD",
    FORM = "FORM"
}
export declare enum InputGroupName {
    CONTACT = "contactDetails",
    ACCOUNT = "accountDetails",
    ADDRESS = "addressDetails"
}
export declare enum InputName {
    COPY_CONTACT_ADDRESS = "copyContactAddress"
}
export declare enum AddressType {
    CONTACT = "",
    BANK = "bank",
    ACCOUNTHOLDER = "accountHolder"
}
export declare class ContactFormGroupItem {
    viewType?: ViewType;
    data?: Record<string, any>;
    bankAddressViewType?: ViewType;
    accountHolderAddressViewType?: ViewType;
    isAddBankAddress?: boolean;
    isAddAccountHolderAddress?: boolean;
    accountHolderAddress?: Address;
    bankAddress?: Address;
    isCopyAddress?: boolean;
    isContactAddressCopied?: boolean;
}
export declare enum AccessContextScope {
    USER = "USER",
    SA = "SA",
    LE = "LE"
}
export declare enum ActiveContactStatus {
    ACTIVE = "ACTIVE",
    PENDING_APPROVAL = "PENDING_APPROVAL"
}
export declare enum ContactUpdateDeleteStatus {
    APPROVAL_REQUIRED = "APPROVAL_REQUIRED",
    REQUEST_ACCEPTED = "REQUEST_ACCEPTED",
    REJECTED = "REJECTED",
    PENDING = "PENDING",
    APPROVED = "APPROVED",
    CANCELLED = "CANCELLED"
}
export declare enum ApprovalStatus {
    OPEN = "OPEN",
    CLOSED = "CLOSED",
    INVALID = "INVALID",
    VALID = "VALID",
    ENTERED = "ENTERED",
    READY = "READY",
    ACCEPTED = "ACCEPTED",
    REJECTED = "REJECTED"
}
export interface Id extends Customizable {
    id: string;
}
export interface AccountInformation {
    name?: string;
    alias?: string;
    accountNumber?: string;
    IBAN?: string;
    accountType?: string;
    BIC?: string;
    bankCode?: string;
    bankName?: string;
    bankAddressLine1?: string;
    bankAddressLine2?: string;
    bankStreetName?: string;
    bankTown?: string;
    bankPostCode?: string;
    bankCountrySubDivision?: string;
    bankCountry?: string;
    accountHolderAddressLine1?: string;
    accountHolderAddressLine2?: string;
    accountHolderStreetName?: string;
    accountHolderTown?: string;
    accountHolderPostCode?: string;
    accountHolderCountrySubDivision?: string;
    accountHolderCountry?: string;
    email?: string;
    phoneNumber?: string;
}
export interface ApprovalItemCreatedByMe {
    creationTime: string;
    creatorBbId: string;
    data: Data;
    id: string;
    action: string;
    status: string;
}
