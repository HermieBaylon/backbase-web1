import { ApprovalResultStatus, ApprovalsHttpService, ContactPutResponseBody, ContactsHttpService, SupportedCountriesHttpService } from '@backbase/data-ang/contact-manager';
import { Observable } from 'rxjs';
import { ApprovalRequired, Approvals, ApprovalsCreatedByMe, ContactItem, ContactRequestParameters, ContactResponse } from '../models/types';
import { HttpResponse } from '@angular/common/http';
import * as i0 from "@angular/core";
/**
 * Service responsible for connecting Contact service to data-ang services
 *  - `ContactService`
 *  - `ContactsHttpService`
 *  - `ApprovalsHttpService`
 * This service is dependant on data-ang.
 *
 * @see ContactService
 * @see ContactsHttpService,
 * @see ApprovalsHttpService,
 * @usageNotes
 *
 * ```ts
 * @NgModule({
 *   ...
 *   providers: [
 *     ...
 *     ContactHttpService,
 *   ],
 * })
 * export class MyContactCommonAngModule {}
 * ```
 *
 * ### Inject this service into your component
 *
 * ```ts
 * @Component({
 *   ...
 *   providers: [ContactHttpService],
 * })
 *  export class ContactCommonAngComponent {
 * ```
 */
export declare class ContactHttpService {
    private readonly contactDataHttpService;
    private readonly approvalService;
    private readonly supportedCountriesService;
    constructor(contactDataHttpService: ContactsHttpService, approvalService: ApprovalsHttpService, supportedCountriesService: SupportedCountriesHttpService);
    /**
     * Get the contacts from data-ang API.
     *
     * @param {ContactRequestParameters} params - Contact Request Parameters
     * @returns {Observable<ContactResponse>} service response in an Observable
     */
    getContacts(params: ContactRequestParameters): Observable<ContactResponse>;
    /**
     * Fetches Contact based on the ID given from data-ang method
     *
     * @param {string} contactId contact ID
     * @returns {Observable<ContactItem | undefined>} observable of a response
     */
    getContact(contactId: string): Observable<ContactItem | undefined>;
    /**
     * Calls the data-ang method for delete contact based on the ID
     *
     * @param {string} contactId contact ID
     * @returns {Observable<ApprovalRequired>} observable of a response
     */
    deleteContact(contactId: string): Observable<ApprovalRequired>;
    /**
     * Calls the data-ang Method based on params provided.
     *
     * @param {ContactRequestParameters} params request parameters
     * @returns {Observable<Approvals>} observable of a response
     */
    getPendingApprovals(params: ContactRequestParameters): Observable<Approvals>;
    /**
     * Calls datanag method for fetching contact list of all pending approvals created by me.
     *
     * @param {ContactRequestParameters} params request parameters
     * @returns {Observable<ApprovalsCreatedByMe>} observable of a response
     */
    getApprovalsCreatedByMe(params: ContactRequestParameters): Observable<ApprovalsCreatedByMe>;
    /**
     * Calls data ang method for deleting the approval records.
     *
     * @param {string} requestId id of a contact
     * @returns {Observable<any>} observable of a response
     */
    deleteApprovalsRecord(requestId: string): Observable<any>;
    /**
     * Update the contact
     *
     * @param {ContactItem} contact updated contact Object
     * @returns {Observable<ContactPutResponseBody>} observable of a response
     */
    updateContact(contact: ContactItem): Observable<ContactPutResponseBody>;
    /**
     * Calls the data-ang method for Approve Contact .
     *
     * @param {string} requestId id of a contact
     * @param {string?} comment explanation of request approval
     * @returns {Observable<ApprovalResultStatus>} observable of a response
     */
    approveContact(requestId: string, comment?: string): Observable<ApprovalResultStatus>;
    /**
     * Calls the data-ang method for Reject Contact .
     *
     * @param {string} requestId id of a contact
     * @param {string?} comment explanation of request rejection
     * @returns {Observable<any>} observable of a response
     */
    rejectContact(requestId: string, comment?: string): Observable<any>;
    /**
     * Calls the data-ang method for supported countries .
     *
     * @returns {Observable<HttpResponse<string[]>>} observable of a response
     */
    getSupportedCountries(): Observable<HttpResponse<string[]>>;
    static ɵfac: i0.ɵɵFactoryDeclaration<ContactHttpService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<ContactHttpService>;
}
