import { OnDestroy } from '@angular/core';
import { ContactHttpService } from './contact-http.service';
import { BehaviorSubject, Observable, ReplaySubject, Subject } from 'rxjs';
import { ApprovalRequired, ContactActions, ContactItem, ContactResponse, ExtendedContactResponse, LoadMoreMethod } from '../models/types';
import { SortEvent } from '@backbase/ui-ang/table';
import { SortDirection, ApprovalSort } from '@backbase/data-ang/contact-manager';
import * as i0 from "@angular/core";
export interface ContactsServiceConfig {
    pageSize: number;
}
export declare const ContactsServiceConfigDefaults: {
    pageSize: number;
};
/**
 * Service calls the APIs for all the actions done by the user.
 * This service Injects ContactHttpService
 *
 * @see ContactHttpService
 * @usageNotes
 *
 *
 * ```ts
 * @NgModule({
 *   ...
 *   providers: [
 *     ...
 *     ContactService,
 *   ],
 * })
 * export class MyContactCommonAngModule {}
 * ```
 *
 * ### Inject this service into your component
 *
 * ```ts
 * @Component({
 *   ...
 *   providers: [ContactService],
 * })
 *  export class ContactCommonAngComponent {
 * ```
 */
export declare class ContactService implements OnDestroy {
    private readonly contactHttpService;
    protected readonly destroy$: Subject<unknown>;
    private readonly changePage$;
    private readonly loadMore$;
    private readonly load$;
    private readonly refresh$;
    private readonly search$;
    private readonly sort$;
    protected readonly config$: BehaviorSubject<ContactsServiceConfig>;
    private readonly id$$;
    private readonly subscriptions;
    private readonly contact$;
    readonly loading$$: ReplaySubject<boolean>;
    readonly loading$: Observable<boolean>;
    protected set loading(val: boolean);
    private readonly acting$$;
    readonly acting$: Observable<boolean>;
    protected set acting(val: boolean);
    private readonly pageSize$;
    private readonly actions$;
    protected readonly state$: Observable<{
        query: string;
        size: number;
        from: number;
        action?: ContactActions;
        sort?: ApprovalSort;
        direction?: SortDirection;
    }>;
    protected readonly effects$: Observable<ExtendedContactResponse>;
    protected readonly contactsSource$: BehaviorSubject<ContactResponse>;
    get contacts$(): Observable<ContactResponse>;
    constructor(contactHttpService: ContactHttpService);
    protected removeEmptyParameters<T>(parameters: T): T;
    /**
     * Sets the Subject with updated contactService config.
     *
     * @param {ContactsServiceConfig} config - new config for Contact Service
     */
    init(config: ContactsServiceConfig): void;
    /**
     *  Updates the subject with value
     */
    load(): void;
    /**
     * Updates the loadMore Subject with pageFrom value.
     *
     * @param {number} from - page From the data has to be fetched.
     */
    loadMore(from: number): void;
    /**
     * Updates the changePage subject to updated page.
     *
     * @param {number} from - page From the data has to be fetched.
     */
    changePage(from: number): void;
    /**
     * Triggers the refresh listener with current load more.
     *
     * @param {LoadMoreMethod} loadMoreMethod - Current LoadMore method can be pagination / load-more
     */
    refresh(loadMoreMethod: LoadMoreMethod): void;
    /**
     * Triggers search Listner with search query.
     *
     * @param {string} query - search text entered by the user.
     */
    searchContacts(query: string): void;
    /**
     * Triggers sort Listner with mapped event.
     *
     * @param {string} sortEvent - table sort event.
     */
    sortApprovals(sortEvent: SortEvent): void;
    /**
     * Subscribes to the contact of a given contact ID.
     *
     * @param {Observable<string | null>} id Observable of Contact ID.
     * @returns {Observable<ContactItem | undefined>} of contact Details with that ID.
     */
    getContactFrom(id: Observable<string | null>): Observable<ContactItem | undefined>;
    /**
     * Returns the details for a given ID.
     *
     * @param {string} id contact ID
     * @returns {Observable<ContactItem | undefined>} Observable of contact Details for given ID.
     */
    getContactById(id: string): Observable<ContactItem | undefined>;
    /**
     * Calls the delete API for specific ID
     *
     * @param {string} contactId Contact ID
     * @returns {Observable<ApprovalRequired>} observable of a result
     */
    deleteContact(contactId: string): Observable<ApprovalRequired>;
    /**
     *
     * @param {ContactItem} contact contact item object
     * @returns {Observable<ApprovalRequired>} response of a contact update
     */
    updateContact(contact: ContactItem): Observable<ApprovalRequired>;
    /**
     * Calls the API for approval
     *
     * @param {string} approvalId - approval ID
     * @param {string?} comment explanation of request approval
     * @returns {Observable<string>} response of a contact edit approval
     */
    approveContact(approvalId: string, comment?: string): Observable<string>;
    /**
     * Calls the API for rejction
     *
     * @param {string} approvalId approval ID
     * @param {string?} comment explanation of request rejection
     * @returns {Observable<string>} response of an approval rejection
     */
    rejectContact(approvalId: string, comment?: string): Observable<string>;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ContactService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<ContactService>;
}
