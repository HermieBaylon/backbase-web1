import * as i0 from '@angular/core';
import { EventEmitter, Component, ChangeDetectionStrategy, Input, Output, NgModule, Injectable, InjectionToken, Inject, Directive, Pipe, ViewChild } from '@angular/core';
import * as i1 from '@backbase/ui-ang/modal';
import { ModalModule } from '@backbase/ui-ang/modal';
import * as i2 from '@backbase/ui-ang/textarea';
import { TextareaModule } from '@backbase/ui-ang/textarea';
import * as i3 from '@angular/common';
import { CommonModule, DatePipe } from '@angular/common';
import * as i1$1 from '@angular/forms';
import { FormsModule, NG_VALIDATORS, ControlContainer, NgModelGroup, FormControl, NgForm } from '@angular/forms';
import * as i5 from '@backbase/ui-ang/button';
import { ButtonModule } from '@backbase/ui-ang/button';
import * as i1$2 from '@backbase/data-ang/contact-manager';
import { ApprovalSort } from '@backbase/data-ang/contact-manager';
import { throwError, of, Subject, BehaviorSubject, ReplaySubject, merge } from 'rxjs';
import { map, catchError, switchMap, mapTo, scan, filter, shareReplay, mergeMap, finalize, takeUntil, debounceTime, distinctUntilChanged } from 'rxjs/operators';
import { __rest } from 'tslib';
import * as i1$3 from '@backbase/data-ang/approvals';
import { BbTemplate } from '@backbase/foundation-ang/core';
import * as i2$1 from '@backbase/ui-ang/icon';
import { IconModule } from '@backbase/ui-ang/icon';
import * as i2$2 from '@backbase/ui-ang/header';
import { HeaderModule } from '@backbase/ui-ang/header';
import * as i7 from '@backbase/ui-ang/tooltip-directive';
import { TooltipModule } from '@backbase/ui-ang/tooltip-directive';
import * as i8 from '@backbase/ui-ang/iban-pipe';
import { BbIbanPipeModule } from '@backbase/ui-ang/iban-pipe';
import * as i2$3 from '@backbase/ui-ang/input-text';
import { InputTextModule } from '@backbase/ui-ang/input-text';
import * as i3$1 from '@backbase/ui-ang/input-validation-message';
import { InputValidationMessageModule } from '@backbase/ui-ang/input-validation-message';
import * as i6 from '@backbase/ui-ang/dropdown-single-select';
import { DropdownSingleSelectModule } from '@backbase/ui-ang/dropdown-single-select';
import * as i8$1 from '@backbase/ui-ang/input-checkbox';
import { InputCheckboxModule } from '@backbase/ui-ang/input-checkbox';
import * as i4 from '@backbase/ui-ang/input-email';
import { InputEmailModule } from '@backbase/ui-ang/input-email';
import * as i1$4 from '@backbase/ui-ang/search-box';
import { SearchBoxModule } from '@backbase/ui-ang/search-box';
import * as i1$5 from '@backbase/ui-ang/item-log';
import { ItemLogModule } from '@backbase/ui-ang/item-log';
import * as i1$6 from '@backbase/ui-ang/collapsible';
import { CollapsibleModule } from '@backbase/ui-ang/collapsible';

/**
 * The component is for showing confirmation dialog
 *
 *
 * @usageNotes
 *
 * ### Display confirmation dialog
 *
 * ```html
 *  <bb-confirm-action-dialog
 *   [isOpen]="hostRef.isCancelCreateConfirmOpened"
 *   [confirmButtonColor]="'danger'"
 *   (confirm)="hostRef.onExitCreateContact()"
 *   (cancel)="hostRef.onResumeCreateContact()"
 * >
 *   <span title i18n="@@contact-create.confirm-action-dialog.title">Discard entered data?</span>
 *   <span body i18n="@@contact-create.confirm-action-dialog.body">
 *      Are you sure to exit creation of a new contact? The data you have entered will be lost.</span>
 *   <span cancelButtonLabel i18n="@@contact-create.confirm-action-dialog.button.cancel">Not now</span>
 *   <span confirmButtonLabel i18n="@@contact-create.confirm-action-dialog.button.confirm">Discard</span>
 * </bb-confirm-action-dialog>
 * ```
 * @ngModule ConfirmActionDialogModule
 */
class ConfirmActionDialogComponent {
    constructor() {
        this.modalOptions = {
            backdrop: 'static',
            keyboard: false,
        };
        this.comment = '';
        /**
         * The button color for confirm button
         * Default value is `primary`.
         */
        this.confirmButtonColor = 'primary';
        /**
         * The button color for cancel button
         * Default value is `link`.
         */
        this.cancelButtonColor = 'link';
        /**
         * Indicator for confirmation dialog open state.
         * Default value is `false`.
         */
        this.isOpen = false;
        /**
         * Whether comment input should be shown
         */
        this.attachComment = false;
        /**
         * Text for comment field label
         */
        this.commentFieldLabel = 'Add comment';
        /**
         * Event triggered when confirming the action
         */
        this.confirm = new EventEmitter();
        /**
         * Event triggered when cancelling the action
         */
        this.cancel = new EventEmitter();
    }
    ngOnChanges(changes) {
        if (changes.isOpen) {
            this.comment = '';
        }
    }
    /**
     * Emits the cancel event
     */
    onClickCancel() {
        this.cancel.emit();
    }
    /**
     * Emits the confirm event.
     */
    onClickConfirm() {
        this.confirm.emit({ comment: this.comment });
    }
}
/** @nocollapse */ ConfirmActionDialogComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ConfirmActionDialogComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ ConfirmActionDialogComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ConfirmActionDialogComponent, selector: "bb-confirm-action-dialog", inputs: { confirmButtonColor: "confirmButtonColor", cancelButtonColor: "cancelButtonColor", isOpen: "isOpen", attachComment: "attachComment", commentFieldLabel: "commentFieldLabel" }, outputs: { confirm: "confirm", cancel: "cancel" }, usesOnChanges: true, ngImport: i0, template: "<bb-modal-ui\n  [isOpen]=\"isOpen\"\n  [modalOptions]=\"modalOptions\"\n  aria-labelledby=\"contact-confirm-action-dialog-header\"\n  aria-describedby=\"contact-confirm-action-dialog-body\"\n>\n  <bb-modal-header-ui>\n    <ng-template bbCustomModalHeader>\n      <h1 class=\"modal-title\" data-role=\"confirm-action-header\" id=\"contact-confirm-action-dialog-header\">\n        <ng-content select=\"[title]\"></ng-content>\n      </h1>\n    </ng-template>\n  </bb-modal-header-ui>\n\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody>\n      <div [ngClass]=\"{ 'bb-block bb-block--md': attachComment }\" id=\"contact-confirm-action-dialog-body\">\n        <ng-content select=\"[body]\"></ng-content>\n      </div>\n\n      <ng-container *ngIf=\"attachComment && isOpen\">\n        <label #commentLabel id=\"contact-approval-log-comment-label\" i18n=\"@@bb-confirmation-dialog.comment\"\n          >{{ commentFieldLabel }}</label\n        >\n        <span id=\"comment-optional-info\" class=\"bb-text-support\">\n          (<ng-container i18n=\"@@bb-confirmation-dialog.comment.optional-label\">Optional</ng-container>)\n        </span>\n        <bb-textarea-ui\n          wrap=\"hard\"\n          [rows]=\"3\"\n          [cols]=\"50\"\n          [minLength]=\"3\"\n          [maxLength]=\"140\"\n          [(ngModel)]=\"comment\"\n          [aria-labelledby]=\"commentLabel.id\"\n          aria-describedby=\"comment-optional-info\"\n          showCharCounter=\"true\"\n          data-role=\"confirmation-comment\"\n        ></bb-textarea-ui>\n      </ng-container>\n    </ng-template>\n  </bb-modal-body-ui>\n\n  <bb-modal-footer-ui>\n    <ng-template bbCustomModalFooter>\n      <div class=\"bb-button-bar\">\n        <button\n          bbButton\n          class=\"bb-button-bar__button\"\n          [color]=\"confirmButtonColor\"\n          (click)=\"onClickConfirm()\"\n          data-role=\"confirm-action-confirm-btn\"\n        >\n          <ng-content select=\"[confirmButtonLabel]\"></ng-content>\n        </button>\n\n        <button\n          bbButton\n          class=\"bb-button-bar__button\"\n          [color]=\"cancelButtonColor\"\n          (click)=\"onClickCancel()\"\n          data-role=\"confirm-action-cancel-btn\"\n        >\n          <ng-content select=\"[cancelButtonLabel]\"></ng-content>\n        </button>\n      </div>\n    </ng-template>\n  </bb-modal-footer-ui>\n</bb-modal-ui>\n", components: [{ type: i1.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i1.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i1.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: i2.TextareaComponent, selector: "bb-textarea-ui", inputs: ["rows", "cols", "placeholder", "maxLength", "minLength", "readonly", "showCharCounter", "wrap"] }, { type: i1.ModalFooterComponent, selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }], directives: [{ type: i1.CustomModalHeaderDirective, selector: "ng-template[bbCustomModalHeader]" }, { type: i1.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i3.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i1.CustomModalFooterDirective, selector: "ng-template[bbCustomModalFooter]" }, { type: i5.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ConfirmActionDialogComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-confirm-action-dialog',
                    templateUrl: 'confirm-action-dialog.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { confirmButtonColor: [{
                type: Input
            }], cancelButtonColor: [{
                type: Input
            }], isOpen: [{
                type: Input
            }], attachComment: [{
                type: Input
            }], commentFieldLabel: [{
                type: Input
            }], confirm: [{
                type: Output
            }], cancel: [{
                type: Output
            }] } });

/**
 * Exports ConfirmActionDialogComponent
 */
class ConfirmActionDialogModule {
}
/** @nocollapse */ ConfirmActionDialogModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ConfirmActionDialogModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ ConfirmActionDialogModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ConfirmActionDialogModule, declarations: [ConfirmActionDialogComponent], imports: [ModalModule, ButtonModule, CommonModule, TextareaModule, FormsModule], exports: [ConfirmActionDialogComponent] });
/** @nocollapse */ ConfirmActionDialogModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ConfirmActionDialogModule, imports: [[ModalModule, ButtonModule, CommonModule, TextareaModule, FormsModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ConfirmActionDialogModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [ConfirmActionDialogComponent],
                    exports: [ConfirmActionDialogComponent],
                    imports: [ModalModule, ButtonModule, CommonModule, TextareaModule, FormsModule],
                }]
        }] });

var LoadMoreMethod;
(function (LoadMoreMethod) {
    LoadMoreMethod["LOAD_MORE"] = "load-more";
    LoadMoreMethod["PAGINATION"] = "pagination";
})(LoadMoreMethod || (LoadMoreMethod = {}));
var ContactActions;
(function (ContactActions) {
    ContactActions[ContactActions["Load"] = 0] = "Load";
    ContactActions[ContactActions["Refresh"] = 1] = "Refresh";
    ContactActions[ContactActions["LoadMore"] = 2] = "LoadMore";
    ContactActions[ContactActions["ChangePage"] = 3] = "ChangePage";
    ContactActions[ContactActions["Search"] = 4] = "Search";
    ContactActions[ContactActions["Sort"] = 5] = "Sort";
})(ContactActions || (ContactActions = {}));
class ContactsError {
    constructor(errorResponse) {
        this.errorResponse = errorResponse;
        if (this.errorResponse) {
            const { status, error } = this.errorResponse;
            this.status = status;
            if (error) {
                this.message = error.message || '';
                this.errors = error.errors || [];
                this.additions = error.additions || {};
            }
        }
    }
}
var ViewType;
(function (ViewType) {
    ViewType["CARD"] = "CARD";
    ViewType["FORM"] = "FORM";
})(ViewType || (ViewType = {}));
var InputGroupName;
(function (InputGroupName) {
    InputGroupName["CONTACT"] = "contactDetails";
    InputGroupName["ACCOUNT"] = "accountDetails";
    InputGroupName["ADDRESS"] = "addressDetails";
})(InputGroupName || (InputGroupName = {}));
var InputName;
(function (InputName) {
    InputName["COPY_CONTACT_ADDRESS"] = "copyContactAddress";
})(InputName || (InputName = {}));
var AddressType;
(function (AddressType) {
    AddressType["CONTACT"] = "";
    AddressType["BANK"] = "bank";
    AddressType["ACCOUNTHOLDER"] = "accountHolder";
})(AddressType || (AddressType = {}));
class ContactFormGroupItem {
    constructor() {
        this.viewType = ViewType.FORM;
        this.data = {};
        this.bankAddressViewType = ViewType.FORM;
        this.accountHolderAddressViewType = ViewType.FORM;
        this.isAddBankAddress = false;
        this.isAddAccountHolderAddress = false;
        this.accountHolderAddress = {};
        this.bankAddress = {};
        this.isCopyAddress = false;
        this.isContactAddressCopied = false;
    }
}
var AccessContextScope;
(function (AccessContextScope) {
    AccessContextScope["USER"] = "USER";
    AccessContextScope["SA"] = "SA";
    AccessContextScope["LE"] = "LE";
})(AccessContextScope || (AccessContextScope = {}));
var ActiveContactStatus;
(function (ActiveContactStatus) {
    ActiveContactStatus["ACTIVE"] = "ACTIVE";
    ActiveContactStatus["PENDING_APPROVAL"] = "PENDING_APPROVAL";
})(ActiveContactStatus || (ActiveContactStatus = {}));
var ContactUpdateDeleteStatus;
(function (ContactUpdateDeleteStatus) {
    ContactUpdateDeleteStatus["APPROVAL_REQUIRED"] = "APPROVAL_REQUIRED";
    ContactUpdateDeleteStatus["REQUEST_ACCEPTED"] = "REQUEST_ACCEPTED";
    ContactUpdateDeleteStatus["REJECTED"] = "REJECTED";
    ContactUpdateDeleteStatus["PENDING"] = "PENDING";
    ContactUpdateDeleteStatus["APPROVED"] = "APPROVED";
    ContactUpdateDeleteStatus["CANCELLED"] = "CANCELLED";
})(ContactUpdateDeleteStatus || (ContactUpdateDeleteStatus = {}));
var ApprovalStatus;
(function (ApprovalStatus) {
    ApprovalStatus["OPEN"] = "OPEN";
    ApprovalStatus["CLOSED"] = "CLOSED";
    ApprovalStatus["INVALID"] = "INVALID";
    ApprovalStatus["VALID"] = "VALID";
    ApprovalStatus["ENTERED"] = "ENTERED";
    ApprovalStatus["READY"] = "READY";
    ApprovalStatus["ACCEPTED"] = "ACCEPTED";
    ApprovalStatus["REJECTED"] = "REJECTED";
})(ApprovalStatus || (ApprovalStatus = {}));

const toCamelCase = (str = '') => {
    return str.substr(0, 1).toLowerCase() + str.substr(1);
};
const addressFrom = (address, type) => ({
    addressLine1: address[toCamelCase(`${type}AddressLine1`)],
    addressLine2: address[toCamelCase(`${type}AddressLine2`)],
    streetName: address[toCamelCase(`${type}StreetName`)],
    postCode: address[toCamelCase(`${type}PostCode`)],
    town: address[toCamelCase(`${type}Town`)],
    countrySubDivision: address[toCamelCase(`${type}CountrySubDivision`)],
    country: address[toCamelCase(`${type}Country`)],
});
const addressFromContact = (address) => addressFrom(address, AddressType.CONTACT);
const addressFromBank = (address) => addressFrom(address, AddressType.BANK);
const addressFromAccountHolder = (address) => addressFrom(address, AddressType.ACCOUNTHOLDER);
const isObjectTruthy = (obj) => {
    return Object.keys(obj).some((key) => !!obj[key]);
};
const addressToString = (address) => [
    address[`addressLine1`],
    address[`addressLine2`],
    address[`streetName`],
    address[`postCode`],
    address[`town`],
    address[`countrySubDivision`],
]
    .filter(Boolean)
    .join(', ');

const Countries = [
    'AR',
    'AU',
    'AT',
    'BE',
    'BR',
    'CA',
    'CN',
    'CO',
    'HR',
    'CZ',
    'DK',
    'EC',
    'EG',
    'ET',
    'FR',
    'DE',
    'GR',
    'HN',
    'HK',
    'HU',
    'IN',
    'ID',
    'IE',
    'IT',
    'JM',
    'MY',
    'MX',
    'MA',
    'NA',
    'NL',
    'NZ',
    'NO',
    'PL',
    'PT',
    'RU',
    'SN',
    'SG',
    'ZA',
    'ES',
    'LK',
    'SE',
    'TH',
    'TR',
    'UG',
    'AE',
    'GB',
    'US',
    'ZW',
];
const defaultAccountTypes = ['Savings', 'Checking'];
const defaultAccessContextScope = AccessContextScope.USER;
var ApprovalStatusColorMap;
(function (ApprovalStatusColorMap) {
    ApprovalStatusColorMap["OPEN"] = "success";
    ApprovalStatusColorMap["CLOSED"] = "danger";
    ApprovalStatusColorMap["INVALID"] = "danger";
    ApprovalStatusColorMap["VALID"] = "success";
    ApprovalStatusColorMap["ENTERED"] = "primary";
    ApprovalStatusColorMap["READY"] = "primary";
    ApprovalStatusColorMap["ACCEPTED"] = "warning";
    ApprovalStatusColorMap["REJECTED"] = "danger";
    ApprovalStatusColorMap["PENDING"] = "primary";
    ApprovalStatusColorMap["APPROVED"] = "success";
    ApprovalStatusColorMap["CANCELLED"] = "warning";
})(ApprovalStatusColorMap || (ApprovalStatusColorMap = {}));
var ContactApprovalStatusMap;
(function (ContactApprovalStatusMap) {
    ContactApprovalStatusMap["CANCELLED"] = "CANCELLED";
    ContactApprovalStatusMap["REJECTED"] = "REJECTED";
    ContactApprovalStatusMap["PENDING"] = "ENTERED";
    ContactApprovalStatusMap["APPROVED"] = "APPROVED";
})(ContactApprovalStatusMap || (ContactApprovalStatusMap = {}));
var Preferences;
(function (Preferences) {
    Preferences[Preferences["PAGE_SIZE"] = 20] = "PAGE_SIZE";
    Preferences[Preferences["MAX_NAV_SIZE"] = 3] = "MAX_NAV_SIZE";
    Preferences[Preferences["DEBOUNCE_TIME"] = 300] = "DEBOUNCE_TIME";
    Preferences["LOAD_MORE_METHOD"] = "pagination";
    Preferences[Preferences["NOTIFICATION_DISMISS_TIME"] = 5000] = "NOTIFICATION_DISMISS_TIME";
    Preferences["ACCESS_CONTEXT_SCOPE"] = "SA";
})(Preferences || (Preferences = {}));
const IbanMask = 'SS00 AAAA AAAA AAAA AAAA AAAA AAAA AAAA AA';

const filterEmptyValues = (obj) => Object.keys(obj).reduce((result, key) => (Object.assign(Object.assign({}, result), (obj[key] ? { [key]: obj[key] } : {}))), {});
const toInteger = (value) => parseInt(value, 10) || 0;
const toBoolean = (value) => {
    if (typeof value === 'boolean') {
        return value;
    }
    return value === 'true';
};
const sanitizeObject = (obj) => {
    const sanitizedObj = {};
    for (const key in obj) {
        if (obj.hasOwnProperty(key) && obj[key] && key !== InputName.COPY_CONTACT_ADDRESS) {
            sanitizedObj[key] = obj[key];
        }
    }
    return sanitizedObj;
};
const flattenObject = (obj) => {
    let flattenedObj = {};
    for (const key in obj) {
        if (obj.hasOwnProperty(key) && obj[key]) {
            if (typeof obj[key] === 'object') {
                flattenedObj = Object.assign(Object.assign({}, flattenedObj), sanitizeObject(obj[key]));
            }
            else {
                flattenedObj[key] = obj[key];
            }
        }
    }
    return flattenedObj;
};
const fromContactFormToContactModel = (formObj) => {
    let model = {};
    model['accounts'] = [];
    for (const key in formObj) {
        if (formObj.hasOwnProperty(key)) {
            if (key === InputGroupName.CONTACT) {
                model = Object.assign(Object.assign({}, model), flattenObject(formObj[key]));
            }
            else if (key.indexOf(InputGroupName.ACCOUNT) > -1) {
                model.accounts.push(flattenObject(formObj[key]));
            }
        }
    }
    return model;
};
const fromContactItemToContactModel = (contact) => {
    const keys = ['name', 'alias', 'phoneNumber', 'emailId', 'contactPerson', 'additions'];
    return Object.assign(Object.assign(Object.assign({}, keys.reduce((details, key) => {
        const value = contact[key];
        if (value) {
            return Object.assign(Object.assign({}, details), { [key]: value });
        }
        return details;
    }, {})), filterEmptyValues(addressFromContact(contact))), { accounts: contact.accounts.map(filterEmptyValues) });
};
const fromResponseBodyList = (response) => ({
    totalCount: parseInt(response.headers.get('x-total-count'), 10) || 0,
    items: response.body || [],
});
const fromErrorResponse = (error) => throwError({ status: error.status, message: error.message });
const getApprovalStatus = (approval) => {
    let label = '';
    const approvalDetailsStatus = approval.approvalDetails && approval.approvalDetails.status;
    const currentStatus = ContactApprovalStatusMap[approvalDetailsStatus];
    if (approval.approvalDetails &&
        currentStatus === ContactApprovalStatusMap.PENDING &&
        approval.approvalDetails.policy &&
        approval.approvalDetails.policy.items &&
        approval.approvalDetails.records) {
        const approvals = approval.approvalDetails.records.length;
        const total = approval.approvalDetails.policy.items.reduce((totalCount, policy) => totalCount + policy.numberOfApprovals || 0, 0);
        label = ` (${approvals}/${total})`;
    }
    return `${currentStatus}${label}`;
};

/**
 * Service responsible for connecting Contact service to data-ang services
 *  - `ContactService`
 *  - `ContactsHttpService`
 *  - `ApprovalsHttpService`
 * This service is dependant on data-ang.
 *
 * @see ContactService
 * @see ContactsHttpService,
 * @see ApprovalsHttpService,
 * @usageNotes
 *
 * ```ts
 * @NgModule({
 *   ...
 *   providers: [
 *     ...
 *     ContactHttpService,
 *   ],
 * })
 * export class MyContactCommonAngModule {}
 * ```
 *
 * ### Inject this service into your component
 *
 * ```ts
 * @Component({
 *   ...
 *   providers: [ContactHttpService],
 * })
 *  export class ContactCommonAngComponent {
 * ```
 */
class ContactHttpService {
    constructor(contactDataHttpService, approvalService, supportedCountriesService) {
        this.contactDataHttpService = contactDataHttpService;
        this.approvalService = approvalService;
        this.supportedCountriesService = supportedCountriesService;
    }
    /**
     * Get the contacts from data-ang API.
     *
     * @param {ContactRequestParameters} params - Contact Request Parameters
     * @returns {Observable<ContactResponse>} service response in an Observable
     */
    getContacts(params) {
        return this.contactDataHttpService
            .getContacts(params, 'response')
            .pipe(map(fromResponseBodyList), catchError(fromErrorResponse));
    }
    /**
     * Fetches Contact based on the ID given from data-ang method
     *
     * @param {string} contactId contact ID
     * @returns {Observable<ContactItem | undefined>} observable of a response
     */
    getContact(contactId) {
        return this.contactDataHttpService.getContact({ contactId }).pipe(catchError((error) => of(undefined)));
    }
    /**
     * Calls the data-ang method for delete contact based on the ID
     *
     * @param {string} contactId contact ID
     * @returns {Observable<ApprovalRequired>} observable of a response
     */
    deleteContact(contactId) {
        return this.contactDataHttpService.deleteContact({ contactId });
    }
    /**
     * Calls the data-ang Method based on params provided.
     *
     * @param {ContactRequestParameters} params request parameters
     * @returns {Observable<Approvals>} observable of a response
     */
    getPendingApprovals(params) {
        return this.approvalService
            .getApprovals(params, 'response')
            .pipe(map(fromResponseBodyList), catchError(fromErrorResponse));
    }
    /**
     * Calls datanag method for fetching contact list of all pending approvals created by me.
     *
     * @param {ContactRequestParameters} params request parameters
     * @returns {Observable<ApprovalsCreatedByMe>} observable of a response
     */
    getApprovalsCreatedByMe(params) {
        return this.approvalService
            .getApprovalsCreatedByMe(params, 'response')
            .pipe(map(fromResponseBodyList), catchError(fromErrorResponse));
    }
    /**
     * Calls data ang method for deleting the approval records.
     *
     * @param {string} requestId id of a contact
     * @returns {Observable<any>} observable of a response
     */
    deleteApprovalsRecord(requestId) {
        return this.approvalService.deleteApprovalRequest({ requestId });
    }
    /**
     * Update the contact
     *
     * @param {ContactItem} contact updated contact Object
     * @returns {Observable<ContactPutResponseBody>} observable of a response
     */
    updateContact(contact) {
        return this.contactDataHttpService.putContact({ contactId: contact.id, contactPutRequestBody: contact });
    }
    /**
     * Calls the data-ang method for Approve Contact .
     *
     * @param {string} requestId id of a contact
     * @param {string?} comment explanation of request approval
     * @returns {Observable<ApprovalResultStatus>} observable of a response
     */
    approveContact(requestId, comment) {
        const body = comment ? { comment } : undefined;
        return this.approvalService
            .postApprovalRecord({ requestId, approvalPostRequestBody: body })
            .pipe(map((response) => response.status));
    }
    /**
     * Calls the data-ang method for Reject Contact .
     *
     * @param {string} requestId id of a contact
     * @param {string?} comment explanation of request rejection
     * @returns {Observable<any>} observable of a response
     */
    rejectContact(requestId, comment) {
        const body = comment ? { comment } : undefined;
        return this.approvalService.postRejectionRecord({ requestId, rejectionPostRequestBody: body });
    }
    /**
     * Calls the data-ang method for supported countries .
     *
     * @returns {Observable<HttpResponse<string[]>>} observable of a response
     */
    getSupportedCountries() {
        return this.supportedCountriesService.getSupportedCountries('response');
    }
}
/** @nocollapse */ ContactHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactHttpService, deps: [{ token: i1$2.ContactsHttpService }, { token: i1$2.ApprovalsHttpService }, { token: i1$2.SupportedCountriesHttpService }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ ContactHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactHttpService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactHttpService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1$2.ContactsHttpService }, { type: i1$2.ApprovalsHttpService }, { type: i1$2.SupportedCountriesHttpService }]; } });

const ContactsServiceConfigDefaults = {
    pageSize: 50,
};
/**
 * Service calls the APIs for all the actions done by the user.
 * This service Injects ContactHttpService
 *
 * @see ContactHttpService
 * @usageNotes
 *
 *
 * ```ts
 * @NgModule({
 *   ...
 *   providers: [
 *     ...
 *     ContactService,
 *   ],
 * })
 * export class MyContactCommonAngModule {}
 * ```
 *
 * ### Inject this service into your component
 *
 * ```ts
 * @Component({
 *   ...
 *   providers: [ContactService],
 * })
 *  export class ContactCommonAngComponent {
 * ```
 */
class ContactService {
    constructor(contactHttpService) {
        this.contactHttpService = contactHttpService;
        this.destroy$ = new Subject();
        this.changePage$ = new Subject();
        this.loadMore$ = new Subject();
        this.load$ = new Subject();
        this.refresh$ = new Subject();
        this.search$ = new Subject();
        this.sort$ = new Subject();
        this.config$ = new BehaviorSubject(ContactsServiceConfigDefaults);
        this.id$$ = new ReplaySubject(1);
        this.subscriptions = [];
        this.contact$ = this.id$$.pipe(switchMap((id) => {
            if (!id) {
                return of(undefined);
            }
            return this.contactHttpService.getContact(id);
        }));
        this.loading$$ = new ReplaySubject(1);
        this.loading$ = this.loading$$.asObservable();
        this.acting$$ = new ReplaySubject(1);
        this.acting$ = this.acting$$.asObservable();
        this.pageSize$ = this.config$.pipe(map((config) => config.pageSize));
        this.actions$ = merge(this.load$.pipe(mapTo({ action: ContactActions.Load })), this.search$.pipe(map(({ query, from }) => ({ action: ContactActions.Search, query, from }))), this.refresh$.pipe(map((loadMoreMethod) => ({ action: ContactActions.Refresh, loadMoreMethod }))), this.changePage$.pipe(map((from) => ({ action: ContactActions.ChangePage, from }))), this.loadMore$.pipe(map((from) => ({ action: ContactActions.LoadMore, from }))), this.pageSize$.pipe(map((pageSize) => ({ pageSize }))), this.sort$.pipe(map(({ sort, direction }) => ({ action: ContactActions.Sort, sort, direction }))));
        this.state$ = this.actions$.pipe(scan((state, action) => (Object.assign(Object.assign({}, state), action))), map((_a) => {
            var { pageSize, loadMoreMethod, query } = _a, state = __rest(_a, ["pageSize", "loadMoreMethod", "query"]);
            const isRefresh = state.action === ContactActions.Refresh;
            const size = pageSize || ContactsServiceConfigDefaults.pageSize;
            const from = state.from || 0;
            return Object.assign(Object.assign({}, state), { query: query || '', size: isRefresh && loadMoreMethod === LoadMoreMethod.LOAD_MORE ? size * (from + 1) : size, from: isRefresh && loadMoreMethod === LoadMoreMethod.LOAD_MORE ? 0 : from });
        }), filter((state) => state.action !== undefined), shareReplay(1));
        this.effects$ = this.state$.pipe(mergeMap((_a) => {
            var { action } = _a, parameters = __rest(_a, ["action"]);
            this.loading = true;
            const isLoadMore = action === ContactActions.LoadMore;
            return this.contactHttpService.getContacts(this.removeEmptyParameters(parameters)).pipe(map((response) => (Object.assign(Object.assign({}, response), { isLoadMore }))), finalize(() => (this.loading = false)));
        }), takeUntil(this.destroy$), shareReplay(1));
        this.contactsSource$ = new BehaviorSubject(undefined);
    }
    set loading(val) {
        this.loading$$.next(val);
    }
    set acting(val) {
        this.acting$$.next(val);
    }
    get contacts$() {
        return this.contactsSource$.asObservable();
    }
    removeEmptyParameters(parameters) {
        return Object.entries(parameters)
            .filter(([key, value]) => value !== '')
            .reduce((prev, curr) => (Object.assign(Object.assign({}, prev), { [curr[0]]: curr[1] })), {});
    }
    /**
     * Sets the Subject with updated contactService config.
     *
     * @param {ContactsServiceConfig} config - new config for Contact Service
     */
    init(config) {
        this.config$.next(config);
    }
    /**
     *  Updates the subject with value
     */
    load() {
        this.load$.next();
    }
    /**
     * Updates the loadMore Subject with pageFrom value.
     *
     * @param {number} from - page From the data has to be fetched.
     */
    loadMore(from) {
        this.loadMore$.next(from);
    }
    /**
     * Updates the changePage subject to updated page.
     *
     * @param {number} from - page From the data has to be fetched.
     */
    changePage(from) {
        this.changePage$.next(from);
    }
    /**
     * Triggers the refresh listener with current load more.
     *
     * @param {LoadMoreMethod} loadMoreMethod - Current LoadMore method can be pagination / load-more
     */
    refresh(loadMoreMethod) {
        this.refresh$.next(loadMoreMethod);
    }
    /**
     * Triggers search Listner with search query.
     *
     * @param {string} query - search text entered by the user.
     */
    searchContacts(query) {
        this.search$.next({ query, from: 0 });
    }
    /**
     * Triggers sort Listner with mapped event.
     *
     * @param {string} sortEvent - table sort event.
     */
    sortApprovals(sortEvent) {
        const castedDirection = sortEvent.direction.toUpperCase();
        const mappedEvent = { sort: sortEvent.column, direction: castedDirection };
        this.sort$.next(mappedEvent);
    }
    /**
     * Subscribes to the contact of a given contact ID.
     *
     * @param {Observable<string | null>} id Observable of Contact ID.
     * @returns {Observable<ContactItem | undefined>} of contact Details with that ID.
     */
    getContactFrom(id) {
        this.subscriptions.push(id.subscribe(this.id$$));
        return this.contact$;
    }
    /**
     * Returns the details for a given ID.
     *
     * @param {string} id contact ID
     * @returns {Observable<ContactItem | undefined>} Observable of contact Details for given ID.
     */
    getContactById(id) {
        return this.contactHttpService.getContact(id);
    }
    /**
     * Calls the delete API for specific ID
     *
     * @param {string} contactId Contact ID
     * @returns {Observable<ApprovalRequired>} observable of a result
     */
    deleteContact(contactId) {
        this.acting = true;
        return this.contactHttpService.deleteContact(contactId).pipe(finalize(() => (this.acting = false)));
    }
    /**
     *
     * @param {ContactItem} contact contact item object
     * @returns {Observable<ApprovalRequired>} response of a contact update
     */
    updateContact(contact) {
        this.acting = true;
        return this.contactHttpService.updateContact(contact).pipe(finalize(() => (this.acting = false)));
    }
    /**
     * Calls the API for approval
     *
     * @param {string} approvalId - approval ID
     * @param {string?} comment explanation of request approval
     * @returns {Observable<string>} response of a contact edit approval
     */
    approveContact(approvalId, comment) {
        this.acting = true;
        return this.contactHttpService.approveContact(approvalId, comment).pipe(finalize(() => (this.acting = false)));
    }
    /**
     * Calls the API for rejction
     *
     * @param {string} approvalId approval ID
     * @param {string?} comment explanation of request rejection
     * @returns {Observable<string>} response of an approval rejection
     */
    rejectContact(approvalId, comment) {
        this.acting = true;
        return this.contactHttpService.rejectContact(approvalId, comment).pipe(finalize(() => (this.acting = false)));
    }
    ngOnDestroy() {
        this.subscriptions.forEach((subscription) => subscription.unsubscribe());
        this.destroy$.complete();
        this.loadMore$.complete();
        this.changePage$.complete();
        this.refresh$.complete();
    }
}
/** @nocollapse */ ContactService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactService, deps: [{ token: ContactHttpService }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ ContactService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: ContactHttpService }]; } });

const emptyIbanCountriesList = {};
const BB_CONTACT_COUNTRIES_LIST = new InjectionToken('BB_CONTACT_COUNTRIES_LIST');
const BB_CONTACT_IBAN_COUNTRIES_LIST = new InjectionToken('BB_CONTACT_IBAN_COUNTRIES_LIST');
const BB_CONTACT_BANK_ACCOUNT_TYPES_LIST = new InjectionToken('BB_CONTACT_BANK_ACCOUNT_TYPES_LIST');
const ContactConfigProviders = [
    {
        provide: BB_CONTACT_COUNTRIES_LIST,
        useValue: Countries,
    },
    {
        provide: BB_CONTACT_IBAN_COUNTRIES_LIST,
        useValue: emptyIbanCountriesList,
    },
    {
        provide: BB_CONTACT_BANK_ACCOUNT_TYPES_LIST,
        useValue: defaultAccountTypes,
    },
];

/**
 * Service responsible for providing available countries list
 */
class ContactCountryListService {
    constructor(countriesList, contactHttpService) {
        this.countriesList = countriesList;
        this.contactHttpService = contactHttpService;
    }
    /**
     * Returns countries configured locally
     *
     * @returns {Observable<string[]>} - stream of country lists
     */
    getFromLocalSource() {
        return of(this.countriesList);
    }
    /**
     * Return countries from external service
     *
     * @returns {Observable<string[]>} - stream of country lists
     */
    getFromExternalSource() {
        return this.contactHttpService.getSupportedCountries().pipe(map((response) => response.body || []), catchError(() => of([])));
    }
}
/** @nocollapse */ ContactCountryListService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactCountryListService, deps: [{ token: BB_CONTACT_COUNTRIES_LIST }, { token: ContactHttpService }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ ContactCountryListService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactCountryListService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactCountryListService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [BB_CONTACT_COUNTRIES_LIST]
                }] }, { type: ContactHttpService }]; } });

const provideContactServices = [
    { provide: ContactHttpService, useClass: ContactHttpService },
    {
        provide: ContactService,
        useClass: ContactService,
        deps: [ContactHttpService],
    },
    ContactCountryListService,
];

/**
 * Service responsible for connecting Contact service to data-ang services
 *  - `ContactService`
 * This service is dependant on data-ang.
 *
 * @see ContactService
 * @see ApprovalsHttpService,
 * @usageNotes
 *
 * ```ts
 * @NgModule({
 *   ...
 *   providers: [
 *     ...
 *     ApprovalHttpService,
 *   ],
 * })
 * export class MyContactCommonAngModule {}
 * ```
 *
 * ### Inject this service into your component
 *
 * ```ts
 * @Component({
 *   ...
 *   providers: [ApprovalHttpService],
 * })
 *  export class ContactCommonAngComponent {
 * ```
 */
class ApprovalHttpService {
    constructor(approvalDataHttpService) {
        this.approvalDataHttpService = approvalDataHttpService;
    }
    /**
     * Fetch approval object based on approval ID.
     *
     * @param {string} approvalId - Approval ID
     * @returns {Observable<ApprovalDetails | ContactsError>} observable of response
     */
    getApproval(approvalId) {
        return this.approvalDataHttpService
            .getApprovalByApprovalId({ approvalId })
            .pipe(catchError((error) => of(new ContactsError(error))));
    }
}
/** @nocollapse */ ApprovalHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ApprovalHttpService, deps: [{ token: i1$3.ApprovalsHttpService }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ ApprovalHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ApprovalHttpService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ApprovalHttpService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1$3.ApprovalsHttpService }]; } });

/**
 * Service responsible for managing logic behind showing data discard confirmation
 */
class ContactDiscardChangesService {
    constructor() {
        this.discard$ = new Subject();
        this.discardRequested$$ = new Subject();
        this.isFormActive = false;
        /**
         * Stream providing values when discarding data is requested from outside the form component
         */
        this.discardRequested$ = this.discardRequested$$.asObservable();
    }
    /**
     * Registers the event of introducing changes to the form
     */
    startChanges() {
        this.isFormActive = true;
    }
    /**
     * Registers the event of finishing working with the form
     */
    finishChanges() {
        this.isFormActive = false;
    }
    /**
     * Requests that data is discarded from the form
     *
     * @returns {Observable<boolean>} whether data was actually discarded fulfilling the request
     */
    requestDiscard() {
        if (this.isFormActive) {
            this.discard$.complete();
            this.discard$ = new Subject();
            this.discardRequested$$.next();
            return this.discard$.asObservable();
        }
        else {
            return of(true);
        }
    }
    /**
     * Confirms discarding data after it was requested
     */
    discard() {
        this.discard$.next(true);
        this.discard$.complete();
        this.finishChanges();
    }
    /**
     * Cancels discarding data after it was requested
     */
    cancelDiscard() {
        this.discard$.next(false);
        this.discard$.complete();
    }
}
/** @nocollapse */ ContactDiscardChangesService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactDiscardChangesService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ ContactDiscardChangesService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactDiscardChangesService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactDiscardChangesService, decorators: [{
            type: Injectable
        }] });

/**
 * Collection of countries that are compliant with the ISO 13616 standard.
 * BBAN field is the representation of the format accepted by that country.
 *
 * inner
 * type {object}
 */
const _countries = {
    AD: {
        bban: '08N12C',
        example: 'AD1200012030200359100100',
        len: 24,
        name: 'Andorra',
    },
    AE: {
        bban: '03N16N',
        example: 'AE260211000000230064016',
        len: 23,
        name: 'United Arab Emirates',
    },
    AL: {
        bban: '08N16C',
        example: 'AL47212110090000000235698741',
        len: 28,
        name: 'Albania',
    },
    AO: {
        bban: '21N',
        example: 'AO06000600000100037131174',
        len: 25,
        name: 'Angola',
    },
    AT: {
        bban: '16N',
        example: 'AT611904300234573201',
        len: 20,
        name: 'Austria',
    },
    AZ: {
        bban: '04C20N',
        example: 'AZ21NABZ00000000137010001944',
        len: 28,
        name: 'Azerbaijan',
    },
    BA: {
        bban: '16N',
        example: 'BA391290079401028494',
        len: 20,
        name: 'Bosnia and Herzegovina',
    },
    BE: {
        bban: '12N',
        example: 'BE68539007547034',
        len: 16,
        name: 'Belgium',
    },
    BF: {
        bban: '23N',
        example: 'BF1030134020015400945000643',
        len: 27,
        name: 'Burkina Faso',
    },
    BG: {
        bban: '04A06N08C',
        example: 'BG80BNBG96611020345678',
        len: 22,
        name: 'Bulgaria',
    },
    BH: {
        bban: '04A14C',
        example: 'BH29BMAG1299123456BH00',
        len: 22,
        name: 'Bahrain',
    },
    BI: {
        bban: '12N',
        example: 'BI43201011067444',
        len: 16,
        name: 'Burundi',
    },
    BJ: {
        bban: '01A23N',
        example: 'BJ11B00610100400271101192591',
        len: 28,
        name: 'Benin',
    },
    BL: {
        bban: '10N11C02N',
        example: 'BL6820041010050500013M02606',
        len: 27,
        name: 'Saint Barthelemy',
    },
    BR: {
        bban: '23N01A01C',
        example: 'BR9700360305000010009795493P1',
        len: 29,
        name: 'Brazil',
    },
    BY: {
        bban: '04C20N',
        example: 'BY86AKBB10100000002966000000',
        len: 28,
        name: 'Belarus',
    },
    CF: {
        bban: '23C',
        example: 'CF4220001000010120069700160',
        len: 27,
        name: 'Central African Republic',
    },
    CG: {
        bban: '23C',
        example: 'CG5230011000202151234567890',
        len: 27,
        name: 'Congo',
    },
    CH: {
        bban: '05N12C',
        example: 'CH9300762011623852957',
        len: 21,
        name: 'Switzerland',
    },
    CI: {
        bban: '01A23N',
        example: 'CI05A00060174100178530011852',
        len: 28,
        name: 'Ivory Coast',
    },
    CM: {
        bban: '23N',
        example: 'CM2110003001000500000605306',
        len: 27,
        name: 'Cameroon',
    },
    CR: {
        bban: '17N',
        example: 'CR0515202001026284066',
        len: 21,
        name: 'Costa Rica',
    },
    CV: {
        bban: '21N',
        example: 'CV64000300004547069110176',
        len: 25,
        name: 'Cape Verde',
    },
    CY: {
        bban: '08N16C',
        example: 'CY17002001280000001200527600',
        len: 28,
        name: 'Cyprus',
    },
    CZ: {
        bban: '20N',
        example: 'CZ6508000000192000145399',
        len: 24,
        name: 'Czech Republic',
    },
    DE: {
        bban: '18N',
        example: 'DE89370400440532013000',
        len: 22,
        name: 'Germany',
    },
    DJ: {
        bban: '23C',
        example: 'DJ2110002010010409943020008',
        len: 27,
        name: 'Djibouti',
    },
    DK: {
        bban: '14N',
        example: 'DK5000400440116243',
        len: 18,
        name: 'Denmark',
    },
    DO: {
        bban: '04A20N',
        example: 'DO28BAGR00000001212453611324',
        len: 28,
        name: 'Dominican Republic',
    },
    DZ: {
        bban: '20N',
        example: 'DZ4000400174401001050486',
        len: 24,
        name: 'Algeria',
    },
    EE: {
        bban: '16N',
        example: 'EE382200221020145685',
        len: 20,
        name: 'Estonia',
    },
    EG: {
        bban: '25C',
        example: 'EG380019000500000000263180002',
        len: 29,
        name: 'Egypt',
    },
    ES: {
        bban: '20N',
        example: 'ES9121000418450200051332',
        len: 24,
        name: 'Spain',
    },
    FI: {
        bban: '14N',
        example: 'FI2112345600000785',
        len: 18,
        name: 'Finland',
    },
    FO: {
        bban: '14N',
        example: 'FO1464600009692713',
        len: 18,
        name: 'Faroe Islands',
    },
    FR: {
        bban: '10N11C02N',
        example: 'FR7630007000110009970004942',
        len: 27,
        name: 'France',
    },
    GA: {
        bban: '23C',
        example: 'GA2140002000055602673300064',
        len: 27,
        name: 'Gabon',
    },
    GB: {
        bban: '04A14N',
        example: 'GB29NWBK60161331926819',
        len: 22,
        name: 'United Kingdom',
    },
    GE: {
        bban: '02C16N',
        example: 'GE29NB0000000101904917',
        len: 22,
        name: 'Georgia',
    },
    GF: {
        bban: '10N11C02N',
        example: 'GF4120041010050500013M02606',
        len: 27,
        name: 'French Guiana',
    },
    GI: {
        bban: '04A15C',
        example: 'GI75NWBK000000007099453',
        len: 23,
        name: 'Gibraltar',
    },
    GL: {
        bban: '14N',
        example: 'GL8964710001000206',
        len: 18,
        name: 'Greenland',
    },
    GP: {
        bban: '10N11C02N',
        example: 'GP1120041010050500013M02606',
        len: 27,
        name: 'Guadeloupe',
    },
    GQ: {
        bban: '23C',
        example: 'GQ7050002001003715228190196',
        len: 27,
        name: 'Equatorial Guinea',
    },
    GR: {
        bban: '07N16C',
        example: 'GR1601101250000000012300695',
        len: 27,
        name: 'Greece',
    },
    GT: {
        bban: '04C20C',
        example: 'GT82TRAJ01020000001210029690',
        len: 28,
        name: 'Guatemala',
    },
    GW: {
        bban: '21C',
        example: 'GW04GW1430010181800637601',
        len: 25,
        name: 'Guinea-Bissau',
    },
    HN: {
        bban: '24C',
        example: 'HN54PISA00000000000000123124',
        len: 28,
        name: 'Honduras',
    },
    HR: {
        bban: '17N',
        example: 'HR1210010051863000160',
        len: 21,
        name: 'Croatia',
    },
    HU: {
        bban: '24N',
        example: 'HU42117730161111101800000000',
        len: 28,
        name: 'Hungary',
    },
    IE: {
        bban: '04C14N',
        example: 'IE29AIBK93115212345678',
        len: 22,
        name: 'Ireland',
    },
    IL: {
        bban: '19N',
        example: 'IL620108000000099999999',
        len: 23,
        name: 'Israel',
    },
    IQ: {
        bban: '19C',
        example: 'IQ20CBIQ861800101010500',
        len: 23,
        name: 'Iraq',
    },
    IR: {
        bban: '22N',
        example: 'IR580540105180021273113007',
        len: 26,
        name: 'Iran',
    },
    IS: {
        bban: '22N',
        example: 'IS140159260076545510730339',
        len: 26,
        name: 'Iceland',
    },
    IT: {
        bban: '01A10N12C',
        example: 'IT60X0542811101000000123456',
        len: 27,
        name: 'Italy',
    },
    JO: {
        bban: '04A22N',
        example: 'JO94CBJO0010000000000131000302',
        len: 30,
        name: 'Jordan',
    },
    KM: {
        bban: '23C',
        example: 'KM4600005000010010904400137',
        len: 27,
        name: 'Comoros',
    },
    KW: {
        bban: '04A22C',
        example: 'KW74NBOK0000000000001000372151',
        len: 30,
        name: 'Kuwait',
    },
    KZ: {
        bban: '03N13C',
        example: 'KZ176010251000042993',
        len: 20,
        name: 'Kazakhstan',
    },
    LB: {
        bban: '04N20C',
        example: 'LB30099900000001001925579115',
        len: 28,
        name: 'Lebanon',
    },
    LC: {
        bban: '28C',
        example: 'LC14BOSL123456789012345678901234',
        len: 32,
        name: 'Saint Lucia',
    },
    LI: {
        bban: '05N12C',
        example: 'LI21088100002324013AA',
        len: 21,
        name: 'Liechtenstein',
    },
    LT: {
        bban: '16N',
        example: 'LT121000011101001000',
        len: 20,
        name: 'Lithuania',
    },
    LU: {
        bban: '03N13C',
        example: 'LU280019400644750000',
        len: 20,
        name: 'Luxembourg',
    },
    LV: {
        bban: '04A13C',
        example: 'LV80BANK0000435195001',
        len: 21,
        name: 'Latvia',
    },
    MA: {
        bban: '24C',
        example: 'MA64011519000001205000534921',
        len: 28,
        name: 'Morocco',
    },
    MC: {
        bban: '10N11C02N',
        example: 'MC5813488000010051108001292',
        len: 27,
        name: 'Monaco',
    },
    MD: {
        bban: '02C18C',
        example: 'MD24AG000225100013104168',
        len: 24,
        name: 'Moldova',
    },
    ME: {
        bban: '18N',
        example: 'ME25505000012345678951',
        len: 22,
        name: 'Montenegro',
    },
    MG: {
        bban: '23N',
        example: 'MG4600005030010101914016056',
        len: 27,
        name: 'Madagascar',
    },
    MK: {
        bban: '03N10C02N',
        example: 'MK07300000000042425',
        len: 19,
        name: 'Macedonia',
    },
    ML: {
        bban: '01A23N',
        example: 'ML03D00890170001002120000447',
        len: 28,
        name: 'Mali',
    },
    MQ: {
        bban: '10N11C02N',
        example: 'MQ5120041010050500013M02606',
        len: 27,
        name: 'Martinique',
    },
    MR: {
        bban: '23N',
        example: 'MR1300012000010000002037372',
        len: 27,
        name: 'Mauritania',
    },
    MT: {
        bban: '04A05N18C',
        example: 'MT84MALT011000012345MTLCAST001S',
        len: 31,
        name: 'Malta',
    },
    MU: {
        bban: '04A19N03A',
        example: 'MU17BOMM0101101030300200000MUR',
        len: 30,
        name: 'Mauritius',
    },
    MZ: {
        bban: '21N',
        example: 'MZ59000100000011834194157',
        len: 25,
        name: 'Mozambique',
    },
    NC: {
        bban: '10N11C02N',
        example: 'NC8420041010050500013M02606',
        len: 27,
        name: 'New Caledonia',
    },
    NE: {
        bban: '24C',
        example: 'NE58NE0380100100130305000268',
        len: 28,
        name: 'Niger',
    },
    NI: {
        bban: '28C',
        example: 'NI92BAMC000000000000000003123123',
        len: 32,
        name: 'Nicaragua',
    },
    NL: {
        bban: '04A10N',
        example: 'NL91ABNA0417164300',
        len: 18,
        name: 'Netherlands',
    },
    NO: {
        bban: '11N',
        example: 'NO9386011117947',
        len: 15,
        name: 'Norway',
    },
    PF: {
        bban: '10N11C02N',
        example: 'PF5720041010050500013M02606',
        len: 27,
        name: 'French Polynesia',
    },
    PK: {
        bban: '04C16N',
        example: 'PK24SCBL0000001171495101',
        len: 24,
        name: 'Pakistan',
    },
    PL: {
        bban: '24N',
        example: 'PL27114020040000300201355387',
        len: 28,
        name: 'Poland',
    },
    PM: {
        bban: '10N11C02N',
        example: 'PM3620041010050500013M02606',
        len: 27,
        name: 'Saint Pierre et Miquelon',
    },
    PS: {
        bban: '04C21N',
        example: 'PS92PALS000000000400123456702',
        len: 29,
        name: 'Palestine',
    },
    PT: {
        bban: '21N',
        example: 'PT50000200000163099310355',
        len: 25,
        name: 'Portugal',
    },
    QA: {
        bban: '04A21C',
        example: 'QA58DOHB00001234567890ABCDEFG',
        len: 29,
        name: 'Qatar',
    },
    RE: {
        bban: '10N11C02N',
        example: 'RE4220041010050500013M02606',
        len: 27,
        name: 'Reunion',
    },
    RO: {
        bban: '04A16C',
        example: 'RO49AAAA1B31007593840000',
        len: 24,
        name: 'Romania',
    },
    RS: {
        bban: '18N',
        example: 'RS35260005601001611379',
        len: 22,
        name: 'Serbia',
    },
    SA: {
        bban: '02N18C',
        example: 'SA0380000000608010167519',
        len: 24,
        name: 'Saudi Arabia',
    },
    SC: {
        bban: '27C',
        example: 'SC52BAHL01031234567890123456USD',
        len: 31,
        name: 'Seychelles',
    },
    SE: {
        bban: '20N',
        example: 'SE3550000000054910000003',
        len: 24,
        name: 'Sweden',
    },
    SI: {
        bban: '15N',
        example: 'SI56191000000123438',
        len: 19,
        name: 'Slovenia',
    },
    SK: {
        bban: '20N',
        example: 'SK3112000000198742637541',
        len: 24,
        name: 'Slovakia',
    },
    SM: {
        bban: '01A10N12C',
        example: 'SM86U0322509800000000270100',
        len: 27,
        name: 'San Marino',
    },
    SN: {
        bban: '01A23N',
        example: 'SN12K00100152000025690007542',
        len: 28,
        name: 'Senegal',
    },
    ST: {
        bban: '21C',
        example: 'ST23000200000289355710148',
        len: 25,
        name: 'Sao Tome and Principe',
    },
    SV: {
        bban: '24C',
        example: 'SV43ACAT00000000000000123123',
        len: 28,
        name: 'El Salvador',
    },
    TD: {
        bban: '23C',
        example: 'TD8960002000010271091600153',
        len: 27,
        name: 'Chad',
    },
    TF: {
        bban: '10N11C02N',
        example: 'TF2120041010050500013M02606',
        len: 27,
        name: 'French Southern Territories',
    },
    TG: {
        bban: '24C',
        example: 'TG53TG0090604310346500400070',
        len: 28,
        name: 'Togo',
    },
    TL: {
        bban: '19N',
        example: 'TL380080012345678910157',
        len: 23,
        name: 'East Timor',
    },
    TN: {
        bban: '20N',
        example: 'TN5914207207100707129648',
        len: 24,
        name: 'Tunisia',
    },
    TR: {
        bban: '05N17C',
        example: 'TR330006100519786457841326',
        len: 26,
        name: 'Turkey',
    },
    UA: {
        bban: '06N19C',
        example: 'UA573543470006762462054925026',
        len: 29,
        name: 'Ukraine',
    },
    VA: {
        bban: '03C15N',
        example: 'VA59001123000012345678',
        len: 22,
        name: 'Vatican City State',
    },
    VG: {
        bban: '04C16N',
        example: 'VG96VPVG0000012345678901',
        len: 24,
        name: 'Virgin Islands, British',
    },
    WF: {
        bban: '10N11C02N',
        example: 'WF9120041010050500013M02606',
        len: 27,
        name: 'Wallis and Futuna Islands',
    },
    XK: {
        bban: '04N10N02N',
        example: 'XK051212012345678906',
        len: 20,
        name: 'Kosovo',
    },
    YT: {
        bban: '10N11C02N',
        example: 'YT3120041010050500013M02606',
        len: 27,
        name: 'Mayotte',
    },
};
let countries = Object.assign({}, _countries);
const addIBANCountries = (newCountries) => {
    countries = Object.assign(Object.assign({}, countries), newCountries);
    return countries;
};
/**
 * Given an iban returns that country specification
 *
 * type {function}
 * inner
 * throws {Error} If Country code is not defined
 *
 * @param {string} iban A valid IBAN number
 * @returns {object} Country specification
 */
var countrySpecification = (iban) => {
    const countryCode = iban.slice(0, 2);
    if (!{}.hasOwnProperty.call(countries, countryCode)) {
        throw new Error(`Country code ${countryCode} is not supported`);
    }
    return countries[countryCode];
};

const A = 'A'.charCodeAt(0);
const Z = 'Z'.charCodeAt(0);
const PATTERNS = {
    A: 'A-Z',
    N: '0-9',
    C: '0-9A-Z',
};
// Stores bban validation regular expressions
const cachedBbanRegexp = {};
// Generates BBAN format as a regular expression and cache it
const prepareBbanRegexp = (bbanFormat) => {
    const matchedString = bbanFormat.match(/[0-9]{2}[ANC]/g);
    if (!matchedString)
        return undefined;
    const pattern = matchedString.reduce((prevPattern, block) => {
        const quantity = parseInt(block.slice(0, 2), 10);
        const code = block[2];
        return `${prevPattern}[${PATTERNS[code]}]{${quantity}}`;
    }, '');
    cachedBbanRegexp[bbanFormat] = new RegExp(pattern);
    return cachedBbanRegexp[bbanFormat];
};
// Move the four initial characters to the end of the string
const rearrangeIban = (iban) => `${iban.slice(4)}${iban.slice(0, 4)}`;
/**
 * Removes spaces
 *
 * name  compact
 *
 * @param  {string} str A given string
 * @returns {string}     Compact string
 */
const compact = (str) => str.replace(/\s+/g, '');
/**
 * Generates a regular expression from encoded representation
 * It is grouped in blocks of 3 characters, first 2 represents the number
 * and the last character represents the type of character.
 * A = Upper case alpha characters [A-Z]
 * N = Numeric characters [0-9]
 * C = Mixed case alphanumeric characters [0-9a-zA-Z]
 *
 * name bbanRegexp
 * inner
 *
 * @param  {string} bbanFormat Encoded regular expression
 * @returns {object}            Resulting regular expression
 */
const bbanRegexp = (bbanFormat) => cachedBbanRegexp[bbanFormat] || prepareBbanRegexp(bbanFormat);
/**
 * Replace each letter in the string with two digits,
 * thereby expanding the string, where A = 10, B = 11, ..., Z = 35
 *
 * name convertIban
 *
 * @param {string} iban IBAN number
 * @returns {string} convetedIBAN representation of the IBAN
 */
const convertIban = (iban) => rearrangeIban(iban)
    .split('')
    .reduce((result, char) => {
    const code = char.charCodeAt(0);
    let num;
    if (code >= A && code <= Z) {
        num = String(code - A + 10);
    }
    else {
        num = char;
    }
    return `${result}${num}`;
}, '');

/**
 * Calculates remainder for numbers bigger than 2^53 - 1,
 * not supported in JavaScript.
 *
 * type {function}
 * inner
 *
 * @param  {string} dividend The dividend
 * @param  {number} divisor  The divisor
 * @returns {number}          The remainder
 */
var bigIntMod = (dividend, divisor) => {
    if (dividend.length < 10) {
        return parseInt(dividend, 10) % divisor;
    }
    let D = dividend.slice(9);
    let N = dividend.slice(0, 9);
    let remainder = parseInt(N, 10) % divisor;
    while (D.length > 7) {
        N = String(remainder) + D.slice(0, 7);
        remainder = parseInt(N, 10) % divisor;
        D = D.slice(7);
    }
    N = String(remainder) + D;
    return parseInt(N, 10) % divisor;
};

/**
 * module lib-bb-iban
 * description IBAN structure validation library
 */
/**
 * Validates IBAN structure defined in ISO 13616-1 and ISO/IEC 7064 (MOD97-10).
 *
 * name isValidIBAN
 * type {function}
 *
 * @param {string} iban International bank account number.
 * @returns {boolean} whether input is a valid iban
 */
const isValidIBAN = (iban) => {
    if (typeof iban !== 'string') {
        return false;
    }
    let spec;
    const compactIBAN = compact(iban.toUpperCase());
    try {
        spec = countrySpecification(compactIBAN);
    }
    catch (error) {
        return false;
    }
    const specBban = bbanRegexp(spec.bban);
    return (spec.len === compactIBAN.length &&
        specBban.test(compactIBAN.slice(4)) &&
        bigIntMod(convertIban(compactIBAN), 97) === 1);
};
/**
 * Validates IBAN structure defined in ISO 13616-1 and ISO/IEC 7064 (MOD97-10).
 *
 * name isValidIBANFormControl
 * type {function}
 *
 * @param {AbstractControl} control control with iban International bank account number
 * @returns {Record<string, any>}
 * example: NL91ABNA0417164300
 */
const isValidIBANFormControl = (control) => {
    const iban = control.value;
    if (typeof iban !== 'string') {
        return { invalidIban: { value: control.value } };
    }
    let spec;
    const compactIBAN = compact(iban.toUpperCase());
    try {
        spec = countrySpecification(compactIBAN);
    }
    catch (error) {
        return { invalidIban: { value: control.value } };
    }
    const specBban = bbanRegexp(spec.bban);
    const res = spec.len === compactIBAN.length &&
        specBban.test(compactIBAN.slice(4)) &&
        bigIntMod(convertIban(compactIBAN), 97) === 1;
    return res ? null : { invalidIban: { value: control.value } };
};
/**
 * Validates BBAN structure defined in ISO 13616-1.
 *
 * name isValidBBAN
 * type {function}
 *
 * @param {string} iban International bank account number.
 * @returns {boolean} whether input is a valid bban
 */
const isValidBBAN = (iban) => {
    if (typeof iban !== 'string') {
        return false;
    }
    let spec;
    const compactIBAN = compact(iban);
    try {
        spec = countrySpecification(compactIBAN);
    }
    catch (error) {
        return false;
    }
    // Remove country code and check digits
    const bban = compactIBAN.slice(4);
    const specBban = bbanRegexp(spec.bban);
    return bban.length === spec.len - 4 && specBban.test(bban);
};

/**
 * This is a directive to validate iban
 *
 * @usageNotes
 *
 * ### validates the iban
 *
 * ```html
 * <input type="text" #ibanControl="ngModel" [(ngModel)]="iban" bbIbanValidatorUi />
 * ```
 * @ngModule IbanValidatorModule
 */
class IbanValidatorDirective {
    constructor(ibanCountryList) {
        this.ibanCountryList = ibanCountryList;
        addIBANCountries(this.ibanCountryList);
    }
    validate(control) {
        return control && control.value ? isValidIBANFormControl(control) : null;
    }
}
/** @nocollapse */ IbanValidatorDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: IbanValidatorDirective, deps: [{ token: BB_CONTACT_IBAN_COUNTRIES_LIST }], target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ IbanValidatorDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: IbanValidatorDirective, selector: "[bbIbanValidator]", providers: [{ provide: NG_VALIDATORS, useExisting: IbanValidatorDirective, multi: true }], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: IbanValidatorDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbIbanValidator]',
                    providers: [{ provide: NG_VALIDATORS, useExisting: IbanValidatorDirective, multi: true }],
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [BB_CONTACT_IBAN_COUNTRIES_LIST]
                }] }]; } });

/**
 * Exports:
 * - IbanValidatorDirective
 */
class IbanValidatorModule {
}
/** @nocollapse */ IbanValidatorModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: IbanValidatorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ IbanValidatorModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: IbanValidatorModule, declarations: [IbanValidatorDirective], exports: [IbanValidatorDirective] });
/** @nocollapse */ IbanValidatorModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: IbanValidatorModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: IbanValidatorModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [IbanValidatorDirective],
                    exports: [IbanValidatorDirective],
                }]
        }] });

/**
 * This is a directive to validate presence of email top-level domain
 *
 * @usageNotes
 *
 * ```html
 * <input type="email" #ibanControl="ngModel" [(ngModel)]="iban" bbDomainValidator />
 * ```
 * @ngModule EmailDomainModule
 */
class EmailDomainValidatorDirective {
    constructor() {
        this.topLevelDomainRegex = /@.*\.(([a-zA-Z])|([a-zA-Z0-9][a-zA-Z0-9.\-]*[a-zA-Z0-9]))$/;
    }
    /**
     * Performs validation
     *
     * @param {AbstractControl} control form control
     * @returns {Record<string, any>?} form control error object
     */
    validate(control) {
        const value = control === null || control === void 0 ? void 0 : control.value;
        if (!value)
            return null;
        return this.topLevelDomainRegex.test(value) ? null : { email: { value } };
    }
}
/** @nocollapse */ EmailDomainValidatorDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EmailDomainValidatorDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ EmailDomainValidatorDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: EmailDomainValidatorDirective, selector: "[bbEmailDomainValidator]", providers: [{ provide: NG_VALIDATORS, useExisting: EmailDomainValidatorDirective, multi: true }], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EmailDomainValidatorDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbEmailDomainValidator]',
                    providers: [{ provide: NG_VALIDATORS, useExisting: EmailDomainValidatorDirective, multi: true }],
                }]
        }] });

/**
 * Exports:
 * - EmailDomainValidatorDirective
 */
class EmailDomainModule {
}
/** @nocollapse */ EmailDomainModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EmailDomainModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ EmailDomainModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EmailDomainModule, declarations: [EmailDomainValidatorDirective], exports: [EmailDomainValidatorDirective] });
/** @nocollapse */ EmailDomainModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EmailDomainModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EmailDomainModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [EmailDomainValidatorDirective],
                    exports: [EmailDomainValidatorDirective],
                }]
        }] });

const getRelativeDate = (next) => {
    const date = new Date();
    if (next) {
        date.setDate(date.getDate() + next);
    }
    return date.toISOString().slice(0, 10);
};

var RelativeDate;
(function (RelativeDate) {
    RelativeDate["Yesterday"] = "Yesterday";
    RelativeDate["Today"] = "Today";
    RelativeDate["Tomorrow"] = "Tomorrow";
})(RelativeDate || (RelativeDate = {}));
/**
 * Pipe is used to show the date in a specific format
 *
 * @usageNotes
 *
 *
 * ```ts
 * @NgModule({
 *   ...
 *   imports: [
 *     ...
 *   ],
 *  declarations: RelativeDatePipe
 * })
 * export class MyContactCommonAngModule {}
 * ```
 *
 * ### Can be used in html
 *
 * ```html
 * {{todayDate | relativeDate: 'mediumTime'}}
 * ```
 * @ngModule RelativeDateModule
 */
class RelativeDatePipe {
    constructor(datePipe) {
        this.datePipe = datePipe;
        this.getRelativeDateHelper = getRelativeDate;
    }
    transform(value, dateFormat) {
        let result;
        const yesterday = this.getRelativeDateHelper(-1);
        const today = this.getRelativeDateHelper();
        const tomorrow = this.getRelativeDateHelper(1);
        switch (new Date(value).toISOString().slice(0, 10)) {
            case yesterday:
                result = RelativeDate.Yesterday;
                break;
            case today:
                result = RelativeDate.Today;
                break;
            case tomorrow:
                result = RelativeDate.Tomorrow;
                break;
            default:
                result = this.datePipe.transform(value, dateFormat);
        }
        return result;
    }
}
/** @nocollapse */ RelativeDatePipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RelativeDatePipe, deps: [{ token: i3.DatePipe }], target: i0.ɵɵFactoryTarget.Pipe });
/** @nocollapse */ RelativeDatePipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RelativeDatePipe, name: "relativeDate" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RelativeDatePipe, decorators: [{
            type: Pipe,
            args: [{ name: 'relativeDate' }]
        }], ctorParameters: function () { return [{ type: i3.DatePipe }]; } });

/**
 * Exports:
 * - RelativeDatePipe
 */
class RelativeDateModule {
}
/** @nocollapse */ RelativeDateModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RelativeDateModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ RelativeDateModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RelativeDateModule, declarations: [RelativeDatePipe], imports: [CommonModule], exports: [RelativeDatePipe] });
/** @nocollapse */ RelativeDateModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RelativeDateModule, providers: [DatePipe], imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RelativeDateModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [RelativeDatePipe],
                    providers: [DatePipe],
                    imports: [CommonModule],
                    exports: [RelativeDatePipe],
                }]
        }] });

const isFormGroupValid = (controls) => Object.values(controls).reduce((valid, control) => {
    control.markAllAsTouched();
    control.updateValueAndValidity();
    return valid && control.valid;
}, true);

/**
 * This is a directive to validate white spaces
 *
 * @usageNotes
 *
 * ### validates the white spaces
 *
 * ```html
 *  <input type="text" #nameControl="ngModel" [(ngModel)]="name" bbNoWhiteSpace />
 * ```
 * @ngModule NoWhiteSpaceModule
 */
class NoWhiteSpaceValidatorDirective {
    validate(control) {
        return noWhiteSpaceValidator(control);
    }
}
/** @nocollapse */ NoWhiteSpaceValidatorDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: NoWhiteSpaceValidatorDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ NoWhiteSpaceValidatorDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: NoWhiteSpaceValidatorDirective, selector: "[bbNoWhiteSpace]", providers: [{ provide: NG_VALIDATORS, useExisting: NoWhiteSpaceValidatorDirective, multi: true }], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: NoWhiteSpaceValidatorDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbNoWhiteSpace]',
                    providers: [{ provide: NG_VALIDATORS, useExisting: NoWhiteSpaceValidatorDirective, multi: true }],
                }]
        }] });
const noWhiteSpaceValidator = (control) => {
    const isWhitespace = (control.value || '').trim().length === 0;
    return isWhitespace ? { required: true } : null;
};

/**
 * Exports:
 * - NoWhiteSpaceValidatorDirective
 */
class NoWhiteSpaceModule {
}
/** @nocollapse */ NoWhiteSpaceModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: NoWhiteSpaceModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ NoWhiteSpaceModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: NoWhiteSpaceModule, declarations: [NoWhiteSpaceValidatorDirective], exports: [NoWhiteSpaceValidatorDirective] });
/** @nocollapse */ NoWhiteSpaceModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: NoWhiteSpaceModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: NoWhiteSpaceModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [NoWhiteSpaceValidatorDirective],
                    exports: [NoWhiteSpaceValidatorDirective],
                }]
        }] });

/**
 * This is an extension slot to be used for customizing country value.
 *
 * @usageNotes
 *
 * ### Display country
 *
 * ```html
 * <ng-template bbCountryItemCustomizable let-hostRef>
 *   <ng-container [ngSwitch]="hostRef.code">
 *     <ng-container *ngSwitchCase="'AF'" i18n="@@bb-country-item.AF">Afghanistan</ng-container>
 *     <ng-container *ngSwitchCase="'AX'" i18n="@@bb-country-item.AX">Aland Islands</ng-container>
 *     <ng-container *ngSwitchCase="'AL'" i18n="@@bb-country-item.AL">Albania</ng-container>
 *     <ng-container *ngSwitchCase="'DZ'" i18n="@@bb-country-item.DZ">Algeria</ng-container>
 *     <ng-container *ngSwitchCase="'AS'" i18n="@@bb-country-item.AS">American Samoa</ng-container>
 *     <ng-container *ngSwitchCase="'AD'" i18n="@@bb-country-item.AD">Andorra</ng-container>
 *     <ng-container *ngSwitchCase="'AO'" i18n="@@bb-country-item.AO">Angola</ng-container>
 *     <ng-container *ngSwitchCase="'AI'" i18n="@@bb-country-item.AI">Anguilla</ng-container>
 *     <ng-container *ngSwitchCase="'AQ'" i18n="@@bb-country-item.AQ">Antarctica</ng-container>
 *     <ng-container *ngSwitchCase="'AG'" i18n="@@bb-country-item.AG">Antigua and Barbuda</ng-container>
 *     <ng-container *ngSwitchCase="'AR'" i18n="@@bb-country-item.AR">Argentina</ng-container>
 *     <ng-container *ngSwitchCase="'AM'" i18n="@@bb-country-item.AM">Armenia</ng-container>
 *     <ng-container *ngSwitchCase="'AW'" i18n="@@bb-country-item.AW">Aruba</ng-container>
 *     <ng-container *ngSwitchCase="'AU'" i18n="@@bb-country-item.AU">Australia</ng-container>
 *     <ng-container *ngSwitchCase="'AT'" i18n="@@bb-country-item.AT">Austria</ng-container>
 *     <ng-container *ngSwitchCase="'AZ'" i18n="@@bb-country-item.AZ">Azerbaijan</ng-container>
 *     <ng-container *ngSwitchCase="'BS'" i18n="@@bb-country-item.BS">Bahamas</ng-container>
 *     <ng-container *ngSwitchCase="'BH'" i18n="@@bb-country-item.BH">Bahrain</ng-container>
 *     <ng-container *ngSwitchCase="'BD'" i18n="@@bb-country-item.BD">Bangladesh</ng-container>
 *     <ng-container *ngSwitchCase="'BB'" i18n="@@bb-country-item.BB">Barbados</ng-container>
 *     <ng-container *ngSwitchCase="'BY'" i18n="@@bb-country-item.BY">Belarus</ng-container>
 *     <ng-container *ngSwitchCase="'BE'" i18n="@@bb-country-item.BE">Belgium</ng-container>
 *     <ng-container *ngSwitchCase="'BZ'" i18n="@@bb-country-item.BZ">Belize</ng-container>
 *     <ng-container *ngSwitchCase="'BJ'" i18n="@@bb-country-item.BJ">Benin</ng-container>
 *     <ng-container *ngSwitchCase="'BM'" i18n="@@bb-country-item.BM">Bermuda</ng-container>
 *     <ng-container *ngSwitchCase="'BT'" i18n="@@bb-country-item.BT">Bhutan</ng-container>
 *     <ng-container *ngSwitchCase="'BO'" i18n="@@bb-country-item.BO">Bolivia, Plurinational State of</ng-container>
 *     <ng-container *ngSwitchCase="'BQ'" i18n="@@bb-country-item.BQ">Bonaire, Saint Eustatius and Saba</ng-container>
 *     <ng-container *ngSwitchCase="'BA'" i18n="@@bb-country-item.BA">Bosnia and Herzegovina</ng-container>
 *     <ng-container *ngSwitchCase="'BW'" i18n="@@bb-country-item.BW">Botswana</ng-container>
 *     <ng-container *ngSwitchCase="'BV'" i18n="@@bb-country-item.BV">Bouvet Island</ng-container>
 *     <ng-container *ngSwitchCase="'BR'" i18n="@@bb-country-item.BR">Brazil</ng-container>
 *     <ng-container *ngSwitchCase="'IO'" i18n="@@bb-country-item.IO">British Indian Ocean Territory</ng-container>
 *     <ng-container *ngSwitchCase="'BN'" i18n="@@bb-country-item.BN">Brunei Darussalam</ng-container>
 *     <ng-container *ngSwitchCase="'BG'" i18n="@@bb-country-item.BG">Bulgaria</ng-container>
 *     <ng-container *ngSwitchCase="'BF'" i18n="@@bb-country-item.BF">Burkina Faso</ng-container>
 *     <ng-container *ngSwitchCase="'BI'" i18n="@@bb-country-item.BI">Burundi</ng-container>
 *     <ng-container *ngSwitchCase="'KH'" i18n="@@bb-country-item.KH">Cambodia</ng-container>
 *     <ng-container *ngSwitchCase="'CM'" i18n="@@bb-country-item.CM">Cameroon</ng-container>
 *     <ng-container *ngSwitchCase="'CA'" i18n="@@bb-country-item.CA">Canada</ng-container>
 *     <ng-container *ngSwitchCase="'CV'" i18n="@@bb-country-item.CV">Cape Verde</ng-container>
 *     <ng-container *ngSwitchCase="'KY'" i18n="@@bb-country-item.KY">Cayman Islands</ng-container>
 *     <ng-container *ngSwitchCase="'CF'" i18n="@@bb-country-item.CF">Central African Republic</ng-container>
 *     <ng-container *ngSwitchCase="'TD'" i18n="@@bb-country-item.TD">Chad</ng-container>
 *     <ng-container *ngSwitchCase="'CL'" i18n="@@bb-country-item.CL">Chile</ng-container>
 *     <ng-container *ngSwitchCase="'CN'" i18n="@@bb-country-item.CN">China</ng-container>
 *     <ng-container *ngSwitchCase="'CX'" i18n="@@bb-country-item.CX">Christmas Island</ng-container>
 *     <ng-container *ngSwitchCase="'CC'" i18n="@@bb-country-item.CC">Cocos (Keeling) Islands</ng-container>
 *     <ng-container *ngSwitchCase="'CO'" i18n="@@bb-country-item.CO">Colombia</ng-container>
 *     <ng-container *ngSwitchCase="'KM'" i18n="@@bb-country-item.KM">Comoros</ng-container>
 *     <ng-container *ngSwitchCase="'CG'" i18n="@@bb-country-item.CG">Congo</ng-container>
 *     <ng-container *ngSwitchCase="'CD'" i18n="@@bb-country-item.CD">Congo, The Democratic Republic of the</ng-container>
 *     <ng-container *ngSwitchCase="'CK'" i18n="@@bb-country-item.CK">Cook Islands</ng-container>
 *     <ng-container *ngSwitchCase="'CR'" i18n="@@bb-country-item.CR">Costa Rica</ng-container>
 *     <ng-container *ngSwitchCase="'CI'" i18n="@@bb-country-item.CI">Cote d'Ivoire</ng-container>
 *     <ng-container *ngSwitchCase="'HR'" i18n="@@bb-country-item.HR">Croatia</ng-container>
 *     <ng-container *ngSwitchCase="'CU'" i18n="@@bb-country-item.CU">Cuba</ng-container>
 *     <ng-container *ngSwitchCase="'CW'" i18n="@@bb-country-item.CW">Curacao</ng-container>
 *     <ng-container *ngSwitchCase="'CY'" i18n="@@bb-country-item.CY">Cyprus</ng-container>
 *     <ng-container *ngSwitchCase="'CZ'" i18n="@@bb-country-item.CZ">Czech Republic</ng-container>
 *     <ng-container *ngSwitchCase="'DK'" i18n="@@bb-country-item.DK">Denmark</ng-container>
 *     <ng-container *ngSwitchCase="'DJ'" i18n="@@bb-country-item.DJ">Djibouti</ng-container>
 *     <ng-container *ngSwitchCase="'DM'" i18n="@@bb-country-item.DM">Dominica</ng-container>
 *     <ng-container *ngSwitchCase="'DO'" i18n="@@bb-country-item.DO">Dominican Republic</ng-container>
 *     <ng-container *ngSwitchCase="'EC'" i18n="@@bb-country-item.EC">Ecuador</ng-container>
 *     <ng-container *ngSwitchCase="'EG'" i18n="@@bb-country-item.EG">Egypt</ng-container>
 *     <ng-container *ngSwitchCase="'SV'" i18n="@@bb-country-item.SV">El Salvador</ng-container>
 *     <ng-container *ngSwitchCase="'GQ'" i18n="@@bb-country-item.GQ">Equatorial Guinea</ng-container>
 *     <ng-container *ngSwitchCase="'ER'" i18n="@@bb-country-item.ER">Eritrea</ng-container>
 *     <ng-container *ngSwitchCase="'EE'" i18n="@@bb-country-item.EE">Estonia</ng-container>
 *     <ng-container *ngSwitchCase="'ET'" i18n="@@bb-country-item.ET">Ethiopia</ng-container>
 *     <ng-container *ngSwitchCase="'FK'" i18n="@@bb-country-item.FK">Falkland Islands (Malvinas)</ng-container>
 *     <ng-container *ngSwitchCase="'FO'" i18n="@@bb-country-item.FO">Faroe Islands</ng-container>
 *     <ng-container *ngSwitchCase="'FJ'" i18n="@@bb-country-item.FJ">Fiji</ng-container>
 *     <ng-container *ngSwitchCase="'FI'" i18n="@@bb-country-item.FI">Finland</ng-container>
 *     <ng-container *ngSwitchCase="'FR'" i18n="@@bb-country-item.FR">France</ng-container>
 *     <ng-container *ngSwitchCase="'GF'" i18n="@@bb-country-item.GF">French Guiana</ng-container>
 *     <ng-container *ngSwitchCase="'PF'" i18n="@@bb-country-item.PF">French Polynesia</ng-container>
 *     <ng-container *ngSwitchCase="'TF'" i18n="@@bb-country-item.TF">French Southern Territories</ng-container>
 *     <ng-container *ngSwitchCase="'GA'" i18n="@@bb-country-item.GA">Gabon</ng-container>
 *     <ng-container *ngSwitchCase="'GM'" i18n="@@bb-country-item.GM">Gambia</ng-container>
 *     <ng-container *ngSwitchCase="'GE'" i18n="@@bb-country-item.GE">Georgia</ng-container>
 *     <ng-container *ngSwitchCase="'DE'" i18n="@@bb-country-item.DE">Germany</ng-container>
 *     <ng-container *ngSwitchCase="'GH'" i18n="@@bb-country-item.GH">Ghana</ng-container>
 *     <ng-container *ngSwitchCase="'GI'" i18n="@@bb-country-item.GI">Gibraltar</ng-container>
 *     <ng-container *ngSwitchCase="'GR'" i18n="@@bb-country-item.GR">Greece</ng-container>
 *     <ng-container *ngSwitchCase="'GL'" i18n="@@bb-country-item.GL">Greenland</ng-container>
 *     <ng-container *ngSwitchCase="'GD'" i18n="@@bb-country-item.GD">Grenada</ng-container>
 *     <ng-container *ngSwitchCase="'GP'" i18n="@@bb-country-item.GP">Guadeloupe</ng-container>
 *     <ng-container *ngSwitchCase="'GU'" i18n="@@bb-country-item.GU">Guam</ng-container>
 *     <ng-container *ngSwitchCase="'GT'" i18n="@@bb-country-item.GT">Guatemala</ng-container>
 *     <ng-container *ngSwitchCase="'GG'" i18n="@@bb-country-item.GG">Guernsey</ng-container>
 *     <ng-container *ngSwitchCase="'GN'" i18n="@@bb-country-item.GN">Guinea</ng-container>
 *     <ng-container *ngSwitchCase="'GW'" i18n="@@bb-country-item.GW">Guinea-Bissau</ng-container>
 *     <ng-container *ngSwitchCase="'GY'" i18n="@@bb-country-item.GY">Guyana</ng-container>
 *     <ng-container *ngSwitchCase="'HT'" i18n="@@bb-country-item.HT">Haiti</ng-container>
 *     <ng-container *ngSwitchCase="'HM'" i18n="@@bb-country-item.HM">Heard Island and McDonald Islands</ng-container>
 *     <ng-container *ngSwitchCase="'VA'" i18n="@@bb-country-item.VA">Holy See (Vatican City State)</ng-container>
 *     <ng-container *ngSwitchCase="'HN'" i18n="@@bb-country-item.HN">Honduras</ng-container>
 *     <ng-container *ngSwitchCase="'HK'" i18n="@@bb-country-item.HK">Hong Kong</ng-container>
 *     <ng-container *ngSwitchCase="'HU'" i18n="@@bb-country-item.HU">Hungary</ng-container>
 *     <ng-container *ngSwitchCase="'IS'" i18n="@@bb-country-item.IS">Iceland</ng-container>
 *     <ng-container *ngSwitchCase="'IN'" i18n="@@bb-country-item.IN">India</ng-container>
 *     <ng-container *ngSwitchCase="'ID'" i18n="@@bb-country-item.ID">Indonesia</ng-container>
 *     <ng-container *ngSwitchCase="'IR'" i18n="@@bb-country-item.IR">Iran, Islamic Republic of</ng-container>
 *     <ng-container *ngSwitchCase="'IQ'" i18n="@@bb-country-item.IQ">Iraq</ng-container>
 *     <ng-container *ngSwitchCase="'IE'" i18n="@@bb-country-item.IE">Ireland</ng-container>
 *     <ng-container *ngSwitchCase="'IM'" i18n="@@bb-country-item.IM">Isle of Man</ng-container>
 *     <ng-container *ngSwitchCase="'IL'" i18n="@@bb-country-item.IL">Israel</ng-container>
 *     <ng-container *ngSwitchCase="'IT'" i18n="@@bb-country-item.IT">Italy</ng-container>
 *     <ng-container *ngSwitchCase="'JM'" i18n="@@bb-country-item.JM">Jamaica</ng-container>
 *     <ng-container *ngSwitchCase="'JP'" i18n="@@bb-country-item.JP">Japan</ng-container>
 *     <ng-container *ngSwitchCase="'JE'" i18n="@@bb-country-item.JE">Jersey</ng-container>
 *     <ng-container *ngSwitchCase="'JO'" i18n="@@bb-country-item.JO">Jordan</ng-container>
 *     <ng-container *ngSwitchCase="'KZ'" i18n="@@bb-country-item.KZ">Kazakhstan</ng-container>
 *     <ng-container *ngSwitchCase="'KE'" i18n="@@bb-country-item.KE">Kenya</ng-container>
 *     <ng-container *ngSwitchCase="'KI'" i18n="@@bb-country-item.KI">Kiribati</ng-container>
 *     <ng-container *ngSwitchCase="'KP'" i18n="@@bb-country-item.KP">Korea, Democratic People's Republic of</ng-container>
 *     <ng-container *ngSwitchCase="'KR'" i18n="@@bb-country-item.KR">Korea, Republic of</ng-container>
 *     <ng-container *ngSwitchCase="'KW'" i18n="@@bb-country-item.KW">Kuwait</ng-container>
 *     <ng-container *ngSwitchCase="'KG'" i18n="@@bb-country-item.KG">Kyrgyzstan</ng-container>
 *     <ng-container *ngSwitchCase="'LA'" i18n="@@bb-country-item.LA">Lao People's Democratic Republic</ng-container>
 *     <ng-container *ngSwitchCase="'LV'" i18n="@@bb-country-item.LV">Latvia</ng-container>
 *     <ng-container *ngSwitchCase="'LB'" i18n="@@bb-country-item.LB">Lebanon</ng-container>
 *     <ng-container *ngSwitchCase="'LS'" i18n="@@bb-country-item.LS">Lesotho</ng-container>
 *     <ng-container *ngSwitchCase="'LR'" i18n="@@bb-country-item.LR">Liberia</ng-container>
 *     <ng-container *ngSwitchCase="'LY'" i18n="@@bb-country-item.LY">Libyan Arab Jamahiriya</ng-container>
 *     <ng-container *ngSwitchCase="'LI'" i18n="@@bb-country-item.LI">Liechtenstein</ng-container>
 *     <ng-container *ngSwitchCase="'LT'" i18n="@@bb-country-item.LT">Lithuania</ng-container>
 *     <ng-container *ngSwitchCase="'LU'" i18n="@@bb-country-item.LU">Luxembourg</ng-container>
 *     <ng-container *ngSwitchCase="'MO'" i18n="@@bb-country-item.MO">Macao</ng-container>
 *     <ng-container *ngSwitchCase="'MK'" i18n="@@bb-country-item.MK">Macedonia, The Former Yugoslav Republic of</ng-container>
 *     <ng-container *ngSwitchCase="'MG'" i18n="@@bb-country-item.MG">Madagascar</ng-container>
 *     <ng-container *ngSwitchCase="'MW'" i18n="@@bb-country-item.MW">Malawi</ng-container>
 *     <ng-container *ngSwitchCase="'MY'" i18n="@@bb-country-item.MY">Malaysia</ng-container>
 *     <ng-container *ngSwitchCase="'MV'" i18n="@@bb-country-item.MV">Maldives</ng-container>
 *     <ng-container *ngSwitchCase="'ML'" i18n="@@bb-country-item.ML">Mali</ng-container>
 *     <ng-container *ngSwitchCase="'MT'" i18n="@@bb-country-item.MT">Malta</ng-container>
 *     <ng-container *ngSwitchCase="'MH'" i18n="@@bb-country-item.MH">Marshall Islands</ng-container>
 *     <ng-container *ngSwitchCase="'MQ'" i18n="@@bb-country-item.MQ">Martinique</ng-container>
 *     <ng-container *ngSwitchCase="'MR'" i18n="@@bb-country-item.MR">Mauritania</ng-container>
 *     <ng-container *ngSwitchCase="'MU'" i18n="@@bb-country-item.MU">Mauritius</ng-container>
 *     <ng-container *ngSwitchCase="'YT'" i18n="@@bb-country-item.YT">Mayotte</ng-container>
 *     <ng-container *ngSwitchCase="'MX'" i18n="@@bb-country-item.MX">Mexico</ng-container>
 *     <ng-container *ngSwitchCase="'FM'" i18n="@@bb-country-item.FM">Micronesia, Federated States of</ng-container>
 *     <ng-container *ngSwitchCase="'MD'" i18n="@@bb-country-item.MD">Moldova, Republic of</ng-container>
 *     <ng-container *ngSwitchCase="'MC'" i18n="@@bb-country-item.MC">Monaco</ng-container>
 *     <ng-container *ngSwitchCase="'MN'" i18n="@@bb-country-item.MN">Mongolia</ng-container>
 *     <ng-container *ngSwitchCase="'ME'" i18n="@@bb-country-item.ME">Montenegro</ng-container>
 *     <ng-container *ngSwitchCase="'MS'" i18n="@@bb-country-item.MS">Montserrat</ng-container>
 *     <ng-container *ngSwitchCase="'MA'" i18n="@@bb-country-item.MA">Morocco</ng-container>
 *     <ng-container *ngSwitchCase="'MZ'" i18n="@@bb-country-item.MZ">Mozambique</ng-container>
 *     <ng-container *ngSwitchCase="'MM'" i18n="@@bb-country-item.MM">Myanmar</ng-container>
 *     <ng-container *ngSwitchCase="'NA'" i18n="@@bb-country-item.NA">Namibia</ng-container>
 *     <ng-container *ngSwitchCase="'NR'" i18n="@@bb-country-item.NR">Nauru</ng-container>
 *     <ng-container *ngSwitchCase="'NP'" i18n="@@bb-country-item.NP">Nepal</ng-container>
 *     <ng-container *ngSwitchCase="'NL'" i18n="@@bb-country-item.NL">Netherlands</ng-container>
 *     <ng-container *ngSwitchCase="'NC'" i18n="@@bb-country-item.NC">New Caledonia</ng-container>
 *     <ng-container *ngSwitchCase="'NZ'" i18n="@@bb-country-item.NZ">New Zealand</ng-container>
 *     <ng-container *ngSwitchCase="'NI'" i18n="@@bb-country-item.NI">Nicaragua</ng-container>
 *     <ng-container *ngSwitchCase="'NE'" i18n="@@bb-country-item.NE">Niger</ng-container>
 *     <ng-container *ngSwitchCase="'NG'" i18n="@@bb-country-item.NG">Nigeria</ng-container>
 *     <ng-container *ngSwitchCase="'NU'" i18n="@@bb-country-item.NU">Niue</ng-container>
 *     <ng-container *ngSwitchCase="'NF'" i18n="@@bb-country-item.NF">Norfolk Island</ng-container>
 *     <ng-container *ngSwitchCase="'MP'" i18n="@@bb-country-item.MP">Northern Mariana Islands</ng-container>
 *     <ng-container *ngSwitchCase="'NO'" i18n="@@bb-country-item.NO">Norway</ng-container>
 *     <ng-container *ngSwitchCase="'PS'" i18n="@@bb-country-item.PS">Occupied Palestinian Territory</ng-container>
 *     <ng-container *ngSwitchCase="'OM'" i18n="@@bb-country-item.OM">Oman</ng-container>
 *     <ng-container *ngSwitchCase="'PK'" i18n="@@bb-country-item.PK">Pakistan</ng-container>
 *     <ng-container *ngSwitchCase="'PW'" i18n="@@bb-country-item.PW">Palau</ng-container>
 *     <ng-container *ngSwitchCase="'PA'" i18n="@@bb-country-item.PA">Panama</ng-container>
 *     <ng-container *ngSwitchCase="'PG'" i18n="@@bb-country-item.PG">Papua New Guinea</ng-container>
 *     <ng-container *ngSwitchCase="'PY'" i18n="@@bb-country-item.PY">Paraguay</ng-container>
 *     <ng-container *ngSwitchCase="'PE'" i18n="@@bb-country-item.PE">Peru</ng-container>
 *     <ng-container *ngSwitchCase="'PH'" i18n="@@bb-country-item.PH">Philippines</ng-container>
 *     <ng-container *ngSwitchCase="'PN'" i18n="@@bb-country-item.PN">Pitcairn</ng-container>
 *     <ng-container *ngSwitchCase="'PL'" i18n="@@bb-country-item.PL">Poland</ng-container>
 *     <ng-container *ngSwitchCase="'PT'" i18n="@@bb-country-item.PT">Portugal</ng-container>
 *     <ng-container *ngSwitchCase="'PR'" i18n="@@bb-country-item.PR">Puerto Rico</ng-container>
 *     <ng-container *ngSwitchCase="'QA'" i18n="@@bb-country-item.QA">Qatar</ng-container>
 *     <ng-container *ngSwitchCase="'RE'" i18n="@@bb-country-item.RE">Reunion</ng-container>
 *     <ng-container *ngSwitchCase="'RO'" i18n="@@bb-country-item.RO">Romania</ng-container>
 *     <ng-container *ngSwitchCase="'RU'" i18n="@@bb-country-item.RU">Russian Federation</ng-container>
 *     <ng-container *ngSwitchCase="'RW'" i18n="@@bb-country-item.RW">Rwanda</ng-container>
 *     <ng-container *ngSwitchCase="'BL'" i18n="@@bb-country-item.BL">Saint Barthelemy</ng-container>
 *     <ng-container *ngSwitchCase="'SH'" i18n="@@bb-country-item.SH">Saint Helena, Ascension and Tristan da Cunha</ng-container>
 *     <ng-container *ngSwitchCase="'KN'" i18n="@@bb-country-item.KN">Saint Kitts and Nevis</ng-container>
 *     <ng-container *ngSwitchCase="'LC'" i18n="@@bb-country-item.LC">Saint Lucia</ng-container>
 *     <ng-container *ngSwitchCase="'MF'" i18n="@@bb-country-item.MF">Saint Martin (French part)</ng-container>
 *     <ng-container *ngSwitchCase="'PM'" i18n="@@bb-country-item.PM">Saint Pierre and Miquelon</ng-container>
 *     <ng-container *ngSwitchCase="'VC'" i18n="@@bb-country-item.VC">Saint Vincent and The Grenadines</ng-container>
 *     <ng-container *ngSwitchCase="'WS'" i18n="@@bb-country-item.WS">Samoa</ng-container>
 *     <ng-container *ngSwitchCase="'SM'" i18n="@@bb-country-item.SM">San Marino</ng-container>
 *     <ng-container *ngSwitchCase="'ST'" i18n="@@bb-country-item.ST">Sao Tome and Principe</ng-container>
 *     <ng-container *ngSwitchCase="'SA'" i18n="@@bb-country-item.SA">Saudi Arabia</ng-container>
 *     <ng-container *ngSwitchCase="'SN'" i18n="@@bb-country-item.SN">Senegal</ng-container>
 *     <ng-container *ngSwitchCase="'RS'" i18n="@@bb-country-item.RS">Serbia</ng-container>
 *     <ng-container *ngSwitchCase="'SC'" i18n="@@bb-country-item.SC">Seychelles</ng-container>
 *     <ng-container *ngSwitchCase="'SL'" i18n="@@bb-country-item.SL">Sierra Leone</ng-container>
 *     <ng-container *ngSwitchCase="'SG'" i18n="@@bb-country-item.SG">Singapore</ng-container>
 *     <ng-container *ngSwitchCase="'SX'" i18n="@@bb-country-item.SX">Sint Maarten (Dutch part)</ng-container>
 *     <ng-container *ngSwitchCase="'SK'" i18n="@@bb-country-item.SK">Slovakia</ng-container>
 *     <ng-container *ngSwitchCase="'SI'" i18n="@@bb-country-item.SI">Slovenia</ng-container>
 *     <ng-container *ngSwitchCase="'SB'" i18n="@@bb-country-item.SB">Solomon Islands</ng-container>
 *     <ng-container *ngSwitchCase="'SO'" i18n="@@bb-country-item.SO">Somalia</ng-container>
 *     <ng-container *ngSwitchCase="'ZA'" i18n="@@bb-country-item.ZA">South Africa</ng-container>
 *     <ng-container *ngSwitchCase="'GS'" i18n="@@bb-country-item.GS">South Georgia and the South Sandwich Islands</ng-container>
 *     <ng-container *ngSwitchCase="'ES'" i18n="@@bb-country-item.ES">Spain</ng-container>
 *     <ng-container *ngSwitchCase="'LK'" i18n="@@bb-country-item.LK">Sri Lanka</ng-container>
 *     <ng-container *ngSwitchCase="'SD'" i18n="@@bb-country-item.SD">Sudan</ng-container>
 *     <ng-container *ngSwitchCase="'SR'" i18n="@@bb-country-item.SR">Suriname</ng-container>
 *     <ng-container *ngSwitchCase="'SJ'" i18n="@@bb-country-item.SJ">Svalbard and Jan Mayen</ng-container>
 *     <ng-container *ngSwitchCase="'SZ'" i18n="@@bb-country-item.SZ">Swaziland</ng-container>
 *     <ng-container *ngSwitchCase="'SE'" i18n="@@bb-country-item.SE">Sweden</ng-container>
 *     <ng-container *ngSwitchCase="'CH'" i18n="@@bb-country-item.CH">Switzerland</ng-container>
 *     <ng-container *ngSwitchCase="'SY'" i18n="@@bb-country-item.SY">Syrian Arab Republic</ng-container>
 *     <ng-container *ngSwitchCase="'TW'" i18n="@@bb-country-item.TW">Taiwan, Province of China</ng-container>
 *     <ng-container *ngSwitchCase="'TJ'" i18n="@@bb-country-item.TJ">Tajikistan</ng-container>
 *     <ng-container *ngSwitchCase="'TZ'" i18n="@@bb-country-item.TZ">Tanzania, United Republic of</ng-container>
 *     <ng-container *ngSwitchCase="'TH'" i18n="@@bb-country-item.TH">Thailand</ng-container>
 *     <ng-container *ngSwitchCase="'TL'" i18n="@@bb-country-item.TL">Timor-Leste</ng-container>
 *     <ng-container *ngSwitchCase="'TG'" i18n="@@bb-country-item.TG">Togo</ng-container>
 *     <ng-container *ngSwitchCase="'TK'" i18n="@@bb-country-item.TK">Tokelau</ng-container>
 *     <ng-container *ngSwitchCase="'TO'" i18n="@@bb-country-item.TO">Tonga</ng-container>
 *     <ng-container *ngSwitchCase="'TT'" i18n="@@bb-country-item.TT">Trinidad and Tobago</ng-container>
 *     <ng-container *ngSwitchCase="'TN'" i18n="@@bb-country-item.TN">Tunisia</ng-container>
 *     <ng-container *ngSwitchCase="'TR'" i18n="@@bb-country-item.TR">Turkey</ng-container>
 *     <ng-container *ngSwitchCase="'TM'" i18n="@@bb-country-item.TM">Turkmenistan</ng-container>
 *     <ng-container *ngSwitchCase="'TC'" i18n="@@bb-country-item.TC">Turks and Caicos Islands</ng-container>
 *     <ng-container *ngSwitchCase="'TV'" i18n="@@bb-country-item.TV">Tuvalu</ng-container>
 *     <ng-container *ngSwitchCase="'UG'" i18n="@@bb-country-item.UG">Uganda</ng-container>
 *     <ng-container *ngSwitchCase="'UA'" i18n="@@bb-country-item.UA">Ukraine</ng-container>
 *     <ng-container *ngSwitchCase="'AE'" i18n="@@bb-country-item.AE">United Arab Emirates</ng-container>
 *     <ng-container *ngSwitchCase="'GB'" i18n="@@bb-country-item.GB">United Kingdom</ng-container>
 *     <ng-container *ngSwitchCase="'US'" i18n="@@bb-country-item.US">United States</ng-container>
 *     <ng-container *ngSwitchCase="'UY'" i18n="@@bb-country-item.UY">Uruguay</ng-container>
 *     <ng-container *ngSwitchCase="'UZ'" i18n="@@bb-country-item.UZ">Uzbekistan</ng-container>
 *     <ng-container *ngSwitchCase="'VU'" i18n="@@bb-country-item.VU">Vanuatu</ng-container>
 *     <ng-container *ngSwitchCase="'VE'" i18n="@@bb-country-item.VE">Venezuela, Bolivarian Republic of</ng-container>
 *     <ng-container *ngSwitchCase="'VN'" i18n="@@bb-country-item.VN">Viet Nam</ng-container>
 *     <ng-container *ngSwitchCase="'VG'" i18n="@@bb-country-item.VG">Virgin Islands, British</ng-container>
 *     <ng-container *ngSwitchCase="'VI'" i18n="@@bb-country-item.VI">Virgin Islands, U.S.</ng-container>
 *     <ng-container *ngSwitchCase="'WF'" i18n="@@bb-country-item.WF">Wallis and Futuna</ng-container>
 *     <ng-container *ngSwitchCase="'EH'" i18n="@@bb-country-item.EH">Western Sahara</ng-container>
 *     <ng-container *ngSwitchCase="'YE'" i18n="@@bb-country-item.YE">Yemen</ng-container>
 *     <ng-container *ngSwitchCase="'ZM'" i18n="@@bb-country-item.ZM">Zambia</ng-container>
 *     <ng-container *ngSwitchCase="'ZW'" i18n="@@bb-country-item.ZW">Zimbabwe</ng-container>
 *   </ng-container>
 * </ng-template>
 * ```
 * @ngModule CountryItemModule
 */
class CountryItemCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ CountryItemCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CountryItemCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ CountryItemCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: CountryItemCustomizableDirective, selector: "[bbCountryItemCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CountryItemCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbCountryItemCustomizable]',
                }]
        }] });

/**
 * The component is for showing the country based on ISO code.
 *
 * The following extension slots are available in this component:
 *  - `CountryItemCustomizableDirective`
 *
 * @see CountryItemCustomizableDirective
 * @usageNotes
 *
 * ### Display contact form
 *
 * ```html
 *    <bb-country-item [code]="country"></bb-country-item>
 * ```
 * @ngModule CountryItemModule
 */
class CountryItemComponent {
    constructor() {
        this.hostRef = this;
    }
    ngOnInit() {
        if (!this.code) {
            console.warn('Please provide a ISO 3166 Alpha-2 country code');
        }
    }
}
/** @nocollapse */ CountryItemComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CountryItemComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ CountryItemComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: CountryItemComponent, selector: "bb-country-item", inputs: { code: "code" }, ngImport: i0, template: "<ng-container bbCountryItemCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n<ng-template bbCountryItemCustomizable let-hostRef>\n  <ng-container [ngSwitch]=\"hostRef.code\">\n    <ng-container *ngSwitchCase=\"'AF'\" i18n=\"@@bb-country-item.AF\">Afghanistan</ng-container>\n    <ng-container *ngSwitchCase=\"'AX'\" i18n=\"@@bb-country-item.AX\">Aland Islands</ng-container>\n    <ng-container *ngSwitchCase=\"'AL'\" i18n=\"@@bb-country-item.AL\">Albania</ng-container>\n    <ng-container *ngSwitchCase=\"'DZ'\" i18n=\"@@bb-country-item.DZ\">Algeria</ng-container>\n    <ng-container *ngSwitchCase=\"'AS'\" i18n=\"@@bb-country-item.AS\">American Samoa</ng-container>\n    <ng-container *ngSwitchCase=\"'AD'\" i18n=\"@@bb-country-item.AD\">Andorra</ng-container>\n    <ng-container *ngSwitchCase=\"'AO'\" i18n=\"@@bb-country-item.AO\">Angola</ng-container>\n    <ng-container *ngSwitchCase=\"'AI'\" i18n=\"@@bb-country-item.AI\">Anguilla</ng-container>\n    <ng-container *ngSwitchCase=\"'AQ'\" i18n=\"@@bb-country-item.AQ\">Antarctica</ng-container>\n    <ng-container *ngSwitchCase=\"'AG'\" i18n=\"@@bb-country-item.AG\">Antigua and Barbuda</ng-container>\n    <ng-container *ngSwitchCase=\"'AR'\" i18n=\"@@bb-country-item.AR\">Argentina</ng-container>\n    <ng-container *ngSwitchCase=\"'AM'\" i18n=\"@@bb-country-item.AM\">Armenia</ng-container>\n    <ng-container *ngSwitchCase=\"'AW'\" i18n=\"@@bb-country-item.AW\">Aruba</ng-container>\n    <ng-container *ngSwitchCase=\"'AU'\" i18n=\"@@bb-country-item.AU\">Australia</ng-container>\n    <ng-container *ngSwitchCase=\"'AT'\" i18n=\"@@bb-country-item.AT\">Austria</ng-container>\n    <ng-container *ngSwitchCase=\"'AZ'\" i18n=\"@@bb-country-item.AZ\">Azerbaijan</ng-container>\n    <ng-container *ngSwitchCase=\"'BS'\" i18n=\"@@bb-country-item.BS\">Bahamas</ng-container>\n    <ng-container *ngSwitchCase=\"'BH'\" i18n=\"@@bb-country-item.BH\">Bahrain</ng-container>\n    <ng-container *ngSwitchCase=\"'BD'\" i18n=\"@@bb-country-item.BD\">Bangladesh</ng-container>\n    <ng-container *ngSwitchCase=\"'BB'\" i18n=\"@@bb-country-item.BB\">Barbados</ng-container>\n    <ng-container *ngSwitchCase=\"'BY'\" i18n=\"@@bb-country-item.BY\">Belarus</ng-container>\n    <ng-container *ngSwitchCase=\"'BE'\" i18n=\"@@bb-country-item.BE\">Belgium</ng-container>\n    <ng-container *ngSwitchCase=\"'BZ'\" i18n=\"@@bb-country-item.BZ\">Belize</ng-container>\n    <ng-container *ngSwitchCase=\"'BJ'\" i18n=\"@@bb-country-item.BJ\">Benin</ng-container>\n    <ng-container *ngSwitchCase=\"'BM'\" i18n=\"@@bb-country-item.BM\">Bermuda</ng-container>\n    <ng-container *ngSwitchCase=\"'BT'\" i18n=\"@@bb-country-item.BT\">Bhutan</ng-container>\n    <ng-container *ngSwitchCase=\"'BO'\" i18n=\"@@bb-country-item.BO\">Bolivia, Plurinational State of</ng-container>\n    <ng-container *ngSwitchCase=\"'BQ'\" i18n=\"@@bb-country-item.BQ\">Bonaire, Saint Eustatius and Saba</ng-container>\n    <ng-container *ngSwitchCase=\"'BA'\" i18n=\"@@bb-country-item.BA\">Bosnia and Herzegovina</ng-container>\n    <ng-container *ngSwitchCase=\"'BW'\" i18n=\"@@bb-country-item.BW\">Botswana</ng-container>\n    <ng-container *ngSwitchCase=\"'BV'\" i18n=\"@@bb-country-item.BV\">Bouvet Island</ng-container>\n    <ng-container *ngSwitchCase=\"'BR'\" i18n=\"@@bb-country-item.BR\">Brazil</ng-container>\n    <ng-container *ngSwitchCase=\"'IO'\" i18n=\"@@bb-country-item.IO\">British Indian Ocean Territory</ng-container>\n    <ng-container *ngSwitchCase=\"'BN'\" i18n=\"@@bb-country-item.BN\">Brunei Darussalam</ng-container>\n    <ng-container *ngSwitchCase=\"'BG'\" i18n=\"@@bb-country-item.BG\">Bulgaria</ng-container>\n    <ng-container *ngSwitchCase=\"'BF'\" i18n=\"@@bb-country-item.BF\">Burkina Faso</ng-container>\n    <ng-container *ngSwitchCase=\"'BI'\" i18n=\"@@bb-country-item.BI\">Burundi</ng-container>\n    <ng-container *ngSwitchCase=\"'KH'\" i18n=\"@@bb-country-item.KH\">Cambodia</ng-container>\n    <ng-container *ngSwitchCase=\"'CM'\" i18n=\"@@bb-country-item.CM\">Cameroon</ng-container>\n    <ng-container *ngSwitchCase=\"'CA'\" i18n=\"@@bb-country-item.CA\">Canada</ng-container>\n    <ng-container *ngSwitchCase=\"'CV'\" i18n=\"@@bb-country-item.CV\">Cape Verde</ng-container>\n    <ng-container *ngSwitchCase=\"'KY'\" i18n=\"@@bb-country-item.KY\">Cayman Islands</ng-container>\n    <ng-container *ngSwitchCase=\"'CF'\" i18n=\"@@bb-country-item.CF\">Central African Republic</ng-container>\n    <ng-container *ngSwitchCase=\"'TD'\" i18n=\"@@bb-country-item.TD\">Chad</ng-container>\n    <ng-container *ngSwitchCase=\"'CL'\" i18n=\"@@bb-country-item.CL\">Chile</ng-container>\n    <ng-container *ngSwitchCase=\"'CN'\" i18n=\"@@bb-country-item.CN\">China</ng-container>\n    <ng-container *ngSwitchCase=\"'CX'\" i18n=\"@@bb-country-item.CX\">Christmas Island</ng-container>\n    <ng-container *ngSwitchCase=\"'CC'\" i18n=\"@@bb-country-item.CC\">Cocos (Keeling) Islands</ng-container>\n    <ng-container *ngSwitchCase=\"'CO'\" i18n=\"@@bb-country-item.CO\">Colombia</ng-container>\n    <ng-container *ngSwitchCase=\"'KM'\" i18n=\"@@bb-country-item.KM\">Comoros</ng-container>\n    <ng-container *ngSwitchCase=\"'CG'\" i18n=\"@@bb-country-item.CG\">Congo</ng-container>\n    <ng-container *ngSwitchCase=\"'CD'\" i18n=\"@@bb-country-item.CD\">Congo, The Democratic Republic of the</ng-container>\n    <ng-container *ngSwitchCase=\"'CK'\" i18n=\"@@bb-country-item.CK\">Cook Islands</ng-container>\n    <ng-container *ngSwitchCase=\"'CR'\" i18n=\"@@bb-country-item.CR\">Costa Rica</ng-container>\n    <ng-container *ngSwitchCase=\"'CI'\" i18n=\"@@bb-country-item.CI\">Cote d'Ivoire</ng-container>\n    <ng-container *ngSwitchCase=\"'HR'\" i18n=\"@@bb-country-item.HR\">Croatia</ng-container>\n    <ng-container *ngSwitchCase=\"'CU'\" i18n=\"@@bb-country-item.CU\">Cuba</ng-container>\n    <ng-container *ngSwitchCase=\"'CW'\" i18n=\"@@bb-country-item.CW\">Curacao</ng-container>\n    <ng-container *ngSwitchCase=\"'CY'\" i18n=\"@@bb-country-item.CY\">Cyprus</ng-container>\n    <ng-container *ngSwitchCase=\"'CZ'\" i18n=\"@@bb-country-item.CZ\">Czech Republic</ng-container>\n    <ng-container *ngSwitchCase=\"'DK'\" i18n=\"@@bb-country-item.DK\">Denmark</ng-container>\n    <ng-container *ngSwitchCase=\"'DJ'\" i18n=\"@@bb-country-item.DJ\">Djibouti</ng-container>\n    <ng-container *ngSwitchCase=\"'DM'\" i18n=\"@@bb-country-item.DM\">Dominica</ng-container>\n    <ng-container *ngSwitchCase=\"'DO'\" i18n=\"@@bb-country-item.DO\">Dominican Republic</ng-container>\n    <ng-container *ngSwitchCase=\"'EC'\" i18n=\"@@bb-country-item.EC\">Ecuador</ng-container>\n    <ng-container *ngSwitchCase=\"'EG'\" i18n=\"@@bb-country-item.EG\">Egypt</ng-container>\n    <ng-container *ngSwitchCase=\"'SV'\" i18n=\"@@bb-country-item.SV\">El Salvador</ng-container>\n    <ng-container *ngSwitchCase=\"'GQ'\" i18n=\"@@bb-country-item.GQ\">Equatorial Guinea</ng-container>\n    <ng-container *ngSwitchCase=\"'ER'\" i18n=\"@@bb-country-item.ER\">Eritrea</ng-container>\n    <ng-container *ngSwitchCase=\"'EE'\" i18n=\"@@bb-country-item.EE\">Estonia</ng-container>\n    <ng-container *ngSwitchCase=\"'ET'\" i18n=\"@@bb-country-item.ET\">Ethiopia</ng-container>\n    <ng-container *ngSwitchCase=\"'FK'\" i18n=\"@@bb-country-item.FK\">Falkland Islands (Malvinas)</ng-container>\n    <ng-container *ngSwitchCase=\"'FO'\" i18n=\"@@bb-country-item.FO\">Faroe Islands</ng-container>\n    <ng-container *ngSwitchCase=\"'FJ'\" i18n=\"@@bb-country-item.FJ\">Fiji</ng-container>\n    <ng-container *ngSwitchCase=\"'FI'\" i18n=\"@@bb-country-item.FI\">Finland</ng-container>\n    <ng-container *ngSwitchCase=\"'FR'\" i18n=\"@@bb-country-item.FR\">France</ng-container>\n    <ng-container *ngSwitchCase=\"'GF'\" i18n=\"@@bb-country-item.GF\">French Guiana</ng-container>\n    <ng-container *ngSwitchCase=\"'PF'\" i18n=\"@@bb-country-item.PF\">French Polynesia</ng-container>\n    <ng-container *ngSwitchCase=\"'TF'\" i18n=\"@@bb-country-item.TF\">French Southern Territories</ng-container>\n    <ng-container *ngSwitchCase=\"'GA'\" i18n=\"@@bb-country-item.GA\">Gabon</ng-container>\n    <ng-container *ngSwitchCase=\"'GM'\" i18n=\"@@bb-country-item.GM\">Gambia</ng-container>\n    <ng-container *ngSwitchCase=\"'GE'\" i18n=\"@@bb-country-item.GE\">Georgia</ng-container>\n    <ng-container *ngSwitchCase=\"'DE'\" i18n=\"@@bb-country-item.DE\">Germany</ng-container>\n    <ng-container *ngSwitchCase=\"'GH'\" i18n=\"@@bb-country-item.GH\">Ghana</ng-container>\n    <ng-container *ngSwitchCase=\"'GI'\" i18n=\"@@bb-country-item.GI\">Gibraltar</ng-container>\n    <ng-container *ngSwitchCase=\"'GR'\" i18n=\"@@bb-country-item.GR\">Greece</ng-container>\n    <ng-container *ngSwitchCase=\"'GL'\" i18n=\"@@bb-country-item.GL\">Greenland</ng-container>\n    <ng-container *ngSwitchCase=\"'GD'\" i18n=\"@@bb-country-item.GD\">Grenada</ng-container>\n    <ng-container *ngSwitchCase=\"'GP'\" i18n=\"@@bb-country-item.GP\">Guadeloupe</ng-container>\n    <ng-container *ngSwitchCase=\"'GU'\" i18n=\"@@bb-country-item.GU\">Guam</ng-container>\n    <ng-container *ngSwitchCase=\"'GT'\" i18n=\"@@bb-country-item.GT\">Guatemala</ng-container>\n    <ng-container *ngSwitchCase=\"'GG'\" i18n=\"@@bb-country-item.GG\">Guernsey</ng-container>\n    <ng-container *ngSwitchCase=\"'GN'\" i18n=\"@@bb-country-item.GN\">Guinea</ng-container>\n    <ng-container *ngSwitchCase=\"'GW'\" i18n=\"@@bb-country-item.GW\">Guinea-Bissau</ng-container>\n    <ng-container *ngSwitchCase=\"'GY'\" i18n=\"@@bb-country-item.GY\">Guyana</ng-container>\n    <ng-container *ngSwitchCase=\"'HT'\" i18n=\"@@bb-country-item.HT\">Haiti</ng-container>\n    <ng-container *ngSwitchCase=\"'HM'\" i18n=\"@@bb-country-item.HM\">Heard Island and McDonald Islands</ng-container>\n    <ng-container *ngSwitchCase=\"'VA'\" i18n=\"@@bb-country-item.VA\">Holy See (Vatican City State)</ng-container>\n    <ng-container *ngSwitchCase=\"'HN'\" i18n=\"@@bb-country-item.HN\">Honduras</ng-container>\n    <ng-container *ngSwitchCase=\"'HK'\" i18n=\"@@bb-country-item.HK\">Hong Kong</ng-container>\n    <ng-container *ngSwitchCase=\"'HU'\" i18n=\"@@bb-country-item.HU\">Hungary</ng-container>\n    <ng-container *ngSwitchCase=\"'IS'\" i18n=\"@@bb-country-item.IS\">Iceland</ng-container>\n    <ng-container *ngSwitchCase=\"'IN'\" i18n=\"@@bb-country-item.IN\">India</ng-container>\n    <ng-container *ngSwitchCase=\"'ID'\" i18n=\"@@bb-country-item.ID\">Indonesia</ng-container>\n    <ng-container *ngSwitchCase=\"'IR'\" i18n=\"@@bb-country-item.IR\">Iran, Islamic Republic of</ng-container>\n    <ng-container *ngSwitchCase=\"'IQ'\" i18n=\"@@bb-country-item.IQ\">Iraq</ng-container>\n    <ng-container *ngSwitchCase=\"'IE'\" i18n=\"@@bb-country-item.IE\">Ireland</ng-container>\n    <ng-container *ngSwitchCase=\"'IM'\" i18n=\"@@bb-country-item.IM\">Isle of Man</ng-container>\n    <ng-container *ngSwitchCase=\"'IL'\" i18n=\"@@bb-country-item.IL\">Israel</ng-container>\n    <ng-container *ngSwitchCase=\"'IT'\" i18n=\"@@bb-country-item.IT\">Italy</ng-container>\n    <ng-container *ngSwitchCase=\"'JM'\" i18n=\"@@bb-country-item.JM\">Jamaica</ng-container>\n    <ng-container *ngSwitchCase=\"'JP'\" i18n=\"@@bb-country-item.JP\">Japan</ng-container>\n    <ng-container *ngSwitchCase=\"'JE'\" i18n=\"@@bb-country-item.JE\">Jersey</ng-container>\n    <ng-container *ngSwitchCase=\"'JO'\" i18n=\"@@bb-country-item.JO\">Jordan</ng-container>\n    <ng-container *ngSwitchCase=\"'KZ'\" i18n=\"@@bb-country-item.KZ\">Kazakhstan</ng-container>\n    <ng-container *ngSwitchCase=\"'KE'\" i18n=\"@@bb-country-item.KE\">Kenya</ng-container>\n    <ng-container *ngSwitchCase=\"'KI'\" i18n=\"@@bb-country-item.KI\">Kiribati</ng-container>\n    <ng-container *ngSwitchCase=\"'KP'\" i18n=\"@@bb-country-item.KP\">Korea, Democratic People's Republic of</ng-container>\n    <ng-container *ngSwitchCase=\"'KR'\" i18n=\"@@bb-country-item.KR\">Korea, Republic of</ng-container>\n    <ng-container *ngSwitchCase=\"'KW'\" i18n=\"@@bb-country-item.KW\">Kuwait</ng-container>\n    <ng-container *ngSwitchCase=\"'KG'\" i18n=\"@@bb-country-item.KG\">Kyrgyzstan</ng-container>\n    <ng-container *ngSwitchCase=\"'LA'\" i18n=\"@@bb-country-item.LA\">Lao People's Democratic Republic</ng-container>\n    <ng-container *ngSwitchCase=\"'LV'\" i18n=\"@@bb-country-item.LV\">Latvia</ng-container>\n    <ng-container *ngSwitchCase=\"'LB'\" i18n=\"@@bb-country-item.LB\">Lebanon</ng-container>\n    <ng-container *ngSwitchCase=\"'LS'\" i18n=\"@@bb-country-item.LS\">Lesotho</ng-container>\n    <ng-container *ngSwitchCase=\"'LR'\" i18n=\"@@bb-country-item.LR\">Liberia</ng-container>\n    <ng-container *ngSwitchCase=\"'LY'\" i18n=\"@@bb-country-item.LY\">Libyan Arab Jamahiriya</ng-container>\n    <ng-container *ngSwitchCase=\"'LI'\" i18n=\"@@bb-country-item.LI\">Liechtenstein</ng-container>\n    <ng-container *ngSwitchCase=\"'LT'\" i18n=\"@@bb-country-item.LT\">Lithuania</ng-container>\n    <ng-container *ngSwitchCase=\"'LU'\" i18n=\"@@bb-country-item.LU\">Luxembourg</ng-container>\n    <ng-container *ngSwitchCase=\"'MO'\" i18n=\"@@bb-country-item.MO\">Macao</ng-container>\n    <ng-container *ngSwitchCase=\"'MK'\" i18n=\"@@bb-country-item.MK\"\n      >Macedonia, The Former Yugoslav Republic of</ng-container\n    >\n    <ng-container *ngSwitchCase=\"'MG'\" i18n=\"@@bb-country-item.MG\">Madagascar</ng-container>\n    <ng-container *ngSwitchCase=\"'MW'\" i18n=\"@@bb-country-item.MW\">Malawi</ng-container>\n    <ng-container *ngSwitchCase=\"'MY'\" i18n=\"@@bb-country-item.MY\">Malaysia</ng-container>\n    <ng-container *ngSwitchCase=\"'MV'\" i18n=\"@@bb-country-item.MV\">Maldives</ng-container>\n    <ng-container *ngSwitchCase=\"'ML'\" i18n=\"@@bb-country-item.ML\">Mali</ng-container>\n    <ng-container *ngSwitchCase=\"'MT'\" i18n=\"@@bb-country-item.MT\">Malta</ng-container>\n    <ng-container *ngSwitchCase=\"'MH'\" i18n=\"@@bb-country-item.MH\">Marshall Islands</ng-container>\n    <ng-container *ngSwitchCase=\"'MQ'\" i18n=\"@@bb-country-item.MQ\">Martinique</ng-container>\n    <ng-container *ngSwitchCase=\"'MR'\" i18n=\"@@bb-country-item.MR\">Mauritania</ng-container>\n    <ng-container *ngSwitchCase=\"'MU'\" i18n=\"@@bb-country-item.MU\">Mauritius</ng-container>\n    <ng-container *ngSwitchCase=\"'YT'\" i18n=\"@@bb-country-item.YT\">Mayotte</ng-container>\n    <ng-container *ngSwitchCase=\"'MX'\" i18n=\"@@bb-country-item.MX\">Mexico</ng-container>\n    <ng-container *ngSwitchCase=\"'FM'\" i18n=\"@@bb-country-item.FM\">Micronesia, Federated States of</ng-container>\n    <ng-container *ngSwitchCase=\"'MD'\" i18n=\"@@bb-country-item.MD\">Moldova, Republic of</ng-container>\n    <ng-container *ngSwitchCase=\"'MC'\" i18n=\"@@bb-country-item.MC\">Monaco</ng-container>\n    <ng-container *ngSwitchCase=\"'MN'\" i18n=\"@@bb-country-item.MN\">Mongolia</ng-container>\n    <ng-container *ngSwitchCase=\"'ME'\" i18n=\"@@bb-country-item.ME\">Montenegro</ng-container>\n    <ng-container *ngSwitchCase=\"'MS'\" i18n=\"@@bb-country-item.MS\">Montserrat</ng-container>\n    <ng-container *ngSwitchCase=\"'MA'\" i18n=\"@@bb-country-item.MA\">Morocco</ng-container>\n    <ng-container *ngSwitchCase=\"'MZ'\" i18n=\"@@bb-country-item.MZ\">Mozambique</ng-container>\n    <ng-container *ngSwitchCase=\"'MM'\" i18n=\"@@bb-country-item.MM\">Myanmar</ng-container>\n    <ng-container *ngSwitchCase=\"'NA'\" i18n=\"@@bb-country-item.NA\">Namibia</ng-container>\n    <ng-container *ngSwitchCase=\"'NR'\" i18n=\"@@bb-country-item.NR\">Nauru</ng-container>\n    <ng-container *ngSwitchCase=\"'NP'\" i18n=\"@@bb-country-item.NP\">Nepal</ng-container>\n    <ng-container *ngSwitchCase=\"'NL'\" i18n=\"@@bb-country-item.NL\">Netherlands</ng-container>\n    <ng-container *ngSwitchCase=\"'NC'\" i18n=\"@@bb-country-item.NC\">New Caledonia</ng-container>\n    <ng-container *ngSwitchCase=\"'NZ'\" i18n=\"@@bb-country-item.NZ\">New Zealand</ng-container>\n    <ng-container *ngSwitchCase=\"'NI'\" i18n=\"@@bb-country-item.NI\">Nicaragua</ng-container>\n    <ng-container *ngSwitchCase=\"'NE'\" i18n=\"@@bb-country-item.NE\">Niger</ng-container>\n    <ng-container *ngSwitchCase=\"'NG'\" i18n=\"@@bb-country-item.NG\">Nigeria</ng-container>\n    <ng-container *ngSwitchCase=\"'NU'\" i18n=\"@@bb-country-item.NU\">Niue</ng-container>\n    <ng-container *ngSwitchCase=\"'NF'\" i18n=\"@@bb-country-item.NF\">Norfolk Island</ng-container>\n    <ng-container *ngSwitchCase=\"'MP'\" i18n=\"@@bb-country-item.MP\">Northern Mariana Islands</ng-container>\n    <ng-container *ngSwitchCase=\"'NO'\" i18n=\"@@bb-country-item.NO\">Norway</ng-container>\n    <ng-container *ngSwitchCase=\"'PS'\" i18n=\"@@bb-country-item.PS\">Occupied Palestinian Territory</ng-container>\n    <ng-container *ngSwitchCase=\"'OM'\" i18n=\"@@bb-country-item.OM\">Oman</ng-container>\n    <ng-container *ngSwitchCase=\"'PK'\" i18n=\"@@bb-country-item.PK\">Pakistan</ng-container>\n    <ng-container *ngSwitchCase=\"'PW'\" i18n=\"@@bb-country-item.PW\">Palau</ng-container>\n    <ng-container *ngSwitchCase=\"'PA'\" i18n=\"@@bb-country-item.PA\">Panama</ng-container>\n    <ng-container *ngSwitchCase=\"'PG'\" i18n=\"@@bb-country-item.PG\">Papua New Guinea</ng-container>\n    <ng-container *ngSwitchCase=\"'PY'\" i18n=\"@@bb-country-item.PY\">Paraguay</ng-container>\n    <ng-container *ngSwitchCase=\"'PE'\" i18n=\"@@bb-country-item.PE\">Peru</ng-container>\n    <ng-container *ngSwitchCase=\"'PH'\" i18n=\"@@bb-country-item.PH\">Philippines</ng-container>\n    <ng-container *ngSwitchCase=\"'PN'\" i18n=\"@@bb-country-item.PN\">Pitcairn</ng-container>\n    <ng-container *ngSwitchCase=\"'PL'\" i18n=\"@@bb-country-item.PL\">Poland</ng-container>\n    <ng-container *ngSwitchCase=\"'PT'\" i18n=\"@@bb-country-item.PT\">Portugal</ng-container>\n    <ng-container *ngSwitchCase=\"'PR'\" i18n=\"@@bb-country-item.PR\">Puerto Rico</ng-container>\n    <ng-container *ngSwitchCase=\"'QA'\" i18n=\"@@bb-country-item.QA\">Qatar</ng-container>\n    <ng-container *ngSwitchCase=\"'RE'\" i18n=\"@@bb-country-item.RE\">Reunion</ng-container>\n    <ng-container *ngSwitchCase=\"'RO'\" i18n=\"@@bb-country-item.RO\">Romania</ng-container>\n    <ng-container *ngSwitchCase=\"'RU'\" i18n=\"@@bb-country-item.RU\">Russian Federation</ng-container>\n    <ng-container *ngSwitchCase=\"'RW'\" i18n=\"@@bb-country-item.RW\">Rwanda</ng-container>\n    <ng-container *ngSwitchCase=\"'BL'\" i18n=\"@@bb-country-item.BL\">Saint Barthelemy</ng-container>\n    <ng-container *ngSwitchCase=\"'SH'\" i18n=\"@@bb-country-item.SH\"\n      >Saint Helena, Ascension and Tristan da Cunha</ng-container\n    >\n    <ng-container *ngSwitchCase=\"'KN'\" i18n=\"@@bb-country-item.KN\">Saint Kitts and Nevis</ng-container>\n    <ng-container *ngSwitchCase=\"'LC'\" i18n=\"@@bb-country-item.LC\">Saint Lucia</ng-container>\n    <ng-container *ngSwitchCase=\"'MF'\" i18n=\"@@bb-country-item.MF\">Saint Martin (French part)</ng-container>\n    <ng-container *ngSwitchCase=\"'PM'\" i18n=\"@@bb-country-item.PM\">Saint Pierre and Miquelon</ng-container>\n    <ng-container *ngSwitchCase=\"'VC'\" i18n=\"@@bb-country-item.VC\">Saint Vincent and The Grenadines</ng-container>\n    <ng-container *ngSwitchCase=\"'WS'\" i18n=\"@@bb-country-item.WS\">Samoa</ng-container>\n    <ng-container *ngSwitchCase=\"'SM'\" i18n=\"@@bb-country-item.SM\">San Marino</ng-container>\n    <ng-container *ngSwitchCase=\"'ST'\" i18n=\"@@bb-country-item.ST\">Sao Tome and Principe</ng-container>\n    <ng-container *ngSwitchCase=\"'SA'\" i18n=\"@@bb-country-item.SA\">Saudi Arabia</ng-container>\n    <ng-container *ngSwitchCase=\"'SN'\" i18n=\"@@bb-country-item.SN\">Senegal</ng-container>\n    <ng-container *ngSwitchCase=\"'RS'\" i18n=\"@@bb-country-item.RS\">Serbia</ng-container>\n    <ng-container *ngSwitchCase=\"'SC'\" i18n=\"@@bb-country-item.SC\">Seychelles</ng-container>\n    <ng-container *ngSwitchCase=\"'SL'\" i18n=\"@@bb-country-item.SL\">Sierra Leone</ng-container>\n    <ng-container *ngSwitchCase=\"'SG'\" i18n=\"@@bb-country-item.SG\">Singapore</ng-container>\n    <ng-container *ngSwitchCase=\"'SX'\" i18n=\"@@bb-country-item.SX\">Sint Maarten (Dutch part)</ng-container>\n    <ng-container *ngSwitchCase=\"'SK'\" i18n=\"@@bb-country-item.SK\">Slovakia</ng-container>\n    <ng-container *ngSwitchCase=\"'SI'\" i18n=\"@@bb-country-item.SI\">Slovenia</ng-container>\n    <ng-container *ngSwitchCase=\"'SB'\" i18n=\"@@bb-country-item.SB\">Solomon Islands</ng-container>\n    <ng-container *ngSwitchCase=\"'SO'\" i18n=\"@@bb-country-item.SO\">Somalia</ng-container>\n    <ng-container *ngSwitchCase=\"'ZA'\" i18n=\"@@bb-country-item.ZA\">South Africa</ng-container>\n    <ng-container *ngSwitchCase=\"'GS'\" i18n=\"@@bb-country-item.GS\"\n      >South Georgia and the South Sandwich Islands</ng-container\n    >\n    <ng-container *ngSwitchCase=\"'ES'\" i18n=\"@@bb-country-item.ES\">Spain</ng-container>\n    <ng-container *ngSwitchCase=\"'LK'\" i18n=\"@@bb-country-item.LK\">Sri Lanka</ng-container>\n    <ng-container *ngSwitchCase=\"'SD'\" i18n=\"@@bb-country-item.SD\">Sudan</ng-container>\n    <ng-container *ngSwitchCase=\"'SR'\" i18n=\"@@bb-country-item.SR\">Suriname</ng-container>\n    <ng-container *ngSwitchCase=\"'SJ'\" i18n=\"@@bb-country-item.SJ\">Svalbard and Jan Mayen</ng-container>\n    <ng-container *ngSwitchCase=\"'SZ'\" i18n=\"@@bb-country-item.SZ\">Swaziland</ng-container>\n    <ng-container *ngSwitchCase=\"'SE'\" i18n=\"@@bb-country-item.SE\">Sweden</ng-container>\n    <ng-container *ngSwitchCase=\"'CH'\" i18n=\"@@bb-country-item.CH\">Switzerland</ng-container>\n    <ng-container *ngSwitchCase=\"'SY'\" i18n=\"@@bb-country-item.SY\">Syrian Arab Republic</ng-container>\n    <ng-container *ngSwitchCase=\"'TW'\" i18n=\"@@bb-country-item.TW\">Taiwan, Province of China</ng-container>\n    <ng-container *ngSwitchCase=\"'TJ'\" i18n=\"@@bb-country-item.TJ\">Tajikistan</ng-container>\n    <ng-container *ngSwitchCase=\"'TZ'\" i18n=\"@@bb-country-item.TZ\">Tanzania, United Republic of</ng-container>\n    <ng-container *ngSwitchCase=\"'TH'\" i18n=\"@@bb-country-item.TH\">Thailand</ng-container>\n    <ng-container *ngSwitchCase=\"'TL'\" i18n=\"@@bb-country-item.TL\">Timor-Leste</ng-container>\n    <ng-container *ngSwitchCase=\"'TG'\" i18n=\"@@bb-country-item.TG\">Togo</ng-container>\n    <ng-container *ngSwitchCase=\"'TK'\" i18n=\"@@bb-country-item.TK\">Tokelau</ng-container>\n    <ng-container *ngSwitchCase=\"'TO'\" i18n=\"@@bb-country-item.TO\">Tonga</ng-container>\n    <ng-container *ngSwitchCase=\"'TT'\" i18n=\"@@bb-country-item.TT\">Trinidad and Tobago</ng-container>\n    <ng-container *ngSwitchCase=\"'TN'\" i18n=\"@@bb-country-item.TN\">Tunisia</ng-container>\n    <ng-container *ngSwitchCase=\"'TR'\" i18n=\"@@bb-country-item.TR\">Turkey</ng-container>\n    <ng-container *ngSwitchCase=\"'TM'\" i18n=\"@@bb-country-item.TM\">Turkmenistan</ng-container>\n    <ng-container *ngSwitchCase=\"'TC'\" i18n=\"@@bb-country-item.TC\">Turks and Caicos Islands</ng-container>\n    <ng-container *ngSwitchCase=\"'TV'\" i18n=\"@@bb-country-item.TV\">Tuvalu</ng-container>\n    <ng-container *ngSwitchCase=\"'UG'\" i18n=\"@@bb-country-item.UG\">Uganda</ng-container>\n    <ng-container *ngSwitchCase=\"'UA'\" i18n=\"@@bb-country-item.UA\">Ukraine</ng-container>\n    <ng-container *ngSwitchCase=\"'AE'\" i18n=\"@@bb-country-item.AE\">United Arab Emirates</ng-container>\n    <ng-container *ngSwitchCase=\"'GB'\" i18n=\"@@bb-country-item.GB\">United Kingdom</ng-container>\n    <ng-container *ngSwitchCase=\"'US'\" i18n=\"@@bb-country-item.US\">United States</ng-container>\n    <ng-container *ngSwitchCase=\"'UY'\" i18n=\"@@bb-country-item.UY\">Uruguay</ng-container>\n    <ng-container *ngSwitchCase=\"'UZ'\" i18n=\"@@bb-country-item.UZ\">Uzbekistan</ng-container>\n    <ng-container *ngSwitchCase=\"'VU'\" i18n=\"@@bb-country-item.VU\">Vanuatu</ng-container>\n    <ng-container *ngSwitchCase=\"'VE'\" i18n=\"@@bb-country-item.VE\">Venezuela, Bolivarian Republic of</ng-container>\n    <ng-container *ngSwitchCase=\"'VN'\" i18n=\"@@bb-country-item.VN\">Viet Nam</ng-container>\n    <ng-container *ngSwitchCase=\"'VG'\" i18n=\"@@bb-country-item.VG\">Virgin Islands, British</ng-container>\n    <ng-container *ngSwitchCase=\"'VI'\" i18n=\"@@bb-country-item.VI\">Virgin Islands, U.S.</ng-container>\n    <ng-container *ngSwitchCase=\"'WF'\" i18n=\"@@bb-country-item.WF\">Wallis and Futuna</ng-container>\n    <ng-container *ngSwitchCase=\"'EH'\" i18n=\"@@bb-country-item.EH\">Western Sahara</ng-container>\n    <ng-container *ngSwitchCase=\"'YE'\" i18n=\"@@bb-country-item.YE\">Yemen</ng-container>\n    <ng-container *ngSwitchCase=\"'ZM'\" i18n=\"@@bb-country-item.ZM\">Zambia</ng-container>\n    <ng-container *ngSwitchCase=\"'ZW'\" i18n=\"@@bb-country-item.ZW\">Zimbabwe</ng-container>\n  </ng-container>\n</ng-template>\n", directives: [{ type: CountryItemCustomizableDirective, selector: "[bbCountryItemCustomizable]" }, { type: i3.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i3.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CountryItemComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-country-item',
                    templateUrl: './country-item.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { code: [{
                type: Input
            }] } });

/**
 * Exports:
 * - CountryItemComponent
 * - CountryItemCustomizableDirective
 */
class CountryItemModule {
}
/** @nocollapse */ CountryItemModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CountryItemModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ CountryItemModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CountryItemModule, declarations: [CountryItemComponent, CountryItemCustomizableDirective], imports: [CommonModule], exports: [CountryItemComponent, CountryItemCustomizableDirective] });
/** @nocollapse */ CountryItemModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CountryItemModule, imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CountryItemModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [CountryItemComponent, CountryItemCustomizableDirective],
                    exports: [CountryItemComponent, CountryItemCustomizableDirective],
                    imports: [CommonModule],
                }]
        }] });

/**
 * This is an extension slot to be used for customizing contact full address data
 *
 * @usageNotes
 *
 * ### Display contact address data
 *
 * ```html
 *  <ng-template bbContactFullAddressCustomizable let-hostRef>
 *   <span class="break-word" data-role="contact-details-full-address">
 *     {{ hostRef.format()
 *     }}<ng-container *ngIf="hostRef.address.country">
 *       <ng-container>, </ng-container>
 *       <bb-country-item [code]="hostRef.address.country"></bb-country-item>
 *     </ng-container>
 *   </span>
 * </ng-template>
 * ```
 * @ngModule ContactFullAddressModule
 */
class ContactFullAddressCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ ContactFullAddressCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactFullAddressCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ ContactFullAddressCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ContactFullAddressCustomizableDirective, selector: "[bbContactFullAddressCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactFullAddressCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbContactFullAddressCustomizable]',
                }]
        }] });

/**
 * The component is for showing contact full address.
 *
 * The following extension slots are available in this component:
 *  - `ContactFullAddressCustomizableDirective`
 *
 * @see ContactFullAddressCustomizableDirective
 * @usageNotes
 *
 * ### Display contact address data
 *
 * ```html
 *     <bb-contact-full-address [address]="hostRef.address"></bb-contact-full-address>
 * ```
 * @ngModule ContactFullAddressModule
 */
class ContactFullAddressComponent {
    constructor() {
        this.hostRef = this;
        this.textContent = '';
    }
    /**
     * @param {Address} address containing all the address fields
     */
    set address(address) {
        this.countryCode = address.country;
        this.textContent = `${addressToString(address)}${!!this.countryCode ? ',' : ''}`;
    }
}
/** @nocollapse */ ContactFullAddressComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactFullAddressComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ ContactFullAddressComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ContactFullAddressComponent, selector: "bb-contact-full-address", inputs: { address: "address" }, ngImport: i0, template: `
    <ng-container bbContactFullAddressCustomizable [bbHostRef]="hostRef"></ng-container>
    <ng-template bbContactFullAddressCustomizable let-hostRef>
      <span class="break-word" data-role="contact-details-full-address">
        {{ hostRef.textContent }}
        <ng-container *ngIf="hostRef.countryCode">
          <bb-country-item [code]="hostRef.countryCode"></bb-country-item>
        </ng-container>
      </span>
    </ng-template>
  `, isInline: true, components: [{ type: CountryItemComponent, selector: "bb-country-item", inputs: ["code"] }], directives: [{ type: ContactFullAddressCustomizableDirective, selector: "[bbContactFullAddressCustomizable]" }, { type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactFullAddressComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-contact-full-address',
                    template: `
    <ng-container bbContactFullAddressCustomizable [bbHostRef]="hostRef"></ng-container>
    <ng-template bbContactFullAddressCustomizable let-hostRef>
      <span class="break-word" data-role="contact-details-full-address">
        {{ hostRef.textContent }}
        <ng-container *ngIf="hostRef.countryCode">
          <bb-country-item [code]="hostRef.countryCode"></bb-country-item>
        </ng-container>
      </span>
    </ng-template>
  `,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { address: [{
                type: Input
            }] } });

/**
 * Exports:
 * - ContactFullAddressComponent
 * - ContactFullAddressCustomizableDirective
 */
class ContactFullAddressModule {
}
/** @nocollapse */ ContactFullAddressModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactFullAddressModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ ContactFullAddressModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactFullAddressModule, declarations: [ContactFullAddressComponent, ContactFullAddressCustomizableDirective], imports: [CommonModule, CountryItemModule], exports: [ContactFullAddressComponent, ContactFullAddressCustomizableDirective] });
/** @nocollapse */ ContactFullAddressModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactFullAddressModule, imports: [[CommonModule, CountryItemModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactFullAddressModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [ContactFullAddressComponent, ContactFullAddressCustomizableDirective],
                    exports: [ContactFullAddressComponent, ContactFullAddressCustomizableDirective],
                    imports: [CommonModule, CountryItemModule],
                }]
        }] });

/**
 * This is an extension slot to be used for customizing account data in card view
 *
 * @usageNotes
 * ### Display contact account data in card form
 *
 * ```html
 *  <ng-template bbAccountCardViewCustomizable let-hostRef>
 *   <div class="bb-stack">
 *     <bb-icon-ui class="bb-stack__item bb-stack__item--align-top bb-select-context__back" name="accounts"></bb-icon-ui>
 *     <div class="bb-stack__item bb-stack__item--fill">
 *       <div class="bb-stack bb-block--md">
 *         <div class="bb-stack__item bb-stack__item--fill">
 *           <bb-header-ui
 *             headingType="h3"
 *             [heading]="hostRef.account.name"
 *             headingClasses="bb-stack__item bb-stack__item--fill break-word"
 *             data-role="contact-details-account-name"
 *           >
 *           </bb-header-ui>
 *           <div class="bb-text-support">{{hostRef.account.alias}}</div>
 *         </div>
 *         <ng-container *ngIf="hostRef.isEditMode">
 *           <button
 *             bbButton
 *             data-role="edit-account-button"
 *             [circle]="true"
 *             size="sm"
 *             color="link"
 *             (click)="hostRef.onEditAccount()"
 *             bbTooltip="Edit account"
 *             triggers="hover focus"
 *             i18n-bbTooltip="@@contact-address-data.contactaddress.card.btn.edit.label">
 *             <bb-icon-ui class="text-dark" name="edit"></bb-icon-ui>
 *           </button>
 *           <button
 *             bbButton
 *             [circle]="true"
 *             size="sm"
 *             color="link"
 *             (click)="hostRef.onDeleteAccount()"
 *             bbTooltip="Delete account"
 *             triggers="hover focus"
 *             i18n-bbTooltip="@@contact-address-data.contactaddress.card.btn.delete.label"
 *             data-role="account-contact-delete">
 *             <bb-icon-ui class="text-dark" name="delete"></bb-icon-ui>
 *           </button>
 *         </ng-container>
 *       </div>
 *       <div>
 *         <div class="bb-block bb-block--md">
 *           <div
 *            *ngIf="hostRef.account.IBAN"
 *             class="bb-inline-stack bb-block--xs bb-block--full-width text-dark"
 *           >
 *             <span
 *               class="bb-inline-stack__item bb-text-bold"
 *               i18n="@@bb-account-card-view.iban.label"
 *              >
 *               IBAN:
 *             </span>
 *             <span
 *               class="bb-inline-stack__item break-word"
 *               data-role="contact-details-account-number"
 *             >
 *               {{hostRef.account.IBAN | bbIban}}
 *           </span>
 *           </div>
 *           <div
 *            *ngIf="hostRef.account.accountNumber"
 *             class="bb-stack bb-block--xs bb-block--full-width text-dark"
 *           >
 *             <span
 *               class="bb-inline-stack__item bb-text-bold"
 *               i18n="@@bb-account-card-view.bban.label"
 *             >
 *               BBAN:
 *             </span>
 *             <span
 *               class="bb-inline-stack__item break-word"
 *               data-role="contact-details-account-number"
 *             >
 *               {{hostRef.account.accountNumber}}
 *             </span>
 *           </div>
 *           <div *ngIf="hostRef.account.accountType" class="bb-inline-stack bb-block--xs bb-block--full-width text-dark">
 *             <span class="bb-inline-stack__item bb-text-bold" i18n="@@bb-account-card-view.account-type.label">
 *               Account type:
 *             </span>
 *             <span class="break-word bb-inline-stack__item">
 *               {{hostRef.account.accountType}}
 *             </span>
 *           </div>
 *           <div
 *            *ngIf="hostRef.account.bankName"
 *             class="bb-inline-stack bb-block--xs bb-block--full-width text-dark"
 *           >
 *             <span
 *               class="bb-inline-stack__item bb-text-bold"
 *               i18n="@@bb-account-card-view.bank-name.label"
 *             >
 *               Bank:
 *             </span>
 *             <span
 *               data-role="contact-details-bank-name"
 *               class="break-word"
 *             >
 *               {{hostRef.account.bankName}}
 *             </span>
 *           </div>
 *           <div
 *            *ngIf="hostRef.account.bankCode"
 *             class="bb-inline-stack bb-block--xs bb-block--full-width text-dark"
 *           >
 *             <span
 *               class="bb-inline-stack__item bb-text-bold"
 *               i18n="@@bb-account-card-view.bank-code.label"
 *             >
 *               Bank branch code:
 *             </span>
 *             <span
 *               data-role="contact-details-bank-code"
 *               class="break-word"
 *             >
 *               {{hostRef.account.bankCode}}
 *             </span>
 *           </div>
 *           <div
 *            *ngIf="hostRef.account.BIC"
 *             class="bb-inline-stack bb-block--xs bb-block--full-width text-dark"
 *           >
 *             <span
 *               class="bb-inline-stack__item bb-text-bold"
 *               i18n="@@bb-account-card-view.bic.label"
 *             >
 *               BIC:
 *             </span>
 *             <span class="break-word">
 *               {{hostRef.account.BIC}}
 *             </span>
 *           </div>
 *         </div>
 *         <div class="bb-block bb-block--xs" *ngIf="hostRef.isValidAddress(hostRef.bankAddress)">
 *           <div class="bb-text-bold" i18n="@@bb-account-card-view.bank.address.label">
 *             Bank branch address
 *           </div>
 *           <div
 *             class="break-word"
 *             data-role="contact-details-account-bank-address"
 *           >
 *             <bb-contact-full-address [address]="hostRef.bankAddress"></bb-contact-full-address>
 *           </div>
 *         </div>
 *         <div class="bb-block bb-block--xs" *ngIf="hostRef.isValidAddress(hostRef.accountHolderAddress)">
 *           <div class="bb-text-bold" i18n="@@bb-account-card-view.accountHolder.address.label">
 *             Account holder's address
 *           </div>
 *           <div
 *             class="break-word"
 *             data-role="contact-details-account-holder-address"
 *           >
 *             <bb-contact-full-address [address]="hostRef.accountHolderAddress"></bb-contact-full-address>
 *           </div>
 *         </div>
 *       </div>
 *     </div>
 *   </div>
 * </ng-template>
 * ```
 * @ngModule AccountCardViewModule
 */
class AccountCardViewCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ AccountCardViewCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountCardViewCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ AccountCardViewCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: AccountCardViewCustomizableDirective, selector: "[bbAccountCardViewCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountCardViewCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbAccountCardViewCustomizable]',
                }]
        }] });

/**
 * The component is for showing contact account in a card view
 *
 * The following extension slots are available in this component:
 *  - `AccountCardViewCustomizableDirective`
 *
 * @see AccountCardViewCustomizableDirective
 * @usageNotes
 *
 * ### Display contact account data in card
 *
 * ```html
 *  <bb-account-card-view
 *   [index]="hostRef.index"
 *   [isEditMode]="true"
 *   [account]="hostRef.account"
 *   [bankAddress]="hostRef.bankAddress"
 *   [accountHolderAddress]="hostRef.accountHolderAddress"
 *   (deleteAccount)="hostRef.onDeleteAccount($event)"
 *   (editAccount)="hostRef.onEditAccount($event)">
 * </bb-account-card-view>
 * ```
 * @ngModule AccountCardViewModule
 */
class AccountCardViewComponent {
    constructor() {
        this.hostRef = this;
        /**
         * Current index of the account Information
         */
        this.index = 0;
        /**
         * Flag that denotes if the account information can be edited. Defaults to `false`
         */
        this.isEditMode = false;
        /**
         * Event emitted when account is editted
         */
        this.editAccount = new EventEmitter();
        /**
         * Event emitted when account is deleted
         */
        this.deleteAccount = new EventEmitter();
    }
    /**
     * OnInit - set up initial values.
     */
    ngOnInit() {
        this.bankAddress = this.bankAddress || addressFromBank(this.account);
        this.accountHolderAddress = this.accountHolderAddress || addressFromAccountHolder(this.account);
    }
    /**
     * Emits the edit Account event
     */
    onEditAccount() {
        this.editAccount.emit(this.index);
    }
    /**
     * Emits the delete account event
     */
    onDeleteAccount() {
        this.deleteAccount.emit(this.index);
    }
    /**
     * Verifies if the address is valid.
     *
     * @param {Address} address object
     * @returns {boolean} valid or not.
     */
    isValidAddress(address) {
        return isObjectTruthy(address);
    }
}
/** @nocollapse */ AccountCardViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountCardViewComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ AccountCardViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AccountCardViewComponent, selector: "bb-account-card-view", inputs: { index: "index", account: "account", isEditMode: "isEditMode", bankAddress: "bankAddress", accountHolderAddress: "accountHolderAddress" }, outputs: { editAccount: "editAccount", deleteAccount: "deleteAccount" }, ngImport: i0, template: "<ng-container bbAccountCardViewCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n<ng-template bbAccountCardViewCustomizable let-hostRef>\n  <div class=\"bb-stack\">\n    <bb-icon-ui class=\"bb-stack__item bb-stack__item--align-top mt-1\" name=\"accounts\"></bb-icon-ui>\n    <div class=\"bb-stack__item bb-stack__item--fill\">\n      <div class=\"bb-stack bb-block--md\">\n        <div class=\"bb-stack__item bb-stack__item--fill\">\n          <bb-header-ui\n            headingType=\"h3\"\n            [heading]=\"hostRef.account.name\"\n            headingClasses=\"bb-stack__item bb-stack__item--fill break-word\"\n            data-role=\"contact-details-account-name\"\n          >\n          </bb-header-ui>\n          <div class=\"bb-text-support\">{{hostRef.account.alias}}</div>\n        </div>\n        <ng-container *ngIf=\"hostRef.isEditMode\">\n          <button\n            bbButton\n            data-role=\"edit-account-button\"\n            [circle]=\"true\"\n            size=\"sm\"\n            color=\"link\"\n            (click)=\"hostRef.onEditAccount()\"\n            bbTooltip=\"Edit account\"\n            triggers=\"hover focus\"\n            i18n-bbTooltip=\"@@contact-address-data.contactaddress.card.btn.edit.label\"\n          >\n            <bb-icon-ui class=\"text-dark\" name=\"edit\"></bb-icon-ui>\n          </button>\n          <button\n            bbButton\n            [circle]=\"true\"\n            size=\"sm\"\n            color=\"link\"\n            (click)=\"hostRef.onDeleteAccount()\"\n            bbTooltip=\"Delete account\"\n            triggers=\"hover focus\"\n            i18n-bbTooltip=\"@@contact-address-data.contactaddress.card.btn.delete.label\"\n            data-role=\"account-contact-delete\"\n          >\n            <bb-icon-ui class=\"text-dark\" name=\"delete\"></bb-icon-ui>\n          </button>\n        </ng-container>\n      </div>\n      <dl>\n        <div class=\"bb-block bb-block--md\">\n          <div *ngIf=\"hostRef.account.IBAN\" class=\"bb-inline-stack bb-block--xs bb-block--full-width text-dark\">\n            <dt class=\"bb-inline-stack__item bb-text-bold\" i18n=\"@@bb-account-card-view.iban.label\">IBAN:</dt>\n            <dd class=\"bb-inline-stack__item break-word bb-block--no-margin\" data-role=\"contact-details-account-number\">\n              {{hostRef.account.IBAN | bbIban}}\n            </dd>\n          </div>\n          <div *ngIf=\"hostRef.account.accountNumber\" class=\"bb-stack bb-block--xs bb-block--full-width text-dark\">\n            <dt class=\"bb-inline-stack__item bb-text-bold\" i18n=\"@@bb-account-card-view.bban.label\">BBAN:</dt>\n            <dd class=\"bb-inline-stack__item break-word bb-block--no-margin\" data-role=\"contact-details-account-number\">\n              {{hostRef.account.accountNumber}}\n            </dd>\n          </div>\n          <div *ngIf=\"hostRef.account.accountType\" class=\"bb-inline-stack bb-block--xs bb-block--full-width text-dark\">\n            <dt class=\"bb-inline-stack__item bb-text-bold\" i18n=\"@@bb-account-card-view.account-type.label\">\n              Account type:\n            </dt>\n            <dd class=\"break-word bb-inline-stack__item bb-block--no-margin\">{{hostRef.account.accountType}}</dd>\n          </div>\n          <div *ngIf=\"hostRef.account.bankName\" class=\"bb-inline-stack bb-block--xs bb-block--full-width text-dark\">\n            <dt class=\"bb-inline-stack__item bb-text-bold\" i18n=\"@@bb-account-card-view.bank-name.label\">Bank:</dt>\n            <dd data-role=\"contact-details-bank-name\" class=\"bb-inline-stack__item break-word bb-block--no-margin\">\n              {{hostRef.account.bankName}}\n            </dd>\n          </div>\n          <div *ngIf=\"hostRef.account.bankCode\" class=\"bb-inline-stack bb-block--xs bb-block--full-width text-dark\">\n            <dt class=\"bb-inline-stack__item bb-text-bold\" i18n=\"@@bb-account-card-view.bank-code.label\">\n              Bank branch code:\n            </dt>\n            <dd data-role=\"contact-details-bank-code\" class=\"bb-inline-stack__item break-word bb-block--no-margin\">\n              {{hostRef.account.bankCode}}\n            </dd>\n          </div>\n          <div *ngIf=\"hostRef.account.BIC\" class=\"bb-inline-stack bb-block--xs bb-block--full-width text-dark\">\n            <dt class=\"bb-inline-stack__item bb-text-bold\" i18n=\"@@bb-account-card-view.bic.label\">BIC:</dt>\n            <dd class=\"bb-inline-stack__item break-word bb-block--no-margin\">{{hostRef.account.BIC}}</dd>\n          </div>\n        </div>\n        <div class=\"bb-block bb-block--xs\" *ngIf=\"hostRef.isValidAddress(hostRef.bankAddress)\">\n          <dt class=\"bb-text-bold\" i18n=\"@@bb-account-card-view.bank.address.label\">Bank branch address</dt>\n          <dd class=\"break-word\" data-role=\"contact-details-account-bank-address\">\n            <bb-contact-full-address [address]=\"hostRef.bankAddress\"></bb-contact-full-address>\n          </dd>\n        </div>\n        <div class=\"bb-block bb-block--xs\" *ngIf=\"hostRef.isValidAddress(hostRef.accountHolderAddress)\">\n          <dt class=\"bb-text-bold\" i18n=\"@@bb-account-card-view.accountHolder.address.label\">\n            Account holder's address\n          </dt>\n          <dd class=\"break-word\" data-role=\"contact-details-account-holder-address\">\n            <bb-contact-full-address [address]=\"hostRef.accountHolderAddress\"></bb-contact-full-address>\n          </dd>\n        </div>\n      </dl>\n    </div>\n  </div>\n</ng-template>\n", components: [{ type: i2$1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i2$2.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: ContactFullAddressComponent, selector: "bb-contact-full-address", inputs: ["address"] }], directives: [{ type: AccountCardViewCustomizableDirective, selector: "[bbAccountCardViewCustomizable]" }, { type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i7.TooltipDirective, selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }], pipes: { "bbIban": i8.BbIbanPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountCardViewComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-account-card-view',
                    templateUrl: './account-card-view.component.html',
                }]
        }], propDecorators: { index: [{
                type: Input
            }], account: [{
                type: Input
            }], isEditMode: [{
                type: Input
            }], editAccount: [{
                type: Output
            }], deleteAccount: [{
                type: Output
            }], bankAddress: [{
                type: Input
            }], accountHolderAddress: [{
                type: Input
            }] } });

/**
 * Exports:
 * - AccountCardViewComponent
 * - AccountCardViewCustomizableDirective
 */
class AccountCardViewModule {
}
/** @nocollapse */ AccountCardViewModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountCardViewModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ AccountCardViewModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountCardViewModule, declarations: [AccountCardViewComponent, AccountCardViewCustomizableDirective], imports: [IconModule,
        HeaderModule,
        ButtonModule,
        BbIbanPipeModule,
        ContactFullAddressModule,
        CommonModule,
        TooltipModule], exports: [AccountCardViewComponent, AccountCardViewCustomizableDirective] });
/** @nocollapse */ AccountCardViewModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountCardViewModule, imports: [[
            IconModule,
            HeaderModule,
            ButtonModule,
            BbIbanPipeModule,
            ContactFullAddressModule,
            CommonModule,
            TooltipModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountCardViewModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [AccountCardViewComponent, AccountCardViewCustomizableDirective],
                    exports: [AccountCardViewComponent, AccountCardViewCustomizableDirective],
                    imports: [
                        IconModule,
                        HeaderModule,
                        ButtonModule,
                        BbIbanPipeModule,
                        ContactFullAddressModule,
                        CommonModule,
                        TooltipModule,
                    ],
                }]
        }] });

class CamelCasePipe {
    transform(value) {
        if (typeof value === 'string')
            return toCamelCase(value);
        return value;
    }
}
/** @nocollapse */ CamelCasePipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CamelCasePipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
/** @nocollapse */ CamelCasePipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CamelCasePipe, name: "camelcase" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CamelCasePipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'camelcase',
                }]
        }] });

/**
 * The component is for showing contact  address data.
 *
 *
 * @usageNotes
 *
 * ### Display contact address data
 *
 * ```html
 *    <bb-contact-address-data
 *   [highlight]="hostRef.highlight"
 *   [isAddAddress]="hostRef.isAddAccountHolderAddress"
 *   [addressType]="'accountHolder'"
 *   [canCopyAddress]="hostRef.canCopyAddress"
 *   [isContactAddressCopied]="hostRef.isContactAddressCopied"
 *   [viewType]="hostRef.accountHolderAddressViewType"
 *   [address]="hostRef.accountHolderAddress"
 *   (add)="hostRef.onAccountHolderAddressAdd($event)"
 *   (edit)="hostRef.onAccountHolderAddressEdit()"
 *   (discard)="hostRef.onAccountHolderAddressDiscard($event)"
 *   (delete)="hostRef.onAccountHolderAddressDelete($event)"
 *   (submit)="hostRef.onAddressSubmit($event, hostRef.addressType.ACCOUNTHOLDER)"
 *   (contactAddressCopy)="hostRef.onAddressCopy($event)"
 *   (addressEditAfterCopy)="hostRef.onAddressEditAfterCopy()">
 * </bb-contact-address-data>
 * ```
 * @ngModule ContactAddressDataModule
 */
class ContactAddressDataComponent {
    constructor(contactCountryListService) {
        this.contactCountryListService = contactCountryListService;
        this.hostRef = this;
        this.copyContactAddressInputName = InputName.COPY_CONTACT_ADDRESS;
        /**
         * Instance that holds the address details
         */
        this.address = {};
        /**
         * Type of addresses. Possible values `CONTACT`, `BANK`, `ACCOUNTHOLDER`. Defaults to `CONTACT`
         */
        this.addressType = AddressType.CONTACT;
        /**
         * Flag that denotes if address can be copied. Default value is `false`
         */
        this.canCopyAddress = false;
        /**
         * Flag that denoted if contact address is copied
         */
        this.isContactAddressCopied = false;
        /**
         * If enabled it will apply highlight classes to this component.
         * By default is `true`.
         */
        this.highlight = true;
        /**
         * Event emitted when address is submitted
         */
        this.submit = new EventEmitter();
        /**
         * Event emitted when address is discarded
         */
        this.discard = new EventEmitter();
        /**
         * Event emitted when address is deleted
         */
        this.delete = new EventEmitter();
        /**
         * Event emitted when address is editted
         */
        this.edit = new EventEmitter();
        /**
         * Event emitted when contact address has to be copied
         */
        this.contactAddressCopy = new EventEmitter();
        /**
         * Event emitted when add address action is triggered
         */
        this.add = new EventEmitter();
        /**
         * Event emitted when address is edited after it has been copied from contact address
         */
        this.addressEditAfterCopy = new EventEmitter();
        this.needsToRefocus = false;
        this.countriesList$ = of([]);
    }
    ngOnInit() {
        if (!this.viewType) {
            this.viewType = ViewType.FORM;
        }
        this.fieldGroupName = this.getFieldGroupName();
        this.address.country = this.address.country || '';
        if (this.addressType === AddressType.BANK) {
            this.countriesList$ = this.contactCountryListService.getFromExternalSource().pipe(shareReplay());
        }
        else {
            this.countriesList$ = this.contactCountryListService.getFromLocalSource();
        }
    }
    ngAfterViewChecked() {
        var _a, _b;
        if (this.needsToRefocus) {
            (_b = (_a = this.firstTabElement) === null || _a === void 0 ? void 0 : _a.inputEl) === null || _b === void 0 ? void 0 : _b.nativeElement.focus();
            this.needsToRefocus = false;
        }
    }
    /**
     *
     * @returns {string} Name of the addressType.
     */
    getFieldGroupName() {
        return `${InputGroupName.ADDRESS}[${this.addressType}]`;
    }
    /**
     * Emits the add address event
     *
     * @param {boolean} isAddAddress whether address should be added
     */
    addAddress(isAddAddress) {
        this.add.emit(isAddAddress);
        this.needsToRefocus = true;
    }
    /**
     * Emits the edit address event
     */
    editAddress() {
        this.edit.emit(this.address);
        this.needsToRefocus = true;
    }
    /**
     * Emits the discard address event
     */
    discardAddress() {
        this.discard.emit(this.fieldGroupName);
    }
    /**
     * Emits the delete address event
     */
    deleteAddress() {
        this.delete.emit(this.fieldGroupName);
    }
    /**
     *  Emits the submit address event if valid.
     */
    submitAddress() {
        if (isObjectTruthy(this.address)) {
            this.submit.emit(this.fieldGroupName);
        }
        else {
            this.deleteAddress();
        }
    }
    /**
     * Emits the copy address event
     */
    copyContactAddress() {
        this.contactAddressCopy.emit(this.isContactAddressCopied);
    }
    /**
     * Emits the addressEditAfterCopy event
     */
    onAddressEdit() {
        if (this.addressType === AddressType.ACCOUNTHOLDER && this.canCopyAddress) {
            this.addressEditAfterCopy.emit();
        }
    }
}
/** @nocollapse */ ContactAddressDataComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactAddressDataComponent, deps: [{ token: ContactCountryListService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ ContactAddressDataComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ContactAddressDataComponent, selector: "bb-contact-address-data", inputs: { isAddAddress: "isAddAddress", address: "address", addressType: "addressType", canCopyAddress: "canCopyAddress", isContactAddressCopied: "isContactAddressCopied", viewType: "viewType", highlight: "highlight" }, outputs: { submit: "submit", discard: "discard", delete: "delete", edit: "edit", contactAddressCopy: "contactAddressCopy", add: "add", addressEditAfterCopy: "addressEditAfterCopy" }, viewQueries: [{ propertyName: "firstTabElement", first: true, predicate: ["addressLine1"], descendants: true }], ngImport: i0, template: "<div class=\"bb-block bb-block--md\" *ngIf=\"!hostRef.isAddAddress\">\n  <button\n    bbButton\n    color=\"link\"\n    (click)=\"hostRef.addAddress(true)\"\n    [attr.data-role]=\"'contact-add-address' + hostRef.addressType\"\n  >\n    <bb-icon-ui class=\"alert-icon\" name=\"control-point\"> </bb-icon-ui>\n    <ng-container i18n=\"@@contact-address-data.add.address.label\">\n      Add {hostRef.addressType, select, bank {bank} accountHolder {account holder's} other {contact}} address\n    </ng-container>\n  </button>\n</div>\n\n<div\n  class=\"bb-block bb-block--lg card card-section\"\n  *ngIf=\"hostRef.viewType === 'CARD'\"\n  [ngClass]=\"{ 'card-section--highlight': hostRef.highlight }\"\n  [attr.data-role]=\"'contact-card-address' + hostRef.addressType\"\n>\n  <div class=\"bb-stack bb-block bb-block--sm\">\n    <div class=\"bb-stack__item bb-text-bold\" i18n=\"@@contact-address-data.contactaddress.card.label\">\n      {hostRef.addressType, select, bank {Bank} accountHolder {Account holder's} other {Contact}} address\n    </div>\n    <div class=\"bb-stack__item bb-stack__item--push-right\">\n      <button\n        bbButton\n        [attr.data-role]=\"'contact-edit-address' + hostRef.addressType\"\n        [circle]=\"true\"\n        size=\"sm\"\n        color=\"link\"\n        (click)=\"hostRef.editAddress()\"\n        bbTooltip=\"Edit address\"\n        triggers=\"hover focus\"\n        i18n-bbTooltip=\"@@contact-address-data.contactaddress.card.buttons.edit.label\"\n      >\n        <bb-icon-ui color=\"dark\" name=\"edit\"></bb-icon-ui>\n      </button>\n      <button\n        bbButton\n        [attr.data-role]=\"'contact-delete-address' + hostRef.addressType\"\n        [circle]=\"true\"\n        size=\"sm\"\n        color=\"link\"\n        (click)=\"hostRef.deleteAddress()\"\n        bbTooltip=\"Delete address\"\n        triggers=\"hover focus\"\n        i18n-bbTooltip=\"@@contact-address-data.contactaddress.card.buttons.delete.label\"\n      >\n        <bb-icon-ui color=\"dark\" name=\"delete\"></bb-icon-ui>\n      </button>\n    </div>\n  </div>\n  <bb-contact-full-address [address]=\"hostRef.address\"></bb-contact-full-address>\n</div>\n\n<div\n  class=\"bb-stack bb-block bb-block--lg card card-section\"\n  *ngIf=\"hostRef.isAddAddress\"\n  [ngClass]=\"{\n    'd-none': hostRef.viewType === 'CARD',\n    'card-section--highlight': hostRef.highlight\n  }\"\n>\n  <fieldset [ngModelGroup]=\"hostRef.fieldGroupName\" (input)=\"hostRef.onAddressEdit()\">\n    <legend class=\"sr-only\" i18n=\"@@contact-address-data.addressGroup.title\">Address details</legend>\n    <div class=\"bb-block bb-block--sm\">\n      <div class=\"bb-stack bb-stack--align-top\">\n        <div class=\"bb-block bb-block--lg bb-stack__item bb-select-context__back\" data-role=\"create-contact-form\">\n          <span class=\"d-none\" aria-hidden=\"true\" i18n=\"@@contact-address-data.contactaddress.label\" #heading>\n            {hostRef.addressType, select, bank {Bank} accountHolder {Account holder's} other {Contact}} address\n          </span>\n          <bb-header-ui\n            id=\"headerTtitle\"\n            headingType=\"h4\"\n            [heading]=\"heading.textContent\"\n            data-role=\"contact-address-label\"\n          >\n          </bb-header-ui>\n        </div>\n      </div>\n      <bb-input-text-ui\n        #addressLine1\n        label=\"Primary address line, street name and number\"\n        i18n-label=\"@@contact-address-data.addressLine1.info-label\"\n        [(ngModel)]=\"hostRef.address.addressLine1\"\n        data-role=\"addressLine1\"\n        [name]=\"(hostRef.addressType + 'AddressLine1') | camelcase\"\n        [maxLength]=\"70\"\n      >\n      </bb-input-text-ui>\n    </div>\n    <div class=\"bb-block bb-block--md\">\n      <bb-input-text-ui\n        label=\"Additional address line 2\"\n        i18n-label=\"@@contact-address-data.contactaddress2.info-label\"\n        [(ngModel)]=\"hostRef.address.addressLine2\"\n        data-role=\"addressLine2\"\n        [name]=\"(hostRef.addressType + 'AddressLine2') | camelcase\"\n        [maxLength]=\"70\"\n      >\n      </bb-input-text-ui>\n    </div>\n    <div class=\"bb-block bb-block--md\">\n      <bb-input-text-ui\n        label=\"Additional address line 3\"\n        i18n-label=\"@@contact-address-data.streetName.info-label\"\n        [(ngModel)]=\"hostRef.address.streetName\"\n        data-role=\"addressLine3\"\n        [name]=\"(hostRef.addressType + 'StreetName') | camelcase\"\n        [maxLength]=\"70\"\n      >\n      </bb-input-text-ui>\n    </div>\n    <div class=\"row\">\n      <div class=\"bb-block bb-block--lg col-sm-5 col-xs-12\">\n        <bb-input-text-ui\n          label=\"Post code / ZIP\"\n          i18n-label=\"@@contact-address-data.contactPostCode.label\"\n          [(ngModel)]=\"hostRef.address.postCode\"\n          data-role=\"postCode\"\n          [name]=\"(hostRef.addressType + 'PostCode') | camelcase\"\n          [maxLength]=\"16\"\n        >\n        </bb-input-text-ui>\n      </div>\n      <div class=\"bb-block bb-block--lg col-sm-7 col-xs-12\">\n        <bb-input-text-ui\n          label=\"City or town\"\n          i18n-label=\"@@contact-address-data.town.label\"\n          [(ngModel)]=\"hostRef.address.town\"\n          data-role=\"town\"\n          [name]=\"(hostRef.addressType + 'Town') | camelcase\"\n          [maxLength]=\"35\"\n        >\n        </bb-input-text-ui>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"bb-block bb-block--lg col-sm-7 col-xs-12\">\n        <bb-input-text-ui\n          label=\"State or area\"\n          i18n-label=\"@@contact-address-data.countrySubDivision.label\"\n          [(ngModel)]=\"hostRef.address.countrySubDivision\"\n          data-role=\"stateOrArea\"\n          [name]=\"(hostRef.addressType + 'CountrySubDivision') | camelcase\"\n          [maxLength]=\"35\"\n        >\n        </bb-input-text-ui>\n      </div>\n      <div class=\"bb-block bb-block--lg col-sm-5 col-xs-12\">\n        <bb-dropdown-single-select-ui\n          label=\"Country\"\n          i18n-label=\"@@contact-address-data.contactCountry.label\"\n          (change)=\"hostRef.onAddressEdit()\"\n          [(ngModel)]=\"hostRef.address.country\"\n          data-role=\"contactCountry\"\n          [name]=\"(hostRef.addressType + 'Country') | camelcase\"\n          placeholder=\"Select country\"\n          i18n-placeholder=\"@@bb-create-contact.dropdown.country.placeholder\"\n        >\n          <ng-container *ngFor=\"let country of countriesList$ | async\">\n            <span class=\"d-none\" aria-hidden=\"true\" #countryItem>\n              <bb-country-item [code]=\"country\"></bb-country-item>\n            </span>\n            <bb-dropdown-single-select-option-ui [value]=\"country\" [label]=\"countryItem.textContent\">\n            </bb-dropdown-single-select-option-ui>\n          </ng-container>\n        </bb-dropdown-single-select-ui>\n      </div>\n    </div>\n\n    <div class=\"row bb-block bb-block--lg\" *ngIf=\"hostRef.canCopyAddress && hostRef.addressType === 'accountHolder'\">\n      <div class=\"col-12\">\n        <bb-input-checkbox-ui\n          label=\"Use contact address as account holder's address\"\n          i18n-label=\"@@contact-address-data.copy.contact.address.label\"\n          data-role=\"copy-contact-address-checkbox\"\n          [name]=\"copyContactAddressInputName\"\n          (change)=\"hostRef.copyContactAddress()\"\n          [(ngModel)]=\"hostRef.isContactAddressCopied\"\n        >\n        </bb-input-checkbox-ui>\n      </div>\n    </div>\n\n    <div class=\"bb-button-bar bb-button-bar--reverse\">\n      <button\n        bbButton\n        class=\"bb-button-bar__button\"\n        color=\"primary\"\n        (click)=\"hostRef.submitAddress()\"\n        data-role=\"contact-confirm-address\"\n      >\n        <ng-container i18n=\"@@contact-create.modal.btn.addAddress\"> Confirm address </ng-container>\n      </button>\n      <button\n        bbButton\n        class=\"bb-button-bar__button\"\n        color=\"secondary\"\n        (click)=\"hostRef.discardAddress()\"\n        data-role=\"contact-cancel-address\"\n      >\n        <ng-container i18n=\"@@contact-create.modal.btn.discard\"> Discard </ng-container>\n      </button>\n    </div>\n  </fieldset>\n</div>\n", components: [{ type: i2$1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: ContactFullAddressComponent, selector: "bb-contact-full-address", inputs: ["address"] }, { type: i2$2.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i2$3.InputTextComponent, selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i6.DropdownSingleSelectComponent, selector: "bb-dropdown-single-select-ui", inputs: ["placeholder", "defaultOptionAsPlaceholder", "options", "displayAttributePath", "iconName", "compareWithFn"] }, { type: CountryItemComponent, selector: "bb-country-item", inputs: ["code"] }, { type: i6.DropdownSingleSelectOptionComponent, selector: "bb-dropdown-single-select-option-ui", inputs: ["value", "label"] }, { type: i8$1.InputCheckboxComponent, selector: "bb-input-checkbox-ui", inputs: ["indeterminate"], outputs: ["indeterminateChange"] }], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i3.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i7.TooltipDirective, selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i1$1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$1.NgModelGroup, selector: "[ngModelGroup]", inputs: ["ngModelGroup"], exportAs: ["ngModelGroup"] }, { type: i1$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "camelcase": CamelCasePipe, "async": i3.AsyncPipe }, viewProviders: [{ provide: ControlContainer, useExisting: NgModelGroup }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactAddressDataComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-contact-address-data',
                    templateUrl: './contact-address-data.component.html',
                    viewProviders: [{ provide: ControlContainer, useExisting: NgModelGroup }],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: ContactCountryListService }]; }, propDecorators: { isAddAddress: [{
                type: Input
            }], address: [{
                type: Input
            }], addressType: [{
                type: Input
            }], canCopyAddress: [{
                type: Input
            }], isContactAddressCopied: [{
                type: Input
            }], viewType: [{
                type: Input
            }], highlight: [{
                type: Input
            }], submit: [{
                type: Output
            }], discard: [{
                type: Output
            }], delete: [{
                type: Output
            }], edit: [{
                type: Output
            }], contactAddressCopy: [{
                type: Output
            }], add: [{
                type: Output
            }], addressEditAfterCopy: [{
                type: Output
            }], firstTabElement: [{
                type: ViewChild,
                args: ['addressLine1']
            }] } });

/**
 * The component is for showing contact  account data.
 *
 *
 * @usageNotes
 *
 * ### Display contact account data
 *
 * ```html
 *  <bb-contact-account-data
 *   [highlight]="false"
 *   [index]="index"
 *   [account]="account.data"
 *   [accountView]="account.viewType"
 *   [bankAddressViewType]="account.bankAddressViewType"
 *   [accountHolderAddressViewType]="account.accountHolderAddressViewType"
 *   [isAddBankAddress]="account.isAddBankAddress"
 *   [canCopyAddress]="hostRef.canCopyAddress()"
 *   [isContactAddressCopied]="account.isContactAddressCopied"
 *   [bankAddress]="account.bankAddress"
 *   [accountHolderAddress]="account.accountHolderAddress"
 *   [isAddAccountHolderAddress]="account.isAddAccountHolderAddress"
 *   [isAccountTypeRequired]="hostRef.isAccountTypeRequired"
 *   (bankAddressAdd)="hostRef.addBankAddress($event, index)"
 *   (accountHolderAddressAdd)="hostRef.addAccountHolderAddress($event, index)"
 *   (bankAddressViewChange)="hostRef.changeBankAddressView($event, index)"
 *   (accountHolderAddressViewChange)="hostRef.changeAccountHolderAddressView($event, index)"
 *   (editAccount)="hostRef.editAccount($event, formRef)"
 *   (deleteAccount)="hostRef.deleteAccount($event)"
 *   (contactAddressCopy)="hostRef.copyAddress($event, index)"
 *   (addressEditAfterCopy)="hostRef.onAddressEditAfterCopy(index)">
 * </bb-contact-account-data>
 * ```
 * @ngModule ContactAccountDataModule
 */
class ContactAccountDataComponent {
    constructor(ctrlContainer, accountTypeList) {
        this.ctrlContainer = ctrlContainer;
        this.accountTypeList = accountTypeList;
        this.hostRef = this;
        this.addressType = AddressType;
        this.ibanMask = IbanMask;
        /**
         * Current index of the account Information
         */
        this.index = 0;
        /**
         * Current view type of the account. Possible values `FORM`| `CARD`. Defaults to `FORM`
         */
        this.accountView = ViewType.FORM;
        /**
         * Event emitted when the account is edited, i.e, switch from `CARD` view to `FORM` View
         */
        this.editAccount = new EventEmitter();
        /**
         * View type of the bank address
         */
        this.bankAddressViewType = ViewType.FORM;
        /**
         * View type of the account holder address
         */
        this.accountHolderAddressViewType = ViewType.FORM;
        /**
         * Flag that denotes if bank address should be added
         */
        this.isAddBankAddress = false;
        /**
         * Flag that denotes if address can be copied. Default value is `false`
         */
        this.canCopyAddress = false;
        /**
         * The bank address details
         */
        this.bankAddress = {};
        /**
         * The account holder address details
         */
        this.accountHolderAddress = {};
        /**
         * Flag that denotes if account holder address should be added
         */
        this.isAddAccountHolderAddress = false;
        /**
         * Flag that denotes if contact address is copied
         */
        this.isContactAddressCopied = false;
        /**
         * If enabled it will apply highlight classes to this component.
         * By default is `true`.
         */
        this.highlight = true;
        /**
         * If enabled the accountType is mandatory field.
         */
        this.isAccountTypeRequired = false;
        /**
         * Event emitted when add bank address flag changes
         */
        this.bankAddressAdd = new EventEmitter();
        /**
         * Event emitted when add account holder address flag changes
         */
        this.accountHolderAddressAdd = new EventEmitter();
        /**
         * Event emitted when bank address view is changed
         */
        this.bankAddressViewChange = new EventEmitter();
        /**
         * Event emitted when accountHolder address view is changed
         */
        this.accountHolderAddressViewChange = new EventEmitter();
        /**
         * Event emitted when contact address has to be copied
         */
        this.contactAddressCopy = new EventEmitter();
        /**
         * Event emitted when the account is deleted
         */
        this.deleteAccount = new EventEmitter();
        /**
         * Event emitted when address is edited after it has been copied from contact address
         */
        this.addressEditAfterCopy = new EventEmitter();
    }
    ngOnInit() {
        this.accountInputGroupName = this.getName();
        if (Object.keys(this.bankAddress).length) {
            this.originalBankAddress = Object.assign({}, this.bankAddress);
        }
        if (Object.keys(this.accountHolderAddress).length) {
            this.originalAccountHolderAddress = Object.assign({}, this.accountHolderAddress);
        }
    }
    ngOnChanges(changes) {
        if (changes['index']) {
            this.accountInputGroupName = this.getName();
        }
    }
    /**
     *
     * @returns {string} Name of the current index of contact account.
     */
    getName() {
        return `${InputGroupName.ACCOUNT}[${this.index}]`;
    }
    /**
     * Emits the delete event
     *
     * @param {?number} accountIndex - account Index
     */
    onDeleteAccount(accountIndex) {
        this.deleteAccount.emit(accountIndex || this.index);
    }
    /**
     * Emits the contactAddressCopy event
     *
     * @param {boolean} isCopy - if copy is allowed.
     */
    onAddressCopy(isCopy) {
        this.contactAddressCopy.emit(isCopy);
    }
    /**
     * Emits the edit account method
     *
     * @param {?number} accountIndex index of an account
     */
    onEditAccount(accountIndex) {
        this.editAccount.emit(accountIndex || this.index);
    }
    /**
     * Emits the bankaddress add event
     *
     * @param {boolean} isAddAddress whether new address should be added
     */
    onBankAddressAdd(isAddAddress) {
        this.bankAddressAdd.emit(isAddAddress);
    }
    /**
     * Emits Bank address edit event
     */
    onBankAddressEdit() {
        this.bankAddressViewChange.emit(ViewType.FORM);
    }
    /**
     * Emits the bankaddress delete event with index
     *
     * @param {string} controlName name of a form control
     */
    onBankAddressDelete(controlName) {
        this.originalBankAddress = undefined;
        this.bankAddressAdd.emit(false);
        this.resetAddress(controlName);
        this.bankAddressViewChange.emit(ViewType.FORM);
    }
    /**
     * Emits appropriate event based on validity.
     *
     * @param {string} controlName name of a form control
     * @param {AddressType} addressType enumerated value
     */
    onAddressSubmit(controlName, addressType) {
        const address = this.getFormControl(controlName);
        address.markAllAsTouched();
        address.updateValueAndValidity();
        if (address.valid) {
            if (addressType === this.addressType.BANK) {
                this.originalBankAddress = Object.assign({}, addressFromBank(address.value));
                this.bankAddressViewChange.emit(ViewType.CARD);
            }
            else {
                this.originalAccountHolderAddress = Object.assign({}, addressFromAccountHolder(address.value));
                this.accountHolderAddressViewChange.emit(ViewType.CARD);
            }
        }
    }
    /**
     * Emits appropriate view ehn discarded.
     *
     * @param {string} controlName name of a form control
     */
    onBankAddressDiscard(controlName) {
        if (this.originalBankAddress) {
            this.bankAddress = Object.assign({}, this.originalBankAddress);
            this.bankAddressViewChange.emit(ViewType.CARD);
        }
        else {
            this.onBankAddressDelete(controlName);
        }
    }
    /**
     * Resets form control.
     *
     * @param {string} controlName name of a form control
     */
    resetAddress(controlName) {
        this.getFormControl(controlName).reset();
    }
    /**
     * Checks if the address is valid.
     *
     * @param {Address} address address object
     * @returns {boolean} whether address is valid
     */
    isValidAddress(address) {
        return isObjectTruthy(address);
    }
    /**
     * Returns the form control of given control name,
     *
     * @param {string} controlName name of a form control
     * @returns {AbstractControl} form control object
     */
    getFormControl(controlName) {
        const accountInputGroup = this.ctrlContainer.controls[this.accountInputGroupName];
        if (!accountInputGroup) {
            return new FormControl();
        }
        return accountInputGroup.controls[controlName];
    }
    /**
     * Emits event when account holder address is added
     *
     * @param {boolean} isAddAddress whether address should be added
     */
    onAccountHolderAddressAdd(isAddAddress) {
        this.accountHolderAddressAdd.emit(isAddAddress);
    }
    /**
     * Emits event when account holder address is edited.
     */
    onAccountHolderAddressEdit() {
        this.accountHolderAddressViewChange.emit(ViewType.FORM);
    }
    /**
     *Emits event when account holder address is deleted.
     *
     * @param {string} controlName name of a form control
     */
    onAccountHolderAddressDelete(controlName) {
        this.originalAccountHolderAddress = undefined;
        this.accountHolderAddressAdd.emit(false);
        this.resetAddress(controlName);
        this.accountHolderAddressViewChange.emit(ViewType.FORM);
    }
    /**
     * Emits account
     *
     * @param {string} controlName name of a form control
     */
    onAccountHolderAddressDiscard(controlName) {
        if (this.originalAccountHolderAddress) {
            this.accountHolderAddress = Object.assign({}, this.originalAccountHolderAddress);
            this.accountHolderAddressViewChange.emit(ViewType.CARD);
        }
        else {
            this.onAccountHolderAddressDelete(controlName);
        }
    }
    /**
     * Emits address after edit copy event
     */
    onAddressEditAfterCopy() {
        this.addressEditAfterCopy.emit();
    }
}
/** @nocollapse */ ContactAccountDataComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactAccountDataComponent, deps: [{ token: i1$1.ControlContainer }, { token: BB_CONTACT_BANK_ACCOUNT_TYPES_LIST }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ ContactAccountDataComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ContactAccountDataComponent, selector: "bb-contact-account-data", inputs: { index: "index", account: "account", accountView: "accountView", bankAddressViewType: "bankAddressViewType", accountHolderAddressViewType: "accountHolderAddressViewType", isAddBankAddress: "isAddBankAddress", canCopyAddress: "canCopyAddress", bankAddress: "bankAddress", accountHolderAddress: "accountHolderAddress", isAddAccountHolderAddress: "isAddAccountHolderAddress", isContactAddressCopied: "isContactAddressCopied", forceChangeDetection: "forceChangeDetection", highlight: "highlight", isAccountTypeRequired: "isAccountTypeRequired" }, outputs: { editAccount: "editAccount", bankAddressAdd: "bankAddressAdd", accountHolderAddressAdd: "accountHolderAddressAdd", bankAddressViewChange: "bankAddressViewChange", accountHolderAddressViewChange: "accountHolderAddressViewChange", contactAddressCopy: "contactAddressCopy", deleteAccount: "deleteAccount", addressEditAfterCopy: "addressEditAfterCopy" }, usesOnChanges: true, ngImport: i0, template: "<div [ngClass]=\"{'d-none': hostRef.accountView ==='CARD'}\">\n  <fieldset [ngModelGroup]=\"hostRef.accountInputGroupName\">\n    <legend class=\"sr-only\" i18n=\"@@contact-account-data.accountGroup.title\">Account details</legend>\n    <div class=\"row\">\n      <div class=\"bb-block bb-block--lg col-sm-6 col-xs-12\" data-role=\"contact-account-info-account-name1\">\n        <label\n          #accountNameLabel\n          id=\"bb-contact-account-data-accountName-label\"\n          i18n=\"@@contact-account-data.accountName.label\"\n        >\n          Account name\n        </label>\n        <span id=\"account-name-required-info\" class=\"bb-text-support\">\n          (<ng-container i18n=\"@@contact-account-data.accountName.text-support.required.label\">Required</ng-container>)\n        </span>\n        <bb-input-text-ui\n          name=\"name\"\n          #accountNameModel=\"ngModel\"\n          [(ngModel)]=\"hostRef.account.name\"\n          [maxLength]=\"140\"\n          [required]=\"true\"\n          [aria-labelledby]=\"accountNameLabel.id\"\n          aria-describedby=\"account-name-required-info\"\n          data-role=\"contact-account-info-account-name\"\n          bbNoWhiteSpace\n        >\n        </bb-input-text-ui>\n\n        <bb-input-validation-message-ui\n          role=\"alert\"\n          [showErrors]=\"accountNameModel.invalid && accountNameModel.touched\"\n        >\n          <ng-container>\n            <span i18n=\"@@contact-account-data.accountName.errorText\" data-role=\"missing-account-name\">\n              Account name is required\n            </span>\n          </ng-container>\n        </bb-input-validation-message-ui>\n      </div>\n      <div class=\"bb-block bb-block--lg col-sm-6 col-xs-12\">\n        <bb-input-text-ui\n          name=\"alias\"\n          label=\"Account alias\"\n          i18n-label=\"@@contact-account-data.accountAlias.label\"\n          [(ngModel)]=\"hostRef.account.alias\"\n          [maxLength]=\"34\"\n          data-role=\"account-alias\"\n        >\n        </bb-input-text-ui>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"bb-block bb-block--lg col-sm-6 col-xs-12\">\n        <label #ibanLabel id=\"bb-contact-account-data-iban-label\" i18n=\"@@contact-account-data.contactIBAN.label\">\n          IBAN\n        </label>\n        <span id=\"iban-required-info\" class=\"bb-text-support\">\n          (<ng-container i18n=\"@@contact-account-data.iban.text-support.required.label\"\n            >IBAN or BBAN is required</ng-container\n          >)\n        </span>\n        <bb-input-text-ui\n          name=\"IBAN\"\n          #ibanModel=\"ngModel\"\n          [(ngModel)]=\"hostRef.account.IBAN\"\n          [maxLength]=\"hostRef.ibanMask.length\"\n          [required]=\"!bbanModel.value\"\n          [aria-labelledby]=\"ibanLabel.id\"\n          aria-describedby=\"iban-required-info\"\n          [mask]=\"hostRef.ibanMask\"\n          [maskValidator]=\"false\"\n          data-role=\"contact-iban\"\n          bbIbanValidator\n        >\n        </bb-input-text-ui>\n        <bb-input-validation-message-ui\n          role=\"alert\"\n          [showErrors]=\"(ibanModel.invalid && ibanModel.touched || bbanModel.invalid && bbanModel.touched)\"\n        >\n          <ng-container *ngIf=\"ibanModel.errors && ibanModel?.errors.required\">\n            <span i18n=\"@@contact-account-data.iban.error.required\" data-role=\"missing-iban\">\n              IBAN or BBAN is required\n            </span>\n          </ng-container>\n          <ng-container *ngIf=\"ibanModel.errors && ibanModel?.errors.invalidIban\">\n            <span i18n=\"@@contact-account-data.accountName.error.iban\" data-role=\"invalid-iban\"> Invalid IBAN </span>\n          </ng-container>\n        </bb-input-validation-message-ui>\n      </div>\n      <div class=\"bb-block bb-block--lg col-sm-6 col-xs-12\">\n        <label #bbanLabel id=\"bb-contact-account-data-bban-label\" i18n=\"@@contact-account-data.contactBBAN.label\">\n          BBAN\n        </label>\n        <span id=\"bban-required-info\" class=\"bb-text-support\">\n          (<ng-container i18n=\"@@contact-account-data.bban.text-support.required.label\"\n            >IBAN or BBAN is required</ng-container\n          >)\n        </span>\n        <bb-input-text-ui\n          name=\"accountNumber\"\n          #bbanModel=\"ngModel\"\n          [(ngModel)]=\"hostRef.account.accountNumber\"\n          [maxLength]=\"34\"\n          [required]=\"!ibanModel.value\"\n          [aria-labelledby]=\"bbanLabel.id\"\n          aria-describedby=\"bban-required-info\"\n          data-role=\"contact-account-number\"\n        >\n        </bb-input-text-ui>\n        <bb-input-validation-message-ui\n          role=\"alert\"\n          [showErrors]=\"(ibanModel.invalid && ibanModel.touched || bbanModel.invalid && bbanModel.touched)\"\n        >\n          <ng-container *ngIf=\"bbanModel.errors && bbanModel?.errors.required\">\n            <span i18n=\"@@contact-account-data.iban.error.required\" data-role=\"missing-bban\">\n              IBAN or BBAN is required\n            </span>\n          </ng-container>\n        </bb-input-validation-message-ui>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"bb-block bb-block--lg col-sm-6 col-xs-12\">\n        <label\n          #accountTypeLabel\n          id=\"bb-contact-account-data-accountType-label\"\n          i18n=\"@@contact-account-data.accounType.label\"\n        >\n          Account type\n        </label>\n        <span id=\"account-type-required-info\" class=\"bb-text-support\" *ngIf=\"hostRef.isAccountTypeRequired\">\n          (<ng-container i18n=\"@@contact-account-data.accountType.text-support.required.label\">Required</ng-container>)\n        </span>\n        <bb-dropdown-single-select-ui\n          name=\"accountType\"\n          #accountTypeModel=\"ngModel\"\n          placeholder=\"Select\"\n          i18n-placeholder=\"@@bb-create-contact.dropdown.account.type.placeholder\"\n          [(ngModel)]=\"hostRef.account.accountType\"\n          [defaultOptionAsPlaceholder]=\"!hostRef.isAccountTypeRequired\"\n          [required]=\"hostRef.isAccountTypeRequired\"\n          [aria-labelledby]=\"accountTypeLabel.id\"\n          aria-describedby=\"account-type-required-info\"\n          data-role=\"bankAccountType\"\n        >\n          <ng-container *ngFor=\"let accountType of accountTypeList\">\n            <bb-dropdown-single-select-option-ui [value]=\"accountType\" [label]=\"accountType\">\n            </bb-dropdown-single-select-option-ui>\n          </ng-container>\n        </bb-dropdown-single-select-ui>\n\n        <bb-input-validation-message-ui\n          role=\"alert\"\n          [showErrors]=\"accountTypeModel.invalid && accountTypeModel.touched\"\n        >\n          <ng-container>\n            <span i18n=\"@@contact-account-data.accountType.errorText\" data-role=\"missing-account-type\">\n              Account type is required\n            </span>\n          </ng-container>\n        </bb-input-validation-message-ui>\n      </div>\n      <div class=\"bb-block bb-block--lg col-sm-6 col-xs-12\">\n        <bb-input-text-ui\n          name=\"bankCode\"\n          label=\"Bank branch code\"\n          i18n-label=\"@@contact-account-data.contactBankCode.label\"\n          [(ngModel)]=\"hostRef.account.bankCode\"\n          [maxLength]=\"20\"\n          data-role=\"bank-code\"\n        >\n        </bb-input-text-ui>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"bb-block bb-block--lg col-sm-6 col-xs-12\">\n        <bb-input-text-ui\n          name=\"bankName\"\n          label=\"Bank name\"\n          i18n-label=\"@@contact-account-data.contactBankName.label\"\n          [(ngModel)]=\"hostRef.account.bankName\"\n          [maxLength]=\"140\"\n          data-role=\"bank-name\"\n        >\n        </bb-input-text-ui>\n      </div>\n      <div class=\"bb-block bb-block--lg col-sm-6 col-xs-12\">\n        <bb-input-text-ui\n          name=\"BIC\"\n          #bicModel=\"ngModel\"\n          label=\"BIC\"\n          i18n-label=\"@@contact-account-data.contactBIC.label\"\n          [(ngModel)]=\"hostRef.account.BIC\"\n          (ngModelChange)=\"hostRef.account.BIC = $event && $event.toUpperCase()\"\n          pattern=\"^[A-Za-z]{6,6}[A-Za-z2-9][A-Na-nP-Zp-z0-9]([A-Za-z0-9]{3,3}){0,1}$\"\n          data-role=\"bic\"\n        >\n        </bb-input-text-ui>\n        <bb-input-validation-message-ui role=\"alert\" [showErrors]=\"bicModel.invalid && bicModel.touched\">\n          <ng-container *ngIf=\"bicModel.errors && bicModel?.errors.pattern\">\n            <span i18n=\"@@contact-account-data.accountName.error.bic\" data-role=\"invalid-bic\"> Invalid BIC </span>\n          </ng-container>\n        </bb-input-validation-message-ui>\n      </div>\n    </div>\n\n    <div data-role=\"bank-address-container\">\n      <bb-contact-address-data\n        [highlight]=\"hostRef.highlight\"\n        [isAddAddress]=\"hostRef.isAddBankAddress\"\n        [addressType]=\"'bank'\"\n        [viewType]=\"hostRef.bankAddressViewType\"\n        [address]=\"hostRef.bankAddress\"\n        (add)=\"hostRef.onBankAddressAdd($event)\"\n        (edit)=\"hostRef.onBankAddressEdit()\"\n        (discard)=\"hostRef.onBankAddressDiscard($event)\"\n        (delete)=\"hostRef.onBankAddressDelete($event)\"\n        (submit)=\"hostRef.onAddressSubmit($event, hostRef.addressType.BANK)\"\n      >\n      </bb-contact-address-data>\n    </div>\n    <div data-role=\"account-holder-address-container\">\n      <bb-contact-address-data\n        [highlight]=\"hostRef.highlight\"\n        [isAddAddress]=\"hostRef.isAddAccountHolderAddress\"\n        [addressType]=\"'accountHolder'\"\n        [canCopyAddress]=\"hostRef.canCopyAddress\"\n        [isContactAddressCopied]=\"hostRef.isContactAddressCopied\"\n        [viewType]=\"hostRef.accountHolderAddressViewType\"\n        [address]=\"hostRef.accountHolderAddress\"\n        (add)=\"hostRef.onAccountHolderAddressAdd($event)\"\n        (edit)=\"hostRef.onAccountHolderAddressEdit()\"\n        (discard)=\"hostRef.onAccountHolderAddressDiscard($event)\"\n        (delete)=\"hostRef.onAccountHolderAddressDelete($event)\"\n        (submit)=\"hostRef.onAddressSubmit($event, hostRef.addressType.ACCOUNTHOLDER)\"\n        (contactAddressCopy)=\"hostRef.onAddressCopy($event)\"\n        (addressEditAfterCopy)=\"hostRef.onAddressEditAfterCopy()\"\n      >\n      </bb-contact-address-data>\n    </div>\n  </fieldset>\n</div>\n\n<div\n  class=\"card card-section bb-block bb-block--lg\"\n  *ngIf=\"hostRef.accountView ==='CARD'\"\n  data-role=\"contact-account-card-address\"\n>\n  <bb-account-card-view\n    [index]=\"hostRef.index\"\n    [isEditMode]=\"true\"\n    [account]=\"hostRef.account\"\n    [bankAddress]=\"hostRef.bankAddress\"\n    [accountHolderAddress]=\"hostRef.accountHolderAddress\"\n    (deleteAccount)=\"hostRef.onDeleteAccount($event)\"\n    (editAccount)=\"hostRef.onEditAccount($event)\"\n  >\n  </bb-account-card-view>\n</div>\n", components: [{ type: i2$3.InputTextComponent, selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i3$1.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i6.DropdownSingleSelectComponent, selector: "bb-dropdown-single-select-ui", inputs: ["placeholder", "defaultOptionAsPlaceholder", "options", "displayAttributePath", "iconName", "compareWithFn"] }, { type: i6.DropdownSingleSelectOptionComponent, selector: "bb-dropdown-single-select-option-ui", inputs: ["value", "label"] }, { type: ContactAddressDataComponent, selector: "bb-contact-address-data", inputs: ["isAddAddress", "address", "addressType", "canCopyAddress", "isContactAddressCopied", "viewType", "highlight"], outputs: ["submit", "discard", "delete", "edit", "contactAddressCopy", "add", "addressEditAfterCopy"] }, { type: AccountCardViewComponent, selector: "bb-account-card-view", inputs: ["index", "account", "isEditMode", "bankAddress", "accountHolderAddress"], outputs: ["editAccount", "deleteAccount"] }], directives: [{ type: i3.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i1$1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$1.NgModelGroup, selector: "[ngModelGroup]", inputs: ["ngModelGroup"], exportAs: ["ngModelGroup"] }, { type: NoWhiteSpaceValidatorDirective, selector: "[bbNoWhiteSpace]" }, { type: i1$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i1$1.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: IbanValidatorDirective, selector: "[bbIbanValidator]" }, { type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1$1.PatternValidator, selector: "[pattern][formControlName],[pattern][formControl],[pattern][ngModel]", inputs: ["pattern"] }], viewProviders: [{ provide: ControlContainer, useExisting: NgForm }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactAccountDataComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-contact-account-data',
                    templateUrl: './contact-account-data.component.html',
                    viewProviders: [{ provide: ControlContainer, useExisting: NgForm }],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1$1.ControlContainer }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [BB_CONTACT_BANK_ACCOUNT_TYPES_LIST]
                }] }]; }, propDecorators: { index: [{
                type: Input
            }], account: [{
                type: Input
            }], accountView: [{
                type: Input
            }], editAccount: [{
                type: Output
            }], bankAddressViewType: [{
                type: Input
            }], accountHolderAddressViewType: [{
                type: Input
            }], isAddBankAddress: [{
                type: Input
            }], canCopyAddress: [{
                type: Input
            }], bankAddress: [{
                type: Input
            }], accountHolderAddress: [{
                type: Input
            }], isAddAccountHolderAddress: [{
                type: Input
            }], isContactAddressCopied: [{
                type: Input
            }], forceChangeDetection: [{
                type: Input
            }], highlight: [{
                type: Input
            }], isAccountTypeRequired: [{
                type: Input
            }], bankAddressAdd: [{
                type: Output
            }], accountHolderAddressAdd: [{
                type: Output
            }], bankAddressViewChange: [{
                type: Output
            }], accountHolderAddressViewChange: [{
                type: Output
            }], contactAddressCopy: [{
                type: Output
            }], deleteAccount: [{
                type: Output
            }], addressEditAfterCopy: [{
                type: Output
            }] } });

/**
 * This is an extension slot to be used for customizing contact account data
 *
 * @usageNotes
 *
 * ### Display contact account data
 *
 * ```html
 *  <ng-template bbContactAccountDataCustomizable let-hostRef>
 * {{hostRef.account.name}}</ng-template>
 * ```
 * @ngModule ContactAccountDataModule
 */
class ContactAccountDataCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ ContactAccountDataCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactAccountDataCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ ContactAccountDataCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ContactAccountDataCustomizableDirective, selector: "[bbContactAccountDataCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactAccountDataCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbContactAccountDataCustomizable]',
                }]
        }] });

/**
 * This is an extension slot to be used for customizing contact address data
 *
 * @usageNotes
 *
 * ### Display contact address data
 *
 * ```html
 *  <ng-template bbContactAddressDataCustomizable let-hostRef>
 * {{hostRef.address.addressLine1}}</ng-template>
 * ```
 * @ngModule ContactAddressDataModule
 */
class ContactAddressDataCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ ContactAddressDataCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactAddressDataCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ ContactAddressDataCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ContactAddressDataCustomizableDirective, selector: "[bbContactAddressDataCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactAddressDataCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbContactAddressDataCustomizable]',
                }]
        }] });

class CamelCaseModule {
}
/** @nocollapse */ CamelCaseModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CamelCaseModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ CamelCaseModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CamelCaseModule, declarations: [CamelCasePipe], exports: [CamelCasePipe] });
/** @nocollapse */ CamelCaseModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CamelCaseModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CamelCaseModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [CamelCasePipe],
                    exports: [CamelCasePipe],
                }]
        }] });

/**
 * Exports:
 * - ContactAddressDataComponent
 * - ContactAddressDataCustomizableDirective
 */
class ContactAddressDataModule {
}
/** @nocollapse */ ContactAddressDataModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactAddressDataModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ ContactAddressDataModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactAddressDataModule, declarations: [ContactAddressDataComponent, ContactAddressDataCustomizableDirective], imports: [CommonModule,
        FormsModule,
        IconModule,
        HeaderModule,
        InputTextModule,
        DropdownSingleSelectModule,
        CountryItemModule,
        InputCheckboxModule,
        ButtonModule,
        ContactFullAddressModule,
        TooltipModule,
        CamelCaseModule], exports: [ContactAddressDataComponent, ContactAddressDataCustomizableDirective] });
/** @nocollapse */ ContactAddressDataModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactAddressDataModule, imports: [[
            CommonModule,
            FormsModule,
            IconModule,
            HeaderModule,
            InputTextModule,
            DropdownSingleSelectModule,
            CountryItemModule,
            InputCheckboxModule,
            ButtonModule,
            ContactFullAddressModule,
            TooltipModule,
            CamelCaseModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactAddressDataModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [ContactAddressDataComponent, ContactAddressDataCustomizableDirective],
                    exports: [ContactAddressDataComponent, ContactAddressDataCustomizableDirective],
                    imports: [
                        CommonModule,
                        FormsModule,
                        IconModule,
                        HeaderModule,
                        InputTextModule,
                        DropdownSingleSelectModule,
                        CountryItemModule,
                        InputCheckboxModule,
                        ButtonModule,
                        ContactFullAddressModule,
                        TooltipModule,
                        CamelCaseModule,
                    ],
                }]
        }] });

/**
 * Exports:
 * - ContactAccountDataComponent
 * - ContactAccountDataCustomizableDirective
 */
class ContactAccountDataModule {
}
/** @nocollapse */ ContactAccountDataModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactAccountDataModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ ContactAccountDataModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactAccountDataModule, declarations: [ContactAccountDataComponent, ContactAccountDataCustomizableDirective], imports: [CommonModule,
        FormsModule,
        InputTextModule,
        InputValidationMessageModule,
        DropdownSingleSelectModule,
        ContactAddressDataModule,
        AccountCardViewModule,
        NoWhiteSpaceModule,
        IbanValidatorModule], exports: [ContactAccountDataComponent, ContactAccountDataCustomizableDirective] });
/** @nocollapse */ ContactAccountDataModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactAccountDataModule, imports: [[
            CommonModule,
            FormsModule,
            InputTextModule,
            InputValidationMessageModule,
            DropdownSingleSelectModule,
            ContactAddressDataModule,
            AccountCardViewModule,
            NoWhiteSpaceModule,
            IbanValidatorModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactAccountDataModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [ContactAccountDataComponent, ContactAccountDataCustomizableDirective],
                    exports: [ContactAccountDataComponent, ContactAccountDataCustomizableDirective],
                    imports: [
                        CommonModule,
                        FormsModule,
                        InputTextModule,
                        InputValidationMessageModule,
                        DropdownSingleSelectModule,
                        ContactAddressDataModule,
                        AccountCardViewModule,
                        NoWhiteSpaceModule,
                        IbanValidatorModule,
                    ],
                }]
        }] });

/**
 * This is an extension slot to be used for customizing contact details item
 *
 * @usageNotes
 *p
 * ### Display contact details view.
 *
 * ```html
 *  <ng-template bbContactItemDetailsCustomizable let-hostRef>
 *   <div class="bb-block">
 *     <div
 *       *ngIf="hostRef.showName"
 *       class="bb-stack bb-block bb-block--md col"
 *     >
 *       <span
 *         class="bb-stack__item"
 *         data-role="contact-details-info-name"
 *       >
 *         {{ hostRef.contactItem?.name }}
 *       </span>
 *       <ng-container *ngIf="hostRef.contactItem?.alias">
 *         <span
 *           class="bb-stack__item"
 *           aria-hidden="true"
 *         >
 *           •
 *         </span>
 *         <span
 *           class="bb-stack__item"
 *           data-role="contact-details-info-alias"
 *         >
 *           {{ hostRef.contactItem?.alias }}
 *         </span>
 *       </ng-container>
 *     </div>
 *     <div class="col bb-block bb-block--lg">
 *       <div class="row bb-stack">
 *         <div
 *           *ngIf="hostRef.contactItem?.phoneNumber"
 *           class="bb-stack__item col-6 bb-block bb-block--md"
 *         >
 *           <div
 *             class="bb-block bb-block--sm bb-label"
 *             i18n="@@contact-item-details.contact-information.phone"
 *           >
 *             Phone number
 *           </div>
 *           <div
 *             class="bb-block bb-block--sm"
 *             data-role="contact-details-info-phone"
 *           >
 *             {{hostRef.contactItem?.phoneNumber}}
 *           </div>
 *         </div>
 *         <div
 *           *ngIf="hostRef.contactItem?.emailId"
 *           class="bb-stack__item bb-stack__item--align-top col-6 bb-block bb-block--md "
 *         >
 *           <div
 *             class="bb-block bb-block--sm bb-label row"
 *             i18n="@@contact-item-details.contact-information.email"
 *           >
 *             Email address
 *           </div>
 *           <div
 *             class="row"
 *             data-role="contact-details-info-email"
 *           >
 *             {{hostRef.contactItem?.emailId}}
 *           </div>
 *         </div>
 *       </div>
 *       <div
 *         *ngIf="hostRef.contactItem?.contactPerson"
 *         class="bb-block bb-block--md col-12"
 *       >
 *         <div
 *           class="bb-block bb-block--sm bb-label row"
 *           i18n="@@contact-item-details.contact-information.contact-person"
 *         >
 *           Contact person
 *         </div>
 *         <div
 *           class="bb-block bb-block--sm row"
 *           data-role="contact-details-info-contact-person"
 *         >
 *           {{hostRef.contactItem?.contactPerson}}
 *         </div>
 *       </div>
 *       <div class="bb-block bb-block--md col-12">
 *         <div
 *           *ngIf="hostRef.contactItem?.streetName || hostRef.contactItem?.addressLine1 || hostRef.contactItem?.addressLine2"
 *           class="bb-block bb-block--sm bb-label row"
 *           i18n="@@contact-item-details.contact-information.address"
 *         >
 *           Contact address
 *         </div>
 *         <bb-contact-full-address
 *           [address]="hostRef.address"
 *           class="row"
 *         ></bb-contact-full-address>
 *       </div>
 *     </div>
 *   </div>
 *   <div class="bb-block bb-block--lg">
 *     <div class="bb-stack bb-block bb-block--lg">
 *       <bb-header-ui
 *         headingType="h3"
 *         heading="Account information"
 *         i18n-heading="@@contact-item-details.account-information.title"
 *         headingClasses="bb-stack__item bb-stack__item--fill"
 *       >
 *       </bb-header-ui>
 *       <span
 *         class="bb-stack__item bb-stack__item--align-top bb-stack__item--push-right bb-text-support"
 *         i18n="@@contact-item-details.account-information.number-of-accounts"
 *         data-role="contact-details-account-number-accounts"
 *       >
 *         {{hostRef.contactItem?.accounts?.length}}
 *         {hostRef.contactItem?.accounts?.length, plural, =1 {account} other {accounts}}
 *       </span>
 *     </div>
 *     <div
 *       *ngFor="let account of hostRef.contactItem?.accounts; let index = index; trackBy: hostRef.trackByIndex"
 *       class="card card-section bb-block bb-block--lg"
 *     >
 *       <bb-account-card-view
 *         [account]="account"
 *         [bankAddress]="hostRef.bankAddress(account)"
 *         [accountHolderAddress]="hostRef.accountHolderAddress(account)"
 *         [index]="index"
 *       ></bb-account-card-view>
 *     </div>
 *   </div>
 * </ng-template>
 * ```
 * @ngModule ContactItemDetailsModule
 */
class ContactItemDetailsCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ ContactItemDetailsCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactItemDetailsCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ ContactItemDetailsCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ContactItemDetailsCustomizableDirective, selector: "[bbContactItemDetailsCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactItemDetailsCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbContactItemDetailsCustomizable]',
                }]
        }] });

/**
 * The component is for showing contact detail item.
 *
 * The following extension slots are available in this component:
 *  - `ContactItemDetailsCustomizableDirective`
 *
 * @see ContactItemDetailsCustomizableDirective
 * @usageNotes
 *
 * ### Display contact personal data
 *
 * ```html
 *    <bb-contact-item-details
 *            *ngIf="hostRef.contactItem"
 *             [contactItem]="hostRef.contactItem.data">
 *           </bb-contact-item-details>
 * ```
 * @ngModule ContactItemDetailsModule
 */
class ContactItemDetailsComponent {
    constructor() {
        this.hostRef = this;
        /**
         * Flag that denotes if the conctact name should be displayed. Defaults to `true`
         *
         */
        this.showName = true;
        /**
         *  Flag that denotes if the section headings name should be displayed. Defaults to `false`
         */
        this.showHeaders = false;
    }
    get address() {
        return addressFromContact(this.contactItem);
    }
    /**
     * Returns the address in correct format
     *
     * @param {AccountInformation} account current account details
     * @returns {Address} Returns the address in correct format
     */
    bankAddress(account) {
        return addressFromBank(account);
    }
    /**
     * Returns the address in correct format
     *
     * @param {AccountInformation} account current account details
     * @returns {Address} Returns the address in correct format
     */
    accountHolderAddress(account) {
        return addressFromAccountHolder(account);
    }
    trackByIndex(index) {
        return index;
    }
}
/** @nocollapse */ ContactItemDetailsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactItemDetailsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ ContactItemDetailsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ContactItemDetailsComponent, selector: "bb-contact-item-details", inputs: { contactItem: "contactItem", showName: "showName", showHeaders: "showHeaders" }, ngImport: i0, template: "<ng-container bbContactItemDetailsCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbContactItemDetailsCustomizable let-hostRef>\n  <div class=\"bb-block bb-block--xl\">\n    <div *ngIf=\"hostRef.showName\" class=\"bb-stack bb-block bb-block--md col\">\n      <span class=\"bb-stack__item\" data-role=\"contact-details-info-name\">{{ hostRef.contactItem?.name }}</span>\n      <ng-container *ngIf=\"hostRef.contactItem?.alias\">\n        <span class=\"bb-stack__item\" aria-hidden=\"true\"> \u2022 </span>\n        <span class=\"bb-stack__item\" data-role=\"contact-details-info-alias\"> {{ hostRef.contactItem?.alias }} </span>\n      </ng-container>\n    </div>\n    <dl class=\"col bb-block\" tabindex=\"0\">\n      <div class=\"row flex-column-reverse flex-sm-row\">\n        <div *ngIf=\"hostRef.contactItem?.phoneNumber\" class=\"col-12 col-sm-6 bb-block bb-block--sm\">\n          <dt class=\"bb-block bb-block--sm bb-label\" i18n=\"@@contact-item-details.contact-information.phone\">\n            Phone number\n          </dt>\n          <dd class=\"bb-block bb-block--sm\" data-role=\"contact-details-info-phone\">\n            {{hostRef.contactItem?.phoneNumber}}\n          </dd>\n        </div>\n        <div *ngIf=\"hostRef.contactItem?.emailId\" class=\"col-12 col-sm-6 bb-block bb-block--sm\">\n          <dt class=\"bb-block bb-block--sm bb-label\" i18n=\"@@contact-item-details.contact-information.email\">\n            Email address\n          </dt>\n          <dd class=\"bb-block bb-block--sm\" data-role=\"contact-details-info-email\">{{hostRef.contactItem?.emailId}}</dd>\n        </div>\n      </div>\n      <div *ngIf=\"hostRef.contactItem?.contactPerson\" class=\"bb-block bb-block--md col-12\">\n        <dt class=\"bb-block bb-block--sm bb-label row\" i18n=\"@@contact-item-details.contact-information.contact-person\">\n          Contact person\n        </dt>\n        <dd class=\"bb-block bb-block--sm row\" data-role=\"contact-details-info-contact-person\">\n          {{hostRef.contactItem?.contactPerson}}\n        </dd>\n      </div>\n      <div class=\"bb-block bb-block--md col-12\">\n        <dt\n          *ngIf=\"hostRef.contactItem?.streetName || hostRef.contactItem?.addressLine1 || hostRef.contactItem?.addressLine2\"\n          class=\"bb-block bb-block--sm bb-label row\"\n          i18n=\"@@contact-item-details.contact-information.address\"\n        >\n          Contact address\n        </dt>\n        <dd>\n          <bb-contact-full-address [address]=\"hostRef.address\" class=\"row\"></bb-contact-full-address>\n        </dd>\n      </div>\n    </dl>\n  </div>\n  <div class=\"bb-block\">\n    <div class=\"bb-stack bb-block bb-block--xs\" tabindex=\"0\">\n      <bb-header-ui\n        headingType=\"h3\"\n        heading=\"Account information\"\n        i18n-heading=\"@@contact-item-details.account-information.title\"\n        headingClasses=\"bb-stack__item bb-stack__item--fill\"\n      >\n      </bb-header-ui>\n      <span\n        class=\"bb-stack__item bb-stack__item--align-top bb-stack__item--push-right bb-text-support\"\n        i18n=\"@@contact-item-details.account-information.number-of-accounts\"\n        data-role=\"contact-details-account-number-accounts\"\n      >\n        {{hostRef.contactItem?.accounts?.length}} {hostRef.contactItem?.accounts?.length, plural, =1 {account} other\n        {accounts}}\n      </span>\n    </div>\n    <div\n      *ngFor=\"let account of hostRef.contactItem?.accounts; let index = index; trackBy: hostRef.trackByIndex\"\n      class=\"card card-section bb-block bb-block--sm\"\n    >\n      <bb-account-card-view\n        tabindex=\"0\"\n        [account]=\"account\"\n        [bankAddress]=\"hostRef.bankAddress(account)\"\n        [accountHolderAddress]=\"hostRef.accountHolderAddress(account)\"\n        [index]=\"index\"\n      ></bb-account-card-view>\n    </div>\n  </div>\n</ng-template>\n", components: [{ type: ContactFullAddressComponent, selector: "bb-contact-full-address", inputs: ["address"] }, { type: i2$2.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: AccountCardViewComponent, selector: "bb-account-card-view", inputs: ["index", "account", "isEditMode", "bankAddress", "accountHolderAddress"], outputs: ["editAccount", "deleteAccount"] }], directives: [{ type: ContactItemDetailsCustomizableDirective, selector: "[bbContactItemDetailsCustomizable]" }, { type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactItemDetailsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-contact-item-details',
                    templateUrl: './contact-item-details.component.html',
                }]
        }], propDecorators: { contactItem: [{
                type: Input
            }], showName: [{
                type: Input
            }], showHeaders: [{
                type: Input
            }] } });

class ContactItemDetailsModule {
}
/** @nocollapse */ ContactItemDetailsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactItemDetailsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ ContactItemDetailsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactItemDetailsModule, declarations: [ContactItemDetailsComponent, ContactItemDetailsCustomizableDirective], imports: [CommonModule, HeaderModule, ContactFullAddressModule, AccountCardViewModule], exports: [ContactItemDetailsComponent, ContactItemDetailsCustomizableDirective] });
/** @nocollapse */ ContactItemDetailsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactItemDetailsModule, imports: [[CommonModule, HeaderModule, ContactFullAddressModule, AccountCardViewModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactItemDetailsModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [ContactItemDetailsComponent, ContactItemDetailsCustomizableDirective],
                    exports: [ContactItemDetailsComponent, ContactItemDetailsCustomizableDirective],
                    imports: [CommonModule, HeaderModule, ContactFullAddressModule, AccountCardViewModule],
                }]
        }] });

/**
 * The component is for showing persons personal data.
 *
 * The following extension slots are available in this component:
 *  - `ContactPersonalDataCustomizableDirective`
 *
 * @see ContactPersonalDataCustomizableDirective
 * @usageNotes
 *
 * ### Display contact personal data
 *
 * ```html
 *    <bb-contact-personal-data
 *      [contact]="hostRef.formModel.contact"
 *      [address]="hostRef.contactAddress"
 *      [viewType]="hostRef.contactViewType"
 *      [isAddContactAddress]= "hostRef.isAddContactAddress"
 *      (contactAddressAdd)= "hostRef.addContactAddress($event)"
 *      (viewChange)="hostRef.changeContactView($event)">
 *    </bb-contact-personal-data>
 * ```
 * @ngModule ContactPersonalDataModule
 */
class ContactPersonalDataComponent {
    constructor(ctrlContainer) {
        this.ctrlContainer = ctrlContainer;
        this.hostRef = this;
        this.contactInputGroupName = InputGroupName.CONTACT;
        /**
         * Flag that denotes if contact address should be added
         */
        this.isAddContactAddress = false;
        /**
         * Event emitted when contact add address flag changes
         */
        this.contactAddressAdd = new EventEmitter();
        /**
         *
         * Event emitted when contact address view is changed
         */
        this.viewChange = new EventEmitter();
    }
    ngOnInit() {
        if (isObjectTruthy(this.address)) {
            this.originalAddress = Object.assign({}, this.address);
        }
    }
    /**
     * Returns the control of the form
     *
     * @param {string} controlName name of a form control
     * @returns {AbstractControl | null} form control for given name.
     */
    getFormControl(controlName) {
        const contactInputGroup = this.ctrlContainer.controls[this.contactInputGroupName];
        if (contactInputGroup) {
            return contactInputGroup.controls[controlName];
        }
        return null;
    }
    /**
     * Resets the control of the form.
     *
     * @param {string} controlName name of a form control
     */
    reset(controlName) {
        const formControl = this.getFormControl(controlName);
        if (formControl) {
            formControl.reset();
        }
    }
    /**
     * Updates the form status and mark as touched.
     * Also changes the view to CARD view once done.
     *
     * @param {string} controlName name of a form control
     */
    onAddressSubmit(controlName) {
        const address = this.getFormControl(controlName);
        if (address) {
            address.markAllAsTouched();
            address.updateValueAndValidity();
            if (address.valid) {
                this.originalAddress = Object.assign({}, address.value);
                this.viewChange.emit(ViewType.CARD);
            }
        }
    }
    /**
     * Emits the contact address add event
     *
     * @param {boolean} isAddAddress Emits the contact address add
     */
    onAddressAdd(isAddAddress) {
        this.contactAddressAdd.emit(isAddAddress);
    }
    /**
     * hanges the view to form.
     */
    onAddressEdit() {
        this.viewChange.emit(ViewType.FORM);
    }
    /**
     * If there is no update then returns to card view.
     *
     * @param {string} controlName name of a form control
     */
    onAddressDiscard(controlName) {
        if (this.originalAddress) {
            this.address = Object.assign({}, this.originalAddress);
            this.viewChange.emit(ViewType.CARD);
        }
        else {
            this.onAddressDelete(controlName);
        }
    }
    /**
     * deletes the address and resets the form.
     *
     * @param {string} controlName name of a form control
     */
    onAddressDelete(controlName) {
        this.originalAddress = undefined;
        this.contactAddressAdd.emit(false);
        this.reset(controlName);
        this.viewChange.emit(ViewType.FORM);
    }
}
/** @nocollapse */ ContactPersonalDataComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactPersonalDataComponent, deps: [{ token: i1$1.ControlContainer }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ ContactPersonalDataComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ContactPersonalDataComponent, selector: "bb-contact-personal-data", inputs: { viewType: "viewType", contact: "contact", isAddContactAddress: "isAddContactAddress", address: "address", forceChangeDetection: "forceChangeDetection" }, outputs: { contactAddressAdd: "contactAddressAdd", viewChange: "viewChange" }, ngImport: i0, template: "<div>\n  <fieldset [ngModelGroup]=\"'contactDetails'\">\n    <legend class=\"sr-only\" i18n=\"@@contact-personal-data.personalDetailsGroup.title\">Contact details</legend>\n    <div class=\"row\">\n      <div class=\"bb-block bb-block--lg col-sm-6 col-xs-12\">\n        <label #contactNameLabel id=\"bb-create-contact-name-label\" i18n=\"@@contact-personal-data.contactName.label\"\n          >Name</label\n        >\n        <span class=\"bb-text-support\">\n          (<ng-container i18n=\"@@contact-account-data.accountName.text-support.required.label\">Required</ng-container>)\n        </span>\n        <bb-input-text-ui\n          name=\"name\"\n          class=\"bb-block bb-block--sm\"\n          #contactNameModel=\"ngModel\"\n          [(ngModel)]=\"hostRef.contact.name\"\n          [maxLength]=\"140\"\n          [required]=\"true\"\n          [aria-labelledby]=\"contactNameLabel.id\"\n          aria-describedby=\"fullname-description\"\n          data-role=\"contact-name\"\n          bbNoWhiteSpace\n        >\n        </bb-input-text-ui>\n        <small\n          id=\"fullname-description\"\n          *ngIf=\"!contactNameModel.touched\"\n          class=\"bb-text-support bb-block bb-block--sm\"\n          i18n=\"@@contact-personal-data.contactName.infoText\"\n        >\n          Full name or company name\n        </small>\n        <bb-input-validation-message-ui\n          role=\"alert\"\n          [showErrors]=\"contactNameModel.invalid && contactNameModel.touched\"\n        >\n          <ng-container>\n            <span i18n=\"@@contact-personal-data.contactName.minLengthErrorText\" data-role=\"missing-contact-name\"\n              >Full name or company name is required</span\n            >\n          </ng-container>\n        </bb-input-validation-message-ui>\n      </div>\n      <div class=\"bb-block bb-block--lg bb-stack__item--align-top col-sm-6 col-xs-12\">\n        <bb-input-text-ui\n          label=\"Contact person\"\n          i18n-label=\"@@contact-personal-data.contactPerson.label\"\n          class=\"bb-stack__item--align-bottom\"\n          data-role=\"contact-person\"\n          [(ngModel)]=\"hostRef.contact.contactPerson\"\n          name=\"contactPerson\"\n          [maxLength]=\"70\"\n        >\n        </bb-input-text-ui>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"bb-block bb-block--lg col-sm-6 col-xs-12\">\n        <bb-input-text-ui\n          data-role=\"contact-alias\"\n          label=\"Alias\"\n          i18n-label=\"@@contact-personal-data.contactAlias.label\"\n          [(ngModel)]=\"hostRef.contact.alias\"\n          name=\"alias\"\n          [maxLength]=\"70\"\n        >\n        </bb-input-text-ui>\n      </div>\n      <div class=\"bb-block bb-block--lg col-sm-6 col-xs-12\">\n        <bb-input-text-ui\n          label=\"Phone number\"\n          i18n-label=\"@@contact-personal-data.contactPhoneNumber.label\"\n          data-role=\"contact-phone-number\"\n          [(ngModel)]=\"hostRef.contact.phoneNumber\"\n          name=\"phoneNumber\"\n          [maxLength]=\"30\"\n        >\n        </bb-input-text-ui>\n      </div>\n    </div>\n    <div class=\"row bb-block bb-block--lg\">\n      <div class=\"bb-block bb-block--no-margin col-lg-8 col-sm-8 col-xs-12\">\n        <bb-input-email-ui\n          label=\"E-mail\"\n          i18n-label=\"@@contact-personal-data.contactEmail.label\"\n          data-role=\"contact-email\"\n          [(ngModel)]=\"hostRef.contact.emailId\"\n          #emailModel=\"ngModel\"\n          name=\"emailId\"\n          bbEmailDomainValidator\n        >\n        </bb-input-email-ui>\n        <bb-input-validation-message-ui role=\"alert\" [showErrors]=\"emailModel.invalid && emailModel.touched\">\n          <ng-container *ngIf=\"emailModel.errors?.email\">\n            <span i18n=\"@@contact-personal-data.email.errorText\" data-role=\"invalid-email\">Invalid email</span>\n          </ng-container>\n        </bb-input-validation-message-ui>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"bb-block col-12\" data-role=\"contact-address-container\">\n        <bb-contact-address-data\n          [highlight]=\"false\"\n          [isAddAddress]=\"hostRef.isAddContactAddress\"\n          [viewType]=\"hostRef.viewType\"\n          [address]=\"hostRef.address\"\n          (add)=\"hostRef.onAddressAdd($event)\"\n          (edit)=\"hostRef.onAddressEdit()\"\n          (discard)=\"hostRef.onAddressDiscard($event)\"\n          (delete)=\"hostRef.onAddressDelete($event)\"\n          (submit)=\"hostRef.onAddressSubmit($event)\"\n        >\n        </bb-contact-address-data>\n      </div>\n    </div>\n  </fieldset>\n</div>\n", components: [{ type: i2$3.InputTextComponent, selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i3$1.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i4.InputEmailComponent, selector: "bb-input-email-ui", inputs: ["placeholder", "maxLength", "minLength", "readonly", "autocomplete"] }, { type: ContactAddressDataComponent, selector: "bb-contact-address-data", inputs: ["isAddAddress", "address", "addressType", "canCopyAddress", "isContactAddressCopied", "viewType", "highlight"], outputs: ["submit", "discard", "delete", "edit", "contactAddressCopy", "add", "addressEditAfterCopy"] }], directives: [{ type: i1$1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1$1.NgModelGroup, selector: "[ngModelGroup]", inputs: ["ngModelGroup"], exportAs: ["ngModelGroup"] }, { type: NoWhiteSpaceValidatorDirective, selector: "[bbNoWhiteSpace]" }, { type: i1$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i1$1.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: EmailDomainValidatorDirective, selector: "[bbEmailDomainValidator]" }], viewProviders: [{ provide: ControlContainer, useExisting: NgForm }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactPersonalDataComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-contact-personal-data',
                    templateUrl: './contact-personal-data.component.html',
                    viewProviders: [{ provide: ControlContainer, useExisting: NgForm }],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1$1.ControlContainer }]; }, propDecorators: { viewType: [{
                type: Input
            }], contact: [{
                type: Input
            }], isAddContactAddress: [{
                type: Input
            }], address: [{
                type: Input
            }], forceChangeDetection: [{
                type: Input
            }], contactAddressAdd: [{
                type: Output
            }], viewChange: [{
                type: Output
            }] } });

/**
 * This is an extension slot to be used for customizing contact personal data
 *
 * @usageNotes
 *
 * ### Display contact personal data
 *
 * ```html
 *  <ng-template bbContactPersonalDataCustomizable let-hostRef>
 * {{hostRef.contact.name}}</ng-template>
 * ```
 * @ngModule ContactPersonalDataModule
 */
class ContactPersonalDataCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ ContactPersonalDataCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactPersonalDataCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ ContactPersonalDataCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ContactPersonalDataCustomizableDirective, selector: "[bbContactPersonalDataCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactPersonalDataCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbContactPersonalDataCustomizable]',
                }]
        }] });

/**
 * Exports:
 * - ContactPersonalDataComponent
 * - ContactPersonalDataCustomizableDirective
 */
class ContactPersonalDataModule {
}
/** @nocollapse */ ContactPersonalDataModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactPersonalDataModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ ContactPersonalDataModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactPersonalDataModule, declarations: [ContactPersonalDataComponent, ContactPersonalDataCustomizableDirective], imports: [FormsModule,
        InputTextModule,
        InputValidationMessageModule,
        InputEmailModule,
        ContactAddressDataModule,
        CommonModule,
        NoWhiteSpaceModule,
        EmailDomainModule], exports: [ContactPersonalDataComponent, ContactPersonalDataCustomizableDirective] });
/** @nocollapse */ ContactPersonalDataModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactPersonalDataModule, imports: [[
            FormsModule,
            InputTextModule,
            InputValidationMessageModule,
            InputEmailModule,
            ContactAddressDataModule,
            CommonModule,
            NoWhiteSpaceModule,
            EmailDomainModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactPersonalDataModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [ContactPersonalDataComponent, ContactPersonalDataCustomizableDirective],
                    exports: [ContactPersonalDataComponent, ContactPersonalDataCustomizableDirective],
                    imports: [
                        FormsModule,
                        InputTextModule,
                        InputValidationMessageModule,
                        InputEmailModule,
                        ContactAddressDataModule,
                        CommonModule,
                        NoWhiteSpaceModule,
                        EmailDomainModule,
                    ],
                }]
        }] });

/**
 * Search box component with debounce
 *
 * @example
 *
 * ```html
 *   <bb-debounce-search
 *     class="d-block"
 *     [debounceTime]="debounceTime"
 *     (searchContacts)="onSearch($event)">
 *   </bb-debounce-search>
 * ```
 * @ngModule DebounceSearchModule
 */
class DebounceSearchComponent {
    constructor() {
        this.gc$ = new Subject();
        this.debounceSearch$ = new Subject();
        this.searchTerm = '';
        /**
         * Time delay between each search requests
         */
        this.debounceTime = 300;
        /**
         * Placeholder text for search input
         */
        this.placeholder = 'Search';
        /**
         * See html property `aria-label`
         */
        this.ariaLabel = undefined;
        /**
         * Changes will be triggered on search
         */
        this.searchContacts = new EventEmitter();
    }
    ngOnInit() {
        this.debounceSearch$
            .pipe(takeUntil(this.gc$), debounceTime(this.debounceTime), distinctUntilChanged())
            .subscribe((term) => {
            this.searchContacts.emit(term);
        });
    }
    /**
     * Updates the search term.
     *
     * @param {string} query - search query text
     */
    startSearching(query) {
        this.debounceSearch$.next(query);
    }
    /**
     * Updating the search value when cleared.
     */
    clearSearching() {
        this.debounceSearch$.next('');
    }
    /**
     * OnDestroy
     */
    ngOnDestroy() {
        this.gc$.next();
        this.debounceSearch$.complete();
        this.gc$.complete();
    }
}
/** @nocollapse */ DebounceSearchComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DebounceSearchComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ DebounceSearchComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: DebounceSearchComponent, selector: "bb-debounce-search", inputs: { debounceTime: "debounceTime", placeholder: "placeholder", ariaLabel: ["aria-label", "ariaLabel"] }, outputs: { searchContacts: "searchContacts" }, ngImport: i0, template: `
    <bb-search-box-ui
      [placeholder]="placeholder"
      [showSearch]="true"
      [showClear]="true"
      [aria-label]="ariaLabel"
      (submit)="startSearching($event)"
      (clear)="clearSearching()"
      [ngModel]="searchTerm"
      (ngModelChange)="startSearching($event)"
    ></bb-search-box-ui>
  `, isInline: true, components: [{ type: i1$4.SearchBoxComponent, selector: "bb-search-box-ui", inputs: ["placeholder", "maxLength", "squareBorder", "typeaheadOptions", "showSearch", "showClear", "searchLabel", "clearLabel", "autocomplete"], outputs: ["submit", "clear", "valueChange"] }], directives: [{ type: i1$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DebounceSearchComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-debounce-search',
                    template: `
    <bb-search-box-ui
      [placeholder]="placeholder"
      [showSearch]="true"
      [showClear]="true"
      [aria-label]="ariaLabel"
      (submit)="startSearching($event)"
      (clear)="clearSearching()"
      [ngModel]="searchTerm"
      (ngModelChange)="startSearching($event)"
    ></bb-search-box-ui>
  `,
                }]
        }], propDecorators: { debounceTime: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], ariaLabel: [{
                type: Input,
                args: ['aria-label']
            }], searchContacts: [{
                type: Output
            }] } });

/**
 * Exports:
 * - DebounceSearchComponent
 */
class DebounceSearchModule {
}
/** @nocollapse */ DebounceSearchModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DebounceSearchModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ DebounceSearchModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DebounceSearchModule, declarations: [DebounceSearchComponent], imports: [FormsModule, SearchBoxModule], exports: [DebounceSearchComponent] });
/** @nocollapse */ DebounceSearchModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DebounceSearchModule, imports: [[FormsModule, SearchBoxModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DebounceSearchModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [DebounceSearchComponent],
                    exports: [DebounceSearchComponent],
                    imports: [FormsModule, SearchBoxModule],
                }]
        }] });

/**
 * Component for approval log of a contact.
 *
 * @usageNotes
 *
 * ```html
 * <bb-approval-log
 *   [isPending]="hostRef.approvalDetails?.approvalDetails?.status === 'PENDING'"
 *   [records]="hostRef.approvalDetails?.approvalDetails?.records"
 * ></bb-approval-log>
 * ```
 * @ngModule ApprovalLogModule
 */
class ApprovalLogComponent {
    constructor() {
        /**
         * Approval log records of a contact.
         */
        this.records = [];
        /**
         * Whether contact is currently pending approval
         */
        this.isPending = false;
    }
}
/** @nocollapse */ ApprovalLogComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ApprovalLogComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ ApprovalLogComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ApprovalLogComponent, selector: "bb-approval-log", inputs: { records: "records", isPending: "isPending" }, ngImport: i0, template: "<bb-item-log-ui [records]=\"records\" [isPending]=\"isPending\">\n  <ng-template bbItemLogRecord let-itemLogRecord>\n    <div class=\"bb-stack bb-stack--align-top\">\n      <bb-icon-ui\n        class=\"bb-item-log-record__icon\"\n        size=\"md\"\n        [name]=\"itemLogRecord?.status === 'REJECTED' ? 'cancel' : 'success'\"\n        [color]=\"itemLogRecord?.status === 'REJECTED' ? 'danger' : 'success'\"\n      >\n      </bb-icon-ui>\n      <div class=\"bb-item-log-record__details\">\n        <span class=\"bb-text-bold\" i18n=\"@@contact-approval-log.status\">\n          { itemLogRecord?.status, select, REJECTED {Rejected} APPROVED {Approved} other {} }\n        </span>\n        <span class=\"text-small\">\n          <ng-container i18n=\"@@contact-approval-log.label\"> by {{ itemLogRecord.userFullName }}</ng-container>\n          <ng-container *ngIf=\"itemLogRecord?.externalUserId\"> ({{ itemLogRecord.externalUserId }})</ng-container>\n        </span>\n        <div *ngIf=\"itemLogRecord?.createdAt as createdAt\" class=\"bb-item-log-record__time\">\n          <time> {{ createdAt | date }}</time>\n          <ng-container i18n=\"@@contact-approval-log-created-at.label\"> at</ng-container>\n          <time> {{ createdAt | date: 'shortTime' }}</time>\n        </div>\n        <div *ngIf=\"itemLogRecord?.comment\" class=\"media\">\n          <div class=\"bb-inline-stack__item\">\n            <bb-icon-ui color=\"secondary\" name=\"forum\" size=\"sm\"></bb-icon-ui>\n          </div>\n          <div class=\"media-body break-word text-small\">{{ itemLogRecord?.comment }}</div>\n        </div>\n      </div>\n    </div>\n  </ng-template>\n</bb-item-log-ui>\n", components: [{ type: i1$5.ItemLogComponent, selector: "bb-item-log-ui", inputs: ["isPending", "records"] }, { type: i2$1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i1$5.ItemLogRecordDirective, selector: "ng-template[bbItemLogRecord]" }, { type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "date": i3.DatePipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ApprovalLogComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-approval-log',
                    templateUrl: 'approval-log.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { records: [{
                type: Input
            }], isPending: [{
                type: Input
            }] } });

/**
 * Component for a collapsible section with an approval log of a contact.
 *
 * @usageNotes
 *
 * ```html
 * <bb-approval-log-collapsible
 *   [isPending]="hostRef.approvalDetails?.approvalDetails?.status === 'PENDING'"
 *   [records]="hostRef.approvalDetails?.approvalDetails?.records"
 * ></bb-approval-log-collapsible>
 * ```
 * @ngModule ApprovalLogModule
 */
class ApprovalLogCollapsibleComponent {
    constructor() {
        /**
         * Approval log records of a contact.
         */
        this.records = [];
        /**
         * Whether contact is currently pending approval
         */
        this.isPending = false;
    }
}
/** @nocollapse */ ApprovalLogCollapsibleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ApprovalLogCollapsibleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ ApprovalLogCollapsibleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ApprovalLogCollapsibleComponent, selector: "bb-approval-log-collapsible", inputs: { records: "records", isPending: "isPending" }, ngImport: i0, template: `
    <bb-collapsible-ui [attr.data-role]="'approval-log-toggle'">
      <ng-template bbCollapsibleHeader let-toggle="toggle" let-isOpen="isOpen">
        <div class="bb-block bb-stack">
          <div class="bb-stack__item bb-stack__item--fill">
            <h3 i18n="@@contact-manager-pending-approvals-details.approvalLog">Approval log</h3>
          </div>
          <div class="bb-stack__item bb-stack__item--push-right">
            <button
              (click)="toggle()"
              bbButton
              color="outline"
              aria-label="Approval log toggle"
              i18n-aria-label="@@bb-approval-log.toggle.label"
              data-role="approval-log-toggle-button"
              bbTooltip="Toggle"
              triggers="hover focus"
              i18n-bbTooltip="@@contact-manager-pending-approvals-details.approval-log-toggle.tooltip"
            >
              <bb-icon-ui [name]="isOpen ? 'toggle-up' : 'toggle-down'"></bb-icon-ui>
            </button>
          </div>
        </div>
        <hr />
      </ng-template>
      <ng-template bbCollapsibleBody>
        <div aria-live="assertive">
          <bb-approval-log [isPending]="isPending" [records]="records"> </bb-approval-log>
        </div>
      </ng-template>
    </bb-collapsible-ui>
  `, isInline: true, components: [{ type: i1$6.CollapsibleComponent, selector: "bb-collapsible-ui", inputs: ["recreateBodyContent", "hasChevron", "isOpen"], outputs: ["isOpenChange"] }, { type: i2$1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: ApprovalLogComponent, selector: "bb-approval-log", inputs: ["records", "isPending"] }], directives: [{ type: i1$6.CollapsibleHeaderDirective, selector: "ng-template[bbCollapsibleHeader]" }, { type: i1$6.CollapsibleBodyDirective, selector: "ng-template[bbCollapsibleBody]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ApprovalLogCollapsibleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-approval-log-collapsible',
                    template: `
    <bb-collapsible-ui [attr.data-role]="'approval-log-toggle'">
      <ng-template bbCollapsibleHeader let-toggle="toggle" let-isOpen="isOpen">
        <div class="bb-block bb-stack">
          <div class="bb-stack__item bb-stack__item--fill">
            <h3 i18n="@@contact-manager-pending-approvals-details.approvalLog">Approval log</h3>
          </div>
          <div class="bb-stack__item bb-stack__item--push-right">
            <button
              (click)="toggle()"
              bbButton
              color="outline"
              aria-label="Approval log toggle"
              i18n-aria-label="@@bb-approval-log.toggle.label"
              data-role="approval-log-toggle-button"
              bbTooltip="Toggle"
              triggers="hover focus"
              i18n-bbTooltip="@@contact-manager-pending-approvals-details.approval-log-toggle.tooltip"
            >
              <bb-icon-ui [name]="isOpen ? 'toggle-up' : 'toggle-down'"></bb-icon-ui>
            </button>
          </div>
        </div>
        <hr />
      </ng-template>
      <ng-template bbCollapsibleBody>
        <div aria-live="assertive">
          <bb-approval-log [isPending]="isPending" [records]="records"> </bb-approval-log>
        </div>
      </ng-template>
    </bb-collapsible-ui>
  `,
                }]
        }], propDecorators: { records: [{
                type: Input
            }], isPending: [{
                type: Input
            }] } });

/**
 * Exports:
 * - ApprovalLogComponent
 * - ApprovalLogCollapsibleComponent
 */
class ApprovalLogModule {
}
/** @nocollapse */ ApprovalLogModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ApprovalLogModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ ApprovalLogModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ApprovalLogModule, declarations: [ApprovalLogComponent, ApprovalLogCollapsibleComponent], imports: [ItemLogModule, IconModule, CommonModule, CollapsibleModule], exports: [ApprovalLogComponent, ApprovalLogCollapsibleComponent] });
/** @nocollapse */ ApprovalLogModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ApprovalLogModule, imports: [[ItemLogModule, IconModule, CommonModule, CollapsibleModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ApprovalLogModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [ApprovalLogComponent, ApprovalLogCollapsibleComponent],
                    imports: [ItemLogModule, IconModule, CommonModule, CollapsibleModule],
                    exports: [ApprovalLogComponent, ApprovalLogCollapsibleComponent],
                }]
        }] });

/**
 * Abstract Base Request List Component
 *
 */
class RequestListBaseComponent {
    constructor() {
        /**
         * Direction of current sorting
         */
        this.sortDirection = 'asc';
        /**
         * Enum with names of sorting columns
         */
        this.approvalSortEnum = ApprovalSort;
        /**
         * Event emitted when column is clicked
         */
        this.sort = new EventEmitter();
    }
    /**
     * Sort column method
     *
     * @param {string} event - object with column and direction properites
     */
    onSort(event) {
        this.sortColumn = event.direction ? event.column : null;
        this.sortDirection = event.direction || 'desc';
        this.sort.emit(event);
    }
}
/** @nocollapse */ RequestListBaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RequestListBaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ RequestListBaseComponent.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: RequestListBaseComponent, outputs: { sort: "sort" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: RequestListBaseComponent, decorators: [{
            type: Directive
        }], propDecorators: { sort: [{
                type: Output
            }] } });

class AriaSortPipe {
    transform(value, sortColumn, sortDirection) {
        const selectedDirection = sortDirection && sortDirection === 'desc' ? 'descending' : 'ascending';
        return sortColumn === value.toUpperCase() ? selectedDirection : null;
    }
}
/** @nocollapse */ AriaSortPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AriaSortPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
/** @nocollapse */ AriaSortPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AriaSortPipe, name: "getAriaSort" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AriaSortPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'getAriaSort',
                }]
        }] });

class AriaSortPipeModule {
}
/** @nocollapse */ AriaSortPipeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AriaSortPipeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ AriaSortPipeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AriaSortPipeModule, declarations: [AriaSortPipe], imports: [CommonModule], exports: [AriaSortPipe] });
/** @nocollapse */ AriaSortPipeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AriaSortPipeModule, imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AriaSortPipeModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [AriaSortPipe],
                    imports: [CommonModule],
                    exports: [AriaSortPipe],
                }]
        }] });

class DirectionSortPipe {
    transform(value, sortColumn, sortDirection) {
        return sortColumn === value.toUpperCase() ? sortDirection : '';
    }
}
/** @nocollapse */ DirectionSortPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DirectionSortPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
/** @nocollapse */ DirectionSortPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DirectionSortPipe, name: "getDirection" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DirectionSortPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'getDirection',
                }]
        }] });

class DirectionSortPipeModule {
}
/** @nocollapse */ DirectionSortPipeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DirectionSortPipeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ DirectionSortPipeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DirectionSortPipeModule, declarations: [DirectionSortPipe], imports: [CommonModule], exports: [DirectionSortPipe] });
/** @nocollapse */ DirectionSortPipeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DirectionSortPipeModule, imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DirectionSortPipeModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [DirectionSortPipe],
                    imports: [CommonModule],
                    exports: [DirectionSortPipe],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { AccessContextScope, AccountCardViewComponent, AccountCardViewCustomizableDirective, AccountCardViewModule, ActiveContactStatus, AddressType, ApprovalHttpService, ApprovalLogCollapsibleComponent, ApprovalLogComponent, ApprovalLogModule, ApprovalStatus, ApprovalStatusColorMap, AriaSortPipe, AriaSortPipeModule, BB_CONTACT_BANK_ACCOUNT_TYPES_LIST, BB_CONTACT_COUNTRIES_LIST, BB_CONTACT_IBAN_COUNTRIES_LIST, ConfirmActionDialogComponent, ConfirmActionDialogModule, ContactAccountDataComponent, ContactAccountDataCustomizableDirective, ContactAccountDataModule, ContactActions, ContactAddressDataComponent, ContactAddressDataCustomizableDirective, ContactAddressDataModule, ContactApprovalStatusMap, ContactConfigProviders, ContactDiscardChangesService, ContactFormGroupItem, ContactFullAddressComponent, ContactFullAddressCustomizableDirective, ContactFullAddressModule, ContactHttpService, ContactItemDetailsComponent, ContactItemDetailsCustomizableDirective, ContactItemDetailsModule, ContactPersonalDataComponent, ContactPersonalDataCustomizableDirective, ContactPersonalDataModule, ContactService, ContactUpdateDeleteStatus, ContactsError, CountryItemComponent, CountryItemCustomizableDirective, CountryItemModule, DebounceSearchComponent, DebounceSearchModule, DirectionSortPipe, DirectionSortPipeModule, EmailDomainModule, EmailDomainValidatorDirective, IbanMask, IbanValidatorDirective, IbanValidatorModule, InputGroupName, InputName, LoadMoreMethod, NoWhiteSpaceModule, NoWhiteSpaceValidatorDirective, Preferences, RelativeDateModule, RelativeDatePipe, RequestListBaseComponent, ViewType, addressFromAccountHolder, addressFromBank, addressFromContact, addressToString, defaultAccessContextScope, fromContactFormToContactModel, fromContactItemToContactModel, getApprovalStatus, isFormGroupValid, isObjectTruthy, provideContactServices, toBoolean, toInteger };
//# sourceMappingURL=backbase-contact-common-ang.js.map
