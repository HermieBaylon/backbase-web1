{"version":3,"file":"contact-http.service.js","sourceRoot":"","sources":["../../../../../../libs/contact-common-ang/src/lib/services/contact-http.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  ApprovalResultStatus,\n  ApprovalsHttpService,\n  ContactPutResponseBody,\n  ContactsHttpService,\n  SupportedCountriesHttpService,\n} from '@backbase/data-ang/contact-manager';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport {\n  ApprovalRequired,\n  Approvals,\n  ApprovalsCreatedByMe,\n  ContactItem,\n  ContactRequestParameters,\n  ContactResponse,\n} from '../models/types';\nimport { fromErrorResponse, fromResponseBodyList } from '../helpers/mappers';\nimport { HttpResponse } from '@angular/common/http';\n\n/**\n * Service responsible for connecting Contact service to data-ang services\n *  - `ContactService`\n *  - `ContactsHttpService`\n *  - `ApprovalsHttpService`\n * This service is dependant on data-ang.\n *\n * @see ContactService\n * @see ContactsHttpService,\n * @see ApprovalsHttpService,\n * @usageNotes\n *\n * ```ts\n * @NgModule({\n *   ...\n *   providers: [\n *     ...\n *     ContactHttpService,\n *   ],\n * })\n * export class MyContactCommonAngModule {}\n * ```\n *\n * ### Inject this service into your component\n *\n * ```ts\n * @Component({\n *   ...\n *   providers: [ContactHttpService],\n * })\n *  export class ContactCommonAngComponent {\n * ```\n */\n@Injectable()\nexport class ContactHttpService {\n  constructor(\n    private readonly contactDataHttpService: ContactsHttpService,\n    private readonly approvalService: ApprovalsHttpService,\n    private readonly supportedCountriesService: SupportedCountriesHttpService,\n  ) {}\n\n  /**\n   * Get the contacts from data-ang API.\n   *\n   * @param {ContactRequestParameters} params - Contact Request Parameters\n   * @returns {Observable<ContactResponse>} service response in an Observable\n   */\n  getContacts(params: ContactRequestParameters): Observable<ContactResponse> {\n    return this.contactDataHttpService\n      .getContacts(params, 'response')\n      .pipe(map(fromResponseBodyList), catchError(fromErrorResponse));\n  }\n\n  /**\n   * Fetches Contact based on the ID given from data-ang method\n   *\n   * @param {string} contactId contact ID\n   * @returns {Observable<ContactItem | undefined>} observable of a response\n   */\n  getContact(contactId: string): Observable<ContactItem | undefined> {\n    return this.contactDataHttpService.getContact({ contactId }).pipe(catchError((error) => of(undefined)));\n  }\n\n  /**\n   * Calls the data-ang method for delete contact based on the ID\n   *\n   * @param {string} contactId contact ID\n   * @returns {Observable<ApprovalRequired>} observable of a response\n   */\n  deleteContact(contactId: string): Observable<ApprovalRequired> {\n    return this.contactDataHttpService.deleteContact({ contactId });\n  }\n\n  /**\n   * Calls the data-ang Method based on params provided.\n   *\n   * @param {ContactRequestParameters} params request parameters\n   * @returns {Observable<Approvals>} observable of a response\n   */\n  getPendingApprovals(params: ContactRequestParameters): Observable<Approvals> {\n    return this.approvalService\n      .getApprovals(params, 'response')\n      .pipe(map(fromResponseBodyList), catchError(fromErrorResponse));\n  }\n\n  /**\n   * Calls datanag method for fetching contact list of all pending approvals created by me.\n   *\n   * @param {ContactRequestParameters} params request parameters\n   * @returns {Observable<ApprovalsCreatedByMe>} observable of a response\n   */\n  getApprovalsCreatedByMe(params: ContactRequestParameters): Observable<ApprovalsCreatedByMe> {\n    return this.approvalService\n      .getApprovalsCreatedByMe(params, 'response')\n      .pipe(map(fromResponseBodyList), catchError(fromErrorResponse));\n  }\n\n  /**\n   * Calls data ang method for deleting the approval records.\n   *\n   * @param {string} requestId id of a contact\n   * @returns {Observable<any>} observable of a response\n   */\n  deleteApprovalsRecord(requestId: string) {\n    return this.approvalService.deleteApprovalRequest({ requestId });\n  }\n\n  /**\n   * Update the contact\n   *\n   * @param {ContactItem} contact updated contact Object\n   * @returns {Observable<ContactPutResponseBody>} observable of a response\n   */\n  updateContact(contact: ContactItem): Observable<ContactPutResponseBody> {\n    return this.contactDataHttpService.putContact({ contactId: contact.id, contactPutRequestBody: contact });\n  }\n\n  /**\n   * Calls the data-ang method for Approve Contact .\n   *\n   * @param {string} requestId id of a contact\n   * @param {string?} comment explanation of request approval\n   * @returns {Observable<ApprovalResultStatus>} observable of a response\n   */\n  approveContact(requestId: string, comment?: string): Observable<ApprovalResultStatus> {\n    const body = comment ? { comment } : undefined;\n\n    return this.approvalService\n      .postApprovalRecord({ requestId, approvalPostRequestBody: body })\n      .pipe(map((response) => response.status));\n  }\n\n  /**\n   * Calls the data-ang method for Reject Contact .\n   *\n   * @param {string} requestId id of a contact\n   * @param {string?} comment explanation of request rejection\n   * @returns {Observable<any>} observable of a response\n   */\n  rejectContact(requestId: string, comment?: string) {\n    const body = comment ? { comment } : undefined;\n\n    return this.approvalService.postRejectionRecord({ requestId, rejectionPostRequestBody: body });\n  }\n\n  /**\n   * Calls the data-ang method for supported countries .\n   *\n   * @returns {Observable<HttpResponse<string[]>>} observable of a response\n   */\n  getSupportedCountries(): Observable<HttpResponse<string[]>> {\n    return this.supportedCountriesService.getSupportedCountries('response');\n  }\n}\n"]}