import { Injectable } from '@angular/core';
import { ApprovalsHttpService, ContactsHttpService, SupportedCountriesHttpService, } from '@backbase/data-ang/contact-manager';
import { of } from 'rxjs';
import { catchError, map } from 'rxjs/operators';
import { fromErrorResponse, fromResponseBodyList } from '../helpers/mappers';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/data-ang/contact-manager";
/**
 * Service responsible for connecting Contact service to data-ang services
 *  - `ContactService`
 *  - `ContactsHttpService`
 *  - `ApprovalsHttpService`
 * This service is dependant on data-ang.
 *
 * @see ContactService
 * @see ContactsHttpService,
 * @see ApprovalsHttpService,
 * @usageNotes
 *
 * ```ts
 * @NgModule({
 *   ...
 *   providers: [
 *     ...
 *     ContactHttpService,
 *   ],
 * })
 * export class MyContactCommonAngModule {}
 * ```
 *
 * ### Inject this service into your component
 *
 * ```ts
 * @Component({
 *   ...
 *   providers: [ContactHttpService],
 * })
 *  export class ContactCommonAngComponent {
 * ```
 */
export class ContactHttpService {
    constructor(contactDataHttpService, approvalService, supportedCountriesService) {
        this.contactDataHttpService = contactDataHttpService;
        this.approvalService = approvalService;
        this.supportedCountriesService = supportedCountriesService;
    }
    /**
     * Get the contacts from data-ang API.
     *
     * @param {ContactRequestParameters} params - Contact Request Parameters
     * @returns {Observable<ContactResponse>} service response in an Observable
     */
    getContacts(params) {
        return this.contactDataHttpService
            .getContacts(params, 'response')
            .pipe(map(fromResponseBodyList), catchError(fromErrorResponse));
    }
    /**
     * Fetches Contact based on the ID given from data-ang method
     *
     * @param {string} contactId contact ID
     * @returns {Observable<ContactItem | undefined>} observable of a response
     */
    getContact(contactId) {
        return this.contactDataHttpService.getContact({ contactId }).pipe(catchError((error) => of(undefined)));
    }
    /**
     * Calls the data-ang method for delete contact based on the ID
     *
     * @param {string} contactId contact ID
     * @returns {Observable<ApprovalRequired>} observable of a response
     */
    deleteContact(contactId) {
        return this.contactDataHttpService.deleteContact({ contactId });
    }
    /**
     * Calls the data-ang Method based on params provided.
     *
     * @param {ContactRequestParameters} params request parameters
     * @returns {Observable<Approvals>} observable of a response
     */
    getPendingApprovals(params) {
        return this.approvalService
            .getApprovals(params, 'response')
            .pipe(map(fromResponseBodyList), catchError(fromErrorResponse));
    }
    /**
     * Calls datanag method for fetching contact list of all pending approvals created by me.
     *
     * @param {ContactRequestParameters} params request parameters
     * @returns {Observable<ApprovalsCreatedByMe>} observable of a response
     */
    getApprovalsCreatedByMe(params) {
        return this.approvalService
            .getApprovalsCreatedByMe(params, 'response')
            .pipe(map(fromResponseBodyList), catchError(fromErrorResponse));
    }
    /**
     * Calls data ang method for deleting the approval records.
     *
     * @param {string} requestId id of a contact
     * @returns {Observable<any>} observable of a response
     */
    deleteApprovalsRecord(requestId) {
        return this.approvalService.deleteApprovalRequest({ requestId });
    }
    /**
     * Update the contact
     *
     * @param {ContactItem} contact updated contact Object
     * @returns {Observable<ContactPutResponseBody>} observable of a response
     */
    updateContact(contact) {
        return this.contactDataHttpService.putContact({ contactId: contact.id, contactPutRequestBody: contact });
    }
    /**
     * Calls the data-ang method for Approve Contact .
     *
     * @param {string} requestId id of a contact
     * @param {string?} comment explanation of request approval
     * @returns {Observable<ApprovalResultStatus>} observable of a response
     */
    approveContact(requestId, comment) {
        const body = comment ? { comment } : undefined;
        return this.approvalService
            .postApprovalRecord({ requestId, approvalPostRequestBody: body })
            .pipe(map((response) => response.status));
    }
    /**
     * Calls the data-ang method for Reject Contact .
     *
     * @param {string} requestId id of a contact
     * @param {string?} comment explanation of request rejection
     * @returns {Observable<any>} observable of a response
     */
    rejectContact(requestId, comment) {
        const body = comment ? { comment } : undefined;
        return this.approvalService.postRejectionRecord({ requestId, rejectionPostRequestBody: body });
    }
    /**
     * Calls the data-ang method for supported countries .
     *
     * @returns {Observable<HttpResponse<string[]>>} observable of a response
     */
    getSupportedCountries() {
        return this.supportedCountriesService.getSupportedCountries('response');
    }
}
/** @nocollapse */ ContactHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactHttpService, deps: [{ token: i1.ContactsHttpService }, { token: i1.ApprovalsHttpService }, { token: i1.SupportedCountriesHttpService }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ ContactHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactHttpService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactHttpService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.ContactsHttpService }, { type: i1.ApprovalsHttpService }, { type: i1.SupportedCountriesHttpService }]; } });
//# sourceMappingURL=contact-http.service.js.map