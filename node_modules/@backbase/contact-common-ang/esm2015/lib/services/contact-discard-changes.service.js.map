{"version":3,"file":"contact-discard-changes.service.js","sourceRoot":"","sources":["../../../../../../libs/contact-common-ang/src/lib/services/contact-discard-changes.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAc,EAAE,EAAE,OAAO,EAAE,MAAM,MAAM,CAAC;;AAE/C;;GAEG;AAEH,MAAM,OAAO,4BAA4B;IADzC;QAEU,aAAQ,GAAG,IAAI,OAAO,EAAW,CAAC;QAClC,uBAAkB,GAAG,IAAI,OAAO,EAAE,CAAC;QACnC,iBAAY,GAAG,KAAK,CAAC;QAE7B;;WAEG;QACM,sBAAiB,GAAG,IAAI,CAAC,kBAAkB,CAAC,YAAY,EAAE,CAAC;KAiDrE;IA/CC;;OAEG;IACH,YAAY;QACV,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;IAC3B,CAAC;IAED;;OAEG;IACH,aAAa;QACX,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;IAC5B,CAAC;IAED;;;;OAIG;IACH,cAAc;QACZ,IAAI,IAAI,CAAC,YAAY,EAAE;YACrB,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;YACzB,IAAI,CAAC,QAAQ,GAAG,IAAI,OAAO,EAAE,CAAC;YAC9B,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,CAAC;YAE/B,OAAO,IAAI,CAAC,QAAQ,CAAC,YAAY,EAAE,CAAC;SACrC;aAAM;YACL,OAAO,EAAE,CAAC,IAAI,CAAC,CAAC;SACjB;IACH,CAAC;IAED;;OAEG;IACH,OAAO;QACL,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACzB,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACzB,IAAI,CAAC,aAAa,EAAE,CAAC;IACvB,CAAC;IAED;;OAEG;IACH,aAAa;QACX,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC1B,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;IAC3B,CAAC;;6IAxDU,4BAA4B;iJAA5B,4BAA4B;4FAA5B,4BAA4B;kBADxC,UAAU","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, of, Subject } from 'rxjs';\n\n/**\n * Service responsible for managing logic behind showing data discard confirmation\n */\n@Injectable()\nexport class ContactDiscardChangesService {\n  private discard$ = new Subject<boolean>();\n  private discardRequested$$ = new Subject();\n  private isFormActive = false;\n\n  /**\n   * Stream providing values when discarding data is requested from outside the form component\n   */\n  readonly discardRequested$ = this.discardRequested$$.asObservable();\n\n  /**\n   * Registers the event of introducing changes to the form\n   */\n  startChanges() {\n    this.isFormActive = true;\n  }\n\n  /**\n   * Registers the event of finishing working with the form\n   */\n  finishChanges() {\n    this.isFormActive = false;\n  }\n\n  /**\n   * Requests that data is discarded from the form\n   *\n   * @returns {Observable<boolean>} whether data was actually discarded fulfilling the request\n   */\n  requestDiscard(): Observable<boolean> {\n    if (this.isFormActive) {\n      this.discard$.complete();\n      this.discard$ = new Subject();\n      this.discardRequested$$.next();\n\n      return this.discard$.asObservable();\n    } else {\n      return of(true);\n    }\n  }\n\n  /**\n   * Confirms discarding data after it was requested\n   */\n  discard() {\n    this.discard$.next(true);\n    this.discard$.complete();\n    this.finishChanges();\n  }\n\n  /**\n   * Cancels discarding data after it was requested\n   */\n  cancelDiscard() {\n    this.discard$.next(false);\n    this.discard$.complete();\n  }\n}\n"]}