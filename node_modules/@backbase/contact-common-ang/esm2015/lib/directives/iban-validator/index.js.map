{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../../../libs/contact-common-ang/src/lib/directives/iban-validator/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * module lib-bb-iban\n * description IBAN structure validation library\n */\n\n// References:\n// https://www.swift.com/standards/data-standards/iban\n// https://en.wikipedia.org/wiki/International_Bank_Account_Number\n\nimport countrySpecification from './countrySpec';\nimport { bbanRegexp, compact, convertIban } from './helpers';\nimport bigIntMod from './bigIntegerMod';\nimport { AbstractControl } from '@angular/forms';\n\n/**\n * Validates IBAN structure defined in ISO 13616-1 and ISO/IEC 7064 (MOD97-10).\n *\n * name isValidIBAN\n * type {function}\n *\n * @param {string} iban International bank account number.\n * @returns {boolean} whether input is a valid iban\n */\nexport const isValidIBAN = (iban: string): boolean => {\n  if (typeof iban !== 'string') {\n    return false;\n  }\n\n  let spec;\n  const compactIBAN = compact(iban.toUpperCase());\n\n  try {\n    spec = countrySpecification(compactIBAN);\n  } catch (error) {\n    return false;\n  }\n\n  const specBban = bbanRegexp(spec.bban) as RegExp;\n\n  return (\n    spec.len === compactIBAN.length &&\n    specBban.test(compactIBAN.slice(4)) &&\n    bigIntMod(convertIban(compactIBAN), 97) === 1\n  );\n};\n\n/**\n * Validates IBAN structure defined in ISO 13616-1 and ISO/IEC 7064 (MOD97-10).\n *\n * name isValidIBANFormControl\n * type {function}\n *\n * @param {AbstractControl} control control with iban International bank account number\n * @returns {Record<string, any>}\n * example: NL91ABNA0417164300\n */\nexport const isValidIBANFormControl = (control: AbstractControl): null | { [key: string]: any } => {\n  const iban = control.value;\n  if (typeof iban !== 'string') {\n    return { invalidIban: { value: control.value } };\n  }\n\n  let spec;\n  const compactIBAN = compact(iban.toUpperCase());\n  try {\n    spec = countrySpecification(compactIBAN);\n  } catch (error) {\n    return { invalidIban: { value: control.value } };\n  }\n\n  const specBban = bbanRegexp(spec.bban) as RegExp;\n  const res: boolean =\n    spec.len === compactIBAN.length &&\n    specBban.test(compactIBAN.slice(4)) &&\n    bigIntMod(convertIban(compactIBAN), 97) === 1;\n\n  return res ? null : { invalidIban: { value: control.value } };\n};\n\n/**\n * Validates BBAN structure defined in ISO 13616-1.\n *\n * name isValidBBAN\n * type {function}\n *\n * @param {string} iban International bank account number.\n * @returns {boolean} whether input is a valid bban\n */\nexport const isValidBBAN = (iban: string): boolean => {\n  if (typeof iban !== 'string') {\n    return false;\n  }\n\n  let spec;\n  const compactIBAN = compact(iban);\n\n  try {\n    spec = countrySpecification(compactIBAN);\n  } catch (error) {\n    return false;\n  }\n\n  // Remove country code and check digits\n  const bban = compactIBAN.slice(4);\n\n  const specBban = bbanRegexp(spec.bban) as RegExp;\n\n  return bban.length === spec.len - 4 && specBban.test(bban);\n};\n"]}