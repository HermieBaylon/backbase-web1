{"version":3,"file":"helpers.js","sourceRoot":"","sources":["../../../../../../../libs/contact-common-ang/src/lib/directives/iban-validator/helpers.ts"],"names":[],"mappings":"AAAA,MAAM,CAAC,GAAG,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;AAC5B,MAAM,CAAC,GAAG,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;AAE5B,MAAM,QAAQ,GAA8B;IAC1C,CAAC,EAAE,KAAK;IACR,CAAC,EAAE,KAAK;IACR,CAAC,EAAE,QAAQ;CACZ,CAAC;AAEF,6CAA6C;AAC7C,MAAM,gBAAgB,GAA0C,EAAE,CAAC;AAEnE,6DAA6D;AAC7D,MAAM,iBAAiB,GAAG,CAAC,UAAkB,EAAsB,EAAE;IACnE,MAAM,aAAa,GAAG,UAAU,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;IACzD,IAAI,CAAC,aAAa;QAAE,OAAO,SAAS,CAAC;IAErC,MAAM,OAAO,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,KAAK,EAAE,EAAE;QAC1D,MAAM,QAAQ,GAAG,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;QACjD,MAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;QAEtB,OAAO,GAAG,WAAW,IAAI,QAAQ,CAAC,IAAI,CAAC,KAAK,QAAQ,GAAG,CAAC;IAC1D,CAAC,EAAE,EAAE,CAAC,CAAC;IACP,gBAAgB,CAAC,UAAU,CAAC,GAAG,IAAI,MAAM,CAAC,OAAO,CAAC,CAAC;IAEnD,OAAO,gBAAgB,CAAC,UAAU,CAAC,CAAC;AACtC,CAAC,CAAC;AAEF,4DAA4D;AAC5D,MAAM,aAAa,GAAG,CAAC,IAAY,EAAU,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC;AAEtF;;;;;;;GAOG;AACH,MAAM,CAAC,MAAM,OAAO,GAAG,CAAC,GAAW,EAAU,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;AAExE;;;;;;;;;;;;;GAaG;AACH,MAAM,CAAC,MAAM,UAAU,GAAG,CAAC,UAAkB,EAAsB,EAAE,CACnE,gBAAgB,CAAC,UAAU,CAAC,IAAI,iBAAiB,CAAC,UAAU,CAAC,CAAC;AAEhE;;;;;;;;GAQG;AACH,MAAM,CAAC,MAAM,WAAW,GAAG,CAAC,IAAY,EAAU,EAAE,CAClD,aAAa,CAAC,IAAI,CAAC;KAChB,KAAK,CAAC,EAAE,CAAC;KACT,MAAM,CAAC,CAAC,MAAM,EAAE,IAAI,EAAE,EAAE;IACvB,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IAChC,IAAI,GAAG,CAAC;IACR,IAAI,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,EAAE;QAC1B,GAAG,GAAG,MAAM,CAAC,IAAI,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC;KAC7B;SAAM;QACL,GAAG,GAAG,IAAI,CAAC;KACZ;IAED,OAAO,GAAG,MAAM,GAAG,GAAG,EAAE,CAAC;AAC3B,CAAC,EAAE,EAAE,CAAC,CAAC","sourcesContent":["const A = 'A'.charCodeAt(0);\nconst Z = 'Z'.charCodeAt(0);\n\nconst PATTERNS: { [key: string]: string } = {\n  A: 'A-Z',\n  N: '0-9',\n  C: '0-9A-Z',\n};\n\n// Stores bban validation regular expressions\nconst cachedBbanRegexp: { [key: string]: RegExp | undefined } = {};\n\n// Generates BBAN format as a regular expression and cache it\nconst prepareBbanRegexp = (bbanFormat: string): RegExp | undefined => {\n  const matchedString = bbanFormat.match(/[0-9]{2}[ANC]/g);\n  if (!matchedString) return undefined;\n\n  const pattern = matchedString.reduce((prevPattern, block) => {\n    const quantity = parseInt(block.slice(0, 2), 10);\n    const code = block[2];\n\n    return `${prevPattern}[${PATTERNS[code]}]{${quantity}}`;\n  }, '');\n  cachedBbanRegexp[bbanFormat] = new RegExp(pattern);\n\n  return cachedBbanRegexp[bbanFormat];\n};\n\n// Move the four initial characters to the end of the string\nconst rearrangeIban = (iban: string): string => `${iban.slice(4)}${iban.slice(0, 4)}`;\n\n/**\n * Removes spaces\n *\n * name  compact\n *\n * @param  {string} str A given string\n * @returns {string}     Compact string\n */\nexport const compact = (str: string): string => str.replace(/\\s+/g, '');\n\n/**\n * Generates a regular expression from encoded representation\n * It is grouped in blocks of 3 characters, first 2 represents the number\n * and the last character represents the type of character.\n * A = Upper case alpha characters [A-Z]\n * N = Numeric characters [0-9]\n * C = Mixed case alphanumeric characters [0-9a-zA-Z]\n *\n * name bbanRegexp\n * inner\n *\n * @param  {string} bbanFormat Encoded regular expression\n * @returns {object}            Resulting regular expression\n */\nexport const bbanRegexp = (bbanFormat: string): RegExp | undefined =>\n  cachedBbanRegexp[bbanFormat] || prepareBbanRegexp(bbanFormat);\n\n/**\n * Replace each letter in the string with two digits,\n * thereby expanding the string, where A = 10, B = 11, ..., Z = 35\n *\n * name convertIban\n *\n * @param {string} iban IBAN number\n * @returns {string} convetedIBAN representation of the IBAN\n */\nexport const convertIban = (iban: string): string =>\n  rearrangeIban(iban)\n    .split('')\n    .reduce((result, char) => {\n      const code = char.charCodeAt(0);\n      let num;\n      if (code >= A && code <= Z) {\n        num = String(code - A + 10);\n      } else {\n        num = char;\n      }\n\n      return `${result}${num}`;\n    }, '');\n"]}