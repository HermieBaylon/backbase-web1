/**
 * module lib-bb-iban
 * description IBAN structure validation library
 */
// References:
// https://www.swift.com/standards/data-standards/iban
// https://en.wikipedia.org/wiki/International_Bank_Account_Number
import countrySpecification from './countrySpec';
import { bbanRegexp, compact, convertIban } from './helpers';
import bigIntMod from './bigIntegerMod';
/**
 * Validates IBAN structure defined in ISO 13616-1 and ISO/IEC 7064 (MOD97-10).
 *
 * name isValidIBAN
 * type {function}
 *
 * @param {string} iban International bank account number.
 * @returns {boolean} whether input is a valid iban
 */
export const isValidIBAN = (iban) => {
    if (typeof iban !== 'string') {
        return false;
    }
    let spec;
    const compactIBAN = compact(iban.toUpperCase());
    try {
        spec = countrySpecification(compactIBAN);
    }
    catch (error) {
        return false;
    }
    const specBban = bbanRegexp(spec.bban);
    return (spec.len === compactIBAN.length &&
        specBban.test(compactIBAN.slice(4)) &&
        bigIntMod(convertIban(compactIBAN), 97) === 1);
};
/**
 * Validates IBAN structure defined in ISO 13616-1 and ISO/IEC 7064 (MOD97-10).
 *
 * name isValidIBANFormControl
 * type {function}
 *
 * @param {AbstractControl} control control with iban International bank account number
 * @returns {Record<string, any>}
 * example: NL91ABNA0417164300
 */
export const isValidIBANFormControl = (control) => {
    const iban = control.value;
    if (typeof iban !== 'string') {
        return { invalidIban: { value: control.value } };
    }
    let spec;
    const compactIBAN = compact(iban.toUpperCase());
    try {
        spec = countrySpecification(compactIBAN);
    }
    catch (error) {
        return { invalidIban: { value: control.value } };
    }
    const specBban = bbanRegexp(spec.bban);
    const res = spec.len === compactIBAN.length &&
        specBban.test(compactIBAN.slice(4)) &&
        bigIntMod(convertIban(compactIBAN), 97) === 1;
    return res ? null : { invalidIban: { value: control.value } };
};
/**
 * Validates BBAN structure defined in ISO 13616-1.
 *
 * name isValidBBAN
 * type {function}
 *
 * @param {string} iban International bank account number.
 * @returns {boolean} whether input is a valid bban
 */
export const isValidBBAN = (iban) => {
    if (typeof iban !== 'string') {
        return false;
    }
    let spec;
    const compactIBAN = compact(iban);
    try {
        spec = countrySpecification(compactIBAN);
    }
    catch (error) {
        return false;
    }
    // Remove country code and check digits
    const bban = compactIBAN.slice(4);
    const specBban = bbanRegexp(spec.bban);
    return bban.length === spec.len - 4 && specBban.test(bban);
};
//# sourceMappingURL=index.js.map