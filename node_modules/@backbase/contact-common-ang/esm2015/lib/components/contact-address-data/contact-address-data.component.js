import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewChild, } from '@angular/core';
import { ControlContainer, NgModelGroup } from '@angular/forms';
import { isObjectTruthy } from '../../helpers/address';
import { AddressType, InputGroupName, InputName, ViewType } from '../../models/types';
import { ContactCountryListService } from '../../services/contact-country-list.service';
import { of } from 'rxjs';
import { shareReplay } from 'rxjs/operators';
import { InputTextComponent } from '@backbase/ui-ang/input-text';
import * as i0 from "@angular/core";
import * as i1 from "../../services/contact-country-list.service";
import * as i2 from "@backbase/ui-ang/icon";
import * as i3 from "../contact-full-address/contact-full-address.component";
import * as i4 from "@backbase/ui-ang/header";
import * as i5 from "@backbase/ui-ang/input-text";
import * as i6 from "@backbase/ui-ang/dropdown-single-select";
import * as i7 from "../country-item/country-item.component";
import * as i8 from "@backbase/ui-ang/input-checkbox";
import * as i9 from "@angular/common";
import * as i10 from "@backbase/ui-ang/button";
import * as i11 from "@backbase/ui-ang/tooltip-directive";
import * as i12 from "@angular/forms";
import * as i13 from "../../pipes/camel-case/camel-case.pipe";
/**
 * The component is for showing contact  address data.
 *
 *
 * @usageNotes
 *
 * ### Display contact address data
 *
 * ```html
 *    <bb-contact-address-data
 *   [highlight]="hostRef.highlight"
 *   [isAddAddress]="hostRef.isAddAccountHolderAddress"
 *   [addressType]="'accountHolder'"
 *   [canCopyAddress]="hostRef.canCopyAddress"
 *   [isContactAddressCopied]="hostRef.isContactAddressCopied"
 *   [viewType]="hostRef.accountHolderAddressViewType"
 *   [address]="hostRef.accountHolderAddress"
 *   (add)="hostRef.onAccountHolderAddressAdd($event)"
 *   (edit)="hostRef.onAccountHolderAddressEdit()"
 *   (discard)="hostRef.onAccountHolderAddressDiscard($event)"
 *   (delete)="hostRef.onAccountHolderAddressDelete($event)"
 *   (submit)="hostRef.onAddressSubmit($event, hostRef.addressType.ACCOUNTHOLDER)"
 *   (contactAddressCopy)="hostRef.onAddressCopy($event)"
 *   (addressEditAfterCopy)="hostRef.onAddressEditAfterCopy()">
 * </bb-contact-address-data>
 * ```
 * @ngModule ContactAddressDataModule
 */
export class ContactAddressDataComponent {
    constructor(contactCountryListService) {
        this.contactCountryListService = contactCountryListService;
        this.hostRef = this;
        this.copyContactAddressInputName = InputName.COPY_CONTACT_ADDRESS;
        /**
         * Instance that holds the address details
         */
        this.address = {};
        /**
         * Type of addresses. Possible values `CONTACT`, `BANK`, `ACCOUNTHOLDER`. Defaults to `CONTACT`
         */
        this.addressType = AddressType.CONTACT;
        /**
         * Flag that denotes if address can be copied. Default value is `false`
         */
        this.canCopyAddress = false;
        /**
         * Flag that denoted if contact address is copied
         */
        this.isContactAddressCopied = false;
        /**
         * If enabled it will apply highlight classes to this component.
         * By default is `true`.
         */
        this.highlight = true;
        /**
         * Event emitted when address is submitted
         */
        this.submit = new EventEmitter();
        /**
         * Event emitted when address is discarded
         */
        this.discard = new EventEmitter();
        /**
         * Event emitted when address is deleted
         */
        this.delete = new EventEmitter();
        /**
         * Event emitted when address is editted
         */
        this.edit = new EventEmitter();
        /**
         * Event emitted when contact address has to be copied
         */
        this.contactAddressCopy = new EventEmitter();
        /**
         * Event emitted when add address action is triggered
         */
        this.add = new EventEmitter();
        /**
         * Event emitted when address is edited after it has been copied from contact address
         */
        this.addressEditAfterCopy = new EventEmitter();
        this.needsToRefocus = false;
        this.countriesList$ = of([]);
    }
    ngOnInit() {
        if (!this.viewType) {
            this.viewType = ViewType.FORM;
        }
        this.fieldGroupName = this.getFieldGroupName();
        this.address.country = this.address.country || '';
        if (this.addressType === AddressType.BANK) {
            this.countriesList$ = this.contactCountryListService.getFromExternalSource().pipe(shareReplay());
        }
        else {
            this.countriesList$ = this.contactCountryListService.getFromLocalSource();
        }
    }
    ngAfterViewChecked() {
        var _a, _b;
        if (this.needsToRefocus) {
            (_b = (_a = this.firstTabElement) === null || _a === void 0 ? void 0 : _a.inputEl) === null || _b === void 0 ? void 0 : _b.nativeElement.focus();
            this.needsToRefocus = false;
        }
    }
    /**
     *
     * @returns {string} Name of the addressType.
     */
    getFieldGroupName() {
        return `${InputGroupName.ADDRESS}[${this.addressType}]`;
    }
    /**
     * Emits the add address event
     *
     * @param {boolean} isAddAddress whether address should be added
     */
    addAddress(isAddAddress) {
        this.add.emit(isAddAddress);
        this.needsToRefocus = true;
    }
    /**
     * Emits the edit address event
     */
    editAddress() {
        this.edit.emit(this.address);
        this.needsToRefocus = true;
    }
    /**
     * Emits the discard address event
     */
    discardAddress() {
        this.discard.emit(this.fieldGroupName);
    }
    /**
     * Emits the delete address event
     */
    deleteAddress() {
        this.delete.emit(this.fieldGroupName);
    }
    /**
     *  Emits the submit address event if valid.
     */
    submitAddress() {
        if (isObjectTruthy(this.address)) {
            this.submit.emit(this.fieldGroupName);
        }
        else {
            this.deleteAddress();
        }
    }
    /**
     * Emits the copy address event
     */
    copyContactAddress() {
        this.contactAddressCopy.emit(this.isContactAddressCopied);
    }
    /**
     * Emits the addressEditAfterCopy event
     */
    onAddressEdit() {
        if (this.addressType === AddressType.ACCOUNTHOLDER && this.canCopyAddress) {
            this.addressEditAfterCopy.emit();
        }
    }
}
/** @nocollapse */ ContactAddressDataComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactAddressDataComponent, deps: [{ token: i1.ContactCountryListService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ ContactAddressDataComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ContactAddressDataComponent, selector: "bb-contact-address-data", inputs: { isAddAddress: "isAddAddress", address: "address", addressType: "addressType", canCopyAddress: "canCopyAddress", isContactAddressCopied: "isContactAddressCopied", viewType: "viewType", highlight: "highlight" }, outputs: { submit: "submit", discard: "discard", delete: "delete", edit: "edit", contactAddressCopy: "contactAddressCopy", add: "add", addressEditAfterCopy: "addressEditAfterCopy" }, viewQueries: [{ propertyName: "firstTabElement", first: true, predicate: ["addressLine1"], descendants: true }], ngImport: i0, template: "<div class=\"bb-block bb-block--md\" *ngIf=\"!hostRef.isAddAddress\">\n  <button\n    bbButton\n    color=\"link\"\n    (click)=\"hostRef.addAddress(true)\"\n    [attr.data-role]=\"'contact-add-address' + hostRef.addressType\"\n  >\n    <bb-icon-ui class=\"alert-icon\" name=\"control-point\"> </bb-icon-ui>\n    <ng-container i18n=\"@@contact-address-data.add.address.label\">\n      Add {hostRef.addressType, select, bank {bank} accountHolder {account holder's} other {contact}} address\n    </ng-container>\n  </button>\n</div>\n\n<div\n  class=\"bb-block bb-block--lg card card-section\"\n  *ngIf=\"hostRef.viewType === 'CARD'\"\n  [ngClass]=\"{ 'card-section--highlight': hostRef.highlight }\"\n  [attr.data-role]=\"'contact-card-address' + hostRef.addressType\"\n>\n  <div class=\"bb-stack bb-block bb-block--sm\">\n    <div class=\"bb-stack__item bb-text-bold\" i18n=\"@@contact-address-data.contactaddress.card.label\">\n      {hostRef.addressType, select, bank {Bank} accountHolder {Account holder's} other {Contact}} address\n    </div>\n    <div class=\"bb-stack__item bb-stack__item--push-right\">\n      <button\n        bbButton\n        [attr.data-role]=\"'contact-edit-address' + hostRef.addressType\"\n        [circle]=\"true\"\n        size=\"sm\"\n        color=\"link\"\n        (click)=\"hostRef.editAddress()\"\n        bbTooltip=\"Edit address\"\n        triggers=\"hover focus\"\n        i18n-bbTooltip=\"@@contact-address-data.contactaddress.card.buttons.edit.label\"\n      >\n        <bb-icon-ui color=\"dark\" name=\"edit\"></bb-icon-ui>\n      </button>\n      <button\n        bbButton\n        [attr.data-role]=\"'contact-delete-address' + hostRef.addressType\"\n        [circle]=\"true\"\n        size=\"sm\"\n        color=\"link\"\n        (click)=\"hostRef.deleteAddress()\"\n        bbTooltip=\"Delete address\"\n        triggers=\"hover focus\"\n        i18n-bbTooltip=\"@@contact-address-data.contactaddress.card.buttons.delete.label\"\n      >\n        <bb-icon-ui color=\"dark\" name=\"delete\"></bb-icon-ui>\n      </button>\n    </div>\n  </div>\n  <bb-contact-full-address [address]=\"hostRef.address\"></bb-contact-full-address>\n</div>\n\n<div\n  class=\"bb-stack bb-block bb-block--lg card card-section\"\n  *ngIf=\"hostRef.isAddAddress\"\n  [ngClass]=\"{\n    'd-none': hostRef.viewType === 'CARD',\n    'card-section--highlight': hostRef.highlight\n  }\"\n>\n  <fieldset [ngModelGroup]=\"hostRef.fieldGroupName\" (input)=\"hostRef.onAddressEdit()\">\n    <legend class=\"sr-only\" i18n=\"@@contact-address-data.addressGroup.title\">Address details</legend>\n    <div class=\"bb-block bb-block--sm\">\n      <div class=\"bb-stack bb-stack--align-top\">\n        <div class=\"bb-block bb-block--lg bb-stack__item bb-select-context__back\" data-role=\"create-contact-form\">\n          <span class=\"d-none\" aria-hidden=\"true\" i18n=\"@@contact-address-data.contactaddress.label\" #heading>\n            {hostRef.addressType, select, bank {Bank} accountHolder {Account holder's} other {Contact}} address\n          </span>\n          <bb-header-ui\n            id=\"headerTtitle\"\n            headingType=\"h4\"\n            [heading]=\"heading.textContent\"\n            data-role=\"contact-address-label\"\n          >\n          </bb-header-ui>\n        </div>\n      </div>\n      <bb-input-text-ui\n        #addressLine1\n        label=\"Primary address line, street name and number\"\n        i18n-label=\"@@contact-address-data.addressLine1.info-label\"\n        [(ngModel)]=\"hostRef.address.addressLine1\"\n        data-role=\"addressLine1\"\n        [name]=\"(hostRef.addressType + 'AddressLine1') | camelcase\"\n        [maxLength]=\"70\"\n      >\n      </bb-input-text-ui>\n    </div>\n    <div class=\"bb-block bb-block--md\">\n      <bb-input-text-ui\n        label=\"Additional address line 2\"\n        i18n-label=\"@@contact-address-data.contactaddress2.info-label\"\n        [(ngModel)]=\"hostRef.address.addressLine2\"\n        data-role=\"addressLine2\"\n        [name]=\"(hostRef.addressType + 'AddressLine2') | camelcase\"\n        [maxLength]=\"70\"\n      >\n      </bb-input-text-ui>\n    </div>\n    <div class=\"bb-block bb-block--md\">\n      <bb-input-text-ui\n        label=\"Additional address line 3\"\n        i18n-label=\"@@contact-address-data.streetName.info-label\"\n        [(ngModel)]=\"hostRef.address.streetName\"\n        data-role=\"addressLine3\"\n        [name]=\"(hostRef.addressType + 'StreetName') | camelcase\"\n        [maxLength]=\"70\"\n      >\n      </bb-input-text-ui>\n    </div>\n    <div class=\"row\">\n      <div class=\"bb-block bb-block--lg col-sm-5 col-xs-12\">\n        <bb-input-text-ui\n          label=\"Post code / ZIP\"\n          i18n-label=\"@@contact-address-data.contactPostCode.label\"\n          [(ngModel)]=\"hostRef.address.postCode\"\n          data-role=\"postCode\"\n          [name]=\"(hostRef.addressType + 'PostCode') | camelcase\"\n          [maxLength]=\"16\"\n        >\n        </bb-input-text-ui>\n      </div>\n      <div class=\"bb-block bb-block--lg col-sm-7 col-xs-12\">\n        <bb-input-text-ui\n          label=\"City or town\"\n          i18n-label=\"@@contact-address-data.town.label\"\n          [(ngModel)]=\"hostRef.address.town\"\n          data-role=\"town\"\n          [name]=\"(hostRef.addressType + 'Town') | camelcase\"\n          [maxLength]=\"35\"\n        >\n        </bb-input-text-ui>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"bb-block bb-block--lg col-sm-7 col-xs-12\">\n        <bb-input-text-ui\n          label=\"State or area\"\n          i18n-label=\"@@contact-address-data.countrySubDivision.label\"\n          [(ngModel)]=\"hostRef.address.countrySubDivision\"\n          data-role=\"stateOrArea\"\n          [name]=\"(hostRef.addressType + 'CountrySubDivision') | camelcase\"\n          [maxLength]=\"35\"\n        >\n        </bb-input-text-ui>\n      </div>\n      <div class=\"bb-block bb-block--lg col-sm-5 col-xs-12\">\n        <bb-dropdown-single-select-ui\n          label=\"Country\"\n          i18n-label=\"@@contact-address-data.contactCountry.label\"\n          (change)=\"hostRef.onAddressEdit()\"\n          [(ngModel)]=\"hostRef.address.country\"\n          data-role=\"contactCountry\"\n          [name]=\"(hostRef.addressType + 'Country') | camelcase\"\n          placeholder=\"Select country\"\n          i18n-placeholder=\"@@bb-create-contact.dropdown.country.placeholder\"\n        >\n          <ng-container *ngFor=\"let country of countriesList$ | async\">\n            <span class=\"d-none\" aria-hidden=\"true\" #countryItem>\n              <bb-country-item [code]=\"country\"></bb-country-item>\n            </span>\n            <bb-dropdown-single-select-option-ui [value]=\"country\" [label]=\"countryItem.textContent\">\n            </bb-dropdown-single-select-option-ui>\n          </ng-container>\n        </bb-dropdown-single-select-ui>\n      </div>\n    </div>\n\n    <div class=\"row bb-block bb-block--lg\" *ngIf=\"hostRef.canCopyAddress && hostRef.addressType === 'accountHolder'\">\n      <div class=\"col-12\">\n        <bb-input-checkbox-ui\n          label=\"Use contact address as account holder's address\"\n          i18n-label=\"@@contact-address-data.copy.contact.address.label\"\n          data-role=\"copy-contact-address-checkbox\"\n          [name]=\"copyContactAddressInputName\"\n          (change)=\"hostRef.copyContactAddress()\"\n          [(ngModel)]=\"hostRef.isContactAddressCopied\"\n        >\n        </bb-input-checkbox-ui>\n      </div>\n    </div>\n\n    <div class=\"bb-button-bar bb-button-bar--reverse\">\n      <button\n        bbButton\n        class=\"bb-button-bar__button\"\n        color=\"primary\"\n        (click)=\"hostRef.submitAddress()\"\n        data-role=\"contact-confirm-address\"\n      >\n        <ng-container i18n=\"@@contact-create.modal.btn.addAddress\"> Confirm address </ng-container>\n      </button>\n      <button\n        bbButton\n        class=\"bb-button-bar__button\"\n        color=\"secondary\"\n        (click)=\"hostRef.discardAddress()\"\n        data-role=\"contact-cancel-address\"\n      >\n        <ng-container i18n=\"@@contact-create.modal.btn.discard\"> Discard </ng-container>\n      </button>\n    </div>\n  </fieldset>\n</div>\n", components: [{ type: i2.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i3.ContactFullAddressComponent, selector: "bb-contact-full-address", inputs: ["address"] }, { type: i4.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i5.InputTextComponent, selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i6.DropdownSingleSelectComponent, selector: "bb-dropdown-single-select-ui", inputs: ["placeholder", "defaultOptionAsPlaceholder", "options", "displayAttributePath", "iconName", "compareWithFn"] }, { type: i7.CountryItemComponent, selector: "bb-country-item", inputs: ["code"] }, { type: i6.DropdownSingleSelectOptionComponent, selector: "bb-dropdown-single-select-option-ui", inputs: ["value", "label"] }, { type: i8.InputCheckboxComponent, selector: "bb-input-checkbox-ui", inputs: ["indeterminate"], outputs: ["indeterminateChange"] }], directives: [{ type: i9.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i10.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i9.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i11.TooltipDirective, selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i12.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i12.NgModelGroup, selector: "[ngModelGroup]", inputs: ["ngModelGroup"], exportAs: ["ngModelGroup"] }, { type: i12.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i12.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i9.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "camelcase": i13.CamelCasePipe, "async": i9.AsyncPipe }, viewProviders: [{ provide: ControlContainer, useExisting: NgModelGroup }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactAddressDataComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-contact-address-data',
                    templateUrl: './contact-address-data.component.html',
                    viewProviders: [{ provide: ControlContainer, useExisting: NgModelGroup }],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.ContactCountryListService }]; }, propDecorators: { isAddAddress: [{
                type: Input
            }], address: [{
                type: Input
            }], addressType: [{
                type: Input
            }], canCopyAddress: [{
                type: Input
            }], isContactAddressCopied: [{
                type: Input
            }], viewType: [{
                type: Input
            }], highlight: [{
                type: Input
            }], submit: [{
                type: Output
            }], discard: [{
                type: Output
            }], delete: [{
                type: Output
            }], edit: [{
                type: Output
            }], contactAddressCopy: [{
                type: Output
            }], add: [{
                type: Output
            }], addressEditAfterCopy: [{
                type: Output
            }], firstTabElement: [{
                type: ViewChild,
                args: ['addressLine1']
            }] } });
//# sourceMappingURL=contact-address-data.component.js.map