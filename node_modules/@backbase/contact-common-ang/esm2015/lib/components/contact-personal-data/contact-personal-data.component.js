import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';
import { ControlContainer, NgForm } from '@angular/forms';
import { InputGroupName, ViewType } from '../../models/types';
import { isObjectTruthy } from '../../helpers/address';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "@backbase/ui-ang/input-text";
import * as i3 from "@backbase/ui-ang/input-validation-message";
import * as i4 from "@backbase/ui-ang/input-email";
import * as i5 from "../contact-address-data/contact-address-data.component";
import * as i6 from "../../directives/no-white-space-validator/no-white-space.directive";
import * as i7 from "@angular/common";
import * as i8 from "../../directives/email-domain/email-domain-validator.directive";
/**
 * The component is for showing persons personal data.
 *
 * The following extension slots are available in this component:
 *  - `ContactPersonalDataCustomizableDirective`
 *
 * @see ContactPersonalDataCustomizableDirective
 * @usageNotes
 *
 * ### Display contact personal data
 *
 * ```html
 *    <bb-contact-personal-data
 *      [contact]="hostRef.formModel.contact"
 *      [address]="hostRef.contactAddress"
 *      [viewType]="hostRef.contactViewType"
 *      [isAddContactAddress]= "hostRef.isAddContactAddress"
 *      (contactAddressAdd)= "hostRef.addContactAddress($event)"
 *      (viewChange)="hostRef.changeContactView($event)">
 *    </bb-contact-personal-data>
 * ```
 * @ngModule ContactPersonalDataModule
 */
export class ContactPersonalDataComponent {
    constructor(ctrlContainer) {
        this.ctrlContainer = ctrlContainer;
        this.hostRef = this;
        this.contactInputGroupName = InputGroupName.CONTACT;
        /**
         * Flag that denotes if contact address should be added
         */
        this.isAddContactAddress = false;
        /**
         * Event emitted when contact add address flag changes
         */
        this.contactAddressAdd = new EventEmitter();
        /**
         *
         * Event emitted when contact address view is changed
         */
        this.viewChange = new EventEmitter();
    }
    ngOnInit() {
        if (isObjectTruthy(this.address)) {
            this.originalAddress = Object.assign({}, this.address);
        }
    }
    /**
     * Returns the control of the form
     *
     * @param {string} controlName name of a form control
     * @returns {AbstractControl | null} form control for given name.
     */
    getFormControl(controlName) {
        const contactInputGroup = this.ctrlContainer.controls[this.contactInputGroupName];
        if (contactInputGroup) {
            return contactInputGroup.controls[controlName];
        }
        return null;
    }
    /**
     * Resets the control of the form.
     *
     * @param {string} controlName name of a form control
     */
    reset(controlName) {
        const formControl = this.getFormControl(controlName);
        if (formControl) {
            formControl.reset();
        }
    }
    /**
     * Updates the form status and mark as touched.
     * Also changes the view to CARD view once done.
     *
     * @param {string} controlName name of a form control
     */
    onAddressSubmit(controlName) {
        const address = this.getFormControl(controlName);
        if (address) {
            address.markAllAsTouched();
            address.updateValueAndValidity();
            if (address.valid) {
                this.originalAddress = Object.assign({}, address.value);
                this.viewChange.emit(ViewType.CARD);
            }
        }
    }
    /**
     * Emits the contact address add event
     *
     * @param {boolean} isAddAddress Emits the contact address add
     */
    onAddressAdd(isAddAddress) {
        this.contactAddressAdd.emit(isAddAddress);
    }
    /**
     * hanges the view to form.
     */
    onAddressEdit() {
        this.viewChange.emit(ViewType.FORM);
    }
    /**
     * If there is no update then returns to card view.
     *
     * @param {string} controlName name of a form control
     */
    onAddressDiscard(controlName) {
        if (this.originalAddress) {
            this.address = Object.assign({}, this.originalAddress);
            this.viewChange.emit(ViewType.CARD);
        }
        else {
            this.onAddressDelete(controlName);
        }
    }
    /**
     * deletes the address and resets the form.
     *
     * @param {string} controlName name of a form control
     */
    onAddressDelete(controlName) {
        this.originalAddress = undefined;
        this.contactAddressAdd.emit(false);
        this.reset(controlName);
        this.viewChange.emit(ViewType.FORM);
    }
}
/** @nocollapse */ ContactPersonalDataComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactPersonalDataComponent, deps: [{ token: i1.ControlContainer }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ ContactPersonalDataComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ContactPersonalDataComponent, selector: "bb-contact-personal-data", inputs: { viewType: "viewType", contact: "contact", isAddContactAddress: "isAddContactAddress", address: "address", forceChangeDetection: "forceChangeDetection" }, outputs: { contactAddressAdd: "contactAddressAdd", viewChange: "viewChange" }, ngImport: i0, template: "<div>\n  <fieldset [ngModelGroup]=\"'contactDetails'\">\n    <legend class=\"sr-only\" i18n=\"@@contact-personal-data.personalDetailsGroup.title\">Contact details</legend>\n    <div class=\"row\">\n      <div class=\"bb-block bb-block--lg col-sm-6 col-xs-12\">\n        <label #contactNameLabel id=\"bb-create-contact-name-label\" i18n=\"@@contact-personal-data.contactName.label\"\n          >Name</label\n        >\n        <span class=\"bb-text-support\">\n          (<ng-container i18n=\"@@contact-account-data.accountName.text-support.required.label\">Required</ng-container>)\n        </span>\n        <bb-input-text-ui\n          name=\"name\"\n          class=\"bb-block bb-block--sm\"\n          #contactNameModel=\"ngModel\"\n          [(ngModel)]=\"hostRef.contact.name\"\n          [maxLength]=\"140\"\n          [required]=\"true\"\n          [aria-labelledby]=\"contactNameLabel.id\"\n          aria-describedby=\"fullname-description\"\n          data-role=\"contact-name\"\n          bbNoWhiteSpace\n        >\n        </bb-input-text-ui>\n        <small\n          id=\"fullname-description\"\n          *ngIf=\"!contactNameModel.touched\"\n          class=\"bb-text-support bb-block bb-block--sm\"\n          i18n=\"@@contact-personal-data.contactName.infoText\"\n        >\n          Full name or company name\n        </small>\n        <bb-input-validation-message-ui\n          role=\"alert\"\n          [showErrors]=\"contactNameModel.invalid && contactNameModel.touched\"\n        >\n          <ng-container>\n            <span i18n=\"@@contact-personal-data.contactName.minLengthErrorText\" data-role=\"missing-contact-name\"\n              >Full name or company name is required</span\n            >\n          </ng-container>\n        </bb-input-validation-message-ui>\n      </div>\n      <div class=\"bb-block bb-block--lg bb-stack__item--align-top col-sm-6 col-xs-12\">\n        <bb-input-text-ui\n          label=\"Contact person\"\n          i18n-label=\"@@contact-personal-data.contactPerson.label\"\n          class=\"bb-stack__item--align-bottom\"\n          data-role=\"contact-person\"\n          [(ngModel)]=\"hostRef.contact.contactPerson\"\n          name=\"contactPerson\"\n          [maxLength]=\"70\"\n        >\n        </bb-input-text-ui>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"bb-block bb-block--lg col-sm-6 col-xs-12\">\n        <bb-input-text-ui\n          data-role=\"contact-alias\"\n          label=\"Alias\"\n          i18n-label=\"@@contact-personal-data.contactAlias.label\"\n          [(ngModel)]=\"hostRef.contact.alias\"\n          name=\"alias\"\n          [maxLength]=\"70\"\n        >\n        </bb-input-text-ui>\n      </div>\n      <div class=\"bb-block bb-block--lg col-sm-6 col-xs-12\">\n        <bb-input-text-ui\n          label=\"Phone number\"\n          i18n-label=\"@@contact-personal-data.contactPhoneNumber.label\"\n          data-role=\"contact-phone-number\"\n          [(ngModel)]=\"hostRef.contact.phoneNumber\"\n          name=\"phoneNumber\"\n          [maxLength]=\"30\"\n        >\n        </bb-input-text-ui>\n      </div>\n    </div>\n    <div class=\"row bb-block bb-block--lg\">\n      <div class=\"bb-block bb-block--no-margin col-lg-8 col-sm-8 col-xs-12\">\n        <bb-input-email-ui\n          label=\"E-mail\"\n          i18n-label=\"@@contact-personal-data.contactEmail.label\"\n          data-role=\"contact-email\"\n          [(ngModel)]=\"hostRef.contact.emailId\"\n          #emailModel=\"ngModel\"\n          name=\"emailId\"\n          bbEmailDomainValidator\n        >\n        </bb-input-email-ui>\n        <bb-input-validation-message-ui role=\"alert\" [showErrors]=\"emailModel.invalid && emailModel.touched\">\n          <ng-container *ngIf=\"emailModel.errors?.email\">\n            <span i18n=\"@@contact-personal-data.email.errorText\" data-role=\"invalid-email\">Invalid email</span>\n          </ng-container>\n        </bb-input-validation-message-ui>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"bb-block col-12\" data-role=\"contact-address-container\">\n        <bb-contact-address-data\n          [highlight]=\"false\"\n          [isAddAddress]=\"hostRef.isAddContactAddress\"\n          [viewType]=\"hostRef.viewType\"\n          [address]=\"hostRef.address\"\n          (add)=\"hostRef.onAddressAdd($event)\"\n          (edit)=\"hostRef.onAddressEdit()\"\n          (discard)=\"hostRef.onAddressDiscard($event)\"\n          (delete)=\"hostRef.onAddressDelete($event)\"\n          (submit)=\"hostRef.onAddressSubmit($event)\"\n        >\n        </bb-contact-address-data>\n      </div>\n    </div>\n  </fieldset>\n</div>\n", components: [{ type: i2.InputTextComponent, selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i3.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i4.InputEmailComponent, selector: "bb-input-email-ui", inputs: ["placeholder", "maxLength", "minLength", "readonly", "autocomplete"] }, { type: i5.ContactAddressDataComponent, selector: "bb-contact-address-data", inputs: ["isAddAddress", "address", "addressType", "canCopyAddress", "isContactAddressCopied", "viewType", "highlight"], outputs: ["submit", "discard", "delete", "edit", "contactAddressCopy", "add", "addressEditAfterCopy"] }], directives: [{ type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1.NgModelGroup, selector: "[ngModelGroup]", inputs: ["ngModelGroup"], exportAs: ["ngModelGroup"] }, { type: i6.NoWhiteSpaceValidatorDirective, selector: "[bbNoWhiteSpace]" }, { type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i1.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i7.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i8.EmailDomainValidatorDirective, selector: "[bbEmailDomainValidator]" }], viewProviders: [{ provide: ControlContainer, useExisting: NgForm }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactPersonalDataComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-contact-personal-data',
                    templateUrl: './contact-personal-data.component.html',
                    viewProviders: [{ provide: ControlContainer, useExisting: NgForm }],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.ControlContainer }]; }, propDecorators: { viewType: [{
                type: Input
            }], contact: [{
                type: Input
            }], isAddContactAddress: [{
                type: Input
            }], address: [{
                type: Input
            }], forceChangeDetection: [{
                type: Input
            }], contactAddressAdd: [{
                type: Output
            }], viewChange: [{
                type: Output
            }] } });
//# sourceMappingURL=contact-personal-data.component.js.map