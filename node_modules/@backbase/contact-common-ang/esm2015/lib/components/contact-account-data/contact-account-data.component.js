import { ChangeDetectionStrategy, Component, EventEmitter, Inject, Input, Output, } from '@angular/core';
import { ControlContainer, FormControl, NgForm } from '@angular/forms';
import { AddressType, InputGroupName, ViewType } from '../../models/types';
import { addressFromAccountHolder, addressFromBank, isObjectTruthy } from '../../helpers/address';
import { BB_CONTACT_BANK_ACCOUNT_TYPES_LIST } from '../../config.providers';
import { IbanMask } from '../../constants';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "@backbase/ui-ang/input-text";
import * as i3 from "@backbase/ui-ang/input-validation-message";
import * as i4 from "@backbase/ui-ang/dropdown-single-select";
import * as i5 from "../contact-address-data/contact-address-data.component";
import * as i6 from "../account-card-view/account-card-view.component";
import * as i7 from "@angular/common";
import * as i8 from "../../directives/no-white-space-validator/no-white-space.directive";
import * as i9 from "../../directives/iban-validator/iban-validator.directive";
/**
 * The component is for showing contact  account data.
 *
 *
 * @usageNotes
 *
 * ### Display contact account data
 *
 * ```html
 *  <bb-contact-account-data
 *   [highlight]="false"
 *   [index]="index"
 *   [account]="account.data"
 *   [accountView]="account.viewType"
 *   [bankAddressViewType]="account.bankAddressViewType"
 *   [accountHolderAddressViewType]="account.accountHolderAddressViewType"
 *   [isAddBankAddress]="account.isAddBankAddress"
 *   [canCopyAddress]="hostRef.canCopyAddress()"
 *   [isContactAddressCopied]="account.isContactAddressCopied"
 *   [bankAddress]="account.bankAddress"
 *   [accountHolderAddress]="account.accountHolderAddress"
 *   [isAddAccountHolderAddress]="account.isAddAccountHolderAddress"
 *   [isAccountTypeRequired]="hostRef.isAccountTypeRequired"
 *   (bankAddressAdd)="hostRef.addBankAddress($event, index)"
 *   (accountHolderAddressAdd)="hostRef.addAccountHolderAddress($event, index)"
 *   (bankAddressViewChange)="hostRef.changeBankAddressView($event, index)"
 *   (accountHolderAddressViewChange)="hostRef.changeAccountHolderAddressView($event, index)"
 *   (editAccount)="hostRef.editAccount($event, formRef)"
 *   (deleteAccount)="hostRef.deleteAccount($event)"
 *   (contactAddressCopy)="hostRef.copyAddress($event, index)"
 *   (addressEditAfterCopy)="hostRef.onAddressEditAfterCopy(index)">
 * </bb-contact-account-data>
 * ```
 * @ngModule ContactAccountDataModule
 */
export class ContactAccountDataComponent {
    constructor(ctrlContainer, accountTypeList) {
        this.ctrlContainer = ctrlContainer;
        this.accountTypeList = accountTypeList;
        this.hostRef = this;
        this.addressType = AddressType;
        this.ibanMask = IbanMask;
        /**
         * Current index of the account Information
         */
        this.index = 0;
        /**
         * Current view type of the account. Possible values `FORM`| `CARD`. Defaults to `FORM`
         */
        this.accountView = ViewType.FORM;
        /**
         * Event emitted when the account is edited, i.e, switch from `CARD` view to `FORM` View
         */
        this.editAccount = new EventEmitter();
        /**
         * View type of the bank address
         */
        this.bankAddressViewType = ViewType.FORM;
        /**
         * View type of the account holder address
         */
        this.accountHolderAddressViewType = ViewType.FORM;
        /**
         * Flag that denotes if bank address should be added
         */
        this.isAddBankAddress = false;
        /**
         * Flag that denotes if address can be copied. Default value is `false`
         */
        this.canCopyAddress = false;
        /**
         * The bank address details
         */
        this.bankAddress = {};
        /**
         * The account holder address details
         */
        this.accountHolderAddress = {};
        /**
         * Flag that denotes if account holder address should be added
         */
        this.isAddAccountHolderAddress = false;
        /**
         * Flag that denotes if contact address is copied
         */
        this.isContactAddressCopied = false;
        /**
         * If enabled it will apply highlight classes to this component.
         * By default is `true`.
         */
        this.highlight = true;
        /**
         * If enabled the accountType is mandatory field.
         */
        this.isAccountTypeRequired = false;
        /**
         * Event emitted when add bank address flag changes
         */
        this.bankAddressAdd = new EventEmitter();
        /**
         * Event emitted when add account holder address flag changes
         */
        this.accountHolderAddressAdd = new EventEmitter();
        /**
         * Event emitted when bank address view is changed
         */
        this.bankAddressViewChange = new EventEmitter();
        /**
         * Event emitted when accountHolder address view is changed
         */
        this.accountHolderAddressViewChange = new EventEmitter();
        /**
         * Event emitted when contact address has to be copied
         */
        this.contactAddressCopy = new EventEmitter();
        /**
         * Event emitted when the account is deleted
         */
        this.deleteAccount = new EventEmitter();
        /**
         * Event emitted when address is edited after it has been copied from contact address
         */
        this.addressEditAfterCopy = new EventEmitter();
    }
    ngOnInit() {
        this.accountInputGroupName = this.getName();
        if (Object.keys(this.bankAddress).length) {
            this.originalBankAddress = Object.assign({}, this.bankAddress);
        }
        if (Object.keys(this.accountHolderAddress).length) {
            this.originalAccountHolderAddress = Object.assign({}, this.accountHolderAddress);
        }
    }
    ngOnChanges(changes) {
        if (changes['index']) {
            this.accountInputGroupName = this.getName();
        }
    }
    /**
     *
     * @returns {string} Name of the current index of contact account.
     */
    getName() {
        return `${InputGroupName.ACCOUNT}[${this.index}]`;
    }
    /**
     * Emits the delete event
     *
     * @param {?number} accountIndex - account Index
     */
    onDeleteAccount(accountIndex) {
        this.deleteAccount.emit(accountIndex || this.index);
    }
    /**
     * Emits the contactAddressCopy event
     *
     * @param {boolean} isCopy - if copy is allowed.
     */
    onAddressCopy(isCopy) {
        this.contactAddressCopy.emit(isCopy);
    }
    /**
     * Emits the edit account method
     *
     * @param {?number} accountIndex index of an account
     */
    onEditAccount(accountIndex) {
        this.editAccount.emit(accountIndex || this.index);
    }
    /**
     * Emits the bankaddress add event
     *
     * @param {boolean} isAddAddress whether new address should be added
     */
    onBankAddressAdd(isAddAddress) {
        this.bankAddressAdd.emit(isAddAddress);
    }
    /**
     * Emits Bank address edit event
     */
    onBankAddressEdit() {
        this.bankAddressViewChange.emit(ViewType.FORM);
    }
    /**
     * Emits the bankaddress delete event with index
     *
     * @param {string} controlName name of a form control
     */
    onBankAddressDelete(controlName) {
        this.originalBankAddress = undefined;
        this.bankAddressAdd.emit(false);
        this.resetAddress(controlName);
        this.bankAddressViewChange.emit(ViewType.FORM);
    }
    /**
     * Emits appropriate event based on validity.
     *
     * @param {string} controlName name of a form control
     * @param {AddressType} addressType enumerated value
     */
    onAddressSubmit(controlName, addressType) {
        const address = this.getFormControl(controlName);
        address.markAllAsTouched();
        address.updateValueAndValidity();
        if (address.valid) {
            if (addressType === this.addressType.BANK) {
                this.originalBankAddress = Object.assign({}, addressFromBank(address.value));
                this.bankAddressViewChange.emit(ViewType.CARD);
            }
            else {
                this.originalAccountHolderAddress = Object.assign({}, addressFromAccountHolder(address.value));
                this.accountHolderAddressViewChange.emit(ViewType.CARD);
            }
        }
    }
    /**
     * Emits appropriate view ehn discarded.
     *
     * @param {string} controlName name of a form control
     */
    onBankAddressDiscard(controlName) {
        if (this.originalBankAddress) {
            this.bankAddress = Object.assign({}, this.originalBankAddress);
            this.bankAddressViewChange.emit(ViewType.CARD);
        }
        else {
            this.onBankAddressDelete(controlName);
        }
    }
    /**
     * Resets form control.
     *
     * @param {string} controlName name of a form control
     */
    resetAddress(controlName) {
        this.getFormControl(controlName).reset();
    }
    /**
     * Checks if the address is valid.
     *
     * @param {Address} address address object
     * @returns {boolean} whether address is valid
     */
    isValidAddress(address) {
        return isObjectTruthy(address);
    }
    /**
     * Returns the form control of given control name,
     *
     * @param {string} controlName name of a form control
     * @returns {AbstractControl} form control object
     */
    getFormControl(controlName) {
        const accountInputGroup = this.ctrlContainer.controls[this.accountInputGroupName];
        if (!accountInputGroup) {
            return new FormControl();
        }
        return accountInputGroup.controls[controlName];
    }
    /**
     * Emits event when account holder address is added
     *
     * @param {boolean} isAddAddress whether address should be added
     */
    onAccountHolderAddressAdd(isAddAddress) {
        this.accountHolderAddressAdd.emit(isAddAddress);
    }
    /**
     * Emits event when account holder address is edited.
     */
    onAccountHolderAddressEdit() {
        this.accountHolderAddressViewChange.emit(ViewType.FORM);
    }
    /**
     *Emits event when account holder address is deleted.
     *
     * @param {string} controlName name of a form control
     */
    onAccountHolderAddressDelete(controlName) {
        this.originalAccountHolderAddress = undefined;
        this.accountHolderAddressAdd.emit(false);
        this.resetAddress(controlName);
        this.accountHolderAddressViewChange.emit(ViewType.FORM);
    }
    /**
     * Emits account
     *
     * @param {string} controlName name of a form control
     */
    onAccountHolderAddressDiscard(controlName) {
        if (this.originalAccountHolderAddress) {
            this.accountHolderAddress = Object.assign({}, this.originalAccountHolderAddress);
            this.accountHolderAddressViewChange.emit(ViewType.CARD);
        }
        else {
            this.onAccountHolderAddressDelete(controlName);
        }
    }
    /**
     * Emits address after edit copy event
     */
    onAddressEditAfterCopy() {
        this.addressEditAfterCopy.emit();
    }
}
/** @nocollapse */ ContactAccountDataComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactAccountDataComponent, deps: [{ token: i1.ControlContainer }, { token: BB_CONTACT_BANK_ACCOUNT_TYPES_LIST }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ ContactAccountDataComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ContactAccountDataComponent, selector: "bb-contact-account-data", inputs: { index: "index", account: "account", accountView: "accountView", bankAddressViewType: "bankAddressViewType", accountHolderAddressViewType: "accountHolderAddressViewType", isAddBankAddress: "isAddBankAddress", canCopyAddress: "canCopyAddress", bankAddress: "bankAddress", accountHolderAddress: "accountHolderAddress", isAddAccountHolderAddress: "isAddAccountHolderAddress", isContactAddressCopied: "isContactAddressCopied", forceChangeDetection: "forceChangeDetection", highlight: "highlight", isAccountTypeRequired: "isAccountTypeRequired" }, outputs: { editAccount: "editAccount", bankAddressAdd: "bankAddressAdd", accountHolderAddressAdd: "accountHolderAddressAdd", bankAddressViewChange: "bankAddressViewChange", accountHolderAddressViewChange: "accountHolderAddressViewChange", contactAddressCopy: "contactAddressCopy", deleteAccount: "deleteAccount", addressEditAfterCopy: "addressEditAfterCopy" }, usesOnChanges: true, ngImport: i0, template: "<div [ngClass]=\"{'d-none': hostRef.accountView ==='CARD'}\">\n  <fieldset [ngModelGroup]=\"hostRef.accountInputGroupName\">\n    <legend class=\"sr-only\" i18n=\"@@contact-account-data.accountGroup.title\">Account details</legend>\n    <div class=\"row\">\n      <div class=\"bb-block bb-block--lg col-sm-6 col-xs-12\" data-role=\"contact-account-info-account-name1\">\n        <label\n          #accountNameLabel\n          id=\"bb-contact-account-data-accountName-label\"\n          i18n=\"@@contact-account-data.accountName.label\"\n        >\n          Account name\n        </label>\n        <span id=\"account-name-required-info\" class=\"bb-text-support\">\n          (<ng-container i18n=\"@@contact-account-data.accountName.text-support.required.label\">Required</ng-container>)\n        </span>\n        <bb-input-text-ui\n          name=\"name\"\n          #accountNameModel=\"ngModel\"\n          [(ngModel)]=\"hostRef.account.name\"\n          [maxLength]=\"140\"\n          [required]=\"true\"\n          [aria-labelledby]=\"accountNameLabel.id\"\n          aria-describedby=\"account-name-required-info\"\n          data-role=\"contact-account-info-account-name\"\n          bbNoWhiteSpace\n        >\n        </bb-input-text-ui>\n\n        <bb-input-validation-message-ui\n          role=\"alert\"\n          [showErrors]=\"accountNameModel.invalid && accountNameModel.touched\"\n        >\n          <ng-container>\n            <span i18n=\"@@contact-account-data.accountName.errorText\" data-role=\"missing-account-name\">\n              Account name is required\n            </span>\n          </ng-container>\n        </bb-input-validation-message-ui>\n      </div>\n      <div class=\"bb-block bb-block--lg col-sm-6 col-xs-12\">\n        <bb-input-text-ui\n          name=\"alias\"\n          label=\"Account alias\"\n          i18n-label=\"@@contact-account-data.accountAlias.label\"\n          [(ngModel)]=\"hostRef.account.alias\"\n          [maxLength]=\"34\"\n          data-role=\"account-alias\"\n        >\n        </bb-input-text-ui>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"bb-block bb-block--lg col-sm-6 col-xs-12\">\n        <label #ibanLabel id=\"bb-contact-account-data-iban-label\" i18n=\"@@contact-account-data.contactIBAN.label\">\n          IBAN\n        </label>\n        <span id=\"iban-required-info\" class=\"bb-text-support\">\n          (<ng-container i18n=\"@@contact-account-data.iban.text-support.required.label\"\n            >IBAN or BBAN is required</ng-container\n          >)\n        </span>\n        <bb-input-text-ui\n          name=\"IBAN\"\n          #ibanModel=\"ngModel\"\n          [(ngModel)]=\"hostRef.account.IBAN\"\n          [maxLength]=\"hostRef.ibanMask.length\"\n          [required]=\"!bbanModel.value\"\n          [aria-labelledby]=\"ibanLabel.id\"\n          aria-describedby=\"iban-required-info\"\n          [mask]=\"hostRef.ibanMask\"\n          [maskValidator]=\"false\"\n          data-role=\"contact-iban\"\n          bbIbanValidator\n        >\n        </bb-input-text-ui>\n        <bb-input-validation-message-ui\n          role=\"alert\"\n          [showErrors]=\"(ibanModel.invalid && ibanModel.touched || bbanModel.invalid && bbanModel.touched)\"\n        >\n          <ng-container *ngIf=\"ibanModel.errors && ibanModel?.errors.required\">\n            <span i18n=\"@@contact-account-data.iban.error.required\" data-role=\"missing-iban\">\n              IBAN or BBAN is required\n            </span>\n          </ng-container>\n          <ng-container *ngIf=\"ibanModel.errors && ibanModel?.errors.invalidIban\">\n            <span i18n=\"@@contact-account-data.accountName.error.iban\" data-role=\"invalid-iban\"> Invalid IBAN </span>\n          </ng-container>\n        </bb-input-validation-message-ui>\n      </div>\n      <div class=\"bb-block bb-block--lg col-sm-6 col-xs-12\">\n        <label #bbanLabel id=\"bb-contact-account-data-bban-label\" i18n=\"@@contact-account-data.contactBBAN.label\">\n          BBAN\n        </label>\n        <span id=\"bban-required-info\" class=\"bb-text-support\">\n          (<ng-container i18n=\"@@contact-account-data.bban.text-support.required.label\"\n            >IBAN or BBAN is required</ng-container\n          >)\n        </span>\n        <bb-input-text-ui\n          name=\"accountNumber\"\n          #bbanModel=\"ngModel\"\n          [(ngModel)]=\"hostRef.account.accountNumber\"\n          [maxLength]=\"34\"\n          [required]=\"!ibanModel.value\"\n          [aria-labelledby]=\"bbanLabel.id\"\n          aria-describedby=\"bban-required-info\"\n          data-role=\"contact-account-number\"\n        >\n        </bb-input-text-ui>\n        <bb-input-validation-message-ui\n          role=\"alert\"\n          [showErrors]=\"(ibanModel.invalid && ibanModel.touched || bbanModel.invalid && bbanModel.touched)\"\n        >\n          <ng-container *ngIf=\"bbanModel.errors && bbanModel?.errors.required\">\n            <span i18n=\"@@contact-account-data.iban.error.required\" data-role=\"missing-bban\">\n              IBAN or BBAN is required\n            </span>\n          </ng-container>\n        </bb-input-validation-message-ui>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"bb-block bb-block--lg col-sm-6 col-xs-12\">\n        <label\n          #accountTypeLabel\n          id=\"bb-contact-account-data-accountType-label\"\n          i18n=\"@@contact-account-data.accounType.label\"\n        >\n          Account type\n        </label>\n        <span id=\"account-type-required-info\" class=\"bb-text-support\" *ngIf=\"hostRef.isAccountTypeRequired\">\n          (<ng-container i18n=\"@@contact-account-data.accountType.text-support.required.label\">Required</ng-container>)\n        </span>\n        <bb-dropdown-single-select-ui\n          name=\"accountType\"\n          #accountTypeModel=\"ngModel\"\n          placeholder=\"Select\"\n          i18n-placeholder=\"@@bb-create-contact.dropdown.account.type.placeholder\"\n          [(ngModel)]=\"hostRef.account.accountType\"\n          [defaultOptionAsPlaceholder]=\"!hostRef.isAccountTypeRequired\"\n          [required]=\"hostRef.isAccountTypeRequired\"\n          [aria-labelledby]=\"accountTypeLabel.id\"\n          aria-describedby=\"account-type-required-info\"\n          data-role=\"bankAccountType\"\n        >\n          <ng-container *ngFor=\"let accountType of accountTypeList\">\n            <bb-dropdown-single-select-option-ui [value]=\"accountType\" [label]=\"accountType\">\n            </bb-dropdown-single-select-option-ui>\n          </ng-container>\n        </bb-dropdown-single-select-ui>\n\n        <bb-input-validation-message-ui\n          role=\"alert\"\n          [showErrors]=\"accountTypeModel.invalid && accountTypeModel.touched\"\n        >\n          <ng-container>\n            <span i18n=\"@@contact-account-data.accountType.errorText\" data-role=\"missing-account-type\">\n              Account type is required\n            </span>\n          </ng-container>\n        </bb-input-validation-message-ui>\n      </div>\n      <div class=\"bb-block bb-block--lg col-sm-6 col-xs-12\">\n        <bb-input-text-ui\n          name=\"bankCode\"\n          label=\"Bank branch code\"\n          i18n-label=\"@@contact-account-data.contactBankCode.label\"\n          [(ngModel)]=\"hostRef.account.bankCode\"\n          [maxLength]=\"20\"\n          data-role=\"bank-code\"\n        >\n        </bb-input-text-ui>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"bb-block bb-block--lg col-sm-6 col-xs-12\">\n        <bb-input-text-ui\n          name=\"bankName\"\n          label=\"Bank name\"\n          i18n-label=\"@@contact-account-data.contactBankName.label\"\n          [(ngModel)]=\"hostRef.account.bankName\"\n          [maxLength]=\"140\"\n          data-role=\"bank-name\"\n        >\n        </bb-input-text-ui>\n      </div>\n      <div class=\"bb-block bb-block--lg col-sm-6 col-xs-12\">\n        <bb-input-text-ui\n          name=\"BIC\"\n          #bicModel=\"ngModel\"\n          label=\"BIC\"\n          i18n-label=\"@@contact-account-data.contactBIC.label\"\n          [(ngModel)]=\"hostRef.account.BIC\"\n          (ngModelChange)=\"hostRef.account.BIC = $event && $event.toUpperCase()\"\n          pattern=\"^[A-Za-z]{6,6}[A-Za-z2-9][A-Na-nP-Zp-z0-9]([A-Za-z0-9]{3,3}){0,1}$\"\n          data-role=\"bic\"\n        >\n        </bb-input-text-ui>\n        <bb-input-validation-message-ui role=\"alert\" [showErrors]=\"bicModel.invalid && bicModel.touched\">\n          <ng-container *ngIf=\"bicModel.errors && bicModel?.errors.pattern\">\n            <span i18n=\"@@contact-account-data.accountName.error.bic\" data-role=\"invalid-bic\"> Invalid BIC </span>\n          </ng-container>\n        </bb-input-validation-message-ui>\n      </div>\n    </div>\n\n    <div data-role=\"bank-address-container\">\n      <bb-contact-address-data\n        [highlight]=\"hostRef.highlight\"\n        [isAddAddress]=\"hostRef.isAddBankAddress\"\n        [addressType]=\"'bank'\"\n        [viewType]=\"hostRef.bankAddressViewType\"\n        [address]=\"hostRef.bankAddress\"\n        (add)=\"hostRef.onBankAddressAdd($event)\"\n        (edit)=\"hostRef.onBankAddressEdit()\"\n        (discard)=\"hostRef.onBankAddressDiscard($event)\"\n        (delete)=\"hostRef.onBankAddressDelete($event)\"\n        (submit)=\"hostRef.onAddressSubmit($event, hostRef.addressType.BANK)\"\n      >\n      </bb-contact-address-data>\n    </div>\n    <div data-role=\"account-holder-address-container\">\n      <bb-contact-address-data\n        [highlight]=\"hostRef.highlight\"\n        [isAddAddress]=\"hostRef.isAddAccountHolderAddress\"\n        [addressType]=\"'accountHolder'\"\n        [canCopyAddress]=\"hostRef.canCopyAddress\"\n        [isContactAddressCopied]=\"hostRef.isContactAddressCopied\"\n        [viewType]=\"hostRef.accountHolderAddressViewType\"\n        [address]=\"hostRef.accountHolderAddress\"\n        (add)=\"hostRef.onAccountHolderAddressAdd($event)\"\n        (edit)=\"hostRef.onAccountHolderAddressEdit()\"\n        (discard)=\"hostRef.onAccountHolderAddressDiscard($event)\"\n        (delete)=\"hostRef.onAccountHolderAddressDelete($event)\"\n        (submit)=\"hostRef.onAddressSubmit($event, hostRef.addressType.ACCOUNTHOLDER)\"\n        (contactAddressCopy)=\"hostRef.onAddressCopy($event)\"\n        (addressEditAfterCopy)=\"hostRef.onAddressEditAfterCopy()\"\n      >\n      </bb-contact-address-data>\n    </div>\n  </fieldset>\n</div>\n\n<div\n  class=\"card card-section bb-block bb-block--lg\"\n  *ngIf=\"hostRef.accountView ==='CARD'\"\n  data-role=\"contact-account-card-address\"\n>\n  <bb-account-card-view\n    [index]=\"hostRef.index\"\n    [isEditMode]=\"true\"\n    [account]=\"hostRef.account\"\n    [bankAddress]=\"hostRef.bankAddress\"\n    [accountHolderAddress]=\"hostRef.accountHolderAddress\"\n    (deleteAccount)=\"hostRef.onDeleteAccount($event)\"\n    (editAccount)=\"hostRef.onEditAccount($event)\"\n  >\n  </bb-account-card-view>\n</div>\n", components: [{ type: i2.InputTextComponent, selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i3.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i4.DropdownSingleSelectComponent, selector: "bb-dropdown-single-select-ui", inputs: ["placeholder", "defaultOptionAsPlaceholder", "options", "displayAttributePath", "iconName", "compareWithFn"] }, { type: i4.DropdownSingleSelectOptionComponent, selector: "bb-dropdown-single-select-option-ui", inputs: ["value", "label"] }, { type: i5.ContactAddressDataComponent, selector: "bb-contact-address-data", inputs: ["isAddAddress", "address", "addressType", "canCopyAddress", "isContactAddressCopied", "viewType", "highlight"], outputs: ["submit", "discard", "delete", "edit", "contactAddressCopy", "add", "addressEditAfterCopy"] }, { type: i6.AccountCardViewComponent, selector: "bb-account-card-view", inputs: ["index", "account", "isEditMode", "bankAddress", "accountHolderAddress"], outputs: ["editAccount", "deleteAccount"] }], directives: [{ type: i7.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1.NgModelGroup, selector: "[ngModelGroup]", inputs: ["ngModelGroup"], exportAs: ["ngModelGroup"] }, { type: i8.NoWhiteSpaceValidatorDirective, selector: "[bbNoWhiteSpace]" }, { type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i1.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i9.IbanValidatorDirective, selector: "[bbIbanValidator]" }, { type: i7.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i7.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1.PatternValidator, selector: "[pattern][formControlName],[pattern][formControl],[pattern][ngModel]", inputs: ["pattern"] }], viewProviders: [{ provide: ControlContainer, useExisting: NgForm }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ContactAccountDataComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-contact-account-data',
                    templateUrl: './contact-account-data.component.html',
                    viewProviders: [{ provide: ControlContainer, useExisting: NgForm }],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.ControlContainer }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [BB_CONTACT_BANK_ACCOUNT_TYPES_LIST]
                }] }]; }, propDecorators: { index: [{
                type: Input
            }], account: [{
                type: Input
            }], accountView: [{
                type: Input
            }], editAccount: [{
                type: Output
            }], bankAddressViewType: [{
                type: Input
            }], accountHolderAddressViewType: [{
                type: Input
            }], isAddBankAddress: [{
                type: Input
            }], canCopyAddress: [{
                type: Input
            }], bankAddress: [{
                type: Input
            }], accountHolderAddress: [{
                type: Input
            }], isAddAccountHolderAddress: [{
                type: Input
            }], isContactAddressCopied: [{
                type: Input
            }], forceChangeDetection: [{
                type: Input
            }], highlight: [{
                type: Input
            }], isAccountTypeRequired: [{
                type: Input
            }], bankAddressAdd: [{
                type: Output
            }], accountHolderAddressAdd: [{
                type: Output
            }], bankAddressViewChange: [{
                type: Output
            }], accountHolderAddressViewChange: [{
                type: Output
            }], contactAddressCopy: [{
                type: Output
            }], deleteAccount: [{
                type: Output
            }], addressEditAfterCopy: [{
                type: Output
            }] } });
//# sourceMappingURL=contact-account-data.component.js.map