{"version":3,"file":"contact-account-data.component.js","sourceRoot":"","sources":["../../../../../../../libs/contact-common-ang/src/lib/components/contact-account-data/contact-account-data.component.ts","../../../../../../../libs/contact-common-ang/src/lib/components/contact-account-data/contact-account-data.component.html"],"names":[],"mappings":"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","sourcesContent":["import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  SimpleChanges,\n} from '@angular/core';\nimport { AbstractControl, ControlContainer, FormControl, FormGroup, NgForm } from '@angular/forms';\nimport { AccountInformation, Address, AddressType, InputGroupName, ViewType } from '../../models/types';\nimport { addressFromAccountHolder, addressFromBank, isObjectTruthy } from '../../helpers/address';\nimport { BB_CONTACT_BANK_ACCOUNT_TYPES_LIST } from '../../config.providers';\nimport { IbanMask } from '../../constants';\n\n/**\n * The component is for showing contact  account data.\n *\n *\n * @usageNotes\n *\n * ### Display contact account data\n *\n * ```html\n *  <bb-contact-account-data\n *   [highlight]=\"false\"\n *   [index]=\"index\"\n *   [account]=\"account.data\"\n *   [accountView]=\"account.viewType\"\n *   [bankAddressViewType]=\"account.bankAddressViewType\"\n *   [accountHolderAddressViewType]=\"account.accountHolderAddressViewType\"\n *   [isAddBankAddress]=\"account.isAddBankAddress\"\n *   [canCopyAddress]=\"hostRef.canCopyAddress()\"\n *   [isContactAddressCopied]=\"account.isContactAddressCopied\"\n *   [bankAddress]=\"account.bankAddress\"\n *   [accountHolderAddress]=\"account.accountHolderAddress\"\n *   [isAddAccountHolderAddress]=\"account.isAddAccountHolderAddress\"\n *   [isAccountTypeRequired]=\"hostRef.isAccountTypeRequired\"\n *   (bankAddressAdd)=\"hostRef.addBankAddress($event, index)\"\n *   (accountHolderAddressAdd)=\"hostRef.addAccountHolderAddress($event, index)\"\n *   (bankAddressViewChange)=\"hostRef.changeBankAddressView($event, index)\"\n *   (accountHolderAddressViewChange)=\"hostRef.changeAccountHolderAddressView($event, index)\"\n *   (editAccount)=\"hostRef.editAccount($event, formRef)\"\n *   (deleteAccount)=\"hostRef.deleteAccount($event)\"\n *   (contactAddressCopy)=\"hostRef.copyAddress($event, index)\"\n *   (addressEditAfterCopy)=\"hostRef.onAddressEditAfterCopy(index)\">\n * </bb-contact-account-data>\n * ```\n * @ngModule ContactAccountDataModule\n */\n@Component({\n  selector: 'bb-contact-account-data',\n  templateUrl: './contact-account-data.component.html',\n  viewProviders: [{ provide: ControlContainer, useExisting: NgForm }],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ContactAccountDataComponent implements OnInit, OnChanges {\n  hostRef: ContactAccountDataComponent = this;\n  readonly addressType = AddressType;\n  readonly ibanMask = IbanMask;\n\n  private originalBankAddress: Address | undefined;\n  private originalAccountHolderAddress: Address | undefined;\n\n  /**\n   * Current index of the account Information\n   */\n  @Input() index = 0;\n  /**\n   * The details of the account\n   */\n  @Input()\n  account!: AccountInformation;\n  /**\n   * Current view type of the account. Possible values `FORM`| `CARD`. Defaults to `FORM`\n   */\n  @Input() accountView: ViewType = ViewType.FORM;\n  /**\n   * Event emitted when the account is edited, i.e, switch from `CARD` view to `FORM` View\n   */\n  @Output() editAccount = new EventEmitter();\n  /**\n   * View type of the bank address\n   */\n  @Input() bankAddressViewType: ViewType = ViewType.FORM;\n  /**\n   * View type of the account holder address\n   */\n  @Input() accountHolderAddressViewType: ViewType = ViewType.FORM;\n  /**\n   * Flag that denotes if bank address should be added\n   */\n  @Input() isAddBankAddress = false;\n  /**\n   * Flag that denotes if address can be copied. Default value is `false`\n   */\n  @Input() canCopyAddress = false;\n  /**\n   * The bank address details\n   */\n  @Input() bankAddress = {};\n  /**\n   * The account holder address details\n   */\n  @Input() accountHolderAddress = {};\n  /**\n   * Flag that denotes if account holder address should be added\n   */\n  @Input() isAddAccountHolderAddress = false;\n  /**\n   * Flag that denotes if contact address is copied\n   */\n  @Input() isContactAddressCopied = false;\n  /**\n   * Property meant for forcing change detection when parent changes form state\n   */\n  @Input() forceChangeDetection: unknown;\n  /**\n   * If enabled it will apply highlight classes to this component.\n   * By default is `true`.\n   */\n  @Input() highlight = true;\n  /**\n   * If enabled the accountType is mandatory field.\n   */\n  @Input() isAccountTypeRequired = false;\n  /**\n   * Event emitted when add bank address flag changes\n   */\n  @Output() bankAddressAdd = new EventEmitter<boolean>();\n  /**\n   * Event emitted when add account holder address flag changes\n   */\n  @Output() accountHolderAddressAdd = new EventEmitter<boolean>();\n  /**\n   * Event emitted when bank address view is changed\n   */\n  @Output() bankAddressViewChange = new EventEmitter<ViewType>();\n  /**\n   * Event emitted when accountHolder address view is changed\n   */\n  @Output() accountHolderAddressViewChange = new EventEmitter<ViewType>();\n  /**\n   * Event emitted when contact address has to be copied\n   */\n  @Output() contactAddressCopy = new EventEmitter<boolean>();\n  /**\n   * Event emitted when the account is deleted\n   */\n  @Output() deleteAccount = new EventEmitter();\n  /**\n   * Event emitted when address is edited after it has been copied from contact address\n   */\n  @Output() addressEditAfterCopy = new EventEmitter();\n\n  accountInputGroupName!: string;\n\n  constructor(\n    private readonly ctrlContainer: ControlContainer,\n    @Inject(BB_CONTACT_BANK_ACCOUNT_TYPES_LIST) public accountTypeList: string[],\n  ) {}\n\n  ngOnInit() {\n    this.accountInputGroupName = this.getName();\n    if (Object.keys(this.bankAddress).length) {\n      this.originalBankAddress = { ...this.bankAddress };\n    }\n    if (Object.keys(this.accountHolderAddress).length) {\n      this.originalAccountHolderAddress = { ...this.accountHolderAddress };\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['index']) {\n      this.accountInputGroupName = this.getName();\n    }\n  }\n  /**\n   *\n   * @returns {string} Name of the current index of contact account.\n   */\n  getName() {\n    return `${InputGroupName.ACCOUNT}[${this.index}]`;\n  }\n  /**\n   * Emits the delete event\n   *\n   * @param {?number} accountIndex - account Index\n   */\n  onDeleteAccount(accountIndex?: number) {\n    this.deleteAccount.emit(accountIndex || this.index);\n  }\n  /**\n   * Emits the contactAddressCopy event\n   *\n   * @param {boolean} isCopy - if copy is allowed.\n   */\n  onAddressCopy(isCopy: boolean) {\n    this.contactAddressCopy.emit(isCopy);\n  }\n  /**\n   * Emits the edit account method\n   *\n   * @param {?number} accountIndex index of an account\n   */\n  onEditAccount(accountIndex?: number) {\n    this.editAccount.emit(accountIndex || this.index);\n  }\n  /**\n   * Emits the bankaddress add event\n   *\n   * @param {boolean} isAddAddress whether new address should be added\n   */\n  onBankAddressAdd(isAddAddress: boolean) {\n    this.bankAddressAdd.emit(isAddAddress);\n  }\n  /**\n   * Emits Bank address edit event\n   */\n  onBankAddressEdit() {\n    this.bankAddressViewChange.emit(ViewType.FORM);\n  }\n  /**\n   * Emits the bankaddress delete event with index\n   *\n   * @param {string} controlName name of a form control\n   */\n  onBankAddressDelete(controlName: string) {\n    this.originalBankAddress = undefined;\n    this.bankAddressAdd.emit(false);\n    this.resetAddress(controlName);\n    this.bankAddressViewChange.emit(ViewType.FORM);\n  }\n  /**\n   * Emits appropriate event based on validity.\n   *\n   * @param {string} controlName name of a form control\n   * @param {AddressType} addressType enumerated value\n   */\n  onAddressSubmit(controlName: string, addressType: AddressType) {\n    const address = this.getFormControl(controlName);\n    address.markAllAsTouched();\n    address.updateValueAndValidity();\n    if (address.valid) {\n      if (addressType === this.addressType.BANK) {\n        this.originalBankAddress = { ...addressFromBank(address.value) };\n        this.bankAddressViewChange.emit(ViewType.CARD);\n      } else {\n        this.originalAccountHolderAddress = { ...addressFromAccountHolder(address.value) };\n        this.accountHolderAddressViewChange.emit(ViewType.CARD);\n      }\n    }\n  }\n  /**\n   * Emits appropriate view ehn discarded.\n   *\n   * @param {string} controlName name of a form control\n   */\n  onBankAddressDiscard(controlName: string) {\n    if (this.originalBankAddress) {\n      this.bankAddress = { ...this.originalBankAddress };\n      this.bankAddressViewChange.emit(ViewType.CARD);\n    } else {\n      this.onBankAddressDelete(controlName);\n    }\n  }\n  /**\n   * Resets form control.\n   *\n   * @param {string} controlName name of a form control\n   */\n  resetAddress(controlName: string) {\n    this.getFormControl(controlName).reset();\n  }\n  /**\n   * Checks if the address is valid.\n   *\n   * @param {Address} address address object\n   * @returns {boolean} whether address is valid\n   */\n  isValidAddress(address: Address): boolean {\n    return isObjectTruthy(address);\n  }\n  /**\n   * Returns the form control of given control name,\n   *\n   * @param {string} controlName name of a form control\n   * @returns {AbstractControl} form control object\n   */\n  getFormControl(controlName: string): AbstractControl {\n    const accountInputGroup = (this.ctrlContainer as NgForm).controls[this.accountInputGroupName];\n\n    if (!accountInputGroup) {\n      return new FormControl();\n    }\n\n    return (accountInputGroup as FormGroup).controls[controlName];\n  }\n  /**\n   * Emits event when account holder address is added\n   *\n   * @param {boolean} isAddAddress whether address should be added\n   */\n  onAccountHolderAddressAdd(isAddAddress: boolean) {\n    this.accountHolderAddressAdd.emit(isAddAddress);\n  }\n  /**\n   * Emits event when account holder address is edited.\n   */\n  onAccountHolderAddressEdit() {\n    this.accountHolderAddressViewChange.emit(ViewType.FORM);\n  }\n  /**\n   *Emits event when account holder address is deleted.\n   *\n   * @param {string} controlName name of a form control\n   */\n  onAccountHolderAddressDelete(controlName: string) {\n    this.originalAccountHolderAddress = undefined;\n    this.accountHolderAddressAdd.emit(false);\n    this.resetAddress(controlName);\n    this.accountHolderAddressViewChange.emit(ViewType.FORM);\n  }\n  /**\n   * Emits account\n   *\n   * @param {string} controlName name of a form control\n   */\n  onAccountHolderAddressDiscard(controlName: string) {\n    if (this.originalAccountHolderAddress) {\n      this.accountHolderAddress = { ...this.originalAccountHolderAddress };\n      this.accountHolderAddressViewChange.emit(ViewType.CARD);\n    } else {\n      this.onAccountHolderAddressDelete(controlName);\n    }\n  }\n  /**\n   * Emits address after edit copy event\n   */\n  onAddressEditAfterCopy() {\n    this.addressEditAfterCopy.emit();\n  }\n}\n","<div [ngClass]=\"{'d-none': hostRef.accountView ==='CARD'}\">\n  <fieldset [ngModelGroup]=\"hostRef.accountInputGroupName\">\n    <legend class=\"sr-only\" i18n=\"@@contact-account-data.accountGroup.title\">Account details</legend>\n    <div class=\"row\">\n      <div class=\"bb-block bb-block--lg col-sm-6 col-xs-12\" data-role=\"contact-account-info-account-name1\">\n        <label\n          #accountNameLabel\n          id=\"bb-contact-account-data-accountName-label\"\n          i18n=\"@@contact-account-data.accountName.label\"\n        >\n          Account name\n        </label>\n        <span id=\"account-name-required-info\" class=\"bb-text-support\">\n          (<ng-container i18n=\"@@contact-account-data.accountName.text-support.required.label\">Required</ng-container>)\n        </span>\n        <bb-input-text-ui\n          name=\"name\"\n          #accountNameModel=\"ngModel\"\n          [(ngModel)]=\"hostRef.account.name\"\n          [maxLength]=\"140\"\n          [required]=\"true\"\n          [aria-labelledby]=\"accountNameLabel.id\"\n          aria-describedby=\"account-name-required-info\"\n          data-role=\"contact-account-info-account-name\"\n          bbNoWhiteSpace\n        >\n        </bb-input-text-ui>\n\n        <bb-input-validation-message-ui\n          role=\"alert\"\n          [showErrors]=\"accountNameModel.invalid && accountNameModel.touched\"\n        >\n          <ng-container>\n            <span i18n=\"@@contact-account-data.accountName.errorText\" data-role=\"missing-account-name\">\n              Account name is required\n            </span>\n          </ng-container>\n        </bb-input-validation-message-ui>\n      </div>\n      <div class=\"bb-block bb-block--lg col-sm-6 col-xs-12\">\n        <bb-input-text-ui\n          name=\"alias\"\n          label=\"Account alias\"\n          i18n-label=\"@@contact-account-data.accountAlias.label\"\n          [(ngModel)]=\"hostRef.account.alias\"\n          [maxLength]=\"34\"\n          data-role=\"account-alias\"\n        >\n        </bb-input-text-ui>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"bb-block bb-block--lg col-sm-6 col-xs-12\">\n        <label #ibanLabel id=\"bb-contact-account-data-iban-label\" i18n=\"@@contact-account-data.contactIBAN.label\">\n          IBAN\n        </label>\n        <span id=\"iban-required-info\" class=\"bb-text-support\">\n          (<ng-container i18n=\"@@contact-account-data.iban.text-support.required.label\"\n            >IBAN or BBAN is required</ng-container\n          >)\n        </span>\n        <bb-input-text-ui\n          name=\"IBAN\"\n          #ibanModel=\"ngModel\"\n          [(ngModel)]=\"hostRef.account.IBAN\"\n          [maxLength]=\"hostRef.ibanMask.length\"\n          [required]=\"!bbanModel.value\"\n          [aria-labelledby]=\"ibanLabel.id\"\n          aria-describedby=\"iban-required-info\"\n          [mask]=\"hostRef.ibanMask\"\n          [maskValidator]=\"false\"\n          data-role=\"contact-iban\"\n          bbIbanValidator\n        >\n        </bb-input-text-ui>\n        <bb-input-validation-message-ui\n          role=\"alert\"\n          [showErrors]=\"(ibanModel.invalid && ibanModel.touched || bbanModel.invalid && bbanModel.touched)\"\n        >\n          <ng-container *ngIf=\"ibanModel.errors && ibanModel?.errors.required\">\n            <span i18n=\"@@contact-account-data.iban.error.required\" data-role=\"missing-iban\">\n              IBAN or BBAN is required\n            </span>\n          </ng-container>\n          <ng-container *ngIf=\"ibanModel.errors && ibanModel?.errors.invalidIban\">\n            <span i18n=\"@@contact-account-data.accountName.error.iban\" data-role=\"invalid-iban\"> Invalid IBAN </span>\n          </ng-container>\n        </bb-input-validation-message-ui>\n      </div>\n      <div class=\"bb-block bb-block--lg col-sm-6 col-xs-12\">\n        <label #bbanLabel id=\"bb-contact-account-data-bban-label\" i18n=\"@@contact-account-data.contactBBAN.label\">\n          BBAN\n        </label>\n        <span id=\"bban-required-info\" class=\"bb-text-support\">\n          (<ng-container i18n=\"@@contact-account-data.bban.text-support.required.label\"\n            >IBAN or BBAN is required</ng-container\n          >)\n        </span>\n        <bb-input-text-ui\n          name=\"accountNumber\"\n          #bbanModel=\"ngModel\"\n          [(ngModel)]=\"hostRef.account.accountNumber\"\n          [maxLength]=\"34\"\n          [required]=\"!ibanModel.value\"\n          [aria-labelledby]=\"bbanLabel.id\"\n          aria-describedby=\"bban-required-info\"\n          data-role=\"contact-account-number\"\n        >\n        </bb-input-text-ui>\n        <bb-input-validation-message-ui\n          role=\"alert\"\n          [showErrors]=\"(ibanModel.invalid && ibanModel.touched || bbanModel.invalid && bbanModel.touched)\"\n        >\n          <ng-container *ngIf=\"bbanModel.errors && bbanModel?.errors.required\">\n            <span i18n=\"@@contact-account-data.iban.error.required\" data-role=\"missing-bban\">\n              IBAN or BBAN is required\n            </span>\n          </ng-container>\n        </bb-input-validation-message-ui>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"bb-block bb-block--lg col-sm-6 col-xs-12\">\n        <label\n          #accountTypeLabel\n          id=\"bb-contact-account-data-accountType-label\"\n          i18n=\"@@contact-account-data.accounType.label\"\n        >\n          Account type\n        </label>\n        <span id=\"account-type-required-info\" class=\"bb-text-support\" *ngIf=\"hostRef.isAccountTypeRequired\">\n          (<ng-container i18n=\"@@contact-account-data.accountType.text-support.required.label\">Required</ng-container>)\n        </span>\n        <bb-dropdown-single-select-ui\n          name=\"accountType\"\n          #accountTypeModel=\"ngModel\"\n          placeholder=\"Select\"\n          i18n-placeholder=\"@@bb-create-contact.dropdown.account.type.placeholder\"\n          [(ngModel)]=\"hostRef.account.accountType\"\n          [defaultOptionAsPlaceholder]=\"!hostRef.isAccountTypeRequired\"\n          [required]=\"hostRef.isAccountTypeRequired\"\n          [aria-labelledby]=\"accountTypeLabel.id\"\n          aria-describedby=\"account-type-required-info\"\n          data-role=\"bankAccountType\"\n        >\n          <ng-container *ngFor=\"let accountType of accountTypeList\">\n            <bb-dropdown-single-select-option-ui [value]=\"accountType\" [label]=\"accountType\">\n            </bb-dropdown-single-select-option-ui>\n          </ng-container>\n        </bb-dropdown-single-select-ui>\n\n        <bb-input-validation-message-ui\n          role=\"alert\"\n          [showErrors]=\"accountTypeModel.invalid && accountTypeModel.touched\"\n        >\n          <ng-container>\n            <span i18n=\"@@contact-account-data.accountType.errorText\" data-role=\"missing-account-type\">\n              Account type is required\n            </span>\n          </ng-container>\n        </bb-input-validation-message-ui>\n      </div>\n      <div class=\"bb-block bb-block--lg col-sm-6 col-xs-12\">\n        <bb-input-text-ui\n          name=\"bankCode\"\n          label=\"Bank branch code\"\n          i18n-label=\"@@contact-account-data.contactBankCode.label\"\n          [(ngModel)]=\"hostRef.account.bankCode\"\n          [maxLength]=\"20\"\n          data-role=\"bank-code\"\n        >\n        </bb-input-text-ui>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"bb-block bb-block--lg col-sm-6 col-xs-12\">\n        <bb-input-text-ui\n          name=\"bankName\"\n          label=\"Bank name\"\n          i18n-label=\"@@contact-account-data.contactBankName.label\"\n          [(ngModel)]=\"hostRef.account.bankName\"\n          [maxLength]=\"140\"\n          data-role=\"bank-name\"\n        >\n        </bb-input-text-ui>\n      </div>\n      <div class=\"bb-block bb-block--lg col-sm-6 col-xs-12\">\n        <bb-input-text-ui\n          name=\"BIC\"\n          #bicModel=\"ngModel\"\n          label=\"BIC\"\n          i18n-label=\"@@contact-account-data.contactBIC.label\"\n          [(ngModel)]=\"hostRef.account.BIC\"\n          (ngModelChange)=\"hostRef.account.BIC = $event && $event.toUpperCase()\"\n          pattern=\"^[A-Za-z]{6,6}[A-Za-z2-9][A-Na-nP-Zp-z0-9]([A-Za-z0-9]{3,3}){0,1}$\"\n          data-role=\"bic\"\n        >\n        </bb-input-text-ui>\n        <bb-input-validation-message-ui role=\"alert\" [showErrors]=\"bicModel.invalid && bicModel.touched\">\n          <ng-container *ngIf=\"bicModel.errors && bicModel?.errors.pattern\">\n            <span i18n=\"@@contact-account-data.accountName.error.bic\" data-role=\"invalid-bic\"> Invalid BIC </span>\n          </ng-container>\n        </bb-input-validation-message-ui>\n      </div>\n    </div>\n\n    <div data-role=\"bank-address-container\">\n      <bb-contact-address-data\n        [highlight]=\"hostRef.highlight\"\n        [isAddAddress]=\"hostRef.isAddBankAddress\"\n        [addressType]=\"'bank'\"\n        [viewType]=\"hostRef.bankAddressViewType\"\n        [address]=\"hostRef.bankAddress\"\n        (add)=\"hostRef.onBankAddressAdd($event)\"\n        (edit)=\"hostRef.onBankAddressEdit()\"\n        (discard)=\"hostRef.onBankAddressDiscard($event)\"\n        (delete)=\"hostRef.onBankAddressDelete($event)\"\n        (submit)=\"hostRef.onAddressSubmit($event, hostRef.addressType.BANK)\"\n      >\n      </bb-contact-address-data>\n    </div>\n    <div data-role=\"account-holder-address-container\">\n      <bb-contact-address-data\n        [highlight]=\"hostRef.highlight\"\n        [isAddAddress]=\"hostRef.isAddAccountHolderAddress\"\n        [addressType]=\"'accountHolder'\"\n        [canCopyAddress]=\"hostRef.canCopyAddress\"\n        [isContactAddressCopied]=\"hostRef.isContactAddressCopied\"\n        [viewType]=\"hostRef.accountHolderAddressViewType\"\n        [address]=\"hostRef.accountHolderAddress\"\n        (add)=\"hostRef.onAccountHolderAddressAdd($event)\"\n        (edit)=\"hostRef.onAccountHolderAddressEdit()\"\n        (discard)=\"hostRef.onAccountHolderAddressDiscard($event)\"\n        (delete)=\"hostRef.onAccountHolderAddressDelete($event)\"\n        (submit)=\"hostRef.onAddressSubmit($event, hostRef.addressType.ACCOUNTHOLDER)\"\n        (contactAddressCopy)=\"hostRef.onAddressCopy($event)\"\n        (addressEditAfterCopy)=\"hostRef.onAddressEditAfterCopy()\"\n      >\n      </bb-contact-address-data>\n    </div>\n  </fieldset>\n</div>\n\n<div\n  class=\"card card-section bb-block bb-block--lg\"\n  *ngIf=\"hostRef.accountView ==='CARD'\"\n  data-role=\"contact-account-card-address\"\n>\n  <bb-account-card-view\n    [index]=\"hostRef.index\"\n    [isEditMode]=\"true\"\n    [account]=\"hostRef.account\"\n    [bankAddress]=\"hostRef.bankAddress\"\n    [accountHolderAddress]=\"hostRef.accountHolderAddress\"\n    (deleteAccount)=\"hostRef.onDeleteAccount($event)\"\n    (editAccount)=\"hostRef.onEditAccount($event)\"\n  >\n  </bb-account-card-view>\n</div>\n"]}