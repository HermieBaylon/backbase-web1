import { Component, EventEmitter, Input, Output } from '@angular/core';
import { debounceTime, distinctUntilChanged, takeUntil } from 'rxjs/operators';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/search-box";
import * as i2 from "@angular/forms";
/**
 * Search box component with debounce
 *
 * @example
 *
 * ```html
 *   <bb-debounce-search
 *     class="d-block"
 *     [debounceTime]="debounceTime"
 *     (searchContacts)="onSearch($event)">
 *   </bb-debounce-search>
 * ```
 * @ngModule DebounceSearchModule
 */
export class DebounceSearchComponent {
    constructor() {
        this.gc$ = new Subject();
        this.debounceSearch$ = new Subject();
        this.searchTerm = '';
        /**
         * Time delay between each search requests
         */
        this.debounceTime = 300;
        /**
         * Placeholder text for search input
         */
        this.placeholder = 'Search';
        /**
         * See html property `aria-label`
         */
        this.ariaLabel = undefined;
        /**
         * Changes will be triggered on search
         */
        this.searchContacts = new EventEmitter();
    }
    ngOnInit() {
        this.debounceSearch$
            .pipe(takeUntil(this.gc$), debounceTime(this.debounceTime), distinctUntilChanged())
            .subscribe((term) => {
            this.searchContacts.emit(term);
        });
    }
    /**
     * Updates the search term.
     *
     * @param {string} query - search query text
     */
    startSearching(query) {
        this.debounceSearch$.next(query);
    }
    /**
     * Updating the search value when cleared.
     */
    clearSearching() {
        this.debounceSearch$.next('');
    }
    /**
     * OnDestroy
     */
    ngOnDestroy() {
        this.gc$.next();
        this.debounceSearch$.complete();
        this.gc$.complete();
    }
}
/** @nocollapse */ DebounceSearchComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DebounceSearchComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ DebounceSearchComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: DebounceSearchComponent, selector: "bb-debounce-search", inputs: { debounceTime: "debounceTime", placeholder: "placeholder", ariaLabel: ["aria-label", "ariaLabel"] }, outputs: { searchContacts: "searchContacts" }, ngImport: i0, template: `
    <bb-search-box-ui
      [placeholder]="placeholder"
      [showSearch]="true"
      [showClear]="true"
      [aria-label]="ariaLabel"
      (submit)="startSearching($event)"
      (clear)="clearSearching()"
      [ngModel]="searchTerm"
      (ngModelChange)="startSearching($event)"
    ></bb-search-box-ui>
  `, isInline: true, components: [{ type: i1.SearchBoxComponent, selector: "bb-search-box-ui", inputs: ["placeholder", "maxLength", "squareBorder", "typeaheadOptions", "showSearch", "showClear", "searchLabel", "clearLabel", "autocomplete"], outputs: ["submit", "clear", "valueChange"] }], directives: [{ type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DebounceSearchComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-debounce-search',
                    template: `
    <bb-search-box-ui
      [placeholder]="placeholder"
      [showSearch]="true"
      [showClear]="true"
      [aria-label]="ariaLabel"
      (submit)="startSearching($event)"
      (clear)="clearSearching()"
      [ngModel]="searchTerm"
      (ngModelChange)="startSearching($event)"
    ></bb-search-box-ui>
  `,
                }]
        }], propDecorators: { debounceTime: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], ariaLabel: [{
                type: Input,
                args: ['aria-label']
            }], searchContacts: [{
                type: Output
            }] } });
//# sourceMappingURL=debounce-search.component.js.map