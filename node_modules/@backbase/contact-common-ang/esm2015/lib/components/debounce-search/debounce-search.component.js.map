{"version":3,"file":"debounce-search.component.js","sourceRoot":"","sources":["../../../../../../../libs/contact-common-ang/src/lib/components/debounce-search/debounce-search.component.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,YAAY,EAAE,KAAK,EAAqB,MAAM,EAAE,MAAM,eAAe,CAAC;AAC1F,OAAO,EAAE,YAAY,EAAE,oBAAoB,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAC/E,OAAO,EAAE,OAAO,EAAE,MAAM,MAAM,CAAC;;;;AAE/B;;;;;;;;;;;;;GAaG;AAgBH,MAAM,OAAO,uBAAuB;IAfpC;QAgBU,QAAG,GAAG,IAAI,OAAO,EAAE,CAAC;QACpB,oBAAe,GAAG,IAAI,OAAO,EAAU,CAAC;QAChD,eAAU,GAAG,EAAE,CAAC;QAEhB;;WAEG;QACM,iBAAY,GAAG,GAAG,CAAC;QAE5B;;WAEG;QACM,gBAAW,GAAG,QAAQ,CAAC;QAEhC;;WAEG;QACkB,cAAS,GAAY,SAAS,CAAC;QAEpD;;WAEG;QACO,mBAAc,GAAG,IAAI,YAAY,EAAU,CAAC;KAkCvD;IAhCC,QAAQ;QACN,IAAI,CAAC,eAAe;aACjB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,YAAY,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,oBAAoB,EAAE,CAAC;aAClF,SAAS,CAAC,CAAC,IAAY,EAAE,EAAE;YAC1B,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;OAIG;IACH,cAAc,CAAC,KAAa;QAC1B,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACnC,CAAC;IAED;;OAEG;IACH,cAAc;QACZ,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAChC,CAAC;IAED;;OAEG;IACH,WAAW;QACT,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;QAChB,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,CAAC;QAChC,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;IACtB,CAAC;;wIAxDU,uBAAuB;4HAAvB,uBAAuB,uNAbxB;;;;;;;;;;;GAWT;4FAEU,uBAAuB;kBAfnC,SAAS;mBAAC;oBACT,QAAQ,EAAE,oBAAoB;oBAC9B,QAAQ,EAAE;;;;;;;;;;;GAWT;iBACF;8BASU,YAAY;sBAApB,KAAK;gBAKG,WAAW;sBAAnB,KAAK;gBAKe,SAAS;sBAA7B,KAAK;uBAAC,YAAY;gBAKT,cAAc;sBAAvB,MAAM","sourcesContent":["import { Component, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { debounceTime, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\n\n/**\n * Search box component with debounce\n *\n * @example\n *\n * ```html\n *   <bb-debounce-search\n *     class=\"d-block\"\n *     [debounceTime]=\"debounceTime\"\n *     (searchContacts)=\"onSearch($event)\">\n *   </bb-debounce-search>\n * ```\n * @ngModule DebounceSearchModule\n */\n@Component({\n  selector: 'bb-debounce-search',\n  template: `\n    <bb-search-box-ui\n      [placeholder]=\"placeholder\"\n      [showSearch]=\"true\"\n      [showClear]=\"true\"\n      [aria-label]=\"ariaLabel\"\n      (submit)=\"startSearching($event)\"\n      (clear)=\"clearSearching()\"\n      [ngModel]=\"searchTerm\"\n      (ngModelChange)=\"startSearching($event)\"\n    ></bb-search-box-ui>\n  `,\n})\nexport class DebounceSearchComponent implements OnInit, OnDestroy {\n  private gc$ = new Subject();\n  private debounceSearch$ = new Subject<string>();\n  searchTerm = '';\n\n  /**\n   * Time delay between each search requests\n   */\n  @Input() debounceTime = 300;\n\n  /**\n   * Placeholder text for search input\n   */\n  @Input() placeholder = 'Search';\n\n  /**\n   * See html property `aria-label`\n   */\n  @Input('aria-label') ariaLabel?: string = undefined;\n\n  /**\n   * Changes will be triggered on search\n   */\n  @Output() searchContacts = new EventEmitter<string>();\n\n  ngOnInit() {\n    this.debounceSearch$\n      .pipe(takeUntil(this.gc$), debounceTime(this.debounceTime), distinctUntilChanged())\n      .subscribe((term: string) => {\n        this.searchContacts.emit(term);\n      });\n  }\n\n  /**\n   * Updates the search term.\n   *\n   * @param {string} query - search query text\n   */\n  startSearching(query: string) {\n    this.debounceSearch$.next(query);\n  }\n\n  /**\n   * Updating the search value when cleared.\n   */\n  clearSearching() {\n    this.debounceSearch$.next('');\n  }\n\n  /**\n   * OnDestroy\n   */\n  ngOnDestroy() {\n    this.gc$.next();\n    this.debounceSearch$.complete();\n    this.gc$.complete();\n  }\n}\n"]}