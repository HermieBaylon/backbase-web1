{"version":3,"file":"mappers.js","sourceRoot":"","sources":["../../../../../../libs/contact-common-ang/src/lib/helpers/mappers.ts"],"names":[],"mappings":"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","sourcesContent":["import { InputName, InputGroupName, ContactItem, ApprovalDetails } from '../models/types';\nimport { addressFromContact } from './address';\nimport { HttpResponse, HttpErrorResponse } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { ContactApprovalStatusMap } from '../constants';\n\nexport const filterEmptyValues = (obj: { [key: string]: any }) =>\n  Object.keys(obj).reduce((result, key) => ({ ...result, ...(obj[key] ? { [key]: obj[key] } : {}) }), {});\n\nexport const toInteger = (value: any): number => parseInt(value, 10) || 0;\n\nexport const toBoolean = (value: string | boolean | undefined): boolean => {\n  if (typeof value === 'boolean') {\n    return value;\n  }\n\n  return value === 'true';\n};\n\nexport const sanitizeObject = <T>(obj: T): Object => {\n  const sanitizedObj: { [key: string]: any } = {};\n  for (const key in obj) {\n    if ((obj as Object).hasOwnProperty(key) && obj[key] && key !== InputName.COPY_CONTACT_ADDRESS) {\n      sanitizedObj[key] = obj[key];\n    }\n  }\n\n  return sanitizedObj;\n};\n\nexport const flattenObject = <T>(obj: T): Object => {\n  let flattenedObj: { [key: string]: any } = {};\n  for (const key in obj) {\n    if ((obj as Object).hasOwnProperty(key) && obj[key]) {\n      if (typeof obj[key] === 'object') {\n        flattenedObj = { ...flattenedObj, ...sanitizeObject(obj[key]) };\n      } else {\n        flattenedObj[key] = obj[key];\n      }\n    }\n  }\n\n  return flattenedObj;\n};\n\nexport const fromContactFormToContactModel = <T>(formObj: T) => {\n  let model: any = {};\n  model['accounts'] = [];\n\n  for (const key in formObj) {\n    if ((formObj as Object).hasOwnProperty(key)) {\n      if (key === InputGroupName.CONTACT) {\n        model = { ...model, ...flattenObject(formObj[key]) };\n      } else if (key.indexOf(InputGroupName.ACCOUNT) > -1) {\n        model.accounts.push(flattenObject(formObj[key]));\n      }\n    }\n  }\n\n  return model;\n};\n\nexport const fromContactItemToContactModel = (contact: ContactItem): { [key: string]: any } => {\n  const keys = ['name', 'alias', 'phoneNumber', 'emailId', 'contactPerson', 'additions'];\n\n  return {\n    ...keys.reduce((details, key) => {\n      const value = (contact as { [key: string]: any })[key];\n      if (value) {\n        return { ...details, [key]: value };\n      }\n\n      return details;\n    }, {}),\n    ...filterEmptyValues(addressFromContact(contact)),\n    accounts: contact.accounts.map(filterEmptyValues),\n  };\n};\n\nexport const fromResponseBodyList = <T>(response: HttpResponse<T>) => ({\n  totalCount: parseInt(response.headers.get('x-total-count') as string, 10) || 0,\n  items: response.body || [],\n});\n\nexport const fromErrorResponse = (error: HttpErrorResponse) =>\n  throwError({ status: error.status, message: error.message });\n\nexport const getApprovalStatus = (approval: ApprovalDetails): string => {\n  let label = '';\n  const approvalDetailsStatus: any = approval.approvalDetails && approval.approvalDetails.status;\n  const currentStatus = ContactApprovalStatusMap[approvalDetailsStatus];\n\n  if (\n    approval.approvalDetails &&\n    currentStatus === ContactApprovalStatusMap.PENDING &&\n    approval.approvalDetails.policy &&\n    approval.approvalDetails.policy.items &&\n    approval.approvalDetails.records\n  ) {\n    const approvals = approval.approvalDetails.records.length;\n    const total = approval.approvalDetails.policy.items.reduce(\n      (totalCount, policy) => totalCount + policy.numberOfApprovals || 0,\n      0,\n    );\n    label = ` (${approvals}/${total})`;\n  }\n\n  return `${currentStatus}${label}`;\n};\n"]}