{"version":3,"file":"address.js","sourceRoot":"","sources":["../../../../../../libs/contact-common-ang/src/lib/helpers/address.ts"],"names":[],"mappings":"AAAA,OAAO,EAAW,WAAW,EAAE,MAAM,iBAAiB,CAAC;AAEvD,MAAM,CAAC,MAAM,WAAW,GAAG,CAAC,GAAG,GAAG,EAAE,EAAE,EAAE;IACtC,OAAO,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;AACxD,CAAC,CAAC;AAEF,MAAM,WAAW,GAAG,CAAC,OAAY,EAAE,IAAiB,EAAW,EAAE,CAAC,CAAC;IACjE,YAAY,EAAE,OAAO,CAAC,WAAW,CAAC,GAAG,IAAI,cAAc,CAAC,CAAC;IACzD,YAAY,EAAE,OAAO,CAAC,WAAW,CAAC,GAAG,IAAI,cAAc,CAAC,CAAC;IACzD,UAAU,EAAE,OAAO,CAAC,WAAW,CAAC,GAAG,IAAI,YAAY,CAAC,CAAC;IACrD,QAAQ,EAAE,OAAO,CAAC,WAAW,CAAC,GAAG,IAAI,UAAU,CAAC,CAAC;IACjD,IAAI,EAAE,OAAO,CAAC,WAAW,CAAC,GAAG,IAAI,MAAM,CAAC,CAAC;IACzC,kBAAkB,EAAE,OAAO,CAAC,WAAW,CAAC,GAAG,IAAI,oBAAoB,CAAC,CAAC;IACrE,OAAO,EAAE,OAAO,CAAC,WAAW,CAAC,GAAG,IAAI,SAAS,CAAC,CAAC;CAChD,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAAC,OAAY,EAAW,EAAE,CAAC,WAAW,CAAC,OAAO,EAAE,WAAW,CAAC,OAAO,CAAC,CAAC;AAEvG,MAAM,CAAC,MAAM,eAAe,GAAG,CAAC,OAAY,EAAW,EAAE,CAAC,WAAW,CAAC,OAAO,EAAE,WAAW,CAAC,IAAI,CAAC,CAAC;AAEjG,MAAM,CAAC,MAAM,wBAAwB,GAAG,CAAC,OAAY,EAAW,EAAE,CAAC,WAAW,CAAC,OAAO,EAAE,WAAW,CAAC,aAAa,CAAC,CAAC;AAEnH,MAAM,CAAC,MAAM,cAAc,GAAG,CAAuB,GAAM,EAAW,EAAE;IACtE,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAQ,CAAC,CAAC,CAAC;AACzD,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,eAAe,GAAG,CAAC,OAAgB,EAAE,EAAE,CAClD;IACE,OAAO,CAAC,cAAc,CAAC;IACvB,OAAO,CAAC,cAAc,CAAC;IACvB,OAAO,CAAC,YAAY,CAAC;IACrB,OAAO,CAAC,UAAU,CAAC;IACnB,OAAO,CAAC,MAAM,CAAC;IACf,OAAO,CAAC,oBAAoB,CAAC;CAC9B;KACE,MAAM,CAAC,OAAO,CAAC;KACf,IAAI,CAAC,IAAI,CAAC,CAAC","sourcesContent":["import { Address, AddressType } from '../models/types';\n\nexport const toCamelCase = (str = '') => {\n  return str.substr(0, 1).toLowerCase() + str.substr(1);\n};\n\nconst addressFrom = (address: any, type: AddressType): Address => ({\n  addressLine1: address[toCamelCase(`${type}AddressLine1`)],\n  addressLine2: address[toCamelCase(`${type}AddressLine2`)],\n  streetName: address[toCamelCase(`${type}StreetName`)],\n  postCode: address[toCamelCase(`${type}PostCode`)],\n  town: address[toCamelCase(`${type}Town`)],\n  countrySubDivision: address[toCamelCase(`${type}CountrySubDivision`)],\n  country: address[toCamelCase(`${type}Country`)],\n});\n\nexport const addressFromContact = (address: any): Address => addressFrom(address, AddressType.CONTACT);\n\nexport const addressFromBank = (address: any): Address => addressFrom(address, AddressType.BANK);\n\nexport const addressFromAccountHolder = (address: any): Address => addressFrom(address, AddressType.ACCOUNTHOLDER);\n\nexport const isObjectTruthy = <T, K extends keyof T>(obj: T): boolean => {\n  return Object.keys(obj).some((key) => !!obj[key as K]);\n};\n\nexport const addressToString = (address: Address) =>\n  [\n    address[`addressLine1`],\n    address[`addressLine2`],\n    address[`streetName`],\n    address[`postCode`],\n    address[`town`],\n    address[`countrySubDivision`],\n  ]\n    .filter(Boolean)\n    .join(', ');\n"]}