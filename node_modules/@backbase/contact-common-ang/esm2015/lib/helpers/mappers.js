import { InputName, InputGroupName } from '../models/types';
import { addressFromContact } from './address';
import { throwError } from 'rxjs';
import { ContactApprovalStatusMap } from '../constants';
export const filterEmptyValues = (obj) => Object.keys(obj).reduce((result, key) => (Object.assign(Object.assign({}, result), (obj[key] ? { [key]: obj[key] } : {}))), {});
export const toInteger = (value) => parseInt(value, 10) || 0;
export const toBoolean = (value) => {
    if (typeof value === 'boolean') {
        return value;
    }
    return value === 'true';
};
export const sanitizeObject = (obj) => {
    const sanitizedObj = {};
    for (const key in obj) {
        if (obj.hasOwnProperty(key) && obj[key] && key !== InputName.COPY_CONTACT_ADDRESS) {
            sanitizedObj[key] = obj[key];
        }
    }
    return sanitizedObj;
};
export const flattenObject = (obj) => {
    let flattenedObj = {};
    for (const key in obj) {
        if (obj.hasOwnProperty(key) && obj[key]) {
            if (typeof obj[key] === 'object') {
                flattenedObj = Object.assign(Object.assign({}, flattenedObj), sanitizeObject(obj[key]));
            }
            else {
                flattenedObj[key] = obj[key];
            }
        }
    }
    return flattenedObj;
};
export const fromContactFormToContactModel = (formObj) => {
    let model = {};
    model['accounts'] = [];
    for (const key in formObj) {
        if (formObj.hasOwnProperty(key)) {
            if (key === InputGroupName.CONTACT) {
                model = Object.assign(Object.assign({}, model), flattenObject(formObj[key]));
            }
            else if (key.indexOf(InputGroupName.ACCOUNT) > -1) {
                model.accounts.push(flattenObject(formObj[key]));
            }
        }
    }
    return model;
};
export const fromContactItemToContactModel = (contact) => {
    const keys = ['name', 'alias', 'phoneNumber', 'emailId', 'contactPerson', 'additions'];
    return Object.assign(Object.assign(Object.assign({}, keys.reduce((details, key) => {
        const value = contact[key];
        if (value) {
            return Object.assign(Object.assign({}, details), { [key]: value });
        }
        return details;
    }, {})), filterEmptyValues(addressFromContact(contact))), { accounts: contact.accounts.map(filterEmptyValues) });
};
export const fromResponseBodyList = (response) => ({
    totalCount: parseInt(response.headers.get('x-total-count'), 10) || 0,
    items: response.body || [],
});
export const fromErrorResponse = (error) => throwError({ status: error.status, message: error.message });
export const getApprovalStatus = (approval) => {
    let label = '';
    const approvalDetailsStatus = approval.approvalDetails && approval.approvalDetails.status;
    const currentStatus = ContactApprovalStatusMap[approvalDetailsStatus];
    if (approval.approvalDetails &&
        currentStatus === ContactApprovalStatusMap.PENDING &&
        approval.approvalDetails.policy &&
        approval.approvalDetails.policy.items &&
        approval.approvalDetails.records) {
        const approvals = approval.approvalDetails.records.length;
        const total = approval.approvalDetails.policy.items.reduce((totalCount, policy) => totalCount + policy.numberOfApprovals || 0, 0);
        label = ` (${approvals}/${total})`;
    }
    return `${currentStatus}${label}`;
};
//# sourceMappingURL=mappers.js.map