(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@backbase/ui-ang/modal'), require('@backbase/ui-ang/textarea'), require('@angular/common'), require('@angular/forms'), require('@backbase/ui-ang/button'), require('rxjs'), require('rxjs/operators'), require('@backbase/data-ang/contact-manager'), require('@backbase/data-ang/approvals'), require('@backbase/foundation-ang/core'), require('@backbase/ui-ang/icon'), require('@backbase/ui-ang/header'), require('@backbase/ui-ang/tooltip-directive'), require('@backbase/ui-ang/iban-pipe'), require('@backbase/ui-ang/input-text'), require('@backbase/ui-ang/input-validation-message'), require('@backbase/ui-ang/dropdown-single-select'), require('@backbase/ui-ang/input-checkbox'), require('@backbase/ui-ang/input-email'), require('@backbase/ui-ang/search-box'), require('@backbase/ui-ang/item-log'), require('@backbase/ui-ang/collapsible')) :
    typeof define === 'function' && define.amd ? define('@backbase/contact-common-ang', ['exports', '@angular/core', '@backbase/ui-ang/modal', '@backbase/ui-ang/textarea', '@angular/common', '@angular/forms', '@backbase/ui-ang/button', 'rxjs', 'rxjs/operators', '@backbase/data-ang/contact-manager', '@backbase/data-ang/approvals', '@backbase/foundation-ang/core', '@backbase/ui-ang/icon', '@backbase/ui-ang/header', '@backbase/ui-ang/tooltip-directive', '@backbase/ui-ang/iban-pipe', '@backbase/ui-ang/input-text', '@backbase/ui-ang/input-validation-message', '@backbase/ui-ang/dropdown-single-select', '@backbase/ui-ang/input-checkbox', '@backbase/ui-ang/input-email', '@backbase/ui-ang/search-box', '@backbase/ui-ang/item-log', '@backbase/ui-ang/collapsible'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["contact-common-ang"] = {}), global.ng.core, global.i1, global.i2, global.ng.common, global.ng.forms, global.i5, global.rxjs, global.rxjs.operators, global.i1$2, global.i1$3, global.core, global.i2$1, global.i2$2, global.i7, global.i8, global.i2$3, global.i3$1, global.i6, global.i8$1, global.i4, global.i1$4, global.i1$5, global.i1$6));
})(this, (function (exports, i0, i1, i2, i3, i1$1, i5, rxjs, operators, i1$2, i1$3, core, i2$1, i2$2, i7, i8, i2$3, i3$1, i6, i8$1, i4, i1$4, i1$5, i1$6) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i3__namespace = /*#__PURE__*/_interopNamespace(i3);
    var i1__namespace$1 = /*#__PURE__*/_interopNamespace(i1$1);
    var i5__namespace = /*#__PURE__*/_interopNamespace(i5);
    var i1__namespace$2 = /*#__PURE__*/_interopNamespace(i1$2);
    var i1__namespace$3 = /*#__PURE__*/_interopNamespace(i1$3);
    var i2__namespace$1 = /*#__PURE__*/_interopNamespace(i2$1);
    var i2__namespace$2 = /*#__PURE__*/_interopNamespace(i2$2);
    var i7__namespace = /*#__PURE__*/_interopNamespace(i7);
    var i8__namespace = /*#__PURE__*/_interopNamespace(i8);
    var i2__namespace$3 = /*#__PURE__*/_interopNamespace(i2$3);
    var i3__namespace$1 = /*#__PURE__*/_interopNamespace(i3$1);
    var i6__namespace = /*#__PURE__*/_interopNamespace(i6);
    var i8__namespace$1 = /*#__PURE__*/_interopNamespace(i8$1);
    var i4__namespace = /*#__PURE__*/_interopNamespace(i4);
    var i1__namespace$4 = /*#__PURE__*/_interopNamespace(i1$4);
    var i1__namespace$5 = /*#__PURE__*/_interopNamespace(i1$5);
    var i1__namespace$6 = /*#__PURE__*/_interopNamespace(i1$6);

    /**
     * The component is for showing confirmation dialog
     *
     *
     * @usageNotes
     *
     * ### Display confirmation dialog
     *
     * ```html
     *  <bb-confirm-action-dialog
     *   [isOpen]="hostRef.isCancelCreateConfirmOpened"
     *   [confirmButtonColor]="'danger'"
     *   (confirm)="hostRef.onExitCreateContact()"
     *   (cancel)="hostRef.onResumeCreateContact()"
     * >
     *   <span title i18n="@@contact-create.confirm-action-dialog.title">Discard entered data?</span>
     *   <span body i18n="@@contact-create.confirm-action-dialog.body">
     *      Are you sure to exit creation of a new contact? The data you have entered will be lost.</span>
     *   <span cancelButtonLabel i18n="@@contact-create.confirm-action-dialog.button.cancel">Not now</span>
     *   <span confirmButtonLabel i18n="@@contact-create.confirm-action-dialog.button.confirm">Discard</span>
     * </bb-confirm-action-dialog>
     * ```
     * @ngModule ConfirmActionDialogModule
     */
    var ConfirmActionDialogComponent = /** @class */ (function () {
        function ConfirmActionDialogComponent() {
            this.modalOptions = {
                backdrop: 'static',
                keyboard: false,
            };
            this.comment = '';
            /**
             * The button color for confirm button
             * Default value is `primary`.
             */
            this.confirmButtonColor = 'primary';
            /**
             * The button color for cancel button
             * Default value is `link`.
             */
            this.cancelButtonColor = 'link';
            /**
             * Indicator for confirmation dialog open state.
             * Default value is `false`.
             */
            this.isOpen = false;
            /**
             * Whether comment input should be shown
             */
            this.attachComment = false;
            /**
             * Text for comment field label
             */
            this.commentFieldLabel = 'Add comment';
            /**
             * Event triggered when confirming the action
             */
            this.confirm = new i0.EventEmitter();
            /**
             * Event triggered when cancelling the action
             */
            this.cancel = new i0.EventEmitter();
        }
        ConfirmActionDialogComponent.prototype.ngOnChanges = function (changes) {
            if (changes.isOpen) {
                this.comment = '';
            }
        };
        /**
         * Emits the cancel event
         */
        ConfirmActionDialogComponent.prototype.onClickCancel = function () {
            this.cancel.emit();
        };
        /**
         * Emits the confirm event.
         */
        ConfirmActionDialogComponent.prototype.onClickConfirm = function () {
            this.confirm.emit({ comment: this.comment });
        };
        return ConfirmActionDialogComponent;
    }());
    /** @nocollapse */ ConfirmActionDialogComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ConfirmActionDialogComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ ConfirmActionDialogComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ConfirmActionDialogComponent, selector: "bb-confirm-action-dialog", inputs: { confirmButtonColor: "confirmButtonColor", cancelButtonColor: "cancelButtonColor", isOpen: "isOpen", attachComment: "attachComment", commentFieldLabel: "commentFieldLabel" }, outputs: { confirm: "confirm", cancel: "cancel" }, usesOnChanges: true, ngImport: i0__namespace, template: "<bb-modal-ui\n  [isOpen]=\"isOpen\"\n  [modalOptions]=\"modalOptions\"\n  aria-labelledby=\"contact-confirm-action-dialog-header\"\n  aria-describedby=\"contact-confirm-action-dialog-body\"\n>\n  <bb-modal-header-ui>\n    <ng-template bbCustomModalHeader>\n      <h1 class=\"modal-title\" data-role=\"confirm-action-header\" id=\"contact-confirm-action-dialog-header\">\n        <ng-content select=\"[title]\"></ng-content>\n      </h1>\n    </ng-template>\n  </bb-modal-header-ui>\n\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody>\n      <div [ngClass]=\"{ 'bb-block bb-block--md': attachComment }\" id=\"contact-confirm-action-dialog-body\">\n        <ng-content select=\"[body]\"></ng-content>\n      </div>\n\n      <ng-container *ngIf=\"attachComment && isOpen\">\n        <label #commentLabel id=\"contact-approval-log-comment-label\" i18n=\"@@bb-confirmation-dialog.comment\"\n          >{{ commentFieldLabel }}</label\n        >\n        <span id=\"comment-optional-info\" class=\"bb-text-support\">\n          (<ng-container i18n=\"@@bb-confirmation-dialog.comment.optional-label\">Optional</ng-container>)\n        </span>\n        <bb-textarea-ui\n          wrap=\"hard\"\n          [rows]=\"3\"\n          [cols]=\"50\"\n          [minLength]=\"3\"\n          [maxLength]=\"140\"\n          [(ngModel)]=\"comment\"\n          [aria-labelledby]=\"commentLabel.id\"\n          aria-describedby=\"comment-optional-info\"\n          showCharCounter=\"true\"\n          data-role=\"confirmation-comment\"\n        ></bb-textarea-ui>\n      </ng-container>\n    </ng-template>\n  </bb-modal-body-ui>\n\n  <bb-modal-footer-ui>\n    <ng-template bbCustomModalFooter>\n      <div class=\"bb-button-bar\">\n        <button\n          bbButton\n          class=\"bb-button-bar__button\"\n          [color]=\"confirmButtonColor\"\n          (click)=\"onClickConfirm()\"\n          data-role=\"confirm-action-confirm-btn\"\n        >\n          <ng-content select=\"[confirmButtonLabel]\"></ng-content>\n        </button>\n\n        <button\n          bbButton\n          class=\"bb-button-bar__button\"\n          [color]=\"cancelButtonColor\"\n          (click)=\"onClickCancel()\"\n          data-role=\"confirm-action-cancel-btn\"\n        >\n          <ng-content select=\"[cancelButtonLabel]\"></ng-content>\n        </button>\n      </div>\n    </ng-template>\n  </bb-modal-footer-ui>\n</bb-modal-ui>\n", components: [{ type: i1__namespace.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i1__namespace.ModalHeaderComponent, selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i1__namespace.ModalBodyComponent, selector: "bb-modal-body-ui" }, { type: i2__namespace.TextareaComponent, selector: "bb-textarea-ui", inputs: ["rows", "cols", "placeholder", "maxLength", "minLength", "readonly", "showCharCounter", "wrap"] }, { type: i1__namespace.ModalFooterComponent, selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }], directives: [{ type: i1__namespace.CustomModalHeaderDirective, selector: "ng-template[bbCustomModalHeader]" }, { type: i1__namespace.CustomModalBodyDirective, selector: "ng-template[bbCustomModalBody]" }, { type: i3__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i1__namespace.CustomModalFooterDirective, selector: "ng-template[bbCustomModalFooter]" }, { type: i5__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ConfirmActionDialogComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-confirm-action-dialog',
                        templateUrl: 'confirm-action-dialog.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], propDecorators: { confirmButtonColor: [{
                    type: i0.Input
                }], cancelButtonColor: [{
                    type: i0.Input
                }], isOpen: [{
                    type: i0.Input
                }], attachComment: [{
                    type: i0.Input
                }], commentFieldLabel: [{
                    type: i0.Input
                }], confirm: [{
                    type: i0.Output
                }], cancel: [{
                    type: i0.Output
                }] } });

    /**
     * Exports ConfirmActionDialogComponent
     */
    var ConfirmActionDialogModule = /** @class */ (function () {
        function ConfirmActionDialogModule() {
        }
        return ConfirmActionDialogModule;
    }());
    /** @nocollapse */ ConfirmActionDialogModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ConfirmActionDialogModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ ConfirmActionDialogModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ConfirmActionDialogModule, declarations: [ConfirmActionDialogComponent], imports: [i1.ModalModule, i5.ButtonModule, i3.CommonModule, i2.TextareaModule, i1$1.FormsModule], exports: [ConfirmActionDialogComponent] });
    /** @nocollapse */ ConfirmActionDialogModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ConfirmActionDialogModule, imports: [[i1.ModalModule, i5.ButtonModule, i3.CommonModule, i2.TextareaModule, i1$1.FormsModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ConfirmActionDialogModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [ConfirmActionDialogComponent],
                        exports: [ConfirmActionDialogComponent],
                        imports: [i1.ModalModule, i5.ButtonModule, i3.CommonModule, i2.TextareaModule, i1$1.FormsModule],
                    }]
            }] });

    exports.LoadMoreMethod = void 0;
    (function (LoadMoreMethod) {
        LoadMoreMethod["LOAD_MORE"] = "load-more";
        LoadMoreMethod["PAGINATION"] = "pagination";
    })(exports.LoadMoreMethod || (exports.LoadMoreMethod = {}));
    exports.ContactActions = void 0;
    (function (ContactActions) {
        ContactActions[ContactActions["Load"] = 0] = "Load";
        ContactActions[ContactActions["Refresh"] = 1] = "Refresh";
        ContactActions[ContactActions["LoadMore"] = 2] = "LoadMore";
        ContactActions[ContactActions["ChangePage"] = 3] = "ChangePage";
        ContactActions[ContactActions["Search"] = 4] = "Search";
        ContactActions[ContactActions["Sort"] = 5] = "Sort";
    })(exports.ContactActions || (exports.ContactActions = {}));
    var ContactsError = /** @class */ (function () {
        function ContactsError(errorResponse) {
            this.errorResponse = errorResponse;
            if (this.errorResponse) {
                var _a = this.errorResponse, status = _a.status, error = _a.error;
                this.status = status;
                if (error) {
                    this.message = error.message || '';
                    this.errors = error.errors || [];
                    this.additions = error.additions || {};
                }
            }
        }
        return ContactsError;
    }());
    exports.ViewType = void 0;
    (function (ViewType) {
        ViewType["CARD"] = "CARD";
        ViewType["FORM"] = "FORM";
    })(exports.ViewType || (exports.ViewType = {}));
    exports.InputGroupName = void 0;
    (function (InputGroupName) {
        InputGroupName["CONTACT"] = "contactDetails";
        InputGroupName["ACCOUNT"] = "accountDetails";
        InputGroupName["ADDRESS"] = "addressDetails";
    })(exports.InputGroupName || (exports.InputGroupName = {}));
    exports.InputName = void 0;
    (function (InputName) {
        InputName["COPY_CONTACT_ADDRESS"] = "copyContactAddress";
    })(exports.InputName || (exports.InputName = {}));
    exports.AddressType = void 0;
    (function (AddressType) {
        AddressType["CONTACT"] = "";
        AddressType["BANK"] = "bank";
        AddressType["ACCOUNTHOLDER"] = "accountHolder";
    })(exports.AddressType || (exports.AddressType = {}));
    var ContactFormGroupItem = /** @class */ (function () {
        function ContactFormGroupItem() {
            this.viewType = exports.ViewType.FORM;
            this.data = {};
            this.bankAddressViewType = exports.ViewType.FORM;
            this.accountHolderAddressViewType = exports.ViewType.FORM;
            this.isAddBankAddress = false;
            this.isAddAccountHolderAddress = false;
            this.accountHolderAddress = {};
            this.bankAddress = {};
            this.isCopyAddress = false;
            this.isContactAddressCopied = false;
        }
        return ContactFormGroupItem;
    }());
    exports.AccessContextScope = void 0;
    (function (AccessContextScope) {
        AccessContextScope["USER"] = "USER";
        AccessContextScope["SA"] = "SA";
        AccessContextScope["LE"] = "LE";
    })(exports.AccessContextScope || (exports.AccessContextScope = {}));
    exports.ActiveContactStatus = void 0;
    (function (ActiveContactStatus) {
        ActiveContactStatus["ACTIVE"] = "ACTIVE";
        ActiveContactStatus["PENDING_APPROVAL"] = "PENDING_APPROVAL";
    })(exports.ActiveContactStatus || (exports.ActiveContactStatus = {}));
    exports.ContactUpdateDeleteStatus = void 0;
    (function (ContactUpdateDeleteStatus) {
        ContactUpdateDeleteStatus["APPROVAL_REQUIRED"] = "APPROVAL_REQUIRED";
        ContactUpdateDeleteStatus["REQUEST_ACCEPTED"] = "REQUEST_ACCEPTED";
        ContactUpdateDeleteStatus["REJECTED"] = "REJECTED";
        ContactUpdateDeleteStatus["PENDING"] = "PENDING";
        ContactUpdateDeleteStatus["APPROVED"] = "APPROVED";
        ContactUpdateDeleteStatus["CANCELLED"] = "CANCELLED";
    })(exports.ContactUpdateDeleteStatus || (exports.ContactUpdateDeleteStatus = {}));
    exports.ApprovalStatus = void 0;
    (function (ApprovalStatus) {
        ApprovalStatus["OPEN"] = "OPEN";
        ApprovalStatus["CLOSED"] = "CLOSED";
        ApprovalStatus["INVALID"] = "INVALID";
        ApprovalStatus["VALID"] = "VALID";
        ApprovalStatus["ENTERED"] = "ENTERED";
        ApprovalStatus["READY"] = "READY";
        ApprovalStatus["ACCEPTED"] = "ACCEPTED";
        ApprovalStatus["REJECTED"] = "REJECTED";
    })(exports.ApprovalStatus || (exports.ApprovalStatus = {}));

    var toCamelCase = function (str) {
        if (str === void 0) { str = ''; }
        return str.substr(0, 1).toLowerCase() + str.substr(1);
    };
    var addressFrom = function (address, type) { return ({
        addressLine1: address[toCamelCase(type + "AddressLine1")],
        addressLine2: address[toCamelCase(type + "AddressLine2")],
        streetName: address[toCamelCase(type + "StreetName")],
        postCode: address[toCamelCase(type + "PostCode")],
        town: address[toCamelCase(type + "Town")],
        countrySubDivision: address[toCamelCase(type + "CountrySubDivision")],
        country: address[toCamelCase(type + "Country")],
    }); };
    var addressFromContact = function (address) { return addressFrom(address, exports.AddressType.CONTACT); };
    var addressFromBank = function (address) { return addressFrom(address, exports.AddressType.BANK); };
    var addressFromAccountHolder = function (address) { return addressFrom(address, exports.AddressType.ACCOUNTHOLDER); };
    var isObjectTruthy = function (obj) {
        return Object.keys(obj).some(function (key) { return !!obj[key]; });
    };
    var addressToString = function (address) { return [
        address["addressLine1"],
        address["addressLine2"],
        address["streetName"],
        address["postCode"],
        address["town"],
        address["countrySubDivision"],
    ]
        .filter(Boolean)
        .join(', '); };

    var Countries = [
        'AR',
        'AU',
        'AT',
        'BE',
        'BR',
        'CA',
        'CN',
        'CO',
        'HR',
        'CZ',
        'DK',
        'EC',
        'EG',
        'ET',
        'FR',
        'DE',
        'GR',
        'HN',
        'HK',
        'HU',
        'IN',
        'ID',
        'IE',
        'IT',
        'JM',
        'MY',
        'MX',
        'MA',
        'NA',
        'NL',
        'NZ',
        'NO',
        'PL',
        'PT',
        'RU',
        'SN',
        'SG',
        'ZA',
        'ES',
        'LK',
        'SE',
        'TH',
        'TR',
        'UG',
        'AE',
        'GB',
        'US',
        'ZW',
    ];
    var defaultAccountTypes = ['Savings', 'Checking'];
    var defaultAccessContextScope = exports.AccessContextScope.USER;
    exports.ApprovalStatusColorMap = void 0;
    (function (ApprovalStatusColorMap) {
        ApprovalStatusColorMap["OPEN"] = "success";
        ApprovalStatusColorMap["CLOSED"] = "danger";
        ApprovalStatusColorMap["INVALID"] = "danger";
        ApprovalStatusColorMap["VALID"] = "success";
        ApprovalStatusColorMap["ENTERED"] = "primary";
        ApprovalStatusColorMap["READY"] = "primary";
        ApprovalStatusColorMap["ACCEPTED"] = "warning";
        ApprovalStatusColorMap["REJECTED"] = "danger";
        ApprovalStatusColorMap["PENDING"] = "primary";
        ApprovalStatusColorMap["APPROVED"] = "success";
        ApprovalStatusColorMap["CANCELLED"] = "warning";
    })(exports.ApprovalStatusColorMap || (exports.ApprovalStatusColorMap = {}));
    exports.ContactApprovalStatusMap = void 0;
    (function (ContactApprovalStatusMap) {
        ContactApprovalStatusMap["CANCELLED"] = "CANCELLED";
        ContactApprovalStatusMap["REJECTED"] = "REJECTED";
        ContactApprovalStatusMap["PENDING"] = "ENTERED";
        ContactApprovalStatusMap["APPROVED"] = "APPROVED";
    })(exports.ContactApprovalStatusMap || (exports.ContactApprovalStatusMap = {}));
    exports.Preferences = void 0;
    (function (Preferences) {
        Preferences[Preferences["PAGE_SIZE"] = 20] = "PAGE_SIZE";
        Preferences[Preferences["MAX_NAV_SIZE"] = 3] = "MAX_NAV_SIZE";
        Preferences[Preferences["DEBOUNCE_TIME"] = 300] = "DEBOUNCE_TIME";
        Preferences["LOAD_MORE_METHOD"] = "pagination";
        Preferences[Preferences["NOTIFICATION_DISMISS_TIME"] = 5000] = "NOTIFICATION_DISMISS_TIME";
        Preferences["ACCESS_CONTEXT_SCOPE"] = "SA";
    })(exports.Preferences || (exports.Preferences = {}));
    var IbanMask = 'SS00 AAAA AAAA AAAA AAAA AAAA AAAA AAAA AA';

    var filterEmptyValues = function (obj) { return Object.keys(obj).reduce(function (result, key) {
        var _a;
        return (Object.assign(Object.assign({}, result), (obj[key] ? (_a = {}, _a[key] = obj[key], _a) : {})));
    }, {}); };
    var toInteger = function (value) { return parseInt(value, 10) || 0; };
    var toBoolean = function (value) {
        if (typeof value === 'boolean') {
            return value;
        }
        return value === 'true';
    };
    var sanitizeObject = function (obj) {
        var sanitizedObj = {};
        for (var key in obj) {
            if (obj.hasOwnProperty(key) && obj[key] && key !== exports.InputName.COPY_CONTACT_ADDRESS) {
                sanitizedObj[key] = obj[key];
            }
        }
        return sanitizedObj;
    };
    var flattenObject = function (obj) {
        var flattenedObj = {};
        for (var key in obj) {
            if (obj.hasOwnProperty(key) && obj[key]) {
                if (typeof obj[key] === 'object') {
                    flattenedObj = Object.assign(Object.assign({}, flattenedObj), sanitizeObject(obj[key]));
                }
                else {
                    flattenedObj[key] = obj[key];
                }
            }
        }
        return flattenedObj;
    };
    var fromContactFormToContactModel = function (formObj) {
        var model = {};
        model['accounts'] = [];
        for (var key in formObj) {
            if (formObj.hasOwnProperty(key)) {
                if (key === exports.InputGroupName.CONTACT) {
                    model = Object.assign(Object.assign({}, model), flattenObject(formObj[key]));
                }
                else if (key.indexOf(exports.InputGroupName.ACCOUNT) > -1) {
                    model.accounts.push(flattenObject(formObj[key]));
                }
            }
        }
        return model;
    };
    var fromContactItemToContactModel = function (contact) {
        var keys = ['name', 'alias', 'phoneNumber', 'emailId', 'contactPerson', 'additions'];
        return Object.assign(Object.assign(Object.assign({}, keys.reduce(function (details, key) {
            var _a;
            var value = contact[key];
            if (value) {
                return Object.assign(Object.assign({}, details), (_a = {}, _a[key] = value, _a));
            }
            return details;
        }, {})), filterEmptyValues(addressFromContact(contact))), { accounts: contact.accounts.map(filterEmptyValues) });
    };
    var fromResponseBodyList = function (response) { return ({
        totalCount: parseInt(response.headers.get('x-total-count'), 10) || 0,
        items: response.body || [],
    }); };
    var fromErrorResponse = function (error) { return rxjs.throwError({ status: error.status, message: error.message }); };
    var getApprovalStatus = function (approval) {
        var label = '';
        var approvalDetailsStatus = approval.approvalDetails && approval.approvalDetails.status;
        var currentStatus = exports.ContactApprovalStatusMap[approvalDetailsStatus];
        if (approval.approvalDetails &&
            currentStatus === exports.ContactApprovalStatusMap.PENDING &&
            approval.approvalDetails.policy &&
            approval.approvalDetails.policy.items &&
            approval.approvalDetails.records) {
            var approvals = approval.approvalDetails.records.length;
            var total = approval.approvalDetails.policy.items.reduce(function (totalCount, policy) { return totalCount + policy.numberOfApprovals || 0; }, 0);
            label = " (" + approvals + "/" + total + ")";
        }
        return "" + currentStatus + label;
    };

    /**
     * Service responsible for connecting Contact service to data-ang services
     *  - `ContactService`
     *  - `ContactsHttpService`
     *  - `ApprovalsHttpService`
     * This service is dependant on data-ang.
     *
     * @see ContactService
     * @see ContactsHttpService,
     * @see ApprovalsHttpService,
     * @usageNotes
     *
     * ```ts
     * @NgModule({
     *   ...
     *   providers: [
     *     ...
     *     ContactHttpService,
     *   ],
     * })
     * export class MyContactCommonAngModule {}
     * ```
     *
     * ### Inject this service into your component
     *
     * ```ts
     * @Component({
     *   ...
     *   providers: [ContactHttpService],
     * })
     *  export class ContactCommonAngComponent {
     * ```
     */
    var ContactHttpService = /** @class */ (function () {
        function ContactHttpService(contactDataHttpService, approvalService, supportedCountriesService) {
            this.contactDataHttpService = contactDataHttpService;
            this.approvalService = approvalService;
            this.supportedCountriesService = supportedCountriesService;
        }
        /**
         * Get the contacts from data-ang API.
         *
         * @param {ContactRequestParameters} params - Contact Request Parameters
         * @returns {Observable<ContactResponse>} service response in an Observable
         */
        ContactHttpService.prototype.getContacts = function (params) {
            return this.contactDataHttpService
                .getContacts(params, 'response')
                .pipe(operators.map(fromResponseBodyList), operators.catchError(fromErrorResponse));
        };
        /**
         * Fetches Contact based on the ID given from data-ang method
         *
         * @param {string} contactId contact ID
         * @returns {Observable<ContactItem | undefined>} observable of a response
         */
        ContactHttpService.prototype.getContact = function (contactId) {
            return this.contactDataHttpService.getContact({ contactId: contactId }).pipe(operators.catchError(function (error) { return rxjs.of(undefined); }));
        };
        /**
         * Calls the data-ang method for delete contact based on the ID
         *
         * @param {string} contactId contact ID
         * @returns {Observable<ApprovalRequired>} observable of a response
         */
        ContactHttpService.prototype.deleteContact = function (contactId) {
            return this.contactDataHttpService.deleteContact({ contactId: contactId });
        };
        /**
         * Calls the data-ang Method based on params provided.
         *
         * @param {ContactRequestParameters} params request parameters
         * @returns {Observable<Approvals>} observable of a response
         */
        ContactHttpService.prototype.getPendingApprovals = function (params) {
            return this.approvalService
                .getApprovals(params, 'response')
                .pipe(operators.map(fromResponseBodyList), operators.catchError(fromErrorResponse));
        };
        /**
         * Calls datanag method for fetching contact list of all pending approvals created by me.
         *
         * @param {ContactRequestParameters} params request parameters
         * @returns {Observable<ApprovalsCreatedByMe>} observable of a response
         */
        ContactHttpService.prototype.getApprovalsCreatedByMe = function (params) {
            return this.approvalService
                .getApprovalsCreatedByMe(params, 'response')
                .pipe(operators.map(fromResponseBodyList), operators.catchError(fromErrorResponse));
        };
        /**
         * Calls data ang method for deleting the approval records.
         *
         * @param {string} requestId id of a contact
         * @returns {Observable<any>} observable of a response
         */
        ContactHttpService.prototype.deleteApprovalsRecord = function (requestId) {
            return this.approvalService.deleteApprovalRequest({ requestId: requestId });
        };
        /**
         * Update the contact
         *
         * @param {ContactItem} contact updated contact Object
         * @returns {Observable<ContactPutResponseBody>} observable of a response
         */
        ContactHttpService.prototype.updateContact = function (contact) {
            return this.contactDataHttpService.putContact({ contactId: contact.id, contactPutRequestBody: contact });
        };
        /**
         * Calls the data-ang method for Approve Contact .
         *
         * @param {string} requestId id of a contact
         * @param {string?} comment explanation of request approval
         * @returns {Observable<ApprovalResultStatus>} observable of a response
         */
        ContactHttpService.prototype.approveContact = function (requestId, comment) {
            var body = comment ? { comment: comment } : undefined;
            return this.approvalService
                .postApprovalRecord({ requestId: requestId, approvalPostRequestBody: body })
                .pipe(operators.map(function (response) { return response.status; }));
        };
        /**
         * Calls the data-ang method for Reject Contact .
         *
         * @param {string} requestId id of a contact
         * @param {string?} comment explanation of request rejection
         * @returns {Observable<any>} observable of a response
         */
        ContactHttpService.prototype.rejectContact = function (requestId, comment) {
            var body = comment ? { comment: comment } : undefined;
            return this.approvalService.postRejectionRecord({ requestId: requestId, rejectionPostRequestBody: body });
        };
        /**
         * Calls the data-ang method for supported countries .
         *
         * @returns {Observable<HttpResponse<string[]>>} observable of a response
         */
        ContactHttpService.prototype.getSupportedCountries = function () {
            return this.supportedCountriesService.getSupportedCountries('response');
        };
        return ContactHttpService;
    }());
    /** @nocollapse */ ContactHttpService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactHttpService, deps: [{ token: i1__namespace$2.ContactsHttpService }, { token: i1__namespace$2.ApprovalsHttpService }, { token: i1__namespace$2.SupportedCountriesHttpService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ ContactHttpService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactHttpService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactHttpService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace$2.ContactsHttpService }, { type: i1__namespace$2.ApprovalsHttpService }, { type: i1__namespace$2.SupportedCountriesHttpService }]; } });

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var ContactsServiceConfigDefaults = {
        pageSize: 50,
    };
    /**
     * Service calls the APIs for all the actions done by the user.
     * This service Injects ContactHttpService
     *
     * @see ContactHttpService
     * @usageNotes
     *
     *
     * ```ts
     * @NgModule({
     *   ...
     *   providers: [
     *     ...
     *     ContactService,
     *   ],
     * })
     * export class MyContactCommonAngModule {}
     * ```
     *
     * ### Inject this service into your component
     *
     * ```ts
     * @Component({
     *   ...
     *   providers: [ContactService],
     * })
     *  export class ContactCommonAngComponent {
     * ```
     */
    var ContactService = /** @class */ (function () {
        function ContactService(contactHttpService) {
            var _this = this;
            this.contactHttpService = contactHttpService;
            this.destroy$ = new rxjs.Subject();
            this.changePage$ = new rxjs.Subject();
            this.loadMore$ = new rxjs.Subject();
            this.load$ = new rxjs.Subject();
            this.refresh$ = new rxjs.Subject();
            this.search$ = new rxjs.Subject();
            this.sort$ = new rxjs.Subject();
            this.config$ = new rxjs.BehaviorSubject(ContactsServiceConfigDefaults);
            this.id$$ = new rxjs.ReplaySubject(1);
            this.subscriptions = [];
            this.contact$ = this.id$$.pipe(operators.switchMap(function (id) {
                if (!id) {
                    return rxjs.of(undefined);
                }
                return _this.contactHttpService.getContact(id);
            }));
            this.loading$$ = new rxjs.ReplaySubject(1);
            this.loading$ = this.loading$$.asObservable();
            this.acting$$ = new rxjs.ReplaySubject(1);
            this.acting$ = this.acting$$.asObservable();
            this.pageSize$ = this.config$.pipe(operators.map(function (config) { return config.pageSize; }));
            this.actions$ = rxjs.merge(this.load$.pipe(operators.mapTo({ action: exports.ContactActions.Load })), this.search$.pipe(operators.map(function (_b) {
                var query = _b.query, from = _b.from;
                return ({ action: exports.ContactActions.Search, query: query, from: from });
            })), this.refresh$.pipe(operators.map(function (loadMoreMethod) { return ({ action: exports.ContactActions.Refresh, loadMoreMethod: loadMoreMethod }); })), this.changePage$.pipe(operators.map(function (from) { return ({ action: exports.ContactActions.ChangePage, from: from }); })), this.loadMore$.pipe(operators.map(function (from) { return ({ action: exports.ContactActions.LoadMore, from: from }); })), this.pageSize$.pipe(operators.map(function (pageSize) { return ({ pageSize: pageSize }); })), this.sort$.pipe(operators.map(function (_b) {
                var sort = _b.sort, direction = _b.direction;
                return ({ action: exports.ContactActions.Sort, sort: sort, direction: direction });
            })));
            this.state$ = this.actions$.pipe(operators.scan(function (state, action) { return (Object.assign(Object.assign({}, state), action)); }), operators.map(function (_a) {
                var pageSize = _a.pageSize, loadMoreMethod = _a.loadMoreMethod, query = _a.query, state = __rest(_a, ["pageSize", "loadMoreMethod", "query"]);
                var isRefresh = state.action === exports.ContactActions.Refresh;
                var size = pageSize || ContactsServiceConfigDefaults.pageSize;
                var from = state.from || 0;
                return Object.assign(Object.assign({}, state), { query: query || '', size: isRefresh && loadMoreMethod === exports.LoadMoreMethod.LOAD_MORE ? size * (from + 1) : size, from: isRefresh && loadMoreMethod === exports.LoadMoreMethod.LOAD_MORE ? 0 : from });
            }), operators.filter(function (state) { return state.action !== undefined; }), operators.shareReplay(1));
            this.effects$ = this.state$.pipe(operators.mergeMap(function (_a) {
                var action = _a.action, parameters = __rest(_a, ["action"]);
                _this.loading = true;
                var isLoadMore = action === exports.ContactActions.LoadMore;
                return _this.contactHttpService.getContacts(_this.removeEmptyParameters(parameters)).pipe(operators.map(function (response) { return (Object.assign(Object.assign({}, response), { isLoadMore: isLoadMore })); }), operators.finalize(function () { return (_this.loading = false); }));
            }), operators.takeUntil(this.destroy$), operators.shareReplay(1));
            this.contactsSource$ = new rxjs.BehaviorSubject(undefined);
        }
        Object.defineProperty(ContactService.prototype, "loading", {
            set: function (val) {
                this.loading$$.next(val);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ContactService.prototype, "acting", {
            set: function (val) {
                this.acting$$.next(val);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ContactService.prototype, "contacts$", {
            get: function () {
                return this.contactsSource$.asObservable();
            },
            enumerable: false,
            configurable: true
        });
        ContactService.prototype.removeEmptyParameters = function (parameters) {
            return Object.entries(parameters)
                .filter(function (_b) {
                var _c = __read(_b, 2), key = _c[0], value = _c[1];
                return value !== '';
            })
                .reduce(function (prev, curr) {
                var _b;
                return (Object.assign(Object.assign({}, prev), (_b = {}, _b[curr[0]] = curr[1], _b)));
            }, {});
        };
        /**
         * Sets the Subject with updated contactService config.
         *
         * @param {ContactsServiceConfig} config - new config for Contact Service
         */
        ContactService.prototype.init = function (config) {
            this.config$.next(config);
        };
        /**
         *  Updates the subject with value
         */
        ContactService.prototype.load = function () {
            this.load$.next();
        };
        /**
         * Updates the loadMore Subject with pageFrom value.
         *
         * @param {number} from - page From the data has to be fetched.
         */
        ContactService.prototype.loadMore = function (from) {
            this.loadMore$.next(from);
        };
        /**
         * Updates the changePage subject to updated page.
         *
         * @param {number} from - page From the data has to be fetched.
         */
        ContactService.prototype.changePage = function (from) {
            this.changePage$.next(from);
        };
        /**
         * Triggers the refresh listener with current load more.
         *
         * @param {LoadMoreMethod} loadMoreMethod - Current LoadMore method can be pagination / load-more
         */
        ContactService.prototype.refresh = function (loadMoreMethod) {
            this.refresh$.next(loadMoreMethod);
        };
        /**
         * Triggers search Listner with search query.
         *
         * @param {string} query - search text entered by the user.
         */
        ContactService.prototype.searchContacts = function (query) {
            this.search$.next({ query: query, from: 0 });
        };
        /**
         * Triggers sort Listner with mapped event.
         *
         * @param {string} sortEvent - table sort event.
         */
        ContactService.prototype.sortApprovals = function (sortEvent) {
            var castedDirection = sortEvent.direction.toUpperCase();
            var mappedEvent = { sort: sortEvent.column, direction: castedDirection };
            this.sort$.next(mappedEvent);
        };
        /**
         * Subscribes to the contact of a given contact ID.
         *
         * @param {Observable<string | null>} id Observable of Contact ID.
         * @returns {Observable<ContactItem | undefined>} of contact Details with that ID.
         */
        ContactService.prototype.getContactFrom = function (id) {
            this.subscriptions.push(id.subscribe(this.id$$));
            return this.contact$;
        };
        /**
         * Returns the details for a given ID.
         *
         * @param {string} id contact ID
         * @returns {Observable<ContactItem | undefined>} Observable of contact Details for given ID.
         */
        ContactService.prototype.getContactById = function (id) {
            return this.contactHttpService.getContact(id);
        };
        /**
         * Calls the delete API for specific ID
         *
         * @param {string} contactId Contact ID
         * @returns {Observable<ApprovalRequired>} observable of a result
         */
        ContactService.prototype.deleteContact = function (contactId) {
            var _this = this;
            this.acting = true;
            return this.contactHttpService.deleteContact(contactId).pipe(operators.finalize(function () { return (_this.acting = false); }));
        };
        /**
         *
         * @param {ContactItem} contact contact item object
         * @returns {Observable<ApprovalRequired>} response of a contact update
         */
        ContactService.prototype.updateContact = function (contact) {
            var _this = this;
            this.acting = true;
            return this.contactHttpService.updateContact(contact).pipe(operators.finalize(function () { return (_this.acting = false); }));
        };
        /**
         * Calls the API for approval
         *
         * @param {string} approvalId - approval ID
         * @param {string?} comment explanation of request approval
         * @returns {Observable<string>} response of a contact edit approval
         */
        ContactService.prototype.approveContact = function (approvalId, comment) {
            var _this = this;
            this.acting = true;
            return this.contactHttpService.approveContact(approvalId, comment).pipe(operators.finalize(function () { return (_this.acting = false); }));
        };
        /**
         * Calls the API for rejction
         *
         * @param {string} approvalId approval ID
         * @param {string?} comment explanation of request rejection
         * @returns {Observable<string>} response of an approval rejection
         */
        ContactService.prototype.rejectContact = function (approvalId, comment) {
            var _this = this;
            this.acting = true;
            return this.contactHttpService.rejectContact(approvalId, comment).pipe(operators.finalize(function () { return (_this.acting = false); }));
        };
        ContactService.prototype.ngOnDestroy = function () {
            this.subscriptions.forEach(function (subscription) { return subscription.unsubscribe(); });
            this.destroy$.complete();
            this.loadMore$.complete();
            this.changePage$.complete();
            this.refresh$.complete();
        };
        return ContactService;
    }());
    /** @nocollapse */ ContactService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactService, deps: [{ token: ContactHttpService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ ContactService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: ContactHttpService }]; } });

    var emptyIbanCountriesList = {};
    var BB_CONTACT_COUNTRIES_LIST = new i0.InjectionToken('BB_CONTACT_COUNTRIES_LIST');
    var BB_CONTACT_IBAN_COUNTRIES_LIST = new i0.InjectionToken('BB_CONTACT_IBAN_COUNTRIES_LIST');
    var BB_CONTACT_BANK_ACCOUNT_TYPES_LIST = new i0.InjectionToken('BB_CONTACT_BANK_ACCOUNT_TYPES_LIST');
    var ContactConfigProviders = [
        {
            provide: BB_CONTACT_COUNTRIES_LIST,
            useValue: Countries,
        },
        {
            provide: BB_CONTACT_IBAN_COUNTRIES_LIST,
            useValue: emptyIbanCountriesList,
        },
        {
            provide: BB_CONTACT_BANK_ACCOUNT_TYPES_LIST,
            useValue: defaultAccountTypes,
        },
    ];

    /**
     * Service responsible for providing available countries list
     */
    var ContactCountryListService = /** @class */ (function () {
        function ContactCountryListService(countriesList, contactHttpService) {
            this.countriesList = countriesList;
            this.contactHttpService = contactHttpService;
        }
        /**
         * Returns countries configured locally
         *
         * @returns {Observable<string[]>} - stream of country lists
         */
        ContactCountryListService.prototype.getFromLocalSource = function () {
            return rxjs.of(this.countriesList);
        };
        /**
         * Return countries from external service
         *
         * @returns {Observable<string[]>} - stream of country lists
         */
        ContactCountryListService.prototype.getFromExternalSource = function () {
            return this.contactHttpService.getSupportedCountries().pipe(operators.map(function (response) { return response.body || []; }), operators.catchError(function () { return rxjs.of([]); }));
        };
        return ContactCountryListService;
    }());
    /** @nocollapse */ ContactCountryListService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactCountryListService, deps: [{ token: BB_CONTACT_COUNTRIES_LIST }, { token: ContactHttpService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ ContactCountryListService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactCountryListService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactCountryListService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () {
            return [{ type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [BB_CONTACT_COUNTRIES_LIST]
                        }] }, { type: ContactHttpService }];
        } });

    var provideContactServices = [
        { provide: ContactHttpService, useClass: ContactHttpService },
        {
            provide: ContactService,
            useClass: ContactService,
            deps: [ContactHttpService],
        },
        ContactCountryListService,
    ];

    /**
     * Service responsible for connecting Contact service to data-ang services
     *  - `ContactService`
     * This service is dependant on data-ang.
     *
     * @see ContactService
     * @see ApprovalsHttpService,
     * @usageNotes
     *
     * ```ts
     * @NgModule({
     *   ...
     *   providers: [
     *     ...
     *     ApprovalHttpService,
     *   ],
     * })
     * export class MyContactCommonAngModule {}
     * ```
     *
     * ### Inject this service into your component
     *
     * ```ts
     * @Component({
     *   ...
     *   providers: [ApprovalHttpService],
     * })
     *  export class ContactCommonAngComponent {
     * ```
     */
    var ApprovalHttpService = /** @class */ (function () {
        function ApprovalHttpService(approvalDataHttpService) {
            this.approvalDataHttpService = approvalDataHttpService;
        }
        /**
         * Fetch approval object based on approval ID.
         *
         * @param {string} approvalId - Approval ID
         * @returns {Observable<ApprovalDetails | ContactsError>} observable of response
         */
        ApprovalHttpService.prototype.getApproval = function (approvalId) {
            return this.approvalDataHttpService
                .getApprovalByApprovalId({ approvalId: approvalId })
                .pipe(operators.catchError(function (error) { return rxjs.of(new ContactsError(error)); }));
        };
        return ApprovalHttpService;
    }());
    /** @nocollapse */ ApprovalHttpService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ApprovalHttpService, deps: [{ token: i1__namespace$3.ApprovalsHttpService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ ApprovalHttpService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ApprovalHttpService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ApprovalHttpService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace$3.ApprovalsHttpService }]; } });

    /**
     * Service responsible for managing logic behind showing data discard confirmation
     */
    var ContactDiscardChangesService = /** @class */ (function () {
        function ContactDiscardChangesService() {
            this.discard$ = new rxjs.Subject();
            this.discardRequested$$ = new rxjs.Subject();
            this.isFormActive = false;
            /**
             * Stream providing values when discarding data is requested from outside the form component
             */
            this.discardRequested$ = this.discardRequested$$.asObservable();
        }
        /**
         * Registers the event of introducing changes to the form
         */
        ContactDiscardChangesService.prototype.startChanges = function () {
            this.isFormActive = true;
        };
        /**
         * Registers the event of finishing working with the form
         */
        ContactDiscardChangesService.prototype.finishChanges = function () {
            this.isFormActive = false;
        };
        /**
         * Requests that data is discarded from the form
         *
         * @returns {Observable<boolean>} whether data was actually discarded fulfilling the request
         */
        ContactDiscardChangesService.prototype.requestDiscard = function () {
            if (this.isFormActive) {
                this.discard$.complete();
                this.discard$ = new rxjs.Subject();
                this.discardRequested$$.next();
                return this.discard$.asObservable();
            }
            else {
                return rxjs.of(true);
            }
        };
        /**
         * Confirms discarding data after it was requested
         */
        ContactDiscardChangesService.prototype.discard = function () {
            this.discard$.next(true);
            this.discard$.complete();
            this.finishChanges();
        };
        /**
         * Cancels discarding data after it was requested
         */
        ContactDiscardChangesService.prototype.cancelDiscard = function () {
            this.discard$.next(false);
            this.discard$.complete();
        };
        return ContactDiscardChangesService;
    }());
    /** @nocollapse */ ContactDiscardChangesService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactDiscardChangesService, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    /** @nocollapse */ ContactDiscardChangesService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactDiscardChangesService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactDiscardChangesService, decorators: [{
                type: i0.Injectable
            }] });

    /**
     * Collection of countries that are compliant with the ISO 13616 standard.
     * BBAN field is the representation of the format accepted by that country.
     *
     * inner
     * type {object}
     */
    var _countries = {
        AD: {
            bban: '08N12C',
            example: 'AD1200012030200359100100',
            len: 24,
            name: 'Andorra',
        },
        AE: {
            bban: '03N16N',
            example: 'AE260211000000230064016',
            len: 23,
            name: 'United Arab Emirates',
        },
        AL: {
            bban: '08N16C',
            example: 'AL47212110090000000235698741',
            len: 28,
            name: 'Albania',
        },
        AO: {
            bban: '21N',
            example: 'AO06000600000100037131174',
            len: 25,
            name: 'Angola',
        },
        AT: {
            bban: '16N',
            example: 'AT611904300234573201',
            len: 20,
            name: 'Austria',
        },
        AZ: {
            bban: '04C20N',
            example: 'AZ21NABZ00000000137010001944',
            len: 28,
            name: 'Azerbaijan',
        },
        BA: {
            bban: '16N',
            example: 'BA391290079401028494',
            len: 20,
            name: 'Bosnia and Herzegovina',
        },
        BE: {
            bban: '12N',
            example: 'BE68539007547034',
            len: 16,
            name: 'Belgium',
        },
        BF: {
            bban: '23N',
            example: 'BF1030134020015400945000643',
            len: 27,
            name: 'Burkina Faso',
        },
        BG: {
            bban: '04A06N08C',
            example: 'BG80BNBG96611020345678',
            len: 22,
            name: 'Bulgaria',
        },
        BH: {
            bban: '04A14C',
            example: 'BH29BMAG1299123456BH00',
            len: 22,
            name: 'Bahrain',
        },
        BI: {
            bban: '12N',
            example: 'BI43201011067444',
            len: 16,
            name: 'Burundi',
        },
        BJ: {
            bban: '01A23N',
            example: 'BJ11B00610100400271101192591',
            len: 28,
            name: 'Benin',
        },
        BL: {
            bban: '10N11C02N',
            example: 'BL6820041010050500013M02606',
            len: 27,
            name: 'Saint Barthelemy',
        },
        BR: {
            bban: '23N01A01C',
            example: 'BR9700360305000010009795493P1',
            len: 29,
            name: 'Brazil',
        },
        BY: {
            bban: '04C20N',
            example: 'BY86AKBB10100000002966000000',
            len: 28,
            name: 'Belarus',
        },
        CF: {
            bban: '23C',
            example: 'CF4220001000010120069700160',
            len: 27,
            name: 'Central African Republic',
        },
        CG: {
            bban: '23C',
            example: 'CG5230011000202151234567890',
            len: 27,
            name: 'Congo',
        },
        CH: {
            bban: '05N12C',
            example: 'CH9300762011623852957',
            len: 21,
            name: 'Switzerland',
        },
        CI: {
            bban: '01A23N',
            example: 'CI05A00060174100178530011852',
            len: 28,
            name: 'Ivory Coast',
        },
        CM: {
            bban: '23N',
            example: 'CM2110003001000500000605306',
            len: 27,
            name: 'Cameroon',
        },
        CR: {
            bban: '17N',
            example: 'CR0515202001026284066',
            len: 21,
            name: 'Costa Rica',
        },
        CV: {
            bban: '21N',
            example: 'CV64000300004547069110176',
            len: 25,
            name: 'Cape Verde',
        },
        CY: {
            bban: '08N16C',
            example: 'CY17002001280000001200527600',
            len: 28,
            name: 'Cyprus',
        },
        CZ: {
            bban: '20N',
            example: 'CZ6508000000192000145399',
            len: 24,
            name: 'Czech Republic',
        },
        DE: {
            bban: '18N',
            example: 'DE89370400440532013000',
            len: 22,
            name: 'Germany',
        },
        DJ: {
            bban: '23C',
            example: 'DJ2110002010010409943020008',
            len: 27,
            name: 'Djibouti',
        },
        DK: {
            bban: '14N',
            example: 'DK5000400440116243',
            len: 18,
            name: 'Denmark',
        },
        DO: {
            bban: '04A20N',
            example: 'DO28BAGR00000001212453611324',
            len: 28,
            name: 'Dominican Republic',
        },
        DZ: {
            bban: '20N',
            example: 'DZ4000400174401001050486',
            len: 24,
            name: 'Algeria',
        },
        EE: {
            bban: '16N',
            example: 'EE382200221020145685',
            len: 20,
            name: 'Estonia',
        },
        EG: {
            bban: '25C',
            example: 'EG380019000500000000263180002',
            len: 29,
            name: 'Egypt',
        },
        ES: {
            bban: '20N',
            example: 'ES9121000418450200051332',
            len: 24,
            name: 'Spain',
        },
        FI: {
            bban: '14N',
            example: 'FI2112345600000785',
            len: 18,
            name: 'Finland',
        },
        FO: {
            bban: '14N',
            example: 'FO1464600009692713',
            len: 18,
            name: 'Faroe Islands',
        },
        FR: {
            bban: '10N11C02N',
            example: 'FR7630007000110009970004942',
            len: 27,
            name: 'France',
        },
        GA: {
            bban: '23C',
            example: 'GA2140002000055602673300064',
            len: 27,
            name: 'Gabon',
        },
        GB: {
            bban: '04A14N',
            example: 'GB29NWBK60161331926819',
            len: 22,
            name: 'United Kingdom',
        },
        GE: {
            bban: '02C16N',
            example: 'GE29NB0000000101904917',
            len: 22,
            name: 'Georgia',
        },
        GF: {
            bban: '10N11C02N',
            example: 'GF4120041010050500013M02606',
            len: 27,
            name: 'French Guiana',
        },
        GI: {
            bban: '04A15C',
            example: 'GI75NWBK000000007099453',
            len: 23,
            name: 'Gibraltar',
        },
        GL: {
            bban: '14N',
            example: 'GL8964710001000206',
            len: 18,
            name: 'Greenland',
        },
        GP: {
            bban: '10N11C02N',
            example: 'GP1120041010050500013M02606',
            len: 27,
            name: 'Guadeloupe',
        },
        GQ: {
            bban: '23C',
            example: 'GQ7050002001003715228190196',
            len: 27,
            name: 'Equatorial Guinea',
        },
        GR: {
            bban: '07N16C',
            example: 'GR1601101250000000012300695',
            len: 27,
            name: 'Greece',
        },
        GT: {
            bban: '04C20C',
            example: 'GT82TRAJ01020000001210029690',
            len: 28,
            name: 'Guatemala',
        },
        GW: {
            bban: '21C',
            example: 'GW04GW1430010181800637601',
            len: 25,
            name: 'Guinea-Bissau',
        },
        HN: {
            bban: '24C',
            example: 'HN54PISA00000000000000123124',
            len: 28,
            name: 'Honduras',
        },
        HR: {
            bban: '17N',
            example: 'HR1210010051863000160',
            len: 21,
            name: 'Croatia',
        },
        HU: {
            bban: '24N',
            example: 'HU42117730161111101800000000',
            len: 28,
            name: 'Hungary',
        },
        IE: {
            bban: '04C14N',
            example: 'IE29AIBK93115212345678',
            len: 22,
            name: 'Ireland',
        },
        IL: {
            bban: '19N',
            example: 'IL620108000000099999999',
            len: 23,
            name: 'Israel',
        },
        IQ: {
            bban: '19C',
            example: 'IQ20CBIQ861800101010500',
            len: 23,
            name: 'Iraq',
        },
        IR: {
            bban: '22N',
            example: 'IR580540105180021273113007',
            len: 26,
            name: 'Iran',
        },
        IS: {
            bban: '22N',
            example: 'IS140159260076545510730339',
            len: 26,
            name: 'Iceland',
        },
        IT: {
            bban: '01A10N12C',
            example: 'IT60X0542811101000000123456',
            len: 27,
            name: 'Italy',
        },
        JO: {
            bban: '04A22N',
            example: 'JO94CBJO0010000000000131000302',
            len: 30,
            name: 'Jordan',
        },
        KM: {
            bban: '23C',
            example: 'KM4600005000010010904400137',
            len: 27,
            name: 'Comoros',
        },
        KW: {
            bban: '04A22C',
            example: 'KW74NBOK0000000000001000372151',
            len: 30,
            name: 'Kuwait',
        },
        KZ: {
            bban: '03N13C',
            example: 'KZ176010251000042993',
            len: 20,
            name: 'Kazakhstan',
        },
        LB: {
            bban: '04N20C',
            example: 'LB30099900000001001925579115',
            len: 28,
            name: 'Lebanon',
        },
        LC: {
            bban: '28C',
            example: 'LC14BOSL123456789012345678901234',
            len: 32,
            name: 'Saint Lucia',
        },
        LI: {
            bban: '05N12C',
            example: 'LI21088100002324013AA',
            len: 21,
            name: 'Liechtenstein',
        },
        LT: {
            bban: '16N',
            example: 'LT121000011101001000',
            len: 20,
            name: 'Lithuania',
        },
        LU: {
            bban: '03N13C',
            example: 'LU280019400644750000',
            len: 20,
            name: 'Luxembourg',
        },
        LV: {
            bban: '04A13C',
            example: 'LV80BANK0000435195001',
            len: 21,
            name: 'Latvia',
        },
        MA: {
            bban: '24C',
            example: 'MA64011519000001205000534921',
            len: 28,
            name: 'Morocco',
        },
        MC: {
            bban: '10N11C02N',
            example: 'MC5813488000010051108001292',
            len: 27,
            name: 'Monaco',
        },
        MD: {
            bban: '02C18C',
            example: 'MD24AG000225100013104168',
            len: 24,
            name: 'Moldova',
        },
        ME: {
            bban: '18N',
            example: 'ME25505000012345678951',
            len: 22,
            name: 'Montenegro',
        },
        MG: {
            bban: '23N',
            example: 'MG4600005030010101914016056',
            len: 27,
            name: 'Madagascar',
        },
        MK: {
            bban: '03N10C02N',
            example: 'MK07300000000042425',
            len: 19,
            name: 'Macedonia',
        },
        ML: {
            bban: '01A23N',
            example: 'ML03D00890170001002120000447',
            len: 28,
            name: 'Mali',
        },
        MQ: {
            bban: '10N11C02N',
            example: 'MQ5120041010050500013M02606',
            len: 27,
            name: 'Martinique',
        },
        MR: {
            bban: '23N',
            example: 'MR1300012000010000002037372',
            len: 27,
            name: 'Mauritania',
        },
        MT: {
            bban: '04A05N18C',
            example: 'MT84MALT011000012345MTLCAST001S',
            len: 31,
            name: 'Malta',
        },
        MU: {
            bban: '04A19N03A',
            example: 'MU17BOMM0101101030300200000MUR',
            len: 30,
            name: 'Mauritius',
        },
        MZ: {
            bban: '21N',
            example: 'MZ59000100000011834194157',
            len: 25,
            name: 'Mozambique',
        },
        NC: {
            bban: '10N11C02N',
            example: 'NC8420041010050500013M02606',
            len: 27,
            name: 'New Caledonia',
        },
        NE: {
            bban: '24C',
            example: 'NE58NE0380100100130305000268',
            len: 28,
            name: 'Niger',
        },
        NI: {
            bban: '28C',
            example: 'NI92BAMC000000000000000003123123',
            len: 32,
            name: 'Nicaragua',
        },
        NL: {
            bban: '04A10N',
            example: 'NL91ABNA0417164300',
            len: 18,
            name: 'Netherlands',
        },
        NO: {
            bban: '11N',
            example: 'NO9386011117947',
            len: 15,
            name: 'Norway',
        },
        PF: {
            bban: '10N11C02N',
            example: 'PF5720041010050500013M02606',
            len: 27,
            name: 'French Polynesia',
        },
        PK: {
            bban: '04C16N',
            example: 'PK24SCBL0000001171495101',
            len: 24,
            name: 'Pakistan',
        },
        PL: {
            bban: '24N',
            example: 'PL27114020040000300201355387',
            len: 28,
            name: 'Poland',
        },
        PM: {
            bban: '10N11C02N',
            example: 'PM3620041010050500013M02606',
            len: 27,
            name: 'Saint Pierre et Miquelon',
        },
        PS: {
            bban: '04C21N',
            example: 'PS92PALS000000000400123456702',
            len: 29,
            name: 'Palestine',
        },
        PT: {
            bban: '21N',
            example: 'PT50000200000163099310355',
            len: 25,
            name: 'Portugal',
        },
        QA: {
            bban: '04A21C',
            example: 'QA58DOHB00001234567890ABCDEFG',
            len: 29,
            name: 'Qatar',
        },
        RE: {
            bban: '10N11C02N',
            example: 'RE4220041010050500013M02606',
            len: 27,
            name: 'Reunion',
        },
        RO: {
            bban: '04A16C',
            example: 'RO49AAAA1B31007593840000',
            len: 24,
            name: 'Romania',
        },
        RS: {
            bban: '18N',
            example: 'RS35260005601001611379',
            len: 22,
            name: 'Serbia',
        },
        SA: {
            bban: '02N18C',
            example: 'SA0380000000608010167519',
            len: 24,
            name: 'Saudi Arabia',
        },
        SC: {
            bban: '27C',
            example: 'SC52BAHL01031234567890123456USD',
            len: 31,
            name: 'Seychelles',
        },
        SE: {
            bban: '20N',
            example: 'SE3550000000054910000003',
            len: 24,
            name: 'Sweden',
        },
        SI: {
            bban: '15N',
            example: 'SI56191000000123438',
            len: 19,
            name: 'Slovenia',
        },
        SK: {
            bban: '20N',
            example: 'SK3112000000198742637541',
            len: 24,
            name: 'Slovakia',
        },
        SM: {
            bban: '01A10N12C',
            example: 'SM86U0322509800000000270100',
            len: 27,
            name: 'San Marino',
        },
        SN: {
            bban: '01A23N',
            example: 'SN12K00100152000025690007542',
            len: 28,
            name: 'Senegal',
        },
        ST: {
            bban: '21C',
            example: 'ST23000200000289355710148',
            len: 25,
            name: 'Sao Tome and Principe',
        },
        SV: {
            bban: '24C',
            example: 'SV43ACAT00000000000000123123',
            len: 28,
            name: 'El Salvador',
        },
        TD: {
            bban: '23C',
            example: 'TD8960002000010271091600153',
            len: 27,
            name: 'Chad',
        },
        TF: {
            bban: '10N11C02N',
            example: 'TF2120041010050500013M02606',
            len: 27,
            name: 'French Southern Territories',
        },
        TG: {
            bban: '24C',
            example: 'TG53TG0090604310346500400070',
            len: 28,
            name: 'Togo',
        },
        TL: {
            bban: '19N',
            example: 'TL380080012345678910157',
            len: 23,
            name: 'East Timor',
        },
        TN: {
            bban: '20N',
            example: 'TN5914207207100707129648',
            len: 24,
            name: 'Tunisia',
        },
        TR: {
            bban: '05N17C',
            example: 'TR330006100519786457841326',
            len: 26,
            name: 'Turkey',
        },
        UA: {
            bban: '06N19C',
            example: 'UA573543470006762462054925026',
            len: 29,
            name: 'Ukraine',
        },
        VA: {
            bban: '03C15N',
            example: 'VA59001123000012345678',
            len: 22,
            name: 'Vatican City State',
        },
        VG: {
            bban: '04C16N',
            example: 'VG96VPVG0000012345678901',
            len: 24,
            name: 'Virgin Islands, British',
        },
        WF: {
            bban: '10N11C02N',
            example: 'WF9120041010050500013M02606',
            len: 27,
            name: 'Wallis and Futuna Islands',
        },
        XK: {
            bban: '04N10N02N',
            example: 'XK051212012345678906',
            len: 20,
            name: 'Kosovo',
        },
        YT: {
            bban: '10N11C02N',
            example: 'YT3120041010050500013M02606',
            len: 27,
            name: 'Mayotte',
        },
    };
    var countries = Object.assign({}, _countries);
    var addIBANCountries = function (newCountries) {
        countries = Object.assign(Object.assign({}, countries), newCountries);
        return countries;
    };
    /**
     * Given an iban returns that country specification
     *
     * type {function}
     * inner
     * throws {Error} If Country code is not defined
     *
     * @param {string} iban A valid IBAN number
     * @returns {object} Country specification
     */
    var countrySpecification = (function (iban) {
        var countryCode = iban.slice(0, 2);
        if (!{}.hasOwnProperty.call(countries, countryCode)) {
            throw new Error("Country code " + countryCode + " is not supported");
        }
        return countries[countryCode];
    });

    var A = 'A'.charCodeAt(0);
    var Z = 'Z'.charCodeAt(0);
    var PATTERNS = {
        A: 'A-Z',
        N: '0-9',
        C: '0-9A-Z',
    };
    // Stores bban validation regular expressions
    var cachedBbanRegexp = {};
    // Generates BBAN format as a regular expression and cache it
    var prepareBbanRegexp = function (bbanFormat) {
        var matchedString = bbanFormat.match(/[0-9]{2}[ANC]/g);
        if (!matchedString)
            return undefined;
        var pattern = matchedString.reduce(function (prevPattern, block) {
            var quantity = parseInt(block.slice(0, 2), 10);
            var code = block[2];
            return prevPattern + "[" + PATTERNS[code] + "]{" + quantity + "}";
        }, '');
        cachedBbanRegexp[bbanFormat] = new RegExp(pattern);
        return cachedBbanRegexp[bbanFormat];
    };
    // Move the four initial characters to the end of the string
    var rearrangeIban = function (iban) { return "" + iban.slice(4) + iban.slice(0, 4); };
    /**
     * Removes spaces
     *
     * name  compact
     *
     * @param  {string} str A given string
     * @returns {string}     Compact string
     */
    var compact = function (str) { return str.replace(/\s+/g, ''); };
    /**
     * Generates a regular expression from encoded representation
     * It is grouped in blocks of 3 characters, first 2 represents the number
     * and the last character represents the type of character.
     * A = Upper case alpha characters [A-Z]
     * N = Numeric characters [0-9]
     * C = Mixed case alphanumeric characters [0-9a-zA-Z]
     *
     * name bbanRegexp
     * inner
     *
     * @param  {string} bbanFormat Encoded regular expression
     * @returns {object}            Resulting regular expression
     */
    var bbanRegexp = function (bbanFormat) { return cachedBbanRegexp[bbanFormat] || prepareBbanRegexp(bbanFormat); };
    /**
     * Replace each letter in the string with two digits,
     * thereby expanding the string, where A = 10, B = 11, ..., Z = 35
     *
     * name convertIban
     *
     * @param {string} iban IBAN number
     * @returns {string} convetedIBAN representation of the IBAN
     */
    var convertIban = function (iban) { return rearrangeIban(iban)
        .split('')
        .reduce(function (result, char) {
        var code = char.charCodeAt(0);
        var num;
        if (code >= A && code <= Z) {
            num = String(code - A + 10);
        }
        else {
            num = char;
        }
        return "" + result + num;
    }, ''); };

    /**
     * Calculates remainder for numbers bigger than 2^53 - 1,
     * not supported in JavaScript.
     *
     * type {function}
     * inner
     *
     * @param  {string} dividend The dividend
     * @param  {number} divisor  The divisor
     * @returns {number}          The remainder
     */
    var bigIntMod = (function (dividend, divisor) {
        if (dividend.length < 10) {
            return parseInt(dividend, 10) % divisor;
        }
        var D = dividend.slice(9);
        var N = dividend.slice(0, 9);
        var remainder = parseInt(N, 10) % divisor;
        while (D.length > 7) {
            N = String(remainder) + D.slice(0, 7);
            remainder = parseInt(N, 10) % divisor;
            D = D.slice(7);
        }
        N = String(remainder) + D;
        return parseInt(N, 10) % divisor;
    });

    /**
     * module lib-bb-iban
     * description IBAN structure validation library
     */
    /**
     * Validates IBAN structure defined in ISO 13616-1 and ISO/IEC 7064 (MOD97-10).
     *
     * name isValidIBAN
     * type {function}
     *
     * @param {string} iban International bank account number.
     * @returns {boolean} whether input is a valid iban
     */
    var isValidIBAN = function (iban) {
        if (typeof iban !== 'string') {
            return false;
        }
        var spec;
        var compactIBAN = compact(iban.toUpperCase());
        try {
            spec = countrySpecification(compactIBAN);
        }
        catch (error) {
            return false;
        }
        var specBban = bbanRegexp(spec.bban);
        return (spec.len === compactIBAN.length &&
            specBban.test(compactIBAN.slice(4)) &&
            bigIntMod(convertIban(compactIBAN), 97) === 1);
    };
    /**
     * Validates IBAN structure defined in ISO 13616-1 and ISO/IEC 7064 (MOD97-10).
     *
     * name isValidIBANFormControl
     * type {function}
     *
     * @param {AbstractControl} control control with iban International bank account number
     * @returns {Record<string, any>}
     * example: NL91ABNA0417164300
     */
    var isValidIBANFormControl = function (control) {
        var iban = control.value;
        if (typeof iban !== 'string') {
            return { invalidIban: { value: control.value } };
        }
        var spec;
        var compactIBAN = compact(iban.toUpperCase());
        try {
            spec = countrySpecification(compactIBAN);
        }
        catch (error) {
            return { invalidIban: { value: control.value } };
        }
        var specBban = bbanRegexp(spec.bban);
        var res = spec.len === compactIBAN.length &&
            specBban.test(compactIBAN.slice(4)) &&
            bigIntMod(convertIban(compactIBAN), 97) === 1;
        return res ? null : { invalidIban: { value: control.value } };
    };
    /**
     * Validates BBAN structure defined in ISO 13616-1.
     *
     * name isValidBBAN
     * type {function}
     *
     * @param {string} iban International bank account number.
     * @returns {boolean} whether input is a valid bban
     */
    var isValidBBAN = function (iban) {
        if (typeof iban !== 'string') {
            return false;
        }
        var spec;
        var compactIBAN = compact(iban);
        try {
            spec = countrySpecification(compactIBAN);
        }
        catch (error) {
            return false;
        }
        // Remove country code and check digits
        var bban = compactIBAN.slice(4);
        var specBban = bbanRegexp(spec.bban);
        return bban.length === spec.len - 4 && specBban.test(bban);
    };

    /**
     * This is a directive to validate iban
     *
     * @usageNotes
     *
     * ### validates the iban
     *
     * ```html
     * <input type="text" #ibanControl="ngModel" [(ngModel)]="iban" bbIbanValidatorUi />
     * ```
     * @ngModule IbanValidatorModule
     */
    var IbanValidatorDirective = /** @class */ (function () {
        function IbanValidatorDirective(ibanCountryList) {
            this.ibanCountryList = ibanCountryList;
            addIBANCountries(this.ibanCountryList);
        }
        IbanValidatorDirective.prototype.validate = function (control) {
            return control && control.value ? isValidIBANFormControl(control) : null;
        };
        return IbanValidatorDirective;
    }());
    /** @nocollapse */ IbanValidatorDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: IbanValidatorDirective, deps: [{ token: BB_CONTACT_IBAN_COUNTRIES_LIST }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ IbanValidatorDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: IbanValidatorDirective, selector: "[bbIbanValidator]", providers: [{ provide: i1$1.NG_VALIDATORS, useExisting: IbanValidatorDirective, multi: true }], ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: IbanValidatorDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbIbanValidator]',
                        providers: [{ provide: i1$1.NG_VALIDATORS, useExisting: IbanValidatorDirective, multi: true }],
                    }]
            }], ctorParameters: function () {
            return [{ type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [BB_CONTACT_IBAN_COUNTRIES_LIST]
                        }] }];
        } });

    /**
     * Exports:
     * - IbanValidatorDirective
     */
    var IbanValidatorModule = /** @class */ (function () {
        function IbanValidatorModule() {
        }
        return IbanValidatorModule;
    }());
    /** @nocollapse */ IbanValidatorModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: IbanValidatorModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ IbanValidatorModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: IbanValidatorModule, declarations: [IbanValidatorDirective], exports: [IbanValidatorDirective] });
    /** @nocollapse */ IbanValidatorModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: IbanValidatorModule });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: IbanValidatorModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [IbanValidatorDirective],
                        exports: [IbanValidatorDirective],
                    }]
            }] });

    /**
     * This is a directive to validate presence of email top-level domain
     *
     * @usageNotes
     *
     * ```html
     * <input type="email" #ibanControl="ngModel" [(ngModel)]="iban" bbDomainValidator />
     * ```
     * @ngModule EmailDomainModule
     */
    var EmailDomainValidatorDirective = /** @class */ (function () {
        function EmailDomainValidatorDirective() {
            this.topLevelDomainRegex = /@.*\.(([a-zA-Z])|([a-zA-Z0-9][a-zA-Z0-9.\-]*[a-zA-Z0-9]))$/;
        }
        /**
         * Performs validation
         *
         * @param {AbstractControl} control form control
         * @returns {Record<string, any>?} form control error object
         */
        EmailDomainValidatorDirective.prototype.validate = function (control) {
            var value = control === null || control === void 0 ? void 0 : control.value;
            if (!value)
                return null;
            return this.topLevelDomainRegex.test(value) ? null : { email: { value: value } };
        };
        return EmailDomainValidatorDirective;
    }());
    /** @nocollapse */ EmailDomainValidatorDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: EmailDomainValidatorDirective, deps: [], target: i0__namespace.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ EmailDomainValidatorDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: EmailDomainValidatorDirective, selector: "[bbEmailDomainValidator]", providers: [{ provide: i1$1.NG_VALIDATORS, useExisting: EmailDomainValidatorDirective, multi: true }], ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: EmailDomainValidatorDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbEmailDomainValidator]',
                        providers: [{ provide: i1$1.NG_VALIDATORS, useExisting: EmailDomainValidatorDirective, multi: true }],
                    }]
            }] });

    /**
     * Exports:
     * - EmailDomainValidatorDirective
     */
    var EmailDomainModule = /** @class */ (function () {
        function EmailDomainModule() {
        }
        return EmailDomainModule;
    }());
    /** @nocollapse */ EmailDomainModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: EmailDomainModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ EmailDomainModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: EmailDomainModule, declarations: [EmailDomainValidatorDirective], exports: [EmailDomainValidatorDirective] });
    /** @nocollapse */ EmailDomainModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: EmailDomainModule });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: EmailDomainModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [EmailDomainValidatorDirective],
                        exports: [EmailDomainValidatorDirective],
                    }]
            }] });

    var getRelativeDate = function (next) {
        var date = new Date();
        if (next) {
            date.setDate(date.getDate() + next);
        }
        return date.toISOString().slice(0, 10);
    };

    var RelativeDate;
    (function (RelativeDate) {
        RelativeDate["Yesterday"] = "Yesterday";
        RelativeDate["Today"] = "Today";
        RelativeDate["Tomorrow"] = "Tomorrow";
    })(RelativeDate || (RelativeDate = {}));
    /**
     * Pipe is used to show the date in a specific format
     *
     * @usageNotes
     *
     *
     * ```ts
     * @NgModule({
     *   ...
     *   imports: [
     *     ...
     *   ],
     *  declarations: RelativeDatePipe
     * })
     * export class MyContactCommonAngModule {}
     * ```
     *
     * ### Can be used in html
     *
     * ```html
     * {{todayDate | relativeDate: 'mediumTime'}}
     * ```
     * @ngModule RelativeDateModule
     */
    var RelativeDatePipe = /** @class */ (function () {
        function RelativeDatePipe(datePipe) {
            this.datePipe = datePipe;
            this.getRelativeDateHelper = getRelativeDate;
        }
        RelativeDatePipe.prototype.transform = function (value, dateFormat) {
            var result;
            var yesterday = this.getRelativeDateHelper(-1);
            var today = this.getRelativeDateHelper();
            var tomorrow = this.getRelativeDateHelper(1);
            switch (new Date(value).toISOString().slice(0, 10)) {
                case yesterday:
                    result = RelativeDate.Yesterday;
                    break;
                case today:
                    result = RelativeDate.Today;
                    break;
                case tomorrow:
                    result = RelativeDate.Tomorrow;
                    break;
                default:
                    result = this.datePipe.transform(value, dateFormat);
            }
            return result;
        };
        return RelativeDatePipe;
    }());
    /** @nocollapse */ RelativeDatePipe.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: RelativeDatePipe, deps: [{ token: i3__namespace.DatePipe }], target: i0__namespace.ɵɵFactoryTarget.Pipe });
    /** @nocollapse */ RelativeDatePipe.ɵpipe = i0__namespace.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: RelativeDatePipe, name: "relativeDate" });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: RelativeDatePipe, decorators: [{
                type: i0.Pipe,
                args: [{ name: 'relativeDate' }]
            }], ctorParameters: function () { return [{ type: i3__namespace.DatePipe }]; } });

    /**
     * Exports:
     * - RelativeDatePipe
     */
    var RelativeDateModule = /** @class */ (function () {
        function RelativeDateModule() {
        }
        return RelativeDateModule;
    }());
    /** @nocollapse */ RelativeDateModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: RelativeDateModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ RelativeDateModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: RelativeDateModule, declarations: [RelativeDatePipe], imports: [i3.CommonModule], exports: [RelativeDatePipe] });
    /** @nocollapse */ RelativeDateModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: RelativeDateModule, providers: [i3.DatePipe], imports: [[i3.CommonModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: RelativeDateModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [RelativeDatePipe],
                        providers: [i3.DatePipe],
                        imports: [i3.CommonModule],
                        exports: [RelativeDatePipe],
                    }]
            }] });

    var isFormGroupValid = function (controls) { return Object.values(controls).reduce(function (valid, control) {
        control.markAllAsTouched();
        control.updateValueAndValidity();
        return valid && control.valid;
    }, true); };

    /**
     * This is a directive to validate white spaces
     *
     * @usageNotes
     *
     * ### validates the white spaces
     *
     * ```html
     *  <input type="text" #nameControl="ngModel" [(ngModel)]="name" bbNoWhiteSpace />
     * ```
     * @ngModule NoWhiteSpaceModule
     */
    var NoWhiteSpaceValidatorDirective = /** @class */ (function () {
        function NoWhiteSpaceValidatorDirective() {
        }
        NoWhiteSpaceValidatorDirective.prototype.validate = function (control) {
            return noWhiteSpaceValidator(control);
        };
        return NoWhiteSpaceValidatorDirective;
    }());
    /** @nocollapse */ NoWhiteSpaceValidatorDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NoWhiteSpaceValidatorDirective, deps: [], target: i0__namespace.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ NoWhiteSpaceValidatorDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: NoWhiteSpaceValidatorDirective, selector: "[bbNoWhiteSpace]", providers: [{ provide: i1$1.NG_VALIDATORS, useExisting: NoWhiteSpaceValidatorDirective, multi: true }], ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NoWhiteSpaceValidatorDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbNoWhiteSpace]',
                        providers: [{ provide: i1$1.NG_VALIDATORS, useExisting: NoWhiteSpaceValidatorDirective, multi: true }],
                    }]
            }] });
    var noWhiteSpaceValidator = function (control) {
        var isWhitespace = (control.value || '').trim().length === 0;
        return isWhitespace ? { required: true } : null;
    };

    /**
     * Exports:
     * - NoWhiteSpaceValidatorDirective
     */
    var NoWhiteSpaceModule = /** @class */ (function () {
        function NoWhiteSpaceModule() {
        }
        return NoWhiteSpaceModule;
    }());
    /** @nocollapse */ NoWhiteSpaceModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NoWhiteSpaceModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ NoWhiteSpaceModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NoWhiteSpaceModule, declarations: [NoWhiteSpaceValidatorDirective], exports: [NoWhiteSpaceValidatorDirective] });
    /** @nocollapse */ NoWhiteSpaceModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NoWhiteSpaceModule });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NoWhiteSpaceModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [NoWhiteSpaceValidatorDirective],
                        exports: [NoWhiteSpaceValidatorDirective],
                    }]
            }] });

    /**
     * This is an extension slot to be used for customizing country value.
     *
     * @usageNotes
     *
     * ### Display country
     *
     * ```html
     * <ng-template bbCountryItemCustomizable let-hostRef>
     *   <ng-container [ngSwitch]="hostRef.code">
     *     <ng-container *ngSwitchCase="'AF'" i18n="@@bb-country-item.AF">Afghanistan</ng-container>
     *     <ng-container *ngSwitchCase="'AX'" i18n="@@bb-country-item.AX">Aland Islands</ng-container>
     *     <ng-container *ngSwitchCase="'AL'" i18n="@@bb-country-item.AL">Albania</ng-container>
     *     <ng-container *ngSwitchCase="'DZ'" i18n="@@bb-country-item.DZ">Algeria</ng-container>
     *     <ng-container *ngSwitchCase="'AS'" i18n="@@bb-country-item.AS">American Samoa</ng-container>
     *     <ng-container *ngSwitchCase="'AD'" i18n="@@bb-country-item.AD">Andorra</ng-container>
     *     <ng-container *ngSwitchCase="'AO'" i18n="@@bb-country-item.AO">Angola</ng-container>
     *     <ng-container *ngSwitchCase="'AI'" i18n="@@bb-country-item.AI">Anguilla</ng-container>
     *     <ng-container *ngSwitchCase="'AQ'" i18n="@@bb-country-item.AQ">Antarctica</ng-container>
     *     <ng-container *ngSwitchCase="'AG'" i18n="@@bb-country-item.AG">Antigua and Barbuda</ng-container>
     *     <ng-container *ngSwitchCase="'AR'" i18n="@@bb-country-item.AR">Argentina</ng-container>
     *     <ng-container *ngSwitchCase="'AM'" i18n="@@bb-country-item.AM">Armenia</ng-container>
     *     <ng-container *ngSwitchCase="'AW'" i18n="@@bb-country-item.AW">Aruba</ng-container>
     *     <ng-container *ngSwitchCase="'AU'" i18n="@@bb-country-item.AU">Australia</ng-container>
     *     <ng-container *ngSwitchCase="'AT'" i18n="@@bb-country-item.AT">Austria</ng-container>
     *     <ng-container *ngSwitchCase="'AZ'" i18n="@@bb-country-item.AZ">Azerbaijan</ng-container>
     *     <ng-container *ngSwitchCase="'BS'" i18n="@@bb-country-item.BS">Bahamas</ng-container>
     *     <ng-container *ngSwitchCase="'BH'" i18n="@@bb-country-item.BH">Bahrain</ng-container>
     *     <ng-container *ngSwitchCase="'BD'" i18n="@@bb-country-item.BD">Bangladesh</ng-container>
     *     <ng-container *ngSwitchCase="'BB'" i18n="@@bb-country-item.BB">Barbados</ng-container>
     *     <ng-container *ngSwitchCase="'BY'" i18n="@@bb-country-item.BY">Belarus</ng-container>
     *     <ng-container *ngSwitchCase="'BE'" i18n="@@bb-country-item.BE">Belgium</ng-container>
     *     <ng-container *ngSwitchCase="'BZ'" i18n="@@bb-country-item.BZ">Belize</ng-container>
     *     <ng-container *ngSwitchCase="'BJ'" i18n="@@bb-country-item.BJ">Benin</ng-container>
     *     <ng-container *ngSwitchCase="'BM'" i18n="@@bb-country-item.BM">Bermuda</ng-container>
     *     <ng-container *ngSwitchCase="'BT'" i18n="@@bb-country-item.BT">Bhutan</ng-container>
     *     <ng-container *ngSwitchCase="'BO'" i18n="@@bb-country-item.BO">Bolivia, Plurinational State of</ng-container>
     *     <ng-container *ngSwitchCase="'BQ'" i18n="@@bb-country-item.BQ">Bonaire, Saint Eustatius and Saba</ng-container>
     *     <ng-container *ngSwitchCase="'BA'" i18n="@@bb-country-item.BA">Bosnia and Herzegovina</ng-container>
     *     <ng-container *ngSwitchCase="'BW'" i18n="@@bb-country-item.BW">Botswana</ng-container>
     *     <ng-container *ngSwitchCase="'BV'" i18n="@@bb-country-item.BV">Bouvet Island</ng-container>
     *     <ng-container *ngSwitchCase="'BR'" i18n="@@bb-country-item.BR">Brazil</ng-container>
     *     <ng-container *ngSwitchCase="'IO'" i18n="@@bb-country-item.IO">British Indian Ocean Territory</ng-container>
     *     <ng-container *ngSwitchCase="'BN'" i18n="@@bb-country-item.BN">Brunei Darussalam</ng-container>
     *     <ng-container *ngSwitchCase="'BG'" i18n="@@bb-country-item.BG">Bulgaria</ng-container>
     *     <ng-container *ngSwitchCase="'BF'" i18n="@@bb-country-item.BF">Burkina Faso</ng-container>
     *     <ng-container *ngSwitchCase="'BI'" i18n="@@bb-country-item.BI">Burundi</ng-container>
     *     <ng-container *ngSwitchCase="'KH'" i18n="@@bb-country-item.KH">Cambodia</ng-container>
     *     <ng-container *ngSwitchCase="'CM'" i18n="@@bb-country-item.CM">Cameroon</ng-container>
     *     <ng-container *ngSwitchCase="'CA'" i18n="@@bb-country-item.CA">Canada</ng-container>
     *     <ng-container *ngSwitchCase="'CV'" i18n="@@bb-country-item.CV">Cape Verde</ng-container>
     *     <ng-container *ngSwitchCase="'KY'" i18n="@@bb-country-item.KY">Cayman Islands</ng-container>
     *     <ng-container *ngSwitchCase="'CF'" i18n="@@bb-country-item.CF">Central African Republic</ng-container>
     *     <ng-container *ngSwitchCase="'TD'" i18n="@@bb-country-item.TD">Chad</ng-container>
     *     <ng-container *ngSwitchCase="'CL'" i18n="@@bb-country-item.CL">Chile</ng-container>
     *     <ng-container *ngSwitchCase="'CN'" i18n="@@bb-country-item.CN">China</ng-container>
     *     <ng-container *ngSwitchCase="'CX'" i18n="@@bb-country-item.CX">Christmas Island</ng-container>
     *     <ng-container *ngSwitchCase="'CC'" i18n="@@bb-country-item.CC">Cocos (Keeling) Islands</ng-container>
     *     <ng-container *ngSwitchCase="'CO'" i18n="@@bb-country-item.CO">Colombia</ng-container>
     *     <ng-container *ngSwitchCase="'KM'" i18n="@@bb-country-item.KM">Comoros</ng-container>
     *     <ng-container *ngSwitchCase="'CG'" i18n="@@bb-country-item.CG">Congo</ng-container>
     *     <ng-container *ngSwitchCase="'CD'" i18n="@@bb-country-item.CD">Congo, The Democratic Republic of the</ng-container>
     *     <ng-container *ngSwitchCase="'CK'" i18n="@@bb-country-item.CK">Cook Islands</ng-container>
     *     <ng-container *ngSwitchCase="'CR'" i18n="@@bb-country-item.CR">Costa Rica</ng-container>
     *     <ng-container *ngSwitchCase="'CI'" i18n="@@bb-country-item.CI">Cote d'Ivoire</ng-container>
     *     <ng-container *ngSwitchCase="'HR'" i18n="@@bb-country-item.HR">Croatia</ng-container>
     *     <ng-container *ngSwitchCase="'CU'" i18n="@@bb-country-item.CU">Cuba</ng-container>
     *     <ng-container *ngSwitchCase="'CW'" i18n="@@bb-country-item.CW">Curacao</ng-container>
     *     <ng-container *ngSwitchCase="'CY'" i18n="@@bb-country-item.CY">Cyprus</ng-container>
     *     <ng-container *ngSwitchCase="'CZ'" i18n="@@bb-country-item.CZ">Czech Republic</ng-container>
     *     <ng-container *ngSwitchCase="'DK'" i18n="@@bb-country-item.DK">Denmark</ng-container>
     *     <ng-container *ngSwitchCase="'DJ'" i18n="@@bb-country-item.DJ">Djibouti</ng-container>
     *     <ng-container *ngSwitchCase="'DM'" i18n="@@bb-country-item.DM">Dominica</ng-container>
     *     <ng-container *ngSwitchCase="'DO'" i18n="@@bb-country-item.DO">Dominican Republic</ng-container>
     *     <ng-container *ngSwitchCase="'EC'" i18n="@@bb-country-item.EC">Ecuador</ng-container>
     *     <ng-container *ngSwitchCase="'EG'" i18n="@@bb-country-item.EG">Egypt</ng-container>
     *     <ng-container *ngSwitchCase="'SV'" i18n="@@bb-country-item.SV">El Salvador</ng-container>
     *     <ng-container *ngSwitchCase="'GQ'" i18n="@@bb-country-item.GQ">Equatorial Guinea</ng-container>
     *     <ng-container *ngSwitchCase="'ER'" i18n="@@bb-country-item.ER">Eritrea</ng-container>
     *     <ng-container *ngSwitchCase="'EE'" i18n="@@bb-country-item.EE">Estonia</ng-container>
     *     <ng-container *ngSwitchCase="'ET'" i18n="@@bb-country-item.ET">Ethiopia</ng-container>
     *     <ng-container *ngSwitchCase="'FK'" i18n="@@bb-country-item.FK">Falkland Islands (Malvinas)</ng-container>
     *     <ng-container *ngSwitchCase="'FO'" i18n="@@bb-country-item.FO">Faroe Islands</ng-container>
     *     <ng-container *ngSwitchCase="'FJ'" i18n="@@bb-country-item.FJ">Fiji</ng-container>
     *     <ng-container *ngSwitchCase="'FI'" i18n="@@bb-country-item.FI">Finland</ng-container>
     *     <ng-container *ngSwitchCase="'FR'" i18n="@@bb-country-item.FR">France</ng-container>
     *     <ng-container *ngSwitchCase="'GF'" i18n="@@bb-country-item.GF">French Guiana</ng-container>
     *     <ng-container *ngSwitchCase="'PF'" i18n="@@bb-country-item.PF">French Polynesia</ng-container>
     *     <ng-container *ngSwitchCase="'TF'" i18n="@@bb-country-item.TF">French Southern Territories</ng-container>
     *     <ng-container *ngSwitchCase="'GA'" i18n="@@bb-country-item.GA">Gabon</ng-container>
     *     <ng-container *ngSwitchCase="'GM'" i18n="@@bb-country-item.GM">Gambia</ng-container>
     *     <ng-container *ngSwitchCase="'GE'" i18n="@@bb-country-item.GE">Georgia</ng-container>
     *     <ng-container *ngSwitchCase="'DE'" i18n="@@bb-country-item.DE">Germany</ng-container>
     *     <ng-container *ngSwitchCase="'GH'" i18n="@@bb-country-item.GH">Ghana</ng-container>
     *     <ng-container *ngSwitchCase="'GI'" i18n="@@bb-country-item.GI">Gibraltar</ng-container>
     *     <ng-container *ngSwitchCase="'GR'" i18n="@@bb-country-item.GR">Greece</ng-container>
     *     <ng-container *ngSwitchCase="'GL'" i18n="@@bb-country-item.GL">Greenland</ng-container>
     *     <ng-container *ngSwitchCase="'GD'" i18n="@@bb-country-item.GD">Grenada</ng-container>
     *     <ng-container *ngSwitchCase="'GP'" i18n="@@bb-country-item.GP">Guadeloupe</ng-container>
     *     <ng-container *ngSwitchCase="'GU'" i18n="@@bb-country-item.GU">Guam</ng-container>
     *     <ng-container *ngSwitchCase="'GT'" i18n="@@bb-country-item.GT">Guatemala</ng-container>
     *     <ng-container *ngSwitchCase="'GG'" i18n="@@bb-country-item.GG">Guernsey</ng-container>
     *     <ng-container *ngSwitchCase="'GN'" i18n="@@bb-country-item.GN">Guinea</ng-container>
     *     <ng-container *ngSwitchCase="'GW'" i18n="@@bb-country-item.GW">Guinea-Bissau</ng-container>
     *     <ng-container *ngSwitchCase="'GY'" i18n="@@bb-country-item.GY">Guyana</ng-container>
     *     <ng-container *ngSwitchCase="'HT'" i18n="@@bb-country-item.HT">Haiti</ng-container>
     *     <ng-container *ngSwitchCase="'HM'" i18n="@@bb-country-item.HM">Heard Island and McDonald Islands</ng-container>
     *     <ng-container *ngSwitchCase="'VA'" i18n="@@bb-country-item.VA">Holy See (Vatican City State)</ng-container>
     *     <ng-container *ngSwitchCase="'HN'" i18n="@@bb-country-item.HN">Honduras</ng-container>
     *     <ng-container *ngSwitchCase="'HK'" i18n="@@bb-country-item.HK">Hong Kong</ng-container>
     *     <ng-container *ngSwitchCase="'HU'" i18n="@@bb-country-item.HU">Hungary</ng-container>
     *     <ng-container *ngSwitchCase="'IS'" i18n="@@bb-country-item.IS">Iceland</ng-container>
     *     <ng-container *ngSwitchCase="'IN'" i18n="@@bb-country-item.IN">India</ng-container>
     *     <ng-container *ngSwitchCase="'ID'" i18n="@@bb-country-item.ID">Indonesia</ng-container>
     *     <ng-container *ngSwitchCase="'IR'" i18n="@@bb-country-item.IR">Iran, Islamic Republic of</ng-container>
     *     <ng-container *ngSwitchCase="'IQ'" i18n="@@bb-country-item.IQ">Iraq</ng-container>
     *     <ng-container *ngSwitchCase="'IE'" i18n="@@bb-country-item.IE">Ireland</ng-container>
     *     <ng-container *ngSwitchCase="'IM'" i18n="@@bb-country-item.IM">Isle of Man</ng-container>
     *     <ng-container *ngSwitchCase="'IL'" i18n="@@bb-country-item.IL">Israel</ng-container>
     *     <ng-container *ngSwitchCase="'IT'" i18n="@@bb-country-item.IT">Italy</ng-container>
     *     <ng-container *ngSwitchCase="'JM'" i18n="@@bb-country-item.JM">Jamaica</ng-container>
     *     <ng-container *ngSwitchCase="'JP'" i18n="@@bb-country-item.JP">Japan</ng-container>
     *     <ng-container *ngSwitchCase="'JE'" i18n="@@bb-country-item.JE">Jersey</ng-container>
     *     <ng-container *ngSwitchCase="'JO'" i18n="@@bb-country-item.JO">Jordan</ng-container>
     *     <ng-container *ngSwitchCase="'KZ'" i18n="@@bb-country-item.KZ">Kazakhstan</ng-container>
     *     <ng-container *ngSwitchCase="'KE'" i18n="@@bb-country-item.KE">Kenya</ng-container>
     *     <ng-container *ngSwitchCase="'KI'" i18n="@@bb-country-item.KI">Kiribati</ng-container>
     *     <ng-container *ngSwitchCase="'KP'" i18n="@@bb-country-item.KP">Korea, Democratic People's Republic of</ng-container>
     *     <ng-container *ngSwitchCase="'KR'" i18n="@@bb-country-item.KR">Korea, Republic of</ng-container>
     *     <ng-container *ngSwitchCase="'KW'" i18n="@@bb-country-item.KW">Kuwait</ng-container>
     *     <ng-container *ngSwitchCase="'KG'" i18n="@@bb-country-item.KG">Kyrgyzstan</ng-container>
     *     <ng-container *ngSwitchCase="'LA'" i18n="@@bb-country-item.LA">Lao People's Democratic Republic</ng-container>
     *     <ng-container *ngSwitchCase="'LV'" i18n="@@bb-country-item.LV">Latvia</ng-container>
     *     <ng-container *ngSwitchCase="'LB'" i18n="@@bb-country-item.LB">Lebanon</ng-container>
     *     <ng-container *ngSwitchCase="'LS'" i18n="@@bb-country-item.LS">Lesotho</ng-container>
     *     <ng-container *ngSwitchCase="'LR'" i18n="@@bb-country-item.LR">Liberia</ng-container>
     *     <ng-container *ngSwitchCase="'LY'" i18n="@@bb-country-item.LY">Libyan Arab Jamahiriya</ng-container>
     *     <ng-container *ngSwitchCase="'LI'" i18n="@@bb-country-item.LI">Liechtenstein</ng-container>
     *     <ng-container *ngSwitchCase="'LT'" i18n="@@bb-country-item.LT">Lithuania</ng-container>
     *     <ng-container *ngSwitchCase="'LU'" i18n="@@bb-country-item.LU">Luxembourg</ng-container>
     *     <ng-container *ngSwitchCase="'MO'" i18n="@@bb-country-item.MO">Macao</ng-container>
     *     <ng-container *ngSwitchCase="'MK'" i18n="@@bb-country-item.MK">Macedonia, The Former Yugoslav Republic of</ng-container>
     *     <ng-container *ngSwitchCase="'MG'" i18n="@@bb-country-item.MG">Madagascar</ng-container>
     *     <ng-container *ngSwitchCase="'MW'" i18n="@@bb-country-item.MW">Malawi</ng-container>
     *     <ng-container *ngSwitchCase="'MY'" i18n="@@bb-country-item.MY">Malaysia</ng-container>
     *     <ng-container *ngSwitchCase="'MV'" i18n="@@bb-country-item.MV">Maldives</ng-container>
     *     <ng-container *ngSwitchCase="'ML'" i18n="@@bb-country-item.ML">Mali</ng-container>
     *     <ng-container *ngSwitchCase="'MT'" i18n="@@bb-country-item.MT">Malta</ng-container>
     *     <ng-container *ngSwitchCase="'MH'" i18n="@@bb-country-item.MH">Marshall Islands</ng-container>
     *     <ng-container *ngSwitchCase="'MQ'" i18n="@@bb-country-item.MQ">Martinique</ng-container>
     *     <ng-container *ngSwitchCase="'MR'" i18n="@@bb-country-item.MR">Mauritania</ng-container>
     *     <ng-container *ngSwitchCase="'MU'" i18n="@@bb-country-item.MU">Mauritius</ng-container>
     *     <ng-container *ngSwitchCase="'YT'" i18n="@@bb-country-item.YT">Mayotte</ng-container>
     *     <ng-container *ngSwitchCase="'MX'" i18n="@@bb-country-item.MX">Mexico</ng-container>
     *     <ng-container *ngSwitchCase="'FM'" i18n="@@bb-country-item.FM">Micronesia, Federated States of</ng-container>
     *     <ng-container *ngSwitchCase="'MD'" i18n="@@bb-country-item.MD">Moldova, Republic of</ng-container>
     *     <ng-container *ngSwitchCase="'MC'" i18n="@@bb-country-item.MC">Monaco</ng-container>
     *     <ng-container *ngSwitchCase="'MN'" i18n="@@bb-country-item.MN">Mongolia</ng-container>
     *     <ng-container *ngSwitchCase="'ME'" i18n="@@bb-country-item.ME">Montenegro</ng-container>
     *     <ng-container *ngSwitchCase="'MS'" i18n="@@bb-country-item.MS">Montserrat</ng-container>
     *     <ng-container *ngSwitchCase="'MA'" i18n="@@bb-country-item.MA">Morocco</ng-container>
     *     <ng-container *ngSwitchCase="'MZ'" i18n="@@bb-country-item.MZ">Mozambique</ng-container>
     *     <ng-container *ngSwitchCase="'MM'" i18n="@@bb-country-item.MM">Myanmar</ng-container>
     *     <ng-container *ngSwitchCase="'NA'" i18n="@@bb-country-item.NA">Namibia</ng-container>
     *     <ng-container *ngSwitchCase="'NR'" i18n="@@bb-country-item.NR">Nauru</ng-container>
     *     <ng-container *ngSwitchCase="'NP'" i18n="@@bb-country-item.NP">Nepal</ng-container>
     *     <ng-container *ngSwitchCase="'NL'" i18n="@@bb-country-item.NL">Netherlands</ng-container>
     *     <ng-container *ngSwitchCase="'NC'" i18n="@@bb-country-item.NC">New Caledonia</ng-container>
     *     <ng-container *ngSwitchCase="'NZ'" i18n="@@bb-country-item.NZ">New Zealand</ng-container>
     *     <ng-container *ngSwitchCase="'NI'" i18n="@@bb-country-item.NI">Nicaragua</ng-container>
     *     <ng-container *ngSwitchCase="'NE'" i18n="@@bb-country-item.NE">Niger</ng-container>
     *     <ng-container *ngSwitchCase="'NG'" i18n="@@bb-country-item.NG">Nigeria</ng-container>
     *     <ng-container *ngSwitchCase="'NU'" i18n="@@bb-country-item.NU">Niue</ng-container>
     *     <ng-container *ngSwitchCase="'NF'" i18n="@@bb-country-item.NF">Norfolk Island</ng-container>
     *     <ng-container *ngSwitchCase="'MP'" i18n="@@bb-country-item.MP">Northern Mariana Islands</ng-container>
     *     <ng-container *ngSwitchCase="'NO'" i18n="@@bb-country-item.NO">Norway</ng-container>
     *     <ng-container *ngSwitchCase="'PS'" i18n="@@bb-country-item.PS">Occupied Palestinian Territory</ng-container>
     *     <ng-container *ngSwitchCase="'OM'" i18n="@@bb-country-item.OM">Oman</ng-container>
     *     <ng-container *ngSwitchCase="'PK'" i18n="@@bb-country-item.PK">Pakistan</ng-container>
     *     <ng-container *ngSwitchCase="'PW'" i18n="@@bb-country-item.PW">Palau</ng-container>
     *     <ng-container *ngSwitchCase="'PA'" i18n="@@bb-country-item.PA">Panama</ng-container>
     *     <ng-container *ngSwitchCase="'PG'" i18n="@@bb-country-item.PG">Papua New Guinea</ng-container>
     *     <ng-container *ngSwitchCase="'PY'" i18n="@@bb-country-item.PY">Paraguay</ng-container>
     *     <ng-container *ngSwitchCase="'PE'" i18n="@@bb-country-item.PE">Peru</ng-container>
     *     <ng-container *ngSwitchCase="'PH'" i18n="@@bb-country-item.PH">Philippines</ng-container>
     *     <ng-container *ngSwitchCase="'PN'" i18n="@@bb-country-item.PN">Pitcairn</ng-container>
     *     <ng-container *ngSwitchCase="'PL'" i18n="@@bb-country-item.PL">Poland</ng-container>
     *     <ng-container *ngSwitchCase="'PT'" i18n="@@bb-country-item.PT">Portugal</ng-container>
     *     <ng-container *ngSwitchCase="'PR'" i18n="@@bb-country-item.PR">Puerto Rico</ng-container>
     *     <ng-container *ngSwitchCase="'QA'" i18n="@@bb-country-item.QA">Qatar</ng-container>
     *     <ng-container *ngSwitchCase="'RE'" i18n="@@bb-country-item.RE">Reunion</ng-container>
     *     <ng-container *ngSwitchCase="'RO'" i18n="@@bb-country-item.RO">Romania</ng-container>
     *     <ng-container *ngSwitchCase="'RU'" i18n="@@bb-country-item.RU">Russian Federation</ng-container>
     *     <ng-container *ngSwitchCase="'RW'" i18n="@@bb-country-item.RW">Rwanda</ng-container>
     *     <ng-container *ngSwitchCase="'BL'" i18n="@@bb-country-item.BL">Saint Barthelemy</ng-container>
     *     <ng-container *ngSwitchCase="'SH'" i18n="@@bb-country-item.SH">Saint Helena, Ascension and Tristan da Cunha</ng-container>
     *     <ng-container *ngSwitchCase="'KN'" i18n="@@bb-country-item.KN">Saint Kitts and Nevis</ng-container>
     *     <ng-container *ngSwitchCase="'LC'" i18n="@@bb-country-item.LC">Saint Lucia</ng-container>
     *     <ng-container *ngSwitchCase="'MF'" i18n="@@bb-country-item.MF">Saint Martin (French part)</ng-container>
     *     <ng-container *ngSwitchCase="'PM'" i18n="@@bb-country-item.PM">Saint Pierre and Miquelon</ng-container>
     *     <ng-container *ngSwitchCase="'VC'" i18n="@@bb-country-item.VC">Saint Vincent and The Grenadines</ng-container>
     *     <ng-container *ngSwitchCase="'WS'" i18n="@@bb-country-item.WS">Samoa</ng-container>
     *     <ng-container *ngSwitchCase="'SM'" i18n="@@bb-country-item.SM">San Marino</ng-container>
     *     <ng-container *ngSwitchCase="'ST'" i18n="@@bb-country-item.ST">Sao Tome and Principe</ng-container>
     *     <ng-container *ngSwitchCase="'SA'" i18n="@@bb-country-item.SA">Saudi Arabia</ng-container>
     *     <ng-container *ngSwitchCase="'SN'" i18n="@@bb-country-item.SN">Senegal</ng-container>
     *     <ng-container *ngSwitchCase="'RS'" i18n="@@bb-country-item.RS">Serbia</ng-container>
     *     <ng-container *ngSwitchCase="'SC'" i18n="@@bb-country-item.SC">Seychelles</ng-container>
     *     <ng-container *ngSwitchCase="'SL'" i18n="@@bb-country-item.SL">Sierra Leone</ng-container>
     *     <ng-container *ngSwitchCase="'SG'" i18n="@@bb-country-item.SG">Singapore</ng-container>
     *     <ng-container *ngSwitchCase="'SX'" i18n="@@bb-country-item.SX">Sint Maarten (Dutch part)</ng-container>
     *     <ng-container *ngSwitchCase="'SK'" i18n="@@bb-country-item.SK">Slovakia</ng-container>
     *     <ng-container *ngSwitchCase="'SI'" i18n="@@bb-country-item.SI">Slovenia</ng-container>
     *     <ng-container *ngSwitchCase="'SB'" i18n="@@bb-country-item.SB">Solomon Islands</ng-container>
     *     <ng-container *ngSwitchCase="'SO'" i18n="@@bb-country-item.SO">Somalia</ng-container>
     *     <ng-container *ngSwitchCase="'ZA'" i18n="@@bb-country-item.ZA">South Africa</ng-container>
     *     <ng-container *ngSwitchCase="'GS'" i18n="@@bb-country-item.GS">South Georgia and the South Sandwich Islands</ng-container>
     *     <ng-container *ngSwitchCase="'ES'" i18n="@@bb-country-item.ES">Spain</ng-container>
     *     <ng-container *ngSwitchCase="'LK'" i18n="@@bb-country-item.LK">Sri Lanka</ng-container>
     *     <ng-container *ngSwitchCase="'SD'" i18n="@@bb-country-item.SD">Sudan</ng-container>
     *     <ng-container *ngSwitchCase="'SR'" i18n="@@bb-country-item.SR">Suriname</ng-container>
     *     <ng-container *ngSwitchCase="'SJ'" i18n="@@bb-country-item.SJ">Svalbard and Jan Mayen</ng-container>
     *     <ng-container *ngSwitchCase="'SZ'" i18n="@@bb-country-item.SZ">Swaziland</ng-container>
     *     <ng-container *ngSwitchCase="'SE'" i18n="@@bb-country-item.SE">Sweden</ng-container>
     *     <ng-container *ngSwitchCase="'CH'" i18n="@@bb-country-item.CH">Switzerland</ng-container>
     *     <ng-container *ngSwitchCase="'SY'" i18n="@@bb-country-item.SY">Syrian Arab Republic</ng-container>
     *     <ng-container *ngSwitchCase="'TW'" i18n="@@bb-country-item.TW">Taiwan, Province of China</ng-container>
     *     <ng-container *ngSwitchCase="'TJ'" i18n="@@bb-country-item.TJ">Tajikistan</ng-container>
     *     <ng-container *ngSwitchCase="'TZ'" i18n="@@bb-country-item.TZ">Tanzania, United Republic of</ng-container>
     *     <ng-container *ngSwitchCase="'TH'" i18n="@@bb-country-item.TH">Thailand</ng-container>
     *     <ng-container *ngSwitchCase="'TL'" i18n="@@bb-country-item.TL">Timor-Leste</ng-container>
     *     <ng-container *ngSwitchCase="'TG'" i18n="@@bb-country-item.TG">Togo</ng-container>
     *     <ng-container *ngSwitchCase="'TK'" i18n="@@bb-country-item.TK">Tokelau</ng-container>
     *     <ng-container *ngSwitchCase="'TO'" i18n="@@bb-country-item.TO">Tonga</ng-container>
     *     <ng-container *ngSwitchCase="'TT'" i18n="@@bb-country-item.TT">Trinidad and Tobago</ng-container>
     *     <ng-container *ngSwitchCase="'TN'" i18n="@@bb-country-item.TN">Tunisia</ng-container>
     *     <ng-container *ngSwitchCase="'TR'" i18n="@@bb-country-item.TR">Turkey</ng-container>
     *     <ng-container *ngSwitchCase="'TM'" i18n="@@bb-country-item.TM">Turkmenistan</ng-container>
     *     <ng-container *ngSwitchCase="'TC'" i18n="@@bb-country-item.TC">Turks and Caicos Islands</ng-container>
     *     <ng-container *ngSwitchCase="'TV'" i18n="@@bb-country-item.TV">Tuvalu</ng-container>
     *     <ng-container *ngSwitchCase="'UG'" i18n="@@bb-country-item.UG">Uganda</ng-container>
     *     <ng-container *ngSwitchCase="'UA'" i18n="@@bb-country-item.UA">Ukraine</ng-container>
     *     <ng-container *ngSwitchCase="'AE'" i18n="@@bb-country-item.AE">United Arab Emirates</ng-container>
     *     <ng-container *ngSwitchCase="'GB'" i18n="@@bb-country-item.GB">United Kingdom</ng-container>
     *     <ng-container *ngSwitchCase="'US'" i18n="@@bb-country-item.US">United States</ng-container>
     *     <ng-container *ngSwitchCase="'UY'" i18n="@@bb-country-item.UY">Uruguay</ng-container>
     *     <ng-container *ngSwitchCase="'UZ'" i18n="@@bb-country-item.UZ">Uzbekistan</ng-container>
     *     <ng-container *ngSwitchCase="'VU'" i18n="@@bb-country-item.VU">Vanuatu</ng-container>
     *     <ng-container *ngSwitchCase="'VE'" i18n="@@bb-country-item.VE">Venezuela, Bolivarian Republic of</ng-container>
     *     <ng-container *ngSwitchCase="'VN'" i18n="@@bb-country-item.VN">Viet Nam</ng-container>
     *     <ng-container *ngSwitchCase="'VG'" i18n="@@bb-country-item.VG">Virgin Islands, British</ng-container>
     *     <ng-container *ngSwitchCase="'VI'" i18n="@@bb-country-item.VI">Virgin Islands, U.S.</ng-container>
     *     <ng-container *ngSwitchCase="'WF'" i18n="@@bb-country-item.WF">Wallis and Futuna</ng-container>
     *     <ng-container *ngSwitchCase="'EH'" i18n="@@bb-country-item.EH">Western Sahara</ng-container>
     *     <ng-container *ngSwitchCase="'YE'" i18n="@@bb-country-item.YE">Yemen</ng-container>
     *     <ng-container *ngSwitchCase="'ZM'" i18n="@@bb-country-item.ZM">Zambia</ng-container>
     *     <ng-container *ngSwitchCase="'ZW'" i18n="@@bb-country-item.ZW">Zimbabwe</ng-container>
     *   </ng-container>
     * </ng-template>
     * ```
     * @ngModule CountryItemModule
     */
    var CountryItemCustomizableDirective = /** @class */ (function (_super) {
        __extends(CountryItemCustomizableDirective, _super);
        function CountryItemCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return CountryItemCustomizableDirective;
    }(core.BbTemplate));
    /** @nocollapse */ CountryItemCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CountryItemCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ CountryItemCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: CountryItemCustomizableDirective, selector: "[bbCountryItemCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CountryItemCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbCountryItemCustomizable]',
                    }]
            }] });

    /**
     * The component is for showing the country based on ISO code.
     *
     * The following extension slots are available in this component:
     *  - `CountryItemCustomizableDirective`
     *
     * @see CountryItemCustomizableDirective
     * @usageNotes
     *
     * ### Display contact form
     *
     * ```html
     *    <bb-country-item [code]="country"></bb-country-item>
     * ```
     * @ngModule CountryItemModule
     */
    var CountryItemComponent = /** @class */ (function () {
        function CountryItemComponent() {
            this.hostRef = this;
        }
        CountryItemComponent.prototype.ngOnInit = function () {
            if (!this.code) {
                console.warn('Please provide a ISO 3166 Alpha-2 country code');
            }
        };
        return CountryItemComponent;
    }());
    /** @nocollapse */ CountryItemComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CountryItemComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ CountryItemComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: CountryItemComponent, selector: "bb-country-item", inputs: { code: "code" }, ngImport: i0__namespace, template: "<ng-container bbCountryItemCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n<ng-template bbCountryItemCustomizable let-hostRef>\n  <ng-container [ngSwitch]=\"hostRef.code\">\n    <ng-container *ngSwitchCase=\"'AF'\" i18n=\"@@bb-country-item.AF\">Afghanistan</ng-container>\n    <ng-container *ngSwitchCase=\"'AX'\" i18n=\"@@bb-country-item.AX\">Aland Islands</ng-container>\n    <ng-container *ngSwitchCase=\"'AL'\" i18n=\"@@bb-country-item.AL\">Albania</ng-container>\n    <ng-container *ngSwitchCase=\"'DZ'\" i18n=\"@@bb-country-item.DZ\">Algeria</ng-container>\n    <ng-container *ngSwitchCase=\"'AS'\" i18n=\"@@bb-country-item.AS\">American Samoa</ng-container>\n    <ng-container *ngSwitchCase=\"'AD'\" i18n=\"@@bb-country-item.AD\">Andorra</ng-container>\n    <ng-container *ngSwitchCase=\"'AO'\" i18n=\"@@bb-country-item.AO\">Angola</ng-container>\n    <ng-container *ngSwitchCase=\"'AI'\" i18n=\"@@bb-country-item.AI\">Anguilla</ng-container>\n    <ng-container *ngSwitchCase=\"'AQ'\" i18n=\"@@bb-country-item.AQ\">Antarctica</ng-container>\n    <ng-container *ngSwitchCase=\"'AG'\" i18n=\"@@bb-country-item.AG\">Antigua and Barbuda</ng-container>\n    <ng-container *ngSwitchCase=\"'AR'\" i18n=\"@@bb-country-item.AR\">Argentina</ng-container>\n    <ng-container *ngSwitchCase=\"'AM'\" i18n=\"@@bb-country-item.AM\">Armenia</ng-container>\n    <ng-container *ngSwitchCase=\"'AW'\" i18n=\"@@bb-country-item.AW\">Aruba</ng-container>\n    <ng-container *ngSwitchCase=\"'AU'\" i18n=\"@@bb-country-item.AU\">Australia</ng-container>\n    <ng-container *ngSwitchCase=\"'AT'\" i18n=\"@@bb-country-item.AT\">Austria</ng-container>\n    <ng-container *ngSwitchCase=\"'AZ'\" i18n=\"@@bb-country-item.AZ\">Azerbaijan</ng-container>\n    <ng-container *ngSwitchCase=\"'BS'\" i18n=\"@@bb-country-item.BS\">Bahamas</ng-container>\n    <ng-container *ngSwitchCase=\"'BH'\" i18n=\"@@bb-country-item.BH\">Bahrain</ng-container>\n    <ng-container *ngSwitchCase=\"'BD'\" i18n=\"@@bb-country-item.BD\">Bangladesh</ng-container>\n    <ng-container *ngSwitchCase=\"'BB'\" i18n=\"@@bb-country-item.BB\">Barbados</ng-container>\n    <ng-container *ngSwitchCase=\"'BY'\" i18n=\"@@bb-country-item.BY\">Belarus</ng-container>\n    <ng-container *ngSwitchCase=\"'BE'\" i18n=\"@@bb-country-item.BE\">Belgium</ng-container>\n    <ng-container *ngSwitchCase=\"'BZ'\" i18n=\"@@bb-country-item.BZ\">Belize</ng-container>\n    <ng-container *ngSwitchCase=\"'BJ'\" i18n=\"@@bb-country-item.BJ\">Benin</ng-container>\n    <ng-container *ngSwitchCase=\"'BM'\" i18n=\"@@bb-country-item.BM\">Bermuda</ng-container>\n    <ng-container *ngSwitchCase=\"'BT'\" i18n=\"@@bb-country-item.BT\">Bhutan</ng-container>\n    <ng-container *ngSwitchCase=\"'BO'\" i18n=\"@@bb-country-item.BO\">Bolivia, Plurinational State of</ng-container>\n    <ng-container *ngSwitchCase=\"'BQ'\" i18n=\"@@bb-country-item.BQ\">Bonaire, Saint Eustatius and Saba</ng-container>\n    <ng-container *ngSwitchCase=\"'BA'\" i18n=\"@@bb-country-item.BA\">Bosnia and Herzegovina</ng-container>\n    <ng-container *ngSwitchCase=\"'BW'\" i18n=\"@@bb-country-item.BW\">Botswana</ng-container>\n    <ng-container *ngSwitchCase=\"'BV'\" i18n=\"@@bb-country-item.BV\">Bouvet Island</ng-container>\n    <ng-container *ngSwitchCase=\"'BR'\" i18n=\"@@bb-country-item.BR\">Brazil</ng-container>\n    <ng-container *ngSwitchCase=\"'IO'\" i18n=\"@@bb-country-item.IO\">British Indian Ocean Territory</ng-container>\n    <ng-container *ngSwitchCase=\"'BN'\" i18n=\"@@bb-country-item.BN\">Brunei Darussalam</ng-container>\n    <ng-container *ngSwitchCase=\"'BG'\" i18n=\"@@bb-country-item.BG\">Bulgaria</ng-container>\n    <ng-container *ngSwitchCase=\"'BF'\" i18n=\"@@bb-country-item.BF\">Burkina Faso</ng-container>\n    <ng-container *ngSwitchCase=\"'BI'\" i18n=\"@@bb-country-item.BI\">Burundi</ng-container>\n    <ng-container *ngSwitchCase=\"'KH'\" i18n=\"@@bb-country-item.KH\">Cambodia</ng-container>\n    <ng-container *ngSwitchCase=\"'CM'\" i18n=\"@@bb-country-item.CM\">Cameroon</ng-container>\n    <ng-container *ngSwitchCase=\"'CA'\" i18n=\"@@bb-country-item.CA\">Canada</ng-container>\n    <ng-container *ngSwitchCase=\"'CV'\" i18n=\"@@bb-country-item.CV\">Cape Verde</ng-container>\n    <ng-container *ngSwitchCase=\"'KY'\" i18n=\"@@bb-country-item.KY\">Cayman Islands</ng-container>\n    <ng-container *ngSwitchCase=\"'CF'\" i18n=\"@@bb-country-item.CF\">Central African Republic</ng-container>\n    <ng-container *ngSwitchCase=\"'TD'\" i18n=\"@@bb-country-item.TD\">Chad</ng-container>\n    <ng-container *ngSwitchCase=\"'CL'\" i18n=\"@@bb-country-item.CL\">Chile</ng-container>\n    <ng-container *ngSwitchCase=\"'CN'\" i18n=\"@@bb-country-item.CN\">China</ng-container>\n    <ng-container *ngSwitchCase=\"'CX'\" i18n=\"@@bb-country-item.CX\">Christmas Island</ng-container>\n    <ng-container *ngSwitchCase=\"'CC'\" i18n=\"@@bb-country-item.CC\">Cocos (Keeling) Islands</ng-container>\n    <ng-container *ngSwitchCase=\"'CO'\" i18n=\"@@bb-country-item.CO\">Colombia</ng-container>\n    <ng-container *ngSwitchCase=\"'KM'\" i18n=\"@@bb-country-item.KM\">Comoros</ng-container>\n    <ng-container *ngSwitchCase=\"'CG'\" i18n=\"@@bb-country-item.CG\">Congo</ng-container>\n    <ng-container *ngSwitchCase=\"'CD'\" i18n=\"@@bb-country-item.CD\">Congo, The Democratic Republic of the</ng-container>\n    <ng-container *ngSwitchCase=\"'CK'\" i18n=\"@@bb-country-item.CK\">Cook Islands</ng-container>\n    <ng-container *ngSwitchCase=\"'CR'\" i18n=\"@@bb-country-item.CR\">Costa Rica</ng-container>\n    <ng-container *ngSwitchCase=\"'CI'\" i18n=\"@@bb-country-item.CI\">Cote d'Ivoire</ng-container>\n    <ng-container *ngSwitchCase=\"'HR'\" i18n=\"@@bb-country-item.HR\">Croatia</ng-container>\n    <ng-container *ngSwitchCase=\"'CU'\" i18n=\"@@bb-country-item.CU\">Cuba</ng-container>\n    <ng-container *ngSwitchCase=\"'CW'\" i18n=\"@@bb-country-item.CW\">Curacao</ng-container>\n    <ng-container *ngSwitchCase=\"'CY'\" i18n=\"@@bb-country-item.CY\">Cyprus</ng-container>\n    <ng-container *ngSwitchCase=\"'CZ'\" i18n=\"@@bb-country-item.CZ\">Czech Republic</ng-container>\n    <ng-container *ngSwitchCase=\"'DK'\" i18n=\"@@bb-country-item.DK\">Denmark</ng-container>\n    <ng-container *ngSwitchCase=\"'DJ'\" i18n=\"@@bb-country-item.DJ\">Djibouti</ng-container>\n    <ng-container *ngSwitchCase=\"'DM'\" i18n=\"@@bb-country-item.DM\">Dominica</ng-container>\n    <ng-container *ngSwitchCase=\"'DO'\" i18n=\"@@bb-country-item.DO\">Dominican Republic</ng-container>\n    <ng-container *ngSwitchCase=\"'EC'\" i18n=\"@@bb-country-item.EC\">Ecuador</ng-container>\n    <ng-container *ngSwitchCase=\"'EG'\" i18n=\"@@bb-country-item.EG\">Egypt</ng-container>\n    <ng-container *ngSwitchCase=\"'SV'\" i18n=\"@@bb-country-item.SV\">El Salvador</ng-container>\n    <ng-container *ngSwitchCase=\"'GQ'\" i18n=\"@@bb-country-item.GQ\">Equatorial Guinea</ng-container>\n    <ng-container *ngSwitchCase=\"'ER'\" i18n=\"@@bb-country-item.ER\">Eritrea</ng-container>\n    <ng-container *ngSwitchCase=\"'EE'\" i18n=\"@@bb-country-item.EE\">Estonia</ng-container>\n    <ng-container *ngSwitchCase=\"'ET'\" i18n=\"@@bb-country-item.ET\">Ethiopia</ng-container>\n    <ng-container *ngSwitchCase=\"'FK'\" i18n=\"@@bb-country-item.FK\">Falkland Islands (Malvinas)</ng-container>\n    <ng-container *ngSwitchCase=\"'FO'\" i18n=\"@@bb-country-item.FO\">Faroe Islands</ng-container>\n    <ng-container *ngSwitchCase=\"'FJ'\" i18n=\"@@bb-country-item.FJ\">Fiji</ng-container>\n    <ng-container *ngSwitchCase=\"'FI'\" i18n=\"@@bb-country-item.FI\">Finland</ng-container>\n    <ng-container *ngSwitchCase=\"'FR'\" i18n=\"@@bb-country-item.FR\">France</ng-container>\n    <ng-container *ngSwitchCase=\"'GF'\" i18n=\"@@bb-country-item.GF\">French Guiana</ng-container>\n    <ng-container *ngSwitchCase=\"'PF'\" i18n=\"@@bb-country-item.PF\">French Polynesia</ng-container>\n    <ng-container *ngSwitchCase=\"'TF'\" i18n=\"@@bb-country-item.TF\">French Southern Territories</ng-container>\n    <ng-container *ngSwitchCase=\"'GA'\" i18n=\"@@bb-country-item.GA\">Gabon</ng-container>\n    <ng-container *ngSwitchCase=\"'GM'\" i18n=\"@@bb-country-item.GM\">Gambia</ng-container>\n    <ng-container *ngSwitchCase=\"'GE'\" i18n=\"@@bb-country-item.GE\">Georgia</ng-container>\n    <ng-container *ngSwitchCase=\"'DE'\" i18n=\"@@bb-country-item.DE\">Germany</ng-container>\n    <ng-container *ngSwitchCase=\"'GH'\" i18n=\"@@bb-country-item.GH\">Ghana</ng-container>\n    <ng-container *ngSwitchCase=\"'GI'\" i18n=\"@@bb-country-item.GI\">Gibraltar</ng-container>\n    <ng-container *ngSwitchCase=\"'GR'\" i18n=\"@@bb-country-item.GR\">Greece</ng-container>\n    <ng-container *ngSwitchCase=\"'GL'\" i18n=\"@@bb-country-item.GL\">Greenland</ng-container>\n    <ng-container *ngSwitchCase=\"'GD'\" i18n=\"@@bb-country-item.GD\">Grenada</ng-container>\n    <ng-container *ngSwitchCase=\"'GP'\" i18n=\"@@bb-country-item.GP\">Guadeloupe</ng-container>\n    <ng-container *ngSwitchCase=\"'GU'\" i18n=\"@@bb-country-item.GU\">Guam</ng-container>\n    <ng-container *ngSwitchCase=\"'GT'\" i18n=\"@@bb-country-item.GT\">Guatemala</ng-container>\n    <ng-container *ngSwitchCase=\"'GG'\" i18n=\"@@bb-country-item.GG\">Guernsey</ng-container>\n    <ng-container *ngSwitchCase=\"'GN'\" i18n=\"@@bb-country-item.GN\">Guinea</ng-container>\n    <ng-container *ngSwitchCase=\"'GW'\" i18n=\"@@bb-country-item.GW\">Guinea-Bissau</ng-container>\n    <ng-container *ngSwitchCase=\"'GY'\" i18n=\"@@bb-country-item.GY\">Guyana</ng-container>\n    <ng-container *ngSwitchCase=\"'HT'\" i18n=\"@@bb-country-item.HT\">Haiti</ng-container>\n    <ng-container *ngSwitchCase=\"'HM'\" i18n=\"@@bb-country-item.HM\">Heard Island and McDonald Islands</ng-container>\n    <ng-container *ngSwitchCase=\"'VA'\" i18n=\"@@bb-country-item.VA\">Holy See (Vatican City State)</ng-container>\n    <ng-container *ngSwitchCase=\"'HN'\" i18n=\"@@bb-country-item.HN\">Honduras</ng-container>\n    <ng-container *ngSwitchCase=\"'HK'\" i18n=\"@@bb-country-item.HK\">Hong Kong</ng-container>\n    <ng-container *ngSwitchCase=\"'HU'\" i18n=\"@@bb-country-item.HU\">Hungary</ng-container>\n    <ng-container *ngSwitchCase=\"'IS'\" i18n=\"@@bb-country-item.IS\">Iceland</ng-container>\n    <ng-container *ngSwitchCase=\"'IN'\" i18n=\"@@bb-country-item.IN\">India</ng-container>\n    <ng-container *ngSwitchCase=\"'ID'\" i18n=\"@@bb-country-item.ID\">Indonesia</ng-container>\n    <ng-container *ngSwitchCase=\"'IR'\" i18n=\"@@bb-country-item.IR\">Iran, Islamic Republic of</ng-container>\n    <ng-container *ngSwitchCase=\"'IQ'\" i18n=\"@@bb-country-item.IQ\">Iraq</ng-container>\n    <ng-container *ngSwitchCase=\"'IE'\" i18n=\"@@bb-country-item.IE\">Ireland</ng-container>\n    <ng-container *ngSwitchCase=\"'IM'\" i18n=\"@@bb-country-item.IM\">Isle of Man</ng-container>\n    <ng-container *ngSwitchCase=\"'IL'\" i18n=\"@@bb-country-item.IL\">Israel</ng-container>\n    <ng-container *ngSwitchCase=\"'IT'\" i18n=\"@@bb-country-item.IT\">Italy</ng-container>\n    <ng-container *ngSwitchCase=\"'JM'\" i18n=\"@@bb-country-item.JM\">Jamaica</ng-container>\n    <ng-container *ngSwitchCase=\"'JP'\" i18n=\"@@bb-country-item.JP\">Japan</ng-container>\n    <ng-container *ngSwitchCase=\"'JE'\" i18n=\"@@bb-country-item.JE\">Jersey</ng-container>\n    <ng-container *ngSwitchCase=\"'JO'\" i18n=\"@@bb-country-item.JO\">Jordan</ng-container>\n    <ng-container *ngSwitchCase=\"'KZ'\" i18n=\"@@bb-country-item.KZ\">Kazakhstan</ng-container>\n    <ng-container *ngSwitchCase=\"'KE'\" i18n=\"@@bb-country-item.KE\">Kenya</ng-container>\n    <ng-container *ngSwitchCase=\"'KI'\" i18n=\"@@bb-country-item.KI\">Kiribati</ng-container>\n    <ng-container *ngSwitchCase=\"'KP'\" i18n=\"@@bb-country-item.KP\">Korea, Democratic People's Republic of</ng-container>\n    <ng-container *ngSwitchCase=\"'KR'\" i18n=\"@@bb-country-item.KR\">Korea, Republic of</ng-container>\n    <ng-container *ngSwitchCase=\"'KW'\" i18n=\"@@bb-country-item.KW\">Kuwait</ng-container>\n    <ng-container *ngSwitchCase=\"'KG'\" i18n=\"@@bb-country-item.KG\">Kyrgyzstan</ng-container>\n    <ng-container *ngSwitchCase=\"'LA'\" i18n=\"@@bb-country-item.LA\">Lao People's Democratic Republic</ng-container>\n    <ng-container *ngSwitchCase=\"'LV'\" i18n=\"@@bb-country-item.LV\">Latvia</ng-container>\n    <ng-container *ngSwitchCase=\"'LB'\" i18n=\"@@bb-country-item.LB\">Lebanon</ng-container>\n    <ng-container *ngSwitchCase=\"'LS'\" i18n=\"@@bb-country-item.LS\">Lesotho</ng-container>\n    <ng-container *ngSwitchCase=\"'LR'\" i18n=\"@@bb-country-item.LR\">Liberia</ng-container>\n    <ng-container *ngSwitchCase=\"'LY'\" i18n=\"@@bb-country-item.LY\">Libyan Arab Jamahiriya</ng-container>\n    <ng-container *ngSwitchCase=\"'LI'\" i18n=\"@@bb-country-item.LI\">Liechtenstein</ng-container>\n    <ng-container *ngSwitchCase=\"'LT'\" i18n=\"@@bb-country-item.LT\">Lithuania</ng-container>\n    <ng-container *ngSwitchCase=\"'LU'\" i18n=\"@@bb-country-item.LU\">Luxembourg</ng-container>\n    <ng-container *ngSwitchCase=\"'MO'\" i18n=\"@@bb-country-item.MO\">Macao</ng-container>\n    <ng-container *ngSwitchCase=\"'MK'\" i18n=\"@@bb-country-item.MK\"\n      >Macedonia, The Former Yugoslav Republic of</ng-container\n    >\n    <ng-container *ngSwitchCase=\"'MG'\" i18n=\"@@bb-country-item.MG\">Madagascar</ng-container>\n    <ng-container *ngSwitchCase=\"'MW'\" i18n=\"@@bb-country-item.MW\">Malawi</ng-container>\n    <ng-container *ngSwitchCase=\"'MY'\" i18n=\"@@bb-country-item.MY\">Malaysia</ng-container>\n    <ng-container *ngSwitchCase=\"'MV'\" i18n=\"@@bb-country-item.MV\">Maldives</ng-container>\n    <ng-container *ngSwitchCase=\"'ML'\" i18n=\"@@bb-country-item.ML\">Mali</ng-container>\n    <ng-container *ngSwitchCase=\"'MT'\" i18n=\"@@bb-country-item.MT\">Malta</ng-container>\n    <ng-container *ngSwitchCase=\"'MH'\" i18n=\"@@bb-country-item.MH\">Marshall Islands</ng-container>\n    <ng-container *ngSwitchCase=\"'MQ'\" i18n=\"@@bb-country-item.MQ\">Martinique</ng-container>\n    <ng-container *ngSwitchCase=\"'MR'\" i18n=\"@@bb-country-item.MR\">Mauritania</ng-container>\n    <ng-container *ngSwitchCase=\"'MU'\" i18n=\"@@bb-country-item.MU\">Mauritius</ng-container>\n    <ng-container *ngSwitchCase=\"'YT'\" i18n=\"@@bb-country-item.YT\">Mayotte</ng-container>\n    <ng-container *ngSwitchCase=\"'MX'\" i18n=\"@@bb-country-item.MX\">Mexico</ng-container>\n    <ng-container *ngSwitchCase=\"'FM'\" i18n=\"@@bb-country-item.FM\">Micronesia, Federated States of</ng-container>\n    <ng-container *ngSwitchCase=\"'MD'\" i18n=\"@@bb-country-item.MD\">Moldova, Republic of</ng-container>\n    <ng-container *ngSwitchCase=\"'MC'\" i18n=\"@@bb-country-item.MC\">Monaco</ng-container>\n    <ng-container *ngSwitchCase=\"'MN'\" i18n=\"@@bb-country-item.MN\">Mongolia</ng-container>\n    <ng-container *ngSwitchCase=\"'ME'\" i18n=\"@@bb-country-item.ME\">Montenegro</ng-container>\n    <ng-container *ngSwitchCase=\"'MS'\" i18n=\"@@bb-country-item.MS\">Montserrat</ng-container>\n    <ng-container *ngSwitchCase=\"'MA'\" i18n=\"@@bb-country-item.MA\">Morocco</ng-container>\n    <ng-container *ngSwitchCase=\"'MZ'\" i18n=\"@@bb-country-item.MZ\">Mozambique</ng-container>\n    <ng-container *ngSwitchCase=\"'MM'\" i18n=\"@@bb-country-item.MM\">Myanmar</ng-container>\n    <ng-container *ngSwitchCase=\"'NA'\" i18n=\"@@bb-country-item.NA\">Namibia</ng-container>\n    <ng-container *ngSwitchCase=\"'NR'\" i18n=\"@@bb-country-item.NR\">Nauru</ng-container>\n    <ng-container *ngSwitchCase=\"'NP'\" i18n=\"@@bb-country-item.NP\">Nepal</ng-container>\n    <ng-container *ngSwitchCase=\"'NL'\" i18n=\"@@bb-country-item.NL\">Netherlands</ng-container>\n    <ng-container *ngSwitchCase=\"'NC'\" i18n=\"@@bb-country-item.NC\">New Caledonia</ng-container>\n    <ng-container *ngSwitchCase=\"'NZ'\" i18n=\"@@bb-country-item.NZ\">New Zealand</ng-container>\n    <ng-container *ngSwitchCase=\"'NI'\" i18n=\"@@bb-country-item.NI\">Nicaragua</ng-container>\n    <ng-container *ngSwitchCase=\"'NE'\" i18n=\"@@bb-country-item.NE\">Niger</ng-container>\n    <ng-container *ngSwitchCase=\"'NG'\" i18n=\"@@bb-country-item.NG\">Nigeria</ng-container>\n    <ng-container *ngSwitchCase=\"'NU'\" i18n=\"@@bb-country-item.NU\">Niue</ng-container>\n    <ng-container *ngSwitchCase=\"'NF'\" i18n=\"@@bb-country-item.NF\">Norfolk Island</ng-container>\n    <ng-container *ngSwitchCase=\"'MP'\" i18n=\"@@bb-country-item.MP\">Northern Mariana Islands</ng-container>\n    <ng-container *ngSwitchCase=\"'NO'\" i18n=\"@@bb-country-item.NO\">Norway</ng-container>\n    <ng-container *ngSwitchCase=\"'PS'\" i18n=\"@@bb-country-item.PS\">Occupied Palestinian Territory</ng-container>\n    <ng-container *ngSwitchCase=\"'OM'\" i18n=\"@@bb-country-item.OM\">Oman</ng-container>\n    <ng-container *ngSwitchCase=\"'PK'\" i18n=\"@@bb-country-item.PK\">Pakistan</ng-container>\n    <ng-container *ngSwitchCase=\"'PW'\" i18n=\"@@bb-country-item.PW\">Palau</ng-container>\n    <ng-container *ngSwitchCase=\"'PA'\" i18n=\"@@bb-country-item.PA\">Panama</ng-container>\n    <ng-container *ngSwitchCase=\"'PG'\" i18n=\"@@bb-country-item.PG\">Papua New Guinea</ng-container>\n    <ng-container *ngSwitchCase=\"'PY'\" i18n=\"@@bb-country-item.PY\">Paraguay</ng-container>\n    <ng-container *ngSwitchCase=\"'PE'\" i18n=\"@@bb-country-item.PE\">Peru</ng-container>\n    <ng-container *ngSwitchCase=\"'PH'\" i18n=\"@@bb-country-item.PH\">Philippines</ng-container>\n    <ng-container *ngSwitchCase=\"'PN'\" i18n=\"@@bb-country-item.PN\">Pitcairn</ng-container>\n    <ng-container *ngSwitchCase=\"'PL'\" i18n=\"@@bb-country-item.PL\">Poland</ng-container>\n    <ng-container *ngSwitchCase=\"'PT'\" i18n=\"@@bb-country-item.PT\">Portugal</ng-container>\n    <ng-container *ngSwitchCase=\"'PR'\" i18n=\"@@bb-country-item.PR\">Puerto Rico</ng-container>\n    <ng-container *ngSwitchCase=\"'QA'\" i18n=\"@@bb-country-item.QA\">Qatar</ng-container>\n    <ng-container *ngSwitchCase=\"'RE'\" i18n=\"@@bb-country-item.RE\">Reunion</ng-container>\n    <ng-container *ngSwitchCase=\"'RO'\" i18n=\"@@bb-country-item.RO\">Romania</ng-container>\n    <ng-container *ngSwitchCase=\"'RU'\" i18n=\"@@bb-country-item.RU\">Russian Federation</ng-container>\n    <ng-container *ngSwitchCase=\"'RW'\" i18n=\"@@bb-country-item.RW\">Rwanda</ng-container>\n    <ng-container *ngSwitchCase=\"'BL'\" i18n=\"@@bb-country-item.BL\">Saint Barthelemy</ng-container>\n    <ng-container *ngSwitchCase=\"'SH'\" i18n=\"@@bb-country-item.SH\"\n      >Saint Helena, Ascension and Tristan da Cunha</ng-container\n    >\n    <ng-container *ngSwitchCase=\"'KN'\" i18n=\"@@bb-country-item.KN\">Saint Kitts and Nevis</ng-container>\n    <ng-container *ngSwitchCase=\"'LC'\" i18n=\"@@bb-country-item.LC\">Saint Lucia</ng-container>\n    <ng-container *ngSwitchCase=\"'MF'\" i18n=\"@@bb-country-item.MF\">Saint Martin (French part)</ng-container>\n    <ng-container *ngSwitchCase=\"'PM'\" i18n=\"@@bb-country-item.PM\">Saint Pierre and Miquelon</ng-container>\n    <ng-container *ngSwitchCase=\"'VC'\" i18n=\"@@bb-country-item.VC\">Saint Vincent and The Grenadines</ng-container>\n    <ng-container *ngSwitchCase=\"'WS'\" i18n=\"@@bb-country-item.WS\">Samoa</ng-container>\n    <ng-container *ngSwitchCase=\"'SM'\" i18n=\"@@bb-country-item.SM\">San Marino</ng-container>\n    <ng-container *ngSwitchCase=\"'ST'\" i18n=\"@@bb-country-item.ST\">Sao Tome and Principe</ng-container>\n    <ng-container *ngSwitchCase=\"'SA'\" i18n=\"@@bb-country-item.SA\">Saudi Arabia</ng-container>\n    <ng-container *ngSwitchCase=\"'SN'\" i18n=\"@@bb-country-item.SN\">Senegal</ng-container>\n    <ng-container *ngSwitchCase=\"'RS'\" i18n=\"@@bb-country-item.RS\">Serbia</ng-container>\n    <ng-container *ngSwitchCase=\"'SC'\" i18n=\"@@bb-country-item.SC\">Seychelles</ng-container>\n    <ng-container *ngSwitchCase=\"'SL'\" i18n=\"@@bb-country-item.SL\">Sierra Leone</ng-container>\n    <ng-container *ngSwitchCase=\"'SG'\" i18n=\"@@bb-country-item.SG\">Singapore</ng-container>\n    <ng-container *ngSwitchCase=\"'SX'\" i18n=\"@@bb-country-item.SX\">Sint Maarten (Dutch part)</ng-container>\n    <ng-container *ngSwitchCase=\"'SK'\" i18n=\"@@bb-country-item.SK\">Slovakia</ng-container>\n    <ng-container *ngSwitchCase=\"'SI'\" i18n=\"@@bb-country-item.SI\">Slovenia</ng-container>\n    <ng-container *ngSwitchCase=\"'SB'\" i18n=\"@@bb-country-item.SB\">Solomon Islands</ng-container>\n    <ng-container *ngSwitchCase=\"'SO'\" i18n=\"@@bb-country-item.SO\">Somalia</ng-container>\n    <ng-container *ngSwitchCase=\"'ZA'\" i18n=\"@@bb-country-item.ZA\">South Africa</ng-container>\n    <ng-container *ngSwitchCase=\"'GS'\" i18n=\"@@bb-country-item.GS\"\n      >South Georgia and the South Sandwich Islands</ng-container\n    >\n    <ng-container *ngSwitchCase=\"'ES'\" i18n=\"@@bb-country-item.ES\">Spain</ng-container>\n    <ng-container *ngSwitchCase=\"'LK'\" i18n=\"@@bb-country-item.LK\">Sri Lanka</ng-container>\n    <ng-container *ngSwitchCase=\"'SD'\" i18n=\"@@bb-country-item.SD\">Sudan</ng-container>\n    <ng-container *ngSwitchCase=\"'SR'\" i18n=\"@@bb-country-item.SR\">Suriname</ng-container>\n    <ng-container *ngSwitchCase=\"'SJ'\" i18n=\"@@bb-country-item.SJ\">Svalbard and Jan Mayen</ng-container>\n    <ng-container *ngSwitchCase=\"'SZ'\" i18n=\"@@bb-country-item.SZ\">Swaziland</ng-container>\n    <ng-container *ngSwitchCase=\"'SE'\" i18n=\"@@bb-country-item.SE\">Sweden</ng-container>\n    <ng-container *ngSwitchCase=\"'CH'\" i18n=\"@@bb-country-item.CH\">Switzerland</ng-container>\n    <ng-container *ngSwitchCase=\"'SY'\" i18n=\"@@bb-country-item.SY\">Syrian Arab Republic</ng-container>\n    <ng-container *ngSwitchCase=\"'TW'\" i18n=\"@@bb-country-item.TW\">Taiwan, Province of China</ng-container>\n    <ng-container *ngSwitchCase=\"'TJ'\" i18n=\"@@bb-country-item.TJ\">Tajikistan</ng-container>\n    <ng-container *ngSwitchCase=\"'TZ'\" i18n=\"@@bb-country-item.TZ\">Tanzania, United Republic of</ng-container>\n    <ng-container *ngSwitchCase=\"'TH'\" i18n=\"@@bb-country-item.TH\">Thailand</ng-container>\n    <ng-container *ngSwitchCase=\"'TL'\" i18n=\"@@bb-country-item.TL\">Timor-Leste</ng-container>\n    <ng-container *ngSwitchCase=\"'TG'\" i18n=\"@@bb-country-item.TG\">Togo</ng-container>\n    <ng-container *ngSwitchCase=\"'TK'\" i18n=\"@@bb-country-item.TK\">Tokelau</ng-container>\n    <ng-container *ngSwitchCase=\"'TO'\" i18n=\"@@bb-country-item.TO\">Tonga</ng-container>\n    <ng-container *ngSwitchCase=\"'TT'\" i18n=\"@@bb-country-item.TT\">Trinidad and Tobago</ng-container>\n    <ng-container *ngSwitchCase=\"'TN'\" i18n=\"@@bb-country-item.TN\">Tunisia</ng-container>\n    <ng-container *ngSwitchCase=\"'TR'\" i18n=\"@@bb-country-item.TR\">Turkey</ng-container>\n    <ng-container *ngSwitchCase=\"'TM'\" i18n=\"@@bb-country-item.TM\">Turkmenistan</ng-container>\n    <ng-container *ngSwitchCase=\"'TC'\" i18n=\"@@bb-country-item.TC\">Turks and Caicos Islands</ng-container>\n    <ng-container *ngSwitchCase=\"'TV'\" i18n=\"@@bb-country-item.TV\">Tuvalu</ng-container>\n    <ng-container *ngSwitchCase=\"'UG'\" i18n=\"@@bb-country-item.UG\">Uganda</ng-container>\n    <ng-container *ngSwitchCase=\"'UA'\" i18n=\"@@bb-country-item.UA\">Ukraine</ng-container>\n    <ng-container *ngSwitchCase=\"'AE'\" i18n=\"@@bb-country-item.AE\">United Arab Emirates</ng-container>\n    <ng-container *ngSwitchCase=\"'GB'\" i18n=\"@@bb-country-item.GB\">United Kingdom</ng-container>\n    <ng-container *ngSwitchCase=\"'US'\" i18n=\"@@bb-country-item.US\">United States</ng-container>\n    <ng-container *ngSwitchCase=\"'UY'\" i18n=\"@@bb-country-item.UY\">Uruguay</ng-container>\n    <ng-container *ngSwitchCase=\"'UZ'\" i18n=\"@@bb-country-item.UZ\">Uzbekistan</ng-container>\n    <ng-container *ngSwitchCase=\"'VU'\" i18n=\"@@bb-country-item.VU\">Vanuatu</ng-container>\n    <ng-container *ngSwitchCase=\"'VE'\" i18n=\"@@bb-country-item.VE\">Venezuela, Bolivarian Republic of</ng-container>\n    <ng-container *ngSwitchCase=\"'VN'\" i18n=\"@@bb-country-item.VN\">Viet Nam</ng-container>\n    <ng-container *ngSwitchCase=\"'VG'\" i18n=\"@@bb-country-item.VG\">Virgin Islands, British</ng-container>\n    <ng-container *ngSwitchCase=\"'VI'\" i18n=\"@@bb-country-item.VI\">Virgin Islands, U.S.</ng-container>\n    <ng-container *ngSwitchCase=\"'WF'\" i18n=\"@@bb-country-item.WF\">Wallis and Futuna</ng-container>\n    <ng-container *ngSwitchCase=\"'EH'\" i18n=\"@@bb-country-item.EH\">Western Sahara</ng-container>\n    <ng-container *ngSwitchCase=\"'YE'\" i18n=\"@@bb-country-item.YE\">Yemen</ng-container>\n    <ng-container *ngSwitchCase=\"'ZM'\" i18n=\"@@bb-country-item.ZM\">Zambia</ng-container>\n    <ng-container *ngSwitchCase=\"'ZW'\" i18n=\"@@bb-country-item.ZW\">Zimbabwe</ng-container>\n  </ng-container>\n</ng-template>\n", directives: [{ type: CountryItemCustomizableDirective, selector: "[bbCountryItemCustomizable]" }, { type: i3__namespace.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i3__namespace.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CountryItemComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-country-item',
                        templateUrl: './country-item.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], propDecorators: { code: [{
                    type: i0.Input
                }] } });

    /**
     * Exports:
     * - CountryItemComponent
     * - CountryItemCustomizableDirective
     */
    var CountryItemModule = /** @class */ (function () {
        function CountryItemModule() {
        }
        return CountryItemModule;
    }());
    /** @nocollapse */ CountryItemModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CountryItemModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ CountryItemModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CountryItemModule, declarations: [CountryItemComponent, CountryItemCustomizableDirective], imports: [i3.CommonModule], exports: [CountryItemComponent, CountryItemCustomizableDirective] });
    /** @nocollapse */ CountryItemModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CountryItemModule, imports: [[i3.CommonModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CountryItemModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [CountryItemComponent, CountryItemCustomizableDirective],
                        exports: [CountryItemComponent, CountryItemCustomizableDirective],
                        imports: [i3.CommonModule],
                    }]
            }] });

    /**
     * This is an extension slot to be used for customizing contact full address data
     *
     * @usageNotes
     *
     * ### Display contact address data
     *
     * ```html
     *  <ng-template bbContactFullAddressCustomizable let-hostRef>
     *   <span class="break-word" data-role="contact-details-full-address">
     *     {{ hostRef.format()
     *     }}<ng-container *ngIf="hostRef.address.country">
     *       <ng-container>, </ng-container>
     *       <bb-country-item [code]="hostRef.address.country"></bb-country-item>
     *     </ng-container>
     *   </span>
     * </ng-template>
     * ```
     * @ngModule ContactFullAddressModule
     */
    var ContactFullAddressCustomizableDirective = /** @class */ (function (_super) {
        __extends(ContactFullAddressCustomizableDirective, _super);
        function ContactFullAddressCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ContactFullAddressCustomizableDirective;
    }(core.BbTemplate));
    /** @nocollapse */ ContactFullAddressCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactFullAddressCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ ContactFullAddressCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ContactFullAddressCustomizableDirective, selector: "[bbContactFullAddressCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactFullAddressCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbContactFullAddressCustomizable]',
                    }]
            }] });

    /**
     * The component is for showing contact full address.
     *
     * The following extension slots are available in this component:
     *  - `ContactFullAddressCustomizableDirective`
     *
     * @see ContactFullAddressCustomizableDirective
     * @usageNotes
     *
     * ### Display contact address data
     *
     * ```html
     *     <bb-contact-full-address [address]="hostRef.address"></bb-contact-full-address>
     * ```
     * @ngModule ContactFullAddressModule
     */
    var ContactFullAddressComponent = /** @class */ (function () {
        function ContactFullAddressComponent() {
            this.hostRef = this;
            this.textContent = '';
        }
        Object.defineProperty(ContactFullAddressComponent.prototype, "address", {
            /**
             * @param {Address} address containing all the address fields
             */
            set: function (address) {
                this.countryCode = address.country;
                this.textContent = "" + addressToString(address) + (!!this.countryCode ? ',' : '');
            },
            enumerable: false,
            configurable: true
        });
        return ContactFullAddressComponent;
    }());
    /** @nocollapse */ ContactFullAddressComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactFullAddressComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ ContactFullAddressComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ContactFullAddressComponent, selector: "bb-contact-full-address", inputs: { address: "address" }, ngImport: i0__namespace, template: "\n    <ng-container bbContactFullAddressCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n    <ng-template bbContactFullAddressCustomizable let-hostRef>\n      <span class=\"break-word\" data-role=\"contact-details-full-address\">\n        {{ hostRef.textContent }}\n        <ng-container *ngIf=\"hostRef.countryCode\">\n          <bb-country-item [code]=\"hostRef.countryCode\"></bb-country-item>\n        </ng-container>\n      </span>\n    </ng-template>\n  ", isInline: true, components: [{ type: CountryItemComponent, selector: "bb-country-item", inputs: ["code"] }], directives: [{ type: ContactFullAddressCustomizableDirective, selector: "[bbContactFullAddressCustomizable]" }, { type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactFullAddressComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-contact-full-address',
                        template: "\n    <ng-container bbContactFullAddressCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n    <ng-template bbContactFullAddressCustomizable let-hostRef>\n      <span class=\"break-word\" data-role=\"contact-details-full-address\">\n        {{ hostRef.textContent }}\n        <ng-container *ngIf=\"hostRef.countryCode\">\n          <bb-country-item [code]=\"hostRef.countryCode\"></bb-country-item>\n        </ng-container>\n      </span>\n    </ng-template>\n  ",
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], propDecorators: { address: [{
                    type: i0.Input
                }] } });

    /**
     * Exports:
     * - ContactFullAddressComponent
     * - ContactFullAddressCustomizableDirective
     */
    var ContactFullAddressModule = /** @class */ (function () {
        function ContactFullAddressModule() {
        }
        return ContactFullAddressModule;
    }());
    /** @nocollapse */ ContactFullAddressModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactFullAddressModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ ContactFullAddressModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactFullAddressModule, declarations: [ContactFullAddressComponent, ContactFullAddressCustomizableDirective], imports: [i3.CommonModule, CountryItemModule], exports: [ContactFullAddressComponent, ContactFullAddressCustomizableDirective] });
    /** @nocollapse */ ContactFullAddressModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactFullAddressModule, imports: [[i3.CommonModule, CountryItemModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactFullAddressModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [ContactFullAddressComponent, ContactFullAddressCustomizableDirective],
                        exports: [ContactFullAddressComponent, ContactFullAddressCustomizableDirective],
                        imports: [i3.CommonModule, CountryItemModule],
                    }]
            }] });

    /**
     * This is an extension slot to be used for customizing account data in card view
     *
     * @usageNotes
     * ### Display contact account data in card form
     *
     * ```html
     *  <ng-template bbAccountCardViewCustomizable let-hostRef>
     *   <div class="bb-stack">
     *     <bb-icon-ui class="bb-stack__item bb-stack__item--align-top bb-select-context__back" name="accounts"></bb-icon-ui>
     *     <div class="bb-stack__item bb-stack__item--fill">
     *       <div class="bb-stack bb-block--md">
     *         <div class="bb-stack__item bb-stack__item--fill">
     *           <bb-header-ui
     *             headingType="h3"
     *             [heading]="hostRef.account.name"
     *             headingClasses="bb-stack__item bb-stack__item--fill break-word"
     *             data-role="contact-details-account-name"
     *           >
     *           </bb-header-ui>
     *           <div class="bb-text-support">{{hostRef.account.alias}}</div>
     *         </div>
     *         <ng-container *ngIf="hostRef.isEditMode">
     *           <button
     *             bbButton
     *             data-role="edit-account-button"
     *             [circle]="true"
     *             size="sm"
     *             color="link"
     *             (click)="hostRef.onEditAccount()"
     *             bbTooltip="Edit account"
     *             triggers="hover focus"
     *             i18n-bbTooltip="@@contact-address-data.contactaddress.card.btn.edit.label">
     *             <bb-icon-ui class="text-dark" name="edit"></bb-icon-ui>
     *           </button>
     *           <button
     *             bbButton
     *             [circle]="true"
     *             size="sm"
     *             color="link"
     *             (click)="hostRef.onDeleteAccount()"
     *             bbTooltip="Delete account"
     *             triggers="hover focus"
     *             i18n-bbTooltip="@@contact-address-data.contactaddress.card.btn.delete.label"
     *             data-role="account-contact-delete">
     *             <bb-icon-ui class="text-dark" name="delete"></bb-icon-ui>
     *           </button>
     *         </ng-container>
     *       </div>
     *       <div>
     *         <div class="bb-block bb-block--md">
     *           <div
     *            *ngIf="hostRef.account.IBAN"
     *             class="bb-inline-stack bb-block--xs bb-block--full-width text-dark"
     *           >
     *             <span
     *               class="bb-inline-stack__item bb-text-bold"
     *               i18n="@@bb-account-card-view.iban.label"
     *              >
     *               IBAN:
     *             </span>
     *             <span
     *               class="bb-inline-stack__item break-word"
     *               data-role="contact-details-account-number"
     *             >
     *               {{hostRef.account.IBAN | bbIban}}
     *           </span>
     *           </div>
     *           <div
     *            *ngIf="hostRef.account.accountNumber"
     *             class="bb-stack bb-block--xs bb-block--full-width text-dark"
     *           >
     *             <span
     *               class="bb-inline-stack__item bb-text-bold"
     *               i18n="@@bb-account-card-view.bban.label"
     *             >
     *               BBAN:
     *             </span>
     *             <span
     *               class="bb-inline-stack__item break-word"
     *               data-role="contact-details-account-number"
     *             >
     *               {{hostRef.account.accountNumber}}
     *             </span>
     *           </div>
     *           <div *ngIf="hostRef.account.accountType" class="bb-inline-stack bb-block--xs bb-block--full-width text-dark">
     *             <span class="bb-inline-stack__item bb-text-bold" i18n="@@bb-account-card-view.account-type.label">
     *               Account type:
     *             </span>
     *             <span class="break-word bb-inline-stack__item">
     *               {{hostRef.account.accountType}}
     *             </span>
     *           </div>
     *           <div
     *            *ngIf="hostRef.account.bankName"
     *             class="bb-inline-stack bb-block--xs bb-block--full-width text-dark"
     *           >
     *             <span
     *               class="bb-inline-stack__item bb-text-bold"
     *               i18n="@@bb-account-card-view.bank-name.label"
     *             >
     *               Bank:
     *             </span>
     *             <span
     *               data-role="contact-details-bank-name"
     *               class="break-word"
     *             >
     *               {{hostRef.account.bankName}}
     *             </span>
     *           </div>
     *           <div
     *            *ngIf="hostRef.account.bankCode"
     *             class="bb-inline-stack bb-block--xs bb-block--full-width text-dark"
     *           >
     *             <span
     *               class="bb-inline-stack__item bb-text-bold"
     *               i18n="@@bb-account-card-view.bank-code.label"
     *             >
     *               Bank branch code:
     *             </span>
     *             <span
     *               data-role="contact-details-bank-code"
     *               class="break-word"
     *             >
     *               {{hostRef.account.bankCode}}
     *             </span>
     *           </div>
     *           <div
     *            *ngIf="hostRef.account.BIC"
     *             class="bb-inline-stack bb-block--xs bb-block--full-width text-dark"
     *           >
     *             <span
     *               class="bb-inline-stack__item bb-text-bold"
     *               i18n="@@bb-account-card-view.bic.label"
     *             >
     *               BIC:
     *             </span>
     *             <span class="break-word">
     *               {{hostRef.account.BIC}}
     *             </span>
     *           </div>
     *         </div>
     *         <div class="bb-block bb-block--xs" *ngIf="hostRef.isValidAddress(hostRef.bankAddress)">
     *           <div class="bb-text-bold" i18n="@@bb-account-card-view.bank.address.label">
     *             Bank branch address
     *           </div>
     *           <div
     *             class="break-word"
     *             data-role="contact-details-account-bank-address"
     *           >
     *             <bb-contact-full-address [address]="hostRef.bankAddress"></bb-contact-full-address>
     *           </div>
     *         </div>
     *         <div class="bb-block bb-block--xs" *ngIf="hostRef.isValidAddress(hostRef.accountHolderAddress)">
     *           <div class="bb-text-bold" i18n="@@bb-account-card-view.accountHolder.address.label">
     *             Account holder's address
     *           </div>
     *           <div
     *             class="break-word"
     *             data-role="contact-details-account-holder-address"
     *           >
     *             <bb-contact-full-address [address]="hostRef.accountHolderAddress"></bb-contact-full-address>
     *           </div>
     *         </div>
     *       </div>
     *     </div>
     *   </div>
     * </ng-template>
     * ```
     * @ngModule AccountCardViewModule
     */
    var AccountCardViewCustomizableDirective = /** @class */ (function (_super) {
        __extends(AccountCardViewCustomizableDirective, _super);
        function AccountCardViewCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return AccountCardViewCustomizableDirective;
    }(core.BbTemplate));
    /** @nocollapse */ AccountCardViewCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccountCardViewCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ AccountCardViewCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: AccountCardViewCustomizableDirective, selector: "[bbAccountCardViewCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccountCardViewCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbAccountCardViewCustomizable]',
                    }]
            }] });

    /**
     * The component is for showing contact account in a card view
     *
     * The following extension slots are available in this component:
     *  - `AccountCardViewCustomizableDirective`
     *
     * @see AccountCardViewCustomizableDirective
     * @usageNotes
     *
     * ### Display contact account data in card
     *
     * ```html
     *  <bb-account-card-view
     *   [index]="hostRef.index"
     *   [isEditMode]="true"
     *   [account]="hostRef.account"
     *   [bankAddress]="hostRef.bankAddress"
     *   [accountHolderAddress]="hostRef.accountHolderAddress"
     *   (deleteAccount)="hostRef.onDeleteAccount($event)"
     *   (editAccount)="hostRef.onEditAccount($event)">
     * </bb-account-card-view>
     * ```
     * @ngModule AccountCardViewModule
     */
    var AccountCardViewComponent = /** @class */ (function () {
        function AccountCardViewComponent() {
            this.hostRef = this;
            /**
             * Current index of the account Information
             */
            this.index = 0;
            /**
             * Flag that denotes if the account information can be edited. Defaults to `false`
             */
            this.isEditMode = false;
            /**
             * Event emitted when account is editted
             */
            this.editAccount = new i0.EventEmitter();
            /**
             * Event emitted when account is deleted
             */
            this.deleteAccount = new i0.EventEmitter();
        }
        /**
         * OnInit - set up initial values.
         */
        AccountCardViewComponent.prototype.ngOnInit = function () {
            this.bankAddress = this.bankAddress || addressFromBank(this.account);
            this.accountHolderAddress = this.accountHolderAddress || addressFromAccountHolder(this.account);
        };
        /**
         * Emits the edit Account event
         */
        AccountCardViewComponent.prototype.onEditAccount = function () {
            this.editAccount.emit(this.index);
        };
        /**
         * Emits the delete account event
         */
        AccountCardViewComponent.prototype.onDeleteAccount = function () {
            this.deleteAccount.emit(this.index);
        };
        /**
         * Verifies if the address is valid.
         *
         * @param {Address} address object
         * @returns {boolean} valid or not.
         */
        AccountCardViewComponent.prototype.isValidAddress = function (address) {
            return isObjectTruthy(address);
        };
        return AccountCardViewComponent;
    }());
    /** @nocollapse */ AccountCardViewComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccountCardViewComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ AccountCardViewComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AccountCardViewComponent, selector: "bb-account-card-view", inputs: { index: "index", account: "account", isEditMode: "isEditMode", bankAddress: "bankAddress", accountHolderAddress: "accountHolderAddress" }, outputs: { editAccount: "editAccount", deleteAccount: "deleteAccount" }, ngImport: i0__namespace, template: "<ng-container bbAccountCardViewCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n<ng-template bbAccountCardViewCustomizable let-hostRef>\n  <div class=\"bb-stack\">\n    <bb-icon-ui class=\"bb-stack__item bb-stack__item--align-top mt-1\" name=\"accounts\"></bb-icon-ui>\n    <div class=\"bb-stack__item bb-stack__item--fill\">\n      <div class=\"bb-stack bb-block--md\">\n        <div class=\"bb-stack__item bb-stack__item--fill\">\n          <bb-header-ui\n            headingType=\"h3\"\n            [heading]=\"hostRef.account.name\"\n            headingClasses=\"bb-stack__item bb-stack__item--fill break-word\"\n            data-role=\"contact-details-account-name\"\n          >\n          </bb-header-ui>\n          <div class=\"bb-text-support\">{{hostRef.account.alias}}</div>\n        </div>\n        <ng-container *ngIf=\"hostRef.isEditMode\">\n          <button\n            bbButton\n            data-role=\"edit-account-button\"\n            [circle]=\"true\"\n            size=\"sm\"\n            color=\"link\"\n            (click)=\"hostRef.onEditAccount()\"\n            bbTooltip=\"Edit account\"\n            triggers=\"hover focus\"\n            i18n-bbTooltip=\"@@contact-address-data.contactaddress.card.btn.edit.label\"\n          >\n            <bb-icon-ui class=\"text-dark\" name=\"edit\"></bb-icon-ui>\n          </button>\n          <button\n            bbButton\n            [circle]=\"true\"\n            size=\"sm\"\n            color=\"link\"\n            (click)=\"hostRef.onDeleteAccount()\"\n            bbTooltip=\"Delete account\"\n            triggers=\"hover focus\"\n            i18n-bbTooltip=\"@@contact-address-data.contactaddress.card.btn.delete.label\"\n            data-role=\"account-contact-delete\"\n          >\n            <bb-icon-ui class=\"text-dark\" name=\"delete\"></bb-icon-ui>\n          </button>\n        </ng-container>\n      </div>\n      <dl>\n        <div class=\"bb-block bb-block--md\">\n          <div *ngIf=\"hostRef.account.IBAN\" class=\"bb-inline-stack bb-block--xs bb-block--full-width text-dark\">\n            <dt class=\"bb-inline-stack__item bb-text-bold\" i18n=\"@@bb-account-card-view.iban.label\">IBAN:</dt>\n            <dd class=\"bb-inline-stack__item break-word bb-block--no-margin\" data-role=\"contact-details-account-number\">\n              {{hostRef.account.IBAN | bbIban}}\n            </dd>\n          </div>\n          <div *ngIf=\"hostRef.account.accountNumber\" class=\"bb-stack bb-block--xs bb-block--full-width text-dark\">\n            <dt class=\"bb-inline-stack__item bb-text-bold\" i18n=\"@@bb-account-card-view.bban.label\">BBAN:</dt>\n            <dd class=\"bb-inline-stack__item break-word bb-block--no-margin\" data-role=\"contact-details-account-number\">\n              {{hostRef.account.accountNumber}}\n            </dd>\n          </div>\n          <div *ngIf=\"hostRef.account.accountType\" class=\"bb-inline-stack bb-block--xs bb-block--full-width text-dark\">\n            <dt class=\"bb-inline-stack__item bb-text-bold\" i18n=\"@@bb-account-card-view.account-type.label\">\n              Account type:\n            </dt>\n            <dd class=\"break-word bb-inline-stack__item bb-block--no-margin\">{{hostRef.account.accountType}}</dd>\n          </div>\n          <div *ngIf=\"hostRef.account.bankName\" class=\"bb-inline-stack bb-block--xs bb-block--full-width text-dark\">\n            <dt class=\"bb-inline-stack__item bb-text-bold\" i18n=\"@@bb-account-card-view.bank-name.label\">Bank:</dt>\n            <dd data-role=\"contact-details-bank-name\" class=\"bb-inline-stack__item break-word bb-block--no-margin\">\n              {{hostRef.account.bankName}}\n            </dd>\n          </div>\n          <div *ngIf=\"hostRef.account.bankCode\" class=\"bb-inline-stack bb-block--xs bb-block--full-width text-dark\">\n            <dt class=\"bb-inline-stack__item bb-text-bold\" i18n=\"@@bb-account-card-view.bank-code.label\">\n              Bank branch code:\n            </dt>\n            <dd data-role=\"contact-details-bank-code\" class=\"bb-inline-stack__item break-word bb-block--no-margin\">\n              {{hostRef.account.bankCode}}\n            </dd>\n          </div>\n          <div *ngIf=\"hostRef.account.BIC\" class=\"bb-inline-stack bb-block--xs bb-block--full-width text-dark\">\n            <dt class=\"bb-inline-stack__item bb-text-bold\" i18n=\"@@bb-account-card-view.bic.label\">BIC:</dt>\n            <dd class=\"bb-inline-stack__item break-word bb-block--no-margin\">{{hostRef.account.BIC}}</dd>\n          </div>\n        </div>\n        <div class=\"bb-block bb-block--xs\" *ngIf=\"hostRef.isValidAddress(hostRef.bankAddress)\">\n          <dt class=\"bb-text-bold\" i18n=\"@@bb-account-card-view.bank.address.label\">Bank branch address</dt>\n          <dd class=\"break-word\" data-role=\"contact-details-account-bank-address\">\n            <bb-contact-full-address [address]=\"hostRef.bankAddress\"></bb-contact-full-address>\n          </dd>\n        </div>\n        <div class=\"bb-block bb-block--xs\" *ngIf=\"hostRef.isValidAddress(hostRef.accountHolderAddress)\">\n          <dt class=\"bb-text-bold\" i18n=\"@@bb-account-card-view.accountHolder.address.label\">\n            Account holder's address\n          </dt>\n          <dd class=\"break-word\" data-role=\"contact-details-account-holder-address\">\n            <bb-contact-full-address [address]=\"hostRef.accountHolderAddress\"></bb-contact-full-address>\n          </dd>\n        </div>\n      </dl>\n    </div>\n  </div>\n</ng-template>\n", components: [{ type: i2__namespace$1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i2__namespace$2.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: ContactFullAddressComponent, selector: "bb-contact-full-address", inputs: ["address"] }], directives: [{ type: AccountCardViewCustomizableDirective, selector: "[bbAccountCardViewCustomizable]" }, { type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i7__namespace.TooltipDirective, selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }], pipes: { "bbIban": i8__namespace.BbIbanPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccountCardViewComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-account-card-view',
                        templateUrl: './account-card-view.component.html',
                    }]
            }], propDecorators: { index: [{
                    type: i0.Input
                }], account: [{
                    type: i0.Input
                }], isEditMode: [{
                    type: i0.Input
                }], editAccount: [{
                    type: i0.Output
                }], deleteAccount: [{
                    type: i0.Output
                }], bankAddress: [{
                    type: i0.Input
                }], accountHolderAddress: [{
                    type: i0.Input
                }] } });

    /**
     * Exports:
     * - AccountCardViewComponent
     * - AccountCardViewCustomizableDirective
     */
    var AccountCardViewModule = /** @class */ (function () {
        function AccountCardViewModule() {
        }
        return AccountCardViewModule;
    }());
    /** @nocollapse */ AccountCardViewModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccountCardViewModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ AccountCardViewModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccountCardViewModule, declarations: [AccountCardViewComponent, AccountCardViewCustomizableDirective], imports: [i2$1.IconModule,
            i2$2.HeaderModule,
            i5.ButtonModule,
            i8.BbIbanPipeModule,
            ContactFullAddressModule,
            i3.CommonModule,
            i7.TooltipModule], exports: [AccountCardViewComponent, AccountCardViewCustomizableDirective] });
    /** @nocollapse */ AccountCardViewModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccountCardViewModule, imports: [[
                i2$1.IconModule,
                i2$2.HeaderModule,
                i5.ButtonModule,
                i8.BbIbanPipeModule,
                ContactFullAddressModule,
                i3.CommonModule,
                i7.TooltipModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccountCardViewModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [AccountCardViewComponent, AccountCardViewCustomizableDirective],
                        exports: [AccountCardViewComponent, AccountCardViewCustomizableDirective],
                        imports: [
                            i2$1.IconModule,
                            i2$2.HeaderModule,
                            i5.ButtonModule,
                            i8.BbIbanPipeModule,
                            ContactFullAddressModule,
                            i3.CommonModule,
                            i7.TooltipModule,
                        ],
                    }]
            }] });

    var CamelCasePipe = /** @class */ (function () {
        function CamelCasePipe() {
        }
        CamelCasePipe.prototype.transform = function (value) {
            if (typeof value === 'string')
                return toCamelCase(value);
            return value;
        };
        return CamelCasePipe;
    }());
    /** @nocollapse */ CamelCasePipe.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CamelCasePipe, deps: [], target: i0__namespace.ɵɵFactoryTarget.Pipe });
    /** @nocollapse */ CamelCasePipe.ɵpipe = i0__namespace.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CamelCasePipe, name: "camelcase" });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CamelCasePipe, decorators: [{
                type: i0.Pipe,
                args: [{
                        name: 'camelcase',
                    }]
            }] });

    /**
     * The component is for showing contact  address data.
     *
     *
     * @usageNotes
     *
     * ### Display contact address data
     *
     * ```html
     *    <bb-contact-address-data
     *   [highlight]="hostRef.highlight"
     *   [isAddAddress]="hostRef.isAddAccountHolderAddress"
     *   [addressType]="'accountHolder'"
     *   [canCopyAddress]="hostRef.canCopyAddress"
     *   [isContactAddressCopied]="hostRef.isContactAddressCopied"
     *   [viewType]="hostRef.accountHolderAddressViewType"
     *   [address]="hostRef.accountHolderAddress"
     *   (add)="hostRef.onAccountHolderAddressAdd($event)"
     *   (edit)="hostRef.onAccountHolderAddressEdit()"
     *   (discard)="hostRef.onAccountHolderAddressDiscard($event)"
     *   (delete)="hostRef.onAccountHolderAddressDelete($event)"
     *   (submit)="hostRef.onAddressSubmit($event, hostRef.addressType.ACCOUNTHOLDER)"
     *   (contactAddressCopy)="hostRef.onAddressCopy($event)"
     *   (addressEditAfterCopy)="hostRef.onAddressEditAfterCopy()">
     * </bb-contact-address-data>
     * ```
     * @ngModule ContactAddressDataModule
     */
    var ContactAddressDataComponent = /** @class */ (function () {
        function ContactAddressDataComponent(contactCountryListService) {
            this.contactCountryListService = contactCountryListService;
            this.hostRef = this;
            this.copyContactAddressInputName = exports.InputName.COPY_CONTACT_ADDRESS;
            /**
             * Instance that holds the address details
             */
            this.address = {};
            /**
             * Type of addresses. Possible values `CONTACT`, `BANK`, `ACCOUNTHOLDER`. Defaults to `CONTACT`
             */
            this.addressType = exports.AddressType.CONTACT;
            /**
             * Flag that denotes if address can be copied. Default value is `false`
             */
            this.canCopyAddress = false;
            /**
             * Flag that denoted if contact address is copied
             */
            this.isContactAddressCopied = false;
            /**
             * If enabled it will apply highlight classes to this component.
             * By default is `true`.
             */
            this.highlight = true;
            /**
             * Event emitted when address is submitted
             */
            this.submit = new i0.EventEmitter();
            /**
             * Event emitted when address is discarded
             */
            this.discard = new i0.EventEmitter();
            /**
             * Event emitted when address is deleted
             */
            this.delete = new i0.EventEmitter();
            /**
             * Event emitted when address is editted
             */
            this.edit = new i0.EventEmitter();
            /**
             * Event emitted when contact address has to be copied
             */
            this.contactAddressCopy = new i0.EventEmitter();
            /**
             * Event emitted when add address action is triggered
             */
            this.add = new i0.EventEmitter();
            /**
             * Event emitted when address is edited after it has been copied from contact address
             */
            this.addressEditAfterCopy = new i0.EventEmitter();
            this.needsToRefocus = false;
            this.countriesList$ = rxjs.of([]);
        }
        ContactAddressDataComponent.prototype.ngOnInit = function () {
            if (!this.viewType) {
                this.viewType = exports.ViewType.FORM;
            }
            this.fieldGroupName = this.getFieldGroupName();
            this.address.country = this.address.country || '';
            if (this.addressType === exports.AddressType.BANK) {
                this.countriesList$ = this.contactCountryListService.getFromExternalSource().pipe(operators.shareReplay());
            }
            else {
                this.countriesList$ = this.contactCountryListService.getFromLocalSource();
            }
        };
        ContactAddressDataComponent.prototype.ngAfterViewChecked = function () {
            var _a, _b;
            if (this.needsToRefocus) {
                (_b = (_a = this.firstTabElement) === null || _a === void 0 ? void 0 : _a.inputEl) === null || _b === void 0 ? void 0 : _b.nativeElement.focus();
                this.needsToRefocus = false;
            }
        };
        /**
         *
         * @returns {string} Name of the addressType.
         */
        ContactAddressDataComponent.prototype.getFieldGroupName = function () {
            return exports.InputGroupName.ADDRESS + "[" + this.addressType + "]";
        };
        /**
         * Emits the add address event
         *
         * @param {boolean} isAddAddress whether address should be added
         */
        ContactAddressDataComponent.prototype.addAddress = function (isAddAddress) {
            this.add.emit(isAddAddress);
            this.needsToRefocus = true;
        };
        /**
         * Emits the edit address event
         */
        ContactAddressDataComponent.prototype.editAddress = function () {
            this.edit.emit(this.address);
            this.needsToRefocus = true;
        };
        /**
         * Emits the discard address event
         */
        ContactAddressDataComponent.prototype.discardAddress = function () {
            this.discard.emit(this.fieldGroupName);
        };
        /**
         * Emits the delete address event
         */
        ContactAddressDataComponent.prototype.deleteAddress = function () {
            this.delete.emit(this.fieldGroupName);
        };
        /**
         *  Emits the submit address event if valid.
         */
        ContactAddressDataComponent.prototype.submitAddress = function () {
            if (isObjectTruthy(this.address)) {
                this.submit.emit(this.fieldGroupName);
            }
            else {
                this.deleteAddress();
            }
        };
        /**
         * Emits the copy address event
         */
        ContactAddressDataComponent.prototype.copyContactAddress = function () {
            this.contactAddressCopy.emit(this.isContactAddressCopied);
        };
        /**
         * Emits the addressEditAfterCopy event
         */
        ContactAddressDataComponent.prototype.onAddressEdit = function () {
            if (this.addressType === exports.AddressType.ACCOUNTHOLDER && this.canCopyAddress) {
                this.addressEditAfterCopy.emit();
            }
        };
        return ContactAddressDataComponent;
    }());
    /** @nocollapse */ ContactAddressDataComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactAddressDataComponent, deps: [{ token: ContactCountryListService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ ContactAddressDataComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ContactAddressDataComponent, selector: "bb-contact-address-data", inputs: { isAddAddress: "isAddAddress", address: "address", addressType: "addressType", canCopyAddress: "canCopyAddress", isContactAddressCopied: "isContactAddressCopied", viewType: "viewType", highlight: "highlight" }, outputs: { submit: "submit", discard: "discard", delete: "delete", edit: "edit", contactAddressCopy: "contactAddressCopy", add: "add", addressEditAfterCopy: "addressEditAfterCopy" }, viewQueries: [{ propertyName: "firstTabElement", first: true, predicate: ["addressLine1"], descendants: true }], ngImport: i0__namespace, template: "<div class=\"bb-block bb-block--md\" *ngIf=\"!hostRef.isAddAddress\">\n  <button\n    bbButton\n    color=\"link\"\n    (click)=\"hostRef.addAddress(true)\"\n    [attr.data-role]=\"'contact-add-address' + hostRef.addressType\"\n  >\n    <bb-icon-ui class=\"alert-icon\" name=\"control-point\"> </bb-icon-ui>\n    <ng-container i18n=\"@@contact-address-data.add.address.label\">\n      Add {hostRef.addressType, select, bank {bank} accountHolder {account holder's} other {contact}} address\n    </ng-container>\n  </button>\n</div>\n\n<div\n  class=\"bb-block bb-block--lg card card-section\"\n  *ngIf=\"hostRef.viewType === 'CARD'\"\n  [ngClass]=\"{ 'card-section--highlight': hostRef.highlight }\"\n  [attr.data-role]=\"'contact-card-address' + hostRef.addressType\"\n>\n  <div class=\"bb-stack bb-block bb-block--sm\">\n    <div class=\"bb-stack__item bb-text-bold\" i18n=\"@@contact-address-data.contactaddress.card.label\">\n      {hostRef.addressType, select, bank {Bank} accountHolder {Account holder's} other {Contact}} address\n    </div>\n    <div class=\"bb-stack__item bb-stack__item--push-right\">\n      <button\n        bbButton\n        [attr.data-role]=\"'contact-edit-address' + hostRef.addressType\"\n        [circle]=\"true\"\n        size=\"sm\"\n        color=\"link\"\n        (click)=\"hostRef.editAddress()\"\n        bbTooltip=\"Edit address\"\n        triggers=\"hover focus\"\n        i18n-bbTooltip=\"@@contact-address-data.contactaddress.card.buttons.edit.label\"\n      >\n        <bb-icon-ui color=\"dark\" name=\"edit\"></bb-icon-ui>\n      </button>\n      <button\n        bbButton\n        [attr.data-role]=\"'contact-delete-address' + hostRef.addressType\"\n        [circle]=\"true\"\n        size=\"sm\"\n        color=\"link\"\n        (click)=\"hostRef.deleteAddress()\"\n        bbTooltip=\"Delete address\"\n        triggers=\"hover focus\"\n        i18n-bbTooltip=\"@@contact-address-data.contactaddress.card.buttons.delete.label\"\n      >\n        <bb-icon-ui color=\"dark\" name=\"delete\"></bb-icon-ui>\n      </button>\n    </div>\n  </div>\n  <bb-contact-full-address [address]=\"hostRef.address\"></bb-contact-full-address>\n</div>\n\n<div\n  class=\"bb-stack bb-block bb-block--lg card card-section\"\n  *ngIf=\"hostRef.isAddAddress\"\n  [ngClass]=\"{\n    'd-none': hostRef.viewType === 'CARD',\n    'card-section--highlight': hostRef.highlight\n  }\"\n>\n  <fieldset [ngModelGroup]=\"hostRef.fieldGroupName\" (input)=\"hostRef.onAddressEdit()\">\n    <legend class=\"sr-only\" i18n=\"@@contact-address-data.addressGroup.title\">Address details</legend>\n    <div class=\"bb-block bb-block--sm\">\n      <div class=\"bb-stack bb-stack--align-top\">\n        <div class=\"bb-block bb-block--lg bb-stack__item bb-select-context__back\" data-role=\"create-contact-form\">\n          <span class=\"d-none\" aria-hidden=\"true\" i18n=\"@@contact-address-data.contactaddress.label\" #heading>\n            {hostRef.addressType, select, bank {Bank} accountHolder {Account holder's} other {Contact}} address\n          </span>\n          <bb-header-ui\n            id=\"headerTtitle\"\n            headingType=\"h4\"\n            [heading]=\"heading.textContent\"\n            data-role=\"contact-address-label\"\n          >\n          </bb-header-ui>\n        </div>\n      </div>\n      <bb-input-text-ui\n        #addressLine1\n        label=\"Primary address line, street name and number\"\n        i18n-label=\"@@contact-address-data.addressLine1.info-label\"\n        [(ngModel)]=\"hostRef.address.addressLine1\"\n        data-role=\"addressLine1\"\n        [name]=\"(hostRef.addressType + 'AddressLine1') | camelcase\"\n        [maxLength]=\"70\"\n      >\n      </bb-input-text-ui>\n    </div>\n    <div class=\"bb-block bb-block--md\">\n      <bb-input-text-ui\n        label=\"Additional address line 2\"\n        i18n-label=\"@@contact-address-data.contactaddress2.info-label\"\n        [(ngModel)]=\"hostRef.address.addressLine2\"\n        data-role=\"addressLine2\"\n        [name]=\"(hostRef.addressType + 'AddressLine2') | camelcase\"\n        [maxLength]=\"70\"\n      >\n      </bb-input-text-ui>\n    </div>\n    <div class=\"bb-block bb-block--md\">\n      <bb-input-text-ui\n        label=\"Additional address line 3\"\n        i18n-label=\"@@contact-address-data.streetName.info-label\"\n        [(ngModel)]=\"hostRef.address.streetName\"\n        data-role=\"addressLine3\"\n        [name]=\"(hostRef.addressType + 'StreetName') | camelcase\"\n        [maxLength]=\"70\"\n      >\n      </bb-input-text-ui>\n    </div>\n    <div class=\"row\">\n      <div class=\"bb-block bb-block--lg col-sm-5 col-xs-12\">\n        <bb-input-text-ui\n          label=\"Post code / ZIP\"\n          i18n-label=\"@@contact-address-data.contactPostCode.label\"\n          [(ngModel)]=\"hostRef.address.postCode\"\n          data-role=\"postCode\"\n          [name]=\"(hostRef.addressType + 'PostCode') | camelcase\"\n          [maxLength]=\"16\"\n        >\n        </bb-input-text-ui>\n      </div>\n      <div class=\"bb-block bb-block--lg col-sm-7 col-xs-12\">\n        <bb-input-text-ui\n          label=\"City or town\"\n          i18n-label=\"@@contact-address-data.town.label\"\n          [(ngModel)]=\"hostRef.address.town\"\n          data-role=\"town\"\n          [name]=\"(hostRef.addressType + 'Town') | camelcase\"\n          [maxLength]=\"35\"\n        >\n        </bb-input-text-ui>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"bb-block bb-block--lg col-sm-7 col-xs-12\">\n        <bb-input-text-ui\n          label=\"State or area\"\n          i18n-label=\"@@contact-address-data.countrySubDivision.label\"\n          [(ngModel)]=\"hostRef.address.countrySubDivision\"\n          data-role=\"stateOrArea\"\n          [name]=\"(hostRef.addressType + 'CountrySubDivision') | camelcase\"\n          [maxLength]=\"35\"\n        >\n        </bb-input-text-ui>\n      </div>\n      <div class=\"bb-block bb-block--lg col-sm-5 col-xs-12\">\n        <bb-dropdown-single-select-ui\n          label=\"Country\"\n          i18n-label=\"@@contact-address-data.contactCountry.label\"\n          (change)=\"hostRef.onAddressEdit()\"\n          [(ngModel)]=\"hostRef.address.country\"\n          data-role=\"contactCountry\"\n          [name]=\"(hostRef.addressType + 'Country') | camelcase\"\n          placeholder=\"Select country\"\n          i18n-placeholder=\"@@bb-create-contact.dropdown.country.placeholder\"\n        >\n          <ng-container *ngFor=\"let country of countriesList$ | async\">\n            <span class=\"d-none\" aria-hidden=\"true\" #countryItem>\n              <bb-country-item [code]=\"country\"></bb-country-item>\n            </span>\n            <bb-dropdown-single-select-option-ui [value]=\"country\" [label]=\"countryItem.textContent\">\n            </bb-dropdown-single-select-option-ui>\n          </ng-container>\n        </bb-dropdown-single-select-ui>\n      </div>\n    </div>\n\n    <div class=\"row bb-block bb-block--lg\" *ngIf=\"hostRef.canCopyAddress && hostRef.addressType === 'accountHolder'\">\n      <div class=\"col-12\">\n        <bb-input-checkbox-ui\n          label=\"Use contact address as account holder's address\"\n          i18n-label=\"@@contact-address-data.copy.contact.address.label\"\n          data-role=\"copy-contact-address-checkbox\"\n          [name]=\"copyContactAddressInputName\"\n          (change)=\"hostRef.copyContactAddress()\"\n          [(ngModel)]=\"hostRef.isContactAddressCopied\"\n        >\n        </bb-input-checkbox-ui>\n      </div>\n    </div>\n\n    <div class=\"bb-button-bar bb-button-bar--reverse\">\n      <button\n        bbButton\n        class=\"bb-button-bar__button\"\n        color=\"primary\"\n        (click)=\"hostRef.submitAddress()\"\n        data-role=\"contact-confirm-address\"\n      >\n        <ng-container i18n=\"@@contact-create.modal.btn.addAddress\"> Confirm address </ng-container>\n      </button>\n      <button\n        bbButton\n        class=\"bb-button-bar__button\"\n        color=\"secondary\"\n        (click)=\"hostRef.discardAddress()\"\n        data-role=\"contact-cancel-address\"\n      >\n        <ng-container i18n=\"@@contact-create.modal.btn.discard\"> Discard </ng-container>\n      </button>\n    </div>\n  </fieldset>\n</div>\n", components: [{ type: i2__namespace$1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: ContactFullAddressComponent, selector: "bb-contact-full-address", inputs: ["address"] }, { type: i2__namespace$2.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i2__namespace$3.InputTextComponent, selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i6__namespace.DropdownSingleSelectComponent, selector: "bb-dropdown-single-select-ui", inputs: ["placeholder", "defaultOptionAsPlaceholder", "options", "displayAttributePath", "iconName", "compareWithFn"] }, { type: CountryItemComponent, selector: "bb-country-item", inputs: ["code"] }, { type: i6__namespace.DropdownSingleSelectOptionComponent, selector: "bb-dropdown-single-select-option-ui", inputs: ["value", "label"] }, { type: i8__namespace$1.InputCheckboxComponent, selector: "bb-input-checkbox-ui", inputs: ["indeterminate"], outputs: ["indeterminateChange"] }], directives: [{ type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5__namespace.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i3__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i7__namespace.TooltipDirective, selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i1__namespace$1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1__namespace$1.NgModelGroup, selector: "[ngModelGroup]", inputs: ["ngModelGroup"], exportAs: ["ngModelGroup"] }, { type: i1__namespace$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i3__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "camelcase": CamelCasePipe, "async": i3__namespace.AsyncPipe }, viewProviders: [{ provide: i1$1.ControlContainer, useExisting: i1$1.NgModelGroup }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactAddressDataComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-contact-address-data',
                        templateUrl: './contact-address-data.component.html',
                        viewProviders: [{ provide: i1$1.ControlContainer, useExisting: i1$1.NgModelGroup }],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: ContactCountryListService }]; }, propDecorators: { isAddAddress: [{
                    type: i0.Input
                }], address: [{
                    type: i0.Input
                }], addressType: [{
                    type: i0.Input
                }], canCopyAddress: [{
                    type: i0.Input
                }], isContactAddressCopied: [{
                    type: i0.Input
                }], viewType: [{
                    type: i0.Input
                }], highlight: [{
                    type: i0.Input
                }], submit: [{
                    type: i0.Output
                }], discard: [{
                    type: i0.Output
                }], delete: [{
                    type: i0.Output
                }], edit: [{
                    type: i0.Output
                }], contactAddressCopy: [{
                    type: i0.Output
                }], add: [{
                    type: i0.Output
                }], addressEditAfterCopy: [{
                    type: i0.Output
                }], firstTabElement: [{
                    type: i0.ViewChild,
                    args: ['addressLine1']
                }] } });

    /**
     * The component is for showing contact  account data.
     *
     *
     * @usageNotes
     *
     * ### Display contact account data
     *
     * ```html
     *  <bb-contact-account-data
     *   [highlight]="false"
     *   [index]="index"
     *   [account]="account.data"
     *   [accountView]="account.viewType"
     *   [bankAddressViewType]="account.bankAddressViewType"
     *   [accountHolderAddressViewType]="account.accountHolderAddressViewType"
     *   [isAddBankAddress]="account.isAddBankAddress"
     *   [canCopyAddress]="hostRef.canCopyAddress()"
     *   [isContactAddressCopied]="account.isContactAddressCopied"
     *   [bankAddress]="account.bankAddress"
     *   [accountHolderAddress]="account.accountHolderAddress"
     *   [isAddAccountHolderAddress]="account.isAddAccountHolderAddress"
     *   [isAccountTypeRequired]="hostRef.isAccountTypeRequired"
     *   (bankAddressAdd)="hostRef.addBankAddress($event, index)"
     *   (accountHolderAddressAdd)="hostRef.addAccountHolderAddress($event, index)"
     *   (bankAddressViewChange)="hostRef.changeBankAddressView($event, index)"
     *   (accountHolderAddressViewChange)="hostRef.changeAccountHolderAddressView($event, index)"
     *   (editAccount)="hostRef.editAccount($event, formRef)"
     *   (deleteAccount)="hostRef.deleteAccount($event)"
     *   (contactAddressCopy)="hostRef.copyAddress($event, index)"
     *   (addressEditAfterCopy)="hostRef.onAddressEditAfterCopy(index)">
     * </bb-contact-account-data>
     * ```
     * @ngModule ContactAccountDataModule
     */
    var ContactAccountDataComponent = /** @class */ (function () {
        function ContactAccountDataComponent(ctrlContainer, accountTypeList) {
            this.ctrlContainer = ctrlContainer;
            this.accountTypeList = accountTypeList;
            this.hostRef = this;
            this.addressType = exports.AddressType;
            this.ibanMask = IbanMask;
            /**
             * Current index of the account Information
             */
            this.index = 0;
            /**
             * Current view type of the account. Possible values `FORM`| `CARD`. Defaults to `FORM`
             */
            this.accountView = exports.ViewType.FORM;
            /**
             * Event emitted when the account is edited, i.e, switch from `CARD` view to `FORM` View
             */
            this.editAccount = new i0.EventEmitter();
            /**
             * View type of the bank address
             */
            this.bankAddressViewType = exports.ViewType.FORM;
            /**
             * View type of the account holder address
             */
            this.accountHolderAddressViewType = exports.ViewType.FORM;
            /**
             * Flag that denotes if bank address should be added
             */
            this.isAddBankAddress = false;
            /**
             * Flag that denotes if address can be copied. Default value is `false`
             */
            this.canCopyAddress = false;
            /**
             * The bank address details
             */
            this.bankAddress = {};
            /**
             * The account holder address details
             */
            this.accountHolderAddress = {};
            /**
             * Flag that denotes if account holder address should be added
             */
            this.isAddAccountHolderAddress = false;
            /**
             * Flag that denotes if contact address is copied
             */
            this.isContactAddressCopied = false;
            /**
             * If enabled it will apply highlight classes to this component.
             * By default is `true`.
             */
            this.highlight = true;
            /**
             * If enabled the accountType is mandatory field.
             */
            this.isAccountTypeRequired = false;
            /**
             * Event emitted when add bank address flag changes
             */
            this.bankAddressAdd = new i0.EventEmitter();
            /**
             * Event emitted when add account holder address flag changes
             */
            this.accountHolderAddressAdd = new i0.EventEmitter();
            /**
             * Event emitted when bank address view is changed
             */
            this.bankAddressViewChange = new i0.EventEmitter();
            /**
             * Event emitted when accountHolder address view is changed
             */
            this.accountHolderAddressViewChange = new i0.EventEmitter();
            /**
             * Event emitted when contact address has to be copied
             */
            this.contactAddressCopy = new i0.EventEmitter();
            /**
             * Event emitted when the account is deleted
             */
            this.deleteAccount = new i0.EventEmitter();
            /**
             * Event emitted when address is edited after it has been copied from contact address
             */
            this.addressEditAfterCopy = new i0.EventEmitter();
        }
        ContactAccountDataComponent.prototype.ngOnInit = function () {
            this.accountInputGroupName = this.getName();
            if (Object.keys(this.bankAddress).length) {
                this.originalBankAddress = Object.assign({}, this.bankAddress);
            }
            if (Object.keys(this.accountHolderAddress).length) {
                this.originalAccountHolderAddress = Object.assign({}, this.accountHolderAddress);
            }
        };
        ContactAccountDataComponent.prototype.ngOnChanges = function (changes) {
            if (changes['index']) {
                this.accountInputGroupName = this.getName();
            }
        };
        /**
         *
         * @returns {string} Name of the current index of contact account.
         */
        ContactAccountDataComponent.prototype.getName = function () {
            return exports.InputGroupName.ACCOUNT + "[" + this.index + "]";
        };
        /**
         * Emits the delete event
         *
         * @param {?number} accountIndex - account Index
         */
        ContactAccountDataComponent.prototype.onDeleteAccount = function (accountIndex) {
            this.deleteAccount.emit(accountIndex || this.index);
        };
        /**
         * Emits the contactAddressCopy event
         *
         * @param {boolean} isCopy - if copy is allowed.
         */
        ContactAccountDataComponent.prototype.onAddressCopy = function (isCopy) {
            this.contactAddressCopy.emit(isCopy);
        };
        /**
         * Emits the edit account method
         *
         * @param {?number} accountIndex index of an account
         */
        ContactAccountDataComponent.prototype.onEditAccount = function (accountIndex) {
            this.editAccount.emit(accountIndex || this.index);
        };
        /**
         * Emits the bankaddress add event
         *
         * @param {boolean} isAddAddress whether new address should be added
         */
        ContactAccountDataComponent.prototype.onBankAddressAdd = function (isAddAddress) {
            this.bankAddressAdd.emit(isAddAddress);
        };
        /**
         * Emits Bank address edit event
         */
        ContactAccountDataComponent.prototype.onBankAddressEdit = function () {
            this.bankAddressViewChange.emit(exports.ViewType.FORM);
        };
        /**
         * Emits the bankaddress delete event with index
         *
         * @param {string} controlName name of a form control
         */
        ContactAccountDataComponent.prototype.onBankAddressDelete = function (controlName) {
            this.originalBankAddress = undefined;
            this.bankAddressAdd.emit(false);
            this.resetAddress(controlName);
            this.bankAddressViewChange.emit(exports.ViewType.FORM);
        };
        /**
         * Emits appropriate event based on validity.
         *
         * @param {string} controlName name of a form control
         * @param {AddressType} addressType enumerated value
         */
        ContactAccountDataComponent.prototype.onAddressSubmit = function (controlName, addressType) {
            var address = this.getFormControl(controlName);
            address.markAllAsTouched();
            address.updateValueAndValidity();
            if (address.valid) {
                if (addressType === this.addressType.BANK) {
                    this.originalBankAddress = Object.assign({}, addressFromBank(address.value));
                    this.bankAddressViewChange.emit(exports.ViewType.CARD);
                }
                else {
                    this.originalAccountHolderAddress = Object.assign({}, addressFromAccountHolder(address.value));
                    this.accountHolderAddressViewChange.emit(exports.ViewType.CARD);
                }
            }
        };
        /**
         * Emits appropriate view ehn discarded.
         *
         * @param {string} controlName name of a form control
         */
        ContactAccountDataComponent.prototype.onBankAddressDiscard = function (controlName) {
            if (this.originalBankAddress) {
                this.bankAddress = Object.assign({}, this.originalBankAddress);
                this.bankAddressViewChange.emit(exports.ViewType.CARD);
            }
            else {
                this.onBankAddressDelete(controlName);
            }
        };
        /**
         * Resets form control.
         *
         * @param {string} controlName name of a form control
         */
        ContactAccountDataComponent.prototype.resetAddress = function (controlName) {
            this.getFormControl(controlName).reset();
        };
        /**
         * Checks if the address is valid.
         *
         * @param {Address} address address object
         * @returns {boolean} whether address is valid
         */
        ContactAccountDataComponent.prototype.isValidAddress = function (address) {
            return isObjectTruthy(address);
        };
        /**
         * Returns the form control of given control name,
         *
         * @param {string} controlName name of a form control
         * @returns {AbstractControl} form control object
         */
        ContactAccountDataComponent.prototype.getFormControl = function (controlName) {
            var accountInputGroup = this.ctrlContainer.controls[this.accountInputGroupName];
            if (!accountInputGroup) {
                return new i1$1.FormControl();
            }
            return accountInputGroup.controls[controlName];
        };
        /**
         * Emits event when account holder address is added
         *
         * @param {boolean} isAddAddress whether address should be added
         */
        ContactAccountDataComponent.prototype.onAccountHolderAddressAdd = function (isAddAddress) {
            this.accountHolderAddressAdd.emit(isAddAddress);
        };
        /**
         * Emits event when account holder address is edited.
         */
        ContactAccountDataComponent.prototype.onAccountHolderAddressEdit = function () {
            this.accountHolderAddressViewChange.emit(exports.ViewType.FORM);
        };
        /**
         *Emits event when account holder address is deleted.
         *
         * @param {string} controlName name of a form control
         */
        ContactAccountDataComponent.prototype.onAccountHolderAddressDelete = function (controlName) {
            this.originalAccountHolderAddress = undefined;
            this.accountHolderAddressAdd.emit(false);
            this.resetAddress(controlName);
            this.accountHolderAddressViewChange.emit(exports.ViewType.FORM);
        };
        /**
         * Emits account
         *
         * @param {string} controlName name of a form control
         */
        ContactAccountDataComponent.prototype.onAccountHolderAddressDiscard = function (controlName) {
            if (this.originalAccountHolderAddress) {
                this.accountHolderAddress = Object.assign({}, this.originalAccountHolderAddress);
                this.accountHolderAddressViewChange.emit(exports.ViewType.CARD);
            }
            else {
                this.onAccountHolderAddressDelete(controlName);
            }
        };
        /**
         * Emits address after edit copy event
         */
        ContactAccountDataComponent.prototype.onAddressEditAfterCopy = function () {
            this.addressEditAfterCopy.emit();
        };
        return ContactAccountDataComponent;
    }());
    /** @nocollapse */ ContactAccountDataComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactAccountDataComponent, deps: [{ token: i1__namespace$1.ControlContainer }, { token: BB_CONTACT_BANK_ACCOUNT_TYPES_LIST }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ ContactAccountDataComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ContactAccountDataComponent, selector: "bb-contact-account-data", inputs: { index: "index", account: "account", accountView: "accountView", bankAddressViewType: "bankAddressViewType", accountHolderAddressViewType: "accountHolderAddressViewType", isAddBankAddress: "isAddBankAddress", canCopyAddress: "canCopyAddress", bankAddress: "bankAddress", accountHolderAddress: "accountHolderAddress", isAddAccountHolderAddress: "isAddAccountHolderAddress", isContactAddressCopied: "isContactAddressCopied", forceChangeDetection: "forceChangeDetection", highlight: "highlight", isAccountTypeRequired: "isAccountTypeRequired" }, outputs: { editAccount: "editAccount", bankAddressAdd: "bankAddressAdd", accountHolderAddressAdd: "accountHolderAddressAdd", bankAddressViewChange: "bankAddressViewChange", accountHolderAddressViewChange: "accountHolderAddressViewChange", contactAddressCopy: "contactAddressCopy", deleteAccount: "deleteAccount", addressEditAfterCopy: "addressEditAfterCopy" }, usesOnChanges: true, ngImport: i0__namespace, template: "<div [ngClass]=\"{'d-none': hostRef.accountView ==='CARD'}\">\n  <fieldset [ngModelGroup]=\"hostRef.accountInputGroupName\">\n    <legend class=\"sr-only\" i18n=\"@@contact-account-data.accountGroup.title\">Account details</legend>\n    <div class=\"row\">\n      <div class=\"bb-block bb-block--lg col-sm-6 col-xs-12\" data-role=\"contact-account-info-account-name1\">\n        <label\n          #accountNameLabel\n          id=\"bb-contact-account-data-accountName-label\"\n          i18n=\"@@contact-account-data.accountName.label\"\n        >\n          Account name\n        </label>\n        <span id=\"account-name-required-info\" class=\"bb-text-support\">\n          (<ng-container i18n=\"@@contact-account-data.accountName.text-support.required.label\">Required</ng-container>)\n        </span>\n        <bb-input-text-ui\n          name=\"name\"\n          #accountNameModel=\"ngModel\"\n          [(ngModel)]=\"hostRef.account.name\"\n          [maxLength]=\"140\"\n          [required]=\"true\"\n          [aria-labelledby]=\"accountNameLabel.id\"\n          aria-describedby=\"account-name-required-info\"\n          data-role=\"contact-account-info-account-name\"\n          bbNoWhiteSpace\n        >\n        </bb-input-text-ui>\n\n        <bb-input-validation-message-ui\n          role=\"alert\"\n          [showErrors]=\"accountNameModel.invalid && accountNameModel.touched\"\n        >\n          <ng-container>\n            <span i18n=\"@@contact-account-data.accountName.errorText\" data-role=\"missing-account-name\">\n              Account name is required\n            </span>\n          </ng-container>\n        </bb-input-validation-message-ui>\n      </div>\n      <div class=\"bb-block bb-block--lg col-sm-6 col-xs-12\">\n        <bb-input-text-ui\n          name=\"alias\"\n          label=\"Account alias\"\n          i18n-label=\"@@contact-account-data.accountAlias.label\"\n          [(ngModel)]=\"hostRef.account.alias\"\n          [maxLength]=\"34\"\n          data-role=\"account-alias\"\n        >\n        </bb-input-text-ui>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"bb-block bb-block--lg col-sm-6 col-xs-12\">\n        <label #ibanLabel id=\"bb-contact-account-data-iban-label\" i18n=\"@@contact-account-data.contactIBAN.label\">\n          IBAN\n        </label>\n        <span id=\"iban-required-info\" class=\"bb-text-support\">\n          (<ng-container i18n=\"@@contact-account-data.iban.text-support.required.label\"\n            >IBAN or BBAN is required</ng-container\n          >)\n        </span>\n        <bb-input-text-ui\n          name=\"IBAN\"\n          #ibanModel=\"ngModel\"\n          [(ngModel)]=\"hostRef.account.IBAN\"\n          [maxLength]=\"hostRef.ibanMask.length\"\n          [required]=\"!bbanModel.value\"\n          [aria-labelledby]=\"ibanLabel.id\"\n          aria-describedby=\"iban-required-info\"\n          [mask]=\"hostRef.ibanMask\"\n          [maskValidator]=\"false\"\n          data-role=\"contact-iban\"\n          bbIbanValidator\n        >\n        </bb-input-text-ui>\n        <bb-input-validation-message-ui\n          role=\"alert\"\n          [showErrors]=\"(ibanModel.invalid && ibanModel.touched || bbanModel.invalid && bbanModel.touched)\"\n        >\n          <ng-container *ngIf=\"ibanModel.errors && ibanModel?.errors.required\">\n            <span i18n=\"@@contact-account-data.iban.error.required\" data-role=\"missing-iban\">\n              IBAN or BBAN is required\n            </span>\n          </ng-container>\n          <ng-container *ngIf=\"ibanModel.errors && ibanModel?.errors.invalidIban\">\n            <span i18n=\"@@contact-account-data.accountName.error.iban\" data-role=\"invalid-iban\"> Invalid IBAN </span>\n          </ng-container>\n        </bb-input-validation-message-ui>\n      </div>\n      <div class=\"bb-block bb-block--lg col-sm-6 col-xs-12\">\n        <label #bbanLabel id=\"bb-contact-account-data-bban-label\" i18n=\"@@contact-account-data.contactBBAN.label\">\n          BBAN\n        </label>\n        <span id=\"bban-required-info\" class=\"bb-text-support\">\n          (<ng-container i18n=\"@@contact-account-data.bban.text-support.required.label\"\n            >IBAN or BBAN is required</ng-container\n          >)\n        </span>\n        <bb-input-text-ui\n          name=\"accountNumber\"\n          #bbanModel=\"ngModel\"\n          [(ngModel)]=\"hostRef.account.accountNumber\"\n          [maxLength]=\"34\"\n          [required]=\"!ibanModel.value\"\n          [aria-labelledby]=\"bbanLabel.id\"\n          aria-describedby=\"bban-required-info\"\n          data-role=\"contact-account-number\"\n        >\n        </bb-input-text-ui>\n        <bb-input-validation-message-ui\n          role=\"alert\"\n          [showErrors]=\"(ibanModel.invalid && ibanModel.touched || bbanModel.invalid && bbanModel.touched)\"\n        >\n          <ng-container *ngIf=\"bbanModel.errors && bbanModel?.errors.required\">\n            <span i18n=\"@@contact-account-data.iban.error.required\" data-role=\"missing-bban\">\n              IBAN or BBAN is required\n            </span>\n          </ng-container>\n        </bb-input-validation-message-ui>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"bb-block bb-block--lg col-sm-6 col-xs-12\">\n        <label\n          #accountTypeLabel\n          id=\"bb-contact-account-data-accountType-label\"\n          i18n=\"@@contact-account-data.accounType.label\"\n        >\n          Account type\n        </label>\n        <span id=\"account-type-required-info\" class=\"bb-text-support\" *ngIf=\"hostRef.isAccountTypeRequired\">\n          (<ng-container i18n=\"@@contact-account-data.accountType.text-support.required.label\">Required</ng-container>)\n        </span>\n        <bb-dropdown-single-select-ui\n          name=\"accountType\"\n          #accountTypeModel=\"ngModel\"\n          placeholder=\"Select\"\n          i18n-placeholder=\"@@bb-create-contact.dropdown.account.type.placeholder\"\n          [(ngModel)]=\"hostRef.account.accountType\"\n          [defaultOptionAsPlaceholder]=\"!hostRef.isAccountTypeRequired\"\n          [required]=\"hostRef.isAccountTypeRequired\"\n          [aria-labelledby]=\"accountTypeLabel.id\"\n          aria-describedby=\"account-type-required-info\"\n          data-role=\"bankAccountType\"\n        >\n          <ng-container *ngFor=\"let accountType of accountTypeList\">\n            <bb-dropdown-single-select-option-ui [value]=\"accountType\" [label]=\"accountType\">\n            </bb-dropdown-single-select-option-ui>\n          </ng-container>\n        </bb-dropdown-single-select-ui>\n\n        <bb-input-validation-message-ui\n          role=\"alert\"\n          [showErrors]=\"accountTypeModel.invalid && accountTypeModel.touched\"\n        >\n          <ng-container>\n            <span i18n=\"@@contact-account-data.accountType.errorText\" data-role=\"missing-account-type\">\n              Account type is required\n            </span>\n          </ng-container>\n        </bb-input-validation-message-ui>\n      </div>\n      <div class=\"bb-block bb-block--lg col-sm-6 col-xs-12\">\n        <bb-input-text-ui\n          name=\"bankCode\"\n          label=\"Bank branch code\"\n          i18n-label=\"@@contact-account-data.contactBankCode.label\"\n          [(ngModel)]=\"hostRef.account.bankCode\"\n          [maxLength]=\"20\"\n          data-role=\"bank-code\"\n        >\n        </bb-input-text-ui>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"bb-block bb-block--lg col-sm-6 col-xs-12\">\n        <bb-input-text-ui\n          name=\"bankName\"\n          label=\"Bank name\"\n          i18n-label=\"@@contact-account-data.contactBankName.label\"\n          [(ngModel)]=\"hostRef.account.bankName\"\n          [maxLength]=\"140\"\n          data-role=\"bank-name\"\n        >\n        </bb-input-text-ui>\n      </div>\n      <div class=\"bb-block bb-block--lg col-sm-6 col-xs-12\">\n        <bb-input-text-ui\n          name=\"BIC\"\n          #bicModel=\"ngModel\"\n          label=\"BIC\"\n          i18n-label=\"@@contact-account-data.contactBIC.label\"\n          [(ngModel)]=\"hostRef.account.BIC\"\n          (ngModelChange)=\"hostRef.account.BIC = $event && $event.toUpperCase()\"\n          pattern=\"^[A-Za-z]{6,6}[A-Za-z2-9][A-Na-nP-Zp-z0-9]([A-Za-z0-9]{3,3}){0,1}$\"\n          data-role=\"bic\"\n        >\n        </bb-input-text-ui>\n        <bb-input-validation-message-ui role=\"alert\" [showErrors]=\"bicModel.invalid && bicModel.touched\">\n          <ng-container *ngIf=\"bicModel.errors && bicModel?.errors.pattern\">\n            <span i18n=\"@@contact-account-data.accountName.error.bic\" data-role=\"invalid-bic\"> Invalid BIC </span>\n          </ng-container>\n        </bb-input-validation-message-ui>\n      </div>\n    </div>\n\n    <div data-role=\"bank-address-container\">\n      <bb-contact-address-data\n        [highlight]=\"hostRef.highlight\"\n        [isAddAddress]=\"hostRef.isAddBankAddress\"\n        [addressType]=\"'bank'\"\n        [viewType]=\"hostRef.bankAddressViewType\"\n        [address]=\"hostRef.bankAddress\"\n        (add)=\"hostRef.onBankAddressAdd($event)\"\n        (edit)=\"hostRef.onBankAddressEdit()\"\n        (discard)=\"hostRef.onBankAddressDiscard($event)\"\n        (delete)=\"hostRef.onBankAddressDelete($event)\"\n        (submit)=\"hostRef.onAddressSubmit($event, hostRef.addressType.BANK)\"\n      >\n      </bb-contact-address-data>\n    </div>\n    <div data-role=\"account-holder-address-container\">\n      <bb-contact-address-data\n        [highlight]=\"hostRef.highlight\"\n        [isAddAddress]=\"hostRef.isAddAccountHolderAddress\"\n        [addressType]=\"'accountHolder'\"\n        [canCopyAddress]=\"hostRef.canCopyAddress\"\n        [isContactAddressCopied]=\"hostRef.isContactAddressCopied\"\n        [viewType]=\"hostRef.accountHolderAddressViewType\"\n        [address]=\"hostRef.accountHolderAddress\"\n        (add)=\"hostRef.onAccountHolderAddressAdd($event)\"\n        (edit)=\"hostRef.onAccountHolderAddressEdit()\"\n        (discard)=\"hostRef.onAccountHolderAddressDiscard($event)\"\n        (delete)=\"hostRef.onAccountHolderAddressDelete($event)\"\n        (submit)=\"hostRef.onAddressSubmit($event, hostRef.addressType.ACCOUNTHOLDER)\"\n        (contactAddressCopy)=\"hostRef.onAddressCopy($event)\"\n        (addressEditAfterCopy)=\"hostRef.onAddressEditAfterCopy()\"\n      >\n      </bb-contact-address-data>\n    </div>\n  </fieldset>\n</div>\n\n<div\n  class=\"card card-section bb-block bb-block--lg\"\n  *ngIf=\"hostRef.accountView ==='CARD'\"\n  data-role=\"contact-account-card-address\"\n>\n  <bb-account-card-view\n    [index]=\"hostRef.index\"\n    [isEditMode]=\"true\"\n    [account]=\"hostRef.account\"\n    [bankAddress]=\"hostRef.bankAddress\"\n    [accountHolderAddress]=\"hostRef.accountHolderAddress\"\n    (deleteAccount)=\"hostRef.onDeleteAccount($event)\"\n    (editAccount)=\"hostRef.onEditAccount($event)\"\n  >\n  </bb-account-card-view>\n</div>\n", components: [{ type: i2__namespace$3.InputTextComponent, selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i3__namespace$1.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i6__namespace.DropdownSingleSelectComponent, selector: "bb-dropdown-single-select-ui", inputs: ["placeholder", "defaultOptionAsPlaceholder", "options", "displayAttributePath", "iconName", "compareWithFn"] }, { type: i6__namespace.DropdownSingleSelectOptionComponent, selector: "bb-dropdown-single-select-option-ui", inputs: ["value", "label"] }, { type: ContactAddressDataComponent, selector: "bb-contact-address-data", inputs: ["isAddAddress", "address", "addressType", "canCopyAddress", "isContactAddressCopied", "viewType", "highlight"], outputs: ["submit", "discard", "delete", "edit", "contactAddressCopy", "add", "addressEditAfterCopy"] }, { type: AccountCardViewComponent, selector: "bb-account-card-view", inputs: ["index", "account", "isEditMode", "bankAddress", "accountHolderAddress"], outputs: ["editAccount", "deleteAccount"] }], directives: [{ type: i3__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i1__namespace$1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1__namespace$1.NgModelGroup, selector: "[ngModelGroup]", inputs: ["ngModelGroup"], exportAs: ["ngModelGroup"] }, { type: NoWhiteSpaceValidatorDirective, selector: "[bbNoWhiteSpace]" }, { type: i1__namespace$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i1__namespace$1.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: IbanValidatorDirective, selector: "[bbIbanValidator]" }, { type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1__namespace$1.PatternValidator, selector: "[pattern][formControlName],[pattern][formControl],[pattern][ngModel]", inputs: ["pattern"] }], viewProviders: [{ provide: i1$1.ControlContainer, useExisting: i1$1.NgForm }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactAccountDataComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-contact-account-data',
                        templateUrl: './contact-account-data.component.html',
                        viewProviders: [{ provide: i1$1.ControlContainer, useExisting: i1$1.NgForm }],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace$1.ControlContainer }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [BB_CONTACT_BANK_ACCOUNT_TYPES_LIST]
                        }] }];
        }, propDecorators: { index: [{
                    type: i0.Input
                }], account: [{
                    type: i0.Input
                }], accountView: [{
                    type: i0.Input
                }], editAccount: [{
                    type: i0.Output
                }], bankAddressViewType: [{
                    type: i0.Input
                }], accountHolderAddressViewType: [{
                    type: i0.Input
                }], isAddBankAddress: [{
                    type: i0.Input
                }], canCopyAddress: [{
                    type: i0.Input
                }], bankAddress: [{
                    type: i0.Input
                }], accountHolderAddress: [{
                    type: i0.Input
                }], isAddAccountHolderAddress: [{
                    type: i0.Input
                }], isContactAddressCopied: [{
                    type: i0.Input
                }], forceChangeDetection: [{
                    type: i0.Input
                }], highlight: [{
                    type: i0.Input
                }], isAccountTypeRequired: [{
                    type: i0.Input
                }], bankAddressAdd: [{
                    type: i0.Output
                }], accountHolderAddressAdd: [{
                    type: i0.Output
                }], bankAddressViewChange: [{
                    type: i0.Output
                }], accountHolderAddressViewChange: [{
                    type: i0.Output
                }], contactAddressCopy: [{
                    type: i0.Output
                }], deleteAccount: [{
                    type: i0.Output
                }], addressEditAfterCopy: [{
                    type: i0.Output
                }] } });

    /**
     * This is an extension slot to be used for customizing contact account data
     *
     * @usageNotes
     *
     * ### Display contact account data
     *
     * ```html
     *  <ng-template bbContactAccountDataCustomizable let-hostRef>
     * {{hostRef.account.name}}</ng-template>
     * ```
     * @ngModule ContactAccountDataModule
     */
    var ContactAccountDataCustomizableDirective = /** @class */ (function (_super) {
        __extends(ContactAccountDataCustomizableDirective, _super);
        function ContactAccountDataCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ContactAccountDataCustomizableDirective;
    }(core.BbTemplate));
    /** @nocollapse */ ContactAccountDataCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactAccountDataCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ ContactAccountDataCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ContactAccountDataCustomizableDirective, selector: "[bbContactAccountDataCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactAccountDataCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbContactAccountDataCustomizable]',
                    }]
            }] });

    /**
     * This is an extension slot to be used for customizing contact address data
     *
     * @usageNotes
     *
     * ### Display contact address data
     *
     * ```html
     *  <ng-template bbContactAddressDataCustomizable let-hostRef>
     * {{hostRef.address.addressLine1}}</ng-template>
     * ```
     * @ngModule ContactAddressDataModule
     */
    var ContactAddressDataCustomizableDirective = /** @class */ (function (_super) {
        __extends(ContactAddressDataCustomizableDirective, _super);
        function ContactAddressDataCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ContactAddressDataCustomizableDirective;
    }(core.BbTemplate));
    /** @nocollapse */ ContactAddressDataCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactAddressDataCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ ContactAddressDataCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ContactAddressDataCustomizableDirective, selector: "[bbContactAddressDataCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactAddressDataCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbContactAddressDataCustomizable]',
                    }]
            }] });

    var CamelCaseModule = /** @class */ (function () {
        function CamelCaseModule() {
        }
        return CamelCaseModule;
    }());
    /** @nocollapse */ CamelCaseModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CamelCaseModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ CamelCaseModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CamelCaseModule, declarations: [CamelCasePipe], exports: [CamelCasePipe] });
    /** @nocollapse */ CamelCaseModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CamelCaseModule });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CamelCaseModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [CamelCasePipe],
                        exports: [CamelCasePipe],
                    }]
            }] });

    /**
     * Exports:
     * - ContactAddressDataComponent
     * - ContactAddressDataCustomizableDirective
     */
    var ContactAddressDataModule = /** @class */ (function () {
        function ContactAddressDataModule() {
        }
        return ContactAddressDataModule;
    }());
    /** @nocollapse */ ContactAddressDataModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactAddressDataModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ ContactAddressDataModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactAddressDataModule, declarations: [ContactAddressDataComponent, ContactAddressDataCustomizableDirective], imports: [i3.CommonModule,
            i1$1.FormsModule,
            i2$1.IconModule,
            i2$2.HeaderModule,
            i2$3.InputTextModule,
            i6.DropdownSingleSelectModule,
            CountryItemModule,
            i8$1.InputCheckboxModule,
            i5.ButtonModule,
            ContactFullAddressModule,
            i7.TooltipModule,
            CamelCaseModule], exports: [ContactAddressDataComponent, ContactAddressDataCustomizableDirective] });
    /** @nocollapse */ ContactAddressDataModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactAddressDataModule, imports: [[
                i3.CommonModule,
                i1$1.FormsModule,
                i2$1.IconModule,
                i2$2.HeaderModule,
                i2$3.InputTextModule,
                i6.DropdownSingleSelectModule,
                CountryItemModule,
                i8$1.InputCheckboxModule,
                i5.ButtonModule,
                ContactFullAddressModule,
                i7.TooltipModule,
                CamelCaseModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactAddressDataModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [ContactAddressDataComponent, ContactAddressDataCustomizableDirective],
                        exports: [ContactAddressDataComponent, ContactAddressDataCustomizableDirective],
                        imports: [
                            i3.CommonModule,
                            i1$1.FormsModule,
                            i2$1.IconModule,
                            i2$2.HeaderModule,
                            i2$3.InputTextModule,
                            i6.DropdownSingleSelectModule,
                            CountryItemModule,
                            i8$1.InputCheckboxModule,
                            i5.ButtonModule,
                            ContactFullAddressModule,
                            i7.TooltipModule,
                            CamelCaseModule,
                        ],
                    }]
            }] });

    /**
     * Exports:
     * - ContactAccountDataComponent
     * - ContactAccountDataCustomizableDirective
     */
    var ContactAccountDataModule = /** @class */ (function () {
        function ContactAccountDataModule() {
        }
        return ContactAccountDataModule;
    }());
    /** @nocollapse */ ContactAccountDataModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactAccountDataModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ ContactAccountDataModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactAccountDataModule, declarations: [ContactAccountDataComponent, ContactAccountDataCustomizableDirective], imports: [i3.CommonModule,
            i1$1.FormsModule,
            i2$3.InputTextModule,
            i3$1.InputValidationMessageModule,
            i6.DropdownSingleSelectModule,
            ContactAddressDataModule,
            AccountCardViewModule,
            NoWhiteSpaceModule,
            IbanValidatorModule], exports: [ContactAccountDataComponent, ContactAccountDataCustomizableDirective] });
    /** @nocollapse */ ContactAccountDataModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactAccountDataModule, imports: [[
                i3.CommonModule,
                i1$1.FormsModule,
                i2$3.InputTextModule,
                i3$1.InputValidationMessageModule,
                i6.DropdownSingleSelectModule,
                ContactAddressDataModule,
                AccountCardViewModule,
                NoWhiteSpaceModule,
                IbanValidatorModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactAccountDataModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [ContactAccountDataComponent, ContactAccountDataCustomizableDirective],
                        exports: [ContactAccountDataComponent, ContactAccountDataCustomizableDirective],
                        imports: [
                            i3.CommonModule,
                            i1$1.FormsModule,
                            i2$3.InputTextModule,
                            i3$1.InputValidationMessageModule,
                            i6.DropdownSingleSelectModule,
                            ContactAddressDataModule,
                            AccountCardViewModule,
                            NoWhiteSpaceModule,
                            IbanValidatorModule,
                        ],
                    }]
            }] });

    /**
     * This is an extension slot to be used for customizing contact details item
     *
     * @usageNotes
     *p
     * ### Display contact details view.
     *
     * ```html
     *  <ng-template bbContactItemDetailsCustomizable let-hostRef>
     *   <div class="bb-block">
     *     <div
     *       *ngIf="hostRef.showName"
     *       class="bb-stack bb-block bb-block--md col"
     *     >
     *       <span
     *         class="bb-stack__item"
     *         data-role="contact-details-info-name"
     *       >
     *         {{ hostRef.contactItem?.name }}
     *       </span>
     *       <ng-container *ngIf="hostRef.contactItem?.alias">
     *         <span
     *           class="bb-stack__item"
     *           aria-hidden="true"
     *         >
     *           •
     *         </span>
     *         <span
     *           class="bb-stack__item"
     *           data-role="contact-details-info-alias"
     *         >
     *           {{ hostRef.contactItem?.alias }}
     *         </span>
     *       </ng-container>
     *     </div>
     *     <div class="col bb-block bb-block--lg">
     *       <div class="row bb-stack">
     *         <div
     *           *ngIf="hostRef.contactItem?.phoneNumber"
     *           class="bb-stack__item col-6 bb-block bb-block--md"
     *         >
     *           <div
     *             class="bb-block bb-block--sm bb-label"
     *             i18n="@@contact-item-details.contact-information.phone"
     *           >
     *             Phone number
     *           </div>
     *           <div
     *             class="bb-block bb-block--sm"
     *             data-role="contact-details-info-phone"
     *           >
     *             {{hostRef.contactItem?.phoneNumber}}
     *           </div>
     *         </div>
     *         <div
     *           *ngIf="hostRef.contactItem?.emailId"
     *           class="bb-stack__item bb-stack__item--align-top col-6 bb-block bb-block--md "
     *         >
     *           <div
     *             class="bb-block bb-block--sm bb-label row"
     *             i18n="@@contact-item-details.contact-information.email"
     *           >
     *             Email address
     *           </div>
     *           <div
     *             class="row"
     *             data-role="contact-details-info-email"
     *           >
     *             {{hostRef.contactItem?.emailId}}
     *           </div>
     *         </div>
     *       </div>
     *       <div
     *         *ngIf="hostRef.contactItem?.contactPerson"
     *         class="bb-block bb-block--md col-12"
     *       >
     *         <div
     *           class="bb-block bb-block--sm bb-label row"
     *           i18n="@@contact-item-details.contact-information.contact-person"
     *         >
     *           Contact person
     *         </div>
     *         <div
     *           class="bb-block bb-block--sm row"
     *           data-role="contact-details-info-contact-person"
     *         >
     *           {{hostRef.contactItem?.contactPerson}}
     *         </div>
     *       </div>
     *       <div class="bb-block bb-block--md col-12">
     *         <div
     *           *ngIf="hostRef.contactItem?.streetName || hostRef.contactItem?.addressLine1 || hostRef.contactItem?.addressLine2"
     *           class="bb-block bb-block--sm bb-label row"
     *           i18n="@@contact-item-details.contact-information.address"
     *         >
     *           Contact address
     *         </div>
     *         <bb-contact-full-address
     *           [address]="hostRef.address"
     *           class="row"
     *         ></bb-contact-full-address>
     *       </div>
     *     </div>
     *   </div>
     *   <div class="bb-block bb-block--lg">
     *     <div class="bb-stack bb-block bb-block--lg">
     *       <bb-header-ui
     *         headingType="h3"
     *         heading="Account information"
     *         i18n-heading="@@contact-item-details.account-information.title"
     *         headingClasses="bb-stack__item bb-stack__item--fill"
     *       >
     *       </bb-header-ui>
     *       <span
     *         class="bb-stack__item bb-stack__item--align-top bb-stack__item--push-right bb-text-support"
     *         i18n="@@contact-item-details.account-information.number-of-accounts"
     *         data-role="contact-details-account-number-accounts"
     *       >
     *         {{hostRef.contactItem?.accounts?.length}}
     *         {hostRef.contactItem?.accounts?.length, plural, =1 {account} other {accounts}}
     *       </span>
     *     </div>
     *     <div
     *       *ngFor="let account of hostRef.contactItem?.accounts; let index = index; trackBy: hostRef.trackByIndex"
     *       class="card card-section bb-block bb-block--lg"
     *     >
     *       <bb-account-card-view
     *         [account]="account"
     *         [bankAddress]="hostRef.bankAddress(account)"
     *         [accountHolderAddress]="hostRef.accountHolderAddress(account)"
     *         [index]="index"
     *       ></bb-account-card-view>
     *     </div>
     *   </div>
     * </ng-template>
     * ```
     * @ngModule ContactItemDetailsModule
     */
    var ContactItemDetailsCustomizableDirective = /** @class */ (function (_super) {
        __extends(ContactItemDetailsCustomizableDirective, _super);
        function ContactItemDetailsCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ContactItemDetailsCustomizableDirective;
    }(core.BbTemplate));
    /** @nocollapse */ ContactItemDetailsCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactItemDetailsCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ ContactItemDetailsCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ContactItemDetailsCustomizableDirective, selector: "[bbContactItemDetailsCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactItemDetailsCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbContactItemDetailsCustomizable]',
                    }]
            }] });

    /**
     * The component is for showing contact detail item.
     *
     * The following extension slots are available in this component:
     *  - `ContactItemDetailsCustomizableDirective`
     *
     * @see ContactItemDetailsCustomizableDirective
     * @usageNotes
     *
     * ### Display contact personal data
     *
     * ```html
     *    <bb-contact-item-details
     *            *ngIf="hostRef.contactItem"
     *             [contactItem]="hostRef.contactItem.data">
     *           </bb-contact-item-details>
     * ```
     * @ngModule ContactItemDetailsModule
     */
    var ContactItemDetailsComponent = /** @class */ (function () {
        function ContactItemDetailsComponent() {
            this.hostRef = this;
            /**
             * Flag that denotes if the conctact name should be displayed. Defaults to `true`
             *
             */
            this.showName = true;
            /**
             *  Flag that denotes if the section headings name should be displayed. Defaults to `false`
             */
            this.showHeaders = false;
        }
        Object.defineProperty(ContactItemDetailsComponent.prototype, "address", {
            get: function () {
                return addressFromContact(this.contactItem);
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Returns the address in correct format
         *
         * @param {AccountInformation} account current account details
         * @returns {Address} Returns the address in correct format
         */
        ContactItemDetailsComponent.prototype.bankAddress = function (account) {
            return addressFromBank(account);
        };
        /**
         * Returns the address in correct format
         *
         * @param {AccountInformation} account current account details
         * @returns {Address} Returns the address in correct format
         */
        ContactItemDetailsComponent.prototype.accountHolderAddress = function (account) {
            return addressFromAccountHolder(account);
        };
        ContactItemDetailsComponent.prototype.trackByIndex = function (index) {
            return index;
        };
        return ContactItemDetailsComponent;
    }());
    /** @nocollapse */ ContactItemDetailsComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactItemDetailsComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ ContactItemDetailsComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ContactItemDetailsComponent, selector: "bb-contact-item-details", inputs: { contactItem: "contactItem", showName: "showName", showHeaders: "showHeaders" }, ngImport: i0__namespace, template: "<ng-container bbContactItemDetailsCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbContactItemDetailsCustomizable let-hostRef>\n  <div class=\"bb-block bb-block--xl\">\n    <div *ngIf=\"hostRef.showName\" class=\"bb-stack bb-block bb-block--md col\">\n      <span class=\"bb-stack__item\" data-role=\"contact-details-info-name\">{{ hostRef.contactItem?.name }}</span>\n      <ng-container *ngIf=\"hostRef.contactItem?.alias\">\n        <span class=\"bb-stack__item\" aria-hidden=\"true\"> \u2022 </span>\n        <span class=\"bb-stack__item\" data-role=\"contact-details-info-alias\"> {{ hostRef.contactItem?.alias }} </span>\n      </ng-container>\n    </div>\n    <dl class=\"col bb-block\" tabindex=\"0\">\n      <div class=\"row flex-column-reverse flex-sm-row\">\n        <div *ngIf=\"hostRef.contactItem?.phoneNumber\" class=\"col-12 col-sm-6 bb-block bb-block--sm\">\n          <dt class=\"bb-block bb-block--sm bb-label\" i18n=\"@@contact-item-details.contact-information.phone\">\n            Phone number\n          </dt>\n          <dd class=\"bb-block bb-block--sm\" data-role=\"contact-details-info-phone\">\n            {{hostRef.contactItem?.phoneNumber}}\n          </dd>\n        </div>\n        <div *ngIf=\"hostRef.contactItem?.emailId\" class=\"col-12 col-sm-6 bb-block bb-block--sm\">\n          <dt class=\"bb-block bb-block--sm bb-label\" i18n=\"@@contact-item-details.contact-information.email\">\n            Email address\n          </dt>\n          <dd class=\"bb-block bb-block--sm\" data-role=\"contact-details-info-email\">{{hostRef.contactItem?.emailId}}</dd>\n        </div>\n      </div>\n      <div *ngIf=\"hostRef.contactItem?.contactPerson\" class=\"bb-block bb-block--md col-12\">\n        <dt class=\"bb-block bb-block--sm bb-label row\" i18n=\"@@contact-item-details.contact-information.contact-person\">\n          Contact person\n        </dt>\n        <dd class=\"bb-block bb-block--sm row\" data-role=\"contact-details-info-contact-person\">\n          {{hostRef.contactItem?.contactPerson}}\n        </dd>\n      </div>\n      <div class=\"bb-block bb-block--md col-12\">\n        <dt\n          *ngIf=\"hostRef.contactItem?.streetName || hostRef.contactItem?.addressLine1 || hostRef.contactItem?.addressLine2\"\n          class=\"bb-block bb-block--sm bb-label row\"\n          i18n=\"@@contact-item-details.contact-information.address\"\n        >\n          Contact address\n        </dt>\n        <dd>\n          <bb-contact-full-address [address]=\"hostRef.address\" class=\"row\"></bb-contact-full-address>\n        </dd>\n      </div>\n    </dl>\n  </div>\n  <div class=\"bb-block\">\n    <div class=\"bb-stack bb-block bb-block--xs\" tabindex=\"0\">\n      <bb-header-ui\n        headingType=\"h3\"\n        heading=\"Account information\"\n        i18n-heading=\"@@contact-item-details.account-information.title\"\n        headingClasses=\"bb-stack__item bb-stack__item--fill\"\n      >\n      </bb-header-ui>\n      <span\n        class=\"bb-stack__item bb-stack__item--align-top bb-stack__item--push-right bb-text-support\"\n        i18n=\"@@contact-item-details.account-information.number-of-accounts\"\n        data-role=\"contact-details-account-number-accounts\"\n      >\n        {{hostRef.contactItem?.accounts?.length}} {hostRef.contactItem?.accounts?.length, plural, =1 {account} other\n        {accounts}}\n      </span>\n    </div>\n    <div\n      *ngFor=\"let account of hostRef.contactItem?.accounts; let index = index; trackBy: hostRef.trackByIndex\"\n      class=\"card card-section bb-block bb-block--sm\"\n    >\n      <bb-account-card-view\n        tabindex=\"0\"\n        [account]=\"account\"\n        [bankAddress]=\"hostRef.bankAddress(account)\"\n        [accountHolderAddress]=\"hostRef.accountHolderAddress(account)\"\n        [index]=\"index\"\n      ></bb-account-card-view>\n    </div>\n  </div>\n</ng-template>\n", components: [{ type: ContactFullAddressComponent, selector: "bb-contact-full-address", inputs: ["address"] }, { type: i2__namespace$2.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: AccountCardViewComponent, selector: "bb-account-card-view", inputs: ["index", "account", "isEditMode", "bankAddress", "accountHolderAddress"], outputs: ["editAccount", "deleteAccount"] }], directives: [{ type: ContactItemDetailsCustomizableDirective, selector: "[bbContactItemDetailsCustomizable]" }, { type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactItemDetailsComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-contact-item-details',
                        templateUrl: './contact-item-details.component.html',
                    }]
            }], propDecorators: { contactItem: [{
                    type: i0.Input
                }], showName: [{
                    type: i0.Input
                }], showHeaders: [{
                    type: i0.Input
                }] } });

    var ContactItemDetailsModule = /** @class */ (function () {
        function ContactItemDetailsModule() {
        }
        return ContactItemDetailsModule;
    }());
    /** @nocollapse */ ContactItemDetailsModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactItemDetailsModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ ContactItemDetailsModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactItemDetailsModule, declarations: [ContactItemDetailsComponent, ContactItemDetailsCustomizableDirective], imports: [i3.CommonModule, i2$2.HeaderModule, ContactFullAddressModule, AccountCardViewModule], exports: [ContactItemDetailsComponent, ContactItemDetailsCustomizableDirective] });
    /** @nocollapse */ ContactItemDetailsModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactItemDetailsModule, imports: [[i3.CommonModule, i2$2.HeaderModule, ContactFullAddressModule, AccountCardViewModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactItemDetailsModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [ContactItemDetailsComponent, ContactItemDetailsCustomizableDirective],
                        exports: [ContactItemDetailsComponent, ContactItemDetailsCustomizableDirective],
                        imports: [i3.CommonModule, i2$2.HeaderModule, ContactFullAddressModule, AccountCardViewModule],
                    }]
            }] });

    /**
     * The component is for showing persons personal data.
     *
     * The following extension slots are available in this component:
     *  - `ContactPersonalDataCustomizableDirective`
     *
     * @see ContactPersonalDataCustomizableDirective
     * @usageNotes
     *
     * ### Display contact personal data
     *
     * ```html
     *    <bb-contact-personal-data
     *      [contact]="hostRef.formModel.contact"
     *      [address]="hostRef.contactAddress"
     *      [viewType]="hostRef.contactViewType"
     *      [isAddContactAddress]= "hostRef.isAddContactAddress"
     *      (contactAddressAdd)= "hostRef.addContactAddress($event)"
     *      (viewChange)="hostRef.changeContactView($event)">
     *    </bb-contact-personal-data>
     * ```
     * @ngModule ContactPersonalDataModule
     */
    var ContactPersonalDataComponent = /** @class */ (function () {
        function ContactPersonalDataComponent(ctrlContainer) {
            this.ctrlContainer = ctrlContainer;
            this.hostRef = this;
            this.contactInputGroupName = exports.InputGroupName.CONTACT;
            /**
             * Flag that denotes if contact address should be added
             */
            this.isAddContactAddress = false;
            /**
             * Event emitted when contact add address flag changes
             */
            this.contactAddressAdd = new i0.EventEmitter();
            /**
             *
             * Event emitted when contact address view is changed
             */
            this.viewChange = new i0.EventEmitter();
        }
        ContactPersonalDataComponent.prototype.ngOnInit = function () {
            if (isObjectTruthy(this.address)) {
                this.originalAddress = Object.assign({}, this.address);
            }
        };
        /**
         * Returns the control of the form
         *
         * @param {string} controlName name of a form control
         * @returns {AbstractControl | null} form control for given name.
         */
        ContactPersonalDataComponent.prototype.getFormControl = function (controlName) {
            var contactInputGroup = this.ctrlContainer.controls[this.contactInputGroupName];
            if (contactInputGroup) {
                return contactInputGroup.controls[controlName];
            }
            return null;
        };
        /**
         * Resets the control of the form.
         *
         * @param {string} controlName name of a form control
         */
        ContactPersonalDataComponent.prototype.reset = function (controlName) {
            var formControl = this.getFormControl(controlName);
            if (formControl) {
                formControl.reset();
            }
        };
        /**
         * Updates the form status and mark as touched.
         * Also changes the view to CARD view once done.
         *
         * @param {string} controlName name of a form control
         */
        ContactPersonalDataComponent.prototype.onAddressSubmit = function (controlName) {
            var address = this.getFormControl(controlName);
            if (address) {
                address.markAllAsTouched();
                address.updateValueAndValidity();
                if (address.valid) {
                    this.originalAddress = Object.assign({}, address.value);
                    this.viewChange.emit(exports.ViewType.CARD);
                }
            }
        };
        /**
         * Emits the contact address add event
         *
         * @param {boolean} isAddAddress Emits the contact address add
         */
        ContactPersonalDataComponent.prototype.onAddressAdd = function (isAddAddress) {
            this.contactAddressAdd.emit(isAddAddress);
        };
        /**
         * hanges the view to form.
         */
        ContactPersonalDataComponent.prototype.onAddressEdit = function () {
            this.viewChange.emit(exports.ViewType.FORM);
        };
        /**
         * If there is no update then returns to card view.
         *
         * @param {string} controlName name of a form control
         */
        ContactPersonalDataComponent.prototype.onAddressDiscard = function (controlName) {
            if (this.originalAddress) {
                this.address = Object.assign({}, this.originalAddress);
                this.viewChange.emit(exports.ViewType.CARD);
            }
            else {
                this.onAddressDelete(controlName);
            }
        };
        /**
         * deletes the address and resets the form.
         *
         * @param {string} controlName name of a form control
         */
        ContactPersonalDataComponent.prototype.onAddressDelete = function (controlName) {
            this.originalAddress = undefined;
            this.contactAddressAdd.emit(false);
            this.reset(controlName);
            this.viewChange.emit(exports.ViewType.FORM);
        };
        return ContactPersonalDataComponent;
    }());
    /** @nocollapse */ ContactPersonalDataComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactPersonalDataComponent, deps: [{ token: i1__namespace$1.ControlContainer }], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ ContactPersonalDataComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ContactPersonalDataComponent, selector: "bb-contact-personal-data", inputs: { viewType: "viewType", contact: "contact", isAddContactAddress: "isAddContactAddress", address: "address", forceChangeDetection: "forceChangeDetection" }, outputs: { contactAddressAdd: "contactAddressAdd", viewChange: "viewChange" }, ngImport: i0__namespace, template: "<div>\n  <fieldset [ngModelGroup]=\"'contactDetails'\">\n    <legend class=\"sr-only\" i18n=\"@@contact-personal-data.personalDetailsGroup.title\">Contact details</legend>\n    <div class=\"row\">\n      <div class=\"bb-block bb-block--lg col-sm-6 col-xs-12\">\n        <label #contactNameLabel id=\"bb-create-contact-name-label\" i18n=\"@@contact-personal-data.contactName.label\"\n          >Name</label\n        >\n        <span class=\"bb-text-support\">\n          (<ng-container i18n=\"@@contact-account-data.accountName.text-support.required.label\">Required</ng-container>)\n        </span>\n        <bb-input-text-ui\n          name=\"name\"\n          class=\"bb-block bb-block--sm\"\n          #contactNameModel=\"ngModel\"\n          [(ngModel)]=\"hostRef.contact.name\"\n          [maxLength]=\"140\"\n          [required]=\"true\"\n          [aria-labelledby]=\"contactNameLabel.id\"\n          aria-describedby=\"fullname-description\"\n          data-role=\"contact-name\"\n          bbNoWhiteSpace\n        >\n        </bb-input-text-ui>\n        <small\n          id=\"fullname-description\"\n          *ngIf=\"!contactNameModel.touched\"\n          class=\"bb-text-support bb-block bb-block--sm\"\n          i18n=\"@@contact-personal-data.contactName.infoText\"\n        >\n          Full name or company name\n        </small>\n        <bb-input-validation-message-ui\n          role=\"alert\"\n          [showErrors]=\"contactNameModel.invalid && contactNameModel.touched\"\n        >\n          <ng-container>\n            <span i18n=\"@@contact-personal-data.contactName.minLengthErrorText\" data-role=\"missing-contact-name\"\n              >Full name or company name is required</span\n            >\n          </ng-container>\n        </bb-input-validation-message-ui>\n      </div>\n      <div class=\"bb-block bb-block--lg bb-stack__item--align-top col-sm-6 col-xs-12\">\n        <bb-input-text-ui\n          label=\"Contact person\"\n          i18n-label=\"@@contact-personal-data.contactPerson.label\"\n          class=\"bb-stack__item--align-bottom\"\n          data-role=\"contact-person\"\n          [(ngModel)]=\"hostRef.contact.contactPerson\"\n          name=\"contactPerson\"\n          [maxLength]=\"70\"\n        >\n        </bb-input-text-ui>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"bb-block bb-block--lg col-sm-6 col-xs-12\">\n        <bb-input-text-ui\n          data-role=\"contact-alias\"\n          label=\"Alias\"\n          i18n-label=\"@@contact-personal-data.contactAlias.label\"\n          [(ngModel)]=\"hostRef.contact.alias\"\n          name=\"alias\"\n          [maxLength]=\"70\"\n        >\n        </bb-input-text-ui>\n      </div>\n      <div class=\"bb-block bb-block--lg col-sm-6 col-xs-12\">\n        <bb-input-text-ui\n          label=\"Phone number\"\n          i18n-label=\"@@contact-personal-data.contactPhoneNumber.label\"\n          data-role=\"contact-phone-number\"\n          [(ngModel)]=\"hostRef.contact.phoneNumber\"\n          name=\"phoneNumber\"\n          [maxLength]=\"30\"\n        >\n        </bb-input-text-ui>\n      </div>\n    </div>\n    <div class=\"row bb-block bb-block--lg\">\n      <div class=\"bb-block bb-block--no-margin col-lg-8 col-sm-8 col-xs-12\">\n        <bb-input-email-ui\n          label=\"E-mail\"\n          i18n-label=\"@@contact-personal-data.contactEmail.label\"\n          data-role=\"contact-email\"\n          [(ngModel)]=\"hostRef.contact.emailId\"\n          #emailModel=\"ngModel\"\n          name=\"emailId\"\n          bbEmailDomainValidator\n        >\n        </bb-input-email-ui>\n        <bb-input-validation-message-ui role=\"alert\" [showErrors]=\"emailModel.invalid && emailModel.touched\">\n          <ng-container *ngIf=\"emailModel.errors?.email\">\n            <span i18n=\"@@contact-personal-data.email.errorText\" data-role=\"invalid-email\">Invalid email</span>\n          </ng-container>\n        </bb-input-validation-message-ui>\n      </div>\n    </div>\n\n    <div class=\"row\">\n      <div class=\"bb-block col-12\" data-role=\"contact-address-container\">\n        <bb-contact-address-data\n          [highlight]=\"false\"\n          [isAddAddress]=\"hostRef.isAddContactAddress\"\n          [viewType]=\"hostRef.viewType\"\n          [address]=\"hostRef.address\"\n          (add)=\"hostRef.onAddressAdd($event)\"\n          (edit)=\"hostRef.onAddressEdit()\"\n          (discard)=\"hostRef.onAddressDiscard($event)\"\n          (delete)=\"hostRef.onAddressDelete($event)\"\n          (submit)=\"hostRef.onAddressSubmit($event)\"\n        >\n        </bb-contact-address-data>\n      </div>\n    </div>\n  </fieldset>\n</div>\n", components: [{ type: i2__namespace$3.InputTextComponent, selector: "bb-input-text-ui", inputs: ["placeholder", "maxLength", "minLength", "autocomplete", "readonly", "mask", "maskValidator", "showCharCounter"], outputs: ["valueChange"] }, { type: i3__namespace$1.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i4__namespace.InputEmailComponent, selector: "bb-input-email-ui", inputs: ["placeholder", "maxLength", "minLength", "readonly", "autocomplete"] }, { type: ContactAddressDataComponent, selector: "bb-contact-address-data", inputs: ["isAddAddress", "address", "addressType", "canCopyAddress", "isContactAddressCopied", "viewType", "highlight"], outputs: ["submit", "discard", "delete", "edit", "contactAddressCopy", "add", "addressEditAfterCopy"] }], directives: [{ type: i1__namespace$1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1__namespace$1.NgModelGroup, selector: "[ngModelGroup]", inputs: ["ngModelGroup"], exportAs: ["ngModelGroup"] }, { type: NoWhiteSpaceValidatorDirective, selector: "[bbNoWhiteSpace]" }, { type: i1__namespace$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i1__namespace$1.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: EmailDomainValidatorDirective, selector: "[bbEmailDomainValidator]" }], viewProviders: [{ provide: i1$1.ControlContainer, useExisting: i1$1.NgForm }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactPersonalDataComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-contact-personal-data',
                        templateUrl: './contact-personal-data.component.html',
                        viewProviders: [{ provide: i1$1.ControlContainer, useExisting: i1$1.NgForm }],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.ControlContainer }]; }, propDecorators: { viewType: [{
                    type: i0.Input
                }], contact: [{
                    type: i0.Input
                }], isAddContactAddress: [{
                    type: i0.Input
                }], address: [{
                    type: i0.Input
                }], forceChangeDetection: [{
                    type: i0.Input
                }], contactAddressAdd: [{
                    type: i0.Output
                }], viewChange: [{
                    type: i0.Output
                }] } });

    /**
     * This is an extension slot to be used for customizing contact personal data
     *
     * @usageNotes
     *
     * ### Display contact personal data
     *
     * ```html
     *  <ng-template bbContactPersonalDataCustomizable let-hostRef>
     * {{hostRef.contact.name}}</ng-template>
     * ```
     * @ngModule ContactPersonalDataModule
     */
    var ContactPersonalDataCustomizableDirective = /** @class */ (function (_super) {
        __extends(ContactPersonalDataCustomizableDirective, _super);
        function ContactPersonalDataCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ContactPersonalDataCustomizableDirective;
    }(core.BbTemplate));
    /** @nocollapse */ ContactPersonalDataCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactPersonalDataCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ ContactPersonalDataCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ContactPersonalDataCustomizableDirective, selector: "[bbContactPersonalDataCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactPersonalDataCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbContactPersonalDataCustomizable]',
                    }]
            }] });

    /**
     * Exports:
     * - ContactPersonalDataComponent
     * - ContactPersonalDataCustomizableDirective
     */
    var ContactPersonalDataModule = /** @class */ (function () {
        function ContactPersonalDataModule() {
        }
        return ContactPersonalDataModule;
    }());
    /** @nocollapse */ ContactPersonalDataModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactPersonalDataModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ ContactPersonalDataModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactPersonalDataModule, declarations: [ContactPersonalDataComponent, ContactPersonalDataCustomizableDirective], imports: [i1$1.FormsModule,
            i2$3.InputTextModule,
            i3$1.InputValidationMessageModule,
            i4.InputEmailModule,
            ContactAddressDataModule,
            i3.CommonModule,
            NoWhiteSpaceModule,
            EmailDomainModule], exports: [ContactPersonalDataComponent, ContactPersonalDataCustomizableDirective] });
    /** @nocollapse */ ContactPersonalDataModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactPersonalDataModule, imports: [[
                i1$1.FormsModule,
                i2$3.InputTextModule,
                i3$1.InputValidationMessageModule,
                i4.InputEmailModule,
                ContactAddressDataModule,
                i3.CommonModule,
                NoWhiteSpaceModule,
                EmailDomainModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ContactPersonalDataModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [ContactPersonalDataComponent, ContactPersonalDataCustomizableDirective],
                        exports: [ContactPersonalDataComponent, ContactPersonalDataCustomizableDirective],
                        imports: [
                            i1$1.FormsModule,
                            i2$3.InputTextModule,
                            i3$1.InputValidationMessageModule,
                            i4.InputEmailModule,
                            ContactAddressDataModule,
                            i3.CommonModule,
                            NoWhiteSpaceModule,
                            EmailDomainModule,
                        ],
                    }]
            }] });

    /**
     * Search box component with debounce
     *
     * @example
     *
     * ```html
     *   <bb-debounce-search
     *     class="d-block"
     *     [debounceTime]="debounceTime"
     *     (searchContacts)="onSearch($event)">
     *   </bb-debounce-search>
     * ```
     * @ngModule DebounceSearchModule
     */
    var DebounceSearchComponent = /** @class */ (function () {
        function DebounceSearchComponent() {
            this.gc$ = new rxjs.Subject();
            this.debounceSearch$ = new rxjs.Subject();
            this.searchTerm = '';
            /**
             * Time delay between each search requests
             */
            this.debounceTime = 300;
            /**
             * Placeholder text for search input
             */
            this.placeholder = 'Search';
            /**
             * See html property `aria-label`
             */
            this.ariaLabel = undefined;
            /**
             * Changes will be triggered on search
             */
            this.searchContacts = new i0.EventEmitter();
        }
        DebounceSearchComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.debounceSearch$
                .pipe(operators.takeUntil(this.gc$), operators.debounceTime(this.debounceTime), operators.distinctUntilChanged())
                .subscribe(function (term) {
                _this.searchContacts.emit(term);
            });
        };
        /**
         * Updates the search term.
         *
         * @param {string} query - search query text
         */
        DebounceSearchComponent.prototype.startSearching = function (query) {
            this.debounceSearch$.next(query);
        };
        /**
         * Updating the search value when cleared.
         */
        DebounceSearchComponent.prototype.clearSearching = function () {
            this.debounceSearch$.next('');
        };
        /**
         * OnDestroy
         */
        DebounceSearchComponent.prototype.ngOnDestroy = function () {
            this.gc$.next();
            this.debounceSearch$.complete();
            this.gc$.complete();
        };
        return DebounceSearchComponent;
    }());
    /** @nocollapse */ DebounceSearchComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DebounceSearchComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ DebounceSearchComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: DebounceSearchComponent, selector: "bb-debounce-search", inputs: { debounceTime: "debounceTime", placeholder: "placeholder", ariaLabel: ["aria-label", "ariaLabel"] }, outputs: { searchContacts: "searchContacts" }, ngImport: i0__namespace, template: "\n    <bb-search-box-ui\n      [placeholder]=\"placeholder\"\n      [showSearch]=\"true\"\n      [showClear]=\"true\"\n      [aria-label]=\"ariaLabel\"\n      (submit)=\"startSearching($event)\"\n      (clear)=\"clearSearching()\"\n      [ngModel]=\"searchTerm\"\n      (ngModelChange)=\"startSearching($event)\"\n    ></bb-search-box-ui>\n  ", isInline: true, components: [{ type: i1__namespace$4.SearchBoxComponent, selector: "bb-search-box-ui", inputs: ["placeholder", "maxLength", "squareBorder", "typeaheadOptions", "showSearch", "showClear", "searchLabel", "clearLabel", "autocomplete"], outputs: ["submit", "clear", "valueChange"] }], directives: [{ type: i1__namespace$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DebounceSearchComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-debounce-search',
                        template: "\n    <bb-search-box-ui\n      [placeholder]=\"placeholder\"\n      [showSearch]=\"true\"\n      [showClear]=\"true\"\n      [aria-label]=\"ariaLabel\"\n      (submit)=\"startSearching($event)\"\n      (clear)=\"clearSearching()\"\n      [ngModel]=\"searchTerm\"\n      (ngModelChange)=\"startSearching($event)\"\n    ></bb-search-box-ui>\n  ",
                    }]
            }], propDecorators: { debounceTime: [{
                    type: i0.Input
                }], placeholder: [{
                    type: i0.Input
                }], ariaLabel: [{
                    type: i0.Input,
                    args: ['aria-label']
                }], searchContacts: [{
                    type: i0.Output
                }] } });

    /**
     * Exports:
     * - DebounceSearchComponent
     */
    var DebounceSearchModule = /** @class */ (function () {
        function DebounceSearchModule() {
        }
        return DebounceSearchModule;
    }());
    /** @nocollapse */ DebounceSearchModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DebounceSearchModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ DebounceSearchModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DebounceSearchModule, declarations: [DebounceSearchComponent], imports: [i1$1.FormsModule, i1$4.SearchBoxModule], exports: [DebounceSearchComponent] });
    /** @nocollapse */ DebounceSearchModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DebounceSearchModule, imports: [[i1$1.FormsModule, i1$4.SearchBoxModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DebounceSearchModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [DebounceSearchComponent],
                        exports: [DebounceSearchComponent],
                        imports: [i1$1.FormsModule, i1$4.SearchBoxModule],
                    }]
            }] });

    /**
     * Component for approval log of a contact.
     *
     * @usageNotes
     *
     * ```html
     * <bb-approval-log
     *   [isPending]="hostRef.approvalDetails?.approvalDetails?.status === 'PENDING'"
     *   [records]="hostRef.approvalDetails?.approvalDetails?.records"
     * ></bb-approval-log>
     * ```
     * @ngModule ApprovalLogModule
     */
    var ApprovalLogComponent = /** @class */ (function () {
        function ApprovalLogComponent() {
            /**
             * Approval log records of a contact.
             */
            this.records = [];
            /**
             * Whether contact is currently pending approval
             */
            this.isPending = false;
        }
        return ApprovalLogComponent;
    }());
    /** @nocollapse */ ApprovalLogComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ApprovalLogComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ ApprovalLogComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ApprovalLogComponent, selector: "bb-approval-log", inputs: { records: "records", isPending: "isPending" }, ngImport: i0__namespace, template: "<bb-item-log-ui [records]=\"records\" [isPending]=\"isPending\">\n  <ng-template bbItemLogRecord let-itemLogRecord>\n    <div class=\"bb-stack bb-stack--align-top\">\n      <bb-icon-ui\n        class=\"bb-item-log-record__icon\"\n        size=\"md\"\n        [name]=\"itemLogRecord?.status === 'REJECTED' ? 'cancel' : 'success'\"\n        [color]=\"itemLogRecord?.status === 'REJECTED' ? 'danger' : 'success'\"\n      >\n      </bb-icon-ui>\n      <div class=\"bb-item-log-record__details\">\n        <span class=\"bb-text-bold\" i18n=\"@@contact-approval-log.status\">\n          { itemLogRecord?.status, select, REJECTED {Rejected} APPROVED {Approved} other {} }\n        </span>\n        <span class=\"text-small\">\n          <ng-container i18n=\"@@contact-approval-log.label\"> by {{ itemLogRecord.userFullName }}</ng-container>\n          <ng-container *ngIf=\"itemLogRecord?.externalUserId\"> ({{ itemLogRecord.externalUserId }})</ng-container>\n        </span>\n        <div *ngIf=\"itemLogRecord?.createdAt as createdAt\" class=\"bb-item-log-record__time\">\n          <time> {{ createdAt | date }}</time>\n          <ng-container i18n=\"@@contact-approval-log-created-at.label\"> at</ng-container>\n          <time> {{ createdAt | date: 'shortTime' }}</time>\n        </div>\n        <div *ngIf=\"itemLogRecord?.comment\" class=\"media\">\n          <div class=\"bb-inline-stack__item\">\n            <bb-icon-ui color=\"secondary\" name=\"forum\" size=\"sm\"></bb-icon-ui>\n          </div>\n          <div class=\"media-body break-word text-small\">{{ itemLogRecord?.comment }}</div>\n        </div>\n      </div>\n    </div>\n  </ng-template>\n</bb-item-log-ui>\n", components: [{ type: i1__namespace$5.ItemLogComponent, selector: "bb-item-log-ui", inputs: ["isPending", "records"] }, { type: i2__namespace$1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i1__namespace$5.ItemLogRecordDirective, selector: "ng-template[bbItemLogRecord]" }, { type: i3__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "date": i3__namespace.DatePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ApprovalLogComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-approval-log',
                        templateUrl: 'approval-log.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], propDecorators: { records: [{
                    type: i0.Input
                }], isPending: [{
                    type: i0.Input
                }] } });

    /**
     * Component for a collapsible section with an approval log of a contact.
     *
     * @usageNotes
     *
     * ```html
     * <bb-approval-log-collapsible
     *   [isPending]="hostRef.approvalDetails?.approvalDetails?.status === 'PENDING'"
     *   [records]="hostRef.approvalDetails?.approvalDetails?.records"
     * ></bb-approval-log-collapsible>
     * ```
     * @ngModule ApprovalLogModule
     */
    var ApprovalLogCollapsibleComponent = /** @class */ (function () {
        function ApprovalLogCollapsibleComponent() {
            /**
             * Approval log records of a contact.
             */
            this.records = [];
            /**
             * Whether contact is currently pending approval
             */
            this.isPending = false;
        }
        return ApprovalLogCollapsibleComponent;
    }());
    /** @nocollapse */ ApprovalLogCollapsibleComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ApprovalLogCollapsibleComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    /** @nocollapse */ ApprovalLogCollapsibleComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ApprovalLogCollapsibleComponent, selector: "bb-approval-log-collapsible", inputs: { records: "records", isPending: "isPending" }, ngImport: i0__namespace, template: "\n    <bb-collapsible-ui [attr.data-role]=\"'approval-log-toggle'\">\n      <ng-template bbCollapsibleHeader let-toggle=\"toggle\" let-isOpen=\"isOpen\">\n        <div class=\"bb-block bb-stack\">\n          <div class=\"bb-stack__item bb-stack__item--fill\">\n            <h3 i18n=\"@@contact-manager-pending-approvals-details.approvalLog\">Approval log</h3>\n          </div>\n          <div class=\"bb-stack__item bb-stack__item--push-right\">\n            <button\n              (click)=\"toggle()\"\n              bbButton\n              color=\"outline\"\n              aria-label=\"Approval log toggle\"\n              i18n-aria-label=\"@@bb-approval-log.toggle.label\"\n              data-role=\"approval-log-toggle-button\"\n              bbTooltip=\"Toggle\"\n              triggers=\"hover focus\"\n              i18n-bbTooltip=\"@@contact-manager-pending-approvals-details.approval-log-toggle.tooltip\"\n            >\n              <bb-icon-ui [name]=\"isOpen ? 'toggle-up' : 'toggle-down'\"></bb-icon-ui>\n            </button>\n          </div>\n        </div>\n        <hr />\n      </ng-template>\n      <ng-template bbCollapsibleBody>\n        <div aria-live=\"assertive\">\n          <bb-approval-log [isPending]=\"isPending\" [records]=\"records\"> </bb-approval-log>\n        </div>\n      </ng-template>\n    </bb-collapsible-ui>\n  ", isInline: true, components: [{ type: i1__namespace$6.CollapsibleComponent, selector: "bb-collapsible-ui", inputs: ["recreateBodyContent", "hasChevron", "isOpen"], outputs: ["isOpenChange"] }, { type: i2__namespace$1.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: ApprovalLogComponent, selector: "bb-approval-log", inputs: ["records", "isPending"] }], directives: [{ type: i1__namespace$6.CollapsibleHeaderDirective, selector: "ng-template[bbCollapsibleHeader]" }, { type: i1__namespace$6.CollapsibleBodyDirective, selector: "ng-template[bbCollapsibleBody]" }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ApprovalLogCollapsibleComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-approval-log-collapsible',
                        template: "\n    <bb-collapsible-ui [attr.data-role]=\"'approval-log-toggle'\">\n      <ng-template bbCollapsibleHeader let-toggle=\"toggle\" let-isOpen=\"isOpen\">\n        <div class=\"bb-block bb-stack\">\n          <div class=\"bb-stack__item bb-stack__item--fill\">\n            <h3 i18n=\"@@contact-manager-pending-approvals-details.approvalLog\">Approval log</h3>\n          </div>\n          <div class=\"bb-stack__item bb-stack__item--push-right\">\n            <button\n              (click)=\"toggle()\"\n              bbButton\n              color=\"outline\"\n              aria-label=\"Approval log toggle\"\n              i18n-aria-label=\"@@bb-approval-log.toggle.label\"\n              data-role=\"approval-log-toggle-button\"\n              bbTooltip=\"Toggle\"\n              triggers=\"hover focus\"\n              i18n-bbTooltip=\"@@contact-manager-pending-approvals-details.approval-log-toggle.tooltip\"\n            >\n              <bb-icon-ui [name]=\"isOpen ? 'toggle-up' : 'toggle-down'\"></bb-icon-ui>\n            </button>\n          </div>\n        </div>\n        <hr />\n      </ng-template>\n      <ng-template bbCollapsibleBody>\n        <div aria-live=\"assertive\">\n          <bb-approval-log [isPending]=\"isPending\" [records]=\"records\"> </bb-approval-log>\n        </div>\n      </ng-template>\n    </bb-collapsible-ui>\n  ",
                    }]
            }], propDecorators: { records: [{
                    type: i0.Input
                }], isPending: [{
                    type: i0.Input
                }] } });

    /**
     * Exports:
     * - ApprovalLogComponent
     * - ApprovalLogCollapsibleComponent
     */
    var ApprovalLogModule = /** @class */ (function () {
        function ApprovalLogModule() {
        }
        return ApprovalLogModule;
    }());
    /** @nocollapse */ ApprovalLogModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ApprovalLogModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ ApprovalLogModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ApprovalLogModule, declarations: [ApprovalLogComponent, ApprovalLogCollapsibleComponent], imports: [i1$5.ItemLogModule, i2$1.IconModule, i3.CommonModule, i1$6.CollapsibleModule], exports: [ApprovalLogComponent, ApprovalLogCollapsibleComponent] });
    /** @nocollapse */ ApprovalLogModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ApprovalLogModule, imports: [[i1$5.ItemLogModule, i2$1.IconModule, i3.CommonModule, i1$6.CollapsibleModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ApprovalLogModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [ApprovalLogComponent, ApprovalLogCollapsibleComponent],
                        imports: [i1$5.ItemLogModule, i2$1.IconModule, i3.CommonModule, i1$6.CollapsibleModule],
                        exports: [ApprovalLogComponent, ApprovalLogCollapsibleComponent],
                    }]
            }] });

    /**
     * Abstract Base Request List Component
     *
     */
    var RequestListBaseComponent = /** @class */ (function () {
        function RequestListBaseComponent() {
            /**
             * Direction of current sorting
             */
            this.sortDirection = 'asc';
            /**
             * Enum with names of sorting columns
             */
            this.approvalSortEnum = i1$2.ApprovalSort;
            /**
             * Event emitted when column is clicked
             */
            this.sort = new i0.EventEmitter();
        }
        /**
         * Sort column method
         *
         * @param {string} event - object with column and direction properites
         */
        RequestListBaseComponent.prototype.onSort = function (event) {
            this.sortColumn = event.direction ? event.column : null;
            this.sortDirection = event.direction || 'desc';
            this.sort.emit(event);
        };
        return RequestListBaseComponent;
    }());
    /** @nocollapse */ RequestListBaseComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: RequestListBaseComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Directive });
    /** @nocollapse */ RequestListBaseComponent.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: RequestListBaseComponent, outputs: { sort: "sort" }, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: RequestListBaseComponent, decorators: [{
                type: i0.Directive
            }], propDecorators: { sort: [{
                    type: i0.Output
                }] } });

    var AriaSortPipe = /** @class */ (function () {
        function AriaSortPipe() {
        }
        AriaSortPipe.prototype.transform = function (value, sortColumn, sortDirection) {
            var selectedDirection = sortDirection && sortDirection === 'desc' ? 'descending' : 'ascending';
            return sortColumn === value.toUpperCase() ? selectedDirection : null;
        };
        return AriaSortPipe;
    }());
    /** @nocollapse */ AriaSortPipe.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AriaSortPipe, deps: [], target: i0__namespace.ɵɵFactoryTarget.Pipe });
    /** @nocollapse */ AriaSortPipe.ɵpipe = i0__namespace.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AriaSortPipe, name: "getAriaSort" });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AriaSortPipe, decorators: [{
                type: i0.Pipe,
                args: [{
                        name: 'getAriaSort',
                    }]
            }] });

    var AriaSortPipeModule = /** @class */ (function () {
        function AriaSortPipeModule() {
        }
        return AriaSortPipeModule;
    }());
    /** @nocollapse */ AriaSortPipeModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AriaSortPipeModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ AriaSortPipeModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AriaSortPipeModule, declarations: [AriaSortPipe], imports: [i3.CommonModule], exports: [AriaSortPipe] });
    /** @nocollapse */ AriaSortPipeModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AriaSortPipeModule, imports: [[i3.CommonModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AriaSortPipeModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [AriaSortPipe],
                        imports: [i3.CommonModule],
                        exports: [AriaSortPipe],
                    }]
            }] });

    var DirectionSortPipe = /** @class */ (function () {
        function DirectionSortPipe() {
        }
        DirectionSortPipe.prototype.transform = function (value, sortColumn, sortDirection) {
            return sortColumn === value.toUpperCase() ? sortDirection : '';
        };
        return DirectionSortPipe;
    }());
    /** @nocollapse */ DirectionSortPipe.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DirectionSortPipe, deps: [], target: i0__namespace.ɵɵFactoryTarget.Pipe });
    /** @nocollapse */ DirectionSortPipe.ɵpipe = i0__namespace.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DirectionSortPipe, name: "getDirection" });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DirectionSortPipe, decorators: [{
                type: i0.Pipe,
                args: [{
                        name: 'getDirection',
                    }]
            }] });

    var DirectionSortPipeModule = /** @class */ (function () {
        function DirectionSortPipeModule() {
        }
        return DirectionSortPipeModule;
    }());
    /** @nocollapse */ DirectionSortPipeModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DirectionSortPipeModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    /** @nocollapse */ DirectionSortPipeModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DirectionSortPipeModule, declarations: [DirectionSortPipe], imports: [i3.CommonModule], exports: [DirectionSortPipe] });
    /** @nocollapse */ DirectionSortPipeModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DirectionSortPipeModule, imports: [[i3.CommonModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DirectionSortPipeModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [DirectionSortPipe],
                        imports: [i3.CommonModule],
                        exports: [DirectionSortPipe],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.AccountCardViewComponent = AccountCardViewComponent;
    exports.AccountCardViewCustomizableDirective = AccountCardViewCustomizableDirective;
    exports.AccountCardViewModule = AccountCardViewModule;
    exports.ApprovalHttpService = ApprovalHttpService;
    exports.ApprovalLogCollapsibleComponent = ApprovalLogCollapsibleComponent;
    exports.ApprovalLogComponent = ApprovalLogComponent;
    exports.ApprovalLogModule = ApprovalLogModule;
    exports.AriaSortPipe = AriaSortPipe;
    exports.AriaSortPipeModule = AriaSortPipeModule;
    exports.BB_CONTACT_BANK_ACCOUNT_TYPES_LIST = BB_CONTACT_BANK_ACCOUNT_TYPES_LIST;
    exports.BB_CONTACT_COUNTRIES_LIST = BB_CONTACT_COUNTRIES_LIST;
    exports.BB_CONTACT_IBAN_COUNTRIES_LIST = BB_CONTACT_IBAN_COUNTRIES_LIST;
    exports.ConfirmActionDialogComponent = ConfirmActionDialogComponent;
    exports.ConfirmActionDialogModule = ConfirmActionDialogModule;
    exports.ContactAccountDataComponent = ContactAccountDataComponent;
    exports.ContactAccountDataCustomizableDirective = ContactAccountDataCustomizableDirective;
    exports.ContactAccountDataModule = ContactAccountDataModule;
    exports.ContactAddressDataComponent = ContactAddressDataComponent;
    exports.ContactAddressDataCustomizableDirective = ContactAddressDataCustomizableDirective;
    exports.ContactAddressDataModule = ContactAddressDataModule;
    exports.ContactConfigProviders = ContactConfigProviders;
    exports.ContactDiscardChangesService = ContactDiscardChangesService;
    exports.ContactFormGroupItem = ContactFormGroupItem;
    exports.ContactFullAddressComponent = ContactFullAddressComponent;
    exports.ContactFullAddressCustomizableDirective = ContactFullAddressCustomizableDirective;
    exports.ContactFullAddressModule = ContactFullAddressModule;
    exports.ContactHttpService = ContactHttpService;
    exports.ContactItemDetailsComponent = ContactItemDetailsComponent;
    exports.ContactItemDetailsCustomizableDirective = ContactItemDetailsCustomizableDirective;
    exports.ContactItemDetailsModule = ContactItemDetailsModule;
    exports.ContactPersonalDataComponent = ContactPersonalDataComponent;
    exports.ContactPersonalDataCustomizableDirective = ContactPersonalDataCustomizableDirective;
    exports.ContactPersonalDataModule = ContactPersonalDataModule;
    exports.ContactService = ContactService;
    exports.ContactsError = ContactsError;
    exports.CountryItemComponent = CountryItemComponent;
    exports.CountryItemCustomizableDirective = CountryItemCustomizableDirective;
    exports.CountryItemModule = CountryItemModule;
    exports.DebounceSearchComponent = DebounceSearchComponent;
    exports.DebounceSearchModule = DebounceSearchModule;
    exports.DirectionSortPipe = DirectionSortPipe;
    exports.DirectionSortPipeModule = DirectionSortPipeModule;
    exports.EmailDomainModule = EmailDomainModule;
    exports.EmailDomainValidatorDirective = EmailDomainValidatorDirective;
    exports.IbanMask = IbanMask;
    exports.IbanValidatorDirective = IbanValidatorDirective;
    exports.IbanValidatorModule = IbanValidatorModule;
    exports.NoWhiteSpaceModule = NoWhiteSpaceModule;
    exports.NoWhiteSpaceValidatorDirective = NoWhiteSpaceValidatorDirective;
    exports.RelativeDateModule = RelativeDateModule;
    exports.RelativeDatePipe = RelativeDatePipe;
    exports.RequestListBaseComponent = RequestListBaseComponent;
    exports.addressFromAccountHolder = addressFromAccountHolder;
    exports.addressFromBank = addressFromBank;
    exports.addressFromContact = addressFromContact;
    exports.addressToString = addressToString;
    exports.defaultAccessContextScope = defaultAccessContextScope;
    exports.fromContactFormToContactModel = fromContactFormToContactModel;
    exports.fromContactItemToContactModel = fromContactItemToContactModel;
    exports.getApprovalStatus = getApprovalStatus;
    exports.isFormGroupValid = isFormGroupValid;
    exports.isObjectTruthy = isObjectTruthy;
    exports.provideContactServices = provideContactServices;
    exports.toBoolean = toBoolean;
    exports.toInteger = toInteger;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-contact-common-ang.umd.js.map
