import * as i0 from '@angular/core';
import { InjectionToken, NgModule, Optional, SkipSelf, Injectable, Inject } from '@angular/core';
import * as i1 from '@angular/common/http';
import { HttpHeaders, HttpParams } from '@angular/common/http';
import * as i2 from '@backbase/foundation-ang/data-http';
import { createMocks } from '@backbase/foundation-ang/data-http';

const ApprovalStatus = {
    PENDING: 'PENDING',
    APPROVED: 'APPROVED',
    REJECTED: 'REJECTED',
    CANCELLED: 'CANCELLED'
};

const SeverityLevel = {
    ALERT: 'ALERT',
    WARNING: 'WARNING',
    SUCCESS: 'SUCCESS',
    INFO: 'INFO'
};

const TargetGroup = {
    GLOBAL: 'GLOBAL',
    CUSTOMER: 'CUSTOMER',
    USER: 'USER'
};

const NOTIFICATIONS_BASE_PATH = new InjectionToken('NOTIFICATIONS_BASE_PATH');
const COLLECTION_FORMATS = {
    'csv': ',',
    'tsv': '   ',
    'ssv': ' ',
    'pipes': '|'
};

class NotificationsConfiguration {
    constructor(configurationParameters = {}) {
        this.apiKeys = configurationParameters.apiKeys;
        this.username = configurationParameters.username;
        this.password = configurationParameters.password;
        this.accessToken = configurationParameters.accessToken;
        this.basePath = configurationParameters.basePath;
        this.withCredentials = configurationParameters.withCredentials;
        this.encoder = configurationParameters.encoder;
        if (configurationParameters.credentials) {
            this.credentials = configurationParameters.credentials;
        }
        else {
            this.credentials = {};
        }
    }
    selectHeaderContentType(contentTypes) {
        if (contentTypes.length === 0) {
            return undefined;
        }
        const type = contentTypes.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return contentTypes[0];
        }
        return type;
    }
    selectHeaderAccept(accepts) {
        if (accepts.length === 0) {
            return undefined;
        }
        const type = accepts.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return accepts[0];
        }
        return type;
    }
    isJsonMime(mime) {
        const jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
    lookupCredential(key) {
        const value = this.credentials[key];
        return typeof value === 'function'
            ? value()
            : value;
    }
}
const CONFIG_TOKEN = new InjectionToken('api-data-module NotificationsConfiguration');

class NotificationsApiModule {
    constructor(parentModule, http, dataModulesManager, config) {
        if (parentModule) {
            throw new Error('NotificationsApiModule is already loaded. Import in your base AppModule only.');
        }
        if (!http) {
            throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                'See also https://github.com/angular/angular/issues/20575');
        }
        if (dataModulesManager) {
            dataModulesManager.setModuleConfig(CONFIG_TOKEN, {
                apiRoot: '',
                servicePath: config.basePath || '',
                headers: {},
            });
        }
    }
    static forRoot(configurationFactory) {
        return {
            ngModule: NotificationsApiModule,
            providers: [{ provide: NotificationsConfiguration, useFactory: configurationFactory }]
        };
    }
}
NotificationsApiModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: NotificationsApiModule, deps: [{ token: NotificationsApiModule, optional: true, skipSelf: true }, { token: i1.HttpClient, optional: true }, { token: i2.DataModulesManager, optional: true }, { token: NotificationsConfiguration }], target: i0.ɵɵFactoryTarget.NgModule });
NotificationsApiModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: NotificationsApiModule });
NotificationsApiModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: NotificationsApiModule, providers: [], imports: [[]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: NotificationsApiModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [],
                    declarations: [],
                    exports: [],
                    providers: []
                }]
        }], ctorParameters: function () { return [{ type: NotificationsApiModule, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: i1.HttpClient, decorators: [{
                    type: Optional
                }] }, { type: i2.DataModulesManager, decorators: [{
                    type: Optional
                }] }, { type: NotificationsConfiguration }]; } });

class CustomHttpParameterCodec {
    encodeKey(k) {
        return encodeURIComponent(k);
    }
    encodeValue(v) {
        return encodeURIComponent(v);
    }
    decodeKey(k) {
        return decodeURIComponent(k);
    }
    decodeValue(v) {
        return decodeURIComponent(v);
    }
}

class EmployeeHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new NotificationsConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    getApprovableNotification(requestParameters, observe = 'body', reportProgress = false, options) {
        const _managementId = requestParameters["managementId"];
        if (_managementId === null || _managementId === undefined) {
            throw new Error('Required parameter managementId was null or undefined when calling getApprovableNotification.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/employee/notifications/${encodeURIComponent(String(_managementId))}/approvals`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getApprovableNotificationUrl(requestParameters) {
        const _managementId = requestParameters["managementId"];
        if (_managementId === null || _managementId === undefined) {
            throw new Error('Required parameter managementId was null or undefined when calling getApprovableNotification.');
        }
        return `${this.configuration.basePath}/client-api/v2/employee/notifications/${encodeURIComponent(String(_managementId))}/approvals`;
    }
    postManageNotifications(requestParameters, observe = 'body', reportProgress = false, options) {
        const _notificationsPostRequestBody = requestParameters["notificationsPostRequestBody"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/employee/notifications`, _notificationsPostRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postManageNotificationsUrl(requestParameters) {
        const _notificationsPostRequestBody = requestParameters["notificationsPostRequestBody"];
        return `${this.configuration.basePath}/client-api/v2/employee/notifications`;
    }
    putApprovableNotification(requestParameters, observe = 'body', reportProgress = false, options) {
        const _managementId = requestParameters["managementId"];
        if (_managementId === null || _managementId === undefined) {
            throw new Error('Required parameter managementId was null or undefined when calling putApprovableNotification.');
        }
        const _notificationApprovalPutRequestBody = requestParameters["notificationApprovalPutRequestBody"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/employee/notifications/${encodeURIComponent(String(_managementId))}/approvals`, _notificationApprovalPutRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    putApprovableNotificationUrl(requestParameters) {
        const _managementId = requestParameters["managementId"];
        if (_managementId === null || _managementId === undefined) {
            throw new Error('Required parameter managementId was null or undefined when calling putApprovableNotification.');
        }
        const _notificationApprovalPutRequestBody = requestParameters["notificationApprovalPutRequestBody"];
        return `${this.configuration.basePath}/client-api/v2/employee/notifications/${encodeURIComponent(String(_managementId))}/approvals`;
    }
}
EmployeeHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: EmployeeHttpService, deps: [{ token: i1.HttpClient }, { token: NOTIFICATIONS_BASE_PATH, optional: true }, { token: NotificationsConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
EmployeeHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: EmployeeHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: EmployeeHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [NOTIFICATIONS_BASE_PATH]
                }] }, { type: NotificationsConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const EmployeeHttpServiceGetApprovableNotificationMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/employee/notifications/{managementId}/approvals",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "recipients": [{
                            "userId": "3154-611-851"
                        }],
                    "title": "Some title",
                    "message": "Everything works pretty well {{link}}",
                    "level": "INFO",
                    "targetGroup": "USER",
                    "link": "http://dashboard.support.backbase.com",
                    "validFrom": "2017-10-04T14:54:36.274+0000",
                    "expiresOn": "2018-10-04T14:54:36.274+0000",
                    "origin": "Transaction",
                    "routing": {
                        "where-to": "payments-view",
                        "data": {
                            "id": "12345"
                        }
                    }
                }
            },
            {
                status: 403,
                body: {
                    "value": {
                        "$ref": "#/paths/~1client-api~1v2~1notifications/get/responses/403/content/application~1json/example/value"
                    }
                }
            },
            {
                status: 404,
                body: {
                    "value": {
                        "$ref": "#/paths/~1client-api~1v2~1notifications/get/responses/404/content/application~1json/example/value"
                    }
                }
            },
            {
                status: 500,
                body: {
                    "value": {
                        "$ref": "#/paths/~1client-api~1v2~1notifications/get/responses/500/content/application~1json/example/value"
                    }
                }
            },
        ]
    }]);
const EmployeeHttpServicePostManageNotificationsMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/employee/notifications",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "managementId": "15fafdcb-8eee-45ec-b10c-6ec6ef4874f3",
                    "approvalStatus": "PENDING",
                    "notificationIds": ["1dad5515-ec74-471b-ac93-1d5ef7133ea3", "6067499a-0b66-4d8c-9e0e-f98076e8c7f4", "dc9be1ae-9134-46d5-a2c0-162f011f4584"]
                }
            },
            {
                status: 400,
                body: {
                    "value": {
                        "$ref": "#/paths/~1client-api~1v2~1notifications/get/responses/400/content/application~1json/example/value"
                    }
                }
            },
            {
                status: 403,
                body: {
                    "value": {
                        "$ref": "#/paths/~1client-api~1v2~1notifications/get/responses/403/content/application~1json/example/value"
                    }
                }
            },
            {
                status: 404,
                body: {
                    "value": {
                        "$ref": "#/paths/~1client-api~1v2~1notifications/get/responses/404/content/application~1json/example/value"
                    }
                }
            },
            {
                status: 422,
                body: {
                    "message": "Validation error(s) occurred during creation of the notification",
                    "errorFields": [{
                            "fieldName": "message",
                            "message": "Message must contain '{{link}}' placeholder to replace presented link. Remove link or insert placeholder into your message text"
                        }, {
                            "fieldName": "validFrom",
                            "message": "The notification should be valid from some time in future"
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "value": {
                        "$ref": "#/paths/~1client-api~1v2~1notifications/get/responses/500/content/application~1json/example/value"
                    }
                }
            },
        ]
    }]);
const EmployeeHttpServicePutApprovableNotificationMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/employee/notifications/{managementId}/approvals",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "approvalStatus": "APPROVED"
                }
            },
            {
                status: 403,
                body: {
                    "value": {
                        "$ref": "#/paths/~1client-api~1v2~1notifications/get/responses/403/content/application~1json/example/value"
                    }
                }
            },
            {
                status: 404,
                body: {
                    "value": {
                        "$ref": "#/paths/~1client-api~1v2~1notifications/get/responses/404/content/application~1json/example/value"
                    }
                }
            },
            {
                status: 500,
                body: {
                    "value": {
                        "$ref": "#/paths/~1client-api~1v2~1notifications/get/responses/500/content/application~1json/example/value"
                    }
                }
            },
        ]
    }]);
const EmployeeHttpServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v2/employee/notifications/{managementId}/approvals",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "recipients": [{
                            "userId": "3154-611-851"
                        }],
                    "title": "Some title",
                    "message": "Everything works pretty well {{link}}",
                    "level": "INFO",
                    "targetGroup": "USER",
                    "link": "http://dashboard.support.backbase.com",
                    "validFrom": "2017-10-04T14:54:36.274+0000",
                    "expiresOn": "2018-10-04T14:54:36.274+0000",
                    "origin": "Transaction",
                    "routing": {
                        "where-to": "payments-view",
                        "data": {
                            "id": "12345"
                        }
                    }
                }
            },
            {
                status: 403,
                body: {
                    "value": {
                        "$ref": "#/paths/~1client-api~1v2~1notifications/get/responses/403/content/application~1json/example/value"
                    }
                }
            },
            {
                status: 404,
                body: {
                    "value": {
                        "$ref": "#/paths/~1client-api~1v2~1notifications/get/responses/404/content/application~1json/example/value"
                    }
                }
            },
            {
                status: 500,
                body: {
                    "value": {
                        "$ref": "#/paths/~1client-api~1v2~1notifications/get/responses/500/content/application~1json/example/value"
                    }
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/employee/notifications",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "managementId": "15fafdcb-8eee-45ec-b10c-6ec6ef4874f3",
                    "approvalStatus": "PENDING",
                    "notificationIds": ["1dad5515-ec74-471b-ac93-1d5ef7133ea3", "6067499a-0b66-4d8c-9e0e-f98076e8c7f4", "dc9be1ae-9134-46d5-a2c0-162f011f4584"]
                }
            },
            {
                status: 400,
                body: {
                    "value": {
                        "$ref": "#/paths/~1client-api~1v2~1notifications/get/responses/400/content/application~1json/example/value"
                    }
                }
            },
            {
                status: 403,
                body: {
                    "value": {
                        "$ref": "#/paths/~1client-api~1v2~1notifications/get/responses/403/content/application~1json/example/value"
                    }
                }
            },
            {
                status: 404,
                body: {
                    "value": {
                        "$ref": "#/paths/~1client-api~1v2~1notifications/get/responses/404/content/application~1json/example/value"
                    }
                }
            },
            {
                status: 422,
                body: {
                    "message": "Validation error(s) occurred during creation of the notification",
                    "errorFields": [{
                            "fieldName": "message",
                            "message": "Message must contain '{{link}}' placeholder to replace presented link. Remove link or insert placeholder into your message text"
                        }, {
                            "fieldName": "validFrom",
                            "message": "The notification should be valid from some time in future"
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "value": {
                        "$ref": "#/paths/~1client-api~1v2~1notifications/get/responses/500/content/application~1json/example/value"
                    }
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/employee/notifications/{managementId}/approvals",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {
                    "approvalStatus": "APPROVED"
                }
            },
            {
                status: 403,
                body: {
                    "value": {
                        "$ref": "#/paths/~1client-api~1v2~1notifications/get/responses/403/content/application~1json/example/value"
                    }
                }
            },
            {
                status: 404,
                body: {
                    "value": {
                        "$ref": "#/paths/~1client-api~1v2~1notifications/get/responses/404/content/application~1json/example/value"
                    }
                }
            },
            {
                status: 500,
                body: {
                    "value": {
                        "$ref": "#/paths/~1client-api~1v2~1notifications/get/responses/500/content/application~1json/example/value"
                    }
                }
            },
        ]
    },
]);

class NotificationsHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new NotificationsConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    deleteNotification(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteNotification.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v2/notifications/${encodeURIComponent(String(_id))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deleteNotificationUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteNotification.');
        }
        return `${this.configuration.basePath}/client-api/v2/notifications/${encodeURIComponent(String(_id))}`;
    }
    getCategory(observe = 'body', reportProgress = false, options) {
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/notifications/categories`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getCategoryUrl() {
        return `${this.configuration.basePath}/client-api/v2/notifications/categories`;
    }
    getNotifications(requestParameters, observe = 'body', reportProgress = false, options) {
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        const _fromDate = requestParameters["fromDate"];
        const _toDate = requestParameters["toDate"];
        const _levels = requestParameters["levels"];
        const _read = requestParameters["read"];
        const _origins = requestParameters["origins"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_fromDate !== undefined && _fromDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _fromDate, 'fromDate');
        }
        if (_toDate !== undefined && _toDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _toDate, 'toDate');
        }
        if (_levels) {
            _levels.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'levels');
            });
        }
        if (_read !== undefined && _read !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _read, 'read');
        }
        if (_origins) {
            _origins.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'origins');
            });
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/notifications`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getNotificationsUrl(requestParameters) {
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        const _fromDate = requestParameters["fromDate"];
        const _toDate = requestParameters["toDate"];
        const _levels = requestParameters["levels"];
        const _read = requestParameters["read"];
        const _origins = requestParameters["origins"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        if (_fromDate !== undefined && _fromDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _fromDate, 'fromDate');
        }
        if (_toDate !== undefined && _toDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _toDate, 'toDate');
        }
        if (_levels) {
            _levels.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'levels');
            });
        }
        if (_read !== undefined && _read !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _read, 'read');
        }
        if (_origins) {
            _origins.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'origins');
            });
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/notifications${queryString ? `?${queryString}` : ''}`;
    }
    getNotificationsDigest(observe = 'body', reportProgress = false, options) {
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/notifications/stream/digest`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getNotificationsDigestUrl() {
        return `${this.configuration.basePath}/client-api/v2/notifications/stream/digest`;
    }
    getNotificationsStream(requestParameters, observe = 'body', reportProgress = false, options) {
        const _interval = requestParameters["interval"];
        const _levels = requestParameters["levels"];
        const _origins = requestParameters["origins"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_interval !== undefined && _interval !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _interval, 'interval');
        }
        if (_levels !== undefined && _levels !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _levels, 'levels');
        }
        if (_origins) {
            _origins.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'origins');
            });
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/notifications/stream`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getNotificationsStreamUrl(requestParameters) {
        const _interval = requestParameters["interval"];
        const _levels = requestParameters["levels"];
        const _origins = requestParameters["origins"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_interval !== undefined && _interval !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _interval, 'interval');
        }
        if (_levels !== undefined && _levels !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _levels, 'levels');
        }
        if (_origins) {
            _origins.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'origins');
            });
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/notifications/stream${queryString ? `?${queryString}` : ''}`;
    }
    getUnreadCount(requestParameters, observe = 'body', reportProgress = false, options) {
        const _levels = requestParameters["levels"];
        const _origins = requestParameters["origins"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_levels) {
            _levels.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'levels');
            });
        }
        if (_origins) {
            _origins.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'origins');
            });
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/notifications/unread-count`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getUnreadCountUrl(requestParameters) {
        const _levels = requestParameters["levels"];
        const _origins = requestParameters["origins"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_levels) {
            _levels.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'levels');
            });
        }
        if (_origins) {
            _origins.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'origins');
            });
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/notifications/unread-count${queryString ? `?${queryString}` : ''}`;
    }
    putMarkAsRead(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling putMarkAsRead.');
        }
        const _markAsReadPutRequestBody = requestParameters["markAsReadPutRequestBody"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/notifications/${encodeURIComponent(String(_id))}/read`, _markAsReadPutRequestBody, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    putMarkAsReadUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling putMarkAsRead.');
        }
        const _markAsReadPutRequestBody = requestParameters["markAsReadPutRequestBody"];
        return `${this.configuration.basePath}/client-api/v2/notifications/${encodeURIComponent(String(_id))}/read`;
    }
    putRead(observe = 'body', reportProgress = false, options) {
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/notifications/read`, null, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    putReadUrl() {
        return `${this.configuration.basePath}/client-api/v2/notifications/read`;
    }
}
NotificationsHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: NotificationsHttpService, deps: [{ token: i1.HttpClient }, { token: NOTIFICATIONS_BASE_PATH, optional: true }, { token: NotificationsConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
NotificationsHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: NotificationsHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: NotificationsHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [NOTIFICATIONS_BASE_PATH]
                }] }, { type: NotificationsConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const NotificationsHttpServiceDeleteNotificationMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/notifications/{id}",
        method: "DELETE",
        responses: [
            {
                status: 200,
                body: {}
            },
            {
                status: 403,
                body: {
                    "value": {
                        "$ref": "#/paths/~1client-api~1v2~1notifications/get/responses/403/content/application~1json/example/value"
                    }
                }
            },
            {
                status: 404,
                body: {
                    "value": {
                        "$ref": "#/paths/~1client-api~1v2~1notifications/get/responses/404/content/application~1json/example/value"
                    }
                }
            },
            {
                status: 500,
                body: {
                    "value": {
                        "$ref": "#/paths/~1client-api~1v2~1notifications/get/responses/500/content/application~1json/example/value"
                    }
                }
            },
        ]
    }]);
const NotificationsHttpServiceGetCategoryMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/notifications/categories",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "categories": ["limits", "transactions", "actions"]
                }
            },
            {
                status: 400,
                body: {
                    "value": {
                        "$ref": "#/paths/~1client-api~1v2~1notifications/get/responses/400/content/application~1json/example/value"
                    }
                }
            },
            {
                status: 403,
                body: {
                    "value": {
                        "$ref": "#/paths/~1client-api~1v2~1notifications/get/responses/403/content/application~1json/example/value"
                    }
                }
            },
            {
                status: 500,
                body: {
                    "value": {
                        "$ref": "#/paths/~1client-api~1v2~1notifications/get/responses/500/content/application~1json/example/value"
                    }
                }
            },
        ]
    }]);
const NotificationsHttpServiceGetNotificationsMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/notifications",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "id": "1234-5678-9021",
                        "title": "Account balance changed",
                        "message": "&#128184; Hi John, your saving account balance just went below threshold.  The current balance is EUR 100.00",
                        "level": "INFO",
                        "createdOn": "2020-06-16T08:00:36.000+0000",
                        "read": false,
                        "origin": "Accounts",
                        "routing": {
                            "where-to": "arrangement-view",
                            "data": {
                                "id": "2265e96bfd19",
                                "arrangementId": "dae9ac97-5765-470f-9fa9-e221505791ee"
                            }
                        },
                        "translations": {
                            "en-US": {
                                "title": "Account balance changed",
                                "message": "&#128184; Hi John, your saving account balance just went below threshold.  The current balance is EUR 100.00"
                            },
                            "fr-FR": {
                                "title": "Solde du compte modifié",
                                "message": "&#128184; Bonjour John, le solde de votre compte d'épargne est passé sous le seuil. Le solde actuel est de EUR 100.00"
                            }
                        }
                    }, {
                        "id": "1234-5678-9022",
                        "title": "New transaction",
                        "message": "&#128184; Paid EUR 100.00 Quickbooks monthly subscription fee.",
                        "level": "ALERT",
                        "createdOn": "2020-06-15T14:01:36.000+0000",
                        "read": false,
                        "origin": "Transaction",
                        "routing": {
                            "where-to": "transaction-view",
                            "data": {
                                "id": "e4c26f12e4935",
                                "arrangementId": "67d5e587-b602-4c3e-a3f2-e339d70bfb4b"
                            }
                        }
                    }, {
                        "id": "1234-5678-9023",
                        "title": "Saving goal",
                        "message": "Congrats, you successfully completed your saving goal for Maldives trip.",
                        "level": "INFO",
                        "createdOn": "2020-06-14T14:07:36.000+0000",
                        "expiresOn": "2021-10-06T14:07:36.000+0000",
                        "read": true,
                        "origin": "PFM"
                    }, {
                        "id": "1234-5678-9024",
                        "title": "Pocket Goal &#127881;",
                        "message": "Well done! Don't forget to withdraw your money and create a new pocket for more saving goals",
                        "level": "SUCCESS",
                        "origin": "FinancialInsights",
                        "createdOn": "2020-06-13T12:13:36.000+0000",
                        "read": true,
                        "routing": {
                            "where-to": "pocket-success-view",
                            "data": {
                                "id": "456789123"
                            }
                        }
                    }, {
                        "id": "1234-5678-9025",
                        "title": "Account balance changed",
                        "message": "&#128184; Hi John, your saving account balance just went below threshold.  The current balance is EUR 100.00 ",
                        "level": "INFO",
                        "createdOn": "2020-05-27T14:59:36.000+0000",
                        "link": "http://support.dashboard.backbase.com",
                        "validFrom": "2020-07-28T14:59:36.000+0000",
                        "expiresOn": "2021-09-28T14:59:36.000+0000",
                        "read": false,
                        "origin": "Accounts"
                    }, {
                        "id": "1234-5678-9026",
                        "title": "Payment status change",
                        "message": "Your payment to Acme Corp of EUR 100.00 has changed to rejected.",
                        "level": "INFO",
                        "createdOn": "2020-05-26T15:55:36.000+0000",
                        "read": false,
                        "origin": "Payment",
                        "routing": {
                            "where-to": "payment-view",
                            "data": {
                                "id": "d3d3a955-aa94-44ba-a90c-c9eafab81213"
                            }
                        }
                    }, {
                        "id": "1234-5678-9111",
                        "title": "Payments summary",
                        "message": "You have 4 payments to approve since 2021-05-05 16:00:00.",
                        "level": "INFO",
                        "origin": "Payment",
                        "createdOn": "2020-05-05T08:09:27.000+0000",
                        "read": false,
                        "routing": {
                            "where-to": "payments-list-view"
                        }
                    }, {
                        "id": "1234-5678-9027",
                        "title": "Contact status change",
                        "message": "The status for Contact: Kenya Coffee Beans has changed to rejected.",
                        "level": "INFO",
                        "createdOn": "2020-05-25T16:53:36.000+0000",
                        "link": "http://support.dashboard.backbase.com",
                        "read": false,
                        "origin": "Contact",
                        "routing": {
                            "where-to": "party-view",
                            "data": {
                                "id": "4b9eb675-65ad-4247-8ff4-d549e3b340c6"
                            }
                        }
                    }, {
                        "id": "1234-5678-9028",
                        "title": "Payment to approve",
                        "message": "You have a new payment of EUR 100.00 to approve.",
                        "level": "INFO",
                        "createdOn": "2020-04-24T17:54:36.000+0000",
                        "expiresOn": "2021-09-24T18:54:36.000+0000",
                        "read": true,
                        "origin": "Payment",
                        "routing": {
                            "where-to": "payment-approve-view",
                            "data": {
                                "id": "d3d3a955-aa94-44ba-a90c-c9eafab81213"
                            }
                        }
                    }, {
                        "id": "1234-5678-9029",
                        "title": "Contact to approve",
                        "message": "You have new contact to approve.",
                        "level": "INFO",
                        "createdOn": "2020-04-15T17:13:36.000+0000",
                        "expiresOn": "2021-09-22T18:54:36.000+0000",
                        "read": true,
                        "origin": "Contact",
                        "routing": {
                            "where-to": "party-approve-view",
                            "data": {
                                "id": "4b9eb675-65ad-4247-8ff4-d549e3b340c6"
                            }
                        }
                    }, {
                        "id": "1234-5678-9030",
                        "title": "Planned maintenance",
                        "message": "The server will be down at October 4 due to some problems you should not care about. Sorry for inconvenience. For more information check the {{link}}.",
                        "level": "WARNING",
                        "createdOn": "2020-04-10T19:54:36.000+0000",
                        "link": "http://support.dashboard.backbase.com",
                        "validFrom": "2020-04-17T19:54:36.000+0000",
                        "expiresOn": "2021-09-17T19:54:36.000+0000",
                        "read": false,
                        "origin": "Maintenance"
                    }, {
                        "id": "1234-5678-9031",
                        "title": "Export complete",
                        "message": "The CSV you requested for export is complete and ready to {{link}}",
                        "level": "SUCCESS",
                        "createdOn": "2020-04-09T21:54:36.000+0000",
                        "read": false,
                        "origin": "Audit",
                        "link": "http://support.dashboard.backbase.com"
                    }, {
                        "id": "1234-5678-9032",
                        "title": "Export failed",
                        "message": "The CSV you requested for export failed to complete",
                        "level": "WARNING",
                        "createdOn": "2020-03-12T22:54:36.000+0000",
                        "link": "http://support.dashboard.backbase.com",
                        "read": false,
                        "origin": "Audit"
                    }, {
                        "id": "1234-5678-9033",
                        "title": "Scheduled payment alert",
                        "message": "Don't forget: 50,- will be withdrawn from the account on 2021-10-04",
                        "level": "ALERT",
                        "createdOn": "2020-03-10T14:54:36.000+0000",
                        "expiresOn": "2021-09-10T14:54:36.000+0000",
                        "read": true,
                        "origin": "Security"
                    }, {
                        "id": "1234-5678-9034",
                        "title": "Updates",
                        "message": "You are using an old version of application. Please update it as soon as possible. To get the new version click the {{link}}.",
                        "level": "WARNING",
                        "createdOn": "2020-03-05T13:13:36.000+0000",
                        "link": "http://support.dashboard.backbase.com",
                        "expiresOn": "2021-11-22T15:54:36.000+0000",
                        "read": true,
                        "origin": "Security"
                    }, {
                        "id": "1234-5678-9038",
                        "title": "Sticky message",
                        "message": "Sticky message",
                        "level": "WARNING",
                        "createdOn": "2020-02-16T14:42:36.000+0000",
                        "expiresOn": "2021-10-04T14:54:36.000+0000",
                        "read": true,
                        "origin": "Security"
                    }, {
                        "id": "1234-5678-9039",
                        "title": "Message shown in future (unless it's past June 2021 :)",
                        "message": "Message shown in future (unless it's past June 2021 :)",
                        "level": "WARNING",
                        "createdOn": "2020-02-14T10:48:36.000+0000",
                        "validFrom": "2020-02-15T11:48:36.000+0000",
                        "expiresOn": "2021-06-03T11:48:36.000+0000",
                        "read": false,
                        "origin": "Maintenance"
                    }, {
                        "id": "1234-5678-9040",
                        "title": "Account statement is ready",
                        "message": "Your monthly account statement is ready to download",
                        "level": "SUCCESS",
                        "createdOn": "2020-02-12T14:01:36.000+0000",
                        "read": true,
                        "origin": "AccountStatement"
                    }, {
                        "id": "1234-5678-9041",
                        "title": "New message - Unassigned",
                        "message": "From: J.Smith<br/>Subject: Credit<br/>Topic: Currency",
                        "level": "INFO",
                        "createdOn": "2020-02-10T15:30:36.000+0000",
                        "read": true,
                        "origin": "MessageCenter",
                        "routing": {
                            "where-to": "conversation-view",
                            "data": {
                                "id": "12345"
                            }
                        }
                    }, {
                        "id": "1234-5678-9042",
                        "title": "Saving goal",
                        "message": "Congrats, you successfully completed your saving goal for J.Smith",
                        "level": "INFO",
                        "createdOn": "2020-02-08T15:30:36.000+0000",
                        "link": "http://support.dashboard.backbase.com",
                        "read": true,
                        "origin": "PFM"
                    }, {
                        "id": "1234-5678-9044",
                        "title": "Limit consumption warning",
                        "message": "You are getting close to limits threshold. Please contact Administrator",
                        "level": "WARNING",
                        "createdOn": "2020-02-04T15:30:36.000+0000",
                        "read": true,
                        "origin": "Limits"
                    }]
            },
            {
                status: 400,
                body: {
                    "value": {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                }
            },
            {
                status: 403,
                body: {
                    "value": {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                }
            },
            {
                status: 404,
                body: {
                    "value": {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                }
            },
            {
                status: 500,
                body: {
                    "value": {
                        "message": "Description of error"
                    }
                }
            },
        ]
    }]);
const NotificationsHttpServiceGetNotificationsDigestMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/notifications/stream/digest",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "totalUnreadCount": 9,
                    "countByCategory": [{
                            "category": "Transactions",
                            "unreadCount": 3
                        }, {
                            "category": "Payments",
                            "unreadCount": 2
                        }, {
                            "category": "Security",
                            "unreadCount": 4
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "value": {
                        "$ref": "#/paths/~1client-api~1v2~1notifications/get/responses/400/content/application~1json/example/value"
                    }
                }
            },
            {
                status: 404,
                body: {
                    "value": {
                        "$ref": "#/paths/~1client-api~1v2~1notifications/get/responses/404/content/application~1json/example/value"
                    }
                }
            },
            {
                status: 500,
                body: {
                    "value": {
                        "$ref": "#/paths/~1client-api~1v2~1notifications/get/responses/500/content/application~1json/example/value"
                    }
                }
            },
        ]
    }]);
const NotificationsHttpServiceGetNotificationsStreamMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/notifications/stream",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "id": "455764c6-aa6f-476d-bf63-89c9fb100878",
                        "title": "Unsupported browser",
                        "message": "DBS does not support this browser, please choose recommended {{community}}",
                        "link": "https://community.backbase.com/",
                        "level": "WARNING",
                        "origin": "Security",
                        "createdOn": "2020-06-16T14:55:36.000+0000",
                        "validFrom": "2020-07-04T14:55:36.000+0000",
                        "expiresOn": "2021-07-04T14:55:36.000+0000",
                        "translations": {
                            "en-US": {
                                "title": "Unsupported browser",
                                "message": "DBS does not support this browser, please choose recommended {{community}}",
                                "link": "https://community.backbase.com/en/"
                            },
                            "fr-FR": {
                                "title": "Navigateur non supporté",
                                "message": "DBS ne supporte pas ce navigateur, veuillez choisir recommandé {{communauté}}.",
                                "link": "https://community.backbase.com/fr/"
                            }
                        }
                    }, {
                        "id": "93bf73c9-aa6f-476d-bf63-89c9fb100878",
                        "title": "We found potential security vulnerabilities",
                        "message": "Security vulnerability found, {{learn more about security alerts}}",
                        "link": "https://community.backbase.com/",
                        "level": "ALERT",
                        "origin": "Security",
                        "createdOn": "2020-06-15T14:55:36.000+0000",
                        "validFrom": "2020-07-03T14:55:36.000+0000",
                        "expiresOn": "2021-07-03T14:55:36.000+0000",
                        "translations": {
                            "en-US": {
                                "title": "We found potential security vulnerabilities",
                                "message": "Security vulnerability found, {{learn more about security alerts}}",
                                "link": "https://community.backbase.com/en/"
                            },
                            "fr-FR": {
                                "title": "Nous avons trouvé des vulnérabilités de sécurité potentielles",
                                "message": "Vulnérabilité de sécurité trouvée, {{en savoir plus sur les alertes de sécurité}}",
                                "link": "https://community.backbase.com/fr/"
                            }
                        }
                    }, {
                        "id": "29929ef8-aa6f-476d-bf63-89c9fb100878",
                        "title": "Please, update your email",
                        "message": "Recovery email is not set. To set up, please click {{here}}",
                        "link": "https://community.backbase.com/",
                        "level": "INFO",
                        "origin": "Security",
                        "createdOn": "2020-06-14T14:55:36.000+0000",
                        "validFrom": "2020-07-02T14:55:36.000+0000",
                        "expiresOn": "2021-07-02T14:55:36.000+0000",
                        "translations": {
                            "en-US": {
                                "title": "Please, update your email",
                                "message": "Recovery email is not set. To set up, please click {{here}}",
                                "link": "https://community.backbase.com/en/"
                            },
                            "fr-FR": {
                                "title": "S'il vous plaît, mettez à jour votre email",
                                "message": "Le courrier électronique de récupération n'est pas défini. Pour configurer, s'il vous plaît cliquez sur {{here}}",
                                "link": "https://community.backbase.com/fr/"
                            }
                        }
                    }, {
                        "id": "799c3959-aa6f-476d-bf63-89c9fb100878",
                        "title": "Bill Pay available",
                        "message": "Ability to add payments to a bill is available on {{bill pay menu tab}}",
                        "link": "https://community.backbase.com/",
                        "level": "SUCCESS",
                        "origin": "BillPay",
                        "createdOn": "2020-06-13T14:55:36.000+0000",
                        "validFrom": "2020-07-01T14:55:36.000+0000",
                        "expiresOn": "2021-07-01T14:55:36.000+0000",
                        "routing": {
                            "where-to": "transaction-view",
                            "data": {
                                "id": "123-456-789"
                            }
                        },
                        "translations": {
                            "en-US": {
                                "title": "Bill Pay available",
                                "message": "Ability to add payments to a bill is available on {{bill pay menu tab}}",
                                "link": "https://community.backbase.com/en/"
                            },
                            "fr-FR": {
                                "title": "Bill Pay disponible",
                                "message": "La possibilité d’ajouter des paiements à une facture est disponible à {{facture facture}}",
                                "link": "https://community.backbase.com/fr/"
                            }
                        }
                    }, {
                        "id": "eb4853a9-306f-4a8d-a7be-5093b03e0c32",
                        "title": "Account balance changed",
                        "message": "&#128184; Hi John, your saving account balance just went below threshold.  The current balance is EUR 100.00",
                        "level": "INFO",
                        "origin": "Accounts",
                        "createdOn": "2020-05-30T06:49:46.000+0000",
                        "routing": {
                            "where-to": "arrangement-view",
                            "data": {
                                "id": "2265e96bfd19",
                                "arrangementId": "dae9ac97-5765-470f-9fa9-e221505791ee"
                            }
                        }
                    }, {
                        "id": "2b39e45f-08f7-4a5f-ac5b-be57772a7482",
                        "title": "New transaction",
                        "message": "&#128184; Paid EUR 100.00 Quickbooks monthly subscription fee.",
                        "level": "ALERT",
                        "origin": "PFM",
                        "createdOn": "2020-05-28T08:09:27.000+0000",
                        "routing": {
                            "where-to": "transaction-view",
                            "data": {
                                "id": "e4c26f12e4935",
                                "arrangementId": "67d5e587-b602-4c3e-a3f2-e339d70bfb4b"
                            }
                        }
                    }, {
                        "id": "d72f9307-df48-4111-b79e-21402cdf446a",
                        "title": "Saving goal",
                        "message": "Congrats, you successfully completed your saving goal for Maldives trip.",
                        "level": "INFO",
                        "origin": "PFM",
                        "createdOn": "2020-05-26T08:09:27.000+0000"
                    }, {
                        "id": "da595756-6ef9-40f4-a034-f3f0a695c648",
                        "title": "Account balance changed",
                        "message": "&#128184; Hi John, your saving account balance just went below threshold.  The current balance is EUR 100.00 ",
                        "level": "INFO",
                        "origin": "Accounts",
                        "createdOn": "2020-05-24T22:55:55.000+0000"
                    }, {
                        "id": "746d4549-8792-4765-85fe-90fde7d07d95",
                        "title": "Payment status change",
                        "message": "Your payment to Acme Corp of EUR 100.00 has changed to rejected.",
                        "level": "INFO",
                        "origin": "Payment",
                        "createdOn": "2020-05-22T08:17:41.000+0000",
                        "routing": {
                            "where-to": "payment-view",
                            "data": {
                                "id": "d3d3a955-aa94-44ba-a90c-c9eafab81213"
                            }
                        }
                    }, {
                        "id": "19b11619-f8de-49c9-a795-d4746a6a2dcb",
                        "title": "Contact status change",
                        "message": "The status for Contact: Kenya Coffee Beans has changed to rejected.",
                        "link": "https://community.backbase.com/",
                        "level": "WARNING",
                        "origin": "Contact",
                        "createdOn": "2020-05-20T19:31:52.000+0000",
                        "routing": {
                            "where-to": "party-view",
                            "data": {
                                "id": "4b9eb675-65ad-4247-8ff4-d549e3b340c6"
                            }
                        }
                    }, {
                        "id": "e1430d9f-c6e4-4a2a-b26a-4137d0217a9c",
                        "title": "Payment to approve",
                        "message": "You have a new payment of EUR 100.00 to approve.",
                        "level": "INFO",
                        "origin": "Payment",
                        "createdOn": "2020-05-18T08:09:27.000+0000",
                        "routing": {
                            "where-to": "payment-approve-view",
                            "data": {
                                "id": "d3d3a955-aa94-44ba-a90c-c9eafab81213"
                            }
                        }
                    }, {
                        "id": "e1430d9f-c6e4-4a2a-b26a-4137d0217111",
                        "title": "Payments summary",
                        "message": "You have 4 payments to approve since 2021-05-05 16:00:00.",
                        "level": "INFO",
                        "origin": "Payment",
                        "createdOn": "2020-05-05T08:09:27.000+0000",
                        "routing": {
                            "where-to": "payments-list-view"
                        }
                    }, {
                        "id": "e155c460-bdd6-4371-9cce-0a1189a2125d",
                        "title": "Contact to approve",
                        "message": "You have new contact to approve.",
                        "level": "INFO",
                        "origin": "Contact",
                        "createdOn": "2020-05-16T06:04:28.000+0000",
                        "routing": {
                            "where-to": "party-approve-view",
                            "data": {
                                "id": "4b9eb675-65ad-4247-8ff4-d549e3b340c6"
                            }
                        }
                    }, {
                        "id": "6eb77bed-c571-4cec-bcd5-d21914475ee1",
                        "title": "Planned maintenance",
                        "message": "The server will be down at October 4 due to some problems you should not care about. Sorry for inconvenience. For more information check the {{link}}.",
                        "level": "WARNING",
                        "origin": "Maintenance",
                        "link": "http://support.dashboard.backbase.com",
                        "createdOn": "2020-05-14T08:09:27.000+0000"
                    }, {
                        "id": "2d534c32-290b-4d7f-a730-90a904140457",
                        "title": "Export complete",
                        "message": "The CSV you requested for export is complete and ready to {{link}}",
                        "level": "SUCCESS",
                        "link": "http://support.dashboard.backbase.com",
                        "origin": "Audit",
                        "createdOn": "2020-05-12T18:24:26.000+0000"
                    }, {
                        "id": "60adeeff-f841-4940-a4bc-d7d3d5850517",
                        "title": "Export failed",
                        "message": "The CSV you requested for export failed to complete",
                        "level": "WARNING",
                        "origin": "Audit",
                        "createdOn": "2020-05-10T08:09:27.000+0000"
                    }, {
                        "id": "788d6a1b-f2ab-4755-8444-acb9d677d3e8",
                        "title": "Scheduled payment alert",
                        "message": "Don't forget: 50,- will be withdrawn from the account on 2021-10-04",
                        "level": "INFO",
                        "origin": "Security",
                        "createdOn": "2020-05-08T16:37:59.000+0000"
                    }, {
                        "id": "151b0953-2e09-4421-980a-cb4f5ab213e6",
                        "title": "Updates",
                        "message": "You are using an old version of application. Please update it as soon as possible. To get the new version click the {{link}}.",
                        "level": "WARNING",
                        "origin": "Security",
                        "createdOn": "2020-05-06T08:09:27.000+0000"
                    }, {
                        "id": "d4ba2576-fd6a-47f8-89fe-16a46d67b5b0",
                        "title": "Account statement is ready",
                        "message": "Your monthly account statement is ready to download",
                        "level": "SUCCESS",
                        "origin": "AccountStatement",
                        "createdOn": "2020-05-04T08:09:27.000+0000"
                    }, {
                        "id": "d3c9379e-31e3-45ca-a9a7-2771c1c8b5ff",
                        "title": "New message - Unassigned",
                        "message": "From: J.Smith<br/>Subject: Credit<br/>Topic: Currency",
                        "level": "INFO",
                        "origin": "MessageCenter",
                        "createdOn": "2020-05-02T08:09:27.000+0000",
                        "routing": {
                            "where-to": "conversation-view",
                            "data": {
                                "id": "11-11-11"
                            }
                        }
                    }, {
                        "id": "d72f9307-df48-4111-b79e-21402cdf446b",
                        "title": "Pocket Goal &#127881;",
                        "message": "Well done! Don't forget to withdraw your money and create a new pocket for more saving goals",
                        "level": "SUCCESS",
                        "origin": "FinancialInsights",
                        "createdOn": "2020-01-30T08:09:27.000+0000",
                        "routing": {
                            "where-to": "pocket-success-view",
                            "data": {
                                "id": "456789123"
                            }
                        }
                    }, {
                        "id": "d4ba2576-fd6a-47f8-89fe-16a46d67b5b0",
                        "title": "Saving goal",
                        "message": "Congrats, you successfully completed your saving goal for J.Smith",
                        "level": "INFO",
                        "origin": "PFM",
                        "createdOn": "2020-01-29T08:09:27.000+0000"
                    }, {
                        "id": "d4ba2576-fd6a-47f8-89fe-16a46d67b5b0",
                        "title": "Limit consumption warning",
                        "message": "You are getting close to limits threshold. Please contact Administrator",
                        "level": "WARNING",
                        "origin": "Limits",
                        "createdOn": "2020-01-028T08:09:27.000+0000"
                    }]
            },
            {
                status: 400,
                body: {
                    "value": {
                        "$ref": "#/paths/~1client-api~1v2~1notifications/get/responses/400/content/application~1json/example/value"
                    }
                }
            },
            {
                status: 403,
                body: {
                    "value": {
                        "$ref": "#/paths/~1client-api~1v2~1notifications/get/responses/403/content/application~1json/example/value"
                    }
                }
            },
            {
                status: 404,
                body: {
                    "value": {
                        "$ref": "#/paths/~1client-api~1v2~1notifications/get/responses/404/content/application~1json/example/value"
                    }
                }
            },
            {
                status: 500,
                body: {
                    "value": {
                        "$ref": "#/paths/~1client-api~1v2~1notifications/get/responses/500/content/application~1json/example/value"
                    }
                }
            },
        ]
    }]);
const NotificationsHttpServiceGetUnreadCountMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/notifications/unread-count",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "unread": 10
                }
            },
            {
                status: 400,
                body: {
                    "value": {
                        "$ref": "#/paths/~1client-api~1v2~1notifications/get/responses/400/content/application~1json/example/value"
                    }
                }
            },
            {
                status: 403,
                body: {
                    "value": {
                        "$ref": "#/paths/~1client-api~1v2~1notifications/get/responses/403/content/application~1json/example/value"
                    }
                }
            },
            {
                status: 404,
                body: {
                    "value": {
                        "$ref": "#/paths/~1client-api~1v2~1notifications/get/responses/404/content/application~1json/example/value"
                    }
                }
            },
            {
                status: 500,
                body: {
                    "value": {
                        "$ref": "#/paths/~1client-api~1v2~1notifications/get/responses/500/content/application~1json/example/value"
                    }
                }
            },
        ]
    }]);
const NotificationsHttpServicePutMarkAsReadMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/notifications/{id}/read",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {}
            },
            {
                status: 400,
                body: {
                    "value": {
                        "$ref": "#/paths/~1client-api~1v2~1notifications/get/responses/400/content/application~1json/example/value"
                    }
                }
            },
            {
                status: 403,
                body: {
                    "value": {
                        "$ref": "#/paths/~1client-api~1v2~1notifications/get/responses/403/content/application~1json/example/value"
                    }
                }
            },
            {
                status: 404,
                body: {
                    "value": {
                        "$ref": "#/paths/~1client-api~1v2~1notifications/get/responses/404/content/application~1json/example/value"
                    }
                }
            },
            {
                status: 422,
                body: {
                    "message": "Validation error(s) occurred during creation of the notification",
                    "errorFields": [{
                            "fieldName": "message",
                            "message": "Message must contain '{{link}}' placeholder to replace presented link. Remove link or insert placeholder into your message text"
                        }, {
                            "fieldName": "validFrom",
                            "message": "The notification should be valid from some time in future"
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "value": {
                        "$ref": "#/paths/~1client-api~1v2~1notifications/get/responses/500/content/application~1json/example/value"
                    }
                }
            },
        ]
    }]);
const NotificationsHttpServicePutReadMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/notifications/read",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {}
            },
        ]
    }]);
const NotificationsHttpServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v2/notifications/{id}",
        method: "DELETE",
        responses: [
            {
                status: 200,
                body: {}
            },
            {
                status: 403,
                body: {
                    "value": {
                        "$ref": "#/paths/~1client-api~1v2~1notifications/get/responses/403/content/application~1json/example/value"
                    }
                }
            },
            {
                status: 404,
                body: {
                    "value": {
                        "$ref": "#/paths/~1client-api~1v2~1notifications/get/responses/404/content/application~1json/example/value"
                    }
                }
            },
            {
                status: 500,
                body: {
                    "value": {
                        "$ref": "#/paths/~1client-api~1v2~1notifications/get/responses/500/content/application~1json/example/value"
                    }
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/notifications/categories",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "categories": ["limits", "transactions", "actions"]
                }
            },
            {
                status: 400,
                body: {
                    "value": {
                        "$ref": "#/paths/~1client-api~1v2~1notifications/get/responses/400/content/application~1json/example/value"
                    }
                }
            },
            {
                status: 403,
                body: {
                    "value": {
                        "$ref": "#/paths/~1client-api~1v2~1notifications/get/responses/403/content/application~1json/example/value"
                    }
                }
            },
            {
                status: 500,
                body: {
                    "value": {
                        "$ref": "#/paths/~1client-api~1v2~1notifications/get/responses/500/content/application~1json/example/value"
                    }
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/notifications",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "id": "1234-5678-9021",
                        "title": "Account balance changed",
                        "message": "&#128184; Hi John, your saving account balance just went below threshold.  The current balance is EUR 100.00",
                        "level": "INFO",
                        "createdOn": "2020-06-16T08:00:36.000+0000",
                        "read": false,
                        "origin": "Accounts",
                        "routing": {
                            "where-to": "arrangement-view",
                            "data": {
                                "id": "2265e96bfd19",
                                "arrangementId": "dae9ac97-5765-470f-9fa9-e221505791ee"
                            }
                        },
                        "translations": {
                            "en-US": {
                                "title": "Account balance changed",
                                "message": "&#128184; Hi John, your saving account balance just went below threshold.  The current balance is EUR 100.00"
                            },
                            "fr-FR": {
                                "title": "Solde du compte modifié",
                                "message": "&#128184; Bonjour John, le solde de votre compte d'épargne est passé sous le seuil. Le solde actuel est de EUR 100.00"
                            }
                        }
                    }, {
                        "id": "1234-5678-9022",
                        "title": "New transaction",
                        "message": "&#128184; Paid EUR 100.00 Quickbooks monthly subscription fee.",
                        "level": "ALERT",
                        "createdOn": "2020-06-15T14:01:36.000+0000",
                        "read": false,
                        "origin": "Transaction",
                        "routing": {
                            "where-to": "transaction-view",
                            "data": {
                                "id": "e4c26f12e4935",
                                "arrangementId": "67d5e587-b602-4c3e-a3f2-e339d70bfb4b"
                            }
                        }
                    }, {
                        "id": "1234-5678-9023",
                        "title": "Saving goal",
                        "message": "Congrats, you successfully completed your saving goal for Maldives trip.",
                        "level": "INFO",
                        "createdOn": "2020-06-14T14:07:36.000+0000",
                        "expiresOn": "2021-10-06T14:07:36.000+0000",
                        "read": true,
                        "origin": "PFM"
                    }, {
                        "id": "1234-5678-9024",
                        "title": "Pocket Goal &#127881;",
                        "message": "Well done! Don't forget to withdraw your money and create a new pocket for more saving goals",
                        "level": "SUCCESS",
                        "origin": "FinancialInsights",
                        "createdOn": "2020-06-13T12:13:36.000+0000",
                        "read": true,
                        "routing": {
                            "where-to": "pocket-success-view",
                            "data": {
                                "id": "456789123"
                            }
                        }
                    }, {
                        "id": "1234-5678-9025",
                        "title": "Account balance changed",
                        "message": "&#128184; Hi John, your saving account balance just went below threshold.  The current balance is EUR 100.00 ",
                        "level": "INFO",
                        "createdOn": "2020-05-27T14:59:36.000+0000",
                        "link": "http://support.dashboard.backbase.com",
                        "validFrom": "2020-07-28T14:59:36.000+0000",
                        "expiresOn": "2021-09-28T14:59:36.000+0000",
                        "read": false,
                        "origin": "Accounts"
                    }, {
                        "id": "1234-5678-9026",
                        "title": "Payment status change",
                        "message": "Your payment to Acme Corp of EUR 100.00 has changed to rejected.",
                        "level": "INFO",
                        "createdOn": "2020-05-26T15:55:36.000+0000",
                        "read": false,
                        "origin": "Payment",
                        "routing": {
                            "where-to": "payment-view",
                            "data": {
                                "id": "d3d3a955-aa94-44ba-a90c-c9eafab81213"
                            }
                        }
                    }, {
                        "id": "1234-5678-9111",
                        "title": "Payments summary",
                        "message": "You have 4 payments to approve since 2021-05-05 16:00:00.",
                        "level": "INFO",
                        "origin": "Payment",
                        "createdOn": "2020-05-05T08:09:27.000+0000",
                        "read": false,
                        "routing": {
                            "where-to": "payments-list-view"
                        }
                    }, {
                        "id": "1234-5678-9027",
                        "title": "Contact status change",
                        "message": "The status for Contact: Kenya Coffee Beans has changed to rejected.",
                        "level": "INFO",
                        "createdOn": "2020-05-25T16:53:36.000+0000",
                        "link": "http://support.dashboard.backbase.com",
                        "read": false,
                        "origin": "Contact",
                        "routing": {
                            "where-to": "party-view",
                            "data": {
                                "id": "4b9eb675-65ad-4247-8ff4-d549e3b340c6"
                            }
                        }
                    }, {
                        "id": "1234-5678-9028",
                        "title": "Payment to approve",
                        "message": "You have a new payment of EUR 100.00 to approve.",
                        "level": "INFO",
                        "createdOn": "2020-04-24T17:54:36.000+0000",
                        "expiresOn": "2021-09-24T18:54:36.000+0000",
                        "read": true,
                        "origin": "Payment",
                        "routing": {
                            "where-to": "payment-approve-view",
                            "data": {
                                "id": "d3d3a955-aa94-44ba-a90c-c9eafab81213"
                            }
                        }
                    }, {
                        "id": "1234-5678-9029",
                        "title": "Contact to approve",
                        "message": "You have new contact to approve.",
                        "level": "INFO",
                        "createdOn": "2020-04-15T17:13:36.000+0000",
                        "expiresOn": "2021-09-22T18:54:36.000+0000",
                        "read": true,
                        "origin": "Contact",
                        "routing": {
                            "where-to": "party-approve-view",
                            "data": {
                                "id": "4b9eb675-65ad-4247-8ff4-d549e3b340c6"
                            }
                        }
                    }, {
                        "id": "1234-5678-9030",
                        "title": "Planned maintenance",
                        "message": "The server will be down at October 4 due to some problems you should not care about. Sorry for inconvenience. For more information check the {{link}}.",
                        "level": "WARNING",
                        "createdOn": "2020-04-10T19:54:36.000+0000",
                        "link": "http://support.dashboard.backbase.com",
                        "validFrom": "2020-04-17T19:54:36.000+0000",
                        "expiresOn": "2021-09-17T19:54:36.000+0000",
                        "read": false,
                        "origin": "Maintenance"
                    }, {
                        "id": "1234-5678-9031",
                        "title": "Export complete",
                        "message": "The CSV you requested for export is complete and ready to {{link}}",
                        "level": "SUCCESS",
                        "createdOn": "2020-04-09T21:54:36.000+0000",
                        "read": false,
                        "origin": "Audit",
                        "link": "http://support.dashboard.backbase.com"
                    }, {
                        "id": "1234-5678-9032",
                        "title": "Export failed",
                        "message": "The CSV you requested for export failed to complete",
                        "level": "WARNING",
                        "createdOn": "2020-03-12T22:54:36.000+0000",
                        "link": "http://support.dashboard.backbase.com",
                        "read": false,
                        "origin": "Audit"
                    }, {
                        "id": "1234-5678-9033",
                        "title": "Scheduled payment alert",
                        "message": "Don't forget: 50,- will be withdrawn from the account on 2021-10-04",
                        "level": "ALERT",
                        "createdOn": "2020-03-10T14:54:36.000+0000",
                        "expiresOn": "2021-09-10T14:54:36.000+0000",
                        "read": true,
                        "origin": "Security"
                    }, {
                        "id": "1234-5678-9034",
                        "title": "Updates",
                        "message": "You are using an old version of application. Please update it as soon as possible. To get the new version click the {{link}}.",
                        "level": "WARNING",
                        "createdOn": "2020-03-05T13:13:36.000+0000",
                        "link": "http://support.dashboard.backbase.com",
                        "expiresOn": "2021-11-22T15:54:36.000+0000",
                        "read": true,
                        "origin": "Security"
                    }, {
                        "id": "1234-5678-9038",
                        "title": "Sticky message",
                        "message": "Sticky message",
                        "level": "WARNING",
                        "createdOn": "2020-02-16T14:42:36.000+0000",
                        "expiresOn": "2021-10-04T14:54:36.000+0000",
                        "read": true,
                        "origin": "Security"
                    }, {
                        "id": "1234-5678-9039",
                        "title": "Message shown in future (unless it's past June 2021 :)",
                        "message": "Message shown in future (unless it's past June 2021 :)",
                        "level": "WARNING",
                        "createdOn": "2020-02-14T10:48:36.000+0000",
                        "validFrom": "2020-02-15T11:48:36.000+0000",
                        "expiresOn": "2021-06-03T11:48:36.000+0000",
                        "read": false,
                        "origin": "Maintenance"
                    }, {
                        "id": "1234-5678-9040",
                        "title": "Account statement is ready",
                        "message": "Your monthly account statement is ready to download",
                        "level": "SUCCESS",
                        "createdOn": "2020-02-12T14:01:36.000+0000",
                        "read": true,
                        "origin": "AccountStatement"
                    }, {
                        "id": "1234-5678-9041",
                        "title": "New message - Unassigned",
                        "message": "From: J.Smith<br/>Subject: Credit<br/>Topic: Currency",
                        "level": "INFO",
                        "createdOn": "2020-02-10T15:30:36.000+0000",
                        "read": true,
                        "origin": "MessageCenter",
                        "routing": {
                            "where-to": "conversation-view",
                            "data": {
                                "id": "12345"
                            }
                        }
                    }, {
                        "id": "1234-5678-9042",
                        "title": "Saving goal",
                        "message": "Congrats, you successfully completed your saving goal for J.Smith",
                        "level": "INFO",
                        "createdOn": "2020-02-08T15:30:36.000+0000",
                        "link": "http://support.dashboard.backbase.com",
                        "read": true,
                        "origin": "PFM"
                    }, {
                        "id": "1234-5678-9044",
                        "title": "Limit consumption warning",
                        "message": "You are getting close to limits threshold. Please contact Administrator",
                        "level": "WARNING",
                        "createdOn": "2020-02-04T15:30:36.000+0000",
                        "read": true,
                        "origin": "Limits"
                    }]
            },
            {
                status: 400,
                body: {
                    "value": {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                }
            },
            {
                status: 403,
                body: {
                    "value": {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to an insufficient user quota of {quota}.",
                                "key": "common.api.quota",
                                "context": {
                                    "quota": "someQuota"
                                }
                            }]
                    }
                }
            },
            {
                status: 404,
                body: {
                    "value": {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                }
            },
            {
                status: 500,
                body: {
                    "value": {
                        "message": "Description of error"
                    }
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/notifications/stream/digest",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "totalUnreadCount": 9,
                    "countByCategory": [{
                            "category": "Transactions",
                            "unreadCount": 3
                        }, {
                            "category": "Payments",
                            "unreadCount": 2
                        }, {
                            "category": "Security",
                            "unreadCount": 4
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "value": {
                        "$ref": "#/paths/~1client-api~1v2~1notifications/get/responses/400/content/application~1json/example/value"
                    }
                }
            },
            {
                status: 404,
                body: {
                    "value": {
                        "$ref": "#/paths/~1client-api~1v2~1notifications/get/responses/404/content/application~1json/example/value"
                    }
                }
            },
            {
                status: 500,
                body: {
                    "value": {
                        "$ref": "#/paths/~1client-api~1v2~1notifications/get/responses/500/content/application~1json/example/value"
                    }
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/notifications/stream",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "id": "455764c6-aa6f-476d-bf63-89c9fb100878",
                        "title": "Unsupported browser",
                        "message": "DBS does not support this browser, please choose recommended {{community}}",
                        "link": "https://community.backbase.com/",
                        "level": "WARNING",
                        "origin": "Security",
                        "createdOn": "2020-06-16T14:55:36.000+0000",
                        "validFrom": "2020-07-04T14:55:36.000+0000",
                        "expiresOn": "2021-07-04T14:55:36.000+0000",
                        "translations": {
                            "en-US": {
                                "title": "Unsupported browser",
                                "message": "DBS does not support this browser, please choose recommended {{community}}",
                                "link": "https://community.backbase.com/en/"
                            },
                            "fr-FR": {
                                "title": "Navigateur non supporté",
                                "message": "DBS ne supporte pas ce navigateur, veuillez choisir recommandé {{communauté}}.",
                                "link": "https://community.backbase.com/fr/"
                            }
                        }
                    }, {
                        "id": "93bf73c9-aa6f-476d-bf63-89c9fb100878",
                        "title": "We found potential security vulnerabilities",
                        "message": "Security vulnerability found, {{learn more about security alerts}}",
                        "link": "https://community.backbase.com/",
                        "level": "ALERT",
                        "origin": "Security",
                        "createdOn": "2020-06-15T14:55:36.000+0000",
                        "validFrom": "2020-07-03T14:55:36.000+0000",
                        "expiresOn": "2021-07-03T14:55:36.000+0000",
                        "translations": {
                            "en-US": {
                                "title": "We found potential security vulnerabilities",
                                "message": "Security vulnerability found, {{learn more about security alerts}}",
                                "link": "https://community.backbase.com/en/"
                            },
                            "fr-FR": {
                                "title": "Nous avons trouvé des vulnérabilités de sécurité potentielles",
                                "message": "Vulnérabilité de sécurité trouvée, {{en savoir plus sur les alertes de sécurité}}",
                                "link": "https://community.backbase.com/fr/"
                            }
                        }
                    }, {
                        "id": "29929ef8-aa6f-476d-bf63-89c9fb100878",
                        "title": "Please, update your email",
                        "message": "Recovery email is not set. To set up, please click {{here}}",
                        "link": "https://community.backbase.com/",
                        "level": "INFO",
                        "origin": "Security",
                        "createdOn": "2020-06-14T14:55:36.000+0000",
                        "validFrom": "2020-07-02T14:55:36.000+0000",
                        "expiresOn": "2021-07-02T14:55:36.000+0000",
                        "translations": {
                            "en-US": {
                                "title": "Please, update your email",
                                "message": "Recovery email is not set. To set up, please click {{here}}",
                                "link": "https://community.backbase.com/en/"
                            },
                            "fr-FR": {
                                "title": "S'il vous plaît, mettez à jour votre email",
                                "message": "Le courrier électronique de récupération n'est pas défini. Pour configurer, s'il vous plaît cliquez sur {{here}}",
                                "link": "https://community.backbase.com/fr/"
                            }
                        }
                    }, {
                        "id": "799c3959-aa6f-476d-bf63-89c9fb100878",
                        "title": "Bill Pay available",
                        "message": "Ability to add payments to a bill is available on {{bill pay menu tab}}",
                        "link": "https://community.backbase.com/",
                        "level": "SUCCESS",
                        "origin": "BillPay",
                        "createdOn": "2020-06-13T14:55:36.000+0000",
                        "validFrom": "2020-07-01T14:55:36.000+0000",
                        "expiresOn": "2021-07-01T14:55:36.000+0000",
                        "routing": {
                            "where-to": "transaction-view",
                            "data": {
                                "id": "123-456-789"
                            }
                        },
                        "translations": {
                            "en-US": {
                                "title": "Bill Pay available",
                                "message": "Ability to add payments to a bill is available on {{bill pay menu tab}}",
                                "link": "https://community.backbase.com/en/"
                            },
                            "fr-FR": {
                                "title": "Bill Pay disponible",
                                "message": "La possibilité d’ajouter des paiements à une facture est disponible à {{facture facture}}",
                                "link": "https://community.backbase.com/fr/"
                            }
                        }
                    }, {
                        "id": "eb4853a9-306f-4a8d-a7be-5093b03e0c32",
                        "title": "Account balance changed",
                        "message": "&#128184; Hi John, your saving account balance just went below threshold.  The current balance is EUR 100.00",
                        "level": "INFO",
                        "origin": "Accounts",
                        "createdOn": "2020-05-30T06:49:46.000+0000",
                        "routing": {
                            "where-to": "arrangement-view",
                            "data": {
                                "id": "2265e96bfd19",
                                "arrangementId": "dae9ac97-5765-470f-9fa9-e221505791ee"
                            }
                        }
                    }, {
                        "id": "2b39e45f-08f7-4a5f-ac5b-be57772a7482",
                        "title": "New transaction",
                        "message": "&#128184; Paid EUR 100.00 Quickbooks monthly subscription fee.",
                        "level": "ALERT",
                        "origin": "PFM",
                        "createdOn": "2020-05-28T08:09:27.000+0000",
                        "routing": {
                            "where-to": "transaction-view",
                            "data": {
                                "id": "e4c26f12e4935",
                                "arrangementId": "67d5e587-b602-4c3e-a3f2-e339d70bfb4b"
                            }
                        }
                    }, {
                        "id": "d72f9307-df48-4111-b79e-21402cdf446a",
                        "title": "Saving goal",
                        "message": "Congrats, you successfully completed your saving goal for Maldives trip.",
                        "level": "INFO",
                        "origin": "PFM",
                        "createdOn": "2020-05-26T08:09:27.000+0000"
                    }, {
                        "id": "da595756-6ef9-40f4-a034-f3f0a695c648",
                        "title": "Account balance changed",
                        "message": "&#128184; Hi John, your saving account balance just went below threshold.  The current balance is EUR 100.00 ",
                        "level": "INFO",
                        "origin": "Accounts",
                        "createdOn": "2020-05-24T22:55:55.000+0000"
                    }, {
                        "id": "746d4549-8792-4765-85fe-90fde7d07d95",
                        "title": "Payment status change",
                        "message": "Your payment to Acme Corp of EUR 100.00 has changed to rejected.",
                        "level": "INFO",
                        "origin": "Payment",
                        "createdOn": "2020-05-22T08:17:41.000+0000",
                        "routing": {
                            "where-to": "payment-view",
                            "data": {
                                "id": "d3d3a955-aa94-44ba-a90c-c9eafab81213"
                            }
                        }
                    }, {
                        "id": "19b11619-f8de-49c9-a795-d4746a6a2dcb",
                        "title": "Contact status change",
                        "message": "The status for Contact: Kenya Coffee Beans has changed to rejected.",
                        "link": "https://community.backbase.com/",
                        "level": "WARNING",
                        "origin": "Contact",
                        "createdOn": "2020-05-20T19:31:52.000+0000",
                        "routing": {
                            "where-to": "party-view",
                            "data": {
                                "id": "4b9eb675-65ad-4247-8ff4-d549e3b340c6"
                            }
                        }
                    }, {
                        "id": "e1430d9f-c6e4-4a2a-b26a-4137d0217a9c",
                        "title": "Payment to approve",
                        "message": "You have a new payment of EUR 100.00 to approve.",
                        "level": "INFO",
                        "origin": "Payment",
                        "createdOn": "2020-05-18T08:09:27.000+0000",
                        "routing": {
                            "where-to": "payment-approve-view",
                            "data": {
                                "id": "d3d3a955-aa94-44ba-a90c-c9eafab81213"
                            }
                        }
                    }, {
                        "id": "e1430d9f-c6e4-4a2a-b26a-4137d0217111",
                        "title": "Payments summary",
                        "message": "You have 4 payments to approve since 2021-05-05 16:00:00.",
                        "level": "INFO",
                        "origin": "Payment",
                        "createdOn": "2020-05-05T08:09:27.000+0000",
                        "routing": {
                            "where-to": "payments-list-view"
                        }
                    }, {
                        "id": "e155c460-bdd6-4371-9cce-0a1189a2125d",
                        "title": "Contact to approve",
                        "message": "You have new contact to approve.",
                        "level": "INFO",
                        "origin": "Contact",
                        "createdOn": "2020-05-16T06:04:28.000+0000",
                        "routing": {
                            "where-to": "party-approve-view",
                            "data": {
                                "id": "4b9eb675-65ad-4247-8ff4-d549e3b340c6"
                            }
                        }
                    }, {
                        "id": "6eb77bed-c571-4cec-bcd5-d21914475ee1",
                        "title": "Planned maintenance",
                        "message": "The server will be down at October 4 due to some problems you should not care about. Sorry for inconvenience. For more information check the {{link}}.",
                        "level": "WARNING",
                        "origin": "Maintenance",
                        "link": "http://support.dashboard.backbase.com",
                        "createdOn": "2020-05-14T08:09:27.000+0000"
                    }, {
                        "id": "2d534c32-290b-4d7f-a730-90a904140457",
                        "title": "Export complete",
                        "message": "The CSV you requested for export is complete and ready to {{link}}",
                        "level": "SUCCESS",
                        "link": "http://support.dashboard.backbase.com",
                        "origin": "Audit",
                        "createdOn": "2020-05-12T18:24:26.000+0000"
                    }, {
                        "id": "60adeeff-f841-4940-a4bc-d7d3d5850517",
                        "title": "Export failed",
                        "message": "The CSV you requested for export failed to complete",
                        "level": "WARNING",
                        "origin": "Audit",
                        "createdOn": "2020-05-10T08:09:27.000+0000"
                    }, {
                        "id": "788d6a1b-f2ab-4755-8444-acb9d677d3e8",
                        "title": "Scheduled payment alert",
                        "message": "Don't forget: 50,- will be withdrawn from the account on 2021-10-04",
                        "level": "INFO",
                        "origin": "Security",
                        "createdOn": "2020-05-08T16:37:59.000+0000"
                    }, {
                        "id": "151b0953-2e09-4421-980a-cb4f5ab213e6",
                        "title": "Updates",
                        "message": "You are using an old version of application. Please update it as soon as possible. To get the new version click the {{link}}.",
                        "level": "WARNING",
                        "origin": "Security",
                        "createdOn": "2020-05-06T08:09:27.000+0000"
                    }, {
                        "id": "d4ba2576-fd6a-47f8-89fe-16a46d67b5b0",
                        "title": "Account statement is ready",
                        "message": "Your monthly account statement is ready to download",
                        "level": "SUCCESS",
                        "origin": "AccountStatement",
                        "createdOn": "2020-05-04T08:09:27.000+0000"
                    }, {
                        "id": "d3c9379e-31e3-45ca-a9a7-2771c1c8b5ff",
                        "title": "New message - Unassigned",
                        "message": "From: J.Smith<br/>Subject: Credit<br/>Topic: Currency",
                        "level": "INFO",
                        "origin": "MessageCenter",
                        "createdOn": "2020-05-02T08:09:27.000+0000",
                        "routing": {
                            "where-to": "conversation-view",
                            "data": {
                                "id": "11-11-11"
                            }
                        }
                    }, {
                        "id": "d72f9307-df48-4111-b79e-21402cdf446b",
                        "title": "Pocket Goal &#127881;",
                        "message": "Well done! Don't forget to withdraw your money and create a new pocket for more saving goals",
                        "level": "SUCCESS",
                        "origin": "FinancialInsights",
                        "createdOn": "2020-01-30T08:09:27.000+0000",
                        "routing": {
                            "where-to": "pocket-success-view",
                            "data": {
                                "id": "456789123"
                            }
                        }
                    }, {
                        "id": "d4ba2576-fd6a-47f8-89fe-16a46d67b5b0",
                        "title": "Saving goal",
                        "message": "Congrats, you successfully completed your saving goal for J.Smith",
                        "level": "INFO",
                        "origin": "PFM",
                        "createdOn": "2020-01-29T08:09:27.000+0000"
                    }, {
                        "id": "d4ba2576-fd6a-47f8-89fe-16a46d67b5b0",
                        "title": "Limit consumption warning",
                        "message": "You are getting close to limits threshold. Please contact Administrator",
                        "level": "WARNING",
                        "origin": "Limits",
                        "createdOn": "2020-01-028T08:09:27.000+0000"
                    }]
            },
            {
                status: 400,
                body: {
                    "value": {
                        "$ref": "#/paths/~1client-api~1v2~1notifications/get/responses/400/content/application~1json/example/value"
                    }
                }
            },
            {
                status: 403,
                body: {
                    "value": {
                        "$ref": "#/paths/~1client-api~1v2~1notifications/get/responses/403/content/application~1json/example/value"
                    }
                }
            },
            {
                status: 404,
                body: {
                    "value": {
                        "$ref": "#/paths/~1client-api~1v2~1notifications/get/responses/404/content/application~1json/example/value"
                    }
                }
            },
            {
                status: 500,
                body: {
                    "value": {
                        "$ref": "#/paths/~1client-api~1v2~1notifications/get/responses/500/content/application~1json/example/value"
                    }
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/notifications/unread-count",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "unread": 10
                }
            },
            {
                status: 400,
                body: {
                    "value": {
                        "$ref": "#/paths/~1client-api~1v2~1notifications/get/responses/400/content/application~1json/example/value"
                    }
                }
            },
            {
                status: 403,
                body: {
                    "value": {
                        "$ref": "#/paths/~1client-api~1v2~1notifications/get/responses/403/content/application~1json/example/value"
                    }
                }
            },
            {
                status: 404,
                body: {
                    "value": {
                        "$ref": "#/paths/~1client-api~1v2~1notifications/get/responses/404/content/application~1json/example/value"
                    }
                }
            },
            {
                status: 500,
                body: {
                    "value": {
                        "$ref": "#/paths/~1client-api~1v2~1notifications/get/responses/500/content/application~1json/example/value"
                    }
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/notifications/{id}/read",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {}
            },
            {
                status: 400,
                body: {
                    "value": {
                        "$ref": "#/paths/~1client-api~1v2~1notifications/get/responses/400/content/application~1json/example/value"
                    }
                }
            },
            {
                status: 403,
                body: {
                    "value": {
                        "$ref": "#/paths/~1client-api~1v2~1notifications/get/responses/403/content/application~1json/example/value"
                    }
                }
            },
            {
                status: 404,
                body: {
                    "value": {
                        "$ref": "#/paths/~1client-api~1v2~1notifications/get/responses/404/content/application~1json/example/value"
                    }
                }
            },
            {
                status: 422,
                body: {
                    "message": "Validation error(s) occurred during creation of the notification",
                    "errorFields": [{
                            "fieldName": "message",
                            "message": "Message must contain '{{link}}' placeholder to replace presented link. Remove link or insert placeholder into your message text"
                        }, {
                            "fieldName": "validFrom",
                            "message": "The notification should be valid from some time in future"
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "value": {
                        "$ref": "#/paths/~1client-api~1v2~1notifications/get/responses/500/content/application~1json/example/value"
                    }
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/notifications/read",
        method: "PUT",
        responses: [
            {
                status: 200,
                body: {}
            },
        ]
    },
]);

export { ApprovalStatus, COLLECTION_FORMATS, CONFIG_TOKEN, EmployeeHttpService, EmployeeHttpServiceGetApprovableNotificationMocksProvider, EmployeeHttpServiceMocksProvider, EmployeeHttpServicePostManageNotificationsMocksProvider, EmployeeHttpServicePutApprovableNotificationMocksProvider, NOTIFICATIONS_BASE_PATH, NotificationsApiModule, NotificationsConfiguration, NotificationsHttpService, NotificationsHttpServiceDeleteNotificationMocksProvider, NotificationsHttpServiceGetCategoryMocksProvider, NotificationsHttpServiceGetNotificationsDigestMocksProvider, NotificationsHttpServiceGetNotificationsMocksProvider, NotificationsHttpServiceGetNotificationsStreamMocksProvider, NotificationsHttpServiceGetUnreadCountMocksProvider, NotificationsHttpServiceMocksProvider, NotificationsHttpServicePutMarkAsReadMocksProvider, NotificationsHttpServicePutReadMocksProvider, SeverityLevel, TargetGroup };
//# sourceMappingURL=backbase-notifications-http-ang.js.map
