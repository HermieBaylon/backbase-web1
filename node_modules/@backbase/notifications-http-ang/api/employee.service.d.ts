import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { ApprovableNotification } from '../model/models';
import { NotificationApprovalPutRequestBody } from '../model/models';
import { NotificationApprovalPutResponseBody } from '../model/models';
import { NotificationsEmployeePostResponseBody } from '../model/models';
import { NotificationsPostRequestBody } from '../model/models';
import { NotificationsConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface GetApprovableNotificationRequestParams {
    ["managementId"]: string;
}
export interface PostManageNotificationsRequestParams {
    ["notificationsPostRequestBody"]?: NotificationsPostRequestBody;
}
export interface PutApprovableNotificationRequestParams {
    ["managementId"]: string;
    ["notificationApprovalPutRequestBody"]?: NotificationApprovalPutRequestBody;
}
export declare class EmployeeHttpService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: NotificationsConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: NotificationsConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    getApprovableNotification(requestParameters: GetApprovableNotificationRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<ApprovableNotification>;
    getApprovableNotification(requestParameters: GetApprovableNotificationRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<ApprovableNotification>>;
    getApprovableNotification(requestParameters: GetApprovableNotificationRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<ApprovableNotification>>;
    getApprovableNotificationUrl(requestParameters: GetApprovableNotificationRequestParams): string;
    postManageNotifications(requestParameters: PostManageNotificationsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<NotificationsEmployeePostResponseBody>;
    postManageNotifications(requestParameters: PostManageNotificationsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<NotificationsEmployeePostResponseBody>>;
    postManageNotifications(requestParameters: PostManageNotificationsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<NotificationsEmployeePostResponseBody>>;
    postManageNotificationsUrl(requestParameters: PostManageNotificationsRequestParams): string;
    putApprovableNotification(requestParameters: PutApprovableNotificationRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<NotificationApprovalPutResponseBody>;
    putApprovableNotification(requestParameters: PutApprovableNotificationRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<NotificationApprovalPutResponseBody>>;
    putApprovableNotification(requestParameters: PutApprovableNotificationRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<NotificationApprovalPutResponseBody>>;
    putApprovableNotificationUrl(requestParameters: PutApprovableNotificationRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<EmployeeHttpService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<EmployeeHttpService>;
}
