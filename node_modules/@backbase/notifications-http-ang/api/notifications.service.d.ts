import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { CategoryGetResponseBody } from '../model/models';
import { MarkAsReadPutRequestBody } from '../model/models';
import { NotificationsDigestGetResponseBody } from '../model/models';
import { NotificationsGetResponseBody } from '../model/models';
import { NotificationsStreamGetResponseBody } from '../model/models';
import { UnreadCountGetResponseBody } from '../model/models';
import { NotificationsConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface DeleteNotificationRequestParams {
    ["id"]: string;
}
export interface GetNotificationsRequestParams {
    ["from"]?: number;
    ["size"]?: number;
    ["fromDate"]?: string;
    ["toDate"]?: string;
    ["levels"]?: Array<string>;
    ["read"]?: string;
    ["origins"]?: Array<string>;
}
export interface GetNotificationsStreamRequestParams {
    ["interval"]?: number;
    ["levels"]?: string;
    ["origins"]?: Array<string>;
}
export interface GetUnreadCountRequestParams {
    ["levels"]?: Array<string>;
    ["origins"]?: Array<string>;
}
export interface PutMarkAsReadRequestParams {
    ["id"]: string;
    ["markAsReadPutRequestBody"]?: MarkAsReadPutRequestBody;
}
export declare class NotificationsHttpService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: NotificationsConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: NotificationsConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    deleteNotification(requestParameters: DeleteNotificationRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    deleteNotification(requestParameters: DeleteNotificationRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    deleteNotification(requestParameters: DeleteNotificationRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    deleteNotificationUrl(requestParameters: DeleteNotificationRequestParams): string;
    getCategory(observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<CategoryGetResponseBody>;
    getCategory(observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<CategoryGetResponseBody>>;
    getCategory(observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<CategoryGetResponseBody>>;
    getCategoryUrl(): string;
    getNotifications(requestParameters: GetNotificationsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<NotificationsGetResponseBody>>;
    getNotifications(requestParameters: GetNotificationsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<NotificationsGetResponseBody>>>;
    getNotifications(requestParameters: GetNotificationsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<NotificationsGetResponseBody>>>;
    getNotificationsUrl(requestParameters: GetNotificationsRequestParams): string;
    getNotificationsDigest(observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<NotificationsDigestGetResponseBody>;
    getNotificationsDigest(observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<NotificationsDigestGetResponseBody>>;
    getNotificationsDigest(observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<NotificationsDigestGetResponseBody>>;
    getNotificationsDigestUrl(): string;
    getNotificationsStream(requestParameters: GetNotificationsStreamRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<NotificationsStreamGetResponseBody>>;
    getNotificationsStream(requestParameters: GetNotificationsStreamRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<NotificationsStreamGetResponseBody>>>;
    getNotificationsStream(requestParameters: GetNotificationsStreamRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<NotificationsStreamGetResponseBody>>>;
    getNotificationsStreamUrl(requestParameters: GetNotificationsStreamRequestParams): string;
    getUnreadCount(requestParameters: GetUnreadCountRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<UnreadCountGetResponseBody>;
    getUnreadCount(requestParameters: GetUnreadCountRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<UnreadCountGetResponseBody>>;
    getUnreadCount(requestParameters: GetUnreadCountRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<UnreadCountGetResponseBody>>;
    getUnreadCountUrl(requestParameters: GetUnreadCountRequestParams): string;
    putMarkAsRead(requestParameters: PutMarkAsReadRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    putMarkAsRead(requestParameters: PutMarkAsReadRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    putMarkAsRead(requestParameters: PutMarkAsReadRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    putMarkAsReadUrl(requestParameters: PutMarkAsReadRequestParams): string;
    putRead(observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    putRead(observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    putRead(observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    putReadUrl(): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<NotificationsHttpService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<NotificationsHttpService>;
}
