import * as i0 from '@angular/core';
import { NgModule, Injectable, Directive, HostListener, EventEmitter, TemplateRef, Component, Input, Output, ViewChild, forwardRef, HostBinding } from '@angular/core';
import * as i9 from '@angular/common';
import { CommonModule } from '@angular/common';
import { Subject, of, forkJoin, combineLatest, BehaviorSubject, EMPTY } from 'rxjs';
import * as i1$1 from '@angular/forms';
import { FormControl, ReactiveFormsModule, NG_VALUE_ACCESSOR, NG_VALIDATORS, FormsModule } from '@angular/forms';
import { map, catchError, takeUntil, take, debounceTime, distinctUntilChanged, finalize, pluck, shareReplay, switchMap } from 'rxjs/operators';
import { BbTemplate } from '@backbase/foundation-ang/core';
import * as i2 from '@backbase/ui-ang/notification';
import * as i1 from '@backbase/data-ang/limits';
import * as i1$2 from '@backbase/ui-ang/modal';
import { ModalModule } from '@backbase/ui-ang/modal';
import * as i3 from '@backbase/data-ang/accesscontrol';
import * as i4 from '@backbase/ui-ang/header';
import { HeaderModule } from '@backbase/ui-ang/header';
import * as i3$1 from '@backbase/ui-ang/icon';
import { IconModule } from '@backbase/ui-ang/icon';
import * as i6 from '@backbase/ui-ang/ellipsis';
import { EllipsisModule } from '@backbase/ui-ang/ellipsis';
import * as i7 from '@backbase/ui-ang/dropdown-single-select';
import { DropdownSingleSelectModule } from '@backbase/ui-ang/dropdown-single-select';
import * as i8 from '@backbase/ui-ang/loading-indicator';
import { LoadingIndicatorModule } from '@backbase/ui-ang/loading-indicator';
import * as i2$2 from '@backbase/ui-ang/alert';
import { AlertModule } from '@backbase/ui-ang/alert';
import * as i2$1 from '@backbase/ui-ang/amount';
import { AmountModule } from '@backbase/ui-ang/amount';
import * as i6$1 from '@backbase/ui-ang/tooltip-directive';
import { TooltipModule } from '@backbase/ui-ang/tooltip-directive';
import * as i7$1 from '@backbase/ui-ang/button';
import { ButtonModule } from '@backbase/ui-ang/button';
import * as i8$1 from '@backbase/ui-ang/keyboard-click-directive';
import { KeyboardClickModule } from '@backbase/ui-ang/keyboard-click-directive';
import * as i6$2 from '@backbase/ui-ang/currency-input';
import { CurrencyInputModule } from '@backbase/ui-ang/currency-input';
import * as i7$2 from '@backbase/ui-ang/input-validation-message';
import { InputValidationMessageModule } from '@backbase/ui-ang/input-validation-message';
import * as i8$2 from '@backbase/ui-ang/load-button';
import { LoadButtonModule } from '@backbase/ui-ang/load-button';
import { __rest } from 'tslib';
import * as i2$3 from '@ng-bootstrap/ng-bootstrap';
import { NgbTimeAdapter, NgbTimepickerModule } from '@ng-bootstrap/ng-bootstrap';
import { defaultSize, InputBaseComponent } from '@backbase/ui-ang/base-classes';
import * as i1$3 from '@backbase/data-ang/contact-manager';
import * as i2$4 from '@backbase/data-ang/arrangements';
import '@angular/localize/init';

class AccessgroupCommonModule {
}
/** @nocollapse */ AccessgroupCommonModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccessgroupCommonModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ AccessgroupCommonModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccessgroupCommonModule, imports: [CommonModule] });
/** @nocollapse */ AccessgroupCommonModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccessgroupCommonModule, imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccessgroupCommonModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                }]
        }] });

const defaultGetGroupForBusinessFunction = (
//@ts-ignore
businessFunction, defaultGroup) => defaultGroup;
const defaultOrderedBusinessFunctionGroups = [
    'accountsAndPayments',
    'beneficiaries',
    'actions',
    'messagesAndNotifications',
    'entitlements',
    'identityManagement',
    'supportAccess',
    'flow',
    'employee',
    'portfolio',
    'content',
    'engagements',
    'realTimeCommunication',
    'financeManagement',
    'communicationPreferences',
    'remoteConfig',
    'other',
];
const defaultBusinessFunctionGroups = {
    accountsAndPayments: [
        'Product Summary',
        'Transactions',
        'Payments',
        'Arrangements',
        'Billpay',
        'Account Statements',
        'Batch',
        'Cash Flow',
        'Pockets',
        'External Accounts',
    ],
    beneficiaries: ['Contacts'],
    actions: ['Actions'],
    messagesAndNotifications: ['Message Center', 'Notifications', 'Actions'],
    entitlements: [
        'Legal Entity',
        'User',
        'Service Agreement',
        'Entitlements',
        'Limits',
        'Approvals',
        'Audit',
        'User Profiles',
        'Manage Authorized Users',
    ],
    identityManagement: ['Identities', 'Device'],
    supportAccess: ['Support Access'],
    flow: ['Flow'],
    employee: ['Employee'],
    portfolio: ['Portfolio'],
    content: ['Content'],
    engagements: ['Engagements'],
    realTimeCommunication: ['Real Time Communications'],
    financeManagement: ['Personal Finance Management'],
    communicationPreferences: ['Communication Preferences'],
    remoteConfig: ['Remote Config'],
    other: [],
};

class BusinessFunctionGroupService {
    constructor(customBusinessFunctionGroup, orderedBusinessFunctionGroups) {
        this.customBusinessFunctionGroup = customBusinessFunctionGroup;
        this.orderedBusinessFunctionGroups = orderedBusinessFunctionGroups;
    }
    convertToGroups(allBusinessFunctions) {
        const businessFunctionsByGroup = allBusinessFunctions.reduce((memo, item) => {
            const customGroupType = this.getGroupForBusinessFunction(item);
            return Object.assign(Object.assign({}, memo), { [customGroupType]: [...(memo[customGroupType] || []), item] });
        }, {});
        return Object.entries(businessFunctionsByGroup)
            .map(([groupKey, businessFunctions]) => ({
            groupKey,
            businessFunctions,
        }))
            .sort((a, b) => this.orderedBusinessFunctionGroups.indexOf(a.groupKey) -
            this.orderedBusinessFunctionGroups.indexOf(b.groupKey));
    }
    getGroupForBusinessFunction(item) {
        const defaultGroupType = defaultOrderedBusinessFunctionGroups.find(groupType => defaultBusinessFunctionGroups[groupType].includes(item.resource)) || 'other';
        return this.customBusinessFunctionGroup(item, defaultGroupType);
    }
    attachGroupKeyToBusinessFunction(businessFunctions) {
        return businessFunctions
            .map((bf) => (Object.assign(Object.assign({}, bf), { groupKey: this.getGroupForBusinessFunction(bf) })))
            .sort((a, b) => this.orderedBusinessFunctionGroups.indexOf(a.groupKey) -
            this.orderedBusinessFunctionGroups.indexOf(b.groupKey));
    }
}

class AccessgroupCanDeactivateGuardService {
    canDeactivate(component) {
        return component.openDiscardChangesModal();
    }
}
/** @nocollapse */ AccessgroupCanDeactivateGuardService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccessgroupCanDeactivateGuardService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ AccessgroupCanDeactivateGuardService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccessgroupCanDeactivateGuardService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccessgroupCanDeactivateGuardService, decorators: [{
            type: Injectable
        }] });

class DiscardChangesBaseComponent {
    constructor() {
        this.isDiscardChangesModalOpen = false;
        this.discardSubject = new Subject();
    }
    resolveDiscardChanges(value) {
        this.isDiscardChangesModalOpen = false;
        this.discardSubject.next(value);
    }
    onWindowUnload($event) {
        if (this.shouldPreventNavigation() && !this.isDiscardChangesModalOpen) {
            $event.returnValue = true;
        }
    }
    openDiscardChangesModal() {
        if (this.shouldPreventNavigation()) {
            this.isDiscardChangesModalOpen = true;
            return this.discardSubject;
        }
        return of(true);
    }
}
/** @nocollapse */ DiscardChangesBaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DiscardChangesBaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ DiscardChangesBaseComponent.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: DiscardChangesBaseComponent, host: { listeners: { "window:beforeunload": "onWindowUnload($event)" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DiscardChangesBaseComponent, decorators: [{
            type: Directive
        }], propDecorators: { onWindowUnload: [{
                type: HostListener,
                args: ['window:beforeunload', ['$event']]
            }] } });

const AMOUNT_DELIMETER_REG_EXP = /[,. ]/g;

const PERIODIC_LIMITS_BOUNDS = 'periodic-limits-bounds';
const TRANSACTIONAL_LIMITS_BOUNDS = 'transactional-limits-bound';
const BOUNDTS_TYPE = {
    DAILY: 'daily',
    WEEKLY: 'weekly',
    MONTHLY: 'monthly',
    QUARTERLY: 'quarterly',
    YEARLY: 'yearly',
};

/**
 * Parse response from consumption API into separate regular/shadow limits and regular/shadow consumption
 */
const getLimitsAndConsumptionItem = (limitData) => {
    let regularLimit, regularConsumptions, shadowLimit, shadowConsumptions;
    limitData.forEach((limit) => {
        if (limit.limit && !limit.limit.shadow) {
            regularLimit = limit.limit;
            regularConsumptions = limit.consumptions;
        }
        else if (limit.limit && limit.limit.shadow) {
            shadowLimit = limit.limit;
            shadowConsumptions = limit.consumptions;
        }
    });
    return { regularLimit, regularConsumptions, shadowLimit, shadowConsumptions };
};
/**
 * Get transactional limit amount
 */
const getTransactionalLimit = (limitItem) => {
    const limit = limitItem && limitItem[TRANSACTIONAL_LIMITS_BOUNDS];
    return { amount: limit && limit.amount };
};
/**
 * Get periodical limit amount
 */
const getPeriodicalLimit = (limitItem, key, isCustom) => {
    const periodicLimits = limitItem && limitItem[PERIODIC_LIMITS_BOUNDS];
    let limitAmount;
    if (periodicLimits) {
        if (isCustom) {
            const customLimit = periodicLimits.customPeriods && periodicLimits.customPeriods.find((item) => item.period === key);
            limitAmount = customLimit && customLimit.amount;
        }
        else {
            limitAmount = periodicLimits[key];
        }
    }
    return { amount: limitAmount };
};
/**
 * Get consumption amount by periodic key
 */
const getConsumptionAmount = (consumptions, key, isCustom) => {
    let consumptionAmount;
    if (consumptions) {
        if (isCustom) {
            const customLimit = consumptions.customPeriods && consumptions.customPeriods.find((item) => item.period === key);
            consumptionAmount = customLimit && customLimit.amount;
        }
        else {
            consumptionAmount = consumptions[key];
        }
    }
    return consumptionAmount;
};
/**
 * Get if limit included any shadow limit amount
 */
const getIfLimitHasShadow = (limits) => {
    for (let i = 0; i < limits.length; i++) {
        if (limits[i].shadow && limits[i].shadow.amount) {
            return true;
        }
    }
    return false;
};
/**
 * Get limit is unlimited
 */
const getLimitUnlimited = (limits) => {
    for (let i = 0; i < limits.length; i++) {
        if ((limits[i].shadow && limits[i].shadow.amount) || (limits[i].regular && limits[i].regular.amount)) {
            return false;
        }
    }
    return true;
};
/**
 * Map period keys into limit bound keys
 */
const getLimitsPeriodsKey = (key) => {
    return BOUNDTS_TYPE[key] ? { key: BOUNDTS_TYPE[key], isCustom: false } : { key, isCustom: true };
};
/**
 * Get limit currency
 */
const getLimitCurrency = (limitData) => {
    if (limitData && limitData.length) {
        const limitItem = limitData[0];
        return limitItem.limit && limitItem.limit.currency;
    }
    return undefined;
};
/**
 * Get regular/shadow limit ids
 */
const getLimitsIds = (limitData) => {
    let regular, shadow;
    limitData.forEach((limit) => {
        if (limit.limit && !limit.limit.shadow) {
            regular = limit.limit.uuid;
        }
        else if (limit.limit && limit.limit.shadow) {
            shadow = limit.limit.uuid;
        }
    });
    return { regular, shadow };
};
/**
 * Mapper for converting periods list and limit data into object with array of LimitBound
 */
const periodLimitsConsumptionMapper = (periods, limitConsumptionsData) => {
    const limitBounds = [];
    const { regularLimit, regularConsumptions, shadowLimit, shadowConsumptions } = getLimitsAndConsumptionItem(limitConsumptionsData);
    limitBounds.push({
        period: TRANSACTIONAL_LIMITS_BOUNDS,
        custom: false,
        regular: getTransactionalLimit(regularLimit),
        shadow: getTransactionalLimit(shadowLimit),
    });
    periods.forEach(period => {
        const { key, isCustom } = getLimitsPeriodsKey(period.name);
        const regularLimitItem = getPeriodicalLimit(regularLimit, key, isCustom);
        const shadowLimitItem = getPeriodicalLimit(shadowLimit, key, isCustom);
        const regularConsumptionItem = getConsumptionAmount(regularConsumptions, key, isCustom);
        const shadowConsumptionItem = getConsumptionAmount(shadowConsumptions, key, isCustom);
        limitBounds.push({
            period: key,
            custom: isCustom,
            regular: regularLimitItem,
            shadow: shadowLimitItem,
            regularConsumption: regularConsumptionItem,
            shadowConsumption: shadowConsumptionItem,
        });
    });
    return {
        uuid: getLimitsIds(limitConsumptionsData),
        currency: getLimitCurrency(limitConsumptionsData),
        limitBounds,
    };
};
const lookUpObject = (entity, id) => {
    return {
        lookupKeys: [
            {
                eref: id,
                etype: entity,
            },
        ],
    };
};
const checkPermission = (permission) => {
    return (permission.regularLimit.edit ||
        permission.regularLimit.view ||
        permission.regularLimit.create ||
        permission.shadowLimit.edit ||
        permission.shadowLimit.view ||
        permission.shadowLimit.create);
};
const prepareLimitObj = (groupedLimit, periods, groupedRetrivalLimit) => {
    let limit;
    if (groupedLimit) {
        limit = Object.assign(Object.assign({}, periodLimitsConsumptionMapper(periods, groupedLimit)), { created: true });
        limit.isHasShadow = getIfLimitHasShadow(limit.limitBounds);
        limit.isUnlimited = getLimitUnlimited(limit.limitBounds);
    }
    else {
        limit = Object.assign(Object.assign({}, periodLimitsConsumptionMapper(periods, [])), { created: false });
    }
    if (groupedRetrivalLimit) {
        groupedRetrivalLimit.forEach((item) => {
            if (item.approvalId) {
                limit.pending = true;
            }
        });
    }
    return limit;
};

class LimitsService {
    constructor(limitsService) {
        this.limitsService = limitsService;
        this.getLimitsPeriods$ = this.limitsService.getSupportedPeriods();
    }
    getLimitsConsumptionsRecord(currentLimitsConsumptionsRetrievalPostRequestBody) {
        return this.limitsService.postCurrentLimitsConsumptionsRetrieval({
            currentLimitsConsumptionsRetrievalPostRequestBody,
        });
    }
    getLimitsRetrievalRecord(limitsRetrievalPostRequestBody) {
        return this.limitsService.postLimitsRetrieval({
            limitsRetrievalPostRequestBody,
        });
    }
    createNewLimit(createLimitRequestBody) {
        return this.limitsService.postLimits({
            createLimitRequestBody,
        });
    }
    updateLimit(uuid, updateLimitRequestBody) {
        return this.limitsService.putLimitByUuid({
            uuid,
            updateLimitRequestBody,
        });
    }
    /**
     * Return grouped object by type of response
     * @param data: any - object for grouping
     * @param groupByEref: string - type of gentry point
     * @param dataType: string - type of grouped data
     */
    groupedFunc(data, groupByEref, dataType) {
        switch (dataType) {
            case 'consumption':
                return data.reduce((h, obj) => Object.assign(h, {
                    [this.getUniqueKeyConsumption(groupByEref, obj)]: (h[this.getUniqueKeyConsumption(groupByEref, obj)] || []).concat(obj),
                }), {});
            case 'lookUp':
                return data.reduce((h, obj) => Object.assign(h, {
                    [this.getUniqueKeyLookUpKey(groupByEref, obj)]: (h[this.getUniqueKeyLookUpKey(groupByEref, obj)] || []).concat(obj),
                }), {});
            default:
                return data.reduce((h, obj) => Object.assign(h, {
                    [this.getUniqueKeyRetrival(groupByEref, obj)]: (h[this.getUniqueKeyRetrival(groupByEref, obj)] || []).concat(obj),
                }), {});
        }
    }
    /**
     * Return unique key for grouping consumption limit response
     * @param type: string - type of entry point
     * @param obj: any - response object for consumption limit
     */
    getUniqueKeyConsumption(type, obj) {
        switch (type) {
            case 'user':
                return obj.limit['user-BBID'];
            case 'perm':
                let unitPermKey = '';
                if (obj.limit.entities) {
                    for (let i = 0; i < obj.limit.entities.length; i++) {
                        if (obj.limit.entities[i].etype === 'PRV' || obj.limit.entities[i].etype === 'FUN') {
                            unitPermKey = unitPermKey + obj.limit.entities[i].eref;
                        }
                    }
                }
                return unitPermKey;
            case 'func':
                let unitFuncKey = '';
                if (obj.limit.entities) {
                    for (let i = 0; i < obj.limit.entities.length; i++) {
                        if (obj.limit.entities[i].etype === 'PRV' ||
                            obj.limit.entities[i].etype === 'FUN' ||
                            obj.limit.entities[i].etype === 'FAG') {
                            unitFuncKey = unitFuncKey + obj.limit.entities[i].eref;
                        }
                    }
                }
                return unitFuncKey;
            default:
                return obj.limit.entities[0].eref;
        }
    }
    /**
     * Return unique key for grouping lookUp key from request
     * @param type: string - type of entry point
     * @param obj: any - lookUp key from request
     */
    getUniqueKeyLookUpKey(type, obj) {
        switch (type) {
            case 'user':
                return obj['user-BBID'];
            case 'perm':
                let unitPermKey = '';
                for (let i = 0; i < obj.lookupKeys.length; i++) {
                    if (obj.lookupKeys[i].etype === 'PRV' || obj.lookupKeys[i].etype === 'FUN') {
                        unitPermKey = unitPermKey + obj.lookupKeys[i].eref;
                    }
                }
                return unitPermKey;
            case 'func':
                let unitFuncKey = '';
                for (let i = 0; i < obj.lookupKeys.length; i++) {
                    if (obj.lookupKeys[i].etype === 'PRV' ||
                        obj.lookupKeys[i].etype === 'FUN' ||
                        obj.lookupKeys[i].etype === 'FAG') {
                        unitFuncKey = unitFuncKey + obj.lookupKeys[i].eref;
                    }
                }
                return unitFuncKey;
            default:
                return obj.lookupKeys[0].eref;
        }
    }
    /**
     * Return unique key for grouping retrival limit response
     * @param type: string - type of entry point
     * @param obj: any - response object for retrival limit
     */
    getUniqueKeyRetrival(type, obj) {
        switch (type) {
            case 'user':
                return obj['user-BBID'];
            case 'perm':
                let unitPermKey = '';
                for (let i = 0; i < obj.entities.length; i++) {
                    if (obj.entities[i].etype === 'PRV' || obj.entities[i].etype === 'FUN') {
                        unitPermKey = unitPermKey + obj.entities[i].eref;
                    }
                }
                return unitPermKey;
            case 'func':
                let unitFuncKey = '';
                for (let i = 0; i < obj.entities.length; i++) {
                    if (obj.entities[i].etype === 'PRV' || obj.entities[i].etype === 'FUN' || obj.entities[i].etype === 'FAG') {
                        unitFuncKey = unitFuncKey + obj.entities[i].eref;
                    }
                }
                return unitFuncKey;
            default:
                return obj.entities[0].eref;
        }
    }
    /**
     * Return stream of limitsData
     * @param limitsRetrievalOptions
     * @param groupByEref
     * @param itemsPerRequest - number of items per request (by default 100)
     */
    getLimitsData(limitsRetrievalOptions, groupByEref = '', itemsPerRequest = 100) {
        if (limitsRetrievalOptions.length > itemsPerRequest) {
            const limitsRetrievalOptionsArray = this.chunk(limitsRetrievalOptions, itemsPerRequest || 0);
            return forkJoin(limitsRetrievalOptionsArray.map(limitsRetrievalOption => this._getLimitsData(limitsRetrievalOption, groupByEref))).pipe(map(limitsDataChunks => {
                const limitsData = {};
                limitsDataChunks.map(limitsDataChunk => Object.assign(limitsData, limitsDataChunk));
                return limitsData;
            }));
        }
        return this._getLimitsData(limitsRetrievalOptions, groupByEref);
    }
    _getLimitsData(limitsRetrievalOptions, groupByEref = '') {
        return combineLatest([
            this.getLimitsPeriods$,
            this.getLimitsRetrievalRecord({ limitsRetrievalOptions: limitsRetrievalOptions }),
            this.getLimitsConsumptionsRecord({ limitsRetrievalOptions: limitsRetrievalOptions }),
        ]).pipe(map(([periods, limitRetrievalsData, limitConsumptionsData]) => {
            const limitData = {};
            const groupedLimit = this.groupedFunc(limitConsumptionsData, groupByEref, 'consumption');
            const groupedRetrivalLimit = this.groupedFunc(limitRetrievalsData, groupByEref, '');
            const groupedLookUpKey = this.groupedFunc(limitsRetrievalOptions, groupByEref, 'lookUp');
            for (const key in groupedLookUpKey) {
                if (groupedLookUpKey.hasOwnProperty(key)) {
                    limitData[key] = prepareLimitObj(groupedLimit[key], periods, groupedRetrivalLimit[key]);
                }
            }
            return limitData;
        }));
    }
    /**
     * Util function to divide array into array of arrays of given size
     * @param arr - original array
     * @param len - small arrays length
     */
    chunk(arr, len) {
        const chunks = [];
        const n = arr.length;
        let i = 0;
        while (i < n) {
            chunks.push(arr.slice(i, (i += len)));
        }
        return chunks;
    }
}
/** @nocollapse */ LimitsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LimitsService, deps: [{ token: i1.LimitsHttpService }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ LimitsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LimitsService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LimitsService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.LimitsHttpService }]; } });

class CurrencyService {
    constructor(limitService) {
        this.limitService = limitService;
    }
    currencyInfo() {
        return this.limitService.getCurrency().pipe(map((res) => {
            return res ? res['currency-registry'] : {};
        }));
    }
}
/** @nocollapse */ CurrencyService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CurrencyService, deps: [{ token: i1.LimitsHttpService }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ CurrencyService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CurrencyService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CurrencyService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.LimitsHttpService }]; } });

var LimitTypes;
(function (LimitTypes) {
    LimitTypes["LE_BF_PRIVILEGE"] = "LE_BF_PRV";
    LimitTypes["LE_USER"] = "LE_USER";
    LimitTypes["USER_JR_BF_PRIVILEGE"] = "USER_JR_BF_PRV";
    LimitTypes["SA"] = "SA";
    LimitTypes["SA_USER"] = "SA_USER";
    LimitTypes["SA_LE"] = "SA_LE";
    LimitTypes["SA_JR_BF_PRIVILEGE"] = "SA_JR_BF_PRV";
})(LimitTypes || (LimitTypes = {}));

class ManageLimitsModalHeaderComponent {
    constructor(currencyListService, notificationService, serviceAgreementHttpService, legalEntitiesService) {
        this.currencyListService = currencyListService;
        this.notificationService = notificationService;
        this.serviceAgreementHttpService = serviceAgreementHttpService;
        this.legalEntitiesService = legalEntitiesService;
        /**
         * Currency drop down form control
         */
        this.currencyControl = new FormControl();
        /**
         * Close modal window event.
         * Propagate event when modal window should be closed.
         */
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.close = new EventEmitter();
        /**
         * Limit types enumeration
         */
        this.LimitTypes = LimitTypes;
        /**
         * Limit types stream
         */
        this.limitType$$ = of(true);
        /**
         * Service agreement name stream
         */
        this.saName$$ = of(undefined);
        /**
         * Legal entity name stream
         */
        this.leName$$ = of(undefined);
        /**
         * Show notification stream
         */
        this.showNotification$ = new Subject();
        /**
         * Unsubscribe stream
         */
        this.destroy$ = new Subject();
        /**
         * Currency Info stream
         */
        this.currencyInfo$ = this.currencyListService
            .currencyInfo()
            .pipe(map((currencyInfo) => {
            if (!this.currency) {
                // show error message if no default currency
                if (currencyInfo && currencyInfo.defaultCurrency) {
                    this.currencyControl.setValue(currencyInfo.defaultCurrency);
                }
                else {
                    this.closeModal();
                }
            }
            return currencyInfo;
        }), 
        // show error message if currency is not set already
        catchError(() => {
            if (!this.currency) {
                this.closeModal();
            }
            return of(false);
        }));
    }
    ngOnInit() {
        this.saName$$ = this.serviceAgreementId ? this.serviceAgreementHttpService
            .getServiceAgreementItem({ serviceAgreementId: this.serviceAgreementId })
            .pipe(map(sa => sa.name), catchError(() => of(undefined))) : of(this.subTitleSAName);
        this.leName$$ = this.legalEntityId ? this.legalEntitiesService
            .getLegalEntityById({ legalEntityId: this.legalEntityId })
            .pipe(map(le => le.name), catchError(() => of(undefined))) : of(this.subTitleLEName);
        this.limitType$$ = combineLatest([this.saName$$, this.leName$$])
            .pipe(map(([saName, leName]) => {
            if (leName && !saName && !this.subTitleUserName && !this.subTitleJRName) {
                return LimitTypes.LE_BF_PRIVILEGE;
            }
            else if (leName && this.subTitleUserName && !saName && !this.subTitleJRName) {
                return LimitTypes.LE_USER;
            }
            else if (this.subTitleUserName && this.subTitleJRName && !leName && !saName) {
                return LimitTypes.USER_JR_BF_PRIVILEGE;
            }
            else if (saName && !leName && !this.subTitleUserName && !this.subTitleJRName) {
                return LimitTypes.SA;
            }
            else if (saName && this.subTitleUserName && !this.subTitleJRName && !leName) {
                return LimitTypes.SA_USER;
            }
            else if (saName && leName && !this.subTitleJRName && !this.subTitleUserName) {
                return LimitTypes.SA_LE;
            }
            else if (saName && this.subTitleJRName && !leName && !this.subTitleUserName) {
                return LimitTypes.SA_JR_BF_PRIVILEGE;
            }
            else {
                return true;
            }
        }));
        this.showNotification$.pipe(takeUntil(this.destroy$)).subscribe(() => {
            this.notificationService.showNotification({
                modifier: 'error',
                header: this.currencyErrorNotificationHeader,
                message: this.currencyErrorNotificationMessage,
                dismissible: true,
                ttl: this.notificationDismissTime,
            });
        });
    }
    /**
     * Show error notification and close modal
     */
    closeModal() {
        this.showNotification$.next();
        this.close.emit();
    }
    ngOnDestroy() {
        this.destroy$.next();
    }
}
/** @nocollapse */ ManageLimitsModalHeaderComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManageLimitsModalHeaderComponent, deps: [{ token: CurrencyService }, { token: i2.NotificationService }, { token: i3.ServiceAgreementHttpService }, { token: i3.LegalEntitiesHttpService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ ManageLimitsModalHeaderComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ManageLimitsModalHeaderComponent, selector: "bb-manage-limits-modal-header", inputs: { currency: "currency", currencyControl: "currencyControl", defaultTitle: "defaultTitle", title: "title", serviceAgreementId: "serviceAgreementId", legalEntityId: "legalEntityId", subTitleUserName: "subTitleUserName", subTitleJRName: "subTitleJRName", subTitleLEName: "subTitleLEName", subTitleSAName: "subTitleSAName", notificationDismissTime: "notificationDismissTime" }, outputs: { close: "close" }, viewQueries: [{ propertyName: "currencyErrorNotificationHeader", first: true, predicate: ["currencyErrorNotificationHeader"], descendants: true, read: TemplateRef, static: true }, { propertyName: "currencyErrorNotificationMessage", first: true, predicate: ["currencyErrorNotificationMessage"], descendants: true, read: TemplateRef, static: true }], ngImport: i0, template: "<ng-container\n  bbManageLimitsModalHeaderCustomizable\n  [bbHostRef]=\"this\"\n  [bbTemplateContext]=\"{\n    currencyInfo: currencyInfo$ | async,\n    saName: saName$$ | async,\n    leName: leName$$ | async,\n    limitType: limitType$$ | async\n  }\"></ng-container>\n\n<ng-template\n  bbManageLimitsModalHeaderCustomizable\n  let-hostRef\n  let-currencyInfo=\"context.currencyInfo\"\n  let-saName=\"context.saName\"\n  let-leName=\"context.leName\"\n  let-limitType=\"context.limitType\">\n  <div *ngIf=\"(hostRef.currency || currencyInfo) && limitType; else loading\">\n    <div class=\"bb-block bb-block--lg\">\n      <bb-header-ui\n        headingType=\"h2\"\n        [heading]=\"hostRef.title || hostRef.defaultTitle\"\n        data-role=\"manage-limits-header-title\"></bb-header-ui>\n    </div>\n\n    <div class=\"bb-stack\" data-role=\"manage-limits-header-subtitle\">\n      <ng-container class=\"bb-list__item\" [ngSwitch]=\"limitType\">\n        <!-- LE + BF + PRIVILEGE -->\n        <div *ngSwitchCase=\"LimitTypes.LE_BF_PRIVILEGE\"\n             [class.col-6] = \"leName.length > 20\"\n             class=\"bb-limit-header-card bb-stack__item bb-stack__item--spacing-xs\"\n             data-role=\"le-name-card\">\n          <div class=\"bb-stack\">\n            <bb-icon-ui class=\"bb-stack__item bb-stack__item--spacing-xs\" name=\"domain\" size=\"sm\"></bb-icon-ui>\n            <bb-ellipsis-ui\n              data-role=\"le-name-title\"\n              class=\"bb-subtitle\"\n              [lineClamp]=\"1\"\n              text=\"{{ leName }}\"\n            ></bb-ellipsis-ui>\n          </div>\n        </div>\n        <!-- LE + USER -->\n        <ng-container *ngSwitchCase=\"LimitTypes.LE_USER\">\n          <div class=\"bb-limit-header-card bb-stack__item bb-stack__item--spacing-xs\" data-role=\"le-name-card\"\n               [class.col-4] = \"leName.length > 20\">\n            <div class=\"bb-stack\">\n              <bb-icon-ui class=\"bb-stack__item bb-stack__item--spacing-xs\" name=\"domain\" size=\"sm\"></bb-icon-ui>\n              <bb-ellipsis-ui\n                data-role=\"le-name-title\"\n                class=\"bb-subtitle\"\n                [lineClamp]=\"1\"\n                text=\"{{ leName }}\"\n              ></bb-ellipsis-ui>\n            </div>\n          </div>\n          <bb-icon-ui color=\"muted\" name=\"navigate-next\" size=\"sm\" class=\"bb-stack__item bb-stack__item--spacing-xs\"></bb-icon-ui>\n          <div class=\"bb-limit-header-card bb-stack__item bb-stack__item--spacing-xs\" data-role=\"user-name-card\"\n               [class.col-4] = \"hostRef.subTitleUserName.length > 20\">\n            <div class=\"bb-stack\">\n              <bb-icon-ui class=\"bb-stack__item bb-stack__item--spacing-xs\" name=\"user\" size=\"sm\"></bb-icon-ui>\n              <bb-ellipsis-ui\n                data-role=\"user-name-title\"\n                class=\"bb-subtitle\"\n                [lineClamp]=\"1\"\n                text=\"{{ hostRef.subTitleUserName }}\"\n              ></bb-ellipsis-ui>\n            </div>\n          </div>\n        </ng-container>\n        <!-- USER + JR + BF + PRIVILEGE -->\n        <ng-container *ngSwitchCase=\"LimitTypes.USER_JR_BF_PRIVILEGE\">\n          <div class=\"bb-limit-header-card bb-stack__item bb-stack__item--spacing-xs\" data-role=\"user-name-card\"\n               [class.col-4] = \"hostRef.subTitleUserName.length > 20\">\n            <div class=\"bb-stack\">\n              <bb-icon-ui class=\"bb-stack__item bb-stack__item--spacing-xs\" name=\"user\" size=\"sm\"></bb-icon-ui>\n              <bb-ellipsis-ui\n                data-role=\"user-name-title\"\n                class=\"bb-subtitle\"\n                [lineClamp]=\"1\"\n                text=\"{{ hostRef.subTitleUserName }}\"\n              ></bb-ellipsis-ui>\n            </div>\n          </div>\n          <bb-icon-ui color=\"muted\" name=\"navigate-next\" size=\"sm\" class=\"bb-stack__item bb-stack__item--spacing-xs\"></bb-icon-ui>\n          <div class=\"bb-limit-header-card bb-stack__item bb-stack__item--spacing-xs\" data-role=\"jr-name-card\"\n               [class.col-4] = \"hostRef.subTitleJRName.length > 20\">\n            <div class=\"bb-stack\">\n              <bb-icon-ui class=\"bb-stack__item bb-stack__item--spacing-xs\" name=\"assignment-ind\" size=\"sm\"></bb-icon-ui>\n              <bb-ellipsis-ui\n                data-role=\"jr-name-title\"\n                class=\"bb-subtitle\"\n                [lineClamp]=\"1\"\n                text=\"{{ hostRef.subTitleJRName }}\"\n              ></bb-ellipsis-ui>\n            </div>\n          </div>\n        </ng-container>\n        <!-- SA -->\n        <div *ngSwitchCase=\"LimitTypes.SA\"\n             class=\"bb-limit-header-card bb-stack__item bb-stack__item--spacing-xs\"\n             [class.col-6] = \"saName.length > 20\"\n             data-role=\"sa-name-card\">\n          <div class=\"bb-stack\">\n            <bb-icon-ui class=\"bb-stack__item bb-stack__item--spacing-xs\" name=\"dns\" size=\"sm\"></bb-icon-ui>\n            <bb-ellipsis-ui\n              data-role=\"sa-name-title\"\n              class=\"bb-subtitle\"\n              [lineClamp]=\"1\"\n              text=\"{{ saName }}\"\n            ></bb-ellipsis-ui>\n          </div>\n        </div>\n        <!-- SA + USER -->\n        <ng-container *ngSwitchCase=\"LimitTypes.SA_USER\">\n          <div class=\"bb-limit-header-card bb-stack__item bb-stack__item--spacing-xs\" data-role=\"sa-name-card\"\n               [class.col-4] = \"saName.length > 20\">\n            <div class=\"bb-stack\">\n              <bb-icon-ui class=\"bb-stack__item bb-stack__item--spacing-xs\" name=\"dns\" size=\"sm\"></bb-icon-ui>\n              <bb-ellipsis-ui\n                data-role=\"sa-name-title\"\n                class=\"bb-subtitle\"\n                [lineClamp]=\"1\"\n                text=\"{{ saName }}\"\n              ></bb-ellipsis-ui>\n            </div>\n          </div>\n          <bb-icon-ui color=\"muted\" name=\"navigate-next\" size=\"sm\" class=\"bb-stack__item bb-stack__item--spacing-xs\"></bb-icon-ui>\n          <div class=\"bb-limit-header-card bb-stack__item bb-stack__item--spacing-xs\" data-role=\"user-name-card\"\n               [class.col-4] = \"hostRef.subTitleUserName.length > 20\">\n            <div class=\"bb-stack\">\n              <bb-icon-ui class=\"bb-stack__item bb-stack__item--spacing-xs\" name=\"user\" size=\"sm\"></bb-icon-ui>\n              <bb-ellipsis-ui\n                data-role=\"user-name-title\"\n                class=\"bb-subtitle\"\n                [lineClamp]=\"1\"\n                text=\"{{ hostRef.subTitleUserName }}\"\n              ></bb-ellipsis-ui>\n            </div>\n          </div>\n        </ng-container>\n        <!-- SA + LE -->\n        <ng-container *ngSwitchCase=\"LimitTypes.SA_LE\">\n          <div class=\"bb-limit-header-card bb-stack__item bb-stack__item--spacing-xs\" data-role=\"sa-name-card\"\n               [class.col-4] = \"saName.length > 20\">\n            <div class=\"bb-stack\">\n              <bb-icon-ui class=\"bb-stack__item bb-stack__item--spacing-xs\" name=\"dns\" size=\"sm\"></bb-icon-ui>\n              <bb-ellipsis-ui\n                data-role=\"sa-name-title\"\n                class=\"bb-subtitle\"\n                [lineClamp]=\"1\"\n                text=\"{{ saName }}\"\n              ></bb-ellipsis-ui>\n            </div>\n          </div>\n          <bb-icon-ui color=\"muted\" name=\"navigate-next\" size=\"sm\" class=\"bb-stack__item bb-stack__item--spacing-xs\"></bb-icon-ui>\n          <div class=\"bb-limit-header-card bb-stack__item bb-stack__item--spacing-xs\" data-role=\"le-name-card\"\n               [class.col-4] = \"leName.length > 20\">\n            <div class=\"bb-stack\">\n              <bb-icon-ui class=\"bb-stack__item bb-stack__item--spacing-xs\" name=\"domain\" size=\"sm\"></bb-icon-ui>\n              <bb-ellipsis-ui\n                data-role=\"le-name-title\"\n                class=\"bb-subtitle\"\n                [lineClamp]=\"1\"\n                text=\"{{ leName }}\"\n              ></bb-ellipsis-ui>\n            </div>\n          </div>\n        </ng-container>\n        <!-- SA + JR + BF + PRIVILEGE -->\n        <ng-container *ngSwitchCase=\"LimitTypes.SA_JR_BF_PRIVILEGE\">\n          <div class=\"bb-limit-header-card bb-stack__item bb-stack__item--spacing-xs\" data-role=\"sa-name-card\"\n               [class.col-4] = \"saName.length > 20\">\n            <div class=\"bb-stack\">\n              <bb-icon-ui class=\"bb-stack__item bb-stack__item--spacing-xs\" name=\"dns\" size=\"sm\"></bb-icon-ui>\n              <bb-ellipsis-ui\n                data-role=\"sa-name-title\"\n                class=\"bb-subtitle\"\n                [lineClamp]=\"1\"\n                text=\"{{ saName }}\"\n              ></bb-ellipsis-ui>\n            </div>\n          </div>\n          <bb-icon-ui color=\"muted\" name=\"navigate-next\" size=\"sm\" class=\"bb-stack__item bb-stack__item--spacing-xs\"></bb-icon-ui>\n          <div class=\"bb-limit-header-card bb-stack__item bb-stack__item--spacing-xs\" data-role=\"jr-name-card\"\n               [class.col-4] = \"hostRef.subTitleJRName.length > 20\">\n            <div class=\"bb-stack\">\n              <bb-icon-ui class=\"bb-stack__item bb-stack__item--spacing-xs\" name=\"assignment-ind\" size=\"sm\"></bb-icon-ui>\n              <bb-ellipsis-ui\n                data-role=\"jr-name-title\"\n                class=\"bb-subtitle\"\n                [lineClamp]=\"1\"\n                text=\"{{ hostRef.subTitleJRName }}\"\n              ></bb-ellipsis-ui>\n            </div>\n          </div>\n        </ng-container>\n      </ng-container>\n\n      <div class=\"bb-stack__item bb-stack__item--push-right\">\n          <bb-dropdown-single-select-ui\n            *ngIf=\"!hostRef.currency\"\n            aria-label=\"Currency\"\n            i18n-aria-label=\"Currency dropdown label@@manage-limits-modal.header.dropdown.label\"\n            data-role=\"manage-limits-header-currency-dropdown\"\n            [formControl]=\"hostRef.currencyControl\"\n            [options]=\"currencyInfo?.allowedCurrencyList\"\n            iconName=\"caret-down\"></bb-dropdown-single-select-ui>\n\n        <div\n          class=\"bb-stack bb-stack--density-sm\"\n          data-role=\"manage-limits-header-currency-container\"\n          *ngIf=\"hostRef.currency\">\n          <span\n            class=\"bb-stack__item\"\n            i18n=\"Currency dropdown label@@manage-limits-modal.header.currency-dropdown.label\"\n            >Currency:</span\n          >\n          <span class=\"bb-stack__item bb-text-bold\" data-role=\"manage-limits-header-currency\">{{ hostRef.currency }}</span>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <ng-template #loading>\n    <div class=\"bb-state-container bb-block bb-block--lg\" data-role=\"manage-limits-header-loading-state\">\n      <bb-loading-indicator-ui\n        loaderSize=\"md\"\n        text=\"Loading...\"\n        i18n-text=\"Loading text@@manage-limits-modal.loading.text\"></bb-loading-indicator-ui>\n    </div>\n  </ng-template>\n</ng-template>\n\n<ng-template #currencyErrorNotificationHeader>\n  <h5 i18n=\"Error notification header message@@manage-limits-modal.header.notification.error-header\">Unknown Error</h5>\n</ng-template>\n\n<ng-template #currencyErrorNotificationMessage>\n  <p i18n=\"Error notification message@@manage-limits-modal.header.notification.error-message\">\n    Try to reload the page or contact the system administrator.\n  </p>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i4.HeaderComponent; }), selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i0.forwardRef(function () { return i3$1.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0.forwardRef(function () { return i6.EllipsisComponent; }), selector: "bb-ellipsis-ui", inputs: ["text", "tooltipTriggers", "lineClamp"] }, { type: i0.forwardRef(function () { return i7.DropdownSingleSelectComponent; }), selector: "bb-dropdown-single-select-ui", inputs: ["placeholder", "defaultOptionAsPlaceholder", "options", "displayAttributePath", "iconName", "compareWithFn"] }, { type: i0.forwardRef(function () { return i8.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }], directives: [{ type: i0.forwardRef(function () { return ManageLimitsModalHeaderCustomizableDirective; }), selector: "[bbManageLimitsModalHeaderCustomizable]" }, { type: i0.forwardRef(function () { return i9.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i9.NgSwitch; }), selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i0.forwardRef(function () { return i9.NgSwitchCase; }), selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i0.forwardRef(function () { return i1$1.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0.forwardRef(function () { return i1$1.FormControlDirective; }), selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }], pipes: { "async": i0.forwardRef(function () { return i9.AsyncPipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManageLimitsModalHeaderComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-manage-limits-modal-header',
                    templateUrl: 'manage-limits-modal-header.component.html',
                }]
        }], ctorParameters: function () { return [{ type: CurrencyService }, { type: i2.NotificationService }, { type: i3.ServiceAgreementHttpService }, { type: i3.LegalEntitiesHttpService }]; }, propDecorators: { currency: [{
                type: Input
            }], currencyControl: [{
                type: Input
            }], defaultTitle: [{
                type: Input
            }], title: [{
                type: Input
            }], serviceAgreementId: [{
                type: Input
            }], legalEntityId: [{
                type: Input
            }], subTitleUserName: [{
                type: Input
            }], subTitleJRName: [{
                type: Input
            }], subTitleLEName: [{
                type: Input
            }], subTitleSAName: [{
                type: Input
            }], notificationDismissTime: [{
                type: Input
            }], close: [{
                type: Output
            }], currencyErrorNotificationHeader: [{
                type: ViewChild,
                args: ['currencyErrorNotificationHeader', { read: TemplateRef, static: true }]
            }], currencyErrorNotificationMessage: [{
                type: ViewChild,
                args: ['currencyErrorNotificationMessage', { read: TemplateRef, static: true }]
            }] } });
class ManageLimitsModalHeaderCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ ManageLimitsModalHeaderCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManageLimitsModalHeaderCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ ManageLimitsModalHeaderCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ManageLimitsModalHeaderCustomizableDirective, selector: "[bbManageLimitsModalHeaderCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManageLimitsModalHeaderCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbManageLimitsModalHeaderCustomizable]',
                }]
        }] });

class LimitBoundItemComponent {
    constructor() {
        /**
         * Flag for show/hide regular limit row.
         */
        this.showShadowLimit = false;
        /**
         * Flag for show/hide shadow limit column.
         */
        this.showRegularLimit = false;
    }
}
/** @nocollapse */ LimitBoundItemComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LimitBoundItemComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ LimitBoundItemComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: LimitBoundItemComponent, selector: "bb-limit-bound-item", inputs: { limitBound: "limitBound", currency: "currency", showShadowLimit: "showShadowLimit", showRegularLimit: "showRegularLimit" }, ngImport: i0, template: "<ng-container bbLimitBoundItemCustomizable [bbHostRef]=\"this\"></ng-container>\n\n<ng-template bbLimitBoundItemCustomizable let-hostRef>\n  <div class=\"row\">\n    <div class=\"col-5\" [ngClass]=\"{ 'col-8': !hostRef.showRegularLimit || !hostRef.showShadowLimit }\">\n      <span i18n=\"Limits bound title@@limits.limitsBound.title\" data-role=\"limit-bound-title\" class=\"bb-subtitle\">\n        { hostRef.limitBound.period, select, transactional-limits-bound {Per transaction} daily {Daily} weekly {Weekly}\n        monthly {Monthly} quarterly {Quarterly} yearly {Yearly} other {{{hostRef.limitBound.period}}} }\n      </span>\n    </div>\n\n    <div class=\"col overflow-auto\" *ngIf=\"hostRef.showRegularLimit\" data-role=\"limit-bound-regular-limit-col\">\n      <bb-ellipsis-ui>\n        <span class=\"bb-subtitle\">\n          <bb-amount-ui\n            *ngIf=\"hostRef.limitBound.regular.amount; else noAmount\"\n            [currency]=\"hostRef.currency\"\n            [amount]=\"hostRef.limitBound.regular.amount\"\n            [mapCurrency]=\"true\"\n            data-role=\"limit-bound-regular-limit\"></bb-amount-ui>\n        </span>\n      </bb-ellipsis-ui>\n\n      <div\n        class=\"bb-subheader bb-subheader--regular bb-text-support break-word\"\n        *ngIf=\"hostRef.limitBound.regularConsumption\"\n        i18n=\"Consumed amount for regular limit@@limits.consumed.regular\">\n        <bb-amount-ui\n          [currency]=\"hostRef.currency\"\n          [amount]=\"hostRef.limitBound.regularConsumption\"\n          [mapCurrency]=\"true\"\n          data-role=\"limit-bound-consumption-regular\"></bb-amount-ui>\n        consumed\n      </div>\n    </div>\n    <div class=\"col overflow-auto\" *ngIf=\"hostRef.showShadowLimit\" data-role=\"limit-bound-shadow-limit-col\">\n      <bb-ellipsis-ui>\n        <span class=\"bb-subtitle\">\n          <bb-amount-ui\n            *ngIf=\"hostRef.limitBound.shadow.amount; else noAmount\"\n            [currency]=\"hostRef.currency\"\n            [amount]=\"hostRef.limitBound.shadow.amount\"\n            [mapCurrency]=\"true\"\n            data-role=\"limit-bound-shadow-limit\"></bb-amount-ui>\n        </span>\n      </bb-ellipsis-ui>\n\n      <div\n        class=\"bb-subheader bb-subheader--regular bb-text-support break-word\"\n        *ngIf=\"hostRef.limitBound.shadowConsumption\"\n        i18n=\"Consumed amount for shadow limit@@limits.consumed.shadow\">\n        <bb-amount-ui\n          [currency]=\"hostRef.currency\"\n          [amount]=\"hostRef.limitBound.shadowConsumption\"\n          [mapCurrency]=\"true\"\n          data-role=\"limit-bound-consumption-shadow\"></bb-amount-ui>\n        consumed\n      </div>\n    </div>\n  </div>\n\n  <hr />\n\n  <ng-template #noAmount>\n    <bb-icon-ui data-role=\"limit-bound-no-item\" class=\"bb-text-support\" name=\"remove\" color=\"support\"></bb-icon-ui>\n  </ng-template>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i6.EllipsisComponent; }), selector: "bb-ellipsis-ui", inputs: ["text", "tooltipTriggers", "lineClamp"] }, { type: i0.forwardRef(function () { return i2$1.AmountComponent; }), selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: i0.forwardRef(function () { return i3$1.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i0.forwardRef(function () { return LimitBoundItemCustomizableDirective; }), selector: "[bbLimitBoundItemCustomizable]" }, { type: i0.forwardRef(function () { return i9.NgClass; }), selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i0.forwardRef(function () { return i9.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LimitBoundItemComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-limit-bound-item',
                    templateUrl: 'limit-bound-item.component.html',
                }]
        }], propDecorators: { limitBound: [{
                type: Input
            }], currency: [{
                type: Input
            }], showShadowLimit: [{
                type: Input
            }], showRegularLimit: [{
                type: Input
            }] } });
class LimitBoundItemCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ LimitBoundItemCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LimitBoundItemCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ LimitBoundItemCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: LimitBoundItemCustomizableDirective, selector: "[bbLimitBoundItemCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LimitBoundItemCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbLimitBoundItemCustomizable]',
                }]
        }] });

class ManageLimitsModalViewBodyComponent {
    constructor() {
        /**
         * Close modal window event.
         * Propagate event when modal window should be closed.
         */
        this.cancel = new EventEmitter();
        /**
         * Flag for show/hide regular limit column.
         */
        this.showRegularLimit = false;
        /**
         * Flag for show/hide shadow limit column.
         */
        this.showShadowLimit = false;
        /**
         * Flag for show pending state alert.
         */
        this.pending = false;
    }
    /**
     * Emits cancel: EventEmitter event.
     */
    close() {
        this.cancel.emit();
    }
}
/** @nocollapse */ ManageLimitsModalViewBodyComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManageLimitsModalViewBodyComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ ManageLimitsModalViewBodyComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ManageLimitsModalViewBodyComponent, selector: "bb-manage-limits-modal-view-body", inputs: { showRegularLimit: "showRegularLimit", showShadowLimit: "showShadowLimit", pending: "pending", currency: "currency", limitBounds: "limitBounds" }, outputs: { cancel: "cancel" }, ngImport: i0, template: "<ng-container bbManageLimitsModalViewBodyCustomizable [bbHostRef]=\"this\"></ng-container>\n\n<ng-template bbManageLimitsModalViewBodyCustomizable let-hostRef>\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody>\n      <bb-alert-ui\n        *ngIf=\"hostRef.pending\"\n        title=\"This limit has pending approval and cannot be modified\"\n        modifier=\"warning\"\n        data-role=\"limit-pending-alert\"\n        i18n-title=\"This limit has pending approval and cannot be modified@@limit.pending.alert.text\">\n      </bb-alert-ui>\n      <div class=\"row bb-block bb-block--md\">\n        <div class=\"bb-stack col-5\" [ngClass]=\"{ 'col-8': !hostRef.showRegularLimit || !hostRef.showShadowLimit }\">\n          <span\n            class=\"bb-subheader bb-subheader--regular bb-text-semi-bold bb-stack__item bb-stack__item--spacing-xs\"\n            i18n=\"Limits bound title@@limits.view.header.period.text\"\n            data-role=\"limit-view-header-period\"\n            >Period</span\n          >\n          <bb-icon-ui\n            [bbTooltip]=\"limitsTitleTooltip\"\n            placement=\"bottom\"\n            triggers=\"hover\"\n            name=\"info\"\n            size=\"sm\"></bb-icon-ui>\n        </div>\n\n        <div class=\"col\" *ngIf=\"hostRef.showRegularLimit\" data-role=\"limit-view-header-limits\">\n          <span\n            class=\"bb-subheader bb-subheader--regular bb-text-semi-bold\"\n            i18n=\"Limits bound title@@limits.view.header.limits.text\">\n            Limit\n          </span>\n        </div>\n\n        <div class=\"col\" *ngIf=\"hostRef.showShadowLimit\" data-role=\"limit-view-header-shadow-limits\">\n          <span\n            class=\"bb-subheader bb-subheader--regular bb-text-semi-bold\"\n            i18n=\"Limits bound title@@limits.view.header.shadow-limits.text\">\n            Shadow limit\n          </span>\n        </div>\n      </div>\n      <hr />\n\n      <ng-container *ngFor=\"let bound of hostRef.limitBounds\">\n        <bb-limit-bound-item\n          [limitBound]=\"bound\"\n          [currency]=\"hostRef.currency\"\n          [showShadowLimit]=\"hostRef.showShadowLimit\"\n          [showRegularLimit]=\"hostRef.showRegularLimit\"\n          data-role=\"limit-limits-bound\"></bb-limit-bound-item>\n      </ng-container>\n    </ng-template>\n  </bb-modal-body-ui>\n  <bb-modal-footer-ui>\n    <ng-template bbCustomModalFooter>\n      <div class=\"bb-button-bar\">\n        <button\n          bbButton\n          class=\"bb-button-bar__button\"\n          color=\"primary\"\n          i18n=\"Limits bound title@@limits.view.cancel.button.text\"\n          (bbKeyboardClick)=\"hostRef.close()\"\n          data-role=\"limit-view-cancel-button\">\n          Cancel\n        </button>\n      </div>\n    </ng-template>\n  </bb-modal-footer-ui>\n\n  <ng-template #limitsTitleTooltip>\n    <span i18n=\"Limits modal header title tooltip @@limits.view.period.tooltip\">\n      When setting limits, \u2018per transaction\u2019 should be your smallest value, with \u2018yearly\u2019 the largest.\n    </span>\n  </ng-template>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i1$2.ModalBodyComponent; }), selector: "bb-modal-body-ui" }, { type: i0.forwardRef(function () { return i2$2.AlertComponent; }), selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i0.forwardRef(function () { return i3$1.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0.forwardRef(function () { return LimitBoundItemComponent; }), selector: "bb-limit-bound-item", inputs: ["limitBound", "currency", "showShadowLimit", "showRegularLimit"] }, { type: i0.forwardRef(function () { return i1$2.ModalFooterComponent; }), selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }], directives: [{ type: i0.forwardRef(function () { return ManageLimitsModalViewBodyCustomizableDirective; }), selector: "[bbManageLimitsModalViewBodyCustomizable]" }, { type: i0.forwardRef(function () { return i1$2.CustomModalBodyDirective; }), selector: "ng-template[bbCustomModalBody]" }, { type: i0.forwardRef(function () { return i9.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i9.NgClass; }), selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i0.forwardRef(function () { return i6$1.TooltipDirective; }), selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i0.forwardRef(function () { return i9.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i0.forwardRef(function () { return i1$2.CustomModalFooterDirective; }), selector: "ng-template[bbCustomModalFooter]" }, { type: i0.forwardRef(function () { return i7$1.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0.forwardRef(function () { return i8$1.KeyboardClickDirective; }), selector: "[bbKeyboardClick]", outputs: ["bbKeyboardClick"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManageLimitsModalViewBodyComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-manage-limits-modal-view-body',
                    templateUrl: 'manage-limits-modal-view-body.component.html',
                }]
        }], propDecorators: { cancel: [{
                type: Output
            }], showRegularLimit: [{
                type: Input
            }], showShadowLimit: [{
                type: Input
            }], pending: [{
                type: Input
            }], currency: [{
                type: Input
            }], limitBounds: [{
                type: Input
            }] } });
class ManageLimitsModalViewBodyCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ ManageLimitsModalViewBodyCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManageLimitsModalViewBodyCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ ManageLimitsModalViewBodyCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ManageLimitsModalViewBodyCustomizableDirective, selector: "[bbManageLimitsModalViewBodyCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManageLimitsModalViewBodyCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbManageLimitsModalViewBodyCustomizable]',
                }]
        }] });

class EditLimitComponent {
    constructor(fb, hostEl, _ref) {
        this.fb = fb;
        this.hostEl = hostEl;
        this._ref = _ref;
        /**
         * Flag for show/hide regular limit column.
         */
        this.showRegularLimit = false;
        /**
         * Flag for show/hide shadow limit column.
         */
        this.showShadowLimit = false;
        /**
         * Propagate event when submit button was clicked.
         */
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.submit = new EventEmitter();
        /**
         * Close modal window event.
         * Propagate event when modal window should be closed.
         */
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.close = new EventEmitter();
        /**
         * Reactive form for edit limits
         */
        this.limitForm = this.fb.group({});
        /**
         * Bound list with full information
         */
        this.limitBoundList = [];
        /**
         * Flag which show when regular limits was edited
         */
        this.isRegularChanged = false;
        /**
         * Flag which show when shadow limits was edited
         */
        this.isShadowChanged = false;
        /**
         * Flag which show when form has zero value
         */
        this.showZeroLimitAlert = false;
        /**
         * Flag which show when user dismiss Zero info block.
         */
        this.zeroLimitAlertDismissed = false;
        this.destroy$ = new Subject();
    }
    /**
     * Limits bounds data.
     */
    set limitBounds(limitBounds) {
        const regular = this.fb.array([]);
        const shadow = this.fb.array([]);
        limitBounds.forEach((limitBound) => {
            var _a, _b;
            // this transformation need to resolve HAD-1594 issue
            //
            // Need to cover both types
            // because API describe number amount, but server return string
            let regularAmount = (_a = limitBound.regular.amount) !== null && _a !== void 0 ? _a : '';
            let shadowAmount = (_b = limitBound.shadow.amount) !== null && _b !== void 0 ? _b : '';
            if (typeof regularAmount === 'string') {
                regularAmount = regularAmount.split('.')[0];
            }
            else {
                regularAmount = Math.trunc(regularAmount);
            }
            if (typeof shadowAmount === 'string') {
                shadowAmount = shadowAmount.split('.')[0];
            }
            else {
                shadowAmount = Math.trunc(shadowAmount);
            }
            regular.push(new FormControl({
                amount: regularAmount,
                currency: ' ',
            }, {
                updateOn: 'change',
            }));
            shadow.push(new FormControl({
                amount: shadowAmount,
                currency: ' ',
            }, {
                updateOn: 'change',
            }));
        });
        this.limitForm.addControl('regular', regular);
        this.limitForm.addControl('shadow', shadow);
        this.limitBoundList = limitBounds;
        this.onChanges();
    }
    /**
     * Disabled submit button getter
     */
    get isDisabled() {
        return Boolean(this.showLoadingSubmitBtn || this.limitForm.invalid || !(this.isRegularChanged || this.isShadowChanged));
    }
    /**
     * Submit limit form
     */
    submitForm() {
        if (!this.validateForm()) {
            this.submit.emit({
                isRegularChanged: this.isRegularChanged,
                isShadowChanged: this.isShadowChanged,
                limitValue: this.limitForm.value,
            });
        }
    }
    /**
     * Track when form is changed
     */
    onChanges() {
        this.limitForm.get('regular').valueChanges.pipe(take(1), takeUntil(this.destroy$)).subscribe(() => {
            this.isRegularChanged = true;
        });
        this.limitForm.get('shadow').valueChanges.pipe(take(1), takeUntil(this.destroy$)).subscribe(() => {
            this.isShadowChanged = true;
        });
        // FE form validation
        // made in component, because custom validator/asyncValidator doesn't work properly
        this.limitForm.valueChanges.pipe(debounceTime(500), takeUntil(this.destroy$)).subscribe(() => this.validateForm());
    }
    /**
     * Function for form validation
     */
    validateForm() {
        const formGroupValue = this.limitForm.value;
        let hasRegularError = false;
        let hasShadowError = false;
        if (formGroupValue) {
            this.limitForm.setErrors(null);
            if (this.showRegularLimit && !this.disableRegular) {
                const controlsRegular = this.limitForm.get('regular').controls;
                hasRegularError = this.checkBounds(formGroupValue.regular, controlsRegular);
            }
            if (this.showShadowLimit && !this.disableShadow) {
                const controlsShadow = this.limitForm.get('shadow').controls;
                hasShadowError = this.checkBounds(formGroupValue.shadow, controlsShadow);
            }
            // TODO check if validation working without it after updating to Angular 9
            this._ref.markForCheck();
        }
        return hasRegularError || hasShadowError;
    }
    /**
     * Function for validation one type of the limit
     * @param boundList
     * @param controls
     */
    checkBounds(boundList, controls) {
        var _a, _b;
        // clear all previous errors
        controls.forEach((item) => {
            item.setErrors(null);
        });
        for (let i = 0; i < boundList.length; i++) {
            for (let j = i + 1; j < boundList.length; j++) {
                const firstAmount = ((_a = boundList[i]) === null || _a === void 0 ? void 0 : _a.amount) && parseInt(boundList[i].amount.toString().replace(AMOUNT_DELIMETER_REG_EXP, ''), 10);
                const secondAmount = ((_b = boundList[j]) === null || _b === void 0 ? void 0 : _b.amount) && parseInt(boundList[j].amount.toString().replace(AMOUNT_DELIMETER_REG_EXP, ''), 10);
                if (firstAmount && secondAmount && firstAmount > secondAmount) {
                    controls[i].setErrors({ biggerThan: this.limitBoundList[j].period });
                    return true;
                }
            }
        }
        return false;
    }
    /**
     * Track when control has zero amount and Zero info message should be shown
     */
    shouldZeroAlertBeShown() {
        if (this.zeroLimitAlertDismissed) {
            return false;
        }
        if (this.showZeroLimitAlert) {
            return true;
        }
        const value = this.limitForm.value;
        const isZero = value.regular.find((item) => (item === null || item === void 0 ? void 0 : item.amount) === '0') || value.shadow.find((item) => (item === null || item === void 0 ? void 0 : item.amount) === '0');
        if (isZero) {
            this.showZeroLimitAlert = Boolean(isZero);
            this.scrollToZeroInfo();
        }
        return isZero;
    }
    /**
     * Scroll to zero limit info block
     */
    scrollToZeroInfo() {
        const zeroInfoElement = this.hostEl.nativeElement.querySelector('#zeroLimitInfo');
        if (zeroInfoElement) {
            setTimeout(() => {
                zeroInfoElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
            });
        }
    }
    ngOnDestroy() {
        this.destroy$.next();
    }
}
/** @nocollapse */ EditLimitComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditLimitComponent, deps: [{ token: i1$1.FormBuilder }, { token: i0.ElementRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ EditLimitComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: EditLimitComponent, selector: "bb-edit-limit", inputs: { showRegularLimit: "showRegularLimit", showShadowLimit: "showShadowLimit", limitBounds: "limitBounds", currency: "currency", showLoadingSubmitBtn: "showLoadingSubmitBtn", errors: "errors", disableRegular: "disableRegular", disableShadow: "disableShadow" }, outputs: { submit: "submit", close: "close" }, ngImport: i0, template: "<ng-container bbEditLimitCustomizable [bbHostRef]=\"this\"></ng-container>\n\n<ng-template bbEditLimitCustomizable let-hostRef>\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody>\n      <bb-alert-ui\n        *ngFor=\"let error of hostRef.errors\"\n        [title]=\"error.message\"\n        modifier=\"error\"\n        data-role=\"edit-limit-error-alert\"></bb-alert-ui>\n\n      <div id=\"zeroLimitInfo\">\n        <bb-alert-ui\n          *ngIf=\"hostRef.shouldZeroAlertBeShown()\"\n          title=\"'Zero limits' means no transaction can be performed\"\n          i18n-title=\"Info message about zero limit amount@@limits.edit.zero-limit-info.title\"\n          modifier=\"info\"\n          [dismissible]=\"true\"\n          (close)=\"hostRef.zeroLimitAlertDismissed = true\"\n          data-role=\"edit-limit-zero-info-alert\"></bb-alert-ui>\n      </div>\n      <div class=\"bb-block bb-block--md\"></div>\n      <div class=\"row bb-subheader bb-subheader--regular bb-text-semi-bold bb-block bb-block--md\">\n        <div class=\"bb-stack\" data-role=\"edit-limit-column-name-header\"\n             [ngClass]=\"hostRef.showRegularLimit && hostRef.showShadowLimit ? 'col-5' : 'col-8'\">\n          <span\n            class=\"bb-stack__item bb-stack__item--spacing-xs\"\n            i18n=\"Limits bound header title@@limits.edit.header.period\"\n          >Period</span\n          >\n          <bb-icon-ui\n            [bbTooltip]=\"limitsTitleTooltip\"\n            placement=\"bottom\"\n            triggers=\"hover\"\n            name=\"info\"\n            size=\"sm\"></bb-icon-ui>\n        </div>\n        <div\n          class=\"col\"\n          *ngIf=\"hostRef.showRegularLimit\"\n          i18n=\"Limits bound header title@@limits.edit.header.limits\"\n          data-role=\"edit-limit-column-regular-limit-header\">\n          Limit\n        </div>\n        <div\n          class=\"col\"\n          *ngIf=\"hostRef.showShadowLimit\"\n          i18n=\"Limits bound header title@@limits.edit.header.shadow-limits\"\n          data-role=\"edit-limit-column-shadow-limit-header\">\n          Shadow limit\n        </div>\n      </div>\n      <hr />\n\n      <div class=\"bb-list bb-list--density-sm bb-block bb-block--lg\">\n        <div\n          class=\"bb-list__item\"\n          *ngFor=\"let bound of hostRef.limitBoundList; let i = index\"\n          data-role=\"edit-limit-bound-item\">\n          <div class=\"d-flex bb-block bb-block--sm\"></div>\n          <div class=\"row align-items-center\">\n            <div\n              class=\"bb-subtitle bb-block bb-block--sm\"\n              [ngClass]=\"hostRef.showRegularLimit && hostRef.showShadowLimit ? 'col-5' : 'col-8'\"\n              i18n=\"Limits bound frequency name@@limits.edit.limits-bound.name\"\n              data-role=\"edit-limit-bound-item-name\">\n              { bound.period, select, transactional-limits-bound {Per transaction} daily {Daily} weekly {Weekly} monthly\n              {Monthly} quarterly {Quarterly} yearly {Yearly} other { {{ bound.period }} } }\n            </div>\n            <div\n              class=\"col\"\n              *ngIf=\"hostRef.showRegularLimit\"\n              [ngSwitch]=\"hostRef.disableRegular\"\n              data-role=\"edit-limit-bound-item-regular\">\n              <div class=\"bb-subtitle\" *ngSwitchCase=\"true\">\n                <bb-amount-ui\n                  *ngIf=\"hostRef.limitForm.get('regular').controls[i].value.amount; else noAmount\"\n                  [currency]=\"hostRef.currency\"\n                  [amount]=\"hostRef.limitForm.get('regular').controls[i].value.amount\"\n                  [mapCurrency]=\"true\"\n                  data-role=\"edit-limit-bound-item-regular-limit-disabled\"></bb-amount-ui>\n              </div>\n              <div *ngSwitchDefault>\n                <span\n                  [attr.id]=\"i + '-regular-limit-label'\"\n                  class=\"sr-only\"\n                  i18n=\"Regular limit currency input label@@limits.edit.limits-bound.currency-input.regular\"\n                  data-role=\"edit-limit-bound-item-regular-limit-aria-label\">\n                  { bound.period, select, transactional-limits-bound {Per transaction limit} daily {Daily limit} weekly\n                  {Weekly limit} monthly {Monthly limit} quarterly {Quarterly limit} yearly {Yearly limit} other {\n                  {{ bound.period }} limit } }\n                </span>\n                <bb-currency-input-ui\n                  [formControl]=\"hostRef.limitForm.get('regular').controls[i]\"\n                  placeholder=\"\"\n                  [integer]=\"true\"\n                  [allowNegativeValue]=\"false\"\n                  integerLabel=\" \"\n                  [integerLabelSrOnly]=\"true\"\n                  resultType=\"string\"\n                  [disabled]=\"hostRef.disableRegular\"\n                  [aria-labelledby]=\"i + '-regular-limit-label'\"\n                  [aria-describedby]=\"i + '-regular-limit-error'\"\n                  data-role=\"edit-limit-bound-item-regular-limit\"></bb-currency-input-ui>\n              </div>\n            </div>\n            <div\n              class=\"col\"\n              *ngIf=\"hostRef.showShadowLimit\"\n              [ngSwitch]=\"hostRef.disableShadow\"\n              data-role=\"edit-limit-bound-item-shadow\">\n              <div class=\"bb-subtitle\" *ngSwitchCase=\"true\">\n                <bb-amount-ui\n                  *ngIf=\"hostRef.limitForm.get('shadow').controls[i].value.amount; else noAmount\"\n                  [currency]=\"hostRef.currency\"\n                  [amount]=\"hostRef.limitForm.get('shadow').controls[i].value.amount\"\n                  [mapCurrency]=\"true\"\n                  data-role=\"edit-limit-bound-item-shadow-limit-disabled\"></bb-amount-ui>\n              </div>\n              <div *ngSwitchDefault>\n                <span\n                  [attr.id]=\"i + '-shadow-limit-label'\"\n                  class=\"sr-only\"\n                  i18n=\"Shadow limit currency input label@@limits.edit.limits-bound.currency-input.shadow\"\n                  data-role=\"edit-limit-bound-item-shadow-limit-aria-label\">\n                  { bound.period, select, transactional-limits-bound {Per transaction shadow limit} daily {Daily shadow\n                  limit} weekly {Weekly shadow limit} monthly {Monthly shadow limit} quarterly {Quarterly shadow limit}\n                  yearly {Yearly shadow limit} other { {{ bound.period }} shadow limit } }\n                </span>\n                <bb-currency-input-ui\n                  [formControl]=\"hostRef.limitForm.get('shadow').controls[i]\"\n                  placeholder=\"\"\n                  [integer]=\"true\"\n                  [allowNegativeValue]=\"false\"\n                  integerLabel=\" \"\n                  [integerLabelSrOnly]=\"true\"\n                  resultType=\"string\"\n                  [disabled]=\"hostRef.disableShadow\"\n                  [aria-labelledby]=\"i + '-shadow-limit-label'\"\n                  [aria-describedby]=\"i + '-shadow-limit-error'\"\n                  data-role=\"edit-limit-bound-item-shadow-limit\"></bb-currency-input-ui>\n              </div>\n            </div>\n          </div>\n          <div class=\"row\">\n            <div\n              class=\"bb-subtitle\"\n              [ngClass]=\"hostRef.showRegularLimit && hostRef.showShadowLimit ? 'col-5' : 'col-8'\"></div>\n            <div class=\"col\" *ngIf=\"hostRef.showRegularLimit\">\n              <div\n                class=\"bb-subheader bb-subheader--regular bb-text-support break-word\"\n                *ngIf=\"bound.regularConsumption\"\n                [hidden]=\"hostRef.limitForm.get('regular').controls[i].invalid\">\n                <bb-amount-ui\n                  [currency]=\"hostRef.currency\"\n                  [amount]=\"bound.regularConsumption\"\n                  [mapCurrency]=\"true\"\n                  data-role=\"edit-limit-bound-item-regular-consumed\"></bb-amount-ui>\n                <span i18n=\"Consumed amount for limit@@limits.edit.limits-bound.consumed\"> consumed</span>\n              </div>\n\n              <bb-input-validation-message-ui\n                [showErrors]=\"hostRef.limitForm.get('regular').controls[i].invalid\"\n                [messageId]=\"i + '-regular-limit-error'\">\n                <span\n                  *ngIf=\"hostRef.limitForm.get('regular').controls[i].invalid\"\n                  i18n=\"Validation error for regular limit@@limits.edit.limits-bound.regular.error.validation\"\n                  data-role=\"edit-limit-bound-item-regular-error-msg\">\n                  { hostRef.limitForm.get('regular').controls[i].errors.biggerThan, select, daily {Can't be higher than\n                  Daily limit} weekly {Can't be higher than Weekly limit} monthly {Can't be higher than Monthly limit}\n                  quarterly {Can't be higher than Quarterly limit} yearly {Can't be higher than Yearly limit} other {\n                  Can't be higher than {{ hostRef.limitForm.get('regular').controls[i].errors.biggerThan }} limit} }\n                </span>\n              </bb-input-validation-message-ui>\n            </div>\n            <div class=\"col\" *ngIf=\"hostRef.showShadowLimit\">\n              <div\n                class=\"bb-subheader bb-subheader--regular bb-text-support break-word\"\n                *ngIf=\"bound.shadowConsumption\"\n                [hidden]=\"hostRef.limitForm.get('shadow').controls[i].invalid\">\n                <bb-amount-ui\n                  [currency]=\"hostRef.currency\"\n                  [amount]=\"bound.shadowConsumption\"\n                  [mapCurrency]=\"true\"\n                  data-role=\"edit-limit-bound-item-shadow-consumed\"></bb-amount-ui>\n                <span i18n=\"Consumed amount for limit@@limits.edit.limits-bound.consumed\"> consumed</span>\n              </div>\n\n              <bb-input-validation-message-ui\n                [showErrors]=\"hostRef.limitForm.get('shadow').controls[i].invalid\"\n                [messageId]=\"i + '-shadow-limit-error'\">\n                <span\n                  *ngIf=\"hostRef.limitForm.get('shadow').controls[i].invalid\"\n                  i18n=\"Validation error for shadow limit@@limits.edit.limits-bound.shadow.error.validation\"\n                  data-role=\"edit-limit-bound-item-shadow-error-msg\">\n                  { hostRef.limitForm.get('shadow').controls[i].errors.biggerThan, select, daily {Can't be higher than\n                  Daily shadow limit} weekly {Can't be higher than Weekly shadow limit} monthly {Can't be higher than\n                  Monthly shadow limit} quarterly {Can't be higher than Quarterly shadow limit} yearly {Can't be higher\n                  than Yearly shadow limit} other { Can't be higher than\n                  {{ hostRef.limitForm.get('shadow').controls[i].errors.biggerThan }} shadow limit} }\n                </span>\n              </bb-input-validation-message-ui>\n            </div>\n          </div>\n        </div>\n      </div>\n    </ng-template>\n  </bb-modal-body-ui>\n  <bb-modal-footer-ui>\n    <ng-template bbCustomModalFooter>\n      <div class=\"bb-button-bar\">\n        <bb-load-button-ui\n          class=\"bb-button-bar__button\"\n          color=\"primary\"\n          [isLoading]=\"hostRef.showLoadingSubmitBtn\"\n          (bbKeyboardClick)=\"!hostRef.isDisabled && hostRef.submitForm()\"\n          [disabled]=\"hostRef.isDisabled\"\n          data-role=\"edit-limit-submit\">\n          <span i18n=\"Save button@@limits.edit.action-button.save\">Save</span>\n        </bb-load-button-ui>\n        <button\n          bbButton\n          color=\"link\"\n          class=\"bb-button-bar__button\"\n          (bbKeyboardClick)=\"hostRef.close.emit()\"\n          i18n=\"Cancel button@@limits.edit.action-button.cancel\"\n          data-role=\"edit-limit-cancel\">\n          Cancel\n        </button>\n      </div>\n    </ng-template>\n  </bb-modal-footer-ui>\n\n  <ng-template #noAmount>\n    <bb-icon-ui\n      data-role=\"edit-limit-bound-no-amount\"\n      class=\"bb-text-support\"\n      name=\"remove\"\n      color=\"support\"></bb-icon-ui>\n  </ng-template>\n\n  <ng-template #limitsTitleTooltip>\n    <span i18n=\"Limits modal header title tooltip @@limits.edit.period.tooltip\">\n      When setting limits, \u2018per transaction\u2019 should be your smallest value, with \u2018yearly\u2019 the largest.\n    </span>\n  </ng-template>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i1$2.ModalBodyComponent; }), selector: "bb-modal-body-ui" }, { type: i0.forwardRef(function () { return i2$2.AlertComponent; }), selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i0.forwardRef(function () { return i3$1.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0.forwardRef(function () { return i2$1.AmountComponent; }), selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: i0.forwardRef(function () { return i6$2.CurrencyInputComponent; }), selector: "bb-currency-input-ui", inputs: ["decMaxLen", "decMinLen", "placeholder", "resultType", "integer", "required", "readonly", "disabled", "integerLabelSrOnly", "decimalLabelSrOnly", "currencies", "isRightAligned", "integerId", "decimalId", "integerLabel", "decimalLabel", "currencyLabel", "allowNegativeValue", "currencyListAriaLabel", "currencyListWithOnItemAriaLabel", "aria-describedby", "aria-labelledby", "aria-invalid"], outputs: ["blur"] }, { type: i0.forwardRef(function () { return i7$2.InputValidationMessageComponent; }), selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i0.forwardRef(function () { return i1$2.ModalFooterComponent; }), selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }, { type: i0.forwardRef(function () { return i8$2.LoadButtonComponent; }), selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }], directives: [{ type: i0.forwardRef(function () { return EditLimitCustomizableDirective; }), selector: "[bbEditLimitCustomizable]" }, { type: i0.forwardRef(function () { return i1$2.CustomModalBodyDirective; }), selector: "ng-template[bbCustomModalBody]" }, { type: i0.forwardRef(function () { return i9.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i0.forwardRef(function () { return i9.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i9.NgClass; }), selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i0.forwardRef(function () { return i6$1.TooltipDirective; }), selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i0.forwardRef(function () { return i9.NgSwitch; }), selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i0.forwardRef(function () { return i9.NgSwitchCase; }), selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i0.forwardRef(function () { return i9.NgSwitchDefault; }), selector: "[ngSwitchDefault]" }, { type: i0.forwardRef(function () { return i1$1.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0.forwardRef(function () { return i1$1.FormControlDirective; }), selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i0.forwardRef(function () { return i1$2.CustomModalFooterDirective; }), selector: "ng-template[bbCustomModalFooter]" }, { type: i0.forwardRef(function () { return i8$1.KeyboardClickDirective; }), selector: "[bbKeyboardClick]", outputs: ["bbKeyboardClick"] }, { type: i0.forwardRef(function () { return i7$1.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditLimitComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-edit-limit',
                    templateUrl: 'edit-limit.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$1.FormBuilder }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { showRegularLimit: [{
                type: Input
            }], showShadowLimit: [{
                type: Input
            }], limitBounds: [{
                type: Input
            }], currency: [{
                type: Input
            }], showLoadingSubmitBtn: [{
                type: Input
            }], errors: [{
                type: Input
            }], disableRegular: [{
                type: Input
            }], disableShadow: [{
                type: Input
            }], submit: [{
                type: Output
            }], close: [{
                type: Output
            }] } });
class EditLimitCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ EditLimitCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditLimitCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ EditLimitCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: EditLimitCustomizableDirective, selector: "[bbEditLimitCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditLimitCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbEditLimitCustomizable]',
                }]
        }] });

const PENDING_APPROVAL_STATUS = 'PENDING';
class ManageLimitsModalComponent {
    constructor(notificationService, limitsService) {
        this.notificationService = notificationService;
        this.limitsService = limitsService;
        /**
         * Success both limits template reference
         */
        this.successBothLimitTemplate = '';
        /**
         * Success Regular limits create template reference
         */
        this.successRegularLimitCreateTemplate = '';
        /**
         * Success Regular limits update template reference
         */
        this.successRegularLimitUpdateTemplate = '';
        /**
         * Success Shadow limits create template reference
         */
        this.successShadowLimitCreateTemplate = '';
        /**
         * Success shadow limit update template reference
         */
        this.successShadowLimitUpdateTemplate = '';
        /**
         * Fail both limits template reference
         */
        this.failBothLimitTemplate = '';
        /**
         * Fail regular limit create template reference
         */
        this.failRegularLimitCreateTemplate = '';
        /**
         * Fail regular limit update template reference
         */
        this.failRegularLimitUpdateTemplate = '';
        /**
         * Fail shadow limit create template reference
         */
        this.failShadowLimitCreateTemplate = '';
        /**
         * Fail shadow limit update template reference
         */
        this.failShadowLimitUpdateTemplate = '';
        /**
         * Limits pending notification template reference
         */
        this.limitsPendingNotificationTemplate = '';
        /**
         * Shadow Limits pending notification template reference
         */
        this.shadowLimitsPendingNotificationTemplate = '';
        /**
         * Flag for show/hide regular limit column.
         */
        this.showRegularLimit = false;
        /**
         * Flag for show/hide shadow limit column.
         */
        this.showShadowLimit = false;
        /**
         * Notification dismiss time in milliseconds (defaults to 3000)
         * @default 3000
         */
        this.notificationDismissTime = 3000;
        /**
         * Close modal window event.
         * Propagate event when modal window should be closed.
         */
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.close = new EventEmitter();
        this.pendingSubmitSubject = new Subject();
        /**
         * Stream of pending submit flag value
         */
        this.pendingSubmit$ = this.pendingSubmitSubject.pipe(distinctUntilChanged());
        this.errorsBESubject = new Subject();
        /**
         * Stream of BE errors
         */
        this.errorsBE$ = this.errorsBESubject.pipe(distinctUntilChanged());
        this.disableRegularSubject = new BehaviorSubject(false);
        /**
         * Stream of Disable regular limits flag
         */
        this.disableRegular$ = this.disableRegularSubject.pipe(distinctUntilChanged());
        this.disableShadowSubject = new BehaviorSubject(false);
        /**
         * Stream of Disable shadow limits flag
         */
        this.disableShadow$ = this.disableShadowSubject.pipe(distinctUntilChanged());
        /**
         * Currency form control
         */
        this.currencyControl = new FormControl();
        /**
         * Show notification stream
         */
        this.showNotification$ = new Subject();
        /**
         * Unsubscribe stream
         */
        this.destroy$ = new Subject();
    }
    ngOnInit() {
        this.showNotification$.pipe(takeUntil(this.destroy$)).subscribe(({ header, modifier }) => {
            this.notificationService.showNotification({
                modifier,
                header,
                message: '',
                dismissible: true,
                ttl: this.notificationDismissTime,
            });
        });
    }
    /**
     * Function for calling create/update limits API calls
     * @param event - any
     */
    submitLimits(event) {
        this.pendingSubmitSubject.next(true);
        this.errorsBESubject.next();
        let requestData;
        const requestDataList = [];
        const requests = [];
        if (this.showRegularLimit && !this.disableRegularSubject.value && event.isRegularChanged) {
            requestData = this.generateManageLimitRequestData(event.limitValue, false);
            requestDataList.push(requestData);
            requests.push(requestData.uuid
                ? this.limitsService
                    .updateLimit(requestData.uuid, this.generateManageLimitRequestUpdateData(event.limitValue, false))
                    .pipe(catchError(err => of(Object.assign({ isError: true }, err))))
                : this.limitsService.createNewLimit(requestData).pipe(catchError(err => of(Object.assign({ isError: true }, err)))));
        }
        if (this.showShadowLimit && !this.disableShadowSubject.value && event.isShadowChanged) {
            requestData = this.generateManageLimitRequestData(event.limitValue, true);
            requestDataList.push(requestData);
            requests.push(requestData.uuid
                ? this.limitsService
                    .updateLimit(requestData.uuid, this.generateManageLimitRequestUpdateData(event.limitValue, true))
                    .pipe(catchError(err => of(Object.assign({ isError: true }, err))))
                : this.limitsService.createNewLimit(requestData).pipe(catchError(err => of(Object.assign({ isError: true }, err)))));
        }
        forkJoin(requests)
            .pipe(finalize(() => this.pendingSubmitSubject.next(false)), takeUntil(this.destroy$))
            .subscribe(resp => this.parseSubmitLimitsResponse(resp, requestDataList));
    }
    /**
     * Parse response of manage limits API
     * @param response - any
     * @param requests - any[]
     */
    parseSubmitLimitsResponse(response, requests) {
        const errors = response.filter((item) => item.isError);
        if (!errors.length) {
            if (response.filter((item) => item.approvalStatus === PENDING_APPROVAL_STATUS).length) {
                this.showAllIsPendingNotification(requests);
            }
            else {
                this.showNotification(this.successBothLimitTemplate);
            }
            this.close.emit();
        }
        else if (errors.length === response.length) {
            this.showNotification(this.failBothLimitTemplate, 'error');
        }
        else {
            response.forEach((item, index) => {
                if (item.approvalStatus === PENDING_APPROVAL_STATUS) {
                    this.showPendingLimitNotification(requests[index]);
                }
                else {
                    this.showLimitNotification(requests[index], item.isError);
                }
            });
            if (!this.currency) {
                this.currency = this.currencyControl.value;
            }
        }
        this.generateBEErrors(errors);
    }
    /**
     * Generate list of BE errors
     * @param errors - any[]
     */
    generateBEErrors(errors) {
        if (!errors.length) {
            return;
        }
        const errorsBE = [];
        errors.forEach((errorItem) => {
            const error = errorItem.error;
            if (error) {
                if (error.errorDetails) {
                    errorsBE.push(...this.parseErrorDetails(error.errorDetails));
                }
                else if (error.message) {
                    errorsBE.push({ message: error.message });
                }
            }
            else if (errorItem.message) {
                errorsBE.push({ message: errorItem.message });
            }
        });
        this.errorsBESubject.next(errorsBE);
    }
    /**
     * Parse errorDetails object and return array of error
     * @param errorDetails - any
     * @return any[]
     */
    parseErrorDetails(errorDetails) {
        const errorsBE = [];
        if (errorDetails && errorDetails.errorFields) {
            errorsBE.push(...errorDetails.errorFields);
        }
        else if (errorDetails.message) {
            errorsBE.push({ message: errorDetails.message });
        }
        return errorsBE;
    }
    /**
     * Show appropriate notification after create/update limits
     * @param request - any
     * @param isError - boolean
     */
    showLimitNotification(request, isError) {
        if (isError) {
            this.showErrorLimitNotification(request);
        }
        else {
            this.showSuccessLimitNotification(request);
        }
    }
    /**
     * Show error notification for limit request
     * @param request - any
     */
    showErrorLimitNotification(request) {
        if (request.shadow) {
            this.showNotification(request.uuid ? this.failShadowLimitUpdateTemplate : this.failShadowLimitCreateTemplate, 'error');
        }
        else {
            this.showNotification(request.uuid ? this.failRegularLimitUpdateTemplate : this.failRegularLimitCreateTemplate, 'error');
        }
    }
    /**
     * Show success notification for limit request
     * @param request - any
     */
    showSuccessLimitNotification(request) {
        if (!request.shadow) {
            this.showNotification(request.uuid ? this.successRegularLimitUpdateTemplate : this.successRegularLimitCreateTemplate);
            this.disableRegularSubject.next(true);
        }
        else {
            this.showNotification(request.uuid ? this.successShadowLimitUpdateTemplate : this.successShadowLimitCreateTemplate);
            this.disableShadowSubject.next(true);
        }
    }
    /**
     * Show success pending notification for limit requests
     * @param requests - any[]
     */
    showAllIsPendingNotification(requests) {
        if (requests.length === 1 && requests[0].shadow) {
            this.showNotification(this.shadowLimitsPendingNotificationTemplate, 'success');
        }
        else {
            this.showNotification(this.limitsPendingNotificationTemplate, 'success');
        }
    }
    /**
     * Show pending notification which happened with another failed request
     * @param request - any
     */
    showPendingLimitNotification(request) {
        if (request.shadow) {
            this.showNotification(this.shadowLimitsPendingNotificationTemplate, 'success');
            this.disableShadowSubject.next(true);
        }
        else {
            this.showNotification(this.limitsPendingNotificationTemplate, 'success');
            this.disableRegularSubject.next(true);
        }
    }
    /**
     * Show notification
     * @param messageRef - TemplateRef<any> | string
     * @param type - any
     */
    showNotification(messageRef, type = 'success') {
        this.showNotification$.next({
            modifier: type,
            header: messageRef,
        });
    }
    /**
     * Mapper for converting limits form value into request body for manage limits API
     * @param limitValue - any
     * @param isShadow - boolean
     */
    generateManageLimitRequestData(limitValue, isShadow) {
        const limitType = isShadow ? 'shadow' : 'regular';
        const requestData = {
            'user-BBID': this.limitKey['user-BBID'],
            entities: this.limitKey.lookupKeys,
            shadow: isShadow,
            currency: this.currency || this.currencyControl.value,
        };
        requestData[PERIODIC_LIMITS_BOUNDS] = {
            customPeriods: [],
        };
        if (this.limitIds && this.limitIds[limitType]) {
            requestData.uuid = this.limitIds[limitType];
        }
        this.limitBounds.forEach((limitBound, index) => {
            var _a;
            const amount = (_a = limitValue[limitType][index]) === null || _a === void 0 ? void 0 : _a.amount.replace(AMOUNT_DELIMETER_REG_EXP, '');
            switch (limitBound.period) {
                case TRANSACTIONAL_LIMITS_BOUNDS:
                    requestData[TRANSACTIONAL_LIMITS_BOUNDS] = {
                        amount,
                    };
                    break;
                case 'daily':
                case 'weekly':
                case 'monthly':
                case 'quarterly':
                case 'yearly':
                    requestData[PERIODIC_LIMITS_BOUNDS][limitBound.period] = amount;
                    break;
                default:
                    requestData[PERIODIC_LIMITS_BOUNDS].customPeriods.push({
                        period: limitBound.period,
                        amount,
                    });
                    break;
            }
        });
        return requestData;
    }
    generateManageLimitRequestUpdateData(limitValue, isShadow) {
        const requestData = {};
        const limitType = isShadow ? 'shadow' : 'regular';
        requestData[PERIODIC_LIMITS_BOUNDS] = {
            customPeriods: [],
        };
        this.limitBounds.forEach((limitBound, index) => {
            var _a;
            const amount = (_a = limitValue[limitType][index]) === null || _a === void 0 ? void 0 : _a.amount;
            switch (limitBound.period) {
                case TRANSACTIONAL_LIMITS_BOUNDS:
                    requestData[TRANSACTIONAL_LIMITS_BOUNDS] = {
                        amount,
                    };
                    break;
                case 'daily':
                case 'weekly':
                case 'monthly':
                case 'quarterly':
                case 'yearly':
                    requestData[PERIODIC_LIMITS_BOUNDS][limitBound.period] = amount;
                    break;
                default:
                    requestData[PERIODIC_LIMITS_BOUNDS].customPeriods.push({
                        period: limitBound.period,
                        amount,
                    });
                    break;
            }
        });
        return requestData;
    }
    /**
     * Limit currency getter
     */
    get getCurrency() {
        return this.currency || this.currencyControl.value;
    }
    /**
     * OpenChange modal window event handler.
     * @param isOpen - boolean
     */
    onOpenChange(isOpen) {
        if (!isOpen) {
            this.close.emit();
        }
    }
    ngOnDestroy() {
        this.destroy$.next();
    }
}
/** @nocollapse */ ManageLimitsModalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManageLimitsModalComponent, deps: [{ token: i2.NotificationService }, { token: LimitsService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ ManageLimitsModalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ManageLimitsModalComponent, selector: "bb-manage-limits-modal", inputs: { view: "view", limitBounds: "limitBounds", showRegularLimit: "showRegularLimit", showShadowLimit: "showShadowLimit", currency: "currency", limitKey: "limitKey", limitIds: "limitIds", pending: "pending", headerTitle: "headerTitle", serviceAgreementId: "serviceAgreementId", legalEntityId: "legalEntityId", headerSubTitleUserName: "headerSubTitleUserName", headerSubTitleJRName: "headerSubTitleJRName", headerSubTitleLEName: "headerSubTitleLEName", headerSubTitleSAName: "headerSubTitleSAName", notificationDismissTime: "notificationDismissTime" }, outputs: { close: "close" }, viewQueries: [{ propertyName: "successBothLimitTemplate", first: true, predicate: ["successBothLimit"], descendants: true }, { propertyName: "successRegularLimitCreateTemplate", first: true, predicate: ["successRegularLimitCreate"], descendants: true }, { propertyName: "successRegularLimitUpdateTemplate", first: true, predicate: ["successRegularLimitUpdate"], descendants: true }, { propertyName: "successShadowLimitCreateTemplate", first: true, predicate: ["successShadowLimitCreate"], descendants: true }, { propertyName: "successShadowLimitUpdateTemplate", first: true, predicate: ["successShadowLimitUpdate"], descendants: true }, { propertyName: "failBothLimitTemplate", first: true, predicate: ["failBothLimit"], descendants: true }, { propertyName: "failRegularLimitCreateTemplate", first: true, predicate: ["failRegularLimitCreate"], descendants: true }, { propertyName: "failRegularLimitUpdateTemplate", first: true, predicate: ["failRegularLimitUpdate"], descendants: true }, { propertyName: "failShadowLimitCreateTemplate", first: true, predicate: ["failShadowLimitCreate"], descendants: true }, { propertyName: "failShadowLimitUpdateTemplate", first: true, predicate: ["failShadowLimitUpdate"], descendants: true }, { propertyName: "limitsPendingNotificationTemplate", first: true, predicate: ["limitsPendingNotificationTemplate"], descendants: true }, { propertyName: "shadowLimitsPendingNotificationTemplate", first: true, predicate: ["shadowLimitsPendingNotificationTemplate"], descendants: true }], ngImport: i0, template: "<ng-container\n  bbManageLimitsModalCustomizable\n  [bbHostRef]=\"this\"\n  [bbTemplateContext]=\"{\n    pendingSubmit: pendingSubmit$ | async,\n    errorsBE: errorsBE$ | async,\n    disableRegular: disableRegular$ | async,\n    disableShadow: disableShadow$ | async\n  }\"></ng-container>\n\n<ng-template\n  bbManageLimitsModalCustomizable\n  let-hostRef\n  let-pendingSubmit=\"context.pendingSubmit\"\n  let-errorsBE=\"context.errorsBE\"\n  let-disableRegular=\"context.disableRegular\"\n  let-disableShadow=\"context.disableShadow\">\n  <bb-modal-ui\n    data-role=\"bb-manage-limits-modal-container\"\n    [isOpen]=\"true\"\n    [modalOptions]=\"{\n      backdrop: 'static',\n      centered: true,\n      keyboard: true,\n      size: 'md'\n    }\"\n    (isOpenChange)=\"hostRef.onOpenChange($event)\">\n    <bb-modal-header-ui>\n      <ng-template bbCustomModalHeader>\n        <bb-manage-limits-modal-header\n          class=\"bb-stack__item bb-stack__item--fill\"\n          [currency]=\"hostRef.currency\"\n          [currencyControl]=\"hostRef.currencyControl\"\n          [title]=\"hostRef.headerTitle\"\n          [serviceAgreementId]=\"hostRef.serviceAgreementId\"\n          [legalEntityId]=\"hostRef.legalEntityId\"\n          [subTitleUserName]=\"hostRef.headerSubTitleUserName\"\n          [subTitleJRName]=\"hostRef.headerSubTitleJRName\"\n          [subTitleLEName]=\"hostRef.headerSubTitleLEName\"\n          [subTitleSAName]=\"hostRef.headerSubTitleSAName\"\n          [notificationDismissTime]=\"hostRef._notificationDismissTime\"\n          (close)=\"hostRef.onOpenChange(false)\"\n          defaultTitle=\"Limits\"\n          i18n-defaultTitle=\"Limits modal header title@@manage-limits-modal.header.title\"\n          data-role=\"manage-limits-modal-header\"></bb-manage-limits-modal-header>\n      </ng-template>\n    </bb-modal-header-ui>\n\n    <!-- NOTE: View and Edit template should define it's own header, footer, and body templates here -->\n    <ng-container *ngIf=\"hostRef.getCurrency\" [ngSwitch]=\"hostRef.view\">\n      <ng-container *ngSwitchCase=\"'view'\">\n        <bb-manage-limits-modal-view-body\n          [limitBounds]=\"hostRef.limitBounds\"\n          [showRegularLimit]=\"hostRef.showRegularLimit\"\n          [showShadowLimit]=\"hostRef.showShadowLimit\"\n          [pending]=\"hostRef.pending\"\n          [currency]=\"hostRef.currency\"\n          (cancel)=\"hostRef.onOpenChange(false)\"\n          data-role=\"bb-manage-limits-modal-view\"></bb-manage-limits-modal-view-body>\n      </ng-container>\n      <ng-container *ngSwitchCase=\"'edit'\">\n        <bb-edit-limit\n          [limitBounds]=\"hostRef.limitBounds\"\n          [showRegularLimit]=\"hostRef.showRegularLimit\"\n          [showShadowLimit]=\"hostRef.showShadowLimit\"\n          [disableRegular]=\"disableRegular\"\n          [disableShadow]=\"disableShadow\"\n          [currency]=\"hostRef.getCurrency\"\n          [showLoadingSubmitBtn]=\"pendingSubmit\"\n          [errors]=\"errorsBE\"\n          (submit)=\"hostRef.submitLimits($event)\"\n          (close)=\"hostRef.onOpenChange(false)\"\n          data-role=\"bb-manage-limits-modal-edit\"></bb-edit-limit>\n      </ng-container>\n    </ng-container>\n  </bb-modal-ui>\n</ng-template>\n\n<ng-template #successBothLimit>\n  <span i18n=\"Both limits is successfully saved@@manage-limits-modal.notification.save.success\">\n    Limits successfully saved\n  </span>\n</ng-template>\n<ng-template #successRegularLimitCreate>\n  <span i18n=\"Regular limits is successfully added@@manage-limits-modal.notification.create.success.regular\">\n    Regular limits successfully added\n  </span>\n</ng-template>\n<ng-template #successRegularLimitUpdate>\n  <span i18n=\"Regular limits is successfully updated@@manage-limits-modal.notification.update.success.regular\">\n    Regular limits successfully updated\n  </span>\n</ng-template>\n<ng-template #successShadowLimitCreate>\n  <span i18n=\"Shadow limits is successfully added@@manage-limits-modal.notification.create.success.shadow\">\n    Shadow limits successfully added\n  </span>\n</ng-template>\n<ng-template #successShadowLimitUpdate>\n  <span i18n=\"Shadow limits is successfully updated@@manage-limits-modal.notification.update.success.shadow\">\n    Shadow limits successfully updated\n  </span>\n</ng-template>\n<ng-template #failBothLimit>\n  <span i18n=\"Both limits are failed to saved@@manage-limits-modal.notification.save.error\">\n    Limits failed to save\n  </span>\n</ng-template>\n<ng-template #failRegularLimitCreate>\n  <span i18n=\"Regular limits are failed to create@@manage-limits-modal.notification.create.error.regular\">\n    Regular limits failed to add\n  </span>\n</ng-template>\n<ng-template #failRegularLimitUpdate>\n  <span i18n=\"Regular limits are failed to update@@manage-limits-modal.notification.update.error.regular\">\n    Regular limits failed to update\n  </span>\n</ng-template>\n<ng-template #failShadowLimitCreate>\n  <span i18n=\"Shadow limits are failed to create@@manage-limits-modal.notification.create.error.shadow\">\n    Shadow limits failed to add\n  </span>\n</ng-template>\n<ng-template #failShadowLimitUpdate>\n  <span i18n=\"Shadow limits are failed to update@@manage-limits-modal.notification.update.error.shadow\">\n    Shadow limits failed to update\n  </span>\n</ng-template>\n<ng-template #limitsPendingNotificationTemplate>\n  <span\n    i18n=\"\n      Success notification when limits changed but changes are in pending\n      state@@manage-limits-modal.notification.pending.limit\">\n    The limits are in pending state, and will be active once they are approved\n  </span>\n</ng-template>\n\n<ng-template #shadowLimitsPendingNotificationTemplate>\n  <span\n    i18n=\"\n      Success notification when shadow limits changed but changes are in pending\n      state@@manage-limits-modal.notification.pending.shadow-limit\">\n    The shadow limits are in pending state, and will be active once they are approved\n  </span>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i1$2.ModalComponent; }), selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i0.forwardRef(function () { return i1$2.ModalHeaderComponent; }), selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i0.forwardRef(function () { return ManageLimitsModalHeaderComponent; }), selector: "bb-manage-limits-modal-header", inputs: ["currency", "currencyControl", "defaultTitle", "title", "serviceAgreementId", "legalEntityId", "subTitleUserName", "subTitleJRName", "subTitleLEName", "subTitleSAName", "notificationDismissTime"], outputs: ["close"] }, { type: i0.forwardRef(function () { return ManageLimitsModalViewBodyComponent; }), selector: "bb-manage-limits-modal-view-body", inputs: ["showRegularLimit", "showShadowLimit", "pending", "currency", "limitBounds"], outputs: ["cancel"] }, { type: i0.forwardRef(function () { return EditLimitComponent; }), selector: "bb-edit-limit", inputs: ["showRegularLimit", "showShadowLimit", "limitBounds", "currency", "showLoadingSubmitBtn", "errors", "disableRegular", "disableShadow"], outputs: ["submit", "close"] }], directives: [{ type: i0.forwardRef(function () { return ManageLimitsModalCustomizableDirective; }), selector: "[bbManageLimitsModalCustomizable]" }, { type: i0.forwardRef(function () { return i1$2.CustomModalHeaderDirective; }), selector: "ng-template[bbCustomModalHeader]" }, { type: i0.forwardRef(function () { return i9.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i9.NgSwitch; }), selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i0.forwardRef(function () { return i9.NgSwitchCase; }), selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }], pipes: { "async": i0.forwardRef(function () { return i9.AsyncPipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManageLimitsModalComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-manage-limits-modal',
                    templateUrl: 'manage-limits-modal.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i2.NotificationService }, { type: LimitsService }]; }, propDecorators: { successBothLimitTemplate: [{
                type: ViewChild,
                args: ['successBothLimit']
            }], successRegularLimitCreateTemplate: [{
                type: ViewChild,
                args: ['successRegularLimitCreate']
            }], successRegularLimitUpdateTemplate: [{
                type: ViewChild,
                args: ['successRegularLimitUpdate']
            }], successShadowLimitCreateTemplate: [{
                type: ViewChild,
                args: ['successShadowLimitCreate']
            }], successShadowLimitUpdateTemplate: [{
                type: ViewChild,
                args: ['successShadowLimitUpdate']
            }], failBothLimitTemplate: [{
                type: ViewChild,
                args: ['failBothLimit']
            }], failRegularLimitCreateTemplate: [{
                type: ViewChild,
                args: ['failRegularLimitCreate']
            }], failRegularLimitUpdateTemplate: [{
                type: ViewChild,
                args: ['failRegularLimitUpdate']
            }], failShadowLimitCreateTemplate: [{
                type: ViewChild,
                args: ['failShadowLimitCreate']
            }], failShadowLimitUpdateTemplate: [{
                type: ViewChild,
                args: ['failShadowLimitUpdate']
            }], limitsPendingNotificationTemplate: [{
                type: ViewChild,
                args: ['limitsPendingNotificationTemplate']
            }], shadowLimitsPendingNotificationTemplate: [{
                type: ViewChild,
                args: ['shadowLimitsPendingNotificationTemplate']
            }], view: [{
                type: Input
            }], limitBounds: [{
                type: Input
            }], showRegularLimit: [{
                type: Input
            }], showShadowLimit: [{
                type: Input
            }], currency: [{
                type: Input
            }], limitKey: [{
                type: Input
            }], limitIds: [{
                type: Input
            }], pending: [{
                type: Input
            }], headerTitle: [{
                type: Input
            }], serviceAgreementId: [{
                type: Input
            }], legalEntityId: [{
                type: Input
            }], headerSubTitleUserName: [{
                type: Input
            }], headerSubTitleJRName: [{
                type: Input
            }], headerSubTitleLEName: [{
                type: Input
            }], headerSubTitleSAName: [{
                type: Input
            }], notificationDismissTime: [{
                type: Input
            }], close: [{
                type: Output
            }] } });
class ManageLimitsModalCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ ManageLimitsModalCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManageLimitsModalCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ ManageLimitsModalCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ManageLimitsModalCustomizableDirective, selector: "[bbManageLimitsModalCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManageLimitsModalCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbManageLimitsModalCustomizable]',
                }]
        }] });

const getBusinessFunctionPrivilege = (permission, businessFunction, key) => {
    const privilege = businessFunction.privileges.find((e) => e.privilege === key);
    const assigned = !!permission.assignedPrivileges.find(assignedPrivilege => assignedPrivilege.privilege === key);
    const supportsLimits = privilege ? privilege.supportsLimit : false;
    return {
        applicable: !!privilege,
        assigned,
        supportsLimits,
    };
};
const PRIVILEGES = ['execute', 'view', 'create', 'edit', 'delete', 'approve', 'cancel'];
const getExtendedBusinessFunctions = (functionGroup, allBusinessFunctions, filterHookEnabled = false) => {
    if (functionGroup && functionGroup.permissions) {
        const { permissions } = functionGroup;
        const businessFunctionById = allBusinessFunctions.reduce((memo, item) => (Object.assign(Object.assign({}, memo), { [item.functionId]: item })), {});
        if (filterHookEnabled) {
            return permissions
                .filter((permission) => {
                if (permission.functionId === '1004')
                    permission.functionId = '1045'; // TODO fix me in mocks
                const businessFunction = businessFunctionById[permission.functionId];
                return Boolean(businessFunction);
            })
                .map((permission) => permissionMapper(permission, businessFunctionById));
        }
        return permissions.map((permission) => permissionMapper(permission, businessFunctionById));
    }
    return [];
};
function permissionMapper(permission, businessFunctionById) {
    if (permission.functionId === '1004')
        permission.functionId = '1045'; // TODO fix me in mocks
    const businessFunction = businessFunctionById[permission.functionId];
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const { privileges } = businessFunction, rest = __rest(businessFunction, ["privileges"]);
    const privilegesObj = PRIVILEGES.map(priv => ({
        [priv]: getBusinessFunctionPrivilege(permission, businessFunction, priv),
    })).reduce((memo, item) => (Object.assign(Object.assign({}, memo), item)));
    return Object.assign(Object.assign({}, rest), { privileges: privilegesObj });
}

const extractParticipantsThatShareAccounts = (serviceAgreement) => serviceAgreement.participants
    .filter((participant) => participant.sharingAccounts)
    .map((participant) => participant.id);

var FormAction;
(function (FormAction) {
    FormAction[FormAction["CREATE"] = 0] = "CREATE";
    FormAction[FormAction["EDIT"] = 1] = "EDIT";
    FormAction[FormAction["LIST"] = 2] = "LIST";
    FormAction[FormAction["ADD"] = 3] = "ADD";
    FormAction[FormAction["REMOVE"] = 4] = "REMOVE";
})(FormAction || (FormAction = {}));
const errorKindMap = {
    0: 'ConnectivityError',
    400: 'BadRequest',
    401: 'AccessDenied',
    403: 'AccessDenied',
};
const extractKeys = (httpError) => httpError && httpError.error && httpError.error.errors
    ? httpError.error.errors.map(({ message, key }) => ({
        message,
        key,
    }))
    : [];
const parseError = (widgetName, error, action = FormAction.LIST) => ({
    kind: `${widgetName}${errorKindMap[error.status] || 'UnknownError'}`,
    error,
    action,
    keys: extractKeys(error),
});
const hasError = (control, type) => {
    if (!control || !control.errors) {
        return false;
    }
    return !!control.errors[type];
};
const isFieldValid = (control) => {
    if (control) {
        return control.valid || control.untouched;
    }
    return false;
};
/**
 * Get original error msg for no typed error
 */
const errorMsg = (error) => {
    if (error && error.keys && error.keys.length) {
        const msgArray = [];
        error.keys.forEach((element) => msgArray.push(element.message));
        return msgArray.join('.');
    }
    return 'UnknownError';
};

function scanAndMergePaginatedItems() {
    return (memo, item) => {
        if (item.from === 0 || item.paginationType === 'pagination') {
            return item;
        }
        return Object.assign(Object.assign({}, item), { items: [...memo.items, ...item.items] });
    };
}
const extractDataFromResponse = (from, paginationType) => {
    return (response) => ({
        items: response.body || [],
        totalItems: parseInt(response.headers.get('x-total-count') || `${(response.body || []).length}`, 10),
        from,
        paginationType,
    });
};

const getRouteParams = (route, param, router) => {
    var _a;
    const url = router ? router.routerState.snapshot.url + '/' : undefined;
    const strRegEx = `(?:;${param}=).+?(?=\\/)`;
    const regEx = new RegExp(strRegEx, 'g');
    if (url && ((_a = url.match(regEx)) === null || _a === void 0 ? void 0 : _a.length)) {
        // @ts-ignore
        return of(url.match(regEx)[0].replace(';' + param + '=', ''));
    }
    const paramValue = route.paramMap.pipe(pluck('params', param));
    if (!route.parent) {
        return paramValue;
    }
    return combineLatest([paramValue, getRouteParams(route.parent, param)]).pipe(map(params => params[0] || params[1]));
};

const functionAccessGroups = [
    {
        id: 'f34f7587-5ded-4f51-94c3-3a89d1b64538',
        name: 'Manage Entitlements',
        description: 'This profile will control managing of entitlements',
        serviceAgreementId: '1642b2e1-61c4-4ce3-8bd9-877327587f4b',
        validFromDate: '2019-08-16',
        validFromTime: '16:43:52',
        validUntilDate: '2019-08-23',
        validUntilTime: '16:43:52',
        permissions: [
            {
                functionId: '1011',
                assignedPrivileges: [
                    {
                        privilege: 'view',
                    },
                ],
            },
            {
                functionId: '1010',
                assignedPrivileges: [
                    {
                        privilege: 'execute',
                    },
                ],
            },
            {
                functionId: '1009',
                assignedPrivileges: [
                    {
                        privilege: 'create',
                    },
                    {
                        privilege: 'view',
                    },
                    {
                        privilege: 'edit',
                    },
                ],
            },
        ],
        type: 'REGULAR',
    },
    {
        id: 'f34f7587-5ded-4f51-94c3-3a89d1b64539',
        name: 'Manage Something Completely Different',
        description: 'And now... something completely different!',
        serviceAgreementId: '1642b2e1-61c4-4ce3-8bd9-877327587f4b',
        permissions: [
            {
                functionId: '1002',
                assignedPrivileges: [
                    {
                        privilege: 'view',
                    },
                ],
            },
            {
                functionId: '1011',
                assignedPrivileges: [
                    {
                        privilege: 'view',
                    },
                ],
            },
            {
                functionId: '1010',
                assignedPrivileges: [
                    {
                        privilege: 'execute',
                    },
                ],
            },
            {
                functionId: '1009',
                assignedPrivileges: [
                    {
                        privilege: 'create',
                    },
                    {
                        privilege: 'view',
                    },
                    {
                        privilege: 'edit',
                    },
                ],
            },
        ],
        type: 'TEMPLATE',
    },
];
const businessFunctions = [
    {
        functionId: '1002',
        functionCode: 'payments.sepa',
        resource: 'Payments',
        name: 'SEPA CT',
        privileges: [
            { privilege: 'view', supportsLimit: false },
            { privilege: 'edit', supportsLimit: false },
            { privilege: 'delete', supportsLimit: false },
            { privilege: 'create', supportsLimit: true },
            { privilege: 'approve', supportsLimit: false },
            { privilege: 'cancel', supportsLimit: false },
        ],
    },
    {
        functionId: '1009',
        functionCode: 'assign.permissions',
        resource: 'Service Agreement',
        name: 'Assign Permissions',
        privileges: [
            { privilege: 'approve', supportsLimit: false },
            { privilege: 'view', supportsLimit: false },
            { privilege: 'create', supportsLimit: false },
            { privilege: 'edit', supportsLimit: false },
        ],
    },
    {
        functionId: '1010',
        functionCode: 'manage.users',
        resource: 'User',
        name: 'Manage Users',
        privileges: [{ privilege: 'view', supportsLimit: false }],
    },
    {
        functionId: '1011',
        functionCode: 'manage.legalentities',
        resource: 'Legal Entity',
        name: 'Manage Legal Entities',
        privileges: [
            { privilege: 'create', supportsLimit: false },
            { privilege: 'edit', supportsLimit: false },
            { privilege: 'delete', supportsLimit: false },
            { privilege: 'approve', supportsLimit: false },
            { privilege: 'view', supportsLimit: false },
        ],
    },
];
const serviceAgreement = {
    id: 'a1198a205a404eb7b47fa553db920429',
    name: 'Online Banking Service Agreement',
    description: 'Service Agreement between Online Banking and Backbase',
    isMaster: false,
    creatorLegalEntity: 'a1198a205a404eb7b47fa553db920429',
    status: 'ENABLED',
};
const participants = [
    {
        id: 'a1198a20-5a40-4eb7-b47f-a553db958963',
        externalId: 'KPMG',
        name: 'KPMG',
        sharingUsers: true,
        sharingAccounts: false,
    },
    {
        id: 'a1198a20-5a40-4eb7-b47f-a553db920429',
        externalId: 'Backbase',
        name: 'Backbase',
        sharingUsers: false,
        sharingAccounts: true,
    },
];
const serviceAgreementWithParticipants = {
    serviceAgreement,
    participants,
};
const productSummaryMockResponse = [
    {
        id: 'e6659eea893c4da48f9b7fd425de4677',
        name: 'YOUTH SAVINGS ACCOUNT',
        bankAlias: 'YOUTH SAVINGS',
        bookedBalance: 33434.0,
        availableBalance: 3423.0,
        creditLimit: 100.0,
        IBAN: 'GB79BARC20040432885594',
        BBAN: '30041010050500013L01234',
        currency: 'USD',
        externalTransferAllowed: true,
        urgentTransferAllowed: false,
        accruedInterest: 1000.0,
        number: '0000',
        principalAmount: 100.0,
        currentInvestmentValue: 100.0,
        legalEntityIds: ['8a48e4116e11f5b6016e224929450218'],
        productId: '8a48e7546e11f733016e22493e3f4024',
        productNumber: '10-23/2168-9601',
        productKindName: 'Savings Account',
        productTypeName: 'Savings Account',
        BIC: 'COBADEFF',
        bankBranchCode: '0260-0959-3',
        visible: true,
        accountOpeningDate: '2017-05-12T00:00:00.000+0000',
        accountInterestRate: 11.0,
        valueDateBalance: 1000.0,
        creditLimitUsage: 2000.0,
        creditLimitInterestRate: 3.5,
        creditLimitExpiryDate: '2017-10-10T00:00:00.000+0000',
        startDate: '2017-12-12T00:00:00.000+0000',
        termUnit: 'D',
        termNumber: 12,
        interestPaymentFrequencyUnit: 'M',
        interestPaymentFrequencyNumber: 3333,
        maturityDate: '2019-07-07T00:00:00.000+0000',
        maturityAmount: 4000.0,
        autoRenewalIndicator: true,
        interestSettlementAccount: '30041010050500013L01234',
        outstandingPrincipalAmount: 9412.0,
        monthlyInstalmentAmount: 23.23,
        amountInArrear: 11.2,
        minimumRequiredBalance: 500.0,
        creditCardAccountNumber: '30569309025904',
        validThru: '2019-09-09T00:00:00.000+0000',
        applicableInterestRate: 333.1,
        remainingCredit: 4500.0,
        outstandingPayment: 2000.2,
        minimumPayment: 200.6,
        minimumPaymentDueDate: '2017-11-04T00:00:00.000+0000',
        totalInvestmentValue: 1000.0,
        debitCards: [
            { number: '2', expiryDate: '2017-11-11' },
            { number: '1', expiryDate: '2016-12-12' },
        ],
        postCode: '20',
        accountHolderCountry: 'MK',
        creditAccount: true,
        debitAccount: false,
        lastUpdateDate: '2018-11-11T00:00:00.000+0000',
        product: {
            externalId: '2',
            externalTypeId: 'Savings Account Type',
            typeName: 'Savings Account',
            productKind: { id: 2, externalKindId: 'kind2', kindName: 'Savings Account', kindUri: 'savings-account' },
        },
    },
    {
        id: '8eb58b1d048d4112a2f7591d465c3f14',
        name: 'YOUTH DEPOSIT ACCOUNT',
        bankAlias: 'YOUTH DEPOSIT',
        bookedBalance: 33434.0,
        availableBalance: 3423.0,
        creditLimit: 100.0,
        IBAN: 'GB70BARC20040149989815',
        BBAN: '30041010050500013L01234',
        currency: 'USD',
        externalTransferAllowed: true,
        urgentTransferAllowed: false,
        accruedInterest: 1000.0,
        number: '0000',
        principalAmount: 100.0,
        currentInvestmentValue: 100.0,
        legalEntityIds: ['8a48e4116e11f5b6016e224929450218'],
        productId: '8a48e7546e11f733016e224941ff4028',
        productNumber: '10-23/2168-9601',
        productKindName: 'Term Deposit',
        productTypeName: 'One Year Deposit',
        BIC: 'COBADEFF',
        bankBranchCode: '0260-0959-3',
        visible: true,
        accountOpeningDate: '2017-05-12T00:00:00.000+0000',
        accountInterestRate: 11.0,
        valueDateBalance: 1000.0,
        creditLimitUsage: 2000.0,
        creditLimitInterestRate: 3.5,
        creditLimitExpiryDate: '2017-10-10T00:00:00.000+0000',
        startDate: '2017-12-12T00:00:00.000+0000',
        termUnit: 'D',
        termNumber: 12,
        interestPaymentFrequencyUnit: 'M',
        interestPaymentFrequencyNumber: 3333,
        maturityDate: '2019-07-07T00:00:00.000+0000',
        maturityAmount: 4000.0,
        autoRenewalIndicator: true,
        interestSettlementAccount: '30041010050500013L01234',
        outstandingPrincipalAmount: 9412.0,
        monthlyInstalmentAmount: 23.23,
        amountInArrear: 11.2,
        minimumRequiredBalance: 500.0,
        creditCardAccountNumber: '30569309025904',
        validThru: '2019-09-09T00:00:00.000+0000',
        applicableInterestRate: 333.1,
        remainingCredit: 4500.0,
        outstandingPayment: 2000.2,
        minimumPayment: 200.6,
        minimumPaymentDueDate: '2017-11-04T00:00:00.000+0000',
        totalInvestmentValue: 1000.0,
        debitCards: [
            { number: '2', expiryDate: '2017-11-11' },
            { number: '1', expiryDate: '2016-12-12' },
        ],
        postCode: '20',
        accountHolderCountry: 'MK',
        creditAccount: true,
        debitAccount: false,
        lastUpdateDate: '2018-11-11T00:00:00.000+0000',
        product: {
            externalId: '6',
            externalTypeId: 'Term Deposit Type',
            typeName: 'One Year Deposit',
            productKind: { id: 6, externalKindId: 'kind6', kindName: 'Term Deposit', kindUri: 'term-deposit' },
        },
    },
];

const WidgetProperties = {
    PAGE_SIZE: 'pageSize',
    MAV_NAV_PAGES: 'maxNavPages',
    PAGINATION_TYPE: 'paginationType',
};
var AccessDataGroupTypes;
(function (AccessDataGroupTypes) {
    AccessDataGroupTypes["ARRANGEMENTS"] = "ARRANGEMENTS";
    AccessDataGroupTypes["CONTACTS"] = "CONTACTS";
})(AccessDataGroupTypes || (AccessDataGroupTypes = {}));
var ApprovalLevelStatus;
(function (ApprovalLevelStatus) {
    ApprovalLevelStatus[ApprovalLevelStatus["EMPTY"] = 0] = "EMPTY";
    ApprovalLevelStatus[ApprovalLevelStatus["ERROR"] = 1] = "ERROR";
})(ApprovalLevelStatus || (ApprovalLevelStatus = {}));

class UserPermissionsService {
    constructor(http) {
        this.http = http;
        /**
         * Current user permissions
         */
        this.userPermissions$ = this.getUserPermissions().pipe(shareReplay(1, 1000));
        /**
         * Current user Limits permissions
         */
        this.limitsPermissions$ = this.getPermissions('Limits', 'Manage Limits');
        /**
         * Payee group permissions
         */
        this.payeeGroupPermissions$ = this.getPermissions('Entitlements', 'Manage Data Groups');
        /**
         * Current user Shadow Limits permissions
         */
        this.shadowLimitsPermissions$ = this.getPermissions('Limits', 'Manage Shadow Limits');
        /**
         * Wizard permissions
         */
        this.entitlementsWizardPermissions$ = this.getPermissions('Entitlements', 'Quick User Setup');
    }
    /**
     * Return permissions based on provided resource and function names
     * @param resource: string - resource name
     * @param functionName: string - function name
     */
    getPermissions(resource, functionName) {
        return this.userPermissions$.pipe(
        // @ts-ignore
        map((data) => {
            // NOTE: Search key hardcoded by the purpose
            const limitsPerm = data.find(perm => perm.resource === resource && perm.function === functionName);
            return limitsPerm || undefined;
        }), map((perm) => (perm && perm.permissions) || {}), shareReplay(1));
    }
    /**
     * Return PermissionsSummary request stream
     */
    getUserPermissions() {
        return this.http.getUserPermissionsSummary();
    }
}
/** @nocollapse */ UserPermissionsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UserPermissionsService, deps: [{ token: i3.UsersHttpService }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ UserPermissionsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UserPermissionsService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UserPermissionsService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i3.UsersHttpService }]; } });

class LimitAccessService {
    constructor(userPermissionsService) {
        this.userPermissionsService = userPermissionsService;
    }
    /**
     * Current user limit access based on CXP property and user permission
     */
    limitAccess(enableLimit, enableShadowLimit) {
        if (enableLimit) {
            return combineLatest([
                this.userPermissionsService.shadowLimitsPermissions$,
                this.userPermissionsService.limitsPermissions$,
            ]).pipe(map(([shadowLimitsPermissions, limitsPermissions]) => {
                return {
                    regularLimit: limitsPermissions,
                    shadowLimit: enableShadowLimit ? shadowLimitsPermissions : {},
                };
            }), shareReplay(1));
        }
        else {
            return of({ regularLimit: {}, shadowLimit: {} });
        }
    }
}
/** @nocollapse */ LimitAccessService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LimitAccessService, deps: [{ token: UserPermissionsService }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ LimitAccessService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LimitAccessService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LimitAccessService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: UserPermissionsService }]; } });

const uiModules = [
    ModalModule,
    AmountModule,
    HeaderModule,
    IconModule,
    ButtonModule,
    DropdownSingleSelectModule,
    EllipsisModule,
    AlertModule,
    KeyboardClickModule,
    TooltipModule,
    LoadingIndicatorModule,
    CurrencyInputModule,
    LoadButtonModule,
    InputValidationMessageModule,
];
const services = [CurrencyService, LimitsService];
const components = [
    ManageLimitsModalComponent,
    ManageLimitsModalCustomizableDirective,
    ManageLimitsModalViewBodyComponent,
    ManageLimitsModalViewBodyCustomizableDirective,
    LimitBoundItemComponent,
    LimitBoundItemCustomizableDirective,
    ManageLimitsModalHeaderComponent,
    ManageLimitsModalHeaderCustomizableDirective,
    EditLimitComponent,
    EditLimitCustomizableDirective,
];
class ManageLimitsModalModule {
}
/** @nocollapse */ ManageLimitsModalModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManageLimitsModalModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ ManageLimitsModalModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManageLimitsModalModule, declarations: [ManageLimitsModalComponent,
        ManageLimitsModalCustomizableDirective,
        ManageLimitsModalViewBodyComponent,
        ManageLimitsModalViewBodyCustomizableDirective,
        LimitBoundItemComponent,
        LimitBoundItemCustomizableDirective,
        ManageLimitsModalHeaderComponent,
        ManageLimitsModalHeaderCustomizableDirective,
        EditLimitComponent,
        EditLimitCustomizableDirective], imports: [CommonModule, ReactiveFormsModule, ModalModule,
        AmountModule,
        HeaderModule,
        IconModule,
        ButtonModule,
        DropdownSingleSelectModule,
        EllipsisModule,
        AlertModule,
        KeyboardClickModule,
        TooltipModule,
        LoadingIndicatorModule,
        CurrencyInputModule,
        LoadButtonModule,
        InputValidationMessageModule], exports: [ReactiveFormsModule, ManageLimitsModalComponent,
        ManageLimitsModalCustomizableDirective,
        ManageLimitsModalViewBodyComponent,
        ManageLimitsModalViewBodyCustomizableDirective,
        LimitBoundItemComponent,
        LimitBoundItemCustomizableDirective,
        ManageLimitsModalHeaderComponent,
        ManageLimitsModalHeaderCustomizableDirective,
        EditLimitComponent,
        EditLimitCustomizableDirective, ModalModule,
        AmountModule,
        HeaderModule,
        IconModule,
        ButtonModule,
        DropdownSingleSelectModule,
        EllipsisModule,
        AlertModule,
        KeyboardClickModule,
        TooltipModule,
        LoadingIndicatorModule,
        CurrencyInputModule,
        LoadButtonModule,
        InputValidationMessageModule] });
/** @nocollapse */ ManageLimitsModalModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManageLimitsModalModule, providers: [...services], imports: [[CommonModule, ReactiveFormsModule, ...uiModules], ReactiveFormsModule, ModalModule,
        AmountModule,
        HeaderModule,
        IconModule,
        ButtonModule,
        DropdownSingleSelectModule,
        EllipsisModule,
        AlertModule,
        KeyboardClickModule,
        TooltipModule,
        LoadingIndicatorModule,
        CurrencyInputModule,
        LoadButtonModule,
        InputValidationMessageModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManageLimitsModalModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, ReactiveFormsModule, ...uiModules],
                    declarations: [...components],
                    providers: [...services],
                    exports: [ReactiveFormsModule, ...components, ...uiModules],
                }]
        }] });

class TimePickerStringAdapter extends NgbTimeAdapter {
    fromModel(value) {
        if (value) {
            const [hour, minute, second] = value.split(':').map(str => parseInt(str, 10));
            return { hour, minute, second };
        }
        return null;
    }
    toModel(time) {
        if (!time) {
            return null;
        }
        return `${String(time.hour).padStart(2, '0')}:${String(time.minute).padStart(2, '0')}:${String(time.second).padStart(2, '0')}`;
    }
}
/** @nocollapse */ TimePickerStringAdapter.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TimePickerStringAdapter, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ TimePickerStringAdapter.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TimePickerStringAdapter });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TimePickerStringAdapter, decorators: [{
            type: Injectable
        }] });

/**
 * Utility service for DOM manipulations
 */
class DomAttributesService {
    moveAriaAttributes(hostEl, childEl, renderer2) {
        const nodeMap = hostEl.attributes;
        // CUT every aria attribute from the host element and PASTE it into the specified element
        Object.keys(nodeMap)
            .map((key) => nodeMap.item(Number(key)))
            .filter(item => item && (item.name.startsWith('aria-') || item.name.toLowerCase() === 'arialabel'))
            .forEach(item => {
            const { name: attrName, value: attrVal } = item;
            attrName.toLowerCase() === 'arialabel'
                ? renderer2.setAttribute(childEl, 'aria-label', attrVal)
                : renderer2.setAttribute(childEl, attrName, attrVal);
            renderer2.removeAttribute(hostEl, attrName);
        });
    }
}
/** @nocollapse */ DomAttributesService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DomAttributesService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ DomAttributesService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DomAttributesService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DomAttributesService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });

const SIZE_MEDIUM = defaultSize;
const SIZE_SMALL = SIZE_MEDIUM / 2;
const SIZE_LARGE = SIZE_MEDIUM * 2;
const KEYWORD_SMALL = 'small';
const KEYWORD_MEDIUM = 'medium';
const KEYWORD_LARGE = 'large';
/**
 * @name AccessGroupInputTimePickerComponent
 *
 * @a11y Current component provide option to pass needed accessibility
 * attributes. You need to take care of properties that are required in your case :
 *  - role
 *  - aria-activedescendant
 *  - aria-describedby
 *  - aria-expanded
 *  - aria-invalid
 *  - aria-label
 *  - aria-labelledby
 *  - aria-owns
 *
 * @description
 * Component that displays a timepicker.
 */
class AccessGroupInputTimePickerComponent extends InputBaseComponent {
    constructor(cd, domAttrService, elem, renderer2) {
        // @ts-ignore
        super(cd);
        this.cd = cd;
        this.domAttrService = domAttrService;
        this.elem = elem;
        this.renderer2 = renderer2;
        /**
         * The number of hours to add/subtract when clicking hour spinners.
         */
        this.hourStep = 1;
        /**
         * Whether to display 12H or 24H mode.
         */
        this.clock = '24h';
        /**
         * The number of minutes to add/subtract when clicking minute spinners.
         */
        this.minuteStep = 1;
        /**
         * If true, the timepicker is readonly and can't be changed.
         */
        this.readonly = false;
        /**
         * If true, it is possible to select seconds.
         */
        this.seconds = false;
        /**
         * The number of seconds to add/subtract when clicking second spinners.
         */
        this.secondStep = 1;
        this.cssClass = 'bb-input-timepicker';
    }
    get meridian() {
        return this.clock === '12h';
    }
    getKeywordBySize(size) {
        if (size <= SIZE_SMALL) {
            return KEYWORD_SMALL;
        }
        else if (size >= SIZE_LARGE) {
            return KEYWORD_LARGE;
        }
        else {
            return KEYWORD_MEDIUM;
        }
    }
    getSizeByKeyword(keyword) {
        const sizeKeywords = {
            [KEYWORD_SMALL]: SIZE_SMALL,
            [KEYWORD_MEDIUM]: SIZE_MEDIUM,
            [KEYWORD_LARGE]: SIZE_LARGE,
        };
        return typeof keyword === 'string' && sizeKeywords.hasOwnProperty(keyword) ? sizeKeywords[keyword] : undefined;
    }
    validate(control) {
        const value = control.value;
        if (!value) {
            return null;
        }
        if (this.min && this.max) {
            const valid = this.min <= value && value <= this.max;
            return valid ? null : { minMaxTime: true };
        }
        else if (this.min) {
            return this.min <= value ? null : { minTime: true };
        }
        else if (this.max) {
            return value <= this.max ? null : { maxTime: true };
        }
        return null;
    }
    ngAfterViewInit() {
        if (!this.ariaLabel && this.inputEl) {
            this.domAttrService.moveAriaAttributes(this.elem.nativeElement, this.inputEl.nativeElement, this.renderer2);
        }
    }
}
/** @nocollapse */ AccessGroupInputTimePickerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccessGroupInputTimePickerComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: DomAttributesService }, { token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ AccessGroupInputTimePickerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AccessGroupInputTimePickerComponent, selector: "bb-input-timepicker-ui, bb-accessgroup-input-timepicker-ui", inputs: { hourStep: "hourStep", clock: "clock", minuteStep: "minuteStep", readonly: "readonly", seconds: "seconds", secondStep: "secondStep", min: "min", max: "max", autocomplete: "autocomplete" }, host: { properties: { "attr.class": "this.cssClass" } }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef((() => AccessGroupInputTimePickerComponent)),
            multi: true,
        },
        {
            provide: NG_VALIDATORS,
            useExisting: forwardRef((() => AccessGroupInputTimePickerComponent)),
            multi: true,
        },
        { provide: NgbTimeAdapter, useClass: TimePickerStringAdapter },
    ], viewQueries: [{ propertyName: "inputEl", first: true, predicate: ["timepicker"], descendants: true }], usesInheritance: true, ngImport: i0, template: "<ngb-timepicker\n  #timepicker\n  id=\"{{ id }}\"\n  class=\"bb-input-timepicker\"\n  [attr.aria-labelledby]=\"ariaLabelledby\"\n  [attr.aria-describedby]=\"ariaDescribedby\"\n  [attr.aria-expanded]=\"ariaExpanded\"\n  [attr.role]=\"role\"\n  [attr.aria-invalid]=\"ariaInvalid\"\n  [attr.aria-owns]=\"ariaOwns\"\n  [readonlyInputs]=\"readonly\"\n  [disabled]=\"disabled\"\n  [spinners]=\"false\"\n  [hourStep]=\"hourStep\"\n  [meridian]=\"meridian\"\n  [minuteStep]=\"minuteStep\"\n  [seconds]=\"seconds\"\n  [secondStep]=\"secondStep\"\n  [size]=\"getKeywordBySize(size)\"\n  [attr.aria-label]=\"(!label && ariaLabel) || null\"\n  [ngModel]=\"value\"\n  (ngModelChange)=\"onValueChange($event)\"\n  data-role=\"timepicker\"\n  [attr.autcomplete]=\"autocomplete\">\n</ngb-timepicker>\n", components: [{ type: i2$3.NgbTimepicker, selector: "ngb-timepicker", inputs: ["meridian", "spinners", "seconds", "hourStep", "minuteStep", "secondStep", "readonlyInputs", "size"] }], directives: [{ type: i1$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1$1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccessGroupInputTimePickerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-input-timepicker-ui, bb-accessgroup-input-timepicker-ui',
                    templateUrl: './input-time-picker.component.html',
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((() => AccessGroupInputTimePickerComponent)),
                            multi: true,
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: forwardRef((() => AccessGroupInputTimePickerComponent)),
                            multi: true,
                        },
                        { provide: NgbTimeAdapter, useClass: TimePickerStringAdapter },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: DomAttributesService }, { type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { hourStep: [{
                type: Input
            }], clock: [{
                type: Input
            }], minuteStep: [{
                type: Input
            }], readonly: [{
                type: Input
            }], seconds: [{
                type: Input
            }], secondStep: [{
                type: Input
            }], min: [{
                type: Input
            }], max: [{
                type: Input
            }], autocomplete: [{
                type: Input
            }], cssClass: [{
                type: HostBinding,
                args: ['attr.class']
            }], inputEl: [{
                type: ViewChild,
                args: ['timepicker']
            }] } });

class AccessGroupInputTimePickerModule {
}
/** @nocollapse */ AccessGroupInputTimePickerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccessGroupInputTimePickerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ AccessGroupInputTimePickerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccessGroupInputTimePickerModule, declarations: [AccessGroupInputTimePickerComponent], imports: [CommonModule, NgbTimepickerModule, FormsModule, ReactiveFormsModule], exports: [AccessGroupInputTimePickerComponent] });
/** @nocollapse */ AccessGroupInputTimePickerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccessGroupInputTimePickerModule, providers: [TimePickerStringAdapter], imports: [[CommonModule, NgbTimepickerModule, FormsModule, ReactiveFormsModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccessGroupInputTimePickerModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, NgbTimepickerModule, FormsModule, ReactiveFormsModule],
                    declarations: [AccessGroupInputTimePickerComponent],
                    exports: [AccessGroupInputTimePickerComponent],
                    providers: [TimePickerStringAdapter],
                }]
        }] });

class UserPermissionsDataGroupDetailsService {
    constructor(contactService, itemsService, serviceAgreementHttpService, serviceAgreementsHttpService) {
        this.contactService = contactService;
        this.itemsService = itemsService;
        this.serviceAgreementHttpService = serviceAgreementHttpService;
        this.serviceAgreementsHttpService = serviceAgreementsHttpService;
        /**
         * Service agreement from context stream
         */
        this.serviceAgreementFromContext = this.serviceAgreementHttpService
            .getServiceAgreementContext()
            .pipe(switchMap((serviceAgreement) => this.getServiceAgreementParticipants(serviceAgreement)));
    }
    getServiceAgreementParticipants(serviceAgreement) {
        return this.serviceAgreementsHttpService.getServiceAgreementParticipants({ id: serviceAgreement.id }).pipe(map((participants) => ({
            serviceAgreement,
            participants,
        })));
    }
    /**
     * Send request to retrieve service agreement info
     * @param serviceAgreementId
     */
    getServiceAgreement(serviceAgreementId) {
        return this.serviceAgreementHttpService.getServiceAgreementItem({ serviceAgreementId }).pipe(switchMap((serviceAgreement) => this.getServiceAgreementParticipants(serviceAgreement)), catchError(() => EMPTY));
    }
    getPayeeGroupContacts(contactIds, params) {
        return this.contactService
            .postContactsFilter(Object.assign(Object.assign({}, params), { contactsPostFilterRequestBody: {
                contactIds,
            } }), 'response')
            .pipe(map((resp) => {
            return {
                data: resp.body,
                totalCount: Number(resp.headers.get('x-total-count')),
            };
        }));
    }
    getAccountGroupItems({ items, from, size, searchTerm, legalEntityIds }) {
        return this.itemsService.postFilterProductSummaries({
            productSummaryFilterParams: Object.assign({ legalEntityIds: legalEntityIds, arrangementIds: items, from,
                size }, (searchTerm && { searchTerm })),
        });
    }
}
/** @nocollapse */ UserPermissionsDataGroupDetailsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UserPermissionsDataGroupDetailsService, deps: [{ token: i1$3.ContactsHttpService }, { token: i2$4.ProductSummaryHttpService }, { token: i3.ServiceAgreementHttpService }, { token: i3.ServiceAgreementsHttpService }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ UserPermissionsDataGroupDetailsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UserPermissionsDataGroupDetailsService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UserPermissionsDataGroupDetailsService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1$3.ContactsHttpService }, { type: i2$4.ProductSummaryHttpService }, { type: i3.ServiceAgreementHttpService }, { type: i3.ServiceAgreementsHttpService }]; } });

/**
 * Latest Job Role ID that was opened for editing
 */
const EDIT_JOB_ROLE_ID = 'ACCESS_GROUP_EDIT_JOB_ROLE_ID';

/**
 * Return ACCESS_GROUP_EDIT_JOB_ROLE_ID from session storage or null if such doesn't exist
 */
function getPrevSelectedJobRoleId() {
    return sessionStorage.getItem(EDIT_JOB_ROLE_ID) || null;
}
/**
 * Check if ACCESS_GROUP_EDIT_JOB_ROLE_ID has value in session storage and within provided function
 * groups exist at exactly one with same ID
 * @param functionGroups - function groups (list of job roles)
 */
function hasPrevSelectedJobRole(functionGroups) {
    return Boolean(getPrevSelectedJobRoleId() && getPrevSelectedJobRole(functionGroups));
}
/**
 * Find and return function group within provided function groups that match their ID with ACCESS_GROUP_EDIT_JOB_ROLE_ID session storage value or return undefined
 * @param functionGroups - function groups (list of job roles)
 */
function getPrevSelectedJobRole(functionGroups) {
    const prevFunctionGroupId = getPrevSelectedJobRoleId();
    return functionGroups.find(({ id }) => prevFunctionGroupId === id);
}

const CREATE_NEW_LIMIT_RESPONSE = { uuid: 'testID' };
const UPDATE_LIMIT_RESPONSE = {
    approvalId: 'testApprovalID',
    uuid: 'testApprovalUUID',
    entities: [],
};
const LIMITS_PERIODS = [
    { name: 'DAILY' },
    { name: 'WEEKLY' },
    { name: 'biweekly' },
    { name: 'MONTHLY' },
    { name: 'QUARTERLY' },
    { name: 'YEARLY' },
];
const LIMIT_KEY = {
    'user-BBID': 'user-test-uuid',
    lookupKeys: [
        {
            eref: 'c2185f7d-a1e8-4f97-990d-cb1cfd0d8f53',
            etype: 'SA',
        },
    ],
};
const REGULAR_PERIODIC_BOUNDS = [undefined, 10, 50, 100, 400, 600, undefined];
const SHADOW_PERIODIC_BOUNDS = [undefined, 100.0, 200.0, 300, undefined, 600.0, 1600];
const CONSUMPTIONS_REGULAR = [undefined, 1.0, 20.0, 30, 40, 60.0, undefined];
const CONSUMPTIONS_SHADOW = [undefined, 500.0, 100.0, 150, undefined, 330.0, 1000];
const CURRENCY = 'EUR';
const LIMITS_UUID = { regular: '1234-5678-9101-1121', shadow: '4444-5678-9101-1121' };
const LIMITS_BOUNDS = [
    {
        period: TRANSACTIONAL_LIMITS_BOUNDS,
        custom: false,
        regular: {
            amount: REGULAR_PERIODIC_BOUNDS[0],
        },
        shadow: {
            amount: SHADOW_PERIODIC_BOUNDS[0],
        },
    },
    ...LIMITS_PERIODS.map((item, index) => {
        return {
            period: item.name.toLocaleLowerCase(),
            custom: index === 2,
            regular: {
                amount: REGULAR_PERIODIC_BOUNDS[index + 1],
            },
            shadow: {
                amount: SHADOW_PERIODIC_BOUNDS[index + 1],
            },
            regularConsumption: CONSUMPTIONS_REGULAR[index + 1],
            shadowConsumption: CONSUMPTIONS_SHADOW[index + 1],
        };
    }),
];
const LIMITS_WITH_CONSUMPTION = [
    {
        limit: {
            alias: '',
            uuid: LIMITS_UUID.regular,
            'user-BBID': LIMIT_KEY['user-BBID'],
            entities: LIMIT_KEY.lookupKeys,
            currency: CURRENCY,
            shadow: false,
        },
        consumptions: {
            daily: CONSUMPTIONS_REGULAR[1],
            weekly: CONSUMPTIONS_REGULAR[2],
            monthly: CONSUMPTIONS_REGULAR[4],
            quarterly: CONSUMPTIONS_REGULAR[5],
            customPeriods: [{ period: 'biweekly', amount: CONSUMPTIONS_REGULAR[3] }],
        },
        checkTime: '2017-01-31T12:12:12Z',
    },
    {
        limit: {
            alias: '',
            uuid: LIMITS_UUID.shadow,
            'user-BBID': LIMIT_KEY['user-BBID'],
            entities: LIMIT_KEY.lookupKeys,
            currency: CURRENCY,
            shadow: true,
        },
        consumptions: {
            daily: CONSUMPTIONS_SHADOW[1],
            weekly: CONSUMPTIONS_SHADOW[2],
            quarterly: CONSUMPTIONS_SHADOW[5],
            yearly: CONSUMPTIONS_SHADOW[6],
            customPeriods: [{ period: 'biweekly', amount: CONSUMPTIONS_SHADOW[3] }],
        },
        checkTime: '2017-01-31T12:12:12Z',
    },
];
// made it here for sonar check
LIMITS_WITH_CONSUMPTION[0].limit[PERIODIC_LIMITS_BOUNDS] = {
    daily: REGULAR_PERIODIC_BOUNDS[1],
    weekly: REGULAR_PERIODIC_BOUNDS[2],
    monthly: REGULAR_PERIODIC_BOUNDS[4],
    quarterly: REGULAR_PERIODIC_BOUNDS[5],
    customPeriods: [{ period: 'biweekly', amount: REGULAR_PERIODIC_BOUNDS[3] }],
};
LIMITS_WITH_CONSUMPTION[1].limit[PERIODIC_LIMITS_BOUNDS] = {
    daily: SHADOW_PERIODIC_BOUNDS[1],
    weekly: SHADOW_PERIODIC_BOUNDS[2],
    quarterly: SHADOW_PERIODIC_BOUNDS[5],
    yearly: SHADOW_PERIODIC_BOUNDS[6],
    customPeriods: [{ period: 'biweekly', amount: SHADOW_PERIODIC_BOUNDS[3] }],
};
const LIMITS = [
    {
        alias: '',
        uuid: LIMITS_UUID.regular,
        'user-BBID': LIMIT_KEY['user-BBID'],
        entities: LIMIT_KEY.lookupKeys,
        currency: CURRENCY,
        'periodic-limits-bounds': {
            daily: REGULAR_PERIODIC_BOUNDS[1],
            weekly: REGULAR_PERIODIC_BOUNDS[2],
            monthly: REGULAR_PERIODIC_BOUNDS[4],
            quarterly: REGULAR_PERIODIC_BOUNDS[5],
            customPeriods: [{ period: 'biweekly', amount: REGULAR_PERIODIC_BOUNDS[3] }],
        },
        shadow: false,
    },
];

/**
 * Business Function Name
 * functionCode - Name
 */
const businessFunctionNameTranslations = {
    'transactions': $localize `:Transactions@@business.function.transactions:Transactions`,
    'entitlements': $localize `:Entitlements@@business.function.entitlements:Entitlements`,
    'contacts': $localize `:Contacts@@business.function.contacts:Contacts`,
    'product.summary': $localize `:Product Summary@@business.function.product.summary:Product Summary`,
    'assign.users': $localize `:Manage Users in Service Agreement@@business.function.assign.users:Manage Users in Service Agreement`,
    'assign.permissions': $localize `:Manage Permissions@@business.function.assign.permissions:Manage Permissions`,
    'payments.sepa': $localize `:SEPA CT@@business.function.payments.sepa:SEPA CT`,
    'manage.users': $localize `:Manage Users@@business.function.manage.users:Manage Users`,
    'manage.legalentities': $localize `:Manage Legal Entities@@business.function.manage.legalentities:Manage Legal Entities`,
    'manage.limits': $localize `:Manage Limits@@business.function.manage.limits:Manage Limits`,
    'audit': $localize `:Audit@@business.function.audit:Audit`,
    'manage.shadow.limits': $localize `:Manage Shadow Limits@@business.function.manage.shadow.limits:Manage Shadow Limits`,
    'intra.company.payments': $localize `:Intra Company Payments@@business.function.intra.company.payments:Intra Company Payments`,
    'manage.statements': $localize `:Manage Statements@@business.function.manage.statements:Manage Statements`,
    'us.domestic.wire': $localize `:US Domestic Wire@@business.function.us.domestic.wire:US Domestic Wire`,
    'us.foreign.wire': $localize `:US Foreign Wire@@business.function.us.foreign.wire:US Foreign Wire`,
    'manage.data.groups': $localize `:Manage Account and Payee Groups@@business.function.manage.data.groups:Manage Account and Payee Groups`,
    'manage.function.groups': $localize `:Manage Job Roles@@business.function.manage.function.groups:Manage Job Roles`,
    'us.billpay.payments': $localize `:US Billpay Payments@@business.function.us.billpay.payments:US Billpay Payments`,
    'us.billpay.payees': $localize `:US Billpay Payees@@business.function.us.billpay.payees:US Billpay Payees`,
    'us.billpay.accounts': $localize `:US Billpay Accounts@@business.function.us.billpay.accounts:US Billpay Accounts`,
    'us.billpay.payees.search': $localize `:US Billpay Payees-Search@@business.function.us.billpay.payees.search:US Billpay Payees-Search`,
    'us.billpay.payees.summary': $localize `:US Billpay Payees-Summary@@business.function.us.billpay.payees.summary:US Billpay Payees-Summary`,
    'us.billpay.enrolment': $localize `:US Billpay Enrolment@@business.function.us.billpay.enrolment:US Billpay Enrolment`,
    'access.actions.history': $localize `:Access Actions History@@business.function.access.actions.history:Access Actions History`,
    'manage.service.agreements': $localize `:Manage Service Agreements@@business.function.manage.service.agreements:Manage Service Agreements`,
    'manage.notifications': $localize `:Manage Notifications@@business.function.manage.notifications:Manage Notifications`,
    'manage.actions.recipes': $localize `:Manage Action Recipes@@business.function.manage.actions.recipes:Manage Action Recipes`,
    'manage.topics': $localize `:Manage Topics@@business.function.manage.topics:Manage Topics`,
    'assign.approval.policies': $localize `:Assign Approval Policies@@business.function.assign.approval.policies:Assign Approval Policies`,
    'manage.approval.policy.level': $localize `:Manage Approval Policy and Level@@business.function.manage.approval.policy.level:Manage Approval Policy and Level`,
    'manage.identities': $localize `:Manage Identities@@business.function.manage.identities:Manage Identities`,
    'manage.user.profiles': $localize `:Manage User Profiles@@business.function.manage.user.profiles:Manage User Profiles`,
    'support.access.payments': $localize `:Support Access for Payments@@business.function.support.access.payments:Support Access for Payments`,
    'batch.sepa': $localize `:Batch - SEPA CT@@business.function.batch.sepa:Batch - SEPA CT`,
    'manage.messages': $localize `:Manage Messages@@business.function.manage.messages:Manage Messages`,
    'supervise.messages': $localize `:Supervise Messages@@business.function.supervise.messages:Supervise Messages`,
    'manage.global.limits': $localize `:Manage Global Limits@@business.function.manage.global.limits:Manage Global Limits`,
    'ach.credit.transfer': $localize `:ACH Credit Transfer@@business.function.ach.credit.transfer:ACH Credit Transfer`,
    'ach.credit.intc': $localize `:ACH Credit - Intracompany@@business.function.ach.credit.intc:ACH Credit - Intracompany`,
    'sepa.credit.transfer.intc': $localize `:SEPA CT - Intracompany@@business.function.sepa.credit.transfer.intc:SEPA CT - Intracompany`,
    'us.domestic.wire.intc': $localize `:US Domestic Wire - Intracompany@@business.function.us.domestic.wire.intc:US Domestic Wire - Intracompany`,
    'us.foreign.wire.intc': $localize `:US Foreign Wire - Intracompany@@business.function.us.foreign.wire.intc:US Foreign Wire - Intracompany`,
    'ach.debit': $localize `:ACH Debit@@business.function.ach.debit:ACH Debit`,
    'manage.budgets': $localize `:Manage Budgets@@business.function.manage.budgets:Manage Budgets`,
    'manage.saving.goals': $localize `:Manage Saving Goals@@business.function.manage.saving.goals:Manage Saving Goals`,
    'lock.user': $localize `:Lock User@@business.function.lock.user:Lock User`,
    'unlock.user': $localize `:Unlock User@@business.function.unlock.user:Unlock User`,
    'manage.devices': $localize `:Manage Devices@@business.function.manage.devices:Manage Devices`,
    'sepa.credit.transfer.closed': $localize `:SEPA CT - closed@@business.function.sepa.credit.transfer.closed:SEPA CT - closed`,
    'a2a.transfer': $localize `:A2A Transfer@@business.function.a2a.transfer:A2A Transfer`,
    'flow.case': $localize `:Manage Case@@business.function.flow.case:Manage Case`,
    'flow.case.archive': $localize `:Archive Case@@business.function.flow.case.archive:Archive Case`,
    'flow.case.document': $localize `:Manage Case Documents@@business.function.flow.case.document:Manage Case Documents`,
    'flow.case.comment': $localize `:Manage Case Comments@@business.function.flow.case.comment:Manage Case Comments`,
    'flow.case.changelog': $localize `:Access Case Changelog@@business.function.flow.case.changelog:Access Case Changelog`,
    'flow.case.statistics': $localize `:Access Case Statistics@@business.function.flow.case.statistics:Access Case Statistics`,
    'flow.journey.statistics': $localize `:Access Journey Statistics@@business.function.flow.journey.statistics:Access Journey Statistics`,
    'flow.journey.definitions': $localize `:Access Journey Definitions@@business.function.flow.journey.definitions:Access Journey Definitions`,
    'flow.task.assign': $localize `:Assign Task@@business.function.flow.task.assign:Assign Task`,
    'flow.task.dates': $localize `:Manage Task Dates@@business.function.flow.task.dates:Manage Task Dates`,
    'flow.task': $localize `:Manage Task@@business.function.flow.task:Manage Task`,
    'stop.checks': $localize `:Stop Checks@@business.function.stop.checks:Stop Checks`,
    'manage.other.users.devices': $localize `:Manage Other Users Devices@@business.function.manage.other.users.devices:Manage Other User's Devices`,
    'batch.ach.credit': $localize `:Batch - ACH Credit@@business.function.batch.ach.credit:Batch - ACH Credit`,
    'cash.flow': $localize `:Cash Flow Forecasting@@business.function.cash.flow:Cash Flow Forecasting`,
    'batch.ach.debit': $localize `:Batch - ACH Debit@@business.function.batch.ach.debit:Batch - ACH Debit`,
    'uk.chaps': $localize `:UK CHAPS@@business.function.uk.chaps:UK CHAPS`,
    'uk.faster.payments': $localize `:UK Faster Payments@@business.function.uk.faster.payments:UK Faster Payments`,
    'flow.task.statistics': $localize `:Access Task Statistics@@business.function.flow.task.statistics:Access Task Statistics`,
    'flow.collection': $localize `:Access Collections@@business.function.flow.collection:Access Collections`,
    'emulate': $localize `:Emulate@@business.function.emulate:Emulate`,
    'act.on.behalf.of': $localize `:Act on behalf of@@business.function.act.on.behalf.of:Act on behalf of`,
    'manage.authorized.users': $localize `:Manage Authorized Users@@business.function.manage.authorized.users:Manage Authorized Users`,
    'batch.intracompany.payments': $localize `:Batch - Internal Transfer@@business.function.batch.intracompany.payments:Batch - Internal Transfer`,
    'manage.employee.comments': $localize `:Manage Employee comments@@business.function.manage.employee.comments:Manage Employee comments`,
    'manage.positive.pay': $localize `:Manage Positive Pay@@business.function.manage.positive.pay:Manage Positive Pay`,
    'manage.arrangement.alias': $localize `:Manage Arrangement Alias@@business.function.manage.arrangement.alias:Manage Arrangement Alias`,
    'revoke.access': $localize `:Revoke Access@@business.function.revoke.access:Revoke Access`,
    'product.summary.limited.view': $localize `:Product Summary Limited View@@business.function.product.summary.limited.view:Product Summary Limited View`,
    'manage.engagement.events': $localize `:Manage Engagement Events@@business.function.manage.engagement.events:Manage Engagement Events`,
    'manage.pockets': $localize `:Manage Pockets@@business.function.manage.pockets:Manage Pockets`,
    'manage.portfolio': $localize `:Manage Portfolio@@business.function.manage.portfolio:Manage Portfolio`,
    'manage.order': $localize `:Manage Order@@business.function.manage.order:Manage Order`,
    'manage.cards': $localize `:Manage Cards@@business.function.manage.cards:Manage Cards`,
    'places': $localize `:Places@@business.function.places:Places`,
    'remote.deposit.capture': $localize `:Remote Deposit Capture@@business.function.remote.deposit.capture:Remote Deposit Capture`,
    'audit.emulation': $localize `:Audit Emulation@@business.function.audit.emulation:Audit Emulation`,
    'identity.impersonation': $localize `:Identity Impersonation@@business.function.identity.impersonation:Identity Impersonation`,
    'manage.aggregate.portfolio': $localize `:Manage Aggregate Portfolio@@business.function.manage.aggregate.portfolio:Manage Aggregate Portfolio`,
    'batch.templates': $localize `:Batch Templates@@business.function.batch.templates:Batch Templates`,
    'batch.list.confidential': $localize `:Batch - List Confidential@@business.function.batch.list.confidential:Batch - List Confidential`,
    'batch.manage.confidential': $localize `:Batch - Manage Confidential@@business.function.batch.manage.confidential:Batch - Manage Confidential`,
    'batch.upload.mappings': $localize `:Batch - Upload Mappings@@business.function.batch.upload.mappings:Batch - Upload Mappings`,
    'manage.ach.positive.pay': $localize `:Manage ACH Positive Pay@@business.function.manage.ach.positive.pay:Manage ACH Positive Pay`,
    'manage.account.reconciliation': $localize `:Manage Account Reconciliation@@business.function.manage.account.reconciliation:Manage Account Reconciliation`,
    'manage.content': $localize `:Manage Content@@business.function.manage.content:Manage Content`,
    'quick.user.setup': $localize `:Quick User Setup@@business.function.quick.user.setup:Quick User Setup`,
    'loans.payment': $localize `:Loans Payment@@business.function.loans.payment:Loans Payment`,
    'loans.advance': $localize `:Loans Advance@@business.function.loans.advance:Loans Advance`,
    'payment.templates': $localize `:Payment Templates@@business.function.payment.templates:Payment Templates`,
    'p2p.transfer': $localize `:P2P Transfer@@business.function.p2p.transfer:P2P Transfer`,
    'import-letter-of-credit': $localize `:Import Letter of Credit@@business.function.import-letter-of-credit:Import Letter of Credit`,
    'audiences': $localize `:Audiences@@business.function.audiences:Audiences`,
    'custom.engagements': $localize `:Custom Engagements@@business.function.custom.engagements:Custom Engagements`,
    'general.notifications': $localize `:General Notifications@@business.function.general.notifications:General Notifications`,
    'general.notification.preferences': $localize `:General Notification Preferences@@business.function.general.notification.preferences:General Notification Preferences`,
    'manage.own.profile': $localize `:Manage Own Profile@@business.function.manage.own.profile:Manage Own Profile`,
    'manage.projects.apps.releases': $localize `:Manage projects, apps, releases@@business.function.manage.projects-apps-releases:Manage projects, apps, releases`,
    'manage.configurations': $localize `:Manage configurations@@business.function.manage.configurations:Manage configurations`,
    'manage.external.accounts': $localize `:Manage External Accounts@@business.function.manage.external.accounts:Manage External Accounts`,
    'cs.live.chat': $localize `:Customer Support - Live Chat@@business.function.cs.live.chat:Customer Support - Live Chat`,
    'cs.voice.call': $localize `:Customer Support - Voice Call@@business.function.cs.voice.call:Customer Support - Voice Call`,
    'cs.video.call': $localize `:Customer Support - Video Call@@business.function.cs.video.call:Customer Support - Video Call`,
    'rts.support.request': $localize `:RTC Support Request@@business.function.rts.support.request:RTC Support Request`,
    'financial.insights': $localize `:Financial Insights@@business.function.financial.insights:Financial Insights`,
};
/**
 * Business Function Group Name
 * groupKey - Name
 */
const businessFunctionGroupNameTranslations = {
    'accountsAndPayments': $localize `:Accounts and Payments@@business.function.group.accountsAndPayments:Accounts and Payments`,
    'beneficiaries': $localize `:Beneficiaries@@business.function.group.beneficiaries:Beneficiaries`,
    'actions': $localize `:Actions@@business.function.group.actions:Actions`,
    'messagesAndNotifications': $localize `:Messages and Notifications@@business.function.group.messagesAndNotifications:Messages and Notifications`,
    'entitlements': $localize `:Entitlements@@business.function.group.entitlements:Entitlements`,
    'identityManagement': $localize `:Identity Management@@business.function.group.identityManagement:Identity Management`,
    'supportAccess': $localize `:Support Access@@business.function.group.supportAccess:Support Access`,
    'flow': $localize `:Flow@@business.function.group.flow:Flow`,
    'employee': $localize `:Employee@@business.function.group.employee:Employee`,
    'portfolio': $localize `:Portfolio Summary@@business.function.group.portfolio:Portfolio Summary`,
    'content': $localize `:Content Management@@business.function.group.content:Content Management`,
    'engagements': $localize `:Engagements@@business.function.group.engagements:Engagements`,
    'realTimeCommunication': $localize `:Real Time Communications@@business.function.group.realTimeCommunication:Real Time Communications`,
    'financeManagement': $localize `:Personal Finance Management@@business.function.group.financeManagement:Personal Finance Management`,
    'communicationPreferences': $localize `:Communication Preferences@@business.function.group.communicationPreferences:Communication Preferences`,
    'remoteConfig': $localize `:Remote Config@@business.function.group.remoteConfig:Remote Config`,
    'other': $localize `:Other@@business.function.group.other:Other`,
};
/**
 * Resource Name
 * Resourse Name - Name
 */
const resourceNameTranslations = {
    'Product Summary': $localize `:Product Summary@@accessgroup-common.resource.product-summary:Product Summary`,
    'Transactions': $localize `:Transactions@@accessgroup-common.resource.transactions:Transactions`,
    'Payments': $localize `:Payments@@accessgroup-common.resource.payments:Payments`,
    'Arrangements': $localize `:Arrangements@@accessgroup-common.resource.arrangements:Arrangements`,
    'Billpay': $localize `:Billpay@@accessgroup-common.resource.billpay:Billpay`,
    'Account Statements': $localize `:Account Statements@@accessgroup-common.resource.account-statements:Account Statements`,
    'Batch': $localize `:Batch@@accessgroup-common.resource.batch:Batch`,
    'Cash Flow': $localize `:Cash Flow@@accessgroup-common.resource.cash-flow:Cash Flow`,
    'Pockets': $localize `:Pockets@@accessgroup-common.resource.pockets:Pockets`,
    'External Accounts': $localize `:External Accounts@@accessgroup-common.resource.external-accounts:External Accounts`,
    'Contacts': $localize `:Contacts@@accessgroup-common.resource.contacts:Contacts`,
    'Actions': $localize `:Actions@@accessgroup-common.resource.actions:Actions`,
    'Message Center': $localize `:Message Center@@accessgroup-common.resource.message-center:Message Center`,
    'Notifications': $localize `:Notifications@@accessgroup-common.resource.notifications:Notifications`,
    'Legal Entity': $localize `:Legal Entity@@accessgroup-common.resource.legal-entity:Legal Entity`,
    'User': $localize `:User@@accessgroup-common.resource.user:User`,
    'Service Agreement': $localize `:Service Agreement@@accessgroup-common.resource.service-agreement:Service Agreement`,
    'Entitlements': $localize `:Entitlements@@accessgroup-common.resource.entitlements:Entitlements`,
    'Limits': $localize `:Limits@@accessgroup-common.resource.limits:Limits`,
    'Approvals': $localize `:Approvals@@accessgroup-common.resource.approvals:Approvals`,
    'Audit': $localize `:Audit@@accessgroup-common.resource.audit:Audit`,
    'User Profiles': $localize `:User Profiles@@accessgroup-common.resource.user-profiles:User Profiles`,
    'Manage Authorized Users': $localize `:Manage Authorized Users@@accessgroup-common.resource.manage-authorized-users:Manage Authorized Users`,
    'Identities': $localize `:Identities@@accessgroup-common.resource.identities:Identities`,
    'Device': $localize `:Device@@accessgroup-common.resource.device:Device`,
    'Support Access': $localize `:Support Access@@accessgroup-common.resource.support-access:Support Access`,
    'Flow': $localize `:Flow@@accessgroup-common.resource.flow:Flow`,
    'Employee': $localize `:Employee@@accessgroup-common.resource.employee:Employee`,
    'Portfolio': $localize `:Portfolio@@accessgroup-common.resource.portfolio:Portfolio`,
    'Content': $localize `:Content@@accessgroup-common.resource.content:Content`,
    'Engagements': $localize `:Engagements@@accessgroup-common.resource.engagements:Engagements`,
    'Real Time Communications': $localize `:Real Time Communications@@accessgroup-common.resource.real-time-communications:Real Time Communications`,
    'Personal Finance Management': $localize `:Personal Finance Management@@accessgroup-common.resource.personal-finance-management:Personal Finance Management`,
    'Communication Preferences': $localize `:Communication Preferences@@accessgroup-common.resource.communication-preferences:Communication Preferences`,
    'Remote Config': $localize `:Remote Config@@accessgroup-common.resource.remote-config:Remote Config`,
};

class TranslationsService {
    /**
     * Get business function name by function code
     * @param {string} functionCode
     * @returns {(string|undefined)} Returns the name of the business function
     */
    getBusinessFunctionName(functionCode) {
        return businessFunctionNameTranslations[functionCode];
    }
    /**
     * Get business function group name by group key
     * @param {string} groupKey
     * @returns {(string|undefined)} Returns the name of the business function group
     */
    getBusinessFunctionGroupName(groupKey) {
        return businessFunctionGroupNameTranslations[groupKey];
    }
    /**
     * Get resource name
     * @param {string} resourceName
     * @returns {(string|undefined)} Returns the name of the resource
     */
    getResourceName(resourceName) {
        return resourceNameTranslations[resourceName];
    }
}
/** @nocollapse */ TranslationsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TranslationsService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ TranslationsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TranslationsService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TranslationsService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { AMOUNT_DELIMETER_REG_EXP, AccessDataGroupTypes, AccessGroupInputTimePickerModule, AccessgroupCanDeactivateGuardService, AccessgroupCommonModule, ApprovalLevelStatus, BOUNDTS_TYPE, BusinessFunctionGroupService, CONSUMPTIONS_REGULAR, CONSUMPTIONS_SHADOW, CREATE_NEW_LIMIT_RESPONSE, CURRENCY, CurrencyService, DiscardChangesBaseComponent, EDIT_JOB_ROLE_ID, FormAction, LIMITS, LIMITS_BOUNDS, LIMITS_PERIODS, LIMITS_UUID, LIMITS_WITH_CONSUMPTION, LIMIT_KEY, LimitAccessService, LimitsService, ManageLimitsModalComponent, ManageLimitsModalCustomizableDirective, ManageLimitsModalModule, PERIODIC_LIMITS_BOUNDS, PRIVILEGES, REGULAR_PERIODIC_BOUNDS, SHADOW_PERIODIC_BOUNDS, TRANSACTIONAL_LIMITS_BOUNDS, TranslationsService, UPDATE_LIMIT_RESPONSE, UserPermissionsDataGroupDetailsService, UserPermissionsService, WidgetProperties, businessFunctions, checkPermission, defaultBusinessFunctionGroups, defaultGetGroupForBusinessFunction, defaultOrderedBusinessFunctionGroups, errorMsg, extractDataFromResponse, extractParticipantsThatShareAccounts, functionAccessGroups, getExtendedBusinessFunctions, getIfLimitHasShadow, getLimitUnlimited, getPrevSelectedJobRole, getPrevSelectedJobRoleId, getRouteParams, hasError, hasPrevSelectedJobRole, isFieldValid, lookUpObject, parseError, participants, periodLimitsConsumptionMapper, prepareLimitObj, productSummaryMockResponse, scanAndMergePaginatedItems, serviceAgreement, serviceAgreementWithParticipants, AccessGroupInputTimePickerComponent as ӨAccessGroupInputTimePickerComponent, EditLimitComponent as ӨEditLimitComponent, EditLimitCustomizableDirective as ӨEditLimitCustomizableDirective, LimitBoundItemComponent as ӨLimitBoundItemComponent, LimitBoundItemCustomizableDirective as ӨLimitBoundItemCustomizableDirective, ManageLimitsModalHeaderComponent as ӨManageLimitsModalHeaderComponent, ManageLimitsModalHeaderCustomizableDirective as ӨManageLimitsModalHeaderCustomizableDirective, ManageLimitsModalViewBodyComponent as ӨManageLimitsModalViewBodyComponent, ManageLimitsModalViewBodyCustomizableDirective as ӨManageLimitsModalViewBodyCustomizableDirective };
//# sourceMappingURL=backbase-accessgroup-common-ang.js.map
