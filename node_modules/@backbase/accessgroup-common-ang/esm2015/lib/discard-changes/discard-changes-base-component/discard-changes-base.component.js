import { Subject, of } from 'rxjs';
import { HostListener, Directive } from '@angular/core';
import * as i0 from "@angular/core";
export class DiscardChangesBaseComponent {
    constructor() {
        this.isDiscardChangesModalOpen = false;
        this.discardSubject = new Subject();
    }
    resolveDiscardChanges(value) {
        this.isDiscardChangesModalOpen = false;
        this.discardSubject.next(value);
    }
    onWindowUnload($event) {
        if (this.shouldPreventNavigation() && !this.isDiscardChangesModalOpen) {
            $event.returnValue = true;
        }
    }
    openDiscardChangesModal() {
        if (this.shouldPreventNavigation()) {
            this.isDiscardChangesModalOpen = true;
            return this.discardSubject;
        }
        return of(true);
    }
}
/** @nocollapse */ DiscardChangesBaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DiscardChangesBaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ DiscardChangesBaseComponent.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: DiscardChangesBaseComponent, host: { listeners: { "window:beforeunload": "onWindowUnload($event)" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DiscardChangesBaseComponent, decorators: [{
            type: Directive
        }], propDecorators: { onWindowUnload: [{
                type: HostListener,
                args: ['window:beforeunload', ['$event']]
            }] } });
//# sourceMappingURL=discard-changes-base.component.js.map