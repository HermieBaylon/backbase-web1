{"version":3,"file":"input-time-picker.component.js","sourceRoot":"","sources":["../../../../../../libs/accessgroup-common-ang/src/lib/input-time-picker/input-time-picker.component.ts","../../../../../../libs/accessgroup-common-ang/src/lib/input-time-picker/input-time-picker.component.html"],"names":[],"mappings":"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","sourcesContent":["import {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  forwardRef,\n  HostBinding,\n  Input,\n  Renderer2,\n  ViewChild,\n} from '@angular/core';\nimport { AbstractControl, NG_VALIDATORS, NG_VALUE_ACCESSOR, ValidationErrors, Validator } from '@angular/forms';\nimport { NgbTimeAdapter } from '@ng-bootstrap/ng-bootstrap';\nimport { defaultSize, InputBaseComponent } from '@backbase/ui-ang/base-classes';\nimport { TimePickerStringAdapter } from './input-time-picker.service';\n\nimport { DomAttributesService } from './dom-attributes.service';\n\nconst SIZE_MEDIUM = defaultSize;\nconst SIZE_SMALL = SIZE_MEDIUM / 2;\nconst SIZE_LARGE = SIZE_MEDIUM * 2;\n\nconst KEYWORD_SMALL = 'small';\nconst KEYWORD_MEDIUM = 'medium';\nconst KEYWORD_LARGE = 'large';\n\n/**\n * @name AccessGroupInputTimePickerComponent\n *\n * @a11y Current component provide option to pass needed accessibility\n * attributes. You need to take care of properties that are required in your case :\n *  - role\n *  - aria-activedescendant\n *  - aria-describedby\n *  - aria-expanded\n *  - aria-invalid\n *  - aria-label\n *  - aria-labelledby\n *  - aria-owns\n *\n * @description\n * Component that displays a timepicker.\n */\n@Component({\n  selector: 'bb-input-timepicker-ui, bb-accessgroup-input-timepicker-ui',\n  templateUrl: './input-time-picker.component.html',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => AccessGroupInputTimePickerComponent),\n      multi: true,\n    },\n    {\n      provide: NG_VALIDATORS,\n      useExisting: forwardRef(() => AccessGroupInputTimePickerComponent),\n      multi: true,\n    },\n    { provide: NgbTimeAdapter, useClass: TimePickerStringAdapter },\n  ],\n})\nexport class AccessGroupInputTimePickerComponent extends InputBaseComponent implements Validator, AfterViewInit {\n  /**\n   * The number of hours to add/subtract when clicking hour spinners.\n   */\n  @Input() hourStep = 1;\n\n  /**\n   * Whether to display 12H or 24H mode.\n   */\n  @Input() clock: '12h' | '24h' = '24h';\n\n  /**\n   * The number of minutes to add/subtract when clicking minute spinners.\n   */\n  @Input() minuteStep = 1;\n\n  /**\n   * If true, the timepicker is readonly and can't be changed.\n   */\n  @Input() readonly = false;\n\n  /**\n   * If true, it is possible to select seconds.\n   */\n  @Input() seconds = false;\n\n  /**\n   * The number of seconds to add/subtract when clicking second spinners.\n   */\n  @Input() secondStep = 1;\n\n  /**\n   * If set, validate according to min time\n   */\n  @Input() min: string | undefined;\n\n  /**\n   * If set , validate according to max time\n   */\n  @Input() max: string | undefined;\n\n  /**\n   * The autocomplete value of enclosed input control.\n   */\n  @Input() autocomplete: 'string' | undefined;\n\n  @HostBinding('attr.class') cssClass = 'bb-input-timepicker';\n\n  @ViewChild('timepicker') inputEl: ElementRef | undefined;\n\n  get meridian() {\n    return this.clock === '12h';\n  }\n\n  getKeywordBySize(size: number | string): string {\n    if (size <= SIZE_SMALL) {\n      return KEYWORD_SMALL;\n    } else if (size >= SIZE_LARGE) {\n      return KEYWORD_LARGE;\n    } else {\n      return KEYWORD_MEDIUM;\n    }\n  }\n\n  getSizeByKeyword(keyword: any): number | undefined {\n    const sizeKeywords: { [index: string]: number } = {\n      [KEYWORD_SMALL]: SIZE_SMALL,\n      [KEYWORD_MEDIUM]: SIZE_MEDIUM,\n      [KEYWORD_LARGE]: SIZE_LARGE,\n    };\n\n    return typeof keyword === 'string' && sizeKeywords.hasOwnProperty(keyword) ? sizeKeywords[keyword] : undefined;\n  }\n\n  validate(control: AbstractControl): ValidationErrors | null {\n    const value = control.value;\n\n    if (!value) {\n      return null;\n    }\n\n    if (this.min && this.max) {\n      const valid = this.min <= value && value <= this.max;\n\n      return valid ? null : { minMaxTime: true };\n    } else if (this.min) {\n      return this.min <= value ? null : { minTime: true };\n    } else if (this.max) {\n      return value <= this.max ? null : { maxTime: true };\n    }\n\n    return null;\n  }\n\n  constructor(\n    protected readonly cd: ChangeDetectorRef,\n    private readonly domAttrService: DomAttributesService,\n    private readonly elem: ElementRef,\n    private readonly renderer2: Renderer2,\n  ) {\n    // @ts-ignore\n    super(cd);\n  }\n\n  ngAfterViewInit(): void {\n    if (!this.ariaLabel && this.inputEl) {\n      this.domAttrService.moveAriaAttributes(this.elem.nativeElement, this.inputEl.nativeElement, this.renderer2);\n    }\n  }\n}\n","<ngb-timepicker\n  #timepicker\n  id=\"{{ id }}\"\n  class=\"bb-input-timepicker\"\n  [attr.aria-labelledby]=\"ariaLabelledby\"\n  [attr.aria-describedby]=\"ariaDescribedby\"\n  [attr.aria-expanded]=\"ariaExpanded\"\n  [attr.role]=\"role\"\n  [attr.aria-invalid]=\"ariaInvalid\"\n  [attr.aria-owns]=\"ariaOwns\"\n  [readonlyInputs]=\"readonly\"\n  [disabled]=\"disabled\"\n  [spinners]=\"false\"\n  [hourStep]=\"hourStep\"\n  [meridian]=\"meridian\"\n  [minuteStep]=\"minuteStep\"\n  [seconds]=\"seconds\"\n  [secondStep]=\"secondStep\"\n  [size]=\"getKeywordBySize(size)\"\n  [attr.aria-label]=\"(!label && ariaLabel) || null\"\n  [ngModel]=\"value\"\n  (ngModelChange)=\"onValueChange($event)\"\n  data-role=\"timepicker\"\n  [attr.autcomplete]=\"autocomplete\">\n</ngb-timepicker>\n"]}