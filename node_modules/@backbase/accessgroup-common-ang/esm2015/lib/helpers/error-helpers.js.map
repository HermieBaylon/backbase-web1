{"version":3,"file":"error-helpers.js","sourceRoot":"","sources":["../../../../../../libs/accessgroup-common-ang/src/lib/helpers/error-helpers.ts"],"names":[],"mappings":"AAGA,MAAM,CAAN,IAAY,UAMX;AAND,WAAY,UAAU;IACpB,+CAAM,CAAA;IACN,2CAAI,CAAA;IACJ,2CAAI,CAAA;IACJ,yCAAG,CAAA;IACH,+CAAM,CAAA;AACR,CAAC,EANW,UAAU,KAAV,UAAU,QAMrB;AASD,MAAM,YAAY,GAA8B;IAC9C,CAAC,EAAE,mBAAmB;IACtB,GAAG,EAAE,YAAY;IACjB,GAAG,EAAE,cAAc;IACnB,GAAG,EAAE,cAAc;CACpB,CAAC;AAEF,MAAM,WAAW,GAAG,CAAC,SAA4B,EAAE,EAAE,CACnD,SAAS,IAAI,SAAS,CAAC,KAAK,IAAI,SAAS,CAAC,KAAK,CAAC,MAAM;IACpD,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,OAAO,EAAE,GAAG,EAAoC,EAAE,EAAE,CAAC,CAAC;QAClF,OAAO;QACP,GAAG;KACJ,CAAC,CAAC;IACL,CAAC,CAAC,EAAE,CAAC;AAET,MAAM,CAAC,MAAM,UAAU,GAAG,CAAC,UAAkB,EAAE,KAAwB,EAAE,MAAM,GAAG,UAAU,CAAC,IAAI,EAAe,EAAE,CAAC,CAAC;IAClH,IAAI,EAAE,GAAG,UAAU,GAAG,YAAY,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,cAAc,EAAE;IACpE,KAAK;IACL,MAAM;IACN,IAAI,EAAE,WAAW,CAAC,KAAK,CAAC;CACzB,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAC,OAA2C,EAAE,IAAY,EAAW,EAAE;IAC7F,IAAI,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;QAC/B,OAAO,KAAK,CAAC;KACd;IACD,OAAO,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAChC,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,YAAY,GAAG,CAAC,OAA2C,EAAW,EAAE;IACnF,IAAI,OAAO,EAAE;QACX,OAAO,OAAO,CAAC,KAAK,IAAI,OAAO,CAAC,SAAS,CAAC;KAC3C;IACD,OAAO,KAAK,CAAC;AACf,CAAC,CAAC;AAEF;;GAEG;AACH,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAC,KAAqC,EAAU,EAAE;IACxE,IAAI,KAAK,IAAI,KAAK,CAAC,IAAI,IAAI,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE;QAC5C,MAAM,QAAQ,GAAkB,EAAE,CAAC;QACnC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAyB,EAAE,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;QAClF,OAAO,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;KAC3B;IACD,OAAO,cAAc,CAAC;AACxB,CAAC,CAAC","sourcesContent":["import { HttpErrorResponse } from '@angular/common/http';\nimport { AbstractControl } from '@angular/forms';\n\nexport enum FormAction {\n  CREATE,\n  EDIT,\n  LIST,\n  ADD,\n  REMOVE,\n}\n\nexport interface WidgetError {\n  kind: string;\n  error: HttpErrorResponse;\n  action: FormAction;\n  keys: { message: string; key: string }[];\n}\n\nconst errorKindMap: { [key: number]: string } = {\n  0: 'ConnectivityError',\n  400: 'BadRequest',\n  401: 'AccessDenied',\n  403: 'AccessDenied',\n};\n\nconst extractKeys = (httpError: HttpErrorResponse) =>\n  httpError && httpError.error && httpError.error.errors\n    ? httpError.error.errors.map(({ message, key }: { message: string; key: string }) => ({\n        message,\n        key,\n      }))\n    : [];\n\nexport const parseError = (widgetName: string, error: HttpErrorResponse, action = FormAction.LIST): WidgetError => ({\n  kind: `${widgetName}${errorKindMap[error.status] || 'UnknownError'}`,\n  error,\n  action,\n  keys: extractKeys(error),\n});\n\nexport const hasError = (control: AbstractControl | undefined | null, type: string): boolean => {\n  if (!control || !control.errors) {\n    return false;\n  }\n  return !!control.errors[type];\n};\n\nexport const isFieldValid = (control: AbstractControl | undefined | null): boolean => {\n  if (control) {\n    return control.valid || control.untouched;\n  }\n  return false;\n};\n\n/**\n * Get original error msg for no typed error\n */\nexport const errorMsg = (error: WidgetError | undefined | null): string => {\n  if (error && error.keys && error.keys.length) {\n    const msgArray: Array<string> = [];\n    error.keys.forEach((element: { message: any }) => msgArray.push(element.message));\n    return msgArray.join('.');\n  }\n  return 'UnknownError';\n};\n"]}