export var FormAction;
(function (FormAction) {
    FormAction[FormAction["CREATE"] = 0] = "CREATE";
    FormAction[FormAction["EDIT"] = 1] = "EDIT";
    FormAction[FormAction["LIST"] = 2] = "LIST";
    FormAction[FormAction["ADD"] = 3] = "ADD";
    FormAction[FormAction["REMOVE"] = 4] = "REMOVE";
})(FormAction || (FormAction = {}));
const errorKindMap = {
    0: 'ConnectivityError',
    400: 'BadRequest',
    401: 'AccessDenied',
    403: 'AccessDenied',
};
const extractKeys = (httpError) => httpError && httpError.error && httpError.error.errors
    ? httpError.error.errors.map(({ message, key }) => ({
        message,
        key,
    }))
    : [];
export const parseError = (widgetName, error, action = FormAction.LIST) => ({
    kind: `${widgetName}${errorKindMap[error.status] || 'UnknownError'}`,
    error,
    action,
    keys: extractKeys(error),
});
export const hasError = (control, type) => {
    if (!control || !control.errors) {
        return false;
    }
    return !!control.errors[type];
};
export const isFieldValid = (control) => {
    if (control) {
        return control.valid || control.untouched;
    }
    return false;
};
/**
 * Get original error msg for no typed error
 */
export const errorMsg = (error) => {
    if (error && error.keys && error.keys.length) {
        const msgArray = [];
        error.keys.forEach((element) => msgArray.push(element.message));
        return msgArray.join('.');
    }
    return 'UnknownError';
};
//# sourceMappingURL=error-helpers.js.map