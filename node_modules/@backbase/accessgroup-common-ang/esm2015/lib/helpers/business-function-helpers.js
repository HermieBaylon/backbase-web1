import { __rest } from "tslib";
const getBusinessFunctionPrivilege = (permission, businessFunction, key) => {
    const privilege = businessFunction.privileges.find((e) => e.privilege === key);
    const assigned = !!permission.assignedPrivileges.find(assignedPrivilege => assignedPrivilege.privilege === key);
    const supportsLimits = privilege ? privilege.supportsLimit : false;
    return {
        applicable: !!privilege,
        assigned,
        supportsLimits,
    };
};
export const PRIVILEGES = ['execute', 'view', 'create', 'edit', 'delete', 'approve', 'cancel'];
export const getExtendedBusinessFunctions = (functionGroup, allBusinessFunctions, filterHookEnabled = false) => {
    if (functionGroup && functionGroup.permissions) {
        const { permissions } = functionGroup;
        const businessFunctionById = allBusinessFunctions.reduce((memo, item) => (Object.assign(Object.assign({}, memo), { [item.functionId]: item })), {});
        if (filterHookEnabled) {
            return permissions
                .filter((permission) => {
                if (permission.functionId === '1004')
                    permission.functionId = '1045'; // TODO fix me in mocks
                const businessFunction = businessFunctionById[permission.functionId];
                return Boolean(businessFunction);
            })
                .map((permission) => permissionMapper(permission, businessFunctionById));
        }
        return permissions.map((permission) => permissionMapper(permission, businessFunctionById));
    }
    return [];
};
function permissionMapper(permission, businessFunctionById) {
    if (permission.functionId === '1004')
        permission.functionId = '1045'; // TODO fix me in mocks
    const businessFunction = businessFunctionById[permission.functionId];
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const { privileges } = businessFunction, rest = __rest(businessFunction, ["privileges"]);
    const privilegesObj = PRIVILEGES.map(priv => ({
        [priv]: getBusinessFunctionPrivilege(permission, businessFunction, priv),
    })).reduce((memo, item) => (Object.assign(Object.assign({}, memo), item)));
    return Object.assign(Object.assign({}, rest), { privileges: privilegesObj });
}
//# sourceMappingURL=business-function-helpers.js.map