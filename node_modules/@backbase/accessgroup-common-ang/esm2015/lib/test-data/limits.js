import { PERIODIC_LIMITS_BOUNDS, TRANSACTIONAL_LIMITS_BOUNDS, } from '../manage-limits-modal/models/limits-bound-types.model';
export const CREATE_NEW_LIMIT_RESPONSE = { uuid: 'testID' };
export const UPDATE_LIMIT_RESPONSE = {
    approvalId: 'testApprovalID',
    uuid: 'testApprovalUUID',
    entities: [],
};
export const LIMITS_PERIODS = [
    { name: 'DAILY' },
    { name: 'WEEKLY' },
    { name: 'biweekly' },
    { name: 'MONTHLY' },
    { name: 'QUARTERLY' },
    { name: 'YEARLY' },
];
export const LIMIT_KEY = {
    'user-BBID': 'user-test-uuid',
    lookupKeys: [
        {
            eref: 'c2185f7d-a1e8-4f97-990d-cb1cfd0d8f53',
            etype: 'SA',
        },
    ],
};
export const REGULAR_PERIODIC_BOUNDS = [undefined, 10, 50, 100, 400, 600, undefined];
export const SHADOW_PERIODIC_BOUNDS = [undefined, 100.0, 200.0, 300, undefined, 600.0, 1600];
export const CONSUMPTIONS_REGULAR = [undefined, 1.0, 20.0, 30, 40, 60.0, undefined];
export const CONSUMPTIONS_SHADOW = [undefined, 500.0, 100.0, 150, undefined, 330.0, 1000];
export const CURRENCY = 'EUR';
export const LIMITS_UUID = { regular: '1234-5678-9101-1121', shadow: '4444-5678-9101-1121' };
export const LIMITS_BOUNDS = [
    {
        period: TRANSACTIONAL_LIMITS_BOUNDS,
        custom: false,
        regular: {
            amount: REGULAR_PERIODIC_BOUNDS[0],
        },
        shadow: {
            amount: SHADOW_PERIODIC_BOUNDS[0],
        },
    },
    ...LIMITS_PERIODS.map((item, index) => {
        return {
            period: item.name.toLocaleLowerCase(),
            custom: index === 2,
            regular: {
                amount: REGULAR_PERIODIC_BOUNDS[index + 1],
            },
            shadow: {
                amount: SHADOW_PERIODIC_BOUNDS[index + 1],
            },
            regularConsumption: CONSUMPTIONS_REGULAR[index + 1],
            shadowConsumption: CONSUMPTIONS_SHADOW[index + 1],
        };
    }),
];
export const LIMITS_WITH_CONSUMPTION = [
    {
        limit: {
            alias: '',
            uuid: LIMITS_UUID.regular,
            'user-BBID': LIMIT_KEY['user-BBID'],
            entities: LIMIT_KEY.lookupKeys,
            currency: CURRENCY,
            shadow: false,
        },
        consumptions: {
            daily: CONSUMPTIONS_REGULAR[1],
            weekly: CONSUMPTIONS_REGULAR[2],
            monthly: CONSUMPTIONS_REGULAR[4],
            quarterly: CONSUMPTIONS_REGULAR[5],
            customPeriods: [{ period: 'biweekly', amount: CONSUMPTIONS_REGULAR[3] }],
        },
        checkTime: '2017-01-31T12:12:12Z',
    },
    {
        limit: {
            alias: '',
            uuid: LIMITS_UUID.shadow,
            'user-BBID': LIMIT_KEY['user-BBID'],
            entities: LIMIT_KEY.lookupKeys,
            currency: CURRENCY,
            shadow: true,
        },
        consumptions: {
            daily: CONSUMPTIONS_SHADOW[1],
            weekly: CONSUMPTIONS_SHADOW[2],
            quarterly: CONSUMPTIONS_SHADOW[5],
            yearly: CONSUMPTIONS_SHADOW[6],
            customPeriods: [{ period: 'biweekly', amount: CONSUMPTIONS_SHADOW[3] }],
        },
        checkTime: '2017-01-31T12:12:12Z',
    },
];
// made it here for sonar check
LIMITS_WITH_CONSUMPTION[0].limit[PERIODIC_LIMITS_BOUNDS] = {
    daily: REGULAR_PERIODIC_BOUNDS[1],
    weekly: REGULAR_PERIODIC_BOUNDS[2],
    monthly: REGULAR_PERIODIC_BOUNDS[4],
    quarterly: REGULAR_PERIODIC_BOUNDS[5],
    customPeriods: [{ period: 'biweekly', amount: REGULAR_PERIODIC_BOUNDS[3] }],
};
LIMITS_WITH_CONSUMPTION[1].limit[PERIODIC_LIMITS_BOUNDS] = {
    daily: SHADOW_PERIODIC_BOUNDS[1],
    weekly: SHADOW_PERIODIC_BOUNDS[2],
    quarterly: SHADOW_PERIODIC_BOUNDS[5],
    yearly: SHADOW_PERIODIC_BOUNDS[6],
    customPeriods: [{ period: 'biweekly', amount: SHADOW_PERIODIC_BOUNDS[3] }],
};
export const LIMITS = [
    {
        alias: '',
        uuid: LIMITS_UUID.regular,
        'user-BBID': LIMIT_KEY['user-BBID'],
        entities: LIMIT_KEY.lookupKeys,
        currency: CURRENCY,
        'periodic-limits-bounds': {
            daily: REGULAR_PERIODIC_BOUNDS[1],
            weekly: REGULAR_PERIODIC_BOUNDS[2],
            monthly: REGULAR_PERIODIC_BOUNDS[4],
            quarterly: REGULAR_PERIODIC_BOUNDS[5],
            customPeriods: [{ period: 'biweekly', amount: REGULAR_PERIODIC_BOUNDS[3] }],
        },
        shadow: false,
    },
];
//# sourceMappingURL=limits.js.map