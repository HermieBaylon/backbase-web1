{"version":3,"file":"user-permissions.service.js","sourceRoot":"","sources":["../../../../../../libs/accessgroup-common-ang/src/lib/services/user-permissions.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,gBAAgB,EAAyC,MAAM,kCAAkC,CAAC;AAE3G,OAAO,EAAE,GAAG,EAAE,WAAW,EAAE,MAAM,gBAAgB,CAAC;;;AAGlD,MAAM,OAAO,sBAAsB;IA8BjC,YAA6B,IAAsB;QAAtB,SAAI,GAAJ,IAAI,CAAkB;QA7BnD;;WAEG;QACM,qBAAgB,GACvB,IAAI,CAAC,kBAAkB,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;QAEvD;;WAEG;QACM,uBAAkB,GAAoB,IAAI,CAAC,cAAc,CAAC,QAAQ,EAAE,eAAe,CAAC,CAAC;QAE9F;;WAEG;QACM,2BAAsB,GAAoB,IAAI,CAAC,cAAc,CAAC,cAAc,EAAE,oBAAoB,CAAC,CAAC;QAE7G;;WAEG;QACM,6BAAwB,GAAoB,IAAI,CAAC,cAAc,CAAC,QAAQ,EAAE,sBAAsB,CAAC,CAAC;QAE3G;;WAEG;QACM,mCAA8B,GAA2C,IAAI,CAAC,cAAc,CACnG,cAAc,EACd,kBAAkB,CACnB,CAAC;IAEoD,CAAC;IAEvD;;;;OAIG;IACK,cAAc,CAAC,QAAgB,EAAE,YAAoB;QAC3D,OAAO,IAAI,CAAC,gBAAgB,CAAC,IAAI;QAC/B,aAAa;QACb,GAAG,CAAC,CAAC,IAA6C,EAAE,EAAE;YACpD,4CAA4C;YAC5C,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,KAAK,QAAQ,IAAI,IAAI,CAAC,QAAQ,KAAK,YAAY,CAAC,CAAC;YAEnG,OAAO,UAAU,IAAI,SAAS,CAAC;QACjC,CAAC,CAAC,EACF,GAAG,CAAC,CAAC,IAAS,EAAE,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC,EACpD,WAAW,CAAC,CAAC,CAAC,CACf,CAAC;IACJ,CAAC;IAED;;OAEG;IACK,kBAAkB;QACxB,OAAO,IAAI,CAAC,IAAI,CAAC,yBAAyB,EAAE,CAAC;IAC/C,CAAC;;uIAxDU,sBAAsB;2IAAtB,sBAAsB;4FAAtB,sBAAsB;kBADlC,UAAU","sourcesContent":["import { Injectable } from '@angular/core';\nimport { UsersHttpService, UserPermissionsSummaryGetResponseBody } from '@backbase/data-ang/accesscontrol';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay } from 'rxjs/operators';\n\n@Injectable()\nexport class UserPermissionsService {\n  /**\n   * Current user permissions\n   */\n  readonly userPermissions$: Observable<UserPermissionsSummaryGetResponseBody[] | null> =\n    this.getUserPermissions().pipe(shareReplay(1, 1000));\n\n  /**\n   * Current user Limits permissions\n   */\n  readonly limitsPermissions$: Observable<any> = this.getPermissions('Limits', 'Manage Limits');\n\n  /**\n   * Payee group permissions\n   */\n  readonly payeeGroupPermissions$: Observable<any> = this.getPermissions('Entitlements', 'Manage Data Groups');\n\n  /**\n   * Current user Shadow Limits permissions\n   */\n  readonly shadowLimitsPermissions$: Observable<any> = this.getPermissions('Limits', 'Manage Shadow Limits');\n\n  /**\n   * Wizard permissions\n   */\n  readonly entitlementsWizardPermissions$: Observable<{ [key: string]: boolean }> = this.getPermissions(\n    'Entitlements',\n    'Quick User Setup',\n  );\n\n  constructor(private readonly http: UsersHttpService) {}\n\n  /**\n   * Return permissions based on provided resource and function names\n   * @param resource: string - resource name\n   * @param functionName: string - function name\n   */\n  private getPermissions(resource: string, functionName: string): Observable<any> {\n    return this.userPermissions$.pipe(\n      // @ts-ignore\n      map((data: UserPermissionsSummaryGetResponseBody[]) => {\n        // NOTE: Search key hardcoded by the purpose\n        const limitsPerm = data.find(perm => perm.resource === resource && perm.function === functionName);\n\n        return limitsPerm || undefined;\n      }),\n      map((perm: any) => (perm && perm.permissions) || {}),\n      shareReplay(1),\n    );\n  }\n\n  /**\n   * Return PermissionsSummary request stream\n   */\n  private getUserPermissions(): Observable<UserPermissionsSummaryGetResponseBody[]> {\n    return this.http.getUserPermissionsSummary();\n  }\n}\n"]}