import { Injectable } from '@angular/core';
import { combineLatest, of } from 'rxjs';
import { map, shareReplay } from 'rxjs/operators';
import { UserPermissionsService } from './user-permissions.service';
import * as i0 from "@angular/core";
import * as i1 from "./user-permissions.service";
export class LimitAccessService {
    constructor(userPermissionsService) {
        this.userPermissionsService = userPermissionsService;
    }
    /**
     * Current user limit access based on CXP property and user permission
     */
    limitAccess(enableLimit, enableShadowLimit) {
        if (enableLimit) {
            return combineLatest([
                this.userPermissionsService.shadowLimitsPermissions$,
                this.userPermissionsService.limitsPermissions$,
            ]).pipe(map(([shadowLimitsPermissions, limitsPermissions]) => {
                return {
                    regularLimit: limitsPermissions,
                    shadowLimit: enableShadowLimit ? shadowLimitsPermissions : {},
                };
            }), shareReplay(1));
        }
        else {
            return of({ regularLimit: {}, shadowLimit: {} });
        }
    }
}
/** @nocollapse */ LimitAccessService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LimitAccessService, deps: [{ token: i1.UserPermissionsService }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ LimitAccessService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LimitAccessService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: LimitAccessService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.UserPermissionsService }]; } });
//# sourceMappingURL=limit-access.service.js.map