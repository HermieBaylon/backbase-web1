{"version":3,"file":"user-permision-data-group-details.service.js","sourceRoot":"","sources":["../../../../../../libs/accessgroup-common-ang/src/lib/services/user-permision-data-group-details.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,KAAK,EAAc,MAAM,MAAM,CAAC;AACzC,OAAO,EAA+B,mBAAmB,EAAE,MAAM,oCAAoC,CAAC;AACtG,OAAO,EAAE,yBAAyB,EAAE,MAAM,iCAAiC,CAAC;AAC5E,OAAO,EAAE,2BAA2B,EAAE,4BAA4B,EAAE,MAAM,kCAAkC,CAAC;AAC7G,OAAO,EAAE,UAAU,EAAE,GAAG,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;;;;;AAY5D,MAAM,OAAO,sCAAsC;IAgBjD,YACmB,cAAmC,EACnC,YAAuC,EACvC,2BAAwD,EACxD,4BAA0D;QAH1D,mBAAc,GAAd,cAAc,CAAqB;QACnC,iBAAY,GAAZ,YAAY,CAA2B;QACvC,gCAA2B,GAA3B,2BAA2B,CAA6B;QACxD,iCAA4B,GAA5B,4BAA4B,CAA8B;QAnB7E;;WAEG;QACM,gCAA2B,GAAiD,IAAI,CAAC,2BAA2B;aAClH,0BAA0B,EAAE;aAC5B,IAAI,CAAC,SAAS,CAAC,CAAC,gBAAkC,EAAE,EAAE,CAAC,IAAI,CAAC,+BAA+B,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;IAehH,CAAC;IAbJ,+BAA+B,CAAC,gBAAkC;QAChE,OAAO,IAAI,CAAC,4BAA4B,CAAC,+BAA+B,CAAC,EAAE,EAAE,EAAE,gBAAgB,CAAC,EAAE,EAAE,CAAC,CAAC,IAAI,CACxG,GAAG,CAAC,CAAC,YAA2C,EAAE,EAAE,CAAC,CAAC;YACpD,gBAAgB;YAChB,YAAY;SACb,CAAC,CAAC,CACJ,CAAC;IACJ,CAAC;IAQD;;;OAGG;IACH,mBAAmB,CAAC,kBAA0B;QAC5C,OAAO,IAAI,CAAC,2BAA2B,CAAC,uBAAuB,CAAC,EAAE,kBAAkB,EAAE,CAAC,CAAC,IAAI,CAC1F,SAAS,CAAC,CAAC,gBAAkC,EAAE,EAAE,CAAC,IAAI,CAAC,+BAA+B,CAAC,gBAAgB,CAAC,CAAC,EACzG,UAAU,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,CACxB,CAAC;IACJ,CAAC;IAED,qBAAqB,CAAC,UAAoB,EAAE,MAA4B;QACtE,OAAO,IAAI,CAAC,cAAc;aACvB,kBAAkB,iCAEZ,MAAM,KACT,6BAA6B,EAAE;gBAC7B,UAAU;aACX,KAEH,UAAU,CACX;aACA,IAAI,CACH,GAAG,CAAC,CAAC,IAAsD,EAAE,EAAE;YAC7D,OAAO;gBACL,IAAI,EAAE,IAAI,CAAC,IAAI;gBACf,UAAU,EAAE,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;aACtD,CAAC;QACJ,CAAC,CAAC,CACH,CAAC;IACN,CAAC;IAED,oBAAoB,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,UAAU,EAAE,cAAc,EAAO;QACzE,OAAO,IAAI,CAAC,YAAY,CAAC,0BAA0B,CAAC;YAClD,0BAA0B,kBACxB,cAAc,EAAE,cAAc,EAC9B,cAAc,EAAE,KAAK,EACrB,IAAI;gBACJ,IAAI,IACD,CAAC,UAAU,IAAI,EAAE,UAAU,EAAE,CAAC,CAClC;SACF,CAAC,CAAC;IACL,CAAC;;uJAjEU,sCAAsC;2JAAtC,sCAAsC;4FAAtC,sCAAsC;kBADlD,UAAU","sourcesContent":["import { Injectable } from '@angular/core';\nimport { EMPTY, Observable } from 'rxjs';\nimport { ContactsGetResponseBodyItem, ContactsHttpService } from '@backbase/data-ang/contact-manager';\nimport { ProductSummaryHttpService } from '@backbase/data-ang/arrangements';\nimport { ServiceAgreementHttpService, ServiceAgreementsHttpService } from '@backbase/data-ang/accesscontrol';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { HttpResponse } from '@angular/common/http';\nimport { ServiceAgreement, ServiceAgreementParticipant, ServiceAgreementWithParticipants } from '../model/types';\n\ninterface GetPayeeGroupParams {\n  query?: string;\n  from?: number;\n  size?: number;\n  targetSaId?: string;\n}\n\n@Injectable()\nexport class UserPermissionsDataGroupDetailsService {\n  /**\n   * Service agreement from context stream\n   */\n  readonly serviceAgreementFromContext: Observable<ServiceAgreementWithParticipants> = this.serviceAgreementHttpService\n    .getServiceAgreementContext()\n    .pipe(switchMap((serviceAgreement: ServiceAgreement) => this.getServiceAgreementParticipants(serviceAgreement)));\n\n  getServiceAgreementParticipants(serviceAgreement: ServiceAgreement): Observable<ServiceAgreementWithParticipants> {\n    return this.serviceAgreementsHttpService.getServiceAgreementParticipants({ id: serviceAgreement.id }).pipe(\n      map((participants: ServiceAgreementParticipant[]) => ({\n        serviceAgreement,\n        participants,\n      })),\n    );\n  }\n  constructor(\n    private readonly contactService: ContactsHttpService,\n    private readonly itemsService: ProductSummaryHttpService,\n    private readonly serviceAgreementHttpService: ServiceAgreementHttpService,\n    private readonly serviceAgreementsHttpService: ServiceAgreementsHttpService,\n  ) {}\n\n  /**\n   * Send request to retrieve service agreement info\n   * @param serviceAgreementId\n   */\n  getServiceAgreement(serviceAgreementId: string): Observable<ServiceAgreementWithParticipants> {\n    return this.serviceAgreementHttpService.getServiceAgreementItem({ serviceAgreementId }).pipe(\n      switchMap((serviceAgreement: ServiceAgreement) => this.getServiceAgreementParticipants(serviceAgreement)),\n      catchError(() => EMPTY),\n    );\n  }\n\n  getPayeeGroupContacts(contactIds: string[], params?: GetPayeeGroupParams): Observable<any> {\n    return this.contactService\n      .postContactsFilter(\n        {\n          ...params,\n          contactsPostFilterRequestBody: {\n            contactIds,\n          },\n        },\n        'response',\n      )\n      .pipe(\n        map((resp: HttpResponse<Array<ContactsGetResponseBodyItem>>) => {\n          return {\n            data: resp.body,\n            totalCount: Number(resp.headers.get('x-total-count')),\n          };\n        }),\n      );\n  }\n\n  getAccountGroupItems({ items, from, size, searchTerm, legalEntityIds }: any): Observable<any> {\n    return this.itemsService.postFilterProductSummaries({\n      productSummaryFilterParams: {\n        legalEntityIds: legalEntityIds,\n        arrangementIds: items,\n        from,\n        size,\n        ...(searchTerm && { searchTerm }),\n      },\n    });\n  }\n}\n"]}