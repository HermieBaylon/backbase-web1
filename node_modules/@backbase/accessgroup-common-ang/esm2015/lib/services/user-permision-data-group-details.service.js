import { Injectable } from '@angular/core';
import { EMPTY } from 'rxjs';
import { ContactsHttpService } from '@backbase/data-ang/contact-manager';
import { ProductSummaryHttpService } from '@backbase/data-ang/arrangements';
import { ServiceAgreementHttpService, ServiceAgreementsHttpService } from '@backbase/data-ang/accesscontrol';
import { catchError, map, switchMap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/data-ang/contact-manager";
import * as i2 from "@backbase/data-ang/arrangements";
import * as i3 from "@backbase/data-ang/accesscontrol";
export class UserPermissionsDataGroupDetailsService {
    constructor(contactService, itemsService, serviceAgreementHttpService, serviceAgreementsHttpService) {
        this.contactService = contactService;
        this.itemsService = itemsService;
        this.serviceAgreementHttpService = serviceAgreementHttpService;
        this.serviceAgreementsHttpService = serviceAgreementsHttpService;
        /**
         * Service agreement from context stream
         */
        this.serviceAgreementFromContext = this.serviceAgreementHttpService
            .getServiceAgreementContext()
            .pipe(switchMap((serviceAgreement) => this.getServiceAgreementParticipants(serviceAgreement)));
    }
    getServiceAgreementParticipants(serviceAgreement) {
        return this.serviceAgreementsHttpService.getServiceAgreementParticipants({ id: serviceAgreement.id }).pipe(map((participants) => ({
            serviceAgreement,
            participants,
        })));
    }
    /**
     * Send request to retrieve service agreement info
     * @param serviceAgreementId
     */
    getServiceAgreement(serviceAgreementId) {
        return this.serviceAgreementHttpService.getServiceAgreementItem({ serviceAgreementId }).pipe(switchMap((serviceAgreement) => this.getServiceAgreementParticipants(serviceAgreement)), catchError(() => EMPTY));
    }
    getPayeeGroupContacts(contactIds, params) {
        return this.contactService
            .postContactsFilter(Object.assign(Object.assign({}, params), { contactsPostFilterRequestBody: {
                contactIds,
            } }), 'response')
            .pipe(map((resp) => {
            return {
                data: resp.body,
                totalCount: Number(resp.headers.get('x-total-count')),
            };
        }));
    }
    getAccountGroupItems({ items, from, size, searchTerm, legalEntityIds }) {
        return this.itemsService.postFilterProductSummaries({
            productSummaryFilterParams: Object.assign({ legalEntityIds: legalEntityIds, arrangementIds: items, from,
                size }, (searchTerm && { searchTerm })),
        });
    }
}
/** @nocollapse */ UserPermissionsDataGroupDetailsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UserPermissionsDataGroupDetailsService, deps: [{ token: i1.ContactsHttpService }, { token: i2.ProductSummaryHttpService }, { token: i3.ServiceAgreementHttpService }, { token: i3.ServiceAgreementsHttpService }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ UserPermissionsDataGroupDetailsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UserPermissionsDataGroupDetailsService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: UserPermissionsDataGroupDetailsService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.ContactsHttpService }, { type: i2.ProductSummaryHttpService }, { type: i3.ServiceAgreementHttpService }, { type: i3.ServiceAgreementsHttpService }]; } });
//# sourceMappingURL=user-permision-data-group-details.service.js.map