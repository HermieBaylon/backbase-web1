import { defaultBusinessFunctionGroups, defaultOrderedBusinessFunctionGroups, } from '../helpers/business-function-group.constants';
export class BusinessFunctionGroupService {
    constructor(customBusinessFunctionGroup, orderedBusinessFunctionGroups) {
        this.customBusinessFunctionGroup = customBusinessFunctionGroup;
        this.orderedBusinessFunctionGroups = orderedBusinessFunctionGroups;
    }
    convertToGroups(allBusinessFunctions) {
        const businessFunctionsByGroup = allBusinessFunctions.reduce((memo, item) => {
            const customGroupType = this.getGroupForBusinessFunction(item);
            return Object.assign(Object.assign({}, memo), { [customGroupType]: [...(memo[customGroupType] || []), item] });
        }, {});
        return Object.entries(businessFunctionsByGroup)
            .map(([groupKey, businessFunctions]) => ({
            groupKey,
            businessFunctions,
        }))
            .sort((a, b) => this.orderedBusinessFunctionGroups.indexOf(a.groupKey) -
            this.orderedBusinessFunctionGroups.indexOf(b.groupKey));
    }
    getGroupForBusinessFunction(item) {
        const defaultGroupType = defaultOrderedBusinessFunctionGroups.find(groupType => defaultBusinessFunctionGroups[groupType].includes(item.resource)) || 'other';
        return this.customBusinessFunctionGroup(item, defaultGroupType);
    }
    attachGroupKeyToBusinessFunction(businessFunctions) {
        return businessFunctions
            .map((bf) => (Object.assign(Object.assign({}, bf), { groupKey: this.getGroupForBusinessFunction(bf) })))
            .sort((a, b) => this.orderedBusinessFunctionGroups.indexOf(a.groupKey) -
            this.orderedBusinessFunctionGroups.indexOf(b.groupKey));
    }
}
//# sourceMappingURL=business-function-group.service.js.map