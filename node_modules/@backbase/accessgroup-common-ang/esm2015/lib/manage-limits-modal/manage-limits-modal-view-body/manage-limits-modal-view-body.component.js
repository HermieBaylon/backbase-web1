import { Component, Directive, EventEmitter, Input, Output } from '@angular/core';
import { BbTemplate } from '@backbase/foundation-ang/core';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/modal";
import * as i2 from "@backbase/ui-ang/alert";
import * as i3 from "@backbase/ui-ang/icon";
import * as i4 from "./limit-bound-item/limit-bound-item.component";
import * as i5 from "@angular/common";
import * as i6 from "@backbase/ui-ang/tooltip-directive";
import * as i7 from "@backbase/ui-ang/button";
import * as i8 from "@backbase/ui-ang/keyboard-click-directive";
export class ManageLimitsModalViewBodyComponent {
    constructor() {
        /**
         * Close modal window event.
         * Propagate event when modal window should be closed.
         */
        this.cancel = new EventEmitter();
        /**
         * Flag for show/hide regular limit column.
         */
        this.showRegularLimit = false;
        /**
         * Flag for show/hide shadow limit column.
         */
        this.showShadowLimit = false;
        /**
         * Flag for show pending state alert.
         */
        this.pending = false;
    }
    /**
     * Emits cancel: EventEmitter event.
     */
    close() {
        this.cancel.emit();
    }
}
/** @nocollapse */ ManageLimitsModalViewBodyComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManageLimitsModalViewBodyComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ ManageLimitsModalViewBodyComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ManageLimitsModalViewBodyComponent, selector: "bb-manage-limits-modal-view-body", inputs: { showRegularLimit: "showRegularLimit", showShadowLimit: "showShadowLimit", pending: "pending", currency: "currency", limitBounds: "limitBounds" }, outputs: { cancel: "cancel" }, ngImport: i0, template: "<ng-container bbManageLimitsModalViewBodyCustomizable [bbHostRef]=\"this\"></ng-container>\n\n<ng-template bbManageLimitsModalViewBodyCustomizable let-hostRef>\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody>\n      <bb-alert-ui\n        *ngIf=\"hostRef.pending\"\n        title=\"This limit has pending approval and cannot be modified\"\n        modifier=\"warning\"\n        data-role=\"limit-pending-alert\"\n        i18n-title=\"This limit has pending approval and cannot be modified@@limit.pending.alert.text\">\n      </bb-alert-ui>\n      <div class=\"row bb-block bb-block--md\">\n        <div class=\"bb-stack col-5\" [ngClass]=\"{ 'col-8': !hostRef.showRegularLimit || !hostRef.showShadowLimit }\">\n          <span\n            class=\"bb-subheader bb-subheader--regular bb-text-semi-bold bb-stack__item bb-stack__item--spacing-xs\"\n            i18n=\"Limits bound title@@limits.view.header.period.text\"\n            data-role=\"limit-view-header-period\"\n            >Period</span\n          >\n          <bb-icon-ui\n            [bbTooltip]=\"limitsTitleTooltip\"\n            placement=\"bottom\"\n            triggers=\"hover\"\n            name=\"info\"\n            size=\"sm\"></bb-icon-ui>\n        </div>\n\n        <div class=\"col\" *ngIf=\"hostRef.showRegularLimit\" data-role=\"limit-view-header-limits\">\n          <span\n            class=\"bb-subheader bb-subheader--regular bb-text-semi-bold\"\n            i18n=\"Limits bound title@@limits.view.header.limits.text\">\n            Limit\n          </span>\n        </div>\n\n        <div class=\"col\" *ngIf=\"hostRef.showShadowLimit\" data-role=\"limit-view-header-shadow-limits\">\n          <span\n            class=\"bb-subheader bb-subheader--regular bb-text-semi-bold\"\n            i18n=\"Limits bound title@@limits.view.header.shadow-limits.text\">\n            Shadow limit\n          </span>\n        </div>\n      </div>\n      <hr />\n\n      <ng-container *ngFor=\"let bound of hostRef.limitBounds\">\n        <bb-limit-bound-item\n          [limitBound]=\"bound\"\n          [currency]=\"hostRef.currency\"\n          [showShadowLimit]=\"hostRef.showShadowLimit\"\n          [showRegularLimit]=\"hostRef.showRegularLimit\"\n          data-role=\"limit-limits-bound\"></bb-limit-bound-item>\n      </ng-container>\n    </ng-template>\n  </bb-modal-body-ui>\n  <bb-modal-footer-ui>\n    <ng-template bbCustomModalFooter>\n      <div class=\"bb-button-bar\">\n        <button\n          bbButton\n          class=\"bb-button-bar__button\"\n          color=\"primary\"\n          i18n=\"Limits bound title@@limits.view.cancel.button.text\"\n          (bbKeyboardClick)=\"hostRef.close()\"\n          data-role=\"limit-view-cancel-button\">\n          Cancel\n        </button>\n      </div>\n    </ng-template>\n  </bb-modal-footer-ui>\n\n  <ng-template #limitsTitleTooltip>\n    <span i18n=\"Limits modal header title tooltip @@limits.view.period.tooltip\">\n      When setting limits, \u2018per transaction\u2019 should be your smallest value, with \u2018yearly\u2019 the largest.\n    </span>\n  </ng-template>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i1.ModalBodyComponent; }), selector: "bb-modal-body-ui" }, { type: i0.forwardRef(function () { return i2.AlertComponent; }), selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i0.forwardRef(function () { return i3.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0.forwardRef(function () { return i4.LimitBoundItemComponent; }), selector: "bb-limit-bound-item", inputs: ["limitBound", "currency", "showShadowLimit", "showRegularLimit"] }, { type: i0.forwardRef(function () { return i1.ModalFooterComponent; }), selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }], directives: [{ type: i0.forwardRef(function () { return ManageLimitsModalViewBodyCustomizableDirective; }), selector: "[bbManageLimitsModalViewBodyCustomizable]" }, { type: i0.forwardRef(function () { return i1.CustomModalBodyDirective; }), selector: "ng-template[bbCustomModalBody]" }, { type: i0.forwardRef(function () { return i5.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i5.NgClass; }), selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i0.forwardRef(function () { return i6.TooltipDirective; }), selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i0.forwardRef(function () { return i5.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i0.forwardRef(function () { return i1.CustomModalFooterDirective; }), selector: "ng-template[bbCustomModalFooter]" }, { type: i0.forwardRef(function () { return i7.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0.forwardRef(function () { return i8.KeyboardClickDirective; }), selector: "[bbKeyboardClick]", outputs: ["bbKeyboardClick"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManageLimitsModalViewBodyComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-manage-limits-modal-view-body',
                    templateUrl: 'manage-limits-modal-view-body.component.html',
                }]
        }], propDecorators: { cancel: [{
                type: Output
            }], showRegularLimit: [{
                type: Input
            }], showShadowLimit: [{
                type: Input
            }], pending: [{
                type: Input
            }], currency: [{
                type: Input
            }], limitBounds: [{
                type: Input
            }] } });
export class ManageLimitsModalViewBodyCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ ManageLimitsModalViewBodyCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManageLimitsModalViewBodyCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ ManageLimitsModalViewBodyCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ManageLimitsModalViewBodyCustomizableDirective, selector: "[bbManageLimitsModalViewBodyCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ManageLimitsModalViewBodyCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbManageLimitsModalViewBodyCustomizable]',
                }]
        }] });
//# sourceMappingURL=manage-limits-modal-view-body.component.js.map