import { ChangeDetectorRef, Component, Directive, ElementRef, EventEmitter, Input, Output, } from '@angular/core';
import { FormBuilder, FormControl } from '@angular/forms';
import { Subject } from 'rxjs';
import { debounceTime, take, takeUntil } from 'rxjs/operators';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { AMOUNT_DELIMETER_REG_EXP } from '../../constants/amount-delimeter-remover';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "@backbase/ui-ang/modal";
import * as i3 from "@backbase/ui-ang/alert";
import * as i4 from "@backbase/ui-ang/icon";
import * as i5 from "@backbase/ui-ang/amount";
import * as i6 from "@backbase/ui-ang/currency-input";
import * as i7 from "@backbase/ui-ang/input-validation-message";
import * as i8 from "@backbase/ui-ang/load-button";
import * as i9 from "@angular/common";
import * as i10 from "@backbase/ui-ang/tooltip-directive";
import * as i11 from "@backbase/ui-ang/keyboard-click-directive";
import * as i12 from "@backbase/ui-ang/button";
export class EditLimitComponent {
    constructor(fb, hostEl, _ref) {
        this.fb = fb;
        this.hostEl = hostEl;
        this._ref = _ref;
        /**
         * Flag for show/hide regular limit column.
         */
        this.showRegularLimit = false;
        /**
         * Flag for show/hide shadow limit column.
         */
        this.showShadowLimit = false;
        /**
         * Propagate event when submit button was clicked.
         */
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.submit = new EventEmitter();
        /**
         * Close modal window event.
         * Propagate event when modal window should be closed.
         */
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.close = new EventEmitter();
        /**
         * Reactive form for edit limits
         */
        this.limitForm = this.fb.group({});
        /**
         * Bound list with full information
         */
        this.limitBoundList = [];
        /**
         * Flag which show when regular limits was edited
         */
        this.isRegularChanged = false;
        /**
         * Flag which show when shadow limits was edited
         */
        this.isShadowChanged = false;
        /**
         * Flag which show when form has zero value
         */
        this.showZeroLimitAlert = false;
        /**
         * Flag which show when user dismiss Zero info block.
         */
        this.zeroLimitAlertDismissed = false;
        this.destroy$ = new Subject();
    }
    /**
     * Limits bounds data.
     */
    set limitBounds(limitBounds) {
        const regular = this.fb.array([]);
        const shadow = this.fb.array([]);
        limitBounds.forEach((limitBound) => {
            var _a, _b;
            // this transformation need to resolve HAD-1594 issue
            //
            // Need to cover both types
            // because API describe number amount, but server return string
            let regularAmount = (_a = limitBound.regular.amount) !== null && _a !== void 0 ? _a : '';
            let shadowAmount = (_b = limitBound.shadow.amount) !== null && _b !== void 0 ? _b : '';
            if (typeof regularAmount === 'string') {
                regularAmount = regularAmount.split('.')[0];
            }
            else {
                regularAmount = Math.trunc(regularAmount);
            }
            if (typeof shadowAmount === 'string') {
                shadowAmount = shadowAmount.split('.')[0];
            }
            else {
                shadowAmount = Math.trunc(shadowAmount);
            }
            regular.push(new FormControl({
                amount: regularAmount,
                currency: ' ',
            }, {
                updateOn: 'change',
            }));
            shadow.push(new FormControl({
                amount: shadowAmount,
                currency: ' ',
            }, {
                updateOn: 'change',
            }));
        });
        this.limitForm.addControl('regular', regular);
        this.limitForm.addControl('shadow', shadow);
        this.limitBoundList = limitBounds;
        this.onChanges();
    }
    /**
     * Disabled submit button getter
     */
    get isDisabled() {
        return Boolean(this.showLoadingSubmitBtn || this.limitForm.invalid || !(this.isRegularChanged || this.isShadowChanged));
    }
    /**
     * Submit limit form
     */
    submitForm() {
        if (!this.validateForm()) {
            this.submit.emit({
                isRegularChanged: this.isRegularChanged,
                isShadowChanged: this.isShadowChanged,
                limitValue: this.limitForm.value,
            });
        }
    }
    /**
     * Track when form is changed
     */
    onChanges() {
        this.limitForm.get('regular').valueChanges.pipe(take(1), takeUntil(this.destroy$)).subscribe(() => {
            this.isRegularChanged = true;
        });
        this.limitForm.get('shadow').valueChanges.pipe(take(1), takeUntil(this.destroy$)).subscribe(() => {
            this.isShadowChanged = true;
        });
        // FE form validation
        // made in component, because custom validator/asyncValidator doesn't work properly
        this.limitForm.valueChanges.pipe(debounceTime(500), takeUntil(this.destroy$)).subscribe(() => this.validateForm());
    }
    /**
     * Function for form validation
     */
    validateForm() {
        const formGroupValue = this.limitForm.value;
        let hasRegularError = false;
        let hasShadowError = false;
        if (formGroupValue) {
            this.limitForm.setErrors(null);
            if (this.showRegularLimit && !this.disableRegular) {
                const controlsRegular = this.limitForm.get('regular').controls;
                hasRegularError = this.checkBounds(formGroupValue.regular, controlsRegular);
            }
            if (this.showShadowLimit && !this.disableShadow) {
                const controlsShadow = this.limitForm.get('shadow').controls;
                hasShadowError = this.checkBounds(formGroupValue.shadow, controlsShadow);
            }
            // TODO check if validation working without it after updating to Angular 9
            this._ref.markForCheck();
        }
        return hasRegularError || hasShadowError;
    }
    /**
     * Function for validation one type of the limit
     * @param boundList
     * @param controls
     */
    checkBounds(boundList, controls) {
        var _a, _b;
        // clear all previous errors
        controls.forEach((item) => {
            item.setErrors(null);
        });
        for (let i = 0; i < boundList.length; i++) {
            for (let j = i + 1; j < boundList.length; j++) {
                const firstAmount = ((_a = boundList[i]) === null || _a === void 0 ? void 0 : _a.amount) && parseInt(boundList[i].amount.toString().replace(AMOUNT_DELIMETER_REG_EXP, ''), 10);
                const secondAmount = ((_b = boundList[j]) === null || _b === void 0 ? void 0 : _b.amount) && parseInt(boundList[j].amount.toString().replace(AMOUNT_DELIMETER_REG_EXP, ''), 10);
                if (firstAmount && secondAmount && firstAmount > secondAmount) {
                    controls[i].setErrors({ biggerThan: this.limitBoundList[j].period });
                    return true;
                }
            }
        }
        return false;
    }
    /**
     * Track when control has zero amount and Zero info message should be shown
     */
    shouldZeroAlertBeShown() {
        if (this.zeroLimitAlertDismissed) {
            return false;
        }
        if (this.showZeroLimitAlert) {
            return true;
        }
        const value = this.limitForm.value;
        const isZero = value.regular.find((item) => (item === null || item === void 0 ? void 0 : item.amount) === '0') || value.shadow.find((item) => (item === null || item === void 0 ? void 0 : item.amount) === '0');
        if (isZero) {
            this.showZeroLimitAlert = Boolean(isZero);
            this.scrollToZeroInfo();
        }
        return isZero;
    }
    /**
     * Scroll to zero limit info block
     */
    scrollToZeroInfo() {
        const zeroInfoElement = this.hostEl.nativeElement.querySelector('#zeroLimitInfo');
        if (zeroInfoElement) {
            setTimeout(() => {
                zeroInfoElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
            });
        }
    }
    ngOnDestroy() {
        this.destroy$.next();
    }
}
/** @nocollapse */ EditLimitComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditLimitComponent, deps: [{ token: i1.FormBuilder }, { token: i0.ElementRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ EditLimitComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: EditLimitComponent, selector: "bb-edit-limit", inputs: { showRegularLimit: "showRegularLimit", showShadowLimit: "showShadowLimit", limitBounds: "limitBounds", currency: "currency", showLoadingSubmitBtn: "showLoadingSubmitBtn", errors: "errors", disableRegular: "disableRegular", disableShadow: "disableShadow" }, outputs: { submit: "submit", close: "close" }, ngImport: i0, template: "<ng-container bbEditLimitCustomizable [bbHostRef]=\"this\"></ng-container>\n\n<ng-template bbEditLimitCustomizable let-hostRef>\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody>\n      <bb-alert-ui\n        *ngFor=\"let error of hostRef.errors\"\n        [title]=\"error.message\"\n        modifier=\"error\"\n        data-role=\"edit-limit-error-alert\"></bb-alert-ui>\n\n      <div id=\"zeroLimitInfo\">\n        <bb-alert-ui\n          *ngIf=\"hostRef.shouldZeroAlertBeShown()\"\n          title=\"'Zero limits' means no transaction can be performed\"\n          i18n-title=\"Info message about zero limit amount@@limits.edit.zero-limit-info.title\"\n          modifier=\"info\"\n          [dismissible]=\"true\"\n          (close)=\"hostRef.zeroLimitAlertDismissed = true\"\n          data-role=\"edit-limit-zero-info-alert\"></bb-alert-ui>\n      </div>\n      <div class=\"bb-block bb-block--md\"></div>\n      <div class=\"row bb-subheader bb-subheader--regular bb-text-semi-bold bb-block bb-block--md\">\n        <div class=\"bb-stack\" data-role=\"edit-limit-column-name-header\"\n             [ngClass]=\"hostRef.showRegularLimit && hostRef.showShadowLimit ? 'col-5' : 'col-8'\">\n          <span\n            class=\"bb-stack__item bb-stack__item--spacing-xs\"\n            i18n=\"Limits bound header title@@limits.edit.header.period\"\n          >Period</span\n          >\n          <bb-icon-ui\n            [bbTooltip]=\"limitsTitleTooltip\"\n            placement=\"bottom\"\n            triggers=\"hover\"\n            name=\"info\"\n            size=\"sm\"></bb-icon-ui>\n        </div>\n        <div\n          class=\"col\"\n          *ngIf=\"hostRef.showRegularLimit\"\n          i18n=\"Limits bound header title@@limits.edit.header.limits\"\n          data-role=\"edit-limit-column-regular-limit-header\">\n          Limit\n        </div>\n        <div\n          class=\"col\"\n          *ngIf=\"hostRef.showShadowLimit\"\n          i18n=\"Limits bound header title@@limits.edit.header.shadow-limits\"\n          data-role=\"edit-limit-column-shadow-limit-header\">\n          Shadow limit\n        </div>\n      </div>\n      <hr />\n\n      <div class=\"bb-list bb-list--density-sm bb-block bb-block--lg\">\n        <div\n          class=\"bb-list__item\"\n          *ngFor=\"let bound of hostRef.limitBoundList; let i = index\"\n          data-role=\"edit-limit-bound-item\">\n          <div class=\"d-flex bb-block bb-block--sm\"></div>\n          <div class=\"row align-items-center\">\n            <div\n              class=\"bb-subtitle bb-block bb-block--sm\"\n              [ngClass]=\"hostRef.showRegularLimit && hostRef.showShadowLimit ? 'col-5' : 'col-8'\"\n              i18n=\"Limits bound frequency name@@limits.edit.limits-bound.name\"\n              data-role=\"edit-limit-bound-item-name\">\n              { bound.period, select, transactional-limits-bound {Per transaction} daily {Daily} weekly {Weekly} monthly\n              {Monthly} quarterly {Quarterly} yearly {Yearly} other { {{ bound.period }} } }\n            </div>\n            <div\n              class=\"col\"\n              *ngIf=\"hostRef.showRegularLimit\"\n              [ngSwitch]=\"hostRef.disableRegular\"\n              data-role=\"edit-limit-bound-item-regular\">\n              <div class=\"bb-subtitle\" *ngSwitchCase=\"true\">\n                <bb-amount-ui\n                  *ngIf=\"hostRef.limitForm.get('regular').controls[i].value.amount; else noAmount\"\n                  [currency]=\"hostRef.currency\"\n                  [amount]=\"hostRef.limitForm.get('regular').controls[i].value.amount\"\n                  [mapCurrency]=\"true\"\n                  data-role=\"edit-limit-bound-item-regular-limit-disabled\"></bb-amount-ui>\n              </div>\n              <div *ngSwitchDefault>\n                <span\n                  [attr.id]=\"i + '-regular-limit-label'\"\n                  class=\"sr-only\"\n                  i18n=\"Regular limit currency input label@@limits.edit.limits-bound.currency-input.regular\"\n                  data-role=\"edit-limit-bound-item-regular-limit-aria-label\">\n                  { bound.period, select, transactional-limits-bound {Per transaction limit} daily {Daily limit} weekly\n                  {Weekly limit} monthly {Monthly limit} quarterly {Quarterly limit} yearly {Yearly limit} other {\n                  {{ bound.period }} limit } }\n                </span>\n                <bb-currency-input-ui\n                  [formControl]=\"hostRef.limitForm.get('regular').controls[i]\"\n                  placeholder=\"\"\n                  [integer]=\"true\"\n                  [allowNegativeValue]=\"false\"\n                  integerLabel=\" \"\n                  [integerLabelSrOnly]=\"true\"\n                  resultType=\"string\"\n                  [disabled]=\"hostRef.disableRegular\"\n                  [aria-labelledby]=\"i + '-regular-limit-label'\"\n                  [aria-describedby]=\"i + '-regular-limit-error'\"\n                  data-role=\"edit-limit-bound-item-regular-limit\"></bb-currency-input-ui>\n              </div>\n            </div>\n            <div\n              class=\"col\"\n              *ngIf=\"hostRef.showShadowLimit\"\n              [ngSwitch]=\"hostRef.disableShadow\"\n              data-role=\"edit-limit-bound-item-shadow\">\n              <div class=\"bb-subtitle\" *ngSwitchCase=\"true\">\n                <bb-amount-ui\n                  *ngIf=\"hostRef.limitForm.get('shadow').controls[i].value.amount; else noAmount\"\n                  [currency]=\"hostRef.currency\"\n                  [amount]=\"hostRef.limitForm.get('shadow').controls[i].value.amount\"\n                  [mapCurrency]=\"true\"\n                  data-role=\"edit-limit-bound-item-shadow-limit-disabled\"></bb-amount-ui>\n              </div>\n              <div *ngSwitchDefault>\n                <span\n                  [attr.id]=\"i + '-shadow-limit-label'\"\n                  class=\"sr-only\"\n                  i18n=\"Shadow limit currency input label@@limits.edit.limits-bound.currency-input.shadow\"\n                  data-role=\"edit-limit-bound-item-shadow-limit-aria-label\">\n                  { bound.period, select, transactional-limits-bound {Per transaction shadow limit} daily {Daily shadow\n                  limit} weekly {Weekly shadow limit} monthly {Monthly shadow limit} quarterly {Quarterly shadow limit}\n                  yearly {Yearly shadow limit} other { {{ bound.period }} shadow limit } }\n                </span>\n                <bb-currency-input-ui\n                  [formControl]=\"hostRef.limitForm.get('shadow').controls[i]\"\n                  placeholder=\"\"\n                  [integer]=\"true\"\n                  [allowNegativeValue]=\"false\"\n                  integerLabel=\" \"\n                  [integerLabelSrOnly]=\"true\"\n                  resultType=\"string\"\n                  [disabled]=\"hostRef.disableShadow\"\n                  [aria-labelledby]=\"i + '-shadow-limit-label'\"\n                  [aria-describedby]=\"i + '-shadow-limit-error'\"\n                  data-role=\"edit-limit-bound-item-shadow-limit\"></bb-currency-input-ui>\n              </div>\n            </div>\n          </div>\n          <div class=\"row\">\n            <div\n              class=\"bb-subtitle\"\n              [ngClass]=\"hostRef.showRegularLimit && hostRef.showShadowLimit ? 'col-5' : 'col-8'\"></div>\n            <div class=\"col\" *ngIf=\"hostRef.showRegularLimit\">\n              <div\n                class=\"bb-subheader bb-subheader--regular bb-text-support break-word\"\n                *ngIf=\"bound.regularConsumption\"\n                [hidden]=\"hostRef.limitForm.get('regular').controls[i].invalid\">\n                <bb-amount-ui\n                  [currency]=\"hostRef.currency\"\n                  [amount]=\"bound.regularConsumption\"\n                  [mapCurrency]=\"true\"\n                  data-role=\"edit-limit-bound-item-regular-consumed\"></bb-amount-ui>\n                <span i18n=\"Consumed amount for limit@@limits.edit.limits-bound.consumed\"> consumed</span>\n              </div>\n\n              <bb-input-validation-message-ui\n                [showErrors]=\"hostRef.limitForm.get('regular').controls[i].invalid\"\n                [messageId]=\"i + '-regular-limit-error'\">\n                <span\n                  *ngIf=\"hostRef.limitForm.get('regular').controls[i].invalid\"\n                  i18n=\"Validation error for regular limit@@limits.edit.limits-bound.regular.error.validation\"\n                  data-role=\"edit-limit-bound-item-regular-error-msg\">\n                  { hostRef.limitForm.get('regular').controls[i].errors.biggerThan, select, daily {Can't be higher than\n                  Daily limit} weekly {Can't be higher than Weekly limit} monthly {Can't be higher than Monthly limit}\n                  quarterly {Can't be higher than Quarterly limit} yearly {Can't be higher than Yearly limit} other {\n                  Can't be higher than {{ hostRef.limitForm.get('regular').controls[i].errors.biggerThan }} limit} }\n                </span>\n              </bb-input-validation-message-ui>\n            </div>\n            <div class=\"col\" *ngIf=\"hostRef.showShadowLimit\">\n              <div\n                class=\"bb-subheader bb-subheader--regular bb-text-support break-word\"\n                *ngIf=\"bound.shadowConsumption\"\n                [hidden]=\"hostRef.limitForm.get('shadow').controls[i].invalid\">\n                <bb-amount-ui\n                  [currency]=\"hostRef.currency\"\n                  [amount]=\"bound.shadowConsumption\"\n                  [mapCurrency]=\"true\"\n                  data-role=\"edit-limit-bound-item-shadow-consumed\"></bb-amount-ui>\n                <span i18n=\"Consumed amount for limit@@limits.edit.limits-bound.consumed\"> consumed</span>\n              </div>\n\n              <bb-input-validation-message-ui\n                [showErrors]=\"hostRef.limitForm.get('shadow').controls[i].invalid\"\n                [messageId]=\"i + '-shadow-limit-error'\">\n                <span\n                  *ngIf=\"hostRef.limitForm.get('shadow').controls[i].invalid\"\n                  i18n=\"Validation error for shadow limit@@limits.edit.limits-bound.shadow.error.validation\"\n                  data-role=\"edit-limit-bound-item-shadow-error-msg\">\n                  { hostRef.limitForm.get('shadow').controls[i].errors.biggerThan, select, daily {Can't be higher than\n                  Daily shadow limit} weekly {Can't be higher than Weekly shadow limit} monthly {Can't be higher than\n                  Monthly shadow limit} quarterly {Can't be higher than Quarterly shadow limit} yearly {Can't be higher\n                  than Yearly shadow limit} other { Can't be higher than\n                  {{ hostRef.limitForm.get('shadow').controls[i].errors.biggerThan }} shadow limit} }\n                </span>\n              </bb-input-validation-message-ui>\n            </div>\n          </div>\n        </div>\n      </div>\n    </ng-template>\n  </bb-modal-body-ui>\n  <bb-modal-footer-ui>\n    <ng-template bbCustomModalFooter>\n      <div class=\"bb-button-bar\">\n        <bb-load-button-ui\n          class=\"bb-button-bar__button\"\n          color=\"primary\"\n          [isLoading]=\"hostRef.showLoadingSubmitBtn\"\n          (bbKeyboardClick)=\"!hostRef.isDisabled && hostRef.submitForm()\"\n          [disabled]=\"hostRef.isDisabled\"\n          data-role=\"edit-limit-submit\">\n          <span i18n=\"Save button@@limits.edit.action-button.save\">Save</span>\n        </bb-load-button-ui>\n        <button\n          bbButton\n          color=\"link\"\n          class=\"bb-button-bar__button\"\n          (bbKeyboardClick)=\"hostRef.close.emit()\"\n          i18n=\"Cancel button@@limits.edit.action-button.cancel\"\n          data-role=\"edit-limit-cancel\">\n          Cancel\n        </button>\n      </div>\n    </ng-template>\n  </bb-modal-footer-ui>\n\n  <ng-template #noAmount>\n    <bb-icon-ui\n      data-role=\"edit-limit-bound-no-amount\"\n      class=\"bb-text-support\"\n      name=\"remove\"\n      color=\"support\"></bb-icon-ui>\n  </ng-template>\n\n  <ng-template #limitsTitleTooltip>\n    <span i18n=\"Limits modal header title tooltip @@limits.edit.period.tooltip\">\n      When setting limits, \u2018per transaction\u2019 should be your smallest value, with \u2018yearly\u2019 the largest.\n    </span>\n  </ng-template>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i2.ModalBodyComponent; }), selector: "bb-modal-body-ui" }, { type: i0.forwardRef(function () { return i3.AlertComponent; }), selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i0.forwardRef(function () { return i4.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0.forwardRef(function () { return i5.AmountComponent; }), selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: i0.forwardRef(function () { return i6.CurrencyInputComponent; }), selector: "bb-currency-input-ui", inputs: ["decMaxLen", "decMinLen", "placeholder", "resultType", "integer", "required", "readonly", "disabled", "integerLabelSrOnly", "decimalLabelSrOnly", "currencies", "isRightAligned", "integerId", "decimalId", "integerLabel", "decimalLabel", "currencyLabel", "allowNegativeValue", "currencyListAriaLabel", "currencyListWithOnItemAriaLabel", "aria-describedby", "aria-labelledby", "aria-invalid"], outputs: ["blur"] }, { type: i0.forwardRef(function () { return i7.InputValidationMessageComponent; }), selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i0.forwardRef(function () { return i2.ModalFooterComponent; }), selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }, { type: i0.forwardRef(function () { return i8.LoadButtonComponent; }), selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }], directives: [{ type: i0.forwardRef(function () { return EditLimitCustomizableDirective; }), selector: "[bbEditLimitCustomizable]" }, { type: i0.forwardRef(function () { return i2.CustomModalBodyDirective; }), selector: "ng-template[bbCustomModalBody]" }, { type: i0.forwardRef(function () { return i9.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i0.forwardRef(function () { return i9.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i9.NgClass; }), selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i0.forwardRef(function () { return i10.TooltipDirective; }), selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i0.forwardRef(function () { return i9.NgSwitch; }), selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i0.forwardRef(function () { return i9.NgSwitchCase; }), selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i0.forwardRef(function () { return i9.NgSwitchDefault; }), selector: "[ngSwitchDefault]" }, { type: i0.forwardRef(function () { return i1.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0.forwardRef(function () { return i1.FormControlDirective; }), selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i0.forwardRef(function () { return i2.CustomModalFooterDirective; }), selector: "ng-template[bbCustomModalFooter]" }, { type: i0.forwardRef(function () { return i11.KeyboardClickDirective; }), selector: "[bbKeyboardClick]", outputs: ["bbKeyboardClick"] }, { type: i0.forwardRef(function () { return i12.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditLimitComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-edit-limit',
                    templateUrl: 'edit-limit.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.FormBuilder }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { showRegularLimit: [{
                type: Input
            }], showShadowLimit: [{
                type: Input
            }], limitBounds: [{
                type: Input
            }], currency: [{
                type: Input
            }], showLoadingSubmitBtn: [{
                type: Input
            }], errors: [{
                type: Input
            }], disableRegular: [{
                type: Input
            }], disableShadow: [{
                type: Input
            }], submit: [{
                type: Output
            }], close: [{
                type: Output
            }] } });
export class EditLimitCustomizableDirective extends BbTemplate {
}
/** @nocollapse */ EditLimitCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditLimitCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ EditLimitCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: EditLimitCustomizableDirective, selector: "[bbEditLimitCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: EditLimitCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbEditLimitCustomizable]',
                }]
        }] });
//# sourceMappingURL=edit-limit.component.js.map