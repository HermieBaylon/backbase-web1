(function (global, factory) {
        typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('rxjs'), require('@angular/forms'), require('rxjs/operators'), require('@backbase/foundation-ang/core'), require('@backbase/ui-ang/notification'), require('@backbase/data-ang/limits'), require('@backbase/ui-ang/modal'), require('@backbase/data-ang/accesscontrol'), require('@backbase/ui-ang/header'), require('@backbase/ui-ang/icon'), require('@backbase/ui-ang/ellipsis'), require('@backbase/ui-ang/dropdown-single-select'), require('@backbase/ui-ang/loading-indicator'), require('@backbase/ui-ang/alert'), require('@backbase/ui-ang/amount'), require('@backbase/ui-ang/tooltip-directive'), require('@backbase/ui-ang/button'), require('@backbase/ui-ang/keyboard-click-directive'), require('@backbase/ui-ang/currency-input'), require('@backbase/ui-ang/input-validation-message'), require('@backbase/ui-ang/load-button'), require('@ng-bootstrap/ng-bootstrap'), require('@backbase/ui-ang/base-classes'), require('@backbase/data-ang/contact-manager'), require('@backbase/data-ang/arrangements'), require('@angular/localize/init')) :
        typeof define === 'function' && define.amd ? define('@backbase/accessgroup-common-ang', ['exports', '@angular/core', '@angular/common', 'rxjs', '@angular/forms', 'rxjs/operators', '@backbase/foundation-ang/core', '@backbase/ui-ang/notification', '@backbase/data-ang/limits', '@backbase/ui-ang/modal', '@backbase/data-ang/accesscontrol', '@backbase/ui-ang/header', '@backbase/ui-ang/icon', '@backbase/ui-ang/ellipsis', '@backbase/ui-ang/dropdown-single-select', '@backbase/ui-ang/loading-indicator', '@backbase/ui-ang/alert', '@backbase/ui-ang/amount', '@backbase/ui-ang/tooltip-directive', '@backbase/ui-ang/button', '@backbase/ui-ang/keyboard-click-directive', '@backbase/ui-ang/currency-input', '@backbase/ui-ang/input-validation-message', '@backbase/ui-ang/load-button', '@ng-bootstrap/ng-bootstrap', '@backbase/ui-ang/base-classes', '@backbase/data-ang/contact-manager', '@backbase/data-ang/arrangements', '@angular/localize/init'], factory) :
        (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["accessgroup-common-ang"] = {}), global.ng.core, global.ng.common, global.rxjs, global.ng.forms, global.rxjs.operators, global.core, global.i2, global.i1, global.i1$2, global.i3, global.i4, global.i3$1, global.i6, global.i7, global.i8, global.i2$2, global.i2$1, global.i6$1, global.i7$1, global.i8$1, global.i6$2, global.i7$2, global.i8$2, global.i2$3, global.baseClasses, global.i1$3, global.i2$4));
})(this, (function (exports, i0, i9, rxjs, i1$1, operators, core, i2, i1, i1$2, i3, i4, i3$1, i6, i7, i8, i2$2, i2$1, i6$1, i7$1, i8$1, i6$2, i7$2, i8$2, i2$3, baseClasses, i1$3, i2$4) { 'use strict';

        function _interopNamespace(e) {
                if (e && e.__esModule) return e;
                var n = Object.create(null);
                if (e) {
                        Object.keys(e).forEach(function (k) {
                                if (k !== 'default') {
                                        var d = Object.getOwnPropertyDescriptor(e, k);
                                        Object.defineProperty(n, k, d.get ? d : {
                                                enumerable: true,
                                                get: function () { return e[k]; }
                                        });
                                }
                        });
                }
                n["default"] = e;
                return Object.freeze(n);
        }

        var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
        var i9__namespace = /*#__PURE__*/_interopNamespace(i9);
        var i1__namespace$1 = /*#__PURE__*/_interopNamespace(i1$1);
        var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
        var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
        var i1__namespace$2 = /*#__PURE__*/_interopNamespace(i1$2);
        var i3__namespace = /*#__PURE__*/_interopNamespace(i3);
        var i4__namespace = /*#__PURE__*/_interopNamespace(i4);
        var i3__namespace$1 = /*#__PURE__*/_interopNamespace(i3$1);
        var i6__namespace = /*#__PURE__*/_interopNamespace(i6);
        var i7__namespace = /*#__PURE__*/_interopNamespace(i7);
        var i8__namespace = /*#__PURE__*/_interopNamespace(i8);
        var i2__namespace$2 = /*#__PURE__*/_interopNamespace(i2$2);
        var i2__namespace$1 = /*#__PURE__*/_interopNamespace(i2$1);
        var i6__namespace$1 = /*#__PURE__*/_interopNamespace(i6$1);
        var i7__namespace$1 = /*#__PURE__*/_interopNamespace(i7$1);
        var i8__namespace$1 = /*#__PURE__*/_interopNamespace(i8$1);
        var i6__namespace$2 = /*#__PURE__*/_interopNamespace(i6$2);
        var i7__namespace$2 = /*#__PURE__*/_interopNamespace(i7$2);
        var i8__namespace$2 = /*#__PURE__*/_interopNamespace(i8$2);
        var i2__namespace$3 = /*#__PURE__*/_interopNamespace(i2$3);
        var i1__namespace$3 = /*#__PURE__*/_interopNamespace(i1$3);
        var i2__namespace$4 = /*#__PURE__*/_interopNamespace(i2$4);

        var AccessgroupCommonModule = /** @class */ (function () {
            function AccessgroupCommonModule() {
            }
            return AccessgroupCommonModule;
        }());
        /** @nocollapse */ AccessgroupCommonModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccessgroupCommonModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
        /** @nocollapse */ AccessgroupCommonModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccessgroupCommonModule, imports: [i9.CommonModule] });
        /** @nocollapse */ AccessgroupCommonModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccessgroupCommonModule, imports: [[i9.CommonModule]] });
        i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccessgroupCommonModule, decorators: [{
                    type: i0.NgModule,
                    args: [{
                            imports: [i9.CommonModule],
                        }]
                }] });

        /*! *****************************************************************************
        Copyright (c) Microsoft Corporation.

        Permission to use, copy, modify, and/or distribute this software for any
        purpose with or without fee is hereby granted.

        THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
        REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
        AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
        INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
        LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
        OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
        PERFORMANCE OF THIS SOFTWARE.
        ***************************************************************************** */
        /* global Reflect, Promise */
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b)
                    if (Object.prototype.hasOwnProperty.call(b, p))
                        d[p] = b[p]; };
            return extendStatics(d, b);
        };
        function __extends(d, b) {
            if (typeof b !== "function" && b !== null)
                throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        }
        var __assign = function () {
            __assign = Object.assign || function __assign(t) {
                for (var s, i = 1, n = arguments.length; i < n; i++) {
                    s = arguments[i];
                    for (var p in s)
                        if (Object.prototype.hasOwnProperty.call(s, p))
                            t[p] = s[p];
                }
                return t;
            };
            return __assign.apply(this, arguments);
        };
        function __rest(s, e) {
            var t = {};
            for (var p in s)
                if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                    t[p] = s[p];
            if (s != null && typeof Object.getOwnPropertySymbols === "function")
                for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                        t[p[i]] = s[p[i]];
                }
            return t;
        }
        function __decorate(decorators, target, key, desc) {
            var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
            if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
                r = Reflect.decorate(decorators, target, key, desc);
            else
                for (var i = decorators.length - 1; i >= 0; i--)
                    if (d = decorators[i])
                        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
            return c > 3 && r && Object.defineProperty(target, key, r), r;
        }
        function __param(paramIndex, decorator) {
            return function (target, key) { decorator(target, key, paramIndex); };
        }
        function __metadata(metadataKey, metadataValue) {
            if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
                return Reflect.metadata(metadataKey, metadataValue);
        }
        function __awaiter(thisArg, _arguments, P, generator) {
            function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
            return new (P || (P = Promise))(function (resolve, reject) {
                function fulfilled(value) { try {
                    step(generator.next(value));
                }
                catch (e) {
                    reject(e);
                } }
                function rejected(value) { try {
                    step(generator["throw"](value));
                }
                catch (e) {
                    reject(e);
                } }
                function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
                step((generator = generator.apply(thisArg, _arguments || [])).next());
            });
        }
        function __generator(thisArg, body) {
            var _ = { label: 0, sent: function () { if (t[0] & 1)
                    throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
            return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
            function verb(n) { return function (v) { return step([n, v]); }; }
            function step(op) {
                if (f)
                    throw new TypeError("Generator is already executing.");
                while (_)
                    try {
                        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                            return t;
                        if (y = 0, t)
                            op = [op[0] & 2, t.value];
                        switch (op[0]) {
                            case 0:
                            case 1:
                                t = op;
                                break;
                            case 4:
                                _.label++;
                                return { value: op[1], done: false };
                            case 5:
                                _.label++;
                                y = op[1];
                                op = [0];
                                continue;
                            case 7:
                                op = _.ops.pop();
                                _.trys.pop();
                                continue;
                            default:
                                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                    _ = 0;
                                    continue;
                                }
                                if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                    _.label = op[1];
                                    break;
                                }
                                if (op[0] === 6 && _.label < t[1]) {
                                    _.label = t[1];
                                    t = op;
                                    break;
                                }
                                if (t && _.label < t[2]) {
                                    _.label = t[2];
                                    _.ops.push(op);
                                    break;
                                }
                                if (t[2])
                                    _.ops.pop();
                                _.trys.pop();
                                continue;
                        }
                        op = body.call(thisArg, _);
                    }
                    catch (e) {
                        op = [6, e];
                        y = 0;
                    }
                    finally {
                        f = t = 0;
                    }
                if (op[0] & 5)
                    throw op[1];
                return { value: op[0] ? op[1] : void 0, done: true };
            }
        }
        var __createBinding = Object.create ? (function (o, m, k, k2) {
            if (k2 === undefined)
                k2 = k;
            Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
        }) : (function (o, m, k, k2) {
            if (k2 === undefined)
                k2 = k;
            o[k2] = m[k];
        });
        function __exportStar(m, o) {
            for (var p in m)
                if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                    __createBinding(o, m, p);
        }
        function __values(o) {
            var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
            if (m)
                return m.call(o);
            if (o && typeof o.length === "number")
                return {
                    next: function () {
                        if (o && i >= o.length)
                            o = void 0;
                        return { value: o && o[i++], done: !o };
                    }
                };
            throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
        }
        function __read(o, n) {
            var m = typeof Symbol === "function" && o[Symbol.iterator];
            if (!m)
                return o;
            var i = m.call(o), r, ar = [], e;
            try {
                while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                    ar.push(r.value);
            }
            catch (error) {
                e = { error: error };
            }
            finally {
                try {
                    if (r && !r.done && (m = i["return"]))
                        m.call(i);
                }
                finally {
                    if (e)
                        throw e.error;
                }
            }
            return ar;
        }
        /** @deprecated */
        function __spread() {
            for (var ar = [], i = 0; i < arguments.length; i++)
                ar = ar.concat(__read(arguments[i]));
            return ar;
        }
        /** @deprecated */
        function __spreadArrays() {
            for (var s = 0, i = 0, il = arguments.length; i < il; i++)
                s += arguments[i].length;
            for (var r = Array(s), k = 0, i = 0; i < il; i++)
                for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                    r[k] = a[j];
            return r;
        }
        function __spreadArray(to, from, pack) {
            if (pack || arguments.length === 2)
                for (var i = 0, l = from.length, ar; i < l; i++) {
                    if (ar || !(i in from)) {
                        if (!ar)
                            ar = Array.prototype.slice.call(from, 0, i);
                        ar[i] = from[i];
                    }
                }
            return to.concat(ar || Array.prototype.slice.call(from));
        }
        function __await(v) {
            return this instanceof __await ? (this.v = v, this) : new __await(v);
        }
        function __asyncGenerator(thisArg, _arguments, generator) {
            if (!Symbol.asyncIterator)
                throw new TypeError("Symbol.asyncIterator is not defined.");
            var g = generator.apply(thisArg, _arguments || []), i, q = [];
            return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
            function verb(n) { if (g[n])
                i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
            function resume(n, v) { try {
                step(g[n](v));
            }
            catch (e) {
                settle(q[0][3], e);
            } }
            function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
            function fulfill(value) { resume("next", value); }
            function reject(value) { resume("throw", value); }
            function settle(f, v) { if (f(v), q.shift(), q.length)
                resume(q[0][0], q[0][1]); }
        }
        function __asyncDelegator(o) {
            var i, p;
            return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
            function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
        }
        function __asyncValues(o) {
            if (!Symbol.asyncIterator)
                throw new TypeError("Symbol.asyncIterator is not defined.");
            var m = o[Symbol.asyncIterator], i;
            return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
            function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
            function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
        }
        function __makeTemplateObject(cooked, raw) {
            if (Object.defineProperty) {
                Object.defineProperty(cooked, "raw", { value: raw });
            }
            else {
                cooked.raw = raw;
            }
            return cooked;
        }
        ;
        var __setModuleDefault = Object.create ? (function (o, v) {
            Object.defineProperty(o, "default", { enumerable: true, value: v });
        }) : function (o, v) {
            o["default"] = v;
        };
        function __importStar(mod) {
            if (mod && mod.__esModule)
                return mod;
            var result = {};
            if (mod != null)
                for (var k in mod)
                    if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                        __createBinding(result, mod, k);
            __setModuleDefault(result, mod);
            return result;
        }
        function __importDefault(mod) {
            return (mod && mod.__esModule) ? mod : { default: mod };
        }
        function __classPrivateFieldGet(receiver, state, kind, f) {
            if (kind === "a" && !f)
                throw new TypeError("Private accessor was defined without a getter");
            if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
                throw new TypeError("Cannot read private member from an object whose class did not declare it");
            return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
        }
        function __classPrivateFieldSet(receiver, state, value, kind, f) {
            if (kind === "m")
                throw new TypeError("Private method is not writable");
            if (kind === "a" && !f)
                throw new TypeError("Private accessor was defined without a setter");
            if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
                throw new TypeError("Cannot write private member to an object whose class did not declare it");
            return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
        }

        var defaultGetGroupForBusinessFunction = function (
        //@ts-ignore
        businessFunction, defaultGroup) { return defaultGroup; };
        var defaultOrderedBusinessFunctionGroups = [
            'accountsAndPayments',
            'beneficiaries',
            'actions',
            'messagesAndNotifications',
            'entitlements',
            'identityManagement',
            'supportAccess',
            'flow',
            'employee',
            'portfolio',
            'content',
            'engagements',
            'realTimeCommunication',
            'financeManagement',
            'communicationPreferences',
            'remoteConfig',
            'other',
        ];
        var defaultBusinessFunctionGroups = {
            accountsAndPayments: [
                'Product Summary',
                'Transactions',
                'Payments',
                'Arrangements',
                'Billpay',
                'Account Statements',
                'Batch',
                'Cash Flow',
                'Pockets',
                'External Accounts',
            ],
            beneficiaries: ['Contacts'],
            actions: ['Actions'],
            messagesAndNotifications: ['Message Center', 'Notifications', 'Actions'],
            entitlements: [
                'Legal Entity',
                'User',
                'Service Agreement',
                'Entitlements',
                'Limits',
                'Approvals',
                'Audit',
                'User Profiles',
                'Manage Authorized Users',
            ],
            identityManagement: ['Identities', 'Device'],
            supportAccess: ['Support Access'],
            flow: ['Flow'],
            employee: ['Employee'],
            portfolio: ['Portfolio'],
            content: ['Content'],
            engagements: ['Engagements'],
            realTimeCommunication: ['Real Time Communications'],
            financeManagement: ['Personal Finance Management'],
            communicationPreferences: ['Communication Preferences'],
            remoteConfig: ['Remote Config'],
            other: [],
        };

        var BusinessFunctionGroupService = /** @class */ (function () {
            function BusinessFunctionGroupService(customBusinessFunctionGroup, orderedBusinessFunctionGroups) {
                this.customBusinessFunctionGroup = customBusinessFunctionGroup;
                this.orderedBusinessFunctionGroups = orderedBusinessFunctionGroups;
            }
            BusinessFunctionGroupService.prototype.convertToGroups = function (allBusinessFunctions) {
                var _this = this;
                var businessFunctionsByGroup = allBusinessFunctions.reduce(function (memo, item) {
                    var _a;
                    var customGroupType = _this.getGroupForBusinessFunction(item);
                    return Object.assign(Object.assign({}, memo), (_a = {}, _a[customGroupType] = __spreadArray(__spreadArray([], __read((memo[customGroupType] || []))), [item]), _a));
                }, {});
                return Object.entries(businessFunctionsByGroup)
                    .map(function (_a) {
                    var _b = __read(_a, 2), groupKey = _b[0], businessFunctions = _b[1];
                    return ({
                        groupKey: groupKey,
                        businessFunctions: businessFunctions,
                    });
                })
                    .sort(function (a, b) { return _this.orderedBusinessFunctionGroups.indexOf(a.groupKey) -
                    _this.orderedBusinessFunctionGroups.indexOf(b.groupKey); });
            };
            BusinessFunctionGroupService.prototype.getGroupForBusinessFunction = function (item) {
                var defaultGroupType = defaultOrderedBusinessFunctionGroups.find(function (groupType) { return defaultBusinessFunctionGroups[groupType].includes(item.resource); }) || 'other';
                return this.customBusinessFunctionGroup(item, defaultGroupType);
            };
            BusinessFunctionGroupService.prototype.attachGroupKeyToBusinessFunction = function (businessFunctions) {
                var _this = this;
                return businessFunctions
                    .map(function (bf) { return (Object.assign(Object.assign({}, bf), { groupKey: _this.getGroupForBusinessFunction(bf) })); })
                    .sort(function (a, b) { return _this.orderedBusinessFunctionGroups.indexOf(a.groupKey) -
                    _this.orderedBusinessFunctionGroups.indexOf(b.groupKey); });
            };
            return BusinessFunctionGroupService;
        }());

        var AccessgroupCanDeactivateGuardService = /** @class */ (function () {
            function AccessgroupCanDeactivateGuardService() {
            }
            AccessgroupCanDeactivateGuardService.prototype.canDeactivate = function (component) {
                return component.openDiscardChangesModal();
            };
            return AccessgroupCanDeactivateGuardService;
        }());
        /** @nocollapse */ AccessgroupCanDeactivateGuardService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccessgroupCanDeactivateGuardService, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
        /** @nocollapse */ AccessgroupCanDeactivateGuardService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccessgroupCanDeactivateGuardService });
        i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccessgroupCanDeactivateGuardService, decorators: [{
                    type: i0.Injectable
                }] });

        var DiscardChangesBaseComponent = /** @class */ (function () {
            function DiscardChangesBaseComponent() {
                this.isDiscardChangesModalOpen = false;
                this.discardSubject = new rxjs.Subject();
            }
            DiscardChangesBaseComponent.prototype.resolveDiscardChanges = function (value) {
                this.isDiscardChangesModalOpen = false;
                this.discardSubject.next(value);
            };
            DiscardChangesBaseComponent.prototype.onWindowUnload = function ($event) {
                if (this.shouldPreventNavigation() && !this.isDiscardChangesModalOpen) {
                    $event.returnValue = true;
                }
            };
            DiscardChangesBaseComponent.prototype.openDiscardChangesModal = function () {
                if (this.shouldPreventNavigation()) {
                    this.isDiscardChangesModalOpen = true;
                    return this.discardSubject;
                }
                return rxjs.of(true);
            };
            return DiscardChangesBaseComponent;
        }());
        /** @nocollapse */ DiscardChangesBaseComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DiscardChangesBaseComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Directive });
        /** @nocollapse */ DiscardChangesBaseComponent.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: DiscardChangesBaseComponent, host: { listeners: { "window:beforeunload": "onWindowUnload($event)" } }, ngImport: i0__namespace });
        i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DiscardChangesBaseComponent, decorators: [{
                    type: i0.Directive
                }], propDecorators: { onWindowUnload: [{
                        type: i0.HostListener,
                        args: ['window:beforeunload', ['$event']]
                    }] } });

        var AMOUNT_DELIMETER_REG_EXP = /[,. ]/g;

        var PERIODIC_LIMITS_BOUNDS = 'periodic-limits-bounds';
        var TRANSACTIONAL_LIMITS_BOUNDS = 'transactional-limits-bound';
        var BOUNDTS_TYPE = {
            DAILY: 'daily',
            WEEKLY: 'weekly',
            MONTHLY: 'monthly',
            QUARTERLY: 'quarterly',
            YEARLY: 'yearly',
        };

        /**
         * Parse response from consumption API into separate regular/shadow limits and regular/shadow consumption
         */
        var getLimitsAndConsumptionItem = function (limitData) {
            var regularLimit, regularConsumptions, shadowLimit, shadowConsumptions;
            limitData.forEach(function (limit) {
                if (limit.limit && !limit.limit.shadow) {
                    regularLimit = limit.limit;
                    regularConsumptions = limit.consumptions;
                }
                else if (limit.limit && limit.limit.shadow) {
                    shadowLimit = limit.limit;
                    shadowConsumptions = limit.consumptions;
                }
            });
            return { regularLimit: regularLimit, regularConsumptions: regularConsumptions, shadowLimit: shadowLimit, shadowConsumptions: shadowConsumptions };
        };
        /**
         * Get transactional limit amount
         */
        var getTransactionalLimit = function (limitItem) {
            var limit = limitItem && limitItem[TRANSACTIONAL_LIMITS_BOUNDS];
            return { amount: limit && limit.amount };
        };
        /**
         * Get periodical limit amount
         */
        var getPeriodicalLimit = function (limitItem, key, isCustom) {
            var periodicLimits = limitItem && limitItem[PERIODIC_LIMITS_BOUNDS];
            var limitAmount;
            if (periodicLimits) {
                if (isCustom) {
                    var customLimit = periodicLimits.customPeriods && periodicLimits.customPeriods.find(function (item) { return item.period === key; });
                    limitAmount = customLimit && customLimit.amount;
                }
                else {
                    limitAmount = periodicLimits[key];
                }
            }
            return { amount: limitAmount };
        };
        /**
         * Get consumption amount by periodic key
         */
        var getConsumptionAmount = function (consumptions, key, isCustom) {
            var consumptionAmount;
            if (consumptions) {
                if (isCustom) {
                    var customLimit = consumptions.customPeriods && consumptions.customPeriods.find(function (item) { return item.period === key; });
                    consumptionAmount = customLimit && customLimit.amount;
                }
                else {
                    consumptionAmount = consumptions[key];
                }
            }
            return consumptionAmount;
        };
        /**
         * Get if limit included any shadow limit amount
         */
        var getIfLimitHasShadow = function (limits) {
            for (var i = 0; i < limits.length; i++) {
                if (limits[i].shadow && limits[i].shadow.amount) {
                    return true;
                }
            }
            return false;
        };
        /**
         * Get limit is unlimited
         */
        var getLimitUnlimited = function (limits) {
            for (var i = 0; i < limits.length; i++) {
                if ((limits[i].shadow && limits[i].shadow.amount) || (limits[i].regular && limits[i].regular.amount)) {
                    return false;
                }
            }
            return true;
        };
        /**
         * Map period keys into limit bound keys
         */
        var getLimitsPeriodsKey = function (key) {
            return BOUNDTS_TYPE[key] ? { key: BOUNDTS_TYPE[key], isCustom: false } : { key: key, isCustom: true };
        };
        /**
         * Get limit currency
         */
        var getLimitCurrency = function (limitData) {
            if (limitData && limitData.length) {
                var limitItem = limitData[0];
                return limitItem.limit && limitItem.limit.currency;
            }
            return undefined;
        };
        /**
         * Get regular/shadow limit ids
         */
        var getLimitsIds = function (limitData) {
            var regular, shadow;
            limitData.forEach(function (limit) {
                if (limit.limit && !limit.limit.shadow) {
                    regular = limit.limit.uuid;
                }
                else if (limit.limit && limit.limit.shadow) {
                    shadow = limit.limit.uuid;
                }
            });
            return { regular: regular, shadow: shadow };
        };
        /**
         * Mapper for converting periods list and limit data into object with array of LimitBound
         */
        var periodLimitsConsumptionMapper = function (periods, limitConsumptionsData) {
            var limitBounds = [];
            var _a = getLimitsAndConsumptionItem(limitConsumptionsData), regularLimit = _a.regularLimit, regularConsumptions = _a.regularConsumptions, shadowLimit = _a.shadowLimit, shadowConsumptions = _a.shadowConsumptions;
            limitBounds.push({
                period: TRANSACTIONAL_LIMITS_BOUNDS,
                custom: false,
                regular: getTransactionalLimit(regularLimit),
                shadow: getTransactionalLimit(shadowLimit),
            });
            periods.forEach(function (period) {
                var _a = getLimitsPeriodsKey(period.name), key = _a.key, isCustom = _a.isCustom;
                var regularLimitItem = getPeriodicalLimit(regularLimit, key, isCustom);
                var shadowLimitItem = getPeriodicalLimit(shadowLimit, key, isCustom);
                var regularConsumptionItem = getConsumptionAmount(regularConsumptions, key, isCustom);
                var shadowConsumptionItem = getConsumptionAmount(shadowConsumptions, key, isCustom);
                limitBounds.push({
                    period: key,
                    custom: isCustom,
                    regular: regularLimitItem,
                    shadow: shadowLimitItem,
                    regularConsumption: regularConsumptionItem,
                    shadowConsumption: shadowConsumptionItem,
                });
            });
            return {
                uuid: getLimitsIds(limitConsumptionsData),
                currency: getLimitCurrency(limitConsumptionsData),
                limitBounds: limitBounds,
            };
        };
        var lookUpObject = function (entity, id) {
            return {
                lookupKeys: [
                    {
                        eref: id,
                        etype: entity,
                    },
                ],
            };
        };
        var checkPermission = function (permission) {
            return (permission.regularLimit.edit ||
                permission.regularLimit.view ||
                permission.regularLimit.create ||
                permission.shadowLimit.edit ||
                permission.shadowLimit.view ||
                permission.shadowLimit.create);
        };
        var prepareLimitObj = function (groupedLimit, periods, groupedRetrivalLimit) {
            var limit;
            if (groupedLimit) {
                limit = Object.assign(Object.assign({}, periodLimitsConsumptionMapper(periods, groupedLimit)), { created: true });
                limit.isHasShadow = getIfLimitHasShadow(limit.limitBounds);
                limit.isUnlimited = getLimitUnlimited(limit.limitBounds);
            }
            else {
                limit = Object.assign(Object.assign({}, periodLimitsConsumptionMapper(periods, [])), { created: false });
            }
            if (groupedRetrivalLimit) {
                groupedRetrivalLimit.forEach(function (item) {
                    if (item.approvalId) {
                        limit.pending = true;
                    }
                });
            }
            return limit;
        };

        var LimitsService = /** @class */ (function () {
            function LimitsService(limitsService) {
                this.limitsService = limitsService;
                this.getLimitsPeriods$ = this.limitsService.getSupportedPeriods();
            }
            LimitsService.prototype.getLimitsConsumptionsRecord = function (currentLimitsConsumptionsRetrievalPostRequestBody) {
                return this.limitsService.postCurrentLimitsConsumptionsRetrieval({
                    currentLimitsConsumptionsRetrievalPostRequestBody: currentLimitsConsumptionsRetrievalPostRequestBody,
                });
            };
            LimitsService.prototype.getLimitsRetrievalRecord = function (limitsRetrievalPostRequestBody) {
                return this.limitsService.postLimitsRetrieval({
                    limitsRetrievalPostRequestBody: limitsRetrievalPostRequestBody,
                });
            };
            LimitsService.prototype.createNewLimit = function (createLimitRequestBody) {
                return this.limitsService.postLimits({
                    createLimitRequestBody: createLimitRequestBody,
                });
            };
            LimitsService.prototype.updateLimit = function (uuid, updateLimitRequestBody) {
                return this.limitsService.putLimitByUuid({
                    uuid: uuid,
                    updateLimitRequestBody: updateLimitRequestBody,
                });
            };
            /**
             * Return grouped object by type of response
             * @param data: any - object for grouping
             * @param groupByEref: string - type of gentry point
             * @param dataType: string - type of grouped data
             */
            LimitsService.prototype.groupedFunc = function (data, groupByEref, dataType) {
                var _this = this;
                switch (dataType) {
                    case 'consumption':
                        return data.reduce(function (h, obj) {
                            var _a;
                            return Object.assign(h, (_a = {},
                                _a[_this.getUniqueKeyConsumption(groupByEref, obj)] = (h[_this.getUniqueKeyConsumption(groupByEref, obj)] || []).concat(obj),
                                _a));
                        }, {});
                    case 'lookUp':
                        return data.reduce(function (h, obj) {
                            var _a;
                            return Object.assign(h, (_a = {},
                                _a[_this.getUniqueKeyLookUpKey(groupByEref, obj)] = (h[_this.getUniqueKeyLookUpKey(groupByEref, obj)] || []).concat(obj),
                                _a));
                        }, {});
                    default:
                        return data.reduce(function (h, obj) {
                            var _a;
                            return Object.assign(h, (_a = {},
                                _a[_this.getUniqueKeyRetrival(groupByEref, obj)] = (h[_this.getUniqueKeyRetrival(groupByEref, obj)] || []).concat(obj),
                                _a));
                        }, {});
                }
            };
            /**
             * Return unique key for grouping consumption limit response
             * @param type: string - type of entry point
             * @param obj: any - response object for consumption limit
             */
            LimitsService.prototype.getUniqueKeyConsumption = function (type, obj) {
                switch (type) {
                    case 'user':
                        return obj.limit['user-BBID'];
                    case 'perm':
                        var unitPermKey = '';
                        if (obj.limit.entities) {
                            for (var i = 0; i < obj.limit.entities.length; i++) {
                                if (obj.limit.entities[i].etype === 'PRV' || obj.limit.entities[i].etype === 'FUN') {
                                    unitPermKey = unitPermKey + obj.limit.entities[i].eref;
                                }
                            }
                        }
                        return unitPermKey;
                    case 'func':
                        var unitFuncKey = '';
                        if (obj.limit.entities) {
                            for (var i = 0; i < obj.limit.entities.length; i++) {
                                if (obj.limit.entities[i].etype === 'PRV' ||
                                    obj.limit.entities[i].etype === 'FUN' ||
                                    obj.limit.entities[i].etype === 'FAG') {
                                    unitFuncKey = unitFuncKey + obj.limit.entities[i].eref;
                                }
                            }
                        }
                        return unitFuncKey;
                    default:
                        return obj.limit.entities[0].eref;
                }
            };
            /**
             * Return unique key for grouping lookUp key from request
             * @param type: string - type of entry point
             * @param obj: any - lookUp key from request
             */
            LimitsService.prototype.getUniqueKeyLookUpKey = function (type, obj) {
                switch (type) {
                    case 'user':
                        return obj['user-BBID'];
                    case 'perm':
                        var unitPermKey = '';
                        for (var i = 0; i < obj.lookupKeys.length; i++) {
                            if (obj.lookupKeys[i].etype === 'PRV' || obj.lookupKeys[i].etype === 'FUN') {
                                unitPermKey = unitPermKey + obj.lookupKeys[i].eref;
                            }
                        }
                        return unitPermKey;
                    case 'func':
                        var unitFuncKey = '';
                        for (var i = 0; i < obj.lookupKeys.length; i++) {
                            if (obj.lookupKeys[i].etype === 'PRV' ||
                                obj.lookupKeys[i].etype === 'FUN' ||
                                obj.lookupKeys[i].etype === 'FAG') {
                                unitFuncKey = unitFuncKey + obj.lookupKeys[i].eref;
                            }
                        }
                        return unitFuncKey;
                    default:
                        return obj.lookupKeys[0].eref;
                }
            };
            /**
             * Return unique key for grouping retrival limit response
             * @param type: string - type of entry point
             * @param obj: any - response object for retrival limit
             */
            LimitsService.prototype.getUniqueKeyRetrival = function (type, obj) {
                switch (type) {
                    case 'user':
                        return obj['user-BBID'];
                    case 'perm':
                        var unitPermKey = '';
                        for (var i = 0; i < obj.entities.length; i++) {
                            if (obj.entities[i].etype === 'PRV' || obj.entities[i].etype === 'FUN') {
                                unitPermKey = unitPermKey + obj.entities[i].eref;
                            }
                        }
                        return unitPermKey;
                    case 'func':
                        var unitFuncKey = '';
                        for (var i = 0; i < obj.entities.length; i++) {
                            if (obj.entities[i].etype === 'PRV' || obj.entities[i].etype === 'FUN' || obj.entities[i].etype === 'FAG') {
                                unitFuncKey = unitFuncKey + obj.entities[i].eref;
                            }
                        }
                        return unitFuncKey;
                    default:
                        return obj.entities[0].eref;
                }
            };
            /**
             * Return stream of limitsData
             * @param limitsRetrievalOptions
             * @param groupByEref
             * @param itemsPerRequest - number of items per request (by default 100)
             */
            LimitsService.prototype.getLimitsData = function (limitsRetrievalOptions, groupByEref, itemsPerRequest) {
                var _this = this;
                if (groupByEref === void 0) { groupByEref = ''; }
                if (itemsPerRequest === void 0) { itemsPerRequest = 100; }
                if (limitsRetrievalOptions.length > itemsPerRequest) {
                    var limitsRetrievalOptionsArray = this.chunk(limitsRetrievalOptions, itemsPerRequest || 0);
                    return rxjs.forkJoin(limitsRetrievalOptionsArray.map(function (limitsRetrievalOption) { return _this._getLimitsData(limitsRetrievalOption, groupByEref); })).pipe(operators.map(function (limitsDataChunks) {
                        var limitsData = {};
                        limitsDataChunks.map(function (limitsDataChunk) { return Object.assign(limitsData, limitsDataChunk); });
                        return limitsData;
                    }));
                }
                return this._getLimitsData(limitsRetrievalOptions, groupByEref);
            };
            LimitsService.prototype._getLimitsData = function (limitsRetrievalOptions, groupByEref) {
                var _this = this;
                if (groupByEref === void 0) { groupByEref = ''; }
                return rxjs.combineLatest([
                    this.getLimitsPeriods$,
                    this.getLimitsRetrievalRecord({ limitsRetrievalOptions: limitsRetrievalOptions }),
                    this.getLimitsConsumptionsRecord({ limitsRetrievalOptions: limitsRetrievalOptions }),
                ]).pipe(operators.map(function (_a) {
                    var _b = __read(_a, 3), periods = _b[0], limitRetrievalsData = _b[1], limitConsumptionsData = _b[2];
                    var limitData = {};
                    var groupedLimit = _this.groupedFunc(limitConsumptionsData, groupByEref, 'consumption');
                    var groupedRetrivalLimit = _this.groupedFunc(limitRetrievalsData, groupByEref, '');
                    var groupedLookUpKey = _this.groupedFunc(limitsRetrievalOptions, groupByEref, 'lookUp');
                    for (var key in groupedLookUpKey) {
                        if (groupedLookUpKey.hasOwnProperty(key)) {
                            limitData[key] = prepareLimitObj(groupedLimit[key], periods, groupedRetrivalLimit[key]);
                        }
                    }
                    return limitData;
                }));
            };
            /**
             * Util function to divide array into array of arrays of given size
             * @param arr - original array
             * @param len - small arrays length
             */
            LimitsService.prototype.chunk = function (arr, len) {
                var chunks = [];
                var n = arr.length;
                var i = 0;
                while (i < n) {
                    chunks.push(arr.slice(i, (i += len)));
                }
                return chunks;
            };
            return LimitsService;
        }());
        /** @nocollapse */ LimitsService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: LimitsService, deps: [{ token: i1__namespace.LimitsHttpService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
        /** @nocollapse */ LimitsService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: LimitsService });
        i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: LimitsService, decorators: [{
                    type: i0.Injectable
                }], ctorParameters: function () { return [{ type: i1__namespace.LimitsHttpService }]; } });

        var LimitTypes;
        (function (LimitTypes) {
            LimitTypes["LE_BF_PRIVILEGE"] = "LE_BF_PRV";
            LimitTypes["LE_USER"] = "LE_USER";
            LimitTypes["USER_JR_BF_PRIVILEGE"] = "USER_JR_BF_PRV";
            LimitTypes["SA"] = "SA";
            LimitTypes["SA_USER"] = "SA_USER";
            LimitTypes["SA_LE"] = "SA_LE";
            LimitTypes["SA_JR_BF_PRIVILEGE"] = "SA_JR_BF_PRV";
        })(LimitTypes || (LimitTypes = {}));

        var CurrencyService = /** @class */ (function () {
            function CurrencyService(limitService) {
                this.limitService = limitService;
            }
            CurrencyService.prototype.currencyInfo = function () {
                return this.limitService.getCurrency().pipe(operators.map(function (res) {
                    return res ? res['currency-registry'] : {};
                }));
            };
            return CurrencyService;
        }());
        /** @nocollapse */ CurrencyService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CurrencyService, deps: [{ token: i1__namespace.LimitsHttpService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
        /** @nocollapse */ CurrencyService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CurrencyService });
        i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CurrencyService, decorators: [{
                    type: i0.Injectable
                }], ctorParameters: function () { return [{ type: i1__namespace.LimitsHttpService }]; } });

        var ManageLimitsModalHeaderComponent = /** @class */ (function () {
            function ManageLimitsModalHeaderComponent(currencyListService, notificationService, serviceAgreementHttpService, legalEntitiesService) {
                var _this = this;
                this.currencyListService = currencyListService;
                this.notificationService = notificationService;
                this.serviceAgreementHttpService = serviceAgreementHttpService;
                this.legalEntitiesService = legalEntitiesService;
                /**
                 * Currency drop down form control
                 */
                this.currencyControl = new i1$1.FormControl();
                /**
                 * Close modal window event.
                 * Propagate event when modal window should be closed.
                 */
                // eslint-disable-next-line @angular-eslint/no-output-native
                this.close = new i0.EventEmitter();
                /**
                 * Limit types enumeration
                 */
                this.LimitTypes = LimitTypes;
                /**
                 * Limit types stream
                 */
                this.limitType$$ = rxjs.of(true);
                /**
                 * Service agreement name stream
                 */
                this.saName$$ = rxjs.of(undefined);
                /**
                 * Legal entity name stream
                 */
                this.leName$$ = rxjs.of(undefined);
                /**
                 * Show notification stream
                 */
                this.showNotification$ = new rxjs.Subject();
                /**
                 * Unsubscribe stream
                 */
                this.destroy$ = new rxjs.Subject();
                /**
                 * Currency Info stream
                 */
                this.currencyInfo$ = this.currencyListService
                    .currencyInfo()
                    .pipe(operators.map(function (currencyInfo) {
                    if (!_this.currency) {
                        // show error message if no default currency
                        if (currencyInfo && currencyInfo.defaultCurrency) {
                            _this.currencyControl.setValue(currencyInfo.defaultCurrency);
                        }
                        else {
                            _this.closeModal();
                        }
                    }
                    return currencyInfo;
                }), 
                // show error message if currency is not set already
                operators.catchError(function () {
                    if (!_this.currency) {
                        _this.closeModal();
                    }
                    return rxjs.of(false);
                }));
            }
            ManageLimitsModalHeaderComponent.prototype.ngOnInit = function () {
                var _this = this;
                this.saName$$ = this.serviceAgreementId ? this.serviceAgreementHttpService
                    .getServiceAgreementItem({ serviceAgreementId: this.serviceAgreementId })
                    .pipe(operators.map(function (sa) { return sa.name; }), operators.catchError(function () { return rxjs.of(undefined); })) : rxjs.of(this.subTitleSAName);
                this.leName$$ = this.legalEntityId ? this.legalEntitiesService
                    .getLegalEntityById({ legalEntityId: this.legalEntityId })
                    .pipe(operators.map(function (le) { return le.name; }), operators.catchError(function () { return rxjs.of(undefined); })) : rxjs.of(this.subTitleLEName);
                this.limitType$$ = rxjs.combineLatest([this.saName$$, this.leName$$])
                    .pipe(operators.map(function (_a) {
                    var _b = __read(_a, 2), saName = _b[0], leName = _b[1];
                    if (leName && !saName && !_this.subTitleUserName && !_this.subTitleJRName) {
                        return LimitTypes.LE_BF_PRIVILEGE;
                    }
                    else if (leName && _this.subTitleUserName && !saName && !_this.subTitleJRName) {
                        return LimitTypes.LE_USER;
                    }
                    else if (_this.subTitleUserName && _this.subTitleJRName && !leName && !saName) {
                        return LimitTypes.USER_JR_BF_PRIVILEGE;
                    }
                    else if (saName && !leName && !_this.subTitleUserName && !_this.subTitleJRName) {
                        return LimitTypes.SA;
                    }
                    else if (saName && _this.subTitleUserName && !_this.subTitleJRName && !leName) {
                        return LimitTypes.SA_USER;
                    }
                    else if (saName && leName && !_this.subTitleJRName && !_this.subTitleUserName) {
                        return LimitTypes.SA_LE;
                    }
                    else if (saName && _this.subTitleJRName && !leName && !_this.subTitleUserName) {
                        return LimitTypes.SA_JR_BF_PRIVILEGE;
                    }
                    else {
                        return true;
                    }
                }));
                this.showNotification$.pipe(operators.takeUntil(this.destroy$)).subscribe(function () {
                    _this.notificationService.showNotification({
                        modifier: 'error',
                        header: _this.currencyErrorNotificationHeader,
                        message: _this.currencyErrorNotificationMessage,
                        dismissible: true,
                        ttl: _this.notificationDismissTime,
                    });
                });
            };
            /**
             * Show error notification and close modal
             */
            ManageLimitsModalHeaderComponent.prototype.closeModal = function () {
                this.showNotification$.next();
                this.close.emit();
            };
            ManageLimitsModalHeaderComponent.prototype.ngOnDestroy = function () {
                this.destroy$.next();
            };
            return ManageLimitsModalHeaderComponent;
        }());
        /** @nocollapse */ ManageLimitsModalHeaderComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManageLimitsModalHeaderComponent, deps: [{ token: CurrencyService }, { token: i2__namespace.NotificationService }, { token: i3__namespace.ServiceAgreementHttpService }, { token: i3__namespace.LegalEntitiesHttpService }], target: i0__namespace.ɵɵFactoryTarget.Component });
        /** @nocollapse */ ManageLimitsModalHeaderComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ManageLimitsModalHeaderComponent, selector: "bb-manage-limits-modal-header", inputs: { currency: "currency", currencyControl: "currencyControl", defaultTitle: "defaultTitle", title: "title", serviceAgreementId: "serviceAgreementId", legalEntityId: "legalEntityId", subTitleUserName: "subTitleUserName", subTitleJRName: "subTitleJRName", subTitleLEName: "subTitleLEName", subTitleSAName: "subTitleSAName", notificationDismissTime: "notificationDismissTime" }, outputs: { close: "close" }, viewQueries: [{ propertyName: "currencyErrorNotificationHeader", first: true, predicate: ["currencyErrorNotificationHeader"], descendants: true, read: i0.TemplateRef, static: true }, { propertyName: "currencyErrorNotificationMessage", first: true, predicate: ["currencyErrorNotificationMessage"], descendants: true, read: i0.TemplateRef, static: true }], ngImport: i0__namespace, template: "<ng-container\n  bbManageLimitsModalHeaderCustomizable\n  [bbHostRef]=\"this\"\n  [bbTemplateContext]=\"{\n    currencyInfo: currencyInfo$ | async,\n    saName: saName$$ | async,\n    leName: leName$$ | async,\n    limitType: limitType$$ | async\n  }\"></ng-container>\n\n<ng-template\n  bbManageLimitsModalHeaderCustomizable\n  let-hostRef\n  let-currencyInfo=\"context.currencyInfo\"\n  let-saName=\"context.saName\"\n  let-leName=\"context.leName\"\n  let-limitType=\"context.limitType\">\n  <div *ngIf=\"(hostRef.currency || currencyInfo) && limitType; else loading\">\n    <div class=\"bb-block bb-block--lg\">\n      <bb-header-ui\n        headingType=\"h2\"\n        [heading]=\"hostRef.title || hostRef.defaultTitle\"\n        data-role=\"manage-limits-header-title\"></bb-header-ui>\n    </div>\n\n    <div class=\"bb-stack\" data-role=\"manage-limits-header-subtitle\">\n      <ng-container class=\"bb-list__item\" [ngSwitch]=\"limitType\">\n        <!-- LE + BF + PRIVILEGE -->\n        <div *ngSwitchCase=\"LimitTypes.LE_BF_PRIVILEGE\"\n             [class.col-6] = \"leName.length > 20\"\n             class=\"bb-limit-header-card bb-stack__item bb-stack__item--spacing-xs\"\n             data-role=\"le-name-card\">\n          <div class=\"bb-stack\">\n            <bb-icon-ui class=\"bb-stack__item bb-stack__item--spacing-xs\" name=\"domain\" size=\"sm\"></bb-icon-ui>\n            <bb-ellipsis-ui\n              data-role=\"le-name-title\"\n              class=\"bb-subtitle\"\n              [lineClamp]=\"1\"\n              text=\"{{ leName }}\"\n            ></bb-ellipsis-ui>\n          </div>\n        </div>\n        <!-- LE + USER -->\n        <ng-container *ngSwitchCase=\"LimitTypes.LE_USER\">\n          <div class=\"bb-limit-header-card bb-stack__item bb-stack__item--spacing-xs\" data-role=\"le-name-card\"\n               [class.col-4] = \"leName.length > 20\">\n            <div class=\"bb-stack\">\n              <bb-icon-ui class=\"bb-stack__item bb-stack__item--spacing-xs\" name=\"domain\" size=\"sm\"></bb-icon-ui>\n              <bb-ellipsis-ui\n                data-role=\"le-name-title\"\n                class=\"bb-subtitle\"\n                [lineClamp]=\"1\"\n                text=\"{{ leName }}\"\n              ></bb-ellipsis-ui>\n            </div>\n          </div>\n          <bb-icon-ui color=\"muted\" name=\"navigate-next\" size=\"sm\" class=\"bb-stack__item bb-stack__item--spacing-xs\"></bb-icon-ui>\n          <div class=\"bb-limit-header-card bb-stack__item bb-stack__item--spacing-xs\" data-role=\"user-name-card\"\n               [class.col-4] = \"hostRef.subTitleUserName.length > 20\">\n            <div class=\"bb-stack\">\n              <bb-icon-ui class=\"bb-stack__item bb-stack__item--spacing-xs\" name=\"user\" size=\"sm\"></bb-icon-ui>\n              <bb-ellipsis-ui\n                data-role=\"user-name-title\"\n                class=\"bb-subtitle\"\n                [lineClamp]=\"1\"\n                text=\"{{ hostRef.subTitleUserName }}\"\n              ></bb-ellipsis-ui>\n            </div>\n          </div>\n        </ng-container>\n        <!-- USER + JR + BF + PRIVILEGE -->\n        <ng-container *ngSwitchCase=\"LimitTypes.USER_JR_BF_PRIVILEGE\">\n          <div class=\"bb-limit-header-card bb-stack__item bb-stack__item--spacing-xs\" data-role=\"user-name-card\"\n               [class.col-4] = \"hostRef.subTitleUserName.length > 20\">\n            <div class=\"bb-stack\">\n              <bb-icon-ui class=\"bb-stack__item bb-stack__item--spacing-xs\" name=\"user\" size=\"sm\"></bb-icon-ui>\n              <bb-ellipsis-ui\n                data-role=\"user-name-title\"\n                class=\"bb-subtitle\"\n                [lineClamp]=\"1\"\n                text=\"{{ hostRef.subTitleUserName }}\"\n              ></bb-ellipsis-ui>\n            </div>\n          </div>\n          <bb-icon-ui color=\"muted\" name=\"navigate-next\" size=\"sm\" class=\"bb-stack__item bb-stack__item--spacing-xs\"></bb-icon-ui>\n          <div class=\"bb-limit-header-card bb-stack__item bb-stack__item--spacing-xs\" data-role=\"jr-name-card\"\n               [class.col-4] = \"hostRef.subTitleJRName.length > 20\">\n            <div class=\"bb-stack\">\n              <bb-icon-ui class=\"bb-stack__item bb-stack__item--spacing-xs\" name=\"assignment-ind\" size=\"sm\"></bb-icon-ui>\n              <bb-ellipsis-ui\n                data-role=\"jr-name-title\"\n                class=\"bb-subtitle\"\n                [lineClamp]=\"1\"\n                text=\"{{ hostRef.subTitleJRName }}\"\n              ></bb-ellipsis-ui>\n            </div>\n          </div>\n        </ng-container>\n        <!-- SA -->\n        <div *ngSwitchCase=\"LimitTypes.SA\"\n             class=\"bb-limit-header-card bb-stack__item bb-stack__item--spacing-xs\"\n             [class.col-6] = \"saName.length > 20\"\n             data-role=\"sa-name-card\">\n          <div class=\"bb-stack\">\n            <bb-icon-ui class=\"bb-stack__item bb-stack__item--spacing-xs\" name=\"dns\" size=\"sm\"></bb-icon-ui>\n            <bb-ellipsis-ui\n              data-role=\"sa-name-title\"\n              class=\"bb-subtitle\"\n              [lineClamp]=\"1\"\n              text=\"{{ saName }}\"\n            ></bb-ellipsis-ui>\n          </div>\n        </div>\n        <!-- SA + USER -->\n        <ng-container *ngSwitchCase=\"LimitTypes.SA_USER\">\n          <div class=\"bb-limit-header-card bb-stack__item bb-stack__item--spacing-xs\" data-role=\"sa-name-card\"\n               [class.col-4] = \"saName.length > 20\">\n            <div class=\"bb-stack\">\n              <bb-icon-ui class=\"bb-stack__item bb-stack__item--spacing-xs\" name=\"dns\" size=\"sm\"></bb-icon-ui>\n              <bb-ellipsis-ui\n                data-role=\"sa-name-title\"\n                class=\"bb-subtitle\"\n                [lineClamp]=\"1\"\n                text=\"{{ saName }}\"\n              ></bb-ellipsis-ui>\n            </div>\n          </div>\n          <bb-icon-ui color=\"muted\" name=\"navigate-next\" size=\"sm\" class=\"bb-stack__item bb-stack__item--spacing-xs\"></bb-icon-ui>\n          <div class=\"bb-limit-header-card bb-stack__item bb-stack__item--spacing-xs\" data-role=\"user-name-card\"\n               [class.col-4] = \"hostRef.subTitleUserName.length > 20\">\n            <div class=\"bb-stack\">\n              <bb-icon-ui class=\"bb-stack__item bb-stack__item--spacing-xs\" name=\"user\" size=\"sm\"></bb-icon-ui>\n              <bb-ellipsis-ui\n                data-role=\"user-name-title\"\n                class=\"bb-subtitle\"\n                [lineClamp]=\"1\"\n                text=\"{{ hostRef.subTitleUserName }}\"\n              ></bb-ellipsis-ui>\n            </div>\n          </div>\n        </ng-container>\n        <!-- SA + LE -->\n        <ng-container *ngSwitchCase=\"LimitTypes.SA_LE\">\n          <div class=\"bb-limit-header-card bb-stack__item bb-stack__item--spacing-xs\" data-role=\"sa-name-card\"\n               [class.col-4] = \"saName.length > 20\">\n            <div class=\"bb-stack\">\n              <bb-icon-ui class=\"bb-stack__item bb-stack__item--spacing-xs\" name=\"dns\" size=\"sm\"></bb-icon-ui>\n              <bb-ellipsis-ui\n                data-role=\"sa-name-title\"\n                class=\"bb-subtitle\"\n                [lineClamp]=\"1\"\n                text=\"{{ saName }}\"\n              ></bb-ellipsis-ui>\n            </div>\n          </div>\n          <bb-icon-ui color=\"muted\" name=\"navigate-next\" size=\"sm\" class=\"bb-stack__item bb-stack__item--spacing-xs\"></bb-icon-ui>\n          <div class=\"bb-limit-header-card bb-stack__item bb-stack__item--spacing-xs\" data-role=\"le-name-card\"\n               [class.col-4] = \"leName.length > 20\">\n            <div class=\"bb-stack\">\n              <bb-icon-ui class=\"bb-stack__item bb-stack__item--spacing-xs\" name=\"domain\" size=\"sm\"></bb-icon-ui>\n              <bb-ellipsis-ui\n                data-role=\"le-name-title\"\n                class=\"bb-subtitle\"\n                [lineClamp]=\"1\"\n                text=\"{{ leName }}\"\n              ></bb-ellipsis-ui>\n            </div>\n          </div>\n        </ng-container>\n        <!-- SA + JR + BF + PRIVILEGE -->\n        <ng-container *ngSwitchCase=\"LimitTypes.SA_JR_BF_PRIVILEGE\">\n          <div class=\"bb-limit-header-card bb-stack__item bb-stack__item--spacing-xs\" data-role=\"sa-name-card\"\n               [class.col-4] = \"saName.length > 20\">\n            <div class=\"bb-stack\">\n              <bb-icon-ui class=\"bb-stack__item bb-stack__item--spacing-xs\" name=\"dns\" size=\"sm\"></bb-icon-ui>\n              <bb-ellipsis-ui\n                data-role=\"sa-name-title\"\n                class=\"bb-subtitle\"\n                [lineClamp]=\"1\"\n                text=\"{{ saName }}\"\n              ></bb-ellipsis-ui>\n            </div>\n          </div>\n          <bb-icon-ui color=\"muted\" name=\"navigate-next\" size=\"sm\" class=\"bb-stack__item bb-stack__item--spacing-xs\"></bb-icon-ui>\n          <div class=\"bb-limit-header-card bb-stack__item bb-stack__item--spacing-xs\" data-role=\"jr-name-card\"\n               [class.col-4] = \"hostRef.subTitleJRName.length > 20\">\n            <div class=\"bb-stack\">\n              <bb-icon-ui class=\"bb-stack__item bb-stack__item--spacing-xs\" name=\"assignment-ind\" size=\"sm\"></bb-icon-ui>\n              <bb-ellipsis-ui\n                data-role=\"jr-name-title\"\n                class=\"bb-subtitle\"\n                [lineClamp]=\"1\"\n                text=\"{{ hostRef.subTitleJRName }}\"\n              ></bb-ellipsis-ui>\n            </div>\n          </div>\n        </ng-container>\n      </ng-container>\n\n      <div class=\"bb-stack__item bb-stack__item--push-right\">\n          <bb-dropdown-single-select-ui\n            *ngIf=\"!hostRef.currency\"\n            aria-label=\"Currency\"\n            i18n-aria-label=\"Currency dropdown label@@manage-limits-modal.header.dropdown.label\"\n            data-role=\"manage-limits-header-currency-dropdown\"\n            [formControl]=\"hostRef.currencyControl\"\n            [options]=\"currencyInfo?.allowedCurrencyList\"\n            iconName=\"caret-down\"></bb-dropdown-single-select-ui>\n\n        <div\n          class=\"bb-stack bb-stack--density-sm\"\n          data-role=\"manage-limits-header-currency-container\"\n          *ngIf=\"hostRef.currency\">\n          <span\n            class=\"bb-stack__item\"\n            i18n=\"Currency dropdown label@@manage-limits-modal.header.currency-dropdown.label\"\n            >Currency:</span\n          >\n          <span class=\"bb-stack__item bb-text-bold\" data-role=\"manage-limits-header-currency\">{{ hostRef.currency }}</span>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <ng-template #loading>\n    <div class=\"bb-state-container bb-block bb-block--lg\" data-role=\"manage-limits-header-loading-state\">\n      <bb-loading-indicator-ui\n        loaderSize=\"md\"\n        text=\"Loading...\"\n        i18n-text=\"Loading text@@manage-limits-modal.loading.text\"></bb-loading-indicator-ui>\n    </div>\n  </ng-template>\n</ng-template>\n\n<ng-template #currencyErrorNotificationHeader>\n  <h5 i18n=\"Error notification header message@@manage-limits-modal.header.notification.error-header\">Unknown Error</h5>\n</ng-template>\n\n<ng-template #currencyErrorNotificationMessage>\n  <p i18n=\"Error notification message@@manage-limits-modal.header.notification.error-message\">\n    Try to reload the page or contact the system administrator.\n  </p>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return i4__namespace.HeaderComponent; }), selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i0__namespace.forwardRef(function () { return i3__namespace$1.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0__namespace.forwardRef(function () { return i6__namespace.EllipsisComponent; }), selector: "bb-ellipsis-ui", inputs: ["text", "tooltipTriggers", "lineClamp"] }, { type: i0__namespace.forwardRef(function () { return i7__namespace.DropdownSingleSelectComponent; }), selector: "bb-dropdown-single-select-ui", inputs: ["placeholder", "defaultOptionAsPlaceholder", "options", "displayAttributePath", "iconName", "compareWithFn"] }, { type: i0__namespace.forwardRef(function () { return i8__namespace.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }], directives: [{ type: i0__namespace.forwardRef(function () { return ManageLimitsModalHeaderCustomizableDirective; }), selector: "[bbManageLimitsModalHeaderCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i9__namespace.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0__namespace.forwardRef(function () { return i9__namespace.NgSwitch; }), selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i0__namespace.forwardRef(function () { return i9__namespace.NgSwitchCase; }), selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace$1.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0__namespace.forwardRef(function () { return i1__namespace$1.FormControlDirective; }), selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }], pipes: { "async": i0__namespace.forwardRef(function () { return i9__namespace.AsyncPipe; }) } });
        i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManageLimitsModalHeaderComponent, decorators: [{
                    type: i0.Component,
                    args: [{
                            selector: 'bb-manage-limits-modal-header',
                            templateUrl: 'manage-limits-modal-header.component.html',
                        }]
                }], ctorParameters: function () { return [{ type: CurrencyService }, { type: i2__namespace.NotificationService }, { type: i3__namespace.ServiceAgreementHttpService }, { type: i3__namespace.LegalEntitiesHttpService }]; }, propDecorators: { currency: [{
                        type: i0.Input
                    }], currencyControl: [{
                        type: i0.Input
                    }], defaultTitle: [{
                        type: i0.Input
                    }], title: [{
                        type: i0.Input
                    }], serviceAgreementId: [{
                        type: i0.Input
                    }], legalEntityId: [{
                        type: i0.Input
                    }], subTitleUserName: [{
                        type: i0.Input
                    }], subTitleJRName: [{
                        type: i0.Input
                    }], subTitleLEName: [{
                        type: i0.Input
                    }], subTitleSAName: [{
                        type: i0.Input
                    }], notificationDismissTime: [{
                        type: i0.Input
                    }], close: [{
                        type: i0.Output
                    }], currencyErrorNotificationHeader: [{
                        type: i0.ViewChild,
                        args: ['currencyErrorNotificationHeader', { read: i0.TemplateRef, static: true }]
                    }], currencyErrorNotificationMessage: [{
                        type: i0.ViewChild,
                        args: ['currencyErrorNotificationMessage', { read: i0.TemplateRef, static: true }]
                    }] } });
        var ManageLimitsModalHeaderCustomizableDirective = /** @class */ (function (_super) {
            __extends(ManageLimitsModalHeaderCustomizableDirective, _super);
            function ManageLimitsModalHeaderCustomizableDirective() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ManageLimitsModalHeaderCustomizableDirective;
        }(core.BbTemplate));
        /** @nocollapse */ ManageLimitsModalHeaderCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManageLimitsModalHeaderCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
        /** @nocollapse */ ManageLimitsModalHeaderCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ManageLimitsModalHeaderCustomizableDirective, selector: "[bbManageLimitsModalHeaderCustomizable]", usesInheritance: true, ngImport: i0__namespace });
        i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManageLimitsModalHeaderCustomizableDirective, decorators: [{
                    type: i0.Directive,
                    args: [{
                            selector: '[bbManageLimitsModalHeaderCustomizable]',
                        }]
                }] });

        var LimitBoundItemComponent = /** @class */ (function () {
            function LimitBoundItemComponent() {
                /**
                 * Flag for show/hide regular limit row.
                 */
                this.showShadowLimit = false;
                /**
                 * Flag for show/hide shadow limit column.
                 */
                this.showRegularLimit = false;
            }
            return LimitBoundItemComponent;
        }());
        /** @nocollapse */ LimitBoundItemComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: LimitBoundItemComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
        /** @nocollapse */ LimitBoundItemComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: LimitBoundItemComponent, selector: "bb-limit-bound-item", inputs: { limitBound: "limitBound", currency: "currency", showShadowLimit: "showShadowLimit", showRegularLimit: "showRegularLimit" }, ngImport: i0__namespace, template: "<ng-container bbLimitBoundItemCustomizable [bbHostRef]=\"this\"></ng-container>\n\n<ng-template bbLimitBoundItemCustomizable let-hostRef>\n  <div class=\"row\">\n    <div class=\"col-5\" [ngClass]=\"{ 'col-8': !hostRef.showRegularLimit || !hostRef.showShadowLimit }\">\n      <span i18n=\"Limits bound title@@limits.limitsBound.title\" data-role=\"limit-bound-title\" class=\"bb-subtitle\">\n        { hostRef.limitBound.period, select, transactional-limits-bound {Per transaction} daily {Daily} weekly {Weekly}\n        monthly {Monthly} quarterly {Quarterly} yearly {Yearly} other {{{hostRef.limitBound.period}}} }\n      </span>\n    </div>\n\n    <div class=\"col overflow-auto\" *ngIf=\"hostRef.showRegularLimit\" data-role=\"limit-bound-regular-limit-col\">\n      <bb-ellipsis-ui>\n        <span class=\"bb-subtitle\">\n          <bb-amount-ui\n            *ngIf=\"hostRef.limitBound.regular.amount; else noAmount\"\n            [currency]=\"hostRef.currency\"\n            [amount]=\"hostRef.limitBound.regular.amount\"\n            [mapCurrency]=\"true\"\n            data-role=\"limit-bound-regular-limit\"></bb-amount-ui>\n        </span>\n      </bb-ellipsis-ui>\n\n      <div\n        class=\"bb-subheader bb-subheader--regular bb-text-support break-word\"\n        *ngIf=\"hostRef.limitBound.regularConsumption\"\n        i18n=\"Consumed amount for regular limit@@limits.consumed.regular\">\n        <bb-amount-ui\n          [currency]=\"hostRef.currency\"\n          [amount]=\"hostRef.limitBound.regularConsumption\"\n          [mapCurrency]=\"true\"\n          data-role=\"limit-bound-consumption-regular\"></bb-amount-ui>\n        consumed\n      </div>\n    </div>\n    <div class=\"col overflow-auto\" *ngIf=\"hostRef.showShadowLimit\" data-role=\"limit-bound-shadow-limit-col\">\n      <bb-ellipsis-ui>\n        <span class=\"bb-subtitle\">\n          <bb-amount-ui\n            *ngIf=\"hostRef.limitBound.shadow.amount; else noAmount\"\n            [currency]=\"hostRef.currency\"\n            [amount]=\"hostRef.limitBound.shadow.amount\"\n            [mapCurrency]=\"true\"\n            data-role=\"limit-bound-shadow-limit\"></bb-amount-ui>\n        </span>\n      </bb-ellipsis-ui>\n\n      <div\n        class=\"bb-subheader bb-subheader--regular bb-text-support break-word\"\n        *ngIf=\"hostRef.limitBound.shadowConsumption\"\n        i18n=\"Consumed amount for shadow limit@@limits.consumed.shadow\">\n        <bb-amount-ui\n          [currency]=\"hostRef.currency\"\n          [amount]=\"hostRef.limitBound.shadowConsumption\"\n          [mapCurrency]=\"true\"\n          data-role=\"limit-bound-consumption-shadow\"></bb-amount-ui>\n        consumed\n      </div>\n    </div>\n  </div>\n\n  <hr />\n\n  <ng-template #noAmount>\n    <bb-icon-ui data-role=\"limit-bound-no-item\" class=\"bb-text-support\" name=\"remove\" color=\"support\"></bb-icon-ui>\n  </ng-template>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return i6__namespace.EllipsisComponent; }), selector: "bb-ellipsis-ui", inputs: ["text", "tooltipTriggers", "lineClamp"] }, { type: i0__namespace.forwardRef(function () { return i2__namespace$1.AmountComponent; }), selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: i0__namespace.forwardRef(function () { return i3__namespace$1.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i0__namespace.forwardRef(function () { return LimitBoundItemCustomizableDirective; }), selector: "[bbLimitBoundItemCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i9__namespace.NgClass; }), selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i0__namespace.forwardRef(function () { return i9__namespace.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
        i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: LimitBoundItemComponent, decorators: [{
                    type: i0.Component,
                    args: [{
                            selector: 'bb-limit-bound-item',
                            templateUrl: 'limit-bound-item.component.html',
                        }]
                }], propDecorators: { limitBound: [{
                        type: i0.Input
                    }], currency: [{
                        type: i0.Input
                    }], showShadowLimit: [{
                        type: i0.Input
                    }], showRegularLimit: [{
                        type: i0.Input
                    }] } });
        var LimitBoundItemCustomizableDirective = /** @class */ (function (_super) {
            __extends(LimitBoundItemCustomizableDirective, _super);
            function LimitBoundItemCustomizableDirective() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return LimitBoundItemCustomizableDirective;
        }(core.BbTemplate));
        /** @nocollapse */ LimitBoundItemCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: LimitBoundItemCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
        /** @nocollapse */ LimitBoundItemCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: LimitBoundItemCustomizableDirective, selector: "[bbLimitBoundItemCustomizable]", usesInheritance: true, ngImport: i0__namespace });
        i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: LimitBoundItemCustomizableDirective, decorators: [{
                    type: i0.Directive,
                    args: [{
                            selector: '[bbLimitBoundItemCustomizable]',
                        }]
                }] });

        var ManageLimitsModalViewBodyComponent = /** @class */ (function () {
            function ManageLimitsModalViewBodyComponent() {
                /**
                 * Close modal window event.
                 * Propagate event when modal window should be closed.
                 */
                this.cancel = new i0.EventEmitter();
                /**
                 * Flag for show/hide regular limit column.
                 */
                this.showRegularLimit = false;
                /**
                 * Flag for show/hide shadow limit column.
                 */
                this.showShadowLimit = false;
                /**
                 * Flag for show pending state alert.
                 */
                this.pending = false;
            }
            /**
             * Emits cancel: EventEmitter event.
             */
            ManageLimitsModalViewBodyComponent.prototype.close = function () {
                this.cancel.emit();
            };
            return ManageLimitsModalViewBodyComponent;
        }());
        /** @nocollapse */ ManageLimitsModalViewBodyComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManageLimitsModalViewBodyComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
        /** @nocollapse */ ManageLimitsModalViewBodyComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ManageLimitsModalViewBodyComponent, selector: "bb-manage-limits-modal-view-body", inputs: { showRegularLimit: "showRegularLimit", showShadowLimit: "showShadowLimit", pending: "pending", currency: "currency", limitBounds: "limitBounds" }, outputs: { cancel: "cancel" }, ngImport: i0__namespace, template: "<ng-container bbManageLimitsModalViewBodyCustomizable [bbHostRef]=\"this\"></ng-container>\n\n<ng-template bbManageLimitsModalViewBodyCustomizable let-hostRef>\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody>\n      <bb-alert-ui\n        *ngIf=\"hostRef.pending\"\n        title=\"This limit has pending approval and cannot be modified\"\n        modifier=\"warning\"\n        data-role=\"limit-pending-alert\"\n        i18n-title=\"This limit has pending approval and cannot be modified@@limit.pending.alert.text\">\n      </bb-alert-ui>\n      <div class=\"row bb-block bb-block--md\">\n        <div class=\"bb-stack col-5\" [ngClass]=\"{ 'col-8': !hostRef.showRegularLimit || !hostRef.showShadowLimit }\">\n          <span\n            class=\"bb-subheader bb-subheader--regular bb-text-semi-bold bb-stack__item bb-stack__item--spacing-xs\"\n            i18n=\"Limits bound title@@limits.view.header.period.text\"\n            data-role=\"limit-view-header-period\"\n            >Period</span\n          >\n          <bb-icon-ui\n            [bbTooltip]=\"limitsTitleTooltip\"\n            placement=\"bottom\"\n            triggers=\"hover\"\n            name=\"info\"\n            size=\"sm\"></bb-icon-ui>\n        </div>\n\n        <div class=\"col\" *ngIf=\"hostRef.showRegularLimit\" data-role=\"limit-view-header-limits\">\n          <span\n            class=\"bb-subheader bb-subheader--regular bb-text-semi-bold\"\n            i18n=\"Limits bound title@@limits.view.header.limits.text\">\n            Limit\n          </span>\n        </div>\n\n        <div class=\"col\" *ngIf=\"hostRef.showShadowLimit\" data-role=\"limit-view-header-shadow-limits\">\n          <span\n            class=\"bb-subheader bb-subheader--regular bb-text-semi-bold\"\n            i18n=\"Limits bound title@@limits.view.header.shadow-limits.text\">\n            Shadow limit\n          </span>\n        </div>\n      </div>\n      <hr />\n\n      <ng-container *ngFor=\"let bound of hostRef.limitBounds\">\n        <bb-limit-bound-item\n          [limitBound]=\"bound\"\n          [currency]=\"hostRef.currency\"\n          [showShadowLimit]=\"hostRef.showShadowLimit\"\n          [showRegularLimit]=\"hostRef.showRegularLimit\"\n          data-role=\"limit-limits-bound\"></bb-limit-bound-item>\n      </ng-container>\n    </ng-template>\n  </bb-modal-body-ui>\n  <bb-modal-footer-ui>\n    <ng-template bbCustomModalFooter>\n      <div class=\"bb-button-bar\">\n        <button\n          bbButton\n          class=\"bb-button-bar__button\"\n          color=\"primary\"\n          i18n=\"Limits bound title@@limits.view.cancel.button.text\"\n          (bbKeyboardClick)=\"hostRef.close()\"\n          data-role=\"limit-view-cancel-button\">\n          Cancel\n        </button>\n      </div>\n    </ng-template>\n  </bb-modal-footer-ui>\n\n  <ng-template #limitsTitleTooltip>\n    <span i18n=\"Limits modal header title tooltip @@limits.view.period.tooltip\">\n      When setting limits, \u2018per transaction\u2019 should be your smallest value, with \u2018yearly\u2019 the largest.\n    </span>\n  </ng-template>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return i1__namespace$2.ModalBodyComponent; }), selector: "bb-modal-body-ui" }, { type: i0__namespace.forwardRef(function () { return i2__namespace$2.AlertComponent; }), selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i0__namespace.forwardRef(function () { return i3__namespace$1.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0__namespace.forwardRef(function () { return LimitBoundItemComponent; }), selector: "bb-limit-bound-item", inputs: ["limitBound", "currency", "showShadowLimit", "showRegularLimit"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace$2.ModalFooterComponent; }), selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }], directives: [{ type: i0__namespace.forwardRef(function () { return ManageLimitsModalViewBodyCustomizableDirective; }), selector: "[bbManageLimitsModalViewBodyCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i1__namespace$2.CustomModalBodyDirective; }), selector: "ng-template[bbCustomModalBody]" }, { type: i0__namespace.forwardRef(function () { return i9__namespace.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0__namespace.forwardRef(function () { return i9__namespace.NgClass; }), selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i0__namespace.forwardRef(function () { return i6__namespace$1.TooltipDirective; }), selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i0__namespace.forwardRef(function () { return i9__namespace.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace$2.CustomModalFooterDirective; }), selector: "ng-template[bbCustomModalFooter]" }, { type: i0__namespace.forwardRef(function () { return i7__namespace$1.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0__namespace.forwardRef(function () { return i8__namespace$1.KeyboardClickDirective; }), selector: "[bbKeyboardClick]", outputs: ["bbKeyboardClick"] }] });
        i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManageLimitsModalViewBodyComponent, decorators: [{
                    type: i0.Component,
                    args: [{
                            selector: 'bb-manage-limits-modal-view-body',
                            templateUrl: 'manage-limits-modal-view-body.component.html',
                        }]
                }], propDecorators: { cancel: [{
                        type: i0.Output
                    }], showRegularLimit: [{
                        type: i0.Input
                    }], showShadowLimit: [{
                        type: i0.Input
                    }], pending: [{
                        type: i0.Input
                    }], currency: [{
                        type: i0.Input
                    }], limitBounds: [{
                        type: i0.Input
                    }] } });
        var ManageLimitsModalViewBodyCustomizableDirective = /** @class */ (function (_super) {
            __extends(ManageLimitsModalViewBodyCustomizableDirective, _super);
            function ManageLimitsModalViewBodyCustomizableDirective() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ManageLimitsModalViewBodyCustomizableDirective;
        }(core.BbTemplate));
        /** @nocollapse */ ManageLimitsModalViewBodyCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManageLimitsModalViewBodyCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
        /** @nocollapse */ ManageLimitsModalViewBodyCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ManageLimitsModalViewBodyCustomizableDirective, selector: "[bbManageLimitsModalViewBodyCustomizable]", usesInheritance: true, ngImport: i0__namespace });
        i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManageLimitsModalViewBodyCustomizableDirective, decorators: [{
                    type: i0.Directive,
                    args: [{
                            selector: '[bbManageLimitsModalViewBodyCustomizable]',
                        }]
                }] });

        var EditLimitComponent = /** @class */ (function () {
            function EditLimitComponent(fb, hostEl, _ref) {
                this.fb = fb;
                this.hostEl = hostEl;
                this._ref = _ref;
                /**
                 * Flag for show/hide regular limit column.
                 */
                this.showRegularLimit = false;
                /**
                 * Flag for show/hide shadow limit column.
                 */
                this.showShadowLimit = false;
                /**
                 * Propagate event when submit button was clicked.
                 */
                // eslint-disable-next-line @angular-eslint/no-output-native
                this.submit = new i0.EventEmitter();
                /**
                 * Close modal window event.
                 * Propagate event when modal window should be closed.
                 */
                // eslint-disable-next-line @angular-eslint/no-output-native
                this.close = new i0.EventEmitter();
                /**
                 * Reactive form for edit limits
                 */
                this.limitForm = this.fb.group({});
                /**
                 * Bound list with full information
                 */
                this.limitBoundList = [];
                /**
                 * Flag which show when regular limits was edited
                 */
                this.isRegularChanged = false;
                /**
                 * Flag which show when shadow limits was edited
                 */
                this.isShadowChanged = false;
                /**
                 * Flag which show when form has zero value
                 */
                this.showZeroLimitAlert = false;
                /**
                 * Flag which show when user dismiss Zero info block.
                 */
                this.zeroLimitAlertDismissed = false;
                this.destroy$ = new rxjs.Subject();
            }
            Object.defineProperty(EditLimitComponent.prototype, "limitBounds", {
                /**
                 * Limits bounds data.
                 */
                set: function (limitBounds) {
                    var regular = this.fb.array([]);
                    var shadow = this.fb.array([]);
                    limitBounds.forEach(function (limitBound) {
                        var _a, _b;
                        // this transformation need to resolve HAD-1594 issue
                        //
                        // Need to cover both types
                        // because API describe number amount, but server return string
                        var regularAmount = (_a = limitBound.regular.amount) !== null && _a !== void 0 ? _a : '';
                        var shadowAmount = (_b = limitBound.shadow.amount) !== null && _b !== void 0 ? _b : '';
                        if (typeof regularAmount === 'string') {
                            regularAmount = regularAmount.split('.')[0];
                        }
                        else {
                            regularAmount = Math.trunc(regularAmount);
                        }
                        if (typeof shadowAmount === 'string') {
                            shadowAmount = shadowAmount.split('.')[0];
                        }
                        else {
                            shadowAmount = Math.trunc(shadowAmount);
                        }
                        regular.push(new i1$1.FormControl({
                            amount: regularAmount,
                            currency: ' ',
                        }, {
                            updateOn: 'change',
                        }));
                        shadow.push(new i1$1.FormControl({
                            amount: shadowAmount,
                            currency: ' ',
                        }, {
                            updateOn: 'change',
                        }));
                    });
                    this.limitForm.addControl('regular', regular);
                    this.limitForm.addControl('shadow', shadow);
                    this.limitBoundList = limitBounds;
                    this.onChanges();
                },
                enumerable: false,
                configurable: true
            });
            Object.defineProperty(EditLimitComponent.prototype, "isDisabled", {
                /**
                 * Disabled submit button getter
                 */
                get: function () {
                    return Boolean(this.showLoadingSubmitBtn || this.limitForm.invalid || !(this.isRegularChanged || this.isShadowChanged));
                },
                enumerable: false,
                configurable: true
            });
            /**
             * Submit limit form
             */
            EditLimitComponent.prototype.submitForm = function () {
                if (!this.validateForm()) {
                    this.submit.emit({
                        isRegularChanged: this.isRegularChanged,
                        isShadowChanged: this.isShadowChanged,
                        limitValue: this.limitForm.value,
                    });
                }
            };
            /**
             * Track when form is changed
             */
            EditLimitComponent.prototype.onChanges = function () {
                var _this = this;
                this.limitForm.get('regular').valueChanges.pipe(operators.take(1), operators.takeUntil(this.destroy$)).subscribe(function () {
                    _this.isRegularChanged = true;
                });
                this.limitForm.get('shadow').valueChanges.pipe(operators.take(1), operators.takeUntil(this.destroy$)).subscribe(function () {
                    _this.isShadowChanged = true;
                });
                // FE form validation
                // made in component, because custom validator/asyncValidator doesn't work properly
                this.limitForm.valueChanges.pipe(operators.debounceTime(500), operators.takeUntil(this.destroy$)).subscribe(function () { return _this.validateForm(); });
            };
            /**
             * Function for form validation
             */
            EditLimitComponent.prototype.validateForm = function () {
                var formGroupValue = this.limitForm.value;
                var hasRegularError = false;
                var hasShadowError = false;
                if (formGroupValue) {
                    this.limitForm.setErrors(null);
                    if (this.showRegularLimit && !this.disableRegular) {
                        var controlsRegular = this.limitForm.get('regular').controls;
                        hasRegularError = this.checkBounds(formGroupValue.regular, controlsRegular);
                    }
                    if (this.showShadowLimit && !this.disableShadow) {
                        var controlsShadow = this.limitForm.get('shadow').controls;
                        hasShadowError = this.checkBounds(formGroupValue.shadow, controlsShadow);
                    }
                    // TODO check if validation working without it after updating to Angular 9
                    this._ref.markForCheck();
                }
                return hasRegularError || hasShadowError;
            };
            /**
             * Function for validation one type of the limit
             * @param boundList
             * @param controls
             */
            EditLimitComponent.prototype.checkBounds = function (boundList, controls) {
                var _a, _b;
                // clear all previous errors
                controls.forEach(function (item) {
                    item.setErrors(null);
                });
                for (var i = 0; i < boundList.length; i++) {
                    for (var j = i + 1; j < boundList.length; j++) {
                        var firstAmount = ((_a = boundList[i]) === null || _a === void 0 ? void 0 : _a.amount) && parseInt(boundList[i].amount.toString().replace(AMOUNT_DELIMETER_REG_EXP, ''), 10);
                        var secondAmount = ((_b = boundList[j]) === null || _b === void 0 ? void 0 : _b.amount) && parseInt(boundList[j].amount.toString().replace(AMOUNT_DELIMETER_REG_EXP, ''), 10);
                        if (firstAmount && secondAmount && firstAmount > secondAmount) {
                            controls[i].setErrors({ biggerThan: this.limitBoundList[j].period });
                            return true;
                        }
                    }
                }
                return false;
            };
            /**
             * Track when control has zero amount and Zero info message should be shown
             */
            EditLimitComponent.prototype.shouldZeroAlertBeShown = function () {
                if (this.zeroLimitAlertDismissed) {
                    return false;
                }
                if (this.showZeroLimitAlert) {
                    return true;
                }
                var value = this.limitForm.value;
                var isZero = value.regular.find(function (item) { return (item === null || item === void 0 ? void 0 : item.amount) === '0'; }) || value.shadow.find(function (item) { return (item === null || item === void 0 ? void 0 : item.amount) === '0'; });
                if (isZero) {
                    this.showZeroLimitAlert = Boolean(isZero);
                    this.scrollToZeroInfo();
                }
                return isZero;
            };
            /**
             * Scroll to zero limit info block
             */
            EditLimitComponent.prototype.scrollToZeroInfo = function () {
                var zeroInfoElement = this.hostEl.nativeElement.querySelector('#zeroLimitInfo');
                if (zeroInfoElement) {
                    setTimeout(function () {
                        zeroInfoElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
                    });
                }
            };
            EditLimitComponent.prototype.ngOnDestroy = function () {
                this.destroy$.next();
            };
            return EditLimitComponent;
        }());
        /** @nocollapse */ EditLimitComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: EditLimitComponent, deps: [{ token: i1__namespace$1.FormBuilder }, { token: i0__namespace.ElementRef }, { token: i0__namespace.ChangeDetectorRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
        /** @nocollapse */ EditLimitComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: EditLimitComponent, selector: "bb-edit-limit", inputs: { showRegularLimit: "showRegularLimit", showShadowLimit: "showShadowLimit", limitBounds: "limitBounds", currency: "currency", showLoadingSubmitBtn: "showLoadingSubmitBtn", errors: "errors", disableRegular: "disableRegular", disableShadow: "disableShadow" }, outputs: { submit: "submit", close: "close" }, ngImport: i0__namespace, template: "<ng-container bbEditLimitCustomizable [bbHostRef]=\"this\"></ng-container>\n\n<ng-template bbEditLimitCustomizable let-hostRef>\n  <bb-modal-body-ui>\n    <ng-template bbCustomModalBody>\n      <bb-alert-ui\n        *ngFor=\"let error of hostRef.errors\"\n        [title]=\"error.message\"\n        modifier=\"error\"\n        data-role=\"edit-limit-error-alert\"></bb-alert-ui>\n\n      <div id=\"zeroLimitInfo\">\n        <bb-alert-ui\n          *ngIf=\"hostRef.shouldZeroAlertBeShown()\"\n          title=\"'Zero limits' means no transaction can be performed\"\n          i18n-title=\"Info message about zero limit amount@@limits.edit.zero-limit-info.title\"\n          modifier=\"info\"\n          [dismissible]=\"true\"\n          (close)=\"hostRef.zeroLimitAlertDismissed = true\"\n          data-role=\"edit-limit-zero-info-alert\"></bb-alert-ui>\n      </div>\n      <div class=\"bb-block bb-block--md\"></div>\n      <div class=\"row bb-subheader bb-subheader--regular bb-text-semi-bold bb-block bb-block--md\">\n        <div class=\"bb-stack\" data-role=\"edit-limit-column-name-header\"\n             [ngClass]=\"hostRef.showRegularLimit && hostRef.showShadowLimit ? 'col-5' : 'col-8'\">\n          <span\n            class=\"bb-stack__item bb-stack__item--spacing-xs\"\n            i18n=\"Limits bound header title@@limits.edit.header.period\"\n          >Period</span\n          >\n          <bb-icon-ui\n            [bbTooltip]=\"limitsTitleTooltip\"\n            placement=\"bottom\"\n            triggers=\"hover\"\n            name=\"info\"\n            size=\"sm\"></bb-icon-ui>\n        </div>\n        <div\n          class=\"col\"\n          *ngIf=\"hostRef.showRegularLimit\"\n          i18n=\"Limits bound header title@@limits.edit.header.limits\"\n          data-role=\"edit-limit-column-regular-limit-header\">\n          Limit\n        </div>\n        <div\n          class=\"col\"\n          *ngIf=\"hostRef.showShadowLimit\"\n          i18n=\"Limits bound header title@@limits.edit.header.shadow-limits\"\n          data-role=\"edit-limit-column-shadow-limit-header\">\n          Shadow limit\n        </div>\n      </div>\n      <hr />\n\n      <div class=\"bb-list bb-list--density-sm bb-block bb-block--lg\">\n        <div\n          class=\"bb-list__item\"\n          *ngFor=\"let bound of hostRef.limitBoundList; let i = index\"\n          data-role=\"edit-limit-bound-item\">\n          <div class=\"d-flex bb-block bb-block--sm\"></div>\n          <div class=\"row align-items-center\">\n            <div\n              class=\"bb-subtitle bb-block bb-block--sm\"\n              [ngClass]=\"hostRef.showRegularLimit && hostRef.showShadowLimit ? 'col-5' : 'col-8'\"\n              i18n=\"Limits bound frequency name@@limits.edit.limits-bound.name\"\n              data-role=\"edit-limit-bound-item-name\">\n              { bound.period, select, transactional-limits-bound {Per transaction} daily {Daily} weekly {Weekly} monthly\n              {Monthly} quarterly {Quarterly} yearly {Yearly} other { {{ bound.period }} } }\n            </div>\n            <div\n              class=\"col\"\n              *ngIf=\"hostRef.showRegularLimit\"\n              [ngSwitch]=\"hostRef.disableRegular\"\n              data-role=\"edit-limit-bound-item-regular\">\n              <div class=\"bb-subtitle\" *ngSwitchCase=\"true\">\n                <bb-amount-ui\n                  *ngIf=\"hostRef.limitForm.get('regular').controls[i].value.amount; else noAmount\"\n                  [currency]=\"hostRef.currency\"\n                  [amount]=\"hostRef.limitForm.get('regular').controls[i].value.amount\"\n                  [mapCurrency]=\"true\"\n                  data-role=\"edit-limit-bound-item-regular-limit-disabled\"></bb-amount-ui>\n              </div>\n              <div *ngSwitchDefault>\n                <span\n                  [attr.id]=\"i + '-regular-limit-label'\"\n                  class=\"sr-only\"\n                  i18n=\"Regular limit currency input label@@limits.edit.limits-bound.currency-input.regular\"\n                  data-role=\"edit-limit-bound-item-regular-limit-aria-label\">\n                  { bound.period, select, transactional-limits-bound {Per transaction limit} daily {Daily limit} weekly\n                  {Weekly limit} monthly {Monthly limit} quarterly {Quarterly limit} yearly {Yearly limit} other {\n                  {{ bound.period }} limit } }\n                </span>\n                <bb-currency-input-ui\n                  [formControl]=\"hostRef.limitForm.get('regular').controls[i]\"\n                  placeholder=\"\"\n                  [integer]=\"true\"\n                  [allowNegativeValue]=\"false\"\n                  integerLabel=\" \"\n                  [integerLabelSrOnly]=\"true\"\n                  resultType=\"string\"\n                  [disabled]=\"hostRef.disableRegular\"\n                  [aria-labelledby]=\"i + '-regular-limit-label'\"\n                  [aria-describedby]=\"i + '-regular-limit-error'\"\n                  data-role=\"edit-limit-bound-item-regular-limit\"></bb-currency-input-ui>\n              </div>\n            </div>\n            <div\n              class=\"col\"\n              *ngIf=\"hostRef.showShadowLimit\"\n              [ngSwitch]=\"hostRef.disableShadow\"\n              data-role=\"edit-limit-bound-item-shadow\">\n              <div class=\"bb-subtitle\" *ngSwitchCase=\"true\">\n                <bb-amount-ui\n                  *ngIf=\"hostRef.limitForm.get('shadow').controls[i].value.amount; else noAmount\"\n                  [currency]=\"hostRef.currency\"\n                  [amount]=\"hostRef.limitForm.get('shadow').controls[i].value.amount\"\n                  [mapCurrency]=\"true\"\n                  data-role=\"edit-limit-bound-item-shadow-limit-disabled\"></bb-amount-ui>\n              </div>\n              <div *ngSwitchDefault>\n                <span\n                  [attr.id]=\"i + '-shadow-limit-label'\"\n                  class=\"sr-only\"\n                  i18n=\"Shadow limit currency input label@@limits.edit.limits-bound.currency-input.shadow\"\n                  data-role=\"edit-limit-bound-item-shadow-limit-aria-label\">\n                  { bound.period, select, transactional-limits-bound {Per transaction shadow limit} daily {Daily shadow\n                  limit} weekly {Weekly shadow limit} monthly {Monthly shadow limit} quarterly {Quarterly shadow limit}\n                  yearly {Yearly shadow limit} other { {{ bound.period }} shadow limit } }\n                </span>\n                <bb-currency-input-ui\n                  [formControl]=\"hostRef.limitForm.get('shadow').controls[i]\"\n                  placeholder=\"\"\n                  [integer]=\"true\"\n                  [allowNegativeValue]=\"false\"\n                  integerLabel=\" \"\n                  [integerLabelSrOnly]=\"true\"\n                  resultType=\"string\"\n                  [disabled]=\"hostRef.disableShadow\"\n                  [aria-labelledby]=\"i + '-shadow-limit-label'\"\n                  [aria-describedby]=\"i + '-shadow-limit-error'\"\n                  data-role=\"edit-limit-bound-item-shadow-limit\"></bb-currency-input-ui>\n              </div>\n            </div>\n          </div>\n          <div class=\"row\">\n            <div\n              class=\"bb-subtitle\"\n              [ngClass]=\"hostRef.showRegularLimit && hostRef.showShadowLimit ? 'col-5' : 'col-8'\"></div>\n            <div class=\"col\" *ngIf=\"hostRef.showRegularLimit\">\n              <div\n                class=\"bb-subheader bb-subheader--regular bb-text-support break-word\"\n                *ngIf=\"bound.regularConsumption\"\n                [hidden]=\"hostRef.limitForm.get('regular').controls[i].invalid\">\n                <bb-amount-ui\n                  [currency]=\"hostRef.currency\"\n                  [amount]=\"bound.regularConsumption\"\n                  [mapCurrency]=\"true\"\n                  data-role=\"edit-limit-bound-item-regular-consumed\"></bb-amount-ui>\n                <span i18n=\"Consumed amount for limit@@limits.edit.limits-bound.consumed\"> consumed</span>\n              </div>\n\n              <bb-input-validation-message-ui\n                [showErrors]=\"hostRef.limitForm.get('regular').controls[i].invalid\"\n                [messageId]=\"i + '-regular-limit-error'\">\n                <span\n                  *ngIf=\"hostRef.limitForm.get('regular').controls[i].invalid\"\n                  i18n=\"Validation error for regular limit@@limits.edit.limits-bound.regular.error.validation\"\n                  data-role=\"edit-limit-bound-item-regular-error-msg\">\n                  { hostRef.limitForm.get('regular').controls[i].errors.biggerThan, select, daily {Can't be higher than\n                  Daily limit} weekly {Can't be higher than Weekly limit} monthly {Can't be higher than Monthly limit}\n                  quarterly {Can't be higher than Quarterly limit} yearly {Can't be higher than Yearly limit} other {\n                  Can't be higher than {{ hostRef.limitForm.get('regular').controls[i].errors.biggerThan }} limit} }\n                </span>\n              </bb-input-validation-message-ui>\n            </div>\n            <div class=\"col\" *ngIf=\"hostRef.showShadowLimit\">\n              <div\n                class=\"bb-subheader bb-subheader--regular bb-text-support break-word\"\n                *ngIf=\"bound.shadowConsumption\"\n                [hidden]=\"hostRef.limitForm.get('shadow').controls[i].invalid\">\n                <bb-amount-ui\n                  [currency]=\"hostRef.currency\"\n                  [amount]=\"bound.shadowConsumption\"\n                  [mapCurrency]=\"true\"\n                  data-role=\"edit-limit-bound-item-shadow-consumed\"></bb-amount-ui>\n                <span i18n=\"Consumed amount for limit@@limits.edit.limits-bound.consumed\"> consumed</span>\n              </div>\n\n              <bb-input-validation-message-ui\n                [showErrors]=\"hostRef.limitForm.get('shadow').controls[i].invalid\"\n                [messageId]=\"i + '-shadow-limit-error'\">\n                <span\n                  *ngIf=\"hostRef.limitForm.get('shadow').controls[i].invalid\"\n                  i18n=\"Validation error for shadow limit@@limits.edit.limits-bound.shadow.error.validation\"\n                  data-role=\"edit-limit-bound-item-shadow-error-msg\">\n                  { hostRef.limitForm.get('shadow').controls[i].errors.biggerThan, select, daily {Can't be higher than\n                  Daily shadow limit} weekly {Can't be higher than Weekly shadow limit} monthly {Can't be higher than\n                  Monthly shadow limit} quarterly {Can't be higher than Quarterly shadow limit} yearly {Can't be higher\n                  than Yearly shadow limit} other { Can't be higher than\n                  {{ hostRef.limitForm.get('shadow').controls[i].errors.biggerThan }} shadow limit} }\n                </span>\n              </bb-input-validation-message-ui>\n            </div>\n          </div>\n        </div>\n      </div>\n    </ng-template>\n  </bb-modal-body-ui>\n  <bb-modal-footer-ui>\n    <ng-template bbCustomModalFooter>\n      <div class=\"bb-button-bar\">\n        <bb-load-button-ui\n          class=\"bb-button-bar__button\"\n          color=\"primary\"\n          [isLoading]=\"hostRef.showLoadingSubmitBtn\"\n          (bbKeyboardClick)=\"!hostRef.isDisabled && hostRef.submitForm()\"\n          [disabled]=\"hostRef.isDisabled\"\n          data-role=\"edit-limit-submit\">\n          <span i18n=\"Save button@@limits.edit.action-button.save\">Save</span>\n        </bb-load-button-ui>\n        <button\n          bbButton\n          color=\"link\"\n          class=\"bb-button-bar__button\"\n          (bbKeyboardClick)=\"hostRef.close.emit()\"\n          i18n=\"Cancel button@@limits.edit.action-button.cancel\"\n          data-role=\"edit-limit-cancel\">\n          Cancel\n        </button>\n      </div>\n    </ng-template>\n  </bb-modal-footer-ui>\n\n  <ng-template #noAmount>\n    <bb-icon-ui\n      data-role=\"edit-limit-bound-no-amount\"\n      class=\"bb-text-support\"\n      name=\"remove\"\n      color=\"support\"></bb-icon-ui>\n  </ng-template>\n\n  <ng-template #limitsTitleTooltip>\n    <span i18n=\"Limits modal header title tooltip @@limits.edit.period.tooltip\">\n      When setting limits, \u2018per transaction\u2019 should be your smallest value, with \u2018yearly\u2019 the largest.\n    </span>\n  </ng-template>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return i1__namespace$2.ModalBodyComponent; }), selector: "bb-modal-body-ui" }, { type: i0__namespace.forwardRef(function () { return i2__namespace$2.AlertComponent; }), selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i0__namespace.forwardRef(function () { return i3__namespace$1.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0__namespace.forwardRef(function () { return i2__namespace$1.AmountComponent; }), selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }, { type: i0__namespace.forwardRef(function () { return i6__namespace$2.CurrencyInputComponent; }), selector: "bb-currency-input-ui", inputs: ["decMaxLen", "decMinLen", "placeholder", "resultType", "integer", "required", "readonly", "disabled", "integerLabelSrOnly", "decimalLabelSrOnly", "currencies", "isRightAligned", "integerId", "decimalId", "integerLabel", "decimalLabel", "currencyLabel", "allowNegativeValue", "currencyListAriaLabel", "currencyListWithOnItemAriaLabel", "aria-describedby", "aria-labelledby", "aria-invalid"], outputs: ["blur"] }, { type: i0__namespace.forwardRef(function () { return i7__namespace$2.InputValidationMessageComponent; }), selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace$2.ModalFooterComponent; }), selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }, { type: i0__namespace.forwardRef(function () { return i8__namespace$2.LoadButtonComponent; }), selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }], directives: [{ type: i0__namespace.forwardRef(function () { return EditLimitCustomizableDirective; }), selector: "[bbEditLimitCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i1__namespace$2.CustomModalBodyDirective; }), selector: "ng-template[bbCustomModalBody]" }, { type: i0__namespace.forwardRef(function () { return i9__namespace.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i0__namespace.forwardRef(function () { return i9__namespace.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0__namespace.forwardRef(function () { return i9__namespace.NgClass; }), selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i0__namespace.forwardRef(function () { return i6__namespace$1.TooltipDirective; }), selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i0__namespace.forwardRef(function () { return i9__namespace.NgSwitch; }), selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i0__namespace.forwardRef(function () { return i9__namespace.NgSwitchCase; }), selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i0__namespace.forwardRef(function () { return i9__namespace.NgSwitchDefault; }), selector: "[ngSwitchDefault]" }, { type: i0__namespace.forwardRef(function () { return i1__namespace$1.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0__namespace.forwardRef(function () { return i1__namespace$1.FormControlDirective; }), selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace$2.CustomModalFooterDirective; }), selector: "ng-template[bbCustomModalFooter]" }, { type: i0__namespace.forwardRef(function () { return i8__namespace$1.KeyboardClickDirective; }), selector: "[bbKeyboardClick]", outputs: ["bbKeyboardClick"] }, { type: i0__namespace.forwardRef(function () { return i7__namespace$1.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }] });
        i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: EditLimitComponent, decorators: [{
                    type: i0.Component,
                    args: [{
                            selector: 'bb-edit-limit',
                            templateUrl: 'edit-limit.component.html',
                        }]
                }], ctorParameters: function () { return [{ type: i1__namespace$1.FormBuilder }, { type: i0__namespace.ElementRef }, { type: i0__namespace.ChangeDetectorRef }]; }, propDecorators: { showRegularLimit: [{
                        type: i0.Input
                    }], showShadowLimit: [{
                        type: i0.Input
                    }], limitBounds: [{
                        type: i0.Input
                    }], currency: [{
                        type: i0.Input
                    }], showLoadingSubmitBtn: [{
                        type: i0.Input
                    }], errors: [{
                        type: i0.Input
                    }], disableRegular: [{
                        type: i0.Input
                    }], disableShadow: [{
                        type: i0.Input
                    }], submit: [{
                        type: i0.Output
                    }], close: [{
                        type: i0.Output
                    }] } });
        var EditLimitCustomizableDirective = /** @class */ (function (_super) {
            __extends(EditLimitCustomizableDirective, _super);
            function EditLimitCustomizableDirective() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return EditLimitCustomizableDirective;
        }(core.BbTemplate));
        /** @nocollapse */ EditLimitCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: EditLimitCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
        /** @nocollapse */ EditLimitCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: EditLimitCustomizableDirective, selector: "[bbEditLimitCustomizable]", usesInheritance: true, ngImport: i0__namespace });
        i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: EditLimitCustomizableDirective, decorators: [{
                    type: i0.Directive,
                    args: [{
                            selector: '[bbEditLimitCustomizable]',
                        }]
                }] });

        var PENDING_APPROVAL_STATUS = 'PENDING';
        var ManageLimitsModalComponent = /** @class */ (function () {
            function ManageLimitsModalComponent(notificationService, limitsService) {
                this.notificationService = notificationService;
                this.limitsService = limitsService;
                /**
                 * Success both limits template reference
                 */
                this.successBothLimitTemplate = '';
                /**
                 * Success Regular limits create template reference
                 */
                this.successRegularLimitCreateTemplate = '';
                /**
                 * Success Regular limits update template reference
                 */
                this.successRegularLimitUpdateTemplate = '';
                /**
                 * Success Shadow limits create template reference
                 */
                this.successShadowLimitCreateTemplate = '';
                /**
                 * Success shadow limit update template reference
                 */
                this.successShadowLimitUpdateTemplate = '';
                /**
                 * Fail both limits template reference
                 */
                this.failBothLimitTemplate = '';
                /**
                 * Fail regular limit create template reference
                 */
                this.failRegularLimitCreateTemplate = '';
                /**
                 * Fail regular limit update template reference
                 */
                this.failRegularLimitUpdateTemplate = '';
                /**
                 * Fail shadow limit create template reference
                 */
                this.failShadowLimitCreateTemplate = '';
                /**
                 * Fail shadow limit update template reference
                 */
                this.failShadowLimitUpdateTemplate = '';
                /**
                 * Limits pending notification template reference
                 */
                this.limitsPendingNotificationTemplate = '';
                /**
                 * Shadow Limits pending notification template reference
                 */
                this.shadowLimitsPendingNotificationTemplate = '';
                /**
                 * Flag for show/hide regular limit column.
                 */
                this.showRegularLimit = false;
                /**
                 * Flag for show/hide shadow limit column.
                 */
                this.showShadowLimit = false;
                /**
                 * Notification dismiss time in milliseconds (defaults to 3000)
                 * @default 3000
                 */
                this.notificationDismissTime = 3000;
                /**
                 * Close modal window event.
                 * Propagate event when modal window should be closed.
                 */
                // eslint-disable-next-line @angular-eslint/no-output-native
                this.close = new i0.EventEmitter();
                this.pendingSubmitSubject = new rxjs.Subject();
                /**
                 * Stream of pending submit flag value
                 */
                this.pendingSubmit$ = this.pendingSubmitSubject.pipe(operators.distinctUntilChanged());
                this.errorsBESubject = new rxjs.Subject();
                /**
                 * Stream of BE errors
                 */
                this.errorsBE$ = this.errorsBESubject.pipe(operators.distinctUntilChanged());
                this.disableRegularSubject = new rxjs.BehaviorSubject(false);
                /**
                 * Stream of Disable regular limits flag
                 */
                this.disableRegular$ = this.disableRegularSubject.pipe(operators.distinctUntilChanged());
                this.disableShadowSubject = new rxjs.BehaviorSubject(false);
                /**
                 * Stream of Disable shadow limits flag
                 */
                this.disableShadow$ = this.disableShadowSubject.pipe(operators.distinctUntilChanged());
                /**
                 * Currency form control
                 */
                this.currencyControl = new i1$1.FormControl();
                /**
                 * Show notification stream
                 */
                this.showNotification$ = new rxjs.Subject();
                /**
                 * Unsubscribe stream
                 */
                this.destroy$ = new rxjs.Subject();
            }
            ManageLimitsModalComponent.prototype.ngOnInit = function () {
                var _this = this;
                this.showNotification$.pipe(operators.takeUntil(this.destroy$)).subscribe(function (_b) {
                    var header = _b.header, modifier = _b.modifier;
                    _this.notificationService.showNotification({
                        modifier: modifier,
                        header: header,
                        message: '',
                        dismissible: true,
                        ttl: _this.notificationDismissTime,
                    });
                });
            };
            /**
             * Function for calling create/update limits API calls
             * @param event - any
             */
            ManageLimitsModalComponent.prototype.submitLimits = function (event) {
                var _this = this;
                this.pendingSubmitSubject.next(true);
                this.errorsBESubject.next();
                var requestData;
                var requestDataList = [];
                var requests = [];
                if (this.showRegularLimit && !this.disableRegularSubject.value && event.isRegularChanged) {
                    requestData = this.generateManageLimitRequestData(event.limitValue, false);
                    requestDataList.push(requestData);
                    requests.push(requestData.uuid
                        ? this.limitsService
                            .updateLimit(requestData.uuid, this.generateManageLimitRequestUpdateData(event.limitValue, false))
                            .pipe(operators.catchError(function (err) { return rxjs.of(Object.assign({ isError: true }, err)); }))
                        : this.limitsService.createNewLimit(requestData).pipe(operators.catchError(function (err) { return rxjs.of(Object.assign({ isError: true }, err)); })));
                }
                if (this.showShadowLimit && !this.disableShadowSubject.value && event.isShadowChanged) {
                    requestData = this.generateManageLimitRequestData(event.limitValue, true);
                    requestDataList.push(requestData);
                    requests.push(requestData.uuid
                        ? this.limitsService
                            .updateLimit(requestData.uuid, this.generateManageLimitRequestUpdateData(event.limitValue, true))
                            .pipe(operators.catchError(function (err) { return rxjs.of(Object.assign({ isError: true }, err)); }))
                        : this.limitsService.createNewLimit(requestData).pipe(operators.catchError(function (err) { return rxjs.of(Object.assign({ isError: true }, err)); })));
                }
                rxjs.forkJoin(requests)
                    .pipe(operators.finalize(function () { return _this.pendingSubmitSubject.next(false); }), operators.takeUntil(this.destroy$))
                    .subscribe(function (resp) { return _this.parseSubmitLimitsResponse(resp, requestDataList); });
            };
            /**
             * Parse response of manage limits API
             * @param response - any
             * @param requests - any[]
             */
            ManageLimitsModalComponent.prototype.parseSubmitLimitsResponse = function (response, requests) {
                var _this = this;
                var errors = response.filter(function (item) { return item.isError; });
                if (!errors.length) {
                    if (response.filter(function (item) { return item.approvalStatus === PENDING_APPROVAL_STATUS; }).length) {
                        this.showAllIsPendingNotification(requests);
                    }
                    else {
                        this.showNotification(this.successBothLimitTemplate);
                    }
                    this.close.emit();
                }
                else if (errors.length === response.length) {
                    this.showNotification(this.failBothLimitTemplate, 'error');
                }
                else {
                    response.forEach(function (item, index) {
                        if (item.approvalStatus === PENDING_APPROVAL_STATUS) {
                            _this.showPendingLimitNotification(requests[index]);
                        }
                        else {
                            _this.showLimitNotification(requests[index], item.isError);
                        }
                    });
                    if (!this.currency) {
                        this.currency = this.currencyControl.value;
                    }
                }
                this.generateBEErrors(errors);
            };
            /**
             * Generate list of BE errors
             * @param errors - any[]
             */
            ManageLimitsModalComponent.prototype.generateBEErrors = function (errors) {
                var _this = this;
                if (!errors.length) {
                    return;
                }
                var errorsBE = [];
                errors.forEach(function (errorItem) {
                    var error = errorItem.error;
                    if (error) {
                        if (error.errorDetails) {
                            errorsBE.push.apply(errorsBE, __spreadArray([], __read(_this.parseErrorDetails(error.errorDetails))));
                        }
                        else if (error.message) {
                            errorsBE.push({ message: error.message });
                        }
                    }
                    else if (errorItem.message) {
                        errorsBE.push({ message: errorItem.message });
                    }
                });
                this.errorsBESubject.next(errorsBE);
            };
            /**
             * Parse errorDetails object and return array of error
             * @param errorDetails - any
             * @return any[]
             */
            ManageLimitsModalComponent.prototype.parseErrorDetails = function (errorDetails) {
                var errorsBE = [];
                if (errorDetails && errorDetails.errorFields) {
                    errorsBE.push.apply(errorsBE, __spreadArray([], __read(errorDetails.errorFields)));
                }
                else if (errorDetails.message) {
                    errorsBE.push({ message: errorDetails.message });
                }
                return errorsBE;
            };
            /**
             * Show appropriate notification after create/update limits
             * @param request - any
             * @param isError - boolean
             */
            ManageLimitsModalComponent.prototype.showLimitNotification = function (request, isError) {
                if (isError) {
                    this.showErrorLimitNotification(request);
                }
                else {
                    this.showSuccessLimitNotification(request);
                }
            };
            /**
             * Show error notification for limit request
             * @param request - any
             */
            ManageLimitsModalComponent.prototype.showErrorLimitNotification = function (request) {
                if (request.shadow) {
                    this.showNotification(request.uuid ? this.failShadowLimitUpdateTemplate : this.failShadowLimitCreateTemplate, 'error');
                }
                else {
                    this.showNotification(request.uuid ? this.failRegularLimitUpdateTemplate : this.failRegularLimitCreateTemplate, 'error');
                }
            };
            /**
             * Show success notification for limit request
             * @param request - any
             */
            ManageLimitsModalComponent.prototype.showSuccessLimitNotification = function (request) {
                if (!request.shadow) {
                    this.showNotification(request.uuid ? this.successRegularLimitUpdateTemplate : this.successRegularLimitCreateTemplate);
                    this.disableRegularSubject.next(true);
                }
                else {
                    this.showNotification(request.uuid ? this.successShadowLimitUpdateTemplate : this.successShadowLimitCreateTemplate);
                    this.disableShadowSubject.next(true);
                }
            };
            /**
             * Show success pending notification for limit requests
             * @param requests - any[]
             */
            ManageLimitsModalComponent.prototype.showAllIsPendingNotification = function (requests) {
                if (requests.length === 1 && requests[0].shadow) {
                    this.showNotification(this.shadowLimitsPendingNotificationTemplate, 'success');
                }
                else {
                    this.showNotification(this.limitsPendingNotificationTemplate, 'success');
                }
            };
            /**
             * Show pending notification which happened with another failed request
             * @param request - any
             */
            ManageLimitsModalComponent.prototype.showPendingLimitNotification = function (request) {
                if (request.shadow) {
                    this.showNotification(this.shadowLimitsPendingNotificationTemplate, 'success');
                    this.disableShadowSubject.next(true);
                }
                else {
                    this.showNotification(this.limitsPendingNotificationTemplate, 'success');
                    this.disableRegularSubject.next(true);
                }
            };
            /**
             * Show notification
             * @param messageRef - TemplateRef<any> | string
             * @param type - any
             */
            ManageLimitsModalComponent.prototype.showNotification = function (messageRef, type) {
                if (type === void 0) { type = 'success'; }
                this.showNotification$.next({
                    modifier: type,
                    header: messageRef,
                });
            };
            /**
             * Mapper for converting limits form value into request body for manage limits API
             * @param limitValue - any
             * @param isShadow - boolean
             */
            ManageLimitsModalComponent.prototype.generateManageLimitRequestData = function (limitValue, isShadow) {
                var limitType = isShadow ? 'shadow' : 'regular';
                var requestData = {
                    'user-BBID': this.limitKey['user-BBID'],
                    entities: this.limitKey.lookupKeys,
                    shadow: isShadow,
                    currency: this.currency || this.currencyControl.value,
                };
                requestData[PERIODIC_LIMITS_BOUNDS] = {
                    customPeriods: [],
                };
                if (this.limitIds && this.limitIds[limitType]) {
                    requestData.uuid = this.limitIds[limitType];
                }
                this.limitBounds.forEach(function (limitBound, index) {
                    var _a;
                    var amount = (_a = limitValue[limitType][index]) === null || _a === void 0 ? void 0 : _a.amount.replace(AMOUNT_DELIMETER_REG_EXP, '');
                    switch (limitBound.period) {
                        case TRANSACTIONAL_LIMITS_BOUNDS:
                            requestData[TRANSACTIONAL_LIMITS_BOUNDS] = {
                                amount: amount,
                            };
                            break;
                        case 'daily':
                        case 'weekly':
                        case 'monthly':
                        case 'quarterly':
                        case 'yearly':
                            requestData[PERIODIC_LIMITS_BOUNDS][limitBound.period] = amount;
                            break;
                        default:
                            requestData[PERIODIC_LIMITS_BOUNDS].customPeriods.push({
                                period: limitBound.period,
                                amount: amount,
                            });
                            break;
                    }
                });
                return requestData;
            };
            ManageLimitsModalComponent.prototype.generateManageLimitRequestUpdateData = function (limitValue, isShadow) {
                var requestData = {};
                var limitType = isShadow ? 'shadow' : 'regular';
                requestData[PERIODIC_LIMITS_BOUNDS] = {
                    customPeriods: [],
                };
                this.limitBounds.forEach(function (limitBound, index) {
                    var _a;
                    var amount = (_a = limitValue[limitType][index]) === null || _a === void 0 ? void 0 : _a.amount;
                    switch (limitBound.period) {
                        case TRANSACTIONAL_LIMITS_BOUNDS:
                            requestData[TRANSACTIONAL_LIMITS_BOUNDS] = {
                                amount: amount,
                            };
                            break;
                        case 'daily':
                        case 'weekly':
                        case 'monthly':
                        case 'quarterly':
                        case 'yearly':
                            requestData[PERIODIC_LIMITS_BOUNDS][limitBound.period] = amount;
                            break;
                        default:
                            requestData[PERIODIC_LIMITS_BOUNDS].customPeriods.push({
                                period: limitBound.period,
                                amount: amount,
                            });
                            break;
                    }
                });
                return requestData;
            };
            Object.defineProperty(ManageLimitsModalComponent.prototype, "getCurrency", {
                /**
                 * Limit currency getter
                 */
                get: function () {
                    return this.currency || this.currencyControl.value;
                },
                enumerable: false,
                configurable: true
            });
            /**
             * OpenChange modal window event handler.
             * @param isOpen - boolean
             */
            ManageLimitsModalComponent.prototype.onOpenChange = function (isOpen) {
                if (!isOpen) {
                    this.close.emit();
                }
            };
            ManageLimitsModalComponent.prototype.ngOnDestroy = function () {
                this.destroy$.next();
            };
            return ManageLimitsModalComponent;
        }());
        /** @nocollapse */ ManageLimitsModalComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManageLimitsModalComponent, deps: [{ token: i2__namespace.NotificationService }, { token: LimitsService }], target: i0__namespace.ɵɵFactoryTarget.Component });
        /** @nocollapse */ ManageLimitsModalComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ManageLimitsModalComponent, selector: "bb-manage-limits-modal", inputs: { view: "view", limitBounds: "limitBounds", showRegularLimit: "showRegularLimit", showShadowLimit: "showShadowLimit", currency: "currency", limitKey: "limitKey", limitIds: "limitIds", pending: "pending", headerTitle: "headerTitle", serviceAgreementId: "serviceAgreementId", legalEntityId: "legalEntityId", headerSubTitleUserName: "headerSubTitleUserName", headerSubTitleJRName: "headerSubTitleJRName", headerSubTitleLEName: "headerSubTitleLEName", headerSubTitleSAName: "headerSubTitleSAName", notificationDismissTime: "notificationDismissTime" }, outputs: { close: "close" }, viewQueries: [{ propertyName: "successBothLimitTemplate", first: true, predicate: ["successBothLimit"], descendants: true }, { propertyName: "successRegularLimitCreateTemplate", first: true, predicate: ["successRegularLimitCreate"], descendants: true }, { propertyName: "successRegularLimitUpdateTemplate", first: true, predicate: ["successRegularLimitUpdate"], descendants: true }, { propertyName: "successShadowLimitCreateTemplate", first: true, predicate: ["successShadowLimitCreate"], descendants: true }, { propertyName: "successShadowLimitUpdateTemplate", first: true, predicate: ["successShadowLimitUpdate"], descendants: true }, { propertyName: "failBothLimitTemplate", first: true, predicate: ["failBothLimit"], descendants: true }, { propertyName: "failRegularLimitCreateTemplate", first: true, predicate: ["failRegularLimitCreate"], descendants: true }, { propertyName: "failRegularLimitUpdateTemplate", first: true, predicate: ["failRegularLimitUpdate"], descendants: true }, { propertyName: "failShadowLimitCreateTemplate", first: true, predicate: ["failShadowLimitCreate"], descendants: true }, { propertyName: "failShadowLimitUpdateTemplate", first: true, predicate: ["failShadowLimitUpdate"], descendants: true }, { propertyName: "limitsPendingNotificationTemplate", first: true, predicate: ["limitsPendingNotificationTemplate"], descendants: true }, { propertyName: "shadowLimitsPendingNotificationTemplate", first: true, predicate: ["shadowLimitsPendingNotificationTemplate"], descendants: true }], ngImport: i0__namespace, template: "<ng-container\n  bbManageLimitsModalCustomizable\n  [bbHostRef]=\"this\"\n  [bbTemplateContext]=\"{\n    pendingSubmit: pendingSubmit$ | async,\n    errorsBE: errorsBE$ | async,\n    disableRegular: disableRegular$ | async,\n    disableShadow: disableShadow$ | async\n  }\"></ng-container>\n\n<ng-template\n  bbManageLimitsModalCustomizable\n  let-hostRef\n  let-pendingSubmit=\"context.pendingSubmit\"\n  let-errorsBE=\"context.errorsBE\"\n  let-disableRegular=\"context.disableRegular\"\n  let-disableShadow=\"context.disableShadow\">\n  <bb-modal-ui\n    data-role=\"bb-manage-limits-modal-container\"\n    [isOpen]=\"true\"\n    [modalOptions]=\"{\n      backdrop: 'static',\n      centered: true,\n      keyboard: true,\n      size: 'md'\n    }\"\n    (isOpenChange)=\"hostRef.onOpenChange($event)\">\n    <bb-modal-header-ui>\n      <ng-template bbCustomModalHeader>\n        <bb-manage-limits-modal-header\n          class=\"bb-stack__item bb-stack__item--fill\"\n          [currency]=\"hostRef.currency\"\n          [currencyControl]=\"hostRef.currencyControl\"\n          [title]=\"hostRef.headerTitle\"\n          [serviceAgreementId]=\"hostRef.serviceAgreementId\"\n          [legalEntityId]=\"hostRef.legalEntityId\"\n          [subTitleUserName]=\"hostRef.headerSubTitleUserName\"\n          [subTitleJRName]=\"hostRef.headerSubTitleJRName\"\n          [subTitleLEName]=\"hostRef.headerSubTitleLEName\"\n          [subTitleSAName]=\"hostRef.headerSubTitleSAName\"\n          [notificationDismissTime]=\"hostRef._notificationDismissTime\"\n          (close)=\"hostRef.onOpenChange(false)\"\n          defaultTitle=\"Limits\"\n          i18n-defaultTitle=\"Limits modal header title@@manage-limits-modal.header.title\"\n          data-role=\"manage-limits-modal-header\"></bb-manage-limits-modal-header>\n      </ng-template>\n    </bb-modal-header-ui>\n\n    <!-- NOTE: View and Edit template should define it's own header, footer, and body templates here -->\n    <ng-container *ngIf=\"hostRef.getCurrency\" [ngSwitch]=\"hostRef.view\">\n      <ng-container *ngSwitchCase=\"'view'\">\n        <bb-manage-limits-modal-view-body\n          [limitBounds]=\"hostRef.limitBounds\"\n          [showRegularLimit]=\"hostRef.showRegularLimit\"\n          [showShadowLimit]=\"hostRef.showShadowLimit\"\n          [pending]=\"hostRef.pending\"\n          [currency]=\"hostRef.currency\"\n          (cancel)=\"hostRef.onOpenChange(false)\"\n          data-role=\"bb-manage-limits-modal-view\"></bb-manage-limits-modal-view-body>\n      </ng-container>\n      <ng-container *ngSwitchCase=\"'edit'\">\n        <bb-edit-limit\n          [limitBounds]=\"hostRef.limitBounds\"\n          [showRegularLimit]=\"hostRef.showRegularLimit\"\n          [showShadowLimit]=\"hostRef.showShadowLimit\"\n          [disableRegular]=\"disableRegular\"\n          [disableShadow]=\"disableShadow\"\n          [currency]=\"hostRef.getCurrency\"\n          [showLoadingSubmitBtn]=\"pendingSubmit\"\n          [errors]=\"errorsBE\"\n          (submit)=\"hostRef.submitLimits($event)\"\n          (close)=\"hostRef.onOpenChange(false)\"\n          data-role=\"bb-manage-limits-modal-edit\"></bb-edit-limit>\n      </ng-container>\n    </ng-container>\n  </bb-modal-ui>\n</ng-template>\n\n<ng-template #successBothLimit>\n  <span i18n=\"Both limits is successfully saved@@manage-limits-modal.notification.save.success\">\n    Limits successfully saved\n  </span>\n</ng-template>\n<ng-template #successRegularLimitCreate>\n  <span i18n=\"Regular limits is successfully added@@manage-limits-modal.notification.create.success.regular\">\n    Regular limits successfully added\n  </span>\n</ng-template>\n<ng-template #successRegularLimitUpdate>\n  <span i18n=\"Regular limits is successfully updated@@manage-limits-modal.notification.update.success.regular\">\n    Regular limits successfully updated\n  </span>\n</ng-template>\n<ng-template #successShadowLimitCreate>\n  <span i18n=\"Shadow limits is successfully added@@manage-limits-modal.notification.create.success.shadow\">\n    Shadow limits successfully added\n  </span>\n</ng-template>\n<ng-template #successShadowLimitUpdate>\n  <span i18n=\"Shadow limits is successfully updated@@manage-limits-modal.notification.update.success.shadow\">\n    Shadow limits successfully updated\n  </span>\n</ng-template>\n<ng-template #failBothLimit>\n  <span i18n=\"Both limits are failed to saved@@manage-limits-modal.notification.save.error\">\n    Limits failed to save\n  </span>\n</ng-template>\n<ng-template #failRegularLimitCreate>\n  <span i18n=\"Regular limits are failed to create@@manage-limits-modal.notification.create.error.regular\">\n    Regular limits failed to add\n  </span>\n</ng-template>\n<ng-template #failRegularLimitUpdate>\n  <span i18n=\"Regular limits are failed to update@@manage-limits-modal.notification.update.error.regular\">\n    Regular limits failed to update\n  </span>\n</ng-template>\n<ng-template #failShadowLimitCreate>\n  <span i18n=\"Shadow limits are failed to create@@manage-limits-modal.notification.create.error.shadow\">\n    Shadow limits failed to add\n  </span>\n</ng-template>\n<ng-template #failShadowLimitUpdate>\n  <span i18n=\"Shadow limits are failed to update@@manage-limits-modal.notification.update.error.shadow\">\n    Shadow limits failed to update\n  </span>\n</ng-template>\n<ng-template #limitsPendingNotificationTemplate>\n  <span\n    i18n=\"\n      Success notification when limits changed but changes are in pending\n      state@@manage-limits-modal.notification.pending.limit\">\n    The limits are in pending state, and will be active once they are approved\n  </span>\n</ng-template>\n\n<ng-template #shadowLimitsPendingNotificationTemplate>\n  <span\n    i18n=\"\n      Success notification when shadow limits changed but changes are in pending\n      state@@manage-limits-modal.notification.pending.shadow-limit\">\n    The shadow limits are in pending state, and will be active once they are approved\n  </span>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return i1__namespace$2.ModalComponent; }), selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace$2.ModalHeaderComponent; }), selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i0__namespace.forwardRef(function () { return ManageLimitsModalHeaderComponent; }), selector: "bb-manage-limits-modal-header", inputs: ["currency", "currencyControl", "defaultTitle", "title", "serviceAgreementId", "legalEntityId", "subTitleUserName", "subTitleJRName", "subTitleLEName", "subTitleSAName", "notificationDismissTime"], outputs: ["close"] }, { type: i0__namespace.forwardRef(function () { return ManageLimitsModalViewBodyComponent; }), selector: "bb-manage-limits-modal-view-body", inputs: ["showRegularLimit", "showShadowLimit", "pending", "currency", "limitBounds"], outputs: ["cancel"] }, { type: i0__namespace.forwardRef(function () { return EditLimitComponent; }), selector: "bb-edit-limit", inputs: ["showRegularLimit", "showShadowLimit", "limitBounds", "currency", "showLoadingSubmitBtn", "errors", "disableRegular", "disableShadow"], outputs: ["submit", "close"] }], directives: [{ type: i0__namespace.forwardRef(function () { return ManageLimitsModalCustomizableDirective; }), selector: "[bbManageLimitsModalCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i1__namespace$2.CustomModalHeaderDirective; }), selector: "ng-template[bbCustomModalHeader]" }, { type: i0__namespace.forwardRef(function () { return i9__namespace.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0__namespace.forwardRef(function () { return i9__namespace.NgSwitch; }), selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i0__namespace.forwardRef(function () { return i9__namespace.NgSwitchCase; }), selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }], pipes: { "async": i0__namespace.forwardRef(function () { return i9__namespace.AsyncPipe; }) } });
        i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManageLimitsModalComponent, decorators: [{
                    type: i0.Component,
                    args: [{
                            selector: 'bb-manage-limits-modal',
                            templateUrl: 'manage-limits-modal.component.html',
                        }]
                }], ctorParameters: function () { return [{ type: i2__namespace.NotificationService }, { type: LimitsService }]; }, propDecorators: { successBothLimitTemplate: [{
                        type: i0.ViewChild,
                        args: ['successBothLimit']
                    }], successRegularLimitCreateTemplate: [{
                        type: i0.ViewChild,
                        args: ['successRegularLimitCreate']
                    }], successRegularLimitUpdateTemplate: [{
                        type: i0.ViewChild,
                        args: ['successRegularLimitUpdate']
                    }], successShadowLimitCreateTemplate: [{
                        type: i0.ViewChild,
                        args: ['successShadowLimitCreate']
                    }], successShadowLimitUpdateTemplate: [{
                        type: i0.ViewChild,
                        args: ['successShadowLimitUpdate']
                    }], failBothLimitTemplate: [{
                        type: i0.ViewChild,
                        args: ['failBothLimit']
                    }], failRegularLimitCreateTemplate: [{
                        type: i0.ViewChild,
                        args: ['failRegularLimitCreate']
                    }], failRegularLimitUpdateTemplate: [{
                        type: i0.ViewChild,
                        args: ['failRegularLimitUpdate']
                    }], failShadowLimitCreateTemplate: [{
                        type: i0.ViewChild,
                        args: ['failShadowLimitCreate']
                    }], failShadowLimitUpdateTemplate: [{
                        type: i0.ViewChild,
                        args: ['failShadowLimitUpdate']
                    }], limitsPendingNotificationTemplate: [{
                        type: i0.ViewChild,
                        args: ['limitsPendingNotificationTemplate']
                    }], shadowLimitsPendingNotificationTemplate: [{
                        type: i0.ViewChild,
                        args: ['shadowLimitsPendingNotificationTemplate']
                    }], view: [{
                        type: i0.Input
                    }], limitBounds: [{
                        type: i0.Input
                    }], showRegularLimit: [{
                        type: i0.Input
                    }], showShadowLimit: [{
                        type: i0.Input
                    }], currency: [{
                        type: i0.Input
                    }], limitKey: [{
                        type: i0.Input
                    }], limitIds: [{
                        type: i0.Input
                    }], pending: [{
                        type: i0.Input
                    }], headerTitle: [{
                        type: i0.Input
                    }], serviceAgreementId: [{
                        type: i0.Input
                    }], legalEntityId: [{
                        type: i0.Input
                    }], headerSubTitleUserName: [{
                        type: i0.Input
                    }], headerSubTitleJRName: [{
                        type: i0.Input
                    }], headerSubTitleLEName: [{
                        type: i0.Input
                    }], headerSubTitleSAName: [{
                        type: i0.Input
                    }], notificationDismissTime: [{
                        type: i0.Input
                    }], close: [{
                        type: i0.Output
                    }] } });
        var ManageLimitsModalCustomizableDirective = /** @class */ (function (_super) {
            __extends(ManageLimitsModalCustomizableDirective, _super);
            function ManageLimitsModalCustomizableDirective() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            return ManageLimitsModalCustomizableDirective;
        }(core.BbTemplate));
        /** @nocollapse */ ManageLimitsModalCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManageLimitsModalCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
        /** @nocollapse */ ManageLimitsModalCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ManageLimitsModalCustomizableDirective, selector: "[bbManageLimitsModalCustomizable]", usesInheritance: true, ngImport: i0__namespace });
        i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManageLimitsModalCustomizableDirective, decorators: [{
                    type: i0.Directive,
                    args: [{
                            selector: '[bbManageLimitsModalCustomizable]',
                        }]
                }] });

        var getBusinessFunctionPrivilege = function (permission, businessFunction, key) {
            var privilege = businessFunction.privileges.find(function (e) { return e.privilege === key; });
            var assigned = !!permission.assignedPrivileges.find(function (assignedPrivilege) { return assignedPrivilege.privilege === key; });
            var supportsLimits = privilege ? privilege.supportsLimit : false;
            return {
                applicable: !!privilege,
                assigned: assigned,
                supportsLimits: supportsLimits,
            };
        };
        var PRIVILEGES = ['execute', 'view', 'create', 'edit', 'delete', 'approve', 'cancel'];
        var getExtendedBusinessFunctions = function (functionGroup, allBusinessFunctions, filterHookEnabled) {
            if (filterHookEnabled === void 0) { filterHookEnabled = false; }
            if (functionGroup && functionGroup.permissions) {
                var permissions = functionGroup.permissions;
                var businessFunctionById_1 = allBusinessFunctions.reduce(function (memo, item) {
                    var _a;
                    return (Object.assign(Object.assign({}, memo), (_a = {}, _a[item.functionId] = item, _a)));
                }, {});
                if (filterHookEnabled) {
                    return permissions
                        .filter(function (permission) {
                        if (permission.functionId === '1004')
                            permission.functionId = '1045'; // TODO fix me in mocks
                        var businessFunction = businessFunctionById_1[permission.functionId];
                        return Boolean(businessFunction);
                    })
                        .map(function (permission) { return permissionMapper(permission, businessFunctionById_1); });
                }
                return permissions.map(function (permission) { return permissionMapper(permission, businessFunctionById_1); });
            }
            return [];
        };
        function permissionMapper(permission, businessFunctionById) {
            if (permission.functionId === '1004')
                permission.functionId = '1045'; // TODO fix me in mocks
            var businessFunction = businessFunctionById[permission.functionId];
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            var privileges = businessFunction.privileges, rest = __rest(businessFunction, ["privileges"]);
            var privilegesObj = PRIVILEGES.map(function (priv) {
                var _a;
                return (_a = {},
                    _a[priv] = getBusinessFunctionPrivilege(permission, businessFunction, priv),
                    _a);
            }).reduce(function (memo, item) { return (Object.assign(Object.assign({}, memo), item)); });
            return Object.assign(Object.assign({}, rest), { privileges: privilegesObj });
        }

        var extractParticipantsThatShareAccounts = function (serviceAgreement) { return serviceAgreement.participants
            .filter(function (participant) { return participant.sharingAccounts; })
            .map(function (participant) { return participant.id; }); };

        exports.FormAction = void 0;
        (function (FormAction) {
            FormAction[FormAction["CREATE"] = 0] = "CREATE";
            FormAction[FormAction["EDIT"] = 1] = "EDIT";
            FormAction[FormAction["LIST"] = 2] = "LIST";
            FormAction[FormAction["ADD"] = 3] = "ADD";
            FormAction[FormAction["REMOVE"] = 4] = "REMOVE";
        })(exports.FormAction || (exports.FormAction = {}));
        var errorKindMap = {
            0: 'ConnectivityError',
            400: 'BadRequest',
            401: 'AccessDenied',
            403: 'AccessDenied',
        };
        var extractKeys = function (httpError) { return httpError && httpError.error && httpError.error.errors
            ? httpError.error.errors.map(function (_a) {
                var message = _a.message, key = _a.key;
                return ({
                    message: message,
                    key: key,
                });
            })
            : []; };
        var parseError = function (widgetName, error, action) {
            if (action === void 0) { action = exports.FormAction.LIST; }
            return ({
                kind: "" + widgetName + (errorKindMap[error.status] || 'UnknownError'),
                error: error,
                action: action,
                keys: extractKeys(error),
            });
        };
        var hasError = function (control, type) {
            if (!control || !control.errors) {
                return false;
            }
            return !!control.errors[type];
        };
        var isFieldValid = function (control) {
            if (control) {
                return control.valid || control.untouched;
            }
            return false;
        };
        /**
         * Get original error msg for no typed error
         */
        var errorMsg = function (error) {
            if (error && error.keys && error.keys.length) {
                var msgArray_1 = [];
                error.keys.forEach(function (element) { return msgArray_1.push(element.message); });
                return msgArray_1.join('.');
            }
            return 'UnknownError';
        };

        function scanAndMergePaginatedItems() {
            return function (memo, item) {
                if (item.from === 0 || item.paginationType === 'pagination') {
                    return item;
                }
                return Object.assign(Object.assign({}, item), { items: __spreadArray(__spreadArray([], __read(memo.items)), __read(item.items)) });
            };
        }
        var extractDataFromResponse = function (from, paginationType) {
            return function (response) { return ({
                items: response.body || [],
                totalItems: parseInt(response.headers.get('x-total-count') || "" + (response.body || []).length, 10),
                from: from,
                paginationType: paginationType,
            }); };
        };

        var getRouteParams = function (route, param, router) {
            var _a;
            var url = router ? router.routerState.snapshot.url + '/' : undefined;
            var strRegEx = "(?:;" + param + "=).+?(?=\\/)";
            var regEx = new RegExp(strRegEx, 'g');
            if (url && ((_a = url.match(regEx)) === null || _a === void 0 ? void 0 : _a.length)) {
                // @ts-ignore
                return rxjs.of(url.match(regEx)[0].replace(';' + param + '=', ''));
            }
            var paramValue = route.paramMap.pipe(operators.pluck('params', param));
            if (!route.parent) {
                return paramValue;
            }
            return rxjs.combineLatest([paramValue, getRouteParams(route.parent, param)]).pipe(operators.map(function (params) { return params[0] || params[1]; }));
        };

        var functionAccessGroups = [
            {
                id: 'f34f7587-5ded-4f51-94c3-3a89d1b64538',
                name: 'Manage Entitlements',
                description: 'This profile will control managing of entitlements',
                serviceAgreementId: '1642b2e1-61c4-4ce3-8bd9-877327587f4b',
                validFromDate: '2019-08-16',
                validFromTime: '16:43:52',
                validUntilDate: '2019-08-23',
                validUntilTime: '16:43:52',
                permissions: [
                    {
                        functionId: '1011',
                        assignedPrivileges: [
                            {
                                privilege: 'view',
                            },
                        ],
                    },
                    {
                        functionId: '1010',
                        assignedPrivileges: [
                            {
                                privilege: 'execute',
                            },
                        ],
                    },
                    {
                        functionId: '1009',
                        assignedPrivileges: [
                            {
                                privilege: 'create',
                            },
                            {
                                privilege: 'view',
                            },
                            {
                                privilege: 'edit',
                            },
                        ],
                    },
                ],
                type: 'REGULAR',
            },
            {
                id: 'f34f7587-5ded-4f51-94c3-3a89d1b64539',
                name: 'Manage Something Completely Different',
                description: 'And now... something completely different!',
                serviceAgreementId: '1642b2e1-61c4-4ce3-8bd9-877327587f4b',
                permissions: [
                    {
                        functionId: '1002',
                        assignedPrivileges: [
                            {
                                privilege: 'view',
                            },
                        ],
                    },
                    {
                        functionId: '1011',
                        assignedPrivileges: [
                            {
                                privilege: 'view',
                            },
                        ],
                    },
                    {
                        functionId: '1010',
                        assignedPrivileges: [
                            {
                                privilege: 'execute',
                            },
                        ],
                    },
                    {
                        functionId: '1009',
                        assignedPrivileges: [
                            {
                                privilege: 'create',
                            },
                            {
                                privilege: 'view',
                            },
                            {
                                privilege: 'edit',
                            },
                        ],
                    },
                ],
                type: 'TEMPLATE',
            },
        ];
        var businessFunctions = [
            {
                functionId: '1002',
                functionCode: 'payments.sepa',
                resource: 'Payments',
                name: 'SEPA CT',
                privileges: [
                    { privilege: 'view', supportsLimit: false },
                    { privilege: 'edit', supportsLimit: false },
                    { privilege: 'delete', supportsLimit: false },
                    { privilege: 'create', supportsLimit: true },
                    { privilege: 'approve', supportsLimit: false },
                    { privilege: 'cancel', supportsLimit: false },
                ],
            },
            {
                functionId: '1009',
                functionCode: 'assign.permissions',
                resource: 'Service Agreement',
                name: 'Assign Permissions',
                privileges: [
                    { privilege: 'approve', supportsLimit: false },
                    { privilege: 'view', supportsLimit: false },
                    { privilege: 'create', supportsLimit: false },
                    { privilege: 'edit', supportsLimit: false },
                ],
            },
            {
                functionId: '1010',
                functionCode: 'manage.users',
                resource: 'User',
                name: 'Manage Users',
                privileges: [{ privilege: 'view', supportsLimit: false }],
            },
            {
                functionId: '1011',
                functionCode: 'manage.legalentities',
                resource: 'Legal Entity',
                name: 'Manage Legal Entities',
                privileges: [
                    { privilege: 'create', supportsLimit: false },
                    { privilege: 'edit', supportsLimit: false },
                    { privilege: 'delete', supportsLimit: false },
                    { privilege: 'approve', supportsLimit: false },
                    { privilege: 'view', supportsLimit: false },
                ],
            },
        ];
        var serviceAgreement = {
            id: 'a1198a205a404eb7b47fa553db920429',
            name: 'Online Banking Service Agreement',
            description: 'Service Agreement between Online Banking and Backbase',
            isMaster: false,
            creatorLegalEntity: 'a1198a205a404eb7b47fa553db920429',
            status: 'ENABLED',
        };
        var participants = [
            {
                id: 'a1198a20-5a40-4eb7-b47f-a553db958963',
                externalId: 'KPMG',
                name: 'KPMG',
                sharingUsers: true,
                sharingAccounts: false,
            },
            {
                id: 'a1198a20-5a40-4eb7-b47f-a553db920429',
                externalId: 'Backbase',
                name: 'Backbase',
                sharingUsers: false,
                sharingAccounts: true,
            },
        ];
        var serviceAgreementWithParticipants = {
            serviceAgreement: serviceAgreement,
            participants: participants,
        };
        var productSummaryMockResponse = [
            {
                id: 'e6659eea893c4da48f9b7fd425de4677',
                name: 'YOUTH SAVINGS ACCOUNT',
                bankAlias: 'YOUTH SAVINGS',
                bookedBalance: 33434.0,
                availableBalance: 3423.0,
                creditLimit: 100.0,
                IBAN: 'GB79BARC20040432885594',
                BBAN: '30041010050500013L01234',
                currency: 'USD',
                externalTransferAllowed: true,
                urgentTransferAllowed: false,
                accruedInterest: 1000.0,
                number: '0000',
                principalAmount: 100.0,
                currentInvestmentValue: 100.0,
                legalEntityIds: ['8a48e4116e11f5b6016e224929450218'],
                productId: '8a48e7546e11f733016e22493e3f4024',
                productNumber: '10-23/2168-9601',
                productKindName: 'Savings Account',
                productTypeName: 'Savings Account',
                BIC: 'COBADEFF',
                bankBranchCode: '0260-0959-3',
                visible: true,
                accountOpeningDate: '2017-05-12T00:00:00.000+0000',
                accountInterestRate: 11.0,
                valueDateBalance: 1000.0,
                creditLimitUsage: 2000.0,
                creditLimitInterestRate: 3.5,
                creditLimitExpiryDate: '2017-10-10T00:00:00.000+0000',
                startDate: '2017-12-12T00:00:00.000+0000',
                termUnit: 'D',
                termNumber: 12,
                interestPaymentFrequencyUnit: 'M',
                interestPaymentFrequencyNumber: 3333,
                maturityDate: '2019-07-07T00:00:00.000+0000',
                maturityAmount: 4000.0,
                autoRenewalIndicator: true,
                interestSettlementAccount: '30041010050500013L01234',
                outstandingPrincipalAmount: 9412.0,
                monthlyInstalmentAmount: 23.23,
                amountInArrear: 11.2,
                minimumRequiredBalance: 500.0,
                creditCardAccountNumber: '30569309025904',
                validThru: '2019-09-09T00:00:00.000+0000',
                applicableInterestRate: 333.1,
                remainingCredit: 4500.0,
                outstandingPayment: 2000.2,
                minimumPayment: 200.6,
                minimumPaymentDueDate: '2017-11-04T00:00:00.000+0000',
                totalInvestmentValue: 1000.0,
                debitCards: [
                    { number: '2', expiryDate: '2017-11-11' },
                    { number: '1', expiryDate: '2016-12-12' },
                ],
                postCode: '20',
                accountHolderCountry: 'MK',
                creditAccount: true,
                debitAccount: false,
                lastUpdateDate: '2018-11-11T00:00:00.000+0000',
                product: {
                    externalId: '2',
                    externalTypeId: 'Savings Account Type',
                    typeName: 'Savings Account',
                    productKind: { id: 2, externalKindId: 'kind2', kindName: 'Savings Account', kindUri: 'savings-account' },
                },
            },
            {
                id: '8eb58b1d048d4112a2f7591d465c3f14',
                name: 'YOUTH DEPOSIT ACCOUNT',
                bankAlias: 'YOUTH DEPOSIT',
                bookedBalance: 33434.0,
                availableBalance: 3423.0,
                creditLimit: 100.0,
                IBAN: 'GB70BARC20040149989815',
                BBAN: '30041010050500013L01234',
                currency: 'USD',
                externalTransferAllowed: true,
                urgentTransferAllowed: false,
                accruedInterest: 1000.0,
                number: '0000',
                principalAmount: 100.0,
                currentInvestmentValue: 100.0,
                legalEntityIds: ['8a48e4116e11f5b6016e224929450218'],
                productId: '8a48e7546e11f733016e224941ff4028',
                productNumber: '10-23/2168-9601',
                productKindName: 'Term Deposit',
                productTypeName: 'One Year Deposit',
                BIC: 'COBADEFF',
                bankBranchCode: '0260-0959-3',
                visible: true,
                accountOpeningDate: '2017-05-12T00:00:00.000+0000',
                accountInterestRate: 11.0,
                valueDateBalance: 1000.0,
                creditLimitUsage: 2000.0,
                creditLimitInterestRate: 3.5,
                creditLimitExpiryDate: '2017-10-10T00:00:00.000+0000',
                startDate: '2017-12-12T00:00:00.000+0000',
                termUnit: 'D',
                termNumber: 12,
                interestPaymentFrequencyUnit: 'M',
                interestPaymentFrequencyNumber: 3333,
                maturityDate: '2019-07-07T00:00:00.000+0000',
                maturityAmount: 4000.0,
                autoRenewalIndicator: true,
                interestSettlementAccount: '30041010050500013L01234',
                outstandingPrincipalAmount: 9412.0,
                monthlyInstalmentAmount: 23.23,
                amountInArrear: 11.2,
                minimumRequiredBalance: 500.0,
                creditCardAccountNumber: '30569309025904',
                validThru: '2019-09-09T00:00:00.000+0000',
                applicableInterestRate: 333.1,
                remainingCredit: 4500.0,
                outstandingPayment: 2000.2,
                minimumPayment: 200.6,
                minimumPaymentDueDate: '2017-11-04T00:00:00.000+0000',
                totalInvestmentValue: 1000.0,
                debitCards: [
                    { number: '2', expiryDate: '2017-11-11' },
                    { number: '1', expiryDate: '2016-12-12' },
                ],
                postCode: '20',
                accountHolderCountry: 'MK',
                creditAccount: true,
                debitAccount: false,
                lastUpdateDate: '2018-11-11T00:00:00.000+0000',
                product: {
                    externalId: '6',
                    externalTypeId: 'Term Deposit Type',
                    typeName: 'One Year Deposit',
                    productKind: { id: 6, externalKindId: 'kind6', kindName: 'Term Deposit', kindUri: 'term-deposit' },
                },
            },
        ];

        var WidgetProperties = {
            PAGE_SIZE: 'pageSize',
            MAV_NAV_PAGES: 'maxNavPages',
            PAGINATION_TYPE: 'paginationType',
        };
        exports.AccessDataGroupTypes = void 0;
        (function (AccessDataGroupTypes) {
            AccessDataGroupTypes["ARRANGEMENTS"] = "ARRANGEMENTS";
            AccessDataGroupTypes["CONTACTS"] = "CONTACTS";
        })(exports.AccessDataGroupTypes || (exports.AccessDataGroupTypes = {}));
        exports.ApprovalLevelStatus = void 0;
        (function (ApprovalLevelStatus) {
            ApprovalLevelStatus[ApprovalLevelStatus["EMPTY"] = 0] = "EMPTY";
            ApprovalLevelStatus[ApprovalLevelStatus["ERROR"] = 1] = "ERROR";
        })(exports.ApprovalLevelStatus || (exports.ApprovalLevelStatus = {}));

        var UserPermissionsService = /** @class */ (function () {
            function UserPermissionsService(http) {
                this.http = http;
                /**
                 * Current user permissions
                 */
                this.userPermissions$ = this.getUserPermissions().pipe(operators.shareReplay(1, 1000));
                /**
                 * Current user Limits permissions
                 */
                this.limitsPermissions$ = this.getPermissions('Limits', 'Manage Limits');
                /**
                 * Payee group permissions
                 */
                this.payeeGroupPermissions$ = this.getPermissions('Entitlements', 'Manage Data Groups');
                /**
                 * Current user Shadow Limits permissions
                 */
                this.shadowLimitsPermissions$ = this.getPermissions('Limits', 'Manage Shadow Limits');
                /**
                 * Wizard permissions
                 */
                this.entitlementsWizardPermissions$ = this.getPermissions('Entitlements', 'Quick User Setup');
            }
            /**
             * Return permissions based on provided resource and function names
             * @param resource: string - resource name
             * @param functionName: string - function name
             */
            UserPermissionsService.prototype.getPermissions = function (resource, functionName) {
                return this.userPermissions$.pipe(
                // @ts-ignore
                operators.map(function (data) {
                    // NOTE: Search key hardcoded by the purpose
                    var limitsPerm = data.find(function (perm) { return perm.resource === resource && perm.function === functionName; });
                    return limitsPerm || undefined;
                }), operators.map(function (perm) { return (perm && perm.permissions) || {}; }), operators.shareReplay(1));
            };
            /**
             * Return PermissionsSummary request stream
             */
            UserPermissionsService.prototype.getUserPermissions = function () {
                return this.http.getUserPermissionsSummary();
            };
            return UserPermissionsService;
        }());
        /** @nocollapse */ UserPermissionsService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: UserPermissionsService, deps: [{ token: i3__namespace.UsersHttpService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
        /** @nocollapse */ UserPermissionsService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: UserPermissionsService });
        i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: UserPermissionsService, decorators: [{
                    type: i0.Injectable
                }], ctorParameters: function () { return [{ type: i3__namespace.UsersHttpService }]; } });

        var LimitAccessService = /** @class */ (function () {
            function LimitAccessService(userPermissionsService) {
                this.userPermissionsService = userPermissionsService;
            }
            /**
             * Current user limit access based on CXP property and user permission
             */
            LimitAccessService.prototype.limitAccess = function (enableLimit, enableShadowLimit) {
                if (enableLimit) {
                    return rxjs.combineLatest([
                        this.userPermissionsService.shadowLimitsPermissions$,
                        this.userPermissionsService.limitsPermissions$,
                    ]).pipe(operators.map(function (_a) {
                        var _b = __read(_a, 2), shadowLimitsPermissions = _b[0], limitsPermissions = _b[1];
                        return {
                            regularLimit: limitsPermissions,
                            shadowLimit: enableShadowLimit ? shadowLimitsPermissions : {},
                        };
                    }), operators.shareReplay(1));
                }
                else {
                    return rxjs.of({ regularLimit: {}, shadowLimit: {} });
                }
            };
            return LimitAccessService;
        }());
        /** @nocollapse */ LimitAccessService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: LimitAccessService, deps: [{ token: UserPermissionsService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
        /** @nocollapse */ LimitAccessService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: LimitAccessService });
        i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: LimitAccessService, decorators: [{
                    type: i0.Injectable
                }], ctorParameters: function () { return [{ type: UserPermissionsService }]; } });

        var uiModules = [
            i1$2.ModalModule,
            i2$1.AmountModule,
            i4.HeaderModule,
            i3$1.IconModule,
            i7$1.ButtonModule,
            i7.DropdownSingleSelectModule,
            i6.EllipsisModule,
            i2$2.AlertModule,
            i8$1.KeyboardClickModule,
            i6$1.TooltipModule,
            i8.LoadingIndicatorModule,
            i6$2.CurrencyInputModule,
            i8$2.LoadButtonModule,
            i7$2.InputValidationMessageModule,
        ];
        var services = [CurrencyService, LimitsService];
        var components = [
            ManageLimitsModalComponent,
            ManageLimitsModalCustomizableDirective,
            ManageLimitsModalViewBodyComponent,
            ManageLimitsModalViewBodyCustomizableDirective,
            LimitBoundItemComponent,
            LimitBoundItemCustomizableDirective,
            ManageLimitsModalHeaderComponent,
            ManageLimitsModalHeaderCustomizableDirective,
            EditLimitComponent,
            EditLimitCustomizableDirective,
        ];
        var ManageLimitsModalModule = /** @class */ (function () {
            function ManageLimitsModalModule() {
            }
            return ManageLimitsModalModule;
        }());
        /** @nocollapse */ ManageLimitsModalModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManageLimitsModalModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
        /** @nocollapse */ ManageLimitsModalModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManageLimitsModalModule, declarations: [ManageLimitsModalComponent,
                ManageLimitsModalCustomizableDirective,
                ManageLimitsModalViewBodyComponent,
                ManageLimitsModalViewBodyCustomizableDirective,
                LimitBoundItemComponent,
                LimitBoundItemCustomizableDirective,
                ManageLimitsModalHeaderComponent,
                ManageLimitsModalHeaderCustomizableDirective,
                EditLimitComponent,
                EditLimitCustomizableDirective], imports: [i9.CommonModule, i1$1.ReactiveFormsModule, i1$2.ModalModule,
                i2$1.AmountModule,
                i4.HeaderModule,
                i3$1.IconModule,
                i7$1.ButtonModule,
                i7.DropdownSingleSelectModule,
                i6.EllipsisModule,
                i2$2.AlertModule,
                i8$1.KeyboardClickModule,
                i6$1.TooltipModule,
                i8.LoadingIndicatorModule,
                i6$2.CurrencyInputModule,
                i8$2.LoadButtonModule,
                i7$2.InputValidationMessageModule], exports: [i1$1.ReactiveFormsModule, ManageLimitsModalComponent,
                ManageLimitsModalCustomizableDirective,
                ManageLimitsModalViewBodyComponent,
                ManageLimitsModalViewBodyCustomizableDirective,
                LimitBoundItemComponent,
                LimitBoundItemCustomizableDirective,
                ManageLimitsModalHeaderComponent,
                ManageLimitsModalHeaderCustomizableDirective,
                EditLimitComponent,
                EditLimitCustomizableDirective, i1$2.ModalModule,
                i2$1.AmountModule,
                i4.HeaderModule,
                i3$1.IconModule,
                i7$1.ButtonModule,
                i7.DropdownSingleSelectModule,
                i6.EllipsisModule,
                i2$2.AlertModule,
                i8$1.KeyboardClickModule,
                i6$1.TooltipModule,
                i8.LoadingIndicatorModule,
                i6$2.CurrencyInputModule,
                i8$2.LoadButtonModule,
                i7$2.InputValidationMessageModule] });
        /** @nocollapse */ ManageLimitsModalModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManageLimitsModalModule, providers: __spreadArray([], __read(services)), imports: [__spreadArray([i9.CommonModule, i1$1.ReactiveFormsModule], __read(uiModules)), i1$1.ReactiveFormsModule, i1$2.ModalModule,
                i2$1.AmountModule,
                i4.HeaderModule,
                i3$1.IconModule,
                i7$1.ButtonModule,
                i7.DropdownSingleSelectModule,
                i6.EllipsisModule,
                i2$2.AlertModule,
                i8$1.KeyboardClickModule,
                i6$1.TooltipModule,
                i8.LoadingIndicatorModule,
                i6$2.CurrencyInputModule,
                i8$2.LoadButtonModule,
                i7$2.InputValidationMessageModule] });
        i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ManageLimitsModalModule, decorators: [{
                    type: i0.NgModule,
                    args: [{
                            imports: __spreadArray([i9.CommonModule, i1$1.ReactiveFormsModule], __read(uiModules)),
                            declarations: __spreadArray([], __read(components)),
                            providers: __spreadArray([], __read(services)),
                            exports: __spreadArray(__spreadArray([i1$1.ReactiveFormsModule], __read(components)), __read(uiModules)),
                        }]
                }] });

        var TimePickerStringAdapter = /** @class */ (function (_super) {
            __extends(TimePickerStringAdapter, _super);
            function TimePickerStringAdapter() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            TimePickerStringAdapter.prototype.fromModel = function (value) {
                if (value) {
                    var _a = __read(value.split(':').map(function (str) { return parseInt(str, 10); }), 3), hour = _a[0], minute = _a[1], second = _a[2];
                    return { hour: hour, minute: minute, second: second };
                }
                return null;
            };
            TimePickerStringAdapter.prototype.toModel = function (time) {
                if (!time) {
                    return null;
                }
                return String(time.hour).padStart(2, '0') + ":" + String(time.minute).padStart(2, '0') + ":" + String(time.second).padStart(2, '0');
            };
            return TimePickerStringAdapter;
        }(i2$3.NgbTimeAdapter));
        /** @nocollapse */ TimePickerStringAdapter.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TimePickerStringAdapter, deps: null, target: i0__namespace.ɵɵFactoryTarget.Injectable });
        /** @nocollapse */ TimePickerStringAdapter.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TimePickerStringAdapter });
        i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TimePickerStringAdapter, decorators: [{
                    type: i0.Injectable
                }] });

        /**
         * Utility service for DOM manipulations
         */
        var DomAttributesService = /** @class */ (function () {
            function DomAttributesService() {
            }
            DomAttributesService.prototype.moveAriaAttributes = function (hostEl, childEl, renderer2) {
                var nodeMap = hostEl.attributes;
                // CUT every aria attribute from the host element and PASTE it into the specified element
                Object.keys(nodeMap)
                    .map(function (key) { return nodeMap.item(Number(key)); })
                    .filter(function (item) { return item && (item.name.startsWith('aria-') || item.name.toLowerCase() === 'arialabel'); })
                    .forEach(function (item) {
                    var attrName = item.name, attrVal = item.value;
                    attrName.toLowerCase() === 'arialabel'
                        ? renderer2.setAttribute(childEl, 'aria-label', attrVal)
                        : renderer2.setAttribute(childEl, attrName, attrVal);
                    renderer2.removeAttribute(hostEl, attrName);
                });
            };
            return DomAttributesService;
        }());
        /** @nocollapse */ DomAttributesService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DomAttributesService, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
        /** @nocollapse */ DomAttributesService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DomAttributesService, providedIn: 'root' });
        i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DomAttributesService, decorators: [{
                    type: i0.Injectable,
                    args: [{
                            providedIn: 'root',
                        }]
                }] });

        var SIZE_MEDIUM = baseClasses.defaultSize;
        var SIZE_SMALL = SIZE_MEDIUM / 2;
        var SIZE_LARGE = SIZE_MEDIUM * 2;
        var KEYWORD_SMALL = 'small';
        var KEYWORD_MEDIUM = 'medium';
        var KEYWORD_LARGE = 'large';
        /**
         * @name AccessGroupInputTimePickerComponent
         *
         * @a11y Current component provide option to pass needed accessibility
         * attributes. You need to take care of properties that are required in your case :
         *  - role
         *  - aria-activedescendant
         *  - aria-describedby
         *  - aria-expanded
         *  - aria-invalid
         *  - aria-label
         *  - aria-labelledby
         *  - aria-owns
         *
         * @description
         * Component that displays a timepicker.
         */
        var AccessGroupInputTimePickerComponent = /** @class */ (function (_super) {
            __extends(AccessGroupInputTimePickerComponent, _super);
            function AccessGroupInputTimePickerComponent(cd, domAttrService, elem, renderer2) {
                var _this = 
                // @ts-ignore
                _super.call(this, cd) || this;
                _this.cd = cd;
                _this.domAttrService = domAttrService;
                _this.elem = elem;
                _this.renderer2 = renderer2;
                /**
                 * The number of hours to add/subtract when clicking hour spinners.
                 */
                _this.hourStep = 1;
                /**
                 * Whether to display 12H or 24H mode.
                 */
                _this.clock = '24h';
                /**
                 * The number of minutes to add/subtract when clicking minute spinners.
                 */
                _this.minuteStep = 1;
                /**
                 * If true, the timepicker is readonly and can't be changed.
                 */
                _this.readonly = false;
                /**
                 * If true, it is possible to select seconds.
                 */
                _this.seconds = false;
                /**
                 * The number of seconds to add/subtract when clicking second spinners.
                 */
                _this.secondStep = 1;
                _this.cssClass = 'bb-input-timepicker';
                return _this;
            }
            Object.defineProperty(AccessGroupInputTimePickerComponent.prototype, "meridian", {
                get: function () {
                    return this.clock === '12h';
                },
                enumerable: false,
                configurable: true
            });
            AccessGroupInputTimePickerComponent.prototype.getKeywordBySize = function (size) {
                if (size <= SIZE_SMALL) {
                    return KEYWORD_SMALL;
                }
                else if (size >= SIZE_LARGE) {
                    return KEYWORD_LARGE;
                }
                else {
                    return KEYWORD_MEDIUM;
                }
            };
            AccessGroupInputTimePickerComponent.prototype.getSizeByKeyword = function (keyword) {
                var _a;
                var sizeKeywords = (_a = {},
                    _a[KEYWORD_SMALL] = SIZE_SMALL,
                    _a[KEYWORD_MEDIUM] = SIZE_MEDIUM,
                    _a[KEYWORD_LARGE] = SIZE_LARGE,
                    _a);
                return typeof keyword === 'string' && sizeKeywords.hasOwnProperty(keyword) ? sizeKeywords[keyword] : undefined;
            };
            AccessGroupInputTimePickerComponent.prototype.validate = function (control) {
                var value = control.value;
                if (!value) {
                    return null;
                }
                if (this.min && this.max) {
                    var valid = this.min <= value && value <= this.max;
                    return valid ? null : { minMaxTime: true };
                }
                else if (this.min) {
                    return this.min <= value ? null : { minTime: true };
                }
                else if (this.max) {
                    return value <= this.max ? null : { maxTime: true };
                }
                return null;
            };
            AccessGroupInputTimePickerComponent.prototype.ngAfterViewInit = function () {
                if (!this.ariaLabel && this.inputEl) {
                    this.domAttrService.moveAriaAttributes(this.elem.nativeElement, this.inputEl.nativeElement, this.renderer2);
                }
            };
            return AccessGroupInputTimePickerComponent;
        }(baseClasses.InputBaseComponent));
        /** @nocollapse */ AccessGroupInputTimePickerComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccessGroupInputTimePickerComponent, deps: [{ token: i0__namespace.ChangeDetectorRef }, { token: DomAttributesService }, { token: i0__namespace.ElementRef }, { token: i0__namespace.Renderer2 }], target: i0__namespace.ɵɵFactoryTarget.Component });
        /** @nocollapse */ AccessGroupInputTimePickerComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AccessGroupInputTimePickerComponent, selector: "bb-input-timepicker-ui, bb-accessgroup-input-timepicker-ui", inputs: { hourStep: "hourStep", clock: "clock", minuteStep: "minuteStep", readonly: "readonly", seconds: "seconds", secondStep: "secondStep", min: "min", max: "max", autocomplete: "autocomplete" }, host: { properties: { "attr.class": "this.cssClass" } }, providers: [
                {
                    provide: i1$1.NG_VALUE_ACCESSOR,
                    useExisting: i0.forwardRef((function () { return AccessGroupInputTimePickerComponent; })),
                    multi: true,
                },
                {
                    provide: i1$1.NG_VALIDATORS,
                    useExisting: i0.forwardRef((function () { return AccessGroupInputTimePickerComponent; })),
                    multi: true,
                },
                { provide: i2$3.NgbTimeAdapter, useClass: TimePickerStringAdapter },
            ], viewQueries: [{ propertyName: "inputEl", first: true, predicate: ["timepicker"], descendants: true }], usesInheritance: true, ngImport: i0__namespace, template: "<ngb-timepicker\n  #timepicker\n  id=\"{{ id }}\"\n  class=\"bb-input-timepicker\"\n  [attr.aria-labelledby]=\"ariaLabelledby\"\n  [attr.aria-describedby]=\"ariaDescribedby\"\n  [attr.aria-expanded]=\"ariaExpanded\"\n  [attr.role]=\"role\"\n  [attr.aria-invalid]=\"ariaInvalid\"\n  [attr.aria-owns]=\"ariaOwns\"\n  [readonlyInputs]=\"readonly\"\n  [disabled]=\"disabled\"\n  [spinners]=\"false\"\n  [hourStep]=\"hourStep\"\n  [meridian]=\"meridian\"\n  [minuteStep]=\"minuteStep\"\n  [seconds]=\"seconds\"\n  [secondStep]=\"secondStep\"\n  [size]=\"getKeywordBySize(size)\"\n  [attr.aria-label]=\"(!label && ariaLabel) || null\"\n  [ngModel]=\"value\"\n  (ngModelChange)=\"onValueChange($event)\"\n  data-role=\"timepicker\"\n  [attr.autcomplete]=\"autocomplete\">\n</ngb-timepicker>\n", components: [{ type: i2__namespace$3.NgbTimepicker, selector: "ngb-timepicker", inputs: ["meridian", "spinners", "seconds", "hourStep", "minuteStep", "secondStep", "readonlyInputs", "size"] }], directives: [{ type: i1__namespace$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }] });
        i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccessGroupInputTimePickerComponent, decorators: [{
                    type: i0.Component,
                    args: [{
                            selector: 'bb-input-timepicker-ui, bb-accessgroup-input-timepicker-ui',
                            templateUrl: './input-time-picker.component.html',
                            providers: [
                                {
                                    provide: i1$1.NG_VALUE_ACCESSOR,
                                    useExisting: i0.forwardRef((function () { return AccessGroupInputTimePickerComponent; })),
                                    multi: true,
                                },
                                {
                                    provide: i1$1.NG_VALIDATORS,
                                    useExisting: i0.forwardRef((function () { return AccessGroupInputTimePickerComponent; })),
                                    multi: true,
                                },
                                { provide: i2$3.NgbTimeAdapter, useClass: TimePickerStringAdapter },
                            ],
                        }]
                }], ctorParameters: function () { return [{ type: i0__namespace.ChangeDetectorRef }, { type: DomAttributesService }, { type: i0__namespace.ElementRef }, { type: i0__namespace.Renderer2 }]; }, propDecorators: { hourStep: [{
                        type: i0.Input
                    }], clock: [{
                        type: i0.Input
                    }], minuteStep: [{
                        type: i0.Input
                    }], readonly: [{
                        type: i0.Input
                    }], seconds: [{
                        type: i0.Input
                    }], secondStep: [{
                        type: i0.Input
                    }], min: [{
                        type: i0.Input
                    }], max: [{
                        type: i0.Input
                    }], autocomplete: [{
                        type: i0.Input
                    }], cssClass: [{
                        type: i0.HostBinding,
                        args: ['attr.class']
                    }], inputEl: [{
                        type: i0.ViewChild,
                        args: ['timepicker']
                    }] } });

        var AccessGroupInputTimePickerModule = /** @class */ (function () {
            function AccessGroupInputTimePickerModule() {
            }
            return AccessGroupInputTimePickerModule;
        }());
        /** @nocollapse */ AccessGroupInputTimePickerModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccessGroupInputTimePickerModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
        /** @nocollapse */ AccessGroupInputTimePickerModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccessGroupInputTimePickerModule, declarations: [AccessGroupInputTimePickerComponent], imports: [i9.CommonModule, i2$3.NgbTimepickerModule, i1$1.FormsModule, i1$1.ReactiveFormsModule], exports: [AccessGroupInputTimePickerComponent] });
        /** @nocollapse */ AccessGroupInputTimePickerModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccessGroupInputTimePickerModule, providers: [TimePickerStringAdapter], imports: [[i9.CommonModule, i2$3.NgbTimepickerModule, i1$1.FormsModule, i1$1.ReactiveFormsModule]] });
        i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccessGroupInputTimePickerModule, decorators: [{
                    type: i0.NgModule,
                    args: [{
                            imports: [i9.CommonModule, i2$3.NgbTimepickerModule, i1$1.FormsModule, i1$1.ReactiveFormsModule],
                            declarations: [AccessGroupInputTimePickerComponent],
                            exports: [AccessGroupInputTimePickerComponent],
                            providers: [TimePickerStringAdapter],
                        }]
                }] });

        var UserPermissionsDataGroupDetailsService = /** @class */ (function () {
            function UserPermissionsDataGroupDetailsService(contactService, itemsService, serviceAgreementHttpService, serviceAgreementsHttpService) {
                var _this = this;
                this.contactService = contactService;
                this.itemsService = itemsService;
                this.serviceAgreementHttpService = serviceAgreementHttpService;
                this.serviceAgreementsHttpService = serviceAgreementsHttpService;
                /**
                 * Service agreement from context stream
                 */
                this.serviceAgreementFromContext = this.serviceAgreementHttpService
                    .getServiceAgreementContext()
                    .pipe(operators.switchMap(function (serviceAgreement) { return _this.getServiceAgreementParticipants(serviceAgreement); }));
            }
            UserPermissionsDataGroupDetailsService.prototype.getServiceAgreementParticipants = function (serviceAgreement) {
                return this.serviceAgreementsHttpService.getServiceAgreementParticipants({ id: serviceAgreement.id }).pipe(operators.map(function (participants) { return ({
                    serviceAgreement: serviceAgreement,
                    participants: participants,
                }); }));
            };
            /**
             * Send request to retrieve service agreement info
             * @param serviceAgreementId
             */
            UserPermissionsDataGroupDetailsService.prototype.getServiceAgreement = function (serviceAgreementId) {
                var _this = this;
                return this.serviceAgreementHttpService.getServiceAgreementItem({ serviceAgreementId: serviceAgreementId }).pipe(operators.switchMap(function (serviceAgreement) { return _this.getServiceAgreementParticipants(serviceAgreement); }), operators.catchError(function () { return rxjs.EMPTY; }));
            };
            UserPermissionsDataGroupDetailsService.prototype.getPayeeGroupContacts = function (contactIds, params) {
                return this.contactService
                    .postContactsFilter(Object.assign(Object.assign({}, params), { contactsPostFilterRequestBody: {
                        contactIds: contactIds,
                    } }), 'response')
                    .pipe(operators.map(function (resp) {
                    return {
                        data: resp.body,
                        totalCount: Number(resp.headers.get('x-total-count')),
                    };
                }));
            };
            UserPermissionsDataGroupDetailsService.prototype.getAccountGroupItems = function (_a) {
                var items = _a.items, from = _a.from, size = _a.size, searchTerm = _a.searchTerm, legalEntityIds = _a.legalEntityIds;
                return this.itemsService.postFilterProductSummaries({
                    productSummaryFilterParams: Object.assign({ legalEntityIds: legalEntityIds, arrangementIds: items, from: from, size: size }, (searchTerm && { searchTerm: searchTerm })),
                });
            };
            return UserPermissionsDataGroupDetailsService;
        }());
        /** @nocollapse */ UserPermissionsDataGroupDetailsService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: UserPermissionsDataGroupDetailsService, deps: [{ token: i1__namespace$3.ContactsHttpService }, { token: i2__namespace$4.ProductSummaryHttpService }, { token: i3__namespace.ServiceAgreementHttpService }, { token: i3__namespace.ServiceAgreementsHttpService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
        /** @nocollapse */ UserPermissionsDataGroupDetailsService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: UserPermissionsDataGroupDetailsService });
        i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: UserPermissionsDataGroupDetailsService, decorators: [{
                    type: i0.Injectable
                }], ctorParameters: function () { return [{ type: i1__namespace$3.ContactsHttpService }, { type: i2__namespace$4.ProductSummaryHttpService }, { type: i3__namespace.ServiceAgreementHttpService }, { type: i3__namespace.ServiceAgreementsHttpService }]; } });

        /**
         * Latest Job Role ID that was opened for editing
         */
        var EDIT_JOB_ROLE_ID = 'ACCESS_GROUP_EDIT_JOB_ROLE_ID';

        /**
         * Return ACCESS_GROUP_EDIT_JOB_ROLE_ID from session storage or null if such doesn't exist
         */
        function getPrevSelectedJobRoleId() {
            return sessionStorage.getItem(EDIT_JOB_ROLE_ID) || null;
        }
        /**
         * Check if ACCESS_GROUP_EDIT_JOB_ROLE_ID has value in session storage and within provided function
         * groups exist at exactly one with same ID
         * @param functionGroups - function groups (list of job roles)
         */
        function hasPrevSelectedJobRole(functionGroups) {
            return Boolean(getPrevSelectedJobRoleId() && getPrevSelectedJobRole(functionGroups));
        }
        /**
         * Find and return function group within provided function groups that match their ID with ACCESS_GROUP_EDIT_JOB_ROLE_ID session storage value or return undefined
         * @param functionGroups - function groups (list of job roles)
         */
        function getPrevSelectedJobRole(functionGroups) {
            var prevFunctionGroupId = getPrevSelectedJobRoleId();
            return functionGroups.find(function (_a) {
                var id = _a.id;
                return prevFunctionGroupId === id;
            });
        }

        var CREATE_NEW_LIMIT_RESPONSE = { uuid: 'testID' };
        var UPDATE_LIMIT_RESPONSE = {
            approvalId: 'testApprovalID',
            uuid: 'testApprovalUUID',
            entities: [],
        };
        var LIMITS_PERIODS = [
            { name: 'DAILY' },
            { name: 'WEEKLY' },
            { name: 'biweekly' },
            { name: 'MONTHLY' },
            { name: 'QUARTERLY' },
            { name: 'YEARLY' },
        ];
        var LIMIT_KEY = {
            'user-BBID': 'user-test-uuid',
            lookupKeys: [
                {
                    eref: 'c2185f7d-a1e8-4f97-990d-cb1cfd0d8f53',
                    etype: 'SA',
                },
            ],
        };
        var REGULAR_PERIODIC_BOUNDS = [undefined, 10, 50, 100, 400, 600, undefined];
        var SHADOW_PERIODIC_BOUNDS = [undefined, 100.0, 200.0, 300, undefined, 600.0, 1600];
        var CONSUMPTIONS_REGULAR = [undefined, 1.0, 20.0, 30, 40, 60.0, undefined];
        var CONSUMPTIONS_SHADOW = [undefined, 500.0, 100.0, 150, undefined, 330.0, 1000];
        var CURRENCY = 'EUR';
        var LIMITS_UUID = { regular: '1234-5678-9101-1121', shadow: '4444-5678-9101-1121' };
        var LIMITS_BOUNDS = __spreadArray([
            {
                period: TRANSACTIONAL_LIMITS_BOUNDS,
                custom: false,
                regular: {
                    amount: REGULAR_PERIODIC_BOUNDS[0],
                },
                shadow: {
                    amount: SHADOW_PERIODIC_BOUNDS[0],
                },
            }
        ], __read(LIMITS_PERIODS.map(function (item, index) {
            return {
                period: item.name.toLocaleLowerCase(),
                custom: index === 2,
                regular: {
                    amount: REGULAR_PERIODIC_BOUNDS[index + 1],
                },
                shadow: {
                    amount: SHADOW_PERIODIC_BOUNDS[index + 1],
                },
                regularConsumption: CONSUMPTIONS_REGULAR[index + 1],
                shadowConsumption: CONSUMPTIONS_SHADOW[index + 1],
            };
        })));
        var LIMITS_WITH_CONSUMPTION = [
            {
                limit: {
                    alias: '',
                    uuid: LIMITS_UUID.regular,
                    'user-BBID': LIMIT_KEY['user-BBID'],
                    entities: LIMIT_KEY.lookupKeys,
                    currency: CURRENCY,
                    shadow: false,
                },
                consumptions: {
                    daily: CONSUMPTIONS_REGULAR[1],
                    weekly: CONSUMPTIONS_REGULAR[2],
                    monthly: CONSUMPTIONS_REGULAR[4],
                    quarterly: CONSUMPTIONS_REGULAR[5],
                    customPeriods: [{ period: 'biweekly', amount: CONSUMPTIONS_REGULAR[3] }],
                },
                checkTime: '2017-01-31T12:12:12Z',
            },
            {
                limit: {
                    alias: '',
                    uuid: LIMITS_UUID.shadow,
                    'user-BBID': LIMIT_KEY['user-BBID'],
                    entities: LIMIT_KEY.lookupKeys,
                    currency: CURRENCY,
                    shadow: true,
                },
                consumptions: {
                    daily: CONSUMPTIONS_SHADOW[1],
                    weekly: CONSUMPTIONS_SHADOW[2],
                    quarterly: CONSUMPTIONS_SHADOW[5],
                    yearly: CONSUMPTIONS_SHADOW[6],
                    customPeriods: [{ period: 'biweekly', amount: CONSUMPTIONS_SHADOW[3] }],
                },
                checkTime: '2017-01-31T12:12:12Z',
            },
        ];
        // made it here for sonar check
        LIMITS_WITH_CONSUMPTION[0].limit[PERIODIC_LIMITS_BOUNDS] = {
            daily: REGULAR_PERIODIC_BOUNDS[1],
            weekly: REGULAR_PERIODIC_BOUNDS[2],
            monthly: REGULAR_PERIODIC_BOUNDS[4],
            quarterly: REGULAR_PERIODIC_BOUNDS[5],
            customPeriods: [{ period: 'biweekly', amount: REGULAR_PERIODIC_BOUNDS[3] }],
        };
        LIMITS_WITH_CONSUMPTION[1].limit[PERIODIC_LIMITS_BOUNDS] = {
            daily: SHADOW_PERIODIC_BOUNDS[1],
            weekly: SHADOW_PERIODIC_BOUNDS[2],
            quarterly: SHADOW_PERIODIC_BOUNDS[5],
            yearly: SHADOW_PERIODIC_BOUNDS[6],
            customPeriods: [{ period: 'biweekly', amount: SHADOW_PERIODIC_BOUNDS[3] }],
        };
        var LIMITS = [
            {
                alias: '',
                uuid: LIMITS_UUID.regular,
                'user-BBID': LIMIT_KEY['user-BBID'],
                entities: LIMIT_KEY.lookupKeys,
                currency: CURRENCY,
                'periodic-limits-bounds': {
                    daily: REGULAR_PERIODIC_BOUNDS[1],
                    weekly: REGULAR_PERIODIC_BOUNDS[2],
                    monthly: REGULAR_PERIODIC_BOUNDS[4],
                    quarterly: REGULAR_PERIODIC_BOUNDS[5],
                    customPeriods: [{ period: 'biweekly', amount: REGULAR_PERIODIC_BOUNDS[3] }],
                },
                shadow: false,
            },
        ];

        /**
         * Business Function Name
         * functionCode - Name
         */
        var businessFunctionNameTranslations = {
            'transactions': $localize(templateObject_1 || (templateObject_1 = __makeTemplateObject([":Transactions@@business.function.transactions:Transactions"], [":Transactions@@business.function.transactions:Transactions"]))),
            'entitlements': $localize(templateObject_2 || (templateObject_2 = __makeTemplateObject([":Entitlements@@business.function.entitlements:Entitlements"], [":Entitlements@@business.function.entitlements:Entitlements"]))),
            'contacts': $localize(templateObject_3 || (templateObject_3 = __makeTemplateObject([":Contacts@@business.function.contacts:Contacts"], [":Contacts@@business.function.contacts:Contacts"]))),
            'product.summary': $localize(templateObject_4 || (templateObject_4 = __makeTemplateObject([":Product Summary@@business.function.product.summary:Product Summary"], [":Product Summary@@business.function.product.summary:Product Summary"]))),
            'assign.users': $localize(templateObject_5 || (templateObject_5 = __makeTemplateObject([":Manage Users in Service Agreement@@business.function.assign.users:Manage Users in Service Agreement"], [":Manage Users in Service Agreement@@business.function.assign.users:Manage Users in Service Agreement"]))),
            'assign.permissions': $localize(templateObject_6 || (templateObject_6 = __makeTemplateObject([":Manage Permissions@@business.function.assign.permissions:Manage Permissions"], [":Manage Permissions@@business.function.assign.permissions:Manage Permissions"]))),
            'payments.sepa': $localize(templateObject_7 || (templateObject_7 = __makeTemplateObject([":SEPA CT@@business.function.payments.sepa:SEPA CT"], [":SEPA CT@@business.function.payments.sepa:SEPA CT"]))),
            'manage.users': $localize(templateObject_8 || (templateObject_8 = __makeTemplateObject([":Manage Users@@business.function.manage.users:Manage Users"], [":Manage Users@@business.function.manage.users:Manage Users"]))),
            'manage.legalentities': $localize(templateObject_9 || (templateObject_9 = __makeTemplateObject([":Manage Legal Entities@@business.function.manage.legalentities:Manage Legal Entities"], [":Manage Legal Entities@@business.function.manage.legalentities:Manage Legal Entities"]))),
            'manage.limits': $localize(templateObject_10 || (templateObject_10 = __makeTemplateObject([":Manage Limits@@business.function.manage.limits:Manage Limits"], [":Manage Limits@@business.function.manage.limits:Manage Limits"]))),
            'audit': $localize(templateObject_11 || (templateObject_11 = __makeTemplateObject([":Audit@@business.function.audit:Audit"], [":Audit@@business.function.audit:Audit"]))),
            'manage.shadow.limits': $localize(templateObject_12 || (templateObject_12 = __makeTemplateObject([":Manage Shadow Limits@@business.function.manage.shadow.limits:Manage Shadow Limits"], [":Manage Shadow Limits@@business.function.manage.shadow.limits:Manage Shadow Limits"]))),
            'intra.company.payments': $localize(templateObject_13 || (templateObject_13 = __makeTemplateObject([":Intra Company Payments@@business.function.intra.company.payments:Intra Company Payments"], [":Intra Company Payments@@business.function.intra.company.payments:Intra Company Payments"]))),
            'manage.statements': $localize(templateObject_14 || (templateObject_14 = __makeTemplateObject([":Manage Statements@@business.function.manage.statements:Manage Statements"], [":Manage Statements@@business.function.manage.statements:Manage Statements"]))),
            'us.domestic.wire': $localize(templateObject_15 || (templateObject_15 = __makeTemplateObject([":US Domestic Wire@@business.function.us.domestic.wire:US Domestic Wire"], [":US Domestic Wire@@business.function.us.domestic.wire:US Domestic Wire"]))),
            'us.foreign.wire': $localize(templateObject_16 || (templateObject_16 = __makeTemplateObject([":US Foreign Wire@@business.function.us.foreign.wire:US Foreign Wire"], [":US Foreign Wire@@business.function.us.foreign.wire:US Foreign Wire"]))),
            'manage.data.groups': $localize(templateObject_17 || (templateObject_17 = __makeTemplateObject([":Manage Account and Payee Groups@@business.function.manage.data.groups:Manage Account and Payee Groups"], [":Manage Account and Payee Groups@@business.function.manage.data.groups:Manage Account and Payee Groups"]))),
            'manage.function.groups': $localize(templateObject_18 || (templateObject_18 = __makeTemplateObject([":Manage Job Roles@@business.function.manage.function.groups:Manage Job Roles"], [":Manage Job Roles@@business.function.manage.function.groups:Manage Job Roles"]))),
            'us.billpay.payments': $localize(templateObject_19 || (templateObject_19 = __makeTemplateObject([":US Billpay Payments@@business.function.us.billpay.payments:US Billpay Payments"], [":US Billpay Payments@@business.function.us.billpay.payments:US Billpay Payments"]))),
            'us.billpay.payees': $localize(templateObject_20 || (templateObject_20 = __makeTemplateObject([":US Billpay Payees@@business.function.us.billpay.payees:US Billpay Payees"], [":US Billpay Payees@@business.function.us.billpay.payees:US Billpay Payees"]))),
            'us.billpay.accounts': $localize(templateObject_21 || (templateObject_21 = __makeTemplateObject([":US Billpay Accounts@@business.function.us.billpay.accounts:US Billpay Accounts"], [":US Billpay Accounts@@business.function.us.billpay.accounts:US Billpay Accounts"]))),
            'us.billpay.payees.search': $localize(templateObject_22 || (templateObject_22 = __makeTemplateObject([":US Billpay Payees-Search@@business.function.us.billpay.payees.search:US Billpay Payees-Search"], [":US Billpay Payees-Search@@business.function.us.billpay.payees.search:US Billpay Payees-Search"]))),
            'us.billpay.payees.summary': $localize(templateObject_23 || (templateObject_23 = __makeTemplateObject([":US Billpay Payees-Summary@@business.function.us.billpay.payees.summary:US Billpay Payees-Summary"], [":US Billpay Payees-Summary@@business.function.us.billpay.payees.summary:US Billpay Payees-Summary"]))),
            'us.billpay.enrolment': $localize(templateObject_24 || (templateObject_24 = __makeTemplateObject([":US Billpay Enrolment@@business.function.us.billpay.enrolment:US Billpay Enrolment"], [":US Billpay Enrolment@@business.function.us.billpay.enrolment:US Billpay Enrolment"]))),
            'access.actions.history': $localize(templateObject_25 || (templateObject_25 = __makeTemplateObject([":Access Actions History@@business.function.access.actions.history:Access Actions History"], [":Access Actions History@@business.function.access.actions.history:Access Actions History"]))),
            'manage.service.agreements': $localize(templateObject_26 || (templateObject_26 = __makeTemplateObject([":Manage Service Agreements@@business.function.manage.service.agreements:Manage Service Agreements"], [":Manage Service Agreements@@business.function.manage.service.agreements:Manage Service Agreements"]))),
            'manage.notifications': $localize(templateObject_27 || (templateObject_27 = __makeTemplateObject([":Manage Notifications@@business.function.manage.notifications:Manage Notifications"], [":Manage Notifications@@business.function.manage.notifications:Manage Notifications"]))),
            'manage.actions.recipes': $localize(templateObject_28 || (templateObject_28 = __makeTemplateObject([":Manage Action Recipes@@business.function.manage.actions.recipes:Manage Action Recipes"], [":Manage Action Recipes@@business.function.manage.actions.recipes:Manage Action Recipes"]))),
            'manage.topics': $localize(templateObject_29 || (templateObject_29 = __makeTemplateObject([":Manage Topics@@business.function.manage.topics:Manage Topics"], [":Manage Topics@@business.function.manage.topics:Manage Topics"]))),
            'assign.approval.policies': $localize(templateObject_30 || (templateObject_30 = __makeTemplateObject([":Assign Approval Policies@@business.function.assign.approval.policies:Assign Approval Policies"], [":Assign Approval Policies@@business.function.assign.approval.policies:Assign Approval Policies"]))),
            'manage.approval.policy.level': $localize(templateObject_31 || (templateObject_31 = __makeTemplateObject([":Manage Approval Policy and Level@@business.function.manage.approval.policy.level:Manage Approval Policy and Level"], [":Manage Approval Policy and Level@@business.function.manage.approval.policy.level:Manage Approval Policy and Level"]))),
            'manage.identities': $localize(templateObject_32 || (templateObject_32 = __makeTemplateObject([":Manage Identities@@business.function.manage.identities:Manage Identities"], [":Manage Identities@@business.function.manage.identities:Manage Identities"]))),
            'manage.user.profiles': $localize(templateObject_33 || (templateObject_33 = __makeTemplateObject([":Manage User Profiles@@business.function.manage.user.profiles:Manage User Profiles"], [":Manage User Profiles@@business.function.manage.user.profiles:Manage User Profiles"]))),
            'support.access.payments': $localize(templateObject_34 || (templateObject_34 = __makeTemplateObject([":Support Access for Payments@@business.function.support.access.payments:Support Access for Payments"], [":Support Access for Payments@@business.function.support.access.payments:Support Access for Payments"]))),
            'batch.sepa': $localize(templateObject_35 || (templateObject_35 = __makeTemplateObject([":Batch - SEPA CT@@business.function.batch.sepa:Batch - SEPA CT"], [":Batch - SEPA CT@@business.function.batch.sepa:Batch - SEPA CT"]))),
            'manage.messages': $localize(templateObject_36 || (templateObject_36 = __makeTemplateObject([":Manage Messages@@business.function.manage.messages:Manage Messages"], [":Manage Messages@@business.function.manage.messages:Manage Messages"]))),
            'supervise.messages': $localize(templateObject_37 || (templateObject_37 = __makeTemplateObject([":Supervise Messages@@business.function.supervise.messages:Supervise Messages"], [":Supervise Messages@@business.function.supervise.messages:Supervise Messages"]))),
            'manage.global.limits': $localize(templateObject_38 || (templateObject_38 = __makeTemplateObject([":Manage Global Limits@@business.function.manage.global.limits:Manage Global Limits"], [":Manage Global Limits@@business.function.manage.global.limits:Manage Global Limits"]))),
            'ach.credit.transfer': $localize(templateObject_39 || (templateObject_39 = __makeTemplateObject([":ACH Credit Transfer@@business.function.ach.credit.transfer:ACH Credit Transfer"], [":ACH Credit Transfer@@business.function.ach.credit.transfer:ACH Credit Transfer"]))),
            'ach.credit.intc': $localize(templateObject_40 || (templateObject_40 = __makeTemplateObject([":ACH Credit - Intracompany@@business.function.ach.credit.intc:ACH Credit - Intracompany"], [":ACH Credit - Intracompany@@business.function.ach.credit.intc:ACH Credit - Intracompany"]))),
            'sepa.credit.transfer.intc': $localize(templateObject_41 || (templateObject_41 = __makeTemplateObject([":SEPA CT - Intracompany@@business.function.sepa.credit.transfer.intc:SEPA CT - Intracompany"], [":SEPA CT - Intracompany@@business.function.sepa.credit.transfer.intc:SEPA CT - Intracompany"]))),
            'us.domestic.wire.intc': $localize(templateObject_42 || (templateObject_42 = __makeTemplateObject([":US Domestic Wire - Intracompany@@business.function.us.domestic.wire.intc:US Domestic Wire - Intracompany"], [":US Domestic Wire - Intracompany@@business.function.us.domestic.wire.intc:US Domestic Wire - Intracompany"]))),
            'us.foreign.wire.intc': $localize(templateObject_43 || (templateObject_43 = __makeTemplateObject([":US Foreign Wire - Intracompany@@business.function.us.foreign.wire.intc:US Foreign Wire - Intracompany"], [":US Foreign Wire - Intracompany@@business.function.us.foreign.wire.intc:US Foreign Wire - Intracompany"]))),
            'ach.debit': $localize(templateObject_44 || (templateObject_44 = __makeTemplateObject([":ACH Debit@@business.function.ach.debit:ACH Debit"], [":ACH Debit@@business.function.ach.debit:ACH Debit"]))),
            'manage.budgets': $localize(templateObject_45 || (templateObject_45 = __makeTemplateObject([":Manage Budgets@@business.function.manage.budgets:Manage Budgets"], [":Manage Budgets@@business.function.manage.budgets:Manage Budgets"]))),
            'manage.saving.goals': $localize(templateObject_46 || (templateObject_46 = __makeTemplateObject([":Manage Saving Goals@@business.function.manage.saving.goals:Manage Saving Goals"], [":Manage Saving Goals@@business.function.manage.saving.goals:Manage Saving Goals"]))),
            'lock.user': $localize(templateObject_47 || (templateObject_47 = __makeTemplateObject([":Lock User@@business.function.lock.user:Lock User"], [":Lock User@@business.function.lock.user:Lock User"]))),
            'unlock.user': $localize(templateObject_48 || (templateObject_48 = __makeTemplateObject([":Unlock User@@business.function.unlock.user:Unlock User"], [":Unlock User@@business.function.unlock.user:Unlock User"]))),
            'manage.devices': $localize(templateObject_49 || (templateObject_49 = __makeTemplateObject([":Manage Devices@@business.function.manage.devices:Manage Devices"], [":Manage Devices@@business.function.manage.devices:Manage Devices"]))),
            'sepa.credit.transfer.closed': $localize(templateObject_50 || (templateObject_50 = __makeTemplateObject([":SEPA CT - closed@@business.function.sepa.credit.transfer.closed:SEPA CT - closed"], [":SEPA CT - closed@@business.function.sepa.credit.transfer.closed:SEPA CT - closed"]))),
            'a2a.transfer': $localize(templateObject_51 || (templateObject_51 = __makeTemplateObject([":A2A Transfer@@business.function.a2a.transfer:A2A Transfer"], [":A2A Transfer@@business.function.a2a.transfer:A2A Transfer"]))),
            'flow.case': $localize(templateObject_52 || (templateObject_52 = __makeTemplateObject([":Manage Case@@business.function.flow.case:Manage Case"], [":Manage Case@@business.function.flow.case:Manage Case"]))),
            'flow.case.archive': $localize(templateObject_53 || (templateObject_53 = __makeTemplateObject([":Archive Case@@business.function.flow.case.archive:Archive Case"], [":Archive Case@@business.function.flow.case.archive:Archive Case"]))),
            'flow.case.document': $localize(templateObject_54 || (templateObject_54 = __makeTemplateObject([":Manage Case Documents@@business.function.flow.case.document:Manage Case Documents"], [":Manage Case Documents@@business.function.flow.case.document:Manage Case Documents"]))),
            'flow.case.comment': $localize(templateObject_55 || (templateObject_55 = __makeTemplateObject([":Manage Case Comments@@business.function.flow.case.comment:Manage Case Comments"], [":Manage Case Comments@@business.function.flow.case.comment:Manage Case Comments"]))),
            'flow.case.changelog': $localize(templateObject_56 || (templateObject_56 = __makeTemplateObject([":Access Case Changelog@@business.function.flow.case.changelog:Access Case Changelog"], [":Access Case Changelog@@business.function.flow.case.changelog:Access Case Changelog"]))),
            'flow.case.statistics': $localize(templateObject_57 || (templateObject_57 = __makeTemplateObject([":Access Case Statistics@@business.function.flow.case.statistics:Access Case Statistics"], [":Access Case Statistics@@business.function.flow.case.statistics:Access Case Statistics"]))),
            'flow.journey.statistics': $localize(templateObject_58 || (templateObject_58 = __makeTemplateObject([":Access Journey Statistics@@business.function.flow.journey.statistics:Access Journey Statistics"], [":Access Journey Statistics@@business.function.flow.journey.statistics:Access Journey Statistics"]))),
            'flow.journey.definitions': $localize(templateObject_59 || (templateObject_59 = __makeTemplateObject([":Access Journey Definitions@@business.function.flow.journey.definitions:Access Journey Definitions"], [":Access Journey Definitions@@business.function.flow.journey.definitions:Access Journey Definitions"]))),
            'flow.task.assign': $localize(templateObject_60 || (templateObject_60 = __makeTemplateObject([":Assign Task@@business.function.flow.task.assign:Assign Task"], [":Assign Task@@business.function.flow.task.assign:Assign Task"]))),
            'flow.task.dates': $localize(templateObject_61 || (templateObject_61 = __makeTemplateObject([":Manage Task Dates@@business.function.flow.task.dates:Manage Task Dates"], [":Manage Task Dates@@business.function.flow.task.dates:Manage Task Dates"]))),
            'flow.task': $localize(templateObject_62 || (templateObject_62 = __makeTemplateObject([":Manage Task@@business.function.flow.task:Manage Task"], [":Manage Task@@business.function.flow.task:Manage Task"]))),
            'stop.checks': $localize(templateObject_63 || (templateObject_63 = __makeTemplateObject([":Stop Checks@@business.function.stop.checks:Stop Checks"], [":Stop Checks@@business.function.stop.checks:Stop Checks"]))),
            'manage.other.users.devices': $localize(templateObject_64 || (templateObject_64 = __makeTemplateObject([":Manage Other Users Devices@@business.function.manage.other.users.devices:Manage Other User's Devices"], [":Manage Other Users Devices@@business.function.manage.other.users.devices:Manage Other User's Devices"]))),
            'batch.ach.credit': $localize(templateObject_65 || (templateObject_65 = __makeTemplateObject([":Batch - ACH Credit@@business.function.batch.ach.credit:Batch - ACH Credit"], [":Batch - ACH Credit@@business.function.batch.ach.credit:Batch - ACH Credit"]))),
            'cash.flow': $localize(templateObject_66 || (templateObject_66 = __makeTemplateObject([":Cash Flow Forecasting@@business.function.cash.flow:Cash Flow Forecasting"], [":Cash Flow Forecasting@@business.function.cash.flow:Cash Flow Forecasting"]))),
            'batch.ach.debit': $localize(templateObject_67 || (templateObject_67 = __makeTemplateObject([":Batch - ACH Debit@@business.function.batch.ach.debit:Batch - ACH Debit"], [":Batch - ACH Debit@@business.function.batch.ach.debit:Batch - ACH Debit"]))),
            'uk.chaps': $localize(templateObject_68 || (templateObject_68 = __makeTemplateObject([":UK CHAPS@@business.function.uk.chaps:UK CHAPS"], [":UK CHAPS@@business.function.uk.chaps:UK CHAPS"]))),
            'uk.faster.payments': $localize(templateObject_69 || (templateObject_69 = __makeTemplateObject([":UK Faster Payments@@business.function.uk.faster.payments:UK Faster Payments"], [":UK Faster Payments@@business.function.uk.faster.payments:UK Faster Payments"]))),
            'flow.task.statistics': $localize(templateObject_70 || (templateObject_70 = __makeTemplateObject([":Access Task Statistics@@business.function.flow.task.statistics:Access Task Statistics"], [":Access Task Statistics@@business.function.flow.task.statistics:Access Task Statistics"]))),
            'flow.collection': $localize(templateObject_71 || (templateObject_71 = __makeTemplateObject([":Access Collections@@business.function.flow.collection:Access Collections"], [":Access Collections@@business.function.flow.collection:Access Collections"]))),
            'emulate': $localize(templateObject_72 || (templateObject_72 = __makeTemplateObject([":Emulate@@business.function.emulate:Emulate"], [":Emulate@@business.function.emulate:Emulate"]))),
            'act.on.behalf.of': $localize(templateObject_73 || (templateObject_73 = __makeTemplateObject([":Act on behalf of@@business.function.act.on.behalf.of:Act on behalf of"], [":Act on behalf of@@business.function.act.on.behalf.of:Act on behalf of"]))),
            'manage.authorized.users': $localize(templateObject_74 || (templateObject_74 = __makeTemplateObject([":Manage Authorized Users@@business.function.manage.authorized.users:Manage Authorized Users"], [":Manage Authorized Users@@business.function.manage.authorized.users:Manage Authorized Users"]))),
            'batch.intracompany.payments': $localize(templateObject_75 || (templateObject_75 = __makeTemplateObject([":Batch - Internal Transfer@@business.function.batch.intracompany.payments:Batch - Internal Transfer"], [":Batch - Internal Transfer@@business.function.batch.intracompany.payments:Batch - Internal Transfer"]))),
            'manage.employee.comments': $localize(templateObject_76 || (templateObject_76 = __makeTemplateObject([":Manage Employee comments@@business.function.manage.employee.comments:Manage Employee comments"], [":Manage Employee comments@@business.function.manage.employee.comments:Manage Employee comments"]))),
            'manage.positive.pay': $localize(templateObject_77 || (templateObject_77 = __makeTemplateObject([":Manage Positive Pay@@business.function.manage.positive.pay:Manage Positive Pay"], [":Manage Positive Pay@@business.function.manage.positive.pay:Manage Positive Pay"]))),
            'manage.arrangement.alias': $localize(templateObject_78 || (templateObject_78 = __makeTemplateObject([":Manage Arrangement Alias@@business.function.manage.arrangement.alias:Manage Arrangement Alias"], [":Manage Arrangement Alias@@business.function.manage.arrangement.alias:Manage Arrangement Alias"]))),
            'revoke.access': $localize(templateObject_79 || (templateObject_79 = __makeTemplateObject([":Revoke Access@@business.function.revoke.access:Revoke Access"], [":Revoke Access@@business.function.revoke.access:Revoke Access"]))),
            'product.summary.limited.view': $localize(templateObject_80 || (templateObject_80 = __makeTemplateObject([":Product Summary Limited View@@business.function.product.summary.limited.view:Product Summary Limited View"], [":Product Summary Limited View@@business.function.product.summary.limited.view:Product Summary Limited View"]))),
            'manage.engagement.events': $localize(templateObject_81 || (templateObject_81 = __makeTemplateObject([":Manage Engagement Events@@business.function.manage.engagement.events:Manage Engagement Events"], [":Manage Engagement Events@@business.function.manage.engagement.events:Manage Engagement Events"]))),
            'manage.pockets': $localize(templateObject_82 || (templateObject_82 = __makeTemplateObject([":Manage Pockets@@business.function.manage.pockets:Manage Pockets"], [":Manage Pockets@@business.function.manage.pockets:Manage Pockets"]))),
            'manage.portfolio': $localize(templateObject_83 || (templateObject_83 = __makeTemplateObject([":Manage Portfolio@@business.function.manage.portfolio:Manage Portfolio"], [":Manage Portfolio@@business.function.manage.portfolio:Manage Portfolio"]))),
            'manage.order': $localize(templateObject_84 || (templateObject_84 = __makeTemplateObject([":Manage Order@@business.function.manage.order:Manage Order"], [":Manage Order@@business.function.manage.order:Manage Order"]))),
            'manage.cards': $localize(templateObject_85 || (templateObject_85 = __makeTemplateObject([":Manage Cards@@business.function.manage.cards:Manage Cards"], [":Manage Cards@@business.function.manage.cards:Manage Cards"]))),
            'places': $localize(templateObject_86 || (templateObject_86 = __makeTemplateObject([":Places@@business.function.places:Places"], [":Places@@business.function.places:Places"]))),
            'remote.deposit.capture': $localize(templateObject_87 || (templateObject_87 = __makeTemplateObject([":Remote Deposit Capture@@business.function.remote.deposit.capture:Remote Deposit Capture"], [":Remote Deposit Capture@@business.function.remote.deposit.capture:Remote Deposit Capture"]))),
            'audit.emulation': $localize(templateObject_88 || (templateObject_88 = __makeTemplateObject([":Audit Emulation@@business.function.audit.emulation:Audit Emulation"], [":Audit Emulation@@business.function.audit.emulation:Audit Emulation"]))),
            'identity.impersonation': $localize(templateObject_89 || (templateObject_89 = __makeTemplateObject([":Identity Impersonation@@business.function.identity.impersonation:Identity Impersonation"], [":Identity Impersonation@@business.function.identity.impersonation:Identity Impersonation"]))),
            'manage.aggregate.portfolio': $localize(templateObject_90 || (templateObject_90 = __makeTemplateObject([":Manage Aggregate Portfolio@@business.function.manage.aggregate.portfolio:Manage Aggregate Portfolio"], [":Manage Aggregate Portfolio@@business.function.manage.aggregate.portfolio:Manage Aggregate Portfolio"]))),
            'batch.templates': $localize(templateObject_91 || (templateObject_91 = __makeTemplateObject([":Batch Templates@@business.function.batch.templates:Batch Templates"], [":Batch Templates@@business.function.batch.templates:Batch Templates"]))),
            'batch.list.confidential': $localize(templateObject_92 || (templateObject_92 = __makeTemplateObject([":Batch - List Confidential@@business.function.batch.list.confidential:Batch - List Confidential"], [":Batch - List Confidential@@business.function.batch.list.confidential:Batch - List Confidential"]))),
            'batch.manage.confidential': $localize(templateObject_93 || (templateObject_93 = __makeTemplateObject([":Batch - Manage Confidential@@business.function.batch.manage.confidential:Batch - Manage Confidential"], [":Batch - Manage Confidential@@business.function.batch.manage.confidential:Batch - Manage Confidential"]))),
            'batch.upload.mappings': $localize(templateObject_94 || (templateObject_94 = __makeTemplateObject([":Batch - Upload Mappings@@business.function.batch.upload.mappings:Batch - Upload Mappings"], [":Batch - Upload Mappings@@business.function.batch.upload.mappings:Batch - Upload Mappings"]))),
            'manage.ach.positive.pay': $localize(templateObject_95 || (templateObject_95 = __makeTemplateObject([":Manage ACH Positive Pay@@business.function.manage.ach.positive.pay:Manage ACH Positive Pay"], [":Manage ACH Positive Pay@@business.function.manage.ach.positive.pay:Manage ACH Positive Pay"]))),
            'manage.account.reconciliation': $localize(templateObject_96 || (templateObject_96 = __makeTemplateObject([":Manage Account Reconciliation@@business.function.manage.account.reconciliation:Manage Account Reconciliation"], [":Manage Account Reconciliation@@business.function.manage.account.reconciliation:Manage Account Reconciliation"]))),
            'manage.content': $localize(templateObject_97 || (templateObject_97 = __makeTemplateObject([":Manage Content@@business.function.manage.content:Manage Content"], [":Manage Content@@business.function.manage.content:Manage Content"]))),
            'quick.user.setup': $localize(templateObject_98 || (templateObject_98 = __makeTemplateObject([":Quick User Setup@@business.function.quick.user.setup:Quick User Setup"], [":Quick User Setup@@business.function.quick.user.setup:Quick User Setup"]))),
            'loans.payment': $localize(templateObject_99 || (templateObject_99 = __makeTemplateObject([":Loans Payment@@business.function.loans.payment:Loans Payment"], [":Loans Payment@@business.function.loans.payment:Loans Payment"]))),
            'loans.advance': $localize(templateObject_100 || (templateObject_100 = __makeTemplateObject([":Loans Advance@@business.function.loans.advance:Loans Advance"], [":Loans Advance@@business.function.loans.advance:Loans Advance"]))),
            'payment.templates': $localize(templateObject_101 || (templateObject_101 = __makeTemplateObject([":Payment Templates@@business.function.payment.templates:Payment Templates"], [":Payment Templates@@business.function.payment.templates:Payment Templates"]))),
            'p2p.transfer': $localize(templateObject_102 || (templateObject_102 = __makeTemplateObject([":P2P Transfer@@business.function.p2p.transfer:P2P Transfer"], [":P2P Transfer@@business.function.p2p.transfer:P2P Transfer"]))),
            'import-letter-of-credit': $localize(templateObject_103 || (templateObject_103 = __makeTemplateObject([":Import Letter of Credit@@business.function.import-letter-of-credit:Import Letter of Credit"], [":Import Letter of Credit@@business.function.import-letter-of-credit:Import Letter of Credit"]))),
            'audiences': $localize(templateObject_104 || (templateObject_104 = __makeTemplateObject([":Audiences@@business.function.audiences:Audiences"], [":Audiences@@business.function.audiences:Audiences"]))),
            'custom.engagements': $localize(templateObject_105 || (templateObject_105 = __makeTemplateObject([":Custom Engagements@@business.function.custom.engagements:Custom Engagements"], [":Custom Engagements@@business.function.custom.engagements:Custom Engagements"]))),
            'general.notifications': $localize(templateObject_106 || (templateObject_106 = __makeTemplateObject([":General Notifications@@business.function.general.notifications:General Notifications"], [":General Notifications@@business.function.general.notifications:General Notifications"]))),
            'general.notification.preferences': $localize(templateObject_107 || (templateObject_107 = __makeTemplateObject([":General Notification Preferences@@business.function.general.notification.preferences:General Notification Preferences"], [":General Notification Preferences@@business.function.general.notification.preferences:General Notification Preferences"]))),
            'manage.own.profile': $localize(templateObject_108 || (templateObject_108 = __makeTemplateObject([":Manage Own Profile@@business.function.manage.own.profile:Manage Own Profile"], [":Manage Own Profile@@business.function.manage.own.profile:Manage Own Profile"]))),
            'manage.projects.apps.releases': $localize(templateObject_109 || (templateObject_109 = __makeTemplateObject([":Manage projects, apps, releases@@business.function.manage.projects-apps-releases:Manage projects, apps, releases"], [":Manage projects, apps, releases@@business.function.manage.projects-apps-releases:Manage projects, apps, releases"]))),
            'manage.configurations': $localize(templateObject_110 || (templateObject_110 = __makeTemplateObject([":Manage configurations@@business.function.manage.configurations:Manage configurations"], [":Manage configurations@@business.function.manage.configurations:Manage configurations"]))),
            'manage.external.accounts': $localize(templateObject_111 || (templateObject_111 = __makeTemplateObject([":Manage External Accounts@@business.function.manage.external.accounts:Manage External Accounts"], [":Manage External Accounts@@business.function.manage.external.accounts:Manage External Accounts"]))),
            'cs.live.chat': $localize(templateObject_112 || (templateObject_112 = __makeTemplateObject([":Customer Support - Live Chat@@business.function.cs.live.chat:Customer Support - Live Chat"], [":Customer Support - Live Chat@@business.function.cs.live.chat:Customer Support - Live Chat"]))),
            'cs.voice.call': $localize(templateObject_113 || (templateObject_113 = __makeTemplateObject([":Customer Support - Voice Call@@business.function.cs.voice.call:Customer Support - Voice Call"], [":Customer Support - Voice Call@@business.function.cs.voice.call:Customer Support - Voice Call"]))),
            'cs.video.call': $localize(templateObject_114 || (templateObject_114 = __makeTemplateObject([":Customer Support - Video Call@@business.function.cs.video.call:Customer Support - Video Call"], [":Customer Support - Video Call@@business.function.cs.video.call:Customer Support - Video Call"]))),
            'rts.support.request': $localize(templateObject_115 || (templateObject_115 = __makeTemplateObject([":RTC Support Request@@business.function.rts.support.request:RTC Support Request"], [":RTC Support Request@@business.function.rts.support.request:RTC Support Request"]))),
            'financial.insights': $localize(templateObject_116 || (templateObject_116 = __makeTemplateObject([":Financial Insights@@business.function.financial.insights:Financial Insights"], [":Financial Insights@@business.function.financial.insights:Financial Insights"]))),
        };
        /**
         * Business Function Group Name
         * groupKey - Name
         */
        var businessFunctionGroupNameTranslations = {
            'accountsAndPayments': $localize(templateObject_117 || (templateObject_117 = __makeTemplateObject([":Accounts and Payments@@business.function.group.accountsAndPayments:Accounts and Payments"], [":Accounts and Payments@@business.function.group.accountsAndPayments:Accounts and Payments"]))),
            'beneficiaries': $localize(templateObject_118 || (templateObject_118 = __makeTemplateObject([":Beneficiaries@@business.function.group.beneficiaries:Beneficiaries"], [":Beneficiaries@@business.function.group.beneficiaries:Beneficiaries"]))),
            'actions': $localize(templateObject_119 || (templateObject_119 = __makeTemplateObject([":Actions@@business.function.group.actions:Actions"], [":Actions@@business.function.group.actions:Actions"]))),
            'messagesAndNotifications': $localize(templateObject_120 || (templateObject_120 = __makeTemplateObject([":Messages and Notifications@@business.function.group.messagesAndNotifications:Messages and Notifications"], [":Messages and Notifications@@business.function.group.messagesAndNotifications:Messages and Notifications"]))),
            'entitlements': $localize(templateObject_121 || (templateObject_121 = __makeTemplateObject([":Entitlements@@business.function.group.entitlements:Entitlements"], [":Entitlements@@business.function.group.entitlements:Entitlements"]))),
            'identityManagement': $localize(templateObject_122 || (templateObject_122 = __makeTemplateObject([":Identity Management@@business.function.group.identityManagement:Identity Management"], [":Identity Management@@business.function.group.identityManagement:Identity Management"]))),
            'supportAccess': $localize(templateObject_123 || (templateObject_123 = __makeTemplateObject([":Support Access@@business.function.group.supportAccess:Support Access"], [":Support Access@@business.function.group.supportAccess:Support Access"]))),
            'flow': $localize(templateObject_124 || (templateObject_124 = __makeTemplateObject([":Flow@@business.function.group.flow:Flow"], [":Flow@@business.function.group.flow:Flow"]))),
            'employee': $localize(templateObject_125 || (templateObject_125 = __makeTemplateObject([":Employee@@business.function.group.employee:Employee"], [":Employee@@business.function.group.employee:Employee"]))),
            'portfolio': $localize(templateObject_126 || (templateObject_126 = __makeTemplateObject([":Portfolio Summary@@business.function.group.portfolio:Portfolio Summary"], [":Portfolio Summary@@business.function.group.portfolio:Portfolio Summary"]))),
            'content': $localize(templateObject_127 || (templateObject_127 = __makeTemplateObject([":Content Management@@business.function.group.content:Content Management"], [":Content Management@@business.function.group.content:Content Management"]))),
            'engagements': $localize(templateObject_128 || (templateObject_128 = __makeTemplateObject([":Engagements@@business.function.group.engagements:Engagements"], [":Engagements@@business.function.group.engagements:Engagements"]))),
            'realTimeCommunication': $localize(templateObject_129 || (templateObject_129 = __makeTemplateObject([":Real Time Communications@@business.function.group.realTimeCommunication:Real Time Communications"], [":Real Time Communications@@business.function.group.realTimeCommunication:Real Time Communications"]))),
            'financeManagement': $localize(templateObject_130 || (templateObject_130 = __makeTemplateObject([":Personal Finance Management@@business.function.group.financeManagement:Personal Finance Management"], [":Personal Finance Management@@business.function.group.financeManagement:Personal Finance Management"]))),
            'communicationPreferences': $localize(templateObject_131 || (templateObject_131 = __makeTemplateObject([":Communication Preferences@@business.function.group.communicationPreferences:Communication Preferences"], [":Communication Preferences@@business.function.group.communicationPreferences:Communication Preferences"]))),
            'remoteConfig': $localize(templateObject_132 || (templateObject_132 = __makeTemplateObject([":Remote Config@@business.function.group.remoteConfig:Remote Config"], [":Remote Config@@business.function.group.remoteConfig:Remote Config"]))),
            'other': $localize(templateObject_133 || (templateObject_133 = __makeTemplateObject([":Other@@business.function.group.other:Other"], [":Other@@business.function.group.other:Other"]))),
        };
        /**
         * Resource Name
         * Resourse Name - Name
         */
        var resourceNameTranslations = {
            'Product Summary': $localize(templateObject_134 || (templateObject_134 = __makeTemplateObject([":Product Summary@@accessgroup-common.resource.product-summary:Product Summary"], [":Product Summary@@accessgroup-common.resource.product-summary:Product Summary"]))),
            'Transactions': $localize(templateObject_135 || (templateObject_135 = __makeTemplateObject([":Transactions@@accessgroup-common.resource.transactions:Transactions"], [":Transactions@@accessgroup-common.resource.transactions:Transactions"]))),
            'Payments': $localize(templateObject_136 || (templateObject_136 = __makeTemplateObject([":Payments@@accessgroup-common.resource.payments:Payments"], [":Payments@@accessgroup-common.resource.payments:Payments"]))),
            'Arrangements': $localize(templateObject_137 || (templateObject_137 = __makeTemplateObject([":Arrangements@@accessgroup-common.resource.arrangements:Arrangements"], [":Arrangements@@accessgroup-common.resource.arrangements:Arrangements"]))),
            'Billpay': $localize(templateObject_138 || (templateObject_138 = __makeTemplateObject([":Billpay@@accessgroup-common.resource.billpay:Billpay"], [":Billpay@@accessgroup-common.resource.billpay:Billpay"]))),
            'Account Statements': $localize(templateObject_139 || (templateObject_139 = __makeTemplateObject([":Account Statements@@accessgroup-common.resource.account-statements:Account Statements"], [":Account Statements@@accessgroup-common.resource.account-statements:Account Statements"]))),
            'Batch': $localize(templateObject_140 || (templateObject_140 = __makeTemplateObject([":Batch@@accessgroup-common.resource.batch:Batch"], [":Batch@@accessgroup-common.resource.batch:Batch"]))),
            'Cash Flow': $localize(templateObject_141 || (templateObject_141 = __makeTemplateObject([":Cash Flow@@accessgroup-common.resource.cash-flow:Cash Flow"], [":Cash Flow@@accessgroup-common.resource.cash-flow:Cash Flow"]))),
            'Pockets': $localize(templateObject_142 || (templateObject_142 = __makeTemplateObject([":Pockets@@accessgroup-common.resource.pockets:Pockets"], [":Pockets@@accessgroup-common.resource.pockets:Pockets"]))),
            'External Accounts': $localize(templateObject_143 || (templateObject_143 = __makeTemplateObject([":External Accounts@@accessgroup-common.resource.external-accounts:External Accounts"], [":External Accounts@@accessgroup-common.resource.external-accounts:External Accounts"]))),
            'Contacts': $localize(templateObject_144 || (templateObject_144 = __makeTemplateObject([":Contacts@@accessgroup-common.resource.contacts:Contacts"], [":Contacts@@accessgroup-common.resource.contacts:Contacts"]))),
            'Actions': $localize(templateObject_145 || (templateObject_145 = __makeTemplateObject([":Actions@@accessgroup-common.resource.actions:Actions"], [":Actions@@accessgroup-common.resource.actions:Actions"]))),
            'Message Center': $localize(templateObject_146 || (templateObject_146 = __makeTemplateObject([":Message Center@@accessgroup-common.resource.message-center:Message Center"], [":Message Center@@accessgroup-common.resource.message-center:Message Center"]))),
            'Notifications': $localize(templateObject_147 || (templateObject_147 = __makeTemplateObject([":Notifications@@accessgroup-common.resource.notifications:Notifications"], [":Notifications@@accessgroup-common.resource.notifications:Notifications"]))),
            'Legal Entity': $localize(templateObject_148 || (templateObject_148 = __makeTemplateObject([":Legal Entity@@accessgroup-common.resource.legal-entity:Legal Entity"], [":Legal Entity@@accessgroup-common.resource.legal-entity:Legal Entity"]))),
            'User': $localize(templateObject_149 || (templateObject_149 = __makeTemplateObject([":User@@accessgroup-common.resource.user:User"], [":User@@accessgroup-common.resource.user:User"]))),
            'Service Agreement': $localize(templateObject_150 || (templateObject_150 = __makeTemplateObject([":Service Agreement@@accessgroup-common.resource.service-agreement:Service Agreement"], [":Service Agreement@@accessgroup-common.resource.service-agreement:Service Agreement"]))),
            'Entitlements': $localize(templateObject_151 || (templateObject_151 = __makeTemplateObject([":Entitlements@@accessgroup-common.resource.entitlements:Entitlements"], [":Entitlements@@accessgroup-common.resource.entitlements:Entitlements"]))),
            'Limits': $localize(templateObject_152 || (templateObject_152 = __makeTemplateObject([":Limits@@accessgroup-common.resource.limits:Limits"], [":Limits@@accessgroup-common.resource.limits:Limits"]))),
            'Approvals': $localize(templateObject_153 || (templateObject_153 = __makeTemplateObject([":Approvals@@accessgroup-common.resource.approvals:Approvals"], [":Approvals@@accessgroup-common.resource.approvals:Approvals"]))),
            'Audit': $localize(templateObject_154 || (templateObject_154 = __makeTemplateObject([":Audit@@accessgroup-common.resource.audit:Audit"], [":Audit@@accessgroup-common.resource.audit:Audit"]))),
            'User Profiles': $localize(templateObject_155 || (templateObject_155 = __makeTemplateObject([":User Profiles@@accessgroup-common.resource.user-profiles:User Profiles"], [":User Profiles@@accessgroup-common.resource.user-profiles:User Profiles"]))),
            'Manage Authorized Users': $localize(templateObject_156 || (templateObject_156 = __makeTemplateObject([":Manage Authorized Users@@accessgroup-common.resource.manage-authorized-users:Manage Authorized Users"], [":Manage Authorized Users@@accessgroup-common.resource.manage-authorized-users:Manage Authorized Users"]))),
            'Identities': $localize(templateObject_157 || (templateObject_157 = __makeTemplateObject([":Identities@@accessgroup-common.resource.identities:Identities"], [":Identities@@accessgroup-common.resource.identities:Identities"]))),
            'Device': $localize(templateObject_158 || (templateObject_158 = __makeTemplateObject([":Device@@accessgroup-common.resource.device:Device"], [":Device@@accessgroup-common.resource.device:Device"]))),
            'Support Access': $localize(templateObject_159 || (templateObject_159 = __makeTemplateObject([":Support Access@@accessgroup-common.resource.support-access:Support Access"], [":Support Access@@accessgroup-common.resource.support-access:Support Access"]))),
            'Flow': $localize(templateObject_160 || (templateObject_160 = __makeTemplateObject([":Flow@@accessgroup-common.resource.flow:Flow"], [":Flow@@accessgroup-common.resource.flow:Flow"]))),
            'Employee': $localize(templateObject_161 || (templateObject_161 = __makeTemplateObject([":Employee@@accessgroup-common.resource.employee:Employee"], [":Employee@@accessgroup-common.resource.employee:Employee"]))),
            'Portfolio': $localize(templateObject_162 || (templateObject_162 = __makeTemplateObject([":Portfolio@@accessgroup-common.resource.portfolio:Portfolio"], [":Portfolio@@accessgroup-common.resource.portfolio:Portfolio"]))),
            'Content': $localize(templateObject_163 || (templateObject_163 = __makeTemplateObject([":Content@@accessgroup-common.resource.content:Content"], [":Content@@accessgroup-common.resource.content:Content"]))),
            'Engagements': $localize(templateObject_164 || (templateObject_164 = __makeTemplateObject([":Engagements@@accessgroup-common.resource.engagements:Engagements"], [":Engagements@@accessgroup-common.resource.engagements:Engagements"]))),
            'Real Time Communications': $localize(templateObject_165 || (templateObject_165 = __makeTemplateObject([":Real Time Communications@@accessgroup-common.resource.real-time-communications:Real Time Communications"], [":Real Time Communications@@accessgroup-common.resource.real-time-communications:Real Time Communications"]))),
            'Personal Finance Management': $localize(templateObject_166 || (templateObject_166 = __makeTemplateObject([":Personal Finance Management@@accessgroup-common.resource.personal-finance-management:Personal Finance Management"], [":Personal Finance Management@@accessgroup-common.resource.personal-finance-management:Personal Finance Management"]))),
            'Communication Preferences': $localize(templateObject_167 || (templateObject_167 = __makeTemplateObject([":Communication Preferences@@accessgroup-common.resource.communication-preferences:Communication Preferences"], [":Communication Preferences@@accessgroup-common.resource.communication-preferences:Communication Preferences"]))),
            'Remote Config': $localize(templateObject_168 || (templateObject_168 = __makeTemplateObject([":Remote Config@@accessgroup-common.resource.remote-config:Remote Config"], [":Remote Config@@accessgroup-common.resource.remote-config:Remote Config"]))),
        };
        var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5, templateObject_6, templateObject_7, templateObject_8, templateObject_9, templateObject_10, templateObject_11, templateObject_12, templateObject_13, templateObject_14, templateObject_15, templateObject_16, templateObject_17, templateObject_18, templateObject_19, templateObject_20, templateObject_21, templateObject_22, templateObject_23, templateObject_24, templateObject_25, templateObject_26, templateObject_27, templateObject_28, templateObject_29, templateObject_30, templateObject_31, templateObject_32, templateObject_33, templateObject_34, templateObject_35, templateObject_36, templateObject_37, templateObject_38, templateObject_39, templateObject_40, templateObject_41, templateObject_42, templateObject_43, templateObject_44, templateObject_45, templateObject_46, templateObject_47, templateObject_48, templateObject_49, templateObject_50, templateObject_51, templateObject_52, templateObject_53, templateObject_54, templateObject_55, templateObject_56, templateObject_57, templateObject_58, templateObject_59, templateObject_60, templateObject_61, templateObject_62, templateObject_63, templateObject_64, templateObject_65, templateObject_66, templateObject_67, templateObject_68, templateObject_69, templateObject_70, templateObject_71, templateObject_72, templateObject_73, templateObject_74, templateObject_75, templateObject_76, templateObject_77, templateObject_78, templateObject_79, templateObject_80, templateObject_81, templateObject_82, templateObject_83, templateObject_84, templateObject_85, templateObject_86, templateObject_87, templateObject_88, templateObject_89, templateObject_90, templateObject_91, templateObject_92, templateObject_93, templateObject_94, templateObject_95, templateObject_96, templateObject_97, templateObject_98, templateObject_99, templateObject_100, templateObject_101, templateObject_102, templateObject_103, templateObject_104, templateObject_105, templateObject_106, templateObject_107, templateObject_108, templateObject_109, templateObject_110, templateObject_111, templateObject_112, templateObject_113, templateObject_114, templateObject_115, templateObject_116, templateObject_117, templateObject_118, templateObject_119, templateObject_120, templateObject_121, templateObject_122, templateObject_123, templateObject_124, templateObject_125, templateObject_126, templateObject_127, templateObject_128, templateObject_129, templateObject_130, templateObject_131, templateObject_132, templateObject_133, templateObject_134, templateObject_135, templateObject_136, templateObject_137, templateObject_138, templateObject_139, templateObject_140, templateObject_141, templateObject_142, templateObject_143, templateObject_144, templateObject_145, templateObject_146, templateObject_147, templateObject_148, templateObject_149, templateObject_150, templateObject_151, templateObject_152, templateObject_153, templateObject_154, templateObject_155, templateObject_156, templateObject_157, templateObject_158, templateObject_159, templateObject_160, templateObject_161, templateObject_162, templateObject_163, templateObject_164, templateObject_165, templateObject_166, templateObject_167, templateObject_168;

        var TranslationsService = /** @class */ (function () {
            function TranslationsService() {
            }
            /**
             * Get business function name by function code
             * @param {string} functionCode
             * @returns {(string|undefined)} Returns the name of the business function
             */
            TranslationsService.prototype.getBusinessFunctionName = function (functionCode) {
                return businessFunctionNameTranslations[functionCode];
            };
            /**
             * Get business function group name by group key
             * @param {string} groupKey
             * @returns {(string|undefined)} Returns the name of the business function group
             */
            TranslationsService.prototype.getBusinessFunctionGroupName = function (groupKey) {
                return businessFunctionGroupNameTranslations[groupKey];
            };
            /**
             * Get resource name
             * @param {string} resourceName
             * @returns {(string|undefined)} Returns the name of the resource
             */
            TranslationsService.prototype.getResourceName = function (resourceName) {
                return resourceNameTranslations[resourceName];
            };
            return TranslationsService;
        }());
        /** @nocollapse */ TranslationsService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TranslationsService, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
        /** @nocollapse */ TranslationsService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TranslationsService, providedIn: 'root' });
        i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TranslationsService, decorators: [{
                    type: i0.Injectable,
                    args: [{ providedIn: 'root' }]
                }] });

        /**
         * Generated bundle index. Do not edit.
         */

        exports.AMOUNT_DELIMETER_REG_EXP = AMOUNT_DELIMETER_REG_EXP;
        exports.AccessGroupInputTimePickerModule = AccessGroupInputTimePickerModule;
        exports.AccessgroupCanDeactivateGuardService = AccessgroupCanDeactivateGuardService;
        exports.AccessgroupCommonModule = AccessgroupCommonModule;
        exports.BOUNDTS_TYPE = BOUNDTS_TYPE;
        exports.BusinessFunctionGroupService = BusinessFunctionGroupService;
        exports.CONSUMPTIONS_REGULAR = CONSUMPTIONS_REGULAR;
        exports.CONSUMPTIONS_SHADOW = CONSUMPTIONS_SHADOW;
        exports.CREATE_NEW_LIMIT_RESPONSE = CREATE_NEW_LIMIT_RESPONSE;
        exports.CURRENCY = CURRENCY;
        exports.CurrencyService = CurrencyService;
        exports.DiscardChangesBaseComponent = DiscardChangesBaseComponent;
        exports.EDIT_JOB_ROLE_ID = EDIT_JOB_ROLE_ID;
        exports.LIMITS = LIMITS;
        exports.LIMITS_BOUNDS = LIMITS_BOUNDS;
        exports.LIMITS_PERIODS = LIMITS_PERIODS;
        exports.LIMITS_UUID = LIMITS_UUID;
        exports.LIMITS_WITH_CONSUMPTION = LIMITS_WITH_CONSUMPTION;
        exports.LIMIT_KEY = LIMIT_KEY;
        exports.LimitAccessService = LimitAccessService;
        exports.LimitsService = LimitsService;
        exports.ManageLimitsModalComponent = ManageLimitsModalComponent;
        exports.ManageLimitsModalCustomizableDirective = ManageLimitsModalCustomizableDirective;
        exports.ManageLimitsModalModule = ManageLimitsModalModule;
        exports.PERIODIC_LIMITS_BOUNDS = PERIODIC_LIMITS_BOUNDS;
        exports.PRIVILEGES = PRIVILEGES;
        exports.REGULAR_PERIODIC_BOUNDS = REGULAR_PERIODIC_BOUNDS;
        exports.SHADOW_PERIODIC_BOUNDS = SHADOW_PERIODIC_BOUNDS;
        exports.TRANSACTIONAL_LIMITS_BOUNDS = TRANSACTIONAL_LIMITS_BOUNDS;
        exports.TranslationsService = TranslationsService;
        exports.UPDATE_LIMIT_RESPONSE = UPDATE_LIMIT_RESPONSE;
        exports.UserPermissionsDataGroupDetailsService = UserPermissionsDataGroupDetailsService;
        exports.UserPermissionsService = UserPermissionsService;
        exports.WidgetProperties = WidgetProperties;
        exports.businessFunctions = businessFunctions;
        exports.checkPermission = checkPermission;
        exports.defaultBusinessFunctionGroups = defaultBusinessFunctionGroups;
        exports.defaultGetGroupForBusinessFunction = defaultGetGroupForBusinessFunction;
        exports.defaultOrderedBusinessFunctionGroups = defaultOrderedBusinessFunctionGroups;
        exports.errorMsg = errorMsg;
        exports.extractDataFromResponse = extractDataFromResponse;
        exports.extractParticipantsThatShareAccounts = extractParticipantsThatShareAccounts;
        exports.functionAccessGroups = functionAccessGroups;
        exports.getExtendedBusinessFunctions = getExtendedBusinessFunctions;
        exports.getIfLimitHasShadow = getIfLimitHasShadow;
        exports.getLimitUnlimited = getLimitUnlimited;
        exports.getPrevSelectedJobRole = getPrevSelectedJobRole;
        exports.getPrevSelectedJobRoleId = getPrevSelectedJobRoleId;
        exports.getRouteParams = getRouteParams;
        exports.hasError = hasError;
        exports.hasPrevSelectedJobRole = hasPrevSelectedJobRole;
        exports.isFieldValid = isFieldValid;
        exports.lookUpObject = lookUpObject;
        exports.parseError = parseError;
        exports.participants = participants;
        exports.periodLimitsConsumptionMapper = periodLimitsConsumptionMapper;
        exports.prepareLimitObj = prepareLimitObj;
        exports.productSummaryMockResponse = productSummaryMockResponse;
        exports.scanAndMergePaginatedItems = scanAndMergePaginatedItems;
        exports.serviceAgreement = serviceAgreement;
        exports.serviceAgreementWithParticipants = serviceAgreementWithParticipants;
        exports["ӨAccessGroupInputTimePickerComponent"] = AccessGroupInputTimePickerComponent;
        exports["ӨEditLimitComponent"] = EditLimitComponent;
        exports["ӨEditLimitCustomizableDirective"] = EditLimitCustomizableDirective;
        exports["ӨLimitBoundItemComponent"] = LimitBoundItemComponent;
        exports["ӨLimitBoundItemCustomizableDirective"] = LimitBoundItemCustomizableDirective;
        exports["ӨManageLimitsModalHeaderComponent"] = ManageLimitsModalHeaderComponent;
        exports["ӨManageLimitsModalHeaderCustomizableDirective"] = ManageLimitsModalHeaderCustomizableDirective;
        exports["ӨManageLimitsModalViewBodyComponent"] = ManageLimitsModalViewBodyComponent;
        exports["ӨManageLimitsModalViewBodyCustomizableDirective"] = ManageLimitsModalViewBodyCustomizableDirective;

        Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-accessgroup-common-ang.umd.js.map
