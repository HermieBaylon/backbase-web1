import { FunctionsGetResponseBody, ServiceAgreementParticipantsGetResponseBody as ServiceAgreementParticipant, ServiceAgreementItem as ServiceAgreement } from '@backbase/data-ang/accesscontrol';
export { ProductSummaryItem as AccountItem } from '@backbase/data-ang/arrangements';
import { ContactsGetResponseBodyItem as Contact } from '@backbase/data-ang/contact-manager';
export { GetDataGroupItem as DataGroup, ServiceAgreementParticipantsGetResponseBody as ServiceAgreementParticipant, } from '@backbase/data-ang/accesscontrol';
export { ContactGetResponseBody as Payee } from '@backbase/data-ang/contact-manager';
export declare type Payees = Contact[];
export { FunctionGroupItem as FunctionGroup, ServiceAgreementItem as ServiceAgreement, FunctionsGetResponseBody, } from '@backbase/data-ang/accesscontrol';
export declare type Modify<T, R> = Pick<T, Exclude<keyof T, keyof R>> & R;
export interface BusinessFunctionPrivilege {
    applicable: boolean;
    assigned: boolean;
    supportsLimits: boolean;
}
export interface BusinessFunctionPrivileges {
    [key: string]: BusinessFunctionPrivilege;
}
export interface BusinessFunctionBase {
    functionId: string;
    functionCode: string;
    resource: string;
    name: string;
}
export interface BusinessFunction extends BusinessFunctionBase {
    privileges: BusinessFunctionPrivileges;
}
export interface BusinessFunctionGroup {
    groupKey: string;
    businessFunctions: BusinessFunction[];
}
export interface BusinessFunctionWithGroupKey extends FunctionsGetResponseBody {
    groupKey: string;
}
export interface ServiceAgreementWithParticipants {
    serviceAgreement: ServiceAgreement;
    participants: ServiceAgreementParticipant[];
}
export declare type PaginationType = 'load-more' | 'pagination';
export interface PaginationProperties {
    paginationType: PaginationType;
    pageSize: number;
    maxNavPages: number;
}
export declare const WidgetProperties: {
    PAGE_SIZE: string;
    MAV_NAV_PAGES: string;
    PAGINATION_TYPE: string;
};
export interface DataGroupParams {
    searchTerm: string;
    from: number;
    size: number;
    paginationType: PaginationType;
    serviceAgreement: ServiceAgreementWithParticipants;
    items: string[];
}
export interface PaginatedItems<T> {
    items: T[];
    totalItems: number;
}
export interface PaginatedItemsWithPaginationParams<T> extends PaginatedItems<T> {
    from: number;
    paginationType: PaginationType;
}
export interface GetContactsReqParams {
    cursor?: string;
    from?: number;
    size?: number;
    query?: string;
    targetSaId?: string;
}
export interface PayeesData {
    totalCount: number;
    payees: Contact[] | null;
}
export declare enum AccessDataGroupTypes {
    ARRANGEMENTS = "ARRANGEMENTS",
    CONTACTS = "CONTACTS"
}
export declare enum ApprovalLevelStatus {
    EMPTY = 0,
    ERROR = 1
}
