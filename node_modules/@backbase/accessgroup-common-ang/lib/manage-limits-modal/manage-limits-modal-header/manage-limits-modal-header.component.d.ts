import { EventEmitter, OnDestroy, OnInit, TemplateRef } from '@angular/core';
import { FormControl } from '@angular/forms';
import { Observable } from 'rxjs';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { CurrencyRegistryResponse } from '@backbase/data-ang/limits';
import { NotificationService } from '@backbase/ui-ang/notification';
import { CurrencyService } from '../services/currency.service';
import { LimitTypes } from '../models/limit-types';
import { LegalEntitiesHttpService, ServiceAgreementHttpService } from '@backbase/data-ang/accesscontrol';
import * as i0 from "@angular/core";
export declare class ManageLimitsModalHeaderComponent implements OnInit, OnDestroy {
    private readonly currencyListService;
    private readonly notificationService;
    private readonly serviceAgreementHttpService;
    private readonly legalEntitiesService;
    /**
     * Applied currency
     */
    currency?: string;
    /**
     * Currency drop down form control
     */
    currencyControl: FormControl;
    /**
     * Default header title
     */
    defaultTitle: string;
    /**
     * Header title
     */
    title?: string;
    /**
     * Service agreement id
     */
    serviceAgreementId?: string;
    /**
     * Legal entity id
     */
    legalEntityId?: string;
    /**
     * User name
     */
    subTitleUserName?: string;
    /**
     * Job role name
     */
    subTitleJRName?: string;
    /**
     * Legal entity name
     */
    subTitleLEName?: string;
    /**
     * Service agreement name
     */
    subTitleSAName?: string;
    /**
     * Notification dismiss time in seconds
     */
    notificationDismissTime: number;
    /**
     * Close modal window event.
     * Propagate event when modal window should be closed.
     */
    close: EventEmitter<void>;
    /**
     * Currency error notification header template reference
     */
    currencyErrorNotificationHeader: TemplateRef<any> | undefined;
    /**
     * Currency error notification message template reference
     */
    currencyErrorNotificationMessage: TemplateRef<any> | undefined;
    /**
     * Limit types enumeration
     */
    readonly LimitTypes: typeof LimitTypes;
    /**
     * Limit types stream
     */
    limitType$$: Observable<LimitTypes | boolean>;
    /**
     * Service agreement name stream
     */
    saName$$: Observable<string | undefined>;
    /**
     * Legal entity name stream
     */
    leName$$: Observable<string | undefined>;
    /**
     * Show notification stream
     */
    private readonly showNotification$;
    /**
     * Unsubscribe stream
     */
    private destroy$;
    /**
     * Currency Info stream
     */
    readonly currencyInfo$: Observable<boolean | CurrencyRegistryResponse | undefined>;
    constructor(currencyListService: CurrencyService, notificationService: NotificationService, serviceAgreementHttpService: ServiceAgreementHttpService, legalEntitiesService: LegalEntitiesHttpService);
    ngOnInit(): void;
    /**
     * Show error notification and close modal
     */
    private closeModal;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ManageLimitsModalHeaderComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ManageLimitsModalHeaderComponent, "bb-manage-limits-modal-header", never, { "currency": "currency"; "currencyControl": "currencyControl"; "defaultTitle": "defaultTitle"; "title": "title"; "serviceAgreementId": "serviceAgreementId"; "legalEntityId": "legalEntityId"; "subTitleUserName": "subTitleUserName"; "subTitleJRName": "subTitleJRName"; "subTitleLEName": "subTitleLEName"; "subTitleSAName": "subTitleSAName"; "notificationDismissTime": "notificationDismissTime"; }, { "close": "close"; }, never, never>;
}
export declare class ManageLimitsModalHeaderCustomizableDirective extends BbTemplate<ManageLimitsModalHeaderComponent, {
    currencyInfo: boolean | CurrencyRegistryResponse | null | undefined;
    saName: string | undefined | null;
    leName: string | undefined | null;
    limitType: string | boolean | null;
}> {
    static ɵfac: i0.ɵɵFactoryDeclaration<ManageLimitsModalHeaderCustomizableDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<ManageLimitsModalHeaderCustomizableDirective, "[bbManageLimitsModalHeaderCustomizable]", never, {}, {}, never>;
}
