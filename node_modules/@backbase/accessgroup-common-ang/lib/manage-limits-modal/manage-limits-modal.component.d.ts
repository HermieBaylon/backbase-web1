import { EventEmitter, OnDestroy, OnInit, TemplateRef } from '@angular/core';
import { FormControl } from '@angular/forms';
import { Observable } from 'rxjs';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { LimitKey } from '@backbase/data-ang/limits';
import { NotificationService } from '@backbase/ui-ang/notification';
import { LimitsService } from './services/limits.service';
import { LimitBound } from './models/limits-bound-types.model';
import * as i0 from "@angular/core";
export declare type ManageLimitsModalView = 'view' | 'edit';
export declare class ManageLimitsModalComponent implements OnInit, OnDestroy {
    private readonly notificationService;
    private readonly limitsService;
    /**
     * Success both limits template reference
     */
    successBothLimitTemplate: TemplateRef<any> | string;
    /**
     * Success Regular limits create template reference
     */
    successRegularLimitCreateTemplate: TemplateRef<any> | string;
    /**
     * Success Regular limits update template reference
     */
    successRegularLimitUpdateTemplate: TemplateRef<any> | string;
    /**
     * Success Shadow limits create template reference
     */
    successShadowLimitCreateTemplate: TemplateRef<any> | string;
    /**
     * Success shadow limit update template reference
     */
    successShadowLimitUpdateTemplate: TemplateRef<any> | string;
    /**
     * Fail both limits template reference
     */
    failBothLimitTemplate: TemplateRef<any> | string;
    /**
     * Fail regular limit create template reference
     */
    failRegularLimitCreateTemplate: TemplateRef<any> | string;
    /**
     * Fail regular limit update template reference
     */
    failRegularLimitUpdateTemplate: TemplateRef<any> | string;
    /**
     * Fail shadow limit create template reference
     */
    failShadowLimitCreateTemplate: TemplateRef<any> | string;
    /**
     * Fail shadow limit update template reference
     */
    failShadowLimitUpdateTemplate: TemplateRef<any> | string;
    /**
     * Limits pending notification template reference
     */
    limitsPendingNotificationTemplate: TemplateRef<any> | string;
    /**
     * Shadow Limits pending notification template reference
     */
    shadowLimitsPendingNotificationTemplate: TemplateRef<any> | string;
    /**
     * Define which view template should be shown
     */
    view: ManageLimitsModalView;
    /**
     * Limits data which passed to view containers.
     */
    limitBounds: LimitBound[];
    /**
     * Flag for show/hide regular limit column.
     */
    showRegularLimit: boolean;
    /**
     * Flag for show/hide shadow limit column.
     */
    showShadowLimit: boolean;
    /**
     * Limit currency value
     */
    currency: string | undefined;
    /**
     * Limit key value
     */
    limitKey: LimitKey;
    /**
     * Limit id's
     */
    limitIds?: {
        regular?: string;
        shadow?: string;
    };
    /**
     * Pending flag
     */
    pending?: boolean;
    /**
     * Header title
     */
    headerTitle?: string;
    /**
     * Service agreement id
     */
    serviceAgreementId?: string;
    /**
     * Legal entity id
     */
    legalEntityId?: string;
    /**
     * User name for header subtitle
     */
    headerSubTitleUserName?: string;
    /**
     * Job role name for header subtitle
     */
    headerSubTitleJRName?: string;
    /**
     * Legal entity name for header subtitle
     */
    headerSubTitleLEName?: string;
    /**
     * Service agreement name for header subtitle
     */
    headerSubTitleSAName?: string;
    /**
     * Notification dismiss time in milliseconds (defaults to 3000)
     * @default 3000
     */
    notificationDismissTime: number;
    /**
     * Close modal window event.
     * Propagate event when modal window should be closed.
     */
    close: EventEmitter<void>;
    private readonly pendingSubmitSubject;
    /**
     * Stream of pending submit flag value
     */
    readonly pendingSubmit$: Observable<boolean>;
    private readonly errorsBESubject;
    /**
     * Stream of BE errors
     */
    readonly errorsBE$: Observable<any>;
    private readonly disableRegularSubject;
    /**
     * Stream of Disable regular limits flag
     */
    readonly disableRegular$: Observable<boolean>;
    private readonly disableShadowSubject;
    /**
     * Stream of Disable shadow limits flag
     */
    readonly disableShadow$: Observable<boolean>;
    /**
     * Currency form control
     */
    readonly currencyControl: FormControl;
    /**
     * Show notification stream
     */
    private readonly showNotification$;
    /**
     * Unsubscribe stream
     */
    private readonly destroy$;
    constructor(notificationService: NotificationService, limitsService: LimitsService);
    ngOnInit(): void;
    /**
     * Function for calling create/update limits API calls
     * @param event - any
     */
    submitLimits(event: any): void;
    /**
     * Parse response of manage limits API
     * @param response - any
     * @param requests - any[]
     */
    parseSubmitLimitsResponse(response: any, requests: any[]): void;
    /**
     * Generate list of BE errors
     * @param errors - any[]
     */
    generateBEErrors(errors: any[]): void;
    /**
     * Parse errorDetails object and return array of error
     * @param errorDetails - any
     * @return any[]
     */
    parseErrorDetails(errorDetails: any): any[];
    /**
     * Show appropriate notification after create/update limits
     * @param request - any
     * @param isError - boolean
     */
    private showLimitNotification;
    /**
     * Show error notification for limit request
     * @param request - any
     */
    private showErrorLimitNotification;
    /**
     * Show success notification for limit request
     * @param request - any
     */
    private showSuccessLimitNotification;
    /**
     * Show success pending notification for limit requests
     * @param requests - any[]
     */
    private showAllIsPendingNotification;
    /**
     * Show pending notification which happened with another failed request
     * @param request - any
     */
    private showPendingLimitNotification;
    /**
     * Show notification
     * @param messageRef - TemplateRef<any> | string
     * @param type - any
     */
    private showNotification;
    /**
     * Mapper for converting limits form value into request body for manage limits API
     * @param limitValue - any
     * @param isShadow - boolean
     */
    private generateManageLimitRequestData;
    private generateManageLimitRequestUpdateData;
    /**
     * Limit currency getter
     */
    get getCurrency(): any;
    /**
     * OpenChange modal window event handler.
     * @param isOpen - boolean
     */
    onOpenChange(isOpen: boolean): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ManageLimitsModalComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ManageLimitsModalComponent, "bb-manage-limits-modal", never, { "view": "view"; "limitBounds": "limitBounds"; "showRegularLimit": "showRegularLimit"; "showShadowLimit": "showShadowLimit"; "currency": "currency"; "limitKey": "limitKey"; "limitIds": "limitIds"; "pending": "pending"; "headerTitle": "headerTitle"; "serviceAgreementId": "serviceAgreementId"; "legalEntityId": "legalEntityId"; "headerSubTitleUserName": "headerSubTitleUserName"; "headerSubTitleJRName": "headerSubTitleJRName"; "headerSubTitleLEName": "headerSubTitleLEName"; "headerSubTitleSAName": "headerSubTitleSAName"; "notificationDismissTime": "notificationDismissTime"; }, { "close": "close"; }, never, never>;
}
export declare class ManageLimitsModalCustomizableDirective extends BbTemplate<ManageLimitsModalComponent, {
    pendingSubmit: boolean | null;
    errorsBE: any[] | null;
    disableRegular: boolean | null;
    disableShadow: boolean | null;
}> {
    static ɵfac: i0.ɵɵFactoryDeclaration<ManageLimitsModalCustomizableDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<ManageLimitsModalCustomizableDirective, "[bbManageLimitsModalCustomizable]", never, {}, {}, never>;
}
