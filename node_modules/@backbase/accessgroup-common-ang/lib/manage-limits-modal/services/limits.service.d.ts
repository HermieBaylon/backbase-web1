import { Observable } from 'rxjs';
import { LimitsHttpService, CreateLimitRequestBody, LimitsPostResponseBody, UpdateLimitRequestBody, LimitByUuidPutResponseBody, LimitConsumption, LimitsRetrievalPostResponseBody, BaseLimitsRetrievalPostRequestBody, LimitKey } from '@backbase/data-ang/limits';
import * as i0 from "@angular/core";
export declare class LimitsService {
    private readonly limitsService;
    constructor(limitsService: LimitsHttpService);
    getLimitsPeriods$: Observable<any>;
    getLimitsConsumptionsRecord(currentLimitsConsumptionsRetrievalPostRequestBody: BaseLimitsRetrievalPostRequestBody): Observable<LimitConsumption[]>;
    getLimitsRetrievalRecord(limitsRetrievalPostRequestBody: BaseLimitsRetrievalPostRequestBody): Observable<LimitsRetrievalPostResponseBody[]>;
    createNewLimit(createLimitRequestBody: CreateLimitRequestBody): Observable<LimitsPostResponseBody>;
    updateLimit(uuid: string, updateLimitRequestBody: UpdateLimitRequestBody): Observable<LimitByUuidPutResponseBody>;
    /**
     * Return grouped object by type of response
     * @param data: any - object for grouping
     * @param groupByEref: string - type of gentry point
     * @param dataType: string - type of grouped data
     */
    groupedFunc(data: any, groupByEref: string, dataType: string): any;
    /**
     * Return unique key for grouping consumption limit response
     * @param type: string - type of entry point
     * @param obj: any - response object for consumption limit
     */
    getUniqueKeyConsumption(type: string, obj: any): any;
    /**
     * Return unique key for grouping lookUp key from request
     * @param type: string - type of entry point
     * @param obj: any - lookUp key from request
     */
    getUniqueKeyLookUpKey(type: string, obj: any): any;
    /**
     * Return unique key for grouping retrival limit response
     * @param type: string - type of entry point
     * @param obj: any - response object for retrival limit
     */
    getUniqueKeyRetrival(type: string, obj: any): any;
    /**
     * Return stream of limitsData
     * @param limitsRetrievalOptions
     * @param groupByEref
     * @param itemsPerRequest - number of items per request (by default 100)
     */
    getLimitsData(limitsRetrievalOptions: LimitKey[], groupByEref?: string, itemsPerRequest?: number): Observable<any>;
    private _getLimitsData;
    /**
     * Util function to divide array into array of arrays of given size
     * @param arr - original array
     * @param len - small arrays length
     */
    private chunk;
    static ɵfac: i0.ɵɵFactoryDeclaration<LimitsService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<LimitsService>;
}
