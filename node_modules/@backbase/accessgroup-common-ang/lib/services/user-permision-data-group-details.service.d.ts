import { Observable } from 'rxjs';
import { ContactsHttpService } from '@backbase/data-ang/contact-manager';
import { ProductSummaryHttpService } from '@backbase/data-ang/arrangements';
import { ServiceAgreementHttpService, ServiceAgreementsHttpService } from '@backbase/data-ang/accesscontrol';
import { ServiceAgreement, ServiceAgreementWithParticipants } from '../model/types';
import * as i0 from "@angular/core";
interface GetPayeeGroupParams {
    query?: string;
    from?: number;
    size?: number;
    targetSaId?: string;
}
export declare class UserPermissionsDataGroupDetailsService {
    private readonly contactService;
    private readonly itemsService;
    private readonly serviceAgreementHttpService;
    private readonly serviceAgreementsHttpService;
    /**
     * Service agreement from context stream
     */
    readonly serviceAgreementFromContext: Observable<ServiceAgreementWithParticipants>;
    getServiceAgreementParticipants(serviceAgreement: ServiceAgreement): Observable<ServiceAgreementWithParticipants>;
    constructor(contactService: ContactsHttpService, itemsService: ProductSummaryHttpService, serviceAgreementHttpService: ServiceAgreementHttpService, serviceAgreementsHttpService: ServiceAgreementsHttpService);
    /**
     * Send request to retrieve service agreement info
     * @param serviceAgreementId
     */
    getServiceAgreement(serviceAgreementId: string): Observable<ServiceAgreementWithParticipants>;
    getPayeeGroupContacts(contactIds: string[], params?: GetPayeeGroupParams): Observable<any>;
    getAccountGroupItems({ items, from, size, searchTerm, legalEntityIds }: any): Observable<any>;
    static ɵfac: i0.ɵɵFactoryDeclaration<UserPermissionsDataGroupDetailsService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<UserPermissionsDataGroupDetailsService>;
}
export {};
