(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common/http'), require('@backbase/foundation-ang/data-http')) :
    typeof define === 'function' && define.amd ? define('@backbase/categories-management-http-ang', ['exports', '@angular/core', '@angular/common/http', '@backbase/foundation-ang/data-http'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["categories-management-http-ang"] = {}), global.ng.core, global.ng.common.http, global.i2));
})(this, (function (exports, i0, i1, i2) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);

    var CATEGORIES_MANAGEMENT_BASE_PATH = new i0.InjectionToken('CATEGORIES_MANAGEMENT_BASE_PATH');
    var COLLECTION_FORMATS = {
        'csv': ',',
        'tsv': '   ',
        'ssv': ' ',
        'pipes': '|'
    };

    var CategoriesManagementConfiguration = /** @class */ (function () {
        function CategoriesManagementConfiguration(configurationParameters) {
            if (configurationParameters === void 0) { configurationParameters = {}; }
            this.apiKeys = configurationParameters.apiKeys;
            this.username = configurationParameters.username;
            this.password = configurationParameters.password;
            this.accessToken = configurationParameters.accessToken;
            this.basePath = configurationParameters.basePath;
            this.withCredentials = configurationParameters.withCredentials;
            this.encoder = configurationParameters.encoder;
            if (configurationParameters.credentials) {
                this.credentials = configurationParameters.credentials;
            }
            else {
                this.credentials = {};
            }
        }
        CategoriesManagementConfiguration.prototype.selectHeaderContentType = function (contentTypes) {
            var _this = this;
            if (contentTypes.length === 0) {
                return undefined;
            }
            var type = contentTypes.find(function (x) { return _this.isJsonMime(x); });
            if (type === undefined) {
                return contentTypes[0];
            }
            return type;
        };
        CategoriesManagementConfiguration.prototype.selectHeaderAccept = function (accepts) {
            var _this = this;
            if (accepts.length === 0) {
                return undefined;
            }
            var type = accepts.find(function (x) { return _this.isJsonMime(x); });
            if (type === undefined) {
                return accepts[0];
            }
            return type;
        };
        CategoriesManagementConfiguration.prototype.isJsonMime = function (mime) {
            var jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
            return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
        };
        CategoriesManagementConfiguration.prototype.lookupCredential = function (key) {
            var value = this.credentials[key];
            return typeof value === 'function'
                ? value()
                : value;
        };
        return CategoriesManagementConfiguration;
    }());
    var CONFIG_TOKEN = new i0.InjectionToken('api-data-module CategoriesManagementConfiguration');

    var CategoriesManagementApiModule = /** @class */ (function () {
        function CategoriesManagementApiModule(parentModule, http, dataModulesManager, config) {
            if (parentModule) {
                throw new Error('CategoriesManagementApiModule is already loaded. Import in your base AppModule only.');
            }
            if (!http) {
                throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                    'See also https://github.com/angular/angular/issues/20575');
            }
            if (dataModulesManager) {
                dataModulesManager.setModuleConfig(CONFIG_TOKEN, {
                    apiRoot: '',
                    servicePath: config.basePath || '',
                    headers: {},
                });
            }
        }
        CategoriesManagementApiModule.forRoot = function (configurationFactory) {
            return {
                ngModule: CategoriesManagementApiModule,
                providers: [{ provide: CategoriesManagementConfiguration, useFactory: configurationFactory }]
            };
        };
        return CategoriesManagementApiModule;
    }());
    CategoriesManagementApiModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CategoriesManagementApiModule, deps: [{ token: CategoriesManagementApiModule, optional: true, skipSelf: true }, { token: i1__namespace.HttpClient, optional: true }, { token: i2__namespace.DataModulesManager, optional: true }, { token: CategoriesManagementConfiguration }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    CategoriesManagementApiModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CategoriesManagementApiModule });
    CategoriesManagementApiModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CategoriesManagementApiModule, providers: [], imports: [[]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CategoriesManagementApiModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [],
                        declarations: [],
                        exports: [],
                        providers: []
                    }]
            }], ctorParameters: function () {
            return [{ type: CategoriesManagementApiModule, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.SkipSelf
                        }] }, { type: i1__namespace.HttpClient, decorators: [{
                            type: i0.Optional
                        }] }, { type: i2__namespace.DataModulesManager, decorators: [{
                            type: i0.Optional
                        }] }, { type: CategoriesManagementConfiguration }];
        } });

    var CustomHttpParameterCodec = /** @class */ (function () {
        function CustomHttpParameterCodec() {
        }
        CustomHttpParameterCodec.prototype.encodeKey = function (k) {
            return encodeURIComponent(k);
        };
        CustomHttpParameterCodec.prototype.encodeValue = function (v) {
            return encodeURIComponent(v);
        };
        CustomHttpParameterCodec.prototype.decodeKey = function (k) {
            return decodeURIComponent(k);
        };
        CustomHttpParameterCodec.prototype.decodeValue = function (v) {
            return decodeURIComponent(v);
        };
        return CustomHttpParameterCodec;
    }());

    var CategoriesHttpService = /** @class */ (function () {
        function CategoriesHttpService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new CategoriesManagementConfiguration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        CategoriesHttpService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        CategoriesHttpService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        CategoriesHttpService.prototype.getCategories = function (requestParameters, observe, reportProgress, options) {
            var _this = this;
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _categoryType = requestParameters["categoryType"];
            var _level = requestParameters["level"];
            var _parentId = requestParameters["parentId"];
            var _externalIds = requestParameters["externalIds"];
            var _internalIds = requestParameters["internalIds"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_categoryType !== undefined && _categoryType !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _categoryType, 'categoryType');
            }
            if (_level !== undefined && _level !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _level, 'level');
            }
            if (_parentId !== undefined && _parentId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _parentId, 'parentId');
            }
            if (_externalIds) {
                _externalIds.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'externalIds');
                });
            }
            if (_internalIds) {
                _internalIds.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'internalIds');
                });
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/categories", {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        CategoriesHttpService.prototype.getCategoriesUrl = function (requestParameters) {
            var _this = this;
            var _categoryType = requestParameters["categoryType"];
            var _level = requestParameters["level"];
            var _parentId = requestParameters["parentId"];
            var _externalIds = requestParameters["externalIds"];
            var _internalIds = requestParameters["internalIds"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_categoryType !== undefined && _categoryType !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _categoryType, 'categoryType');
            }
            if (_level !== undefined && _level !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _level, 'level');
            }
            if (_parentId !== undefined && _parentId !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _parentId, 'parentId');
            }
            if (_externalIds) {
                _externalIds.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'externalIds');
                });
            }
            if (_internalIds) {
                _internalIds.forEach(function (element) {
                    queryParameters = _this.addToHttpParams(queryParameters, element, 'internalIds');
                });
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/client-api/v2/categories" + (queryString ? "?" + queryString : '');
        };
        CategoriesHttpService.prototype.getCategory = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getCategory.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v2/categories/" + encodeURIComponent(String(_id)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        CategoriesHttpService.prototype.getCategoryUrl = function (requestParameters) {
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling getCategory.');
            }
            return this.configuration.basePath + "/client-api/v2/categories/" + encodeURIComponent(String(_id));
        };
        return CategoriesHttpService;
    }());
    CategoriesHttpService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CategoriesHttpService, deps: [{ token: i1__namespace.HttpClient }, { token: CATEGORIES_MANAGEMENT_BASE_PATH, optional: true }, { token: CategoriesManagementConfiguration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    CategoriesHttpService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CategoriesHttpService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: CategoriesHttpService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [CATEGORIES_MANAGEMENT_BASE_PATH]
                        }] }, { type: CategoriesManagementConfiguration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var CategoriesHttpServiceGetCategoriesMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/categories",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "categoryId": 1,
                            "externalId": "1",
                            "categoryName": "Home",
                            "categoryType": "Expenses",
                            "subCategories": [{
                                    "categoryId": 2,
                                    "externalId": "2",
                                    "categoryName": "Mortgage",
                                    "categoryType": "Expenses",
                                    "parentId": 1
                                }, {
                                    "categoryId": 3,
                                    "externalId": "3",
                                    "categoryName": "Rent",
                                    "categoryType": "Expenses",
                                    "parentId": 1
                                }]
                        }, {
                            "categoryId": 4,
                            "externalId": "4",
                            "categoryName": "Food & Drinks",
                            "categoryType": "Expenses",
                            "subCategories": [{
                                    "categoryId": 5,
                                    "externalId": "5",
                                    "categoryName": "Alcohol & Bars",
                                    "categoryType": "Expenses",
                                    "parentId": 4
                                }, {
                                    "categoryId": 6,
                                    "externalId": "600",
                                    "categoryName": "Fast Food",
                                    "categoryType": "Expenses",
                                    "parentId": 4
                                }, {
                                    "categoryId": 7,
                                    "externalId": "7",
                                    "categoryName": "Groceries",
                                    "categoryType": "Expenses",
                                    "parentId": 4
                                }, {
                                    "categoryId": 8,
                                    "externalId": "8",
                                    "categoryName": "Restaurants",
                                    "categoryType": "Expenses",
                                    "parentId": 4
                                }]
                        }, {
                            "categoryId": 9,
                            "externalId": "9",
                            "categoryName": "Health & Beauty",
                            "categoryType": "Expenses",
                            "subCategories": [{
                                    "categoryId": 10,
                                    "externalId": "10",
                                    "categoryName": "Beauty",
                                    "categoryType": "Expenses",
                                    "parentId": 9
                                }, {
                                    "categoryId": 11,
                                    "externalId": "11",
                                    "categoryName": "Health & Fitness",
                                    "categoryType": "Expenses",
                                    "parentId": 9
                                }]
                        }, {
                            "categoryId": 12,
                            "externalId": "12",
                            "categoryName": "Transportation",
                            "categoryType": "Expenses",
                            "subCategories": [{
                                    "categoryId": 13,
                                    "externalId": "13",
                                    "categoryName": "Car",
                                    "categoryType": "Expenses",
                                    "parentId": 12
                                }, {
                                    "categoryId": 14,
                                    "externalId": "14",
                                    "categoryName": "Public Transport",
                                    "categoryType": "Expenses",
                                    "parentId": 12
                                }]
                        }, {
                            "categoryId": 15,
                            "externalId": "15",
                            "categoryName": "Shopping",
                            "categoryType": "Expenses",
                            "subCategories": [{
                                    "categoryId": 16,
                                    "externalId": "16",
                                    "categoryName": "Clothing",
                                    "categoryType": "Expenses",
                                    "parentId": 15
                                }, {
                                    "categoryId": 17,
                                    "externalId": "17",
                                    "categoryName": "Electronics",
                                    "categoryType": "Expenses",
                                    "parentId": 15
                                }]
                        }, {
                            "categoryId": 18,
                            "externalId": "18",
                            "categoryName": "Hobbies & Entertainment",
                            "categoryType": "Expenses"
                        }, {
                            "categoryId": 19,
                            "externalId": "19",
                            "categoryName": "Bills & Utilities",
                            "categoryType": "Expenses",
                            "subCategories": [{
                                    "categoryId": 20,
                                    "externalId": "20",
                                    "categoryName": "Internet",
                                    "categoryType": "Expenses",
                                    "parentId": 19
                                }, {
                                    "categoryId": 21,
                                    "externalId": "21",
                                    "categoryName": "Mobile Phone",
                                    "categoryType": "Expenses",
                                    "parentId": 19
                                }, {
                                    "categoryId": 22,
                                    "externalId": "22",
                                    "categoryName": "Utilities",
                                    "categoryType": "Expenses",
                                    "parentId": 19
                                }]
                        }, {
                            "categoryId": 23,
                            "externalId": "23",
                            "categoryName": "Income",
                            "categoryType": "Income",
                            "subCategories": [{
                                    "categoryId": 24,
                                    "externalId": "24",
                                    "categoryName": "Bonus",
                                    "categoryType": "Income",
                                    "parentId": 23
                                }, {
                                    "categoryId": 25,
                                    "externalId": "25",
                                    "categoryName": "Salary/Wages",
                                    "categoryType": "Income",
                                    "parentId": 23
                                }]
                        }, {
                            "categoryId": 26,
                            "externalId": "26",
                            "categoryName": "Other Income",
                            "categoryType": "Income",
                            "subCategories": [{
                                    "categoryId": 27,
                                    "externalId": "27",
                                    "categoryName": "Interest Income",
                                    "categoryType": "Income",
                                    "parentId": 26
                                }, {
                                    "categoryId": 28,
                                    "externalId": "28",
                                    "categoryName": "Rental Income",
                                    "categoryType": "Income",
                                    "parentId": 26
                                }]
                        }, {
                            "categoryId": 29,
                            "externalId": "29",
                            "categoryName": "Transfers",
                            "categoryType": "Transfer"
                        }, {
                            "categoryId": 30,
                            "externalId": "30",
                            "categoryName": "Uncategorised",
                            "categoryType": "General"
                        }]
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var CategoriesHttpServiceGetCategoryMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v2/categories/{id}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "categoryId": 1,
                        "externalId": "1",
                        "categoryName": "Home",
                        "categoryType": "Expenses",
                        "subCategories": [{
                                "categoryId": 2,
                                "externalId": "2",
                                "categoryName": "Mortgage",
                                "categoryType": "Expenses",
                                "parentId": 1
                            }, {
                                "categoryId": 3,
                                "externalId": "3",
                                "categoryName": "Rent",
                                "categoryType": "Expenses",
                                "parentId": 1
                            }]
                    }
                },
                {
                    status: 200,
                    body: {
                        "categoryType": "categoryType",
                        "externalId": "externalId",
                        "iconLocation": "iconLocation",
                        "categoryName": "categoryName",
                        "categoryId": 0,
                        "transactionId": "transactionId",
                        "parentId": 6,
                        "subCategories": [{
                                "categoryType": "categoryType",
                                "externalId": "externalId",
                                "iconLocation": "iconLocation",
                                "categoryName": "categoryName",
                                "categoryId": 1,
                                "transactionId": "transactionId",
                                "parentId": 5
                            }, {
                                "categoryType": "categoryType",
                                "externalId": "externalId",
                                "iconLocation": "iconLocation",
                                "categoryName": "categoryName",
                                "categoryId": 1,
                                "transactionId": "transactionId",
                                "parentId": 5
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var CategoriesHttpServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/client-api/v2/categories",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: [{
                            "categoryId": 1,
                            "externalId": "1",
                            "categoryName": "Home",
                            "categoryType": "Expenses",
                            "subCategories": [{
                                    "categoryId": 2,
                                    "externalId": "2",
                                    "categoryName": "Mortgage",
                                    "categoryType": "Expenses",
                                    "parentId": 1
                                }, {
                                    "categoryId": 3,
                                    "externalId": "3",
                                    "categoryName": "Rent",
                                    "categoryType": "Expenses",
                                    "parentId": 1
                                }]
                        }, {
                            "categoryId": 4,
                            "externalId": "4",
                            "categoryName": "Food & Drinks",
                            "categoryType": "Expenses",
                            "subCategories": [{
                                    "categoryId": 5,
                                    "externalId": "5",
                                    "categoryName": "Alcohol & Bars",
                                    "categoryType": "Expenses",
                                    "parentId": 4
                                }, {
                                    "categoryId": 6,
                                    "externalId": "600",
                                    "categoryName": "Fast Food",
                                    "categoryType": "Expenses",
                                    "parentId": 4
                                }, {
                                    "categoryId": 7,
                                    "externalId": "7",
                                    "categoryName": "Groceries",
                                    "categoryType": "Expenses",
                                    "parentId": 4
                                }, {
                                    "categoryId": 8,
                                    "externalId": "8",
                                    "categoryName": "Restaurants",
                                    "categoryType": "Expenses",
                                    "parentId": 4
                                }]
                        }, {
                            "categoryId": 9,
                            "externalId": "9",
                            "categoryName": "Health & Beauty",
                            "categoryType": "Expenses",
                            "subCategories": [{
                                    "categoryId": 10,
                                    "externalId": "10",
                                    "categoryName": "Beauty",
                                    "categoryType": "Expenses",
                                    "parentId": 9
                                }, {
                                    "categoryId": 11,
                                    "externalId": "11",
                                    "categoryName": "Health & Fitness",
                                    "categoryType": "Expenses",
                                    "parentId": 9
                                }]
                        }, {
                            "categoryId": 12,
                            "externalId": "12",
                            "categoryName": "Transportation",
                            "categoryType": "Expenses",
                            "subCategories": [{
                                    "categoryId": 13,
                                    "externalId": "13",
                                    "categoryName": "Car",
                                    "categoryType": "Expenses",
                                    "parentId": 12
                                }, {
                                    "categoryId": 14,
                                    "externalId": "14",
                                    "categoryName": "Public Transport",
                                    "categoryType": "Expenses",
                                    "parentId": 12
                                }]
                        }, {
                            "categoryId": 15,
                            "externalId": "15",
                            "categoryName": "Shopping",
                            "categoryType": "Expenses",
                            "subCategories": [{
                                    "categoryId": 16,
                                    "externalId": "16",
                                    "categoryName": "Clothing",
                                    "categoryType": "Expenses",
                                    "parentId": 15
                                }, {
                                    "categoryId": 17,
                                    "externalId": "17",
                                    "categoryName": "Electronics",
                                    "categoryType": "Expenses",
                                    "parentId": 15
                                }]
                        }, {
                            "categoryId": 18,
                            "externalId": "18",
                            "categoryName": "Hobbies & Entertainment",
                            "categoryType": "Expenses"
                        }, {
                            "categoryId": 19,
                            "externalId": "19",
                            "categoryName": "Bills & Utilities",
                            "categoryType": "Expenses",
                            "subCategories": [{
                                    "categoryId": 20,
                                    "externalId": "20",
                                    "categoryName": "Internet",
                                    "categoryType": "Expenses",
                                    "parentId": 19
                                }, {
                                    "categoryId": 21,
                                    "externalId": "21",
                                    "categoryName": "Mobile Phone",
                                    "categoryType": "Expenses",
                                    "parentId": 19
                                }, {
                                    "categoryId": 22,
                                    "externalId": "22",
                                    "categoryName": "Utilities",
                                    "categoryType": "Expenses",
                                    "parentId": 19
                                }]
                        }, {
                            "categoryId": 23,
                            "externalId": "23",
                            "categoryName": "Income",
                            "categoryType": "Income",
                            "subCategories": [{
                                    "categoryId": 24,
                                    "externalId": "24",
                                    "categoryName": "Bonus",
                                    "categoryType": "Income",
                                    "parentId": 23
                                }, {
                                    "categoryId": 25,
                                    "externalId": "25",
                                    "categoryName": "Salary/Wages",
                                    "categoryType": "Income",
                                    "parentId": 23
                                }]
                        }, {
                            "categoryId": 26,
                            "externalId": "26",
                            "categoryName": "Other Income",
                            "categoryType": "Income",
                            "subCategories": [{
                                    "categoryId": 27,
                                    "externalId": "27",
                                    "categoryName": "Interest Income",
                                    "categoryType": "Income",
                                    "parentId": 26
                                }, {
                                    "categoryId": 28,
                                    "externalId": "28",
                                    "categoryName": "Rental Income",
                                    "categoryType": "Income",
                                    "parentId": 26
                                }]
                        }, {
                            "categoryId": 29,
                            "externalId": "29",
                            "categoryName": "Transfers",
                            "categoryType": "Transfer"
                        }, {
                            "categoryId": 30,
                            "externalId": "30",
                            "categoryName": "Uncategorised",
                            "categoryType": "General"
                        }]
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 401,
                    body: {
                        "message": "Access to requested resource denied.",
                        "errors": [{
                                "message": "Resource access denied due to invalid credentials.",
                                "key": "common.api.token",
                                "context": {
                                    "accessToken": "expired"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v2/categories/{id}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "categoryId": 1,
                        "externalId": "1",
                        "categoryName": "Home",
                        "categoryType": "Expenses",
                        "subCategories": [{
                                "categoryId": 2,
                                "externalId": "2",
                                "categoryName": "Mortgage",
                                "categoryType": "Expenses",
                                "parentId": 1
                            }, {
                                "categoryId": 3,
                                "externalId": "3",
                                "categoryName": "Rent",
                                "categoryType": "Expenses",
                                "parentId": 1
                            }]
                    }
                },
                {
                    status: 200,
                    body: {
                        "categoryType": "categoryType",
                        "externalId": "externalId",
                        "iconLocation": "iconLocation",
                        "categoryName": "categoryName",
                        "categoryId": 0,
                        "transactionId": "transactionId",
                        "parentId": 6,
                        "subCategories": [{
                                "categoryType": "categoryType",
                                "externalId": "externalId",
                                "iconLocation": "iconLocation",
                                "categoryName": "categoryName",
                                "categoryId": 1,
                                "transactionId": "transactionId",
                                "parentId": 5
                            }, {
                                "categoryType": "categoryType",
                                "externalId": "externalId",
                                "iconLocation": "iconLocation",
                                "categoryName": "categoryName",
                                "categoryId": 1,
                                "transactionId": "transactionId",
                                "parentId": 5
                            }]
                    }
                },
                {
                    status: 400,
                    body: {
                        "message": "Bad Request",
                        "errors": [{
                                "message": "Value Exceeded. Must be between {min} and {max}.",
                                "key": "common.api.shoesize",
                                "context": {
                                    "max": "50",
                                    "min": "1"
                                }
                            }]
                    }
                },
                {
                    status: 404,
                    body: {
                        "message": "Resource not found.",
                        "errors": [{
                                "message": "Unable to find the resource requested resource: {resource}.",
                                "key": "common.api.resource",
                                "context": {
                                    "resource": "aResource"
                                }
                            }]
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
    ]);

    exports.CATEGORIES_MANAGEMENT_BASE_PATH = CATEGORIES_MANAGEMENT_BASE_PATH;
    exports.COLLECTION_FORMATS = COLLECTION_FORMATS;
    exports.CONFIG_TOKEN = CONFIG_TOKEN;
    exports.CategoriesHttpService = CategoriesHttpService;
    exports.CategoriesHttpServiceGetCategoriesMocksProvider = CategoriesHttpServiceGetCategoriesMocksProvider;
    exports.CategoriesHttpServiceGetCategoryMocksProvider = CategoriesHttpServiceGetCategoryMocksProvider;
    exports.CategoriesHttpServiceMocksProvider = CategoriesHttpServiceMocksProvider;
    exports.CategoriesManagementApiModule = CategoriesManagementApiModule;
    exports.CategoriesManagementConfiguration = CategoriesManagementConfiguration;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-categories-management-http-ang.umd.js.map
