import * as i0 from '@angular/core';
import { InjectionToken, NgModule, Optional, SkipSelf, Injectable, Inject } from '@angular/core';
import * as i1 from '@angular/common/http';
import { HttpHeaders, HttpParams } from '@angular/common/http';
import * as i2 from '@backbase/foundation-ang/data-http';
import { createMocks } from '@backbase/foundation-ang/data-http';

const CATEGORIES_MANAGEMENT_BASE_PATH = new InjectionToken('CATEGORIES_MANAGEMENT_BASE_PATH');
const COLLECTION_FORMATS = {
    'csv': ',',
    'tsv': '   ',
    'ssv': ' ',
    'pipes': '|'
};

class CategoriesManagementConfiguration {
    constructor(configurationParameters = {}) {
        this.apiKeys = configurationParameters.apiKeys;
        this.username = configurationParameters.username;
        this.password = configurationParameters.password;
        this.accessToken = configurationParameters.accessToken;
        this.basePath = configurationParameters.basePath;
        this.withCredentials = configurationParameters.withCredentials;
        this.encoder = configurationParameters.encoder;
        if (configurationParameters.credentials) {
            this.credentials = configurationParameters.credentials;
        }
        else {
            this.credentials = {};
        }
    }
    selectHeaderContentType(contentTypes) {
        if (contentTypes.length === 0) {
            return undefined;
        }
        const type = contentTypes.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return contentTypes[0];
        }
        return type;
    }
    selectHeaderAccept(accepts) {
        if (accepts.length === 0) {
            return undefined;
        }
        const type = accepts.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return accepts[0];
        }
        return type;
    }
    isJsonMime(mime) {
        const jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
    lookupCredential(key) {
        const value = this.credentials[key];
        return typeof value === 'function'
            ? value()
            : value;
    }
}
const CONFIG_TOKEN = new InjectionToken('api-data-module CategoriesManagementConfiguration');

class CategoriesManagementApiModule {
    constructor(parentModule, http, dataModulesManager, config) {
        if (parentModule) {
            throw new Error('CategoriesManagementApiModule is already loaded. Import in your base AppModule only.');
        }
        if (!http) {
            throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                'See also https://github.com/angular/angular/issues/20575');
        }
        if (dataModulesManager) {
            dataModulesManager.setModuleConfig(CONFIG_TOKEN, {
                apiRoot: '',
                servicePath: config.basePath || '',
                headers: {},
            });
        }
    }
    static forRoot(configurationFactory) {
        return {
            ngModule: CategoriesManagementApiModule,
            providers: [{ provide: CategoriesManagementConfiguration, useFactory: configurationFactory }]
        };
    }
}
CategoriesManagementApiModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CategoriesManagementApiModule, deps: [{ token: CategoriesManagementApiModule, optional: true, skipSelf: true }, { token: i1.HttpClient, optional: true }, { token: i2.DataModulesManager, optional: true }, { token: CategoriesManagementConfiguration }], target: i0.ɵɵFactoryTarget.NgModule });
CategoriesManagementApiModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CategoriesManagementApiModule });
CategoriesManagementApiModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CategoriesManagementApiModule, providers: [], imports: [[]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CategoriesManagementApiModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [],
                    declarations: [],
                    exports: [],
                    providers: []
                }]
        }], ctorParameters: function () { return [{ type: CategoriesManagementApiModule, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: i1.HttpClient, decorators: [{
                    type: Optional
                }] }, { type: i2.DataModulesManager, decorators: [{
                    type: Optional
                }] }, { type: CategoriesManagementConfiguration }]; } });

class CustomHttpParameterCodec {
    encodeKey(k) {
        return encodeURIComponent(k);
    }
    encodeValue(v) {
        return encodeURIComponent(v);
    }
    decodeKey(k) {
        return decodeURIComponent(k);
    }
    decodeValue(v) {
        return decodeURIComponent(v);
    }
}

class CategoriesHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new CategoriesManagementConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    getCategories(requestParameters, observe = 'body', reportProgress = false, options) {
        const _categoryType = requestParameters["categoryType"];
        const _level = requestParameters["level"];
        const _parentId = requestParameters["parentId"];
        const _externalIds = requestParameters["externalIds"];
        const _internalIds = requestParameters["internalIds"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_categoryType !== undefined && _categoryType !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _categoryType, 'categoryType');
        }
        if (_level !== undefined && _level !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _level, 'level');
        }
        if (_parentId !== undefined && _parentId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _parentId, 'parentId');
        }
        if (_externalIds) {
            _externalIds.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'externalIds');
            });
        }
        if (_internalIds) {
            _internalIds.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'internalIds');
            });
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/categories`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getCategoriesUrl(requestParameters) {
        const _categoryType = requestParameters["categoryType"];
        const _level = requestParameters["level"];
        const _parentId = requestParameters["parentId"];
        const _externalIds = requestParameters["externalIds"];
        const _internalIds = requestParameters["internalIds"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_categoryType !== undefined && _categoryType !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _categoryType, 'categoryType');
        }
        if (_level !== undefined && _level !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _level, 'level');
        }
        if (_parentId !== undefined && _parentId !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _parentId, 'parentId');
        }
        if (_externalIds) {
            _externalIds.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'externalIds');
            });
        }
        if (_internalIds) {
            _internalIds.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'internalIds');
            });
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/categories${queryString ? `?${queryString}` : ''}`;
    }
    getCategory(requestParameters, observe = 'body', reportProgress = false, options) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getCategory.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/categories/${encodeURIComponent(String(_id))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getCategoryUrl(requestParameters) {
        const _id = requestParameters["id"];
        if (_id === null || _id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getCategory.');
        }
        return `${this.configuration.basePath}/client-api/v2/categories/${encodeURIComponent(String(_id))}`;
    }
}
CategoriesHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CategoriesHttpService, deps: [{ token: i1.HttpClient }, { token: CATEGORIES_MANAGEMENT_BASE_PATH, optional: true }, { token: CategoriesManagementConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
CategoriesHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CategoriesHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CategoriesHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [CATEGORIES_MANAGEMENT_BASE_PATH]
                }] }, { type: CategoriesManagementConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const CategoriesHttpServiceGetCategoriesMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/categories",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "categoryId": 1,
                        "externalId": "1",
                        "categoryName": "Home",
                        "categoryType": "Expenses",
                        "subCategories": [{
                                "categoryId": 2,
                                "externalId": "2",
                                "categoryName": "Mortgage",
                                "categoryType": "Expenses",
                                "parentId": 1
                            }, {
                                "categoryId": 3,
                                "externalId": "3",
                                "categoryName": "Rent",
                                "categoryType": "Expenses",
                                "parentId": 1
                            }]
                    }, {
                        "categoryId": 4,
                        "externalId": "4",
                        "categoryName": "Food & Drinks",
                        "categoryType": "Expenses",
                        "subCategories": [{
                                "categoryId": 5,
                                "externalId": "5",
                                "categoryName": "Alcohol & Bars",
                                "categoryType": "Expenses",
                                "parentId": 4
                            }, {
                                "categoryId": 6,
                                "externalId": "600",
                                "categoryName": "Fast Food",
                                "categoryType": "Expenses",
                                "parentId": 4
                            }, {
                                "categoryId": 7,
                                "externalId": "7",
                                "categoryName": "Groceries",
                                "categoryType": "Expenses",
                                "parentId": 4
                            }, {
                                "categoryId": 8,
                                "externalId": "8",
                                "categoryName": "Restaurants",
                                "categoryType": "Expenses",
                                "parentId": 4
                            }]
                    }, {
                        "categoryId": 9,
                        "externalId": "9",
                        "categoryName": "Health & Beauty",
                        "categoryType": "Expenses",
                        "subCategories": [{
                                "categoryId": 10,
                                "externalId": "10",
                                "categoryName": "Beauty",
                                "categoryType": "Expenses",
                                "parentId": 9
                            }, {
                                "categoryId": 11,
                                "externalId": "11",
                                "categoryName": "Health & Fitness",
                                "categoryType": "Expenses",
                                "parentId": 9
                            }]
                    }, {
                        "categoryId": 12,
                        "externalId": "12",
                        "categoryName": "Transportation",
                        "categoryType": "Expenses",
                        "subCategories": [{
                                "categoryId": 13,
                                "externalId": "13",
                                "categoryName": "Car",
                                "categoryType": "Expenses",
                                "parentId": 12
                            }, {
                                "categoryId": 14,
                                "externalId": "14",
                                "categoryName": "Public Transport",
                                "categoryType": "Expenses",
                                "parentId": 12
                            }]
                    }, {
                        "categoryId": 15,
                        "externalId": "15",
                        "categoryName": "Shopping",
                        "categoryType": "Expenses",
                        "subCategories": [{
                                "categoryId": 16,
                                "externalId": "16",
                                "categoryName": "Clothing",
                                "categoryType": "Expenses",
                                "parentId": 15
                            }, {
                                "categoryId": 17,
                                "externalId": "17",
                                "categoryName": "Electronics",
                                "categoryType": "Expenses",
                                "parentId": 15
                            }]
                    }, {
                        "categoryId": 18,
                        "externalId": "18",
                        "categoryName": "Hobbies & Entertainment",
                        "categoryType": "Expenses"
                    }, {
                        "categoryId": 19,
                        "externalId": "19",
                        "categoryName": "Bills & Utilities",
                        "categoryType": "Expenses",
                        "subCategories": [{
                                "categoryId": 20,
                                "externalId": "20",
                                "categoryName": "Internet",
                                "categoryType": "Expenses",
                                "parentId": 19
                            }, {
                                "categoryId": 21,
                                "externalId": "21",
                                "categoryName": "Mobile Phone",
                                "categoryType": "Expenses",
                                "parentId": 19
                            }, {
                                "categoryId": 22,
                                "externalId": "22",
                                "categoryName": "Utilities",
                                "categoryType": "Expenses",
                                "parentId": 19
                            }]
                    }, {
                        "categoryId": 23,
                        "externalId": "23",
                        "categoryName": "Income",
                        "categoryType": "Income",
                        "subCategories": [{
                                "categoryId": 24,
                                "externalId": "24",
                                "categoryName": "Bonus",
                                "categoryType": "Income",
                                "parentId": 23
                            }, {
                                "categoryId": 25,
                                "externalId": "25",
                                "categoryName": "Salary/Wages",
                                "categoryType": "Income",
                                "parentId": 23
                            }]
                    }, {
                        "categoryId": 26,
                        "externalId": "26",
                        "categoryName": "Other Income",
                        "categoryType": "Income",
                        "subCategories": [{
                                "categoryId": 27,
                                "externalId": "27",
                                "categoryName": "Interest Income",
                                "categoryType": "Income",
                                "parentId": 26
                            }, {
                                "categoryId": 28,
                                "externalId": "28",
                                "categoryName": "Rental Income",
                                "categoryType": "Income",
                                "parentId": 26
                            }]
                    }, {
                        "categoryId": 29,
                        "externalId": "29",
                        "categoryName": "Transfers",
                        "categoryType": "Transfer"
                    }, {
                        "categoryId": 30,
                        "externalId": "30",
                        "categoryName": "Uncategorised",
                        "categoryType": "General"
                    }]
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const CategoriesHttpServiceGetCategoryMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/categories/{id}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "categoryId": 1,
                    "externalId": "1",
                    "categoryName": "Home",
                    "categoryType": "Expenses",
                    "subCategories": [{
                            "categoryId": 2,
                            "externalId": "2",
                            "categoryName": "Mortgage",
                            "categoryType": "Expenses",
                            "parentId": 1
                        }, {
                            "categoryId": 3,
                            "externalId": "3",
                            "categoryName": "Rent",
                            "categoryType": "Expenses",
                            "parentId": 1
                        }]
                }
            },
            {
                status: 200,
                body: {
                    "categoryType": "categoryType",
                    "externalId": "externalId",
                    "iconLocation": "iconLocation",
                    "categoryName": "categoryName",
                    "categoryId": 0,
                    "transactionId": "transactionId",
                    "parentId": 6,
                    "subCategories": [{
                            "categoryType": "categoryType",
                            "externalId": "externalId",
                            "iconLocation": "iconLocation",
                            "categoryName": "categoryName",
                            "categoryId": 1,
                            "transactionId": "transactionId",
                            "parentId": 5
                        }, {
                            "categoryType": "categoryType",
                            "externalId": "externalId",
                            "iconLocation": "iconLocation",
                            "categoryName": "categoryName",
                            "categoryId": 1,
                            "transactionId": "transactionId",
                            "parentId": 5
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const CategoriesHttpServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v2/categories",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "categoryId": 1,
                        "externalId": "1",
                        "categoryName": "Home",
                        "categoryType": "Expenses",
                        "subCategories": [{
                                "categoryId": 2,
                                "externalId": "2",
                                "categoryName": "Mortgage",
                                "categoryType": "Expenses",
                                "parentId": 1
                            }, {
                                "categoryId": 3,
                                "externalId": "3",
                                "categoryName": "Rent",
                                "categoryType": "Expenses",
                                "parentId": 1
                            }]
                    }, {
                        "categoryId": 4,
                        "externalId": "4",
                        "categoryName": "Food & Drinks",
                        "categoryType": "Expenses",
                        "subCategories": [{
                                "categoryId": 5,
                                "externalId": "5",
                                "categoryName": "Alcohol & Bars",
                                "categoryType": "Expenses",
                                "parentId": 4
                            }, {
                                "categoryId": 6,
                                "externalId": "600",
                                "categoryName": "Fast Food",
                                "categoryType": "Expenses",
                                "parentId": 4
                            }, {
                                "categoryId": 7,
                                "externalId": "7",
                                "categoryName": "Groceries",
                                "categoryType": "Expenses",
                                "parentId": 4
                            }, {
                                "categoryId": 8,
                                "externalId": "8",
                                "categoryName": "Restaurants",
                                "categoryType": "Expenses",
                                "parentId": 4
                            }]
                    }, {
                        "categoryId": 9,
                        "externalId": "9",
                        "categoryName": "Health & Beauty",
                        "categoryType": "Expenses",
                        "subCategories": [{
                                "categoryId": 10,
                                "externalId": "10",
                                "categoryName": "Beauty",
                                "categoryType": "Expenses",
                                "parentId": 9
                            }, {
                                "categoryId": 11,
                                "externalId": "11",
                                "categoryName": "Health & Fitness",
                                "categoryType": "Expenses",
                                "parentId": 9
                            }]
                    }, {
                        "categoryId": 12,
                        "externalId": "12",
                        "categoryName": "Transportation",
                        "categoryType": "Expenses",
                        "subCategories": [{
                                "categoryId": 13,
                                "externalId": "13",
                                "categoryName": "Car",
                                "categoryType": "Expenses",
                                "parentId": 12
                            }, {
                                "categoryId": 14,
                                "externalId": "14",
                                "categoryName": "Public Transport",
                                "categoryType": "Expenses",
                                "parentId": 12
                            }]
                    }, {
                        "categoryId": 15,
                        "externalId": "15",
                        "categoryName": "Shopping",
                        "categoryType": "Expenses",
                        "subCategories": [{
                                "categoryId": 16,
                                "externalId": "16",
                                "categoryName": "Clothing",
                                "categoryType": "Expenses",
                                "parentId": 15
                            }, {
                                "categoryId": 17,
                                "externalId": "17",
                                "categoryName": "Electronics",
                                "categoryType": "Expenses",
                                "parentId": 15
                            }]
                    }, {
                        "categoryId": 18,
                        "externalId": "18",
                        "categoryName": "Hobbies & Entertainment",
                        "categoryType": "Expenses"
                    }, {
                        "categoryId": 19,
                        "externalId": "19",
                        "categoryName": "Bills & Utilities",
                        "categoryType": "Expenses",
                        "subCategories": [{
                                "categoryId": 20,
                                "externalId": "20",
                                "categoryName": "Internet",
                                "categoryType": "Expenses",
                                "parentId": 19
                            }, {
                                "categoryId": 21,
                                "externalId": "21",
                                "categoryName": "Mobile Phone",
                                "categoryType": "Expenses",
                                "parentId": 19
                            }, {
                                "categoryId": 22,
                                "externalId": "22",
                                "categoryName": "Utilities",
                                "categoryType": "Expenses",
                                "parentId": 19
                            }]
                    }, {
                        "categoryId": 23,
                        "externalId": "23",
                        "categoryName": "Income",
                        "categoryType": "Income",
                        "subCategories": [{
                                "categoryId": 24,
                                "externalId": "24",
                                "categoryName": "Bonus",
                                "categoryType": "Income",
                                "parentId": 23
                            }, {
                                "categoryId": 25,
                                "externalId": "25",
                                "categoryName": "Salary/Wages",
                                "categoryType": "Income",
                                "parentId": 23
                            }]
                    }, {
                        "categoryId": 26,
                        "externalId": "26",
                        "categoryName": "Other Income",
                        "categoryType": "Income",
                        "subCategories": [{
                                "categoryId": 27,
                                "externalId": "27",
                                "categoryName": "Interest Income",
                                "categoryType": "Income",
                                "parentId": 26
                            }, {
                                "categoryId": 28,
                                "externalId": "28",
                                "categoryName": "Rental Income",
                                "categoryType": "Income",
                                "parentId": 26
                            }]
                    }, {
                        "categoryId": 29,
                        "externalId": "29",
                        "categoryName": "Transfers",
                        "categoryType": "Transfer"
                    }, {
                        "categoryId": 30,
                        "externalId": "30",
                        "categoryName": "Uncategorised",
                        "categoryType": "General"
                    }]
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/categories/{id}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "categoryId": 1,
                    "externalId": "1",
                    "categoryName": "Home",
                    "categoryType": "Expenses",
                    "subCategories": [{
                            "categoryId": 2,
                            "externalId": "2",
                            "categoryName": "Mortgage",
                            "categoryType": "Expenses",
                            "parentId": 1
                        }, {
                            "categoryId": 3,
                            "externalId": "3",
                            "categoryName": "Rent",
                            "categoryType": "Expenses",
                            "parentId": 1
                        }]
                }
            },
            {
                status: 200,
                body: {
                    "categoryType": "categoryType",
                    "externalId": "externalId",
                    "iconLocation": "iconLocation",
                    "categoryName": "categoryName",
                    "categoryId": 0,
                    "transactionId": "transactionId",
                    "parentId": 6,
                    "subCategories": [{
                            "categoryType": "categoryType",
                            "externalId": "externalId",
                            "iconLocation": "iconLocation",
                            "categoryName": "categoryName",
                            "categoryId": 1,
                            "transactionId": "transactionId",
                            "parentId": 5
                        }, {
                            "categoryType": "categoryType",
                            "externalId": "externalId",
                            "iconLocation": "iconLocation",
                            "categoryName": "categoryName",
                            "categoryId": 1,
                            "transactionId": "transactionId",
                            "parentId": 5
                        }]
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
]);

export { CATEGORIES_MANAGEMENT_BASE_PATH, COLLECTION_FORMATS, CONFIG_TOKEN, CategoriesHttpService, CategoriesHttpServiceGetCategoriesMocksProvider, CategoriesHttpServiceGetCategoryMocksProvider, CategoriesHttpServiceMocksProvider, CategoriesManagementApiModule, CategoriesManagementConfiguration };
//# sourceMappingURL=backbase-categories-management-http-ang.js.map
