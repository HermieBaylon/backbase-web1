import { EventEmitter, OnChanges, TemplateRef } from '@angular/core';
import { DeprecationsService } from '@backbase/foundation-ang/future';
import { BarOrientation, ColorHelper, PlacementTypes, StyleTypes, ViewDimensions } from '@swimlane/ngx-charts';
import { ScaleBand, ScaleLinear } from 'd3-scale';
import { ChartBarData, ChartData, ChartDataLabels, FormattedChartDataLabels } from '../model/turnovers';
import * as i0 from "@angular/core";
export declare enum D0Types {
    positive = "positive",
    negative = "negative"
}
export declare class BbSeriesVerticalComponent implements OnChanges {
    private deprecationService;
    /**
     * The dimensions of the chart bars.
     */
    dims?: ViewDimensions;
    /**
     * The type of the chart bars.
     */
    type: string;
    /**
     * Array of Chart data objects needed for the chart to be rendered.
     */
    series: ChartBarData[] | undefined;
    /**
     * Horizonta scale of the chart bars.
     */
    xScale?: ScaleBand<string>;
    /**
     * Vertical of the chart bars.
     */
    yScale?: ScaleLinear<number, number>;
    /**
     * The color palette of the chart bars.
     */
    colors?: ColorHelper;
    /**
     * Enable/disable bars gradient.
     */
    gradient: boolean;
    /**
     * The active entries for the chart bars.
     */
    activeEntries: any[];
    /**
     * Name of the chart series.
     */
    seriesName?: string | undefined;
    /**
     * Enabel/Disable bars tooltip.
     */
    tooltipDisabled: boolean;
    /**
     * Show/Hide tooltip caret.
     */
    tooltipShowCaret: boolean;
    /**
     * Template for the bar tooltip.
     */
    tooltipTemplate: TemplateRef<any> | undefined;
    /**
     * Enable/disable bars rounded edges.
     */
    roundEdges: boolean;
    /**
     * Enable/disable bars animation.
     */
    animations: boolean;
    /**
     * Show/hide bars label.
     */
    showDataLabel: boolean;
    /**
     * Formatting for the bars labels.
     */
    dataLabelFormatting: any;
    /**
     * Chart data objects needed for the chart to be rendered.
     */
    groupData: ChartData | undefined;
    /**
     * EventEmitter for triggering a select event.
     */
    select: EventEmitter<any>;
    /**
     * EventEmitter for triggering a activate event.
     */
    activate: EventEmitter<any>;
    /**
     * EventEmitter for triggering a deactivate event.
     */
    deactivate: EventEmitter<any>;
    /**
     * EventEmitter for triggering a dataLabelHeightChanged event.
     */
    dataLabelHeightChanged: EventEmitter<any>;
    tooltipPlacement?: PlacementTypes;
    tooltipType?: StyleTypes;
    orientation: BarOrientation;
    bars: FormattedChartDataLabels[] | undefined;
    x: number | undefined;
    y: number | undefined;
    barsForDataLabels: ChartDataLabels[];
    private getColors;
    private tooltipText;
    ngOnChanges(): void;
    update(series: ChartBarData[]): void;
    updateDataLabels(series: ChartBarData[]): void;
    updatedBars(series: ChartBarData[]): ChartData[];
    private updatedLabels;
    private formatChartData;
    updateTooltipSettings(): void;
    isActive(entry: any): boolean;
    onClick(data: any): void;
    trackBy(index: number, bar: any): string;
    trackDataLabelBy(index: number, barLabel: any): string;
    constructor(deprecationService: DeprecationsService);
    static ɵfac: i0.ɵɵFactoryDeclaration<BbSeriesVerticalComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<BbSeriesVerticalComponent, "g[bb-charts-series-vertical]", never, { "dims": "dims"; "type": "type"; "series": "series"; "xScale": "xScale"; "yScale": "yScale"; "colors": "colors"; "gradient": "gradient"; "activeEntries": "activeEntries"; "seriesName": "seriesName"; "tooltipDisabled": "tooltipDisabled"; "tooltipShowCaret": "tooltipShowCaret"; "tooltipTemplate": "tooltipTemplate"; "roundEdges": "roundEdges"; "animations": "animations"; "showDataLabel": "showDataLabel"; "dataLabelFormatting": "dataLabelFormatting"; "groupData": "groupData"; }, { "select": "select"; "activate": "activate"; "deactivate": "deactivate"; "dataLabelHeightChanged": "dataLabelHeightChanged"; }, never, never>;
}
