import { HttpErrorResponse } from '@angular/common/http';
import { Turnover as TurnoverItem } from '@backbase/data-ang/transactions';
import { DataItem, Gradient } from '@swimlane/ngx-charts';
export interface ChartLabels {
    income: string;
    spending: string;
    forecast: string;
}
export interface ChartBarData {
    color?: string;
    currency: string;
    name: string;
    value: number;
}
export interface Dims {
    height: number;
    width: number;
}
export interface LabelMaxHeight {
    negative: number;
    positive: number;
}
export interface ChartData {
    series: ChartBarData[];
    name?: string;
    value?: number;
    diff?: string | number;
    currency?: string;
    badge?: string;
    background?: string;
    group?: ChartBarData[];
}
export interface ChartDataLabels {
    x: number;
    y: number;
    width: number;
    height: number;
    total?: number;
    class?: string;
    name?: string;
    offset0?: number;
    offset1?: number;
    roundEdges: boolean;
    series?: string;
}
export interface ChartColors {
    color?: string;
    gradientStops?: Gradient[];
}
export interface FormattedChartDataLabels extends ChartDataLabels, ChartColors {
    data?: ChartData;
    formattedLabel?: string;
    label?: string;
    tooltipText?: string;
    value?: number;
    graphData: DataItem;
}
export interface LegendEntries {
    label: string;
    formattedLabel: string;
    color: string | undefined;
}
export interface TurnoversData {
    turnovers: TurnoverItem[];
    forecast: Forecast[];
    additions?: {
        [key: string]: any;
    };
}
export interface Forecast extends TurnoverItem {
    forecast: boolean;
}
export interface CashFlowItem extends TurnoverItem {
    forecast?: boolean;
}
export interface TurnoversDateParams {
    periodStartDate: string;
    periodEndDate: string;
    intervalDuration: 'DAY' | 'WEEK' | 'MONTH' | 'YEAR';
    intervalStartDay?: number | undefined;
    forecast?: 'NONE' | 'AVG' | undefined;
}
export interface TurnoversGetParams extends TurnoversDateParams {
    arrangementIds: string[];
}
export interface TurnoversError {
    message: string;
    key?: string;
    context?: object;
}
export declare const parseError: (error: HttpErrorResponse) => TurnoversError;
