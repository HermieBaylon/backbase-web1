import { DatePipe } from '@angular/common';
import { Component, Directive, Input, ViewChild } from '@angular/core';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { BehaviorSubject, combineLatest, of } from 'rxjs';
import { catchError, filter, map, pluck, switchMap, tap } from 'rxjs/operators';
import { DEFAULT_INTERVAL, DEFAULT_START_DAY, PERIODS } from '../constants';
import { parseError, } from '../model/turnovers';
import { TurnoversWidgetHelpersService } from '../turnovers-widget-helpers.service';
import { TurnoversService } from '../turnovers.service';
import * as i0 from "@angular/core";
import * as i1 from "../turnovers.service";
import * as i2 from "@angular/router";
import * as i3 from "../turnovers-widget-helpers.service";
import * as i4 from "../turnovers-bar-chart/turnovers-bar-chart.component";
import * as i5 from "@backbase/ui-ang/loading-indicator";
import * as i6 from "@backbase/ui-ang/empty-state";
import * as i7 from "@angular/common";
import * as i8 from "@backbase/ui-ang/button";
export class TurnoversComponent {
    constructor(service, route, helpers) {
        this.service = service;
        this.route = route;
        this.helpers = helpers;
        /**
         * Disable/enable the forecast option on the chart.
         */
        this.forecast = false;
        this.hostRef = this;
        this.selectedTab = PERIODS[Math.max(PERIODS.map((item) => item.default).indexOf(true), 0)];
        this.isLoading = new BehaviorSubject(false);
        this.initialDateParams = {
            periodStartDate: this.helpers.periodToDate(PERIODS[0]),
            periodEndDate: new Date().toISOString().slice(0, 10),
            intervalDuration: DEFAULT_INTERVAL,
            intervalStartDay: DEFAULT_START_DAY,
        };
        this.arrangementIds = this.getRouteParam(this.route, 'selectedAccount').pipe(map((selectedAccount) => (selectedAccount ? [selectedAccount] : [])));
        this.dateParams = new BehaviorSubject(this.initialDateParams);
        this.chartSeriesData = combineLatest(this.arrangementIds, this.dateParams.asObservable()).pipe(tap(() => (this.error = undefined)), filter(([selectedAccounts]) => !!selectedAccounts.length), map(([selectedAccounts, dateParams]) => (Object.assign(Object.assign({ arrangementIds: selectedAccounts }, dateParams), { forecast: this.forecast ? 'AVG' : undefined }))), switchMap((params) => {
            this.isLoading.next(true);
            const data = this.service.loadAnalysisData(params);
            data.subscribe({ complete: () => this.isLoading.next(false) });
            return data;
        }), map((items) => items.map(this.helpers.extendTurnoverItem)), map((items) => this.helpers.getChartData(items, this.labels)), catchError((error) => {
            this.handleError(error);
            return of([]);
        }));
        this.handleError = (error) => {
            this.error = parseError(error);
            return of([]);
        };
    }
    get labels() {
        return {
            income: this.incomeRef.nativeElement.textContent,
            spending: this.spendingRef.nativeElement.textContent,
            forecast: this.forecastRef.nativeElement.textContent,
        };
    }
    getRouteParam(route, param) {
        const paramValue = route.paramMap.pipe(pluck('params', param));
        if (!route.parent) {
            return paramValue;
        }
        // ensure that level that has actual value keeps it from being cleared
        return combineLatest(paramValue, this.getRouteParam(route.parent, param)).pipe(map((params) => params[0] || params[1]));
    }
    onTabChange(num) {
        this.selectedTab = PERIODS[Math.max(PERIODS.map((item) => item.duration).indexOf(num), 0)];
        this.dateParams.next(Object.assign(Object.assign({}, this.initialDateParams), { periodStartDate: this.helpers.periodToDate(this.selectedTab), periodEndDate: new Date().toISOString().slice(0, 10) }));
    }
}
TurnoversComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TurnoversComponent, deps: [{ token: i1.TurnoversService }, { token: i2.ActivatedRoute }, { token: i3.TurnoversWidgetHelpersService }], target: i0.ɵɵFactoryTarget.Component });
TurnoversComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TurnoversComponent, selector: "bb-turnovers", inputs: { forecast: "forecast" }, providers: [TurnoversService, DatePipe, TurnoversWidgetHelpersService], viewQueries: [{ propertyName: "incomeRef", first: true, predicate: ["incomeLabel"], descendants: true, static: true }, { propertyName: "spendingRef", first: true, predicate: ["spendingLabel"], descendants: true, static: true }, { propertyName: "forecastRef", first: true, predicate: ["forecastLabel"], descendants: true, static: true }], ngImport: i0, template: "<ng-container *ngIf=\"(arrangementIds | async)?.length; else emptyState\">\n  <ng-container *ngIf=\"chartSeriesData | async; let data; else loadingState\">\n    <div *ngIf=\"!error; else errorState\">\n      <div *ngIf=\"data.length; else emptyState\">\n        <ng-container \n          bbTurnoversItemCustomizable \n          [bbHostRef]=\"hostRef\" \n          [bbTemplateContext]=\"data\"\n        ></ng-container>\n      </div>\n    </div>\n  </ng-container>\n</ng-container>\n\n<ng-template bbTurnoversItemCustomizable let-hostRef let-chartSeriesData=\"context\">\n  <ng-container bbTurnoversControlsCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n  <bb-turnovers-bar-chart\n    *ngIf=\"(isLoading | async) === false; else loadingState\"\n    class=\"bb-turnovers-bar-chart bb-chart\"\n    [chartSeriesData]=\"chartSeriesData\"\n    [forecast]=\"forecast\">\n  </bb-turnovers-bar-chart>\n</ng-template>\n<ng-template bbTurnoversControlsCustomizable let-hostRef>\n  <div class=\"bb-turnovers-controls\">\n    <div class=\"btn-group btn-group-sm\">\n      <button\n        bbButton\n        data-role=\"6-month-btn\"\n        [value]='6'\n        (click)=\"hostRef.onTabChange(6)\"\n        [color]=\"hostRef.selectedTab.duration === 6 ? 'primary' : 'secondary'\"\n        i18n=\"Data period|Six month label@@turnovers.label.duration.month.six\"\n      >\n        6 Months\n      </button>\n      <button\n        bbButton \n        data-role=\"12-month-btn\"\n        [value]='12'\n        (click)=\"hostRef.onTabChange(12)\"\n        [color]=\"hostRef.selectedTab.duration === 12 ? 'primary' : 'secondary'\"\n        i18n=\"Data period|Twelve month label@@turnovers.label.duration.month.twelve\"\n      >\n        12 Months\n      </button>\n    </div>\n  </div>\n</ng-template>\n\n<ng-template #loadingState>\n  <bb-loading-indicator-ui\n    i18n-text=\"Loading turnovers data|Text to display while loading turnovers@@turnovers.state.loadingTurnovers\"\n    text=\"Loading transactions data...\"\n  ></bb-loading-indicator-ui>\n</ng-template>\n\n<ng-template #emptyState>\n  <ng-container bbTurnoversEmptyStateCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n</ng-template>\n\n<ng-template bbTurnoversEmptyStateCustomizable let-hostRef>\n  <ng-container bbTurnoversControlsCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n    <bb-empty-state-ui\n      i18n-title=\"No data title|Title of a message that is shown when there are no turnovers@@turnovers.state.noResultsFound.title\"\n      title=\"No data found\"\n      i18n-subtitle=\"No data subtitle|Subtitle of a message that is shown when there are no turnovers@@turnovers.state.noResultsFound.subtitle\"\n      subtitle=\"You don't have any data to be displayed. Please try selecting a different period.\"\n      iconSize=\"xxl\"\n      iconModifier=\"bar-chart\"\n    ></bb-empty-state-ui>\n</ng-template>\n\n<ng-template #errorState>\n  <bb-empty-state-ui\n    data-role=\"errorState\"\n    title=\"\"\n    [subtitle]=\"error?.message\"\n    iconModifier=\"error\"\n    iconSize=\"xxl\"\n    iconColor=\"gray\"\n    iconClasses=\"text-muted\"\n  ></bb-empty-state-ui>\n</ng-template>\n\n<span #incomeLabel class=\"ng-cloak\" i18n=\"Incoming|Label for income dataset on the chart@@turnovers.chart.income\">Incoming</span>\n<span #spendingLabel class=\"ng-cloak\" i18n=\"Outgoing|Label for spending dataset on the chart@@turnovers.chart.spending\">Outgoing</span>\n<span #forecastLabel class=\"ng-cloak\" i18n=\"forecast|Label for forecast data on the chart@@turnovers.chart.forecast\">Forecast</span>\n", components: [{ type: i0.forwardRef(function () { return i4.TurnoversBarChartComponent; }), selector: "bb-turnovers-bar-chart", inputs: ["chartSeriesData", "forecast"] }, { type: i0.forwardRef(function () { return i5.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i0.forwardRef(function () { return i6.EmptyStateComponent; }), selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i0.forwardRef(function () { return i7.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return TurnoversItemCustomizableDirective; }), selector: "[bbTurnoversItemCustomizable]" }, { type: i0.forwardRef(function () { return TurnoversControlsCustomizableDirective; }), selector: "[bbTurnoversControlsCustomizable]" }, { type: i0.forwardRef(function () { return i8.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0.forwardRef(function () { return TurnoversEmptyStateCustomizableDirective; }), selector: "[bbTurnoversEmptyStateCustomizable]" }], pipes: { "async": i0.forwardRef(function () { return i7.AsyncPipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TurnoversComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-turnovers',
                    templateUrl: './turnovers.component.html',
                    providers: [TurnoversService, DatePipe, TurnoversWidgetHelpersService],
                }]
        }], ctorParameters: function () { return [{ type: i1.TurnoversService }, { type: i2.ActivatedRoute }, { type: i3.TurnoversWidgetHelpersService }]; }, propDecorators: { forecast: [{
                type: Input
            }], incomeRef: [{
                type: ViewChild,
                args: ['incomeLabel', { static: true }]
            }], spendingRef: [{
                type: ViewChild,
                args: ['spendingLabel', { static: true }]
            }], forecastRef: [{
                type: ViewChild,
                args: ['forecastLabel', { static: true }]
            }] } });
export class TurnoversItemCustomizableDirective extends BbTemplate {
}
TurnoversItemCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TurnoversItemCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TurnoversItemCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: TurnoversItemCustomizableDirective, selector: "[bbTurnoversItemCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TurnoversItemCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbTurnoversItemCustomizable]',
                }]
        }] });
export class TurnoversControlsCustomizableDirective extends BbTemplate {
}
TurnoversControlsCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TurnoversControlsCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TurnoversControlsCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: TurnoversControlsCustomizableDirective, selector: "[bbTurnoversControlsCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TurnoversControlsCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbTurnoversControlsCustomizable]',
                }]
        }] });
export class TurnoversEmptyStateCustomizableDirective extends BbTemplate {
}
TurnoversEmptyStateCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TurnoversEmptyStateCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TurnoversEmptyStateCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: TurnoversEmptyStateCustomizableDirective, selector: "[bbTurnoversEmptyStateCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TurnoversEmptyStateCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbTurnoversEmptyStateCustomizable]',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,