import { animate, style, transition, trigger } from '@angular/animations';
import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';
import { BarOrientation, formatLabel, PlacementTypes, ScaleType, StyleTypes, } from '@swimlane/ngx-charts';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/foundation-ang/future";
import * as i2 from "@swimlane/ngx-charts";
import * as i3 from "@angular/common";
export var D0Types;
(function (D0Types) {
    D0Types["positive"] = "positive";
    D0Types["negative"] = "negative";
})(D0Types || (D0Types = {}));
export class BbSeriesVerticalComponent {
    constructor(deprecationService) {
        this.deprecationService = deprecationService;
        /**
         * The type of the chart bars.
         */
        this.type = 'standard';
        /**
         * Enable/disable bars gradient.
         */
        this.gradient = false;
        /**
         * The active entries for the chart bars.
         */
        this.activeEntries = [];
        /**
         * Name of the chart series.
         */
        this.seriesName = '';
        /**
         * Enabel/Disable bars tooltip.
         */
        this.tooltipDisabled = false;
        /**
         * Show/Hide tooltip caret.
         */
        this.tooltipShowCaret = false;
        /**
         * Enable/disable bars rounded edges.
         */
        this.roundEdges = false;
        /**
         * Enable/disable bars animation.
         */
        this.animations = true;
        /**
         * Show/hide bars label.
         */
        this.showDataLabel = false;
        /**
         * EventEmitter for triggering a select event.
         */
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.select = new EventEmitter();
        /**
         * EventEmitter for triggering a activate event.
         */
        this.activate = new EventEmitter();
        /**
         * EventEmitter for triggering a deactivate event.
         */
        this.deactivate = new EventEmitter();
        /**
         * EventEmitter for triggering a dataLabelHeightChanged event.
         */
        this.dataLabelHeightChanged = new EventEmitter();
        this.tooltipPlacement = PlacementTypes.Top;
        this.tooltipType = StyleTypes.tooltip;
        this.orientation = BarOrientation.Vertical;
        this.barsForDataLabels = [];
    }
    getColors(value, label, offset0, offset1) {
        const bar = {};
        if (this.colors) {
            if (this.colors.scaleType === ScaleType.Ordinal) {
                bar.color = this.colors.getColor(label);
            }
            else {
                if (this.type === 'standard') {
                    bar.color = this.colors.getColor(value);
                    bar.gradientStops = this.colors.getLinearGradientStops(value);
                }
                else {
                    bar.color = this.colors.getColor(offset1 || 0);
                    bar.gradientStops = this.colors.getLinearGradientStops(offset1 || 0, offset0);
                }
            }
        }
        return bar;
    }
    tooltipText(label, value) {
        return this.tooltipDisabled
            ? undefined
            : `
      <span class="tooltip-label">${label}</span>
      <span class="tooltip-val">${value}</span>
    `;
    }
    ngOnChanges() {
        if (!this.series) {
            throw new Error('[series] should be provided to the component!');
        }
        this.update(this.series);
    }
    update(series) {
        this.bars = this.formatChartData(series);
        this.barsForDataLabels = this.updatedLabels(series);
    }
    updateDataLabels(series) {
        this.deprecationService.logDeprecatedFeature('#updateDataLabels inside #BbSeriesVerticalComponent deprecated in favor of #updatedLabels, which returns the formatted object instead of assigning values within itself');
        this.barsForDataLabels = this.updatedLabels(series);
    }
    updatedBars(series) {
        var _a;
        let d0Type = D0Types.positive;
        const width = (_a = this.xScale) === null || _a === void 0 ? void 0 : _a.bandwidth();
        const yScaleMin = Math.max(this.yScale.domain()[0], 0);
        const d0 = {
            [D0Types.positive]: 0,
            [D0Types.negative]: 0,
        };
        return series.map((d, index, group) => {
            var _a, _b, _c;
            const value = d.value || 0;
            const label = d.name || '';
            const formattedLabel = formatLabel(label);
            const roundEdges = this.roundEdges;
            d0Type = value > 0 ? D0Types.positive : D0Types.negative;
            const bar = {
                value,
                label,
                roundEdges,
                data: d,
                width,
                formattedLabel,
                height: 0,
                x: 0,
                y: 0,
            };
            // Use data of the group of bars for tooltips
            if (this.groupData) {
                bar.data = {
                    group: group.map((barEl) => { var _a; return (Object.assign(Object.assign({}, barEl), { color: (_a = this.colors) === null || _a === void 0 ? void 0 : _a.getColor(barEl.name || '') })); }),
                    diff: this.groupData.diff,
                    currency: this.groupData.currency,
                    value: d.value,
                    badge: this.groupData.badge,
                };
            }
            if (this.type === 'standard') {
                bar.height = Math.abs(this.yScale(value) - this.yScale(yScaleMin));
                bar.x = (_a = this.xScale) === null || _a === void 0 ? void 0 : _a.call(this, label);
                bar.y = (_b = this.yScale) === null || _b === void 0 ? void 0 : _b.call(this, Math.max(0, value));
            }
            else if (this.type === 'stacked') {
                const offset0 = d0[d0Type];
                const offset1 = offset0 + value;
                d0[d0Type] += value;
                bar.height = Math.ceil(this.yScale(offset0) - this.yScale(offset1));
                bar.x = 0;
                bar.y = (_c = this.yScale) === null || _c === void 0 ? void 0 : _c.call(this, offset1);
                bar.offset0 = offset0;
                bar.offset1 = offset1;
                bar.roundEdges = index === 1;
            }
            Object.assign(bar, this.getColors(value, label, bar.offset0, bar.offset1));
            let tooltipLabel = formattedLabel;
            if (this.seriesName) {
                tooltipLabel = `${this.seriesName} • ${formattedLabel}`;
                bar.data.series = this.seriesName;
            }
            bar.tooltipText = this.tooltipText(tooltipLabel, value.toLocaleString());
            return bar;
        });
    }
    updatedLabels(series) {
        return series.map((d) => {
            var _a, _b, _c;
            return ({
                name: d.name,
                series: this.seriesName ? this.seriesName : d.name,
                total: d.value,
                x: ((_a = this.xScale) === null || _a === void 0 ? void 0 : _a.call(this, d.name)) || 0,
                y: ((_b = this.yScale) === null || _b === void 0 ? void 0 : _b.call(this, 0)) || 0,
                height: this.yScale ? this.yScale(d.value) - this.yScale(0) : 0,
                width: ((_c = this.xScale) === null || _c === void 0 ? void 0 : _c.bandwidth()) || 0,
                roundEdges: this.roundEdges,
            });
        });
    }
    formatChartData(series) {
        const yScaleMin = Math.max(this.yScale.domain()[0], 0);
        const d0 = {
            [D0Types.positive]: 0,
            [D0Types.negative]: 0,
        };
        const formattedSeries = series.map((d, index, group) => {
            var _a, _b, _c, _d, _e, _f, _g, _h;
            const value = d.value || 0;
            const label = d.name || '';
            const d0Type = value > 0 ? D0Types.positive : D0Types.negative;
            const formattedLabel = formatLabel(label);
            const tooltipLabel = this.seriesName ? `${this.seriesName} • ${formattedLabel}` : formattedLabel;
            const data = {
                name: this.seriesName || '',
                group: group.map((barEl) => { var _a; return (Object.assign(Object.assign({}, barEl), { color: (_a = this.colors) === null || _a === void 0 ? void 0 : _a.getColor(barEl.name || '') })); }),
                series: group.map((barEl) => { var _a; return (Object.assign(Object.assign({}, barEl), { color: (_a = this.colors) === null || _a === void 0 ? void 0 : _a.getColor(barEl.name || '') })); }),
                diff: (_a = this.groupData) === null || _a === void 0 ? void 0 : _a.diff,
                currency: (_b = this.groupData) === null || _b === void 0 ? void 0 : _b.currency,
                value: d.value,
                badge: (_c = this.groupData) === null || _c === void 0 ? void 0 : _c.badge,
            };
            const graphData = {
                name: this.seriesName || '',
                value: d.value,
            };
            const standardType = {
                height: Math.abs(this.yScale(value) - this.yScale(yScaleMin)),
                offset0: undefined,
                offset1: undefined,
                roundEdges: this.roundEdges,
                x: ((_d = this.xScale) === null || _d === void 0 ? void 0 : _d.call(this, label)) || 0,
                y: ((_e = this.yScale) === null || _e === void 0 ? void 0 : _e.call(this, Math.max(0, value))) || 0,
                width: ((_f = this.xScale) === null || _f === void 0 ? void 0 : _f.bandwidth()) || 0,
            };
            const stackedType = {
                height: Math.ceil(this.yScale(d0[d0Type]) - this.yScale(d0[d0Type] + value)),
                offset0: d0[d0Type],
                offset1: d0[d0Type] + value,
                roundEdges: index === 1,
                x: 0,
                y: ((_g = this.yScale) === null || _g === void 0 ? void 0 : _g.call(this, d0[d0Type] + value)) || 0,
                width: ((_h = this.xScale) === null || _h === void 0 ? void 0 : _h.bandwidth()) || 0,
            };
            const typeObject = this.type === 'stacked' ? stackedType : standardType;
            const returnObject = Object.assign(Object.assign(Object.assign({}, typeObject), this.getColors(value, label, typeObject.offset0, typeObject.offset1)), { data, tooltipText: this.tooltipText(tooltipLabel, value.toLocaleString()), formattedLabel,
                value,
                label, graphData: Object.assign({}, graphData) });
            return returnObject;
        });
        return formattedSeries;
    }
    updateTooltipSettings() {
        this.deprecationService.logDeprecatedFeature('Deprecated #updateTooltipSettings method inside #BbSeriesVerticalComponent in favor of assigning values during component creation');
        this.tooltipPlacement = this.tooltipDisabled ? undefined : PlacementTypes.Top;
        this.tooltipType = this.tooltipDisabled ? undefined : StyleTypes.tooltip;
    }
    isActive(entry) {
        if (!this.activeEntries)
            return false;
        const item = this.activeEntries.find((d) => {
            return entry.name === d.name && entry.series === d.series;
        });
        return item !== undefined;
    }
    onClick(data) {
        this.select.emit(data);
    }
    trackBy(index, bar) {
        return bar.label;
    }
    trackDataLabelBy(index, barLabel) {
        return `${index}#${barLabel.series}#${barLabel.total}`;
    }
}
BbSeriesVerticalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BbSeriesVerticalComponent, deps: [{ token: i1.DeprecationsService }], target: i0.ɵɵFactoryTarget.Component });
BbSeriesVerticalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: BbSeriesVerticalComponent, selector: "g[bb-charts-series-vertical]", inputs: { dims: "dims", type: "type", series: "series", xScale: "xScale", yScale: "yScale", colors: "colors", gradient: "gradient", activeEntries: "activeEntries", seriesName: "seriesName", tooltipDisabled: "tooltipDisabled", tooltipShowCaret: "tooltipShowCaret", tooltipTemplate: "tooltipTemplate", roundEdges: "roundEdges", animations: "animations", showDataLabel: "showDataLabel", dataLabelFormatting: "dataLabelFormatting", groupData: "groupData" }, outputs: { select: "select", activate: "activate", deactivate: "deactivate", dataLabelHeightChanged: "dataLabelHeightChanged" }, usesOnChanges: true, ngImport: i0, template: "<svg:g ngx-charts-bar\n  *ngFor=\"let bar of bars; trackBy: trackBy\"\n  [@animationState]=\"'active'\"\n  [@.disabled]=\"!animations\"\n  [width]=\"bar.width\"\n  [height]=\"bar.height\"\n  [x]=\"bar.x\"\n  [y]=\"bar.y\"\n  [fill]=\"bar.color\"\n  [stops]=\"bar.gradientStops\"\n  [data]=\"bar.graphData\"\n  [orientation]=\"orientation\"\n  [roundEdges]=\"bar.roundEdges\"\n  [gradient]=\"gradient\"\n  [isActive]=\"isActive(bar)\"\n  (select)=\"onClick($event)\"\n  (activate)=\"activate.emit($event)\"\n  (deactivate)=\"deactivate.emit($event)\"\n  ngx-tooltip\n  [tooltipCssClass]=\"'chart-tooltip p-0 border-0'\"\n  [tooltipShowCaret]=\"tooltipShowCaret\"\n  [tooltipDisabled]=\"tooltipDisabled\"\n  [tooltipPlacement]=\"tooltipPlacement\"\n  [tooltipType]=\"tooltipType\"\n  [tooltipTitle]=\"tooltipTemplate ? undefined : bar.tooltipText\"\n  [tooltipTemplate]=\"tooltipTemplate\"\n  [tooltipContext]=\"bar.data\"\n  [animations]=\"animations\">\n</svg:g>\n<svg:g *ngIf=\"showDataLabel\">\n  <svg:g ngx-charts-bar-label \n    *ngFor=\"let b of barsForDataLabels; let i = index; trackBy:trackDataLabelBy\"\n    [barX]=\"b.x\"\n    [barY]=\"b.y\"\n    [barWidth]=\"b.width\"\n    [barHeight]=\"b.height\"\n    [value]=\"b.total\"\n    [valueFormatting]=\"dataLabelFormatting\"\n    [orientation]=\"orientation\"\n    (dimensionsChanged)=\"dataLabelHeightChanged.emit({size:$event, index:i})\"\n  />\n</svg:g>\n", components: [{ type: i2.BarComponent, selector: "g[ngx-charts-bar]", inputs: ["roundEdges", "gradient", "offset", "isActive", "animations", "noBarWhenZero", "fill", "data", "width", "height", "x", "y", "orientation", "stops", "ariaLabel"], outputs: ["select", "activate", "deactivate"] }, { type: i2.BarLabelComponent, selector: "g[ngx-charts-bar-label]", inputs: ["value", "valueFormatting", "barX", "barY", "barWidth", "barHeight", "orientation"], outputs: ["dimensionsChanged"] }], directives: [{ type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2.TooltipDirective, selector: "[ngx-tooltip]", inputs: ["tooltipCssClass", "tooltipAppendToBody", "tooltipSpacing", "tooltipDisabled", "tooltipShowCaret", "tooltipPlacement", "tooltipAlignment", "tooltipType", "tooltipCloseOnClickOutside", "tooltipCloseOnMouseLeave", "tooltipHideTimeout", "tooltipShowTimeout", "tooltipShowEvent", "tooltipImmediateExit", "tooltipTitle", "tooltipTemplate", "tooltipContext"], outputs: ["show", "hide"] }, { type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], animations: [
        trigger('animationState', [
            transition(':leave', [
                style({
                    opacity: 1,
                }),
                animate(500, style({ opacity: 0 })),
            ]),
        ]),
    ], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BbSeriesVerticalComponent, decorators: [{
            type: Component,
            args: [{
                    // eslint-disable-next-line @angular-eslint/component-selector
                    selector: 'g[bb-charts-series-vertical]',
                    templateUrl: './bb-charts-series-vertical.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    animations: [
                        trigger('animationState', [
                            transition(':leave', [
                                style({
                                    opacity: 1,
                                }),
                                animate(500, style({ opacity: 0 })),
                            ]),
                        ]),
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i1.DeprecationsService }]; }, propDecorators: { dims: [{
                type: Input
            }], type: [{
                type: Input
            }], series: [{
                type: Input
            }], xScale: [{
                type: Input
            }], yScale: [{
                type: Input
            }], colors: [{
                type: Input
            }], gradient: [{
                type: Input
            }], activeEntries: [{
                type: Input
            }], seriesName: [{
                type: Input
            }], tooltipDisabled: [{
                type: Input
            }], tooltipShowCaret: [{
                type: Input
            }], tooltipTemplate: [{
                type: Input
            }], roundEdges: [{
                type: Input
            }], animations: [{
                type: Input
            }], showDataLabel: [{
                type: Input
            }], dataLabelFormatting: [{
                type: Input
            }], groupData: [{
                type: Input
            }], select: [{
                type: Output
            }], activate: [{
                type: Output
            }], deactivate: [{
                type: Output
            }], dataLabelHeightChanged: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,