import { animate, style, transition, trigger } from '@angular/animations';
import { ChangeDetectionStrategy, Component, Inject, Input, PLATFORM_ID, ViewEncapsulation, } from '@angular/core';
import { LegendPosition, ScaleType } from '@swimlane/ngx-charts';
import { scaleBand, scaleLinear } from 'd3-scale';
import { TurnoversVerticalBarChartComponent } from '../turnovers-vertical-bar-chart/turnovers-vertical-bar-chart.component';
import * as i0 from "@angular/core";
import * as i1 from "@swimlane/ngx-charts";
import * as i2 from "../ngx-charts/common/bb-grid-panel-series.component";
import * as i3 from "./bb-charts-series-vertical.component";
import * as i4 from "@angular/common";
export class TurnoversVerticalGroupedBarChartComponent extends TurnoversVerticalBarChartComponent {
    constructor(chartElement, zone, cd, platformId) {
        super(chartElement, zone, cd, platformId);
        /**
         * Sets the scale type of the chart.
         */
        this.scaleType = ScaleType.Ordinal;
        /**
         * Sets the group padding.
         */
        this.groupPadding = 16;
        /**
         * Array of Chart data objects needed for the chart to be rendered.
         */
        this.results = [];
        this.legendOptions = {
            colors: undefined,
            domain: [],
            scaleType: this.schemeType,
            title: '',
            position: LegendPosition.Below,
        };
    }
    update() {
        super.update();
        this.valueDomain = this.getValueDomain();
        this.groupScale = this.getGroupScale();
        this.innerScale = this.getInnerScale();
        this.valueScale = this.getValueScale();
        this.getLegendOptions();
    }
    getGroupScale() {
        const spacing = this.groupDomain.length / (this.dims.height / this.groupPadding + 1);
        return scaleBand()
            .rangeRound([0, this.dims.width])
            .paddingInner(spacing)
            .paddingOuter(spacing / 2)
            .domain(this.groupDomain);
    }
    getInnerScale() {
        const width = this.groupScale ? this.groupScale.bandwidth() : 1;
        const spacing = this.innerDomain.length / (width / this.barPadding + 1);
        return scaleBand().rangeRound([0, width]).paddingInner(spacing).domain(this.innerDomain);
    }
    getValueScale() {
        const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valueDomain);
        return this.roundDomains ? scale.nice() : scale;
    }
    getValueDomain() {
        const domain = [];
        for (const group of this.results) {
            for (const d of group.series) {
                if (!domain.includes(d.value)) {
                    domain.push(d.value);
                }
            }
        }
        const min = Math.min(0, ...domain);
        const max = this.yScaleMax ? Math.max(this.yScaleMax, ...domain) : Math.max(...domain);
        return [min, max];
    }
    groupTransform(group) {
        var _a, _b;
        const labelName = (_a = group.name) !== null && _a !== void 0 ? _a : '';
        return `translate(${(_b = this.groupScale) === null || _b === void 0 ? void 0 : _b.call(this, labelName)}, 0)`;
    }
    getLegendOptions() {
        if (!this.colors) {
            return;
        }
        if (this.legendOptions.scaleType === ScaleType.Ordinal) {
            this.legendOptions.domain = this.innerDomain;
            this.legendOptions.colors = this.colors;
            this.legendOptions.title = this.legendTitle || '';
        }
        else {
            this.legendOptions.domain = this.valueDomain;
            this.legendOptions.colors = this.colors.scale;
        }
    }
}
TurnoversVerticalGroupedBarChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TurnoversVerticalGroupedBarChartComponent, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: i0.ChangeDetectorRef }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });
TurnoversVerticalGroupedBarChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TurnoversVerticalGroupedBarChartComponent, selector: "bb-charts-bar-vertical-2d", inputs: { scaleType: "scaleType", groupPadding: "groupPadding", results: "results" }, usesInheritance: true, ngImport: i0, template: "<ngx-charts-chart\n  [view]=\"[width, height]\"\n  [showLegend]=\"legend\"\n  [legendOptions]=\"legendOptions\"\n  [activeEntries]=\"activeEntries\"\n  [animations]=\"animations\"\n  (legendLabelActivate)=\"onActivate($event)\"\n  (legendLabelDeactivate)=\"onDeactivate($event)\"\n  (legendLabelClick)=\"onClick($event)\">\n  <svg:g [attr.transform]=\"transform\" class=\"bar-chart chart\">\n    <svg:g bb-charts-grid-panel-series\n      [xScale]=\"groupScale\"\n      [yScale]=\"valueScale\"\n      [data]=\"groupsData\"\n      [dims]=\"dims\"\n    >\n    </svg:g>\n    <svg:g ngx-charts-x-axis\n      *ngIf=\"xAxis\"\n      [xScale]=\"groupScale\"\n      [dims]=\"dims\"\n      [showLabel]=\"showXAxisLabel\"\n      [labelText]=\"xAxisLabel\"\n      [tickFormatting]=\"xAxisTickFormatting\"\n      [xAxisOffset]=\"dataLabelMaxHeight.negative\"\n      (dimensionsChanged)=\"updateXAxisHeight($event)\">\n    </svg:g>\n    <svg:g ngx-charts-y-axis\n      *ngIf=\"yAxis\"\n      [yScale]=\"valueScale\"\n      [dims]=\"dims\"\n      [showGridLines]=\"showGridLines\"\n      [showLabel]=\"showYAxisLabel\"\n      [labelText]=\"yAxisLabel\"\n      [tickFormatting]=\"yAxisTickFormatting\"\n      (dimensionsChanged)=\"updateYAxisWidth($event)\">\n    </svg:g>\n    <svg:g bb-charts-series-vertical\n      *ngFor=\"let group of groupsData; let index = index; trackBy:trackBy\"\n      [@animationState]=\"'active'\"\n      [attr.transform]=\"groupTransform(group)\"\n      [attr.opacity]=\"(group.badge ? 0.5 : 1)\"\n      [activeEntries]=\"activeEntries\"\n      [xScale]=\"innerScale\"\n      [yScale]=\"valueScale\"\n      [colors]=\"colors\"\n      [series]=\"group.series\"\n      [dims]=\"dims\"\n      [gradient]=\"gradient\"\n      [tooltipDisabled]=\"tooltipDisabled\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [showDataLabel]=\"showDataLabel\"\n      [dataLabelFormatting]=\"dataLabelFormatting\"\n      [seriesName]=\"group.name\"\n      [groupData]=\"group\"\n      [roundEdges]=\"roundEdges\"\n      [animations]=\"animations\"\n      (select)=\"onClick($event, group)\"\n      (activate)=\"onActivate($event, group)\"\n      (deactivate)=\"onDeactivate($event, group)\"\n      (dataLabelHeightChanged)=\"onDataLabelMaxHeightChanged($event, index)\"\n    />\n  </svg:g>\n</ngx-charts-chart>\n\n<ng-container\n  [ngTemplateOutlet]=\"legendTemplate\"\n  [ngTemplateOutletContext]=\"{\n    legendOptions: this.legendOptions,\n    activeEntries: this.activeEntries,\n    height: this.height,\n    onActivate: this.onActivate.bind(this),\n    onDeactivate: this.onDeactivate.bind(this),\n    onClick: this.onClick.bind(this)\n  }\"\n></ng-container>\n", styles: [".ngx-charts{float:left;overflow:visible}.ngx-charts .circle,.ngx-charts .bar,.ngx-charts .arc{cursor:pointer}.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover,.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .card.active,.ngx-charts .card:hover{opacity:.8;transition:opacity .1s ease-in-out}.ngx-charts .bar:focus,.ngx-charts .cell:focus,.ngx-charts .arc:focus,.ngx-charts .card:focus{outline:none}.ngx-charts .bar.hidden,.ngx-charts .cell.hidden,.ngx-charts .arc.hidden,.ngx-charts .card.hidden{display:none}.ngx-charts g:focus{outline:none}.ngx-charts .line-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .polar-series-path.inactive,.ngx-charts .polar-series-area.inactive,.ngx-charts .area-series.inactive{transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:normal}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .refline-path{stroke:#a8b2c7;stroke-width:1;stroke-dasharray:5;stroke-dashoffset:5}.ngx-charts .refline-label{font-size:9px}.ngx-charts .reference-area{fill-opacity:.05;fill:#000}.ngx-charts .gridline-path-dotted{stroke:#ddd;stroke-width:1;fill:none;stroke-dasharray:1,20;stroke-dashoffset:3}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:#0000000d}.gridline-path{stroke:#ccc}ngx-charts-legend{display:block;margin-top:1rem}\n"], components: [{ type: i1.ChartComponent, selector: "ngx-charts-chart", inputs: ["showLegend", "animations", "legendType", "view", "legendOptions", "activeEntries"], outputs: ["legendLabelClick", "legendLabelActivate", "legendLabelDeactivate"] }, { type: i2.BbGridPanelSeriesComponent, selector: "g[bb-charts-grid-panel-series]", inputs: ["data", "dims", "xScale", "yScale"] }, { type: i1.XAxisComponent, selector: "g[ngx-charts-x-axis]", inputs: ["rotateTicks", "showGridLines", "xOrient", "xAxisOffset", "xScale", "dims", "trimTicks", "maxTickLength", "tickFormatting", "showLabel", "labelText", "ticks", "xAxisTickCount"], outputs: ["dimensionsChanged"] }, { type: i1.YAxisComponent, selector: "g[ngx-charts-y-axis]", inputs: ["showGridLines", "yOrient", "yAxisOffset", "yScale", "dims", "trimTicks", "maxTickLength", "tickFormatting", "ticks", "showLabel", "labelText", "yAxisTickCount", "referenceLines", "showRefLines", "showRefLabels"], outputs: ["dimensionsChanged"] }, { type: i3.BbSeriesVerticalComponent, selector: "g[bb-charts-series-vertical]", inputs: ["dims", "type", "series", "xScale", "yScale", "colors", "gradient", "activeEntries", "seriesName", "tooltipDisabled", "tooltipShowCaret", "tooltipTemplate", "roundEdges", "animations", "showDataLabel", "dataLabelFormatting", "groupData"], outputs: ["select", "activate", "deactivate", "dataLabelHeightChanged"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i4.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], animations: [
        trigger('animationState', [
            transition(':leave', [
                style({
                    opacity: 1,
                    transform: '*',
                }),
                animate(500, style({ opacity: 0, transform: 'scale(0)' })),
            ]),
        ]),
    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TurnoversVerticalGroupedBarChartComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-charts-bar-vertical-2d',
                    templateUrl: './turnovers-vertical-grouped-bar-chart.component.html',
                    styleUrls: ['../turnovers-vertical-stacked-bar-chart/turnovers-vertical-stacked-bar-chart.component.scss'],
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    animations: [
                        trigger('animationState', [
                            transition(':leave', [
                                style({
                                    opacity: 1,
                                    transform: '*',
                                }),
                                animate(500, style({ opacity: 0, transform: 'scale(0)' })),
                            ]),
                        ]),
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }]; }, propDecorators: { scaleType: [{
                type: Input
            }], groupPadding: [{
                type: Input
            }], results: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,