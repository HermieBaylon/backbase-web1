import { Component, EventEmitter, Inject, Input, Output, PLATFORM_ID, } from '@angular/core';
import { BaseChartComponent, calculateViewDimensions, ColorHelper, ScaleType, } from '@swimlane/ngx-charts';
import { scaleBand, scaleLinear } from 'd3-scale';
import * as i0 from "@angular/core";
export class TurnoversVerticalBarChartComponent extends BaseChartComponent {
    constructor(chartElement, zone, cd, platformId) {
        super(chartElement, zone, cd, platformId);
        /**
         * Enable/Disable chart legend.
         */
        this.legend = false;
        /**
         * The title for the chart legend.
         */
        this.legendTitle = '';
        /**
         * Hide/show the horizontal axis.
         */
        this.xAxis = true;
        /**
         * Hide/show the vertical axis.
         */
        this.yAxis = true;
        /**
         * Show the horizontal axis label.
         */
        this.showXAxisLabel = true;
        /**
         * Show the vertical axis label.
         */
        this.showYAxisLabel = true;
        /**
         * The label for the horizontal axis.
         */
        this.xAxisLabel = '';
        /**
         * The label for the vertical axis.
         */
        this.yAxisLabel = '';
        /**
         * Enable/Disable chart tooltip.
         */
        this.tooltipDisabled = false;
        /**
         * Enable/Disable chart gradient.
         */
        this.gradient = false;
        /**
         * Show/hide chart grid lines.
         */
        this.showGridLines = true;
        /**
         * The active entries for the chart legend.
         */
        this.activeEntries = [];
        /**
         * Sets the scheme type of the chart.
         */
        this.schemeType = ScaleType.Ordinal;
        /**
         * Padding of the chart bars.
         */
        this.barPadding = 8;
        /**
         * Enable/Disable rounded corners.
         */
        this.roundDomains = true;
        /**
         * Enable/disable rounded edges for the bars.
         */
        this.roundEdges = false;
        /**
         * Maximum vertical chart scale.
         */
        this.yScaleMax = 0;
        /**
         * Hide/show the data labels.
         */
        this.showDataLabel = false;
        /**
         * Array of Chart data objects needed for the chart to be rendered.
         */
        this.groupsData = [];
        /**
         * The chart legend template.
         */
        this.legendTemplate = null;
        /**
         * EventEmitter for triggering a activate event.
         */
        this.activate = new EventEmitter();
        /**
         * EventEmitter for triggering a deactivate event.
         */
        this.deactivate = new EventEmitter();
        this.dims = { width: 0, height: 0, xOffset: 0 };
        this.groupDomain = [];
        this.innerDomain = [];
        this.valueDomain = [];
        this.margin = [10, 20, 10, 20];
        this.xAxisHeight = 0;
        this.yAxisWidth = 0;
        this.dataLabelMaxHeight = { negative: 0, positive: 0 };
    }
    update() {
        super.update();
        if (!this.showDataLabel) {
            this.dataLabelMaxHeight = { negative: 0, positive: 0 };
        }
        this.margin = [10 + this.dataLabelMaxHeight.positive, 20, 10 + this.dataLabelMaxHeight.negative, 20];
        this.dims = calculateViewDimensions({
            width: this.width,
            height: this.height,
            margins: this.margin,
            showXAxis: this.xAxis,
            showYAxis: this.yAxis,
            xAxisHeight: this.xAxisHeight,
            yAxisWidth: this.yAxisWidth,
            showXLabel: this.showXAxisLabel,
            showYLabel: this.showYAxisLabel,
            showLegend: this.legend,
            legendType: this.schemeType,
        });
        if (this.showDataLabel) {
            this.dims.height -= this.dataLabelMaxHeight.negative;
        }
        this.formatDates();
        this.groupDomain = this.getGroupDomain();
        this.innerDomain = this.getInnerDomain();
        this.setColors();
        this.transform = `translate(${this.dims.xOffset} , ${this.margin[0] + this.dataLabelMaxHeight.negative})`;
    }
    getGroupDomain() {
        const domain = [];
        for (const group of this.results) {
            if (!domain.includes(group.name)) {
                domain.push(group.name);
            }
        }
        return domain;
    }
    getInnerDomain() {
        const domain = [];
        for (const group of this.results) {
            for (const d of group.series) {
                if (!domain.includes(d.name)) {
                    domain.push(d.name);
                }
            }
        }
        return domain;
    }
    getXScale() {
        const spacing = this.groupDomain.length / (this.dims.width / this.barPadding + 1);
        return scaleBand().rangeRound([0, this.dims.width]).paddingInner(spacing).domain(this.groupDomain);
    }
    getYScale() {
        const scale = scaleLinear().range([this.dims.height, 0]).domain(this.valueDomain);
        return this.roundDomains ? scale.nice() : scale;
    }
    onDataLabelMaxHeightChanged(event, groupIndex) {
        if (event.size.negative) {
            this.dataLabelMaxHeight.negative = Math.max(this.dataLabelMaxHeight.negative, event.size.height);
        }
        else {
            this.dataLabelMaxHeight.positive = Math.max(this.dataLabelMaxHeight.positive, event.size.height);
        }
        if (groupIndex === this.results.length - 1) {
            setTimeout(() => this.update());
        }
    }
    onClick(data, group) {
        if (group) {
            data.series = group.name;
        }
        this.select.emit(data);
    }
    trackBy(index, item) {
        return item.name;
    }
    setColors() {
        const domain = this.schemeType === ScaleType.Ordinal ? this.innerDomain : this.valueDomain;
        this.colors = new ColorHelper(this.scheme, this.schemeType, domain, this.customColors);
    }
    updateYAxisWidth(axis) {
        this.yAxisWidth = axis.width;
        this.update();
    }
    updateXAxisHeight(axis) {
        this.xAxisHeight = axis.height;
        this.update();
    }
    onActivate(event, group) {
        const item = Object.assign({}, event);
        if (group) {
            item.series = group.name;
        }
        const idx = this.activeEntries.findIndex((d) => {
            return d.name === item.name && d.value === item.value && d.series === item.series;
        });
        if (idx > -1) {
            return;
        }
        this.activeEntries = [item, ...this.activeEntries];
        this.activate.emit({ value: item, entries: this.activeEntries });
    }
    onDeactivate(event, group) {
        const item = Object.assign({}, event);
        if (group) {
            item.series = group.name;
        }
        const idx = this.activeEntries.findIndex((d) => {
            return d.name === item.name && d.value === item.value && d.series === item.series;
        });
        this.activeEntries.splice(idx, 1);
        this.activeEntries = [...this.activeEntries]; // NOSONAR false positive - https://github.com/SonarSource/SonarTS/issues/760
        this.deactivate.emit({ value: item, entries: this.activeEntries });
    }
}
TurnoversVerticalBarChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TurnoversVerticalBarChartComponent, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: i0.ChangeDetectorRef }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });
TurnoversVerticalBarChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TurnoversVerticalBarChartComponent, selector: "ng-component", inputs: { legend: "legend", legendTitle: "legendTitle", xAxis: "xAxis", yAxis: "yAxis", showXAxisLabel: "showXAxisLabel", showYAxisLabel: "showYAxisLabel", xAxisLabel: "xAxisLabel", yAxisLabel: "yAxisLabel", tooltipDisabled: "tooltipDisabled", gradient: "gradient", showGridLines: "showGridLines", activeEntries: "activeEntries", schemeType: "schemeType", xAxisTickFormatting: "xAxisTickFormatting", yAxisTickFormatting: "yAxisTickFormatting", barPadding: "barPadding", roundDomains: "roundDomains", roundEdges: "roundEdges", yScaleMax: "yScaleMax", showDataLabel: "showDataLabel", dataLabelFormatting: "dataLabelFormatting", groupsData: "groupsData", tooltipTemplate: "tooltipTemplate", legendTemplate: "legendTemplate" }, outputs: { activate: "activate", deactivate: "deactivate" }, usesInheritance: true, ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TurnoversVerticalBarChartComponent, decorators: [{
            type: Component,
            args: [{
                    template: '',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }]; }, propDecorators: { legend: [{
                type: Input
            }], legendTitle: [{
                type: Input
            }], xAxis: [{
                type: Input
            }], yAxis: [{
                type: Input
            }], showXAxisLabel: [{
                type: Input
            }], showYAxisLabel: [{
                type: Input
            }], xAxisLabel: [{
                type: Input
            }], yAxisLabel: [{
                type: Input
            }], tooltipDisabled: [{
                type: Input
            }], gradient: [{
                type: Input
            }], showGridLines: [{
                type: Input
            }], activeEntries: [{
                type: Input
            }], schemeType: [{
                type: Input
            }], xAxisTickFormatting: [{
                type: Input
            }], yAxisTickFormatting: [{
                type: Input
            }], barPadding: [{
                type: Input
            }], roundDomains: [{
                type: Input
            }], roundEdges: [{
                type: Input
            }], yScaleMax: [{
                type: Input
            }], showDataLabel: [{
                type: Input
            }], dataLabelFormatting: [{
                type: Input
            }], groupsData: [{
                type: Input
            }], tooltipTemplate: [{
                type: Input
            }], legendTemplate: [{
                type: Input
            }], activate: [{
                type: Output
            }], deactivate: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,