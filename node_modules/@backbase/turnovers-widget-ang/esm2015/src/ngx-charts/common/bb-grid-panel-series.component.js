import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/foundation-ang/future";
import * as i2 from "@swimlane/ngx-charts";
import * as i3 from "@angular/common";
export class BbGridPanelSeriesComponent {
    constructor(deprecationService) {
        this.deprecationService = deprecationService;
        this.gridPanels = [];
        /**
         * Array of Chart data objects needed for the chart to be rendered.
         */
        this.data = [];
        /**
         * Dimensions of the chart.
         */
        this.dims = {
            height: 0,
            width: 0,
        };
    }
    set orient(val) {
        this.deprecationService.logDeprecatedFeature('Removed #orient input from #BbGridPanelSeriesComponent');
        this._orient = val;
    }
    get orient() {
        return this._orient || 'vertical';
    }
    ngOnChanges() {
        this.update();
    }
    update() {
        this.gridPanels = this.getChartDataLabels();
    }
    getChartDataLabels() {
        return this.data.map((d) => {
            var _a;
            const labelName = (_a = d.name) !== null && _a !== void 0 ? _a : '';
            let width = 0;
            let xValue = 0;
            if (!!this.xScale) {
                const offset = this.xScale.bandwidth() * this.xScale.paddingInner();
                width = this.xScale.bandwidth() + offset;
                xValue = (this.xScale(labelName) || 0) - offset / 2;
            }
            return {
                name: labelName,
                class: d.badge === 'forecast' ? 'forecast' : '',
                width: width,
                height: this.dims.height,
                x: xValue,
                y: 0,
                roundEdges: false,
            };
        });
    }
    getGridPanels() {
        this.deprecationService.logDeprecatedFeature('#getGridPanels deprecation in favor of private method #getChartDataLabels from #BbGridPanelSeriesComponent');
        const localXScale = this.xScale;
        const localYScale = this.yScale;
        return this.data.map((d) => {
            let offset;
            let width;
            let height;
            let x;
            let y;
            if (this.orient === 'vertical') {
                offset = localXScale.bandwidth() * localXScale.paddingInner();
                width = localXScale.bandwidth() + offset;
                height = this.dims.height;
                x = (localXScale(d.name) || 0) - offset / 2;
                y = 0;
            }
            else if (this.orient === 'horizontal') {
                offset = localYScale.bandwidth() * localYScale.paddingInner();
                width = this.dims.width;
                height = localYScale.bandwidth() + offset;
                x = 0;
                y = localYScale(d.name) - offset / 2;
            }
            return {
                name: d.name,
                class: d.badge === 'forecast' ? 'forecast' : '',
                height,
                width,
                x,
                y,
            };
        });
    }
}
BbGridPanelSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BbGridPanelSeriesComponent, deps: [{ token: i1.DeprecationsService }], target: i0.ɵɵFactoryTarget.Component });
BbGridPanelSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: BbGridPanelSeriesComponent, selector: "g[bb-charts-grid-panel-series]", inputs: { data: "data", dims: "dims", xScale: "xScale", yScale: "yScale" }, usesOnChanges: true, ngImport: i0, template: "<svg:g *ngFor=\"let gridPanel of gridPanels\">\n  <svg:g ngx-charts-grid-panel\n    [height]=\"gridPanel.height\"\n    [width]=\"gridPanel.width\"\n    [x]=\"gridPanel.x\"\n    [y]=\"gridPanel.y\"\n    [class.grid-panel]=\"true\"\n    [class.forecast]=\"gridPanel.class === 'forecast'\">\n  </svg:g>\n</svg:g>\n", components: [{ type: i2.GridPanelComponent, selector: "g[ngx-charts-grid-panel]", inputs: ["width", "height", "x", "y"] }], directives: [{ type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    Input()('orient')
], BbGridPanelSeriesComponent.prototype, "orient", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BbGridPanelSeriesComponent, decorators: [{
            type: Component,
            args: [{
                    // eslint-disable-next-line @angular-eslint/component-selector
                    selector: 'g[bb-charts-grid-panel-series]',
                    templateUrl: './bb-grid-panel-series.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.DeprecationsService }]; }, propDecorators: { data: [{
                type: Input
            }], dims: [{
                type: Input
            }], xScale: [{
                type: Input
            }], yScale: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,