import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/data-ang/transactions";
export class TurnoversService {
    constructor(turnoversDataHttpService) {
        this.turnoversDataHttpService = turnoversDataHttpService;
    }
    loadAnalysisData(params) {
        return this.turnoversDataHttpService.getTurnovers(params).pipe(map((body) => {
            return {
                turnovers: body.turnovers || [],
                forecast: (body.forecast || []).map((item) => (Object.assign(Object.assign({}, item), { forecast: true }))),
            };
        }), map((body) => {
            return (body.turnovers || []).concat(params.forecast && body.forecast ? body.forecast : []);
        }));
    }
}
TurnoversService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TurnoversService, deps: [{ token: i1.TurnoversHttpService }], target: i0.ɵɵFactoryTarget.Injectable });
TurnoversService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TurnoversService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TurnoversService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.TurnoversHttpService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHVybm92ZXJzLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9saWJzL3R1cm5vdmVycy13aWRnZXQvc3JjL3R1cm5vdmVycy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHM0MsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7QUFJckMsTUFBTSxPQUFPLGdCQUFnQjtJQUMzQixZQUE2Qix3QkFBOEM7UUFBOUMsNkJBQXdCLEdBQXhCLHdCQUF3QixDQUFzQjtJQUFHLENBQUM7SUFFL0UsZ0JBQWdCLENBQUMsTUFBMEI7UUFDekMsT0FBTyxJQUFJLENBQUMsd0JBQXdCLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FDNUQsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFpQixFQUFFO1lBQzFCLE9BQU87Z0JBQ0wsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTLElBQUksRUFBRTtnQkFDL0IsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLGlDQUFNLElBQUksS0FBRSxRQUFRLEVBQUUsSUFBSSxJQUFHLENBQUM7YUFDN0UsQ0FBQztRQUNKLENBQUMsQ0FBQyxFQUNGLEdBQUcsQ0FBQyxDQUFDLElBQW1CLEVBQWtCLEVBQUU7WUFDMUMsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLElBQUksRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDOUYsQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7OzhHQWZVLGdCQUFnQjtrSEFBaEIsZ0JBQWdCOzRGQUFoQixnQkFBZ0I7a0JBRDVCLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBUdXJub3ZlcnNIdHRwU2VydmljZSB9IGZyb20gJ0BiYWNrYmFzZS9kYXRhLWFuZy90cmFuc2FjdGlvbnMnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgQ2FzaEZsb3dJdGVtLCBUdXJub3ZlcnNEYXRhLCBUdXJub3ZlcnNHZXRQYXJhbXMgfSBmcm9tICcuL21vZGVsL3R1cm5vdmVycyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBUdXJub3ZlcnNTZXJ2aWNlIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSB0dXJub3ZlcnNEYXRhSHR0cFNlcnZpY2U6IFR1cm5vdmVyc0h0dHBTZXJ2aWNlKSB7fVxuXG4gIGxvYWRBbmFseXNpc0RhdGEocGFyYW1zOiBUdXJub3ZlcnNHZXRQYXJhbXMpOiBPYnNlcnZhYmxlPENhc2hGbG93SXRlbVtdPiB7XG4gICAgcmV0dXJuIHRoaXMudHVybm92ZXJzRGF0YUh0dHBTZXJ2aWNlLmdldFR1cm5vdmVycyhwYXJhbXMpLnBpcGUoXG4gICAgICBtYXAoKGJvZHkpOiBUdXJub3ZlcnNEYXRhID0+IHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB0dXJub3ZlcnM6IGJvZHkudHVybm92ZXJzIHx8IFtdLFxuICAgICAgICAgIGZvcmVjYXN0OiAoYm9keS5mb3JlY2FzdCB8fCBbXSkubWFwKChpdGVtKSA9PiAoeyAuLi5pdGVtLCBmb3JlY2FzdDogdHJ1ZSB9KSksXG4gICAgICAgIH07XG4gICAgICB9KSxcbiAgICAgIG1hcCgoYm9keTogVHVybm92ZXJzRGF0YSk6IENhc2hGbG93SXRlbVtdID0+IHtcbiAgICAgICAgcmV0dXJuIChib2R5LnR1cm5vdmVycyB8fCBbXSkuY29uY2F0KHBhcmFtcy5mb3JlY2FzdCAmJiBib2R5LmZvcmVjYXN0ID8gYm9keS5mb3JlY2FzdCA6IFtdKTtcbiAgICAgIH0pLFxuICAgICk7XG4gIH1cbn1cbiJdfQ==