const getMessageFromResponse = (error) => {
    const responseBody = error.error;
    if (responseBody && responseBody.errors && responseBody.errors[0] && responseBody.errors[0].message) {
        return responseBody.errors[0].message;
    }
    else {
        return undefined;
    }
};
export const parseError = (error) => {
    // TODO: should have more user-friendly messages
    if (error.error instanceof ErrorEvent) {
        // Client-side or network error.
        return {
            message: 'An unexpected error occurred',
        };
    }
    else {
        // Backend returns unsuccessful response code.  In case of 400, try to get a message from the
        // response.
        switch (error.status) {
            case 400:
                return {
                    message: getMessageFromResponse(error) || 'Error 400',
                };
            case 401:
                return {
                    message: 'Error 401',
                };
            case 403:
                return {
                    message: 'Error 403',
                };
            case 404:
                return {
                    message: 'Error 404',
                };
            default:
                return {
                    message: 'An unexpected error occurred',
                };
        }
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHVybm92ZXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy90dXJub3ZlcnMtd2lkZ2V0L3NyYy9tb2RlbC90dXJub3ZlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBd0dBLE1BQU0sc0JBQXNCLEdBQUcsQ0FBQyxLQUF3QixFQUFFLEVBQUU7SUFDMUQsTUFBTSxZQUFZLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQztJQUVqQyxJQUFJLFlBQVksSUFBSSxZQUFZLENBQUMsTUFBTSxJQUFJLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUU7UUFDbkcsT0FBTyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztLQUN2QztTQUFNO1FBQ0wsT0FBTyxTQUFTLENBQUM7S0FDbEI7QUFDSCxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsQ0FBQyxLQUF3QixFQUFrQixFQUFFO0lBQ3JFLGdEQUFnRDtJQUNoRCxJQUFJLEtBQUssQ0FBQyxLQUFLLFlBQVksVUFBVSxFQUFFO1FBQ3JDLGdDQUFnQztRQUNoQyxPQUFPO1lBQ0wsT0FBTyxFQUFFLDhCQUE4QjtTQUN4QyxDQUFDO0tBQ0g7U0FBTTtRQUNMLDZGQUE2RjtRQUM3RixZQUFZO1FBQ1osUUFBUSxLQUFLLENBQUMsTUFBTSxFQUFFO1lBQ3BCLEtBQUssR0FBRztnQkFDTixPQUFPO29CQUNMLE9BQU8sRUFBRSxzQkFBc0IsQ0FBQyxLQUFLLENBQUMsSUFBSSxXQUFXO2lCQUN0RCxDQUFDO1lBQ0osS0FBSyxHQUFHO2dCQUNOLE9BQU87b0JBQ0wsT0FBTyxFQUFFLFdBQVc7aUJBQ3JCLENBQUM7WUFDSixLQUFLLEdBQUc7Z0JBQ04sT0FBTztvQkFDTCxPQUFPLEVBQUUsV0FBVztpQkFDckIsQ0FBQztZQUNKLEtBQUssR0FBRztnQkFDTixPQUFPO29CQUNMLE9BQU8sRUFBRSxXQUFXO2lCQUNyQixDQUFDO1lBQ0o7Z0JBQ0UsT0FBTztvQkFDTCxPQUFPLEVBQUUsOEJBQThCO2lCQUN4QyxDQUFDO1NBQ0w7S0FDRjtBQUNILENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBFcnJvclJlc3BvbnNlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgVHVybm92ZXIgYXMgVHVybm92ZXJJdGVtIH0gZnJvbSAnQGJhY2tiYXNlL2RhdGEtYW5nL3RyYW5zYWN0aW9ucyc7XG5pbXBvcnQgeyBEYXRhSXRlbSwgR3JhZGllbnQgfSBmcm9tICdAc3dpbWxhbmUvbmd4LWNoYXJ0cyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2hhcnRMYWJlbHMge1xuICBpbmNvbWU6IHN0cmluZztcbiAgc3BlbmRpbmc6IHN0cmluZztcbiAgZm9yZWNhc3Q6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDaGFydEJhckRhdGEge1xuICBjb2xvcj86IHN0cmluZztcbiAgY3VycmVuY3k6IHN0cmluZztcbiAgbmFtZTogc3RyaW5nO1xuICB2YWx1ZTogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIERpbXMge1xuICBoZWlnaHQ6IG51bWJlcjtcbiAgd2lkdGg6IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBMYWJlbE1heEhlaWdodCB7XG4gIG5lZ2F0aXZlOiBudW1iZXI7XG4gIHBvc2l0aXZlOiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2hhcnREYXRhIHtcbiAgc2VyaWVzOiBDaGFydEJhckRhdGFbXTtcbiAgbmFtZT86IHN0cmluZztcbiAgdmFsdWU/OiBudW1iZXI7XG4gIGRpZmY/OiBzdHJpbmcgfCBudW1iZXI7XG4gIGN1cnJlbmN5Pzogc3RyaW5nO1xuICBiYWRnZT86IHN0cmluZztcbiAgYmFja2dyb3VuZD86IHN0cmluZztcbiAgZ3JvdXA/OiBDaGFydEJhckRhdGFbXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDaGFydERhdGFMYWJlbHMge1xuICB4OiBudW1iZXI7XG4gIHk6IG51bWJlcjtcbiAgd2lkdGg6IG51bWJlcjtcbiAgaGVpZ2h0OiBudW1iZXI7XG4gIHRvdGFsPzogbnVtYmVyO1xuICBjbGFzcz86IHN0cmluZztcbiAgbmFtZT86IHN0cmluZztcbiAgb2Zmc2V0MD86IG51bWJlcjtcbiAgb2Zmc2V0MT86IG51bWJlcjtcbiAgcm91bmRFZGdlczogYm9vbGVhbjtcbiAgc2VyaWVzPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENoYXJ0Q29sb3JzIHtcbiAgY29sb3I/OiBzdHJpbmc7XG4gIGdyYWRpZW50U3RvcHM/OiBHcmFkaWVudFtdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEZvcm1hdHRlZENoYXJ0RGF0YUxhYmVscyBleHRlbmRzIENoYXJ0RGF0YUxhYmVscywgQ2hhcnRDb2xvcnMge1xuICBkYXRhPzogQ2hhcnREYXRhO1xuICBmb3JtYXR0ZWRMYWJlbD86IHN0cmluZztcbiAgbGFiZWw/OiBzdHJpbmc7XG4gIHRvb2x0aXBUZXh0Pzogc3RyaW5nO1xuICB2YWx1ZT86IG51bWJlcjtcbiAgZ3JhcGhEYXRhOiBEYXRhSXRlbTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBMZWdlbmRFbnRyaWVzIHtcbiAgbGFiZWw6IHN0cmluZztcbiAgZm9ybWF0dGVkTGFiZWw6IHN0cmluZztcbiAgY29sb3I6IHN0cmluZyB8IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBUdXJub3ZlcnNEYXRhIHtcbiAgdHVybm92ZXJzOiBUdXJub3Zlckl0ZW1bXTtcbiAgZm9yZWNhc3Q6IEZvcmVjYXN0W107XG4gIGFkZGl0aW9ucz86IHsgW2tleTogc3RyaW5nXTogYW55IH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRm9yZWNhc3QgZXh0ZW5kcyBUdXJub3Zlckl0ZW0ge1xuICBmb3JlY2FzdDogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBDYXNoRmxvd0l0ZW0gZXh0ZW5kcyBUdXJub3Zlckl0ZW0ge1xuICBmb3JlY2FzdD86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVHVybm92ZXJzRGF0ZVBhcmFtcyB7XG4gIHBlcmlvZFN0YXJ0RGF0ZTogc3RyaW5nO1xuICBwZXJpb2RFbmREYXRlOiBzdHJpbmc7XG4gIGludGVydmFsRHVyYXRpb246ICdEQVknIHwgJ1dFRUsnIHwgJ01PTlRIJyB8ICdZRUFSJztcbiAgaW50ZXJ2YWxTdGFydERheT86IG51bWJlciB8IHVuZGVmaW5lZDtcbiAgZm9yZWNhc3Q/OiAnTk9ORScgfCAnQVZHJyB8IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBUdXJub3ZlcnNHZXRQYXJhbXMgZXh0ZW5kcyBUdXJub3ZlcnNEYXRlUGFyYW1zIHtcbiAgYXJyYW5nZW1lbnRJZHM6IHN0cmluZ1tdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFR1cm5vdmVyc0Vycm9yIHtcbiAgbWVzc2FnZTogc3RyaW5nO1xuICBrZXk/OiBzdHJpbmc7XG4gIGNvbnRleHQ/OiBvYmplY3Q7XG59XG5cbmNvbnN0IGdldE1lc3NhZ2VGcm9tUmVzcG9uc2UgPSAoZXJyb3I6IEh0dHBFcnJvclJlc3BvbnNlKSA9PiB7XG4gIGNvbnN0IHJlc3BvbnNlQm9keSA9IGVycm9yLmVycm9yO1xuXG4gIGlmIChyZXNwb25zZUJvZHkgJiYgcmVzcG9uc2VCb2R5LmVycm9ycyAmJiByZXNwb25zZUJvZHkuZXJyb3JzWzBdICYmIHJlc3BvbnNlQm9keS5lcnJvcnNbMF0ubWVzc2FnZSkge1xuICAgIHJldHVybiByZXNwb25zZUJvZHkuZXJyb3JzWzBdLm1lc3NhZ2U7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IHBhcnNlRXJyb3IgPSAoZXJyb3I6IEh0dHBFcnJvclJlc3BvbnNlKTogVHVybm92ZXJzRXJyb3IgPT4ge1xuICAvLyBUT0RPOiBzaG91bGQgaGF2ZSBtb3JlIHVzZXItZnJpZW5kbHkgbWVzc2FnZXNcbiAgaWYgKGVycm9yLmVycm9yIGluc3RhbmNlb2YgRXJyb3JFdmVudCkge1xuICAgIC8vIENsaWVudC1zaWRlIG9yIG5ldHdvcmsgZXJyb3IuXG4gICAgcmV0dXJuIHtcbiAgICAgIG1lc3NhZ2U6ICdBbiB1bmV4cGVjdGVkIGVycm9yIG9jY3VycmVkJyxcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIC8vIEJhY2tlbmQgcmV0dXJucyB1bnN1Y2Nlc3NmdWwgcmVzcG9uc2UgY29kZS4gIEluIGNhc2Ugb2YgNDAwLCB0cnkgdG8gZ2V0IGEgbWVzc2FnZSBmcm9tIHRoZVxuICAgIC8vIHJlc3BvbnNlLlxuICAgIHN3aXRjaCAoZXJyb3Iuc3RhdHVzKSB7XG4gICAgICBjYXNlIDQwMDpcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBtZXNzYWdlOiBnZXRNZXNzYWdlRnJvbVJlc3BvbnNlKGVycm9yKSB8fCAnRXJyb3IgNDAwJyxcbiAgICAgICAgfTtcbiAgICAgIGNhc2UgNDAxOlxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG1lc3NhZ2U6ICdFcnJvciA0MDEnLFxuICAgICAgICB9O1xuICAgICAgY2FzZSA0MDM6XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbWVzc2FnZTogJ0Vycm9yIDQwMycsXG4gICAgICAgIH07XG4gICAgICBjYXNlIDQwNDpcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBtZXNzYWdlOiAnRXJyb3IgNDA0JyxcbiAgICAgICAgfTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbWVzc2FnZTogJ0FuIHVuZXhwZWN0ZWQgZXJyb3Igb2NjdXJyZWQnLFxuICAgICAgICB9O1xuICAgIH1cbiAgfVxufTtcbiJdfQ==