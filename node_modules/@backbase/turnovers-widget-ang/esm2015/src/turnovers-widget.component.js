import { Component, Input, Optional } from '@angular/core';
import { BehaviorSubject, of } from 'rxjs';
import { map } from 'rxjs/operators';
import { filterInputParameters, PROPERTIES } from './constants';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/foundation-ang/core";
import * as i2 from "./turnovers/turnovers.component";
import * as i3 from "@angular/common";
export class TurnoversWidgetComponent {
    constructor(itemModel) {
        this.itemModel = itemModel;
        this.forecast = this.getProperty(PROPERTIES.FORECAST).pipe(map((propertyValue) => propertyValue === true));
        this.forecastSubject = new BehaviorSubject(true);
        this.forecast$ = filterInputParameters(this.forecastSubject.asObservable(), this.forecast);
    }
    // eslint-disable-next-line
    set forecastValue(value) {
        this.forecastSubject.next(value);
    }
    getProperty(property) {
        return this.itemModel ? this.itemModel.property(property.name, property.value) : of(property.value);
    }
}
TurnoversWidgetComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TurnoversWidgetComponent, deps: [{ token: i1.ItemModel, optional: true }], target: i0.ɵɵFactoryTarget.Component });
TurnoversWidgetComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TurnoversWidgetComponent, selector: "bb-turnovers-widget", inputs: { forecastValue: ["forecast", "forecastValue"] }, ngImport: i0, template: "<bb-turnovers\n  [forecast]=\"(forecast | async) || undefined\"\n></bb-turnovers>", components: [{ type: i2.TurnoversComponent, selector: "bb-turnovers", inputs: ["forecast"] }], pipes: { "async": i3.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TurnoversWidgetComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-turnovers-widget',
                    templateUrl: './turnovers-widget.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.ItemModel, decorators: [{
                    type: Optional
                }] }]; }, propDecorators: { forecastValue: [{
                type: Input,
                args: ['forecast']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHVybm92ZXJzLXdpZGdldC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9saWJzL3R1cm5vdmVycy13aWRnZXQvc3JjL3R1cm5vdmVycy13aWRnZXQuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vbGlicy90dXJub3ZlcnMtd2lkZ2V0L3NyYy90dXJub3ZlcnMtd2lkZ2V0LmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUczRCxPQUFPLEVBQUUsZUFBZSxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN2RCxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDckMsT0FBTyxFQUFFLHFCQUFxQixFQUFjLFVBQVUsRUFBRSxNQUFNLGFBQWEsQ0FBQzs7Ozs7QUFNNUUsTUFBTSxPQUFPLHdCQUF3QjtJQWdCbkMsWUFBeUMsU0FBb0I7UUFBcEIsY0FBUyxHQUFULFNBQVMsQ0FBVztRQVY3RCxhQUFRLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLGFBQWEsRUFBRSxFQUFFLENBQUMsYUFBYSxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUM7UUFFckYsb0JBQWUsR0FBRyxJQUFJLGVBQWUsQ0FBVSxJQUFJLENBQUMsQ0FBQztRQUU3RCxjQUFTLEdBQXdCLHFCQUFxQixDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsWUFBWSxFQUFFLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBTXBELENBQUM7SUFmakUsMkJBQTJCO0lBQzNCLElBQXVCLGFBQWEsQ0FBQyxLQUFjO1FBQ2pELElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFRTyxXQUFXLENBQUMsUUFBb0I7UUFDdEMsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0RyxDQUFDOztzSEFkVSx3QkFBd0I7MEdBQXhCLHdCQUF3QixxSENYckMsbUZBRWdCOzRGRFNILHdCQUF3QjtrQkFKcEMsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUscUJBQXFCO29CQUMvQixXQUFXLEVBQUUsbUNBQW1DO2lCQUNqRDs7MEJBaUJjLFFBQVE7NENBZEUsYUFBYTtzQkFBbkMsS0FBSzt1QkFBQyxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEl0ZW1Nb2RlbCB9IGZyb20gJ0BiYWNrYmFzZS9mb3VuZGF0aW9uLWFuZy9jb3JlJztcbmltcG9ydCB7IFByb3BlcnR5IH0gZnJvbSAnQGJhY2tiYXNlL2ZvdW5kYXRpb24tYW5nL3dlYi1zZGsnO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgZmlsdGVySW5wdXRQYXJhbWV0ZXJzLCBQcm9wZXJ0aWVzLCBQUk9QRVJUSUVTIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdiYi10dXJub3ZlcnMtd2lkZ2V0JyxcbiAgdGVtcGxhdGVVcmw6ICcuL3R1cm5vdmVycy13aWRnZXQuY29tcG9uZW50Lmh0bWwnLFxufSlcbmV4cG9ydCBjbGFzcyBUdXJub3ZlcnNXaWRnZXRDb21wb25lbnQge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgQElucHV0KCdmb3JlY2FzdCcpIHNldCBmb3JlY2FzdFZhbHVlKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5mb3JlY2FzdFN1YmplY3QubmV4dCh2YWx1ZSk7XG4gIH1cblxuICBmb3JlY2FzdCA9IHRoaXMuZ2V0UHJvcGVydHkoUFJPUEVSVElFUy5GT1JFQ0FTVCkucGlwZShtYXAoKHByb3BlcnR5VmFsdWUpID0+IHByb3BlcnR5VmFsdWUgPT09IHRydWUpKTtcblxuICBwcml2YXRlIHJlYWRvbmx5IGZvcmVjYXN0U3ViamVjdCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8Ym9vbGVhbj4odHJ1ZSk7XG5cbiAgcmVhZG9ubHkgZm9yZWNhc3QkOiBPYnNlcnZhYmxlPGJvb2xlYW4+ID0gZmlsdGVySW5wdXRQYXJhbWV0ZXJzKHRoaXMuZm9yZWNhc3RTdWJqZWN0LmFzT2JzZXJ2YWJsZSgpLCB0aGlzLmZvcmVjYXN0KTtcblxuICBwcml2YXRlIGdldFByb3BlcnR5KHByb3BlcnR5OiBQcm9wZXJ0aWVzKTogT2JzZXJ2YWJsZTxQcm9wZXJ0eT4ge1xuICAgIHJldHVybiB0aGlzLml0ZW1Nb2RlbCA/IHRoaXMuaXRlbU1vZGVsLnByb3BlcnR5KHByb3BlcnR5Lm5hbWUsIHByb3BlcnR5LnZhbHVlKSA6IG9mKHByb3BlcnR5LnZhbHVlKTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIHByaXZhdGUgcmVhZG9ubHkgaXRlbU1vZGVsOiBJdGVtTW9kZWwpIHt9XG59XG4iLCI8YmItdHVybm92ZXJzXG4gIFtmb3JlY2FzdF09XCIoZm9yZWNhc3QgfCBhc3luYykgfHwgdW5kZWZpbmVkXCJcbj48L2JiLXR1cm5vdmVycz4iXX0=