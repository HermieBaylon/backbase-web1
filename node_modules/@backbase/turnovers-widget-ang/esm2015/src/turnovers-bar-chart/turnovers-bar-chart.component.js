import { Component, Directive, Input, ViewChild } from '@angular/core';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { CssVariablesService } from '@backbase/ui-ang/css-variables-lib';
import { from } from 'rxjs';
import { map } from 'rxjs/operators';
import { BAR_COLORS_CSS_VAR, CHART_COLORS, MOBILE_WIDGET_WIDTH } from '../constants';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@backbase/ui-ang/css-variables-lib";
import * as i3 from "../turnovers-vertical-grouped-bar-chart/turnovers-vertical-grouped-bar-chart.component";
import * as i4 from "../bb-turnovers-legend/bb-turnovers-legend.component";
import * as i5 from "@backbase/ui-ang/amount";
export class TurnoversBarChartComponent {
    constructor(currencyPipe, cssVariableService) {
        this.currencyPipe = currencyPipe;
        this.cssVariableService = cssVariableService;
        /**
         * Array of Chart data objects needed for the chart to be rendered.
         */
        this.chartSeriesData = [];
        /**
         * Disable/enable the forecast option on the chart.
         */
        this.forecast = false;
        // bar chart
        // options
        this.chartOptions = from(this.cssVariableService.getCssVariable(BAR_COLORS_CSS_VAR)).pipe(map((cssVar) => ({
            colors: cssVar ? cssVar.split(',') : CHART_COLORS,
            showXAxis: true,
            showYAxis: true,
            gradient: false,
            showLegend: false,
            showXAxisLabel: true,
            showYAxisLabel: true,
        })));
    }
    yAxisTickFormatting(value) {
        const currency = this.chartSeriesData[0].currency;
        if (this.barChart2d && this.barChart2d.width < MOBILE_WIDGET_WIDTH) {
            const amountVal = value / 1000;
            if (amountVal <= 999) {
                return `${this.currencyPipe.transform(amountVal, currency, 'symbol', '1.0')}k`;
            }
            return `${this.currencyPipe.transform(amountVal / 1000, currency, 'symbol', '1.0')}m`;
        }
        return this.currencyPipe.transform(value, currency, 'symbol', '1.0');
    }
}
TurnoversBarChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TurnoversBarChartComponent, deps: [{ token: i1.CurrencyPipe }, { token: i2.CssVariablesService }], target: i0.ɵɵFactoryTarget.Component });
TurnoversBarChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TurnoversBarChartComponent, selector: "bb-turnovers-bar-chart", inputs: { chartSeriesData: "chartSeriesData", forecast: "forecast" }, providers: [CssVariablesService], viewQueries: [{ propertyName: "barChart2d", first: true, predicate: ["bbChartsBarVertical2d"], descendants: true }], ngImport: i0, template: "<div class=\"position-relative pb-25p pb-md-50p\">\n  <ng-container *ngIf=\"this.chartOptions | async as options\">\n    <ng-container\n      bbTurnoversVerticalGroupedBarChartCustomizable\n      [bbHostRef]=\"this\"\n      [bbTemplateContext]=\"{options: options}\"\n    ></ng-container>\n    <ng-container\n      bbTurnoversVerticalStackedBarChartCustomizable\n      [bbHostRef]=\"this\"\n      [bbTemplateContext]=\"{options: options}\"\n    ></ng-container>\n  </ng-container>\n</div>\n\n<ng-template bbTurnoversVerticalGroupedBarChartCustomizable let-hostRef let-options=\"context.options\">\n  <div class=\"bb-turnovers-vertical-chart\">\n    <bb-charts-bar-vertical-2d\n      #bbChartsBarVertical2d\n      class=\"position-static transform-none\"\n      [scheme]=\"{ domain: options.colors }\"\n      [results]=\"hostRef.chartSeriesData\"\n      [groupsData]=\"hostRef.chartSeriesData\"\n      [xAxis]=\"options.showXAxis\"\n      [yAxis]=\"options.showYAxis\"\n      [showXAxisLabel]=\"options.showXAxisLabel\"\n      [showYAxisLabel]=\"options.showYAxisLabel\"\n      [legend]=\"options.showLegend\"\n      [gradient]=\"options.gradient\"\n      [barPadding]=\"0\"\n      [groupPadding]=\"6\"\n      [roundEdges]=\"true\"\n      [legendTemplate]=\"legendTemplate\"\n      [tooltipTemplate]=\"tooltipTemplate\"\n      [yAxisTickFormatting]=\"yAxisTickFormatting.bind(this)\">\n    </bb-charts-bar-vertical-2d>\n  </div>\n</ng-template>\n\n<ng-template bbTurnoversVerticalStackedBarChartCustomizable let-hostRef let-options=\"context.options\">\n</ng-template>\n\n<ng-template bbTurnoversChartLegendCustomizable #legendTemplate\n  let-legendOptions=\"legendOptions\"\n  let-activeEntries=\"activeEntries\"\n  let-height=\"height\"\n  let-onActivate=\"onActivate\"\n  let-onDeactivate=\"onDeactivate\"\n  let-onClick=\"onClick\">\n  <bb-charts-legend\n    class=\"chart-legend\"\n    [data]=\"legendOptions.domain\"\n    [title]=\"legendOptions.title\"\n    [colors]=\"legendOptions.colors\"\n    [height]=\"height\"\n    [activeEntries]=\"activeEntries\"\n    (labelClick)=\"onClick($event)\"\n    (labelActivate)=\"onActivate($event)\"\n    (labelDeactivate)=\"onDeactivate($event)\">\n  </bb-charts-legend>\n</ng-template>\n\n<ng-template bbTurnoversChartTooltipCustomizable #tooltipTemplate let-model=\"model\">\n  <div class=\"chart-tooltip-default bb-arrow-bottom text-dark\">\n    <div\n      *ngIf=\"model.badge\"\n      class=\"pb-1 mb-2 font-weight-bold border-bottom border-dark text-capitalize text-left\">\n      {{model.badge}}\n    </div>\n    <div>\n      <div class=\"d-flex pb-1 align-items-center\" *ngFor=\"let bar of model.series; let i = index\">\n        <span [ngStyle]=\"{'color': bar.color}\" class=\"bicon bicon-circle\"></span>\n        <span class=\"text-capitalize\">{{bar.name}}</span>\n        <span class=\"ml-auto font-weight-bold\">\n          <bb-amount-ui\n            [amount]=\"i === 0 ? bar.value : (-bar.value)\"\n            [currency]=\"bar.currency\"\n            [showPlusSign]=\"i === 0 && bar.value > 0\"\n          ></bb-amount-ui>\n        </span>\n      </div>\n      <div class=\"d-flex pt-1 pl-1 align-items-center\">\n        <span i18n=\"Difference|tooltip difference label@@turnovers.tooltip.diff\">Difference</span>\n        <span class=\"ml-auto font-weight-bold\">\n          <bb-amount-ui\n            [amount]=\"model.diff\"\n            [currency]=\"model.currency\"\n            [showPlusSign]=\"model.diff !== 0\"\n          ></bb-amount-ui>\n        </span>\n      </div>\n    </div>\n  </div>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i3.TurnoversVerticalGroupedBarChartComponent; }), selector: "bb-charts-bar-vertical-2d", inputs: ["scaleType", "groupPadding", "results"] }, { type: i0.forwardRef(function () { return i4.BbTurnoversLegendComponent; }), selector: "bb-charts-legend", inputs: ["data", "title", "colors", "height", "width", "activeEntries"], outputs: ["labelClick", "labelActivate", "labelDeactivate"] }, { type: i0.forwardRef(function () { return i5.AmountComponent; }), selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }], directives: [{ type: i0.forwardRef(function () { return i1.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return TurnoversVerticalGroupedBarChartCustomizableDirective; }), selector: "[bbTurnoversVerticalGroupedBarChartCustomizable]" }, { type: i0.forwardRef(function () { return TurnoversVerticalStackedBarChartCustomizableDirective; }), selector: "[bbTurnoversVerticalStackedBarChartCustomizable]" }, { type: i0.forwardRef(function () { return TurnoversChartLegendCustomizableDirective; }), selector: "[bbTurnoversChartLegendCustomizable]" }, { type: i0.forwardRef(function () { return TurnoversChartTooltipCustomizableDirective; }), selector: "[bbTurnoversChartTooltipCustomizable]" }, { type: i0.forwardRef(function () { return i1.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i0.forwardRef(function () { return i1.NgStyle; }), selector: "[ngStyle]", inputs: ["ngStyle"] }], pipes: { "async": i0.forwardRef(function () { return i1.AsyncPipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TurnoversBarChartComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-turnovers-bar-chart',
                    templateUrl: './turnovers-bar-chart.component.html',
                    providers: [CssVariablesService],
                }]
        }], ctorParameters: function () { return [{ type: i1.CurrencyPipe }, { type: i2.CssVariablesService }]; }, propDecorators: { barChart2d: [{
                type: ViewChild,
                args: ['bbChartsBarVertical2d']
            }], chartSeriesData: [{
                type: Input
            }], forecast: [{
                type: Input
            }] } });
export class TurnoversChartTooltipCustomizableDirective extends BbTemplate {
}
TurnoversChartTooltipCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TurnoversChartTooltipCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TurnoversChartTooltipCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: TurnoversChartTooltipCustomizableDirective, selector: "[bbTurnoversChartTooltipCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TurnoversChartTooltipCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbTurnoversChartTooltipCustomizable]',
                }]
        }] });
export class TurnoversChartLegendCustomizableDirective extends BbTemplate {
}
TurnoversChartLegendCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TurnoversChartLegendCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TurnoversChartLegendCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: TurnoversChartLegendCustomizableDirective, selector: "[bbTurnoversChartLegendCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TurnoversChartLegendCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbTurnoversChartLegendCustomizable]',
                }]
        }] });
export class TurnoversVerticalGroupedBarChartCustomizableDirective extends BbTemplate {
}
TurnoversVerticalGroupedBarChartCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TurnoversVerticalGroupedBarChartCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TurnoversVerticalGroupedBarChartCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: TurnoversVerticalGroupedBarChartCustomizableDirective, selector: "[bbTurnoversVerticalGroupedBarChartCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TurnoversVerticalGroupedBarChartCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbTurnoversVerticalGroupedBarChartCustomizable]',
                }]
        }] });
export class TurnoversVerticalStackedBarChartCustomizableDirective extends BbTemplate {
}
TurnoversVerticalStackedBarChartCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TurnoversVerticalStackedBarChartCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TurnoversVerticalStackedBarChartCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: TurnoversVerticalStackedBarChartCustomizableDirective, selector: "[bbTurnoversVerticalStackedBarChartCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TurnoversVerticalStackedBarChartCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbTurnoversVerticalStackedBarChartCustomizable]',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,