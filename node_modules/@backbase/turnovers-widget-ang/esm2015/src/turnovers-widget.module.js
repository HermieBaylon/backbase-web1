// General modules
import { CommonModule, CurrencyPipe, DatePipe } from '@angular/common';
import { NgModule } from '@angular/core';
// Backbase modules
import { BackbaseCoreModule } from '@backbase/foundation-ang/core';
import { FormatAmountModule } from '@backbase/ui-ang/amount';
import { ButtonModule } from '@backbase/ui-ang/button';
import { EmptyStateModule } from '@backbase/ui-ang/empty-state';
import { LoadingIndicatorModule } from '@backbase/ui-ang/loading-indicator';
import { NgxChartsModule } from '@swimlane/ngx-charts';
import { BbTurnoversLegendComponent } from './bb-turnovers-legend/bb-turnovers-legend.component';
import { BbGridPanelSeriesComponent } from './ngx-charts/common/bb-grid-panel-series.component';
import { TurnoversBarChartComponent, TurnoversChartLegendCustomizableDirective, TurnoversChartTooltipCustomizableDirective, TurnoversVerticalGroupedBarChartCustomizableDirective, TurnoversVerticalStackedBarChartCustomizableDirective, } from './turnovers-bar-chart/turnovers-bar-chart.component';
import { TurnoversVerticalBarChartComponent } from './turnovers-vertical-bar-chart/turnovers-vertical-bar-chart.component';
import { BbSeriesVerticalComponent } from './turnovers-vertical-grouped-bar-chart/bb-charts-series-vertical.component';
import { TurnoversVerticalGroupedBarChartComponent } from './turnovers-vertical-grouped-bar-chart/turnovers-vertical-grouped-bar-chart.component';
import { TurnoversVerticalStackedBarChartComponent } from './turnovers-vertical-stacked-bar-chart/turnovers-vertical-stacked-bar-chart.component';
import { TurnoversWidgetComponent } from './turnovers-widget.component';
// Components
import { TurnoversComponent, TurnoversControlsCustomizableDirective, TurnoversEmptyStateCustomizableDirective, TurnoversItemCustomizableDirective, } from './turnovers/turnovers.component';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/foundation-ang/core";
const components = [
    TurnoversWidgetComponent,
    TurnoversComponent,
    TurnoversBarChartComponent,
    TurnoversVerticalBarChartComponent,
    TurnoversVerticalStackedBarChartComponent,
    TurnoversVerticalGroupedBarChartComponent,
    BbTurnoversLegendComponent,
    BbSeriesVerticalComponent,
    BbGridPanelSeriesComponent,
];
const customizables = [
    TurnoversItemCustomizableDirective,
    TurnoversControlsCustomizableDirective,
    TurnoversChartTooltipCustomizableDirective,
    TurnoversChartLegendCustomizableDirective,
    TurnoversVerticalStackedBarChartCustomizableDirective,
    TurnoversVerticalGroupedBarChartCustomizableDirective,
    TurnoversEmptyStateCustomizableDirective,
];
const modules = [FormatAmountModule, LoadingIndicatorModule, EmptyStateModule, ButtonModule];
export class TurnoversWidgetModule {
}
TurnoversWidgetModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TurnoversWidgetModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TurnoversWidgetModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TurnoversWidgetModule, declarations: [TurnoversWidgetComponent,
        TurnoversComponent,
        TurnoversBarChartComponent,
        TurnoversVerticalBarChartComponent,
        TurnoversVerticalStackedBarChartComponent,
        TurnoversVerticalGroupedBarChartComponent,
        BbTurnoversLegendComponent,
        BbSeriesVerticalComponent,
        BbGridPanelSeriesComponent, TurnoversItemCustomizableDirective,
        TurnoversControlsCustomizableDirective,
        TurnoversChartTooltipCustomizableDirective,
        TurnoversChartLegendCustomizableDirective,
        TurnoversVerticalStackedBarChartCustomizableDirective,
        TurnoversVerticalGroupedBarChartCustomizableDirective,
        TurnoversEmptyStateCustomizableDirective], imports: [CommonModule, i1.BackbaseCoreModule, NgxChartsModule, FormatAmountModule, LoadingIndicatorModule, EmptyStateModule, ButtonModule], exports: [TurnoversWidgetComponent,
        TurnoversComponent,
        TurnoversBarChartComponent,
        TurnoversVerticalBarChartComponent,
        TurnoversVerticalStackedBarChartComponent,
        TurnoversVerticalGroupedBarChartComponent,
        BbTurnoversLegendComponent,
        BbSeriesVerticalComponent,
        BbGridPanelSeriesComponent, TurnoversItemCustomizableDirective,
        TurnoversControlsCustomizableDirective,
        TurnoversChartTooltipCustomizableDirective,
        TurnoversChartLegendCustomizableDirective,
        TurnoversVerticalStackedBarChartCustomizableDirective,
        TurnoversVerticalGroupedBarChartCustomizableDirective,
        TurnoversEmptyStateCustomizableDirective, FormatAmountModule, LoadingIndicatorModule, EmptyStateModule, ButtonModule] });
TurnoversWidgetModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TurnoversWidgetModule, providers: [DatePipe, CurrencyPipe], imports: [[
            CommonModule,
            BackbaseCoreModule.withConfig({
                classMap: { TurnoversWidgetComponent },
            }),
            NgxChartsModule,
            ...modules,
        ], FormatAmountModule, LoadingIndicatorModule, EmptyStateModule, ButtonModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TurnoversWidgetModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        BackbaseCoreModule.withConfig({
                            classMap: { TurnoversWidgetComponent },
                        }),
                        NgxChartsModule,
                        ...modules,
                    ],
                    providers: [DatePipe, CurrencyPipe],
                    entryComponents: [TurnoversComponent],
                    declarations: [...components, ...customizables],
                    exports: [...components, ...customizables, ...modules],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHVybm92ZXJzLXdpZGdldC5tb2R1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9saWJzL3R1cm5vdmVycy13aWRnZXQvc3JjL3R1cm5vdmVycy13aWRnZXQubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGtCQUFrQjtBQUNsQixPQUFPLEVBQUUsWUFBWSxFQUFFLFlBQVksRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN2RSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLG1CQUFtQjtBQUNuQixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUNuRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDdkQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDaEUsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFDNUUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLHFEQUFxRCxDQUFDO0FBQ2pHLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLG9EQUFvRCxDQUFDO0FBQ2hHLE9BQU8sRUFDTCwwQkFBMEIsRUFDMUIseUNBQXlDLEVBQ3pDLDBDQUEwQyxFQUMxQyxxREFBcUQsRUFDckQscURBQXFELEdBQ3RELE1BQU0scURBQXFELENBQUM7QUFDN0QsT0FBTyxFQUFFLGtDQUFrQyxFQUFFLE1BQU0sdUVBQXVFLENBQUM7QUFDM0gsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sNEVBQTRFLENBQUM7QUFDdkgsT0FBTyxFQUFFLHlDQUF5QyxFQUFFLE1BQU0sdUZBQXVGLENBQUM7QUFDbEosT0FBTyxFQUFFLHlDQUF5QyxFQUFFLE1BQU0sdUZBQXVGLENBQUM7QUFDbEosT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDeEUsYUFBYTtBQUNiLE9BQU8sRUFDTCxrQkFBa0IsRUFDbEIsc0NBQXNDLEVBQ3RDLHdDQUF3QyxFQUN4QyxrQ0FBa0MsR0FDbkMsTUFBTSxpQ0FBaUMsQ0FBQzs7O0FBRXpDLE1BQU0sVUFBVSxHQUFHO0lBQ2pCLHdCQUF3QjtJQUN4QixrQkFBa0I7SUFDbEIsMEJBQTBCO0lBQzFCLGtDQUFrQztJQUNsQyx5Q0FBeUM7SUFDekMseUNBQXlDO0lBQ3pDLDBCQUEwQjtJQUMxQix5QkFBeUI7SUFDekIsMEJBQTBCO0NBQzNCLENBQUM7QUFFRixNQUFNLGFBQWEsR0FBRztJQUNwQixrQ0FBa0M7SUFDbEMsc0NBQXNDO0lBQ3RDLDBDQUEwQztJQUMxQyx5Q0FBeUM7SUFDekMscURBQXFEO0lBQ3JELHFEQUFxRDtJQUNyRCx3Q0FBd0M7Q0FDekMsQ0FBQztBQUNGLE1BQU0sT0FBTyxHQUFHLENBQUMsa0JBQWtCLEVBQUUsc0JBQXNCLEVBQUUsZ0JBQWdCLEVBQUUsWUFBWSxDQUFDLENBQUM7QUFnQjdGLE1BQU0sT0FBTyxxQkFBcUI7O21IQUFyQixxQkFBcUI7b0hBQXJCLHFCQUFxQixpQkFwQ2hDLHdCQUF3QjtRQUN4QixrQkFBa0I7UUFDbEIsMEJBQTBCO1FBQzFCLGtDQUFrQztRQUNsQyx5Q0FBeUM7UUFDekMseUNBQXlDO1FBQ3pDLDBCQUEwQjtRQUMxQix5QkFBeUI7UUFDekIsMEJBQTBCLEVBSTFCLGtDQUFrQztRQUNsQyxzQ0FBc0M7UUFDdEMsMENBQTBDO1FBQzFDLHlDQUF5QztRQUN6QyxxREFBcUQ7UUFDckQscURBQXFEO1FBQ3JELHdDQUF3QyxhQU10QyxZQUFZLHlCQUlaLGVBQWUsRUFSRixrQkFBa0IsRUFBRSxzQkFBc0IsRUFBRSxnQkFBZ0IsRUFBRSxZQUFZLGFBcEJ6Rix3QkFBd0I7UUFDeEIsa0JBQWtCO1FBQ2xCLDBCQUEwQjtRQUMxQixrQ0FBa0M7UUFDbEMseUNBQXlDO1FBQ3pDLHlDQUF5QztRQUN6QywwQkFBMEI7UUFDMUIseUJBQXlCO1FBQ3pCLDBCQUEwQixFQUkxQixrQ0FBa0M7UUFDbEMsc0NBQXNDO1FBQ3RDLDBDQUEwQztRQUMxQyx5Q0FBeUM7UUFDekMscURBQXFEO1FBQ3JELHFEQUFxRDtRQUNyRCx3Q0FBd0MsRUFFekIsa0JBQWtCLEVBQUUsc0JBQXNCLEVBQUUsZ0JBQWdCLEVBQUUsWUFBWTtvSEFnQjlFLHFCQUFxQixhQUxyQixDQUFDLFFBQVEsRUFBRSxZQUFZLENBQUMsWUFSMUI7WUFDUCxZQUFZO1lBQ1osa0JBQWtCLENBQUMsVUFBVSxDQUFDO2dCQUM1QixRQUFRLEVBQUUsRUFBRSx3QkFBd0IsRUFBRTthQUN2QyxDQUFDO1lBQ0YsZUFBZTtZQUNmLEdBQUcsT0FBTztTQUNYLEVBVmMsa0JBQWtCLEVBQUUsc0JBQXNCLEVBQUUsZ0JBQWdCLEVBQUUsWUFBWTs0RkFnQjlFLHFCQUFxQjtrQkFkakMsUUFBUTttQkFBQztvQkFDUixPQUFPLEVBQUU7d0JBQ1AsWUFBWTt3QkFDWixrQkFBa0IsQ0FBQyxVQUFVLENBQUM7NEJBQzVCLFFBQVEsRUFBRSxFQUFFLHdCQUF3QixFQUFFO3lCQUN2QyxDQUFDO3dCQUNGLGVBQWU7d0JBQ2YsR0FBRyxPQUFPO3FCQUNYO29CQUNELFNBQVMsRUFBRSxDQUFDLFFBQVEsRUFBRSxZQUFZLENBQUM7b0JBQ25DLGVBQWUsRUFBRSxDQUFDLGtCQUFrQixDQUFDO29CQUNyQyxZQUFZLEVBQUUsQ0FBQyxHQUFHLFVBQVUsRUFBRSxHQUFHLGFBQWEsQ0FBQztvQkFDL0MsT0FBTyxFQUFFLENBQUMsR0FBRyxVQUFVLEVBQUUsR0FBRyxhQUFhLEVBQUUsR0FBRyxPQUFPLENBQUM7aUJBQ3ZEIiwic291cmNlc0NvbnRlbnQiOlsiLy8gR2VuZXJhbCBtb2R1bGVzXG5pbXBvcnQgeyBDb21tb25Nb2R1bGUsIEN1cnJlbmN5UGlwZSwgRGF0ZVBpcGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbi8vIEJhY2tiYXNlIG1vZHVsZXNcbmltcG9ydCB7IEJhY2tiYXNlQ29yZU1vZHVsZSB9IGZyb20gJ0BiYWNrYmFzZS9mb3VuZGF0aW9uLWFuZy9jb3JlJztcbmltcG9ydCB7IEZvcm1hdEFtb3VudE1vZHVsZSB9IGZyb20gJ0BiYWNrYmFzZS91aS1hbmcvYW1vdW50JztcbmltcG9ydCB7IEJ1dHRvbk1vZHVsZSB9IGZyb20gJ0BiYWNrYmFzZS91aS1hbmcvYnV0dG9uJztcbmltcG9ydCB7IEVtcHR5U3RhdGVNb2R1bGUgfSBmcm9tICdAYmFja2Jhc2UvdWktYW5nL2VtcHR5LXN0YXRlJztcbmltcG9ydCB7IExvYWRpbmdJbmRpY2F0b3JNb2R1bGUgfSBmcm9tICdAYmFja2Jhc2UvdWktYW5nL2xvYWRpbmctaW5kaWNhdG9yJztcbmltcG9ydCB7IE5neENoYXJ0c01vZHVsZSB9IGZyb20gJ0Bzd2ltbGFuZS9uZ3gtY2hhcnRzJztcbmltcG9ydCB7IEJiVHVybm92ZXJzTGVnZW5kQ29tcG9uZW50IH0gZnJvbSAnLi9iYi10dXJub3ZlcnMtbGVnZW5kL2JiLXR1cm5vdmVycy1sZWdlbmQuY29tcG9uZW50JztcbmltcG9ydCB7IEJiR3JpZFBhbmVsU2VyaWVzQ29tcG9uZW50IH0gZnJvbSAnLi9uZ3gtY2hhcnRzL2NvbW1vbi9iYi1ncmlkLXBhbmVsLXNlcmllcy5jb21wb25lbnQnO1xuaW1wb3J0IHtcbiAgVHVybm92ZXJzQmFyQ2hhcnRDb21wb25lbnQsXG4gIFR1cm5vdmVyc0NoYXJ0TGVnZW5kQ3VzdG9taXphYmxlRGlyZWN0aXZlLFxuICBUdXJub3ZlcnNDaGFydFRvb2x0aXBDdXN0b21pemFibGVEaXJlY3RpdmUsXG4gIFR1cm5vdmVyc1ZlcnRpY2FsR3JvdXBlZEJhckNoYXJ0Q3VzdG9taXphYmxlRGlyZWN0aXZlLFxuICBUdXJub3ZlcnNWZXJ0aWNhbFN0YWNrZWRCYXJDaGFydEN1c3RvbWl6YWJsZURpcmVjdGl2ZSxcbn0gZnJvbSAnLi90dXJub3ZlcnMtYmFyLWNoYXJ0L3R1cm5vdmVycy1iYXItY2hhcnQuY29tcG9uZW50JztcbmltcG9ydCB7IFR1cm5vdmVyc1ZlcnRpY2FsQmFyQ2hhcnRDb21wb25lbnQgfSBmcm9tICcuL3R1cm5vdmVycy12ZXJ0aWNhbC1iYXItY2hhcnQvdHVybm92ZXJzLXZlcnRpY2FsLWJhci1jaGFydC5jb21wb25lbnQnO1xuaW1wb3J0IHsgQmJTZXJpZXNWZXJ0aWNhbENvbXBvbmVudCB9IGZyb20gJy4vdHVybm92ZXJzLXZlcnRpY2FsLWdyb3VwZWQtYmFyLWNoYXJ0L2JiLWNoYXJ0cy1zZXJpZXMtdmVydGljYWwuY29tcG9uZW50JztcbmltcG9ydCB7IFR1cm5vdmVyc1ZlcnRpY2FsR3JvdXBlZEJhckNoYXJ0Q29tcG9uZW50IH0gZnJvbSAnLi90dXJub3ZlcnMtdmVydGljYWwtZ3JvdXBlZC1iYXItY2hhcnQvdHVybm92ZXJzLXZlcnRpY2FsLWdyb3VwZWQtYmFyLWNoYXJ0LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBUdXJub3ZlcnNWZXJ0aWNhbFN0YWNrZWRCYXJDaGFydENvbXBvbmVudCB9IGZyb20gJy4vdHVybm92ZXJzLXZlcnRpY2FsLXN0YWNrZWQtYmFyLWNoYXJ0L3R1cm5vdmVycy12ZXJ0aWNhbC1zdGFja2VkLWJhci1jaGFydC5jb21wb25lbnQnO1xuaW1wb3J0IHsgVHVybm92ZXJzV2lkZ2V0Q29tcG9uZW50IH0gZnJvbSAnLi90dXJub3ZlcnMtd2lkZ2V0LmNvbXBvbmVudCc7XG4vLyBDb21wb25lbnRzXG5pbXBvcnQge1xuICBUdXJub3ZlcnNDb21wb25lbnQsXG4gIFR1cm5vdmVyc0NvbnRyb2xzQ3VzdG9taXphYmxlRGlyZWN0aXZlLFxuICBUdXJub3ZlcnNFbXB0eVN0YXRlQ3VzdG9taXphYmxlRGlyZWN0aXZlLFxuICBUdXJub3ZlcnNJdGVtQ3VzdG9taXphYmxlRGlyZWN0aXZlLFxufSBmcm9tICcuL3R1cm5vdmVycy90dXJub3ZlcnMuY29tcG9uZW50JztcblxuY29uc3QgY29tcG9uZW50cyA9IFtcbiAgVHVybm92ZXJzV2lkZ2V0Q29tcG9uZW50LFxuICBUdXJub3ZlcnNDb21wb25lbnQsXG4gIFR1cm5vdmVyc0JhckNoYXJ0Q29tcG9uZW50LFxuICBUdXJub3ZlcnNWZXJ0aWNhbEJhckNoYXJ0Q29tcG9uZW50LFxuICBUdXJub3ZlcnNWZXJ0aWNhbFN0YWNrZWRCYXJDaGFydENvbXBvbmVudCxcbiAgVHVybm92ZXJzVmVydGljYWxHcm91cGVkQmFyQ2hhcnRDb21wb25lbnQsXG4gIEJiVHVybm92ZXJzTGVnZW5kQ29tcG9uZW50LFxuICBCYlNlcmllc1ZlcnRpY2FsQ29tcG9uZW50LFxuICBCYkdyaWRQYW5lbFNlcmllc0NvbXBvbmVudCxcbl07XG5cbmNvbnN0IGN1c3RvbWl6YWJsZXMgPSBbXG4gIFR1cm5vdmVyc0l0ZW1DdXN0b21pemFibGVEaXJlY3RpdmUsXG4gIFR1cm5vdmVyc0NvbnRyb2xzQ3VzdG9taXphYmxlRGlyZWN0aXZlLFxuICBUdXJub3ZlcnNDaGFydFRvb2x0aXBDdXN0b21pemFibGVEaXJlY3RpdmUsXG4gIFR1cm5vdmVyc0NoYXJ0TGVnZW5kQ3VzdG9taXphYmxlRGlyZWN0aXZlLFxuICBUdXJub3ZlcnNWZXJ0aWNhbFN0YWNrZWRCYXJDaGFydEN1c3RvbWl6YWJsZURpcmVjdGl2ZSxcbiAgVHVybm92ZXJzVmVydGljYWxHcm91cGVkQmFyQ2hhcnRDdXN0b21pemFibGVEaXJlY3RpdmUsXG4gIFR1cm5vdmVyc0VtcHR5U3RhdGVDdXN0b21pemFibGVEaXJlY3RpdmUsXG5dO1xuY29uc3QgbW9kdWxlcyA9IFtGb3JtYXRBbW91bnRNb2R1bGUsIExvYWRpbmdJbmRpY2F0b3JNb2R1bGUsIEVtcHR5U3RhdGVNb2R1bGUsIEJ1dHRvbk1vZHVsZV07XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtcbiAgICBDb21tb25Nb2R1bGUsXG4gICAgQmFja2Jhc2VDb3JlTW9kdWxlLndpdGhDb25maWcoe1xuICAgICAgY2xhc3NNYXA6IHsgVHVybm92ZXJzV2lkZ2V0Q29tcG9uZW50IH0sXG4gICAgfSksXG4gICAgTmd4Q2hhcnRzTW9kdWxlLFxuICAgIC4uLm1vZHVsZXMsXG4gIF0sXG4gIHByb3ZpZGVyczogW0RhdGVQaXBlLCBDdXJyZW5jeVBpcGVdLFxuICBlbnRyeUNvbXBvbmVudHM6IFtUdXJub3ZlcnNDb21wb25lbnRdLFxuICBkZWNsYXJhdGlvbnM6IFsuLi5jb21wb25lbnRzLCAuLi5jdXN0b21pemFibGVzXSxcbiAgZXhwb3J0czogWy4uLmNvbXBvbmVudHMsIC4uLmN1c3RvbWl6YWJsZXMsIC4uLm1vZHVsZXNdLFxufSlcbmV4cG9ydCBjbGFzcyBUdXJub3ZlcnNXaWRnZXRNb2R1bGUge31cbiJdfQ==