import { Injectable } from '@angular/core';
import { DEFAULT_START_DAY } from './constants';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export class TurnoversWidgetHelpersService {
    constructor(datePipe) {
        this.datePipe = datePipe;
        this.extendTurnoverItem = (barData) => (Object.assign(Object.assign({}, barData), { intervalStartDate: this.datePipe.transform(barData.intervalStartDate.slice(0, 10), 'MMM') || '' }));
    }
    getChartData(turnovers, labels) {
        return (turnovers || []).map(function (barData) {
            return {
                series: [
                    {
                        name: labels.income,
                        value: Number(barData.creditAmount.amount),
                        currency: barData.creditAmount.currencyCode,
                    },
                    {
                        name: labels.spending,
                        value: Number(barData.debitAmount.amount),
                        currency: barData.debitAmount.currencyCode,
                    },
                ],
                currency: barData.balance.currencyCode,
                diff: Number(barData.balance.amount),
                badge: barData.forecast ? labels.forecast : '',
                name: barData.intervalStartDate.slice(0, 10) + (barData.forecast ? ' ' : ''),
            };
        });
    }
    periodToDate(period) {
        const date = new Date();
        // current date already covers one period
        const intervalCount = period.duration;
        switch (period.interval) {
            case 'DAY':
                date.setDate(date.getDate() - intervalCount);
                break;
            case 'WEEK':
                date.setDate(date.getDate() - intervalCount * 7);
                break;
            case 'YEAR':
                date.setFullYear(date.getFullYear() - intervalCount);
                break;
            case 'MONTH':
            default:
                date.setMonth(date.getMonth() - (intervalCount - 1));
                date.setDate(DEFAULT_START_DAY);
                break;
        }
        return date.toISOString().slice(0, 10);
    }
}
TurnoversWidgetHelpersService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TurnoversWidgetHelpersService, deps: [{ token: i1.DatePipe }], target: i0.ɵɵFactoryTarget.Injectable });
TurnoversWidgetHelpersService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TurnoversWidgetHelpersService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TurnoversWidgetHelpersService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.DatePipe }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHVybm92ZXJzLXdpZGdldC1oZWxwZXJzLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9saWJzL3R1cm5vdmVycy13aWRnZXQvc3JjL3R1cm5vdmVycy13aWRnZXQtaGVscGVycy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLGlCQUFpQixFQUFVLE1BQU0sYUFBYSxDQUFDOzs7QUFJeEQsTUFBTSxPQUFPLDZCQUE2QjtJQUN4QyxZQUE2QixRQUFrQjtRQUFsQixhQUFRLEdBQVIsUUFBUSxDQUFVO1FBaUQvQyx1QkFBa0IsR0FBRyxDQUFDLE9BQWlCLEVBQVksRUFBRSxDQUFDLGlDQUNqRCxPQUFPLEtBQ1YsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsS0FBSyxDQUFDLElBQUksRUFBRSxJQUMvRixDQUFDO0lBcEQrQyxDQUFDO0lBRW5ELFlBQVksQ0FBQyxTQUFxQixFQUFFLE1BQW1CO1FBQ3JELE9BQU8sQ0FBQyxTQUFTLElBQUksRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQVUsT0FBcUI7WUFDMUQsT0FBTztnQkFDTCxNQUFNLEVBQUU7b0JBQ047d0JBQ0UsSUFBSSxFQUFFLE1BQU0sQ0FBQyxNQUFNO3dCQUNuQixLQUFLLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDO3dCQUMxQyxRQUFRLEVBQUUsT0FBTyxDQUFDLFlBQVksQ0FBQyxZQUFZO3FCQUM1QztvQkFDRDt3QkFDRSxJQUFJLEVBQUUsTUFBTSxDQUFDLFFBQVE7d0JBQ3JCLEtBQUssRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUM7d0JBQ3pDLFFBQVEsRUFBRSxPQUFPLENBQUMsV0FBVyxDQUFDLFlBQVk7cUJBQzNDO2lCQUNGO2dCQUNELFFBQVEsRUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDLFlBQVk7Z0JBQ3RDLElBQUksRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUM7Z0JBQ3BDLEtBQUssRUFBRSxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFO2dCQUM5QyxJQUFJLEVBQUUsT0FBTyxDQUFDLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQzthQUM3RSxDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsWUFBWSxDQUFDLE1BQWM7UUFDekIsTUFBTSxJQUFJLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUN4Qix5Q0FBeUM7UUFDekMsTUFBTSxhQUFhLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQztRQUN0QyxRQUFRLE1BQU0sQ0FBQyxRQUFRLEVBQUU7WUFDdkIsS0FBSyxLQUFLO2dCQUNSLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxHQUFHLGFBQWEsQ0FBQyxDQUFDO2dCQUM3QyxNQUFNO1lBQ1IsS0FBSyxNQUFNO2dCQUNULElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxHQUFHLGFBQWEsR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFDakQsTUFBTTtZQUNSLEtBQUssTUFBTTtnQkFDVCxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsR0FBRyxhQUFhLENBQUMsQ0FBQztnQkFDckQsTUFBTTtZQUNSLEtBQUssT0FBTyxDQUFDO1lBQ2I7Z0JBQ0UsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxhQUFhLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDckQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO2dCQUNoQyxNQUFNO1NBQ1Q7UUFFRCxPQUFPLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3pDLENBQUM7OzJIQWhEVSw2QkFBNkI7K0hBQTdCLDZCQUE2Qjs0RkFBN0IsNkJBQTZCO2tCQUR6QyxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGF0ZVBpcGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVHVybm92ZXIgfSBmcm9tICdAYmFja2Jhc2UvZGF0YS1hbmcvdHJhbnNhY3Rpb25zJztcbmltcG9ydCB7IERFRkFVTFRfU1RBUlRfREFZLCBQZXJpb2QgfSBmcm9tICcuL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBDYXNoRmxvd0l0ZW0sIENoYXJ0RGF0YSwgQ2hhcnRMYWJlbHMgfSBmcm9tICcuL21vZGVsL3R1cm5vdmVycyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBUdXJub3ZlcnNXaWRnZXRIZWxwZXJzU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgZGF0ZVBpcGU6IERhdGVQaXBlKSB7fVxuXG4gIGdldENoYXJ0RGF0YSh0dXJub3ZlcnM6IFR1cm5vdmVyW10sIGxhYmVsczogQ2hhcnRMYWJlbHMpOiBDaGFydERhdGFbXSB7XG4gICAgcmV0dXJuICh0dXJub3ZlcnMgfHwgW10pLm1hcChmdW5jdGlvbiAoYmFyRGF0YTogQ2FzaEZsb3dJdGVtKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzZXJpZXM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiBsYWJlbHMuaW5jb21lLFxuICAgICAgICAgICAgdmFsdWU6IE51bWJlcihiYXJEYXRhLmNyZWRpdEFtb3VudC5hbW91bnQpLFxuICAgICAgICAgICAgY3VycmVuY3k6IGJhckRhdGEuY3JlZGl0QW1vdW50LmN1cnJlbmN5Q29kZSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIG5hbWU6IGxhYmVscy5zcGVuZGluZyxcbiAgICAgICAgICAgIHZhbHVlOiBOdW1iZXIoYmFyRGF0YS5kZWJpdEFtb3VudC5hbW91bnQpLFxuICAgICAgICAgICAgY3VycmVuY3k6IGJhckRhdGEuZGViaXRBbW91bnQuY3VycmVuY3lDb2RlLFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIGN1cnJlbmN5OiBiYXJEYXRhLmJhbGFuY2UuY3VycmVuY3lDb2RlLFxuICAgICAgICBkaWZmOiBOdW1iZXIoYmFyRGF0YS5iYWxhbmNlLmFtb3VudCksXG4gICAgICAgIGJhZGdlOiBiYXJEYXRhLmZvcmVjYXN0ID8gbGFiZWxzLmZvcmVjYXN0IDogJycsXG4gICAgICAgIG5hbWU6IGJhckRhdGEuaW50ZXJ2YWxTdGFydERhdGUuc2xpY2UoMCwgMTApICsgKGJhckRhdGEuZm9yZWNhc3QgPyAnICcgOiAnJyksXG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgcGVyaW9kVG9EYXRlKHBlcmlvZDogUGVyaW9kKSB7XG4gICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgLy8gY3VycmVudCBkYXRlIGFscmVhZHkgY292ZXJzIG9uZSBwZXJpb2RcbiAgICBjb25zdCBpbnRlcnZhbENvdW50ID0gcGVyaW9kLmR1cmF0aW9uO1xuICAgIHN3aXRjaCAocGVyaW9kLmludGVydmFsKSB7XG4gICAgICBjYXNlICdEQVknOlxuICAgICAgICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgLSBpbnRlcnZhbENvdW50KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdXRUVLJzpcbiAgICAgICAgZGF0ZS5zZXREYXRlKGRhdGUuZ2V0RGF0ZSgpIC0gaW50ZXJ2YWxDb3VudCAqIDcpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ1lFQVInOlxuICAgICAgICBkYXRlLnNldEZ1bGxZZWFyKGRhdGUuZ2V0RnVsbFllYXIoKSAtIGludGVydmFsQ291bnQpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ01PTlRIJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGRhdGUuc2V0TW9udGgoZGF0ZS5nZXRNb250aCgpIC0gKGludGVydmFsQ291bnQgLSAxKSk7XG4gICAgICAgIGRhdGUuc2V0RGF0ZShERUZBVUxUX1NUQVJUX0RBWSk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHJldHVybiBkYXRlLnRvSVNPU3RyaW5nKCkuc2xpY2UoMCwgMTApO1xuICB9XG5cbiAgZXh0ZW5kVHVybm92ZXJJdGVtID0gKGJhckRhdGE6IFR1cm5vdmVyKTogVHVybm92ZXIgPT4gKHtcbiAgICAuLi5iYXJEYXRhLFxuICAgIGludGVydmFsU3RhcnREYXRlOiB0aGlzLmRhdGVQaXBlLnRyYW5zZm9ybShiYXJEYXRhLmludGVydmFsU3RhcnREYXRlLnNsaWNlKDAsIDEwKSwgJ01NTScpIHx8ICcnLFxuICB9KTtcbn1cbiJdfQ==