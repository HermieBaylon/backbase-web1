import { Component, Input, ViewChild, Optional, Inject, } from '@angular/core';
import { BehaviorSubject, Subject } from 'rxjs';
import { CampaignService } from './services/campaign.service';
import { TargetAttribute } from './types';
import { delay, filter, takeUntil, tap } from 'rxjs/operators';
import { ENGAGEMENT_BASE_PATH } from '@backbase/data-ang/engagement';
import * as i0 from "@angular/core";
import * as i1 from "./services/campaign.service";
import * as i2 from "@angular/common";
export class CampaignSpaceComponent {
    constructor(campaignService, renderer, cdr, basePath) {
        this.campaignService = campaignService;
        this.renderer = renderer;
        this.cdr = cdr;
        this.basePath = basePath;
        /**
         * Component name
         */
        this.name = '';
        /**
         * Campaign banner dimensions
         */
        this.dimensions = '300x250';
        /**
         * Page name
         */
        this.pageName = 'index';
        /**
         * Is banner responsive
         */
        this.responsive = false;
        /**
         * Banner title
         */
        this.title = 'Campaign Space';
        this.designMode = this.campaignService.designMode;
        this.placeholderTitle = '';
        this.iframeContext = new BehaviorSubject(undefined);
        this.destroy$ = new Subject();
    }
    ngOnInit() {
        this.widgetStyles = this.getWidgetStyles();
        if (this.designMode) {
            this.initDesignMode();
        }
        else {
            this.initLiveMode();
        }
    }
    ngOnDestroy() {
        this.destroy$.next();
    }
    initDesignMode() {
        this.placeholderTitle = this.getPlaceholderTitle();
    }
    initLiveMode() {
        this.campaignService.selectCampaign(this.name, this.dimensions, this.pageName).subscribe(campaign => {
            if (campaign) {
                this.campaign = campaign;
                this.setTargetUrl();
                this.content = this.campaignService.b64Decode(campaign.creative.content);
                this.iframeContext.next(this.content);
                this.targetMode = TargetAttribute[campaign.targetUrlDisplayMode || 'self'];
                this.cdr.detectChanges();
            }
        });
    }
    setTargetUrl() {
        var _a, _b;
        const basePath = this.basePath.endsWith('/') ? this.basePath.slice(0, -1) : this.basePath;
        const campaignUrl = ((_a = this.campaign) === null || _a === void 0 ? void 0 : _a.targetUrl.startsWith('/'))
            ? this.campaign.targetUrl.slice(1)
            : (_b = this.campaign) === null || _b === void 0 ? void 0 : _b.targetUrl;
        this.targetUrl = `${basePath}/${campaignUrl}`;
    }
    iframeLoad() {
        this.cdr.detectChanges();
        const iframeElement = this.iframeRef.nativeElement;
        const iframeBody = iframeElement.contentDocument.body;
        this.renderer.setStyle(iframeElement, 'width', '100%');
        this.renderer.setStyle(iframeElement, 'border', '0');
        this.renderer.setStyle(iframeBody, 'margin', '0');
        this.iframeContext
            .pipe(filter(Boolean), tap(content => this.renderer.setProperty(iframeBody, 'innerHTML', content)), delay(300), takeUntil(this.destroy$))
            .subscribe(() => {
            let currentHeight = iframeBody.scrollHeight;
            let previousHeight = 0;
            let counter = 0;
            do {
                this.renderer.setStyle(iframeElement, 'height', `${currentHeight}px`);
                previousHeight = currentHeight;
                currentHeight = iframeBody.scrollHeight;
                counter++;
            } while (previousHeight !== currentHeight && counter < 5);
            this.cdr.detectChanges();
        });
    }
    getWidgetStyles() {
        const [width, height] = this.getDimensions(this.dimensions);
        const properties = {
            width: this.responsive ? '100%' : this.toPx(width),
            height: this.toPx(height),
        };
        if (this.responsive) {
            properties.maxWidth = this.toPx(width);
        }
        return properties;
    }
    getPlaceholderTitle() {
        const [width, height] = this.getDimensions(this.dimensions);
        let placeholderTitle = `${this.title} - ${this.dimensions}`;
        if (this.responsive) {
            placeholderTitle = `${this.title} - Responsive Max-width: ${width}, Height: ${height}`;
        }
        return placeholderTitle;
    }
    toPx(value) {
        return value + 'px';
    }
    getDimensions(dimensions) {
        return dimensions.split('x');
    }
}
CampaignSpaceComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CampaignSpaceComponent, deps: [{ token: i1.CampaignService }, { token: i0.Renderer2 }, { token: i0.ChangeDetectorRef }, { token: ENGAGEMENT_BASE_PATH, optional: true }], target: i0.ɵɵFactoryTarget.Component });
CampaignSpaceComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: CampaignSpaceComponent, selector: "bb-campaign-space-ang", inputs: { name: "name", dimensions: "dimensions", pageName: "pageName", responsive: "responsive", title: "title" }, providers: [CampaignService], viewQueries: [{ propertyName: "iframeRef", first: true, predicate: ["iframeRef"], descendants: true }], ngImport: i0, template: "<ng-container *ngIf=\"widgetStyles\">\n  <div *ngIf=\"!designMode && campaign\" class=\"bb-campaign-space-widget\" [ngStyle]=\"widgetStyles\">\n    <a [href]=\"targetUrl\" [ngStyle]=\"widgetStyles\" [target]=\"targetMode\" class=\"bb-campaign-space-widget__overlay\"> </a>\n    <iframe #iframeRef class=\"bb-campaign-space-widget__iframe\" [ngStyle]=\"widgetStyles\" (load)=\"iframeLoad()\">\n    </iframe>\n  </div>\n  <div *ngIf=\"designMode\" [ngStyle]=\"widgetStyles\" class=\"bb-campaign-space-widget\">\n    <div [ngStyle]=\"widgetStyles\" class=\"bb-campaign-space-widget__placeholder\">\n      <span>{{ placeholderTitle }}</span>\n    </div>\n  </div>\n</ng-container>\n", styles: [":host{position:relative}.bb-campaign-space-widget{position:relative;left:50%;transform:translate(-50%)}.bb-campaign-space-widget__overlay{position:absolute;top:0;left:0;right:0;bottom:0;z-index:1}.bb-campaign-space-widget__iframe{position:absolute;top:0;left:0;right:0;bottom:0;z-index:0}.bb-campaign-space-widget__placeholder{display:flex;justify-content:center;align-items:center;position:relative;background-color:#0000001a;border:1px solid #bfbfbf;text-align:center}\n"], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: CampaignSpaceComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-campaign-space-ang',
                    templateUrl: './campaign-space.component.html',
                    styleUrls: ['./campaign-space.component.css'],
                    providers: [CampaignService],
                }]
        }], ctorParameters: function () { return [{ type: i1.CampaignService }, { type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [ENGAGEMENT_BASE_PATH]
                }] }]; }, propDecorators: { name: [{
                type: Input
            }], dimensions: [{
                type: Input
            }], pageName: [{
                type: Input
            }], responsive: [{
                type: Input
            }], title: [{
                type: Input
            }], iframeRef: [{
                type: ViewChild,
                args: ['iframeRef', { static: false }]
            }] } });
//# sourceMappingURL=data:application/json;base64,