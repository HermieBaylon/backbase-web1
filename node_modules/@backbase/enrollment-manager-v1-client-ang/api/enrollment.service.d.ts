import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { ChallengeResponse } from '../model/models';
import { EnrollmentChallenge } from '../model/models';
import { EnrollmentCreation } from '../model/models';
import { ProvisioningStatus } from '../model/models';
import { EnrollmentManagerConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface CreateEnrollmentRequestParams {
    ["enrollmentCreation"]?: EnrollmentCreation;
}
export interface GetChallengeForEnrollmentRequestParams {
    ["enrollmentId"]: string;
}
export interface GetProvisioningStatusForEnrollmentRequestParams {
    ["enrollmentId"]: string;
}
export interface HandleChallengeResponseRequestParams {
    ["enrollmentId"]: string;
    ["challengeResponse"]: ChallengeResponse;
}
export declare class EnrollmentService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: EnrollmentManagerConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: EnrollmentManagerConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    createEnrollment(requestParameters: CreateEnrollmentRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<EnrollmentChallenge>;
    createEnrollment(requestParameters: CreateEnrollmentRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<EnrollmentChallenge>>;
    createEnrollment(requestParameters: CreateEnrollmentRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<EnrollmentChallenge>>;
    createEnrollmentUrl(requestParameters: CreateEnrollmentRequestParams): string;
    getChallengeForEnrollment(requestParameters: GetChallengeForEnrollmentRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<EnrollmentChallenge>;
    getChallengeForEnrollment(requestParameters: GetChallengeForEnrollmentRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<EnrollmentChallenge>>;
    getChallengeForEnrollment(requestParameters: GetChallengeForEnrollmentRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<EnrollmentChallenge>>;
    getChallengeForEnrollmentUrl(requestParameters: GetChallengeForEnrollmentRequestParams): string;
    getProvisioningStatusForEnrollment(requestParameters: GetProvisioningStatusForEnrollmentRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<ProvisioningStatus>;
    getProvisioningStatusForEnrollment(requestParameters: GetProvisioningStatusForEnrollmentRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<ProvisioningStatus>>;
    getProvisioningStatusForEnrollment(requestParameters: GetProvisioningStatusForEnrollmentRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<ProvisioningStatus>>;
    getProvisioningStatusForEnrollmentUrl(requestParameters: GetProvisioningStatusForEnrollmentRequestParams): string;
    handleChallengeResponse(requestParameters: HandleChallengeResponseRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<EnrollmentChallenge>;
    handleChallengeResponse(requestParameters: HandleChallengeResponseRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<EnrollmentChallenge>>;
    handleChallengeResponse(requestParameters: HandleChallengeResponseRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<EnrollmentChallenge>>;
    handleChallengeResponseUrl(requestParameters: HandleChallengeResponseRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<EnrollmentService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<EnrollmentService>;
}
