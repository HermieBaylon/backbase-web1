(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common/http'), require('@backbase/foundation-ang/data-http')) :
    typeof define === 'function' && define.amd ? define('@backbase/enrollment-manager-v1-client-ang', ['exports', '@angular/core', '@angular/common/http', '@backbase/foundation-ang/data-http'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["enrollment-manager-v1-client-ang"] = {}), global.ng.core, global.ng.common.http, global.i2));
})(this, (function (exports, i0, i1, i2) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);

    var ChallengeType = {
        INSTRUCTIONS: 'INSTRUCTIONS',
        IDENTIFICATION: 'IDENTIFICATION',
        TWOFASELECTION: 'TWOFASELECTION',
        TWOFAENTRY: 'TWOFAENTRY',
        USERNAME: 'USERNAME',
        PASSWORD: 'PASSWORD',
        COMPLETION: 'COMPLETION'
    };

    var ChannelType = {
        SMS: 'SMS',
        EMAIL: 'EMAIL'
    };

    exports.ProvisioningStatus = void 0;
    (function (ProvisioningStatus) {
        ProvisioningStatus.ProvisioningStatusEnum = {
            STARTED: 'STARTED',
            COMPLETE: 'COMPLETE',
            FAILED: 'FAILED'
        };
    })(exports.ProvisioningStatus || (exports.ProvisioningStatus = {}));

    var ENROLLMENT_MANAGER_BASE_PATH = new i0.InjectionToken('ENROLLMENT_MANAGER_BASE_PATH');
    var COLLECTION_FORMATS = {
        'csv': ',',
        'tsv': '   ',
        'ssv': ' ',
        'pipes': '|'
    };

    var EnrollmentManagerConfiguration = /** @class */ (function () {
        function EnrollmentManagerConfiguration(configurationParameters) {
            if (configurationParameters === void 0) { configurationParameters = {}; }
            this.apiKeys = configurationParameters.apiKeys;
            this.username = configurationParameters.username;
            this.password = configurationParameters.password;
            this.accessToken = configurationParameters.accessToken;
            this.basePath = configurationParameters.basePath;
            this.withCredentials = configurationParameters.withCredentials;
            this.encoder = configurationParameters.encoder;
            if (configurationParameters.credentials) {
                this.credentials = configurationParameters.credentials;
            }
            else {
                this.credentials = {};
            }
        }
        EnrollmentManagerConfiguration.prototype.selectHeaderContentType = function (contentTypes) {
            var _this = this;
            if (contentTypes.length === 0) {
                return undefined;
            }
            var type = contentTypes.find(function (x) { return _this.isJsonMime(x); });
            if (type === undefined) {
                return contentTypes[0];
            }
            return type;
        };
        EnrollmentManagerConfiguration.prototype.selectHeaderAccept = function (accepts) {
            var _this = this;
            if (accepts.length === 0) {
                return undefined;
            }
            var type = accepts.find(function (x) { return _this.isJsonMime(x); });
            if (type === undefined) {
                return accepts[0];
            }
            return type;
        };
        EnrollmentManagerConfiguration.prototype.isJsonMime = function (mime) {
            var jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
            return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
        };
        EnrollmentManagerConfiguration.prototype.lookupCredential = function (key) {
            var value = this.credentials[key];
            return typeof value === 'function'
                ? value()
                : value;
        };
        return EnrollmentManagerConfiguration;
    }());
    var CONFIG_TOKEN = new i0.InjectionToken('api-data-module EnrollmentManagerConfiguration');

    var EnrollmentManagerApiModule = /** @class */ (function () {
        function EnrollmentManagerApiModule(parentModule, http, dataModulesManager, config) {
            if (parentModule) {
                throw new Error('EnrollmentManagerApiModule is already loaded. Import in your base AppModule only.');
            }
            if (!http) {
                throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                    'See also https://github.com/angular/angular/issues/20575');
            }
            if (dataModulesManager) {
                dataModulesManager.setModuleConfig(CONFIG_TOKEN, {
                    apiRoot: '',
                    servicePath: config.basePath || '',
                    headers: {},
                });
            }
        }
        EnrollmentManagerApiModule.forRoot = function (configurationFactory) {
            return {
                ngModule: EnrollmentManagerApiModule,
                providers: [{ provide: EnrollmentManagerConfiguration, useFactory: configurationFactory }]
            };
        };
        return EnrollmentManagerApiModule;
    }());
    EnrollmentManagerApiModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: EnrollmentManagerApiModule, deps: [{ token: EnrollmentManagerApiModule, optional: true, skipSelf: true }, { token: i1__namespace.HttpClient, optional: true }, { token: i2__namespace.DataModulesManager, optional: true }, { token: EnrollmentManagerConfiguration }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    EnrollmentManagerApiModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: EnrollmentManagerApiModule });
    EnrollmentManagerApiModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: EnrollmentManagerApiModule, providers: [], imports: [[]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: EnrollmentManagerApiModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [],
                        declarations: [],
                        exports: [],
                        providers: []
                    }]
            }], ctorParameters: function () {
            return [{ type: EnrollmentManagerApiModule, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.SkipSelf
                        }] }, { type: i1__namespace.HttpClient, decorators: [{
                            type: i0.Optional
                        }] }, { type: i2__namespace.DataModulesManager, decorators: [{
                            type: i0.Optional
                        }] }, { type: EnrollmentManagerConfiguration }];
        } });

    var CustomHttpParameterCodec = /** @class */ (function () {
        function CustomHttpParameterCodec() {
        }
        CustomHttpParameterCodec.prototype.encodeKey = function (k) {
            return encodeURIComponent(k);
        };
        CustomHttpParameterCodec.prototype.encodeValue = function (v) {
            return encodeURIComponent(v);
        };
        CustomHttpParameterCodec.prototype.decodeKey = function (k) {
            return decodeURIComponent(k);
        };
        CustomHttpParameterCodec.prototype.decodeValue = function (v) {
            return decodeURIComponent(v);
        };
        return CustomHttpParameterCodec;
    }());

    var EnrollmentService = /** @class */ (function () {
        function EnrollmentService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '/client-api/v1';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new EnrollmentManagerConfiguration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        EnrollmentService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        EnrollmentService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        EnrollmentService.prototype.createEnrollment = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _enrollmentCreation = requestParameters["enrollmentCreation"];
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v1/enrollments", _enrollmentCreation, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        EnrollmentService.prototype.createEnrollmentUrl = function (requestParameters) {
            var _enrollmentCreation = requestParameters["enrollmentCreation"];
            return this.configuration.basePath + "/client-api/v1/enrollments";
        };
        EnrollmentService.prototype.getChallengeForEnrollment = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _enrollmentId = requestParameters["enrollmentId"];
            if (_enrollmentId === null || _enrollmentId === undefined) {
                throw new Error('Required parameter enrollmentId was null or undefined when calling getChallengeForEnrollment.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v1/enrollments/" + encodeURIComponent(String(_enrollmentId)), {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        EnrollmentService.prototype.getChallengeForEnrollmentUrl = function (requestParameters) {
            var _enrollmentId = requestParameters["enrollmentId"];
            if (_enrollmentId === null || _enrollmentId === undefined) {
                throw new Error('Required parameter enrollmentId was null or undefined when calling getChallengeForEnrollment.');
            }
            return this.configuration.basePath + "/client-api/v1/enrollments/" + encodeURIComponent(String(_enrollmentId));
        };
        EnrollmentService.prototype.getProvisioningStatusForEnrollment = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _enrollmentId = requestParameters["enrollmentId"];
            if (_enrollmentId === null || _enrollmentId === undefined) {
                throw new Error('Required parameter enrollmentId was null or undefined when calling getProvisioningStatusForEnrollment.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/client-api/v1/enrollments/" + encodeURIComponent(String(_enrollmentId)) + "/provisioning/status", {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        EnrollmentService.prototype.getProvisioningStatusForEnrollmentUrl = function (requestParameters) {
            var _enrollmentId = requestParameters["enrollmentId"];
            if (_enrollmentId === null || _enrollmentId === undefined) {
                throw new Error('Required parameter enrollmentId was null or undefined when calling getProvisioningStatusForEnrollment.');
            }
            return this.configuration.basePath + "/client-api/v1/enrollments/" + encodeURIComponent(String(_enrollmentId)) + "/provisioning/status";
        };
        EnrollmentService.prototype.handleChallengeResponse = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _enrollmentId = requestParameters["enrollmentId"];
            if (_enrollmentId === null || _enrollmentId === undefined) {
                throw new Error('Required parameter enrollmentId was null or undefined when calling handleChallengeResponse.');
            }
            var _challengeResponse = requestParameters["challengeResponse"];
            if (_challengeResponse === null || _challengeResponse === undefined) {
                throw new Error('Required parameter challengeResponse was null or undefined when calling handleChallengeResponse.');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var consumes = [
                'application/json'
            ];
            var httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
            if (httpContentTypeSelected !== undefined) {
                headers = headers.set('Content-Type', httpContentTypeSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.post(this.configuration.basePath + "/client-api/v1/enrollments/" + encodeURIComponent(String(_enrollmentId)) + "/response", _challengeResponse, {
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        EnrollmentService.prototype.handleChallengeResponseUrl = function (requestParameters) {
            var _enrollmentId = requestParameters["enrollmentId"];
            if (_enrollmentId === null || _enrollmentId === undefined) {
                throw new Error('Required parameter enrollmentId was null or undefined when calling handleChallengeResponse.');
            }
            var _challengeResponse = requestParameters["challengeResponse"];
            if (_challengeResponse === null || _challengeResponse === undefined) {
                throw new Error('Required parameter challengeResponse was null or undefined when calling handleChallengeResponse.');
            }
            return this.configuration.basePath + "/client-api/v1/enrollments/" + encodeURIComponent(String(_enrollmentId)) + "/response";
        };
        return EnrollmentService;
    }());
    EnrollmentService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: EnrollmentService, deps: [{ token: i1__namespace.HttpClient }, { token: ENROLLMENT_MANAGER_BASE_PATH, optional: true }, { token: EnrollmentManagerConfiguration, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    EnrollmentService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: EnrollmentService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: EnrollmentService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root'
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [ENROLLMENT_MANAGER_BASE_PATH]
                        }] }, { type: EnrollmentManagerConfiguration, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var EnrollmentServiceCreateEnrollmentMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v1/client-api/v1/enrollments",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: {
                        "challengeType": "INSTRUCTIONS",
                        "challenge": "2740f44c-c4ab-42a4-bbf1-1ad46b53b743",
                        "enrollmentId": "eb101331-f6cd-4d44-81c8-7b325619a362"
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var EnrollmentServiceGetChallengeForEnrollmentMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v1/client-api/v1/enrollments/{enrollmentId}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "challengeType": "INSTRUCTIONS",
                        "challenge": "2740f44c-c4ab-42a4-bbf1-1ad46b53b743",
                        "enrollmentId": "eb101331-f6cd-4d44-81c8-7b325619a362"
                    }
                },
                {
                    status: 200,
                    body: {
                        "enrollmentId": "enrollmentId",
                        "challenge": "challenge"
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var EnrollmentServiceGetProvisioningStatusForEnrollmentMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v1/client-api/v1/enrollments/{enrollmentId}/provisioning/status",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "provisioningStatus": "COMPLETE"
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        }]);
    var EnrollmentServiceHandleChallengeResponseMocksProvider = i2.createMocks([{
            urlPattern: "/client-api/v1/client-api/v1/enrollments/{enrollmentId}/response",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {
                        "challengeType": "INSTRUCTIONS",
                        "challenge": "2740f44c-c4ab-42a4-bbf1-1ad46b53b743",
                        "enrollmentId": "eb101331-f6cd-4d44-81c8-7b325619a362"
                    }
                },
                {
                    status: 200,
                    body: {
                        "challengeType": "TWOFASELECTION",
                        "challenge": "2740f44c-c4ab-42a4-bbf1-1ad46b53b743",
                        "enrollmentId": "eb101331-f6cd-4d44-81c8-7b325619a362",
                        "challengePayload": {
                            "otpChannels": [{
                                    "channelType": "EMAIL",
                                    "channelValue": "xxxxxxxyz@backbase.com"
                                }, {
                                    "channelType": "SMS",
                                    "channelValue": "xxxxxx789"
                                }]
                        }
                    }
                },
                {
                    status: 200,
                    body: {
                        "challengeType": "TWOFAENTRY",
                        "challenge": "2740f44c-c4ab-42a4-bbf1-1ad46b53b743",
                        "enrollmentId": "eb101331-f6cd-4d44-81c8-7b325619a362",
                        "challengePayload": {
                            "resendDelay": 60,
                            "resendsRemaining": 1,
                            "attemptsRemaining": 2,
                            "otpSize": 6,
                            "otpChannel": {
                                "channelType": "EMAIL",
                                "channelValue": "xxxxxxxyz@backbase.com"
                            }
                        }
                    }
                },
                {
                    status: 200,
                    body: {
                        "challengeType": "PASSWORD",
                        "challenge": "2740f44c-c4ab-42a4-bbf1-1ad46b53b743",
                        "enrollmentId": "eb101331-f6cd-4d44-81c8-7b325619a362",
                        "challengePayload": {
                            "redirectUrl": "https://identity-url-here/auth/realms/backbase/protocol/openid-connect/auth?redirect_uri=http://completion-url-here&client_id=self-enrollment&response_type=code&scope=openid"
                        }
                    }
                },
                {
                    status: 200,
                    body: {
                        "enrollmentId": "enrollmentId",
                        "challenge": "challenge"
                    }
                },
                {
                    status: 400,
                    body: {
                        "challengeType": "INSTRUCTIONS",
                        "challenge": "2740f44c-c4ab-42a4-bbf1-1ad46b53b743",
                        "enrollmentId": "eb101331-f6cd-4d44-81c8-7b325619a362"
                    }
                },
                {
                    status: 400,
                    body: {
                        "challengeType": "TWOFASELECTION",
                        "challenge": "2740f44c-c4ab-42a4-bbf1-1ad46b53b743",
                        "enrollmentId": "eb101331-f6cd-4d44-81c8-7b325619a362",
                        "challengePayload": {
                            "otpChannels": [{
                                    "channelType": "EMAIL",
                                    "channelValue": "xxxxxxxyz@backbase.com"
                                }, {
                                    "channelType": "SMS",
                                    "channelValue": "xxxxxx789"
                                }]
                        }
                    }
                },
                {
                    status: 400,
                    body: {
                        "challengeType": "TWOFAENTRY",
                        "challenge": "2740f44c-c4ab-42a4-bbf1-1ad46b53b743",
                        "enrollmentId": "eb101331-f6cd-4d44-81c8-7b325619a362",
                        "challengePayload": {
                            "resendDelay": 60,
                            "resendsRemaining": 1,
                            "attemptsRemaining": 2,
                            "otpSize": 6,
                            "otpChannel": {
                                "channelType": "EMAIL",
                                "channelValue": "xxxxxxxyz@backbase.com"
                            }
                        }
                    }
                },
                {
                    status: 400,
                    body: {
                        "enrollmentId": "enrollmentId",
                        "challenge": "challenge"
                    }
                },
                {
                    status: 409,
                    body: {
                        "challengeType": "INSTRUCTIONS",
                        "challenge": "2740f44c-c4ab-42a4-bbf1-1ad46b53b743",
                        "enrollmentId": "eb101331-f6cd-4d44-81c8-7b325619a362"
                    }
                },
                {
                    status: 409,
                    body: {
                        "challengeType": "TWOFASELECTION",
                        "challenge": "2740f44c-c4ab-42a4-bbf1-1ad46b53b743",
                        "enrollmentId": "eb101331-f6cd-4d44-81c8-7b325619a362",
                        "challengePayload": {
                            "otpChannels": [{
                                    "channelType": "EMAIL",
                                    "channelValue": "xxxxxxxyz@backbase.com"
                                }, {
                                    "channelType": "SMS",
                                    "channelValue": "xxxxxx789"
                                }]
                        }
                    }
                },
                {
                    status: 409,
                    body: {
                        "challengeType": "TWOFAENTRY",
                        "challenge": "2740f44c-c4ab-42a4-bbf1-1ad46b53b743",
                        "enrollmentId": "eb101331-f6cd-4d44-81c8-7b325619a362",
                        "challengePayload": {
                            "resendDelay": 60,
                            "resendsRemaining": 1,
                            "attemptsRemaining": 2,
                            "otpSize": 6,
                            "otpChannel": {
                                "channelType": "EMAIL",
                                "channelValue": "xxxxxxxyz@backbase.com"
                            }
                        }
                    }
                },
                {
                    status: 409,
                    body: {
                        "enrollmentId": "enrollmentId",
                        "challenge": "challenge"
                    }
                },
                {
                    status: 500,
                    body: {
                        "enrollmentId": "enrollmentId",
                        "challenge": "challenge"
                    }
                },
            ]
        }]);
    var EnrollmentServiceMocksProvider = i2.createMocks([
        {
            urlPattern: "/client-api/v1/client-api/v1/enrollments",
            method: "POST",
            responses: [
                {
                    status: 201,
                    body: {
                        "challengeType": "INSTRUCTIONS",
                        "challenge": "2740f44c-c4ab-42a4-bbf1-1ad46b53b743",
                        "enrollmentId": "eb101331-f6cd-4d44-81c8-7b325619a362"
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v1/client-api/v1/enrollments/{enrollmentId}",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "challengeType": "INSTRUCTIONS",
                        "challenge": "2740f44c-c4ab-42a4-bbf1-1ad46b53b743",
                        "enrollmentId": "eb101331-f6cd-4d44-81c8-7b325619a362"
                    }
                },
                {
                    status: 200,
                    body: {
                        "enrollmentId": "enrollmentId",
                        "challenge": "challenge"
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v1/client-api/v1/enrollments/{enrollmentId}/provisioning/status",
            method: "GET",
            responses: [
                {
                    status: 200,
                    body: {
                        "provisioningStatus": "COMPLETE"
                    }
                },
                {
                    status: 500,
                    body: {
                        "message": "Description of error"
                    }
                },
            ]
        },
        {
            urlPattern: "/client-api/v1/client-api/v1/enrollments/{enrollmentId}/response",
            method: "POST",
            responses: [
                {
                    status: 200,
                    body: {
                        "challengeType": "INSTRUCTIONS",
                        "challenge": "2740f44c-c4ab-42a4-bbf1-1ad46b53b743",
                        "enrollmentId": "eb101331-f6cd-4d44-81c8-7b325619a362"
                    }
                },
                {
                    status: 200,
                    body: {
                        "challengeType": "TWOFASELECTION",
                        "challenge": "2740f44c-c4ab-42a4-bbf1-1ad46b53b743",
                        "enrollmentId": "eb101331-f6cd-4d44-81c8-7b325619a362",
                        "challengePayload": {
                            "otpChannels": [{
                                    "channelType": "EMAIL",
                                    "channelValue": "xxxxxxxyz@backbase.com"
                                }, {
                                    "channelType": "SMS",
                                    "channelValue": "xxxxxx789"
                                }]
                        }
                    }
                },
                {
                    status: 200,
                    body: {
                        "challengeType": "TWOFAENTRY",
                        "challenge": "2740f44c-c4ab-42a4-bbf1-1ad46b53b743",
                        "enrollmentId": "eb101331-f6cd-4d44-81c8-7b325619a362",
                        "challengePayload": {
                            "resendDelay": 60,
                            "resendsRemaining": 1,
                            "attemptsRemaining": 2,
                            "otpSize": 6,
                            "otpChannel": {
                                "channelType": "EMAIL",
                                "channelValue": "xxxxxxxyz@backbase.com"
                            }
                        }
                    }
                },
                {
                    status: 200,
                    body: {
                        "challengeType": "PASSWORD",
                        "challenge": "2740f44c-c4ab-42a4-bbf1-1ad46b53b743",
                        "enrollmentId": "eb101331-f6cd-4d44-81c8-7b325619a362",
                        "challengePayload": {
                            "redirectUrl": "https://identity-url-here/auth/realms/backbase/protocol/openid-connect/auth?redirect_uri=http://completion-url-here&client_id=self-enrollment&response_type=code&scope=openid"
                        }
                    }
                },
                {
                    status: 200,
                    body: {
                        "enrollmentId": "enrollmentId",
                        "challenge": "challenge"
                    }
                },
                {
                    status: 400,
                    body: {
                        "challengeType": "INSTRUCTIONS",
                        "challenge": "2740f44c-c4ab-42a4-bbf1-1ad46b53b743",
                        "enrollmentId": "eb101331-f6cd-4d44-81c8-7b325619a362"
                    }
                },
                {
                    status: 400,
                    body: {
                        "challengeType": "TWOFASELECTION",
                        "challenge": "2740f44c-c4ab-42a4-bbf1-1ad46b53b743",
                        "enrollmentId": "eb101331-f6cd-4d44-81c8-7b325619a362",
                        "challengePayload": {
                            "otpChannels": [{
                                    "channelType": "EMAIL",
                                    "channelValue": "xxxxxxxyz@backbase.com"
                                }, {
                                    "channelType": "SMS",
                                    "channelValue": "xxxxxx789"
                                }]
                        }
                    }
                },
                {
                    status: 400,
                    body: {
                        "challengeType": "TWOFAENTRY",
                        "challenge": "2740f44c-c4ab-42a4-bbf1-1ad46b53b743",
                        "enrollmentId": "eb101331-f6cd-4d44-81c8-7b325619a362",
                        "challengePayload": {
                            "resendDelay": 60,
                            "resendsRemaining": 1,
                            "attemptsRemaining": 2,
                            "otpSize": 6,
                            "otpChannel": {
                                "channelType": "EMAIL",
                                "channelValue": "xxxxxxxyz@backbase.com"
                            }
                        }
                    }
                },
                {
                    status: 400,
                    body: {
                        "enrollmentId": "enrollmentId",
                        "challenge": "challenge"
                    }
                },
                {
                    status: 409,
                    body: {
                        "challengeType": "INSTRUCTIONS",
                        "challenge": "2740f44c-c4ab-42a4-bbf1-1ad46b53b743",
                        "enrollmentId": "eb101331-f6cd-4d44-81c8-7b325619a362"
                    }
                },
                {
                    status: 409,
                    body: {
                        "challengeType": "TWOFASELECTION",
                        "challenge": "2740f44c-c4ab-42a4-bbf1-1ad46b53b743",
                        "enrollmentId": "eb101331-f6cd-4d44-81c8-7b325619a362",
                        "challengePayload": {
                            "otpChannels": [{
                                    "channelType": "EMAIL",
                                    "channelValue": "xxxxxxxyz@backbase.com"
                                }, {
                                    "channelType": "SMS",
                                    "channelValue": "xxxxxx789"
                                }]
                        }
                    }
                },
                {
                    status: 409,
                    body: {
                        "challengeType": "TWOFAENTRY",
                        "challenge": "2740f44c-c4ab-42a4-bbf1-1ad46b53b743",
                        "enrollmentId": "eb101331-f6cd-4d44-81c8-7b325619a362",
                        "challengePayload": {
                            "resendDelay": 60,
                            "resendsRemaining": 1,
                            "attemptsRemaining": 2,
                            "otpSize": 6,
                            "otpChannel": {
                                "channelType": "EMAIL",
                                "channelValue": "xxxxxxxyz@backbase.com"
                            }
                        }
                    }
                },
                {
                    status: 409,
                    body: {
                        "enrollmentId": "enrollmentId",
                        "challenge": "challenge"
                    }
                },
                {
                    status: 500,
                    body: {
                        "enrollmentId": "enrollmentId",
                        "challenge": "challenge"
                    }
                },
            ]
        },
    ]);

    exports.COLLECTION_FORMATS = COLLECTION_FORMATS;
    exports.CONFIG_TOKEN = CONFIG_TOKEN;
    exports.ChallengeType = ChallengeType;
    exports.ChannelType = ChannelType;
    exports.ENROLLMENT_MANAGER_BASE_PATH = ENROLLMENT_MANAGER_BASE_PATH;
    exports.EnrollmentManagerApiModule = EnrollmentManagerApiModule;
    exports.EnrollmentManagerConfiguration = EnrollmentManagerConfiguration;
    exports.EnrollmentService = EnrollmentService;
    exports.EnrollmentServiceCreateEnrollmentMocksProvider = EnrollmentServiceCreateEnrollmentMocksProvider;
    exports.EnrollmentServiceGetChallengeForEnrollmentMocksProvider = EnrollmentServiceGetChallengeForEnrollmentMocksProvider;
    exports.EnrollmentServiceGetProvisioningStatusForEnrollmentMocksProvider = EnrollmentServiceGetProvisioningStatusForEnrollmentMocksProvider;
    exports.EnrollmentServiceHandleChallengeResponseMocksProvider = EnrollmentServiceHandleChallengeResponseMocksProvider;
    exports.EnrollmentServiceMocksProvider = EnrollmentServiceMocksProvider;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-enrollment-manager-v1-client-ang.umd.js.map
