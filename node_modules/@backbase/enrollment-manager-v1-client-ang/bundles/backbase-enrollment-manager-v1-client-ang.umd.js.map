{"version":3,"file":"backbase-enrollment-manager-v1-client-ang.umd.js","sources":["../../model/challengeType.ts","../../model/channelType.ts","../../model/provisioningStatus.ts","../../variables.ts","../../configuration.ts","../../api.module.ts","../../encoder.ts","../../api/enrollment.service.ts","../../api/enrollment.service.mocks.ts"],"sourcesContent":["/**\n * Enrollment Manager Client API Spec\n * Spec for orchestration of a user\\'s enrollment journey where they enroll themselves. \n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n\n\n/**\n * Enum to support different challenge types\n */\nexport type ChallengeType = 'INSTRUCTIONS' | 'IDENTIFICATION' | 'TWOFASELECTION' | 'TWOFAENTRY' | 'USERNAME' | 'PASSWORD' | 'COMPLETION';\n\nexport const ChallengeType = {\n    INSTRUCTIONS: 'INSTRUCTIONS' as ChallengeType,\n    IDENTIFICATION: 'IDENTIFICATION' as ChallengeType,\n    TWOFASELECTION: 'TWOFASELECTION' as ChallengeType,\n    TWOFAENTRY: 'TWOFAENTRY' as ChallengeType,\n    USERNAME: 'USERNAME' as ChallengeType,\n    PASSWORD: 'PASSWORD' as ChallengeType,\n    COMPLETION: 'COMPLETION' as ChallengeType\n};\n\n","/**\n * Enrollment Manager Client API Spec\n * Spec for orchestration of a user\\'s enrollment journey where they enroll themselves. \n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n\n\n/**\n * Enum to support OTP channel types\n */\nexport type ChannelType = 'SMS' | 'EMAIL';\n\nexport const ChannelType = {\n    SMS: 'SMS' as ChannelType,\n    EMAIL: 'EMAIL' as ChannelType\n};\n\n","/**\n * Enrollment Manager Client API Spec\n * Spec for orchestration of a user\\'s enrollment journey where they enroll themselves. \n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n\n\n/**\n * The status of provisioning for a given enrollment\n */\nexport interface ProvisioningStatus { \n    /**\n     * The provisioning status\n     */\n    [\"provisioningStatus\"]: ProvisioningStatus.ProvisioningStatusEnum;\n}\nexport namespace ProvisioningStatus {\n    export type ProvisioningStatusEnum = 'STARTED' | 'COMPLETE' | 'FAILED';\n    export const ProvisioningStatusEnum = {\n        STARTED: 'STARTED' as ProvisioningStatusEnum,\n        COMPLETE: 'COMPLETE' as ProvisioningStatusEnum,\n        FAILED: 'FAILED' as ProvisioningStatusEnum\n    };\n}\n\n\n","import { InjectionToken } from '@angular/core';\n\nexport const ENROLLMENT_MANAGER_BASE_PATH = new InjectionToken<string>('ENROLLMENT_MANAGER_BASE_PATH');\nexport const COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n}\n","import { HttpParameterCodec } from '@angular/common/http';\n\nimport { InjectionToken } from '@angular/core';\n\nexport interface EnrollmentManagerConfigurationParameters {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n    /**\n     * The keys are the names in the securitySchemes section of the OpenAPI\n     * document. They should map to the value used for authentication\n     * minus any standard prefixes such as 'Basic' or 'Bearer'.\n     */\n    credentials?: {[ key: string ]: string | (() => string | undefined)};\n}\n\nexport class EnrollmentManagerConfiguration {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n    /**\n     * The keys are the names in the securitySchemes section of the OpenAPI\n     * document. They should map to the value used for authentication\n     * minus any standard prefixes such as 'Basic' or 'Bearer'.\n     */\n    credentials: {[ key: string ]: string | (() => string | undefined)};\n\n    constructor(configurationParameters: EnrollmentManagerConfigurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n        this.encoder = configurationParameters.encoder;\n        if (configurationParameters.credentials) {\n            this.credentials = configurationParameters.credentials;\n        }\n        else {\n            this.credentials = {};\n        }\n    }\n\n    /**\n     * Select the correct content-type to use for a request.\n     * Uses {@link EnrollmentManagerConfiguration#isJsonMime} to determine the correct content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param contentTypes - the array of content types that are available for selection\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\n        if (contentTypes.length === 0) {\n            return undefined;\n        }\n\n        const type = contentTypes.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n\n    /**\n     * Select the correct accept content-type to use for a request.\n     * Uses {@link EnrollmentManagerConfiguration#isJsonMime} to determine the correct accept content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param accepts - the array of content types that are available for selection.\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderAccept(accepts: string[]): string | undefined {\n        if (accepts.length === 0) {\n            return undefined;\n        }\n\n        const type = accepts.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n\n    public lookupCredential(key: string): string | undefined {\n        const value = this.credentials[key];\n        return typeof value === 'function'\n            ? value()\n            : value;\n    }\n}\n\nexport const CONFIG_TOKEN = new InjectionToken('api-data-module EnrollmentManagerConfiguration');\n\n","import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { EnrollmentManagerConfiguration, CONFIG_TOKEN } from './configuration';\nimport { HttpClient } from '@angular/common/http';\n\nimport { DataModulesManager } from \"@backbase/foundation-ang/data-http\";\n\n@NgModule({\n  imports:      [],\n  declarations: [],\n  exports:      [],\n  providers:    []\n})\nexport class EnrollmentManagerApiModule {\n    public static forRoot(configurationFactory: () => EnrollmentManagerConfiguration): ModuleWithProviders<EnrollmentManagerApiModule> {\n        return {\n            ngModule: EnrollmentManagerApiModule,\n            providers: [ { provide: EnrollmentManagerConfiguration, useFactory: configurationFactory } ]\n        };\n    }\n\n    constructor( @Optional() @SkipSelf() parentModule: EnrollmentManagerApiModule,\n                 @Optional() http: HttpClient,\n                 @Optional() dataModulesManager: DataModulesManager | null,\n                 config: EnrollmentManagerConfiguration,\n\n        ) {\n        if (parentModule) {\n            throw new Error('EnrollmentManagerApiModule is already loaded. Import in your base AppModule only.');\n        }\n        if (!http) {\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n            'See also https://github.com/angular/angular/issues/20575');\n        }\n\n        if (dataModulesManager) {\n            dataModulesManager.setModuleConfig(CONFIG_TOKEN, {\n                apiRoot: '',\n                servicePath: config.basePath || '',\n                headers: {},\n            });\n        }\n    }\n}\n","import { HttpParameterCodec } from '@angular/common/http';\n\n/**\n * Custom HttpParameterCodec\n * Workaround for https://github.com/angular/angular/issues/18261\n */\nexport class CustomHttpParameterCodec implements HttpParameterCodec {\n    encodeKey(k: string): string {\n        return encodeURIComponent(k);\n    }\n    encodeValue(v: string): string {\n        return encodeURIComponent(v);\n    }\n    decodeKey(k: string): string {\n        return decodeURIComponent(k);\n    }\n    decodeValue(v: string): string {\n        return decodeURIComponent(v);\n    }\n}\n","/**\n * Enrollment Manager Client API Spec\n * Spec for orchestration of a user\\'s enrollment journey where they enroll themselves. \n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { ChallengeResponse } from '../model/models';\nimport { EnrollmentChallenge } from '../model/models';\nimport { EnrollmentCreation } from '../model/models';\nimport { ModelError } from '../model/models';\nimport { ProvisioningStatus } from '../model/models';\n\nimport { ENROLLMENT_MANAGER_BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { EnrollmentManagerConfiguration }                                     from '../configuration';\n\n\nexport interface CreateEnrollmentRequestParams {\n    /** Optional description in *Markdown* */\n    [\"enrollmentCreation\"]?: EnrollmentCreation;\n}\n\nexport interface GetChallengeForEnrollmentRequestParams {\n    /** ID of the enrollment for which to get a challenge */\n    [\"enrollmentId\"]: string;\n}\n\nexport interface GetProvisioningStatusForEnrollmentRequestParams {\n    /** ID of the enrollment for which to get the provisioning status */\n    [\"enrollmentId\"]: string;\n}\n\nexport interface HandleChallengeResponseRequestParams {\n    /** ID of the enrollment to which the response pertains */\n    [\"enrollmentId\"]: string;\n    /** Payload required to handle a challenge response */\n    [\"challengeResponse\"]: ChallengeResponse;\n}\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EnrollmentService {\n\n    protected basePath = '/client-api/v1';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new EnrollmentManagerConfiguration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional() @Inject(ENROLLMENT_MANAGER_BASE_PATH) basePath: string, @Optional() configuration: EnrollmentManagerConfiguration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * Initiates a user\\&#39;s enrollment journey\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createEnrollment(requestParameters: CreateEnrollmentRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<EnrollmentChallenge>;\n    /**\n     * Initiates a user\\&#39;s enrollment journey\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createEnrollment(requestParameters: CreateEnrollmentRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<EnrollmentChallenge>>;\n    /**\n     * Initiates a user\\&#39;s enrollment journey\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createEnrollment(requestParameters: CreateEnrollmentRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<EnrollmentChallenge>>;\n    /**\n     * Initiates a user\\&#39;s enrollment journey\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public createEnrollment(requestParameters: CreateEnrollmentRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _enrollmentCreation = requestParameters[\"enrollmentCreation\"];\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<EnrollmentChallenge>(`${this.configuration.basePath}/client-api/v1/enrollments`,\n            _enrollmentCreation,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public createEnrollmentUrl(requestParameters: CreateEnrollmentRequestParams): string {\n        const _enrollmentCreation = requestParameters[\"enrollmentCreation\"];\n        return `${this.configuration.basePath}/client-api/v1/enrollments`;\n    }\n\n    /**\n     * Used to retrieve an enrollment, perhaps for session resume\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getChallengeForEnrollment(requestParameters: GetChallengeForEnrollmentRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<EnrollmentChallenge>;\n    /**\n     * Used to retrieve an enrollment, perhaps for session resume\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getChallengeForEnrollment(requestParameters: GetChallengeForEnrollmentRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<EnrollmentChallenge>>;\n    /**\n     * Used to retrieve an enrollment, perhaps for session resume\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getChallengeForEnrollment(requestParameters: GetChallengeForEnrollmentRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<EnrollmentChallenge>>;\n    /**\n     * Used to retrieve an enrollment, perhaps for session resume\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getChallengeForEnrollment(requestParameters: GetChallengeForEnrollmentRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _enrollmentId = requestParameters[\"enrollmentId\"];\n        if (_enrollmentId === null || _enrollmentId === undefined) {\n            throw new Error('Required parameter enrollmentId was null or undefined when calling getChallengeForEnrollment.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<EnrollmentChallenge>(`${this.configuration.basePath}/client-api/v1/enrollments/${encodeURIComponent(String(_enrollmentId))}`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public getChallengeForEnrollmentUrl(requestParameters: GetChallengeForEnrollmentRequestParams): string {\n        const _enrollmentId = requestParameters[\"enrollmentId\"];\n        if (_enrollmentId === null || _enrollmentId === undefined) {\n            throw new Error('Required parameter enrollmentId was null or undefined when calling getChallengeForEnrollment.');\n        }\n        return `${this.configuration.basePath}/client-api/v1/enrollments/${encodeURIComponent(String(_enrollmentId))}`;\n    }\n\n    /**\n     * Used to retrieve the provisioning status of an enrollment\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getProvisioningStatusForEnrollment(requestParameters: GetProvisioningStatusForEnrollmentRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<ProvisioningStatus>;\n    /**\n     * Used to retrieve the provisioning status of an enrollment\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getProvisioningStatusForEnrollment(requestParameters: GetProvisioningStatusForEnrollmentRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<ProvisioningStatus>>;\n    /**\n     * Used to retrieve the provisioning status of an enrollment\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getProvisioningStatusForEnrollment(requestParameters: GetProvisioningStatusForEnrollmentRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<ProvisioningStatus>>;\n    /**\n     * Used to retrieve the provisioning status of an enrollment\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public getProvisioningStatusForEnrollment(requestParameters: GetProvisioningStatusForEnrollmentRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _enrollmentId = requestParameters[\"enrollmentId\"];\n        if (_enrollmentId === null || _enrollmentId === undefined) {\n            throw new Error('Required parameter enrollmentId was null or undefined when calling getProvisioningStatusForEnrollment.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<ProvisioningStatus>(`${this.configuration.basePath}/client-api/v1/enrollments/${encodeURIComponent(String(_enrollmentId))}/provisioning/status`,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public getProvisioningStatusForEnrollmentUrl(requestParameters: GetProvisioningStatusForEnrollmentRequestParams): string {\n        const _enrollmentId = requestParameters[\"enrollmentId\"];\n        if (_enrollmentId === null || _enrollmentId === undefined) {\n            throw new Error('Required parameter enrollmentId was null or undefined when calling getProvisioningStatusForEnrollment.');\n        }\n        return `${this.configuration.basePath}/client-api/v1/enrollments/${encodeURIComponent(String(_enrollmentId))}/provisioning/status`;\n    }\n\n    /**\n     * Respond to a challenge issued by the enrollment manager\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public handleChallengeResponse(requestParameters: HandleChallengeResponseRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<EnrollmentChallenge>;\n    /**\n     * Respond to a challenge issued by the enrollment manager\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public handleChallengeResponse(requestParameters: HandleChallengeResponseRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<EnrollmentChallenge>>;\n    /**\n     * Respond to a challenge issued by the enrollment manager\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public handleChallengeResponse(requestParameters: HandleChallengeResponseRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<EnrollmentChallenge>>;\n    /**\n     * Respond to a challenge issued by the enrollment manager\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public handleChallengeResponse(requestParameters: HandleChallengeResponseRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _enrollmentId = requestParameters[\"enrollmentId\"];\n        if (_enrollmentId === null || _enrollmentId === undefined) {\n            throw new Error('Required parameter enrollmentId was null or undefined when calling handleChallengeResponse.');\n        }\n        const _challengeResponse = requestParameters[\"challengeResponse\"];\n        if (_challengeResponse === null || _challengeResponse === undefined) {\n            throw new Error('Required parameter challengeResponse was null or undefined when calling handleChallengeResponse.');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        // to determine the Content-Type header\n        const consumes: string[] = [\n            'application/json'\n        ];\n        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);\n        if (httpContentTypeSelected !== undefined) {\n            headers = headers.set('Content-Type', httpContentTypeSelected);\n        }\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.post<EnrollmentChallenge>(`${this.configuration.basePath}/client-api/v1/enrollments/${encodeURIComponent(String(_enrollmentId))}/response`,\n            _challengeResponse,\n            {\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public handleChallengeResponseUrl(requestParameters: HandleChallengeResponseRequestParams): string {\n        const _enrollmentId = requestParameters[\"enrollmentId\"];\n        if (_enrollmentId === null || _enrollmentId === undefined) {\n            throw new Error('Required parameter enrollmentId was null or undefined when calling handleChallengeResponse.');\n        }\n        const _challengeResponse = requestParameters[\"challengeResponse\"];\n        if (_challengeResponse === null || _challengeResponse === undefined) {\n            throw new Error('Required parameter challengeResponse was null or undefined when calling handleChallengeResponse.');\n        }\n        return `${this.configuration.basePath}/client-api/v1/enrollments/${encodeURIComponent(String(_enrollmentId))}/response`;\n    }\n\n}\n","import { createMocks } from '@backbase/foundation-ang/data-http';\nimport { Provider } from '@angular/core';\n\n/**\n* Mocks provider for /client-api/v1/client-api/v1/enrollments URL pattern\n*/\nexport const EnrollmentServiceCreateEnrollmentMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/v1/client-api/v1/enrollments\",\n        method: \"POST\",\n        responses: [\n                {\n                    status: 201,\n                    body: {\n  \"challengeType\" : \"INSTRUCTIONS\",\n  \"challenge\" : \"2740f44c-c4ab-42a4-bbf1-1ad46b53b743\",\n  \"enrollmentId\" : \"eb101331-f6cd-4d44-81c8-7b325619a362\"\n}\n                },\n                {\n                    status: 500,\n                    body: {\n  \"message\" : \"Description of error\"\n}\n                },\n    ]\n}]);\n/**\n* Mocks provider for /client-api/v1/client-api/v1/enrollments/{enrollmentId} URL pattern\n*/\nexport const EnrollmentServiceGetChallengeForEnrollmentMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/v1/client-api/v1/enrollments/{enrollmentId}\",\n        method: \"GET\",\n        responses: [\n                {\n                    status: 200,\n                    body: {\n  \"challengeType\" : \"INSTRUCTIONS\",\n  \"challenge\" : \"2740f44c-c4ab-42a4-bbf1-1ad46b53b743\",\n  \"enrollmentId\" : \"eb101331-f6cd-4d44-81c8-7b325619a362\"\n}\n                },\n                {\n                    status: 200,\n                    body: {\n  \"enrollmentId\" : \"enrollmentId\",\n  \"challenge\" : \"challenge\"\n}\n                },\n                {\n                    status: 500,\n                    body: {\n  \"message\" : \"Description of error\"\n}\n                },\n    ]\n}]);\n/**\n* Mocks provider for /client-api/v1/client-api/v1/enrollments/{enrollmentId}/provisioning/status URL pattern\n*/\nexport const EnrollmentServiceGetProvisioningStatusForEnrollmentMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/v1/client-api/v1/enrollments/{enrollmentId}/provisioning/status\",\n        method: \"GET\",\n        responses: [\n                {\n                    status: 200,\n                    body: {\n  \"provisioningStatus\" : \"COMPLETE\"\n}\n                },\n                {\n                    status: 500,\n                    body: {\n  \"message\" : \"Description of error\"\n}\n                },\n    ]\n}]);\n/**\n* Mocks provider for /client-api/v1/client-api/v1/enrollments/{enrollmentId}/response URL pattern\n*/\nexport const EnrollmentServiceHandleChallengeResponseMocksProvider: Provider = createMocks([{\n        urlPattern: \"/client-api/v1/client-api/v1/enrollments/{enrollmentId}/response\",\n        method: \"POST\",\n        responses: [\n                {\n                    status: 200,\n                    body: {\n  \"challengeType\" : \"INSTRUCTIONS\",\n  \"challenge\" : \"2740f44c-c4ab-42a4-bbf1-1ad46b53b743\",\n  \"enrollmentId\" : \"eb101331-f6cd-4d44-81c8-7b325619a362\"\n}\n                },\n                {\n                    status: 200,\n                    body: {\n  \"challengeType\" : \"TWOFASELECTION\",\n  \"challenge\" : \"2740f44c-c4ab-42a4-bbf1-1ad46b53b743\",\n  \"enrollmentId\" : \"eb101331-f6cd-4d44-81c8-7b325619a362\",\n  \"challengePayload\" : {\n    \"otpChannels\" : [ {\n      \"channelType\" : \"EMAIL\",\n      \"channelValue\" : \"xxxxxxxyz@backbase.com\"\n    }, {\n      \"channelType\" : \"SMS\",\n      \"channelValue\" : \"xxxxxx789\"\n    } ]\n  }\n}\n                },\n                {\n                    status: 200,\n                    body: {\n  \"challengeType\" : \"TWOFAENTRY\",\n  \"challenge\" : \"2740f44c-c4ab-42a4-bbf1-1ad46b53b743\",\n  \"enrollmentId\" : \"eb101331-f6cd-4d44-81c8-7b325619a362\",\n  \"challengePayload\" : {\n    \"resendDelay\" : 60,\n    \"resendsRemaining\" : 1,\n    \"attemptsRemaining\" : 2,\n    \"otpSize\" : 6,\n    \"otpChannel\" : {\n      \"channelType\" : \"EMAIL\",\n      \"channelValue\" : \"xxxxxxxyz@backbase.com\"\n    }\n  }\n}\n                },\n                {\n                    status: 200,\n                    body: {\n  \"challengeType\" : \"PASSWORD\",\n  \"challenge\" : \"2740f44c-c4ab-42a4-bbf1-1ad46b53b743\",\n  \"enrollmentId\" : \"eb101331-f6cd-4d44-81c8-7b325619a362\",\n  \"challengePayload\" : {\n    \"redirectUrl\" : \"https://identity-url-here/auth/realms/backbase/protocol/openid-connect/auth?redirect_uri=http://completion-url-here&client_id=self-enrollment&response_type=code&scope=openid\"\n  }\n}\n                },\n                {\n                    status: 200,\n                    body: {\n  \"enrollmentId\" : \"enrollmentId\",\n  \"challenge\" : \"challenge\"\n}\n                },\n                {\n                    status: 400,\n                    body: {\n  \"challengeType\" : \"INSTRUCTIONS\",\n  \"challenge\" : \"2740f44c-c4ab-42a4-bbf1-1ad46b53b743\",\n  \"enrollmentId\" : \"eb101331-f6cd-4d44-81c8-7b325619a362\"\n}\n                },\n                {\n                    status: 400,\n                    body: {\n  \"challengeType\" : \"TWOFASELECTION\",\n  \"challenge\" : \"2740f44c-c4ab-42a4-bbf1-1ad46b53b743\",\n  \"enrollmentId\" : \"eb101331-f6cd-4d44-81c8-7b325619a362\",\n  \"challengePayload\" : {\n    \"otpChannels\" : [ {\n      \"channelType\" : \"EMAIL\",\n      \"channelValue\" : \"xxxxxxxyz@backbase.com\"\n    }, {\n      \"channelType\" : \"SMS\",\n      \"channelValue\" : \"xxxxxx789\"\n    } ]\n  }\n}\n                },\n                {\n                    status: 400,\n                    body: {\n  \"challengeType\" : \"TWOFAENTRY\",\n  \"challenge\" : \"2740f44c-c4ab-42a4-bbf1-1ad46b53b743\",\n  \"enrollmentId\" : \"eb101331-f6cd-4d44-81c8-7b325619a362\",\n  \"challengePayload\" : {\n    \"resendDelay\" : 60,\n    \"resendsRemaining\" : 1,\n    \"attemptsRemaining\" : 2,\n    \"otpSize\" : 6,\n    \"otpChannel\" : {\n      \"channelType\" : \"EMAIL\",\n      \"channelValue\" : \"xxxxxxxyz@backbase.com\"\n    }\n  }\n}\n                },\n                {\n                    status: 400,\n                    body: {\n  \"enrollmentId\" : \"enrollmentId\",\n  \"challenge\" : \"challenge\"\n}\n                },\n                {\n                    status: 409,\n                    body: {\n  \"challengeType\" : \"INSTRUCTIONS\",\n  \"challenge\" : \"2740f44c-c4ab-42a4-bbf1-1ad46b53b743\",\n  \"enrollmentId\" : \"eb101331-f6cd-4d44-81c8-7b325619a362\"\n}\n                },\n                {\n                    status: 409,\n                    body: {\n  \"challengeType\" : \"TWOFASELECTION\",\n  \"challenge\" : \"2740f44c-c4ab-42a4-bbf1-1ad46b53b743\",\n  \"enrollmentId\" : \"eb101331-f6cd-4d44-81c8-7b325619a362\",\n  \"challengePayload\" : {\n    \"otpChannels\" : [ {\n      \"channelType\" : \"EMAIL\",\n      \"channelValue\" : \"xxxxxxxyz@backbase.com\"\n    }, {\n      \"channelType\" : \"SMS\",\n      \"channelValue\" : \"xxxxxx789\"\n    } ]\n  }\n}\n                },\n                {\n                    status: 409,\n                    body: {\n  \"challengeType\" : \"TWOFAENTRY\",\n  \"challenge\" : \"2740f44c-c4ab-42a4-bbf1-1ad46b53b743\",\n  \"enrollmentId\" : \"eb101331-f6cd-4d44-81c8-7b325619a362\",\n  \"challengePayload\" : {\n    \"resendDelay\" : 60,\n    \"resendsRemaining\" : 1,\n    \"attemptsRemaining\" : 2,\n    \"otpSize\" : 6,\n    \"otpChannel\" : {\n      \"channelType\" : \"EMAIL\",\n      \"channelValue\" : \"xxxxxxxyz@backbase.com\"\n    }\n  }\n}\n                },\n                {\n                    status: 409,\n                    body: {\n  \"enrollmentId\" : \"enrollmentId\",\n  \"challenge\" : \"challenge\"\n}\n                },\n                {\n                    status: 500,\n                    body: {\n  \"enrollmentId\" : \"enrollmentId\",\n  \"challenge\" : \"challenge\"\n}\n                },\n    ]\n}]);\n\nexport const EnrollmentServiceMocksProvider: Provider = createMocks(\n    [\n    {\n        urlPattern: \"/client-api/v1/client-api/v1/enrollments\",\n        method: \"POST\",\n        responses: [\n\n            {\n                status: 201,\n                body: {\n  \"challengeType\" : \"INSTRUCTIONS\",\n  \"challenge\" : \"2740f44c-c4ab-42a4-bbf1-1ad46b53b743\",\n  \"enrollmentId\" : \"eb101331-f6cd-4d44-81c8-7b325619a362\"\n}\n            },\n\n            {\n                status: 500,\n                body: {\n  \"message\" : \"Description of error\"\n}\n            },\n    ]\n},\n    {\n        urlPattern: \"/client-api/v1/client-api/v1/enrollments/{enrollmentId}\",\n        method: \"GET\",\n        responses: [\n\n            {\n                status: 200,\n                body: {\n  \"challengeType\" : \"INSTRUCTIONS\",\n  \"challenge\" : \"2740f44c-c4ab-42a4-bbf1-1ad46b53b743\",\n  \"enrollmentId\" : \"eb101331-f6cd-4d44-81c8-7b325619a362\"\n}\n            },\n            {\n                status: 200,\n                body: {\n  \"enrollmentId\" : \"enrollmentId\",\n  \"challenge\" : \"challenge\"\n}\n            },\n\n            {\n                status: 500,\n                body: {\n  \"message\" : \"Description of error\"\n}\n            },\n    ]\n},\n    {\n        urlPattern: \"/client-api/v1/client-api/v1/enrollments/{enrollmentId}/provisioning/status\",\n        method: \"GET\",\n        responses: [\n\n            {\n                status: 200,\n                body: {\n  \"provisioningStatus\" : \"COMPLETE\"\n}\n            },\n\n            {\n                status: 500,\n                body: {\n  \"message\" : \"Description of error\"\n}\n            },\n    ]\n},\n    {\n        urlPattern: \"/client-api/v1/client-api/v1/enrollments/{enrollmentId}/response\",\n        method: \"POST\",\n        responses: [\n\n            {\n                status: 200,\n                body: {\n  \"challengeType\" : \"INSTRUCTIONS\",\n  \"challenge\" : \"2740f44c-c4ab-42a4-bbf1-1ad46b53b743\",\n  \"enrollmentId\" : \"eb101331-f6cd-4d44-81c8-7b325619a362\"\n}\n            },\n            {\n                status: 200,\n                body: {\n  \"challengeType\" : \"TWOFASELECTION\",\n  \"challenge\" : \"2740f44c-c4ab-42a4-bbf1-1ad46b53b743\",\n  \"enrollmentId\" : \"eb101331-f6cd-4d44-81c8-7b325619a362\",\n  \"challengePayload\" : {\n    \"otpChannels\" : [ {\n      \"channelType\" : \"EMAIL\",\n      \"channelValue\" : \"xxxxxxxyz@backbase.com\"\n    }, {\n      \"channelType\" : \"SMS\",\n      \"channelValue\" : \"xxxxxx789\"\n    } ]\n  }\n}\n            },\n            {\n                status: 200,\n                body: {\n  \"challengeType\" : \"TWOFAENTRY\",\n  \"challenge\" : \"2740f44c-c4ab-42a4-bbf1-1ad46b53b743\",\n  \"enrollmentId\" : \"eb101331-f6cd-4d44-81c8-7b325619a362\",\n  \"challengePayload\" : {\n    \"resendDelay\" : 60,\n    \"resendsRemaining\" : 1,\n    \"attemptsRemaining\" : 2,\n    \"otpSize\" : 6,\n    \"otpChannel\" : {\n      \"channelType\" : \"EMAIL\",\n      \"channelValue\" : \"xxxxxxxyz@backbase.com\"\n    }\n  }\n}\n            },\n            {\n                status: 200,\n                body: {\n  \"challengeType\" : \"PASSWORD\",\n  \"challenge\" : \"2740f44c-c4ab-42a4-bbf1-1ad46b53b743\",\n  \"enrollmentId\" : \"eb101331-f6cd-4d44-81c8-7b325619a362\",\n  \"challengePayload\" : {\n    \"redirectUrl\" : \"https://identity-url-here/auth/realms/backbase/protocol/openid-connect/auth?redirect_uri=http://completion-url-here&client_id=self-enrollment&response_type=code&scope=openid\"\n  }\n}\n            },\n            {\n                status: 200,\n                body: {\n  \"enrollmentId\" : \"enrollmentId\",\n  \"challenge\" : \"challenge\"\n}\n            },\n\n\n            {\n                status: 400,\n                body: {\n  \"challengeType\" : \"INSTRUCTIONS\",\n  \"challenge\" : \"2740f44c-c4ab-42a4-bbf1-1ad46b53b743\",\n  \"enrollmentId\" : \"eb101331-f6cd-4d44-81c8-7b325619a362\"\n}\n            },\n            {\n                status: 400,\n                body: {\n  \"challengeType\" : \"TWOFASELECTION\",\n  \"challenge\" : \"2740f44c-c4ab-42a4-bbf1-1ad46b53b743\",\n  \"enrollmentId\" : \"eb101331-f6cd-4d44-81c8-7b325619a362\",\n  \"challengePayload\" : {\n    \"otpChannels\" : [ {\n      \"channelType\" : \"EMAIL\",\n      \"channelValue\" : \"xxxxxxxyz@backbase.com\"\n    }, {\n      \"channelType\" : \"SMS\",\n      \"channelValue\" : \"xxxxxx789\"\n    } ]\n  }\n}\n            },\n            {\n                status: 400,\n                body: {\n  \"challengeType\" : \"TWOFAENTRY\",\n  \"challenge\" : \"2740f44c-c4ab-42a4-bbf1-1ad46b53b743\",\n  \"enrollmentId\" : \"eb101331-f6cd-4d44-81c8-7b325619a362\",\n  \"challengePayload\" : {\n    \"resendDelay\" : 60,\n    \"resendsRemaining\" : 1,\n    \"attemptsRemaining\" : 2,\n    \"otpSize\" : 6,\n    \"otpChannel\" : {\n      \"channelType\" : \"EMAIL\",\n      \"channelValue\" : \"xxxxxxxyz@backbase.com\"\n    }\n  }\n}\n            },\n            {\n                status: 400,\n                body: {\n  \"enrollmentId\" : \"enrollmentId\",\n  \"challenge\" : \"challenge\"\n}\n            },\n\n            {\n                status: 409,\n                body: {\n  \"challengeType\" : \"INSTRUCTIONS\",\n  \"challenge\" : \"2740f44c-c4ab-42a4-bbf1-1ad46b53b743\",\n  \"enrollmentId\" : \"eb101331-f6cd-4d44-81c8-7b325619a362\"\n}\n            },\n            {\n                status: 409,\n                body: {\n  \"challengeType\" : \"TWOFASELECTION\",\n  \"challenge\" : \"2740f44c-c4ab-42a4-bbf1-1ad46b53b743\",\n  \"enrollmentId\" : \"eb101331-f6cd-4d44-81c8-7b325619a362\",\n  \"challengePayload\" : {\n    \"otpChannels\" : [ {\n      \"channelType\" : \"EMAIL\",\n      \"channelValue\" : \"xxxxxxxyz@backbase.com\"\n    }, {\n      \"channelType\" : \"SMS\",\n      \"channelValue\" : \"xxxxxx789\"\n    } ]\n  }\n}\n            },\n            {\n                status: 409,\n                body: {\n  \"challengeType\" : \"TWOFAENTRY\",\n  \"challenge\" : \"2740f44c-c4ab-42a4-bbf1-1ad46b53b743\",\n  \"enrollmentId\" : \"eb101331-f6cd-4d44-81c8-7b325619a362\",\n  \"challengePayload\" : {\n    \"resendDelay\" : 60,\n    \"resendsRemaining\" : 1,\n    \"attemptsRemaining\" : 2,\n    \"otpSize\" : 6,\n    \"otpChannel\" : {\n      \"channelType\" : \"EMAIL\",\n      \"channelValue\" : \"xxxxxxxyz@backbase.com\"\n    }\n  }\n}\n            },\n            {\n                status: 409,\n                body: {\n  \"enrollmentId\" : \"enrollmentId\",\n  \"challenge\" : \"challenge\"\n}\n            },\n\n            {\n                status: 500,\n                body: {\n  \"enrollmentId\" : \"enrollmentId\",\n  \"challenge\" : \"challenge\"\n}\n            },\n    ]\n},\n]\n);\n\n\n"],"names":["ProvisioningStatus","InjectionToken","NgModule","Optional","SkipSelf","HttpHeaders","Injectable","Inject","createMocks"],"mappings":"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"}