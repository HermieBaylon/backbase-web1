import * as i0 from '@angular/core';
import { InjectionToken, NgModule, Optional, SkipSelf, Injectable, Inject } from '@angular/core';
import * as i1 from '@angular/common/http';
import { HttpHeaders } from '@angular/common/http';
import * as i2 from '@backbase/foundation-ang/data-http';
import { createMocks } from '@backbase/foundation-ang/data-http';

const ChallengeType = {
    INSTRUCTIONS: 'INSTRUCTIONS',
    IDENTIFICATION: 'IDENTIFICATION',
    TWOFASELECTION: 'TWOFASELECTION',
    TWOFAENTRY: 'TWOFAENTRY',
    USERNAME: 'USERNAME',
    PASSWORD: 'PASSWORD',
    COMPLETION: 'COMPLETION'
};

const ChannelType = {
    SMS: 'SMS',
    EMAIL: 'EMAIL'
};

var ProvisioningStatus;
(function (ProvisioningStatus) {
    ProvisioningStatus.ProvisioningStatusEnum = {
        STARTED: 'STARTED',
        COMPLETE: 'COMPLETE',
        FAILED: 'FAILED'
    };
})(ProvisioningStatus || (ProvisioningStatus = {}));

const ENROLLMENT_MANAGER_BASE_PATH = new InjectionToken('ENROLLMENT_MANAGER_BASE_PATH');
const COLLECTION_FORMATS = {
    'csv': ',',
    'tsv': '   ',
    'ssv': ' ',
    'pipes': '|'
};

class EnrollmentManagerConfiguration {
    constructor(configurationParameters = {}) {
        this.apiKeys = configurationParameters.apiKeys;
        this.username = configurationParameters.username;
        this.password = configurationParameters.password;
        this.accessToken = configurationParameters.accessToken;
        this.basePath = configurationParameters.basePath;
        this.withCredentials = configurationParameters.withCredentials;
        this.encoder = configurationParameters.encoder;
        if (configurationParameters.credentials) {
            this.credentials = configurationParameters.credentials;
        }
        else {
            this.credentials = {};
        }
    }
    selectHeaderContentType(contentTypes) {
        if (contentTypes.length === 0) {
            return undefined;
        }
        const type = contentTypes.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return contentTypes[0];
        }
        return type;
    }
    selectHeaderAccept(accepts) {
        if (accepts.length === 0) {
            return undefined;
        }
        const type = accepts.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return accepts[0];
        }
        return type;
    }
    isJsonMime(mime) {
        const jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
    lookupCredential(key) {
        const value = this.credentials[key];
        return typeof value === 'function'
            ? value()
            : value;
    }
}
const CONFIG_TOKEN = new InjectionToken('api-data-module EnrollmentManagerConfiguration');

class EnrollmentManagerApiModule {
    constructor(parentModule, http, dataModulesManager, config) {
        if (parentModule) {
            throw new Error('EnrollmentManagerApiModule is already loaded. Import in your base AppModule only.');
        }
        if (!http) {
            throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                'See also https://github.com/angular/angular/issues/20575');
        }
        if (dataModulesManager) {
            dataModulesManager.setModuleConfig(CONFIG_TOKEN, {
                apiRoot: '',
                servicePath: config.basePath || '',
                headers: {},
            });
        }
    }
    static forRoot(configurationFactory) {
        return {
            ngModule: EnrollmentManagerApiModule,
            providers: [{ provide: EnrollmentManagerConfiguration, useFactory: configurationFactory }]
        };
    }
}
EnrollmentManagerApiModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: EnrollmentManagerApiModule, deps: [{ token: EnrollmentManagerApiModule, optional: true, skipSelf: true }, { token: i1.HttpClient, optional: true }, { token: i2.DataModulesManager, optional: true }, { token: EnrollmentManagerConfiguration }], target: i0.ɵɵFactoryTarget.NgModule });
EnrollmentManagerApiModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: EnrollmentManagerApiModule });
EnrollmentManagerApiModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: EnrollmentManagerApiModule, providers: [], imports: [[]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: EnrollmentManagerApiModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [],
                    declarations: [],
                    exports: [],
                    providers: []
                }]
        }], ctorParameters: function () { return [{ type: EnrollmentManagerApiModule, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: i1.HttpClient, decorators: [{
                    type: Optional
                }] }, { type: i2.DataModulesManager, decorators: [{
                    type: Optional
                }] }, { type: EnrollmentManagerConfiguration }]; } });

class CustomHttpParameterCodec {
    encodeKey(k) {
        return encodeURIComponent(k);
    }
    encodeValue(v) {
        return encodeURIComponent(v);
    }
    decodeKey(k) {
        return decodeURIComponent(k);
    }
    decodeValue(v) {
        return decodeURIComponent(v);
    }
}

class EnrollmentService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '/client-api/v1';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new EnrollmentManagerConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    createEnrollment(requestParameters, observe = 'body', reportProgress = false, options) {
        const _enrollmentCreation = requestParameters["enrollmentCreation"];
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v1/enrollments`, _enrollmentCreation, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    createEnrollmentUrl(requestParameters) {
        const _enrollmentCreation = requestParameters["enrollmentCreation"];
        return `${this.configuration.basePath}/client-api/v1/enrollments`;
    }
    getChallengeForEnrollment(requestParameters, observe = 'body', reportProgress = false, options) {
        const _enrollmentId = requestParameters["enrollmentId"];
        if (_enrollmentId === null || _enrollmentId === undefined) {
            throw new Error('Required parameter enrollmentId was null or undefined when calling getChallengeForEnrollment.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/enrollments/${encodeURIComponent(String(_enrollmentId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getChallengeForEnrollmentUrl(requestParameters) {
        const _enrollmentId = requestParameters["enrollmentId"];
        if (_enrollmentId === null || _enrollmentId === undefined) {
            throw new Error('Required parameter enrollmentId was null or undefined when calling getChallengeForEnrollment.');
        }
        return `${this.configuration.basePath}/client-api/v1/enrollments/${encodeURIComponent(String(_enrollmentId))}`;
    }
    getProvisioningStatusForEnrollment(requestParameters, observe = 'body', reportProgress = false, options) {
        const _enrollmentId = requestParameters["enrollmentId"];
        if (_enrollmentId === null || _enrollmentId === undefined) {
            throw new Error('Required parameter enrollmentId was null or undefined when calling getProvisioningStatusForEnrollment.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v1/enrollments/${encodeURIComponent(String(_enrollmentId))}/provisioning/status`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getProvisioningStatusForEnrollmentUrl(requestParameters) {
        const _enrollmentId = requestParameters["enrollmentId"];
        if (_enrollmentId === null || _enrollmentId === undefined) {
            throw new Error('Required parameter enrollmentId was null or undefined when calling getProvisioningStatusForEnrollment.');
        }
        return `${this.configuration.basePath}/client-api/v1/enrollments/${encodeURIComponent(String(_enrollmentId))}/provisioning/status`;
    }
    handleChallengeResponse(requestParameters, observe = 'body', reportProgress = false, options) {
        const _enrollmentId = requestParameters["enrollmentId"];
        if (_enrollmentId === null || _enrollmentId === undefined) {
            throw new Error('Required parameter enrollmentId was null or undefined when calling handleChallengeResponse.');
        }
        const _challengeResponse = requestParameters["challengeResponse"];
        if (_challengeResponse === null || _challengeResponse === undefined) {
            throw new Error('Required parameter challengeResponse was null or undefined when calling handleChallengeResponse.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v1/enrollments/${encodeURIComponent(String(_enrollmentId))}/response`, _challengeResponse, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    handleChallengeResponseUrl(requestParameters) {
        const _enrollmentId = requestParameters["enrollmentId"];
        if (_enrollmentId === null || _enrollmentId === undefined) {
            throw new Error('Required parameter enrollmentId was null or undefined when calling handleChallengeResponse.');
        }
        const _challengeResponse = requestParameters["challengeResponse"];
        if (_challengeResponse === null || _challengeResponse === undefined) {
            throw new Error('Required parameter challengeResponse was null or undefined when calling handleChallengeResponse.');
        }
        return `${this.configuration.basePath}/client-api/v1/enrollments/${encodeURIComponent(String(_enrollmentId))}/response`;
    }
}
EnrollmentService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: EnrollmentService, deps: [{ token: i1.HttpClient }, { token: ENROLLMENT_MANAGER_BASE_PATH, optional: true }, { token: EnrollmentManagerConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
EnrollmentService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: EnrollmentService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: EnrollmentService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [ENROLLMENT_MANAGER_BASE_PATH]
                }] }, { type: EnrollmentManagerConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const EnrollmentServiceCreateEnrollmentMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/client-api/v1/enrollments",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "challengeType": "INSTRUCTIONS",
                    "challenge": "2740f44c-c4ab-42a4-bbf1-1ad46b53b743",
                    "enrollmentId": "eb101331-f6cd-4d44-81c8-7b325619a362"
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const EnrollmentServiceGetChallengeForEnrollmentMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/client-api/v1/enrollments/{enrollmentId}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "challengeType": "INSTRUCTIONS",
                    "challenge": "2740f44c-c4ab-42a4-bbf1-1ad46b53b743",
                    "enrollmentId": "eb101331-f6cd-4d44-81c8-7b325619a362"
                }
            },
            {
                status: 200,
                body: {
                    "enrollmentId": "enrollmentId",
                    "challenge": "challenge"
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const EnrollmentServiceGetProvisioningStatusForEnrollmentMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/client-api/v1/enrollments/{enrollmentId}/provisioning/status",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "provisioningStatus": "COMPLETE"
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
const EnrollmentServiceHandleChallengeResponseMocksProvider = createMocks([{
        urlPattern: "/client-api/v1/client-api/v1/enrollments/{enrollmentId}/response",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {
                    "challengeType": "INSTRUCTIONS",
                    "challenge": "2740f44c-c4ab-42a4-bbf1-1ad46b53b743",
                    "enrollmentId": "eb101331-f6cd-4d44-81c8-7b325619a362"
                }
            },
            {
                status: 200,
                body: {
                    "challengeType": "TWOFASELECTION",
                    "challenge": "2740f44c-c4ab-42a4-bbf1-1ad46b53b743",
                    "enrollmentId": "eb101331-f6cd-4d44-81c8-7b325619a362",
                    "challengePayload": {
                        "otpChannels": [{
                                "channelType": "EMAIL",
                                "channelValue": "xxxxxxxyz@backbase.com"
                            }, {
                                "channelType": "SMS",
                                "channelValue": "xxxxxx789"
                            }]
                    }
                }
            },
            {
                status: 200,
                body: {
                    "challengeType": "TWOFAENTRY",
                    "challenge": "2740f44c-c4ab-42a4-bbf1-1ad46b53b743",
                    "enrollmentId": "eb101331-f6cd-4d44-81c8-7b325619a362",
                    "challengePayload": {
                        "resendDelay": 60,
                        "resendsRemaining": 1,
                        "attemptsRemaining": 2,
                        "otpSize": 6,
                        "otpChannel": {
                            "channelType": "EMAIL",
                            "channelValue": "xxxxxxxyz@backbase.com"
                        }
                    }
                }
            },
            {
                status: 200,
                body: {
                    "challengeType": "PASSWORD",
                    "challenge": "2740f44c-c4ab-42a4-bbf1-1ad46b53b743",
                    "enrollmentId": "eb101331-f6cd-4d44-81c8-7b325619a362",
                    "challengePayload": {
                        "redirectUrl": "https://identity-url-here/auth/realms/backbase/protocol/openid-connect/auth?redirect_uri=http://completion-url-here&client_id=self-enrollment&response_type=code&scope=openid"
                    }
                }
            },
            {
                status: 200,
                body: {
                    "enrollmentId": "enrollmentId",
                    "challenge": "challenge"
                }
            },
            {
                status: 400,
                body: {
                    "challengeType": "INSTRUCTIONS",
                    "challenge": "2740f44c-c4ab-42a4-bbf1-1ad46b53b743",
                    "enrollmentId": "eb101331-f6cd-4d44-81c8-7b325619a362"
                }
            },
            {
                status: 400,
                body: {
                    "challengeType": "TWOFASELECTION",
                    "challenge": "2740f44c-c4ab-42a4-bbf1-1ad46b53b743",
                    "enrollmentId": "eb101331-f6cd-4d44-81c8-7b325619a362",
                    "challengePayload": {
                        "otpChannels": [{
                                "channelType": "EMAIL",
                                "channelValue": "xxxxxxxyz@backbase.com"
                            }, {
                                "channelType": "SMS",
                                "channelValue": "xxxxxx789"
                            }]
                    }
                }
            },
            {
                status: 400,
                body: {
                    "challengeType": "TWOFAENTRY",
                    "challenge": "2740f44c-c4ab-42a4-bbf1-1ad46b53b743",
                    "enrollmentId": "eb101331-f6cd-4d44-81c8-7b325619a362",
                    "challengePayload": {
                        "resendDelay": 60,
                        "resendsRemaining": 1,
                        "attemptsRemaining": 2,
                        "otpSize": 6,
                        "otpChannel": {
                            "channelType": "EMAIL",
                            "channelValue": "xxxxxxxyz@backbase.com"
                        }
                    }
                }
            },
            {
                status: 400,
                body: {
                    "enrollmentId": "enrollmentId",
                    "challenge": "challenge"
                }
            },
            {
                status: 409,
                body: {
                    "challengeType": "INSTRUCTIONS",
                    "challenge": "2740f44c-c4ab-42a4-bbf1-1ad46b53b743",
                    "enrollmentId": "eb101331-f6cd-4d44-81c8-7b325619a362"
                }
            },
            {
                status: 409,
                body: {
                    "challengeType": "TWOFASELECTION",
                    "challenge": "2740f44c-c4ab-42a4-bbf1-1ad46b53b743",
                    "enrollmentId": "eb101331-f6cd-4d44-81c8-7b325619a362",
                    "challengePayload": {
                        "otpChannels": [{
                                "channelType": "EMAIL",
                                "channelValue": "xxxxxxxyz@backbase.com"
                            }, {
                                "channelType": "SMS",
                                "channelValue": "xxxxxx789"
                            }]
                    }
                }
            },
            {
                status: 409,
                body: {
                    "challengeType": "TWOFAENTRY",
                    "challenge": "2740f44c-c4ab-42a4-bbf1-1ad46b53b743",
                    "enrollmentId": "eb101331-f6cd-4d44-81c8-7b325619a362",
                    "challengePayload": {
                        "resendDelay": 60,
                        "resendsRemaining": 1,
                        "attemptsRemaining": 2,
                        "otpSize": 6,
                        "otpChannel": {
                            "channelType": "EMAIL",
                            "channelValue": "xxxxxxxyz@backbase.com"
                        }
                    }
                }
            },
            {
                status: 409,
                body: {
                    "enrollmentId": "enrollmentId",
                    "challenge": "challenge"
                }
            },
            {
                status: 500,
                body: {
                    "enrollmentId": "enrollmentId",
                    "challenge": "challenge"
                }
            },
        ]
    }]);
const EnrollmentServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v1/client-api/v1/enrollments",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "challengeType": "INSTRUCTIONS",
                    "challenge": "2740f44c-c4ab-42a4-bbf1-1ad46b53b743",
                    "enrollmentId": "eb101331-f6cd-4d44-81c8-7b325619a362"
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/client-api/v1/enrollments/{enrollmentId}",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "challengeType": "INSTRUCTIONS",
                    "challenge": "2740f44c-c4ab-42a4-bbf1-1ad46b53b743",
                    "enrollmentId": "eb101331-f6cd-4d44-81c8-7b325619a362"
                }
            },
            {
                status: 200,
                body: {
                    "enrollmentId": "enrollmentId",
                    "challenge": "challenge"
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/client-api/v1/enrollments/{enrollmentId}/provisioning/status",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "provisioningStatus": "COMPLETE"
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v1/client-api/v1/enrollments/{enrollmentId}/response",
        method: "POST",
        responses: [
            {
                status: 200,
                body: {
                    "challengeType": "INSTRUCTIONS",
                    "challenge": "2740f44c-c4ab-42a4-bbf1-1ad46b53b743",
                    "enrollmentId": "eb101331-f6cd-4d44-81c8-7b325619a362"
                }
            },
            {
                status: 200,
                body: {
                    "challengeType": "TWOFASELECTION",
                    "challenge": "2740f44c-c4ab-42a4-bbf1-1ad46b53b743",
                    "enrollmentId": "eb101331-f6cd-4d44-81c8-7b325619a362",
                    "challengePayload": {
                        "otpChannels": [{
                                "channelType": "EMAIL",
                                "channelValue": "xxxxxxxyz@backbase.com"
                            }, {
                                "channelType": "SMS",
                                "channelValue": "xxxxxx789"
                            }]
                    }
                }
            },
            {
                status: 200,
                body: {
                    "challengeType": "TWOFAENTRY",
                    "challenge": "2740f44c-c4ab-42a4-bbf1-1ad46b53b743",
                    "enrollmentId": "eb101331-f6cd-4d44-81c8-7b325619a362",
                    "challengePayload": {
                        "resendDelay": 60,
                        "resendsRemaining": 1,
                        "attemptsRemaining": 2,
                        "otpSize": 6,
                        "otpChannel": {
                            "channelType": "EMAIL",
                            "channelValue": "xxxxxxxyz@backbase.com"
                        }
                    }
                }
            },
            {
                status: 200,
                body: {
                    "challengeType": "PASSWORD",
                    "challenge": "2740f44c-c4ab-42a4-bbf1-1ad46b53b743",
                    "enrollmentId": "eb101331-f6cd-4d44-81c8-7b325619a362",
                    "challengePayload": {
                        "redirectUrl": "https://identity-url-here/auth/realms/backbase/protocol/openid-connect/auth?redirect_uri=http://completion-url-here&client_id=self-enrollment&response_type=code&scope=openid"
                    }
                }
            },
            {
                status: 200,
                body: {
                    "enrollmentId": "enrollmentId",
                    "challenge": "challenge"
                }
            },
            {
                status: 400,
                body: {
                    "challengeType": "INSTRUCTIONS",
                    "challenge": "2740f44c-c4ab-42a4-bbf1-1ad46b53b743",
                    "enrollmentId": "eb101331-f6cd-4d44-81c8-7b325619a362"
                }
            },
            {
                status: 400,
                body: {
                    "challengeType": "TWOFASELECTION",
                    "challenge": "2740f44c-c4ab-42a4-bbf1-1ad46b53b743",
                    "enrollmentId": "eb101331-f6cd-4d44-81c8-7b325619a362",
                    "challengePayload": {
                        "otpChannels": [{
                                "channelType": "EMAIL",
                                "channelValue": "xxxxxxxyz@backbase.com"
                            }, {
                                "channelType": "SMS",
                                "channelValue": "xxxxxx789"
                            }]
                    }
                }
            },
            {
                status: 400,
                body: {
                    "challengeType": "TWOFAENTRY",
                    "challenge": "2740f44c-c4ab-42a4-bbf1-1ad46b53b743",
                    "enrollmentId": "eb101331-f6cd-4d44-81c8-7b325619a362",
                    "challengePayload": {
                        "resendDelay": 60,
                        "resendsRemaining": 1,
                        "attemptsRemaining": 2,
                        "otpSize": 6,
                        "otpChannel": {
                            "channelType": "EMAIL",
                            "channelValue": "xxxxxxxyz@backbase.com"
                        }
                    }
                }
            },
            {
                status: 400,
                body: {
                    "enrollmentId": "enrollmentId",
                    "challenge": "challenge"
                }
            },
            {
                status: 409,
                body: {
                    "challengeType": "INSTRUCTIONS",
                    "challenge": "2740f44c-c4ab-42a4-bbf1-1ad46b53b743",
                    "enrollmentId": "eb101331-f6cd-4d44-81c8-7b325619a362"
                }
            },
            {
                status: 409,
                body: {
                    "challengeType": "TWOFASELECTION",
                    "challenge": "2740f44c-c4ab-42a4-bbf1-1ad46b53b743",
                    "enrollmentId": "eb101331-f6cd-4d44-81c8-7b325619a362",
                    "challengePayload": {
                        "otpChannels": [{
                                "channelType": "EMAIL",
                                "channelValue": "xxxxxxxyz@backbase.com"
                            }, {
                                "channelType": "SMS",
                                "channelValue": "xxxxxx789"
                            }]
                    }
                }
            },
            {
                status: 409,
                body: {
                    "challengeType": "TWOFAENTRY",
                    "challenge": "2740f44c-c4ab-42a4-bbf1-1ad46b53b743",
                    "enrollmentId": "eb101331-f6cd-4d44-81c8-7b325619a362",
                    "challengePayload": {
                        "resendDelay": 60,
                        "resendsRemaining": 1,
                        "attemptsRemaining": 2,
                        "otpSize": 6,
                        "otpChannel": {
                            "channelType": "EMAIL",
                            "channelValue": "xxxxxxxyz@backbase.com"
                        }
                    }
                }
            },
            {
                status: 409,
                body: {
                    "enrollmentId": "enrollmentId",
                    "challenge": "challenge"
                }
            },
            {
                status: 500,
                body: {
                    "enrollmentId": "enrollmentId",
                    "challenge": "challenge"
                }
            },
        ]
    },
]);

export { COLLECTION_FORMATS, CONFIG_TOKEN, ChallengeType, ChannelType, ENROLLMENT_MANAGER_BASE_PATH, EnrollmentManagerApiModule, EnrollmentManagerConfiguration, EnrollmentService, EnrollmentServiceCreateEnrollmentMocksProvider, EnrollmentServiceGetChallengeForEnrollmentMocksProvider, EnrollmentServiceGetProvisioningStatusForEnrollmentMocksProvider, EnrollmentServiceHandleChallengeResponseMocksProvider, EnrollmentServiceMocksProvider, ProvisioningStatus };
//# sourceMappingURL=backbase-enrollment-manager-v1-client-ang.js.map
