(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@backbase/foundation-ang/core'), require('@backbase/consent-ui'), require('@backbase/ui-ang/badge'), require('@backbase/ui-ang/empty-state'), require('@backbase/ui-ang/loading-indicator'), require('@backbase/ui-ang/icon'), require('@backbase/ui-ang/date-pipe'), require('rxjs'), require('rxjs/operators'), require('@backbase/data-ang/consent')) :
    typeof define === 'function' && define.amd ? define('@backbase/consent-list-widget-ang', ['exports', '@angular/core', '@angular/common', '@backbase/foundation-ang/core', '@backbase/consent-ui', '@backbase/ui-ang/badge', '@backbase/ui-ang/empty-state', '@backbase/ui-ang/loading-indicator', '@backbase/ui-ang/icon', '@backbase/ui-ang/date-pipe', 'rxjs', 'rxjs/operators', '@backbase/data-ang/consent'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["consent-list-widget-ang"] = {}), global.ng.core, global.ng.common, global.i1$2, global.i1$1, global.i2, global.i1$3, global.i3$1, global.i3, global.i5, global.rxjs, global.rxjs.operators, global.i1));
})(this, (function (exports, i0, i2$1, i1$2, i1$1, i2, i1$3, i3$1, i3, i5, rxjs, operators, i1) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i2__namespace$1 = /*#__PURE__*/_interopNamespace(i2$1);
    var i1__namespace$3 = /*#__PURE__*/_interopNamespace(i1$2);
    var i1__namespace$1 = /*#__PURE__*/_interopNamespace(i1$1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i1__namespace$2 = /*#__PURE__*/_interopNamespace(i1$3);
    var i3__namespace$1 = /*#__PURE__*/_interopNamespace(i3$1);
    var i3__namespace = /*#__PURE__*/_interopNamespace(i3);
    var i5__namespace = /*#__PURE__*/_interopNamespace(i5);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var ConsentListAccessDenied = /** @class */ (function () {
        function ConsentListAccessDenied(error) {
            this.error = error;
            this.kind = 'ConsentListAccessDenied';
        }
        return ConsentListAccessDenied;
    }());
    var ConsentListBadRequest = /** @class */ (function () {
        function ConsentListBadRequest(error) {
            this.error = error;
            this.kind = 'ConsentListBadRequest';
        }
        return ConsentListBadRequest;
    }());
    var ConsentListUnknownError = /** @class */ (function () {
        function ConsentListUnknownError(error) {
            this.error = error;
            this.kind = 'ConsentListUnknownError';
        }
        return ConsentListUnknownError;
    }());
    var ConsentListConnectivityError = /** @class */ (function () {
        function ConsentListConnectivityError(error) {
            this.error = error;
            this.kind = 'ConsentListConnectivityError';
        }
        return ConsentListConnectivityError;
    }());
    var parseError = function (error) {
        if (error.error instanceof ErrorEvent) {
            return new ConsentListUnknownError(error);
        }
        else {
            switch (error.status) {
                case 0:
                    return new ConsentListConnectivityError(error);
                case 400:
                    return new ConsentListBadRequest(error);
                case 401:
                    return new ConsentListAccessDenied(error);
                case 403:
                    return new ConsentListAccessDenied(error);
                default:
                    return new ConsentListUnknownError(error);
            }
        }
    };

    var ConsentListService = /** @class */ (function () {
        function ConsentListService(consentHttpService) {
            var _this = this;
            this.consentHttpService = consentHttpService;
            this.loading = new rxjs.BehaviorSubject(true);
            this.error = new rxjs.BehaviorSubject(undefined);
            this.consents = this.getConsentsList().pipe(operators.tap(function () { return _this.error.next(undefined); }), operators.catchError(function (error) {
                _this.error.next(error);
                return rxjs.of([]);
            }), operators.tap(function () { return _this.loading.next(false); }));
        }
        ConsentListService.prototype.getConsentsList = function () {
            return this.consentHttpService.getConsents('response').pipe(operators.pluck('body'), operators.catchError(function (error) {
                throw parseError(error);
            }));
        };
        return ConsentListService;
    }());
    ConsentListService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentListService, deps: [{ token: i1__namespace.ConsentsHttpService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    ConsentListService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentListService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentListService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace.ConsentsHttpService }]; } });

    exports.Status = void 0;
    (function (Status) {
        Status["ACTIVE"] = "ACTIVE";
        Status["REVOKED"] = "REVOKED";
        Status["EXPIRED"] = "EXPIRED";
    })(exports.Status || (exports.Status = {}));

    var ConsentItemComponent = /** @class */ (function () {
        function ConsentItemComponent() {
            /**
             * Component context
             */
            this.hostRef = this;
            /**
             * Consent item status enumeration
             */
            this.Status = exports.Status;
        }
        return ConsentItemComponent;
    }());
    ConsentItemComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentItemComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    ConsentItemComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ConsentItemComponent, selector: "bb-consent-item-component", inputs: { consent: "consent" }, ngImport: i0__namespace, template: "<ng-container bbConsentListItemCustomizable [bbHostRef]=\"hostRef\" [bbTemplateContext]=\"consent\"> </ng-container>\n\n<ng-template bbConsentListItemCustomizable let-hostRef let-consent=\"context\">\n  <ng-container *ngIf=\"consent\">\n    <div class=\"row\">\n      <div class=\"col-8 col-sm-8 col-md-4\">\n        <bb-third-party-provider-ui\n          [name]=\"consent.tpp.name\"\n          [url]=\"consent.tpp.website\"\n          [image]=\"consent.tpp.imageUrl\"\n          [verified]=\"consent.tpp.isTrusted\"\n          [condensed]=\"true\"\n          [expiryDate]=\"consent.expiryDate | bbDate: 'bbShort'\"\n          [expired]=\"consent?.status === hostRef.Status.EXPIRED\"\n          [showExpire]=\"true\">\n        </bb-third-party-provider-ui>\n      </div>\n      <div class=\"d-none d-md-block col-2\">\n        <span\n          data-role=\"consent-item-accounts\"\n          i18n=\"Accounts|Number of Accounts@@consent-list-component.accounts.pluralization\">\n          { consent.numberOfAccounts, plural, =1 {1 account} other {{{consent.numberOfAccounts}} accounts} }\n        </span>\n      </div>\n      <div class=\"bb-text-align-right d-none d-md-block col-3 col-lg-4\">\n        <div\n          i18n=\"Expired on|Consent is expired@@consent-list.date.expiredOn\"\n          class=\"bb-consent-item__date-header\"\n          *ngIf=\"consent?.status === hostRef.Status.EXPIRED\">\n          Expired on\n        </div>\n        <div\n          i18n=\"Expiry Date|Expiry Date of Consent@@consent-list.date.expiryDate\"\n          class=\"bb-consent-item__date-header\"\n          *ngIf=\"consent?.status !== hostRef.Status.EXPIRED\">\n          Expire date\n        </div>\n        <div>\n          {{ consent.expiryDate | bbDate: 'bbShort' }}\n        </div>\n      </div>\n      <div class=\"d-none d-sm-flex col-3 col-md-2 col-lg-1 bb-stack\">\n        <div class=\"bb-stack__item bb-stack__item--push-right\">\n          <bb-badge-ui\n            data-role=\"consent-item-badge-lg-active\"\n            *ngIf=\"consent.status === Status.ACTIVE\"\n            color=\"success\"\n            text=\"ACTIVE\"\n            i18n-text=\"Active|Active badge@@consent-list-component.badge.active\">\n          </bb-badge-ui>\n          <bb-badge-ui\n            data-role=\"consent-item-badge-lg-revoked\"\n            *ngIf=\"consent.status === Status.REVOKED\"\n            color=\"danger\"\n            text=\"REVOKED\"\n            i18n-text=\"Revoked|revoked badge@@consent-list-component.badge.revoked\">\n          </bb-badge-ui>\n          <bb-badge-ui\n            data-role=\"consent-item-badge-lg-expired\"\n            *ngIf=\"consent.status === Status.EXPIRED\"\n            color=\"secondary\"\n            text=\"EXPIRED\"\n            i18n-text=\"Expired|Expired badge@@consent-list-component.badge.expired\">\n          </bb-badge-ui>\n        </div>\n      </div>\n      <div class=\"bb-text-align-right col-2 d-sm-none bb-stack\">\n        <div class=\"bb-stack__item bb-stack__item--push-right\">\n          <bb-badge-ui\n            data-role=\"consent-item-badge-sm-active\"\n            *ngIf=\"consent.status === Status.ACTIVE\"\n            [abbr]=\"true\"\n            color=\"success\"\n            text=\"ACTIVE\"\n            i18n-text=\"Active|Active badge@@consent-list-component.badge.active\">\n          </bb-badge-ui>\n          <bb-badge-ui\n            data-role=\"consent-item-badge-sm-revoked\"\n            *ngIf=\"consent.status === Status.REVOKED\"\n            [abbr]=\"true\"\n            color=\"danger\"\n            text=\"REVOKED\"\n            i18n-text=\"Revoked|revoked badge@@consent-list-component.badge.revoked\">\n          </bb-badge-ui>\n          <bb-badge-ui\n            data-role=\"consent-item-badge-sm-expired\"\n            *ngIf=\"consent.status === Status.EXPIRED\"\n            [abbr]=\"true\"\n            color=\"secondary\"\n            text=\"EXPIRED\"\n            i18n-text=\"Expired|Expired badge@@consent-list-component.badge.expired\">\n          </bb-badge-ui>\n        </div>\n      </div>\n      <div class=\"bb-text-align-right col-2 col-sm-1 col-md-1 bb-stack\">\n        <div class=\"bb-stack__item bb-stack__item--push-right\">\n          <bb-icon-ui name=\"chevron-right\" size=\"md\" color=\"secondary\"> </bb-icon-ui>\n        </div>\n      </div>\n    </div>\n  </ng-container>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return i1__namespace$1.ӨThirdPartyProviderComponent; }), selector: "bb-third-party-provider-ui", inputs: ["name", "image", "url", "verified", "condensed", "expiryDate", "expired", "showExpire"] }, { type: i0__namespace.forwardRef(function () { return i2__namespace.BadgeComponent; }), selector: "bb-badge-ui", inputs: ["color", "text", "abbr", "circle", "wrap", "ariaLabel"] }, { type: i0__namespace.forwardRef(function () { return i3__namespace.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i0__namespace.forwardRef(function () { return ConsentListItemCustomizableDirective; }), selector: "[bbConsentListItemCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i2__namespace$1.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "bbDate": i0__namespace.forwardRef(function () { return i5__namespace.BbDatePipe; }) } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentItemComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-consent-item-component',
                        templateUrl: './consent-item.component.html',
                    }]
            }], propDecorators: { consent: [{
                    type: i0.Input
                }] } });
    var ConsentListItemCustomizableDirective = /** @class */ (function (_super) {
        __extends(ConsentListItemCustomizableDirective, _super);
        function ConsentListItemCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ConsentListItemCustomizableDirective;
    }(i1$2.BbTemplate));
    ConsentListItemCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentListItemCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    ConsentListItemCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: ConsentListItemCustomizableDirective, selector: "[bbConsentListItemCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentListItemCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbConsentListItemCustomizable]',
                    }]
            }] });

    var ConsentListComponent = /** @class */ (function () {
        function ConsentListComponent() {
            /**
             * List of consents
             */
            this.consentsList = [];
            /**
             * Emitter that fires when you select consent
             */
            this.selectConsent = new i0.EventEmitter();
        }
        ConsentListComponent.prototype.onConsentSelect = function (consentId) {
            this.selectConsent.emit(consentId);
        };
        return ConsentListComponent;
    }());
    ConsentListComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentListComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    ConsentListComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ConsentListComponent, selector: "bb-consent-list-component", inputs: { consentsList: "consentsList" }, outputs: { selectConsent: "selectConsent" }, ngImport: i0__namespace, template: "<div class=\"list-group list-group-flush bb-consent-list\">\n  <div\n    *ngFor=\"let consent of consentsList; let i = index\"\n    role=\"button\"\n    tabindex=\"0\"\n    [attr.data-role]=\"'consent-list-item-' + consent.tpp.name\"\n    class=\"list-group-item list-group-item-action bb-consent-list__item\"\n    (keyup.enter)=\"onConsentSelect(consent.id)\"\n    (click)=\"onConsentSelect(consent.id)\">\n    <bb-consent-item-component [consent]=\"consent\"> </bb-consent-item-component>\n  </div>\n</div>\n", components: [{ type: ConsentItemComponent, selector: "bb-consent-item-component", inputs: ["consent"] }], directives: [{ type: i2__namespace$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentListComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-consent-list-component',
                        templateUrl: './consent-list.component.html',
                    }]
            }], propDecorators: { consentsList: [{
                    type: i0.Input
                }], selectConsent: [{
                    type: i0.Output
                }] } });

    var ConsentListErrorComponent = /** @class */ (function () {
        function ConsentListErrorComponent() {
        }
        return ConsentListErrorComponent;
    }());
    ConsentListErrorComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentListErrorComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    ConsentListErrorComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ConsentListErrorComponent, selector: "bb-consent-list-error", inputs: { errorKind: "errorKind" }, ngImport: i0__namespace, template: "<ng-container *ngIf=\"errorKind\" [ngSwitch]=\"errorKind\">\n  <bb-empty-state-ui\n    *ngSwitchCase=\"'ConsentListAccessDenied'\"\n    title=\"Permissions required\"\n    i18n-title=\"\n      Permissions required|Error state label when user does not have permissions to view consent\n      list@@consent-list.error.accessDenied.title\"\n    subtitle=\"You don't have permissions to see the consent's list.\"\n    i18n-subtitle=\"\n      No Permissions Subtitle|Error state subtitle label when user does not have permissions to view consent\n      list@@consent-list.error.accessDenied.subtitle\"\n    iconModifier=\"lock\"></bb-empty-state-ui>\n\n  <bb-empty-state-ui\n    *ngSwitchCase=\"'ConsentListConnectivityError'\"\n    title=\"Connectivity Error\"\n    i18n-title=\"\n      Connectivity Error title|Empty state label when there is connectivity error@@consent-list.error.connectivity.title\"\n    subtitle=\"Are you connected to the internet? Please check your connection and try again.\"\n    i18n-subtitle=\"\n      Connectivity Error subtitle|Empty state subtitle label when there is connectivity\n      error@@consent-list.error.connectivity.subtitle\"\n    iconModifier=\"error\"></bb-empty-state-ui>\n\n  <!-- This will usually happen on environment misconfiguration -->\n  <!-- ConsentListUnknownError | ConsentListBadRequest-->\n  <bb-empty-state-ui\n    *ngSwitchDefault\n    title=\"Unexpected Error\"\n    i18n-title=\"\n      Unexpected Error title|Empty state label when there is an unexpected error@@consent-list.error.unexpected.title\"\n    subtitle=\"Something's gone wrong with our server. Please try again later.\"\n    i18n-subtitle=\"\n      Unexpected Error subtitle|Empty state subtitle label when there is an unexpected\n      error@@consent-list.error.unexpected.subtitle\"\n    iconModifier=\"user\"></bb-empty-state-ui>\n</ng-container>\n", components: [{ type: i1__namespace$2.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i2__namespace$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace$1.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i2__namespace$1.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i2__namespace$1.NgSwitchDefault, selector: "[ngSwitchDefault]" }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentListErrorComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-consent-list-error',
                        templateUrl: './consent-list-error.component.html',
                    }]
            }], propDecorators: { errorKind: [{
                    type: i0.Input
                }] } });

    var ConsentListWidgetComponent = /** @class */ (function () {
        function ConsentListWidgetComponent(service) {
            this.service = service;
            /**
             * Component context
             */
            this.hostRef = this;
            /**
             * Emitter that is fired when selecting consent
             */
            this.consentId = new i0.EventEmitter();
            /**
             * Stream of loading spinner visibility flag
             */
            this.loading = this.service.loading;
            /**
             * Stream of Consent list errors
             */
            this.error = this.service.error;
            /**
             * Stream of consent items
             */
            this.consents = this.service.consents;
        }
        /**
         * Select consent click event handler.
         * @param consentId - consent ID
         */
        ConsentListWidgetComponent.prototype.selectConsent = function (consentId) {
            this.consentId.emit(consentId);
        };
        return ConsentListWidgetComponent;
    }());
    ConsentListWidgetComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentListWidgetComponent, deps: [{ token: ConsentListService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ConsentListWidgetComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ConsentListWidgetComponent, selector: "bb-consent-list-widget", outputs: { consentId: "consentId" }, ngImport: i0__namespace, template: "<ng-container bbConsentListWidgetCustomizable [bbHostRef]=\"hostRef\" [bbTemplateContext]=\"consents | async\">\n</ng-container>\n\n<ng-template bbConsentListWidgetCustomizable let-hostRef let-consents=\"context\">\n  <ng-container *ngIf=\"consents; else loadingTemplate\">\n    <ng-container *ngIf=\"!(hostRef.loading | async) as loading; else loadingTemplate\">\n      <ng-container *ngIf=\"!(hostRef.error | async); else errorTemplate\">\n        <ng-container *ngIf=\"consents?.length > 0; else emptyTemplate\">\n          <bb-consent-list-component [consentsList]=\"consents\" (selectConsent)=\"hostRef.selectConsent($event)\">\n          </bb-consent-list-component>\n        </ng-container>\n      </ng-container>\n    </ng-container>\n  </ng-container>\n\n  <ng-template #loadingTemplate>\n    <div class=\"bb-state-container\">\n      <bb-loading-indicator-ui></bb-loading-indicator-ui>\n    </div>\n  </ng-template>\n\n  <ng-template #errorTemplate>\n    <div class=\"bb-state-container\">\n      <bb-consent-list-error [errorKind]=\"$any(hostRef.error | async)?.kind\"> </bb-consent-list-error>\n    </div>\n  </ng-template>\n\n  <ng-template #emptyTemplate>\n    <div class=\"bb-state-container\">\n      <bb-empty-state-ui\n        i18n-title=\"No Consents|No Consents@@consent-list-widget.list-empty.title\"\n        title=\"No Consents\"\n        i18n-subtitle=\"\n          You haven't given any consents|You haven't given any consents to third\n          parties@@consent-list-widget.list-empty.subtitle\"\n        subtitle=\"You haven't given any consents to third parties\"\n        iconModifier=\"assignment-turned-in\">\n      </bb-empty-state-ui>\n    </div>\n  </ng-template>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return ConsentListComponent; }), selector: "bb-consent-list-component", inputs: ["consentsList"], outputs: ["selectConsent"] }, { type: i0__namespace.forwardRef(function () { return i3__namespace$1.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i0__namespace.forwardRef(function () { return ConsentListErrorComponent; }), selector: "bb-consent-list-error", inputs: ["errorKind"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace$2.EmptyStateComponent; }), selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i0__namespace.forwardRef(function () { return ConsentListWidgetCustomizableDirective; }), selector: "[bbConsentListWidgetCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i2__namespace$1.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i0__namespace.forwardRef(function () { return i2__namespace$1.AsyncPipe; }) } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentListWidgetComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-consent-list-widget',
                        templateUrl: './consent-list-widget.component.html',
                    }]
            }], ctorParameters: function () { return [{ type: ConsentListService }]; }, propDecorators: { consentId: [{
                    type: i0.Output
                }] } });
    var ConsentListWidgetCustomizableDirective = /** @class */ (function (_super) {
        __extends(ConsentListWidgetCustomizableDirective, _super);
        function ConsentListWidgetCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ConsentListWidgetCustomizableDirective;
    }(i1$2.BbTemplate));
    ConsentListWidgetCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentListWidgetCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    ConsentListWidgetCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: ConsentListWidgetCustomizableDirective, selector: "[bbConsentListWidgetCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentListWidgetCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbConsentListWidgetCustomizable]',
                    }]
            }] });

    var components = [ConsentListWidgetComponent, ConsentListComponent, ConsentItemComponent, ConsentListErrorComponent];
    var directives = [ConsentListWidgetCustomizableDirective, ConsentListItemCustomizableDirective];
    var uiModules = [
        i1$1.ConsentUiModule,
        i2.BadgeModule,
        i1$3.EmptyStateModule,
        i3$1.LoadingIndicatorModule,
        i3.IconModule,
        i5.BbDatePipeModule,
    ];
    var ConsentListWidgetModule = /** @class */ (function () {
        function ConsentListWidgetModule() {
        }
        return ConsentListWidgetModule;
    }());
    ConsentListWidgetModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentListWidgetModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ConsentListWidgetModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentListWidgetModule, declarations: [ConsentListWidgetComponent, ConsentListComponent, ConsentItemComponent, ConsentListErrorComponent, ConsentListWidgetCustomizableDirective, ConsentListItemCustomizableDirective], imports: [i2$1.CommonModule, i1$1.ConsentUiModule,
            i2.BadgeModule,
            i1$3.EmptyStateModule,
            i3$1.LoadingIndicatorModule,
            i3.IconModule,
            i5.BbDatePipeModule, i1__namespace$3.BackbaseCoreModule], exports: [ConsentListWidgetComponent, ConsentListComponent, ConsentItemComponent, ConsentListErrorComponent, ConsentListWidgetCustomizableDirective, ConsentListItemCustomizableDirective, i1$1.ConsentUiModule,
            i2.BadgeModule,
            i1$3.EmptyStateModule,
            i3$1.LoadingIndicatorModule,
            i3.IconModule,
            i5.BbDatePipeModule] });
    ConsentListWidgetModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentListWidgetModule, providers: [ConsentListService], imports: [__spreadArray(__spreadArray([
                i2$1.CommonModule
            ], __read(uiModules)), [
                i1$2.BackbaseCoreModule.withConfig({
                    classMap: { ConsentListWidgetComponent: ConsentListWidgetComponent },
                }),
            ]), i1$1.ConsentUiModule,
            i2.BadgeModule,
            i1$3.EmptyStateModule,
            i3$1.LoadingIndicatorModule,
            i3.IconModule,
            i5.BbDatePipeModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentListWidgetModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: __spreadArray(__spreadArray([
                            i2$1.CommonModule
                        ], __read(uiModules)), [
                            i1$2.BackbaseCoreModule.withConfig({
                                classMap: { ConsentListWidgetComponent: ConsentListWidgetComponent },
                            }),
                        ]),
                        exports: __spreadArray(__spreadArray(__spreadArray([], __read(components)), __read(directives)), __read(uiModules)),
                        providers: [ConsentListService],
                        declarations: __spreadArray(__spreadArray([], __read(components)), __read(directives)),
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.ConsentListWidgetComponent = ConsentListWidgetComponent;
    exports.ConsentListWidgetModule = ConsentListWidgetModule;
    exports["ӨConsentItemComponent"] = ConsentItemComponent;
    exports["ӨConsentListComponent"] = ConsentListComponent;
    exports["ӨConsentListErrorComponent"] = ConsentListErrorComponent;
    exports["ӨConsentListItemCustomizableDirective"] = ConsentListItemCustomizableDirective;
    exports["ӨConsentListWidgetCustomizableDirective"] = ConsentListWidgetCustomizableDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-consent-list-widget-ang.umd.js.map
