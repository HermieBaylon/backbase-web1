{"version":3,"file":"backbase-consent-list-widget-ang.js","sources":["../../../../libs/consent-list-widget-ang/src/consent-list-error.ts","../../../../libs/consent-list-widget-ang/src/consent-list-widget.service.ts","../../../../libs/consent-list-widget-ang/src/constants.ts","../../../../libs/consent-list-widget-ang/src/consent-item/consent-item.component.ts","../../../../libs/consent-list-widget-ang/src/consent-item/consent-item.component.html","../../../../libs/consent-list-widget-ang/src/consent-list/consent-list.component.ts","../../../../libs/consent-list-widget-ang/src/consent-list/consent-list.component.html","../../../../libs/consent-list-widget-ang/src/consent-list-error/consent-list-error.component.ts","../../../../libs/consent-list-widget-ang/src/consent-list-error/consent-list-error.component.html","../../../../libs/consent-list-widget-ang/src/consent-list-widget.component.ts","../../../../libs/consent-list-widget-ang/src/consent-list-widget.component.html","../../../../libs/consent-list-widget-ang/src/consent-list-widget.module.ts","../../../../libs/consent-list-widget-ang/backbase-consent-list-widget-ang.ts"],"sourcesContent":["import { HttpErrorResponse } from '@angular/common/http';\n\nexport class ConsentListAccessDenied {\n  kind: 'ConsentListAccessDenied' = 'ConsentListAccessDenied';\n  constructor(readonly error: HttpErrorResponse) {}\n}\n\nexport class ConsentListBadRequest {\n  kind: 'ConsentListBadRequest' = 'ConsentListBadRequest';\n  constructor(readonly error: HttpErrorResponse) {}\n}\n\nexport class ConsentListUnknownError {\n  kind: 'ConsentListUnknownError' = 'ConsentListUnknownError';\n  constructor(readonly error: HttpErrorResponse) {}\n}\n\nexport class ConsentListConnectivityError {\n  kind: 'ConsentListConnectivityError' = 'ConsentListConnectivityError';\n  constructor(readonly error: HttpErrorResponse) {}\n}\n\nexport type ConsentListError =\n  | ConsentListAccessDenied\n  | ConsentListBadRequest\n  | ConsentListUnknownError\n  | ConsentListConnectivityError;\n\nexport const parseError = (error: HttpErrorResponse): ConsentListError => {\n  if (error.error instanceof ErrorEvent) {\n    return new ConsentListUnknownError(error);\n  } else {\n    switch (error.status) {\n      case 0:\n        return new ConsentListConnectivityError(error);\n      case 400:\n        return new ConsentListBadRequest(error);\n      case 401:\n        return new ConsentListAccessDenied(error);\n      case 403:\n        return new ConsentListAccessDenied(error);\n      default:\n        return new ConsentListUnknownError(error);\n    }\n  }\n};\n","import { Injectable } from '@angular/core';\nimport { HttpResponse, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, of, BehaviorSubject } from 'rxjs';\nimport { catchError, tap, pluck } from 'rxjs/operators';\n\nimport { ConsentsHttpService, ConsentListItem as ConsentItem } from '@backbase/data-ang/consent';\n\nimport {\n  parseError,\n  ConsentListError,\n  ConsentListAccessDenied,\n  ConsentListBadRequest,\n  ConsentListUnknownError,\n  ConsentListConnectivityError,\n} from './consent-list-error';\n\nexport { ConsentListItem as ConsentItem } from '@backbase/data-ang/consent';\n\n@Injectable()\nexport class ConsentListService {\n  constructor(private readonly consentHttpService: ConsentsHttpService) {}\n\n  readonly loading = new BehaviorSubject<boolean>(true);\n  readonly error = new BehaviorSubject<\n    ConsentListAccessDenied | ConsentListBadRequest | ConsentListUnknownError | ConsentListConnectivityError | undefined\n  >(undefined);\n\n  readonly consents: Observable<ConsentItem[]> = this.getConsentsList().pipe(\n    tap(() => this.error.next(undefined)),\n    catchError((error: ConsentListError) => {\n      this.error.next(error);\n      return of([]);\n    }),\n    tap(() => this.loading.next(false)),\n  );\n\n  private getConsentsList(): Observable<ConsentItem[]> {\n    return this.consentHttpService.getConsents('response').pipe(\n      pluck<HttpResponse<ConsentItem[]>, ConsentItem[]>('body'),\n      catchError<ConsentItem[], never>((error: HttpErrorResponse) => {\n        throw parseError(error);\n      }),\n    );\n  }\n}\n","export enum Status {\n  ACTIVE = 'ACTIVE',\n  REVOKED = 'REVOKED',\n  EXPIRED = 'EXPIRED',\n}\n","import { Component, Input, Directive } from '@angular/core';\n\nimport { BbTemplate } from '@backbase/foundation-ang/core';\n\nimport { ConsentItem } from '../consent-list-widget.service';\nimport { Status } from '../constants';\n\n@Component({\n  selector: 'bb-consent-item-component',\n  templateUrl: './consent-item.component.html',\n})\nexport class ConsentItemComponent {\n  /**\n   * Component context\n   */\n  readonly hostRef: ConsentItemComponent = this;\n  /**\n   * The Consent item\n   */\n  @Input() consent: ConsentItem | undefined;\n  /**\n   * Consent item status enumeration\n   */\n  readonly Status = Status;\n}\n\n@Directive({\n  selector: '[bbConsentListItemCustomizable]',\n})\nexport class ConsentListItemCustomizableDirective extends BbTemplate<ConsentItemComponent, ConsentItem> {}\n","<ng-container bbConsentListItemCustomizable [bbHostRef]=\"hostRef\" [bbTemplateContext]=\"consent\"> </ng-container>\n\n<ng-template bbConsentListItemCustomizable let-hostRef let-consent=\"context\">\n  <ng-container *ngIf=\"consent\">\n    <div class=\"row\">\n      <div class=\"col-8 col-sm-8 col-md-4\">\n        <bb-third-party-provider-ui\n          [name]=\"consent.tpp.name\"\n          [url]=\"consent.tpp.website\"\n          [image]=\"consent.tpp.imageUrl\"\n          [verified]=\"consent.tpp.isTrusted\"\n          [condensed]=\"true\"\n          [expiryDate]=\"consent.expiryDate | bbDate: 'bbShort'\"\n          [expired]=\"consent?.status === hostRef.Status.EXPIRED\"\n          [showExpire]=\"true\">\n        </bb-third-party-provider-ui>\n      </div>\n      <div class=\"d-none d-md-block col-2\">\n        <span\n          data-role=\"consent-item-accounts\"\n          i18n=\"Accounts|Number of Accounts@@consent-list-component.accounts.pluralization\">\n          { consent.numberOfAccounts, plural, =1 {1 account} other {{{consent.numberOfAccounts}} accounts} }\n        </span>\n      </div>\n      <div class=\"bb-text-align-right d-none d-md-block col-3 col-lg-4\">\n        <div\n          i18n=\"Expired on|Consent is expired@@consent-list.date.expiredOn\"\n          class=\"bb-consent-item__date-header\"\n          *ngIf=\"consent?.status === hostRef.Status.EXPIRED\">\n          Expired on\n        </div>\n        <div\n          i18n=\"Expiry Date|Expiry Date of Consent@@consent-list.date.expiryDate\"\n          class=\"bb-consent-item__date-header\"\n          *ngIf=\"consent?.status !== hostRef.Status.EXPIRED\">\n          Expire date\n        </div>\n        <div>\n          {{ consent.expiryDate | bbDate: 'bbShort' }}\n        </div>\n      </div>\n      <div class=\"d-none d-sm-flex col-3 col-md-2 col-lg-1 bb-stack\">\n        <div class=\"bb-stack__item bb-stack__item--push-right\">\n          <bb-badge-ui\n            data-role=\"consent-item-badge-lg-active\"\n            *ngIf=\"consent.status === Status.ACTIVE\"\n            color=\"success\"\n            text=\"ACTIVE\"\n            i18n-text=\"Active|Active badge@@consent-list-component.badge.active\">\n          </bb-badge-ui>\n          <bb-badge-ui\n            data-role=\"consent-item-badge-lg-revoked\"\n            *ngIf=\"consent.status === Status.REVOKED\"\n            color=\"danger\"\n            text=\"REVOKED\"\n            i18n-text=\"Revoked|revoked badge@@consent-list-component.badge.revoked\">\n          </bb-badge-ui>\n          <bb-badge-ui\n            data-role=\"consent-item-badge-lg-expired\"\n            *ngIf=\"consent.status === Status.EXPIRED\"\n            color=\"secondary\"\n            text=\"EXPIRED\"\n            i18n-text=\"Expired|Expired badge@@consent-list-component.badge.expired\">\n          </bb-badge-ui>\n        </div>\n      </div>\n      <div class=\"bb-text-align-right col-2 d-sm-none bb-stack\">\n        <div class=\"bb-stack__item bb-stack__item--push-right\">\n          <bb-badge-ui\n            data-role=\"consent-item-badge-sm-active\"\n            *ngIf=\"consent.status === Status.ACTIVE\"\n            [abbr]=\"true\"\n            color=\"success\"\n            text=\"ACTIVE\"\n            i18n-text=\"Active|Active badge@@consent-list-component.badge.active\">\n          </bb-badge-ui>\n          <bb-badge-ui\n            data-role=\"consent-item-badge-sm-revoked\"\n            *ngIf=\"consent.status === Status.REVOKED\"\n            [abbr]=\"true\"\n            color=\"danger\"\n            text=\"REVOKED\"\n            i18n-text=\"Revoked|revoked badge@@consent-list-component.badge.revoked\">\n          </bb-badge-ui>\n          <bb-badge-ui\n            data-role=\"consent-item-badge-sm-expired\"\n            *ngIf=\"consent.status === Status.EXPIRED\"\n            [abbr]=\"true\"\n            color=\"secondary\"\n            text=\"EXPIRED\"\n            i18n-text=\"Expired|Expired badge@@consent-list-component.badge.expired\">\n          </bb-badge-ui>\n        </div>\n      </div>\n      <div class=\"bb-text-align-right col-2 col-sm-1 col-md-1 bb-stack\">\n        <div class=\"bb-stack__item bb-stack__item--push-right\">\n          <bb-icon-ui name=\"chevron-right\" size=\"md\" color=\"secondary\"> </bb-icon-ui>\n        </div>\n      </div>\n    </div>\n  </ng-container>\n</ng-template>\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\nimport { ConsentItem } from '../consent-list-widget.service';\n\n@Component({\n  selector: 'bb-consent-list-component',\n  templateUrl: './consent-list.component.html',\n})\nexport class ConsentListComponent {\n  /**\n   * List of consents\n   */\n  @Input() consentsList: ConsentItem[] = [];\n  /**\n   * Emitter that fires when you select consent\n   */\n  @Output() selectConsent = new EventEmitter<string>();\n\n  onConsentSelect(consentId: string) {\n    this.selectConsent.emit(consentId);\n  }\n}\n","<div class=\"list-group list-group-flush bb-consent-list\">\n  <div\n    *ngFor=\"let consent of consentsList; let i = index\"\n    role=\"button\"\n    tabindex=\"0\"\n    [attr.data-role]=\"'consent-list-item-' + consent.tpp.name\"\n    class=\"list-group-item list-group-item-action bb-consent-list__item\"\n    (keyup.enter)=\"onConsentSelect(consent.id)\"\n    (click)=\"onConsentSelect(consent.id)\">\n    <bb-consent-item-component [consent]=\"consent\"> </bb-consent-item-component>\n  </div>\n</div>\n","import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'bb-consent-list-error',\n  templateUrl: './consent-list-error.component.html',\n})\nexport class ConsentListErrorComponent {\n  /**\n   * Error kind to check against\n   */\n  @Input() errorKind: string | undefined | null;\n}\n","<ng-container *ngIf=\"errorKind\" [ngSwitch]=\"errorKind\">\n  <bb-empty-state-ui\n    *ngSwitchCase=\"'ConsentListAccessDenied'\"\n    title=\"Permissions required\"\n    i18n-title=\"\n      Permissions required|Error state label when user does not have permissions to view consent\n      list@@consent-list.error.accessDenied.title\"\n    subtitle=\"You don't have permissions to see the consent's list.\"\n    i18n-subtitle=\"\n      No Permissions Subtitle|Error state subtitle label when user does not have permissions to view consent\n      list@@consent-list.error.accessDenied.subtitle\"\n    iconModifier=\"lock\"></bb-empty-state-ui>\n\n  <bb-empty-state-ui\n    *ngSwitchCase=\"'ConsentListConnectivityError'\"\n    title=\"Connectivity Error\"\n    i18n-title=\"\n      Connectivity Error title|Empty state label when there is connectivity error@@consent-list.error.connectivity.title\"\n    subtitle=\"Are you connected to the internet? Please check your connection and try again.\"\n    i18n-subtitle=\"\n      Connectivity Error subtitle|Empty state subtitle label when there is connectivity\n      error@@consent-list.error.connectivity.subtitle\"\n    iconModifier=\"error\"></bb-empty-state-ui>\n\n  <!-- This will usually happen on environment misconfiguration -->\n  <!-- ConsentListUnknownError | ConsentListBadRequest-->\n  <bb-empty-state-ui\n    *ngSwitchDefault\n    title=\"Unexpected Error\"\n    i18n-title=\"\n      Unexpected Error title|Empty state label when there is an unexpected error@@consent-list.error.unexpected.title\"\n    subtitle=\"Something's gone wrong with our server. Please try again later.\"\n    i18n-subtitle=\"\n      Unexpected Error subtitle|Empty state subtitle label when there is an unexpected\n      error@@consent-list.error.unexpected.subtitle\"\n    iconModifier=\"user\"></bb-empty-state-ui>\n</ng-container>\n","import { Component, Directive, Output, EventEmitter } from '@angular/core';\nimport { BbTemplate } from '@backbase/foundation-ang/core';\nimport { Observable } from 'rxjs';\n\nimport { ConsentListService, ConsentItem } from './consent-list-widget.service';\nimport {\n  ConsentListAccessDenied,\n  ConsentListBadRequest,\n  ConsentListConnectivityError,\n  ConsentListUnknownError,\n} from './consent-list-error';\n\n@Component({\n  selector: 'bb-consent-list-widget',\n  templateUrl: './consent-list-widget.component.html',\n})\nexport class ConsentListWidgetComponent {\n  /**\n   * Component context\n   */\n  readonly hostRef: ConsentListWidgetComponent = this;\n  /**\n   * Emitter that is fired when selecting consent\n   */\n  @Output() consentId: EventEmitter<string> = new EventEmitter<string>();\n  /**\n   * Stream of loading spinner visibility flag\n   */\n  readonly loading: Observable<boolean> = this.service.loading;\n  /**\n   * Stream of Consent list errors\n   */\n  readonly error: Observable<\n    ConsentListAccessDenied | ConsentListBadRequest | ConsentListUnknownError | ConsentListConnectivityError | undefined\n  > = this.service.error;\n  /**\n   * Stream of consent items\n   */\n  readonly consents: Observable<ConsentItem[] | undefined> = this.service.consents;\n  /**\n   * Select consent click event handler.\n   * @param consentId - consent ID\n   */\n  selectConsent(consentId: string): void {\n    this.consentId.emit(consentId);\n  }\n\n  constructor(private readonly service: ConsentListService) {}\n}\n\n@Directive({\n  selector: '[bbConsentListWidgetCustomizable]',\n})\nexport class ConsentListWidgetCustomizableDirective extends BbTemplate<\n  ConsentListWidgetComponent,\n  ConsentItem[] | null\n> {}\n","<ng-container bbConsentListWidgetCustomizable [bbHostRef]=\"hostRef\" [bbTemplateContext]=\"consents | async\">\n</ng-container>\n\n<ng-template bbConsentListWidgetCustomizable let-hostRef let-consents=\"context\">\n  <ng-container *ngIf=\"consents; else loadingTemplate\">\n    <ng-container *ngIf=\"!(hostRef.loading | async) as loading; else loadingTemplate\">\n      <ng-container *ngIf=\"!(hostRef.error | async); else errorTemplate\">\n        <ng-container *ngIf=\"consents?.length > 0; else emptyTemplate\">\n          <bb-consent-list-component [consentsList]=\"consents\" (selectConsent)=\"hostRef.selectConsent($event)\">\n          </bb-consent-list-component>\n        </ng-container>\n      </ng-container>\n    </ng-container>\n  </ng-container>\n\n  <ng-template #loadingTemplate>\n    <div class=\"bb-state-container\">\n      <bb-loading-indicator-ui></bb-loading-indicator-ui>\n    </div>\n  </ng-template>\n\n  <ng-template #errorTemplate>\n    <div class=\"bb-state-container\">\n      <bb-consent-list-error [errorKind]=\"$any(hostRef.error | async)?.kind\"> </bb-consent-list-error>\n    </div>\n  </ng-template>\n\n  <ng-template #emptyTemplate>\n    <div class=\"bb-state-container\">\n      <bb-empty-state-ui\n        i18n-title=\"No Consents|No Consents@@consent-list-widget.list-empty.title\"\n        title=\"No Consents\"\n        i18n-subtitle=\"\n          You haven't given any consents|You haven't given any consents to third\n          parties@@consent-list-widget.list-empty.subtitle\"\n        subtitle=\"You haven't given any consents to third parties\"\n        iconModifier=\"assignment-turned-in\">\n      </bb-empty-state-ui>\n    </div>\n  </ng-template>\n</ng-template>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { BackbaseCoreModule } from '@backbase/foundation-ang/core';\nimport { ConsentUiModule } from '@backbase/consent-ui';\n\nimport { BadgeModule } from '@backbase/ui-ang/badge';\nimport { EmptyStateModule } from '@backbase/ui-ang/empty-state';\nimport { LoadingIndicatorModule } from '@backbase/ui-ang/loading-indicator';\nimport { IconModule } from '@backbase/ui-ang/icon';\nimport { BbDatePipeModule } from '@backbase/ui-ang/date-pipe';\nimport { ConsentListWidgetComponent, ConsentListWidgetCustomizableDirective } from './consent-list-widget.component';\nimport { ConsentListComponent } from './consent-list/consent-list.component';\nimport { ConsentItemComponent, ConsentListItemCustomizableDirective } from './consent-item/consent-item.component';\nimport { ConsentListErrorComponent } from './consent-list-error/consent-list-error.component';\nimport { ConsentListService } from './consent-list-widget.service';\n\nconst components = [ConsentListWidgetComponent, ConsentListComponent, ConsentItemComponent, ConsentListErrorComponent];\n\nconst directives = [ConsentListWidgetCustomizableDirective, ConsentListItemCustomizableDirective];\n\nconst uiModules = [\n  ConsentUiModule,\n  BadgeModule,\n  EmptyStateModule,\n  LoadingIndicatorModule,\n  IconModule,\n  BbDatePipeModule,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ...uiModules,\n    BackbaseCoreModule.withConfig({\n      classMap: { ConsentListWidgetComponent },\n    }),\n  ],\n  exports: [...components, ...directives, ...uiModules],\n  providers: [ConsentListService],\n  declarations: [...components, ...directives],\n})\nexport class ConsentListWidgetModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":"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"}