import * as i0 from '@angular/core';
import { Injectable, Component, Input, Directive, EventEmitter, Output, NgModule } from '@angular/core';
import * as i2$1 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i1$3 from '@backbase/foundation-ang/core';
import { BbTemplate, BackbaseCoreModule } from '@backbase/foundation-ang/core';
import * as i1$1 from '@backbase/consent-ui';
import { ConsentUiModule } from '@backbase/consent-ui';
import * as i2 from '@backbase/ui-ang/badge';
import { BadgeModule } from '@backbase/ui-ang/badge';
import * as i1$2 from '@backbase/ui-ang/empty-state';
import { EmptyStateModule } from '@backbase/ui-ang/empty-state';
import * as i3$1 from '@backbase/ui-ang/loading-indicator';
import { LoadingIndicatorModule } from '@backbase/ui-ang/loading-indicator';
import * as i3 from '@backbase/ui-ang/icon';
import { IconModule } from '@backbase/ui-ang/icon';
import * as i5 from '@backbase/ui-ang/date-pipe';
import { BbDatePipeModule } from '@backbase/ui-ang/date-pipe';
import { BehaviorSubject, of } from 'rxjs';
import { tap, catchError, pluck } from 'rxjs/operators';
import * as i1 from '@backbase/data-ang/consent';

class ConsentListAccessDenied {
    constructor(error) {
        this.error = error;
        this.kind = 'ConsentListAccessDenied';
    }
}
class ConsentListBadRequest {
    constructor(error) {
        this.error = error;
        this.kind = 'ConsentListBadRequest';
    }
}
class ConsentListUnknownError {
    constructor(error) {
        this.error = error;
        this.kind = 'ConsentListUnknownError';
    }
}
class ConsentListConnectivityError {
    constructor(error) {
        this.error = error;
        this.kind = 'ConsentListConnectivityError';
    }
}
const parseError = (error) => {
    if (error.error instanceof ErrorEvent) {
        return new ConsentListUnknownError(error);
    }
    else {
        switch (error.status) {
            case 0:
                return new ConsentListConnectivityError(error);
            case 400:
                return new ConsentListBadRequest(error);
            case 401:
                return new ConsentListAccessDenied(error);
            case 403:
                return new ConsentListAccessDenied(error);
            default:
                return new ConsentListUnknownError(error);
        }
    }
};

class ConsentListService {
    constructor(consentHttpService) {
        this.consentHttpService = consentHttpService;
        this.loading = new BehaviorSubject(true);
        this.error = new BehaviorSubject(undefined);
        this.consents = this.getConsentsList().pipe(tap(() => this.error.next(undefined)), catchError((error) => {
            this.error.next(error);
            return of([]);
        }), tap(() => this.loading.next(false)));
    }
    getConsentsList() {
        return this.consentHttpService.getConsents('response').pipe(pluck('body'), catchError((error) => {
            throw parseError(error);
        }));
    }
}
ConsentListService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentListService, deps: [{ token: i1.ConsentsHttpService }], target: i0.ɵɵFactoryTarget.Injectable });
ConsentListService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentListService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentListService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.ConsentsHttpService }]; } });

var Status;
(function (Status) {
    Status["ACTIVE"] = "ACTIVE";
    Status["REVOKED"] = "REVOKED";
    Status["EXPIRED"] = "EXPIRED";
})(Status || (Status = {}));

class ConsentItemComponent {
    constructor() {
        /**
         * Component context
         */
        this.hostRef = this;
        /**
         * Consent item status enumeration
         */
        this.Status = Status;
    }
}
ConsentItemComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentItemComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ConsentItemComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ConsentItemComponent, selector: "bb-consent-item-component", inputs: { consent: "consent" }, ngImport: i0, template: "<ng-container bbConsentListItemCustomizable [bbHostRef]=\"hostRef\" [bbTemplateContext]=\"consent\"> </ng-container>\n\n<ng-template bbConsentListItemCustomizable let-hostRef let-consent=\"context\">\n  <ng-container *ngIf=\"consent\">\n    <div class=\"row\">\n      <div class=\"col-8 col-sm-8 col-md-4\">\n        <bb-third-party-provider-ui\n          [name]=\"consent.tpp.name\"\n          [url]=\"consent.tpp.website\"\n          [image]=\"consent.tpp.imageUrl\"\n          [verified]=\"consent.tpp.isTrusted\"\n          [condensed]=\"true\"\n          [expiryDate]=\"consent.expiryDate | bbDate: 'bbShort'\"\n          [expired]=\"consent?.status === hostRef.Status.EXPIRED\"\n          [showExpire]=\"true\">\n        </bb-third-party-provider-ui>\n      </div>\n      <div class=\"d-none d-md-block col-2\">\n        <span\n          data-role=\"consent-item-accounts\"\n          i18n=\"Accounts|Number of Accounts@@consent-list-component.accounts.pluralization\">\n          { consent.numberOfAccounts, plural, =1 {1 account} other {{{consent.numberOfAccounts}} accounts} }\n        </span>\n      </div>\n      <div class=\"bb-text-align-right d-none d-md-block col-3 col-lg-4\">\n        <div\n          i18n=\"Expired on|Consent is expired@@consent-list.date.expiredOn\"\n          class=\"bb-consent-item__date-header\"\n          *ngIf=\"consent?.status === hostRef.Status.EXPIRED\">\n          Expired on\n        </div>\n        <div\n          i18n=\"Expiry Date|Expiry Date of Consent@@consent-list.date.expiryDate\"\n          class=\"bb-consent-item__date-header\"\n          *ngIf=\"consent?.status !== hostRef.Status.EXPIRED\">\n          Expire date\n        </div>\n        <div>\n          {{ consent.expiryDate | bbDate: 'bbShort' }}\n        </div>\n      </div>\n      <div class=\"d-none d-sm-flex col-3 col-md-2 col-lg-1 bb-stack\">\n        <div class=\"bb-stack__item bb-stack__item--push-right\">\n          <bb-badge-ui\n            data-role=\"consent-item-badge-lg-active\"\n            *ngIf=\"consent.status === Status.ACTIVE\"\n            color=\"success\"\n            text=\"ACTIVE\"\n            i18n-text=\"Active|Active badge@@consent-list-component.badge.active\">\n          </bb-badge-ui>\n          <bb-badge-ui\n            data-role=\"consent-item-badge-lg-revoked\"\n            *ngIf=\"consent.status === Status.REVOKED\"\n            color=\"danger\"\n            text=\"REVOKED\"\n            i18n-text=\"Revoked|revoked badge@@consent-list-component.badge.revoked\">\n          </bb-badge-ui>\n          <bb-badge-ui\n            data-role=\"consent-item-badge-lg-expired\"\n            *ngIf=\"consent.status === Status.EXPIRED\"\n            color=\"secondary\"\n            text=\"EXPIRED\"\n            i18n-text=\"Expired|Expired badge@@consent-list-component.badge.expired\">\n          </bb-badge-ui>\n        </div>\n      </div>\n      <div class=\"bb-text-align-right col-2 d-sm-none bb-stack\">\n        <div class=\"bb-stack__item bb-stack__item--push-right\">\n          <bb-badge-ui\n            data-role=\"consent-item-badge-sm-active\"\n            *ngIf=\"consent.status === Status.ACTIVE\"\n            [abbr]=\"true\"\n            color=\"success\"\n            text=\"ACTIVE\"\n            i18n-text=\"Active|Active badge@@consent-list-component.badge.active\">\n          </bb-badge-ui>\n          <bb-badge-ui\n            data-role=\"consent-item-badge-sm-revoked\"\n            *ngIf=\"consent.status === Status.REVOKED\"\n            [abbr]=\"true\"\n            color=\"danger\"\n            text=\"REVOKED\"\n            i18n-text=\"Revoked|revoked badge@@consent-list-component.badge.revoked\">\n          </bb-badge-ui>\n          <bb-badge-ui\n            data-role=\"consent-item-badge-sm-expired\"\n            *ngIf=\"consent.status === Status.EXPIRED\"\n            [abbr]=\"true\"\n            color=\"secondary\"\n            text=\"EXPIRED\"\n            i18n-text=\"Expired|Expired badge@@consent-list-component.badge.expired\">\n          </bb-badge-ui>\n        </div>\n      </div>\n      <div class=\"bb-text-align-right col-2 col-sm-1 col-md-1 bb-stack\">\n        <div class=\"bb-stack__item bb-stack__item--push-right\">\n          <bb-icon-ui name=\"chevron-right\" size=\"md\" color=\"secondary\"> </bb-icon-ui>\n        </div>\n      </div>\n    </div>\n  </ng-container>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i1$1.ӨThirdPartyProviderComponent; }), selector: "bb-third-party-provider-ui", inputs: ["name", "image", "url", "verified", "condensed", "expiryDate", "expired", "showExpire"] }, { type: i0.forwardRef(function () { return i2.BadgeComponent; }), selector: "bb-badge-ui", inputs: ["color", "text", "abbr", "circle", "wrap", "ariaLabel"] }, { type: i0.forwardRef(function () { return i3.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i0.forwardRef(function () { return ConsentListItemCustomizableDirective; }), selector: "[bbConsentListItemCustomizable]" }, { type: i0.forwardRef(function () { return i2$1.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "bbDate": i0.forwardRef(function () { return i5.BbDatePipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentItemComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-consent-item-component',
                    templateUrl: './consent-item.component.html',
                }]
        }], propDecorators: { consent: [{
                type: Input
            }] } });
class ConsentListItemCustomizableDirective extends BbTemplate {
}
ConsentListItemCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentListItemCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ConsentListItemCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: ConsentListItemCustomizableDirective, selector: "[bbConsentListItemCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentListItemCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbConsentListItemCustomizable]',
                }]
        }] });

class ConsentListComponent {
    constructor() {
        /**
         * List of consents
         */
        this.consentsList = [];
        /**
         * Emitter that fires when you select consent
         */
        this.selectConsent = new EventEmitter();
    }
    onConsentSelect(consentId) {
        this.selectConsent.emit(consentId);
    }
}
ConsentListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentListComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ConsentListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ConsentListComponent, selector: "bb-consent-list-component", inputs: { consentsList: "consentsList" }, outputs: { selectConsent: "selectConsent" }, ngImport: i0, template: "<div class=\"list-group list-group-flush bb-consent-list\">\n  <div\n    *ngFor=\"let consent of consentsList; let i = index\"\n    role=\"button\"\n    tabindex=\"0\"\n    [attr.data-role]=\"'consent-list-item-' + consent.tpp.name\"\n    class=\"list-group-item list-group-item-action bb-consent-list__item\"\n    (keyup.enter)=\"onConsentSelect(consent.id)\"\n    (click)=\"onConsentSelect(consent.id)\">\n    <bb-consent-item-component [consent]=\"consent\"> </bb-consent-item-component>\n  </div>\n</div>\n", components: [{ type: ConsentItemComponent, selector: "bb-consent-item-component", inputs: ["consent"] }], directives: [{ type: i2$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentListComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-consent-list-component',
                    templateUrl: './consent-list.component.html',
                }]
        }], propDecorators: { consentsList: [{
                type: Input
            }], selectConsent: [{
                type: Output
            }] } });

class ConsentListErrorComponent {
}
ConsentListErrorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentListErrorComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ConsentListErrorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ConsentListErrorComponent, selector: "bb-consent-list-error", inputs: { errorKind: "errorKind" }, ngImport: i0, template: "<ng-container *ngIf=\"errorKind\" [ngSwitch]=\"errorKind\">\n  <bb-empty-state-ui\n    *ngSwitchCase=\"'ConsentListAccessDenied'\"\n    title=\"Permissions required\"\n    i18n-title=\"\n      Permissions required|Error state label when user does not have permissions to view consent\n      list@@consent-list.error.accessDenied.title\"\n    subtitle=\"You don't have permissions to see the consent's list.\"\n    i18n-subtitle=\"\n      No Permissions Subtitle|Error state subtitle label when user does not have permissions to view consent\n      list@@consent-list.error.accessDenied.subtitle\"\n    iconModifier=\"lock\"></bb-empty-state-ui>\n\n  <bb-empty-state-ui\n    *ngSwitchCase=\"'ConsentListConnectivityError'\"\n    title=\"Connectivity Error\"\n    i18n-title=\"\n      Connectivity Error title|Empty state label when there is connectivity error@@consent-list.error.connectivity.title\"\n    subtitle=\"Are you connected to the internet? Please check your connection and try again.\"\n    i18n-subtitle=\"\n      Connectivity Error subtitle|Empty state subtitle label when there is connectivity\n      error@@consent-list.error.connectivity.subtitle\"\n    iconModifier=\"error\"></bb-empty-state-ui>\n\n  <!-- This will usually happen on environment misconfiguration -->\n  <!-- ConsentListUnknownError | ConsentListBadRequest-->\n  <bb-empty-state-ui\n    *ngSwitchDefault\n    title=\"Unexpected Error\"\n    i18n-title=\"\n      Unexpected Error title|Empty state label when there is an unexpected error@@consent-list.error.unexpected.title\"\n    subtitle=\"Something's gone wrong with our server. Please try again later.\"\n    i18n-subtitle=\"\n      Unexpected Error subtitle|Empty state subtitle label when there is an unexpected\n      error@@consent-list.error.unexpected.subtitle\"\n    iconModifier=\"user\"></bb-empty-state-ui>\n</ng-container>\n", components: [{ type: i1$2.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i2$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2$1.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i2$1.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i2$1.NgSwitchDefault, selector: "[ngSwitchDefault]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentListErrorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-consent-list-error',
                    templateUrl: './consent-list-error.component.html',
                }]
        }], propDecorators: { errorKind: [{
                type: Input
            }] } });

class ConsentListWidgetComponent {
    constructor(service) {
        this.service = service;
        /**
         * Component context
         */
        this.hostRef = this;
        /**
         * Emitter that is fired when selecting consent
         */
        this.consentId = new EventEmitter();
        /**
         * Stream of loading spinner visibility flag
         */
        this.loading = this.service.loading;
        /**
         * Stream of Consent list errors
         */
        this.error = this.service.error;
        /**
         * Stream of consent items
         */
        this.consents = this.service.consents;
    }
    /**
     * Select consent click event handler.
     * @param consentId - consent ID
     */
    selectConsent(consentId) {
        this.consentId.emit(consentId);
    }
}
ConsentListWidgetComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentListWidgetComponent, deps: [{ token: ConsentListService }], target: i0.ɵɵFactoryTarget.Component });
ConsentListWidgetComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ConsentListWidgetComponent, selector: "bb-consent-list-widget", outputs: { consentId: "consentId" }, ngImport: i0, template: "<ng-container bbConsentListWidgetCustomizable [bbHostRef]=\"hostRef\" [bbTemplateContext]=\"consents | async\">\n</ng-container>\n\n<ng-template bbConsentListWidgetCustomizable let-hostRef let-consents=\"context\">\n  <ng-container *ngIf=\"consents; else loadingTemplate\">\n    <ng-container *ngIf=\"!(hostRef.loading | async) as loading; else loadingTemplate\">\n      <ng-container *ngIf=\"!(hostRef.error | async); else errorTemplate\">\n        <ng-container *ngIf=\"consents?.length > 0; else emptyTemplate\">\n          <bb-consent-list-component [consentsList]=\"consents\" (selectConsent)=\"hostRef.selectConsent($event)\">\n          </bb-consent-list-component>\n        </ng-container>\n      </ng-container>\n    </ng-container>\n  </ng-container>\n\n  <ng-template #loadingTemplate>\n    <div class=\"bb-state-container\">\n      <bb-loading-indicator-ui></bb-loading-indicator-ui>\n    </div>\n  </ng-template>\n\n  <ng-template #errorTemplate>\n    <div class=\"bb-state-container\">\n      <bb-consent-list-error [errorKind]=\"$any(hostRef.error | async)?.kind\"> </bb-consent-list-error>\n    </div>\n  </ng-template>\n\n  <ng-template #emptyTemplate>\n    <div class=\"bb-state-container\">\n      <bb-empty-state-ui\n        i18n-title=\"No Consents|No Consents@@consent-list-widget.list-empty.title\"\n        title=\"No Consents\"\n        i18n-subtitle=\"\n          You haven't given any consents|You haven't given any consents to third\n          parties@@consent-list-widget.list-empty.subtitle\"\n        subtitle=\"You haven't given any consents to third parties\"\n        iconModifier=\"assignment-turned-in\">\n      </bb-empty-state-ui>\n    </div>\n  </ng-template>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return ConsentListComponent; }), selector: "bb-consent-list-component", inputs: ["consentsList"], outputs: ["selectConsent"] }, { type: i0.forwardRef(function () { return i3$1.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i0.forwardRef(function () { return ConsentListErrorComponent; }), selector: "bb-consent-list-error", inputs: ["errorKind"] }, { type: i0.forwardRef(function () { return i1$2.EmptyStateComponent; }), selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i0.forwardRef(function () { return ConsentListWidgetCustomizableDirective; }), selector: "[bbConsentListWidgetCustomizable]" }, { type: i0.forwardRef(function () { return i2$1.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i0.forwardRef(function () { return i2$1.AsyncPipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentListWidgetComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-consent-list-widget',
                    templateUrl: './consent-list-widget.component.html',
                }]
        }], ctorParameters: function () { return [{ type: ConsentListService }]; }, propDecorators: { consentId: [{
                type: Output
            }] } });
class ConsentListWidgetCustomizableDirective extends BbTemplate {
}
ConsentListWidgetCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentListWidgetCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ConsentListWidgetCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: ConsentListWidgetCustomizableDirective, selector: "[bbConsentListWidgetCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentListWidgetCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbConsentListWidgetCustomizable]',
                }]
        }] });

const components = [ConsentListWidgetComponent, ConsentListComponent, ConsentItemComponent, ConsentListErrorComponent];
const directives = [ConsentListWidgetCustomizableDirective, ConsentListItemCustomizableDirective];
const uiModules = [
    ConsentUiModule,
    BadgeModule,
    EmptyStateModule,
    LoadingIndicatorModule,
    IconModule,
    BbDatePipeModule,
];
class ConsentListWidgetModule {
}
ConsentListWidgetModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentListWidgetModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ConsentListWidgetModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentListWidgetModule, declarations: [ConsentListWidgetComponent, ConsentListComponent, ConsentItemComponent, ConsentListErrorComponent, ConsentListWidgetCustomizableDirective, ConsentListItemCustomizableDirective], imports: [CommonModule, ConsentUiModule,
        BadgeModule,
        EmptyStateModule,
        LoadingIndicatorModule,
        IconModule,
        BbDatePipeModule, i1$3.BackbaseCoreModule], exports: [ConsentListWidgetComponent, ConsentListComponent, ConsentItemComponent, ConsentListErrorComponent, ConsentListWidgetCustomizableDirective, ConsentListItemCustomizableDirective, ConsentUiModule,
        BadgeModule,
        EmptyStateModule,
        LoadingIndicatorModule,
        IconModule,
        BbDatePipeModule] });
ConsentListWidgetModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentListWidgetModule, providers: [ConsentListService], imports: [[
            CommonModule,
            ...uiModules,
            BackbaseCoreModule.withConfig({
                classMap: { ConsentListWidgetComponent },
            }),
        ], ConsentUiModule,
        BadgeModule,
        EmptyStateModule,
        LoadingIndicatorModule,
        IconModule,
        BbDatePipeModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentListWidgetModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        ...uiModules,
                        BackbaseCoreModule.withConfig({
                            classMap: { ConsentListWidgetComponent },
                        }),
                    ],
                    exports: [...components, ...directives, ...uiModules],
                    providers: [ConsentListService],
                    declarations: [...components, ...directives],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { ConsentListWidgetComponent, ConsentListWidgetModule, Status, ConsentItemComponent as ӨConsentItemComponent, ConsentListComponent as ӨConsentListComponent, ConsentListErrorComponent as ӨConsentListErrorComponent, ConsentListItemCustomizableDirective as ӨConsentListItemCustomizableDirective, ConsentListWidgetCustomizableDirective as ӨConsentListWidgetCustomizableDirective };
//# sourceMappingURL=backbase-consent-list-widget-ang.js.map
