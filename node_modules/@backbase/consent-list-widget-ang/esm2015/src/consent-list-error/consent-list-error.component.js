import { Component, Input } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/empty-state";
import * as i2 from "@angular/common";
export class ConsentListErrorComponent {
}
ConsentListErrorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentListErrorComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ConsentListErrorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ConsentListErrorComponent, selector: "bb-consent-list-error", inputs: { errorKind: "errorKind" }, ngImport: i0, template: "<ng-container *ngIf=\"errorKind\" [ngSwitch]=\"errorKind\">\n  <bb-empty-state-ui\n    *ngSwitchCase=\"'ConsentListAccessDenied'\"\n    title=\"Permissions required\"\n    i18n-title=\"\n      Permissions required|Error state label when user does not have permissions to view consent\n      list@@consent-list.error.accessDenied.title\"\n    subtitle=\"You don't have permissions to see the consent's list.\"\n    i18n-subtitle=\"\n      No Permissions Subtitle|Error state subtitle label when user does not have permissions to view consent\n      list@@consent-list.error.accessDenied.subtitle\"\n    iconModifier=\"lock\"></bb-empty-state-ui>\n\n  <bb-empty-state-ui\n    *ngSwitchCase=\"'ConsentListConnectivityError'\"\n    title=\"Connectivity Error\"\n    i18n-title=\"\n      Connectivity Error title|Empty state label when there is connectivity error@@consent-list.error.connectivity.title\"\n    subtitle=\"Are you connected to the internet? Please check your connection and try again.\"\n    i18n-subtitle=\"\n      Connectivity Error subtitle|Empty state subtitle label when there is connectivity\n      error@@consent-list.error.connectivity.subtitle\"\n    iconModifier=\"error\"></bb-empty-state-ui>\n\n  <!-- This will usually happen on environment misconfiguration -->\n  <!-- ConsentListUnknownError | ConsentListBadRequest-->\n  <bb-empty-state-ui\n    *ngSwitchDefault\n    title=\"Unexpected Error\"\n    i18n-title=\"\n      Unexpected Error title|Empty state label when there is an unexpected error@@consent-list.error.unexpected.title\"\n    subtitle=\"Something's gone wrong with our server. Please try again later.\"\n    i18n-subtitle=\"\n      Unexpected Error subtitle|Empty state subtitle label when there is an unexpected\n      error@@consent-list.error.unexpected.subtitle\"\n    iconModifier=\"user\"></bb-empty-state-ui>\n</ng-container>\n", components: [{ type: i1.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i2.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i2.NgSwitchDefault, selector: "[ngSwitchDefault]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentListErrorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-consent-list-error',
                    templateUrl: './consent-list-error.component.html',
                }]
        }], propDecorators: { errorKind: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc2VudC1saXN0LWVycm9yLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvY29uc2VudC1saXN0LXdpZGdldC1hbmcvc3JjL2NvbnNlbnQtbGlzdC1lcnJvci9jb25zZW50LWxpc3QtZXJyb3IuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9jb25zZW50LWxpc3Qtd2lkZ2V0LWFuZy9zcmMvY29uc2VudC1saXN0LWVycm9yL2NvbnNlbnQtbGlzdC1lcnJvci5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQzs7OztBQU1qRCxNQUFNLE9BQU8seUJBQXlCOzt1SEFBekIseUJBQXlCOzJHQUF6Qix5QkFBeUIsaUdDTnRDLG0xREFxQ0E7NEZEL0JhLHlCQUF5QjtrQkFKckMsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsdUJBQXVCO29CQUNqQyxXQUFXLEVBQUUscUNBQXFDO2lCQUNuRDs4QkFLVSxTQUFTO3NCQUFqQixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdiYi1jb25zZW50LWxpc3QtZXJyb3InLFxuICB0ZW1wbGF0ZVVybDogJy4vY29uc2VudC1saXN0LWVycm9yLmNvbXBvbmVudC5odG1sJyxcbn0pXG5leHBvcnQgY2xhc3MgQ29uc2VudExpc3RFcnJvckNvbXBvbmVudCB7XG4gIC8qKlxuICAgKiBFcnJvciBraW5kIHRvIGNoZWNrIGFnYWluc3RcbiAgICovXG4gIEBJbnB1dCgpIGVycm9yS2luZDogc3RyaW5nIHwgdW5kZWZpbmVkIHwgbnVsbDtcbn1cbiIsIjxuZy1jb250YWluZXIgKm5nSWY9XCJlcnJvcktpbmRcIiBbbmdTd2l0Y2hdPVwiZXJyb3JLaW5kXCI+XG4gIDxiYi1lbXB0eS1zdGF0ZS11aVxuICAgICpuZ1N3aXRjaENhc2U9XCInQ29uc2VudExpc3RBY2Nlc3NEZW5pZWQnXCJcbiAgICB0aXRsZT1cIlBlcm1pc3Npb25zIHJlcXVpcmVkXCJcbiAgICBpMThuLXRpdGxlPVwiXG4gICAgICBQZXJtaXNzaW9ucyByZXF1aXJlZHxFcnJvciBzdGF0ZSBsYWJlbCB3aGVuIHVzZXIgZG9lcyBub3QgaGF2ZSBwZXJtaXNzaW9ucyB0byB2aWV3IGNvbnNlbnRcbiAgICAgIGxpc3RAQGNvbnNlbnQtbGlzdC5lcnJvci5hY2Nlc3NEZW5pZWQudGl0bGVcIlxuICAgIHN1YnRpdGxlPVwiWW91IGRvbid0IGhhdmUgcGVybWlzc2lvbnMgdG8gc2VlIHRoZSBjb25zZW50J3MgbGlzdC5cIlxuICAgIGkxOG4tc3VidGl0bGU9XCJcbiAgICAgIE5vIFBlcm1pc3Npb25zIFN1YnRpdGxlfEVycm9yIHN0YXRlIHN1YnRpdGxlIGxhYmVsIHdoZW4gdXNlciBkb2VzIG5vdCBoYXZlIHBlcm1pc3Npb25zIHRvIHZpZXcgY29uc2VudFxuICAgICAgbGlzdEBAY29uc2VudC1saXN0LmVycm9yLmFjY2Vzc0RlbmllZC5zdWJ0aXRsZVwiXG4gICAgaWNvbk1vZGlmaWVyPVwibG9ja1wiPjwvYmItZW1wdHktc3RhdGUtdWk+XG5cbiAgPGJiLWVtcHR5LXN0YXRlLXVpXG4gICAgKm5nU3dpdGNoQ2FzZT1cIidDb25zZW50TGlzdENvbm5lY3Rpdml0eUVycm9yJ1wiXG4gICAgdGl0bGU9XCJDb25uZWN0aXZpdHkgRXJyb3JcIlxuICAgIGkxOG4tdGl0bGU9XCJcbiAgICAgIENvbm5lY3Rpdml0eSBFcnJvciB0aXRsZXxFbXB0eSBzdGF0ZSBsYWJlbCB3aGVuIHRoZXJlIGlzIGNvbm5lY3Rpdml0eSBlcnJvckBAY29uc2VudC1saXN0LmVycm9yLmNvbm5lY3Rpdml0eS50aXRsZVwiXG4gICAgc3VidGl0bGU9XCJBcmUgeW91IGNvbm5lY3RlZCB0byB0aGUgaW50ZXJuZXQ/IFBsZWFzZSBjaGVjayB5b3VyIGNvbm5lY3Rpb24gYW5kIHRyeSBhZ2Fpbi5cIlxuICAgIGkxOG4tc3VidGl0bGU9XCJcbiAgICAgIENvbm5lY3Rpdml0eSBFcnJvciBzdWJ0aXRsZXxFbXB0eSBzdGF0ZSBzdWJ0aXRsZSBsYWJlbCB3aGVuIHRoZXJlIGlzIGNvbm5lY3Rpdml0eVxuICAgICAgZXJyb3JAQGNvbnNlbnQtbGlzdC5lcnJvci5jb25uZWN0aXZpdHkuc3VidGl0bGVcIlxuICAgIGljb25Nb2RpZmllcj1cImVycm9yXCI+PC9iYi1lbXB0eS1zdGF0ZS11aT5cblxuICA8IS0tIFRoaXMgd2lsbCB1c3VhbGx5IGhhcHBlbiBvbiBlbnZpcm9ubWVudCBtaXNjb25maWd1cmF0aW9uIC0tPlxuICA8IS0tIENvbnNlbnRMaXN0VW5rbm93bkVycm9yIHwgQ29uc2VudExpc3RCYWRSZXF1ZXN0LS0+XG4gIDxiYi1lbXB0eS1zdGF0ZS11aVxuICAgICpuZ1N3aXRjaERlZmF1bHRcbiAgICB0aXRsZT1cIlVuZXhwZWN0ZWQgRXJyb3JcIlxuICAgIGkxOG4tdGl0bGU9XCJcbiAgICAgIFVuZXhwZWN0ZWQgRXJyb3IgdGl0bGV8RW1wdHkgc3RhdGUgbGFiZWwgd2hlbiB0aGVyZSBpcyBhbiB1bmV4cGVjdGVkIGVycm9yQEBjb25zZW50LWxpc3QuZXJyb3IudW5leHBlY3RlZC50aXRsZVwiXG4gICAgc3VidGl0bGU9XCJTb21ldGhpbmcncyBnb25lIHdyb25nIHdpdGggb3VyIHNlcnZlci4gUGxlYXNlIHRyeSBhZ2FpbiBsYXRlci5cIlxuICAgIGkxOG4tc3VidGl0bGU9XCJcbiAgICAgIFVuZXhwZWN0ZWQgRXJyb3Igc3VidGl0bGV8RW1wdHkgc3RhdGUgc3VidGl0bGUgbGFiZWwgd2hlbiB0aGVyZSBpcyBhbiB1bmV4cGVjdGVkXG4gICAgICBlcnJvckBAY29uc2VudC1saXN0LmVycm9yLnVuZXhwZWN0ZWQuc3VidGl0bGVcIlxuICAgIGljb25Nb2RpZmllcj1cInVzZXJcIj48L2JiLWVtcHR5LXN0YXRlLXVpPlxuPC9uZy1jb250YWluZXI+XG4iXX0=