import { Injectable } from '@angular/core';
import { of, BehaviorSubject } from 'rxjs';
import { catchError, tap, pluck } from 'rxjs/operators';
import { parseError, } from './consent-list-error';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/data-ang/consent";
export class ConsentListService {
    constructor(consentHttpService) {
        this.consentHttpService = consentHttpService;
        this.loading = new BehaviorSubject(true);
        this.error = new BehaviorSubject(undefined);
        this.consents = this.getConsentsList().pipe(tap(() => this.error.next(undefined)), catchError((error) => {
            this.error.next(error);
            return of([]);
        }), tap(() => this.loading.next(false)));
    }
    getConsentsList() {
        return this.consentHttpService.getConsents('response').pipe(pluck('body'), catchError((error) => {
            throw parseError(error);
        }));
    }
}
ConsentListService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentListService, deps: [{ token: i1.ConsentsHttpService }], target: i0.ɵɵFactoryTarget.Injectable });
ConsentListService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentListService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentListService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.ConsentsHttpService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc2VudC1saXN0LXdpZGdldC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vbGlicy9jb25zZW50LWxpc3Qtd2lkZ2V0LWFuZy9zcmMvY29uc2VudC1saXN0LXdpZGdldC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFjLEVBQUUsRUFBRSxlQUFlLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdkQsT0FBTyxFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFJeEQsT0FBTyxFQUNMLFVBQVUsR0FNWCxNQUFNLHNCQUFzQixDQUFDOzs7QUFLOUIsTUFBTSxPQUFPLGtCQUFrQjtJQUM3QixZQUE2QixrQkFBdUM7UUFBdkMsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFxQjtRQUUzRCxZQUFPLEdBQUcsSUFBSSxlQUFlLENBQVUsSUFBSSxDQUFDLENBQUM7UUFDN0MsVUFBSyxHQUFHLElBQUksZUFBZSxDQUVsQyxTQUFTLENBQUMsQ0FBQztRQUVKLGFBQVEsR0FBOEIsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDLElBQUksQ0FDeEUsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQ3JDLFVBQVUsQ0FBQyxDQUFDLEtBQXVCLEVBQUUsRUFBRTtZQUNyQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUN2QixPQUFPLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNoQixDQUFDLENBQUMsRUFDRixHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FDcEMsQ0FBQztJQWRxRSxDQUFDO0lBZ0JoRSxlQUFlO1FBQ3JCLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQ3pELEtBQUssQ0FBNkMsTUFBTSxDQUFDLEVBQ3pELFVBQVUsQ0FBdUIsQ0FBQyxLQUF3QixFQUFFLEVBQUU7WUFDNUQsTUFBTSxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDMUIsQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7O2dIQXhCVSxrQkFBa0I7b0hBQWxCLGtCQUFrQjs0RkFBbEIsa0JBQWtCO2tCQUQ5QixVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSHR0cFJlc3BvbnNlLCBIdHRwRXJyb3JSZXNwb25zZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IE9ic2VydmFibGUsIG9mLCBCZWhhdmlvclN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGNhdGNoRXJyb3IsIHRhcCwgcGx1Y2sgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7IENvbnNlbnRzSHR0cFNlcnZpY2UsIENvbnNlbnRMaXN0SXRlbSBhcyBDb25zZW50SXRlbSB9IGZyb20gJ0BiYWNrYmFzZS9kYXRhLWFuZy9jb25zZW50JztcblxuaW1wb3J0IHtcbiAgcGFyc2VFcnJvcixcbiAgQ29uc2VudExpc3RFcnJvcixcbiAgQ29uc2VudExpc3RBY2Nlc3NEZW5pZWQsXG4gIENvbnNlbnRMaXN0QmFkUmVxdWVzdCxcbiAgQ29uc2VudExpc3RVbmtub3duRXJyb3IsXG4gIENvbnNlbnRMaXN0Q29ubmVjdGl2aXR5RXJyb3IsXG59IGZyb20gJy4vY29uc2VudC1saXN0LWVycm9yJztcblxuZXhwb3J0IHsgQ29uc2VudExpc3RJdGVtIGFzIENvbnNlbnRJdGVtIH0gZnJvbSAnQGJhY2tiYXNlL2RhdGEtYW5nL2NvbnNlbnQnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQ29uc2VudExpc3RTZXJ2aWNlIHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBjb25zZW50SHR0cFNlcnZpY2U6IENvbnNlbnRzSHR0cFNlcnZpY2UpIHt9XG5cbiAgcmVhZG9ubHkgbG9hZGluZyA9IG5ldyBCZWhhdmlvclN1YmplY3Q8Ym9vbGVhbj4odHJ1ZSk7XG4gIHJlYWRvbmx5IGVycm9yID0gbmV3IEJlaGF2aW9yU3ViamVjdDxcbiAgICBDb25zZW50TGlzdEFjY2Vzc0RlbmllZCB8IENvbnNlbnRMaXN0QmFkUmVxdWVzdCB8IENvbnNlbnRMaXN0VW5rbm93bkVycm9yIHwgQ29uc2VudExpc3RDb25uZWN0aXZpdHlFcnJvciB8IHVuZGVmaW5lZFxuICA+KHVuZGVmaW5lZCk7XG5cbiAgcmVhZG9ubHkgY29uc2VudHM6IE9ic2VydmFibGU8Q29uc2VudEl0ZW1bXT4gPSB0aGlzLmdldENvbnNlbnRzTGlzdCgpLnBpcGUoXG4gICAgdGFwKCgpID0+IHRoaXMuZXJyb3IubmV4dCh1bmRlZmluZWQpKSxcbiAgICBjYXRjaEVycm9yKChlcnJvcjogQ29uc2VudExpc3RFcnJvcikgPT4ge1xuICAgICAgdGhpcy5lcnJvci5uZXh0KGVycm9yKTtcbiAgICAgIHJldHVybiBvZihbXSk7XG4gICAgfSksXG4gICAgdGFwKCgpID0+IHRoaXMubG9hZGluZy5uZXh0KGZhbHNlKSksXG4gICk7XG5cbiAgcHJpdmF0ZSBnZXRDb25zZW50c0xpc3QoKTogT2JzZXJ2YWJsZTxDb25zZW50SXRlbVtdPiB7XG4gICAgcmV0dXJuIHRoaXMuY29uc2VudEh0dHBTZXJ2aWNlLmdldENvbnNlbnRzKCdyZXNwb25zZScpLnBpcGUoXG4gICAgICBwbHVjazxIdHRwUmVzcG9uc2U8Q29uc2VudEl0ZW1bXT4sIENvbnNlbnRJdGVtW10+KCdib2R5JyksXG4gICAgICBjYXRjaEVycm9yPENvbnNlbnRJdGVtW10sIG5ldmVyPigoZXJyb3I6IEh0dHBFcnJvclJlc3BvbnNlKSA9PiB7XG4gICAgICAgIHRocm93IHBhcnNlRXJyb3IoZXJyb3IpO1xuICAgICAgfSksXG4gICAgKTtcbiAgfVxufVxuIl19