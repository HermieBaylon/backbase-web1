export class ConsentListAccessDenied {
    constructor(error) {
        this.error = error;
        this.kind = 'ConsentListAccessDenied';
    }
}
export class ConsentListBadRequest {
    constructor(error) {
        this.error = error;
        this.kind = 'ConsentListBadRequest';
    }
}
export class ConsentListUnknownError {
    constructor(error) {
        this.error = error;
        this.kind = 'ConsentListUnknownError';
    }
}
export class ConsentListConnectivityError {
    constructor(error) {
        this.error = error;
        this.kind = 'ConsentListConnectivityError';
    }
}
export const parseError = (error) => {
    if (error.error instanceof ErrorEvent) {
        return new ConsentListUnknownError(error);
    }
    else {
        switch (error.status) {
            case 0:
                return new ConsentListConnectivityError(error);
            case 400:
                return new ConsentListBadRequest(error);
            case 401:
                return new ConsentListAccessDenied(error);
            case 403:
                return new ConsentListAccessDenied(error);
            default:
                return new ConsentListUnknownError(error);
        }
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc2VudC1saXN0LWVycm9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vbGlicy9jb25zZW50LWxpc3Qtd2lkZ2V0LWFuZy9zcmMvY29uc2VudC1saXN0LWVycm9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sT0FBTyx1QkFBdUI7SUFFbEMsWUFBcUIsS0FBd0I7UUFBeEIsVUFBSyxHQUFMLEtBQUssQ0FBbUI7UUFEN0MsU0FBSSxHQUE4Qix5QkFBeUIsQ0FBQztJQUNaLENBQUM7Q0FDbEQ7QUFFRCxNQUFNLE9BQU8scUJBQXFCO0lBRWhDLFlBQXFCLEtBQXdCO1FBQXhCLFVBQUssR0FBTCxLQUFLLENBQW1CO1FBRDdDLFNBQUksR0FBNEIsdUJBQXVCLENBQUM7SUFDUixDQUFDO0NBQ2xEO0FBRUQsTUFBTSxPQUFPLHVCQUF1QjtJQUVsQyxZQUFxQixLQUF3QjtRQUF4QixVQUFLLEdBQUwsS0FBSyxDQUFtQjtRQUQ3QyxTQUFJLEdBQThCLHlCQUF5QixDQUFDO0lBQ1osQ0FBQztDQUNsRDtBQUVELE1BQU0sT0FBTyw0QkFBNEI7SUFFdkMsWUFBcUIsS0FBd0I7UUFBeEIsVUFBSyxHQUFMLEtBQUssQ0FBbUI7UUFEN0MsU0FBSSxHQUFtQyw4QkFBOEIsQ0FBQztJQUN0QixDQUFDO0NBQ2xEO0FBUUQsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFHLENBQUMsS0FBd0IsRUFBb0IsRUFBRTtJQUN2RSxJQUFJLEtBQUssQ0FBQyxLQUFLLFlBQVksVUFBVSxFQUFFO1FBQ3JDLE9BQU8sSUFBSSx1QkFBdUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUMzQztTQUFNO1FBQ0wsUUFBUSxLQUFLLENBQUMsTUFBTSxFQUFFO1lBQ3BCLEtBQUssQ0FBQztnQkFDSixPQUFPLElBQUksNEJBQTRCLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDakQsS0FBSyxHQUFHO2dCQUNOLE9BQU8sSUFBSSxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUMxQyxLQUFLLEdBQUc7Z0JBQ04sT0FBTyxJQUFJLHVCQUF1QixDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzVDLEtBQUssR0FBRztnQkFDTixPQUFPLElBQUksdUJBQXVCLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDNUM7Z0JBQ0UsT0FBTyxJQUFJLHVCQUF1QixDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQzdDO0tBQ0Y7QUFDSCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwRXJyb3JSZXNwb25zZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcblxuZXhwb3J0IGNsYXNzIENvbnNlbnRMaXN0QWNjZXNzRGVuaWVkIHtcbiAga2luZDogJ0NvbnNlbnRMaXN0QWNjZXNzRGVuaWVkJyA9ICdDb25zZW50TGlzdEFjY2Vzc0RlbmllZCc7XG4gIGNvbnN0cnVjdG9yKHJlYWRvbmx5IGVycm9yOiBIdHRwRXJyb3JSZXNwb25zZSkge31cbn1cblxuZXhwb3J0IGNsYXNzIENvbnNlbnRMaXN0QmFkUmVxdWVzdCB7XG4gIGtpbmQ6ICdDb25zZW50TGlzdEJhZFJlcXVlc3QnID0gJ0NvbnNlbnRMaXN0QmFkUmVxdWVzdCc7XG4gIGNvbnN0cnVjdG9yKHJlYWRvbmx5IGVycm9yOiBIdHRwRXJyb3JSZXNwb25zZSkge31cbn1cblxuZXhwb3J0IGNsYXNzIENvbnNlbnRMaXN0VW5rbm93bkVycm9yIHtcbiAga2luZDogJ0NvbnNlbnRMaXN0VW5rbm93bkVycm9yJyA9ICdDb25zZW50TGlzdFVua25vd25FcnJvcic7XG4gIGNvbnN0cnVjdG9yKHJlYWRvbmx5IGVycm9yOiBIdHRwRXJyb3JSZXNwb25zZSkge31cbn1cblxuZXhwb3J0IGNsYXNzIENvbnNlbnRMaXN0Q29ubmVjdGl2aXR5RXJyb3Ige1xuICBraW5kOiAnQ29uc2VudExpc3RDb25uZWN0aXZpdHlFcnJvcicgPSAnQ29uc2VudExpc3RDb25uZWN0aXZpdHlFcnJvcic7XG4gIGNvbnN0cnVjdG9yKHJlYWRvbmx5IGVycm9yOiBIdHRwRXJyb3JSZXNwb25zZSkge31cbn1cblxuZXhwb3J0IHR5cGUgQ29uc2VudExpc3RFcnJvciA9XG4gIHwgQ29uc2VudExpc3RBY2Nlc3NEZW5pZWRcbiAgfCBDb25zZW50TGlzdEJhZFJlcXVlc3RcbiAgfCBDb25zZW50TGlzdFVua25vd25FcnJvclxuICB8IENvbnNlbnRMaXN0Q29ubmVjdGl2aXR5RXJyb3I7XG5cbmV4cG9ydCBjb25zdCBwYXJzZUVycm9yID0gKGVycm9yOiBIdHRwRXJyb3JSZXNwb25zZSk6IENvbnNlbnRMaXN0RXJyb3IgPT4ge1xuICBpZiAoZXJyb3IuZXJyb3IgaW5zdGFuY2VvZiBFcnJvckV2ZW50KSB7XG4gICAgcmV0dXJuIG5ldyBDb25zZW50TGlzdFVua25vd25FcnJvcihlcnJvcik7XG4gIH0gZWxzZSB7XG4gICAgc3dpdGNoIChlcnJvci5zdGF0dXMpIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgICAgcmV0dXJuIG5ldyBDb25zZW50TGlzdENvbm5lY3Rpdml0eUVycm9yKGVycm9yKTtcbiAgICAgIGNhc2UgNDAwOlxuICAgICAgICByZXR1cm4gbmV3IENvbnNlbnRMaXN0QmFkUmVxdWVzdChlcnJvcik7XG4gICAgICBjYXNlIDQwMTpcbiAgICAgICAgcmV0dXJuIG5ldyBDb25zZW50TGlzdEFjY2Vzc0RlbmllZChlcnJvcik7XG4gICAgICBjYXNlIDQwMzpcbiAgICAgICAgcmV0dXJuIG5ldyBDb25zZW50TGlzdEFjY2Vzc0RlbmllZChlcnJvcik7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbmV3IENvbnNlbnRMaXN0VW5rbm93bkVycm9yKGVycm9yKTtcbiAgICB9XG4gIH1cbn07XG4iXX0=