import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { BackbaseCoreModule } from '@backbase/foundation-ang/core';
import { ConsentUiModule } from '@backbase/consent-ui';
import { BadgeModule } from '@backbase/ui-ang/badge';
import { EmptyStateModule } from '@backbase/ui-ang/empty-state';
import { LoadingIndicatorModule } from '@backbase/ui-ang/loading-indicator';
import { IconModule } from '@backbase/ui-ang/icon';
import { BbDatePipeModule } from '@backbase/ui-ang/date-pipe';
import { ConsentListWidgetComponent, ConsentListWidgetCustomizableDirective } from './consent-list-widget.component';
import { ConsentListComponent } from './consent-list/consent-list.component';
import { ConsentItemComponent, ConsentListItemCustomizableDirective } from './consent-item/consent-item.component';
import { ConsentListErrorComponent } from './consent-list-error/consent-list-error.component';
import { ConsentListService } from './consent-list-widget.service';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/foundation-ang/core";
const components = [ConsentListWidgetComponent, ConsentListComponent, ConsentItemComponent, ConsentListErrorComponent];
const directives = [ConsentListWidgetCustomizableDirective, ConsentListItemCustomizableDirective];
const uiModules = [
    ConsentUiModule,
    BadgeModule,
    EmptyStateModule,
    LoadingIndicatorModule,
    IconModule,
    BbDatePipeModule,
];
export class ConsentListWidgetModule {
}
ConsentListWidgetModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentListWidgetModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ConsentListWidgetModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentListWidgetModule, declarations: [ConsentListWidgetComponent, ConsentListComponent, ConsentItemComponent, ConsentListErrorComponent, ConsentListWidgetCustomizableDirective, ConsentListItemCustomizableDirective], imports: [CommonModule, ConsentUiModule,
        BadgeModule,
        EmptyStateModule,
        LoadingIndicatorModule,
        IconModule,
        BbDatePipeModule, i1.BackbaseCoreModule], exports: [ConsentListWidgetComponent, ConsentListComponent, ConsentItemComponent, ConsentListErrorComponent, ConsentListWidgetCustomizableDirective, ConsentListItemCustomizableDirective, ConsentUiModule,
        BadgeModule,
        EmptyStateModule,
        LoadingIndicatorModule,
        IconModule,
        BbDatePipeModule] });
ConsentListWidgetModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentListWidgetModule, providers: [ConsentListService], imports: [[
            CommonModule,
            ...uiModules,
            BackbaseCoreModule.withConfig({
                classMap: { ConsentListWidgetComponent },
            }),
        ], ConsentUiModule,
        BadgeModule,
        EmptyStateModule,
        LoadingIndicatorModule,
        IconModule,
        BbDatePipeModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentListWidgetModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        ...uiModules,
                        BackbaseCoreModule.withConfig({
                            classMap: { ConsentListWidgetComponent },
                        }),
                    ],
                    exports: [...components, ...directives, ...uiModules],
                    providers: [ConsentListService],
                    declarations: [...components, ...directives],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc2VudC1saXN0LXdpZGdldC5tb2R1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9saWJzL2NvbnNlbnQtbGlzdC13aWRnZXQtYW5nL3NyYy9jb25zZW50LWxpc3Qtd2lkZ2V0Lm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUUvQyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUNuRSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFdkQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3JELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQ2hFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQzVFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsc0NBQXNDLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUNySCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUM3RSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsb0NBQW9DLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUNuSCxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxtREFBbUQsQ0FBQztBQUM5RixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQzs7O0FBRW5FLE1BQU0sVUFBVSxHQUFHLENBQUMsMEJBQTBCLEVBQUUsb0JBQW9CLEVBQUUsb0JBQW9CLEVBQUUseUJBQXlCLENBQUMsQ0FBQztBQUV2SCxNQUFNLFVBQVUsR0FBRyxDQUFDLHNDQUFzQyxFQUFFLG9DQUFvQyxDQUFDLENBQUM7QUFFbEcsTUFBTSxTQUFTLEdBQUc7SUFDaEIsZUFBZTtJQUNmLFdBQVc7SUFDWCxnQkFBZ0I7SUFDaEIsc0JBQXNCO0lBQ3RCLFVBQVU7SUFDVixnQkFBZ0I7Q0FDakIsQ0FBQztBQWNGLE1BQU0sT0FBTyx1QkFBdUI7O3FIQUF2Qix1QkFBdUI7c0hBQXZCLHVCQUF1QixpQkF6QmhCLDBCQUEwQixFQUFFLG9CQUFvQixFQUFFLG9CQUFvQixFQUFFLHlCQUF5QixFQUVqRyxzQ0FBc0MsRUFBRSxvQ0FBb0MsYUFhNUYsWUFBWSxFQVZkLGVBQWU7UUFDZixXQUFXO1FBQ1gsZ0JBQWdCO1FBQ2hCLHNCQUFzQjtRQUN0QixVQUFVO1FBQ1YsZ0JBQWdCLG9DQVZFLDBCQUEwQixFQUFFLG9CQUFvQixFQUFFLG9CQUFvQixFQUFFLHlCQUF5QixFQUVqRyxzQ0FBc0MsRUFBRSxvQ0FBb0MsRUFHOUYsZUFBZTtRQUNmLFdBQVc7UUFDWCxnQkFBZ0I7UUFDaEIsc0JBQXNCO1FBQ3RCLFVBQVU7UUFDVixnQkFBZ0I7c0hBZUwsdUJBQXVCLGFBSHZCLENBQUMsa0JBQWtCLENBQUMsWUFSdEI7WUFDUCxZQUFZO1lBQ1osR0FBRyxTQUFTO1lBQ1osa0JBQWtCLENBQUMsVUFBVSxDQUFDO2dCQUM1QixRQUFRLEVBQUUsRUFBRSwwQkFBMEIsRUFBRTthQUN6QyxDQUFDO1NBQ0gsRUFmRCxlQUFlO1FBQ2YsV0FBVztRQUNYLGdCQUFnQjtRQUNoQixzQkFBc0I7UUFDdEIsVUFBVTtRQUNWLGdCQUFnQjs0RkFlTCx1QkFBdUI7a0JBWm5DLFFBQVE7bUJBQUM7b0JBQ1IsT0FBTyxFQUFFO3dCQUNQLFlBQVk7d0JBQ1osR0FBRyxTQUFTO3dCQUNaLGtCQUFrQixDQUFDLFVBQVUsQ0FBQzs0QkFDNUIsUUFBUSxFQUFFLEVBQUUsMEJBQTBCLEVBQUU7eUJBQ3pDLENBQUM7cUJBQ0g7b0JBQ0QsT0FBTyxFQUFFLENBQUMsR0FBRyxVQUFVLEVBQUUsR0FBRyxVQUFVLEVBQUUsR0FBRyxTQUFTLENBQUM7b0JBQ3JELFNBQVMsRUFBRSxDQUFDLGtCQUFrQixDQUFDO29CQUMvQixZQUFZLEVBQUUsQ0FBQyxHQUFHLFVBQVUsRUFBRSxHQUFHLFVBQVUsQ0FBQztpQkFDN0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuaW1wb3J0IHsgQmFja2Jhc2VDb3JlTW9kdWxlIH0gZnJvbSAnQGJhY2tiYXNlL2ZvdW5kYXRpb24tYW5nL2NvcmUnO1xuaW1wb3J0IHsgQ29uc2VudFVpTW9kdWxlIH0gZnJvbSAnQGJhY2tiYXNlL2NvbnNlbnQtdWknO1xuXG5pbXBvcnQgeyBCYWRnZU1vZHVsZSB9IGZyb20gJ0BiYWNrYmFzZS91aS1hbmcvYmFkZ2UnO1xuaW1wb3J0IHsgRW1wdHlTdGF0ZU1vZHVsZSB9IGZyb20gJ0BiYWNrYmFzZS91aS1hbmcvZW1wdHktc3RhdGUnO1xuaW1wb3J0IHsgTG9hZGluZ0luZGljYXRvck1vZHVsZSB9IGZyb20gJ0BiYWNrYmFzZS91aS1hbmcvbG9hZGluZy1pbmRpY2F0b3InO1xuaW1wb3J0IHsgSWNvbk1vZHVsZSB9IGZyb20gJ0BiYWNrYmFzZS91aS1hbmcvaWNvbic7XG5pbXBvcnQgeyBCYkRhdGVQaXBlTW9kdWxlIH0gZnJvbSAnQGJhY2tiYXNlL3VpLWFuZy9kYXRlLXBpcGUnO1xuaW1wb3J0IHsgQ29uc2VudExpc3RXaWRnZXRDb21wb25lbnQsIENvbnNlbnRMaXN0V2lkZ2V0Q3VzdG9taXphYmxlRGlyZWN0aXZlIH0gZnJvbSAnLi9jb25zZW50LWxpc3Qtd2lkZ2V0LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBDb25zZW50TGlzdENvbXBvbmVudCB9IGZyb20gJy4vY29uc2VudC1saXN0L2NvbnNlbnQtbGlzdC5jb21wb25lbnQnO1xuaW1wb3J0IHsgQ29uc2VudEl0ZW1Db21wb25lbnQsIENvbnNlbnRMaXN0SXRlbUN1c3RvbWl6YWJsZURpcmVjdGl2ZSB9IGZyb20gJy4vY29uc2VudC1pdGVtL2NvbnNlbnQtaXRlbS5jb21wb25lbnQnO1xuaW1wb3J0IHsgQ29uc2VudExpc3RFcnJvckNvbXBvbmVudCB9IGZyb20gJy4vY29uc2VudC1saXN0LWVycm9yL2NvbnNlbnQtbGlzdC1lcnJvci5jb21wb25lbnQnO1xuaW1wb3J0IHsgQ29uc2VudExpc3RTZXJ2aWNlIH0gZnJvbSAnLi9jb25zZW50LWxpc3Qtd2lkZ2V0LnNlcnZpY2UnO1xuXG5jb25zdCBjb21wb25lbnRzID0gW0NvbnNlbnRMaXN0V2lkZ2V0Q29tcG9uZW50LCBDb25zZW50TGlzdENvbXBvbmVudCwgQ29uc2VudEl0ZW1Db21wb25lbnQsIENvbnNlbnRMaXN0RXJyb3JDb21wb25lbnRdO1xuXG5jb25zdCBkaXJlY3RpdmVzID0gW0NvbnNlbnRMaXN0V2lkZ2V0Q3VzdG9taXphYmxlRGlyZWN0aXZlLCBDb25zZW50TGlzdEl0ZW1DdXN0b21pemFibGVEaXJlY3RpdmVdO1xuXG5jb25zdCB1aU1vZHVsZXMgPSBbXG4gIENvbnNlbnRVaU1vZHVsZSxcbiAgQmFkZ2VNb2R1bGUsXG4gIEVtcHR5U3RhdGVNb2R1bGUsXG4gIExvYWRpbmdJbmRpY2F0b3JNb2R1bGUsXG4gIEljb25Nb2R1bGUsXG4gIEJiRGF0ZVBpcGVNb2R1bGUsXG5dO1xuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbXG4gICAgQ29tbW9uTW9kdWxlLFxuICAgIC4uLnVpTW9kdWxlcyxcbiAgICBCYWNrYmFzZUNvcmVNb2R1bGUud2l0aENvbmZpZyh7XG4gICAgICBjbGFzc01hcDogeyBDb25zZW50TGlzdFdpZGdldENvbXBvbmVudCB9LFxuICAgIH0pLFxuICBdLFxuICBleHBvcnRzOiBbLi4uY29tcG9uZW50cywgLi4uZGlyZWN0aXZlcywgLi4udWlNb2R1bGVzXSxcbiAgcHJvdmlkZXJzOiBbQ29uc2VudExpc3RTZXJ2aWNlXSxcbiAgZGVjbGFyYXRpb25zOiBbLi4uY29tcG9uZW50cywgLi4uZGlyZWN0aXZlc10sXG59KVxuZXhwb3J0IGNsYXNzIENvbnNlbnRMaXN0V2lkZ2V0TW9kdWxlIHt9XG4iXX0=