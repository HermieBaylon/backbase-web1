import { Component, Directive, Output, EventEmitter } from '@angular/core';
import { BbTemplate } from '@backbase/foundation-ang/core';
import * as i0 from "@angular/core";
import * as i1 from "./consent-list-widget.service";
import * as i2 from "./consent-list/consent-list.component";
import * as i3 from "@backbase/ui-ang/loading-indicator";
import * as i4 from "./consent-list-error/consent-list-error.component";
import * as i5 from "@backbase/ui-ang/empty-state";
import * as i6 from "@angular/common";
export class ConsentListWidgetComponent {
    constructor(service) {
        this.service = service;
        /**
         * Component context
         */
        this.hostRef = this;
        /**
         * Emitter that is fired when selecting consent
         */
        this.consentId = new EventEmitter();
        /**
         * Stream of loading spinner visibility flag
         */
        this.loading = this.service.loading;
        /**
         * Stream of Consent list errors
         */
        this.error = this.service.error;
        /**
         * Stream of consent items
         */
        this.consents = this.service.consents;
    }
    /**
     * Select consent click event handler.
     * @param consentId - consent ID
     */
    selectConsent(consentId) {
        this.consentId.emit(consentId);
    }
}
ConsentListWidgetComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentListWidgetComponent, deps: [{ token: i1.ConsentListService }], target: i0.ɵɵFactoryTarget.Component });
ConsentListWidgetComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ConsentListWidgetComponent, selector: "bb-consent-list-widget", outputs: { consentId: "consentId" }, ngImport: i0, template: "<ng-container bbConsentListWidgetCustomizable [bbHostRef]=\"hostRef\" [bbTemplateContext]=\"consents | async\">\n</ng-container>\n\n<ng-template bbConsentListWidgetCustomizable let-hostRef let-consents=\"context\">\n  <ng-container *ngIf=\"consents; else loadingTemplate\">\n    <ng-container *ngIf=\"!(hostRef.loading | async) as loading; else loadingTemplate\">\n      <ng-container *ngIf=\"!(hostRef.error | async); else errorTemplate\">\n        <ng-container *ngIf=\"consents?.length > 0; else emptyTemplate\">\n          <bb-consent-list-component [consentsList]=\"consents\" (selectConsent)=\"hostRef.selectConsent($event)\">\n          </bb-consent-list-component>\n        </ng-container>\n      </ng-container>\n    </ng-container>\n  </ng-container>\n\n  <ng-template #loadingTemplate>\n    <div class=\"bb-state-container\">\n      <bb-loading-indicator-ui></bb-loading-indicator-ui>\n    </div>\n  </ng-template>\n\n  <ng-template #errorTemplate>\n    <div class=\"bb-state-container\">\n      <bb-consent-list-error [errorKind]=\"$any(hostRef.error | async)?.kind\"> </bb-consent-list-error>\n    </div>\n  </ng-template>\n\n  <ng-template #emptyTemplate>\n    <div class=\"bb-state-container\">\n      <bb-empty-state-ui\n        i18n-title=\"No Consents|No Consents@@consent-list-widget.list-empty.title\"\n        title=\"No Consents\"\n        i18n-subtitle=\"\n          You haven't given any consents|You haven't given any consents to third\n          parties@@consent-list-widget.list-empty.subtitle\"\n        subtitle=\"You haven't given any consents to third parties\"\n        iconModifier=\"assignment-turned-in\">\n      </bb-empty-state-ui>\n    </div>\n  </ng-template>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i2.ConsentListComponent; }), selector: "bb-consent-list-component", inputs: ["consentsList"], outputs: ["selectConsent"] }, { type: i0.forwardRef(function () { return i3.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i0.forwardRef(function () { return i4.ConsentListErrorComponent; }), selector: "bb-consent-list-error", inputs: ["errorKind"] }, { type: i0.forwardRef(function () { return i5.EmptyStateComponent; }), selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i0.forwardRef(function () { return ConsentListWidgetCustomizableDirective; }), selector: "[bbConsentListWidgetCustomizable]" }, { type: i0.forwardRef(function () { return i6.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i0.forwardRef(function () { return i6.AsyncPipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentListWidgetComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-consent-list-widget',
                    templateUrl: './consent-list-widget.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.ConsentListService }]; }, propDecorators: { consentId: [{
                type: Output
            }] } });
export class ConsentListWidgetCustomizableDirective extends BbTemplate {
}
ConsentListWidgetCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentListWidgetCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ConsentListWidgetCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: ConsentListWidgetCustomizableDirective, selector: "[bbConsentListWidgetCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentListWidgetCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbConsentListWidgetCustomizable]',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc2VudC1saXN0LXdpZGdldC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9saWJzL2NvbnNlbnQtbGlzdC13aWRnZXQtYW5nL3NyYy9jb25zZW50LWxpc3Qtd2lkZ2V0LmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uL2xpYnMvY29uc2VudC1saXN0LXdpZGdldC1hbmcvc3JjL2NvbnNlbnQtbGlzdC13aWRnZXQuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzRSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sK0JBQStCLENBQUM7Ozs7Ozs7O0FBZTNELE1BQU0sT0FBTywwQkFBMEI7SUErQnJDLFlBQTZCLE9BQTJCO1FBQTNCLFlBQU8sR0FBUCxPQUFPLENBQW9CO1FBOUJ4RDs7V0FFRztRQUNNLFlBQU8sR0FBK0IsSUFBSSxDQUFDO1FBQ3BEOztXQUVHO1FBQ08sY0FBUyxHQUF5QixJQUFJLFlBQVksRUFBVSxDQUFDO1FBQ3ZFOztXQUVHO1FBQ00sWUFBTyxHQUF3QixJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQztRQUM3RDs7V0FFRztRQUNNLFVBQUssR0FFVixJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQztRQUN2Qjs7V0FFRztRQUNNLGFBQVEsR0FBMEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUM7SUFTdEIsQ0FBQztJQVI1RDs7O09BR0c7SUFDSCxhQUFhLENBQUMsU0FBaUI7UUFDN0IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDakMsQ0FBQzs7d0hBN0JVLDBCQUEwQjs0R0FBMUIsMEJBQTBCLG1HQ2hCdkMsc3JEQXlDQSwrdkJEWWEsc0NBQXNDOzRGQXJDdEMsMEJBQTBCO2tCQUp0QyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSx3QkFBd0I7b0JBQ2xDLFdBQVcsRUFBRSxzQ0FBc0M7aUJBQ3BEO3lHQVNXLFNBQVM7c0JBQWxCLE1BQU07O0FBNkJULE1BQU0sT0FBTyxzQ0FBdUMsU0FBUSxVQUczRDs7b0lBSFksc0NBQXNDO3dIQUF0QyxzQ0FBc0M7NEZBQXRDLHNDQUFzQztrQkFIbEQsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsbUNBQW1DO2lCQUM5QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRGlyZWN0aXZlLCBPdXRwdXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQmJUZW1wbGF0ZSB9IGZyb20gJ0BiYWNrYmFzZS9mb3VuZGF0aW9uLWFuZy9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHsgQ29uc2VudExpc3RTZXJ2aWNlLCBDb25zZW50SXRlbSB9IGZyb20gJy4vY29uc2VudC1saXN0LXdpZGdldC5zZXJ2aWNlJztcbmltcG9ydCB7XG4gIENvbnNlbnRMaXN0QWNjZXNzRGVuaWVkLFxuICBDb25zZW50TGlzdEJhZFJlcXVlc3QsXG4gIENvbnNlbnRMaXN0Q29ubmVjdGl2aXR5RXJyb3IsXG4gIENvbnNlbnRMaXN0VW5rbm93bkVycm9yLFxufSBmcm9tICcuL2NvbnNlbnQtbGlzdC1lcnJvcic7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2JiLWNvbnNlbnQtbGlzdC13aWRnZXQnLFxuICB0ZW1wbGF0ZVVybDogJy4vY29uc2VudC1saXN0LXdpZGdldC5jb21wb25lbnQuaHRtbCcsXG59KVxuZXhwb3J0IGNsYXNzIENvbnNlbnRMaXN0V2lkZ2V0Q29tcG9uZW50IHtcbiAgLyoqXG4gICAqIENvbXBvbmVudCBjb250ZXh0XG4gICAqL1xuICByZWFkb25seSBob3N0UmVmOiBDb25zZW50TGlzdFdpZGdldENvbXBvbmVudCA9IHRoaXM7XG4gIC8qKlxuICAgKiBFbWl0dGVyIHRoYXQgaXMgZmlyZWQgd2hlbiBzZWxlY3RpbmcgY29uc2VudFxuICAgKi9cbiAgQE91dHB1dCgpIGNvbnNlbnRJZDogRXZlbnRFbWl0dGVyPHN0cmluZz4gPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZz4oKTtcbiAgLyoqXG4gICAqIFN0cmVhbSBvZiBsb2FkaW5nIHNwaW5uZXIgdmlzaWJpbGl0eSBmbGFnXG4gICAqL1xuICByZWFkb25seSBsb2FkaW5nOiBPYnNlcnZhYmxlPGJvb2xlYW4+ID0gdGhpcy5zZXJ2aWNlLmxvYWRpbmc7XG4gIC8qKlxuICAgKiBTdHJlYW0gb2YgQ29uc2VudCBsaXN0IGVycm9yc1xuICAgKi9cbiAgcmVhZG9ubHkgZXJyb3I6IE9ic2VydmFibGU8XG4gICAgQ29uc2VudExpc3RBY2Nlc3NEZW5pZWQgfCBDb25zZW50TGlzdEJhZFJlcXVlc3QgfCBDb25zZW50TGlzdFVua25vd25FcnJvciB8IENvbnNlbnRMaXN0Q29ubmVjdGl2aXR5RXJyb3IgfCB1bmRlZmluZWRcbiAgPiA9IHRoaXMuc2VydmljZS5lcnJvcjtcbiAgLyoqXG4gICAqIFN0cmVhbSBvZiBjb25zZW50IGl0ZW1zXG4gICAqL1xuICByZWFkb25seSBjb25zZW50czogT2JzZXJ2YWJsZTxDb25zZW50SXRlbVtdIHwgdW5kZWZpbmVkPiA9IHRoaXMuc2VydmljZS5jb25zZW50cztcbiAgLyoqXG4gICAqIFNlbGVjdCBjb25zZW50IGNsaWNrIGV2ZW50IGhhbmRsZXIuXG4gICAqIEBwYXJhbSBjb25zZW50SWQgLSBjb25zZW50IElEXG4gICAqL1xuICBzZWxlY3RDb25zZW50KGNvbnNlbnRJZDogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy5jb25zZW50SWQuZW1pdChjb25zZW50SWQpO1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBzZXJ2aWNlOiBDb25zZW50TGlzdFNlcnZpY2UpIHt9XG59XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tiYkNvbnNlbnRMaXN0V2lkZ2V0Q3VzdG9taXphYmxlXScsXG59KVxuZXhwb3J0IGNsYXNzIENvbnNlbnRMaXN0V2lkZ2V0Q3VzdG9taXphYmxlRGlyZWN0aXZlIGV4dGVuZHMgQmJUZW1wbGF0ZTxcbiAgQ29uc2VudExpc3RXaWRnZXRDb21wb25lbnQsXG4gIENvbnNlbnRJdGVtW10gfCBudWxsXG4+IHt9XG4iLCI8bmctY29udGFpbmVyIGJiQ29uc2VudExpc3RXaWRnZXRDdXN0b21pemFibGUgW2JiSG9zdFJlZl09XCJob3N0UmVmXCIgW2JiVGVtcGxhdGVDb250ZXh0XT1cImNvbnNlbnRzIHwgYXN5bmNcIj5cbjwvbmctY29udGFpbmVyPlxuXG48bmctdGVtcGxhdGUgYmJDb25zZW50TGlzdFdpZGdldEN1c3RvbWl6YWJsZSBsZXQtaG9zdFJlZiBsZXQtY29uc2VudHM9XCJjb250ZXh0XCI+XG4gIDxuZy1jb250YWluZXIgKm5nSWY9XCJjb25zZW50czsgZWxzZSBsb2FkaW5nVGVtcGxhdGVcIj5cbiAgICA8bmctY29udGFpbmVyICpuZ0lmPVwiIShob3N0UmVmLmxvYWRpbmcgfCBhc3luYykgYXMgbG9hZGluZzsgZWxzZSBsb2FkaW5nVGVtcGxhdGVcIj5cbiAgICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCIhKGhvc3RSZWYuZXJyb3IgfCBhc3luYyk7IGVsc2UgZXJyb3JUZW1wbGF0ZVwiPlxuICAgICAgICA8bmctY29udGFpbmVyICpuZ0lmPVwiY29uc2VudHM/Lmxlbmd0aCA+IDA7IGVsc2UgZW1wdHlUZW1wbGF0ZVwiPlxuICAgICAgICAgIDxiYi1jb25zZW50LWxpc3QtY29tcG9uZW50IFtjb25zZW50c0xpc3RdPVwiY29uc2VudHNcIiAoc2VsZWN0Q29uc2VudCk9XCJob3N0UmVmLnNlbGVjdENvbnNlbnQoJGV2ZW50KVwiPlxuICAgICAgICAgIDwvYmItY29uc2VudC1saXN0LWNvbXBvbmVudD5cbiAgICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICA8L25nLWNvbnRhaW5lcj5cbiAgPC9uZy1jb250YWluZXI+XG5cbiAgPG5nLXRlbXBsYXRlICNsb2FkaW5nVGVtcGxhdGU+XG4gICAgPGRpdiBjbGFzcz1cImJiLXN0YXRlLWNvbnRhaW5lclwiPlxuICAgICAgPGJiLWxvYWRpbmctaW5kaWNhdG9yLXVpPjwvYmItbG9hZGluZy1pbmRpY2F0b3ItdWk+XG4gICAgPC9kaXY+XG4gIDwvbmctdGVtcGxhdGU+XG5cbiAgPG5nLXRlbXBsYXRlICNlcnJvclRlbXBsYXRlPlxuICAgIDxkaXYgY2xhc3M9XCJiYi1zdGF0ZS1jb250YWluZXJcIj5cbiAgICAgIDxiYi1jb25zZW50LWxpc3QtZXJyb3IgW2Vycm9yS2luZF09XCIkYW55KGhvc3RSZWYuZXJyb3IgfCBhc3luYyk/LmtpbmRcIj4gPC9iYi1jb25zZW50LWxpc3QtZXJyb3I+XG4gICAgPC9kaXY+XG4gIDwvbmctdGVtcGxhdGU+XG5cbiAgPG5nLXRlbXBsYXRlICNlbXB0eVRlbXBsYXRlPlxuICAgIDxkaXYgY2xhc3M9XCJiYi1zdGF0ZS1jb250YWluZXJcIj5cbiAgICAgIDxiYi1lbXB0eS1zdGF0ZS11aVxuICAgICAgICBpMThuLXRpdGxlPVwiTm8gQ29uc2VudHN8Tm8gQ29uc2VudHNAQGNvbnNlbnQtbGlzdC13aWRnZXQubGlzdC1lbXB0eS50aXRsZVwiXG4gICAgICAgIHRpdGxlPVwiTm8gQ29uc2VudHNcIlxuICAgICAgICBpMThuLXN1YnRpdGxlPVwiXG4gICAgICAgICAgWW91IGhhdmVuJ3QgZ2l2ZW4gYW55IGNvbnNlbnRzfFlvdSBoYXZlbid0IGdpdmVuIGFueSBjb25zZW50cyB0byB0aGlyZFxuICAgICAgICAgIHBhcnRpZXNAQGNvbnNlbnQtbGlzdC13aWRnZXQubGlzdC1lbXB0eS5zdWJ0aXRsZVwiXG4gICAgICAgIHN1YnRpdGxlPVwiWW91IGhhdmVuJ3QgZ2l2ZW4gYW55IGNvbnNlbnRzIHRvIHRoaXJkIHBhcnRpZXNcIlxuICAgICAgICBpY29uTW9kaWZpZXI9XCJhc3NpZ25tZW50LXR1cm5lZC1pblwiPlxuICAgICAgPC9iYi1lbXB0eS1zdGF0ZS11aT5cbiAgICA8L2Rpdj5cbiAgPC9uZy10ZW1wbGF0ZT5cbjwvbmctdGVtcGxhdGU+XG4iXX0=