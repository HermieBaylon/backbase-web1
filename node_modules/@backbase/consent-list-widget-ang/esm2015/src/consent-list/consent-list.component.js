import { Component, Input, Output, EventEmitter } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "../consent-item/consent-item.component";
import * as i2 from "@angular/common";
export class ConsentListComponent {
    constructor() {
        /**
         * List of consents
         */
        this.consentsList = [];
        /**
         * Emitter that fires when you select consent
         */
        this.selectConsent = new EventEmitter();
    }
    onConsentSelect(consentId) {
        this.selectConsent.emit(consentId);
    }
}
ConsentListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentListComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ConsentListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ConsentListComponent, selector: "bb-consent-list-component", inputs: { consentsList: "consentsList" }, outputs: { selectConsent: "selectConsent" }, ngImport: i0, template: "<div class=\"list-group list-group-flush bb-consent-list\">\n  <div\n    *ngFor=\"let consent of consentsList; let i = index\"\n    role=\"button\"\n    tabindex=\"0\"\n    [attr.data-role]=\"'consent-list-item-' + consent.tpp.name\"\n    class=\"list-group-item list-group-item-action bb-consent-list__item\"\n    (keyup.enter)=\"onConsentSelect(consent.id)\"\n    (click)=\"onConsentSelect(consent.id)\">\n    <bb-consent-item-component [consent]=\"consent\"> </bb-consent-item-component>\n  </div>\n</div>\n", components: [{ type: i1.ConsentItemComponent, selector: "bb-consent-item-component", inputs: ["consent"] }], directives: [{ type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentListComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-consent-list-component',
                    templateUrl: './consent-list.component.html',
                }]
        }], propDecorators: { consentsList: [{
                type: Input
            }], selectConsent: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc2VudC1saXN0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvY29uc2VudC1saXN0LXdpZGdldC1hbmcvc3JjL2NvbnNlbnQtbGlzdC9jb25zZW50LWxpc3QuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9jb25zZW50LWxpc3Qtd2lkZ2V0LWFuZy9zcmMvY29uc2VudC1saXN0L2NvbnNlbnQtbGlzdC5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7O0FBUXZFLE1BQU0sT0FBTyxvQkFBb0I7SUFKakM7UUFLRTs7V0FFRztRQUNNLGlCQUFZLEdBQWtCLEVBQUUsQ0FBQztRQUMxQzs7V0FFRztRQUNPLGtCQUFhLEdBQUcsSUFBSSxZQUFZLEVBQVUsQ0FBQztLQUt0RDtJQUhDLGVBQWUsQ0FBQyxTQUFpQjtRQUMvQixJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNyQyxDQUFDOztrSEFaVSxvQkFBb0I7c0dBQXBCLG9CQUFvQix3SkNSakMsZ2dCQVlBOzRGREphLG9CQUFvQjtrQkFKaEMsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsMkJBQTJCO29CQUNyQyxXQUFXLEVBQUUsK0JBQStCO2lCQUM3Qzs4QkFLVSxZQUFZO3NCQUFwQixLQUFLO2dCQUlJLGFBQWE7c0JBQXRCLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBDb25zZW50SXRlbSB9IGZyb20gJy4uL2NvbnNlbnQtbGlzdC13aWRnZXQuc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2JiLWNvbnNlbnQtbGlzdC1jb21wb25lbnQnLFxuICB0ZW1wbGF0ZVVybDogJy4vY29uc2VudC1saXN0LmNvbXBvbmVudC5odG1sJyxcbn0pXG5leHBvcnQgY2xhc3MgQ29uc2VudExpc3RDb21wb25lbnQge1xuICAvKipcbiAgICogTGlzdCBvZiBjb25zZW50c1xuICAgKi9cbiAgQElucHV0KCkgY29uc2VudHNMaXN0OiBDb25zZW50SXRlbVtdID0gW107XG4gIC8qKlxuICAgKiBFbWl0dGVyIHRoYXQgZmlyZXMgd2hlbiB5b3Ugc2VsZWN0IGNvbnNlbnRcbiAgICovXG4gIEBPdXRwdXQoKSBzZWxlY3RDb25zZW50ID0gbmV3IEV2ZW50RW1pdHRlcjxzdHJpbmc+KCk7XG5cbiAgb25Db25zZW50U2VsZWN0KGNvbnNlbnRJZDogc3RyaW5nKSB7XG4gICAgdGhpcy5zZWxlY3RDb25zZW50LmVtaXQoY29uc2VudElkKTtcbiAgfVxufVxuIiwiPGRpdiBjbGFzcz1cImxpc3QtZ3JvdXAgbGlzdC1ncm91cC1mbHVzaCBiYi1jb25zZW50LWxpc3RcIj5cbiAgPGRpdlxuICAgICpuZ0Zvcj1cImxldCBjb25zZW50IG9mIGNvbnNlbnRzTGlzdDsgbGV0IGkgPSBpbmRleFwiXG4gICAgcm9sZT1cImJ1dHRvblwiXG4gICAgdGFiaW5kZXg9XCIwXCJcbiAgICBbYXR0ci5kYXRhLXJvbGVdPVwiJ2NvbnNlbnQtbGlzdC1pdGVtLScgKyBjb25zZW50LnRwcC5uYW1lXCJcbiAgICBjbGFzcz1cImxpc3QtZ3JvdXAtaXRlbSBsaXN0LWdyb3VwLWl0ZW0tYWN0aW9uIGJiLWNvbnNlbnQtbGlzdF9faXRlbVwiXG4gICAgKGtleXVwLmVudGVyKT1cIm9uQ29uc2VudFNlbGVjdChjb25zZW50LmlkKVwiXG4gICAgKGNsaWNrKT1cIm9uQ29uc2VudFNlbGVjdChjb25zZW50LmlkKVwiPlxuICAgIDxiYi1jb25zZW50LWl0ZW0tY29tcG9uZW50IFtjb25zZW50XT1cImNvbnNlbnRcIj4gPC9iYi1jb25zZW50LWl0ZW0tY29tcG9uZW50PlxuICA8L2Rpdj5cbjwvZGl2PlxuIl19