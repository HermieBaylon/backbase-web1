import { EventEmitter } from '@angular/core';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { Observable } from 'rxjs';
import { ConsentListService, ConsentItem } from './consent-list-widget.service';
import { ConsentListAccessDenied, ConsentListBadRequest, ConsentListConnectivityError, ConsentListUnknownError } from './consent-list-error';
import * as i0 from "@angular/core";
export declare class ConsentListWidgetComponent {
    private readonly service;
    /**
     * Component context
     */
    readonly hostRef: ConsentListWidgetComponent;
    /**
     * Emitter that is fired when selecting consent
     */
    consentId: EventEmitter<string>;
    /**
     * Stream of loading spinner visibility flag
     */
    readonly loading: Observable<boolean>;
    /**
     * Stream of Consent list errors
     */
    readonly error: Observable<ConsentListAccessDenied | ConsentListBadRequest | ConsentListUnknownError | ConsentListConnectivityError | undefined>;
    /**
     * Stream of consent items
     */
    readonly consents: Observable<ConsentItem[] | undefined>;
    /**
     * Select consent click event handler.
     * @param consentId - consent ID
     */
    selectConsent(consentId: string): void;
    constructor(service: ConsentListService);
    static ɵfac: i0.ɵɵFactoryDeclaration<ConsentListWidgetComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ConsentListWidgetComponent, "bb-consent-list-widget", never, {}, { "consentId": "consentId"; }, never, never>;
}
export declare class ConsentListWidgetCustomizableDirective extends BbTemplate<ConsentListWidgetComponent, ConsentItem[] | null> {
    static ɵfac: i0.ɵɵFactoryDeclaration<ConsentListWidgetCustomizableDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<ConsentListWidgetCustomizableDirective, "[bbConsentListWidgetCustomizable]", never, {}, {}, never>;
}
