import { ActivatedRoute } from '@angular/router';
import { Observable } from 'rxjs';
import { TransactionsFilterOptions } from '../model/transactions-filter-options.model';
import { TransactionsSortOptions } from '../model/transactions-sort-options.model';
import { WidgetPropertiesService } from '../services/widget-properties.service';
import { EventEmitter } from '@angular/core';
import { AvailableFiltersConfig } from '../model/available-filters.model';
import { Transaction } from '../model/transaction.model';
import { TransactionsList } from '../model/transactions-list.model';
import { EndpointType } from '../services/widget-properties.service';
import * as i0 from "@angular/core";
export declare class BaseTransactionsWidget {
    protected readonly route: ActivatedRoute;
    protected readonly widgetProperties: WidgetPropertiesService;
    /**
     * API key needed for the google maps to work.
     */
    googleAPIKey: string | undefined;
    set initialFilterOptionsValue(value: string);
    set initialSortOptionsValue(value: string);
    pageSize: number | undefined;
    maxNavPages: number | undefined;
    paginationType: string | undefined;
    showControls: boolean | undefined;
    showChangeCategory: boolean | undefined;
    showPendingTransactionsOnTop: boolean | undefined;
    showCheckImage: boolean | undefined;
    showManageNotes: boolean | undefined;
    getOrPostEndpoints: EndpointType | undefined;
    enableDisputeAndInquiry: boolean;
    disputeByBillingStatus: boolean | undefined;
    disputeEligibilityDays: number | undefined;
    disputeTransactionTypes: string | undefined;
    inquireTopicId: string | undefined;
    disputeTopicId: string | undefined;
    availableFiltersConfig: AvailableFiltersConfig;
    transactionSelected: EventEmitter<Transaction>;
    transactionsLoaded: EventEmitter<TransactionsList | null>;
    private readonly initialFilterOptionsSubject;
    private readonly initialSortOptionsSubject;
    readonly selectedAccount: Observable<string[] | undefined>;
    private getRouteParam;
    get initialFilterOptions(): Observable<TransactionsFilterOptions>;
    get initialSortOptions(): Observable<TransactionsSortOptions | undefined>;
    constructor(route: ActivatedRoute, widgetProperties: WidgetPropertiesService);
    onDetailOpen(transaction: Transaction): void;
    onTransactionsLoaded(transactionsList: TransactionsList | null): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<BaseTransactionsWidget, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<BaseTransactionsWidget, never, never, { "googleAPIKey": "googleAPIKey"; "initialFilterOptionsValue": "initialFilterOptions"; "initialSortOptionsValue": "initialSortOptions"; "pageSize": "pageSize"; "maxNavPages": "maxNavPages"; "paginationType": "paginationType"; "showControls": "showControls"; "showChangeCategory": "showChangeCategory"; "showPendingTransactionsOnTop": "showPendingTransactionsOnTop"; "showCheckImage": "showCheckImage"; "showManageNotes": "showManageNotes"; "getOrPostEndpoints": "getOrPostEndpoints"; "enableDisputeAndInquiry": "enableDisputeAndInquiry"; "disputeByBillingStatus": "disputeByBillingStatus"; "disputeEligibilityDays": "disputeEligibilityDays"; "disputeTransactionTypes": "disputeTransactionTypes"; "inquireTopicId": "inquireTopicId"; "disputeTopicId": "disputeTopicId"; "availableFiltersConfig": "availableFiltersConfig"; }, { "transactionSelected": "transactionSelected"; "transactionsLoaded": "transactionsLoaded"; }, never>;
}
