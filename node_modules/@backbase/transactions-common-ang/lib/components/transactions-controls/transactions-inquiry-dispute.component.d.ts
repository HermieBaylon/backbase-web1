import { EventEmitter, OnDestroy, OnInit } from '@angular/core';
import { FormBuilder } from '@angular/forms';
import { InquireAndDisputeFile, InquireAndDisputeTopics, MessageForm } from '../../model/messages.model';
import { TransactionsDetailsLoadingState } from '../../model/transactions-details.model';
import * as i0 from "@angular/core";
export declare class TransactionsInquiryDisputeComponent implements OnInit, OnDestroy {
    private readonly fb;
    message: MessageForm | undefined;
    enableDispute: boolean;
    /**
     * Whether the dispute & inquiry form is sending or not.
     */
    state: TransactionsDetailsLoadingState;
    inquireAndDisputeTopics: InquireAndDisputeTopics | undefined;
    submitReport: EventEmitter<MessageForm>;
    cancelReport: EventEmitter<void>;
    messageChange: EventEmitter<MessageForm>;
    fileChange: EventEmitter<File>;
    fileRemoved: EventEmitter<InquireAndDisputeFile>;
    confirmationDialogActive: boolean;
    labels: {
        inquire: string;
        dispute: string;
    };
    readonly loadingStateEnum: typeof TransactionsDetailsLoadingState;
    private unsubscribeSubject;
    transactionReportForm: import("@angular/forms").FormGroup;
    private topicRequired;
    private getControl;
    private setFormValue;
    hasError(field: string, type: string): any;
    isInvalidControl(field: string): boolean;
    saveReport(): void;
    closeReportForm(): void;
    closeConfirmationDialog(): void;
    processLabel(label: string): string[];
    ngOnInit(): void;
    uploadFile(input: HTMLInputElement): void;
    removeAttachment(attachment: InquireAndDisputeFile): void;
    ngOnDestroy(): void;
    constructor(fb: FormBuilder);
    static ɵfac: i0.ɵɵFactoryDeclaration<TransactionsInquiryDisputeComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TransactionsInquiryDisputeComponent, "bb-transactions-inquiry-dispute", never, { "message": "message"; "enableDispute": "enableDispute"; "state": "state"; "inquireAndDisputeTopics": "inquireAndDisputeTopics"; }, { "submitReport": "submitReport"; "cancelReport": "cancelReport"; "messageChange": "messageChange"; "fileChange": "fileChange"; "fileRemoved": "fileRemoved"; }, never, never>;
}
