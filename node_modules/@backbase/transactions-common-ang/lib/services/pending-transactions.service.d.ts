import { OnDestroy } from '@angular/core';
import { TransactionClientHttpService } from '@backbase/data-ang/transactions';
import { AccountsService } from './accounts.service';
import { BehaviorSubject, Observable } from 'rxjs';
import { TransactionsListOptions } from '../model/transactions-list-options.model';
import { TransactionsList } from '../model/transactions-list.model';
import { TransactionsFilterOptions } from '../model/transactions-filter-options.model';
import { TransactionsSortOptions } from '../model/transactions-sort-options.model';
import { LoadingState } from './transactions.service';
import { EndpointType } from './widget-properties.service';
import { DeprecationsService } from '@backbase/foundation-ang/core';
import * as i0 from "@angular/core";
export declare class PendingTransactionsService implements OnDestroy {
    private readonly transactionsDataHttpService;
    private readonly accountService;
    private readonly deprecationsService;
    private readonly initialListOptions;
    private readonly selectedAccount;
    private readonly options;
    private readonly listOptions;
    private readonly listRefresh;
    private readonly getOrPostEndpoint;
    private readonly transactionsList;
    readonly loadingState: BehaviorSubject<LoadingState>;
    readonly isFilterApplied: Observable<boolean>;
    readonly isSearchApplied: Observable<boolean>;
    private loadTransactions;
    getTransactionsFrom(selectedAccount: Observable<string[]>, initialListOptions?: Observable<Partial<TransactionsListOptions>>, getOrPostEndpoint?: Observable<EndpointType>): void;
    getTransactionsList(): Observable<TransactionsList>;
    search(query: string): void;
    clearSearch(): void;
    filter(filterOptions: TransactionsFilterOptions): void;
    clearFilter(): void;
    sort(sortOptions: TransactionsSortOptions): void;
    retryFiltering(): void;
    refreshTransactions(): void;
    private get isUsingPostEndpoints();
    ngOnDestroy(): void;
    constructor(transactionsDataHttpService: TransactionClientHttpService, accountService: AccountsService, deprecationsService: DeprecationsService);
    static ɵfac: i0.ɵɵFactoryDeclaration<PendingTransactionsService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<PendingTransactionsService>;
}
