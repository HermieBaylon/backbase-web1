(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('rxjs/operators'), require('@backbase/foundation-ang/core'), require('@backbase/data-ang/transactions'), require('@backbase/data-ang/arrangements'), require('@angular/common'), require('@angular/platform-browser'), require('@backbase/ui-ang/icon'), require('@backbase/ui-ang/dropdown-menu'), require('@backbase/ui-ang/button'), require('@backbase/ui-ang/loading-indicator'), require('@backbase/ui-ang/empty-state'), require('@angular/cdk/a11y'), require('@angular/forms'), require('@backbase/ui-ang/input-radio-group'), require('@backbase/ui-ang/input-validation-message'), require('@backbase/ui-ang/rich-text-editor'), require('@backbase/ui-ang/input-file'), require('@backbase/ui-ang/file-attachment'), require('@backbase/ui-ang/alert'), require('@backbase/ui-ang/load-button'), require('@backbase/ui-ang/modal'), require('@backbase/ui-ang/tooltip-directive'), require('@backbase/ui-ang/badge'), require('@backbase/ui-ang/notification'), require('@angular/common/http'), require('@backbase/data-ang/payment-batch'), require('@backbase/data-ang/categories-management'), require('@backbase/data-ang/messages'), require('@angular/localize/init'), require('@angular/router')) :
    typeof define === 'function' && define.amd ? define('@backbase/transactions-common-ang', ['exports', '@angular/core', 'rxjs', 'rxjs/operators', '@backbase/foundation-ang/core', '@backbase/data-ang/transactions', '@backbase/data-ang/arrangements', '@angular/common', '@angular/platform-browser', '@backbase/ui-ang/icon', '@backbase/ui-ang/dropdown-menu', '@backbase/ui-ang/button', '@backbase/ui-ang/loading-indicator', '@backbase/ui-ang/empty-state', '@angular/cdk/a11y', '@angular/forms', '@backbase/ui-ang/input-radio-group', '@backbase/ui-ang/input-validation-message', '@backbase/ui-ang/rich-text-editor', '@backbase/ui-ang/input-file', '@backbase/ui-ang/file-attachment', '@backbase/ui-ang/alert', '@backbase/ui-ang/load-button', '@backbase/ui-ang/modal', '@backbase/ui-ang/tooltip-directive', '@backbase/ui-ang/badge', '@backbase/ui-ang/notification', '@angular/common/http', '@backbase/data-ang/payment-batch', '@backbase/data-ang/categories-management', '@backbase/data-ang/messages', '@angular/localize/init', '@angular/router'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["transactions-common-ang"] = {}), global.ng.core, global.rxjs, global.rxjs.operators, global.i3, global.i1$1, global.i1, global.ng.common, global.ng.platformBrowser, global.i1$3, global.i2$1, global.i3$1, global.i3$2, global.i4, global.ng.cdk.a11y, global.ng.forms, global.i2$2, global.i3$3, global.i4$1, global.i5$1, global.i6, global.i7, global.i8, global.i10, global.i14, global.i1$5, global.i3$4, global.ng.common.http, global.i1$6, global.i1$7, global.i1$8, global.ng.localize.init, global.ng.router));
})(this, (function (exports, i0, rxjs, operators, i3, i1$1, i1, i2, i1$2, i1$3, i2$1, i3$1, i3$2, i4, i5, i1$4, i2$2, i3$3, i4$1, i5$1, i6, i7, i8, i10, i14, i1$5, i3$4, http, i1$6, i1$7, i1$8, init, i1$9) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i3__namespace = /*#__PURE__*/_interopNamespace(i3);
    var i1__namespace$1 = /*#__PURE__*/_interopNamespace(i1$1);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i1__namespace$2 = /*#__PURE__*/_interopNamespace(i1$2);
    var i1__namespace$3 = /*#__PURE__*/_interopNamespace(i1$3);
    var i2__namespace$1 = /*#__PURE__*/_interopNamespace(i2$1);
    var i3__namespace$1 = /*#__PURE__*/_interopNamespace(i3$1);
    var i3__namespace$2 = /*#__PURE__*/_interopNamespace(i3$2);
    var i4__namespace = /*#__PURE__*/_interopNamespace(i4);
    var i5__namespace = /*#__PURE__*/_interopNamespace(i5);
    var i1__namespace$4 = /*#__PURE__*/_interopNamespace(i1$4);
    var i2__namespace$2 = /*#__PURE__*/_interopNamespace(i2$2);
    var i3__namespace$3 = /*#__PURE__*/_interopNamespace(i3$3);
    var i4__namespace$1 = /*#__PURE__*/_interopNamespace(i4$1);
    var i5__namespace$1 = /*#__PURE__*/_interopNamespace(i5$1);
    var i6__namespace = /*#__PURE__*/_interopNamespace(i6);
    var i7__namespace = /*#__PURE__*/_interopNamespace(i7);
    var i8__namespace = /*#__PURE__*/_interopNamespace(i8);
    var i10__namespace = /*#__PURE__*/_interopNamespace(i10);
    var i14__namespace = /*#__PURE__*/_interopNamespace(i14);
    var i1__namespace$5 = /*#__PURE__*/_interopNamespace(i1$5);
    var i3__namespace$4 = /*#__PURE__*/_interopNamespace(i3$4);
    var i1__namespace$6 = /*#__PURE__*/_interopNamespace(i1$6);
    var i1__namespace$7 = /*#__PURE__*/_interopNamespace(i1$7);
    var i1__namespace$8 = /*#__PURE__*/_interopNamespace(i1$8);
    var i1__namespace$9 = /*#__PURE__*/_interopNamespace(i1$9);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    exports.OnLoadAction = void 0;
    (function (OnLoadAction) {
        OnLoadAction[OnLoadAction["Replace"] = 0] = "Replace";
        OnLoadAction[OnLoadAction["Append"] = 1] = "Append";
        OnLoadAction[OnLoadAction["ReplacePage"] = 2] = "ReplacePage";
    })(exports.OnLoadAction || (exports.OnLoadAction = {}));
    exports.TransactionState = void 0;
    (function (TransactionState) {
        TransactionState["completed"] = "COMPLETED";
        TransactionState["uncompleted"] = "UNCOMPLETED";
    })(exports.TransactionState || (exports.TransactionState = {}));
    var defaultAccountOptions = {
        account: {},
    };
    var defaultSearchOptions = {
        search: {},
    };
    var defaultFilterOptions = {
        filter: {},
    };
    var defaultSortOptions = {};
    var defaultPaginationOptions = {
        pagination: {
            from: 0,
            size: 10,
        },
    };
    var defaultInitialListOptions = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, defaultAccountOptions), defaultSearchOptions), defaultFilterOptions), defaultSortOptions), defaultPaginationOptions), { onLoad: exports.OnLoadAction.Replace });
    var defaultInitialExportOptions = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, defaultAccountOptions), defaultSearchOptions), defaultFilterOptions), defaultSortOptions), { exportType: 'csv', locale: 'en-US' });

    /* eslint-disable no-redeclare*/
    // eslint-disable-next-line @typescript-eslint/no-namespace
    exports.TransactionsFilterOptions = void 0;
    (function (TransactionsFilterOptions) {
        function isEmpty(options) {
            return Object.values(options)
                .filter(function (value) { return typeof value !== 'undefined'; })
                .every(function (value) { return !value || (typeof value === 'object' && isEmpty(value)); });
        }
        TransactionsFilterOptions.isEmpty = isEmpty;
        // converts a Date object to `dddd-MM-yy` string format
        // eslint-disable-next-line complexity
        var formatDate = function (date) {
            var year = date.getFullYear().toString();
            var month = (date.getMonth() + 1).toString();
            var day = date.getDate().toString();
            return year + "-" + (month[1] ? month : '0' + month[0]) + "-" + (day[1] ? day : '0' + day[0]);
        };
        function toHttpGetParams(options) {
            if (options === void 0) { options = {}; }
            var params = {};
            var setIfExists = function (paramName, conditionFn, valueFn) {
                if (conditionFn(options)) {
                    params[paramName] = valueFn(options);
                }
            };
            setIfExists('creditDebitIndicator', function (option) { return option.creditDebitIndicator !== undefined && option.creditDebitIndicator.value !== undefined; }, function (option) { return option.creditDebitIndicator.value; });
            setIfExists('types', function (option) { return option.type !== undefined && option.type.value !== undefined; }, function (option) { return (Array.isArray(option.type.value) ? option.type.value : [option.type.value]); });
            setIfExists('billingStatus', function (option) { return option.billingStatus !== undefined && option.billingStatus.value !== undefined; }, function (option) { return option.billingStatus.value; });
            setIfExists('amountGreaterThan', function (option) { return option.amount && option.amount.from; }, function (option) { return option.amount.from; });
            setIfExists('amountLessThan', function (option) { return option.amount && option.amount.to; }, function (option) { return option.amount.to; });
            setIfExists('bookingDateGreaterThan', function (option) { return option.date && option.date.from && Object.keys(option.date.from).length; }, function (option) { return formatDate(new Date(option.date.from)); });
            setIfExists('bookingDateLessThan', function (option) { return option.date && option.date.to && Object.keys(option.date.to).length; }, function (option) { return formatDate(new Date(option.date.to)); });
            setIfExists('fromCheckSerialNumber', function (option) { return option.checkSerialNumber && option.checkSerialNumber.from; }, function (option) { return option.checkSerialNumber.from; });
            setIfExists('toCheckSerialNumber', function (option) { return option.checkSerialNumber && option.checkSerialNumber.to; }, function (option) { return option.checkSerialNumber.to; });
            return params;
        }
        TransactionsFilterOptions.toHttpGetParams = toHttpGetParams;
        // eslint-disable-next-line complexity
        function fromHttpGetParams(params) {
            var options = {};
            if (params.creditDebitIndicator) {
                options.creditDebitIndicator = { value: params.creditDebitIndicator };
            }
            if (params.type) {
                if (Array.isArray(params.type)) {
                    options.types = params.type.map(function (value) { return ({ value: value }); });
                }
                else {
                    options.types = { value: params.type };
                }
            }
            if (params.billingStatus) {
                options.billingStatus = { value: params.billingStatus };
            }
            if (params.amountGreaterThan) {
                options.amount = { from: parseInt(params.amountGreaterThan, 10) };
            }
            if (params.amountLessThan) {
                options.amount = Object.assign(Object.assign({}, options.amount), { to: parseInt(params.amountLessThan, 10) });
            }
            if (params.bookingDateGreaterThan) {
                options.date = {
                    from: params.bookingDateGreaterThan,
                };
            }
            if (params.bookingDateLessThan) {
                options.date = Object.assign(Object.assign({}, options.date), { to: params.bookingDateLessThan });
            }
            if (params.fromCheckSerialNumber) {
                options.checkSerialNumber = {
                    from: parseInt(params.fromCheckSerialNumber, 10),
                };
            }
            if (params.toCheckSerialNumber) {
                options.checkSerialNumber = Object.assign(Object.assign({}, options.checkSerialNumber), { to: parseInt(params.toCheckSerialNumber, 10) });
            }
            return options;
        }
        TransactionsFilterOptions.fromHttpGetParams = fromHttpGetParams;
    })(exports.TransactionsFilterOptions || (exports.TransactionsFilterOptions = {}));
    /* eslint-enable no-redeclare*/

    exports.AvailableFilterEnum = void 0;
    (function (AvailableFilterEnum) {
        AvailableFilterEnum["CreditDebitIndicator"] = "creditDebitIndicator";
        AvailableFilterEnum["Types"] = "types";
        AvailableFilterEnum["BillingStatus"] = "billingStatus";
        AvailableFilterEnum["Amount"] = "amount";
        AvailableFilterEnum["Date"] = "date";
        AvailableFilterEnum["Categories"] = "categories";
        AvailableFilterEnum["CheckSerialNumber"] = "checkSerialNumber";
    })(exports.AvailableFilterEnum || (exports.AvailableFilterEnum = {}));

    /**
     * Dropdown values for credit/debit indicator filter.
     */
    var creditDebitIndicatorEnumValues = [
        {
            name: 'All',
        },
        {
            value: 'CRDT',
            name: 'Credit',
        },
        {
            value: 'DBIT',
            name: 'Debit',
        },
    ];
    /**
     * Fallback dropdown values for transaction type filter.
     */
    var defaultTransactionTypeEnumValues = [
        {
            value: 'ATM',
            name: 'ATM',
        },
        {
            value: 'ACH',
            name: 'Ach',
        },
        {
            value: 'Bill Payment',
            name: 'Bill Payment',
        },
        {
            value: 'Cash',
            name: 'Cash',
        },
        {
            name: 'Cheques',
            value: 'Cheques',
        },
        {
            value: 'CreditDebit Card',
            name: 'Credit/Debit Card',
        },
        {
            value: 'Check',
            name: 'Check',
        },
        {
            value: 'Deposit',
            name: 'Deposit',
        },
        {
            value: 'Fee',
            name: 'Fee',
        },
        {
            value: 'POS',
            name: 'POS',
        },
        {
            value: 'Withdrawal',
            name: 'Withdrawal',
        },
    ];
    /**
     * Fallback dropdown values for billing status filter.
     */
    var defaultBillingStatusEnumValues = [
        {
            value: 'PENDING',
            name: 'Pending',
        },
        {
            value: 'BILLED',
            name: 'Billed',
        },
        {
            value: 'UNBILLED',
            name: 'Unbilled',
        },
    ];
    /**
     * Name of different check images status
     */
    exports.CheckImagesAvailability = void 0;
    (function (CheckImagesAvailability) {
        CheckImagesAvailability["available"] = "AVAILABLE";
        CheckImagesAvailability["unavailable"] = "UNAVAILABLE";
    })(exports.CheckImagesAvailability || (exports.CheckImagesAvailability = {}));
    exports.BillingStatusEnum = void 0;
    (function (BillingStatusEnum) {
        BillingStatusEnum["billed"] = "BILLED";
        BillingStatusEnum["unbilled"] = "UNBILLED";
        BillingStatusEnum["pending"] = "PENDING";
    })(exports.BillingStatusEnum || (exports.BillingStatusEnum = {}));
    /**
     * Name of response header that contains the total amount of results.
     */
    var totalCountHeader = 'X-Total-Count';
    /**
     * Name of response header that contains the available export types.
     */
    var availableExportTypes = 'X-Available-Export-Types';
    var unvailableExportTypesReasons = 'X-Unavailable-Export-Types-Reasons';
    /**
     * Name of response header that contains the sort configuration.
     */
    var sortFieldsDirectionHeader = 'X-Sort-Fields-Direction';
    /**
     * Notification time to live in ms.
     */
    var notificationTtl = 5000;
    /**
     * Which category level should be retrieved for category change modal list.
     */
    var categoryListLevelParam = 'PARENTS';
    var defaultAvailableFiltersConfig = {
        'Current Account': [
            exports.AvailableFilterEnum.Date,
            exports.AvailableFilterEnum.CreditDebitIndicator,
            exports.AvailableFilterEnum.Amount,
            exports.AvailableFilterEnum.Types,
            exports.AvailableFilterEnum.BillingStatus,
            exports.AvailableFilterEnum.CheckSerialNumber,
        ],
        'Savings Account': [
            exports.AvailableFilterEnum.Date,
            exports.AvailableFilterEnum.CreditDebitIndicator,
            exports.AvailableFilterEnum.Amount,
            exports.AvailableFilterEnum.Types,
            exports.AvailableFilterEnum.BillingStatus,
            exports.AvailableFilterEnum.CheckSerialNumber,
        ],
        'Credit Card': [
            exports.AvailableFilterEnum.Date,
            exports.AvailableFilterEnum.CreditDebitIndicator,
            exports.AvailableFilterEnum.Amount,
            exports.AvailableFilterEnum.Types,
            exports.AvailableFilterEnum.BillingStatus,
        ],
        Loan: [exports.AvailableFilterEnum.Date, exports.AvailableFilterEnum.CreditDebitIndicator, exports.AvailableFilterEnum.Amount],
        'Term Deposit': [exports.AvailableFilterEnum.Date, exports.AvailableFilterEnum.CreditDebitIndicator, exports.AvailableFilterEnum.Amount],
        'Debit Card': [exports.AvailableFilterEnum.Date, exports.AvailableFilterEnum.CreditDebitIndicator, exports.AvailableFilterEnum.Amount],
        'Investment Account': [
            exports.AvailableFilterEnum.Date,
            exports.AvailableFilterEnum.CreditDebitIndicator,
            exports.AvailableFilterEnum.Amount,
        ],
        defaultFilters: [exports.AvailableFilterEnum.Date, exports.AvailableFilterEnum.CreditDebitIndicator, exports.AvailableFilterEnum.Amount],
    };
    var deserialize = function (propertyValue) {
        var params = propertyValue.split('&');
        return params.reduce(function (acc, param) {
            var _a;
            var _b = __read(param.split('='), 2), key = _b[0], val = _b[1];
            return Object.assign(Object.assign({}, acc), (_a = {}, _a[decodeURIComponent(key)] = decodeURIComponent(val), _a));
        }, {});
    };
    var parseSortOptions = function (propertyValue) {
        if (!propertyValue.length) {
            return undefined;
        }
        var sortOption = propertyValue
            .split(',')[0]
            .trim()
            .replace(/\s{2,}/g, ' ');
        var _a = __read(sortOption.split(' '), 2), orderBy = _a[0], direction = _a[1];
        if (!orderBy || (direction !== 'ASC' && direction !== 'DESC')) {
            throw new Error("Invalid value for \"initialSortOptions\" property.\n      Please use \"<orderBy> <direction>\" format, e.g., \"bookingDate DESC\", or leave it empty.");
        }
        return {
            orderBy: orderBy,
            direction: direction,
        };
    };
    var filterInputParameters = function (input, prop) { return rxjs.combineLatest([input, prop]).pipe(operators.map(function (_a) {
        var _b = __read(_a, 2), inputVal = _b[0], propVal = _b[1];
        return inputVal !== null && inputVal !== void 0 ? inputVal : propVal;
    })); };
    var b64Encode = function (str) { return btoa(encodeURIComponent(str).replace(/%([0-9A-F]{2})/g, function (_match, p1) {
        return String.fromCharCode(parseInt(p1, 16));
    })); };
    var truncateDate = function (date) { return new Date(date.getFullYear(), date.getMonth(), date.getDate()); };
    var daysDiff = function (date1, date2) {
        var diff = truncateDate(new Date(date1)).getTime() - truncateDate(new Date(date2)).getTime();
        return Math.ceil(diff / (1000 * 3600 * 24));
    };

    /* eslint-disable no-redeclare*/
    // eslint-disable-next-line @typescript-eslint/no-namespace
    exports.TransactionsList = void 0;
    (function (TransactionsList) {
        // eslint-disable-next-line complexity
        var processTransaction = function (transaction) {
            var amountSign = transaction.creditDebitIndicator === 'DBIT' ? -1 : 1;
            var formattedTransaction = Object.assign(Object.assign(Object.assign({}, transaction), { isPending: (function isPending(data) {
                    var result = false;
                    if (data && data.billingStatus) {
                        var billingStatus = data.billingStatus.toUpperCase();
                        result = billingStatus === exports.BillingStatusEnum.pending || billingStatus === exports.BillingStatusEnum.unbilled;
                    }
                    return result;
                })(transaction) }), (transaction.merchant
                ? {
                    merchant: Object.assign(Object.assign({ id: transaction.merchant.id, name: transaction.merchant.name }, (transaction.merchant.logo ? { logo: transaction.merchant.logo } : {})), (transaction.merchant.website ? { website: transaction.merchant.website } : {})),
                }
                : {}));
            if (transaction.transactionAmountCurrency) {
                var amountNumber = parseFloat(transaction.transactionAmountCurrency.amount);
                formattedTransaction.transactionAmountCurrency = Object.assign(Object.assign({}, transaction.transactionAmountCurrency), { unsignedAmount: amountNumber, amount: (amountSign * (amountNumber || 0)).toString() });
            }
            if (transaction.instructedAmountCurrency) {
                var amountNumber = parseFloat(transaction.instructedAmountCurrency.amount);
                formattedTransaction.instructedAmountCurrency = Object.assign(Object.assign({}, transaction.instructedAmountCurrency), { unsignedAmount: amountNumber, amount: (amountSign * (amountNumber || 0)).toString() });
            }
            formattedTransaction.currencyExchangeAvailability =
                !!transaction.instructedAmountCurrency &&
                    !!transaction.transactionAmountCurrency &&
                    !!transaction.currencyExchangeRate;
            return formattedTransaction;
        };
        var processTransactions = function (transactionsList) { return (Object.assign(Object.assign({}, transactionsList), { items: transactionsList.items.map(processTransaction) })); };
        var processTotalCountHeader = function (totalCount) { return (totalCount ? parseInt(totalCount, 10) : 0); };
        var processAvailableExportTypes = function (availableExports) { return availableExports || ''; };
        var processUnavailableExportTypesReasons = function (unavilableExportTypesReasonsValue) { return JSON.parse(unavilableExportTypesReasonsValue || '{}'); };
        var processSortFieldsDirectionHeader = function (sortFieldsDirection) {
            if (sortFieldsDirection === null || !sortFieldsDirection.length) {
                return undefined;
            }
            var sortOption = sortFieldsDirection
                .split(',')[0]
                .trim()
                .replace(/\s{2,}/g, ' ');
            var _3 = __read(sortOption.split(' '), 2), orderBy = _3[0], direction = _3[1];
            if (!orderBy || (direction !== 'ASC' && direction !== 'DESC')) {
                throw new Error("Invalid value for \"initialSortOptions\" property.\n        Please use \"<orderBy> <direction>\" format, e.g., \"bookingDate DESC\",\n        or leave it empty.");
            }
            return {
                orderBy: orderBy,
                direction: direction,
            };
        };
        // eslint-disable-next-line no-inner-declarations
        function padValueWithZeros(value, size) {
            if (size === void 0) { size = 2; }
            return (value + '').padStart(size, '0');
        }
        // eslint-disable-next-line no-inner-declarations
        function formatDate(date) {
            var safeDate = date || '';
            if (/^[0-9]{4}-[0-9]{2}-[0-9]{2}/.exec(safeDate)) {
                var localDate = new Date(safeDate);
                var month = padValueWithZeros(localDate.getMonth() + 1);
                var day = padValueWithZeros(localDate.getDate());
                var year = localDate.getFullYear();
                return year + "-" + month + "-" + day;
            }
            else if (date !== undefined) {
                console.error("invalid date provided " + date);
            }
            return undefined;
        }
        TransactionsList.fromHttpResponse = function (response) {
            var totalCount = processTotalCountHeader(response.headers.get(totalCountHeader));
            var sort = processSortFieldsDirectionHeader(response.headers.get(sortFieldsDirectionHeader));
            var availableExportTypesHeader = processAvailableExportTypes(response.headers.get(availableExportTypes));
            var unavailableExportTypesReasonsHeader = processUnavailableExportTypesReasons(response.headers.get(unvailableExportTypesReasons));
            return processTransactions(Object.assign(Object.assign({ items: response.body || [], totalCount: totalCount }, (sort ? { sort: sort } : {})), { availableExportTypesHeader: availableExportTypesHeader, unavailableExportTypesReasonsHeader: unavailableExportTypesReasonsHeader }));
        };
        TransactionsList.concat = function (transactionsList1, transactionsList2) {
            if (transactionsList2.httpResponseError) {
                return Object.assign(Object.assign({}, transactionsList1), { items: __spreadArray([], __read(transactionsList1.items)), httpResponseError: transactionsList2.httpResponseError });
            }
            return Object.assign(Object.assign(Object.assign(Object.assign({ items: __spreadArray(__spreadArray([], __read(transactionsList1.items)), __read(transactionsList2.items)), totalCount: transactionsList1.totalCount }, (transactionsList2.sort ? { sort: transactionsList2.sort } : {})), (transactionsList2.availableExportTypesHeader
                ? {
                    availableExportTypesHeader: transactionsList2.availableExportTypesHeader,
                }
                : {})), (transactionsList2.unavailableExportTypesReasonsHeader
                ? {
                    unavailableExportTypesReasonsHeader: transactionsList2.unavailableExportTypesReasonsHeader,
                }
                : {})), { httpResponseError: transactionsList2.httpResponseError });
        };
        TransactionsList.hasLoadedAll = function (transactionsList) { return transactionsList.items.length === transactionsList.totalCount; };
        TransactionsList.toHttpRequest = function (listOptions) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2;
            var turnIntoArrayObject = function (value, name, fn) {
                var _3, _4;
                if (!value) {
                    return {};
                }
                return Array.isArray(value) ? (_3 = {}, _3[name] = fn(value), _3) : (_4 = {}, _4[name] = [fn(value)], _4);
            };
            var optionalItem = function (name, value) {
                var _3;
                return (value !== undefined ? (_3 = {}, _3[name] = value, _3) : {});
            };
            var isTransactionListOption = function (data) { return Object.prototype.hasOwnProperty.call(data, 'pagination'); };
            var isTransactionExportOptions = function (data) { return Object.prototype.hasOwnProperty.call(data, 'exportType'); };
            return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, turnIntoArrayObject(listOptions.account.arrangementId, 'arrangementsIds', function (value) { return value; })), optionalItem('query', (_a = listOptions.search) === null || _a === void 0 ? void 0 : _a.query)), optionalItem('amountGreaterThan', (_c = (_b = listOptions.filter) === null || _b === void 0 ? void 0 : _b.amount) === null || _c === void 0 ? void 0 : _c.from)), optionalItem('amountLessThan', (_e = (_d = listOptions.filter) === null || _d === void 0 ? void 0 : _d.amount) === null || _e === void 0 ? void 0 : _e.to)), optionalItem('bookingDateGreaterThan', ((_g = (_f = listOptions.filter) === null || _f === void 0 ? void 0 : _f.date) === null || _g === void 0 ? void 0 : _g.from) === '' ? undefined : formatDate((_j = (_h = listOptions.filter) === null || _h === void 0 ? void 0 : _h.date) === null || _j === void 0 ? void 0 : _j.from))), optionalItem('bookingDateLessThan', ((_l = (_k = listOptions.filter) === null || _k === void 0 ? void 0 : _k.date) === null || _l === void 0 ? void 0 : _l.to) === '' ? undefined : formatDate((_o = (_m = listOptions.filter) === null || _m === void 0 ? void 0 : _m.date) === null || _o === void 0 ? void 0 : _o.to))), optionalItem('categories', (_p = listOptions.filter) === null || _p === void 0 ? void 0 : _p.categories)), optionalItem('fromCheckSerialNumber', (_r = (_q = listOptions.filter) === null || _q === void 0 ? void 0 : _q.checkSerialNumber) === null || _r === void 0 ? void 0 : _r.from)), optionalItem('toCheckSerialNumber', (_t = (_s = listOptions.filter) === null || _s === void 0 ? void 0 : _s.checkSerialNumber) === null || _t === void 0 ? void 0 : _t.to)), optionalItem('orderBy', (_u = listOptions.sort) === null || _u === void 0 ? void 0 : _u.orderBy)), optionalItem('direction', (_v = listOptions.sort) === null || _v === void 0 ? void 0 : _v.direction)), optionalItem('state', isTransactionListOption(listOptions) ? listOptions.state : undefined)), optionalItem('from', isTransactionListOption(listOptions) ? (_w = listOptions.pagination) === null || _w === void 0 ? void 0 : _w.from : undefined)), optionalItem('size', isTransactionListOption(listOptions) ? (_x = listOptions.pagination) === null || _x === void 0 ? void 0 : _x.size : undefined)), optionalItem('billingStatus', (_z = (_y = listOptions.filter) === null || _y === void 0 ? void 0 : _y.billingStatus) === null || _z === void 0 ? void 0 : _z.value)), optionalItem('creditDebitIndicator', (_1 = (_0 = listOptions.filter) === null || _0 === void 0 ? void 0 : _0.creditDebitIndicator) === null || _1 === void 0 ? void 0 : _1.value)), optionalItem('exportType', isTransactionExportOptions(listOptions) ? listOptions.exportType : undefined)), optionalItem('locale', isTransactionExportOptions(listOptions) ? listOptions.locale : undefined)), turnIntoArrayObject((_2 = listOptions.filter) === null || _2 === void 0 ? void 0 : _2.types, 'types', function (value) { return value.value; }));
        };
    })(exports.TransactionsList || (exports.TransactionsList = {}));
    /* eslint-enable no-redeclare*/

    var deepEqual = function (x, y) {
        var ok = Object.keys;
        var tx = typeof x;
        var ty = typeof y;
        return x && y && tx === 'object' && tx === ty
            ? ok(x).length === ok(y).length && ok(x).every(function (key) { return deepEqual(x[key], y[key]); })
            : x === y;
    };
    var cacheRequest = function (request) { return function (source) { return source.pipe(operators.switchMap(request), operators.publishReplay(1), operators.refCount()); }; };
    var multipleAccountsPredicate = function (listOptions) { return function () { return Array.isArray(listOptions.account.arrangementId) && listOptions.account.arrangementId.length > 1; }; };
    var onLoadTransactions = function (acc, curr) { return curr.onLoad === exports.OnLoadAction.Append ? exports.TransactionsList.concat(acc, curr.transactionsList) : curr.transactionsList; };
    var getNameFromContentDispositionHeader = function (response) {
        var contentDisposition = response.headers.get('Content-Disposition');
        var fileName = '';
        if (contentDisposition) {
            var result = /filename[^;=\n]*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/i.exec(contentDisposition);
            fileName = result ? result[2] : '';
        }
        return fileName;
    };

    var WidgetProperties = {
        pageSize: 'bb.transaction.pageSize',
        maxNavPages: 'bb.transaction.maxNavPages',
        paginationType: 'bb.transaction.paginationType',
        initialFilterOptions: 'bb.transaction.initialFilterOptions',
        initialSortOptions: 'bb.transaction.initialSortOptions',
        showControls: 'bb.transaction.showControls',
        showChangeCategory: 'bb.transaction.showChangeCategory',
        refreshTransactionsListEvents: 'event.refreshTransactionsList',
        showPendingTransactionsOnTop: 'bb.transaction.showPendingTransactionsOnTop',
        showCheckImage: 'bb.transaction.showCheckImage',
        gmapsAPIKey: 'bb.transaction.gmapsAPIKey',
        showManageNotes: 'bb.transaction.showManageNotes',
        getOrPostEndpoints: 'bb.transaction.getOrPostEndpoints',
        disputeByBillingStatus: 'disputeByBillingStatus',
        disputeEligibilityDays: 'disputeEligibilityDays',
        disputeTransactionTypes: 'disputeTransactionTypes',
        enableDisputeAndInquiry: 'enableDisputeAndInquiry',
        inquireTopicId: 'inquireTopicId',
        disputeTopicId: 'disputeTopicId',
    };
    var defaultPageSize = 10;
    var defaultMaxNavPage = 3;
    var defaultInitialFilterOptions = '';
    var defaultInitialSortOptions = '';
    exports.PaginationType = void 0;
    (function (PaginationType) {
        PaginationType["LOAD_MORE"] = "load-more";
        PaginationType["PAGINATION"] = "pagination";
        PaginationType["INFINITE_SCROLL"] = "infinite-scroll";
    })(exports.PaginationType || (exports.PaginationType = {}));
    exports.EndpointType = void 0;
    (function (EndpointType) {
        EndpointType["GET_REQUEST"] = "get-request";
        EndpointType["POST_REQUEST"] = "post-request";
    })(exports.EndpointType || (exports.EndpointType = {}));
    var defaultModelObservable = function (value) { return rxjs.defer(function () { return rxjs.of(value); }).pipe(operators.publishReplay(1), operators.refCount()); };
    var WidgetPropertiesService = /** @class */ (function () {
        function WidgetPropertiesService(itemModel) {
            this.itemModel = itemModel;
        }
        Object.defineProperty(WidgetPropertiesService.prototype, "pageSize", {
            get: function () {
                if (!this.itemModel) {
                    return defaultModelObservable(defaultPageSize);
                }
                return this.itemModel.property(WidgetProperties.pageSize).pipe(operators.map(function (propertyValue) { return parseInt(propertyValue, 10); }), operators.map(function (pageSize) { return (pageSize > 0 ? pageSize : defaultPageSize); }));
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(WidgetPropertiesService.prototype, "maxNavPages", {
            get: function () {
                if (!this.itemModel) {
                    return defaultModelObservable(defaultMaxNavPage);
                }
                return this.itemModel
                    .property(WidgetProperties.maxNavPages)
                    .pipe(operators.map(function (propertyValue) { return parseInt(propertyValue, 10); }));
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(WidgetPropertiesService.prototype, "paginationType", {
            get: function () {
                if (!this.itemModel) {
                    return defaultModelObservable(exports.PaginationType.LOAD_MORE);
                }
                return this.itemModel
                    .property(WidgetProperties.paginationType)
                    .pipe(operators.map(function (propertyValue) { return propertyValue; }));
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(WidgetPropertiesService.prototype, "initialFilterOptions", {
            get: function () {
                if (!this.itemModel) {
                    return defaultModelObservable({});
                }
                return this.itemModel.property(WidgetProperties.initialFilterOptions, defaultInitialFilterOptions).pipe(operators.map(deserialize), operators.map(function (params) { return exports.TransactionsFilterOptions.fromHttpGetParams(params); }));
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(WidgetPropertiesService.prototype, "initialSortOptions", {
            get: function () {
                if (!this.itemModel) {
                    return defaultModelObservable(parseSortOptions(defaultInitialSortOptions));
                }
                return this.itemModel.property(WidgetProperties.initialSortOptions, defaultInitialSortOptions).pipe(operators.map(parseSortOptions), operators.catchError(function (err) {
                    console.warn("initialSortOptions property ignored: " + err);
                    return rxjs.of(undefined);
                }));
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(WidgetPropertiesService.prototype, "showControls", {
            get: function () {
                if (!this.itemModel) {
                    return defaultModelObservable(true);
                }
                return this.itemModel
                    .property(WidgetProperties.showControls)
                    .pipe(operators.map(function (propertyValue) { return (typeof propertyValue === 'boolean' ? propertyValue : propertyValue === 'true'); }));
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(WidgetPropertiesService.prototype, "showChangeCategory", {
            get: function () {
                if (!this.itemModel) {
                    return defaultModelObservable(true);
                }
                return this.itemModel
                    .property(WidgetProperties.showChangeCategory)
                    .pipe(operators.map(function (propertyValue) { return (typeof propertyValue === 'boolean' ? propertyValue : propertyValue === 'true'); }));
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(WidgetPropertiesService.prototype, "refreshTransactionsListEvents", {
            get: function () {
                if (!this.itemModel) {
                    return defaultModelObservable('');
                }
                return this.itemModel
                    .property(WidgetProperties.refreshTransactionsListEvents)
                    .pipe(operators.map(function (propertyValue) { return propertyValue; }));
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(WidgetPropertiesService.prototype, "showPendingTransactionsOnTop", {
            get: function () {
                if (!this.itemModel) {
                    return defaultModelObservable(false);
                }
                return this.itemModel
                    .property(WidgetProperties.showPendingTransactionsOnTop)
                    .pipe(operators.map(function (propertyValue) { return (typeof propertyValue === 'boolean' ? propertyValue : propertyValue === 'true'); }));
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(WidgetPropertiesService.prototype, "showCheckImage", {
            get: function () {
                if (!this.itemModel) {
                    return defaultModelObservable(true);
                }
                return this.itemModel
                    .property(WidgetProperties.showCheckImage)
                    .pipe(operators.map(function (propertyValue) { return (typeof propertyValue === 'boolean' ? propertyValue : propertyValue === 'true'); }));
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(WidgetPropertiesService.prototype, "showManageNotes", {
            get: function () {
                if (!this.itemModel) {
                    return defaultModelObservable(true);
                }
                return this.itemModel
                    .property(WidgetProperties.showManageNotes)
                    .pipe(operators.map(function (propertyValue) { return (typeof propertyValue === 'boolean' ? propertyValue : propertyValue === 'true'); }));
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(WidgetPropertiesService.prototype, "getOrPostEndpoints", {
            get: function () {
                if (!this.itemModel) {
                    return defaultModelObservable(exports.EndpointType.POST_REQUEST);
                }
                return this.itemModel
                    .property(WidgetProperties.getOrPostEndpoints)
                    .pipe(operators.map(function (propertyValue) { return propertyValue; }));
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(WidgetPropertiesService.prototype, "gmapsAPIKey", {
            get: function () {
                if (!this.itemModel) {
                    return defaultModelObservable('');
                }
                return this.itemModel.property(WidgetProperties.gmapsAPIKey).pipe(operators.map(function (propertyValue) { return propertyValue; }));
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(WidgetPropertiesService.prototype, "disputeByBillingStatus", {
            get: function () {
                if (!this.itemModel) {
                    return defaultModelObservable(true);
                }
                return this.itemModel
                    .property(WidgetProperties.disputeByBillingStatus)
                    .pipe(operators.map(function (propertyValue) { return (typeof propertyValue === 'boolean' ? propertyValue : propertyValue === 'true'); }));
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(WidgetPropertiesService.prototype, "disputeEligibilityDays", {
            get: function () {
                if (!this.itemModel) {
                    return defaultModelObservable(120);
                }
                return this.itemModel
                    .property(WidgetProperties.disputeEligibilityDays, '120')
                    .pipe(operators.map(function (propertyValue) { return parseInt(propertyValue, 10); }));
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(WidgetPropertiesService.prototype, "disputeTransactionTypes", {
            get: function () {
                if (!this.itemModel) {
                    return defaultModelObservable(['Credit/Debit Card']);
                }
                return this.itemModel
                    .property(WidgetProperties.disputeTransactionTypes, 'Credit/Debit Card')
                    .pipe(operators.map(function (propertyValue) { return propertyValue.split(','); }));
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(WidgetPropertiesService.prototype, "enableDisputeAndInquiry", {
            get: function () {
                if (!this.itemModel) {
                    return defaultModelObservable(false);
                }
                return this.itemModel
                    .property(WidgetProperties.enableDisputeAndInquiry)
                    .pipe(operators.map(function (propertyValue) { return (typeof propertyValue === 'boolean' ? propertyValue : propertyValue === 'true'); }));
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(WidgetPropertiesService.prototype, "inquireTopicId", {
            get: function () {
                if (!this.itemModel) {
                    return defaultModelObservable('');
                }
                return this.itemModel
                    .property(WidgetProperties.inquireTopicId)
                    .pipe(operators.map(function (propertyValue) { return propertyValue; }));
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(WidgetPropertiesService.prototype, "disputeTopicId", {
            get: function () {
                if (!this.itemModel) {
                    return defaultModelObservable('');
                }
                return this.itemModel
                    .property(WidgetProperties.disputeTopicId)
                    .pipe(operators.map(function (propertyValue) { return propertyValue; }));
            },
            enumerable: false,
            configurable: true
        });
        return WidgetPropertiesService;
    }());
    WidgetPropertiesService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: WidgetPropertiesService, deps: [{ token: i3__namespace.ItemModel, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    WidgetPropertiesService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: WidgetPropertiesService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: WidgetPropertiesService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () {
            return [{ type: i3__namespace.ItemModel, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    function fromArrangementsResponse(response) {
        return (response.body || []).map(function (item) { return ({
            id: item.id,
            name: item.name,
            displayName: item.displayName,
            alias: item.bankAlias,
            IBAN: item.IBAN,
            BBAN: item.BBAN,
            currency: item.currency,
        }); });
    }

    var AccountsService = /** @class */ (function () {
        function AccountsService(productSummaryDataHttpService) {
            this.productSummaryDataHttpService = productSummaryDataHttpService;
        }
        AccountsService.prototype.getAllArrangements = function () {
            return this.productSummaryDataHttpService
                .getArrangementsByBusinessFunction({
                businessFunction: 'Product Summary',
                resourceName: 'Product Summary',
                privilege: 'view',
                size: 1000000,
            }, 'response')
                .pipe(operators.map(fromArrangementsResponse));
        };
        AccountsService.prototype.getProductSummary = function () {
            return this.productSummaryDataHttpService.getArrangementsByBusinessFunction({
                businessFunction: 'Product Summary',
                resourceName: 'Product Summary',
                privilege: 'view',
                size: 1000000,
            }, 'body');
        };
        return AccountsService;
    }());
    AccountsService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccountsService, deps: [{ token: i1__namespace.ProductSummaryHttpService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    AccountsService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccountsService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccountsService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace.ProductSummaryHttpService }]; } });

    exports.LoadingState = void 0;
    (function (LoadingState) {
        LoadingState["NotLoaded"] = "NotLoaded";
        LoadingState["LoadingMore"] = "LoadingMore";
        LoadingState["LoadingPage"] = "LoadingPage";
        LoadingState["Loading"] = "Loading";
        LoadingState["Loaded"] = "Loaded";
    })(exports.LoadingState || (exports.LoadingState = {}));
    var showDetailsConfigToken = new i0.InjectionToken('shows the transactions details modal');
    var TransactionsService = /** @class */ (function () {
        function TransactionsService(transactionsDataHttpService, accountService, deprecationsService, locale) {
            var _this = this;
            this.transactionsDataHttpService = transactionsDataHttpService;
            this.accountService = accountService;
            this.deprecationsService = deprecationsService;
            this.locale = locale;
            this.selectedAccount = new rxjs.ReplaySubject(1);
            this.pageSize = new rxjs.ReplaySubject(1);
            this.initialListOptions = new rxjs.ReplaySubject(1);
            this.options = new rxjs.BehaviorSubject({});
            this.listRefresh = new rxjs.Subject();
            this.listOptions = new rxjs.BehaviorSubject(defaultInitialListOptions);
            this.exportOptions = new rxjs.BehaviorSubject(defaultInitialExportOptions);
            this.showPendingTransactionsOnTop = new rxjs.ReplaySubject(1);
            this.getOrPostEndpoint = new rxjs.BehaviorSubject(exports.EndpointType.GET_REQUEST);
            this.transactionsList = rxjs.merge(this.listOptions.pipe(operators.filter(function (listOptions) { return typeof listOptions.account.arrangementId !== 'undefined'; }), operators.distinctUntilChanged(deepEqual)), this.listRefresh).pipe(cacheRequest(function (listOptions) {
                _this.loadingState.next(listOptions.onLoad === exports.OnLoadAction.Append
                    ? exports.LoadingState.LoadingMore
                    : listOptions.onLoad === exports.OnLoadAction.ReplacePage
                        ? exports.LoadingState.LoadingPage
                        : exports.LoadingState.Loading);
                return rxjs.combineLatest([
                    _this.loadTransactions(listOptions).pipe(operators.tap(function () {
                        _this.loadingState.next(exports.LoadingState.Loaded);
                    }), operators.map(function (transactionsList) { return ({
                        transactionsList: transactionsList,
                        onLoad: listOptions.onLoad,
                    }); })),
                    rxjs.iif(multipleAccountsPredicate(listOptions), _this.accountService.getAllArrangements().pipe(operators.map(function (accounts) {
                        var accountMap = new Map();
                        accounts.forEach(function (account) {
                            accountMap.set(account.id, account);
                        });
                        return accountMap;
                    })), rxjs.of(new Map())),
                    _this.isFilterApplied,
                    _this.isSearchApplied,
                ]).pipe(operators.map(function (_a) {
                    var _b = __read(_a, 4), transactions = _b[0], accountMap = _b[1], isFilterApplied = _b[2], isSearchApplied = _b[3];
                    transactions.transactionsList.items = transactions.transactionsList.items.map(function (transaction) { return (Object.assign(Object.assign({}, transaction), { account: accountMap.get(transaction.arrangementId || '') })); });
                    transactions.transactionsList.initialRequest = !(isFilterApplied || isSearchApplied);
                    return transactions;
                }));
            }), operators.scan(onLoadTransactions, { items: [], totalCount: 0 }));
            this.loadingState = new rxjs.BehaviorSubject(exports.LoadingState.NotLoaded);
            this.isFilterApplied = this.listOptions.pipe(operators.map(function (options) { return !exports.TransactionsFilterOptions.isEmpty(options.filter || {}); }));
            this.isSearchApplied = this.listOptions.pipe(operators.map(function (options) { return !exports.TransactionsFilterOptions.isEmpty(options.search || {}); }));
            // Base this.options on this.selectedAccount, this.pageSize, this.initialListOptions
            rxjs.combineLatest([this.selectedAccount, this.pageSize, this.initialListOptions, this.showPendingTransactionsOnTop])
                .pipe(operators.map(function (_a) {
                var _b = __read(_a, 4), selectedAccount = _b[0], pageSize = _b[1], initialListOptions = _b[2], showPendingTransactionsOnTop = _b[3];
                return (Object.assign(Object.assign(Object.assign({}, (showPendingTransactionsOnTop ? { state: exports.TransactionState.completed } : {})), { account: {
                        arrangementId: selectedAccount,
                    }, pagination: {
                        from: 0,
                        size: pageSize,
                    }, onLoad: exports.OnLoadAction.Replace }), initialListOptions));
            }))
                .subscribe(this.options);
            // Base this.listOptions on this.options
            this.options
                .pipe(operators.scan(function (acc, curr) { return Object.assign({}, acc, curr); }, defaultInitialListOptions))
                .subscribe(this.listOptions);
            // Base this.exportOptions on this.listOptions
            this.listOptions
                .pipe(operators.filter(function (listOptions) { return typeof listOptions.account.arrangementId !== 'undefined'; }), operators.map(function (params) { return (Object.assign(Object.assign({}, params), { pagination: undefined, state: undefined, exportType: 'csv', locale: 'en-US' })); }))
                .subscribe(this.exportOptions);
        }
        TransactionsService.prototype.loadTransactions = function (listOptions) {
            var transactionPayload = exports.TransactionsList.toHttpRequest(listOptions);
            var transactionsResponse;
            if (this.isUsingPostEndpoints) {
                transactionsResponse = this.transactionsDataHttpService.getTransactionsWithPost({
                    transactionListRequest: transactionPayload,
                }, 'response');
            }
            else {
                this.deprecationsService.logDeprecatedFeature('[TransactionsService: loadTransactions] GET endpoints deprecated. Please use POST endpoints by changing CXP configuration');
                transactionsResponse = this.transactionsDataHttpService.getTransactions(transactionPayload, 'response');
            }
            return transactionsResponse.pipe(operators.map(exports.TransactionsList.fromHttpResponse), operators.catchError(function (err) { return rxjs.of({
                items: [],
                totalCount: 0,
                httpResponseError: err,
            }); }));
        };
        TransactionsService.prototype.exportTransactions = function (exportOptions) {
            var exportPayload = exports.TransactionsList.toHttpRequest(Object.assign(Object.assign({}, exportOptions), { locale: this.locale }));
            if (this.isUsingPostEndpoints) {
                return this.transactionsDataHttpService.getTransactionsExportWithPost({
                    transactionListRequest: exportPayload,
                }, 'response');
            }
            else {
                this.deprecationsService.logDeprecatedFeature('[TransactionsService: exportTransactions] GET endpoints deprecated. Please use POST endpoints by changing CXP configuration');
                return this.transactionsDataHttpService.getTransactionsExport(exportPayload, 'response');
            }
        };
        TransactionsService.prototype.search = function (query) {
            var searchOptions = {
                query: query,
            };
            var paginationOptions = Object.assign(Object.assign({}, (this.options.getValue().pagination || defaultPaginationOptions.pagination)), { from: 0 });
            this.options.next(Object.assign(Object.assign(Object.assign({}, this.options.getValue()), defaultSearchOptions), { pagination: paginationOptions, search: searchOptions, onLoad: exports.OnLoadAction.Replace }));
        };
        TransactionsService.prototype.clearSearch = function () {
            var paginationOptions = Object.assign(Object.assign({}, (this.options.getValue().pagination || defaultPaginationOptions.pagination)), { from: 0 });
            this.options.next(Object.assign(Object.assign(Object.assign({}, this.options.getValue()), defaultSearchOptions), { pagination: paginationOptions, onLoad: exports.OnLoadAction.Replace }));
        };
        TransactionsService.prototype.filter = function (filterOptions) {
            var paginationOptions = Object.assign(Object.assign({}, (this.options.getValue().pagination || defaultPaginationOptions.pagination)), { from: 0 });
            this.options.next(Object.assign(Object.assign(Object.assign({}, this.options.getValue()), defaultFilterOptions), { pagination: paginationOptions, filter: Object.assign({}, filterOptions), onLoad: exports.OnLoadAction.Replace }));
        };
        TransactionsService.prototype.clearFilter = function () {
            var paginationOptions = Object.assign(Object.assign({}, (this.options.getValue().pagination || defaultPaginationOptions.pagination)), { from: 0 });
            this.options.next(Object.assign(Object.assign(Object.assign({}, this.options.getValue()), defaultFilterOptions), { pagination: paginationOptions, onLoad: exports.OnLoadAction.Replace }));
        };
        TransactionsService.prototype.exportToType = function (type) {
            var _this = this;
            return this.exportOptions.pipe(operators.first(), operators.switchMap(function (exportOptions) { return _this.exportTransactions(Object.assign(Object.assign({}, exportOptions), { exportType: type })); }));
        };
        TransactionsService.prototype.loadMore = function () {
            var currentPaginationOptions = this.options.getValue().pagination || defaultPaginationOptions.pagination;
            var paginationOptions = Object.assign(Object.assign({}, currentPaginationOptions), { from: currentPaginationOptions.from + 1 });
            this.options.next({
                pagination: paginationOptions,
                onLoad: exports.OnLoadAction.Append,
            });
        };
        TransactionsService.prototype.sort = function (sortOptions) {
            var currentPaginationOptions = this.options.getValue().pagination || defaultPaginationOptions.pagination;
            this.options.next({
                sort: Object.assign({}, sortOptions),
                pagination: Object.assign(Object.assign({}, currentPaginationOptions), { from: 0 }),
                onLoad: exports.OnLoadAction.ReplacePage,
            });
        };
        TransactionsService.prototype.pageChange = function (page) {
            var paginationOptions = Object.assign(Object.assign(Object.assign({}, defaultPaginationOptions.pagination), this.options.getValue().pagination), { from: page });
            this.options.next({
                pagination: paginationOptions,
                onLoad: exports.OnLoadAction.ReplacePage,
            });
        };
        TransactionsService.prototype.getTransactionsFrom = function (selectedAccount, pageSize, initialListOptions, showPendingTransactionsOnTop, getOrPostEndpoint) {
            if (initialListOptions === void 0) { initialListOptions = rxjs.of({}); }
            if (showPendingTransactionsOnTop === void 0) { showPendingTransactionsOnTop = rxjs.of(false); }
            if (getOrPostEndpoint === void 0) { getOrPostEndpoint = rxjs.of(exports.EndpointType.GET_REQUEST); }
            selectedAccount.subscribe(this.selectedAccount);
            pageSize.subscribe(this.pageSize);
            initialListOptions.subscribe(this.initialListOptions);
            showPendingTransactionsOnTop.subscribe(this.showPendingTransactionsOnTop);
            getOrPostEndpoint.subscribe(this.getOrPostEndpoint);
        };
        TransactionsService.prototype.getCurrentPage = function () {
            return this.listOptions.pipe(operators.map(function (options) { return (options.pagination || defaultPaginationOptions.pagination).from; }));
        };
        TransactionsService.prototype.getTransactionsList = function () {
            return this.transactionsList;
        };
        TransactionsService.prototype.retryFiltering = function () {
            this.listRefresh.next(this.listOptions.getValue());
        };
        TransactionsService.prototype.refreshTransactions = function () {
            var currentPaginationOptions = this.options.getValue().pagination || defaultPaginationOptions.pagination;
            var paginationOptions = Object.assign(Object.assign({}, currentPaginationOptions), { from: 0 });
            var newOptions = Object.assign(Object.assign({}, this.listOptions.getValue()), { pagination: paginationOptions, onLoad: exports.OnLoadAction.ReplacePage });
            if (deepEqual(newOptions, this.listOptions.getValue())) {
                this.listRefresh.next(this.listOptions.getValue());
            }
            else {
                this.options.next({
                    pagination: paginationOptions,
                    onLoad: exports.OnLoadAction.ReplacePage,
                });
            }
        };
        Object.defineProperty(TransactionsService.prototype, "isUsingPostEndpoints", {
            get: function () {
                return this.getOrPostEndpoint.getValue() === exports.EndpointType.POST_REQUEST;
            },
            enumerable: false,
            configurable: true
        });
        TransactionsService.prototype.ngOnDestroy = function () {
            this.listRefresh.complete();
            this.selectedAccount.complete();
            this.pageSize.complete();
            this.initialListOptions.complete();
            this.options.complete();
            this.listOptions.complete();
            this.exportOptions.complete();
            this.showPendingTransactionsOnTop.complete();
            this.loadingState.complete();
            this.getOrPostEndpoint.complete();
        };
        return TransactionsService;
    }());
    TransactionsService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsService, deps: [{ token: i1__namespace$1.TransactionClientHttpService }, { token: AccountsService }, { token: i3__namespace.DeprecationsService }, { token: i0.LOCALE_ID }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    TransactionsService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () {
            return [{ type: i1__namespace$1.TransactionClientHttpService }, { type: AccountsService }, { type: i3__namespace.DeprecationsService }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [i0.LOCALE_ID]
                        }] }];
        } });

    var TransactionsNumberOfResultsFoundComponent = /** @class */ (function () {
        function TransactionsNumberOfResultsFoundComponent() {
            /**
             * Reference to instance of customizable component.
             */
            this.hostRef = this;
            /**
             * Number of results found after filtering or searching.
             */
            this.numberOfResultsFound = 0;
            /**
             * The loading state of the transactions list.
             */
            this.loadingState = exports.LoadingState.NotLoaded;
            /**
             * Whether filter is applied or not.
             */
            this.isFilterApplied = false;
            /**
             * Whether search is applied or not.
             */
            this.isSearchApplied = false;
        }
        Object.defineProperty(TransactionsNumberOfResultsFoundComponent.prototype, "isLoaded", {
            /**
             * Whether loading has finished or not.
             */
            get: function () {
                return this.loadingState === exports.LoadingState.Loaded;
            },
            enumerable: false,
            configurable: true
        });
        return TransactionsNumberOfResultsFoundComponent;
    }());
    TransactionsNumberOfResultsFoundComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsNumberOfResultsFoundComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    TransactionsNumberOfResultsFoundComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsNumberOfResultsFoundComponent, selector: "bb-transactions-number-of-results-found", inputs: { numberOfResultsFound: "numberOfResultsFound", loadingState: "loadingState", isFilterApplied: "isFilterApplied", isSearchApplied: "isSearchApplied" }, ngImport: i0__namespace, template: "<ng-container bbTransactionsNumberOfResultsFoundCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbTransactionsNumberOfResultsFoundCustomizable let-hostRef>\n  <div\n    class=\"bb-card__header bb-subtitle\"\n    [ngClass]=\"{ 'sr-only': hostRef.numberOfResultsFound <= 0 }\"\n    i18n=\"Number of results found for the applied filter@@transactions.list.numberOfResultsFound\"\n    *ngIf=\"hostRef.isLoaded && (hostRef.isFilterApplied || hostRef.isSearchApplied)\"\n    aria-live=\"assertive\"\n  >\n    {hostRef.numberOfResultsFound, plural, =0 {No results} =1 {1 result} other\n    {{{ hostRef.numberOfResultsFound }} results}} found\n  </div>\n</ng-template>\n", directives: [{ type: i0__namespace.forwardRef(function () { return TransactionsNumberOfResultsFoundCustomizableDirective; }), selector: "[bbTransactionsNumberOfResultsFoundCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i2__namespace.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0__namespace.forwardRef(function () { return i2__namespace.NgClass; }), selector: "[ngClass]", inputs: ["class", "ngClass"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsNumberOfResultsFoundComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-transactions-number-of-results-found',
                        templateUrl: 'transactions-number-of-results-found.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], propDecorators: { numberOfResultsFound: [{
                    type: i0.Input
                }], loadingState: [{
                    type: i0.Input
                }], isFilterApplied: [{
                    type: i0.Input
                }], isSearchApplied: [{
                    type: i0.Input
                }] } });
    var TransactionsNumberOfResultsFoundCustomizableDirective = /** @class */ (function (_super) {
        __extends(TransactionsNumberOfResultsFoundCustomizableDirective, _super);
        function TransactionsNumberOfResultsFoundCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return TransactionsNumberOfResultsFoundCustomizableDirective;
    }(i3.BbTemplate));
    TransactionsNumberOfResultsFoundCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsNumberOfResultsFoundCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    TransactionsNumberOfResultsFoundCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsNumberOfResultsFoundCustomizableDirective, selector: "[bbTransactionsNumberOfResultsFoundCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsNumberOfResultsFoundCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbTransactionsNumberOfResultsFoundCustomizable]',
                    }]
            }] });

    exports.TransactionsCheckImageType = void 0;
    (function (TransactionsCheckImageType) {
        TransactionsCheckImageType["PNG"] = "image/png";
        TransactionsCheckImageType["JPEG"] = "image/jpeg";
    })(exports.TransactionsCheckImageType || (exports.TransactionsCheckImageType = {}));
    exports.TransactionsCheckImageSide = void 0;
    (function (TransactionsCheckImageSide) {
        TransactionsCheckImageSide["FRONT"] = "FRONT";
        TransactionsCheckImageSide["BACK"] = "BACK";
    })(exports.TransactionsCheckImageSide || (exports.TransactionsCheckImageSide = {}));
    //eslint-disable-next-line @typescript-eslint/no-namespace
    exports.TransactionsCheckImages = void 0;
    (function (TransactionsCheckImages) {
        // eslint-disable-next-line no-inner-declarations
        function processImages(imageObject) {
            return {
                side: imageObject.side,
                mimeType: imageObject.mimeType,
                content: imageObject.content,
            };
        }
        function fromHttpResponse(response) {
            var imagesArray = (response.body && response.body.images) || [];
            var mappedImages = imagesArray.map(processImages);
            return {
                images: mappedImages,
            };
        }
        TransactionsCheckImages.fromHttpResponse = fromHttpResponse;
    })(exports.TransactionsCheckImages || (exports.TransactionsCheckImages = {}));

    exports.TransactionsDetailsLoadingState = void 0;
    (function (TransactionsDetailsLoadingState) {
        TransactionsDetailsLoadingState[TransactionsDetailsLoadingState["error"] = -1] = "error";
        TransactionsDetailsLoadingState[TransactionsDetailsLoadingState["serverError"] = -2] = "serverError";
        TransactionsDetailsLoadingState[TransactionsDetailsLoadingState["badRequestError"] = -3] = "badRequestError";
        TransactionsDetailsLoadingState[TransactionsDetailsLoadingState["notFoundError"] = -4] = "notFoundError";
        TransactionsDetailsLoadingState[TransactionsDetailsLoadingState["loading"] = 0] = "loading";
        TransactionsDetailsLoadingState[TransactionsDetailsLoadingState["done"] = 1] = "done";
        TransactionsDetailsLoadingState[TransactionsDetailsLoadingState["notLoaded"] = 2] = "notLoaded";
        TransactionsDetailsLoadingState[TransactionsDetailsLoadingState["notStarted"] = 3] = "notStarted";
    })(exports.TransactionsDetailsLoadingState || (exports.TransactionsDetailsLoadingState = {}));
    exports.DisputeStatusEnum = void 0;
    (function (DisputeStatusEnum) {
        DisputeStatusEnum["Refunded"] = "REFUNDED";
        DisputeStatusEnum["Undisputed"] = "UNDISPUTED";
        DisputeStatusEnum["Pending"] = "PENDING";
        DisputeStatusEnum["Rejected"] = "REJECTED";
    })(exports.DisputeStatusEnum || (exports.DisputeStatusEnum = {}));

    var AccessibilityKeyboardDirective = /** @class */ (function () {
        function AccessibilityKeyboardDirective(element) {
            this.element = element;
            element.nativeElement.tabIndex = 0;
        }
        // eslint-disable-next-line
        AccessibilityKeyboardDirective.prototype.eventListener = function (event) {
            this.element.nativeElement.click(event);
        };
        return AccessibilityKeyboardDirective;
    }());
    AccessibilityKeyboardDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccessibilityKeyboardDirective, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    AccessibilityKeyboardDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: AccessibilityKeyboardDirective, selector: "[bbAccessibilityKeyboard]", host: { listeners: { "keydown.enter": "eventListener($event)", "keydown.space": "eventListener($event)" } }, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AccessibilityKeyboardDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbAccessibilityKeyboard]',
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; }, propDecorators: { eventListener: [{
                    type: i0.HostListener,
                    args: ['keydown.enter', ['$event']]
                }, {
                    type: i0.HostListener,
                    args: ['keydown.space', ['$event']]
                }] } });

    var TransactionCheckImageItemComponent = /** @class */ (function () {
        function TransactionCheckImageItemComponent(sanitizer) {
            this.sanitizer = sanitizer;
            this.sideText = '';
            this.imageAlt = '';
            this.selectImage = new i0.EventEmitter();
        }
        Object.defineProperty(TransactionCheckImageItemComponent.prototype, "imageFileName", {
            get: function () {
                var fileType = this.image ? this.image.mimeType.replace('image/', '') : '';
                var side = this.image ? this.image.side : '';
                return this.imageCheckNumber + "-" + side + "." + fileType;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TransactionCheckImageItemComponent.prototype, "formatedImageSource", {
            get: function () {
                var mimeType = this.image ? this.image.mimeType : '';
                var content = this.image ? this.image.content : '';
                return "data:" + mimeType + ";base64," + content;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TransactionCheckImageItemComponent.prototype, "imageCheckNumber", {
            get: function () {
                return this.transaction && this.transaction.checkSerialNumber;
            },
            enumerable: false,
            configurable: true
        });
        TransactionCheckImageItemComponent.prototype.createImageSource = function () {
            return this.sanitizer.bypassSecurityTrustResourceUrl(this.formatedImageSource);
        };
        TransactionCheckImageItemComponent.prototype.toggleDocumentViewer = function () {
            this.selectImage.emit();
        };
        return TransactionCheckImageItemComponent;
    }());
    TransactionCheckImageItemComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionCheckImageItemComponent, deps: [{ token: i1__namespace$2.DomSanitizer }], target: i0__namespace.ɵɵFactoryTarget.Component });
    TransactionCheckImageItemComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TransactionCheckImageItemComponent, selector: "bb-transaction-check-image-item", inputs: { image: "image", transaction: "transaction", sideText: "sideText", imageAlt: "imageAlt" }, outputs: { selectImage: "selectImage" }, ngImport: i0__namespace, template: "<ng-container>\n  <span>{{ sideText }}</span>\n  <div\n    role=\"img\"\n    data-role=\"check-image-item\"\n    class=\"bb-check-img-container\"\n    (click)=\"!!image && toggleDocumentViewer()\"\n    attr.aria-label=\"{{ sideText }} image container\"\n    i18n-aria-label=\"\n      Image container for front or back check image@@transaction-check-image-item.aria-label.image-container\"\n    bbAccessibilityKeyboard\n  >\n    <ng-container *ngIf=\"!!image; else noImage\">\n      <div class=\"bb-check-img-container-state\">\n        <div class=\"bb-check-img-container-state__container\">\n          <bb-icon-ui\n            name=\"remove-red-eye\"\n            size=\"lg\"\n            color=\"white\"\n            aria-label=\"Expand Image\"\n            i18n-aria-label=\"Expand image@@transaction-check-image-item.aria-label.expand-icon\"\n          ></bb-icon-ui>\n        </div>\n      </div>\n      <img class=\"bb-check-img-container__img\" alt=\"{{ imageAlt }}\" [src]=\"createImageSource()\" />\n    </ng-container>\n  </div>\n</ng-container>\n\n<ng-template #noImage>\n  <div class=\"bb-check-no-img\">\n    <div class=\"bb-check-no-img__icon\">\n      <bb-icon-ui\n        name=\"broken-image\"\n        size=\"lg\"\n        aria-label=\"No image\"\n        i18n-aria-label=\"No image@@transaction-check-image-item.aria-label.no-image-icon\"\n      ></bb-icon-ui>\n    </div>\n  </div>\n</ng-template>\n", components: [{ type: i1__namespace$3.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: AccessibilityKeyboardDirective, selector: "[bbAccessibilityKeyboard]" }, { type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionCheckImageItemComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-transaction-check-image-item',
                        templateUrl: 'transaction-check-image-item.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$2.DomSanitizer }]; }, propDecorators: { image: [{
                    type: i0.Input
                }], transaction: [{
                    type: i0.Input
                }], sideText: [{
                    type: i0.Input
                }], imageAlt: [{
                    type: i0.Input
                }], selectImage: [{
                    type: i0.Output
                }] } });

    var DOCUMENT_LOAD_DELAY_MS = 400;
    var DocumentViewerType;
    (function (DocumentViewerType) {
        DocumentViewerType["JPEG"] = "image/jpeg";
        DocumentViewerType["JPG"] = "image/jpg";
        DocumentViewerType["PNG"] = "image/png";
        DocumentViewerType["WEBP"] = "image/webp";
        DocumentViewerType["GIF"] = "image/gif";
        DocumentViewerType["BMP"] = "image/bmp";
    })(DocumentViewerType || (DocumentViewerType = {}));
    var isDocumentViewerType = function (type) { return Object.values(DocumentViewerType).includes(type); };
    var downloadFile = function (url, fileName) {
        var link = document.createElement('a');
        link.href = url;
        link.download = "" + fileName;
        link.click();
    };
    var KEY_CODES;
    (function (KEY_CODES) {
        KEY_CODES["UP"] = "ArrowUp";
        KEY_CODES["DOWN"] = "ArrowDown";
        KEY_CODES["ENTER"] = "Enter";
        KEY_CODES["SPACE"] = " ";
        KEY_CODES["TAB"] = "Tab";
        KEY_CODES["BACKSPACE"] = "Backspace";
        KEY_CODES["DELETE"] = "Delete";
        KEY_CODES["ESCAPE"] = "Escape";
        KEY_CODES["X"] = "x";
        KEY_CODES["V"] = "v";
        KEY_CODES["LEFT"] = "ArrowLeft";
        KEY_CODES["RIGHT"] = "ArrowRight";
    })(KEY_CODES || (KEY_CODES = {}));
    var KEY_CODE_TO_CODE = {
        9: KEY_CODES.TAB,
        38: KEY_CODES.UP,
        40: KEY_CODES.DOWN,
        32: KEY_CODES.SPACE,
        13: KEY_CODES.ENTER,
        46: KEY_CODES.DELETE,
        8: KEY_CODES.BACKSPACE,
        27: KEY_CODES.ESCAPE,
        88: KEY_CODES.X,
        86: KEY_CODES.V,
    };
    function browserIsMsie() {
        return navigator.userAgent.indexOf('MSIE') > -1 || navigator.userAgent.indexOf('Trident/') > -1;
    }
    function getKeyCode(event) {
        // NOTE: detect IE
        if (browserIsMsie()) {
            return KEY_CODE_TO_CODE[event.keyCode];
        }
        return event.code;
    }

    var DocumentViewerBackdropComponent = /** @class */ (function () {
        function DocumentViewerBackdropComponent() {
        }
        Object.defineProperty(DocumentViewerBackdropComponent.prototype, "containerStyles", {
            get: function () {
                var _a, _b;
                return ((_b = (_a = this.options) === null || _a === void 0 ? void 0 : _a.container) === null || _b === void 0 ? void 0 : _b.styles) || null;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DocumentViewerBackdropComponent.prototype, "hasCustomStyles", {
            get: function () {
                var _a, _b;
                return Boolean((_b = (_a = this.options) === null || _a === void 0 ? void 0 : _a.container) === null || _b === void 0 ? void 0 : _b.styles);
            },
            enumerable: false,
            configurable: true
        });
        return DocumentViewerBackdropComponent;
    }());
    DocumentViewerBackdropComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DocumentViewerBackdropComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    DocumentViewerBackdropComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: DocumentViewerBackdropComponent, selector: "bb-document-viewer-backdrop", inputs: { options: "options" }, ngImport: i0__namespace, template: "<div\n  class=\"bb-document-viewer-backdrop modal-backdrop show\"\n  aria-hidden=\"true\"\n  [class.bb-document-viewer-backdrop-default-off]=\"hasCustomStyles\"\n  [ngStyle]=\"containerStyles\"\n></div>\n", directives: [{ type: i2__namespace.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DocumentViewerBackdropComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-document-viewer-backdrop',
                        templateUrl: './document-viewer-backdrop.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], propDecorators: { options: [{
                    type: i0.Input
                }] } });

    var DocumentViewerHeaderComponent = /** @class */ (function () {
        function DocumentViewerHeaderComponent(ngZone) {
            this.ngZone = ngZone;
            this.isLoading = false;
            //eslint-disable-next-line @angular-eslint/no-output-native
            this.close = new i0.EventEmitter();
        }
        Object.defineProperty(DocumentViewerHeaderComponent.prototype, "source", {
            set: function (src) {
                if (src) {
                    this.revokeObjectURL();
                    this.documentObjectURL = src;
                }
            },
            enumerable: false,
            configurable: true
        });
        DocumentViewerHeaderComponent.prototype.ngOnDestroy = function () {
            this.revokeObjectURL();
        };
        DocumentViewerHeaderComponent.prototype.onOpenDocument = function () {
            if (!this.documentObjectURL) {
                return;
            }
            this.openImage(this.documentObjectURL);
        };
        DocumentViewerHeaderComponent.prototype.onPrintDocument = function () {
            if (!this.documentObjectURL) {
                return;
            }
            this.printWindow(this.openImage(this.documentObjectURL));
        };
        DocumentViewerHeaderComponent.prototype.onDownloadDocument = function () {
            if (!this.documentObjectURL) {
                return;
            }
            downloadFile(this.documentObjectURL, this.filename);
        };
        DocumentViewerHeaderComponent.prototype.openImage = function (documentObjectURL) {
            var image = new Image();
            var newWindow = window.open('about:blank', '_new');
            image.src = documentObjectURL;
            newWindow.document.write(image.outerHTML);
            return newWindow;
        };
        DocumentViewerHeaderComponent.prototype.printWindow = function (window) {
            this.ngZone.runOutsideAngular(function () {
                setTimeout(function () {
                    window.focus();
                    window.print();
                }, 0);
            });
        };
        DocumentViewerHeaderComponent.prototype.revokeObjectURL = function () {
            if (this.documentObjectURL) {
                window.URL.revokeObjectURL(this.documentObjectURL);
            }
        };
        return DocumentViewerHeaderComponent;
    }());
    DocumentViewerHeaderComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DocumentViewerHeaderComponent, deps: [{ token: i0__namespace.NgZone }], target: i0__namespace.ɵɵFactoryTarget.Component });
    DocumentViewerHeaderComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: DocumentViewerHeaderComponent, selector: "bb-document-viewer-header", inputs: { filename: "filename", filetype: "filetype", source: "source", isLoading: "isLoading" }, outputs: { close: "close" }, ngImport: i0__namespace, template: "<div class=\"bb-document-viewer-header\">\n  <span class=\"bb-document-viewer-header__title bb-stack\">\n    <bb-icon-ui\n      class=\"bb-stack__item bb-stack__item--spacing-sm\"\n      data-role=\"document-viewer-header-icon\"\n      name=\"description\"\n      size=\"md\"\n    ></bb-icon-ui>\n    <span class=\"bb-stack__item\" data-role=\"document-viewer-header-filename\">{{ filename }}</span>\n  </span>\n  <div class=\"bb-stack\">\n    <!-- web view -->\n    <div\n      class=\"\n        bb-stack__item bb-stack__item--spacing-none bb-stack__item--push-right\n        bb-document-viewer-header-controls__web-view\n      \"\n    >\n      <button\n        bbButton\n        data-role=\"print-document-btn\"\n        class=\"bb-document-viewer-interactor-controls__button bb-document-viewer-header__spacer\"\n        aria-label=\"print\"\n        i18n-aria-label=\"Print document button@@document-viewer-header.aria-label.print-document-btn\"\n        buttonSize=\"sm\"\n        (click)=\"!isLoading && onPrintDocument()\"\n      >\n        <bb-icon-ui name=\"local-printshop\" size=\"md\" color=\"light\"></bb-icon-ui>\n      </button>\n\n      <button\n        bbButton\n        data-role=\"download-document-btn\"\n        class=\"bb-document-viewer-interactor-controls__button bb-document-viewer-header__spacer\"\n        aria-label=\"download\"\n        i18n-aria-label=\"Download document button@document-viewer-header.aria-label.download-document-btn\"\n        buttonSize=\"sm\"\n        (click)=\"!isLoading && onDownloadDocument()\"\n      >\n        <bb-icon-ui name=\"save-alt\" size=\"md\" color=\"light\"></bb-icon-ui>\n      </button>\n\n      <button\n        bbButton\n        data-role=\"open-document-btn\"\n        class=\"bb-document-viewer-interactor-controls__button bb-document-viewer-header__spacer\"\n        aria-label=\"new tab\"\n        i18n-aria-label=\"Open document in new tab button@@document-viewer-header.aria-label.open-document-new-tab-btn\"\n        buttonSize=\"sm\"\n        (click)=\"!isLoading && onOpenDocument()\"\n      >\n        <bb-icon-ui name=\"open-in-new\" size=\"md\" color=\"light\"></bb-icon-ui>\n      </button>\n\n      <button\n        bbButton\n        data-role=\"close-document-btn\"\n        class=\"bb-document-viewer-interactor-controls__button bb-document-viewer-header__spacer\"\n        aria-label=\"close\"\n        i18n-aria-label=\"Close document button@@document-viewer-header.aria-label.close-btn\"\n        buttonSize=\"sm\"\n        (click)=\"close.emit()\"\n      >\n        <bb-icon-ui name=\"times\" size=\"md\" color=\"light\"></bb-icon-ui>\n      </button>\n    </div>\n\n    <!-- mobile view -->\n    <div\n      class=\"\n        bb-stack__item bb-stack__item--spacing-none bb-stack__item--push-right\n        bb-document-viewer-header-controls__mobile-view\n      \"\n    >\n      <div class=\"bb-stack\">\n        <bb-dropdown-menu-ui\n          container=\"body\"\n          data-role=\"options-menu-dropdown\"\n          class=\"bb-stack__item\"\n          icon=\"ellipsis-h\"\n          btnColor=\"muted\"\n          buttonSize=\"sm\"\n          [btnCircle]=\"true\"\n          iconSize=\"md\"\n          iconColor=\"light\"\n          ariaLabel=\"Check image export dropdown menu\"\n          i18n-ariaLabel=\"Check image export dropdown menu@@document-viewer-header.export-dropdown-menu.ariaLabel\"\n        >\n          <ng-template bbDropdownMenuItem>\n            <a\n              role=\"menuitem\"\n              class=\"dropdown-item\"\n              data-role=\"open-document-item\"\n              (click)=\"!isLoading && onOpenDocument()\"\n              href=\"javaScript:void(0);\"\n            >\n              <bb-icon-ui class=\"bb-document-viewer-header__dropdown-icon\" name=\"open-in-new\" size=\"md\"></bb-icon-ui>\n              <span i18n=\"Open image in new tab@@document-viewer-header.controlsList.open-in-new-tab\"\n                >Open in new tab</span\n              >\n            </a>\n            <a\n              role=\"menuitem\"\n              class=\"dropdown-item\"\n              data-role=\"download-document-item\"\n              (click)=\"!isLoading && onDownloadDocument()\"\n              href=\"javaScript:void(0);\"\n            >\n              <bb-icon-ui class=\"bb-document-viewer-header__dropdown-icon\" name=\"save-alt\" size=\"md\"></bb-icon-ui>\n              <span i18n=\"Download image@@document-viewer-header.controlsList.download-image\">Download</span>\n            </a>\n            <a\n              role=\"menuitem\"\n              class=\"dropdown-item\"\n              data-role=\"print-document-item\"\n              (click)=\"!isLoading && onPrintDocument()\"\n              href=\"javaScript:void(0);\"\n            >\n              <bb-icon-ui\n                class=\"bb-document-viewer-header__dropdown-icon\"\n                name=\"local-printshop\"\n                size=\"md\"\n              ></bb-icon-ui>\n              <span i18n=\"Print image@@document-viewer-header.controlsList.print-image\">Print</span>\n            </a>\n          </ng-template>\n        </bb-dropdown-menu-ui>\n        <button\n          bbButton\n          data-role=\"close-document-btn\"\n          class=\"bb-stack__item bb-document-viewer-interactor-controls__button bb-document-viewer-header__spacer\"\n          aria-label=\"close\"\n          i18n-aria-label=\"Close document button@@document-viewer-header.aria-label.close-btn\"\n          buttonSize=\"sm\"\n          (click)=\"close.emit()\"\n        >\n          <bb-icon-ui name=\"times\" size=\"md\" color=\"light\"></bb-icon-ui>\n        </button>\n      </div>\n    </div>\n  </div>\n</div>\n", components: [{ type: i1__namespace$3.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i2__namespace$1.DropdownMenuComponent, selector: "bb-dropdown-menu-ui", inputs: ["label", "disabled", "options", "icon", "iconSize", "iconColor", "btnColor", "btnCircle", "optionLabelKey", "fullWidth", "autoClose", "container", "position", "ariaLabel", "dropDownMenuRole", "dropDownMenuId", "buttonSize", "dropDownButtonLabel", "visibleElementDependingOnViewport", "role"], outputs: ["select"] }], directives: [{ type: i3__namespace$1.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i2__namespace$1.DropdownMenuItemDirective, selector: "ng-template[bbDropdownMenuItem]" }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DocumentViewerHeaderComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-document-viewer-header',
                        templateUrl: './document-viewer-header.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.NgZone }]; }, propDecorators: { filename: [{
                    type: i0.Input
                }], filetype: [{
                    type: i0.Input
                }], source: [{
                    type: i0.Input
                }], isLoading: [{
                    type: i0.Input
                }], close: [{
                    type: i0.Output
                }] } });

    var DocumentViewerInteractorComponent = /** @class */ (function () {
        function DocumentViewerInteractorComponent() {
            this.navigationState = { currIdx: 0, total: 0 };
            this.canZoomOut = true;
            this.canZoomIn = true;
            this.navigate = new i0.EventEmitter();
            this.zoomIn = new i0.EventEmitter();
            this.zoomOut = new i0.EventEmitter();
        }
        Object.defineProperty(DocumentViewerInteractorComponent.prototype, "navigationStatus", {
            get: function () {
                return this.navigationState.currIdx + 1 + '/' + this.navigationState.total;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DocumentViewerInteractorComponent.prototype, "hasNextNavigation", {
            get: function () {
                return this.navigationState.currIdx + 1 < this.navigationState.total;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DocumentViewerInteractorComponent.prototype, "hasPrevNavigation", {
            get: function () {
                return this.navigationState.currIdx > 0;
            },
            enumerable: false,
            configurable: true
        });
        DocumentViewerInteractorComponent.prototype.prev = function () {
            this.navigate.emit(this.navigationState.currIdx - 1);
        };
        DocumentViewerInteractorComponent.prototype.next = function () {
            this.navigate.emit(this.navigationState.currIdx + 1);
        };
        return DocumentViewerInteractorComponent;
    }());
    DocumentViewerInteractorComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DocumentViewerInteractorComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    DocumentViewerInteractorComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: DocumentViewerInteractorComponent, selector: "bb-document-viewer-interactor", inputs: { navigationState: "navigationState", canZoomOut: "canZoomOut", canZoomIn: "canZoomIn" }, outputs: { navigate: "navigate", zoomIn: "zoomIn", zoomOut: "zoomOut" }, ngImport: i0__namespace, template: "<div class=\"bb-document-viewer-interactor\">\n  <div class=\"bb-document-viewer-interactor__container\" (click)=\"$event.stopPropagation()\">\n    <div class=\"bb-document-viewer-interactor-controls\">\n      <button\n        bbButton\n        data-role=\"previous-document-btn\"\n        *ngIf=\"hasPrevNavigation\"\n        class=\"bb-document-viewer-interactor-controls__button bb-document-viewer-interactor-controls__spacer\"\n        buttonSize=\"sm\"\n        (click)=\"prev()\"\n        aria-label=\"previous\"\n        i18n-aria-label=\"Previous document button@@document-viewer-interactor.aria-label.previous-document-button\"\n      >\n        <bb-icon-ui name=\"angle-left\" color=\"light\" size=\"md\"></bb-icon-ui>\n      </button>\n      <span class=\"bb-document-viewer-interactor-controls__spacer\">{{ navigationStatus }}</span>\n      <button\n        bbButton\n        data-role=\"next-document-btn\"\n        *ngIf=\"hasNextNavigation\"\n        class=\"bb-document-viewer-interactor-controls__button\"\n        buttonSize=\"sm\"\n        (click)=\"next()\"\n        aria-label=\"next\"\n        i18n-aria-label=\"Next document button@@document-viewer-interactor.aria-label.next-document-button\"\n      >\n        <bb-icon-ui name=\"angle-right\" color=\"light\" size=\"md\"></bb-icon-ui>\n      </button>\n    </div>\n    <div class=\"bb-document-viewer-interactor-separator\"></div>\n    <div class=\"bb-document-viewer-interactor-controls\">\n      <button\n        bbButton\n        data-role=\"zoom-out-btn\"\n        class=\"bb-document-viewer-interactor-controls__button bb-document-viewer-interactor-controls__spacer\"\n        [disabled]=\"!canZoomOut\"\n        buttonSize=\"sm\"\n        (click)=\"zoomOut.emit()\"\n        aria-label=\"zoom out\"\n        i18n-aria-label=\"Zoom out document button@@document-viewer-interactor.aria-label.zoomOut-document-button\"\n      >\n        <bb-icon-ui name=\"zoom-out\" color=\"light\" size=\"md\"></bb-icon-ui>\n      </button>\n      <button\n        bbButton\n        data-role=\"zoom-in-btn\"\n        class=\"bb-document-viewer-interactor-controls__button\"\n        [disabled]=\"!canZoomIn\"\n        aria-label=\"zoom in\"\n        buttonSize=\"sm\"\n        (click)=\"zoomIn.emit()\"\n        i18n-aria-label=\"Zoom in document button@@document-viewer-interactor.aria-label.zoomIn-document-button\"\n      >\n        <bb-icon-ui name=\"zoom-in\" color=\"light\" size=\"md\"></bb-icon-ui>\n      </button>\n    </div>\n  </div>\n</div>\n", components: [{ type: i1__namespace$3.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }], directives: [{ type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3__namespace$1.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DocumentViewerInteractorComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-document-viewer-interactor',
                        templateUrl: './document-viewer-interactor.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], propDecorators: { navigationState: [{
                    type: i0.Input
                }], canZoomOut: [{
                    type: i0.Input
                }], canZoomIn: [{
                    type: i0.Input
                }], navigate: [{
                    type: i0.Output
                }], zoomIn: [{
                    type: i0.Output
                }], zoomOut: [{
                    type: i0.Output
                }] } });

    var ZOOM_FACTOR = 1.1;
    var ZOOM_IN_THRESHOLD = 4;
    var ZOOM_OUT_THRESHOLD = 0.1;
    var ImageViewerComponent = /** @class */ (function () {
        function ImageViewerComponent(domSanitizer) {
            this.domSanitizer = domSanitizer;
            this.navigationState = { currIdx: 0, total: 0 };
            this.navigate = new i0.EventEmitter();
            this.imageUiState = { scale: 1 };
        }
        Object.defineProperty(ImageViewerComponent.prototype, "source", {
            set: function (src) {
                if (src) {
                    this.revokeObjectURLIfNeeded();
                    this.imageObjectUrl = src;
                    this.imageObjectTrustedUrl = this.domSanitizer.bypassSecurityTrustResourceUrl(this.imageObjectUrl);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ImageViewerComponent.prototype, "canZoomOut", {
            get: function () {
                return this.imageUiState.scale >= ZOOM_OUT_THRESHOLD;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ImageViewerComponent.prototype, "canZoomIn", {
            get: function () {
                return this.imageUiState.scale <= ZOOM_IN_THRESHOLD;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ImageViewerComponent.prototype, "scale", {
            get: function () {
                return this.domSanitizer.bypassSecurityTrustStyle("scale(" + this.imageUiState.scale + ")");
            },
            enumerable: false,
            configurable: true
        });
        ImageViewerComponent.prototype.ngOnDestroy = function () {
            this.revokeObjectURLIfNeeded();
        };
        ImageViewerComponent.prototype.zoomIn = function () {
            if (this.canZoomIn) {
                this.imageUiState.scale *= ZOOM_FACTOR;
            }
        };
        ImageViewerComponent.prototype.zoomOut = function () {
            if (this.canZoomOut) {
                this.imageUiState.scale /= ZOOM_FACTOR;
            }
        };
        ImageViewerComponent.prototype.revokeObjectURLIfNeeded = function () {
            if (this.imageObjectUrl) {
                window.URL.revokeObjectURL(this.imageObjectUrl);
            }
        };
        return ImageViewerComponent;
    }());
    ImageViewerComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ImageViewerComponent, deps: [{ token: i1__namespace$2.DomSanitizer }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ImageViewerComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ImageViewerComponent, selector: "bb-image-viewer", inputs: { source: "source", navigationState: "navigationState" }, outputs: { navigate: "navigate" }, ngImport: i0__namespace, template: "<div class=\"bb-img-viewer-container bb-stack bb-stack--center\">\n  <img\n    #imgRef\n    class=\"bb-img-viewer-container__img\"\n    [style.transform]=\"scale\"\n    [src]=\"imageObjectTrustedUrl\"\n    alt=\"Transaction check image\"\n    (click)=\"$event.stopPropagation()\"\n  />\n</div>\n<bb-document-viewer-interactor\n  [navigationState]=\"navigationState\"\n  [canZoomOut]=\"canZoomOut\"\n  [canZoomIn]=\"canZoomIn\"\n  (navigate)=\"navigate.emit($event)\"\n  (zoomIn)=\"zoomIn()\"\n  (zoomOut)=\"zoomOut()\"\n></bb-document-viewer-interactor>\n", components: [{ type: DocumentViewerInteractorComponent, selector: "bb-document-viewer-interactor", inputs: ["navigationState", "canZoomOut", "canZoomIn"], outputs: ["navigate", "zoomIn", "zoomOut"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ImageViewerComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-image-viewer',
                        templateUrl: './image-viewer.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$2.DomSanitizer }]; }, propDecorators: { source: [{
                    type: i0.Input
                }], navigationState: [{
                    type: i0.Input
                }], navigate: [{
                    type: i0.Output
                }] } });

    var DocumentViewerContainerComponent = /** @class */ (function () {
        function DocumentViewerContainerComponent(elemRef) {
            this.elemRef = elemRef;
            this.documentRefSrcs = [];
            // eslint-disable-next-line
            this.close = new i0.EventEmitter();
            this.isLoading$ = new rxjs.BehaviorSubject(false);
            this.isHttpError$ = new rxjs.BehaviorSubject(false);
            this.documentType = DocumentViewerType;
            /**
             * Internal
             */
            this.activeDocumentRefIdx$ = new rxjs.ReplaySubject(1);
            this.destroy$ = new rxjs.Subject();
        }
        Object.defineProperty(DocumentViewerContainerComponent.prototype, "activeDocumentRefIdx", {
            set: function (idx) {
                this.activeDocumentRefIdx$.next(idx);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DocumentViewerContainerComponent.prototype, "containerStyles", {
            get: function () {
                var _a, _b;
                return ((_b = (_a = this.options) === null || _a === void 0 ? void 0 : _a.container) === null || _b === void 0 ? void 0 : _b.styles) || null;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DocumentViewerContainerComponent.prototype, "viewerScale", {
            get: function () {
                var _a;
                return (_a = this.options) === null || _a === void 0 ? void 0 : _a.scale;
            },
            enumerable: false,
            configurable: true
        });
        DocumentViewerContainerComponent.prototype.ngOnInit = function () {
            this.setDocumentRefChangeSources();
            this.setFocus();
        };
        DocumentViewerContainerComponent.prototype.ngOnDestroy = function () {
            this.destroy$.next();
            this.destroy$.complete();
        };
        DocumentViewerContainerComponent.prototype.onEscape = function () {
            this.close.emit();
        };
        DocumentViewerContainerComponent.prototype.closeDialog = function () {
            this.close.emit();
        };
        DocumentViewerContainerComponent.prototype.onNavigate = function (idx) {
            this.activeDocumentRefIdx$.next(idx);
        };
        DocumentViewerContainerComponent.prototype.setDocumentRefChangeSources = function () {
            var _this = this;
            this.documentSrc$ = this.activeDocumentRefIdx$.pipe(operators.distinctUntilChanged(), operators.tap(function () {
                _this.isLoading$.next(true);
                _this.isHttpError$.next(false);
            }), operators.switchMap(function (idx) { return rxjs.combineLatest([_this.documentRefSrcs[idx].src, rxjs.timer(DOCUMENT_LOAD_DELAY_MS)]).pipe(operators.map(function (_c) {
                var _d = __read(_c, 1), src = _d[0];
                return src;
            }), operators.finalize(function () {
                _this.isLoading$.next(false);
            })); }), operators.catchError(function (error) {
                _this.isHttpError$.next(true);
                throw error;
            }), operators.share());
            this.documentFilename$ = this.activeDocumentRefIdx$.pipe(operators.map(function (idx) { return _this.documentRefSrcs[idx].filename; }));
            this.documentFiletype$ = this.activeDocumentRefIdx$.pipe(operators.map(function (idx) { return _this.documentRefSrcs[idx].filetype; }));
            this.navigationState$ = this.activeDocumentRefIdx$.pipe(operators.map(function (idx) { return ({ currIdx: idx, total: _this.documentRefSrcs.length }); }));
        };
        DocumentViewerContainerComponent.prototype.setFocus = function () {
            this.elemRef.nativeElement.focus();
        };
        return DocumentViewerContainerComponent;
    }());
    DocumentViewerContainerComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DocumentViewerContainerComponent, deps: [{ token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    DocumentViewerContainerComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: DocumentViewerContainerComponent, selector: "bb-document-viewer-container", inputs: { documentRefSrcs: "documentRefSrcs", activeDocumentRefIdx: "activeDocumentRefIdx", options: "options" }, outputs: { close: "close" }, host: { listeners: { "document:keydown.escape": "onEscape()" } }, viewQueries: [{ propertyName: "viewContainer", first: true, predicate: ["viewerContainer"], descendants: true, read: i0.ViewContainerRef, static: true }], ngImport: i0__namespace, template: "<div\n  class=\"bb-document-viewer-container show\"\n  role=\"dialog\"\n  aria-modal=\"true\"\n  tabindex=\"-1\"\n  [ngStyle]=\"containerStyles\"\n  cdkTrapFocus\n  cdkTrapFocusAutoCapture=\"true\"\n>\n  <div class=\"bb-document-viewer-container__wrapper\">\n    <bb-document-viewer-header\n      data-role=\"document-viewer-header\"\n      [filename]=\"(documentFilename$ | async)!\"\n      [source]=\"(documentSrc$ | async)!\"\n      [filetype]=\"(documentFiletype$ | async)!\"\n      [isLoading]=\"(isLoading$ | async)!\"\n      (close)=\"close.emit()\"\n    ></bb-document-viewer-header>\n\n    <ng-container *ngIf=\"documentSrc$ | async as source\">\n      <ng-container *ngIf=\"!(isLoading$ | async) && !(isHttpError$ | async)\">\n        <div\n          class=\"bb-document-viewer-container-image\"\n          *ngIf=\"documentFiletype$ | async as documentFiletype\"\n          (click)=\"closeDialog()\"\n        >\n          <bb-image-viewer\n            data-role=\"document-viewer-image\"\n            [source]=\"source\"\n            [navigationState]=\"(navigationState$ | async)!\"\n            (navigate)=\"onNavigate($event)\"\n          ></bb-image-viewer>\n        </div>\n      </ng-container>\n    </ng-container>\n\n    <bb-loading-indicator-ui\n      *ngIf=\"isLoading$ | async\"\n      class=\"bb-document-viewer-container__state\"\n      data-role=\"document-viewer-loading-state\"\n      loaderSize=\"lg\"\n    >\n    </bb-loading-indicator-ui>\n\n    <bb-empty-state-ui\n      *ngIf=\"!(isLoading$ | async) && (isHttpError$ | async)\"\n      data-role=\"document-viewer-error-state\"\n      class=\"bb-document-viewer-container__state\"\n      iconColor=\"white\"\n      iconModifier=\"error-outline\"\n      iconSize=\"xxl\"\n      title=\"Unknown Error\"\n      i18n-title=\"Unknown http error title@@document-viewer-component.uknown-error-title\"\n      subtitle=\"Try to reload the page or contact the system administrator\"\n      i18n-subtitle=\"\n        Try to reload the page or contact the system administrator@@document-viewer-component.uknown-error-subtitle\"\n    ></bb-empty-state-ui>\n  </div>\n</div>\n", components: [{ type: DocumentViewerHeaderComponent, selector: "bb-document-viewer-header", inputs: ["filename", "filetype", "source", "isLoading"], outputs: ["close"] }, { type: ImageViewerComponent, selector: "bb-image-viewer", inputs: ["source", "navigationState"], outputs: ["navigate"] }, { type: i3__namespace$2.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i4__namespace.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i5__namespace.CdkTrapFocus, selector: "[cdkTrapFocus]", inputs: ["cdkTrapFocus", "cdkTrapFocusAutoCapture"], exportAs: ["cdkTrapFocus"] }, { type: i2__namespace.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i2__namespace.AsyncPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DocumentViewerContainerComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-document-viewer-container',
                        templateUrl: './document-viewer-container.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }]; }, propDecorators: { documentRefSrcs: [{
                    type: i0.Input
                }], activeDocumentRefIdx: [{
                    type: i0.Input
                }], options: [{
                    type: i0.Input
                }], close: [{
                    type: i0.Output
                }], viewContainer: [{
                    type: i0.ViewChild,
                    args: ['viewerContainer', { static: true, read: i0.ViewContainerRef }]
                }], onEscape: [{
                    type: i0.HostListener,
                    args: ['document:keydown.escape']
                }] } });

    var TransactionCheckImageDocumentViewerComponent = /** @class */ (function () {
        function TransactionCheckImageDocumentViewerComponent() {
            this.position = 0;
            this.closeViewer = new i0.EventEmitter();
        }
        TransactionCheckImageDocumentViewerComponent.prototype.toDocumentRefSrc = function () {
            var _this = this;
            var images = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                images[_i] = arguments[_i];
            }
            return images
                .filter(function (item) { return !!item; })
                .map(function (image) {
                var mimeType = image.mimeType, content = image.content, side = image.side;
                var fileType = image === null || image === void 0 ? void 0 : image.mimeType.replace('image/', '');
                var filename = _this.imageCheckNumber + "-" + side + "." + fileType;
                return {
                    filename: filename,
                    filetype: image === null || image === void 0 ? void 0 : image.mimeType,
                    src: rxjs.of("data:" + mimeType + ";base64," + content),
                };
            });
        };
        Object.defineProperty(TransactionCheckImageDocumentViewerComponent.prototype, "imagesRefsSrc", {
            get: function () {
                return this.toDocumentRefSrc(this.imageFront, this.imageBack);
            },
            enumerable: false,
            configurable: true
        });
        TransactionCheckImageDocumentViewerComponent.prototype.closeDocumentViewer = function () {
            this.closeViewer.emit();
        };
        TransactionCheckImageDocumentViewerComponent.prototype.trapKeyEvent = function (event) {
            if (getKeyCode(event) !== KEY_CODES.ESCAPE) {
                event.stopPropagation();
            }
        };
        return TransactionCheckImageDocumentViewerComponent;
    }());
    TransactionCheckImageDocumentViewerComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionCheckImageDocumentViewerComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    TransactionCheckImageDocumentViewerComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TransactionCheckImageDocumentViewerComponent, selector: "bb-transaction-check-image-document-viewer", inputs: { imageCheckNumber: "imageCheckNumber", imageFront: "imageFront", imageBack: "imageBack", position: "position" }, outputs: { closeViewer: "closeViewer" }, ngImport: i0__namespace, template: "<div (keydown)=\"trapKeyEvent($event)\" (keyup)=\"trapKeyEvent($event)\">\n  <bb-document-viewer-backdrop></bb-document-viewer-backdrop>\n  <bb-document-viewer-container\n    [documentRefSrcs]=\"imagesRefsSrc\"\n    [activeDocumentRefIdx]=\"position\"\n    cdkTrapFocus\n    (close)=\"closeDocumentViewer()\"\n  ></bb-document-viewer-container>\n</div>\n", components: [{ type: DocumentViewerBackdropComponent, selector: "bb-document-viewer-backdrop", inputs: ["options"] }, { type: DocumentViewerContainerComponent, selector: "bb-document-viewer-container", inputs: ["documentRefSrcs", "activeDocumentRefIdx", "options"], outputs: ["close"] }], directives: [{ type: i5__namespace.CdkTrapFocus, selector: "[cdkTrapFocus]", inputs: ["cdkTrapFocus", "cdkTrapFocusAutoCapture"], exportAs: ["cdkTrapFocus"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionCheckImageDocumentViewerComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-transaction-check-image-document-viewer',
                        templateUrl: 'transaction-check-image-document-viewer.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], propDecorators: { imageCheckNumber: [{
                    type: i0.Input
                }], imageFront: [{
                    type: i0.Input
                }], imageBack: [{
                    type: i0.Input
                }], position: [{
                    type: i0.Input
                }], closeViewer: [{
                    type: i0.Output
                }] } });

    var TransactionCheckImageComponent = /** @class */ (function () {
        function TransactionCheckImageComponent() {
            this.loadingStateEnum = exports.TransactionsDetailsLoadingState;
            /**
             * Index to display in the document viewer. For the purpose of hidding and showing
             * the viewer this will be base 1
             * when the value is 0 the document viewer will not be visible
             */
            this.index = 0;
        }
        Object.defineProperty(TransactionCheckImageComponent.prototype, "checkImagesList", {
            /**
             * The check image object.
             */
            // eslint-disable-next-line
            set: function (value) {
                this.imageFront = value && value.images.find(function (data) { return data.side === exports.TransactionsCheckImageSide.FRONT; });
                this.imageBack = value && value.images.find(function (data) { return data.side === exports.TransactionsCheckImageSide.BACK; });
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TransactionCheckImageComponent.prototype, "hasErrors", {
            get: function () {
                return (this.transactionDetailsLoadingStatus &&
                    this.transactionDetailsLoadingStatus.checkImages &&
                    this.transactionDetailsLoadingStatus.checkImages < 0);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TransactionCheckImageComponent.prototype, "isDone", {
            get: function () {
                return (this.transactionDetailsLoadingStatus &&
                    this.transactionDetailsLoadingStatus.checkImages === exports.TransactionsDetailsLoadingState.done);
            },
            enumerable: false,
            configurable: true
        });
        TransactionCheckImageComponent.prototype.onClose = function () {
            this.index = 0;
        };
        TransactionCheckImageComponent.prototype.selectImage = function (index) {
            this.index = index;
        };
        return TransactionCheckImageComponent;
    }());
    TransactionCheckImageComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionCheckImageComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    TransactionCheckImageComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TransactionCheckImageComponent, selector: "bb-transaction-check-image", inputs: { transaction: "transaction", checkImagesList: "checkImagesList", transactionDetailsLoadingStatus: "transactionDetailsLoadingStatus" }, ngImport: i0__namespace, template: "<ng-container *ngIf=\"isDone || hasErrors; else loadingState\">\n  <div class=\"bb-stack bb-stack--wrap\">\n    <div class=\"bb-stack__item\">\n      <bb-transaction-check-image-item\n        *ngIf=\"!!imageFront || hasErrors\"\n        [image]=\"imageFront\"\n        data-role=\"check-image-item-front\"\n        (selectImage)=\"selectImage(1)\"\n        [transaction]=\"transaction\"\n        sideText=\"Front\"\n        imageAlt=\"Front check image\"\n        i18n-sideText=\"Front side title of check image@@transactions.detail.check-image.front.title\"\n        i18n-imageAlt=\"Front side alt of check image@@transactions.detail.check-image.front.alt-image\"\n      ></bb-transaction-check-image-item>\n    </div>\n\n    <div class=\"bb-stack__item\">\n      <bb-transaction-check-image-item\n        *ngIf=\"!!imageBack || hasErrors\"\n        data-role=\"check-image-item-back\"\n        (selectImage)=\"selectImage(imageFront ? 2 : 1)\"\n        [image]=\"imageBack\"\n        [transaction]=\"transaction\"\n        sideText=\"Back\"\n        imageAlt=\"Back check image\"\n        i18n-sideText=\"Back side title of check image@@transactions.detail.check-image.back.title\"\n        i18n-imageAlt=\"Back side alt of check image@@transactions.detail.check-image.back.alt-image\"\n      ></bb-transaction-check-image-item>\n    </div>\n  </div>\n\n  <bb-transaction-check-image-document-viewer\n    *ngIf=\"index > 0\"\n    data-role=\"check-image-document-viewer\"\n    [imageCheckNumber]=\"transaction?.checkSerialNumber\"\n    [imageFront]=\"imageFront\"\n    [imageBack]=\"imageBack\"\n    [position]=\"index - 1\"\n    (closeViewer)=\"onClose()\"\n  ></bb-transaction-check-image-document-viewer>\n\n  <ng-container *ngIf=\"hasErrors\">\n    <span\n      i18n=\"Something went wrong@@transactions.detail.check-image.server-error\"\n      class=\"bb-input-validation-message\"\n      data-role=\"check-image-server-error-state\"\n      *ngIf=\"transactionDetailsLoadingStatus?.checkImages === loadingStateEnum?.serverError\"\n    >\n      Something went wrong. Please try again later.\n    </span>\n\n    <span\n      i18n=\"Check images cannot be viewed at the moment@@transactions.detail.check-image.bad-request-error\"\n      class=\"bb-input-validation-message\"\n      data-role=\"check-image-bad-request-error-state\"\n      *ngIf=\"transactionDetailsLoadingStatus?.checkImages === loadingStateEnum?.badRequestError\"\n    >\n      Check images cannot be viewed at the moment, please try again later or contact your financial institution.\n    </span>\n\n    <span\n      i18n=\"Check images cannot be viewed at the moment@@transactions.detail.check-image.not-found-error\"\n      class=\"bb-input-validation-message\"\n      data-role=\"check-image-not-found-error-state\"\n      *ngIf=\"transactionDetailsLoadingStatus?.checkImages === loadingStateEnum?.notFoundError\"\n    >\n      Check images cannot be viewed at the moment, please try again later or contact your financial institution.\n    </span>\n  </ng-container>\n</ng-container>\n\n<ng-template #loadingState>\n  <bb-loading-indicator-ui loaderSize=\"lg\"></bb-loading-indicator-ui>\n</ng-template>\n", components: [{ type: TransactionCheckImageItemComponent, selector: "bb-transaction-check-image-item", inputs: ["image", "transaction", "sideText", "imageAlt"], outputs: ["selectImage"] }, { type: TransactionCheckImageDocumentViewerComponent, selector: "bb-transaction-check-image-document-viewer", inputs: ["imageCheckNumber", "imageFront", "imageBack", "position"], outputs: ["closeViewer"] }, { type: i3__namespace$2.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }], directives: [{ type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionCheckImageComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-transaction-check-image',
                        templateUrl: './transaction-check-image.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], propDecorators: { transaction: [{
                    type: i0.Input
                }], checkImagesList: [{
                    type: i0.Input
                }], transactionDetailsLoadingStatus: [{
                    type: i0.Input
                }] } });

    var TransactionsInquiryDisputeComponent = /** @class */ (function () {
        function TransactionsInquiryDisputeComponent(fb) {
            this.fb = fb;
            this.enableDispute = false;
            /**
             * Whether the dispute & inquiry form is sending or not.
             */
            this.state = exports.TransactionsDetailsLoadingState.notStarted;
            this.submitReport = new i0.EventEmitter();
            this.cancelReport = new i0.EventEmitter();
            this.messageChange = new i0.EventEmitter();
            this.fileChange = new i0.EventEmitter();
            this.fileRemoved = new i0.EventEmitter();
            this.confirmationDialogActive = false;
            this.labels = {
                inquire: $localize(templateObject_1$1 || (templateObject_1$1 = __makeTemplateObject([":Inquire tooltip@@transactions.dispute.inquire.inquireLabel:Inquire for more information"], [":Inquire tooltip@@transactions.dispute.inquire.inquireLabel:Inquire for more information"]))),
                dispute: $localize(templateObject_2$1 || (templateObject_2$1 = __makeTemplateObject([":Dispute tooltip@@transactions.dispute.inquire.disputeLabel:Dispute this transaction"], [":Dispute tooltip@@transactions.dispute.inquire.disputeLabel:Dispute this transaction"]))),
            };
            this.loadingStateEnum = exports.TransactionsDetailsLoadingState;
            this.unsubscribeSubject = new rxjs.Subject();
            this.transactionReportForm = this.fb.group({
                topic: [{ value: '' }, this.topicRequired],
                attachment: [undefined],
                subject: [{ name: '' }],
                body: [''],
            });
        }
        TransactionsInquiryDisputeComponent.prototype.topicRequired = function (control) {
            var _a;
            return ((_a = control.value) === null || _a === void 0 ? void 0 : _a.value) === '' ? { required: 'value is required' } : null;
        };
        TransactionsInquiryDisputeComponent.prototype.getControl = function (field) {
            return this.transactionReportForm.controls[field];
        };
        TransactionsInquiryDisputeComponent.prototype.setFormValue = function (values) {
            this.transactionReportForm.patchValue({
                body: values.body,
                attachments: values.attachments,
            }, { emitEvent: false });
        };
        TransactionsInquiryDisputeComponent.prototype.hasError = function (field, type) {
            var control = this.getControl(field);
            return control && control.errors && control.errors[type];
        };
        TransactionsInquiryDisputeComponent.prototype.isInvalidControl = function (field) {
            var control = this.getControl(field);
            return !!control && control.touched && control.invalid;
        };
        TransactionsInquiryDisputeComponent.prototype.saveReport = function () {
            if (this.transactionReportForm.valid) {
                this.submitReport.emit(this.message);
            }
            else {
                this.transactionReportForm.markAllAsTouched();
            }
        };
        TransactionsInquiryDisputeComponent.prototype.closeReportForm = function () {
            this.cancelReport.emit();
            this.closeConfirmationDialog();
        };
        TransactionsInquiryDisputeComponent.prototype.closeConfirmationDialog = function () {
            this.confirmationDialogActive = false;
        };
        TransactionsInquiryDisputeComponent.prototype.processLabel = function (label) {
            var arr = label.split(' ');
            var last = arr.splice(arr.length - 1, 1);
            return __spreadArray([arr.join(' ') + ' '], __read(last));
        };
        TransactionsInquiryDisputeComponent.prototype.ngOnInit = function () {
            var _this = this;
            if (this.message) {
                this.setFormValue(this.message);
            }
            this.transactionReportForm.valueChanges.pipe(operators.takeUntil(this.unsubscribeSubject)).subscribe({
                next: function (formValue) {
                    _this.messageChange.emit(Object.assign(Object.assign({}, _this.message), formValue));
                },
            });
        };
        TransactionsInquiryDisputeComponent.prototype.uploadFile = function (input) {
            if (input.files && input.files[0]) {
                var file = input.files[0];
                this.fileChange.emit(file);
                input.value = '';
            }
        };
        TransactionsInquiryDisputeComponent.prototype.removeAttachment = function (attachment) {
            this.fileRemoved.emit(attachment);
        };
        TransactionsInquiryDisputeComponent.prototype.ngOnDestroy = function () {
            this.unsubscribeSubject.next();
            this.unsubscribeSubject.complete();
        };
        return TransactionsInquiryDisputeComponent;
    }());
    TransactionsInquiryDisputeComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsInquiryDisputeComponent, deps: [{ token: i1__namespace$4.FormBuilder }], target: i0__namespace.ɵɵFactoryTarget.Component });
    TransactionsInquiryDisputeComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsInquiryDisputeComponent, selector: "bb-transactions-inquiry-dispute", inputs: { message: "message", enableDispute: "enableDispute", state: "state", inquireAndDisputeTopics: "inquireAndDisputeTopics" }, outputs: { submitReport: "submitReport", cancelReport: "cancelReport", messageChange: "messageChange", fileChange: "fileChange", fileRemoved: "fileRemoved" }, ngImport: i0__namespace, template: "<div class=\"bb-transaction-list-item-detail-additional-info\">\n  <form [formGroup]=\"transactionReportForm\">\n    <div class=\"bb-block bb-block--lg\" bbAccessibilityKeyboard>\n      <h5\n        class=\"bb-transaction-list-item-detail-additional-info__title\"\n        data-role=\"dispute-inquiry-header\"\n        i18n=\"dispute and inquiry form header@@transactions.dispute.inquiry.header\"\n      >\n        Does this transaction seem suspicious or incorrect?\n      </h5>\n      <p\n        class=\"bb-text-support text-small\"\n        data-role=\"dispute-inquiry-subHeader\"\n        i18n=\"dispute and inquiry form subHeader@@transactions.dispute.inquiry.subHeader\"\n      >\n        It\u2019s important to provide as much detail as possible for the bank employee to quickly and accurately review your\n        issue.\n      </p>\n    </div>\n\n    <div class=\"form-group bb-block bb-block--lg\">\n      <bb-input-radio-group-ui\n        aria-labelledby=\"'label-transaction-dispute'\"\n        [horizontal]=\"false\"\n        formControlName=\"topic\"\n        verticalAlign=\"top\"\n      >\n        <bb-input-radio-ui\n          value=\"dispute\"\n          [labelTemplate]=\"optionsLabel\"\n          labelTemplateContext=\"dispute\"\n          [disabled]=\"!enableDispute\"\n        ></bb-input-radio-ui>\n        <bb-input-radio-ui\n          value=\"inquire\"\n          [labelTemplate]=\"optionsLabel\"\n          labelTemplateContext=\"inquire\"\n        ></bb-input-radio-ui>\n      </bb-input-radio-group-ui>\n      <bb-input-validation-message-ui [showErrors]=\"isInvalidControl('topic')\">\n        <span\n          *ngIf=\"hasError('topic', 'required')\"\n          i18n=\"Error message if field is required@@transactions.dispute.errors.operationRequired\"\n        >\n          Required field\n        </span>\n      </bb-input-validation-message-ui>\n    </div>\n\n    <div class=\"form-group bb-block\" [ngClass]=\"{ 'bb-block--sm': isInvalidControl('body') }\">\n      <bb-rich-text-editor-ui\n        aria-label=\"Report body\"\n        formControlName=\"body\"\n        placeholder=\"Please tell us more about this transaction...\"\n        i18n-aria-label=\"label report body body@@transactions.dispute.inquiry.body.label\"\n        i18n-placeholder=\"Place holder for messages body@@transactions.dispute.inquiry.body.message\"\n        [readonly]=\"false\"\n        [required]=\"true\"\n      ></bb-rich-text-editor-ui>\n\n      <bb-input-validation-message-ui [showErrors]=\"isInvalidControl('body')\">\n        <span\n          *ngIf=\"hasError('body', 'required')\"\n          i18n=\"Error message if field is required@@transactions.dispute.errors.bodyRequired\"\n        >\n          Required field\n        </span>\n      </bb-input-validation-message-ui>\n    </div>\n\n    <div class=\"form-group bb-block bb-block--sm\">\n      <bb-input-file-ui\n        label=\"Default file input\"\n        data-role=\"attachment-file-input\"\n        [disabled]=\"state === loadingStateEnum.loading\"\n        (change)=\"uploadFile($any($event.target))\"\n      ></bb-input-file-ui>\n    </div>\n\n    <div class=\"row bb-inquire-dispute-attachments\" *ngIf=\"message?.attachments?.length\">\n      <div *ngFor=\"let attachment of message?.attachments\" class=\"col-md-6 bb-inquire-dispute-attachments__item\">\n        <div class=\"bb-block bb-block--md\">\n          <bb-file-attachment-ui\n            data-role=\"attachment-file\"\n            [name]=\"attachment.name\"\n            [size]=\"attachment.size\"\n            [fileContent]=\"attachment.content\"\n            [block]=\"true\"\n            [loading]=\"attachment.id === undefined\"\n            [deletable]=\"attachment.id !== undefined\"\n            (delete)=\"removeAttachment(attachment)\"\n          ></bb-file-attachment-ui>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"bb-block bb-block--xl bb-text-align-left\">\n      <ng-container *ngIf=\"state === loadingStateEnum.error\">\n        <bb-alert-ui\n          title=\"Couldn\u2019t send your message\"\n          data-role=\"send-report-failed\"\n          message=\"Something went wrong. Please try again.\"\n          i18n-title=\"\n            Send report failed notification|Message for a notification displayed when sending transaction report request\n            has failed@@transactions.notification.error.send.title\"\n          i18n-message=\"Send report failed notification message@@transactions.notification.error.send.message\"\n        ></bb-alert-ui>\n      </ng-container>\n    </div>\n\n    <div class=\"bb-button-bar\">\n      <bb-load-button-ui\n        bbButton\n        color=\"primary\"\n        class=\"bb-button-bar__button\"\n        data-role=\"dispute-inquiry-send-button\"\n        [isLoading]=\"state === loadingStateEnum.loading\"\n        (click)=\"state !== loadingStateEnum.loading && saveReport()\"\n        i18n=\"Send button@@transactions.dispute.inquiry.button.send\"\n      >\n        Send\n      </bb-load-button-ui>\n      <button\n        *ngIf=\"state !== loadingStateEnum.loading\"\n        bbButton\n        type=\"button\"\n        color=\"secondary\"\n        data-role=\"dispute-inquiry-cancel-button\"\n        class=\"bb-button-bar__button\"\n        (click)=\"confirmationDialogActive = true\"\n        i18n=\"Cancel button@@transactions.dispute.inquiry.button.cancel\"\n      >\n        Cancel\n      </button>\n    </div>\n  </form>\n</div>\n\n<ng-template #disputeTipContent>\n  <div class=\"bb-text-align-left\">\n    <span i18n=\"Description inside a tooltip@@transactions.dispute.inquiry.tooltip.description\">\n      If this transaction is incorrect, you can raise a claim for a refund.\n    </span>\n  </div>\n</ng-template>\n\n<ng-template #inqueryTipContent>\n  <div class=\"bb-text-align-left\">\n    <span i18n=\"Description inside inquery tooltip@@transactions.dispute.inquiry.tooltip.description\">\n      If you are suspicious about this transaction, you can ask the bank to gather more information about it.\n    </span>\n  </div>\n</ng-template>\n\n<ng-template #optionsLabel let-context=\"labelTemplateContext\">\n  <ng-container *ngIf=\"context === 'dispute'\">\n    <span class=\"bb-input-radio-group__radio-label\">\n      {{ processLabel(labels.dispute)[0] }}\n    </span>\n    <span class=\"d-inline-block\">\n      <span class=\"bb-input-radio-group__radio-label\">\n        {{ processLabel(labels.dispute)[1] }}\n      </span>\n      <bb-icon-ui\n        class=\"bb-transactions-list-pending-header__tooltip bb-transactions-list-pending-header__tooltip--md-top\"\n        role=\"tooltip\"\n        name=\"info\"\n        size=\"md\"\n        [bbTooltip]=\"disputeTipContent\"\n        triggers=\"hover click\"\n        placement=\"right\"\n        bbAccessibilityKeyboard\n      ></bb-icon-ui>\n      <bb-icon-ui\n        class=\"bb-transactions-list-pending-header__tooltip bb-transactions-list-pending-header__tooltip--sm-bottom\"\n        role=\"tooltip\"\n        name=\"info\"\n        size=\"md\"\n        [bbTooltip]=\"disputeTipContent\"\n        triggers=\"hover click\"\n        placement=\"left\"\n        bbAccessibilityKeyboard\n      ></bb-icon-ui>\n      <span\n        class=\"sr-only\"\n        i18n=\"Description inside a tooltip@@transactions.dispute.inquiry.tooltip.hidden.description\"\n      >\n        If this transaction is incorrect, you can raise a claim for a refund.\n      </span>\n    </span>\n  </ng-container>\n\n  <ng-container *ngIf=\"context === 'inquire'\">\n    <span class=\"bb-input-radio-group__radio-label\">\n      {{ processLabel(labels.inquire)[0] }}\n    </span>\n    <span class=\"d-inline-block\">\n      <span class=\"bb-input-radio-group__radio-label\">\n        {{ processLabel(labels.inquire)[1] }}\n      </span>\n      <bb-icon-ui\n        class=\"bb-transactions-list-pending-header__tooltip bb-transactions-list-pending-header__tooltip--md-top\"\n        role=\"tooltip\"\n        name=\"info\"\n        size=\"md\"\n        [bbTooltip]=\"inqueryTipContent\"\n        triggers=\"hover click\"\n        placement=\"right\"\n        bbAccessibilityKeyboard\n      ></bb-icon-ui>\n      <bb-icon-ui\n        class=\"bb-transactions-list-pending-header__tooltip bb-transactions-list-pending-header__tooltip--sm-bottom\"\n        role=\"tooltip\"\n        name=\"info\"\n        size=\"md\"\n        [bbTooltip]=\"inqueryTipContent\"\n        triggers=\"hover click\"\n        placement=\"top\"\n        bbAccessibilityKeyboard\n      ></bb-icon-ui>\n      <span\n        class=\"sr-only\"\n        i18n=\"Description inside inquery tooltip@@transactions.dispute.inquiry.tooltip.hidden.description\"\n      >\n        If you are suspicious about this transaction, you can ask the bank to gather more information about it.\n      </span>\n    </span>\n  </ng-container>\n</ng-template>\n\n<!-- Cancel Dispute or Inquiry -->\n<bb-modal-ui [isOpen]=\"confirmationDialogActive\" (cancel)=\"closeConfirmationDialog()\">\n  <div class=\"modal-header\">\n    <h2\n      id=\"modal-basic-title\"\n      class=\"modal-title\"\n      data-role=\"discard-report-modal-header\"\n      i18n=\"Discard your report?|Discard report modal title@@transactions.dispute.inquiry.discard.report.modal.title\"\n    >\n      Discard your report?\n    </h2>\n  </div>\n\n  <div class=\"modal-body\">\n    <span\n      data-role=\"discard-report-modal-subHeader\"\n      i18n=\"All entered data will be lost.|Discard report info@@transactions.dispute.inquiry.discard.report.modal.info\"\n    >\n      All entered data will be lost.\n    </span>\n  </div>\n\n  <div class=\"modal-footer\">\n    <div class=\"bb-button-bar\">\n      <button\n        bbButton\n        color=\"danger\"\n        class=\"bb-button-bar__button\"\n        data-role=\"discard-report-modal-discard-button\"\n        (click)=\"closeReportForm()\"\n        i18n=\"Discard|Discard report button label@@transactions.dispute.inquiry.discard.report.modal.discard.button\"\n      >\n        Discard\n      </button>\n\n      <button\n        bbButton\n        color=\"secondary\"\n        class=\"bb-button-bar__button\"\n        data-role=\"discard-report-modal-cancel-button\"\n        (click)=\"closeConfirmationDialog()\"\n        i18n=\"Cancel|Cancel button label@@transactions.dispute.inquiry.discard.report.modal.cancel.button\"\n      >\n        Cancel\n      </button>\n    </div>\n  </div>\n</bb-modal-ui>\n", components: [{ type: i2__namespace$2.InputRadioGroupComponent, selector: "bb-input-radio-group-ui", inputs: ["horizontal", "preselect", "name", "verticalAlign"] }, { type: i2__namespace$2.InputRadioComponent, selector: "bb-input-radio-ui", inputs: ["labelTemplate", "labelTemplateContext", "value", "label", "aria-label", "aria-labelledby", "aria-describedby", "role", "aria-activedescendant", "aria-expanded", "aria-invalid", "aria-owns", "disabled"] }, { type: i3__namespace$3.InputValidationMessageComponent, selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i4__namespace$1.RichTextEditorComponent, selector: "bb-rich-text-editor-ui", inputs: ["maxLength", "minLength", "placeholder", "counter", "readonly", "actionsTooltipPlacement"] }, { type: i5__namespace$1.InputFileComponent, selector: "bb-input-file-ui", inputs: ["accept", "maxSizeInMb", "multiple", "color", "autofocus", "buttonText", "buttonSize", "iconName"] }, { type: i6__namespace.FileAttachmentComponent, selector: "bb-file-attachment-ui", inputs: ["name", "size", "fileContent", "loading", "deletable", "disabled", "block"], outputs: ["delete"] }, { type: i7__namespace.AlertComponent, selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i8__namespace.LoadButtonComponent, selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }, { type: i1__namespace$3.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i10__namespace.ModalComponent, selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }], directives: [{ type: i1__namespace$4.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1__namespace$4.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1__namespace$4.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: AccessibilityKeyboardDirective, selector: "[bbAccessibilityKeyboard]" }, { type: i1__namespace$4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1__namespace$4.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i1__namespace$4.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i2__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3__namespace$1.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i14__namespace.TooltipDirective, selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsInquiryDisputeComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-transactions-inquiry-dispute',
                        templateUrl: 'transactions-inquiry-dispute.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$4.FormBuilder }]; }, propDecorators: { message: [{
                    type: i0.Input
                }], enableDispute: [{
                    type: i0.Input
                }], state: [{
                    type: i0.Input
                }], inquireAndDisputeTopics: [{
                    type: i0.Input
                }], submitReport: [{
                    type: i0.Output
                }], cancelReport: [{
                    type: i0.Output
                }], messageChange: [{
                    type: i0.Output
                }], fileChange: [{
                    type: i0.Output
                }], fileRemoved: [{
                    type: i0.Output
                }] } });
    var templateObject_1$1, templateObject_2$1;

    var TransactionsDisputeStatusTagComponent = /** @class */ (function () {
        function TransactionsDisputeStatusTagComponent() {
        }
        return TransactionsDisputeStatusTagComponent;
    }());
    TransactionsDisputeStatusTagComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsDisputeStatusTagComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    TransactionsDisputeStatusTagComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsDisputeStatusTagComponent, selector: "bb-dispute-status-tag", inputs: { status: "status" }, ngImport: i0__namespace, template: "<ng-container *ngIf=\"status === 'PENDING'\">\n  <bb-badge-ui\n    text=\"Dispute Pending\"\n    i18n-text=\"Dispute pending|Text for pending disputed transaction label@@transaction.dispute.status.pending\"\n    color=\"warning\"\n    data-role=\"dispute-pending-tag\"\n  ></bb-badge-ui>\n</ng-container>\n\n<ng-container *ngIf=\"status === 'REFUNDED'\">\n  <bb-badge-ui\n    text=\"Refunded\"\n    i18n-text=\"Dispute refunded|Text for refunded disputed transaction label@@transaction.dispute.status.refunded\"\n    color=\"success\"\n    data-role=\"dispute-refunded-tag\"\n  ></bb-badge-ui>\n</ng-container>\n\n<ng-container *ngIf=\"status === 'REJECTED'\">\n  <bb-badge-ui\n    text=\"Dispute Rejected\"\n    i18n-text=\"Dispute rejected|Text for rejected disputed transaction label@@transaction.dispute.status.rejected\"\n    color=\"danger\"\n    data-role=\"dispute-rejected-tag\"\n  ></bb-badge-ui>\n</ng-container>\n", components: [{ type: i1__namespace$5.BadgeComponent, selector: "bb-badge-ui", inputs: ["color", "text", "abbr", "circle", "wrap", "ariaLabel"] }], directives: [{ type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsDisputeStatusTagComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-dispute-status-tag',
                        templateUrl: 'transaction-dispute-status-tag.component.html',
                    }]
            }], propDecorators: { status: [{
                    type: i0.Input
                }] } });

    var TransactionsDisputeBannerComponent = /** @class */ (function () {
        function TransactionsDisputeBannerComponent() {
            this.disputeStatus = exports.DisputeStatusEnum;
        }
        return TransactionsDisputeBannerComponent;
    }());
    TransactionsDisputeBannerComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsDisputeBannerComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    TransactionsDisputeBannerComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsDisputeBannerComponent, selector: "bb-dispute-banner", inputs: { transaction: "transaction" }, ngImport: i0__namespace, template: "<ng-container>\n  <bb-alert-ui\n    *ngIf=\"transaction?.disputeStatus === disputeStatus.Pending\"\n    modifier=\"info\"\n    data-role=\"dispute-pending-banner\"\n    title=\"You\u2019ve disputed this transaction\"\n    i18n-title=\"\n      Send dispute report success notification|Message for a notification displayed when sending transaction dispute\n      report request has succeed@@transactions.notification.success.send.dispute.title\"\n    message=\"Please go to Messages to view any responses to your request.\"\n    i18n-message=\"\n      Send dispute report success notification message@@transactions.notification.success.send.dispute.message\"\n  ></bb-alert-ui>\n\n  <bb-alert-ui\n    *ngIf=\"transaction?.disputeStatus === disputeStatus.Refunded\"\n    modifier=\"success\"\n    data-role=\"dispute-refunded-banner\"\n    title=\"Your dispute was approved\"\n    i18n-title=\"\n      Dispute report refunded notification|Message for a notification displayed when transaction dispute report request\n      has refunded@@transactions.notification.dispute.refunded.title\"\n    message=\"Please go to Messages to view the process of your refund.\"\n    i18n-message=\"Dispute report reunded notification message@@transactions.notification.dispute.refunded.message\"\n  ></bb-alert-ui>\n\n  <bb-alert-ui\n    *ngIf=\"transaction?.disputeStatus === disputeStatus.Rejected\"\n    modifier=\"error\"\n    data-role=\"dispute-rejected-banner\"\n    title=\"Your dispute was rejected\"\n    i18n-title=\"\n      Dispute report rejected notification|Message for a notification displayed when transaction dispute report request\n      has rejected@@transactions.notification.dispute.rejected.title\"\n    message=\"Please go to Messages to view the reason for this rejection.\"\n    i18n-message=\"Dispute report rejected notification message@@transactions.notification.dispute.rejected.message\"\n  ></bb-alert-ui>\n</ng-container>\n", components: [{ type: i7__namespace.AlertComponent, selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }], directives: [{ type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsDisputeBannerComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-dispute-banner',
                        templateUrl: 'transaction-dispute-banner.component.html',
                    }]
            }], propDecorators: { transaction: [{
                    type: i0.Input
                }] } });

    /* eslint-disable no-redeclare*/
    // eslint-disable-next-line @typescript-eslint/no-namespace
    exports.TransactionsBackendError = void 0;
    (function (TransactionsBackendError) {
        var getMessageFromResponse = function (error) {
            var responseBody = error.error;
            if (Array.isArray(responseBody === null || responseBody === void 0 ? void 0 : responseBody.errors)) {
                return responseBody.errors.map(function (data) {
                    var _a = data.context, context = _a === void 0 ? {} : _a;
                    var message = data.message.replace(/{[_a-zA-Z][_a-zA-Z0-9]*}/g, function (match) {
                        var result = context[match.replace(/[{}']+/g, '')];
                        return result !== undefined ? result : match;
                    });
                    return "Error " + error.status + ": " + message;
                });
            }
            else {
                return undefined;
            }
        };
        /* eslint-enable no-redeclare*/
        /**
         * @name fromHttpErrorResponse
         * @param errorResponse The error response
         * @returns An object containing a user-friendly error message
         *
         * @description
         * Parse an HttpErrorResponse and return a TransactionsError object that can be used to display a
         * user-friendly error message.
         */
        TransactionsBackendError.fromHttpErrorResponse = function (errorResponse) {
            if (errorResponse.error instanceof ErrorEvent) {
                // Client-side or network error.
                return {
                    message: 'An unexpected error occurred',
                };
            }
            else {
                var error = getMessageFromResponse(errorResponse) || [];
                return {
                    message: error[0] || "Error " + errorResponse.status,
                };
            }
        };
        TransactionsBackendError.fromHttpErrorsResponse = function (errorResponse) {
            if (errorResponse.error instanceof ErrorEvent || !errorResponse.status) {
                // Client-side or network error.
                return [
                    {
                        message: 'An unexpected error occurred',
                    },
                ];
            }
            else {
                var errors = getMessageFromResponse(errorResponse) || ["Error " + errorResponse.status];
                return errors.map(function (message) { return ({ message: message }); });
            }
        };
    })(exports.TransactionsBackendError || (exports.TransactionsBackendError = {}));

    exports.TransactionsExportErrorType = void 0;
    (function (TransactionsExportErrorType) {
        TransactionsExportErrorType["MIXED_PRODUCT_KINDS"] = "MIXED_PRODUCT_KINDS";
        TransactionsExportErrorType["UNSUPPORTED_PRODUCT_KIND"] = "UNSUPPORTED_PRODUCT_KIND";
        TransactionsExportErrorType["TOO_MANY_ITEMS"] = "TOO_MANY_ITEMS";
        TransactionsExportErrorType["MULTIPLE_PRODUCTS"] = "MULTIPLE_PRODUCTS";
        TransactionsExportErrorType["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
    })(exports.TransactionsExportErrorType || (exports.TransactionsExportErrorType = {}));
    function combineExportTypesConfig(exportConfig) {
        var exportTypesArr = [];
        var _a = exportConfig.availableExportTypesHeader, availableExportTypesHeader = _a === void 0 ? '' : _a, unavailableExportTypesReasonsHeader = exportConfig.unavailableExportTypesReasonsHeader;
        var availableExportTypesArray = availableExportTypesHeader.split(',');
        var availableTypes = availableExportTypesArray
            .filter(function (name) { return name !== ''; })
            .map(function (name) { return ({
            name: name,
            reason: undefined,
            isAvailable: true,
        }); });
        if (unavailableExportTypesReasonsHeader) {
            var unavailableTypes = Object.keys(unavailableExportTypesReasonsHeader).map(function (name) {
                if (unavailableExportTypesReasonsHeader && Array.isArray(unavailableExportTypesReasonsHeader[name])) {
                    return {
                        name: name,
                        reason: unavailableExportTypesReasonsHeader[name][0],
                        isAvailable: false,
                    };
                }
                return {
                    name: name,
                    reason: exports.TransactionsExportErrorType.UNKNOWN_ERROR,
                    isAvailable: false,
                };
            });
            exportTypesArr = __spreadArray(__spreadArray([], __read(availableTypes)), __read(unavailableTypes));
        }
        else {
            exportTypesArr = __spreadArray([], __read(availableTypes));
        }
        return __spreadArray([], __read(exportTypesArr)).sort(function (left, right) {
            if (left.name === right.name) {
                return 0;
            }
            return left.name > right.name ? 1 : -1;
        });
    }

    var PendingTransactionsService = /** @class */ (function () {
        function PendingTransactionsService(transactionsDataHttpService, accountService, deprecationsService) {
            var _this = this;
            this.transactionsDataHttpService = transactionsDataHttpService;
            this.accountService = accountService;
            this.deprecationsService = deprecationsService;
            this.initialListOptions = new rxjs.ReplaySubject(1);
            this.selectedAccount = new rxjs.ReplaySubject(1);
            this.options = new rxjs.BehaviorSubject({});
            this.listOptions = new rxjs.BehaviorSubject(defaultInitialListOptions);
            this.listRefresh = new rxjs.Subject();
            this.getOrPostEndpoint = new rxjs.BehaviorSubject(exports.EndpointType.GET_REQUEST);
            this.transactionsList = rxjs.merge(this.listOptions.pipe(operators.filter(function (listOptions) { return typeof listOptions.account.arrangementId !== 'undefined'; }), operators.distinctUntilChanged(deepEqual)), this.listRefresh).pipe(cacheRequest(function (listOptions) {
                _this.loadingState.next(listOptions.onLoad === exports.OnLoadAction.Append
                    ? exports.LoadingState.LoadingMore
                    : listOptions.onLoad === exports.OnLoadAction.ReplacePage
                        ? exports.LoadingState.LoadingPage
                        : exports.LoadingState.Loading);
                return rxjs.combineLatest([
                    _this.loadTransactions(listOptions).pipe(operators.tap(function () {
                        _this.loadingState.next(exports.LoadingState.Loaded);
                    }), operators.map(function (transactionsList) { return ({
                        transactionsList: transactionsList,
                        onLoad: exports.OnLoadAction.ReplacePage,
                    }); })),
                    rxjs.iif(multipleAccountsPredicate(listOptions), _this.accountService.getAllArrangements().pipe(operators.map(function (accounts) {
                        var accountMap = new Map();
                        accounts.forEach(function (account) {
                            accountMap.set(account.id, account);
                        });
                        return accountMap;
                    })), rxjs.of(new Map())),
                ]).pipe(operators.map(function (_a) {
                    var _b = __read(_a, 2), transactions = _b[0], accountMap = _b[1];
                    transactions.transactionsList.items = transactions.transactionsList.items.map(function (transaction) { return (Object.assign(Object.assign({}, transaction), { account: accountMap.get(transaction.arrangementId || '') })); });
                    return transactions;
                }));
            }), operators.scan(onLoadTransactions, { items: [], totalCount: 0 }));
            this.loadingState = new rxjs.BehaviorSubject(exports.LoadingState.NotLoaded);
            this.isFilterApplied = this.listOptions.pipe(operators.map(function (options) { return !exports.TransactionsFilterOptions.isEmpty(options.filter || {}); }));
            this.isSearchApplied = this.listOptions.pipe(operators.map(function (options) { return !exports.TransactionsFilterOptions.isEmpty(options.search || {}); }));
            rxjs.combineLatest([this.selectedAccount, this.initialListOptions])
                .pipe(operators.map(function (_a) {
                var _b = __read(_a, 2), selectedAccount = _b[0], initialListOptions = _b[1];
                return (Object.assign({ account: {
                        arrangementId: selectedAccount,
                    }, pagination: {
                        from: 0,
                        size: 250,
                    }, state: exports.TransactionState.uncompleted }, initialListOptions));
            }))
                .subscribe(this.options);
            // Base this.listOptions on this.options
            this.options
                .pipe(operators.scan(function (acc, curr) { return Object.assign({}, acc, curr); }, defaultInitialListOptions))
                .subscribe(this.listOptions);
        }
        PendingTransactionsService.prototype.loadTransactions = function (listOptions) {
            var transactionPayload = exports.TransactionsList.toHttpRequest(listOptions);
            var transactionsResponse;
            if (this.isUsingPostEndpoints) {
                transactionsResponse = this.transactionsDataHttpService.getTransactionsWithPost({
                    transactionListRequest: transactionPayload,
                }, 'response');
            }
            else {
                this.deprecationsService.logDeprecatedFeature('[PendingTransactionsService: loadTransactions] GET endpoints are deprecated. Please use POST endpoints by changing CXP configuration');
                transactionsResponse = this.transactionsDataHttpService.getTransactions(transactionPayload, 'response');
            }
            return transactionsResponse.pipe(operators.map(exports.TransactionsList.fromHttpResponse), operators.catchError(function (err) { return rxjs.of({
                items: [],
                totalCount: 0,
                httpResponseError: err,
            }); }));
        };
        PendingTransactionsService.prototype.getTransactionsFrom = function (selectedAccount, initialListOptions, getOrPostEndpoint) {
            if (initialListOptions === void 0) { initialListOptions = rxjs.of({}); }
            if (getOrPostEndpoint === void 0) { getOrPostEndpoint = rxjs.of(exports.EndpointType.GET_REQUEST); }
            selectedAccount.subscribe(this.selectedAccount);
            initialListOptions.subscribe(this.initialListOptions);
            getOrPostEndpoint.subscribe(this.getOrPostEndpoint);
        };
        PendingTransactionsService.prototype.getTransactionsList = function () {
            return this.transactionsList;
        };
        PendingTransactionsService.prototype.search = function (query) {
            var searchOptions = {
                query: query,
            };
            var paginationOptions = Object.assign(Object.assign({}, (this.options.getValue().pagination || defaultPaginationOptions.pagination)), { from: 0 });
            this.options.next(Object.assign(Object.assign(Object.assign({}, this.options.getValue()), defaultSearchOptions), { pagination: paginationOptions, search: searchOptions }));
        };
        PendingTransactionsService.prototype.clearSearch = function () {
            var paginationOptions = Object.assign(Object.assign({}, (this.options.getValue().pagination || defaultPaginationOptions.pagination)), { from: 0 });
            this.options.next(Object.assign(Object.assign(Object.assign({}, this.options.getValue()), defaultSearchOptions), { pagination: paginationOptions }));
        };
        PendingTransactionsService.prototype.filter = function (filterOptions) {
            var paginationOptions = Object.assign(Object.assign({}, (this.options.getValue().pagination || defaultPaginationOptions.pagination)), { from: 0 });
            this.options.next(Object.assign(Object.assign(Object.assign({}, this.options.getValue()), defaultFilterOptions), { pagination: paginationOptions, filter: Object.assign({}, filterOptions) }));
        };
        PendingTransactionsService.prototype.clearFilter = function () {
            var paginationOptions = Object.assign(Object.assign({}, (this.options.getValue().pagination || defaultPaginationOptions.pagination)), { from: 0 });
            this.options.next(Object.assign(Object.assign(Object.assign({}, this.options.getValue()), defaultFilterOptions), { pagination: paginationOptions }));
        };
        PendingTransactionsService.prototype.sort = function (sortOptions) {
            var currentPaginationOptions = this.options.getValue().pagination || defaultPaginationOptions.pagination;
            this.options.next({
                sort: Object.assign({}, sortOptions),
                pagination: Object.assign(Object.assign({}, currentPaginationOptions), { from: 0 }),
            });
        };
        PendingTransactionsService.prototype.retryFiltering = function () {
            this.listRefresh.next(this.listOptions.getValue());
        };
        PendingTransactionsService.prototype.refreshTransactions = function () {
            var currentPaginationOptions = this.options.getValue().pagination || defaultPaginationOptions.pagination;
            var paginationOptions = Object.assign(Object.assign({}, currentPaginationOptions), { from: 0 });
            var newOptions = Object.assign(Object.assign({}, this.listOptions.getValue()), { pagination: paginationOptions });
            if (deepEqual(newOptions, this.listOptions.getValue())) {
                this.listRefresh.next(this.listOptions.getValue());
            }
            else {
                this.options.next({
                    pagination: paginationOptions,
                });
            }
        };
        Object.defineProperty(PendingTransactionsService.prototype, "isUsingPostEndpoints", {
            get: function () {
                return this.getOrPostEndpoint.getValue() === exports.EndpointType.POST_REQUEST;
            },
            enumerable: false,
            configurable: true
        });
        PendingTransactionsService.prototype.ngOnDestroy = function () {
            this.listRefresh.complete();
            this.selectedAccount.complete();
            this.initialListOptions.complete();
            this.options.complete();
            this.listOptions.complete();
            this.loadingState.complete();
            this.getOrPostEndpoint.complete();
        };
        return PendingTransactionsService;
    }());
    PendingTransactionsService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PendingTransactionsService, deps: [{ token: i1__namespace$1.TransactionClientHttpService }, { token: AccountsService }, { token: i3__namespace.DeprecationsService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    PendingTransactionsService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PendingTransactionsService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PendingTransactionsService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace$1.TransactionClientHttpService }, { type: AccountsService }, { type: i3__namespace.DeprecationsService }]; } });

    var GoogleMapsScriptProtocol;
    (function (GoogleMapsScriptProtocol) {
        GoogleMapsScriptProtocol[GoogleMapsScriptProtocol["HTTP"] = 1] = "HTTP";
        GoogleMapsScriptProtocol[GoogleMapsScriptProtocol["HTTPS"] = 2] = "HTTPS";
        GoogleMapsScriptProtocol[GoogleMapsScriptProtocol["AUTO"] = 3] = "AUTO";
    })(GoogleMapsScriptProtocol || (GoogleMapsScriptProtocol = {}));

    var MapAPILoaderService = /** @class */ (function () {
        function MapAPILoaderService() {
            this.scriptID = 'bbGoogleMapsApiScript';
            this.callbackName = 'bbMapsAPILoader';
            this.apiLoadPromiseName = 'bbMapsAPILoaderPromise';
            this.windowRef = window;
            this.documentRef = document;
            this.configValue = {};
        }
        Object.defineProperty(MapAPILoaderService.prototype, "config", {
            get: function () {
                return this.configValue;
            },
            set: function (config) {
                this.configValue = config;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MapAPILoaderService.prototype, "loadAPIPromise", {
            get: function () {
                return this.windowRef[this.apiLoadPromiseName];
            },
            enumerable: false,
            configurable: true
        });
        MapAPILoaderService.prototype.assignScriptLoadingPromise = function (scriptElem) {
            var _this = this;
            this.windowRef[this.apiLoadPromiseName] = new Promise(function (resolve, reject) {
                _this.windowRef[_this.callbackName] = function () {
                    resolve();
                };
                scriptElem.onerror = function (error) {
                    reject(error);
                };
            });
        };
        MapAPILoaderService.prototype.getScriptSrc = function (callbackName) {
            var protocolType = (this.configValue && this.configValue.protocol) || GoogleMapsScriptProtocol.HTTPS;
            var protocol = '';
            switch (protocolType) {
                case GoogleMapsScriptProtocol.HTTP:
                    protocol = 'http:';
                    break;
                case GoogleMapsScriptProtocol.HTTPS:
                    protocol = 'https:';
                    break;
            }
            var hostAndPath = this.configValue.hostAndPath || 'maps.googleapis.com/maps/api/js';
            // make sure we have places library for search component
            var libraries = this.configValue.libraries || [];
            if (libraries.indexOf('places') === -1) {
                this.configValue.libraries = __spreadArray(__spreadArray([], __read(libraries)), ['places']);
            }
            var queryParams = {
                v: this.configValue.apiVersion || 'quarterly',
                callback: callbackName,
                key: this.configValue.apiKey,
                client: this.configValue.clientId,
                channel: this.configValue.channel,
                libraries: this.configValue.libraries,
                region: this.configValue.region,
                language: this.configValue.language,
            };
            var params = Object.keys(queryParams)
                .filter(function (key) { return queryParams[key] !== undefined; })
                .filter(function (key) {
                // remove empty arrays
                return !Array.isArray(queryParams[key]) ||
                    (Array.isArray(queryParams[key]) && queryParams[key].length > 0);
            })
                .map(function (key) {
                var value = queryParams[key];
                if (Array.isArray(value)) {
                    // join arrays as comma seperated strings
                    value = value.join(',');
                }
                return key + "=" + value;
            })
                .join('&');
            return protocol + "//" + hostAndPath + "?" + params;
        };
        MapAPILoaderService.prototype.load = function () {
            var window = this.windowRef;
            if (window.google && window.google.maps) {
                // Google maps already loaded on the page.
                return Promise.resolve();
            }
            if (this.loadAPIPromise) {
                return this.loadAPIPromise;
            }
            var script = this.documentRef.createElement('script');
            script.type = 'text/javascript';
            script.async = true;
            script.defer = true;
            script.id = this.scriptID;
            script.src = this.getScriptSrc(this.callbackName);
            this.assignScriptLoadingPromise(script);
            this.documentRef.body.appendChild(script);
            return this.loadAPIPromise;
        };
        return MapAPILoaderService;
    }());
    MapAPILoaderService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: MapAPILoaderService, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    MapAPILoaderService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: MapAPILoaderService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: MapAPILoaderService, decorators: [{
                type: i0.Injectable
            }] });

    var PaymentsBatchService = /** @class */ (function () {
        function PaymentsBatchService(batchOrdersHttpService) {
            this.batchOrdersHttpService = batchOrdersHttpService;
        }
        PaymentsBatchService.prototype.getBatch = function (batchOrderId) {
            return this.batchOrdersHttpService.getBatchOrdersById({ batchOrderId: batchOrderId });
        };
        return PaymentsBatchService;
    }());
    PaymentsBatchService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentsBatchService, deps: [{ token: i1__namespace$6.BatchOrdersHttpService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    PaymentsBatchService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentsBatchService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: PaymentsBatchService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace$6.BatchOrdersHttpService }]; } });

    var ConfigManager = /** @class */ (function () {
        function ConfigManager(config) {
            this.config = config;
        }
        ConfigManager.prototype.isDisputable = function (transaction) {
            return (this.isBillingStatusApproved(transaction) && !this.isOld(transaction) && this.isOfRestrictedType(transaction));
        };
        ConfigManager.prototype.isBillingStatusApproved = function (transaction) {
            var _a;
            if (!((_a = this.config) === null || _a === void 0 ? void 0 : _a.byBillingStatus)) {
                return true;
            }
            return !(transaction === null || transaction === void 0 ? void 0 : transaction.isPending);
        };
        ConfigManager.prototype.isOld = function (transaction) {
            var _a;
            if (!(transaction === null || transaction === void 0 ? void 0 : transaction.bookingDate)) {
                return false;
            }
            var days = daysDiff(new Date(), transaction.bookingDate);
            var byEligitibilityDays = ((_a = this.config) === null || _a === void 0 ? void 0 : _a.byEligitibilityDays) || 0;
            return days > byEligitibilityDays;
        };
        ConfigManager.prototype.isOfRestrictedType = function (transaction) {
            var _a;
            return (transaction === null || transaction === void 0 ? void 0 : transaction.type) ? (((_a = this.config) === null || _a === void 0 ? void 0 : _a.byTransactionTypes) || []).includes(transaction.type) : false;
        };
        return ConfigManager;
    }());
    var TransactionDetailsService = /** @class */ (function () {
        function TransactionDetailsService(transactionsDataHttpService, mapApiLoader, paymentsBatchService) {
            var _this = this;
            this.transactionsDataHttpService = transactionsDataHttpService;
            this.mapApiLoader = mapApiLoader;
            this.paymentsBatchService = paymentsBatchService;
            /**
             * watches the transaction that is shown in the details
             */
            this.transactionSelection = new rxjs.Subject();
            /**
             * watches the configuration from CXP that can disable/enable check images
             */
            this.hasCheckImages = new rxjs.ReplaySubject();
            /**
             * general status of each feature that runs asynchronously
             */
            this.transactionsDetailsStatus = new rxjs.ReplaySubject();
            this.mapsApiKey = new rxjs.ReplaySubject();
            this.batchOrder = this.transactionSelection.pipe(operators.tap(function () {
                _this.transactionsDetailsStatus.next({
                    batchOrder: exports.TransactionsDetailsLoadingState.loading,
                });
            }), operators.mergeMap(function (transaction) {
                if (!transaction.batchOrderId) {
                    return rxjs.of(undefined);
                }
                return _this.paymentsBatchService.getBatch(transaction.batchOrderId).pipe(operators.catchError(function () {
                    _this.transactionsDetailsStatus.next({
                        batchOrder: exports.TransactionsDetailsLoadingState.error,
                    });
                    return rxjs.of(undefined);
                }));
            }), operators.map(function (data) {
                _this.transactionsDetailsStatus.next({
                    batchOrder: data ? exports.TransactionsDetailsLoadingState.done : exports.TransactionsDetailsLoadingState.notStarted,
                });
                return data;
            }));
            this.transactionsDetailsStatus.next({
                checkImages: exports.TransactionsDetailsLoadingState.notStarted,
                geolocation: exports.TransactionsDetailsLoadingState.notStarted,
                enableDisputeAndInquiry: exports.TransactionsDetailsLoadingState.notStarted,
                disputeOption: exports.TransactionsDetailsLoadingState.notStarted,
                batchOrder: exports.TransactionsDetailsLoadingState.notStarted,
            });
        }
        Object.defineProperty(TransactionDetailsService.prototype, "enableDisputeAndInquiry", {
            set: function (value) {
                this.transactionsDetailsStatus.next({
                    enableDisputeAndInquiry: value ? exports.TransactionsDetailsLoadingState.done : exports.TransactionsDetailsLoadingState.notLoaded,
                });
            },
            enumerable: false,
            configurable: true
        });
        TransactionDetailsService.prototype.fromInquiryAndDispute = function (enableDisputeAndInquiry, disputeByBillingStatus, disputeEligibilityDays, disputeTransactionTypes) {
            var _this = this;
            var config = rxjs.combineLatest([
                enableDisputeAndInquiry,
                disputeByBillingStatus,
                disputeEligibilityDays,
                disputeTransactionTypes,
            ]).pipe(operators.map(function (_b) {
                var _c = __read(_b, 4), enabled = _c[0], byBillingStatus = _c[1], byEligitibilityDays = _c[2], byTransactionTypes = _c[3];
                return enabled ? { byBillingStatus: byBillingStatus, byEligitibilityDays: byEligitibilityDays, byTransactionTypes: byTransactionTypes } : undefined;
            }));
            rxjs.combineLatest([this.transactionSelection, config]).subscribe({
                next: function (_b) {
                    var _c = __read(_b, 2), transactionSelection = _c[0], inquiryAndDispute = _c[1];
                    if (!inquiryAndDispute) {
                        _this.transactionsDetailsStatus.next({
                            enableDisputeAndInquiry: exports.TransactionsDetailsLoadingState.notLoaded,
                            disputeOption: exports.TransactionsDetailsLoadingState.notLoaded,
                        });
                    }
                    else {
                        var configuration = new ConfigManager(inquiryAndDispute);
                        _this.transactionsDetailsStatus.next({
                            enableDisputeAndInquiry: exports.TransactionsDetailsLoadingState.done,
                            disputeOption: configuration.isDisputable(transactionSelection)
                                ? exports.TransactionsDetailsLoadingState.done
                                : exports.TransactionsDetailsLoadingState.notLoaded,
                        });
                    }
                },
            });
        };
        /**
         *
         * @param transactionId
         * triggers a new action that will cause transcations details reload and change an image
         */
        TransactionDetailsService.prototype.selectTransaction = function (transaction) {
            this.transactionSelection.next(transaction);
        };
        Object.defineProperty(TransactionDetailsService.prototype, "loadingState", {
            /**
             * Key-value pair that controls the loading status in transactions details
             */
            get: function () {
                return this.transactionsDetailsStatus.pipe(operators.scan(function (acc, curr) { return (Object.assign(Object.assign({}, acc), curr)); }, {}));
            },
            enumerable: false,
            configurable: true
        });
        /**
         *
         * @param hasCheckImages
         * Configuration for check images reactive functionality
         */
        TransactionDetailsService.prototype.fromCheckImages = function (hasCheckImages) {
            var _this = this;
            hasCheckImages.subscribe(this.hasCheckImages);
            hasCheckImages
                .pipe(operators.map(function (value) { return ({
                checkImages: value ? exports.TransactionsDetailsLoadingState.loading : exports.TransactionsDetailsLoadingState.notLoaded,
            }); }))
                .subscribe({
                next: function (value) {
                    _this.transactionsDetailsStatus.next(value);
                },
            });
            return this.setCondition(this.transactionSelection, this.hasCheckImages).pipe(operators.tap(function () {
                _this.transactionsDetailsStatus.next({
                    checkImages: exports.TransactionsDetailsLoadingState.loading,
                });
            }), operators.filter(function (transaction) { return transaction.checkImageAvailability === exports.CheckImagesAvailability.available; }), operators.switchMap(function (_b) {
                var _c = _b.id, transactionId = _c === void 0 ? '' : _c;
                return _this.transactionsDataHttpService.getTransactionCheckImages({ transactionId: transactionId }, 'response').pipe(operators.tap(function () {
                    _this.transactionsDetailsStatus.next({
                        checkImages: exports.TransactionsDetailsLoadingState.done,
                    });
                }), operators.catchError(function (error) {
                    switch (error.status) {
                        case 500: {
                            _this.transactionsDetailsStatus.next({
                                checkImages: exports.TransactionsDetailsLoadingState.serverError,
                            });
                            break;
                        }
                        case 400: {
                            _this.transactionsDetailsStatus.next({
                                checkImages: exports.TransactionsDetailsLoadingState.badRequestError,
                            });
                            break;
                        }
                        case 404: {
                            _this.transactionsDetailsStatus.next({
                                checkImages: exports.TransactionsDetailsLoadingState.notFoundError,
                            });
                            break;
                        }
                        default: {
                            _this.transactionsDetailsStatus.next({
                                checkImages: exports.TransactionsDetailsLoadingState.error,
                            });
                        }
                    }
                    return rxjs.of(new http.HttpResponse({
                        body: {
                            images: [],
                        },
                    }));
                }), operators.map(exports.TransactionsCheckImages.fromHttpResponse));
            }));
        };
        TransactionDetailsService.prototype.fromGeolocation = function (mapsApiKey) {
            var _this = this;
            mapsApiKey.subscribe(this.mapsApiKey);
            return rxjs.combineLatest([this.transactionSelection, this.mapsApiKey]).pipe(operators.map(function (_b) {
                var _c = __read(_b, 2), transaction = _c[0], apiKey = _c[1];
                _this.mapApiLoader.config = {
                    apiKey: apiKey,
                    libraries: ['geometry'],
                };
                _this.transactionsDetailsStatus.next({
                    geolocation: exports.TransactionsDetailsLoadingState.loading,
                });
                if (!apiKey || !transaction.location || !transaction.location.latitude || !transaction.location.longitude) {
                    _this.transactionsDetailsStatus.next({
                        geolocation: exports.TransactionsDetailsLoadingState.notLoaded,
                    });
                    return Promise.resolve(false);
                }
                return _this.mapApiLoader.load().then(function () {
                    _this.transactionsDetailsStatus.next({
                        geolocation: exports.TransactionsDetailsLoadingState.done,
                    });
                    return true;
                }, function () {
                    _this.transactionsDetailsStatus.next({
                        geolocation: exports.TransactionsDetailsLoadingState.error,
                    });
                    return false;
                });
            }), operators.mergeMap(function (promise) { return rxjs.from(promise); }));
        };
        /**
         * destroy lifecycle hook that will release resources
         */
        TransactionDetailsService.prototype.ngOnDestroy = function () {
            this.transactionSelection.complete();
            this.transactionsDetailsStatus.complete();
            this.mapsApiKey.complete();
        };
        /**
         *
         * @param feature
         * @param toggle
         *
         * Prevents from emiting values if the cxp configuration is set as disabled
         */
        TransactionDetailsService.prototype.setCondition = function (feature, toggle) {
            return rxjs.combineLatest([feature, toggle]).pipe(operators.filter(function (_b) {
                var _c = __read(_b, 2), condition = _c[1];
                return condition;
            }), operators.map(function (_b) {
                var _c = __read(_b, 1), value = _c[0];
                return value;
            }));
        };
        return TransactionDetailsService;
    }());
    TransactionDetailsService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionDetailsService, deps: [{ token: i1__namespace$1.TransactionClientHttpService }, { token: MapAPILoaderService }, { token: PaymentsBatchService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    TransactionDetailsService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionDetailsService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionDetailsService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace$1.TransactionClientHttpService }, { type: MapAPILoaderService }, { type: PaymentsBatchService }]; } });

    var AvailableFiltersConfigService = /** @class */ (function () {
        function AvailableFiltersConfigService(accountsService) {
            this.accountsService = accountsService;
            this.availableFiltersConfig$ = new rxjs.ReplaySubject(1);
            this.selectedAccounts$ = new rxjs.ReplaySubject(1);
            this.productSummary$ = this.getProductSummaryForSelectedAccounts();
            this.availableFilters$ = this.getAvailableFilters();
        }
        AvailableFiltersConfigService.prototype.setFilterConfigurationAndAccount = function (availableFiltersConfig, selectedAccounts) {
            availableFiltersConfig.subscribe(this.availableFiltersConfig$);
            selectedAccounts.subscribe(this.selectedAccounts$);
        };
        AvailableFiltersConfigService.prototype.getProductSummaryForSelectedAccounts = function () {
            return rxjs.combineLatest([this.accountsService.getProductSummary(), this.selectedAccounts$]).pipe(operators.map(function (_b) {
                var _c = __read(_b, 2), productSummaryItems = _c[0], selectedAccounts = _c[1];
                return productSummaryItems.filter(function (productSummaryItem) { return selectedAccounts === null || selectedAccounts === void 0 ? void 0 : selectedAccounts.includes(productSummaryItem.id); });
            }));
        };
        AvailableFiltersConfigService.prototype.getAvailableFilters = function () {
            var _this = this;
            return rxjs.combineLatest([this.availableFiltersConfig$, this.productSummary$]).pipe(operators.map(function (_b) {
                var _c = __read(_b, 2), availableFiltersConfig = _c[0], productSummaryItems = _c[1];
                var availableFilters = productSummaryItems.reduce(function (filters, productSummaryItem) { return filters.concat(_this.getFiltersFromConfigs(productSummaryItem, availableFiltersConfig)); }, []);
                return Array.from(new Set(availableFilters));
            }));
        };
        AvailableFiltersConfigService.prototype.getFiltersFromConfigs = function (productSummaryItem, availableFiltersConfig) {
            var _a;
            var availableFilters = (_a = this.getFiltersFromConfigObject(availableFiltersConfig, productSummaryItem)) !== null && _a !== void 0 ? _a : this.getFiltersFromConfigObject(defaultAvailableFiltersConfig, productSummaryItem);
            return availableFilters !== null && availableFilters !== void 0 ? availableFilters : defaultAvailableFiltersConfig.defaultFilters;
        };
        AvailableFiltersConfigService.prototype.getFiltersFromConfigObject = function (config, productSummaryItem) {
            if (productSummaryItem.productKindName !== undefined) {
                var productKind = config[productSummaryItem.productKindName];
                if (productKind === undefined)
                    return undefined;
                if (Array.isArray(productKind))
                    return productKind;
                if (productSummaryItem.productTypeName === undefined)
                    return undefined;
                return productKind[productSummaryItem.productTypeName];
            }
            return undefined;
        };
        return AvailableFiltersConfigService;
    }());
    AvailableFiltersConfigService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AvailableFiltersConfigService, deps: [{ token: AccountsService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    AvailableFiltersConfigService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AvailableFiltersConfigService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AvailableFiltersConfigService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: AccountsService }]; } });

    // eslint-disable-next-line
    var BaseTransactionsContainer = /** @class */ (function () {
        function BaseTransactionsContainer(model, widgetProperties, cd, eventBusService, notificationService, pendingTransactionsService, transactionDetailsService, availableFiltersConfigService, showDetailsConfig) {
            var _this = this;
            this.model = model;
            this.widgetProperties = widgetProperties;
            this.cd = cd;
            this.eventBusService = eventBusService;
            this.notificationService = notificationService;
            this.pendingTransactionsService = pendingTransactionsService;
            this.transactionDetailsService = transactionDetailsService;
            this.availableFiltersConfigService = availableFiltersConfigService;
            this.showDetailsConfig = showDetailsConfig;
            /**
             * Reference to instance of customizable component.
             */
            this.hostRef = this;
            this.apiKeySubject = new rxjs.BehaviorSubject(undefined);
            /**
             * Observable of options to initialize the filter with.  By default, it is empty.
             */
            this.initialFilterOptions = rxjs.of({});
            /**
             * Observable of options to initialize the sort options with.  By default, it is empty.
             */
            this.initialSortOptions = rxjs.of(undefined);
            this.transactionSelected = new i0.EventEmitter();
            this.transactionsLoaded = new i0.EventEmitter();
            this.pageSizeSubject = new rxjs.BehaviorSubject(undefined);
            this.maxNavPagesSubject = new rxjs.BehaviorSubject(undefined);
            this.paginationTypeSubject = new rxjs.BehaviorSubject(undefined);
            this.showControlsSubject = new rxjs.BehaviorSubject(undefined);
            this.showChangeCategorySubject = new rxjs.BehaviorSubject(undefined);
            this.showPendingTransactionsOnTopSubject = new rxjs.BehaviorSubject(undefined);
            this.showCheckImageSubject = new rxjs.BehaviorSubject(undefined);
            this.showManageNotesSubject = new rxjs.BehaviorSubject(undefined);
            this.getOrPostEndpointsSubject = new rxjs.BehaviorSubject(undefined);
            this.disputeByBillingStatusSubject = new rxjs.BehaviorSubject(undefined);
            this.disputeEligibilityDaysSubject = new rxjs.BehaviorSubject(undefined);
            this.disputeTransactionTypesSubject = new rxjs.BehaviorSubject(undefined);
            this.enableDisputeAndInquirySubject = new rxjs.BehaviorSubject(false);
            this.inquireTopicIdSubject = new rxjs.BehaviorSubject('');
            this.disputeTopicIdSubject = new rxjs.BehaviorSubject('');
            /**
             * Events registered to transactions widgets
             */
            this.registeredRefreshTransactionsListEvents = [];
            this.unsubscribeSubject = new rxjs.Subject();
            /**
             * Subject that listens the transactionsList observable and provides the export types
             */
            this.exportConfig = new rxjs.BehaviorSubject({});
            this.exportErrorMessagesRef = {};
            this.numberOfResultsFound = new rxjs.ReplaySubject();
            this.numberOfResultsDisplayed = new rxjs.ReplaySubject();
            this.availableFiltersConfig = new rxjs.ReplaySubject(1);
            this.availableFilters = this.availableFiltersConfigService.availableFilters$;
            this.inquireTopicId = filterInputParameters(this.inquireTopicIdSubject.asObservable(), this.widgetProperties.inquireTopicId);
            this.disputeTopicId = filterInputParameters(this.disputeTopicIdSubject.asObservable(), this.widgetProperties.disputeTopicId);
            this.inquireAndDisputeTopics = rxjs.combineLatest([
                this.inquireTopicId,
                this.disputeTopicId,
            ]).pipe(operators.map(function (_a) {
                var _b = __read(_a, 2), inquire = _b[0], dispute = _b[1];
                return ({ inquire: inquire, dispute: dispute });
            }));
            this.refreshTransactionsListHandler = function () {
                _this.model.refreshTransactions();
            };
            /**
             * @deprecated will be removed in 11.0.0
             */
            this.handleError = function (errorResponse) {
                _this.errors = exports.TransactionsBackendError.fromHttpErrorsResponse(errorResponse);
                return rxjs.of({
                    items: [],
                    totalCount: 0,
                });
            };
        }
        Object.defineProperty(BaseTransactionsContainer.prototype, "googleAPIKey", {
            /**
             * API key needed for the google maps to work.
             */
            // eslint-disable-next-line
            set: function (key) {
                this.apiKeySubject.next(key);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseTransactionsContainer.prototype, "pageSizeValue", {
            /**
             * input parameters that will take the place of model properties--
             */
            set: function (value) {
                this.pageSizeSubject.next(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseTransactionsContainer.prototype, "maxNavPagesValue", {
            set: function (value) {
                this.maxNavPagesSubject.next(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseTransactionsContainer.prototype, "paginationTypeValue", {
            set: function (value) {
                this.paginationTypeSubject.next(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseTransactionsContainer.prototype, "showControlsValue", {
            set: function (value) {
                this.showControlsSubject.next(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseTransactionsContainer.prototype, "showChangeCategoryValue", {
            set: function (value) {
                this.showChangeCategorySubject.next(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseTransactionsContainer.prototype, "showPendingTransactionsOnTopValue", {
            set: function (value) {
                this.showPendingTransactionsOnTopSubject.next(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseTransactionsContainer.prototype, "showCheckImageValue", {
            set: function (value) {
                this.showCheckImageSubject.next(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseTransactionsContainer.prototype, "showManageNotesValue", {
            set: function (value) {
                this.showManageNotesSubject.next(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseTransactionsContainer.prototype, "getOrPostEndpointsValue", {
            set: function (value) {
                this.getOrPostEndpointsSubject.next(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseTransactionsContainer.prototype, "disputeByBillingStatusValue", {
            set: function (value) {
                this.disputeByBillingStatusSubject.next(typeof value === 'boolean' ? value : value === 'true');
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseTransactionsContainer.prototype, "disputeEligibilityDaysValue", {
            set: function (value) {
                this.disputeEligibilityDaysSubject.next(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseTransactionsContainer.prototype, "disputeTransactionTypesValue", {
            set: function (value) {
                this.disputeTransactionTypesSubject.next((value || '').split(','));
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseTransactionsContainer.prototype, "enableDisputeAndInquiryValue", {
            set: function (value) {
                this.enableDisputeAndInquirySubject.next(typeof value === 'boolean' ? value : value === 'true');
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseTransactionsContainer.prototype, "availableFiltersValue", {
            set: function (availableFiltersConfig) {
                this.availableFiltersConfig.next(availableFiltersConfig);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseTransactionsContainer.prototype, "error", {
            /** end input parameters--- */
            /**
             * Information about the backend error, if it occurs.
             */
            /**
             * @deprecated will be removed in 11.0.0
             */
            get: function () {
                return this.errors && this.errors[0];
            },
            enumerable: false,
            configurable: true
        });
        BaseTransactionsContainer.prototype.clearRefreshTransactionsListEvents = function () {
            var _this = this;
            this.registeredRefreshTransactionsListEvents.forEach(function (eventName) {
                _this.eventBusService.unsubscribe(eventName, _this.refreshTransactionsListHandler);
            });
            this.registeredRefreshTransactionsListEvents = [];
        };
        BaseTransactionsContainer.prototype.retry = function () {
            this.model.retryFiltering();
            this.pendingTransactionsService.retryFiltering();
        };
        BaseTransactionsContainer.prototype.ngOnDestroy = function () {
            this.clearRefreshTransactionsListEvents();
            this.unsubscribeSubject.next();
            this.unsubscribeSubject.complete();
        };
        Object.defineProperty(BaseTransactionsContainer.prototype, "pageSize", {
            get: function () {
                return filterInputParameters(this.pageSizeSubject.asObservable(), this.widgetProperties.pageSize);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseTransactionsContainer.prototype, "maxNavPages", {
            get: function () {
                return filterInputParameters(this.maxNavPagesSubject.asObservable(), this.widgetProperties.maxNavPages);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseTransactionsContainer.prototype, "showControls", {
            get: function () {
                return filterInputParameters(this.showControlsSubject.asObservable(), this.widgetProperties.showControls);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseTransactionsContainer.prototype, "isFilterApplied", {
            get: function () {
                return this.model.isFilterApplied;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseTransactionsContainer.prototype, "isSearchApplied", {
            get: function () {
                return this.model.isSearchApplied;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseTransactionsContainer.prototype, "paginationType", {
            get: function () {
                return filterInputParameters(this.paginationTypeSubject.asObservable(), this.widgetProperties.paginationType);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseTransactionsContainer.prototype, "showPendingTransactionsOnTop", {
            get: function () {
                return filterInputParameters(this.showPendingTransactionsOnTopSubject.asObservable(), this.widgetProperties.showPendingTransactionsOnTop);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseTransactionsContainer.prototype, "showChangeCategory", {
            get: function () {
                return filterInputParameters(this.showChangeCategorySubject.asObservable(), this.widgetProperties.showChangeCategory);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseTransactionsContainer.prototype, "showCheckImage", {
            get: function () {
                return filterInputParameters(this.showCheckImageSubject.asObservable(), this.widgetProperties.showCheckImage);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseTransactionsContainer.prototype, "showManageNotes", {
            get: function () {
                return filterInputParameters(this.showManageNotesSubject, this.widgetProperties.showManageNotes);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseTransactionsContainer.prototype, "getOrPostEndpoint", {
            get: function () {
                return filterInputParameters(this.getOrPostEndpointsSubject.asObservable(), this.widgetProperties.getOrPostEndpoints);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseTransactionsContainer.prototype, "gmapsAPIKey", {
            get: function () {
                return rxjs.combineLatest([this.apiKeySubject.asObservable(), this.widgetProperties.gmapsAPIKey]).pipe(operators.map(function (_a) {
                    var _b = __read(_a, 2), inputVal = _b[0], propVal = _b[1];
                    return inputVal || propVal;
                }));
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseTransactionsContainer.prototype, "enableDisputeAndInquiry", {
            get: function () {
                return filterInputParameters(this.enableDisputeAndInquirySubject.asObservable(), this.widgetProperties.enableDisputeAndInquiry);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseTransactionsContainer.prototype, "disputeByBillingStatus", {
            get: function () {
                return filterInputParameters(this.disputeByBillingStatusSubject.asObservable(), this.widgetProperties.disputeByBillingStatus);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseTransactionsContainer.prototype, "disputeEligibilityDays", {
            get: function () {
                return filterInputParameters(this.disputeEligibilityDaysSubject.asObservable(), this.widgetProperties.disputeEligibilityDays);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseTransactionsContainer.prototype, "disputeTransactionTypes", {
            get: function () {
                return filterInputParameters(this.disputeTransactionTypesSubject.asObservable(), this.widgetProperties.disputeTransactionTypes);
            },
            enumerable: false,
            configurable: true
        });
        BaseTransactionsContainer.prototype.onLoadMore = function () {
            this.model.loadMore();
        };
        BaseTransactionsContainer.prototype.ngOnInit = function () {
            var _this = this;
            if (typeof this.selectedAccount === 'undefined') {
                throw new Error("\"selectedAccount\" input is required in \"" + this.constructor.name + "\"");
            }
            var initialListOptions = rxjs.combineLatest([
                this.initialFilterOptions,
                this.initialSortOptions,
            ]).pipe(operators.map(function (_a) {
                var _b = __read(_a, 2), initialFilterOptions = _b[0], initialSortOptions = _b[1];
                return ({
                    filter: initialFilterOptions,
                    sort: initialSortOptions,
                });
            }));
            this.model.getTransactionsFrom(this.selectedAccount.pipe(operators.map(function (value) { return value !== null && value !== void 0 ? value : []; })), this.pageSize, initialListOptions, this.showPendingTransactionsOnTop, this.getOrPostEndpoint);
            if (this.showDetailsConfig) {
                this.checkImagesList = this.transactionDetailsService.fromCheckImages(this.showCheckImage);
                this.transactionDetailsLoadingStatus = this.transactionDetailsService.loadingState;
                this.transactionDetailsService
                    .fromGeolocation(this.gmapsAPIKey)
                    .pipe(operators.takeUntil(this.unsubscribeSubject))
                    .subscribe();
            }
            this.transactionsList = this.model.getTransactionsList().pipe(operators.publishReplay(1), operators.refCount(), operators.tap(function (data) {
                _this.errors = data.httpResponseError
                    ? exports.TransactionsBackendError.fromHttpErrorsResponse(data.httpResponseError)
                    : undefined;
                _this.cd.markForCheck();
            }));
            this.pendingTransactionsService.getTransactionsFrom(this.selectedAccount.pipe(operators.map(function (value) { return value !== null && value !== void 0 ? value : []; })), initialListOptions, this.getOrPostEndpoint);
            this.pendingTransactionsList = this.pendingTransactionsService.getTransactionsList().pipe(operators.publishReplay(1), operators.refCount(), operators.tap(function (data) {
                _this.errors = data.httpResponseError
                    ? exports.TransactionsBackendError.fromHttpErrorsResponse(data.httpResponseError)
                    : undefined;
                _this.cd.markForCheck();
            }));
            this.transactionsList
                .pipe(operators.takeUntil(this.unsubscribeSubject), operators.map(function (transactionsList) {
                if (!transactionsList) {
                    return {};
                }
                var availableExportTypesHeader = transactionsList.availableExportTypesHeader, unavailableExportTypesReasonsHeader = transactionsList.unavailableExportTypesReasonsHeader;
                return combineExportTypesConfig({
                    availableExportTypesHeader: availableExportTypesHeader,
                    unavailableExportTypesReasonsHeader: unavailableExportTypesReasonsHeader,
                });
            }))
                .subscribe(this.exportConfig);
            var transactionsListCount = this.transactionsList.pipe(operators.map(function (trans) { return ({ history: trans ? trans.totalCount : 0 }); }));
            var pendingTransactionsListCount = this.pendingTransactionsList.pipe(operators.map(function (trans) { return ({ pending: trans ? trans.totalCount : 0 }); }));
            var transactionsListItemsToDisplay = this.transactionsList.pipe(operators.map(function (trans) { return ({ history: trans ? trans.items.length : 0 }); }));
            var pendingTransactionsListItemsToDisplay = this.pendingTransactionsList.pipe(operators.map(function (trans) { return ({ pending: trans ? trans.items.length : 0 }); }));
            this.sumTransactionsResults(transactionsListCount, pendingTransactionsListCount)
                .pipe(operators.takeUntil(this.unsubscribeSubject))
                .subscribe(this.numberOfResultsFound);
            this.sumTransactionsResults(transactionsListItemsToDisplay, pendingTransactionsListItemsToDisplay)
                .pipe(operators.takeUntil(this.unsubscribeSubject))
                .subscribe(this.numberOfResultsDisplayed);
            this.currentPage = this.model.getCurrentPage();
            this.loadingState = this.model.loadingState;
            this.loadingPendingState = this.pendingTransactionsService.loadingState;
            this.widgetProperties.refreshTransactionsListEvents.pipe(operators.takeUntil(this.unsubscribeSubject)).subscribe(function (events) {
                _this.clearRefreshTransactionsListEvents();
                if (events) {
                    _this.registeredRefreshTransactionsListEvents = events.split(',');
                    _this.registeredRefreshTransactionsListEvents.forEach(function (eventName) {
                        _this.eventBusService.subscribe(eventName, _this.refreshTransactionsListHandler);
                    });
                }
            });
            this.configureTransctionsDetailsOutputBehaviour();
            this.transactionDetailsService.fromInquiryAndDispute(this.enableDisputeAndInquiry, this.disputeByBillingStatus, this.disputeEligibilityDays, this.disputeTransactionTypes);
            this.availableFiltersConfigService.setFilterConfigurationAndAccount(this.availableFiltersConfig.asObservable(), this.selectedAccount.pipe(operators.map(function (value) { return value !== null && value !== void 0 ? value : []; })));
        };
        BaseTransactionsContainer.prototype.configureTransctionsDetailsOutputBehaviour = function () {
            var _this = this;
            if (this.transactionsList && this.pendingTransactionsList && !this.showDetailsConfig) {
                var pending = this.showPendingTransactionsOnTop.pipe(operators.mergeMap(function (cond) { return rxjs.iif(function () { return cond; }, _this.pendingTransactionsList, rxjs.of({ items: [], totalCount: 0 })); }));
                rxjs.combineLatest([pending, this.transactionsList])
                    .pipe(operators.takeUntil(this.unsubscribeSubject), operators.map(function (_a) {
                    var _b = __read(_a, 2), pendingTransactionsList = _b[0], transactionsList = _b[1];
                    var pendingTransactions = pendingTransactionsList ? pendingTransactionsList.items : [];
                    var transactions = transactionsList ? transactionsList.items : [];
                    var mixed = {
                        items: __spreadArray(__spreadArray([], __read(pendingTransactions)), __read(transactions)),
                        totalCount: ((pendingTransactionsList === null || pendingTransactionsList === void 0 ? void 0 : pendingTransactionsList.totalCount) || 0) + ((transactionsList === null || transactionsList === void 0 ? void 0 : transactionsList.totalCount) || 0),
                    };
                    return mixed;
                }))
                    .subscribe(function (data) {
                    _this.transactionsLoaded.emit(data);
                });
            }
        };
        BaseTransactionsContainer.prototype.sumTransactionsResults = function (historyCount, pendingCount) {
            return this.showPendingTransactionsOnTop.pipe(operators.mergeMap(function (showPendingTransactionsOnTop) { return rxjs.iif(function () { return showPendingTransactionsOnTop; }, rxjs.merge(historyCount, pendingCount), historyCount); }), operators.scan(function (acc, curr) { return (Object.assign(Object.assign({}, acc), curr)); }, { history: 0, pending: 0 }), operators.map(function (_a) {
                var _b = _a.history, history = _b === void 0 ? 0 : _b, _c = _a.pending, pending = _c === void 0 ? 0 : _c;
                return history + pending;
            }));
        };
        BaseTransactionsContainer.prototype.onPageChange = function (page) {
            this.model.pageChange(page);
        };
        BaseTransactionsContainer.prototype.onSearch = function (query) {
            // search ui component sends an unexpected event
            // that is type Event. To avoid calling backend with that event
            // it has to be string
            if (typeof query === 'string') {
                this.model.search(query);
                this.pendingTransactionsService.search(query);
            }
        };
        BaseTransactionsContainer.prototype.onFilter = function (filterOptions) {
            this.model.filter(filterOptions);
            this.pendingTransactionsService.filter(filterOptions);
        };
        BaseTransactionsContainer.prototype.onSort = function (sortOptions) {
            this.model.sort(sortOptions);
        };
        BaseTransactionsContainer.prototype.onPrint = function () {
            window.print();
        };
        BaseTransactionsContainer.prototype.onExport = function (exportType) {
            var _this = this;
            this.storedExportType = Object.assign({}, exportType);
            if (exportType.isAvailable) {
                this.model
                    .exportToType(exportType.name)
                    .pipe(operators.takeUntil(this.unsubscribeSubject))
                    .subscribe(function (response) {
                    var anchorTag = document.createElement('a');
                    anchorTag.href = URL.createObjectURL(response.body);
                    var fileName = getNameFromContentDispositionHeader(response);
                    var defaultName = exportType.name.toLowerCase() === 'pdf' ? 'Account Activities' : 'transactions';
                    anchorTag.download = fileName !== '' ? fileName : defaultName;
                    anchorTag.click();
                }, function () {
                    _this.notificationService.showNotification({
                        header: _this.notificationServerErrorHeader,
                        message: _this.notificationServerErrorMessage || '',
                        modifier: 'error',
                    });
                });
            }
            else {
                this.pushNotification({
                    header: this.notificationErrorUpdateHeaderTemplate,
                    message: this.notificationErrorUpdateMessageTemplate,
                    modifier: 'error',
                });
            }
        };
        BaseTransactionsContainer.prototype.onDetailOpen = function (transaction) {
            if (!this.showDetailsConfig) {
                this.transactionSelected.emit(transaction);
            }
            else {
                this.transactionDetailsService.selectTransaction(transaction);
            }
        };
        BaseTransactionsContainer.prototype.pushNotification = function (notificationMessage) {
            this.notificationService.showNotification(Object.assign({ dismissible: true, ttl: notificationTtl }, notificationMessage));
        };
        return BaseTransactionsContainer;
    }());
    BaseTransactionsContainer.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: BaseTransactionsContainer, deps: "invalid", target: i0__namespace.ɵɵFactoryTarget.Directive });
    BaseTransactionsContainer.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: BaseTransactionsContainer, inputs: { googleAPIKey: "googleAPIKey", selectedAccount: "selectedAccount", initialFilterOptions: "initialFilterOptions", initialSortOptions: "initialSortOptions", pageSizeValue: ["pageSize", "pageSizeValue"], maxNavPagesValue: ["maxNavPages", "maxNavPagesValue"], paginationTypeValue: ["paginationType", "paginationTypeValue"], showControlsValue: ["showControls", "showControlsValue"], showChangeCategoryValue: ["showChangeCategory", "showChangeCategoryValue"], showPendingTransactionsOnTopValue: ["showPendingTransactionsOnTop", "showPendingTransactionsOnTopValue"], showCheckImageValue: ["showCheckImage", "showCheckImageValue"], showManageNotesValue: ["showManageNotes", "showManageNotesValue"], getOrPostEndpointsValue: ["getOrPostEndpoints", "getOrPostEndpointsValue"], disputeByBillingStatusValue: ["disputeByBillingStatus", "disputeByBillingStatusValue"], disputeEligibilityDaysValue: ["disputeEligibilityDays", "disputeEligibilityDaysValue"], disputeTransactionTypesValue: ["disputeTransactionTypes", "disputeTransactionTypesValue"], enableDisputeAndInquiryValue: ["enableDisputeAndInquiry", "enableDisputeAndInquiryValue"], availableFiltersValue: ["availableFiltersConfig", "availableFiltersValue"], inquireTopicIdValue: ["inquireTopicId", "inquireTopicIdValue"], disputeTopicIdValue: ["disputeTopicId", "disputeTopicIdValue"] }, outputs: { transactionSelected: "transactionSelected", transactionsLoaded: "transactionsLoaded" }, viewQueries: [{ propertyName: "notificationErrorUpdateHeaderTemplate", first: true, predicate: ["notificationErrorUpdateHeader"], descendants: true }, { propertyName: "notificationErrorUpdateMessageTemplate", first: true, predicate: ["notificationErrorUpdateMessage"], descendants: true }, { propertyName: "notificationServerErrorHeader", first: true, predicate: ["notificationServerErrorHeader"], descendants: true }, { propertyName: "notificationServerErrorMessage", first: true, predicate: ["notificationServerErrorMessage"], descendants: true }], ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: BaseTransactionsContainer, decorators: [{
                type: i0.Directive
            }], ctorParameters: function () { return [{ type: TransactionsService }, { type: WidgetPropertiesService }, { type: i0__namespace.ChangeDetectorRef }, { type: undefined }, { type: i3__namespace$4.NotificationService }, { type: PendingTransactionsService }, { type: TransactionDetailsService }, { type: AvailableFiltersConfigService }, { type: undefined }]; }, propDecorators: { notificationErrorUpdateHeaderTemplate: [{
                    type: i0.ViewChild,
                    args: ['notificationErrorUpdateHeader']
                }], notificationErrorUpdateMessageTemplate: [{
                    type: i0.ViewChild,
                    args: ['notificationErrorUpdateMessage']
                }], notificationServerErrorHeader: [{
                    type: i0.ViewChild,
                    args: ['notificationServerErrorHeader', { static: false }]
                }], notificationServerErrorMessage: [{
                    type: i0.ViewChild,
                    args: ['notificationServerErrorMessage', { static: false }]
                }], googleAPIKey: [{
                    type: i0.Input
                }], selectedAccount: [{
                    type: i0.Input
                }], initialFilterOptions: [{
                    type: i0.Input
                }], initialSortOptions: [{
                    type: i0.Input
                }], pageSizeValue: [{
                    type: i0.Input,
                    args: ['pageSize']
                }], maxNavPagesValue: [{
                    type: i0.Input,
                    args: ['maxNavPages']
                }], paginationTypeValue: [{
                    type: i0.Input,
                    args: ['paginationType']
                }], showControlsValue: [{
                    type: i0.Input,
                    args: ['showControls']
                }], showChangeCategoryValue: [{
                    type: i0.Input,
                    args: ['showChangeCategory']
                }], showPendingTransactionsOnTopValue: [{
                    type: i0.Input,
                    args: ['showPendingTransactionsOnTop']
                }], showCheckImageValue: [{
                    type: i0.Input,
                    args: ['showCheckImage']
                }], showManageNotesValue: [{
                    type: i0.Input,
                    args: ['showManageNotes']
                }], getOrPostEndpointsValue: [{
                    type: i0.Input,
                    args: ['getOrPostEndpoints']
                }], disputeByBillingStatusValue: [{
                    type: i0.Input,
                    args: ['disputeByBillingStatus']
                }], disputeEligibilityDaysValue: [{
                    type: i0.Input,
                    args: ['disputeEligibilityDays']
                }], disputeTransactionTypesValue: [{
                    type: i0.Input,
                    args: ['disputeTransactionTypes']
                }], enableDisputeAndInquiryValue: [{
                    type: i0.Input,
                    args: ['enableDisputeAndInquiry']
                }], availableFiltersValue: [{
                    type: i0.Input,
                    args: ['availableFiltersConfig']
                }], inquireTopicIdValue: [{
                    type: i0.Input,
                    args: ['inquireTopicId']
                }], disputeTopicIdValue: [{
                    type: i0.Input,
                    args: ['disputeTopicId']
                }], transactionSelected: [{
                    type: i0.Output
                }], transactionsLoaded: [{
                    type: i0.Output
                }] } });
    var TransactionsNoAccountSelectedStateCustomizableDirective = /** @class */ (function (_super) {
        __extends(TransactionsNoAccountSelectedStateCustomizableDirective, _super);
        function TransactionsNoAccountSelectedStateCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return TransactionsNoAccountSelectedStateCustomizableDirective;
    }(i3.BbTemplate));
    TransactionsNoAccountSelectedStateCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsNoAccountSelectedStateCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    TransactionsNoAccountSelectedStateCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsNoAccountSelectedStateCustomizableDirective, selector: "[bbTransactionsNoAccountSelectedStateCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsNoAccountSelectedStateCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbTransactionsNoAccountSelectedStateCustomizable]',
                    }]
            }] });
    var TransactionsErrorStateCustomizableDirective = /** @class */ (function (_super) {
        __extends(TransactionsErrorStateCustomizableDirective, _super);
        function TransactionsErrorStateCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return TransactionsErrorStateCustomizableDirective;
    }(i3.BbTemplate));
    TransactionsErrorStateCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsErrorStateCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    TransactionsErrorStateCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsErrorStateCustomizableDirective, selector: "[bbTransactionsErrorStateCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsErrorStateCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbTransactionsErrorStateCustomizable]',
                    }]
            }] });

    var CapitalizePipe = /** @class */ (function () {
        function CapitalizePipe() {
        }
        CapitalizePipe.prototype.transform = function (value) {
            return value[0].toUpperCase() + value.substr(1).toLowerCase();
        };
        return CapitalizePipe;
    }());
    CapitalizePipe.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CapitalizePipe, deps: [], target: i0__namespace.ɵɵFactoryTarget.Pipe });
    CapitalizePipe.ɵpipe = i0__namespace.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CapitalizePipe, name: "bbCapitalizePipe" });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CapitalizePipe, decorators: [{
                type: i0.Pipe,
                args: [{ name: 'bbCapitalizePipe' }]
            }] });

    exports.TransactionIconType = void 0;
    (function (TransactionIconType) {
        TransactionIconType[TransactionIconType["category"] = 1] = "category";
        TransactionIconType[TransactionIconType["type"] = 2] = "type";
        TransactionIconType[TransactionIconType["creditDebit"] = 3] = "creditDebit";
    })(exports.TransactionIconType || (exports.TransactionIconType = {}));
    var BaseTransactionIcon = /** @class */ (function () {
        function BaseTransactionIcon() {
            this.throwIfIncorrect();
        }
        BaseTransactionIcon.prototype.cleanClassName = function (text) {
            var result = text.toLowerCase().replace(/\W/g, '-').replace(/-{2,}/g, '-');
            if (result.endsWith('-')) {
                return result.slice(0, -1);
            }
            else {
                return result;
            }
        };
        BaseTransactionIcon.prototype.throwIfIncorrect = function () {
            if (!this.isValid) {
                throw new Error("Invalid transaction provided to " + this.constructor.name);
            }
        };
        return BaseTransactionIcon;
    }());
    var TransactionCategoryIcon = /** @class */ (function (_super) {
        __extends(TransactionCategoryIcon, _super);
        function TransactionCategoryIcon(transaction) {
            var _this = _super.call(this) || this;
            _this.transaction = transaction;
            return _this;
        }
        Object.defineProperty(TransactionCategoryIcon.prototype, "title", {
            get: function () {
                return !this.transaction.isPending ? this.transaction.category || '' : 'pending';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TransactionCategoryIcon.prototype, "type", {
            get: function () {
                return exports.TransactionIconType.category;
            },
            enumerable: false,
            configurable: true
        });
        TransactionCategoryIcon.prototype.isValid = function () {
            return this.transaction.isPending || (this.transaction !== undefined && this.transaction.category !== undefined);
        };
        TransactionCategoryIcon.prototype.formatClassName = function () {
            return "bb-transaction-category-" + this.cleanClassName(this.transaction.category || 'pending');
        };
        return TransactionCategoryIcon;
    }(BaseTransactionIcon));
    var TransactionTypeIcon = /** @class */ (function (_super) {
        __extends(TransactionTypeIcon, _super);
        function TransactionTypeIcon(transaction) {
            var _this = _super.call(this) || this;
            _this.transaction = transaction;
            return _this;
        }
        Object.defineProperty(TransactionTypeIcon.prototype, "title", {
            get: function () {
                return this.transaction.type || '';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TransactionTypeIcon.prototype, "type", {
            get: function () {
                return exports.TransactionIconType.type;
            },
            enumerable: false,
            configurable: true
        });
        TransactionTypeIcon.prototype.isValid = function () {
            return !!this.transaction && !!this.transaction.type;
        };
        TransactionTypeIcon.prototype.formatClassName = function () {
            return this.transaction.type ? "bb-icon-transaction-type-" + this.cleanClassName(this.transaction.type) : '';
        };
        return TransactionTypeIcon;
    }(BaseTransactionIcon));
    var TransactionCreditDebitIcon = /** @class */ (function (_super) {
        __extends(TransactionCreditDebitIcon, _super);
        function TransactionCreditDebitIcon(transaction) {
            var _this = _super.call(this) || this;
            _this.transaction = transaction;
            return _this;
        }
        Object.defineProperty(TransactionCreditDebitIcon.prototype, "title", {
            get: function () {
                return this.indicator;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TransactionCreditDebitIcon.prototype, "type", {
            get: function () {
                return exports.TransactionIconType.creditDebit;
            },
            enumerable: false,
            configurable: true
        });
        TransactionCreditDebitIcon.prototype.formatClassName = function () {
            return this.transaction.transactionAmountCurrency
                ? "bb-icon-credit-debit-indicator-" + this.cleanClassName(this.indicator)
                : '';
        };
        Object.defineProperty(TransactionCreditDebitIcon.prototype, "indicator", {
            get: function () {
                if (this.transaction.transactionAmountCurrency) {
                    return parseInt(this.transaction.transactionAmountCurrency.amount, 10) > 0 ? 'incoming' : 'outgoing';
                }
                return '';
            },
            enumerable: false,
            configurable: true
        });
        TransactionCreditDebitIcon.prototype.isValid = function () {
            return this.transaction !== undefined && this.transaction.transactionAmountCurrency !== undefined;
        };
        return TransactionCreditDebitIcon;
    }(BaseTransactionIcon));

    var TransactionsIconCategoriesFactoryService = /** @class */ (function () {
        function TransactionsIconCategoriesFactoryService() {
        }
        TransactionsIconCategoriesFactoryService.prototype.create = function (transaction) {
            if (transaction.category || transaction.isPending) {
                return new TransactionCategoryIcon(transaction);
            }
            else if (transaction.type) {
                return new TransactionTypeIcon(transaction);
            }
            else {
                return new TransactionCreditDebitIcon(transaction);
            }
        };
        return TransactionsIconCategoriesFactoryService;
    }());
    TransactionsIconCategoriesFactoryService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsIconCategoriesFactoryService, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    TransactionsIconCategoriesFactoryService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsIconCategoriesFactoryService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsIconCategoriesFactoryService, decorators: [{
                type: i0.Injectable
            }] });

    var TransactionCategoryIconComponent = /** @class */ (function () {
        function TransactionCategoryIconComponent(transactionsIconCategoriesFactory, cd) {
            this.transactionsIconCategoriesFactory = transactionsIconCategoriesFactory;
            this.cd = cd;
            /**
             * Whether to show the icon in a circle.
             */
            this.circle = false;
            /* eslint-enable */
            /**
             * Determines if the image is done loading.
             */
            this.hasImageLoaded = false;
        }
        TransactionCategoryIconComponent.prototype.ngOnInit = function () {
            if (this.transaction === undefined) {
                throw new Error("\"transaction\" input is required in \"" + this.constructor.name + "\"");
            }
            this.transactionIcon = this.transactionsIconCategoriesFactory.create(this.transaction);
        };
        TransactionCategoryIconComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            if (this.categoryImage) {
                this.categoryImage.nativeElement.onload = function () {
                    _this.hasImageLoaded = true;
                    _this.cd.markForCheck();
                };
            }
        };
        return TransactionCategoryIconComponent;
    }());
    TransactionCategoryIconComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionCategoryIconComponent, deps: [{ token: TransactionsIconCategoriesFactoryService }, { token: i0__namespace.ChangeDetectorRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    TransactionCategoryIconComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TransactionCategoryIconComponent, selector: "bb-transaction-category-icon", inputs: { transaction: "transaction", circle: "circle", size: "size" }, viewQueries: [{ propertyName: "categoryImage", first: true, predicate: ["categoryImage"], descendants: true }], ngImport: i0__namespace, template: "<div\n  aria-hidden=\"true\"\n  class=\"bb-transaction-category bb-transaction-category--enriched\"\n  title=\"{{ transaction?.merchant ? transaction?.merchant?.name : transactionIcon?.title }}\"\n  [ngClass]=\"[\n    circle ? 'bb-transaction-category-icon-circle' : 'bb-transaction-category-icon',\n    size ? 'bb-transaction-category--' + size : '',\n    !transaction?.merchant?.logo || !hasImageLoaded ? transactionIcon?.formatClassName() : ''\n  ]\"\n>\n  <img\n    class=\"bb-transaction-category__image\"\n    *ngIf=\"transaction?.merchant?.logo\"\n    [hidden]=\"!hasImageLoaded\"\n    [src]=\"transaction?.merchant?.logo\"\n    #categoryImage\n  />\n</div>\n", directives: [{ type: i2__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionCategoryIconComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-transaction-category-icon',
                        templateUrl: './transaction-category-icon.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: TransactionsIconCategoriesFactoryService }, { type: i0__namespace.ChangeDetectorRef }]; }, propDecorators: { transaction: [{
                    type: i0.Input
                }], circle: [{
                    type: i0.Input
                }], size: [{
                    type: i0.Input
                }], categoryImage: [{
                    type: i0.ViewChild,
                    args: ['categoryImage']
                }] } });

    var TransactionUpdateService = /** @class */ (function () {
        function TransactionUpdateService(transactionsDataHttpService) {
            this.transactionsDataHttpService = transactionsDataHttpService;
        }
        TransactionUpdateService.prototype.handleError = function (error) {
            if (error.error instanceof ErrorEvent) {
                // A client-side or network error occurred.  Handle it accordingly.
                console.error('An error occurred:', error.error.message);
            }
            else {
                // The backend returned an unsuccessful response code.
                // The response body may contain clues as to what went wrong.
                console.error("Backend returned code " + error.status + ", " + ("body was: " + error.error));
            }
            // Return an observable with a user-facing error message.
            return rxjs.throwError('Something bad happened; please try again later.');
        };
        TransactionUpdateService.prototype.update = function (transaction, update) {
            if (typeof transaction.id === 'undefined' || typeof transaction.arrangementId === 'undefined') {
                return rxjs.throwError('updateNotes: invalid transaction');
            }
            return this.transactionsDataHttpService
                .patchTransactions({
                transactionsClientPatchRequestBody: [
                    {
                        id: transaction.id,
                        arrangementId: transaction.arrangementId,
                        notes: update.notes,
                        disputeStatus: update.disputeStatus,
                        category: update.category,
                    },
                ],
            }, 'response')
                .pipe(operators.catchError(this.handleError));
        };
        TransactionUpdateService.prototype.setDisputeStatus = function (transaction, disputeStatus) {
            return this.update(transaction, { disputeStatus: disputeStatus });
        };
        TransactionUpdateService.prototype.updateNotes = function (transaction, notes) {
            return this.update(transaction, { notes: notes });
        };
        return TransactionUpdateService;
    }());
    TransactionUpdateService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionUpdateService, deps: [{ token: i1__namespace$1.TransactionClientHttpService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    TransactionUpdateService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionUpdateService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionUpdateService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace$1.TransactionClientHttpService }]; } });

    /* eslint-disable no-redeclare*/
    // eslint-disable-next-line @typescript-eslint/no-namespace
    exports.TransactionsEnumValue = void 0;
    (function (TransactionsEnumValue) {
        // eslint-disable-next-line no-inner-declarations
        function toTitleCase(text) {
            if (!text) {
                return '';
            }
            return "" + text.charAt(0).toUpperCase() + text.substr(1).toLowerCase();
        }
        // Until Angular supports i18n in typescript, this is the way to go
        // eslint-disable-next-line no-inner-declarations
        function processEnumValue(enumValue) {
            switch (enumValue.value) {
                case 'CRDT':
                    return Object.assign(Object.assign({}, enumValue), { name: 'Credit' });
                case 'DBIT':
                    return Object.assign(Object.assign({}, enumValue), { name: 'Debit' });
                case 'BILLED':
                case 'UNBILLED':
                case 'PENDING':
                    return Object.assign(Object.assign({}, enumValue), { name: enumValue.name || toTitleCase(enumValue.value) });
                default:
                    return Object.assign(Object.assign({}, enumValue), { name: enumValue.name || enumValue.value });
            }
        }
        // eslint-disable-next-line no-inner-declarations
        function processEnumValues(enumValues) {
            return enumValues.map(processEnumValue);
        }
        function fromHttpResponse(response) {
            return processEnumValues(response.body || []);
        }
        TransactionsEnumValue.fromHttpResponse = fromHttpResponse;
    })(exports.TransactionsEnumValue || (exports.TransactionsEnumValue = {}));
    /* eslint-enable no-redeclare*/

    var EnumValuesService = /** @class */ (function () {
        function EnumValuesService(transactionsDataHttpService) {
            this.transactionsDataHttpService = transactionsDataHttpService;
            this.enumValues = {};
        }
        EnumValuesService.prototype.handleError = function (error) {
            if (error.error instanceof ErrorEvent) {
                // A client-side or network error occurred.  Handle it accordingly.
                console.error('An error occurred:', error.error.message);
            }
            else {
                // The backend returned an unsuccessful response code.
                // The response body may contain clues as to what went wrong.
                console.error("Backend returned code " + error.status + ", " + ("body was: " + error.error));
            }
            // Return an observable with a user-facing error message.
            return rxjs.throwError('Something bad happened; please try again later.');
        };
        EnumValuesService.prototype.loadEnumValues = function (attributeName) {
            return this.transactionsDataHttpService
                .getEnumValuesByAttributeName({ attributeName: attributeName }, 'response')
                .pipe(operators.map(exports.TransactionsEnumValue.fromHttpResponse), operators.catchError(this.handleError));
        };
        EnumValuesService.prototype.getEnumValues = function (attributeName) {
            if (typeof this.enumValues[attributeName] === 'undefined') {
                this.enumValues[attributeName] = this.loadEnumValues(attributeName);
            }
            return this.enumValues[attributeName];
        };
        return EnumValuesService;
    }());
    EnumValuesService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: EnumValuesService, deps: [{ token: i1__namespace$1.TransactionClientHttpService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    EnumValuesService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: EnumValuesService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: EnumValuesService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace$1.TransactionClientHttpService }]; } });

    function categoriesManagementMap(item) {
        return Object.assign({}, item);
    }
    function fromCategoriesManagementResponse(response) {
        return (response.body || []).map(categoriesManagementMap);
    }

    var CategoriesService = /** @class */ (function () {
        function CategoriesService(categoriesManagementDataHttpService) {
            this.categoriesManagementDataHttpService = categoriesManagementDataHttpService;
        }
        CategoriesService.prototype.getCategories = function () {
            return this.categoriesManagementDataHttpService
                .getCategories({
                level: categoryListLevelParam,
            }, 'response')
                .pipe(operators.shareReplay(), operators.map(fromCategoriesManagementResponse));
        };
        return CategoriesService;
    }());
    CategoriesService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CategoriesService, deps: [{ token: i1__namespace$7.CategoriesHttpService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    CategoriesService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CategoriesService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: CategoriesService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace$7.CategoriesHttpService }]; } });

    var TransactionsMapUiComponent = /** @class */ (function () {
        function TransactionsMapUiComponent() {
        }
        TransactionsMapUiComponent.prototype.buildMapOptions = function (location) {
            if (location.latitude && location.longitude) {
                return {
                    center: {
                        lat: location.latitude,
                        lng: location.longitude,
                    },
                    zoom: 10,
                    disableDefaultUI: true,
                    zoomControl: false,
                    styles: [
                        {
                            featureType: 'poi',
                            stylers: [{ visibility: 'off' }],
                        },
                    ],
                };
            }
            return undefined;
        };
        TransactionsMapUiComponent.prototype.getFullAddress = function (location) {
            return encodeURI(location.latitude + ", " + location.longitude);
        };
        TransactionsMapUiComponent.prototype.ngAfterViewInit = function () {
            if (this.location && this.mapContainer) {
                var options = this.buildMapOptions(this.location);
                var map = new google.maps.Map(this.mapContainer.nativeElement, options);
                if (this.location && this.location.latitude && this.location.longitude) {
                    var mapUrl_1 = this.getFullAddress(this.location);
                    var marker = new google.maps.Marker({
                        position: {
                            lat: this.location.latitude,
                            lng: this.location.longitude,
                        },
                        map: map,
                    });
                    marker.addListener('click', function () {
                        window.open('https://www.google.com/maps/dir//' + mapUrl_1, '_blank');
                    });
                }
            }
        };
        return TransactionsMapUiComponent;
    }());
    TransactionsMapUiComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsMapUiComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    TransactionsMapUiComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsMapUiComponent, selector: "bb-transactions-map-ui", inputs: { location: "location" }, viewQueries: [{ propertyName: "mapContainer", first: true, predicate: ["bbMapContainer"], descendants: true }], ngImport: i0__namespace, template: "<div class=\"bb-transcations-geolocation-map\" #bbMapContainer></div>\n", changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsMapUiComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-transactions-map-ui',
                        templateUrl: 'transactions-map-ui.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], propDecorators: { mapContainer: [{
                    type: i0.ViewChild,
                    args: ['bbMapContainer']
                }], location: [{
                    type: i0.Input
                }] } });

    var TransactionGeoLocationMapComponent = /** @class */ (function () {
        function TransactionGeoLocationMapComponent() {
            this.loadingStateEnum = exports.TransactionsDetailsLoadingState;
        }
        return TransactionGeoLocationMapComponent;
    }());
    TransactionGeoLocationMapComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionGeoLocationMapComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    TransactionGeoLocationMapComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TransactionGeoLocationMapComponent, selector: "bb-transaction-geo-location-map", inputs: { transaction: "transaction", loadingStatus: "loadingStatus" }, ngImport: i0__namespace, template: "<div class=\"bb-transactions-geolocation\">\n  <span class=\"bb-inline-stack bb-block bb-block--sm\" *ngIf=\"transaction?.location?.address\">\n    <bb-icon-ui class=\"bb-inline-stack__item\" name=\"location-on\" size=\"md\"></bb-icon-ui>\n    <span class=\"bb-inline-stack__item bb-transactions-geolocation__address\">{{ transaction?.location?.address }}</span>\n  </span>\n  <ng-container *ngIf=\"loadingStatus !== loadingStateEnum.notStarted\">\n    <ng-container *ngIf=\"loadingStatus !== loadingStateEnum.notLoaded\">\n      <ng-container *ngIf=\"loadingStatus !== loadingStateEnum.error; else errorState\">\n        <ng-container *ngIf=\"loadingStatus !== loadingStateEnum.loading; else loadingState\">\n          <bb-transactions-map-ui [location]=\"transaction?.location\"></bb-transactions-map-ui>\n        </ng-container>\n      </ng-container>\n    </ng-container>\n  </ng-container>\n</div>\n\n<ng-template #loadingState>\n  <bb-loading-indicator-ui loaderSize=\"lg\"></bb-loading-indicator-ui>\n</ng-template>\n\n<ng-template #errorState>\n  <!-- Error state is not defined yet -->\n</ng-template>\n", components: [{ type: i1__namespace$3.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: TransactionsMapUiComponent, selector: "bb-transactions-map-ui", inputs: ["location"] }, { type: i3__namespace$2.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }], directives: [{ type: i2__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionGeoLocationMapComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-transaction-geo-location-map',
                        templateUrl: './transaction-geo-location-map.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], propDecorators: { transaction: [{
                    type: i0.Input
                }], loadingStatus: [{
                    type: i0.Input
                }] } });

    /**
     * Utility service for DOM manipulations
     */
    var DomAttributesService = /** @class */ (function () {
        function DomAttributesService() {
            this.basePrefix = 'bb_transactions';
            this.idCounter = 0;
        }
        DomAttributesService.prototype.nextId = function (prefix) {
            return this.basePrefix + "-" + (prefix ? prefix : 'default') + "-" + Date.now() + "-" + this.idCounter++;
        };
        return DomAttributesService;
    }());
    DomAttributesService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DomAttributesService, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    DomAttributesService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DomAttributesService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DomAttributesService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }] });

    var DynamicIdDirective = /** @class */ (function () {
        function DynamicIdDirective(_elRef, _renderer, domAttributesService, cd) {
            this._elRef = _elRef;
            this._renderer = _renderer;
            this.domAttributesService = domAttributesService;
            this.cd = cd;
        }
        DynamicIdDirective.prototype.ngAfterContentInit = function () {
            var _this = this;
            setTimeout(function () {
                _this._renderer.setAttribute(_this._elRef.nativeElement, 'id', _this.domAttributesService.nextId(_this.bbDynamicId));
                _this.cd.markForCheck();
            });
        };
        return DynamicIdDirective;
    }());
    DynamicIdDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DynamicIdDirective, deps: [{ token: i0__namespace.ElementRef }, { token: i0__namespace.Renderer2 }, { token: DomAttributesService }, { token: i0__namespace.ChangeDetectorRef }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    DynamicIdDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: DynamicIdDirective, selector: "[bbDynamicId]", inputs: { bbDynamicId: "bbDynamicId" }, exportAs: ["bbDynamicId"], ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DynamicIdDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbDynamicId]',
                        exportAs: 'bbDynamicId',
                    }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }, { type: i0__namespace.Renderer2 }, { type: DomAttributesService }, { type: i0__namespace.ChangeDetectorRef }]; }, propDecorators: { bbDynamicId: [{
                    type: i0.Input
                }] } });

    var MessagesService = /** @class */ (function () {
        function MessagesService(messageCenterHttpService) {
            this.messageCenterHttpService = messageCenterHttpService;
            // TODO: default message is out of scope
            this.defaultMessage = rxjs.of({
                body: b64Encode('test message'),
                subject: 'no subject',
                topic: 'no topic',
                sender: {
                    name: 'test sender',
                },
            });
        }
        MessagesService.prototype.saveMessages = function (message) {
            return this.messageCenterHttpService.postMessages({
                presentationMessagePostRequestBody: message,
            });
        };
        MessagesService.prototype.saveAttachment = function (attachment) {
            return this.messageCenterHttpService.postMessageAttachments({ attachment: attachment }).pipe(operators.map(function (data) { return data.id; }));
        };
        MessagesService.prototype.deleteAttachments = function (attachmentIds) {
            return this.messageCenterHttpService
                .deleteMessageAttachments({ ids: attachmentIds })
                .pipe(operators.map(function (data) { return data.deleted; }));
        };
        MessagesService.prototype.createDefaultBody = function (transaction) {
            var _a, _b;
            return "transactionID: " + transaction.id + "\nreferenceNumber: " + transaction.reference + "\narranagementID: " + transaction.arrangementId + "\nbookingDate: " + transaction.bookingDate + "\namount: " + ((_a = transaction.transactionAmountCurrency) === null || _a === void 0 ? void 0 : _a.amount) + "\nmerchantName: " + ((_b = transaction.merchant) === null || _b === void 0 ? void 0 : _b.name) + "\ncounterpartyName: " + transaction.counterPartyName + "\ndescription: " + transaction.description + "\ntype: " + transaction.type;
        };
        return MessagesService;
    }());
    MessagesService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: MessagesService, deps: [{ token: i1__namespace$8.MessagecenterHttpService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    MessagesService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: MessagesService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: MessagesService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace$8.MessagecenterHttpService }]; } });

    /* eslint-disable  @typescript-eslint/no-non-null-assertion */
    var TransactionsInquireAndDisputeUIService = /** @class */ (function () {
        function TransactionsInquireAndDisputeUIService(messagesService) {
            this.messagesService = messagesService;
            this.showReportSubject = new rxjs.Subject();
            this.DEFAULT_MESSAGE = {
                attachments: [],
                body: '',
                topic: 'inquire',
            };
            this.showReport = this.showReportSubject.asObservable();
            this.message = Object.assign({}, this.DEFAULT_MESSAGE);
            this.reportState = exports.TransactionsDetailsLoadingState.notStarted;
            this.subjectReportMap = {
                dispute: $localize(templateObject_1 || (templateObject_1 = __makeTemplateObject([":Dispute subject@@transactions.dispute.subject:Transaction dispute raised on"], [":Dispute subject@@transactions.dispute.subject:Transaction dispute raised on"]))),
                inquire: $localize(templateObject_2 || (templateObject_2 = __makeTemplateObject([":Inquiry subject@@transactions.inquire.subject:Transaction inquiry raised on"], [":Inquiry subject@@transactions.inquire.subject:Transaction inquiry raised on"]))),
            };
        }
        TransactionsInquireAndDisputeUIService.prototype.formatMessage = function (messageForm, defaultBody, inquireAndDisputeTopics, transaction) {
            var _a = messageForm.topic, topic = _a === void 0 ? 'inquire' : _a, _b = messageForm.body, body = _b === void 0 ? '' : _b, _c = messageForm.attachments, attachments = _c === void 0 ? [] : _c;
            return {
                body: b64Encode([defaultBody, body].join('\n')),
                topic: inquireAndDisputeTopics[topic],
                attachments: attachments.map(function (data) { return data.id || ''; }),
                subject: this.subjectReportMap[topic] + " " + (transaction === null || transaction === void 0 ? void 0 : transaction.arrangementId),
            };
        };
        // TODO: Add unit tests when the functionality is complete
        TransactionsInquireAndDisputeUIService.prototype.saveReport = function (message) {
            var _this = this;
            this.reportState = exports.TransactionsDetailsLoadingState.loading;
            return this.messagesService.saveMessages(message).pipe(operators.map(function () {
                _this.message = _this.DEFAULT_MESSAGE;
                _this.showReportForm(false);
                _this.reportState = exports.TransactionsDetailsLoadingState.done;
                return message;
            }), operators.catchError(function () {
                _this.reportState = exports.TransactionsDetailsLoadingState.error;
                return rxjs.of(undefined);
            }));
        };
        TransactionsInquireAndDisputeUIService.prototype.showReportForm = function (display) {
            this.showReportSubject.next(display);
        };
        TransactionsInquireAndDisputeUIService.prototype.cancelReport = function () {
            this.removeAllFiles();
            this.reportState = exports.TransactionsDetailsLoadingState.notStarted;
            this.message = this.DEFAULT_MESSAGE;
            this.showReportForm(false);
        };
        TransactionsInquireAndDisputeUIService.prototype.fileChange = function (file) {
            var _this = this;
            var attachment = {
                name: file.name,
                size: file.size,
                content: rxjs.from(file.arrayBuffer()),
            };
            var currentAttachments = this.message.attachments || [];
            this.message.attachments = __spreadArray(__spreadArray([], __read(currentAttachments)), [attachment]);
            var state = this.reportState;
            this.reportState = exports.TransactionsDetailsLoadingState.loading;
            return this.messagesService.saveAttachment(file).pipe(operators.map(function (id) {
                attachment = Object.assign({ id: id }, attachment);
                _this.reportState = exports.TransactionsDetailsLoadingState.notStarted;
                _this.message.attachments = __spreadArray(__spreadArray([], __read(currentAttachments)), [attachment]);
                return id;
            }), operators.catchError(function () {
                _this.reportState = state;
                _this.message.attachments = __spreadArray([], __read(currentAttachments));
                return rxjs.of('');
                //TODO: add error message
            }));
        };
        TransactionsInquireAndDisputeUIService.prototype.deleteReportForm = function () {
            //TODO: this is just a placeholder for now
        };
        TransactionsInquireAndDisputeUIService.prototype.fileRemoved = function (attachment) {
            var _this = this;
            var _a = attachment.id, id = _a === void 0 ? '' : _a;
            return this.messagesService.deleteAttachments([id]).pipe(operators.tap(function () {
                _this.message.attachments = _this.message.attachments.filter(function (item) { return item.id !== id; });
            }));
        };
        TransactionsInquireAndDisputeUIService.prototype.removeAllFiles = function () {
            var _this = this;
            if (this.message.attachments.length > 0) {
                var files = this.message.attachments.map(function (item) { return item.id || ''; });
                this.messagesService.deleteAttachments(files).subscribe({
                    next: function () {
                        _this.message.attachments = [];
                    },
                });
            }
        };
        return TransactionsInquireAndDisputeUIService;
    }());
    TransactionsInquireAndDisputeUIService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsInquireAndDisputeUIService, deps: [{ token: MessagesService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    TransactionsInquireAndDisputeUIService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsInquireAndDisputeUIService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsInquireAndDisputeUIService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: MessagesService }]; } });
    var templateObject_1, templateObject_2;

    var TransactionsCommonModule = /** @class */ (function () {
        function TransactionsCommonModule() {
        }
        return TransactionsCommonModule;
    }());
    TransactionsCommonModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsCommonModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    TransactionsCommonModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsCommonModule, declarations: [TransactionsNumberOfResultsFoundComponent,
            TransactionCheckImageComponent,
            TransactionGeoLocationMapComponent,
            TransactionsErrorStateCustomizableDirective,
            TransactionsNoAccountSelectedStateCustomizableDirective,
            AccessibilityKeyboardDirective,
            TransactionsNumberOfResultsFoundCustomizableDirective,
            TransactionsMapUiComponent,
            TransactionCategoryIconComponent,
            TransactionCheckImageItemComponent,
            CapitalizePipe,
            DocumentViewerBackdropComponent,
            DocumentViewerContainerComponent,
            DocumentViewerHeaderComponent,
            DocumentViewerInteractorComponent,
            ImageViewerComponent,
            TransactionCheckImageDocumentViewerComponent,
            DynamicIdDirective,
            TransactionsInquiryDisputeComponent,
            TransactionsDisputeStatusTagComponent,
            TransactionsDisputeBannerComponent], imports: [i2.CommonModule,
            i1$3.IconModule,
            i3$1.ButtonModule,
            i8.LoadButtonModule,
            i2$2.InputRadioGroupModule,
            i14.TooltipModule,
            i1$4.ReactiveFormsModule,
            i3$2.LoadingIndicatorModule,
            i4.EmptyStateModule,
            i2$1.DropdownMenuModule,
            i5.A11yModule,
            i4$1.RichTextEditorModule,
            i3$3.InputValidationMessageModule,
            i5$1.InputFileModule,
            i6.FileAttachmentModule,
            i7.AlertModule,
            i10.ModalModule,
            i1$5.BadgeModule], exports: [TransactionsNumberOfResultsFoundComponent,
            TransactionsErrorStateCustomizableDirective,
            TransactionsNoAccountSelectedStateCustomizableDirective,
            AccessibilityKeyboardDirective,
            TransactionCheckImageComponent,
            TransactionCheckImageItemComponent,
            TransactionGeoLocationMapComponent,
            TransactionsNumberOfResultsFoundCustomizableDirective,
            i1$3.IconModule,
            i5.A11yModule,
            TransactionsMapUiComponent,
            TransactionCategoryIconComponent,
            CapitalizePipe,
            DocumentViewerBackdropComponent,
            DocumentViewerContainerComponent,
            DocumentViewerHeaderComponent,
            DocumentViewerInteractorComponent,
            ImageViewerComponent,
            TransactionCheckImageDocumentViewerComponent,
            i4.EmptyStateModule,
            i3$2.LoadingIndicatorModule,
            i2$1.DropdownMenuModule,
            DynamicIdDirective,
            TransactionsInquiryDisputeComponent,
            TransactionsDisputeStatusTagComponent,
            TransactionsDisputeBannerComponent] });
    TransactionsCommonModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsCommonModule, providers: [
            TransactionUpdateService,
            EnumValuesService,
            CategoriesService,
            AccountsService,
            TransactionsIconCategoriesFactoryService,
            MapAPILoaderService,
            DomAttributesService,
            MessagesService,
            TransactionsInquireAndDisputeUIService,
            PaymentsBatchService,
            AvailableFiltersConfigService,
        ], imports: [[
                i2.CommonModule,
                i1$3.IconModule,
                i3$1.ButtonModule,
                i8.LoadButtonModule,
                i2$2.InputRadioGroupModule,
                i14.TooltipModule,
                i1$4.ReactiveFormsModule,
                i3$2.LoadingIndicatorModule,
                i4.EmptyStateModule,
                i2$1.DropdownMenuModule,
                i5.A11yModule,
                i4$1.RichTextEditorModule,
                i3$3.InputValidationMessageModule,
                i5$1.InputFileModule,
                i6.FileAttachmentModule,
                i7.AlertModule,
                i10.ModalModule,
                i1$5.BadgeModule,
            ], i1$3.IconModule,
            i5.A11yModule,
            i4.EmptyStateModule,
            i3$2.LoadingIndicatorModule,
            i2$1.DropdownMenuModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: TransactionsCommonModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i2.CommonModule,
                            i1$3.IconModule,
                            i3$1.ButtonModule,
                            i8.LoadButtonModule,
                            i2$2.InputRadioGroupModule,
                            i14.TooltipModule,
                            i1$4.ReactiveFormsModule,
                            i3$2.LoadingIndicatorModule,
                            i4.EmptyStateModule,
                            i2$1.DropdownMenuModule,
                            i5.A11yModule,
                            i4$1.RichTextEditorModule,
                            i3$3.InputValidationMessageModule,
                            i5$1.InputFileModule,
                            i6.FileAttachmentModule,
                            i7.AlertModule,
                            i10.ModalModule,
                            i1$5.BadgeModule,
                        ],
                        providers: [
                            TransactionUpdateService,
                            EnumValuesService,
                            CategoriesService,
                            AccountsService,
                            TransactionsIconCategoriesFactoryService,
                            MapAPILoaderService,
                            DomAttributesService,
                            MessagesService,
                            TransactionsInquireAndDisputeUIService,
                            PaymentsBatchService,
                            AvailableFiltersConfigService,
                        ],
                        declarations: [
                            TransactionsNumberOfResultsFoundComponent,
                            TransactionCheckImageComponent,
                            TransactionGeoLocationMapComponent,
                            TransactionsErrorStateCustomizableDirective,
                            TransactionsNoAccountSelectedStateCustomizableDirective,
                            AccessibilityKeyboardDirective,
                            TransactionsNumberOfResultsFoundCustomizableDirective,
                            TransactionsMapUiComponent,
                            TransactionCategoryIconComponent,
                            TransactionCheckImageItemComponent,
                            CapitalizePipe,
                            DocumentViewerBackdropComponent,
                            DocumentViewerContainerComponent,
                            DocumentViewerHeaderComponent,
                            DocumentViewerInteractorComponent,
                            ImageViewerComponent,
                            TransactionCheckImageDocumentViewerComponent,
                            DynamicIdDirective,
                            TransactionsInquiryDisputeComponent,
                            TransactionsDisputeStatusTagComponent,
                            TransactionsDisputeBannerComponent,
                        ],
                        exports: [
                            TransactionsNumberOfResultsFoundComponent,
                            TransactionsErrorStateCustomizableDirective,
                            TransactionsNoAccountSelectedStateCustomizableDirective,
                            AccessibilityKeyboardDirective,
                            TransactionCheckImageComponent,
                            TransactionCheckImageItemComponent,
                            TransactionGeoLocationMapComponent,
                            TransactionsNumberOfResultsFoundCustomizableDirective,
                            i1$3.IconModule,
                            i5.A11yModule,
                            TransactionsMapUiComponent,
                            TransactionCategoryIconComponent,
                            CapitalizePipe,
                            DocumentViewerBackdropComponent,
                            DocumentViewerContainerComponent,
                            DocumentViewerHeaderComponent,
                            DocumentViewerInteractorComponent,
                            ImageViewerComponent,
                            TransactionCheckImageDocumentViewerComponent,
                            i4.EmptyStateModule,
                            i3$2.LoadingIndicatorModule,
                            i2$1.DropdownMenuModule,
                            DynamicIdDirective,
                            TransactionsInquiryDisputeComponent,
                            TransactionsDisputeStatusTagComponent,
                            TransactionsDisputeBannerComponent,
                        ],
                    }]
            }] });

    var NavigationService = /** @class */ (function () {
        function NavigationService(routerService) {
            this.routerService = routerService;
        }
        NavigationService.prototype.view = function (arrangementId) {
            return this.routerService.navigate(['/', arrangementId]);
        };
        return NavigationService;
    }());
    NavigationService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NavigationService, deps: [{ token: i3__namespace.RouterService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    NavigationService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NavigationService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: NavigationService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i3__namespace.RouterService }]; } });

    /* eslint-disable no-redeclare*/
    // eslint-disable-next-line @typescript-eslint/no-namespace
    exports.TransactionsGetParams = void 0;
    (function (TransactionsGetParams) {
        // eslint-disable-next-line complexity
        TransactionsGetParams.toHttpGetParams = function (getParams) {
            var params = Object.assign({}, exports.TransactionsFilterOptions.toHttpGetParams(getParams.filter));
            if (getParams.account && getParams.account.arrangementId) {
                params['arrangementsIds'] = Array.isArray(getParams.account.arrangementId)
                    ? getParams.account.arrangementId
                    : [getParams.account.arrangementId];
            }
            if (getParams.search && getParams.search.query) {
                params['query'] = getParams.search.query;
            }
            if (getParams.pagination) {
                params['from'] = getParams.pagination.from;
                params['size'] = getParams.pagination.size;
            }
            if (getParams.sort) {
                params['orderBy'] = getParams.sort.orderBy.toString();
                params['direction'] = getParams.sort.direction.toString();
            }
            if (getParams.exportType) {
                params['exportType'] = getParams.exportType;
            }
            if (getParams.locale) {
                params['locale'] = getParams.locale;
            }
            if (getParams.state) {
                params['state'] = getParams.state;
            }
            return params;
        };
    })(exports.TransactionsGetParams || (exports.TransactionsGetParams = {}));
    /* eslint-enable no-redeclare*/

    /* eslint-disable no-redeclare*/
    // eslint-disable-next-line @typescript-eslint/no-namespace
    exports.TransactionsGroupedByDate = void 0;
    (function (TransactionsGroupedByDate) {
        // eslint-disable-next-line no-inner-declarations
        function getDate(transaction) {
            var date = transaction.bookingDate ? new Date(transaction.bookingDate) : new Date();
            return date.toISOString().slice(0, 10);
        }
        function groupByDate(transactionsList) {
            var transactions = transactionsList && transactionsList.items !== null ? transactionsList.items : [];
            return transactions.reduce(function (transactionsGroupedByDate, transaction) {
                var transactionDate = getDate(transaction);
                if (transactionsGroupedByDate[transactionDate]) {
                    transactionsGroupedByDate[transactionDate].push(transaction);
                }
                else {
                    transactionsGroupedByDate[transactionDate] = [transaction];
                }
                return transactionsGroupedByDate;
            }, {});
        }
        TransactionsGroupedByDate.groupByDate = groupByDate;
    })(exports.TransactionsGroupedByDate || (exports.TransactionsGroupedByDate = {}));
    /* eslint-enable no-redeclare*/

    /* eslint-disable */
    var BaseTransactionsWidget = /** @class */ (function () {
        function BaseTransactionsWidget(route, widgetProperties) {
            this.route = route;
            this.widgetProperties = widgetProperties;
            this.enableDisputeAndInquiry = false;
            this.availableFiltersConfig = defaultAvailableFiltersConfig;
            this.transactionSelected = new i0.EventEmitter();
            this.transactionsLoaded = new i0.EventEmitter();
            this.initialFilterOptionsSubject = new rxjs.BehaviorSubject(undefined);
            this.initialSortOptionsSubject = new rxjs.BehaviorSubject(undefined);
            this.selectedAccount = this.getRouteParam(this.route, 'selectedAccount').pipe(operators.map(function (selectedAccount) { return selectedAccount; }), operators.map(function (selectedAccount) { return typeof selectedAccount !== 'undefined' && selectedAccount.includes(',')
                ? selectedAccount.split(',')
                : selectedAccount !== undefined
                    ? [selectedAccount]
                    : undefined; }));
        }
        Object.defineProperty(BaseTransactionsWidget.prototype, "initialFilterOptionsValue", {
            set: function (value) {
                var deseralizedValue = deserialize(value);
                this.initialFilterOptionsSubject.next(exports.TransactionsFilterOptions.fromHttpGetParams(deseralizedValue));
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseTransactionsWidget.prototype, "initialSortOptionsValue", {
            set: function (value) {
                var options = parseSortOptions(value);
                this.initialSortOptionsSubject.next(options);
            },
            enumerable: false,
            configurable: true
        });
        BaseTransactionsWidget.prototype.getRouteParam = function (route, param) {
            var paramValue = route.paramMap.pipe(operators.pluck('params', param));
            if (!route.parent) {
                return paramValue;
            }
            // Ensure that level that has actual value keeps it from being cleared.
            return rxjs.combineLatest([paramValue, this.getRouteParam(route.parent, param)]).pipe(operators.map(function (params) { return params[0] || params[1]; }));
        };
        Object.defineProperty(BaseTransactionsWidget.prototype, "initialFilterOptions", {
            get: function () {
                return filterInputParameters(this.initialFilterOptionsSubject.asObservable(), this.widgetProperties.initialFilterOptions);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BaseTransactionsWidget.prototype, "initialSortOptions", {
            get: function () {
                return filterInputParameters(this.initialSortOptionsSubject.asObservable(), this.widgetProperties.initialSortOptions);
            },
            enumerable: false,
            configurable: true
        });
        BaseTransactionsWidget.prototype.onDetailOpen = function (transaction) {
            this.transactionSelected.emit(transaction);
        };
        BaseTransactionsWidget.prototype.onTransactionsLoaded = function (transactionsList) {
            this.transactionsLoaded.emit(transactionsList);
        };
        return BaseTransactionsWidget;
    }());
    BaseTransactionsWidget.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: BaseTransactionsWidget, deps: [{ token: i1__namespace$9.ActivatedRoute }, { token: WidgetPropertiesService }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    BaseTransactionsWidget.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: BaseTransactionsWidget, inputs: { googleAPIKey: "googleAPIKey", initialFilterOptionsValue: ["initialFilterOptions", "initialFilterOptionsValue"], initialSortOptionsValue: ["initialSortOptions", "initialSortOptionsValue"], pageSize: "pageSize", maxNavPages: "maxNavPages", paginationType: "paginationType", showControls: "showControls", showChangeCategory: "showChangeCategory", showPendingTransactionsOnTop: "showPendingTransactionsOnTop", showCheckImage: "showCheckImage", showManageNotes: "showManageNotes", getOrPostEndpoints: "getOrPostEndpoints", enableDisputeAndInquiry: "enableDisputeAndInquiry", disputeByBillingStatus: "disputeByBillingStatus", disputeEligibilityDays: "disputeEligibilityDays", disputeTransactionTypes: "disputeTransactionTypes", inquireTopicId: "inquireTopicId", disputeTopicId: "disputeTopicId", availableFiltersConfig: "availableFiltersConfig" }, outputs: { transactionSelected: "transactionSelected", transactionsLoaded: "transactionsLoaded" }, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: BaseTransactionsWidget, decorators: [{
                type: i0.Directive
            }], ctorParameters: function () { return [{ type: i1__namespace$9.ActivatedRoute }, { type: WidgetPropertiesService }]; }, propDecorators: { googleAPIKey: [{
                    type: i0.Input
                }], initialFilterOptionsValue: [{
                    type: i0.Input,
                    args: ['initialFilterOptions']
                }], initialSortOptionsValue: [{
                    type: i0.Input,
                    args: ['initialSortOptions']
                }], pageSize: [{
                    type: i0.Input
                }], maxNavPages: [{
                    type: i0.Input
                }], paginationType: [{
                    type: i0.Input
                }], showControls: [{
                    type: i0.Input
                }], showChangeCategory: [{
                    type: i0.Input
                }], showPendingTransactionsOnTop: [{
                    type: i0.Input
                }], showCheckImage: [{
                    type: i0.Input
                }], showManageNotes: [{
                    type: i0.Input
                }], getOrPostEndpoints: [{
                    type: i0.Input
                }], enableDisputeAndInquiry: [{
                    type: i0.Input
                }], disputeByBillingStatus: [{
                    type: i0.Input
                }], disputeEligibilityDays: [{
                    type: i0.Input
                }], disputeTransactionTypes: [{
                    type: i0.Input
                }], inquireTopicId: [{
                    type: i0.Input
                }], disputeTopicId: [{
                    type: i0.Input
                }], availableFiltersConfig: [{
                    type: i0.Input
                }], transactionSelected: [{
                    type: i0.Output
                }], transactionsLoaded: [{
                    type: i0.Output
                }] } });

    // eslint-disable-next-line
    var BaseTransactionsControls = /** @class */ (function () {
        function BaseTransactionsControls() {
            /**
             * Whether a filter is applied on the transactions.
             */
            this.isFilterApplied = false;
            /**
             * Configurations for exporting transactions.
             */
            // eslint-disable-next-line
            this.exportConfig = [
                {
                    name: 'CSV',
                    isAvailable: true,
                },
                {
                    name: 'OFX',
                    isAvailable: true,
                },
            ];
            /**
             * Configuration parameter to show/hide filters
             */
            this.availableFilters = [];
            /**
             * EventEmitter for triggering a filter action.
             */
            this.filter = new i0.EventEmitter();
            /**
             * EventEmitter for triggering a search action.
             */
            this.search = new i0.EventEmitter();
            /**
             * EventEmitter for triggering an export action.
             */
            this.export = new i0.EventEmitter();
            /**
             * Whether the filter form is shown.
             */
            this.isFilterOpen = false;
        }
        /**
         * Search event callback
         */
        BaseTransactionsControls.prototype.onSearch = function (searchParam) {
            this.search.emit(searchParam);
        };
        /**
         * Filter event callback
         */
        BaseTransactionsControls.prototype.onFilter = function (filterParams) {
            this.filter.emit(filterParams);
        };
        /**
         * Export event callback
         */
        BaseTransactionsControls.prototype.onExport = function (type) {
            this.export.emit(type);
        };
        /**
         * Close event callback to hide the filters controls
         */
        BaseTransactionsControls.prototype.onClose = function () {
            this.isFilterOpen = false;
        };
        /**
         * Toogle method to hide or show the filter form
         */
        BaseTransactionsControls.prototype.toggleFilter = function () {
            this.isFilterOpen = !this.isFilterOpen;
        };
        BaseTransactionsControls.prototype.ngOnInit = function () {
            if (typeof this.exportConfig === 'undefined') {
                throw new Error("\"exportConfig\" input is required in \"" + this.constructor.name + "\"");
            }
        };
        return BaseTransactionsControls;
    }());
    BaseTransactionsControls.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: BaseTransactionsControls, deps: [], target: i0__namespace.ɵɵFactoryTarget.Directive });
    BaseTransactionsControls.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: BaseTransactionsControls, inputs: { isFilterApplied: "isFilterApplied", exportConfig: "exportConfig", availableFilters: "availableFilters" }, outputs: { filter: "filter", search: "search", export: "export" }, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: BaseTransactionsControls, decorators: [{
                type: i0.Directive
            }], propDecorators: { isFilterApplied: [{
                    type: i0.Input
                }], exportConfig: [{
                    type: i0.Input
                }], availableFilters: [{
                    type: i0.Input
                }], filter: [{
                    type: i0.Output
                }], search: [{
                    type: i0.Output
                }], export: [{
                    type: i0.Output
                }] } });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.AccessibilityKeyboardDirective = AccessibilityKeyboardDirective;
    exports.AccountsService = AccountsService;
    exports.AvailableFiltersConfigService = AvailableFiltersConfigService;
    exports.BaseTransactionIcon = BaseTransactionIcon;
    exports.BaseTransactionsContainer = BaseTransactionsContainer;
    exports.BaseTransactionsControls = BaseTransactionsControls;
    exports.BaseTransactionsWidget = BaseTransactionsWidget;
    exports.CapitalizePipe = CapitalizePipe;
    exports.CategoriesService = CategoriesService;
    exports.DocumentViewerBackdropComponent = DocumentViewerBackdropComponent;
    exports.DocumentViewerContainerComponent = DocumentViewerContainerComponent;
    exports.DocumentViewerHeaderComponent = DocumentViewerHeaderComponent;
    exports.DocumentViewerInteractorComponent = DocumentViewerInteractorComponent;
    exports.DomAttributesService = DomAttributesService;
    exports.DynamicIdDirective = DynamicIdDirective;
    exports.EnumValuesService = EnumValuesService;
    exports.ImageViewerComponent = ImageViewerComponent;
    exports.MapAPILoaderService = MapAPILoaderService;
    exports.MessagesService = MessagesService;
    exports.NavigationService = NavigationService;
    exports.PaymentsBatchService = PaymentsBatchService;
    exports.PendingTransactionsService = PendingTransactionsService;
    exports.TransactionCategoryIcon = TransactionCategoryIcon;
    exports.TransactionCategoryIconComponent = TransactionCategoryIconComponent;
    exports.TransactionCheckImageComponent = TransactionCheckImageComponent;
    exports.TransactionCheckImageDocumentViewerComponent = TransactionCheckImageDocumentViewerComponent;
    exports.TransactionCheckImageItemComponent = TransactionCheckImageItemComponent;
    exports.TransactionCreditDebitIcon = TransactionCreditDebitIcon;
    exports.TransactionDetailsService = TransactionDetailsService;
    exports.TransactionGeoLocationMapComponent = TransactionGeoLocationMapComponent;
    exports.TransactionTypeIcon = TransactionTypeIcon;
    exports.TransactionUpdateService = TransactionUpdateService;
    exports.TransactionsCommonModule = TransactionsCommonModule;
    exports.TransactionsDisputeBannerComponent = TransactionsDisputeBannerComponent;
    exports.TransactionsDisputeStatusTagComponent = TransactionsDisputeStatusTagComponent;
    exports.TransactionsErrorStateCustomizableDirective = TransactionsErrorStateCustomizableDirective;
    exports.TransactionsIconCategoriesFactoryService = TransactionsIconCategoriesFactoryService;
    exports.TransactionsInquireAndDisputeUIService = TransactionsInquireAndDisputeUIService;
    exports.TransactionsInquiryDisputeComponent = TransactionsInquiryDisputeComponent;
    exports.TransactionsMapUiComponent = TransactionsMapUiComponent;
    exports.TransactionsNoAccountSelectedStateCustomizableDirective = TransactionsNoAccountSelectedStateCustomizableDirective;
    exports.TransactionsNumberOfResultsFoundComponent = TransactionsNumberOfResultsFoundComponent;
    exports.TransactionsNumberOfResultsFoundCustomizableDirective = TransactionsNumberOfResultsFoundCustomizableDirective;
    exports.TransactionsService = TransactionsService;
    exports.WidgetPropertiesService = WidgetPropertiesService;
    exports.availableExportTypes = availableExportTypes;
    exports.categoriesManagementMap = categoriesManagementMap;
    exports.categoryListLevelParam = categoryListLevelParam;
    exports.combineExportTypesConfig = combineExportTypesConfig;
    exports.creditDebitIndicatorEnumValues = creditDebitIndicatorEnumValues;
    exports.defaultAccountOptions = defaultAccountOptions;
    exports.defaultBillingStatusEnumValues = defaultBillingStatusEnumValues;
    exports.defaultFilterOptions = defaultFilterOptions;
    exports.defaultInitialExportOptions = defaultInitialExportOptions;
    exports.defaultInitialFilterOptions = defaultInitialFilterOptions;
    exports.defaultInitialListOptions = defaultInitialListOptions;
    exports.defaultInitialSortOptions = defaultInitialSortOptions;
    exports.defaultMaxNavPage = defaultMaxNavPage;
    exports.defaultPageSize = defaultPageSize;
    exports.defaultPaginationOptions = defaultPaginationOptions;
    exports.defaultSearchOptions = defaultSearchOptions;
    exports.defaultSortOptions = defaultSortOptions;
    exports.defaultTransactionTypeEnumValues = defaultTransactionTypeEnumValues;
    exports.deserialize = deserialize;
    exports.filterInputParameters = filterInputParameters;
    exports.fromCategoriesManagementResponse = fromCategoriesManagementResponse;
    exports.notificationTtl = notificationTtl;
    exports.parseSortOptions = parseSortOptions;
    exports.showDetailsConfigToken = showDetailsConfigToken;
    exports.sortFieldsDirectionHeader = sortFieldsDirectionHeader;
    exports.totalCountHeader = totalCountHeader;
    exports.unvailableExportTypesReasons = unvailableExportTypesReasons;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-transactions-common-ang.umd.js.map
