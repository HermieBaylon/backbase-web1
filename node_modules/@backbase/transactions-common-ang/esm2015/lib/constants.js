import { combineLatest } from 'rxjs';
import { map } from 'rxjs/operators';
import { AvailableFilterEnum } from './model/available-filters.model';
/**
 * Dropdown values for credit/debit indicator filter.
 */
export const creditDebitIndicatorEnumValues = [
    {
        name: 'All',
    },
    {
        value: 'CRDT',
        name: 'Credit',
    },
    {
        value: 'DBIT',
        name: 'Debit',
    },
];
/**
 * Fallback dropdown values for transaction type filter.
 */
export const defaultTransactionTypeEnumValues = [
    {
        value: 'ATM',
        name: 'ATM',
    },
    {
        value: 'ACH',
        name: 'Ach',
    },
    {
        value: 'Bill Payment',
        name: 'Bill Payment',
    },
    {
        value: 'Cash',
        name: 'Cash',
    },
    {
        name: 'Cheques',
        value: 'Cheques',
    },
    {
        value: 'CreditDebit Card',
        name: 'Credit/Debit Card',
    },
    {
        value: 'Check',
        name: 'Check',
    },
    {
        value: 'Deposit',
        name: 'Deposit',
    },
    {
        value: 'Fee',
        name: 'Fee',
    },
    {
        value: 'POS',
        name: 'POS',
    },
    {
        value: 'Withdrawal',
        name: 'Withdrawal',
    },
];
/**
 * Fallback dropdown values for billing status filter.
 */
export const defaultBillingStatusEnumValues = [
    {
        value: 'PENDING',
        name: 'Pending',
    },
    {
        value: 'BILLED',
        name: 'Billed',
    },
    {
        value: 'UNBILLED',
        name: 'Unbilled',
    },
];
/**
 * Name of different check images status
 */
export var CheckImagesAvailability;
(function (CheckImagesAvailability) {
    CheckImagesAvailability["available"] = "AVAILABLE";
    CheckImagesAvailability["unavailable"] = "UNAVAILABLE";
})(CheckImagesAvailability || (CheckImagesAvailability = {}));
export var BillingStatusEnum;
(function (BillingStatusEnum) {
    BillingStatusEnum["billed"] = "BILLED";
    BillingStatusEnum["unbilled"] = "UNBILLED";
    BillingStatusEnum["pending"] = "PENDING";
})(BillingStatusEnum || (BillingStatusEnum = {}));
/**
 * Name of response header that contains the total amount of results.
 */
export const totalCountHeader = 'X-Total-Count';
/**
 * Name of response header that contains the available export types.
 */
export const availableExportTypes = 'X-Available-Export-Types';
export const unvailableExportTypesReasons = 'X-Unavailable-Export-Types-Reasons';
/**
 * Name of response header that contains the sort configuration.
 */
export const sortFieldsDirectionHeader = 'X-Sort-Fields-Direction';
/**
 * Notification time to live in ms.
 */
export const notificationTtl = 5000;
/**
 * Which category level should be retrieved for category change modal list.
 */
export const categoryListLevelParam = 'PARENTS';
export const defaultAvailableFiltersConfig = {
    'Current Account': [
        AvailableFilterEnum.Date,
        AvailableFilterEnum.CreditDebitIndicator,
        AvailableFilterEnum.Amount,
        AvailableFilterEnum.Types,
        AvailableFilterEnum.BillingStatus,
        AvailableFilterEnum.CheckSerialNumber,
    ],
    'Savings Account': [
        AvailableFilterEnum.Date,
        AvailableFilterEnum.CreditDebitIndicator,
        AvailableFilterEnum.Amount,
        AvailableFilterEnum.Types,
        AvailableFilterEnum.BillingStatus,
        AvailableFilterEnum.CheckSerialNumber,
    ],
    'Credit Card': [
        AvailableFilterEnum.Date,
        AvailableFilterEnum.CreditDebitIndicator,
        AvailableFilterEnum.Amount,
        AvailableFilterEnum.Types,
        AvailableFilterEnum.BillingStatus,
    ],
    Loan: [AvailableFilterEnum.Date, AvailableFilterEnum.CreditDebitIndicator, AvailableFilterEnum.Amount],
    'Term Deposit': [AvailableFilterEnum.Date, AvailableFilterEnum.CreditDebitIndicator, AvailableFilterEnum.Amount],
    'Debit Card': [AvailableFilterEnum.Date, AvailableFilterEnum.CreditDebitIndicator, AvailableFilterEnum.Amount],
    'Investment Account': [
        AvailableFilterEnum.Date,
        AvailableFilterEnum.CreditDebitIndicator,
        AvailableFilterEnum.Amount,
    ],
    defaultFilters: [AvailableFilterEnum.Date, AvailableFilterEnum.CreditDebitIndicator, AvailableFilterEnum.Amount],
};
export const deserialize = (propertyValue) => {
    const params = propertyValue.split('&');
    return params.reduce((acc, param) => {
        const [key, val] = param.split('=');
        return Object.assign(Object.assign({}, acc), { [decodeURIComponent(key)]: decodeURIComponent(val) });
    }, {});
};
export const parseSortOptions = (propertyValue) => {
    if (!propertyValue.length) {
        return undefined;
    }
    const sortOption = propertyValue
        .split(',')[0]
        .trim()
        .replace(/\s{2,}/g, ' ');
    const [orderBy, direction] = sortOption.split(' ');
    if (!orderBy || (direction !== 'ASC' && direction !== 'DESC')) {
        throw new Error(`Invalid value for "initialSortOptions" property.
      Please use "<orderBy> <direction>" format, e.g., "bookingDate DESC", or leave it empty.`);
    }
    return {
        orderBy,
        direction,
    };
};
export const filterInputParameters = (input, prop) => combineLatest([input, prop]).pipe(map(([inputVal, propVal]) => inputVal !== null && inputVal !== void 0 ? inputVal : propVal));
export const b64Encode = (str) => btoa(encodeURIComponent(str).replace(/%([0-9A-F]{2})/g, function (_match, p1) {
    return String.fromCharCode(parseInt(p1, 16));
}));
export const truncateDate = (date) => new Date(date.getFullYear(), date.getMonth(), date.getDate());
export const daysDiff = (date1, date2) => {
    const diff = truncateDate(new Date(date1)).getTime() - truncateDate(new Date(date2)).getTime();
    return Math.ceil(diff / (1000 * 3600 * 24));
};
//# sourceMappingURL=constants.js.map