import { from, of, Subject } from 'rxjs';
import { TransactionsDetailsLoadingState } from '../model/transactions-details.model';
import { MessagesService } from '../services/messages.service';
import '@angular/localize/init';
import { Injectable } from '@angular/core';
import { b64Encode } from '../constants';
import { catchError, map, tap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../services/messages.service";
/* eslint-disable  @typescript-eslint/no-non-null-assertion */
export class TransactionsInquireAndDisputeUIService {
    constructor(messagesService) {
        this.messagesService = messagesService;
        this.showReportSubject = new Subject();
        this.DEFAULT_MESSAGE = {
            attachments: [],
            body: '',
            topic: 'inquire',
        };
        this.showReport = this.showReportSubject.asObservable();
        this.message = Object.assign({}, this.DEFAULT_MESSAGE);
        this.reportState = TransactionsDetailsLoadingState.notStarted;
        this.subjectReportMap = {
            dispute: $localize `:Dispute subject@@transactions.dispute.subject:Transaction dispute raised on`,
            inquire: $localize `:Inquiry subject@@transactions.inquire.subject:Transaction inquiry raised on`,
        };
    }
    formatMessage(messageForm, defaultBody, inquireAndDisputeTopics, transaction) {
        const { topic = 'inquire', body = '', attachments = [] } = messageForm;
        return {
            body: b64Encode([defaultBody, body].join('\n')),
            topic: inquireAndDisputeTopics[topic],
            attachments: attachments.map((data) => data.id || ''),
            subject: `${this.subjectReportMap[topic]} ${transaction === null || transaction === void 0 ? void 0 : transaction.arrangementId}`,
        };
    }
    // TODO: Add unit tests when the functionality is complete
    saveReport(message) {
        this.reportState = TransactionsDetailsLoadingState.loading;
        return this.messagesService.saveMessages(message).pipe(map(() => {
            this.message = this.DEFAULT_MESSAGE;
            this.showReportForm(false);
            this.reportState = TransactionsDetailsLoadingState.done;
            return message;
        }), catchError(() => {
            this.reportState = TransactionsDetailsLoadingState.error;
            return of(undefined);
        }));
    }
    showReportForm(display) {
        this.showReportSubject.next(display);
    }
    cancelReport() {
        this.removeAllFiles();
        this.reportState = TransactionsDetailsLoadingState.notStarted;
        this.message = this.DEFAULT_MESSAGE;
        this.showReportForm(false);
    }
    fileChange(file) {
        let attachment = {
            name: file.name,
            size: file.size,
            content: from(file.arrayBuffer()),
        };
        const currentAttachments = this.message.attachments || [];
        this.message.attachments = [...currentAttachments, attachment];
        const state = this.reportState;
        this.reportState = TransactionsDetailsLoadingState.loading;
        return this.messagesService.saveAttachment(file).pipe(map((id) => {
            attachment = Object.assign({ id }, attachment);
            this.reportState = TransactionsDetailsLoadingState.notStarted;
            this.message.attachments = [...currentAttachments, attachment];
            return id;
        }), catchError(() => {
            this.reportState = state;
            this.message.attachments = [...currentAttachments];
            return of('');
            //TODO: add error message
        }));
    }
    deleteReportForm() {
        //TODO: this is just a placeholder for now
    }
    fileRemoved(attachment) {
        const { id = '' } = attachment;
        return this.messagesService.deleteAttachments([id]).pipe(tap(() => {
            this.message.attachments = this.message.attachments.filter((item) => item.id !== id);
        }));
    }
    removeAllFiles() {
        if (this.message.attachments.length > 0) {
            const files = this.message.attachments.map((item) => item.id || '');
            this.messagesService.deleteAttachments(files).subscribe({
                next: () => {
                    this.message.attachments = [];
                },
            });
        }
    }
}
TransactionsInquireAndDisputeUIService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsInquireAndDisputeUIService, deps: [{ token: i1.MessagesService }], target: i0.ɵɵFactoryTarget.Injectable });
TransactionsInquireAndDisputeUIService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsInquireAndDisputeUIService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsInquireAndDisputeUIService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.MessagesService }]; } });
//# sourceMappingURL=transactions-inquire-and-dispute-ui.service.js.map