import { Injectable } from '@angular/core';
import { combineLatest, ReplaySubject } from 'rxjs';
import { map } from 'rxjs/operators';
import { defaultAvailableFiltersConfig } from '../constants';
import { AccountsService } from './accounts.service';
import * as i0 from "@angular/core";
import * as i1 from "./accounts.service";
export class AvailableFiltersConfigService {
    constructor(accountsService) {
        this.accountsService = accountsService;
        this.availableFiltersConfig$ = new ReplaySubject(1);
        this.selectedAccounts$ = new ReplaySubject(1);
        this.productSummary$ = this.getProductSummaryForSelectedAccounts();
        this.availableFilters$ = this.getAvailableFilters();
    }
    setFilterConfigurationAndAccount(availableFiltersConfig, selectedAccounts) {
        availableFiltersConfig.subscribe(this.availableFiltersConfig$);
        selectedAccounts.subscribe(this.selectedAccounts$);
    }
    getProductSummaryForSelectedAccounts() {
        return combineLatest([this.accountsService.getProductSummary(), this.selectedAccounts$]).pipe(map(([productSummaryItems, selectedAccounts]) => productSummaryItems.filter((productSummaryItem) => selectedAccounts === null || selectedAccounts === void 0 ? void 0 : selectedAccounts.includes(productSummaryItem.id))));
    }
    getAvailableFilters() {
        return combineLatest([this.availableFiltersConfig$, this.productSummary$]).pipe(map(([availableFiltersConfig, productSummaryItems]) => {
            const availableFilters = productSummaryItems.reduce((filters, productSummaryItem) => filters.concat(this.getFiltersFromConfigs(productSummaryItem, availableFiltersConfig)), []);
            return Array.from(new Set(availableFilters));
        }));
    }
    getFiltersFromConfigs(productSummaryItem, availableFiltersConfig) {
        var _a;
        const availableFilters = (_a = this.getFiltersFromConfigObject(availableFiltersConfig, productSummaryItem)) !== null && _a !== void 0 ? _a : this.getFiltersFromConfigObject(defaultAvailableFiltersConfig, productSummaryItem);
        return availableFilters !== null && availableFilters !== void 0 ? availableFilters : defaultAvailableFiltersConfig.defaultFilters;
    }
    getFiltersFromConfigObject(config, productSummaryItem) {
        if (productSummaryItem.productKindName !== undefined) {
            const productKind = config[productSummaryItem.productKindName];
            if (productKind === undefined)
                return undefined;
            if (Array.isArray(productKind))
                return productKind;
            if (productSummaryItem.productTypeName === undefined)
                return undefined;
            return productKind[productSummaryItem.productTypeName];
        }
        return undefined;
    }
}
AvailableFiltersConfigService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AvailableFiltersConfigService, deps: [{ token: i1.AccountsService }], target: i0.ɵɵFactoryTarget.Injectable });
AvailableFiltersConfigService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AvailableFiltersConfigService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AvailableFiltersConfigService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.AccountsService }]; } });
//# sourceMappingURL=available-filters-config.service.js.map