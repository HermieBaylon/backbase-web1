{"version":3,"file":"transaction-update.service.js","sourceRoot":"","sources":["../../../../../../../../libs/widgets/transactions/transactions-common-ang/src/lib/services/transaction-update.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAE3C,OAAO,EAAiB,4BAA4B,EAAE,MAAM,iCAAiC,CAAC;AAC9F,OAAO,EAAE,UAAU,EAAc,MAAM,MAAM,CAAC;AAC9C,OAAO,EAAE,UAAU,EAAE,MAAM,gBAAgB,CAAC;;;AAK5C,MAAM,OAAO,wBAAwB;IA8CnC,YAA6B,2BAAyD;QAAzD,gCAA2B,GAA3B,2BAA2B,CAA8B;IAAG,CAAC;IA7ClF,WAAW,CAAC,KAAwB;QAC1C,IAAI,KAAK,CAAC,KAAK,YAAY,UAAU,EAAE;YACrC,mEAAmE;YACnE,OAAO,CAAC,KAAK,CAAC,oBAAoB,EAAE,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;SAC1D;aAAM;YACL,sDAAsD;YACtD,6DAA6D;YAC7D,OAAO,CAAC,KAAK,CAAC,yBAAyB,KAAK,CAAC,MAAM,IAAI,GAAG,aAAa,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC;SACvF;QAED,yDAAyD;QACzD,OAAO,UAAU,CAAC,iDAAiD,CAAC,CAAC;IACvE,CAAC;IAED,MAAM,CAAC,WAAwB,EAAE,MAA4B;QAC3D,IAAI,OAAO,WAAW,CAAC,EAAE,KAAK,WAAW,IAAI,OAAO,WAAW,CAAC,aAAa,KAAK,WAAW,EAAE;YAC7F,OAAO,UAAU,CAAC,kCAAkC,CAAC,CAAC;SACvD;QAED,OAAO,IAAI,CAAC,2BAA2B;aACpC,iBAAiB,CAChB;YACE,kCAAkC,EAAE;gBAClC;oBACE,EAAE,EAAE,WAAW,CAAC,EAAE;oBAClB,aAAa,EAAE,WAAW,CAAC,aAAa;oBACxC,KAAK,EAAE,MAAM,CAAC,KAAK;oBACnB,aAAa,EAAE,MAAM,CAAC,aAAa;oBACnC,QAAQ,EAAE,MAAM,CAAC,QAAQ;iBAC1B;aACF;SACF,EACD,UAAU,CACX;aACA,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;IACxC,CAAC;IAED,gBAAgB,CAAC,WAAwB,EAAE,aAA4B;QACrE,OAAO,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,EAAE,aAAa,EAAE,CAAC,CAAC;IACrD,CAAC;IAED,WAAW,CAAC,WAAwB,EAAE,KAAa;QACjD,OAAO,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC;IAC7C,CAAC;;sHA5CU,wBAAwB;0HAAxB,wBAAwB;4FAAxB,wBAAwB;kBADpC,UAAU","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpResponse, HttpErrorResponse } from '@angular/common/http';\nimport { DisputeStatus, TransactionClientHttpService } from '@backbase/data-ang/transactions';\nimport { throwError, Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { Transaction } from '../model/transaction.model';\n\n@Injectable()\nexport class TransactionUpdateService {\n  private handleError(error: HttpErrorResponse) {\n    if (error.error instanceof ErrorEvent) {\n      // A client-side or network error occurred.  Handle it accordingly.\n      console.error('An error occurred:', error.error.message);\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong.\n      console.error(`Backend returned code ${error.status}, ` + `body was: ${error.error}`);\n    }\n\n    // Return an observable with a user-facing error message.\n    return throwError('Something bad happened; please try again later.');\n  }\n\n  update(transaction: Transaction, update: Partial<Transaction>): Observable<HttpResponse<any>> {\n    if (typeof transaction.id === 'undefined' || typeof transaction.arrangementId === 'undefined') {\n      return throwError('updateNotes: invalid transaction');\n    }\n\n    return this.transactionsDataHttpService\n      .patchTransactions(\n        {\n          transactionsClientPatchRequestBody: [\n            {\n              id: transaction.id,\n              arrangementId: transaction.arrangementId,\n              notes: update.notes,\n              disputeStatus: update.disputeStatus,\n              category: update.category,\n            },\n          ],\n        },\n        'response',\n      )\n      .pipe(catchError(this.handleError));\n  }\n\n  setDisputeStatus(transaction: Transaction, disputeStatus: DisputeStatus) {\n    return this.update(transaction, { disputeStatus });\n  }\n\n  updateNotes(transaction: Transaction, notes: string) {\n    return this.update(transaction, { notes });\n  }\n\n  constructor(private readonly transactionsDataHttpService: TransactionClientHttpService) {}\n}\n"]}