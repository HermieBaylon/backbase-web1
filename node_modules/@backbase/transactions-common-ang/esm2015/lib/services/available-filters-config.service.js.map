{"version":3,"file":"available-filters-config.service.js","sourceRoot":"","sources":["../../../../../../../../libs/widgets/transactions/transactions-common-ang/src/lib/services/available-filters-config.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { AvailableFilters, AvailableFiltersConfig, ProductKind } from '../model/available-filters.model';\nimport { combineLatest, Observable, ReplaySubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { defaultAvailableFiltersConfig } from '../constants';\nimport { ProductSummaryItem } from '@backbase/data-ang/arrangements';\nimport { AccountsService } from './accounts.service';\n\n@Injectable()\nexport class AvailableFiltersConfigService {\n  availableFilters$: Observable<AvailableFilters>;\n\n  private productSummary$: Observable<ProductSummaryItem[]>;\n  private readonly availableFiltersConfig$: ReplaySubject<AvailableFiltersConfig> =\n    new ReplaySubject<AvailableFiltersConfig>(1);\n  private readonly selectedAccounts$: ReplaySubject<string[]> = new ReplaySubject<string[]>(1);\n\n  constructor(private readonly accountsService: AccountsService) {\n    this.productSummary$ = this.getProductSummaryForSelectedAccounts();\n    this.availableFilters$ = this.getAvailableFilters();\n  }\n\n  setFilterConfigurationAndAccount(\n    availableFiltersConfig: Observable<AvailableFiltersConfig>,\n    selectedAccounts: Observable<string[]>,\n  ): void {\n    availableFiltersConfig.subscribe(this.availableFiltersConfig$);\n    selectedAccounts.subscribe(this.selectedAccounts$);\n  }\n\n  private getProductSummaryForSelectedAccounts(): Observable<ProductSummaryItem[]> {\n    return combineLatest([this.accountsService.getProductSummary(), this.selectedAccounts$]).pipe(\n      map(([productSummaryItems, selectedAccounts]) =>\n        productSummaryItems.filter((productSummaryItem: ProductSummaryItem) =>\n          selectedAccounts?.includes(productSummaryItem.id),\n        ),\n      ),\n    );\n  }\n\n  private getAvailableFilters(): Observable<AvailableFilters> {\n    return combineLatest([this.availableFiltersConfig$, this.productSummary$]).pipe(\n      map(([availableFiltersConfig, productSummaryItems]) => {\n        const availableFilters: AvailableFilters = productSummaryItems.reduce(\n          (filters: AvailableFilters, productSummaryItem: ProductSummaryItem): AvailableFilters =>\n            filters.concat(this.getFiltersFromConfigs(productSummaryItem, availableFiltersConfig)),\n          [],\n        );\n\n        return Array.from(new Set(availableFilters));\n      }),\n    );\n  }\n\n  private getFiltersFromConfigs(\n    productSummaryItem: ProductSummaryItem,\n    availableFiltersConfig: AvailableFiltersConfig,\n  ): AvailableFilters {\n    const availableFilters: AvailableFilters | undefined =\n      this.getFiltersFromConfigObject(availableFiltersConfig, productSummaryItem) ??\n      this.getFiltersFromConfigObject(defaultAvailableFiltersConfig, productSummaryItem);\n\n    return availableFilters ?? (defaultAvailableFiltersConfig.defaultFilters as AvailableFilters);\n  }\n\n  private getFiltersFromConfigObject(\n    config: AvailableFiltersConfig,\n    productSummaryItem: ProductSummaryItem,\n  ): AvailableFilters | undefined {\n    if (productSummaryItem.productKindName !== undefined) {\n      const productKind: ProductKind | undefined = config[productSummaryItem.productKindName];\n\n      if (productKind === undefined) return undefined;\n\n      if (Array.isArray(productKind)) return productKind;\n\n      if (productSummaryItem.productTypeName === undefined) return undefined;\n\n      return productKind[productSummaryItem.productTypeName];\n    }\n\n    return undefined;\n  }\n}\n"]}