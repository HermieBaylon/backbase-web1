{"version":3,"file":"pending-transactions.service.js","sourceRoot":"","sources":["../../../../../../../../libs/widgets/transactions/transactions-common-ang/src/lib/services/pending-transactions.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, OnDestroy } from '@angular/core';\nimport {\n  TransactionClientHttpService,\n  GetTransactionsWithPostRequestParams,\n  TransactionItem,\n} from '@backbase/data-ang/transactions';\nimport { AccountsService } from './accounts.service';\nimport { ReplaySubject, BehaviorSubject, combineLatest, Observable, of, merge, Subject, iif } from 'rxjs';\nimport {\n  TransactionsListOptions,\n  defaultInitialListOptions,\n  defaultPaginationOptions,\n  defaultSearchOptions,\n  defaultFilterOptions,\n  OnLoadAction,\n  TransactionState,\n} from '../model/transactions-list-options.model';\nimport { map, scan, filter, distinctUntilChanged, tap, catchError } from 'rxjs/operators';\nimport { TransactionsList } from '../model/transactions-list.model';\nimport { TransactionsSearchOptions } from '../model/transactions-search-options.model';\nimport { TransactionsFilterOptions } from '../model/transactions-filter-options.model';\nimport { TransactionsSortOptions } from '../model/transactions-sort-options.model';\nimport { Account } from '../model/account.model';\nimport {\n  deepEqual,\n  cacheRequest,\n  multipleAccountsPredicate,\n  onLoadTransactions,\n} from '../model/transactions-list-utils.model';\nimport { LoadingState } from './transactions.service';\nimport { EndpointType } from './widget-properties.service';\nimport { HttpResponse } from '@angular/common/http';\nimport { DeprecationsService } from '@backbase/foundation-ang/core';\n\n@Injectable()\nexport class PendingTransactionsService implements OnDestroy {\n  private readonly initialListOptions = new ReplaySubject<Partial<TransactionsListOptions>>(1);\n  private readonly selectedAccount = new ReplaySubject<string[]>(1);\n  private readonly options = new BehaviorSubject<Partial<TransactionsListOptions>>({});\n  private readonly listOptions = new BehaviorSubject<TransactionsListOptions>(defaultInitialListOptions);\n  private readonly listRefresh = new Subject<TransactionsListOptions>();\n  private readonly getOrPostEndpoint = new BehaviorSubject<EndpointType>(EndpointType.GET_REQUEST);\n  private readonly transactionsList: Observable<TransactionsList> = merge(\n    this.listOptions.pipe(\n      filter((listOptions) => typeof listOptions.account.arrangementId !== 'undefined'),\n      distinctUntilChanged(deepEqual),\n    ),\n    this.listRefresh,\n  ).pipe(\n    cacheRequest((listOptions) => {\n      this.loadingState.next(\n        listOptions.onLoad === OnLoadAction.Append\n          ? LoadingState.LoadingMore\n          : listOptions.onLoad === OnLoadAction.ReplacePage\n          ? LoadingState.LoadingPage\n          : LoadingState.Loading,\n      );\n\n      return combineLatest([\n        this.loadTransactions(listOptions).pipe(\n          tap(() => {\n            this.loadingState.next(LoadingState.Loaded);\n          }),\n          map((transactionsList) => ({\n            transactionsList,\n            onLoad: OnLoadAction.ReplacePage,\n          })),\n        ),\n        iif(\n          multipleAccountsPredicate(listOptions),\n          this.accountService.getAllArrangements().pipe(\n            map((accounts) => {\n              const accountMap = new Map<string, Account>();\n              accounts.forEach((account) => {\n                accountMap.set(account.id, account);\n              });\n\n              return accountMap;\n            }),\n          ),\n          of(new Map()),\n        ),\n      ]).pipe(\n        map(([transactions, accountMap]) => {\n          transactions.transactionsList.items = transactions.transactionsList.items.map((transaction) => ({\n            ...transaction,\n            account: accountMap.get(transaction.arrangementId || ''),\n          }));\n\n          return transactions;\n        }),\n      );\n    }),\n    scan(onLoadTransactions, { items: [], totalCount: 0 }),\n  );\n\n  public readonly loadingState = new BehaviorSubject<LoadingState>(LoadingState.NotLoaded);\n\n  public readonly isFilterApplied = this.listOptions.pipe(\n    map((options) => !TransactionsFilterOptions.isEmpty(options.filter || {})),\n  );\n\n  public readonly isSearchApplied = this.listOptions.pipe(\n    map((options) => !TransactionsFilterOptions.isEmpty(options.search || {})),\n  );\n\n  private loadTransactions(listOptions: TransactionsListOptions): Observable<TransactionsList> {\n    const transactionPayload = TransactionsList.toHttpRequest(listOptions);\n    let transactionsResponse: Observable<HttpResponse<Array<TransactionItem>>> | undefined;\n\n    if (this.isUsingPostEndpoints) {\n      transactionsResponse = this.transactionsDataHttpService.getTransactionsWithPost(\n        {\n          transactionListRequest: transactionPayload,\n        } as GetTransactionsWithPostRequestParams,\n        'response',\n      );\n    } else {\n      this.deprecationsService.logDeprecatedFeature(\n        '[PendingTransactionsService: loadTransactions] GET endpoints are deprecated. Please use POST endpoints by changing CXP configuration',\n      );\n      transactionsResponse = this.transactionsDataHttpService.getTransactions(transactionPayload, 'response');\n    }\n\n    return transactionsResponse.pipe(\n      map(TransactionsList.fromHttpResponse),\n      catchError((err) =>\n        of({\n          items: [],\n          totalCount: 0,\n          httpResponseError: err,\n        }),\n      ),\n    );\n  }\n\n  getTransactionsFrom(\n    selectedAccount: Observable<string[]>,\n    initialListOptions: Observable<Partial<TransactionsListOptions>> = of({}),\n    getOrPostEndpoint: Observable<EndpointType> = of(EndpointType.GET_REQUEST),\n  ) {\n    selectedAccount.subscribe(this.selectedAccount);\n    initialListOptions.subscribe(this.initialListOptions);\n    getOrPostEndpoint.subscribe(this.getOrPostEndpoint);\n  }\n\n  getTransactionsList() {\n    return this.transactionsList;\n  }\n\n  search(query: string) {\n    const searchOptions: TransactionsSearchOptions = {\n      query,\n    };\n\n    const paginationOptions = {\n      ...(this.options.getValue().pagination || defaultPaginationOptions.pagination),\n      from: 0, // reset to 0\n    };\n\n    this.options.next({\n      ...this.options.getValue(),\n      ...defaultSearchOptions,\n      pagination: paginationOptions,\n      search: searchOptions,\n    });\n  }\n\n  clearSearch() {\n    const paginationOptions = {\n      ...(this.options.getValue().pagination || defaultPaginationOptions.pagination),\n      from: 0, // reset to 0\n    };\n\n    this.options.next({\n      ...this.options.getValue(),\n      ...defaultSearchOptions,\n      pagination: paginationOptions,\n    });\n  }\n\n  filter(filterOptions: TransactionsFilterOptions) {\n    const paginationOptions = {\n      ...(this.options.getValue().pagination || defaultPaginationOptions.pagination),\n      from: 0, // reset to 0\n    };\n\n    this.options.next({\n      ...this.options.getValue(),\n      ...defaultFilterOptions,\n      pagination: paginationOptions,\n      filter: { ...filterOptions },\n    });\n  }\n\n  clearFilter() {\n    const paginationOptions = {\n      ...(this.options.getValue().pagination || defaultPaginationOptions.pagination),\n      from: 0, // reset to 0\n    };\n\n    this.options.next({\n      ...this.options.getValue(),\n      ...defaultFilterOptions,\n      pagination: paginationOptions,\n    });\n  }\n\n  sort(sortOptions: TransactionsSortOptions) {\n    const currentPaginationOptions = this.options.getValue().pagination || defaultPaginationOptions.pagination;\n    this.options.next({\n      sort: { ...sortOptions },\n      pagination: {\n        ...currentPaginationOptions,\n        from: 0,\n      },\n    });\n  }\n\n  retryFiltering() {\n    this.listRefresh.next(this.listOptions.getValue());\n  }\n\n  refreshTransactions() {\n    const currentPaginationOptions = this.options.getValue().pagination || defaultPaginationOptions.pagination;\n    const paginationOptions = {\n      ...currentPaginationOptions,\n      from: 0,\n    };\n\n    const newOptions = {\n      ...this.listOptions.getValue(),\n      pagination: paginationOptions,\n    };\n\n    if (deepEqual(newOptions, this.listOptions.getValue())) {\n      this.listRefresh.next(this.listOptions.getValue());\n    } else {\n      this.options.next({\n        pagination: paginationOptions,\n      });\n    }\n  }\n\n  private get isUsingPostEndpoints() {\n    return this.getOrPostEndpoint.getValue() === EndpointType.POST_REQUEST;\n  }\n\n  ngOnDestroy() {\n    this.listRefresh.complete();\n    this.selectedAccount.complete();\n    this.initialListOptions.complete();\n    this.options.complete();\n    this.listOptions.complete();\n    this.loadingState.complete();\n    this.getOrPostEndpoint.complete();\n  }\n\n  constructor(\n    private readonly transactionsDataHttpService: TransactionClientHttpService,\n    private readonly accountService: AccountsService,\n    private readonly deprecationsService: DeprecationsService,\n  ) {\n    combineLatest([this.selectedAccount, this.initialListOptions])\n      .pipe(\n        map(([selectedAccount, initialListOptions]) => ({\n          account: {\n            arrangementId: selectedAccount,\n          },\n          pagination: {\n            from: 0,\n            size: 250,\n          },\n          state: TransactionState.uncompleted,\n          ...initialListOptions,\n        })),\n      )\n      .subscribe(this.options);\n\n    // Base this.listOptions on this.options\n    this.options\n      .pipe(scan((acc: any, curr) => Object.assign({}, acc, curr), defaultInitialListOptions))\n      .subscribe(this.listOptions);\n  }\n}\n"]}