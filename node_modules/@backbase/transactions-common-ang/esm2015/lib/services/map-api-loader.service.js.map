{"version":3,"file":"map-api-loader.service.js","sourceRoot":"","sources":["../../../../../../../../libs/widgets/transactions/transactions-common-ang/src/lib/services/map-api-loader.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { MapsAPIConfig, GoogleMapsScriptProtocol } from '../model/transactions-map.model';\n\n@Injectable()\nexport class MapAPILoaderService {\n  private readonly scriptID: string = 'bbGoogleMapsApiScript';\n  private readonly callbackName: string = 'bbMapsAPILoader';\n  private readonly apiLoadPromiseName: string = 'bbMapsAPILoaderPromise';\n  private readonly windowRef: Window = window;\n  private readonly documentRef: Document = document;\n  private configValue: MapsAPIConfig = {};\n\n  get config() {\n    return this.configValue;\n  }\n\n  set config(config: MapsAPIConfig) {\n    this.configValue = config;\n  }\n\n  get loadAPIPromise() {\n    return (this.windowRef as any)[this.apiLoadPromiseName];\n  }\n\n  private assignScriptLoadingPromise(scriptElem: HTMLElement) {\n    (this.windowRef as any)[this.apiLoadPromiseName] = new Promise<void>((resolve, reject) => {\n      (this.windowRef as any)[this.callbackName] = () => {\n        resolve();\n      };\n\n      scriptElem.onerror = (error: Event | string) => {\n        reject(error);\n      };\n    });\n  }\n\n  private getScriptSrc(callbackName: string): string {\n    const protocolType: GoogleMapsScriptProtocol =\n      (this.configValue && this.configValue.protocol) || GoogleMapsScriptProtocol.HTTPS;\n    let protocol = '';\n\n    switch (protocolType) {\n      case GoogleMapsScriptProtocol.HTTP:\n        protocol = 'http:';\n        break;\n      case GoogleMapsScriptProtocol.HTTPS:\n        protocol = 'https:';\n        break;\n    }\n\n    const hostAndPath: string = this.configValue.hostAndPath || 'maps.googleapis.com/maps/api/js';\n    // make sure we have places library for search component\n    const libraries: string[] = this.configValue.libraries || [];\n    if (libraries.indexOf('places') === -1) {\n      this.configValue.libraries = [...libraries, 'places'];\n    }\n\n    const queryParams: { [key: string]: string | string[] | undefined } = {\n      v: this.configValue.apiVersion || 'quarterly',\n      callback: callbackName,\n      key: this.configValue.apiKey,\n      client: this.configValue.clientId,\n      channel: this.configValue.channel,\n      libraries: this.configValue.libraries,\n      region: this.configValue.region,\n      language: this.configValue.language,\n    };\n    const params: string = Object.keys(queryParams)\n      .filter((key: string) => queryParams[key] !== undefined)\n      .filter(\n        (key: string) =>\n          // remove empty arrays\n          !Array.isArray(queryParams[key]) ||\n          (Array.isArray(queryParams[key]) && (queryParams[key] as string[]).length > 0),\n      )\n      .map((key: string) => {\n        let value = queryParams[key] as string | string[];\n        if (Array.isArray(value)) {\n          // join arrays as comma seperated strings\n          value = value.join(',');\n        }\n\n        return `${key}=${value}`;\n      })\n      .join('&');\n\n    return `${protocol}//${hostAndPath}?${params}`;\n  }\n\n  load(): Promise<void> {\n    const window = this.windowRef as any;\n    if (window.google && window.google.maps) {\n      // Google maps already loaded on the page.\n      return Promise.resolve();\n    }\n\n    if (this.loadAPIPromise) {\n      return this.loadAPIPromise;\n    }\n\n    const script = this.documentRef.createElement('script');\n    script.type = 'text/javascript';\n    script.async = true;\n    script.defer = true;\n    script.id = this.scriptID;\n    script.src = this.getScriptSrc(this.callbackName);\n\n    this.assignScriptLoadingPromise(script);\n    this.documentRef.body.appendChild(script);\n\n    return this.loadAPIPromise;\n  }\n}\n"]}