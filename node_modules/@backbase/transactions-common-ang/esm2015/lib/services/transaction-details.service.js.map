{"version":3,"file":"transaction-details.service.js","sourceRoot":"","sources":["../../../../../../../../libs/widgets/transactions/transactions-common-ang/src/lib/services/transaction-details.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, OnDestroy } from '@angular/core';\nimport { TransactionClientHttpService } from '@backbase/data-ang/transactions';\nimport { Subject, Observable, of, ReplaySubject, combineLatest, from } from 'rxjs';\nimport { TransactionCheckImageResponse, TransactionsCheckImages } from '../model/transactions-check-images.model';\nimport { switchMap, map, tap, scan, catchError, filter, mergeMap } from 'rxjs/operators';\nimport { TransactionsDetailsLoadingState, TransactionsDetailsLoading } from '../model/transactions-details.model';\nimport { HttpResponse } from '@angular/common/http';\nimport { Transaction } from '../model/transaction.model';\nimport { CheckImagesAvailability, daysDiff } from '../constants';\nimport { MapAPILoaderService } from './map-api-loader.service';\nimport { MessagesDisputeAndInquiryConfig } from '../model/messages.model';\nimport { PaymentsBatchService } from './payments-batch.service';\nimport { BatchOrder } from '../model/batch-order.model';\n\nclass ConfigManager {\n  constructor(private config: MessagesDisputeAndInquiryConfig) {}\n\n  isDisputable(transaction: Transaction) {\n    return (\n      this.isBillingStatusApproved(transaction) && !this.isOld(transaction) && this.isOfRestrictedType(transaction)\n    );\n  }\n\n  private isBillingStatusApproved(transaction: Transaction) {\n    if (!this.config?.byBillingStatus) {\n      return true;\n    }\n\n    return !transaction?.isPending;\n  }\n\n  private isOld(transaction: Transaction) {\n    if (!transaction?.bookingDate) {\n      return false;\n    }\n    const days = daysDiff(new Date(), transaction.bookingDate);\n    const byEligitibilityDays = this.config?.byEligitibilityDays || 0;\n\n    return days > byEligitibilityDays;\n  }\n\n  private isOfRestrictedType(transaction: Transaction) {\n    return transaction?.type ? (this.config?.byTransactionTypes || []).includes(transaction.type) : false;\n  }\n}\n\n@Injectable()\nexport class TransactionDetailsService implements OnDestroy {\n  /**\n   * watches the transaction that is shown in the details\n   */\n  private readonly transactionSelection = new Subject<Transaction>();\n  /**\n   * watches the configuration from CXP that can disable/enable check images\n   */\n  private readonly hasCheckImages = new ReplaySubject<boolean>();\n  /**\n   * general status of each feature that runs asynchronously\n   */\n  private readonly transactionsDetailsStatus = new ReplaySubject<TransactionsDetailsLoading>();\n\n  private readonly mapsApiKey = new ReplaySubject<string>();\n  batchOrder: Observable<BatchOrder | undefined> = this.transactionSelection.pipe(\n    tap(() => {\n      this.transactionsDetailsStatus.next({\n        batchOrder: TransactionsDetailsLoadingState.loading,\n      });\n    }),\n    mergeMap((transaction) => {\n      if (!transaction.batchOrderId) {\n        return of(undefined);\n      }\n\n      return this.paymentsBatchService.getBatch(transaction.batchOrderId).pipe(\n        catchError(() => {\n          this.transactionsDetailsStatus.next({\n            batchOrder: TransactionsDetailsLoadingState.error,\n          });\n\n          return of(undefined);\n        }),\n      );\n    }),\n    map((data) => {\n      this.transactionsDetailsStatus.next({\n        batchOrder: data ? TransactionsDetailsLoadingState.done : TransactionsDetailsLoadingState.notStarted,\n      });\n\n      return data;\n    }),\n  );\n\n  set enableDisputeAndInquiry(value: boolean) {\n    this.transactionsDetailsStatus.next({\n      enableDisputeAndInquiry: value ? TransactionsDetailsLoadingState.done : TransactionsDetailsLoadingState.notLoaded,\n    });\n  }\n\n  fromInquiryAndDispute(\n    enableDisputeAndInquiry: Observable<boolean>,\n    disputeByBillingStatus: Observable<boolean>,\n    disputeEligibilityDays: Observable<number>,\n    disputeTransactionTypes: Observable<Array<string>>,\n  ) {\n    const config = combineLatest([\n      enableDisputeAndInquiry,\n      disputeByBillingStatus,\n      disputeEligibilityDays,\n      disputeTransactionTypes,\n    ]).pipe(\n      map(([enabled, byBillingStatus, byEligitibilityDays, byTransactionTypes]) =>\n        enabled ? { byBillingStatus, byEligitibilityDays, byTransactionTypes } : undefined,\n      ),\n    );\n\n    combineLatest([this.transactionSelection, config]).subscribe({\n      next: ([transactionSelection, inquiryAndDispute]) => {\n        if (!inquiryAndDispute) {\n          this.transactionsDetailsStatus.next({\n            enableDisputeAndInquiry: TransactionsDetailsLoadingState.notLoaded,\n            disputeOption: TransactionsDetailsLoadingState.notLoaded,\n          });\n        } else {\n          const configuration = new ConfigManager(inquiryAndDispute);\n\n          this.transactionsDetailsStatus.next({\n            enableDisputeAndInquiry: TransactionsDetailsLoadingState.done,\n            disputeOption: configuration.isDisputable(transactionSelection)\n              ? TransactionsDetailsLoadingState.done\n              : TransactionsDetailsLoadingState.notLoaded,\n          });\n        }\n      },\n    });\n  }\n  /**\n   *\n   * @param transactionId\n   * triggers a new action that will cause transcations details reload and change an image\n   */\n  selectTransaction(transaction: Transaction) {\n    this.transactionSelection.next(transaction);\n  }\n\n  /**\n   * Key-value pair that controls the loading status in transactions details\n   */\n  get loadingState(): Observable<TransactionsDetailsLoading> {\n    return this.transactionsDetailsStatus.pipe(scan((acc, curr) => ({ ...acc, ...curr }), {}));\n  }\n\n  /**\n   *\n   * @param hasCheckImages\n   * Configuration for check images reactive functionality\n   */\n  fromCheckImages(hasCheckImages: Observable<boolean>): Observable<TransactionCheckImageResponse> {\n    hasCheckImages.subscribe(this.hasCheckImages);\n\n    hasCheckImages\n      .pipe(\n        map((value) => ({\n          checkImages: value ? TransactionsDetailsLoadingState.loading : TransactionsDetailsLoadingState.notLoaded,\n        })),\n      )\n      .subscribe({\n        next: (value) => {\n          this.transactionsDetailsStatus.next(value);\n        },\n      });\n\n    return this.setCondition(this.transactionSelection, this.hasCheckImages).pipe(\n      tap(() => {\n        this.transactionsDetailsStatus.next({\n          checkImages: TransactionsDetailsLoadingState.loading,\n        });\n      }),\n      filter((transaction) => transaction.checkImageAvailability === CheckImagesAvailability.available),\n      switchMap(({ id: transactionId = '' }) =>\n        this.transactionsDataHttpService.getTransactionCheckImages({ transactionId }, 'response').pipe(\n          tap(() => {\n            this.transactionsDetailsStatus.next({\n              checkImages: TransactionsDetailsLoadingState.done,\n            });\n          }),\n          catchError((error) => {\n            switch (error.status) {\n              case 500: {\n                this.transactionsDetailsStatus.next({\n                  checkImages: TransactionsDetailsLoadingState.serverError,\n                });\n                break;\n              }\n              case 400: {\n                this.transactionsDetailsStatus.next({\n                  checkImages: TransactionsDetailsLoadingState.badRequestError,\n                });\n                break;\n              }\n              case 404: {\n                this.transactionsDetailsStatus.next({\n                  checkImages: TransactionsDetailsLoadingState.notFoundError,\n                });\n                break;\n              }\n              default: {\n                this.transactionsDetailsStatus.next({\n                  checkImages: TransactionsDetailsLoadingState.error,\n                });\n              }\n            }\n\n            return of(\n              new HttpResponse({\n                body: {\n                  images: [],\n                },\n              }),\n            );\n          }),\n          map(TransactionsCheckImages.fromHttpResponse),\n        ),\n      ),\n    );\n  }\n\n  fromGeolocation(mapsApiKey: Observable<string>): Observable<boolean> {\n    mapsApiKey.subscribe(this.mapsApiKey);\n\n    return combineLatest([this.transactionSelection, this.mapsApiKey]).pipe(\n      map(([transaction, apiKey]) => {\n        this.mapApiLoader.config = {\n          apiKey,\n          libraries: ['geometry'],\n        };\n\n        this.transactionsDetailsStatus.next({\n          geolocation: TransactionsDetailsLoadingState.loading,\n        });\n\n        if (!apiKey || !transaction.location || !transaction.location.latitude || !transaction.location.longitude) {\n          this.transactionsDetailsStatus.next({\n            geolocation: TransactionsDetailsLoadingState.notLoaded,\n          });\n\n          return Promise.resolve(false);\n        }\n\n        return this.mapApiLoader.load().then(\n          () => {\n            this.transactionsDetailsStatus.next({\n              geolocation: TransactionsDetailsLoadingState.done,\n            });\n\n            return true;\n          },\n          () => {\n            this.transactionsDetailsStatus.next({\n              geolocation: TransactionsDetailsLoadingState.error,\n            });\n\n            return false;\n          },\n        );\n      }),\n      mergeMap((promise) => from(promise)),\n    );\n  }\n\n  /**\n   * destroy lifecycle hook that will release resources\n   */\n  ngOnDestroy() {\n    this.transactionSelection.complete();\n    this.transactionsDetailsStatus.complete();\n    this.mapsApiKey.complete();\n  }\n\n  /**\n   *\n   * @param feature\n   * @param toggle\n   *\n   * Prevents from emiting values if the cxp configuration is set as disabled\n   */\n  private setCondition<T>(feature: Observable<T>, toggle: ReplaySubject<boolean>): Observable<T> {\n    return combineLatest([feature, toggle]).pipe(\n      filter(([, condition]) => condition),\n      map(([value]) => value),\n    );\n  }\n\n  constructor(\n    private readonly transactionsDataHttpService: TransactionClientHttpService,\n    private readonly mapApiLoader: MapAPILoaderService,\n    private readonly paymentsBatchService: PaymentsBatchService,\n  ) {\n    this.transactionsDetailsStatus.next({\n      checkImages: TransactionsDetailsLoadingState.notStarted,\n      geolocation: TransactionsDetailsLoadingState.notStarted,\n      enableDisputeAndInquiry: TransactionsDetailsLoadingState.notStarted,\n      disputeOption: TransactionsDetailsLoadingState.notStarted,\n      batchOrder: TransactionsDetailsLoadingState.notStarted,\n    });\n  }\n}\n"]}