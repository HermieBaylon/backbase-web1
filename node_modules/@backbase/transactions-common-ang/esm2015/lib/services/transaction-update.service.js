import { Injectable } from '@angular/core';
import { TransactionClientHttpService } from '@backbase/data-ang/transactions';
import { throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/data-ang/transactions";
export class TransactionUpdateService {
    constructor(transactionsDataHttpService) {
        this.transactionsDataHttpService = transactionsDataHttpService;
    }
    handleError(error) {
        if (error.error instanceof ErrorEvent) {
            // A client-side or network error occurred.  Handle it accordingly.
            console.error('An error occurred:', error.error.message);
        }
        else {
            // The backend returned an unsuccessful response code.
            // The response body may contain clues as to what went wrong.
            console.error(`Backend returned code ${error.status}, ` + `body was: ${error.error}`);
        }
        // Return an observable with a user-facing error message.
        return throwError('Something bad happened; please try again later.');
    }
    update(transaction, update) {
        if (typeof transaction.id === 'undefined' || typeof transaction.arrangementId === 'undefined') {
            return throwError('updateNotes: invalid transaction');
        }
        return this.transactionsDataHttpService
            .patchTransactions({
            transactionsClientPatchRequestBody: [
                {
                    id: transaction.id,
                    arrangementId: transaction.arrangementId,
                    notes: update.notes,
                    disputeStatus: update.disputeStatus,
                    category: update.category,
                },
            ],
        }, 'response')
            .pipe(catchError(this.handleError));
    }
    setDisputeStatus(transaction, disputeStatus) {
        return this.update(transaction, { disputeStatus });
    }
    updateNotes(transaction, notes) {
        return this.update(transaction, { notes });
    }
}
TransactionUpdateService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionUpdateService, deps: [{ token: i1.TransactionClientHttpService }], target: i0.ɵɵFactoryTarget.Injectable });
TransactionUpdateService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionUpdateService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionUpdateService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.TransactionClientHttpService }]; } });
//# sourceMappingURL=transaction-update.service.js.map