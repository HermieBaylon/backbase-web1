{"version":3,"file":"transactions.service.js","sourceRoot":"","sources":["../../../../../../../../libs/widgets/transactions/transactions-common-ang/src/lib/services/transactions.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Inject, Injectable, InjectionToken, LOCALE_ID, OnDestroy } from '@angular/core';\nimport {\n  GetTransactionsExportWithPostRequestParams,\n  GetTransactionsWithPostRequestParams,\n  TransactionClientHttpService,\n  TransactionItem,\n} from '@backbase/data-ang/transactions';\nimport { BehaviorSubject, combineLatest, iif, merge, Observable, of, ReplaySubject, Subject } from 'rxjs';\nimport { catchError, distinctUntilChanged, filter, first, map, scan, switchMap, tap } from 'rxjs/operators';\nimport {\n  defaultFilterOptions,\n  defaultInitialExportOptions,\n  defaultInitialListOptions,\n  defaultPaginationOptions,\n  defaultSearchOptions,\n  OnLoadAction,\n  TransactionsListOptions,\n  TransactionState,\n} from '../model/transactions-list-options.model';\nimport { TransactionsExportOptions } from '../model/transactions-export-options.model';\nimport { TransactionsSearchOptions } from '../model/transactions-search-options.model';\nimport { TransactionsFilterOptions } from '../model/transactions-filter-options.model';\nimport { TransactionsList } from '../model/transactions-list.model';\nimport { TransactionsSortOptions } from '../model/transactions-sort-options.model';\nimport { AccountsService } from './accounts.service';\nimport { Account } from '../model/account.model';\nimport {\n  cacheRequest,\n  deepEqual,\n  multipleAccountsPredicate,\n  onLoadTransactions,\n} from '../model/transactions-list-utils.model';\nimport { HttpResponse } from '@angular/common/http';\nimport { EndpointType } from './widget-properties.service';\nimport { DeprecationsService } from '@backbase/foundation-ang/core';\n\nexport enum LoadingState {\n  NotLoaded = 'NotLoaded',\n  LoadingMore = 'LoadingMore',\n  LoadingPage = 'LoadingPage',\n  Loading = 'Loading',\n  Loaded = 'Loaded',\n}\n\nexport const showDetailsConfigToken = new InjectionToken<boolean>('shows the transactions details modal');\n\n@Injectable()\nexport class TransactionsService implements OnDestroy {\n  private readonly selectedAccount = new ReplaySubject<string[]>(1);\n  private readonly pageSize = new ReplaySubject<number>(1);\n  private readonly initialListOptions = new ReplaySubject<Partial<TransactionsListOptions>>(1);\n  private readonly options = new BehaviorSubject<Partial<TransactionsListOptions>>({});\n  private readonly listRefresh = new Subject<TransactionsListOptions>();\n  private readonly listOptions = new BehaviorSubject<TransactionsListOptions>(defaultInitialListOptions);\n  private readonly exportOptions = new BehaviorSubject<TransactionsExportOptions>(defaultInitialExportOptions);\n  private readonly showPendingTransactionsOnTop = new ReplaySubject<boolean>(1);\n  private readonly getOrPostEndpoint = new BehaviorSubject<EndpointType>(EndpointType.GET_REQUEST);\n  private readonly transactionsList: Observable<TransactionsList> = merge(\n    this.listOptions.pipe(\n      filter((listOptions) => typeof listOptions.account.arrangementId !== 'undefined'),\n      distinctUntilChanged(deepEqual),\n    ),\n    this.listRefresh,\n  ).pipe(\n    cacheRequest((listOptions) => {\n      this.loadingState.next(\n        listOptions.onLoad === OnLoadAction.Append\n          ? LoadingState.LoadingMore\n          : listOptions.onLoad === OnLoadAction.ReplacePage\n          ? LoadingState.LoadingPage\n          : LoadingState.Loading,\n      );\n\n      return combineLatest([\n        this.loadTransactions(listOptions).pipe(\n          tap(() => {\n            this.loadingState.next(LoadingState.Loaded);\n          }),\n          map((transactionsList) => ({\n            transactionsList,\n            onLoad: listOptions.onLoad,\n          })),\n        ),\n        iif(\n          multipleAccountsPredicate(listOptions),\n          this.accountService.getAllArrangements().pipe(\n            map((accounts) => {\n              const accountMap = new Map<string, Account>();\n              accounts.forEach((account) => {\n                accountMap.set(account.id, account);\n              });\n\n              return accountMap;\n            }),\n          ),\n          of(new Map()),\n        ),\n        this.isFilterApplied,\n        this.isSearchApplied,\n      ]).pipe(\n        map(([transactions, accountMap, isFilterApplied, isSearchApplied]) => {\n          transactions.transactionsList.items = transactions.transactionsList.items.map((transaction) => ({\n            ...transaction,\n            account: accountMap.get(transaction.arrangementId || ''),\n          }));\n          transactions.transactionsList.initialRequest = !(isFilterApplied || isSearchApplied);\n\n          return transactions;\n        }),\n      );\n    }),\n    scan(onLoadTransactions, { items: [], totalCount: 0 }),\n  );\n\n  public readonly loadingState = new BehaviorSubject<LoadingState>(LoadingState.NotLoaded);\n\n  public readonly isFilterApplied = this.listOptions.pipe(\n    map((options) => !TransactionsFilterOptions.isEmpty(options.filter || {})),\n  );\n\n  public readonly isSearchApplied = this.listOptions.pipe(\n    map((options) => !TransactionsFilterOptions.isEmpty(options.search || {})),\n  );\n\n  private loadTransactions(listOptions: TransactionsListOptions): Observable<TransactionsList> {\n    const transactionPayload = TransactionsList.toHttpRequest(listOptions);\n    let transactionsResponse: Observable<HttpResponse<Array<TransactionItem>>> | undefined;\n\n    if (this.isUsingPostEndpoints) {\n      transactionsResponse = this.transactionsDataHttpService.getTransactionsWithPost(\n        {\n          transactionListRequest: transactionPayload,\n        } as GetTransactionsWithPostRequestParams,\n        'response',\n      );\n    } else {\n      this.deprecationsService.logDeprecatedFeature(\n        '[TransactionsService: loadTransactions] GET endpoints deprecated. Please use POST endpoints by changing CXP configuration',\n      );\n      transactionsResponse = this.transactionsDataHttpService.getTransactions(transactionPayload, 'response');\n    }\n\n    return transactionsResponse.pipe(\n      map(TransactionsList.fromHttpResponse),\n      catchError((err) =>\n        of({\n          items: [],\n          totalCount: 0,\n          httpResponseError: err,\n        }),\n      ),\n    );\n  }\n\n  private exportTransactions(exportOptions: TransactionsExportOptions): Observable<HttpResponse<Blob>> {\n    const exportPayload = TransactionsList.toHttpRequest({\n      ...exportOptions,\n      locale: this.locale,\n    });\n\n    if (this.isUsingPostEndpoints) {\n      return this.transactionsDataHttpService.getTransactionsExportWithPost(\n        {\n          transactionListRequest: exportPayload,\n        } as GetTransactionsExportWithPostRequestParams,\n        'response',\n      );\n    } else {\n      this.deprecationsService.logDeprecatedFeature(\n        '[TransactionsService: exportTransactions] GET endpoints deprecated. Please use POST endpoints by changing CXP configuration',\n      );\n\n      return this.transactionsDataHttpService.getTransactionsExport(exportPayload, 'response');\n    }\n  }\n\n  search(query: string) {\n    const searchOptions: TransactionsSearchOptions = {\n      query,\n    };\n\n    const paginationOptions = {\n      ...(this.options.getValue().pagination || defaultPaginationOptions.pagination),\n      from: 0, // reset to 0\n    };\n\n    this.options.next({\n      ...this.options.getValue(),\n      ...defaultSearchOptions,\n      pagination: paginationOptions,\n      search: searchOptions,\n      onLoad: OnLoadAction.Replace,\n    });\n  }\n\n  clearSearch() {\n    const paginationOptions = {\n      ...(this.options.getValue().pagination || defaultPaginationOptions.pagination),\n      from: 0, // reset to 0\n    };\n\n    this.options.next({\n      ...this.options.getValue(),\n      ...defaultSearchOptions,\n      pagination: paginationOptions,\n      onLoad: OnLoadAction.Replace,\n    });\n  }\n\n  filter(filterOptions: TransactionsFilterOptions) {\n    const paginationOptions = {\n      ...(this.options.getValue().pagination || defaultPaginationOptions.pagination),\n      from: 0, // reset to 0\n    };\n\n    this.options.next({\n      ...this.options.getValue(),\n      ...defaultFilterOptions,\n      pagination: paginationOptions,\n      filter: { ...filterOptions },\n      onLoad: OnLoadAction.Replace,\n    });\n  }\n\n  clearFilter() {\n    const paginationOptions = {\n      ...(this.options.getValue().pagination || defaultPaginationOptions.pagination),\n      from: 0, // reset to 0\n    };\n\n    this.options.next({\n      ...this.options.getValue(),\n      ...defaultFilterOptions,\n      pagination: paginationOptions,\n      onLoad: OnLoadAction.Replace,\n    });\n  }\n\n  exportToType(type: string) {\n    return this.exportOptions.pipe(\n      first(),\n      switchMap((exportOptions: TransactionsExportOptions) =>\n        this.exportTransactions({\n          ...exportOptions,\n          exportType: type,\n        }),\n      ),\n    );\n  }\n\n  loadMore() {\n    const currentPaginationOptions = this.options.getValue().pagination || defaultPaginationOptions.pagination;\n    const paginationOptions = {\n      ...currentPaginationOptions,\n      from: currentPaginationOptions.from + 1,\n    };\n\n    this.options.next({\n      pagination: paginationOptions,\n      onLoad: OnLoadAction.Append,\n    });\n  }\n\n  sort(sortOptions: TransactionsSortOptions) {\n    const currentPaginationOptions = this.options.getValue().pagination || defaultPaginationOptions.pagination;\n    this.options.next({\n      sort: { ...sortOptions },\n      pagination: {\n        ...currentPaginationOptions,\n        from: 0,\n      },\n      onLoad: OnLoadAction.ReplacePage,\n    });\n  }\n\n  pageChange(page: number) {\n    const paginationOptions = {\n      ...defaultPaginationOptions.pagination,\n      ...this.options.getValue().pagination,\n      from: page,\n    };\n\n    this.options.next({\n      pagination: paginationOptions,\n      onLoad: OnLoadAction.ReplacePage,\n    });\n  }\n\n  getTransactionsFrom(\n    selectedAccount: Observable<string[]>,\n    pageSize: Observable<number>,\n    initialListOptions: Observable<Partial<TransactionsListOptions>> = of({}),\n    showPendingTransactionsOnTop: Observable<boolean> = of(false),\n    getOrPostEndpoint: Observable<EndpointType> = of(EndpointType.GET_REQUEST),\n  ) {\n    selectedAccount.subscribe(this.selectedAccount);\n    pageSize.subscribe(this.pageSize);\n    initialListOptions.subscribe(this.initialListOptions);\n    showPendingTransactionsOnTop.subscribe(this.showPendingTransactionsOnTop);\n    getOrPostEndpoint.subscribe(this.getOrPostEndpoint);\n  }\n\n  getCurrentPage() {\n    return this.listOptions.pipe(map((options) => (options.pagination || defaultPaginationOptions.pagination).from));\n  }\n\n  getTransactionsList() {\n    return this.transactionsList;\n  }\n\n  retryFiltering() {\n    this.listRefresh.next(this.listOptions.getValue());\n  }\n\n  refreshTransactions() {\n    const currentPaginationOptions = this.options.getValue().pagination || defaultPaginationOptions.pagination;\n    const paginationOptions = {\n      ...currentPaginationOptions,\n      from: 0,\n    };\n\n    const newOptions = {\n      ...this.listOptions.getValue(),\n      pagination: paginationOptions,\n      onLoad: OnLoadAction.ReplacePage,\n    };\n\n    if (deepEqual(newOptions, this.listOptions.getValue())) {\n      this.listRefresh.next(this.listOptions.getValue());\n    } else {\n      this.options.next({\n        pagination: paginationOptions,\n        onLoad: OnLoadAction.ReplacePage,\n      });\n    }\n  }\n\n  private get isUsingPostEndpoints() {\n    return this.getOrPostEndpoint.getValue() === EndpointType.POST_REQUEST;\n  }\n\n  ngOnDestroy() {\n    this.listRefresh.complete();\n    this.selectedAccount.complete();\n    this.pageSize.complete();\n    this.initialListOptions.complete();\n    this.options.complete();\n    this.listOptions.complete();\n    this.exportOptions.complete();\n    this.showPendingTransactionsOnTop.complete();\n    this.loadingState.complete();\n    this.getOrPostEndpoint.complete();\n  }\n\n  constructor(\n    private readonly transactionsDataHttpService: TransactionClientHttpService,\n    private readonly accountService: AccountsService,\n    private readonly deprecationsService: DeprecationsService,\n    @Inject(LOCALE_ID) private readonly locale: string,\n  ) {\n    // Base this.options on this.selectedAccount, this.pageSize, this.initialListOptions\n    combineLatest([this.selectedAccount, this.pageSize, this.initialListOptions, this.showPendingTransactionsOnTop])\n      .pipe(\n        map(([selectedAccount, pageSize, initialListOptions, showPendingTransactionsOnTop]) => ({\n          ...(showPendingTransactionsOnTop ? { state: TransactionState.completed } : {}),\n          account: {\n            arrangementId: selectedAccount,\n          },\n          pagination: {\n            from: 0,\n            size: pageSize,\n          },\n          onLoad: OnLoadAction.Replace,\n          ...initialListOptions,\n        })),\n      )\n      .subscribe(this.options);\n\n    // Base this.listOptions on this.options\n    this.options\n      .pipe(scan((acc: any, curr) => Object.assign({}, acc, curr), defaultInitialListOptions))\n      .subscribe(this.listOptions);\n\n    // Base this.exportOptions on this.listOptions\n    this.listOptions\n      .pipe(\n        filter((listOptions) => typeof listOptions.account.arrangementId !== 'undefined'),\n        map((params) => ({\n          ...params,\n          pagination: undefined,\n          state: undefined,\n          exportType: 'csv',\n          locale: 'en-US',\n        })),\n      )\n      .subscribe(this.exportOptions);\n  }\n}\n"]}