{"version":3,"file":"enum-values.service.js","sourceRoot":"","sources":["../../../../../../../../libs/widgets/transactions/transactions-common-ang/src/lib/services/enum-values.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAE3C,OAAO,EAAE,4BAA4B,EAAE,MAAM,iCAAiC,CAAC;AAC/E,OAAO,EAAc,UAAU,EAAE,MAAM,MAAM,CAAC;AAC9C,OAAO,EAAE,GAAG,EAAE,UAAU,EAAE,MAAM,gBAAgB,CAAC;AAEjD,OAAO,EAAE,qBAAqB,EAAE,MAAM,wCAAwC,CAAC;;;AAG/E,MAAM,OAAO,iBAAiB;IAK5B,YAA6B,2BAAyD;QAAzD,gCAA2B,GAA3B,2BAA2B,CAA8B;QAJrE,eAAU,GAEvB,EAAE,CAAC;IAEkF,CAAC;IAElF,WAAW,CAAC,KAAwB;QAC1C,IAAI,KAAK,CAAC,KAAK,YAAY,UAAU,EAAE;YACrC,mEAAmE;YACnE,OAAO,CAAC,KAAK,CAAC,oBAAoB,EAAE,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;SAC1D;aAAM;YACL,sDAAsD;YACtD,6DAA6D;YAC7D,OAAO,CAAC,KAAK,CAAC,yBAAyB,KAAK,CAAC,MAAM,IAAI,GAAG,aAAa,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC;SACvF;QAED,yDAAyD;QACzD,OAAO,UAAU,CAAC,iDAAiD,CAAC,CAAC;IACvE,CAAC;IAEO,cAAc,CAAC,aAAqB;QAC1C,OAAO,IAAI,CAAC,2BAA2B;aACpC,4BAA4B,CAAC,EAAE,aAAa,EAAE,EAAE,UAAU,CAAC;aAC3D,IAAI,CAAC,GAAG,CAAC,qBAAqB,CAAC,gBAAgB,CAAC,EAAE,UAAU,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;IACrF,CAAC;IAED,aAAa,CAAC,aAAqB;QACjC,IAAI,OAAO,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,KAAK,WAAW,EAAE;YACzD,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,GAAG,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;SACrE;QAED,OAAO,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;IACxC,CAAC;;+GAjCU,iBAAiB;mHAAjB,iBAAiB;4FAAjB,iBAAiB;kBAD7B,UAAU","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { TransactionClientHttpService } from '@backbase/data-ang/transactions';\nimport { Observable, throwError } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\n\nimport { TransactionsEnumValue } from '../model/transactions-enum-value.model';\n\n@Injectable()\nexport class EnumValuesService {\n  private readonly enumValues: {\n    [attributeName: string]: Observable<Array<TransactionsEnumValue>>;\n  } = {};\n\n  constructor(private readonly transactionsDataHttpService: TransactionClientHttpService) {}\n\n  private handleError(error: HttpErrorResponse) {\n    if (error.error instanceof ErrorEvent) {\n      // A client-side or network error occurred.  Handle it accordingly.\n      console.error('An error occurred:', error.error.message);\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong.\n      console.error(`Backend returned code ${error.status}, ` + `body was: ${error.error}`);\n    }\n\n    // Return an observable with a user-facing error message.\n    return throwError('Something bad happened; please try again later.');\n  }\n\n  private loadEnumValues(attributeName: string): Observable<Array<TransactionsEnumValue>> {\n    return this.transactionsDataHttpService\n      .getEnumValuesByAttributeName({ attributeName }, 'response')\n      .pipe(map(TransactionsEnumValue.fromHttpResponse), catchError(this.handleError));\n  }\n\n  getEnumValues(attributeName: string) {\n    if (typeof this.enumValues[attributeName] === 'undefined') {\n      this.enumValues[attributeName] = this.loadEnumValues(attributeName);\n    }\n\n    return this.enumValues[attributeName];\n  }\n}\n"]}