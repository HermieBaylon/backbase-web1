{"version":3,"file":"messages.service.js","sourceRoot":"","sources":["../../../../../../../../libs/widgets/transactions/transactions-common-ang/src/lib/services/messages.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,wBAAwB,EAAE,MAAM,6BAA6B,CAAC;AACvE,OAAO,EAAc,EAAE,EAAE,MAAM,MAAM,CAAC;AACtC,OAAO,EAAE,GAAG,EAAE,MAAM,gBAAgB,CAAC;AACrC,OAAO,EAAE,SAAS,EAAE,MAAM,cAAc,CAAC;;;AAKzC,MAAM,OAAO,eAAe;IAU1B,YAA6B,wBAAkD;QAAlD,6BAAwB,GAAxB,wBAAwB,CAA0B;QAT/E,wCAAwC;QACxC,mBAAc,GAAwB,EAAE,CAAC;YACvC,IAAI,EAAE,SAAS,CAAC,cAAc,CAAC;YAC/B,OAAO,EAAE,YAAY;YACrB,KAAK,EAAE,UAAU;YACjB,MAAM,EAAE;gBACN,IAAI,EAAE,aAAa;aACpB;SACF,CAAC,CAAC;IAC+E,CAAC;IAEnF,YAAY,CAAC,OAAgB;QAC3B,OAAO,IAAI,CAAC,wBAAwB,CAAC,YAAY,CAAC;YAChD,kCAAkC,EAAE,OAAO;SAC5C,CAAC,CAAC;IACL,CAAC;IAED,cAAc,CAAC,UAAgB;QAC7B,OAAO,IAAI,CAAC,wBAAwB,CAAC,sBAAsB,CAAC,EAAE,UAAU,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;IAC3G,CAAC;IAED,iBAAiB,CAAC,aAA4B;QAC5C,OAAO,IAAI,CAAC,wBAAwB;aACjC,wBAAwB,CAAC,EAAE,GAAG,EAAE,aAAa,EAAE,CAAC;aAChD,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;IACvC,CAAC;IAED,iBAAiB,CAAC,WAAwB;;QACxC,OAAO,kBAAkB,WAAW,CAAC,EAAE;mBACxB,WAAW,CAAC,SAAS;kBACtB,WAAW,CAAC,aAAa;eAC5B,WAAW,CAAC,WAAW;UAC5B,MAAA,WAAW,CAAC,yBAAyB,0CAAE,MAAM;gBACvC,MAAA,WAAW,CAAC,QAAQ,0CAAE,IAAI;oBACtB,WAAW,CAAC,gBAAgB;eACjC,WAAW,CAAC,WAAW;QAC9B,WAAW,CAAC,IAAI,EAAE,CAAC;IACzB,CAAC;;6GAtCU,eAAe;iHAAf,eAAe;4FAAf,eAAe;kBAD3B,UAAU","sourcesContent":["import { Injectable } from '@angular/core';\nimport { MessagecenterHttpService } from '@backbase/data-ang/messages';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { b64Encode } from '../constants';\nimport { Message, MessagesResponse } from '../model/messages.model';\nimport { Transaction } from '../model/transaction.model';\n\n@Injectable()\nexport class MessagesService {\n  // TODO: default message is out of scope\n  defaultMessage: Observable<Message> = of({\n    body: b64Encode('test message'),\n    subject: 'no subject',\n    topic: 'no topic',\n    sender: {\n      name: 'test sender',\n    },\n  });\n  constructor(private readonly messageCenterHttpService: MessagecenterHttpService) {}\n\n  saveMessages(message: Message): Observable<MessagesResponse> {\n    return this.messageCenterHttpService.postMessages({\n      presentationMessagePostRequestBody: message,\n    });\n  }\n\n  saveAttachment(attachment: Blob): Observable<string> {\n    return this.messageCenterHttpService.postMessageAttachments({ attachment }).pipe(map((data) => data.id));\n  }\n\n  deleteAttachments(attachmentIds: Array<string>): Observable<Array<string>> {\n    return this.messageCenterHttpService\n      .deleteMessageAttachments({ ids: attachmentIds })\n      .pipe(map((data) => data.deleted));\n  }\n\n  createDefaultBody(transaction: Transaction) {\n    return `transactionID: ${transaction.id}\nreferenceNumber: ${transaction.reference}\narranagementID: ${transaction.arrangementId}\nbookingDate: ${transaction.bookingDate}\namount: ${transaction.transactionAmountCurrency?.amount}\nmerchantName: ${transaction.merchant?.name}\ncounterpartyName: ${transaction.counterPartyName}\ndescription: ${transaction.description}\ntype: ${transaction.type}`;\n  }\n}\n"]}