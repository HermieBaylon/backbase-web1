import { ChangeDetectionStrategy, Component, Output, EventEmitter, Input } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import * as i0 from "@angular/core";
import * as i1 from "@angular/platform-browser";
import * as i2 from "../document-viewer-interactor/document-viewer-interactor.component";
const ZOOM_FACTOR = 1.1;
const ZOOM_IN_THRESHOLD = 4;
const ZOOM_OUT_THRESHOLD = 0.1;
export class ImageViewerComponent {
    constructor(domSanitizer) {
        this.domSanitizer = domSanitizer;
        this.navigationState = { currIdx: 0, total: 0 };
        this.navigate = new EventEmitter();
        this.imageUiState = { scale: 1 };
    }
    set source(src) {
        if (src) {
            this.revokeObjectURLIfNeeded();
            this.imageObjectUrl = src;
            this.imageObjectTrustedUrl = this.domSanitizer.bypassSecurityTrustResourceUrl(this.imageObjectUrl);
        }
    }
    get canZoomOut() {
        return this.imageUiState.scale >= ZOOM_OUT_THRESHOLD;
    }
    get canZoomIn() {
        return this.imageUiState.scale <= ZOOM_IN_THRESHOLD;
    }
    get scale() {
        return this.domSanitizer.bypassSecurityTrustStyle(`scale(${this.imageUiState.scale})`);
    }
    ngOnDestroy() {
        this.revokeObjectURLIfNeeded();
    }
    zoomIn() {
        if (this.canZoomIn) {
            this.imageUiState.scale *= ZOOM_FACTOR;
        }
    }
    zoomOut() {
        if (this.canZoomOut) {
            this.imageUiState.scale /= ZOOM_FACTOR;
        }
    }
    revokeObjectURLIfNeeded() {
        if (this.imageObjectUrl) {
            window.URL.revokeObjectURL(this.imageObjectUrl);
        }
    }
}
ImageViewerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ImageViewerComponent, deps: [{ token: i1.DomSanitizer }], target: i0.ɵɵFactoryTarget.Component });
ImageViewerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ImageViewerComponent, selector: "bb-image-viewer", inputs: { source: "source", navigationState: "navigationState" }, outputs: { navigate: "navigate" }, ngImport: i0, template: "<div class=\"bb-img-viewer-container bb-stack bb-stack--center\">\n  <img\n    #imgRef\n    class=\"bb-img-viewer-container__img\"\n    [style.transform]=\"scale\"\n    [src]=\"imageObjectTrustedUrl\"\n    alt=\"Transaction check image\"\n    (click)=\"$event.stopPropagation()\"\n  />\n</div>\n<bb-document-viewer-interactor\n  [navigationState]=\"navigationState\"\n  [canZoomOut]=\"canZoomOut\"\n  [canZoomIn]=\"canZoomIn\"\n  (navigate)=\"navigate.emit($event)\"\n  (zoomIn)=\"zoomIn()\"\n  (zoomOut)=\"zoomOut()\"\n></bb-document-viewer-interactor>\n", components: [{ type: i2.DocumentViewerInteractorComponent, selector: "bb-document-viewer-interactor", inputs: ["navigationState", "canZoomOut", "canZoomIn"], outputs: ["navigate", "zoomIn", "zoomOut"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ImageViewerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-image-viewer',
                    templateUrl: './image-viewer.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.DomSanitizer }]; }, propDecorators: { source: [{
                type: Input
            }], navigationState: [{
                type: Input
            }], navigate: [{
                type: Output
            }] } });
//# sourceMappingURL=image-viewer.component.js.map