import { ChangeDetectorRef, Directive, EventEmitter, Input, Output, ViewChild, } from '@angular/core';
import { BehaviorSubject, combineLatest, iif, merge, Observable, of, ReplaySubject, Subject } from 'rxjs';
import { TransactionsBackendError } from '../model/transactions-backend-error.model';
import { TransactionsService } from '../services/transactions.service';
import { WidgetPropertiesService } from '../services/widget-properties.service';
import { map, mergeMap, publishReplay, refCount, scan, takeUntil, tap } from 'rxjs/operators';
import { filterInputParameters, notificationTtl } from '../constants';
import { combineExportTypesConfig, } from '../model/transactions-export-options.model';
import { PendingTransactionsService } from '../services/pending-transactions.service';
import { TransactionDetailsService } from '../services/transaction-details.service';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { getNameFromContentDispositionHeader } from '../model/transactions-list-utils.model';
import { AvailableFiltersConfigService } from '../services/available-filters-config.service';
import { NotificationService } from '@backbase/ui-ang/notification';
import * as i0 from "@angular/core";
import * as i1 from "../services/transactions.service";
import * as i2 from "../services/widget-properties.service";
import * as i3 from "@backbase/ui-ang/notification";
import * as i4 from "../services/pending-transactions.service";
import * as i5 from "../services/transaction-details.service";
import * as i6 from "../services/available-filters-config.service";
// eslint-disable-next-line
export class BaseTransactionsContainer {
    constructor(model, widgetProperties, cd, eventBusService, notificationService, pendingTransactionsService, transactionDetailsService, availableFiltersConfigService, showDetailsConfig) {
        this.model = model;
        this.widgetProperties = widgetProperties;
        this.cd = cd;
        this.eventBusService = eventBusService;
        this.notificationService = notificationService;
        this.pendingTransactionsService = pendingTransactionsService;
        this.transactionDetailsService = transactionDetailsService;
        this.availableFiltersConfigService = availableFiltersConfigService;
        this.showDetailsConfig = showDetailsConfig;
        /**
         * Reference to instance of customizable component.
         */
        this.hostRef = this;
        this.apiKeySubject = new BehaviorSubject(undefined);
        /**
         * Observable of options to initialize the filter with.  By default, it is empty.
         */
        this.initialFilterOptions = of({});
        /**
         * Observable of options to initialize the sort options with.  By default, it is empty.
         */
        this.initialSortOptions = of(undefined);
        this.transactionSelected = new EventEmitter();
        this.transactionsLoaded = new EventEmitter();
        this.pageSizeSubject = new BehaviorSubject(undefined);
        this.maxNavPagesSubject = new BehaviorSubject(undefined);
        this.paginationTypeSubject = new BehaviorSubject(undefined);
        this.showControlsSubject = new BehaviorSubject(undefined);
        this.showChangeCategorySubject = new BehaviorSubject(undefined);
        this.showPendingTransactionsOnTopSubject = new BehaviorSubject(undefined);
        this.showCheckImageSubject = new BehaviorSubject(undefined);
        this.showManageNotesSubject = new BehaviorSubject(undefined);
        this.getOrPostEndpointsSubject = new BehaviorSubject(undefined);
        this.disputeByBillingStatusSubject = new BehaviorSubject(undefined);
        this.disputeEligibilityDaysSubject = new BehaviorSubject(undefined);
        this.disputeTransactionTypesSubject = new BehaviorSubject(undefined);
        this.enableDisputeAndInquirySubject = new BehaviorSubject(false);
        this.inquireTopicIdSubject = new BehaviorSubject('');
        this.disputeTopicIdSubject = new BehaviorSubject('');
        /**
         * Events registered to transactions widgets
         */
        this.registeredRefreshTransactionsListEvents = [];
        this.unsubscribeSubject = new Subject();
        /**
         * Subject that listens the transactionsList observable and provides the export types
         */
        this.exportConfig = new BehaviorSubject({});
        this.exportErrorMessagesRef = {};
        this.numberOfResultsFound = new ReplaySubject();
        this.numberOfResultsDisplayed = new ReplaySubject();
        this.availableFiltersConfig = new ReplaySubject(1);
        this.availableFilters = this.availableFiltersConfigService.availableFilters$;
        this.inquireTopicId = filterInputParameters(this.inquireTopicIdSubject.asObservable(), this.widgetProperties.inquireTopicId);
        this.disputeTopicId = filterInputParameters(this.disputeTopicIdSubject.asObservable(), this.widgetProperties.disputeTopicId);
        this.inquireAndDisputeTopics = combineLatest([
            this.inquireTopicId,
            this.disputeTopicId,
        ]).pipe(map(([inquire, dispute]) => ({ inquire, dispute })));
        this.refreshTransactionsListHandler = () => {
            this.model.refreshTransactions();
        };
        /**
         * @deprecated will be removed in 11.0.0
         */
        this.handleError = (errorResponse) => {
            this.errors = TransactionsBackendError.fromHttpErrorsResponse(errorResponse);
            return of({
                items: [],
                totalCount: 0,
            });
        };
    }
    /**
     * API key needed for the google maps to work.
     */
    // eslint-disable-next-line
    set googleAPIKey(key) {
        this.apiKeySubject.next(key);
    }
    /**
     * input parameters that will take the place of model properties--
     */
    set pageSizeValue(value) {
        this.pageSizeSubject.next(value);
    }
    set maxNavPagesValue(value) {
        this.maxNavPagesSubject.next(value);
    }
    set paginationTypeValue(value) {
        this.paginationTypeSubject.next(value);
    }
    set showControlsValue(value) {
        this.showControlsSubject.next(value);
    }
    set showChangeCategoryValue(value) {
        this.showChangeCategorySubject.next(value);
    }
    set showPendingTransactionsOnTopValue(value) {
        this.showPendingTransactionsOnTopSubject.next(value);
    }
    set showCheckImageValue(value) {
        this.showCheckImageSubject.next(value);
    }
    set showManageNotesValue(value) {
        this.showManageNotesSubject.next(value);
    }
    set getOrPostEndpointsValue(value) {
        this.getOrPostEndpointsSubject.next(value);
    }
    set disputeByBillingStatusValue(value) {
        this.disputeByBillingStatusSubject.next(typeof value === 'boolean' ? value : value === 'true');
    }
    set disputeEligibilityDaysValue(value) {
        this.disputeEligibilityDaysSubject.next(value);
    }
    set disputeTransactionTypesValue(value) {
        this.disputeTransactionTypesSubject.next((value || '').split(','));
    }
    set enableDisputeAndInquiryValue(value) {
        this.enableDisputeAndInquirySubject.next(typeof value === 'boolean' ? value : value === 'true');
    }
    set availableFiltersValue(availableFiltersConfig) {
        this.availableFiltersConfig.next(availableFiltersConfig);
    }
    /** end input parameters--- */
    /**
     * Information about the backend error, if it occurs.
     */
    /**
     * @deprecated will be removed in 11.0.0
     */
    get error() {
        return this.errors && this.errors[0];
    }
    clearRefreshTransactionsListEvents() {
        this.registeredRefreshTransactionsListEvents.forEach((eventName) => {
            this.eventBusService.unsubscribe(eventName, this.refreshTransactionsListHandler);
        });
        this.registeredRefreshTransactionsListEvents = [];
    }
    retry() {
        this.model.retryFiltering();
        this.pendingTransactionsService.retryFiltering();
    }
    ngOnDestroy() {
        this.clearRefreshTransactionsListEvents();
        this.unsubscribeSubject.next();
        this.unsubscribeSubject.complete();
    }
    get pageSize() {
        return filterInputParameters(this.pageSizeSubject.asObservable(), this.widgetProperties.pageSize);
    }
    get maxNavPages() {
        return filterInputParameters(this.maxNavPagesSubject.asObservable(), this.widgetProperties.maxNavPages);
    }
    get showControls() {
        return filterInputParameters(this.showControlsSubject.asObservable(), this.widgetProperties.showControls);
    }
    get isFilterApplied() {
        return this.model.isFilterApplied;
    }
    get isSearchApplied() {
        return this.model.isSearchApplied;
    }
    get paginationType() {
        return filterInputParameters(this.paginationTypeSubject.asObservable(), this.widgetProperties.paginationType);
    }
    get showPendingTransactionsOnTop() {
        return filterInputParameters(this.showPendingTransactionsOnTopSubject.asObservable(), this.widgetProperties.showPendingTransactionsOnTop);
    }
    get showChangeCategory() {
        return filterInputParameters(this.showChangeCategorySubject.asObservable(), this.widgetProperties.showChangeCategory);
    }
    get showCheckImage() {
        return filterInputParameters(this.showCheckImageSubject.asObservable(), this.widgetProperties.showCheckImage);
    }
    get showManageNotes() {
        return filterInputParameters(this.showManageNotesSubject, this.widgetProperties.showManageNotes);
    }
    get getOrPostEndpoint() {
        return filterInputParameters(this.getOrPostEndpointsSubject.asObservable(), this.widgetProperties.getOrPostEndpoints);
    }
    get gmapsAPIKey() {
        return combineLatest([this.apiKeySubject.asObservable(), this.widgetProperties.gmapsAPIKey]).pipe(map(([inputVal, propVal]) => inputVal || propVal));
    }
    get enableDisputeAndInquiry() {
        return filterInputParameters(this.enableDisputeAndInquirySubject.asObservable(), this.widgetProperties.enableDisputeAndInquiry);
    }
    get disputeByBillingStatus() {
        return filterInputParameters(this.disputeByBillingStatusSubject.asObservable(), this.widgetProperties.disputeByBillingStatus);
    }
    get disputeEligibilityDays() {
        return filterInputParameters(this.disputeEligibilityDaysSubject.asObservable(), this.widgetProperties.disputeEligibilityDays);
    }
    get disputeTransactionTypes() {
        return filterInputParameters(this.disputeTransactionTypesSubject.asObservable(), this.widgetProperties.disputeTransactionTypes);
    }
    onLoadMore() {
        this.model.loadMore();
    }
    ngOnInit() {
        if (typeof this.selectedAccount === 'undefined') {
            throw new Error(`"selectedAccount" input is required in "${this.constructor.name}"`);
        }
        const initialListOptions = combineLatest([
            this.initialFilterOptions,
            this.initialSortOptions,
        ]).pipe(map(([initialFilterOptions, initialSortOptions]) => ({
            filter: initialFilterOptions,
            sort: initialSortOptions,
        })));
        this.model.getTransactionsFrom(this.selectedAccount.pipe(map((value) => value !== null && value !== void 0 ? value : [])), this.pageSize, initialListOptions, this.showPendingTransactionsOnTop, this.getOrPostEndpoint);
        if (this.showDetailsConfig) {
            this.checkImagesList = this.transactionDetailsService.fromCheckImages(this.showCheckImage);
            this.transactionDetailsLoadingStatus = this.transactionDetailsService.loadingState;
            this.transactionDetailsService
                .fromGeolocation(this.gmapsAPIKey)
                .pipe(takeUntil(this.unsubscribeSubject))
                .subscribe();
        }
        this.transactionsList = this.model.getTransactionsList().pipe(publishReplay(1), refCount(), tap((data) => {
            this.errors = data.httpResponseError
                ? TransactionsBackendError.fromHttpErrorsResponse(data.httpResponseError)
                : undefined;
            this.cd.markForCheck();
        }));
        this.pendingTransactionsService.getTransactionsFrom(this.selectedAccount.pipe(map((value) => value !== null && value !== void 0 ? value : [])), initialListOptions, this.getOrPostEndpoint);
        this.pendingTransactionsList = this.pendingTransactionsService.getTransactionsList().pipe(publishReplay(1), refCount(), tap((data) => {
            this.errors = data.httpResponseError
                ? TransactionsBackendError.fromHttpErrorsResponse(data.httpResponseError)
                : undefined;
            this.cd.markForCheck();
        }));
        this.transactionsList
            .pipe(takeUntil(this.unsubscribeSubject), map((transactionsList) => {
            if (!transactionsList) {
                return {};
            }
            const { availableExportTypesHeader, unavailableExportTypesReasonsHeader } = transactionsList;
            return combineExportTypesConfig({
                availableExportTypesHeader,
                unavailableExportTypesReasonsHeader,
            });
        }))
            .subscribe(this.exportConfig);
        const transactionsListCount = this.transactionsList.pipe(map((trans) => ({ history: trans ? trans.totalCount : 0 })));
        const pendingTransactionsListCount = this.pendingTransactionsList.pipe(map((trans) => ({ pending: trans ? trans.totalCount : 0 })));
        const transactionsListItemsToDisplay = this.transactionsList.pipe(map((trans) => ({ history: trans ? trans.items.length : 0 })));
        const pendingTransactionsListItemsToDisplay = this.pendingTransactionsList.pipe(map((trans) => ({ pending: trans ? trans.items.length : 0 })));
        this.sumTransactionsResults(transactionsListCount, pendingTransactionsListCount)
            .pipe(takeUntil(this.unsubscribeSubject))
            .subscribe(this.numberOfResultsFound);
        this.sumTransactionsResults(transactionsListItemsToDisplay, pendingTransactionsListItemsToDisplay)
            .pipe(takeUntil(this.unsubscribeSubject))
            .subscribe(this.numberOfResultsDisplayed);
        this.currentPage = this.model.getCurrentPage();
        this.loadingState = this.model.loadingState;
        this.loadingPendingState = this.pendingTransactionsService.loadingState;
        this.widgetProperties.refreshTransactionsListEvents.pipe(takeUntil(this.unsubscribeSubject)).subscribe((events) => {
            this.clearRefreshTransactionsListEvents();
            if (events) {
                this.registeredRefreshTransactionsListEvents = events.split(',');
                this.registeredRefreshTransactionsListEvents.forEach((eventName) => {
                    this.eventBusService.subscribe(eventName, this.refreshTransactionsListHandler);
                });
            }
        });
        this.configureTransctionsDetailsOutputBehaviour();
        this.transactionDetailsService.fromInquiryAndDispute(this.enableDisputeAndInquiry, this.disputeByBillingStatus, this.disputeEligibilityDays, this.disputeTransactionTypes);
        this.availableFiltersConfigService.setFilterConfigurationAndAccount(this.availableFiltersConfig.asObservable(), this.selectedAccount.pipe(map((value) => value !== null && value !== void 0 ? value : [])));
    }
    configureTransctionsDetailsOutputBehaviour() {
        if (this.transactionsList && this.pendingTransactionsList && !this.showDetailsConfig) {
            const pending = this.showPendingTransactionsOnTop.pipe(mergeMap((cond) => iif(() => cond, this.pendingTransactionsList, of({ items: [], totalCount: 0 }))));
            combineLatest([pending, this.transactionsList])
                .pipe(takeUntil(this.unsubscribeSubject), map(([pendingTransactionsList, transactionsList]) => {
                const pendingTransactions = pendingTransactionsList ? pendingTransactionsList.items : [];
                const transactions = transactionsList ? transactionsList.items : [];
                const mixed = {
                    items: [...pendingTransactions, ...transactions],
                    totalCount: ((pendingTransactionsList === null || pendingTransactionsList === void 0 ? void 0 : pendingTransactionsList.totalCount) || 0) + ((transactionsList === null || transactionsList === void 0 ? void 0 : transactionsList.totalCount) || 0),
                };
                return mixed;
            }))
                .subscribe((data) => {
                this.transactionsLoaded.emit(data);
            });
        }
    }
    sumTransactionsResults(historyCount, pendingCount) {
        return this.showPendingTransactionsOnTop.pipe(mergeMap((showPendingTransactionsOnTop) => iif(() => showPendingTransactionsOnTop, merge(historyCount, pendingCount), historyCount)), scan((acc, curr) => (Object.assign(Object.assign({}, acc), curr)), { history: 0, pending: 0 }), map(({ history = 0, pending = 0 }) => history + pending));
    }
    onPageChange(page) {
        this.model.pageChange(page);
    }
    onSearch(query) {
        // search ui component sends an unexpected event
        // that is type Event. To avoid calling backend with that event
        // it has to be string
        if (typeof query === 'string') {
            this.model.search(query);
            this.pendingTransactionsService.search(query);
        }
    }
    onFilter(filterOptions) {
        this.model.filter(filterOptions);
        this.pendingTransactionsService.filter(filterOptions);
    }
    onSort(sortOptions) {
        this.model.sort(sortOptions);
    }
    onPrint() {
        window.print();
    }
    onExport(exportType) {
        this.storedExportType = Object.assign({}, exportType);
        if (exportType.isAvailable) {
            this.model
                .exportToType(exportType.name)
                .pipe(takeUntil(this.unsubscribeSubject))
                .subscribe((response) => {
                const anchorTag = document.createElement('a');
                anchorTag.href = URL.createObjectURL(response.body);
                const fileName = getNameFromContentDispositionHeader(response);
                const defaultName = exportType.name.toLowerCase() === 'pdf' ? 'Account Activities' : 'transactions';
                anchorTag.download = fileName !== '' ? fileName : defaultName;
                anchorTag.click();
            }, () => {
                this.notificationService.showNotification({
                    header: this.notificationServerErrorHeader,
                    message: this.notificationServerErrorMessage || '',
                    modifier: 'error',
                });
            });
        }
        else {
            this.pushNotification({
                header: this.notificationErrorUpdateHeaderTemplate,
                message: this.notificationErrorUpdateMessageTemplate,
                modifier: 'error',
            });
        }
    }
    onDetailOpen(transaction) {
        if (!this.showDetailsConfig) {
            this.transactionSelected.emit(transaction);
        }
        else {
            this.transactionDetailsService.selectTransaction(transaction);
        }
    }
    pushNotification(notificationMessage) {
        this.notificationService.showNotification(Object.assign({ dismissible: true, ttl: notificationTtl }, notificationMessage));
    }
}
BaseTransactionsContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BaseTransactionsContainer, deps: "invalid", target: i0.ɵɵFactoryTarget.Directive });
BaseTransactionsContainer.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: BaseTransactionsContainer, inputs: { googleAPIKey: "googleAPIKey", selectedAccount: "selectedAccount", initialFilterOptions: "initialFilterOptions", initialSortOptions: "initialSortOptions", pageSizeValue: ["pageSize", "pageSizeValue"], maxNavPagesValue: ["maxNavPages", "maxNavPagesValue"], paginationTypeValue: ["paginationType", "paginationTypeValue"], showControlsValue: ["showControls", "showControlsValue"], showChangeCategoryValue: ["showChangeCategory", "showChangeCategoryValue"], showPendingTransactionsOnTopValue: ["showPendingTransactionsOnTop", "showPendingTransactionsOnTopValue"], showCheckImageValue: ["showCheckImage", "showCheckImageValue"], showManageNotesValue: ["showManageNotes", "showManageNotesValue"], getOrPostEndpointsValue: ["getOrPostEndpoints", "getOrPostEndpointsValue"], disputeByBillingStatusValue: ["disputeByBillingStatus", "disputeByBillingStatusValue"], disputeEligibilityDaysValue: ["disputeEligibilityDays", "disputeEligibilityDaysValue"], disputeTransactionTypesValue: ["disputeTransactionTypes", "disputeTransactionTypesValue"], enableDisputeAndInquiryValue: ["enableDisputeAndInquiry", "enableDisputeAndInquiryValue"], availableFiltersValue: ["availableFiltersConfig", "availableFiltersValue"], inquireTopicIdValue: ["inquireTopicId", "inquireTopicIdValue"], disputeTopicIdValue: ["disputeTopicId", "disputeTopicIdValue"] }, outputs: { transactionSelected: "transactionSelected", transactionsLoaded: "transactionsLoaded" }, viewQueries: [{ propertyName: "notificationErrorUpdateHeaderTemplate", first: true, predicate: ["notificationErrorUpdateHeader"], descendants: true }, { propertyName: "notificationErrorUpdateMessageTemplate", first: true, predicate: ["notificationErrorUpdateMessage"], descendants: true }, { propertyName: "notificationServerErrorHeader", first: true, predicate: ["notificationServerErrorHeader"], descendants: true }, { propertyName: "notificationServerErrorMessage", first: true, predicate: ["notificationServerErrorMessage"], descendants: true }], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BaseTransactionsContainer, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i1.TransactionsService }, { type: i2.WidgetPropertiesService }, { type: i0.ChangeDetectorRef }, { type: undefined }, { type: i3.NotificationService }, { type: i4.PendingTransactionsService }, { type: i5.TransactionDetailsService }, { type: i6.AvailableFiltersConfigService }, { type: undefined }]; }, propDecorators: { notificationErrorUpdateHeaderTemplate: [{
                type: ViewChild,
                args: ['notificationErrorUpdateHeader']
            }], notificationErrorUpdateMessageTemplate: [{
                type: ViewChild,
                args: ['notificationErrorUpdateMessage']
            }], notificationServerErrorHeader: [{
                type: ViewChild,
                args: ['notificationServerErrorHeader', { static: false }]
            }], notificationServerErrorMessage: [{
                type: ViewChild,
                args: ['notificationServerErrorMessage', { static: false }]
            }], googleAPIKey: [{
                type: Input
            }], selectedAccount: [{
                type: Input
            }], initialFilterOptions: [{
                type: Input
            }], initialSortOptions: [{
                type: Input
            }], pageSizeValue: [{
                type: Input,
                args: ['pageSize']
            }], maxNavPagesValue: [{
                type: Input,
                args: ['maxNavPages']
            }], paginationTypeValue: [{
                type: Input,
                args: ['paginationType']
            }], showControlsValue: [{
                type: Input,
                args: ['showControls']
            }], showChangeCategoryValue: [{
                type: Input,
                args: ['showChangeCategory']
            }], showPendingTransactionsOnTopValue: [{
                type: Input,
                args: ['showPendingTransactionsOnTop']
            }], showCheckImageValue: [{
                type: Input,
                args: ['showCheckImage']
            }], showManageNotesValue: [{
                type: Input,
                args: ['showManageNotes']
            }], getOrPostEndpointsValue: [{
                type: Input,
                args: ['getOrPostEndpoints']
            }], disputeByBillingStatusValue: [{
                type: Input,
                args: ['disputeByBillingStatus']
            }], disputeEligibilityDaysValue: [{
                type: Input,
                args: ['disputeEligibilityDays']
            }], disputeTransactionTypesValue: [{
                type: Input,
                args: ['disputeTransactionTypes']
            }], enableDisputeAndInquiryValue: [{
                type: Input,
                args: ['enableDisputeAndInquiry']
            }], availableFiltersValue: [{
                type: Input,
                args: ['availableFiltersConfig']
            }], inquireTopicIdValue: [{
                type: Input,
                args: ['inquireTopicId']
            }], disputeTopicIdValue: [{
                type: Input,
                args: ['disputeTopicId']
            }], transactionSelected: [{
                type: Output
            }], transactionsLoaded: [{
                type: Output
            }] } });
export class TransactionsNoAccountSelectedStateCustomizableDirective extends BbTemplate {
}
TransactionsNoAccountSelectedStateCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsNoAccountSelectedStateCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TransactionsNoAccountSelectedStateCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsNoAccountSelectedStateCustomizableDirective, selector: "[bbTransactionsNoAccountSelectedStateCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsNoAccountSelectedStateCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbTransactionsNoAccountSelectedStateCustomizable]',
                }]
        }] });
export class TransactionsErrorStateCustomizableDirective extends BbTemplate {
}
TransactionsErrorStateCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsErrorStateCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TransactionsErrorStateCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsErrorStateCustomizableDirective, selector: "[bbTransactionsErrorStateCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsErrorStateCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbTransactionsErrorStateCustomizable]',
                }]
        }] });
//# sourceMappingURL=base-transactions-container.js.map