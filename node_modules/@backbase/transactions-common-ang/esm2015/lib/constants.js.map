{"version":3,"file":"constants.js","sourceRoot":"","sources":["../../../../../../../libs/widgets/transactions/transactions-common-ang/src/lib/constants.ts"],"names":[],"mappings":"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","sourcesContent":["import { combineLatest, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { TransactionsEnumValue } from './model/transactions-enum-value.model';\nimport { TransactionsSortOptions } from './model/transactions-sort-options.model';\nimport { AvailableFilterEnum, AvailableFiltersConfig } from './model/available-filters.model';\n\n/**\n * Dropdown values for credit/debit indicator filter.\n */\nexport const creditDebitIndicatorEnumValues: Array<TransactionsEnumValue> = [\n  {\n    name: 'All',\n  },\n  {\n    value: 'CRDT',\n    name: 'Credit',\n  },\n  {\n    value: 'DBIT',\n    name: 'Debit',\n  },\n];\n\n/**\n * Fallback dropdown values for transaction type filter.\n */\nexport const defaultTransactionTypeEnumValues: Array<TransactionsEnumValue> = [\n  {\n    value: 'ATM',\n    name: 'ATM',\n  },\n  {\n    value: 'ACH',\n    name: 'Ach',\n  },\n  {\n    value: 'Bill Payment',\n    name: 'Bill Payment',\n  },\n  {\n    value: 'Cash',\n    name: 'Cash',\n  },\n  {\n    name: 'Cheques',\n    value: 'Cheques',\n  },\n  {\n    value: 'CreditDebit Card',\n    name: 'Credit/Debit Card',\n  },\n  {\n    value: 'Check',\n    name: 'Check',\n  },\n  {\n    value: 'Deposit',\n    name: 'Deposit',\n  },\n  {\n    value: 'Fee',\n    name: 'Fee',\n  },\n  {\n    value: 'POS',\n    name: 'POS',\n  },\n  {\n    value: 'Withdrawal',\n    name: 'Withdrawal',\n  },\n];\n\n/**\n * Fallback dropdown values for billing status filter.\n */\nexport const defaultBillingStatusEnumValues: Array<TransactionsEnumValue> = [\n  {\n    value: 'PENDING',\n    name: 'Pending',\n  },\n  {\n    value: 'BILLED',\n    name: 'Billed',\n  },\n  {\n    value: 'UNBILLED',\n    name: 'Unbilled',\n  },\n];\n\n/**\n * Name of different check images status\n */\nexport enum CheckImagesAvailability {\n  available = 'AVAILABLE',\n  unavailable = 'UNAVAILABLE',\n}\n\nexport enum BillingStatusEnum {\n  billed = 'BILLED',\n  unbilled = 'UNBILLED',\n  pending = 'PENDING',\n}\n\n/**\n * Name of response header that contains the total amount of results.\n */\nexport const totalCountHeader = 'X-Total-Count';\n/**\n * Name of response header that contains the available export types.\n */\nexport const availableExportTypes = 'X-Available-Export-Types';\nexport const unvailableExportTypesReasons = 'X-Unavailable-Export-Types-Reasons';\n/**\n * Name of response header that contains the sort configuration.\n */\nexport const sortFieldsDirectionHeader = 'X-Sort-Fields-Direction';\n\n/**\n * Notification time to live in ms.\n */\nexport const notificationTtl = 5000;\n\n/**\n * Which category level should be retrieved for category change modal list.\n */\nexport const categoryListLevelParam = 'PARENTS';\n\nexport const defaultAvailableFiltersConfig: AvailableFiltersConfig = {\n  'Current Account': [\n    AvailableFilterEnum.Date,\n    AvailableFilterEnum.CreditDebitIndicator,\n    AvailableFilterEnum.Amount,\n    AvailableFilterEnum.Types,\n    AvailableFilterEnum.BillingStatus,\n    AvailableFilterEnum.CheckSerialNumber,\n  ],\n  'Savings Account': [\n    AvailableFilterEnum.Date,\n    AvailableFilterEnum.CreditDebitIndicator,\n    AvailableFilterEnum.Amount,\n    AvailableFilterEnum.Types,\n    AvailableFilterEnum.BillingStatus,\n    AvailableFilterEnum.CheckSerialNumber,\n  ],\n  'Credit Card': [\n    AvailableFilterEnum.Date,\n    AvailableFilterEnum.CreditDebitIndicator,\n    AvailableFilterEnum.Amount,\n    AvailableFilterEnum.Types,\n    AvailableFilterEnum.BillingStatus,\n  ],\n  Loan: [AvailableFilterEnum.Date, AvailableFilterEnum.CreditDebitIndicator, AvailableFilterEnum.Amount],\n  'Term Deposit': [AvailableFilterEnum.Date, AvailableFilterEnum.CreditDebitIndicator, AvailableFilterEnum.Amount],\n  'Debit Card': [AvailableFilterEnum.Date, AvailableFilterEnum.CreditDebitIndicator, AvailableFilterEnum.Amount],\n  'Investment Account': [\n    AvailableFilterEnum.Date,\n    AvailableFilterEnum.CreditDebitIndicator,\n    AvailableFilterEnum.Amount,\n  ],\n  defaultFilters: [AvailableFilterEnum.Date, AvailableFilterEnum.CreditDebitIndicator, AvailableFilterEnum.Amount],\n};\n\nexport const deserialize = (propertyValue: string) => {\n  const params = propertyValue.split('&');\n\n  return params.reduce((acc: object, param: string) => {\n    const [key, val] = param.split('=');\n\n    return {\n      ...acc,\n      [decodeURIComponent(key)]: decodeURIComponent(val),\n    };\n  }, {});\n};\n\nexport const parseSortOptions = (propertyValue: string): TransactionsSortOptions | undefined => {\n  if (!propertyValue.length) {\n    return undefined;\n  }\n\n  const sortOption = propertyValue\n    .split(',')[0]\n    .trim()\n    .replace(/\\s{2,}/g, ' ');\n\n  const [orderBy, direction] = sortOption.split(' ');\n\n  if (!orderBy || (direction !== 'ASC' && direction !== 'DESC')) {\n    throw new Error(\n      `Invalid value for \"initialSortOptions\" property.\n      Please use \"<orderBy> <direction>\" format, e.g., \"bookingDate DESC\", or leave it empty.`,\n    );\n  }\n\n  return {\n    orderBy,\n    direction,\n  };\n};\n\nexport const filterInputParameters = <T>(input: Observable<T | undefined>, prop: Observable<T>): Observable<T> =>\n  combineLatest([input, prop]).pipe(map(([inputVal, propVal]) => inputVal ?? propVal));\n\nexport const b64Encode = (str: string) =>\n  btoa(\n    encodeURIComponent(str).replace(/%([0-9A-F]{2})/g, function (_match, p1) {\n      return String.fromCharCode(parseInt(p1, 16));\n    }),\n  );\n\nexport const truncateDate = (date: Date) => new Date(date.getFullYear(), date.getMonth(), date.getDate());\n\nexport const daysDiff = (date1: Date | string, date2: Date | string) => {\n  const diff = truncateDate(new Date(date1)).getTime() - truncateDate(new Date(date2)).getTime();\n\n  return Math.ceil(diff / (1000 * 3600 * 24));\n};\n"]}