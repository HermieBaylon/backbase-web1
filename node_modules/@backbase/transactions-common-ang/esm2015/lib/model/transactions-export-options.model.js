export var TransactionsExportErrorType;
(function (TransactionsExportErrorType) {
    TransactionsExportErrorType["MIXED_PRODUCT_KINDS"] = "MIXED_PRODUCT_KINDS";
    TransactionsExportErrorType["UNSUPPORTED_PRODUCT_KIND"] = "UNSUPPORTED_PRODUCT_KIND";
    TransactionsExportErrorType["TOO_MANY_ITEMS"] = "TOO_MANY_ITEMS";
    TransactionsExportErrorType["MULTIPLE_PRODUCTS"] = "MULTIPLE_PRODUCTS";
    TransactionsExportErrorType["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
})(TransactionsExportErrorType || (TransactionsExportErrorType = {}));
export function combineExportTypesConfig(exportConfig) {
    let exportTypesArr = [];
    const { availableExportTypesHeader = '', unavailableExportTypesReasonsHeader } = exportConfig;
    const availableExportTypesArray = availableExportTypesHeader.split(',');
    const availableTypes = availableExportTypesArray
        .filter((name) => name !== '')
        .map((name) => ({
        name,
        reason: undefined,
        isAvailable: true,
    }));
    if (unavailableExportTypesReasonsHeader) {
        const unavailableTypes = Object.keys(unavailableExportTypesReasonsHeader).map((name) => {
            if (unavailableExportTypesReasonsHeader && Array.isArray(unavailableExportTypesReasonsHeader[name])) {
                return {
                    name,
                    reason: unavailableExportTypesReasonsHeader[name][0],
                    isAvailable: false,
                };
            }
            return {
                name,
                reason: TransactionsExportErrorType.UNKNOWN_ERROR,
                isAvailable: false,
            };
        });
        exportTypesArr = [...availableTypes, ...unavailableTypes];
    }
    else {
        exportTypesArr = [...availableTypes];
    }
    return [...exportTypesArr].sort((left, right) => {
        if (left.name === right.name) {
            return 0;
        }
        return left.name > right.name ? 1 : -1;
    });
}
//# sourceMappingURL=transactions-export-options.model.js.map