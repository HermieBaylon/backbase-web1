{"version":3,"file":"transactions-export-options.model.js","sourceRoot":"","sources":["../../../../../../../../libs/widgets/transactions/transactions-common-ang/src/lib/model/transactions-export-options.model.ts"],"names":[],"mappings":"AAoBA,MAAM,CAAN,IAAY,2BAMX;AAND,WAAY,2BAA2B;IACrC,0EAA2C,CAAA;IAC3C,oFAAqD,CAAA;IACrD,gEAAiC,CAAA;IACjC,sEAAuC,CAAA;IACvC,8DAA+B,CAAA;AACjC,CAAC,EANW,2BAA2B,KAA3B,2BAA2B,QAMtC;AAWD,MAAM,UAAU,wBAAwB,CAAC,YAAsC;IAC7E,IAAI,cAAc,GAAG,EAAE,CAAC;IACxB,MAAM,EAAE,0BAA0B,GAAG,EAAE,EAAE,mCAAmC,EAAE,GAAG,YAAY,CAAC;IAC9F,MAAM,yBAAyB,GAAG,0BAA0B,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACxE,MAAM,cAAc,GAAG,yBAAyB;SAC7C,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,KAAK,EAAE,CAAC;SAC7B,GAAG,CAAC,CAAC,IAAY,EAAE,EAAE,CAAC,CAAC;QACtB,IAAI;QACJ,MAAM,EAAE,SAAS;QACjB,WAAW,EAAE,IAAI;KAClB,CAAC,CAAC,CAAC;IAEN,IAAI,mCAAmC,EAAE;QACvC,MAAM,gBAAgB,GAAG,MAAM,CAAC,IAAI,CAAC,mCAAmC,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE;YACrF,IAAI,mCAAmC,IAAI,KAAK,CAAC,OAAO,CAAC,mCAAmC,CAAC,IAAI,CAAC,CAAC,EAAE;gBACnG,OAAO;oBACL,IAAI;oBACJ,MAAM,EAAE,mCAAmC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oBACpD,WAAW,EAAE,KAAK;iBACnB,CAAC;aACH;YAED,OAAO;gBACL,IAAI;gBACJ,MAAM,EAAE,2BAA2B,CAAC,aAAa;gBACjD,WAAW,EAAE,KAAK;aACnB,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,cAAc,GAAG,CAAC,GAAG,cAAc,EAAE,GAAG,gBAAgB,CAAC,CAAC;KAC3D;SAAM;QACL,cAAc,GAAG,CAAC,GAAG,cAAc,CAAC,CAAC;KACtC;IAED,OAAO,CAAC,GAAG,cAAc,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE;QAC9C,IAAI,IAAI,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI,EAAE;YAC5B,OAAO,CAAC,CAAC;SACV;QAED,OAAO,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACzC,CAAC,CAAC,CAAC;AACL,CAAC","sourcesContent":["import { TransactionsAccountOptions } from './transactions-account-options.model';\nimport { TransactionsFilterOptions } from './transactions-filter-options.model';\nimport { TransactionsSearchOptions } from './transactions-search-options.model';\nimport { TransactionsSortOptions } from './transactions-sort-options.model';\n\nexport interface TransactionsExportOptions {\n  account: TransactionsAccountOptions;\n  search?: TransactionsSearchOptions;\n  filter?: TransactionsFilterOptions;\n  sort?: TransactionsSortOptions;\n  exportType: string;\n  locale: string;\n}\n\nexport interface TransactionsExportTypeElement {\n  name: string;\n  reason?: TransactionsExportErrorType;\n  isAvailable: boolean;\n}\n\nexport enum TransactionsExportErrorType {\n  MIXED_PRODUCT_KINDS = 'MIXED_PRODUCT_KINDS',\n  UNSUPPORTED_PRODUCT_KIND = 'UNSUPPORTED_PRODUCT_KIND',\n  TOO_MANY_ITEMS = 'TOO_MANY_ITEMS',\n  MULTIPLE_PRODUCTS = 'MULTIPLE_PRODUCTS',\n  UNKNOWN_ERROR = 'UNKNOWN_ERROR',\n}\n\nexport interface UnavailableExportTypeReasons {\n  [reason: string]: TransactionsExportErrorType[];\n}\n\nexport interface TransactionsExportConfig {\n  availableExportTypesHeader?: string;\n  unavailableExportTypesReasonsHeader?: UnavailableExportTypeReasons;\n}\n\nexport function combineExportTypesConfig(exportConfig: TransactionsExportConfig): TransactionsExportTypeElement[] {\n  let exportTypesArr = [];\n  const { availableExportTypesHeader = '', unavailableExportTypesReasonsHeader } = exportConfig;\n  const availableExportTypesArray = availableExportTypesHeader.split(',');\n  const availableTypes = availableExportTypesArray\n    .filter((name) => name !== '')\n    .map((name: string) => ({\n      name,\n      reason: undefined,\n      isAvailable: true,\n    }));\n\n  if (unavailableExportTypesReasonsHeader) {\n    const unavailableTypes = Object.keys(unavailableExportTypesReasonsHeader).map((name) => {\n      if (unavailableExportTypesReasonsHeader && Array.isArray(unavailableExportTypesReasonsHeader[name])) {\n        return {\n          name,\n          reason: unavailableExportTypesReasonsHeader[name][0],\n          isAvailable: false,\n        };\n      }\n\n      return {\n        name,\n        reason: TransactionsExportErrorType.UNKNOWN_ERROR,\n        isAvailable: false,\n      };\n    });\n\n    exportTypesArr = [...availableTypes, ...unavailableTypes];\n  } else {\n    exportTypesArr = [...availableTypes];\n  }\n\n  return [...exportTypesArr].sort((left, right) => {\n    if (left.name === right.name) {\n      return 0;\n    }\n\n    return left.name > right.name ? 1 : -1;\n  });\n}\n"]}