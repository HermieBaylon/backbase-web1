import { switchMap, publishReplay, refCount } from 'rxjs/operators';
import { OnLoadAction } from './transactions-list-options.model';
import { TransactionsList } from './transactions-list.model';
export const deepEqual = (x, y) => {
    const ok = Object.keys;
    const tx = typeof x;
    const ty = typeof y;
    return x && y && tx === 'object' && tx === ty
        ? ok(x).length === ok(y).length && ok(x).every((key) => deepEqual(x[key], y[key]))
        : x === y;
};
export const cacheRequest = (request) => (source) => source.pipe(switchMap(request), publishReplay(1), refCount());
export const multipleAccountsPredicate = (listOptions) => () => Array.isArray(listOptions.account.arrangementId) && listOptions.account.arrangementId.length > 1;
export const onLoadTransactions = (acc, curr) => curr.onLoad === OnLoadAction.Append ? TransactionsList.concat(acc, curr.transactionsList) : curr.transactionsList;
export const getNameFromContentDispositionHeader = (response) => {
    const contentDisposition = response.headers.get('Content-Disposition');
    let fileName = '';
    if (contentDisposition) {
        const result = /filename[^;=\n]*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/i.exec(contentDisposition);
        fileName = result ? result[2] : '';
    }
    return fileName;
};
//# sourceMappingURL=transactions-list-utils.model.js.map