{"version":3,"file":"transactions-backend-error.model.js","sourceRoot":"","sources":["../../../../../../../../libs/widgets/transactions/transactions-common-ang/src/lib/model/transactions-backend-error.model.ts"],"names":[],"mappings":"AAWA,gCAAgC;AAChC,2DAA2D;AAC3D,MAAM,KAAW,wBAAwB,CAyDxC;AAzDD,WAAiB,wBAAwB;IACvC,MAAM,sBAAsB,GAAG,CAAC,KAAwB,EAAwB,EAAE;QAChF,MAAM,YAAY,GAAG,KAAK,CAAC,KAAK,CAAC;QACjC,IAAI,KAAK,CAAC,OAAO,CAAC,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,MAAM,CAAC,EAAE;YACvC,OAAO,YAAY,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAA8B,EAAE,EAAE;gBAChE,MAAM,EAAE,OAAO,GAAG,EAAE,EAAE,GAAG,IAAI,CAAC;gBAC9B,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,2BAA2B,EAAE,CAAC,KAAK,EAAE,EAAE;oBAC1E,MAAM,MAAM,GAAG,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC,CAAC;oBAErD,OAAO,MAAM,KAAK,SAAS,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC;gBAC/C,CAAC,CAAC,CAAC;gBAEH,OAAO,SAAS,KAAK,CAAC,MAAM,KAAK,OAAO,EAAE,CAAC;YAC7C,CAAC,CAAC,CAAC;SACJ;aAAM;YACL,OAAO,SAAS,CAAC;SAClB;IACH,CAAC,CAAC;IACF,+BAA+B;IAC/B;;;;;;;;OAQG;IACU,8CAAqB,GAAG,CAAC,aAAgC,EAA4B,EAAE;QAClG,IAAI,aAAa,CAAC,KAAK,YAAY,UAAU,EAAE;YAC7C,gCAAgC;YAChC,OAAO;gBACL,OAAO,EAAE,8BAA8B;aACxC,CAAC;SACH;aAAM;YACL,MAAM,KAAK,GAAG,sBAAsB,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC;YAE1D,OAAO;gBACL,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC,IAAI,SAAS,aAAa,CAAC,MAAM,EAAE;aACrD,CAAC;SACH;IACH,CAAC,CAAC;IAEW,+CAAsB,GAAG,CAAC,aAAgC,EAA8B,EAAE;QACrG,IAAI,aAAa,CAAC,KAAK,YAAY,UAAU,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE;YACtE,gCAAgC;YAChC,OAAO;gBACL;oBACE,OAAO,EAAE,8BAA8B;iBACxC;aACF,CAAC;SACH;aAAM;YACL,MAAM,MAAM,GAAG,sBAAsB,CAAC,aAAa,CAAC,IAAI,CAAC,SAAS,aAAa,CAAC,MAAM,EAAE,CAAC,CAAC;YAE1F,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;SAC/C;IACH,CAAC,CAAC;AACJ,CAAC,EAzDgB,wBAAwB,KAAxB,wBAAwB,QAyDxC","sourcesContent":["import { HttpErrorResponse } from '@angular/common/http';\n\n/**\n * This interface is used by the template to display what is wrong to the user.\n */\nexport interface TransactionsBackendError {\n  message: string;\n  key?: string;\n  context?: { [key: string]: string };\n}\n\n/* eslint-disable no-redeclare*/\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace TransactionsBackendError {\n  const getMessageFromResponse = (error: HttpErrorResponse): string[] | undefined => {\n    const responseBody = error.error;\n    if (Array.isArray(responseBody?.errors)) {\n      return responseBody.errors.map((data: TransactionsBackendError) => {\n        const { context = {} } = data;\n        const message = data.message.replace(/{[_a-zA-Z][_a-zA-Z0-9]*}/g, (match) => {\n          const result = context[match.replace(/[{}']+/g, '')];\n\n          return result !== undefined ? result : match;\n        });\n\n        return `Error ${error.status}: ${message}`;\n      });\n    } else {\n      return undefined;\n    }\n  };\n  /* eslint-enable no-redeclare*/\n  /**\n   * @name fromHttpErrorResponse\n   * @param errorResponse The error response\n   * @returns An object containing a user-friendly error message\n   *\n   * @description\n   * Parse an HttpErrorResponse and return a TransactionsError object that can be used to display a\n   * user-friendly error message.\n   */\n  export const fromHttpErrorResponse = (errorResponse: HttpErrorResponse): TransactionsBackendError => {\n    if (errorResponse.error instanceof ErrorEvent) {\n      // Client-side or network error.\n      return {\n        message: 'An unexpected error occurred',\n      };\n    } else {\n      const error = getMessageFromResponse(errorResponse) || [];\n\n      return {\n        message: error[0] || `Error ${errorResponse.status}`,\n      };\n    }\n  };\n\n  export const fromHttpErrorsResponse = (errorResponse: HttpErrorResponse): TransactionsBackendError[] => {\n    if (errorResponse.error instanceof ErrorEvent || !errorResponse.status) {\n      // Client-side or network error.\n      return [\n        {\n          message: 'An unexpected error occurred',\n        },\n      ];\n    } else {\n      const errors = getMessageFromResponse(errorResponse) || [`Error ${errorResponse.status}`];\n\n      return errors.map((message) => ({ message }));\n    }\n  };\n}\n"]}