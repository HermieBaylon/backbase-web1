/* eslint-disable no-redeclare*/
// eslint-disable-next-line @typescript-eslint/no-namespace
export var TransactionsBackendError;
(function (TransactionsBackendError) {
    const getMessageFromResponse = (error) => {
        const responseBody = error.error;
        if (Array.isArray(responseBody === null || responseBody === void 0 ? void 0 : responseBody.errors)) {
            return responseBody.errors.map((data) => {
                const { context = {} } = data;
                const message = data.message.replace(/{[_a-zA-Z][_a-zA-Z0-9]*}/g, (match) => {
                    const result = context[match.replace(/[{}']+/g, '')];
                    return result !== undefined ? result : match;
                });
                return `Error ${error.status}: ${message}`;
            });
        }
        else {
            return undefined;
        }
    };
    /* eslint-enable no-redeclare*/
    /**
     * @name fromHttpErrorResponse
     * @param errorResponse The error response
     * @returns An object containing a user-friendly error message
     *
     * @description
     * Parse an HttpErrorResponse and return a TransactionsError object that can be used to display a
     * user-friendly error message.
     */
    TransactionsBackendError.fromHttpErrorResponse = (errorResponse) => {
        if (errorResponse.error instanceof ErrorEvent) {
            // Client-side or network error.
            return {
                message: 'An unexpected error occurred',
            };
        }
        else {
            const error = getMessageFromResponse(errorResponse) || [];
            return {
                message: error[0] || `Error ${errorResponse.status}`,
            };
        }
    };
    TransactionsBackendError.fromHttpErrorsResponse = (errorResponse) => {
        if (errorResponse.error instanceof ErrorEvent || !errorResponse.status) {
            // Client-side or network error.
            return [
                {
                    message: 'An unexpected error occurred',
                },
            ];
        }
        else {
            const errors = getMessageFromResponse(errorResponse) || [`Error ${errorResponse.status}`];
            return errors.map((message) => ({ message }));
        }
    };
})(TransactionsBackendError || (TransactionsBackendError = {}));
//# sourceMappingURL=transactions-backend-error.model.js.map