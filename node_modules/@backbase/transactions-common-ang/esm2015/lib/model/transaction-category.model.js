export var TransactionIconType;
(function (TransactionIconType) {
    TransactionIconType[TransactionIconType["category"] = 1] = "category";
    TransactionIconType[TransactionIconType["type"] = 2] = "type";
    TransactionIconType[TransactionIconType["creditDebit"] = 3] = "creditDebit";
})(TransactionIconType || (TransactionIconType = {}));
export class BaseTransactionIcon {
    cleanClassName(text) {
        const result = text.toLowerCase().replace(/\W/g, '-').replace(/-{2,}/g, '-');
        if (result.endsWith('-')) {
            return result.slice(0, -1);
        }
        else {
            return result;
        }
    }
    throwIfIncorrect() {
        if (!this.isValid) {
            throw new Error(`Invalid transaction provided to ${this.constructor.name}`);
        }
    }
    constructor() {
        this.throwIfIncorrect();
    }
}
export class TransactionCategoryIcon extends BaseTransactionIcon {
    constructor(transaction) {
        super();
        this.transaction = transaction;
    }
    get title() {
        return !this.transaction.isPending ? this.transaction.category || '' : 'pending';
    }
    get type() {
        return TransactionIconType.category;
    }
    isValid() {
        return this.transaction.isPending || (this.transaction !== undefined && this.transaction.category !== undefined);
    }
    formatClassName() {
        return `bb-transaction-category-${this.cleanClassName(this.transaction.category || 'pending')}`;
    }
}
export class TransactionTypeIcon extends BaseTransactionIcon {
    constructor(transaction) {
        super();
        this.transaction = transaction;
    }
    get title() {
        return this.transaction.type || '';
    }
    get type() {
        return TransactionIconType.type;
    }
    isValid() {
        return !!this.transaction && !!this.transaction.type;
    }
    formatClassName() {
        return this.transaction.type ? `bb-icon-transaction-type-${this.cleanClassName(this.transaction.type)}` : '';
    }
}
export class TransactionCreditDebitIcon extends BaseTransactionIcon {
    constructor(transaction) {
        super();
        this.transaction = transaction;
    }
    get title() {
        return this.indicator;
    }
    get type() {
        return TransactionIconType.creditDebit;
    }
    formatClassName() {
        return this.transaction.transactionAmountCurrency
            ? `bb-icon-credit-debit-indicator-${this.cleanClassName(this.indicator)}`
            : '';
    }
    get indicator() {
        if (this.transaction.transactionAmountCurrency) {
            return parseInt(this.transaction.transactionAmountCurrency.amount, 10) > 0 ? 'incoming' : 'outgoing';
        }
        return '';
    }
    isValid() {
        return this.transaction !== undefined && this.transaction.transactionAmountCurrency !== undefined;
    }
}
//# sourceMappingURL=transaction-category.model.js.map