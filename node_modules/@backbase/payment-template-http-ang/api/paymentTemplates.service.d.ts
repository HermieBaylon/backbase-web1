import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { PaymentTemplate } from '../model/models';
import { PaymentTemplatesPostRequest } from '../model/models';
import { PaymentTemplatesPostResponse } from '../model/models';
import { PaymentTemplatesPutRequest } from '../model/models';
import { PaymentTemplatesPutResponse } from '../model/models';
import { PaymentTemplateConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface DeletePaymentTemplateIdByPaymentTemplateIdRequestParams {
    ["paymentTemplateId"]: string;
}
export interface GetPaymentTemplatesRequestParams {
    ["query"]?: string;
    ["intendedAction"]?: 'CREATE' | 'VIEW';
    ["paymentType"]?: string;
    ["from"]?: number;
    ["size"]?: number;
}
export interface PostPaymentTemplatesRequestParams {
    ["paymentTemplatesPostRequest"]: PaymentTemplatesPostRequest;
}
export interface PutPaymentTemplateByIdRequestParams {
    ["paymentTemplateId"]: string;
    ["paymentTemplatesPutRequest"]: PaymentTemplatesPutRequest;
}
export declare class PaymentTemplatesHttpService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: PaymentTemplateConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: PaymentTemplateConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    deletePaymentTemplateIdByPaymentTemplateId(requestParameters: DeletePaymentTemplateIdByPaymentTemplateIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    deletePaymentTemplateIdByPaymentTemplateId(requestParameters: DeletePaymentTemplateIdByPaymentTemplateIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    deletePaymentTemplateIdByPaymentTemplateId(requestParameters: DeletePaymentTemplateIdByPaymentTemplateIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    deletePaymentTemplateIdByPaymentTemplateIdUrl(requestParameters: DeletePaymentTemplateIdByPaymentTemplateIdRequestParams): string;
    getPaymentTemplates(requestParameters: GetPaymentTemplatesRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<PaymentTemplate>>;
    getPaymentTemplates(requestParameters: GetPaymentTemplatesRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<PaymentTemplate>>>;
    getPaymentTemplates(requestParameters: GetPaymentTemplatesRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<PaymentTemplate>>>;
    getPaymentTemplatesUrl(requestParameters: GetPaymentTemplatesRequestParams): string;
    postPaymentTemplates(requestParameters: PostPaymentTemplatesRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<PaymentTemplatesPostResponse>;
    postPaymentTemplates(requestParameters: PostPaymentTemplatesRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<PaymentTemplatesPostResponse>>;
    postPaymentTemplates(requestParameters: PostPaymentTemplatesRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<PaymentTemplatesPostResponse>>;
    postPaymentTemplatesUrl(requestParameters: PostPaymentTemplatesRequestParams): string;
    putPaymentTemplateById(requestParameters: PutPaymentTemplateByIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<PaymentTemplatesPutResponse>;
    putPaymentTemplateById(requestParameters: PutPaymentTemplateByIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<PaymentTemplatesPutResponse>>;
    putPaymentTemplateById(requestParameters: PutPaymentTemplateByIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<PaymentTemplatesPutResponse>>;
    putPaymentTemplateByIdUrl(requestParameters: PutPaymentTemplateByIdRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<PaymentTemplatesHttpService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<PaymentTemplatesHttpService>;
}
