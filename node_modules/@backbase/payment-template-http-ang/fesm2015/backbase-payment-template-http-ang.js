import * as i0 from '@angular/core';
import { InjectionToken, NgModule, Optional, SkipSelf, Injectable, Inject } from '@angular/core';
import * as i1 from '@angular/common/http';
import { HttpHeaders, HttpParams } from '@angular/common/http';
import * as i2 from '@backbase/foundation-ang/data-http';
import { createMocks } from '@backbase/foundation-ang/data-http';

const Action = {
    CREATE: 'CREATE',
    VIEW: 'VIEW'
};

const ChargeBearer = {
    OUR: 'OUR',
    BEN: 'BEN',
    SHA: 'SHA'
};

const InstructionPriority = {
    NORM: 'NORM',
    HIGH: 'HIGH'
};

const InvolvedPartyRole = {
    CREDITOR: 'CREDITOR',
    DEBTOR: 'DEBTOR'
};

const SchemeNames = {
    IBAN: 'IBAN',
    BBAN: 'BBAN',
    ID: 'ID',
    EXTERNALID: 'EXTERNAL_ID',
    EMAIL: 'EMAIL',
    MOBILE: 'MOBILE'
};

const PAYMENT_TEMPLATE_BASE_PATH = new InjectionToken('PAYMENT_TEMPLATE_BASE_PATH');
const COLLECTION_FORMATS = {
    'csv': ',',
    'tsv': '   ',
    'ssv': ' ',
    'pipes': '|'
};

class PaymentTemplateConfiguration {
    constructor(configurationParameters = {}) {
        this.apiKeys = configurationParameters.apiKeys;
        this.username = configurationParameters.username;
        this.password = configurationParameters.password;
        this.accessToken = configurationParameters.accessToken;
        this.basePath = configurationParameters.basePath;
        this.withCredentials = configurationParameters.withCredentials;
        this.encoder = configurationParameters.encoder;
        if (configurationParameters.credentials) {
            this.credentials = configurationParameters.credentials;
        }
        else {
            this.credentials = {};
        }
    }
    selectHeaderContentType(contentTypes) {
        if (contentTypes.length === 0) {
            return undefined;
        }
        const type = contentTypes.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return contentTypes[0];
        }
        return type;
    }
    selectHeaderAccept(accepts) {
        if (accepts.length === 0) {
            return undefined;
        }
        const type = accepts.find((x) => this.isJsonMime(x));
        if (type === undefined) {
            return accepts[0];
        }
        return type;
    }
    isJsonMime(mime) {
        const jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
    }
    lookupCredential(key) {
        const value = this.credentials[key];
        return typeof value === 'function'
            ? value()
            : value;
    }
}
const CONFIG_TOKEN = new InjectionToken('api-data-module PaymentTemplateConfiguration');

class PaymentTemplateApiModule {
    constructor(parentModule, http, dataModulesManager, config) {
        if (parentModule) {
            throw new Error('PaymentTemplateApiModule is already loaded. Import in your base AppModule only.');
        }
        if (!http) {
            throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                'See also https://github.com/angular/angular/issues/20575');
        }
        if (dataModulesManager) {
            dataModulesManager.setModuleConfig(CONFIG_TOKEN, {
                apiRoot: '',
                servicePath: config.basePath || '',
                headers: {},
            });
        }
    }
    static forRoot(configurationFactory) {
        return {
            ngModule: PaymentTemplateApiModule,
            providers: [{ provide: PaymentTemplateConfiguration, useFactory: configurationFactory }]
        };
    }
}
PaymentTemplateApiModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentTemplateApiModule, deps: [{ token: PaymentTemplateApiModule, optional: true, skipSelf: true }, { token: i1.HttpClient, optional: true }, { token: i2.DataModulesManager, optional: true }, { token: PaymentTemplateConfiguration }], target: i0.ɵɵFactoryTarget.NgModule });
PaymentTemplateApiModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentTemplateApiModule });
PaymentTemplateApiModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentTemplateApiModule, providers: [], imports: [[]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentTemplateApiModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [],
                    declarations: [],
                    exports: [],
                    providers: []
                }]
        }], ctorParameters: function () { return [{ type: PaymentTemplateApiModule, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }] }, { type: i1.HttpClient, decorators: [{
                    type: Optional
                }] }, { type: i2.DataModulesManager, decorators: [{
                    type: Optional
                }] }, { type: PaymentTemplateConfiguration }]; } });

class CustomHttpParameterCodec {
    encodeKey(k) {
        return encodeURIComponent(k);
    }
    encodeValue(v) {
        return encodeURIComponent(v);
    }
    decodeKey(k) {
        return decodeURIComponent(k);
    }
    decodeValue(v) {
        return decodeURIComponent(v);
    }
}

class PaymentTemplatesHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new PaymentTemplateConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    deletePaymentTemplateIdByPaymentTemplateId(requestParameters, observe = 'body', reportProgress = false, options) {
        const _paymentTemplateId = requestParameters["paymentTemplateId"];
        if (_paymentTemplateId === null || _paymentTemplateId === undefined) {
            throw new Error('Required parameter paymentTemplateId was null or undefined when calling deletePaymentTemplateIdByPaymentTemplateId.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.delete(`${this.configuration.basePath}/client-api/v2/payment-templates/${encodeURIComponent(String(_paymentTemplateId))}`, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    deletePaymentTemplateIdByPaymentTemplateIdUrl(requestParameters) {
        const _paymentTemplateId = requestParameters["paymentTemplateId"];
        if (_paymentTemplateId === null || _paymentTemplateId === undefined) {
            throw new Error('Required parameter paymentTemplateId was null or undefined when calling deletePaymentTemplateIdByPaymentTemplateId.');
        }
        return `${this.configuration.basePath}/client-api/v2/payment-templates/${encodeURIComponent(String(_paymentTemplateId))}`;
    }
    getPaymentTemplates(requestParameters, observe = 'body', reportProgress = false, options) {
        const _query = requestParameters["query"];
        const _intendedAction = requestParameters["intendedAction"];
        const _paymentType = requestParameters["paymentType"];
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_query !== undefined && _query !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
        }
        if (_intendedAction !== undefined && _intendedAction !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _intendedAction, 'intendedAction');
        }
        if (_paymentType !== undefined && _paymentType !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _paymentType, 'paymentType');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/payment-templates`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getPaymentTemplatesUrl(requestParameters) {
        const _query = requestParameters["query"];
        const _intendedAction = requestParameters["intendedAction"];
        const _paymentType = requestParameters["paymentType"];
        const _from = requestParameters["from"];
        const _size = requestParameters["size"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_query !== undefined && _query !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _query, 'query');
        }
        if (_intendedAction !== undefined && _intendedAction !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _intendedAction, 'intendedAction');
        }
        if (_paymentType !== undefined && _paymentType !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _paymentType, 'paymentType');
        }
        if (_from !== undefined && _from !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _from, 'from');
        }
        if (_size !== undefined && _size !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _size, 'size');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/payment-templates${queryString ? `?${queryString}` : ''}`;
    }
    postPaymentTemplates(requestParameters, observe = 'body', reportProgress = false, options) {
        const _paymentTemplatesPostRequest = requestParameters["paymentTemplatesPostRequest"];
        if (_paymentTemplatesPostRequest === null || _paymentTemplatesPostRequest === undefined) {
            throw new Error('Required parameter paymentTemplatesPostRequest was null or undefined when calling postPaymentTemplates.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.post(`${this.configuration.basePath}/client-api/v2/payment-templates`, _paymentTemplatesPostRequest, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    postPaymentTemplatesUrl(requestParameters) {
        const _paymentTemplatesPostRequest = requestParameters["paymentTemplatesPostRequest"];
        if (_paymentTemplatesPostRequest === null || _paymentTemplatesPostRequest === undefined) {
            throw new Error('Required parameter paymentTemplatesPostRequest was null or undefined when calling postPaymentTemplates.');
        }
        return `${this.configuration.basePath}/client-api/v2/payment-templates`;
    }
    putPaymentTemplateById(requestParameters, observe = 'body', reportProgress = false, options) {
        const _paymentTemplateId = requestParameters["paymentTemplateId"];
        if (_paymentTemplateId === null || _paymentTemplateId === undefined) {
            throw new Error('Required parameter paymentTemplateId was null or undefined when calling putPaymentTemplateById.');
        }
        const _paymentTemplatesPutRequest = requestParameters["paymentTemplatesPutRequest"];
        if (_paymentTemplatesPutRequest === null || _paymentTemplatesPutRequest === undefined) {
            throw new Error('Required parameter paymentTemplatesPutRequest was null or undefined when calling putPaymentTemplateById.');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        const consumes = [
            'application/json'
        ];
        const httpContentTypeSelected = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.put(`${this.configuration.basePath}/client-api/v2/payment-templates/${encodeURIComponent(String(_paymentTemplateId))}`, _paymentTemplatesPutRequest, {
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    putPaymentTemplateByIdUrl(requestParameters) {
        const _paymentTemplateId = requestParameters["paymentTemplateId"];
        if (_paymentTemplateId === null || _paymentTemplateId === undefined) {
            throw new Error('Required parameter paymentTemplateId was null or undefined when calling putPaymentTemplateById.');
        }
        const _paymentTemplatesPutRequest = requestParameters["paymentTemplatesPutRequest"];
        if (_paymentTemplatesPutRequest === null || _paymentTemplatesPutRequest === undefined) {
            throw new Error('Required parameter paymentTemplatesPutRequest was null or undefined when calling putPaymentTemplateById.');
        }
        return `${this.configuration.basePath}/client-api/v2/payment-templates/${encodeURIComponent(String(_paymentTemplateId))}`;
    }
}
PaymentTemplatesHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentTemplatesHttpService, deps: [{ token: i1.HttpClient }, { token: PAYMENT_TEMPLATE_BASE_PATH, optional: true }, { token: PaymentTemplateConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
PaymentTemplatesHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentTemplatesHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentTemplatesHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [PAYMENT_TEMPLATE_BASE_PATH]
                }] }, { type: PaymentTemplateConfiguration, decorators: [{
                    type: Optional
                }] }]; } });

const PaymentTemplatesHttpServiceDeletePaymentTemplateIdByPaymentTemplateIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/payment-templates/{paymentTemplateId}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    }]);
const PaymentTemplatesHttpServiceGetPaymentTemplatesMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/payment-templates",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "id": "7d341c28-6714-11e7-907b-a6006ad3dba0",
                        "name": "Textile supplier invoice",
                        "createdAt": "2020-04-12T14:33:13.452Z",
                        "serviceAgreementId": "d6fdc581-1306-412a-9e40-86d851190acf",
                        "details": {
                            "paymentType": "SEPA_CREDIT_TRANSFER",
                            "originatorAccount": {
                                "arrangementId": "729190df-a421-4937-94fd-5e1a3da132cc",
                                "externalArrangementId": "729190421493794513132",
                                "identification": {
                                    "identification": "NL53RABO0309349755",
                                    "schemeName": "IBAN"
                                },
                                "name": "Smith Bonus Savings"
                            },
                            "instructionPriority": "NORM",
                            "transferTransactionInformation": {
                                "counterparty": {
                                    "name": "Backbase",
                                    "postalAddress": {
                                        "addressLine1": "Jacob Bontiusplaats 9, 1018LL, Amsterdam",
                                        "country": "NL"
                                    }
                                },
                                "counterpartyAccount": {
                                    "identification": {
                                        "identification": "FR708933019952AUNHQNQ0KZ",
                                        "schemeName": "IBAN"
                                    },
                                    "arrangementId": "fe9d66ae-b927-4ac7-8799-c5a38a596ff2",
                                    "externalArrangementId": "9669274787995385962"
                                },
                                "instructedAmount": {
                                    "amount": "5000.55",
                                    "currencyCode": "EUR"
                                },
                                "remittanceInformation": "Salary"
                            }
                        }
                    }]
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    }]);
const PaymentTemplatesHttpServicePostPaymentTemplatesMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/payment-templates",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "template": {
                        "id": "7d341c28-6714-11e7-907b-a6006ad3dba0",
                        "name": "Salary for John",
                        "createdAt": "2020-04-12T14:33:13.452Z",
                        "serviceAgreementId": "d6fdc581-1306-412a-9e40-86d851190acf",
                        "details": {
                            "paymentType": "SEPA_CREDIT_TRANSFER",
                            "originatorAccount": {
                                "arrangementId": "729190df-a421-4937-94fd-5e1a3da132cc",
                                "externalArrangementId": "729190421493794513132",
                                "identification": {
                                    "identification": "NL53RABO0309349755",
                                    "schemeName": "IBAN"
                                }
                            },
                            "instructionPriority": "NORM",
                            "transferTransactionInformation": {
                                "counterparty": {
                                    "name": "John Smith",
                                    "postalAddress": {
                                        "addressLine1": "Schippersstraat 15, 1011AZ, Amsterdam",
                                        "country": "NL"
                                    }
                                },
                                "counterpartyAccount": {
                                    "identification": {
                                        "identification": "FR708933019952AUNHQNQ0KZ",
                                        "schemeName": "IBAN"
                                    },
                                    "arrangementId": "fe9d66ae-b927-4ac7-8799-c5a38a596ff2",
                                    "externalArrangementId": "9669274787995385962"
                                },
                                "instructedAmount": {
                                    "amount": "5000.55",
                                    "currencyCode": "EUR"
                                },
                                "remittanceInformation": "Salary"
                            }
                        }
                    }
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    }]);
const PaymentTemplatesHttpServicePutPaymentTemplateByIdMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/payment-templates/{paymentTemplateId}",
        method: "PUT",
        responses: [
            {
                status: 202,
                body: {
                    "template": {
                        "id": "7d341c28-6714-11e7-907b-a6006ad3dba0",
                        "name": "Salary for John",
                        "createdAt": "2020-04-12T14:33:13.452Z",
                        "serviceAgreementId": "d6fdc581-1306-412a-9e40-86d851190acf",
                        "details": {
                            "paymentType": "SEPA_CREDIT_TRANSFER",
                            "originatorAccount": {
                                "arrangementId": "729190df-a421-4937-94fd-5e1a3da132cc",
                                "externalArrangementId": "729190421493794513132",
                                "identification": {
                                    "identification": "NL53RABO0309349755",
                                    "schemeName": "IBAN"
                                }
                            },
                            "instructionPriority": "NORM",
                            "transferTransactionInformation": {
                                "counterparty": {
                                    "name": "John Smith",
                                    "postalAddress": {
                                        "addressLine1": "Schippersstraat 15, 1011AZ, Amsterdam",
                                        "country": "NL"
                                    }
                                },
                                "counterpartyAccount": {
                                    "identification": {
                                        "identification": "FR708933019952AUNHQNQ0KZ",
                                        "schemeName": "IBAN"
                                    },
                                    "arrangementId": "fe9d66ae-b927-4ac7-8799-c5a38a596ff2",
                                    "externalArrangementId": "9669274787995385962"
                                },
                                "instructedAmount": {
                                    "amount": "5000.55",
                                    "currencyCode": "EUR"
                                },
                                "remittanceInformation": "Salary"
                            }
                        }
                    }
                }
            },
            {
                status: 202,
                body: {
                    "template": {
                        "createdAt": "2000-01-23T04:56:07.000+00:00",
                        "additions": {
                            "key": "additions"
                        },
                        "serviceAgreementId": "serviceAgreementId",
                        "name": "name",
                        "details": {
                            "transferTransactionInformation": {
                                "correspondentBank": {
                                    "bankBranchCode": "bankBranchCode",
                                    "postalAddress": {
                                        "country": "country",
                                        "streetName": "streetName",
                                        "town": "town",
                                        "countrySubDivision": "countrySubDivision",
                                        "additions": {
                                            "key": "additions"
                                        },
                                        "addressLine1": "addressLine1",
                                        "addressLine2": "addressLine2",
                                        "postCode": "postCode"
                                    },
                                    "additions": {
                                        "key": "additions"
                                    },
                                    "name": "name",
                                    "bic": "bic"
                                },
                                "counterpartyBank": {
                                    "bankBranchCode": "bankBranchCode",
                                    "postalAddress": {
                                        "country": "country",
                                        "streetName": "streetName",
                                        "town": "town",
                                        "countrySubDivision": "countrySubDivision",
                                        "additions": {
                                            "key": "additions"
                                        },
                                        "addressLine1": "addressLine1",
                                        "addressLine2": "addressLine2",
                                        "postCode": "postCode"
                                    },
                                    "additions": {
                                        "key": "additions"
                                    },
                                    "name": "name",
                                    "bic": "bic"
                                },
                                "targetCurrency": "targetCurrency",
                                "additions": {
                                    "key": "additions"
                                },
                                "purposeOfPayment": {
                                    "code": "code",
                                    "additions": {
                                        "key": "additions"
                                    },
                                    "freeText": "freeText",
                                    "description": "description"
                                },
                                "counterpartyAccount": {
                                    "accountType": "accountType",
                                    "selectedContact": {
                                        "accountId": "accountId",
                                        "additions": {
                                            "key": "additions"
                                        },
                                        "contactId": "contactId"
                                    }
                                },
                                "intermediaryBank": {
                                    "bankBranchCode": "bankBranchCode",
                                    "postalAddress": {
                                        "country": "country",
                                        "streetName": "streetName",
                                        "town": "town",
                                        "countrySubDivision": "countrySubDivision",
                                        "additions": {
                                            "key": "additions"
                                        },
                                        "addressLine1": "addressLine1",
                                        "addressLine2": "addressLine2",
                                        "postCode": "postCode"
                                    },
                                    "additions": {
                                        "key": "additions"
                                    },
                                    "name": "name",
                                    "bic": "bic"
                                },
                                "mandateIdentifier": "mandateIdentifier",
                                "remittanceInformation": "remittanceInformation",
                                "messageToBank": "messageToBank",
                                "counterparty": {
                                    "postalAddress": {
                                        "country": "country",
                                        "streetName": "streetName",
                                        "town": "town",
                                        "countrySubDivision": "countrySubDivision",
                                        "additions": {
                                            "key": "additions"
                                        },
                                        "addressLine1": "addressLine1",
                                        "addressLine2": "addressLine2",
                                        "postCode": "postCode"
                                    },
                                    "additions": {
                                        "key": "additions"
                                    },
                                    "name": "name",
                                    "recipientId": "recipientId"
                                },
                                "instructedAmount": {
                                    "amount": "amount",
                                    "additions": {
                                        "key": "additions"
                                    },
                                    "currencyCode": "currencyCode"
                                },
                                "endToEndIdentification": "endToEndIdentification"
                            },
                            "additions": {
                                "key": "additions"
                            },
                            "originatorAccount": {
                                "arrangementId": "arrangementId",
                                "identification": {
                                    "identification": "identification",
                                    "additions": {
                                        "key": "additions"
                                    }
                                },
                                "additions": {
                                    "key": "additions"
                                },
                                "name": "name",
                                "externalArrangementId": "externalArrangementId"
                            },
                            "entryClass": "entryClass",
                            "paymentType": "paymentType"
                        },
                        "id": "id",
                        "actions": [null, null]
                    },
                    "additions": {
                        "key": "additions"
                    }
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    }]);
const PaymentTemplatesHttpServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v2/payment-templates/{paymentTemplateId}",
        method: "DELETE",
        responses: [
            {
                status: 204,
                body: ""
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/payment-templates",
        method: "GET",
        responses: [
            {
                status: 200,
                body: [{
                        "id": "7d341c28-6714-11e7-907b-a6006ad3dba0",
                        "name": "Textile supplier invoice",
                        "createdAt": "2020-04-12T14:33:13.452Z",
                        "serviceAgreementId": "d6fdc581-1306-412a-9e40-86d851190acf",
                        "details": {
                            "paymentType": "SEPA_CREDIT_TRANSFER",
                            "originatorAccount": {
                                "arrangementId": "729190df-a421-4937-94fd-5e1a3da132cc",
                                "externalArrangementId": "729190421493794513132",
                                "identification": {
                                    "identification": "NL53RABO0309349755",
                                    "schemeName": "IBAN"
                                },
                                "name": "Smith Bonus Savings"
                            },
                            "instructionPriority": "NORM",
                            "transferTransactionInformation": {
                                "counterparty": {
                                    "name": "Backbase",
                                    "postalAddress": {
                                        "addressLine1": "Jacob Bontiusplaats 9, 1018LL, Amsterdam",
                                        "country": "NL"
                                    }
                                },
                                "counterpartyAccount": {
                                    "identification": {
                                        "identification": "FR708933019952AUNHQNQ0KZ",
                                        "schemeName": "IBAN"
                                    },
                                    "arrangementId": "fe9d66ae-b927-4ac7-8799-c5a38a596ff2",
                                    "externalArrangementId": "9669274787995385962"
                                },
                                "instructedAmount": {
                                    "amount": "5000.55",
                                    "currencyCode": "EUR"
                                },
                                "remittanceInformation": "Salary"
                            }
                        }
                    }]
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/payment-templates",
        method: "POST",
        responses: [
            {
                status: 201,
                body: {
                    "template": {
                        "id": "7d341c28-6714-11e7-907b-a6006ad3dba0",
                        "name": "Salary for John",
                        "createdAt": "2020-04-12T14:33:13.452Z",
                        "serviceAgreementId": "d6fdc581-1306-412a-9e40-86d851190acf",
                        "details": {
                            "paymentType": "SEPA_CREDIT_TRANSFER",
                            "originatorAccount": {
                                "arrangementId": "729190df-a421-4937-94fd-5e1a3da132cc",
                                "externalArrangementId": "729190421493794513132",
                                "identification": {
                                    "identification": "NL53RABO0309349755",
                                    "schemeName": "IBAN"
                                }
                            },
                            "instructionPriority": "NORM",
                            "transferTransactionInformation": {
                                "counterparty": {
                                    "name": "John Smith",
                                    "postalAddress": {
                                        "addressLine1": "Schippersstraat 15, 1011AZ, Amsterdam",
                                        "country": "NL"
                                    }
                                },
                                "counterpartyAccount": {
                                    "identification": {
                                        "identification": "FR708933019952AUNHQNQ0KZ",
                                        "schemeName": "IBAN"
                                    },
                                    "arrangementId": "fe9d66ae-b927-4ac7-8799-c5a38a596ff2",
                                    "externalArrangementId": "9669274787995385962"
                                },
                                "instructedAmount": {
                                    "amount": "5000.55",
                                    "currencyCode": "EUR"
                                },
                                "remittanceInformation": "Salary"
                            }
                        }
                    }
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
        ]
    },
    {
        urlPattern: "/client-api/v2/payment-templates/{paymentTemplateId}",
        method: "PUT",
        responses: [
            {
                status: 202,
                body: {
                    "template": {
                        "id": "7d341c28-6714-11e7-907b-a6006ad3dba0",
                        "name": "Salary for John",
                        "createdAt": "2020-04-12T14:33:13.452Z",
                        "serviceAgreementId": "d6fdc581-1306-412a-9e40-86d851190acf",
                        "details": {
                            "paymentType": "SEPA_CREDIT_TRANSFER",
                            "originatorAccount": {
                                "arrangementId": "729190df-a421-4937-94fd-5e1a3da132cc",
                                "externalArrangementId": "729190421493794513132",
                                "identification": {
                                    "identification": "NL53RABO0309349755",
                                    "schemeName": "IBAN"
                                }
                            },
                            "instructionPriority": "NORM",
                            "transferTransactionInformation": {
                                "counterparty": {
                                    "name": "John Smith",
                                    "postalAddress": {
                                        "addressLine1": "Schippersstraat 15, 1011AZ, Amsterdam",
                                        "country": "NL"
                                    }
                                },
                                "counterpartyAccount": {
                                    "identification": {
                                        "identification": "FR708933019952AUNHQNQ0KZ",
                                        "schemeName": "IBAN"
                                    },
                                    "arrangementId": "fe9d66ae-b927-4ac7-8799-c5a38a596ff2",
                                    "externalArrangementId": "9669274787995385962"
                                },
                                "instructedAmount": {
                                    "amount": "5000.55",
                                    "currencyCode": "EUR"
                                },
                                "remittanceInformation": "Salary"
                            }
                        }
                    }
                }
            },
            {
                status: 202,
                body: {
                    "template": {
                        "createdAt": "2000-01-23T04:56:07.000+00:00",
                        "additions": {
                            "key": "additions"
                        },
                        "serviceAgreementId": "serviceAgreementId",
                        "name": "name",
                        "details": {
                            "transferTransactionInformation": {
                                "correspondentBank": {
                                    "bankBranchCode": "bankBranchCode",
                                    "postalAddress": {
                                        "country": "country",
                                        "streetName": "streetName",
                                        "town": "town",
                                        "countrySubDivision": "countrySubDivision",
                                        "additions": {
                                            "key": "additions"
                                        },
                                        "addressLine1": "addressLine1",
                                        "addressLine2": "addressLine2",
                                        "postCode": "postCode"
                                    },
                                    "additions": {
                                        "key": "additions"
                                    },
                                    "name": "name",
                                    "bic": "bic"
                                },
                                "counterpartyBank": {
                                    "bankBranchCode": "bankBranchCode",
                                    "postalAddress": {
                                        "country": "country",
                                        "streetName": "streetName",
                                        "town": "town",
                                        "countrySubDivision": "countrySubDivision",
                                        "additions": {
                                            "key": "additions"
                                        },
                                        "addressLine1": "addressLine1",
                                        "addressLine2": "addressLine2",
                                        "postCode": "postCode"
                                    },
                                    "additions": {
                                        "key": "additions"
                                    },
                                    "name": "name",
                                    "bic": "bic"
                                },
                                "targetCurrency": "targetCurrency",
                                "additions": {
                                    "key": "additions"
                                },
                                "purposeOfPayment": {
                                    "code": "code",
                                    "additions": {
                                        "key": "additions"
                                    },
                                    "freeText": "freeText",
                                    "description": "description"
                                },
                                "counterpartyAccount": {
                                    "accountType": "accountType",
                                    "selectedContact": {
                                        "accountId": "accountId",
                                        "additions": {
                                            "key": "additions"
                                        },
                                        "contactId": "contactId"
                                    }
                                },
                                "intermediaryBank": {
                                    "bankBranchCode": "bankBranchCode",
                                    "postalAddress": {
                                        "country": "country",
                                        "streetName": "streetName",
                                        "town": "town",
                                        "countrySubDivision": "countrySubDivision",
                                        "additions": {
                                            "key": "additions"
                                        },
                                        "addressLine1": "addressLine1",
                                        "addressLine2": "addressLine2",
                                        "postCode": "postCode"
                                    },
                                    "additions": {
                                        "key": "additions"
                                    },
                                    "name": "name",
                                    "bic": "bic"
                                },
                                "mandateIdentifier": "mandateIdentifier",
                                "remittanceInformation": "remittanceInformation",
                                "messageToBank": "messageToBank",
                                "counterparty": {
                                    "postalAddress": {
                                        "country": "country",
                                        "streetName": "streetName",
                                        "town": "town",
                                        "countrySubDivision": "countrySubDivision",
                                        "additions": {
                                            "key": "additions"
                                        },
                                        "addressLine1": "addressLine1",
                                        "addressLine2": "addressLine2",
                                        "postCode": "postCode"
                                    },
                                    "additions": {
                                        "key": "additions"
                                    },
                                    "name": "name",
                                    "recipientId": "recipientId"
                                },
                                "instructedAmount": {
                                    "amount": "amount",
                                    "additions": {
                                        "key": "additions"
                                    },
                                    "currencyCode": "currencyCode"
                                },
                                "endToEndIdentification": "endToEndIdentification"
                            },
                            "additions": {
                                "key": "additions"
                            },
                            "originatorAccount": {
                                "arrangementId": "arrangementId",
                                "identification": {
                                    "identification": "identification",
                                    "additions": {
                                        "key": "additions"
                                    }
                                },
                                "additions": {
                                    "key": "additions"
                                },
                                "name": "name",
                                "externalArrangementId": "externalArrangementId"
                            },
                            "entryClass": "entryClass",
                            "paymentType": "paymentType"
                        },
                        "id": "id",
                        "actions": [null, null]
                    },
                    "additions": {
                        "key": "additions"
                    }
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
        ]
    },
]);

export { Action, COLLECTION_FORMATS, CONFIG_TOKEN, ChargeBearer, InstructionPriority, InvolvedPartyRole, PAYMENT_TEMPLATE_BASE_PATH, PaymentTemplateApiModule, PaymentTemplateConfiguration, PaymentTemplatesHttpService, PaymentTemplatesHttpServiceDeletePaymentTemplateIdByPaymentTemplateIdMocksProvider, PaymentTemplatesHttpServiceGetPaymentTemplatesMocksProvider, PaymentTemplatesHttpServiceMocksProvider, PaymentTemplatesHttpServicePostPaymentTemplatesMocksProvider, PaymentTemplatesHttpServicePutPaymentTemplateByIdMocksProvider, SchemeNames };
//# sourceMappingURL=backbase-payment-template-http-ang.js.map
