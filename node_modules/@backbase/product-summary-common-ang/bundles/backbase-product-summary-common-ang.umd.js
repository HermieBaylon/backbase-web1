(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/localize/init'), require('@angular/core'), require('@angular/common'), require('@backbase/ui-ang/notification'), require('@backbase/data-ang/arrangements'), require('rxjs'), require('rxjs/operators'), require('@backbase/foundation-ang/web-sdk'), require('@backbase/data-ang/financial-institution-manager'), require('@backbase/data-ang/accesscontrol'), require('@backbase/foundation-ang/core'), require('@angular/platform-browser'), require('@backbase/ui-ang/account-number-pipe'), require('@backbase/ui-ang/payment-card-number-pipe'), require('@backbase/ui-ang/date-pipe')) :
    typeof define === 'function' && define.amd ? define('@backbase/product-summary-common-ang', ['exports', '@angular/localize/init', '@angular/core', '@angular/common', '@backbase/ui-ang/notification', '@backbase/data-ang/arrangements', 'rxjs', 'rxjs/operators', '@backbase/foundation-ang/web-sdk', '@backbase/data-ang/financial-institution-manager', '@backbase/data-ang/accesscontrol', '@backbase/foundation-ang/core', '@angular/platform-browser', '@backbase/ui-ang/account-number-pipe', '@backbase/ui-ang/payment-card-number-pipe', '@backbase/ui-ang/date-pipe'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["product-summary-common-ang"] = {}), global.ng.localize.init, global.ng.core, global.ng.common, global.i2, global.i1, global.rxjs, global.rxjs.operators, global.webSdk, global.i1$1, global.i1$2, global.i1$3, global.ng.platformBrowser, global.i1$4, global.paymentCardNumberPipe, global.i1$5));
})(this, (function (exports, init, i0, common, i2, i1, rxjs, operators, webSdk, i1$1, i1$2, i1$3, platformBrowser, i1$4, paymentCardNumberPipe, i1$5) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i1__namespace$1 = /*#__PURE__*/_interopNamespace(i1$1);
    var i1__namespace$2 = /*#__PURE__*/_interopNamespace(i1$2);
    var i1__namespace$3 = /*#__PURE__*/_interopNamespace(i1$3);
    var i1__namespace$4 = /*#__PURE__*/_interopNamespace(i1$4);
    var i1__namespace$5 = /*#__PURE__*/_interopNamespace(i1$5);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var ProductSummaryAccountDetailsBaseComponent = /** @class */ (function () {
        function ProductSummaryAccountDetailsBaseComponent() {
            /**
             * List of maskable attributes. Holds states of the attributes.
             */
            this.maskableAttributes = [];
            /**
             * Event when a user clicked on the `unmask-attribute-button` button
             */
            this.unmaskAttribute = new i0.EventEmitter();
            /**
             * Event when a user clicked on the `mask-attribute-button` button
             */
            this.maskAttribute = new i0.EventEmitter();
            /**
             * All unmaskable attributes
             */
            this.maskableAttribute = i1.MaskableAttribute;
            /**
             * Details info sections availability
             */
            this.infoAvailability = {};
        }
        Object.defineProperty(ProductSummaryAccountDetailsBaseComponent.prototype, "product", {
            get: function () {
                return this._product;
            },
            /**
             * Product type data that this component displays.
             */
            set: function (data) {
                this._product = data;
                this.infoAvailability = this.getProductInfoAvailability(data);
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Returns `true` if the given `attributeName` is masked
         *
         * @param attributeName
         */
        ProductSummaryAccountDetailsBaseComponent.prototype.isMasked = function (attributeName) {
            var maskableAttribute = this.maskableAttributes.find(function (attribute) { return attribute.attributeName === attributeName; });
            return (maskableAttribute === null || maskableAttribute === void 0 ? void 0 : maskableAttribute.masked) === undefined ? true : maskableAttribute === null || maskableAttribute === void 0 ? void 0 : maskableAttribute.masked;
        };
        /**
         * Event handler for the `click` event of the unmask buttons
         * Emits `MaskableAttribute` to the `unmaskAttribute` Output
         *
         * @param attributeName
         */
        ProductSummaryAccountDetailsBaseComponent.prototype.onUnmaskAttribute = function (attributeName) {
            if (Object.values(i1.MaskableAttribute).includes(attributeName)) {
                this.unmaskAttribute.emit(attributeName);
            }
        };
        /**
         * Event handler for the `click` event of the mask buttons
         * Emits `MaskableAttribute` to the `maskAttribute` Output
         *
         * @param attributeName
         */
        ProductSummaryAccountDetailsBaseComponent.prototype.onMaskAttribute = function (attributeName) {
            if (Object.values(i1.MaskableAttribute).includes(attributeName)) {
                this.maskAttribute.emit(attributeName);
            }
        };
        // eslint-disable-next-line @typescript-eslint/no-unused-vars,no-unused-vars
        ProductSummaryAccountDetailsBaseComponent.prototype.getProductInfoAvailability = function (product) {
            return {};
        };
        return ProductSummaryAccountDetailsBaseComponent;
    }());
    ProductSummaryAccountDetailsBaseComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProductSummaryAccountDetailsBaseComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    ProductSummaryAccountDetailsBaseComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ProductSummaryAccountDetailsBaseComponent, selector: "ng-component", inputs: { product: "product", maskableAttributes: "maskableAttributes" }, outputs: { unmaskAttribute: "unmaskAttribute", maskAttribute: "maskAttribute" }, ngImport: i0__namespace, template: '', isInline: true });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProductSummaryAccountDetailsBaseComponent, decorators: [{
                type: i0.Component,
                args: [{ template: '' }]
            }], propDecorators: { product: [{
                    type: i0.Input
                }], maskableAttributes: [{
                    type: i0.Input
                }], unmaskAttribute: [{
                    type: i0.Output
                }], maskAttribute: [{
                    type: i0.Output
                }] } });

    var ProductSummaryAccountDetailsBaseModule = /** @class */ (function () {
        function ProductSummaryAccountDetailsBaseModule() {
        }
        return ProductSummaryAccountDetailsBaseModule;
    }());
    ProductSummaryAccountDetailsBaseModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProductSummaryAccountDetailsBaseModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ProductSummaryAccountDetailsBaseModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProductSummaryAccountDetailsBaseModule, declarations: [ProductSummaryAccountDetailsBaseComponent], exports: [ProductSummaryAccountDetailsBaseComponent] });
    ProductSummaryAccountDetailsBaseModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProductSummaryAccountDetailsBaseModule });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProductSummaryAccountDetailsBaseModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [ProductSummaryAccountDetailsBaseComponent],
                        exports: [ProductSummaryAccountDetailsBaseComponent],
                    }]
            }] });

    var SIZE_TABLET_DEFAULT = 768;
    var SIZE_MOBILE_DEFAULT = 375;

    var ResponsiveContainerComponent = /** @class */ (function () {
        function ResponsiveContainerComponent(element, changeDetector) {
            /**
             * Specifies screen size: `mobile` | `tablet` | 'screen'
             *
             * @default 'screen'
             */
            this._responsiveView = 'screen';
            this._sizeTablet = SIZE_TABLET_DEFAULT;
            this._sizeMobile = SIZE_MOBILE_DEFAULT;
            this._element = element;
            this._changeDetector = changeDetector;
        }
        Object.defineProperty(ResponsiveContainerComponent.prototype, "responsiveView", {
            get: function () {
                return this._customResponsiveView || this._responsiveView;
            },
            set: function (value) {
                this._customResponsiveView = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ResponsiveContainerComponent.prototype, "sizeMobile", {
            get: function () {
                return this._sizeMobile;
            },
            set: function (value) {
                this._sizeMobile = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ResponsiveContainerComponent.prototype, "sizeTablet", {
            get: function () {
                return this._sizeTablet;
            },
            set: function (value) {
                this._sizeTablet = value;
            },
            enumerable: false,
            configurable: true
        });
        /**
         * @internal
         */
        ResponsiveContainerComponent.prototype.ngAfterViewInit = function () {
            if (!this._customResponsiveView) {
                this.checkElementSize();
                this._changeDetector.detectChanges();
            }
        };
        /**
         * Event handler on `windows:resize`
         * Checks size of the container
         */
        ResponsiveContainerComponent.prototype.onResize = function () {
            if (!this._customResponsiveView) {
                this.checkElementSize();
            }
        };
        /**
         * Checks width of the parent container and updates `isSmallScreen$` and `isExtraSmallScreen$`
         */
        ResponsiveContainerComponent.prototype.checkElementSize = function () {
            var _a, _b;
            var containerWidth = ((_b = (_a = this._element.nativeElement) === null || _a === void 0 ? void 0 : _a.firstElementChild) === null || _b === void 0 ? void 0 : _b.getBoundingClientRect().width) || 0;
            this._responsiveView = this.getResponsiveView(containerWidth);
        };
        ResponsiveContainerComponent.prototype.getResponsiveView = function (containerWidth) {
            var responseView = 'screen';
            if (containerWidth <= this.sizeMobile) {
                responseView = 'mobile';
            }
            else if (containerWidth <= this.sizeTablet) {
                responseView = 'tablet';
            }
            return responseView;
        };
        return ResponsiveContainerComponent;
    }());
    ResponsiveContainerComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ResponsiveContainerComponent, deps: [{ token: i0__namespace.ElementRef }, { token: i0__namespace.ChangeDetectorRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ResponsiveContainerComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ResponsiveContainerComponent, selector: "ng-component", inputs: { responsiveView: "responsiveView" }, host: { listeners: { "window:resize": "onResize()" } }, ngImport: i0__namespace, template: '', isInline: true });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ResponsiveContainerComponent, decorators: [{
                type: i0.Component,
                args: [{ template: '' }]
            }], ctorParameters: function () { return [{ type: i0__namespace.ElementRef }, { type: i0__namespace.ChangeDetectorRef }]; }, propDecorators: { responsiveView: [{
                    type: i0.Input
                }], onResize: [{
                    type: i0.HostListener,
                    args: ['window:resize', []]
                }] } });

    var ResponsiveContainerModule = /** @class */ (function () {
        function ResponsiveContainerModule() {
        }
        return ResponsiveContainerModule;
    }());
    ResponsiveContainerModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ResponsiveContainerModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ResponsiveContainerModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ResponsiveContainerModule, declarations: [ResponsiveContainerComponent], exports: [ResponsiveContainerComponent] });
    ResponsiveContainerModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ResponsiveContainerModule });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ResponsiveContainerModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [ResponsiveContainerComponent],
                        exports: [ResponsiveContainerComponent],
                    }]
            }] });

    var WINDOW = new i0.InjectionToken('ProductSummaryCommon :: WindowToken');
    var windowFactory = function () { return window; };
    var WindowProvider = {
        provide: WINDOW,
        useFactory: windowFactory,
    };
    /**
     * Injection token for widget properties configuration
     */
    var PRODUCT_SUMMARY_WIDGET_PROPERTIES = new i0.InjectionToken('ProductSummaryCommon :: WidgetProperties');
    /**
     * Injection token for account alias displaying level configuration
     */
    var ACCOUNT_ALIAS_DISPLAYING_LEVEL = new i0.InjectionToken('ProductSummaryCommon :: AccountAliasDisplayingLevel');

    var sharedModules = [i2.NotificationModule, ProductSummaryAccountDetailsBaseModule, ResponsiveContainerModule];
    var ProductSummaryCommon = /** @class */ (function () {
        function ProductSummaryCommon() {
        }
        return ProductSummaryCommon;
    }());
    ProductSummaryCommon.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProductSummaryCommon, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ProductSummaryCommon.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProductSummaryCommon, imports: [common.CommonModule, i2.NotificationModule, ProductSummaryAccountDetailsBaseModule, ResponsiveContainerModule], exports: [i2.NotificationModule, ProductSummaryAccountDetailsBaseModule, ResponsiveContainerModule] });
    ProductSummaryCommon.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProductSummaryCommon, providers: [WindowProvider], imports: [__spreadArray([common.CommonModule], __read(sharedModules)), i2.NotificationModule, ProductSummaryAccountDetailsBaseModule, ResponsiveContainerModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProductSummaryCommon, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: __spreadArray([common.CommonModule], __read(sharedModules)),
                        exports: __spreadArray([], __read(sharedModules)),
                        providers: [WindowProvider],
                    }]
            }] });

    var DownloadResourcesService = /** @class */ (function () {
        function DownloadResourcesService(localWindow) {
            this.localWindow = localWindow;
        }
        DownloadResourcesService.prototype.downloadFile = function (name, type, data) {
            var fileData = new Blob([data], { type: type });
            if (this.isFileSaverAvailable()) {
                this.downloadViaFileSaver(name, fileData);
            }
            else {
                this.downloadViaLink(name, fileData);
            }
        };
        DownloadResourcesService.prototype.isFileSaverAvailable = function () {
            var navigator = this.localWindow.navigator;
            // @ts-ignore
            return navigator !== undefined && navigator.msSaveOrOpenBlob !== undefined;
        };
        DownloadResourcesService.prototype.downloadViaFileSaver = function (name, data) {
            var navigator = this.localWindow.navigator;
            // @ts-ignore
            navigator.msSaveOrOpenBlob(data, name);
        };
        DownloadResourcesService.prototype.downloadViaLink = function (name, data) {
            var _a = this.localWindow, document = _a.document, URL = _a.URL;
            var downloadLink = document.createElement('a');
            downloadLink.href = URL.createObjectURL(data);
            downloadLink.download = name;
            downloadLink.click();
            downloadLink.remove();
        };
        return DownloadResourcesService;
    }());
    DownloadResourcesService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DownloadResourcesService, deps: [{ token: WINDOW }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    DownloadResourcesService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DownloadResourcesService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DownloadResourcesService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () {
            return [{ type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [WINDOW]
                        }] }];
        } });

    /**
     * Utility service for DOM manipulations
     */
    var DomAttributesService = /** @class */ (function () {
        function DomAttributesService() {
            this.idPrefix = 'bb_product_summary_element_';
            this.nextId = 0;
        }
        /**
         * Generates unique Id for product-summary DOM elements
         */
        DomAttributesService.prototype.generateId = function () {
            return "" + this.idPrefix + this.nextId++;
        };
        return DomAttributesService;
    }());
    DomAttributesService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DomAttributesService, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    DomAttributesService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DomAttributesService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DomAttributesService, decorators: [{
                type: i0.Injectable
            }] });

    exports.HttpResponseType = void 0;
    (function (HttpResponseType) {
        HttpResponseType["BODY"] = "body";
        HttpResponseType["RESPONSE"] = "response";
        HttpResponseType["EVENT"] = "event";
    })(exports.HttpResponseType || (exports.HttpResponseType = {}));
    exports.BalanceHistoryExportFormat = void 0;
    (function (BalanceHistoryExportFormat) {
        BalanceHistoryExportFormat["JSON"] = "application/json";
        BalanceHistoryExportFormat["CSV"] = "text/csv";
    })(exports.BalanceHistoryExportFormat || (exports.BalanceHistoryExportFormat = {}));
    exports.PaginationType = void 0;
    (function (PaginationType) {
        PaginationType["LOAD_MORE"] = "load-more";
        PaginationType["PAGINATION"] = "pagination";
    })(exports.PaginationType || (exports.PaginationType = {}));
    exports.ProductKindNames = void 0;
    (function (ProductKindNames) {
        ProductKindNames["CURRENT_ACCOUNT"] = "Current Account";
        ProductKindNames["SAVINGS_ACCOUNT"] = "Savings Account";
        ProductKindNames["TERM_DEPOSIT"] = "Term Deposit";
        ProductKindNames["LOAN"] = "Loan";
        ProductKindNames["CREDIT_CARD"] = "Credit Card";
        ProductKindNames["DEBIT_CARD"] = "Debit Card";
        ProductKindNames["INVESTMENT_ACCOUNT"] = "Investment Account";
    })(exports.ProductKindNames || (exports.ProductKindNames = {}));
    /**
     * Default values of "kindUri" per product kind
     */
    exports.ProductKindUri = void 0;
    (function (ProductKindUri) {
        ProductKindUri["CREDIT_CARD"] = "credit-card";
        ProductKindUri["CURRENT_ACCOUNT"] = "current-account";
        ProductKindUri["DEBIT_CARD"] = "debit-card";
        ProductKindUri["INVESTMENT_ACCOUNT"] = "investment-account";
        ProductKindUri["LOAN"] = "loan";
        ProductKindUri["POCKET"] = "pocket";
        ProductKindUri["POCKET_PARENT"] = "pocket-parent";
        ProductKindUri["SAVINGS_ACCOUNT"] = "savings-account";
        ProductKindUri["TERM_DEPOSIT"] = "term-deposit";
    })(exports.ProductKindUri || (exports.ProductKindUri = {}));
    /**
     * Available navigation types from account
     */
    exports.AccountNavigationType = void 0;
    (function (AccountNavigationType) {
        AccountNavigationType["PAYMENTS"] = "PAYMENTS";
        AccountNavigationType["TRANSACTIONS"] = "TRANSACTIONS";
        AccountNavigationType["BALANCE_HISTORY"] = "BALANCE_HISTORY";
        AccountNavigationType["STATEMENTS"] = "STATEMENTS";
    })(exports.AccountNavigationType || (exports.AccountNavigationType = {}));
    /**
     * Privileges applicable to product summary business functions
     */
    exports.ProductSummaryPrivilege = void 0;
    (function (ProductSummaryPrivilege) {
        ProductSummaryPrivilege["VIEW"] = "view";
        ProductSummaryPrivilege["EDIT"] = "edit";
    })(exports.ProductSummaryPrivilege || (exports.ProductSummaryPrivilege = {}));
    /**
     * Displaying level of account aliases
     */
    exports.AccountAliasDisplayingLevel = void 0;
    (function (AccountAliasDisplayingLevel) {
        AccountAliasDisplayingLevel["ACCOUNT"] = "ACCOUNT";
        AccountAliasDisplayingLevel["USER"] = "USER";
    })(exports.AccountAliasDisplayingLevel || (exports.AccountAliasDisplayingLevel = {}));
    /**
     * Duplicates validation settings from the `user-preferences` schema of fe-presentation-spec
     * TODO: remove these constants, when min/max length settings will be part of the generated client API
     */
    var UserPreferencesValidationSettings = {
        ALIAS_MAX_LENGTH: 50,
    };

    //TODO: check if this can be like id
    var defaultArrangementName = '';
    var WidgetProperty = {
        BUSINESS_FUNCTION: 'businessFunction',
        RESOURCE_NAME: 'resourceName',
        PRIVILEGE_TYPE: 'privilege',
        SIZE: 'size',
        ACTIVE_VIEW: 'activeView',
    };
    var SMALL_SCREEN_SIZE = 640;
    var EXTRA_SMALL_SCREEN_SIZE = 576;
    var DEFAULT_DEBOUNCE_TIME = 300;
    exports.DefaultProductKindNameList = void 0;
    (function (DefaultProductKindNameList) {
        DefaultProductKindNameList["CURRENT_ACCOUNT"] = "current-account";
        DefaultProductKindNameList["SAVINGS_ACCOUNT"] = "savings-account";
        DefaultProductKindNameList["TERM_DEPOSIT"] = "term-deposit";
        DefaultProductKindNameList["LOAN"] = "loan";
        DefaultProductKindNameList["CREDIT_CARD"] = "credit-card";
        DefaultProductKindNameList["DEBIT_CARD"] = "debit-card";
        DefaultProductKindNameList["INVESTMENT_ACCOUNT"] = "investment-account";
    })(exports.DefaultProductKindNameList || (exports.DefaultProductKindNameList = {}));
    var DefaultProductKindName = exports.DefaultProductKindNameList.CURRENT_ACCOUNT;
    var CardProductKindName = ['credit card', 'debit card'];
    /**
     * Default value for allowed navigation types per account,
     * by default all navigation types are allowed
     */
    var DefaultAllowedNavigationTypes = [
        exports.AccountNavigationType.BALANCE_HISTORY,
        exports.AccountNavigationType.PAYMENTS,
        exports.AccountNavigationType.TRANSACTIONS,
        exports.AccountNavigationType.STATEMENTS,
    ];

    var getColorTrend = function (index, series) {
        var serie = series[index];
        if (serie.value === 0) {
            if (index > 0) {
                return getColorTrend(index - 1, series);
            }
            if (series.length > 1) {
                return series[1].value < 0 ? -1 : 1;
            }
        }
        if (serie.value < 0) {
            return -1;
        }
        return 1;
    };
    var getCurrentSeriesName = function (trend) { return (trend === -1 ? 'negative' : 'positive'); };
    var getFirstSeries = function (datum, trend) { return [
        {
            name: getCurrentSeriesName(trend),
            series: [datum],
        },
    ]; };
    var createNewSeries = function (result, lastResult, series, trend) {
        var lastName = lastResult.series[lastResult.series.length - 1].name;
        var lastValue = lastResult.series[lastResult.series.length - 1].value;
        var valuesSum = Math.abs(lastValue) + Math.abs(series.value);
        var step = series.name.getTime() - lastName.getTime();
        var valuesRatio = Math.abs(lastValue) / valuesSum;
        var prevValue = lastResult.series[lastResult.series.length - 1].value;
        var crossingPoint = { name: new Date(lastName.getTime() + step * valuesRatio), value: 0 };
        var crossPointSection = prevValue ? [crossingPoint] : [];
        return __spreadArray(__spreadArray([], __read(result.slice(0, -1))), [
            {
                name: lastResult.name,
                series: __spreadArray(__spreadArray([], __read(lastResult.series)), __read(crossPointSection)),
            },
            {
                name: getCurrentSeriesName(trend),
                series: [crossingPoint, series],
            },
        ]);
    };
    var concatExistingSeries = function (result, lastResult, series) {
        var name = lastResult.name;
        return __spreadArray(__spreadArray([], __read(result.slice(0, -1))), [
            {
                name: name,
                series: __spreadArray(__spreadArray([], __read(lastResult.series)), [series]),
            },
        ]);
    };
    var splitDataByTrend = function (series) { return series.reduce(function (result, seriesData, i) {
        var currentTrend = getColorTrend(i, series);
        if (i === 0) {
            return getFirstSeries(seriesData, currentTrend);
        }
        var previousTrend = getColorTrend(i - 1, series);
        var lastResult = result[result.length - 1];
        if (previousTrend === currentTrend) {
            return concatExistingSeries(result, lastResult, seriesData);
        }
        else {
            return createNewSeries(result, lastResult, seriesData, currentTrend);
        }
    }, []); };

    var BalanceHistoryNotFound = /** @class */ (function () {
        function BalanceHistoryNotFound(response) {
            this.response = response;
            this.kind = 'BalanceHistoryNotFound';
            this.messages = ((response.error || {}).errors || []).map(function (e) { return e.message; });
        }
        return BalanceHistoryNotFound;
    }());
    var BalanceHistoryBadRequest = /** @class */ (function () {
        function BalanceHistoryBadRequest(response) {
            this.response = response;
            this.kind = 'BalanceHistoryBadRequest';
            this.messages = ((response.error || {}).errors || []).map(function (e) { return e.message; });
        }
        return BalanceHistoryBadRequest;
    }());
    var BalanceHistoryAccessDenied = /** @class */ (function () {
        function BalanceHistoryAccessDenied(response) {
            this.response = response;
            this.kind = 'BalanceHistoryAccessDenied';
            this.messages = ((response.error || {}).errors || []).map(function (e) { return e.message; });
        }
        return BalanceHistoryAccessDenied;
    }());
    var BalanceHistoryUnknownError = /** @class */ (function () {
        function BalanceHistoryUnknownError(response) {
            this.response = response;
            this.kind = 'BalanceHistoryUnknownError';
            this.messages = [response.message];
        }
        return BalanceHistoryUnknownError;
    }());
    var BalanceHistoryConnectivityError = /** @class */ (function () {
        function BalanceHistoryConnectivityError(response) {
            this.response = response;
            this.kind = 'BalanceHistoryConnectivityError';
            this.messages = ((response.error || {}).errors || []).map(function (e) { return e.message; });
        }
        return BalanceHistoryConnectivityError;
    }());
    var parseBalanceHistoryError = function (error) {
        if (error.error instanceof ErrorEvent) {
            return new BalanceHistoryUnknownError(error);
        }
        else {
            switch (error.status) {
                case 0:
                    return new BalanceHistoryConnectivityError(error);
                case 401:
                    return new BalanceHistoryAccessDenied(error);
                case 403:
                    return new BalanceHistoryAccessDenied(error);
                case 400:
                    return new BalanceHistoryBadRequest(error);
                case 404:
                    return new BalanceHistoryNotFound(error);
                default:
                    return new BalanceHistoryUnknownError(error);
            }
        }
    };

    var BalanceHistoryCommonService = /** @class */ (function () {
        function BalanceHistoryCommonService(accountDataService) {
            var _a;
            var _this = this;
            this.accountDataService = accountDataService;
            this.reportDefaultFileName = (_a = {},
                _a[exports.BalanceHistoryExportFormat.CSV] = 'balance-history.csv',
                _a[exports.BalanceHistoryExportFormat.JSON] = 'balance-history.json',
                _a);
            this.requestObjectSeries = new rxjs.ReplaySubject(1);
            this.requestObjectPaginated = new rxjs.ReplaySubject(1);
            this.errorSeries = new rxjs.BehaviorSubject(undefined);
            this.errorPaginated = new rxjs.BehaviorSubject(undefined);
            this.loadingPaginated = new rxjs.BehaviorSubject(true);
            this.loadingSeries = new rxjs.BehaviorSubject(true);
            this.balanceHistorySeries = this.requestObjectSeries.pipe(operators.distinctUntilChanged(), operators.filter(function (param) { return !!param.arrangementIds; }), operators.tap(function () { return _this.loadingSeries.next(true); }), operators.tap(function () { return _this.errorSeries.next(undefined); }), operators.switchMap(function (res) { return _this.getBalanceHistorySeries(res).pipe(operators.catchError(function (errorSeries) {
                _this.errorSeries.next(errorSeries);
                return rxjs.of(undefined);
            })); }), operators.tap(function () { return _this.loadingSeries.next(false); }));
            this.balanceHistoryPaginated = this.requestObjectPaginated.pipe(operators.distinctUntilChanged(), operators.filter(function (param) { return !!param.arrangementId; }), operators.tap(function () { return _this.loadingPaginated.next(true); }), operators.tap(function () { return _this.errorPaginated.next(undefined); }), operators.switchMap(function (res) { return _this.getBalanceHistoryPaginated(res).pipe(operators.catchError(function (errorPaginated) {
                _this.errorPaginated.next(errorPaginated);
                return rxjs.of({
                    count: 0,
                    items: [],
                    params: res,
                });
            })); }), operators.scan(function (acc, curr) { return ({
                count: curr.count,
                items: _this.responsesMerge(acc, curr),
                params: curr.params,
            }); }), operators.tap(function () { return _this.loadingPaginated.next(false); }));
        }
        BalanceHistoryCommonService.prototype.getBalanceHistorySeries = function (request) {
            var parameters = this.getBalanceHistoryRequestParameters(request);
            return this.accountDataService.getBalanceHistory(parameters).pipe(operators.catchError(function (error) {
                throw parseBalanceHistoryError(error);
            }));
        };
        BalanceHistoryCommonService.prototype.getBalanceHistoryPaginated = function (request) {
            var _this = this;
            var paginationType = request.params ? request.params.paginationType || '' : '';
            var from = request.params ? request.params.from || 0 : 0;
            var parameters = this.getBalanceHistoryForArrangementRequestParameters(request);
            return this.accountDataService.getBalanceHistoryForArrangement(parameters, exports.HttpResponseType.RESPONSE).pipe(operators.map(function (res) { return _this.mapResponseWithCount(res, { from: from, paginationType: paginationType }); }), operators.catchError(function (error) {
                throw parseBalanceHistoryError(error);
            }));
        };
        BalanceHistoryCommonService.prototype.loadBalanceHistorySeries = function (requestObjectSeries) {
            requestObjectSeries.subscribe(this.requestObjectSeries);
        };
        BalanceHistoryCommonService.prototype.loadBalanceHistoryPaginated = function (requestObjectPaginated) {
            requestObjectPaginated.subscribe(this.requestObjectPaginated);
        };
        /**
         * Returns URL for fetching balance history data
         *
         * @param format
         * @param exportParameters
         */
        BalanceHistoryCommonService.prototype.exportBalanceHistory = function (format, exportParameters) {
            var parameters = this.getBalanceHistoryRequestParameters(exportParameters, format);
            return this.accountDataService.getBalanceHistoryUrl(parameters);
        };
        /**
         * Fetches balance history data in one of the available formats
         *
         * @param format
         * @param exportParameters
         */
        BalanceHistoryCommonService.prototype.getBalanceHistory = function (format, exportParameters) {
            var _this = this;
            var parameters = this.getBalanceHistoryRequestParameters(exportParameters, format);
            var options = { httpHeaderAccept: format };
            return this.accountDataService.getBalanceHistory(parameters, exports.HttpResponseType.RESPONSE, false, options).pipe(operators.map(function (_a) {
                var headers = _a.headers, body = _a.body;
                var defaultFileName = _this.reportDefaultFileName[format];
                var fileNameInHeaders = _this.getFileNameFromHeaders(headers);
                return { name: fileNameInHeaders || defaultFileName, content: body };
            }));
        };
        BalanceHistoryCommonService.prototype.responsesMerge = function (acc, current) {
            if (acc &&
                acc.items &&
                current &&
                current.items &&
                acc.params.paginationType === exports.PaginationType.LOAD_MORE &&
                current.params.from !== 0) {
                return __spreadArray(__spreadArray([], __read(acc.items)), __read(current.items));
            }
            return current.items;
        };
        BalanceHistoryCommonService.prototype.processBalanceHistory = function (balanceHistory) {
            var _a = __read(balanceHistory.items, 1), balanceHistoryItem = _a[0];
            var defaultSeries = {
                name: defaultArrangementName,
                series: balanceHistoryItem.balanceHistory.map(function (_a) {
                    var dateTo = _a.dateTo, value = _a.value, valuePtc = _a.valuePtc;
                    return ({
                        name: new Date(dateTo),
                        value: (value ? value.balance : valuePtc),
                    });
                }),
            };
            return defaultSeries ? splitDataByTrend(defaultSeries.series) : [];
        };
        BalanceHistoryCommonService.prototype.mapResponseWithCount = function (response, _a) {
            var from = _a.from, paginationType = _a.paginationType;
            // eslint-disable-next-line no-null/no-null
            if (response.body === null) {
                throw new Error();
            }
            var headerCount = response.headers ? response.headers.get('x-total-count') : undefined;
            var counter = headerCount ? parseInt(headerCount, 10) : response.body.length || 0;
            return {
                count: counter,
                items: response.body,
                params: { from: from, paginationType: paginationType },
            };
        };
        BalanceHistoryCommonService.prototype.getBalanceHistoryRequestParameters = function (_a, requestFormat) {
            var arrangementIds = _a.arrangementIds, params = _a.params;
            var format = requestFormat !== null && requestFormat !== void 0 ? requestFormat : params.format;
            return Object.assign({ arrangementIds: arrangementIds }, this.toRequestParameters(Object.assign(Object.assign({}, params), { format: format })));
        };
        BalanceHistoryCommonService.prototype.getBalanceHistoryForArrangementRequestParameters = function (_a) {
            var arrangementId = _a.arrangementId, params = _a.params;
            var format = undefined;
            return Object.assign({ arrangementId: arrangementId }, this.toRequestParameters(Object.assign(Object.assign({}, params), { format: format })));
        };
        BalanceHistoryCommonService.prototype.toRequestParameters = function (params) {
            var requestParameters = Object.assign(Object.assign({}, params), { timePeriod: params.timePeriod });
            delete requestParameters.paginationType;
            if (!requestParameters.format) {
                delete requestParameters.format;
            }
            if (requestParameters.timePeriod) {
                delete requestParameters.dateFrom;
                delete requestParameters.dateTo;
            }
            else {
                delete requestParameters.timePeriod;
            }
            return requestParameters;
        };
        BalanceHistoryCommonService.prototype.getFileNameFromHeaders = function (headers) {
            var contentDisposition = (headers && headers.get('content-disposition')) || '';
            var contentDispositionWithoutQuotes = contentDisposition.replace(/['"]*/g, '');
            return (contentDispositionWithoutQuotes.match(/filename[^;=\n]*=([^;\n]*)/) || [])[1];
        };
        return BalanceHistoryCommonService;
    }());
    BalanceHistoryCommonService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: BalanceHistoryCommonService, deps: [{ token: i1__namespace.AccountsHttpService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    BalanceHistoryCommonService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: BalanceHistoryCommonService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: BalanceHistoryCommonService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace.AccountsHttpService }]; } });

    var AccountsOverviewNotFound = /** @class */ (function () {
        function AccountsOverviewNotFound(response) {
            this.response = response;
            this.kind = 'AccountsOverviewNotFound';
            this.messages = ((response.error || {}).errors || []).map(function (e) { return e.message; });
        }
        return AccountsOverviewNotFound;
    }());
    var AccountsOverviewBadRequest = /** @class */ (function () {
        function AccountsOverviewBadRequest(response) {
            this.response = response;
            this.kind = 'AccountsOverviewBadRequest';
            this.messages = ((response.error || {}).errors || []).map(function (e) { return e.message; });
        }
        return AccountsOverviewBadRequest;
    }());
    var AccountsOverviewAccessDenied = /** @class */ (function () {
        function AccountsOverviewAccessDenied(response) {
            this.response = response;
            this.kind = 'AccountsOverviewAccessDenied';
            this.messages = ((response.error || {}).errors || []).map(function (e) { return e.message; });
        }
        return AccountsOverviewAccessDenied;
    }());
    var AccountsOverviewUnknownError = /** @class */ (function () {
        function AccountsOverviewUnknownError(response) {
            this.response = response;
            this.kind = 'AccountsOverviewUnknownError';
            this.messages = [response.message];
        }
        return AccountsOverviewUnknownError;
    }());
    var AccountsOverviewConnectivityError = /** @class */ (function () {
        function AccountsOverviewConnectivityError(response) {
            this.response = response;
            this.kind = 'AccountsOverviewConnectivityError';
            this.messages = ((response.error || {}).errors || []).map(function (e) { return e.message; });
        }
        return AccountsOverviewConnectivityError;
    }());
    var parseError = function (error) {
        if (error.error instanceof ErrorEvent) {
            return new AccountsOverviewUnknownError(error);
        }
        else {
            switch (error.status) {
                case 0:
                    return new AccountsOverviewConnectivityError(error);
                case 401:
                    return new AccountsOverviewAccessDenied(error);
                case 403:
                    return new AccountsOverviewAccessDenied(error);
                case 400:
                    return new AccountsOverviewBadRequest(error);
                case 404:
                    return new AccountsOverviewNotFound(error);
                default:
                    return new AccountsOverviewUnknownError(error);
            }
        }
    };

    var bbEventToggleAccountFavoriteUpdate = 'bb.event.toggle-account-favorite.update';
    var ProductSummaryAccountsService = /** @class */ (function () {
        function ProductSummaryAccountsService(productSummaryDataService, accountDataService, balancesHttpService, notificationService, pubSub) {
            var _this = this;
            this.productSummaryDataService = productSummaryDataService;
            this.accountDataService = accountDataService;
            this.balancesHttpService = balancesHttpService;
            this.notificationService = notificationService;
            this.pubSub = pubSub;
            this.requestObject = new rxjs.ReplaySubject(1);
            this.favoriteRequestComplete = new rxjs.BehaviorSubject(true);
            this.updateError = new rxjs.BehaviorSubject(undefined);
            this.error = new rxjs.BehaviorSubject(undefined);
            this.loading = new rxjs.BehaviorSubject(true);
            this.aggregatedBalancesErrorSubject = new rxjs.BehaviorSubject(undefined);
            this.aggregatedBalancesError = this.aggregatedBalancesErrorSubject.asObservable();
            this.loadingAggregatedBalancesSubject = new rxjs.BehaviorSubject(false);
            this.loadingAggregatedBalances = this.loadingAggregatedBalancesSubject.asObservable();
            this.refreshAggregatedBalancesSubject = new rxjs.BehaviorSubject(false);
            this.accountsList = rxjs.combineLatest([
                this.requestObject,
                this.favoriteRequestComplete,
            ]).pipe(operators.distinctUntilChanged(), operators.tap(function () { return _this.loading.next(true); }), operators.switchMap(function (_a) {
                var _b = __read(_a, 1), requestObject = _b[0];
                return _this.getAccounts(requestObject);
            }), operators.scan(function (acc, curr) { return ({
                count: curr.count,
                items: _this.mergeResponses(acc, curr),
                params: curr.params,
            }); }), operators.tap(function () { return _this.error.next(undefined); }), operators.catchError(function (error) {
                _this.error.next(error);
                return rxjs.of(undefined);
            }), operators.tap(function () { return _this.loading.next(false); }));
            this.aggregatedBalances = rxjs.combineLatest([
                this.refreshAggregatedBalancesSubject,
            ]).pipe(operators.tap(function () { return _this.loadingAggregatedBalancesSubject.next(true); }), operators.switchMap(function () { return _this.getAggregatedBalances(); }), operators.tap(function () { return _this.loadingAggregatedBalancesSubject.next(false); }));
            this.pubSub.subscribe(bbEventToggleAccountFavoriteUpdate, this.retriggerGetAccounts.bind(this));
        }
        ProductSummaryAccountsService.prototype.getAccountById = function (arrangementId) {
            return this.accountDataService.getArrangementById({ arrangementId: arrangementId });
        };
        /**
         * Fetches an unmasked attribute for the given `UnmaskedAttributeRequestParams`
         *
         * @param requestParameters
         */
        ProductSummaryAccountsService.prototype.getUnmaskedAttribute = function (requestParameters) {
            return this.accountDataService.unmaskedAttribute(requestParameters, 'body', false, {
                httpHeaderAccept: 'text/plain',
            });
        };
        ProductSummaryAccountsService.prototype.toggleAccountFavorite = function (body, errorTemplateRef, successTemplateRef) {
            var _this = this;
            return this.putAccountFavorite(body).pipe(operators.take(1), operators.tap(function () {
                _this.showNotification(successTemplateRef, 'success');
                _this.updateError.next(undefined);
                _this.pubSub.publish(bbEventToggleAccountFavoriteUpdate, undefined);
            }), operators.catchError(function (error) {
                _this.updateError.next(error);
                _this.showNotification(errorTemplateRef, 'error');
                return rxjs.of(undefined);
            }));
        };
        ProductSummaryAccountsService.prototype.putAccountFavorite = function (accountUserPreferences) {
            return this.accountDataService.updateUserPreferences({ accountUserPreferences: accountUserPreferences }).pipe(operators.catchError(function (error) {
                throw parseError(error);
            }));
        };
        ProductSummaryAccountsService.prototype.getAccounts = function (requestObject) {
            var _this = this;
            var paginationType = requestObject.paginationType || '';
            var from = requestObject.from || 0;
            var params = Object.assign({}, requestObject);
            delete params.paginationType;
            return this.productSummaryDataService.getArrangementsByBusinessFunction(params, exports.HttpResponseType.RESPONSE).pipe(operators.map(function (res) { return _this.mapResponseWithCount(res, { from: from, paginationType: paginationType }); }), operators.catchError(function (error) {
                throw parseError(error);
            }));
        };
        ProductSummaryAccountsService.prototype.mapResponseWithCount = function (response, _a) {
            var from = _a.from, paginationType = _a.paginationType;
            // eslint-disable-next-line no-null/no-null
            if (response.body === null) {
                throw new Error();
            }
            var headerCount = response.headers ? response.headers.get('x-total-count') : undefined;
            var counter = headerCount ? parseInt(headerCount, 10) : response.body.length || 0;
            return {
                count: counter,
                items: response.body || [],
                params: { from: from, paginationType: paginationType },
            };
        };
        ProductSummaryAccountsService.prototype.mergeResponses = function (acc, current) {
            if (acc &&
                acc.items &&
                current &&
                current.items &&
                acc.params.paginationType === exports.PaginationType.LOAD_MORE &&
                current.params.from !== 0) {
                return __spreadArray(__spreadArray([], __read(acc.items)), __read(current.items));
            }
            return current.items;
        };
        ProductSummaryAccountsService.prototype.showNotification = function (templateRef, modifier) {
            this.notificationService.showNotification({
                header: templateRef,
                modifier: modifier,
                message: '',
            });
        };
        ProductSummaryAccountsService.prototype.getAccountsFrom = function (requestObject) {
            requestObject.subscribe(this.requestObject);
        };
        ProductSummaryAccountsService.prototype.refreshAggregatedBalances = function () {
            this.refreshAggregatedBalancesSubject.next(true);
        };
        ProductSummaryAccountsService.prototype.getAggregatedBalances = function () {
            var _this = this;
            var requestParameters = {};
            return this.balancesHttpService.getAggregations(requestParameters).pipe(operators.map(function (response) { return _this.mapResponseToAggregatedBalances(response); }), operators.tap(function () { return _this.aggregatedBalancesErrorSubject.next(undefined); }), operators.catchError(function (error) { return _this.parseAggregatedBalanceError(error); }));
        };
        ProductSummaryAccountsService.prototype.mapResponseToAggregatedBalances = function (aggregations) {
            var allBalances = (aggregations || [{}])[0];
            return allBalances && allBalances.aggregatedBalances;
        };
        ProductSummaryAccountsService.prototype.parseAggregatedBalanceError = function (error) {
            this.aggregatedBalancesErrorSubject.next(error);
            return rxjs.of(undefined);
        };
        ProductSummaryAccountsService.prototype.retriggerGetAccounts = function () {
            this.favoriteRequestComplete.next(true);
        };
        return ProductSummaryAccountsService;
    }());
    ProductSummaryAccountsService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProductSummaryAccountsService, deps: [{ token: i1__namespace.ProductSummaryHttpService }, { token: i1__namespace.ArrangementsHttpService }, { token: i1__namespace.BalancesHttpService }, { token: i2__namespace.NotificationService }, { token: webSdk.PUBSUB }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    ProductSummaryAccountsService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProductSummaryAccountsService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProductSummaryAccountsService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () {
            return [{ type: i1__namespace.ProductSummaryHttpService }, { type: i1__namespace.ArrangementsHttpService }, { type: i1__namespace.BalancesHttpService }, { type: i2__namespace.NotificationService }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [webSdk.PUBSUB]
                        }] }];
        } });

    var toKebabCase = function (accountType) {
        if (accountType === void 0) { accountType = ''; }
        return accountType ? accountType.trim().toLowerCase().split(' ').join('-') : '';
    };
    var isCardNumber = function (account) { return Boolean(account.productKindName && CardProductKindName.includes(account.productKindName.toLowerCase())); };
    var modelItemToBoolean = function (value) {
        if (typeof value === 'boolean') {
            return value;
        }
        return value === 'true';
    };
    var isFavorite = function (account) {
        var accountPreferencesFavoriteValue = account.userPreferences && account.userPreferences.favorite;
        var accountFavoriteValue = 'favorite' in account ? account.favorite : undefined;
        return accountPreferencesFavoriteValue !== null && accountPreferencesFavoriteValue !== void 0 ? accountPreferencesFavoriteValue : accountFavoriteValue;
    };
    var isProductVisible = function (product) {
        if (product.userPreferences && product.userPreferences.visible !== undefined) {
            return product.userPreferences.visible;
        }
        else if (product.visible !== undefined) {
            return product.visible;
        }
        return true;
    };
    var isFunction = function (param) { return typeof param === 'function'; };
    var findBy = function (collection, key, value) { return collection.find(function (item) { return item && item[key] === value; }); };
    var findByName = function (collection, name) { return findBy(collection, 'name', name); };
    var getAccountAlias = function (account) {
        if (account.userPreferences) {
            return account.userPreferences.alias ? account.userPreferences.alias : account.bankAlias || account.name;
        }
        else {
            return account.bankAlias || account.name || ''; // todo: replace with `??` typesScript is upgraded to 3.7.0
        }
    };
    var getProductKindIconName = function (productKindName) {
        var iconName = toKebabCase(productKindName);
        var isDefaultProductKindName = Object.values(exports.DefaultProductKindNameList).some(function (name) { return iconName === name; });
        if (!isDefaultProductKindName) {
            iconName = 'account';
        }
        return iconName + "s";
    };
    /**
     * Gets a valid product number type for a given product
     *
     * @param product
     *
     * for CreditCard/DebitCard:
     * - returns `number` if exists
     * - else `IBAN` if exists
     * - otherwise `BBAN`
     * for other products:
     * - returns `IBAN` if exists
     * - else `BBAN` if exists
     * - otherwise `number`
     */
    var getProductNumberType = function (product) {
        var isCardFormat = isCardNumber(product);
        if (isCardFormat && 'number' in product) {
            return 'cardNumber';
        }
        else if ('IBAN' in product) {
            return 'iban';
        }
        else if ('BBAN' in product || isCardFormat) {
            return 'bban';
        }
        else {
            return 'cardNumber';
        }
    };
    var processErrorMessages = function (messages) { return messages ? messages.join(' ') : undefined; };
    /**
     * Sets the passed unmasked attribute to the item
     *
     * @param item
     * @param attributeName
     * @param attributeValue
     */
    // eslint-disable-next-line @typescript-eslint/ban-types
    var setAttribute = function (item, attributeName, attributeValue) {
        var _a;
        return (Object.assign(Object.assign({}, (item ? item : {})), (attributeName ? (_a = {}, _a[attributeName] = attributeValue, _a) : {})));
    };
    /**
     * Verifies if values is defined (not null and not undefined)
     *
     * @param value
     */
    // eslint-disable-next-line no-null/no-null
    var isDefined = function (value) { return value !== null && value !== undefined; };
    /**
     * Returns configuration property based on the priority
     */
    var filterInputParameters = function (input, prop) { return rxjs.combineLatest([input, prop]).pipe(operators.map(function (_a) {
        var _b = __read(_a, 2), inputVal = _b[0], propVal = _b[1];
        return (inputVal !== undefined ? inputVal : propVal);
    })); };
    /**
     * Caches the request (shares between subscribers)
     *
     * @param request
     */
    var cacheRequest = function (request) { return function (source) { return source.pipe(operators.switchMap(request), operators.publishReplay(1), operators.refCount()); }; };
    /**
     * Returns route parameter
     * takes parameter from component route if parameter exists, otherwise looks for parameter in parent routes
     *
     * @param route
     * @param param
     */
    var getRouteParameter = function (route, param) {
        var routeParam = route.paramMap.pipe(operators.pluck('params', param));
        var allParams = route.parent ? [routeParam, getRouteParameter(route.parent, param)] : [routeParam];
        return rxjs.combineLatest(allParams).pipe(operators.map(function (params) { return params[0] || params[1]; }), operators.map(function (value) { return value !== null && value !== void 0 ? value : ''; }));
    };
    /**
     * Returns true if product has external info (external logo, alias, etc.)
     *
     * @param product
     */
    var hasExternalInfo = function (product) { return product.financialInstitutionId !== undefined; };

    /**
     * A service for getting external info for products
     */
    var ProductsExternalInfoService = /** @class */ (function () {
        function ProductsExternalInfoService(financialInstitutionsHttpService) {
            this.financialInstitutionsHttpService = financialInstitutionsHttpService;
        }
        ProductsExternalInfoService.prototype.getProductsWithExternalInfo = function (products) {
            var _this = this;
            var productsList = Array.isArray(products) ? products : [products];
            var financialInstitutionIds = this.getAssignedFinancialInstitutionIds(productsList);
            return financialInstitutionIds.length
                ? this.getFinancialInstitutions(financialInstitutionIds).pipe(operators.map(function (institutions) { return Array.isArray(products)
                    ? productsList.map(function (product) { return _this.addExternalInfoToProduct(product, institutions); })
                    : _this.addExternalInfoToProduct(products, institutions); }))
                : rxjs.of(products);
        };
        ProductsExternalInfoService.prototype.getAssignedFinancialInstitutionIds = function (items) {
            var itemsWithExternalInfo = items.filter(hasExternalInfo);
            var financialInstitutionIds = itemsWithExternalInfo.map(function (item) { return item.financialInstitutionId; });
            return financialInstitutionIds.filter(function (item, index) { return financialInstitutionIds.indexOf(item, index + 1) === -1; });
        };
        ProductsExternalInfoService.prototype.addExternalInfoToProduct = function (product, institutions) {
            return Object.assign(Object.assign({}, product), this.getExternalInfo(product, institutions));
        };
        ProductsExternalInfoService.prototype.getExternalInfo = function (product, institutions) {
            var isExternalInfoAvailable = hasExternalInfo(product);
            return isExternalInfoAvailable
                ? { financialInstitution: institutions.find(function (institution) { return institution.id === product.financialInstitutionId; }) }
                : {};
        };
        ProductsExternalInfoService.prototype.getFinancialInstitutions = function (ids) {
            return this.financialInstitutionsHttpService.getFinancialInstitutions({ ids: ids }).pipe(operators.pluck('financialInstitutions'));
        };
        return ProductsExternalInfoService;
    }());
    ProductsExternalInfoService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProductsExternalInfoService, deps: [{ token: i1__namespace$1.FinancialInstitutionManagerClientHttpService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    ProductsExternalInfoService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProductsExternalInfoService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProductsExternalInfoService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace$1.FinancialInstitutionManagerClientHttpService }]; } });

    var ProductSummaryUserPermissionsService = /** @class */ (function () {
        function ProductSummaryUserPermissionsService(usersDataService) {
            this.usersDataService = usersDataService;
            this.productSummaryPermissionParameters = {
                resourceName: 'Product Summary',
                functionName: 'Product Summary',
            };
            this.manageArrangementsPermissionParameters = {
                resourceName: 'Product Summary',
                functionName: 'Manage Arrangement Alias',
            };
            this.productSummaryPrivileges = this.usersDataService.getUserPrivileges(this.productSummaryPermissionParameters).pipe(operators.map(function (privileges) { return privileges.map(function (_a) {
                var privilege = _a.privilege;
                return privilege;
            }); }), operators.shareReplay());
            this.managerArrangementsPrivileges = this.usersDataService.getUserPrivileges(this.manageArrangementsPermissionParameters).pipe(operators.map(function (privileges) { return privileges.map(function (_a) {
                var privilege = _a.privilege;
                return privilege;
            }); }), operators.shareReplay());
            this.hasFullViewPermission = this.productSummaryPrivileges.pipe(operators.map(function (privileges) { return privileges.includes(exports.ProductSummaryPrivilege.VIEW); }), operators.shareReplay());
            this.hasFullEditPermission = this.productSummaryPrivileges.pipe(operators.map(function (privileges) { return privileges.includes(exports.ProductSummaryPrivilege.EDIT); }), operators.shareReplay());
            this.hasArrangementAliasEditPermission = this.managerArrangementsPrivileges.pipe(operators.map(function (privileges) { return privileges.includes(exports.ProductSummaryPrivilege.EDIT); }), operators.shareReplay());
            this.allowedAccountNavigationTypes = this.hasFullViewPermission.pipe(operators.map(function (hasFullViewPermission) { return hasFullViewPermission
                ? DefaultAllowedNavigationTypes
                : DefaultAllowedNavigationTypes.filter(function (type) { return type !== exports.AccountNavigationType.BALANCE_HISTORY; }); }), operators.shareReplay());
        }
        return ProductSummaryUserPermissionsService;
    }());
    ProductSummaryUserPermissionsService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProductSummaryUserPermissionsService, deps: [{ token: i1__namespace$2.UsersHttpService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    ProductSummaryUserPermissionsService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProductSummaryUserPermissionsService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProductSummaryUserPermissionsService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace$2.UsersHttpService }]; } });

    /** @dynamic */
    var ProductSummaryWidgetPropertiesService = /** @class */ (function () {
        /**
         * @internal
         * @param defaultConfiguration
         * @param itemModel
         */
        function ProductSummaryWidgetPropertiesService(defaultConfiguration, itemModel) {
            var _this = this;
            this.defaultConfiguration = defaultConfiguration;
            this.itemModel = itemModel;
            /**
             * Widget properties configuration
             */
            this.configuration = new rxjs.BehaviorSubject({});
            /**
             * Gets a property value for each value in `propertyNames` input,
             * joins them into `WidgetProperties` structure
             */
            var propertyNames = Object.keys(defaultConfiguration);
            this.properties = rxjs.combineLatest(propertyNames.map(function (propertyName) { return _this.getWidgetProperty(propertyName); })).pipe(operators.map(function (properties) { return propertyNames.reduce(function (widgetProperties, propertyName, index) {
                var _a;
                return (Object.assign(Object.assign({}, widgetProperties), (_a = {}, _a[propertyName] = properties[index], _a)));
            }, {}); }));
        }
        /**
         * Sets widget properties
         *
         * @param config
         */
        ProductSummaryWidgetPropertiesService.prototype.setConfiguration = function (config) {
            this.configuration.next(config);
        };
        /**
         * Returns observable with a widget property
         *
         * @param propertyName
         */
        ProductSummaryWidgetPropertiesService.prototype.getProperty = function (propertyName) {
            return this.properties.pipe(operators.map(function (properties) { return properties[propertyName]; }));
        };
        /**
         * Returns a widget configuration property,
         * takes the value in the following order:
         * - configuration value if exists (widget input)
         * - item-model value if exists (CXP configuration)
         * - default value (constant value)
         */
        ProductSummaryWidgetPropertiesService.prototype.getWidgetProperty = function (propertyName) {
            var defaultValue = this.defaultConfiguration[propertyName];
            var configurationValue$ = this.configuration.pipe(operators.map(function (configuration) { return configuration[propertyName]; }));
            var modelValue$ = this.itemModel
                ? this.itemModel.property(propertyName, defaultValue)
                : rxjs.of(defaultValue);
            return rxjs.combineLatest([configurationValue$, modelValue$]).pipe(operators.map(function (_a) {
                var _b = __read(_a, 2), configurationValue = _b[0], modelValue = _b[1];
                return (configurationValue !== undefined ? configurationValue : modelValue);
            }));
        };
        return ProductSummaryWidgetPropertiesService;
    }());
    ProductSummaryWidgetPropertiesService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProductSummaryWidgetPropertiesService, deps: [{ token: PRODUCT_SUMMARY_WIDGET_PROPERTIES }, { token: i1__namespace$3.ItemModel, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    ProductSummaryWidgetPropertiesService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProductSummaryWidgetPropertiesService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProductSummaryWidgetPropertiesService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () {
            return [{ type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [PRODUCT_SUMMARY_WIDGET_PROPERTIES]
                        }] }, { type: i1__namespace$3.ItemModel, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var CurrencyToCountryMap = {
        BDT: 'BD',
        EUR: 'EU',
        XOF: 'TG',
        BGN: 'BG',
        BAM: 'BA',
        BBD: 'BB',
        XPF: 'NC',
        BMD: 'BM',
        BND: 'BN',
        BOB: 'BO',
        BHD: 'BH',
        BIF: 'BI',
        BTN: 'BT',
        JMD: 'JM',
        NOK: 'NO',
        BWP: 'BW',
        WST: 'WS',
        USD: 'US',
        BRL: 'BR',
        BSD: 'BS',
        GBP: 'GB',
        BYR: 'BY',
        BZD: 'BZ',
        RUB: 'RU',
        RWF: 'RW',
        RSD: 'RS',
        TMT: 'TM',
        TJS: 'TJ',
        RON: 'RO',
        NZD: 'CK',
        GTQ: 'GT',
        XAF: 'TD',
        JPY: 'JP',
        GYD: 'GY',
        GEL: 'GE',
        XCD: 'AI',
        GNF: 'GN',
        GMD: 'GM',
        DKK: 'DK',
        GIP: 'GI',
        GHS: 'GH',
        OMR: 'OM',
        TND: 'TN',
        JOD: 'JO',
        HRK: 'HR',
        HTG: 'HT',
        HUF: 'HU',
        HKD: 'HK',
        HNL: 'HN',
        AUD: 'AU',
        VEF: 'VE',
        ILS: 'IL',
        PYG: 'PY',
        IQD: 'IQ',
        PAB: 'PA',
        PGK: 'PG',
        PEN: 'PE',
        PKR: 'PK',
        PHP: 'PH',
        PLN: 'PL',
        ZMK: 'ZM',
        MAD: 'MA',
        EGP: 'EG',
        ZAR: 'ZA',
        VND: 'VN',
        SBD: 'SB',
        ETB: 'ET',
        SOS: 'SO',
        ZWL: 'ZW',
        SAR: 'SA',
        ERN: 'ER',
        MDL: 'MD',
        MGA: 'MG',
        UZS: 'UZ',
        MMK: 'MM',
        MOP: 'MO',
        MNT: 'MN',
        MKD: 'MK',
        MUR: 'MU',
        MWK: 'MW',
        MVR: 'MV',
        MRO: 'MR',
        UGX: 'UG',
        TZS: 'TZ',
        MYR: 'MY',
        MXN: 'MX',
        SHP: 'SH',
        FJD: 'FJ',
        FKP: 'FK',
        NIO: 'NI',
        NAD: 'NA',
        VUV: 'VU',
        NGN: 'NG',
        NPR: 'NP',
        CHF: 'LI',
        COP: 'CO',
        CNY: 'CN',
        CLP: 'CL',
        CAD: 'CA',
        CDF: 'CD',
        CZK: 'CZ',
        CRC: 'CR',
        ANG: 'SX',
        CVE: 'CV',
        CUP: 'CU',
        SZL: 'SZ',
        SYP: 'SY',
        KGS: 'KG',
        KES: 'KE',
        SSP: 'SS',
        SRD: 'SR',
        KHR: 'KH',
        KMF: 'KM',
        STD: 'ST',
        KRW: 'KR',
        KPW: 'KP',
        KWD: 'KW',
        SLL: 'SL',
        SCR: 'SC',
        KZT: 'KZ',
        KYD: 'KY',
        SGD: 'SG',
        SEK: 'SE',
        SDG: 'SD',
        DOP: 'DO',
        DJF: 'DJ',
        YER: 'YE',
        DZD: 'DZ',
        UYU: 'UY',
        LBP: 'LB',
        LAK: 'LA',
        TWD: 'TW',
        TTD: 'TT',
        TRY: 'TR',
        LKR: 'LK',
        TOP: 'TO',
        LTL: 'LT',
        LRD: 'LR',
        LSL: 'LS',
        THB: 'TH',
        LYD: 'LY',
        AED: 'AE',
        AFN: 'AF',
        ISK: 'IS',
        IRR: 'IR',
        AMD: 'AM',
        ALL: 'AL',
        AOA: 'AO',
        ARS: 'AR',
        AWG: 'AW',
        INR: 'IN',
        AZN: 'AZ',
        IDR: 'ID',
        UAH: 'UA',
        QAR: 'QA',
        MZN: 'MZ',
    };

    var balanceHistorySeriesMock = {
        items: [
            {
                arrangementId: '3cdb2224-8926-4b4d-a99f-1c9dfbbb4699',
                balanceHistory: [
                    {
                        dateFrom: '2017-05-10T00:00:00.000Z',
                        dateTo: '2017-06-01T00:00:00.000Z',
                        value: {
                            currency: 'EUR',
                            balance: '12',
                        },
                        valuePtc: '12',
                    },
                    {
                        dateFrom: '2017-05-11T00:00:00Z',
                        dateTo: '2017-06-01T00:00:00Z',
                        value: {
                            currency: 'EUR',
                            balance: '22',
                        },
                        valuePtc: '22',
                    },
                    {
                        dateFrom: '2017-05-23T00:00:00+0000',
                        dateTo: '2017-06-01T00:00:00+0000',
                        value: {
                            currency: 'EUR',
                            balance: '32',
                        },
                        valuePtc: '32',
                    },
                    {
                        dateFrom: '2017-06-01T00:00:00.000Z',
                        dateTo: '2017-06-01T00:00:00.000Z',
                        value: {
                            currency: 'EUR',
                            balance: '54',
                        },
                        valuePtc: '54',
                    },
                    {
                        dateFrom: '2017-06-02T00:00:00.000Z',
                        dateTo: '2017-06-01T00:00:00.000Z',
                        value: {
                            currency: 'EUR',
                            balance: '34',
                        },
                        valuePtc: '34',
                    },
                    {
                        dateFrom: '2017-06-12T00:00:00.000Z',
                        dateTo: '2017-06-01T00:00:00.000Z',
                        value: {
                            currency: 'EUR',
                            balance: '4',
                        },
                        valuePtc: '4',
                    },
                    {
                        dateFrom: '2017-06-18T00:00:00.000Z',
                        dateTo: '2017-06-01T00:00:00.000Z',
                        value: {
                            currency: 'EUR',
                            balance: '-14',
                        },
                        valuePtc: '-14',
                    },
                ],
            },
        ],
    };
    var balanceHistoryPaginatedMock = [
        {
            dateFrom: '2017-05-10T00:00:00.000Z',
            dateTo: '2017-06-01T00:00:00.000Z',
            value: {
                currency: 'EUR',
                balance: '12',
            },
            valuePtc: '12',
        },
        {
            dateFrom: '2017-05-11T00:00:00.000Z',
            dateTo: '2017-06-01T00:00:00.000Z',
            value: {
                currency: 'EUR',
                balance: '22',
            },
            valuePtc: '22',
        },
        {
            dateFrom: '2017-05-23T00:00:00.000Z',
            dateTo: '2017-06-01T00:00:00.000Z',
            value: {
                currency: 'EUR',
                balance: '32',
            },
            valuePtc: '32',
        },
        {
            dateFrom: '2017-06-01T00:00:00.000Z',
            dateTo: '2017-06-01T00:00:00.000Z',
            value: {
                currency: 'EUR',
                balance: '54',
            },
            valuePtc: '54',
        },
        {
            dateFrom: '2017-06-02T00:00:00.000Z',
            dateTo: '2017-07-01T00:00:00.000Z',
            value: {
                currency: 'EUR',
                balance: '34',
            },
            valuePtc: '34',
        },
        {
            dateFrom: '2017-06-12T00:00:00.000Z',
            dateTo: '2017-07-01T00:00:00.000Z',
            value: {
                currency: 'EUR',
                balance: '4',
            },
            valuePtc: '4',
        },
        {
            dateFrom: '2017-06-18T00:00:00.000Z',
            dateTo: '2017-07-01T00:00:00.000Z',
            value: {
                currency: 'EUR',
                balance: '-14',
            },
            valuePtc: '-14',
        },
    ];
    var balanceHistoryPaginatedMockWithCount = {
        count: 3,
        items: balanceHistoryPaginatedMock,
        params: { from: 1, paginationType: 'load-more' },
    };
    var emptyBalanceHistoryPaginatedMockWithCount = {
        count: 0,
        items: [],
        params: { from: 0, paginationType: 'pagination' },
    };
    var requestObjectMockSeries = {
        arrangementIds: '1',
        params: {
            dateFrom: '2017-06-18',
            dateTo: '2017-06-18',
            timePeriod: '',
            format: '',
            paginationType: 'pagination',
            from: 0,
        },
    };
    var requestObjectMockPaginated = {
        arrangementId: '1',
        params: {
            dateFrom: '2017-06-18',
            dateTo: '2017-06-18',
            timePeriod: '',
            format: '',
            paginationType: 'pagination',
            from: 0,
        },
    };
    var processedBalanceHistoryMock = [
        {
            name: defaultArrangementName,
            series: [
                {
                    name: new Date('2017-06-01T00:00:00.000Z'),
                    value: '12',
                },
                {
                    name: new Date('2017-06-01T00:00:00Z'),
                    value: '22',
                },
                {
                    name: new Date('2017-06-01T00:00:00+0000'),
                    value: '32',
                },
                {
                    name: new Date('2017-06-01T00:00:00.000Z'),
                    value: '54',
                },
                {
                    name: new Date('2017-06-01T00:00:00.000Z'),
                    value: '34',
                },
                {
                    name: new Date('2017-06-01T00:00:00.000Z'),
                    value: '4',
                },
                {
                    name: new Date('2017-06-01T00:00:00.000Z'),
                    value: 0,
                },
            ],
        },
        {
            name: defaultArrangementName,
            series: [
                {
                    name: new Date('2017-06-01T00:00:00.000Z'),
                    value: 0,
                },
                {
                    name: new Date('2017-06-01T00:00:00.000Z'),
                    value: '-14',
                },
            ],
        },
    ];
    var mockRequestObject = {
        businessFunction: '',
        resourceName: '',
        privilege: '',
        paginationType: exports.PaginationType.LOAD_MORE,
    };
    var mockAccountsResponse = [
        {
            id: '1cdb2224-8926-4b4d-a99f-1c9dfbbb4699',
            externalArrangementId: 'kjh4567-asd1-11e7-b114-b2f933d50000',
            externalLegalEntityId: 'COOOOO1',
            externalProductId: '1234567',
            name: 'Mr and Mrs J. Smith',
            productKindName: 'Current Account',
            bankAlias: 'Secret account',
            bookedBalance: 100.1,
            availableBalance: 100.2,
            creditLimit: 100.3,
            IBAN: 'GB29NWBK60161331926819',
            BBAN: 'BBAN',
            currency: 'EUR',
            externalTransferAllowed: true,
            urgentTransferAllowed: false,
            accruedInterest: 2.2,
            principalAmount: 100.4,
            currentInvestmentValue: 100.5,
            legalEntityIds: ['257da57a-11e4-4553-9175-54baf755069b', 'cd83683b-13f2-43d8-882b-39c9ab27d499'],
            productId: '36c8fc42-ec97-4f83-8a7c-d622625007f3',
            productTypeName: 'Current Account',
            BIC: 'BICExample1',
            bankBranchCode: 'bankBranchCode1',
            accountOpeningDate: '2016-01-28T16:41:41.090Z',
            accountInterestRate: 100.2,
            valueDateBalance: 100.1,
            creditLimitUsage: 100.3,
            creditLimitInterestRate: 100.4,
            creditLimitExpiryDate: '2019-09-28T16:41:41.090Z',
            debitCards: [
                {
                    number: '4578',
                    expiryDate: '2018-08-22T16:41:41.090Z',
                },
                {
                    number: '3241',
                    expiryDate: '2019-01-14T16:41:41.090Z',
                },
            ],
            startDate: '2016-02-28T16:41:41.090Z',
            termUnit: 'Y',
            termNumber: 50,
            maturityDate: '2017-02-28T16:41:41.090Z',
            maturityAmount: 99.5,
            autoRenewalIndicator: true,
            interestPaymentFrequencyUnit: 'M',
            interestPaymentFrequencyNumber: 15,
            interestSettlementAccount: 'interestSettlementAccount1',
            outstandingPrincipalAmount: 100.2,
            monthlyInstalmentAmount: 100.1,
            amountInArrear: 100.3,
            minimumRequiredBalance: 80.4,
            creditCardAccountNumber: '123456',
            validThru: '2019-02-28T16:41:41.090Z',
            applicableInterestRate: 101.2,
            remainingCredit: 50,
            outstandingPayment: 105.5,
            minimumPayment: 51.1,
            minimumPaymentDueDate: '2018-02-28T16:41:41.090Z',
            totalInvestmentValue: 110.2,
            accountHolderAddressLine1: 'accountHolderAddressLine11',
            accountHolderAddressLine2: 'accountHolderAddressLine12',
            creditAccount: true,
            debitAccount: true,
            visible: true,
            lastUpdateDate: '2019-09-28T16:41:41.090Z',
        },
        {
            id: '2222222-8926-4b4d-a99f-1c9dfbbb4610',
            externalArrangementId: 'kjh4567-asd1-11e7-b114-b2f933d50000',
            externalLegalEntityId: 'COOOOO1',
            externalProductId: '1234567',
            name: 'Mr and Mrs J. Smith second one',
            productKindName: 'Current Account',
            bankAlias: 'Secret account Mr and Mrs J. Smith second one',
            bookedBalance: 100.1,
            availableBalance: 100.2,
            creditLimit: 100.3,
            IBAN: 'GB29NWBK60161331926819',
            BBAN: 'BBAN',
            currency: 'EUR',
            externalTransferAllowed: true,
            urgentTransferAllowed: false,
            accruedInterest: 2.2,
            principalAmount: 100.4,
            currentInvestmentValue: 100.5,
            legalEntityIds: ['257da57a-11e4-4553-9175-54baf755069b', 'cd83683b-13f2-43d8-882b-39c9ab27d499'],
            productId: '36c8fc42-ec97-4f83-8a7c-d622625007f3',
            productTypeName: 'Current Account',
            BIC: 'BICExample2',
            bankBranchCode: 'bankBranchCode1',
            accountOpeningDate: '2016-01-28T16:41:41.090Z',
            accountInterestRate: 100.2,
            valueDateBalance: 100.1,
            creditLimitUsage: 100.3,
            creditLimitInterestRate: 100.4,
            creditLimitExpiryDate: '2019-09-28T16:41:41.090Z',
            debitCards: [
                {
                    number: '6378',
                    expiryDate: '2018-02-12T16:41:41.090Z',
                },
                {
                    number: '5111',
                    expiryDate: '2019-03-24T16:41:41.090Z',
                },
            ],
            startDate: '2016-02-28T16:41:41.090Z',
            termUnit: 'Y',
            termNumber: 50,
            maturityDate: '2017-02-28T16:41:41.090Z',
            maturityAmount: 99.5,
            autoRenewalIndicator: true,
            interestPaymentFrequencyUnit: 'M',
            interestPaymentFrequencyNumber: 15,
            interestSettlementAccount: 'interestSettlementAccount1',
            outstandingPrincipalAmount: 100.2,
            monthlyInstalmentAmount: 100.1,
            amountInArrear: 100.3,
            minimumRequiredBalance: 80.4,
            creditCardAccountNumber: '123456',
            validThru: '2019-02-28T16:41:41.090Z',
            applicableInterestRate: 101.2,
            remainingCredit: 50,
            outstandingPayment: 105.5,
            minimumPayment: 51.1,
            minimumPaymentDueDate: '2018-02-28T16:41:41.090Z',
            totalInvestmentValue: 110.2,
            accountHolderAddressLine1: 'accountHolderAddressLine11',
            accountHolderAddressLine2: 'accountHolderAddressLine12',
            creditAccount: true,
            debitAccount: true,
            visible: true,
            lastUpdateDate: '2019-09-28T16:41:41.090Z',
            userPreferences: {
                visible: true,
                alias: 'nice',
                favorite: true,
            },
        },
        {
            id: '1cdb2224-8926-4b4d-a99f-1c9dfbbb4699',
            externalArrangementId: 'kjh4567-asd1-11e7-b114-b2f933d50000',
            externalLegalEntityId: 'COOOOO1',
            externalProductId: '1234567',
            name: 'Mr and Mrs J. Smith',
            productKindName: 'Current Account',
            bankAlias: 'Secret account',
            bookedBalance: 100.1,
            availableBalance: 100.2,
            creditLimit: 100.3,
            IBAN: 'GB29NWBK60161331926819',
            BBAN: 'BBAN',
            currency: 'EUR',
            externalTransferAllowed: true,
            urgentTransferAllowed: false,
            accruedInterest: 2.2,
            principalAmount: 100.4,
            currentInvestmentValue: 100.5,
            legalEntityIds: ['257da57a-11e4-4553-9175-54baf755069b', 'cd83683b-13f2-43d8-882b-39c9ab27d499'],
            productId: '36c8fc42-ec97-4f83-8a7c-d622625007f3',
            productTypeName: 'Current Account',
            BIC: 'BICExample1',
            bankBranchCode: 'bankBranchCode1',
            accountOpeningDate: '2016-01-28T16:41:41.090Z',
            accountInterestRate: 100.2,
            valueDateBalance: 100.1,
            creditLimitUsage: 100.3,
            creditLimitInterestRate: 100.4,
            creditLimitExpiryDate: '2019-09-28T16:41:41.090Z',
            debitCards: [
                {
                    number: '4578',
                    expiryDate: '2018-08-22T16:41:41.090Z',
                },
                {
                    number: '3241',
                    expiryDate: '2019-01-14T16:41:41.090Z',
                },
            ],
            startDate: '2016-02-28T16:41:41.090Z',
            termUnit: 'Y',
            termNumber: 50,
            maturityDate: '2017-02-28T16:41:41.090Z',
            maturityAmount: 99.5,
            autoRenewalIndicator: true,
            interestPaymentFrequencyUnit: 'M',
            interestPaymentFrequencyNumber: 15,
            interestSettlementAccount: 'interestSettlementAccount1',
            outstandingPrincipalAmount: 100.2,
            monthlyInstalmentAmount: 100.1,
            amountInArrear: 100.3,
            minimumRequiredBalance: 80.4,
            creditCardAccountNumber: '123456',
            validThru: '2019-02-28T16:41:41.090Z',
            applicableInterestRate: 101.2,
            remainingCredit: 50,
            outstandingPayment: 105.5,
            minimumPayment: 51.1,
            minimumPaymentDueDate: '2018-02-28T16:41:41.090Z',
            totalInvestmentValue: 110.2,
            accountHolderAddressLine1: 'accountHolderAddressLine11',
            accountHolderAddressLine2: 'accountHolderAddressLine12',
            creditAccount: true,
            debitAccount: true,
            visible: true,
            lastUpdateDate: '2019-09-28T16:41:41.090Z',
            userPreferences: {
                alias: 'nice',
            },
        },
    ];
    var accountsWithCount = {
        count: 3,
        items: mockAccountsResponse,
        params: { from: 1, paginationType: 'load-more' },
    };
    var balanceAggregationResponseMock = [
        {
            aggregatedBalances: [
                {
                    currencyCode: 'EUR',
                    amount: '3289.0',
                    numberOfArrangements: 3,
                },
                {
                    currencyCode: 'USD',
                    amount: '2500.0',
                    numberOfArrangements: 10,
                },
            ],
        },
    ];

    /* eslint-enable */
    // eslint-disable-next-line no-null/no-null
    var isPlainObject = function (obj) { return typeof obj === 'object' && obj !== null; };
    /**
     * Equality check between two "plain" (i.e. JSON compatible) values.
     * By "plain" value, we mean a primitive or an object/array that contains only other primitives and no methods or internal state.
     */
    var isEqual = function (a, b) {
        if (Array.isArray(a) && Array.isArray(b)) {
            return a.length === b.length && a.every(function (aValue, i) { return isEqual(aValue, b[i]); });
        }
        if (Array.isArray(a) || Array.isArray(b)) {
            return false;
        }
        if (isPlainObject(a) && isPlainObject(b)) {
            var aObject_1 = a;
            var bObject_1 = b;
            var aKeys = Object.keys(aObject_1);
            var bKeys = Object.keys(bObject_1);
            return aKeys.length === bKeys.length && aKeys.every(function (aKey) { return isEqual(aObject_1[aKey], bObject_1[aKey]); });
        }
        return a === b;
    };

    var TestHelper = /** @class */ (function () {
        function TestHelper(fixture) {
            this._fixture = fixture;
        }
        TestHelper.prototype.getElement = function (locator) {
            return this._fixture.debugElement.query(platformBrowser.By.css(locator));
        };
        TestHelper.prototype.getElements = function (locator) {
            return this._fixture.debugElement.queryAll(platformBrowser.By.css(locator));
        };
        TestHelper.prototype.getText = function (locator) {
            var element = this.getElement(locator);
            if (element) {
                return element.nativeElement.textContent.trim();
            }
            return undefined;
        };
        TestHelper.prototype.isElementPresent = function (locator) {
            return isDefined(this.getElement(locator));
        };
        return TestHelper;
    }());

    /**
     * Converts number to an absolute value
     * {{ -100 | bbAbsoluteValue }}
     */
    var AbsoluteValuePipe = /** @class */ (function () {
        function AbsoluteValuePipe() {
        }
        /**
         * @name AbsoluteValuePipe#transform
         * @param value - number value
         *
         * @description
         * Converts number to an absolute value
         */
        AbsoluteValuePipe.prototype.transform = function (value) {
            return value !== undefined ? Math.abs(value) : NaN;
        };
        return AbsoluteValuePipe;
    }());
    AbsoluteValuePipe.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AbsoluteValuePipe, deps: [], target: i0__namespace.ɵɵFactoryTarget.Pipe });
    AbsoluteValuePipe.ɵpipe = i0__namespace.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AbsoluteValuePipe, name: "bbAbsoluteValue" });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: AbsoluteValuePipe, decorators: [{
                type: i0.Pipe,
                args: [{
                        name: 'bbAbsoluteValue',
                    }]
            }] });

    var sharedPipes$2 = [i1$4.AccountNumberPipeModule, paymentCardNumberPipe.PaymentCardNumberModule];
    var pipes$3 = [AbsoluteValuePipe];
    var FormatPipeModule = /** @class */ (function () {
        function FormatPipeModule() {
        }
        return FormatPipeModule;
    }());
    FormatPipeModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FormatPipeModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    FormatPipeModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FormatPipeModule, declarations: [AbsoluteValuePipe], imports: [common.CommonModule, i1$4.AccountNumberPipeModule, paymentCardNumberPipe.PaymentCardNumberModule], exports: [i1$4.AccountNumberPipeModule, paymentCardNumberPipe.PaymentCardNumberModule, AbsoluteValuePipe] });
    FormatPipeModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FormatPipeModule, imports: [__spreadArray([common.CommonModule], __read(sharedPipes$2)), i1$4.AccountNumberPipeModule, paymentCardNumberPipe.PaymentCardNumberModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: FormatPipeModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: __spreadArray([common.CommonModule], __read(sharedPipes$2)),
                        declarations: __spreadArray([], __read(pipes$3)),
                        exports: __spreadArray(__spreadArray([], __read(sharedPipes$2)), __read(pipes$3)),
                    }]
            }] });

    /**
     * Gets a valid account number that should be displayed for Product (iban, bban or cardNumber)
     */
    var ProductNumberValuePipe = /** @class */ (function () {
        function ProductNumberValuePipe() {
        }
        /**
         * @name ProductNumberValuePipe#transform
         * @param product - a product that contains account number
         *
         * @description
         * Provides a valid account number for the product,
         * for example:
         * - IBAN for CurrentAccount product
         * - BBAN for CurrentAccount product that doesn't have IBAN
         * - number for CreditCard product
         */
        ProductNumberValuePipe.prototype.transform = function (product) {
            var productNumberType = getProductNumberType(product);
            if (productNumberType === 'iban' && 'IBAN' in product) {
                return product.IBAN;
            }
            else if (productNumberType === 'bban' && 'BBAN' in product) {
                return product.BBAN;
            }
            else if ('number' in product) {
                return product.number;
            }
            return '';
        };
        return ProductNumberValuePipe;
    }());
    ProductNumberValuePipe.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProductNumberValuePipe, deps: [], target: i0__namespace.ɵɵFactoryTarget.Pipe });
    ProductNumberValuePipe.ɵpipe = i0__namespace.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProductNumberValuePipe, name: "bbProductNumberValue" });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProductNumberValuePipe, decorators: [{
                type: i0.Pipe,
                args: [{
                        name: 'bbProductNumberValue',
                    }]
            }] });

    /**
     * Gets a valid account number type that should be displayed for Product (iban, bban or cardNumber)
     */
    var ProductNumberTypePipe = /** @class */ (function () {
        function ProductNumberTypePipe() {
        }
        /**
         * @name ProductNumberTypePipe#transform
         * @param product - a product that contains account number
         *
         * @description
         * Provides a valid account number for the product,
         * for example:
         * - 'iban' for CurrentAccount product
         * - 'bban' for CurrentAccount product that doesn't have IBAN
         * - 'cardNumber' for CreditCard product
         */
        ProductNumberTypePipe.prototype.transform = function (product) {
            return getProductNumberType(product);
        };
        return ProductNumberTypePipe;
    }());
    ProductNumberTypePipe.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProductNumberTypePipe, deps: [], target: i0__namespace.ɵɵFactoryTarget.Pipe });
    ProductNumberTypePipe.ɵpipe = i0__namespace.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProductNumberTypePipe, name: "bbProductNumberType" });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProductNumberTypePipe, decorators: [{
                type: i0.Pipe,
                args: [{
                        name: 'bbProductNumberType',
                    }]
            }] });

    /**
     * Provides numbers format per product or number type
     * a format includes masking and formatting configuration
     *
     * TODO: remove this pipe when all necessary ui-ang components support using `bbAccountNumber` pipe
     */
    var ProductNumberFormatPipe = /** @class */ (function () {
        /**
         * @name ProductNumberFormatPipe#constructor
         * @param accountsDisplayingFormatService - AccountsDisplayingFormatService
         *
         * @internal
         */
        function ProductNumberFormatPipe(accountsDisplayingFormatService) {
            this.accountsDisplayingFormatService = accountsDisplayingFormatService;
        }
        /**
         * @name ProductNumberFormatPipe#transform
         * @param product - product that should be formatted or specific product number type
         *
         * @description
         * Formats account numbers
         */
        ProductNumberFormatPipe.prototype.transform = function (product) {
            var productType = typeof product === 'object' ? getProductNumberType(product) : product;
            var displayingFormat = this.accountsDisplayingFormatService.getDefaultFormat(productType);
            return Object.assign({ length: 0, maskRange: [0, 0] }, displayingFormat);
        };
        return ProductNumberFormatPipe;
    }());
    ProductNumberFormatPipe.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProductNumberFormatPipe, deps: [{ token: i1__namespace$4.AccountsDisplayingFormatService }], target: i0__namespace.ɵɵFactoryTarget.Pipe });
    ProductNumberFormatPipe.ɵpipe = i0__namespace.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProductNumberFormatPipe, name: "bbProductNumberFormat" });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProductNumberFormatPipe, decorators: [{
                type: i0.Pipe,
                args: [{
                        name: 'bbProductNumberFormat',
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$4.AccountsDisplayingFormatService }]; } });

    var sharedPipes$1 = [i1$4.AccountNumberPipeModule, paymentCardNumberPipe.PaymentCardNumberModule];
    var pipes$2 = [ProductNumberValuePipe, ProductNumberTypePipe, ProductNumberFormatPipe];
    var ProductNumberPipeModule = /** @class */ (function () {
        function ProductNumberPipeModule() {
        }
        return ProductNumberPipeModule;
    }());
    ProductNumberPipeModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProductNumberPipeModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ProductNumberPipeModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProductNumberPipeModule, declarations: [ProductNumberValuePipe, ProductNumberTypePipe, ProductNumberFormatPipe], imports: [common.CommonModule, i1$4.AccountNumberPipeModule, paymentCardNumberPipe.PaymentCardNumberModule], exports: [i1$4.AccountNumberPipeModule, paymentCardNumberPipe.PaymentCardNumberModule, ProductNumberValuePipe, ProductNumberTypePipe, ProductNumberFormatPipe] });
    ProductNumberPipeModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProductNumberPipeModule, imports: [__spreadArray([common.CommonModule], __read(sharedPipes$1)), i1$4.AccountNumberPipeModule, paymentCardNumberPipe.PaymentCardNumberModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ProductNumberPipeModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: __spreadArray([common.CommonModule], __read(sharedPipes$1)),
                        declarations: __spreadArray([], __read(pipes$2)),
                        exports: __spreadArray(__spreadArray([], __read(sharedPipes$1)), __read(pipes$2)),
                    }]
            }] });

    /**
     * Verifies if values is defined (not null and not undefined)
     */
    var IsDefinedPipe = /** @class */ (function () {
        function IsDefinedPipe() {
        }
        /**
         * @name IsDefinedPipe#transform
         * @param value - value of any type
         *
         * @description
         * Verifies if values is defined
         * for example:
         * - true for '' string
         * - true for 0 number
         * - false for undefined value
         */
        IsDefinedPipe.prototype.transform = function (value) {
            return isDefined(value);
        };
        return IsDefinedPipe;
    }());
    IsDefinedPipe.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: IsDefinedPipe, deps: [], target: i0__namespace.ɵɵFactoryTarget.Pipe });
    IsDefinedPipe.ɵpipe = i0__namespace.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: IsDefinedPipe, name: "bbIsDefined" });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: IsDefinedPipe, decorators: [{
                type: i0.Pipe,
                args: [{
                        name: 'bbIsDefined',
                    }]
            }] });

    /**
     * Verifies if the passed item is presented in the array
     * Note: deep-equal is not supported
     *
     * @usageNotes
     * ### Example
     * ```html
     * <div *ngIf="{{ item|bbIsArray:array }}"></div>
     * ```
     */
    var IsInArrayPipe = /** @class */ (function () {
        function IsInArrayPipe() {
        }
        /**
         * Verifies if `item` is presented in `array`
         *
         * @param item
         * @param array
         */
        IsInArrayPipe.prototype.transform = function (item, array) {
            if (array && array.length) {
                return array.indexOf(item) !== -1;
            }
            return false;
        };
        return IsInArrayPipe;
    }());
    IsInArrayPipe.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: IsInArrayPipe, deps: [], target: i0__namespace.ɵɵFactoryTarget.Pipe });
    IsInArrayPipe.ɵpipe = i0__namespace.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: IsInArrayPipe, name: "bbIsInArray" });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: IsInArrayPipe, decorators: [{
                type: i0.Pipe,
                args: [{ name: 'bbIsInArray' }]
            }] });

    /**
     * Verifies if the passed item is a percent value
     *
     * @usageNotes
     * ### Example
     * ```html
     * <div *ngIf="{{ "10%"|bbIsPercentValue }}"></div>
     * ```
     */
    var IsPercentValue = /** @class */ (function () {
        function IsPercentValue() {
        }
        /**
         * Verifies if the passed item is a percent value
         *
         * @param item
         */
        IsPercentValue.prototype.transform = function (item) {
            if (isDefined(item) && typeof item === 'string') {
                var percentIndex = item.indexOf('%');
                return percentIndex === 0 || percentIndex === item.length - 1;
            }
            return false;
        };
        return IsPercentValue;
    }());
    IsPercentValue.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: IsPercentValue, deps: [], target: i0__namespace.ɵɵFactoryTarget.Pipe });
    IsPercentValue.ɵpipe = i0__namespace.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: IsPercentValue, name: "bbIsPercentValue" });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: IsPercentValue, decorators: [{
                type: i0.Pipe,
                args: [{ name: 'bbIsPercentValue' }]
            }] });

    /**
     * Verifies if "kind" of productKindItem is equal to expected "kind"
     *
     * @usageNotes
     * ### Example
     * ```html
     * <div *ngIf="productKind | bbIsProductKind:expectedProductKindType"></div>
     * ```
     */
    var IsProductKindPipe = /** @class */ (function () {
        function IsProductKindPipe() {
        }
        /**
         * Verifies if "kind" of productKindItem is equal to expected "kind"
         *
         * @param productKindItem
         * @param expectedProductKindType
         */
        IsProductKindPipe.prototype.transform = function (productKindItem, expectedProductKindType) {
            if (isDefined(productKindItem === null || productKindItem === void 0 ? void 0 : productKindItem.kindUri)) {
                return Array.isArray(expectedProductKindType)
                    ? expectedProductKindType.includes(productKindItem === null || productKindItem === void 0 ? void 0 : productKindItem.kindUri)
                    : (productKindItem === null || productKindItem === void 0 ? void 0 : productKindItem.kindUri) === expectedProductKindType;
            }
            return false;
        };
        return IsProductKindPipe;
    }());
    IsProductKindPipe.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: IsProductKindPipe, deps: [], target: i0__namespace.ɵɵFactoryTarget.Pipe });
    IsProductKindPipe.ɵpipe = i0__namespace.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: IsProductKindPipe, name: "bbIsProductKind" });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: IsProductKindPipe, decorators: [{
                type: i0.Pipe,
                args: [{ name: 'bbIsProductKind' }]
            }] });

    var pipes$1 = [IsDefinedPipe, IsInArrayPipe, IsPercentValue, IsProductKindPipe];
    var ValidationModule = /** @class */ (function () {
        function ValidationModule() {
        }
        return ValidationModule;
    }());
    ValidationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ValidationModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ValidationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ValidationModule, declarations: [IsDefinedPipe, IsInArrayPipe, IsPercentValue, IsProductKindPipe], imports: [common.CommonModule], exports: [IsDefinedPipe, IsInArrayPipe, IsPercentValue, IsProductKindPipe] });
    ValidationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ValidationModule, imports: [[common.CommonModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: ValidationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [common.CommonModule],
                        declarations: __spreadArray([], __read(pipes$1)),
                        exports: __spreadArray([], __read(pipes$1)),
                    }]
            }] });

    /**
     * Returns localised info of date of update
     *
     * @usageNotes
     * ### Example
     * ```html
     * <p>{{ '2020-10-10' | bbDateUpdateAgo }}</p>
     * <p>{{ '2020-10-10' | bbDateUpdateAgo:'mediumDate' }}</p>
     * ```
     */
    var DateUpdatedAgoPipe = /** @class */ (function () {
        /**
         * @name DateUpdatedAgoPipe#constructor
         * @param datePipe - BbDatePipe
         *
         * @internal
         */
        function DateUpdatedAgoPipe(datePipe) {
            this.datePipe = datePipe;
            this.millisecondsInPeriod = {
                day: 86400000,
                hours: 7200000,
                hour: 3600000,
                minutes: 120000,
                minute: 60000,
            };
            this.localisationByPeriod = {
                date: function (date) { return $localize(templateObject_1 || (templateObject_1 = __makeTemplateObject([":@@product-summary.update-date.date:Updated on ", ""], [":@@product-summary.update-date.date:Updated on ", ""])), date); },
                hours: function (hours) { return $localize(templateObject_2 || (templateObject_2 = __makeTemplateObject([":@@product-summary.update-date.hours:Updated ", " hours ago"], [":@@product-summary.update-date.hours:Updated ", " hours ago"])), hours); },
                hour: function () { return $localize(templateObject_3 || (templateObject_3 = __makeTemplateObject([":@@product-summary.update-date.hour:Updated 1 hour ago"], [":@@product-summary.update-date.hour:Updated 1 hour ago"]))); },
                minutes: function (minutes) { return $localize(templateObject_4 || (templateObject_4 = __makeTemplateObject([":@@product-summary.update-date.minutes:Updated ", " minutes ago"], [":@@product-summary.update-date.minutes:Updated ", " minutes ago"])), minutes); },
                minute: function () { return $localize(templateObject_5 || (templateObject_5 = __makeTemplateObject([":@@product-summary.update-date.minute:Updated 1 minute ago"], [":@@product-summary.update-date.minute:Updated 1 minute ago"]))); },
            };
        }
        /**
         * @name DateUpdatedAgoPipe#transform
         * @param updateTimestamp - update date
         * @param dateFormat - the format type for the date to be formatted (for update time >= 1 day ago)
         *
         * @description
         * Returns localised info of date of update
         *
         * Example:
         *  transform(hourAgo) - 'Updated 1 hour ago'
         *  transform(minuteAgo) - 'Updated 1 minute ago'
         */
        DateUpdatedAgoPipe.prototype.transform = function (updateTimestamp, dateFormat) {
            if (dateFormat === void 0) { dateFormat = 'longDate'; }
            var millisecondsAgo = Math.max(new Date().getTime() - new Date(updateTimestamp).getTime(), 0);
            if (millisecondsAgo < this.millisecondsInPeriod.minutes) {
                return this.localisationByPeriod.minute();
            }
            else if (millisecondsAgo < this.millisecondsInPeriod.hour) {
                var minutesAgo = Math.floor(millisecondsAgo / this.millisecondsInPeriod.minute);
                return this.localisationByPeriod.minutes(minutesAgo);
            }
            else if (millisecondsAgo < this.millisecondsInPeriod.hours) {
                return this.localisationByPeriod.hour();
            }
            else if (millisecondsAgo < this.millisecondsInPeriod.day) {
                var hoursAgo = Math.floor(millisecondsAgo / this.millisecondsInPeriod.hour);
                return this.localisationByPeriod.hours(hoursAgo);
            }
            else {
                var updateDate = this.datePipe.transform(updateTimestamp, dateFormat);
                return this.localisationByPeriod.date(updateDate);
            }
        };
        return DateUpdatedAgoPipe;
    }());
    DateUpdatedAgoPipe.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DateUpdatedAgoPipe, deps: [{ token: i1__namespace$5.BbDatePipe }], target: i0__namespace.ɵɵFactoryTarget.Pipe });
    DateUpdatedAgoPipe.ɵpipe = i0__namespace.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DateUpdatedAgoPipe, name: "bbDateUpdatedAgo" });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DateUpdatedAgoPipe, decorators: [{
                type: i0.Pipe,
                args: [{
                        name: 'bbDateUpdatedAgo',
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$5.BbDatePipe }]; } });
    var templateObject_1, templateObject_2, templateObject_3, templateObject_4, templateObject_5;

    var sharedPipes = [i1$5.BbDatePipeModule];
    var pipes = [DateUpdatedAgoPipe];
    var DatePipeModule = /** @class */ (function () {
        function DatePipeModule() {
        }
        return DatePipeModule;
    }());
    DatePipeModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DatePipeModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    DatePipeModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DatePipeModule, declarations: [DateUpdatedAgoPipe], imports: [common.CommonModule, i1$5.BbDatePipeModule], exports: [DateUpdatedAgoPipe, i1$5.BbDatePipeModule] });
    DatePipeModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DatePipeModule, providers: [i1$5.BbDatePipe], imports: [__spreadArray([common.CommonModule], __read(sharedPipes)), i1$5.BbDatePipeModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0__namespace, type: DatePipeModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: __spreadArray([common.CommonModule], __read(sharedPipes)),
                        declarations: __spreadArray([], __read(pipes)),
                        exports: __spreadArray(__spreadArray([], __read(pipes)), __read(sharedPipes)),
                        providers: [i1$5.BbDatePipe],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.ACCOUNT_ALIAS_DISPLAYING_LEVEL = ACCOUNT_ALIAS_DISPLAYING_LEVEL;
    exports.AbsoluteValuePipe = AbsoluteValuePipe;
    exports.AccountsOverviewAccessDenied = AccountsOverviewAccessDenied;
    exports.AccountsOverviewBadRequest = AccountsOverviewBadRequest;
    exports.AccountsOverviewConnectivityError = AccountsOverviewConnectivityError;
    exports.AccountsOverviewNotFound = AccountsOverviewNotFound;
    exports.AccountsOverviewUnknownError = AccountsOverviewUnknownError;
    exports.BalanceHistoryAccessDenied = BalanceHistoryAccessDenied;
    exports.BalanceHistoryBadRequest = BalanceHistoryBadRequest;
    exports.BalanceHistoryCommonService = BalanceHistoryCommonService;
    exports.BalanceHistoryConnectivityError = BalanceHistoryConnectivityError;
    exports.BalanceHistoryNotFound = BalanceHistoryNotFound;
    exports.BalanceHistoryUnknownError = BalanceHistoryUnknownError;
    exports.CardProductKindName = CardProductKindName;
    exports.CurrencyToCountryMap = CurrencyToCountryMap;
    exports.DEFAULT_DEBOUNCE_TIME = DEFAULT_DEBOUNCE_TIME;
    exports.DatePipeModule = DatePipeModule;
    exports.DateUpdatedAgoPipe = DateUpdatedAgoPipe;
    exports.DefaultAllowedNavigationTypes = DefaultAllowedNavigationTypes;
    exports.DefaultProductKindName = DefaultProductKindName;
    exports.DomAttributesService = DomAttributesService;
    exports.DownloadResourcesService = DownloadResourcesService;
    exports.EXTRA_SMALL_SCREEN_SIZE = EXTRA_SMALL_SCREEN_SIZE;
    exports.FormatPipeModule = FormatPipeModule;
    exports.IsDefinedPipe = IsDefinedPipe;
    exports.IsInArrayPipe = IsInArrayPipe;
    exports.IsPercentValue = IsPercentValue;
    exports.IsProductKindPipe = IsProductKindPipe;
    exports.PRODUCT_SUMMARY_WIDGET_PROPERTIES = PRODUCT_SUMMARY_WIDGET_PROPERTIES;
    exports.ProductNumberFormatPipe = ProductNumberFormatPipe;
    exports.ProductNumberPipeModule = ProductNumberPipeModule;
    exports.ProductNumberTypePipe = ProductNumberTypePipe;
    exports.ProductNumberValuePipe = ProductNumberValuePipe;
    exports.ProductSummaryAccountDetailsBaseComponent = ProductSummaryAccountDetailsBaseComponent;
    exports.ProductSummaryAccountDetailsBaseModule = ProductSummaryAccountDetailsBaseModule;
    exports.ProductSummaryAccountsService = ProductSummaryAccountsService;
    exports.ProductSummaryCommon = ProductSummaryCommon;
    exports.ProductSummaryUserPermissionsService = ProductSummaryUserPermissionsService;
    exports.ProductSummaryWidgetPropertiesService = ProductSummaryWidgetPropertiesService;
    exports.ProductsExternalInfoService = ProductsExternalInfoService;
    exports.ResponsiveContainerComponent = ResponsiveContainerComponent;
    exports.ResponsiveContainerModule = ResponsiveContainerModule;
    exports.SMALL_SCREEN_SIZE = SMALL_SCREEN_SIZE;
    exports.TestHelper = TestHelper;
    exports.UserPreferencesValidationSettings = UserPreferencesValidationSettings;
    exports.ValidationModule = ValidationModule;
    exports.WINDOW = WINDOW;
    exports.WidgetProperty = WidgetProperty;
    exports.WindowProvider = WindowProvider;
    exports.accountsWithCount = accountsWithCount;
    exports.balanceAggregationResponseMock = balanceAggregationResponseMock;
    exports.balanceHistoryPaginatedMock = balanceHistoryPaginatedMock;
    exports.balanceHistoryPaginatedMockWithCount = balanceHistoryPaginatedMockWithCount;
    exports.balanceHistorySeriesMock = balanceHistorySeriesMock;
    exports.bbEventToggleAccountFavoriteUpdate = bbEventToggleAccountFavoriteUpdate;
    exports.cacheRequest = cacheRequest;
    exports.defaultArrangementName = defaultArrangementName;
    exports.emptyBalanceHistoryPaginatedMockWithCount = emptyBalanceHistoryPaginatedMockWithCount;
    exports.filterInputParameters = filterInputParameters;
    exports.findBy = findBy;
    exports.findByName = findByName;
    exports.getAccountAlias = getAccountAlias;
    exports.getProductKindIconName = getProductKindIconName;
    exports.getProductNumberType = getProductNumberType;
    exports.getRouteParameter = getRouteParameter;
    exports.hasExternalInfo = hasExternalInfo;
    exports.isCardNumber = isCardNumber;
    exports.isDefined = isDefined;
    exports.isEqual = isEqual;
    exports.isFavorite = isFavorite;
    exports.isFunction = isFunction;
    exports.isPlainObject = isPlainObject;
    exports.isProductVisible = isProductVisible;
    exports.mockAccountsResponse = mockAccountsResponse;
    exports.mockRequestObject = mockRequestObject;
    exports.modelItemToBoolean = modelItemToBoolean;
    exports.parseBalanceHistoryError = parseBalanceHistoryError;
    exports.parseError = parseError;
    exports.processErrorMessages = processErrorMessages;
    exports.processedBalanceHistoryMock = processedBalanceHistoryMock;
    exports.requestObjectMockPaginated = requestObjectMockPaginated;
    exports.requestObjectMockSeries = requestObjectMockSeries;
    exports.setAttribute = setAttribute;
    exports.toKebabCase = toKebabCase;
    exports.windowFactory = windowFactory;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-product-summary-common-ang.umd.js.map
