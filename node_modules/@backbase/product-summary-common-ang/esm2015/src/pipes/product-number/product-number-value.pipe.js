import { Pipe } from '@angular/core';
import { getProductNumberType } from '../../helpers/helpers';
import * as i0 from "@angular/core";
/**
 * Gets a valid account number that should be displayed for Product (iban, bban or cardNumber)
 */
export class ProductNumberValuePipe {
    /**
     * @name ProductNumberValuePipe#transform
     * @param product - a product that contains account number
     *
     * @description
     * Provides a valid account number for the product,
     * for example:
     * - IBAN for CurrentAccount product
     * - BBAN for CurrentAccount product that doesn't have IBAN
     * - number for CreditCard product
     */
    transform(product) {
        const productNumberType = getProductNumberType(product);
        if (productNumberType === 'iban' && 'IBAN' in product) {
            return product.IBAN;
        }
        else if (productNumberType === 'bban' && 'BBAN' in product) {
            return product.BBAN;
        }
        else if ('number' in product) {
            return product.number;
        }
        return '';
    }
}
ProductNumberValuePipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductNumberValuePipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
ProductNumberValuePipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductNumberValuePipe, name: "bbProductNumberValue" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductNumberValuePipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'bbProductNumberValue',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZHVjdC1udW1iZXItdmFsdWUucGlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2xpYnMvcHJvZHVjdC1zdW1tYXJ5LWNvbW1vbi1hbmcvc3JjL3BpcGVzL3Byb2R1Y3QtbnVtYmVyL3Byb2R1Y3QtbnVtYmVyLXZhbHVlLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFHcEQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7O0FBRTdEOztHQUVHO0FBSUgsTUFBTSxPQUFPLHNCQUFzQjtJQUNqQzs7Ozs7Ozs7OztPQVVHO0lBQ0gsU0FBUyxDQUFDLE9BQXFDO1FBQzdDLE1BQU0saUJBQWlCLEdBQUcsb0JBQW9CLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFeEQsSUFBSSxpQkFBaUIsS0FBSyxNQUFNLElBQUksTUFBTSxJQUFJLE9BQU8sRUFBRTtZQUNyRCxPQUFPLE9BQU8sQ0FBQyxJQUFjLENBQUM7U0FDL0I7YUFBTSxJQUFJLGlCQUFpQixLQUFLLE1BQU0sSUFBSSxNQUFNLElBQUksT0FBTyxFQUFFO1lBQzVELE9BQU8sT0FBTyxDQUFDLElBQWMsQ0FBQztTQUMvQjthQUFNLElBQUksUUFBUSxJQUFJLE9BQU8sRUFBRTtZQUM5QixPQUFPLE9BQU8sQ0FBQyxNQUFnQixDQUFDO1NBQ2pDO1FBRUQsT0FBTyxFQUFFLENBQUM7SUFDWixDQUFDOztvSEF4QlUsc0JBQXNCO2tIQUF0QixzQkFBc0I7NEZBQXRCLHNCQUFzQjtrQkFIbEMsSUFBSTttQkFBQztvQkFDSixJQUFJLEVBQUUsc0JBQXNCO2lCQUM3QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFByb2R1Y3RTdW1tYXJ5SXRlbSB9IGZyb20gJ0BiYWNrYmFzZS9kYXRhLWFuZy9hcnJhbmdlbWVudHMnO1xuaW1wb3J0IHsgUHJvZHVjdCB9IGZyb20gJy4uLy4uL21vZGVsL3Byb2R1Y3Qtc3VtbWFyeS10eXBlcyc7XG5pbXBvcnQgeyBnZXRQcm9kdWN0TnVtYmVyVHlwZSB9IGZyb20gJy4uLy4uL2hlbHBlcnMvaGVscGVycyc7XG5cbi8qKlxuICogR2V0cyBhIHZhbGlkIGFjY291bnQgbnVtYmVyIHRoYXQgc2hvdWxkIGJlIGRpc3BsYXllZCBmb3IgUHJvZHVjdCAoaWJhbiwgYmJhbiBvciBjYXJkTnVtYmVyKVxuICovXG5AUGlwZSh7XG4gIG5hbWU6ICdiYlByb2R1Y3ROdW1iZXJWYWx1ZScsXG59KVxuZXhwb3J0IGNsYXNzIFByb2R1Y3ROdW1iZXJWYWx1ZVBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgLyoqXG4gICAqIEBuYW1lIFByb2R1Y3ROdW1iZXJWYWx1ZVBpcGUjdHJhbnNmb3JtXG4gICAqIEBwYXJhbSBwcm9kdWN0IC0gYSBwcm9kdWN0IHRoYXQgY29udGFpbnMgYWNjb3VudCBudW1iZXJcbiAgICpcbiAgICogQGRlc2NyaXB0aW9uXG4gICAqIFByb3ZpZGVzIGEgdmFsaWQgYWNjb3VudCBudW1iZXIgZm9yIHRoZSBwcm9kdWN0LFxuICAgKiBmb3IgZXhhbXBsZTpcbiAgICogLSBJQkFOIGZvciBDdXJyZW50QWNjb3VudCBwcm9kdWN0XG4gICAqIC0gQkJBTiBmb3IgQ3VycmVudEFjY291bnQgcHJvZHVjdCB0aGF0IGRvZXNuJ3QgaGF2ZSBJQkFOXG4gICAqIC0gbnVtYmVyIGZvciBDcmVkaXRDYXJkIHByb2R1Y3RcbiAgICovXG4gIHRyYW5zZm9ybShwcm9kdWN0OiBQcm9kdWN0U3VtbWFyeUl0ZW0gfCBQcm9kdWN0KTogc3RyaW5nIHtcbiAgICBjb25zdCBwcm9kdWN0TnVtYmVyVHlwZSA9IGdldFByb2R1Y3ROdW1iZXJUeXBlKHByb2R1Y3QpO1xuXG4gICAgaWYgKHByb2R1Y3ROdW1iZXJUeXBlID09PSAnaWJhbicgJiYgJ0lCQU4nIGluIHByb2R1Y3QpIHtcbiAgICAgIHJldHVybiBwcm9kdWN0LklCQU4gYXMgc3RyaW5nO1xuICAgIH0gZWxzZSBpZiAocHJvZHVjdE51bWJlclR5cGUgPT09ICdiYmFuJyAmJiAnQkJBTicgaW4gcHJvZHVjdCkge1xuICAgICAgcmV0dXJuIHByb2R1Y3QuQkJBTiBhcyBzdHJpbmc7XG4gICAgfSBlbHNlIGlmICgnbnVtYmVyJyBpbiBwcm9kdWN0KSB7XG4gICAgICByZXR1cm4gcHJvZHVjdC5udW1iZXIgYXMgc3RyaW5nO1xuICAgIH1cblxuICAgIHJldHVybiAnJztcbiAgfVxufVxuIl19