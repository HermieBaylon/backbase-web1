import { Pipe } from '@angular/core';
import { getProductNumberType } from '../../helpers/helpers';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/account-number-pipe";
/**
 * Provides numbers format per product or number type
 * a format includes masking and formatting configuration
 *
 * TODO: remove this pipe when all necessary ui-ang components support using `bbAccountNumber` pipe
 */
export class ProductNumberFormatPipe {
    /**
     * @name ProductNumberFormatPipe#constructor
     * @param accountsDisplayingFormatService - AccountsDisplayingFormatService
     *
     * @internal
     */
    constructor(accountsDisplayingFormatService) {
        this.accountsDisplayingFormatService = accountsDisplayingFormatService;
    }
    /**
     * @name ProductNumberFormatPipe#transform
     * @param product - product that should be formatted or specific product number type
     *
     * @description
     * Formats account numbers
     */
    transform(product) {
        const productType = typeof product === 'object' ? getProductNumberType(product) : product;
        const displayingFormat = this.accountsDisplayingFormatService.getDefaultFormat(productType);
        return Object.assign({ length: 0, maskRange: [0, 0] }, displayingFormat);
    }
}
ProductNumberFormatPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductNumberFormatPipe, deps: [{ token: i1.AccountsDisplayingFormatService }], target: i0.ɵɵFactoryTarget.Pipe });
ProductNumberFormatPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductNumberFormatPipe, name: "bbProductNumberFormat" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductNumberFormatPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'bbProductNumberFormat',
                }]
        }], ctorParameters: function () { return [{ type: i1.AccountsDisplayingFormatService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZHVjdC1udW1iZXItZm9ybWF0LnBpcGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL3Byb2R1Y3Qtc3VtbWFyeS1jb21tb24tYW5nL3NyYy9waXBlcy9wcm9kdWN0LW51bWJlci9wcm9kdWN0LW51bWJlci1mb3JtYXQucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUtwRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQzs7O0FBRTdEOzs7OztHQUtHO0FBSUgsTUFBTSxPQUFPLHVCQUF1QjtJQUNsQzs7Ozs7T0FLRztJQUNILFlBQTZCLCtCQUFnRTtRQUFoRSxvQ0FBK0IsR0FBL0IsK0JBQStCLENBQWlDO0lBQUcsQ0FBQztJQUVqRzs7Ozs7O09BTUc7SUFDSCxTQUFTLENBQUMsT0FBeUQ7UUFDakUsTUFBTSxXQUFXLEdBQUcsT0FBTyxPQUFPLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDO1FBQzFGLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLCtCQUErQixDQUFDLGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBRTVGLHVCQUFTLE1BQU0sRUFBRSxDQUFDLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFLLGdCQUFnQixFQUFHO0lBQy9ELENBQUM7O3FIQXJCVSx1QkFBdUI7bUhBQXZCLHVCQUF1Qjs0RkFBdkIsdUJBQXVCO2tCQUhuQyxJQUFJO21CQUFDO29CQUNKLElBQUksRUFBRSx1QkFBdUI7aUJBQzlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWNjb3VudE51bWJlclR5cGUsIEFjY291bnRzRGlzcGxheWluZ0Zvcm1hdFNlcnZpY2UgfSBmcm9tICdAYmFja2Jhc2UvdWktYW5nL2FjY291bnQtbnVtYmVyLXBpcGUnO1xuaW1wb3J0IHsgUGF5bWVudENhcmROdW1iZXJGb3JtYXQgfSBmcm9tICdAYmFja2Jhc2UvdWktYW5nL3BheW1lbnQtY2FyZC1udW1iZXItcGlwZSc7XG5pbXBvcnQgeyBQcm9kdWN0U3VtbWFyeUl0ZW0gfSBmcm9tICdAYmFja2Jhc2UvZGF0YS1hbmcvYXJyYW5nZW1lbnRzJztcbmltcG9ydCB7IFByb2R1Y3QgfSBmcm9tICcuLi8uLi9tb2RlbC9wcm9kdWN0LXN1bW1hcnktdHlwZXMnO1xuaW1wb3J0IHsgZ2V0UHJvZHVjdE51bWJlclR5cGUgfSBmcm9tICcuLi8uLi9oZWxwZXJzL2hlbHBlcnMnO1xuXG4vKipcbiAqIFByb3ZpZGVzIG51bWJlcnMgZm9ybWF0IHBlciBwcm9kdWN0IG9yIG51bWJlciB0eXBlXG4gKiBhIGZvcm1hdCBpbmNsdWRlcyBtYXNraW5nIGFuZCBmb3JtYXR0aW5nIGNvbmZpZ3VyYXRpb25cbiAqXG4gKiBUT0RPOiByZW1vdmUgdGhpcyBwaXBlIHdoZW4gYWxsIG5lY2Vzc2FyeSB1aS1hbmcgY29tcG9uZW50cyBzdXBwb3J0IHVzaW5nIGBiYkFjY291bnROdW1iZXJgIHBpcGVcbiAqL1xuQFBpcGUoe1xuICBuYW1lOiAnYmJQcm9kdWN0TnVtYmVyRm9ybWF0Jyxcbn0pXG5leHBvcnQgY2xhc3MgUHJvZHVjdE51bWJlckZvcm1hdFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcbiAgLyoqXG4gICAqIEBuYW1lIFByb2R1Y3ROdW1iZXJGb3JtYXRQaXBlI2NvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSBhY2NvdW50c0Rpc3BsYXlpbmdGb3JtYXRTZXJ2aWNlIC0gQWNjb3VudHNEaXNwbGF5aW5nRm9ybWF0U2VydmljZVxuICAgKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgYWNjb3VudHNEaXNwbGF5aW5nRm9ybWF0U2VydmljZTogQWNjb3VudHNEaXNwbGF5aW5nRm9ybWF0U2VydmljZSkge31cblxuICAvKipcbiAgICogQG5hbWUgUHJvZHVjdE51bWJlckZvcm1hdFBpcGUjdHJhbnNmb3JtXG4gICAqIEBwYXJhbSBwcm9kdWN0IC0gcHJvZHVjdCB0aGF0IHNob3VsZCBiZSBmb3JtYXR0ZWQgb3Igc3BlY2lmaWMgcHJvZHVjdCBudW1iZXIgdHlwZVxuICAgKlxuICAgKiBAZGVzY3JpcHRpb25cbiAgICogRm9ybWF0cyBhY2NvdW50IG51bWJlcnNcbiAgICovXG4gIHRyYW5zZm9ybShwcm9kdWN0OiBQcm9kdWN0U3VtbWFyeUl0ZW0gfCBQcm9kdWN0IHwgQWNjb3VudE51bWJlclR5cGUpOiBQYXltZW50Q2FyZE51bWJlckZvcm1hdCB7XG4gICAgY29uc3QgcHJvZHVjdFR5cGUgPSB0eXBlb2YgcHJvZHVjdCA9PT0gJ29iamVjdCcgPyBnZXRQcm9kdWN0TnVtYmVyVHlwZShwcm9kdWN0KSA6IHByb2R1Y3Q7XG4gICAgY29uc3QgZGlzcGxheWluZ0Zvcm1hdCA9IHRoaXMuYWNjb3VudHNEaXNwbGF5aW5nRm9ybWF0U2VydmljZS5nZXREZWZhdWx0Rm9ybWF0KHByb2R1Y3RUeXBlKTtcblxuICAgIHJldHVybiB7IGxlbmd0aDogMCwgbWFza1JhbmdlOiBbMCwgMF0sIC4uLmRpc3BsYXlpbmdGb3JtYXQgfTtcbiAgfVxufVxuIl19