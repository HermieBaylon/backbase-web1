import { Pipe } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/date-pipe";
/**
 * Returns localised info of date of update
 *
 * @usageNotes
 * ### Example
 * ```html
 * <p>{{ '2020-10-10' | bbDateUpdateAgo }}</p>
 * <p>{{ '2020-10-10' | bbDateUpdateAgo:'mediumDate' }}</p>
 * ```
 */
export class DateUpdatedAgoPipe {
    /**
     * @name DateUpdatedAgoPipe#constructor
     * @param datePipe - BbDatePipe
     *
     * @internal
     */
    constructor(datePipe) {
        this.datePipe = datePipe;
        this.millisecondsInPeriod = {
            day: 86400000,
            hours: 7200000,
            hour: 3600000,
            minutes: 120000,
            minute: 60000,
        };
        this.localisationByPeriod = {
            date: (date) => $localize `:@@product-summary.update-date.date:Updated on ${date}`,
            hours: (hours) => $localize `:@@product-summary.update-date.hours:Updated ${hours} hours ago`,
            hour: () => $localize `:@@product-summary.update-date.hour:Updated 1 hour ago`,
            minutes: (minutes) => $localize `:@@product-summary.update-date.minutes:Updated ${minutes} minutes ago`,
            minute: () => $localize `:@@product-summary.update-date.minute:Updated 1 minute ago`,
        };
    }
    /**
     * @name DateUpdatedAgoPipe#transform
     * @param updateTimestamp - update date
     * @param dateFormat - the format type for the date to be formatted (for update time >= 1 day ago)
     *
     * @description
     * Returns localised info of date of update
     *
     * Example:
     *  transform(hourAgo) - 'Updated 1 hour ago'
     *  transform(minuteAgo) - 'Updated 1 minute ago'
     */
    transform(updateTimestamp, dateFormat = 'longDate') {
        const millisecondsAgo = Math.max(new Date().getTime() - new Date(updateTimestamp).getTime(), 0);
        if (millisecondsAgo < this.millisecondsInPeriod.minutes) {
            return this.localisationByPeriod.minute();
        }
        else if (millisecondsAgo < this.millisecondsInPeriod.hour) {
            const minutesAgo = Math.floor(millisecondsAgo / this.millisecondsInPeriod.minute);
            return this.localisationByPeriod.minutes(minutesAgo);
        }
        else if (millisecondsAgo < this.millisecondsInPeriod.hours) {
            return this.localisationByPeriod.hour();
        }
        else if (millisecondsAgo < this.millisecondsInPeriod.day) {
            const hoursAgo = Math.floor(millisecondsAgo / this.millisecondsInPeriod.hour);
            return this.localisationByPeriod.hours(hoursAgo);
        }
        else {
            const updateDate = this.datePipe.transform(updateTimestamp, dateFormat);
            return this.localisationByPeriod.date(updateDate);
        }
    }
}
DateUpdatedAgoPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DateUpdatedAgoPipe, deps: [{ token: i1.BbDatePipe }], target: i0.ɵɵFactoryTarget.Pipe });
DateUpdatedAgoPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DateUpdatedAgoPipe, name: "bbDateUpdatedAgo" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: DateUpdatedAgoPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'bbDateUpdatedAgo',
                }]
        }], ctorParameters: function () { return [{ type: i1.BbDatePipe }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZS11cGRhdGVkLWFnby5waXBlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9wcm9kdWN0LXN1bW1hcnktY29tbW9uLWFuZy9zcmMvcGlwZXMvZGF0ZS9kYXRlLXVwZGF0ZWQtYWdvLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7OztBQUdwRDs7Ozs7Ozs7O0dBU0c7QUFJSCxNQUFNLE9BQU8sa0JBQWtCO0lBZ0I3Qjs7Ozs7T0FLRztJQUNILFlBQW9CLFFBQW9CO1FBQXBCLGFBQVEsR0FBUixRQUFRLENBQVk7UUFyQnZCLHlCQUFvQixHQUFHO1lBQ3RDLEdBQUcsRUFBRSxRQUFRO1lBQ2IsS0FBSyxFQUFFLE9BQU87WUFDZCxJQUFJLEVBQUUsT0FBTztZQUNiLE9BQU8sRUFBRSxNQUFNO1lBQ2YsTUFBTSxFQUFFLEtBQUs7U0FDZCxDQUFDO1FBQ2UseUJBQW9CLEdBQUc7WUFDdEMsSUFBSSxFQUFFLENBQUMsSUFBWSxFQUFFLEVBQUUsQ0FBQyxTQUFTLENBQUEsa0RBQWtELElBQUksRUFBRTtZQUN6RixLQUFLLEVBQUUsQ0FBQyxLQUFhLEVBQUUsRUFBRSxDQUFDLFNBQVMsQ0FBQSxnREFBZ0QsS0FBSyxZQUFZO1lBQ3BHLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQyxTQUFTLENBQUEsd0RBQXdEO1lBQzdFLE9BQU8sRUFBRSxDQUFDLE9BQWUsRUFBRSxFQUFFLENBQUMsU0FBUyxDQUFBLGtEQUFrRCxPQUFPLGNBQWM7WUFDOUcsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQSw0REFBNEQ7U0FDcEYsQ0FBQztJQVF5QyxDQUFDO0lBRTVDOzs7Ozs7Ozs7OztPQVdHO0lBQ0gsU0FBUyxDQUFDLGVBQXVCLEVBQUUsVUFBVSxHQUFHLFVBQVU7UUFDeEQsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxHQUFHLElBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBRWhHLElBQUksZUFBZSxHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxPQUFPLEVBQUU7WUFDdkQsT0FBTyxJQUFJLENBQUMsb0JBQW9CLENBQUMsTUFBTSxFQUFFLENBQUM7U0FDM0M7YUFBTSxJQUFJLGVBQWUsR0FBRyxJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxFQUFFO1lBQzNELE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNsRixPQUFPLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDdEQ7YUFBTSxJQUFJLGVBQWUsR0FBRyxJQUFJLENBQUMsb0JBQW9CLENBQUMsS0FBSyxFQUFFO1lBQzVELE9BQU8sSUFBSSxDQUFDLG9CQUFvQixDQUFDLElBQUksRUFBRSxDQUFDO1NBQ3pDO2FBQU0sSUFBSSxlQUFlLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixDQUFDLEdBQUcsRUFBRTtZQUMxRCxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDOUUsT0FBTyxJQUFJLENBQUMsb0JBQW9CLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQ2xEO2FBQU07WUFDTCxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxlQUFlLEVBQUUsVUFBVSxDQUFXLENBQUM7WUFDbEYsT0FBTyxJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1NBQ25EO0lBQ0gsQ0FBQzs7Z0hBckRVLGtCQUFrQjs4R0FBbEIsa0JBQWtCOzRGQUFsQixrQkFBa0I7a0JBSDlCLElBQUk7bUJBQUM7b0JBQ0osSUFBSSxFQUFFLGtCQUFrQjtpQkFDekIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCYkRhdGVQaXBlIH0gZnJvbSAnQGJhY2tiYXNlL3VpLWFuZy9kYXRlLXBpcGUnO1xuXG4vKipcbiAqIFJldHVybnMgbG9jYWxpc2VkIGluZm8gb2YgZGF0ZSBvZiB1cGRhdGVcbiAqXG4gKiBAdXNhZ2VOb3Rlc1xuICogIyMjIEV4YW1wbGVcbiAqIGBgYGh0bWxcbiAqIDxwPnt7ICcyMDIwLTEwLTEwJyB8IGJiRGF0ZVVwZGF0ZUFnbyB9fTwvcD5cbiAqIDxwPnt7ICcyMDIwLTEwLTEwJyB8IGJiRGF0ZVVwZGF0ZUFnbzonbWVkaXVtRGF0ZScgfX08L3A+XG4gKiBgYGBcbiAqL1xuQFBpcGUoe1xuICBuYW1lOiAnYmJEYXRlVXBkYXRlZEFnbycsXG59KVxuZXhwb3J0IGNsYXNzIERhdGVVcGRhdGVkQWdvUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICBwcml2YXRlIHJlYWRvbmx5IG1pbGxpc2Vjb25kc0luUGVyaW9kID0ge1xuICAgIGRheTogODY0MDAwMDAsXG4gICAgaG91cnM6IDcyMDAwMDAsXG4gICAgaG91cjogMzYwMDAwMCxcbiAgICBtaW51dGVzOiAxMjAwMDAsXG4gICAgbWludXRlOiA2MDAwMCxcbiAgfTtcbiAgcHJpdmF0ZSByZWFkb25seSBsb2NhbGlzYXRpb25CeVBlcmlvZCA9IHtcbiAgICBkYXRlOiAoZGF0ZTogc3RyaW5nKSA9PiAkbG9jYWxpemVgOkBAcHJvZHVjdC1zdW1tYXJ5LnVwZGF0ZS1kYXRlLmRhdGU6VXBkYXRlZCBvbiAke2RhdGV9YCxcbiAgICBob3VyczogKGhvdXJzOiBudW1iZXIpID0+ICRsb2NhbGl6ZWA6QEBwcm9kdWN0LXN1bW1hcnkudXBkYXRlLWRhdGUuaG91cnM6VXBkYXRlZCAke2hvdXJzfSBob3VycyBhZ29gLFxuICAgIGhvdXI6ICgpID0+ICRsb2NhbGl6ZWA6QEBwcm9kdWN0LXN1bW1hcnkudXBkYXRlLWRhdGUuaG91cjpVcGRhdGVkIDEgaG91ciBhZ29gLFxuICAgIG1pbnV0ZXM6IChtaW51dGVzOiBudW1iZXIpID0+ICRsb2NhbGl6ZWA6QEBwcm9kdWN0LXN1bW1hcnkudXBkYXRlLWRhdGUubWludXRlczpVcGRhdGVkICR7bWludXRlc30gbWludXRlcyBhZ29gLFxuICAgIG1pbnV0ZTogKCkgPT4gJGxvY2FsaXplYDpAQHByb2R1Y3Qtc3VtbWFyeS51cGRhdGUtZGF0ZS5taW51dGU6VXBkYXRlZCAxIG1pbnV0ZSBhZ29gLFxuICB9O1xuXG4gIC8qKlxuICAgKiBAbmFtZSBEYXRlVXBkYXRlZEFnb1BpcGUjY29uc3RydWN0b3JcbiAgICogQHBhcmFtIGRhdGVQaXBlIC0gQmJEYXRlUGlwZVxuICAgKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZGF0ZVBpcGU6IEJiRGF0ZVBpcGUpIHt9XG5cbiAgLyoqXG4gICAqIEBuYW1lIERhdGVVcGRhdGVkQWdvUGlwZSN0cmFuc2Zvcm1cbiAgICogQHBhcmFtIHVwZGF0ZVRpbWVzdGFtcCAtIHVwZGF0ZSBkYXRlXG4gICAqIEBwYXJhbSBkYXRlRm9ybWF0IC0gdGhlIGZvcm1hdCB0eXBlIGZvciB0aGUgZGF0ZSB0byBiZSBmb3JtYXR0ZWQgKGZvciB1cGRhdGUgdGltZSA+PSAxIGRheSBhZ28pXG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBSZXR1cm5zIGxvY2FsaXNlZCBpbmZvIG9mIGRhdGUgb2YgdXBkYXRlXG4gICAqXG4gICAqIEV4YW1wbGU6XG4gICAqICB0cmFuc2Zvcm0oaG91ckFnbykgLSAnVXBkYXRlZCAxIGhvdXIgYWdvJ1xuICAgKiAgdHJhbnNmb3JtKG1pbnV0ZUFnbykgLSAnVXBkYXRlZCAxIG1pbnV0ZSBhZ28nXG4gICAqL1xuICB0cmFuc2Zvcm0odXBkYXRlVGltZXN0YW1wOiBzdHJpbmcsIGRhdGVGb3JtYXQgPSAnbG9uZ0RhdGUnKTogc3RyaW5nIHtcbiAgICBjb25zdCBtaWxsaXNlY29uZHNBZ28gPSBNYXRoLm1heChuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIG5ldyBEYXRlKHVwZGF0ZVRpbWVzdGFtcCkuZ2V0VGltZSgpLCAwKTtcblxuICAgIGlmIChtaWxsaXNlY29uZHNBZ28gPCB0aGlzLm1pbGxpc2Vjb25kc0luUGVyaW9kLm1pbnV0ZXMpIHtcbiAgICAgIHJldHVybiB0aGlzLmxvY2FsaXNhdGlvbkJ5UGVyaW9kLm1pbnV0ZSgpO1xuICAgIH0gZWxzZSBpZiAobWlsbGlzZWNvbmRzQWdvIDwgdGhpcy5taWxsaXNlY29uZHNJblBlcmlvZC5ob3VyKSB7XG4gICAgICBjb25zdCBtaW51dGVzQWdvID0gTWF0aC5mbG9vcihtaWxsaXNlY29uZHNBZ28gLyB0aGlzLm1pbGxpc2Vjb25kc0luUGVyaW9kLm1pbnV0ZSk7XG4gICAgICByZXR1cm4gdGhpcy5sb2NhbGlzYXRpb25CeVBlcmlvZC5taW51dGVzKG1pbnV0ZXNBZ28pO1xuICAgIH0gZWxzZSBpZiAobWlsbGlzZWNvbmRzQWdvIDwgdGhpcy5taWxsaXNlY29uZHNJblBlcmlvZC5ob3Vycykge1xuICAgICAgcmV0dXJuIHRoaXMubG9jYWxpc2F0aW9uQnlQZXJpb2QuaG91cigpO1xuICAgIH0gZWxzZSBpZiAobWlsbGlzZWNvbmRzQWdvIDwgdGhpcy5taWxsaXNlY29uZHNJblBlcmlvZC5kYXkpIHtcbiAgICAgIGNvbnN0IGhvdXJzQWdvID0gTWF0aC5mbG9vcihtaWxsaXNlY29uZHNBZ28gLyB0aGlzLm1pbGxpc2Vjb25kc0luUGVyaW9kLmhvdXIpO1xuICAgICAgcmV0dXJuIHRoaXMubG9jYWxpc2F0aW9uQnlQZXJpb2QuaG91cnMoaG91cnNBZ28pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCB1cGRhdGVEYXRlID0gdGhpcy5kYXRlUGlwZS50cmFuc2Zvcm0odXBkYXRlVGltZXN0YW1wLCBkYXRlRm9ybWF0KSBhcyBzdHJpbmc7XG4gICAgICByZXR1cm4gdGhpcy5sb2NhbGlzYXRpb25CeVBlcmlvZC5kYXRlKHVwZGF0ZURhdGUpO1xuICAgIH1cbiAgfVxufVxuIl19