import { Injectable, Inject } from '@angular/core';
import { HttpResponseType, PaginationType } from '../../model/types';
import { BehaviorSubject, combineLatest, of, ReplaySubject } from 'rxjs';
import { catchError, distinctUntilChanged, map, scan, switchMap, take, tap } from 'rxjs/operators';
import { PUBSUB } from '@backbase/foundation-ang/web-sdk';
import { parseError,
/* eslint-enable */
 } from '../../errors/accounts-overview-service-error';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/data-ang/arrangements";
import * as i2 from "@backbase/ui-ang/notification";
export const bbEventToggleAccountFavoriteUpdate = 'bb.event.toggle-account-favorite.update';
export class ProductSummaryAccountsService {
    constructor(productSummaryDataService, accountDataService, balancesHttpService, notificationService, pubSub) {
        this.productSummaryDataService = productSummaryDataService;
        this.accountDataService = accountDataService;
        this.balancesHttpService = balancesHttpService;
        this.notificationService = notificationService;
        this.pubSub = pubSub;
        this.requestObject = new ReplaySubject(1);
        this.favoriteRequestComplete = new BehaviorSubject(true);
        this.updateError = new BehaviorSubject(undefined);
        this.error = new BehaviorSubject(undefined);
        this.loading = new BehaviorSubject(true);
        this.aggregatedBalancesErrorSubject = new BehaviorSubject(undefined);
        this.aggregatedBalancesError = this.aggregatedBalancesErrorSubject.asObservable();
        this.loadingAggregatedBalancesSubject = new BehaviorSubject(false);
        this.loadingAggregatedBalances = this.loadingAggregatedBalancesSubject.asObservable();
        this.refreshAggregatedBalancesSubject = new BehaviorSubject(false);
        this.accountsList = combineLatest([
            this.requestObject,
            this.favoriteRequestComplete,
        ]).pipe(distinctUntilChanged(), tap(() => this.loading.next(true)), switchMap(([requestObject]) => this.getAccounts(requestObject)), scan((acc, curr) => ({
            count: curr.count,
            items: this.mergeResponses(acc, curr),
            params: curr.params,
        })), tap(() => this.error.next(undefined)), catchError((error) => {
            this.error.next(error);
            return of(undefined);
        }), tap(() => this.loading.next(false)));
        this.aggregatedBalances = combineLatest([
            this.refreshAggregatedBalancesSubject,
        ]).pipe(tap(() => this.loadingAggregatedBalancesSubject.next(true)), switchMap(() => this.getAggregatedBalances()), tap(() => this.loadingAggregatedBalancesSubject.next(false)));
        this.pubSub.subscribe(bbEventToggleAccountFavoriteUpdate, this.retriggerGetAccounts.bind(this));
    }
    getAccountById(arrangementId) {
        return this.accountDataService.getArrangementById({ arrangementId });
    }
    /**
     * Fetches an unmasked attribute for the given `UnmaskedAttributeRequestParams`
     *
     * @param requestParameters
     */
    getUnmaskedAttribute(requestParameters) {
        return this.accountDataService.unmaskedAttribute(requestParameters, 'body', false, {
            httpHeaderAccept: 'text/plain',
        });
    }
    toggleAccountFavorite(body, errorTemplateRef, successTemplateRef) {
        return this.putAccountFavorite(body).pipe(take(1), tap(() => {
            this.showNotification(successTemplateRef, 'success');
            this.updateError.next(undefined);
            this.pubSub.publish(bbEventToggleAccountFavoriteUpdate, undefined);
        }), catchError((error) => {
            this.updateError.next(error);
            this.showNotification(errorTemplateRef, 'error');
            return of(undefined);
        }));
    }
    putAccountFavorite(accountUserPreferences) {
        return this.accountDataService.updateUserPreferences({ accountUserPreferences }).pipe(catchError((error) => {
            throw parseError(error);
        }));
    }
    getAccounts(requestObject) {
        const paginationType = requestObject.paginationType || '';
        const from = requestObject.from || 0;
        const params = Object.assign({}, requestObject);
        delete params.paginationType;
        return this.productSummaryDataService.getArrangementsByBusinessFunction(params, HttpResponseType.RESPONSE).pipe(map(res => this.mapResponseWithCount(res, { from, paginationType })), catchError((error) => {
            throw parseError(error);
        }));
    }
    mapResponseWithCount(response, { from, paginationType }) {
        // eslint-disable-next-line no-null/no-null
        if (response.body === null) {
            throw new Error();
        }
        const headerCount = response.headers ? response.headers.get('x-total-count') : undefined;
        const counter = headerCount ? parseInt(headerCount, 10) : response.body.length || 0;
        return {
            count: counter,
            items: response.body || [],
            params: { from, paginationType },
        };
    }
    mergeResponses(acc, current) {
        if (acc &&
            acc.items &&
            current &&
            current.items &&
            acc.params.paginationType === PaginationType.LOAD_MORE &&
            current.params.from !== 0) {
            return [...acc.items, ...current.items];
        }
        return current.items;
    }
    showNotification(templateRef, modifier) {
        this.notificationService.showNotification({
            header: templateRef,
            modifier,
            message: '',
        });
    }
    getAccountsFrom(requestObject) {
        requestObject.subscribe(this.requestObject);
    }
    refreshAggregatedBalances() {
        this.refreshAggregatedBalancesSubject.next(true);
    }
    getAggregatedBalances() {
        const requestParameters = {};
        return this.balancesHttpService.getAggregations(requestParameters).pipe(map(response => this.mapResponseToAggregatedBalances(response)), tap(() => this.aggregatedBalancesErrorSubject.next(undefined)), catchError(error => this.parseAggregatedBalanceError(error)));
    }
    mapResponseToAggregatedBalances(aggregations) {
        const allBalances = (aggregations || [{}])[0];
        return allBalances && allBalances.aggregatedBalances;
    }
    parseAggregatedBalanceError(error) {
        this.aggregatedBalancesErrorSubject.next(error);
        return of(undefined);
    }
    retriggerGetAccounts() {
        this.favoriteRequestComplete.next(true);
    }
}
ProductSummaryAccountsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryAccountsService, deps: [{ token: i1.ProductSummaryHttpService }, { token: i1.ArrangementsHttpService }, { token: i1.BalancesHttpService }, { token: i2.NotificationService }, { token: PUBSUB }], target: i0.ɵɵFactoryTarget.Injectable });
ProductSummaryAccountsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryAccountsService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ProductSummaryAccountsService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.ProductSummaryHttpService }, { type: i1.ArrangementsHttpService }, { type: i1.BalancesHttpService }, { type: i2.NotificationService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [PUBSUB]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,