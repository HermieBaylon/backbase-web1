{"version":3,"file":"backbase-product-summary-common-ang.js","sources":["../../../../libs/product-summary-common-ang/src/classes/product-summary-account-details-base/product-summary-account-details-base.component.ts","../../../../libs/product-summary-common-ang/src/classes/product-summary-account-details-base/product-summary-account-details-base.module.ts","../../../../libs/product-summary-common-ang/src/classes/responsive-container/constants.ts","../../../../libs/product-summary-common-ang/src/classes/responsive-container/responsive-container.component.ts","../../../../libs/product-summary-common-ang/src/classes/responsive-container/responsive-container.module.ts","../../../../libs/product-summary-common-ang/src/model/providers.ts","../../../../libs/product-summary-common-ang/src/product-summary-common-ang.module.ts","../../../../libs/product-summary-common-ang/src/services/download-resources.service.ts","../../../../libs/product-summary-common-ang/src/services/dom-attributes.service.ts","../../../../libs/product-summary-common-ang/src/model/types.ts","../../../../libs/product-summary-common-ang/src/model/constants.ts","../../../../libs/product-summary-common-ang/src/services/balance-history/colors-helper.ts","../../../../libs/product-summary-common-ang/src/errors/balance-history-service-errors.ts","../../../../libs/product-summary-common-ang/src/services/balance-history/balance-history.service.ts","../../../../libs/product-summary-common-ang/src/errors/accounts-overview-service-error.ts","../../../../libs/product-summary-common-ang/src/services/accounts/product-summary-accounts.service.ts","../../../../libs/product-summary-common-ang/src/helpers/helpers.ts","../../../../libs/product-summary-common-ang/src/services/accounts/products-external-info.service.ts","../../../../libs/product-summary-common-ang/src/services/user/product-summary-user-permissions.service.ts","../../../../libs/product-summary-common-ang/src/services/widget-properties/product-summary-widget-properties.service.ts","../../../../libs/product-summary-common-ang/src/model/currency-to-country-map.ts","../../../../libs/product-summary-common-ang/src/model/test-mock.ts","../../../../libs/product-summary-common-ang/src/helpers/comparison.ts","../../../../libs/product-summary-common-ang/src/helpers/test-helper.ts","../../../../libs/product-summary-common-ang/src/pipes/format/absolute-value.pipe.ts","../../../../libs/product-summary-common-ang/src/pipes/format/format.module.ts","../../../../libs/product-summary-common-ang/src/pipes/product-number/product-number-value.pipe.ts","../../../../libs/product-summary-common-ang/src/pipes/product-number/product-number-type.pipe.ts","../../../../libs/product-summary-common-ang/src/pipes/product-number/product-number-format.pipe.ts","../../../../libs/product-summary-common-ang/src/pipes/product-number/product-number.module.ts","../../../../libs/product-summary-common-ang/src/pipes/validation/is-defined.pipe.ts","../../../../libs/product-summary-common-ang/src/pipes/validation/is-in-array.pipe.ts","../../../../libs/product-summary-common-ang/src/pipes/validation/is-percent-value.pipe.ts","../../../../libs/product-summary-common-ang/src/pipes/validation/is-product-kind.pipe.ts","../../../../libs/product-summary-common-ang/src/pipes/validation/validation.module.ts","../../../../libs/product-summary-common-ang/src/pipes/date/date-updated-ago.pipe.ts","../../../../libs/product-summary-common-ang/src/pipes/date/date.module.ts","../../../../libs/product-summary-common-ang/backbase-product-summary-common-ang.ts"],"sourcesContent":["import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { MaskableAttribute } from '@backbase/data-ang/arrangements';\nimport {\n  ProductDetailsAvailability,\n  ProductMaskableAttribute,\n  AccountArrangementItem,\n} from '../../model/product-summary-types';\n\n@Component({ template: '' })\nexport class ProductSummaryAccountDetailsBaseComponent {\n  /**\n   * Product type data that this component displays.\n   */\n  @Input() set product(data: AccountArrangementItem | undefined) {\n    this._product = data;\n    this.infoAvailability = this.getProductInfoAvailability(data);\n  }\n  get product(): AccountArrangementItem | undefined {\n    return this._product;\n  }\n  private _product: AccountArrangementItem | undefined;\n  /**\n   * List of maskable attributes. Holds states of the attributes.\n   */\n  @Input() maskableAttributes: ProductMaskableAttribute[] = [];\n  /**\n   * Event when a user clicked on the `unmask-attribute-button` button\n   */\n  @Output() unmaskAttribute: EventEmitter<MaskableAttribute> = new EventEmitter<MaskableAttribute>();\n  /**\n   * Event when a user clicked on the `mask-attribute-button` button\n   */\n  @Output() maskAttribute: EventEmitter<MaskableAttribute> = new EventEmitter<MaskableAttribute>();\n\n  /**\n   * All unmaskable attributes\n   */\n  readonly maskableAttribute = MaskableAttribute;\n  /**\n   * Details info sections availability\n   */\n  infoAvailability: ProductDetailsAvailability = {};\n\n  /**\n   * Returns `true` if the given `attributeName` is masked\n   *\n   * @param attributeName\n   */\n  isMasked(attributeName: MaskableAttribute): boolean {\n    const maskableAttribute = this.maskableAttributes.find(attribute => attribute.attributeName === attributeName);\n    return maskableAttribute?.masked === undefined ? true : maskableAttribute?.masked;\n  }\n  /**\n   * Event handler for the `click` event of the unmask buttons\n   * Emits `MaskableAttribute` to the `unmaskAttribute` Output\n   *\n   * @param attributeName\n   */\n  onUnmaskAttribute(attributeName: MaskableAttribute) {\n    if (Object.values(MaskableAttribute).includes(attributeName)) {\n      this.unmaskAttribute.emit(attributeName);\n    }\n  }\n  /**\n   * Event handler for the `click` event of the mask buttons\n   * Emits `MaskableAttribute` to the `maskAttribute` Output\n   *\n   * @param attributeName\n   */\n  onMaskAttribute(attributeName: MaskableAttribute) {\n    if (Object.values(MaskableAttribute).includes(attributeName)) {\n      this.maskAttribute.emit(attributeName);\n    }\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars,no-unused-vars\n  protected getProductInfoAvailability(product: AccountArrangementItem | undefined): ProductDetailsAvailability {\n    return {};\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ProductSummaryAccountDetailsBaseComponent } from './product-summary-account-details-base.component';\n\n@NgModule({\n  declarations: [ProductSummaryAccountDetailsBaseComponent],\n  exports: [ProductSummaryAccountDetailsBaseComponent],\n})\nexport class ProductSummaryAccountDetailsBaseModule {}\n","export const SIZE_TABLET_DEFAULT = 768;\nexport const SIZE_MOBILE_DEFAULT = 375;\n","import { AfterViewInit, ChangeDetectorRef, Component, ElementRef, HostListener, Input } from '@angular/core';\nimport { SIZE_MOBILE_DEFAULT, SIZE_TABLET_DEFAULT } from './constants';\nimport { ResponsiveView } from './types';\n\n@Component({ template: '' })\nexport class ResponsiveContainerComponent implements AfterViewInit {\n  @Input()\n  get responsiveView(): ResponsiveView {\n    return this._customResponsiveView || this._responsiveView;\n  }\n\n  set responsiveView(value: ResponsiveView) {\n    this._customResponsiveView = value;\n  }\n  get sizeMobile(): number {\n    return this._sizeMobile;\n  }\n\n  set sizeMobile(value: number) {\n    this._sizeMobile = value;\n  }\n  get sizeTablet(): number {\n    return this._sizeTablet;\n  }\n\n  set sizeTablet(value: number) {\n    this._sizeTablet = value;\n  }\n  /**\n   * Specifies screen size: `mobile` | `tablet` | 'screen'\n   *\n   * @default 'screen'\n   */\n  private _responsiveView: ResponsiveView = 'screen';\n  private _customResponsiveView: ResponsiveView | undefined;\n  private _element: ElementRef<HTMLElement>;\n  private _changeDetector: ChangeDetectorRef;\n  private _sizeTablet = SIZE_TABLET_DEFAULT;\n  private _sizeMobile = SIZE_MOBILE_DEFAULT;\n\n  constructor(element: ElementRef<HTMLElement>, changeDetector: ChangeDetectorRef) {\n    this._element = element;\n    this._changeDetector = changeDetector;\n  }\n\n  /**\n   * @internal\n   */\n  ngAfterViewInit() {\n    if (!this._customResponsiveView) {\n      this.checkElementSize();\n      this._changeDetector.detectChanges();\n    }\n  }\n\n  /**\n   * Event handler on `windows:resize`\n   * Checks size of the container\n   */\n  @HostListener('window:resize', [])\n  onResize() {\n    if (!this._customResponsiveView) {\n      this.checkElementSize();\n    }\n  }\n\n  /**\n   * Checks width of the parent container and updates `isSmallScreen$` and `isExtraSmallScreen$`\n   */\n  checkElementSize() {\n    const containerWidth = this._element.nativeElement?.firstElementChild?.getBoundingClientRect().width || 0;\n    this._responsiveView = this.getResponsiveView(containerWidth);\n  }\n\n  private getResponsiveView(containerWidth: number): ResponsiveView {\n    let responseView: ResponsiveView = 'screen';\n    if (containerWidth <= this.sizeMobile) {\n      responseView = 'mobile';\n    } else if (containerWidth <= this.sizeTablet) {\n      responseView = 'tablet';\n    }\n    return responseView;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { ResponsiveContainerComponent } from './responsive-container.component';\n\n@NgModule({\n  declarations: [ResponsiveContainerComponent],\n  exports: [ResponsiveContainerComponent],\n})\nexport class ResponsiveContainerModule {}\n","import { InjectionToken } from '@angular/core';\nimport { AccountAliasDisplayingLevel } from './types';\n\nexport type LocalWindow = Window & typeof globalThis;\n\nexport const WINDOW = new InjectionToken<string>('ProductSummaryCommon :: WindowToken');\n\nexport const windowFactory = () => window;\n\nexport const WindowProvider = {\n  provide: WINDOW,\n  useFactory: windowFactory,\n};\n\n/**\n * Injection token for widget properties configuration\n */\nexport const PRODUCT_SUMMARY_WIDGET_PROPERTIES = new InjectionToken('ProductSummaryCommon :: WidgetProperties');\n\n/**\n * Injection token for account alias displaying level configuration\n */\nexport const ACCOUNT_ALIAS_DISPLAYING_LEVEL = new InjectionToken<AccountAliasDisplayingLevel>(\n  'ProductSummaryCommon :: AccountAliasDisplayingLevel',\n);\n","import '@angular/localize/init';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NotificationModule } from '@backbase/ui-ang/notification';\nimport { ProductSummaryAccountDetailsBaseModule } from './classes/product-summary-account-details-base/product-summary-account-details-base.module';\nimport { ResponsiveContainerModule } from './classes/responsive-container/responsive-container.module';\nimport { WindowProvider } from './model/providers';\n\nconst sharedModules = [NotificationModule, ProductSummaryAccountDetailsBaseModule, ResponsiveContainerModule];\n\n@NgModule({\n  imports: [CommonModule, ...sharedModules],\n  exports: [...sharedModules],\n  providers: [WindowProvider],\n})\nexport class ProductSummaryCommon {}\n","import { Inject, Injectable } from '@angular/core';\nimport { WINDOW, LocalWindow } from '../model/providers';\n\n@Injectable()\nexport class DownloadResourcesService {\n  constructor(@Inject(WINDOW) private readonly localWindow: LocalWindow) {}\n\n  downloadFile(name: string, type: string, data: BlobPart) {\n    const fileData = new Blob([data], { type });\n    if (this.isFileSaverAvailable()) {\n      this.downloadViaFileSaver(name, fileData);\n    } else {\n      this.downloadViaLink(name, fileData);\n    }\n  }\n\n  private isFileSaverAvailable(): boolean {\n    const { navigator } = this.localWindow;\n    // @ts-ignore\n    return navigator !== undefined && navigator.msSaveOrOpenBlob !== undefined;\n  }\n\n  private downloadViaFileSaver(name: string, data: Blob) {\n    const { navigator } = this.localWindow;\n    // @ts-ignore\n    navigator.msSaveOrOpenBlob(data, name);\n  }\n\n  private downloadViaLink(name: string, data: Blob) {\n    const { document, URL } = this.localWindow;\n    const downloadLink = document.createElement('a');\n    downloadLink.href = URL.createObjectURL(data);\n    downloadLink.download = name;\n    downloadLink.click();\n    downloadLink.remove();\n  }\n}\n","import { Injectable } from '@angular/core';\n\n/**\n * Utility service for DOM manipulations\n */\n@Injectable()\nexport class DomAttributesService {\n  private idPrefix = 'bb_product_summary_element_';\n  private nextId = 0;\n\n  /**\n   * Generates unique Id for product-summary DOM elements\n   */\n  generateId(): string {\n    return `${this.idPrefix}${this.nextId++}`;\n  }\n}\n","import { PageParams } from '@backbase/foundation-ang/data-http';\nimport {\n  ProductSummaryItem,\n  AccountBalanceHistoryItem,\n  OrderByField,\n  SortDirection,\n} from '@backbase/data-ang/arrangements';\nimport { AlertType } from '@backbase/ui-ang/alert';\nimport { PaymentCardNumberFormat } from '@backbase/ui-ang/payment-card-number-pipe';\nimport { ProductDetailsAvailability, AccountArrangementItem } from './product-summary-types';\n\nexport enum HttpResponseType {\n  BODY = 'body',\n  RESPONSE = 'response',\n  EVENT = 'event',\n}\n\nexport interface Customizable {\n  [key: string]: any;\n}\n\nexport interface BalanceHistoryPaginated {\n  count: number;\n  items: Array<AccountBalanceHistoryItem>;\n  params: any;\n}\n\nexport interface WidgetProperties {\n  businessFunction: string;\n  privilege: string;\n  resourceName: string;\n  size: number;\n}\n\nexport interface ListParams {\n  pagination: PageParams;\n  paginationType: string;\n}\n\nexport interface BalanceHistorySeriesParams extends Customizable {\n  dateFrom?: string;\n  dateTo?: string;\n  timePeriod?: string;\n  format?: string;\n  paginationType?: string;\n}\n\nexport interface BalanceHistoryPaginationParams extends Customizable {\n  dateFrom?: string;\n  dateTo?: string;\n  timePeriod?: string;\n  format?: string;\n  from: number;\n  size?: number;\n  paginationType?: string;\n}\n\nexport interface GetBalanceHistoryRequestSeriesObjectType extends Customizable {\n  arrangementIds: string;\n  params: BalanceHistorySeriesParams;\n}\n\nexport interface GetBalanceHistoryRequestPaginatedObjectType extends Customizable {\n  arrangementId: string;\n  params: BalanceHistoryPaginationParams;\n}\n\nexport interface BalanceHistoryItem extends Customizable {\n  dateFrom: string;\n  dateTo: string;\n  valuePtc: string;\n  value: {\n    currency?: string;\n    balance?: string | number;\n  };\n}\n\nexport interface BalanceHistoryData extends Customizable {\n  name: any;\n  value: string | number | undefined;\n}\n\nexport interface BalanceHistoryDataSeries extends Customizable {\n  name: string;\n  series: BalanceHistoryData[];\n}\n\nexport enum BalanceHistoryExportFormat {\n  JSON = 'application/json',\n  CSV = 'text/csv',\n}\n\nexport interface BalanceHistoryExportData<T = any> {\n  name: string;\n  content: T;\n}\n\nexport interface Series {\n  name: Date;\n  value: number;\n}\n\nexport interface DataSetExtraColors {\n  positive: string;\n  negative: string;\n}\n\nexport interface DataSetExtra {\n  colors?: DataSetExtraColors;\n}\n\nexport interface DataSet {\n  name: string;\n  extra?: DataSetExtra;\n  series: Array<Series>;\n}\n\nexport interface Accounts {\n  count: number;\n  items: ProductSummaryItem[];\n  params: any;\n}\n\nexport enum PaginationType {\n  LOAD_MORE = 'load-more',\n  PAGINATION = 'pagination',\n}\n\nexport enum ProductKindNames {\n  CURRENT_ACCOUNT = 'Current Account',\n  SAVINGS_ACCOUNT = 'Savings Account',\n  TERM_DEPOSIT = 'Term Deposit',\n  LOAN = 'Loan',\n  CREDIT_CARD = 'Credit Card',\n  DEBIT_CARD = 'Debit Card',\n  INVESTMENT_ACCOUNT = 'Investment Account',\n}\n\n/**\n * Default values of \"kindUri\" per product kind\n */\nexport enum ProductKindUri {\n  CREDIT_CARD = 'credit-card',\n  CURRENT_ACCOUNT = 'current-account',\n  DEBIT_CARD = 'debit-card',\n  INVESTMENT_ACCOUNT = 'investment-account',\n  LOAN = 'loan',\n  POCKET = 'pocket',\n  POCKET_PARENT = 'pocket-parent',\n  SAVINGS_ACCOUNT = 'savings-account',\n  TERM_DEPOSIT = 'term-deposit',\n}\n\nexport interface GetProductsummaryRequest extends Customizable {\n  businessFunction: string;\n  resourceName: string;\n  privilege: string;\n  withLatestBalances?: boolean;\n  debitAccount?: boolean;\n  creditAccount?: boolean;\n  externalTransferAllowed?: boolean;\n  productKindName?: string;\n  legalEntityIds?: string[];\n  favorite?: boolean;\n  favoriteFirst?: boolean;\n  searchTerm?: string;\n  from?: number;\n  cursor?: string;\n  size?: number;\n  orderBy?: Array<OrderByField>;\n  direction?: SortDirection;\n  paginationType?: PaginationType | string;\n}\n\nexport interface SwitchViewButtonClass {\n  cards: string | undefined;\n  table: string | undefined;\n}\n\nexport interface AccountState {\n  stateName: string;\n  severity: AlertType;\n}\n\n/**\n * An object representing details content\n */\nexport interface ProductSummaryDetailsCustomizableContext {\n  /**\n   * The product type\n   */\n  product: AccountArrangementItem | undefined;\n  /**\n   * The product card number format\n   */\n  productNumberFormat: PaymentCardNumberFormat | undefined;\n  /**\n   * The product details info availability\n   */\n  infoAvailability: ProductDetailsAvailability;\n}\n\n/**\n * Available navigation types from account\n */\nexport enum AccountNavigationType {\n  PAYMENTS = 'PAYMENTS',\n  TRANSACTIONS = 'TRANSACTIONS',\n  BALANCE_HISTORY = 'BALANCE_HISTORY',\n  STATEMENTS = 'STATEMENTS',\n}\n\n/**\n * Privileges applicable to product summary business functions\n */\nexport enum ProductSummaryPrivilege {\n  VIEW = 'view',\n  EDIT = 'edit',\n}\n\n/**\n * Displaying level of account aliases\n */\nexport enum AccountAliasDisplayingLevel {\n  ACCOUNT = 'ACCOUNT',\n  USER = 'USER',\n}\n\n/**\n * Duplicates validation settings from the `user-preferences` schema of fe-presentation-spec\n * TODO: remove these constants, when min/max length settings will be part of the generated client API\n */\nexport const UserPreferencesValidationSettings = {\n  ALIAS_MAX_LENGTH: 50,\n};\n","import { AccountNavigationType } from './types';\n\n//TODO: check if this can be like id\nexport const defaultArrangementName = '';\n\nexport const WidgetProperty = {\n  BUSINESS_FUNCTION: 'businessFunction',\n  RESOURCE_NAME: 'resourceName',\n  PRIVILEGE_TYPE: 'privilege',\n  SIZE: 'size',\n  ACTIVE_VIEW: 'activeView',\n};\n\nexport const SMALL_SCREEN_SIZE = 640;\n\nexport const EXTRA_SMALL_SCREEN_SIZE = 576;\n\nexport const DEFAULT_DEBOUNCE_TIME = 300;\n\nexport enum DefaultProductKindNameList {\n  CURRENT_ACCOUNT = 'current-account',\n  SAVINGS_ACCOUNT = 'savings-account',\n  TERM_DEPOSIT = 'term-deposit',\n  LOAN = 'loan',\n  CREDIT_CARD = 'credit-card',\n  DEBIT_CARD = 'debit-card',\n  INVESTMENT_ACCOUNT = 'investment-account',\n}\n\nexport const DefaultProductKindName = DefaultProductKindNameList.CURRENT_ACCOUNT;\n\nexport const CardProductKindName = ['credit card', 'debit card'];\n\n/**\n * Default value for allowed navigation types per account,\n * by default all navigation types are allowed\n */\nexport const DefaultAllowedNavigationTypes: AccountNavigationType[] = [\n  AccountNavigationType.BALANCE_HISTORY,\n  AccountNavigationType.PAYMENTS,\n  AccountNavigationType.TRANSACTIONS,\n  AccountNavigationType.STATEMENTS,\n];\n","import { DataSet, Series } from '../../model/types';\n\nexport type Trend = 1 | -1;\n\nexport const getColorTrend = (index: number, series: Series[]): Trend => {\n  const serie = series[index];\n  if (serie.value === 0) {\n    if (index > 0) {\n      return getColorTrend(index - 1, series);\n    }\n\n    if (series.length > 1) {\n      return series[1].value < 0 ? -1 : 1;\n    }\n  }\n\n  if (serie.value < 0) {\n    return -1;\n  }\n\n  return 1;\n};\n\nexport const getCurrentSeriesName = (trend: Trend): 'positive' | 'negative' => (trend === -1 ? 'negative' : 'positive');\n\nexport const getFirstSeries = (datum: Series, trend: Trend): Array<DataSet> => [\n  {\n    name: getCurrentSeriesName(trend),\n    series: [datum],\n  },\n];\n\nexport const createNewSeries = (\n  result: Array<DataSet>,\n  lastResult: DataSet,\n  series: Series,\n  trend: Trend,\n): Array<DataSet> => {\n  const lastName: Date = lastResult.series[lastResult.series.length - 1].name;\n  const lastValue: number = lastResult.series[lastResult.series.length - 1].value;\n  const valuesSum: number = Math.abs(lastValue) + Math.abs(series.value);\n  const step: number = series.name.getTime() - lastName.getTime();\n  const valuesRatio: number = Math.abs(lastValue) / valuesSum;\n  const prevValue = lastResult.series[lastResult.series.length - 1].value;\n  const crossingPoint: Series = { name: new Date(lastName.getTime() + step * valuesRatio), value: 0 };\n  const crossPointSection = prevValue ? [crossingPoint] : [];\n\n  return [\n    ...result.slice(0, -1),\n    {\n      name: lastResult.name,\n      series: [...lastResult.series, ...crossPointSection],\n    },\n    {\n      name: getCurrentSeriesName(trend),\n      series: [crossingPoint, series],\n    },\n  ];\n};\n\nexport const concatExistingSeries = (result: Array<DataSet>, lastResult: DataSet, series: Series): Array<DataSet> => {\n  const name = lastResult.name;\n  return [\n    ...result.slice(0, -1),\n    {\n      name,\n      series: [...lastResult.series, series],\n    },\n  ];\n};\n\nexport const splitDataByTrend = (series: Array<Series>): Array<DataSet> =>\n  series.reduce((result: Array<DataSet>, seriesData: Series, i: number) => {\n    const currentTrend = getColorTrend(i, series);\n\n    if (i === 0) {\n      return getFirstSeries(seriesData, currentTrend);\n    }\n\n    const previousTrend = getColorTrend(i - 1, series);\n    const lastResult = result[result.length - 1];\n\n    if (previousTrend === currentTrend) {\n      return concatExistingSeries(result, lastResult, seriesData);\n    } else {\n      return createNewSeries(result, lastResult, seriesData, currentTrend);\n    }\n  }, []);\n","import { HttpErrorResponse } from '@angular/common/http';\n\nexport class BalanceHistoryNotFound {\n  messages: string[];\n  kind: 'BalanceHistoryNotFound' = 'BalanceHistoryNotFound';\n  constructor(readonly response: HttpErrorResponse) {\n    this.messages = ((response.error || {}).errors || []).map((e: any) => e.message);\n  }\n}\n\nexport class BalanceHistoryBadRequest {\n  messages: string[];\n  kind: 'BalanceHistoryBadRequest' = 'BalanceHistoryBadRequest';\n  constructor(readonly response: HttpErrorResponse) {\n    this.messages = ((response.error || {}).errors || []).map((e: any) => e.message);\n  }\n}\n\nexport class BalanceHistoryAccessDenied {\n  messages: string[];\n  kind: 'BalanceHistoryAccessDenied' = 'BalanceHistoryAccessDenied';\n  constructor(readonly response: HttpErrorResponse) {\n    this.messages = ((response.error || {}).errors || []).map((e: any) => e.message);\n  }\n}\n\nexport class BalanceHistoryUnknownError {\n  messages: string[];\n  kind: 'BalanceHistoryUnknownError' = 'BalanceHistoryUnknownError';\n  constructor(readonly response: HttpErrorResponse) {\n    this.messages = [response.message];\n  }\n}\n\nexport class BalanceHistoryConnectivityError {\n  messages: string[];\n  kind: 'BalanceHistoryConnectivityError' = 'BalanceHistoryConnectivityError';\n  constructor(readonly response: HttpErrorResponse) {\n    this.messages = ((response.error || {}).errors || []).map((e: any) => e.message);\n  }\n}\n\nexport type BalanceHistoryError =\n  | BalanceHistoryAccessDenied\n  | BalanceHistoryBadRequest\n  | BalanceHistoryNotFound\n  | BalanceHistoryConnectivityError\n  | BalanceHistoryUnknownError;\n\nexport const parseBalanceHistoryError = (error: HttpErrorResponse): BalanceHistoryError => {\n  if (error.error instanceof ErrorEvent) {\n    return new BalanceHistoryUnknownError(error);\n  } else {\n    switch (error.status) {\n      case 0:\n        return new BalanceHistoryConnectivityError(error);\n      case 401:\n        return new BalanceHistoryAccessDenied(error);\n      case 403:\n        return new BalanceHistoryAccessDenied(error);\n      case 400:\n        return new BalanceHistoryBadRequest(error);\n      case 404:\n        return new BalanceHistoryNotFound(error);\n      default:\n        return new BalanceHistoryUnknownError(error);\n    }\n  }\n};\n","import { Injectable } from '@angular/core';\nimport { HttpErrorResponse, HttpHeaders, HttpResponse } from '@angular/common/http';\nimport {\n  AccountBalanceHistory,\n  AccountBalanceHistoryItem,\n  AccountsHttpService,\n  GetBalanceHistoryForArrangementRequestParams,\n  GetBalanceHistoryRequestParams,\n  TimePeriod,\n} from '@backbase/data-ang/arrangements';\nimport { BehaviorSubject, Observable, of, ReplaySubject } from 'rxjs';\nimport { catchError, distinctUntilChanged, filter, map, scan, switchMap, tap } from 'rxjs/operators';\nimport {\n  BalanceHistoryDataSeries,\n  BalanceHistoryExportData,\n  BalanceHistoryExportFormat,\n  BalanceHistoryPaginated,\n  BalanceHistoryPaginationParams,\n  BalanceHistorySeriesParams,\n  GetBalanceHistoryRequestPaginatedObjectType,\n  GetBalanceHistoryRequestSeriesObjectType,\n  HttpResponseType,\n  PaginationType,\n} from '../../model/types';\nimport { defaultArrangementName } from '../../model/constants';\nimport { splitDataByTrend } from './colors-helper';\nimport {\n  BalanceHistoryError,\n  parseBalanceHistoryError,\n  /**\n   * these unused imports here because of issue in api-extractor\n   * issue: https://github.com/microsoft/rushstack/issues/2140\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars,no-unused-vars */\n  BalanceHistoryAccessDenied,\n  BalanceHistoryBadRequest,\n  BalanceHistoryNotFound,\n  BalanceHistoryConnectivityError,\n  BalanceHistoryUnknownError,\n  /* eslint-enable */\n} from '../../errors/balance-history-service-errors';\n\n@Injectable()\nexport class BalanceHistoryCommonService {\n  private readonly reportDefaultFileName = {\n    [BalanceHistoryExportFormat.CSV]: 'balance-history.csv',\n    [BalanceHistoryExportFormat.JSON]: 'balance-history.json',\n  };\n  private readonly requestObjectSeries = new ReplaySubject<GetBalanceHistoryRequestSeriesObjectType>(1);\n  private readonly requestObjectPaginated = new ReplaySubject<GetBalanceHistoryRequestPaginatedObjectType>(1);\n\n  constructor(private readonly accountDataService: AccountsHttpService) {}\n\n  readonly errorSeries = new BehaviorSubject<BalanceHistoryError | undefined>(undefined);\n  readonly errorPaginated = new BehaviorSubject<BalanceHistoryError | undefined>(undefined);\n\n  readonly loadingPaginated = new BehaviorSubject<boolean>(true);\n  readonly loadingSeries = new BehaviorSubject<boolean>(true);\n\n  readonly balanceHistorySeries: Observable<AccountBalanceHistory | undefined> = this.requestObjectSeries.pipe(\n    distinctUntilChanged(),\n    filter(param => !!param.arrangementIds),\n    tap(() => this.loadingSeries.next(true)),\n    tap(() => this.errorSeries.next(undefined)),\n    switchMap(res =>\n      this.getBalanceHistorySeries(res).pipe(\n        catchError((errorSeries: BalanceHistoryError) => {\n          this.errorSeries.next(errorSeries);\n          return of(undefined);\n        }),\n      ),\n    ),\n    tap(() => this.loadingSeries.next(false)),\n  );\n\n  readonly balanceHistoryPaginated: Observable<BalanceHistoryPaginated | undefined> = this.requestObjectPaginated.pipe(\n    distinctUntilChanged(),\n    filter(param => !!param.arrangementId),\n    tap(() => this.loadingPaginated.next(true)),\n    tap(() => this.errorPaginated.next(undefined)),\n    switchMap(res =>\n      this.getBalanceHistoryPaginated(res).pipe(\n        catchError((errorPaginated: BalanceHistoryError) => {\n          this.errorPaginated.next(errorPaginated);\n          return of({\n            count: 0,\n            items: [],\n            params: res,\n          });\n        }),\n      ),\n    ),\n    scan(\n      (acc: BalanceHistoryPaginated, curr: BalanceHistoryPaginated): BalanceHistoryPaginated => ({\n        count: curr.count,\n        items: this.responsesMerge(acc, curr),\n        params: curr.params,\n      }),\n    ),\n    tap(() => this.loadingPaginated.next(false)),\n  );\n\n  getBalanceHistorySeries(request: GetBalanceHistoryRequestSeriesObjectType) {\n    const parameters = this.getBalanceHistoryRequestParameters(request);\n    return this.accountDataService.getBalanceHistory(parameters).pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw parseBalanceHistoryError(error);\n      }),\n    );\n  }\n\n  getBalanceHistoryPaginated(request: GetBalanceHistoryRequestPaginatedObjectType) {\n    const paginationType = request.params ? request.params.paginationType || '' : '';\n    const from = request.params ? request.params.from || 0 : 0;\n    const parameters = this.getBalanceHistoryForArrangementRequestParameters(request);\n    return this.accountDataService.getBalanceHistoryForArrangement(parameters, HttpResponseType.RESPONSE).pipe(\n      map((res: HttpResponse<Array<AccountBalanceHistoryItem>>) =>\n        this.mapResponseWithCount(res, { from, paginationType }),\n      ),\n      catchError((error: HttpErrorResponse) => {\n        throw parseBalanceHistoryError(error);\n      }),\n    );\n  }\n\n  loadBalanceHistorySeries(requestObjectSeries: Observable<GetBalanceHistoryRequestSeriesObjectType>) {\n    requestObjectSeries.subscribe(this.requestObjectSeries);\n  }\n\n  loadBalanceHistoryPaginated(requestObjectPaginated: Observable<GetBalanceHistoryRequestPaginatedObjectType>) {\n    requestObjectPaginated.subscribe(this.requestObjectPaginated);\n  }\n\n  /**\n   * Returns URL for fetching balance history data\n   *\n   * @param format\n   * @param exportParameters\n   */\n  exportBalanceHistory(\n    format: BalanceHistoryExportFormat,\n    exportParameters: GetBalanceHistoryRequestSeriesObjectType,\n  ): string {\n    const parameters = this.getBalanceHistoryRequestParameters(exportParameters, format);\n    return this.accountDataService.getBalanceHistoryUrl(parameters);\n  }\n\n  /**\n   * Fetches balance history data in one of the available formats\n   *\n   * @param format\n   * @param exportParameters\n   */\n  getBalanceHistory(\n    format: BalanceHistoryExportFormat,\n    exportParameters: GetBalanceHistoryRequestSeriesObjectType,\n  ): Observable<BalanceHistoryExportData> {\n    const parameters = this.getBalanceHistoryRequestParameters(exportParameters, format);\n    const options = { httpHeaderAccept: format as BalanceHistoryExportFormat.CSV };\n\n    return this.accountDataService.getBalanceHistory(parameters, HttpResponseType.RESPONSE, false, options).pipe(\n      map(({ headers, body }: HttpResponse<any>) => {\n        const defaultFileName = this.reportDefaultFileName[format];\n        const fileNameInHeaders = this.getFileNameFromHeaders(headers);\n        return { name: fileNameInHeaders || defaultFileName, content: body };\n      }),\n    );\n  }\n\n  private responsesMerge(\n    acc: BalanceHistoryPaginated,\n    current: BalanceHistoryPaginated,\n  ): Array<AccountBalanceHistoryItem> {\n    if (\n      acc &&\n      acc.items &&\n      current &&\n      current.items &&\n      acc.params.paginationType === PaginationType.LOAD_MORE &&\n      current.params.from !== 0\n    ) {\n      return [...acc.items, ...current.items];\n    }\n\n    return current.items;\n  }\n\n  processBalanceHistory(balanceHistory: AccountBalanceHistory): BalanceHistoryDataSeries[] {\n    const [balanceHistoryItem] = balanceHistory.items;\n    const defaultSeries = {\n      name: defaultArrangementName,\n      series: balanceHistoryItem.balanceHistory.map(({ dateTo, value, valuePtc }) => ({\n        name: new Date(dateTo),\n        value: ((value ? value.balance : valuePtc) as unknown) as number,\n      })),\n    };\n\n    return defaultSeries ? splitDataByTrend(defaultSeries.series) : [];\n  }\n\n  private mapResponseWithCount(\n    response: HttpResponse<Array<AccountBalanceHistoryItem>>,\n    { from, paginationType }: { from: number; paginationType: PaginationType | string },\n  ): BalanceHistoryPaginated {\n    // eslint-disable-next-line no-null/no-null\n    if (response.body === null) {\n      throw new Error();\n    }\n    const headerCount = response.headers ? response.headers.get('x-total-count') : undefined;\n    const counter = headerCount ? parseInt(headerCount, 10) : response.body.length || 0;\n\n    return {\n      count: counter,\n      items: response.body,\n      params: { from, paginationType },\n    };\n  }\n\n  private getBalanceHistoryRequestParameters(\n    { arrangementIds, params }: GetBalanceHistoryRequestSeriesObjectType,\n    requestFormat?: string,\n  ): GetBalanceHistoryRequestParams {\n    const format = requestFormat ?? params.format;\n    return { arrangementIds, ...this.toRequestParameters({ ...params, format }) };\n  }\n\n  private getBalanceHistoryForArrangementRequestParameters({\n    arrangementId,\n    params,\n  }: GetBalanceHistoryRequestPaginatedObjectType): GetBalanceHistoryForArrangementRequestParams {\n    const format = undefined;\n    return { arrangementId, ...this.toRequestParameters({ ...params, format }) };\n  }\n\n  private toRequestParameters(\n    params: BalanceHistorySeriesParams | BalanceHistoryPaginationParams,\n  ): Partial<GetBalanceHistoryRequestParams | GetBalanceHistoryForArrangementRequestParams> {\n    const requestParameters = { ...params, timePeriod: params.timePeriod as TimePeriod | undefined };\n    delete requestParameters.paginationType;\n    if (!requestParameters.format) {\n      delete requestParameters.format;\n    }\n    if (requestParameters.timePeriod) {\n      delete requestParameters.dateFrom;\n      delete requestParameters.dateTo;\n    } else {\n      delete requestParameters.timePeriod;\n    }\n    return requestParameters;\n  }\n\n  private getFileNameFromHeaders(headers?: HttpHeaders): string | undefined {\n    const contentDisposition = (headers && headers.get('content-disposition')) || '';\n    const contentDispositionWithoutQuotes = contentDisposition.replace(/['\"]*/g, '');\n    return (contentDispositionWithoutQuotes.match(/filename[^;=\\n]*=([^;\\n]*)/) || [])[1];\n  }\n}\n","import { HttpErrorResponse } from '@angular/common/http';\n\nexport class AccountsOverviewNotFound {\n  messages: string[];\n  kind: 'AccountsOverviewNotFound' = 'AccountsOverviewNotFound';\n  constructor(readonly response: HttpErrorResponse) {\n    this.messages = ((response.error || {}).errors || []).map((e: any) => e.message);\n  }\n}\n\nexport class AccountsOverviewBadRequest {\n  messages: string[];\n  kind: 'AccountsOverviewBadRequest' = 'AccountsOverviewBadRequest';\n  constructor(readonly response: HttpErrorResponse) {\n    this.messages = ((response.error || {}).errors || []).map((e: any) => e.message);\n  }\n}\n\nexport class AccountsOverviewAccessDenied {\n  messages: string[];\n  kind: 'AccountsOverviewAccessDenied' = 'AccountsOverviewAccessDenied';\n  constructor(readonly response: HttpErrorResponse) {\n    this.messages = ((response.error || {}).errors || []).map((e: any) => e.message);\n  }\n}\n\nexport class AccountsOverviewUnknownError {\n  messages: string[];\n  kind: 'AccountsOverviewUnknownError' = 'AccountsOverviewUnknownError';\n  constructor(readonly response: HttpErrorResponse) {\n    this.messages = [response.message];\n  }\n}\n\nexport class AccountsOverviewConnectivityError {\n  messages: string[];\n  kind: 'AccountsOverviewConnectivityError' = 'AccountsOverviewConnectivityError';\n  constructor(readonly response: HttpErrorResponse) {\n    this.messages = ((response.error || {}).errors || []).map((e: any) => e.message);\n  }\n}\n\nexport type AccountsOverviewError =\n  | AccountsOverviewAccessDenied\n  | AccountsOverviewBadRequest\n  | AccountsOverviewNotFound\n  | AccountsOverviewConnectivityError\n  | AccountsOverviewUnknownError;\n\nexport const parseError = (error: HttpErrorResponse): AccountsOverviewError => {\n  if (error.error instanceof ErrorEvent) {\n    return new AccountsOverviewUnknownError(error);\n  } else {\n    switch (error.status) {\n      case 0:\n        return new AccountsOverviewConnectivityError(error);\n      case 401:\n        return new AccountsOverviewAccessDenied(error);\n      case 403:\n        return new AccountsOverviewAccessDenied(error);\n      case 400:\n        return new AccountsOverviewBadRequest(error);\n      case 404:\n        return new AccountsOverviewNotFound(error);\n      default:\n        return new AccountsOverviewUnknownError(error);\n    }\n  }\n};\n","import { Injectable, TemplateRef, Inject } from '@angular/core';\nimport {\n  ProductSummaryHttpService,\n  ArrangementsHttpService,\n  BalancesHttpService,\n  AccountUserPreferences,\n  AggregatedBalances,\n  UnmaskedAttributeRequestParams,\n} from '@backbase/data-ang/arrangements';\nimport { NotificationService } from '@backbase/ui-ang/notification';\nimport { Accounts, GetProductsummaryRequest, HttpResponseType, PaginationType } from '../../model/types';\nimport { BehaviorSubject, combineLatest, Observable, of, ReplaySubject } from 'rxjs';\nimport { catchError, distinctUntilChanged, map, scan, switchMap, take, tap } from 'rxjs/operators';\nimport { HttpErrorResponse, HttpResponse } from '@angular/common/http';\nimport { Pubsub, PUBSUB } from '@backbase/foundation-ang/web-sdk';\nimport { AccountAggregatedBalanceCurrency } from '@backbase/data-ang/arrangements';\nimport { AccountArrangementItem, ProductSummaryItem } from '../../model/product-summary-types';\nimport {\n  AccountsOverviewError,\n  parseError,\n  /**\n   * these unused imports here because of issue in api-extractor\n   * issue: https://github.com/microsoft/rushstack/issues/2140\n   */\n  /* eslint-disable @typescript-eslint/no-unused-vars,no-unused-vars */\n  AccountsOverviewAccessDenied,\n  AccountsOverviewBadRequest,\n  AccountsOverviewNotFound,\n  AccountsOverviewConnectivityError,\n  AccountsOverviewUnknownError,\n  /* eslint-enable */\n} from '../../errors/accounts-overview-service-error';\n\nexport const bbEventToggleAccountFavoriteUpdate = 'bb.event.toggle-account-favorite.update';\n\n@Injectable()\nexport class ProductSummaryAccountsService {\n  constructor(\n    private readonly productSummaryDataService: ProductSummaryHttpService,\n    private readonly accountDataService: ArrangementsHttpService,\n    private readonly balancesHttpService: BalancesHttpService,\n    private readonly notificationService: NotificationService,\n    @Inject(PUBSUB) private readonly pubSub: Pubsub,\n  ) {\n    this.pubSub.subscribe(bbEventToggleAccountFavoriteUpdate, this.retriggerGetAccounts.bind(this));\n  }\n\n  private readonly requestObject = new ReplaySubject<GetProductsummaryRequest>(1);\n  private readonly favoriteRequestComplete = new BehaviorSubject<boolean>(true);\n  readonly updateError: BehaviorSubject<AccountsOverviewError | undefined> = new BehaviorSubject<\n    AccountsOverviewError | undefined\n  >(undefined);\n  readonly error: BehaviorSubject<AccountsOverviewError | undefined> = new BehaviorSubject<\n    AccountsOverviewError | undefined\n  >(undefined);\n  readonly loading = new BehaviorSubject<boolean>(true);\n  private readonly aggregatedBalancesErrorSubject = new BehaviorSubject<HttpErrorResponse | undefined>(undefined);\n  readonly aggregatedBalancesError = this.aggregatedBalancesErrorSubject.asObservable();\n  private readonly loadingAggregatedBalancesSubject = new BehaviorSubject<boolean>(false);\n  readonly loadingAggregatedBalances = this.loadingAggregatedBalancesSubject.asObservable();\n  private readonly refreshAggregatedBalancesSubject = new BehaviorSubject<boolean>(false);\n\n  readonly accountsList: Observable<Accounts | undefined> = combineLatest([\n    this.requestObject,\n    this.favoriteRequestComplete,\n  ]).pipe(\n    distinctUntilChanged(),\n    tap(() => this.loading.next(true)),\n    switchMap(([requestObject]) => this.getAccounts(requestObject)),\n    scan(\n      (acc: Accounts, curr: Accounts): Accounts => ({\n        count: curr.count,\n        items: this.mergeResponses(acc, curr),\n        params: curr.params,\n      }),\n    ),\n    tap(() => this.error.next(undefined)),\n    catchError((error: AccountsOverviewError) => {\n      this.error.next(error);\n      return of(undefined);\n    }),\n    tap(() => this.loading.next(false)),\n  );\n\n  readonly aggregatedBalances: Observable<AccountAggregatedBalanceCurrency[] | undefined> = combineLatest([\n    this.refreshAggregatedBalancesSubject,\n  ]).pipe(\n    tap(() => this.loadingAggregatedBalancesSubject.next(true)),\n    switchMap(() => this.getAggregatedBalances()),\n    tap(() => this.loadingAggregatedBalancesSubject.next(false)),\n  );\n\n  getAccountById(arrangementId: string): Observable<AccountArrangementItem> {\n    return this.accountDataService.getArrangementById({ arrangementId });\n  }\n  /**\n   * Fetches an unmasked attribute for the given `UnmaskedAttributeRequestParams`\n   *\n   * @param requestParameters\n   */\n  getUnmaskedAttribute(requestParameters: UnmaskedAttributeRequestParams): Observable<string> {\n    return this.accountDataService.unmaskedAttribute(requestParameters, 'body', false, {\n      httpHeaderAccept: 'text/plain',\n    });\n  }\n\n  toggleAccountFavorite(\n    body: AccountUserPreferences,\n    errorTemplateRef: TemplateRef<any> | string,\n    successTemplateRef: TemplateRef<any> | string,\n  ): Observable<any | undefined> {\n    return this.putAccountFavorite(body).pipe(\n      take(1),\n      tap(() => {\n        this.showNotification(successTemplateRef, 'success');\n        this.updateError.next(undefined);\n        this.pubSub.publish(bbEventToggleAccountFavoriteUpdate, undefined);\n      }),\n      catchError((error: AccountsOverviewError) => {\n        this.updateError.next(error);\n        this.showNotification(errorTemplateRef, 'error');\n        return of(undefined);\n      }),\n    );\n  }\n\n  private putAccountFavorite(accountUserPreferences: AccountUserPreferences): Observable<HttpResponse<any>> {\n    return this.accountDataService.updateUserPreferences({ accountUserPreferences }).pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw parseError(error);\n      }),\n    );\n  }\n\n  private getAccounts(requestObject: GetProductsummaryRequest): Observable<Accounts> {\n    const paginationType = requestObject.paginationType || '';\n    const from = requestObject.from || 0;\n    const params = { ...requestObject };\n    delete params.paginationType;\n    return this.productSummaryDataService.getArrangementsByBusinessFunction(params, HttpResponseType.RESPONSE).pipe(\n      map(res => this.mapResponseWithCount(res, { from, paginationType })),\n      catchError((error: HttpErrorResponse) => {\n        throw parseError(error);\n      }),\n    );\n  }\n\n  private mapResponseWithCount(\n    response: HttpResponse<ProductSummaryItem[]>,\n    { from, paginationType }: { from: number; paginationType: PaginationType | string },\n  ): Accounts {\n    // eslint-disable-next-line no-null/no-null\n    if (response.body === null) {\n      throw new Error();\n    }\n    const headerCount = response.headers ? response.headers.get('x-total-count') : undefined;\n    const counter = headerCount ? parseInt(headerCount, 10) : response.body.length || 0;\n\n    return {\n      count: counter,\n      items: response.body || [],\n      params: { from, paginationType },\n    };\n  }\n\n  private mergeResponses(acc: Accounts, current: Accounts): ProductSummaryItem[] {\n    if (\n      acc &&\n      acc.items &&\n      current &&\n      current.items &&\n      acc.params.paginationType === PaginationType.LOAD_MORE &&\n      current.params.from !== 0\n    ) {\n      return [...acc.items, ...current.items];\n    }\n    return current.items;\n  }\n\n  private showNotification(templateRef: TemplateRef<any> | string, modifier: 'success' | 'error') {\n    this.notificationService.showNotification({\n      header: templateRef,\n      modifier,\n      message: '',\n    });\n  }\n\n  getAccountsFrom(requestObject: Observable<GetProductsummaryRequest>) {\n    requestObject.subscribe(this.requestObject);\n  }\n\n  refreshAggregatedBalances() {\n    this.refreshAggregatedBalancesSubject.next(true);\n  }\n\n  private getAggregatedBalances(): Observable<AccountAggregatedBalanceCurrency[] | undefined> {\n    const requestParameters = {};\n    return this.balancesHttpService.getAggregations(requestParameters).pipe(\n      map(response => this.mapResponseToAggregatedBalances(response)),\n      tap(() => this.aggregatedBalancesErrorSubject.next(undefined)),\n      catchError(error => this.parseAggregatedBalanceError(error)),\n    );\n  }\n\n  private mapResponseToAggregatedBalances(aggregations: AggregatedBalances[]) {\n    const allBalances = (aggregations || [{}])[0];\n    return allBalances && allBalances.aggregatedBalances;\n  }\n\n  private parseAggregatedBalanceError(error: HttpErrorResponse) {\n    this.aggregatedBalancesErrorSubject.next(error);\n    return of(undefined);\n  }\n\n  private retriggerGetAccounts() {\n    this.favoriteRequestComplete.next(true);\n  }\n}\n","import { publishReplay, refCount, switchMap } from 'rxjs/operators';\nimport { Observable, combineLatest } from 'rxjs';\nimport { map, pluck } from 'rxjs/operators';\nimport { CardProductKindName, DefaultProductKindNameList } from '../model/constants';\nimport { AccountNumberType } from '@backbase/ui-ang/account-number-pipe';\nimport { ActivatedRoute, ParamMap } from '@angular/router';\nimport { Arrangement } from '../model/product-summary-types';\n\nexport const toKebabCase = (accountType = '') =>\n  accountType ? accountType.trim().toLowerCase().split(' ').join('-') : '';\n\nexport const isCardNumber = (account: Arrangement): boolean =>\n  Boolean(account.productKindName && CardProductKindName.includes(account.productKindName.toLowerCase()));\n\nexport const modelItemToBoolean = (value: string | boolean): boolean => {\n  if (typeof value === 'boolean') {\n    return value;\n  }\n  return value === 'true';\n};\n\nexport const isFavorite = (account: Arrangement) => {\n  const accountPreferencesFavoriteValue = account.userPreferences && account.userPreferences.favorite;\n  const accountFavoriteValue = 'favorite' in account ? account.favorite : undefined;\n\n  return accountPreferencesFavoriteValue ?? accountFavoriteValue;\n};\n\nexport const isProductVisible = (product: Arrangement): boolean => {\n  if (product.userPreferences && product.userPreferences.visible !== undefined) {\n    return product.userPreferences.visible;\n  } else if (product.visible !== undefined) {\n    return product.visible;\n  }\n  return true;\n};\n\nexport const isFunction = (param: any) => typeof param === 'function';\n\nexport const findBy = <T = any>(collection: T[], key: string, value: string): T | undefined =>\n  collection.find(item => item && (item as any)[key] === value) as T;\n\nexport const findByName = <T = any>(collection: T[], name: string): T | undefined => findBy(collection, 'name', name);\n\nexport const getAccountAlias = (account: any): string | undefined => {\n  if (account.userPreferences) {\n    return account.userPreferences.alias ? account.userPreferences.alias : account.bankAlias || account.name;\n  } else {\n    return account.bankAlias || account.name || ''; // todo: replace with `??` typesScript is upgraded to 3.7.0\n  }\n};\n\nexport const getProductKindIconName = (productKindName: string): string => {\n  let iconName = toKebabCase(productKindName);\n  const isDefaultProductKindName = Object.values(DefaultProductKindNameList).some(name => iconName === name);\n\n  if (!isDefaultProductKindName) {\n    iconName = 'account';\n  }\n\n  return `${iconName}s`;\n};\n\n/**\n * Gets a valid product number type for a given product\n *\n * @param product\n *\n * for CreditCard/DebitCard:\n * - returns `number` if exists\n * - else `IBAN` if exists\n * - otherwise `BBAN`\n * for other products:\n * - returns `IBAN` if exists\n * - else `BBAN` if exists\n * - otherwise `number`\n */\nexport const getProductNumberType = (product: Arrangement): AccountNumberType => {\n  const isCardFormat = isCardNumber(product);\n\n  if (isCardFormat && 'number' in product) {\n    return 'cardNumber';\n  } else if ('IBAN' in product) {\n    return 'iban';\n  } else if ('BBAN' in product || isCardFormat) {\n    return 'bban';\n  } else {\n    return 'cardNumber';\n  }\n};\n\nexport const processErrorMessages = (messages: string[] | undefined): string | undefined =>\n  messages ? messages.join(' ') : undefined;\n\n/**\n * Sets the passed unmasked attribute to the item\n *\n * @param item\n * @param attributeName\n * @param attributeValue\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport const setAttribute = <T = Object>(item: T, attributeName: string, attributeValue: any): T => ({\n  ...(item ? item : ({} as T)),\n  ...(attributeName ? { [attributeName]: attributeValue } : {}),\n});\n\n/**\n * Verifies if values is defined (not null and not undefined)\n *\n * @param value\n */\n// eslint-disable-next-line no-null/no-null\nexport const isDefined = (value: any): boolean => value !== null && value !== undefined;\n/**\n * Returns configuration property based on the priority\n */\nexport const filterInputParameters = <T>(input: Observable<T | undefined>, prop: Observable<T>): Observable<T> =>\n  combineLatest([input, prop]).pipe(map(([inputVal, propVal]) => (inputVal !== undefined ? inputVal : propVal)));\n\n/**\n * Caches the request (shares between subscribers)\n *\n * @param request\n */\nexport const cacheRequest = <Params, Result>(request: (params: Params) => Observable<Result>) => (\n  source: Observable<Params>,\n): Observable<Result> => source.pipe(switchMap(request), publishReplay(1), refCount());\n\n/**\n * Returns route parameter\n * takes parameter from component route if parameter exists, otherwise looks for parameter in parent routes\n *\n * @param route\n * @param param\n */\nexport const getRouteParameter = (route: ActivatedRoute, param: string): Observable<string> => {\n  const routeParam = route.paramMap.pipe(pluck<ParamMap, string | null>('params', param));\n  const allParams = route.parent ? [routeParam, getRouteParameter(route.parent, param)] : [routeParam];\n\n  return combineLatest(allParams).pipe(\n    map(params => params[0] || params[1]),\n    map(value => value ?? ''),\n  );\n};\n\n/**\n * Returns true if product has external info (external logo, alias, etc.)\n *\n * @param product\n */\nexport const hasExternalInfo = (product: Arrangement): boolean => product.financialInstitutionId !== undefined;\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { map, pluck } from 'rxjs/operators';\nimport {\n  FinancialInstitutionManagerClientHttpService,\n  FinancialInstitution,\n} from '@backbase/data-ang/financial-institution-manager';\nimport { Arrangement, ExternalProductInfo } from '../../model/product-summary-types';\nimport { hasExternalInfo } from '../../helpers/helpers';\n\n/**\n * A service for getting external info for products\n */\n@Injectable()\nexport class ProductsExternalInfoService {\n  constructor(private readonly financialInstitutionsHttpService: FinancialInstitutionManagerClientHttpService) {}\n\n  /**\n   * Fetches external info for products or a single product,\n   * returns products or a single product with external info included\n   */\n  getProductsWithExternalInfo<T extends ExternalProductInfo = Arrangement>(products: T): Observable<T>;\n  getProductsWithExternalInfo<T extends ExternalProductInfo = Arrangement>(products: T[]): Observable<T[]>;\n  getProductsWithExternalInfo<T extends ExternalProductInfo = Arrangement>(products: T | T[]): Observable<T | T[]> {\n    const productsList = Array.isArray(products) ? products : [products];\n    const financialInstitutionIds = this.getAssignedFinancialInstitutionIds(productsList);\n\n    return financialInstitutionIds.length\n      ? this.getFinancialInstitutions(financialInstitutionIds).pipe(\n          map(institutions =>\n            Array.isArray(products)\n              ? productsList.map(product => this.addExternalInfoToProduct(product, institutions))\n              : this.addExternalInfoToProduct(products, institutions),\n          ),\n        )\n      : of(products);\n  }\n\n  private getAssignedFinancialInstitutionIds<T extends ExternalProductInfo = Arrangement>(items: T[]): number[] {\n    const itemsWithExternalInfo = items.filter(hasExternalInfo);\n    const financialInstitutionIds = itemsWithExternalInfo.map(item => item.financialInstitutionId) as number[];\n    return financialInstitutionIds.filter((item, index) => financialInstitutionIds.indexOf(item, index + 1) === -1);\n  }\n\n  private addExternalInfoToProduct<T extends ExternalProductInfo = Arrangement>(\n    product: T,\n    institutions: FinancialInstitution[],\n  ): T {\n    return { ...product, ...this.getExternalInfo(product, institutions) };\n  }\n\n  private getExternalInfo<T extends ExternalProductInfo = Arrangement>(\n    product: T,\n    institutions: FinancialInstitution[],\n  ): ExternalProductInfo {\n    const isExternalInfoAvailable = hasExternalInfo(product);\n    return isExternalInfoAvailable\n      ? { financialInstitution: institutions.find(institution => institution.id === product.financialInstitutionId) }\n      : {};\n  }\n\n  private getFinancialInstitutions(ids: number[]): Observable<FinancialInstitution[]> {\n    return this.financialInstitutionsHttpService.getFinancialInstitutions({ ids }).pipe(pluck('financialInstitutions'));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay } from 'rxjs/operators';\nimport { GetUserPrivilegesRequestParams, UsersHttpService } from '@backbase/data-ang/accesscontrol';\nimport { AccountNavigationType, ProductSummaryPrivilege } from '../../model/types';\nimport { DefaultAllowedNavigationTypes } from '../../model/constants';\n\n@Injectable()\nexport class ProductSummaryUserPermissionsService {\n  private readonly productSummaryPermissionParameters: GetUserPrivilegesRequestParams = {\n    resourceName: 'Product Summary',\n    functionName: 'Product Summary',\n  };\n  private readonly manageArrangementsPermissionParameters: GetUserPrivilegesRequestParams = {\n    resourceName: 'Product Summary',\n    functionName: 'Manage Arrangement Alias',\n  };\n\n  private readonly productSummaryPrivileges: Observable<\n    ProductSummaryPrivilege[]\n  > = this.usersDataService.getUserPrivileges(this.productSummaryPermissionParameters).pipe(\n    map(privileges => privileges.map(({ privilege }) => privilege as ProductSummaryPrivilege)),\n    shareReplay(),\n  );\n  private readonly managerArrangementsPrivileges: Observable<\n    ProductSummaryPrivilege[]\n  > = this.usersDataService.getUserPrivileges(this.manageArrangementsPermissionParameters).pipe(\n    map(privileges => privileges.map(({ privilege }) => privilege as ProductSummaryPrivilege)),\n    shareReplay(),\n  );\n\n  readonly hasFullViewPermission: Observable<boolean> = this.productSummaryPrivileges.pipe(\n    map(privileges => privileges.includes(ProductSummaryPrivilege.VIEW)),\n    shareReplay(),\n  );\n\n  readonly hasFullEditPermission: Observable<boolean> = this.productSummaryPrivileges.pipe(\n    map(privileges => privileges.includes(ProductSummaryPrivilege.EDIT)),\n    shareReplay(),\n  );\n\n  readonly hasArrangementAliasEditPermission: Observable<boolean> = this.managerArrangementsPrivileges.pipe(\n    map(privileges => privileges.includes(ProductSummaryPrivilege.EDIT)),\n    shareReplay(),\n  );\n\n  readonly allowedAccountNavigationTypes: Observable<AccountNavigationType[]> = this.hasFullViewPermission.pipe(\n    map(hasFullViewPermission =>\n      hasFullViewPermission\n        ? DefaultAllowedNavigationTypes\n        : DefaultAllowedNavigationTypes.filter(type => type !== AccountNavigationType.BALANCE_HISTORY),\n    ),\n    shareReplay(),\n  );\n\n  constructor(private readonly usersDataService: UsersHttpService) {}\n}\n","import { Observable, of, combineLatest, BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { ItemModel } from '@backbase/foundation-ang/core';\nimport { Property } from '@backbase/foundation-ang/web-sdk';\nimport { Inject, Injectable, Optional } from '@angular/core';\nimport { PRODUCT_SUMMARY_WIDGET_PROPERTIES } from '../../model/providers';\n\n/** @dynamic */\n@Injectable()\nexport class ProductSummaryWidgetPropertiesService<\n  WidgetProperties extends Record<string, any> = Record<string, Property>\n> {\n  /**\n   * Widget properties\n   */\n  readonly properties: Observable<WidgetProperties>;\n  /**\n   * Widget properties configuration\n   */\n  private readonly configuration = new BehaviorSubject<Partial<WidgetProperties>>({});\n\n  /**\n   * @internal\n   * @param defaultConfiguration\n   * @param itemModel\n   */\n  constructor(\n    @Inject(PRODUCT_SUMMARY_WIDGET_PROPERTIES) private readonly defaultConfiguration: WidgetProperties,\n    @Optional() private readonly itemModel?: ItemModel,\n  ) {\n    /**\n     * Gets a property value for each value in `propertyNames` input,\n     * joins them into `WidgetProperties` structure\n     */\n    const propertyNames = Object.keys(defaultConfiguration);\n    this.properties = combineLatest(propertyNames.map(propertyName => this.getWidgetProperty(propertyName))).pipe(\n      map(properties =>\n        propertyNames.reduce(\n          (widgetProperties, propertyName, index) => ({ ...widgetProperties, [propertyName]: properties[index] }),\n          {} as WidgetProperties,\n        ),\n      ),\n    );\n  }\n\n  /**\n   * Sets widget properties\n   *\n   * @param config\n   */\n  setConfiguration(config: Partial<WidgetProperties>) {\n    this.configuration.next(config);\n  }\n\n  /**\n   * Returns observable with a widget property\n   *\n   * @param propertyName\n   */\n  getProperty<\n    WidgetPropertyName extends keyof WidgetProperties,\n    WidgetPropertyValue extends WidgetProperties[WidgetPropertyName]\n  >(propertyName: WidgetPropertyName): Observable<WidgetPropertyValue> {\n    return this.properties.pipe(map(properties => properties[propertyName]));\n  }\n\n  /**\n   * Returns a widget configuration property,\n   * takes the value in the following order:\n   * - configuration value if exists (widget input)\n   * - item-model value if exists (CXP configuration)\n   * - default value (constant value)\n   */\n  private getWidgetProperty<\n    WidgetPropertyName extends keyof WidgetProperties,\n    WidgetPropertyValue extends WidgetProperties[WidgetPropertyName]\n  >(propertyName: WidgetPropertyName): Observable<WidgetPropertyValue> {\n    const defaultValue = this.defaultConfiguration[propertyName];\n    const configurationValue$ = this.configuration.pipe(\n      map(configuration => configuration[propertyName] as WidgetPropertyValue | undefined),\n    );\n    const modelValue$ = this.itemModel\n      ? this.itemModel.property(propertyName as string, defaultValue)\n      : of(defaultValue);\n\n    return combineLatest([configurationValue$, modelValue$]).pipe(\n      map(([configurationValue, modelValue]) => (configurationValue !== undefined ? configurationValue : modelValue)),\n    );\n  }\n}\n","export const CurrencyToCountryMap: { [key: string]: string } = {\n  BDT: 'BD',\n  EUR: 'EU',\n  XOF: 'TG',\n  BGN: 'BG',\n  BAM: 'BA',\n  BBD: 'BB',\n  XPF: 'NC',\n  BMD: 'BM',\n  BND: 'BN',\n  BOB: 'BO',\n  BHD: 'BH',\n  BIF: 'BI',\n  BTN: 'BT',\n  JMD: 'JM',\n  NOK: 'NO',\n  BWP: 'BW',\n  WST: 'WS',\n  USD: 'US',\n  BRL: 'BR',\n  BSD: 'BS',\n  GBP: 'GB',\n  BYR: 'BY',\n  BZD: 'BZ',\n  RUB: 'RU',\n  RWF: 'RW',\n  RSD: 'RS',\n  TMT: 'TM',\n  TJS: 'TJ',\n  RON: 'RO',\n  NZD: 'CK',\n  GTQ: 'GT',\n  XAF: 'TD',\n  JPY: 'JP',\n  GYD: 'GY',\n  GEL: 'GE',\n  XCD: 'AI',\n  GNF: 'GN',\n  GMD: 'GM',\n  DKK: 'DK',\n  GIP: 'GI',\n  GHS: 'GH',\n  OMR: 'OM',\n  TND: 'TN',\n  JOD: 'JO',\n  HRK: 'HR',\n  HTG: 'HT',\n  HUF: 'HU',\n  HKD: 'HK',\n  HNL: 'HN',\n  AUD: 'AU',\n  VEF: 'VE',\n  ILS: 'IL',\n  PYG: 'PY',\n  IQD: 'IQ',\n  PAB: 'PA',\n  PGK: 'PG',\n  PEN: 'PE',\n  PKR: 'PK',\n  PHP: 'PH',\n  PLN: 'PL',\n  ZMK: 'ZM',\n  MAD: 'MA',\n  EGP: 'EG',\n  ZAR: 'ZA',\n  VND: 'VN',\n  SBD: 'SB',\n  ETB: 'ET',\n  SOS: 'SO',\n  ZWL: 'ZW',\n  SAR: 'SA',\n  ERN: 'ER',\n  MDL: 'MD',\n  MGA: 'MG',\n  UZS: 'UZ',\n  MMK: 'MM',\n  MOP: 'MO',\n  MNT: 'MN',\n  MKD: 'MK',\n  MUR: 'MU',\n  MWK: 'MW',\n  MVR: 'MV',\n  MRO: 'MR',\n  UGX: 'UG',\n  TZS: 'TZ',\n  MYR: 'MY',\n  MXN: 'MX',\n  SHP: 'SH',\n  FJD: 'FJ',\n  FKP: 'FK',\n  NIO: 'NI',\n  NAD: 'NA',\n  VUV: 'VU',\n  NGN: 'NG',\n  NPR: 'NP',\n  CHF: 'LI',\n  COP: 'CO',\n  CNY: 'CN',\n  CLP: 'CL',\n  CAD: 'CA',\n  CDF: 'CD',\n  CZK: 'CZ',\n  CRC: 'CR',\n  ANG: 'SX',\n  CVE: 'CV',\n  CUP: 'CU',\n  SZL: 'SZ',\n  SYP: 'SY',\n  KGS: 'KG',\n  KES: 'KE',\n  SSP: 'SS',\n  SRD: 'SR',\n  KHR: 'KH',\n  KMF: 'KM',\n  STD: 'ST',\n  KRW: 'KR',\n  KPW: 'KP',\n  KWD: 'KW',\n  SLL: 'SL',\n  SCR: 'SC',\n  KZT: 'KZ',\n  KYD: 'KY',\n  SGD: 'SG',\n  SEK: 'SE',\n  SDG: 'SD',\n  DOP: 'DO',\n  DJF: 'DJ',\n  YER: 'YE',\n  DZD: 'DZ',\n  UYU: 'UY',\n  LBP: 'LB',\n  LAK: 'LA',\n  TWD: 'TW',\n  TTD: 'TT',\n  TRY: 'TR',\n  LKR: 'LK',\n  TOP: 'TO',\n  LTL: 'LT',\n  LRD: 'LR',\n  LSL: 'LS',\n  THB: 'TH',\n  LYD: 'LY',\n  AED: 'AE',\n  AFN: 'AF',\n  ISK: 'IS',\n  IRR: 'IR',\n  AMD: 'AM',\n  ALL: 'AL',\n  AOA: 'AO',\n  ARS: 'AR',\n  AWG: 'AW',\n  INR: 'IN',\n  AZN: 'AZ',\n  IDR: 'ID',\n  UAH: 'UA',\n  QAR: 'QA',\n  MZN: 'MZ',\n};\n","import { AccountBalanceHistory, AccountBalanceHistoryItem } from '@backbase/data-ang/arrangements';\nimport {\n  GetBalanceHistoryRequestSeriesObjectType,\n  BalanceHistoryDataSeries,\n  BalanceHistoryPaginated,\n  GetBalanceHistoryRequestPaginatedObjectType,\n} from './types';\nimport { defaultArrangementName } from './constants';\nimport { ProductSummaryItem } from '@backbase/data-ang/arrangements';\nimport { Accounts, GetProductsummaryRequest, PaginationType } from './types';\n\nexport const balanceHistorySeriesMock: AccountBalanceHistory = {\n  items: [\n    {\n      arrangementId: '3cdb2224-8926-4b4d-a99f-1c9dfbbb4699',\n      balanceHistory: [\n        {\n          dateFrom: '2017-05-10T00:00:00.000Z',\n          dateTo: '2017-06-01T00:00:00.000Z',\n          value: {\n            currency: 'EUR',\n            balance: '12',\n          },\n          valuePtc: '12',\n        },\n        {\n          dateFrom: '2017-05-11T00:00:00Z',\n          dateTo: '2017-06-01T00:00:00Z',\n          value: {\n            currency: 'EUR',\n            balance: '22',\n          },\n          valuePtc: '22',\n        },\n        {\n          dateFrom: '2017-05-23T00:00:00+0000',\n          dateTo: '2017-06-01T00:00:00+0000',\n          value: {\n            currency: 'EUR',\n            balance: '32',\n          },\n          valuePtc: '32',\n        },\n        {\n          dateFrom: '2017-06-01T00:00:00.000Z',\n          dateTo: '2017-06-01T00:00:00.000Z',\n          value: {\n            currency: 'EUR',\n            balance: '54',\n          },\n          valuePtc: '54',\n        },\n        {\n          dateFrom: '2017-06-02T00:00:00.000Z',\n          dateTo: '2017-06-01T00:00:00.000Z',\n          value: {\n            currency: 'EUR',\n            balance: '34',\n          },\n          valuePtc: '34',\n        },\n        {\n          dateFrom: '2017-06-12T00:00:00.000Z',\n          dateTo: '2017-06-01T00:00:00.000Z',\n          value: {\n            currency: 'EUR',\n            balance: '4',\n          },\n          valuePtc: '4',\n        },\n        {\n          dateFrom: '2017-06-18T00:00:00.000Z',\n          dateTo: '2017-06-01T00:00:00.000Z',\n          value: {\n            currency: 'EUR',\n            balance: '-14',\n          },\n          valuePtc: '-14',\n        },\n      ],\n    },\n  ],\n};\n\nexport const balanceHistoryPaginatedMock: Array<AccountBalanceHistoryItem> = [\n  {\n    dateFrom: '2017-05-10T00:00:00.000Z',\n    dateTo: '2017-06-01T00:00:00.000Z',\n    value: {\n      currency: 'EUR',\n      balance: '12',\n    },\n    valuePtc: '12',\n  },\n  {\n    dateFrom: '2017-05-11T00:00:00.000Z',\n    dateTo: '2017-06-01T00:00:00.000Z',\n    value: {\n      currency: 'EUR',\n      balance: '22',\n    },\n    valuePtc: '22',\n  },\n  {\n    dateFrom: '2017-05-23T00:00:00.000Z',\n    dateTo: '2017-06-01T00:00:00.000Z',\n    value: {\n      currency: 'EUR',\n      balance: '32',\n    },\n    valuePtc: '32',\n  },\n  {\n    dateFrom: '2017-06-01T00:00:00.000Z',\n    dateTo: '2017-06-01T00:00:00.000Z',\n    value: {\n      currency: 'EUR',\n      balance: '54',\n    },\n    valuePtc: '54',\n  },\n  {\n    dateFrom: '2017-06-02T00:00:00.000Z',\n    dateTo: '2017-07-01T00:00:00.000Z',\n    value: {\n      currency: 'EUR',\n      balance: '34',\n    },\n    valuePtc: '34',\n  },\n  {\n    dateFrom: '2017-06-12T00:00:00.000Z',\n    dateTo: '2017-07-01T00:00:00.000Z',\n    value: {\n      currency: 'EUR',\n      balance: '4',\n    },\n    valuePtc: '4',\n  },\n  {\n    dateFrom: '2017-06-18T00:00:00.000Z',\n    dateTo: '2017-07-01T00:00:00.000Z',\n    value: {\n      currency: 'EUR',\n      balance: '-14',\n    },\n    valuePtc: '-14',\n  },\n];\n\nexport const balanceHistoryPaginatedMockWithCount: BalanceHistoryPaginated = {\n  count: 3,\n  items: balanceHistoryPaginatedMock,\n  params: { from: 1, paginationType: 'load-more' },\n};\n\nexport const emptyBalanceHistoryPaginatedMockWithCount: BalanceHistoryPaginated = {\n  count: 0,\n  items: [],\n  params: { from: 0, paginationType: 'pagination' },\n};\n\nexport const requestObjectMockSeries: GetBalanceHistoryRequestSeriesObjectType = {\n  arrangementIds: '1',\n  params: {\n    dateFrom: '2017-06-18',\n    dateTo: '2017-06-18',\n    timePeriod: '',\n    format: '',\n    paginationType: 'pagination',\n    from: 0,\n  },\n};\n\nexport const requestObjectMockPaginated: GetBalanceHistoryRequestPaginatedObjectType = {\n  arrangementId: '1',\n  params: {\n    dateFrom: '2017-06-18',\n    dateTo: '2017-06-18',\n    timePeriod: '',\n    format: '',\n    paginationType: 'pagination',\n    from: 0,\n  },\n};\n\nexport const processedBalanceHistoryMock: BalanceHistoryDataSeries[] = [\n  {\n    name: defaultArrangementName,\n    series: [\n      {\n        name: new Date('2017-06-01T00:00:00.000Z'),\n        value: '12',\n      },\n      {\n        name: new Date('2017-06-01T00:00:00Z'),\n        value: '22',\n      },\n      {\n        name: new Date('2017-06-01T00:00:00+0000'),\n        value: '32',\n      },\n      {\n        name: new Date('2017-06-01T00:00:00.000Z'),\n        value: '54',\n      },\n      {\n        name: new Date('2017-06-01T00:00:00.000Z'),\n        value: '34',\n      },\n      {\n        name: new Date('2017-06-01T00:00:00.000Z'),\n        value: '4',\n      },\n      {\n        name: new Date('2017-06-01T00:00:00.000Z'),\n        value: 0,\n      },\n    ],\n  },\n  {\n    name: defaultArrangementName,\n    series: [\n      {\n        name: new Date('2017-06-01T00:00:00.000Z'),\n        value: 0,\n      },\n      {\n        name: new Date('2017-06-01T00:00:00.000Z'),\n        value: '-14',\n      },\n    ],\n  },\n];\n\nexport const mockRequestObject: GetProductsummaryRequest = {\n  businessFunction: '',\n  resourceName: '',\n  privilege: '',\n  paginationType: PaginationType.LOAD_MORE,\n};\n\nexport const mockAccountsResponse: ProductSummaryItem[] = [\n  {\n    id: '1cdb2224-8926-4b4d-a99f-1c9dfbbb4699',\n    externalArrangementId: 'kjh4567-asd1-11e7-b114-b2f933d50000',\n    externalLegalEntityId: 'COOOOO1',\n    externalProductId: '1234567',\n    name: 'Mr and Mrs J. Smith',\n    productKindName: 'Current Account',\n    bankAlias: 'Secret account',\n    bookedBalance: 100.1,\n    availableBalance: 100.2,\n    creditLimit: 100.3,\n    IBAN: 'GB29NWBK60161331926819',\n    BBAN: 'BBAN',\n    currency: 'EUR',\n    externalTransferAllowed: true,\n    urgentTransferAllowed: false,\n    accruedInterest: 2.2,\n    principalAmount: 100.4,\n    currentInvestmentValue: 100.5,\n    legalEntityIds: ['257da57a-11e4-4553-9175-54baf755069b', 'cd83683b-13f2-43d8-882b-39c9ab27d499'],\n    productId: '36c8fc42-ec97-4f83-8a7c-d622625007f3',\n    productTypeName: 'Current Account',\n    BIC: 'BICExample1',\n    bankBranchCode: 'bankBranchCode1',\n    accountOpeningDate: '2016-01-28T16:41:41.090Z',\n    accountInterestRate: 100.2,\n    valueDateBalance: 100.1,\n    creditLimitUsage: 100.3,\n    creditLimitInterestRate: 100.4,\n    creditLimitExpiryDate: '2019-09-28T16:41:41.090Z',\n    debitCards: [\n      {\n        number: '4578',\n        expiryDate: '2018-08-22T16:41:41.090Z',\n      },\n      {\n        number: '3241',\n        expiryDate: '2019-01-14T16:41:41.090Z',\n      },\n    ],\n    startDate: '2016-02-28T16:41:41.090Z',\n    termUnit: 'Y',\n    termNumber: 50,\n    maturityDate: '2017-02-28T16:41:41.090Z',\n    maturityAmount: 99.5,\n    autoRenewalIndicator: true,\n    interestPaymentFrequencyUnit: 'M',\n    interestPaymentFrequencyNumber: 15,\n    interestSettlementAccount: 'interestSettlementAccount1',\n    outstandingPrincipalAmount: 100.2,\n    monthlyInstalmentAmount: 100.1,\n    amountInArrear: 100.3,\n    minimumRequiredBalance: 80.4,\n    creditCardAccountNumber: '123456',\n    validThru: '2019-02-28T16:41:41.090Z',\n    applicableInterestRate: 101.2,\n    remainingCredit: 50,\n    outstandingPayment: 105.5,\n    minimumPayment: 51.1,\n    minimumPaymentDueDate: '2018-02-28T16:41:41.090Z',\n    totalInvestmentValue: 110.2,\n    accountHolderAddressLine1: 'accountHolderAddressLine11',\n    accountHolderAddressLine2: 'accountHolderAddressLine12',\n    creditAccount: true,\n    debitAccount: true,\n    visible: true,\n    lastUpdateDate: '2019-09-28T16:41:41.090Z',\n  },\n  {\n    id: '2222222-8926-4b4d-a99f-1c9dfbbb4610',\n    externalArrangementId: 'kjh4567-asd1-11e7-b114-b2f933d50000',\n    externalLegalEntityId: 'COOOOO1',\n    externalProductId: '1234567',\n    name: 'Mr and Mrs J. Smith second one',\n    productKindName: 'Current Account',\n    bankAlias: 'Secret account Mr and Mrs J. Smith second one',\n    bookedBalance: 100.1,\n    availableBalance: 100.2,\n    creditLimit: 100.3,\n    IBAN: 'GB29NWBK60161331926819',\n    BBAN: 'BBAN',\n    currency: 'EUR',\n    externalTransferAllowed: true,\n    urgentTransferAllowed: false,\n    accruedInterest: 2.2,\n    principalAmount: 100.4,\n    currentInvestmentValue: 100.5,\n    legalEntityIds: ['257da57a-11e4-4553-9175-54baf755069b', 'cd83683b-13f2-43d8-882b-39c9ab27d499'],\n    productId: '36c8fc42-ec97-4f83-8a7c-d622625007f3',\n    productTypeName: 'Current Account',\n    BIC: 'BICExample2',\n    bankBranchCode: 'bankBranchCode1',\n    accountOpeningDate: '2016-01-28T16:41:41.090Z',\n    accountInterestRate: 100.2,\n    valueDateBalance: 100.1,\n    creditLimitUsage: 100.3,\n    creditLimitInterestRate: 100.4,\n    creditLimitExpiryDate: '2019-09-28T16:41:41.090Z',\n    debitCards: [\n      {\n        number: '6378',\n        expiryDate: '2018-02-12T16:41:41.090Z',\n      },\n      {\n        number: '5111',\n        expiryDate: '2019-03-24T16:41:41.090Z',\n      },\n    ],\n    startDate: '2016-02-28T16:41:41.090Z',\n    termUnit: 'Y',\n    termNumber: 50,\n    maturityDate: '2017-02-28T16:41:41.090Z',\n    maturityAmount: 99.5,\n    autoRenewalIndicator: true,\n    interestPaymentFrequencyUnit: 'M',\n    interestPaymentFrequencyNumber: 15,\n    interestSettlementAccount: 'interestSettlementAccount1',\n    outstandingPrincipalAmount: 100.2,\n    monthlyInstalmentAmount: 100.1,\n    amountInArrear: 100.3,\n    minimumRequiredBalance: 80.4,\n    creditCardAccountNumber: '123456',\n    validThru: '2019-02-28T16:41:41.090Z',\n    applicableInterestRate: 101.2,\n    remainingCredit: 50,\n    outstandingPayment: 105.5,\n    minimumPayment: 51.1,\n    minimumPaymentDueDate: '2018-02-28T16:41:41.090Z',\n    totalInvestmentValue: 110.2,\n    accountHolderAddressLine1: 'accountHolderAddressLine11',\n    accountHolderAddressLine2: 'accountHolderAddressLine12',\n    creditAccount: true,\n    debitAccount: true,\n    visible: true,\n    lastUpdateDate: '2019-09-28T16:41:41.090Z',\n    userPreferences: {\n      visible: true,\n      alias: 'nice',\n      favorite: true,\n    },\n  },\n  {\n    id: '1cdb2224-8926-4b4d-a99f-1c9dfbbb4699',\n    externalArrangementId: 'kjh4567-asd1-11e7-b114-b2f933d50000',\n    externalLegalEntityId: 'COOOOO1',\n    externalProductId: '1234567',\n    name: 'Mr and Mrs J. Smith',\n    productKindName: 'Current Account',\n    bankAlias: 'Secret account',\n    bookedBalance: 100.1,\n    availableBalance: 100.2,\n    creditLimit: 100.3,\n    IBAN: 'GB29NWBK60161331926819',\n    BBAN: 'BBAN',\n    currency: 'EUR',\n    externalTransferAllowed: true,\n    urgentTransferAllowed: false,\n    accruedInterest: 2.2,\n    principalAmount: 100.4,\n    currentInvestmentValue: 100.5,\n    legalEntityIds: ['257da57a-11e4-4553-9175-54baf755069b', 'cd83683b-13f2-43d8-882b-39c9ab27d499'],\n    productId: '36c8fc42-ec97-4f83-8a7c-d622625007f3',\n    productTypeName: 'Current Account',\n    BIC: 'BICExample1',\n    bankBranchCode: 'bankBranchCode1',\n    accountOpeningDate: '2016-01-28T16:41:41.090Z',\n    accountInterestRate: 100.2,\n    valueDateBalance: 100.1,\n    creditLimitUsage: 100.3,\n    creditLimitInterestRate: 100.4,\n    creditLimitExpiryDate: '2019-09-28T16:41:41.090Z',\n    debitCards: [\n      {\n        number: '4578',\n        expiryDate: '2018-08-22T16:41:41.090Z',\n      },\n      {\n        number: '3241',\n        expiryDate: '2019-01-14T16:41:41.090Z',\n      },\n    ],\n    startDate: '2016-02-28T16:41:41.090Z',\n    termUnit: 'Y',\n    termNumber: 50,\n    maturityDate: '2017-02-28T16:41:41.090Z',\n    maturityAmount: 99.5,\n    autoRenewalIndicator: true,\n    interestPaymentFrequencyUnit: 'M',\n    interestPaymentFrequencyNumber: 15,\n    interestSettlementAccount: 'interestSettlementAccount1',\n    outstandingPrincipalAmount: 100.2,\n    monthlyInstalmentAmount: 100.1,\n    amountInArrear: 100.3,\n    minimumRequiredBalance: 80.4,\n    creditCardAccountNumber: '123456',\n    validThru: '2019-02-28T16:41:41.090Z',\n    applicableInterestRate: 101.2,\n    remainingCredit: 50,\n    outstandingPayment: 105.5,\n    minimumPayment: 51.1,\n    minimumPaymentDueDate: '2018-02-28T16:41:41.090Z',\n    totalInvestmentValue: 110.2,\n    accountHolderAddressLine1: 'accountHolderAddressLine11',\n    accountHolderAddressLine2: 'accountHolderAddressLine12',\n    creditAccount: true,\n    debitAccount: true,\n    visible: true,\n    lastUpdateDate: '2019-09-28T16:41:41.090Z',\n    userPreferences: {\n      alias: 'nice',\n    },\n  },\n];\n\nexport const accountsWithCount: Accounts = {\n  count: 3,\n  items: mockAccountsResponse,\n  params: { from: 1, paginationType: 'load-more' },\n};\n\nexport const balanceAggregationResponseMock = [\n  {\n    aggregatedBalances: [\n      {\n        currencyCode: 'EUR',\n        amount: '3289.0',\n        numberOfArrangements: 3,\n      },\n      {\n        currencyCode: 'USD',\n        amount: '2500.0',\n        numberOfArrangements: 10,\n      },\n    ],\n  },\n];\n","/* eslint-disable @typescript-eslint/ban-types */\nexport type PlainValue<T> = T extends string | number | boolean | null | undefined\n  ? T\n  : T extends Function\n  ? never\n  : T extends object\n  ? { [K in keyof T]: PlainValue<T[K]> }\n  : never;\n/* eslint-enable */\n\n// eslint-disable-next-line no-null/no-null\nexport const isPlainObject = <T>(obj: PlainValue<T>): boolean => typeof obj === 'object' && obj !== null;\n\n/**\n * Equality check between two \"plain\" (i.e. JSON compatible) values.\n * By \"plain\" value, we mean a primitive or an object/array that contains only other primitives and no methods or internal state.\n */\nexport const isEqual = <A extends unknown, B extends unknown>(a: PlainValue<A>, b: PlainValue<B>): boolean => {\n  if (Array.isArray(a) && Array.isArray(b)) {\n    return a.length === b.length && a.every((aValue, i) => isEqual(aValue, b[i]));\n  }\n  if (Array.isArray(a) || Array.isArray(b)) {\n    return false;\n  }\n\n  if (isPlainObject(a) && isPlainObject(b)) {\n    const aObject = a as PlainValue<Record<string, PlainValue<any>>>;\n    const bObject = b as PlainValue<Record<string, PlainValue<any>>>;\n    const aKeys = Object.keys(aObject);\n    const bKeys = Object.keys(bObject);\n    return aKeys.length === bKeys.length && aKeys.every(aKey => isEqual(aObject[aKey], bObject[aKey]));\n  }\n\n  return a === b;\n};\n","import { DebugElement } from '@angular/core';\nimport { ComponentFixture } from '@angular/core/testing';\nimport { By } from '@angular/platform-browser';\nimport { isDefined } from './helpers';\n\nexport class TestHelper<T> {\n  private _fixture: ComponentFixture<T>;\n\n  constructor(fixture: ComponentFixture<T>) {\n    this._fixture = fixture;\n  }\n\n  getElement(locator: string): DebugElement | null {\n    return this._fixture.debugElement.query(By.css(locator));\n  }\n\n  getElements(locator: string): DebugElement[] | null {\n    return this._fixture.debugElement.queryAll(By.css(locator));\n  }\n\n  getText(locator: string): string | undefined {\n    const element: DebugElement | null = this.getElement(locator);\n    if (element) {\n      return element.nativeElement.textContent.trim();\n    }\n    return undefined;\n  }\n\n  isElementPresent(locator: string): boolean {\n    return isDefined(this.getElement(locator));\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n/**\n * Converts number to an absolute value\n * {{ -100 | bbAbsoluteValue }}\n */\n@Pipe({\n  name: 'bbAbsoluteValue',\n})\nexport class AbsoluteValuePipe implements PipeTransform {\n  /**\n   * @name AbsoluteValuePipe#transform\n   * @param value - number value\n   *\n   * @description\n   * Converts number to an absolute value\n   */\n  transform(value?: number): number {\n    return value !== undefined ? Math.abs(value) : NaN;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AccountNumberPipeModule } from '@backbase/ui-ang/account-number-pipe';\nimport { PaymentCardNumberModule } from '@backbase/ui-ang/payment-card-number-pipe';\nimport { AbsoluteValuePipe } from './absolute-value.pipe';\n\nconst sharedPipes = [AccountNumberPipeModule, PaymentCardNumberModule];\nconst pipes = [AbsoluteValuePipe];\n\n@NgModule({\n  imports: [CommonModule, ...sharedPipes],\n  declarations: [...pipes],\n  exports: [...sharedPipes, ...pipes],\n})\nexport class FormatPipeModule {}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { ProductSummaryItem } from '@backbase/data-ang/arrangements';\nimport { Product } from '../../model/product-summary-types';\nimport { getProductNumberType } from '../../helpers/helpers';\n\n/**\n * Gets a valid account number that should be displayed for Product (iban, bban or cardNumber)\n */\n@Pipe({\n  name: 'bbProductNumberValue',\n})\nexport class ProductNumberValuePipe implements PipeTransform {\n  /**\n   * @name ProductNumberValuePipe#transform\n   * @param product - a product that contains account number\n   *\n   * @description\n   * Provides a valid account number for the product,\n   * for example:\n   * - IBAN for CurrentAccount product\n   * - BBAN for CurrentAccount product that doesn't have IBAN\n   * - number for CreditCard product\n   */\n  transform(product: ProductSummaryItem | Product): string {\n    const productNumberType = getProductNumberType(product);\n\n    if (productNumberType === 'iban' && 'IBAN' in product) {\n      return product.IBAN as string;\n    } else if (productNumberType === 'bban' && 'BBAN' in product) {\n      return product.BBAN as string;\n    } else if ('number' in product) {\n      return product.number as string;\n    }\n\n    return '';\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { ProductSummaryItem } from '@backbase/data-ang/arrangements';\nimport { AccountNumberType } from '@backbase/ui-ang/account-number-pipe';\nimport { getProductNumberType } from '../../helpers/helpers';\nimport { Product } from '../../model/product-summary-types';\n\n/**\n * Gets a valid account number type that should be displayed for Product (iban, bban or cardNumber)\n */\n@Pipe({\n  name: 'bbProductNumberType',\n})\nexport class ProductNumberTypePipe implements PipeTransform {\n  /**\n   * @name ProductNumberTypePipe#transform\n   * @param product - a product that contains account number\n   *\n   * @description\n   * Provides a valid account number for the product,\n   * for example:\n   * - 'iban' for CurrentAccount product\n   * - 'bban' for CurrentAccount product that doesn't have IBAN\n   * - 'cardNumber' for CreditCard product\n   */\n  transform(product: ProductSummaryItem | Product): AccountNumberType {\n    return getProductNumberType(product);\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { AccountNumberType, AccountsDisplayingFormatService } from '@backbase/ui-ang/account-number-pipe';\nimport { PaymentCardNumberFormat } from '@backbase/ui-ang/payment-card-number-pipe';\nimport { ProductSummaryItem } from '@backbase/data-ang/arrangements';\nimport { Product } from '../../model/product-summary-types';\nimport { getProductNumberType } from '../../helpers/helpers';\n\n/**\n * Provides numbers format per product or number type\n * a format includes masking and formatting configuration\n *\n * TODO: remove this pipe when all necessary ui-ang components support using `bbAccountNumber` pipe\n */\n@Pipe({\n  name: 'bbProductNumberFormat',\n})\nexport class ProductNumberFormatPipe implements PipeTransform {\n  /**\n   * @name ProductNumberFormatPipe#constructor\n   * @param accountsDisplayingFormatService - AccountsDisplayingFormatService\n   *\n   * @internal\n   */\n  constructor(private readonly accountsDisplayingFormatService: AccountsDisplayingFormatService) {}\n\n  /**\n   * @name ProductNumberFormatPipe#transform\n   * @param product - product that should be formatted or specific product number type\n   *\n   * @description\n   * Formats account numbers\n   */\n  transform(product: ProductSummaryItem | Product | AccountNumberType): PaymentCardNumberFormat {\n    const productType = typeof product === 'object' ? getProductNumberType(product) : product;\n    const displayingFormat = this.accountsDisplayingFormatService.getDefaultFormat(productType);\n\n    return { length: 0, maskRange: [0, 0], ...displayingFormat };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AccountNumberPipeModule } from '@backbase/ui-ang/account-number-pipe';\nimport { PaymentCardNumberModule } from '@backbase/ui-ang/payment-card-number-pipe';\nimport { ProductNumberValuePipe } from './product-number-value.pipe';\nimport { ProductNumberTypePipe } from './product-number-type.pipe';\nimport { ProductNumberFormatPipe } from './product-number-format.pipe';\n\nconst sharedPipes = [AccountNumberPipeModule, PaymentCardNumberModule];\nconst pipes = [ProductNumberValuePipe, ProductNumberTypePipe, ProductNumberFormatPipe];\n\n@NgModule({\n  imports: [CommonModule, ...sharedPipes],\n  declarations: [...pipes],\n  exports: [...sharedPipes, ...pipes],\n})\nexport class ProductNumberPipeModule {}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { isDefined } from '../../helpers/helpers';\n\n/**\n * Verifies if values is defined (not null and not undefined)\n */\n@Pipe({\n  name: 'bbIsDefined',\n})\nexport class IsDefinedPipe implements PipeTransform {\n  /**\n   * @name IsDefinedPipe#transform\n   * @param value - value of any type\n   *\n   * @description\n   * Verifies if values is defined\n   * for example:\n   * - true for '' string\n   * - true for 0 number\n   * - false for undefined value\n   */\n  transform(value: any): boolean {\n    return isDefined(value);\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n/**\n * Verifies if the passed item is presented in the array\n * Note: deep-equal is not supported\n *\n * @usageNotes\n * ### Example\n * ```html\n * <div *ngIf=\"{{ item|bbIsArray:array }}\"></div>\n * ```\n */\n@Pipe({ name: 'bbIsInArray' })\nexport class IsInArrayPipe implements PipeTransform {\n  /**\n   * Verifies if `item` is presented in `array`\n   *\n   * @param item\n   * @param array\n   */\n  transform<T>(item: T, array: T[]): boolean {\n    if (array && array.length) {\n      return array.indexOf(item) !== -1;\n    }\n    return false;\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { isDefined } from '../../helpers/helpers';\n\n/**\n * Verifies if the passed item is a percent value\n *\n * @usageNotes\n * ### Example\n * ```html\n * <div *ngIf=\"{{ \"10%\"|bbIsPercentValue }}\"></div>\n * ```\n */\n@Pipe({ name: 'bbIsPercentValue' })\nexport class IsPercentValue implements PipeTransform {\n  /**\n   * Verifies if the passed item is a percent value\n   *\n   * @param item\n   */\n  transform<T>(item: T): boolean {\n    if (isDefined(item) && typeof item === 'string') {\n      const percentIndex = item.indexOf('%');\n      return percentIndex === 0 || percentIndex === item.length - 1;\n    }\n    return false;\n  }\n}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { ExternalProductKindItem, SummaryProductKindItem, ProductKindItem } from '@backbase/data-ang/arrangements';\nimport { ProductKindUri } from '../../model/types';\nimport { isDefined } from '../../helpers/helpers';\n\n/**\n * Verifies if \"kind\" of productKindItem is equal to expected \"kind\"\n *\n * @usageNotes\n * ### Example\n * ```html\n * <div *ngIf=\"productKind | bbIsProductKind:expectedProductKindType\"></div>\n * ```\n */\n@Pipe({ name: 'bbIsProductKind' })\nexport class IsProductKindPipe implements PipeTransform {\n  /**\n   * Verifies if \"kind\" of productKindItem is equal to expected \"kind\"\n   *\n   * @param productKindItem\n   * @param expectedProductKindType\n   */\n  transform(\n    productKindItem: ExternalProductKindItem | SummaryProductKindItem | ProductKindItem | undefined,\n    expectedProductKindType: ProductKindUri | ProductKindUri[],\n  ): boolean {\n    if (isDefined(productKindItem?.kindUri)) {\n      return Array.isArray(expectedProductKindType)\n        ? expectedProductKindType.includes(productKindItem?.kindUri as ProductKindUri)\n        : productKindItem?.kindUri === expectedProductKindType;\n    }\n    return false;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IsDefinedPipe } from './is-defined.pipe';\nimport { IsInArrayPipe } from './is-in-array.pipe';\nimport { IsPercentValue } from './is-percent-value.pipe';\nimport { IsProductKindPipe } from './is-product-kind.pipe';\n\nconst pipes = [IsDefinedPipe, IsInArrayPipe, IsPercentValue, IsProductKindPipe];\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [...pipes],\n  exports: [...pipes],\n})\nexport class ValidationModule {}\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { BbDatePipe } from '@backbase/ui-ang/date-pipe';\n\n/**\n * Returns localised info of date of update\n *\n * @usageNotes\n * ### Example\n * ```html\n * <p>{{ '2020-10-10' | bbDateUpdateAgo }}</p>\n * <p>{{ '2020-10-10' | bbDateUpdateAgo:'mediumDate' }}</p>\n * ```\n */\n@Pipe({\n  name: 'bbDateUpdatedAgo',\n})\nexport class DateUpdatedAgoPipe implements PipeTransform {\n  private readonly millisecondsInPeriod = {\n    day: 86400000,\n    hours: 7200000,\n    hour: 3600000,\n    minutes: 120000,\n    minute: 60000,\n  };\n  private readonly localisationByPeriod = {\n    date: (date: string) => $localize`:@@product-summary.update-date.date:Updated on ${date}`,\n    hours: (hours: number) => $localize`:@@product-summary.update-date.hours:Updated ${hours} hours ago`,\n    hour: () => $localize`:@@product-summary.update-date.hour:Updated 1 hour ago`,\n    minutes: (minutes: number) => $localize`:@@product-summary.update-date.minutes:Updated ${minutes} minutes ago`,\n    minute: () => $localize`:@@product-summary.update-date.minute:Updated 1 minute ago`,\n  };\n\n  /**\n   * @name DateUpdatedAgoPipe#constructor\n   * @param datePipe - BbDatePipe\n   *\n   * @internal\n   */\n  constructor(private datePipe: BbDatePipe) {}\n\n  /**\n   * @name DateUpdatedAgoPipe#transform\n   * @param updateTimestamp - update date\n   * @param dateFormat - the format type for the date to be formatted (for update time >= 1 day ago)\n   *\n   * @description\n   * Returns localised info of date of update\n   *\n   * Example:\n   *  transform(hourAgo) - 'Updated 1 hour ago'\n   *  transform(minuteAgo) - 'Updated 1 minute ago'\n   */\n  transform(updateTimestamp: string, dateFormat = 'longDate'): string {\n    const millisecondsAgo = Math.max(new Date().getTime() - new Date(updateTimestamp).getTime(), 0);\n\n    if (millisecondsAgo < this.millisecondsInPeriod.minutes) {\n      return this.localisationByPeriod.minute();\n    } else if (millisecondsAgo < this.millisecondsInPeriod.hour) {\n      const minutesAgo = Math.floor(millisecondsAgo / this.millisecondsInPeriod.minute);\n      return this.localisationByPeriod.minutes(minutesAgo);\n    } else if (millisecondsAgo < this.millisecondsInPeriod.hours) {\n      return this.localisationByPeriod.hour();\n    } else if (millisecondsAgo < this.millisecondsInPeriod.day) {\n      const hoursAgo = Math.floor(millisecondsAgo / this.millisecondsInPeriod.hour);\n      return this.localisationByPeriod.hours(hoursAgo);\n    } else {\n      const updateDate = this.datePipe.transform(updateTimestamp, dateFormat) as string;\n      return this.localisationByPeriod.date(updateDate);\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { BbDatePipe, BbDatePipeModule } from '@backbase/ui-ang/date-pipe';\nimport { DateUpdatedAgoPipe } from './date-updated-ago.pipe';\n\nconst sharedPipes = [BbDatePipeModule];\nconst pipes = [DateUpdatedAgoPipe];\n\n@NgModule({\n  imports: [CommonModule, ...sharedPipes],\n  declarations: [...pipes],\n  exports: [...pipes, ...sharedPipes],\n  providers: [BbDatePipe],\n})\nexport class DatePipeModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["i1","sharedPipes","pipes"],"mappings":"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"}