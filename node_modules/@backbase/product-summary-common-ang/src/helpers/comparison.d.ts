export declare type PlainValue<T> = T extends string | number | boolean | null | undefined ? T : T extends Function ? never : T extends object ? {
    [K in keyof T]: PlainValue<T[K]>;
} : never;
export declare const isPlainObject: <T>(obj: PlainValue<T>) => boolean;
/**
 * Equality check between two "plain" (i.e. JSON compatible) values.
 * By "plain" value, we mean a primitive or an object/array that contains only other primitives and no methods or internal state.
 */
export declare const isEqual: <A extends unknown, B extends unknown>(a: PlainValue<A>, b: PlainValue<B>) => boolean;
