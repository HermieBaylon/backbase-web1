(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/forms'), require('@backbase/foundation-ang/core'), require('@backbase/messages-common'), require('@backbase/ui-ang/alert'), require('@backbase/ui-ang/badge'), require('@backbase/ui-ang/empty-state'), require('@backbase/ui-ang/icon'), require('@backbase/ui-ang/button'), require('@backbase/ui-ang/modal'), require('@backbase/ui-ang/tooltip-directive'), require('@backbase/ui-ang/loading-indicator'), require('@backbase/ui-ang/input-validation-message'), require('@backbase/ui-ang/load-button'), require('@backbase/ui-ang/rich-text-editor'), require('rxjs/operators'), require('rxjs'), require('@backbase/foundation-ang/web-sdk'), require('@backbase/messages-v5-http-ang'), require('@angular/common/http'), require('@angular/router')) :
    typeof define === 'function' && define.amd ? define('@backbase/messages-conversation-thread-widget-ang', ['exports', '@angular/core', '@angular/common', '@angular/forms', '@backbase/foundation-ang/core', '@backbase/messages-common', '@backbase/ui-ang/alert', '@backbase/ui-ang/badge', '@backbase/ui-ang/empty-state', '@backbase/ui-ang/icon', '@backbase/ui-ang/button', '@backbase/ui-ang/modal', '@backbase/ui-ang/tooltip-directive', '@backbase/ui-ang/loading-indicator', '@backbase/ui-ang/input-validation-message', '@backbase/ui-ang/load-button', '@backbase/ui-ang/rich-text-editor', 'rxjs/operators', 'rxjs', '@backbase/foundation-ang/web-sdk', '@backbase/messages-v5-http-ang', '@angular/common/http', '@angular/router'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["messages-conversation-thread-widget-ang"] = {}), global.ng.core, global.ng.common, global.ng.forms, global.i1$1, global.i3, global.i7, global.i6, global.i13, global.i5, global.i12, global.i11, global.i16, global.i14, global.i9, global.i10, global.i8, global.rxjs.operators, global.rxjs, global.webSdk, global.i1, global.ng.common.http, global.ng.router));
})(this, (function (exports, i0, i15, i17, i1$1, i3, i7, i6, i13, i5, i12, i11, i16, i14, i9, i10, i8, operators, rxjs, webSdk, i1, i2, i4) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i15__namespace = /*#__PURE__*/_interopNamespace(i15);
    var i17__namespace = /*#__PURE__*/_interopNamespace(i17);
    var i1__namespace$1 = /*#__PURE__*/_interopNamespace(i1$1);
    var i3__namespace = /*#__PURE__*/_interopNamespace(i3);
    var i7__namespace = /*#__PURE__*/_interopNamespace(i7);
    var i6__namespace = /*#__PURE__*/_interopNamespace(i6);
    var i13__namespace = /*#__PURE__*/_interopNamespace(i13);
    var i5__namespace = /*#__PURE__*/_interopNamespace(i5);
    var i12__namespace = /*#__PURE__*/_interopNamespace(i12);
    var i11__namespace = /*#__PURE__*/_interopNamespace(i11);
    var i16__namespace = /*#__PURE__*/_interopNamespace(i16);
    var i14__namespace = /*#__PURE__*/_interopNamespace(i14);
    var i9__namespace = /*#__PURE__*/_interopNamespace(i9);
    var i10__namespace = /*#__PURE__*/_interopNamespace(i10);
    var i8__namespace = /*#__PURE__*/_interopNamespace(i8);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i4__namespace = /*#__PURE__*/_interopNamespace(i4);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var bbEventUnreadConversationCountUpdate = 'bb.event.unread-conversation-count.update';
    var MessagesConversationThreadWidgetService = /** @class */ (function (_super) {
        __extends(MessagesConversationThreadWidgetService, _super);
        function MessagesConversationThreadWidgetService(messagesService, http, pubSub) {
            var _this = _super.call(this) || this;
            _this.messagesService = messagesService;
            _this.http = http;
            _this.pubSub = pubSub;
            return _this;
        }
        /**
         * Creat message draft
         *
         * @param messageId Message id
         * @param body Message request body
         * @returns Create converastion message draft stream
         */
        MessagesConversationThreadWidgetService.prototype.createDraft = function (messageId, body) {
            return this.messagesService.postConversationMessageDraft({
                messageId: messageId,
                conversationMessageDraftPostRequestBody: body,
            });
        };
        /**
         * Delete message draft
         *
         * @param draftId Draft id
         * @returns Delete draft stream
         */
        MessagesConversationThreadWidgetService.prototype.deleteDraft = function (draftId) {
            return this.messagesService.deleteMessageDrafts({ ids: [draftId] });
        };
        /**
         * Update message draft
         *
         * @param messageId Message id
         * @param body Conversation message draft request body
         * @returns Update draft stream
         */
        MessagesConversationThreadWidgetService.prototype.updateDraft = function (messageId, body) {
            return this.messagesService.putConversationMessageDraft({
                messageId: messageId,
                conversationMessageDraftPutRequestBody: body,
            });
        };
        /**
         * Delete conversation
         *
         * @param id Conversation id
         * @returns Delete conversation thread stream
         */
        MessagesConversationThreadWidgetService.prototype.deleteConversation = function (id) {
            var _this = this;
            return this.messagesService
                .deleteConversationThreads({ ids: [id] })
                .pipe(operators.tap(function () { return _this.pubSub.publish(bbEventUnreadConversationCountUpdate, undefined); }));
        };
        /**
         * Get conversation thread
         *
         * @param messageId Message id
         * @returns Get conversation thread stream
         */
        MessagesConversationThreadWidgetService.prototype.getConversationThread = function (messageId) {
            return this.messagesService.getMessageThread({ messageId: messageId });
        };
        /**
         * Mark conversation as read or unread
         *
         * @param params Mark conversation as read/unread request body
         * @returns Mark conversation as read/unread stream
         */
        MessagesConversationThreadWidgetService.prototype.markConversationsAsReadUnread = function (params) {
            var _this = this;
            return this.messagesService
                .putMarkAsReadUnread({ markAsReadUnreadPutRequestBody: params })
                .pipe(operators.tap(function () { return _this.pubSub.publish(bbEventUnreadConversationCountUpdate, undefined); }));
        };
        /**
         * Post reply message
         *
         * @param messageId Message id
         * @param body Message reply post request body
         * @returns Post reply message stream
         */
        MessagesConversationThreadWidgetService.prototype.postReplyMessage = function (messageId, body) {
            return this.messagesService.postMessageReply({ messageId: messageId, messageReplyPostRequestBody: body });
        };
        /**
         * Get url attachment download
         *
         * @param attachmentId Attachment id
         * @returns Download attachment url
         */
        MessagesConversationThreadWidgetService.prototype.getDownloadAttachmentUrl = function (attachmentId) {
            return this.messagesService.getMessageAttachmentUrl({ attachmentId: attachmentId });
        };
        /**
         * Download attachment
         *
         * @param attachmentId Attachment id
         * @returns Download file stream
         */
        MessagesConversationThreadWidgetService.prototype.downloadFile = function (attachmentId) {
            return this.http.get(this.getDownloadAttachmentUrl(attachmentId), { responseType: 'arraybuffer' });
        };
        return MessagesConversationThreadWidgetService;
    }(i3.AbstractBaseMessagesConversationThreadService));
    MessagesConversationThreadWidgetService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesConversationThreadWidgetService, deps: [{ token: i1__namespace.MessagecenterHttpService }, { token: i2__namespace.HttpClient }, { token: webSdk.PUBSUB }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    MessagesConversationThreadWidgetService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesConversationThreadWidgetService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesConversationThreadWidgetService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () {
            return [{ type: i1__namespace.MessagecenterHttpService }, { type: i2__namespace.HttpClient }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [webSdk.PUBSUB]
                        }] }];
        } });

    var DefaultWidgetProperties = {
        customerServiceTitle: 'Customer Service',
        mailboxTypeTitle: 'Inbox',
        maxAttachmentSize: '10',
        replyMessageMaxLength: '300',
    };
    var WidgetPropertiesService = /** @class */ (function () {
        function WidgetPropertiesService(itemModel) {
            this.itemModel = itemModel;
        }
        Object.defineProperty(WidgetPropertiesService.prototype, "customerServiceTitle", {
            /**
             * Customer service title
             */
            get: function () {
                if (!this.itemModel) {
                    return i3.defaultModelObservable(DefaultWidgetProperties.customerServiceTitle);
                }
                return this.itemModel.property('customerServiceTitle', DefaultWidgetProperties.customerServiceTitle);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(WidgetPropertiesService.prototype, "mailboxTypeTitle", {
            /**
             * Mailbox type title
             */
            get: function () {
                if (!this.itemModel) {
                    return i3.defaultModelObservable(DefaultWidgetProperties.mailboxTypeTitle);
                }
                return this.itemModel.property('mailboxTypeTitle', DefaultWidgetProperties.mailboxTypeTitle);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(WidgetPropertiesService.prototype, "maxAttachmentSize", {
            /**
             * Max attachment size
             */
            get: function () {
                if (!this.itemModel) {
                    return i3.defaultModelObservable(DefaultWidgetProperties.maxAttachmentSize);
                }
                return this.itemModel.property('maxAttachmentSize', DefaultWidgetProperties.maxAttachmentSize);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(WidgetPropertiesService.prototype, "replyMessageMaxLength", {
            /**
             * Reply message max length
             */
            get: function () {
                if (!this.itemModel) {
                    return i3.defaultModelObservable(DefaultWidgetProperties.replyMessageMaxLength);
                }
                return this.itemModel.property('replyMessageMaxLength', DefaultWidgetProperties.replyMessageMaxLength);
            },
            enumerable: false,
            configurable: true
        });
        return WidgetPropertiesService;
    }());
    WidgetPropertiesService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: WidgetPropertiesService, deps: [{ token: i1__namespace$1.ItemModel, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    WidgetPropertiesService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: WidgetPropertiesService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: WidgetPropertiesService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () {
            return [{ type: i1__namespace$1.ItemModel, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var MessagesConversationThreadWidgetComponent = /** @class */ (function (_super) {
        __extends(MessagesConversationThreadWidgetComponent, _super);
        function MessagesConversationThreadWidgetComponent(messagesService, properties, encodingService, uploadService, confirmModalService, apiThreadService, activatedRoute, sharedService, cd) {
            var _this = _super.call(this, apiThreadService, activatedRoute, sharedService, confirmModalService, uploadService, encodingService) || this;
            _this.messagesService = messagesService;
            _this.properties = properties;
            _this.encodingService = encodingService;
            _this.uploadService = uploadService;
            _this.confirmModalService = confirmModalService;
            _this.apiThreadService = apiThreadService;
            _this.activatedRoute = activatedRoute;
            _this.sharedService = sharedService;
            _this.cd = cd;
            _this.hostRef = _this;
            _this.replyStream = _this.getReplyStream();
            /**
             * The flag indicating if the remove confirmation modal is opened or closed.
             */
            _this.removeModalOpened = false;
            _this.mailboxTypeTitle$$ = new rxjs.BehaviorSubject(undefined);
            _this.maxAttachmentSize$$ = new rxjs.BehaviorSubject(undefined);
            _this.replyMessageMaxLength$$ = new rxjs.BehaviorSubject(undefined);
            _this.customerServiceTitle$$ = new rxjs.BehaviorSubject(undefined);
            /**
             * The stream with the conversation data.
             */
            _this.conversation = _this.getConversationStream();
            /**
             * The stream with the mailbox type.
             */
            _this.mailboxTypeTitle = i3.getPropertyValue(_this.mailboxTypeTitle$$, _this.properties.mailboxTypeTitle);
            /**
             * The stream with the maximum attachment size.
             */
            _this.maxAttachmentSize = i3.getPropertyValue(_this.maxAttachmentSize$$, _this.properties.maxAttachmentSize);
            /**
             * The stream with the maximum message length.
             */
            _this.replyMessageMaxLength = i3.getPropertyValue(_this.replyMessageMaxLength$$, _this.properties.replyMessageMaxLength);
            /**
             * The stream with the maximum message length number.
             */
            _this.replyMessageMaxLength$ = i3.getPropertyValue(_this.replyMessageMaxLength$$, _this.properties.replyMessageMaxLength).pipe(operators.map(function (val) { return Number(val); }));
            /**
             * The stream with the customer service title.
             */
            _this.customerServiceTitle$ = i3.getPropertyValue(_this.customerServiceTitle$$, _this.properties.customerServiceTitle);
            return _this;
        }
        Object.defineProperty(MessagesConversationThreadWidgetComponent.prototype, "mailboxTypeTitleValue", {
            /**
             * The stream with the mailbox type.
             */
            set: function (value) {
                this.mailboxTypeTitle$$.next(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MessagesConversationThreadWidgetComponent.prototype, "maxAttachmentSizeValue", {
            /**
             * The stream with the maximum attachment size.
             */
            set: function (value) {
                this.maxAttachmentSize$$.next(String(value));
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MessagesConversationThreadWidgetComponent.prototype, "replyMessageMaxLengthValue", {
            /**
             * The stream with the maximum message length.
             */
            set: function (value) {
                this.replyMessageMaxLength$$.next(String(value));
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MessagesConversationThreadWidgetComponent.prototype, "customerServiceTitleValue", {
            /**
             * The stream with the customer service title.
             */
            set: function (value) {
                this.customerServiceTitle$$.next(value);
            },
            enumerable: false,
            configurable: true
        });
        MessagesConversationThreadWidgetComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.conversation.pipe(operators.first(), operators.takeUntil(this.unsubscribe)).subscribe(function () {
                _this.initSubscriptions();
            });
        };
        MessagesConversationThreadWidgetComponent.prototype.getReplyStream = function () {
            var _this = this;
            return this.replyPressed.pipe(operators.throttleTime(1000), operators.withLatestFrom(this.conversationId), operators.concatMap(function (_a) {
                var _b = __read(_a, 2), obj = _b[0], conversationId = _b[1];
                _this.formLoading = true;
                return _this.messagesService.postReplyMessage(conversationId, obj).pipe(operators.switchMap(function () { return _this.draftResponse ? _this.messagesService.deleteDraft(_this.draftResponse.id) : rxjs.of(undefined); }), operators.tap(function () {
                    _this.uploadService.reset();
                    _this.replyFormGroup.reset();
                    _this.sharedService.openNotification(_this.replySuccessTpl);
                }), operators.catchError(function (error) {
                    _this.sharedService.openNotification(_this.sharedService.getErrorMessage(error), 'error');
                    _this.cd.markForCheck();
                    return rxjs.EMPTY;
                }), operators.finalize(function () {
                    _this.formLoading = false;
                }));
            }));
        };
        MessagesConversationThreadWidgetComponent.prototype.getConversationStream = function () {
            var _this = this;
            return rxjs.combineLatest([this.conversationId, rxjs.merge(this.replyStream, rxjs.of(undefined))]).pipe(operators.tap(function () {
                _this.loading = true;
                _this.errorResponse = undefined;
            }), operators.switchMap(function (_a) {
                var _b = __read(_a, 1), conversationId = _b[0];
                return _this.messagesService.getConversationThread(conversationId).pipe(operators.withLatestFrom(_this.customerServiceTitle$), operators.map(function (_a) {
                    var _b = __read(_a, 2), conversation = _b[0], customerName = _b[1];
                    var messages = conversation &&
                        conversation.messages
                            .map(function (message) { return (Object.assign(Object.assign({}, message), { body: _this.encodingService.b64Decode(message.body), attachments: message.attachments && _this.apiThreadService.attachmentsMapper(message.attachments), sender: Object.assign(Object.assign({}, message.sender), { name: message.sender.id === 'customer.service' ? customerName : message.sender.name }) })); })
                            .reverse();
                    return Object.assign(Object.assign({}, conversation), { messages: messages });
                }), operators.tap(function (conversation) {
                    _this.draftResponse = conversation.draft && Object.assign({}, conversation.draft);
                    if (_this.draftResponse) {
                        _this.toggleReplyForm(true);
                        if (_this.draftResponse.attachments) {
                            _this.replyFormGroup.controls['attachments'].setValue(__spreadArray([], __read(_this.draftResponse.attachments)));
                        }
                        if (_this.draftResponse.body) {
                            _this.replyFormGroup.controls['body'].setValue(_this.encodingService.b64Decode(_this.draftResponse.body));
                        }
                    }
                }), operators.catchError(function (error) {
                    _this.errorResponse = error;
                    _this.cd.markForCheck();
                    return rxjs.EMPTY;
                }), operators.finalize(function () {
                    _this.loading = false;
                }));
            }), i3.shareReplayOnce(), operators.takeUntil(this.unsubscribe));
        };
        /**
         * The method to discard a message or a draft.
         */
        MessagesConversationThreadWidgetComponent.prototype.confirmConfirmationModal = function () {
            switch (this.confirmationModal && this.confirmationModal.type) {
                case i3.ManipulationType.discard:
                    this.toggleReplyForm(false);
                    break;
                case i3.ManipulationType.discardDraft:
                    this.deleteDraft().pipe(operators.takeUntil(this.unsubscribe)).subscribe();
                    this.toggleReplyForm(false);
                    break;
            }
            this.confirmModalService.toggleModal(false);
        };
        /**
         * The method to open the removal modal.
         */
        MessagesConversationThreadWidgetComponent.prototype.openRemoveModal = function () {
            this.removeModalOpened = true;
        };
        /**
         * The method to close the removal modal.
         */
        MessagesConversationThreadWidgetComponent.prototype.closeRemoveModal = function () {
            this.removeModalOpened = false;
        };
        /**
         * The method to remove a conversation.
         */
        MessagesConversationThreadWidgetComponent.prototype.removeConversation = function () {
            var _this = this;
            this.closeRemoveModal();
            this.conversationId
                .pipe(operators.switchMap(function (id) { return _this.messagesService.deleteConversation(id); }), operators.takeUntil(this.unsubscribe))
                .subscribe(function () {
                if (_this.deleteSuccessTpl) {
                    _this.sharedService.openNotification(_this.deleteSuccessTpl);
                }
                _this.navigateBack();
            }, function (error) { return _this.sharedService.openNotification(_this.sharedService.getErrorMessage(error), 'error'); });
        };
        /**
         * The method to toggle the read/unread conversation status.
         *
         * @param status Status type
         */
        MessagesConversationThreadWidgetComponent.prototype.toggleRead = function (status) {
            if (status === void 0) { status = i3.ReadUnreadStatusType.UNREAD; }
            this.markAsReadUnreadSubject.next(status);
        };
        /**
         * The method to open the discard confirmation modal.
         */
        MessagesConversationThreadWidgetComponent.prototype.handleDiscardClick = function () {
            var manipulationType = this.draftResponse ? this.manipulationTypes.discardDraft : this.manipulationTypes.discard;
            this.confirmModalService.toggleModal(true, manipulationType, this.replyFormGroup);
        };
        return MessagesConversationThreadWidgetComponent;
    }(i3.BaseConversationThreadComponent));
    MessagesConversationThreadWidgetComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesConversationThreadWidgetComponent, deps: [{ token: MessagesConversationThreadWidgetService }, { token: WidgetPropertiesService }, { token: i3__namespace.MessagesEncodingService }, { token: i3__namespace.MessagesUploadAttachmentsService }, { token: i3__namespace.MessagesManipulationConfirmModalService }, { token: i3__namespace.AbstractBaseMessagesConversationThreadService }, { token: i4__namespace.ActivatedRoute }, { token: i3__namespace.SharedMethodsService }, { token: i0__namespace.ChangeDetectorRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    MessagesConversationThreadWidgetComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: MessagesConversationThreadWidgetComponent, selector: "bb-messages-conversation-thread-widget-ang", inputs: { mailboxTypeTitleValue: ["mailboxTypeTitle", "mailboxTypeTitleValue"], maxAttachmentSizeValue: ["maxAttachmentSize", "maxAttachmentSizeValue"], replyMessageMaxLengthValue: ["replyMessageMaxLength", "replyMessageMaxLengthValue"], customerServiceTitleValue: ["customerServiceTitle", "customerServiceTitleValue"] }, providers: [
            i3.MessagesEncodingService,
            WidgetPropertiesService,
            i3.MessagesManipulationConfirmModalService,
            i3.MessagesUploadAttachmentsService,
            {
                provide: i3.BaseUploadAttachmentsService,
                useClass: i3.MessagesClientUploadAttachmentsService,
            },
            {
                provide: i3.AbstractBaseMessagesConversationThreadService,
                useClass: MessagesConversationThreadWidgetService,
            },
        ], usesInheritance: true, ngImport: i0__namespace, template: "<ng-container\n  bbMessagesConversationThreadCustomizable\n  [bbHostRef]=\"hostRef\"\n  [bbTemplateContext]=\"{\n    conversation: conversation | async,\n    maxAttachmentSize: maxAttachmentSize | async,\n    replyMessageMaxLength: replyMessageMaxLength$ | async,\n    mailboxType: mailboxTypeTitle | async\n  }\"\n></ng-container>\n\n<ng-template\n  bbMessagesConversationThreadCustomizable\n  let-host\n  let-conversation=\"context.conversation\"\n  let-maxAttachmentSize=\"context.maxAttachmentSize\"\n  let-replyMessageMaxLength=\"context.replyMessageMaxLength\"\n  let-mailboxType=\"context.mailboxType\"\n>\n  <div class=\"card card-lg\">\n    <ng-container *ngIf=\"host.conversationId | async; else errorState\">\n      <ng-container *ngIf=\"!host.loading; else loadingState\">\n        <ng-container *ngIf=\"!host.errorResponse; else errorState\">\n          <ng-container *ngIf=\"conversation?.messages.length; else emptyState\">\n            <div\n              class=\"card-header bb-block--md\"\n              role=\"region\"\n              aria-label=\"Conversation details\"\n              i18n-aria-label=\"Conversation details@@messages.messagesConversationThread.conversationDetails\"\n            >\n              <div class=\"bb-block--md\">\n                <button bbButton color=\"link\" data-role=\"navigate-back\" (click)=\"host.navigateBack()\">\n                  <bb-icon-ui [cropped]=\"true\" name=\"arrow-back\"></bb-icon-ui>\n                  <span\n                    i18n=\"\n                      Back button|Return to list of conversations of specified mailbox\n                      type@@messages.messagesConversationThread.backButton\"\n                    >Back to {{ mailboxType }}</span\n                  >\n                </button>\n              </div>\n              <div class=\"bb-stack\">\n                <div>\n                  <div class=\"bb-block--sm\" role=\"heading\" aria-level=\"3\">\n                    <span\n                      class=\"sr-only\"\n                      i18n=\"Conversation topic@@messages.messagesConversationThread.conversationTopic\"\n                      >Topic:</span\n                    >\n                    <bb-badge-ui\n                      [text]=\"conversation.topic.name\"\n                      [color]=\"conversation.topic.deleted ? 'secondary' : 'primary'\"\n                    ></bb-badge-ui>\n                  </div>\n                  <div class=\"bb-stack\">\n                    <span role=\"heading\" aria-level=\"4\" class=\"bb-stack__item\">\n                      <span\n                        class=\"sr-only\"\n                        i18n=\"Conversation subject@@messages.messagesConversationThread.conversationSubject\"\n                        >Subject:</span\n                      >\n                      <span\n                        class=\"bb-text-semi-bold break-word\"\n                        [innerHTML]=\"conversation.subject\"\n                        data-role=\"subject-name\"\n                      ></span>\n                    </span>\n                    <bb-icon-ui\n                      *ngIf=\"conversation.important\"\n                      name=\"error\"\n                      class=\"bb-stack__item\"\n                      color=\"danger\"\n                      data-role=\"important\"\n                      i18n-bbTooltip=\"High priority@@messages.messagesConversationThread.importantMessage.tooltip\"\n                      bbTooltip=\"High priority\"\n                      container=\"body\"\n                      triggers=\"hover\"\n                      placement=\"top\"\n                      aria-label=\"This conversation has high priority\"\n                      i18n-aria-label=\"\n                        This conversation has high priority@@messages.messagesConversationThread.importantMessage\"\n                    ></bb-icon-ui>\n                  </div>\n                </div>\n                <div class=\"bb-stack__item--push-right\">\n                  <span\n                    bbTooltip=\"Mark as unread\"\n                    i18n-bbTooltip=\"\n                      Mark as unread|Mark as unread button@@messages.messagesConversationThread.markAsUnreadButton\"\n                    container=\"body\"\n                    triggers=\"hover focus\"\n                    placement=\"top\"\n                    class=\"bb-stack__item\"\n                  >\n                    <button\n                      bbButton\n                      color=\"link\"\n                      circle=\"true\"\n                      data-role=\"mark-as-unread-conversation\"\n                      aria-label=\"Mark as unread\"\n                      i18n-aria-label=\"@@messages.messagesConversationThread.markAsUnreadButton\"\n                      (click)=\"host.toggleRead()\"\n                    >\n                      <bb-icon-ui class=\"bb-text-support\" name=\"markunread\"></bb-icon-ui>\n                    </button>\n                  </span>\n\n                  <span\n                    bbTooltip=\"Delete conversation\"\n                    container=\"body\"\n                    i18n-bbTooltip=\"\n                      Delete conversation|Delete conversation\n                      button@@messages.messagesConversationThread.deleteConversationButton\"\n                    triggers=\"hover focus\"\n                    placement=\"top\"\n                  >\n                    <button\n                      bbButton\n                      color=\"link\"\n                      circle=\"true\"\n                      data-role=\"delete-conversation\"\n                      *ngIf=\"conversation.deletable\"\n                      (click)=\"host.openRemoveModal()\"\n                      aria-label=\"Delete conversation\"\n                      i18n-aria-label=\"@@messages.messagesConversationThread.deleteConversationButton\"\n                    >\n                      <bb-icon-ui class=\"bb-text-support\" name=\"delete\"></bb-icon-ui>\n                    </button>\n                  </span>\n                </div>\n              </div>\n\n              <bb-alert-ui\n                role=\"alert\"\n                modifier=\"warning\"\n                [dismissible]=\"true\"\n                *ngIf=\"conversation.topic.deleted && !host.topicAlertClosed\"\n                (close)=\"host.topicAlertClosed = true\"\n                i18n-title=\"Topic no longer exists alert@@messages.messagesConversationThread.alertMessage.topicDeleted\"\n                title=\"This topic no longer exists. Contact support for details.\"\n              ></bb-alert-ui>\n            </div>\n            <div\n              [class.bb-list__item]=\"host.replyOpened\"\n              role=\"list\"\n              aria-label=\"Messages list\"\n              i18n-aria-label=\"Messages list@@messages.messagesConversationThread.conversationMessagesList\"\n            >\n              <bb-messages-conversation-message\n                *ngFor=\"let message of conversation.messages; let last = last\"\n                [sender]=\"message.isMyMessage ? me : message.sender.name\"\n                [created]=\"message.createdAt\"\n                [message]=\"message.body\"\n                [isBodyHtml]=\"message.isBodyHtml\"\n                [opened]=\"last\"\n                [attachments]=\"message.attachments\"\n                role=\"listitem\"\n                aria-label=\"Message\"\n                i18n-aria-label=\"Message@@messages.messagesConversationThread.conversationMessage\"\n              ></bb-messages-conversation-message>\n            </div>\n            <div class=\"card-footer\" *ngIf=\"!conversation['read-only']\">\n              <form [formGroup]=\"host.replyFormGroup\">\n                <div class=\"bb-block--xl\" [attr.id]=\"host.id + 'reply-container'\" [hidden]=\"!host.replyOpened\">\n                  <div class=\"form-group\">\n                    <bb-rich-text-editor-ui\n                      #richTextEditor\n                      i18n-placeholder=\"Write your message@@messages.messagesConversationThread.messagePlaceholder\"\n                      placeholder=\"Write your message\"\n                      i18n-label=\"Message@@messages.messagesConversationThread.messageLabel\"\n                      label=\"Message\"\n                      formControlName=\"body\"\n                      counter=\"true\"\n                      [maxLength]=\"replyMessageMaxLength\"\n                      [required]=\"true\"\n                      [attr.aria-describedby]=\"'conversation-thread-body-error'\"\n                    >\n                      <ng-template #actions bbRichTextEditorActions>\n                        <bb-rich-text-editor-bold-action></bb-rich-text-editor-bold-action>\n                        <bb-rich-text-editor-italic-action></bb-rich-text-editor-italic-action>\n                        <bb-rich-text-editor-underline-action></bb-rich-text-editor-underline-action>\n                        <bb-rich-text-editor-strikethrough-action> </bb-rich-text-editor-strikethrough-action>\n                        <bb-rich-text-editor-olist-action></bb-rich-text-editor-olist-action>\n                        <bb-rich-text-editor-ulist-action> </bb-rich-text-editor-ulist-action>\n                        <bb-rich-text-editor-link-action></bb-rich-text-editor-link-action>\n                      </ng-template>\n                    </bb-rich-text-editor-ui>\n                    <bb-input-validation-message-ui\n                      id=\"conversation-thread-body-error\"\n                      [showErrors]=\"host.isInvalidControl('body')\"\n                    >\n                      <span\n                        *ngIf=\"host.hasError('body', 'required')\"\n                        i18n=\"\n                          Error message if field is required@@messages.messagesConversationThread.errors.messageRequired\"\n                      >\n                        Field is required\n                      </span>\n                    </bb-input-validation-message-ui>\n                  </div>\n                  <div class=\"form-group\">\n                    <bb-messages-upload-attachments\n                      [maxSize]=\"maxAttachmentSize\"\n                      [initAttachments]=\"host.draftResponse?.attachments\"\n                      formControlName=\"attachments\"\n                    >\n                    </bb-messages-upload-attachments>\n                  </div>\n                </div>\n                <div class=\"bb-button-bar bb-button-bar--reverse\">\n                  <bb-load-button-ui\n                    *ngIf=\"host.replyOpened\"\n                    class=\"bb-button-bar__button\"\n                    data-role=\"submit\"\n                    type=\"submit\"\n                    i18n=\"Send@@messages.messagesConversationThread.sendButton\"\n                    [isLoading]=\"host.formLoading\"\n                    (click)=\"host.reply()\"\n                  >\n                    Send\n                  </bb-load-button-ui>\n                  <button\n                    bbButton\n                    [attr.data-role]=\"!host.replyOpened ? 'reply-btn' : 'discard-btn'\"\n                    class=\"bb-button-bar__button\"\n                    [attr.aria-expanded]=\"host.replyOpened\"\n                    [attr.aria-controls]=\"host.id + 'reply-container'\"\n                    color=\"secondary\"\n                    (click)=\"!host.replyOpened ? host.toggleReplyForm(true) : host.handleDiscardClick()\"\n                  >\n                    <span\n                      *ngIf=\"!host.replyOpened; else discardTextButton\"\n                      i18n=\"Reply@@messages.messagesConversationThread.replyButton\"\n                    >\n                      Reply\n                    </span>\n                    <ng-template #discardTextButton>\n                      <span i18n=\"Discard@@messages.messagesConversationThread.discardButton\"> Discard </span>\n                    </ng-template>\n                  </button>\n                  <button\n                    bbButton\n                    data-role=\"save-as-draft\"\n                    class=\"bb-button-bar__button\"\n                    color=\"link\"\n                    *ngIf=\"host.replyOpened\"\n                    (click)=\"host.onSaveDraft()\"\n                    i18n=\"Save as Draft@@messages.messagesConversationThread.saveAsDraftButton\"\n                  >\n                    Save as Draft\n                  </button>\n                </div>\n              </form>\n            </div>\n          </ng-container>\n        </ng-container>\n      </ng-container>\n    </ng-container>\n  </div>\n\n  <bb-modal-ui\n    [isOpen]=\"host.removeModalOpened\"\n    data-role=\"delete-conversation-modal\"\n    aria-describedby=\"delete-confirmation-modal-subtitle\"\n    (cancel)=\"host.closeRemoveModal()\"\n  >\n    <bb-modal-header-ui>\n      <ng-template bbCustomModalHeader>\n        <span\n          class=\"text-large bb-text-semi-bold\"\n          i18n=\"\n            Delete conversation|Header title of the confirmation modal to delete\n            conversation@@messages.messagesConversationThread.messagesDeleteModal.headerTitle\"\n          >Delete conversation?</span\n        >\n      </ng-template>\n    </bb-modal-header-ui>\n    <bb-modal-body-ui>\n      <ng-template bbCustomModalBody>\n        <span\n          id=\"delete-confirmation-modal-subtitle\"\n          i18n=\"\n            Are you sure you want to delete the selected conversation?|Body message of the confirmation modal to delete\n            conversation@@messages.messagesConversationThread.messagesDeleteModal.bodyMessage\"\n          >Are you sure you want to delete the selected conversation?</span\n        >\n      </ng-template>\n    </bb-modal-body-ui>\n    <bb-modal-footer-ui>\n      <ng-template bbCustomModalFooter>\n        <bb-button-ui\n          data-role=\"cancel-delete-conversation\"\n          color=\"secondary\"\n          i18n=\"\n            Cancel|Cancel button inside the confirmation modal\n            footer@@messages.messagesConversationThread.messagesDeleteModal.cancelButton\"\n          (click)=\"host.closeRemoveModal()\"\n          >Cancel\n        </bb-button-ui>\n        <bb-button-ui\n          data-role=\"confirm-delete-conversation\"\n          color=\"danger\"\n          i18n=\"\n            Delete|Delete button inside the confirmation modal\n            footer@@messages.messagesConversationThread.messagesDeleteModal.deleteButton\"\n          (click)=\"host.removeConversation()\"\n          >Delete\n        </bb-button-ui>\n      </ng-template>\n    </bb-modal-footer-ui>\n  </bb-modal-ui>\n\n  <bb-messages-manipulation-confirm-modal\n    [isOpen]=\"host.confirmationModal.opened\"\n    [type]=\"host.confirmationModal.type\"\n    (cancel)=\"host.confirmModalService.toggleModal(false)\"\n    (confirm)=\"host.confirmConfirmationModal()\"\n  ></bb-messages-manipulation-confirm-modal>\n\n  <ng-template #me>\n    <span i18n=\"Me|Show this string if this is clients message@@messages.messagesConversationThread.me\">Me</span>\n  </ng-template>\n\n  <ng-template #emptyState>\n    <div class=\"bb-state-container\">\n      <bb-empty-state-ui\n        i18n-title=\"Empty state title@@messages.messagesConversationThread.emptyStateTitle\"\n        title=\"No Messages\"\n        i18n-subtitle=\"Empty state subtitle@@messages.messagesConversationThread.emptyStateSubtitle\"\n        subtitle=\"You don't have any messages to be displayed.\"\n        iconModifier=\"email\"\n        iconColor=\"muted\"\n        data-role=\"empty-state\"\n      ></bb-empty-state-ui>\n    </div>\n  </ng-template>\n\n  <ng-template #errorState>\n    <bb-messages-request-error [error]=\"host.errorResponse\"></bb-messages-request-error>\n  </ng-template>\n\n  <ng-template #loadingState>\n    <bb-loading-indicator-ui class=\"py-4\" loaderSize=\"md\"></bb-loading-indicator-ui>\n  </ng-template>\n</ng-template>\n\n<ng-template #messageReplySuccess>\n  <span\n    i18n=\"\n      Your message has been successfully sent.|Text of successful send\n      message@@messages.messagesConversationThread.messageSuccessSent\"\n    >Your message has been successfully sent.</span\n  >\n</ng-template>\n\n<ng-template #messageDeleteSuccess>\n  <span\n    i18n=\"\n      Your conversation has been deleted successfully.|Text of successful deletion of the\n      conversation@@messages.messagesConversationThread.messageSuccessDelete\"\n    >Your conversation has been deleted successfully.</span\n  >\n</ng-template>\n\n<ng-template #draftSaveSuccess>\n  <span\n    i18n=\"\n      Your draft has been successfully saved.|Successfully saved draft\n      text@@messages.messagesConversationThread.draftSuccessSave\"\n    >Your draft has been successfully saved.</span\n  >\n</ng-template>\n\n<ng-template #draftDeleteSuccess>\n  <span\n    i18n=\"\n      Your draft has been successfully deleted.|Successfully deleted draft\n      text@@messages.messagesConversationThread.draftDeleteSuccess\"\n    >Your draft has been successfully deleted.</span\n  >\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return i5__namespace.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0__namespace.forwardRef(function () { return i6__namespace.BadgeComponent; }), selector: "bb-badge-ui", inputs: ["color", "text", "abbr", "circle", "wrap", "ariaLabel"] }, { type: i0__namespace.forwardRef(function () { return i7__namespace.AlertComponent; }), selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i0__namespace.forwardRef(function () { return i3__namespace.MessagesConversationMessageComponent; }), selector: "bb-messages-conversation-message, bb-message-ui", inputs: ["created", "message", "sender", "opened", "attachments", "isBodyHtml"] }, { type: i0__namespace.forwardRef(function () { return i8__namespace.RichTextEditorComponent; }), selector: "bb-rich-text-editor-ui", inputs: ["maxLength", "minLength", "placeholder", "counter", "readonly", "actionsTooltipPlacement"] }, { type: i0__namespace.forwardRef(function () { return i8__namespace.RichTextEditorBoldActionComponent; }), selector: "bb-rich-text-editor-bold-action" }, { type: i0__namespace.forwardRef(function () { return i8__namespace.RichTextEditorItalicActionComponent; }), selector: "bb-rich-text-editor-italic-action" }, { type: i0__namespace.forwardRef(function () { return i8__namespace.RichTextEditorUnderlineActionComponent; }), selector: "bb-rich-text-editor-underline-action" }, { type: i0__namespace.forwardRef(function () { return i8__namespace.RichTextEditorStrikethroughActionComponent; }), selector: "bb-rich-text-editor-strikethrough-action" }, { type: i0__namespace.forwardRef(function () { return i8__namespace.RichTextEditorOlistActionComponent; }), selector: "bb-rich-text-editor-olist-action" }, { type: i0__namespace.forwardRef(function () { return i8__namespace.RichTextEditorUlistActionComponent; }), selector: "bb-rich-text-editor-ulist-action" }, { type: i0__namespace.forwardRef(function () { return i8__namespace.RichTextEditorLinkActionComponent; }), selector: "bb-rich-text-editor-link-action", inputs: ["contentClassNames"], outputs: ["linkAdded"] }, { type: i0__namespace.forwardRef(function () { return i9__namespace.InputValidationMessageComponent; }), selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i0__namespace.forwardRef(function () { return i3__namespace.MessagesUploadAttachmentsComponent; }), selector: "bb-messages-upload-attachments-ui, bb-messages-upload-attachments", inputs: ["maxSize", "initAttachments", "disabled", "multiple", "attachmentButtonText", "accept"] }, { type: i0__namespace.forwardRef(function () { return i10__namespace.LoadButtonComponent; }), selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }, { type: i0__namespace.forwardRef(function () { return i11__namespace.ModalComponent; }), selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i0__namespace.forwardRef(function () { return i11__namespace.ModalHeaderComponent; }), selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i0__namespace.forwardRef(function () { return i11__namespace.ModalBodyComponent; }), selector: "bb-modal-body-ui" }, { type: i0__namespace.forwardRef(function () { return i11__namespace.ModalFooterComponent; }), selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }, { type: i0__namespace.forwardRef(function () { return i12__namespace.ButtonComponent; }), selector: "bb-button-ui", inputs: ["autofocus", "type", "disabled", "buttonSize", "color", "block"] }, { type: i0__namespace.forwardRef(function () { return i3__namespace.ӨMessagesManipulationConfirmModalComponent; }), selector: "bb-messages-manipulation-confirm-modal", inputs: ["type"] }, { type: i0__namespace.forwardRef(function () { return i13__namespace.EmptyStateComponent; }), selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }, { type: i0__namespace.forwardRef(function () { return i3__namespace.MessagesRequestErrorComponent; }), selector: "bb-messages-request-error, bb-messages-request-error-ui", inputs: ["error"] }, { type: i0__namespace.forwardRef(function () { return i14__namespace.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }], directives: [{ type: i0__namespace.forwardRef(function () { return MessagesConversationThreadCustomizableDirective; }), selector: "[bbMessagesConversationThreadCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i15__namespace.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0__namespace.forwardRef(function () { return i12__namespace.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0__namespace.forwardRef(function () { return i16__namespace.TooltipDirective; }), selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i0__namespace.forwardRef(function () { return i15__namespace.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i0__namespace.forwardRef(function () { return i17__namespace.ɵNgNoValidate; }), selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i0__namespace.forwardRef(function () { return i17__namespace.NgControlStatusGroup; }), selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i0__namespace.forwardRef(function () { return i17__namespace.FormGroupDirective; }), selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i0__namespace.forwardRef(function () { return i17__namespace.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0__namespace.forwardRef(function () { return i17__namespace.FormControlName; }), selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i0__namespace.forwardRef(function () { return i17__namespace.RequiredValidator; }), selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i0__namespace.forwardRef(function () { return i8__namespace.RichTextEditorActionsDirective; }), selector: "ng-template[bbRichTextEditorActions]" }, { type: i0__namespace.forwardRef(function () { return i11__namespace.CustomModalHeaderDirective; }), selector: "ng-template[bbCustomModalHeader]" }, { type: i0__namespace.forwardRef(function () { return i11__namespace.CustomModalBodyDirective; }), selector: "ng-template[bbCustomModalBody]" }, { type: i0__namespace.forwardRef(function () { return i11__namespace.CustomModalFooterDirective; }), selector: "ng-template[bbCustomModalFooter]" }], pipes: { "async": i0__namespace.forwardRef(function () { return i15__namespace.AsyncPipe; }) } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesConversationThreadWidgetComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-messages-conversation-thread-widget-ang',
                        templateUrl: './messages-conversation-thread-widget-ang.component.html',
                        providers: [
                            i3.MessagesEncodingService,
                            WidgetPropertiesService,
                            i3.MessagesManipulationConfirmModalService,
                            i3.MessagesUploadAttachmentsService,
                            {
                                provide: i3.BaseUploadAttachmentsService,
                                useClass: i3.MessagesClientUploadAttachmentsService,
                            },
                            {
                                provide: i3.AbstractBaseMessagesConversationThreadService,
                                useClass: MessagesConversationThreadWidgetService,
                            },
                        ],
                    }]
            }], ctorParameters: function () { return [{ type: MessagesConversationThreadWidgetService }, { type: WidgetPropertiesService }, { type: i3__namespace.MessagesEncodingService }, { type: i3__namespace.MessagesUploadAttachmentsService }, { type: i3__namespace.MessagesManipulationConfirmModalService }, { type: i3__namespace.AbstractBaseMessagesConversationThreadService }, { type: i4__namespace.ActivatedRoute }, { type: i3__namespace.SharedMethodsService }, { type: i0__namespace.ChangeDetectorRef }]; }, propDecorators: { mailboxTypeTitleValue: [{
                    type: i0.Input,
                    args: ['mailboxTypeTitle']
                }], maxAttachmentSizeValue: [{
                    type: i0.Input,
                    args: ['maxAttachmentSize']
                }], replyMessageMaxLengthValue: [{
                    type: i0.Input,
                    args: ['replyMessageMaxLength']
                }], customerServiceTitleValue: [{
                    type: i0.Input,
                    args: ['customerServiceTitle']
                }] } });
    var MessagesConversationThreadCustomizableDirective = /** @class */ (function (_super) {
        __extends(MessagesConversationThreadCustomizableDirective, _super);
        function MessagesConversationThreadCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return MessagesConversationThreadCustomizableDirective;
    }(i1$1.BbTemplate));
    MessagesConversationThreadCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesConversationThreadCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    MessagesConversationThreadCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.14", type: MessagesConversationThreadCustomizableDirective, selector: "[bbMessagesConversationThreadCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesConversationThreadCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbMessagesConversationThreadCustomizable]',
                    }]
            }] });

    var components = [MessagesConversationThreadWidgetComponent];
    var directives = [MessagesConversationThreadCustomizableDirective];
    var uiModules = [
        i12.ButtonModule,
        i6.BadgeModule,
        i5.IconModule,
        i8.RichTextEditorModule,
        i11.ModalModule,
        i13.EmptyStateModule,
        i14.LoadingIndicatorModule,
        i16.TooltipModule,
        i10.LoadButtonModule,
        i7.AlertModule,
        i9.InputValidationMessageModule,
    ];
    var innerModules = [
        i3.BaseMessagesConversationThreadModule,
        i3.MessagesManipulationConfirmModalModule,
        i3.MessagesUploadAttachmentsModule,
        i3.MessagesRequestErrorModule,
        i3.MessagesConversationMessageModule,
    ];
    var MessagesConversationThreadWidgetModule = /** @class */ (function () {
        function MessagesConversationThreadWidgetModule() {
        }
        return MessagesConversationThreadWidgetModule;
    }());
    MessagesConversationThreadWidgetModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesConversationThreadWidgetModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    MessagesConversationThreadWidgetModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesConversationThreadWidgetModule, declarations: [MessagesConversationThreadWidgetComponent, MessagesConversationThreadCustomizableDirective], imports: [i15.CommonModule, i1__namespace$1.BackbaseCoreModule, i17.ReactiveFormsModule, i3.BaseMessagesConversationThreadModule,
            i3.MessagesManipulationConfirmModalModule,
            i3.MessagesUploadAttachmentsModule,
            i3.MessagesRequestErrorModule,
            i3.MessagesConversationMessageModule, i12.ButtonModule,
            i6.BadgeModule,
            i5.IconModule,
            i8.RichTextEditorModule,
            i11.ModalModule,
            i13.EmptyStateModule,
            i14.LoadingIndicatorModule,
            i16.TooltipModule,
            i10.LoadButtonModule,
            i7.AlertModule,
            i9.InputValidationMessageModule], exports: [i17.ReactiveFormsModule, MessagesConversationThreadWidgetComponent, MessagesConversationThreadCustomizableDirective, i12.ButtonModule,
            i6.BadgeModule,
            i5.IconModule,
            i8.RichTextEditorModule,
            i11.ModalModule,
            i13.EmptyStateModule,
            i14.LoadingIndicatorModule,
            i16.TooltipModule,
            i10.LoadButtonModule,
            i7.AlertModule,
            i9.InputValidationMessageModule, i3.BaseMessagesConversationThreadModule,
            i3.MessagesManipulationConfirmModalModule,
            i3.MessagesUploadAttachmentsModule,
            i3.MessagesRequestErrorModule,
            i3.MessagesConversationMessageModule] });
    MessagesConversationThreadWidgetModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesConversationThreadWidgetModule, providers: [MessagesConversationThreadWidgetService], imports: [__spreadArray(__spreadArray([
                i15.CommonModule,
                i1$1.BackbaseCoreModule.withConfig({
                    classMap: { MessagesConversationThreadWidgetComponent: MessagesConversationThreadWidgetComponent },
                }),
                i17.ReactiveFormsModule
            ], __read(innerModules)), __read(uiModules)), i17.ReactiveFormsModule, i12.ButtonModule,
            i6.BadgeModule,
            i5.IconModule,
            i8.RichTextEditorModule,
            i11.ModalModule,
            i13.EmptyStateModule,
            i14.LoadingIndicatorModule,
            i16.TooltipModule,
            i10.LoadButtonModule,
            i7.AlertModule,
            i9.InputValidationMessageModule, i3.BaseMessagesConversationThreadModule,
            i3.MessagesManipulationConfirmModalModule,
            i3.MessagesUploadAttachmentsModule,
            i3.MessagesRequestErrorModule,
            i3.MessagesConversationMessageModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0__namespace, type: MessagesConversationThreadWidgetModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: __spreadArray(__spreadArray([
                            i15.CommonModule,
                            i1$1.BackbaseCoreModule.withConfig({
                                classMap: { MessagesConversationThreadWidgetComponent: MessagesConversationThreadWidgetComponent },
                            }),
                            i17.ReactiveFormsModule
                        ], __read(innerModules)), __read(uiModules)),
                        declarations: __spreadArray(__spreadArray([], __read(components)), __read(directives)),
                        providers: [MessagesConversationThreadWidgetService],
                        exports: __spreadArray(__spreadArray(__spreadArray(__spreadArray([i17.ReactiveFormsModule], __read(components)), __read(directives)), __read(uiModules)), __read(innerModules)),
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.MessagesConversationThreadWidgetComponent = MessagesConversationThreadWidgetComponent;
    exports.MessagesConversationThreadWidgetModule = MessagesConversationThreadWidgetModule;
    exports["ӨMessagesConversationThreadCustomizableDirective"] = MessagesConversationThreadCustomizableDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-messages-conversation-thread-widget-ang.umd.js.map
