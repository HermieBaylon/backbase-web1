import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { Pubsub } from '@backbase/foundation-ang/web-sdk';
import { AbstractBaseMessagesConversationThreadService } from '@backbase/messages-common';
import { ConversationMessageDraftPostRequestBody, ConversationMessageDraftPutRequestBody, ConversationThreadsDeleteResponseBody, DeleteDraftsResponseBody, DraftPostResponseBody, MarkAsReadUnreadPutRequestBody, MarkAsReadUnreadPutResponseBody, MessagecenterHttpService, MessageReplyPostRequestBody, MessageThreadGetResponseBody, PresentationMessagePostResponseBody } from '@backbase/messages-v5-http-ang';
import * as i0 from "@angular/core";
export declare class MessagesConversationThreadWidgetService extends AbstractBaseMessagesConversationThreadService {
    private readonly messagesService;
    private readonly http;
    private readonly pubSub;
    constructor(messagesService: MessagecenterHttpService, http: HttpClient, pubSub: Pubsub);
    /**
     * Creat message draft
     *
     * @param messageId Message id
     * @param body Message request body
     * @returns Create converastion message draft stream
     */
    createDraft(messageId: string, body: ConversationMessageDraftPostRequestBody): Observable<DraftPostResponseBody | null>;
    /**
     * Delete message draft
     *
     * @param draftId Draft id
     * @returns Delete draft stream
     */
    deleteDraft(draftId: string): Observable<DeleteDraftsResponseBody>;
    /**
     * Update message draft
     *
     * @param messageId Message id
     * @param body Conversation message draft request body
     * @returns Update draft stream
     */
    updateDraft(messageId: string, body: ConversationMessageDraftPutRequestBody): Observable<any>;
    /**
     * Delete conversation
     *
     * @param id Conversation id
     * @returns Delete conversation thread stream
     */
    deleteConversation(id: string): Observable<ConversationThreadsDeleteResponseBody | null>;
    /**
     * Get conversation thread
     *
     * @param messageId Message id
     * @returns Get conversation thread stream
     */
    getConversationThread(messageId: string): Observable<MessageThreadGetResponseBody | undefined>;
    /**
     * Mark conversation as read or unread
     *
     * @param params Mark conversation as read/unread request body
     * @returns Mark conversation as read/unread stream
     */
    markConversationsAsReadUnread(params: MarkAsReadUnreadPutRequestBody): Observable<MarkAsReadUnreadPutResponseBody | null>;
    /**
     * Post reply message
     *
     * @param messageId Message id
     * @param body Message reply post request body
     * @returns Post reply message stream
     */
    postReplyMessage(messageId: string, body: MessageReplyPostRequestBody): Observable<PresentationMessagePostResponseBody | undefined>;
    /**
     * Get url attachment download
     *
     * @param attachmentId Attachment id
     * @returns Download attachment url
     */
    getDownloadAttachmentUrl(attachmentId: string): string;
    /**
     * Download attachment
     *
     * @param attachmentId Attachment id
     * @returns Download file stream
     */
    downloadFile(attachmentId: string): Observable<ArrayBuffer>;
    static ɵfac: i0.ɵɵFactoryDeclaration<MessagesConversationThreadWidgetService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<MessagesConversationThreadWidgetService>;
}
