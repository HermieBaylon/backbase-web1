import { ChangeDetectorRef, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { Observable } from 'rxjs';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { AbstractBaseMessagesConversationThreadService, BaseConversationThreadComponent, MessagesEncodingService, MessagesManipulationConfirmModalService, MessagesUploadAttachmentsService, ReadUnreadStatusType, SharedMethodsService } from '@backbase/messages-common';
import { MessageThreadGetResponseBody } from '@backbase/messages-v5-http-ang';
import { MessagesConversationThreadWidgetService } from './services/messages-conversation-thread-widget-ang.service';
import { WidgetPropertiesService } from './services/widget-properties.service';
import { MessagesConversationThreadWidgetContext } from './model/conversation';
import * as i0 from "@angular/core";
export declare class MessagesConversationThreadWidgetComponent extends BaseConversationThreadComponent implements OnInit {
    private readonly messagesService;
    private readonly properties;
    protected readonly encodingService: MessagesEncodingService;
    protected readonly uploadService: MessagesUploadAttachmentsService;
    readonly confirmModalService: MessagesManipulationConfirmModalService;
    protected readonly apiThreadService: AbstractBaseMessagesConversationThreadService;
    protected readonly activatedRoute: ActivatedRoute;
    protected readonly sharedService: SharedMethodsService;
    private readonly cd;
    readonly hostRef: this;
    /**
     * The stream with the mailbox type.
     */
    set mailboxTypeTitleValue(value: string);
    /**
     * The stream with the maximum attachment size.
     */
    set maxAttachmentSizeValue(value: string | number);
    /**
     * The stream with the maximum message length.
     */
    set replyMessageMaxLengthValue(value: string | number);
    /**
     * The stream with the customer service title.
     */
    set customerServiceTitleValue(value: string);
    private readonly replyStream;
    /**
     * The flag indicating if the remove confirmation modal is opened or closed.
     */
    removeModalOpened: boolean;
    private readonly mailboxTypeTitle$$;
    private readonly maxAttachmentSize$$;
    private readonly replyMessageMaxLength$$;
    private readonly customerServiceTitle$$;
    /**
     * The stream with the conversation data.
     */
    conversation: Observable<MessageThreadGetResponseBody>;
    /**
     * The stream with the mailbox type.
     */
    readonly mailboxTypeTitle: Observable<string>;
    /**
     * The stream with the maximum attachment size.
     */
    readonly maxAttachmentSize: Observable<string>;
    /**
     * The stream with the maximum message length.
     */
    readonly replyMessageMaxLength: Observable<string>;
    /**
     * The stream with the maximum message length number.
     */
    readonly replyMessageMaxLength$: Observable<number>;
    /**
     * The stream with the customer service title.
     */
    readonly customerServiceTitle$: Observable<string>;
    constructor(messagesService: MessagesConversationThreadWidgetService, properties: WidgetPropertiesService, encodingService: MessagesEncodingService, uploadService: MessagesUploadAttachmentsService, confirmModalService: MessagesManipulationConfirmModalService, apiThreadService: AbstractBaseMessagesConversationThreadService, activatedRoute: ActivatedRoute, sharedService: SharedMethodsService, cd: ChangeDetectorRef);
    ngOnInit(): void;
    private getReplyStream;
    private getConversationStream;
    /**
     * The method to discard a message or a draft.
     */
    confirmConfirmationModal(): void;
    /**
     * The method to open the removal modal.
     */
    openRemoveModal(): void;
    /**
     * The method to close the removal modal.
     */
    closeRemoveModal(): void;
    /**
     * The method to remove a conversation.
     */
    removeConversation(): void;
    /**
     * The method to toggle the read/unread conversation status.
     *
     * @param status Status type
     */
    toggleRead(status?: ReadUnreadStatusType): void;
    /**
     * The method to open the discard confirmation modal.
     */
    handleDiscardClick(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<MessagesConversationThreadWidgetComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<MessagesConversationThreadWidgetComponent, "bb-messages-conversation-thread-widget-ang", never, { "mailboxTypeTitleValue": "mailboxTypeTitle"; "maxAttachmentSizeValue": "maxAttachmentSize"; "replyMessageMaxLengthValue": "replyMessageMaxLength"; "customerServiceTitleValue": "customerServiceTitle"; }, {}, never, never>;
}
export declare class MessagesConversationThreadCustomizableDirective extends BbTemplate<MessagesConversationThreadWidgetComponent, MessagesConversationThreadWidgetContext> {
    static ɵfac: i0.ɵɵFactoryDeclaration<MessagesConversationThreadCustomizableDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<MessagesConversationThreadCustomizableDirective, "[bbMessagesConversationThreadCustomizable]", never, {}, {}, never>;
}
