import { Inject, Injectable } from '@angular/core';
import { tap } from 'rxjs/operators';
import { PUBSUB } from '@backbase/foundation-ang/web-sdk';
import { AbstractBaseMessagesConversationThreadService } from '@backbase/messages-common';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/messages-v5-http-ang";
import * as i2 from "@angular/common/http";
const bbEventUnreadConversationCountUpdate = 'bb.event.unread-conversation-count.update';
export class MessagesConversationThreadWidgetService extends AbstractBaseMessagesConversationThreadService {
    constructor(messagesService, http, pubSub) {
        super();
        this.messagesService = messagesService;
        this.http = http;
        this.pubSub = pubSub;
    }
    /**
     * Creat message draft
     *
     * @param messageId Message id
     * @param body Message request body
     * @returns Create converastion message draft stream
     */
    createDraft(messageId, body) {
        return this.messagesService.postConversationMessageDraft({
            messageId,
            conversationMessageDraftPostRequestBody: body,
        });
    }
    /**
     * Delete message draft
     *
     * @param draftId Draft id
     * @returns Delete draft stream
     */
    deleteDraft(draftId) {
        return this.messagesService.deleteMessageDrafts({ ids: [draftId] });
    }
    /**
     * Update message draft
     *
     * @param messageId Message id
     * @param body Conversation message draft request body
     * @returns Update draft stream
     */
    updateDraft(messageId, body) {
        return this.messagesService.putConversationMessageDraft({
            messageId,
            conversationMessageDraftPutRequestBody: body,
        });
    }
    /**
     * Delete conversation
     *
     * @param id Conversation id
     * @returns Delete conversation thread stream
     */
    deleteConversation(id) {
        return this.messagesService
            .deleteConversationThreads({ ids: [id] })
            .pipe(tap(() => this.pubSub.publish(bbEventUnreadConversationCountUpdate, undefined)));
    }
    /**
     * Get conversation thread
     *
     * @param messageId Message id
     * @returns Get conversation thread stream
     */
    getConversationThread(messageId) {
        return this.messagesService.getMessageThread({ messageId });
    }
    /**
     * Mark conversation as read or unread
     *
     * @param params Mark conversation as read/unread request body
     * @returns Mark conversation as read/unread stream
     */
    markConversationsAsReadUnread(params) {
        return this.messagesService
            .putMarkAsReadUnread({ markAsReadUnreadPutRequestBody: params })
            .pipe(tap(() => this.pubSub.publish(bbEventUnreadConversationCountUpdate, undefined)));
    }
    /**
     * Post reply message
     *
     * @param messageId Message id
     * @param body Message reply post request body
     * @returns Post reply message stream
     */
    postReplyMessage(messageId, body) {
        return this.messagesService.postMessageReply({ messageId, messageReplyPostRequestBody: body });
    }
    /**
     * Get url attachment download
     *
     * @param attachmentId Attachment id
     * @returns Download attachment url
     */
    getDownloadAttachmentUrl(attachmentId) {
        return this.messagesService.getMessageAttachmentUrl({ attachmentId });
    }
    /**
     * Download attachment
     *
     * @param attachmentId Attachment id
     * @returns Download file stream
     */
    downloadFile(attachmentId) {
        return this.http.get(this.getDownloadAttachmentUrl(attachmentId), { responseType: 'arraybuffer' });
    }
}
MessagesConversationThreadWidgetService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesConversationThreadWidgetService, deps: [{ token: i1.MessagecenterHttpService }, { token: i2.HttpClient }, { token: PUBSUB }], target: i0.ɵɵFactoryTarget.Injectable });
MessagesConversationThreadWidgetService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesConversationThreadWidgetService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesConversationThreadWidgetService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.MessagecenterHttpService }, { type: i2.HttpClient }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [PUBSUB]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,