import { Component, Directive, Input } from '@angular/core';
import { catchError, concatMap, finalize, first, map, switchMap, takeUntil, tap, throttleTime, withLatestFrom, } from 'rxjs/operators';
import { BehaviorSubject, combineLatest, EMPTY, merge, of } from 'rxjs';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { AbstractBaseMessagesConversationThreadService, BaseConversationThreadComponent, BaseUploadAttachmentsService, getPropertyValue, ManipulationType, MessagesClientUploadAttachmentsService, MessagesEncodingService, MessagesManipulationConfirmModalService, MessagesUploadAttachmentsService, ReadUnreadStatusType, shareReplayOnce, } from '@backbase/messages-common';
import { MessagesConversationThreadWidgetService } from './services/messages-conversation-thread-widget-ang.service';
import { WidgetPropertiesService } from './services/widget-properties.service';
import * as i0 from "@angular/core";
import * as i1 from "./services/messages-conversation-thread-widget-ang.service";
import * as i2 from "./services/widget-properties.service";
import * as i3 from "@backbase/messages-common";
import * as i4 from "@angular/router";
import * as i5 from "@backbase/ui-ang/icon";
import * as i6 from "@backbase/ui-ang/badge";
import * as i7 from "@backbase/ui-ang/alert";
import * as i8 from "@backbase/ui-ang/rich-text-editor";
import * as i9 from "@backbase/ui-ang/input-validation-message";
import * as i10 from "@backbase/ui-ang/load-button";
import * as i11 from "@backbase/ui-ang/modal";
import * as i12 from "@backbase/ui-ang/button";
import * as i13 from "@backbase/ui-ang/empty-state";
import * as i14 from "@backbase/ui-ang/loading-indicator";
import * as i15 from "@angular/common";
import * as i16 from "@backbase/ui-ang/tooltip-directive";
import * as i17 from "@angular/forms";
export class MessagesConversationThreadWidgetComponent extends BaseConversationThreadComponent {
    constructor(messagesService, properties, encodingService, uploadService, confirmModalService, apiThreadService, activatedRoute, sharedService, cd) {
        super(apiThreadService, activatedRoute, sharedService, confirmModalService, uploadService, encodingService);
        this.messagesService = messagesService;
        this.properties = properties;
        this.encodingService = encodingService;
        this.uploadService = uploadService;
        this.confirmModalService = confirmModalService;
        this.apiThreadService = apiThreadService;
        this.activatedRoute = activatedRoute;
        this.sharedService = sharedService;
        this.cd = cd;
        this.hostRef = this;
        this.replyStream = this.getReplyStream();
        /**
         * The flag indicating if the remove confirmation modal is opened or closed.
         */
        this.removeModalOpened = false;
        this.mailboxTypeTitle$$ = new BehaviorSubject(undefined);
        this.maxAttachmentSize$$ = new BehaviorSubject(undefined);
        this.replyMessageMaxLength$$ = new BehaviorSubject(undefined);
        this.customerServiceTitle$$ = new BehaviorSubject(undefined);
        /**
         * The stream with the conversation data.
         */
        this.conversation = this.getConversationStream();
        /**
         * The stream with the mailbox type.
         */
        this.mailboxTypeTitle = getPropertyValue(this.mailboxTypeTitle$$, this.properties.mailboxTypeTitle);
        /**
         * The stream with the maximum attachment size.
         */
        this.maxAttachmentSize = getPropertyValue(this.maxAttachmentSize$$, this.properties.maxAttachmentSize);
        /**
         * The stream with the maximum message length.
         */
        this.replyMessageMaxLength = getPropertyValue(this.replyMessageMaxLength$$, this.properties.replyMessageMaxLength);
        /**
         * The stream with the maximum message length number.
         */
        this.replyMessageMaxLength$ = getPropertyValue(this.replyMessageMaxLength$$, this.properties.replyMessageMaxLength).pipe(map(val => Number(val)));
        /**
         * The stream with the customer service title.
         */
        this.customerServiceTitle$ = getPropertyValue(this.customerServiceTitle$$, this.properties.customerServiceTitle);
    }
    /**
     * The stream with the mailbox type.
     */
    set mailboxTypeTitleValue(value) {
        this.mailboxTypeTitle$$.next(value);
    }
    /**
     * The stream with the maximum attachment size.
     */
    set maxAttachmentSizeValue(value) {
        this.maxAttachmentSize$$.next(String(value));
    }
    /**
     * The stream with the maximum message length.
     */
    set replyMessageMaxLengthValue(value) {
        this.replyMessageMaxLength$$.next(String(value));
    }
    /**
     * The stream with the customer service title.
     */
    set customerServiceTitleValue(value) {
        this.customerServiceTitle$$.next(value);
    }
    ngOnInit() {
        this.conversation.pipe(first(), takeUntil(this.unsubscribe)).subscribe(() => {
            this.initSubscriptions();
        });
    }
    getReplyStream() {
        return this.replyPressed.pipe(throttleTime(1000), withLatestFrom(this.conversationId), concatMap(([obj, conversationId]) => {
            this.formLoading = true;
            return this.messagesService.postReplyMessage(conversationId, obj).pipe(switchMap(() => this.draftResponse ? this.messagesService.deleteDraft(this.draftResponse.id) : of(undefined)), tap(() => {
                this.uploadService.reset();
                this.replyFormGroup.reset();
                this.sharedService.openNotification(this.replySuccessTpl);
            }), catchError(error => {
                this.sharedService.openNotification(this.sharedService.getErrorMessage(error), 'error');
                this.cd.markForCheck();
                return EMPTY;
            }), finalize(() => {
                this.formLoading = false;
            }));
        }));
    }
    getConversationStream() {
        return combineLatest([this.conversationId, merge(this.replyStream, of(undefined))]).pipe(tap(() => {
            this.loading = true;
            this.errorResponse = undefined;
        }), switchMap(([conversationId]) => this.messagesService.getConversationThread(conversationId).pipe(withLatestFrom(this.customerServiceTitle$), map(([conversation, customerName]) => {
            const messages = conversation &&
                conversation.messages
                    .map(message => (Object.assign(Object.assign({}, message), { body: this.encodingService.b64Decode(message.body), attachments: message.attachments && this.apiThreadService.attachmentsMapper(message.attachments), sender: Object.assign(Object.assign({}, message.sender), { name: message.sender.id === 'customer.service' ? customerName : message.sender.name }) })))
                    .reverse();
            return Object.assign(Object.assign({}, conversation), { messages });
        }), tap(conversation => {
            this.draftResponse = conversation.draft && Object.assign({}, conversation.draft);
            if (this.draftResponse) {
                this.toggleReplyForm(true);
                if (this.draftResponse.attachments) {
                    this.replyFormGroup.controls['attachments'].setValue([...this.draftResponse.attachments]);
                }
                if (this.draftResponse.body) {
                    this.replyFormGroup.controls['body'].setValue(this.encodingService.b64Decode(this.draftResponse.body));
                }
            }
        }), catchError((error) => {
            this.errorResponse = error;
            this.cd.markForCheck();
            return EMPTY;
        }), finalize(() => {
            this.loading = false;
        }))), shareReplayOnce(), takeUntil(this.unsubscribe));
    }
    /**
     * The method to discard a message or a draft.
     */
    confirmConfirmationModal() {
        switch (this.confirmationModal && this.confirmationModal.type) {
            case ManipulationType.discard:
                this.toggleReplyForm(false);
                break;
            case ManipulationType.discardDraft:
                this.deleteDraft().pipe(takeUntil(this.unsubscribe)).subscribe();
                this.toggleReplyForm(false);
                break;
        }
        this.confirmModalService.toggleModal(false);
    }
    /**
     * The method to open the removal modal.
     */
    openRemoveModal() {
        this.removeModalOpened = true;
    }
    /**
     * The method to close the removal modal.
     */
    closeRemoveModal() {
        this.removeModalOpened = false;
    }
    /**
     * The method to remove a conversation.
     */
    removeConversation() {
        this.closeRemoveModal();
        this.conversationId
            .pipe(switchMap(id => this.messagesService.deleteConversation(id)), takeUntil(this.unsubscribe))
            .subscribe(() => {
            if (this.deleteSuccessTpl) {
                this.sharedService.openNotification(this.deleteSuccessTpl);
            }
            this.navigateBack();
        }, error => this.sharedService.openNotification(this.sharedService.getErrorMessage(error), 'error'));
    }
    /**
     * The method to toggle the read/unread conversation status.
     *
     * @param status Status type
     */
    toggleRead(status = ReadUnreadStatusType.UNREAD) {
        this.markAsReadUnreadSubject.next(status);
    }
    /**
     * The method to open the discard confirmation modal.
     */
    handleDiscardClick() {
        const manipulationType = this.draftResponse ? this.manipulationTypes.discardDraft : this.manipulationTypes.discard;
        this.confirmModalService.toggleModal(true, manipulationType, this.replyFormGroup);
    }
}
MessagesConversationThreadWidgetComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesConversationThreadWidgetComponent, deps: [{ token: i1.MessagesConversationThreadWidgetService }, { token: i2.WidgetPropertiesService }, { token: i3.MessagesEncodingService }, { token: i3.MessagesUploadAttachmentsService }, { token: i3.MessagesManipulationConfirmModalService }, { token: i3.AbstractBaseMessagesConversationThreadService }, { token: i4.ActivatedRoute }, { token: i3.SharedMethodsService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
MessagesConversationThreadWidgetComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.14", type: MessagesConversationThreadWidgetComponent, selector: "bb-messages-conversation-thread-widget-ang", inputs: { mailboxTypeTitleValue: ["mailboxTypeTitle", "mailboxTypeTitleValue"], maxAttachmentSizeValue: ["maxAttachmentSize", "maxAttachmentSizeValue"], replyMessageMaxLengthValue: ["replyMessageMaxLength", "replyMessageMaxLengthValue"], customerServiceTitleValue: ["customerServiceTitle", "customerServiceTitleValue"] }, providers: [
        MessagesEncodingService,
        WidgetPropertiesService,
        MessagesManipulationConfirmModalService,
        MessagesUploadAttachmentsService,
        {
            provide: BaseUploadAttachmentsService,
            useClass: MessagesClientUploadAttachmentsService,
        },
        {
            provide: AbstractBaseMessagesConversationThreadService,
            useClass: MessagesConversationThreadWidgetService,
        },
    ], usesInheritance: true, ngImport: i0, template: "<ng-container\n  bbMessagesConversationThreadCustomizable\n  [bbHostRef]=\"hostRef\"\n  [bbTemplateContext]=\"{\n    conversation: conversation | async,\n    maxAttachmentSize: maxAttachmentSize | async,\n    replyMessageMaxLength: replyMessageMaxLength$ | async,\n    mailboxType: mailboxTypeTitle | async\n  }\"\n></ng-container>\n\n<ng-template\n  bbMessagesConversationThreadCustomizable\n  let-host\n  let-conversation=\"context.conversation\"\n  let-maxAttachmentSize=\"context.maxAttachmentSize\"\n  let-replyMessageMaxLength=\"context.replyMessageMaxLength\"\n  let-mailboxType=\"context.mailboxType\"\n>\n  <div class=\"card card-lg\">\n    <ng-container *ngIf=\"host.conversationId | async; else errorState\">\n      <ng-container *ngIf=\"!host.loading; else loadingState\">\n        <ng-container *ngIf=\"!host.errorResponse; else errorState\">\n          <ng-container *ngIf=\"conversation?.messages.length; else emptyState\">\n            <div\n              class=\"card-header bb-block--md\"\n              role=\"region\"\n              aria-label=\"Conversation details\"\n              i18n-aria-label=\"Conversation details@@messages.messagesConversationThread.conversationDetails\"\n            >\n              <div class=\"bb-block--md\">\n                <button bbButton color=\"link\" data-role=\"navigate-back\" (click)=\"host.navigateBack()\">\n                  <bb-icon-ui [cropped]=\"true\" name=\"arrow-back\"></bb-icon-ui>\n                  <span\n                    i18n=\"\n                      Back button|Return to list of conversations of specified mailbox\n                      type@@messages.messagesConversationThread.backButton\"\n                    >Back to {{ mailboxType }}</span\n                  >\n                </button>\n              </div>\n              <div class=\"bb-stack\">\n                <div>\n                  <div class=\"bb-block--sm\" role=\"heading\" aria-level=\"3\">\n                    <span\n                      class=\"sr-only\"\n                      i18n=\"Conversation topic@@messages.messagesConversationThread.conversationTopic\"\n                      >Topic:</span\n                    >\n                    <bb-badge-ui\n                      [text]=\"conversation.topic.name\"\n                      [color]=\"conversation.topic.deleted ? 'secondary' : 'primary'\"\n                    ></bb-badge-ui>\n                  </div>\n                  <div class=\"bb-stack\">\n                    <span role=\"heading\" aria-level=\"4\" class=\"bb-stack__item\">\n                      <span\n                        class=\"sr-only\"\n                        i18n=\"Conversation subject@@messages.messagesConversationThread.conversationSubject\"\n                        >Subject:</span\n                      >\n                      <span\n                        class=\"bb-text-semi-bold break-word\"\n                        [innerHTML]=\"conversation.subject\"\n                        data-role=\"subject-name\"\n                      ></span>\n                    </span>\n                    <bb-icon-ui\n                      *ngIf=\"conversation.important\"\n                      name=\"error\"\n                      class=\"bb-stack__item\"\n                      color=\"danger\"\n                      data-role=\"important\"\n                      i18n-bbTooltip=\"High priority@@messages.messagesConversationThread.importantMessage.tooltip\"\n                      bbTooltip=\"High priority\"\n                      container=\"body\"\n                      triggers=\"hover\"\n                      placement=\"top\"\n                      aria-label=\"This conversation has high priority\"\n                      i18n-aria-label=\"\n                        This conversation has high priority@@messages.messagesConversationThread.importantMessage\"\n                    ></bb-icon-ui>\n                  </div>\n                </div>\n                <div class=\"bb-stack__item--push-right\">\n                  <span\n                    bbTooltip=\"Mark as unread\"\n                    i18n-bbTooltip=\"\n                      Mark as unread|Mark as unread button@@messages.messagesConversationThread.markAsUnreadButton\"\n                    container=\"body\"\n                    triggers=\"hover focus\"\n                    placement=\"top\"\n                    class=\"bb-stack__item\"\n                  >\n                    <button\n                      bbButton\n                      color=\"link\"\n                      circle=\"true\"\n                      data-role=\"mark-as-unread-conversation\"\n                      aria-label=\"Mark as unread\"\n                      i18n-aria-label=\"@@messages.messagesConversationThread.markAsUnreadButton\"\n                      (click)=\"host.toggleRead()\"\n                    >\n                      <bb-icon-ui class=\"bb-text-support\" name=\"markunread\"></bb-icon-ui>\n                    </button>\n                  </span>\n\n                  <span\n                    bbTooltip=\"Delete conversation\"\n                    container=\"body\"\n                    i18n-bbTooltip=\"\n                      Delete conversation|Delete conversation\n                      button@@messages.messagesConversationThread.deleteConversationButton\"\n                    triggers=\"hover focus\"\n                    placement=\"top\"\n                  >\n                    <button\n                      bbButton\n                      color=\"link\"\n                      circle=\"true\"\n                      data-role=\"delete-conversation\"\n                      *ngIf=\"conversation.deletable\"\n                      (click)=\"host.openRemoveModal()\"\n                      aria-label=\"Delete conversation\"\n                      i18n-aria-label=\"@@messages.messagesConversationThread.deleteConversationButton\"\n                    >\n                      <bb-icon-ui class=\"bb-text-support\" name=\"delete\"></bb-icon-ui>\n                    </button>\n                  </span>\n                </div>\n              </div>\n\n              <bb-alert-ui\n                role=\"alert\"\n                modifier=\"warning\"\n                [dismissible]=\"true\"\n                *ngIf=\"conversation.topic.deleted && !host.topicAlertClosed\"\n                (close)=\"host.topicAlertClosed = true\"\n                i18n-title=\"Topic no longer exists alert@@messages.messagesConversationThread.alertMessage.topicDeleted\"\n                title=\"This topic no longer exists. Contact support for details.\"\n              ></bb-alert-ui>\n            </div>\n            <div\n              [class.bb-list__item]=\"host.replyOpened\"\n              role=\"list\"\n              aria-label=\"Messages list\"\n              i18n-aria-label=\"Messages list@@messages.messagesConversationThread.conversationMessagesList\"\n            >\n              <bb-messages-conversation-message\n                *ngFor=\"let message of conversation.messages; let last = last\"\n                [sender]=\"message.isMyMessage ? me : message.sender.name\"\n                [created]=\"message.createdAt\"\n                [message]=\"message.body\"\n                [isBodyHtml]=\"message.isBodyHtml\"\n                [opened]=\"last\"\n                [attachments]=\"message.attachments\"\n                role=\"listitem\"\n                aria-label=\"Message\"\n                i18n-aria-label=\"Message@@messages.messagesConversationThread.conversationMessage\"\n              ></bb-messages-conversation-message>\n            </div>\n            <div class=\"card-footer\" *ngIf=\"!conversation['read-only']\">\n              <form [formGroup]=\"host.replyFormGroup\">\n                <div class=\"bb-block--xl\" [attr.id]=\"host.id + 'reply-container'\" [hidden]=\"!host.replyOpened\">\n                  <div class=\"form-group\">\n                    <bb-rich-text-editor-ui\n                      #richTextEditor\n                      i18n-placeholder=\"Write your message@@messages.messagesConversationThread.messagePlaceholder\"\n                      placeholder=\"Write your message\"\n                      i18n-label=\"Message@@messages.messagesConversationThread.messageLabel\"\n                      label=\"Message\"\n                      formControlName=\"body\"\n                      counter=\"true\"\n                      [maxLength]=\"replyMessageMaxLength\"\n                      [required]=\"true\"\n                      [attr.aria-describedby]=\"'conversation-thread-body-error'\"\n                    >\n                      <ng-template #actions bbRichTextEditorActions>\n                        <bb-rich-text-editor-bold-action></bb-rich-text-editor-bold-action>\n                        <bb-rich-text-editor-italic-action></bb-rich-text-editor-italic-action>\n                        <bb-rich-text-editor-underline-action></bb-rich-text-editor-underline-action>\n                        <bb-rich-text-editor-strikethrough-action> </bb-rich-text-editor-strikethrough-action>\n                        <bb-rich-text-editor-olist-action></bb-rich-text-editor-olist-action>\n                        <bb-rich-text-editor-ulist-action> </bb-rich-text-editor-ulist-action>\n                        <bb-rich-text-editor-link-action></bb-rich-text-editor-link-action>\n                      </ng-template>\n                    </bb-rich-text-editor-ui>\n                    <bb-input-validation-message-ui\n                      id=\"conversation-thread-body-error\"\n                      [showErrors]=\"host.isInvalidControl('body')\"\n                    >\n                      <span\n                        *ngIf=\"host.hasError('body', 'required')\"\n                        i18n=\"\n                          Error message if field is required@@messages.messagesConversationThread.errors.messageRequired\"\n                      >\n                        Field is required\n                      </span>\n                    </bb-input-validation-message-ui>\n                  </div>\n                  <div class=\"form-group\">\n                    <bb-messages-upload-attachments\n                      [maxSize]=\"maxAttachmentSize\"\n                      [initAttachments]=\"host.draftResponse?.attachments\"\n                      formControlName=\"attachments\"\n                    >\n                    </bb-messages-upload-attachments>\n                  </div>\n                </div>\n                <div class=\"bb-button-bar bb-button-bar--reverse\">\n                  <bb-load-button-ui\n                    *ngIf=\"host.replyOpened\"\n                    class=\"bb-button-bar__button\"\n                    data-role=\"submit\"\n                    type=\"submit\"\n                    i18n=\"Send@@messages.messagesConversationThread.sendButton\"\n                    [isLoading]=\"host.formLoading\"\n                    (click)=\"host.reply()\"\n                  >\n                    Send\n                  </bb-load-button-ui>\n                  <button\n                    bbButton\n                    [attr.data-role]=\"!host.replyOpened ? 'reply-btn' : 'discard-btn'\"\n                    class=\"bb-button-bar__button\"\n                    [attr.aria-expanded]=\"host.replyOpened\"\n                    [attr.aria-controls]=\"host.id + 'reply-container'\"\n                    color=\"secondary\"\n                    (click)=\"!host.replyOpened ? host.toggleReplyForm(true) : host.handleDiscardClick()\"\n                  >\n                    <span\n                      *ngIf=\"!host.replyOpened; else discardTextButton\"\n                      i18n=\"Reply@@messages.messagesConversationThread.replyButton\"\n                    >\n                      Reply\n                    </span>\n                    <ng-template #discardTextButton>\n                      <span i18n=\"Discard@@messages.messagesConversationThread.discardButton\"> Discard </span>\n                    </ng-template>\n                  </button>\n                  <button\n                    bbButton\n                    data-role=\"save-as-draft\"\n                    class=\"bb-button-bar__button\"\n                    color=\"link\"\n                    *ngIf=\"host.replyOpened\"\n                    (click)=\"host.onSaveDraft()\"\n                    i18n=\"Save as Draft@@messages.messagesConversationThread.saveAsDraftButton\"\n                  >\n                    Save as Draft\n                  </button>\n                </div>\n              </form>\n            </div>\n          </ng-container>\n        </ng-container>\n      </ng-container>\n    </ng-container>\n  </div>\n\n  <bb-modal-ui\n    [isOpen]=\"host.removeModalOpened\"\n    data-role=\"delete-conversation-modal\"\n    aria-describedby=\"delete-confirmation-modal-subtitle\"\n    (cancel)=\"host.closeRemoveModal()\"\n  >\n    <bb-modal-header-ui>\n      <ng-template bbCustomModalHeader>\n        <span\n          class=\"text-large bb-text-semi-bold\"\n          i18n=\"\n            Delete conversation|Header title of the confirmation modal to delete\n            conversation@@messages.messagesConversationThread.messagesDeleteModal.headerTitle\"\n          >Delete conversation?</span\n        >\n      </ng-template>\n    </bb-modal-header-ui>\n    <bb-modal-body-ui>\n      <ng-template bbCustomModalBody>\n        <span\n          id=\"delete-confirmation-modal-subtitle\"\n          i18n=\"\n            Are you sure you want to delete the selected conversation?|Body message of the confirmation modal to delete\n            conversation@@messages.messagesConversationThread.messagesDeleteModal.bodyMessage\"\n          >Are you sure you want to delete the selected conversation?</span\n        >\n      </ng-template>\n    </bb-modal-body-ui>\n    <bb-modal-footer-ui>\n      <ng-template bbCustomModalFooter>\n        <bb-button-ui\n          data-role=\"cancel-delete-conversation\"\n          color=\"secondary\"\n          i18n=\"\n            Cancel|Cancel button inside the confirmation modal\n            footer@@messages.messagesConversationThread.messagesDeleteModal.cancelButton\"\n          (click)=\"host.closeRemoveModal()\"\n          >Cancel\n        </bb-button-ui>\n        <bb-button-ui\n          data-role=\"confirm-delete-conversation\"\n          color=\"danger\"\n          i18n=\"\n            Delete|Delete button inside the confirmation modal\n            footer@@messages.messagesConversationThread.messagesDeleteModal.deleteButton\"\n          (click)=\"host.removeConversation()\"\n          >Delete\n        </bb-button-ui>\n      </ng-template>\n    </bb-modal-footer-ui>\n  </bb-modal-ui>\n\n  <bb-messages-manipulation-confirm-modal\n    [isOpen]=\"host.confirmationModal.opened\"\n    [type]=\"host.confirmationModal.type\"\n    (cancel)=\"host.confirmModalService.toggleModal(false)\"\n    (confirm)=\"host.confirmConfirmationModal()\"\n  ></bb-messages-manipulation-confirm-modal>\n\n  <ng-template #me>\n    <span i18n=\"Me|Show this string if this is clients message@@messages.messagesConversationThread.me\">Me</span>\n  </ng-template>\n\n  <ng-template #emptyState>\n    <div class=\"bb-state-container\">\n      <bb-empty-state-ui\n        i18n-title=\"Empty state title@@messages.messagesConversationThread.emptyStateTitle\"\n        title=\"No Messages\"\n        i18n-subtitle=\"Empty state subtitle@@messages.messagesConversationThread.emptyStateSubtitle\"\n        subtitle=\"You don't have any messages to be displayed.\"\n        iconModifier=\"email\"\n        iconColor=\"muted\"\n        data-role=\"empty-state\"\n      ></bb-empty-state-ui>\n    </div>\n  </ng-template>\n\n  <ng-template #errorState>\n    <bb-messages-request-error [error]=\"host.errorResponse\"></bb-messages-request-error>\n  </ng-template>\n\n  <ng-template #loadingState>\n    <bb-loading-indicator-ui class=\"py-4\" loaderSize=\"md\"></bb-loading-indicator-ui>\n  </ng-template>\n</ng-template>\n\n<ng-template #messageReplySuccess>\n  <span\n    i18n=\"\n      Your message has been successfully sent.|Text of successful send\n      message@@messages.messagesConversationThread.messageSuccessSent\"\n    >Your message has been successfully sent.</span\n  >\n</ng-template>\n\n<ng-template #messageDeleteSuccess>\n  <span\n    i18n=\"\n      Your conversation has been deleted successfully.|Text of successful deletion of the\n      conversation@@messages.messagesConversationThread.messageSuccessDelete\"\n    >Your conversation has been deleted successfully.</span\n  >\n</ng-template>\n\n<ng-template #draftSaveSuccess>\n  <span\n    i18n=\"\n      Your draft has been successfully saved.|Successfully saved draft\n      text@@messages.messagesConversationThread.draftSuccessSave\"\n    >Your draft has been successfully saved.</span\n  >\n</ng-template>\n\n<ng-template #draftDeleteSuccess>\n  <span\n    i18n=\"\n      Your draft has been successfully deleted.|Successfully deleted draft\n      text@@messages.messagesConversationThread.draftDeleteSuccess\"\n    >Your draft has been successfully deleted.</span\n  >\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i5.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0.forwardRef(function () { return i6.BadgeComponent; }), selector: "bb-badge-ui", inputs: ["color", "text", "abbr", "circle", "wrap", "ariaLabel"] }, { type: i0.forwardRef(function () { return i7.AlertComponent; }), selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i0.forwardRef(function () { return i3.MessagesConversationMessageComponent; }), selector: "bb-messages-conversation-message, bb-message-ui", inputs: ["created", "message", "sender", "opened", "attachments", "isBodyHtml"] }, { type: i0.forwardRef(function () { return i8.RichTextEditorComponent; }), selector: "bb-rich-text-editor-ui", inputs: ["maxLength", "minLength", "placeholder", "counter", "readonly", "actionsTooltipPlacement"] }, { type: i0.forwardRef(function () { return i8.RichTextEditorBoldActionComponent; }), selector: "bb-rich-text-editor-bold-action" }, { type: i0.forwardRef(function () { return i8.RichTextEditorItalicActionComponent; }), selector: "bb-rich-text-editor-italic-action" }, { type: i0.forwardRef(function () { return i8.RichTextEditorUnderlineActionComponent; }), selector: "bb-rich-text-editor-underline-action" }, { type: i0.forwardRef(function () { return i8.RichTextEditorStrikethroughActionComponent; }), selector: "bb-rich-text-editor-strikethrough-action" }, { type: i0.forwardRef(function () { return i8.RichTextEditorOlistActionComponent; }), selector: "bb-rich-text-editor-olist-action" }, { type: i0.forwardRef(function () { return i8.RichTextEditorUlistActionComponent; }), selector: "bb-rich-text-editor-ulist-action" }, { type: i0.forwardRef(function () { return i8.RichTextEditorLinkActionComponent; }), selector: "bb-rich-text-editor-link-action", inputs: ["contentClassNames"], outputs: ["linkAdded"] }, { type: i0.forwardRef(function () { return i9.InputValidationMessageComponent; }), selector: "bb-input-validation-message-ui", inputs: ["showErrors", "messageId"] }, { type: i0.forwardRef(function () { return i3.MessagesUploadAttachmentsComponent; }), selector: "bb-messages-upload-attachments-ui, bb-messages-upload-attachments", inputs: ["maxSize", "initAttachments", "disabled", "multiple", "attachmentButtonText", "accept"] }, { type: i0.forwardRef(function () { return i10.LoadButtonComponent; }), selector: "bb-load-button-ui", inputs: ["isLoading", "from", "size", "circle", "totalCount"], outputs: ["paramChange"] }, { type: i0.forwardRef(function () { return i11.ModalComponent; }), selector: "bb-modal-ui", inputs: ["isOpen", "aria-labelledby", "aria-describedby", "modalOptions"], outputs: ["confirm", "cancel", "isOpenChange"] }, { type: i0.forwardRef(function () { return i11.ModalHeaderComponent; }), selector: "bb-modal-header-ui", inputs: ["title"], outputs: ["close"] }, { type: i0.forwardRef(function () { return i11.ModalBodyComponent; }), selector: "bb-modal-body-ui" }, { type: i0.forwardRef(function () { return i11.ModalFooterComponent; }), selector: "bb-modal-footer-ui", inputs: ["confirmText", "cancelText"], outputs: ["confirm", "cancel"] }, { type: i0.forwardRef(function () { return i12.ButtonComponent; }), selector: "bb-button-ui", inputs: ["autofocus", "type", "disabled", "buttonSize", "color", "block"] }, { type: i0.forwardRef(function () { return i3.ӨMessagesManipulationConfirmModalComponent; }), selector: "bb-messages-manipulation-confirm-modal", inputs: ["type"] }, { type: i0.forwardRef(function () { return i13.EmptyStateComponent; }), selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }, { type: i0.forwardRef(function () { return i3.MessagesRequestErrorComponent; }), selector: "bb-messages-request-error, bb-messages-request-error-ui", inputs: ["error"] }, { type: i0.forwardRef(function () { return i14.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }], directives: [{ type: i0.forwardRef(function () { return MessagesConversationThreadCustomizableDirective; }), selector: "[bbMessagesConversationThreadCustomizable]" }, { type: i0.forwardRef(function () { return i15.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i12.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0.forwardRef(function () { return i16.TooltipDirective; }), selector: "[bbTooltip]", inputs: ["bbTooltip", "triggers"] }, { type: i0.forwardRef(function () { return i15.NgForOf; }), selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i0.forwardRef(function () { return i17.ɵNgNoValidate; }), selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i0.forwardRef(function () { return i17.NgControlStatusGroup; }), selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i0.forwardRef(function () { return i17.FormGroupDirective; }), selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i0.forwardRef(function () { return i17.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0.forwardRef(function () { return i17.FormControlName; }), selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i0.forwardRef(function () { return i17.RequiredValidator; }), selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i0.forwardRef(function () { return i8.RichTextEditorActionsDirective; }), selector: "ng-template[bbRichTextEditorActions]" }, { type: i0.forwardRef(function () { return i11.CustomModalHeaderDirective; }), selector: "ng-template[bbCustomModalHeader]" }, { type: i0.forwardRef(function () { return i11.CustomModalBodyDirective; }), selector: "ng-template[bbCustomModalBody]" }, { type: i0.forwardRef(function () { return i11.CustomModalFooterDirective; }), selector: "ng-template[bbCustomModalFooter]" }], pipes: { "async": i0.forwardRef(function () { return i15.AsyncPipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesConversationThreadWidgetComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-messages-conversation-thread-widget-ang',
                    templateUrl: './messages-conversation-thread-widget-ang.component.html',
                    providers: [
                        MessagesEncodingService,
                        WidgetPropertiesService,
                        MessagesManipulationConfirmModalService,
                        MessagesUploadAttachmentsService,
                        {
                            provide: BaseUploadAttachmentsService,
                            useClass: MessagesClientUploadAttachmentsService,
                        },
                        {
                            provide: AbstractBaseMessagesConversationThreadService,
                            useClass: MessagesConversationThreadWidgetService,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i1.MessagesConversationThreadWidgetService }, { type: i2.WidgetPropertiesService }, { type: i3.MessagesEncodingService }, { type: i3.MessagesUploadAttachmentsService }, { type: i3.MessagesManipulationConfirmModalService }, { type: i3.AbstractBaseMessagesConversationThreadService }, { type: i4.ActivatedRoute }, { type: i3.SharedMethodsService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { mailboxTypeTitleValue: [{
                type: Input,
                args: ['mailboxTypeTitle']
            }], maxAttachmentSizeValue: [{
                type: Input,
                args: ['maxAttachmentSize']
            }], replyMessageMaxLengthValue: [{
                type: Input,
                args: ['replyMessageMaxLength']
            }], customerServiceTitleValue: [{
                type: Input,
                args: ['customerServiceTitle']
            }] } });
export class MessagesConversationThreadCustomizableDirective extends BbTemplate {
}
MessagesConversationThreadCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesConversationThreadCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
MessagesConversationThreadCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.14", type: MessagesConversationThreadCustomizableDirective, selector: "[bbMessagesConversationThreadCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.14", ngImport: i0, type: MessagesConversationThreadCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbMessagesConversationThreadCustomizable]',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,