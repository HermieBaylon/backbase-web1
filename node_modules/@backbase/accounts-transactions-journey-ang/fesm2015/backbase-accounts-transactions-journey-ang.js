import * as i0 from '@angular/core';
import { InjectionToken, Injectable, Optional, Inject, Component, Directive, EventEmitter, ChangeDetectionStrategy, Input, Output, NgModule } from '@angular/core';
import * as i8 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i1 from '@backbase/foundation-ang/core';
import { BackbaseCoreModule } from '@backbase/foundation-ang/core';
import * as i2 from '@angular/router';
import { provideRoutes, RouterModule } from '@angular/router';
import { combineLatest, BehaviorSubject, Subject, Observable, of } from 'rxjs';
import * as i4$1 from '@backbase/product-summary-common-ang';
import { ProductKindUri, AccountAliasDisplayingLevel, hasExternalInfo, ACCOUNT_ALIAS_DISPLAYING_LEVEL, ProductSummaryAccountsService, ProductsExternalInfoService, isDefined, ValidationModule, FormatPipeModule, DatePipeModule, ProductSummaryCommon } from '@backbase/product-summary-common-ang';
export { ACCOUNT_ALIAS_DISPLAYING_LEVEL, AccountAliasDisplayingLevel, ProductKindUri } from '@backbase/product-summary-common-ang';
import * as i3 from '@backbase/transactions-common-ang';
import { EndpointType, AvailableFilterEnum, TransactionDetailsService, TransactionsCommonModule } from '@backbase/transactions-common-ang';
import * as i1$2 from '@backbase/accounts-transactions-journeys-shared-ui-account-ang';
import { AccountInfoPropertyType, AccountInfoPropertyModule } from '@backbase/accounts-transactions-journeys-shared-ui-account-ang';
export { AccountInfoPropertyType } from '@backbase/accounts-transactions-journeys-shared-ui-account-ang';
import * as i1$1 from '@backbase/ui-ang/header';
import * as i2$1 from '@backbase/product-summary-list-widget-ang';
import { ProductSummaryListWidgetModule } from '@backbase/product-summary-list-widget-ang';
import { mergeMap, map, takeUntil, tap } from 'rxjs/operators';
import * as i4 from '@backbase/transactions-list-widget-ang';
import { TransactionsListWidgetModule } from '@backbase/transactions-list-widget-ang';
import * as i5 from '@backbase/ui-ang/icon';
import * as i6 from '@backbase/product-summary-ui';
import { ProductNumberModule, ArrangementStateIndicatorModule, AccountHeaderModule, AccountGraphicalHeaderModule } from '@backbase/product-summary-ui';
import * as i7 from '@backbase/ui-ang/button';
import { ProductSummaryAccountSelectorWidgetModule } from '@backbase/product-summary-account-selector-widget-ang';
import * as i4$2 from '@backbase/product-summary-manage-accounts-widget-ang';
import { ProductSummaryManageAccountsWidgetModule } from '@backbase/product-summary-manage-accounts-widget-ang';
import * as i2$2 from '@backbase/product-summary-details-widget-ang';
import { AccountService, ProductSummaryDetailsWidgetModule } from '@backbase/product-summary-details-widget-ang';
import { getValue } from '@backbase/accounts-transactions-journeys-shared-util-transform-ang';
import { accountNumberToMaskableAttribute } from '@backbase/accounts-transactions-journeys-shared-util-account-ang';
import * as i3$1 from '@backbase/accounts-transactions-journeys-shared-ui-transform-ang';
import { SplitArrayPipeModule } from '@backbase/accounts-transactions-journeys-shared-ui-transform-ang';
import { AmountModule } from '@backbase/ui-ang/amount';
import { BbDatePipeModule } from '@backbase/ui-ang/date-pipe';
import { PaymentCardModule } from '@backbase/ui-ang/payment-card';
import { TooltipModule } from '@backbase/ui-ang/tooltip-directive';

const defaultConfiguration = [
    {
        title: $localize `:@@product.details.other.account.label.general.section:General`,
        properties: [
            {
                type: AccountInfoPropertyType.TEXT,
                label: $localize `:@@product.details.other.account.label.productTypeName:Account Type`,
                key: 'productTypeName',
            },
            {
                type: AccountInfoPropertyType.ACCOUNT_NUMBER,
                label: $localize `:@@product.details.other.account.label.account.number:Account Number`,
                key: 'IBAN',
                numberType: 'iban',
            },
            {
                type: AccountInfoPropertyType.AMOUNT,
                label: $localize `:@@product.details.other.account.label.bookedBalance:Account Balance`,
                key: 'bookedBalance',
                tooltip: $localize `:@@product.details.other.account.tooltip.bookedBalance:Account Balance`,
            },
            {
                type: AccountInfoPropertyType.TEXT,
                label: $localize `:@@product.details.other.account.label.accountHolderNames:Account Owner(s)`,
                key: 'accountHolderNames',
            },
            {
                type: AccountInfoPropertyType.TEXT,
                label: $localize `:@@product.details.other.account.label.bankBranchCode:ACH Routing Number`,
                key: 'bankBranchCode',
            },
            {
                type: AccountInfoPropertyType.TEXT,
                label: $localize `:@@product.details.other.account.label.bankBranchCode2:FedWire Routing Number`,
                key: 'bankBranchCode2',
            },
            {
                type: AccountInfoPropertyType.ACCOUNT_STATE,
                label: $localize `:@@product.details.other.account.label.accountStatus:Account Status`,
                key: 'state.state',
            },
            {
                type: AccountInfoPropertyType.TEXT,
                label: $localize `:@@product.details.other.account.label.financialInstitution.name:Bank Name`,
                key: 'financialInstitution.name',
            },
            {
                type: AccountInfoPropertyType.UPDATE_TIME,
                label: $localize `:@@product.details.other.account.label.lastSyncDate:Last sync`,
                key: 'lastSyncDate',
            },
        ],
    },
    {
        title: $localize `:@@product.details.other.account.label.interest.details.section:Interest Details`,
        properties: [
            {
                type: AccountInfoPropertyType.PERCENT,
                label: $localize `:@@product.details.other.account.label.accountInterestRate:Interest Rate`,
                key: 'accountInterestRate',
                tooltip: $localize `:@@product.details.other.account.tooltip.accountInterestRate:The annualized cost of credit or debt-capital computed as the percentage ratio of interest to the principal`,
            },
            {
                type: AccountInfoPropertyType.AMOUNT,
                label: $localize `:@@product.details.other.account.label.accruedInterest:Accrued Interest`,
                key: 'accruedInterest',
                tooltip: $localize `:@@product.details.other.account.tooltip.accruedInterest:The interest that is earned (credit interest) or due (debit interest) but not settled yet`,
            },
        ],
    },
    {
        title: $localize `:@@product.details.other.account.label.other.section:Other`,
        properties: [
            {
                type: AccountInfoPropertyType.DATE,
                label: $localize `:@@product.details.other.account.label.accountOpeningDate:Account Opening Date`,
                key: 'accountOpeningDate',
                tooltip: $localize `:@@product.details.other.account.tooltip.accountOpeningDate:Account Opening Date`,
            },
            {
                type: AccountInfoPropertyType.DATE,
                label: $localize `:@@product.details.other.account.label.lastUpdateDate:Last Updated Date`,
                key: 'lastUpdateDate',
                tooltip: $localize `:@@product.details.other.account.tooltip.lastUpdateDate:Last date of parameter update for the product`,
            },
        ],
    },
];
const creditCardConfiguration = [
    {
        title: $localize `:@@product.details.credit.card.label.general.section:General`,
        properties: [
            {
                type: AccountInfoPropertyType.TEXT,
                label: $localize `:@@product.details.credit.card.label.productTypeName:Account Type`,
                key: 'productTypeName',
            },
            {
                type: AccountInfoPropertyType.ACCOUNT_NUMBER,
                label: $localize `:@@product.details.credit.card.label.number:Account Number`,
                key: 'number',
                numberType: 'cardNumber',
            },
            {
                type: AccountInfoPropertyType.TEXT,
                label: $localize `:@@product.details.credit.card.label.accountHolderNames:Account Owner(s)`,
                key: 'accountHolderNames',
            },
            {
                type: AccountInfoPropertyType.TEXT,
                label: $localize `:@@product.details.credit.card.label.cardProvider:Card Provider`,
                key: 'cardDetails.cardProvider',
                tooltip: $localize `:@@product.details.credit.card.tooltip.cardProvider:Card Provider`,
            },
            {
                type: AccountInfoPropertyType.DATE,
                label: $localize `:@@product.details.credit.card.label.validThru:Valid thru`,
                key: 'validThru',
                tooltip: $localize `:@@product.details.credit.card.tooltip.validThru:Expiration date of a credit card, after which is no longer valid`,
            },
            {
                type: AccountInfoPropertyType.ACCOUNT_STATE,
                label: $localize `:@@product.details.credit.card.label.accountStatus:Account Status`,
                key: 'state.state',
            },
            {
                type: AccountInfoPropertyType.TEXT,
                label: $localize `:@@product.details.credit.card.label.financialInstitution.name:Bank Name`,
                key: 'financialInstitution.name',
            },
            {
                type: AccountInfoPropertyType.UPDATE_TIME,
                label: $localize `:@@product.details.credit.card.label.lastSyncDate:Last sync`,
                key: 'lastSyncDate',
            },
        ],
    },
    {
        title: $localize `:@@product.details.credit.card.label.status.section:Status`,
        properties: [
            {
                type: AccountInfoPropertyType.AMOUNT,
                label: $localize `:@@product.details.credit.card.label.consumedAmount:Consumed Amount`,
                key: 'bookedBalance',
                tooltip: $localize `:@@product.details.credit.card.tooltip.consumedAmount:Consumed Amount`,
            },
            {
                type: AccountInfoPropertyType.AMOUNT,
                label: $localize `:@@product.details.credit.card.label.remainingAmount:Remaining Amount`,
                key: 'remainingCredit',
                tooltip: $localize `:@@product.details.credit.card.tooltip.remainingAmount:Remaining Amount`,
            },
            {
                type: AccountInfoPropertyType.AMOUNT,
                label: $localize `:@@product.details.credit.card.label.creditLimit:Credit Limit`,
                key: 'creditLimit',
                tooltip: $localize `:@@product.details.credit.card.tooltip.creditLimit:Monetary amount of the used overdraft`,
            },
            {
                type: AccountInfoPropertyType.AMOUNT,
                label: $localize `:@@product.details.credit.card.label.statementBalance:Statement Balance`,
                key: 'cardDetails.statementBalance',
                tooltip: $localize `:@@product.details.credit.card.tooltip.statementBalance:Statement Balance`,
            },
            {
                type: AccountInfoPropertyType.AMOUNT,
                label: $localize `:@@product.details.credit.card.label.availableCashCredit:Available Cash Credit Limit`,
                key: 'cardDetails.availableCashCredit',
                tooltip: $localize `:@@product.details.credit.card.tooltip.availableCashCredit:Available Cash Credit Limit`,
            },
            {
                type: AccountInfoPropertyType.AMOUNT,
                label: $localize `:@@product.details.credit.card.label.cashCreditLimit:Cash Credit Limit`,
                key: 'cardDetails.cashCreditLimit',
                tooltip: $localize `:@@product.details.credit.card.tooltip.cashCreditLimit:Cash Credit Limit`,
            },
        ],
    },
    {
        title: $localize `:@@product.details.credit.card.label.payment.section:Payment and Interest Details`,
        properties: [
            {
                type: AccountInfoPropertyType.AMOUNT,
                label: $localize `:@@product.details.credit.card.label.minimumPayment:Minimum Payment`,
                key: 'minimumPayment',
                tooltip: $localize `:@@product.details.credit.card.tooltip.minimumPayment:The minimum payment set a percentage of balance, or a fixed cash amount`,
            },
            {
                type: AccountInfoPropertyType.DATE,
                label: $localize `:@@product.details.credit.card.label.minimumPaymentDueDate:Minimum Payment Due Date`,
                key: 'minimumPaymentDueDate',
                tooltip: $localize `:@@product.details.credit.card.tooltip.minimumPaymentDueDate:Minimum Payment Due Date shown on your monthly statement to remain in good standing`,
            },
            {
                type: AccountInfoPropertyType.PERCENT,
                label: $localize `:@@product.details.credit.card.label.cashAdvanceInterestRate:Cash Advance APR`,
                key: 'interestDetails.cashAdvanceInterestRate',
                tooltip: $localize `:@@product.details.credit.card.tooltip.cashAdvanceInterestRate:Cash Advance APR`,
            },
            {
                type: AccountInfoPropertyType.PERCENT,
                label: $localize `:@@product.details.credit.card.label.applicableInterestRate:Interest Rate`,
                key: 'applicableInterestRate',
                tooltip: $localize `:@@product.details.credit.card.tooltip.applicableInterestRate:The annualized cost of credit or debt-capital computed as the percentage ratio of interest to the principal`,
            },
            {
                type: AccountInfoPropertyType.AMOUNT,
                label: $localize `:@@product.details.credit.card.label.lastPaymentAmount:Last Payment Amount`,
                key: 'cardDetails.lastPaymentAmount',
                tooltip: $localize `:@@product.details.credit.card.tooltip.lastPaymentAmount:Last Payment Amount`,
            },
            {
                type: AccountInfoPropertyType.DATE,
                label: $localize `:@@product.details.credit.card.label.lastPaymentDate:Last Payment Date`,
                key: 'cardDetails.lastPaymentDate',
                tooltip: $localize `:@@product.details.credit.card.tooltip.lastPaymentDate:Last Payment Date`,
            },
            {
                type: AccountInfoPropertyType.AMOUNT,
                label: $localize `:@@product.details.credit.card.label.previousStatementBalance:Last Statement Balance`,
                key: 'cardDetails.previousStatementBalance',
                tooltip: $localize `:@@product.details.credit.card.tooltip.previousStatementBalance:Last Statement Balance`,
            },
            {
                type: AccountInfoPropertyType.DATE,
                label: $localize `:@@product.details.credit.card.label.previousStatementDate:Last Statement Date`,
                key: 'cardDetails.previousStatementDate',
                tooltip: $localize `:@@product.details.credit.card.tooltip.previousStatementDate:Last Statement Date`,
            },
            {
                type: AccountInfoPropertyType.PERCENT,
                label: $localize `:@@product.details.credit.card.label.penaltyInterestRate:Penalty APR`,
                key: 'interestDetails.penaltyInterestRate',
                tooltip: $localize `:@@product.details.credit.card.tooltip.penaltyInterestRate:Penalty APR`,
            },
            {
                type: AccountInfoPropertyType.AMOUNT,
                label: $localize `:@@product.details.credit.card.label.latePaymentFee:Late Fee`,
                key: 'cardDetails.latePaymentFee',
                tooltip: $localize `:@@product.details.credit.card.tooltip.latePaymentFee:Late Fee`,
            },
        ],
    },
    {
        title: $localize `:@@product.details.credit.card.label.other.section:Other`,
        properties: [
            {
                type: AccountInfoPropertyType.DATE,
                label: $localize `:@@product.details.credit.card.label.accountOpeningDate:Account Opening Date`,
                key: 'accountOpeningDate',
                tooltip: $localize `:@@product.details.credit.card.tooltip.accountOpeningDate:The date of activation of the account in the bank's system`,
            },
            {
                type: AccountInfoPropertyType.DATE,
                label: $localize `:@@product.details.credit.card.label.lastUpdateDate:Last Updated Date`,
                key: 'lastUpdateDate',
                tooltip: $localize `:@@product.details.credit.card.tooltip.lastUpdateDate:Last date of parameter update for the product`,
            },
        ],
    },
];
const currentAccountConfiguration = [
    {
        title: $localize `:@@product.details.current.account.label.general.section:General`,
        properties: [
            {
                type: AccountInfoPropertyType.TEXT,
                label: $localize `:@@product.details.current.account.label.productTypeName:Account Type`,
                key: 'productTypeName',
            },
            {
                type: AccountInfoPropertyType.ACCOUNT_NUMBER,
                label: $localize `:@@product.details.current.account.label.iban:IBAN`,
                key: 'IBAN',
                numberType: 'iban',
            },
            {
                type: AccountInfoPropertyType.AMOUNT,
                label: $localize `:@@product.details.current.account.label.availableBalance:Available Balance`,
                key: 'availableBalance',
            },
            {
                type: AccountInfoPropertyType.TEXT,
                label: $localize `:@@product.details.current.account.label.accountHolderNames:Account Owner(s)`,
                key: 'accountHolderNames',
            },
            {
                type: AccountInfoPropertyType.TEXT,
                label: $localize `:@@account.details.current.account.label.bankBranchCode:ACH Routing Number`,
                key: 'bankBranchCode',
            },
            {
                type: AccountInfoPropertyType.TEXT,
                label: $localize `:@@account.details.current.account.label.bankBranchCode2:FedWire Routing Number`,
                key: 'bankBranchCode2',
            },
            {
                type: AccountInfoPropertyType.ACCOUNT_STATE,
                label: $localize `:@@product.details.current.account.label.accountStatus:Account Status`,
                key: 'state.state',
            },
            {
                type: AccountInfoPropertyType.TEXT,
                label: $localize `:@@product.details.current.account.label.financialInstitution.name:Bank Name`,
                key: 'financialInstitution.name',
            },
            {
                type: AccountInfoPropertyType.UPDATE_TIME,
                label: $localize `:@@product.details.current.account.label.lastSyncDate:Last sync`,
                key: 'lastSyncDate',
            },
        ],
    },
    {
        title: $localize `:@@product.details.current.account.label.interest.section:Interest Details`,
        properties: [
            {
                type: AccountInfoPropertyType.PERCENT,
                label: $localize `:@@product.details.current.account.label.interestRate:Interest Rate`,
                tooltip: $localize `:@@product.details.current.account.tooltip.interestRate:The annualized cost of credit or debt-capital computed as the percentage ratio of interest to the principal`,
                key: 'accountInterestRate',
            },
            {
                type: AccountInfoPropertyType.AMOUNT,
                label: $localize `:@@product.details.current.account.label.accruedInterest:Accrued Interest`,
                tooltip: $localize `:@@product.details.current.account.tooltip.accruedInterest:The interest that is earned (credit interest) or due (debit interest) but not settled yet`,
                key: 'accruedInterest',
            },
            {
                type: AccountInfoPropertyType.AMOUNT,
                label: $localize `:@@product.details.current-account.label.account.lastYearAccruedInterest:Last year’s accrued interest`,
                tooltip: $localize `:@@product.details.current-account.tooltip.lastYearAccruedInterest:Last year’s accrued interest`,
                key: 'interestDetails.lastYearAccruedInterest',
            },
        ],
    },
    {
        title: $localize `:@@product.details.current.account.label.overdraft.section:Overdraft Details`,
        properties: [
            {
                type: AccountInfoPropertyType.AMOUNT,
                label: $localize `:@@product.details.current.account.label.overdraftLimit:Overdraft Limit`,
                tooltip: $localize `:@@product.details.current.account.tooltip.overdraftLimit:Overdraft Limit`,
                key: 'creditLimit',
            },
            {
                type: AccountInfoPropertyType.DATE,
                label: $localize `:@@product.details.current.account.label.overdraftexpirydate:Overdraft Expiry Date`,
                tooltip: $localize `:@@product.details.current.account.tooltip.overdraftexpirydate:Expiration date of the overdraft limit`,
                key: 'creditLimitExpiryDate',
            },
        ],
    },
    {
        title: $localize `:@@product.details.current.account.label.other.section:Other`,
        properties: [
            {
                type: AccountInfoPropertyType.DATE,
                label: $localize `:@@product.details.current.account.label.accountOpeningDate:Account Opening Date`,
                tooltip: $localize `:@@product.details.current.account.tooltip.accountOpeningDate:Account Opening Date`,
                key: 'accountOpeningDate',
            },
            {
                type: AccountInfoPropertyType.DATE,
                label: $localize `:@@product.details.current.account.label.lastUpdateDate:Last Updated Date`,
                tooltip: $localize `:@@product.details.current.account.tooltip.lastUpdateDate:Last date of parameter update for the product`,
                key: 'lastUpdateDate',
            },
        ],
    },
    {
        title: $localize `:@@product.details.current.account.label.associatedDebitCards:Associated Debit Cards`,
        hideCard: true,
        properties: [
            {
                type: AccountInfoPropertyType.DEBIT_CARDS,
                key: 'debitCards',
            },
        ],
    },
];
const debitCardConfiguration = [
    {
        title: $localize `:@@product.details.debit.card.label.general.section:General`,
        properties: [
            {
                type: AccountInfoPropertyType.TEXT,
                label: $localize `:@@product.details.debit.card.label.productTypeName:Account Type`,
                key: 'productTypeName',
            },
            {
                type: AccountInfoPropertyType.ACCOUNT_NUMBER,
                label: $localize `:@@product.details.debit.card.label.iban:IBAN`,
                key: 'IBAN',
                numberType: 'iban',
            },
            {
                type: AccountInfoPropertyType.AMOUNT,
                label: $localize `:@@product.details.debit.card.label.availableBalance:Available Balance`,
                key: 'availableBalance',
            },
            {
                type: AccountInfoPropertyType.TEXT,
                label: $localize `:@@product.details.debit.card.label.accountHolderNames:Account Owner(s)`,
                key: 'accountHolderNames',
            },
            {
                type: AccountInfoPropertyType.TEXT,
                label: $localize `:@@product.details.debit.card.label.bankBranchCode:ACH Routing Number`,
                key: 'bankBranchCode',
            },
            {
                type: AccountInfoPropertyType.TEXT,
                label: $localize `:@@product.details.debit.card.label.bankBranchCode2:FedWire Routing Number`,
                key: 'bankBranchCode2',
            },
            {
                type: AccountInfoPropertyType.ACCOUNT_STATE,
                label: $localize `:@@product.details.debit.card.label.accountStatus:Account Status`,
                key: 'state.state',
            },
            {
                type: AccountInfoPropertyType.TEXT,
                label: $localize `:@@product.details.debit.card.label.financialInstitution.name:Bank Name`,
                key: 'financialInstitution.name',
            },
            {
                type: AccountInfoPropertyType.UPDATE_TIME,
                label: $localize `:@@product.details.debit.card.label.lastSyncDate.name:Last sync`,
                key: 'lastSyncDate',
            },
        ],
    },
    {
        title: $localize `:@@product.details.debit.card.label.other.section:Other`,
        properties: [
            {
                type: AccountInfoPropertyType.DATE,
                label: $localize `:@@product.details.debit.card.label.accountOpeningDate:Account Opening Date`,
                key: 'accountOpeningDate',
                tooltip: $localize `:@@product.details.debit.card.tooltip.accountOpeningDate:Account Opening Date`,
            },
            {
                type: AccountInfoPropertyType.DATE,
                label: $localize `:@@product.details.debit.card.label.lastUpdateDate:Last Updated Date`,
                key: 'lastUpdateDate',
                tooltip: $localize `:@@product.details.debit.card.tooltip.lastUpdateDate:Last date of parameter update for the product`,
            },
        ],
    },
];
const investmentAccountConfiguration = [
    {
        title: $localize `:@@product.details.investment.account.label.general.section:General`,
        properties: [
            {
                type: AccountInfoPropertyType.TEXT,
                label: $localize `:@@product.details.investment.account.label.productTypeName:Account Type`,
                key: 'productTypeName',
            },
            {
                type: AccountInfoPropertyType.ACCOUNT_NUMBER,
                label: $localize `:@@product.details.investment.account.label.account.number:Account Number`,
                key: 'BBAN',
                numberType: 'bban',
            },
            {
                type: AccountInfoPropertyType.AMOUNT,
                label: $localize `:@@product.details.investment.account.label.totalInvestmentValue:Total Investment Value`,
                key: 'totalInvestmentValue',
                tooltip: $localize `:@@product.details.investment.account.tooltip.totalInvestmentValue:Total Investment Value`,
            },
            {
                type: AccountInfoPropertyType.TEXT,
                label: $localize `:@@product.details.investment.account.label.accountHolderNames:Account Owner(s)`,
                key: 'accountHolderNames',
            },
            {
                type: AccountInfoPropertyType.TEXT,
                label: $localize `:@@product.details.investment.account.label.bankBranchCode:ACH Routing Number`,
                key: 'bankBranchCode',
            },
            {
                type: AccountInfoPropertyType.TEXT,
                label: $localize `:@@product.details.investment.account.label.bankBranchCode2:FedWire Routing Number`,
                key: 'bankBranchCode2',
            },
            {
                type: AccountInfoPropertyType.ACCOUNT_STATE,
                label: $localize `:@@product.details.investment.account.label.accountStatus:Account Status`,
                key: 'state.state',
            },
            {
                type: AccountInfoPropertyType.TEXT,
                label: $localize `:@@product.details.investment.account.label.financialInstitution.name:Bank Name`,
                key: 'financialInstitution.name',
            },
            {
                type: AccountInfoPropertyType.UPDATE_TIME,
                label: $localize `:@@product.details.investment.account.label.lastSyncDate:Last sync`,
                key: 'lastSyncDate',
            },
        ],
    },
    {
        title: $localize `:@@product.details.investment.account.label.other.section:Other`,
        properties: [
            {
                type: AccountInfoPropertyType.DATE,
                label: $localize `:@@product.details.investment.account.label.accountOpeningDate:Account Opening Date`,
                key: 'accountOpeningDate',
                tooltip: $localize `:@@product.details.investment.account.tooltip.accountOpeningDate:Account Opening Date`,
            },
            {
                type: AccountInfoPropertyType.DATE,
                label: $localize `:@@product.details.investment.account.label.lastUpdateDate:Last Updated Date`,
                key: 'lastUpdateDate',
                tooltip: $localize `:@@product.details.investment.account.tooltip.lastUpdateDate:Last date of parameter update for the product`,
            },
        ],
    },
];
const loanConfiguration = [
    {
        title: $localize `:@@product.details.loan.label.general.section:General`,
        properties: [
            {
                type: AccountInfoPropertyType.TEXT,
                label: $localize `:@@product.details.loan.label.productTypeName:Account Type`,
                key: 'productTypeName',
            },
            {
                type: AccountInfoPropertyType.ACCOUNT_NUMBER,
                label: $localize `:@@product.details.loan.label.account.number:Account Number`,
                key: 'BBAN',
                numberType: 'bban',
            },
            {
                type: AccountInfoPropertyType.AMOUNT,
                label: $localize `:@@product.details.loan.label.outstandingamount:Outstanding Amount`,
                key: 'bookedBalance',
                tooltip: $localize `:@@product.details.loan.tooltip.outstandingamount:Outstanding Amount`,
            },
            {
                type: AccountInfoPropertyType.TEXT,
                label: $localize `:@@product.details.loan.label.accountHolderNames:Account Owner(s)`,
                key: 'accountHolderNames',
            },
            {
                type: AccountInfoPropertyType.TEXT,
                label: $localize `:@@product.details.loan.label.bankBranchCode:ACH Routing Number`,
                key: 'bankBranchCode',
            },
            {
                type: AccountInfoPropertyType.TEXT,
                label: $localize `:@@product.details.loan.label.bankBranchCode2:FedWire Routing Number`,
                key: 'bankBranchCode2',
            },
            {
                type: AccountInfoPropertyType.ACCOUNT_STATE,
                label: $localize `:@@product.details.loan.label.accountStatus:Account Status`,
                key: 'state.state',
            },
            {
                type: AccountInfoPropertyType.TEXT,
                label: $localize `:@@product.details.loan.label.financialInstitution.name:Bank Name`,
                key: 'financialInstitution.name',
            },
            {
                type: AccountInfoPropertyType.UPDATE_TIME,
                label: $localize `:@@product.details.loan.label.lastSyncDate:Last sync`,
                key: 'lastSyncDate',
            },
        ],
    },
    {
        title: $localize `:@@product.details.loan.label.loan.details.section:Loan Details`,
        properties: [
            {
                type: AccountInfoPropertyType.AMOUNT,
                label: $localize `:@@product.details.loan.label.monthlyInstalmentAmount:Monthly Instalment Amount`,
                key: 'monthlyInstalmentAmount',
                tooltip: $localize `:@@product.details.loan.tooltip.monthlyInstalmentAmount:A fixed payment amount paid by a borrower to the bank at a specified date each calendar month`,
            },
            {
                type: AccountInfoPropertyType.AMOUNT,
                label: $localize `:@@product.details.loan.label.principalAmount:Principal Amount`,
                key: 'principalAmount',
                tooltip: $localize `:@@product.details.loan.tooltip.principalAmount:The amount that was (originally) contracted for the respective product`,
            },
            {
                type: AccountInfoPropertyType.PERCENT,
                label: $localize `:@@product.details.loan.label.accountInterestRate:Interest Rate`,
                key: 'accountInterestRate',
                tooltip: $localize `:@@product.details.loan.tooltip.accountInterestRate:The annualized cost of credit or debt-capital computed as the percentage ratio of interest to the principal`,
            },
            {
                type: AccountInfoPropertyType.FREQUENCY,
                label: $localize `:@@product.details.loan.label.termNumber:Term`,
                key: 'termNumber',
                unitKey: 'termUnit',
                tooltip: $localize `:@@product.details.loan.tooltip.termNumber:The period of time and/or the interest rate arranged between Bank and customer`,
            },
        ],
    },
    {
        title: $localize `:@@product.details.loan.label.other.section:Other`,
        properties: [
            {
                type: AccountInfoPropertyType.DATE,
                label: $localize `:@@product.details.loan.label.accountOpeningDate:Account Opening Date`,
                key: 'accountOpeningDate',
                tooltip: $localize `:@@product.details.loan.tooltip.accountOpeningDate:Account Opening Date`,
            },
            {
                type: AccountInfoPropertyType.DATE,
                label: $localize `:@@product.details.loan.label.lastUpdateDate:Last Updated Date`,
                key: 'lastUpdateDate',
                tooltip: $localize `:@@product.details.loan.tooltip.lastUpdateDate:Last date of parameter update for the product`,
            },
        ],
    },
];
const savingsAccountConfiguration = [
    {
        title: $localize `:@@product.details.savings.account.label.general.section:General`,
        properties: [
            {
                type: AccountInfoPropertyType.TEXT,
                label: $localize `:@@product.details.savings.account.label.productTypeName:Account Type`,
                key: 'productTypeName',
            },
            {
                type: AccountInfoPropertyType.ACCOUNT_NUMBER,
                label: $localize `:@@product.details.savings.account.label.account.number:Account Number`,
                key: 'BBAN',
                numberType: 'bban',
            },
            {
                type: AccountInfoPropertyType.AMOUNT,
                label: $localize `:@@product.details.savings.account.label.bookedBalance:Account Balance`,
                key: 'bookedBalance',
                tooltip: $localize `:@@product.details.savings.account.tooltip.bookedBalance:Account Balance`,
            },
            {
                type: AccountInfoPropertyType.TEXT,
                label: $localize `:@@product.details.savings.account.label.accountHolderNames:Account Owner(s)`,
                key: 'accountHolderNames',
            },
            {
                type: AccountInfoPropertyType.TEXT,
                label: $localize `:@@product.details.savings.account.label.bankBranchCode:ACH Routing Number`,
                key: 'bankBranchCode',
            },
            {
                type: AccountInfoPropertyType.TEXT,
                label: $localize `:@@product.details.savings.account.label.bankBranchCode2:FedWire Routing Number`,
                key: 'bankBranchCode2',
            },
            {
                type: AccountInfoPropertyType.ACCOUNT_STATE,
                label: $localize `:@@product.details.savings.account.label.accountStatus:Account Status`,
                key: 'state.state',
            },
            {
                type: AccountInfoPropertyType.TEXT,
                label: $localize `:@@product.details.savings.account.label.financialInstitution.name:Bank Name`,
                key: 'financialInstitution.name',
            },
            {
                type: AccountInfoPropertyType.NUMBER,
                label: $localize `:@@product.details.savings.account.label.remainingPeriodicTransfers:Remaining Periodic Transfers`,
                key: 'remainingPeriodicTransfers',
                tooltip: $localize `:@@product.details.savings.account.tooltip.remainingPeriodicTransfers:Remaining Periodic Transfers`,
                decimalPlaces: 0,
            },
            {
                type: AccountInfoPropertyType.UPDATE_TIME,
                label: $localize `:@@product.details.savings.account.label.lastSyncDate:Last sync`,
                key: 'lastSyncDate',
            },
        ],
    },
    {
        title: $localize `:@@product.details.savings.account.label.interest.details.section:Interest Details`,
        properties: [
            {
                type: AccountInfoPropertyType.PERCENT,
                label: $localize `:@@product.details.savings.account.label.accountInterestRate:Interest Rate`,
                key: 'accountInterestRate',
                tooltip: $localize `:@@product.details.savings.account.tooltip.accountInterestRate:The annualized cost of credit or debt-capital computed as the percentage ratio of interest to the principal`,
            },
            {
                type: AccountInfoPropertyType.AMOUNT,
                label: $localize `:@@product.details.savings.account.label.accruedInterest:Accrued Interest`,
                key: 'accruedInterest',
                tooltip: $localize `:@@product.details.savings.account.tooltip.accruedInterest:The interest that is earned (credit interest) or due (debit interest) but not settled yet`,
            },
            {
                type: AccountInfoPropertyType.AMOUNT,
                label: $localize `:@@product.details.savings.account.label.minimumRequiredBalance:Minimum Required Balance`,
                key: 'minimumRequiredBalance',
                tooltip: $localize `:@@product.details.savings.account.tooltip.minimumRequiredBalance:Minimum amount that a customer must have in an account in order to receive some sort of service, such as keeping the account open or receive interest`,
            },
            {
                type: AccountInfoPropertyType.AMOUNT,
                label: $localize `:@@product.details.savings.account.label.lastYearAccruedInterest:Last year’s accrued interest`,
                key: 'interestDetails.lastYearAccruedInterest',
                tooltip: $localize `:@@product.details.savings.account.tooltip.lastYearAccruedInterest:Last year’s accrued interest`,
            },
            {
                type: AccountInfoPropertyType.AMOUNT,
                label: $localize `:@@product.details.savings.account.label.dividendWithheldYTD:Interest/Dividend Withheld YTD`,
                key: 'interestDetails.dividendWithheldYTD',
                tooltip: $localize `:@@product.details.savings.account.tooltip.dividendWithheldYTD:Interest/Dividend Withheld YTD`,
            },
            {
                type: AccountInfoPropertyType.PERCENT,
                label: $localize `:@@product.details.savings.account.label.annualPercentageYield:Annual Percentage Yield`,
                key: 'interestDetails.annualPercentageYield',
                tooltip: $localize `:@@product.details.savings.account.tooltip.annualPercentageYield:Annual Percentage Yield`,
            },
        ],
    },
    {
        title: $localize `:@@product.details.savings.account.label.other.section:Other`,
        properties: [
            {
                type: AccountInfoPropertyType.DATE,
                label: $localize `:@@product.details.savings.account.label.accountOpeningDate:Account Opening Date`,
                key: 'accountOpeningDate',
                tooltip: $localize `:@@product.details.savings.account.tooltip.accountOpeningDate:Account Opening Date`,
            },
            {
                type: AccountInfoPropertyType.DATE,
                label: $localize `:@@product.details.savings.account.label.lastUpdateDate:Last Updated Date`,
                key: 'lastUpdateDate',
                tooltip: $localize `:@@product.details.savings.account.tooltip.lastUpdateDate:Last date of parameter update for the product`,
            },
        ],
    },
];
const termDepositConfiguration = [
    {
        title: $localize `:@@product.details.term.deposit.label.general.section:General`,
        properties: [
            {
                type: AccountInfoPropertyType.TEXT,
                label: $localize `:@@product.details.term.deposit.label.productTypeName:Account Type`,
                key: 'productTypeName',
            },
            {
                type: AccountInfoPropertyType.ACCOUNT_NUMBER,
                label: $localize `:@@product.details.term.deposit.label.account.number:Account Number`,
                key: 'BBAN',
                numberType: 'bban',
            },
            {
                type: AccountInfoPropertyType.ACCOUNT_NUMBER,
                label: $localize `:@@product.details.term.deposit.label.iban:IBAN`,
                key: 'IBAN',
                numberType: 'iban',
            },
            {
                type: AccountInfoPropertyType.AMOUNT,
                label: $localize `:@@product.details.term.deposit.label.principalAmount:Principal Amount`,
                key: 'principalAmount',
                tooltip: $localize `:@@product.details.term.deposit.tooltip.principalAmount:The amount that was (originally) contracted for the respective product`,
            },
            {
                type: AccountInfoPropertyType.TEXT,
                label: $localize `:@@product.details.term.deposit.label.bankBranchCode:ACH Routing Number`,
                key: 'bankBranchCode',
            },
            {
                type: AccountInfoPropertyType.TEXT,
                label: $localize `:@@product.details.term.deposit.label.bankBranchCode2:FedWire Routing Number`,
                key: 'bankBranchCode2',
            },
            {
                type: AccountInfoPropertyType.TEXT,
                label: $localize `:@@product.details.term.deposit.label.accountHolderNames:Account Owner(s)`,
                key: 'accountHolderNames',
            },
            {
                type: AccountInfoPropertyType.ACCOUNT_STATE,
                label: $localize `:@@product.details.term.deposit.label.accountStatus:Account Status`,
                key: 'state.state',
            },
            {
                type: AccountInfoPropertyType.TEXT,
                label: $localize `:@@product.details.term.deposit.label.financialInstitution.name:Bank Name`,
                key: 'financialInstitution.name',
            },
            {
                type: AccountInfoPropertyType.UPDATE_TIME,
                label: $localize `:@@product.details.term.deposit.label.lastSyncDate:Last sync`,
                key: 'lastSyncDate',
            },
        ],
    },
    {
        title: $localize `:@@product.details.term.deposit.label.interest.details.section:Interest Details`,
        properties: [
            {
                type: AccountInfoPropertyType.PERCENT,
                label: $localize `:@@product.details.term.deposit.label.accountInterestRate:Interest Rate`,
                key: 'accountInterestRate',
                tooltip: $localize `:@@product.details.term.deposit.tooltip.accountInterestRate:The annualized cost of credit or debt-capital computed as the percentage ratio of interest to the principal`,
            },
            {
                type: AccountInfoPropertyType.AMOUNT,
                label: $localize `:@@product.details.term.deposit.label.accruedInterest:Accrued Interest`,
                key: 'accruedInterest',
                tooltip: $localize `:@@product.details.term.deposit.tooltip.accruedInterest:The interest that is earned (credit interest) or due (debit interest) but not settled yet`,
            },
            {
                type: AccountInfoPropertyType.FREQUENCY,
                label: $localize `:@@product.details.term.deposit.label.interestPaymentFrequencyNumber:Interest Payment Frequency`,
                key: 'interestPaymentFrequencyNumber',
                unitKey: 'interestPaymentFrequencyUnit',
                tooltip: $localize `:@@product.details.term.deposit.tooltip.interestPaymentFrequencyNumber:Number of times per year when the accumulated interest is settled to the product on a regular basis`,
            },
            {
                type: AccountInfoPropertyType.RENEWAL_STATUS,
                label: $localize `:@@product.details.term.deposit.label.autoRenewalIndicator:Auto Renewal Indicator`,
                key: 'autoRenewalIndicator',
                tooltip: $localize `:@@product.details.term.deposit.tooltip.autoRenewalIndicator:Indicates whether or not a product is to be continued after maturity automatically`,
            },
        ],
    },
    {
        title: $localize `:@@product.details.term.deposit.label.maturity.details.section:Maturity Details`,
        properties: [
            {
                type: AccountInfoPropertyType.AMOUNT,
                label: $localize `:@@product.details.term.deposit.label.maturityAmount:Maturity Balance`,
                key: 'maturityAmount',
                tooltip: $localize `:@@product.details.term.deposit.tooltip.maturityAmount:Amount payable at the end of a holding period of a product`,
            },
            {
                type: AccountInfoPropertyType.FREQUENCY,
                label: $localize `:@@product.details.term.deposit.label.termNumber:Term`,
                key: 'termNumber',
                unitKey: 'termUnit',
                tooltip: $localize `:@@product.details.term.deposit.tooltip.termNumber:The period of time and/or the interest rate arranged between Bank and customer`,
            },
            {
                type: AccountInfoPropertyType.DATE,
                label: $localize `:@@product.details.term.deposit.label.startDate:Start Date`,
                key: 'startDate',
                tooltip: $localize `:@@product.details.term.deposit.tooltip.startDate:Start Date`,
            },
            {
                type: AccountInfoPropertyType.DATE,
                label: $localize `:@@product.details.term.deposit.label.maturityDate:Maturity Date`,
                key: 'maturityDate',
                tooltip: $localize `:@@product.details.term.deposit.tooltip.maturityDate:End term of a holding period`,
            },
        ],
    },
    {
        title: $localize `:@@product.details.term.deposit.label.other.section:Other`,
        properties: [
            {
                type: AccountInfoPropertyType.DATE,
                label: $localize `:@@product.details.term.deposit.label.accountOpeningDate:Account Opening Date`,
                key: 'accountOpeningDate',
                tooltip: $localize `:@@product.details.term.deposit.tooltip.accountOpeningDate:Account Opening Date`,
            },
            {
                type: AccountInfoPropertyType.DATE,
                label: $localize `:@@product.details.term.deposit.label.lastUpdateDate:Last Updated Date`,
                key: 'lastUpdateDate',
                tooltip: $localize `:@@product.details.term.deposit.tooltip.lastUpdateDate:Last date of parameter update for the product`,
            },
        ],
    },
];
/**
 * Default configuration for account info
 */
const defaultAccountInfoConfiguration = {
    default: defaultConfiguration,
    [ProductKindUri.CREDIT_CARD]: creditCardConfiguration,
    [ProductKindUri.CURRENT_ACCOUNT]: currentAccountConfiguration,
    [ProductKindUri.DEBIT_CARD]: debitCardConfiguration,
    [ProductKindUri.INVESTMENT_ACCOUNT]: investmentAccountConfiguration,
    [ProductKindUri.LOAN]: loanConfiguration,
    [ProductKindUri.SAVINGS_ACCOUNT]: savingsAccountConfiguration,
    [ProductKindUri.TERM_DEPOSIT]: termDepositConfiguration,
};

// eslint-disable-next-line
const AccountsTransactionsJourneyConfigurationToken = new InjectionToken('AccountsTransactionsJourneyConfiguration injection token');
const configDefaults = {
    apiKey: '',
    itemsPerPage: 10,
    transactionsMaxPages: 3,
    paginationType: 'load-more',
    pendingOnTop: false,
    transactionsFilterParameters: '',
    transactionsSortOptions: 'bookingDate DESC',
    showControls: true,
    showChangeCategory: true,
    showCheckImages: false,
    getOrPostEndpoints: EndpointType.GET_REQUEST,
    enableDisputeAndInquiry: true,
    disputeEligibilityDays: 120,
    disputeTransactionTypes: 'Credit/Debit Card',
    disputeByBillingStatus: true,
    disputeTopicId: '',
    inquireTopicId: '',
    availableFiltersConfig: {
        'Current Account': [
            AvailableFilterEnum.Date,
            AvailableFilterEnum.CreditDebitIndicator,
            AvailableFilterEnum.Amount,
            AvailableFilterEnum.Types,
            AvailableFilterEnum.BillingStatus,
            AvailableFilterEnum.CheckSerialNumber,
        ],
        'Savings Account': [
            AvailableFilterEnum.Date,
            AvailableFilterEnum.CreditDebitIndicator,
            AvailableFilterEnum.Amount,
            AvailableFilterEnum.Types,
            AvailableFilterEnum.BillingStatus,
            AvailableFilterEnum.CheckSerialNumber,
        ],
        'Credit Card': [
            AvailableFilterEnum.Date,
            AvailableFilterEnum.CreditDebitIndicator,
            AvailableFilterEnum.Amount,
            AvailableFilterEnum.Types,
            AvailableFilterEnum.BillingStatus,
        ],
        Loan: [AvailableFilterEnum.Date, AvailableFilterEnum.CreditDebitIndicator, AvailableFilterEnum.Amount],
        'Term Deposit': [AvailableFilterEnum.Date, AvailableFilterEnum.CreditDebitIndicator, AvailableFilterEnum.Amount],
        'Debit Card': [AvailableFilterEnum.Date, AvailableFilterEnum.CreditDebitIndicator, AvailableFilterEnum.Amount],
        'Investment Account': [
            AvailableFilterEnum.Date,
            AvailableFilterEnum.CreditDebitIndicator,
            AvailableFilterEnum.Amount,
        ],
    },
    showAccountIcons: true,
    enableManageAccounts: true,
    enableTransferButton: true,
    productKindsWithGraphicalRepresentation: ProductKindUri.CREDIT_CARD,
    productKindsWithExternalDetailsPage: [],
    creditLimitViewMode: 'emptied',
    accountAliasDisplayLevel: AccountAliasDisplayingLevel.USER,
    accountInfoProperties: defaultAccountInfoConfiguration,
    arrangementViewsName: undefined,
};
class AccountsTransactionsJourneyService {
    constructor(config, itemModel) {
        this.itemModel = itemModel;
        config = config || {};
        this._config = Object.assign(Object.assign({}, configDefaults), config);
        // update the API key from ItemModel if it was not provided from a static config
        if (this.itemModel && (config.apiKey === undefined || config.showCheckImages === undefined)) {
            combineLatest([
                this.itemModel.property('apiKey', this._config.apiKey),
                this.itemModel.property('showCheckImages', this._config.showCheckImages),
            ])
                .subscribe({
                next: (values) => {
                    if (config.apiKey === undefined) {
                        this._config.apiKey = values[0];
                    }
                    if (config.showCheckImages === undefined) {
                        this._config.showCheckImages = !!values[1];
                    }
                },
            })
                .unsubscribe();
        }
    }
    get defaults() {
        return configDefaults;
    }
    get apiKey() {
        return this._config.apiKey;
    }
    get itemsPerPage() {
        return this._config.itemsPerPage;
    }
    get transactionsMaxPages() {
        return this._config.transactionsMaxPages;
    }
    get paginationType() {
        return this._config.paginationType;
    }
    get pendingOnTop() {
        return this._config.pendingOnTop;
    }
    get transactionsFilterParameters() {
        return this._config.transactionsFilterParameters;
    }
    get transactionsSortOptions() {
        return this._config.transactionsSortOptions;
    }
    get showControls() {
        return this._config.showControls;
    }
    get showChangeCategory() {
        return this._config.showChangeCategory;
    }
    get showCheckImages() {
        return this._config.showCheckImages;
    }
    get getOrPostEndpoints() {
        return this._config.getOrPostEndpoints;
    }
    get enableDisputeAndInquiry() {
        return this._config.enableDisputeAndInquiry;
    }
    get disputeEligibilityDays() {
        return this._config.disputeEligibilityDays;
    }
    get disputeTransactionTypes() {
        return this._config.disputeTransactionTypes;
    }
    get disputeByBillingStatus() {
        return this._config.disputeByBillingStatus;
    }
    get disputeTopicId() {
        return this._config.disputeTopicId;
    }
    get inquireTopicId() {
        return this._config.inquireTopicId;
    }
    get availableFiltersConfig() {
        return this._config.availableFiltersConfig;
    }
    get enableManageAccounts() {
        return this._config.enableManageAccounts;
    }
    get showAccountIcons() {
        return this._config.showAccountIcons;
    }
    get enableTransferButton() {
        return this._config.enableTransferButton;
    }
    get productKindsWithGraphicalRepresentation() {
        return this._config.productKindsWithGraphicalRepresentation;
    }
    get productKindsWithExternalDetailsPage() {
        return this._config.productKindsWithExternalDetailsPage;
    }
    get creditLimitViewMode() {
        return this._config.creditLimitViewMode;
    }
    get accountAliasDisplayLevel() {
        return this._config.accountAliasDisplayLevel;
    }
    /**
     * Account info properties configuration
     */
    get accountInfoProperties() {
        return this._config.accountInfoProperties;
    }
    get arrangementViewsName() {
        return this._config.arrangementViewsName;
    }
}
/** @nocollapse */ AccountsTransactionsJourneyService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountsTransactionsJourneyService, deps: [{ token: AccountsTransactionsJourneyConfigurationToken, optional: true }, { token: i1.ItemModel, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ AccountsTransactionsJourneyService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountsTransactionsJourneyService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountsTransactionsJourneyService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [AccountsTransactionsJourneyConfigurationToken]
                }] }, { type: i1.ItemModel, decorators: [{
                    type: Optional
                }] }]; } });

class AccountsTransactionsJourneyComponent {
}
/** @nocollapse */ AccountsTransactionsJourneyComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountsTransactionsJourneyComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ AccountsTransactionsJourneyComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AccountsTransactionsJourneyComponent, selector: "bb-accounts-transactions-journey", providers: [AccountsTransactionsJourneyService], ngImport: i0, template: '<router-outlet></router-outlet>', isInline: true, directives: [{ type: i2.RouterOutlet, selector: "router-outlet", outputs: ["activate", "deactivate"], exportAs: ["outlet"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountsTransactionsJourneyComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-accounts-transactions-journey',
                    template: '<router-outlet></router-outlet>',
                    providers: [AccountsTransactionsJourneyService],
                }]
        }] });

/**
 * Accounts communication service API
 */
class AccountsCommunicationService {
}

class AccountsListBaseComponent {
    /**
     * @internal
     * @param config
     * @param router
     * @param route
     * @param accountsCommunicationService
     */
    constructor(
    /**
     * Journey configuration
     */
    config, router, route, accountsCommunicationService) {
        this.config = config;
        this.router = router;
        this.route = route;
        this.accountsCommunicationService = accountsCommunicationService;
        /**
         * Label for accounts list title
         */
        this.myAccounts = $localize `:My accounts heading|my accounts heading@@accounts-transactions-journey.accounts-list.heading.myAccounts:My Accounts`;
        /**
         * Label for manage accounts navigation button
         */
        this.manageAccounts = $localize `:Manage accounts button title|manage accounts button title@@accounts-transactions-journey.accounts-list.buttonTitle.manageAccounts:Manage Accounts`;
    }
    /**
     * Navigates to selected product details
     *
     * @param product
     */
    onProductSelect(product) {
        const id = product.id;
        const kind = this.getProductKind(product);
        if (this.accountsCommunicationService && this.productKindsWithExternalDetailsPage.includes(kind)) {
            this.accountsCommunicationService.navigateToExternalAccountDetails({
                id,
                kind,
            });
        }
        else {
            this.navigateToAccountDetails(id);
        }
    }
    /**
     * Navigates to account details by id
     *
     * @param id
     */
    onAccountSelect(id) {
        this.navigateToAccountDetails(id);
    }
    /**
     * Navigates to account management
     */
    navigateToAccountManagement() {
        this.router.navigate(['../manage'], { relativeTo: this.route });
    }
    navigateToAccountDetails(selectedAccount) {
        this.router.navigate(['../transactions', { selectedAccount }], {
            relativeTo: this.route,
        });
    }
    get productKindsWithExternalDetailsPage() {
        return Array.isArray(this.config.productKindsWithExternalDetailsPage)
            ? this.config.productKindsWithExternalDetailsPage
            : [this.config.productKindsWithExternalDetailsPage];
    }
    getProductKind(product) {
        switch (product.kind) {
            case 'currentAccounts':
                return ProductKindUri.CURRENT_ACCOUNT;
            case 'savingsAccounts':
                return ProductKindUri.SAVINGS_ACCOUNT;
            case 'termDeposits':
                return ProductKindUri.TERM_DEPOSIT;
            case 'loans':
                return ProductKindUri.LOAN;
            case 'creditCards':
                return ProductKindUri.CREDIT_CARD;
            case 'debitCards':
                return ProductKindUri.DEBIT_CARD;
            case 'investmentAccounts':
                return ProductKindUri.INVESTMENT_ACCOUNT;
            default:
                return product.kind;
        }
    }
}
/** @nocollapse */ AccountsListBaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountsListBaseComponent, deps: [{ token: AccountsTransactionsJourneyService }, { token: i2.Router }, { token: i2.ActivatedRoute }, { token: AccountsCommunicationService, optional: true }], target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ AccountsListBaseComponent.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: AccountsListBaseComponent, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountsListBaseComponent, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: AccountsTransactionsJourneyService }, { type: i2.Router }, { type: i2.ActivatedRoute }, { type: AccountsCommunicationService, decorators: [{
                    type: Optional
                }] }]; } });

class AccountsListComponent extends AccountsListBaseComponent {
}
/** @nocollapse */ AccountsListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountsListComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ AccountsListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AccountsListComponent, selector: "bb-accounts-list", usesInheritance: true, ngImport: i0, template: "<ng-container *ngIf=\"config.enableManageAccounts; else titleOnly\">\n  <div class=\"bb-heading-widget heading-widget px-0 flex-row align-items-center\">\n    <bb-header-ui headingType=\"h1\" headingClasses=\"bb-heading-widget__heading\" [heading]=\"myAccounts\"></bb-header-ui>\n    <button\n      (click)=\"navigateToAccountManagement()\"\n      class=\"bb-heading-widget__button btn btn-link w-auto bb-button bb-button--xs-hide-text m-0\"\n    >\n      <i aria-hidden=\"true\" class=\"bb-icon bb-icon-settings\"></i>\n      <span>{{ manageAccounts }}</span>\n    </button>\n  </div>\n</ng-container>\n\n<ng-template #titleOnly>\n  <div class=\"bb-heading-widget heading-widget\">\n    <bb-header-ui headingType=\"h1\" headingClasses=\"bb-heading-widget__heading\" [heading]=\"myAccounts\"></bb-header-ui>\n  </div>\n</ng-template>\n\n<bb-product-summary-list-widget\n  [showIcons]=\"config.showAccountIcons\"\n  (selectProduct)=\"onProductSelect($event)\"\n></bb-product-summary-list-widget>\n", components: [{ type: i1$1.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i2$1.ProductSummaryListWidgetComponent, selector: "bb-product-summary-list-widget" }], directives: [{ type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountsListComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-accounts-list',
                    templateUrl: 'accounts-list.component.html',
                }]
        }] });

class TransactionsHelperService {
    constructor() {
        this.transactionIdSubject = new BehaviorSubject('');
        this.transactionsSubject = new BehaviorSubject(undefined);
        this.onCloseDetailSubject = new Subject();
        this.currentTransaction = this.transactionIdSubject.pipe(mergeMap((id) => this.transactionsSubject.pipe(map((transaction) => transaction === null || transaction === void 0 ? void 0 : transaction.find((x) => id === x.id)))));
        this.onCloseDetail = this.onCloseDetailSubject.asObservable();
    }
    setCloseDetail() {
        this.onCloseDetailSubject.next(true);
    }
    setTransactions(transactions) {
        this.transactionsSubject.next(transactions);
    }
    setTransactionId(transactionId) {
        this.transactionIdSubject.next(transactionId);
    }
}
/** @nocollapse */ TransactionsHelperService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsHelperService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ TransactionsHelperService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsHelperService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsHelperService, decorators: [{
            type: Injectable
        }] });

class TransactionsListComponent {
    constructor(config, router, route, shared) {
        this.config = config;
        this.router = router;
        this.route = route;
        this.shared = shared;
        this.shared.onCloseDetail.subscribe((event) => {
            if (event) {
                this.router.navigate(['../list'], { relativeTo: this.route });
            }
        });
    }
    getTransaction(transaction) {
        this.shared.setTransactionId(transaction.id || '');
        this.router.navigate(['./detail', { transactionId: transaction.id }], {
            relativeTo: this.route,
        });
    }
    transactionsLoaded(transactionsList) {
        if (transactionsList) {
            this.shared.setTransactions(transactionsList.items);
        }
    }
    ngOnInit() {
        if (this.route.snapshot.children[0] && this.route.snapshot.children[0].params['transactionId']) {
            this.shared.setTransactionId(this.route.snapshot.children[0].params['transactionId']);
        }
    }
}
/** @nocollapse */ TransactionsListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsListComponent, deps: [{ token: AccountsTransactionsJourneyService }, { token: i2.Router }, { token: i2.ActivatedRoute }, { token: TransactionsHelperService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ TransactionsListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TransactionsListComponent, selector: "bb-transactions-list-view", ngImport: i0, template: `
    <bb-transactions-list-widget
      [googleAPIKey]="config.apiKey"
      [pageSize]="config.itemsPerPage"
      [maxNavPages]="config.transactionsMaxPages"
      [paginationType]="config.paginationType"
      [showPendingTransactionsOnTop]="config.pendingOnTop"
      [initialFilterOptions]="config.transactionsFilterParameters"
      [initialSortOptions]="config.transactionsSortOptions"
      [showControls]="true"
      [showChangeCategory]="true"
      [showCheckImage]="config.showCheckImages"
      [getOrPostEndpoints]="config.getOrPostEndpoints"
      [enableDisputeAndInquiry]="config.enableDisputeAndInquiry"
      [disputeEligibilityDays]="config.disputeEligibilityDays"
      [disputeTransactionTypes]="config.disputeTransactionTypes"
      [disputeByBillingStatus]="config.disputeByBillingStatus"
      [inquireTopicId]="config.inquireTopicId"
      [disputeTopicId]="config.disputeTopicId"
      [availableFiltersConfig]="config.availableFiltersConfig"
      (transactionSelected)="getTransaction($event)"
      (transactionsLoaded)="transactionsLoaded($event)"
    ></bb-transactions-list-widget>
    <router-outlet></router-outlet>
  `, isInline: true, components: [{ type: i4.TransactionsListWidgetComponent, selector: "bb-transactions-list-widget" }], directives: [{ type: i2.RouterOutlet, selector: "router-outlet", outputs: ["activate", "deactivate"], exportAs: ["outlet"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionsListComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-transactions-list-view',
                    template: `
    <bb-transactions-list-widget
      [googleAPIKey]="config.apiKey"
      [pageSize]="config.itemsPerPage"
      [maxNavPages]="config.transactionsMaxPages"
      [paginationType]="config.paginationType"
      [showPendingTransactionsOnTop]="config.pendingOnTop"
      [initialFilterOptions]="config.transactionsFilterParameters"
      [initialSortOptions]="config.transactionsSortOptions"
      [showControls]="true"
      [showChangeCategory]="true"
      [showCheckImage]="config.showCheckImages"
      [getOrPostEndpoints]="config.getOrPostEndpoints"
      [enableDisputeAndInquiry]="config.enableDisputeAndInquiry"
      [disputeEligibilityDays]="config.disputeEligibilityDays"
      [disputeTransactionTypes]="config.disputeTransactionTypes"
      [disputeByBillingStatus]="config.disputeByBillingStatus"
      [inquireTopicId]="config.inquireTopicId"
      [disputeTopicId]="config.disputeTopicId"
      [availableFiltersConfig]="config.availableFiltersConfig"
      (transactionSelected)="getTransaction($event)"
      (transactionsLoaded)="transactionsLoaded($event)"
    ></bb-transactions-list-widget>
    <router-outlet></router-outlet>
  `,
                }]
        }], ctorParameters: function () { return [{ type: AccountsTransactionsJourneyService }, { type: i2.Router }, { type: i2.ActivatedRoute }, { type: TransactionsHelperService }]; } });

/**
 * Quick actions communication API
 */
class AccountsPaymentsCommunication {
}

/**
 * An operator that switches to another stream, but emits data from original stream before switching
 * - subscribes to "source" stream,
 * - emits data, when "source" stream is resolved,
 * - then creates a subscription to a "mapSource" using the previously published data as an input,
 * - when "mapSource" is resolved the operator publishes an event with "mapSource" data.
 */
const publishSwitch = (mapSource) => (source) => new Observable((subscriber) => {
    const subscriptions = [];
    subscriptions.push(source.subscribe((sourceData) => {
        subscriber.next(sourceData);
        if (sourceData) {
            subscriptions.push(mapSource(sourceData).subscribe(subscriber));
        }
    }, subscriber.error));
    return () => subscriptions.forEach((subscription) => subscription.unsubscribe());
});

class AccountsDetailsTabComponent {
    constructor(accountAliasDisplayingLevel, config, accountsPaymentsCommunication, route, router, accountsService, externalInfoService) {
        this.accountAliasDisplayingLevel = accountAliasDisplayingLevel;
        this.config = config;
        this.accountsPaymentsCommunication = accountsPaymentsCommunication;
        this.route = route;
        this.router = router;
        this.accountsService = accountsService;
        this.externalInfoService = externalInfoService;
        /**
         * Arrangement item to be displayed
         */
        this.accountArrangementItem$ = this.accountsService
            .getAccountById(this.getSelectedAccount())
            .pipe(publishSwitch((source) => this.externalInfoService.getProductsWithExternalInfo(source)));
        /**
         * Returns `true` if `AccountsPaymentsCommunication` was provided
         */
        this.isCommunicationProvided = false;
        const { routeConfig } = this.route.snapshot;
        this.tabs = (routeConfig === null || routeConfig === void 0 ? void 0 : routeConfig.children) ? this.initializeTabs(routeConfig) : [];
        this.accountAliasDisplayingLevel = accountAliasDisplayingLevel || config.accountAliasDisplayLevel;
        this.isCommunicationProvided = !!accountsPaymentsCommunication;
    }
    /**
     * Specifies whether `repay` action can be initiated for provided AccountArrangementItem
     *
     * @param accountArrangementItem
     */
    canInitiateRepay(accountArrangementItem) {
        return this.isQuickActionsAllowed(accountArrangementItem) && accountArrangementItem.creditAccount === true;
    }
    /**
     * Specifies whether `cash advance` action can be initiated for provided AccountArrangementItem
     *
     * @param accountArrangementItem
     */
    canInitiateCashInAdvance(accountArrangementItem) {
        return this.isQuickActionsAllowed(accountArrangementItem) && accountArrangementItem.debitAccount === true;
    }
    /**
     * Event handler for the `repayInitiated` event of `bb-account-graphical-header`
     * Initiates the event by running the corresponding method from communication protocol
     *
     * @param arrangementId
     */
    onRepayInitiated(arrangementId) {
        if (arrangementId && this.accountsPaymentsCommunication) {
            this.accountsPaymentsCommunication.repayEvent(arrangementId);
        }
    }
    /**
     * Event handler for the `cashAdvanceInitiated` event of `bb-account-graphical-header`
     * Initiates the event by running the corresponding method from communication protocol
     *
     * @param arrangementId
     */
    onCashAdvanceInitiated(arrangementId) {
        if (arrangementId && this.accountsPaymentsCommunication) {
            this.accountsPaymentsCommunication.cashAdvanceEvent(arrangementId);
        }
    }
    /**
     * Navigates back to `My Accounts`
     */
    onNavigateBack() {
        this.router.navigate(['..'], { relativeTo: this.route });
    }
    isQuickActionsAllowed(accountArrangementItem) {
        return this.isCommunicationProvided && !hasExternalInfo(accountArrangementItem);
    }
    initializeTabs({ children = [] }) {
        return children
            .filter((routeItem) => routeItem.path && routeItem.data)
            .map((routeItem, index) => {
            var _a;
            return ({
                title: ((_a = routeItem.data) === null || _a === void 0 ? void 0 : _a.title) || `Tab${index + 1}`,
                route: routeItem.path || `${index + 1}`,
            });
        });
    }
    /**
     * Returns selected account from snapshot params of activatedRoute
     *
     * @private
     */
    getSelectedAccount() {
        return this.route.snapshot.params.selectedAccount;
    }
}
/** @nocollapse */ AccountsDetailsTabComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountsDetailsTabComponent, deps: [{ token: ACCOUNT_ALIAS_DISPLAYING_LEVEL, optional: true }, { token: AccountsTransactionsJourneyService }, { token: AccountsPaymentsCommunication, optional: true }, { token: i2.ActivatedRoute }, { token: i2.Router }, { token: i4$1.ProductSummaryAccountsService }, { token: i4$1.ProductsExternalInfoService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ AccountsDetailsTabComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AccountsDetailsTabComponent, selector: "bb-accounts-details-tab-container", providers: [ProductSummaryAccountsService, ProductsExternalInfoService], ngImport: i0, template: "<div class=\"pt-5 bb-block bb-block--xl\">\n  <button\n    bbButton\n    data-role=\"account-details-tab__back-navigation-button\"\n    buttonSize=\"md\"\n    color=\"link-text\"\n    class=\"bb-stack justify-content-start bb-stack--density-sm\"\n    (click)=\"onNavigateBack()\"\n  >\n    <bb-icon-ui size=\"md\" name=\"arrow-back\" class=\"bb-stack__item\"></bb-icon-ui>\n    <span\n      class=\"bb-stack__item\"\n      i18n=\"Back to my accounts|Navigation button@@accounts-details-tab-header-back-navigation-button\"\n    >\n      Back to my accounts\n    </span>\n  </button>\n</div>\n\n<ng-container *ngIf=\"accountArrangementItem$ | async as accountArrangementItem\">\n  <div\n    class=\"bb-card bb-card--lg\"\n    *ngIf=\"\n      accountArrangementItem?.product?.productKind | bbIsProductKind: config.productKindsWithGraphicalRepresentation;\n      else accountHeader\n    \"\n  >\n    <div class=\"bb-card__body\">\n      <bb-account-graphical-header\n        data-role=\"accounts-details-tab__account-graphical-header\"\n        [product]=\"accountArrangementItem\"\n        [canEditAlias]=\"false\"\n        [useShortCurrency]=\"true\"\n        [creditLimitViewMode]=\"config.creditLimitViewMode\"\n        [canRepay]=\"canInitiateRepay(accountArrangementItem)\"\n        [canCashInAdvance]=\"canInitiateCashInAdvance(accountArrangementItem)\"\n        [creditCardBackgroundType]=\"'darkred-card'\"\n        [aliasLevel]=\"accountAliasDisplayingLevel\"\n        [isLogoVisible]=\"false\"\n        (repayInitiated)=\"onRepayInitiated($event)\"\n        (cashAdvanceInitiated)=\"onCashAdvanceInitiated($event)\"\n      ></bb-account-graphical-header>\n    </div>\n  </div>\n  <ng-template #accountHeader>\n    <bb-account-header\n      data-role=\"accounts-details-tab__account-header\"\n      [product]=\"accountArrangementItem\"\n      [isBalanceTypeVisible]=\"false\"\n      [mapCurrency]=\"true\"\n      [aliasLevel]=\"accountAliasDisplayingLevel\"\n      [canEditAlias]=\"false\"\n      [isLogoVisible]=\"config.showAccountIcons\"\n    ></bb-account-header>\n  </ng-template>\n</ng-container>\n\n<div class=\"d-block\">\n  <div class=\"d-block mx-4 pt-5\">\n    <div class=\"bb-tab-container__tabs nav nav-tabs\">\n      <a *ngFor=\"let tab of tabs\" class=\"nav-link\" role=\"tab\" [routerLink]=\"[tab.route]\" routerLinkActive=\"active\">\n        <span class=\"bb-stack__item bb-stack__item--spacing-xs\">{{ tab?.title }}</span>\n      </a>\n    </div>\n  </div>\n\n  <div class=\"bb-tab-container__content tab-content\" role=\"tabpanel\">\n    <router-outlet></router-outlet>\n  </div>\n</div>\n", components: [{ type: i5.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i6.AccountGraphicalHeaderComponent, selector: "bb-account-graphical-header", inputs: ["product", "aliasLevel", "canEditAlias", "useShortCurrency", "creditLimitViewMode", "canRepay", "canCashInAdvance", "creditCardBackgroundType", "isLogoVisible"], outputs: ["aliasUpdated", "repayInitiated", "cashAdvanceInitiated"] }, { type: i6.AccountHeaderComponent, selector: "bb-account-header", inputs: ["product", "canEditAlias", "aliasLevel", "showBalance", "isBalanceTypeVisible", "isLogoVisible", "mapCurrency"], outputs: ["aliasUpdated"] }], directives: [{ type: i7.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i8.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }, { type: i2.RouterLinkActive, selector: "[routerLinkActive]", inputs: ["routerLinkActiveOptions", "routerLinkActive"], exportAs: ["routerLinkActive"] }, { type: i2.RouterOutlet, selector: "router-outlet", outputs: ["activate", "deactivate"], exportAs: ["outlet"] }], pipes: { "async": i8.AsyncPipe, "bbIsProductKind": i4$1.IsProductKindPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountsDetailsTabComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-accounts-details-tab-container',
                    templateUrl: './accounts-details-tab.component.html',
                    providers: [ProductSummaryAccountsService, ProductsExternalInfoService],
                }]
        }], ctorParameters: function () { return [{ type: i4$1.AccountAliasDisplayingLevel, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [ACCOUNT_ALIAS_DISPLAYING_LEVEL]
                }] }, { type: AccountsTransactionsJourneyService }, { type: AccountsPaymentsCommunication, decorators: [{
                    type: Optional
                }] }, { type: i2.ActivatedRoute }, { type: i2.Router }, { type: i4$1.ProductSummaryAccountsService }, { type: i4$1.ProductsExternalInfoService }]; } });

/**
 * A widget for displaying account details
 *
 * @usageNotes
 *
 * ### Display details of an account
 *
 * ```html
 * <bb-accounts-details></bb-accounts-details>
 * ```
 */
class AccountsDetailsComponent {
    /**
     * @constructor
     * @param config
     */
    constructor(config) {
        this.config = config;
    }
}
/** @nocollapse */ AccountsDetailsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountsDetailsComponent, deps: [{ token: AccountsTransactionsJourneyService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ AccountsDetailsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AccountsDetailsComponent, selector: "bb-accounts-details", providers: [AccountService, ProductSummaryAccountsService], ngImport: i0, template: ` <bb-product-summary-details></bb-product-summary-details> `, isInline: true, components: [{ type: i2$2.ProductSummaryDetailsComponent, selector: "bb-product-summary-details" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountsDetailsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-accounts-details',
                    template: ` <bb-product-summary-details></bb-product-summary-details> `,
                    providers: [AccountService, ProductSummaryAccountsService],
                }]
        }], ctorParameters: function () { return [{ type: AccountsTransactionsJourneyService }]; } });

class AccountsManageComponent {
    constructor(router, route, config) {
        this.router = router;
        this.route = route;
        this.config = config;
        this.manageMyAccounts = $localize `:Manage my accounts heading|manage my accounts heading@@accounts-transactions-journey.accounts-manage.heading.manageMyAccounts:Manage my Accounts`;
        this.backToAccounts = $localize `:Back to my accounts button title|back to my accounts button title@@accounts-transactions-journey.accounts-manage.buttonTitle.backToAccounts:Back to my Accounts`;
    }
    onNavigateBack() {
        this.router.navigate(['..'], { relativeTo: this.route });
    }
}
/** @nocollapse */ AccountsManageComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountsManageComponent, deps: [{ token: i2.Router }, { token: i2.ActivatedRoute }, { token: AccountsTransactionsJourneyService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ AccountsManageComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AccountsManageComponent, selector: "bb-accounts-manage-list", ngImport: i0, template: `
    <div class="px-0 pt-4 pb-5 flex-column-reverse align-items-start">
      <button (click)="onNavigateBack()" class="bb-heading-widget__button btn btn-link pl-0 ml-0 mb-3">
        <i aria-hidden="true" class="bb-icon bb-icon-arrow-back"></i>
        <span>{{ backToAccounts }}</span>
      </button>
      <bb-header-ui
        headingType="h1"
        headingClasses="bb-heading-widget__heading"
        [heading]="manageMyAccounts"
      ></bb-header-ui>
    </div>

    <bb-product-summary-manage-accounts-widget
      [showIcons]="config.showAccountIcons"
    ></bb-product-summary-manage-accounts-widget>
  `, isInline: true, components: [{ type: i1$1.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i4$2.ProductSummaryManageAccountsWidgetComponent, selector: "bb-product-summary-manage-accounts-widget", inputs: ["businessFunction", "resourceName", "privilege", "size", "showIcons"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountsManageComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-accounts-manage-list',
                    template: `
    <div class="px-0 pt-4 pb-5 flex-column-reverse align-items-start">
      <button (click)="onNavigateBack()" class="bb-heading-widget__button btn btn-link pl-0 ml-0 mb-3">
        <i aria-hidden="true" class="bb-icon bb-icon-arrow-back"></i>
        <span>{{ backToAccounts }}</span>
      </button>
      <bb-header-ui
        headingType="h1"
        headingClasses="bb-heading-widget__heading"
        [heading]="manageMyAccounts"
      ></bb-header-ui>
    </div>

    <bb-product-summary-manage-accounts-widget
      [showIcons]="config.showAccountIcons"
    ></bb-product-summary-manage-accounts-widget>
  `,
                }]
        }], ctorParameters: function () { return [{ type: i2.Router }, { type: i2.ActivatedRoute }, { type: AccountsTransactionsJourneyService }]; } });

class AccountsManageGuardService {
    constructor(config) {
        this.config = config;
    }
    canActivate() {
        var _a;
        return ((_a = this.config) === null || _a === void 0 ? void 0 : _a.enableManageAccounts) === undefined || !!this.config.enableManageAccounts;
    }
}
/** @nocollapse */ AccountsManageGuardService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountsManageGuardService, deps: [{ token: AccountsTransactionsJourneyConfigurationToken, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ AccountsManageGuardService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountsManageGuardService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountsManageGuardService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [AccountsTransactionsJourneyConfigurationToken]
                }] }]; } });

class TransactionDetailsComponent {
    constructor(config, shared, transactionDetailsService, cd) {
        this.config = config;
        this.shared = shared;
        this.transactionDetailsService = transactionDetailsService;
        this.isDetailsOpen = true;
        this.unsubscribeSubject = new Subject();
        this.transactionDetailsService
            .fromCheckImages(of(this.config.showCheckImages))
            .pipe(takeUntil(this.unsubscribeSubject))
            .subscribe((checkImagesList) => {
            this.checkImagesList = checkImagesList;
        });
        this.transactionDetailsService.fromInquiryAndDispute(of(config.enableDisputeAndInquiry), of(config.disputeByBillingStatus), of(config.disputeEligibilityDays), of(config.disputeTransactionTypes.split(',')));
        this.transactionDetailsService.loadingState
            .pipe(takeUntil(this.unsubscribeSubject))
            .subscribe((transactionDetailsLoadingStatus) => {
            this.transactionDetailsLoadingStatus = transactionDetailsLoadingStatus;
            cd.markForCheck();
        });
        this.transactionDetailsService
            .fromGeolocation(of(this.config.apiKey))
            .pipe(takeUntil(this.unsubscribeSubject))
            .subscribe();
        this.inquireAndDisputeTopics = {
            inquire: this.config.inquireTopicId,
            dispute: this.config.disputeTopicId,
        };
    }
    ngOnInit() {
        this.currentTransaction = this.shared.currentTransaction.pipe(tap((transaction) => {
            if (transaction) {
                this.transactionDetailsService.selectTransaction(transaction);
            }
        }));
    }
    ngOnDestroy() {
        this.unsubscribeSubject.next();
        this.unsubscribeSubject.complete();
    }
    closeDialog() {
        this.isDetailsOpen = false;
        this.shared.setCloseDetail();
    }
}
/** @nocollapse */ TransactionDetailsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionDetailsComponent, deps: [{ token: AccountsTransactionsJourneyService }, { token: TransactionsHelperService }, { token: i3.TransactionDetailsService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ TransactionDetailsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TransactionDetailsComponent, selector: "bb-transactions-details", providers: [TransactionDetailsService], ngImport: i0, template: `
    <bb-transaction-details-modal
      *ngIf="currentTransaction | async as transaction"
      [isDetailsOpen]="isDetailsOpen"
      [transaction]="transaction"
      [showChangeCategory]="true"
      [checkImagesList]="checkImagesList"
      [transactionDetailsLoadingStatus]="transactionDetailsLoadingStatus"
      [inquireAndDisputeTopics]="inquireAndDisputeTopics"
      (close)="closeDialog()"
    ></bb-transaction-details-modal>
  `, isInline: true, components: [{ type: i4.TransactionDetailsModalComponent, selector: "bb-transaction-details-modal", inputs: ["isDetailsOpen", "transaction", "showBillingStatus", "showChangeCategory", "checkImagesList", "transactionDetailsLoadingStatus", "inquireAndDisputeTopics"], outputs: ["detailsOpen", "close"] }], directives: [{ type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i8.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionDetailsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-transactions-details',
                    providers: [TransactionDetailsService],
                    template: `
    <bb-transaction-details-modal
      *ngIf="currentTransaction | async as transaction"
      [isDetailsOpen]="isDetailsOpen"
      [transaction]="transaction"
      [showChangeCategory]="true"
      [checkImagesList]="checkImagesList"
      [transactionDetailsLoadingStatus]="transactionDetailsLoadingStatus"
      [inquireAndDisputeTopics]="inquireAndDisputeTopics"
      (close)="closeDialog()"
    ></bb-transaction-details-modal>
  `,
                }]
        }], ctorParameters: function () { return [{ type: AccountsTransactionsJourneyService }, { type: TransactionsHelperService }, { type: i3.TransactionDetailsService }, { type: i0.ChangeDetectorRef }]; } });

class AccountInfoContainerComponent {
    constructor() {
        /**
         * Account info properties configuration
         */
        this.propertiesConfiguration = [];
        /**
         * Currency displaying mode
         */
        this.currencyFormat = 'symbol';
        /**
         * Date format
         */
        this.dateFormat = 'longDate';
        /**
         * Attributes configuration
         */
        this.attributesConfiguration = [];
        /**
         * Mask attribute event emitter
         */
        this.mask = new EventEmitter();
        /**
         * Sanitized properties configuration
         */
        this.propertyGroups = [];
    }
    ngOnChanges(changes) {
        if (changes.account || changes.propertiesConfiguration) {
            this.propertyGroups = this.getDefinedPropertyGroups();
        }
    }
    isPropertyMaskable(property) {
        var _a, _b;
        const attributeName = this.getMaskableAttributeName(property);
        return ((_b = (_a = this.account) === null || _a === void 0 ? void 0 : _a.unmaskableAttributes) !== null && _b !== void 0 ? _b : []).includes(attributeName);
    }
    isPropertyMasked(property) {
        var _a;
        const attribute = this.getMaskableAttribute(property);
        return (_a = attribute.masked) !== null && _a !== void 0 ? _a : true;
    }
    onPropertyMasked(property, isMasked) {
        const attribute = this.getMaskableAttribute(property);
        this.mask.emit(Object.assign(Object.assign({}, attribute), { masked: isMasked }));
    }
    getMaskableAttribute(property) {
        const attributeName = this.getMaskableAttributeName(property);
        return this.attributesConfiguration.find((item) => item.attributeName === attributeName) || { attributeName };
    }
    getMaskableAttributeName(property, defaultType = 'IBAN') {
        return property.type === AccountInfoPropertyType.ACCOUNT_NUMBER
            ? accountNumberToMaskableAttribute(property.numberType)
            : defaultType;
    }
    getDefinedPropertyGroups() {
        return this.propertiesConfiguration
            .map((group) => {
            const properties = group.properties.filter((property) => this.hasValue(property));
            return Object.assign(Object.assign({}, group), { properties });
        })
            .filter((group) => group.properties.length > 0);
    }
    hasValue(property) {
        var _a;
        const value = getValue(this.account, (_a = property.key) !== null && _a !== void 0 ? _a : '');
        return Array.isArray(value) ? value.length > 0 : isDefined(value);
    }
}
/** @nocollapse */ AccountInfoContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountInfoContainerComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ AccountInfoContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AccountInfoContainerComponent, selector: "bb-account-info-container", inputs: { account: "account", propertiesConfiguration: "propertiesConfiguration", currencyFormat: "currencyFormat", dateFormat: "dateFormat", attributesConfiguration: "attributesConfiguration" }, outputs: { mask: "mask" }, usesOnChanges: true, ngImport: i0, template: "<div class=\"bb-list\" [attr.data-role]=\"'account-info-container-' + account?.product?.productKind?.kindUri\">\n  <ng-container *ngFor=\"let group of propertyGroups\">\n    <div class=\"bb-product-summary-details\" [class.card]=\"!group.hideCard\" data-role=\"account-info-container-group\">\n      <div\n        [ngClass]=\"{ 'card-header': !group.hideCard, 'bb-block bb-block--lg': group.hideCard }\"\n        data-role=\"account-info-container-header\"\n      >\n        <h3>{{ group.title }}</h3>\n      </div>\n      <div [class.card-body]=\"!group.hideCard\" data-role=\"account-info-container-body\">\n        <div\n          *ngFor=\"let row of group.properties | bbSplitArray: 2\"\n          class=\"bb-account-details-row bb-stack bb-stack--wrap bb-stack--align-top\"\n        >\n          <div\n            *ngFor=\"let property of row\"\n            class=\"bb-account-details-item bb-stack__item bb-stack__item--fill\"\n            [attr.data-role]=\"'account-info-container-' + property.type\"\n          >\n            <bb-account-info-property\n              [account]=\"account\"\n              [property]=\"property\"\n              [currencyFormat]=\"currencyFormat\"\n              [dateFormat]=\"dateFormat\"\n              [isMaskable]=\"isPropertyMaskable(property)\"\n              [isMasked]=\"isPropertyMasked(property)\"\n              (masked)=\"onPropertyMasked(property, $event)\"\n            ></bb-account-info-property>\n          </div>\n        </div>\n      </div>\n    </div>\n  </ng-container>\n</div>\n", components: [{ type: i1$2.AccountInfoPropertyComponent, selector: "bb-account-info-property", inputs: ["account", "property", "currencyFormat", "dateFormat", "isMaskable", "isMasked"], outputs: ["masked"] }], directives: [{ type: i8.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i8.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], pipes: { "bbSplitArray": i3$1.SplitArrayPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountInfoContainerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-account-info-container',
                    templateUrl: './account-info-container.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { account: [{
                type: Input
            }], propertiesConfiguration: [{
                type: Input
            }], currencyFormat: [{
                type: Input
            }], dateFormat: [{
                type: Input
            }], attributesConfiguration: [{
                type: Input
            }], mask: [{
                type: Output
            }] } });

/**
 * Accounts Transactions journey Info View
 */
class AccountInfoViewComponent {
    /**
     * @internal
     * @param configurationService
     */
    constructor(configurationService) {
        this.configurationService = configurationService;
    }
    /**
     * Returns properties configuration for a given account
     * @param account
     */
    getAccountProperties(account) {
        var _a, _b;
        const configuration = this.configurationService.accountInfoProperties;
        const kindUri = ((_b = (_a = account.product) === null || _a === void 0 ? void 0 : _a.productKind) === null || _b === void 0 ? void 0 : _b.kindUri) || 'default';
        return kindUri in configuration ? configuration[kindUri] : configuration.default;
    }
}
/** @nocollapse */ AccountInfoViewComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountInfoViewComponent, deps: [{ token: AccountsTransactionsJourneyService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ AccountInfoViewComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AccountInfoViewComponent, selector: "bb-account-info", providers: [AccountService, ProductSummaryAccountsService], ngImport: i0, template: "<bb-product-summary-details></bb-product-summary-details>\n\n<ng-template bbProductSummaryDetailsViewCustomizable let-hostRef let-account=\"context\">\n  <ng-container\n    bbProductSummaryDetailsHeaderCustomizable\n    [bbHostRef]=\"hostRef\"\n    [bbTemplateContext]=\"account\"\n  ></ng-container>\n  <ng-container bbProductSummaryDetailsCustomizable [bbHostRef]=\"hostRef\" [bbTemplateContext]=\"account\"></ng-container>\n  <ng-template bbProductSummaryDetailsCreditCardCustomizable>\n    <ng-container *ngTemplateOutlet=\"accountInfo; context: { hostRef: hostRef, account: account }\"></ng-container>\n  </ng-template>\n  <ng-template bbProductSummaryDetailsCurrentAccountCustomizable>\n    <ng-container *ngTemplateOutlet=\"accountInfo; context: { hostRef: hostRef, account: account }\"></ng-container>\n  </ng-template>\n  <ng-template bbProductSummaryDetailsDebitCardCustomizable>\n    <ng-container *ngTemplateOutlet=\"accountInfo; context: { hostRef: hostRef, account: account }\"></ng-container>\n  </ng-template>\n  <ng-template bbProductSummaryDetailsInvestmentAccountCustomizable>\n    <ng-container *ngTemplateOutlet=\"accountInfo; context: { hostRef: hostRef, account: account }\"></ng-container>\n  </ng-template>\n  <ng-template bbProductSummaryDetailsLoanCustomizable>\n    <ng-container *ngTemplateOutlet=\"accountInfo; context: { hostRef: hostRef, account: account }\"></ng-container>\n  </ng-template>\n  <ng-template bbProductSummaryDetailsOtherCustomizable>\n    <ng-container *ngTemplateOutlet=\"accountInfo; context: { hostRef: hostRef, account: account }\"></ng-container>\n  </ng-template>\n  <ng-template bbProductSummaryDetailsSavingsAccountCustomizable>\n    <ng-container *ngTemplateOutlet=\"accountInfo; context: { hostRef: hostRef, account: account }\"></ng-container>\n  </ng-template>\n  <ng-template bbProductSummaryDetailsTermDepositCustomizable>\n    <ng-container *ngTemplateOutlet=\"accountInfo; context: { hostRef: hostRef, account: account }\"></ng-container>\n  </ng-template>\n</ng-template>\n\n<ng-template #accountInfo let-hostRef=\"hostRef\" let-account=\"account\">\n  <bb-account-info-container\n    [account]=\"account\"\n    [propertiesConfiguration]=\"getAccountProperties(account)\"\n    [attributesConfiguration]=\"hostRef.maskableAttributes\"\n    (mask)=\"\n      $event.masked\n        ? hostRef.onMaskAttribute($event.attributeName, account)\n        : hostRef.onUnmaskAttribute($event.attributeName, account)\n    \"\n  ></bb-account-info-container>\n</ng-template>\n", components: [{ type: i2$2.ProductSummaryDetailsComponent, selector: "bb-product-summary-details" }, { type: AccountInfoContainerComponent, selector: "bb-account-info-container", inputs: ["account", "propertiesConfiguration", "currencyFormat", "dateFormat", "attributesConfiguration"], outputs: ["mask"] }], directives: [{ type: i2$2.ProductSummaryDetailsViewCustomizableDirective, selector: "[bbProductSummaryDetailsViewCustomizable]" }, { type: i2$2.ProductSummaryDetailsHeaderCustomizableDirective, selector: "[bbProductSummaryDetailsHeaderCustomizable]" }, { type: i2$2.ProductSummaryDetailsCustomizableDirective, selector: "[bbProductSummaryDetailsCustomizable]" }, { type: i2$2.ProductSummaryDetailsCreditCardCustomizableDirective, selector: "[bbProductSummaryDetailsCreditCardCustomizable]" }, { type: i8.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i2$2.ProductSummaryDetailsCurrentAccountCustomizableDirective, selector: "[bbProductSummaryDetailsCurrentAccountCustomizable]" }, { type: i2$2.ProductSummaryDetailsDebitCardCustomizableDirective, selector: "[bbProductSummaryDetailsDebitCardCustomizable]" }, { type: i2$2.ProductSummaryDetailsInvestmentAccountCustomizableDirective, selector: "[bbProductSummaryDetailsInvestmentAccountCustomizable]" }, { type: i2$2.ProductSummaryDetailsLoanCustomizableDirective, selector: "[bbProductSummaryDetailsLoanCustomizable]" }, { type: i2$2.ProductSummaryDetailsOtherCustomizableDirective, selector: "[bbProductSummaryDetailsOtherCustomizable]" }, { type: i2$2.ProductSummaryDetailsSavingsAccountCustomizableDirective, selector: "[bbProductSummaryDetailsSavingsAccountCustomizable]" }, { type: i2$2.ProductSummaryDetailsTermDepositCustomizableDirective, selector: "[bbProductSummaryDetailsTermDepositCustomizable]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountInfoViewComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-account-info',
                    templateUrl: 'account-info-view.component.html',
                    providers: [AccountService, ProductSummaryAccountsService],
                }]
        }], ctorParameters: function () { return [{ type: AccountsTransactionsJourneyService }]; } });

const components = [AccountInfoViewComponent, AccountInfoContainerComponent];
const modules = [
    ProductSummaryDetailsWidgetModule,
    AccountInfoPropertyModule,
    AmountModule,
    ProductNumberModule,
    ValidationModule,
    FormatPipeModule,
    ArrangementStateIndicatorModule,
    TooltipModule,
    BbDatePipeModule,
    DatePipeModule,
    PaymentCardModule,
    SplitArrayPipeModule,
    ProductSummaryCommon,
];
class AccountInfoViewModule {
}
/** @nocollapse */ AccountInfoViewModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountInfoViewModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ AccountInfoViewModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountInfoViewModule, declarations: [AccountInfoViewComponent, AccountInfoContainerComponent], imports: [CommonModule, ProductSummaryDetailsWidgetModule,
        AccountInfoPropertyModule,
        AmountModule,
        ProductNumberModule,
        ValidationModule,
        FormatPipeModule,
        ArrangementStateIndicatorModule,
        TooltipModule,
        BbDatePipeModule,
        DatePipeModule,
        PaymentCardModule,
        SplitArrayPipeModule,
        ProductSummaryCommon], exports: [ProductSummaryDetailsWidgetModule,
        AccountInfoPropertyModule,
        AmountModule,
        ProductNumberModule,
        ValidationModule,
        FormatPipeModule,
        ArrangementStateIndicatorModule,
        TooltipModule,
        BbDatePipeModule,
        DatePipeModule,
        PaymentCardModule,
        SplitArrayPipeModule,
        ProductSummaryCommon, AccountInfoViewComponent, AccountInfoContainerComponent] });
/** @nocollapse */ AccountInfoViewModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountInfoViewModule, imports: [[CommonModule, ...modules], ProductSummaryDetailsWidgetModule,
        AccountInfoPropertyModule,
        AmountModule,
        ProductNumberModule,
        ValidationModule,
        FormatPipeModule,
        ArrangementStateIndicatorModule,
        TooltipModule,
        BbDatePipeModule,
        DatePipeModule,
        PaymentCardModule,
        SplitArrayPipeModule,
        ProductSummaryCommon] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountInfoViewModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, ...modules],
                    declarations: [...components],
                    exports: [...modules, ...components],
                }]
        }] });

class ArrangementsListComponent extends AccountsListBaseComponent {
    /**
     * @internal
     * @param config
     * @param router
     * @param route
     * @param accountsCommunicationService
     * @param accountsPaymentsCommunication
     */
    constructor(
    /**
     * Journey configuration
     */
    config, router, route, accountsCommunicationService, accountsPaymentsCommunication) {
        super(config, router, route, accountsCommunicationService);
        this.accountsPaymentsCommunication = accountsPaymentsCommunication;
    }
    /**
     * Navigates to transfer payment
     *
     * @param arrangementId
     */
    onPayNowClick(arrangementId) {
        var _a;
        (_a = this.accountsPaymentsCommunication) === null || _a === void 0 ? void 0 : _a.payNowEvent(arrangementId);
    }
}
/** @nocollapse */ ArrangementsListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ArrangementsListComponent, deps: [{ token: AccountsTransactionsJourneyService }, { token: i2.Router }, { token: i2.ActivatedRoute }, { token: AccountsCommunicationService, optional: true }, { token: AccountsPaymentsCommunication, optional: true }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ ArrangementsListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: ArrangementsListComponent, selector: "bb-arrangements-list", usesInheritance: true, ngImport: i0, template: "<ng-container *ngIf=\"config.enableManageAccounts; else titleOnly\">\n  <div class=\"bb-heading-widget heading-widget px-0 flex-row align-items-center\">\n    <bb-header-ui headingType=\"h1\" headingClasses=\"bb-heading-widget__heading\" [heading]=\"myAccounts\"></bb-header-ui>\n    <button\n      (click)=\"navigateToAccountManagement()\"\n      class=\"bb-heading-widget__button btn btn-link w-auto bb-button bb-button--xs-hide-text m-0\"\n    >\n      <i aria-hidden=\"true\" class=\"bb-icon bb-icon-settings\"></i>\n      <span>{{ manageAccounts }}</span>\n    </button>\n  </div>\n</ng-container>\n\n<ng-template #titleOnly>\n  <div class=\"bb-heading-widget heading-widget\">\n    <bb-header-ui headingType=\"h1\" headingClasses=\"bb-heading-widget__heading\" [heading]=\"myAccounts\"></bb-header-ui>\n  </div>\n</ng-template>\n\n<bb-arrangements-list-widget\n  [showIcons]=\"config.showAccountIcons\"\n  (selectProduct)=\"onProductSelect($event)\"\n  (payNowClick)=\"onPayNowClick($event)\"\n  [viewName]=\"config.arrangementViewsName\"\n></bb-arrangements-list-widget>\n", components: [{ type: i1$1.HeaderComponent, selector: "bb-header-ui", inputs: ["headingClasses", "headingType", "heading"] }, { type: i2$1.ArrangementsListWidgetComponent, selector: "bb-arrangements-list-widget", inputs: ["viewName"], outputs: ["payNowClick"] }], directives: [{ type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ArrangementsListComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-arrangements-list',
                    templateUrl: 'arrangements-list.component.html',
                }]
        }], ctorParameters: function () { return [{ type: AccountsTransactionsJourneyService }, { type: i2.Router }, { type: i2.ActivatedRoute }, { type: AccountsCommunicationService, decorators: [{
                    type: Optional
                }] }, { type: AccountsPaymentsCommunication, decorators: [{
                    type: Optional
                }] }]; } });

const defaultRoute = {
    path: '',
    component: AccountsTransactionsJourneyComponent,
    children: [
        {
            path: '',
            redirectTo: 'list',
            pathMatch: 'full',
        },
        {
            path: 'list',
            component: AccountsListComponent,
            data: { title: 'My Accounts' },
        },
        {
            path: 'manage',
            component: AccountsManageComponent,
            canActivate: [AccountsManageGuardService],
        },
        {
            path: 'transactions',
            component: AccountsDetailsTabComponent,
            data: { title: 'Transactions' },
            children: [
                { path: '', redirectTo: 'list', pathMatch: 'full' },
                {
                    path: 'list',
                    component: TransactionsListComponent,
                    data: { title: 'List' },
                    children: [
                        {
                            path: 'detail',
                            component: TransactionDetailsComponent,
                        },
                    ],
                },
                {
                    path: 'details',
                    component: AccountInfoViewComponent,
                    data: { title: 'Details' },
                },
            ],
        },
    ],
};
const views = [
    TransactionsListComponent,
    TransactionDetailsComponent,
    AccountsListComponent,
    ArrangementsListComponent,
    AccountsDetailsTabComponent,
    AccountsDetailsComponent,
    AccountsManageComponent,
];
class AccountsTransactionsJourneyModule {
    static forRoot(data = { route: defaultRoute }) {
        return {
            ngModule: AccountsTransactionsJourneyModule,
            providers: [provideRoutes([data.route])],
        };
    }
}
/** @nocollapse */ AccountsTransactionsJourneyModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountsTransactionsJourneyModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ AccountsTransactionsJourneyModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountsTransactionsJourneyModule, declarations: [AccountsTransactionsJourneyComponent, TransactionsListComponent,
        TransactionDetailsComponent,
        AccountsListComponent,
        ArrangementsListComponent,
        AccountsDetailsTabComponent,
        AccountsDetailsComponent,
        AccountsManageComponent], imports: [CommonModule, i1.BackbaseCoreModule, RouterModule,
        AccountInfoViewModule,
        TransactionsListWidgetModule,
        TransactionsCommonModule,
        ProductSummaryAccountSelectorWidgetModule,
        ProductSummaryManageAccountsWidgetModule,
        ProductSummaryDetailsWidgetModule,
        ProductSummaryListWidgetModule,
        AccountHeaderModule,
        AccountGraphicalHeaderModule,
        ValidationModule, i4.TransactionsListWidgetModule] });
/** @nocollapse */ AccountsTransactionsJourneyModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountsTransactionsJourneyModule, providers: [AccountsManageGuardService, TransactionsHelperService], imports: [[
            CommonModule,
            BackbaseCoreModule.withConfig({
                classMap: {
                    // eslint-disable-next-line
                    AccountsTransactionsJourneyComponent,
                },
            }),
            RouterModule,
            AccountInfoViewModule,
            TransactionsListWidgetModule,
            TransactionsCommonModule,
            ProductSummaryAccountSelectorWidgetModule,
            ProductSummaryManageAccountsWidgetModule,
            ProductSummaryDetailsWidgetModule,
            ProductSummaryListWidgetModule,
            AccountHeaderModule,
            AccountGraphicalHeaderModule,
            ValidationModule,
            TransactionsListWidgetModule.forRoot({
                showDetails: false,
            }),
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountsTransactionsJourneyModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [AccountsTransactionsJourneyComponent, ...views],
                    imports: [
                        CommonModule,
                        BackbaseCoreModule.withConfig({
                            classMap: {
                                // eslint-disable-next-line
                                AccountsTransactionsJourneyComponent,
                            },
                        }),
                        RouterModule,
                        AccountInfoViewModule,
                        TransactionsListWidgetModule,
                        TransactionsCommonModule,
                        ProductSummaryAccountSelectorWidgetModule,
                        ProductSummaryManageAccountsWidgetModule,
                        ProductSummaryDetailsWidgetModule,
                        ProductSummaryListWidgetModule,
                        AccountHeaderModule,
                        AccountGraphicalHeaderModule,
                        ValidationModule,
                        TransactionsListWidgetModule.forRoot({
                            showDetails: false,
                        }),
                    ],
                    providers: [AccountsManageGuardService, TransactionsHelperService],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { AccountInfoContainerComponent, AccountInfoViewComponent, AccountInfoViewModule, AccountsCommunicationService, AccountsDetailsComponent, AccountsDetailsTabComponent, AccountsListBaseComponent, AccountsListComponent, AccountsManageComponent, AccountsManageGuardService, AccountsPaymentsCommunication, AccountsTransactionsJourneyComponent, AccountsTransactionsJourneyConfigurationToken, AccountsTransactionsJourneyModule, AccountsTransactionsJourneyService, ArrangementsListComponent, TransactionDetailsComponent, TransactionsListComponent, defaultAccountInfoConfiguration, publishSwitch };
//# sourceMappingURL=backbase-accounts-transactions-journey-ang.js.map
