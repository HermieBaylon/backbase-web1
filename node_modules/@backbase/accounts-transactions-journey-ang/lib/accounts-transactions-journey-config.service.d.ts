import { InjectionToken } from '@angular/core';
import { ItemModel } from '@backbase/foundation-ang/core';
import { AccountAliasDisplayingLevel, ProductKindUri } from '@backbase/product-summary-common-ang';
import { AvailableFiltersConfig, EndpointType } from '@backbase/transactions-common-ang';
import { CreditLimitViewMode } from '@backbase/product-summary-ui';
import { AccountInfoPropertiesConfiguration } from './views/account-info/model/types';
import * as i0 from "@angular/core";
export interface AccountsTransactionsJourneyConfiguration {
    /**
     * API key for Google Maps
     */
    apiKey: string;
    /**
     * Number of items loaded initialy and with each load-more request
     */
    itemsPerPage: number;
    /**
     * Maximum number of pagination pages in transactions
     */
    transactionsMaxPages: number;
    /**
     * Pagination type for accounts and transactions
     */
    paginationType: 'load-more' | 'pagination' | 'infinite-scroll';
    /**
     * Pending transactions on top and hides billing status filter
     */
    pendingOnTop: boolean;
    /**
     * Options to initialize the filter (format as query parameters)
     */
    transactionsFilterParameters: string;
    /**
     * Options to initialize the sorting (e.g. 'amount ASC' or empty)
     */
    transactionsSortOptions: string;
    /**
     * Show transactions control such as filter and search
     */
    showControls: boolean;
    /**
     * Enable change category in transactions details
     */
    showChangeCategory: boolean;
    /**
     * Display check images in transaction details
     */
    showCheckImages: boolean;
    /**
     * Making GET or POST requests for transactions
     */
    getOrPostEndpoints: EndpointType;
    /**
     * Enable dispute and inquiry report in transactions list
     */
    enableDisputeAndInquiry: boolean;
    /**
     * The transaction is eligible for a dispute based on the eligibility period
     */
    disputeEligibilityDays: number;
    /**
     * Disputable transaction types
     */
    disputeTransactionTypes: string;
    /**
     * The billing status of the transaction is disputable
     */
    disputeByBillingStatus: boolean;
    /**
     * Inquire transaction topic ID
     */
    inquireTopicId: string;
    /**
     * Dispute transaction topic ID
     */
    disputeTopicId: string;
    /**
     * Configure available filters based on product kind product type
     */
    availableFiltersConfig: AvailableFiltersConfig;
    /**
     * Hide/show account type icons
     */
    showAccountIcons: boolean;
    /**
     * Enable/disable manage accounts
     */
    enableManageAccounts: boolean;
    /**
     * Enable `make a transfer` button in the account details tab view
     */
    enableTransferButton: boolean;
    /**
     * Product kinds for which graphical representation should be enabled in account details
     */
    productKindsWithGraphicalRepresentation: ProductKindUri | ProductKindUri[];
    /**
     * Product kinds for which account details should be displayed on an external page
     */
    productKindsWithExternalDetailsPage: string | string[];
    /**
     * Credit limit view mode, 'emptied' or 'filled'
     */
    creditLimitViewMode: CreditLimitViewMode;
    /**
     * Account alias displaying level for accounts
     */
    accountAliasDisplayLevel: AccountAliasDisplayingLevel;
    /**
     * Account info properties configuration
     */
    accountInfoProperties: AccountInfoPropertiesConfiguration;
    /**
     * Arrangements view name
     */
    arrangementViewsName?: string;
}
export declare const AccountsTransactionsJourneyConfigurationToken: InjectionToken<AccountsTransactionsJourneyConfiguration>;
export declare class AccountsTransactionsJourneyService {
    private readonly itemModel;
    private _config;
    constructor(config: Partial<AccountsTransactionsJourneyConfiguration>, itemModel: ItemModel);
    get defaults(): AccountsTransactionsJourneyConfiguration;
    get apiKey(): string;
    get itemsPerPage(): number;
    get transactionsMaxPages(): number;
    get paginationType(): string;
    get pendingOnTop(): boolean;
    get transactionsFilterParameters(): string;
    get transactionsSortOptions(): string;
    get showControls(): boolean;
    get showChangeCategory(): boolean;
    get showCheckImages(): boolean;
    get getOrPostEndpoints(): EndpointType;
    get enableDisputeAndInquiry(): boolean;
    get disputeEligibilityDays(): number;
    get disputeTransactionTypes(): string;
    get disputeByBillingStatus(): boolean;
    get disputeTopicId(): string;
    get inquireTopicId(): string;
    get availableFiltersConfig(): AvailableFiltersConfig;
    get enableManageAccounts(): boolean;
    get showAccountIcons(): boolean;
    get enableTransferButton(): boolean;
    get productKindsWithGraphicalRepresentation(): ProductKindUri | ProductKindUri[];
    get productKindsWithExternalDetailsPage(): string | string[];
    get creditLimitViewMode(): CreditLimitViewMode;
    get accountAliasDisplayLevel(): AccountAliasDisplayingLevel;
    /**
     * Account info properties configuration
     */
    get accountInfoProperties(): AccountInfoPropertiesConfiguration;
    get arrangementViewsName(): string | undefined;
    static ɵfac: i0.ɵɵFactoryDeclaration<AccountsTransactionsJourneyService, [{ optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<AccountsTransactionsJourneyService>;
}
