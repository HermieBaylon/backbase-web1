import { Observable } from 'rxjs';
/**
 * An operator that switches to another stream, but emits data from original stream before switching
 * - subscribes to "source" stream,
 * - emits data, when "source" stream is resolved,
 * - then creates a subscription to a "mapSource" using the previously published data as an input,
 * - when "mapSource" is resolved the operator publishes an event with "mapSource" data.
 */
export declare const publishSwitch: <T>(mapSource: (source: T) => Observable<T>) => (source: Observable<T>) => Observable<T>;
