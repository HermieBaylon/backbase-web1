import { ActivatedRoute, Router } from '@angular/router';
import { Observable } from 'rxjs';
import { AccountsTransactionsJourneyService } from '../../accounts-transactions-journey-config.service';
import { AccountAliasDisplayingLevel, AccountArrangementItem, ProductsExternalInfoService, ProductSummaryAccountsService } from '@backbase/product-summary-common-ang';
import { Tab } from '../../models/types';
import { AccountsPaymentsCommunication } from '../../services/accounts-payments-communication';
import * as i0 from "@angular/core";
export declare class AccountsDetailsTabComponent {
    readonly accountAliasDisplayingLevel: AccountAliasDisplayingLevel;
    readonly config: AccountsTransactionsJourneyService;
    private accountsPaymentsCommunication;
    private readonly route;
    private readonly router;
    private readonly accountsService;
    private readonly externalInfoService;
    /**
     * Collection of Tabs to be rendered according to the journey layout and routing.
     */
    tabs: Tab[];
    /**
     * Arrangement item to be displayed
     */
    accountArrangementItem$: Observable<AccountArrangementItem | undefined>;
    /**
     * Returns `true` if `AccountsPaymentsCommunication` was provided
     */
    isCommunicationProvided: boolean;
    constructor(accountAliasDisplayingLevel: AccountAliasDisplayingLevel, config: AccountsTransactionsJourneyService, accountsPaymentsCommunication: AccountsPaymentsCommunication, route: ActivatedRoute, router: Router, accountsService: ProductSummaryAccountsService, externalInfoService: ProductsExternalInfoService);
    /**
     * Specifies whether `repay` action can be initiated for provided AccountArrangementItem
     *
     * @param accountArrangementItem
     */
    canInitiateRepay(accountArrangementItem: AccountArrangementItem): boolean;
    /**
     * Specifies whether `cash advance` action can be initiated for provided AccountArrangementItem
     *
     * @param accountArrangementItem
     */
    canInitiateCashInAdvance(accountArrangementItem: AccountArrangementItem): boolean;
    /**
     * Event handler for the `repayInitiated` event of `bb-account-graphical-header`
     * Initiates the event by running the corresponding method from communication protocol
     *
     * @param arrangementId
     */
    onRepayInitiated(arrangementId: string | undefined): void;
    /**
     * Event handler for the `cashAdvanceInitiated` event of `bb-account-graphical-header`
     * Initiates the event by running the corresponding method from communication protocol
     *
     * @param arrangementId
     */
    onCashAdvanceInitiated(arrangementId: string | undefined): void;
    /**
     * Navigates back to `My Accounts`
     */
    onNavigateBack(): void;
    private isQuickActionsAllowed;
    private initializeTabs;
    /**
     * Returns selected account from snapshot params of activatedRoute
     *
     * @private
     */
    private getSelectedAccount;
    static ɵfac: i0.ɵɵFactoryDeclaration<AccountsDetailsTabComponent, [{ optional: true; }, null, { optional: true; }, null, null, null, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<AccountsDetailsTabComponent, "bb-accounts-details-tab-container", never, {}, {}, never, never>;
}
