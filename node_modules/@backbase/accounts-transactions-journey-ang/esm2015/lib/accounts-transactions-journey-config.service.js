import { Inject, Injectable, InjectionToken, Optional } from '@angular/core';
import { combineLatest } from 'rxjs';
import { ItemModel } from '@backbase/foundation-ang/core';
import { AccountAliasDisplayingLevel, ProductKindUri } from '@backbase/product-summary-common-ang';
import { AvailableFilterEnum, EndpointType } from '@backbase/transactions-common-ang';
import { defaultAccountInfoConfiguration } from './views/account-info/model/configuration';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/foundation-ang/core";
// eslint-disable-next-line
export const AccountsTransactionsJourneyConfigurationToken = new InjectionToken('AccountsTransactionsJourneyConfiguration injection token');
const configDefaults = {
    apiKey: '',
    itemsPerPage: 10,
    transactionsMaxPages: 3,
    paginationType: 'load-more',
    pendingOnTop: false,
    transactionsFilterParameters: '',
    transactionsSortOptions: 'bookingDate DESC',
    showControls: true,
    showChangeCategory: true,
    showCheckImages: false,
    getOrPostEndpoints: EndpointType.GET_REQUEST,
    enableDisputeAndInquiry: true,
    disputeEligibilityDays: 120,
    disputeTransactionTypes: 'Credit/Debit Card',
    disputeByBillingStatus: true,
    disputeTopicId: '',
    inquireTopicId: '',
    availableFiltersConfig: {
        'Current Account': [
            AvailableFilterEnum.Date,
            AvailableFilterEnum.CreditDebitIndicator,
            AvailableFilterEnum.Amount,
            AvailableFilterEnum.Types,
            AvailableFilterEnum.BillingStatus,
            AvailableFilterEnum.CheckSerialNumber,
        ],
        'Savings Account': [
            AvailableFilterEnum.Date,
            AvailableFilterEnum.CreditDebitIndicator,
            AvailableFilterEnum.Amount,
            AvailableFilterEnum.Types,
            AvailableFilterEnum.BillingStatus,
            AvailableFilterEnum.CheckSerialNumber,
        ],
        'Credit Card': [
            AvailableFilterEnum.Date,
            AvailableFilterEnum.CreditDebitIndicator,
            AvailableFilterEnum.Amount,
            AvailableFilterEnum.Types,
            AvailableFilterEnum.BillingStatus,
        ],
        Loan: [AvailableFilterEnum.Date, AvailableFilterEnum.CreditDebitIndicator, AvailableFilterEnum.Amount],
        'Term Deposit': [AvailableFilterEnum.Date, AvailableFilterEnum.CreditDebitIndicator, AvailableFilterEnum.Amount],
        'Debit Card': [AvailableFilterEnum.Date, AvailableFilterEnum.CreditDebitIndicator, AvailableFilterEnum.Amount],
        'Investment Account': [
            AvailableFilterEnum.Date,
            AvailableFilterEnum.CreditDebitIndicator,
            AvailableFilterEnum.Amount,
        ],
    },
    showAccountIcons: true,
    enableManageAccounts: true,
    enableTransferButton: true,
    productKindsWithGraphicalRepresentation: ProductKindUri.CREDIT_CARD,
    productKindsWithExternalDetailsPage: [],
    creditLimitViewMode: 'emptied',
    accountAliasDisplayLevel: AccountAliasDisplayingLevel.USER,
    accountInfoProperties: defaultAccountInfoConfiguration,
    arrangementViewsName: undefined,
};
export class AccountsTransactionsJourneyService {
    constructor(config, itemModel) {
        this.itemModel = itemModel;
        config = config || {};
        this._config = Object.assign(Object.assign({}, configDefaults), config);
        // update the API key from ItemModel if it was not provided from a static config
        if (this.itemModel && (config.apiKey === undefined || config.showCheckImages === undefined)) {
            combineLatest([
                this.itemModel.property('apiKey', this._config.apiKey),
                this.itemModel.property('showCheckImages', this._config.showCheckImages),
            ])
                .subscribe({
                next: (values) => {
                    if (config.apiKey === undefined) {
                        this._config.apiKey = values[0];
                    }
                    if (config.showCheckImages === undefined) {
                        this._config.showCheckImages = !!values[1];
                    }
                },
            })
                .unsubscribe();
        }
    }
    get defaults() {
        return configDefaults;
    }
    get apiKey() {
        return this._config.apiKey;
    }
    get itemsPerPage() {
        return this._config.itemsPerPage;
    }
    get transactionsMaxPages() {
        return this._config.transactionsMaxPages;
    }
    get paginationType() {
        return this._config.paginationType;
    }
    get pendingOnTop() {
        return this._config.pendingOnTop;
    }
    get transactionsFilterParameters() {
        return this._config.transactionsFilterParameters;
    }
    get transactionsSortOptions() {
        return this._config.transactionsSortOptions;
    }
    get showControls() {
        return this._config.showControls;
    }
    get showChangeCategory() {
        return this._config.showChangeCategory;
    }
    get showCheckImages() {
        return this._config.showCheckImages;
    }
    get getOrPostEndpoints() {
        return this._config.getOrPostEndpoints;
    }
    get enableDisputeAndInquiry() {
        return this._config.enableDisputeAndInquiry;
    }
    get disputeEligibilityDays() {
        return this._config.disputeEligibilityDays;
    }
    get disputeTransactionTypes() {
        return this._config.disputeTransactionTypes;
    }
    get disputeByBillingStatus() {
        return this._config.disputeByBillingStatus;
    }
    get disputeTopicId() {
        return this._config.disputeTopicId;
    }
    get inquireTopicId() {
        return this._config.inquireTopicId;
    }
    get availableFiltersConfig() {
        return this._config.availableFiltersConfig;
    }
    get enableManageAccounts() {
        return this._config.enableManageAccounts;
    }
    get showAccountIcons() {
        return this._config.showAccountIcons;
    }
    get enableTransferButton() {
        return this._config.enableTransferButton;
    }
    get productKindsWithGraphicalRepresentation() {
        return this._config.productKindsWithGraphicalRepresentation;
    }
    get productKindsWithExternalDetailsPage() {
        return this._config.productKindsWithExternalDetailsPage;
    }
    get creditLimitViewMode() {
        return this._config.creditLimitViewMode;
    }
    get accountAliasDisplayLevel() {
        return this._config.accountAliasDisplayLevel;
    }
    /**
     * Account info properties configuration
     */
    get accountInfoProperties() {
        return this._config.accountInfoProperties;
    }
    get arrangementViewsName() {
        return this._config.arrangementViewsName;
    }
}
/** @nocollapse */ AccountsTransactionsJourneyService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountsTransactionsJourneyService, deps: [{ token: AccountsTransactionsJourneyConfigurationToken, optional: true }, { token: i1.ItemModel, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ AccountsTransactionsJourneyService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountsTransactionsJourneyService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountsTransactionsJourneyService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [AccountsTransactionsJourneyConfigurationToken]
                }] }, { type: i1.ItemModel, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=accounts-transactions-journey-config.service.js.map