import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, } from '@angular/core';
import { isDefined } from '@backbase/product-summary-common-ang';
import { getValue } from '@backbase/accounts-transactions-journeys-shared-util-transform-ang';
import { AccountInfoPropertyType, } from '@backbase/accounts-transactions-journeys-shared-ui-account-ang';
import { accountNumberToMaskableAttribute } from '@backbase/accounts-transactions-journeys-shared-util-account-ang';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/accounts-transactions-journeys-shared-ui-account-ang";
import * as i2 from "@angular/common";
import * as i3 from "@backbase/accounts-transactions-journeys-shared-ui-transform-ang";
export class AccountInfoContainerComponent {
    constructor() {
        /**
         * Account info properties configuration
         */
        this.propertiesConfiguration = [];
        /**
         * Currency displaying mode
         */
        this.currencyFormat = 'symbol';
        /**
         * Date format
         */
        this.dateFormat = 'longDate';
        /**
         * Attributes configuration
         */
        this.attributesConfiguration = [];
        /**
         * Mask attribute event emitter
         */
        this.mask = new EventEmitter();
        /**
         * Sanitized properties configuration
         */
        this.propertyGroups = [];
    }
    ngOnChanges(changes) {
        if (changes.account || changes.propertiesConfiguration) {
            this.propertyGroups = this.getDefinedPropertyGroups();
        }
    }
    isPropertyMaskable(property) {
        var _a, _b;
        const attributeName = this.getMaskableAttributeName(property);
        return ((_b = (_a = this.account) === null || _a === void 0 ? void 0 : _a.unmaskableAttributes) !== null && _b !== void 0 ? _b : []).includes(attributeName);
    }
    isPropertyMasked(property) {
        var _a;
        const attribute = this.getMaskableAttribute(property);
        return (_a = attribute.masked) !== null && _a !== void 0 ? _a : true;
    }
    onPropertyMasked(property, isMasked) {
        const attribute = this.getMaskableAttribute(property);
        this.mask.emit(Object.assign(Object.assign({}, attribute), { masked: isMasked }));
    }
    getMaskableAttribute(property) {
        const attributeName = this.getMaskableAttributeName(property);
        return this.attributesConfiguration.find((item) => item.attributeName === attributeName) || { attributeName };
    }
    getMaskableAttributeName(property, defaultType = 'IBAN') {
        return property.type === AccountInfoPropertyType.ACCOUNT_NUMBER
            ? accountNumberToMaskableAttribute(property.numberType)
            : defaultType;
    }
    getDefinedPropertyGroups() {
        return this.propertiesConfiguration
            .map((group) => {
            const properties = group.properties.filter((property) => this.hasValue(property));
            return Object.assign(Object.assign({}, group), { properties });
        })
            .filter((group) => group.properties.length > 0);
    }
    hasValue(property) {
        var _a;
        const value = getValue(this.account, (_a = property.key) !== null && _a !== void 0 ? _a : '');
        return Array.isArray(value) ? value.length > 0 : isDefined(value);
    }
}
/** @nocollapse */ AccountInfoContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountInfoContainerComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ AccountInfoContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AccountInfoContainerComponent, selector: "bb-account-info-container", inputs: { account: "account", propertiesConfiguration: "propertiesConfiguration", currencyFormat: "currencyFormat", dateFormat: "dateFormat", attributesConfiguration: "attributesConfiguration" }, outputs: { mask: "mask" }, usesOnChanges: true, ngImport: i0, template: "<div class=\"bb-list\" [attr.data-role]=\"'account-info-container-' + account?.product?.productKind?.kindUri\">\n  <ng-container *ngFor=\"let group of propertyGroups\">\n    <div class=\"bb-product-summary-details\" [class.card]=\"!group.hideCard\" data-role=\"account-info-container-group\">\n      <div\n        [ngClass]=\"{ 'card-header': !group.hideCard, 'bb-block bb-block--lg': group.hideCard }\"\n        data-role=\"account-info-container-header\"\n      >\n        <h3>{{ group.title }}</h3>\n      </div>\n      <div [class.card-body]=\"!group.hideCard\" data-role=\"account-info-container-body\">\n        <div\n          *ngFor=\"let row of group.properties | bbSplitArray: 2\"\n          class=\"bb-account-details-row bb-stack bb-stack--wrap bb-stack--align-top\"\n        >\n          <div\n            *ngFor=\"let property of row\"\n            class=\"bb-account-details-item bb-stack__item bb-stack__item--fill\"\n            [attr.data-role]=\"'account-info-container-' + property.type\"\n          >\n            <bb-account-info-property\n              [account]=\"account\"\n              [property]=\"property\"\n              [currencyFormat]=\"currencyFormat\"\n              [dateFormat]=\"dateFormat\"\n              [isMaskable]=\"isPropertyMaskable(property)\"\n              [isMasked]=\"isPropertyMasked(property)\"\n              (masked)=\"onPropertyMasked(property, $event)\"\n            ></bb-account-info-property>\n          </div>\n        </div>\n      </div>\n    </div>\n  </ng-container>\n</div>\n", components: [{ type: i1.AccountInfoPropertyComponent, selector: "bb-account-info-property", inputs: ["account", "property", "currencyFormat", "dateFormat", "isMaskable", "isMasked"], outputs: ["masked"] }], directives: [{ type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], pipes: { "bbSplitArray": i3.SplitArrayPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountInfoContainerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-account-info-container',
                    templateUrl: './account-info-container.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { account: [{
                type: Input
            }], propertiesConfiguration: [{
                type: Input
            }], currencyFormat: [{
                type: Input
            }], dateFormat: [{
                type: Input
            }], attributesConfiguration: [{
                type: Input
            }], mask: [{
                type: Output
            }] } });
//# sourceMappingURL=account-info-container.component.js.map