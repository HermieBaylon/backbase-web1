import { ChangeDetectorRef, Component } from '@angular/core';
import { TransactionDetailsService, } from '@backbase/transactions-common-ang';
import { of, Subject } from 'rxjs';
import { takeUntil, tap } from 'rxjs/operators';
import { AccountsTransactionsJourneyService } from '../accounts-transactions-journey-config.service';
import { TransactionsHelperService } from '../transactions-details-helper.service';
import * as i0 from "@angular/core";
import * as i1 from "../accounts-transactions-journey-config.service";
import * as i2 from "../transactions-details-helper.service";
import * as i3 from "@backbase/transactions-common-ang";
import * as i4 from "@backbase/transactions-list-widget-ang";
import * as i5 from "@angular/common";
export class TransactionDetailsComponent {
    constructor(config, shared, transactionDetailsService, cd) {
        this.config = config;
        this.shared = shared;
        this.transactionDetailsService = transactionDetailsService;
        this.isDetailsOpen = true;
        this.unsubscribeSubject = new Subject();
        this.transactionDetailsService
            .fromCheckImages(of(this.config.showCheckImages))
            .pipe(takeUntil(this.unsubscribeSubject))
            .subscribe((checkImagesList) => {
            this.checkImagesList = checkImagesList;
        });
        this.transactionDetailsService.fromInquiryAndDispute(of(config.enableDisputeAndInquiry), of(config.disputeByBillingStatus), of(config.disputeEligibilityDays), of(config.disputeTransactionTypes.split(',')));
        this.transactionDetailsService.loadingState
            .pipe(takeUntil(this.unsubscribeSubject))
            .subscribe((transactionDetailsLoadingStatus) => {
            this.transactionDetailsLoadingStatus = transactionDetailsLoadingStatus;
            cd.markForCheck();
        });
        this.transactionDetailsService
            .fromGeolocation(of(this.config.apiKey))
            .pipe(takeUntil(this.unsubscribeSubject))
            .subscribe();
        this.inquireAndDisputeTopics = {
            inquire: this.config.inquireTopicId,
            dispute: this.config.disputeTopicId,
        };
    }
    ngOnInit() {
        this.currentTransaction = this.shared.currentTransaction.pipe(tap((transaction) => {
            if (transaction) {
                this.transactionDetailsService.selectTransaction(transaction);
            }
        }));
    }
    ngOnDestroy() {
        this.unsubscribeSubject.next();
        this.unsubscribeSubject.complete();
    }
    closeDialog() {
        this.isDetailsOpen = false;
        this.shared.setCloseDetail();
    }
}
/** @nocollapse */ TransactionDetailsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionDetailsComponent, deps: [{ token: i1.AccountsTransactionsJourneyService }, { token: i2.TransactionsHelperService }, { token: i3.TransactionDetailsService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ TransactionDetailsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: TransactionDetailsComponent, selector: "bb-transactions-details", providers: [TransactionDetailsService], ngImport: i0, template: `
    <bb-transaction-details-modal
      *ngIf="currentTransaction | async as transaction"
      [isDetailsOpen]="isDetailsOpen"
      [transaction]="transaction"
      [showChangeCategory]="true"
      [checkImagesList]="checkImagesList"
      [transactionDetailsLoadingStatus]="transactionDetailsLoadingStatus"
      [inquireAndDisputeTopics]="inquireAndDisputeTopics"
      (close)="closeDialog()"
    ></bb-transaction-details-modal>
  `, isInline: true, components: [{ type: i4.TransactionDetailsModalComponent, selector: "bb-transaction-details-modal", inputs: ["isDetailsOpen", "transaction", "showBillingStatus", "showChangeCategory", "checkImagesList", "transactionDetailsLoadingStatus", "inquireAndDisputeTopics"], outputs: ["detailsOpen", "close"] }], directives: [{ type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i5.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: TransactionDetailsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-transactions-details',
                    providers: [TransactionDetailsService],
                    template: `
    <bb-transaction-details-modal
      *ngIf="currentTransaction | async as transaction"
      [isDetailsOpen]="isDetailsOpen"
      [transaction]="transaction"
      [showChangeCategory]="true"
      [checkImagesList]="checkImagesList"
      [transactionDetailsLoadingStatus]="transactionDetailsLoadingStatus"
      [inquireAndDisputeTopics]="inquireAndDisputeTopics"
      (close)="closeDialog()"
    ></bb-transaction-details-modal>
  `,
                }]
        }], ctorParameters: function () { return [{ type: i1.AccountsTransactionsJourneyService }, { type: i2.TransactionsHelperService }, { type: i3.TransactionDetailsService }, { type: i0.ChangeDetectorRef }]; } });
//# sourceMappingURL=transactions-details.component.js.map