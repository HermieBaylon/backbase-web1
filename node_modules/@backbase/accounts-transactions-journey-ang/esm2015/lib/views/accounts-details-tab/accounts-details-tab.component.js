import { Component, Inject, Optional } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { AccountsTransactionsJourneyService } from '../../accounts-transactions-journey-config.service';
import { ACCOUNT_ALIAS_DISPLAYING_LEVEL, AccountAliasDisplayingLevel, hasExternalInfo, ProductsExternalInfoService, ProductSummaryAccountsService, } from '@backbase/product-summary-common-ang';
import { AccountsPaymentsCommunication } from '../../services/accounts-payments-communication';
import { publishSwitch } from '../../utils/operators';
import * as i0 from "@angular/core";
import * as i1 from "../../accounts-transactions-journey-config.service";
import * as i2 from "../../services/accounts-payments-communication";
import * as i3 from "@angular/router";
import * as i4 from "@backbase/product-summary-common-ang";
import * as i5 from "@backbase/ui-ang/icon";
import * as i6 from "@backbase/product-summary-ui";
import * as i7 from "@backbase/ui-ang/button";
import * as i8 from "@angular/common";
export class AccountsDetailsTabComponent {
    constructor(accountAliasDisplayingLevel, config, accountsPaymentsCommunication, route, router, accountsService, externalInfoService) {
        this.accountAliasDisplayingLevel = accountAliasDisplayingLevel;
        this.config = config;
        this.accountsPaymentsCommunication = accountsPaymentsCommunication;
        this.route = route;
        this.router = router;
        this.accountsService = accountsService;
        this.externalInfoService = externalInfoService;
        /**
         * Arrangement item to be displayed
         */
        this.accountArrangementItem$ = this.accountsService
            .getAccountById(this.getSelectedAccount())
            .pipe(publishSwitch((source) => this.externalInfoService.getProductsWithExternalInfo(source)));
        /**
         * Returns `true` if `AccountsPaymentsCommunication` was provided
         */
        this.isCommunicationProvided = false;
        const { routeConfig } = this.route.snapshot;
        this.tabs = (routeConfig === null || routeConfig === void 0 ? void 0 : routeConfig.children) ? this.initializeTabs(routeConfig) : [];
        this.accountAliasDisplayingLevel = accountAliasDisplayingLevel || config.accountAliasDisplayLevel;
        this.isCommunicationProvided = !!accountsPaymentsCommunication;
    }
    /**
     * Specifies whether `repay` action can be initiated for provided AccountArrangementItem
     *
     * @param accountArrangementItem
     */
    canInitiateRepay(accountArrangementItem) {
        return this.isQuickActionsAllowed(accountArrangementItem) && accountArrangementItem.creditAccount === true;
    }
    /**
     * Specifies whether `cash advance` action can be initiated for provided AccountArrangementItem
     *
     * @param accountArrangementItem
     */
    canInitiateCashInAdvance(accountArrangementItem) {
        return this.isQuickActionsAllowed(accountArrangementItem) && accountArrangementItem.debitAccount === true;
    }
    /**
     * Event handler for the `repayInitiated` event of `bb-account-graphical-header`
     * Initiates the event by running the corresponding method from communication protocol
     *
     * @param arrangementId
     */
    onRepayInitiated(arrangementId) {
        if (arrangementId && this.accountsPaymentsCommunication) {
            this.accountsPaymentsCommunication.repayEvent(arrangementId);
        }
    }
    /**
     * Event handler for the `cashAdvanceInitiated` event of `bb-account-graphical-header`
     * Initiates the event by running the corresponding method from communication protocol
     *
     * @param arrangementId
     */
    onCashAdvanceInitiated(arrangementId) {
        if (arrangementId && this.accountsPaymentsCommunication) {
            this.accountsPaymentsCommunication.cashAdvanceEvent(arrangementId);
        }
    }
    /**
     * Navigates back to `My Accounts`
     */
    onNavigateBack() {
        this.router.navigate(['..'], { relativeTo: this.route });
    }
    isQuickActionsAllowed(accountArrangementItem) {
        return this.isCommunicationProvided && !hasExternalInfo(accountArrangementItem);
    }
    initializeTabs({ children = [] }) {
        return children
            .filter((routeItem) => routeItem.path && routeItem.data)
            .map((routeItem, index) => {
            var _a;
            return ({
                title: ((_a = routeItem.data) === null || _a === void 0 ? void 0 : _a.title) || `Tab${index + 1}`,
                route: routeItem.path || `${index + 1}`,
            });
        });
    }
    /**
     * Returns selected account from snapshot params of activatedRoute
     *
     * @private
     */
    getSelectedAccount() {
        return this.route.snapshot.params.selectedAccount;
    }
}
/** @nocollapse */ AccountsDetailsTabComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountsDetailsTabComponent, deps: [{ token: ACCOUNT_ALIAS_DISPLAYING_LEVEL, optional: true }, { token: i1.AccountsTransactionsJourneyService }, { token: i2.AccountsPaymentsCommunication, optional: true }, { token: i3.ActivatedRoute }, { token: i3.Router }, { token: i4.ProductSummaryAccountsService }, { token: i4.ProductsExternalInfoService }], target: i0.ɵɵFactoryTarget.Component });
/** @nocollapse */ AccountsDetailsTabComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.16", type: AccountsDetailsTabComponent, selector: "bb-accounts-details-tab-container", providers: [ProductSummaryAccountsService, ProductsExternalInfoService], ngImport: i0, template: "<div class=\"pt-5 bb-block bb-block--xl\">\n  <button\n    bbButton\n    data-role=\"account-details-tab__back-navigation-button\"\n    buttonSize=\"md\"\n    color=\"link-text\"\n    class=\"bb-stack justify-content-start bb-stack--density-sm\"\n    (click)=\"onNavigateBack()\"\n  >\n    <bb-icon-ui size=\"md\" name=\"arrow-back\" class=\"bb-stack__item\"></bb-icon-ui>\n    <span\n      class=\"bb-stack__item\"\n      i18n=\"Back to my accounts|Navigation button@@accounts-details-tab-header-back-navigation-button\"\n    >\n      Back to my accounts\n    </span>\n  </button>\n</div>\n\n<ng-container *ngIf=\"accountArrangementItem$ | async as accountArrangementItem\">\n  <div\n    class=\"bb-card bb-card--lg\"\n    *ngIf=\"\n      accountArrangementItem?.product?.productKind | bbIsProductKind: config.productKindsWithGraphicalRepresentation;\n      else accountHeader\n    \"\n  >\n    <div class=\"bb-card__body\">\n      <bb-account-graphical-header\n        data-role=\"accounts-details-tab__account-graphical-header\"\n        [product]=\"accountArrangementItem\"\n        [canEditAlias]=\"false\"\n        [useShortCurrency]=\"true\"\n        [creditLimitViewMode]=\"config.creditLimitViewMode\"\n        [canRepay]=\"canInitiateRepay(accountArrangementItem)\"\n        [canCashInAdvance]=\"canInitiateCashInAdvance(accountArrangementItem)\"\n        [creditCardBackgroundType]=\"'darkred-card'\"\n        [aliasLevel]=\"accountAliasDisplayingLevel\"\n        [isLogoVisible]=\"false\"\n        (repayInitiated)=\"onRepayInitiated($event)\"\n        (cashAdvanceInitiated)=\"onCashAdvanceInitiated($event)\"\n      ></bb-account-graphical-header>\n    </div>\n  </div>\n  <ng-template #accountHeader>\n    <bb-account-header\n      data-role=\"accounts-details-tab__account-header\"\n      [product]=\"accountArrangementItem\"\n      [isBalanceTypeVisible]=\"false\"\n      [mapCurrency]=\"true\"\n      [aliasLevel]=\"accountAliasDisplayingLevel\"\n      [canEditAlias]=\"false\"\n      [isLogoVisible]=\"config.showAccountIcons\"\n    ></bb-account-header>\n  </ng-template>\n</ng-container>\n\n<div class=\"d-block\">\n  <div class=\"d-block mx-4 pt-5\">\n    <div class=\"bb-tab-container__tabs nav nav-tabs\">\n      <a *ngFor=\"let tab of tabs\" class=\"nav-link\" role=\"tab\" [routerLink]=\"[tab.route]\" routerLinkActive=\"active\">\n        <span class=\"bb-stack__item bb-stack__item--spacing-xs\">{{ tab?.title }}</span>\n      </a>\n    </div>\n  </div>\n\n  <div class=\"bb-tab-container__content tab-content\" role=\"tabpanel\">\n    <router-outlet></router-outlet>\n  </div>\n</div>\n", components: [{ type: i5.IconComponent, selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i6.AccountGraphicalHeaderComponent, selector: "bb-account-graphical-header", inputs: ["product", "aliasLevel", "canEditAlias", "useShortCurrency", "creditLimitViewMode", "canRepay", "canCashInAdvance", "creditCardBackgroundType", "isLogoVisible"], outputs: ["aliasUpdated", "repayInitiated", "cashAdvanceInitiated"] }, { type: i6.AccountHeaderComponent, selector: "bb-account-header", inputs: ["product", "canEditAlias", "aliasLevel", "showBalance", "isBalanceTypeVisible", "isLogoVisible", "mapCurrency"], outputs: ["aliasUpdated"] }], directives: [{ type: i7.ButtonDirective, selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i8.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i8.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }, { type: i3.RouterLinkActive, selector: "[routerLinkActive]", inputs: ["routerLinkActiveOptions", "routerLinkActive"], exportAs: ["routerLinkActive"] }, { type: i3.RouterOutlet, selector: "router-outlet", outputs: ["activate", "deactivate"], exportAs: ["outlet"] }], pipes: { "async": i8.AsyncPipe, "bbIsProductKind": i4.IsProductKindPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountsDetailsTabComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-accounts-details-tab-container',
                    templateUrl: './accounts-details-tab.component.html',
                    providers: [ProductSummaryAccountsService, ProductsExternalInfoService],
                }]
        }], ctorParameters: function () { return [{ type: i4.AccountAliasDisplayingLevel, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [ACCOUNT_ALIAS_DISPLAYING_LEVEL]
                }] }, { type: i1.AccountsTransactionsJourneyService }, { type: i2.AccountsPaymentsCommunication, decorators: [{
                    type: Optional
                }] }, { type: i3.ActivatedRoute }, { type: i3.Router }, { type: i4.ProductSummaryAccountsService }, { type: i4.ProductsExternalInfoService }]; } });
//# sourceMappingURL=accounts-details-tab.component.js.map