import { Directive, Optional } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { ProductKindUri } from '@backbase/product-summary-common-ang';
import { AccountsTransactionsJourneyService } from '../../accounts-transactions-journey-config.service';
import { AccountsCommunicationService } from '../../services/accounts-communication.service';
import * as i0 from "@angular/core";
import * as i1 from "../../accounts-transactions-journey-config.service";
import * as i2 from "@angular/router";
import * as i3 from "../../services/accounts-communication.service";
export class AccountsListBaseComponent {
    /**
     * @internal
     * @param config
     * @param router
     * @param route
     * @param accountsCommunicationService
     */
    constructor(
    /**
     * Journey configuration
     */
    config, router, route, accountsCommunicationService) {
        this.config = config;
        this.router = router;
        this.route = route;
        this.accountsCommunicationService = accountsCommunicationService;
        /**
         * Label for accounts list title
         */
        this.myAccounts = $localize `:My accounts heading|my accounts heading@@accounts-transactions-journey.accounts-list.heading.myAccounts:My Accounts`;
        /**
         * Label for manage accounts navigation button
         */
        this.manageAccounts = $localize `:Manage accounts button title|manage accounts button title@@accounts-transactions-journey.accounts-list.buttonTitle.manageAccounts:Manage Accounts`;
    }
    /**
     * Navigates to selected product details
     *
     * @param product
     */
    onProductSelect(product) {
        const id = product.id;
        const kind = this.getProductKind(product);
        if (this.accountsCommunicationService && this.productKindsWithExternalDetailsPage.includes(kind)) {
            this.accountsCommunicationService.navigateToExternalAccountDetails({
                id,
                kind,
            });
        }
        else {
            this.navigateToAccountDetails(id);
        }
    }
    /**
     * Navigates to account details by id
     *
     * @param id
     */
    onAccountSelect(id) {
        this.navigateToAccountDetails(id);
    }
    /**
     * Navigates to account management
     */
    navigateToAccountManagement() {
        this.router.navigate(['../manage'], { relativeTo: this.route });
    }
    navigateToAccountDetails(selectedAccount) {
        this.router.navigate(['../transactions', { selectedAccount }], {
            relativeTo: this.route,
        });
    }
    get productKindsWithExternalDetailsPage() {
        return Array.isArray(this.config.productKindsWithExternalDetailsPage)
            ? this.config.productKindsWithExternalDetailsPage
            : [this.config.productKindsWithExternalDetailsPage];
    }
    getProductKind(product) {
        switch (product.kind) {
            case 'currentAccounts':
                return ProductKindUri.CURRENT_ACCOUNT;
            case 'savingsAccounts':
                return ProductKindUri.SAVINGS_ACCOUNT;
            case 'termDeposits':
                return ProductKindUri.TERM_DEPOSIT;
            case 'loans':
                return ProductKindUri.LOAN;
            case 'creditCards':
                return ProductKindUri.CREDIT_CARD;
            case 'debitCards':
                return ProductKindUri.DEBIT_CARD;
            case 'investmentAccounts':
                return ProductKindUri.INVESTMENT_ACCOUNT;
            default:
                return product.kind;
        }
    }
}
/** @nocollapse */ AccountsListBaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountsListBaseComponent, deps: [{ token: i1.AccountsTransactionsJourneyService }, { token: i2.Router }, { token: i2.ActivatedRoute }, { token: i3.AccountsCommunicationService, optional: true }], target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ AccountsListBaseComponent.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: AccountsListBaseComponent, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: AccountsListBaseComponent, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i1.AccountsTransactionsJourneyService }, { type: i2.Router }, { type: i2.ActivatedRoute }, { type: i3.AccountsCommunicationService, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=accounts-list-base.component.js.map