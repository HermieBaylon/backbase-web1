{"version":3,"file":"accounts-list-base.component.js","sourceRoot":"","sources":["../../../../../../../libs/accounts-transactions-journey/src/lib/views/accounts-list-base/accounts-list-base.component.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,eAAe,CAAC;AACpD,OAAO,EAAE,cAAc,EAAE,MAAM,EAAE,MAAM,iBAAiB,CAAC;AACzD,OAAO,EAAW,cAAc,EAAE,MAAM,sCAAsC,CAAC;AAC/E,OAAO,EAAE,kCAAkC,EAAE,MAAM,oDAAoD,CAAC;AACxG,OAAO,EAAE,4BAA4B,EAAE,MAAM,+CAA+C,CAAC;;;;;AAG7F,MAAM,OAAO,yBAAyB;IAUpC;;;;;;OAMG;IACH;IACE;;OAEG;IACM,MAA0C,EAClC,MAAc,EACd,KAAqB,EAErB,4BAA0D;QAJlE,WAAM,GAAN,MAAM,CAAoC;QAClC,WAAM,GAAN,MAAM,CAAQ;QACd,UAAK,GAAL,KAAK,CAAgB;QAErB,iCAA4B,GAA5B,4BAA4B,CAA8B;QAxB7E;;WAEG;QACM,eAAU,GAAG,SAAS,CAAA,sHAAsH,CAAC;QACtJ;;WAEG;QACM,mBAAc,GAAG,SAAS,CAAA,oJAAoJ,CAAC;IAkBrL,CAAC;IAEJ;;;;OAIG;IACH,eAAe,CAAC,OAAgB;QAC9B,MAAM,EAAE,GAAG,OAAO,CAAC,EAAY,CAAC;QAChC,MAAM,IAAI,GAAG,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;QAE1C,IAAI,IAAI,CAAC,4BAA4B,IAAI,IAAI,CAAC,mCAAmC,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;YAChG,IAAI,CAAC,4BAA4B,CAAC,gCAAgC,CAAC;gBACjE,EAAE;gBACF,IAAI;aACL,CAAC,CAAC;SACJ;aAAM;YACL,IAAI,CAAC,wBAAwB,CAAC,EAAE,CAAC,CAAC;SACnC;IACH,CAAC;IAED;;;;OAIG;IACH,eAAe,CAAC,EAAU;QACxB,IAAI,CAAC,wBAAwB,CAAC,EAAE,CAAC,CAAC;IACpC,CAAC;IAED;;OAEG;IACH,2BAA2B;QACzB,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,WAAW,CAAC,EAAE,EAAE,UAAU,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;IAClE,CAAC;IAEO,wBAAwB,CAAC,eAAuB;QACtD,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,iBAAiB,EAAE,EAAE,eAAe,EAAE,CAAC,EAAE;YAC7D,UAAU,EAAE,IAAI,CAAC,KAAK;SACvB,CAAC,CAAC;IACL,CAAC;IAED,IAAY,mCAAmC;QAC7C,OAAO,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,mCAAmC,CAAC;YACnE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,mCAAmC;YACjD,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,mCAAmC,CAAC,CAAC;IACxD,CAAC;IAEO,cAAc,CAAC,OAAgB;QACrC,QAAQ,OAAO,CAAC,IAAI,EAAE;YACpB,KAAK,iBAAiB;gBACpB,OAAO,cAAc,CAAC,eAAe,CAAC;YACxC,KAAK,iBAAiB;gBACpB,OAAO,cAAc,CAAC,eAAe,CAAC;YACxC,KAAK,cAAc;gBACjB,OAAO,cAAc,CAAC,YAAY,CAAC;YACrC,KAAK,OAAO;gBACV,OAAO,cAAc,CAAC,IAAI,CAAC;YAC7B,KAAK,aAAa;gBAChB,OAAO,cAAc,CAAC,WAAW,CAAC;YACpC,KAAK,YAAY;gBACf,OAAO,cAAc,CAAC,UAAU,CAAC;YACnC,KAAK,oBAAoB;gBACvB,OAAO,cAAc,CAAC,kBAAkB,CAAC;YAC3C;gBACE,OAAO,OAAO,CAAC,IAAc,CAAC;SACjC;IACH,CAAC;;0IA9FU,yBAAyB;8HAAzB,yBAAyB;4FAAzB,yBAAyB;kBADrC,SAAS;;0BAyBL,QAAQ","sourcesContent":["import { Directive, Optional } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Product, ProductKindUri } from '@backbase/product-summary-common-ang';\nimport { AccountsTransactionsJourneyService } from '../../accounts-transactions-journey-config.service';\nimport { AccountsCommunicationService } from '../../services/accounts-communication.service';\n\n@Directive()\nexport class AccountsListBaseComponent {\n  /**\n   * Label for accounts list title\n   */\n  readonly myAccounts = $localize`:My accounts heading|my accounts heading@@accounts-transactions-journey.accounts-list.heading.myAccounts:My Accounts`;\n  /**\n   * Label for manage accounts navigation button\n   */\n  readonly manageAccounts = $localize`:Manage accounts button title|manage accounts button title@@accounts-transactions-journey.accounts-list.buttonTitle.manageAccounts:Manage Accounts`;\n\n  /**\n   * @internal\n   * @param config\n   * @param router\n   * @param route\n   * @param accountsCommunicationService\n   */\n  constructor(\n    /**\n     * Journey configuration\n     */\n    readonly config: AccountsTransactionsJourneyService,\n    private readonly router: Router,\n    private readonly route: ActivatedRoute,\n    @Optional()\n    private readonly accountsCommunicationService: AccountsCommunicationService,\n  ) {}\n\n  /**\n   * Navigates to selected product details\n   *\n   * @param product\n   */\n  onProductSelect(product: Product) {\n    const id = product.id as string;\n    const kind = this.getProductKind(product);\n\n    if (this.accountsCommunicationService && this.productKindsWithExternalDetailsPage.includes(kind)) {\n      this.accountsCommunicationService.navigateToExternalAccountDetails({\n        id,\n        kind,\n      });\n    } else {\n      this.navigateToAccountDetails(id);\n    }\n  }\n\n  /**\n   * Navigates to account details by id\n   *\n   * @param id\n   */\n  onAccountSelect(id: string) {\n    this.navigateToAccountDetails(id);\n  }\n\n  /**\n   * Navigates to account management\n   */\n  navigateToAccountManagement() {\n    this.router.navigate(['../manage'], { relativeTo: this.route });\n  }\n\n  private navigateToAccountDetails(selectedAccount: string): void {\n    this.router.navigate(['../transactions', { selectedAccount }], {\n      relativeTo: this.route,\n    });\n  }\n\n  private get productKindsWithExternalDetailsPage(): string[] {\n    return Array.isArray(this.config.productKindsWithExternalDetailsPage)\n      ? this.config.productKindsWithExternalDetailsPage\n      : [this.config.productKindsWithExternalDetailsPage];\n  }\n\n  private getProductKind(product: Product): string {\n    switch (product.kind) {\n      case 'currentAccounts':\n        return ProductKindUri.CURRENT_ACCOUNT;\n      case 'savingsAccounts':\n        return ProductKindUri.SAVINGS_ACCOUNT;\n      case 'termDeposits':\n        return ProductKindUri.TERM_DEPOSIT;\n      case 'loans':\n        return ProductKindUri.LOAN;\n      case 'creditCards':\n        return ProductKindUri.CREDIT_CARD;\n      case 'debitCards':\n        return ProductKindUri.DEBIT_CARD;\n      case 'investmentAccounts':\n        return ProductKindUri.INVESTMENT_ACCOUNT;\n      default:\n        return product.kind as string;\n    }\n  }\n}\n"]}