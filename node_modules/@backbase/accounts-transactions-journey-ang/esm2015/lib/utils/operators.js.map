{"version":3,"file":"operators.js","sourceRoot":"","sources":["../../../../../../libs/accounts-transactions-journey/src/lib/utils/operators.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAgB,MAAM,MAAM,CAAC;AAEhD;;;;;;GAMG;AACH,MAAM,CAAC,MAAM,aAAa,GACxB,CAAI,SAAuC,EAAE,EAAE,CAC/C,CAAC,MAAqB,EAAiB,EAAE,CACvC,IAAI,UAAU,CAAC,CAAC,UAAU,EAAE,EAAE;IAC5B,MAAM,aAAa,GAAmB,EAAE,CAAC;IACzC,aAAa,CAAC,IAAI,CAChB,MAAM,CAAC,SAAS,CAAC,CAAC,UAAU,EAAE,EAAE;QAC9B,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAC5B,IAAI,UAAU,EAAE;YACd,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC;SACjE;IACH,CAAC,EAAE,UAAU,CAAC,KAAK,CAAC,CACrB,CAAC;IACF,OAAO,GAAG,EAAE,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,YAAY,EAAE,EAAE,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC,CAAC;AACnF,CAAC,CAAC,CAAC","sourcesContent":["import { Observable, Subscription } from 'rxjs';\n\n/**\n * An operator that switches to another stream, but emits data from original stream before switching\n * - subscribes to \"source\" stream,\n * - emits data, when \"source\" stream is resolved,\n * - then creates a subscription to a \"mapSource\" using the previously published data as an input,\n * - when \"mapSource\" is resolved the operator publishes an event with \"mapSource\" data.\n */\nexport const publishSwitch =\n  <T>(mapSource: (source: T) => Observable<T>) =>\n  (source: Observable<T>): Observable<T> =>\n    new Observable((subscriber) => {\n      const subscriptions: Subscription[] = [];\n      subscriptions.push(\n        source.subscribe((sourceData) => {\n          subscriber.next(sourceData);\n          if (sourceData) {\n            subscriptions.push(mapSource(sourceData).subscribe(subscriber));\n          }\n        }, subscriber.error),\n      );\n      return () => subscriptions.forEach((subscription) => subscription.unsubscribe());\n    });\n"]}