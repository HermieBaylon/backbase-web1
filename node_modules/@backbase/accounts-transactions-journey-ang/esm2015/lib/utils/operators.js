import { Observable } from 'rxjs';
/**
 * An operator that switches to another stream, but emits data from original stream before switching
 * - subscribes to "source" stream,
 * - emits data, when "source" stream is resolved,
 * - then creates a subscription to a "mapSource" using the previously published data as an input,
 * - when "mapSource" is resolved the operator publishes an event with "mapSource" data.
 */
export const publishSwitch = (mapSource) => (source) => new Observable((subscriber) => {
    const subscriptions = [];
    subscriptions.push(source.subscribe((sourceData) => {
        subscriber.next(sourceData);
        if (sourceData) {
            subscriptions.push(mapSource(sourceData).subscribe(subscriber));
        }
    }, subscriber.error));
    return () => subscriptions.forEach((subscription) => subscription.unsubscribe());
});
//# sourceMappingURL=operators.js.map