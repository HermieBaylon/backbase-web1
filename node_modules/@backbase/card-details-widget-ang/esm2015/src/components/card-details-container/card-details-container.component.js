import { Component, Input, Optional } from '@angular/core';
import { CardService, filterInputParameters } from '@backbase/cards-common-ang';
import { BehaviorSubject, of } from 'rxjs';
import { catchError, tap } from 'rxjs/operators';
import { WidgetPropertiesService } from '../../services/widget-properties.service';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/cards-common-ang";
import * as i2 from "../../services/widget-properties.service";
import * as i3 from "../bb-payment-card/payment-card.component";
import * as i4 from "@backbase/ui-ang/empty-state";
import * as i5 from "@backbase/ui-ang/loading-indicator";
import * as i6 from "@angular/common";
export class CardDetailsContainerComponent {
    constructor(cardService, cd, widgetPropertiesService) {
        this.cardService = cardService;
        this.cd = cd;
        this.widgetPropertiesService = widgetPropertiesService;
        this.notificationTtlSubject = new BehaviorSubject(undefined);
        this.updateAllLimitsSubject = new BehaviorSubject(undefined);
        this.handleError = (errorResponse) => {
            this.errors = errorResponse;
            return of(undefined);
        };
    }
    /**
     * Notification timeout timer value configuration
     */
    // eslint-disable-next-line
    set notificationTtlValue(value) {
        this.notificationTtlSubject.next(value);
    }
    /**
     * Enable to send multiple limits to the API when updating values
     */
    set updateAllLimitsValue(value) {
        this.updateAllLimitsSubject.next(value);
    }
    ngOnInit() {
        if (typeof this.paymentCardId === 'undefined') {
            throw new Error(`"paymentCardId" input is required in "${this.constructor.name}"`);
        }
        this.cardService.getPaymentCardFrom(this.paymentCardId);
        this.paymentCard = this.cardService.getPaymentCard().pipe(tap(() => {
            this.cd.markForCheck();
        }), catchError(this.handleError));
    }
    get notificationTtl() {
        return filterInputParameters(this.notificationTtlSubject, this.widgetPropertiesService.notificationTtl);
    }
    get updateAllLimits() {
        return filterInputParameters(this.updateAllLimitsSubject, this.widgetPropertiesService.updateAllLimits);
    }
}
CardDetailsContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardDetailsContainerComponent, deps: [{ token: i1.CardService }, { token: i0.ChangeDetectorRef }, { token: i2.WidgetPropertiesService, optional: true }], target: i0.ɵɵFactoryTarget.Component });
CardDetailsContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: CardDetailsContainerComponent, selector: "bb-card-details-container", inputs: { paymentCardId: "paymentCardId", notificationTtlValue: ["notificationTtl", "notificationTtlValue"], updateAllLimitsValue: ["updateAllLimits", "updateAllLimitsValue"] }, providers: [CardService, WidgetPropertiesService], ngImport: i0, template: "<ng-container *ngIf=\"paymentCardId | async; else emptyState\">\n  <ng-container *ngIf=\"!errors; else errorState\">\n    <ng-container *ngIf=\"paymentCard | async as paymentCard; else loadingState\">\n      <bb-payment-card \n        [paymentCard]=\"paymentCard\" \n        [notificationTtl]=\"(notificationTtl | async) || undefined\"\n        [updateAllLimits]=\"(updateAllLimits | async) || undefined\"\n      ></bb-payment-card>\n    </ng-container>\n  </ng-container>\n</ng-container>\n\n<ng-template #emptyState>\n  <bb-empty-state-ui title=\"No Card Selected\"></bb-empty-state-ui>\n</ng-template>\n\n<ng-template #loadingState>\n  <bb-loading-indicator-ui loaderSize=\"lg\"></bb-loading-indicator-ui>\n</ng-template>\n\n<ng-template #errorState>\n  <bb-payment-card-multiple-error-state [errors]=\"errors\"></bb-payment-card-multiple-error-state>\n</ng-template>\n", components: [{ type: i3.PaymentCardComponent, selector: "bb-payment-card" }, { type: i4.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }, { type: i5.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i1.PaymentCardMultipleErrorStateComponent, selector: "bb-payment-card-multiple-error-state", inputs: ["errors"] }], directives: [{ type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i6.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardDetailsContainerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-card-details-container',
                    templateUrl: './card-details-container.component.html',
                    providers: [CardService, WidgetPropertiesService],
                }]
        }], ctorParameters: function () { return [{ type: i1.CardService }, { type: i0.ChangeDetectorRef }, { type: i2.WidgetPropertiesService, decorators: [{
                    type: Optional
                }] }]; }, propDecorators: { paymentCardId: [{
                type: Input
            }], notificationTtlValue: [{
                type: Input,
                args: ['notificationTtl']
            }], updateAllLimitsValue: [{
                type: Input,
                args: ['updateAllLimits']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyZC1kZXRhaWxzLWNvbnRhaW5lci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL2NhcmQtZGV0YWlscy13aWRnZXQtYW5nL3NyYy9jb21wb25lbnRzL2NhcmQtZGV0YWlscy1jb250YWluZXIvY2FyZC1kZXRhaWxzLWNvbnRhaW5lci5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL2NhcmQtZGV0YWlscy13aWRnZXQtYW5nL3NyYy9jb21wb25lbnRzL2NhcmQtZGV0YWlscy1jb250YWluZXIvY2FyZC1kZXRhaWxzLWNvbnRhaW5lci5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQXFCLFNBQVMsRUFBRSxLQUFLLEVBQVUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3RGLE9BQU8sRUFBcUIsV0FBVyxFQUFFLHFCQUFxQixFQUFlLE1BQU0sNEJBQTRCLENBQUM7QUFDaEgsT0FBTyxFQUFFLGVBQWUsRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdkQsT0FBTyxFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNqRCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQzs7Ozs7Ozs7QUFPbkYsTUFBTSxPQUFPLDZCQUE2QjtJQTREeEMsWUFDbUIsV0FBd0IsRUFDeEIsRUFBcUIsRUFDVCx1QkFBZ0Q7UUFGNUQsZ0JBQVcsR0FBWCxXQUFXLENBQWE7UUFDeEIsT0FBRSxHQUFGLEVBQUUsQ0FBbUI7UUFDVCw0QkFBdUIsR0FBdkIsdUJBQXVCLENBQXlCO1FBOUQ5RCwyQkFBc0IsR0FBRyxJQUFJLGVBQWUsQ0FBcUIsU0FBUyxDQUFDLENBQUM7UUFDNUUsMkJBQXNCLEdBQUcsSUFBSSxlQUFlLENBQXNCLFNBQVMsQ0FBQyxDQUFDO1FBNkI3RSxnQkFBVyxHQUFHLENBQUMsYUFBa0MsRUFBRSxFQUFFO1lBQ3BFLElBQUksQ0FBQyxNQUFNLEdBQUcsYUFBYSxDQUFDO1lBRTVCLE9BQU8sRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3ZCLENBQUMsQ0FBQztJQTZCQyxDQUFDO0lBeERKOztPQUVHO0lBQ0gsMkJBQTJCO0lBQzNCLElBQ0ksb0JBQW9CLENBQUMsS0FBeUI7UUFDaEQsSUFBSSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMxQyxDQUFDO0lBQ0Q7O09BRUc7SUFDSCxJQUE4QixvQkFBb0IsQ0FBQyxLQUEwQjtRQUMzRSxJQUFJLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFnQkQsUUFBUTtRQUNOLElBQUksT0FBTyxJQUFJLENBQUMsYUFBYSxLQUFLLFdBQVcsRUFBRTtZQUM3QyxNQUFNLElBQUksS0FBSyxDQUFDLHlDQUF5QyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUM7U0FDcEY7UUFFRCxJQUFJLENBQUMsV0FBVyxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUV4RCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsY0FBYyxFQUFFLENBQUMsSUFBSSxDQUN2RCxHQUFHLENBQUMsR0FBRyxFQUFFO1lBQ1AsSUFBSSxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUN6QixDQUFDLENBQUMsRUFDRixVQUFVLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUM3QixDQUFDO0lBQ0osQ0FBQztJQUVELElBQUksZUFBZTtRQUNqQixPQUFPLHFCQUFxQixDQUFDLElBQUksQ0FBQyxzQkFBc0IsRUFBRSxJQUFJLENBQUMsdUJBQXVCLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDMUcsQ0FBQztJQUVELElBQUksZUFBZTtRQUNqQixPQUFPLHFCQUFxQixDQUFDLElBQUksQ0FBQyxzQkFBc0IsRUFBRSxJQUFJLENBQUMsdUJBQXVCLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDMUcsQ0FBQzs7MkhBMURVLDZCQUE2QjsrR0FBN0IsNkJBQTZCLHNPQUY3QixDQUFDLFdBQVcsRUFBRSx1QkFBdUIsQ0FBQywwQkNWbkQsMDJCQXVCQTs0RkRYYSw2QkFBNkI7a0JBTHpDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLDJCQUEyQjtvQkFDckMsV0FBVyxFQUFFLHlDQUF5QztvQkFDdEQsU0FBUyxFQUFFLENBQUMsV0FBVyxFQUFFLHVCQUF1QixDQUFDO2lCQUNsRDs7MEJBZ0VJLFFBQVE7NENBeERGLGFBQWE7c0JBQXJCLEtBQUs7Z0JBTUYsb0JBQW9CO3NCQUR2QixLQUFLO3VCQUFDLGlCQUFpQjtnQkFPTSxvQkFBb0I7c0JBQWpELEtBQUs7dUJBQUMsaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cEVycm9yUmVzcG9uc2UgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBDaGFuZ2VEZXRlY3RvclJlZiwgQ29tcG9uZW50LCBJbnB1dCwgT25Jbml0LCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ2FyZHNCYWNrZW5kRXJyb3IsIENhcmRTZXJ2aWNlLCBmaWx0ZXJJbnB1dFBhcmFtZXRlcnMsIFBheW1lbnRDYXJkIH0gZnJvbSAnQGJhY2tiYXNlL2NhcmRzLWNvbW1vbi1hbmcnO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgY2F0Y2hFcnJvciwgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgV2lkZ2V0UHJvcGVydGllc1NlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy93aWRnZXQtcHJvcGVydGllcy5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYmItY2FyZC1kZXRhaWxzLWNvbnRhaW5lcicsXG4gIHRlbXBsYXRlVXJsOiAnLi9jYXJkLWRldGFpbHMtY29udGFpbmVyLmNvbXBvbmVudC5odG1sJyxcbiAgcHJvdmlkZXJzOiBbQ2FyZFNlcnZpY2UsIFdpZGdldFByb3BlcnRpZXNTZXJ2aWNlXSxcbn0pXG5leHBvcnQgY2xhc3MgQ2FyZERldGFpbHNDb250YWluZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICBwcml2YXRlIHJlYWRvbmx5IG5vdGlmaWNhdGlvblR0bFN1YmplY3QgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PG51bWJlciB8IHVuZGVmaW5lZD4odW5kZWZpbmVkKTtcbiAgcHJpdmF0ZSByZWFkb25seSB1cGRhdGVBbGxMaW1pdHNTdWJqZWN0ID0gbmV3IEJlaGF2aW9yU3ViamVjdDxib29sZWFuIHwgdW5kZWZpbmVkPih1bmRlZmluZWQpO1xuXG4gIC8qKlxuICAgKiBPYnNlcnZhYmxlIG9mIHRoZSBwYXltZW50IGNhcmQgSUQgdGhpcyBjb21wb25lbnQgc2hvdWxkIHJldHJpZXZlIHRoZSBjYXJkIGRldGFpbHMgZm9yLlxuICAgKi9cbiAgQElucHV0KCkgcGF5bWVudENhcmRJZDogT2JzZXJ2YWJsZTxzdHJpbmc+IHwgdW5kZWZpbmVkO1xuICAvKipcbiAgICogTm90aWZpY2F0aW9uIHRpbWVvdXQgdGltZXIgdmFsdWUgY29uZmlndXJhdGlvblxuICAgKi9cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gIEBJbnB1dCgnbm90aWZpY2F0aW9uVHRsJylcbiAgc2V0IG5vdGlmaWNhdGlvblR0bFZhbHVlKHZhbHVlOiBudW1iZXIgfCB1bmRlZmluZWQpIHtcbiAgICB0aGlzLm5vdGlmaWNhdGlvblR0bFN1YmplY3QubmV4dCh2YWx1ZSk7XG4gIH1cbiAgLyoqXG4gICAqIEVuYWJsZSB0byBzZW5kIG11bHRpcGxlIGxpbWl0cyB0byB0aGUgQVBJIHdoZW4gdXBkYXRpbmcgdmFsdWVzXG4gICAqL1xuICBASW5wdXQoJ3VwZGF0ZUFsbExpbWl0cycpIHNldCB1cGRhdGVBbGxMaW1pdHNWYWx1ZSh2YWx1ZTogYm9vbGVhbiB8IHVuZGVmaW5lZCkge1xuICAgIHRoaXMudXBkYXRlQWxsTGltaXRzU3ViamVjdC5uZXh0KHZhbHVlKTtcbiAgfVxuICAvKipcbiAgICogT2JzZXJ2YWJsZSBvZiB0aGUgcGF5bWVudCBjYXJkXG4gICAqL1xuICBwYXltZW50Q2FyZDogT2JzZXJ2YWJsZTxQYXltZW50Q2FyZCB8IHVuZGVmaW5lZD4gfCB1bmRlZmluZWQ7XG4gIC8qKlxuICAgKiBJbmZvcm1hdGlvbiBhYm91dCB0aGUgYmFja2VuZCBlcnJvciwgaWYgaXQgb2NjdXJzLlxuICAgKi9cbiAgZXJyb3JzOiBDYXJkc0JhY2tlbmRFcnJvcltdIHwgdW5kZWZpbmVkO1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgaGFuZGxlRXJyb3IgPSAoZXJyb3JSZXNwb25zZTogSHR0cEVycm9yUmVzcG9uc2VbXSkgPT4ge1xuICAgIHRoaXMuZXJyb3JzID0gZXJyb3JSZXNwb25zZTtcblxuICAgIHJldHVybiBvZih1bmRlZmluZWQpO1xuICB9O1xuXG4gIG5nT25Jbml0KCkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5wYXltZW50Q2FyZElkID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBcInBheW1lbnRDYXJkSWRcIiBpbnB1dCBpcyByZXF1aXJlZCBpbiBcIiR7dGhpcy5jb25zdHJ1Y3Rvci5uYW1lfVwiYCk7XG4gICAgfVxuXG4gICAgdGhpcy5jYXJkU2VydmljZS5nZXRQYXltZW50Q2FyZEZyb20odGhpcy5wYXltZW50Q2FyZElkKTtcblxuICAgIHRoaXMucGF5bWVudENhcmQgPSB0aGlzLmNhcmRTZXJ2aWNlLmdldFBheW1lbnRDYXJkKCkucGlwZShcbiAgICAgIHRhcCgoKSA9PiB7XG4gICAgICAgIHRoaXMuY2QubWFya0ZvckNoZWNrKCk7XG4gICAgICB9KSxcbiAgICAgIGNhdGNoRXJyb3IodGhpcy5oYW5kbGVFcnJvciksXG4gICAgKTtcbiAgfVxuXG4gIGdldCBub3RpZmljYXRpb25UdGwoKTogT2JzZXJ2YWJsZTxudW1iZXI+IHtcbiAgICByZXR1cm4gZmlsdGVySW5wdXRQYXJhbWV0ZXJzKHRoaXMubm90aWZpY2F0aW9uVHRsU3ViamVjdCwgdGhpcy53aWRnZXRQcm9wZXJ0aWVzU2VydmljZS5ub3RpZmljYXRpb25UdGwpO1xuICB9XG5cbiAgZ2V0IHVwZGF0ZUFsbExpbWl0cygpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcbiAgICByZXR1cm4gZmlsdGVySW5wdXRQYXJhbWV0ZXJzKHRoaXMudXBkYXRlQWxsTGltaXRzU3ViamVjdCwgdGhpcy53aWRnZXRQcm9wZXJ0aWVzU2VydmljZS51cGRhdGVBbGxMaW1pdHMpO1xuICB9XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBjYXJkU2VydmljZTogQ2FyZFNlcnZpY2UsXG4gICAgcHJpdmF0ZSByZWFkb25seSBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgQE9wdGlvbmFsKCkgcHJpdmF0ZSByZWFkb25seSB3aWRnZXRQcm9wZXJ0aWVzU2VydmljZTogV2lkZ2V0UHJvcGVydGllc1NlcnZpY2UsXG4gICkge31cbn1cbiIsIjxuZy1jb250YWluZXIgKm5nSWY9XCJwYXltZW50Q2FyZElkIHwgYXN5bmM7IGVsc2UgZW1wdHlTdGF0ZVwiPlxuICA8bmctY29udGFpbmVyICpuZ0lmPVwiIWVycm9yczsgZWxzZSBlcnJvclN0YXRlXCI+XG4gICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cInBheW1lbnRDYXJkIHwgYXN5bmMgYXMgcGF5bWVudENhcmQ7IGVsc2UgbG9hZGluZ1N0YXRlXCI+XG4gICAgICA8YmItcGF5bWVudC1jYXJkIFxuICAgICAgICBbcGF5bWVudENhcmRdPVwicGF5bWVudENhcmRcIiBcbiAgICAgICAgW25vdGlmaWNhdGlvblR0bF09XCIobm90aWZpY2F0aW9uVHRsIHwgYXN5bmMpIHx8IHVuZGVmaW5lZFwiXG4gICAgICAgIFt1cGRhdGVBbGxMaW1pdHNdPVwiKHVwZGF0ZUFsbExpbWl0cyB8IGFzeW5jKSB8fCB1bmRlZmluZWRcIlxuICAgICAgPjwvYmItcGF5bWVudC1jYXJkPlxuICAgIDwvbmctY29udGFpbmVyPlxuICA8L25nLWNvbnRhaW5lcj5cbjwvbmctY29udGFpbmVyPlxuXG48bmctdGVtcGxhdGUgI2VtcHR5U3RhdGU+XG4gIDxiYi1lbXB0eS1zdGF0ZS11aSB0aXRsZT1cIk5vIENhcmQgU2VsZWN0ZWRcIj48L2JiLWVtcHR5LXN0YXRlLXVpPlxuPC9uZy10ZW1wbGF0ZT5cblxuPG5nLXRlbXBsYXRlICNsb2FkaW5nU3RhdGU+XG4gIDxiYi1sb2FkaW5nLWluZGljYXRvci11aSBsb2FkZXJTaXplPVwibGdcIj48L2JiLWxvYWRpbmctaW5kaWNhdG9yLXVpPlxuPC9uZy10ZW1wbGF0ZT5cblxuPG5nLXRlbXBsYXRlICNlcnJvclN0YXRlPlxuICA8YmItcGF5bWVudC1jYXJkLW11bHRpcGxlLWVycm9yLXN0YXRlIFtlcnJvcnNdPVwiZXJyb3JzXCI+PC9iYi1wYXltZW50LWNhcmQtbXVsdGlwbGUtZXJyb3Itc3RhdGU+XG48L25nLXRlbXBsYXRlPlxuIl19