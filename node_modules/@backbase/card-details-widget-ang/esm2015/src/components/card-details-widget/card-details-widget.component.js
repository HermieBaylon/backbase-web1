import { Component, Input } from '@angular/core';
import { combineLatest } from 'rxjs';
import { map, pluck } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "../card-details-container/card-details-container.component";
export class CardDetailsWidgetComponent {
    constructor(route) {
        this.route = route;
        this.paymentCardId = this.getRouteParam(this.route, 'selectedCard').pipe(map((selectedCard) => selectedCard));
    }
    getRouteParam(route, param) {
        const paramValue = route.paramMap.pipe(pluck('params', param));
        if (!route.parent) {
            return paramValue;
        }
        // Ensure that level that has actual value keeps it from being cleared.
        return combineLatest(paramValue, this.getRouteParam(route.parent, param)).pipe(map((params) => params[0] || params[1]));
    }
}
CardDetailsWidgetComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardDetailsWidgetComponent, deps: [{ token: i1.ActivatedRoute }], target: i0.ɵɵFactoryTarget.Component });
CardDetailsWidgetComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: CardDetailsWidgetComponent, selector: "bb-card-details-widget", inputs: { notificationTtl: "notificationTtl", updateAllLimits: "updateAllLimits" }, ngImport: i0, template: "<bb-card-details-container \n  [paymentCardId]=\"paymentCardId\"\n  [notificationTtl]=\"notificationTtl\"\n  [updateAllLimits]=\"updateAllLimits\"\n></bb-card-details-container>", components: [{ type: i2.CardDetailsContainerComponent, selector: "bb-card-details-container", inputs: ["paymentCardId", "notificationTtl", "updateAllLimits"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardDetailsWidgetComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-card-details-widget',
                    templateUrl: './card-details-widget.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.ActivatedRoute }]; }, propDecorators: { notificationTtl: [{
                type: Input
            }], updateAllLimits: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FyZC1kZXRhaWxzLXdpZGdldC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL2NhcmQtZGV0YWlscy13aWRnZXQtYW5nL3NyYy9jb21wb25lbnRzL2NhcmQtZGV0YWlscy13aWRnZXQvY2FyZC1kZXRhaWxzLXdpZGdldC5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL2NhcmQtZGV0YWlscy13aWRnZXQtYW5nL3NyYy9jb21wb25lbnRzL2NhcmQtZGV0YWlscy13aWRnZXQvY2FyZC1kZXRhaWxzLXdpZGdldC5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVqRCxPQUFPLEVBQUUsYUFBYSxFQUFjLE1BQU0sTUFBTSxDQUFDO0FBQ2pELE9BQU8sRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7Ozs7QUFNNUMsTUFBTSxPQUFPLDBCQUEwQjtJQTJCckMsWUFBNkIsS0FBcUI7UUFBckIsVUFBSyxHQUFMLEtBQUssQ0FBZ0I7UUFoQnpDLGtCQUFhLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLGNBQWMsQ0FBQyxDQUFDLElBQUksQ0FDMUUsR0FBRyxDQUFDLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FBQyxZQUFzQixDQUFDLENBQzlDLENBQUM7SUFjbUQsQ0FBQztJQVo5QyxhQUFhLENBQUMsS0FBcUIsRUFBRSxLQUFhO1FBQ3hELE1BQU0sVUFBVSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBMEIsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFFeEYsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUU7WUFDakIsT0FBTyxVQUFVLENBQUM7U0FDbkI7UUFFRCx1RUFBdUU7UUFDdkUsT0FBTyxhQUFhLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FDNUUsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQ3hDLENBQUM7SUFDSixDQUFDOzt3SEExQlUsMEJBQTBCOzRHQUExQiwwQkFBMEIsa0pDVHZDLG1MQUk2Qjs0RkRLaEIsMEJBQTBCO2tCQUp0QyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSx3QkFBd0I7b0JBQ2xDLFdBQVcsRUFBRSxzQ0FBc0M7aUJBQ3BEO3FHQUtVLGVBQWU7c0JBQXZCLEtBQUs7Z0JBS0csZUFBZTtzQkFBdkIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFjdGl2YXRlZFJvdXRlLCBQYXJhbU1hcCB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBjb21iaW5lTGF0ZXN0LCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAsIHBsdWNrIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdiYi1jYXJkLWRldGFpbHMtd2lkZ2V0JyxcbiAgdGVtcGxhdGVVcmw6ICcuL2NhcmQtZGV0YWlscy13aWRnZXQuY29tcG9uZW50Lmh0bWwnLFxufSlcbmV4cG9ydCBjbGFzcyBDYXJkRGV0YWlsc1dpZGdldENvbXBvbmVudCB7XG4gIC8qKlxuICAgKiBOb3RpZmljYXRpb24gdGltZW91dCB0aW1lciB2YWx1ZSBjb25maWd1cmF0aW9uXG4gICAqL1xuICBASW5wdXQoKSBub3RpZmljYXRpb25UdGw/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIEVuYWJsZSB0byBzZW5kIG11bHRpcGxlIGxpbWl0cyB0byB0aGUgQVBJIHdoZW4gdXBkYXRpbmcgdmFsdWVzXG4gICAqL1xuICBASW5wdXQoKSB1cGRhdGVBbGxMaW1pdHM/OiBib29sZWFuO1xuXG4gIHJlYWRvbmx5IHBheW1lbnRDYXJkSWQgPSB0aGlzLmdldFJvdXRlUGFyYW0odGhpcy5yb3V0ZSwgJ3NlbGVjdGVkQ2FyZCcpLnBpcGUoXG4gICAgbWFwKChzZWxlY3RlZENhcmQpID0+IHNlbGVjdGVkQ2FyZCBhcyBzdHJpbmcpLFxuICApO1xuXG4gIHByaXZhdGUgZ2V0Um91dGVQYXJhbShyb3V0ZTogQWN0aXZhdGVkUm91dGUsIHBhcmFtOiBzdHJpbmcpOiBPYnNlcnZhYmxlPHN0cmluZyB8IG51bGw+IHtcbiAgICBjb25zdCBwYXJhbVZhbHVlID0gcm91dGUucGFyYW1NYXAucGlwZShwbHVjazxQYXJhbU1hcCwgc3RyaW5nIHwgbnVsbD4oJ3BhcmFtcycsIHBhcmFtKSk7XG5cbiAgICBpZiAoIXJvdXRlLnBhcmVudCkge1xuICAgICAgcmV0dXJuIHBhcmFtVmFsdWU7XG4gICAgfVxuXG4gICAgLy8gRW5zdXJlIHRoYXQgbGV2ZWwgdGhhdCBoYXMgYWN0dWFsIHZhbHVlIGtlZXBzIGl0IGZyb20gYmVpbmcgY2xlYXJlZC5cbiAgICByZXR1cm4gY29tYmluZUxhdGVzdChwYXJhbVZhbHVlLCB0aGlzLmdldFJvdXRlUGFyYW0ocm91dGUucGFyZW50LCBwYXJhbSkpLnBpcGUoXG4gICAgICBtYXAoKHBhcmFtcykgPT4gcGFyYW1zWzBdIHx8IHBhcmFtc1sxXSksXG4gICAgKTtcbiAgfVxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IHJvdXRlOiBBY3RpdmF0ZWRSb3V0ZSkge31cbn1cbiIsIjxiYi1jYXJkLWRldGFpbHMtY29udGFpbmVyIFxuICBbcGF5bWVudENhcmRJZF09XCJwYXltZW50Q2FyZElkXCJcbiAgW25vdGlmaWNhdGlvblR0bF09XCJub3RpZmljYXRpb25UdGxcIlxuICBbdXBkYXRlQWxsTGltaXRzXT1cInVwZGF0ZUFsbExpbWl0c1wiXG4+PC9iYi1jYXJkLWRldGFpbHMtY29udGFpbmVyPiJdfQ==