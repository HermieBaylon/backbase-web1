import { Component, Directive } from '@angular/core';
import { PaymentCardContainerBase } from '@backbase/cards-common-ang';
import { BbTemplate } from '@backbase/foundation-ang/core';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/cards-common-ang";
import * as i2 from "@backbase/ui-ang/notification";
import * as i3 from "../bb-payment-card-summary/payment-card-summary.component";
import * as i4 from "../bb-payment-card-controls/payment-card-controls.component";
import * as i5 from "@angular/common";
export class PaymentCardComponent extends PaymentCardContainerBase {
    constructor(cardsService, cd, notificationService) {
        super(cardsService, cd, notificationService);
        this.cardsService = cardsService;
        this.cd = cd;
        this.notificationService = notificationService;
        this.hostRef = this;
    }
    ngOnInit() {
        var _a, _b, _c, _d;
        /* eslint-disable max-len */
        const cardDetailsLocalizations = {
            activationErrorHeader: $localize `:Error@@card.details.activation.notification.errorHeader:Error`,
            activationErrorMessage: $localize `:Failed to Activate Card. Unable to proceed, please try again@@card.details.activation.notification.errorBody:Failed to Activate Card. Unable to proceed, please try again.`,
            activationSuccessHeader: $localize `:Card Activated@@card.details.activation.notification.successHeader:Card Activated.`,
            lockErrorHeader: $localize `:Error@@card.details.lock.notification.errorHeader:Error`,
            lockErrorMessage: $localize `:Card number cannot be locked, try again later|Lock Error Message@@card.details.lock.notification.errorMessage:Card number ending with ${(_a = this.paymentCard) === null || _a === void 0 ? void 0 : _a.number}:Card Number: cannot be locked! Try again later.`,
            lockSuccessHeader: $localize `:Card locked@@card.details.lock.notification.successHeader:Card locked`,
            lockSuccessMessage: $localize `:Card number locked|Successful lock message@@card.details.lock.notification.successMessage:Card number ending with ${(_b = this.paymentCard) === null || _b === void 0 ? void 0 : _b.number}:Card Number: has been locked.`,
            replacementErrorHeader: $localize `:Error@@card.details.replacement.notification.errorHeader:Error`,
            replacementErrorMessage: $localize `:Can't request card replacement. Try again@@card.details.replacement.notification.errorBody:Unable to request a card replacement. Try again later.`,
            replacementSuccessHeader: $localize `:New card ordered header@@card.details.replacement.notification.successHeader:New card ordered`,
            replacementSuccessMessage: $localize `:New card ordered@@card.details.replacement.notification.successBody:A new card has been ordered.`,
            requestNewPinSuccessMessage: $localize `:New PIN requested@@card.details.pin.notification.requestNewPinSuccessMessage:New PIN requested`,
            requestPinErrorMessage: $localize `:Can't request PIN. Try again@@card.details.requestPin.notification.errorBody:Can't request PIN.  Please try again later.`,
            resetPinSuccessMessage: $localize `:PIN successfully reset@@card.details.pin.notification.resetPinSuccessMessage:PIN successfully reset`,
            resetPinErrorMessage: $localize `:Unable to change PIN, try again@@card.details.resetPin.notification.errorBody:Unable to change PIN.  Please try again later.`,
            resetInvalidPinMessage: $localize `:Unable to change PIN, validations not meet@@card.details.pin.notification.resetInvalidPinMessage:Unable to change PIN. New PIN and confirm don't match`,
            unlockErrorHeader: $localize `:Error@@card.details.unlock.notification.errorHeader:Error`,
            unlockErrorMessage: $localize `:Card number cannot be unlocked, try again later|Unlock Error Message@@card.details.unlock.notification.errorMessage:Card number ending with ${(_c = this.paymentCard) === null || _c === void 0 ? void 0 : _c.number}:Card Number: cannot be unlocked! Try again later.`,
            unlockSuccessHeader: $localize `:Card unlocked@@card.details.unlock.notification.successHeader:Card unlocked`,
            unlockSuccessMessage: $localize `:Card number unlocked|Successful unlock Error Message@@card.details.unlock.notification.successMessage:Card number ending with ${(_d = this.paymentCard) === null || _d === void 0 ? void 0 : _d.number}:Card Number: has been unlocked.`,
            updateLimitErrorHeader: $localize `:Update Limit Error Header@@card.details.limit.notification.errorHeader:`,
            updateLimitErrorMessage: $localize `:Unable to change card limit@@card.details.limit.notification.errorBody:Unable to change card limit`,
            updateLimitSuccessHeader: $localize `:Limit changed header@@card.details.limit.notification.successHeader:Limit changed`,
            updateLimitSuccessMessage: $localize `:Card limit changed successfully@@card.details.limit.notification.changeLimitSuccessMessage:Card limit changed successfully`,
        };
        this.localizations = Object.assign({}, cardDetailsLocalizations);
    }
}
PaymentCardComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentCardComponent, deps: [{ token: i1.CardsService }, { token: i0.ChangeDetectorRef }, { token: i2.NotificationService }], target: i0.ɵɵFactoryTarget.Component });
PaymentCardComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: PaymentCardComponent, selector: "bb-payment-card", usesInheritance: true, ngImport: i0, template: "<ng-container bbCardDetailsPaymentCardCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbCardDetailsPaymentCardCustomizable let-hostRef>\n  <bb-payment-card-summary\n    [paymentCard]=\"hostRef.paymentCard\"\n  ></bb-payment-card-summary>\n\n  <bb-card-details-payment-card-controls\n    [paymentCard]=\"hostRef.paymentCard\"\n    [isLockLoading]=\"hostRef.isLockLoading\"\n    [isInitiateReplacementLoading]=\"hostRef.isInitiateReplacementLoading\"\n    [isInitiateActivationLoading]=\"hostRef.isInitiateActivationLoading\"\n    [isResetPinLoading]=\"hostRef.isResetPinLoading\"\n    (updateLockStatus)=\"hostRef.onUpdateLockStatus($event)\"\n    (initiateReplacement)=\"hostRef.onInitiateReplacement($event)\"\n    (initiateActivation)=\"hostRef.onInitiateActivation($event)\"\n    (resetPin)=\"hostRef.onResetPin($event)\"\n    (requestPin)=\"hostRef.onRequestPin($event)\"\n    *ngIf=\"hostRef.paymentCard?.status !== 'CANCELED'\"\n  ></bb-card-details-payment-card-controls>\n\n  <bb-payment-card-limits\n    [paymentCard]=\"hostRef.paymentCard\"\n    [isLimitsLoading]=\"hostRef.isLimitsLoading\"\n    *ngIf=\"hostRef.paymentCard?.status === 'ACTIVE'\"\n    (updateLimit)=\"hostRef.onUpdateLimit($event)\"\n  ></bb-payment-card-limits>\n</ng-template>", components: [{ type: i0.forwardRef(function () { return i3.PaymentCardSummaryComponent; }), selector: "bb-payment-card-summary", inputs: ["paymentCard"] }, { type: i0.forwardRef(function () { return i4.PaymentCardControlsComponent; }), selector: "bb-card-details-payment-card-controls" }, { type: i0.forwardRef(function () { return i1.PaymentCardLimitsComponent; }), selector: "bb-payment-card-limits", inputs: ["paymentCard", "isLimitsLoading"], outputs: ["updateLimit"] }], directives: [{ type: i0.forwardRef(function () { return CardDetailsPaymentCardCustomizableDirective; }), selector: "[bbCardDetailsPaymentCardCustomizable]" }, { type: i0.forwardRef(function () { return i5.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentCardComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payment-card',
                    templateUrl: './payment-card.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.CardsService }, { type: i0.ChangeDetectorRef }, { type: i2.NotificationService }]; } });
export class CardDetailsPaymentCardCustomizableDirective extends BbTemplate {
}
CardDetailsPaymentCardCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardDetailsPaymentCardCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
CardDetailsPaymentCardCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: CardDetailsPaymentCardCustomizableDirective, selector: "[bbCardDetailsPaymentCardCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardDetailsPaymentCardCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbCardDetailsPaymentCardCustomizable]',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,