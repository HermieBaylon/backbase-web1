import * as i1$1 from '@backbase/cards-common-ang';
import { PaymentCardControlsBase, PaymentCardStatus, PaymentCardLockStatus, PaymentCardContainerBase, BaseWidgetPropertiesService, filterInputParameters, CardService, CardsCommonModule } from '@backbase/cards-common-ang';
export { CardsBackendError, LimitChannelMappingConfigToken, PaymentCardLockStatus, PaymentCardReplacementReason, PaymentCardReplacementStatus, PaymentCardStatus, ReplacementReasonMappingConfigToken, ReplacementStatusMappingConfigToken, StatusMappingConfigToken } from '@backbase/cards-common-ang';
import * as i4 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i0 from '@angular/core';
import { Component, Directive, Input, Injectable, Optional, NgModule } from '@angular/core';
import * as i6 from '@angular/forms';
import { FormsModule } from '@angular/forms';
import * as i1$2 from '@backbase/foundation-ang/core';
import { BbTemplate, BackbaseCoreModule } from '@backbase/foundation-ang/core';
import * as i3$1 from '@backbase/ui-ang/alert';
import { AlertModule } from '@backbase/ui-ang/alert';
import * as i4$1 from '@backbase/ui-ang/empty-state';
import { EmptyStateModule } from '@backbase/ui-ang/empty-state';
import * as i3 from '@backbase/ui-ang/loading-indicator';
import { LoadingIndicatorModule } from '@backbase/ui-ang/loading-indicator';
import * as i2$1 from '@backbase/ui-ang/payment-card';
import { PaymentCardModule } from '@backbase/ui-ang/payment-card';
import * as i2 from '@backbase/ui-ang/switch';
import { SwitchModule } from '@backbase/ui-ang/switch';
import * as i1 from '@backbase/ui-ang/icon';
import * as i2$2 from '@backbase/ui-ang/notification';
import { BehaviorSubject, of, combineLatest } from 'rxjs';
import { tap, catchError, map, pluck } from 'rxjs/operators';
import * as i1$3 from '@angular/router';

class PaymentCardControlsComponent extends PaymentCardControlsBase {
    get lockStatus() {
        return this.isLocked || false;
    }
    set lockStatus(value) {
        if (value) {
            this.onLock();
        }
        else {
            this.onUnlock();
        }
    }
}
PaymentCardControlsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentCardControlsComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });
PaymentCardControlsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: PaymentCardControlsComponent, selector: "bb-card-details-payment-card-controls", usesInheritance: true, ngImport: i0, template: "<ng-container bbCardDetailsPaymentCardControlsCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbCardDetailsPaymentCardControlsCustomizable let-hostRef>\n  <div class=\"bb-block--lg bb-list card\" *ngIf=\"hostRef.paymentCard\">\n   \n    <ng-container *ngIf=\"hostRef.paymentCard.status === 'ACTIVE'\">\n\n      <div class=\"card-header\">\n        <h2 i18n=\"Self service heading|Heading for the Self service section@@card.selfService.heading\">\n          Self service\n        </h2>\n      </div>\n      <div class=\"card-body\">\n        <div class=\"bb-list\">\n          <div class=\"bb-list__item bb-stack\">\n            <div class=\"bb-stack bb-stack--align-top\">\n              <bb-icon-ui \n                name=\"lock\"\n                size=\"md\"\n                class=\"bb-stack__item\"\n              ></bb-icon-ui>\n              <div class=\"bb-stack__item\">\n                <h5 class=\"bb-block--no-margin\" i18n=\"Lock or unlock card|Lock or unlock card@@card.controls.lockStatus.heading\">\n                  Lock card\n                </h5>\n                <span class=\"bb-text-support text-small\" i18n=\"Lock card description|Subtitle for lock card@@card.controls.lockStatus.description\">\n                  Freeze your card temporarily\n                </span>\n              </div>\n            </div>\n    \n            <form>\n              <bb-switch-ui\n                [id]=\"hostRef.lockStatus\"\n                *ngIf=\"!hostRef.isLockLoading\"\n                aria-label=\"lock/unlock your payment card, Freeze your card temporarily\"\n                i18n-aria-label=\"lock/unlock aria-label@@card.controls.lock.switch.aria-label\"\n                name=\"lockStatus\"\n                [(ngModel)]=\"hostRef.lockStatus\"\n              >\n              </bb-switch-ui>\n              <bb-loading-indicator-ui *ngIf=\"hostRef.isLockLoading\" loaderSize=\"sm\"></bb-loading-indicator-ui>\n            </form>\n          </div>\n    \n          <div class=\"bb-list__item bb-stack bb-payment-card-self-service-row\">\n            <div class=\"bb-stack bb-stack--align-top bb-stack__item bb-payment-card-self-service-row__description\">\n              <bb-icon-ui \n                name=\"autorenew\"\n                size=\"md\"\n                class=\"bb-stack__item\"\n              ></bb-icon-ui>\n            \n              <div class=\"bb-stack__item\">\n                <h5 class=\"bb-block--no-margin\" i18n=\"Replace card|Replace card@@card.controls.replaceCard.heading\">\n                  Replace card\n                </h5>\n                <span class=\"bb-text-support text-small\" i18n=\"Replace card description|Subtitle for replace card@@card.controls.replaceCard.description\">\n                  Replace lost, stolen or damaged cards\n                </span>\n              </div>\n            </div>\n            <div class=\"bb-stack__item bb-payment-card-self-service-row__button\">\n              <bb-payment-card-initiate-replacement\n                [paymentCard]=\"hostRef.paymentCard\"\n                [isInitiateReplacementLoading]=\"hostRef.isInitiateReplacementLoading\"\n                (initiateReplacement)=\"hostRef.onInitiateReplacement($event)\"\n              ></bb-payment-card-initiate-replacement>\n            </div>\n          </div>\n    \n          <div class=\"bb-list__item bb-stack bb-payment-card-self-service-row\">\n            <div class=\"bb-stack bb-stack--align-top bb-stack__item bb-payment-card-self-service-row__description\">\n              <bb-icon-ui \n                name=\"dialpad\"\n                size=\"md\"\n                class=\"bb-stack__item\"\n              ></bb-icon-ui>\n    \n              <div class=\"bb-stack__item\">\n                <ng-container *ngIf=\"hostRef.resetPinMode === 'RESET'\">\n                  <h5 class=\"bb-block--no-margin\" i18n=\"reset PIN|Reset PIN@@card.controls.resetPin.heading\">\n                    Reset PIN\n                  </h5>\n                  <span class=\"bb-text-support text-small\" i18n=\"Reset PIN description|Subtitle for reset PIN@@card.controls.resetPin.description\">\n                    Change your PIN online\n                  </span>\n                </ng-container>\n                <ng-container *ngIf=\"hostRef.resetPinMode === 'REQUEST'\">\n                  <h5 class=\"bb-block--no-margin\" i18n=\"Request PIN|Request PIN@@card.controls.requestPin.heading\" >\n                    Request new PIN\n                  </h5>\n                  <span class=\"bb-text-support text-small\" i18n=\"Request PIN description|Subtitle for request PIN@@card.controls.requestPin.description\">\n                    Request a new PIN by mail\n                  </span>\n                </ng-container>\n              </div>\n            </div>\n            <div class=\"bb-stack__item bb-payment-card-self-service-row__button\">\n              <bb-payment-card-reset-pin \n                [paymentCard]=\"hostRef.paymentCard\" \n                [mode]=\"hostRef.resetPinMode\"\n                [isResetPinLoading]=\"hostRef.isResetPinLoading\"\n                (resetPin)=\"hostRef.onResetPin($event)\"\n                (requestPin)=\"hostRef.onRequestPin($event)\"\n              ></bb-payment-card-reset-pin>\n            </div>\n          </div>\n        </div>\n      </div>\n      \n    </ng-container>\n    \n    <ng-container *ngIf=\"hostRef.paymentCard.status === 'INACTIVE'\">\n      <div class=\"card-body\">\n        <div class=\"bb-block bb-block--lg\">\n          <h2 i18n=\"Card activation heading|Heading for the Card activation section@@card.cardActivation.heading\">\n            Card activation\n          </h2>\n          <p \n            class=\"bb-text-support\"\n            i18n=\"Activation needed|Text for activation needed@@card.controls.activate.text\"\n          >\n            In order to use this card you need to activate it first.\n          </p>\n        </div>\n        <div class=\"bb-payment-card-self-service__inactive-container\">\n          <bb-payment-card-initiate-activation\n            [paymentCard]=\"hostRef.paymentCard\"\n            [isInitiateActivationLoading]=\"hostRef.isInitiateActivationLoading\"\n            (initiateActivation)=\"hostRef.onInitiateActivation($event)\"\n          ></bb-payment-card-initiate-activation>\n        </div>\n      </div>\n      \n    </ng-container>\n  </div>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i1.IconComponent; }), selector: "bb-icon-ui", inputs: ["name", "inverse", "size", "color", "animate", "aria-label", "cropped", "backgroundType"] }, { type: i0.forwardRef(function () { return i2.SwitchComponent; }), selector: "bb-switch-ui", inputs: ["labelPosition"] }, { type: i0.forwardRef(function () { return i3.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i0.forwardRef(function () { return i1$1.PaymentCardInitiateReplacementComponent; }), selector: "bb-payment-card-initiate-replacement", inputs: ["paymentCard", "isInitiateReplacementLoading"], outputs: ["initiateReplacement"] }, { type: i0.forwardRef(function () { return i1$1.PaymentCardResetPinComponent; }), selector: "bb-payment-card-reset-pin", inputs: ["paymentCard", "mode", "isResetPinLoading"], outputs: ["resetPin", "requestPin"] }, { type: i0.forwardRef(function () { return i1$1.PaymentCardInitiateActivationComponent; }), selector: "bb-payment-card-initiate-activation", inputs: ["paymentCard", "isInitiateActivationLoading"], outputs: ["initiateActivation"] }], directives: [{ type: i0.forwardRef(function () { return CardDetailsPaymentCardControlsCustomizableDirective; }), selector: "[bbCardDetailsPaymentCardControlsCustomizable]" }, { type: i0.forwardRef(function () { return i4.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i6.ɵNgNoValidate; }), selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i0.forwardRef(function () { return i6.NgControlStatusGroup; }), selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i0.forwardRef(function () { return i6.NgForm; }), selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i0.forwardRef(function () { return i6.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0.forwardRef(function () { return i6.NgModel; }), selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentCardControlsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-card-details-payment-card-controls',
                    templateUrl: './payment-card-controls.component.html',
                }]
        }] });
class CardDetailsPaymentCardControlsCustomizableDirective extends BbTemplate {
}
CardDetailsPaymentCardControlsCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardDetailsPaymentCardControlsCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
CardDetailsPaymentCardControlsCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: CardDetailsPaymentCardControlsCustomizableDirective, selector: "[bbCardDetailsPaymentCardControlsCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardDetailsPaymentCardControlsCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbCardDetailsPaymentCardControlsCustomizable]',
                }]
        }] });

class PaymentCardSummaryComponent {
    constructor() {
        this.hostRef = this;
    }
    /**
     * Translate the payment card status/lock status/replacement status into a displayable
     * PaymentCardDisplayState.
     */
    getDisplayState() {
        if (this.paymentCard && this.paymentCard.status === PaymentCardStatus.Inactive) {
            return 'INACTIVE';
        }
        if (this.paymentCard && this.paymentCard.status === PaymentCardStatus.Canceled) {
            return 'CANCELLED';
        }
        if (this.paymentCard && this.paymentCard.status === PaymentCardStatus.Expired) {
            return 'EXPIRED';
        }
        if (this.paymentCard && this.paymentCard.lockStatus === PaymentCardLockStatus.Locked) {
            return 'LOCKED';
        }
        return undefined;
    }
    ngOnInit() {
        if (typeof this.paymentCard === 'undefined') {
            throw new Error(`"paymentCard" input is required in "${this.constructor.name}"`);
        }
    }
}
PaymentCardSummaryComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentCardSummaryComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
PaymentCardSummaryComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: PaymentCardSummaryComponent, selector: "bb-payment-card-summary", inputs: { paymentCard: "paymentCard" }, ngImport: i0, template: "<ng-container bbCardDetailsPaymentCardSummaryCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbCardDetailsPaymentCardSummaryCustomizable let-hostRef>\n  <div class=\"bb-payment-card-summary\" *ngIf=\"hostRef.paymentCard\">\n    <div class=\"bb-block bb-block--xl\">\n      <div class=\"row\">\n        <div class=\"col-auto\">\n          <div class=\" bb-payment-card-component\">\n            <bb-payment-card-state-wrapper-ui [state]=\"hostRef.getDisplayState()\">\n              <bb-payment-card-ui [paymentCard]=\"hostRef.paymentCard\"></bb-payment-card-ui>\n            </bb-payment-card-state-wrapper-ui>\n          </div>\n        </div>\n        <div class=\"col-12 order-first col-sm order-sm-last\">\n          <div class=\"bb-block bb-block--xl\">\n            <h2 i18n=\"Card payment header|Card payment title@@card.summary.heading\">\n              {{ hostRef.paymentCard.name }} {{ hostRef.paymentCard.type | lowercase }} card\n            </h2>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <ng-container *ngIf=\"hostRef.paymentCard.replacementStatus === 'UNDER_REPLACEMENT'\">\n      <div class=\"bb-block bb-block--xl\">\n        <bb-alert-ui\n          modifier=\"warning\"\n          title=\"Card under replacement\"\n          i18n-title=\"Card under replacement title|Card under replacement title@@card.summary.underReplacement.title\"\n          message=\"New cards usually take 3-5 business days to arrive.\"\n          i18n-message=\"Card under replacement text|Card under replacement@@card.summary.underReplacement.subtitle\"\n        ></bb-alert-ui>\n      </div>\n    </ng-container>\n\n    <ng-container *ngIf=\"hostRef.paymentCard.deliveryStatus\">\n      <bb-payment-card-delivery-status\n        [deliveryStatus]=\"hostRef.paymentCard.deliveryStatus\"\n      ></bb-payment-card-delivery-status>\n    </ng-container>\n  </div>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i1$1.PaymentCardStateWrapperComponent; }), selector: "bb-payment-card-state-wrapper,bb-payment-card-state-wrapper-ui", inputs: ["state"] }, { type: i0.forwardRef(function () { return i2$1.PaymentCardComponent; }), selector: "bb-payment-card-ui", inputs: ["paymentCard", "paymentCardNumberFormat"] }, { type: i0.forwardRef(function () { return i3$1.AlertComponent; }), selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i0.forwardRef(function () { return i1$1.PaymentCardDeliveryStatusComponent; }), selector: "bb-payment-card-delivery-status", inputs: ["deliveryStatus"] }], directives: [{ type: i0.forwardRef(function () { return CardDetailsPaymentCardSummaryCustomizableDirective; }), selector: "[bbCardDetailsPaymentCardSummaryCustomizable]" }, { type: i0.forwardRef(function () { return i4.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "lowercase": i0.forwardRef(function () { return i4.LowerCasePipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentCardSummaryComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payment-card-summary',
                    templateUrl: './payment-card-summary.component.html',
                }]
        }], propDecorators: { paymentCard: [{
                type: Input
            }] } });
class CardDetailsPaymentCardSummaryCustomizableDirective extends BbTemplate {
}
CardDetailsPaymentCardSummaryCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardDetailsPaymentCardSummaryCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
CardDetailsPaymentCardSummaryCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: CardDetailsPaymentCardSummaryCustomizableDirective, selector: "[bbCardDetailsPaymentCardSummaryCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardDetailsPaymentCardSummaryCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbCardDetailsPaymentCardSummaryCustomizable]',
                }]
        }] });

class PaymentCardComponent extends PaymentCardContainerBase {
    constructor(cardsService, cd, notificationService) {
        super(cardsService, cd, notificationService);
        this.cardsService = cardsService;
        this.cd = cd;
        this.notificationService = notificationService;
        this.hostRef = this;
    }
    ngOnInit() {
        var _a, _b, _c, _d;
        /* eslint-disable max-len */
        const cardDetailsLocalizations = {
            activationErrorHeader: $localize `:Error@@card.details.activation.notification.errorHeader:Error`,
            activationErrorMessage: $localize `:Failed to Activate Card. Unable to proceed, please try again@@card.details.activation.notification.errorBody:Failed to Activate Card. Unable to proceed, please try again.`,
            activationSuccessHeader: $localize `:Card Activated@@card.details.activation.notification.successHeader:Card Activated.`,
            lockErrorHeader: $localize `:Error@@card.details.lock.notification.errorHeader:Error`,
            lockErrorMessage: $localize `:Card number cannot be locked, try again later|Lock Error Message@@card.details.lock.notification.errorMessage:Card number ending with ${(_a = this.paymentCard) === null || _a === void 0 ? void 0 : _a.number}:Card Number: cannot be locked! Try again later.`,
            lockSuccessHeader: $localize `:Card locked@@card.details.lock.notification.successHeader:Card locked`,
            lockSuccessMessage: $localize `:Card number locked|Successful lock message@@card.details.lock.notification.successMessage:Card number ending with ${(_b = this.paymentCard) === null || _b === void 0 ? void 0 : _b.number}:Card Number: has been locked.`,
            replacementErrorHeader: $localize `:Error@@card.details.replacement.notification.errorHeader:Error`,
            replacementErrorMessage: $localize `:Can't request card replacement. Try again@@card.details.replacement.notification.errorBody:Unable to request a card replacement. Try again later.`,
            replacementSuccessHeader: $localize `:New card ordered header@@card.details.replacement.notification.successHeader:New card ordered`,
            replacementSuccessMessage: $localize `:New card ordered@@card.details.replacement.notification.successBody:A new card has been ordered.`,
            requestNewPinSuccessMessage: $localize `:New PIN requested@@card.details.pin.notification.requestNewPinSuccessMessage:New PIN requested`,
            requestPinErrorMessage: $localize `:Can't request PIN. Try again@@card.details.requestPin.notification.errorBody:Can't request PIN.  Please try again later.`,
            resetPinSuccessMessage: $localize `:PIN successfully reset@@card.details.pin.notification.resetPinSuccessMessage:PIN successfully reset`,
            resetPinErrorMessage: $localize `:Unable to change PIN, try again@@card.details.resetPin.notification.errorBody:Unable to change PIN.  Please try again later.`,
            resetInvalidPinMessage: $localize `:Unable to change PIN, validations not meet@@card.details.pin.notification.resetInvalidPinMessage:Unable to change PIN. New PIN and confirm don't match`,
            unlockErrorHeader: $localize `:Error@@card.details.unlock.notification.errorHeader:Error`,
            unlockErrorMessage: $localize `:Card number cannot be unlocked, try again later|Unlock Error Message@@card.details.unlock.notification.errorMessage:Card number ending with ${(_c = this.paymentCard) === null || _c === void 0 ? void 0 : _c.number}:Card Number: cannot be unlocked! Try again later.`,
            unlockSuccessHeader: $localize `:Card unlocked@@card.details.unlock.notification.successHeader:Card unlocked`,
            unlockSuccessMessage: $localize `:Card number unlocked|Successful unlock Error Message@@card.details.unlock.notification.successMessage:Card number ending with ${(_d = this.paymentCard) === null || _d === void 0 ? void 0 : _d.number}:Card Number: has been unlocked.`,
            updateLimitErrorHeader: $localize `:Update Limit Error Header@@card.details.limit.notification.errorHeader:`,
            updateLimitErrorMessage: $localize `:Unable to change card limit@@card.details.limit.notification.errorBody:Unable to change card limit`,
            updateLimitSuccessHeader: $localize `:Limit changed header@@card.details.limit.notification.successHeader:Limit changed`,
            updateLimitSuccessMessage: $localize `:Card limit changed successfully@@card.details.limit.notification.changeLimitSuccessMessage:Card limit changed successfully`,
        };
        this.localizations = Object.assign({}, cardDetailsLocalizations);
    }
}
PaymentCardComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentCardComponent, deps: [{ token: i1$1.CardsService }, { token: i0.ChangeDetectorRef }, { token: i2$2.NotificationService }], target: i0.ɵɵFactoryTarget.Component });
PaymentCardComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: PaymentCardComponent, selector: "bb-payment-card", usesInheritance: true, ngImport: i0, template: "<ng-container bbCardDetailsPaymentCardCustomizable [bbHostRef]=\"hostRef\"></ng-container>\n\n<ng-template bbCardDetailsPaymentCardCustomizable let-hostRef>\n  <bb-payment-card-summary\n    [paymentCard]=\"hostRef.paymentCard\"\n  ></bb-payment-card-summary>\n\n  <bb-card-details-payment-card-controls\n    [paymentCard]=\"hostRef.paymentCard\"\n    [isLockLoading]=\"hostRef.isLockLoading\"\n    [isInitiateReplacementLoading]=\"hostRef.isInitiateReplacementLoading\"\n    [isInitiateActivationLoading]=\"hostRef.isInitiateActivationLoading\"\n    [isResetPinLoading]=\"hostRef.isResetPinLoading\"\n    (updateLockStatus)=\"hostRef.onUpdateLockStatus($event)\"\n    (initiateReplacement)=\"hostRef.onInitiateReplacement($event)\"\n    (initiateActivation)=\"hostRef.onInitiateActivation($event)\"\n    (resetPin)=\"hostRef.onResetPin($event)\"\n    (requestPin)=\"hostRef.onRequestPin($event)\"\n    *ngIf=\"hostRef.paymentCard?.status !== 'CANCELED'\"\n  ></bb-card-details-payment-card-controls>\n\n  <bb-payment-card-limits\n    [paymentCard]=\"hostRef.paymentCard\"\n    [isLimitsLoading]=\"hostRef.isLimitsLoading\"\n    *ngIf=\"hostRef.paymentCard?.status === 'ACTIVE'\"\n    (updateLimit)=\"hostRef.onUpdateLimit($event)\"\n  ></bb-payment-card-limits>\n</ng-template>", components: [{ type: i0.forwardRef(function () { return PaymentCardSummaryComponent; }), selector: "bb-payment-card-summary", inputs: ["paymentCard"] }, { type: i0.forwardRef(function () { return PaymentCardControlsComponent; }), selector: "bb-card-details-payment-card-controls" }, { type: i0.forwardRef(function () { return i1$1.PaymentCardLimitsComponent; }), selector: "bb-payment-card-limits", inputs: ["paymentCard", "isLimitsLoading"], outputs: ["updateLimit"] }], directives: [{ type: i0.forwardRef(function () { return CardDetailsPaymentCardCustomizableDirective; }), selector: "[bbCardDetailsPaymentCardCustomizable]" }, { type: i0.forwardRef(function () { return i4.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: PaymentCardComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-payment-card',
                    templateUrl: './payment-card.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$1.CardsService }, { type: i0.ChangeDetectorRef }, { type: i2$2.NotificationService }]; } });
class CardDetailsPaymentCardCustomizableDirective extends BbTemplate {
}
CardDetailsPaymentCardCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardDetailsPaymentCardCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
CardDetailsPaymentCardCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: CardDetailsPaymentCardCustomizableDirective, selector: "[bbCardDetailsPaymentCardCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardDetailsPaymentCardCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbCardDetailsPaymentCardCustomizable]',
                }]
        }] });

class WidgetPropertiesService extends BaseWidgetPropertiesService {
    constructor(itemModel) {
        super(itemModel);
        this.itemModel = itemModel;
    }
}
WidgetPropertiesService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: WidgetPropertiesService, deps: [{ token: i1$2.ItemModel, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
WidgetPropertiesService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: WidgetPropertiesService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: WidgetPropertiesService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1$2.ItemModel, decorators: [{
                    type: Optional
                }] }]; } });

class CardDetailsContainerComponent {
    constructor(cardService, cd, widgetPropertiesService) {
        this.cardService = cardService;
        this.cd = cd;
        this.widgetPropertiesService = widgetPropertiesService;
        this.notificationTtlSubject = new BehaviorSubject(undefined);
        this.updateAllLimitsSubject = new BehaviorSubject(undefined);
        this.handleError = (errorResponse) => {
            this.errors = errorResponse;
            return of(undefined);
        };
    }
    /**
     * Notification timeout timer value configuration
     */
    // eslint-disable-next-line
    set notificationTtlValue(value) {
        this.notificationTtlSubject.next(value);
    }
    /**
     * Enable to send multiple limits to the API when updating values
     */
    set updateAllLimitsValue(value) {
        this.updateAllLimitsSubject.next(value);
    }
    ngOnInit() {
        if (typeof this.paymentCardId === 'undefined') {
            throw new Error(`"paymentCardId" input is required in "${this.constructor.name}"`);
        }
        this.cardService.getPaymentCardFrom(this.paymentCardId);
        this.paymentCard = this.cardService.getPaymentCard().pipe(tap(() => {
            this.cd.markForCheck();
        }), catchError(this.handleError));
    }
    get notificationTtl() {
        return filterInputParameters(this.notificationTtlSubject, this.widgetPropertiesService.notificationTtl);
    }
    get updateAllLimits() {
        return filterInputParameters(this.updateAllLimitsSubject, this.widgetPropertiesService.updateAllLimits);
    }
}
CardDetailsContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardDetailsContainerComponent, deps: [{ token: i1$1.CardService }, { token: i0.ChangeDetectorRef }, { token: WidgetPropertiesService, optional: true }], target: i0.ɵɵFactoryTarget.Component });
CardDetailsContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: CardDetailsContainerComponent, selector: "bb-card-details-container", inputs: { paymentCardId: "paymentCardId", notificationTtlValue: ["notificationTtl", "notificationTtlValue"], updateAllLimitsValue: ["updateAllLimits", "updateAllLimitsValue"] }, providers: [CardService, WidgetPropertiesService], ngImport: i0, template: "<ng-container *ngIf=\"paymentCardId | async; else emptyState\">\n  <ng-container *ngIf=\"!errors; else errorState\">\n    <ng-container *ngIf=\"paymentCard | async as paymentCard; else loadingState\">\n      <bb-payment-card \n        [paymentCard]=\"paymentCard\" \n        [notificationTtl]=\"(notificationTtl | async) || undefined\"\n        [updateAllLimits]=\"(updateAllLimits | async) || undefined\"\n      ></bb-payment-card>\n    </ng-container>\n  </ng-container>\n</ng-container>\n\n<ng-template #emptyState>\n  <bb-empty-state-ui title=\"No Card Selected\"></bb-empty-state-ui>\n</ng-template>\n\n<ng-template #loadingState>\n  <bb-loading-indicator-ui loaderSize=\"lg\"></bb-loading-indicator-ui>\n</ng-template>\n\n<ng-template #errorState>\n  <bb-payment-card-multiple-error-state [errors]=\"errors\"></bb-payment-card-multiple-error-state>\n</ng-template>\n", components: [{ type: PaymentCardComponent, selector: "bb-payment-card" }, { type: i4$1.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }, { type: i3.LoadingIndicatorComponent, selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i1$1.PaymentCardMultipleErrorStateComponent, selector: "bb-payment-card-multiple-error-state", inputs: ["errors"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i4.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardDetailsContainerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-card-details-container',
                    templateUrl: './card-details-container.component.html',
                    providers: [CardService, WidgetPropertiesService],
                }]
        }], ctorParameters: function () { return [{ type: i1$1.CardService }, { type: i0.ChangeDetectorRef }, { type: WidgetPropertiesService, decorators: [{
                    type: Optional
                }] }]; }, propDecorators: { paymentCardId: [{
                type: Input
            }], notificationTtlValue: [{
                type: Input,
                args: ['notificationTtl']
            }], updateAllLimitsValue: [{
                type: Input,
                args: ['updateAllLimits']
            }] } });

class CardDetailsWidgetComponent {
    constructor(route) {
        this.route = route;
        this.paymentCardId = this.getRouteParam(this.route, 'selectedCard').pipe(map((selectedCard) => selectedCard));
    }
    getRouteParam(route, param) {
        const paramValue = route.paramMap.pipe(pluck('params', param));
        if (!route.parent) {
            return paramValue;
        }
        // Ensure that level that has actual value keeps it from being cleared.
        return combineLatest(paramValue, this.getRouteParam(route.parent, param)).pipe(map((params) => params[0] || params[1]));
    }
}
CardDetailsWidgetComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardDetailsWidgetComponent, deps: [{ token: i1$3.ActivatedRoute }], target: i0.ɵɵFactoryTarget.Component });
CardDetailsWidgetComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: CardDetailsWidgetComponent, selector: "bb-card-details-widget", inputs: { notificationTtl: "notificationTtl", updateAllLimits: "updateAllLimits" }, ngImport: i0, template: "<bb-card-details-container \n  [paymentCardId]=\"paymentCardId\"\n  [notificationTtl]=\"notificationTtl\"\n  [updateAllLimits]=\"updateAllLimits\"\n></bb-card-details-container>", components: [{ type: CardDetailsContainerComponent, selector: "bb-card-details-container", inputs: ["paymentCardId", "notificationTtl", "updateAllLimits"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardDetailsWidgetComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-card-details-widget',
                    templateUrl: './card-details-widget.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1$3.ActivatedRoute }]; }, propDecorators: { notificationTtl: [{
                type: Input
            }], updateAllLimits: [{
                type: Input
            }] } });

const modules = [
    CardsCommonModule,
    SwitchModule,
    LoadingIndicatorModule,
    EmptyStateModule,
    PaymentCardModule,
    AlertModule,
];
const components = [
    CardDetailsWidgetComponent,
    CardDetailsContainerComponent,
    PaymentCardComponent,
    PaymentCardSummaryComponent,
    PaymentCardControlsComponent,
];
const customizables = [
    CardDetailsPaymentCardCustomizableDirective,
    CardDetailsPaymentCardControlsCustomizableDirective,
    CardDetailsPaymentCardSummaryCustomizableDirective,
];
class CardDetailsWidgetModule {
}
CardDetailsWidgetModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardDetailsWidgetModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
CardDetailsWidgetModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardDetailsWidgetModule, declarations: [CardDetailsWidgetComponent,
        CardDetailsContainerComponent,
        PaymentCardComponent,
        PaymentCardSummaryComponent,
        PaymentCardControlsComponent, CardDetailsPaymentCardCustomizableDirective,
        CardDetailsPaymentCardControlsCustomizableDirective,
        CardDetailsPaymentCardSummaryCustomizableDirective], imports: [CommonModule,
        FormsModule, i1$2.BackbaseCoreModule, CardsCommonModule,
        SwitchModule,
        LoadingIndicatorModule,
        EmptyStateModule,
        PaymentCardModule,
        AlertModule], exports: [CardsCommonModule,
        SwitchModule,
        LoadingIndicatorModule,
        EmptyStateModule,
        PaymentCardModule,
        AlertModule, CardDetailsWidgetComponent,
        CardDetailsContainerComponent,
        PaymentCardComponent,
        PaymentCardSummaryComponent,
        PaymentCardControlsComponent, CardDetailsPaymentCardCustomizableDirective,
        CardDetailsPaymentCardControlsCustomizableDirective,
        CardDetailsPaymentCardSummaryCustomizableDirective] });
CardDetailsWidgetModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardDetailsWidgetModule, imports: [[
            CommonModule,
            FormsModule,
            BackbaseCoreModule.withConfig({
                classMap: { CardDetailsWidgetComponent },
            }),
            ...modules,
        ], CardsCommonModule,
        SwitchModule,
        LoadingIndicatorModule,
        EmptyStateModule,
        PaymentCardModule,
        AlertModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: CardDetailsWidgetModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        FormsModule,
                        BackbaseCoreModule.withConfig({
                            classMap: { CardDetailsWidgetComponent },
                        }),
                        ...modules,
                    ],
                    declarations: [...components, ...customizables],
                    exports: [...modules, ...components, ...customizables],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { CardDetailsContainerComponent, CardDetailsPaymentCardControlsCustomizableDirective, CardDetailsPaymentCardCustomizableDirective, CardDetailsPaymentCardSummaryCustomizableDirective, CardDetailsWidgetComponent, CardDetailsWidgetModule, PaymentCardComponent, PaymentCardControlsComponent, PaymentCardSummaryComponent };
//# sourceMappingURL=backbase-card-details-widget-ang.js.map
