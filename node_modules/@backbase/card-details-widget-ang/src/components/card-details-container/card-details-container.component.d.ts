import { ChangeDetectorRef, OnInit } from '@angular/core';
import { CardsBackendError, CardService, PaymentCard } from '@backbase/cards-common-ang';
import { Observable } from 'rxjs';
import { WidgetPropertiesService } from '../../services/widget-properties.service';
import * as i0 from "@angular/core";
export declare class CardDetailsContainerComponent implements OnInit {
    private readonly cardService;
    private readonly cd;
    private readonly widgetPropertiesService;
    private readonly notificationTtlSubject;
    private readonly updateAllLimitsSubject;
    /**
     * Observable of the payment card ID this component should retrieve the card details for.
     */
    paymentCardId: Observable<string> | undefined;
    /**
     * Notification timeout timer value configuration
     */
    set notificationTtlValue(value: number | undefined);
    /**
     * Enable to send multiple limits to the API when updating values
     */
    set updateAllLimitsValue(value: boolean | undefined);
    /**
     * Observable of the payment card
     */
    paymentCard: Observable<PaymentCard | undefined> | undefined;
    /**
     * Information about the backend error, if it occurs.
     */
    errors: CardsBackendError[] | undefined;
    private readonly handleError;
    ngOnInit(): void;
    get notificationTtl(): Observable<number>;
    get updateAllLimits(): Observable<boolean>;
    constructor(cardService: CardService, cd: ChangeDetectorRef, widgetPropertiesService: WidgetPropertiesService);
    static ɵfac: i0.ɵɵFactoryDeclaration<CardDetailsContainerComponent, [null, null, { optional: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<CardDetailsContainerComponent, "bb-card-details-container", never, { "paymentCardId": "paymentCardId"; "notificationTtlValue": "notificationTtl"; "updateAllLimitsValue": "updateAllLimits"; }, {}, never, never>;
}
