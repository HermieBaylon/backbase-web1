import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { TradingCurrenciesPairsItem } from '../model/models';
import { TradingCurrenciesRatesItem } from '../model/models';
import { TradingCurrencyPairItemGet } from '../model/models';
import { TradingCurrencyPairItemPost } from '../model/models';
import { TradingCurrencyPairItemPostResponse } from '../model/models';
import { TraidingCurrencypairFavorite } from '../model/models';
import { ForexConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface GetCurrencypairRequestParams {
    ["query"]?: string;
    ["sort"]?: string;
    ["favorite"]?: boolean;
    ["from"]?: number;
    ["cursor"]?: string;
    ["size"]?: number;
}
export interface GetCurrencypairIdByCurrencypairIdRequestParams {
    ["currencypairId"]: string;
}
export interface GetCurrencyrateRequestParams {
    ["currencypair"]?: Array<string>;
    ["sort"]?: string;
    ["favorite"]?: boolean;
    ["from"]?: number;
    ["cursor"]?: string;
    ["size"]?: number;
}
export interface PostCurrencyPairFavoriteByCurrencypairIdRequestParams {
    ["currencypairId"]: string;
    ["traidingCurrencypairFavorite"]?: TraidingCurrencypairFavorite;
}
export interface PostCurrencyPairTransactionByCurrencypairIdRequestParams {
    ["currencypairId"]: string;
    ["tradingCurrencyPairItemPost"]?: TradingCurrencyPairItemPost;
}
export declare class TradingHttpService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: ForexConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: ForexConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    getCurrencypair(requestParameters: GetCurrencypairRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<TradingCurrenciesPairsItem>>;
    getCurrencypair(requestParameters: GetCurrencypairRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<TradingCurrenciesPairsItem>>>;
    getCurrencypair(requestParameters: GetCurrencypairRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<TradingCurrenciesPairsItem>>>;
    getCurrencypairUrl(requestParameters: GetCurrencypairRequestParams): string;
    getCurrencypairIdByCurrencypairId(requestParameters: GetCurrencypairIdByCurrencypairIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<TradingCurrencyPairItemGet>;
    getCurrencypairIdByCurrencypairId(requestParameters: GetCurrencypairIdByCurrencypairIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<TradingCurrencyPairItemGet>>;
    getCurrencypairIdByCurrencypairId(requestParameters: GetCurrencypairIdByCurrencypairIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<TradingCurrencyPairItemGet>>;
    getCurrencypairIdByCurrencypairIdUrl(requestParameters: GetCurrencypairIdByCurrencypairIdRequestParams): string;
    getCurrencyrate(requestParameters: GetCurrencyrateRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<TradingCurrenciesRatesItem>>;
    getCurrencyrate(requestParameters: GetCurrencyrateRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<TradingCurrenciesRatesItem>>>;
    getCurrencyrate(requestParameters: GetCurrencyrateRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<TradingCurrenciesRatesItem>>>;
    getCurrencyrateUrl(requestParameters: GetCurrencyrateRequestParams): string;
    postCurrencyPairFavoriteByCurrencypairId(requestParameters: PostCurrencyPairFavoriteByCurrencypairIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<string>;
    postCurrencyPairFavoriteByCurrencypairId(requestParameters: PostCurrencyPairFavoriteByCurrencypairIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<string>>;
    postCurrencyPairFavoriteByCurrencypairId(requestParameters: PostCurrencyPairFavoriteByCurrencypairIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<string>>;
    postCurrencyPairFavoriteByCurrencypairIdUrl(requestParameters: PostCurrencyPairFavoriteByCurrencypairIdRequestParams): string;
    postCurrencyPairTransactionByCurrencypairId(requestParameters: PostCurrencyPairTransactionByCurrencypairIdRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<TradingCurrencyPairItemPostResponse>;
    postCurrencyPairTransactionByCurrencypairId(requestParameters: PostCurrencyPairTransactionByCurrencypairIdRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<TradingCurrencyPairItemPostResponse>>;
    postCurrencyPairTransactionByCurrencypairId(requestParameters: PostCurrencyPairTransactionByCurrencypairIdRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<TradingCurrencyPairItemPostResponse>>;
    postCurrencyPairTransactionByCurrencypairIdUrl(requestParameters: PostCurrencyPairTransactionByCurrencypairIdRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<TradingHttpService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<TradingHttpService>;
}
