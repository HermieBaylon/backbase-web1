import { Component, Output, EventEmitter, Input } from '@angular/core';
import { ConsentRequestPreferencesService } from './consent-request-widget/consent-request-preferences.service';
import { ConsentRequestService } from './consent-request-widget/consent-request.service';
import * as i0 from "@angular/core";
import * as i1 from "./consent-request-widget/consent-request-preferences.service";
import * as i2 from "./consent-request-widget/consent-request-container/consent-request-container.component";
export class ConsentRequestWidgetComponent {
    constructor(consentRequestPreferencesService) {
        this.consentRequestPreferencesService = consentRequestPreferencesService;
        /**
         * Emitter that fires when allowing consent
         */
        this.allowConsentRequestRedirectUrl = new EventEmitter();
        /**
         * Emitter that fires when rejecting consent
         */
        this.rejectConsentRequestRedirectUrl = new EventEmitter();
    }
    /**
     * Allow multi account selection
     */
    set multiAccountSelection(value) {
        this.consentRequestPreferencesService.multiAccountSelectionInput.next(value);
    }
    redirectToAllowUrl(url) {
        this.allowConsentRequestRedirectUrl.next(url);
    }
    redirectToRejectUrl(url) {
        this.rejectConsentRequestRedirectUrl.next(url);
    }
}
ConsentRequestWidgetComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentRequestWidgetComponent, deps: [{ token: i1.ConsentRequestPreferencesService }], target: i0.ɵɵFactoryTarget.Component });
ConsentRequestWidgetComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ConsentRequestWidgetComponent, selector: "bb-consent-request-widget", inputs: { multiAccountSelection: "multiAccountSelection" }, outputs: { allowConsentRequestRedirectUrl: "allowConsentRequestRedirectUrl", rejectConsentRequestRedirectUrl: "rejectConsentRequestRedirectUrl" }, providers: [ConsentRequestService, ConsentRequestPreferencesService], ngImport: i0, template: `
    <bb-consent-request-container
      (redirectToAllowUrl)="redirectToAllowUrl($event)"
      (redirectToRejectUrl)="redirectToRejectUrl($event)"></bb-consent-request-container>
  `, isInline: true, components: [{ type: i2.ConsentRequestContainerComponent, selector: "bb-consent-request-container", outputs: ["redirectToAllowUrl", "redirectToRejectUrl"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentRequestWidgetComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-consent-request-widget',
                    template: `
    <bb-consent-request-container
      (redirectToAllowUrl)="redirectToAllowUrl($event)"
      (redirectToRejectUrl)="redirectToRejectUrl($event)"></bb-consent-request-container>
  `,
                    providers: [ConsentRequestService, ConsentRequestPreferencesService],
                }]
        }], ctorParameters: function () { return [{ type: i1.ConsentRequestPreferencesService }]; }, propDecorators: { multiAccountSelection: [{
                type: Input
            }], allowConsentRequestRedirectUrl: [{
                type: Output
            }], rejectConsentRequestRedirectUrl: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc2VudC1yZXF1ZXN0LXdpZGdldC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9saWJzL2NvbnNlbnQtcmVxdWVzdC13aWRnZXQtYW5nL3NyYy9jb25zZW50LXJlcXVlc3Qtd2lkZ2V0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxnQ0FBZ0MsRUFBRSxNQUFNLDhEQUE4RCxDQUFDO0FBQ2hILE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGtEQUFrRCxDQUFDOzs7O0FBV3pGLE1BQU0sT0FBTyw2QkFBNkI7SUFDeEMsWUFBb0IsZ0NBQWtFO1FBQWxFLHFDQUFnQyxHQUFoQyxnQ0FBZ0MsQ0FBa0M7UUFTdEY7O1dBRUc7UUFDTyxtQ0FBOEIsR0FBRyxJQUFJLFlBQVksRUFBVSxDQUFDO1FBRXRFOztXQUVHO1FBQ08sb0NBQStCLEdBQUcsSUFBSSxZQUFZLEVBQVUsQ0FBQztJQWpCa0IsQ0FBQztJQUUxRjs7T0FFRztJQUNILElBQWEscUJBQXFCLENBQUMsS0FBYztRQUMvQyxJQUFJLENBQUMsZ0NBQWdDLENBQUMsMEJBQTBCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQy9FLENBQUM7SUFZRCxrQkFBa0IsQ0FBQyxHQUFXO1FBQzVCLElBQUksQ0FBQyw4QkFBOEIsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDaEQsQ0FBQztJQUVELG1CQUFtQixDQUFDLEdBQVc7UUFDN0IsSUFBSSxDQUFDLCtCQUErQixDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNqRCxDQUFDOzsySEExQlUsNkJBQTZCOytHQUE3Qiw2QkFBNkIsbVFBRjdCLENBQUMscUJBQXFCLEVBQUUsZ0NBQWdDLENBQUMsMEJBTDFEOzs7O0dBSVQ7NEZBR1UsNkJBQTZCO2tCQVR6QyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSwyQkFBMkI7b0JBQ3JDLFFBQVEsRUFBRTs7OztHQUlUO29CQUNELFNBQVMsRUFBRSxDQUFDLHFCQUFxQixFQUFFLGdDQUFnQyxDQUFDO2lCQUNyRTt1SEFPYyxxQkFBcUI7c0JBQWpDLEtBQUs7Z0JBT0ksOEJBQThCO3NCQUF2QyxNQUFNO2dCQUtHLCtCQUErQjtzQkFBeEMsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb25zZW50UmVxdWVzdFByZWZlcmVuY2VzU2VydmljZSB9IGZyb20gJy4vY29uc2VudC1yZXF1ZXN0LXdpZGdldC9jb25zZW50LXJlcXVlc3QtcHJlZmVyZW5jZXMuc2VydmljZSc7XG5pbXBvcnQgeyBDb25zZW50UmVxdWVzdFNlcnZpY2UgfSBmcm9tICcuL2NvbnNlbnQtcmVxdWVzdC13aWRnZXQvY29uc2VudC1yZXF1ZXN0LnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdiYi1jb25zZW50LXJlcXVlc3Qtd2lkZ2V0JyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8YmItY29uc2VudC1yZXF1ZXN0LWNvbnRhaW5lclxuICAgICAgKHJlZGlyZWN0VG9BbGxvd1VybCk9XCJyZWRpcmVjdFRvQWxsb3dVcmwoJGV2ZW50KVwiXG4gICAgICAocmVkaXJlY3RUb1JlamVjdFVybCk9XCJyZWRpcmVjdFRvUmVqZWN0VXJsKCRldmVudClcIj48L2JiLWNvbnNlbnQtcmVxdWVzdC1jb250YWluZXI+XG4gIGAsXG4gIHByb3ZpZGVyczogW0NvbnNlbnRSZXF1ZXN0U2VydmljZSwgQ29uc2VudFJlcXVlc3RQcmVmZXJlbmNlc1NlcnZpY2VdLFxufSlcbmV4cG9ydCBjbGFzcyBDb25zZW50UmVxdWVzdFdpZGdldENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgY29uc2VudFJlcXVlc3RQcmVmZXJlbmNlc1NlcnZpY2U6IENvbnNlbnRSZXF1ZXN0UHJlZmVyZW5jZXNTZXJ2aWNlKSB7fVxuXG4gIC8qKlxuICAgKiBBbGxvdyBtdWx0aSBhY2NvdW50IHNlbGVjdGlvblxuICAgKi9cbiAgQElucHV0KCkgc2V0IG11bHRpQWNjb3VudFNlbGVjdGlvbih2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuY29uc2VudFJlcXVlc3RQcmVmZXJlbmNlc1NlcnZpY2UubXVsdGlBY2NvdW50U2VsZWN0aW9uSW5wdXQubmV4dCh2YWx1ZSk7XG4gIH1cblxuICAvKipcbiAgICogRW1pdHRlciB0aGF0IGZpcmVzIHdoZW4gYWxsb3dpbmcgY29uc2VudFxuICAgKi9cbiAgQE91dHB1dCgpIGFsbG93Q29uc2VudFJlcXVlc3RSZWRpcmVjdFVybCA9IG5ldyBFdmVudEVtaXR0ZXI8c3RyaW5nPigpO1xuXG4gIC8qKlxuICAgKiBFbWl0dGVyIHRoYXQgZmlyZXMgd2hlbiByZWplY3RpbmcgY29uc2VudFxuICAgKi9cbiAgQE91dHB1dCgpIHJlamVjdENvbnNlbnRSZXF1ZXN0UmVkaXJlY3RVcmwgPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZz4oKTtcblxuICByZWRpcmVjdFRvQWxsb3dVcmwodXJsOiBzdHJpbmcpIHtcbiAgICB0aGlzLmFsbG93Q29uc2VudFJlcXVlc3RSZWRpcmVjdFVybC5uZXh0KHVybCk7XG4gIH1cblxuICByZWRpcmVjdFRvUmVqZWN0VXJsKHVybDogc3RyaW5nKSB7XG4gICAgdGhpcy5yZWplY3RDb25zZW50UmVxdWVzdFJlZGlyZWN0VXJsLm5leHQodXJsKTtcbiAgfVxufVxuIl19