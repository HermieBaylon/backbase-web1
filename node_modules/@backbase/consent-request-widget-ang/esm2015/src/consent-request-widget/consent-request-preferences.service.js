import { Injectable, Optional } from '@angular/core';
import { map } from 'rxjs/operators';
import { BehaviorSubject, combineLatest, of } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/foundation-ang/core";
export class ConsentRequestPreferencesService {
    constructor(itemModel) {
        this.itemModel = itemModel;
        /**
         * Stream of multiAccountSelection property (based on CXP value)
         */
        this.multiAccountSelectionItemModel = this.getItemModelProperty('multiAccountSelection', false).pipe(map(Boolean));
        /**
         * Stream of multiAccountSelection property (based on INPUT value)
         */
        this.multiAccountSelectionInput = new BehaviorSubject(false);
        /**
         * Stream of multiAccountSelection property (based on BOTH values)
         */
        this.multiAccountSelection$ = this.getProperty(this.multiAccountSelectionInput, this.multiAccountSelectionItemModel);
    }
    getProperty(input$, itemModel) {
        return combineLatest([input$, itemModel]).pipe(map(([value, valueIM]) => (value === undefined ? valueIM : value)));
    }
    getItemModelProperty(name, defaultVal) {
        var _a;
        return ((_a = this.itemModel) === null || _a === void 0 ? void 0 : _a.property(name, defaultVal)) || of(defaultVal);
    }
}
ConsentRequestPreferencesService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentRequestPreferencesService, deps: [{ token: i1.ItemModel, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
ConsentRequestPreferencesService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentRequestPreferencesService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentRequestPreferencesService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.ItemModel, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc2VudC1yZXF1ZXN0LXByZWZlcmVuY2VzLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9saWJzL2NvbnNlbnQtcmVxdWVzdC13aWRnZXQtYW5nL3NyYy9jb25zZW50LXJlcXVlc3Qtd2lkZ2V0L2NvbnNlbnQtcmVxdWVzdC1wcmVmZXJlbmNlcy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JELE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVyQyxPQUFPLEVBQUUsZUFBZSxFQUFFLGFBQWEsRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7OztBQUl0RSxNQUFNLE9BQU8sZ0NBQWdDO0lBQzNDLFlBQXlDLFNBQW9CO1FBQXBCLGNBQVMsR0FBVCxTQUFTLENBQVc7UUFZN0Q7O1dBRUc7UUFDYyxtQ0FBOEIsR0FBRyxJQUFJLENBQUMsb0JBQW9CLENBQUMsdUJBQXVCLEVBQUUsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUM5RyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQ2IsQ0FBQztRQUVGOztXQUVHO1FBQ00sK0JBQTBCLEdBQUcsSUFBSSxlQUFlLENBQVUsS0FBSyxDQUFDLENBQUM7UUFFMUU7O1dBRUc7UUFDTSwyQkFBc0IsR0FBd0IsSUFBSSxDQUFDLFdBQVcsQ0FDckUsSUFBSSxDQUFDLDBCQUEwQixFQUMvQixJQUFJLENBQUMsOEJBQThCLENBQ3BDLENBQUM7SUE5QjhELENBQUM7SUFFekQsV0FBVyxDQUFJLE1BQWlDLEVBQUUsU0FBK0I7UUFDdkYsT0FBTyxhQUFhLENBQUMsQ0FBQyxNQUFNLEVBQUUsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQzVDLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEtBQUssS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFNLENBQUMsQ0FDeEUsQ0FBQztJQUNKLENBQUM7SUFFTyxvQkFBb0IsQ0FBcUIsSUFBWSxFQUFFLFVBQWE7O1FBQzFFLE9BQU8sQ0FBQSxNQUFBLElBQUksQ0FBQyxTQUFTLDBDQUFFLFFBQVEsQ0FBSSxJQUFJLEVBQUUsVUFBVSxDQUFDLEtBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3pFLENBQUM7OzhIQVhVLGdDQUFnQztrSUFBaEMsZ0NBQWdDOzRGQUFoQyxnQ0FBZ0M7a0JBRDVDLFVBQVU7OzBCQUVJLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgSXRlbU1vZGVsIH0gZnJvbSAnQGJhY2tiYXNlL2ZvdW5kYXRpb24tYW5nL2NvcmUnO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBjb21iaW5lTGF0ZXN0LCBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgUHJvcGVydHkgfSBmcm9tICdAYmFja2Jhc2UvbGliLWJiLXBhZ2UtYm9vdHN0cmFwLWNkbic7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBDb25zZW50UmVxdWVzdFByZWZlcmVuY2VzU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIHByaXZhdGUgcmVhZG9ubHkgaXRlbU1vZGVsOiBJdGVtTW9kZWwpIHt9XG5cbiAgcHJpdmF0ZSBnZXRQcm9wZXJ0eTxUPihpbnB1dCQ6IE9ic2VydmFibGU8VCB8IHVuZGVmaW5lZD4sIGl0ZW1Nb2RlbDogT2JzZXJ2YWJsZTxQcm9wZXJ0eT4pOiBPYnNlcnZhYmxlPFQ+IHtcbiAgICByZXR1cm4gY29tYmluZUxhdGVzdChbaW5wdXQkLCBpdGVtTW9kZWxdKS5waXBlKFxuICAgICAgbWFwKChbdmFsdWUsIHZhbHVlSU1dKSA9PiAodmFsdWUgPT09IHVuZGVmaW5lZCA/IHZhbHVlSU0gOiB2YWx1ZSkgYXMgVCksXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0SXRlbU1vZGVsUHJvcGVydHk8VCBleHRlbmRzIFByb3BlcnR5PihuYW1lOiBzdHJpbmcsIGRlZmF1bHRWYWw6IFQpOiBPYnNlcnZhYmxlPFQ+IHtcbiAgICByZXR1cm4gdGhpcy5pdGVtTW9kZWw/LnByb3BlcnR5PFQ+KG5hbWUsIGRlZmF1bHRWYWwpIHx8IG9mKGRlZmF1bHRWYWwpO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0cmVhbSBvZiBtdWx0aUFjY291bnRTZWxlY3Rpb24gcHJvcGVydHkgKGJhc2VkIG9uIENYUCB2YWx1ZSlcbiAgICovXG4gIHByaXZhdGUgcmVhZG9ubHkgbXVsdGlBY2NvdW50U2VsZWN0aW9uSXRlbU1vZGVsID0gdGhpcy5nZXRJdGVtTW9kZWxQcm9wZXJ0eSgnbXVsdGlBY2NvdW50U2VsZWN0aW9uJywgZmFsc2UpLnBpcGUoXG4gICAgbWFwKEJvb2xlYW4pLFxuICApO1xuXG4gIC8qKlxuICAgKiBTdHJlYW0gb2YgbXVsdGlBY2NvdW50U2VsZWN0aW9uIHByb3BlcnR5IChiYXNlZCBvbiBJTlBVVCB2YWx1ZSlcbiAgICovXG4gIHJlYWRvbmx5IG11bHRpQWNjb3VudFNlbGVjdGlvbklucHV0ID0gbmV3IEJlaGF2aW9yU3ViamVjdDxib29sZWFuPihmYWxzZSk7XG5cbiAgLyoqXG4gICAqIFN0cmVhbSBvZiBtdWx0aUFjY291bnRTZWxlY3Rpb24gcHJvcGVydHkgKGJhc2VkIG9uIEJPVEggdmFsdWVzKVxuICAgKi9cbiAgcmVhZG9ubHkgbXVsdGlBY2NvdW50U2VsZWN0aW9uJDogT2JzZXJ2YWJsZTxib29sZWFuPiA9IHRoaXMuZ2V0UHJvcGVydHk8Ym9vbGVhbj4oXG4gICAgdGhpcy5tdWx0aUFjY291bnRTZWxlY3Rpb25JbnB1dCxcbiAgICB0aGlzLm11bHRpQWNjb3VudFNlbGVjdGlvbkl0ZW1Nb2RlbCxcbiAgKTtcbn1cbiJdfQ==