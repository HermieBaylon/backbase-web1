import { Component, Input, Output, EventEmitter, Directive } from '@angular/core';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { FormControl, FormGroup } from '@angular/forms';
import { takeUntil } from 'rxjs/operators';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/ui-ang/account-selector";
import * as i2 from "@backbase/ui-ang/search-box";
import * as i3 from "@backbase/ui-ang/product-item-basic-account";
import * as i4 from "@backbase/ui-ang/amount";
import * as i5 from "@angular/common";
import * as i6 from "@angular/forms";
import * as i7 from "@backbase/ui-ang/button";
import * as i8 from "@backbase/ui-ang/highlight";
export class ConsentRequestAccountSelectorComponent {
    constructor() {
        /**
         * Component context
         */
        this.hostRef = this;
        /**
         * If error should be shown
         */
        this.showError = false;
        /**
         * Flag for multi account selection
         */
        this.multiAccountSelection = false;
        this.searchedFields = ['name', 'balance'];
        this._accounts = [];
        this.allAccounts = [];
        /**
         * Emitter that fires when you select an account
         */
        this.selectedAccountChange = new EventEmitter();
        this.destroy = new Subject();
        this.accountSelector = {
            change: (self, item) => {
                this.onSelectAccount(item);
                self.selectedItem = item;
                self.eventTriggered = '$change';
                self.eventState = item;
            },
            scrollToEnd: (self, event) => {
                self.eventTriggered = '$scrollToEnd';
                self.eventState = event;
            },
        };
        this.form = new FormGroup({
            query: new FormControl(''),
        });
        this.form.get('query').valueChanges.pipe(takeUntil(this.destroy)).subscribe(selectedValue => {
            this._accounts = this.allAccounts.filter((item) => {
                return this.searchedFields.some((field) => item[field].toString().toLocaleLowerCase().indexOf(selectedValue.toLocaleLowerCase()) !== -1);
            });
        });
    }
    /**
     * Setter for List of accounts
     */
    set accounts(value) {
        if (value) {
            this._accounts = value;
            this.allAccounts = value;
        }
    }
    ngOnDestroy() {
        this.destroy.next();
        this.destroy.complete();
    }
    /**
     * Emit selected accounts
     * @param account - account list
     */
    onSelectAccount(account) {
        this.selectedAccountChange.emit(this.multiAccountSelection ? account : [account]);
        this.showError = false;
    }
    checkSelected(item) {
        if (this.selectedAccount) {
            return this.selectedAccount.includes(item);
        }
        return false;
    }
    onSearchClear() {
        // @ts-ignore
        this.form.get('query').setValue('');
    }
    selectAll() {
        this.selectedAccountChange.emit(this.allAccounts);
    }
    unselectAll() {
        this.selectedAccountChange.emit([]);
    }
}
ConsentRequestAccountSelectorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentRequestAccountSelectorComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ConsentRequestAccountSelectorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ConsentRequestAccountSelectorComponent, selector: "bb-consent-request-account-selector", inputs: { showError: "showError", multiAccountSelection: "multiAccountSelection", accounts: "accounts", selectedAccount: "selectedAccount" }, outputs: { selectedAccountChange: "selectedAccountChange" }, ngImport: i0, template: "<ng-container bbConsentRequestAccountSelectorCustomizable [bbHostRef]=\"hostRef\" [bbTemplateContext]=\"_accounts\">\n</ng-container>\n\n<ng-template bbConsentRequestAccountSelectorCustomizable let-hostRef let-accounts=\"context\">\n  <div\n    class=\"bb-block bb-block--sm bb-text-bold\"\n    *ngIf=\"!hostRef.selectedAccount || (hostRef.selectedAccount && hostRef.selectedAccount.length <= 1)\"\n    i18n=\"Account Exposed|Account Exposed label@@consent-request.label.accountExposed\"\n    data-role=\"account-exposed-label\">\n    Account Exposed\n  </div>\n  <div\n    class=\"bb-block bb-block--sm bb-text-bold\"\n    *ngIf=\"hostRef.selectedAccount && hostRef.selectedAccount.length > 1\"\n    i18n=\"Accounts Exposed|Account Exposed label@@consent-request.label.accountsExposed\"\n    data-role=\"accounts-exposed-label\">\n    Accounts Exposed\n  </div>\n\n  <div [ngClass]=\"{ 'border border-danger rounded': hostRef.showError }\">\n    <bb-account-selector-ui\n      data-role=\"account-selector\"\n      [items]=\"accounts\"\n      [highlight]=\"true\"\n      [disableScrollEnd]=\"false\"\n      [filterItems]=\"false\"\n      [multiple]=\"hostRef.multiAccountSelection\"\n      [closeOnSelect]=\"!hostRef.multiAccountSelection\"\n      [dropdownPosition]=\"'bottom'\"\n      [selectedItems]=\"\n        hostRef.multiAccountSelection\n          ? hostRef.selectedAccount\n          : hostRef.selectedAccount\n          ? hostRef.selectedAccount[0]\n          : undefined\n      \"\n      (change)=\"hostRef.accountSelector.change(hostRef.accountSelector, $event)\"\n      (scrollToEnd)=\"hostRef.accountSelector.scrollToEnd(hostRef.accountSelector, $event)\"\n      placeholder=\"Select Accounts\"\n      i18n-placeholder=\"Select Accounts placeholder@@consent-request.account-selector.placeholder\">\n      <ng-template bbCustomOptionsHeader>\n        <div class=\"m-2\">\n          <form [formGroup]=\"hostRef.form\">\n            <bb-search-box-ui\n              formControlName=\"query\"\n              [showClear]=\"true\"\n              [showSearch]=\"true\"\n              (clear)=\"hostRef.onSearchClear($event)\"\n              [autofocus]=\"true\"\n              placeholder=\"Search\"\n              autocomplete=\"off\"\n              i18n-placeholder=\"Search@@consent-request.account-selector-ui.search.placeholder\"></bb-search-box-ui>\n          </form>\n        </div>\n        <div class=\"bb-account-selector--multiple__selected-account-filters\" *ngIf=\"hostRef.multiAccountSelection\">\n          <button\n            (click)=\"hostRef.selectAll()\"\n            bbButton\n            buttonSize=\"sm\"\n            color=\"link\"\n            i18n=\"Select all|Select all text@@consent-request.account-selector-ui.select.all.text\"\n            data-role=\"select-all\">\n            Select all\n          </button>\n          <button\n            (click)=\"hostRef.unselectAll()\"\n            bbButton\n            buttonSize=\"sm\"\n            color=\"link\"\n            i18n=\"Unselect all|Unselect all text@@consent-request.account-selector-ui.unselect.all.text\"\n            data-role=\"unselect-all\">\n            Unselect all\n          </button>\n        </div>\n      </ng-template>\n      <ng-template bbCustomSingleSelectedItemLabel let-item=\"item\">\n        <bb-product-item-basic-account-ui\n          [active]=\"true\"\n          [amount]=\"item.balance\"\n          [currency]=\"item.currency\"\n          [productNumber]=\"item.IBAN || item.BBAN || item.number\"\n          [title]=\"item.name\">\n          <ng-template bbCustomProductItemBasicAccountDetailsFormatter let-amount=\"amount\" let-currency=\"currency\">\n            <bb-amount-ui\n              class=\"font-weight-bold\"\n              [amount]=\"amount\"\n              [currency]=\"currency\"\n              [mapCurrency]=\"false\"></bb-amount-ui>\n          </ng-template>\n        </bb-product-item-basic-account-ui>\n      </ng-template>\n      <ng-template bbCustomOptionItem let-item$=\"item$\" let-item=\"item\">\n        <bb-product-item-basic-account-ui\n          [active]=\"hostRef.checkSelected(item)\"\n          [productNumber]=\"item.IBAN || item.BBAN || item.number\"\n          [amount]=\"item.balance\"\n          [currency]=\"item.currency\"\n          [title]=\"item.name\">\n          <ng-template bbCustomProductItemBasicAccountDetailsFormatter let-amount=\"amount\" let-currency=\"currency\">\n            <bb-amount-ui\n              class=\"bb-highlight bb-product-item__amount\"\n              [amount]=\"amount\"\n              [currency]=\"currency\"\n              [bbHighlight]=\"true\"></bb-amount-ui>\n          </ng-template>\n        </bb-product-item-basic-account-ui>\n      </ng-template>\n    </bb-account-selector-ui>\n  </div>\n  <div\n    *ngIf=\"hostRef.showError\"\n    class=\"text-danger mt-2\"\n    data-role=\"no-accounts-error-message\"\n    i18n=\"Select an account|No account selected label@@consent-request.label.noAccountSelected\">\n    Select an account.\n  </div>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i1.AccountSelectorComponent; }), selector: "bb-account-selector-ui", inputs: ["items", "disabled", "notFoundText", "showError", "productNumberFormat", "selectedItems", "multiple", "closeOnSelect", "searchable", "clearable", "placeholder", "loading", "dropdownPosition", "disableScrollEnd", "highlight", "filterItems", "markFirst", "internalFiltering", "virtualScroll", "required", "typeahead", "minTermLength", "typeToSearchText", "aria-describedby", "aria-labelledby", "aria-invalid", "searchFunc", "showCurrencySymbol", "showBankBranchCode", "groupByFn", "groupValueFn", "size", "compareItemsWith"], outputs: ["search", "clearSearch", "scroll", "scrollToEnd", "remove", "change", "filterChange", "focus", "blur"] }, { type: i0.forwardRef(function () { return i2.SearchBoxComponent; }), selector: "bb-search-box-ui", inputs: ["placeholder", "maxLength", "squareBorder", "typeaheadOptions", "showSearch", "showClear", "searchLabel", "clearLabel", "autocomplete"], outputs: ["submit", "clear", "valueChange"] }, { type: i0.forwardRef(function () { return i3.ProductItemBasicAccountComponent; }), selector: "bb-product-item-basic-account-ui", inputs: ["title", "productNumber", "productNumberFormat", "currency", "showCurrencySymbol", "amount", "highlight", "productDetailsInfo", "active", "favorite", "favoriteIconColor", "selected", "type", "status", "balanceLabel", "bankBranchCode"] }, { type: i0.forwardRef(function () { return i4.AmountComponent; }), selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }], directives: [{ type: i0.forwardRef(function () { return ConsentRequestAccountSelectorCustomizableDirective; }), selector: "[bbConsentRequestAccountSelectorCustomizable]" }, { type: i0.forwardRef(function () { return i5.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i5.NgClass; }), selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i0.forwardRef(function () { return i1.CustomOptionsHeaderDirective; }), selector: "ng-template[bbCustomOptionsHeader]" }, { type: i0.forwardRef(function () { return i6.ɵNgNoValidate; }), selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i0.forwardRef(function () { return i6.NgControlStatusGroup; }), selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i0.forwardRef(function () { return i6.FormGroupDirective; }), selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i0.forwardRef(function () { return i6.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0.forwardRef(function () { return i6.FormControlName; }), selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i0.forwardRef(function () { return i7.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0.forwardRef(function () { return i1.CustomSingleSelectedItemLabelDirective; }), selector: "ng-template[bbCustomSingleSelectedItemLabel]" }, { type: i0.forwardRef(function () { return i3.CustomProductItemBasicAccountDetailsFormatterDirective; }), selector: "ng-template[bbCustomProductItemBasicAccountDetailsFormatter]" }, { type: i0.forwardRef(function () { return i1.CustomOptionItemDirective; }), selector: "ng-template[bbCustomOptionItem]" }, { type: i0.forwardRef(function () { return i8.HighlightDirective; }), selector: "[bbHighlight]", inputs: ["amount", "bbHighlight", "negativeClass", "positiveClass"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentRequestAccountSelectorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-consent-request-account-selector',
                    templateUrl: './consent-request-account-selector.component.html',
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { showError: [{
                type: Input
            }], multiAccountSelection: [{
                type: Input
            }], accounts: [{
                type: Input
            }], selectedAccount: [{
                type: Input
            }], selectedAccountChange: [{
                type: Output
            }] } });
export class ConsentRequestAccountSelectorCustomizableDirective extends BbTemplate {
}
ConsentRequestAccountSelectorCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentRequestAccountSelectorCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ConsentRequestAccountSelectorCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: ConsentRequestAccountSelectorCustomizableDirective, selector: "[bbConsentRequestAccountSelectorCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentRequestAccountSelectorCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbConsentRequestAccountSelectorCustomizable]',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,