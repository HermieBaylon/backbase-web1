import { Component, Directive, ViewChild, Output, EventEmitter } from '@angular/core';
import { combineLatest } from 'rxjs';
import { pluck, map, tap } from 'rxjs/operators';
import { BbTemplate } from '@backbase/foundation-ang/core';
import * as i0 from "@angular/core";
import * as i1 from "../consent-request.service";
import * as i2 from "@angular/router";
import * as i3 from "../consent-request-preferences.service";
import * as i4 from "@backbase/ui-ang/alert";
import * as i5 from "../consent-request-tpp-information/consent-request-tpp-information.component";
import * as i6 from "../consent-request-account-selector/consent-request-account-selector.component";
import * as i7 from "../consent-request-permissions-information/consent-request-permissions-information.component";
import * as i8 from "@backbase/ui-ang/loading-indicator";
import * as i9 from "../consent-request-error/consent-request-error.component";
import * as i10 from "@angular/common";
import * as i11 from "@backbase/ui-ang/button";
import * as i12 from "@backbase/ui-ang/date-pipe";
export class ConsentRequestContainerComponent {
    constructor(service, route, consentRequestPreferencesService) {
        this.service = service;
        this.route = route;
        this.consentRequestPreferencesService = consentRequestPreferencesService;
        /**
         * Component context
         */
        this.hostRef = this;
        /**
         * Stream for Multi-account selection usage flag.
         * If true used a multi-selection account selector, else a single selection account selector.
         * Retrieving value from CXP manager.
         */
        this.multiAccountSelection$ = this.consentRequestPreferencesService.multiAccountSelection$;
        /**
         * Emitter that fires when allowing consent
         */
        this.redirectToAllowUrl = new EventEmitter();
        /**
         * Emitter that fires when rejecting consent
         */
        this.redirectToRejectUrl = new EventEmitter();
        /**
         * Notification error template reference
         */
        this.notificationErrorTemplate = '';
        /**
         * Stream of Consent Request ID
         */
        this.consentRequestId = this.getRouteParam(this.route, 'consentRequestId').pipe(map(consentRequestId => consentRequestId || ''));
        /**
         * Stream of loading spinner visibility flag
         */
        this.loading = this.service.loading;
        /**
         * Stream of Consent request errors
         */
        this.error = this.service.error;
        /**
         * Stream of saving state flag
         */
        this.saving = this.service.saving;
        /**
         * Stream of saving consent request error
         */
        this.savingError = this.service.savingError;
        /**
         * Stream of get consentRequest
         */
        this.consentRequest = this.service.consentRequest;
        /**
         * Flag for show account error
         */
        this.showAccountError = false;
    }
    /**
     * Function for allow consent request
     */
    allowConsentRequest() {
        if (this.selectedAccount) {
            this.showAccountError = false;
            this.service
                .allowConsentRequest(this.selectedAccount, this.notificationErrorTemplate)
                .pipe(tap((redirect) => {
                if (redirect.redirectUrl) {
                    this.redirectToAllowUrl.emit(redirect.redirectUrl);
                }
            }))
                .subscribe();
        }
        else {
            this.showAccountError = true;
        }
    }
    /**
     * Function for reject consent request
     */
    rejectConsentRequest() {
        this.service
            .rejectConsentRequest(this.notificationErrorTemplate)
            .pipe(tap((response) => {
            if (response.redirectUrl) {
                this.redirectToRejectUrl.emit(response.redirectUrl);
            }
        }))
            .subscribe();
    }
    ngOnInit() {
        this.service.getConsentRequestFrom(this.consentRequestId);
    }
    getRouteParam(route, param) {
        const paramValue = combineLatest(route.paramMap.pipe(pluck('params', param)), route.queryParamMap.pipe(pluck('params', param)), (params, qparams) => {
            return params ? params : qparams;
        });
        if (!route.parent) {
            return paramValue;
        }
        // ensure that level that has actual value keeps it from being cleared
        return combineLatest([paramValue, this.getRouteParam(route.parent, param)]).pipe(map(params => params[0] || params[1]));
    }
}
ConsentRequestContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentRequestContainerComponent, deps: [{ token: i1.ConsentRequestService }, { token: i2.ActivatedRoute }, { token: i3.ConsentRequestPreferencesService }], target: i0.ɵɵFactoryTarget.Component });
ConsentRequestContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ConsentRequestContainerComponent, selector: "bb-consent-request-container", outputs: { redirectToAllowUrl: "redirectToAllowUrl", redirectToRejectUrl: "redirectToRejectUrl" }, viewQueries: [{ propertyName: "notificationErrorTemplate", first: true, predicate: ["notificationError"], descendants: true }], ngImport: i0, template: "<ng-container\n  bbConsentRequestWidgetCustomizable\n  [bbHostRef]=\"hostRef\"\n  [bbTemplateContext]=\"{\n    consentRequest: consentRequest | async,\n    multiAccountSelection: multiAccountSelection$ | async\n  }\">\n</ng-container>\n\n<ng-template\n  bbConsentRequestWidgetCustomizable\n  let-hostRef\n  let-consentRequest=\"context.consentRequest\"\n  let-multiAccountSelection=\"context.multiAccountSelection\">\n  <ng-container *ngIf=\"hostRef.consentRequestId | async; else errorTemplate\">\n    <ng-container *ngIf=\"!(hostRef.loading | async) as loading; else loadingTemplate\">\n      <ng-container *ngIf=\"!(hostRef.error | async); else errorTemplate\">\n        <div class=\"bb-consent-request\" *ngIf=\"consentRequest\">\n          <div\n            class=\"bb-heading-2 bb-block--lg\"\n            data-role=\"request-access-label\"\n            i18n=\"Widget header|Third party request access message@@consent-request.label.header\">\n            Third party requested access to your accounts\n          </div>\n\n          <ng-container *ngIf=\"!(hostRef.saving | async); else savingLoadingTemplate\">\n            <bb-alert-ui\n              *ngIf=\"hostRef.savingError | async\"\n              title=\"Unknown error\"\n              i18n-title=\"Unknown Error|Unknown Error Label@@consent-request.label.error.unknown\"\n              message=\"Try to make action again or contact your system administrator.\"\n              i18n-message=\"Try again|Try again error message@@consent-request.label.error.tryAgain\"\n              data-role=\"allow-consent-request-error\"></bb-alert-ui>\n\n            <div class=\"bb-block--lg\">\n              <bb-consent-request-tpp-information [tpp]=\"consentRequest.tpp\"></bb-consent-request-tpp-information>\n            </div>\n\n            <div class=\"bb-block--lg\">\n              <bb-consent-request-account-selector\n                [multiAccountSelection]=\"multiAccountSelection\"\n                [showError]=\"hostRef.showAccountError\"\n                [accounts]=\"consentRequest.accounts\"\n                [(selectedAccount)]=\"hostRef.selectedAccount\"></bb-consent-request-account-selector>\n            </div>\n\n            <div class=\"bb-block--lg\">\n              <bb-consent-request-permissions-information\n                [permissions]=\"consentRequest.permissions\"></bb-consent-request-permissions-information>\n            </div>\n\n            <div class=\"bb-block--lg\">\n              <div\n                class=\"bb-block--sm bb-text-bold\"\n                data-role=\"expiration-date-label\"\n                i18n=\"Expiration date|Consent expiration date@@consent-request.label.expiryDate\">\n                Expiration date\n              </div>\n\n              <div>{{ consentRequest.expiryDate | bbDate: 'bbShort' }}</div>\n            </div>\n          </ng-container>\n\n          <div class=\"bb-button-bar bb-button-bar--reverse\">\n            <button\n              bbButton\n              [disabled]=\"hostRef.saving | async\"\n              (click)=\"hostRef.allowConsentRequest()\"\n              i18n=\"Allow button|Allow consent request@@consent-request.label.allow\"\n              color=\"primary\"\n              class=\"bb-button-bar__button\"\n              data-role=\"allow-button\">\n              Allow\n            </button>\n            <button\n              bbButton\n              [disabled]=\"hostRef.saving | async\"\n              (click)=\"hostRef.rejectConsentRequest()\"\n              i18n=\"Reject button|Reject consent request@@consent-request.label.reject\"\n              color=\"secondary\"\n              class=\"bb-button-bar__button\"\n              data-role=\"reject-button\">\n              Reject\n            </button>\n          </div>\n\n          <ng-template #savingLoadingTemplate>\n            <div class=\"bb-state-container\">\n              <bb-loading-indicator-ui\n                text=\"Processing the request...\"\n                i18n-text=\"\n                  Processing|Processing the allow/reject request@@consent-request.label.processing\"></bb-loading-indicator-ui>\n            </div>\n          </ng-template>\n        </div>\n      </ng-container>\n    </ng-container>\n\n    <ng-template #loadingTemplate>\n      <div class=\"bb-state-container\">\n        <bb-loading-indicator-ui></bb-loading-indicator-ui>\n      </div>\n    </ng-template>\n  </ng-container>\n\n  <ng-template #errorTemplate>\n    <div class=\"bb-state-container\">\n      <bb-consent-request-error\n        [consentRequestId]=\"hostRef.consentRequestId | async\"\n        [errorKind]=\"$any(hostRef.error | async)?.kind\"></bb-consent-request-error>\n    </div>\n  </ng-template>\n\n  <ng-template #notificationError>\n    <span\n      i18n=\"\n        Operation Failed|Error notification when failing to save request\n        consent@@consent-request.label.notification.error\">\n      Operation failed\n    </span>\n  </ng-template>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i4.AlertComponent; }), selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i0.forwardRef(function () { return i5.ConsentRequestTppInformationComponent; }), selector: "bb-consent-request-tpp-information", inputs: ["tpp"] }, { type: i0.forwardRef(function () { return i6.ConsentRequestAccountSelectorComponent; }), selector: "bb-consent-request-account-selector", inputs: ["showError", "multiAccountSelection", "accounts", "selectedAccount"], outputs: ["selectedAccountChange"] }, { type: i0.forwardRef(function () { return i7.ConsentRequestPermissionsInformationComponent; }), selector: "bb-consent-request-permissions-information", inputs: ["permissions"] }, { type: i0.forwardRef(function () { return i8.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i0.forwardRef(function () { return i9.ConsentRequestErrorComponent; }), selector: "bb-consent-request-error", inputs: ["consentRequestId", "errorKind"] }], directives: [{ type: i0.forwardRef(function () { return ConsentRequestWidgetCustomizableDirective; }), selector: "[bbConsentRequestWidgetCustomizable]" }, { type: i0.forwardRef(function () { return i10.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i11.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "async": i0.forwardRef(function () { return i10.AsyncPipe; }), "bbDate": i0.forwardRef(function () { return i12.BbDatePipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentRequestContainerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-consent-request-container',
                    templateUrl: './consent-request-container.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.ConsentRequestService }, { type: i2.ActivatedRoute }, { type: i3.ConsentRequestPreferencesService }]; }, propDecorators: { redirectToAllowUrl: [{
                type: Output
            }], redirectToRejectUrl: [{
                type: Output
            }], notificationErrorTemplate: [{
                type: ViewChild,
                args: ['notificationError']
            }] } });
export class ConsentRequestWidgetCustomizableDirective extends BbTemplate {
}
ConsentRequestWidgetCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentRequestWidgetCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ConsentRequestWidgetCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: ConsentRequestWidgetCustomizableDirective, selector: "[bbConsentRequestWidgetCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentRequestWidgetCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbConsentRequestWidgetCustomizable]',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,