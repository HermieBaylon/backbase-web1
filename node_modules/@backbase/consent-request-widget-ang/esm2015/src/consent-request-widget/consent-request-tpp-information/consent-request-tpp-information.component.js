import { Component, Input, Directive } from '@angular/core';
import { BbTemplate } from '@backbase/foundation-ang/core';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/consent-ui";
export class ConsentRequestTppInformationComponent {
    constructor() {
        /**
         * Component context
         */
        this.hostRef = this;
    }
}
ConsentRequestTppInformationComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentRequestTppInformationComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ConsentRequestTppInformationComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ConsentRequestTppInformationComponent, selector: "bb-consent-request-tpp-information", inputs: { tpp: "tpp" }, ngImport: i0, template: "<ng-container bbConsentRequestTppInformationCustomizable [bbHostRef]=\"hostRef\" [bbTemplateContext]=\"tpp\">\n</ng-container>\n\n<ng-template bbConsentRequestTppInformationCustomizable let-hostRef let-tpp=\"context\">\n  <div\n    class=\"bb-block--sm bb-text-bold\"\n    i18n=\"Requested by|Third party information@@consent-request.label.requestedBy\"\n    data-role=\"requested-by-label\">\n    Requested by\n  </div>\n\n  <div class=\"card card-sm\">\n    <div class=\"card-body\">\n      <bb-third-party-provider-ui\n        [name]=\"tpp.name\"\n        [url]=\"tpp.website\"\n        [verified]=\"tpp.isTrusted\"\n        [image]=\"tpp.imageUrl\"\n        data-role=\"third-party-provider-label\">\n      </bb-third-party-provider-ui>\n    </div>\n  </div>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i1.ӨThirdPartyProviderComponent; }), selector: "bb-third-party-provider-ui", inputs: ["name", "image", "url", "verified", "condensed", "expiryDate", "expired", "showExpire"] }], directives: [{ type: i0.forwardRef(function () { return ConsentRequestTppInformationCustomizableDirective; }), selector: "[bbConsentRequestTppInformationCustomizable]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentRequestTppInformationComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-consent-request-tpp-information',
                    templateUrl: './consent-request-tpp-information.component.html',
                }]
        }], propDecorators: { tpp: [{
                type: Input
            }] } });
export class ConsentRequestTppInformationCustomizableDirective extends BbTemplate {
}
ConsentRequestTppInformationCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentRequestTppInformationCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ConsentRequestTppInformationCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: ConsentRequestTppInformationCustomizableDirective, selector: "[bbConsentRequestTppInformationCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentRequestTppInformationCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbConsentRequestTppInformationCustomizable]',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc2VudC1yZXF1ZXN0LXRwcC1pbmZvcm1hdGlvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL2NvbnNlbnQtcmVxdWVzdC13aWRnZXQtYW5nL3NyYy9jb25zZW50LXJlcXVlc3Qtd2lkZ2V0L2NvbnNlbnQtcmVxdWVzdC10cHAtaW5mb3JtYXRpb24vY29uc2VudC1yZXF1ZXN0LXRwcC1pbmZvcm1hdGlvbi5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9saWJzL2NvbnNlbnQtcmVxdWVzdC13aWRnZXQtYW5nL3NyYy9jb25zZW50LXJlcXVlc3Qtd2lkZ2V0L2NvbnNlbnQtcmVxdWVzdC10cHAtaW5mb3JtYXRpb24vY29uc2VudC1yZXF1ZXN0LXRwcC1pbmZvcm1hdGlvbi5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDNUQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLCtCQUErQixDQUFDOzs7QUFPM0QsTUFBTSxPQUFPLHFDQUFxQztJQUpsRDtRQUtFOztXQUVHO1FBQ00sWUFBTyxHQUEwQyxJQUFJLENBQUM7S0FLaEU7O21JQVRZLHFDQUFxQzt1SEFBckMscUNBQXFDLGtHQ1JsRCw4d0JBdUJBLG9TRERhLGlEQUFpRDs0RkFkakQscUNBQXFDO2tCQUpqRCxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxvQ0FBb0M7b0JBQzlDLFdBQVcsRUFBRSxrREFBa0Q7aUJBQ2hFOzhCQVNVLEdBQUc7c0JBQVgsS0FBSzs7QUFNUixNQUFNLE9BQU8saURBQWtELFNBQVEsVUFHdEU7OytJQUhZLGlEQUFpRDttSUFBakQsaURBQWlEOzRGQUFqRCxpREFBaUQ7a0JBSDdELFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLDhDQUE4QztpQkFDekQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBEaXJlY3RpdmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJiVGVtcGxhdGUgfSBmcm9tICdAYmFja2Jhc2UvZm91bmRhdGlvbi1hbmcvY29yZSc7XG5pbXBvcnQgeyBUcHAgfSBmcm9tICcuLi9jb25zZW50LXJlcXVlc3Quc2VydmljZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2JiLWNvbnNlbnQtcmVxdWVzdC10cHAtaW5mb3JtYXRpb24nLFxuICB0ZW1wbGF0ZVVybDogJy4vY29uc2VudC1yZXF1ZXN0LXRwcC1pbmZvcm1hdGlvbi5jb21wb25lbnQuaHRtbCcsXG59KVxuZXhwb3J0IGNsYXNzIENvbnNlbnRSZXF1ZXN0VHBwSW5mb3JtYXRpb25Db21wb25lbnQge1xuICAvKipcbiAgICogQ29tcG9uZW50IGNvbnRleHRcbiAgICovXG4gIHJlYWRvbmx5IGhvc3RSZWY6IENvbnNlbnRSZXF1ZXN0VHBwSW5mb3JtYXRpb25Db21wb25lbnQgPSB0aGlzO1xuICAvKipcbiAgICogVGhpcmQgcGFydHkgcHJvdmlkZXJcbiAgICovXG4gIEBJbnB1dCgpIHRwcDogVHBwIHwgdW5kZWZpbmVkO1xufVxuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbYmJDb25zZW50UmVxdWVzdFRwcEluZm9ybWF0aW9uQ3VzdG9taXphYmxlXScsXG59KVxuZXhwb3J0IGNsYXNzIENvbnNlbnRSZXF1ZXN0VHBwSW5mb3JtYXRpb25DdXN0b21pemFibGVEaXJlY3RpdmUgZXh0ZW5kcyBCYlRlbXBsYXRlPFxuICBDb25zZW50UmVxdWVzdFRwcEluZm9ybWF0aW9uQ29tcG9uZW50LFxuICBUcHBcbj4ge31cbiIsIjxuZy1jb250YWluZXIgYmJDb25zZW50UmVxdWVzdFRwcEluZm9ybWF0aW9uQ3VzdG9taXphYmxlIFtiYkhvc3RSZWZdPVwiaG9zdFJlZlwiIFtiYlRlbXBsYXRlQ29udGV4dF09XCJ0cHBcIj5cbjwvbmctY29udGFpbmVyPlxuXG48bmctdGVtcGxhdGUgYmJDb25zZW50UmVxdWVzdFRwcEluZm9ybWF0aW9uQ3VzdG9taXphYmxlIGxldC1ob3N0UmVmIGxldC10cHA9XCJjb250ZXh0XCI+XG4gIDxkaXZcbiAgICBjbGFzcz1cImJiLWJsb2NrLS1zbSBiYi10ZXh0LWJvbGRcIlxuICAgIGkxOG49XCJSZXF1ZXN0ZWQgYnl8VGhpcmQgcGFydHkgaW5mb3JtYXRpb25AQGNvbnNlbnQtcmVxdWVzdC5sYWJlbC5yZXF1ZXN0ZWRCeVwiXG4gICAgZGF0YS1yb2xlPVwicmVxdWVzdGVkLWJ5LWxhYmVsXCI+XG4gICAgUmVxdWVzdGVkIGJ5XG4gIDwvZGl2PlxuXG4gIDxkaXYgY2xhc3M9XCJjYXJkIGNhcmQtc21cIj5cbiAgICA8ZGl2IGNsYXNzPVwiY2FyZC1ib2R5XCI+XG4gICAgICA8YmItdGhpcmQtcGFydHktcHJvdmlkZXItdWlcbiAgICAgICAgW25hbWVdPVwidHBwLm5hbWVcIlxuICAgICAgICBbdXJsXT1cInRwcC53ZWJzaXRlXCJcbiAgICAgICAgW3ZlcmlmaWVkXT1cInRwcC5pc1RydXN0ZWRcIlxuICAgICAgICBbaW1hZ2VdPVwidHBwLmltYWdlVXJsXCJcbiAgICAgICAgZGF0YS1yb2xlPVwidGhpcmQtcGFydHktcHJvdmlkZXItbGFiZWxcIj5cbiAgICAgIDwvYmItdGhpcmQtcGFydHktcHJvdmlkZXItdWk+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC9uZy10ZW1wbGF0ZT5cbiJdfQ==