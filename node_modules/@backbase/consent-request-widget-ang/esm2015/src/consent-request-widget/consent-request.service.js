import { Injectable } from '@angular/core';
import { ReplaySubject, BehaviorSubject, of } from 'rxjs';
import { catchError, pluck, map, filter, distinctUntilChanged, tap, switchMap, shareReplay, take, } from 'rxjs/operators';
import { parseError } from './consent-request-error';
import * as i0 from "@angular/core";
import * as i1 from "@backbase/data-ang/consent";
import * as i2 from "@backbase/ui-ang/notification";
export class ConsentRequestService {
    constructor(consentReqService, consentHttpService, notification) {
        this.consentReqService = consentReqService;
        this.consentHttpService = consentHttpService;
        this.notification = notification;
        this.consentRequestId = new ReplaySubject(1);
        this.loading = new BehaviorSubject(true);
        this.error = new BehaviorSubject(undefined);
        this.saving = new BehaviorSubject(false);
        this.savingError = new BehaviorSubject(undefined);
        this.consentRequest = this.consentRequestId.pipe(filter((id) => !!id), distinctUntilChanged(), tap(() => this.loading.next(true)), switchMap((id) => this.loadConsentRequest(id)), tap(() => this.error.next(undefined)), catchError((error) => {
            this.error.next(error);
            return of(undefined);
        }), tap(() => this.loading.next(false)), shareReplay(1));
    }
    getConsentRequestFrom(consentRequestId) {
        consentRequestId.subscribe(this.consentRequestId);
    }
    /**
     * Function for allow consent request
     * @param account - accounts list
     * @param templateRef - template for notification
     */
    allowConsentRequest(account, templateRef) {
        return this.consentRequest.pipe(take(1), filter((consentRequest) => !!consentRequest), tap(() => this.saving.next(true)), switchMap((consentRequest) => this.allow(consentRequest, account)), tap(() => this.savingError.next(undefined)), catchError((error) => this.handleError(error, templateRef)), tap(() => this.saving.next(false)));
    }
    rejectConsentRequest(templateRef) {
        return this.consentRequest.pipe(take(1), filter((consentRequest) => consentRequest !== undefined), tap(() => this.saving.next(true)), switchMap((consentRequest) => this.reject(consentRequest)), tap(() => this.savingError.next(undefined)), catchError((error) => this.handleError(error, templateRef)), tap(() => this.saving.next(false)));
    }
    handleError(error, templateRef) {
        this.savingError.next(error);
        if (templateRef) {
            this.notification.showNotification({
                header: templateRef,
                message: '',
                modifier: 'error',
            });
        }
        return of({});
    }
    loadConsentRequest(id) {
        return this.consentReqService.getIdById({ id }, 'response').pipe(pluck('body'), catchError((error) => {
            throw parseError(error);
        }));
    }
    allow({ id: consentRequestId, allowConsentRedirectUrl: redirectUrl }, accounts) {
        return this.consentHttpService
            .postConsents({
            consentPost: {
                consentRequestId,
                accounts: accounts.map((account) => account.id),
            },
        }, 'response')
            .pipe(pluck('body'), map(() => ({ redirectUrl })), catchError((error) => {
            throw parseError(error);
        }));
    }
    reject({ id, rejectConsentRedirectUrl: redirectUrl }) {
        return this.consentReqService.postRejectById({ id }, 'response').pipe(map(() => ({ redirectUrl })), catchError((error) => {
            throw parseError(error);
        }));
    }
}
ConsentRequestService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentRequestService, deps: [{ token: i1.ConsentRequestsHttpService }, { token: i1.ConsentsHttpService }, { token: i2.NotificationService }], target: i0.ɵɵFactoryTarget.Injectable });
ConsentRequestService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentRequestService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentRequestService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.ConsentRequestsHttpService }, { type: i1.ConsentsHttpService }, { type: i2.NotificationService }]; } });
//# sourceMappingURL=data:application/json;base64,