export class ConsentRequestAccessDenied {
    constructor(error) {
        this.error = error;
        this.kind = 'ConsentRequestAccessDenied';
    }
}
export class ConsentRequestNotFound {
    constructor(error) {
        this.error = error;
        this.kind = 'ConsentRequestNotFound';
    }
}
export class ConsentRequestBadRequest {
    constructor(error) {
        this.error = error;
        this.kind = 'ConsentRequestBadRequest';
    }
}
export class ConsentRequestUnknownError {
    constructor(error) {
        this.error = error;
        this.kind = 'ConsentRequestUnknownError';
    }
}
export class ConsentRequestConnectivityError {
    constructor(error) {
        this.error = error;
        this.kind = 'ConsentRequestConnectivityError';
    }
}
export const parseError = (error) => {
    if (error.error instanceof ErrorEvent) {
        return new ConsentRequestUnknownError(error);
    }
    else {
        switch (error.status) {
            case 0:
                return new ConsentRequestConnectivityError(error);
            case 400:
                return new ConsentRequestBadRequest(error);
            case 401:
                return new ConsentRequestAccessDenied(error);
            case 403:
                return new ConsentRequestAccessDenied(error);
            case 404:
                return new ConsentRequestNotFound(error);
            default:
                return new ConsentRequestUnknownError(error);
        }
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc2VudC1yZXF1ZXN0LWVycm9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbGlicy9jb25zZW50LXJlcXVlc3Qtd2lkZ2V0LWFuZy9zcmMvY29uc2VudC1yZXF1ZXN0LXdpZGdldC9jb25zZW50LXJlcXVlc3QtZXJyb3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxPQUFPLDBCQUEwQjtJQUVyQyxZQUFxQixLQUF3QjtRQUF4QixVQUFLLEdBQUwsS0FBSyxDQUFtQjtRQUQ3QyxTQUFJLEdBQWlDLDRCQUE0QixDQUFDO0lBQ2xCLENBQUM7Q0FDbEQ7QUFFRCxNQUFNLE9BQU8sc0JBQXNCO0lBRWpDLFlBQXFCLEtBQXdCO1FBQXhCLFVBQUssR0FBTCxLQUFLLENBQW1CO1FBRDdDLFNBQUksR0FBNkIsd0JBQXdCLENBQUM7SUFDVixDQUFDO0NBQ2xEO0FBRUQsTUFBTSxPQUFPLHdCQUF3QjtJQUVuQyxZQUFxQixLQUF3QjtRQUF4QixVQUFLLEdBQUwsS0FBSyxDQUFtQjtRQUQ3QyxTQUFJLEdBQStCLDBCQUEwQixDQUFDO0lBQ2QsQ0FBQztDQUNsRDtBQUVELE1BQU0sT0FBTywwQkFBMEI7SUFFckMsWUFBcUIsS0FBd0I7UUFBeEIsVUFBSyxHQUFMLEtBQUssQ0FBbUI7UUFEN0MsU0FBSSxHQUFpQyw0QkFBNEIsQ0FBQztJQUNsQixDQUFDO0NBQ2xEO0FBRUQsTUFBTSxPQUFPLCtCQUErQjtJQUUxQyxZQUFxQixLQUF3QjtRQUF4QixVQUFLLEdBQUwsS0FBSyxDQUFtQjtRQUQ3QyxTQUFJLEdBQXNDLGlDQUFpQyxDQUFDO0lBQzVCLENBQUM7Q0FDbEQ7QUFTRCxNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsQ0FBQyxLQUF3QixFQUF1QixFQUFFO0lBQzFFLElBQUksS0FBSyxDQUFDLEtBQUssWUFBWSxVQUFVLEVBQUU7UUFDckMsT0FBTyxJQUFJLDBCQUEwQixDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQzlDO1NBQU07UUFDTCxRQUFRLEtBQUssQ0FBQyxNQUFNLEVBQUU7WUFDcEIsS0FBSyxDQUFDO2dCQUNKLE9BQU8sSUFBSSwrQkFBK0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNwRCxLQUFLLEdBQUc7Z0JBQ04sT0FBTyxJQUFJLHdCQUF3QixDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzdDLEtBQUssR0FBRztnQkFDTixPQUFPLElBQUksMEJBQTBCLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDL0MsS0FBSyxHQUFHO2dCQUNOLE9BQU8sSUFBSSwwQkFBMEIsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUMvQyxLQUFLLEdBQUc7Z0JBQ04sT0FBTyxJQUFJLHNCQUFzQixDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzNDO2dCQUNFLE9BQU8sSUFBSSwwQkFBMEIsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNoRDtLQUNGO0FBQ0gsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cEVycm9yUmVzcG9uc2UgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5cbmV4cG9ydCBjbGFzcyBDb25zZW50UmVxdWVzdEFjY2Vzc0RlbmllZCB7XG4gIGtpbmQ6ICdDb25zZW50UmVxdWVzdEFjY2Vzc0RlbmllZCcgPSAnQ29uc2VudFJlcXVlc3RBY2Nlc3NEZW5pZWQnO1xuICBjb25zdHJ1Y3RvcihyZWFkb25seSBlcnJvcjogSHR0cEVycm9yUmVzcG9uc2UpIHt9XG59XG5cbmV4cG9ydCBjbGFzcyBDb25zZW50UmVxdWVzdE5vdEZvdW5kIHtcbiAga2luZDogJ0NvbnNlbnRSZXF1ZXN0Tm90Rm91bmQnID0gJ0NvbnNlbnRSZXF1ZXN0Tm90Rm91bmQnO1xuICBjb25zdHJ1Y3RvcihyZWFkb25seSBlcnJvcjogSHR0cEVycm9yUmVzcG9uc2UpIHt9XG59XG5cbmV4cG9ydCBjbGFzcyBDb25zZW50UmVxdWVzdEJhZFJlcXVlc3Qge1xuICBraW5kOiAnQ29uc2VudFJlcXVlc3RCYWRSZXF1ZXN0JyA9ICdDb25zZW50UmVxdWVzdEJhZFJlcXVlc3QnO1xuICBjb25zdHJ1Y3RvcihyZWFkb25seSBlcnJvcjogSHR0cEVycm9yUmVzcG9uc2UpIHt9XG59XG5cbmV4cG9ydCBjbGFzcyBDb25zZW50UmVxdWVzdFVua25vd25FcnJvciB7XG4gIGtpbmQ6ICdDb25zZW50UmVxdWVzdFVua25vd25FcnJvcicgPSAnQ29uc2VudFJlcXVlc3RVbmtub3duRXJyb3InO1xuICBjb25zdHJ1Y3RvcihyZWFkb25seSBlcnJvcjogSHR0cEVycm9yUmVzcG9uc2UpIHt9XG59XG5cbmV4cG9ydCBjbGFzcyBDb25zZW50UmVxdWVzdENvbm5lY3Rpdml0eUVycm9yIHtcbiAga2luZDogJ0NvbnNlbnRSZXF1ZXN0Q29ubmVjdGl2aXR5RXJyb3InID0gJ0NvbnNlbnRSZXF1ZXN0Q29ubmVjdGl2aXR5RXJyb3InO1xuICBjb25zdHJ1Y3RvcihyZWFkb25seSBlcnJvcjogSHR0cEVycm9yUmVzcG9uc2UpIHt9XG59XG5cbmV4cG9ydCB0eXBlIENvbnNlbnRSZXF1ZXN0RXJyb3IgPVxuICB8IENvbnNlbnRSZXF1ZXN0QWNjZXNzRGVuaWVkXG4gIHwgQ29uc2VudFJlcXVlc3ROb3RGb3VuZFxuICB8IENvbnNlbnRSZXF1ZXN0QmFkUmVxdWVzdFxuICB8IENvbnNlbnRSZXF1ZXN0VW5rbm93bkVycm9yXG4gIHwgQ29uc2VudFJlcXVlc3RDb25uZWN0aXZpdHlFcnJvcjtcblxuZXhwb3J0IGNvbnN0IHBhcnNlRXJyb3IgPSAoZXJyb3I6IEh0dHBFcnJvclJlc3BvbnNlKTogQ29uc2VudFJlcXVlc3RFcnJvciA9PiB7XG4gIGlmIChlcnJvci5lcnJvciBpbnN0YW5jZW9mIEVycm9yRXZlbnQpIHtcbiAgICByZXR1cm4gbmV3IENvbnNlbnRSZXF1ZXN0VW5rbm93bkVycm9yKGVycm9yKTtcbiAgfSBlbHNlIHtcbiAgICBzd2l0Y2ggKGVycm9yLnN0YXR1cykge1xuICAgICAgY2FzZSAwOlxuICAgICAgICByZXR1cm4gbmV3IENvbnNlbnRSZXF1ZXN0Q29ubmVjdGl2aXR5RXJyb3IoZXJyb3IpO1xuICAgICAgY2FzZSA0MDA6XG4gICAgICAgIHJldHVybiBuZXcgQ29uc2VudFJlcXVlc3RCYWRSZXF1ZXN0KGVycm9yKTtcbiAgICAgIGNhc2UgNDAxOlxuICAgICAgICByZXR1cm4gbmV3IENvbnNlbnRSZXF1ZXN0QWNjZXNzRGVuaWVkKGVycm9yKTtcbiAgICAgIGNhc2UgNDAzOlxuICAgICAgICByZXR1cm4gbmV3IENvbnNlbnRSZXF1ZXN0QWNjZXNzRGVuaWVkKGVycm9yKTtcbiAgICAgIGNhc2UgNDA0OlxuICAgICAgICByZXR1cm4gbmV3IENvbnNlbnRSZXF1ZXN0Tm90Rm91bmQoZXJyb3IpO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIG5ldyBDb25zZW50UmVxdWVzdFVua25vd25FcnJvcihlcnJvcik7XG4gICAgfVxuICB9XG59O1xuIl19