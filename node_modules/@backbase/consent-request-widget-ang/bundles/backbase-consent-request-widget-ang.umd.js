(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@backbase/foundation-ang/core'), require('@backbase/consent-ui'), require('@angular/forms'), require('@backbase/ui-ang/button'), require('@backbase/ui-ang/empty-state'), require('@backbase/ui-ang/loading-indicator'), require('@backbase/ui-ang/product-item-basic-account'), require('@backbase/ui-ang/alert'), require('@backbase/ui-ang/date-pipe'), require('@backbase/ui-ang/notification'), require('@backbase/ui-ang/account-selector'), require('@backbase/ui-ang/amount'), require('@backbase/ui-ang/search-box'), require('@backbase/ui-ang/highlight'), require('rxjs'), require('rxjs/operators'), require('@backbase/data-ang/consent'), require('@angular/router')) :
    typeof define === 'function' && define.amd ? define('@backbase/consent-request-widget-ang', ['exports', '@angular/core', '@angular/common', '@backbase/foundation-ang/core', '@backbase/consent-ui', '@angular/forms', '@backbase/ui-ang/button', '@backbase/ui-ang/empty-state', '@backbase/ui-ang/loading-indicator', '@backbase/ui-ang/product-item-basic-account', '@backbase/ui-ang/alert', '@backbase/ui-ang/date-pipe', '@backbase/ui-ang/notification', '@backbase/ui-ang/account-selector', '@backbase/ui-ang/amount', '@backbase/ui-ang/search-box', '@backbase/ui-ang/highlight', 'rxjs', 'rxjs/operators', '@backbase/data-ang/consent', '@angular/router'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["consent-request-widget-ang"] = {}), global.ng.core, global.ng.common, global.i1$1, global.i1$2, global.ng.forms, global.i7, global.i1$4, global.i8$1, global.i3, global.i4$1, global.i12, global.i2, global.i1$3, global.i4, global.i2$1, global.i8, global.rxjs, global.rxjs.operators, global.i1, global.ng.router));
})(this, (function (exports, i0, i2$2, i1$1, i1$2, i6, i7, i1$4, i8$1, i3, i4$1, i12, i2, i1$3, i4, i2$1, i8, rxjs, operators, i1, i2$3) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i2__namespace$2 = /*#__PURE__*/_interopNamespace(i2$2);
    var i1__namespace$1 = /*#__PURE__*/_interopNamespace(i1$1);
    var i1__namespace$2 = /*#__PURE__*/_interopNamespace(i1$2);
    var i6__namespace = /*#__PURE__*/_interopNamespace(i6);
    var i7__namespace = /*#__PURE__*/_interopNamespace(i7);
    var i1__namespace$4 = /*#__PURE__*/_interopNamespace(i1$4);
    var i8__namespace$1 = /*#__PURE__*/_interopNamespace(i8$1);
    var i3__namespace = /*#__PURE__*/_interopNamespace(i3);
    var i4__namespace$1 = /*#__PURE__*/_interopNamespace(i4$1);
    var i12__namespace = /*#__PURE__*/_interopNamespace(i12);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i1__namespace$3 = /*#__PURE__*/_interopNamespace(i1$3);
    var i4__namespace = /*#__PURE__*/_interopNamespace(i4);
    var i2__namespace$1 = /*#__PURE__*/_interopNamespace(i2$1);
    var i8__namespace = /*#__PURE__*/_interopNamespace(i8);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i2__namespace$3 = /*#__PURE__*/_interopNamespace(i2$3);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var ConsentRequestAccessDenied = /** @class */ (function () {
        function ConsentRequestAccessDenied(error) {
            this.error = error;
            this.kind = 'ConsentRequestAccessDenied';
        }
        return ConsentRequestAccessDenied;
    }());
    var ConsentRequestNotFound = /** @class */ (function () {
        function ConsentRequestNotFound(error) {
            this.error = error;
            this.kind = 'ConsentRequestNotFound';
        }
        return ConsentRequestNotFound;
    }());
    var ConsentRequestBadRequest = /** @class */ (function () {
        function ConsentRequestBadRequest(error) {
            this.error = error;
            this.kind = 'ConsentRequestBadRequest';
        }
        return ConsentRequestBadRequest;
    }());
    var ConsentRequestUnknownError = /** @class */ (function () {
        function ConsentRequestUnknownError(error) {
            this.error = error;
            this.kind = 'ConsentRequestUnknownError';
        }
        return ConsentRequestUnknownError;
    }());
    var ConsentRequestConnectivityError = /** @class */ (function () {
        function ConsentRequestConnectivityError(error) {
            this.error = error;
            this.kind = 'ConsentRequestConnectivityError';
        }
        return ConsentRequestConnectivityError;
    }());
    var parseError = function (error) {
        if (error.error instanceof ErrorEvent) {
            return new ConsentRequestUnknownError(error);
        }
        else {
            switch (error.status) {
                case 0:
                    return new ConsentRequestConnectivityError(error);
                case 400:
                    return new ConsentRequestBadRequest(error);
                case 401:
                    return new ConsentRequestAccessDenied(error);
                case 403:
                    return new ConsentRequestAccessDenied(error);
                case 404:
                    return new ConsentRequestNotFound(error);
                default:
                    return new ConsentRequestUnknownError(error);
            }
        }
    };

    var ConsentRequestService = /** @class */ (function () {
        function ConsentRequestService(consentReqService, consentHttpService, notification) {
            var _this = this;
            this.consentReqService = consentReqService;
            this.consentHttpService = consentHttpService;
            this.notification = notification;
            this.consentRequestId = new rxjs.ReplaySubject(1);
            this.loading = new rxjs.BehaviorSubject(true);
            this.error = new rxjs.BehaviorSubject(undefined);
            this.saving = new rxjs.BehaviorSubject(false);
            this.savingError = new rxjs.BehaviorSubject(undefined);
            this.consentRequest = this.consentRequestId.pipe(operators.filter(function (id) { return !!id; }), operators.distinctUntilChanged(), operators.tap(function () { return _this.loading.next(true); }), operators.switchMap(function (id) { return _this.loadConsentRequest(id); }), operators.tap(function () { return _this.error.next(undefined); }), operators.catchError(function (error) {
                _this.error.next(error);
                return rxjs.of(undefined);
            }), operators.tap(function () { return _this.loading.next(false); }), operators.shareReplay(1));
        }
        ConsentRequestService.prototype.getConsentRequestFrom = function (consentRequestId) {
            consentRequestId.subscribe(this.consentRequestId);
        };
        /**
         * Function for allow consent request
         * @param account - accounts list
         * @param templateRef - template for notification
         */
        ConsentRequestService.prototype.allowConsentRequest = function (account, templateRef) {
            var _this = this;
            return this.consentRequest.pipe(operators.take(1), operators.filter(function (consentRequest) { return !!consentRequest; }), operators.tap(function () { return _this.saving.next(true); }), operators.switchMap(function (consentRequest) { return _this.allow(consentRequest, account); }), operators.tap(function () { return _this.savingError.next(undefined); }), operators.catchError(function (error) { return _this.handleError(error, templateRef); }), operators.tap(function () { return _this.saving.next(false); }));
        };
        ConsentRequestService.prototype.rejectConsentRequest = function (templateRef) {
            var _this = this;
            return this.consentRequest.pipe(operators.take(1), operators.filter(function (consentRequest) { return consentRequest !== undefined; }), operators.tap(function () { return _this.saving.next(true); }), operators.switchMap(function (consentRequest) { return _this.reject(consentRequest); }), operators.tap(function () { return _this.savingError.next(undefined); }), operators.catchError(function (error) { return _this.handleError(error, templateRef); }), operators.tap(function () { return _this.saving.next(false); }));
        };
        ConsentRequestService.prototype.handleError = function (error, templateRef) {
            this.savingError.next(error);
            if (templateRef) {
                this.notification.showNotification({
                    header: templateRef,
                    message: '',
                    modifier: 'error',
                });
            }
            return rxjs.of({});
        };
        ConsentRequestService.prototype.loadConsentRequest = function (id) {
            return this.consentReqService.getIdById({ id: id }, 'response').pipe(operators.pluck('body'), operators.catchError(function (error) {
                throw parseError(error);
            }));
        };
        ConsentRequestService.prototype.allow = function (_a, accounts) {
            var consentRequestId = _a.id, redirectUrl = _a.allowConsentRedirectUrl;
            return this.consentHttpService
                .postConsents({
                consentPost: {
                    consentRequestId: consentRequestId,
                    accounts: accounts.map(function (account) { return account.id; }),
                },
            }, 'response')
                .pipe(operators.pluck('body'), operators.map(function () { return ({ redirectUrl: redirectUrl }); }), operators.catchError(function (error) {
                throw parseError(error);
            }));
        };
        ConsentRequestService.prototype.reject = function (_a) {
            var id = _a.id, redirectUrl = _a.rejectConsentRedirectUrl;
            return this.consentReqService.postRejectById({ id: id }, 'response').pipe(operators.map(function () { return ({ redirectUrl: redirectUrl }); }), operators.catchError(function (error) {
                throw parseError(error);
            }));
        };
        return ConsentRequestService;
    }());
    ConsentRequestService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentRequestService, deps: [{ token: i1__namespace.ConsentRequestsHttpService }, { token: i1__namespace.ConsentsHttpService }, { token: i2__namespace.NotificationService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    ConsentRequestService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentRequestService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentRequestService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace.ConsentRequestsHttpService }, { type: i1__namespace.ConsentsHttpService }, { type: i2__namespace.NotificationService }]; } });

    var ConsentRequestPreferencesService = /** @class */ (function () {
        function ConsentRequestPreferencesService(itemModel) {
            this.itemModel = itemModel;
            /**
             * Stream of multiAccountSelection property (based on CXP value)
             */
            this.multiAccountSelectionItemModel = this.getItemModelProperty('multiAccountSelection', false).pipe(operators.map(Boolean));
            /**
             * Stream of multiAccountSelection property (based on INPUT value)
             */
            this.multiAccountSelectionInput = new rxjs.BehaviorSubject(false);
            /**
             * Stream of multiAccountSelection property (based on BOTH values)
             */
            this.multiAccountSelection$ = this.getProperty(this.multiAccountSelectionInput, this.multiAccountSelectionItemModel);
        }
        ConsentRequestPreferencesService.prototype.getProperty = function (input$, itemModel) {
            return rxjs.combineLatest([input$, itemModel]).pipe(operators.map(function (_b) {
                var _c = __read(_b, 2), value = _c[0], valueIM = _c[1];
                return (value === undefined ? valueIM : value);
            }));
        };
        ConsentRequestPreferencesService.prototype.getItemModelProperty = function (name, defaultVal) {
            var _a;
            return ((_a = this.itemModel) === null || _a === void 0 ? void 0 : _a.property(name, defaultVal)) || rxjs.of(defaultVal);
        };
        return ConsentRequestPreferencesService;
    }());
    ConsentRequestPreferencesService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentRequestPreferencesService, deps: [{ token: i1__namespace$1.ItemModel, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    ConsentRequestPreferencesService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentRequestPreferencesService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentRequestPreferencesService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () {
            return [{ type: i1__namespace$1.ItemModel, decorators: [{
                            type: i0.Optional
                        }] }];
        } });

    var ConsentRequestTppInformationComponent = /** @class */ (function () {
        function ConsentRequestTppInformationComponent() {
            /**
             * Component context
             */
            this.hostRef = this;
        }
        return ConsentRequestTppInformationComponent;
    }());
    ConsentRequestTppInformationComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentRequestTppInformationComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    ConsentRequestTppInformationComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ConsentRequestTppInformationComponent, selector: "bb-consent-request-tpp-information", inputs: { tpp: "tpp" }, ngImport: i0__namespace, template: "<ng-container bbConsentRequestTppInformationCustomizable [bbHostRef]=\"hostRef\" [bbTemplateContext]=\"tpp\">\n</ng-container>\n\n<ng-template bbConsentRequestTppInformationCustomizable let-hostRef let-tpp=\"context\">\n  <div\n    class=\"bb-block--sm bb-text-bold\"\n    i18n=\"Requested by|Third party information@@consent-request.label.requestedBy\"\n    data-role=\"requested-by-label\">\n    Requested by\n  </div>\n\n  <div class=\"card card-sm\">\n    <div class=\"card-body\">\n      <bb-third-party-provider-ui\n        [name]=\"tpp.name\"\n        [url]=\"tpp.website\"\n        [verified]=\"tpp.isTrusted\"\n        [image]=\"tpp.imageUrl\"\n        data-role=\"third-party-provider-label\">\n      </bb-third-party-provider-ui>\n    </div>\n  </div>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return i1__namespace$2.ӨThirdPartyProviderComponent; }), selector: "bb-third-party-provider-ui", inputs: ["name", "image", "url", "verified", "condensed", "expiryDate", "expired", "showExpire"] }], directives: [{ type: i0__namespace.forwardRef(function () { return ConsentRequestTppInformationCustomizableDirective; }), selector: "[bbConsentRequestTppInformationCustomizable]" }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentRequestTppInformationComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-consent-request-tpp-information',
                        templateUrl: './consent-request-tpp-information.component.html',
                    }]
            }], propDecorators: { tpp: [{
                    type: i0.Input
                }] } });
    var ConsentRequestTppInformationCustomizableDirective = /** @class */ (function (_super) {
        __extends(ConsentRequestTppInformationCustomizableDirective, _super);
        function ConsentRequestTppInformationCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ConsentRequestTppInformationCustomizableDirective;
    }(i1$1.BbTemplate));
    ConsentRequestTppInformationCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentRequestTppInformationCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    ConsentRequestTppInformationCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: ConsentRequestTppInformationCustomizableDirective, selector: "[bbConsentRequestTppInformationCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentRequestTppInformationCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbConsentRequestTppInformationCustomizable]',
                    }]
            }] });

    var ConsentRequestAccountSelectorComponent = /** @class */ (function () {
        function ConsentRequestAccountSelectorComponent() {
            var _this = this;
            /**
             * Component context
             */
            this.hostRef = this;
            /**
             * If error should be shown
             */
            this.showError = false;
            /**
             * Flag for multi account selection
             */
            this.multiAccountSelection = false;
            this.searchedFields = ['name', 'balance'];
            this._accounts = [];
            this.allAccounts = [];
            /**
             * Emitter that fires when you select an account
             */
            this.selectedAccountChange = new i0.EventEmitter();
            this.destroy = new rxjs.Subject();
            this.accountSelector = {
                change: function (self, item) {
                    _this.onSelectAccount(item);
                    self.selectedItem = item;
                    self.eventTriggered = '$change';
                    self.eventState = item;
                },
                scrollToEnd: function (self, event) {
                    self.eventTriggered = '$scrollToEnd';
                    self.eventState = event;
                },
            };
            this.form = new i6.FormGroup({
                query: new i6.FormControl(''),
            });
            this.form.get('query').valueChanges.pipe(operators.takeUntil(this.destroy)).subscribe(function (selectedValue) {
                _this._accounts = _this.allAccounts.filter(function (item) {
                    return _this.searchedFields.some(function (field) { return item[field].toString().toLocaleLowerCase().indexOf(selectedValue.toLocaleLowerCase()) !== -1; });
                });
            });
        }
        Object.defineProperty(ConsentRequestAccountSelectorComponent.prototype, "accounts", {
            /**
             * Setter for List of accounts
             */
            set: function (value) {
                if (value) {
                    this._accounts = value;
                    this.allAccounts = value;
                }
            },
            enumerable: false,
            configurable: true
        });
        ConsentRequestAccountSelectorComponent.prototype.ngOnDestroy = function () {
            this.destroy.next();
            this.destroy.complete();
        };
        /**
         * Emit selected accounts
         * @param account - account list
         */
        ConsentRequestAccountSelectorComponent.prototype.onSelectAccount = function (account) {
            this.selectedAccountChange.emit(this.multiAccountSelection ? account : [account]);
            this.showError = false;
        };
        ConsentRequestAccountSelectorComponent.prototype.checkSelected = function (item) {
            if (this.selectedAccount) {
                return this.selectedAccount.includes(item);
            }
            return false;
        };
        ConsentRequestAccountSelectorComponent.prototype.onSearchClear = function () {
            // @ts-ignore
            this.form.get('query').setValue('');
        };
        ConsentRequestAccountSelectorComponent.prototype.selectAll = function () {
            this.selectedAccountChange.emit(this.allAccounts);
        };
        ConsentRequestAccountSelectorComponent.prototype.unselectAll = function () {
            this.selectedAccountChange.emit([]);
        };
        return ConsentRequestAccountSelectorComponent;
    }());
    ConsentRequestAccountSelectorComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentRequestAccountSelectorComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    ConsentRequestAccountSelectorComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ConsentRequestAccountSelectorComponent, selector: "bb-consent-request-account-selector", inputs: { showError: "showError", multiAccountSelection: "multiAccountSelection", accounts: "accounts", selectedAccount: "selectedAccount" }, outputs: { selectedAccountChange: "selectedAccountChange" }, ngImport: i0__namespace, template: "<ng-container bbConsentRequestAccountSelectorCustomizable [bbHostRef]=\"hostRef\" [bbTemplateContext]=\"_accounts\">\n</ng-container>\n\n<ng-template bbConsentRequestAccountSelectorCustomizable let-hostRef let-accounts=\"context\">\n  <div\n    class=\"bb-block bb-block--sm bb-text-bold\"\n    *ngIf=\"!hostRef.selectedAccount || (hostRef.selectedAccount && hostRef.selectedAccount.length <= 1)\"\n    i18n=\"Account Exposed|Account Exposed label@@consent-request.label.accountExposed\"\n    data-role=\"account-exposed-label\">\n    Account Exposed\n  </div>\n  <div\n    class=\"bb-block bb-block--sm bb-text-bold\"\n    *ngIf=\"hostRef.selectedAccount && hostRef.selectedAccount.length > 1\"\n    i18n=\"Accounts Exposed|Account Exposed label@@consent-request.label.accountsExposed\"\n    data-role=\"accounts-exposed-label\">\n    Accounts Exposed\n  </div>\n\n  <div [ngClass]=\"{ 'border border-danger rounded': hostRef.showError }\">\n    <bb-account-selector-ui\n      data-role=\"account-selector\"\n      [items]=\"accounts\"\n      [highlight]=\"true\"\n      [disableScrollEnd]=\"false\"\n      [filterItems]=\"false\"\n      [multiple]=\"hostRef.multiAccountSelection\"\n      [closeOnSelect]=\"!hostRef.multiAccountSelection\"\n      [dropdownPosition]=\"'bottom'\"\n      [selectedItems]=\"\n        hostRef.multiAccountSelection\n          ? hostRef.selectedAccount\n          : hostRef.selectedAccount\n          ? hostRef.selectedAccount[0]\n          : undefined\n      \"\n      (change)=\"hostRef.accountSelector.change(hostRef.accountSelector, $event)\"\n      (scrollToEnd)=\"hostRef.accountSelector.scrollToEnd(hostRef.accountSelector, $event)\"\n      placeholder=\"Select Accounts\"\n      i18n-placeholder=\"Select Accounts placeholder@@consent-request.account-selector.placeholder\">\n      <ng-template bbCustomOptionsHeader>\n        <div class=\"m-2\">\n          <form [formGroup]=\"hostRef.form\">\n            <bb-search-box-ui\n              formControlName=\"query\"\n              [showClear]=\"true\"\n              [showSearch]=\"true\"\n              (clear)=\"hostRef.onSearchClear($event)\"\n              [autofocus]=\"true\"\n              placeholder=\"Search\"\n              autocomplete=\"off\"\n              i18n-placeholder=\"Search@@consent-request.account-selector-ui.search.placeholder\"></bb-search-box-ui>\n          </form>\n        </div>\n        <div class=\"bb-account-selector--multiple__selected-account-filters\" *ngIf=\"hostRef.multiAccountSelection\">\n          <button\n            (click)=\"hostRef.selectAll()\"\n            bbButton\n            buttonSize=\"sm\"\n            color=\"link\"\n            i18n=\"Select all|Select all text@@consent-request.account-selector-ui.select.all.text\"\n            data-role=\"select-all\">\n            Select all\n          </button>\n          <button\n            (click)=\"hostRef.unselectAll()\"\n            bbButton\n            buttonSize=\"sm\"\n            color=\"link\"\n            i18n=\"Unselect all|Unselect all text@@consent-request.account-selector-ui.unselect.all.text\"\n            data-role=\"unselect-all\">\n            Unselect all\n          </button>\n        </div>\n      </ng-template>\n      <ng-template bbCustomSingleSelectedItemLabel let-item=\"item\">\n        <bb-product-item-basic-account-ui\n          [active]=\"true\"\n          [amount]=\"item.balance\"\n          [currency]=\"item.currency\"\n          [productNumber]=\"item.IBAN || item.BBAN || item.number\"\n          [title]=\"item.name\">\n          <ng-template bbCustomProductItemBasicAccountDetailsFormatter let-amount=\"amount\" let-currency=\"currency\">\n            <bb-amount-ui\n              class=\"font-weight-bold\"\n              [amount]=\"amount\"\n              [currency]=\"currency\"\n              [mapCurrency]=\"false\"></bb-amount-ui>\n          </ng-template>\n        </bb-product-item-basic-account-ui>\n      </ng-template>\n      <ng-template bbCustomOptionItem let-item$=\"item$\" let-item=\"item\">\n        <bb-product-item-basic-account-ui\n          [active]=\"hostRef.checkSelected(item)\"\n          [productNumber]=\"item.IBAN || item.BBAN || item.number\"\n          [amount]=\"item.balance\"\n          [currency]=\"item.currency\"\n          [title]=\"item.name\">\n          <ng-template bbCustomProductItemBasicAccountDetailsFormatter let-amount=\"amount\" let-currency=\"currency\">\n            <bb-amount-ui\n              class=\"bb-highlight bb-product-item__amount\"\n              [amount]=\"amount\"\n              [currency]=\"currency\"\n              [bbHighlight]=\"true\"></bb-amount-ui>\n          </ng-template>\n        </bb-product-item-basic-account-ui>\n      </ng-template>\n    </bb-account-selector-ui>\n  </div>\n  <div\n    *ngIf=\"hostRef.showError\"\n    class=\"text-danger mt-2\"\n    data-role=\"no-accounts-error-message\"\n    i18n=\"Select an account|No account selected label@@consent-request.label.noAccountSelected\">\n    Select an account.\n  </div>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return i1__namespace$3.AccountSelectorComponent; }), selector: "bb-account-selector-ui", inputs: ["items", "disabled", "notFoundText", "showError", "productNumberFormat", "selectedItems", "multiple", "closeOnSelect", "searchable", "clearable", "placeholder", "loading", "dropdownPosition", "disableScrollEnd", "highlight", "filterItems", "markFirst", "internalFiltering", "virtualScroll", "required", "typeahead", "minTermLength", "typeToSearchText", "aria-describedby", "aria-labelledby", "aria-invalid", "searchFunc", "showCurrencySymbol", "showBankBranchCode", "groupByFn", "groupValueFn", "size", "compareItemsWith"], outputs: ["search", "clearSearch", "scroll", "scrollToEnd", "remove", "change", "filterChange", "focus", "blur"] }, { type: i0__namespace.forwardRef(function () { return i2__namespace$1.SearchBoxComponent; }), selector: "bb-search-box-ui", inputs: ["placeholder", "maxLength", "squareBorder", "typeaheadOptions", "showSearch", "showClear", "searchLabel", "clearLabel", "autocomplete"], outputs: ["submit", "clear", "valueChange"] }, { type: i0__namespace.forwardRef(function () { return i3__namespace.ProductItemBasicAccountComponent; }), selector: "bb-product-item-basic-account-ui", inputs: ["title", "productNumber", "productNumberFormat", "currency", "showCurrencySymbol", "amount", "highlight", "productDetailsInfo", "active", "favorite", "favoriteIconColor", "selected", "type", "status", "balanceLabel", "bankBranchCode"] }, { type: i0__namespace.forwardRef(function () { return i4__namespace.AmountComponent; }), selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }], directives: [{ type: i0__namespace.forwardRef(function () { return ConsentRequestAccountSelectorCustomizableDirective; }), selector: "[bbConsentRequestAccountSelectorCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i2__namespace$2.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0__namespace.forwardRef(function () { return i2__namespace$2.NgClass; }), selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace$3.CustomOptionsHeaderDirective; }), selector: "ng-template[bbCustomOptionsHeader]" }, { type: i0__namespace.forwardRef(function () { return i6__namespace.ɵNgNoValidate; }), selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i0__namespace.forwardRef(function () { return i6__namespace.NgControlStatusGroup; }), selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i0__namespace.forwardRef(function () { return i6__namespace.FormGroupDirective; }), selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i0__namespace.forwardRef(function () { return i6__namespace.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0__namespace.forwardRef(function () { return i6__namespace.FormControlName; }), selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i0__namespace.forwardRef(function () { return i7__namespace.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0__namespace.forwardRef(function () { return i1__namespace$3.CustomSingleSelectedItemLabelDirective; }), selector: "ng-template[bbCustomSingleSelectedItemLabel]" }, { type: i0__namespace.forwardRef(function () { return i3__namespace.CustomProductItemBasicAccountDetailsFormatterDirective; }), selector: "ng-template[bbCustomProductItemBasicAccountDetailsFormatter]" }, { type: i0__namespace.forwardRef(function () { return i1__namespace$3.CustomOptionItemDirective; }), selector: "ng-template[bbCustomOptionItem]" }, { type: i0__namespace.forwardRef(function () { return i8__namespace.HighlightDirective; }), selector: "[bbHighlight]", inputs: ["amount", "bbHighlight", "negativeClass", "positiveClass"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentRequestAccountSelectorComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-consent-request-account-selector',
                        templateUrl: './consent-request-account-selector.component.html',
                    }]
            }], ctorParameters: function () { return []; }, propDecorators: { showError: [{
                    type: i0.Input
                }], multiAccountSelection: [{
                    type: i0.Input
                }], accounts: [{
                    type: i0.Input
                }], selectedAccount: [{
                    type: i0.Input
                }], selectedAccountChange: [{
                    type: i0.Output
                }] } });
    var ConsentRequestAccountSelectorCustomizableDirective = /** @class */ (function (_super) {
        __extends(ConsentRequestAccountSelectorCustomizableDirective, _super);
        function ConsentRequestAccountSelectorCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ConsentRequestAccountSelectorCustomizableDirective;
    }(i1$1.BbTemplate));
    ConsentRequestAccountSelectorCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentRequestAccountSelectorCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    ConsentRequestAccountSelectorCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: ConsentRequestAccountSelectorCustomizableDirective, selector: "[bbConsentRequestAccountSelectorCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentRequestAccountSelectorCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbConsentRequestAccountSelectorCustomizable]',
                    }]
            }] });

    var Permission = {
        ReadAccountsDetail: 'ReadAccountsDetail',
        ReadBalances: 'ReadBalances',
        ReadTransactionsDetail: 'ReadTransactionsDetail',
        ReadBeneficiariesDetail: 'ReadBeneficiariesDetail',
        ReadDirectDebits: 'ReadDirectDebits',
        ReadProducts: 'ReadProducts',
        ReadStandingOrdersDetail: 'ReadStandingOrdersDetail',
        ReadTransactionsCredits: 'ReadTransactionsCredits',
        ReadTransactionsDebits: 'ReadTransactionsDebits',
    };

    var ConsentRequestPermissionsInformationComponent = /** @class */ (function () {
        function ConsentRequestPermissionsInformationComponent() {
            /**
             * Component context
             */
            this.hostRef = this;
            /**
             * List of permissions
             */
            this.permissions = [];
            /**
             * Permission mapper
             */
            this.Permission = Permission;
        }
        /**
         * Check if permission contains provided permission
         * @param permission
         */
        ConsentRequestPermissionsInformationComponent.prototype.hasPermission = function (permission) {
            return this.permissions.includes(permission);
        };
        return ConsentRequestPermissionsInformationComponent;
    }());
    ConsentRequestPermissionsInformationComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentRequestPermissionsInformationComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    ConsentRequestPermissionsInformationComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ConsentRequestPermissionsInformationComponent, selector: "bb-consent-request-permissions-information", inputs: { permissions: "permissions" }, ngImport: i0__namespace, template: "<ng-container\n  bbConsentRequestPermissionsInformationCustomizable\n  [bbHostRef]=\"hostRef\"\n  [bbTemplateContext]=\"permissions\">\n</ng-container>\n\n<ng-template bbConsentRequestPermissionsInformationCustomizable let-hostRef let-permissions=\"context\">\n  <div\n    class=\"bb-block--sm bb-text-bold\"\n    i18n=\"Permission you grant|Permissions you grant label@@consent-request.label.grantPermissions\"\n    data-role=\"permissions-grant-label\">\n    What permissions you grant\n  </div>\n\n  <div class=\"card\">\n    <div class=\"card-section\" *ngIf=\"hostRef.hasPermission(hostRef.Permission.ReadAccountsDetail)\">\n      <div\n        class=\"bb-consent-request__information-label\"\n        data-role=\"account-information-label\"\n        i18n=\"\n          Account Information|Account Information Permission\n          title@@consent-request.label.permission.ReadAccountsDetail.title\">\n        Account information\n      </div>\n      <div\n        class=\"bb-consent-request__account-information\"\n        i18n=\"\n          Account Information details|Account Information Permission\n          subtitle@@consent-request.label.permission.ReadAccountsDetail.subtitle\">\n        Name, number\n      </div>\n    </div>\n\n    <div class=\"card-section\" *ngIf=\"hostRef.hasPermission(hostRef.Permission.ReadBalances)\">\n      <div\n        class=\"bb-consent-request__information-label\"\n        data-role=\"account-balance-label\"\n        i18n=\"Account Balance|Account Balance Permission title@@consent-request.label.permission.ReadBalances.title\">\n        Account balance\n      </div>\n    </div>\n\n    <div class=\"card-section\" *ngIf=\"hostRef.hasPermission(hostRef.Permission.ReadTransactionsDetail)\">\n      <div\n        class=\"bb-consent-request__information-label\"\n        data-role=\"transactions-label\"\n        i18n=\"\n          Transactions|Transaction Details Permission\n          title@@consent-request.label.permission.ReadTransactionsDetail.title\">\n        Transactions\n      </div>\n      <div\n        i18n=\"\n          Transactions details |Transaction Details Permission\n          subtitle@@consent-request.label.permission.ReadTransactionsDetail.subtitle\">\n        Category, amount, date, time, beneficiary details\n      </div>\n    </div>\n\n    <div class=\"card-section\" *ngIf=\"hostRef.hasPermission(hostRef.Permission.ReadBeneficiariesDetail)\">\n      <div\n        class=\"bb-consent-request__information-label\"\n        i18n=\"Beneficiaries|Beneficiaries title@@consent-request.label.permission.ReadBeneficiariesDetail.title\">\n        Beneficiaries details\n      </div>\n    </div>\n\n    <div class=\"card-section\" *ngIf=\"hostRef.hasPermission(hostRef.Permission.ReadDirectDebits)\">\n      <div\n        class=\"bb-consent-request__information-label\"\n        i18n=\"Direct Debits|Direct Debits Permission title@@consent-request.label.permission.ReadDirectDebits.title\">\n        Direct Debits\n      </div>\n    </div>\n\n    <div class=\"card-section\" *ngIf=\"hostRef.hasPermission(hostRef.Permission.ReadProducts)\">\n      <div\n        class=\"bb-consent-request__information-label\"\n        i18n=\"Products|Products Permission title@@consent-request.label.permission.ReadProducts.title\">\n        Products\n      </div>\n    </div>\n\n    <div class=\"card-section\" *ngIf=\"hostRef.hasPermission(hostRef.Permission.ReadStandingOrdersDetail)\">\n      <div\n        class=\"bb-consent-request__information-label\"\n        i18n=\"\n          Standing Orders|Standing Orders Permission\n          title@@consent-request.label.permission.ReadStandingOrdersDetail.title\">\n        Standing Orders\n      </div>\n    </div>\n\n    <div class=\"card-section\" *ngIf=\"hostRef.hasPermission(hostRef.Permission.ReadTransactionsCredits)\">\n      <div\n        class=\"bb-consent-request__information-label\"\n        i18n=\"\n          Transactions Credits|Transactions Credits Permission\n          title@@consent-request.label.permission.ReadTransactionsCredits.title\">\n        Transactions Credits\n      </div>\n    </div>\n\n    <div class=\"card-section\" *ngIf=\"hostRef.hasPermission(hostRef.Permission.ReadTransactionsDebits)\">\n      <div\n        class=\"bb-consent-request__information-label\"\n        i18n=\"\n          Transactions Debits|Transactions Debits Permission\n          title@@consent-request.label.permission.ReadTransactionsDebits.title\">\n        Transactions Debits\n      </div>\n    </div>\n  </div>\n</ng-template>\n", directives: [{ type: i0__namespace.forwardRef(function () { return ConsentRequestPermissionsInformationCustomizableDirective; }), selector: "[bbConsentRequestPermissionsInformationCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i2__namespace$2.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentRequestPermissionsInformationComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-consent-request-permissions-information',
                        templateUrl: './consent-request-permissions-information.component.html',
                    }]
            }], propDecorators: { permissions: [{
                    type: i0.Input
                }] } });
    var ConsentRequestPermissionsInformationCustomizableDirective = /** @class */ (function (_super) {
        __extends(ConsentRequestPermissionsInformationCustomizableDirective, _super);
        function ConsentRequestPermissionsInformationCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ConsentRequestPermissionsInformationCustomizableDirective;
    }(i1$1.BbTemplate));
    ConsentRequestPermissionsInformationCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentRequestPermissionsInformationCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    ConsentRequestPermissionsInformationCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: ConsentRequestPermissionsInformationCustomizableDirective, selector: "[bbConsentRequestPermissionsInformationCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentRequestPermissionsInformationCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbConsentRequestPermissionsInformationCustomizable]',
                    }]
            }] });

    var ConsentRequestErrorComponent = /** @class */ (function () {
        function ConsentRequestErrorComponent() {
        }
        return ConsentRequestErrorComponent;
    }());
    ConsentRequestErrorComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentRequestErrorComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    ConsentRequestErrorComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ConsentRequestErrorComponent, selector: "bb-consent-request-error", inputs: { consentRequestId: "consentRequestId", errorKind: "errorKind" }, ngImport: i0__namespace, template: "<bb-empty-state-ui\n  *ngIf=\"!consentRequestId\"\n  title=\"Unexpected Error\"\n  i18n-title=\"\n    Unexpected Error title|Empty state label when there is an unexpected\n    error@@consent-request.error.noConsentRequest.title\"\n  subtitle=\"Something's gone wrong with our server. Please try again later.\"\n  i18n-subtitle=\"\n    Unexpected Error subtitle|Empty state subtitle label when there is an unexpected\n    error@@consent-request.error.noConsentRequest.subtitle\"\n  iconModifier=\"error\"></bb-empty-state-ui>\n<ng-container *ngIf=\"consentRequestId && errorKind\" [ngSwitch]=\"errorKind\">\n  <bb-empty-state-ui\n    *ngSwitchCase=\"'ConsentRequestAccessDenied'\"\n    title=\"Permissions required\"\n    i18n-title=\"\n      Permissions required|Error state label when user does not have permissions to view consent\n      request@@consent-request.error.accessDenied.title\"\n    subtitle=\"You don't have permissions to manage consents.\"\n    i18n-subtitle=\"\n      No Permissions Subtitle|Error state subtitle label when user does not have permissions to view consent\n      requests@@consent-request.error.accessDenied.subtitle\"\n    iconModifier=\"lock\"></bb-empty-state-ui>\n\n  <bb-empty-state-ui\n    *ngSwitchCase=\"'ConsentRequestConnectivityError'\"\n    title=\"Connectivity Error\"\n    i18n-title=\"\n      Connectivity Error title|Empty state label when there is connectivity\n      error@@consent-request.error.connectivity.title\"\n    subtitle=\"Are you connected to the internet? Please check your connection and try again.\"\n    i18n-subtitle=\"\n      Connectivity Error subtitle|Empty state subtitle label when there is connectivity\n      error@@consent-request.error.connectivity.subtitle\"\n    iconModifier=\"error\"></bb-empty-state-ui>\n\n  <!-- This will usually happen on environment misconfiguration -->\n  <!-- ConsentRequestNotFound | ConsentRequestUnknownError | ConsentRequestBadRequest-->\n  <bb-empty-state-ui\n    *ngSwitchDefault\n    title=\"Unexpected Error\"\n    i18n-title=\"\n      Unexpected Error title|Empty state label when there is an unexpected error@@consent-request.error.unexpected.title\"\n    subtitle=\"Something's gone wrong with our server. Please try again later.\"\n    i18n-subtitle=\"\n      Unexpected Error subtitle|Empty state subtitle label when there is an unexpected\n      error@@consent-request.error.unexpected.subtitle\"\n    iconModifier=\"error\"></bb-empty-state-ui>\n</ng-container>\n", components: [{ type: i1__namespace$4.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i2__namespace$2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2__namespace$2.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i2__namespace$2.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i2__namespace$2.NgSwitchDefault, selector: "[ngSwitchDefault]" }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentRequestErrorComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-consent-request-error',
                        templateUrl: './consent-request-error.component.html',
                    }]
            }], propDecorators: { consentRequestId: [{
                    type: i0.Input
                }], errorKind: [{
                    type: i0.Input
                }] } });

    var ConsentRequestContainerComponent = /** @class */ (function () {
        function ConsentRequestContainerComponent(service, route, consentRequestPreferencesService) {
            this.service = service;
            this.route = route;
            this.consentRequestPreferencesService = consentRequestPreferencesService;
            /**
             * Component context
             */
            this.hostRef = this;
            /**
             * Stream for Multi-account selection usage flag.
             * If true used a multi-selection account selector, else a single selection account selector.
             * Retrieving value from CXP manager.
             */
            this.multiAccountSelection$ = this.consentRequestPreferencesService.multiAccountSelection$;
            /**
             * Emitter that fires when allowing consent
             */
            this.redirectToAllowUrl = new i0.EventEmitter();
            /**
             * Emitter that fires when rejecting consent
             */
            this.redirectToRejectUrl = new i0.EventEmitter();
            /**
             * Notification error template reference
             */
            this.notificationErrorTemplate = '';
            /**
             * Stream of Consent Request ID
             */
            this.consentRequestId = this.getRouteParam(this.route, 'consentRequestId').pipe(operators.map(function (consentRequestId) { return consentRequestId || ''; }));
            /**
             * Stream of loading spinner visibility flag
             */
            this.loading = this.service.loading;
            /**
             * Stream of Consent request errors
             */
            this.error = this.service.error;
            /**
             * Stream of saving state flag
             */
            this.saving = this.service.saving;
            /**
             * Stream of saving consent request error
             */
            this.savingError = this.service.savingError;
            /**
             * Stream of get consentRequest
             */
            this.consentRequest = this.service.consentRequest;
            /**
             * Flag for show account error
             */
            this.showAccountError = false;
        }
        /**
         * Function for allow consent request
         */
        ConsentRequestContainerComponent.prototype.allowConsentRequest = function () {
            var _this = this;
            if (this.selectedAccount) {
                this.showAccountError = false;
                this.service
                    .allowConsentRequest(this.selectedAccount, this.notificationErrorTemplate)
                    .pipe(operators.tap(function (redirect) {
                    if (redirect.redirectUrl) {
                        _this.redirectToAllowUrl.emit(redirect.redirectUrl);
                    }
                }))
                    .subscribe();
            }
            else {
                this.showAccountError = true;
            }
        };
        /**
         * Function for reject consent request
         */
        ConsentRequestContainerComponent.prototype.rejectConsentRequest = function () {
            var _this = this;
            this.service
                .rejectConsentRequest(this.notificationErrorTemplate)
                .pipe(operators.tap(function (response) {
                if (response.redirectUrl) {
                    _this.redirectToRejectUrl.emit(response.redirectUrl);
                }
            }))
                .subscribe();
        };
        ConsentRequestContainerComponent.prototype.ngOnInit = function () {
            this.service.getConsentRequestFrom(this.consentRequestId);
        };
        ConsentRequestContainerComponent.prototype.getRouteParam = function (route, param) {
            var paramValue = rxjs.combineLatest(route.paramMap.pipe(operators.pluck('params', param)), route.queryParamMap.pipe(operators.pluck('params', param)), function (params, qparams) {
                return params ? params : qparams;
            });
            if (!route.parent) {
                return paramValue;
            }
            // ensure that level that has actual value keeps it from being cleared
            return rxjs.combineLatest([paramValue, this.getRouteParam(route.parent, param)]).pipe(operators.map(function (params) { return params[0] || params[1]; }));
        };
        return ConsentRequestContainerComponent;
    }());
    ConsentRequestContainerComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentRequestContainerComponent, deps: [{ token: ConsentRequestService }, { token: i2__namespace$3.ActivatedRoute }, { token: ConsentRequestPreferencesService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ConsentRequestContainerComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ConsentRequestContainerComponent, selector: "bb-consent-request-container", outputs: { redirectToAllowUrl: "redirectToAllowUrl", redirectToRejectUrl: "redirectToRejectUrl" }, viewQueries: [{ propertyName: "notificationErrorTemplate", first: true, predicate: ["notificationError"], descendants: true }], ngImport: i0__namespace, template: "<ng-container\n  bbConsentRequestWidgetCustomizable\n  [bbHostRef]=\"hostRef\"\n  [bbTemplateContext]=\"{\n    consentRequest: consentRequest | async,\n    multiAccountSelection: multiAccountSelection$ | async\n  }\">\n</ng-container>\n\n<ng-template\n  bbConsentRequestWidgetCustomizable\n  let-hostRef\n  let-consentRequest=\"context.consentRequest\"\n  let-multiAccountSelection=\"context.multiAccountSelection\">\n  <ng-container *ngIf=\"hostRef.consentRequestId | async; else errorTemplate\">\n    <ng-container *ngIf=\"!(hostRef.loading | async) as loading; else loadingTemplate\">\n      <ng-container *ngIf=\"!(hostRef.error | async); else errorTemplate\">\n        <div class=\"bb-consent-request\" *ngIf=\"consentRequest\">\n          <div\n            class=\"bb-heading-2 bb-block--lg\"\n            data-role=\"request-access-label\"\n            i18n=\"Widget header|Third party request access message@@consent-request.label.header\">\n            Third party requested access to your accounts\n          </div>\n\n          <ng-container *ngIf=\"!(hostRef.saving | async); else savingLoadingTemplate\">\n            <bb-alert-ui\n              *ngIf=\"hostRef.savingError | async\"\n              title=\"Unknown error\"\n              i18n-title=\"Unknown Error|Unknown Error Label@@consent-request.label.error.unknown\"\n              message=\"Try to make action again or contact your system administrator.\"\n              i18n-message=\"Try again|Try again error message@@consent-request.label.error.tryAgain\"\n              data-role=\"allow-consent-request-error\"></bb-alert-ui>\n\n            <div class=\"bb-block--lg\">\n              <bb-consent-request-tpp-information [tpp]=\"consentRequest.tpp\"></bb-consent-request-tpp-information>\n            </div>\n\n            <div class=\"bb-block--lg\">\n              <bb-consent-request-account-selector\n                [multiAccountSelection]=\"multiAccountSelection\"\n                [showError]=\"hostRef.showAccountError\"\n                [accounts]=\"consentRequest.accounts\"\n                [(selectedAccount)]=\"hostRef.selectedAccount\"></bb-consent-request-account-selector>\n            </div>\n\n            <div class=\"bb-block--lg\">\n              <bb-consent-request-permissions-information\n                [permissions]=\"consentRequest.permissions\"></bb-consent-request-permissions-information>\n            </div>\n\n            <div class=\"bb-block--lg\">\n              <div\n                class=\"bb-block--sm bb-text-bold\"\n                data-role=\"expiration-date-label\"\n                i18n=\"Expiration date|Consent expiration date@@consent-request.label.expiryDate\">\n                Expiration date\n              </div>\n\n              <div>{{ consentRequest.expiryDate | bbDate: 'bbShort' }}</div>\n            </div>\n          </ng-container>\n\n          <div class=\"bb-button-bar bb-button-bar--reverse\">\n            <button\n              bbButton\n              [disabled]=\"hostRef.saving | async\"\n              (click)=\"hostRef.allowConsentRequest()\"\n              i18n=\"Allow button|Allow consent request@@consent-request.label.allow\"\n              color=\"primary\"\n              class=\"bb-button-bar__button\"\n              data-role=\"allow-button\">\n              Allow\n            </button>\n            <button\n              bbButton\n              [disabled]=\"hostRef.saving | async\"\n              (click)=\"hostRef.rejectConsentRequest()\"\n              i18n=\"Reject button|Reject consent request@@consent-request.label.reject\"\n              color=\"secondary\"\n              class=\"bb-button-bar__button\"\n              data-role=\"reject-button\">\n              Reject\n            </button>\n          </div>\n\n          <ng-template #savingLoadingTemplate>\n            <div class=\"bb-state-container\">\n              <bb-loading-indicator-ui\n                text=\"Processing the request...\"\n                i18n-text=\"\n                  Processing|Processing the allow/reject request@@consent-request.label.processing\"></bb-loading-indicator-ui>\n            </div>\n          </ng-template>\n        </div>\n      </ng-container>\n    </ng-container>\n\n    <ng-template #loadingTemplate>\n      <div class=\"bb-state-container\">\n        <bb-loading-indicator-ui></bb-loading-indicator-ui>\n      </div>\n    </ng-template>\n  </ng-container>\n\n  <ng-template #errorTemplate>\n    <div class=\"bb-state-container\">\n      <bb-consent-request-error\n        [consentRequestId]=\"hostRef.consentRequestId | async\"\n        [errorKind]=\"$any(hostRef.error | async)?.kind\"></bb-consent-request-error>\n    </div>\n  </ng-template>\n\n  <ng-template #notificationError>\n    <span\n      i18n=\"\n        Operation Failed|Error notification when failing to save request\n        consent@@consent-request.label.notification.error\">\n      Operation failed\n    </span>\n  </ng-template>\n</ng-template>\n", components: [{ type: i0__namespace.forwardRef(function () { return i4__namespace$1.AlertComponent; }), selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i0__namespace.forwardRef(function () { return ConsentRequestTppInformationComponent; }), selector: "bb-consent-request-tpp-information", inputs: ["tpp"] }, { type: i0__namespace.forwardRef(function () { return ConsentRequestAccountSelectorComponent; }), selector: "bb-consent-request-account-selector", inputs: ["showError", "multiAccountSelection", "accounts", "selectedAccount"], outputs: ["selectedAccountChange"] }, { type: i0__namespace.forwardRef(function () { return ConsentRequestPermissionsInformationComponent; }), selector: "bb-consent-request-permissions-information", inputs: ["permissions"] }, { type: i0__namespace.forwardRef(function () { return i8__namespace$1.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i0__namespace.forwardRef(function () { return ConsentRequestErrorComponent; }), selector: "bb-consent-request-error", inputs: ["consentRequestId", "errorKind"] }], directives: [{ type: i0__namespace.forwardRef(function () { return ConsentRequestWidgetCustomizableDirective; }), selector: "[bbConsentRequestWidgetCustomizable]" }, { type: i0__namespace.forwardRef(function () { return i2__namespace$2.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0__namespace.forwardRef(function () { return i7__namespace.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "async": i0__namespace.forwardRef(function () { return i2__namespace$2.AsyncPipe; }), "bbDate": i0__namespace.forwardRef(function () { return i12__namespace.BbDatePipe; }) } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentRequestContainerComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-consent-request-container',
                        templateUrl: './consent-request-container.component.html',
                    }]
            }], ctorParameters: function () { return [{ type: ConsentRequestService }, { type: i2__namespace$3.ActivatedRoute }, { type: ConsentRequestPreferencesService }]; }, propDecorators: { redirectToAllowUrl: [{
                    type: i0.Output
                }], redirectToRejectUrl: [{
                    type: i0.Output
                }], notificationErrorTemplate: [{
                    type: i0.ViewChild,
                    args: ['notificationError']
                }] } });
    var ConsentRequestWidgetCustomizableDirective = /** @class */ (function (_super) {
        __extends(ConsentRequestWidgetCustomizableDirective, _super);
        function ConsentRequestWidgetCustomizableDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return ConsentRequestWidgetCustomizableDirective;
    }(i1$1.BbTemplate));
    ConsentRequestWidgetCustomizableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentRequestWidgetCustomizableDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    ConsentRequestWidgetCustomizableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: ConsentRequestWidgetCustomizableDirective, selector: "[bbConsentRequestWidgetCustomizable]", usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentRequestWidgetCustomizableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[bbConsentRequestWidgetCustomizable]',
                    }]
            }] });

    var ConsentRequestWidgetComponent = /** @class */ (function () {
        function ConsentRequestWidgetComponent(consentRequestPreferencesService) {
            this.consentRequestPreferencesService = consentRequestPreferencesService;
            /**
             * Emitter that fires when allowing consent
             */
            this.allowConsentRequestRedirectUrl = new i0.EventEmitter();
            /**
             * Emitter that fires when rejecting consent
             */
            this.rejectConsentRequestRedirectUrl = new i0.EventEmitter();
        }
        Object.defineProperty(ConsentRequestWidgetComponent.prototype, "multiAccountSelection", {
            /**
             * Allow multi account selection
             */
            set: function (value) {
                this.consentRequestPreferencesService.multiAccountSelectionInput.next(value);
            },
            enumerable: false,
            configurable: true
        });
        ConsentRequestWidgetComponent.prototype.redirectToAllowUrl = function (url) {
            this.allowConsentRequestRedirectUrl.next(url);
        };
        ConsentRequestWidgetComponent.prototype.redirectToRejectUrl = function (url) {
            this.rejectConsentRequestRedirectUrl.next(url);
        };
        return ConsentRequestWidgetComponent;
    }());
    ConsentRequestWidgetComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentRequestWidgetComponent, deps: [{ token: ConsentRequestPreferencesService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ConsentRequestWidgetComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ConsentRequestWidgetComponent, selector: "bb-consent-request-widget", inputs: { multiAccountSelection: "multiAccountSelection" }, outputs: { allowConsentRequestRedirectUrl: "allowConsentRequestRedirectUrl", rejectConsentRequestRedirectUrl: "rejectConsentRequestRedirectUrl" }, providers: [ConsentRequestService, ConsentRequestPreferencesService], ngImport: i0__namespace, template: "\n    <bb-consent-request-container\n      (redirectToAllowUrl)=\"redirectToAllowUrl($event)\"\n      (redirectToRejectUrl)=\"redirectToRejectUrl($event)\"></bb-consent-request-container>\n  ", isInline: true, components: [{ type: ConsentRequestContainerComponent, selector: "bb-consent-request-container", outputs: ["redirectToAllowUrl", "redirectToRejectUrl"] }] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentRequestWidgetComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'bb-consent-request-widget',
                        template: "\n    <bb-consent-request-container\n      (redirectToAllowUrl)=\"redirectToAllowUrl($event)\"\n      (redirectToRejectUrl)=\"redirectToRejectUrl($event)\"></bb-consent-request-container>\n  ",
                        providers: [ConsentRequestService, ConsentRequestPreferencesService],
                    }]
            }], ctorParameters: function () { return [{ type: ConsentRequestPreferencesService }]; }, propDecorators: { multiAccountSelection: [{
                    type: i0.Input
                }], allowConsentRequestRedirectUrl: [{
                    type: i0.Output
                }], rejectConsentRequestRedirectUrl: [{
                    type: i0.Output
                }] } });

    var components = [
        ConsentRequestWidgetComponent,
        ConsentRequestErrorComponent,
        ConsentRequestPermissionsInformationComponent,
        ConsentRequestTppInformationComponent,
        ConsentRequestAccountSelectorComponent,
        ConsentRequestContainerComponent,
    ];
    var directives = [
        ConsentRequestWidgetCustomizableDirective,
        ConsentRequestPermissionsInformationCustomizableDirective,
        ConsentRequestTppInformationCustomizableDirective,
        ConsentRequestAccountSelectorCustomizableDirective,
    ];
    var uiModules = [
        i1$2.ConsentUiModule,
        i7.ButtonModule,
        i1$4.EmptyStateModule,
        i3.ProductItemBasicAccountModule,
        i1$3.AccountSelectorModule,
        i4$1.AlertModule,
        i8$1.LoadingIndicatorModule,
        i12.BbDatePipeModule,
        i2.NotificationModule,
        i4.AmountModule,
        i2$1.SearchBoxModule,
        i8.HighlightModule,
    ];
    var ConsentRequestWidgetModule = /** @class */ (function () {
        function ConsentRequestWidgetModule() {
        }
        return ConsentRequestWidgetModule;
    }());
    ConsentRequestWidgetModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentRequestWidgetModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ConsentRequestWidgetModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentRequestWidgetModule, declarations: [ConsentRequestWidgetComponent,
            ConsentRequestErrorComponent,
            ConsentRequestPermissionsInformationComponent,
            ConsentRequestTppInformationComponent,
            ConsentRequestAccountSelectorComponent,
            ConsentRequestContainerComponent, ConsentRequestWidgetCustomizableDirective,
            ConsentRequestPermissionsInformationCustomizableDirective,
            ConsentRequestTppInformationCustomizableDirective,
            ConsentRequestAccountSelectorCustomizableDirective], imports: [i2$2.CommonModule, i1$2.ConsentUiModule,
            i7.ButtonModule,
            i1$4.EmptyStateModule,
            i3.ProductItemBasicAccountModule,
            i1$3.AccountSelectorModule,
            i4$1.AlertModule,
            i8$1.LoadingIndicatorModule,
            i12.BbDatePipeModule,
            i2.NotificationModule,
            i4.AmountModule,
            i2$1.SearchBoxModule,
            i8.HighlightModule, i1__namespace$1.BackbaseCoreModule, i6.ReactiveFormsModule], exports: [ConsentRequestWidgetComponent,
            ConsentRequestErrorComponent,
            ConsentRequestPermissionsInformationComponent,
            ConsentRequestTppInformationComponent,
            ConsentRequestAccountSelectorComponent,
            ConsentRequestContainerComponent, ConsentRequestWidgetCustomizableDirective,
            ConsentRequestPermissionsInformationCustomizableDirective,
            ConsentRequestTppInformationCustomizableDirective,
            ConsentRequestAccountSelectorCustomizableDirective, i1$2.ConsentUiModule,
            i7.ButtonModule,
            i1$4.EmptyStateModule,
            i3.ProductItemBasicAccountModule,
            i1$3.AccountSelectorModule,
            i4$1.AlertModule,
            i8$1.LoadingIndicatorModule,
            i12.BbDatePipeModule,
            i2.NotificationModule,
            i4.AmountModule,
            i2$1.SearchBoxModule,
            i8.HighlightModule] });
    ConsentRequestWidgetModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentRequestWidgetModule, imports: [__spreadArray(__spreadArray([
                i2$2.CommonModule
            ], __read(uiModules)), [
                i1$1.BackbaseCoreModule.withConfig({
                    classMap: { ConsentRequestWidgetComponent: ConsentRequestWidgetComponent },
                }),
                i6.ReactiveFormsModule,
            ]), i1$2.ConsentUiModule,
            i7.ButtonModule,
            i1$4.EmptyStateModule,
            i3.ProductItemBasicAccountModule,
            i1$3.AccountSelectorModule,
            i4$1.AlertModule,
            i8$1.LoadingIndicatorModule,
            i12.BbDatePipeModule,
            i2.NotificationModule,
            i4.AmountModule,
            i2$1.SearchBoxModule,
            i8.HighlightModule] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0__namespace, type: ConsentRequestWidgetModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: __spreadArray(__spreadArray([
                            i2$2.CommonModule
                        ], __read(uiModules)), [
                            i1$1.BackbaseCoreModule.withConfig({
                                classMap: { ConsentRequestWidgetComponent: ConsentRequestWidgetComponent },
                            }),
                            i6.ReactiveFormsModule,
                        ]),
                        declarations: __spreadArray(__spreadArray([], __read(components)), __read(directives)),
                        exports: __spreadArray(__spreadArray(__spreadArray([], __read(components)), __read(directives)), __read(uiModules)),
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.ConsentRequestWidgetComponent = ConsentRequestWidgetComponent;
    exports.ConsentRequestWidgetModule = ConsentRequestWidgetModule;
    exports.Permission = Permission;
    exports["ӨConsentRequestAccountSelectorComponent"] = ConsentRequestAccountSelectorComponent;
    exports["ӨConsentRequestAccountSelectorCustomizableDirective"] = ConsentRequestAccountSelectorCustomizableDirective;
    exports["ӨConsentRequestContainerComponent"] = ConsentRequestContainerComponent;
    exports["ӨConsentRequestErrorComponent"] = ConsentRequestErrorComponent;
    exports["ӨConsentRequestPermissionsInformationComponent"] = ConsentRequestPermissionsInformationComponent;
    exports["ӨConsentRequestPermissionsInformationCustomizableDirective"] = ConsentRequestPermissionsInformationCustomizableDirective;
    exports["ӨConsentRequestTppInformationComponent"] = ConsentRequestTppInformationComponent;
    exports["ӨConsentRequestTppInformationCustomizableDirective"] = ConsentRequestTppInformationCustomizableDirective;
    exports["ӨConsentRequestWidgetCustomizableDirective"] = ConsentRequestWidgetCustomizableDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-consent-request-widget-ang.umd.js.map
