import { TemplateRef } from '@angular/core';
import { Observable, BehaviorSubject } from 'rxjs';
import { ConsentRequestsHttpService, ConsentsHttpService, ConsentRequest, Account } from '@backbase/data-ang/consent';
import { NotificationService } from '@backbase/ui-ang/notification';
import { ConsentRequestError } from './consent-request-error';
import * as i0 from "@angular/core";
export { ConsentRequest, Account, Tpp } from '@backbase/data-ang/consent';
export interface RedirectUrl {
    redirectUrl?: string;
}
export declare class ConsentRequestService {
    private readonly consentReqService;
    private readonly consentHttpService;
    private readonly notification;
    constructor(consentReqService: ConsentRequestsHttpService, consentHttpService: ConsentsHttpService, notification: NotificationService);
    private readonly consentRequestId;
    readonly loading: BehaviorSubject<boolean>;
    readonly error: BehaviorSubject<ConsentRequestError | undefined>;
    readonly saving: BehaviorSubject<boolean>;
    readonly savingError: BehaviorSubject<ConsentRequestError | undefined>;
    readonly consentRequest: Observable<ConsentRequest | undefined>;
    getConsentRequestFrom(consentRequestId: Observable<string>): void;
    /**
     * Function for allow consent request
     * @param account - accounts list
     * @param templateRef - template for notification
     */
    allowConsentRequest(account: Array<Account>, templateRef: TemplateRef<any> | string): Observable<RedirectUrl>;
    rejectConsentRequest(templateRef: TemplateRef<any> | string): Observable<RedirectUrl>;
    private handleError;
    private loadConsentRequest;
    private allow;
    private reject;
    static ɵfac: i0.ɵɵFactoryDeclaration<ConsentRequestService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<ConsentRequestService>;
}
