import { TemplateRef, EventEmitter, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { Observable } from 'rxjs';
import { BbTemplate } from '@backbase/foundation-ang/core';
import { ConsentRequestService, ConsentRequest, Account } from '../consent-request.service';
import { ConsentRequestError } from '../consent-request-error';
import { ConsentRequestPreferencesService } from '../consent-request-preferences.service';
import * as i0 from "@angular/core";
export declare class ConsentRequestContainerComponent implements OnInit {
    private readonly service;
    private readonly route;
    private consentRequestPreferencesService;
    /**
     * Component context
     */
    readonly hostRef: ConsentRequestContainerComponent;
    /**
     * Stream for Multi-account selection usage flag.
     * If true used a multi-selection account selector, else a single selection account selector.
     * Retrieving value from CXP manager.
     */
    readonly multiAccountSelection$: Observable<boolean>;
    /**
     * Emitter that fires when allowing consent
     */
    redirectToAllowUrl: EventEmitter<string>;
    /**
     * Emitter that fires when rejecting consent
     */
    redirectToRejectUrl: EventEmitter<string>;
    /**
     * Notification error template reference
     */
    notificationErrorTemplate: TemplateRef<any> | string;
    /**
     * Stream of Consent Request ID
     */
    readonly consentRequestId: Observable<string>;
    /**
     * Stream of loading spinner visibility flag
     */
    readonly loading: Observable<boolean>;
    /**
     * Stream of Consent request errors
     */
    readonly error: Observable<ConsentRequestError | undefined>;
    /**
     * Stream of saving state flag
     */
    readonly saving: Observable<boolean>;
    /**
     * Stream of saving consent request error
     */
    readonly savingError: Observable<ConsentRequestError | undefined>;
    /**
     * Stream of get consentRequest
     */
    readonly consentRequest: Observable<ConsentRequest | undefined>;
    /**
     * List of selected accounts from account selector
     */
    selectedAccount: Array<Account> | undefined;
    /**
     * Flag for show account error
     */
    showAccountError: boolean;
    /**
     * Function for allow consent request
     */
    allowConsentRequest(): void;
    /**
     * Function for reject consent request
     */
    rejectConsentRequest(): void;
    ngOnInit(): void;
    constructor(service: ConsentRequestService, route: ActivatedRoute, consentRequestPreferencesService: ConsentRequestPreferencesService);
    private getRouteParam;
    static ɵfac: i0.ɵɵFactoryDeclaration<ConsentRequestContainerComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ConsentRequestContainerComponent, "bb-consent-request-container", never, {}, { "redirectToAllowUrl": "redirectToAllowUrl"; "redirectToRejectUrl": "redirectToRejectUrl"; }, never, never>;
}
export declare class ConsentRequestWidgetCustomizableDirective extends BbTemplate<ConsentRequestContainerComponent, {
    consentRequest: ConsentRequest | undefined | null;
    multiAccountSelection: boolean | null;
}> {
    static ɵfac: i0.ɵɵFactoryDeclaration<ConsentRequestWidgetCustomizableDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<ConsentRequestWidgetCustomizableDirective, "[bbConsentRequestWidgetCustomizable]", never, {}, {}, never>;
}
