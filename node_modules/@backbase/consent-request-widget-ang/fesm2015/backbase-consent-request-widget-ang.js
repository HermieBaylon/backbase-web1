import * as i0 from '@angular/core';
import { Injectable, Optional, Component, Input, Directive, EventEmitter, Output, ViewChild, NgModule } from '@angular/core';
import * as i2$2 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i1$1 from '@backbase/foundation-ang/core';
import { BbTemplate, BackbaseCoreModule } from '@backbase/foundation-ang/core';
import * as i1$2 from '@backbase/consent-ui';
import { ConsentUiModule } from '@backbase/consent-ui';
import * as i6 from '@angular/forms';
import { FormGroup, FormControl, ReactiveFormsModule } from '@angular/forms';
import * as i7 from '@backbase/ui-ang/button';
import { ButtonModule } from '@backbase/ui-ang/button';
import * as i1$4 from '@backbase/ui-ang/empty-state';
import { EmptyStateModule } from '@backbase/ui-ang/empty-state';
import * as i8$1 from '@backbase/ui-ang/loading-indicator';
import { LoadingIndicatorModule } from '@backbase/ui-ang/loading-indicator';
import * as i3 from '@backbase/ui-ang/product-item-basic-account';
import { ProductItemBasicAccountModule } from '@backbase/ui-ang/product-item-basic-account';
import * as i4$1 from '@backbase/ui-ang/alert';
import { AlertModule } from '@backbase/ui-ang/alert';
import * as i12 from '@backbase/ui-ang/date-pipe';
import { BbDatePipeModule } from '@backbase/ui-ang/date-pipe';
import * as i2 from '@backbase/ui-ang/notification';
import { NotificationModule } from '@backbase/ui-ang/notification';
import * as i1$3 from '@backbase/ui-ang/account-selector';
import { AccountSelectorModule } from '@backbase/ui-ang/account-selector';
import * as i4 from '@backbase/ui-ang/amount';
import { AmountModule } from '@backbase/ui-ang/amount';
import * as i2$1 from '@backbase/ui-ang/search-box';
import { SearchBoxModule } from '@backbase/ui-ang/search-box';
import * as i8 from '@backbase/ui-ang/highlight';
import { HighlightModule } from '@backbase/ui-ang/highlight';
import { ReplaySubject, BehaviorSubject, of, combineLatest, Subject } from 'rxjs';
import { filter, distinctUntilChanged, tap, switchMap, catchError, shareReplay, take, pluck, map, takeUntil } from 'rxjs/operators';
import * as i1 from '@backbase/data-ang/consent';
import * as i2$3 from '@angular/router';

class ConsentRequestAccessDenied {
    constructor(error) {
        this.error = error;
        this.kind = 'ConsentRequestAccessDenied';
    }
}
class ConsentRequestNotFound {
    constructor(error) {
        this.error = error;
        this.kind = 'ConsentRequestNotFound';
    }
}
class ConsentRequestBadRequest {
    constructor(error) {
        this.error = error;
        this.kind = 'ConsentRequestBadRequest';
    }
}
class ConsentRequestUnknownError {
    constructor(error) {
        this.error = error;
        this.kind = 'ConsentRequestUnknownError';
    }
}
class ConsentRequestConnectivityError {
    constructor(error) {
        this.error = error;
        this.kind = 'ConsentRequestConnectivityError';
    }
}
const parseError = (error) => {
    if (error.error instanceof ErrorEvent) {
        return new ConsentRequestUnknownError(error);
    }
    else {
        switch (error.status) {
            case 0:
                return new ConsentRequestConnectivityError(error);
            case 400:
                return new ConsentRequestBadRequest(error);
            case 401:
                return new ConsentRequestAccessDenied(error);
            case 403:
                return new ConsentRequestAccessDenied(error);
            case 404:
                return new ConsentRequestNotFound(error);
            default:
                return new ConsentRequestUnknownError(error);
        }
    }
};

class ConsentRequestService {
    constructor(consentReqService, consentHttpService, notification) {
        this.consentReqService = consentReqService;
        this.consentHttpService = consentHttpService;
        this.notification = notification;
        this.consentRequestId = new ReplaySubject(1);
        this.loading = new BehaviorSubject(true);
        this.error = new BehaviorSubject(undefined);
        this.saving = new BehaviorSubject(false);
        this.savingError = new BehaviorSubject(undefined);
        this.consentRequest = this.consentRequestId.pipe(filter((id) => !!id), distinctUntilChanged(), tap(() => this.loading.next(true)), switchMap((id) => this.loadConsentRequest(id)), tap(() => this.error.next(undefined)), catchError((error) => {
            this.error.next(error);
            return of(undefined);
        }), tap(() => this.loading.next(false)), shareReplay(1));
    }
    getConsentRequestFrom(consentRequestId) {
        consentRequestId.subscribe(this.consentRequestId);
    }
    /**
     * Function for allow consent request
     * @param account - accounts list
     * @param templateRef - template for notification
     */
    allowConsentRequest(account, templateRef) {
        return this.consentRequest.pipe(take(1), filter((consentRequest) => !!consentRequest), tap(() => this.saving.next(true)), switchMap((consentRequest) => this.allow(consentRequest, account)), tap(() => this.savingError.next(undefined)), catchError((error) => this.handleError(error, templateRef)), tap(() => this.saving.next(false)));
    }
    rejectConsentRequest(templateRef) {
        return this.consentRequest.pipe(take(1), filter((consentRequest) => consentRequest !== undefined), tap(() => this.saving.next(true)), switchMap((consentRequest) => this.reject(consentRequest)), tap(() => this.savingError.next(undefined)), catchError((error) => this.handleError(error, templateRef)), tap(() => this.saving.next(false)));
    }
    handleError(error, templateRef) {
        this.savingError.next(error);
        if (templateRef) {
            this.notification.showNotification({
                header: templateRef,
                message: '',
                modifier: 'error',
            });
        }
        return of({});
    }
    loadConsentRequest(id) {
        return this.consentReqService.getIdById({ id }, 'response').pipe(pluck('body'), catchError((error) => {
            throw parseError(error);
        }));
    }
    allow({ id: consentRequestId, allowConsentRedirectUrl: redirectUrl }, accounts) {
        return this.consentHttpService
            .postConsents({
            consentPost: {
                consentRequestId,
                accounts: accounts.map((account) => account.id),
            },
        }, 'response')
            .pipe(pluck('body'), map(() => ({ redirectUrl })), catchError((error) => {
            throw parseError(error);
        }));
    }
    reject({ id, rejectConsentRedirectUrl: redirectUrl }) {
        return this.consentReqService.postRejectById({ id }, 'response').pipe(map(() => ({ redirectUrl })), catchError((error) => {
            throw parseError(error);
        }));
    }
}
ConsentRequestService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentRequestService, deps: [{ token: i1.ConsentRequestsHttpService }, { token: i1.ConsentsHttpService }, { token: i2.NotificationService }], target: i0.ɵɵFactoryTarget.Injectable });
ConsentRequestService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentRequestService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentRequestService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.ConsentRequestsHttpService }, { type: i1.ConsentsHttpService }, { type: i2.NotificationService }]; } });

class ConsentRequestPreferencesService {
    constructor(itemModel) {
        this.itemModel = itemModel;
        /**
         * Stream of multiAccountSelection property (based on CXP value)
         */
        this.multiAccountSelectionItemModel = this.getItemModelProperty('multiAccountSelection', false).pipe(map(Boolean));
        /**
         * Stream of multiAccountSelection property (based on INPUT value)
         */
        this.multiAccountSelectionInput = new BehaviorSubject(false);
        /**
         * Stream of multiAccountSelection property (based on BOTH values)
         */
        this.multiAccountSelection$ = this.getProperty(this.multiAccountSelectionInput, this.multiAccountSelectionItemModel);
    }
    getProperty(input$, itemModel) {
        return combineLatest([input$, itemModel]).pipe(map(([value, valueIM]) => (value === undefined ? valueIM : value)));
    }
    getItemModelProperty(name, defaultVal) {
        var _a;
        return ((_a = this.itemModel) === null || _a === void 0 ? void 0 : _a.property(name, defaultVal)) || of(defaultVal);
    }
}
ConsentRequestPreferencesService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentRequestPreferencesService, deps: [{ token: i1$1.ItemModel, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
ConsentRequestPreferencesService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentRequestPreferencesService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentRequestPreferencesService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1$1.ItemModel, decorators: [{
                    type: Optional
                }] }]; } });

class ConsentRequestTppInformationComponent {
    constructor() {
        /**
         * Component context
         */
        this.hostRef = this;
    }
}
ConsentRequestTppInformationComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentRequestTppInformationComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ConsentRequestTppInformationComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ConsentRequestTppInformationComponent, selector: "bb-consent-request-tpp-information", inputs: { tpp: "tpp" }, ngImport: i0, template: "<ng-container bbConsentRequestTppInformationCustomizable [bbHostRef]=\"hostRef\" [bbTemplateContext]=\"tpp\">\n</ng-container>\n\n<ng-template bbConsentRequestTppInformationCustomizable let-hostRef let-tpp=\"context\">\n  <div\n    class=\"bb-block--sm bb-text-bold\"\n    i18n=\"Requested by|Third party information@@consent-request.label.requestedBy\"\n    data-role=\"requested-by-label\">\n    Requested by\n  </div>\n\n  <div class=\"card card-sm\">\n    <div class=\"card-body\">\n      <bb-third-party-provider-ui\n        [name]=\"tpp.name\"\n        [url]=\"tpp.website\"\n        [verified]=\"tpp.isTrusted\"\n        [image]=\"tpp.imageUrl\"\n        data-role=\"third-party-provider-label\">\n      </bb-third-party-provider-ui>\n    </div>\n  </div>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i1$2.ӨThirdPartyProviderComponent; }), selector: "bb-third-party-provider-ui", inputs: ["name", "image", "url", "verified", "condensed", "expiryDate", "expired", "showExpire"] }], directives: [{ type: i0.forwardRef(function () { return ConsentRequestTppInformationCustomizableDirective; }), selector: "[bbConsentRequestTppInformationCustomizable]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentRequestTppInformationComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-consent-request-tpp-information',
                    templateUrl: './consent-request-tpp-information.component.html',
                }]
        }], propDecorators: { tpp: [{
                type: Input
            }] } });
class ConsentRequestTppInformationCustomizableDirective extends BbTemplate {
}
ConsentRequestTppInformationCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentRequestTppInformationCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ConsentRequestTppInformationCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: ConsentRequestTppInformationCustomizableDirective, selector: "[bbConsentRequestTppInformationCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentRequestTppInformationCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbConsentRequestTppInformationCustomizable]',
                }]
        }] });

class ConsentRequestAccountSelectorComponent {
    constructor() {
        /**
         * Component context
         */
        this.hostRef = this;
        /**
         * If error should be shown
         */
        this.showError = false;
        /**
         * Flag for multi account selection
         */
        this.multiAccountSelection = false;
        this.searchedFields = ['name', 'balance'];
        this._accounts = [];
        this.allAccounts = [];
        /**
         * Emitter that fires when you select an account
         */
        this.selectedAccountChange = new EventEmitter();
        this.destroy = new Subject();
        this.accountSelector = {
            change: (self, item) => {
                this.onSelectAccount(item);
                self.selectedItem = item;
                self.eventTriggered = '$change';
                self.eventState = item;
            },
            scrollToEnd: (self, event) => {
                self.eventTriggered = '$scrollToEnd';
                self.eventState = event;
            },
        };
        this.form = new FormGroup({
            query: new FormControl(''),
        });
        this.form.get('query').valueChanges.pipe(takeUntil(this.destroy)).subscribe(selectedValue => {
            this._accounts = this.allAccounts.filter((item) => {
                return this.searchedFields.some((field) => item[field].toString().toLocaleLowerCase().indexOf(selectedValue.toLocaleLowerCase()) !== -1);
            });
        });
    }
    /**
     * Setter for List of accounts
     */
    set accounts(value) {
        if (value) {
            this._accounts = value;
            this.allAccounts = value;
        }
    }
    ngOnDestroy() {
        this.destroy.next();
        this.destroy.complete();
    }
    /**
     * Emit selected accounts
     * @param account - account list
     */
    onSelectAccount(account) {
        this.selectedAccountChange.emit(this.multiAccountSelection ? account : [account]);
        this.showError = false;
    }
    checkSelected(item) {
        if (this.selectedAccount) {
            return this.selectedAccount.includes(item);
        }
        return false;
    }
    onSearchClear() {
        // @ts-ignore
        this.form.get('query').setValue('');
    }
    selectAll() {
        this.selectedAccountChange.emit(this.allAccounts);
    }
    unselectAll() {
        this.selectedAccountChange.emit([]);
    }
}
ConsentRequestAccountSelectorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentRequestAccountSelectorComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ConsentRequestAccountSelectorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ConsentRequestAccountSelectorComponent, selector: "bb-consent-request-account-selector", inputs: { showError: "showError", multiAccountSelection: "multiAccountSelection", accounts: "accounts", selectedAccount: "selectedAccount" }, outputs: { selectedAccountChange: "selectedAccountChange" }, ngImport: i0, template: "<ng-container bbConsentRequestAccountSelectorCustomizable [bbHostRef]=\"hostRef\" [bbTemplateContext]=\"_accounts\">\n</ng-container>\n\n<ng-template bbConsentRequestAccountSelectorCustomizable let-hostRef let-accounts=\"context\">\n  <div\n    class=\"bb-block bb-block--sm bb-text-bold\"\n    *ngIf=\"!hostRef.selectedAccount || (hostRef.selectedAccount && hostRef.selectedAccount.length <= 1)\"\n    i18n=\"Account Exposed|Account Exposed label@@consent-request.label.accountExposed\"\n    data-role=\"account-exposed-label\">\n    Account Exposed\n  </div>\n  <div\n    class=\"bb-block bb-block--sm bb-text-bold\"\n    *ngIf=\"hostRef.selectedAccount && hostRef.selectedAccount.length > 1\"\n    i18n=\"Accounts Exposed|Account Exposed label@@consent-request.label.accountsExposed\"\n    data-role=\"accounts-exposed-label\">\n    Accounts Exposed\n  </div>\n\n  <div [ngClass]=\"{ 'border border-danger rounded': hostRef.showError }\">\n    <bb-account-selector-ui\n      data-role=\"account-selector\"\n      [items]=\"accounts\"\n      [highlight]=\"true\"\n      [disableScrollEnd]=\"false\"\n      [filterItems]=\"false\"\n      [multiple]=\"hostRef.multiAccountSelection\"\n      [closeOnSelect]=\"!hostRef.multiAccountSelection\"\n      [dropdownPosition]=\"'bottom'\"\n      [selectedItems]=\"\n        hostRef.multiAccountSelection\n          ? hostRef.selectedAccount\n          : hostRef.selectedAccount\n          ? hostRef.selectedAccount[0]\n          : undefined\n      \"\n      (change)=\"hostRef.accountSelector.change(hostRef.accountSelector, $event)\"\n      (scrollToEnd)=\"hostRef.accountSelector.scrollToEnd(hostRef.accountSelector, $event)\"\n      placeholder=\"Select Accounts\"\n      i18n-placeholder=\"Select Accounts placeholder@@consent-request.account-selector.placeholder\">\n      <ng-template bbCustomOptionsHeader>\n        <div class=\"m-2\">\n          <form [formGroup]=\"hostRef.form\">\n            <bb-search-box-ui\n              formControlName=\"query\"\n              [showClear]=\"true\"\n              [showSearch]=\"true\"\n              (clear)=\"hostRef.onSearchClear($event)\"\n              [autofocus]=\"true\"\n              placeholder=\"Search\"\n              autocomplete=\"off\"\n              i18n-placeholder=\"Search@@consent-request.account-selector-ui.search.placeholder\"></bb-search-box-ui>\n          </form>\n        </div>\n        <div class=\"bb-account-selector--multiple__selected-account-filters\" *ngIf=\"hostRef.multiAccountSelection\">\n          <button\n            (click)=\"hostRef.selectAll()\"\n            bbButton\n            buttonSize=\"sm\"\n            color=\"link\"\n            i18n=\"Select all|Select all text@@consent-request.account-selector-ui.select.all.text\"\n            data-role=\"select-all\">\n            Select all\n          </button>\n          <button\n            (click)=\"hostRef.unselectAll()\"\n            bbButton\n            buttonSize=\"sm\"\n            color=\"link\"\n            i18n=\"Unselect all|Unselect all text@@consent-request.account-selector-ui.unselect.all.text\"\n            data-role=\"unselect-all\">\n            Unselect all\n          </button>\n        </div>\n      </ng-template>\n      <ng-template bbCustomSingleSelectedItemLabel let-item=\"item\">\n        <bb-product-item-basic-account-ui\n          [active]=\"true\"\n          [amount]=\"item.balance\"\n          [currency]=\"item.currency\"\n          [productNumber]=\"item.IBAN || item.BBAN || item.number\"\n          [title]=\"item.name\">\n          <ng-template bbCustomProductItemBasicAccountDetailsFormatter let-amount=\"amount\" let-currency=\"currency\">\n            <bb-amount-ui\n              class=\"font-weight-bold\"\n              [amount]=\"amount\"\n              [currency]=\"currency\"\n              [mapCurrency]=\"false\"></bb-amount-ui>\n          </ng-template>\n        </bb-product-item-basic-account-ui>\n      </ng-template>\n      <ng-template bbCustomOptionItem let-item$=\"item$\" let-item=\"item\">\n        <bb-product-item-basic-account-ui\n          [active]=\"hostRef.checkSelected(item)\"\n          [productNumber]=\"item.IBAN || item.BBAN || item.number\"\n          [amount]=\"item.balance\"\n          [currency]=\"item.currency\"\n          [title]=\"item.name\">\n          <ng-template bbCustomProductItemBasicAccountDetailsFormatter let-amount=\"amount\" let-currency=\"currency\">\n            <bb-amount-ui\n              class=\"bb-highlight bb-product-item__amount\"\n              [amount]=\"amount\"\n              [currency]=\"currency\"\n              [bbHighlight]=\"true\"></bb-amount-ui>\n          </ng-template>\n        </bb-product-item-basic-account-ui>\n      </ng-template>\n    </bb-account-selector-ui>\n  </div>\n  <div\n    *ngIf=\"hostRef.showError\"\n    class=\"text-danger mt-2\"\n    data-role=\"no-accounts-error-message\"\n    i18n=\"Select an account|No account selected label@@consent-request.label.noAccountSelected\">\n    Select an account.\n  </div>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i1$3.AccountSelectorComponent; }), selector: "bb-account-selector-ui", inputs: ["items", "disabled", "notFoundText", "showError", "productNumberFormat", "selectedItems", "multiple", "closeOnSelect", "searchable", "clearable", "placeholder", "loading", "dropdownPosition", "disableScrollEnd", "highlight", "filterItems", "markFirst", "internalFiltering", "virtualScroll", "required", "typeahead", "minTermLength", "typeToSearchText", "aria-describedby", "aria-labelledby", "aria-invalid", "searchFunc", "showCurrencySymbol", "showBankBranchCode", "groupByFn", "groupValueFn", "size", "compareItemsWith"], outputs: ["search", "clearSearch", "scroll", "scrollToEnd", "remove", "change", "filterChange", "focus", "blur"] }, { type: i0.forwardRef(function () { return i2$1.SearchBoxComponent; }), selector: "bb-search-box-ui", inputs: ["placeholder", "maxLength", "squareBorder", "typeaheadOptions", "showSearch", "showClear", "searchLabel", "clearLabel", "autocomplete"], outputs: ["submit", "clear", "valueChange"] }, { type: i0.forwardRef(function () { return i3.ProductItemBasicAccountComponent; }), selector: "bb-product-item-basic-account-ui", inputs: ["title", "productNumber", "productNumberFormat", "currency", "showCurrencySymbol", "amount", "highlight", "productDetailsInfo", "active", "favorite", "favoriteIconColor", "selected", "type", "status", "balanceLabel", "bankBranchCode"] }, { type: i0.forwardRef(function () { return i4.AmountComponent; }), selector: "bb-amount-ui", inputs: ["currency", "showPlusSign", "mapCurrency", "showPercent", "abbreviate", "decimalPlaces", "trailingZeroes", "amount"] }], directives: [{ type: i0.forwardRef(function () { return ConsentRequestAccountSelectorCustomizableDirective; }), selector: "[bbConsentRequestAccountSelectorCustomizable]" }, { type: i0.forwardRef(function () { return i2$2.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i2$2.NgClass; }), selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i0.forwardRef(function () { return i1$3.CustomOptionsHeaderDirective; }), selector: "ng-template[bbCustomOptionsHeader]" }, { type: i0.forwardRef(function () { return i6.ɵNgNoValidate; }), selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i0.forwardRef(function () { return i6.NgControlStatusGroup; }), selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i0.forwardRef(function () { return i6.FormGroupDirective; }), selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i0.forwardRef(function () { return i6.NgControlStatus; }), selector: "[formControlName],[ngModel],[formControl]" }, { type: i0.forwardRef(function () { return i6.FormControlName; }), selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i0.forwardRef(function () { return i7.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }, { type: i0.forwardRef(function () { return i1$3.CustomSingleSelectedItemLabelDirective; }), selector: "ng-template[bbCustomSingleSelectedItemLabel]" }, { type: i0.forwardRef(function () { return i3.CustomProductItemBasicAccountDetailsFormatterDirective; }), selector: "ng-template[bbCustomProductItemBasicAccountDetailsFormatter]" }, { type: i0.forwardRef(function () { return i1$3.CustomOptionItemDirective; }), selector: "ng-template[bbCustomOptionItem]" }, { type: i0.forwardRef(function () { return i8.HighlightDirective; }), selector: "[bbHighlight]", inputs: ["amount", "bbHighlight", "negativeClass", "positiveClass"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentRequestAccountSelectorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-consent-request-account-selector',
                    templateUrl: './consent-request-account-selector.component.html',
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { showError: [{
                type: Input
            }], multiAccountSelection: [{
                type: Input
            }], accounts: [{
                type: Input
            }], selectedAccount: [{
                type: Input
            }], selectedAccountChange: [{
                type: Output
            }] } });
class ConsentRequestAccountSelectorCustomizableDirective extends BbTemplate {
}
ConsentRequestAccountSelectorCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentRequestAccountSelectorCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ConsentRequestAccountSelectorCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: ConsentRequestAccountSelectorCustomizableDirective, selector: "[bbConsentRequestAccountSelectorCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentRequestAccountSelectorCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbConsentRequestAccountSelectorCustomizable]',
                }]
        }] });

const Permission = {
    ReadAccountsDetail: 'ReadAccountsDetail',
    ReadBalances: 'ReadBalances',
    ReadTransactionsDetail: 'ReadTransactionsDetail',
    ReadBeneficiariesDetail: 'ReadBeneficiariesDetail',
    ReadDirectDebits: 'ReadDirectDebits',
    ReadProducts: 'ReadProducts',
    ReadStandingOrdersDetail: 'ReadStandingOrdersDetail',
    ReadTransactionsCredits: 'ReadTransactionsCredits',
    ReadTransactionsDebits: 'ReadTransactionsDebits',
};

class ConsentRequestPermissionsInformationComponent {
    constructor() {
        /**
         * Component context
         */
        this.hostRef = this;
        /**
         * List of permissions
         */
        this.permissions = [];
        /**
         * Permission mapper
         */
        this.Permission = Permission;
    }
    /**
     * Check if permission contains provided permission
     * @param permission
     */
    hasPermission(permission) {
        return this.permissions.includes(permission);
    }
}
ConsentRequestPermissionsInformationComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentRequestPermissionsInformationComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ConsentRequestPermissionsInformationComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ConsentRequestPermissionsInformationComponent, selector: "bb-consent-request-permissions-information", inputs: { permissions: "permissions" }, ngImport: i0, template: "<ng-container\n  bbConsentRequestPermissionsInformationCustomizable\n  [bbHostRef]=\"hostRef\"\n  [bbTemplateContext]=\"permissions\">\n</ng-container>\n\n<ng-template bbConsentRequestPermissionsInformationCustomizable let-hostRef let-permissions=\"context\">\n  <div\n    class=\"bb-block--sm bb-text-bold\"\n    i18n=\"Permission you grant|Permissions you grant label@@consent-request.label.grantPermissions\"\n    data-role=\"permissions-grant-label\">\n    What permissions you grant\n  </div>\n\n  <div class=\"card\">\n    <div class=\"card-section\" *ngIf=\"hostRef.hasPermission(hostRef.Permission.ReadAccountsDetail)\">\n      <div\n        class=\"bb-consent-request__information-label\"\n        data-role=\"account-information-label\"\n        i18n=\"\n          Account Information|Account Information Permission\n          title@@consent-request.label.permission.ReadAccountsDetail.title\">\n        Account information\n      </div>\n      <div\n        class=\"bb-consent-request__account-information\"\n        i18n=\"\n          Account Information details|Account Information Permission\n          subtitle@@consent-request.label.permission.ReadAccountsDetail.subtitle\">\n        Name, number\n      </div>\n    </div>\n\n    <div class=\"card-section\" *ngIf=\"hostRef.hasPermission(hostRef.Permission.ReadBalances)\">\n      <div\n        class=\"bb-consent-request__information-label\"\n        data-role=\"account-balance-label\"\n        i18n=\"Account Balance|Account Balance Permission title@@consent-request.label.permission.ReadBalances.title\">\n        Account balance\n      </div>\n    </div>\n\n    <div class=\"card-section\" *ngIf=\"hostRef.hasPermission(hostRef.Permission.ReadTransactionsDetail)\">\n      <div\n        class=\"bb-consent-request__information-label\"\n        data-role=\"transactions-label\"\n        i18n=\"\n          Transactions|Transaction Details Permission\n          title@@consent-request.label.permission.ReadTransactionsDetail.title\">\n        Transactions\n      </div>\n      <div\n        i18n=\"\n          Transactions details |Transaction Details Permission\n          subtitle@@consent-request.label.permission.ReadTransactionsDetail.subtitle\">\n        Category, amount, date, time, beneficiary details\n      </div>\n    </div>\n\n    <div class=\"card-section\" *ngIf=\"hostRef.hasPermission(hostRef.Permission.ReadBeneficiariesDetail)\">\n      <div\n        class=\"bb-consent-request__information-label\"\n        i18n=\"Beneficiaries|Beneficiaries title@@consent-request.label.permission.ReadBeneficiariesDetail.title\">\n        Beneficiaries details\n      </div>\n    </div>\n\n    <div class=\"card-section\" *ngIf=\"hostRef.hasPermission(hostRef.Permission.ReadDirectDebits)\">\n      <div\n        class=\"bb-consent-request__information-label\"\n        i18n=\"Direct Debits|Direct Debits Permission title@@consent-request.label.permission.ReadDirectDebits.title\">\n        Direct Debits\n      </div>\n    </div>\n\n    <div class=\"card-section\" *ngIf=\"hostRef.hasPermission(hostRef.Permission.ReadProducts)\">\n      <div\n        class=\"bb-consent-request__information-label\"\n        i18n=\"Products|Products Permission title@@consent-request.label.permission.ReadProducts.title\">\n        Products\n      </div>\n    </div>\n\n    <div class=\"card-section\" *ngIf=\"hostRef.hasPermission(hostRef.Permission.ReadStandingOrdersDetail)\">\n      <div\n        class=\"bb-consent-request__information-label\"\n        i18n=\"\n          Standing Orders|Standing Orders Permission\n          title@@consent-request.label.permission.ReadStandingOrdersDetail.title\">\n        Standing Orders\n      </div>\n    </div>\n\n    <div class=\"card-section\" *ngIf=\"hostRef.hasPermission(hostRef.Permission.ReadTransactionsCredits)\">\n      <div\n        class=\"bb-consent-request__information-label\"\n        i18n=\"\n          Transactions Credits|Transactions Credits Permission\n          title@@consent-request.label.permission.ReadTransactionsCredits.title\">\n        Transactions Credits\n      </div>\n    </div>\n\n    <div class=\"card-section\" *ngIf=\"hostRef.hasPermission(hostRef.Permission.ReadTransactionsDebits)\">\n      <div\n        class=\"bb-consent-request__information-label\"\n        i18n=\"\n          Transactions Debits|Transactions Debits Permission\n          title@@consent-request.label.permission.ReadTransactionsDebits.title\">\n        Transactions Debits\n      </div>\n    </div>\n  </div>\n</ng-template>\n", directives: [{ type: i0.forwardRef(function () { return ConsentRequestPermissionsInformationCustomizableDirective; }), selector: "[bbConsentRequestPermissionsInformationCustomizable]" }, { type: i0.forwardRef(function () { return i2$2.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentRequestPermissionsInformationComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-consent-request-permissions-information',
                    templateUrl: './consent-request-permissions-information.component.html',
                }]
        }], propDecorators: { permissions: [{
                type: Input
            }] } });
class ConsentRequestPermissionsInformationCustomizableDirective extends BbTemplate {
}
ConsentRequestPermissionsInformationCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentRequestPermissionsInformationCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ConsentRequestPermissionsInformationCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: ConsentRequestPermissionsInformationCustomizableDirective, selector: "[bbConsentRequestPermissionsInformationCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentRequestPermissionsInformationCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbConsentRequestPermissionsInformationCustomizable]',
                }]
        }] });

class ConsentRequestErrorComponent {
}
ConsentRequestErrorComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentRequestErrorComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ConsentRequestErrorComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ConsentRequestErrorComponent, selector: "bb-consent-request-error", inputs: { consentRequestId: "consentRequestId", errorKind: "errorKind" }, ngImport: i0, template: "<bb-empty-state-ui\n  *ngIf=\"!consentRequestId\"\n  title=\"Unexpected Error\"\n  i18n-title=\"\n    Unexpected Error title|Empty state label when there is an unexpected\n    error@@consent-request.error.noConsentRequest.title\"\n  subtitle=\"Something's gone wrong with our server. Please try again later.\"\n  i18n-subtitle=\"\n    Unexpected Error subtitle|Empty state subtitle label when there is an unexpected\n    error@@consent-request.error.noConsentRequest.subtitle\"\n  iconModifier=\"error\"></bb-empty-state-ui>\n<ng-container *ngIf=\"consentRequestId && errorKind\" [ngSwitch]=\"errorKind\">\n  <bb-empty-state-ui\n    *ngSwitchCase=\"'ConsentRequestAccessDenied'\"\n    title=\"Permissions required\"\n    i18n-title=\"\n      Permissions required|Error state label when user does not have permissions to view consent\n      request@@consent-request.error.accessDenied.title\"\n    subtitle=\"You don't have permissions to manage consents.\"\n    i18n-subtitle=\"\n      No Permissions Subtitle|Error state subtitle label when user does not have permissions to view consent\n      requests@@consent-request.error.accessDenied.subtitle\"\n    iconModifier=\"lock\"></bb-empty-state-ui>\n\n  <bb-empty-state-ui\n    *ngSwitchCase=\"'ConsentRequestConnectivityError'\"\n    title=\"Connectivity Error\"\n    i18n-title=\"\n      Connectivity Error title|Empty state label when there is connectivity\n      error@@consent-request.error.connectivity.title\"\n    subtitle=\"Are you connected to the internet? Please check your connection and try again.\"\n    i18n-subtitle=\"\n      Connectivity Error subtitle|Empty state subtitle label when there is connectivity\n      error@@consent-request.error.connectivity.subtitle\"\n    iconModifier=\"error\"></bb-empty-state-ui>\n\n  <!-- This will usually happen on environment misconfiguration -->\n  <!-- ConsentRequestNotFound | ConsentRequestUnknownError | ConsentRequestBadRequest-->\n  <bb-empty-state-ui\n    *ngSwitchDefault\n    title=\"Unexpected Error\"\n    i18n-title=\"\n      Unexpected Error title|Empty state label when there is an unexpected error@@consent-request.error.unexpected.title\"\n    subtitle=\"Something's gone wrong with our server. Please try again later.\"\n    i18n-subtitle=\"\n      Unexpected Error subtitle|Empty state subtitle label when there is an unexpected\n      error@@consent-request.error.unexpected.subtitle\"\n    iconModifier=\"error\"></bb-empty-state-ui>\n</ng-container>\n", components: [{ type: i1$4.EmptyStateComponent, selector: "bb-empty-state-ui", inputs: ["title", "subtitle", "showIcon", "iconClasses", "iconModifier", "iconSize", "iconColor"] }], directives: [{ type: i2$2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2$2.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i2$2.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i2$2.NgSwitchDefault, selector: "[ngSwitchDefault]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentRequestErrorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-consent-request-error',
                    templateUrl: './consent-request-error.component.html',
                }]
        }], propDecorators: { consentRequestId: [{
                type: Input
            }], errorKind: [{
                type: Input
            }] } });

class ConsentRequestContainerComponent {
    constructor(service, route, consentRequestPreferencesService) {
        this.service = service;
        this.route = route;
        this.consentRequestPreferencesService = consentRequestPreferencesService;
        /**
         * Component context
         */
        this.hostRef = this;
        /**
         * Stream for Multi-account selection usage flag.
         * If true used a multi-selection account selector, else a single selection account selector.
         * Retrieving value from CXP manager.
         */
        this.multiAccountSelection$ = this.consentRequestPreferencesService.multiAccountSelection$;
        /**
         * Emitter that fires when allowing consent
         */
        this.redirectToAllowUrl = new EventEmitter();
        /**
         * Emitter that fires when rejecting consent
         */
        this.redirectToRejectUrl = new EventEmitter();
        /**
         * Notification error template reference
         */
        this.notificationErrorTemplate = '';
        /**
         * Stream of Consent Request ID
         */
        this.consentRequestId = this.getRouteParam(this.route, 'consentRequestId').pipe(map(consentRequestId => consentRequestId || ''));
        /**
         * Stream of loading spinner visibility flag
         */
        this.loading = this.service.loading;
        /**
         * Stream of Consent request errors
         */
        this.error = this.service.error;
        /**
         * Stream of saving state flag
         */
        this.saving = this.service.saving;
        /**
         * Stream of saving consent request error
         */
        this.savingError = this.service.savingError;
        /**
         * Stream of get consentRequest
         */
        this.consentRequest = this.service.consentRequest;
        /**
         * Flag for show account error
         */
        this.showAccountError = false;
    }
    /**
     * Function for allow consent request
     */
    allowConsentRequest() {
        if (this.selectedAccount) {
            this.showAccountError = false;
            this.service
                .allowConsentRequest(this.selectedAccount, this.notificationErrorTemplate)
                .pipe(tap((redirect) => {
                if (redirect.redirectUrl) {
                    this.redirectToAllowUrl.emit(redirect.redirectUrl);
                }
            }))
                .subscribe();
        }
        else {
            this.showAccountError = true;
        }
    }
    /**
     * Function for reject consent request
     */
    rejectConsentRequest() {
        this.service
            .rejectConsentRequest(this.notificationErrorTemplate)
            .pipe(tap((response) => {
            if (response.redirectUrl) {
                this.redirectToRejectUrl.emit(response.redirectUrl);
            }
        }))
            .subscribe();
    }
    ngOnInit() {
        this.service.getConsentRequestFrom(this.consentRequestId);
    }
    getRouteParam(route, param) {
        const paramValue = combineLatest(route.paramMap.pipe(pluck('params', param)), route.queryParamMap.pipe(pluck('params', param)), (params, qparams) => {
            return params ? params : qparams;
        });
        if (!route.parent) {
            return paramValue;
        }
        // ensure that level that has actual value keeps it from being cleared
        return combineLatest([paramValue, this.getRouteParam(route.parent, param)]).pipe(map(params => params[0] || params[1]));
    }
}
ConsentRequestContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentRequestContainerComponent, deps: [{ token: ConsentRequestService }, { token: i2$3.ActivatedRoute }, { token: ConsentRequestPreferencesService }], target: i0.ɵɵFactoryTarget.Component });
ConsentRequestContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ConsentRequestContainerComponent, selector: "bb-consent-request-container", outputs: { redirectToAllowUrl: "redirectToAllowUrl", redirectToRejectUrl: "redirectToRejectUrl" }, viewQueries: [{ propertyName: "notificationErrorTemplate", first: true, predicate: ["notificationError"], descendants: true }], ngImport: i0, template: "<ng-container\n  bbConsentRequestWidgetCustomizable\n  [bbHostRef]=\"hostRef\"\n  [bbTemplateContext]=\"{\n    consentRequest: consentRequest | async,\n    multiAccountSelection: multiAccountSelection$ | async\n  }\">\n</ng-container>\n\n<ng-template\n  bbConsentRequestWidgetCustomizable\n  let-hostRef\n  let-consentRequest=\"context.consentRequest\"\n  let-multiAccountSelection=\"context.multiAccountSelection\">\n  <ng-container *ngIf=\"hostRef.consentRequestId | async; else errorTemplate\">\n    <ng-container *ngIf=\"!(hostRef.loading | async) as loading; else loadingTemplate\">\n      <ng-container *ngIf=\"!(hostRef.error | async); else errorTemplate\">\n        <div class=\"bb-consent-request\" *ngIf=\"consentRequest\">\n          <div\n            class=\"bb-heading-2 bb-block--lg\"\n            data-role=\"request-access-label\"\n            i18n=\"Widget header|Third party request access message@@consent-request.label.header\">\n            Third party requested access to your accounts\n          </div>\n\n          <ng-container *ngIf=\"!(hostRef.saving | async); else savingLoadingTemplate\">\n            <bb-alert-ui\n              *ngIf=\"hostRef.savingError | async\"\n              title=\"Unknown error\"\n              i18n-title=\"Unknown Error|Unknown Error Label@@consent-request.label.error.unknown\"\n              message=\"Try to make action again or contact your system administrator.\"\n              i18n-message=\"Try again|Try again error message@@consent-request.label.error.tryAgain\"\n              data-role=\"allow-consent-request-error\"></bb-alert-ui>\n\n            <div class=\"bb-block--lg\">\n              <bb-consent-request-tpp-information [tpp]=\"consentRequest.tpp\"></bb-consent-request-tpp-information>\n            </div>\n\n            <div class=\"bb-block--lg\">\n              <bb-consent-request-account-selector\n                [multiAccountSelection]=\"multiAccountSelection\"\n                [showError]=\"hostRef.showAccountError\"\n                [accounts]=\"consentRequest.accounts\"\n                [(selectedAccount)]=\"hostRef.selectedAccount\"></bb-consent-request-account-selector>\n            </div>\n\n            <div class=\"bb-block--lg\">\n              <bb-consent-request-permissions-information\n                [permissions]=\"consentRequest.permissions\"></bb-consent-request-permissions-information>\n            </div>\n\n            <div class=\"bb-block--lg\">\n              <div\n                class=\"bb-block--sm bb-text-bold\"\n                data-role=\"expiration-date-label\"\n                i18n=\"Expiration date|Consent expiration date@@consent-request.label.expiryDate\">\n                Expiration date\n              </div>\n\n              <div>{{ consentRequest.expiryDate | bbDate: 'bbShort' }}</div>\n            </div>\n          </ng-container>\n\n          <div class=\"bb-button-bar bb-button-bar--reverse\">\n            <button\n              bbButton\n              [disabled]=\"hostRef.saving | async\"\n              (click)=\"hostRef.allowConsentRequest()\"\n              i18n=\"Allow button|Allow consent request@@consent-request.label.allow\"\n              color=\"primary\"\n              class=\"bb-button-bar__button\"\n              data-role=\"allow-button\">\n              Allow\n            </button>\n            <button\n              bbButton\n              [disabled]=\"hostRef.saving | async\"\n              (click)=\"hostRef.rejectConsentRequest()\"\n              i18n=\"Reject button|Reject consent request@@consent-request.label.reject\"\n              color=\"secondary\"\n              class=\"bb-button-bar__button\"\n              data-role=\"reject-button\">\n              Reject\n            </button>\n          </div>\n\n          <ng-template #savingLoadingTemplate>\n            <div class=\"bb-state-container\">\n              <bb-loading-indicator-ui\n                text=\"Processing the request...\"\n                i18n-text=\"\n                  Processing|Processing the allow/reject request@@consent-request.label.processing\"></bb-loading-indicator-ui>\n            </div>\n          </ng-template>\n        </div>\n      </ng-container>\n    </ng-container>\n\n    <ng-template #loadingTemplate>\n      <div class=\"bb-state-container\">\n        <bb-loading-indicator-ui></bb-loading-indicator-ui>\n      </div>\n    </ng-template>\n  </ng-container>\n\n  <ng-template #errorTemplate>\n    <div class=\"bb-state-container\">\n      <bb-consent-request-error\n        [consentRequestId]=\"hostRef.consentRequestId | async\"\n        [errorKind]=\"$any(hostRef.error | async)?.kind\"></bb-consent-request-error>\n    </div>\n  </ng-template>\n\n  <ng-template #notificationError>\n    <span\n      i18n=\"\n        Operation Failed|Error notification when failing to save request\n        consent@@consent-request.label.notification.error\">\n      Operation failed\n    </span>\n  </ng-template>\n</ng-template>\n", components: [{ type: i0.forwardRef(function () { return i4$1.AlertComponent; }), selector: "bb-alert-ui", inputs: ["modifier", "dismissible", "title", "message"], outputs: ["close"] }, { type: i0.forwardRef(function () { return ConsentRequestTppInformationComponent; }), selector: "bb-consent-request-tpp-information", inputs: ["tpp"] }, { type: i0.forwardRef(function () { return ConsentRequestAccountSelectorComponent; }), selector: "bb-consent-request-account-selector", inputs: ["showError", "multiAccountSelection", "accounts", "selectedAccount"], outputs: ["selectedAccountChange"] }, { type: i0.forwardRef(function () { return ConsentRequestPermissionsInformationComponent; }), selector: "bb-consent-request-permissions-information", inputs: ["permissions"] }, { type: i0.forwardRef(function () { return i8$1.LoadingIndicatorComponent; }), selector: "bb-loading-indicator-ui", inputs: ["text", "loaderSize", "showDelay", "hasBackground", "inline"] }, { type: i0.forwardRef(function () { return ConsentRequestErrorComponent; }), selector: "bb-consent-request-error", inputs: ["consentRequestId", "errorKind"] }], directives: [{ type: i0.forwardRef(function () { return ConsentRequestWidgetCustomizableDirective; }), selector: "[bbConsentRequestWidgetCustomizable]" }, { type: i0.forwardRef(function () { return i2$2.NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i0.forwardRef(function () { return i7.ButtonDirective; }), selector: "button[bbButton]", inputs: ["type", "color", "buttonSize", "block", "circle"] }], pipes: { "async": i0.forwardRef(function () { return i2$2.AsyncPipe; }), "bbDate": i0.forwardRef(function () { return i12.BbDatePipe; }) } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentRequestContainerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-consent-request-container',
                    templateUrl: './consent-request-container.component.html',
                }]
        }], ctorParameters: function () { return [{ type: ConsentRequestService }, { type: i2$3.ActivatedRoute }, { type: ConsentRequestPreferencesService }]; }, propDecorators: { redirectToAllowUrl: [{
                type: Output
            }], redirectToRejectUrl: [{
                type: Output
            }], notificationErrorTemplate: [{
                type: ViewChild,
                args: ['notificationError']
            }] } });
class ConsentRequestWidgetCustomizableDirective extends BbTemplate {
}
ConsentRequestWidgetCustomizableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentRequestWidgetCustomizableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
ConsentRequestWidgetCustomizableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.15", type: ConsentRequestWidgetCustomizableDirective, selector: "[bbConsentRequestWidgetCustomizable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentRequestWidgetCustomizableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bbConsentRequestWidgetCustomizable]',
                }]
        }] });

class ConsentRequestWidgetComponent {
    constructor(consentRequestPreferencesService) {
        this.consentRequestPreferencesService = consentRequestPreferencesService;
        /**
         * Emitter that fires when allowing consent
         */
        this.allowConsentRequestRedirectUrl = new EventEmitter();
        /**
         * Emitter that fires when rejecting consent
         */
        this.rejectConsentRequestRedirectUrl = new EventEmitter();
    }
    /**
     * Allow multi account selection
     */
    set multiAccountSelection(value) {
        this.consentRequestPreferencesService.multiAccountSelectionInput.next(value);
    }
    redirectToAllowUrl(url) {
        this.allowConsentRequestRedirectUrl.next(url);
    }
    redirectToRejectUrl(url) {
        this.rejectConsentRequestRedirectUrl.next(url);
    }
}
ConsentRequestWidgetComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentRequestWidgetComponent, deps: [{ token: ConsentRequestPreferencesService }], target: i0.ɵɵFactoryTarget.Component });
ConsentRequestWidgetComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.15", type: ConsentRequestWidgetComponent, selector: "bb-consent-request-widget", inputs: { multiAccountSelection: "multiAccountSelection" }, outputs: { allowConsentRequestRedirectUrl: "allowConsentRequestRedirectUrl", rejectConsentRequestRedirectUrl: "rejectConsentRequestRedirectUrl" }, providers: [ConsentRequestService, ConsentRequestPreferencesService], ngImport: i0, template: `
    <bb-consent-request-container
      (redirectToAllowUrl)="redirectToAllowUrl($event)"
      (redirectToRejectUrl)="redirectToRejectUrl($event)"></bb-consent-request-container>
  `, isInline: true, components: [{ type: ConsentRequestContainerComponent, selector: "bb-consent-request-container", outputs: ["redirectToAllowUrl", "redirectToRejectUrl"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentRequestWidgetComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'bb-consent-request-widget',
                    template: `
    <bb-consent-request-container
      (redirectToAllowUrl)="redirectToAllowUrl($event)"
      (redirectToRejectUrl)="redirectToRejectUrl($event)"></bb-consent-request-container>
  `,
                    providers: [ConsentRequestService, ConsentRequestPreferencesService],
                }]
        }], ctorParameters: function () { return [{ type: ConsentRequestPreferencesService }]; }, propDecorators: { multiAccountSelection: [{
                type: Input
            }], allowConsentRequestRedirectUrl: [{
                type: Output
            }], rejectConsentRequestRedirectUrl: [{
                type: Output
            }] } });

const components = [
    ConsentRequestWidgetComponent,
    ConsentRequestErrorComponent,
    ConsentRequestPermissionsInformationComponent,
    ConsentRequestTppInformationComponent,
    ConsentRequestAccountSelectorComponent,
    ConsentRequestContainerComponent,
];
const directives = [
    ConsentRequestWidgetCustomizableDirective,
    ConsentRequestPermissionsInformationCustomizableDirective,
    ConsentRequestTppInformationCustomizableDirective,
    ConsentRequestAccountSelectorCustomizableDirective,
];
const uiModules = [
    ConsentUiModule,
    ButtonModule,
    EmptyStateModule,
    ProductItemBasicAccountModule,
    AccountSelectorModule,
    AlertModule,
    LoadingIndicatorModule,
    BbDatePipeModule,
    NotificationModule,
    AmountModule,
    SearchBoxModule,
    HighlightModule,
];
class ConsentRequestWidgetModule {
}
ConsentRequestWidgetModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentRequestWidgetModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
ConsentRequestWidgetModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentRequestWidgetModule, declarations: [ConsentRequestWidgetComponent,
        ConsentRequestErrorComponent,
        ConsentRequestPermissionsInformationComponent,
        ConsentRequestTppInformationComponent,
        ConsentRequestAccountSelectorComponent,
        ConsentRequestContainerComponent, ConsentRequestWidgetCustomizableDirective,
        ConsentRequestPermissionsInformationCustomizableDirective,
        ConsentRequestTppInformationCustomizableDirective,
        ConsentRequestAccountSelectorCustomizableDirective], imports: [CommonModule, ConsentUiModule,
        ButtonModule,
        EmptyStateModule,
        ProductItemBasicAccountModule,
        AccountSelectorModule,
        AlertModule,
        LoadingIndicatorModule,
        BbDatePipeModule,
        NotificationModule,
        AmountModule,
        SearchBoxModule,
        HighlightModule, i1$1.BackbaseCoreModule, ReactiveFormsModule], exports: [ConsentRequestWidgetComponent,
        ConsentRequestErrorComponent,
        ConsentRequestPermissionsInformationComponent,
        ConsentRequestTppInformationComponent,
        ConsentRequestAccountSelectorComponent,
        ConsentRequestContainerComponent, ConsentRequestWidgetCustomizableDirective,
        ConsentRequestPermissionsInformationCustomizableDirective,
        ConsentRequestTppInformationCustomizableDirective,
        ConsentRequestAccountSelectorCustomizableDirective, ConsentUiModule,
        ButtonModule,
        EmptyStateModule,
        ProductItemBasicAccountModule,
        AccountSelectorModule,
        AlertModule,
        LoadingIndicatorModule,
        BbDatePipeModule,
        NotificationModule,
        AmountModule,
        SearchBoxModule,
        HighlightModule] });
ConsentRequestWidgetModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentRequestWidgetModule, imports: [[
            CommonModule,
            ...uiModules,
            BackbaseCoreModule.withConfig({
                classMap: { ConsentRequestWidgetComponent },
            }),
            ReactiveFormsModule,
        ], ConsentUiModule,
        ButtonModule,
        EmptyStateModule,
        ProductItemBasicAccountModule,
        AccountSelectorModule,
        AlertModule,
        LoadingIndicatorModule,
        BbDatePipeModule,
        NotificationModule,
        AmountModule,
        SearchBoxModule,
        HighlightModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: ConsentRequestWidgetModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        ...uiModules,
                        BackbaseCoreModule.withConfig({
                            classMap: { ConsentRequestWidgetComponent },
                        }),
                        ReactiveFormsModule,
                    ],
                    declarations: [...components, ...directives],
                    exports: [...components, ...directives, ...uiModules],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { ConsentRequestWidgetComponent, ConsentRequestWidgetModule, Permission, ConsentRequestAccountSelectorComponent as ӨConsentRequestAccountSelectorComponent, ConsentRequestAccountSelectorCustomizableDirective as ӨConsentRequestAccountSelectorCustomizableDirective, ConsentRequestContainerComponent as ӨConsentRequestContainerComponent, ConsentRequestErrorComponent as ӨConsentRequestErrorComponent, ConsentRequestPermissionsInformationComponent as ӨConsentRequestPermissionsInformationComponent, ConsentRequestPermissionsInformationCustomizableDirective as ӨConsentRequestPermissionsInformationCustomizableDirective, ConsentRequestTppInformationComponent as ӨConsentRequestTppInformationComponent, ConsentRequestTppInformationCustomizableDirective as ӨConsentRequestTppInformationCustomizableDirective, ConsentRequestWidgetCustomizableDirective as ӨConsentRequestWidgetCustomizableDirective };
//# sourceMappingURL=backbase-consent-request-widget-ang.js.map
