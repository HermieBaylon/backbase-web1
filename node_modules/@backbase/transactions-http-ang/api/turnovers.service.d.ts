import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { TurnoversGetResponseBody } from '../model/models';
import { TransactionsConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface GetTurnoversRequestParams {
    ["periodStartDate"]: string;
    ["periodEndDate"]: string;
    ["intervalDuration"]: 'DAY' | 'WEEK' | 'MONTH' | 'YEAR';
    ["arrangementIds"]?: Array<string>;
    ["intervalStartDay"]?: number;
    ["forecast"]?: 'NONE' | 'AVG';
}
export declare class TurnoversHttpService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: TransactionsConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: TransactionsConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    getTurnovers(requestParameters: GetTurnoversRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<TurnoversGetResponseBody>;
    getTurnovers(requestParameters: GetTurnoversRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<TurnoversGetResponseBody>>;
    getTurnovers(requestParameters: GetTurnoversRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<TurnoversGetResponseBody>>;
    getTurnoversUrl(requestParameters: GetTurnoversRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<TurnoversHttpService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<TurnoversHttpService>;
}
