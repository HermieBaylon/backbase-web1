import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { CreditDebitIndicator } from '../model/models';
import { EnumValuesByAttributeNameGetResponseBody } from '../model/models';
import { SortDirection } from '../model/models';
import { TransactionCheckImagesResponse } from '../model/models';
import { TransactionItem } from '../model/models';
import { TransactionListRequest } from '../model/models';
import { TransactionState } from '../model/models';
import { TransactionsClientPatchRequestBody } from '../model/models';
import { TransactionsConfiguration } from '../configuration';
import * as i0 from "@angular/core";
export interface GetEnumValuesByAttributeNameRequestParams {
    ["attributeName"]: string;
    ["subDomain"]?: string;
}
export interface GetTransactionCheckImagesRequestParams {
    ["transactionId"]: string;
}
export interface GetTransactionsRequestParams {
    ["amountGreaterThan"]?: number;
    ["amountLessThan"]?: number;
    ["bookingDateGreaterThan"]?: string;
    ["bookingDateLessThan"]?: string;
    ["types"]?: Array<string>;
    ["description"]?: string;
    ["reference"]?: string;
    ["typeGroups"]?: Array<string>;
    ["counterPartyName"]?: string;
    ["counterPartyAccountNumber"]?: string;
    ["creditDebitIndicator"]?: CreditDebitIndicator;
    ["categories"]?: Array<string>;
    ["billingStatus"]?: string;
    ["state"]?: TransactionState;
    ["currency"]?: string;
    ["notes"]?: number;
    ["id"]?: string;
    ["arrangementId"]?: string;
    ["arrangementsIds"]?: Array<string>;
    ["fromCheckSerialNumber"]?: number;
    ["toCheckSerialNumber"]?: number;
    ["checkSerialNumbers"]?: Array<number>;
    ["query"]?: string;
    ["from"]?: number;
    ["cursor"]?: string;
    ["size"]?: number;
    ["orderBy"]?: string;
    ["direction"]?: SortDirection;
    ["secDirection"]?: SortDirection;
}
export interface GetTransactionsExportRequestParams {
    ["amountGreaterThan"]?: number;
    ["amountLessThan"]?: number;
    ["bookingDateGreaterThan"]?: string;
    ["bookingDateLessThan"]?: string;
    ["types"]?: Array<string>;
    ["categories"]?: Array<string>;
    ["description"]?: string;
    ["reference"]?: string;
    ["typeGroups"]?: Array<string>;
    ["counterPartyName"]?: string;
    ["counterPartyAccountNumber"]?: string;
    ["creditDebitIndicator"]?: CreditDebitIndicator;
    ["billingStatus"]?: string;
    ["state"]?: TransactionState;
    ["currency"]?: string;
    ["notes"]?: number;
    ["id"]?: string;
    ["arrangementId"]?: string;
    ["arrangementsIds"]?: Array<string>;
    ["fromCheckSerialNumber"]?: number;
    ["toCheckSerialNumber"]?: number;
    ["checkSerialNumbers"]?: Array<number>;
    ["query"]?: string;
    ["from"]?: number;
    ["cursor"]?: string;
    ["size"]?: number;
    ["orderBy"]?: string;
    ["direction"]?: SortDirection;
    ["secDirection"]?: SortDirection;
    ["exportType"]?: string;
    ["locale"]?: string;
}
export interface GetTransactionsExportWithPostRequestParams {
    ["transactionListRequest"]: TransactionListRequest;
}
export interface GetTransactionsWithPostRequestParams {
    ["transactionListRequest"]: TransactionListRequest;
}
export interface PatchTransactionsRequestParams {
    ["transactionsClientPatchRequestBody"]: Array<TransactionsClientPatchRequestBody>;
}
export declare class TransactionClientHttpService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: TransactionsConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: TransactionsConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    getEnumValuesByAttributeName(requestParameters: GetEnumValuesByAttributeNameRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<EnumValuesByAttributeNameGetResponseBody>>;
    getEnumValuesByAttributeName(requestParameters: GetEnumValuesByAttributeNameRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<EnumValuesByAttributeNameGetResponseBody>>>;
    getEnumValuesByAttributeName(requestParameters: GetEnumValuesByAttributeNameRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<EnumValuesByAttributeNameGetResponseBody>>>;
    getEnumValuesByAttributeNameUrl(requestParameters: GetEnumValuesByAttributeNameRequestParams): string;
    getTransactionCheckImages(requestParameters: GetTransactionCheckImagesRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<TransactionCheckImagesResponse>;
    getTransactionCheckImages(requestParameters: GetTransactionCheckImagesRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<TransactionCheckImagesResponse>>;
    getTransactionCheckImages(requestParameters: GetTransactionCheckImagesRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<TransactionCheckImagesResponse>>;
    getTransactionCheckImagesUrl(requestParameters: GetTransactionCheckImagesRequestParams): string;
    getTransactions(requestParameters: GetTransactionsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<TransactionItem>>;
    getTransactions(requestParameters: GetTransactionsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<TransactionItem>>>;
    getTransactions(requestParameters: GetTransactionsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<TransactionItem>>>;
    getTransactionsUrl(requestParameters: GetTransactionsRequestParams): string;
    getTransactionsExport(requestParameters: GetTransactionsExportRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/pdf';
    }): Observable<Blob>;
    getTransactionsExport(requestParameters: GetTransactionsExportRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/pdf';
    }): Observable<HttpResponse<Blob>>;
    getTransactionsExport(requestParameters: GetTransactionsExportRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/pdf';
    }): Observable<HttpEvent<Blob>>;
    getTransactionsExport(requestParameters: GetTransactionsExportRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/x-ofx';
    }): Observable<string>;
    getTransactionsExport(requestParameters: GetTransactionsExportRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/x-ofx';
    }): Observable<HttpResponse<string>>;
    getTransactionsExport(requestParameters: GetTransactionsExportRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/x-ofx';
    }): Observable<HttpEvent<string>>;
    getTransactionsExport(requestParameters: GetTransactionsExportRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'text/csv';
    }): Observable<string>;
    getTransactionsExport(requestParameters: GetTransactionsExportRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'text/csv';
    }): Observable<HttpResponse<string>>;
    getTransactionsExport(requestParameters: GetTransactionsExportRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'text/csv';
    }): Observable<HttpEvent<string>>;
    getTransactionsExport(requestParameters: GetTransactionsExportRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Blob>;
    getTransactionsExport(requestParameters: GetTransactionsExportRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Blob>>;
    getTransactionsExport(requestParameters: GetTransactionsExportRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Blob>>;
    getTransactionsExportUrl(requestParameters: GetTransactionsExportRequestParams): string;
    getTransactionsExportWithPost(requestParameters: GetTransactionsExportWithPostRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/pdf';
    }): Observable<Blob>;
    getTransactionsExportWithPost(requestParameters: GetTransactionsExportWithPostRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/pdf';
    }): Observable<HttpResponse<Blob>>;
    getTransactionsExportWithPost(requestParameters: GetTransactionsExportWithPostRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/pdf';
    }): Observable<HttpEvent<Blob>>;
    getTransactionsExportWithPost(requestParameters: GetTransactionsExportWithPostRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/x-ofx';
    }): Observable<string>;
    getTransactionsExportWithPost(requestParameters: GetTransactionsExportWithPostRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/x-ofx';
    }): Observable<HttpResponse<string>>;
    getTransactionsExportWithPost(requestParameters: GetTransactionsExportWithPostRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/x-ofx';
    }): Observable<HttpEvent<string>>;
    getTransactionsExportWithPost(requestParameters: GetTransactionsExportWithPostRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'text/csv';
    }): Observable<string>;
    getTransactionsExportWithPost(requestParameters: GetTransactionsExportWithPostRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'text/csv';
    }): Observable<HttpResponse<string>>;
    getTransactionsExportWithPost(requestParameters: GetTransactionsExportWithPostRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'text/csv';
    }): Observable<HttpEvent<string>>;
    getTransactionsExportWithPost(requestParameters: GetTransactionsExportWithPostRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Blob>;
    getTransactionsExportWithPost(requestParameters: GetTransactionsExportWithPostRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Blob>>;
    getTransactionsExportWithPost(requestParameters: GetTransactionsExportWithPostRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Blob>>;
    getTransactionsExportWithPostUrl(requestParameters: GetTransactionsExportWithPostRequestParams): string;
    getTransactionsWithPost(requestParameters: GetTransactionsWithPostRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<Array<TransactionItem>>;
    getTransactionsWithPost(requestParameters: GetTransactionsWithPostRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<Array<TransactionItem>>>;
    getTransactionsWithPost(requestParameters: GetTransactionsWithPostRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<Array<TransactionItem>>>;
    getTransactionsWithPostUrl(requestParameters: GetTransactionsWithPostRequestParams): string;
    patchTransactions(requestParameters: PatchTransactionsRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<any>;
    patchTransactions(requestParameters: PatchTransactionsRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<any>>;
    patchTransactions(requestParameters: PatchTransactionsRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<any>>;
    patchTransactionsUrl(requestParameters: PatchTransactionsRequestParams): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<TransactionClientHttpService, [null, { optional: true; }, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<TransactionClientHttpService>;
}
