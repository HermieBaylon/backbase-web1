import { createMocks } from '@backbase/foundation-ang/data-http';
export const LeftToSpendHttpServiceGetLeftToSpendMocksProvider = createMocks([{
        urlPattern: "/client-api/v2/left-to-spend",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "daysLeft": 15,
                    "incomeToDate": {
                        "amount": "1000.00",
                        "currencyCode": "EUR"
                    },
                    "spentToDate": {
                        "amount": "200.00",
                        "currencyCode": "EUR"
                    },
                    "schedulePayments": {
                        "total": {
                            "amount": "400.00",
                            "currencyCode": "EUR"
                        },
                        "paymentItems": [{
                                "total": {
                                    "amount": "300.00",
                                    "currencyCode": "EUR"
                                },
                                "name": "paymentOrders"
                            }, {
                                "total": {
                                    "amount": "100.00",
                                    "currencyCode": "EUR"
                                },
                                "name": "billPayPayments"
                            }]
                    },
                    "leftToSpend": {
                        "amount": "400.00",
                        "currencyCode": "EUR"
                    }
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    }]);
export const LeftToSpendHttpServiceMocksProvider = createMocks([
    {
        urlPattern: "/client-api/v2/left-to-spend",
        method: "GET",
        responses: [
            {
                status: 200,
                body: {
                    "daysLeft": 15,
                    "incomeToDate": {
                        "amount": "1000.00",
                        "currencyCode": "EUR"
                    },
                    "spentToDate": {
                        "amount": "200.00",
                        "currencyCode": "EUR"
                    },
                    "schedulePayments": {
                        "total": {
                            "amount": "400.00",
                            "currencyCode": "EUR"
                        },
                        "paymentItems": [{
                                "total": {
                                    "amount": "300.00",
                                    "currencyCode": "EUR"
                                },
                                "name": "paymentOrders"
                            }, {
                                "total": {
                                    "amount": "100.00",
                                    "currencyCode": "EUR"
                                },
                                "name": "billPayPayments"
                            }]
                    },
                    "leftToSpend": {
                        "amount": "400.00",
                        "currencyCode": "EUR"
                    }
                }
            },
            {
                status: 400,
                body: {
                    "message": "Bad Request",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Value Exceeded. Must be between {min} and {max}.",
                            "key": "common.api.shoesize",
                            "context": {
                                "max": "50",
                                "min": "1"
                            }
                        }]
                }
            },
            {
                status: 401,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to invalid credentials.",
                            "key": "common.api.token",
                            "context": {
                                "accessToken": "expired"
                            }
                        }]
                }
            },
            {
                status: 403,
                body: {
                    "message": "Access to requested resource denied.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Resource access denied due to an insufficient user quota of {quota}.",
                            "key": "common.api.quota",
                            "context": {
                                "quota": "someQuota"
                            }
                        }]
                }
            },
            {
                status: 404,
                body: {
                    "message": "Resource not found.",
                    "key": "GENERAL_ERROR",
                    "errors": [{
                            "message": "Unable to find the resource requested resource: {resource}.",
                            "key": "common.api.resource",
                            "context": {
                                "resource": "aResource"
                            }
                        }]
                }
            },
            {
                status: 500,
                body: {
                    "message": "Description of error"
                }
            },
        ]
    },
]);
//# sourceMappingURL=data:application/json;base64,