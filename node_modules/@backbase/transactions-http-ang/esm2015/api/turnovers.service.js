import { Inject, Injectable, Optional } from '@angular/core';
import { HttpHeaders, HttpParams } from '@angular/common/http';
import { CustomHttpParameterCodec } from '../encoder';
import { TRANSACTIONS_BASE_PATH } from '../variables';
import { TransactionsConfiguration } from '../configuration';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../configuration";
export class TurnoversHttpService {
    constructor(httpClient, basePath, configuration) {
        this.httpClient = httpClient;
        this.basePath = '';
        this.defaultHeaders = new HttpHeaders();
        this.configuration = new TransactionsConfiguration();
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }
    addToHttpParams(httpParams, value, key) {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        }
        else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }
    addToHttpParamsRecursive(httpParams, value, key) {
        if (value == null) {
            return httpParams;
        }
        if (typeof value === "object") {
            if (Array.isArray(value)) {
                value.forEach(elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            }
            else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                }
                else {
                    throw Error("key may not be null if value is Date");
                }
            }
            else {
                Object.keys(value).forEach(k => httpParams = this.addToHttpParamsRecursive(httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        }
        else if (key != null) {
            httpParams = httpParams.append(key, value);
        }
        else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }
    getTurnovers(requestParameters, observe = 'body', reportProgress = false, options) {
        const _periodStartDate = requestParameters["periodStartDate"];
        if (_periodStartDate === null || _periodStartDate === undefined) {
            throw new Error('Required parameter periodStartDate was null or undefined when calling getTurnovers.');
        }
        const _periodEndDate = requestParameters["periodEndDate"];
        if (_periodEndDate === null || _periodEndDate === undefined) {
            throw new Error('Required parameter periodEndDate was null or undefined when calling getTurnovers.');
        }
        const _intervalDuration = requestParameters["intervalDuration"];
        if (_intervalDuration === null || _intervalDuration === undefined) {
            throw new Error('Required parameter intervalDuration was null or undefined when calling getTurnovers.');
        }
        const _arrangementIds = requestParameters["arrangementIds"];
        const _intervalStartDay = requestParameters["intervalStartDay"];
        const _forecast = requestParameters["forecast"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_arrangementIds) {
            _arrangementIds.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'arrangementIds');
            });
        }
        if (_periodStartDate !== undefined && _periodStartDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _periodStartDate, 'periodStartDate');
        }
        if (_periodEndDate !== undefined && _periodEndDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _periodEndDate, 'periodEndDate');
        }
        if (_intervalDuration !== undefined && _intervalDuration !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _intervalDuration, 'intervalDuration');
        }
        if (_intervalStartDay !== undefined && _intervalStartDay !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _intervalStartDay, 'intervalStartDay');
        }
        if (_forecast !== undefined && _forecast !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _forecast, 'forecast');
        }
        let headers = this.defaultHeaders;
        let httpHeaderAcceptSelected = options && options.httpHeaderAccept;
        if (httpHeaderAcceptSelected === undefined) {
            const httpHeaderAccepts = [
                'application/json'
            ];
            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }
        let responseType = 'json';
        if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
            responseType = 'text';
        }
        return this.httpClient.get(`${this.configuration.basePath}/client-api/v2/turnovers`, {
            params: queryParameters,
            responseType: responseType,
            withCredentials: this.configuration.withCredentials,
            headers: headers,
            observe: observe,
            reportProgress: reportProgress
        });
    }
    getTurnoversUrl(requestParameters) {
        const _periodStartDate = requestParameters["periodStartDate"];
        if (_periodStartDate === null || _periodStartDate === undefined) {
            throw new Error('Required parameter periodStartDate was null or undefined when calling getTurnovers.');
        }
        const _periodEndDate = requestParameters["periodEndDate"];
        if (_periodEndDate === null || _periodEndDate === undefined) {
            throw new Error('Required parameter periodEndDate was null or undefined when calling getTurnovers.');
        }
        const _intervalDuration = requestParameters["intervalDuration"];
        if (_intervalDuration === null || _intervalDuration === undefined) {
            throw new Error('Required parameter intervalDuration was null or undefined when calling getTurnovers.');
        }
        const _arrangementIds = requestParameters["arrangementIds"];
        const _intervalStartDay = requestParameters["intervalStartDay"];
        const _forecast = requestParameters["forecast"];
        let queryParameters = new HttpParams({ encoder: this.encoder });
        if (_arrangementIds) {
            _arrangementIds.forEach((element) => {
                queryParameters = this.addToHttpParams(queryParameters, element, 'arrangementIds');
            });
        }
        if (_periodStartDate !== undefined && _periodStartDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _periodStartDate, 'periodStartDate');
        }
        if (_periodEndDate !== undefined && _periodEndDate !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _periodEndDate, 'periodEndDate');
        }
        if (_intervalDuration !== undefined && _intervalDuration !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _intervalDuration, 'intervalDuration');
        }
        if (_intervalStartDay !== undefined && _intervalStartDay !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _intervalStartDay, 'intervalStartDay');
        }
        if (_forecast !== undefined && _forecast !== null) {
            queryParameters = this.addToHttpParams(queryParameters, _forecast, 'forecast');
        }
        const queryString = queryParameters.toString();
        return `${this.configuration.basePath}/client-api/v2/turnovers${queryString ? `?${queryString}` : ''}`;
    }
}
TurnoversHttpService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TurnoversHttpService, deps: [{ token: i1.HttpClient }, { token: TRANSACTIONS_BASE_PATH, optional: true }, { token: i2.TransactionsConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
TurnoversHttpService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TurnoversHttpService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.15", ngImport: i0, type: TurnoversHttpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TRANSACTIONS_BASE_PATH]
                }] }, { type: i2.TransactionsConfiguration, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,